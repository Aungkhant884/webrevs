{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -59,1 +58,1 @@\n-public final class StripNativeDebugSymbolsPlugin implements Plugin {\n+public final class StripNativeDebugSymbolsPlugin extends AbstractPlugin {\n@@ -95,0 +94,1 @@\n+        super(NAME, resourceBundle);\n@@ -98,5 +98,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -140,4 +135,3 @@\n-        String msg = PluginsResourceBundle.getMessage(resourceBundle,\n-                                                      msgKey,\n-                                                      NAME,\n-                                                      resource.path());\n+        String msg = getMessage(msgKey,\n+                                NAME,\n+                                resource.path());\n@@ -152,6 +146,0 @@\n-    @Override\n-    public String getDescription() {\n-        String key = NAME + \".description\";\n-        return PluginsResourceBundle.getMessage(resourceBundle, key);\n-    }\n-\n@@ -163,6 +151,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        String key = NAME + \".argument\";\n-        return PluginsResourceBundle.getMessage(resourceBundle, key);\n-    }\n-\n@@ -199,2 +181,1 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".iae\", NAME, arg));\n+                        getMessage(NAME + \".iae\", NAME, arg));\n@@ -214,2 +195,1 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".iae\", NAME, arg));\n+                        getMessage(NAME + \".iae\", NAME, arg));\n@@ -249,5 +229,4 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae.conflict\",\n-                                                     NAME,\n-                                                     EXCLUDE_DEBUG_INFO_ARG,\n-                                                     KEEP_DEBUG_INFO_ARG));\n+                    getMessage(NAME + \".iae.conflict\",\n+                               NAME,\n+                               EXCLUDE_DEBUG_INFO_ARG,\n+                               KEEP_DEBUG_INFO_ARG));\n@@ -260,2 +239,1 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae\", NAME, arg));\n+                    getMessage(NAME + \".iae\", NAME, arg));\n@@ -266,3 +244,2 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae\", NAME,\n-                                                     config.toString()));\n+                    getMessage(NAME + \".iae\", NAME,\n+                               config.toString()));\n@@ -278,3 +255,2 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".invalidstrip\",\n-                                                         stripArg));\n+                        getMessage(NAME + \".invalidstrip\",\n+                                   stripArg));\n@@ -284,3 +260,2 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".invalidstrip\",\n-                                                     e.getInput()));\n+                    getMessage(NAME + \".invalidstrip\",\n+                               e.getInput()));\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeDebugSymbolsPlugin.java","additions":18,"deletions":43,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -38,0 +38,18 @@\n+\n+strip-native-debug-symbols.usage=\\\n+\\  --strip-native-debug-symbols \\\n+\\      <exclude-debuginfo-files|keep-debuginfo-files|objcopy=PATH_TO_OBJ>\\n\\\n+\\                            Strip debug symbols from native libraries (if any). \\n\\\n+\\                            This plugin requires at least one option:\\n\\\n+\\                               objcopy: The path to the 'objcopy' binary.\\n\\\n+\\                                        Defaults to 'objcopy' in PATH.\\n\\\n+\\                               exclude-debuginfo-files: Exclude debug info \\n\\\n+\\                                        files. Defaults to true.\\n\\\n+\\                               keep-debuginfo-files[=<ext>]: Keep debug info\\n\\\n+\\                                        files in <file>.<ext>.\\n\\\n+\\                               Defaults to <file>.debuginfo \\n\\\n+\\                            Examples: --strip-native-debug-symbols \\n\\\n+\\                                        keep-debuginfo-files:objcopy=OBJPATH\\n\\\n+\\                               --strip-native-debug-symbols\\n\\\n+\\                                        exclude-debuginfo-files\n+\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/resources\/strip_native_debug_symbols_plugin.properties","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,7 +33,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Locale;\n@@ -41,0 +34,1 @@\n+import java.util.HashMap;\n@@ -42,2 +36,0 @@\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n@@ -45,0 +37,4 @@\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n@@ -47,0 +43,6 @@\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+import java.util.MissingResourceException;\n+import java.util.Comparator;\n+\n@@ -376,1 +378,1 @@\n-                                m.put(DefaultCompressPlugin.NAME, DefaultCompressPlugin.LEVEL_2);\n+                                m.put(plugin.getName(), DefaultCompressPlugin.LEVEL_2);\n@@ -389,1 +391,1 @@\n-                            m.put(ExcludeJmodSectionPlugin.NAME,\n+                            m.put(plugin.getName(),\n@@ -396,1 +398,1 @@\n-                        m.put(ExcludeJmodSectionPlugin.NAME,\n+                        m.put(plugin.getName(),\n@@ -453,2 +455,2 @@\n-                        (STRIP_NATIVE_DEBUG_SYMBOLS_NAME.equals(plugin.getName()) && seenPlugins.contains(DefaultStripDebugPlugin.NAME))) {\n-                        throw new BadArgs(\"err.plugin.conflicts\", \"--\" + DefaultStripDebugPlugin.NAME,\n+                        (STRIP_NATIVE_DEBUG_SYMBOLS_NAME.equals(plugin.getName()) && seenPlugins.contains(plugin.getName()))) {\n+                        throw new BadArgs(\"err.plugin.conflicts\", \"--\" + plugin.getName(),\n@@ -609,3 +611,6 @@\n-            for (Plugin plugin : Utils.getSortedPlugins(pluginList)) {\n-                showPlugin(plugin, log);\n-            }\n+            pluginList.stream()\n+                    .sorted(Comparator.comparing((Plugin plugin) -> plugin.getUsage().isEmpty(),\n+                                                 (Boolean res1, Boolean res2) -> Boolean.compare(res2,res1))\n+                                      .thenComparing(Plugin::getName)\n+                    )\n+                    .forEach((plugin) -> showPlugin(plugin, log));\n@@ -618,15 +623,25 @@\n-                log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n-                        + \": \" + plugin.getName());\n-\n-                \/\/ print verbose details for non-builtin plugins\n-                if (!Utils.isBuiltin(plugin)) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.class\")\n-                         + \": \" + plugin.getClass().getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.module\")\n-                         + \": \" + plugin.getClass().getModule().getName());\n-                    Category category = plugin.getType();\n-                    log.println(bundleHelper.getMessage(\"main.plugin.category\")\n-                         + \": \" + category.getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.state\")\n-                        + \": \" + plugin.getStateDescription());\n-                }\n+                if(!plugin.getUsage().isEmpty()) {\n+                    log.println(plugin.getUsage());\n+                } else {\n+                    log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n+                            + \": \" + plugin.getName());\n+\n+                    \/\/ print verbose details for non-builtin plugins\n+                    if (!Utils.isBuiltin(plugin)) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.class\")\n+                                + \": \" + plugin.getClass().getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.module\")\n+                                + \": \" + plugin.getClass().getModule().getName());\n+                        Category category = plugin.getType();\n+                        log.println(bundleHelper.getMessage(\"main.plugin.category\")\n+                                + \": \" + category.getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.state\")\n+                                + \": \" + plugin.getStateDescription());\n+                    }\n+\n+                    String option = plugin.getOption();\n+                    if (option != null) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.option\")\n+                                + \": --\" + plugin.getOption()\n+                                + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    }\n@@ -634,5 +649,4 @@\n-                String option = plugin.getOption();\n-                if (option != null) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.option\")\n-                        + \": --\" + plugin.getOption()\n-                        + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    \/\/ description can be long spanning more than one line and so\n+                    \/\/ print a newline after description label.\n+                    log.println(bundleHelper.getMessage(\"main.plugin.description\")\n+                            + \": \" + plugin.getDescription());\n@@ -641,4 +655,0 @@\n-                \/\/ description can be long spanning more than one line and so\n-                \/\/ print a newline after description label.\n-                log.println(bundleHelper.getMessage(\"main.plugin.description\")\n-                        + \": \" + plugin.getDescription());\n@@ -728,1 +738,1 @@\n-        return (!Utils.isDisabled(plugin) && plugin.getOption() != null);\n+        return (!Utils.isDisabled(plugin) && (plugin.getOption() != null) || !(plugin.getUsage().isEmpty()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":52,"deletions":42,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal.plugins;\n+\n+import jdk.tools.jlink.plugin.Plugin;\n+\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public abstract class AbstractPlugin implements Plugin {\n+\n+    static final String DESCRIPTION = \"description\";\n+    static final String USAGE = \"usage\";\n+\n+    private static final ResourceBundle standardPluginsBundle;\n+\n+    static {\n+        Locale locale = Locale.getDefault();\n+        try {\n+            standardPluginsBundle = ResourceBundle.getBundle(\"jdk.tools.jlink.\"\n+                    + \"resources.plugins\", locale);\n+        } catch (MissingResourceException e) {\n+            throw new InternalError(\"Cannot find jlink resource bundle for \"\n+                    + \"locale \" + locale);\n+        }\n+    }\n+\n+    private final ResourceBundle pluginsBundle;\n+    private final String name;\n+\n+    protected AbstractPlugin(String name) {\n+        this.name = name;\n+        this.pluginsBundle = standardPluginsBundle;\n+    }\n+\n+    protected AbstractPlugin(String name, ResourceBundle bundle) {\n+        this.name = name;\n+        this.pluginsBundle = bundle;\n+    }\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return getMessage(getName() + \".\" + DESCRIPTION, getName());\n+    }\n+\n+    @Override\n+    public String getUsage() {\n+        return getMessage(getName() + \".\" + USAGE, getName());\n+    }\n+\n+    @Override\n+    public String getArgumentsDescription() {\n+        return PluginsResourceBundle.getArgument(getName());\n+    }\n+\n+    protected String getMessage(String key, Object...args) {\n+       return PluginsResourceBundle.getMessage(this.pluginsBundle, key, args);\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AbstractPlugin.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,1 +39,1 @@\n-abstract class AddResourcePlugin implements Plugin {\n+abstract class AddResourcePlugin extends AbstractPlugin {\n@@ -42,1 +41,0 @@\n-    private final String name;\n@@ -46,2 +44,2 @@\n-    protected AddResourcePlugin(String n, String p) {\n-        name = n;\n+    protected AddResourcePlugin(String name, String p) {\n+        super(name);\n@@ -51,10 +49,0 @@\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(name);\n-    }\n-\n@@ -76,4 +64,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(name);\n-    }\n@@ -83,1 +67,1 @@\n-        var v = config.get(name);\n+        var v = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddResourcePlugin.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -43,2 +42,1 @@\n-public final class DefaultCompressPlugin implements Plugin, ResourcePrevisitor {\n-    public static final String NAME = \"compress\";\n+public final class DefaultCompressPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -53,3 +51,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public DefaultCompressPlugin() {\n+        super(\"compress\");\n@@ -86,5 +83,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -96,5 +88,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -104,1 +91,1 @@\n-        String level = config.get(NAME);\n+        String level = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-public final class DefaultStripDebugPlugin implements Plugin {\n+public final class DefaultStripDebugPlugin extends AbstractPlugin {\n@@ -44,1 +44,0 @@\n-    public static final String NAME = \"strip-debug\";\n@@ -58,0 +57,1 @@\n+        super(\"strip-debug\");\n@@ -62,10 +62,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultStripDebugPlugin.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.tools.jlink.plugin.Plugin;\n+\n@@ -38,1 +38,1 @@\n-public final class ExcludeFilesPlugin implements Plugin {\n+public final class ExcludeFilesPlugin extends AbstractPlugin {\n@@ -40,1 +40,0 @@\n-    public static final String NAME = \"exclude-files\";\n@@ -43,3 +42,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeFilesPlugin () {\n+        super(\"exclude-files\");\n@@ -64,5 +62,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -74,5 +67,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -81,1 +69,1 @@\n-        predicate = ResourceFilter.excludeFilter(config.get(NAME));\n+        predicate = ResourceFilter.excludeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeFilesPlugin.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,1 +39,1 @@\n-public final class ExcludeJmodSectionPlugin implements Plugin {\n+public final class ExcludeJmodSectionPlugin extends AbstractPlugin {\n@@ -42,1 +41,0 @@\n-    public static final String NAME = \"exclude-jmod-section\";\n@@ -48,3 +46,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeJmodSectionPlugin() {\n+        super(\"exclude-jmod-section\");\n@@ -55,1 +52,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -89,5 +86,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -99,4 +91,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeJmodSectionPlugin.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.tools.jlink.plugin.Plugin;\n+\n@@ -39,1 +39,1 @@\n-public final class ExcludePlugin implements Plugin {\n+public final class ExcludePlugin extends AbstractPlugin {\n@@ -41,1 +41,0 @@\n-    public static final String NAME = \"exclude-resources\";\n@@ -44,3 +43,3 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+\n+    public ExcludePlugin() {\n+        super(\"exclude-resources\");\n@@ -66,5 +65,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -76,5 +70,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -88,1 +77,1 @@\n-        predicate = ResourceFilter.excludeFilter(config.get(NAME));\n+        predicate = ResourceFilter.excludeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludePlugin.java","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -51,1 +50,1 @@\n-public final class ExcludeVMPlugin implements Plugin {\n+public final class ExcludeVMPlugin extends AbstractPlugin {\n@@ -83,1 +82,0 @@\n-    public static final String NAME = \"vm\";\n@@ -93,3 +91,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeVMPlugin() {\n+        super(\"vm\");\n@@ -175,5 +172,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -185,5 +177,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -192,1 +179,1 @@\n-        String value = config.get(NAME);\n+        String value = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -64,1 +63,1 @@\n-public final class GenerateJLIClassesPlugin implements Plugin {\n+public final class GenerateJLIClassesPlugin extends AbstractPlugin {\n@@ -66,3 +65,0 @@\n-    private static final String NAME = \"generate-jli-classes\";\n-\n-    private static final String DESCRIPTION = PluginsResourceBundle.getDescription(NAME);\n@@ -79,10 +75,1 @@\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return DESCRIPTION;\n+        super(\"generate-jli-classes\");\n@@ -101,5 +88,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -108,1 +90,1 @@\n-        mainArgument = config.get(NAME);\n+        mainArgument = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/GenerateJLIClassesPlugin.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -79,1 +78,1 @@\n-public final class IncludeLocalesPlugin implements Plugin, ResourcePrevisitor {\n+public final class IncludeLocalesPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -81,1 +80,0 @@\n-    public static final String NAME = \"include-locales\";\n@@ -150,3 +148,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public IncludeLocalesPlugin() {\n+        super(\"include-locales\");\n@@ -183,5 +180,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -193,5 +185,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -200,1 +187,1 @@\n-        userParam = config.get(NAME);\n+        userParam = config.get(getName());\n@@ -206,1 +193,1 @@\n-                PluginsResourceBundle.getMessage(NAME + \".invalidtag\"),\n+                PluginsResourceBundle.getMessage(getName() + \".invalidtag\"),\n@@ -221,1 +208,1 @@\n-                throw new PluginException(PluginsResourceBundle.getMessage(NAME + \".missingpackages\") +\n+                throw new PluginException(PluginsResourceBundle.getMessage(getName()+ \".missingpackages\") +\n@@ -238,1 +225,1 @@\n-            throw new PluginException(PluginsResourceBundle.getMessage(NAME + \".localedatanotfound\"));\n+            throw new PluginException(PluginsResourceBundle.getMessage(getName() + \".localedatanotfound\"));\n@@ -245,1 +232,1 @@\n-                String.format(PluginsResourceBundle.getMessage(NAME + \".nomatchinglocales\"), userParam));\n+                String.format(PluginsResourceBundle.getMessage(getName() + \".nomatchinglocales\"), userParam));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -55,1 +54,1 @@\n-public final class LegalNoticeFilePlugin implements Plugin {\n+public final class LegalNoticeFilePlugin extends AbstractPlugin {\n@@ -57,1 +56,0 @@\n-    private static final String NAME = \"dedup-legal-notices\";\n@@ -64,3 +62,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public LegalNoticeFilePlugin() {\n+        super(\"dedup-legal-notices\");\n@@ -76,1 +73,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -81,1 +78,1 @@\n-                throw new IllegalArgumentException(NAME + \": \" + arg);\n+                throw new IllegalArgumentException(getName() + \": \" + arg);\n@@ -143,5 +140,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -152,5 +144,0 @@\n-\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -49,2 +48,1 @@\n-public final class OrderResourcesPlugin implements Plugin {\n-    public static final String NAME = \"order-resources\";\n+public final class OrderResourcesPlugin extends AbstractPlugin {\n@@ -57,0 +55,1 @@\n+        super(\"order-resources\");\n@@ -61,5 +60,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -151,5 +145,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -161,5 +150,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -168,1 +152,1 @@\n-        List<String> patterns = Utils.parseList(config.get(NAME));\n+        List<String> patterns = Utils.parseList(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/OrderResourcesPlugin.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    static final String USAGE = \"usage\";\n@@ -60,0 +61,4 @@\n+    public static String getUsage(String name) {\n+        return getMessage(name + \".\" + USAGE, name);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/PluginsResourceBundle.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -52,1 +51,1 @@\n-public final class ReleaseInfoPlugin implements Plugin {\n+public final class ReleaseInfoPlugin extends AbstractPlugin {\n@@ -54,1 +53,0 @@\n-    public static final String NAME = \"release-info\";\n@@ -58,8 +56,2 @@\n-    @Override\n-    public Category getType() {\n-        return Category.METAINFO_ADDER;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ReleaseInfoPlugin() {\n+        super(\"release-info\");\n@@ -69,2 +61,2 @@\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n+    public Category getType() {\n+        return Category.METAINFO_ADDER;\n@@ -83,5 +75,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -90,1 +77,1 @@\n-        String operation = config.get(NAME);\n+        String operation = config.get(getName());\n@@ -104,1 +91,1 @@\n-                      .filter(s -> !NAME.equals(s))\n+                      .filter(s -> !getName().equals(s))\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ReleaseInfoPlugin.java","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -73,3 +72,1 @@\n-public class StringSharingPlugin implements Plugin, ResourcePrevisitor {\n-\n-    public static final String NAME = \"compact-cp\";\n+public class StringSharingPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -343,0 +340,1 @@\n+        super(\"compact-cp\");\n@@ -373,10 +371,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -388,5 +376,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -395,1 +378,1 @@\n-        predicate = ResourceFilter.includeFilter(config.get(NAME));\n+        predicate = ResourceFilter.includeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,2 +39,1 @@\n-public final class StripJavaDebugAttributesPlugin implements Plugin {\n-    public static final String NAME = \"strip-java-debug-attributes\";\n+public final class StripJavaDebugAttributesPlugin extends AbstractPlugin {\n@@ -49,0 +47,1 @@\n+        super(\"strip-java-debug-attributes\");\n@@ -52,10 +51,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -36,1 +35,1 @@\n-public final class StripNativeCommandsPlugin implements Plugin {\n+public final class StripNativeCommandsPlugin extends AbstractPlugin {\n@@ -38,5 +37,2 @@\n-    public static final String NAME = \"strip-native-commands\";\n-\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public StripNativeCommandsPlugin() {\n+        super(\"strip-native-commands\");\n@@ -58,5 +54,0 @@\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeCommandsPlugin.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -100,4 +99,1 @@\n-public final class SystemModulesPlugin implements Plugin {\n-    private static final String NAME = \"system-modules\";\n-    private static final String DESCRIPTION =\n-            PluginsResourceBundle.getDescription(NAME);\n+public final class SystemModulesPlugin extends AbstractPlugin {\n@@ -116,0 +112,1 @@\n+        super(\"system-modules\");\n@@ -119,10 +116,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return DESCRIPTION;\n-    }\n-\n@@ -140,5 +127,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -147,1 +129,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -149,1 +131,1 @@\n-            throw new IllegalArgumentException(NAME + \": \" + arg);\n+            throw new IllegalArgumentException(getName() + \": \" + arg);\n@@ -156,1 +138,1 @@\n-            throw new PluginException(NAME + \" was set\");\n+            throw new PluginException(getName() + \" was set\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -48,1 +47,1 @@\n-abstract class VersionPropsPlugin implements Plugin {\n+abstract class VersionPropsPlugin extends AbstractPlugin {\n@@ -53,1 +52,0 @@\n-    private final String name;\n@@ -62,0 +60,1 @@\n+        super(option);\n@@ -63,1 +62,0 @@\n-        this.name = option;\n@@ -76,10 +74,0 @@\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(name);\n-    }\n-\n@@ -101,5 +89,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(name);\n-    }\n-\n@@ -108,1 +91,1 @@\n-        var v = config.get(name);\n+        var v = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -45,1 +44,1 @@\n-public final class ZipPlugin implements Plugin {\n+public final class ZipPlugin extends AbstractPlugin {\n@@ -47,1 +46,0 @@\n-    public static final String NAME = \"zip\";\n@@ -51,1 +49,1 @@\n-\n+        this((Predicate<String>) null);\n@@ -59,0 +57,1 @@\n+        super(\"zip\");\n@@ -62,5 +61,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -72,5 +66,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n@@ -82,5 +71,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -89,1 +73,1 @@\n-        predicate = ResourceFilter.includeFilter(config.get(NAME));\n+        predicate = ResourceFilter.includeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -127,0 +127,8 @@\n+    \/**\n+     * The plugin usage for printing to console.\n+     * @return The usage.\n+     *\/\n+    public default String getUsage() {\n+        return \"\";\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/plugin\/Plugin.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+add-options.usage=\\\n+\\  --add-options <options>   Prepend the specified <options> string, which may\\n\\\n+\\                            include whitespace, before any other options when\\n\\\n+\\                            invoking the virtual machine in the resulting image.\n+\n@@ -41,0 +46,8 @@\n+release-info.usage=\\\n+\\  --release-info <file>|add:<key1>=<value1>:<key2>=<value2>:...|del:<key list>\\n\\\n+\\                            <file> option is to load release properties from\\n\\\n+\\                            the supplied file.\\n\\\n+\\                            add: is to add properties to the 'release' file.\\n\\\n+\\                            Any number of <key>=<value> pairs can be passed.\\n\\\n+\\                            del: is to delete the list of keys in release file.\n+\n@@ -46,0 +59,3 @@\n+class-for-name.usage=\\\n+\\  --class-for-name          Class optimization: convert Class.forName calls to constant loads.\n+\n@@ -56,0 +72,9 @@\n+compress.usage=\\\n+\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n+\\                            Compress all resources in the output image.\\n\\\n+\\                            Level 0: No compression\\n\\\n+\\                            Level 1: Constant string sharing\\n\\\n+\\                            Level 2: ZIP.\\n\\\n+\\                            An optional <pattern-list> filter can be\\n\\\n+\\                            specified to list the pattern of files to be included.\n+\n@@ -62,0 +87,7 @@\n+compact-cp.usage=\\\n+\\ --compact-cp <resource paths>\\n\\\n+\\                             Constant Pool strings sharing.\\n\\\n+\\                             By default, all resources are compressed.\\n\\\n+\\                             You can express the set of resources to\\n\\\n+\\                             compress or not compress (use ^ for negation).\n+\n@@ -69,0 +101,7 @@\n+dedup-legal-notices.usage=\\\n+\\  --dedup-legal-notices [error-if-not-same-content]\\n\\\n+\\                            De-duplicate all legal notices.\\n\\\n+\\                            If error-if-not-same-content is specified then\\n\\\n+\\                            it will be an error if two files of the same\\n\\\n+\\                            filename are different.\n+\n@@ -74,0 +113,5 @@\n+exclude-files.usage=\\\n+\\  --exclude-files <pattern-list>\\n\\\n+\\                            Specify files to exclude.\\n\\\n+\\                            e.g.: **.java,glob:\/java.base\/lib\/client\/**\n+\n@@ -79,0 +123,5 @@\n+exclude-resources.usage=\\\n+\\  --exclude-resources <pattern-list>\\n\\\n+\\                            Specify resources to exclude.\\n\\\n+\\                            e.g.: **.jcov,glob:**\/META-INF\/**\n+\n@@ -85,0 +134,5 @@\n+exclude-jmod-section.usage=\\\n+\\  --exclude-jmod-section <section-name>\\n\\\n+\\                            Specify a JMOD section to exclude.\\n\\\n+\\                            Where <section-name> is \\\"man\\\" or \\\"headers\\\".\n+\n@@ -94,0 +148,10 @@\n+generate-jli-classes.usage=\\\n+\\  --generate-jli-classes @filename\\n\\\n+\\                            Specify a file listing the java.lang.invoke classes\\n\\\n+\\                            to pre-generate. By default, this plugin may use a \\n\\\n+\\                            builtin list of classes to pre-generate. If this plugin\\n\\\n+\\                            runs on a different runtime version than the image being \\n\\\n+\\                            created then code generation will be disabled by \\n\\\n+\\                            default to guarantee correctness \\n\\\n+\\                            add ignore-version=true to override this.\n+\n@@ -98,0 +162,4 @@\n+system-modules.usage=\\\n+\\  --system-modules retainModuleTarget\\n\\\n+\\                            Fast loading of module descriptors (always enabled)\n+\n@@ -106,0 +174,5 @@\n+order-resources.usage=\\\n+\\  --order-resources <pattern-list>\\n\\\n+\\                            Order resources. \\n\\\n+\\                            e.g.: **\/module-info.class,@classlist,\/java.base\/java\/lang\/**\n+\n@@ -109,0 +182,3 @@\n+strip-debug.usage=\\\n+\\  --strip-debug             Strip debug information from the output image\n+\n@@ -112,0 +188,4 @@\n+strip-java-debug-attributes.usage=\\\n+\\  --strip-java-debug-attributes \\n\\\n+\\                            Strip Java debug attributes from classes in the output image\n+\n@@ -115,0 +195,3 @@\n+strip-native-commands.usage=\\\n+\\  --strip-native-commands   Exclude native commands (such as java\/java.exe) from the image\n+\n@@ -121,0 +204,6 @@\n+vendor-version.usage=\\\n+\\  --vendor-version <vendor-version>\\n\\\n+\\                            Override the vendor version string baked into the build,\\n\\\n+\\                            if any. The value of the system property\\n\\\n+\\                            \"java.vendor.version\" will be <vendor-version>.\n+\n@@ -127,0 +216,6 @@\n+vendor-bug-url.usage=\\\n+\\  --vendor-bug-url <vendor-bug-url>\\n\\\n+\\                            Override the vendor bug URL baked into the build.\\n\\\n+\\                            The value of the system property\\n\\\n+\\                            \"java.vendor.url.bug\" will be <vendor-url-bug>.\n+\n@@ -133,0 +228,5 @@\n+vendor-vm-bug-url.usage=\\\n+\\  --vendor-vm-bug-url <vendor-vm-bug-url>\\n\\\n+\\                            Override the vendor VM bug URL baked into the build.\\n\\\n+\\                            The URL displayed in VM error logs will be <vendor-vm-bug-url>.\n+\n@@ -138,0 +238,4 @@\n+vm.usage=\\\n+\\  --vm <client|server|minimal|all>\\n\\\n+\\                            Select the HotSpot VM in the output image.  Default is all\n+\n@@ -142,0 +246,4 @@\n+zip.usage=\\\n+\\  --zip [comma separated list of resource paths]\\n\\\n+\\                            ZIP Compression\n+\n@@ -149,0 +257,5 @@\n+include-locales.usage=\\\n+\\  --include-locales <langtag>[,<langtag>]*\\n\\\n+\\                            BCP 47 language tags separated by a comma, allowing\\n\\\n+\\                            locale matching defined in RFC 4647. e.g.: en,ja,*-IN\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":113,"deletions":0,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -171,1 +171,0 @@\n-            config1.put(DefaultStripDebugPlugin.NAME, \"\");\n@@ -173,0 +172,1 @@\n+            config1.put(strip.getName(), \"\");\n@@ -178,1 +178,2 @@\n-            config1.put(DefaultCompressPlugin.NAME, \"2\");\n+            String pluginName = \"compress\";\n+            config1.put(pluginName, \"2\");\n@@ -180,1 +181,4 @@\n-                    = Jlink.newPlugin(\"compress\", config1, null);\n+                    = Jlink.newPlugin(pluginName, config1, null);\n+            if(!pluginName.equals(compress.getName())) {\n+                throw new AssertionError(\"compress plugin name doesn't match test constant\");\n+            }\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-                    .filter((s) -> s.matches(\"Plugin Name:.*\"))\n+                    .filter((s) -> s.matches(\"  --.*\"))\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-        prop.put(ExcludeFilesPlugin.NAME, s);\n@@ -74,0 +73,1 @@\n+        prop.put(fplug.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeFilesPluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-        prop.put(ExcludePlugin.NAME, s);\n@@ -61,0 +60,1 @@\n+        prop.put(excludePlugin.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeModuleInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-        prop.put(ExcludePlugin.NAME, s);\n@@ -79,0 +78,1 @@\n+        prop.put(excludePlugin.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludePluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-            config.put(ExcludeVMPlugin.NAME, vm);\n+            config.put(p.getName(), vm);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeVMPluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            config.put(OrderResourcesPlugin.NAME, \"\/zazou\/**,**\/module-info.class\");\n+            config.put(\"order-resources\", \"\/zazou\/**,**\/module-info.class\");\n@@ -119,1 +119,1 @@\n-            config.put(OrderResourcesPlugin.NAME, \"@\" + order.getAbsolutePath());\n+            config.put(\"order-resources\", \"@\" + order.getAbsolutePath());\n","filename":"test\/jdk\/tools\/jlink\/plugins\/OrderResourcesPluginTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}