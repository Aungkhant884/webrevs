{"files":[{"patch":"@@ -104,0 +104,3 @@\n+    public String getUsage() { return resourceBundle.getString(NAME + \".usage\"); }\n+\n+    @Override\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeDebugSymbolsPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,12 @@\n+\n+strip-native-debug-symbols.usage=\\\n+\\  --strip-native-debug-symbols <exclude-debuginfo-files|keep-debuginfo-files|objcopy=\/path\/to\/objcopy>\\n\\\n+\\                            Strip debug symbols from native libraries (if any). \\n\\\n+\\                            This plugin requires at least one option: \\n\\\n+\\                               objcopy: The path to the 'objcopy' binary. Defaults to 'objcopy' in PATH.\\n\\\n+\\                               exclude-debuginfo-files: Exclude debug info files. Defaults to true.\\n\\\n+\\                               keep-debuginfo-files[=<ext>]: Keep debug info files in <file>.<ext>.\\n\\\n+\\                               Defaults to <file>.debuginfo \\n\\\n+\\                            Examples: --strip-native-debug-symbols keep-debuginfo-files:objcopy=\/usr\/bin\/objcopy \\n\\\n+\\                               --strip-native-debug-symbols=exclude-debuginfo-files\n+\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/resources\/strip_native_debug_symbols_plugin.properties","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,8 +33,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.util.*;\n@@ -42,3 +35,0 @@\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n-import java.util.Set;\n@@ -609,3 +599,6 @@\n-            for (Plugin plugin : Utils.getSortedPlugins(pluginList)) {\n-                showPlugin(plugin, log);\n-            }\n+            pluginList.stream()\n+                    .sorted(Comparator.comparing((Plugin plugin) -> plugin.getUsage().isEmpty(),\n+                                                 (Boolean res1, Boolean res2) -> Boolean.compare(res2,res1))\n+                                      .thenComparing(Plugin::getName)\n+                    )\n+                    .forEach((plugin) -> showPlugin(plugin, log));\n@@ -618,15 +611,25 @@\n-                log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n-                        + \": \" + plugin.getName());\n-\n-                \/\/ print verbose details for non-builtin plugins\n-                if (!Utils.isBuiltin(plugin)) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.class\")\n-                         + \": \" + plugin.getClass().getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.module\")\n-                         + \": \" + plugin.getClass().getModule().getName());\n-                    Category category = plugin.getType();\n-                    log.println(bundleHelper.getMessage(\"main.plugin.category\")\n-                         + \": \" + category.getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.state\")\n-                        + \": \" + plugin.getStateDescription());\n-                }\n+                if(!plugin.getUsage().isEmpty()) {\n+                    log.println(plugin.getUsage());\n+                } else {\n+                    log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n+                            + \": \" + plugin.getName());\n+\n+                    \/\/ print verbose details for non-builtin plugins\n+                    if (!Utils.isBuiltin(plugin)) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.class\")\n+                                + \": \" + plugin.getClass().getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.module\")\n+                                + \": \" + plugin.getClass().getModule().getName());\n+                        Category category = plugin.getType();\n+                        log.println(bundleHelper.getMessage(\"main.plugin.category\")\n+                                + \": \" + category.getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.state\")\n+                                + \": \" + plugin.getStateDescription());\n+                    }\n+\n+                    String option = plugin.getOption();\n+                    if (option != null) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.option\")\n+                                + \": --\" + plugin.getOption()\n+                                + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    }\n@@ -634,5 +637,4 @@\n-                String option = plugin.getOption();\n-                if (option != null) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.option\")\n-                        + \": --\" + plugin.getOption()\n-                        + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    \/\/ description can be long spanning more than one line and so\n+                    \/\/ print a newline after description label.\n+                    log.println(bundleHelper.getMessage(\"main.plugin.description\")\n+                            + \": \" + plugin.getDescription());\n@@ -641,4 +643,0 @@\n-                \/\/ description can be long spanning more than one line and so\n-                \/\/ print a newline after description label.\n-                log.println(bundleHelper.getMessage(\"main.plugin.description\")\n-                        + \": \" + plugin.getDescription());\n@@ -728,1 +726,1 @@\n-        return (!Utils.isDisabled(plugin) && plugin.getOption() != null);\n+        return (!Utils.isDisabled(plugin) && (plugin.getOption() != null) || !(plugin.getUsage().isEmpty()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":37,"deletions":39,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -61,0 +61,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(name); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddResourcePlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultStripDebugPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeFilesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeJmodSectionPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludePlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,0 +98,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -91,0 +91,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/GenerateJLIClassesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -155,0 +155,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -148,0 +148,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,0 +88,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/OrderResourcesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    static final String USAGE = \"usage\";\n@@ -60,0 +61,4 @@\n+    public static String getUsage(String name) {\n+        return getMessage(name + \".\" + USAGE, name);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/PluginsResourceBundle.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ReleaseInfoPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -383,0 +383,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,0 +63,3 @@\n+\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeCommandsPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,0 +86,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(name); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+    @Override\n+    public String getUsage() { return PluginsResourceBundle.getUsage(NAME); }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,0 +127,8 @@\n+    \/**\n+     * The plugin usage for printing to console.\n+     * @return The usage.\n+     *\/\n+    public default String getUsage() {\n+        return \"\";\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/plugin\/Plugin.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+add-options.usage=\\\n+\\  --add-options <options>   Prepend the specified <options> string, which may\\n\\\n+\\                            include whitespace, before any other options when\\n\\\n+\\                            invoking the virtual machine in the resulting image.\n+\n@@ -41,0 +46,7 @@\n+release-info.usage=\\\n+\\  --release-info <file>|add:<key1>=<value1>:<key2>=<value2>:...|del:<key list>\\n\\\n+\\                            <file> option is to load release properties from the supplied file.\\n\\\n+\\                            add: is to add properties to the 'release' file.\\n\\\n+\\                            Any number of <key>=<value> pairs can be passed.\\n\\\n+\\                            del: is to delete the list of keys in release file.\n+\n@@ -46,0 +58,3 @@\n+class-for-name.usage=\\\n+\\  --class-for-name          Class optimization: convert Class.forName calls to constant loads.\n+\n@@ -56,0 +71,9 @@\n+compress.usage=\\\n+\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n+\\                            Compress all resources in the output image.\\n\\\n+\\                            Level 0: No compression\\n\\\n+\\                            Level 1: Constant string sharing\\n\\\n+\\                            Level 2: ZIP.\\n\\\n+\\                            An optional <pattern-list> filter can be\\n\\\n+\\                            specified to list the pattern of files to be included.\n+\n@@ -62,0 +86,7 @@\n+compact-cp.usage=\\\n+\\ --compact-cp <resource paths>\\n\\\n+\\                             Constant Pool strings sharing.\\n\\\n+\\                             By default, all resources are compressed.\\n\\\n+\\                             You can express the set of resources to\\n\\\n+\\                             compress or not compress (use ^ for negation).\n+\n@@ -69,0 +100,7 @@\n+dedup-legal-notices.usage=\\\n+\\  --dedup-legal-notices [error-if-not-same-content]\\n\\\n+\\                            De-duplicate all legal notices.\\n\\\n+\\                            If error-if-not-same-content is specified then\\n\\\n+\\                            it will be an error if two files of the same\\n\\\n+\\                            filename are different.\n+\n@@ -74,0 +112,5 @@\n+exclude-files.usage=\\\n+\\  --exclude-files <pattern-list>\\n\\\n+\\                            Specify files to exclude.\\n\\\n+\\                            e.g.: **.java,glob:\/java.base\/lib\/client\/**\n+\n@@ -79,0 +122,5 @@\n+exclude-resources.usage=\\\n+\\  --exclude-resources <pattern-list>\\n\\\n+\\                            Specify resources to exclude.\\n\\\n+\\                            e.g.: **.jcov,glob:**\/META-INF\/**\n+\n@@ -85,0 +133,5 @@\n+exclude-jmod-section.usage=\\\n+\\  --exclude-jmod-section <section-name>\\n\\\n+\\                            Specify a JMOD section to exclude.\\n\\\n+\\                            Where <section-name> is \\\"man\\\" or \\\"headers\\\".\n+\n@@ -94,0 +147,10 @@\n+generate-jli-classes.usage=\\\n+\\  --generate-jli-classes @filename\\n\\\n+\\                            Specify a file listing the java.lang.invoke classes\\n\\\n+\\                            to pre-generate. By default, this plugin may use a \\n\\\n+\\                            builtin list of classes to pre-generate. If this plugin\\n\\\n+\\                            runs on a different runtime version than the image being \\n\\\n+\\                            created then code generation will be disabled by \\n\\\n+\\                            default to guarantee correctness \\n\\\n+\\                            add ignore-version=true to override this.\n+\n@@ -98,0 +161,4 @@\n+system-modules.usage=\\\n+\\  --system-modules retainModuleTarget\\n\\\n+\\                            Fast loading of module descriptors (always enabled)\n+\n@@ -106,0 +173,5 @@\n+order-resources.usage=\\\n+\\  --order-resources <pattern-list>\\n\\\n+\\                            Order resources. \\n\\\n+\\                            e.g.: **\/module-info.class,@classlist,\/java.base\/java\/lang\/**\n+\n@@ -109,0 +181,3 @@\n+strip-debug.usage=\\\n+\\  --strip-debug             Strip debug information from the output image\n+\n@@ -112,0 +187,4 @@\n+strip-java-debug-attributes.usage=\\\n+\\  --strip-java-debug-attributes \\n\\\n+\\                            Strip Java debug attributes from classes in the output image\n+\n@@ -115,0 +194,3 @@\n+strip-native-commands.usage=\\\n+\\  --strip-native-commands   Exclude native commands (such as java\/java.exe) from the image\n+\n@@ -121,0 +203,6 @@\n+vendor-version.usage=\\\n+\\  --vendor-version <vendor-version>\\n\\\n+\\                            Override the vendor version string baked into the build,\\n\\\n+\\                            if any. The value of the system property\\n\\\n+\\                            \"java.vendor.version\" will be <vendor-version>.\n+\n@@ -127,0 +215,6 @@\n+vendor-bug-url.usage=\\\n+\\  --vendor-bug-url <vendor-bug-url>\\n\\\n+\\                            Override the vendor bug URL baked into the build.\\n\\\n+\\                            The value of the system property\\n\\\n+\\                            \"java.vendor.url.bug\" will be <vendor-url-bug>.\n+\n@@ -133,0 +227,5 @@\n+vendor-vm-bug-url.usage=\\\n+\\  --vendor-vm-bug-url <vendor-vm-bug-url>\\n\\\n+\\                            Override the vendor VM bug URL baked into the build.\\n\\\n+\\                            The URL displayed in VM error logs will be <vendor-vm-bug-url>.\n+\n@@ -138,0 +237,4 @@\n+vm.usage=\\\n+\\  --vm <client|server|minimal|all>\\n\\\n+\\                            Select the HotSpot VM in the output image.  Default is all\n+\n@@ -142,0 +245,4 @@\n+zip.usage=\\\n+\\  --zip [comma separated list of resource paths]\\n\\\n+\\                            ZIP Compression\n+\n@@ -149,0 +256,5 @@\n+include-locales.usage=\\\n+\\  --include-locales <langtag>[,<langtag>]*\\n\\\n+\\                            BCP 47 language tags separated by a comma, allowing\\n\\\n+\\                            locale matching defined in RFC 4647. e.g.: en,ja,*-IN\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":112,"deletions":0,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-                    .filter((s) -> s.matches(\"Plugin Name:.*\"))\n+                    .filter((s) -> s.matches(\"  --.*\"))\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}