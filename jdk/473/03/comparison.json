{"files":[{"patch":"@@ -68,0 +68,1 @@\n+import sun.security.action.GetPropertyAction;\n@@ -82,42 +83,4 @@\n- * Currently these PBE algorithms are used by default:\n- *  - PBEWithSHA1AndDESede to encrypt private keys, iteration count 50000.\n- *  - PBEWithSHA1AndRC2_40 to encrypt certificates, iteration count 50000.\n- *\n- * The default Mac algorithm is  HmacPBESHA1, iteration count 100000.\n- *\n- * Supported encryption of various implementations :\n- *\n- * Software and mode.     Certificate encryption  Private key encryption\n- * ---------------------------------------------------------------------\n- * MSIE4 (domestic            40 bit RC2.            40 bit RC2\n- * and xport versions)\n- * PKCS#12 export.\n- *\n- * MSIE4, 5 (domestic         40 bit RC2,            40 bit RC2,\n- * and export versions)       3 key triple DES       3 key triple DES\n- * PKCS#12 import.\n- *\n- * MSIE5                      40 bit RC2             3 key triple DES,\n- * PKCS#12 export.                                   with SHA1 (168 bits)\n- *\n- * Netscape Communicator      40 bit RC2             3 key triple DES,\n- * (domestic and export                              with SHA1 (168 bits)\n- * versions) PKCS#12 export\n- *\n- * Netscape Communicator      40 bit ciphers only    All.\n- * (export version)\n- * PKCS#12 import.\n- *\n- * Netscape Communicator      All.                   All.\n- * (domestic or fortified\n- * version) PKCS#12 import.\n- *\n- * OpenSSL PKCS#12 code.      All.                   All.\n- * ---------------------------------------------------------------------\n- *\n- * NOTE: PKCS12 KeyStore supports PrivateKeyEntry and TrustedCertficateEntry.\n- * PKCS#12 is mainly used to deliver private keys with their associated\n- * certificate chain and aliases. In a PKCS12 keystore, entries are\n- * identified by the alias, and a localKeyId is required to match the\n- * private key with the certificate. Trusted certificate entries are identified\n- * by the presence of an trustedKeyUsage attribute.\n+ * NOTE: In a PKCS12 keystore, entries are identified by the alias, and\n+ * a localKeyId is required to match the private key with the certificate.\n+ * Trusted certificate entries are identified by the presence of an\n+ * trustedKeyUsage attribute.\n@@ -133,0 +96,26 @@\n+    \/\/ Hardcoded defaults. They should be the same with commented out\n+    \/\/ lines inside the java.security file.\n+    private static final String DEFAULT_CERT_PBE_ALGORITHM\n+            = \"PBEWithHmacSHA256AndAES_256\";\n+    private static final String DEFAULT_KEY_PBE_ALGORITHM\n+            = \"PBEWithHmacSHA256AndAES_256\";\n+    private static final String DEFAULT_MAC_ALGORITHM = \"HmacPBESHA256\";\n+    private static final int DEFAULT_CERT_PBE_ITERATION_COUNT = 10000;\n+    private static final int DEFAULT_KEY_PBE_ITERATION_COUNT = 10000;\n+    private static final int DEFAULT_MAC_ITERATION_COUNT = 10000;\n+\n+    \/\/ Legacy settings. Used when \"keystore.pkcs12.legacy\" is set.\n+    private static final String LEGACY_CERT_PBE_ALGORITHM\n+            = \"PBEWithSHA1AndRC2_40\";\n+    private static final String LEGACY_KEY_PBE_ALGORITHM\n+            = \"PBEWithSHA1AndDESede\";\n+    private static final String LEGACY_MAC_ALGORITHM = \"HmacPBESHA1\";\n+    private static final int LEGACY_PBE_ITERATION_COUNT = 50000;\n+    private static final int LEGACY_MAC_ITERATION_COUNT = 100000;\n+\n+    \/\/ Big switch. When this system property is set. Legacy settings\n+    \/\/ are used no matter what other keystore.pkcs12.* properties are set.\n+    \/\/ Note: This is only a system property, there's no same-name\n+    \/\/ security property defined.\n+    private static final String USE_LEGACY_PROP = \"keystore.pkcs12.legacy\";\n+\n@@ -848,3 +837,0 @@\n-     * NOTE: By default, pbeWithSHAAnd3-KeyTripleDES-CBC algorithmID is\n-     *       used to derive the key and IV.\n-     *\n@@ -1869,3 +1855,0 @@\n-     * NOTE: Currently pbeWithSHAAnd40BiteRC2-CBC algorithmID is used\n-     *       to derive the key and IV.\n-     *\n@@ -2643,1 +2626,8 @@\n-    \/\/ 8076190: Customizing the generation of a PKCS12 keystore\n+    \/\/ The following methods are related to customizing\n+    \/\/ the generation of a PKCS12 keystore or private\/secret\n+    \/\/ key entries.\n+\n+    private static boolean useLegacy() {\n+        return GetPropertyAction.privilegedGetProperty(\n+                USE_LEGACY_PROP) != null;\n+    }\n@@ -2646,0 +2636,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_CERT_PBE_ALGORITHM;\n+        }\n@@ -2649,1 +2642,1 @@\n-                ? result : \"PBEWithSHA1AndRC2_40\";\n+                ? result : DEFAULT_CERT_PBE_ALGORITHM;\n@@ -2653,0 +2646,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_PBE_ITERATION_COUNT;\n+        }\n@@ -2656,1 +2652,2 @@\n-                ? string2IC(\"certPbeIterationCount\", result) : 50000;\n+                ? string2IC(\"certPbeIterationCount\", result)\n+                : DEFAULT_CERT_PBE_ITERATION_COUNT;\n@@ -2662,0 +2659,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_KEY_PBE_ALGORITHM;\n+        }\n@@ -2683,1 +2683,1 @@\n-                ? result : \"PBEWithSHA1AndDESede\";\n+                ? result : DEFAULT_KEY_PBE_ALGORITHM;\n@@ -2687,0 +2687,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_PBE_ITERATION_COUNT;\n+        }\n@@ -2690,1 +2693,2 @@\n-                ? string2IC(\"keyPbeIterationCount\", result) : 50000;\n+                ? string2IC(\"keyPbeIterationCount\", result)\n+                : DEFAULT_KEY_PBE_ITERATION_COUNT;\n@@ -2694,0 +2698,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_MAC_ALGORITHM;\n+        }\n@@ -2697,1 +2704,1 @@\n-                ? result : \"HmacPBESHA1\";\n+                ? result : DEFAULT_MAC_ALGORITHM;\n@@ -2701,0 +2708,3 @@\n+        if (useLegacy()) {\n+            return LEGACY_MAC_ITERATION_COUNT;\n+        }\n@@ -2704,1 +2714,2 @@\n-                ? string2IC(\"macIterationCount\", result) : 100000;\n+                ? string2IC(\"macIterationCount\", result)\n+                : DEFAULT_MAC_ITERATION_COUNT;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":66,"deletions":55,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -1147,2 +1147,2 @@\n-# is not encrypted. The default value is \"PBEWithSHA1AndRC2_40\".\n-#keystore.pkcs12.certProtectionAlgorithm = PBEWithSHA1AndRC2_40\n+# is not encrypted. The default value is \"PBEWithHmacSHA256AndAES_256\".\n+#keystore.pkcs12.certProtectionAlgorithm = PBEWithHmacSHA256AndAES_256\n@@ -1151,2 +1151,2 @@\n-# This value must be a positive integer. The default value is 50000.\n-#keystore.pkcs12.certPbeIterationCount = 50000\n+# This value must be a positive integer. The default value is 10000.\n+#keystore.pkcs12.certPbeIterationCount = 10000\n@@ -1157,2 +1157,2 @@\n-# The default value is \"PBEWithSHA1AndDESede\".\n-#keystore.pkcs12.keyProtectionAlgorithm = PBEWithSHA1AndDESede\n+# The default value is \"PBEWithHmacSHA256AndAES_256\".\n+#keystore.pkcs12.keyProtectionAlgorithm = PBEWithHmacSHA256AndAES_256\n@@ -1162,2 +1162,2 @@\n-# is 50000.\n-#keystore.pkcs12.keyPbeIterationCount = 50000\n+# is 10000.\n+#keystore.pkcs12.keyPbeIterationCount = 10000\n@@ -1168,2 +1168,2 @@\n-# no Mac is generated. The default value is \"HmacPBESHA1\".\n-#keystore.pkcs12.macAlgorithm = HmacPBESHA1\n+# no Mac is generated. The default value is \"HmacPBESHA256\".\n+#keystore.pkcs12.macAlgorithm = HmacPBESHA256\n@@ -1172,2 +1172,2 @@\n-# positive integer. The default value is 100000.\n-#keystore.pkcs12.macIterationCount = 100000\n+# positive integer. The default value is 10000.\n+#keystore.pkcs12.macIterationCount = 10000\n@@ -1311,1 +1311,1 @@\n-#jdk.security.allowNonCaAnchor=true\n\\ No newline at end of file\n+#jdk.security.allowNonCaAnchor=true\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8223063\n+ * @bug 8223063 8153005\n@@ -51,1 +51,5 @@\n-        SecurityTools.keytool(\"-genkeypair -storetype pkcs12 -keystore ks\"\n+        \/\/ Using the old algorithms to make sure the file is recognized\n+        \/\/ by the certutil command on old versions of Windows.\n+        SecurityTools.keytool(\n+                \"-J-Dkeystore.pkcs12.legacy\"\n+                + \" -genkeypair -storetype pkcs12 -keystore ks\"\n","filename":"test\/jdk\/sun\/security\/mscapi\/VeryLongAlias.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import sun.security.util.ObjectIdentifier;\n+import sun.security.util.KnownOIDs;\n@@ -31,0 +31,1 @@\n+import java.util.Map;\n@@ -33,4 +34,1 @@\n-import static sun.security.pkcs.ContentInfo.DATA_OID;\n-import static sun.security.pkcs.ContentInfo.ENCRYPTED_DATA_OID;\n-import sun.security.util.ObjectIdentifier;\n-import sun.security.util.KnownOIDs;\n+import static sun.security.util.KnownOIDs.*;\n@@ -40,1 +38,1 @@\n- * @bug 8076190 8242151\n+ * @bug 8076190 8242151 8153005\n@@ -44,1 +42,3 @@\n- * @summary Checks the preferences order of pkcs12 params\n+ * @summary Checks the preferences order of pkcs12 params, whether it's\n+ *          a system property or a security property, whether the name has\n+ *          \"pkcs12\" or \"PKCS12\", whether the legacy property is set.\n@@ -51,5 +51,29 @@\n-        \/\/ with storepass\n-        test(c++, \"-\", \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n+        \/\/ default\n+        test(c++,\n+                Map.of(),\n+                Map.of(),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                SHA_256, 10000);\n+\n+        \/\/ legacy settings\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.legacy\", \"\"),\n+                Map.of(),\n+                PBEWithSHA1AndRC2_40, 50000,\n+                PBEWithSHA1AndDESede, 50000,\n+                SHA_1, 100000);\n+\n+        \/\/ legacy override everything else\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.legacy\", \"\",\n+                        \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithHmacSHA256AndAES_128\",\n+                        \"keystore.pkcs12.certPbeIterationCount\", 3000,\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithHmacSHA256AndAES_128\",\n+                        \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA384\",\n+                        \"keystore.pkcs12.macIterationCount\", 2000),\n+                Map.of(),\n+                PBEWithSHA1AndRC2_40, 50000,\n+                PBEWithSHA1AndDESede, 50000,\n+                SHA_1, 100000);\n@@ -58,6 +82,7 @@\n-        test(c++, \"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n-                \"keystore.pkcs12.macAlgorithm\", \"NONE\",\n-                \"-\", \"-\",\n-                null, 0,\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                null, 0);\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"NONE\"),\n+                Map.of(),\n+                null,\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                null);\n@@ -66,7 +91,7 @@\n-        test(c++, \"-\",\n-                \"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n-                \"keystore.pkcs12.macAlgorithm\", \"NONE\",\n-                \"-\",\n-                null, 0,\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                null, 0);\n+        test(c++,\n+                Map.of(),\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"NONE\"),\n+                null,\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                null);\n@@ -75,9 +100,8 @@\n-        test(c++, \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n-                \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n-                \"-\",\n-                \"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n-                \"keystore.pkcs12.macAlgorithm\", \"NONE\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                oid(KnownOIDs.SHA_256), 100000);\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\"),\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"NONE\"),\n+                PBEWithSHA1AndDESede, 10000,\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                SHA_256, 10000);\n@@ -86,11 +110,10 @@\n-        test(c++, \"keystore.pkcs12.certProtectionAlgorithm\", \"\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"\",\n-                \"keystore.pkcs12.macAlgorithm\", \"\",\n-                \"-\",\n-                \"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"keystore.pkcs12.macAlgorithm\", \"NONE\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"\"),\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"NONE\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n+                        \"keystore.pkcs12.macAlgorithm\", \"NONE\"),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                SHA_256, 10000);\n@@ -99,10 +122,11 @@\n-        test(c++, \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n-                \"keystore.pkcs12.certPbeIterationCount\", 3000,\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n-                \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n-                \"keystore.pkcs12.macIterationCount\", 2000,\n-                \"-\", \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 3000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 4000,\n-                oid(KnownOIDs.SHA_256), 2000);\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n+                        \"keystore.pkcs12.certPbeIterationCount\", 3000,\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n+                        \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n+                        \"keystore.pkcs12.macIterationCount\", 2000),\n+                Map.of(),\n+                PBEWithSHA1AndDESede, 3000,\n+                PBEWithSHA1AndRC2_40, 4000,\n+                SHA_256, 2000);\n@@ -111,11 +135,11 @@\n-        test(c++, \"-\",\n-                \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n-                \"keystore.pkcs12.certPbeIterationCount\", 3000,\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n-                \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n-                \"keystore.pkcs12.macIterationCount\", 2000,\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 3000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 4000,\n-                oid(KnownOIDs.SHA_256), 2000);\n+        test(c++,\n+                Map.of(),\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n+                        \"keystore.pkcs12.certPbeIterationCount\", 3000,\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n+                        \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n+                        \"keystore.pkcs12.macIterationCount\", 2000),\n+                PBEWithSHA1AndDESede, 3000,\n+                PBEWithSHA1AndRC2_40, 4000,\n+                SHA_256, 2000);\n@@ -124,17 +148,16 @@\n-        test(c++, \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n-                \"keystore.pkcs12.certPbeIterationCount\", 13000,\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"keystore.pkcs12.keyPbeIterationCount\", 14000,\n-                \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n-                \"keystore.pkcs12.macIterationCount\", 12000,\n-                \"-\",\n-                \"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"keystore.pkcs12.certPbeIterationCount\", 3000,\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n-                \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n-                \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA1\",\n-                \"keystore.pkcs12.macIterationCount\", 2000,\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndDESede), 13000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 14000,\n-                oid(KnownOIDs.SHA_256), 12000);\n+        test(c++,\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n+                        \"keystore.pkcs12.certPbeIterationCount\", 13000,\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n+                        \"keystore.pkcs12.keyPbeIterationCount\", 14000,\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA256\",\n+                        \"keystore.pkcs12.macIterationCount\", 12000),\n+                Map.of(\"keystore.pkcs12.certProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n+                        \"keystore.pkcs12.certPbeIterationCount\", 3000,\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndDESede\",\n+                        \"keystore.pkcs12.keyPbeIterationCount\", 4000,\n+                        \"keystore.pkcs12.macAlgorithm\", \"HmacPBESHA1\",\n+                        \"keystore.pkcs12.macIterationCount\", 2000),\n+                PBEWithSHA1AndDESede, 13000,\n+                PBEWithSHA1AndRC2_40, 14000,\n+                SHA_256, 12000);\n@@ -145,13 +168,0 @@\n-        test(c++, \"-\",\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_128), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n-        test(c++, \"-\",\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n@@ -159,8 +169,5 @@\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_128\",\n-                \"-\",\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC4_128), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n+                Map.of(),\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\"),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBEWithSHA1AndRC2_128, 10000,\n+                SHA_256, 10000);\n@@ -168,13 +175,21 @@\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_128\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_40\",\n-                \"-\",\n-                \"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n-                \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\",\n-                \"-\",\n-                oid(KnownOIDs.PBEWithSHA1AndRC2_40), 50000,\n-                oid(KnownOIDs.PBEWithSHA1AndRC4_40), 50000,\n-                oid(KnownOIDs.SHA_1), 100000);\n-    }\n-\n-    private static ObjectIdentifier oid(KnownOIDs o) {\n-        return ObjectIdentifier.of(o);\n+                Map.of(),\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\"),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBEWithSHA1AndRC2_40, 10000,\n+                SHA_256, 10000);\n+        test(c++,\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_128\"),\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\"),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBEWithSHA1AndRC4_128, 10000,\n+                SHA_256, 10000);\n+        test(c++,\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_128\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC4_40\"),\n+                Map.of(\"keystore.PKCS12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_128\",\n+                        \"keystore.pkcs12.keyProtectionAlgorithm\", \"PBEWithSHA1AndRC2_40\"),\n+                PBES2, HmacSHA256, AES_256$CBC$NoPadding, 10000,\n+                PBEWithSHA1AndRC4_40, 10000,\n+                SHA_256, 10000);\n@@ -186,3 +201,4 @@\n-     * @param args an array containing system properties and values, \"-\",\n-     *             security properties and values, \"-\", expected certPbeAlg,\n-     *             certPbeIC, keyPbeAlg, keyPbeIc, macAlg, macIC.\n+     * @param sysProps system properties\n+     * @param secProps security properties\n+     * @param args     an array expected certPbeAlg (sub algs), certPbeIC,\n+     *                 keyPbeAlg (sub algs), keyPbeIc, macAlg, macIC.\n@@ -190,2 +206,4 @@\n-    static void test(int n, Object... args) throws Exception {\n-        boolean isSysProp = true;\n+    static void test(int n, Map<String, ?> sysProps,\n+                     Map<String, ?> secProps,\n+                     Object... args) throws Exception {\n+\n@@ -195,0 +213,5 @@\n+\n+        for (var p : sysProps.entrySet()) {\n+            cmd += \" -J-D\" + p.getKey() + \"=\" + p.getValue();\n+        }\n+\n@@ -196,7 +219,23 @@\n-        for (int i = 0; i < args.length; i++) {\n-            if (isSysProp) {\n-                if (args[i].equals(\"-\")) {\n-                    isSysProp = false;\n-                } else {\n-                    cmd += \" -J-D\" + args[i] + \"=\" + args[++i];\n-                }\n+        for (var p : secProps.entrySet()) {\n+            jsConf.add(p.getKey() + \"=\" + p.getValue());\n+        }\n+        Files.write(Path.of(n + \".conf\"), jsConf);\n+        System.out.println(\"--------- test starts ----------\");\n+        System.out.println(jsConf);\n+        SecurityTools.keytool(cmd).shouldHaveExitValue(0);\n+\n+        int i = 0;\n+        byte[] data = Files.readAllBytes(Path.of(\"ks\" + n));\n+\n+        \/\/ cert pbe alg + ic\n+        KnownOIDs certAlg = (KnownOIDs)args[i++];\n+        if (certAlg == null) {\n+            checkAlg(data, \"110c10\", Data);\n+        } else {\n+            checkAlg(data, \"110c10\", EncryptedData);\n+            checkAlg(data, \"110c110110\", certAlg);\n+            if (certAlg == PBES2) {\n+                checkAlg(data, \"110c11011100\", PBKDF2WithHmacSHA1);\n+                checkAlg(data, \"110c1101110130\", args[i++]);\n+                checkAlg(data, \"110c11011110\", args[i++]);\n+                checkInt(data, \"110c110111011\", (int) args[i++]);\n@@ -204,31 +243,1 @@\n-                if (args[i] == \"-\") {\n-                    Files.write(Path.of(n + \".conf\"), jsConf);\n-                    System.out.println(\"--------- test starts ----------\");\n-                    System.out.println(jsConf);\n-                    SecurityTools.keytool(cmd).shouldHaveExitValue(0);\n-\n-                    byte[] data = Files.readAllBytes(Path.of(\"ks\" + n));\n-\n-                    \/\/ cert pbe alg + ic\n-                    if (args[i+1] == null) {\n-                        checkAlg(data, \"110c10\", DATA_OID);\n-                    } else {\n-                        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-                        checkAlg(data, \"110c110110\", (ObjectIdentifier)args[i+1]);\n-                        checkInt(data, \"110c1101111\", (int)args[i+2]);\n-                    }\n-\n-                    \/\/ key pbe alg + ic\n-                    checkAlg(data, \"110c010c01000\", (ObjectIdentifier)args[i+3]);\n-                    checkInt(data, \"110c010c010011\", (int)args[i+4]);\n-\n-                    \/\/ mac alg + ic\n-                    if (args[i+5] == null) {\n-                        shouldNotExist(data, \"2\");\n-                    } else {\n-                        checkAlg(data, \"2000\", (ObjectIdentifier)args[i+5]);\n-                        checkInt(data, \"22\", (int)args[i+6]);\n-                    }\n-                } else {\n-                    jsConf.add(args[i] + \"=\" + args[++i]);\n-                }\n+                checkInt(data, \"110c1101111\", (int) args[i++]);\n@@ -237,0 +246,21 @@\n+\n+        \/\/ key pbe alg + ic\n+        KnownOIDs keyAlg = (KnownOIDs)args[i++];\n+        checkAlg(data, \"110c010c01000\", keyAlg);\n+        if (keyAlg == PBES2) {\n+            checkAlg(data, \"110c010c0100100\", PBKDF2WithHmacSHA1);\n+            checkAlg(data, \"110c010c010010130\", args[i++]);\n+            checkAlg(data, \"110c010c0100110\", args[i++]);\n+            checkInt(data, \"110c010c01001011\", (int) args[i++]);\n+        } else {\n+            checkInt(data, \"110c010c010011\", (int) args[i++]);\n+        }\n+\n+        \/\/ mac alg + ic\n+        KnownOIDs macAlg = (KnownOIDs)args[i++];\n+        if (macAlg == null) {\n+            shouldNotExist(data, \"2\");\n+        } else {\n+            checkAlg(data, \"2000\", macAlg);\n+            checkInt(data, \"22\", (int) args[i++]);\n+        }\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsPreferences.java","additions":190,"deletions":160,"binary":false,"changes":350,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8076190 8242151\n+ * @bug 8076190 8242151 8153005\n@@ -44,0 +44,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -51,2 +52,1 @@\n-import sun.security.util.ObjectIdentifier;\n-import sun.security.util.KnownOIDs;\n+import static sun.security.util.KnownOIDs.*;\n@@ -60,9 +60,12 @@\n-        Files.newDirectoryStream(Path.of(System.getProperty(\"test.src\"), \"params\"))\n-                .forEach(p -> {\n-                    try (InputStream is = Files.newInputStream(p);\n-                         OutputStream os = Files.newOutputStream(p.getFileName())){\n-                        Base64.getMimeDecoder().wrap(is).transferTo(os);\n-                    } catch (IOException e) {\n-                        throw new UncheckedIOException(e);\n-                    }\n-                });\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n+                Path.of(System.getProperty(\"test.src\"), \"params\"),\n+                p -> !p.getFileName().toString().equals(\"README\"))) {\n+            stream.forEach(p -> {\n+                try (InputStream is = Files.newInputStream(p);\n+                     OutputStream os = Files.newOutputStream(p.getFileName())) {\n+                    Base64.getMimeDecoder().wrap(is).transferTo(os);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+        }\n@@ -103,0 +106,1 @@\n+\n@@ -104,4 +108,4 @@\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n@@ -109,3 +113,1 @@\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n-\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n@@ -116,0 +118,12 @@\n+        \/\/ Import it into a new keystore with legacy algorithms\n+        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n+                + \"-destkeystore kslegacyimp -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.legacy\");\n+        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n+        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n+        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+\n@@ -122,6 +136,6 @@\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 50000); \/\/ new key ic\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n@@ -129,2 +143,1 @@\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n@@ -142,2 +155,2 @@\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndRC4_128));\n-        checkInt(data, \"110c010c010011\", 50000);\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n@@ -154,4 +167,4 @@\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndRC4_128));\n-        checkInt(data, \"110c010c010011\", 50000);\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndDESede));\n-        checkInt(data, \"110c010c110011\", 50000);\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n@@ -169,5 +182,5 @@\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 6666); \/\/ cert ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n@@ -188,7 +201,7 @@\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndRC4_128)); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 50000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 6666); \/\/ cert ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n@@ -204,6 +217,6 @@\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 50000); \/\/ new key ic\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n@@ -211,2 +224,2 @@\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n@@ -221,4 +234,4 @@\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndRC4_128));\n-        checkInt(data, \"110c010c010011\", 50000);\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndDESede));\n-        checkInt(data, \"110c010c110011\", 50000);\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n@@ -234,7 +247,7 @@\n-        checkAlg(data, \"2000\", oid(KnownOIDs.SHA_1)); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", oid(KnownOIDs.PBEWithSHA1AndDESede)); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", oid(KnownOIDs.PBEWithSHA1AndRC4_128)); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 50000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 6666); \/\/ cert ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n@@ -437,4 +450,0 @@\n-    private static ObjectIdentifier oid(KnownOIDs o) {\n-        return ObjectIdentifier.of(o);\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsTest.java","additions":77,"deletions":68,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+Do not use OpenSSL 3.0.0. The default algorithms for pkcs12 are changed.\n@@ -3,0 +4,1 @@\n+(\n@@ -5,1 +7,1 @@\n-keytool -keystore ks -genkeypair -storepass changeit -alias a -dname CN=A\n+keytool -keystore ks -keyalg ec -genkeypair -storepass changeit -alias a -dname CN=A\n@@ -20,0 +22,1 @@\n+)\n@@ -26,4 +29,4 @@\n-openssl pkcs12 -in ks2 -passin pass:changeit -info -nokeys -nocerts 2> t2 || exit 20\n-grep \"MAC:sha1 Iteration 100000\" t2 || exit 21\n-grep \"Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000\" t2 || exit 23\n-grep \"PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 50000\" t2 || exit 24\n+openssl pkcs12 -in ksnormal -passin pass:changeit -info -nokeys -nocerts 2> t2 || exit 20\n+grep \"MAC: sha256, Iteration 10000\" t2 || exit 21\n+grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t2 || exit 23\n+grep \"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t2 || exit 24\n@@ -31,1 +34,1 @@\n-openssl pkcs12 -in ks22 -passin pass:changeit -info -nokeys -nocerts 2> t22 || exit 25\n+openssl pkcs12 -in ksnormaldup -passin pass:changeit -info -nokeys -nocerts 2> t22 || exit 25\n@@ -34,1 +37,1 @@\n-openssl pkcs12 -in ks3 -passin pass:changeit -info -nokeys -nocerts && exit 30\n+openssl pkcs12 -in ksnopass -passin pass:changeit -info -nokeys -nocerts && exit 30\n@@ -36,1 +39,1 @@\n-openssl pkcs12 -in ks3 -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t3 || exit 31\n+openssl pkcs12 -in ksnopass -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t3 || exit 31\n@@ -38,2 +41,2 @@\n-grep \"Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000\" t3 || exit 34\n-grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 50000\" t3 || exit 35\n+grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t3 || exit 34\n+grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 10000\" t3 || exit 35\n@@ -41,1 +44,1 @@\n-openssl pkcs12 -in ks33 -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t33 || exit 36\n+openssl pkcs12 -in ksnopassdup -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t33 || exit 36\n@@ -44,5 +47,5 @@\n-openssl pkcs12 -in ks4 -passin pass:changeit -info -nokeys -nocerts 2> t4 || exit 40\n-grep \"MAC:sha1 Iteration 5555\" t4 || exit 41\n-grep \"Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 7777\" t4 || exit 43\n-grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 50000\" t4 || exit 44\n-grep \"PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 6666\" t4 || exit 45\n+openssl pkcs12 -in ksnewic -passin pass:changeit -info -nokeys -nocerts 2> t4 || exit 40\n+grep \"MAC: sha256, Iteration 5555\" t4 || exit 41\n+grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 7777, PRF hmacWithSHA256\" t4 || exit 43\n+grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 10000\" t4 || exit 44\n+grep \"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC, Iteration 6666, PRF hmacWithSHA256\" t4 || exit 45\n@@ -50,1 +53,1 @@\n-openssl pkcs12 -in ks44 -passin pass:changeit -info -nokeys -nocerts 2> t44 || exit 46\n+openssl pkcs12 -in ksnewicdup -passin pass:changeit -info -nokeys -nocerts 2> t44 || exit 46\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/README","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -111,4 +111,3 @@\n-            ObjectIdentifier oid = oid(expected);\n-            DerUtils.checkAlg(crt, \"020\", oid);     \/\/ tbsCertificate.signature\n-            DerUtils.checkAlg(crt, \"0600\", oid);    \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n-            DerUtils.checkAlg(crt, \"10\", oid);      \/\/ signatureAlgorithm\n+            DerUtils.checkAlg(crt, \"020\", expected);     \/\/ tbsCertificate.signature\n+            DerUtils.checkAlg(crt, \"0600\", expected);    \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n+            DerUtils.checkAlg(crt, \"10\", expected);      \/\/ signatureAlgorithm\n@@ -182,2 +181,2 @@\n-        DerUtils.checkAlg(crt, \"020\", oid(sigAlg));  \/\/ tbsCertificate.signature\n-        DerUtils.checkAlg(crt, \"0600\", oid(keyAlg)); \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n+        DerUtils.checkAlg(crt, \"020\", sigAlg);  \/\/ tbsCertificate.signature\n+        DerUtils.checkAlg(crt, \"0600\", keyAlg); \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n@@ -189,2 +188,2 @@\n-        DerUtils.checkAlg(req, \"10\", oid(sigAlg));   \/\/ signatureAlgorithm\n-        DerUtils.checkAlg(req, \"0200\", oid(keyAlg)); \/\/ certificationRequestInfo.subjectPKInfo.algorithm\n+        DerUtils.checkAlg(req, \"10\", sigAlg);   \/\/ signatureAlgorithm\n+        DerUtils.checkAlg(req, \"0200\", keyAlg); \/\/ certificationRequestInfo.subjectPKInfo.algorithm\n@@ -193,1 +192,1 @@\n-        DerUtils.checkAlg(crl, \"000\", oid(sigAlg));  \/\/ tbsCertList.signature\n+        DerUtils.checkAlg(crl, \"000\", sigAlg);  \/\/ tbsCertList.signature\n@@ -203,1 +202,1 @@\n-            DerUtils.checkAlg(p7, \"104020\", oid(expDigAlg));\n+            DerUtils.checkAlg(p7, \"104020\", expDigAlg);\n@@ -207,1 +206,1 @@\n-                DerUtils.checkAlg(p7, \"104040\", oid(expEncAlg));\n+                DerUtils.checkAlg(p7, \"104040\", expEncAlg);\n@@ -209,1 +208,1 @@\n-                DerUtils.checkAlg(p7, \"104030\", oid(expEncAlg));\n+                DerUtils.checkAlg(p7, \"104030\", expEncAlg);\n@@ -219,8 +218,0 @@\n-    static ObjectIdentifier oid(String name) {\n-        return ObjectIdentifier.of(KnownOIDs.findMatch(name));\n-    }\n-\n-    static ObjectIdentifier oid(KnownOIDs ko) {\n-        return ObjectIdentifier.of(ko);\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenerateAll.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import sun.security.util.KnownOIDs;\n@@ -98,2 +99,12 @@\n-            ObjectIdentifier expected) throws Exception {\n-        Asserts.assertEQ(innerDerValue(der, location).getOID(), expected);\n+            Object expected) throws Exception {\n+        ObjectIdentifier oid;\n+        if (expected instanceof ObjectIdentifier) {\n+            oid = (ObjectIdentifier)expected;\n+        } else if (expected instanceof KnownOIDs) {\n+            oid = ObjectIdentifier.of((KnownOIDs) expected);\n+        } else if (expected instanceof String) {\n+            oid = ObjectIdentifier.of(KnownOIDs.findMatch((String)expected));\n+        } else {\n+            throw new IllegalArgumentException(expected.toString());\n+        }\n+        Asserts.assertEQ(innerDerValue(der, location).getOID(), oid);\n","filename":"test\/lib\/jdk\/test\/lib\/security\/DerUtils.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"}]}