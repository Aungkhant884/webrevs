{"files":[{"patch":"@@ -564,1 +564,9 @@\n-  _has_non_early_klasses = info->has_non_early_klasses();\n+\n+  if (_is_full_module_graph) {\n+    \/\/ Consider all classes referenced by the full module graph as early -- we will be\n+    \/\/ allocating objects of these classes during JVMTI early phase, so they cannot\n+    \/\/ be processed by (non-early) JVMTI ClassFileLoadHook\n+    _has_non_early_klasses = false;\n+  } else {\n+    _has_non_early_klasses = info->has_non_early_klasses();\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+            \/\/ Add an extra class to provoke JDK-8262376. This will be ignored if this class doesn't exist\n+            \/\/ in the JDK that's being tested (e.g., if the \"jdk.localedata\" module is somehow missing).\n+            String extraClasses[] = {\"sun\/util\/resources\/cldr\/provider\/CLDRLocaleDataMetaInfo\"};\n+\n@@ -54,6 +58,3 @@\n-                .setXShareMode(\"dump\")\n-                .setArchiveName(ReplaceCriticalClasses.class.getName() + \".jsa\")\n-                .setUseVersion(false)\n-                .addSuffix(\"-showversion\")\n-                .addSuffix(\"-Xlog:cds\");\n-            CDSTestUtils.run(opts).assertNormalExit(\"\");\n+                .setClassList(extraClasses)\n+                .setArchiveName(ReplaceCriticalClasses.class.getName() + \".jsa\");\n+            CDSTestUtils.createArchiveAndCheck(opts);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClasses.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}