{"files":[{"patch":"@@ -1540,1 +1540,1 @@\n-int PlatformEvent::park_millis(jlong millis) {\n+int PlatformEvent::park(jlong millis) {\n@@ -1545,1 +1545,1 @@\n-  assert(0 <= nanos, \"nanos are in range\");\n+  assert(nanos > 0, \"nanos are positive\");\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  int  park_millis(jlong millis);\n+  int  park(jlong millis);\n","filename":"src\/hotspot\/os\/posix\/park_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5253,1 +5253,1 @@\n-  assert(0 <= nanos, \"nanos are in range\");\n+  assert(nanos > 0, \"nanos are positive\");\n@@ -5256,2 +5256,3 @@\n-  \/\/ Instead of implementing this method, fall back to the millisecond sleep, treating\n-  \/\/ any positive requested nanos as a full millisecond.\n+  \/\/ Instead of implementing sub-millisecond sleeps, fall back to the usual behavior of\n+  \/\/ rounding up any positive requested nanos to the a full millisecond. This is how\n+  \/\/ Thread.sleep(millis, nanos) has always behaved with only millisecond granularity.\n@@ -5259,1 +5260,1 @@\n-  assert(nanos == 0 || millis != 0, \"Only pass zero millis on zero nanos\");\n+  assert(millis > 0, \"should always be positive\");\n@@ -5263,1 +5264,1 @@\n-int PlatformEvent::park_millis(jlong Millis) {\n+int PlatformEvent::park(jlong Millis) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    int  park_millis(jlong millis);\n+    int  park(jlong millis);\n","filename":"src\/hotspot\/os\/windows\/park_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-      THREAD->sleep_millis(100);\n+      THREAD->sleep(100);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1624,1 +1624,1 @@\n-    THREAD->sleep_millis(200);\n+    THREAD->sleep(200);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-          self->_ParkEvent->park_millis(millis);\n+          self->_ParkEvent->park(millis);\n@@ -273,1 +273,1 @@\n-      self->_ParkEvent->park_millis(millis);\n+      self->_ParkEvent->park(millis);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1983,1 +1983,1 @@\n-bool JavaThread::sleep_millis(jlong millis) {\n+bool JavaThread::sleep(jlong millis) {\n@@ -1992,1 +1992,1 @@\n-  assert(0 <= nanos, \"nanos are in range\");\n+  assert(nanos >= 0, \"nanos are in range\");\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1144,1 +1144,1 @@\n-  bool sleep_millis(jlong millis);\n+  bool sleep(jlong millis);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -813,1 +813,1 @@\n-      current->_ParkEvent->park_millis((jlong) recheckInterval);\n+      current->_ParkEvent->park((jlong) recheckInterval);\n@@ -1524,1 +1524,1 @@\n-          ret = current->_ParkEvent->park_millis(millis);\n+          ret = current->_ParkEvent->park(millis);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-            Thread::current()->_ParkEvent->park_millis(1);\n+            Thread::current()->_ParkEvent->park(1);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -499,1 +499,15 @@\n-        sleep(millis, 0);\n+        if (millis < 0) {\n+            throw new IllegalArgumentException(\"timeout value is negative\");\n+        }\n+\n+        long nanos = MILLISECONDS.toNanos(millis);\n+        ThreadSleepEvent event = beforeSleep(nanos);\n+        try {\n+            if (currentThread() instanceof VirtualThread vthread) {\n+                vthread.sleepNanos(nanos);\n+            } else {\n+                sleep0(nanos);\n+            }\n+        } finally {\n+            afterSleep(event);\n+        }\n@@ -502,0 +516,2 @@\n+    private static native void sleep0(long nanos) throws InterruptedException;\n+\n@@ -549,2 +565,0 @@\n-    private static native void sleep0(long nanos) throws InterruptedException;\n-\n@@ -573,4 +587,10 @@\n-        \/\/ convert to milliseconds and nanos\n-        long millis = NANOSECONDS.toMillis(nanos);\n-        nanos -= MILLISECONDS.toNanos(millis);\n-        sleep(millis, (int)nanos);\n+        ThreadSleepEvent event = beforeSleep(nanos);\n+        try {\n+            if (currentThread() instanceof VirtualThread vthread) {\n+                vthread.sleepNanos(nanos);\n+            } else {\n+                sleep0(nanos);\n+            }\n+        } finally {\n+            afterSleep(event);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    this_thread->sleep_millis(milliseconds_to_run);\n+    this_thread->sleep(milliseconds_to_run);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1FreeIdSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-    this_thread->sleep_millis(milliseconds_to_run);\n+    this_thread->sleep(milliseconds_to_run);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_ptrQueueBufferAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-    cur->sleep_millis(milliseconds_to_run);\n+    cur->sleep(milliseconds_to_run);\n","filename":"test\/hotspot\/gtest\/utilities\/test_singleWriterSynchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    private static void testTimes(TestCase t, long min, long max) throws Exception {\n+    private static void testTimes(TestCase t, long millisMin, long millisMax) throws Exception {\n@@ -80,2 +80,2 @@\n-        assertTrue(duration >= min, \"Duration \" + duration + \"ms, expected >= \" + min + \"ms\");\n-        assertTrue(duration <= max, \"Duration \" + duration + \"ms, expected <= \" + max + \"ms\");\n+        assertTrue(duration >= millisMin, \"Duration \" + duration + \"ms, expected >= \" + millisMin + \"ms\");\n+        assertTrue(duration <= millisMax, \"Duration \" + duration + \"ms, expected <= \" + millisMax + \"ms\");\n@@ -84,1 +84,1 @@\n-    private static void testTimeout(TestCase t, long timeout) throws Exception {\n+    private static void testTimeout(TestCase t, long millis) throws Exception {\n@@ -88,1 +88,1 @@\n-                Thread.sleep(timeout);\n+                Thread.sleep(millis);\n","filename":"test\/jdk\/java\/lang\/Thread\/SleepSanity.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}