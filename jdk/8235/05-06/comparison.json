{"files":[{"patch":"@@ -249,1 +249,3 @@\n-     * Reads a subarray as a sequence of bytes.\n+     * Reads a subarray as a sequence of bytes via a temporary direct\n+     * buffer.\n+     *\n@@ -253,2 +255,5 @@\n-     * @param     address the address of the temporary direct buffer's array\n-     * @param     size the size of the temporary direct buffer's array\n+     * @param     bufAddr the address of the temporary direct buffer's array\n+     * @param     bufSize the size of the temporary direct buffer's array\n+     * @return    the total number of bytes read into the buffer, or -1\n+     *            if there is no more data because the end of the stream\n+     *            has been reached.\n@@ -257,2 +262,2 @@\n-    private native int readBytes0(byte[] b, int off, int len, long address,\n-                                  int size) throws IOException;\n+    private native int readBytes0(byte[] b, int off, int len, long bufAddr,\n+                                  int bufSize) throws IOException;\n@@ -273,2 +278,2 @@\n-        int size = RandomAccessFile.bufferSize(b.length);\n-        ByteBuffer buf = Util.getTemporaryDirectBuffer(size);\n+        int bufSize = RandomAccessFile.bufferSize(b.length);\n+        ByteBuffer buf = Util.getTemporaryDirectBuffer(bufSize);\n@@ -278,2 +283,2 @@\n-                long address = ((DirectBuffer)buf).address();\n-                return readBytes0(b, 0, b.length, address, size);\n+                long bufAddr = ((DirectBuffer)buf).address();\n+                return readBytes0(b, 0, b.length, bufAddr, bufSize);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -331,1 +331,2 @@\n-     * Writes a subarray as a sequence of bytes.\n+     * Writes a subarray as a sequence of bytes via a temporary direct buffer.\n+     *\n@@ -335,2 +336,2 @@\n-     * @param     address the address of the temporary direct buffer's array\n-     * @param     size the size of the temporary direct buffer's array\n+     * @param     bufAddr the address of the temporary direct buffer's array\n+     * @param     bufSize the size of the temporary direct buffer's array\n@@ -340,1 +341,1 @@\n-                                    long address, int capacity)\n+                                    long bufAddr, int bufSize)\n@@ -353,2 +354,2 @@\n-        int size = RandomAccessFile.bufferSize(b.length);\n-        ByteBuffer buf = Util.getTemporaryDirectBuffer(size);\n+        int bufSize = RandomAccessFile.bufferSize(b.length);\n+        ByteBuffer buf = Util.getTemporaryDirectBuffer(bufSize);\n@@ -358,2 +359,2 @@\n-                long address = ((DirectBuffer)buf).address();\n-                writeBytes0(b, 0, b.length, append, address, size);\n+                long bufAddr = ((DirectBuffer)buf).address();\n+                writeBytes0(b, 0, b.length, append, bufAddr, bufSize);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -420,2 +420,2 @@\n-        int size = bufferSize(len);\n-        ByteBuffer buf = Util.getTemporaryDirectBuffer(size);\n+        int bufSize = bufferSize(len);\n+        ByteBuffer buf = Util.getTemporaryDirectBuffer(bufSize);\n@@ -425,2 +425,2 @@\n-                long address = ((DirectBuffer)buf).address();\n-                return readBytes0(b, off, len, address, size);\n+                long bufAddr = ((DirectBuffer)buf).address();\n+                return readBytes0(b, off, len, bufAddr, bufSize);\n@@ -436,1 +436,3 @@\n-     * Reads a subarray as a sequence of bytes.\n+     * Reads a subarray as a sequence of bytes via a temporary direct\n+     * buffer.\n+     *\n@@ -440,2 +442,5 @@\n-     * @param     address the address of the temporary direct buffer's array\n-     * @param     size the size of the temporary direct buffer's array\n+     * @param     bufAddr the address of the temporary direct buffer's array\n+     * @param     bufSize the size of the temporary direct buffer's array\n+     * @return    the total number of bytes read into the buffer, or -1\n+     *            if there is no more data because the end of the stream\n+     *            has been reached.\n@@ -444,2 +449,2 @@\n-    private native int readBytes0(byte[] b, int off, int len, long address,\n-                                  int size) throws IOException;\n+    private native int readBytes0(byte[] b, int off, int len, long bufAddr,\n+                                  int bufSize) throws IOException;\n@@ -609,2 +614,2 @@\n-        int size = bufferSize(len);\n-        ByteBuffer buf = Util.getTemporaryDirectBuffer(size);\n+        int bufSize = bufferSize(len);\n+        ByteBuffer buf = Util.getTemporaryDirectBuffer(bufSize);\n@@ -614,2 +619,2 @@\n-                long address = ((DirectBuffer)buf).address();\n-                writeBytes0(b, off, len, address, size);\n+                long bufAddr = ((DirectBuffer)buf).address();\n+                writeBytes0(b, off, len, bufAddr, bufSize);\n@@ -625,1 +630,2 @@\n-     * Writes a subarray as a sequence of bytes.\n+     * Writes a subarray as a sequence of bytes via a temporary direct buffer.\n+     *\n@@ -629,2 +635,2 @@\n-     * @param     address the address of the temporary direct buffer's array\n-     * @param     size the size of the temporary direct buffer's array\n+     * @param     bufAddr the address of the temporary direct buffer's array\n+     * @param     bufSize the size of the temporary direct buffer's array\n@@ -633,2 +639,3 @@\n-    private native void writeBytes0(byte[] b, int off, int len, long address,\n-                                    int size) throws IOException;\n+    private native void writeBytes0(byte[] b, int off, int len,\n+                                    long bufAddr, int bufSize)\n+        throws IOException;\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-        jbyteArray bytes, jint off, jint len, jlong address, jint size) {\n-    return readBytes(env, this, bytes, off, len, fis_fd, address, size);\n+        jbyteArray bytes, jint off, jint len, jlong bufAddr, jint bufSize) {\n+    return readBytes(env, this, bytes, off, len, bufAddr, bufSize, fis_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/FileInputStream.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-    jlong addr, jint size) {\n-    writeBytes(env, this, bytes, off, len, append, fos_fd, addr, size);\n+    jlong bufAddr, jint bufSize) {\n+    writeBytes(env, this, bytes, off, len, append, bufAddr, bufSize, fos_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/FileOutputStream.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,2 +77,3 @@\n-    jobject this, jbyteArray bytes, jint off, jint len, jlong addr, jint size) {\n-    return readBytes(env, this, bytes, off, len, raf_fd, addr, size);\n+    jobject this, jbyteArray bytes, jint off, jint len,\n+    jlong bufAddr, jint bufSize) {\n+    return readBytes(env, this, bytes, off, len, bufAddr, bufSize, raf_fd);\n@@ -88,2 +89,3 @@\n-    jobject this, jbyteArray bytes, jint off, jint len, jlong addr, jint size) {\n-    writeBytes(env, this, bytes, off, len, JNI_FALSE, raf_fd, addr, size);\n+    jobject this, jbyteArray bytes, jint off, jint len,\n+    jlong bufAddr, jint bufSize) {\n+    writeBytes(env, this, bytes, off, len, JNI_FALSE, bufAddr, bufSize, raf_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/RandomAccessFile.c","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,6 +56,0 @@\n-\/\/ The size of a stack-allocated buffer.\n-#define STACK_BUF_SIZE 8192\n-\n-\/\/ The maximum size of a dynamically allocated buffer.\n-#define MAX_MALLOC_SIZE 65536\n-\n@@ -77,1 +71,1 @@\n-          jint off, jint len, jfieldID fid, jlong address, jint size)\n+          jint off, jint len, jlong bufAddr, jint bufSize, jfieldID fid)\n@@ -79,4 +73,4 @@\n-    char *buf = (char*)jlong_to_ptr(address);\n-    const jint buf_size = size;\n-    jint read_size;\n-    jint n, nread;\n+    jint remaining;\n+    void* buf = (void*)jlong_to_ptr(bufAddr);\n+    jint readSize;\n+    jint n;\n@@ -99,12 +93,10 @@\n-    nread = 0;\n-    while (nread < len) {\n-        read_size = len - nread;\n-        if (read_size > buf_size)\n-            read_size = buf_size;\n-        fd = getFD(env, this, fid);\n-        if (fd == -1) {\n-            JNU_ThrowIOException(env, \"Stream Closed\");\n-            nread = -1;\n-            break;\n-        }\n-        n = IO_Read(fd, buf, read_size);\n+    fd = getFD(env, this, fid);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return -1;\n+    }\n+\n+    remaining = len;\n+    while (remaining > 0) {\n+        readSize = remaining < bufSize ? remaining : bufSize;\n+        n = IO_Read(fd, buf, readSize);\n@@ -113,1 +105,1 @@\n-            nread += n;\n+            remaining -= n;\n@@ -115,1 +107,1 @@\n-            if (n < read_size)\n+            if (n < readSize)\n@@ -118,1 +110,4 @@\n-        } else if (n == -1) {\n+        } else if (n == 0) { \/\/ EOF\n+            if (remaining == len)\n+                return -1;\n+        } else {\n@@ -120,5 +115,1 @@\n-            break;\n-        } else { \/\/ EOF\n-            if (nread == 0)\n-                nread = -1;\n-            break;\n+            return -1;\n@@ -128,1 +119,1 @@\n-    return nread;\n+    return len - remaining;\n@@ -153,2 +144,2 @@\n-           jint off, jint len, jboolean append, jfieldID fid,\n-           jlong address, jint size)\n+           jint off, jint len, jboolean append,\n+           jlong bufAddr, jint bufSize, jfieldID fid)\n@@ -156,3 +147,3 @@\n-    char *buf = (char*)jlong_to_ptr(address);\n-    const jint buf_size = size;\n-    jint write_size;\n+    jint remaining;\n+    void* buf = (void*)jlong_to_ptr(bufAddr);\n+    jint writeSize;\n@@ -176,3 +167,10 @@\n-    while (len > 0) {\n-        write_size = len < buf_size ? len : buf_size;\n-        (*env)->GetByteArrayRegion(env, bytes, off, write_size, (jbyte*)buf);\n+    fd = getFD(env, this, fid);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return;\n+    }\n+\n+    remaining = len;\n+    while (remaining > 0) {\n+        writeSize = remaining < bufSize ? remaining : bufSize;\n+        (*env)->GetByteArrayRegion(env, bytes, off, writeSize, (jbyte*)buf);\n@@ -180,5 +178,0 @@\n-            fd = getFD(env, this, fid);\n-            if (fd == -1) {\n-                JNU_ThrowIOException(env, \"Stream Closed\");\n-                break;\n-            }\n@@ -186,1 +179,1 @@\n-                n = IO_Append(fd, buf, write_size);\n+                n = IO_Append(fd, buf, writeSize);\n@@ -188,1 +181,1 @@\n-                n = IO_Write(fd, buf, write_size);\n+                n = IO_Write(fd, buf, writeSize);\n@@ -195,1 +188,1 @@\n-            len -= n;\n+            remaining -= n;\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":41,"deletions":48,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-               jint len, jfieldID fid, jlong address, jint size);\n+               jint len, jlong bufAddr, jint bufSize, jfieldID fid);\n@@ -55,1 +55,1 @@\n-                jint len, jboolean append, jfieldID fid, jlong address, jint size);\n+                jint len, jboolean append, jlong bufAddr, jint bufSize, jfieldID fid);\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}