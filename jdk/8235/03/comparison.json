{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    if (nread == 0) { \/* EOF *\/\n+    if (nread == 0) { \/\/ EOF\n@@ -50,1 +50,1 @@\n-    } else if (nread == -1) { \/* error *\/\n+    } else if (nread == -1) { \/\/ error\n@@ -56,3 +56,5 @@\n-\/* The maximum size of a stack-allocated buffer.\n- *\/\n-#define BUF_SIZE 8192\n+\/\/ The size of a stack-allocated buffer.\n+#define STACK_BUF_SIZE 8192\n+\n+\/\/ The maximum size of a dynamically allocated buffer.\n+#define MAX_MALLOC_SIZE 65536\n@@ -77,2 +79,1 @@\n-    jint nread;\n-    char stackBuf[BUF_SIZE];\n+    char stackBuf[STACK_BUF_SIZE];\n@@ -80,0 +81,2 @@\n+    jint buf_size, read_size;\n+    jint n, nread;\n@@ -94,2 +97,3 @@\n-    } else if (len > BUF_SIZE) {\n-        buf = malloc(len);\n+    } else if (len > STACK_BUF_SIZE) {\n+        buf_size = len < MAX_MALLOC_SIZE ? len : MAX_MALLOC_SIZE;\n+        buf = malloc(buf_size);\n@@ -102,0 +106,1 @@\n+        buf_size = STACK_BUF_SIZE;\n@@ -104,11 +109,8 @@\n-    fd = getFD(env, this, fid);\n-    if (fd == -1) {\n-        JNU_ThrowIOException(env, \"Stream Closed\");\n-        nread = -1;\n-    } else {\n-        nread = IO_Read(fd, buf, len);\n-        if (nread > 0) {\n-            (*env)->SetByteArrayRegion(env, bytes, off, nread, (jbyte *)buf);\n-        } else if (nread == -1) {\n-            JNU_ThrowIOExceptionWithLastError(env, \"Read error\");\n-        } else { \/* EOF *\/\n+    nread = 0;\n+    while (nread < len) {\n+        read_size = len - nread;\n+        if (read_size > buf_size)\n+            read_size = buf_size;\n+        fd = getFD(env, this, fid);\n+        if (fd == -1) {\n+            JNU_ThrowIOException(env, \"Stream Closed\");\n@@ -116,0 +118,17 @@\n+            break;\n+        }\n+        n = IO_Read(fd, buf, read_size);\n+        if (n > 0) {\n+            (*env)->SetByteArrayRegion(env, bytes, off, n, (jbyte*)buf);\n+            nread += n;\n+            \/\/ Exit loop on short read\n+            if (n < read_size)\n+                break;\n+            off += n;\n+        } else if (n == -1) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Read error\");\n+            break;\n+        } else { \/\/ EOF\n+            if (nread == 0)\n+                nread = -1;\n+            break;\n@@ -149,2 +168,1 @@\n-    jint n;\n-    char stackBuf[BUF_SIZE];\n+    char stackBuf[STACK_BUF_SIZE];\n@@ -152,0 +170,2 @@\n+    jint buf_size, write_size;\n+    jint n;\n@@ -166,2 +186,3 @@\n-    } else if (len > BUF_SIZE) {\n-        buf = malloc(len);\n+    } else if (len > STACK_BUF_SIZE) {\n+        buf_size = len < MAX_MALLOC_SIZE ? len : MAX_MALLOC_SIZE;\n+        buf = malloc(buf_size);\n@@ -174,0 +195,1 @@\n+        buf_size = STACK_BUF_SIZE;\n@@ -176,5 +198,4 @@\n-    (*env)->GetByteArrayRegion(env, bytes, off, len, (jbyte *)buf);\n-\n-    if (!(*env)->ExceptionOccurred(env)) {\n-        off = 0;\n-        while (len > 0) {\n+    while (len > 0) {\n+        write_size = len < buf_size ? len : buf_size;\n+        (*env)->GetByteArrayRegion(env, bytes, off, write_size, (jbyte*)buf);\n+        if (!(*env)->ExceptionOccurred(env)) {\n@@ -187,1 +208,1 @@\n-                n = IO_Append(fd, buf+off, len);\n+                n = IO_Append(fd, buf, write_size);\n@@ -189,1 +210,1 @@\n-                n = IO_Write(fd, buf+off, len);\n+                n = IO_Write(fd, buf, write_size);\n@@ -197,0 +218,3 @@\n+        } else { \/\/ ArrayIndexOutOfBoundsException\n+            (*env)->ExceptionClear(env);\n+            break;\n@@ -199,0 +223,1 @@\n+\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":57,"deletions":32,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @bug 8264777\n- * @summary Test read{All,N}Bytes overrides (use -Dseed=X to set PRNG seed)\n+ * @bug 6478546 8264777\n+ * @summary Test read(byte[],int,int) and read{All,N}Bytes overrides (use -Dseed=X to set PRNG seed)\n@@ -36,0 +36,1 @@\n+import java.io.FileOutputStream;\n@@ -37,1 +38,0 @@\n-import java.io.RandomAccessFile;\n@@ -44,1 +44,2 @@\n-    private static final int MAX_FILE_SIZE = 1_000_000;\n+    private static final int MAX_EXTRA_FILE_SIZE = 1_000_000;\n+    private static final int MIN_LARGE_FILE_SIZE = 2_500_000;\n@@ -76,1 +77,2 @@\n-            int size = 1 + RND.nextInt(MAX_FILE_SIZE);\n+            int baseSize = i % 2 == 0 ? 1 : MIN_LARGE_FILE_SIZE;\n+            int size = baseSize + RND.nextInt(MAX_EXTRA_FILE_SIZE);\n@@ -78,1 +80,2 @@\n-            byte[] bytes = new byte[size];\n+            int offset = RND.nextInt(size\/4);\n+            byte[] bytes = new byte[offset + size];\n@@ -80,2 +83,18 @@\n-            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\")) {\n-                raf.write(bytes);\n+            try (FileOutputStream fos = new FileOutputStream(file)) {\n+                fos.write(bytes, offset, size);\n+            }\n+\n+            try (FileInputStream fis = new FileInputStream(file)) {\n+                int pos = RND.nextInt(size);\n+                int len = RND.nextInt(size - pos);\n+                fis.getChannel().position(pos);\n+                byte[] nbytes = new byte[size];\n+                int n = fis.read(nbytes, 0, 0);\n+                if (n != 0)\n+                    throw new RuntimeException(\"read() zero length\");\n+                n = fis.read(nbytes, pos, len);\n+                if (n != len)\n+                    throw new RuntimeException(\"read() length\");\n+                if (!Arrays.equals(nbytes, pos, pos + len,\n+                                   bytes, offset + pos, offset + pos + len))\n+                    throw new RuntimeException(\"read() content\");\n@@ -94,1 +113,2 @@\n-                if (!Arrays.equals(nbytes, 0, len, bytes, pos, pos + len))\n+                if (!Arrays.equals(nbytes, 0, len,\n+                                   bytes, pos + offset, offset + pos + len))\n@@ -105,1 +125,1 @@\n-                                   bytes, pos, pos + allbytes.length))\n+                                   bytes, offset + pos, offset + pos + allbytes.length))\n","filename":"test\/jdk\/java\/io\/FileInputStream\/ReadXBytes.java","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"}]}