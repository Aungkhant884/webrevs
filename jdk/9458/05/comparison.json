{"files":[{"patch":"@@ -54,4 +54,0 @@\n-\n-        \/\/ javadoc does not report an exit code for an internal exception (!)\n-        \/\/ so monitor stderr for stack dumps.\n-        checkOutput(Output.STDERR, false, \"at com.sun\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/InheritDocForUserTags\/DocTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-        DirectoryStream.Filter<Path> filter;\n+        private final DirectoryStream.Filter<Path> filter;\n@@ -249,0 +249,1 @@\n+    private boolean automaticCheckNoStacktrace = true;\n@@ -491,0 +492,5 @@\n+        if (automaticCheckNoStacktrace) {\n+            \/\/ Any stacktrace will have javadoc near the bottom of the stack\n+            checkOutput(Output.STDERR, false, \"at jdk.javadoc\/jdk.javadoc.internal.\");\n+        }\n+\n@@ -536,0 +542,7 @@\n+    \/**\n+     * Sets whether or not to check for stacktraces.\n+     *\/\n+    public void setAutomaticCheckNoStacktrace(boolean b) {\n+        automaticCheckNoStacktrace = b;\n+    }\n+\n@@ -1150,1 +1163,1 @@\n-                        + List.of(strings).stream()\n+                        + Stream.of(strings)\n@@ -1172,1 +1185,1 @@\n-                        + List.of(patterns).stream()\n+                        + Stream.of(patterns)\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private final List<String> messages = new ArrayList<>();\n+    protected final List<String> messages = new ArrayList<>();\n@@ -161,1 +161,1 @@\n-    private final ToolBox tb = new ToolBox();\n+    protected final ToolBox tb = new ToolBox();\n","filename":"test\/langtools\/jdk\/javadoc\/testJavadocTester\/TestJavadocTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8290126\n+ * @summary Add a check in JavadocTester for \"javadoc should not crash\"\n+ * @library \/tools\/lib\/ ..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.* TestJavadocTester\n+ * @run main TestJavadocTesterCrash\n+ *\/\n+\n+import com.sun.source.doctree.DocTree;\n+import jdk.javadoc.doclet.Taglet;\n+\n+import javax.lang.model.element.Element;\n+import java.nio.file.Path;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\/**\n+ * Tests that {@code JavadocTester} detects and reports exceptions.\n+ *\n+ * It is not a direct test of the javadoc tool or the output generated by the\n+ * Standard Doclet, although both are indirectly used as part of this test.\n+ *\n+ * The test uses the infrastructure of TestJavadocTester, but cannot be\n+ * added to the tests there, which rely on checking aspects of the output\n+ * from a single run on javadoc.  This test forces a crash to occur in\n+ * javadoc, and verifies that JavadocTester detects and reports the crash.\n+ *\n+ * Arguably, a crash in a user-provided taglet should not cause a full stack\n+ * trace. If that is ever fixed, we would need to revisit the goals and mechanism\n+ * of this test.\n+ *\/\n+public class TestJavadocTesterCrash extends TestJavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestJavadocTesterCrash tester = new TestJavadocTesterCrash();\n+        tester.runTests();\n+    }\n+\n+    \/** A taglet that can throw an exception. *\/\n+    public static class TestTaglet implements Taglet {\n+        public TestTaglet() { }\n+\n+        @Override\n+        public Set<Location> getAllowedLocations() {\n+            return EnumSet.allOf(Location.class);\n+        }\n+\n+        @Override\n+        public boolean isInlineTag() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"test-taglet\";\n+        }\n+\n+        @Override\n+        public String toString(List<? extends DocTree> tags, Element element) {\n+            String s = tags.toString();\n+            if (s.contains(\"test\")) {\n+                throw new Error(\"demo error\");\n+            };\n+            return s;\n+        }\n+    }\n+\n+    @Test\n+    public void testDetectException(Path base) throws Exception {\n+        messages.clear();\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/** Comment.\n+                     abc {@test-taglet simple} {@test-taglet test} xyz\n+                     *\/\n+                    public class C { }\"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-tagletpath\", System.getProperty(\"test.class.path\"),\n+                \"-taglet\", TestTaglet.class.getName(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        \/\/ verify that the taglet threw an exception as intended\n+        new OutputChecker(Output.OUT)\n+                .setExpectOrdered(true)\n+                .check(\"Generating testDetectException\/api\/p\/C.html...\",\n+                        \"error: An internal exception has occurred.\",\n+                        \"(java.lang.Error: demo error)\",\n+                        \"1 error\");\n+\n+        \/\/ verify that JavadocTester detected the crash\n+        checkMessages(\"FAILED: STDERR: following text found:\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/testJavadocTester\/TestJavadocTesterCrash.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -164,0 +164,1 @@\n+                setAutomaticCheckNoStacktrace(false);\n@@ -176,0 +177,1 @@\n+                setAutomaticCheckNoStacktrace(true);\n@@ -193,0 +195,1 @@\n+                setAutomaticCheckNoStacktrace(false);\n@@ -206,0 +209,1 @@\n+                setAutomaticCheckNoStacktrace(true);\n@@ -225,0 +229,1 @@\n+                setAutomaticCheckNoStacktrace(false);\n@@ -239,0 +244,1 @@\n+                setAutomaticCheckNoStacktrace(true);\n","filename":"test\/langtools\/jdk\/javadoc\/testTFMBuilder\/TestTFMBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}