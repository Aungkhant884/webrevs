{"files":[{"patch":"@@ -217,1 +217,1 @@\n-        DirectoryStream.Filter<Path> filter;\n+        private final DirectoryStream.Filter<Path> filter;\n@@ -249,0 +249,1 @@\n+    private boolean automaticCheckNoStacktrace = true;\n@@ -491,3 +492,3 @@\n-        if (exitCode == Exit.OK.code && Files.exists(outputDir)) {\n-            if (automaticCheckLinks) {\n-                checkLinks();\n+        if (Files.exists(outputDir)) {\n+            if (automaticCheckNoStacktrace) {\n+                checkOutput(Output.STDERR, false, \" at com.sun.\");\n@@ -495,5 +496,11 @@\n-            if (automaticCheckAccessibility) {\n-                checkAccessibility();\n-            }\n-            if (automaticCheckUniqueOUT) {\n-                checkUnique(Output.OUT, \"^[A-Z][a-z]+ing \", true);\n+\n+            if (exitCode == Exit.OK.code) {\n+                if (automaticCheckLinks) {\n+                    checkLinks();\n+                }\n+                if (automaticCheckAccessibility) {\n+                    checkAccessibility();\n+                }\n+                if (automaticCheckUniqueOUT) {\n+                    checkUnique(Output.OUT, \"^[A-Z][a-z]+ing \", true);\n+                }\n@@ -536,0 +543,7 @@\n+    \/**\n+     * Sets whether or not to check for stacktraces.\n+     *\/\n+    public void setAutomaticCheckNoStacktrace(boolean b) {\n+        automaticCheckNoStacktrace = b;\n+    }\n+\n@@ -1150,1 +1164,1 @@\n-                        + List.of(strings).stream()\n+                        + Stream.of(strings)\n@@ -1172,1 +1186,1 @@\n-                        + List.of(patterns).stream()\n+                        + Stream.of(patterns)\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"}]}