{"files":[{"patch":"@@ -689,1 +689,1 @@\n-  static bool supports_fma()          { return (_features & CPU_FMA) != 0 && supports_avx(); }\n+  static bool supports_fma()          { return (_features & CPU_FMA) != 0; }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,2 @@\n+  return Compiler::is_intrinsic_supported(id);\n+}\n@@ -108,0 +110,1 @@\n+bool Compiler::is_intrinsic_supported(vmIntrinsics::ID id) {\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+  \/\/ Return true if the intrinsic `id` is supported by C1\n+  static bool is_intrinsic_supported(vmIntrinsics::ID id);\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"c1\/c1_Compiler.hpp\"\n@@ -45,0 +46,1 @@\n+#include \"opto\/c2compiler.hpp\"\n@@ -242,1 +244,4 @@\n-    JVMCIObject vmIntrinsicMethod = JVMCIENV->new_VMIntrinsicMethod(kls_str, name_str, sig_str, (jint) vmIntrinsics::id, JVMCI_CHECK_NULL); \\\n+    JVMCIObject vmIntrinsicMethod = JVMCIENV->new_VMIntrinsicMethod(kls_str, name_str, sig_str, (jint) vmIntrinsics::id, \\\n+                                    (jboolean) vmIntrinsics::is_intrinsic_available(vmIntrinsics::id),                   \\\n+                                    (jboolean) Compiler::is_intrinsic_supported(vmIntrinsics::id),                       \\\n+                                    (jboolean) C2Compiler::is_intrinsic_supported(vmIntrinsics::id), JVMCI_CHECK_NULL);  \\\n@@ -289,1 +294,1 @@\n-  X86_ONLY(do_int_flag(UseAVX))                                           \\\n+  X86_ONLY(do_int_flag(UseAVX))                                            \\\n@@ -309,1 +314,1 @@\n-  X86_ONLY(do_int_flag(UseSSE))                                           \\\n+  X86_ONLY(do_int_flag(UseSSE))                                            \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1452,1 +1452,1 @@\n-JVMCIObject JVMCIEnv::new_VMIntrinsicMethod(JVMCIObject declaringClass, JVMCIObject name, JVMCIObject descriptor, int id, JVMCI_TRAPS) {\n+JVMCIObject JVMCIEnv::new_VMIntrinsicMethod(JVMCIObject declaringClass, JVMCIObject name, JVMCIObject descriptor, int id, jboolean isAvailable, jboolean c1Supported, jboolean c2Supported, JVMCI_TRAPS) {\n@@ -1461,0 +1461,3 @@\n+    HotSpotJVMCI::VMIntrinsicMethod::set_isAvailable(this, obj, isAvailable);\n+    HotSpotJVMCI::VMIntrinsicMethod::set_c1Supported(this, obj, c1Supported);\n+    HotSpotJVMCI::VMIntrinsicMethod::set_c2Supported(this, obj, c2Supported);\n@@ -1466,1 +1469,1 @@\n-                                    get_jobject(declaringClass), get_jobject(name), get_jobject(descriptor), id);\n+                                    get_jobject(declaringClass), get_jobject(name), get_jobject(descriptor), id, isAvailable, c1Supported, c2Supported);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -409,1 +409,1 @@\n-  JVMCIObject new_VMIntrinsicMethod(JVMCIObject declaringClass, JVMCIObject name, JVMCIObject descriptor, int id, JVMCI_TRAPS);\n+  JVMCIObject new_VMIntrinsicMethod(JVMCIObject declaringClass, JVMCIObject name, JVMCIObject descriptor, int id, jboolean isAvailable, jboolean c1Supported, jboolean c2Supported, JVMCI_TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,4 @@\n-    jvmci_constructor(VMIntrinsicMethod, \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;I)V\")        \\\n+    boolean_field(VMIntrinsicMethod, isAvailable)                                                             \\\n+    boolean_field(VMIntrinsicMethod, c1Supported)                                                             \\\n+    boolean_field(VMIntrinsicMethod, c2Supported)                                                             \\\n+    jvmci_constructor(VMIntrinsicMethod, \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;IZZZ)V\")     \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -193,0 +193,4 @@\n+  return C2Compiler::is_intrinsic_supported(id);\n+}\n+\n+bool C2Compiler::is_intrinsic_supported(vmIntrinsics::ID id) {\n@@ -228,0 +232,15 @@\n+  case vmIntrinsics::_electronicCodeBook_encryptAESCrypt:\n+    if (StubRoutines::electronicCodeBook_encryptAESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_electronicCodeBook_decryptAESCrypt:\n+    if (StubRoutines::electronicCodeBook_decryptAESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_galoisCounterMode_AESCrypt:\n+    if (StubRoutines::galoisCounterMode_AESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_bigIntegerRightShiftWorker:\n+    if (StubRoutines::bigIntegerRightShift() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_bigIntegerLeftShiftWorker:\n+    if (StubRoutines::bigIntegerLeftShift() == nullptr) return false;\n+    break;\n@@ -719,2 +738,0 @@\n-  case vmIntrinsics::_electronicCodeBook_encryptAESCrypt:\n-  case vmIntrinsics::_electronicCodeBook_decryptAESCrypt:\n@@ -722,1 +739,0 @@\n-  case vmIntrinsics::_galoisCounterMode_AESCrypt:\n@@ -734,2 +750,0 @@\n-  case vmIntrinsics::_bigIntegerRightShiftWorker:\n-  case vmIntrinsics::_bigIntegerLeftShiftWorker:\n@@ -755,1 +769,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+  \/\/ Return true if the intrinsic `id` is supported by C2\n+  static bool is_intrinsic_supported(vmIntrinsics::ID id);\n","filename":"src\/hotspot\/share\/opto\/c2compiler.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,2 @@\n-            printConfigLine(runtime, \"[vmconfig:intrinsic] %d = %s.%s %s%n\", e.id, e.declaringClass, e.name, e.descriptor);\n+            printConfigLine(runtime, \"[vmconfig:intrinsic] %d = (available:%b c1Supported:%b c2Supported:%b) %s.%s %s%n\",\n+                            e.id, e.isAvailable, e.c1Supported, e.c2Supported, e.declaringClass, e.name, e.descriptor);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfigStore.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,0 +57,16 @@\n+    \/**\n+     * This value reflects the `ControlIntrinsic`, `DisableIntrinsic` and `UseXXXIntrinsic` VM flags\n+     * as well as other factors such as the current CPU.\n+     *\/\n+    public final boolean isAvailable;\n+\n+    \/**\n+     * True if this intrinsic is supported by C1.\n+     *\/\n+    public final boolean c1Supported;\n+\n+    \/**\n+     * True if this intrinsic is supported by C2.\n+     *\/\n+    public final boolean c2Supported;\n+\n@@ -58,1 +74,2 @@\n-    VMIntrinsicMethod(String declaringClass, String name, String descriptor, int id) {\n+    VMIntrinsicMethod(String declaringClass, String name, String descriptor, int id,\n+                             boolean isAvailable, boolean c1Supported, boolean c2Supported) {\n@@ -63,0 +80,3 @@\n+        this.isAvailable = isAvailable;\n+        this.c1Supported = c1Supported;\n+        this.c2Supported = c2Supported;\n@@ -72,1 +92,4 @@\n-                                that.descriptor.equals(this.descriptor);\n+                                that.descriptor.equals(this.descriptor) &&\n+                                that.isAvailable == this.isAvailable &&\n+                                that.c1Supported == this.c1Supported &&\n+                                that.c2Supported == this.c2Supported;\n@@ -86,1 +109,2 @@\n-        return String.format(\"IntrinsicMethod[declaringClass=%s, name=%s, descriptor=%s, id=%d]\", declaringClass, name, descriptor, id);\n+        return String.format(\"IntrinsicMethod[declaringClass=%s, name=%s, descriptor=%s, id=%d, isAvailable=%b, c1Supported=%b, c2Supported=%b]\",\n+                        declaringClass, name, descriptor, id, isAvailable, c1Supported, c2Supported);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/VMIntrinsicMethod.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}