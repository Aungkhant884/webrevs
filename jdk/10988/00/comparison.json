{"files":[{"patch":"@@ -175,0 +175,4 @@\n+JVM_MemoryAlloc\n+JVM_MemoryCalloc\n+JVM_MemoryFree\n+JVM_MemoryRealloc\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1162,0 +1162,20 @@\n+\/**** External access to JVM C-Heap allocation functions. *\/\n+typedef enum {\n+  MT_JUZI = 0, \/* Buffers used by java.util.zip inflaters *\/\n+  MT_JUZD,     \/* Buffers used by java.util.zip deflaters *\/\n+  MT_ZLIB,     \/* Buffers used by other users of zlib *\/\n+  MT_OTHER\n+} allocation_category_t;\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryAlloc(size_t size, allocation_category_t category);\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryRealloc(void* p, size_t size, allocation_category_t category);\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryCalloc(size_t numelems, size_t elemsize, allocation_category_t category);\n+\n+JNIEXPORT void JNICALL\n+JVM_MemoryFree(void* p);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+  \/* Intra-VM categories *\/                                                          \\\n@@ -116,1 +117,0 @@\n-  f(mtOther,          \"Other\")       \/* memory not used by VM                     *\/ \\\n@@ -133,0 +133,8 @@\n+  \/* Non-VM categories used by allocation from outside hotspot.          *\/          \\\n+  \/* These must appear in the same order as their counterparts in jvm.h  *\/          \\\n+  \/* (see allocation_category_t). *\/                                                 \\\n+  f(mtJuzD,           \"j.u.zip (deflate)\") \/* Used by j.u.zip Deflaters. *\/          \\\n+  f(mtJuzI,           \"j.u.zip (inflate)\") \/* Used by j.u.zip Inflaters. *\/          \\\n+  f(mtZip,            \"Zip (other)\")       \/* Used by zlib (none-j.u.zip usage). *\/  \\\n+  f(mtOther,          \"Other\")             \/* Outside memory, unspecified. *\/        \\\n+  \/* Let this be the last *\/                                                         \\\n@@ -143,0 +151,1 @@\n+  mt_first,\n@@ -144,1 +153,1 @@\n-  mt_number_of_types   \/\/ number of memory types (mtDontTrack\n+  mt_number_of_types,  \/\/ number of memory types (mtDontTrack\n@@ -146,0 +155,2 @@\n+  mt_outside_range_first = mtJuzD,\n+  mt_outside_range_last = mtOther\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -4022,0 +4023,37 @@\n+\n+static MEMFLAGS translate_allocation_category(allocation_category_t cat) {\n+  int translated = (int)cat + (int)MEMFLAGS::mt_outside_range_first;\n+  assert(translated >= (int)MEMFLAGS::mt_outside_range_first &&\n+         translated <= (int)MEMFLAGS::mt_outside_range_last,\n+         \"Invalid category %d\", translated);\n+  if (translated < (int)MEMFLAGS::mt_outside_range_first ||\n+      translated > (int)MEMFLAGS::mt_outside_range_last) {\n+    return mtOther;\n+  }\n+  return (MEMFLAGS)translated;\n+}\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryAlloc(size_t size, allocation_category_t category) {\n+  return os::malloc(size, translate_allocation_category(category));\n+}\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryRealloc(void* p, size_t size, allocation_category_t category) {\n+  return os::realloc(p, size, translate_allocation_category(category));\n+}\n+\n+JNIEXPORT void* JNICALL\n+JVM_MemoryCalloc(size_t numelems, size_t elemsize, allocation_category_t category) {\n+  const size_t size = numelems * elemsize;\n+  void* p = os::malloc(size, translate_allocation_category(category));\n+  if (p != nullptr) {\n+    ::memset(p, 0, size);\n+  }\n+  return p;\n+}\n+\n+JNIEXPORT void JNICALL\n+JVM_MemoryFree(void* p) {\n+  os::free(p);\n+}\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"zip_allocation.h\"\n@@ -41,0 +42,2 @@\n+#define NMT_CATEGORY ((allocation_category_t) MT_JUZD)\n+\n@@ -45,1 +48,1 @@\n-    z_stream *strm = calloc(1, sizeof(z_stream));\n+    z_stream *strm = JVM_MemoryCalloc(1, sizeof(z_stream), NMT_CATEGORY);\n@@ -52,0 +55,1 @@\n+        ZIP_InitializeStreamAllocationHooks(strm, MT_JUZD);\n@@ -59,1 +63,1 @@\n-            free(strm);\n+            JVM_MemoryFree(strm);\n@@ -63,1 +67,1 @@\n-            free(strm);\n+            JVM_MemoryFree(strm);\n@@ -72,1 +76,1 @@\n-            free(strm);\n+            JVM_MemoryFree(strm);\n@@ -309,1 +313,1 @@\n-        free((z_stream *)jlong_to_ptr(addr));\n+        JVM_MemoryFree((z_stream *)jlong_to_ptr(addr));\n","filename":"src\/java.base\/share\/native\/libzip\/Deflater.c","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+#include \"zip_allocation.h\"\n@@ -45,0 +46,2 @@\n+#define NMT_CATEGORY ((allocation_category_t) MT_JUZI)\n+\n@@ -60,1 +63,1 @@\n-    z_stream *strm = calloc(1, sizeof(z_stream));\n+    z_stream *strm = JVM_MemoryCalloc(1, sizeof(z_stream), NMT_CATEGORY);\n@@ -67,0 +70,1 @@\n+        ZIP_InitializeStreamAllocationHooks(strm, MT_JUZI);\n@@ -72,1 +76,1 @@\n-            free(strm);\n+            JVM_MemoryFree(strm);\n@@ -83,1 +87,1 @@\n-            free(strm);\n+            JVM_MemoryFree(strm);\n@@ -303,1 +307,1 @@\n-        free(jlong_to_ptr(addr));\n+        JVM_MemoryFree(jlong_to_ptr(addr));\n","filename":"src\/java.base\/share\/native\/libzip\/Inflater.c","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022 SAP. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Support for reading ZIP\/JAR files.\n+ *\/\n+\n+#include <string.h>\n+#include \"zip_allocation.h\"\n+\n+\/* Function prototypes must exactly match zalloc and zfree. *\/\n+static voidpf local_allocation(voidpf opaque, uInt items, uInt size) {\n+    return JVM_MemoryCalloc(items, size, (allocation_category_t)opaque);\n+}\n+\n+static void local_deallocation(voidpf opaque, voidpf address) {\n+    JVM_MemoryFree(address);\n+}\n+\n+JNIEXPORT void ZIP_InitializeStreamAllocationHooks(z_stream* strm, allocation_category_t cat) {\n+    strm->zalloc = local_allocation;\n+    strm->zfree = local_deallocation;\n+    strm->opaque = (voidpf) cat;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libzip\/zip_allocation.c","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2022 SAP. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Helpers for JVM allocation redirection\n+ *\/\n+\n+#ifndef _ZIP_ALLOCATION_H_\n+#define _ZIP_ALLOCATION_H_\n+\n+#include <zlib.h> \/* for z_stream *\/\n+#include \"jvm.h\"  \/* for allocation_category_t *\/\n+\n+JNIEXPORT void ZIP_InitializeStreamAllocationHooks(z_stream* strm, allocation_category_t cat);\n+\n+\/* calloc-like convenience wrapper around JVM_MemoryAllocate *\/\n+JNIEXPORT voidpf ZIP_MemoryCalloc(size_t num, size_t size, allocation_category_t cat);\n+\n+#endif \/* !_ZIP_ALLOCATION_H_ *\/\n","filename":"src\/java.base\/share\/native\/libzip\/zip_allocation.h","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"zip_allocation.h\"\n@@ -1426,0 +1427,1 @@\n+    ZIP_InitializeStreamAllocationHooks(&strm, MT_ZLIB);\n@@ -1556,0 +1558,1 @@\n+    ZIP_InitializeStreamAllocationHooks(&strm, MT_ZLIB);\n@@ -1599,0 +1602,4 @@\n+\/* Below are utility functions needed for heap dump compression. These are not used by\n+ * j.u.zip.\n+ *\/\n+\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}