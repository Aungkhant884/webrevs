{"files":[{"patch":"@@ -60,1 +60,1 @@\n-    int posixPerms = -1;\/\/ posix permissions\n+    int extraAttributes = -1; \/\/ e.g. POSIX permissions, sym links.\n@@ -134,1 +134,1 @@\n-        posixPerms = e.posixPerms;\n+        extraAttributes = e.extraAttributes;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -661,2 +661,2 @@\n-            \/\/ 12 bits for setuid, setgid, sticky + perms\n-            e.posixPerms = CENATX_PERMS(cen, pos) & 0xFFF;\n+            \/\/ read all bits in this field, including sym link attributes\n+            e.extraAttributes = CENATX_PERMS(cen, pos) & 0xFFFF;\n@@ -1099,1 +1099,0 @@\n-                \/\/ only set posix perms value via ZipEntry contructor for now\n@@ -1101,2 +1100,2 @@\n-                public int getPosixPerms(ZipEntry ze) {\n-                    return ze.posixPerms;\n+                public int getExtraAttributes(ZipEntry ze) {\n+                    return ze.extraAttributes;\n@@ -1105,2 +1104,2 @@\n-                public void setPosixPerms(ZipEntry ze, int perms) {\n-                    ze.posixPerms = perms;\n+                public void setExtraAttributes(ZipEntry ze, int extraAttrs) {\n+                    ze.extraAttributes = extraAttrs;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -514,1 +514,1 @@\n-        return (e.posixPerms < 0) ? version :\n+        return (e.extraAttributes < 0) ? version :\n@@ -609,2 +609,2 @@\n-        \/\/ external file attributes, used for storing posix permissions\n-        writeInt(e.posixPerms > 0 ? e.posixPerms << 16 : 0);\n+        \/\/ extra file attributes, used for storing posix permissions etc.\n+        writeInt(e.extraAttributes > 0 ? e.extraAttributes << 16 : 0);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-    public void setPosixPerms(ZipEntry ze, int posixPerms);\n-    public int getPosixPerms(ZipEntry ze);\n+    public void setExtraAttributes(ZipEntry ze, int extraAttrs);\n+    public int getExtraAttributes(ZipEntry ze);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        POSIXPERMS();\n+        ZIPFILEATTRS();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Event.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -508,1 +508,1 @@\n-    private boolean posixPermsDetected;\n+    private boolean extraAttrsDetected;\n@@ -952,4 +952,4 @@\n-        int perms = JUZFA.getPosixPerms(ze);\n-        if (!posixPermsDetected && perms != -1) {\n-            posixPermsDetected = true;\n-            Event.report(Event.ReporterCategory.POSIXPERMS, \"detected\");\n+        int extraAttrs = JUZFA.getExtraAttributes(ze);\n+        if (!extraAttrsDetected && extraAttrs != -1) {\n+            extraAttrsDetected = true;\n+            Event.report(Event.ReporterCategory.ZIPFILEATTRS, \"detected\");\n@@ -957,1 +957,1 @@\n-        JUZFA.setPosixPerms(ze2, perms);\n+        JUZFA.setExtraAttributes(ze2, extraAttrs);\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    private static boolean permsDetected;\n+    private static boolean extraAttrsDetected;\n@@ -785,2 +785,2 @@\n-                    if (!permsDetected && JUZFA.getPosixPerms(je) != -1) {\n-                        permsDetected = true;\n+                    if (!extraAttrsDetected && JUZFA.getExtraAttributes(je) != -1) {\n+                        extraAttrsDetected = true;\n@@ -1250,2 +1250,2 @@\n-        if (permsDetected) {\n-            warnings.add(rb.getString(\"posix.attributes.detected\"));\n+        if (extraAttrsDetected) {\n+            warnings.add(rb.getString(\"extra.attributes.detected\"));\n@@ -1780,2 +1780,2 @@\n-            Event.setReportListener(Event.ReporterCategory.POSIXPERMS,\n-                    (t, o) -> permsDetected = true);\n+            Event.setReportListener(Event.ReporterCategory.ZIPFILEATTRS,\n+                    (t, o) -> extraAttrsDetected = true);\n@@ -1816,1 +1816,1 @@\n-            Event.clearReportListener(Event.ReporterCategory.POSIXPERMS);\n+            Event.clearReportListener(Event.ReporterCategory.ZIPFILEATTRS);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-        {\"posix.attributes.detected\", \"POSIX file permission attributes detected. These attributes are ignored when signing and are not protected by the signature.\"},\n+        {\"extra.attributes.detected\", \"POSIX file permission and\/or symlink attributes detected. These attributes are ignored when signing and are not protected by the signature.\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,3 @@\n-    private static final String POSIXWARNING = \"POSIX file permission attributes detected. \" +\n-        \"These attributes are ignored when signing and are not protected by the signature.\";\n+    private static final String WARNING_MSG = \"POSIX file permission and\/or symlink \" +\n+        \"attributes detected. These attributes are ignored when signing and are not \" +\n+        \"protected by the signature.\";\n@@ -107,1 +108,1 @@\n-                .shouldContain(POSIXWARNING);\n+                .shouldContain(WARNING_MSG);\n@@ -119,1 +120,1 @@\n-                .shouldNotContain(POSIXWARNING);\n+                .shouldNotContain(WARNING_MSG);\n@@ -130,1 +131,1 @@\n-                .shouldContain(POSIXWARNING);\n+                .shouldContain(WARNING_MSG);\n@@ -139,1 +140,1 @@\n-                .shouldNotContain(POSIXWARNING);\n+                .shouldNotContain(WARNING_MSG);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/PosixPermissionsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8250968\n+ * @summary Symlinks attributes not preserved when using jarsigner on zip files\n+ * @modules jdk.jartool\/sun.security.tools.jarsigner\n+ *          java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ * @run main\/othervm SymLinkTest\n+ *\/\n+\n+import java.io.*;\n+import java.net.URI;\n+import java.nio.file.*;\n+import java.util.Formatter;\n+\n+import jdk.test.lib.SecurityTools;\n+\n+public class SymLinkTest {\n+    private final static String ZIPFILENAME = \"8250968-test.zip\";\n+    private static final String WARNING_MSG = \"POSIX file permission and\/or symlink \" +\n+            \"attributes detected. These attributes are ignored when signing and are not \" +\n+            \"protected by the signature.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        Files.deleteIfExists(Paths.get(ZIPFILENAME));\n+        try (FileOutputStream fos = new FileOutputStream(ZIPFILENAME)) {\n+            fos.write(ZIPBYTES);\n+        }\n+\n+        \/\/ check permissions before signing\n+        verifyExtraAttrs(ZIPFILENAME);\n+\n+        SecurityTools.keytool(\n+                \"-genkey\",\n+                \"-keyalg\", \"RSA\",\n+                \"-dname\", \"CN=Coffey, OU=JPG, O=Oracle, L=Santa Clara, ST=California, C=US\",\n+                \"-alias\", \"examplekey\",\n+                \"-storepass\", \"password\",\n+                \"-keypass\", \"password\",\n+                \"-keystore\", \"examplekeystore\",\n+                \"-validity\", \"365\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.jarsigner(\n+                \"-keystore\", \"examplekeystore\",\n+                \"-verbose\", ZIPFILENAME,\n+                \"-storepass\", \"password\",\n+                \"-keypass\", \"password\",\n+                \"examplekey\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(WARNING_MSG);\n+\n+        \/\/ zip file now signed. Recheck attributes\n+        verifyExtraAttrs(ZIPFILENAME);\n+\n+        SecurityTools.jarsigner(\"-keystore\", \"examplekeystore\",\n+                \"-storepass\", \"password\",\n+                \"-keypass\", \"password\",\n+                \"-verbose\",\n+                \"-verify\", ZIPFILENAME)\n+                .shouldHaveExitValue(0)\n+                .shouldContain(WARNING_MSG);\n+    }\n+\n+    private static void verifyExtraAttrs(String zipFileName) throws IOException {\n+        \/\/ the 16 bit extra attributes value should equal 0xa1ff - look for that pattern.\n+        \/\/ Such values can be read from zip file via 'unzip -Z -l -v <zipfile>'\n+        try (FileInputStream fis = new FileInputStream(ZIPFILENAME)) {\n+            byte[] b = fis.readAllBytes();\n+            boolean patternFound;\n+            for (int i = 0; i < b.length -1; i++) {\n+                patternFound = ((b[i] & 0xFF) == 0xFF) &&  ((b[i + 1] & 0xFF) == 0xA1);\n+                if (patternFound) {\n+                    return;\n+                }\n+            }\n+            throw new RuntimeException(\"extra attribute value not detected\");\n+        }\n+    }\n+\n+    \/**\n+     * Utility method which takes an byte array and converts to byte array\n+     * declaration.  For example:\n+     * <pre>\n+     *     {@code\n+     *        var fooJar = Files.readAllBytes(Path.of(\"foo.jar\"));\n+     *        var result = createByteArray(fooJar, \"FOOBYTES\");\n+     *      }\n+     * <\/pre>\n+     * @param bytes A byte array used to create a byte array declaration\n+     * @param name Name to be used in the byte array declaration\n+     * @return The formatted byte array declaration\n+     *\/\n+    public static String createByteArray(byte[] bytes, String name) {\n+        StringBuilder sb = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    public static byte[] %s = {\", name);\n+        final int linelen = 8;\n+        for (int i = 0; i < bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        return sb.toString();\n+    }\n+\n+    \/*\n+     * Created using the createByteArray utility method.\n+     * The zipfile itself was created via this example:\n+     * $ ls -l z\n+     * lrwxrwxrwx 1 test test 4 Aug 27 18:33 z -> ..\/z\n+     * $ zip -ry test.zip z\n+     *\/\n+    public final static byte[] ZIPBYTES = {\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0xa, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x94, (byte) 0x1b, (byte) 0x51, (byte) 0xb4, (byte) 0xcc,\n+            (byte) 0xb6, (byte) 0xf1, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1c, (byte) 0x0, (byte) 0x7a, (byte) 0x55,\n+            (byte) 0x54, (byte) 0x9, (byte) 0x0, (byte) 0x3, (byte) 0x77, (byte) 0xfc, (byte) 0x47, (byte) 0x5f,\n+            (byte) 0x78, (byte) 0xfc, (byte) 0x47, (byte) 0x5f, (byte) 0x75, (byte) 0x78, (byte) 0xb, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0xec,\n+            (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x2e, (byte) 0x2f, (byte) 0x7a, (byte) 0x50,\n+            (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x1e, (byte) 0x3, (byte) 0xa, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x94, (byte) 0x1b, (byte) 0x51, (byte) 0xb4,\n+            (byte) 0xcc, (byte) 0xb6, (byte) 0xf1, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x18, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff,\n+            (byte) 0xa1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7a, (byte) 0x55, (byte) 0x54,\n+            (byte) 0x5, (byte) 0x0, (byte) 0x3, (byte) 0x77, (byte) 0xfc, (byte) 0x47, (byte) 0x5f, (byte) 0x75,\n+            (byte) 0x78, (byte) 0xb, (byte) 0x0, (byte) 0x1, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b,\n+            (byte) 0x5, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x0, (byte) 0x47, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3f, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+    };\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/SymLinkTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}