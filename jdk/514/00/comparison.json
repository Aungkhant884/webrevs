{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-        AquaUtilControlSize.addSizePropertyListener(b);\n+        AquaUtilControlSize.removeSizePropertyListener(b);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-        if (editor != null && editor instanceof JSpinner.DefaultEditor) {\n+        if (editor instanceof DefaultEditor) {\n@@ -154,0 +154,8 @@\n+        JComponent editor = spinner.getEditor();\n+        if (editor instanceof DefaultEditor) {\n+            JTextField tf = ((JSpinner.DefaultEditor) editor).getTextField();\n+            if (tf != null) {\n+                tf.removeFocusListener(getNextButtonHandler());\n+                tf.removeFocusListener(getPreviousButtonHandler());\n+            }\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaSpinnerUI.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -494,6 +494,0 @@\n-    @Override\n-    public void setBackground(final Color c) {\n-        super.setBackground(c);\n-        updateOpaque();\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+import java.awt.Component;\n+import java.awt.Container;\n@@ -26,0 +28,1 @@\n+import javax.swing.JComponent;\n@@ -27,0 +30,2 @@\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n@@ -55,13 +60,27 @@\n-    private static void checkListenersCount(JFileChooser chooser) {\n-        test(chooser.getComponentListeners());\n-        test(chooser.getFocusListeners());\n-        test(chooser.getHierarchyListeners());\n-        test(chooser.getHierarchyBoundsListeners());\n-        test(chooser.getKeyListeners());\n-        test(chooser.getMouseListeners());\n-        test(chooser.getMouseMotionListeners());\n-        test(chooser.getMouseWheelListeners());\n-        test(chooser.getInputMethodListeners());\n-        test(chooser.getPropertyChangeListeners());\n-        test(chooser.getAncestorListeners());\n-        test(chooser.getVetoableChangeListeners());\n+    private static void checkListenersCount(Component comp) {\n+        test(comp.getComponentListeners());\n+        test(comp.getFocusListeners());\n+        test(comp.getHierarchyListeners());\n+        test(comp.getHierarchyBoundsListeners());\n+        test(comp.getKeyListeners());\n+        test(comp.getMouseListeners());\n+        test(comp.getMouseMotionListeners());\n+        test(comp.getMouseWheelListeners());\n+        test(comp.getInputMethodListeners());\n+        test(comp.getPropertyChangeListeners());\n+        if (comp instanceof JComponent) {\n+            test(((JComponent) comp).getAncestorListeners());\n+            test(((JComponent) comp).getVetoableChangeListeners());\n+        }\n+        if (comp instanceof JMenuItem) {\n+            test(((JMenuItem) comp).getMenuKeyListeners());\n+            test(((JMenuItem) comp).getMenuDragMouseListeners());\n+        }\n+        if (comp instanceof JMenu) {\n+            test(((JMenu) comp).getMenuListeners());\n+        }\n+        if (comp instanceof Container) {\n+            for (Component child : ((Container) comp).getComponents()) {\n+                checkListenersCount(child);\n+            }\n+        }\n@@ -76,1 +95,1 @@\n-        if (length > 10) {\n+        if (length > 20) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileChooserListenerLeak.java","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import java.awt.Component;\n+import java.awt.Container;\n@@ -26,0 +28,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n@@ -27,1 +32,37 @@\n-import javax.swing.*;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JProgressBar;\n+import javax.swing.JRadioButton;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.JSeparator;\n+import javax.swing.JSlider;\n+import javax.swing.JSpinner;\n+import javax.swing.JSplitPane;\n+import javax.swing.JTabbedPane;\n+import javax.swing.JTable;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.JTextPane;\n+import javax.swing.JToggleButton;\n+import javax.swing.JToolBar;\n+import javax.swing.JToolTip;\n+import javax.swing.JTree;\n+import javax.swing.JViewport;\n+import javax.swing.SwingUtilities;\n@@ -30,0 +71,3 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -35,3 +79,3 @@\n- * @bug 8134947\n- * @author Sergey Bylokhov\n- * @run main\/timeout=300\/othervm -Xmx12m -XX:+HeapDumpOnOutOfMemoryError UnninstallUIMemoryLeaks\n+ * @bug 8134947 8253977\n+ * @library \/test\/lib\n+ * @run main\/timeout=450\/othervm UnninstallUIMemoryLeaks\n@@ -43,5 +87,7 @@\n-    public static void main(final String[] args) throws Exception {\n-        try {\n-            createGUI();\n-            for (final LookAndFeelInfo laf : getInstalledLookAndFeels()) {\n-                final String name = laf.getName();\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            long end = System.nanoTime() + TimeUnit.SECONDS.toNanos(400);\n+            \/\/ run one task per look and feel\n+            List<Process> tasks = new ArrayList<>();\n+            for (LookAndFeelInfo laf : getInstalledLookAndFeels()) {\n+                String name = laf.getName();\n@@ -49,6 +95,1 @@\n-                    SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n-                    SwingUtilities.invokeAndWait(() -> {\n-                        for (int i = 0; i < 4000; ++i) {\n-                            SwingUtilities.updateComponentTreeUI(frame);\n-                        }\n-                    });\n+                    tasks.add(runProcess(laf));\n@@ -57,0 +98,21 @@\n+            for (Process p : tasks) {\n+                if (!p.waitFor(end - System.nanoTime(), TimeUnit.NANOSECONDS)) {\n+                    p.destroyForcibly();\n+                }\n+            }\n+            for (Process task : tasks) {\n+                new OutputAnalyzer(task).shouldHaveExitValue(0)\n+                                        .stderrShouldBeEmpty();\n+            }\n+            return;\n+        }\n+\n+        try {\n+            createGUI();\n+            long end = System.nanoTime() + TimeUnit.SECONDS.toNanos(350);\n+            SwingUtilities.invokeAndWait(() -> {\n+                while (end > System.nanoTime()) {\n+                    SwingUtilities.updateComponentTreeUI(frame);\n+                }\n+                checkListenersCount(frame);\n+            });\n@@ -58,1 +120,1 @@\n-            if (frame != null) { EventQueue.invokeAndWait(() -> frame.dispose()); }\n+            if (frame != null) {EventQueue.invokeAndWait(frame::dispose);}\n@@ -65,0 +127,2 @@\n+            \/\/TODO we sometimes generate unnecessary repaint events\n+            frame.setIgnoreRepaint(true);\n@@ -124,7 +188,26 @@\n-    private static void setLookAndFeel(final LookAndFeelInfo laf) {\n-        try {\n-            UIManager.setLookAndFeel(laf.getClassName());\n-            System.out.println(\"LookAndFeel: \" + laf.getClassName());\n-        } catch (ClassNotFoundException | InstantiationException |\n-                UnsupportedLookAndFeelException | IllegalAccessException e) {\n-            throw new RuntimeException(e);\n+    private static void checkListenersCount(Component comp) {\n+        test(comp.getComponentListeners());\n+        test(comp.getFocusListeners());\n+        test(comp.getHierarchyListeners());\n+        test(comp.getHierarchyBoundsListeners());\n+        test(comp.getKeyListeners());\n+        test(comp.getMouseListeners());\n+        test(comp.getMouseMotionListeners());\n+        test(comp.getMouseWheelListeners());\n+        test(comp.getInputMethodListeners());\n+        test(comp.getPropertyChangeListeners());\n+        if (comp instanceof JComponent) {\n+            test(((JComponent) comp).getAncestorListeners());\n+            test(((JComponent) comp).getVetoableChangeListeners());\n+        }\n+        if (comp instanceof JMenuItem) {\n+            test(((JMenuItem) comp).getMenuKeyListeners());\n+            test(((JMenuItem) comp).getMenuDragMouseListeners());\n+        }\n+        if (comp instanceof JMenu) {\n+            test(((JMenu) comp).getMenuListeners());\n+        }\n+        if(comp instanceof Container) {\n+            for(Component child: ((Container)comp).getComponents()){\n+                checkListenersCount(child);\n+            }\n@@ -133,0 +216,19 @@\n+\n+    \/**\n+     * Checks the count of specific listeners, assumes that the proper\n+     * implementation does not use more than 20 listeners.\n+     *\/\n+    private static void test(Object[] listeners) {\n+        int length = listeners.length;\n+        if (length > 20) {\n+            throw new RuntimeException(\"The count of listeners is: \" + length);\n+        }\n+    }\n+\n+    private static Process runProcess(LookAndFeelInfo laf) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Dswing.defaultlaf=\" + laf.getClassName(), \"-mx9m\",\n+                \"-XX:+HeapDumpOnOutOfMemoryError\",\n+                UnninstallUIMemoryLeaks.class.getSimpleName(), \"mark\");\n+        return ProcessTools.startProcess(laf.getName(), pb);\n+    }\n","filename":"test\/jdk\/javax\/swing\/UI\/UnninstallUIMemoryLeaks\/UnninstallUIMemoryLeaks.java","additions":126,"deletions":24,"binary":false,"changes":150,"status":"modified"}]}