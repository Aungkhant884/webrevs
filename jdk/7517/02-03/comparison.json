{"files":[{"patch":"@@ -55,2 +55,6 @@\n-  __ far_jump(ExternalAddress(entry_point), NULL, rscratch1, true);\n-  __ align(wordSize);\n+  int jump_code_size = __ far_jump(ExternalAddress(entry_point));\n+  \/\/ IC stub code size is not expected to vary depending on target address.\n+  \/\/ We use NOPs to make the ldr+far_jump+int64 size equal to ic_stub_code_size.\n+  for (int i = jump_code_size; i < ic_stub_code_size() - 12; i += 4) {\n+    __ nop();\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/icBuffer_aarch64.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-void MacroAssembler::far_jump(Address entry, CodeBuffer *cbuf, Register tmp, bool fixed_size) {\n+int MacroAssembler::far_jump(Address entry, CodeBuffer *cbuf, Register tmp) {\n@@ -424,0 +424,1 @@\n+  address start = pc();\n@@ -435,5 +436,0 @@\n-    if (codecache_branch_needs_far_jump() && fixed_size) {\n-      \/\/ ic_buffer case: jump code size is not expected to vary depending on target address\n-      nop();\n-      nop();\n-    }\n@@ -441,0 +437,1 @@\n+  return pc() - start;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1076,1 +1076,1 @@\n-  static bool trampoline_needs_far_jump() {\n+  static bool is_trampoline_needed() {\n@@ -1082,1 +1082,1 @@\n-    return CodeCache::max_distance_to_codestub() > branch_range;\n+    return CodeCache::max_distance_to_non_nmethod() > branch_range;\n@@ -1087,1 +1087,1 @@\n-  void far_jump(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1, bool fixed_size = false);\n+  int far_jump(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-  if (a.trampoline_needs_far_jump()\n+  if (a.is_trampoline_needed()\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -898,1 +898,1 @@\n-size_t CodeCache::max_distance_to_codestub() {\n+size_t CodeCache::max_distance_to_non_nmethod() {\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-  static size_t max_distance_to_codestub();\n+  static size_t max_distance_to_non_nmethod();\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}