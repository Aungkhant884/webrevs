{"files":[{"patch":"@@ -261,11 +261,9 @@\n-  if (rate > 0.0) {\n-    bool is_spiking = _allocation_rate.is_spiking(rate, _spike_threshold_sd);\n-    if (is_spiking && avg_cycle_time > allocation_headroom \/ rate) {\n-      log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n-                   avg_cycle_time * 1000,\n-                   byte_size_in_proper_unit(rate), proper_unit_for_byte_size(rate),\n-                   byte_size_in_proper_unit(allocation_headroom), proper_unit_for_byte_size(allocation_headroom),\n-                   _spike_threshold_sd);\n-      _last_trigger = SPIKE;\n-      return true;\n-    }\n+  bool is_spiking = _allocation_rate.is_spiking(rate, _spike_threshold_sd);\n+  if (is_spiking && avg_cycle_time > allocation_headroom \/ rate) {\n+    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+                 avg_cycle_time * 1000,\n+                 byte_size_in_proper_unit(rate), proper_unit_for_byte_size(rate),\n+                 byte_size_in_proper_unit(allocation_headroom), proper_unit_for_byte_size(allocation_headroom),\n+                 _spike_threshold_sd);\n+    _last_trigger = SPIKE;\n+    return true;\n@@ -341,0 +339,4 @@\n+  if (rate <= 0.0) {\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}