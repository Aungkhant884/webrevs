{"files":[{"patch":"@@ -59,2 +59,2 @@\n-  _margin_of_error_sd(ShenandoahReactiveInitialConfidence),\n-  _spike_threshold_sd(ShenandoahReactiveInitialSpikeThreshold),\n+  _margin_of_error_sd(ShenandoahAdaptiveInitialConfidence),\n+  _spike_threshold_sd(ShenandoahAdaptiveInitialSpikeThreshold),\n@@ -197,1 +197,1 @@\n-bool ShenandoahAdaptiveHeuristics::should_start_gc() const {\n+bool ShenandoahAdaptiveHeuristics::should_start_gc() {\n@@ -210,3 +210,2 @@\n-  ShenandoahAdaptiveHeuristics *heuristic = const_cast<ShenandoahAdaptiveHeuristics *>(this);\n-  heuristic->_allocation_rate.sample(bytes_allocated_since_gc_start);\n-  heuristic->_last_trigger = OTHER;\n+  _allocation_rate.sample(bytes_allocated_since_gc_start);\n+  _last_trigger = OTHER;\n@@ -261,1 +260,1 @@\n-                                                               size_t bytes_allocated_since_gc_start) const {\n+                                                               size_t bytes_allocated_since_gc_start) {\n@@ -288,1 +287,1 @@\n-    const_cast<ShenandoahAdaptiveHeuristics *>(this)->_last_trigger = RATE;\n+    _last_trigger = RATE;\n@@ -298,1 +297,1 @@\n-    const_cast<ShenandoahAdaptiveHeuristics *>(this)->_last_trigger = SPIKE;\n+    _last_trigger = SPIKE;\n@@ -331,1 +330,0 @@\n-\n@@ -336,3 +334,3 @@\n-  _interval_ns(NANOUNITS \/ ShenandoahReactiveSampleFrequencyHz),\n-  _rate(ShenandoahReactiveSampleSizeSeconds * ShenandoahReactiveSampleFrequencyHz, ShenandoahReactiveDecayFactor),\n-  _rate_avg(ShenandoahReactiveSampleSizeSeconds * ShenandoahReactiveSampleFrequencyHz, ShenandoahReactiveDecayFactor) {\n+  _interval_ns(NANOUNITS \/ ShenandoahAdaptiveSampleFrequencyHz),\n+  _rate(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz, ShenandoahAdaptiveDecayFactor),\n+  _rate_avg(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz, ShenandoahAdaptiveDecayFactor) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n@@ -83,1 +83,1 @@\n-                                   size_t bytes_allocated_since_gc_start) const;\n+                                   size_t bytes_allocated_since_gc_start);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-bool ShenandoahAggressiveHeuristics::should_start_gc() const {\n+bool ShenandoahAggressiveHeuristics::should_start_gc() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-bool ShenandoahCompactHeuristics::should_start_gc() const {\n+bool ShenandoahCompactHeuristics::should_start_gc() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  _gc_time_history(new TruncatedSeq(10, ShenandoahReactiveDecayFactor)),\n+  _gc_time_history(new TruncatedSeq(10, ShenandoahAdaptiveDecayFactor)),\n@@ -185,1 +185,1 @@\n-bool ShenandoahHeuristics::should_start_gc() const {\n+bool ShenandoahHeuristics::should_start_gc() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-bool ShenandoahPassiveHeuristics::should_start_gc() const {\n+bool ShenandoahPassiveHeuristics::should_start_gc() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-bool ShenandoahStaticHeuristics::should_start_gc() const {\n+bool ShenandoahStaticHeuristics::should_start_gc() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  virtual bool should_start_gc() const;\n+  virtual bool should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-  product(uintx, ShenandoahReactiveSampleFrequencyHz, 10, EXPERIMENTAL,     \\\n+  product(uintx, ShenandoahAdaptiveSampleFrequencyHz, 10, EXPERIMENTAL,     \\\n@@ -134,1 +134,1 @@\n-  product(uintx, ShenandoahReactiveSampleSizeSeconds, 10, EXPERIMENTAL,     \\\n+  product(uintx, ShenandoahAdaptiveSampleSizeSeconds, 10, EXPERIMENTAL,     \\\n@@ -139,1 +139,1 @@\n-  product(double, ShenandoahReactiveInitialConfidence, 1.8, EXPERIMENTAL,   \\\n+  product(double, ShenandoahAdaptiveInitialConfidence, 1.8, EXPERIMENTAL,   \\\n@@ -145,1 +145,1 @@\n-  product(double, ShenandoahReactiveInitialSpikeThreshold, 1.8, EXPERIMENTAL, \\\n+  product(double, ShenandoahAdaptiveInitialSpikeThreshold, 1.8, EXPERIMENTAL, \\\n@@ -152,1 +152,1 @@\n-  product(double, ShenandoahReactiveDecayFactor, 0.5, EXPERIMENTAL,         \\\n+  product(double, ShenandoahAdaptiveDecayFactor, 0.5, EXPERIMENTAL,         \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}