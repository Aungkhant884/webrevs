{"files":[{"patch":"@@ -57,1 +57,0 @@\n-  _available_at_cycle_start(0),\n@@ -125,1 +124,0 @@\n-  _available_at_cycle_start = ShenandoahHeap::heap()->free_set()->available();\n@@ -210,1 +208,1 @@\n-  _allocation_rate.sample(allocated);\n+  double rate = _allocation_rate.sample(allocated);\n@@ -263,1 +261,1 @@\n-  double instant_alloc_rate = _allocation_rate.instantaneous_rate(allocated);\n+  double instant_alloc_rate = (rate != 0.0) ? rate : _allocation_rate.instantaneous_rate(allocated);\n@@ -312,1 +310,1 @@\n-void ShenandoahAllocationRate::sample(size_t allocated) {\n+double ShenandoahAllocationRate::sample(size_t allocated) {\n@@ -314,0 +312,1 @@\n+  double rate = 0.0;\n@@ -316,1 +315,2 @@\n-      _rate.add(instantaneous_rate(now, allocated));\n+      rate = instantaneous_rate(now, allocated);\n+      _rate.add(rate);\n@@ -323,0 +323,1 @@\n+  return rate;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  void sample(size_t allocated);\n+  double sample(size_t allocated);\n@@ -104,6 +104,0 @@\n-  \/\/ Record the available heap at the start of the cycle so that we can\n-  \/\/ evaluate the outcome of the cycle. This lets us 'react' to concurrent\n-  \/\/ cycles that did not degenerate, but perhaps did not reclaim as much\n-  \/\/ memory as we would like.\n-  size_t _available_at_cycle_start;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}