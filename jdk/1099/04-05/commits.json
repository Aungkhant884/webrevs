[{"commit":{"message":"Remove unused member"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"68ba62856c5fd507c402521fa5f105b1ca88215a"},{"commit":{"message":"Avoid recomputing instantaneous allocation rate"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"85c32e403882240a1e9b46ebe655520a217763ac"},{"commit":{"message":"Merge branch 'master' into shenandoah-reactive-heuristic"},"files":[],"sha":"02f5c2d7ccb29bd325aff643b5e7f311df3104cb"},{"commit":{"message":"Fix wrong type for os::elapsedTime"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"}],"sha":"f6bb03918945eae02d0a02aebcf3c5894538f053"},{"commit":{"message":"Remove dependency from allocation rate to adaptive heuristic"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"3ec8f3c5bd41f04877a5a85b06d2025ec308c7ae"},{"commit":{"message":"Defend against underflow and division by zero"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"}],"sha":"543afbbe24c07588753f96de0fc6d5dd9d8a7331"},{"commit":{"message":"Inline calls to gc decision methods (vestige of an earlier design)"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"6ef8dc68379f9c724d7b7b7ad371dff762021753"},{"commit":{"message":"Use os::elapsedTime to avoid type issues and to be consistent with other heuristics code"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"98d459bca99f6f515a88dcb76af0581756cdfa76"},{"commit":{"message":"Reuse instantaneous_rate method instead of duplicating code"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"5d0512aad996db2d0e1313ed529e40f06bc1a099"},{"commit":{"message":"Rename variables to improve readability"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"ec99e2d5392c6677dfbeb91cb16c214515bbbe3d"},{"commit":{"message":"Make logging messages more consistent"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"}],"sha":"8e204f452c1372461104dbaa6bdceb0293cddf5c"},{"commit":{"message":"Restore call to reset allocation counter at cycle start"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"}],"sha":"8b2528a0db94cac5415f705e2cc2b0f6235071d1"},{"commit":{"message":"Remove const qualifier from should_start_gc\n\nThis lets the heuristics update state without const_casts."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"275e80a26612cffa1fec4ec9793373e09460ec20"},{"commit":{"message":"Rename ShenandoahReactive flags to ShenandoahAdaptive flags."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"}],"sha":"66dd531ac57e791f6e9110377fb8b3ab5f8343d8"},{"commit":{"message":"Merge 'reactive' heuristic into 'adaptive' heuristic"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"7f1de19bf4f652d2deeac523c1ec8868ef6975ee"},{"commit":{"message":"Incorporate review feed back\n\n - Remove unnecessary log level checks\n - More idiomatic style"},"files":[],"sha":"2efc73cbd68f1a8bf3fe69bfc7cc573ab1c092f3"},{"commit":{"message":"Add a \"reactive\" heuristic for triggering concurrent GC cycles\n\nThe reactive heuristic maintains a margin of error and a spike\ndetection mechanism to trigger cycles somewhat more aggressively\nthan the 'adaptive' heuristic. This heuristic 'reacts' to the\noutcome of GC cycles by adjusting the sensitivity of the triggers."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp"}],"sha":"b6bc7037a92af6e029ba10c1aa3945d30f0683c8"}]