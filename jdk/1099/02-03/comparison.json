{"files":[{"patch":"@@ -57,1 +57,0 @@\n-  _allocation_rate(this),\n@@ -265,1 +264,2 @@\n-  if (_allocation_rate.is_spiking(instant_alloc_rate) && avg_cycle_time > allocation_headroom \/ instant_alloc_rate) {\n+  bool is_spiking = _allocation_rate.is_spiking(instant_alloc_rate, _spike_threshold_sd);\n+  if (is_spiking && avg_cycle_time > allocation_headroom \/ instant_alloc_rate) {\n@@ -304,2 +304,1 @@\n-ShenandoahAllocationRate::ShenandoahAllocationRate(ShenandoahAdaptiveHeuristics *heuristics) :\n-  _heuristics(heuristics),\n+ShenandoahAllocationRate::ShenandoahAllocationRate() :\n@@ -309,2 +308,2 @@\n-  _rate(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz, ShenandoahAdaptiveDecayFactor),\n-  _rate_avg(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz, ShenandoahAdaptiveDecayFactor) {\n+  _rate(int(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz), ShenandoahAdaptiveDecayFactor),\n+  _rate_avg(int(ShenandoahAdaptiveSampleSizeSeconds * ShenandoahAdaptiveSampleFrequencyHz), ShenandoahAdaptiveDecayFactor) {\n@@ -326,1 +325,1 @@\n-double ShenandoahAllocationRate::upper_bound(double standard_deviations) const {\n+double ShenandoahAllocationRate::upper_bound(double sds) const {\n@@ -331,1 +330,1 @@\n-  return _rate.davg() + (standard_deviations * _rate_avg.dsd());\n+  return _rate.davg() + (sds * _rate_avg.dsd());\n@@ -339,1 +338,1 @@\n-bool ShenandoahAllocationRate::is_spiking(double rate) const {\n+bool ShenandoahAllocationRate::is_spiking(double rate, double threshold) const {\n@@ -345,1 +344,1 @@\n-    if (z_score > _heuristics->_spike_threshold_sd) {\n+    if (z_score > threshold) {\n@@ -357,4 +356,6 @@\n-  size_t allocation_delta = allocated - _last_sample_value;\n-  double time_delta_sec = time - _last_sample_time;\n-  return allocation_delta \/ time_delta_sec;\n-}\n\\ No newline at end of file\n+  size_t last_value = _last_sample_value;\n+  double last_time = _last_sample_time;\n+  size_t allocation_delta = (allocated > last_value) ? (allocated - last_value) : 0;\n+  double time_delta_sec = time - last_time;\n+  return (time_delta_sec > 0)  ? (allocation_delta \/ time_delta_sec) : 0;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-class ShenandoahAdaptiveHeuristics;\n-\n@@ -36,6 +34,1 @@\n-  explicit ShenandoahAllocationRate(ShenandoahAdaptiveHeuristics* heuristics);\n-\n-  void sample(size_t allocated);\n-\n-  double upper_bound(double standard_deviations) const;\n-\n+  explicit ShenandoahAllocationRate();\n@@ -44,1 +37,1 @@\n-  bool is_spiking(double rate) const;\n+  void sample(size_t allocated);\n@@ -47,0 +40,2 @@\n+  double upper_bound(double sds) const;\n+  bool is_spiking(double rate, double threshold) const;\n@@ -52,1 +47,0 @@\n-  ShenandoahAdaptiveHeuristics *_heuristics;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"}]}