{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -Xlog:class+unload -XX:+WhiteBoxAPI ConstantPoolDependsTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -Xlog:class+unload -Xcomp -XX:+WhiteBoxAPI ConstantPoolDependsTest\n@@ -41,0 +41,1 @@\n+import java.lang.ref.Reference;\n@@ -74,2 +75,2 @@\n-        \/\/ Unless MyTest_class is referenced here, the compiler can unload it.\n-        System.out.println(\"Should not unload anything before here because \" + MyTest_class + \" is still alive.\");\n+        \/\/ Should not unload anything before here because MyTest_class is kept alive by the following fence.\n+        Reference.reachabilityFence(MyTest_class);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/ConstantPoolDependsTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI KeepAliveObject\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -Xcomp -XX:+WhiteBoxAPI KeepAliveObject\n@@ -39,0 +39,1 @@\n+import java.lang.ref.Reference;\n@@ -45,1 +46,0 @@\n-  public static Object escape = null;\n@@ -52,1 +52,0 @@\n-    escape = o;\n@@ -69,0 +68,1 @@\n+    Reference.reachabilityFence(o);\n@@ -70,1 +70,0 @@\n-    escape = null;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveObject.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=debug UnloadTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=debug -Xcomp UnloadTest\n@@ -39,0 +39,1 @@\n+import java.lang.ref.Reference;\n@@ -52,1 +53,0 @@\n-    private static Object o;\n@@ -55,2 +55,2 @@\n-       test_unload_instance_klass();\n-       test_unload_obj_array_klass();\n+        test_unload_instance_klass();\n+        test_unload_obj_array_klass();\n@@ -66,1 +66,1 @@\n-        o = cl.loadClass(className).newInstance();\n+        Object o = cl.loadClass(className).newInstance();\n@@ -79,0 +79,1 @@\n+        Reference.reachabilityFence(o);\n@@ -94,1 +95,1 @@\n-        o = Array.newInstance(cl.loadClass(\"test.Empty\"), 1);\n+        Object o = Array.newInstance(cl.loadClass(\"test.Empty\"), 1);\n@@ -107,0 +108,1 @@\n+        Reference.reachabilityFence(o);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}