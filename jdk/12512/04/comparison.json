{"files":[{"patch":"@@ -92,1 +92,1 @@\n-  do_klass(BasicVirtualThread_klass,                    java_lang_BaseVirtualThread                           ) \\\n+  do_klass(BaseVirtualThread_klass,                     java_lang_BaseVirtualThread                           ) \\\n@@ -94,0 +94,1 @@\n+  do_klass(BoundVirtualThread_klass,                    java_lang_BoundVirtualThread                          ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  template(java_lang_BoundVirtualThread,              \"java\/lang\/ThreadBuilders$BoundVirtualThread\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3100,1 +3100,1 @@\n-  if (thread_obj != nullptr && thread_obj->is_a(vmClasses::BasicVirtualThread_klass())) {\n+  if (thread_obj != nullptr && thread_obj->is_a(vmClasses::BaseVirtualThread_klass())) {\n@@ -3953,7 +3953,0 @@\n-  \/\/ No JVM TI with --enable-preview and no continuations support.\n-  if (!VMContinuations && Arguments::enable_preview() && JvmtiExport::is_jvmti_version(version)) {\n-    *penv = nullptr;\n-    ret = JNI_EVERSION;\n-    return ret;\n-  }\n-\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1011,3 +1011,0 @@\n-  if (!Continuations::enabled()) {\n-    return JVMTI_ERROR_NONE; \/\/ Nothing to do when there are no virtual threads;\n-  }\n@@ -1029,1 +1026,1 @@\n-    \/\/ Collect threads from except_list for which resumed status must be restored.\n+    \/\/ Collect threads from except_list for which resumed status must be restored (only for VirtualThread case)\n@@ -1033,1 +1030,1 @@\n-      if (!JvmtiVTSuspender::is_vthread_suspended(thread_oop)) {\n+      if (java_lang_VirtualThread::is_instance(thread_oop) && !JvmtiVTSuspender::is_vthread_suspended(thread_oop)) {\n@@ -1045,3 +1042,4 @@\n-          java_lang_VirtualThread::is_instance(vt_oop) &&\n-          JvmtiEnvBase::is_vthread_alive(vt_oop) &&\n-          !JvmtiVTSuspender::is_vthread_suspended(vt_oop) &&\n+          ((java_lang_VirtualThread::is_instance(vt_oop) &&\n+            JvmtiEnvBase::is_vthread_alive(vt_oop) &&\n+            !JvmtiVTSuspender::is_vthread_suspended(vt_oop)) ||\n+            (java_thread->is_bound_vthread() && !java_thread->is_suspended())) &&\n@@ -1131,3 +1129,0 @@\n-  if (!Continuations::enabled()) {\n-    return JVMTI_ERROR_NONE; \/\/ Nothing to do when there are no virtual threads;\n-  }\n@@ -1142,1 +1137,1 @@\n-  \/\/ Collect threads from except_list for which suspended status must be restored.\n+  \/\/ Collect threads from except_list for which suspended status must be restored (only for VirtualThread case)\n@@ -1146,1 +1141,1 @@\n-    if (JvmtiVTSuspender::is_vthread_suspended(thread_oop)) {\n+    if (java_lang_VirtualThread::is_instance(thread_oop) && JvmtiVTSuspender::is_vthread_suspended(thread_oop)) {\n@@ -1158,3 +1153,4 @@\n-        java_lang_VirtualThread::is_instance(vt_oop) &&\n-        JvmtiEnvBase::is_vthread_alive(vt_oop) &&\n-        JvmtiVTSuspender::is_vthread_suspended(vt_oop) &&\n+        ((java_lang_VirtualThread::is_instance(vt_oop) &&\n+          JvmtiEnvBase::is_vthread_alive(vt_oop) &&\n+          JvmtiVTSuspender::is_vthread_suspended(vt_oop)) ||\n+          (java_thread->is_bound_vthread() && java_thread->is_suspended())) &&\n@@ -1193,1 +1189,1 @@\n-  if (thread_oop != nullptr && java_lang_VirtualThread::is_instance(thread_oop)) {\n+  if (thread_oop != nullptr && thread_oop->is_a(vmClasses::BaseVirtualThread_klass())) {\n@@ -1563,0 +1559,4 @@\n+  if (thread_oop->is_a(vmClasses::BaseVirtualThread_klass())) {\n+    \/\/ No support for virtual threads.\n+    return JVMTI_ERROR_UNSUPPORTED_OPERATION;\n+  }\n@@ -1567,4 +1567,0 @@\n-  if (java_lang_VirtualThread::is_instance(thread_oop)) {\n-    \/\/ No support for virtual threads.\n-    return JVMTI_ERROR_UNSUPPORTED_OPERATION;\n-  }\n@@ -1887,1 +1883,1 @@\n-  if (thread_obj != nullptr && java_lang_VirtualThread::is_instance(thread_obj)) {\n+  if (thread_obj != nullptr && thread_obj->is_a(vmClasses::BaseVirtualThread_klass())) {\n@@ -3898,1 +3894,2 @@\n-    if (JavaThread::cast(thread)->is_vthread_mounted()) {\n+    JavaThread* jt = JavaThread::cast(thread);\n+    if (jt->is_vthread_mounted() || jt->is_bound_vthread()) {\n@@ -3926,1 +3923,1 @@\n-  if (thread_oop != nullptr && java_lang_VirtualThread::is_instance(thread_oop)) {\n+  if (thread_oop != nullptr && thread_oop->is_a(vmClasses::BaseVirtualThread_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1512,1 +1512,1 @@\n-    if (thread_oop == nullptr || !thread_oop->is_a(vmClasses::VirtualThread_klass())) {\n+    if (thread_oop == nullptr || !thread_oop->is_a(vmClasses::BaseVirtualThread_klass())) {\n@@ -1586,1 +1586,3 @@\n-    assert(single_suspend || is_virtual, \"SuspendAllVirtualThreads should never suspend non-virtual threads\");\n+    assert(thread_h() != nullptr, \"sanity check\");\n+    assert(single_suspend || thread_h()->is_a(vmClasses::BaseVirtualThread_klass()),\n+           \"SuspendAllVirtualThreads should never suspend non-virtual threads\");\n@@ -1646,1 +1648,3 @@\n-    assert(single_resume || is_virtual, \"ResumeAllVirtualThreads should never resume non-virtual threads\");\n+    assert(thread_h() != nullptr, \"sanity check\");\n+    assert(single_resume || thread_h()->is_a(vmClasses::BaseVirtualThread_klass()),\n+           \"ResumeAllVirtualThreads should never resume non-virtual threads\");\n@@ -1835,1 +1839,2 @@\n-        !jt->is_hidden_from_external_view()) {\n+        !jt->is_hidden_from_external_view() &&\n+        !jt->is_bound_vthread()) {\n@@ -1922,1 +1927,1 @@\n-  if (thread_obj != nullptr && java_lang_VirtualThread::is_instance(thread_obj)) {\n+  if (thread_obj != nullptr && thread_obj->is_a(vmClasses::BaseVirtualThread_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1471,0 +1471,8 @@\n+  if (JvmtiExport::can_support_virtual_threads() && thread->is_bound_vthread()) {\n+    \/\/ Check for VirtualThreadStart event instead.\n+    HandleMark hm(thread);\n+    Handle vthread(thread, thread->threadObj());\n+    JvmtiExport::post_vthread_start((jthread)vthread.raw_value());\n+    return;\n+  }\n+\n@@ -1507,0 +1515,8 @@\n+  if (JvmtiExport::can_support_virtual_threads() && thread->is_bound_vthread()) {\n+    \/\/ Check for VirtualThreadEnd event instead.\n+    HandleMark hm(thread);\n+    Handle vthread(thread, thread->threadObj());\n+    JvmtiExport::post_vthread_end((jthread)vthread.raw_value());\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -438,0 +438,1 @@\n+  _is_bound_vthread(false),\n@@ -1652,0 +1653,7 @@\n+#if INCLUDE_JVMTI\n+  if (thread_oop()->is_a(vmClasses::BoundVirtualThread_klass())) {\n+    set_is_bound_vthread(true);\n+    set_jvmti_vthread(thread_oop());\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -319,0 +319,1 @@\n+  bool                  _is_bound_vthread;               \/\/ Cache of threadObj()->is_a(vmClasses::BoundVirtualThread_klass())\n@@ -653,0 +654,3 @@\n+  bool is_bound_vthread()                        { return _is_bound_vthread; }\n+  void set_is_bound_vthread(bool val)            { _is_bound_vthread = val; }\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2174,1 +2174,1 @@\n-      if (thread_obj != nullptr && !thread_obj->is_a(vmClasses::BasicVirtualThread_klass())) {\n+      if (thread_obj != nullptr && !thread_obj->is_a(vmClasses::BaseVirtualThread_klass())) {\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-  if (threadObj != nullptr && threadObj->is_a(vmClasses::BasicVirtualThread_klass())) {\n+  if (threadObj != nullptr && threadObj->is_a(vmClasses::BaseVirtualThread_klass())) {\n@@ -1093,1 +1093,2 @@\n-                                             bool include_jni_attaching_threads) {\n+                                             bool include_jni_attaching_threads,\n+                                             bool include_bound_virtual_threads) {\n@@ -1121,0 +1122,5 @@\n+    \/\/ skip instances of BoundVirtualThread\n+    if (!include_bound_virtual_threads && jt->threadObj()->is_a(vmClasses::BoundVirtualThread_klass())) {\n+      continue;\n+    }\n+\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -414,1 +414,2 @@\n-                        bool include_jni_attaching_threads = true);\n+                        bool include_jni_attaching_threads = true,\n+                        bool include_bound_virtual_threads = false);\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2588,1 +2588,0 @@\n-            Thread thread = threads[i];\n@@ -2590,2 +2589,1 @@\n-            \/\/ BoundVirtualThread objects may be in list returned by the VM\n-            if (!thread.isVirtual() && stackTrace != null) {\n+            if (stackTrace != null) {\n@@ -2661,5 +2659,1 @@\n-        Thread[] threads = getThreads();\n-        return Stream.of(threads)\n-                \/\/ BoundVirtualThread objects may be in list returned by the VM\n-                .filter(Predicate.not(Thread::isVirtual))\n-                .toArray(Thread[]::new);\n+        return getThreads();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineRunningMethods_Shared.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetLocalVariable\/GetSetLocalUnsuspended.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorInfo\/GetOwnedMonitorInfoTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorStackDepthInfo\/GetOwnedMonitorStackDepthInfoTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorVMEventsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethods.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethodsWithBacktrace.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Breakpoint\/breakpoint01\/breakpoint01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassLoad\/classload01\/classload01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassPrepare\/classprep01\/classprep01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Exception\/exception01\/exception01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ExceptionCatch\/excatch01\/excatch01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc01\/fieldacc01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc02\/fieldacc02.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc03\/fieldacc03.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc04\/fieldacc04.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod01\/fieldmod01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod02\/fieldmod02.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop01\/framepop01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @requires vm.continuations\n@@ -48,1 +47,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop02\/framepop02.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry01\/mentry01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry02\/mentry02.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit01\/mexit01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit02\/mexit02.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEnter\/mcontenter01\/mcontenter01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEntered\/mcontentered01\/mcontentered01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWait\/monitorwait01\/monitorwait01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWaited\/monitorwaited01\/monitorwaited01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep01\/singlestep01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep03\/singlestep03.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/StackTrace\/NotSuspended\/GetStackTraceNotSuspendedStressTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/StackTrace\/Suspended\/GetStackTraceSuspendedStressTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/ThreadLocalStorage\/SetGetThreadLocalStorageStressTest\/SetGetThreadLocalStorageStressTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetCurrentContendedMonitor\/contmon01\/contmon01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetCurrentContendedMonitor\/contmon02\/contmon02.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/GetStackTraceCurrentThreadTest\/GetStackTraceCurrentThreadTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadInfo\/thrinfo01\/thrinfo01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat01\/thrstat01.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat03\/thrstat03.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat05\/thrstat05.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies correct JVMTI behavior for BoundVirtualThreads.\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:BoundVThreadTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations BoundVThreadTest\n+ *\/\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class BoundVThreadTest {\n+    private static final String AGENT_LIB = \"BoundVThreadTest\";\n+    final Object lock = new Object();\n+    final AtomicBoolean shouldFinish = new AtomicBoolean(false);\n+\n+    static native boolean testJvmtiFunctions(Thread vthread, ThreadGroup group);\n+    static native boolean check();\n+\n+    final Runnable pinnedTask = () -> {\n+        synchronized (lock) {\n+            do {\n+                try {\n+                    lock.wait(10);\n+                } catch (InterruptedException ie) {}\n+            } while (!shouldFinish.get());\n+        }\n+        testJvmtiFunctions(Thread.currentThread(), Thread.currentThread().getThreadGroup());\n+    };\n+\n+    void runTest() throws Exception {\n+        Thread vthread = Thread.ofVirtual().name(\"VThread\").start(pinnedTask);\n+        testJvmtiFunctions(vthread, Thread.currentThread().getThreadGroup());\n+        shouldFinish.set(true);\n+        vthread.join();\n+        if (!check()) {\n+            throw new RuntimeException(\"BoundVThreadTest failed!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + AGENT_LIB + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+        BoundVThreadTest t = new BoundVThreadTest();\n+        t.runTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/BoundVThreadTest\/BoundVThreadTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,310 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jvmti_common.h\"\n+\n+extern \"C\" {\n+\n+#define MAX_FRAMES 100\n+\n+static jvmtiEnv *jvmti = nullptr;\n+static int vthread_start_count = 0;\n+static int vthread_end_count = 0;\n+static bool passed = JNI_TRUE;\n+\n+static void\n+check_jvmti_error_unsupported_operation(JNIEnv* jni, const char* msg, jvmtiError err) {\n+  if (err != JVMTI_ERROR_UNSUPPORTED_OPERATION) {\n+    LOG(\"%s failed: expected JVMTI_ERROR_UNSUPPORTED_OPERATION instead of: %d\\n\", msg, err);\n+    fatal(jni, msg);\n+  }\n+}\n+\n+static void\n+check_jvmti_error_opaque_frame(JNIEnv* jni, const char* msg, jvmtiError err) {\n+  if (err != JVMTI_ERROR_OPAQUE_FRAME) {\n+    LOG(\"%s failed: expected JVMTI_ERROR_OPAQUE_FRAME instead of: %d\\n\", msg, err);\n+    fatal(jni, msg);\n+  }\n+}\n+\n+static void JNICALL\n+agent_proc(jvmtiEnv* jvmti, JNIEnv* jni, void* arg) {\n+  fatal(jni, \"agent function was not expected to be called\");\n+}\n+\n+static void\n+check_suspended_state(JNIEnv* jni, jthread thread) {\n+  jint state = 0;\n+\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n+  jvmtiError err = jvmti->GetThreadState(thread, &state);\n+  check_jvmti_status(jni, err, \"check_suspended_state: error in JVMTI GetThreadState\");\n+  LOG(\"## Agent: %p %s: state after suspend: %s (%d)\\n\", thread,  tname, TranslateState(state), (int)state);\n+\n+  if ((state & (JVMTI_THREAD_STATE_SUSPENDED | JVMTI_THREAD_STATE_TERMINATED)) == 0) {\n+    LOG(\"\\n## Agent: FAILED: SUSPENDED flag is not set:\\n\");\n+    passed = JNI_FALSE;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n+}\n+\n+static void\n+check_resumed_state(JNIEnv* jni, jthread thread) {\n+  jint state = 0;\n+\n+  char* tname = get_thread_name(jvmti, jni, thread);\n+\n+  jvmtiError err = jvmti->GetThreadState(thread, &state);\n+  check_jvmti_status(jni, err, \"check_resumed_state: error in JVMTI GetThreadState\");\n+  LOG(\"## Agent: %p %s: state after resume: %s (%d)\\n\", thread,  tname, TranslateState(state), (int)state);\n+\n+  if ((state & (JVMTI_THREAD_STATE_SUSPENDED | JVMTI_THREAD_STATE_TERMINATED)) != 0) {\n+    LOG(\"\\n## Agent: FAILED: SUSPENDED flag is set:\\n\");\n+    passed = JNI_FALSE;\n+  }\n+  deallocate(jvmti, jni, (void*)tname);\n+}\n+\n+static void\n+test_unsupported_jvmti_functions(jvmtiEnv *jvmti, JNIEnv *jni, jthread vthread, jthreadGroup group) {\n+  jvmtiCapabilities caps;\n+  jvmtiError err;\n+  jboolean is_vthread;\n+  jthread* threads_ptr = nullptr;\n+  jthreadGroup* groups_ptr = nullptr;\n+  jvmtiStackInfo *stack_info;\n+  jint thread_cnt = 0;\n+  jint group_cnt = 0;\n+  jlong nanos;\n+\n+  LOG(\"test_unsupported_jvmti_functions: started\\n\");\n+\n+  is_vthread = jni->IsVirtualThread(vthread);\n+  if (is_vthread != JNI_TRUE) {\n+    fatal(jni, \"IsVirtualThread failed to return JNI_TRUE\");\n+  }\n+\n+  err = jvmti->GetCapabilities(&caps);\n+  check_jvmti_status(jni, err, \"GetCapabilities\");\n+\n+  if (caps.can_support_virtual_threads != JNI_TRUE) {\n+    fatal(jni, \"Virtual threads are not supported\");\n+  }\n+\n+  LOG(\"Testing StopThread\\n\");\n+  err = jvmti->StopThread(vthread, vthread);\n+  check_jvmti_error_unsupported_operation(jni, \"StopThread\", err);\n+\n+  LOG(\"Testing PopFrame\\n\");\n+  err = jvmti->PopFrame(vthread);\n+  check_jvmti_error_opaque_frame(jni, \"PopFrame\", err);\n+\n+  LOG(\"Testing ForceEarlyReturnVoid\\n\");\n+  err = jvmti->ForceEarlyReturnVoid(vthread);\n+  check_jvmti_error_opaque_frame(jni, \"ForceEarlyReturnVoid\", err);\n+\n+  LOG(\"Testing GetThreadCpuTime\\n\");\n+  err = jvmti->GetThreadCpuTime(vthread, &nanos);\n+  check_jvmti_error_unsupported_operation(jni, \"GetThreadCpuTime\", err);\n+\n+  jthread cur_thread = get_current_thread(jvmti, jni);\n+  if (jni->IsVirtualThread(cur_thread)) {\n+    LOG(\"Testing GetCurrentThreadCpuTime\\n\");\n+    err = jvmti->GetCurrentThreadCpuTime(&nanos);\n+    check_jvmti_error_unsupported_operation(jni, \"GetCurrentThreadCpuTime\", err);\n+  }\n+\n+  LOG(\"Testing RunAgentThread\\n\");\n+  err = jvmti->RunAgentThread(vthread, agent_proc, (const void*)nullptr, JVMTI_THREAD_NORM_PRIORITY);\n+  check_jvmti_error_unsupported_operation(jni, \"RunAgentThread\", err);\n+\n+  LOG(\"Testing GetAllThreads\\n\");\n+  err = jvmti->GetAllThreads(&thread_cnt, &threads_ptr);\n+  check_jvmti_status(jni, err, \"test_unsupported_jvmti_functions: error in JVMTI GetAllThreads\");\n+  for (int idx = 0; idx < thread_cnt; idx++) {\n+    jthread thread = threads_ptr[idx];\n+    if (jni->IsVirtualThread(thread)) {\n+      fatal(jni, \"GetAllThreads should not include virtual threads\");\n+    }\n+  }\n+\n+  LOG(\"Testing GetAllStackTraces\\n\");\n+  err = jvmti->GetAllStackTraces(MAX_FRAMES, &stack_info, &thread_cnt);\n+  check_jvmti_status(jni, err, \"test_unsupported_jvmti_functions: error in JVMTI GetAllStackTraces\");\n+  for (int idx = 0; idx < thread_cnt; idx++) {\n+    jthread thread = threads_ptr[idx];\n+    if (jni->IsVirtualThread(thread)) {\n+      fatal(jni, \"GetAllStackTraces should not include virtual threads\");\n+    }\n+  }\n+\n+  LOG(\"Testing GetThreadGroupChildren\\n\");\n+  err = jvmti->GetThreadGroupChildren(group, &thread_cnt, &threads_ptr, &group_cnt, &groups_ptr);\n+  check_jvmti_status(jni, err, \"test_unsupported_jvmti_functions: error in JVMTI GetThreadGroupChildren\");\n+  for (int idx = 0; idx < thread_cnt; idx++) {\n+    jthread thread = threads_ptr[idx];\n+    if (jni->IsVirtualThread(thread)) {\n+      fatal(jni, \"GetThreadGroupChildren should not include virtual threads\");\n+    }\n+  }\n+\n+  LOG(\"test_unsupported_jvmti_functions: finished\\n\");\n+}\n+\n+static void\n+test_supported_jvmti_functions(jvmtiEnv *jvmti, JNIEnv *jni, jthread vthread) {\n+  jvmtiError err;\n+\n+  LOG(\"test_supported_jvmti_functions: started\\n\");\n+\n+  LOG(\"Testing SuspendThread\\n\");\n+  err = jvmti->SuspendThread(vthread);\n+  check_jvmti_status(jni, err, \"test_supported_jvmti_functions: error in JVMTI SuspendThread\");\n+  check_suspended_state(jni, vthread);\n+\n+  LOG(\"Testing ResumeThread\\n\");\n+  err = jvmti->ResumeThread(vthread);\n+  check_jvmti_status(jni, err, \"test_supported_jvmti_functions: error in JVMTI ResumeThread\");\n+  check_resumed_state(jni, vthread);\n+\n+  LOG(\"Testing SuspendAllVirtualThreads\\n\");\n+  err = jvmti->SuspendAllVirtualThreads(0, nullptr);\n+  check_jvmti_status(jni, err, \"test_supported_jvmti_functions: error in JVMTI SuspendAllVirtualThreads\");\n+  check_suspended_state(jni, vthread);\n+\n+  LOG(\"Testing ResumeAllVirtualThreads\\n\");\n+  err = jvmti->ResumeAllVirtualThreads(0, nullptr);\n+  check_jvmti_status(jni, err, \"test_supported_jvmti_functions: error in JVMTI ResumeAllVirtualThreads\");\n+  check_resumed_state(jni, vthread);\n+\n+  LOG(\"test_supported_jvmti_functions: finished\\n\");\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_BoundVThreadTest_testJvmtiFunctions(JNIEnv *jni, jclass cls, jthread vthread, jthreadGroup group) {\n+  jvmtiError err = JVMTI_ERROR_NONE;\n+  jthread current;\n+\n+  LOG(\"testJvmtiFunctions: started\\n\");\n+\n+  test_unsupported_jvmti_functions(jvmti, jni, vthread, group);\n+\n+  current = get_current_thread(jvmti, jni);\n+  if (!jni->IsVirtualThread(current)) {\n+    test_supported_jvmti_functions(jvmti, jni, vthread);\n+  }\n+\n+  LOG(\"testJvmtiFunctions: finished\\n\");\n+\n+  return JNI_TRUE;\n+}\n+\n+static void JNICALL\n+VirtualThreadStart(jvmtiEnv *jvmti, JNIEnv *jni, jthread vthread) {\n+  vthread_start_count++;\n+}\n+\n+static void JNICALL\n+VirtualThreadEnd(jvmtiEnv *jvmti, JNIEnv *jni, jthread vthread) {\n+  vthread_end_count++;\n+}\n+\n+extern JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiCapabilities caps;\n+  jvmtiError err;\n+\n+  LOG(\"Agent_OnLoad started\\n\");\n+  if (jvm->GetEnv((void **)(&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  memset(&caps, 0, sizeof (caps));\n+  caps.can_signal_thread = 1;\n+  caps.can_pop_frame = 1;\n+  caps.can_force_early_return = 1;\n+  caps.can_support_virtual_threads = 1;\n+  caps.can_get_thread_cpu_time = 1;\n+  caps.can_get_current_thread_cpu_time = 1;\n+  caps.can_suspend = 1;\n+\n+  err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.VirtualThreadStart = &VirtualThreadStart;\n+  callbacks.VirtualThreadEnd = &VirtualThreadEnd;\n+\n+  err = jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks));\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"error in JVMTI SetEventCallbacks: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_START, nullptr);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"error in JVMTI SetEventNotificationMode: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VIRTUAL_THREAD_END, nullptr);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"error in JVMTI SetEventNotificationMode: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_BoundVThreadTest_check(JNIEnv *jni, jclass cls) {\n+  LOG(\"\\n\");\n+  LOG(\"check: started\\n\");\n+\n+  LOG(\"check: vthread_start_count: %d\\n\", vthread_start_count);\n+  LOG(\"check: vthread_end_count: %d\\n\", vthread_end_count);\n+\n+  if (vthread_start_count == 0) {\n+    passed = JNI_FALSE;\n+    LOG(\"FAILED: vthread_start_count == 0\\n\");\n+  }\n+  if (vthread_end_count == 0) {\n+    passed = JNI_FALSE;\n+    LOG(\"FAILED: vthread_end_count == 0\\n\");\n+  }\n+\n+  LOG(\"check: finished\\n\");\n+  LOG(\"\\n\");\n+  return passed;\n+}\n+\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/BoundVThreadTest\/libBoundVThreadTest.cpp","additions":310,"deletions":0,"binary":false,"changes":310,"status":"added"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n@@ -32,0 +31,7 @@\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @compile --enable-preview -source ${jdk.version} InterruptThreadTest.java\n+ * @run main\/othervm\/native --enable-preview -agentlib:InterruptThreadTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations InterruptThreadTest\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/InterruptThreadTest\/InterruptThreadTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n@@ -32,0 +31,7 @@\n+\/**\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @compile --enable-preview -source ${jdk.version} NullAsCurrentThreadTest.java\n+ * @run main\/othervm\/native --enable-preview -agentlib:NullAsCurrentThreadTest=EnableVirtualThreadSupport -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations NullAsCurrentThreadTest\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/NullAsCurrentThreadTest\/NullAsCurrentThreadTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n@@ -32,0 +31,7 @@\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @compile --enable-preview -source ${jdk.version} PinnedTaskTest.java\n+ * @run main\/othervm\/native --enable-preview -agentlib:PinnedTaskTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations PinnedTaskTest\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/PinnedTaskTest\/PinnedTaskTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -27,1 +27,0 @@\n- * @requires vm.continuations\n@@ -33,0 +32,8 @@\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @compile --enable-preview -source ${jdk.version} SelfSuspendDisablerTest.java\n+ * @run main\/othervm\/native --enable-preview -agentlib:SelfSuspendDisablerTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations SelfSuspendDisablerTest\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SelfSuspendDisablerTest\/SelfSuspendDisablerTest.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -28,0 +28,12 @@\n+ * @library \/test\/lib\n+ * @compile --enable-preview -source ${jdk.version} SuspendResume1.java\n+ * @run driver jdk.test.lib.FileInstaller . .\n+ * @run main\/othervm\/native\/timeout=600\n+ *      --enable-preview\n+ *      -Djava.util.concurrent.ForkJoinPool.common.parallelism=1\n+ *      -agentlib:SuspendResume1\n+ *      SuspendResume1\n+ *\/\n+\n+ \/*\n+ * @test id=no-vmcontinuations\n@@ -36,0 +48,2 @@\n+ *      -XX:+UnlockExperimentalVMOptions\n+ *      -XX:-VMContinuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResume1\/SuspendResume1.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -27,0 +27,12 @@\n+ * @library \/test\/lib\n+ * @compile --enable-preview -source ${jdk.version} SuspendResume2.java\n+ * @run driver jdk.test.lib.FileInstaller . .\n+ * @run main\/othervm\/native\n+ *      --enable-preview\n+ *      -Djava.util.concurrent.ForkJoinPool.common.parallelism=1\n+ *      -agentlib:SuspendResume2\n+ *      SuspendResume2\n+ *\/\n+\n+\/*\n+ * @test id=no-vmcontinuations\n@@ -35,0 +47,2 @@\n+ *      -XX:+UnlockExperimentalVMOptions\n+ *      -XX:-VMContinuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResume2\/SuspendResume2.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -27,0 +27,12 @@\n+ * @library \/test\/lib\n+ * @compile --enable-preview -source ${jdk.version} SuspendResumeAll.java\n+ * @run driver jdk.test.lib.FileInstaller . .\n+ * @run main\/othervm\/native\n+ *      --enable-preview\n+ *      -Djava.util.concurrent.ForkJoinPool.common.parallelism=1\n+ *      -agentlib:SuspendResumeAll\n+ *      SuspendResumeAll\n+ *\/\n+\n+\/*\n+ * @test id=no-vmcontinuations\n@@ -35,0 +47,2 @@\n+ *      -XX:+UnlockExperimentalVMOptions\n+ *      -XX:-VMContinuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SuspendResumeAll\/SuspendResumeAll.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -28,0 +28,11 @@\n+ * @enablePreview\n+ * @modules jdk.httpserver\n+ * @library \/test\/lib\n+ * @run main\/othervm\/native\n+ *     -agentlib:VThreadNotifyFramePopTest\n+ *     -Djdk.defaultScheduler.parallelism=2 -Djdk.defaultScheduler.maxPoolSize=2\n+ *     VThreadNotifyFramePopTest\n+ *\/\n+\n+\/*\n+ * @test id=no-vmcontinuations\n@@ -35,0 +46,2 @@\n+ *     -XX:+UnlockExperimentalVMOptions\n+ *     -XX:-VMContinuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadNotifyFramePopTest\/VThreadNotifyFramePopTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n@@ -33,0 +32,8 @@\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @requires vm.jvmti\n+ * @enablePreview\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualStackTraceTest\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualStackTraceTest\/VirtualStackTraceTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n@@ -34,0 +33,10 @@\n+\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @requires vm.jvmti\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreadStartTest\n+ * @run main\/othervm\/native -agentlib:VirtualThreadStartTest=can_support_virtual_threads -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreadStartTest\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreadStartTest attach\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations VirtualThreadStartTest attach can_support_virtual_threads\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualThreadStartTest\/VirtualThreadStartTest.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @requires vm.continuations\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/premain\/AgentWithVThreadTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbOptions.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.continuations\n@@ -40,1 +39,0 @@\n- * @requires vm.continuations\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendAfterDeath.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n","filename":"test\/langtools\/jdk\/jshell\/Test8294583.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n","filename":"test\/langtools\/jdk\/jshell\/Test8296012.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires vm.continuations\n","filename":"test\/langtools\/jdk\/jshell\/ToolEnablePreviewTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}