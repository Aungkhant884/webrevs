{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    const uint line_offset = mask_address_bits(start, line_size - 1);\n+    const uint line_offset = (intptr_t)start & (line_size - 1);\n","filename":"src\/hotspot\/cpu\/ppc\/icache_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  static const uintptr_t no_hash_in_place         = (address_word)no_hash << hash_shift;\n+  static const uintptr_t no_hash_in_place         = (uintptr_t)no_hash << hash_shift;\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    return (jlong) castable_address(this);\n+    return (jlong) this;\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-  const uint line_offset = mask_address_bits(start, ICache::line_size-1);\n+  const uint line_offset = uintptr_t(start) & (ICache::line_size-1);\n","filename":"src\/hotspot\/share\/runtime\/icache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -447,17 +447,0 @@\n-typedef uintptr_t     address_word; \/\/ unsigned integer which will hold a pointer\n-                                    \/\/ except for some implementations of a C++\n-                                    \/\/ linkage pointer to function. Should never\n-                                    \/\/ need one of those to be placed in this\n-                                    \/\/ type anyway.\n-\n-\/\/  Utility functions to \"portably\" (?) bit twiddle pointers\n-\/\/  Where portable means keep ANSI C++ compilers quiet\n-\n-inline address       set_address_bits(address x, int m)       { return address(intptr_t(x) | m); }\n-inline address       clear_address_bits(address x, int m)     { return address(intptr_t(x) & ~m); }\n-\n-\/\/  Utility functions to \"portably\" make cast to\/from function pointers.\n-\n-inline address_word  mask_address_bits(address x, int m)      { return address_word(x) & m; }\n-inline address_word  castable_address(address x)              { return address_word(x) ; }\n-inline address_word  castable_address(void* x)                { return address_word(x) ; }\n@@ -506,1 +489,1 @@\n-#define CAST_FROM_FN_PTR(new_type, func_ptr) ((new_type)((address_word)(func_ptr)))\n+#define CAST_FROM_FN_PTR(new_type, func_ptr) ((new_type)((uintptr_t)(func_ptr)))\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"}]}