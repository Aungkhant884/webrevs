{"files":[{"patch":"@@ -116,1 +116,0 @@\n-            if (!(o instanceof Key that)) return false;\n@@ -118,2 +117,3 @@\n-            return name == that.name &&\n-                   Arrays.equals(ptypes, that.ptypes);\n+            return (o instanceof Key that)\n+                    && name == that.name\n+                    && Arrays.equals(ptypes, that.ptypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/PublicMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1428,4 +1428,2 @@\n-            if (!(obj instanceof Version that))\n-                return false;\n-\n-            return (this.version().equals(that.version())\n+            return (obj instanceof Version that)\n+                && (this.version().equals(that.version())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -409,9 +409,8 @@\n-        if (!(obj instanceof StackTraceElement e))\n-            return false;\n-        return Objects.equals(classLoaderName, e.classLoaderName) &&\n-            Objects.equals(moduleName, e.moduleName) &&\n-            Objects.equals(moduleVersion, e.moduleVersion) &&\n-            e.declaringClass.equals(declaringClass) &&\n-            e.lineNumber == lineNumber &&\n-            Objects.equals(methodName, e.methodName) &&\n-            Objects.equals(fileName, e.fileName);\n+        return (obj instanceof StackTraceElement e)\n+                && Objects.equals(classLoaderName, e.classLoaderName)\n+                && Objects.equals(moduleName, e.moduleName)\n+                && Objects.equals(moduleVersion, e.moduleVersion)\n+                && e.declaringClass.equals(declaringClass)\n+                && e.lineNumber == lineNumber\n+                && Objects.equals(methodName, e.methodName)\n+                && Objects.equals(fileName, e.fileName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackTraceElement.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1821,6 +1821,3 @@\n-        if (anObject instanceof String aString) {\n-            if (!COMPACT_STRINGS || this.coder == aString.coder) {\n-                return StringLatin1.equals(value, aString.value);\n-            }\n-        }\n-        return false;\n+        return (anObject instanceof String aString)\n+                && (!COMPACT_STRINGS || this.coder == aString.coder)\n+                && StringLatin1.equals(value, aString.value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -360,5 +360,5 @@\n-        if (!(o instanceof DynamicConstantDesc desc)) return false;\n-        return Objects.equals(bootstrapMethod, desc.bootstrapMethod) &&\n-               Arrays.equals(bootstrapArgs, desc.bootstrapArgs) &&\n-               Objects.equals(constantName, desc.constantName) &&\n-               Objects.equals(constantType, desc.constantType);\n+        return (o instanceof DynamicConstantDesc desc)\n+                && Objects.equals(bootstrapMethod, desc.bootstrapMethod)\n+                && Arrays.equals(bootstrapArgs, desc.bootstrapArgs)\n+                && Objects.equals(constantName, desc.constantName)\n+                && Objects.equals(constantType, desc.constantType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1178,2 +1178,3 @@\n-            if (!(other instanceof NamedFunction that)) return false;\n-            return this.member != null && this.member.equals(that.member);\n+            return (other instanceof NamedFunction that)\n+                    && this.member != null\n+                    && this.member.equals(that.member);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -313,3 +313,2 @@\n-            if (!(ob instanceof Requires that))\n-                return false;\n-            return name.equals(that.name) && mods.equals(that.mods)\n+            return (ob instanceof Requires that)\n+                    && name.equals(that.name) && mods.equals(that.mods)\n@@ -533,3 +532,2 @@\n-            if (!(ob instanceof Exports other))\n-                return false;\n-            return Objects.equals(this.mods, other.mods)\n+            return (ob instanceof Exports other)\n+                    && Objects.equals(this.mods, other.mods)\n@@ -737,5 +735,4 @@\n-            if (!(ob instanceof Opens other))\n-                return false;\n-            return Objects.equals(this.mods, other.mods)\n-                    && Objects.equals(this.source, other.source)\n-                    && Objects.equals(this.targets, other.targets);\n+           return (ob instanceof Opens other)\n+                   && Objects.equals(this.mods, other.mods)\n+                   && Objects.equals(this.source, other.source)\n+                   && Objects.equals(this.targets, other.targets);\n@@ -872,4 +869,3 @@\n-            if (!(ob instanceof Provides other))\n-                return false;\n-            return Objects.equals(this.service, other.service) &&\n-                    Objects.equals(this.providers, other.providers);\n+            return (ob instanceof Provides other)\n+                    && Objects.equals(this.service, other.service)\n+                    && Objects.equals(this.providers, other.providers);\n@@ -2240,3 +2236,2 @@\n-        if (!(ob instanceof ModuleDescriptor that))\n-            return false;\n-        return (name.equals(that.name)\n+        return (ob instanceof ModuleDescriptor that)\n+                && (name.equals(that.name)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -141,5 +141,3 @@\n-        if (!(ob instanceof ResolvedModule that))\n-            return false;\n-\n-        return Objects.equals(this.cf, that.cf)\n-                && Objects.equals(this.mref, that.mref);\n+        return (ob instanceof ResolvedModule that)\n+            && Objects.equals(this.cf, that.cf)\n+            && Objects.equals(this.mref, that.mref);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ResolvedModule.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,5 +80,3 @@\n-        if(obj instanceof Parameter other) {\n-            return (other.executable.equals(executable) &&\n-                    other.index == index);\n-        }\n-        return false;\n+        return (obj instanceof Parameter other)\n+                && other.executable.equals(executable)\n+                && other.index == index;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}