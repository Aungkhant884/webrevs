{"files":[{"patch":"@@ -1317,11 +1317,0 @@\n-#if 1\n-    Label stack_ok;\n-    __ warn(\"XXX enterSpecial interpreter entry\");\n-    __ os_breakpoint();\n-    __ nop();\n-    __ lea(rax, Address(rsp, wordSize));\n-    __ cmpptr(rax, r13);\n-    __ jcc(Assembler::equal, stack_ok);\n-    __ stop(\"enterSpecial interpreter entry called through c2i adapter?\");\n-    __ bind(stack_ok);\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -226,4 +226,0 @@\n-#if 0\n-  method_entry(java_lang_continuation_doYield)\n-#endif\n-\n@@ -430,4 +426,0 @@\n-#if 0\n-  case Interpreter::java_lang_continuation_doYield\n-                                           : entry_point = generate_Continuation_doYield_entry(); break;\n-#endif\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,3 +94,0 @@\n-#if 0\n-  address generate_Continuation_doYield_entry();\n-#endif\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1245,1 +1245,0 @@\n-#if 1\n@@ -1247,1 +1246,0 @@\n-#endif\n@@ -1339,3 +1337,0 @@\n-#if 0\n-      mh->_i2i_entry = code->verified_entry_point() - 0x10 \/*v2i*\/;\n-#endif\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -732,20 +732,0 @@\n-#if 0\n- const TypeFunc* OptoRuntime::continuation_jump_Type() {\n-  \/\/ create input type (domain)\n-  const Type **fields = TypeTuple::fields(6);\n-  fields[TypeFunc::Parms+0] = TypeLong::LONG;\n-  fields[TypeFunc::Parms+1] = Type::HALF;\n-  fields[TypeFunc::Parms+2] = TypeLong::LONG;\n-  fields[TypeFunc::Parms+3] = Type::HALF;\n-  fields[TypeFunc::Parms+4] = TypeLong::LONG;\n-  fields[TypeFunc::Parms+5] = Type::HALF;\n-  const TypeTuple *domain = TypeTuple::make(TypeFunc::Parms+6, fields);\n-\n-  \/\/ create result type (range)\n-  fields = TypeTuple::fields(0);\n-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);\n-  return TypeFunc::make(domain, range);\n- }\n-#endif\n-\n-\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -246,3 +246,0 @@\n-#if 0\n-  static const TypeFunc* continuation_jump_Type();\n-#endif\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -384,0 +384,4 @@\n+#ifdef ASSERT\n+  bool interpreted_native_or_deoptimized_on_stack();\n+#endif\n+\n@@ -748,1 +752,0 @@\n-    assert(SharedRuntime::cont_doYield_stub()->contains(f.pc()), \"\");\n@@ -758,0 +761,1 @@\n+  assert(Continuation::is_frame_in_continuation(_thread->last_continuation(), f), \"\");\n@@ -775,0 +779,1 @@\n+  assert(Continuation::is_frame_in_continuation(_thread->last_continuation(), f), \"\");\n@@ -1359,3 +1364,3 @@\n-static bool interpreted_native_or_deoptimized_on_stack(JavaThread* thread) {\n-  ContinuationEntry* ce = thread->last_continuation();\n-  RegisterMap map(thread,\n+bool FreezeBase::interpreted_native_or_deoptimized_on_stack() {\n+  ContinuationEntry* ce = _thread->last_continuation();\n+  RegisterMap map(_thread,\n@@ -1366,1 +1371,1 @@\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+  for (frame f = freeze_start_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n@@ -1437,1 +1442,1 @@\n-         || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current)), \"\");\n+         || (current->cont_fastpath_thread_state() && !freeze.interpreted_native_or_deoptimized_on_stack()), \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}