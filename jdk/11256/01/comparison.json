{"files":[{"patch":"@@ -836,1 +836,1 @@\n-void HeapShared::serialize(SerializeClosure* soc) {\n+void HeapShared::serialize_root(SerializeClosure* soc) {\n@@ -852,0 +852,3 @@\n+}\n+\n+void HeapShared::serialize_tables(SerializeClosure* soc) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -413,1 +413,2 @@\n-  static void serialize(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void serialize_root(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void serialize_tables(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -378,0 +378,1 @@\n+  HeapShared::serialize_root(soc);\n@@ -388,1 +389,1 @@\n-  HeapShared::serialize(soc);\n+  HeapShared::serialize_tables(soc);\n@@ -1502,0 +1503,2 @@\n+  CDS_JAVA_HEAP_ONLY(Universe::update_archived_mirrors());\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1141,1 +1141,1 @@\n-      Universe::replace_mirror(bt, archived_m);\n+      Universe::set_archived_mirror_index(bt, HeapShared::append_root(archived_m));\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,0 +92,3 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+int Universe::_archived_mirror_indices[T_VOID+1];\n+#endif\n@@ -198,5 +201,0 @@\n-\/\/ Used by CDS dumping\n-void Universe::replace_mirror(BasicType t, oop new_mirror) {\n-  Universe::_mirrors[t].replace(new_mirror);\n-}\n-\n@@ -239,0 +237,21 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+void Universe::set_archived_mirror_index(BasicType t, int index) {\n+  assert(DumpSharedSpaces, \"dump-time only\");\n+  _archived_mirror_indices[t] = index;\n+}\n+\n+void Universe::update_archived_mirrors() {\n+  if (ArchiveHeapLoader::are_archived_mirrors_available()) {\n+    for (int i = T_BOOLEAN; i < T_VOID+1; i++) {\n+      int index = _archived_mirror_indices[i];\n+      if (index >= 0) {\n+        oop mirror_oop = HeapShared::get_root(index);\n+        assert(mirror_oop != NULL, \"must be\");\n+        _mirrors[i] = OopHandle(vm_global(), mirror_oop);\n+      }\n+    }\n+  }\n+}\n+#endif\n+\n+\n@@ -243,18 +262,3 @@\n-  {\n-    oop mirror_oop;\n-    for (int i = T_BOOLEAN; i < T_VOID+1; i++) {\n-      if (f->reading()) {\n-        f->do_oop(&mirror_oop); \/\/ read from archive\n-        assert(oopDesc::is_oop_or_null(mirror_oop), \"is oop\");\n-        \/\/ Only create an OopHandle for non-null mirrors\n-        if (mirror_oop != NULL) {\n-          _mirrors[i] = OopHandle(vm_global(), mirror_oop);\n-        }\n-      } else {\n-        if (HeapShared::can_write()) {\n-          mirror_oop = _mirrors[i].resolve();\n-        } else {\n-          mirror_oop = NULL;\n-        }\n-        f->do_oop(&mirror_oop); \/\/ write to archive\n-      }\n+  for (int i = T_BOOLEAN; i < T_VOID+1; i++) {\n+    if (f->writing() && !HeapShared::can_write()) {\n+      _archived_mirror_indices[i] = -1;\n@@ -262,0 +266,4 @@\n+\n+    f->do_u4((u4*)&_archived_mirror_indices[i]);\n+    \/\/ Can't call HeapShared::get_root() yet, as the heap contents may need to be\n+    \/\/ relocated. _mirrors[i] will be updated later in Universe::update_archived_mirrors().\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -199,0 +199,4 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+  static int _archived_mirror_indices[T_VOID+1];\n+#endif\n+\n@@ -239,1 +243,5 @@\n-  static void replace_mirror(BasicType t, oop obj);\n+\n+#if INCLUDE_CDS_JAVA_HEAP\n+  static void set_archived_mirror_index(BasicType t, int index);\n+  static void update_archived_mirrors();\n+#endif\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}