{"files":[{"patch":"@@ -642,0 +642,1 @@\n+                SctpNet.close(fdVal);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -376,0 +376,1 @@\n+                SctpNet.close(fdVal);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+                SctpNet.close(fdVal);\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8269481\n+ * @summary Tests that file descriptors are closed\n+ * @requires (os.family == \"linux\")\n+ *\/\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import com.sun.nio.sctp.MessageInfo;\n+import com.sun.nio.sctp.SctpMultiChannel;\n+\n+public class CloseDescriptors {\n+\n+    private static final int NUM      = 5;\n+    private static final int SIZE     = 1024;\n+    private static final int MAX_DESC = 3;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!Util.isSCTPSupported()) {\n+            System.out.println(\"SCTP protocol is not supported\");\n+            System.out.println(\"Test cannot be run\");\n+            return;\n+        }\n+\n+        int port = 12345;\n+        if (args.length == 1) {\n+            try {\n+                port = Integer.parseInt(args[0]);\n+            } catch (Exception e) {\n+            }\n+        }\n+\n+        Thread server = new Server(port);\n+        server.start();\n+        Thread.sleep(100); \/\/ wait for server to be ready\n+\n+        System.out.println(\"begin\");\n+        for (int i = 0; i < 5; ++i) {\n+            System.out.println(i);\n+            doIt(port);\n+            Thread.sleep(100);\n+        }\n+        System.out.println(\"end\");\n+\n+        long myPid = ProcessHandle.current().pid();\n+        ProcessBuilder pb = new ProcessBuilder(\n+                \"lsof\", \"-U\", \"-a\", \"-p\", Long.toString(myPid));\n+        Process p = pb.start();\n+        Object[] lines = p.inputReader().lines().toArray();\n+        p.waitFor();\n+\n+        server.join();\n+\n+        int nfds = lines.length - 1;\n+        if (nfds > 3) {\n+            String msg =\n+                String.format(\"Number of open descriptors (%d) > 2%n\", nfds);\n+            throw new RuntimeException(msg);\n+        }\n+    }\n+\n+    static void doIt(int port) throws Exception {\n+        InetSocketAddress sa = new InetSocketAddress(\"localhost\", port);\n+\n+        for (int i = 0; i < NUM; ++i) {\n+            System.out.println(\"  \" + i);\n+            SctpMultiChannel channel = SctpMultiChannel.open();\n+            channel.configureBlocking(true);\n+            MessageInfo info = MessageInfo.createOutgoing(sa, 0);\n+            ByteBuffer buffer = ByteBuffer.allocateDirect(SIZE);\n+            channel.send(buffer, info);\n+            channel.close();\n+\n+            Thread.sleep(200);\n+        }\n+    }\n+\n+    static class Server extends Thread {\n+        int port;\n+\n+        Server(int port) {\n+            this.port = port;\n+        }\n+\n+        @Override\n+        public void run() {\n+            for (int i = 0; i < NUM; i++) {\n+                try {\n+                    SctpMultiChannel sm = SctpMultiChannel.open();\n+                    InetSocketAddress sa =\n+                        new InetSocketAddress(\"localhost\", port);\n+                    sm.bind(sa);\n+                    ByteBuffer buffer = ByteBuffer.allocateDirect(SIZE);\n+                    MessageInfo info = sm.receive(buffer, null, null);\n+                    sm.close();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpMultiChannel\/CloseDescriptors.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}