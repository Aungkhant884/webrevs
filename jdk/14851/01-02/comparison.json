{"files":[{"patch":"@@ -70,0 +70,27 @@\n+bool JVMCI::get_shared_library_path(char* pathbuf, size_t pathlen, bool fail_is_fatal) {\n+  if (JVMCILibPath != nullptr) {\n+    if (!os::dll_locate_lib(pathbuf, pathlen, JVMCILibPath, JVMCI_SHARED_LIBRARY_NAME)) {\n+      if (!fail_is_fatal) {\n+        return false;\n+      }\n+      fatal(\"Unable to create path to JVMCI shared library based on value of JVMCILibPath (%s)\", JVMCILibPath);\n+    }\n+  } else {\n+    if (!os::dll_locate_lib(pathbuf, pathlen, Arguments::get_dll_dir(), JVMCI_SHARED_LIBRARY_NAME)) {\n+      if (!fail_is_fatal) {\n+        return false;\n+      }\n+      fatal(\"Unable to create path to JVMCI shared library\");\n+    }\n+  }\n+  return true;\n+}\n+\n+bool JVMCI::shared_library_exists() {\n+  if (_shared_library_handle != nullptr) {\n+    return true;\n+  }\n+  char path[JVM_MAXPATHLEN];\n+  return get_shared_library_path(path, sizeof(path), false);\n+}\n+\n@@ -81,9 +108,1 @@\n-    if (JVMCILibPath != nullptr) {\n-      if (!os::dll_locate_lib(path, sizeof(path), JVMCILibPath, JVMCI_SHARED_LIBRARY_NAME)) {\n-        fatal(\"Unable to create path to JVMCI shared library based on value of JVMCILibPath (%s)\", JVMCILibPath);\n-      }\n-    } else {\n-      if (!os::dll_locate_lib(path, sizeof(path), Arguments::get_dll_dir(), JVMCI_SHARED_LIBRARY_NAME)) {\n-        fatal(\"Unable to create path to JVMCI shared library\");\n-      }\n-    }\n+    get_shared_library_path(path, sizeof(path), true);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -104,0 +104,6 @@\n+  \/\/ Writes into `pathbuf` the path to the existing JVMCI shared library file.\n+  \/\/ If the file cannot be found and `fail_is_fatal` is true, then\n+  \/\/ a fatal error occurs.\n+  \/\/ Returns whether the path to an existing file was written into `pathbuf`.\n+  static bool get_shared_library_path(char* pathbuf, size_t pathlen, bool fail_is_fatal);\n+\n@@ -125,0 +131,5 @@\n+  \/\/ Determines if the JVMCI shared library exists. This does not\n+  \/\/ take into account whether loading the library would succeed\n+  \/\/ if it's not already loaded.\n+  static bool shared_library_exists();\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -369,0 +369,7 @@\n+WB_ENTRY(jboolean, WB_HasLibgraal(JNIEnv* env, jobject o))\n+#if INCLUDE_JVMCI\n+  return JVMCI::shared_library_exists();\n+#endif\n+  return false;\n+WB_END\n+\n@@ -2806,0 +2813,1 @@\n+  {CC\"hasLibgraal\",                       CC\"()Z\",    (void*)&WB_HasLibgraal },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+    vm.libgraal \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,2 @@\n+        \/\/ vm.libgraal is true if the libgraal shared library file is present\n+        map.put(\"vm.libgraal\", this::hasLibraal);\n@@ -127,1 +129,1 @@\n-        map.put(\"vm.libgraal.enabled\", this::isGraalEnabled);\n+        map.put(\"vm.libgraal.enabled\", this::isLibgraalEnabled);\n@@ -491,0 +493,18 @@\n+    \/**\n+     * Check if libgraal shared library file is present.\n+     *\n+     * @return true if the libgraal shared library file is present.\n+     *\/\n+    protected String hasLibraal() {\n+        return \"\" + WB.hasLibgraal();\n+    }\n+\n+    \/**\n+     * Check if libgraal is used as JIT compiler.\n+     *\n+     * @return true if libgraal is used as JIT compiler.\n+     *\/\n+    protected String isLibgraalEnabled() {\n+        return \"\" + Compiler.isLibgraalEnabled();\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -306,0 +306,3 @@\n+\n+  \/\/ Determines if the libgraal shared library file is present.\n+  public native boolean hasLibgraal();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}