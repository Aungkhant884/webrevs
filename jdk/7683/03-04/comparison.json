{"files":[{"patch":"@@ -773,24 +773,0 @@\n-\n-    \/**\n-     * Checks if this chronology is ISO based.\n-     * <p>\n-     * An ISO based chronology has the same basic structure of days and\n-     * months as the ISO chronology, with month lengths generally aligned\n-     * with those in the ISO January to December definitions.\n-     * For example, the Minguo, ThaiBuddhist and Japanese chronologies.\n-     *\n-     * @implSpec\n-     * The default implementation returns {@code false}.\n-     *\n-     * @return true if the chronology is ISO based\n-     * @see IsoChronology\n-     * @see JapaneseChronology\n-     * @see MinguoChronology\n-     * @see ThaiBuddhistChronology\n-     * @see java.time.temporal.IsoFields\n-     * @since 19\n-     *\/\n-    default boolean isIsoBased() {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/Chronology.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.time.chrono;\n+\n+\/**\n+ * An interface that confirms chronologies implementing this interface\n+ * are ISO based.\n+ * <p>\n+ * An ISO based chronology has the same basic structure of days and\n+ * months as the ISO chronology, with month lengths generally aligned\n+ * with those in the ISO January to December definitions. For example,\n+ * the Minguo, ThaiBuddhist and Japanese chronologies. Such\n+ * chronology supports fields defined in {@code IsoFields}\n+ *\n+ * @see IsoChronology\n+ * @see JapaneseChronology\n+ * @see MinguoChronology\n+ * @see ThaiBuddhistChronology\n+ * @see java.time.temporal.IsoFields\n+ * @since 19\n+ *\/\n+public interface IsoBasedChronology {\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/IsoBasedChronology.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -126,1 +126,1 @@\n-public final class IsoChronology extends AbstractChronology implements Serializable {\n+public final class IsoChronology extends AbstractChronology implements Serializable, IsoBasedChronology {\n@@ -680,13 +680,0 @@\n-    \/\/-----------------------------------------------------------------------\n-    \/**\n-     * {@code IsoChronology} is an ISO based chronology, which supports fields,\n-     * such as {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n-     * @implSpec The implementation always returns {@code true}.\n-     * @return {@code true}\n-     * @since 19\n-     *\/\n-    @Override\n-    public boolean isIsoBased() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/IsoChronology.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-public final class JapaneseChronology extends AbstractChronology implements Serializable {\n+public final class JapaneseChronology extends AbstractChronology implements Serializable, IsoBasedChronology {\n@@ -507,13 +507,0 @@\n-    \/\/-----------------------------------------------------------------------\n-    \/**\n-     * {@code JapaneseChronology} is an ISO based chronology, which supports fields,\n-     * such as {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n-     * @implSpec The implementation always returns {@code true}.\n-     * @return {@code true}\n-     * @since 19\n-     *\/\n-    @Override\n-    public boolean isIsoBased() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseChronology.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-public final class MinguoChronology extends AbstractChronology implements Serializable {\n+public final class MinguoChronology extends AbstractChronology implements Serializable, IsoBasedChronology {\n@@ -338,13 +338,0 @@\n-    \/\/-----------------------------------------------------------------------\n-    \/**\n-     * {@code MinguoChronology} is an ISO based chronology, which supports fields,\n-     * such as {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n-     * @implSpec The implementation always returns {@code true}.\n-     * @return {@code true}\n-     * @since 19\n-     *\/\n-    @Override\n-    public boolean isIsoBased() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoChronology.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-public final class ThaiBuddhistChronology extends AbstractChronology implements Serializable {\n+public final class ThaiBuddhistChronology extends AbstractChronology implements Serializable, IsoBasedChronology {\n@@ -338,13 +338,0 @@\n-    \/\/-----------------------------------------------------------------------\n-    \/**\n-     * {@code ThaiBuddhistChronology} is an ISO based chronology, which supports fields,\n-     * such as {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n-     * @implSpec The implementation always returns {@code true}.\n-     * @return {@code true}\n-     * @since 19\n-     *\/\n-    @Override\n-    public boolean isIsoBased() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+import java.time.chrono.IsoBasedChronology;\n@@ -739,1 +740,1 @@\n-        return Chronology.from(temporal).isIsoBased();\n+        return Chronology.from(temporal) instanceof IsoBasedChronology;\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/IsoFields.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,4 +67,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n@@ -83,0 +79,1 @@\n+import java.time.chrono.IsoBasedChronology;\n@@ -427,2 +424,2 @@\n-    @DataProvider(name = \"data_isIsoBased\")\n-    Object[][]  data_isIsoBased() {\n+    @DataProvider(name = \"data_IsoBasedChronology\")\n+    Object[][]  data_IsoBasedChronology() {\n@@ -439,1 +436,1 @@\n-    \/\/ isIsoBased()\n+    \/\/ IsoBasedChronology\n@@ -441,3 +438,3 @@\n-    @Test(dataProvider = \"data_isIsoBased\")\n-    public void test_isIsoBased(Chronology chrono, boolean expected) {\n-        assertEquals(chrono.isIsoBased(), expected);\n+    @Test(dataProvider = \"data_IsoBasedChronology\")\n+    public void test_IsoBasedChronology(Chronology chrono, boolean expected) {\n+        assertEquals(chrono instanceof IsoBasedChronology, expected);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronology.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import java.time.chrono.IsoBasedChronology;\n@@ -83,1 +84,1 @@\n-        assertEquals(chrono.isIsoBased(), false);\n+        assertEquals(chrono instanceof IsoBasedChronology, false);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKTestServiceLoader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+import java.time.chrono.IsoBasedChronology;\n@@ -88,1 +89,1 @@\n-        assertEquals(coptic.isIsoBased(), false);\n+        assertEquals(coptic instanceof IsoBasedChronology, false);\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestServiceLoader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}