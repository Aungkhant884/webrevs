{"files":[{"patch":"@@ -775,1 +775,1 @@\n-     * Checks if this chronology is ISO-like.\n+     * Checks if this chronology supports ISO based fields.\n@@ -777,3 +777,4 @@\n-     * An ISO-like chronology has the same basic structure of days and months\n-     * as the ISO chronology, with month lengths generally aligned with those\n-     * in the ISO January to December definitions.\n+     * The chronology that supports ISO based fields has the same basic\n+     * structure of days and months as the ISO chronology, with month\n+     * lengths generally aligned with those in the ISO January to December\n+     * definitions.\n@@ -785,1 +786,1 @@\n-     * @return true if the chronology is ISO-like\n+     * @return true if the chronology supports ISO based fields\n@@ -790,0 +791,1 @@\n+     * @see java.time.temporal.IsoFields\n@@ -792,1 +794,1 @@\n-    default boolean isIsoLike() {\n+    default boolean supportsIsoFields() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/Chronology.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -682,2 +682,3 @@\n-     * {@inheritDoc}\n-     * @implSpec Always returns {@code true}.\n+     * {@code IsoChronology} supports ISO based fields, such as\n+     * {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n+     * @implSpec The implementation always returns {@code true}.\n@@ -688,1 +689,1 @@\n-    public boolean isIsoLike() {\n+    public boolean supportsIsoFields() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/IsoChronology.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -509,2 +509,3 @@\n-     * {@inheritDoc}\n-     * @implSpec Always returns {@code true}.\n+     * {@code JapaneseChronology} supports ISO based fields, such as\n+     * {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n+     * @implSpec The implementation always returns {@code true}.\n@@ -515,1 +516,1 @@\n-    public boolean isIsoLike() {\n+    public boolean supportsIsoFields() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseChronology.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -340,2 +340,3 @@\n-     * {@inheritDoc}\n-     * @implSpec Always returns {@code true}.\n+     * {@code MinguoChronology} supports ISO based fields, such as\n+     * {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n+     * @implSpec The implementation always returns {@code true}.\n@@ -346,1 +347,1 @@\n-    public boolean isIsoLike() {\n+    public boolean supportsIsoFields() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoChronology.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -340,2 +340,3 @@\n-     * {@inheritDoc}\n-     * @implSpec Always returns {@code true}.\n+     * {@code ThaiBuddhistChronology} supports ISO based fields, such as\n+     * {@code DAY_OF_QUARTER} and {@code QUARTER_OF_YEAR}.\n+     * @implSpec The implementation always returns {@code true}.\n@@ -346,1 +347,1 @@\n-    public boolean isIsoLike() {\n+    public boolean supportsIsoFields() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-                        temporal.isSupported(YEAR) && isIsoLike(temporal);\n+                        temporal.isSupported(YEAR) && supportsIsoFields(temporal);\n@@ -400,1 +400,1 @@\n-                return temporal.isSupported(MONTH_OF_YEAR) && isIsoLike(temporal);\n+                return temporal.isSupported(MONTH_OF_YEAR) && supportsIsoFields(temporal);\n@@ -455,1 +455,1 @@\n-                return temporal.isSupported(EPOCH_DAY) && isIsoLike(temporal);\n+                return temporal.isSupported(EPOCH_DAY) && supportsIsoFields(temporal);\n@@ -536,1 +536,1 @@\n-                return temporal.isSupported(EPOCH_DAY) && isIsoLike(temporal);\n+                return temporal.isSupported(EPOCH_DAY) && supportsIsoFields(temporal);\n@@ -598,2 +598,3 @@\n-            if (!isIsoLike(temporal)) {\n-                throw new DateTimeException(\"Resolve requires ISO-like Chronology\");\n+            if (!supportsIsoFields(temporal)) {\n+                throw new DateTimeException(\"Resolve requires ISO based chronology: \" +\n+                        Chronology.from(temporal));\n@@ -703,1 +704,1 @@\n-            return temporal.isSupported(EPOCH_DAY) && isIsoLike(temporal);\n+            return temporal.isSupported(EPOCH_DAY) && supportsIsoFields(temporal);\n@@ -737,2 +738,2 @@\n-    static boolean isIsoLike(TemporalAccessor temporal) {\n-        return Chronology.from(temporal).isIsoLike();\n+    static boolean supportsIsoFields(TemporalAccessor temporal) {\n+        return Chronology.from(temporal).supportsIsoFields();\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/IsoFields.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -427,2 +427,2 @@\n-    @DataProvider(name = \"data_isIsoLike\")\n-    Object[][]  data_isIsoLike() {\n+    @DataProvider(name = \"data_supportsIsoFields\")\n+    Object[][]  data_supportsIsoFields() {\n@@ -439,1 +439,1 @@\n-    \/\/ isIsoLike()\n+    \/\/ supportsIsoFields()\n@@ -441,3 +441,3 @@\n-    @Test(dataProvider = \"data_isIsoLike\")\n-    public void test_isIsoLike(Chronology chrono, boolean expected) {\n-        assertEquals(chrono.isIsoLike(), expected);\n+    @Test(dataProvider = \"data_supportsIsoFields\")\n+    public void test_supportsIsoFields(Chronology chrono, boolean expected) {\n+        assertEquals(chrono.supportsIsoFields(), expected);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronology.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        assertEquals(chrono.isIsoLike(), false);\n+        assertEquals(chrono.supportsIsoFields(), false);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKTestServiceLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +62,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -84,1 +86,3 @@\n-        assertNotNull(chronos.get(\"Coptic\"), \"CopticChronology not found\");\n+        var coptic = chronos.get(\"Coptic\");\n+        assertNotNull(coptic, \"CopticChronology not found\");\n+        assertEquals(coptic.supportsIsoFields(), false);\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestServiceLoader.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -131,6 +131,6 @@\n-        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(LocalDate.now()),true);\n-        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(ThaiBuddhistDate.now()),true);\n-        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(HijrahDate.now()),false);\n-        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(LocalDate.now()),true);\n-        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(ThaiBuddhistDate.now()),true);\n-        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(HijrahDate.now()),false);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(LocalDate.now()), true);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(ThaiBuddhistDate.now()), true);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(HijrahDate.now()), false);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(LocalDate.now()), true);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(ThaiBuddhistDate.now()), true);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(HijrahDate.now()), false);\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestIsoWeekFields.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}