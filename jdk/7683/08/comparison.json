{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+import java.time.temporal.IsoFields;\n@@ -739,1 +740,1 @@\n-    public default long epochSecond(int prolepticYear, int month, int dayOfMonth,\n+    default long epochSecond(int prolepticYear, int month, int dayOfMonth,\n@@ -768,1 +769,1 @@\n-    public default long epochSecond(Era era, int yearOfEra, int month, int dayOfMonth,\n+    default long epochSecond(Era era, int yearOfEra, int month, int dayOfMonth,\n@@ -773,0 +774,27 @@\n+\n+    \/**\n+     * Checks if this chronology is ISO based.\n+     * <p>\n+     * An ISO based chronology has the same basic structure as the {@link IsoChronology\n+     * ISO chronology}, i.e., the chronology has the same number of months, the number\n+     * of days in each month, and day-of-year and leap years are the same as ISO chronology.\n+     * It also supports the concept of week-based-year of ISO chronology.\n+     * For example, the {@link MinguoChronology Minguo}, {@link ThaiBuddhistChronology\n+     * ThaiThaiBuddhist} and {@link JapaneseChronology Japanese} chronologies are ISO based.\n+     *\n+     * @implSpec\n+     * The default implementation returns {@code false}.\n+     *\n+     * @return {@code true} only if all the fields of {@link IsoFields} are supported by\n+     *          this chronology. Otherwise, returns {@code false}.\n+     * @see IsoChronology\n+     * @see JapaneseChronology\n+     * @see MinguoChronology\n+     * @see ThaiBuddhistChronology\n+     * @see IsoFields\n+     * @since 19\n+     *\/\n+    default boolean isIsoBased() {\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/Chronology.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,1 @@\n+import java.time.temporal.IsoFields;\n@@ -680,0 +681,14 @@\n+    \/\/-----------------------------------------------------------------------\n+    \/**\n+     * {@code IsoChronology} is an ISO based chronology, which supports fields\n+     * in {@link IsoFields}, such as {@link IsoFields#DAY_OF_QUARTER DAY_OF_QUARTER}\n+     * and {@link IsoFields#QUARTER_OF_YEAR QUARTER_OF_YEAR}.\n+     * @see IsoFields\n+     * @return {@code true}\n+     * @since 19\n+     *\/\n+    @Override\n+    public boolean isIsoBased() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/IsoChronology.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+import java.time.temporal.IsoFields;\n@@ -507,0 +508,14 @@\n+    \/\/-----------------------------------------------------------------------\n+    \/**\n+     * {@code JapaneseChronology} is an ISO based chronology, which supports fields\n+     * in {@link IsoFields}, such as {@link IsoFields#DAY_OF_QUARTER DAY_OF_QUARTER}\n+     * and {@link IsoFields#QUARTER_OF_YEAR QUARTER_OF_YEAR}.\n+     * @see IsoFields\n+     * @return {@code true}\n+     * @since 19\n+     *\/\n+    @Override\n+    public boolean isIsoBased() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseChronology.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -468,1 +468,1 @@\n-        if (field instanceof ChronoField) {\n+        if (field instanceof ChronoField cf) {\n@@ -474,1 +474,1 @@\n-            switch ((ChronoField) field) {\n+            switch (cf) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,1 @@\n+import java.time.temporal.IsoFields;\n@@ -338,0 +339,14 @@\n+    \/\/-----------------------------------------------------------------------\n+    \/**\n+     * {@code MinguoChronology} is an ISO based chronology, which supports fields\n+     * in {@link IsoFields}, such as {@link IsoFields#DAY_OF_QUARTER DAY_OF_QUARTER}\n+     * and {@link IsoFields#QUARTER_OF_YEAR QUARTER_OF_YEAR}.\n+     * @see IsoFields\n+     * @return {@code true}\n+     * @since 19\n+     *\/\n+    @Override\n+    public boolean isIsoBased() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoChronology.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,1 @@\n+import java.time.temporal.IsoFields;\n@@ -338,0 +339,14 @@\n+    \/\/-----------------------------------------------------------------------\n+    \/**\n+     * {@code ThaiBuddhistChronology} is an ISO based chronology, which supports fields\n+     * in {@link IsoFields}, such as {@link IsoFields#DAY_OF_QUARTER DAY_OF_QUARTER}\n+     * and {@link IsoFields#QUARTER_OF_YEAR QUARTER_OF_YEAR}.\n+     * @see IsoFields\n+     * @return {@code true}\n+     * @since 19\n+     *\/\n+    @Override\n+    public boolean isIsoBased() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -549,1 +549,4 @@\n-                return super.rangeRefinedBy(temporal);\n+                var range = super.rangeRefinedBy(temporal);\n+                var chronoRange = Chronology.from(temporal).range(YEAR);\n+                return ValueRange.of(Math.max(range.getMinimum(), chronoRange.getMinimum()),\n+                        Math.min(range.getMaximum(), chronoRange.getMaximum()));\n@@ -594,6 +597,0 @@\n-        private static void ensureIso(TemporalAccessor temporal) {\n-            if (isIso(temporal) == false) {\n-                throw new DateTimeException(\"Resolve requires IsoChronology\");\n-            }\n-        }\n-\n@@ -734,2 +731,9 @@\n-    static boolean isIso(TemporalAccessor temporal) {\n-        return Chronology.from(temporal).equals(IsoChronology.INSTANCE);\n+    private static void ensureIso(TemporalAccessor temporal) {\n+        if (!isIso(temporal)) {\n+            throw new DateTimeException(\"Resolve requires ISO based chronology: \" +\n+                    Chronology.from(temporal));\n+        }\n+    }\n+\n+    private static boolean isIso(TemporalAccessor temporal) {\n+        return Chronology.from(temporal).isIsoBased();\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/IsoFields.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,4 +67,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n@@ -427,0 +423,18 @@\n+    @DataProvider\n+    Object[][]  data_isIsoBased() {\n+        return new Object[][] {\n+                {IsoChronology.INSTANCE, true},\n+                {JapaneseChronology.INSTANCE, true},\n+                {MinguoChronology.INSTANCE, true},\n+                {ThaiBuddhistChronology.INSTANCE, true},\n+                {HijrahChronology.INSTANCE, false},\n+        };\n+    }\n+\n+    \/\/-----------------------------------------------------------------------\n+    \/\/ isIsoBased()\n+    \/\/-----------------------------------------------------------------------\n+    @Test(dataProvider = \"data_isIsoBased\")\n+    public void test_isIsoBased(Chronology chrono, boolean expected) {\n+        assertEquals(chrono.isIsoBased(), expected);\n+    }\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKChronology.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +83,1 @@\n+        assertEquals(chrono.isIsoBased(), false);\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/chrono\/TCKTestServiceLoader.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-import java.time.chrono.ThaiBuddhistDate;\n+import java.time.chrono.HijrahDate;\n@@ -466,1 +466,1 @@\n-        field.rangeRefinedBy(ThaiBuddhistDate.now());\n+        field.rangeRefinedBy(HijrahDate.now());\n@@ -480,1 +480,1 @@\n-        field.getFrom(ThaiBuddhistDate.now());\n+        field.getFrom(HijrahDate.now());\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/temporal\/TCKIsoFields.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +62,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -84,1 +86,3 @@\n-        assertNotNull(chronos.get(\"Coptic\"), \"CopticChronology not found\");\n+        var coptic = chronos.get(\"Coptic\");\n+        assertNotNull(coptic, \"CopticChronology not found\");\n+        assertEquals(coptic.isIsoBased(), false);\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/chrono\/TestServiceLoader.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.java.time.temporal;\n+\n+import static java.time.temporal.IsoFields.DAY_OF_QUARTER;\n+import static java.time.temporal.IsoFields.QUARTER_OF_YEAR;\n+import static java.time.temporal.IsoFields.WEEK_BASED_YEAR;\n+import static java.time.temporal.IsoFields.WEEK_OF_WEEK_BASED_YEAR;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.time.LocalDate;\n+import java.time.chrono.ChronoLocalDate;\n+import java.time.chrono.JapaneseDate;\n+import java.time.chrono.MinguoDate;\n+import java.time.chrono.ThaiBuddhistDate;\n+import java.time.temporal.TemporalField;\n+import java.time.temporal.ValueRange;\n+import java.util.List;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * Tests fields in IsoFields class are supported in Japanese\/Minguo\/ThaiBuddhist\n+ * date classes\n+ * @bug 8279185\n+ *\/\n+@Test\n+public class TestIsoFields {\n+    private static final LocalDate ld = LocalDate.of(2022, 2, 25);\n+    private static final ChronoLocalDate J_DATE = JapaneseDate.from(ld);\n+    private static final ChronoLocalDate M_DATE = MinguoDate.from(ld);\n+    private static final ChronoLocalDate TB_DATE = ThaiBuddhistDate.from(ld);\n+    private static final List<ChronoLocalDate> CLDATES = List.of(J_DATE, M_DATE, TB_DATE);\n+\n+    @DataProvider(name = \"isSupported\")\n+    Object[][] data_isSupported() {\n+        return new Object[][]{\n+                {DAY_OF_QUARTER},\n+                {QUARTER_OF_YEAR},\n+                {WEEK_BASED_YEAR},\n+                {WEEK_OF_WEEK_BASED_YEAR},\n+        };\n+    }\n+\n+    @DataProvider(name = \"range\")\n+    Object[][] data_range() {\n+        return new Object[][]{\n+                {J_DATE, DAY_OF_QUARTER, ValueRange.of(1, 90)},\n+                {J_DATE, QUARTER_OF_YEAR, ValueRange.of(1, 4)},\n+                {J_DATE, WEEK_BASED_YEAR, ValueRange.of(1_873, 999_999_999)},\n+                {J_DATE, WEEK_OF_WEEK_BASED_YEAR, ValueRange.of(1, 52)},\n+                {M_DATE, DAY_OF_QUARTER, ValueRange.of(1, 90)},\n+                {M_DATE, QUARTER_OF_YEAR, ValueRange.of(1, 4)},\n+                {M_DATE, WEEK_BASED_YEAR, ValueRange.of(-999_999_999, 999_998_088)},\n+                {M_DATE, WEEK_OF_WEEK_BASED_YEAR, ValueRange.of(1, 52)},\n+                {TB_DATE, DAY_OF_QUARTER, ValueRange.of(1, 90)},\n+                {TB_DATE, QUARTER_OF_YEAR, ValueRange.of(1, 4)},\n+                {TB_DATE, WEEK_BASED_YEAR, ValueRange.of(-999_999_456, 999_999_999)},\n+                {TB_DATE, WEEK_OF_WEEK_BASED_YEAR, ValueRange.of(1, 52)},\n+        };\n+    }\n+\n+    @DataProvider(name = \"with_getLong\")\n+    Object[][] data_with_getLong() {\n+        return new Object[][]{\n+                {DAY_OF_QUARTER, 45},\n+                {QUARTER_OF_YEAR, 2},\n+                {WEEK_BASED_YEAR, 2_022},\n+                {WEEK_OF_WEEK_BASED_YEAR, 10},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"isSupported\")\n+    public void test_isSupported(TemporalField f) {\n+        CLDATES.forEach(d -> assertTrue(d.isSupported(f)));\n+    }\n+\n+    @Test(dataProvider = \"range\")\n+    public void test_range(ChronoLocalDate cld, TemporalField f, ValueRange r) {\n+        assertEquals(cld.range(f), r);\n+    }\n+\n+    @Test(dataProvider = \"with_getLong\")\n+    public void test_with_getLong(TemporalField f, long val) {\n+        CLDATES.forEach(d -> {\n+            var min = d.range(f).getMinimum();\n+            var max = d.range(f).getMaximum();\n+            assertEquals(d.with(f, min).getLong(f), min);\n+            assertEquals(d.with(f, max).getLong(f), max);\n+            assertEquals(d.with(f, val).getLong(f), val);\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestIsoFields.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.time.chrono.HijrahDate;\n@@ -78,0 +79,1 @@\n+        assertEquals(weekField.isSupportedBy(ThaiBuddhistDate.now()), true);\n@@ -82,2 +84,2 @@\n-        assertEquals(IsoFields.WEEK_OF_WEEK_BASED_YEAR.isSupportedBy(ThaiBuddhistDate.now()), false);\n-        assertEquals(WeekFields.ISO.weekOfWeekBasedYear().isSupportedBy(ThaiBuddhistDate.now()), true);\n+        assertEquals(IsoFields.WEEK_OF_WEEK_BASED_YEAR.isSupportedBy(HijrahDate.now()), false);\n+        assertEquals(WeekFields.ISO.weekOfWeekBasedYear().isSupportedBy(HijrahDate.now()), true);\n@@ -119,0 +121,1 @@\n+        assertEquals(yearField.isSupportedBy(ThaiBuddhistDate.now()), true);\n@@ -123,1 +126,1 @@\n-        assertEquals(IsoFields.WEEK_BASED_YEAR.isSupportedBy(ThaiBuddhistDate.now()), false);\n+        assertEquals(IsoFields.WEEK_BASED_YEAR.isSupportedBy(HijrahDate.now()), false);\n@@ -128,4 +131,6 @@\n-        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(LocalDate.now()),true);\n-        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(ThaiBuddhistDate.now()),false);\n-        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(LocalDate.now()),true);\n-        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(ThaiBuddhistDate.now()),false);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(LocalDate.now()), true);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(ThaiBuddhistDate.now()), true);\n+        assertEquals(IsoFields.WEEK_BASED_YEARS.isSupportedBy(HijrahDate.now()), false);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(LocalDate.now()), true);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(ThaiBuddhistDate.now()), true);\n+        assertEquals(IsoFields.QUARTER_YEARS.isSupportedBy(HijrahDate.now()), false);\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/temporal\/TestIsoWeekFields.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}