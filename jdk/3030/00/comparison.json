{"files":[{"patch":"@@ -2078,7 +2078,0 @@\n-\n-\/* vtable-dispatch is not enabled for aarch64 platform*\/\n-void LIR_Assembler::vtable_call(LIR_OpJavaCall* op) {\n-  ShouldNotReachHere();\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1944,6 +1944,0 @@\n-\n-\/* vtable-dispatch is not enabled for arm platforms *\/\n-void LIR_Assembler::vtable_call(LIR_OpJavaCall* op) {\n-  ShouldNotReachHere();\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -709,7 +709,0 @@\n-\n-\/* vtable_call is not enabled for ppc platform *\/\n-void LIR_Assembler::vtable_call(LIR_OpJavaCall* op) {\n-  ShouldNotReachHere(); \/\/ ic_call is used instead.\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -499,1 +499,0 @@\n-    case lir_virtual_call:   \/\/ currently, sparc-specific for niagara\n@@ -536,5 +535,0 @@\n-\/\/ not supported\n-void LIR_Assembler::vtable_call(LIR_OpJavaCall* op) {\n-  ShouldNotReachHere();\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2887,1 +2887,0 @@\n-  case lir_virtual_call:  \/\/ currently, sparc-specific for niagara\n@@ -2910,6 +2909,0 @@\n-\/* Currently, vtable-dispatch is only enabled for sparc platforms *\/\n-void LIR_Assembler::vtable_call(LIR_OpJavaCall* op) {\n-  ShouldNotReachHere();\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2084,1 +2084,0 @@\n-  int vtable_index = Method::invalid_vtable_index;\n@@ -2124,1 +2123,1 @@\n-  Invoke* result = new Invoke(code, result_type, recv, args, vtable_index, target, state_before);\n+  Invoke* result = new Invoke(code, result_type, recv, args, target, state_before);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -326,1 +326,1 @@\n-               int vtable_index, ciMethod* target, ValueStack* state_before)\n+               ciMethod* target, ValueStack* state_before)\n@@ -331,1 +331,0 @@\n-  , _vtable_index(vtable_index)\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1251,1 +1251,0 @@\n-  int             _vtable_index;\n@@ -1257,1 +1256,1 @@\n-         int vtable_index, ciMethod* target, ValueStack* state_before);\n+         ciMethod* target, ValueStack* state_before);\n@@ -1265,1 +1264,0 @@\n-  int vtable_index() const                       { return _vtable_index; }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -708,1 +708,0 @@\n-    case lir_virtual_call:\n@@ -1704,1 +1703,0 @@\n-     case lir_virtual_call:          s = \"virtual\";       break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -964,1 +964,0 @@\n-      , lir_virtual_call\n@@ -1208,5 +1207,0 @@\n-  intptr_t vtable_offset() const {\n-    assert(_code == lir_virtual_call, \"only have vtable for real vcall\");\n-    return (intptr_t) addr();\n-  }\n-\n@@ -2057,4 +2051,0 @@\n-  void call_virtual(ciMethod* method, LIR_Opr receiver, LIR_Opr result,\n-                    intptr_t vtable_offset, LIR_OprList* arguments, CodeEmitInfo* info) {\n-    append(new LIR_OpJavaCall(lir_virtual_call, method, receiver, result, vtable_offset, arguments, info));\n-  }\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -471,3 +471,0 @@\n-  case lir_virtual_call:\n-    vtable_call(op);\n-    break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2961,1 +2961,1 @@\n-      } else if (x->vtable_index() < 0) {\n+      } else {\n@@ -2965,4 +2965,0 @@\n-      } else {\n-        int entry_offset = in_bytes(Klass::vtable_start_offset()) + x->vtable_index() * vtableEntry::size_in_bytes();\n-        int vtable_offset = entry_offset + vtableEntry::method_offset_in_bytes();\n-        __ call_virtual(target, receiver, result_register, vtable_offset, arg_list, info);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -6663,2 +6663,1 @@\n-        case lir_optvirtual_call:\n-        case lir_virtual_call:    inc_counter(counter_call); break;\n+        case lir_optvirtual_call: inc_counter(counter_call); break;\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}