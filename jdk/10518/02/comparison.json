{"files":[{"patch":"@@ -13,2 +13,12 @@\n-always successfully open the dump. This is due to kernel, library (shared\n-objects or DLLs) mismatch between core dump machine and debugger machine.\n+always successfully open the core dump. This is due to library (shared\n+objects or DLLs) mismatches between the core dump machine and the debugger machine.\n+For this reason you should first consider using one of the following approaches to\n+debugging the core dump rather than transporting it to a different machine:\n+<ul>\n+  <li>Remote login to the machine that the core dump was produced on,\n+    and use <a href=\"clhsdb.html\">CLHSDB - SA command line HSDB interface<\/a>.\n+  <li>Use SA remote debugging support to remotely debug the core directly on the machine\n+    it was produced on. This is done by first running <b>jhsdb debugd<\/b> on the machine with\n+    the core dump, and then attaching to it from another machine by using the jhsdb\n+    <b>--connect<\/b> argument. See the <b>jhsdb<\/b> man page for details.\n+<\/ul>\n@@ -18,4 +28,6 @@\n-In most platforms, core dumps do not contain text (a.k.a) Code pages.\n-There pages are to be read from executable and shared objects (or DLLs).\n-Therefore it is important to have matching executable and shared object\n-files in debugger machine. \n+With transported core dumps, SA may produce an error message or throw\n+an exception (such as for a missing hotspot symbol) when opening the core dump.\n+Environment variable <b>LIBSAPROC_DEBUG<\/b> may be set to any value\n+to help debug the root casue of these failures. With <b>LIBSAPROC_DEBUG<\/b> set, SA prints many\n+messages in standard error which can be useful for further debugging. Note that\n+<b>LIBSAPROC_DEBUG<\/b> is not supported on Windows.\n@@ -24,2 +36,0 @@\n-<h3>Solaris transported core dumps<\/h3>\n-\n@@ -27,11 +37,11 @@\n-Debuggers on Solaris (and Linux) use two additional shared objects\n-<b>rtld_db.so<\/b> and <b>libthread_db.so<\/b>. rtld_db.so is used to\n-read information on shared objects from the core dump. libthread_db.so\n-is used to get information on threads from the core dump. rtld_db.so\n-evolves along with rtld.so (the runtime linker library) and libthread_db.so\n-evolves along with libthread.so (user land multithreading library). \n-Hence, debugger machine should have right version of rtld_db.so and\n-libthread_db.so to open the core dump successfully. More details on\n-these debugger libraries can be found in \n-<a href=\"http:\/\/docs.sun.com\/app\/docs\/doc\/817-1984\/\">\n-Solaris Linkers and Libraries Guide - 817-1984<\/a>\n+On  most platforms, core dumps do not contain text (code) pages.\n+Their pages are instead read from the executable and shared objects (or DLLs).\n+Therefore it is important to have a matching java executable and shared object\n+files on the debugger machine. The best way to guarantee this match is to match the\n+debugger machine to that of core dump machine. This means having the same\n+OS version and libraries, and also having the same version of the JDK. It also means having\n+the OS libraries and JDK installed in the same locations on both machines. However, often\n+this isn't an option, and instead you need to copy the libraries and java installation from\n+the machine where the core dump was produced to the debugger machine, and you need\n+to tell SA where these are all located. That is done differently for each\n+OS type, and is described in the following sections.\n@@ -40,2 +50,1 @@\n-<h3>Solaris SA against transported core dumps<\/h3>\n-\n+<h3>Using  transported core dumps on Linux<\/h3>\n@@ -43,9 +52,8 @@\n-With transported core dumps, you may get \"rtld_db failures\" or\n-\"libthread_db failures\" or SA may just throw some other error\n-(hotspot symbol is missing) when opening the core dump. \n-Environment variable <b>LIBSAPROC_DEBUG<\/b> may be set to any value\n-to debug such scenarios. With this env. var set, SA prints many\n-messages in standard error which can be useful for further debugging.\n-SA on Solaris uses <b>libproc.so<\/b> library. This library also\n-prints debug messages with env. var <b>LIBPROC_DEBUG<\/b>. But,\n-setting LIBSAPROC_DEBUG results in setting LIBPROC_DEBUG as well.\n+On Linux, SA parses core and shared library ELF files. But, you\n+may still face problems with transported core dumps, because matching shared\n+objects may not be in the path(s) specified in core dump file. To\n+workaround this, you can define environment variable <b>SA_ALTROOT<\/b>\n+to be the directory where shared libraries are kept. In this directory you should\n+copy all the needed JDK libraries. You should also copy any referenced linux\n+libraries from the core dump machine, unless they are identical to what are\n+installed on the debugger machine.\n@@ -54,5 +62,5 @@\n-The best possible way to debug a transported core dump is to match the\n-debugger machine to that of core dump machine. i.e., have same Kernel\n-and libthread patch level between the machines. mdb (Solaris modular\n-debugger) may be used to find the Kernel patch level of core dump\n-machine and debugger machine may be brought to the same level.\n+ You can also use <b>SA_ALTROOT<\/b> to specify a path mapping. For example, if you\n+ set <b>SA_ALTROOT=\/altroot<\/b>, then <b>\/altroot<\/b> will be prepended to any path found\n+ in the core file, and also prepended to any subdir with the root part stripped off. For example,\n+ when looking up <b>\/usr\/lib\/libfoo.so<\/b>, SA will try to find <b>\/altroot\/usr\/lib\/libfoo.so<\/b>,\n+ <b>\/altroot\/lib\/libfoo.so<\/b>, and <b>\/altroot\/libfoo.so<\/b>.\n@@ -60,0 +68,2 @@\n+\n+<h3>Using  transported core dumps on Windows<\/h3>\n@@ -61,5 +71,9 @@\n-If the matching machine is \"far off\" in your network, then\n-<ul>\n-<li>consider using rlogin and <a href=\"clhsdb.html\">CLHSDB - SA command line HSDB interface<\/a> or\n-<li>use SA remote debugging and debug the core from core machine remotely.\n-<\/ul>\n+ If the debugger machine and core dump machine have identical Windows libraries, then you only\n+ need to point SA to the location of the JDK <b>java.exe<\/b> and libraries. This is done by making\n+ sure the <b>bin<\/b> and <b>bin\/server<\/b> directories are included in the <b>PATH<\/b>\n+ environment variable. Something like the following should work if <b>JAVA_HOME<\/b>\n+ is setup:\n+ <\/p>\n+\n+<p>\n+ set PATH=%JAVA_HOME%\\bin;%JAVA_HOME%\\bin\\server;%PATH%\n@@ -69,8 +83,2 @@\n-But, it may not be feasible to find matching machine to debug. \n-If so, you can copy all application shared objects (and libthread_db.so, if needed) from the core dump \n-machine into your debugger machine's directory, say, \/export\/applibs. Now, set <b>SA_ALTROOT<\/b> \n-environment variable to point to \/export\/applibs directory. Note that \/export\/applibs should either \n-contain matching 'full path' of libraries. i.e., \/usr\/lib\/libthread_db.so from core \n-machine should be under \/export\/applibs\/use\/lib directory and \/use\/java\/jre\/lib\/sparc\/client\/libjvm.so \n-from core machine should be under \/export\/applibs\/use\/java\/jre\/lib\/sparc\/client so on or \/export\/applibs \n-should just contain libthread_db.so, libjvm.so etc. directly. \n+ If the windows libraries are not identical, then they may also need to be copied\n+ to the debugger machine and included in <b>PATH<\/b>.\n@@ -79,0 +87,1 @@\n+<h3>Using  transported core dumps on macOS<\/h3>\n@@ -80,5 +89,1 @@\n-Support for transported core dumps is <b>not<\/b> built into the standard version of libproc.so. You need to\n-set <b>LD_LIBRARY_PATH<\/b> env var to point to the path of a specially built version of libproc.so. \n-Note that this version of libproc.so has a special symbol to support transported core dump debugging. \n-In future, we may get this feature built into standard libproc.so -- if that happens, this step (of \n-setting LD_LIBRARY_PATH) can be skipped.\n+SA normally uses the path to the specified java executable to locate the JDK libraries. It will look in the following subdirectories for them (relative to the path to the specified java executable): <b>..\/lib<\/b>, <b>..\/lib\/server<\/b>, <b>..\/jre\/lib<\/b>, and <b>..\/jre\/lib\/server<\/b>. If not found in any of those locations, it will look in the same subdirectories relative to the <b>JAVA_HOME<\/b> environment variable, but using <b>JAVA_HOME<\/b> normally should not be necessary.\n@@ -87,1 +92,0 @@\n-<h3>Ignoring libthread_db.so failures<\/h3>\n@@ -89,5 +93,1 @@\n-If you are okay with missing thread related information, you can set \n-<b>SA_IGNORE_THREADDB<\/b> environment variable to any value. With this\n-set, SA ignores libthread_db failure, but you won't be able to get any\n-thread related information. But, you would be able to use SA and get\n-other information.\n+For locating the user JNI libraries, SA uses <b>DYLD_LIBRARY_PATH<\/b>. It can contain more than one directory separated by a colon. <b>DYLD_LIBRARY_PATH<\/b> can also be used for locating the JDK libraries, but it needs to specify the full path to the libraries. SA will not automatically search subdirs such as <b>lib\/server<\/b> as it does for <b>JAVA_HOME<\/b>.\n@@ -96,1 +96,0 @@\n-<h3>Linux SA against transported core dumps<\/h3>\n@@ -98,8 +97,1 @@\n-On Linux, SA parses core and shared library ELF files. SA <b>does not<\/b> use\n-libthread_db.so or rtld_db.so for core dump debugging (although \n-libthread_db.so is used for live process debugging). But, you\n-may still face problems with transported core dumps, because matching shared\n-objects may not be in the path(s) specified in core dump file. To\n-workaround this, you can define environment variable <b>SA_ALTROOT<\/b>\n-to be the directory where shared libraries are kept. The semantics of\n-this env. variable is same as that for Solaris (please refer above).\n+For locating the macOS libraries, SA uses <b>SA_ALTROOT<\/b> similar to the linux support, except it does not use it to map all the subdirs. It just appends <b>SA_ALTROOT<\/b> to the full path of each macOS library. So if you specify <b>SA_ALTROOT=\/altroot<\/b>, SA will prepend <b>\/altroot<\/b> to the full path of each macOS library. Note however, due to <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8249779\">JDK-8249779<\/a> , SA will not even try to open macOS libraries, so at the moment there is no need to try to match up the macOS libraries by pointing to them with <b>SA_ALTROOT<\/b>.\n@@ -108,0 +100,3 @@\n+<p>\n+Note: Starting with macOS 12, core files are no longer working with macOS on the x64 platform. See <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8294316\">JDK-8294316<\/a>.\n+<\/p>\n","filename":"src\/jdk.hotspot.agent\/doc\/transported_core.html","additions":63,"deletions":68,"binary":false,"changes":131,"status":"modified"}]}