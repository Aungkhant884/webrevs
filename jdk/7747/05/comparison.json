{"files":[{"patch":"@@ -240,3 +240,2 @@\n-        boolean isAnnotatedTypeElement = utils.isAnnotationType(member.getEnclosingElement());\n-        if (!isAnnotatedTypeElement && utils.isMethod(member)) {\n-            if (!utils.isInterface(member.getEnclosingElement()) && utils.isAbstract(member)) {\n+        if (!utils.isAnnotationInterface(member.getEnclosingElement()) && utils.isMethod(member)) {\n+            if (!utils.isPlainInterface(member.getEnclosingElement()) && utils.isAbstract(member)) {\n@@ -325,3 +324,1 @@\n-                    && !utils.isClass(element)\n-                    && !utils.isInterface(element)\n-                    && !utils.isAnnotationType(element)) {\n+                    && !utils.isTypeElement(element)) {\n@@ -333,1 +330,1 @@\n-            addSummaryLink(utils.isClass(element) || utils.isInterface(element)\n+            addSummaryLink(utils.isClass(element) || utils.isPlainInterface(element)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-            addLevelInfo(!utils.isInterface(firstTypeElement) ? firstTypeElement : null,\n+            addLevelInfo(!utils.isPlainInterface(firstTypeElement) ? firstTypeElement : null,\n@@ -140,1 +140,1 @@\n-        if (interfaces.size() > (utils.isInterface(typeElement) ? 1 : 0)) {\n+        if (interfaces.size() > (utils.isPlainInterface(typeElement) ? 1 : 0)) {\n@@ -147,1 +147,1 @@\n-                            if (utils.isInterface(typeElement)) {\n+                            if (utils.isPlainInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractTreeWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,2 +119,2 @@\n-                .addTab(contents.interfaces, utils::isInterface)\n-                .addTab(contents.classes, e -> utils.isOrdinaryClass((TypeElement)e))\n+                .addTab(contents.interfaces, utils::isPlainInterface)\n+                .addTab(contents.classes, e -> utils.isNonThrowableClass((TypeElement)e))\n@@ -124,1 +124,1 @@\n-                .addTab(contents.annotationTypes, utils::isAnnotationType);\n+                .addTab(contents.annotationTypes, utils::isAnnotationInterface);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-        if (utils.isAnnotationType(member)) {\n+        if (utils.isAnnotationInterface(member.getEnclosingElement())) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeMemberWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-        if (!utils.isAnnotationType(typeElement) ||\n+        if (!utils.isAnnotationInterface(typeElement) ||\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-        if (utils.isInterface(typeElement)) {\n+        if (utils.isPlainInterface(typeElement)) {\n@@ -318,1 +318,1 @@\n-        if (!utils.isInterface(typeElement)) {\n+        if (!utils.isPlainInterface(typeElement)) {\n@@ -353,1 +353,1 @@\n-        if (utils.isInterface(typeElement) && !interfaces.isEmpty()) {\n+        if (utils.isPlainInterface(typeElement) && !interfaces.isEmpty()) {\n@@ -370,1 +370,1 @@\n-                dl.add(HtmlTree.DT(utils.isInterface(e)\n+                dl.add(HtmlTree.DT(utils.isPlainInterface(e)\n@@ -465,1 +465,1 @@\n-        if (utils.isAnnotationType(typeElement)) {\n+        if (utils.isAnnotationInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-        if (utils.isExecutableElement(e) && !utils.isConstructor(e)) {\n+        if (utils.isMethod(e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        } else if (utils.isInterface(typeElement)){\n+        } else if (utils.isPlainInterface(typeElement)){\n@@ -264,1 +264,1 @@\n-        } else if (utils.isAnnotationType(typeElement)) {\n+        } else if (utils.isAnnotationInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-                    utils.isAnnotationType(enclosing) ? \"doclet.Element_in\"\n+                    utils.isAnnotationInterface(enclosing) ? \"doclet.Element_in\"\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-                        e -> !utils.isAbstract(e) && !utils.isInterface(e.getEnclosingElement()))\n+                        e -> !utils.isAbstract(e) && !utils.isPlainInterface(e.getEnclosingElement()))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        Content label = utils.isInterface(member) ?\n+        Content label = utils.isPlainInterface(member) ?\n@@ -107,1 +107,1 @@\n-            label = Text.of(utils.isInterface(typeElement)\n+            label = Text.of(utils.isPlainInterface(typeElement)\n@@ -111,1 +111,1 @@\n-            label = Text.of(utils.isInterface(typeElement)\n+            label = Text.of(utils.isPlainInterface(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -254,2 +254,2 @@\n-                .addTab(contents.interfaces, utils::isInterface)\n-                .addTab(contents.classes, e -> utils.isOrdinaryClass((TypeElement)e))\n+                .addTab(contents.interfaces, utils::isPlainInterface)\n+                .addTab(contents.classes, e -> utils.isNonThrowableClass((TypeElement)e))\n@@ -259,1 +259,1 @@\n-                .addTab(contents.annotationTypes, utils::isAnnotationType);\n+                .addTab(contents.annotationTypes, utils::isAnnotationInterface);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            if (!utils.isAnnotationType(typeElement)) {\n+            if (!utils.isAnnotationInterface(typeElement)) {\n@@ -151,1 +151,1 @@\n-                if (!utils.isInterface(typeElement)) {\n+                if (!utils.isPlainInterface(typeElement)) {\n@@ -172,1 +172,1 @@\n-                            extendsImplements.add(utils.isInterface(typeElement) ? \"extends \" : \"implements \");\n+                            extendsImplements.add(utils.isPlainInterface(typeElement) ? \"extends \" : \"implements \");\n@@ -510,1 +510,1 @@\n-                if (utils.isInterface(te) || utils.isAnnotationType(te)) {\n+                if (utils.isInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-                if (utils.isExecutableElement(member) && firstSentenceTags.isEmpty()) {\n+                if (utils.isMethod(member) && firstSentenceTags.isEmpty()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MemberSummaryBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+            assert utils.isMethod(currentMethod); \/\/ not all executables are methods\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MethodBuilder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-            } else if (writer.configuration().utils.isExecutableElement(e)) {\n+            } else if (writer.configuration().utils.isMethod(e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        if (tags.isEmpty() && utils.isExecutableElement(holder)) {\n+        if (tags.isEmpty() && utils.isMethod(holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SeeTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-        if (utils.isExecutableElement(holder)) {\n+        if (utils.isMethod(holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,1 +183,1 @@\n-            } else if (utils.isInterface(aClass)) {\n+            } else if (utils.isPlainInterface(aClass)) {\n@@ -185,1 +185,1 @@\n-            } else if (utils.isAnnotationType(aClass)) {\n+            } else if (utils.isAnnotationInterface(aClass)) {\n@@ -339,1 +339,1 @@\n-        } else if (utils.isAnnotationType(typeElement)) {\n+        } else if (utils.isAnnotationInterface(typeElement)) {\n@@ -341,1 +341,1 @@\n-        } else if (utils.isInterface(typeElement)) {\n+        } else if (utils.isPlainInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassTree.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        String cltypelower = utils.isInterface(typeElement) ? \"interface\" : \"class\";\n+        String cltypelower = utils.isPlainInterface(typeElement) ? \"interface\" : \"class\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/MetaKeywords.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-            if (utils.isAnnotationType(te)) {\n+            if (utils.isAnnotationInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import java.util.stream.Collectors;\n@@ -76,1 +75,0 @@\n-import javax.lang.model.type.NoType;\n@@ -287,17 +285,2 @@\n-    public boolean isAnnotationType(Element e) {\n-        return new SimpleElementVisitor14<Boolean, Void>() {\n-            @Override\n-            public Boolean visitExecutable(ExecutableElement e, Void p) {\n-                return visit(e.getEnclosingElement());\n-            }\n-\n-            @Override\n-            public Boolean visitUnknown(Element e, Void p) {\n-                return false;\n-            }\n-\n-            @Override\n-            protected Boolean defaultAction(Element e, Void p) {\n-                return e.getKind() == ANNOTATION_TYPE;\n-            }\n-        }.visit(e);\n+    public boolean isAnnotationInterface(Element e) {\n+        return e.getKind() == ANNOTATION_TYPE;\n@@ -306,6 +289,1 @@\n-    \/**\n-     * An Enum implementation is almost identical, thus this method returns if\n-     * this element represents a CLASS or an ENUM\n-     * @param e element\n-     * @return true if class or enum\n-     *\/\n+    \/\/ Note that e.getKind().isClass() is not the same as e.getKind() == CLASS\n@@ -316,0 +294,6 @@\n+    \/\/ Note that e.getKind().isInterface() is not the same as e.getKind() == INTERFACE\n+    \/\/ See Also: isPlainInterface(Element)\n+    public boolean isInterface(Element e) {\n+        return e.getKind().isInterface();\n+    }\n+\n@@ -328,1 +312,1 @@\n-    public boolean isInterface(Element e) {\n+    public boolean isPlainInterface(Element e) {\n@@ -450,7 +434,0 @@\n-    public boolean isOrdinaryClass(TypeElement te) {\n-        if (isEnum(te) || isInterface(te) || isAnnotationType(te) || isRecord(te)) {\n-            return false;\n-        }\n-        return !isThrowable(te);\n-    }\n-\n@@ -463,0 +440,4 @@\n+    public boolean isNonThrowableClass(TypeElement te) {\n+        return te.getKind() == CLASS && !isThrowable(te);\n+    }\n+\n@@ -464,4 +445,1 @@\n-        if (isEnum(te) || isInterface(te) || isAnnotationType(te)) {\n-            return false;\n-        }\n-        return typeUtils.isSubtype(te.asType(), getThrowableType());\n+        return te.getKind() == CLASS && typeUtils.isSubtype(te.asType(), getThrowableType());\n@@ -471,4 +449,1 @@\n-        return switch (e.getKind()) {\n-            case CONSTRUCTOR, METHOD, INSTANCE_INIT -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isExecutable();\n@@ -478,5 +453,1 @@\n-        return switch (e.getKind()) {\n-            case ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD, LOCAL_VARIABLE,\n-                    PARAMETER, RESOURCE_VARIABLE -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isVariable();\n@@ -486,4 +457,1 @@\n-        return switch (e.getKind()) {\n-            case CLASS, ENUM, INTERFACE, ANNOTATION_TYPE, RECORD -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isDeclaredType();\n@@ -872,1 +840,1 @@\n-            if (isInterface(e)) {\n+            if (isPlainInterface(e)) {\n@@ -1130,2 +1098,1 @@\n-        return isInterface(te) || typeUtils.isSameType(te.asType(), getObjectType())\n-                || isAnnotationType(te);\n+        return isInterface(te) || typeUtils.isSameType(te.asType(), getObjectType());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":20,"deletions":53,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -410,2 +410,2 @@\n-        \/\/ suppress parents of annotation types\n-        if (utils.isAnnotationType(te)) {\n+        \/\/ suppress parents of annotation interfaces\n+        if (utils.isAnnotationInterface(te)) {\n@@ -580,1 +580,1 @@\n-        return utils.isInterface(enclosing);\n+        return utils.isPlainInterface(enclosing);\n@@ -780,1 +780,1 @@\n-                        if (utils.isAnnotationType(te)) {\n+                        if (utils.isAnnotationInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}