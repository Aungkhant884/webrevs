{"files":[{"patch":"@@ -241,1 +241,1 @@\n-            if (!utils.isInterface(member.getEnclosingElement()) && utils.isAbstract(member)) {\n+            if (!utils.isPlainInterface(member.getEnclosingElement()) && utils.isAbstract(member)) {\n@@ -330,1 +330,1 @@\n-            addSummaryLink(utils.isOfClassKind(element) || utils.isInterface(element)\n+            addSummaryLink(utils.isClass(element) || utils.isPlainInterface(element)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-            addLevelInfo(!utils.isInterface(firstTypeElement) ? firstTypeElement : null,\n+            addLevelInfo(!utils.isPlainInterface(firstTypeElement) ? firstTypeElement : null,\n@@ -140,1 +140,1 @@\n-        if (interfaces.size() > (utils.isInterface(typeElement) ? 1 : 0)) {\n+        if (interfaces.size() > (utils.isPlainInterface(typeElement) ? 1 : 0)) {\n@@ -147,1 +147,1 @@\n-                            if (utils.isInterface(typeElement)) {\n+                            if (utils.isPlainInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractTreeWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -119,2 +119,2 @@\n-                .addTab(contents.interfaces, utils::isInterface)\n-                .addTab(contents.classes, e -> utils.isOrdinaryClass((TypeElement)e))\n+                .addTab(contents.interfaces, utils::isPlainInterface)\n+                .addTab(contents.classes, e -> utils.isNonThrowableClass((TypeElement)e))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-        if (!utils.isOfClassKind(typeElement)) {\n+        if (!utils.isClass(typeElement)) {\n@@ -292,1 +292,1 @@\n-        if (utils.isOfClassKind(typeElement)) {\n+        if (utils.isClass(typeElement)) {\n@@ -310,1 +310,1 @@\n-        if (utils.isInterface(typeElement)) {\n+        if (utils.isPlainInterface(typeElement)) {\n@@ -323,1 +323,1 @@\n-        if (!utils.isInterface(typeElement)) {\n+        if (!utils.isPlainInterface(typeElement)) {\n@@ -344,1 +344,1 @@\n-        if (utils.isOfClassKind(typeElement) && !interfaces.isEmpty()) {\n+        if (utils.isClass(typeElement) && !interfaces.isEmpty()) {\n@@ -358,1 +358,1 @@\n-        if (utils.isInterface(typeElement) && !interfaces.isEmpty()) {\n+        if (utils.isPlainInterface(typeElement) && !interfaces.isEmpty()) {\n@@ -375,1 +375,1 @@\n-                dl.add(HtmlTree.DT(utils.isInterface(e)\n+                dl.add(HtmlTree.DT(utils.isPlainInterface(e)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -171,1 +171,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        } else if (utils.isInterface(typeElement)){\n+        } else if (utils.isPlainInterface(typeElement)){\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,1 +161,1 @@\n-                            utils.isOfClassKind(holder)\n+                            utils.isClass(holder)\n@@ -209,1 +209,1 @@\n-                        e -> !utils.isAbstract(e) && !utils.isInterface(e.getEnclosingElement()))\n+                        e -> !utils.isAbstract(e) && !utils.isPlainInterface(e.getEnclosingElement()))\n@@ -221,1 +221,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -225,1 +225,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-        Content label = utils.isInterface(member) ?\n+        Content label = utils.isPlainInterface(member) ?\n@@ -107,1 +107,1 @@\n-            label = Text.of(utils.isInterface(typeElement)\n+            label = Text.of(utils.isPlainInterface(typeElement)\n@@ -111,1 +111,1 @@\n-            label = Text.of(utils.isInterface(typeElement)\n+            label = Text.of(utils.isPlainInterface(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,2 +254,2 @@\n-                .addTab(contents.interfaces, utils::isInterface)\n-                .addTab(contents.classes, e -> utils.isOrdinaryClass((TypeElement)e))\n+                .addTab(contents.interfaces, utils::isPlainInterface)\n+                .addTab(contents.classes, e -> utils.isNonThrowableClass((TypeElement)e))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                            utils.isOfClassKind(holder)\n+                            utils.isClass(holder)\n@@ -175,1 +175,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -179,1 +179,1 @@\n-            label = Text.of(utils.isOfClassKind(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-                if (!utils.isInterface(typeElement)) {\n+                if (!utils.isPlainInterface(typeElement)) {\n@@ -172,1 +172,1 @@\n-                            extendsImplements.add(utils.isInterface(typeElement) ? \"extends \" : \"implements \");\n+                            extendsImplements.add(utils.isPlainInterface(typeElement) ? \"extends \" : \"implements \");\n@@ -510,1 +510,1 @@\n-                if (utils.isInterface(te) || utils.isAnnotationInterface(te)) {\n+                if (utils.isInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-        if (utils.isOfClassKind(holder) && utils.isSerializable((TypeElement)holder)) {\n+        if (utils.isClass(holder) && utils.isSerializable((TypeElement)holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-            if (utils.isOfClassKind(currentTypeElement) && utils.isSerializable(currentTypeElement)) {\n+            if (utils.isClass(currentTypeElement) && utils.isSerializable(currentTypeElement)) {\n@@ -522,1 +522,1 @@\n-        return utils.isOfClassKind(element)\n+        return utils.isClass(element)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-            } else if (utils.isOfClassKind(aClass)) {\n+            } else if (utils.isClass(aClass)) {\n@@ -183,1 +183,1 @@\n-            } else if (utils.isInterface(aClass)) {\n+            } else if (utils.isPlainInterface(aClass)) {\n@@ -341,1 +341,1 @@\n-        } else if (utils.isInterface(typeElement)) {\n+        } else if (utils.isPlainInterface(typeElement)) {\n@@ -343,1 +343,1 @@\n-        } else if (utils.isOfClassKind(typeElement)) {\n+        } else if (utils.isClass(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassTree.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        String cltypelower = utils.isInterface(typeElement) ? \"interface\" : \"class\";\n+        String cltypelower = utils.isPlainInterface(typeElement) ? \"interface\" : \"class\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/MetaKeywords.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import java.util.stream.Collectors;\n@@ -76,1 +75,0 @@\n-import javax.lang.model.type.NoType;\n@@ -292,1 +290,1 @@\n-    public boolean isOfClassKind(Element e) {\n+    public boolean isClass(Element e) {\n@@ -296,0 +294,5 @@\n+    \/\/ Note that e.getKind().isInterface() is not the same as e.getKind() == INTERFACE\n+    public boolean isInterface(Element e) {\n+        return e.getKind().isInterface();\n+    }\n+\n@@ -308,2 +311,1 @@\n-    \/\/ Note that e.getKind().isInterface() is not the same as e.getKind() == INTERFACE\n-    public boolean isInterface(Element e) {\n+    public boolean isPlainInterface(Element e) {\n@@ -431,4 +433,0 @@\n-    public boolean isOrdinaryClass(TypeElement te) {\n-        return te.getKind() == CLASS && !isThrowable(te);\n-    }\n-\n@@ -441,0 +439,4 @@\n+    public boolean isNonThrowableClass(TypeElement te) {\n+        return te.getKind() == CLASS && !isThrowable(te);\n+    }\n+\n@@ -442,4 +444,1 @@\n-        if (te.getKind() != CLASS) { \/\/ quick check\n-            return false;\n-        }\n-        return typeUtils.isSubtype(te.asType(), getThrowableType());\n+        return te.getKind() == CLASS && typeUtils.isSubtype(te.asType(), getThrowableType());\n@@ -840,1 +839,1 @@\n-            if (isInterface(e)) {\n+            if (isPlainInterface(e)) {\n@@ -1091,1 +1090,1 @@\n-        if (isNoType(superclass) && isOfClassKind(te)) {\n+        if (isNoType(superclass) && isClass(te)) {\n@@ -1098,2 +1097,1 @@\n-        return isInterface(te) || typeUtils.isSameType(te.asType(), getObjectType())\n-                || isAnnotationInterface(te);\n+        return isInterface(te) || typeUtils.isSameType(te.asType(), getObjectType());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -580,1 +580,1 @@\n-        return utils.isInterface(enclosing);\n+        return utils.isPlainInterface(enclosing);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}