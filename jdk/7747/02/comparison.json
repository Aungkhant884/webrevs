{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,2 +240,1 @@\n-        boolean isAnnotatedTypeElement = utils.isAnnotationType(member.getEnclosingElement());\n-        if (!isAnnotatedTypeElement && utils.isMethod(member)) {\n+        if (!utils.isAnnotationInterface(member.getEnclosingElement()) && utils.isMethod(member)) {\n@@ -325,3 +324,1 @@\n-                    && !utils.isClass(element)\n-                    && !utils.isInterface(element)\n-                    && !utils.isAnnotationType(element)) {\n+                    && !utils.isTypeElement(element)) {\n@@ -333,1 +330,1 @@\n-            addSummaryLink(utils.isClass(element) || utils.isInterface(element)\n+            addSummaryLink(utils.isOfClassKind(element) || utils.isInterface(element)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-                .addTab(contents.annotationTypes, utils::isAnnotationType);\n+                .addTab(contents.annotationTypes, utils::isAnnotationInterface);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,1 +272,1 @@\n-        if (utils.isAnnotationType(member)) {\n+        if (utils.isAnnotationInterface(member.getEnclosingElement())) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeMemberWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-        if (!utils.isAnnotationType(typeElement) ||\n+        if (!utils.isAnnotationInterface(typeElement) ||\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-        if (!utils.isClass(typeElement)) {\n+        if (!utils.isOfClassKind(typeElement)) {\n@@ -297,1 +297,1 @@\n-        if (utils.isClass(typeElement)) {\n+        if (utils.isOfClassKind(typeElement)) {\n@@ -349,1 +349,1 @@\n-        if (utils.isClass(typeElement) && !interfaces.isEmpty()) {\n+        if (utils.isOfClassKind(typeElement) && !interfaces.isEmpty()) {\n@@ -480,1 +480,1 @@\n-        if (utils.isAnnotationType(typeElement)) {\n+        if (utils.isAnnotationInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n@@ -171,1 +171,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-        if (utils.isExecutableElement(e) && !utils.isConstructor(e)) {\n+        if (utils.isMethod(e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        } else if (utils.isAnnotationType(typeElement)) {\n+        } else if (utils.isAnnotationInterface(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-                    utils.isAnnotationType(enclosing) ? \"doclet.Element_in\"\n+                    utils.isAnnotationInterface(enclosing) ? \"doclet.Element_in\"\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-                            utils.isClass(holder)\n+                            utils.isOfClassKind(holder)\n@@ -221,1 +221,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n@@ -225,1 +225,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-                .addTab(contents.annotationTypes, utils::isAnnotationType);\n+                .addTab(contents.annotationTypes, utils::isAnnotationInterface);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                            utils.isClass(holder)\n+                            utils.isOfClassKind(holder)\n@@ -175,1 +175,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n@@ -179,1 +179,1 @@\n-            label = Text.of(utils.isClass(typeElement)\n+            label = Text.of(utils.isOfClassKind(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,1 +149,1 @@\n-            if (!utils.isAnnotationType(typeElement)) {\n+            if (!utils.isAnnotationInterface(typeElement)) {\n@@ -511,1 +511,1 @@\n-                if (utils.isInterface(te) || utils.isAnnotationType(te)) {\n+                if (utils.isInterface(te) || utils.isAnnotationInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-        if (utils.isClass(holder) && utils.isSerializable((TypeElement)holder)) {\n+        if (utils.isOfClassKind(holder) && utils.isSerializable((TypeElement)holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,1 +270,1 @@\n-                if (utils.isExecutableElement(member) && firstSentenceTags.isEmpty()) {\n+                if (utils.isMethod(member) && firstSentenceTags.isEmpty()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MemberSummaryBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,0 +172,1 @@\n+            assert utils.isMethod(currentMethod); \/\/ not all executables are methods\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MethodBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-            if (utils.isClass(currentTypeElement) && utils.isSerializable(currentTypeElement)) {\n+            if (utils.isOfClassKind(currentTypeElement) && utils.isSerializable(currentTypeElement)) {\n@@ -522,1 +522,1 @@\n-        return utils.isClass(element)\n+        return utils.isOfClassKind(element)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-            } else if (writer.configuration().utils.isExecutableElement(e)) {\n+            } else if (writer.configuration().utils.isMethod(e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        if (tags.isEmpty() && utils.isExecutableElement(holder)) {\n+        if (tags.isEmpty() && utils.isMethod(holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SeeTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-        if (utils.isExecutableElement(holder)) {\n+        if (utils.isMethod(holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-            } else if (utils.isClass(aClass)) {\n+            } else if (utils.isOfClassKind(aClass)) {\n@@ -185,1 +185,1 @@\n-            } else if (utils.isAnnotationType(aClass)) {\n+            } else if (utils.isAnnotationInterface(aClass)) {\n@@ -339,1 +339,1 @@\n-        } else if (utils.isAnnotationType(typeElement)) {\n+        } else if (utils.isAnnotationInterface(typeElement)) {\n@@ -343,1 +343,1 @@\n-        } else if (utils.isClass(typeElement)) {\n+        } else if (utils.isOfClassKind(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassTree.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-            if (utils.isAnnotationType(te)) {\n+            if (utils.isAnnotationInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -288,17 +288,2 @@\n-    public boolean isAnnotationType(Element e) {\n-        return new SimpleElementVisitor14<Boolean, Void>() {\n-            @Override\n-            public Boolean visitExecutable(ExecutableElement e, Void p) {\n-                return visit(e.getEnclosingElement());\n-            }\n-\n-            @Override\n-            public Boolean visitUnknown(Element e, Void p) {\n-                return false;\n-            }\n-\n-            @Override\n-            protected Boolean defaultAction(Element e, Void p) {\n-                return e.getKind() == ANNOTATION_TYPE;\n-            }\n-        }.visit(e);\n+    public boolean isAnnotationInterface(Element e) {\n+        return e.getKind() == ANNOTATION_TYPE;\n@@ -307,7 +292,2 @@\n-    \/**\n-     * An Enum implementation is almost identical, thus this method returns if\n-     * this element represents a CLASS or an ENUM\n-     * @param e element\n-     * @return true if class or enum\n-     *\/\n-    public boolean isClass(Element e) {\n+    \/\/ Note that e.getKind().isClass() is not the same as e.getKind() == CLASS\n+    public boolean isOfClassKind(Element e) {\n@@ -329,0 +309,1 @@\n+    \/\/ Note that e.getKind().isInterface() is not the same as e.getKind() == INTERFACE\n@@ -452,4 +433,1 @@\n-        if (isEnum(te) || isInterface(te) || isAnnotationType(te) || isRecord(te)) {\n-            return false;\n-        }\n-        return !isThrowable(te);\n+        return te.getKind() == CLASS && !isThrowable(te);\n@@ -465,1 +443,1 @@\n-        if (isEnum(te) || isInterface(te) || isAnnotationType(te)) {\n+        if (te.getKind() != CLASS) { \/\/ quick check\n@@ -472,4 +450,1 @@\n-        return switch (e.getKind()) {\n-            case CONSTRUCTOR, METHOD, INSTANCE_INIT -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isExecutable();\n@@ -479,5 +454,1 @@\n-        return switch (e.getKind()) {\n-            case ENUM_CONSTANT, EXCEPTION_PARAMETER, FIELD, LOCAL_VARIABLE,\n-                    PARAMETER, RESOURCE_VARIABLE -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isVariable();\n@@ -487,4 +458,1 @@\n-        return switch (e.getKind()) {\n-            case CLASS, ENUM, INTERFACE, ANNOTATION_TYPE, RECORD -> true;\n-            default -> false;\n-        };\n+        return e.getKind().isDeclaredType();\n@@ -1124,1 +1092,1 @@\n-        if (isNoType(superclass) && isClass(te)) {\n+        if (isNoType(superclass) && isOfClassKind(te)) {\n@@ -1132,1 +1100,1 @@\n-                || isAnnotationType(te);\n+                || isAnnotationInterface(te);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":12,"deletions":44,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -410,2 +410,2 @@\n-        \/\/ suppress parents of annotation types\n-        if (utils.isAnnotationType(te)) {\n+        \/\/ suppress parents of annotation interfaces\n+        if (utils.isAnnotationInterface(te)) {\n@@ -780,1 +780,1 @@\n-                        if (utils.isAnnotationType(te)) {\n+                        if (utils.isAnnotationInterface(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}