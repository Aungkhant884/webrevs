{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.Field;\n@@ -36,1 +37,0 @@\n-import java.nio.ByteBuffer;\n@@ -41,0 +41,1 @@\n+import java.util.HashMap;\n@@ -94,1 +95,11 @@\n-        private final static int maxSize = 4096;\n+\n+        private static String toReadable(String s) {\n+            if (s == null)\n+                return \"null\";\n+            StringBuilder sb = new StringBuilder();\n+            for(char ch : s.toCharArray()) {\n+                sb.append(String.format(\"\\\\u%04X\", (int)ch));\n+            }\n+            return sb.toString();\n+        }\n+\n@@ -96,1 +107,2 @@\n-         * Verify environment variable and argument are encoded by Linux's eucjp or not\n+         * Verify environment variable and argument are encoded by Linux's\n+         * eucjp or not\n@@ -100,6 +112,1 @@\n-            byte[] euc = (EUC_JP_TEXT + \"=\" + EUC_JP_TEXT).getBytes(cs);\n-            byte[] eucjp = \"LANG=ja_JP.eucjp\".getBytes(cs);\n-            String s = System.getenv(EUC_JP_TEXT);\n-            if (!EUC_JP_TEXT.equals(s)) {\n-                System.err.println(\"ERROR: getenv() returns unexpected data\");\n-            }\n+            byte[] euc = EUC_JP_TEXT.getBytes(cs);\n@@ -107,9 +114,3 @@\n-                System.err.print(\"ERROR: Unexpected argument was received: \");\n-                for(char ch : EUC_JP_TEXT.toCharArray()) {\n-                   System.err.printf(\"\\\\u%04X\", (int)ch);\n-                }\n-                System.err.print(\"<->\");\n-                for(char ch : args[0].toCharArray()) {\n-                   System.err.printf(\"\\\\u%04X\", (int)ch);\n-                }\n-                System.err.println();\n+                System.err.println(\"ERROR: argument EUC_JP_TEXT is:\");\n+                System.err.println(\"  Actual:   \" + toReadable(args[0]));\n+                System.err.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n@@ -117,17 +118,51 @@\n-            Class<?> cls = Class.forName(\"java.lang.ProcessEnvironment\");\n-            Method environ_mid = cls.getDeclaredMethod(\"environ\");\n-            environ_mid.setAccessible(true);\n-            byte[][] environ = (byte[][]) environ_mid.invoke(null,\n-                (Object[])null);\n-            HexFormat hf = HexFormat.of().withUpperCase().withPrefix(\"\\\\x\");\n-            byte[] ba = new byte[maxSize];\n-            for(int i = 0; i < environ.length; i += 2) {\n-                ByteBuffer bb = ByteBuffer.wrap(ba);\n-                bb.put(environ[i]);\n-                bb.put((byte)'=');\n-                bb.put(environ[i+1]);\n-                byte[] envb = Arrays.copyOf(ba, bb.position());\n-                if (Arrays.equals(eucjp, envb)) continue;\n-                if (!Arrays.equals(euc, envb)) {\n-                    System.err.println(\"ERROR: Unexpected environment variables: \" +\n-                        hf.formatHex(envb));\n+            String s = System.getenv(EUC_JP_TEXT);\n+            if (!EUC_JP_TEXT.equals(s)) {\n+                System.err.println(\"ERROR: getenv(\\\"EUC_JP_TEXT\\\") is:\");\n+                System.err.println(\"  Actual:   \" + toReadable(s));\n+                System.err.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n+            } else {\n+                try {\n+                    Class<?> ProcessEnvironment_cls =\n+                        Class.forName(\"java.lang.ProcessEnvironment\");\n+                    Field theEnvironment_fid =\n+                        ProcessEnvironment_cls.getDeclaredField(\"theEnvironment\");\n+                    theEnvironment_fid.setAccessible(true);\n+                    HashMap theEnvironment =\n+                        (HashMap) theEnvironment_fid.get(null);\n+                    Class<?> ExternalData_cls =\n+                        Class.forName(\"java.lang.ProcessEnvironment$ExternalData\");\n+                    Method getBytes_mid =\n+                        ExternalData_cls.getDeclaredMethod(\"getBytes\");\n+                    getBytes_mid.setAccessible(true);\n+                    HexFormat hf = HexFormat.of()\n+                        .withUpperCase()\n+                        .withPrefix(\"\\\\x\");\n+                    for (Object k : theEnvironment.keySet()) {\n+                        if (EUC_JP_TEXT.equals(k.toString())) {\n+                            byte[] ba = (byte[]) getBytes_mid.invoke(k,\n+                                (Object[])null);\n+                            if (!Arrays.equals(euc, ba)) {\n+                                System.err.println(\n+                                    \"ERROR: Variable EUC_JP_TEXT is encoded by:\");\n+                                System.err.println(\"  Actual:   \"\n+                                    + hf.formatHex(ba));\n+                                System.err.println(\"  Expected: \"\n+                                    + hf.formatHex(euc));\n+                            }\n+                            ba = (byte[]) getBytes_mid.invoke(\n+                                theEnvironment.get(k),\n+                                (Object[])null);\n+                            if (!Arrays.equals(euc, ba)) {\n+                                System.err.println(\n+                                    \"ERROR: Value EUC_JP_TEXT is encoded by:\");\n+                                System.err.println(\"  Actual:   \"\n+                                    + hf.formatHex(ba));\n+                                System.err.println(\"  Expected: \"\n+                                    + hf.formatHex(euc));\n+                            }\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    System.err.println(\n+                        \"ERROR: Check ProcessEnvironment class implementation\");\n+                    e.printStackTrace();\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":70,"deletions":35,"binary":false,"changes":105,"status":"modified"}]}