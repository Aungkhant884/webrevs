{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.nio.charset.Charset;\n@@ -55,0 +56,2 @@\n+    private static final String SUN_JNU_ENCODING;\n+    private static final Charset jnuCharset;\n@@ -72,0 +75,2 @@\n+        SUN_JNU_ENCODING = getProperty(props, \"sun.jnu.encoding\");\n+        jnuCharset = Charset.forName(SUN_JNU_ENCODING, Charset.defaultCharset());\n@@ -244,0 +249,25 @@\n+\n+    \/**\n+     * Return the {@code sun.jnu.encoding} system property.\n+     *\n+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+     * in this method. The caller of this method should take care to ensure\n+     * that the returned property is not made accessible to untrusted code.<\/strong>\n+     *\n+     * @return the {@code sun.jnu.encoding} system property\n+     *\/\n+    public static String jnuEncoding() {\n+        return SUN_JNU_ENCODING;\n+    }\n+\n+    \/**\n+     * Return charset for {@code sun.jnu.encoding} system property.\n+     *\n+     * <strong>If {@code sun.jnu.encoding} system property has invalid\n+     * encoding name, {@link Charset#defaultCharset()} is returned.<\/strong>\n+     *\n+     * @return charset for {@code sun.jnu.encoding} system property\n+     *\/\n+    public static Charset jnuCharset() {\n+        return jnuCharset;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import java.nio.charset.Charset;\n@@ -59,0 +60,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -66,0 +68,1 @@\n+    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n@@ -166,1 +169,1 @@\n-            return new Variable(str, str.getBytes());\n+            return new Variable(str, str.getBytes(jnuCharset));\n@@ -175,1 +178,1 @@\n-            return new Variable(new String(bytes), bytes);\n+            return new Variable(new String(bytes, jnuCharset), bytes);\n@@ -199,1 +202,1 @@\n-            return new Value(str, str.getBytes());\n+            return new Value(str, str.getBytes(jnuCharset));\n@@ -208,1 +211,1 @@\n-            return new Value(new String(bytes), bytes);\n+            return new Value(new String(bytes, jnuCharset), bytes);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.nio.charset.Charset;\n@@ -144,0 +145,1 @@\n+    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n@@ -149,1 +151,1 @@\n-        byte[] bytes = s.getBytes();\n+        byte[] bytes = s.getBytes(jnuCharset);\n@@ -173,1 +175,1 @@\n-            args[i] = cmdarray[i+1].getBytes();\n+            args[i] = cmdarray[i+1].getBytes(jnuCharset);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *      8067796 8224905 8263729 8265173 8272600 8231297 8282219\n+ *      8067796 8224905 8263729 8265173 8272600 8231297 8282219 8285517\n@@ -53,0 +53,1 @@\n+import java.nio.charset.Charset;\n@@ -601,1 +602,5 @@\n-            if (new String(tested.getBytes()).equals(tested)) {\n+            String jnuEncoding = System.getProperty(\"sun.jnu.encoding\");\n+            Charset cs = jnuEncoding != null\n+                ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n+                : Charset.defaultCharset();\n+            if (new String(tested.getBytes(cs), cs).equals(tested)) {\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285517\n+ * @summary System.getenv() and argument don't return locale dependent data by JEP400\n+ * @requires (os.family == \"linux\")\n+ * @modules jdk.charsets\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ * @run main i18nEnvArg\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.HexFormat;\n+import java.util.List;\n+import java.util.Map;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class i18nEnvArg {\n+    final static String EUC_JP_TEXT = \"\\u6F22\\u5B57\";\n+\n+    \/*\n+     * Checks OS is Linux and OS has ja_JP.eucjp locale or not.\n+     * Sets EUC_JP's environment variable and argunments against ProcessBuilder\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        List<String> cmds = new ArrayList<>();\n+        cmds.addAll(List.of(\n+            \"--add-modules=\" + System.getProperty(\"test.modules\"),\n+            \"-classpath\",\n+            System.getProperty(\"test.class.path\"),\n+            \"-Dtest.class.path=\" + System.getProperty(\"test.class.path\"),\n+            \"-Dtest.modules=\" + System.getProperty(\"test.modules\")));\n+        if (args.length == 0) {\n+            cmds.addAll(\n+                List.of(\"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n+                        \"i18nEnvArg\",\n+                        \"Start\"));\n+        } else {\n+            String jnuEncoding = System.getProperty(\"sun.jnu.encoding\");\n+            Charset dcs = jnuEncoding != null\n+                ? Charset.forName(jnuEncoding)\n+                : Charset.defaultCharset();\n+            Charset cs = Charset.forName(\"x-euc-jp-linux\");\n+            if (!dcs.equals(cs)) {\n+                return;\n+            }\n+            cmds.addAll(\n+                List.of(\"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n+                        \"i18nEnvArg$Verify\",\n+                        EUC_JP_TEXT));\n+        }\n+        pb = ProcessTools.createTestJvm(cmds);\n+        Map<String, String> environ = pb.environment();\n+        environ.clear();\n+        environ.put(\"LANG\", \"ja_JP.eucjp\");\n+        if (args.length != 0) {\n+            environ.put(EUC_JP_TEXT, EUC_JP_TEXT);\n+        }\n+        ProcessTools.executeProcess(pb)\n+            .outputTo(System.out)\n+            .errorTo(System.err)\n+            .shouldNotContain(\"ERROR:\");\n+    }\n+\n+    public static class Verify {\n+        private final static int maxSize = 4096;\n+        \/*\n+         * Verify environment variable and argument are encoded by Linux's eucjp or not\n+         *\/\n+        public static void main(String[] args) throws Exception {\n+            Charset cs = Charset.forName(\"x-euc-jp-linux\");\n+            byte[] euc = (EUC_JP_TEXT + \"=\" + EUC_JP_TEXT).getBytes(cs);\n+            byte[] eucjp = \"LANG=ja_JP.eucjp\".getBytes(cs);\n+            String s = System.getenv(EUC_JP_TEXT);\n+            if (!EUC_JP_TEXT.equals(s)) {\n+                System.err.println(\"ERROR: getenv() returns unexpected data\");\n+            }\n+            if (!EUC_JP_TEXT.equals(args[0])) {\n+                System.err.print(\"ERROR: Unexpected argument was received: \");\n+                for(char ch : EUC_JP_TEXT.toCharArray()) {\n+                   System.err.printf(\"\\\\u%04X\", (int)ch);\n+                }\n+                System.err.print(\"<->\");\n+                for(char ch : args[0].toCharArray()) {\n+                   System.err.printf(\"\\\\u%04X\", (int)ch);\n+                }\n+                System.err.println();\n+            }\n+            Class<?> cls = Class.forName(\"java.lang.ProcessEnvironment\");\n+            Method environ_mid = cls.getDeclaredMethod(\"environ\");\n+            environ_mid.setAccessible(true);\n+            byte[][] environ = (byte[][]) environ_mid.invoke(null,\n+                (Object[])null);\n+            HexFormat hf = HexFormat.of().withUpperCase().withPrefix(\"\\\\x\");\n+            byte[] ba = new byte[maxSize];\n+            for(int i = 0; i < environ.length; i += 2) {\n+                ByteBuffer bb = ByteBuffer.wrap(ba);\n+                bb.put(environ[i]);\n+                bb.put((byte)'=');\n+                bb.put(environ[i+1]);\n+                byte[] envb = Arrays.copyOf(ba, bb.position());\n+                if (Arrays.equals(eucjp, envb)) continue;\n+                if (!Arrays.equals(euc, envb)) {\n+                    System.err.println(\"ERROR: Unexpected environment variables: \" +\n+                        hf.formatHex(envb));\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}