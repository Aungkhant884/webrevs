{"files":[{"patch":"@@ -59,0 +59,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -60,1 +62,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -68,3 +69,9 @@\n-    private static final Charset nativeCharset =\n-        Charset.forName(StaticProperty.nativeEncoding(),\n-                        Charset.defaultCharset());\n+    private static final Charset jnuCharset;\n+    static {\n+        @SuppressWarnings(\"removal\")\n+        String jnuEncoding = AccessController.doPrivileged((PrivilegedAction<String>) ()\n+            -> System.getProperty(\"sun.jnu.encoding\"));\n+        jnuCharset = jnuEncoding != null\n+            ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n+            : Charset.defaultCharset();\n+    }\n@@ -171,1 +178,1 @@\n-            return new Variable(str, str.getBytes(nativeCharset));\n+            return new Variable(str, str.getBytes(jnuCharset));\n@@ -180,1 +187,1 @@\n-            return new Variable(new String(bytes, nativeCharset), bytes);\n+            return new Variable(new String(bytes, jnuCharset), bytes);\n@@ -204,1 +211,1 @@\n-            return new Value(str, str.getBytes(nativeCharset));\n+            return new Value(str, str.getBytes(jnuCharset));\n@@ -213,1 +220,1 @@\n-            return new Value(new String(bytes, nativeCharset), bytes);\n+            return new Value(new String(bytes, jnuCharset), bytes);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -147,4 +147,6 @@\n-        String jnuEncoding = GetPropertyAction.privilegedGetProperty(\"sun.jnu.encoding\");\n-        jnuCharset = Charset.forName(\n-            jnuEncoding != null ? jnuEncoding : StaticProperty.nativeEncoding(),\n-            Charset.defaultCharset());\n+        @SuppressWarnings(\"removal\")\n+        String jnuEncoding = AccessController.doPrivileged((PrivilegedAction<String>) ()\n+            -> System.getProperty(\"sun.jnu.encoding\"));\n+        jnuCharset = jnuEncoding != null\n+            ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n+            : Charset.defaultCharset();\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -602,3 +602,3 @@\n-            String nativeEncoding = System.getProperty(\"native.encoding\");\n-            Charset cs = nativeEncoding != null ?\n-                Charset.forName(nativeEncoding, Charset.defaultCharset())\n+            String jnuEncoding = System.getProperty(\"sun.jnu.encoding\");\n+            Charset cs = jnuEncoding != null\n+                ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,10 +24,0 @@\n-\/*\n- * @test\n- * @bug 8285517\n- * @summary System.getenv() and argument don't return locale dependent data by JEP400\n- * @requires (os.family == \"linux\")\n- * @library \/test\/lib\n- * @build jdk.test.lib.process.*\n- * @run main i18nEnvArg\n- *\/\n-\n@@ -35,0 +25,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -36,0 +27,1 @@\n+import java.io.PrintStream;\n@@ -49,1 +41,2 @@\n-     * Generates test process which runs with ja_JP.eucjp locale\n+     * Checks OS is Linux and OS has ja_JP.eucjp locale or not.\n+     * Sets EUC_JP's environment variable and argunments against ProcessBuilder\n@@ -52,1 +45,11 @@\n-        var cmds = List.of(\"i18nEnvArg$Start\");\n+        String jnuEncoding = System.getProperty(\"sun.jnu.encoding\");\n+        Charset dcs = jnuEncoding != null\n+            ? Charset.forName(jnuEncoding)\n+            : Charset.defaultCharset();\n+        Charset cs = Charset.forName(\"x-euc-jp-linux\");\n+        if (!dcs.equals(cs)) {\n+            return;\n+        }\n+        var cmds = List.of(\"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n+            \"i18nEnvArg$Verify\",\n+            EUC_JP_TEXT);\n@@ -57,0 +60,1 @@\n+        environ.put(EUC_JP_TEXT, EUC_JP_TEXT);\n@@ -63,39 +67,0 @@\n-    public static class Start {\n-        \/*\n-         * Checks OS is Linux and OS has ja_JP.eucjp locale or not.\n-         * Sets EUC_JP's environment variable and argunments against ProcessBuilder\n-         *\/\n-        public static void main(String[] args) throws Exception {\n-            String nativeEncoding = System.getProperty(\"native.encoding\");\n-            Charset dcs = nativeEncoding == null ?\n-                Charset.defaultCharset() :\n-                Charset.forName(nativeEncoding);\n-            Charset cs = Charset.forName(\"x-euc-jp-linux\");\n-            if (!dcs.equals(cs)) {\n-                return;\n-            }\n-            String javeExe = System.getProperty(\"java.home\") +\n-                File.separator +\n-                \"bin\" +\n-                File.separator +\n-                \"java\";\n-            ProcessBuilder pb = new ProcessBuilder(javeExe,\n-                \"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n-                \"-classpath\",\n-                System.getProperty(\"java.class.path\"),\n-                \"i18nEnvArg$Verify\",\n-                EUC_JP_TEXT);\n-            pb.redirectErrorStream(true);\n-            Map<String, String> environ = pb.environment();\n-            environ.clear();\n-            environ.put(\"LANG\", \"ja_JP.eucjp\");\n-            environ.put(EUC_JP_TEXT, EUC_JP_TEXT);\n-            Process p = pb.start();\n-            InputStream is = p.getInputStream();\n-            byte[] ba = is.readAllBytes();\n-            int rc = p.waitFor();\n-            if (ba.length > 0)\n-                throw new Exception(new String(ba));\n-        }\n-    }\n-\n@@ -112,0 +77,2 @@\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            PrintStream ps = new PrintStream(baos);\n@@ -113,1 +80,1 @@\n-                System.out.println(\"getenv() returns unexpected data\");\n+                ps.println(\"getenv() returns unexpected data\");\n@@ -116,1 +83,1 @@\n-                System.out.print(\"Unexpected argument was received: \");\n+                ps.print(\"Unexpected argument was received: \");\n@@ -118,1 +85,1 @@\n-                   System.out.printf(\"\\\\u%04X\", (int)ch);\n+                   ps.printf(\"\\\\u%04X\", (int)ch);\n@@ -120,1 +87,1 @@\n-                System.out.print(\"<->\");\n+                ps.print(\"<->\");\n@@ -122,1 +89,1 @@\n-                   System.out.printf(\"\\\\u%04X\", (int)ch);\n+                   ps.printf(\"\\\\u%04X\", (int)ch);\n@@ -124,1 +91,1 @@\n-                System.out.println();\n+                ps.println();\n@@ -141,1 +108,1 @@\n-                    System.out.println(\"Unexpected environment variables: \" +\n+                    ps.println(\"Unexpected environment variables: \" +\n@@ -145,0 +112,5 @@\n+            byte[] err = baos.toByteArray();\n+            if (err.length > 0) {\n+                System.err.write(err);\n+                System.exit(1);\n+            }\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":30,"deletions":58,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+#!\/bin\/sh\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# @test i18nEnvArg.sh\n+# @bug 8285517\n+# @summary System.getenv() and argument don't return locale dependent data by JEP400\n+# @requires (os.family == \"linux\")\n+# @modules jdk.charsets\n+# @library \/test\/lib\n+# @build jdk.test.lib.process.*\n+# @build i18nEnvArg\n+# @run shell i18nEnvArg.sh\n+\n+# Verify directory context variables are set\n+if [ \"${TESTJAVA}\" = \"\" ]\n+then\n+  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n+  exit 1\n+fi\n+\n+OS=`uname -s`;\n+ENCODING=`env LANG=ja_JP.encjp LC_ALL=ja_JP.eucjp locale charmap`\n+\n+if [ \"${OS}\" = \"Linux\" -a \"${ENCODING}\" = \"EUC-JP\" ]; then\n+  JAVA=\"$TESTJAVA\/bin\/java ${TESTVMOPTS} --add-modules=${TESTMODULES} \\\n+        -classpath ${TESTCLASSPATH} -Dtest.jdk=${TESTROOT} \\\n+        -Dcompile.jdk=${COMPILEJAVA}\"\n+  env LANG=ja_JP.encjp LC_ALL=ja_JP.eucjp ${JAVA} i18nEnvArg\n+  exit $?\n+fi\n+exit 0\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.sh","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}