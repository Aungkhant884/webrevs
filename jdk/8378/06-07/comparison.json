{"files":[{"patch":"@@ -68,1 +68,0 @@\n-    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n@@ -169,1 +168,1 @@\n-            return new Variable(str, str.getBytes(jnuCharset));\n+            return new Variable(str, str.getBytes(StaticProperty.jnuCharset()));\n@@ -178,1 +177,1 @@\n-            return new Variable(new String(bytes, jnuCharset), bytes);\n+            return new Variable(new String(bytes, StaticProperty.jnuCharset()), bytes);\n@@ -202,1 +201,1 @@\n-            return new Value(str, str.getBytes(jnuCharset));\n+            return new Value(str, str.getBytes(StaticProperty.jnuCharset()));\n@@ -211,1 +210,1 @@\n-            return new Value(new String(bytes, jnuCharset), bytes);\n+            return new Value(new String(bytes, StaticProperty.jnuCharset()), bytes);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -150,1 +150,0 @@\n-    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n@@ -156,1 +155,1 @@\n-        byte[] bytes = s.getBytes(jnuCharset);\n+        byte[] bytes = s.getBytes(StaticProperty.jnuCharset());\n@@ -180,1 +179,1 @@\n-            args[i] = cmdarray[i+1].getBytes(jnuCharset);\n+            args[i] = cmdarray[i+1].getBytes(StaticProperty.jnuCharset());\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -91,1 +93,1 @@\n-            .shouldNotContain(\"ERROR:\");\n+            .shouldHaveExitValue(0);\n@@ -113,49 +115,52 @@\n-            if (!EUC_JP_TEXT.equals(args[0])) {\n-                System.err.println(\"ERROR: argument EUC_JP_TEXT is:\");\n-                System.err.println(\"  Actual:   \" + toReadable(args[0]));\n-                System.err.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n-            }\n-            String s = System.getenv(EUC_JP_TEXT);\n-            if (!EUC_JP_TEXT.equals(s)) {\n-                System.err.println(\"ERROR: getenv(\\\"EUC_JP_TEXT\\\") is:\");\n-                System.err.println(\"  Actual:   \" + toReadable(s));\n-                System.err.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n-            } else {\n-                try {\n-                    Class<?> ProcessEnvironment_cls =\n-                        Class.forName(\"java.lang.ProcessEnvironment\");\n-                    Field theEnvironment_fid =\n-                        ProcessEnvironment_cls.getDeclaredField(\"theEnvironment\");\n-                    theEnvironment_fid.setAccessible(true);\n-                    HashMap theEnvironment =\n-                        (HashMap) theEnvironment_fid.get(null);\n-                    Class<?> ExternalData_cls =\n-                        Class.forName(\"java.lang.ProcessEnvironment$ExternalData\");\n-                    Method getBytes_mid =\n-                        ExternalData_cls.getDeclaredMethod(\"getBytes\");\n-                    getBytes_mid.setAccessible(true);\n-                    HexFormat hf = HexFormat.of()\n-                        .withUpperCase()\n-                        .withPrefix(\"\\\\x\");\n-                    for (Object k : theEnvironment.keySet()) {\n-                        if (EUC_JP_TEXT.equals(k.toString())) {\n-                            byte[] ba = (byte[]) getBytes_mid.invoke(k,\n-                                (Object[])null);\n-                            if (!Arrays.equals(euc, ba)) {\n-                                System.err.println(\n-                                    \"ERROR: Variable EUC_JP_TEXT is encoded by:\");\n-                                System.err.println(\"  Actual:   \"\n-                                    + hf.formatHex(ba));\n-                                System.err.println(\"  Expected: \"\n-                                    + hf.formatHex(euc));\n-                            }\n-                            ba = (byte[]) getBytes_mid.invoke(\n-                                theEnvironment.get(k),\n-                                (Object[])null);\n-                            if (!Arrays.equals(euc, ba)) {\n-                                System.err.println(\n-                                    \"ERROR: Value EUC_JP_TEXT is encoded by:\");\n-                                System.err.println(\"  Actual:   \"\n-                                    + hf.formatHex(ba));\n-                                System.err.println(\"  Expected: \"\n-                                    + hf.formatHex(euc));\n+            try ( ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                PrintStream ps = new PrintStream(baos); ) {\n+                if (!EUC_JP_TEXT.equals(args[0])) {\n+                    ps.println(\"argument EUC_JP_TEXT is:\");\n+                    ps.println(\"  Actual:   \" + toReadable(args[0]));\n+                    ps.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n+                }\n+                String s = System.getenv(EUC_JP_TEXT);\n+                if (!EUC_JP_TEXT.equals(s)) {\n+                    ps.println(\"getenv(\\\"EUC_JP_TEXT\\\") is:\");\n+                    ps.println(\"  Actual:   \" + toReadable(s));\n+                    ps.println(\"  Expected: \" + toReadable(EUC_JP_TEXT));\n+                } else {\n+                    try {\n+                        Class<?> ProcessEnvironment_cls =\n+                            Class.forName(\"java.lang.ProcessEnvironment\");\n+                        Field theEnvironment_fid =\n+                            ProcessEnvironment_cls.getDeclaredField(\"theEnvironment\");\n+                        theEnvironment_fid.setAccessible(true);\n+                        HashMap theEnvironment =\n+                            (HashMap) theEnvironment_fid.get(null);\n+                        Class<?> ExternalData_cls =\n+                            Class.forName(\"java.lang.ProcessEnvironment$ExternalData\");\n+                        Method getBytes_mid =\n+                            ExternalData_cls.getDeclaredMethod(\"getBytes\");\n+                        getBytes_mid.setAccessible(true);\n+                        HexFormat hf = HexFormat.of()\n+                            .withUpperCase()\n+                            .withPrefix(\"\\\\x\");\n+                        for (Object k : theEnvironment.keySet()) {\n+                            if (EUC_JP_TEXT.equals(k.toString())) {\n+                                byte[] ba = (byte[]) getBytes_mid.invoke(k,\n+                                    (Object[])null);\n+                                if (!Arrays.equals(euc, ba)) {\n+                                    ps.println(\n+                                        \"Variable EUC_JP_TEXT is encoded by:\");\n+                                    ps.println(\"  Actual:   \"\n+                                        + hf.formatHex(ba));\n+                                    ps.println(\"  Expected: \"\n+                                        + hf.formatHex(euc));\n+                                }\n+                                ba = (byte[]) getBytes_mid.invoke(\n+                                    theEnvironment.get(k),\n+                                    (Object[])null);\n+                                if (!Arrays.equals(euc, ba)) {\n+                                    ps.println(\n+                                        \"Value EUC_JP_TEXT is encoded by:\");\n+                                    ps.println(\"  Actual:   \"\n+                                        + hf.formatHex(ba));\n+                                    ps.println(\"  Expected: \"\n+                                        + hf.formatHex(euc));\n+                                }\n@@ -164,0 +169,4 @@\n+                    } catch (Exception e) {\n+                        ps.println(\n+                            \"Check ProcessEnvironment class implementation\");\n+                        e.printStackTrace(ps);\n@@ -165,4 +174,5 @@\n-                } catch (Exception e) {\n-                    System.err.println(\n-                        \"ERROR: Check ProcessEnvironment class implementation\");\n-                    e.printStackTrace();\n+                }\n+                byte[] ba = baos.toByteArray();\n+                if (ba.length > 0) {\n+                    System.err.write(ba);\n+                    System.exit(1);\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":64,"deletions":54,"binary":false,"changes":118,"status":"modified"}]}