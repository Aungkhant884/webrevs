{"files":[{"patch":"@@ -68,2 +68,3 @@\n-    static final Charset cs = Charset.forName(StaticProperty.nativeEncoding(),\n-                                              Charset.defaultCharset());\n+    private static final Charset nativeCharset =\n+        Charset.forName(StaticProperty.nativeEncoding(),\n+                        Charset.defaultCharset());\n@@ -170,1 +171,1 @@\n-            return new Variable(str, str.getBytes(cs));\n+            return new Variable(str, str.getBytes(nativeCharset));\n@@ -179,1 +180,1 @@\n-            return new Variable(new String(bytes, cs), bytes);\n+            return new Variable(new String(bytes, nativeCharset), bytes);\n@@ -203,1 +204,1 @@\n-            return new Value(str, str.getBytes(cs));\n+            return new Value(str, str.getBytes(nativeCharset));\n@@ -212,1 +213,1 @@\n-            return new Value(new String(bytes, cs), bytes);\n+            return new Value(new String(bytes, nativeCharset), bytes);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -145,6 +145,2 @@\n-    private static final byte[] helperpath = toCString(StaticProperty.javaHome() + \"\/lib\/jspawnhelper\");\n-    private static Charset jnuCharset = null;\n-\n-    private static Charset jnuCharset() {\n-        if (jnuCharset != null)\n-            return jnuCharset;\n+    private static final Charset jnuCharset;\n+    static {\n@@ -155,1 +151,0 @@\n-        return jnuCharset;\n@@ -157,0 +152,1 @@\n+    private static final byte[] helperpath = toCString(StaticProperty.javaHome() + \"\/lib\/jspawnhelper\");\n@@ -161,1 +157,1 @@\n-        byte[] bytes = s.getBytes(jnuCharset());\n+        byte[] bytes = s.getBytes(jnuCharset);\n@@ -185,1 +181,1 @@\n-            args[i] = cmdarray[i+1].getBytes(jnuCharset());\n+            args[i] = cmdarray[i+1].getBytes(jnuCharset);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *      8067796 8224905 8263729 8265173 8272600 8231297 8282219\n+ *      8067796 8224905 8263729 8265173 8272600 8231297 8282219 8285517\n@@ -603,7 +603,3 @@\n-            String fileEncoding = System.getProperty(\"file.encoding\");\n-            Charset cs;\n-            if (nativeEncoding != null && !nativeEncoding.equals(fileEncoding)) {\n-                cs = Charset.forName(nativeEncoding);\n-            } else {\n-                cs = Charset.defaultCharset();\n-            }\n+            Charset cs = nativeEncoding != null ?\n+                Charset.forName(nativeEncoding, Charset.defaultCharset())\n+                : Charset.defaultCharset();\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ * @requires (os.family == \"linux\")\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n@@ -37,0 +40,2 @@\n+import java.util.HexFormat;\n+import java.util.List;\n@@ -38,1 +43,1 @@\n-import java.util.StringJoiner;\n+import jdk.test.lib.process.ProcessTools;\n@@ -41,7 +46,1 @@\n-    final static String text = \"\\u6F22\\u5B57\";\n-    final static String javeExe = System.getProperty(\"java.home\")\n-        + File.separator\n-        + \"bin\"\n-        + File.separator\n-        + \"java\";\n-    final static int maxSize = 4096;\n+    final static String EUC_JP_TEXT = \"\\u6F22\\u5B57\";\n@@ -49,0 +48,3 @@\n+    \/*\n+     * Generates test process which runs with ja_JP.eucjp locale\n+     *\/\n@@ -50,5 +52,2 @@\n-        ProcessBuilder pb = new ProcessBuilder(javeExe,\n-            \"-classpath\",\n-            System.getProperty(\"java.class.path\"),\n-            \"i18nEnvArg$Start\");\n-        pb.redirectErrorStream(true);\n+        var cmds = List.of(\"i18nEnvArg$Start\");\n+        var pb = ProcessTools.createTestJvm(cmds);\n@@ -58,12 +57,4 @@\n-        Process p = pb.start();\n-        InputStream is = p.getInputStream();\n-        byte[] ba = new byte[maxSize];\n-        ByteBuffer bb = ByteBuffer.wrap(ba);\n-        int ch;\n-        while((ch = is.read()) != -1) {\n-            bb.put((byte)ch);\n-        }\n-        int rc = p.waitFor();\n-        if (bb.position() > 0) {\n-            throw new Exception(new String(ba, 0, bb.position()));\n-        }\n+        ProcessTools.executeProcess(pb)\n+            .outputTo(System.out)\n+            .errorTo(System.err)\n+            .shouldHaveExitValue(0);\n@@ -73,0 +64,4 @@\n+        \/*\n+         * Checks OS is Linux and OS has ja_JP.eucjp locale or not.\n+         * Sets EUC_JP's environment variable and argunments against ProcessBuilder\n+         *\/\n@@ -82,0 +77,5 @@\n+            String javeExe = System.getProperty(\"java.home\") +\n+                File.separator +\n+                \"bin\" +\n+                File.separator +\n+                \"java\";\n@@ -87,1 +87,1 @@\n-                text);\n+                EUC_JP_TEXT);\n@@ -92,1 +92,1 @@\n-            environ.put(text, text);\n+            environ.put(EUC_JP_TEXT, EUC_JP_TEXT);\n@@ -95,6 +95,1 @@\n-            byte[] ba = new byte[maxSize];\n-            ByteBuffer bb = ByteBuffer.wrap(ba);\n-            int ch;\n-            while((ch = is.read()) != -1) {\n-                bb.put((byte)ch);\n-            }\n+            byte[] ba = is.readAllBytes();\n@@ -102,1 +97,2 @@\n-            System.out.write(ba, 0, bb.position());\n+            if (ba.length > 0)\n+                throw new Exception(new String(ba));\n@@ -107,0 +103,4 @@\n+        private final static int maxSize = 4096;\n+        \/*\n+         * Verify environment variable and argument are encoded by Linux's eucjp or not\n+         *\/\n@@ -109,4 +109,5 @@\n-            byte[] kanji = (text + \"=\" + text).getBytes(cs);\n-            String s = System.getenv(text);\n-            if (!text.equals(s)) {\n-                throw new Exception(\"getenv() returns unexpected data\");\n+            byte[] euc = (EUC_JP_TEXT + \"=\" + EUC_JP_TEXT).getBytes(cs);\n+            byte[] eucjp = \"LANG=ja_JP.eucjp\".getBytes(cs);\n+            String s = System.getenv(EUC_JP_TEXT);\n+            if (!EUC_JP_TEXT.equals(s)) {\n+                System.out.println(\"getenv() returns unexpected data\");\n@@ -114,1 +115,1 @@\n-            if (!text.equals(args[0])) {\n+            if (!EUC_JP_TEXT.equals(args[0])) {\n@@ -116,1 +117,1 @@\n-                for(char ch : text.toCharArray()) {\n+                for(char ch : EUC_JP_TEXT.toCharArray()) {\n@@ -126,3 +127,3 @@\n-            Method enviorn_mid = cls.getDeclaredMethod(\"environ\");\n-            enviorn_mid.setAccessible(true);\n-            byte[][] environ = (byte[][]) enviorn_mid.invoke(null,\n+            Method environ_mid = cls.getDeclaredMethod(\"environ\");\n+            environ_mid.setAccessible(true);\n+            byte[][] environ = (byte[][]) environ_mid.invoke(null,\n@@ -130,0 +131,1 @@\n+            HexFormat hf = HexFormat.of().withUpperCase().withPrefix(\"\\\\x\");\n@@ -131,1 +133,0 @@\n-            StringJoiner sj = new StringJoiner(\", \");\n@@ -138,10 +139,4 @@\n-                if (Arrays.equals(kanji, envb)) return;\n-                StringBuilder sb = new StringBuilder();\n-                for(byte b : envb) {\n-                    if (b == 0x5C) {\n-                        sb.append(\"\\\\x5C\");\n-                    } else if (b >= 0x20 && b <= 0x7F) {\n-                        sb.append((char)b);\n-                    } else {\n-                        sb.append(String.format(\"\\\\x%02X\", (int)b & 0xFF));\n-                    }\n+                if (Arrays.equals(eucjp, envb)) continue;\n+                if (!Arrays.equals(euc, envb)) {\n+                    System.out.println(\"Unexpected environment variables: \" +\n+                        hf.formatHex(envb));\n@@ -149,1 +144,0 @@\n-                sj.add(sb.toString());\n@@ -151,2 +145,0 @@\n-            System.out.println(\"Unexpected environment variables: \"\n-                + sj.toString());\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":49,"deletions":57,"binary":false,"changes":106,"status":"modified"}]}