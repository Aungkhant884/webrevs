{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import java.nio.charset.Charset;\n@@ -59,0 +60,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -66,0 +68,2 @@\n+    static final Charset cs = Charset.forName(StaticProperty.nativeEncoding(),\n+                                              Charset.defaultCharset());\n@@ -166,1 +170,1 @@\n-            return new Variable(str, str.getBytes());\n+            return new Variable(str, str.getBytes(cs));\n@@ -175,1 +179,1 @@\n-            return new Variable(new String(bytes), bytes);\n+            return new Variable(new String(bytes, cs), bytes);\n@@ -199,1 +203,1 @@\n-            return new Value(str, str.getBytes());\n+            return new Value(str, str.getBytes(cs));\n@@ -208,1 +212,1 @@\n-            return new Value(new String(bytes), bytes);\n+            return new Value(new String(bytes, cs), bytes);\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.nio.charset.Charset;\n@@ -145,0 +146,11 @@\n+    private static Charset jnuCharset = null;\n+\n+    private static Charset jnuCharset() {\n+        if (jnuCharset != null)\n+            return jnuCharset;\n+        String jnuEncoding = GetPropertyAction.privilegedGetProperty(\"sun.jnu.encoding\");\n+        jnuCharset = Charset.forName(\n+            jnuEncoding != null ? jnuEncoding : StaticProperty.nativeEncoding(),\n+            Charset.defaultCharset());\n+        return jnuCharset;\n+    }\n@@ -149,1 +161,1 @@\n-        byte[] bytes = s.getBytes();\n+        byte[] bytes = s.getBytes(jnuCharset());\n@@ -173,1 +185,1 @@\n-            args[i] = cmdarray[i+1].getBytes();\n+            args[i] = cmdarray[i+1].getBytes(jnuCharset());\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import java.nio.charset.Charset;\n@@ -601,1 +602,9 @@\n-            if (new String(tested.getBytes()).equals(tested)) {\n+            String nativeEncoding = System.getProperty(\"native.encoding\");\n+            String fileEncoding = System.getProperty(\"file.encoding\");\n+            Charset cs;\n+            if (nativeEncoding != null && !nativeEncoding.equals(fileEncoding)) {\n+                cs = Charset.forName(nativeEncoding);\n+            } else {\n+                cs = Charset.defaultCharset();\n+            }\n+            if (new String(tested.getBytes(cs), cs).equals(tested)) {\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285517\n+ * @summary System.getenv() and argument don't return locale dependent data by JEP400\n+ * @run main i18nEnvArg\n+ *\/\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+public class i18nEnvArg {\n+    final static String text = \"\\u6F22\\u5B57\";\n+    final static String javeExe = System.getProperty(\"java.home\")\n+        + File.separator\n+        + \"bin\"\n+        + File.separator\n+        + \"java\";\n+    final static int maxSize = 4096;\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = new ProcessBuilder(javeExe,\n+            \"-classpath\",\n+            System.getProperty(\"java.class.path\"),\n+            \"i18nEnvArg$Start\");\n+        pb.redirectErrorStream(true);\n+        Map<String, String> environ = pb.environment();\n+        environ.clear();\n+        environ.put(\"LANG\", \"ja_JP.eucjp\");\n+        Process p = pb.start();\n+        InputStream is = p.getInputStream();\n+        byte[] ba = new byte[maxSize];\n+        ByteBuffer bb = ByteBuffer.wrap(ba);\n+        int ch;\n+        while((ch = is.read()) != -1) {\n+            bb.put((byte)ch);\n+        }\n+        int rc = p.waitFor();\n+        if (bb.position() > 0) {\n+            throw new Exception(new String(ba, 0, bb.position()));\n+        }\n+    }\n+\n+    public static class Start {\n+        public static void main(String[] args) throws Exception {\n+            String nativeEncoding = System.getProperty(\"native.encoding\");\n+            Charset dcs = nativeEncoding == null ?\n+                Charset.defaultCharset() :\n+                Charset.forName(nativeEncoding);\n+            Charset cs = Charset.forName(\"x-euc-jp-linux\");\n+            if (!dcs.equals(cs)) {\n+                return;\n+            }\n+            ProcessBuilder pb = new ProcessBuilder(javeExe,\n+                \"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n+                \"-classpath\",\n+                System.getProperty(\"java.class.path\"),\n+                \"i18nEnvArg$Verify\",\n+                text);\n+            pb.redirectErrorStream(true);\n+            Map<String, String> environ = pb.environment();\n+            environ.clear();\n+            environ.put(\"LANG\", \"ja_JP.eucjp\");\n+            environ.put(text, text);\n+            Process p = pb.start();\n+            InputStream is = p.getInputStream();\n+            byte[] ba = new byte[maxSize];\n+            ByteBuffer bb = ByteBuffer.wrap(ba);\n+            int ch;\n+            while((ch = is.read()) != -1) {\n+                bb.put((byte)ch);\n+            }\n+            int rc = p.waitFor();\n+            System.out.write(ba, 0, bb.position());\n+        }\n+    }\n+\n+    public static class Verify {\n+        public static void main(String[] args) throws Exception {\n+            Charset cs = Charset.forName(\"x-euc-jp-linux\");\n+            byte[] kanji = (text + \"=\" + text).getBytes(cs);\n+            String s = System.getenv(text);\n+            if (!text.equals(s)) {\n+                throw new Exception(\"getenv() returns unexpected data\");\n+            }\n+            if (!text.equals(args[0])) {\n+                System.out.print(\"Unexpected argument was received: \");\n+                for(char ch : text.toCharArray()) {\n+                   System.out.printf(\"\\\\u%04X\", (int)ch);\n+                }\n+                System.out.print(\"<->\");\n+                for(char ch : args[0].toCharArray()) {\n+                   System.out.printf(\"\\\\u%04X\", (int)ch);\n+                }\n+                System.out.println();\n+            }\n+            Class<?> cls = Class.forName(\"java.lang.ProcessEnvironment\");\n+            Method enviorn_mid = cls.getDeclaredMethod(\"environ\");\n+            enviorn_mid.setAccessible(true);\n+            byte[][] environ = (byte[][]) enviorn_mid.invoke(null,\n+                (Object[])null);\n+            byte[] ba = new byte[maxSize];\n+            StringJoiner sj = new StringJoiner(\", \");\n+            for(int i = 0; i < environ.length; i += 2) {\n+                ByteBuffer bb = ByteBuffer.wrap(ba);\n+                bb.put(environ[i]);\n+                bb.put((byte)'=');\n+                bb.put(environ[i+1]);\n+                byte[] envb = Arrays.copyOf(ba, bb.position());\n+                if (Arrays.equals(kanji, envb)) return;\n+                StringBuilder sb = new StringBuilder();\n+                for(byte b : envb) {\n+                    if (b == 0x5C) {\n+                        sb.append(\"\\\\x5C\");\n+                    } else if (b >= 0x20 && b <= 0x7F) {\n+                        sb.append((char)b);\n+                    } else {\n+                        sb.append(String.format(\"\\\\x%02X\", (int)b & 0xFF));\n+                    }\n+                }\n+                sj.add(sb.toString());\n+            }\n+            System.out.println(\"Unexpected environment variables: \"\n+                + sj.toString());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"}]}