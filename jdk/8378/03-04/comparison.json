{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.nio.charset.Charset;\n@@ -55,0 +56,2 @@\n+    private static final String SUN_JNU_ENCODING;\n+    private static final Charset jnuCharset;\n@@ -72,0 +75,2 @@\n+        SUN_JNU_ENCODING = getProperty(props, \"sun.jnu.encoding\");\n+        jnuCharset = Charset.forName(SUN_JNU_ENCODING, Charset.defaultCharset());\n@@ -244,0 +249,25 @@\n+\n+    \/**\n+     * Return the {@code sun.jnu.encoding} system property.\n+     *\n+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+     * in this method. The caller of this method should take care to ensure\n+     * that the returned property is not made accessible to untrusted code.<\/strong>\n+     *\n+     * @return the {@code sun.jnu.encoding} system property\n+     *\/\n+    public static String jnuEncoding() {\n+        return SUN_JNU_ENCODING;\n+    }\n+\n+    \/**\n+     * Return charset for {@code sun.jnu.encoding} system property.\n+     *\n+     * <strong>If {@code sun.jnu.encoding} system property has invalid\n+     * encoding name, {@link Charset#defaultCharset()} is returned.<\/strong>\n+     *\n+     * @return charset for {@code sun.jnu.encoding} system property\n+     *\/\n+    public static Charset jnuCharset() {\n+        return jnuCharset;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -62,0 +60,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -69,9 +68,1 @@\n-    private static final Charset jnuCharset;\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        String jnuEncoding = AccessController.doPrivileged((PrivilegedAction<String>) ()\n-            -> System.getProperty(\"sun.jnu.encoding\"));\n-        jnuCharset = jnuEncoding != null\n-            ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n-            : Charset.defaultCharset();\n-    }\n+    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -145,9 +145,1 @@\n-    private static final Charset jnuCharset;\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        String jnuEncoding = AccessController.doPrivileged((PrivilegedAction<String>) ()\n-            -> System.getProperty(\"sun.jnu.encoding\"));\n-        jnuCharset = jnuEncoding != null\n-            ? Charset.forName(jnuEncoding, Charset.defaultCharset())\n-            : Charset.defaultCharset();\n-    }\n+    private static final Charset jnuCharset = StaticProperty.jnuCharset();\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-import java.io.File;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.PrintStream;\n@@ -43,0 +39,1 @@\n+import java.util.ArrayList;\n@@ -57,0 +54,7 @@\n+        List<String> cmds = new ArrayList<>();\n+        cmds.addAll(List.of(\n+            \"--add-modules=\" + System.getProperty(\"test.modules\"),\n+            \"-classpath\",\n+            System.getProperty(\"test.class.path\"),\n+            \"-Dtest.class.path=\" + System.getProperty(\"test.class.path\"),\n+            \"-Dtest.modules=\" + System.getProperty(\"test.modules\")));\n@@ -58,13 +62,4 @@\n-            var cmds = List.of(\n-                \"--add-modules=\" + System.getProperty(\"test.modules\"),\n-                \"-classpath\",\n-                System.getProperty(\"test.class.path\"),\n-                \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n-                \"-Dtest.class.path=\" + System.getProperty(\"test.class.path\"),\n-                \"-Dtest.modules=\" + System.getProperty(\"test.modules\"),\n-                \"i18nEnvArg\",\n-                \"Start\");\n-            pb = ProcessTools.createTestJvm(cmds);\n-            Map<String, String> environ = pb.environment();\n-            environ.clear();\n-            environ.put(\"LANG\", \"ja_JP.eucjp\");\n+            cmds.addAll(\n+                List.of(\"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n+                        \"i18nEnvArg\",\n+                        \"Start\"));\n@@ -80,11 +75,10 @@\n-            var cmds = List.of(\n-                \"--add-modules=\" + System.getProperty(\"test.modules\"),\n-                \"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n-                \"-classpath\",\n-                System.getProperty(\"test.class.path\"),\n-                \"i18nEnvArg$Verify\",\n-                EUC_JP_TEXT);\n-            pb = ProcessTools.createTestJvm(cmds);\n-            Map<String, String> environ = pb.environment();\n-            environ.clear();\n-            environ.put(\"LANG\", \"ja_JP.eucjp\");\n+            cmds.addAll(\n+                List.of(\"--add-opens=java.base\/java.lang=ALL-UNNAMED\",\n+                        \"i18nEnvArg$Verify\",\n+                        EUC_JP_TEXT));\n+        }\n+        pb = ProcessTools.createTestJvm(cmds);\n+        Map<String, String> environ = pb.environment();\n+        environ.clear();\n+        environ.put(\"LANG\", \"ja_JP.eucjp\");\n+        if (args.length != 0) {\n@@ -96,1 +90,1 @@\n-            .shouldHaveExitValue(0);\n+            .shouldNotContain(\"ERROR:\");\n@@ -109,2 +103,0 @@\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            PrintStream ps = new PrintStream(baos);\n@@ -112,1 +104,1 @@\n-                ps.println(\"getenv() returns unexpected data\");\n+                System.err.println(\"ERROR: getenv() returns unexpected data\");\n@@ -115,1 +107,1 @@\n-                ps.print(\"Unexpected argument was received: \");\n+                System.err.print(\"ERROR: Unexpected argument was received: \");\n@@ -117,1 +109,1 @@\n-                   ps.printf(\"\\\\u%04X\", (int)ch);\n+                   System.err.printf(\"\\\\u%04X\", (int)ch);\n@@ -119,1 +111,1 @@\n-                ps.print(\"<->\");\n+                System.err.print(\"<->\");\n@@ -121,1 +113,1 @@\n-                   ps.printf(\"\\\\u%04X\", (int)ch);\n+                   System.err.printf(\"\\\\u%04X\", (int)ch);\n@@ -123,1 +115,1 @@\n-                ps.println();\n+                System.err.println();\n@@ -140,1 +132,1 @@\n-                    ps.println(\"Unexpected environment variables: \" +\n+                    System.err.println(\"ERROR: Unexpected environment variables: \" +\n@@ -144,5 +136,0 @@\n-            byte[] err = baos.toByteArray();\n-            if (err.length > 0) {\n-                System.err.write(err);\n-                System.exit(1);\n-            }\n","filename":"test\/jdk\/java\/lang\/System\/i18nEnvArg.java","additions":30,"deletions":43,"binary":false,"changes":73,"status":"modified"}]}