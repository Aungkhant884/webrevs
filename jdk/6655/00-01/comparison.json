{"files":[{"patch":"@@ -419,1 +419,1 @@\n-            case \"name\":\n+            case \"name\"->\n@@ -421,2 +421,1 @@\n-                break;\n-            case \"library\":\n+            case \"library\"->\n@@ -424,2 +423,1 @@\n-                break;\n-            case \"description\":\n+            case \"description\"->\n@@ -427,2 +425,1 @@\n-                break;\n-            case \"slot\":\n+            case \"slot\"->\n@@ -430,2 +427,1 @@\n-                break;\n-            case \"slotListIndex\":\n+            case \"slotListIndex\"->\n@@ -433,2 +429,1 @@\n-                break;\n-            case \"enabledMechanisms\":\n+            case \"enabledMechanisms\"->\n@@ -436,2 +431,1 @@\n-                break;\n-            case \"disabledMechanisms\":\n+            case \"disabledMechanisms\"->\n@@ -439,2 +433,1 @@\n-                break;\n-            case \"attributes\":\n+            case \"attributes\"->\n@@ -442,2 +435,1 @@\n-                break;\n-            case \"handleStartupErrors\":\n+            case \"handleStartupErrors\"->\n@@ -445,2 +437,1 @@\n-                break;\n-            case \"insertionCheckInterval\":\n+            case \"insertionCheckInterval\"-> {\n@@ -451,2 +442,2 @@\n-                break;\n-            case \"cleaner.shortInterval\":\n+            }\n+            case \"cleaner.shortInterval\"-> {\n@@ -457,2 +448,2 @@\n-                break;\n-            case \"cleaner.longInterval\":\n+            }\n+            case \"cleaner.longInterval\"-> {\n@@ -463,2 +454,2 @@\n-                break;\n-            case \"destroyTokenAfterLogout\":\n+            }\n+            case \"destroyTokenAfterLogout\"->\n@@ -466,2 +457,1 @@\n-                break;\n-            case \"showInfo\":\n+            case \"showInfo\"->\n@@ -469,2 +459,1 @@\n-                break;\n-            case \"keyStoreCompatibilityMode\":\n+            case \"keyStoreCompatibilityMode\"->\n@@ -472,2 +461,1 @@\n-                break;\n-            case \"explicitCancel\":\n+            case \"explicitCancel\"->\n@@ -475,2 +463,1 @@\n-                break;\n-            case \"omitInitialize\":\n+            case \"omitInitialize\"->\n@@ -478,2 +465,1 @@\n-                break;\n-            case \"allowSingleThreadedModules\":\n+            case \"allowSingleThreadedModules\"->\n@@ -481,2 +467,1 @@\n-                break;\n-            case \"functionList\":\n+            case \"functionList\"->\n@@ -484,2 +469,1 @@\n-                break;\n-            case \"nssUseSecmod\":\n+            case \"nssUseSecmod\"->\n@@ -487,2 +471,1 @@\n-                break;\n-            case \"nssLibraryDirectory\":\n+            case \"nssLibraryDirectory\"-> {\n@@ -491,2 +474,2 @@\n-                break;\n-            case \"nssSecmodDirectory\":\n+            }\n+            case \"nssSecmodDirectory\"-> {\n@@ -495,2 +478,2 @@\n-                break;\n-            case \"nssModule\":\n+            }\n+            case \"nssModule\"-> {\n@@ -499,2 +482,2 @@\n-                break;\n-            case \"nssDbMode\":\n+            }\n+            case \"nssDbMode\"-> {\n@@ -512,2 +495,2 @@\n-                break;\n-            case \"nssNetscapeDbWorkaround\":\n+            }\n+            case \"nssNetscapeDbWorkaround\"-> {\n@@ -516,2 +499,2 @@\n-                break;\n-            case \"nssArgs\":\n+            }\n+            case \"nssArgs\"->\n@@ -519,2 +502,1 @@\n-                break;\n-            case \"nssUseSecmodTrust\":\n+            case \"nssUseSecmodTrust\"->\n@@ -522,2 +504,1 @@\n-                break;\n-            case \"useEcX963Encoding\":\n+            case \"useEcX963Encoding\"->\n@@ -525,2 +506,1 @@\n-                break;\n-            case \"nssOptimizeSpace\":\n+            case \"nssOptimizeSpace\"->\n@@ -528,2 +508,1 @@\n-                break;\n-            default:\n+            default->\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/Config.java","additions":38,"deletions":59,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -405,13 +405,2 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = (encrypt? CKF_ENCRYPT : CKF_DECRYPT);\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+        if (!P11Util.trySessionCancel(token, session,\n+                (encrypt ? CKF_ENCRYPT : CKF_DECRYPT))) {\n@@ -475,1 +464,1 @@\n-        byte[] aad = (aadBuffer.size() > 0? aadBuffer.toByteArray() : null);\n+        byte[] aad = (aadBuffer.size() > 0 ? aadBuffer.toByteArray() : null);\n@@ -529,1 +518,1 @@\n-        return (result > 0? result : 0);\n+        return (result > 0 ? result : 0);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -448,13 +448,3 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = (encrypt? CKF_ENCRYPT : CKF_DECRYPT);\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+\n+        if (!P11Util.trySessionCancel(token, session,\n+                (encrypt ? CKF_ENCRYPT : CKF_DECRYPT))) {\n@@ -509,1 +499,1 @@\n-            CK_MECHANISM mechParams = (blockMode == MODE_CTR?\n+            CK_MECHANISM mechParams = (blockMode == MODE_CTR ?\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            fixedKeySize = (index == -1? -1 :\n+            fixedKeySize = (index == -1 ? -1 :\n@@ -183,1 +183,1 @@\n-        byte[] iv = (this.iv == null? type.defIv : this.iv);\n+        byte[] iv = (this.iv == null ? type.defIv : this.iv);\n@@ -216,1 +216,1 @@\n-        byte[] ivValue = (params == null? null :\n+        byte[] ivValue = (params == null ? null :\n@@ -290,14 +290,2 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = (opmode == Cipher.ENCRYPT_MODE? CKF_ENCRYPT :\n-                    CKF_DECRYPT);\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+        if (!P11Util.trySessionCancel(token, session,\n+                (opmode == Cipher.ENCRYPT_MODE ? CKF_ENCRYPT : CKF_DECRYPT))) {\n@@ -403,1 +391,1 @@\n-        return (result > 0? result : 0);\n+        return (result > 0 ? result : 0);\n@@ -678,1 +666,1 @@\n-                tbwP11Key = (tbwKey instanceof SecretKey?\n+                tbwP11Key = (tbwKey instanceof SecretKey ?\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":7,"deletions":19,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -150,12 +150,2 @@\n-        if (token.p11.getVersion().major == 3) {\n-            try {\n-                token.p11.C_SessionCancel(session.id(), CKF_SIGN);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+\n+        if (!P11Util.trySessionCancel(token, session, CKF_SIGN)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-        this.mdAlg = (idx == -1?\n+        this.mdAlg = (idx == -1 ?\n@@ -196,1 +196,1 @@\n-            this.md = (this.mdAlg == null? null :\n+            this.md = (this.mdAlg == null ? null :\n@@ -272,0 +272,1 @@\n+\n@@ -274,14 +275,2 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = (mode == M_SIGN? CKF_SIGN : CKF_VERIFY);\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-                if (DEBUG) System.out.println(\" by C_SessionCancel\");\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+        if (!P11Util.trySessionCancel(token, session,\n+                (mode == M_SIGN ? CKF_SIGN : CKF_VERIFY))) {\n@@ -289,0 +278,2 @@\n+        } else {\n+            if (DEBUG) System.out.println(\" by C_SessionCancel\");\n@@ -302,1 +293,1 @@\n-                        (md == null? new byte[0] : md.digest());\n+                        (md == null ? new byte[0] : md.digest());\n@@ -314,1 +305,1 @@\n-                        (md == null? new byte[0] : md.digest());\n+                        (md == null ? new byte[0] : md.digest());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -271,19 +271,7 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = switch(mode) {\n-                case MODE_ENCRYPT -> CKF_ENCRYPT;\n-                case MODE_DECRYPT -> CKF_DECRYPT;\n-                case MODE_SIGN -> CKF_SIGN;\n-                case MODE_VERIFY -> CKF_VERIFY;\n-                default -> {\n-                    throw new AssertionError(\"Unexpected value: \" + mode);\n-                }\n-            };\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n+        long flags = switch(mode) {\n+            case MODE_ENCRYPT -> CKF_ENCRYPT;\n+            case MODE_DECRYPT -> CKF_DECRYPT;\n+            case MODE_SIGN -> CKF_SIGN;\n+            case MODE_VERIFY -> CKF_VERIFY;\n+            default -> {\n+                throw new AssertionError(\"Unexpected value: \" + mode);\n@@ -291,1 +279,2 @@\n-        } else {\n+        };\n+        if (!P11Util.trySessionCancel(token, session, flags)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSACipher.java","additions":9,"deletions":20,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -284,13 +284,2 @@\n-        if (token.p11.getVersion().major == 3) {\n-            long flags = (mode == M_SIGN? CKF_SIGN : CKF_VERIFY);\n-            try {\n-                token.p11.C_SessionCancel(session.id(), flags);\n-            } catch (PKCS11Exception e) {\n-                \/\/ try only if CKR_OPERATION_CANCEL_FAILED?\n-                if (e.match(CKR_OPERATION_CANCEL_FAILED)) {\n-                    tryFinishingOff();\n-                } else {\n-                    throw new ProviderException(\"cancel failed\", e);\n-                }\n-            }\n-        } else {\n+        if (!P11Util.trySessionCancel(token, session,\n+                (mode == M_SIGN ? CKF_SIGN : CKF_VERIFY))) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import sun.security.pkcs11.wrapper.PKCS11Exception;\n+import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.*;\n+\n@@ -190,0 +193,19 @@\n+    \/\/ returns true if successfully cancelled\n+    static boolean trySessionCancel(Token token, Session session, long flags)\n+            throws ProviderException {\n+        boolean status = false;\n+        if (token.p11.getVersion().major == 3) {\n+            try {\n+                token.p11.C_SessionCancel(session.id(), flags);\n+                status = true;\n+            } catch (PKCS11Exception e) {\n+                \/\/ return false for CKR_OPERATION_CANCEL_FAILED, so callers\n+                \/\/ can cancel in the pre v3.0 way, i.e. by finishing off the\n+                \/\/ current operation\n+                if (!e.match(CKR_OPERATION_CANCEL_FAILED)) {\n+                    throw new ProviderException(\"cancel failed\", e);\n+                }\n+            }\n+        }\n+        return status;\n+    }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Util.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}