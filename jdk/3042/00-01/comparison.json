{"files":[{"patch":"@@ -547,10 +547,0 @@\n-\n-  \/\/ Try to randomize the cache line index of hot stack frames.\n-  \/\/ This helps when threads of the same stack traces evict each other's\n-  \/\/ cache lines. The threads can be either from the same JVM instance, or\n-  \/\/ from different JVM instances. The benefit is especially true for\n-  \/\/ processors with hyperthreading technology.\n-  static int counter = 0;\n-  int pid = os::current_process_id();\n-  alloca(((pid ^ counter++) & 7) * 128);\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+#ifndef __GLIBC__\n@@ -666,0 +667,2 @@\n+  \/\/ This code is not needed anymore in glibc because it has MULTI_PAGE_ALIASING\n+  \/\/ and we did not see any degradation in performance without `alloca()`.\n@@ -668,4 +671,3 @@\n-PRAGMA_DIAG_PUSH\n-PRAGMA_UNUSED_RESULT_IGNORED\n-  alloca(((pid ^ counter++) & 7) * 128);\n-PRAGMA_DIAG_POP\n+  void *stackmem = alloca(((pid ^ counter++) & 7) * 128);\n+  *(char *)stackmem = 1;\n+#endif\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -522,10 +522,0 @@\n-\n-  \/\/ Try to randomize the cache line index of hot stack frames.\n-  \/\/ This helps when threads of the same stack traces evict each other's\n-  \/\/ cache lines. The threads can be either from the same JVM instance, or\n-  \/\/ from different JVM instances. The benefit is especially true for\n-  \/\/ processors with hyperthreading technology.\n-  static int counter = 0;\n-  int pid = os::current_process_id();\n-  _alloca(((pid ^ counter++) & 7) * 128);\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,4 +69,0 @@\n-#ifndef PRAGMA_UNUSED_RESULT_IGNORED\n-#define PRAGMA_UNUSED_RESULT_IGNORED\n-#endif\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,0 @@\n-#define PRAGMA_UNUSED_RESULT_IGNORED PRAGMA_DISABLE_GCC_WARNING(\"-Wunused-result\")\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}