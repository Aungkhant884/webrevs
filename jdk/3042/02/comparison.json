{"files":[{"patch":"@@ -547,10 +547,0 @@\n-\n-  \/\/ Try to randomize the cache line index of hot stack frames.\n-  \/\/ This helps when threads of the same stack traces evict each other's\n-  \/\/ cache lines. The threads can be either from the same JVM instance, or\n-  \/\/ from different JVM instances. The benefit is especially true for\n-  \/\/ processors with hyperthreading technology.\n-  static int counter = 0;\n-  int pid = os::current_process_id();\n-  alloca(((pid ^ counter++) & 7) * 128);\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+#ifndef __GLIBC__\n@@ -666,0 +667,2 @@\n+  \/\/ This code is not needed anymore in glibc because it has MULTI_PAGE_ALIASING\n+  \/\/ and we did not see any degradation in performance without `alloca()`.\n@@ -668,1 +671,4 @@\n-  alloca(((pid ^ counter++) & 7) * 128);\n+  void *stackmem = alloca(((pid ^ counter++) & 7) * 128);\n+  \/\/ Ensure the alloca result is used in a way that prevents the compiler from eliding it.\n+  *(char *)stackmem = 1;\n+#endif\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -522,10 +522,0 @@\n-\n-  \/\/ Try to randomize the cache line index of hot stack frames.\n-  \/\/ This helps when threads of the same stack traces evict each other's\n-  \/\/ cache lines. The threads can be either from the same JVM instance, or\n-  \/\/ from different JVM instances. The benefit is especially true for\n-  \/\/ processors with hyperthreading technology.\n-  static int counter = 0;\n-  int pid = os::current_process_id();\n-  _alloca(((pid ^ counter++) & 7) * 128);\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}