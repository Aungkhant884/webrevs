{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,7 +46,0 @@\n-#ifdef STATIC_BUILD\n-extern void Java_sun_xawt_motif_XsessionWMcommand(JNIEnv *env, jobject this,\n-jobject frame, jstring jcommand);\n-\n-extern void Java_sun_xawt_motif_XsessionWMcommand_New(JNIEnv *env, jobjectArray jarray);\n-#endif\n-\n@@ -196,72 +189,0 @@\n-\n-\/*\n- * This entry point must remain in libawt.so as part of a contract\n- * with the CDE variant of Java Media Framework. (sdtjmplay)\n- * Reflect this call over to the correct libawt_<toolkit>.so.\n- *\/\n-JNIEXPORT void JNICALL\n-Java_sun_awt_motif_XsessionWMcommand(JNIEnv *env, jobject this,\n-                                     jobject frame, jstring jcommand)\n-{\n-    \/* type of the old backdoor function *\/\n-    typedef void JNICALL\n-        XsessionWMcommand_type(JNIEnv *env, jobject this,\n-                               jobject frame, jstring jcommand);\n-\n-    static XsessionWMcommand_type *XsessionWMcommand = NULL;\n-#ifndef STATIC_BUILD\n-    if (XsessionWMcommand == NULL && awtHandle == NULL) {\n-        return;\n-    }\n-\n-    XsessionWMcommand = (XsessionWMcommand_type *)\n-        dlsym(awtHandle, \"Java_sun_awt_motif_XsessionWMcommand\");\n-#else\n-    XsessionWMcommand = (XsessionWMcommand_type *)Java_sun_xawt_motif_XsessionWMcommand;\n-#endif\n-    if (XsessionWMcommand == NULL)\n-        return;\n-\n-    (*XsessionWMcommand)(env, this, frame, jcommand);\n-}\n-\n-\n-\/*\n- * This entry point must remain in libawt.so as part of a contract\n- * with the CDE variant of Java Media Framework. (sdtjmplay)\n- * Reflect this call over to the correct libawt_<toolkit>.so.\n- *\/\n-JNIEXPORT void JNICALL\n-Java_sun_awt_motif_XsessionWMcommand_New(JNIEnv *env, jobjectArray jargv)\n-{\n-    typedef void JNICALL\n-        XsessionWMcommand_New_type(JNIEnv *env, jobjectArray jargv);\n-\n-    static XsessionWMcommand_New_type *XsessionWMcommand = NULL;\n-#ifndef STATIC_BUILD\n-    if (XsessionWMcommand == NULL && awtHandle == NULL) {\n-        return;\n-    }\n-\n-    XsessionWMcommand = (XsessionWMcommand_New_type *)\n-        dlsym(awtHandle, \"Java_sun_awt_motif_XsessionWMcommand_New\");\n-#else\n-    XsessionWMcommand = (XsessionWMcommand_New_type *)Java_sun_xawt_motif_XsessionWMcommand_New;\n-#endif\n-\n-    if (XsessionWMcommand == NULL)\n-        return;\n-\n-    (*XsessionWMcommand)(env, jargv);\n-}\n-\n-#ifdef STATIC_BUILD\n-__attribute__((weak)) void Java_sun_xawt_motif_XsessionWMcommand_New(JNIEnv *env, jobjectArray jarray)\n-{\n-}\n-\n-__attribute__((weak)) void Java_sun_xawt_motif_XsessionWMcommand(JNIEnv *env, jobject this,\n-        jobject frame, jstring jcommand)\n-{\n-}\n-#endif\n","filename":"src\/java.desktop\/unix\/native\/libawt\/awt\/awt_LoadLibrary.c","additions":1,"deletions":80,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,7 +40,0 @@\n-#ifndef STATIC_BUILD\n-\/\/ The same function exists in libawt.a::awt_LoadLibrary.c\n-JNIEXPORT jboolean JNICALL AWTIsHeadless() {\n-    return JNI_TRUE;\n-}\n-#endif\n-\n","filename":"src\/java.desktop\/unix\/native\/libawt_headless\/awt\/HeadlessToolkit.c","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,7 +306,0 @@\n-#ifndef STATIC_BUILD\n-\/\/ The same function exists in libawt.a::awt_LoadLibrary.c\n-JNIEXPORT jboolean JNICALL AWTIsHeadless() {\n-    return JNI_FALSE;\n-}\n-#endif\n-\n@@ -803,124 +796,0 @@\n-\/*\n- * Old, compatibility, backdoor for DT.  This is a different\n- * implementation.  It keeps the signature, but acts on\n- * awt_root_shell, not the frame passed as an argument.  Note, that\n- * the code that uses the old backdoor doesn't work correctly with\n- * gnome session proxy that checks for WM_COMMAND when the window is\n- * firts mapped, because DT code calls this old backdoor *after* the\n- * frame is shown or it would get NPE with old AWT (previous\n- * implementation of this backdoor) otherwise.  Old style session\n- * managers (e.g. CDE) that check WM_COMMAND only during session\n- * checkpoint should work fine, though.\n- *\n- * NB: The function name looks deceptively like a JNI native method\n- * name.  It's not!  It's just a plain function.\n- *\/\n-\n-JNIEXPORT void JNICALL\n-#ifdef STATIC_BUILD\n-Java_sun_xawt_motif_XsessionWMcommand(JNIEnv *env, jobject this,\n-    jobject frame, jstring jcommand)\n-#else\n-Java_sun_awt_motif_XsessionWMcommand(JNIEnv *env, jobject this,\n-        jobject frame, jstring jcommand)\n-#endif\n-{\n-    const char *command;\n-    XTextProperty text_prop;\n-    char *c[1];\n-    int32_t status;\n-    Window xawt_root_window;\n-\n-    AWT_LOCK();\n-    xawt_root_window = get_xawt_root_shell(env);\n-\n-    if ( xawt_root_window == None ) {\n-        AWT_UNLOCK();\n-        JNU_ThrowNullPointerException(env, \"AWT root shell is unrealized\");\n-        return;\n-    }\n-\n-    command = (char *) JNU_GetStringPlatformChars(env, jcommand, NULL);\n-    if (command != NULL) {\n-        c[0] = (char *)command;\n-        status = XmbTextListToTextProperty(awt_display, c, 1,\n-                                           XStdICCTextStyle, &text_prop);\n-\n-        if (status == Success || status > 0) {\n-            XSetTextProperty(awt_display, xawt_root_window,\n-                             &text_prop, XA_WM_COMMAND);\n-            if (text_prop.value != NULL)\n-                XFree(text_prop.value);\n-        }\n-        JNU_ReleaseStringPlatformChars(env, jcommand, command);\n-    }\n-    AWT_UNLOCK();\n-}\n-\n-\n-\/*\n- * New DT backdoor to set WM_COMMAND.  New code should use this\n- * backdoor and call it *before* the first frame is shown so that\n- * gnome session proxy can correctly handle it.\n- *\n- * NB: The function name looks deceptively like a JNI native method\n- * name.  It's not!  It's just a plain function.\n- *\/\n-JNIEXPORT void JNICALL\n-#ifdef STATIC_BUILD\n-Java_sun_xawt_motif_XsessionWMcommand_New(JNIEnv *env, jobjectArray jarray)\n-#else\n-Java_sun_awt_motif_XsessionWMcommand_New(JNIEnv *env, jobjectArray jarray)\n-#endif\n-{\n-    jsize length;\n-    char ** array;\n-    XTextProperty text_prop;\n-    int status;\n-    Window xawt_root_window;\n-\n-    AWT_LOCK();\n-    xawt_root_window = get_xawt_root_shell(env);\n-\n-    if (xawt_root_window == None) {\n-      AWT_UNLOCK();\n-      JNU_ThrowNullPointerException(env, \"AWT root shell is unrealized\");\n-      return;\n-    }\n-\n-    array = stringArrayToNative(env, jarray, &length);\n-\n-    if (array != NULL) {\n-        status = XmbTextListToTextProperty(awt_display, array, length,\n-                                           XStdICCTextStyle, &text_prop);\n-        if (status < 0) {\n-            switch (status) {\n-            case XNoMemory:\n-                JNU_ThrowOutOfMemoryError(env,\n-                    \"XmbTextListToTextProperty: XNoMemory\");\n-                break;\n-            case XLocaleNotSupported:\n-                JNU_ThrowInternalError(env,\n-                    \"XmbTextListToTextProperty: XLocaleNotSupported\");\n-                break;\n-            case XConverterNotFound:\n-                JNU_ThrowNullPointerException(env,\n-                    \"XmbTextListToTextProperty: XConverterNotFound\");\n-                break;\n-            default:\n-                JNU_ThrowInternalError(env,\n-                    \"XmbTextListToTextProperty: unknown error\");\n-            }\n-        } else {\n-            XSetTextProperty(awt_display, xawt_root_window,\n-                                 &text_prop, XA_WM_COMMAND);\n-        }\n-\n-        if (text_prop.value != NULL)\n-            XFree(text_prop.value);\n-\n-        freeNativeStringArray(array, length);\n-    }\n-    AWT_UNLOCK();\n-}\n-\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/xawt\/XToolkit.c","additions":1,"deletions":132,"binary":false,"changes":133,"status":"modified"}]}