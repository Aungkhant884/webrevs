{"files":[{"patch":"@@ -621,1 +621,1 @@\n-          assert(opaq->Opcode() == Op_Opaque1, \"\");\n+          assert(opaq->Opcode() == Op_OpaqueZeroTripGuard, \"\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,0 +271,1 @@\n+macro(OpaqueZeroTripGuard)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1303,1 +1303,1 @@\n-  assert(zer_opaq != NULL && zer_opaq->Opcode() == Op_Opaque1, \"must be Opaque1\");\n+  assert(zer_opaq != NULL && zer_opaq->Opcode() == Op_OpaqueZeroTripGuard, \"must be OpaqueZeroTripGuard\");\n@@ -1708,1 +1708,1 @@\n-  Node *min_opaq = new Opaque1Node(C, limit);\n+  Node *min_opaq = new OpaqueZeroTripGuardNode(C, limit);\n@@ -1997,1 +1997,1 @@\n-  Node *zer_opaq = new Opaque1Node(C, incr);\n+  Node *zer_opaq = new OpaqueZeroTripGuardNode(C, incr);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5473,1 +5473,1 @@\n-  bool res = cmpzm->in(input)->Opcode() == Op_Opaque1;\n+  bool res = cmpzm->in(input)->Opcode() == Op_OpaqueZeroTripGuard;\n@@ -5478,1 +5478,1 @@\n-    if (opnd && opnd->Opcode() == Op_Opaque1) {\n+    if (opnd && opnd->is_Opaque1()) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,0 +73,7 @@\n+class OpaqueZeroTripGuardNode : public Opaque1Node {\n+public:\n+  OpaqueZeroTripGuardNode(Compile* C, Node *n) : Opaque1Node(C, n) {\n+  }\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/opaquenode.hpp\"\n@@ -223,0 +224,18 @@\n+  if (n->Opcode() == Op_OpaqueZeroTripGuard) {\n+    \/\/ If this Opaque1 is part of the zero trip guard for a loop:\n+    \/\/ 1- it can't be shared\n+    \/\/ 2- the zero trip guard can't be the if that's being split\n+    \/\/ As a consequence, this node could be assigned control anywhere between its current control and the zero trip guard.\n+    \/\/ Move it down to get it out of the way of split if and avoid breaking the zero trip guard shape.\n+    Node* cmp = n->unique_out();\n+    assert(cmp->Opcode() == Op_CmpI, \"bad zero trip guard shape\");\n+    Node* bol = cmp->unique_out();\n+    assert(bol->Opcode() == Op_Bool, \"bad zero trip guard shape\");\n+    Node* iff = bol->unique_out();\n+    assert(iff->Opcode() == Op_If, \"bad zero trip guard shape\");\n+    set_ctrl(n, iff->in(0));\n+    set_ctrl(cmp, iff->in(0));\n+    set_ctrl(bol, iff->in(0));\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1456,1 +1456,1 @@\n-  if( con->is_Con() && !cmp2->is_Con() && cmp2_op != Op_Opaque1 &&\n+  if (con->is_Con() && !cmp2->is_Con() && cmp2_op != Op_OpaqueZeroTripGuard &&\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269820\n+ * @summary C2 PhaseIdealLoop::do_unroll get wrong opaque node\n+ *\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation TestCanonicalLoopEntryOpaqueOrder\n+ *\n+ *\/\n+\n+public class TestCanonicalLoopEntryOpaqueOrder {\n+    static void test() {\n+        int ina8[] = new int[1478];\n+        int in2 = 136;\n+        long lo3 = 0L;\n+        try {\n+            for (int i = 0; i < 34; i++) {\n+                Math.log1p(1);\n+            }\n+        } catch (Exception e) {\n+            in2 = 1;\n+        }\n+\n+        for (int i = 0; i < in2; i++) {\n+            if (in2 > 10) {  \/\/ split if and create wrong opaque order\n+                for (int j = 0; j < in2; j++) {\n+                    lo3 -= 1L;\n+                }\n+            }\n+        }\n+    }\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCanonicalLoopEntryOpaqueOrder.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}