{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -591,8 +591,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (double element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoubleStream.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -588,8 +588,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (int element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntStream.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -589,8 +589,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (long element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongStream.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1006,9 +1006,1 @@\n-     * combining functions.  This is equivalent to:\n-     * <pre>{@code\n-     *     U result = identity;\n-     *     for (T element : this stream)\n-     *         result = accumulator.apply(result, element)\n-     *     return result;\n-     * }<\/pre>\n-     *\n-     * but is not constrained to execute sequentially.\n+     * combining functions.\n@@ -1059,8 +1051,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (T element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"}]}