{"files":[{"patch":"@@ -591,8 +591,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (double element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoubleStream.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -588,8 +588,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (int element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/IntStream.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -589,8 +589,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (long element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongStream.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1006,15 +1006,1 @@\n-     * combining functions.  This is equivalent to:\n-     *\n-     * <pre>{@code\n-     *     U result = identity;\n-     *     for(Iterable<T> chunk : this stream in chunks) {\n-     *         U chunkResult = identity;\n-     *         for (T element : chunk)\n-     *             chunkResult = accumulator.apply(chunkResult, element);\n-     *         result = combiner.apply(result, chunkResult);\n-     *     }\n-     *     return result;\n-     * }<\/pre>\n-     *\n-     * In the case where there are less than two chunks, invoking the combiner is not needed\n-     * as there is no merging to be done.\n+     * combining functions.\n@@ -1065,8 +1051,1 @@\n-     * the state of the result rather than by replacing the result.  This\n-     * produces a result equivalent to:\n-     * <pre>{@code\n-     *     R result = supplier.get();\n-     *     for (T element : this stream)\n-     *         accumulator.accept(result, element);\n-     *     return result;\n-     * }<\/pre>\n+     * the state of the result rather than by replacing the result.\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"}]}