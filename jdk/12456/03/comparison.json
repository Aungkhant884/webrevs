{"files":[{"patch":"@@ -217,1 +217,1 @@\n-  Klass* k = obj->klass();\n+  Klass* k = obj->klass_raw();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,4 +497,0 @@\n-public:\n-  VerifyLiveClosure(G1CollectedHeap* g1h, VerifyOption vo) : G1VerificationClosure(g1h, vo) {}\n-  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n-  virtual void do_oop(oop* p) { do_oop_work(p); }\n@@ -507,2 +503,0 @@\n-    verify_liveness(p);\n-  }\n@@ -510,2 +504,0 @@\n-  template <class T>\n-  void verify_liveness(T* p) {\n@@ -513,7 +505,3 @@\n-    Log(gc, verify) log;\n-    if (!CompressedOops::is_null(heap_oop)) {\n-      oop obj = CompressedOops::decode_not_null(heap_oop);\n-      bool failed = false;\n-      bool is_in_heap = _g1h->is_in(obj);\n-      if (!is_in_heap || _g1h->is_obj_dead_cond(obj, _vo)) {\n-        MutexLocker x(ParGCRareEvent_lock, Mutex::_no_safepoint_check_flag);\n+    if (CompressedOops::is_null(heap_oop)) {\n+      return;\n+    }\n@@ -521,24 +509,7 @@\n-        if (!_failures) {\n-          log.error(\"----------\");\n-        }\n-        ResourceMark rm;\n-        if (!is_in_heap) {\n-          HeapRegion* from = _g1h->heap_region_containing(p);\n-          log.error(\"Field \" PTR_FORMAT \" of live obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n-                    p2i(p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n-          LogStream ls(log.error());\n-          print_object(&ls, _containing_obj);\n-          HeapRegion* const to = _g1h->heap_region_containing(obj);\n-          log.error(\"points to obj \" PTR_FORMAT \" in region \" HR_FORMAT \" remset %s\",\n-                    p2i(obj), HR_FORMAT_PARAMS(to), to->rem_set()->get_state_str());\n-        } else {\n-          HeapRegion* from = _g1h->heap_region_containing(p);\n-          HeapRegion* to = _g1h->heap_region_containing(obj);\n-          log.error(\"Field \" PTR_FORMAT \" of live obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n-                    p2i(p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n-          LogStream ls(log.error());\n-          print_object(&ls, _containing_obj);\n-          log.error(\"points to dead obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n-                    p2i(obj), HR_FORMAT_PARAMS(to));\n-          print_object(&ls, obj);\n-        }\n+    oop obj = CompressedOops::decode_raw_not_null(heap_oop);\n+    bool is_in_heap = _g1h->is_in(obj);\n+    if (!is_in_heap || _g1h->is_obj_dead_cond(obj, _vo)) {\n+      MutexLocker x(ParGCRareEvent_lock, Mutex::_no_safepoint_check_flag);\n+\n+      Log(gc, verify) log;\n+      if (!_failures) {\n@@ -546,3 +517,0 @@\n-        _failures = true;\n-        failed = true;\n-        _n_failures++;\n@@ -550,0 +518,19 @@\n+      ResourceMark rm;\n+\n+      HeapRegion* from = _g1h->heap_region_containing(p);\n+      log.error(\"Field \" PTR_FORMAT \" of live obj \" PTR_FORMAT \" in region \" HR_FORMAT,\n+                p2i(p), p2i(_containing_obj), HR_FORMAT_PARAMS(from));\n+      LogStream ls(log.error());\n+      print_object(&ls, _containing_obj);\n+\n+      if (!is_in_heap) {\n+        log.error(\"points to address \" PTR_FORMAT \" outside of heap\", p2i(obj));\n+      } else {\n+        HeapRegion* to = _g1h->heap_region_containing(obj);\n+        log.error(\"points to dead obj \" PTR_FORMAT \" in region \" HR_FORMAT \" remset %s\",\n+                  p2i(obj), HR_FORMAT_PARAMS(to), to->rem_set()->get_state_str());\n+        print_object(&ls, obj);\n+      }\n+      log.error(\"----------\");\n+      _failures = true;\n+      _n_failures++;\n@@ -552,0 +539,6 @@\n+\n+public:\n+  VerifyLiveClosure(G1CollectedHeap* g1h, VerifyOption vo) : G1VerificationClosure(g1h, vo) {}\n+\n+  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n+  virtual void do_oop(oop* p) { do_oop_work(p); }\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":35,"deletions":42,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+  static inline oop decode_raw_not_null(oop v);\n","filename":"src\/hotspot\/share\/oops\/compressedOops.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,0 +81,5 @@\n+inline oop CompressedOops::decode_raw_not_null(oop v) {\n+  assert(v != nullptr, \"object is null\");\n+  return v;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/compressedOops.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+  \/\/ Get the raw value without any checks.\n+  inline Klass* klass_raw() const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,0 +110,8 @@\n+Klass* oopDesc::klass_raw() const {\n+  if (UseCompressedClassPointers) {\n+    return CompressedKlassPointers::decode_raw(_metadata._compressed_klass);\n+  } else {\n+    return _metadata._klass;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}