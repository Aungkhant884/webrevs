{"files":[{"patch":"@@ -362,0 +362,1 @@\n+    private final WeakReference<HttpClientImpl> implRef;\n@@ -405,0 +406,1 @@\n+    private final AtomicBoolean isStarted = new AtomicBoolean();\n@@ -473,0 +475,1 @@\n+        implRef = new WeakReference<>(this);\n@@ -522,1 +525,6 @@\n-        selmgr.start();\n+        try {\n+            selmgr.start();\n+        } catch (Throwable t) {\n+            isStarted.set(true);\n+            throw t;\n+        }\n@@ -717,0 +725,1 @@\n+        final Reference<?> implRef;\n@@ -718,0 +727,1 @@\n+        final AtomicBoolean isStarted;\n@@ -727,0 +737,1 @@\n+                          Reference<?> implRef,\n@@ -728,0 +739,1 @@\n+                          AtomicBoolean isStarted,\n@@ -737,0 +749,1 @@\n+            this.implRef = implRef;\n@@ -738,0 +751,1 @@\n+            this.isStarted = isStarted;\n@@ -768,0 +782,4 @@\n+        public boolean isImplementationReferenced() {\n+            return !implRef.refersTo(null);\n+        }\n+        \/\/ The selector is considered alive if it's not yet started\n@@ -769,1 +787,1 @@\n-        public boolean isSelectorAlive() { return isAlive.get(); }\n+        public boolean isSelectorAlive() { return isAlive.get() || !isStarted.get(); }\n@@ -786,0 +804,1 @@\n+                implRef,\n@@ -787,0 +806,1 @@\n+                isStarted,\n@@ -1158,1 +1178,2 @@\n-            owner.isAlive.set(true);\n+            owner.isAlive.set(true);   \/\/ goes back to false when run exits\n+            owner.isStarted.set(true); \/\/ never goes back to false\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+        \/\/ Whether the implementation of the facade\n+        \/\/ is still referenced\n+        boolean isImplementationReferenced();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/OperationTrackers.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.time.Duration;\n@@ -106,1 +107,1 @@\n-                \"outstanding operations or unreleased resources\", false);\n+                \"outstanding operations or unreleased resources\", true);\n@@ -213,0 +214,3 @@\n+        long waitStart = System.nanoTime();\n+        long waited = 0;\n+        long toWait = Math.min(graceDelayMs, Math.max(delay, 1));\n@@ -220,1 +224,2 @@\n-                    Thread.sleep(Math.min(graceDelayMs, Math.max(delay, 1)));\n+                    waited += toWait;\n+                    Thread.sleep(toWait);\n@@ -224,1 +229,6 @@\n-            } else break;\n+            } else {\n+                System.out.println(\"No outstanding HTTP operations remaining after \"\n+                        + i + \"\/\" + count + \" iterations and \" + waited + \"\/\" + graceDelayMs\n+                        + \" ms, (wait\/iteration \" + toWait + \" ms)\");\n+                break;\n+            }\n@@ -226,0 +236,1 @@\n+        long duration = Duration.ofNanos(System.nanoTime() - waitStart).toMillis();\n@@ -232,1 +243,2 @@\n-            System.out.println(\"PASSED: No \" + description + \" found in \" + tracker.getName());\n+            System.out.println(\"PASSED: No \" + description + \" found in \"\n+                    + tracker.getName() + \" in \" + duration + \" ms\");\n@@ -236,2 +248,3 @@\n-                printThreads(\"Some selector manager threads are still alive: \", System.out);\n-                printThreads(\"Some selector manager threads are still alive: \", System.err);\n+                var msg = \"Selector manager threads are still alive for \" + tracker.getName() + \": \";\n+                printThreads(msg, System.out);\n+                printThreads(msg, System.err);\n@@ -239,0 +252,2 @@\n+            System.out.println(\"AssertionError: Found some \" + description + \" in \"\n+                    + tracker.getName() + \" after \" + duration + \" ms, waited \" + waited + \" ms\");\n","filename":"test\/jdk\/java\/net\/httpclient\/ReferenceTracker.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8203771 8218546\n+ * @bug 8203771 8218546 8297200\n@@ -49,0 +49,1 @@\n+import jdk.internal.net.http.common.OperationTrackers.Tracker;\n@@ -310,1 +311,1 @@\n-        out.println(\"\\n--- Starting \");\n+        out.println(\"\\n--- Starting test \" + now());\n@@ -322,0 +323,2 @@\n+        Tracker tracker = null;\n+        Throwable thrown = null;\n@@ -324,1 +327,1 @@\n-                if (!sameClient || client == null)\n+                if (!sameClient || client == null) {\n@@ -326,0 +329,2 @@\n+                    tracker = TRACKER.getTracker(client);\n+                }\n@@ -365,0 +370,2 @@\n+            } catch (Throwable x) {\n+                thrown = x;\n@@ -369,2 +376,5 @@\n-                    var error = TRACKER.check(500);\n-                    if (error != null) throw error;\n+                    var error = TRACKER.check(tracker, 500);\n+                    if (error != null) {\n+                        if (thrown != null) error.addSuppressed(thrown);\n+                        throw error;\n+                    }\n@@ -382,1 +392,1 @@\n-        out.println(\"\\n--- Starting \");\n+        out.println(\"\\n--- Starting testHomeMadeIllegalHeader \" + now());\n@@ -386,1 +396,2 @@\n-\n+        Tracker tracker = TRACKER.getTracker(client);\n+        Throwable thrown = null;\n@@ -433,0 +444,2 @@\n+        } catch (Throwable x) {\n+            thrown = x;\n@@ -437,2 +450,5 @@\n-                var error = TRACKER.check(500);\n-                if (error != null) throw error;\n+                var error = TRACKER.check(tracker, 500);\n+                if (error != null) {\n+                    if (thrown != null) error.addSuppressed(thrown);\n+                    throw error;\n+                }\n@@ -445,1 +461,1 @@\n-        out.println(\"\\n--- Starting \");\n+        out.println(\"\\n--- Starting testAsync \" + now());\n@@ -456,0 +472,2 @@\n+        Tracker tracker = null;\n+        Throwable thrown = null;\n@@ -458,1 +476,1 @@\n-                if (!sameClient || client == null)\n+                if (!sameClient || client == null) {\n@@ -460,0 +478,2 @@\n+                    tracker = TRACKER.getTracker(client);\n+                }\n@@ -502,0 +522,2 @@\n+            } catch (Throwable x) {\n+                thrown = x;\n@@ -506,2 +528,5 @@\n-                    var error = TRACKER.check(500);\n-                    if (error != null) throw error;\n+                    var error = TRACKER.check(tracker, 500);\n+                    if (error != null) {\n+                        if (thrown != null) error.addSuppressed(thrown);\n+                        throw error;\n+                    }\n@@ -520,0 +545,1 @@\n+        out.println(\"--- Starting setup \" + now());\n@@ -552,0 +578,1 @@\n+        out.println(\"\\n--- Teardown \" + now());\n@@ -558,1 +585,2 @@\n-        AssertionError fail = TRACKER.check(500);\n+        AssertionError fail = TRACKER.check(2500);\n+        out.println(\"--- Stopping servers \" + now());\n","filename":"test\/jdk\/java\/net\/httpclient\/SpecialHeadersTest.java","additions":42,"deletions":14,"binary":false,"changes":56,"status":"modified"}]}