{"files":[{"patch":"@@ -933,7 +933,4 @@\n-void ClassLoaderData::print_on(outputStream* out) const {\n-  out->print(\"ClassLoaderData CLD: \" PTR_FORMAT \", loader: \" PTR_FORMAT \", loader_klass: %s {\",\n-              p2i(this), p2i(_class_loader.ptr_raw()), loader_name_and_id());\n-  if (has_class_mirror_holder()) out->print(\" has a class holder\");\n-  if (claimed()) out->print(\" claimed\");\n-  if (is_unloading()) out->print(\" unloading\");\n-  out->print(\" metaspace: \" INTPTR_FORMAT, p2i(metaspace_or_null()));\n+class PrintKlassClosure: public KlassClosure {\n+  outputStream* _out;\n+public:\n+  PrintKlassClosure(outputStream* out): _out(out) { }\n@@ -941,0 +938,38 @@\n+  void do_klass(Klass* k) {\n+    ResourceMark rm;\n+    _out->print(\"%s,\", k->external_name());\n+  }\n+};\n+void ClassLoaderData::print_on(outputStream* out) const {\n+  ResourceMark rm;\n+  out->print_cr(\"ClassLoaderData(\" PTR_FORMAT \")\", p2i(this));\n+  out->print_cr(\" - name                %s\", loader_name_and_id());\n+  if (!_holder.is_null()) {\n+    out->print   (\" - holder              \");\n+    _holder.print_on(out);\n+    out->print_cr(\"\");\n+  }\n+  out->print_cr(\" - class loader        \" PTR_FORMAT, p2i(_class_loader.ptr_raw()));\n+  out->print_cr(\" - metaspace           \" PTR_FORMAT, p2i(_metaspace));\n+  out->print_cr(\" - unloading           %s\", _unloading ? \"true\" : \"false\");\n+  out->print_cr(\" - class mirror holder %s\", _has_class_mirror_holder ? \"true\" : \"false\");\n+  out->print_cr(\" - modified oops       %s\", _modified_oops ? \"true\" : \"false\");\n+  out->print_cr(\" - keep alive          %d\", _keep_alive);\n+  out->print   (\" - claim               \");\n+  switch(_claim) {\n+    case _claim_none:       out->print_cr(\"none\"); break;\n+    case _claim_finalizable:out->print_cr(\"finalizable\"); break;\n+    case _claim_strong:     out->print_cr(\"strong\"); break;\n+    case _claim_other:      out->print_cr(\"other\"); break;\n+    default:                ShouldNotReachHere();\n+  }\n+  out->print_cr(\" - handles             %d\", _handles.count());\n+  out->print_cr(\" - dependency count    %d\", _dependency_count);\n+  out->print   (\" - klasses             {\");\n+  PrintKlassClosure closure(out);\n+  ((ClassLoaderData*)this)->classes_do(&closure);\n+  out->print_cr(\" }\");\n+  out->print_cr(\" - packages            \" PTR_FORMAT, p2i(_packages));\n+  out->print_cr(\" - module              \" PTR_FORMAT, p2i(_modules));\n+  out->print_cr(\" - unnamed module      \" PTR_FORMAT, p2i(_unnamed_module));\n+  out->print_cr(\" - dictionary          \" PTR_FORMAT, p2i(_dictionary));\n@@ -942,1 +977,3 @@\n-    Method::print_jmethod_ids(this, out);\n+    out->print   (\" - jmethod count       \");\n+    Method::print_jmethod_ids_counts(this, out);\n+    out->print_cr(\"\");\n@@ -944,3 +981,2 @@\n-  out->print(\" handles count %d\", _handles.count());\n-  out->print(\" dependencies %d\", _dependency_count);\n-  out->print_cr(\"}\");\n+  out->print_cr(\" - deallocate list     \" PTR_FORMAT, p2i(_deallocate_list));\n+  out->print_cr(\" - next CLD            \" PTR_FORMAT, p2i(_next));\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":47,"deletions":11,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -676,0 +676,1 @@\n+  MutexLocker ml(ClassLoaderDataGraph_lock);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2258,2 +2258,2 @@\n-void Method::print_jmethod_ids(const ClassLoaderData* loader_data, outputStream* out) {\n-  out->print(\" jni_method_id count = %d\", loader_data->jmethod_ids()->count_methods());\n+void Method::print_jmethod_ids_counts(const ClassLoaderData* loader_data, outputStream* out) {\n+  out->print(\"%d\", loader_data->jmethod_ids()->count_methods());\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -825,1 +825,1 @@\n-  static void print_jmethod_ids(const ClassLoaderData* loader_data, outputStream* out) PRODUCT_RETURN;\n+  static void print_jmethod_ids_counts(const ClassLoaderData* loader_data, outputStream* out) PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -692,0 +692,3 @@\n+  notproduct(bool, PrintClassLoaderDataGraphAtExit, false,                  \\\n+          \"Print the class loader data graph at exit\")                      \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -333,0 +333,5 @@\n+  }\n+\n+  if (PrintClassLoaderDataGraphAtExit) {\n+    ResourceMark rm;\n+    MutexLocker mcld(ClassLoaderDataGraph_lock);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}