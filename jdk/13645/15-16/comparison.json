{"files":[{"patch":"@@ -1693,13 +1693,26 @@\n-void MacroAssembler::load_int_misaligned(Register dst, Address src, Register tmp, bool is_signed) {\n-  if (AvoidUnalignedAccesses) {\n-    assert_different_registers(dst, tmp);\n-    lbu(dst, src);\n-    lbu(tmp, Address(src.base(), src.offset() + 1));\n-    slli(tmp, tmp, 8);\n-    add(dst, dst, tmp);\n-    lbu(tmp, Address(src.base(), src.offset() + 2));\n-    slli(tmp, tmp, 16);\n-    add(dst, dst, tmp);\n-    is_signed ? lb(tmp, Address(src.base(), src.offset() + 3)) : lbu(tmp, Address(src.base(), src.offset() + 3));\n-    slli(tmp, tmp, 24);\n-    add(dst, dst, tmp);\n+\/\/ granularity is 1, 2 bytes per load\n+void MacroAssembler::load_int_misaligned(Register dst, Address src, Register tmp, bool is_signed, int granularity) {\n+  if (AvoidUnalignedAccesses && (granularity != 4)) {\n+    assert_different_registers(dst, tmp, src.base());\n+    switch(granularity) {\n+      case 1:\n+        lbu(dst, src);\n+        lbu(tmp, Address(src.base(), src.offset() + 1));\n+        slli(tmp, tmp, 8);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 2));\n+        slli(tmp, tmp, 16);\n+        add(dst, dst, tmp);\n+        is_signed ? lb(tmp, Address(src.base(), src.offset() + 3)) : lbu(tmp, Address(src.base(), src.offset() + 3));\n+        slli(tmp, tmp, 24);\n+        add(dst, dst, tmp);\n+        break;\n+      case 2:\n+        lhu(dst, src);\n+        is_signed ? lh(tmp, Address(src.base(), src.offset() + 2)) : lhu(tmp, Address(src.base(), src.offset() + 2));\n+        slli(tmp, tmp, 16);\n+        add(dst, dst, tmp);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n@@ -1714,1 +1727,1 @@\n-    assert_different_registers(dst, tmp);\n+    assert_different_registers(dst, tmp, src.base());\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -434,2 +434,2 @@\n-  void load_int_misaligned(Register dst, Address src, Register tmp, bool is_signed);\n-  void load_long_misaligned(Register dst, Address src, Register tmp, int granularity);\n+  void load_int_misaligned(Register dst, Address src, Register tmp, bool is_signed, int granularity = 1);\n+  void load_long_misaligned(Register dst, Address src, Register tmp, int granularity = 1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1102,1 +1102,1 @@\n-      __ MacroAssembler::load_long_misaligned(t1, Address(t, 0), t0, 2); \/\/ 2 bytes aligned, but not 4 or 8\n+      __ load_long_misaligned(t1, Address(t, 0), t0, 2); \/\/ 2 bytes aligned, but not 4 or 8\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}