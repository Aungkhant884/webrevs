{"files":[{"patch":"@@ -216,15 +216,2 @@\n-    if (AvoidUnalignedAccesses) {\n-      assert_different_registers(index, tmp);\n-      load_unsigned_byte(index, Address(xbcp, bcp_offset));\n-      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 1));\n-      slli(tmp, tmp, 8);\n-      add(index, index, tmp);\n-      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 2));\n-      slli(tmp, tmp, 16);\n-      add(index, index, tmp);\n-      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 3));\n-      slli(tmp, tmp, 24);\n-      add(index, index, tmp);\n-    } else {\n-      lwu(index, Address(xbcp, bcp_offset));\n-    }\n+    load_word_misaligned(index, Address(xbcp, bcp_offset), tmp, false);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1692,0 +1692,17 @@\n+void MacroAssembler::load_word_misaligned(Register dst, Address src, Register tmp, bool is_signed) {\n+  if (AvoidUnalignedAccesses) {\n+    lbu(dst, src);\n+    lbu(tmp, Address(src.base(), src.offset() + 1));\n+    slli(tmp, tmp, 8);\n+    add(dst, dst, tmp);\n+    lbu(tmp, Address(src.base(), src.offset() + 2));\n+    slli(tmp, tmp, 16);\n+    add(dst, dst, tmp);\n+    is_signed ? lb(tmp, Address(src.base(), src.offset() + 3)) : lbu(tmp, Address(src.base(), src.offset() + 3));\n+    slli(tmp, tmp, 24);\n+    add(dst, dst, tmp);\n+  } else {\n+    is_signed ? lw(dst, src) : lwu(dst, src);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -433,0 +433,3 @@\n+  \/\/ Misaligned loads, will use the best way, according to the AvoidUnalignedAccess flag\n+  void load_word_misaligned(Register dst, Address src, Register tmp, bool is_signed);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}