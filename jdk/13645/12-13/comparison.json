{"files":[{"patch":"@@ -1711,0 +1711,56 @@\n+\/\/ granularity is 1, 2 or 4 bytes per load\n+void MacroAssembler::load_long_misaligned(Register dst, Address src, Register tmp, int granularity) {\n+  if (AvoidUnalignedAccesses && (granularity != 8)) {\n+    assert_different_registers(dst, tmp);\n+    switch(granularity){\n+      case 1:\n+        lbu(dst, src);\n+        lbu(tmp, Address(src.base(), src.offset() + 1));\n+        slli(tmp, tmp, 8);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 2));\n+        slli(tmp, tmp, 16);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 3));\n+        slli(tmp, tmp, 24);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 4));\n+        slli(tmp, tmp, 32);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 5));\n+        slli(tmp, tmp, 40);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 6));\n+        slli(tmp, tmp, 48);\n+        add(dst, dst, tmp);\n+        lbu(tmp, Address(src.base(), src.offset() + 7));\n+        slli(tmp, tmp, 56);\n+        add(dst, dst, tmp);\n+        break;\n+      case 2:\n+        lhu(dst, src);\n+        lhu(tmp, Address(src.base(), src.offset() + 2));\n+        slli(tmp, tmp, 16);\n+        add(dst, dst, tmp);\n+        lhu(tmp, Address(src.base(), src.offset() + 4));\n+        slli(tmp, tmp, 32);\n+        add(dst, dst, tmp);\n+        lhu(tmp, Address(src.base(), src.offset() + 6));\n+        slli(tmp, tmp, 48);\n+        add(dst, dst, tmp);\n+        break;\n+      case 4:\n+        lwu(dst, src);\n+        lwu(tmp, Address(src.base(), src.offset() + 4));\n+        slli(tmp, tmp, 32);\n+        add(dst, dst, tmp);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  } else {\n+    ld(dst, src);\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -435,0 +435,1 @@\n+  void load_long_misaligned(Register dst, Address src, Register tmp, int granularity);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1103,10 +1103,1 @@\n-      __ lhu(t1, Address(t1, 0));\n-      __ lhu(t0, Address(t, 2));\n-      __ slli(t0, t0, 16);\n-      __ add(t1, t1, t0);\n-      __ lhu(t0, Address(t, 4));\n-      __ slli(t0, t0, 32);\n-      __ add(t1, t1, t0);\n-      __ lhu(t0, Address(t, 6));\n-      __ slli(t0, t0, 48);\n-      __ add(t1, t1, t0);\n+      __ MacroAssembler::load_long_misaligned(t1, Address(t,0), t0, 2); \/\/ 2 bytes aligned, but not 4 or 8\n@@ -1114,1 +1105,1 @@\n-      __ ld(t1, Address(t1, 0)); \/\/ 2 bytes aligned, but not 4 or 8\n+      __ ld(t1, Address(t1, 0));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}