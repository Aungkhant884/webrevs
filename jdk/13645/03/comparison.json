{"files":[{"patch":"@@ -367,0 +367,16 @@\n+  \/\/ handle unaligned access\n+  static inline uint16_t ld_c_instr(address addr) {\n+    return Bytes::get_native_u2(addr);\n+  }\n+  static inline void sd_c_instr(address addr, uint16_t c_instr) {\n+    Bytes::put_native_u2(addr, c_instr);\n+  }\n+\n+  \/\/ handle unaligned access\n+  static inline uint32_t ld_instr(address addr) {\n+    return Bytes::get_native_u4(addr);\n+  }\n+  static inline void sd_instr(address addr, uint32_t instr) {\n+    Bytes::put_native_u4(addr, instr);\n+  }\n+\n@@ -391,1 +407,1 @@\n-    unsigned target = *(unsigned *)a;\n+    unsigned target = ld_instr(a);\n@@ -394,1 +410,1 @@\n-    *(unsigned *)a = target;\n+    sd_instr(a, target);\n@@ -1936,1 +1952,1 @@\n-    uint16_t target = *(uint16_t *)a;\n+    uint16_t target = ld_c_instr(a);\n@@ -1939,1 +1955,1 @@\n-    *(uint16_t *)a = target;\n+    sd_c_instr(a, target);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  intptr_t addr = (intptr_t) instruction_address();\n+  address addr = instruction_address();\n@@ -118,1 +118,1 @@\n-    uint32_t inst = *((uint32_t*) addr);\n+    uint32_t inst = Assembler::ld_instr(addr);\n@@ -120,1 +120,1 @@\n-      tty->print_cr(\"Addr: \" INTPTR_FORMAT \" Code: 0x%x\", addr, inst);\n+      tty->print_cr(\"Addr: \" INTPTR_FORMAT \" Code: 0x%x\", p2i(addr), inst);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -180,1 +180,8 @@\n-  lhu(reg, Address(xbcp, bcp_offset));\n+  if (AvoidUnalignedAccesses && (bcp_offset % 2)) {\n+    lbu(t1, Address(xbcp, bcp_offset));\n+    lbu(reg, Address(xbcp, bcp_offset + 1));\n+    slli(reg, reg, 8);\n+    add(reg, t1, reg);\n+  } else {\n+    lhu(reg, Address(xbcp, bcp_offset));\n+  }\n@@ -194,0 +201,1 @@\n+                                                       Register tmp,\n@@ -198,1 +206,9 @@\n-    load_unsigned_short(index, Address(xbcp, bcp_offset));\n+    if (AvoidUnalignedAccesses) {\n+      assert_different_registers(index, tmp);\n+      load_unsigned_byte(index, Address(xbcp, bcp_offset));\n+      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 1));\n+      slli(tmp, tmp, 8);\n+      add(index, index, tmp);\n+    } else {\n+      load_unsigned_short(index, Address(xbcp, bcp_offset));\n+    }\n@@ -200,1 +216,15 @@\n-    lwu(index, Address(xbcp, bcp_offset));\n+    if (AvoidUnalignedAccesses) {\n+      assert_different_registers(index, tmp);\n+      load_unsigned_byte(index, Address(xbcp, bcp_offset));\n+      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 1));\n+      slli(tmp, tmp, 8);\n+      add(index, index, tmp);\n+      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 2));\n+      slli(tmp, tmp, 16);\n+      add(index, index, tmp);\n+      load_unsigned_byte(tmp, Address(xbcp, bcp_offset + 3));\n+      slli(tmp, tmp, 24);\n+      add(index, index, tmp);\n+    } else {\n+      lwu(index, Address(xbcp, bcp_offset));\n+    }\n@@ -227,1 +257,2 @@\n-  get_cache_index_at_bcp(index, bcp_offset, index_size);\n+  \/\/ register \"cache\" is trashed in next shadd, so lets use it as a temporary register\n+  get_cache_index_at_bcp(index, cache, bcp_offset, index_size);\n@@ -264,1 +295,2 @@\n-  get_cache_index_at_bcp(tmp, bcp_offset, index_size);\n+  \/\/ register \"cache\" is trashed in next ld, so lets use it as a temporary register\n+  get_cache_index_at_bcp(tmp, cache, bcp_offset, index_size);\n@@ -1921,1 +1953,2 @@\n-  get_cache_index_at_bcp(index, 1, sizeof(u4));\n+  \/\/ register \"cache\" is trashed in next ld, so lets use it as a temporary register\n+  get_cache_index_at_bcp(index, cache, 1, sizeof(u4));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  void get_cache_index_at_bcp(Register index, int bcp_offset, size_t index_size = sizeof(u2));\n+  void get_cache_index_at_bcp(Register index, Register tmp, int bcp_offset, size_t index_size = sizeof(u2));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1420,1 +1420,1 @@\n-  unsigned insn = *(unsigned*)insn_addr;\n+  unsigned insn = Assembler::ld_instr(insn_addr);\n@@ -1433,1 +1433,1 @@\n-  unsigned insn = *(unsigned*)insn_addr;\n+  unsigned insn = Assembler::ld_instr(insn_addr);\n@@ -1445,2 +1445,2 @@\n-  offset = ((long)(Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12))) << 12;                                  \/\/ Auipc.\n-  offset += ((long)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20));                                         \/\/ Addi\/Jalr\/Load.\n+  offset = ((long)(Assembler::sextract(Assembler::ld_instr(insn_addr), 31, 12))) << 12;                               \/\/ Auipc.\n+  offset += ((long)Assembler::sextract(Assembler::ld_instr(insn_addr + 4), 31, 20));                                  \/\/ Addi\/Jalr\/Load.\n@@ -1453,4 +1453,4 @@\n-  intptr_t target_address = (((int64_t)Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12)) & 0xfffff) << 29;    \/\/ Lui.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20)) << 17;                        \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[3], 31, 20)) << 6;                         \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[5], 31, 20));                              \/\/ Addi\/Jalr\/Load.\n+  intptr_t target_address = (((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr), 31, 12)) & 0xfffff) << 29; \/\/ Lui.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 4), 31, 20)) << 17;                 \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 12), 31, 20)) << 6;                 \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 20), 31, 20));                      \/\/ Addi\/Jalr\/Load.\n@@ -1462,5 +1462,5 @@\n-  intptr_t target_address = (((int64_t)Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12)) & 0xfffff) << 44;    \/\/ Lui.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20)) << 32;                        \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[3], 31, 20)) << 20;                        \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[5], 31, 20)) << 8;                         \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[7], 31, 20));                              \/\/ Addi.\n+  intptr_t target_address = (((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr), 31, 12)) & 0xfffff) << 44; \/\/ Lui.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 4), 31, 20)) << 32;                 \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 12), 31, 20)) << 20;                \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 20), 31, 20)) << 8;                 \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 28), 31, 20));                      \/\/ Addi.\n@@ -1472,2 +1472,2 @@\n-  intptr_t target_address = (((int64_t)Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12)) & 0xfffff) << 12;    \/\/ Lui.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20));                              \/\/ Addiw.\n+  intptr_t target_address = (((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr), 31, 12)) & 0xfffff) << 12; \/\/ Lui.\n+  target_address += ((int64_t)Assembler::sextract(Assembler::ld_instr(insn_addr + 4), 31, 20));                       \/\/ Addiw.\n@@ -1498,1 +1498,1 @@\n-                  *(unsigned*)branch, p2i(branch));\n+                  Assembler::ld_instr(branch), p2i(branch));\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  return as_Register(Assembler::extract(((unsigned*)instr)[0], 19, 15));\n+  return as_Register(Assembler::extract(Assembler::ld_instr(instr), 19, 15));\n@@ -50,1 +50,1 @@\n-  return as_Register(Assembler::extract(((unsigned*)instr)[0], 24, 20));\n+  return as_Register(Assembler::extract(Assembler::ld_instr(instr), 24, 20));\n@@ -55,1 +55,1 @@\n-  return as_Register(Assembler::extract(((unsigned*)instr)[0], 11, 7));\n+  return as_Register(Assembler::extract(Assembler::ld_instr(instr), 11, 7));\n@@ -60,1 +60,1 @@\n-  return Assembler::extract(((unsigned*)instr)[0], 6, 0);\n+  return Assembler::extract(Assembler::ld_instr(instr), 6, 0);\n@@ -65,1 +65,1 @@\n-  return Assembler::extract(((unsigned*)instr)[0], 14, 12);\n+  return Assembler::extract(Assembler::ld_instr(instr), 14, 12);\n@@ -209,1 +209,1 @@\n-    return *(intptr_t*)addr;\n+    return Bytes::get_native_u8(addr);\n@@ -218,1 +218,1 @@\n-    *(intptr_t*)addr = x;\n+    Bytes::put_native_u8(addr, x);\n@@ -234,1 +234,1 @@\n-        *oop_addr = cast_to_oop(x);\n+        Bytes::put_native_u8((address)oop_addr, x);\n@@ -238,1 +238,1 @@\n-        *metadata_addr = (Metadata*)x;\n+        Bytes::put_native_u8((address)metadata_addr, x);\n@@ -346,1 +346,1 @@\n-  *(juint*)code_pos = 0xffffffff; \/\/ all bits ones is permanently reserved as an illegal instruction\n+  Assembler::sd_instr(code_pos, 0xffffffff);   \/\/ all bits ones is permanently reserved as an illegal instruction\n@@ -382,1 +382,1 @@\n-    *(unsigned int*)verified_entry = insn;\n+    Assembler::sd_instr(verified_entry, insn);\n@@ -440,1 +440,1 @@\n-  *(unsigned int*) membar = insn;\n+  Assembler::sd_instr(membar, insn);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            Assembler::extract(((unsigned*)instr)[0], 25, 20) == shift);    \/\/ shamt field\n+            Assembler::extract(Assembler::ld_instr(instr), 25, 20) == shift);    \/\/ shamt field\n@@ -211,2 +211,2 @@\n-  jint int_at(int offset) const        { return *(jint*) addr_at(offset); }\n-  juint uint_at(int offset) const      { return *(juint*) addr_at(offset); }\n+  jint int_at(int offset) const        { return (jint)Bytes::get_native_u4(addr_at(offset)); }\n+  juint uint_at(int offset) const      { return Bytes::get_native_u4(addr_at(offset)); }\n@@ -214,1 +214,1 @@\n-  address ptr_at(int offset) const     { return *(address*) addr_at(offset); }\n+  address ptr_at(int offset) const     { return (address)Bytes::get_native_u8(addr_at(offset)); }\n@@ -216,1 +216,1 @@\n-  oop  oop_at (int offset) const       { return *(oop*) addr_at(offset); }\n+  oop  oop_at (int offset) const       { return cast_to_oop(Bytes::get_native_u8(addr_at(offset))); }\n@@ -219,4 +219,4 @@\n-  void set_int_at(int offset, jint  i)        { *(jint*)addr_at(offset) = i; }\n-  void set_uint_at(int offset, jint  i)       { *(juint*)addr_at(offset) = i; }\n-  void set_ptr_at (int offset, address  ptr)  { *(address*) addr_at(offset) = ptr; }\n-  void set_oop_at (int offset, oop  o)        { *(oop*) addr_at(offset) = o; }\n+  void set_int_at(int offset, jint  i)        { Bytes::put_native_u4(addr_at(offset), i); }\n+  void set_uint_at(int offset, jint  i)       { Bytes::put_native_u4(addr_at(offset), i); }\n+  void set_ptr_at (int offset, address  ptr)  { Bytes::put_native_u8(addr_at(offset), (u8)ptr); }\n+  void set_oop_at (int offset, oop  o)        { Bytes::put_native_u8(addr_at(offset), cast_from_oop<u8>(o)); }\n@@ -493,1 +493,1 @@\n-  uint32_t insn = *(uint32_t*)addr_at(0);\n+  uint32_t insn = Assembler::ld_instr(addr_at(0));\n@@ -535,1 +535,1 @@\n-      (Assembler::extract(((unsigned*)addr)[1], 31, 20) == NativeCallTrampolineStub::data_offset)) {\n+      (Assembler::extract(Assembler::ld_instr(addr + 4), 31, 20) == NativeCallTrampolineStub::data_offset)) {\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        assert(*(address*)constptr == x, \"error in oop relocation\");\n+        assert((address)Bytes::get_native_u8(constptr) == x, \"error in oop relocation\");\n","filename":"src\/hotspot\/cpu\/riscv\/relocInfo_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1101,1 +1101,15 @@\n-    __ ld(t1, Address(t1, 0));\n+    if (AvoidUnalignedAccesses) {\n+      __ mv(t, t1);\n+      __ lhu(t1, Address(t1, 0));\n+      __ lhu(t0, Address(t, 2));\n+      __ slli(t0, t0, 16);\n+      __ add(t1, t1, t0);\n+      __ lhu(t0, Address(t, 4));\n+      __ slli(t0, t0, 32);\n+      __ add(t1, t1, t0);\n+      __ lhu(t0, Address(t, 6));\n+      __ slli(t0, t0, 48);\n+      __ add(t1, t1, t0);\n+    } else {\n+      __ ld(t1, Address(t1, 0)); \/\/ 2 bytes aligned, but not 4 or 8\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -283,1 +283,8 @@\n-  __ load_unsigned_short(x10, at_bcp(1));\n+  if (AvoidUnalignedAccesses) {\n+    __ lbu(t1, at_bcp(1));\n+    __ lbu(x10, at_bcp(2));\n+    __ slli(x10, x10, 8);\n+    __ add(x10, t1, x10);\n+  } else {\n+    __ load_unsigned_short(x10, at_bcp(1));\n+  }\n@@ -371,1 +378,2 @@\n-  __ get_cache_index_at_bcp(tmp, 1, index_size);\n+  \/\/ register result is trashed by next load, let's use it as temporary register\n+  __ get_cache_index_at_bcp(tmp, result, 1, index_size);\n@@ -1611,1 +1619,8 @@\n-    __ lhu(x12, at_bcp(1));\n+    if (AvoidUnalignedAccesses) {\n+      __ lbu(t1, at_bcp(1));\n+      __ lbu(x12, at_bcp(2));\n+      __ slli(x12, x12, 8);\n+      __ add(x12, t1, x12);\n+    } else {\n+      __ lhu(x12, at_bcp(1));\n+    }\n@@ -2011,1 +2026,9 @@\n-    __ ld(temp, Address(temp, 0));\n+    if (AvoidUnalignedAccesses) {\n+      \/\/ array is BytesPerInt (aka 4) aligned\n+      __ lwu(t1, Address(temp,4));\n+      __ slli(t1, t1, 32);\n+      __ lwu(temp, Address(temp, 0));\n+      __ add(temp, temp, t1);\n+    } else {\n+      __ ld(temp, Address(temp, 0));\n+    }\n@@ -2034,1 +2057,9 @@\n-  __ ld(temp, Address(temp, 0));\n+  if (AvoidUnalignedAccesses) {\n+    \/\/ array is BytesPerInt (aka 4) aligned\n+    __ lwu(t1, Address(temp,4));\n+    __ slli(t1, t1, 32);\n+    __ lwu(temp, Address(temp, 0));\n+    __ add(temp, temp, t1);\n+  } else {\n+    __ ld(temp, Address(temp, 0));\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"}]}