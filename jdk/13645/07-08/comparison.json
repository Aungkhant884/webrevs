{"files":[{"patch":"@@ -1113,4 +1113,2 @@\n-\/\/ There are two implementations.  For arrays >= 8 bytes, all\n-\/\/ comparisons (including the final one, which may overlap) are\n-\/\/ performed 8 bytes at a time.  For strings < 8 bytes, we compare a\n-\/\/ halfword, then a short, and then a byte.\n+\/\/ All comparisons (including the final one, which may overlap) are\n+\/\/ performed 8 bytes at a time.\n@@ -1130,0 +1128,1 @@\n+  beqz(cnt1, SAME);\n@@ -1134,1 +1133,1 @@\n-  bltz(cnt1, SHORT);\n+  blez(cnt1, SHORT);\n@@ -1146,35 +1145,10 @@\n-  \/\/ Last longword.  In the case where length == 4 we compare the\n-  \/\/ same longword twice, but that's still faster than another\n-  \/\/ conditional branch.\n-  \/\/ cnt1 could be 0, -1, -2, -3, -4 for chars; -4 only happens when\n-  \/\/ length == 4.\n-  add(tmp1, a1, cnt1);\n-  ld(tmp1, Address(tmp1, 0));\n-  add(tmp2, a2, cnt1);\n-  ld(tmp2, Address(tmp2, 0));\n-  bne(tmp1, tmp2, DONE);\n-  j(SAME);\n-\n-  bind(SHORT);\n-  Label TAIL03, TAIL01;\n-\n-  \/\/ 0-7 bytes left.\n-  test_bit(t0, cnt1, 2);\n-  beqz(t0, TAIL03);\n-  {\n-    lwu(tmp1, Address(a1, 0));\n-    add(a1, a1, 4);\n-    lwu(tmp2, Address(a2, 0));\n-    add(a2, a2, 4);\n-    bne(tmp1, tmp2, DONE);\n-  }\n-\n-  bind(TAIL03);\n-  \/\/ 0-3 bytes left.\n-  test_bit(t0, cnt1, 1);\n-  beqz(t0, TAIL01);\n-  {\n-    lhu(tmp1, Address(a1, 0));\n-    add(a1, a1, 2);\n-    lhu(tmp2, Address(a2, 0));\n-    add(a2, a2, 2);\n+  if (!AvoidUnalignedAccesses) {\n+    \/\/ Last longword.  In the case where length == 4 we compare the\n+    \/\/ same longword twice, but that's still faster than another\n+    \/\/ conditional branch.\n+    \/\/ cnt1 could be 0, -1, -2, -3, -4 for chars; -4 only happens when\n+    \/\/ length == 4.\n+    add(tmp1, a1, cnt1);\n+    ld(tmp1, Address(tmp1, 0));\n+    add(tmp2, a2, cnt1);\n+    ld(tmp2, Address(tmp2, 0));\n@@ -1182,0 +1156,1 @@\n+    j(SAME);\n@@ -1184,11 +1159,8 @@\n-  bind(TAIL01);\n-  if (elem_size == 1) { \/\/ Only needed when comparing 1-byte elements\n-    \/\/ 0-1 bytes left.\n-    test_bit(t0, cnt1, 0);\n-    beqz(t0, SAME);\n-    {\n-      lbu(tmp1, Address(a1, 0));\n-      lbu(tmp2, Address(a2, 0));\n-      bne(tmp1, tmp2, DONE);\n-    }\n-  }\n+  bind(SHORT);\n+  ld(tmp1, Address(a1));\n+  ld(tmp2, Address(a2));\n+  xorr(tmp1, tmp1, tmp2);\n+  neg(cnt1, cnt1);\n+  slli(cnt1, cnt1, LogBitsPerByte);\n+  sll(tmp1, tmp1, cnt1);\n+  bnez(tmp1, DONE);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":23,"deletions":51,"binary":false,"changes":74,"status":"modified"}]}