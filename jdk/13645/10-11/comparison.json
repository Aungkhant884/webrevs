{"files":[{"patch":"@@ -1113,2 +1113,4 @@\n-\/\/ All comparisons (including the final one, which may overlap) are\n-\/\/ performed 8 bytes at a time.\n+\/\/ There are two implementations.  For arrays >= 8 bytes, all\n+\/\/ comparisons (including the final one, which may overlap) are\n+\/\/ performed 8 bytes at a time.  For strings < 8 bytes, we compare a\n+\/\/ halfword, then a short, and then a byte.\n@@ -1133,1 +1135,1 @@\n-  blez(cnt1, SHORT);\n+  bltz(cnt1, SHORT);\n@@ -1143,1 +1145,1 @@\n-  } bgtz(cnt1, NEXT_WORD);\n+  } bgez(cnt1, NEXT_WORD);\n@@ -1157,0 +1159,3 @@\n+  } else {\n+    add(tmp1, cnt1, wordSize);\n+    beqz(tmp1, SAME);\n@@ -1160,7 +1165,36 @@\n-  ld(tmp1, Address(a1));\n-  ld(tmp2, Address(a2));\n-  xorr(tmp1, tmp1, tmp2);\n-  neg(cnt1, cnt1);\n-  slli(cnt1, cnt1, LogBitsPerByte);\n-  sll(tmp1, tmp1, cnt1);\n-  bnez(tmp1, DONE);\n+  Label TAIL03, TAIL01;\n+\n+  \/\/ 0-7 bytes left.\n+  test_bit(t0, cnt1, 2);\n+  beqz(t0, TAIL03);\n+  {\n+    lwu(tmp1, Address(a1, 0));\n+    add(a1, a1, 4);\n+    lwu(tmp2, Address(a2, 0));\n+    add(a2, a2, 4);\n+    bne(tmp1, tmp2, DONE);\n+  }\n+\n+  bind(TAIL03);\n+  \/\/ 0-3 bytes left.\n+  test_bit(t0, cnt1, 1);\n+  beqz(t0, TAIL01);\n+  {\n+    lhu(tmp1, Address(a1, 0));\n+    add(a1, a1, 2);\n+    lhu(tmp2, Address(a2, 0));\n+    add(a2, a2, 2);\n+    bne(tmp1, tmp2, DONE);\n+  }\n+\n+  bind(TAIL01);\n+  if (elem_size == 1) { \/\/ Only needed when comparing 1-byte elements\n+    \/\/ 0-1 bytes left.\n+    test_bit(t0, cnt1, 0);\n+    beqz(t0, SAME);\n+    {\n+      lbu(tmp1, Address(a1, 0));\n+      lbu(tmp2, Address(a2, 0));\n+      bne(tmp1, tmp2, DONE);\n+    }\n+  }\n@@ -1841,1 +1875,1 @@\n-#undef VFCVT_SAFE\n\\ No newline at end of file\n+#undef VFCVT_SAFE\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":46,"deletions":12,"binary":false,"changes":58,"status":"modified"}]}