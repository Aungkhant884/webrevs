{"files":[{"patch":"@@ -556,1 +556,1 @@\n-        if (tlsIsClosed) {\n+        if (isClosed()) {\n@@ -565,9 +565,5 @@\n-            \/\/ shutdown output bound, which may have been closed previously.\n-            if (!isOutputShutdown()) {\n-                duplexCloseOutput();\n-            }\n-\n-            \/\/ shutdown input bound, which may have been closed previously.\n-            if (!isInputShutdown()) {\n-                duplexCloseInput();\n-            }\n+            if (isConnected()) {\n+                \/\/ shutdown output bound, which may have been closed previously.\n+                if (!isOutputShutdown()) {\n+                    duplexCloseOutput();\n+                }\n@@ -575,3 +571,4 @@\n-            if (!isClosed()) {\n-                \/\/ close the connection directly\n-                closeSocket(false);\n+                \/\/ shutdown input bound, which may have been closed previously.\n+                if (!isInputShutdown()) {\n+                    duplexCloseInput();\n+                }\n@@ -585,1 +582,13 @@\n-            tlsIsClosed = true;\n+            if (!isClosed()) {\n+                \/\/ close the connection directly\n+                try {\n+                    closeSocket(false);\n+                } catch (IOException ioe) {\n+                    \/\/ ignore the exception\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n+                        SSLLogger.warning(\"SSLSocket close failed\", ioe);\n+                    }\n+                } finally {\n+                    tlsIsClosed = true;\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.test.lib.util.FileUtils;\n+\n@@ -35,0 +37,1 @@\n+ * @library \/test\/lib\n@@ -39,3 +42,0 @@\n-    \/\/ Return the current process handle count\n-    private static native long getProcessHandleCount();\n-\n@@ -43,2 +43,0 @@\n-        System.loadLibrary(\"CheckHandles\");\n-\n@@ -49,1 +47,1 @@\n-        long prevCount = getProcessHandleCount();\n+        long prevCount = FileUtils.getProcessHandleCount();\n@@ -55,1 +53,1 @@\n-            long count = getProcessHandleCount();\n+            long count = FileUtils.getProcessHandleCount();\n@@ -64,1 +62,1 @@\n-        prevCount = getProcessHandleCount();\n+        prevCount = FileUtils.getProcessHandleCount();\n@@ -73,1 +71,1 @@\n-            long count = getProcessHandleCount();\n+            long count = FileUtils.getProcessHandleCount();\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/checkHandles\/CheckHandles.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import jdk.test.lib.util.FileUtils;\n+\n+\/*\n+ * @test\n+ * @bug 8256818\n+ * @summary Test that creating and closing SSL Sockets without bind\/connect\n+ *          will not leave leaking socket file descriptors\n+ * @library \/test\/lib\n+ * @run main\/othervm SSLSocketLeak\n+ *\/\n+public class SSLSocketLeak {\n+\n+    private static final int NUM_TEST_SOCK = 500;\n+\n+    public static void main(String[] args) throws IOException {\n+        long fds_start = FileUtils.getProcessHandleCount();\n+        System.out.println(\"FDs at the beginning: \" + fds_start);\n+\n+        for (int i = 0; i < NUM_TEST_SOCK; i++) {\n+            SSLSocket sslSocket = (SSLSocket)SSLSocketFactory.getDefault().createSocket();\n+            sslSocket.getSSLParameters();\n+            sslSocket.close();\n+        }\n+\n+        long fds_end = FileUtils.getProcessHandleCount();\n+        System.out.println(\"FDs in the end: \" + fds_end);\n+\n+        if ((fds_end - fds_start) > (NUM_TEST_SOCK \/ 10)) {\n+            throw new RuntimeException(\"Too many open file descriptors. Looks leaky.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketLeak.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -26,2 +26,0 @@\n-import jdk.test.lib.Platform;\n-\n@@ -29,1 +27,0 @@\n-import java.io.InputStreamReader;\n@@ -31,0 +28,1 @@\n+import java.io.InputStreamReader;\n@@ -34,0 +32,1 @@\n+import java.lang.management.ManagementFactory;\n@@ -39,1 +38,0 @@\n-import java.nio.file.Paths;\n@@ -43,2 +41,0 @@\n-import java.time.Duration;\n-import java.util.Arrays;\n@@ -46,1 +42,1 @@\n-import java.util.ArrayDeque;\n+import java.util.Arrays;\n@@ -51,0 +47,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -53,1 +50,4 @@\n-import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.Platform;\n+\n+import com.sun.management.UnixOperatingSystemMXBean;\n@@ -62,0 +62,1 @@\n+    private static volatile boolean nativeLibLoaded;\n@@ -366,0 +367,15 @@\n+    \/\/ Return the current process handle count\n+    public static long getProcessHandleCount() {\n+        if (IS_WINDOWS) {\n+            if (!nativeLibLoaded) {\n+                System.loadLibrary(\"FileUtils\");\n+                nativeLibLoaded = true;\n+            }\n+            return getWinProcessHandleCount();\n+        } else {\n+            return ((UnixOperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean()).getOpenFileDescriptorCount();\n+        }\n+    }\n+\n+    private static native long getWinProcessHandleCount();\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-JNIEXPORT jlong JNICALL Java_CheckHandles_getProcessHandleCount(JNIEnv *env)\n+JNIEXPORT jlong JNICALL Java_jdk_test_lib_util_FileUtils_getWinProcessHandleCount(JNIEnv *env)\n","filename":"test\/lib\/jdk\/test\/lib\/util\/libFileUtils.c","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/lang\/ProcessBuilder\/checkHandles\/libCheckHandles.c","status":"renamed"}]}