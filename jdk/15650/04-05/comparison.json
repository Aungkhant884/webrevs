{"files":[{"patch":"@@ -1313,0 +1313,2 @@\n+                    \/\/ Get the Disk Number\n+                    int diskNo = CENDSK(cen, cenPos);\n@@ -1315,1 +1317,1 @@\n-                            csize, size, locoff);\n+                            csize, size, locoff, diskNo);\n@@ -1333,0 +1335,1 @@\n+         * @param diskNo CEN header Disk number\n@@ -1336,1 +1339,1 @@\n-                                                long size, long locoff)\n+                                                long size, long locoff, int diskNo)\n@@ -1344,1 +1347,1 @@\n-                        locoff == ZIP64_MAGICVAL) {\n+                        locoff == ZIP64_MAGICVAL || diskNo == ZIP64_MAGICCOUNT) {\n@@ -1352,1 +1355,1 @@\n-            if (!isZip64ExtBlockSizeValid(blockSize)) {\n+            if (!isZip64ExtBlockSizeValid(blockSize, csize, size, locoff, diskNo)) {\n@@ -1407,0 +1410,4 @@\n+         * @param csize CEN header compressed size value\n+         * @param size CEN header uncompressed size value\n+         * @param locoff CEN header LOC offset\n+         * @param diskNo CEN header Disk number\n@@ -1409,14 +1416,10 @@\n-        private static boolean isZip64ExtBlockSizeValid(int blockSize) {\n-            \/*\n-             * As the fields must appear in order, the block size indicates which\n-             * fields to expect:\n-             *  8 - uncompressed size\n-             * 16 - uncompressed size, compressed size\n-             * 24 - uncompressed size, compressed size, LOC Header offset\n-             * 28 - uncompressed size, compressed size, LOC Header offset,\n-             * and Disk start number\n-             *\/\n-            return switch(blockSize) {\n-                case 8, 16, 24, 28 -> true;\n-                default -> false;\n-            };\n+        private static boolean isZip64ExtBlockSizeValid(int blockSize, long csize,\n+                                                        long size, long locoff,\n+                                                        int diskNo) {\n+            int expectedBlockSize =\n+                    (csize == ZIP64_MAGICVAL ? Long.BYTES : 0) +\n+                    (size == ZIP64_MAGICVAL ? Long.BYTES : 0) +\n+                    (locoff == ZIP64_MAGICVAL ? Long.BYTES : 0) +\n+                    (diskNo == ZIP64_MAGICCOUNT ? Integer.BYTES : 0);\n+            return expectedBlockSize == blockSize;\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1600,1 +1600,1 @@\n-                checkExtraFields(cen, pos, size, csize, locoff,\n+                checkExtraFields(cen, pos, size, csize, locoff, diskNo,\n@@ -1634,0 +1634,1 @@\n+     * @param diskNo CEN Disk number value\n@@ -1640,1 +1641,1 @@\n-                                   long locoff, int startingOffset,\n+                                   long locoff, int diskNo,int startingOffset,\n@@ -1675,1 +1676,1 @@\n-                        csize, size, locoff);\n+                        csize, size, locoff, diskNo);\n@@ -1694,0 +1695,1 @@\n+     * @param diskNo CEN header Disk Number\n@@ -1697,1 +1699,1 @@\n-                                            long size, long locoff)\n+                                            long size, long locoff, int diskNo)\n@@ -1704,1 +1706,1 @@\n-                    locoff == ZIP64_MINVAL) {\n+                    locoff == ZIP64_MINVAL || diskNo == ZIP64_MINVAL32) {\n@@ -1712,1 +1714,1 @@\n-        if (!isZip64ExtBlockSizeValid(blockSize)) {\n+        if (!isZip64ExtBlockSizeValid(blockSize, csize, size, locoff, diskNo)) {\n@@ -1767,0 +1769,4 @@\n+     * @param csize CEN header compressed size value\n+     * @param size CEN header uncompressed size value\n+     * @param locoff CEN header LOC offset\n+     * @param diskNo CEN header Disk Number\n@@ -1769,14 +1775,9 @@\n-    private static boolean isZip64ExtBlockSizeValid(int blockSize) {\n-        \/*\n-         * As the fields must appear in order, the block size indicates which\n-         * fields to expect:\n-         *  8 - uncompressed size\n-         * 16 - uncompressed size, compressed size\n-         * 24 - uncompressed size, compressed sise, LOC Header offset\n-         * 28 - uncompressed size, compressed sise, LOC Header offset,\n-         * and Disk start number\n-         *\/\n-        return switch(blockSize) {\n-            case 8, 16, 24, 28 -> true;\n-            default -> false;\n-        };\n+    private static boolean isZip64ExtBlockSizeValid(int blockSize, long csize,\n+                                                    long size, long locoff,\n+                                                    int diskNo) {\n+        int expectedBlockSize =\n+                (csize == ZIP64_MINVAL ? Long.BYTES : 0) +\n+                        (size == ZIP64_MINVAL ? Long.BYTES : 0) +\n+                        (locoff == ZIP64_MINVAL ? Long.BYTES : 0) +\n+                        (diskNo == ZIP64_MINVAL32 ? Integer.BYTES : 0);\n+        return expectedBlockSize == blockSize;\n@@ -1784,0 +1785,1 @@\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -448,4 +448,0 @@\n-     private static final String MISSING_ZIP64_COMPRESSED_SIZE =\n-            \"Invalid Zip64 extra block, missing compressed size\";\n-     private static final String MISSING_ZIP64_LOC_OFFSET =\n-             \"Invalid Zip64 extra block, missing LOC offset value\";\n@@ -497,1 +493,1 @@\n-                        0x61, MISSING_ZIP64_COMPRESSED_SIZE),\n+                        0x61, INVALID_ZIP64_EXTRAHDR_SIZE),\n@@ -500,1 +496,1 @@\n-                        0x77, MISSING_ZIP64_LOC_OFFSET),\n+                        0x77, INVALID_ZIP64_EXTRAHDR_SIZE),\n@@ -503,1 +499,1 @@\n-                        0x77, MISSING_ZIP64_LOC_OFFSET)\n+                        0x77, INVALID_ZIP64_EXTRAHDR_SIZE)\n@@ -608,1 +604,1 @@\n-        assertTrue(ex.getMessage().matches(errorMessage),\n+        assertTrue(ex.getMessage().equals(errorMessage),\n@@ -635,1 +631,1 @@\n-        assertTrue(ex.getMessage().matches(errorMessage),\n+        assertTrue(ex.getMessage().equals(errorMessage),\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/MissingZIP64EntriesTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}