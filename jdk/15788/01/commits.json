[{"commit":{"message":"Cosmetic fixes\n\nFixing summary positioning along with some spacing and spelling issues."},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressRSetCoarsening.java"}],"sha":"8c73db563dc17fa62c84655a80df9b52349fd18b"},{"commit":{"message":"8315692: Parallelize gc\/stress\/TestStressRSetCoarsening.java test\n\nLooking at tier4 tests, gc\/stress tests take lots of time per test. For example TestStressRSetCoarsening takes about 33 minutes to runin fastdebug mode in macos arm cpu. This limits effective parallelism of tier4 testing on large machines. We can parallelize its `@run` configs to improve effective parallelism for tier4. Below are some of the observation from before any change, partial parallelization and full parallelization:\n\n* before_release                 : **585.70s user 23.80s system 106% cpu 9:32.16 total**\n* before_fastdebug               : **2033.77s user 30.04s system 105% cpu 32:43.10 total**\n* fully-parallelized_fastdebug   : **2246.94s user 36.97s system 135% cpu 28:07.24 total**\n* fully-parallelized_release     : **463.52s user 31.54s system 234% cpu 3:31.19 total**\n* partially-parallelized_release : **461.15s user 20.88s system 257% cpu 3:06.91 total**\n\nEven though partial parallelization shows better results it has anomaly 33%-50% of the time where the run results are same as before_release. I have runn each of the above combinations multiple times to establish a consistency and fully parallel gives us the most benefit in terms of total time without deviating too much on user and system times."},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressRSetCoarsening.java"}],"sha":"004bda6c95893385c8a58a9e26d8611d44fbbac3"}]