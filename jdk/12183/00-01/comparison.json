{"files":[{"patch":"@@ -1244,1 +1244,1 @@\n-  assert(method != nullptr, \"method should not be nullptr\");\n+  assert(method != nullptr, \"method should not be null\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1462,1 +1462,1 @@\n-      JVMCI_THROW_MSG_(InternalError, \"Constant was unexpectedly nullptr\", Handle());\n+      JVMCI_THROW_MSG_(InternalError, \"Constant was unexpectedly null\", Handle());\n@@ -1475,1 +1475,1 @@\n-  assert(!obj.is_null(), \"should only create handle for non-nullptr oops\");\n+  assert(!obj.is_null(), \"should only create handle for non-null oops\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    assert(obj != nullptr, \"nullptr field access of %s.%s\", #className, field_name); \\\n+    assert(obj != nullptr, \"null field access of %s.%s\", #className, field_name);       \\\n@@ -228,1 +228,1 @@\n-      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);         \\\n+      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);      \\\n@@ -235,2 +235,2 @@\n-      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);         \\\n-      assert(className::klass() != nullptr, \"Class not yet loaded: \" #className);                                            \\\n+      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);      \\\n+      assert(className::klass() != nullptr, \"Class not yet loaded: \" #className);                                         \\\n@@ -243,1 +243,1 @@\n-      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);         \\\n+      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);      \\\n@@ -249,1 +249,1 @@\n-      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);         \\\n+      assert(className::klass() != nullptr && className::klass()->is_linked(), \"Class not yet linked: \" #className);      \\\n@@ -624,2 +624,2 @@\n-    assert(obj.is_non_null(), \"nullptr field access of %s.%s\", #className, field_name);                                     \\\n-    assert(jvmciEnv->isa_##className(obj), \"wrong class, \" #className \" expected, found %s\", jvmciEnv->klass_name(obj)); \\\n+    assert(obj.is_non_null(), \"null field access of %s.%s\", #className, field_name);                                              \\\n+    assert(jvmciEnv->isa_##className(obj), \"wrong class, \" #className \" expected, found %s\", jvmciEnv->klass_name(obj));          \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -387,7 +387,7 @@\n-#define JNI_START_CLASS(simpleClassName, fullClassName)                                             \\\n-  START_CLASS(simpleClassName, fullClassName)                                                       \\\n-  friend class JNIJVMCI;                                                                            \\\n-  private:                                                                                          \\\n-  static void check(JVMCIEnv* jvmciEnv, JVMCIObject obj, const char* field_name, jfieldID offset);  \\\n-  static jclass _class;                                                                             \\\n-public:                                                                                             \\\n+#define JNI_START_CLASS(simpleClassName, fullClassName)                                                \\\n+  START_CLASS(simpleClassName, fullClassName)                                                          \\\n+  friend class JNIJVMCI;                                                                               \\\n+  private:                                                                                             \\\n+  static void check(JVMCIEnv* jvmciEnv, JVMCIObject obj, const char* field_name, jfieldID offset);     \\\n+  static jclass _class;                                                                                \\\n+public:                                                                                                \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  JVMCIObjectArray(void* v): JVMCIArray() { assert(v == nullptr, \"must be nullptr\"); }\n+  JVMCIObjectArray(void* v): JVMCIArray() { assert(v == nullptr, \"must be null\"); }\n@@ -77,1 +77,1 @@\n-  JVMCIPrimitiveArray(void* v): JVMCIArray() { assert(v == nullptr, \"must be nullptr\"); }\n+  JVMCIPrimitiveArray(void* v): JVMCIArray() { assert(v == nullptr, \"must be null\"); }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciObject.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}