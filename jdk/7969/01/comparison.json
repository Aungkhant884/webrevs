{"files":[{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import javax.swing.Action;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4525475\n+ * @summary This testcase tests JDK-4525475 bug fix, checks whether JFileChooser\n+ *          allows modification to the file-system by way of the \"New Folder\"\n+ *          button or not, ideally a read-only JFileChooser shouldn't allow it.\n+ * @run main JFileChooserReadOnlyTest\n+ *\/\n+public class JFileChooserReadOnlyTest {\n+\n+    private static volatile boolean result = true;\n+    private static volatile boolean newFolderFound = false;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            if (!setLookAndFeel(laf)) {\n+                continue;\n+            }\n+\n+            \/\/ Test1, Read Only JFileChooser\n+            final AtomicBoolean readOnly = new AtomicBoolean(true);\n+            SwingUtilities.invokeAndWait(\n+                    () -> createAndTestCustomFileChooser(readOnly.get()));\n+            System.out.println(\"Its a Read Only JFileChooser \" +\n+                               (newFolderFound ? \"but it has\" :\n+                                \"and it doesn't have\") +\n+                               \" a New Folder Button found\" +\n+                               \", So the Test1 \" +\n+                               (result ? \"Passed\" : \"Failed\") + \" for \" + laf);\n+\n+            \/\/ Test2, Read\/Write JFileChooser\n+            if (!(laf.contains(\"Motif\") || laf.contains(\"Aqua\"))) {\n+                readOnly.set(false);\n+                SwingUtilities.invokeAndWait(\n+                        () -> createAndTestCustomFileChooser(readOnly.get()));\n+                System.out.println(\"Its a not a Read Only JFileChooser \" +\n+                                   (newFolderFound ? \"and it has\" :\n+                                    \"but it doesn't have\") +\n+                                   \" a New Folder Button\" + \", So the Test2 \" +\n+                                   (result ? \"Passed\" : \"Failed\") + \" for \" +\n+                                   laf);\n+            }\n+\n+            if (result) {\n+                System.out.println(\"Test Passed for \" + laf);\n+            } else {\n+                throw new RuntimeException(\n+                        \"Test Failed, JFileChooser readOnly flag is not \" +\n+                        \"working properly for \" + laf);\n+            }\n+        }\n+    }\n+\n+    private static void createAndTestCustomFileChooser(boolean readOnly) {\n+        newFolderFound = false;\n+        UIManager.put(\"FileChooser.readOnly\", Boolean.valueOf(readOnly));\n+        JFileChooser jfc = new JFileChooser();\n+        checkNewFolderButton(jfc, readOnly);\n+        result = readOnly ^ newFolderFound;\n+    }\n+\n+    private static void checkNewFolderButton(Container c, boolean readOnly) {\n+        int n = c.getComponentCount();\n+        for (int i = 0; i < n; i++) {\n+            if (newFolderFound) {\n+                break;\n+            }\n+            Component comp = c.getComponent(i);\n+            if (comp instanceof JButton) {\n+                JButton b = (JButton) comp;\n+                Action action = b.getAction();\n+                if (action != null) {\n+                    String name = (String) action.getValue(Action.NAME);\n+                    if (name != null && name.equals(\"New Folder\")) {\n+                        newFolderFound = true;\n+                        System.out.println(\n+                                \"New Folder Button Found when readOnly = \" +\n+                                readOnly);\n+                    }\n+                }\n+            } else if (comp instanceof Container) {\n+                checkNewFolderButton((Container) comp, readOnly);\n+            }\n+        }\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/4525475\/JFileChooserReadOnlyTest.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}