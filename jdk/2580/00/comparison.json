{"files":[{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.net.www;\n-\n-\/**\n- * An exception thrown by the MimeLauncher when it is unable to launch\n- * an external content viewer.\n- *\n- * @author      Sunita Mani\n- *\/\n-\n-public class ApplicationLaunchException extends Exception {\n-    @java.io.Serial\n-    private static final long serialVersionUID = -4782286141289536883L;\n-\n-    public ApplicationLaunchException(String reason) {\n-        super(reason);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ApplicationLaunchException.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,53 +207,0 @@\n-    \/**\n-     * Invoke the MIME type specific behavior for this MIME type.\n-     * Returned value can be one of several types:\n-     * <ol>\n-     * <li>A thread -- the caller can choose when to launch this thread.\n-     * <li>A string -- the string is loaded into the browser directly.\n-     * <li>An input stream -- the caller can read from this byte stream and\n-     *     will typically store the results in a file.\n-     * <li>A document (?) --\n-     * <\/ol>\n-     *\/\n-    public Object launch(java.net.URLConnection urlc, InputStream is, MimeTable mt) throws ApplicationLaunchException {\n-        switch (action) {\n-        case SAVE_TO_FILE:\n-            \/\/ REMIND: is this really the right thing to do?\n-            try {\n-                return is;\n-            } catch(Exception e) {\n-                \/\/ I18N\n-                return \"Load to file failed:\\n\" + e;\n-            }\n-\n-        case LOAD_INTO_BROWSER:\n-            \/\/ REMIND: invoke the content handler?\n-            \/\/ may be the right thing to do, may not be -- short term\n-            \/\/ where docs are not loaded asynch, loading and returning\n-            \/\/ the content is the right thing to do.\n-            try {\n-                return urlc.getContent();\n-            } catch (Exception e) {\n-                return null;\n-            }\n-\n-        case LAUNCH_APPLICATION:\n-            {\n-                String threadName = command;\n-                int fst = threadName.indexOf(' ');\n-                if (fst > 0) {\n-                    threadName = threadName.substring(0, fst);\n-                }\n-\n-                return new MimeLauncher(this, urlc, is,\n-                                        mt.getTempFileTemplate(), threadName);\n-            }\n-\n-        case UNKNOWN:\n-            \/\/ REMIND: What to do here?\n-            return null;\n-        }\n-\n-        return null;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeEntry.java","additions":1,"deletions":54,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1,205 +0,0 @@\n-\/*\n- * Copyright (c) 1994, 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.net.www;\n-import java.net.URL;\n-import java.io.*;\n-import java.util.StringTokenizer;\n-import sun.security.action.GetPropertyAction;\n-\n-class MimeLauncher extends Thread {\n-    java.net.URLConnection uc;\n-    MimeEntry m;\n-    String genericTempFileTemplate;\n-    InputStream is;\n-    String execPath;\n-\n-    MimeLauncher (MimeEntry M, java.net.URLConnection uc,\n-                  InputStream is, String tempFileTemplate, String threadName) throws ApplicationLaunchException {\n-        super(null, null, threadName, 0, false);\n-        m = M;\n-        this.uc = uc;\n-        this.is = is;\n-        genericTempFileTemplate = tempFileTemplate;\n-\n-        \/* get the application to launch *\/\n-        String launchString = m.getLaunchString();\n-\n-        \/* get a valid path to launch application - sets\n-           the execPath instance variable with the correct path.\n-         *\/\n-        if (!findExecutablePath(launchString)) {\n-            \/* strip off parameters i.e %s *\/\n-            String appName;\n-            int index = launchString.indexOf(' ');\n-            if (index != -1) {\n-                appName = launchString.substring(0, index);\n-            }\n-            else {\n-                appName = launchString;\n-            }\n-            throw new ApplicationLaunchException(appName);\n-        }\n-    }\n-\n-    protected String getTempFileName(URL url, String template) {\n-        String tempFilename = template;\n-\n-        \/\/ Replace all but last occurrance of \"%s\" with timestamp to insure\n-        \/\/ uniqueness.  There's a subtle behavior here: if there is anything\n-        \/\/ _after_ the last \"%s\" we need to append it so that unusual launch\n-        \/\/ strings that have the datafile in the middle can still be used.\n-        int wildcard = tempFilename.lastIndexOf(\"%s\");\n-        String prefix = tempFilename.substring(0, wildcard);\n-\n-        String suffix = \"\";\n-        if (wildcard < tempFilename.length() - 2) {\n-            suffix = tempFilename.substring(wildcard + 2);\n-        }\n-\n-        long timestamp = System.currentTimeMillis()\/1000;\n-        int argIndex = 0;\n-        while ((argIndex = prefix.indexOf(\"%s\")) >= 0) {\n-            prefix = prefix.substring(0, argIndex)\n-                + timestamp\n-                + prefix.substring(argIndex + 2);\n-        }\n-\n-        \/\/ Add a file name and file-extension if known\n-        String filename = url.getFile();\n-\n-        String extension = \"\";\n-        int dot = filename.lastIndexOf('.');\n-\n-        \/\/ BugId 4084826:  Temp MIME file names not always valid.\n-        \/\/ Fix:  don't allow slashes in the file name or extension.\n-        if (dot >= 0 && dot > filename.lastIndexOf('\/')) {\n-            extension = filename.substring(dot);\n-        }\n-\n-        filename = \"HJ\" + url.hashCode();\n-\n-        tempFilename = prefix + filename + timestamp + extension + suffix;\n-\n-        return tempFilename;\n-    }\n-\n-    public void run() {\n-        try {\n-            String ofn = m.getTempFileTemplate();\n-            if (ofn == null) {\n-                ofn = genericTempFileTemplate;\n-            }\n-\n-            ofn = getTempFileName(uc.getURL(), ofn);\n-            try {\n-                OutputStream os = new FileOutputStream(ofn);\n-                byte buf[] = new byte[2048];\n-                int i = 0;\n-                try {\n-                    while ((i = is.read(buf)) >= 0) {\n-                        os.write(buf, 0, i);\n-                    }\n-                } catch(IOException e) {\n-                  \/\/System.err.println(\"Exception in write loop \" + i);\n-                  \/\/e.printStackTrace();\n-                } finally {\n-                    os.close();\n-                    is.close();\n-                }\n-            } catch(IOException e) {\n-              \/\/System.err.println(\"Exception in input or output stream\");\n-              \/\/e.printStackTrace();\n-            }\n-\n-            int inx = 0;\n-            String c = execPath;\n-            while ((inx = c.indexOf(\"%t\")) >= 0) {\n-                c = c.substring(0, inx) + uc.getContentType()\n-                    + c.substring(inx + 2);\n-            }\n-\n-            boolean substituted = false;\n-            while ((inx = c.indexOf(\"%s\")) >= 0) {\n-                c = c.substring(0, inx) + ofn + c.substring(inx + 2);\n-                substituted = true;\n-            }\n-            if (!substituted)\n-                c = c + \" <\" + ofn;\n-\n-            \/\/ System.out.println(\"Execing \" +c);\n-\n-            Runtime.getRuntime().exec(c);\n-        } catch(IOException e) {\n-        }\n-    }\n-\n-    \/* This method determines the path for the launcher application\n-       and sets the execPath instance variable.  It uses the exec.path\n-       property to obtain a list of paths that is in turn used to\n-       location the application.  If a valid path is not found, it\n-       returns false else true.  *\/\n-    private boolean findExecutablePath(String str) {\n-        if (str == null || str.isEmpty()) {\n-            return false;\n-        }\n-\n-        String command;\n-        int index = str.indexOf(' ');\n-        if (index != -1) {\n-            command = str.substring(0, index);\n-        }\n-        else {\n-            command = str;\n-        }\n-\n-        File f = new File(command);\n-        if (f.isFile()) {\n-            \/\/ Already executable as it is\n-            execPath = str;\n-            return true;\n-        }\n-\n-        String execPathList;\n-        execPathList = GetPropertyAction.privilegedGetProperty(\"exec.path\");\n-        if (execPathList == null) {\n-            \/\/ exec.path property not set\n-            return false;\n-        }\n-\n-        StringTokenizer iter = new StringTokenizer(execPathList, \"|\");\n-        while (iter.hasMoreElements()) {\n-            String prefix = (String)iter.nextElement();\n-            String fullCmd = prefix + File.separator + command;\n-            f = new File(fullCmd);\n-            if (f.isFile()) {\n-                execPath = prefix + File.separator + str;\n-                return true;\n-            }\n-        }\n-\n-        return false; \/\/ application not found in exec.path\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeLauncher.java","additions":0,"deletions":205,"binary":false,"changes":205,"status":"deleted"}]}