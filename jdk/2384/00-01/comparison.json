{"files":[{"patch":"@@ -24,1 +24,0 @@\n-import java.awt.BorderLayout;\n@@ -27,0 +26,1 @@\n+import java.awt.Dimension;\n@@ -28,3 +28,0 @@\n-import java.awt.Insets;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n@@ -34,1 +31,0 @@\n-import javax.swing.BoxLayout;\n@@ -36,1 +32,0 @@\n-import javax.swing.JButton;\n@@ -38,6 +33,0 @@\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import javax.swing.WindowConstants;\n-\n-import static java.awt.event.KeyEvent.VK_TAB;\n@@ -51,1 +40,0 @@\n- * @library \/lib\/client\/\n@@ -53,1 +41,0 @@\n- * @build ExtendedRobot\n@@ -58,4 +45,0 @@\n-    private static JFrame frame;\n-    private static JButton testButton;\n-    private static int locx, locy, frw, frh;\n-\n@@ -68,55 +51,15 @@\n-            BufferedImage imageFocus1 = null;\n-            BufferedImage imageFocus2 = null;\n-            ExtendedRobot robot = new ExtendedRobot();\n-\n-            SwingUtilities.invokeAndWait(() -> {\n-                frame = new JFrame(\"Test frame\");\n-                JPanel panel = new JPanel();\n-                panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n-                testButton = new JButton(\"Start\");\n-                panel.add(testButton);\n-                for (int i = 1; i < 6; i++) {\n-                    JCheckBox cb = new JCheckBox(\" Box No. \" + i, new MyIcon(Color.GREEN));\n-                    panel.add(cb);\n-                }\n-\n-                frame.setLayout(new BorderLayout());\n-                frame.add(panel, BorderLayout.CENTER);\n-                frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n-                frame.setLocationRelativeTo(null);\n-                frame.pack();\n-                frame.setVisible(true);\n-\n-            });\n-            robot.setAutoDelay(200);\n-            robot.delay(1000);\n-            robot.waitForIdle(1000);\n-\n-            Rectangle bounds = frame.getBounds();\n-            Insets insets = frame.getInsets();\n-            locx = bounds.x + insets.left;\n-            locy = bounds.y + insets.top;\n-            frw = bounds.width - insets.left - insets.right;\n-            frh = bounds.height - insets.top - insets.bottom;\n-\n-            Point btnLoc = testButton.getLocationOnScreen();\n-            robot.mouseMove(btnLoc.x + 10, btnLoc.y + 10);\n-            robot.click();\n-\n-            robot.keyPress(VK_TAB);\n-            robot.keyRelease(VK_TAB);\n-\n-            robot.delay(1000);\n-\n-            imageFocus1 = robot.createScreenCapture(new Rectangle(locx, locy, frw, frh));\n-\n-            robot.keyPress(VK_TAB);\n-            robot.keyRelease(VK_TAB);\n-\n-            robot.delay(1000);\n-\n-            imageFocus2 = robot.createScreenCapture(new Rectangle(locx, locy, frw, frh));\n-\n-            if (Util.compareBufferedImages(imageFocus1, imageFocus2)) {\n-                ImageIO.write(imageFocus1, \"png\", new File(\"imageFocus1.png\"));\n-                ImageIO.write(imageFocus2, \"png\", new File(\"imageFocus2.png\"));\n+            BufferedImage imageNoFocus = new BufferedImage(100, 50,\n+                    BufferedImage.TYPE_INT_ARGB);\n+            BufferedImage imageFocus = new BufferedImage(100, 50,\n+                    BufferedImage.TYPE_INT_ARGB);\n+\n+            CustomCheckBox checkbox = new CustomCheckBox(\"Test\", new MyIcon(Color.GREEN));\n+            checkbox.setSize(100, 50);\n+            checkbox.setFocused(false);\n+            checkbox.paint(imageNoFocus.createGraphics());\n+            checkbox.setFocused(true);\n+            checkbox.paint(imageFocus.createGraphics());\n+\n+            if (Util.compareBufferedImages(imageFocus, imageNoFocus)) {\n+                ImageIO.write(imageFocus, \"png\", new File(\"imageFocus.png\"));\n+                ImageIO.write(imageNoFocus, \"png\", new File(\"imageNoFocus.png\"));\n@@ -126,3 +69,0 @@\n-            if (frame != null) {\n-                frame.dispose();\n-            }\n@@ -156,0 +96,21 @@\n+\n+    class CustomCheckBox extends JCheckBox {\n+        public CustomCheckBox(String label, Icon icon) {\n+            super(label, icon);\n+        }\n+\n+        private boolean focused = false;\n+        public void setFocused(boolean focused) {\n+            this.focused = focused;\n+        }\n+\n+        @Override\n+        public boolean hasFocus() {\n+            return focused;\n+        }\n+\n+        @Override\n+        public Dimension getMaximumSize() {\n+            return new Dimension(4, 4);\n+        }\n+    }\n","filename":"test\/jdk\/javax\/swing\/JCheckBox\/ImageCheckboxFocus\/ImageCheckboxTest.java","additions":37,"deletions":76,"binary":false,"changes":113,"status":"modified"}]}