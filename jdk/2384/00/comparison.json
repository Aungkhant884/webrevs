{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,1 +172,7 @@\n-            altIcon.paintIcon(c, g, iconRect.x, iconRect.y);\n+            int offset = 0;\n+            if (b.isFocusOwner()) {\n+                offset = 2;\n+                altIcon = AquaFocus.createFocusedIcon(altIcon, c, 2);\n+            }\n+\n+            altIcon.paintIcon(c, g, iconRect.x - offset, iconRect.y - offset);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonLabeledUI.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.BoxLayout;\n+import javax.swing.Icon;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+import static java.awt.event.KeyEvent.VK_TAB;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8216358\n+ * @summary [macos] The focus is invisible when tab to \"Image Radio Buttons\" and \"Image CheckBoxes\"\n+ * @library ..\/..\/regtesthelpers\/\n+ * @library \/lib\/client\/\n+ * @build Util\n+ * @build ExtendedRobot\n+ * @run main ImageCheckboxTest\n+ *\/\n+\n+public class ImageCheckboxTest {\n+    private static JFrame frame;\n+    private static JButton testButton;\n+    private static int locx, locy, frw, frh;\n+\n+    public static void main(String[] args) throws Exception {\n+        new ImageCheckboxTest().performTest();\n+    }\n+\n+    public void performTest() throws Exception {\n+        try {\n+            BufferedImage imageFocus1 = null;\n+            BufferedImage imageFocus2 = null;\n+            ExtendedRobot robot = new ExtendedRobot();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"Test frame\");\n+                JPanel panel = new JPanel();\n+                panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n+                testButton = new JButton(\"Start\");\n+                panel.add(testButton);\n+                for (int i = 1; i < 6; i++) {\n+                    JCheckBox cb = new JCheckBox(\" Box No. \" + i, new MyIcon(Color.GREEN));\n+                    panel.add(cb);\n+                }\n+\n+                frame.setLayout(new BorderLayout());\n+                frame.add(panel, BorderLayout.CENTER);\n+                frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+                frame.setLocationRelativeTo(null);\n+                frame.pack();\n+                frame.setVisible(true);\n+\n+            });\n+            robot.setAutoDelay(200);\n+            robot.delay(1000);\n+            robot.waitForIdle(1000);\n+\n+            Rectangle bounds = frame.getBounds();\n+            Insets insets = frame.getInsets();\n+            locx = bounds.x + insets.left;\n+            locy = bounds.y + insets.top;\n+            frw = bounds.width - insets.left - insets.right;\n+            frh = bounds.height - insets.top - insets.bottom;\n+\n+            Point btnLoc = testButton.getLocationOnScreen();\n+            robot.mouseMove(btnLoc.x + 10, btnLoc.y + 10);\n+            robot.click();\n+\n+            robot.keyPress(VK_TAB);\n+            robot.keyRelease(VK_TAB);\n+\n+            robot.delay(1000);\n+\n+            imageFocus1 = robot.createScreenCapture(new Rectangle(locx, locy, frw, frh));\n+\n+            robot.keyPress(VK_TAB);\n+            robot.keyRelease(VK_TAB);\n+\n+            robot.delay(1000);\n+\n+            imageFocus2 = robot.createScreenCapture(new Rectangle(locx, locy, frw, frh));\n+\n+            if (Util.compareBufferedImages(imageFocus1, imageFocus2)) {\n+                ImageIO.write(imageFocus1, \"png\", new File(\"imageFocus1.png\"));\n+                ImageIO.write(imageFocus2, \"png\", new File(\"imageFocus2.png\"));\n+                throw new Exception(\"Changing focus is not visualized\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+\n+    class MyIcon implements Icon {\n+        Color color;\n+        public MyIcon(Color color) {\n+            this.color = color;\n+        }\n+\n+        @Override\n+        public void paintIcon(Component c, Graphics g, int x, int y) {\n+            Color old = g.getColor();\n+            g.setColor(color);\n+            g.fillArc(x+2, y+2, 12, 12, 0, 360);\n+            g.setColor(old);\n+        }\n+\n+        @Override\n+        public int getIconWidth() {\n+            return 18;\n+        }\n+\n+        @Override\n+        public int getIconHeight() {\n+            return 18;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JCheckBox\/ImageCheckboxFocus\/ImageCheckboxTest.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}