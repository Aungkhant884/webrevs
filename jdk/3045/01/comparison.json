{"files":[{"patch":"@@ -9228,1 +9228,0 @@\n-\n@@ -9241,1 +9240,2 @@\n-\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9243,0 +9243,1 @@\n+\n@@ -9258,0 +9259,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9259,0 +9262,1 @@\n+\n@@ -9274,0 +9278,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9275,0 +9281,1 @@\n+\n@@ -9289,0 +9296,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9290,0 +9299,1 @@\n+\n@@ -9304,0 +9314,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9305,0 +9317,1 @@\n+\n@@ -9319,0 +9332,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9335,0 +9350,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9352,0 +9369,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9369,1 +9388,2 @@\n-\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9386,0 +9406,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9402,1 +9424,2 @@\n-\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9419,0 +9442,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9435,0 +9460,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9436,0 +9463,1 @@\n+\n@@ -9452,0 +9480,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9453,0 +9483,1 @@\n+\n@@ -9469,0 +9500,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9470,0 +9503,1 @@\n+\n@@ -9486,0 +9520,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9487,0 +9523,1 @@\n+\n@@ -9503,0 +9540,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9504,0 +9543,1 @@\n+\n@@ -9520,0 +9560,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9538,0 +9580,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9556,0 +9600,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9574,0 +9620,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9592,0 +9640,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9610,0 +9660,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9628,0 +9680,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -9629,1 +9683,0 @@\n-  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));\n@@ -9631,0 +9684,1 @@\n+  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-dnl Copyright (c) 2016, Red Hat Inc. All rights reserved.\n+dnl Copyright (c) 2016, 2021, Red Hat Inc. All rights reserved.\n@@ -41,1 +41,6 @@\n-instruct compareAndExchange$1$5(iReg$2NoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct compareAndExchange$1$6(iReg$2NoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+  ifelse($1$6,PAcq,'predicate(needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0));`,\n+         $1,P,'predicate(n->as_LoadStore()->barrier_data() == 0);`,\n+         $6,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -43,2 +48,1 @@\n-  ifelse($5,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -47,1 +51,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -51,1 +55,1 @@\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+               Assembler::$4, \/*acquire*\/ ifelse($6,Acq,true,false), \/*release*\/ true,\n@@ -58,0 +62,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -59,0 +65,1 @@\n+  ifelse($7,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -60,2 +67,1 @@\n-  ifelse($7,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($7,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -64,1 +70,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($7,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -67,3 +73,2 @@\n-    __ $5(rscratch2, $oldval$$Register);\n-    __ cmpxchg($mem$$Register, rscratch2, $newval$$Register,\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register,\n+               Assembler::$4, \/*acquire*\/ ifelse($7,Acq,true,false), \/*release*\/ true,\n@@ -75,3 +80,3 @@\n-CAS_INSN4(B,I,byte,byte,uxtbw,sxtbw)\n-CAS_INSN4(S,I,short,halfword,uxthw,sxthw)\n-CAS_INSN(I,I,int,word)\n+CAS_INSN4(B,I,byte,byte,b,sxtbw)\n+CAS_INSN4(S,I,short,halfword,s,sxthw)\n+CAS_INSN(I,I,int,word,w)\n@@ -79,1 +84,1 @@\n-CAS_INSN(N,N,narrow oop,word)\n+CAS_INSN(N,N,narrow oop,word,w)\n@@ -82,6 +87,6 @@\n-dnl CAS_INSN4(B,I,byte,byte,uxtbw,sxtbw,Acq)\n-dnl CAS_INSN4(S,I,short,halfword,uxthw,sxthw,Acq)\n-dnl CAS_INSN(I,I,int,word,Acq)\n-dnl CAS_INSN(L,L,long,xword,Acq)\n-dnl CAS_INSN(N,N,narrow oop,word,Acq)\n-dnl CAS_INSN(P,P,ptr,xword,Acq)\n+CAS_INSN4(B,I,byte,byte,b,sxtbw,Acq)\n+CAS_INSN4(S,I,short,halfword,s,sxthw,Acq)\n+CAS_INSN(I,I,int,word,w,Acq)\n+CAS_INSN(L,L,long,xword,,Acq)\n+CAS_INSN(N,N,narrow oop,word,w,Acq)\n+CAS_INSN(P,P,ptr,xword,,Acq)\n@@ -91,0 +96,2 @@\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -92,0 +99,1 @@\n+  ifelse($6,Acq,'  predicate(needs_acquiring_load_exclusive(n));`)\n@@ -93,2 +101,1 @@\n-  ifelse($6,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -97,1 +104,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -101,2 +108,1 @@\n-    __ uxt$5(rscratch2, $oldval$$Register);\n-    __ cmpxchg($mem$$Register, rscratch2, $newval$$Register,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register,\n@@ -111,1 +117,6 @@\n-instruct weakCompareAndSwap$1$5(iRegINoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+\/\/ This encoding class is generated automatically from cas.m4.\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct weakCompareAndSwap$1$6(iRegINoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+  ifelse($1$6,PAcq,'predicate(needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0));`,\n+         $1,P,'predicate(n->as_LoadStore()->barrier_data() == 0);`,\n+         $6,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -113,2 +124,1 @@\n-  ifelse($5,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -117,1 +127,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -122,1 +132,1 @@\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+               Assembler::$4, \/*acquire*\/ ifelse($6,Acq,true,false), \/*release*\/ true,\n@@ -128,3 +138,3 @@\n-CAS_INSN2(B,I,byte,byte,bw)\n-CAS_INSN2(S,I,short,halfword,hw)\n-CAS_INSN3(I,I,int,word)\n+CAS_INSN2(B,I,byte,byte,b)\n+CAS_INSN2(S,I,short,halfword,s)\n+CAS_INSN3(I,I,int,word,w)\n@@ -132,1 +142,1 @@\n-CAS_INSN3(N,N,narrow oop,word)\n+CAS_INSN3(N,N,narrow oop,word,w)\n@@ -134,6 +144,6 @@\n-dnl CAS_INSN2(B,I,byte,byte,bw,Acq)\n-dnl CAS_INSN2(S,I,short,halfword,hw,Acq)\n-dnl CAS_INSN3(I,I,int,word,Acq)\n-dnl CAS_INSN3(L,L,long,xword,Acq)\n-dnl CAS_INSN3(N,N,narrow oop,word,Acq)\n-dnl CAS_INSN3(P,P,ptr,xword,Acq)\n+CAS_INSN2(B,I,byte,byte,b,Acq)\n+CAS_INSN2(S,I,short,halfword,s,Acq)\n+CAS_INSN3(I,I,int,word,w,Acq)\n+CAS_INSN3(L,L,long,xword,,Acq)\n+CAS_INSN3(N,N,narrow oop,word,w,Acq)\n+CAS_INSN3(P,P,ptr,xword,,Acq)\n","filename":"src\/hotspot\/cpu\/aarch64\/cas.m4","additions":52,"deletions":42,"binary":false,"changes":94,"status":"modified"}]}