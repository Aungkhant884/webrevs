{"files":[{"patch":"@@ -9228,1 +9228,0 @@\n-\n@@ -9243,0 +9242,1 @@\n+\n@@ -9259,0 +9259,1 @@\n+\n@@ -9275,0 +9276,1 @@\n+\n@@ -9290,0 +9292,1 @@\n+\n@@ -9305,0 +9308,1 @@\n+\n@@ -9369,1 +9373,0 @@\n-\n@@ -9402,1 +9405,0 @@\n-\n@@ -9436,0 +9438,1 @@\n+\n@@ -9453,0 +9456,1 @@\n+\n@@ -9470,0 +9474,1 @@\n+\n@@ -9487,0 +9492,1 @@\n+\n@@ -9504,0 +9510,1 @@\n+\n@@ -9629,1 +9636,0 @@\n-  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));\n@@ -9631,0 +9637,1 @@\n+  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-dnl Copyright (c) 2016, Red Hat Inc. All rights reserved.\n+dnl Copyright (c) 2016, 2021, Red Hat Inc. All rights reserved.\n@@ -41,1 +41,4 @@\n-instruct compareAndExchange$1$5(iReg$2NoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+instruct compareAndExchange$1$6(iReg$2NoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+  ifelse($1$6,PAcq,'predicate(needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0));`,\n+         $1,P,'predicate(n->as_LoadStore()->barrier_data() == 0);`,\n+         $6,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -43,2 +46,1 @@\n-  ifelse($5,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -47,1 +49,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -51,1 +53,1 @@\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+               Assembler::$4, \/*acquire*\/ ifelse($6,Acq,true,false), \/*release*\/ true,\n@@ -59,0 +61,1 @@\n+  ifelse($7,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -60,2 +63,1 @@\n-  ifelse($7,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($7,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -64,1 +66,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($7,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -67,3 +69,2 @@\n-    __ $5(rscratch2, $oldval$$Register);\n-    __ cmpxchg($mem$$Register, rscratch2, $newval$$Register,\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register,\n+               Assembler::$4, \/*acquire*\/ ifelse($7,Acq,true,false), \/*release*\/ true,\n@@ -75,3 +76,3 @@\n-CAS_INSN4(B,I,byte,byte,uxtbw,sxtbw)\n-CAS_INSN4(S,I,short,halfword,uxthw,sxthw)\n-CAS_INSN(I,I,int,word)\n+CAS_INSN4(B,I,byte,byte,b,sxtbw)\n+CAS_INSN4(S,I,short,halfword,s,sxthw)\n+CAS_INSN(I,I,int,word,w)\n@@ -79,1 +80,1 @@\n-CAS_INSN(N,N,narrow oop,word)\n+CAS_INSN(N,N,narrow oop,word,w)\n@@ -82,6 +83,6 @@\n-dnl CAS_INSN4(B,I,byte,byte,uxtbw,sxtbw,Acq)\n-dnl CAS_INSN4(S,I,short,halfword,uxthw,sxthw,Acq)\n-dnl CAS_INSN(I,I,int,word,Acq)\n-dnl CAS_INSN(L,L,long,xword,Acq)\n-dnl CAS_INSN(N,N,narrow oop,word,Acq)\n-dnl CAS_INSN(P,P,ptr,xword,Acq)\n+CAS_INSN4(B,I,byte,byte,b,sxtbw,Acq)\n+CAS_INSN4(S,I,short,halfword,s,sxthw,Acq)\n+CAS_INSN(I,I,int,word,w,Acq)\n+CAS_INSN(L,L,long,xword,,Acq)\n+CAS_INSN(N,N,narrow oop,word,w,Acq)\n+CAS_INSN(P,P,ptr,xword,,Acq)\n@@ -92,0 +93,1 @@\n+  ifelse($6,Acq,'  predicate(needs_acquiring_load_exclusive(n));`)\n@@ -93,2 +95,1 @@\n-  ifelse($6,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -97,1 +98,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -101,2 +102,1 @@\n-    __ uxt$5(rscratch2, $oldval$$Register);\n-    __ cmpxchg($mem$$Register, rscratch2, $newval$$Register,\n+    __ cmpxchg($mem$$Register, $oldval$$Register, $newval$$Register,\n@@ -111,1 +111,4 @@\n-instruct weakCompareAndSwap$1$5(iRegINoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+instruct weakCompareAndSwap$1$6(iRegINoSp res, indirect mem, iReg$2 oldval, iReg$2 newval, rFlagsReg cr) %{\n+  ifelse($1$6,PAcq,'predicate(needs_acquiring_load_exclusive(n) && (n->as_LoadStore()->barrier_data() == 0));`,\n+         $1,P,'predicate(n->as_LoadStore()->barrier_data() == 0);`,\n+         $6,Acq,'predicate(needs_acquiring_load_exclusive(n));`)\n@@ -113,2 +116,1 @@\n-  ifelse($5,Acq,'  predicate(needs_acquiring_load_exclusive(n));\n-  ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n+  ifelse($6,Acq,'ins_cost(VOLATILE_REF_COST);`,'  ins_cost(2 * VOLATILE_REF_COST);`)\n@@ -117,1 +119,1 @@\n-    \"cmpxchg $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg$5`'ifelse($6,Acq,_acq,) $res = $mem, $oldval, $newval\\t# ($3, weak) if $mem == $oldval then $mem <-- $newval\"\n@@ -122,1 +124,1 @@\n-               Assembler::$4, \/*acquire*\/ ifelse($5,Acq,true,false), \/*release*\/ true,\n+               Assembler::$4, \/*acquire*\/ ifelse($6,Acq,true,false), \/*release*\/ true,\n@@ -128,3 +130,3 @@\n-CAS_INSN2(B,I,byte,byte,bw)\n-CAS_INSN2(S,I,short,halfword,hw)\n-CAS_INSN3(I,I,int,word)\n+CAS_INSN2(B,I,byte,byte,b)\n+CAS_INSN2(S,I,short,halfword,s)\n+CAS_INSN3(I,I,int,word,w)\n@@ -132,1 +134,1 @@\n-CAS_INSN3(N,N,narrow oop,word)\n+CAS_INSN3(N,N,narrow oop,word,w)\n@@ -134,6 +136,6 @@\n-dnl CAS_INSN2(B,I,byte,byte,bw,Acq)\n-dnl CAS_INSN2(S,I,short,halfword,hw,Acq)\n-dnl CAS_INSN3(I,I,int,word,Acq)\n-dnl CAS_INSN3(L,L,long,xword,Acq)\n-dnl CAS_INSN3(N,N,narrow oop,word,Acq)\n-dnl CAS_INSN3(P,P,ptr,xword,Acq)\n+CAS_INSN2(B,I,byte,byte,b,Acq)\n+CAS_INSN2(S,I,short,halfword,s,Acq)\n+CAS_INSN3(I,I,int,word,w,Acq)\n+CAS_INSN3(L,L,long,xword,,Acq)\n+CAS_INSN3(N,N,narrow oop,word,w,Acq)\n+CAS_INSN3(P,P,ptr,xword,,Acq)\n","filename":"src\/hotspot\/cpu\/aarch64\/cas.m4","additions":44,"deletions":42,"binary":false,"changes":86,"status":"modified"}]}