{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,2 +121,5 @@\n-    static void check(Deflater def, byte[] in, int len,\n-                      byte[] out1, byte[] out2, boolean nowrap)\n+    \/*\n+     * This method checks if a given Deflater and Inflater pair can correctly compress and decompress data.\n+     * checks were performed for this functionality using various input scenarios and ByteBuffer instances.\n+     *\/\n+    static void check(Deflater def, byte[] in, int len, boolean nowrap)\n@@ -125,3 +128,4 @@\n-        Arrays.fill(out1, (byte)0);\n-        Arrays.fill(out2, (byte)0);\n-\n+        byte[] tempBuffer = new byte[len];\n+        byte[] out1, out2;\n+        int m = 0, n = 0;\n+        Inflater inf = new Inflater(nowrap);\n@@ -130,1 +134,0 @@\n-        int m = def.deflate(out1);\n@@ -132,3 +135,8 @@\n-        Inflater inf = new Inflater(nowrap);\n-        inf.setInput(out1, 0, m);\n-        int n = inf.inflate(out2);\n+        try(ByteArrayOutputStream baos = new ByteArrayOutputStream(len)) {\n+            while (!def.finished()) {\n+                int temp_counter = def.deflate(tempBuffer);\n+                m += temp_counter;\n+                baos.write(tempBuffer, 0, temp_counter);\n+            }\n+            out1 = baos.toByteArray();\n+            baos.reset();\n@@ -136,6 +144,15 @@\n-        if (n != len ||\n-            !Arrays.equals(Arrays.copyOf(in, len), Arrays.copyOf(out2, len)) ||\n-            inf.inflate(out2) != 0) {\n-            System.out.printf(\"m=%d, n=%d, len=%d, eq=%b%n\",\n-                              m, n, len, Arrays.equals(in, out2));\n-            throw new RuntimeException(\"De\/inflater failed:\" + def);\n+            inf.setInput(out1, 0, m);\n+\n+            while (!inf.finished()) {\n+                int temp_counter = inf.inflate(tempBuffer);\n+                n += temp_counter;\n+                baos.write(tempBuffer, 0, temp_counter);\n+            }\n+            out2 = baos.toByteArray();\n+            if (n != len ||\n+                !Arrays.equals(Arrays.copyOf(in, len), Arrays.copyOf(out2, len)) ||\n+                inf.inflate(out2) != 0) {\n+                System.out.printf(\"m=%d, n=%d, len=%d, eq=%b%n\",\n+                                  m, n, len, Arrays.equals(in, out2));\n+                throw new RuntimeException(\"De\/inflater failed:\" + def);\n+            }\n@@ -290,1 +307,1 @@\n-                        check(def, dataIn, len, dataOut1, dataOut2, dowrap);\n+                        check(def, dataIn, len, dowrap);\n","filename":"test\/jdk\/java\/util\/zip\/DeInflate.java","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"}]}