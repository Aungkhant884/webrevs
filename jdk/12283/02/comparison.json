{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,2 +121,1 @@\n-    static void check(Deflater def, byte[] in, int len,\n-                      byte[] out1, byte[] out2, boolean nowrap)\n+    static void check(Deflater def, byte[] in, int len, boolean nowrap)\n@@ -125,3 +124,1 @@\n-        Arrays.fill(out1, (byte)0);\n-        Arrays.fill(out2, (byte)0);\n-\n+        byte[] tempBuffer = new byte[len];\n@@ -130,1 +127,1 @@\n-        int m = def.deflate(out1);\n+        int m = 0;\n@@ -132,0 +129,8 @@\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);\n+        while (!def.finished()) {\n+            int temp_counter = def.deflate(tempBuffer);\n+            m += temp_counter;\n+            baos.write(tempBuffer, 0, temp_counter);\n+        }\n+        byte[] out1 = baos.toByteArray();\n+        baos.reset();\n@@ -134,1 +139,1 @@\n-        int n = inf.inflate(out2);\n+        int n = 0;\n@@ -136,0 +141,7 @@\n+        while (!inf.finished()) {\n+            int temp_counter = inf.inflate(tempBuffer);\n+            n += temp_counter;\n+            baos.write(tempBuffer, 0,  temp_counter);\n+        }\n+        byte[] out2 = baos.toByteArray();\n+        baos.close();\n@@ -290,1 +302,1 @@\n-                        check(def, dataIn, len, dataOut1, dataOut2, dowrap);\n+                        check(def, dataIn, len, dowrap);\n","filename":"test\/jdk\/java\/util\/zip\/DeInflate.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"}]}