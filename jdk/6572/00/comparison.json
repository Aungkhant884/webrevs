{"files":[{"patch":"@@ -348,1 +348,0 @@\n-  assert(ex_jvms->sp() == phi_map->_jvms->sp(), \"matching stack sizes\");\n@@ -352,1 +351,0 @@\n-  uint tos = ex_jvms->stkoff() + ex_jvms->sp();\n@@ -412,2 +410,2 @@\n-    \/\/ Skip everything in the JVMS after tos.  (The ex_oop follows.)\n-    if (i == tos)  i = ex_jvms->monoff();\n+    \/\/ Skip everything in the JVMS after the stack (included).  (The ex_oop follows.)\n+    if (i == ex_jvms->stkoff())  i = ex_jvms->monoff();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8275638\n+ * @summary GraphKit::combine_exception_states fails with \"matching stack sizes\" assert\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=dontinline,TestLateMHInlineExceptions::m -XX:+AlwaysIncrementalInline TestLateMHInlineExceptions\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:+AlwaysIncrementalInline TestLateMHInlineExceptions\n+ *\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class TestLateMHInlineExceptions {\n+    public static void main(String[] args) throws Throwable {\n+        TestLateMHInlineExceptions test = new TestLateMHInlineExceptions();\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(test);\n+            try {\n+                test1(null);\n+            } catch (NullPointerException npe) {\n+            }\n+            test2(test);\n+            test2(null);\n+        }\n+    }\n+\n+    void m() {\n+    }\n+\n+    static final MethodHandle mh;\n+\n+    static {\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        try {\n+            mh = lookup.findVirtual(TestLateMHInlineExceptions.class, \"m\", MethodType.methodType(void.class));\n+        } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        }\n+    }\n+\n+    private static void test1(TestLateMHInlineExceptions test) throws Throwable {\n+        mh.invokeExact(test);\n+    }\n+\n+    private static void test2(TestLateMHInlineExceptions test) throws Throwable {\n+        try {\n+            mh.invokeExact(test);\n+        } catch (NullPointerException npe) {\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestLateMHInlineExceptions.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}