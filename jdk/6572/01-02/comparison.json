{"files":[{"patch":"@@ -419,0 +419,5 @@\n+  \/\/ When inlining a virtual call, the null check at the call and the call itself can throw. These 2 paths have different\n+  \/\/ expression stacks which causes late inlining to break. The MH invoker is not expected to be called from a method wih\n+  \/\/ exception handlers. When there is no exception handler, GraphKit::builtin_throw() pops the stack which solves the issue\n+  \/\/ of late inlining with exceptions.\n+  assert(!jvms->method()->has_exception_handlers(), \"no exception handler expected\");\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -348,0 +348,1 @@\n+  assert(ex_jvms->sp() == phi_map->_jvms->sp(), \"matching stack sizes\");\n@@ -351,0 +352,1 @@\n+  uint tos = ex_jvms->stkoff() + ex_jvms->sp();\n@@ -410,2 +412,2 @@\n-    \/\/ Skip everything in the JVMS after the stack (included).  (The ex_oop follows.)\n-    if (i == ex_jvms->stkoff())  i = ex_jvms->monoff();\n+    \/\/ Skip everything in the JVMS after tos.  (The ex_oop follows.)\n+    if (i == tos)  i = ex_jvms->monoff();\n@@ -615,0 +617,7 @@\n+      if (!method()->has_exception_handlers()) {\n+        \/\/ We don't need to preserve the stack if there's no handler as the entire frame is going to be popped anyway.\n+        \/\/ This prevents issues with exception handling and late inlining.\n+        set_sp(0);\n+        clean_stack(0);\n+      }\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}