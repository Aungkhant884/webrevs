{"files":[{"patch":"@@ -322,8 +322,0 @@\n-\n-    if (MinInliningThreshold > 0) { \/\/ Deprecated heuristic\n-      intx counter_high_value = TieredCompilation ? InvocationCounter::count_limit \/ 2 : CompileThreshold \/ 2;\n-      if (!callee_method->was_executed_more_than(MIN2(MinInliningThreshold, counter_high_value))) {\n-        set_msg(\"executed < MinInliningThreshold times\");\n-        return true;\n-      }\n-    }\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -533,1 +533,0 @@\n-  { \"MinInliningThreshold\",         JDK_Version::jdk(18), JDK_Version::jdk(19), JDK_Version::jdk(20) },\n@@ -550,0 +549,1 @@\n+  { \"MinInliningThreshold\",         JDK_Version::jdk(18), JDK_Version::jdk(19), JDK_Version::jdk(20) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1349,5 +1349,0 @@\n-  product(intx, MinInliningThreshold, 0,                                    \\\n-          \"(Deprecated) The minimum invocation count a method needs to\"     \\\n-          \"have to be inlined\")                                             \\\n-          range(0, max_jint)                                                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}