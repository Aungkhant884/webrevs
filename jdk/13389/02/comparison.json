{"files":[{"patch":"@@ -2052,4 +2052,4 @@\n-    case T_BOOLEAN: value = obj->bool_field_acquire(displacement);  break;\n-    case T_BYTE:    value = obj->byte_field_acquire(displacement);  break;\n-    case T_SHORT:   value = obj->short_field_acquire(displacement); break;\n-    case T_CHAR:    value = obj->char_field_acquire(displacement);  break;\n+    case T_BOOLEAN: value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jboolean>(displacement)); break;\n+    case T_BYTE:    value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jbyte>(displacement));    break;\n+    case T_SHORT:   value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jshort>(displacement));   break;\n+    case T_CHAR:    value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jchar>(displacement));    break;\n@@ -2057,1 +2057,1 @@\n-    case T_INT:     value = obj->int_field_acquire(displacement);   break;\n+    case T_INT:     value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jint>(displacement));     break;\n@@ -2059,1 +2059,1 @@\n-    case T_LONG:    value = obj->long_field_acquire(displacement);  break;\n+    case T_LONG:    value = HeapAccess<MO_SEQ_CST>::load(obj->field_addr<jlong>(displacement));    break;\n@@ -2069,1 +2069,3 @@\n-      oop value = obj->obj_field_acquire(displacement);\n+      \/\/ Perform the read including any barriers required to make the reference strongly reachable\n+      \/\/ since it will be wrapped as a JavaConstant.\n+      oop value = obj->obj_field_access<MO_SEQ_CST | ON_UNKNOWN_OOP_REF>(displacement);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -942,1 +942,3 @@\n-    object_handles()->release(_oop_handles.adr_at(num_alive), to_release);\n+    if (to_release != 0) {\n+      object_handles()->release(_oop_handles.adr_at(num_alive), to_release);\n+    }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}