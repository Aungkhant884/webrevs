{"files":[{"patch":"@@ -516,0 +516,28 @@\n+\/\/ When entering signal handling with a valid current Thread, we switch to the\n+\/\/  Thread's secondary resource area. That lets us safely use resource area\n+\/\/  memory during signal handling even if the signal left the primary area in\n+\/\/  an inconsistent state. We then swap back to the primary area upon leaving\n+\/\/  the signal handler.\n+\/\/ Note that signal handlers can nest, and in theory we should do this on each\n+\/\/  signal handler invocation, building up a stack of fresh resource areas.\n+\/\/  But that is either expensive (would have to preallocate them all upfront,\n+\/\/  and then, how many?) or dangerous (would have to allocate them on demand\n+\/\/  in the signal handler for each recursion) and its really not\n+\/\/  worth the trouble. We keep matters simple with just two resource areas.\n+class ResourceAreaSwitcher : public StackObj {\n+  Thread* const _t;\n+public:\n+  ResourceAreaSwitcher(Thread* t) : _t(t) {\n+    if (_t != NULL) {\n+      \/\/ Note: does nothing if we already use the secondary RA\n+      _t->switch_to_secondary_resource_area();\n+    }\n+  }\n+  ~ResourceAreaSwitcher() {\n+    if (_t != NULL) {\n+      \/\/ Note: does nothing if we already use the primary RA\n+      _t->switch_to_primary_resource_area();\n+    }\n+  }\n+};\n+\n@@ -592,0 +620,3 @@\n+  \/\/ This makes it safe to use ResourceArea memory inside signal handling.\n+  ResourceAreaSwitcher resourceAreaSwitcher(t);\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  set_resource_area(new (mtThread)ResourceArea());\n+  initialize_resource_areas();\n@@ -282,0 +282,18 @@\n+void Thread::switch_to_primary_resource_area() {\n+  if (_resource_area != _resource_areas[0]) {\n+    _resource_area = _resource_areas[0];\n+  }\n+}\n+\n+void Thread::switch_to_secondary_resource_area() {\n+  if (_resource_area != _resource_areas[1]) {\n+    _resource_area = _resource_areas[1];\n+  }\n+}\n+\n+void Thread::initialize_resource_areas() {\n+  _resource_areas[0] = new (mtThread)ResourceArea();\n+  _resource_areas[1] = new (mtThread)ResourceArea();\n+  _resource_area = _resource_areas[0];\n+}\n+\n@@ -394,1 +412,3 @@\n-  delete resource_area();\n+  delete _resource_areas[0];\n+  delete _resource_areas[1];\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -409,1 +409,4 @@\n-  void set_resource_area(ResourceArea* area)     { _resource_area = area; }\n+\n+  \/\/ Switch between primary and secondary resource areas\n+  void switch_to_primary_resource_area();\n+  void switch_to_secondary_resource_area();\n@@ -531,1 +534,5 @@\n-  \/\/ Thread local resource area for temporary allocation within the VM\n+private:\n+\n+  \/\/ Thread local resource area for temporary allocation within the VM.\n+  \/\/ Resource area is double buffered; we switch to an alternate resource\n+  \/\/ area when entering signal handling for the first time.\n@@ -534,0 +541,7 @@\n+  \/\/ Primary [0] and secondary [1] resource areas.\n+  ResourceArea* _resource_areas[2];\n+\n+  void initialize_resource_areas();\n+\n+protected:\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2017, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2017, 2022 SAP SE. All rights reserved.\n@@ -1506,0 +1506,9 @@\n+    \/\/ Switch to the secondary resource area for the current thread to make it safe to use\n+    \/\/ RA memory during error reporting. This is just needed for the rare case that the primary\n+    \/\/ RA is broken, but we did enter via assert, not via signal (in fact, the broken primary RA\n+    \/\/ may have caused the assert).\n+    if (_thread) {\n+      _thread->switch_to_secondary_resource_area();\n+    }\n+\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}