{"files":[{"patch":"@@ -592,0 +592,3 @@\n+  \/\/ This makes it safe to use ResourceArea memory inside signal handling.\n+  Thread::ResourceAreaSwitcher ra_switcher(t);\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -575,0 +575,4 @@\n+  \/\/ This makes it safe to use ResourceArea memory while in this function (which may\n+  \/\/ have been triggered by an asynchronous signal).\n+  Thread::ResourceAreaSwitcher ra_switcher(Thread::current_or_null_safe());\n+\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2013, 2022 SAP SE. All rights reserved.\n@@ -219,1 +220,1 @@\n-  set_resource_area(new (mtThread)ResourceArea());\n+  initialize_resource_areas();\n@@ -282,0 +283,40 @@\n+\/\/ Primary and secondary resource areas:\n+\/\/\n+\/\/ A thread has, beside its normal resource area (the primary), a secondary one.\n+\/\/ This can be used when we are unsure about the state of the primary area, e.g.\n+\/\/ when running inside a signal handler which may have left the primary area in\n+\/\/ an inconsistent state.\n+\n+void Thread::switch_to_primary_resource_area() {\n+  _secondary_resource_area_switch_count --;\n+  if (_secondary_resource_area_switch_count == 0) {\n+    _resource_area = _resource_areas[0];\n+  }\n+}\n+\n+void Thread::switch_to_secondary_resource_area() {\n+  if (_secondary_resource_area_switch_count == 0) {\n+    _resource_area = _resource_areas[1];\n+  }\n+  _secondary_resource_area_switch_count ++;\n+}\n+\n+void Thread::initialize_resource_areas() {\n+  _resource_areas[0] = new (mtThread)ResourceArea();\n+  _resource_areas[1] = new (mtThread)ResourceArea();\n+  _resource_area = _resource_areas[0];\n+  _secondary_resource_area_switch_count = 0;\n+}\n+\n+Thread::ResourceAreaSwitcher::ResourceAreaSwitcher(Thread* t) : _t(t) {\n+  if (_t != NULL) {\n+    _t->switch_to_secondary_resource_area();\n+  }\n+}\n+\n+Thread::ResourceAreaSwitcher::~ResourceAreaSwitcher() {\n+  if (_t != NULL) {\n+    _t->switch_to_primary_resource_area();\n+  }\n+}\n+\n@@ -394,1 +435,3 @@\n-  delete resource_area();\n+  delete _resource_areas[0];\n+  delete _resource_areas[1];\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -409,1 +409,10 @@\n-  void set_resource_area(ResourceArea* area)     { _resource_area = area; }\n+\n+  \/\/ A RAII object to switch the thread to the secondary resource area. Use this in\n+  \/\/ situations where you plan to use resource area memory but are unsure about\n+  \/\/ the state of the primary resource area (e.g. while handling async signals).\n+  class ResourceAreaSwitcher : public StackObj {\n+    Thread* const _t; \/\/ NULL is allowed and result in noop\n+  public:\n+    ResourceAreaSwitcher(Thread* t);\n+    ~ResourceAreaSwitcher();\n+  };\n@@ -531,1 +540,5 @@\n-  \/\/ Thread local resource area for temporary allocation within the VM\n+private:\n+\n+  \/\/ Thread local resource area for temporary allocation within the VM.\n+  \/\/ Resource area is double buffered; we switch to an alternate resource\n+  \/\/ area when entering signal handling for the first time.\n@@ -534,0 +547,12 @@\n+  \/\/ Primary [0] and secondary [1] resource areas.\n+  ResourceArea* _resource_areas[2];\n+\n+  \/\/ The number of times we switched to the second resource area.\n+  int _secondary_resource_area_switch_count;\n+\n+  void initialize_resource_areas();\n+  void switch_to_primary_resource_area();\n+  void switch_to_secondary_resource_area();\n+\n+protected:\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2017, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2017, 2022 SAP SE. All rights reserved.\n@@ -1465,0 +1465,6 @@\n+  \/\/ Switch to the secondary resource area for the current thread to make it safe to use\n+  \/\/ RA memory during error reporting. This is just needed for the rare case that the primary\n+  \/\/ RA is broken, but we did enter via assert, not via signal (in fact, the broken primary RA\n+  \/\/ may have caused the assert).\n+  Thread::ResourceAreaSwitcher ra_switcher(Thread::current_or_null_safe());\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}