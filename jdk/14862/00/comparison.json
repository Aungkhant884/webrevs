{"files":[{"patch":"@@ -863,1 +863,1 @@\n-  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c libnativeStack.c exeGetCreatedJavaVMs.c\n+  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c exeGetCreatedJavaVMs.c\n@@ -865,0 +865,2 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativeStack := jvm.lib\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_COPY_DEBUG_SYMBOLS_libnativeStack := true\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1713,3 +1713,9 @@\n-    frame f = os::current_frame();\n-    VMError::print_native_stack(tty, f, this, true \/*print_source_info *\/,\n-                                -1 \/* max stack *\/, buf, O_BUFLEN);\n+    address lastpc = nullptr;\n+    if (os::platform_print_native_stack(tty, nullptr, buf, O_BUFLEN, lastpc)) {\n+      \/\/ We have printed the native stack in platform-specific code,\n+      \/\/ so nothing else to do in this case.\n+    } else {\n+      frame f = os::current_frame();\n+      VMError::print_native_stack(tty, f, this, true \/*print_source_info *\/,\n+                                  -1 \/* max stack *\/, buf, O_BUFLEN);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -477,0 +477,2 @@\n+  } else {\n+    st->print_cr(\"Native frames: <unavailable>\");\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires os.family != \"windows\" & os.arch != \"arm\"\n+ * @requires os.arch != \"arm\"\n@@ -31,1 +31,0 @@\n- * @comment The native code only supports POSIX so no windows testing\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/nativeStack\/TestNativeStack.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,5 @@\n+#ifdef _WIN32\n+#include <windows.h>\n+#include <process.h>\n+typedef  unsigned int THREAD_ID;\n+#else\n@@ -28,0 +33,3 @@\n+typedef  pthread_t THREAD_ID;\n+#endif\n+\n@@ -66,1 +74,6 @@\n-static void * thread_start(void* unused) {\n+#ifdef _WIN32\n+unsigned __stdcall\n+#else\n+void *\n+#endif\n+thread_start(void* unused) {\n@@ -97,0 +110,1 @@\n+#ifndef _WIN32\n@@ -98,0 +112,3 @@\n+#else\n+  return 0;\n+#endif\n@@ -103,1 +120,1 @@\n-  pthread_t thread;\n+  THREAD_ID thread;\n@@ -112,0 +129,15 @@\n+#ifdef _WIN32\n+  HANDLE hThread = (HANDLE) _beginthreadex(NULL, 0, thread_start,\n+                                           NULL, 0, &thread);\n+  if (hThread == 0) {\n+    fprintf(stderr, \"TEST ERROR: _beginthreadex failed: %s\\n\", strerror(errno));\n+    exit(1);\n+  }\n+  if (WaitForSingleObject(hThread, INFINITE) != WAIT_OBJECT_0) {\n+    fprintf(stderr, \"TEST ERROR: WaitForSingleObject failed: %d\\n\", GetLastError());\n+    exit(1);\n+  }\n+  CloseHandle(hThread);\n+\n+#else\n+\n@@ -128,0 +160,1 @@\n+#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/nativeStack\/libnativeStack.c","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}