{"files":[{"patch":"@@ -171,1 +171,1 @@\n-    return BoolTest::illegal;\n+    return is_alltrue ? BoolTest::eq : BoolTest::ne;\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4282,0 +4282,107 @@\n+%}\n+\n+\/\/ ------------------------------ VectorTest -----------------------------------\n+\n+\/\/ anytrue\n+\n+\/\/ Not matched. Condition is negated and value zero is moved to the right side in CMoveINode::Ideal.\n+\n+\/\/ instruct cmovI_vtest_anytrue(iRegINoSp dst, cmpOp cop, vRegMask op1, vRegMask op2, immI0 zero, immI_1 one) %{\n+\/\/   predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne &&\n+\/\/             static_cast<const VectorTestNode*>(n->in(1)->in(2))->get_predicate() == BoolTest::ne);\n+\/\/   match(Set dst (CMoveI (Binary cop (VectorTest op1 op2)) (Binary zero one)));\n+\/\/   format %{ \"CMove $dst, (vectortest $cop $op1 $op2), zero, one\\t#@cmovI_vtest_anytrue\"  %}\n+\/\/   ins_encode %{\n+\/\/     BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+\/\/     uint vector_length = Matcher::vector_length(this, $op1);\n+\/\/     __ vsetvli_helper(bt, vector_length);\n+\/\/     __ vcpop_m($dst$$Register, as_VectorRegister($op1$$reg));\n+\/\/     __ snez($dst$$Register, $dst$$Register);\n+\/\/   %}\n+\/\/   ins_pipe(pipe_slow);\n+\/\/ %}\n+\n+instruct cmovI_vtest_anytrue_negate(iRegINoSp dst, cmpOp cop, vRegMask op1, vRegMask op2, immI0 zero, immI_1 one) %{\n+  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq &&\n+            static_cast<const VectorTestNode*>(n->in(1)->in(2))->get_predicate() == BoolTest::ne);\n+  match(Set dst (CMoveI (Binary cop (VectorTest op1 op2)) (Binary one zero)));\n+  format %{ \"CMove $dst, (vectortest $cop $op1 $op2), zero, one\\t#@cmovI_vtest_anytrue_negate\"  %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+    uint vector_length = Matcher::vector_length(this, $op1);\n+    __ vsetvli_helper(bt, vector_length);\n+    __ vcpop_m($dst$$Register, as_VectorRegister($op1$$reg));\n+    __ snez($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ alltrue\n+\n+\/\/ Not matched. Condition is negated and value zero is moved to the right side in CMoveINode::Ideal.\n+\n+\/\/ instruct cmovI_vtest_alltrue(iRegINoSp dst, cmpOp cop, vRegMask op1, vRegMask op2, immI0 zero, immI_1 one) %{\n+\/\/   predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::eq &&\n+\/\/             static_cast<const VectorTestNode*>(n->in(1)->in(2))->get_predicate() == BoolTest::overflow);\n+\/\/   match(Set dst (CMoveI (Binary cop (VectorTest op1 op2)) (Binary zero one)));\n+\/\/   format %{ \"CMove $dst, (vectortest $cop $op1 $op2), zero, one\\t#@cmovI_vtest_alltrue\"  %}\n+\/\/   ins_encode %{\n+\/\/     BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+\/\/     uint vector_length = Matcher::vector_length(this, $op1);\n+\/\/     __ vsetvli_helper(bt, vector_length);\n+\/\/     __ vcpop_m($dst$$Register, as_VectorRegister($op1$$reg));\n+\/\/     __ sub($dst$$Register, $dst$$Register, vector_length);\n+\/\/     __ seqz($dst$$Register, $dst$$Register);\n+\/\/   %}\n+\/\/   ins_pipe(pipe_slow);\n+\/\/ %}\n+\n+instruct cmovI_vtest_alltrue_negate(iRegINoSp dst, cmpOp cop, vRegMask op1, vRegMask op2, immI0 zero, immI_1 one) %{\n+  predicate(n->in(1)->in(1)->as_Bool()->_test._test == BoolTest::ne &&\n+            static_cast<const VectorTestNode*>(n->in(1)->in(2))->get_predicate() == BoolTest::overflow);\n+  match(Set dst (CMoveI (Binary cop (VectorTest op1 op2)) (Binary one zero)));\n+  format %{ \"CMove $dst, (vectortest $cop $op1 $op2), zero, one\\t#@cmovI_vtest_alltrue_negate\"  %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+    uint vector_length = Matcher::vector_length(this, $op1);\n+    __ vsetvli_helper(bt, vector_length);\n+    __ vcpop_m($dst$$Register, as_VectorRegister($op1$$reg));\n+    __ sub($dst$$Register, $dst$$Register, vector_length);\n+    __ seqz($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ anytrue\n+\n+instruct vtest_anytrue_branch(cmpOpEqNe cop, vRegMask op1, vRegMask op2, label lbl) %{\n+  predicate(static_cast<const VectorTestNode*>(n->in(2))->get_predicate() == BoolTest::ne);\n+  match(If cop (VectorTest op1 op2));\n+  effect(USE lbl);\n+  format %{ \"b$cop (vectortest ne $op1, $op2) $lbl\\t#@vtest_anytrue_branch\" %}\n+  ins_encode %{\n+    uint vector_length = Matcher::vector_length(this, $op1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+    __ vsetvli_helper(bt, vector_length);\n+    __ vcpop_m(t0, as_VectorRegister($op1$$reg));\n+    __ enc_cmpEqNe_imm0_branch($cop$$cmpcode, t0, *($lbl$$label), \/* is_far *\/ true);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ alltrue\n+\n+instruct vtest_alltrue_branch(cmpOpEqNe cop, vRegMask op1, vRegMask op2, label lbl) %{\n+  predicate(static_cast<const VectorTestNode*>(n->in(2))->get_predicate() == BoolTest::overflow);\n+  match(If cop (VectorTest op1 op2));\n+  effect(USE lbl);\n+  format %{ \"b$cop (vectortest overflow $op1, $op2) $lbl\\t#@vtest_alltrue_branch\" %}\n+  ins_encode %{\n+    uint vector_length = Matcher::vector_length(this, $op1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $op1);\n+    __ vsetvli_helper(bt, vector_length);\n+    __ vcpop_m(t0, as_VectorRegister($op1$$reg));\n+    __ sub(t0, t0, vector_length);\n+    __ enc_cmpEqNe_imm0_branch($cop$$cmpcode, t0, *($lbl$$label), \/* is_far *\/ true);\n+  %}\n+  ins_pipe(pipe_slow);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":107,"deletions":0,"binary":false,"changes":107,"status":"modified"}]}