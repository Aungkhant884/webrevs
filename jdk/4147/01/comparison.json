{"files":[{"patch":"@@ -1858,2 +1858,0 @@\n-  assert(klass_loader != NULL, \"should not be called for boot loader\");\n-  assert(loader1 != loader2, \"must be\");\n@@ -1875,0 +1873,11 @@\n+  if (DumpSharedSpaces && !is_builtin(klass)) {\n+    \/\/ During static dump, unregistered classes (those intended for\n+    \/\/ custom loaders) are loaded by the boot loader. Need to\n+    \/\/ exclude these for the same reason as above.\n+    \/\/ This should be fixed by JDK-8261941.\n+    return;\n+  }\n+\n+  assert(klass_loader != NULL, \"should not be called for boot loader\");\n+  assert(loader1 != loader2, \"must be\");\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @bug 8267347\n@@ -43,0 +44,1 @@\n+import jdk.test.lib.Platform;\n@@ -58,0 +60,6 @@\n+    static String loaderMainClass = CustomAppLoader.class.getName();\n+    static String loaderJar = null;\n+    static String loaderClasses[] = {\n+        loaderMainClass\n+    };\n+\n@@ -64,2 +72,9 @@\n-        doTest(false);\n-        doTest(true);\n+        doTest(false, false);\n+        doTest(true,  false);\n+\n+        if (!Platform.isWindows()) {\n+            \/\/ custom loaders are not supported on Windows yet.\n+            loaderJar = ClassFileInstaller.writeJar(\"custom_app_loader.jar\", loaderClasses);\n+            doTest(false, true);\n+            doTest(true,  true);\n+        }\n@@ -77,0 +92,3 @@\n+     *\n+     * useCustomLoader: if true, load the LoaderConstraintsApp in a custom loader before executing it.\n+     *                  if false, LoaderConstraintsApp will be loaded by the built-in AppClassLoader.\n@@ -78,1 +96,1 @@\n-    static void doTest(boolean errorInDump) throws Exception  {\n+  static void doTest(boolean errorInDump, boolean useCustomLoader) throws Exception  {\n@@ -80,0 +98,3 @@\n+            System.out.println(\"========================================\");\n+            System.out.println(\"errorInDump: \" + errorInDump + \", useCustomLoader: \" + useCustomLoader + \", case: \" + i);\n+            System.out.println(\"========================================\");\n@@ -83,1 +104,0 @@\n-                \"-cp\", appJar,\n@@ -89,1 +109,0 @@\n-                mainClass, testCase\n@@ -92,0 +111,9 @@\n+            if (useCustomLoader) {\n+                cmdLine = TestCommon.concat(cmdLine, \"-cp\", loaderJar,\n+                                          loaderMainClass, appJar);\n+            } else {\n+                cmdLine = TestCommon.concat(cmdLine, \"-cp\", appJar);\n+            }\n+\n+            cmdLine = TestCommon.concat(cmdLine, mainClass, testCase);\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/DynamicLoaderConstraintsTest.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-class LoaderConstraintsApp {\n+public class LoaderConstraintsApp {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/LoaderConstraintsApp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @bug 8267347\n@@ -40,0 +41,1 @@\n+import jdk.test.lib.Platform;\n@@ -43,0 +45,2 @@\n+    static String httpHandlerClass = HttpHandler.class.getName().replace(\".\", \"\/\");\n+    static String httpExchangeClass = HttpExchange.class.getName().replace(\".\", \"\/\");\n@@ -46,2 +50,2 @@\n-        HttpHandler.class.getName(),\n-        HttpExchange.class.getName(),\n+        httpHandlerClass,\n+        httpExchangeClass,\n@@ -55,0 +59,6 @@\n+    static String loaderMainClass = CustomAppLoader.class.getName();\n+    static String loaderJar = null;\n+    static String loaderClasses[] = {\n+        loaderMainClass\n+    };\n+\n@@ -56,11 +66,37 @@\n-        appJar = ClassFileInstaller.writeJar(\"loader_constraints.jar\", appClasses);\n-        TestCommon.dump(appJar, appClasses, \"-Xlog:cds+load\");\n-        String joptsMain[] = TestCommon.concat(\"-cp\", appJar,\n-                                          \"-Xlog:cds\",\n-                                          \"-Xlog:class+loader+constraints=debug\",\n-                                          \"--add-exports\",\n-                                          \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                          mainClass);\n-        runWithArchive(joptsMain, \"1\");\n-        runWithArchive(joptsMain, \"2\");\n-        runWithArchive(joptsMain, \"3\");\n+        TestCommon.dump(appJar, appClasses, \"-Xlog:cds\");\n+        String cmdLine[] =\n+            TestCommon.concat(\"-cp\", appJar,\n+                              \"-Xlog:cds\",\n+                              \"-Xlog:class+loader+constraints=debug\",\n+                              \"--add-exports\",\n+                              \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                              mainClass);\n+        runWithArchive(cmdLine, \"1\");\n+        runWithArchive(cmdLine, \"2\");\n+        runWithArchive(cmdLine, \"3\");\n+    }\n+\n+    \/\/ Same as doTest, except that LoaderConstraintsApp and MyHttpHandler* are loaded\n+    \/\/ by a custom loader. This is test case for JDK-8267347.\n+    static void doTestCustomLoader() throws Exception  {\n+        String src = \" source: \" + appJar;\n+        String classList[] =\n+            TestCommon.concat(loaderClasses,\n+                              \"java\/lang\/Object id: 1\",\n+                              mainClass + \" id: 2 super: 1\" + src,\n+                              httpHandlerClass + \" id: 3\",\n+                              \"MyHttpHandler id: 5 super: 1 interfaces: 3\" + src,\n+                              \"MyHttpHandlerB id: 6 super: 1 interfaces: 3\" + src,\n+                              \"MyHttpHandlerC id: 7 super: 1 interfaces: 3\" + src);\n+        TestCommon.dump(loaderJar, classList, \"-Xlog:cds\");\n+\n+        String cmdLine[] =\n+            TestCommon.concat(\"-cp\", loaderJar,\n+                              \"-Xlog:cds\",\n+                              \"-Xlog:class+loader+constraints=debug\",\n+                              \"--add-exports\",\n+                              \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                              loaderMainClass, appJar, mainClass);\n+        runWithArchive(cmdLine, \"1\");\n+        runWithArchive(cmdLine, \"2\");\n+        runWithArchive(cmdLine, \"3\");\n@@ -75,0 +111,1 @@\n+        appJar = ClassFileInstaller.writeJar(\"loader_constraints.jar\", appClasses);\n@@ -76,0 +113,5 @@\n+        if (!Platform.isWindows()) {\n+            \/\/ custom loaders are not supported on Windows yet.\n+            loaderJar = ClassFileInstaller.writeJar(\"custom_app_loader.jar\", loaderClasses);\n+            doTestCustomLoader();\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/LoaderConstraintsTest.java","additions":55,"deletions":13,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+\n+\/\/ This is a handy class for running an application inside a custom class loader. This\n+\/\/ is used for testing CDS handling of unregistered classes (i.e., archived classes loaded\n+\/\/ by custom class loaders).\n+\/\/\n+\/\/ See test\/hotspot\/jtreg\/runtime\/cds\/appcds\/loaderConstraints\/LoaderConstraintsTest.java\n+\/\/ for an example.\n+public class CustomAppLoader {\n+    \/\/ args[0] = App JAR file\n+    \/\/ args[1] = App main class\n+    \/\/ args[2...] = arguments for the main class\n+    public static void main(String args[]) throws Throwable {\n+        File f = new File(args[0]);\n+        URL[] classLoaderUrls = new URL[] {new URL(\"file:\/\/\" + f.getCanonicalPath())};\n+        URLClassLoader loader = new URLClassLoader(classLoaderUrls, CustomAppLoader.class.getClassLoader());\n+        Class k = Class.forName(args[1], true, loader);\n+        Class parameterTypes[] = new Class[] {String[].class};\n+        Method mainMethod = k.getDeclaredMethod(\"main\", parameterTypes);\n+        String appArgs[] = new String[args.length - 2];\n+        Object invokeArgs[] = new Object[] {appArgs};\n+        for (int i = 0; i < appArgs.length; i++) {\n+            appArgs[i] = args[i + 2];\n+        }\n+        mainMethod.invoke(null, invokeArgs);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/CustomAppLoader.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}