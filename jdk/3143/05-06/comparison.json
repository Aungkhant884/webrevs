{"files":[{"patch":"@@ -180,2 +180,2 @@\n-                                                     size_t desired_word_size,\n-                                                     size_t* actual_word_size);\n+                                                       size_t desired_word_size,\n+                                                       size_t* actual_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-                                                                  size_t desired_word_size,\n-                                                                  size_t* actual_word_size) {\n+                                                                    size_t desired_word_size,\n+                                                                    size_t* actual_word_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,2 @@\n-         \"Must not have a mutator alloc region if there is no memory, but is \" PTR_FORMAT, p2i(mutator_alloc_region(node_index)->get()));\n+         \"Must not have a mutator alloc region if there is no memory, but is \" PTR_FORMAT,\n+         p2i(mutator_alloc_region(node_index)->get()));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1417,2 +1417,3 @@\n-  if (!Universe::is_fully_initialized()) {\n-    \/\/ Don't attempt any proactive GC's before initialization is complete.\n+  if (!G1AllowProactiveGC || !Universe::is_fully_initialized()) {\n+    \/\/ Don't attempt any proactive GC's if the feature is disabled,\n+    \/\/ or before initialization is complete.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -305,1 +305,6 @@\n-          range(0.0, (double)max_uintx)\n+          range(0.0, (double)max_uintx)                                     \\\n+                                                                            \\\n+  product(bool, G1AllowProactiveGC, true,                                   \\\n+          \"Allows collections to be triggered proactively based on the      \\\n+           number of free regions and the expected survival rates in each   \\\n+           section of the heap.\")\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}