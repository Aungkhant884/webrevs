{"files":[{"patch":"@@ -171,3 +171,3 @@\n-  \/\/ to the locking protocol.\n-  \/\/ Tries to allocate at least min_word_size words, and at most desired_word_size.\n-  \/\/ Returns the actual size of the block in actual_word_size.\n+  \/\/ to the locking protocol. The min and desired word size allow\n+  \/\/ specifying a minimum and maximum size of the allocation. The\n+  \/\/ actual size of allocation is returned in actual_word_size.\n@@ -178,1 +178,2 @@\n-  inline HeapWord* attempt_allocation_use_new_region(size_t min_word_size,\n+  \/\/ Perform an allocation out of a new allocation region, retiring the current one.\n+  inline HeapWord* attempt_allocation_using_new_region(size_t min_word_size,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  return attempt_allocation_use_new_region(min_word_size, desired_word_size, actual_word_size);\n+  return attempt_allocation_using_new_region(min_word_size, desired_word_size, actual_word_size);\n@@ -109,1 +109,1 @@\n-inline HeapWord* G1AllocRegion::attempt_allocation_use_new_region(size_t min_word_size,\n+inline HeapWord* G1AllocRegion::attempt_allocation_using_new_region(size_t min_word_size,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,3 +115,1 @@\n-  \/\/ Attempt allocation in the current alloc region. If use_retained_region_if_available\n-  \/\/ is set and a retained region is available, the allocation will first be tried in the\n-  \/\/ retained region.\n+  \/\/ Attempt allocation in the current alloc region.\n@@ -124,1 +122,1 @@\n-  inline HeapWord* attempt_allocation_use_new_region(size_t word_size);\n+  inline HeapWord* attempt_allocation_using_new_region(size_t word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-\n@@ -65,1 +64,1 @@\n-inline HeapWord* G1Allocator::attempt_allocation_use_new_region(size_t word_size) {\n+inline HeapWord* G1Allocator::attempt_allocation_using_new_region(size_t word_size) {\n@@ -68,1 +67,1 @@\n-  HeapWord* result = mutator_alloc_region(node_index)->attempt_allocation_use_new_region(word_size, word_size, &temp);\n+  HeapWord* result = mutator_alloc_region(node_index)->attempt_allocation_using_new_region(word_size, word_size, &temp);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-        result = _allocator->attempt_allocation_use_new_region(word_size);\n+        result = _allocator->attempt_allocation_using_new_region(word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,0 +114,4 @@\n+bool G1CollectionSet::has_candidates() {\n+  return _candidates != NULL && !_candidates->is_empty();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -275,0 +275,1 @@\n+  bool has_candidates();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1422,1 +1422,1 @@\n-  if (_g1h->young_regions_count() == 0 && _collection_set->candidates() != NULL && _collection_set->candidates()->is_empty()) {\n+  if (_g1h->young_regions_count() == 0 && !_collection_set->has_candidates()) {\n@@ -1467,2 +1467,1 @@\n-  G1CollectionSetCandidates *candidates = _collection_set->candidates();\n-  if (candidates == NULL || candidates->is_empty()) {\n+  if (!_collection_set->has_candidates()) {\n@@ -1475,0 +1474,1 @@\n+  G1CollectionSetCandidates *candidates = _collection_set->candidates();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -122,0 +122,5 @@\n+bool VM_G1CollectForAllocation::should_try_allocation_before_gc() {\n+  \/\/ Don't allocate before a proactive GC.\n+  return _gc_cause != GCCause::_g1_proactive_collection;\n+}\n+\n@@ -125,1 +130,1 @@\n-  if (_word_size > 0 && _gc_cause != GCCause::_g1_proactive_collection) {\n+  if (should_try_allocation_before_gc() && _word_size > 0) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -81,0 +81,3 @@\n+\n+private:\n+  bool should_try_allocation_before_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}