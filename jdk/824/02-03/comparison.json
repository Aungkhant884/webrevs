{"files":[{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/g1\/g1FullCollector.hpp\"\n+#include \"gc\/g1\/g1FullCollector.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,2 +99,3 @@\n-  bool is_in_pinned_or_closed(oop obj) const { return _region_attr_table.is_pinned_or_closed(cast_from_oop<HeapWord*>(obj)); }\n-  bool is_in_closed(oop obj) const { return _region_attr_table.is_closed_archive(cast_from_oop<HeapWord*>(obj)); }\n+  inline bool is_in_pinned_or_closed(oop obj) const;\n+  inline bool is_in_pinned(oop obj) const;\n+  inline bool is_in_closed(oop obj) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1FULLCOLLECTOR_INLINE_HPP\n+#define SHARE_GC_G1_G1FULLCOLLECTOR_INLINE_HPP\n+\n+#include \"gc\/g1\/g1FullCollector.hpp\"\n+#include \"gc\/g1\/g1FullGCHeapRegionAttr.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+bool G1FullCollector::is_in_pinned_or_closed(oop obj) const {\n+  return _region_attr_table.is_pinned_or_closed(cast_from_oop<HeapWord*>(obj));\n+}\n+\n+bool G1FullCollector::is_in_pinned(oop obj) const {\n+  return _region_attr_table.is_pinned(cast_from_oop<HeapWord*>(obj));\n+}\n+\n+bool G1FullCollector::is_in_closed(oop obj) const {\n+  return _region_attr_table.is_closed_archive(cast_from_oop<HeapWord*>(obj));\n+}\n+\n+#endif \/\/ SHARE_GC_G1_G1FULLCOLLECTOR_INLINE_HPP\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1FullCollector.hpp\"\n+#include \"gc\/g1\/g1FullCollector.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,5 @@\n+  bool is_pinned(HeapWord* obj) const {\n+    assert(!is_invalid(obj), \"not initialized yet\");\n+    return get_by_address(obj) == Pinned;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"gc\/g1\/g1FullCollector.hpp\"\n+#include \"gc\/g1\/g1FullCollector.inline.hpp\"\n@@ -57,1 +57,1 @@\n-      !_collector->is_in_pinned_or_closed(obj)) {\n+      !_collector->is_in_pinned(obj)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1FullCollector.hpp\"\n+#include \"gc\/g1\/g1FullCollector.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -602,0 +602,4 @@\n+bool CollectedHeap::is_archived_object(oop object) const {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  virtual bool is_archived_object(oop object) const { return false; }\n+  virtual bool is_archived_object(oop object) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}