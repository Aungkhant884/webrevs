{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-                    DESKeySpec.class.isAssignableFrom(keySpec)) {\n+                    keySpec.isAssignableFrom(DESKeySpec.class)) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-                if (DESedeKeySpec.class.isAssignableFrom(keySpec)) {\n+                if (keySpec.isAssignableFrom(DESedeKeySpec.class)) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,1 @@\n-            if (DHPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(DHPublicKeySpec.class)) {\n@@ -156,1 +156,1 @@\n-            } else if (X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(X509EncodedKeySpec.class)) {\n@@ -166,1 +166,1 @@\n-            if (DHPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(DHPrivateKeySpec.class)) {\n@@ -174,1 +174,1 @@\n-            } else if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(PKCS8EncodedKeySpec.class)) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-                if (dsaPubKeySpec.isAssignableFrom(keySpec)) {\n+                if (keySpec.isAssignableFrom(dsaPubKeySpec)) {\n@@ -160,1 +160,1 @@\n-                } else if (x509KeySpec.isAssignableFrom(keySpec)) {\n+                } else if (keySpec.isAssignableFrom(x509KeySpec)) {\n@@ -176,1 +176,1 @@\n-                if (dsaPrivKeySpec.isAssignableFrom(keySpec)) {\n+                if (keySpec.isAssignableFrom(dsaPrivKeySpec)) {\n@@ -185,1 +185,1 @@\n-                } else if (pkcs8KeySpec.isAssignableFrom(keySpec)) {\n+                } else if (keySpec.isAssignableFrom(pkcs8KeySpec)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSAKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-            if (RSA_PUB_KEYSPEC_CLS.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(RSA_PUB_KEYSPEC_CLS)) {\n@@ -398,1 +398,1 @@\n-            } else if (X509_KEYSPEC_CLS.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(X509_KEYSPEC_CLS)) {\n@@ -406,1 +406,1 @@\n-            if (PKCS8_KEYSPEC_CLS.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(PKCS8_KEYSPEC_CLS)) {\n@@ -408,1 +408,1 @@\n-            } else if (RSA_PRIVCRT_KEYSPEC_CLS.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(RSA_PRIVCRT_KEYSPEC_CLS)) {\n@@ -426,1 +426,1 @@\n-            } else if (RSA_PRIV_KEYSPEC_CLS.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(RSA_PRIV_KEYSPEC_CLS)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,1 +217,1 @@\n-        if (DHPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(DHPublicKeySpec.class)) {\n@@ -244,1 +244,1 @@\n-        if (DHPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(DHPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11DHKeyFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-        if (DSAPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(DSAPublicKeySpec.class)) {\n@@ -242,1 +242,1 @@\n-        if (DSAPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(DSAPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11DSAKeyFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -287,1 +287,1 @@\n-        if (ECPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(ECPublicKeySpec.class)) {\n@@ -318,1 +318,1 @@\n-        if (ECPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(ECPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11ECKeyFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +76,2 @@\n-        if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)\n-                || X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(PKCS8EncodedKeySpec.class)\n+                || keySpec.isAssignableFrom(X509EncodedKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-        if (RSAPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(RSAPublicKeySpec.class)) {\n@@ -280,1 +280,1 @@\n-        if (RSAPrivateCrtKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(RSAPrivateCrtKeySpec.class)) {\n@@ -310,1 +310,1 @@\n-        } else if (RSAPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+        } else if (keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSAKeyFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -344,1 +344,1 @@\n-        if (SecretKeySpec.class.isAssignableFrom(keySpec)) {\n+        if (keySpec.isAssignableFrom(SecretKeySpec.class)) {\n@@ -348,1 +348,1 @@\n-                if (DESKeySpec.class.isAssignableFrom(keySpec)) {\n+                if (keySpec.isAssignableFrom(DESKeySpec.class)) {\n@@ -356,1 +356,1 @@\n-                if (DESedeKeySpec.class.isAssignableFrom(keySpec)) {\n+                if (keySpec.isAssignableFrom(DESedeKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,1 @@\n-            if (ECPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(ECPublicKeySpec.class)) {\n@@ -264,1 +264,1 @@\n-            } else if (X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(X509EncodedKeySpec.class)) {\n@@ -272,1 +272,1 @@\n-            if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(PKCS8EncodedKeySpec.class)) {\n@@ -274,1 +274,1 @@\n-            } else if (ECPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(ECPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,1 +192,1 @@\n-            if (X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(X509EncodedKeySpec.class)) {\n@@ -197,1 +197,1 @@\n-            } else if (XECPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(XECPublicKeySpec.class)) {\n@@ -209,1 +209,1 @@\n-            if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(PKCS8EncodedKeySpec.class)) {\n@@ -214,1 +214,1 @@\n-            } else if (XECPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(XECPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XDHKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,1 +185,1 @@\n-            if (X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(X509EncodedKeySpec.class)) {\n@@ -190,1 +190,1 @@\n-            } else if (EdECPublicKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(EdECPublicKeySpec.class)) {\n@@ -202,1 +202,1 @@\n-            if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {\n+            if (keySpec.isAssignableFrom(PKCS8EncodedKeySpec.class)) {\n@@ -207,1 +207,1 @@\n-            } else if (EdECPrivateKeySpec.class.isAssignableFrom(keySpec)) {\n+            } else if (keySpec.isAssignableFrom(EdECPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8254717\n+ * @summary isAssignableFrom checks in KeyFactorySpi.engineGetKeySpec appear to be backwards.\n+ * @author Greg Rubin, Ziyi Luo\n+ *\/\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.spec.*;\n+\n+public class KeyFactoryGetKeySpecForInvalidSpec {\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\");\n+        kg.initialize(2048);\n+        KeyPair pair = kg.generateKeyPair();\n+\n+        KeyFactory factory = KeyFactory.getInstance(\"RSA\");\n+\n+        \/\/ Since RSAPrivateCrtKeySpec inherits from RSAPrivateKeySpec, we'd expect this next line to return an instance of RSAPrivateKeySpec\n+        \/\/ (because the private key has CRT parts).\n+        KeySpec spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+\n+        \/\/ This next line should give an InvalidKeySpec exception\n+        try {\n+            spec = factory.getKeySpec(pair.getPublic(), FakeX509Spec.class);\n+            throw new Exception(\"InvalidKeySpecException is expected but not thrown\");\n+        } catch (final ClassCastException ex) {\n+            throw new Exception(\"InvalidKeySpecException is expected ClassCastException is thrown\", ex);\n+        } catch (final InvalidKeySpecException ex) {\n+            \/\/ Pass\n+        }\n+    }\n+\n+    public static class FakeX509Spec extends X509EncodedKeySpec {\n+        public FakeX509Spec(byte[] encodedKey) {\n+            super(encodedKey);\n+        }\n+\n+        public FakeX509Spec(byte[] encodedKey, String algorithm) {\n+            super(encodedKey, algorithm);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/KeyFactory\/KeyFactoryGetKeySpecForInvalidSpec.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4853305 8023980\n+ * @bug 4853305 8023980 8254717\n@@ -209,4 +209,5 @@\n-        if (key instanceof RSAPrivateKey) {\n-            KeySpec rsaSpec3 =\n-                new RSAPrivateKeySpec(((RSAPrivateKey)key).getModulus(),\n-                ((RSAPrivateKey)key).getPrivateExponent());\n+        if (key instanceof RSAPrivateCrtKey) {\n+            RSAPrivateCrtKey rsaKey = (RSAPrivateCrtKey)key;\n+            KeySpec rsaSpec3 = new RSAPrivateCrtKeySpec(rsaKey.getModulus(),\n+                    rsaKey.getPublicExponent(), rsaKey.getPrivateExponent(), rsaKey.getPrimeP(), rsaKey.getPrimeQ(),\n+                    rsaKey.getPrimeExponentP(), rsaKey.getPrimeExponentQ(), rsaKey.getCrtCoefficient(), rsaKey.getParams());\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyFactory.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8146293 8242556 8172366\n+ * @bug 8146293 8242556 8172366 8254717\n@@ -101,3 +101,4 @@\n-        RSAPrivateKey rsaKey = (RSAPrivateKey)key;\n-        KeySpec rsaSpec3 = new RSAPrivateKeySpec(rsaKey.getModulus(),\n-            rsaKey.getPrivateExponent(), rsaKey.getParams());\n+        RSAPrivateCrtKey rsaKey = (RSAPrivateCrtKey)key;\n+        KeySpec rsaSpec3 = new RSAPrivateCrtKeySpec(rsaKey.getModulus(),\n+                rsaKey.getPublicExponent(), rsaKey.getPrivateExponent(), rsaKey.getPrimeP(), rsaKey.getPrimeQ(),\n+                rsaKey.getPrimeExponentP(), rsaKey.getPrimeExponentQ(), rsaKey.getCrtCoefficient(), rsaKey.getParams());\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/TestPSSKeySupport.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}