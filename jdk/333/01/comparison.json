{"files":[{"patch":"@@ -570,1 +570,1 @@\n-    protected Name ident(boolean advanceOnErrors) {\n+    protected Name ident(boolean allowClass) {\n@@ -606,1 +606,1 @@\n-            if (advanceOnErrors) {\n+            if (allowClass && token.kind == CLASS) {\n@@ -608,0 +608,1 @@\n+                return names._class;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584\n@@ -1567,0 +1567,47 @@\n+    @Test \/\/JDK-8253584\n+    void testElseRecovery() throws IOException {\n+        \/\/verify the errors and AST form produced for member selects which are\n+        \/\/missing the selected member name:\n+        String code = \"\"\"\n+                      package t;\n+                      class Test {\n+                          void t() {\n+                              if (true) {\n+                                  s().\n+                              } else {\n+                              }\n+                          }\n+                          String s() {\n+                              return null;\n+                          }\n+                      }\n+                      \"\"\";\n+        StringWriter out = new StringWriter();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(out, fm, null, List.of(\"-XDrawDiagnostics\"),\n+                null, Arrays.asList(new MyFileObject(code)));\n+        String ast = ct.parse().iterator().next().toString().replaceAll(\"\\\\R\", \"\\n\");\n+        String expected = \"\"\"\n+                          package t;\n+                          \\n\\\n+                          class Test {\n+                              \\n\\\n+                              void t() {\n+                                  if (true) {\n+                                      (ERROR);\n+                                  } else {\n+                                  }\n+                              }\n+                              \\n\\\n+                              String s() {\n+                                  return null;\n+                              }\n+                          } \"\"\";\n+        assertEquals(\"Unexpected AST, got:\\n\" + ast, expected, ast);\n+        assertEquals(\"Unexpected errors, got:\\n\" + out.toString(),\n+                     out.toString(),\n+                     \"\"\"\n+                     Test.java:5:17: compiler.err.expected: token.identifier\n+                     Test.java:5:16: compiler.err.not.stmt\n+                     \"\"\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"}]}