{"files":[{"patch":"@@ -116,0 +116,1 @@\n+#include \"os_linux.hpp\"\n@@ -2356,0 +2357,12 @@\n+\/\/ Physical memory of the host machine (including containers)\n+WB_ENTRY(jlong, WB_PhysicalMemory(JNIEnv* env, jobject o))\n+  LINUX_ONLY(return os::Linux::physical_memory();)\n+  return os::physical_memory();\n+WB_END\n+\n+\/\/ Physical swap of the host machine (including containers), Linux only.\n+WB_ENTRY(jlong, WB_PhysicalSwap(JNIEnv* env, jobject o))\n+  LINUX_ONLY(return (jlong)os::Linux::host_swap();)\n+  return -1; \/\/ Not used\/implemented on other platforms\n+WB_END\n+\n@@ -2755,0 +2768,2 @@\n+  {CC\"physicalMemory\",            CC\"()J\",            (void*)&WB_PhysicalMemory },\n+  {CC\"physicalSwap\",              CC\"()J\",            (void*)&WB_PhysicalSwap },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run driver TestMemoryAwareness\n+ * @run main\/othervm -Xbootclasspath\/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestMemoryAwareness\n@@ -43,0 +43,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -49,0 +50,1 @@\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -50,5 +52,6 @@\n-    private static String getHostMaxMemory() throws Exception {\n-        DockerRunOptions opts = Common.newOpts(imageName);\n-        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n-        assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n-        return goodMem;\n+    private static String getHostMaxMemory() {\n+        return Long.valueOf(wb.physicalMemory()).toString();\n+    }\n+\n+    private static String getHostSwap() {\n+        return Long.valueOf(wb.physicalSwap()).toString();\n@@ -95,4 +98,3 @@\n-            final String hostMaxMem = getHostMaxMemory();\n-            testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n-            testMetricsIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n-            testContainerMemExceedsPhysical(hostMaxMem);\n+            testOSMXBeanIgnoresMemLimitExceedingPhysicalMemory();\n+            testMetricsExceedingPhysicalMemory();\n+            testContainerMemExceedsPhysical();\n@@ -125,1 +127,1 @@\n-    private static void testContainerMemExceedsPhysical(final String hostMaxMem)\n+    private static void testContainerMemExceedsPhysical()\n@@ -128,0 +130,1 @@\n+        String hostMaxMem = getHostMaxMemory();\n@@ -210,2 +213,6 @@\n-        \/\/ the getTotalSwapSpaceSize and getFreeSwapSpaceSize return the system\n-        \/\/ values as the container setup isn't supported in that case.\n+        \/\/ the getTotalSwapSpaceSize either returns the system (or host) values, or 0\n+        \/\/ if a container memory limit is in place and gets detected. A value of 0 is because,\n+        \/\/ Metrics.getMemoryLimit() returns the same value as Metrics.getMemoryAndSwapLimit().\n+        \/\/\n+        \/\/ getFreeSwapSpaceSize() are a function of what getTotalSwapSpaceSize() returns. Either\n+        \/\/ a number > 0, or 0 if getTotalSwapSpaceSize() == 0.\n@@ -215,1 +222,2 @@\n-            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: [0-9]+\");\n+            String hostSwap = getHostSwap();\n+            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: (0|\" + hostSwap + \")\");\n@@ -227,1 +235,1 @@\n-    private static void testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+    private static void testOSMXBeanIgnoresMemLimitExceedingPhysicalMemory()\n@@ -229,0 +237,1 @@\n+        String hostMaxMem = getHostMaxMemory();\n@@ -234,1 +243,1 @@\n-    private static void testMetricsIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+    private static void testMetricsExceedingPhysicalMemory()\n@@ -237,1 +246,1 @@\n-        String badMem = hostMaxMem + \"0\";\n+        String badMem = getHostMaxMemory() + \"0\";\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":26,"deletions":17,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -711,0 +711,2 @@\n+  public native long physicalMemory();\n+  public native long physicalSwap();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}