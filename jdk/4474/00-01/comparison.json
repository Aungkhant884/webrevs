{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @LastModified: Aug 2019\n+ * @LastModified: June 2021\n@@ -1454,1 +1454,0 @@\n-                    else\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToHTMLStream.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package transform;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+import static jaxp.library.JAXPTestUtilities.compareWithGold;\n+import static jaxp.library.JAXPTestUtilities.compareStringWithGold;\n+import org.testng.Assert;\n+import org.testng.annotations.Listeners;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8268457\n+ * @library \/javax\/xml\/jaxp\/libs\n+ * @run testng transform.SurrogateTest\n+ * @summary XML Transformer outputs Unicode supplementary character incorrectly to HTML\n+ *\/\n+@Listeners({jaxp.library.FilePolicy.class})\n+public class SurrogateTest {\n+\n+    final static String TEST_SRC = System.getProperty(\"test.src\", \".\");\n+\n+    @Test\n+    public void toHTMLTest() throws Exception {\n+        String out = \"SurrogateTest1out.html\";\n+        String expected = TEST_SRC + File.separator + \"SurrogateTest1.html\";\n+        String xsl = TEST_SRC + File.separator + \"SurrogateTest1.xsl\";\n+\n+        try (FileInputStream tFis = new FileInputStream(xsl);\n+            InputStream fis = this.getClass().getResourceAsStream(\"SurrogateTest1.xml\");\n+            FileOutputStream fos = new FileOutputStream(out)) {\n+\n+            Source tSrc = new StreamSource(tFis);\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            Transformer t = tf.newTransformer(tSrc);\n+            t.setOutputProperty(\"method\", \"html\");\n+\n+            Source src = new StreamSource(fis);\n+            Result res = new StreamResult(fos);\n+            t.transform(src, res);\n+        }\n+        compareWithGold(expected, out);\n+    }\n+\n+    @Test\n+    public void handlerTest() throws Exception {\n+        File xmlFile = new File(TEST_SRC, \"SurrogateTest2.xml\");\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        spf.setNamespaceAware(true);\n+        SAXParser sp = spf.newSAXParser();\n+        TestHandler th = new TestHandler();\n+        sp.parse(xmlFile, th);\n+        compareStringWithGold(TEST_SRC + File.separator + \"SurrogateTest2.txt\", th.sb.toString());\n+    }\n+\n+    private static class TestHandler extends DefaultHandler {\n+        private StringBuilder sb = new StringBuilder();\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n+            sb.append( localName + \"@attr:\" + attributes.getValue(\"attr\") + '\\n');\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest1.html","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/testdata\/case01ok.html","status":"renamed"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest1.xml","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/testdata\/case01.xml","status":"renamed"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest1.xsl","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/testdata\/case01.xslt","status":"renamed"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest2.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/testdata\/case02ok.txt","status":"renamed"},{"patch":"","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest2.xml","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/testdata\/case02.xml","status":"renamed"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-\n-import javax.xml.parsers.SAXParser;\n-import javax.xml.parsers.SAXParserFactory;\n-import javax.xml.transform.Result;\n-import javax.xml.transform.Source;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.stream.StreamResult;\n-import javax.xml.transform.stream.StreamSource;\n-\n-import org.xml.sax.Attributes;\n-import org.xml.sax.SAXException;\n-import org.xml.sax.helpers.DefaultHandler;\n-\n-\/*\n- * @test\n- * @bug 8268457\n- * @summary XML Transformer outputs Unicode supplementary character incorrectly to HTML\n- *\/\n-public class SurrogateTest {\n-\n-    final static String TEST_SRC = System.getProperty(\"test.src\", \".\");\n-    static File baseDir = new File(TEST_SRC + File.separator + \"testdata\");\n-\n-    public static void main(String[] args) throws Exception {\n-        case01();\n-        case02();\n-    }\n-\n-    private static void case01() throws Exception {\n-        File out = new File(\"case01out.html\");\n-        File expected = new File(baseDir, \"case01ok.html\");\n-        FileInputStream tFis = null;\n-        FileInputStream fis = null;\n-        FileOutputStream fos = null;\n-\n-        try {\n-            tFis = new FileInputStream(new File(baseDir, \"case01.xslt\"));\n-            Source tSrc = new StreamSource(tFis);\n-\n-            TransformerFactory tf = TransformerFactory.newInstance();\n-            Transformer t = tf.newTransformer(tSrc);\n-            t.setOutputProperty(\"method\", \"html\");\n-\n-            fis = new FileInputStream(new File(baseDir, \"case01.xml\"));\n-            fos = new FileOutputStream(out);\n-\n-            Source src = new StreamSource(fis);\n-            Result res = new StreamResult(fos);\n-\n-            t.transform(src, res);\n-\n-        } finally {\n-            try {\n-                if (tFis != null) {\n-                    tFis.close();\n-                }\n-            } finally {\n-                try {\n-                    if (fis != null) {\n-                        fis.close();\n-                    }\n-                } finally {\n-                    if (fos != null) {\n-                        fos.flush();\n-                        fos.close();\n-                    }\n-                }\n-            }\n-        }\n-        verify(out, expected);\n-    }\n-\n-    private static void case02() throws Exception {\n-        File xmlFile = new File(baseDir, \"case02.xml\");\n-        SAXParserFactory spf = SAXParserFactory.newInstance();\n-        spf.setNamespaceAware(true);\n-        SAXParser sp = spf.newSAXParser();\n-\n-        TestHandler th = new TestHandler();\n-        sp.parse(xmlFile, th);\n-\n-        File out = new File(\"case02out.txt\");\n-        FileOutputStream fos = null;\n-        try {\n-            fos = new FileOutputStream(out);\n-            OutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");\n-            osw.write(th.sb.toString());\n-            osw.flush();\n-        } finally {\n-            if (fos != null) {\n-                fos.close();\n-            }\n-        }\n-        verify(out, new File(baseDir, \"case02ok.txt\"));\n-    }\n-\n-    private static class TestHandler extends DefaultHandler {\n-        private StringBuilder sb = new StringBuilder();\n-\n-        @Override\n-        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n-            sb.append( localName + \"@attr:\" + attributes.getValue(\"attr\") + '\\n');\n-        }\n-    }\n-\n-    \/*\n-     * Compare output of test run to expected output.\n-     * Throw an Error if they don't match.\n-     *\/\n-    public static void verify(File outputFile, File expectedOutputFile) throws IOException {\n-        BufferedReader thisRun =\n-            new BufferedReader(new FileReader(outputFile));\n-        BufferedReader expected =\n-            new BufferedReader(new FileReader(expectedOutputFile));\n-\n-        for (int lineNum = 1; true; lineNum++) {\n-            String line1 = thisRun.readLine();\n-            String line2 = expected.readLine();\n-            if (line1 == null && line2 == null) {\n-                return;         \/\/ EOF with all lines matching\n-            }\n-            if (line1 == null || !line1.trim().equals(line2.trim())) {\n-                throw new Error(outputFile + \":\" + lineNum +\n-                                \": output doesn't match\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"}]}