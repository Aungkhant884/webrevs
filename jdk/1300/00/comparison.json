{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.INSTALLER_NAME;\n@@ -74,2 +75,1 @@\n-                String nm = APP_NAME.fetchFrom(params);\n-\n+                String nm = INSTALLER_NAME.fetchFrom(params);\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxDebBundler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.INSTALLER_NAME;\n@@ -76,1 +77,1 @@\n-                String nm = APP_NAME.fetchFrom(params);\n+                String nm = INSTALLER_NAME.fetchFrom(params);\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxRpmBundler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-            Path finalPKG = outdir.resolve(INSTALLER_NAME.fetchFrom(params)\n+            Path finalPKG = outdir.resolve(MAC_INSTALLER_NAME.fetchFrom(params)\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppStoreBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.INSTALLER_NAME;\n@@ -78,1 +79,1 @@\n-    public static final BundlerParamInfo<String> INSTALLER_NAME =\n+    public static final BundlerParamInfo<String> MAC_INSTALLER_NAME =\n@@ -83,1 +84,1 @@\n-                String nm = APP_NAME.fetchFrom(params);\n+                String nm = INSTALLER_NAME.fetchFrom(params);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-        Path finalDMG = outdir.resolve(INSTALLER_NAME.fetchFrom(params)\n+        Path finalDMG = outdir.resolve(MAC_INSTALLER_NAME.fetchFrom(params)\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-            Path finalPKG = outdir.resolve(INSTALLER_NAME.fetchFrom(params)\n+            Path finalPKG = outdir.resolve(MAC_INSTALLER_NAME.fetchFrom(params)\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.APP_NAME;\n@@ -161,1 +162,1 @@\n-        \/\/ remove LauncherData from map so it will re-run the defaultValueFunction\n+        \/\/ remove LauncherData from map so it will be re-computed\n@@ -163,0 +164,2 @@\n+        \/\/ remove \"application-name\" so it will be re-computed\n+        tmp.remove(APP_NAME.getID());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AddLauncherArguments.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,0 +236,10 @@\n+    public static String extractAppName(Path appImageDir) {\n+        try {\n+            return AppImageFile.load(appImageDir).getLauncherName();\n+        } catch (IOException ioe) {\n+            Log.verbose(MessageFormat.format(I18N.getString(\n+                    \"warning.foreign-app-image\"), appImageDir));\n+            return null;\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -131,1 +131,9 @@\n-    static final StandardBundlerParam<String> APP_NAME =\n+    static final StandardBundlerParam<Path> PREDEFINED_APP_IMAGE =\n+            new StandardBundlerParam<>(\n+            Arguments.CLIOptions.PREDEFINED_APP_IMAGE.getId(),\n+            Path.class,\n+            params -> null,\n+            (s, p) -> Path.of(s));\n+\n+    \/\/ this is the raw --app-name arg - used in APP_NAME and INSTALLER_NAME\n+    static final StandardBundlerParam<String> NAME =\n@@ -135,0 +143,10 @@\n+                    params -> null,\n+                    (s, p) -> s\n+            );\n+\n+    \/\/ this is the application name, either from the app-image (if given),\n+    \/\/ the name (if given) derived from the main-class, or the runtime image\n+    static final StandardBundlerParam<String> APP_NAME =\n+            new StandardBundlerParam<>(\n+                    \"application-name\",\n+                    String.class,\n@@ -136,11 +154,15 @@\n-                        String s = MAIN_CLASS.fetchFrom(params);\n-                        if (s != null) {\n-                            int idx = s.lastIndexOf(\".\");\n-                            if (idx >= 0) {\n-                                return s.substring(idx+1);\n-                            }\n-                            return s;\n-                        } else if (isRuntimeInstaller(params)) {\n-                            Path f = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n-                            if (f != null) {\n-                                return f.getFileName().toString();\n+                        Path appImage = PREDEFINED_APP_IMAGE.fetchFrom(params);\n+                        String appName = NAME.fetchFrom(params);\n+                        if (appImage != null) {\n+                            String name = AppImageFile.extractAppName(appImage);\n+                            appName  = (name != null) ? name : appName;\n+                        } else if (appName == null) {\n+                            String s = MAIN_CLASS.fetchFrom(params);\n+                            if (s != null) {\n+                                int idx = s.lastIndexOf(\".\");\n+                                appName = (idx < 0) ? s : s.substring(idx+1);\n+                            } else if (isRuntimeInstaller(params)) {\n+                                Path f = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);\n+                                if (f != null) {\n+                                    appName = f.getFileName().toString();\n+                                }\n@@ -149,1 +171,13 @@\n-                        return null;\n+                        return appName;\n+                    },\n+                    (s, p) -> s\n+            );\n+\n+    static final StandardBundlerParam<String> INSTALLER_NAME =\n+            new StandardBundlerParam<>(\n+                    \"installer-name\",\n+                    String.class,\n+                    params -> {\n+                        String installerName = NAME.fetchFrom(params);\n+                        return (installerName != null) ? installerName :\n+                                APP_NAME.fetchFrom(params);\n@@ -288,6 +322,0 @@\n-    static final StandardBundlerParam<Path> PREDEFINED_APP_IMAGE =\n-            new StandardBundlerParam<>(\n-            Arguments.CLIOptions.PREDEFINED_APP_IMAGE.getId(),\n-            Path.class,\n-            params -> null,\n-            (s, p) -> Path.of(s));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":47,"deletions":19,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+error.no.name=Name not specified with --name and cannot infer one from app-image\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+error.no.name=Name not specified with --name and cannot infer one from app-image\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+error.no.name=Name not specified with --name and cannot infer one from app-image\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.INSTALLER_NAME;\n@@ -174,1 +175,1 @@\n-                String nm = APP_NAME.fetchFrom(params);\n+                String nm = INSTALLER_NAME.fetchFrom(params);\n@@ -308,0 +309,1 @@\n+        String appName = APP_NAME.fetchFrom(params);\n@@ -309,1 +311,4 @@\n-        String appName;\n+        if (appName == null) {\n+            \/\/ this can only happen when no name is given and using forign app-image\n+            throw new PackagerException(\"error.no.name\");\n+        }\n@@ -313,1 +318,1 @@\n-            appDir = MSI_IMAGE_DIR.fetchFrom(params).resolve(APP_NAME.fetchFrom(params));\n+            appDir = MSI_IMAGE_DIR.fetchFrom(params).resolve(appName);\n@@ -316,5 +321,0 @@\n-            try {\n-                appName = AppImageFile.load(appDir).getLauncherName();\n-            } catch (Exception e) {\n-                appName = APP_NAME.fetchFrom(params);\n-            }\n@@ -324,1 +324,0 @@\n-            appName = APP_NAME.fetchFrom(params);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -211,0 +211,4 @@\n+        String appImage = getArgumentValue(\"--app-image\", () -> null);\n+        if (appImage != null) {\n+            return AppImageFile.extractAppName(Path.of(appImage));\n+        }\n@@ -214,0 +218,12 @@\n+    public String installerName() {\n+        String installerName = getArgumentValue(\"--name\",\n+                () -> getArgumentValue(\"--main-class\", () -> null));\n+        if (installerName == null) {\n+            String appImage = getArgumentValue(\"--app-image\");\n+            if (appImage != null) {\n+                installerName = AppImageFile.extractAppName(Path.of(appImage));\n+            }\n+        }\n+        return installerName;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                () -> cmd.name().toLowerCase());\n+                () -> cmd.installerName().toLowerCase());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-                () -> cmd.name());\n+                () -> cmd.installerName());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        return String.format(\"%s-%s%s\", cmd.name(), cmd.version(),\n+        return String.format(\"%s-%s%s\", cmd.installerName(), cmd.version(),\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.io.IOException;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.JPackageCommand;\n+\n+\/**\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Multiple names in two phases\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile MultiNameTwoPhaseTest.java\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=MultiNameTwoPhaseTest\n+ *\/\n+\n+public class MultiNameTwoPhaseTest {\n+\n+    @Test\n+    @Parameter({\"MultiNameTest\", \"MultiNameTest\"})\n+    @Parameter({\"MultiNameTest\", \"MultiNameTestInstaller\"})\n+    @Parameter({\"MultiNameTest\", \"\"})\n+    @Parameter({\"\", \"MultiNameTestInstaller\"})\n+    @Parameter({\"\", \"\"})\n+    public static void test(String... testArgs) throws IOException {\n+        String appName = testArgs[0];\n+        String installName = testArgs[1];\n+\n+        Path appimageOutput = TKit.createTempDirectory(\"appimage\");\n+\n+        JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n+                .setArgumentValue(\"--dest\", appimageOutput)\n+                .removeArgumentWithValue(\"--name\");\n+        if (!appName.isEmpty()) {\n+            appImageCmd.addArguments(\"--name\", appName);\n+        }\n+\n+        PackageTest packageTest = new PackageTest()\n+                .addRunOnceInitializer(() -> appImageCmd.execute())\n+                .addBundleDesktopIntegrationVerifier(true)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                    cmd.removeArgumentWithValue(\"--name\");\n+                    if (!installName.isEmpty()) {\n+                        cmd.addArguments(\"--name\", installName);\n+                    }\n+                })\n+                .forTypes(PackageType.WINDOWS)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--win-shortcut\", \"--win-menu\",\n+                            \"--win-menu-group\", \"MultiNameTwoPhaseTest\");\n+                })\n+                .forTypes(PackageType.LINUX)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-shortcut\");\n+                });\n+\n+        packageTest.run();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultiNameTwoPhaseTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}