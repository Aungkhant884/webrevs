{"files":[{"patch":"@@ -233,11 +233,0 @@\n-  \/\/ Check if allocation headroom is still okay. This also factors in:\n-  \/\/   1. Some space to absorb allocation spikes\n-  \/\/   2. Accumulated penalties from Degenerated and Full GC\n-  size_t allocation_headroom = available;\n-\n-  size_t spike_headroom = capacity \/ 100 * ShenandoahAllocSpikeFactor;\n-  size_t penalties      = capacity \/ 100 * _gc_time_penalties;\n-\n-  allocation_headroom -= MIN2(allocation_headroom, spike_headroom);\n-  allocation_headroom -= MIN2(allocation_headroom, penalties);\n-\n@@ -246,1 +235,1 @@\n-  if (avg_cycle_time > allocation_headroom \/ avg_alloc_rate) {\n+  if (avg_cycle_time > available \/ avg_alloc_rate) {\n@@ -250,1 +239,1 @@\n-                 byte_size_in_proper_unit(allocation_headroom), proper_unit_for_byte_size(allocation_headroom),\n+                 byte_size_in_proper_unit(available),      proper_unit_for_byte_size(available),\n@@ -253,6 +242,0 @@\n-    log_info(gc, ergo)(\"Free headroom: \" SIZE_FORMAT \"%s (free) - \" SIZE_FORMAT \"%s (spike) - \" SIZE_FORMAT \"%s (penalties) = \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(available),           proper_unit_for_byte_size(available),\n-                       byte_size_in_proper_unit(spike_headroom),      proper_unit_for_byte_size(spike_headroom),\n-                       byte_size_in_proper_unit(penalties),           proper_unit_for_byte_size(penalties),\n-                       byte_size_in_proper_unit(allocation_headroom), proper_unit_for_byte_size(allocation_headroom));\n-\n@@ -264,1 +247,1 @@\n-  if (is_spiking && avg_cycle_time > allocation_headroom \/ rate) {\n+  if (is_spiking && avg_cycle_time > available \/ rate) {\n@@ -268,1 +251,1 @@\n-                 byte_size_in_proper_unit(allocation_headroom), proper_unit_for_byte_size(allocation_headroom),\n+                 byte_size_in_proper_unit(available), proper_unit_for_byte_size(available),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-  _gc_time_penalties(0),\n@@ -209,17 +208,0 @@\n-void ShenandoahHeuristics::adjust_penalty(intx step) {\n-  assert(0 <= _gc_time_penalties && _gc_time_penalties <= 100,\n-          \"In range before adjustment: \" INTX_FORMAT, _gc_time_penalties);\n-\n-  intx new_val = _gc_time_penalties + step;\n-  if (new_val < 0) {\n-    new_val = 0;\n-  }\n-  if (new_val > 100) {\n-    new_val = 100;\n-  }\n-  _gc_time_penalties = new_val;\n-\n-  assert(0 <= _gc_time_penalties && _gc_time_penalties <= 100,\n-          \"In range after adjustment: \" INTX_FORMAT, _gc_time_penalties);\n-}\n-\n@@ -232,2 +214,0 @@\n-\n-  adjust_penalty(Concurrent_Adjust);\n@@ -239,2 +219,0 @@\n-\n-  adjust_penalty(Degenerated_Penalty);\n@@ -246,2 +224,0 @@\n-\n-  adjust_penalty(Full_Penalty);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -62,4 +62,0 @@\n-  static const intx Concurrent_Adjust   = -1; \/\/ recover from penalties\n-  static const intx Degenerated_Penalty = 10; \/\/ how much to penalize average GC duration history on Degenerated GC\n-  static const intx Full_Penalty        = 20; \/\/ how much to penalize average GC duration history on Full GC\n-\n@@ -81,1 +77,0 @@\n-  intx _gc_time_penalties;\n@@ -93,2 +88,0 @@\n-  void adjust_penalty(intx step);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -111,7 +111,0 @@\n-  product(uintx, ShenandoahAllocSpikeFactor, 5, EXPERIMENTAL,               \\\n-          \"How much of heap should some heuristics reserve for absorbing \"  \\\n-          \"the allocation spikes. Larger value wastes more memory in \"      \\\n-          \"non-emergency cases, but provides more safety in emergency \"     \\\n-          \"cases. In percents of (soft) max heap size.\")                    \\\n-          range(0,100)                                                      \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}