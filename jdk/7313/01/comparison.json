{"files":[{"patch":"@@ -272,2 +272,2 @@\n-        public void setCreatedFont(Font font) {\n-            font.createdFont = true;\n+        public void setWithFallback(Font font) {\n+            font.withFallback = true;\n@@ -460,0 +460,6 @@\n+    \/*\n+     * Font with fallback components (using CompositeFont), its Font2D handle\n+     * should be copied to derived fonts.\n+     *\/\n+    private transient boolean withFallback;\n+\n@@ -611,1 +617,1 @@\n-                 boolean created, Font2DHandle handle) {\n+                 boolean created, boolean withFallback, Font2DHandle handle) {\n@@ -614,0 +620,1 @@\n+        this.withFallback = withFallback;\n@@ -616,6 +623,3 @@\n-         * One exception is that if the derived font is requested to be\n-         * in a different style, then also check if its a CompositeFont\n-         * and if so build a new CompositeFont from components of that style.\n-         * CompositeFonts can only be marked as \"created\" if they are used\n-         * to add fall backs to a physical font. And non-composites are\n-         * always from \"Font.createFont()\" and shouldn't get this treatment.\n+         * When a derived font is requested to be in a different style\n+         * than a base font with fallback, then build a new CompositeFont\n+         * from components of that style.\n@@ -623,1 +627,1 @@\n-        if (created) {\n+        if (created || withFallback) {\n@@ -657,1 +661,1 @@\n-     * \"created\" is also true when a special composite is referenced by the\n+     * \"withFallback\" flag is set when a special composite is referenced by the\n@@ -676,1 +680,1 @@\n-                 boolean created, Font2DHandle handle) {\n+                 boolean created, boolean withFallback, Font2DHandle handle) {\n@@ -679,1 +683,2 @@\n-        if (created) {\n+        this.withFallback = withFallback;\n+        if (created || withFallback) {\n@@ -703,0 +708,1 @@\n+                this.withFallback = false;\n@@ -745,0 +751,1 @@\n+        this.withFallback = font.withFallback;\n@@ -874,1 +881,2 @@\n-                                font.createdFont, font.font2DHandle);\n+                                font.createdFont, font.withFallback,\n+                                font.font2DHandle);\n@@ -885,1 +893,2 @@\n-                                font.createdFont, font.font2DHandle);\n+                                font.createdFont, font.withFallback,\n+                                font.font2DHandle);\n@@ -1851,0 +1860,1 @@\n+                withFallback == font.withFallback &&\n@@ -2084,1 +2094,2 @@\n-            return new Font(name, style, size, createdFont, font2DHandle);\n+            return new Font(name, style, size, createdFont, withFallback,\n+                            font2DHandle);\n@@ -2090,1 +2101,2 @@\n-        return new Font(newValues, null, oldStyle, createdFont, font2DHandle);\n+        return new Font(newValues, null, oldStyle, createdFont, withFallback,\n+                        font2DHandle);\n@@ -2109,1 +2121,2 @@\n-        return new Font(newValues, null, oldStyle, createdFont, font2DHandle);\n+        return new Font(newValues, null, oldStyle, createdFont, withFallback,\n+                        font2DHandle);\n@@ -2121,1 +2134,2 @@\n-            return new Font(name, style, size, createdFont, font2DHandle);\n+            return new Font(name, style, size, createdFont, withFallback,\n+                            font2DHandle);\n@@ -2125,1 +2139,2 @@\n-        return new Font(newValues, null, -1, createdFont, font2DHandle);\n+        return new Font(newValues, null, -1, createdFont, withFallback,\n+                        font2DHandle);\n@@ -2141,1 +2156,2 @@\n-        return new Font(newValues, null, -1, createdFont, font2DHandle);\n+        return new Font(newValues, null, -1, createdFont, withFallback,\n+                        font2DHandle);\n@@ -2153,1 +2169,2 @@\n-           return new Font(name, style, size, createdFont, font2DHandle);\n+           return new Font(name, style, size, createdFont, withFallback,\n+                           font2DHandle);\n@@ -2158,1 +2175,2 @@\n-        return new Font(newValues, null, oldStyle, createdFont, font2DHandle);\n+        return new Font(newValues, null, oldStyle, createdFont, withFallback,\n+                        font2DHandle);\n@@ -2178,1 +2196,1 @@\n-        return new Font(newValues, name, style, createdFont, font2DHandle);\n+        return new Font(newValues, name, style, createdFont, withFallback, font2DHandle);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Font.java","additions":42,"deletions":24,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    public abstract void setCreatedFont(Font f);\n+    public abstract void setWithFallback(Font f);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,2 +431,2 @@\n-        \/* marking this as a created font is needed as only created fonts\n-         * copy their creator's handles.\n+        \/* marking this as a font with fallback to make sure its\n+         * handle is copied to derived fonts.\n@@ -434,1 +434,1 @@\n-        FontAccess.getFontAccess().setCreatedFont(fuir);\n+        FontAccess.getFontAccess().setWithFallback(fuir);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontUtilities.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -735,3 +735,2 @@\n-         * It also needs to be marked as a created font which is the\n-         * current mechanism to signal that deriveFont etc must copy\n-         * the handle from the original font.\n+         * Font is marked as having fallback components to signal that\n+         * deriveFont etc must copy the handle from the original font.\n@@ -742,1 +741,1 @@\n-        FontAccess.getFontAccess().setCreatedFont(fuir);\n+        FontAccess.getFontAccess().setWithFallback(fuir);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11FontManager.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright 2022 JetBrains s.r.o.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8185261\n+ * @summary Tests that font fallback works reliably in JEditorPane\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+\n+public class JEditorPaneFontFallback {\n+    public static final char CHINESE_CHAR = '\\u4e2d';\n+\n+    public static void main(String[] args) throws Exception {\n+        String fontFamily = findSuitableFont();\n+        if (fontFamily == null) {\n+            System.out.println(\"No suitable fonts, test cannot be performed\");\n+            return;\n+        }\n+        System.out.println(\"Fount font: \" + fontFamily);\n+        BufferedImage img1 = renderJEditorPaneInSubprocess(fontFamily, false);\n+        BufferedImage img2 = renderJEditorPaneInSubprocess(fontFamily, true);\n+        if (!imagesAreEqual(img1, img2)) {\n+            throw new RuntimeException(\"Unexpected rendering in JEditorPane\");\n+        }\n+    }\n+\n+    private static String findSuitableFont() {\n+        String[] familyNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n+        for (String familyName : familyNames) {\n+            if (!familyName.contains(\"'\") && !familyName.contains(\"<\") && !familyName.contains(\"&\")) {\n+                Font font = new Font(familyName, Font.PLAIN, 1);\n+                if (!font.canDisplay(CHINESE_CHAR)) return familyName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static boolean imagesAreEqual(BufferedImage i1, BufferedImage i2) {\n+        if (i1.getWidth() != i2.getWidth() || i1.getHeight() != i2.getHeight()) return false;\n+        for (int i = 0; i < i1.getWidth(); i++) {\n+            for (int j = 0; j < i1.getHeight(); j++) {\n+                if (i1.getRGB(i, j) != i2.getRGB(i, j)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static BufferedImage renderJEditorPaneInSubprocess(String fontFamilyName, boolean afterFontInfoCaching)\n+            throws Exception {\n+        String tmpFileName = \"image.png\";\n+        int exitCode = Runtime.getRuntime().exec(new String[]{\n+                System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + \"java\",\n+                \"-cp\",\n+                System.getProperty(\"test.classes\", \".\"),\n+                JEditorPaneRenderer.class.getName(),\n+                fontFamilyName,\n+                Boolean.toString(afterFontInfoCaching),\n+                tmpFileName\n+        }).waitFor();\n+        if (exitCode != 0) {\n+            throw new RuntimeException(\"Sub-process exited abnormally: \" + exitCode);\n+        }\n+        return ImageIO.read(new File(tmpFileName));\n+    }\n+}\n+\n+class JEditorPaneRenderer {\n+    private static final int FONT_SIZE = 12;\n+    private static final int WIDTH = 20;\n+    private static final int HEIGHT = 20;\n+\n+    public static void main(String[] args) throws Exception {\n+        String fontFamily = args[0];\n+        JEditorPane pane = new JEditorPane(\"text\/html\",\n+                \"<html><head><style>body {font-family:'\" + fontFamily + \"'; font-size:\" + FONT_SIZE +\n+                \"pt;}<\/style><\/head><body>\" + JEditorPaneFontFallback.CHINESE_CHAR + \"<\/body><\/html>\");\n+        pane.setSize(WIDTH, HEIGHT);\n+        if (Boolean.parseBoolean(args[1])) pane.getFontMetrics(new Font(fontFamily, Font.PLAIN, FONT_SIZE));\n+        BufferedImage img = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = img.createGraphics();\n+        pane.paint(g);\n+        g.dispose();\n+        ImageIO.write(img, \"png\", new File(args[2]));\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/JEditorPaneFontFallback.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}