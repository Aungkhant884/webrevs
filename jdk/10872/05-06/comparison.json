{"files":[{"patch":"@@ -34,4 +34,4 @@\n- * An arena is a {@linkplain AutoCloseable closeable} segment allocator that is associated with a {@link #session() memory session}.\n- * This session is created with the arena, and is closed when the arena is {@linkplain #close() closed}.\n- * Furthermore, all the native segments {@linkplain #allocate(long, long) allocated} by the arena are associated\n- * with that session.\n+ * An arena is a {@linkplain AutoCloseable closeable} segment allocator that has a {@link #session() memory session}.\n+ * The arena's session is created when the arena is created, and is closed when the arena is {@linkplain #close() closed}.\n+ * All native segments {@linkplain #allocate(long, long) allocated} by the arena are associated\n+ * with its session.\n@@ -61,5 +61,5 @@\n-     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes).\n-     * The returned segment is associated with the same memory session associated with this arena.\n-     * The {@link MemorySegment#address()} of the returned memory segment is the starting address of the\n-     * allocated off-heap memory region backing the segment. Moreover, the {@linkplain MemorySegment#address() address}\n-     * of the returned segment is aligned according the provided alignment constraint.\n+     * Creates a native memory segment with the given size (in bytes) and alignment constraint (in bytes).\n+     * The returned segment is associated with the arena's memory session.\n+     * The segment's {@link MemorySegment#address() address} is the starting address of the\n+     * allocated off-heap memory region backing the segment, and the address is \n+     * aligned according the provided alignment constraint.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-     * Creates an access var handle that can be used to access a memory segment at the layout selected by the given layout path,\n+     * Creates a var handle that can be used to access a memory segment at the layout selected by the given layout path,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n- * (e.g. after the memory session associated with the accessed memory segment is no longer {@linkplain MemorySession#isAlive() alive}.\n+ * (e.g., after the memory session associated with the accessed memory segment is no longer {@linkplain MemorySession#isAlive() alive}).\n@@ -312,1 +312,1 @@\n- * Heap segment can only be accessed using a layout whose alignment is smaller or equal to the\n+ * Heap segments can only be accessed using a layout whose alignment is smaller or equal to the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n- * segment = null; \/\/ the segment session is unreacheable here and becomes available for implicit close\n+ * segment = null; \/\/ the segment session is unreachable here and becomes available for implicit close\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,4 +178,4 @@\n-            if (type instanceof ValueLayout) {\n-                return ofValue((ValueLayout)type);\n-            } else if (type instanceof GroupLayout) {\n-                return ofStruct((GroupLayout)type);\n+            if (type instanceof ValueLayout valueLayout) {\n+                return ofValue(valueLayout);\n+            } else if (type instanceof GroupLayout groupLayout) {\n+                return ofStruct(groupLayout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-        VMStorage nextStorage(int type, MemoryLayout layout) {\n+        VMStorage nextStorage(int type) {\n@@ -165,2 +165,1 @@\n-                long alignment = Math.max(layout.byteAlignment(), STACK_SLOT_SIZE);\n-                stackOffset = Utils.alignUp(stackOffset, alignment);\n+                assert stackOffset == Utils.alignUp(stackOffset, STACK_SLOT_SIZE); \/\/ should always be aligned\n@@ -202,1 +201,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -212,1 +211,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -218,1 +217,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -223,1 +222,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -228,1 +227,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR);\n@@ -233,1 +232,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR);\n@@ -266,1 +265,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -274,1 +273,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -280,1 +279,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -286,1 +285,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -291,1 +290,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"}]}