{"files":[{"patch":"@@ -129,1 +129,1 @@\n-        if (!Utils.isAligned(byteSize(), elementLayout.byteSize())) {\n+        if ((byteSize() % elementLayout.byteSize()) != 0) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,2 @@\n-        MemorySegment.ofArray(new byte[2]).spliterator(ValueLayout.JAVA_INT);\n+        MemorySegment.allocateNative(2, SegmentScope.auto())\n+                .spliterator(ValueLayout.JAVA_INT);\n@@ -109,1 +110,2 @@\n-        MemorySegment.ofArray(new byte[2]).elements(ValueLayout.JAVA_INT);\n+        MemorySegment.allocateNative(2, SegmentScope.auto())\n+                .elements(ValueLayout.JAVA_INT);\n@@ -114,1 +116,2 @@\n-        MemorySegment.ofArray(new byte[7]).spliterator(ValueLayout.JAVA_INT);\n+        MemorySegment.allocateNative(7, SegmentScope.auto())\n+                .spliterator(ValueLayout.JAVA_INT);\n@@ -119,1 +122,14 @@\n-        MemorySegment.ofArray(new byte[7]).elements(ValueLayout.JAVA_INT);\n+        MemorySegment.allocateNative(7, SegmentScope.auto())\n+                .elements(ValueLayout.JAVA_INT);\n+    }\n+\n+    @Test\n+    public void testSpliteratorElementSizeMultipleButNotPowerOfTwo() {\n+        MemorySegment.allocateNative(12, SegmentScope.auto())\n+                .spliterator(ValueLayout.JAVA_INT);\n+    }\n+\n+    @Test\n+    public void testStreamElementSizeMultipleButNotPowerOfTwo() {\n+        MemorySegment.allocateNative(12, SegmentScope.auto())\n+                .elements(ValueLayout.JAVA_INT);\n@@ -124,1 +140,2 @@\n-        MemorySegment.ofArray(new byte[7]).spliterator(MemoryLayout.sequenceLayout(0, ValueLayout.JAVA_INT));\n+        MemorySegment.allocateNative(7, SegmentScope.auto())\n+                .spliterator(MemoryLayout.sequenceLayout(0, ValueLayout.JAVA_INT));\n@@ -129,1 +146,2 @@\n-        MemorySegment.ofArray(new byte[7]).elements(MemoryLayout.sequenceLayout(0, ValueLayout.JAVA_INT));\n+        MemorySegment.allocateNative(7, SegmentScope.auto())\n+                .elements(MemoryLayout.sequenceLayout(0, ValueLayout.JAVA_INT));\n@@ -134,1 +152,4 @@\n-        MemorySegment.ofArray(new byte[8]).elements(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT.withBitAlignment(64)));\n+        MemorySegment segment = MemorySegment.allocateNative(8, SegmentScope.auto());\n+        \/\/ compute an alignment constraint (in bytes) which exceed that of the native segment\n+        long bigAlign = Long.lowestOneBit(segment.address()) << 1;\n+        segment.elements(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT.withBitAlignment(bigAlign)));\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"}]}