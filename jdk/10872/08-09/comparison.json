{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Objects;\n+\n@@ -34,9 +36,4 @@\n- * An arena is a {@linkplain AutoCloseable closeable} segment allocator that has a {@link #session() memory session}.\n- * The arena's session is created when the arena is created, and is closed when the arena is {@linkplain #close() closed}.\n- * All native segments {@linkplain #allocate(long, long) allocated} by the arena are associated\n- * with its session.\n- * <p>\n- * The <a href=\"MemorySession.html#thread-confinement\">confinement properties<\/a> of the session associated with an\n- * arena are determined by the factory used to create the arena. For instance, an arena created with {@link #openConfined()}\n- * is associated with a <em>confined<\/em> memory session. Conversely, an arena created with {@link #openShared()} is\n- * associated with a <em>shared<\/em> memory session.\n+ * An arena is a {@linkplain AutoCloseable closeable} segment allocator that has a bounded {@link #session() memory session}.\n+ * The arena's session is created when the arena is created, and ends when the arena is {@linkplain #close() closed}.\n+ * All native segments {@linkplain #allocate(long, long) allocated} by the arena are associated with its session, and\n+ * cannot be accessed after the arena is closed.\n@@ -55,0 +52,26 @@\n+ * <h2 id = \"thread-confinement\">Safety and thread-confinement<\/h2>\n+ *\n+ * Arenas provide strong temporal safety guarantees: a memory segment allocated by an arena cannot be accessed\n+ * <em>after<\/em> the arena has been closed. The costs associated with maintaining this safety invariant can vary greatly,\n+ * depending on how many threads have access to the memory segments allocated by the arena. For instance, if an arena\n+ * is created and closed by one thread, and the segments associated with it are only ever accessed by that very same thread,\n+ * then ensuring correctness is simple.\n+ * <p>\n+ * Conversely, if an arena allocates segments that can be accessed by multiple threads, or if the arena can be closed\n+ * by a thread other than the accessing thread, the situation is much more complex. For instance, a segment might be accessed\n+ * <em>while<\/em> the associated arena is being closed, concurrently, by another thread. Even in this extreme case,\n+ * arenas must provide strong temporal safety guarantees, but doing so can incur in a higher performance impact.\n+ * For this reason, arenas can be divided into two categories: <em>thread-confined<\/em> arenas,\n+ * and <em>shared<\/em> arenas.\n+ * <p>\n+ * Confined arenas, support strong thread-confinement guarantees. Upon creation, they are assigned an\n+ * {@linkplain #isOwnedBy(Thread) owner thread}, typically the thread which initiated the creation operation.\n+ * The segments created by a confined arena can only be {@linkplain MemorySession#isAccessibleBy(Thread) accessed}\n+ * by the thread that created the arena. Moreover, any attempt to close the confined arena from a thread other than the owner thread will\n+ * fail with {@link WrongThreadException}.\n+ * <p>\n+ * Shared memory sessions, on the other hand, have no owner thread. The segments created by a shared arena\n+ * can be {@linkplain MemorySession#isAccessibleBy(Thread) accessed} by multiple threads. This might be useful when\n+ * multiple threads need to access the same memory segment concurrently (e.g. in the case of parallel processing).\n+ * Moreover, a shared arena can be closed by any thread.\n+ *\n@@ -79,2 +102,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} the session associated with this arena.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -94,3 +117,3 @@\n-     * Closes this arena. This closes the {@linkplain #session() session} associated with this arena and invalidates\n-     * all the memory segments associated with it. Any off-heap region of memory backing the segments associated with\n-     * that memory session are also released.\n+     * Closes this arena. If this method completes normally, the arena session becomes not {@linkplain MemorySession#isAlive() alive},\n+     * and all the memory segments associated with it can no longer be accessed. Furthermore, any off-heap region of memory backing the\n+     * segments associated with that memory session are also released.\n@@ -98,2 +121,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} the session associated with this arena.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code isOwnedBy(T) == false}.\n@@ -105,2 +128,8 @@\n-     * Creates a new arena, associated with a new confined session.\n-     * @return a new arena, associated with a new confined session.\n+     * {@return {@code true} if the provided thread can close this arena}\n+     * @param thread the thread to be tested.\n+     *\/\n+    boolean isOwnedBy(Thread thread);\n+\n+    \/**\n+     * Creates a new confined arena.\n+     * @return a new confined arena.\n@@ -113,2 +142,2 @@\n-     * Creates a new arena, associated with a new shared session.\n-     * @return a new arena, associated with a new shared session.\n+     * Creates a new shared arena.\n+     * @return a new shared arena.\n@@ -131,0 +160,6 @@\n+\n+            @Override\n+            public boolean isOwnedBy(Thread thread) {\n+                Objects.requireNonNull(thread);\n+                return sessionImpl.ownerThread() == thread;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":55,"deletions":20,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n- *     <li>The invocation occurs in same thread as the one {@linkplain MemorySession#isOwnedBy(Thread) owning} the memory session of {@code R},\n+ *     <li>The invocation occurs in same thread as the one {@linkplain MemorySession#isAccessibleBy(Thread) owning} the memory session of {@code R},\n@@ -255,1 +255,2 @@\n-     * the provided memory session. When such session is closed, the corresponding upcall stub will be deallocated.\n+     * the provided memory session. As such, the corresponding upcall stub will be deallocated\n+     * when the session becomes not {@linkplain MemorySession#isAlive() alive}.\n@@ -271,2 +272,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -584,2 +584,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -603,2 +603,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -607,2 +607,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code src}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code src.session().isAccessibleBy(T) == false}.\n@@ -637,2 +637,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -641,2 +641,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code other}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code other.session().isAccessibleBy(T) == false}.\n@@ -666,2 +666,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -683,2 +683,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -700,2 +700,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -729,2 +729,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -752,1 +752,1 @@\n-     * the thread {@linkplain MemorySession#isOwnedBy(Thread) owning} this segment's memory session will throw\n+     * the thread {@linkplain MemorySession#isAccessibleBy(Thread) owning} this segment's memory session will throw\n@@ -777,2 +777,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -791,2 +791,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -805,2 +805,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -819,2 +819,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -833,2 +833,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -847,2 +847,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -861,2 +861,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -883,2 +883,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -908,2 +908,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -931,1 +931,1 @@\n-     *     {@linkplain MemorySession#implicit() implicit session} that keeps the buffer reachable.\n+     *     {@linkplain MemorySession#implicit() implicitly-managed} memory session that keeps the buffer reachable.\n@@ -1097,2 +1097,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -1121,1 +1121,1 @@\n-     * The provided cleanup action (if any) will be invoked <em>after<\/em> the provided session is closed.\n+     * The provided cleanup action (if any) will be invoked when the session becomes not {@linkplain MemorySession#isAlive() alive}.\n@@ -1140,2 +1140,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -1157,4 +1157,7 @@\n-     * Clients are responsible for ensuring that the memory session associated with the returned segment is\n-     * closed when segments are no longer in use. Failure to do so will result in off-heap memory leaks. As an\n-     * alternative, an {@linkplain MemorySession#implicit() implicitly closed} session can be used, allowing\n-     * the returned segment to be automatically released some unspecified time after the session is no longer referenced.\n+     * The lifetime off-heap region of memory associated with the returned native segment is determined by the\n+     * provided memory session. The off-heap memory region is deallocated when the session becomes not\n+     * {@linkplain MemorySession#isAlive() alive}. If the session has been obtained using an {@link Arena},\n+     * clients are responsible for ensuring that the arena is closed when the returned segment is no longer in use\n+     * Failure to do so will result in off-heap memory leaks. As an alternative, an {@linkplain MemorySession#implicit() implicitly-managed}\n+     * session can be used, allowing the off-heap memory region associated with the returned native segment to be\n+     * automatically released some unspecified time after the session is no longer referenced.\n@@ -1177,2 +1180,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -1189,4 +1192,7 @@\n-     * Clients are responsible for ensuring that the memory session associated with the returned segment is\n-     * closed when segments are no longer in use. Failure to do so will result in off-heap memory leaks. As an\n-     * alternative, an {@linkplain MemorySession#implicit() implicitly closed} session can be used, allowing\n-     * the returned segment to be automatically released some unspecified time after the session is no longer referenced.\n+     * The lifetime of the off-heap region of memory associated with the returned native segment is determined by the\n+     * provided memory session. The off-heap memory region is deallocated when the session becomes not\n+     * {@linkplain MemorySession#isAlive() alive}. If the session has been obtained using an {@link Arena},\n+     * clients are responsible for ensuring that the arena is closed when the returned segment is no longer in use\n+     * Failure to do so will result in off-heap memory leaks. As an alternative, an {@linkplain MemorySession#implicit() implicitly-managed}\n+     * session can be used, allowing the off-heap memory region associated with the returned native segment to be\n+     * automatically released some unspecified time after the session is no longer referenced.\n@@ -1210,2 +1216,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -1220,4 +1226,7 @@\n-     * Clients are responsible for ensuring that the memory session associated with the returned segment is\n-     * closed when segments are no longer in use. Failure to do so will result in off-heap memory leaks. As an\n-     * alternative, an {@linkplain MemorySession#implicit() implicitly closed} session can be used, allowing\n-     * the returned segment to be automatically released some unspecified time after the session is no longer referenced.\n+     * The lifetime of the off-heap region of memory associated with the returned native segment is determined by the\n+     * provided memory session. The off-heap memory region is deallocated when the session becomes not\n+     * {@linkplain MemorySession#isAlive() alive}. If the session has been obtained using an {@link Arena},\n+     * clients are responsible for ensuring that the arena is closed when the returned segment is no longer in use\n+     * Failure to do so will result in off-heap memory leaks. As an alternative, an {@linkplain MemorySession#implicit() implicitly-managed}\n+     * session can be used, allowing the off-heap memory region associated with the returned native segment to be\n+     * automatically released some unspecified time after the session is no longer referenced.\n@@ -1238,2 +1247,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n@@ -1272,2 +1281,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code srcSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code srcSegment.session().isAccessibleBy(T) == false}.\n@@ -1276,2 +1285,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code dstSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code dstSegment.session().isAccessibleBy(T) == false}.\n@@ -1319,2 +1328,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this {@code srcSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code srcSegment.session().isAccessibleBy(T) == false}.\n@@ -1323,2 +1332,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code dstSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code dstSegment.session().isAccessibleBy(T) == false}.\n@@ -1372,2 +1381,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1392,2 +1401,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1413,2 +1422,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1433,2 +1442,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1454,2 +1463,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1474,2 +1483,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1495,2 +1504,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1515,2 +1524,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1536,2 +1545,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1556,2 +1565,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1577,2 +1586,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1597,2 +1606,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1618,2 +1627,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1638,2 +1647,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1659,2 +1668,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1679,2 +1688,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1703,2 +1712,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1723,2 +1732,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1745,2 +1754,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1769,2 +1778,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1794,2 +1803,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1818,2 +1827,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1843,2 +1852,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1867,2 +1876,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1892,2 +1901,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1916,2 +1925,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1941,2 +1950,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1965,2 +1974,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -1990,2 +1999,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -2014,2 +2023,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -2043,2 +2052,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -2067,2 +2076,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with this segment.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session().isAccessibleBy(T) == false}.\n@@ -2128,2 +2137,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code srcSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code srcSegment.session().isAccessibleBy(T) == false}.\n@@ -2162,2 +2171,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code dstSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code dstSegment.session().isAccessibleBy(T) == false}.\n@@ -2204,2 +2213,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code srcSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code srcSegment.session().isAccessibleBy(T) == false}.\n@@ -2208,2 +2217,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the {@linkplain #session() session} associated with {@code dstSegment}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code dstSegment.session().isAccessibleBy(T) == false}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":150,"deletions":141,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * A memory session manages the lifecycle of memory segments.\n+ * A memory session models the lifetime of a memory segment.\n@@ -36,1 +36,1 @@\n- * and by the {@linkplain #isOwnedBy(Thread) thread} associated with the session (if any).\n+ * and by the {@linkplain #isAccessibleBy(Thread) thread} associated with the session (if any).\n@@ -38,20 +38,4 @@\n- * Memory sessions can be closed, either explicitly (i.e. using an {@linkplain Arena arena}) or implicitly, by the garbage\n- * collector. When a memory session is closed, it is no longer {@linkplain #isAlive() alive}, and subsequent operations\n- * on the segments associated with that session (e.g. {@link MemorySegment#get(ValueLayout.OfInt, long)})\n- * will fail with {@link IllegalStateException}.\n- *\n- * <h2 id = \"thread-confinement\">Safety and thread-confinement<\/h2>\n- *\n- * Memory sessions provide strong temporal safety guarantees: a memory segment associated with a session cannot be accessed\n- * <em>after<\/em> the session has been closed. The costs associated with maintaining this safety invariant can vary greatly,\n- * depending on how many threads have access to the memory segment associated to a memory session. For instance,\n- * if a memory session is created and closed by one thread, and the segments associated with it are only ever accessed by that very same\n- * thread, it is easy to show that there cannot be situations where a memory segment is accessed <em>while<\/em> its\n- * associated session is being closed.\n- * <p>\n- * Conversely, if a session is associated with segments that can be accessed by multiple threads, or if the session can be\n- * closed by a thread other than the accessing thread, the situation is much more complex. For instance, it would\n- * be possible for a segment to be accessed while its associated session is being closed, concurrently,\n- * by another thread. Even in this case, memory sessions provide strong temporal safety guarantees, but doing\n- * so can incur in a higher performance impact: when closing a memory session the Java runtime has to determine\n- * that no segment associated with that session is being accessed.\n+ * Memory sessions can be <em>unbounded<\/em> or <em>bounded<\/em>. An unbounded memory session is obtained by calling\n+ * {@link MemorySession#global()}. An unbounded memory session is always alive. As a result, the segments associated\n+ * with an unbounded session are always accessible and their backing regions of memory are never deallocated. Moreover,\n+ * memory segments associated with unbounded sessions can be accessed from any thread.\n@@ -59,12 +43,6 @@\n- * For this reason, memory sessions can be divided into two categories: <em>thread-confined<\/em> memory sessions, and <em>shared<\/em>\n- * memory sessions.\n- * <p>\n- * Confined memory sessions, support strong thread-confinement guarantees. Upon creation,\n- * they are assigned an {@linkplain #isOwnedBy(Thread) owner thread}, typically the thread which initiated the creation operation.\n- * After creating a confined memory session, only the owner thread will be allowed to directly manipulate the resources\n- * associated with this memory session. Any attempt to perform resource access from a thread other than the\n- * owner thread will fail with {@link WrongThreadException}.\n- * <p>\n- * Shared memory sessions, on the other hand, have no owner thread; as such, resources associated with shared memory sessions\n- * can be accessed by multiple threads. This might be useful when multiple threads need to access the same resource concurrently\n- * (e.g. in the case of parallel processing).\n+ * Conversely, a bounded memory session has a start and an end. Bounded memory sessions can be managed either\n+ * explicitly, (i.e. using an {@linkplain Arena arena}) or implicitly, by the garbage collector. When a bounded memory\n+ * session ends, it is no longer {@linkplain #isAlive() alive}, and subsequent operations\n+ * on the segments associated with that bounded session (e.g. {@link MemorySegment#get(ValueLayout.OfInt, long)})\n+ * will fail with {@link IllegalStateException}. Moreover, to prevent temporal safety, access to memory segments associated with\n+ * bounded sessions might be <a href=\"Arena.html#thread-confinement\">restricted to specific threads<\/a>.\n@@ -72,1 +50,1 @@\n- * <h2 id=\"implicit\">Implicitly closed sessions<\/h2>\n+ * <h2 id=\"implicit\">Implicitly-managed bounded memory sessions<\/h2>\n@@ -74,5 +52,5 @@\n- * Memory sessions that can be closed explicitly, while powerful, must be used with caution. These sessions must be closed\n- * when no longer in use (via their associated arenas), by calling the {@link Arena#close} method. A failure to do so\n- * might result in memory leaks. To mitigate this problem, clients can use {@linkplain #implicit() sessions} that\n- * are closed implicitly, by the garbage collector. These sessions are closed at some unspecified time <em>after<\/em>\n- * they become <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>, as shown below:\n+ * Managing bounded memory session explicitly, using arenas, while powerful, must be used with caution. An arena must always\n+ * be closed when no longer in use (this is done using {@link Arena#close()}). A failure to do so\n+ * might result in memory leaks. To mitigate this problem, clients can obtain an {@linkplain MemorySession#implicit() obtain}\n+ * bounded memory sessions that are managed implicitly, by the garbage collector. These sessions end at some unspecified\n+ * time <em>after<\/em> they become <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>, as shown below:\n@@ -83,1 +61,1 @@\n- * segment = null; \/\/ the segment session is unreachable here and becomes available for implicit close\n+ * segment = null; \/\/ the session might end after this instruction\n@@ -86,2 +64,5 @@\n- * Sessions closed implicitly can be useful to manage long-lived segments, where timely deallocation is not critical,\n- * or in unstructured cases where it is not easy to determine <em>when<\/em> a session should be closed.\n+ * Bounded sessions that are managed implicitly can be useful to manage long-lived segments, where timely deallocation\n+ * is not critical, or in unstructured cases where the boundaries of the lifetime associated with a memory session\n+ * cannot be easily determined. As shown in the example above, a memory session that is managed implicitly cannot end\n+ * if a program references to one or more segments associated with that session. This means that implicitly managed\n+ * session can naturally support safe access from multiple threads.\n@@ -109,2 +90,2 @@\n-     * {@return test if the provided thread is the owner thread associated with this memory session}\n-     * @param thread the thread to be compared against this session's owner thread.\n+     * {@return {@code true} if the provided thread can access segments associated with this memory session}\n+     * @param thread the thread to be tested.\n@@ -112,1 +93,1 @@\n-    boolean isOwnedBy(Thread thread);\n+    boolean isAccessibleBy(Thread thread);\n@@ -117,0 +98,3 @@\n+     * @throws IllegalStateException if this session is not {@linkplain MemorySession#isAlive() alive}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code isAccessibleBy(T) == false}.\n@@ -121,2 +105,3 @@\n-     * Creates a new memory session that is closed, implicitly, by the garbage collector.\n-     * The returned session can be shared across threads.\n+     * Creates a new bounded memory session that is managed, implicitly, by the garbage collector.\n+     * The segments associated with the returned session can be\n+     * {@linkplain MemorySession#isAccessibleBy(Thread) accessed} by multiple threads.\n@@ -124,1 +109,1 @@\n-     * @return a new memory session that is closed, implicitly, by the garbage collector.\n+     * @return a new bounded memory session that is managed, implicitly, by the garbage collector.\n@@ -131,1 +116,4 @@\n-     * {@return the global memory session}\n+     * Obtains an unbounded memory session. The segments associated with the returned session can be\n+     * {@linkplain MemorySession#isAccessibleBy(Thread) accessed} by multiple threads.\n+     *\n+     * @return an unbounded memory session.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":38,"deletions":50,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -392,2 +392,3 @@\n-     * Each native segment obtained by the returned allocator is associated with the provided session. As such, the\n-     * off-heap region which backs the returned segment is freed when the session is closed.\n+     * Each native segment obtained by the returned allocator is associated with the provided session. As such,\n+     * the off-heap region which backs the returned segment is freed when the session becomes not\n+     * {@linkplain MemorySession#isAlive() alive}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n- * with a {@linkplain  MemorySession memory session}; when the session is closed, the library is unloaded:\n+ * with a {@linkplain  MemorySession memory session}; when the session ends, the library is unloaded:\n@@ -177,1 +177,2 @@\n-     * The library will be unloaded when the provided memory session is closed, if no other library lookup is still using it.\n+     * The library will be unloaded when the provided memory session becomes\n+     * not {@linkplain MemorySession#isAlive() alive}, if no other library lookup is still using it.\n@@ -203,2 +204,2 @@\n-     * in that library. The library will be unloaded when the provided memory session is closed,\n-     * if no other library lookup is still using it.\n+     * in that library. The library will be unloaded when the provided memory session becomes\n+     * not {@linkplain MemorySession#isAlive() alive}, if no other library lookup is still using it.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -124,2 +124,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -138,2 +138,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -157,2 +157,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -180,2 +180,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -192,2 +192,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -210,2 +210,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread owning\n-     * the session associated with this variable argument list.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code segment().session().isAccessibleBy(T) == false}.\n@@ -228,2 +228,3 @@\n-     * the lifecycle of the returned variable argument list: when the session is closed,\n-     * the returned variable argument list will no longer be accessible.\n+     * the lifecycle of the returned variable argument list: the returned variable argument list will no longer be accessible,\n+     * and its associated off-heap memory region will be deallocated when the session becomes not\n+     * {@linkplain MemorySession#isAlive() alive}.\n@@ -240,2 +241,2 @@\n-     * @throws WrongThreadException          if this method is called from a thread other than the thread\n-     *                                       {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException          if this method is called from a thread {@code T},\n+     *                                       such that {@code session.isAccessibleBy(T) == false}.\n@@ -256,4 +257,3 @@\n-     * memory session.\n-     * <p>\n-     * If this method needs to allocate memory, such memory will be managed by the given\n-     * session, and will be released when the session is closed.\n+     * memory session. The provided session determines the lifecycle of the returned variable argument list: the\n+     * returned variable argument list will no longer be accessible, and its associated off-heap memory region will be\n+     * deallocated when the session becomes not {@linkplain MemorySession#isAlive() alive}.\n@@ -272,2 +272,2 @@\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#isOwnedBy(Thread) owning} {@code session}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code session.isAccessibleBy(T) == false}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1064,1 +1064,1 @@\n-     *          {@linkplain MemorySession#isOwnedBy(Thread) owning} the\n+     *          {@linkplain MemorySession#isAccessibleBy(Thread) owning} the\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    public final boolean isOwnedBy(Thread thread) {\n+    public final boolean isAccessibleBy(Thread thread) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-        if (segment.session().isOwnedBy(Thread.currentThread())) {\n+        if (segment.session().isAccessibleBy(Thread.currentThread())) {\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}