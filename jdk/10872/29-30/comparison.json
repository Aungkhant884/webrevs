{"files":[{"patch":"@@ -228,1 +228,1 @@\n-      holder->is_in_package(\"jdk\/internal\/foreign\") || holder->is_in_package(\"java\/lang\/foreign\") ||\n+      holder->is_in_package(\"jdk\/internal\/foreign\/layout\") || holder->is_in_package(\"jdk\/internal\/foreign\") ||\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        implements MemorySegment, SegmentAllocator, Scoped, BiFunction<String, List<Number>, RuntimeException>\n+        implements MemorySegment, SegmentAllocator, BiFunction<String, List<Number>, RuntimeException>\n@@ -332,0 +332,1 @@\n+        \/\/ elemSize is guaranteed to be a power of two, so we can use an alignment check\n@@ -364,0 +365,5 @@\n+    @ForceInline\n+    public final MemorySessionImpl sessionImpl() {\n+        return (MemorySessionImpl)session;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.foreign;\n-\n-import jdk.internal.vm.annotation.ForceInline;\n-\n-import java.lang.foreign.SegmentScope;\n-\n-public interface Scoped {\n-    @ForceInline\n-    default MemorySessionImpl sessionImpl() {\n-        return (MemorySessionImpl) scope();\n-    }\n-    SegmentScope scope();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Scoped.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -29,1 +30,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -501,2 +501,2 @@\n-        emitCheckCast(Scoped.class);\n-        emitInvokeInterface(Scoped.class, \"sessionImpl\", SESSION_IMPL_DESC);\n+        emitCheckCast(AbstractMemorySegmentImpl.class);\n+        emitInvokeVirtual(AbstractMemorySegmentImpl.class, \"sessionImpl\", SESSION_IMPL_DESC);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_INT_UNALIGNED;\n@@ -63,1 +64,1 @@\n-    final Arena arena = Arena.openConfined();\n+    final Arena arena = Arena.openShared();\n@@ -141,1 +142,1 @@\n-        MemorySegment.copy(ints, 0, segment, JAVA_BYTE, 0, ints.length);\n+        MemorySegment.copy(ints, 0, segment, JAVA_INT_UNALIGNED, 0, ints.length);\n@@ -147,1 +148,1 @@\n-        MemorySegment.copy(ints, 0, segment, JAVA_BYTE, 0, 10);\n+        MemorySegment.copy(ints, 0, segment, JAVA_INT_UNALIGNED, 0, 10);\n@@ -154,1 +155,1 @@\n-        MemorySegment.copy(ints, 0, segment, JAVA_BYTE, 0, 10);\n+        MemorySegment.copy(ints, 0, segment, JAVA_INT_UNALIGNED, 0, 10);\n@@ -179,1 +180,1 @@\n-        MemorySegment.copy(ints, 0, segment, JAVA_BYTE, 0, ints.length);\n+        MemorySegment.copy(ints, 0, segment, JAVA_INT_UNALIGNED, 0, ints.length);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}