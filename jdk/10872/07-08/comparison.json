{"files":[{"patch":"@@ -202,3 +202,4 @@\n- * Binding foreign data and\/or functions is generally unsafe and, if done incorrectly, can result in VM crashes, or memory corruption when the bound Java API element is accessed.\n- * For instance, in the case of {@link java.lang.foreign.MemorySegment#ofAddress(long, long, MemorySession)},\n- * if the provided spatial bounds are incorrect, a client of the segment returned by that method might crash the VM, or corrupt\n+ * Binding foreign data and\/or functions is generally unsafe and, if done incorrectly, can result in VM crashes,\n+ * or memory corruption when the bound Java API element is accessed. For instance, in the case of\n+ * {@link java.lang.foreign.MemorySegment#ofAddress(long, long, MemorySession)}, if the provided spatial bounds are\n+ * incorrect, a client of the segment returned by that method might crash the VM, or corrupt\n@@ -208,5 +209,4 @@\n- * Access to restricted methods can be controlled using the command line option {@code --enable-native-access=M1,M2, ... Mn},\n- * where {@code M1}, {@code M2}, {@code ... Mn} are module names (for the unnamed module, the special value {@code ALL-UNNAMED}\n- * can be used). If this option is specified, access to restricted methods is only granted to the modules listed by that\n- * option. If this option is not specified, access to restricted methods is enabled for all modules, but\n- * access to restricted methods will result in runtime warnings.\n+ * Given the potential danger of restricted methods, the Java runtime issues a warning on the standard error stream\n+ * every time a restricted method is invoked. Such warnings can be disabled by granting access to restricted methods\n+ * to selected modules. This can be done either via implementation-specific command line options, or programmatically, e.g. by calling\n+ * {@link java.lang.ModuleLayer.Controller#enableNativeAccess(java.lang.Module)}.\n@@ -217,0 +217,8 @@\n+ *\n+ * @implNote\n+ * In the reference implementation, access to restricted methods can be granted to specific modules using the command line option\n+ * {@code --enable-native-access=M1,M2, ... Mn}, where {@code M1}, {@code M2}, {@code ... Mn} are module names\n+ * (for the unnamed module, the special value {@code ALL-UNNAMED} can be used). If this option is specified, access to\n+ * restricted methods is only granted to the modules listed by that option. If this option is not specified,\n+ * access to restricted methods is enabled for all modules, but access to restricted methods will result in runtime warnings.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"}]}