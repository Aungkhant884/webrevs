{"files":[{"patch":"@@ -68,1 +68,1 @@\n- * {@linkplain #isOwnedBy(Thread) owner thread}, typically the thread which initiated the creation operation.\n+ * {@linkplain #isCloseableBy(Thread) owner thread}, typically the thread which initiated the creation operation.\n@@ -76,1 +76,1 @@\n- * Moreover, a shared arena can be closed by any thread.\n+ * Moreover, a shared arena {@linkplain #isCloseableBy(Thread) can be closed} by any thread.\n@@ -131,1 +131,1 @@\n-    boolean isOwnedBy(Thread thread);\n+    boolean isCloseableBy(Thread thread);\n@@ -162,1 +162,1 @@\n-            public boolean isOwnedBy(Thread thread) {\n+            public boolean isCloseableBy(Thread thread) {\n@@ -164,1 +164,2 @@\n-                return sessionImpl.ownerThread() == thread;\n+                return sessionImpl.ownerThread() == null || \/\/ shared\n+                        sessionImpl.ownerThread() == thread;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * will fail with {@link IllegalStateException}. Moreover, to prevent temporal safety, access to memory segments associated with\n+ * will fail with {@link IllegalStateException}. Moreover, to guarantee temporal safety, access to memory segments associated with\n@@ -53,1 +53,1 @@\n- * might result in memory leaks. To mitigate this problem, clients can obtain an {@linkplain MemorySession#implicit() obtain}\n+ * might result in memory leaks. To mitigate this problem, clients can {@linkplain MemorySession#implicit() obtain}\n@@ -63,1 +63,1 @@\n- * Bounded sessions that are managed implicitly can be useful to manage long-lived segments, where timely deallocation\n+ * Bounded sessions that are managed implicitly can be useful to allocate long-lived segments, where timely deallocation\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -162,1 +162,2 @@\n-            rem = segment.byteSize() - segment.segmentOffset(res);\n+            long lastOffset = segment.segmentOffset(res) + res.byteSize();\n+            rem = segment.byteSize() - lastOffset;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}