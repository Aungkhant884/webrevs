{"files":[{"patch":"@@ -140,0 +140,2 @@\n+  \/\/ Returns base of red zone (one-beyond the highest red zone address, so\n+  \/\/  itself outside red zone and the highest address of the yellow zone).\n@@ -144,0 +146,1 @@\n+  \/\/ Returns true if address points into the red zone.\n@@ -145,1 +148,1 @@\n-    return a <= stack_red_zone_base() && a >= stack_end();\n+    return a < stack_red_zone_base() && a >= stack_end();\n@@ -158,0 +161,1 @@\n+  \/\/ Returns base of the reserved zone (one-beyond the highest reserved zone address).\n@@ -162,0 +166,2 @@\n+\n+  \/\/ Returns true if address points into the reserved zone.\n@@ -163,1 +169,1 @@\n-    return (a <= stack_reserved_zone_base()) &&\n+    return (a < stack_reserved_zone_base()) &&\n@@ -170,0 +176,2 @@\n+\n+  \/\/ Returns true if a points into either yellow or reserved zone.\n@@ -171,1 +179,1 @@\n-    return (a <= stack_reserved_zone_base()) && (a >= stack_red_zone_base());\n+    return (a < stack_reserved_zone_base()) && (a >= stack_red_zone_base());\n","filename":"src\/hotspot\/share\/runtime\/stackOverflow.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"runtime\/stackOverflow.hpp\"\n+#include \"utilities\/align.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include \"unittest.hpp\"\n+\n+\n+TEST_VM(StackOverflow, basics) {\n+  StackOverflow so;\n+\n+  \/\/ Make up a stack range. No need to allocate anything. Size has to be large enough\n+  \/\/  to fit sum of all zones into them.\n+  address base = (address) 0x40000000;\n+  const size_t size = os::vm_page_size() * 100;\n+  address end = base - size;\n+  so.initialize(base, end);\n+\n+  \/\/ Walking down the \"stack\" check for consistency of the three \"in_stack_xxx\" functions\n+  enum { normal_stack, reserved_or_yellow_zone, red_zone } where = normal_stack;\n+  for (address p = base - 1; p >= end; p -= os::vm_page_size()) {\n+    \/\/ tty->print_cr(PTR_FORMAT \" %d %d %d\", p2i(p),\n+    \/\/     (int)so.in_stack_reserved_zone(p),\n+    \/\/     (int)so.in_stack_yellow_reserved_zone(p),\n+    \/\/     (int)so.in_stack_red_zone(p));\n+    switch (where) {\n+    case normal_stack:\n+      ASSERT_FALSE(so.in_stack_red_zone(p));\n+      if (so.in_stack_yellow_reserved_zone(p)) {\n+        if (StackReservedPages > 0) {\n+          ASSERT_TRUE(so.in_stack_reserved_zone(p));\n+        } else {\n+          ASSERT_FALSE(so.in_stack_reserved_zone(p));\n+        }\n+        where = reserved_or_yellow_zone;\n+      } else {\n+        ASSERT_FALSE(so.in_stack_reserved_zone((p)));\n+      }\n+      break;\n+    case reserved_or_yellow_zone:\n+      if (so.in_stack_red_zone(p)) {\n+        ASSERT_FALSE(so.in_stack_yellow_reserved_zone(p));\n+        where = red_zone;\n+      } else {\n+        ASSERT_TRUE(so.in_stack_yellow_reserved_zone(p));\n+      }\n+      break;\n+    case red_zone:\n+      ASSERT_TRUE(so.in_stack_red_zone(p));\n+      ASSERT_FALSE(so.in_stack_yellow_reserved_zone(p));\n+      ASSERT_FALSE(so.in_stack_reserved_zone((p)));\n+      break;\n+    }\n+  }\n+  ASSERT_EQ(where, red_zone);\n+\n+  \/\/ Check bases.\n+  ASSERT_FALSE(so.in_stack_red_zone(so.stack_red_zone_base()));\n+  ASSERT_TRUE(so.in_stack_red_zone(so.stack_red_zone_base() - 1));\n+  ASSERT_TRUE(so.in_stack_yellow_reserved_zone(so.stack_red_zone_base()));\n+  ASSERT_FALSE(so.in_stack_reserved_zone(so.stack_reserved_zone_base()));\n+  if (so.stack_reserved_zone_size() > 0) {\n+    ASSERT_TRUE(so.in_stack_reserved_zone(so.stack_reserved_zone_base() - 1));\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_stackoverflow.cpp","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}