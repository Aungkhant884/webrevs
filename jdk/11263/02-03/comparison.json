{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import com.sun.source.tree.VariableTree;\n@@ -48,0 +49,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -49,0 +51,1 @@\n+import javax.lang.model.type.TypeMirror;\n@@ -165,0 +168,57 @@\n+\n+    @Test\n+    public void testVarAssignment2Self(Path base) throws Exception {\n+        Path current = base;\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Test {\n+                              void t() {\n+                                  var v = v;\n+                              }\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        AtomicInteger seenVariables = new AtomicInteger();\n+        TreePathScanner<Void, Trees> checkTypes = new TreePathScanner<>() {\n+            @Override\n+            public Void visitVariable(VariableTree node, Trees trees) {\n+                if (node.getName().contentEquals(\"v\")) {\n+                    TypeMirror type = trees.getTypeMirror(getCurrentPath());\n+                    if (type == null) {\n+                        throw new AssertionError(\"Unexpected null type!\");\n+                    }\n+                    seenVariables.incrementAndGet();\n+                }\n+                return super.visitVariable(node, trees);\n+            }\n+        };\n+\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\")\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .callback(t -> {\n+                t.addTaskListener(new TaskListener() {\n+                    CompilationUnitTree parsed;\n+                    @Override\n+                    public void finished(TaskEvent e) {\n+                        switch (e.getKind()) {\n+                            case PARSE -> parsed = e.getCompilationUnit();\n+                            case COMPILATION ->\n+                                checkTypes.scan(parsed, Trees.instance(t));\n+                        }\n+                    }\n+                });\n+            })\n+            .run(Task.Expect.FAIL)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (seenVariables.get() != 1) {\n+            throw new AssertionError(\"Didn't see enough variables: \" + seenVariables);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/attr\/AttrRecoveryTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}