{"files":[{"patch":"@@ -30,10 +30,1 @@\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib\n- * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/LogFilter.java\n- * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/EchoHandler.java\n- * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/FileServerHandler.java\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @build LightWeightHttpServer\n- * @build jdk.test.lib.Platform\n- * @run testng\/othervm\/java.security.policy=RequestBodyTest.policy StreamCloseTest\n+ * @run testng\/othervm StreamCloseTest\n@@ -44,0 +35,1 @@\n+import java.io.UncheckedIOException;\n@@ -50,1 +42,7 @@\n-import java.net.URI;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousSocketChannel;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.CompletionHandler;\n@@ -80,0 +78,1 @@\n+            super.close();\n@@ -83,0 +82,2 @@\n+    private static AsynchronousServerSocketChannel server;\n+\n@@ -87,0 +88,6 @@\n+    private static final String SERVER_RESPONSE_STRING = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                                                         \"Content-Length: 0\\r\\n\" +\n+                                                         \"\\r\\n\";\n+\n+    private static final ByteBuffer SERVER_RESPONSE = ByteBuffer.wrap(SERVER_RESPONSE_STRING.getBytes());\n+\n@@ -89,1 +96,18 @@\n-        LightWeightHttpServer.initServer();\n+        server = AsynchronousServerSocketChannel.open()\n+                                                .bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+        server.accept(null, new CompletionHandler<AsynchronousSocketChannel, Void>() {\n+            public void completed(AsynchronousSocketChannel ch, Void att) {\n+                server.accept(null, this);\n+                SERVER_RESPONSE.rewind();\n+                ch.write(SERVER_RESPONSE);\n+                try {\n+                    ch.close();\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            }\n+            public void failed(Throwable exc, Void att) {\n+                \/\/ Do nothing\n+            }\n+        });\n+\n@@ -94,2 +118,3 @@\n-        URI uri = URI.create(LightWeightHttpServer.httproot + \"echo\/foo\");\n-        requestBuilder = HttpRequest.newBuilder(uri);\n+        InetSocketAddress localAddr = (InetSocketAddress)server.getLocalAddress();\n+        URL url = new URL(\"http\", localAddr.getHostString(), localAddr.getPort(), \"\/\");\n+        requestBuilder = HttpRequest.newBuilder(url.toURI());\n@@ -100,1 +125,1 @@\n-        LightWeightHttpServer.stop();\n+        server.close();\n@@ -121,2 +146,3 @@\n-        } catch (IOException e) {\n-            \/\/ expected\n+        } catch (IOException e) { \/\/ expected\n+            Assert.assertTrue(in.closeCalled, \"InputStream was not closed!\");\n+            return;\n@@ -124,1 +150,1 @@\n-        Assert.assertTrue(in.closeCalled, \"InputStream was not closed!\");\n+        Assert.fail(\"IOException should be occurred!\");\n","filename":"test\/jdk\/java\/net\/httpclient\/StreamCloseTest.java","additions":44,"deletions":18,"binary":false,"changes":62,"status":"modified"}]}