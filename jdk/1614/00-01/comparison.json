{"files":[{"patch":"@@ -401,1 +401,1 @@\n-        private int read() {\n+        private int read() throws IOException {\n@@ -409,17 +409,3 @@\n-            try {\n-                int n = is.read(buf, offset, cap);\n-                if (n == -1) {\n-                    eof = true;\n-                    is.close();\n-                    return -1;\n-                }\n-                \/\/flip\n-                nextBuffer.limit(n);\n-                nextBuffer.position(0);\n-                return n;\n-            } catch (IOException ex) {\n-                need2Read = false;\n-                haveNext = false;\n-                try {\n-                    is.close();\n-                } catch (IOException ex2) {}\n+            int n = is.read(buf, offset, cap);\n+            if (n == -1) {\n+                eof = true;\n@@ -428,0 +414,15 @@\n+            nextBuffer.limit(n);\n+            nextBuffer.position(0);\n+            return n;\n+        }\n+\n+        \/**\n+         * Close stream in this instance.\n+         * UncheckedIOException may be thrown if IOE happens at InputStream::close.\n+         *\/\n+        private void closeStream() {\n+            try {\n+                is.close();\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n@@ -433,2 +434,7 @@\n-                haveNext = read() != -1;\n-                if (haveNext) {\n+                try {\n+                    haveNext = read() != -1;\n+                    if (haveNext) {\n+                        need2Read = false;\n+                    }\n+                } catch (IOException e) {\n+                    haveNext = false;\n@@ -436,0 +442,4 @@\n+                } finally {\n+                    if (!haveNext) {\n+                        closeStream();\n+                    }\n@@ -437,1 +447,0 @@\n-                return haveNext;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":30,"deletions":21,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, NTT DATA.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257736\n+ * @modules java.net.http\n+ *          java.logging\n+ *          jdk.httpserver\n+ * @library \/test\/lib\n+ * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/LogFilter.java\n+ * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/EchoHandler.java\n+ * @compile ..\/..\/..\/com\/sun\/net\/httpserver\/FileServerHandler.java\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ * @build LightWeightHttpServer\n+ * @build jdk.test.lib.Platform\n+ * @run testng\/othervm\/java.security.policy=RequestBodyTest.policy StreamCloseTest\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpClient.Redirect;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.net.URI;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\n+\n+public class StreamCloseTest {\n+\n+    private static class TestInputStream extends InputStream {\n+        private final boolean exceptionTest;\n+        private volatile boolean closeCalled;\n+\n+        public TestInputStream(boolean exceptionTest) {\n+            super();\n+            this.exceptionTest = exceptionTest;\n+            this.closeCalled = false;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            if (exceptionTest) {\n+                throw new IOException(\"test\");\n+            }\n+            return -1;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            closeCalled = true;\n+        }\n+    }\n+\n+    private static HttpClient client;\n+\n+    private static HttpRequest.Builder requestBuilder;\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        LightWeightHttpServer.initServer();\n+        client = HttpClient.newBuilder()\n+                           .version(Version.HTTP_1_1)\n+                           .followRedirects(Redirect.ALWAYS)\n+                           .build();\n+        URI uri = URI.create(LightWeightHttpServer.httproot + \"echo\/foo\");\n+        requestBuilder = HttpRequest.newBuilder(uri);\n+    }\n+\n+    @AfterTest\n+    public void teardown() throws Exception {\n+        LightWeightHttpServer.stop();\n+    }\n+\n+    @Test\n+    public void normallyCloseTest() throws Exception{\n+        TestInputStream in = new TestInputStream(false);\n+        HttpRequest request = requestBuilder.copy()\n+                                            .POST(BodyPublishers.ofInputStream(() -> in))\n+                                            .build();\n+        client.send(request, BodyHandlers.discarding());\n+        Assert.assertTrue(in.closeCalled, \"InputStream was not closed!\");\n+    }\n+\n+    @Test\n+    public void closeTestOnException() throws Exception{\n+        TestInputStream in = new TestInputStream(true);\n+        HttpRequest request = requestBuilder.copy()\n+                                            .POST(BodyPublishers.ofInputStream(() -> in))\n+                                            .build();\n+        client.send(request, BodyHandlers.discarding());\n+        Assert.assertTrue(in.closeCalled, \"InputStream was not closed!\");\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/StreamCloseTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}