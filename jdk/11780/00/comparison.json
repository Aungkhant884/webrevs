{"files":[{"patch":"@@ -590,1 +590,0 @@\n-javax\/net\/ssl\/SSLEngine\/TestAllSuites.java                      8298874 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm\/timeout=180 TestAllSuites\n@@ -28,1 +31,0 @@\n- * @run main\/timeout=180 TestAllSuites\n@@ -38,0 +40,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -44,0 +48,1 @@\n+import java.util.Arrays;\n@@ -47,5 +52,1 @@\n-    private static boolean debug = false;\n-\n-    private SSLContext sslc;\n-    private SSLEngine ssle1;    \/\/ client\n-    private SSLEngine ssle2;    \/\/ server\n+    private static final boolean DEBUG = Boolean.getBoolean(\"test.debug\");\n@@ -53,4 +54,3 @@\n-    private static String pathToStores = \"..\/etc\";\n-    private static String keyStoreFile = \"keystore\";\n-    private static String trustStoreFile = \"truststore\";\n-    private static String passwd = \"passphrase\";\n+    private final SSLContext SSL_CONTEXT;\n+    private SSLEngine clientEngine;\n+    private SSLEngine serverEngine;\n@@ -58,6 +58,3 @@\n-    private static String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-    private static String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    private static final String PATH_TO_STORES = \"..\/etc\";\n+    private static final String KEYSTORE_FILENAME = \"keystore\";\n+    private static final String TRUSTSTORE_FILENAME = \"truststore\";\n@@ -65,4 +62,6 @@\n-    private ByteBuffer appOut1;         \/\/ write side of ssle1\n-    private ByteBuffer appIn1;          \/\/ read side of ssle1\n-    private ByteBuffer appOut2;         \/\/ write side of ssle2\n-    private ByteBuffer appIn2;          \/\/ read side of ssle2\n+    private static final String KEYSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + KEYSTORE_FILENAME;\n+    private static final String TRUSTSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + TRUSTSTORE_FILENAME;\n@@ -70,2 +69,4 @@\n-    private ByteBuffer oneToTwo;        \/\/ \"reliable\" transport ssle1->ssle2\n-    private ByteBuffer twoToOne;        \/\/ \"reliable\" transport ssle2->ssle1\n+    private ByteBuffer clientOut;\n+    private ByteBuffer clientIn;\n+    private ByteBuffer serverOut;\n+    private ByteBuffer serverIn;\n@@ -73,6 +74,2 @@\n-    String [][] protocols = new String [][] {\n-        { \"SSLv3\" },\n-        { \"TLSv1\" },\n-        { \"SSLv3\", \"SSLv2Hello\"},\n-        { \"TLSv1\", \"SSLv2Hello\"}\n-    };\n+    private ByteBuffer clientToServer;\n+    private ByteBuffer serverToClient;\n@@ -80,3 +77,0 @@\n-    \/*\n-     * Majority of the test case is here, setup is done below.\n-     *\/\n@@ -85,2 +79,2 @@\n-        ssle1 = sslc.createSSLEngine(\"client\", 1);\n-        ssle1.setUseClientMode(true);\n+        clientEngine = SSL_CONTEXT.createSSLEngine(\"client\", 1);\n+        clientEngine.setUseClientMode(true);\n@@ -88,2 +82,2 @@\n-        ssle2 = sslc.createSSLEngine(\"server\", 2);\n-        ssle2.setUseClientMode(false);\n+        serverEngine = SSL_CONTEXT.createSSLEngine(\"server\", 2);\n+        serverEngine.setUseClientMode(false);\n@@ -95,6 +89,12 @@\n-        String [] suites = ssle1.getSupportedCipherSuites();\n-\n-        for (int i = 0; i < suites.length; i++) {\n-            for (int j = 0; j < protocols.length; j++) {\n-                createSSLEngines();\n-                runTest(suites[i], protocols[j]);\n+        List<String> supportedSuites = List.of(clientEngine.getSupportedCipherSuites());\n+\n+        for (SupportedCipherSuites tls : SupportedCipherSuites.values()) {\n+            for (String cipherSuite : tls.cipherSuites) {\n+                if (supportedSuites.contains(cipherSuite)) {\n+                    createSSLEngines();\n+                    runTest(cipherSuite, tls.protocol);\n+                } else {\n+                    System.out.printf(\"Skipping unsupported cipher suite %s with %s%n\",\n+                            tls.protocol,\n+                            cipherSuite);\n+                }\n@@ -105,1 +105,1 @@\n-    private void runTest(String suite, String [] protocols) throws Exception {\n+    private void runTest(String suite, String protocol) throws Exception {\n@@ -110,25 +110,1 @@\n-        System.out.println(\"Testing: \" + suite);\n-        for (int i = 0; i < protocols.length; i++) {\n-            System.out.print(protocols[i] + \" \");\n-        }\n-\n-        \/*\n-         * Don't run the Kerberized suites for now.\n-         *\/\n-        if (suite.startsWith(\"TLS_KRB5\")) {\n-            System.out.println(\"Ignoring Kerberized suite\");\n-            return;\n-        }\n-\n-        \/*\n-         * Don't run the SCSV suite\n-         *\/\n-        if (suite.equals(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\")) {\n-            System.out.println(\"Ignoring SCSV suite\");\n-            return;\n-        }\n-\n-\n-        if (!suite.contains(\"DH_anon\")) {\n-            ssle2.setNeedClientAuth(true);\n-        }\n+        System.out.printf(\"Testing: %s with %s%n\", protocol, suite);\n@@ -138,2 +114,2 @@\n-        ssle1.setEnabledCipherSuites(suites);\n-        ssle2.setEnabledCipherSuites(suites);\n+        clientEngine.setEnabledCipherSuites(suites);\n+        serverEngine.setEnabledCipherSuites(suites);\n@@ -141,2 +117,2 @@\n-        ssle1.setEnabledProtocols(protocols);\n-        ssle2.setEnabledProtocols(protocols);\n+        clientEngine.setEnabledProtocols(new String[]{protocol});\n+        serverEngine.setEnabledProtocols(new String[]{protocol});\n@@ -150,1 +126,2 @@\n-        while (!isEngineClosed(ssle1) || !isEngineClosed(ssle2)) {\n+        int counter = 0;\n+        while (!isEngineClosed(clientEngine) || !isEngineClosed(serverEngine)) {\n@@ -154,2 +131,2 @@\n-            result1 = ssle1.wrap(appOut1, oneToTwo);\n-            result2 = ssle2.wrap(appOut2, twoToOne);\n+            result1 = clientEngine.wrap(clientOut, clientToServer);\n+            result2 = serverEngine.wrap(serverOut, serverToClient);\n@@ -158,1 +135,1 @@\n-            log(\"oneToTwo  = \" + oneToTwo);\n+            log(\"clientToServer  = \" + clientToServer);\n@@ -162,1 +139,1 @@\n-            log(\"twoToOne  = \" + twoToOne);\n+            log(\"serverToClient  = \" + serverToClient);\n@@ -164,2 +141,2 @@\n-            runDelegatedTasks(result1, ssle1);\n-            runDelegatedTasks(result2, ssle2);\n+            runDelegatedTasks(result1, clientEngine);\n+            runDelegatedTasks(result2, serverEngine);\n@@ -167,2 +144,2 @@\n-            oneToTwo.flip();\n-            twoToOne.flip();\n+            clientToServer.flip();\n+            serverToClient.flip();\n@@ -172,2 +149,2 @@\n-            result1 = ssle1.unwrap(twoToOne, appIn1);\n-            result2 = ssle2.unwrap(oneToTwo, appIn2);\n+            result1 = clientEngine.unwrap(serverToClient, clientIn);\n+            result2 = serverEngine.unwrap(clientToServer, serverIn);\n@@ -176,1 +153,1 @@\n-            log(\"twoToOne  = \" + twoToOne);\n+            log(\"serverToClient  = \" + serverToClient);\n@@ -180,1 +157,1 @@\n-            log(\"oneToTwo  = \" + oneToTwo);\n+            log(\"clientToServer  = \" + clientToServer);\n@@ -182,2 +159,2 @@\n-            runDelegatedTasks(result1, ssle1);\n-            runDelegatedTasks(result2, ssle2);\n+            runDelegatedTasks(result1, clientEngine);\n+            runDelegatedTasks(result2, serverEngine);\n@@ -185,2 +162,2 @@\n-            oneToTwo.compact();\n-            twoToOne.compact();\n+            clientToServer.compact();\n+            serverToClient.compact();\n@@ -192,2 +169,2 @@\n-            if (!dataDone && (appOut1.limit() == appIn2.position()) &&\n-                    (appOut2.limit() == appIn1.position())) {\n+            if (!dataDone && (clientOut.limit() == serverIn.position()) &&\n+                    (serverOut.limit() == clientIn.position())) {\n@@ -195,2 +172,2 @@\n-                checkTransfer(appOut1, appIn2);\n-                checkTransfer(appOut2, appIn1);\n+                checkTransfer(clientOut, serverIn);\n+                checkTransfer(serverOut, clientIn);\n@@ -198,2 +175,2 @@\n-                log(\"Closing ssle1's *OUTBOUND*...\");\n-                ssle1.closeOutbound();\n+                clientEngine.closeOutbound();\n+                serverEngine.closeOutbound();\n@@ -208,2 +185,2 @@\n-        ssle1.closeInbound();\n-        ssle1.closeOutbound();\n+        clientEngine.closeInbound();\n+        clientEngine.closeOutbound();\n@@ -211,2 +188,2 @@\n-        ssle2.closeInbound();\n-        ssle2.closeOutbound();\n+        serverEngine.closeInbound();\n+        serverEngine.closeOutbound();\n@@ -214,3 +191,3 @@\n-        appOut1.rewind();\n-        appIn1.clear();\n-        oneToTwo.clear();\n+        clientOut.rewind();\n+        clientIn.clear();\n+        clientToServer.clear();\n@@ -218,1 +195,1 @@\n-        result1 = ssle1.wrap(appOut1, oneToTwo);\n+        result1 = clientEngine.wrap(clientOut, clientToServer);\n@@ -221,1 +198,1 @@\n-        result1 = ssle1.unwrap(oneToTwo, appIn1);\n+        result1 = clientEngine.unwrap(clientToServer, clientIn);\n@@ -245,1 +222,1 @@\n-\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n@@ -265,1 +242,1 @@\n-        sslc = getSSLContext(keyFilename, trustFilename);\n+        SSL_CONTEXT = getSSLContext(KEYSTORE_PATH, TRUSTSTORE_PATH);\n@@ -298,1 +275,1 @@\n-        SSLSession session = ssle1.getSession();\n+        SSLSession session = clientEngine.getSession();\n@@ -302,2 +279,2 @@\n-        appIn1 = ByteBuffer.allocateDirect(appBufferMax + 50);\n-        appIn2 = ByteBuffer.allocateDirect(appBufferMax + 50);\n+        clientIn = ByteBuffer.allocateDirect(appBufferMax + 50);\n+        serverIn = ByteBuffer.allocateDirect(appBufferMax + 50);\n@@ -305,2 +282,2 @@\n-        oneToTwo = ByteBuffer.allocateDirect(netBufferMax);\n-        twoToOne = ByteBuffer.allocateDirect(netBufferMax);\n+        clientToServer = ByteBuffer.allocateDirect(netBufferMax);\n+        serverToClient = ByteBuffer.allocateDirect(netBufferMax);\n@@ -308,2 +285,2 @@\n-        appOut1 = ByteBuffer.wrap(\"Hi Engine2, I'm SSLEngine1\".getBytes());\n-        appOut2 = ByteBuffer.wrap(\"Hello Engine1, I'm SSLEngine2\".getBytes());\n+        clientOut = ByteBuffer.wrap(\"Hi Engine2, I'm SSLEngine1\".getBytes());\n+        serverOut = ByteBuffer.wrap(\"Hello Engine1, I'm SSLEngine2\".getBytes());\n@@ -311,2 +288,2 @@\n-        log(\"AppOut1 = \" + appOut1);\n-        log(\"AppOut2 = \" + appOut2);\n+        log(\"ClientOut = \" + clientOut);\n+        log(\"ServerOut = \" + serverOut);\n@@ -350,1 +327,1 @@\n-        if (debug) {\n+        if (DEBUG) {\n@@ -354,0 +331,53 @@\n+\n+    enum SupportedCipherSuites {\n+        TLSv11(\"TLSv1.1\", new String []{\n+                \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n+        }),\n+\n+        TLSv12(\"TLSv1.2\", new String []{\n+                \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n+                \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n+                \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n+                \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n+                \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n+                \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n+                \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n+                \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n+                \"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\",\n+                \"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\",\n+                \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n+                \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n+                \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n+                \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n+                \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\n+                \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n+        }),\n+\n+        TLSv13(\"TLSv1.3\", new String[] {\n+                \"TLS_AES_128_GCM_SHA256\",\n+                \"TLS_AES_256_GCM_SHA384\",\n+                \"TLS_CHACHA20_POLY1305_SHA256\"\n+        });\n+\n+        final String protocol;\n+        final String[] cipherSuites;\n+\n+        SupportedCipherSuites(String protocol, String [] supportedCipherSuites) {\n+            this.protocol = protocol;\n+            this.cipherSuites = Arrays.copyOf(supportedCipherSuites,\n+                    supportedCipherSuites.length);\n+        }\n+    }\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/TestAllSuites.java","additions":146,"deletions":116,"binary":false,"changes":262,"status":"modified"}]}