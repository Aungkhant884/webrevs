{"files":[{"patch":"@@ -1585,1 +1585,5 @@\n-                ext.setExtension(\"Reason\", new CRLReasonCodeExtension(Integer.parseInt(id.substring(d+1))));\n+                int code = Integer.parseInt(id.substring(d+1));\n+                if (code == 0) {\n+                    throw new Exception(\"Reason code cannot be 0\");\n+                }\n+                ext.setExtension(\"Reason\", new CRLReasonCodeExtension(code));\n@@ -4634,0 +4638,3 @@\n+                if (exttype != -1 && value != null && value.isEmpty()) {\n+                    throw new Exception(rb.getString(\"Illegal.value.\") + extstr);\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,1 +77,2 @@\n-     * @param accessDescriptions the List of AccessDescription\n+     * @param accessDescriptions the List of AccessDescription,\n+     *                           cannot be null or empty.\n@@ -82,0 +83,3 @@\n+        if (accessDescriptions == null || accessDescriptions.isEmpty()) {\n+            throw new IllegalArgumentException(\"accessDescriptions is null or empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityInfoAccessExtension.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,2 +102,2 @@\n-     * The default constructor for this extension.  Null parameters make\n-     * the element optional (not present).\n+     * The default constructor for this extension. At least one parameter\n+     * must be non null. Null parameters make the element optional (not present).\n@@ -113,1 +113,5 @@\n-    throws IOException {\n+            throws IOException {\n+        if (kid == null && names == null && serialNum == null) {\n+            throw new IllegalArgumentException(\n+                    \"AuthorityKeyIdentifierExtension cannot be empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityKeyIdentifierExtension.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-     * @param distributionPoints the list of distribution points\n+     * @param distributionPoints the list of distribution points,\n+     *                           cannot be null or empty.\n@@ -123,1 +124,1 @@\n-        boolean isCritical, List<DistributionPoint> distributionPoints,\n+            boolean isCritical, List<DistributionPoint> distributionPoints,\n@@ -126,0 +127,5 @@\n+        if (distributionPoints == null || distributionPoints.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"distribution points cannot be null or empty\");\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLDistributionPointsExtension.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-     * @param crlNum the value to be set for the extension.\n+     * @param crlNum the value to be set for the extension, cannot be null\n@@ -94,0 +94,3 @@\n+        if (crlNum == null) {\n+            throw new IllegalArgumentException(\"CRL number cannot be null\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLNumberExtension.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-     * @param reason the enumerated value for the reason code.\n+     * @param reason the enumerated value for the reason code, cannot be null.\n@@ -75,1 +75,4 @@\n-    throws IOException {\n+            throws IOException {\n+        if (reason == 0) {\n+            throw new IllegalArgumentException(\"reason code cannot be 0\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLReasonCodeExtension.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-     * @param issuer the certificate issuer\n+     * @param issuer the certificate issuer, cannot be null or empty.\n@@ -87,0 +87,3 @@\n+        if (issuer == null || issuer.isEmpty()) {\n+            throw new IllegalArgumentException(\"issuer cannot be null or empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateIssuerExtension.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-     * @param certPolicies the List of PolicyInformation.\n+     * @param certPolicies the List of PolicyInformation, cannot be null or empty.\n@@ -113,0 +113,4 @@\n+        if (certPolicies == null || certPolicies.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"certificate policies cannot be null or empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificatePoliciesExtension.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -121,1 +121,2 @@\n-     * @param keyUsages the Vector of KeyUsages (ObjectIdentifiers)\n+     * @param keyUsages the Vector of KeyUsages (ObjectIdentifiers),\n+     *                  cannot be null or empty.\n@@ -124,1 +125,5 @@\n-    throws IOException {\n+            throws IOException {\n+        if (keyUsages == null || keyUsages.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"key usages cannot be null or empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/ExtendedKeyUsageExtension.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Objects;\n+\n@@ -175,4 +177,4 @@\n-        if (extensionId == null)\n-            throw new IOException(\"Null OID to encode for the extension!\");\n-        if (extensionValue == null)\n-            throw new IOException(\"No value to encode for the extension!\");\n+        Objects.requireNonNull(extensionId,\n+                \"Null OID to encode for the extension!\");\n+        Objects.requireNonNull(extensionValue,\n+                \"No value to encode for the extension!\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/Extension.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-            throw new IOException(\"Invalid value for skipCerts\");\n+            throw new IllegalArgumentException(\"Invalid value for skipCerts\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InhibitAnyPolicyExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-     * @param date the invalidity date\n+     * @param date the invalidity date, cannot be null.\n@@ -94,1 +94,4 @@\n-    throws IOException {\n+            throws IOException {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"date cannot be null\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InvalidityDateExtension.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,5 +72,2 @@\n-    throws IOException {\n-        this.names = names;\n-        this.extensionId = PKIXExtensions.IssuerAlternativeName_Id;\n-        this.critical = false;\n-        encodeThis();\n+            throws IOException {\n+        this(false, names);\n@@ -84,1 +81,1 @@\n-     * @param names the GeneralNames for the issuer.\n+     * @param names the GeneralNames for the issuer, cannot be null or empty.\n@@ -88,1 +85,4 @@\n-    throws IOException {\n+            throws IOException {\n+        if (names == null || names.isEmpty()) {\n+            throw new IllegalArgumentException(\"names should not be empty\");\n+        }\n@@ -96,9 +96,0 @@\n-     * Create a default IssuerAlternativeNameExtension.\n-     *\/\n-    public IssuerAlternativeNameExtension() {\n-        extensionId = PKIXExtensions.IssuerAlternativeName_Id;\n-        critical = false;\n-        names = new GeneralNames();\n-    }\n-\n-    \/**\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuerAlternativeNameExtension.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -113,1 +113,2 @@\n-     *        <code>hasOnlyAttributeCerts<\/code> is set to <code>true<\/code>.\n+     *        <code>hasOnlyAttributeCerts<\/code> is set to <code>true<\/code>,\n+     *        or all arguments are either <code>null<\/code> or <code>false<\/code>.\n@@ -122,0 +123,8 @@\n+        if (distributionPoint == null &&\n+                revocationReasons == null &&\n+                !hasOnlyUserCerts &&\n+                !hasOnlyCACerts &&\n+                !hasOnlyAttributeCerts &&\n+                !isIndirectCRL) {\n+            throw new IllegalArgumentException(\"elements cannot be empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuingDistributionPointExtension.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -130,2 +130,2 @@\n-     * The default constructor for this class. Both parameters\n-     * are optional and can be set to null.  The extension criticality\n+     * The default constructor for this class. Both parameters are optional\n+     * but at least one should be non null.  The extension criticality\n@@ -139,1 +139,5 @@\n-    throws IOException {\n+            throws IOException {\n+        if (permitted == null && excluded == null) {\n+            throw new IllegalArgumentException(\n+                    \"permitted and exclude cannot both be null\");\n+        }\n@@ -283,0 +287,2 @@\n+        boolean updated = false;\n+\n@@ -291,2 +297,4 @@\n-            excluded = (newExcluded != null) ?\n-                        (GeneralSubtrees)newExcluded.clone() : null;\n+            if (newExcluded != null) {\n+                excluded = (GeneralSubtrees) newExcluded.clone();\n+                updated = true;\n+            }\n@@ -297,0 +305,1 @@\n+                updated = true;\n@@ -308,2 +317,4 @@\n-            permitted = (newPermitted != null) ?\n-                        (GeneralSubtrees)newPermitted.clone() : null;\n+            if (newPermitted != null) {\n+                permitted = (GeneralSubtrees) newPermitted.clone();\n+                updated = true;\n+            }\n@@ -322,0 +333,1 @@\n+                    updated = true;\n@@ -332,0 +344,1 @@\n+            updated = true;\n@@ -336,2 +349,3 @@\n-        encodeThis();\n-\n+        if (updated) {\n+            encodeThis();\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NameConstraintsExtension.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-     * policy mapping.\n+     * policy mapping. At least one should be provided (not -1).\n@@ -112,1 +112,5 @@\n-    throws IOException {\n+            throws IOException {\n+        if (require == -1 && inhibit == -1) {\n+            throw new IllegalArgumentException(\n+                    \"require and inhibit cannot both be -1\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyConstraintsExtension.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-     * @param maps the List of CertificatePolicyMap.\n+     * @param maps the List of CertificatePolicyMap, cannot be null or empty.\n@@ -82,0 +82,3 @@\n+        if (maps == null || maps.isEmpty()) {\n+            throw new IllegalArgumentException(\"maps cannot be null or empty\");\n+        }\n@@ -88,9 +91,0 @@\n-    \/**\n-     * Create a default PolicyMappingsExtension.\n-     *\/\n-    public PolicyMappingsExtension() {\n-        extensionId = PKIXExtensions.PolicyMappings_Id;\n-        critical = true;\n-        maps = Collections.emptyList();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyMappingsExtension.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -96,1 +96,2 @@\n-     * The default constructor for PrivateKeyUsageExtension.\n+     * The default constructor for PrivateKeyUsageExtension. At least one\n+     * of the arguments must be non null.\n@@ -99,1 +100,1 @@\n-     *         should not be used.\n+     *         should not be used\n@@ -104,1 +105,5 @@\n-    throws IOException {\n+            throws IOException {\n+        if (notBefore == null && notAfter == null) {\n+            throw new IllegalArgumentException(\n+                    \"notBefore and notAfter cannot both be null\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PrivateKeyUsageExtension.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-     * @param names the GeneralNames for the subject.\n+     * @param names the GeneralNames for the subject, cannot be null or empty.\n@@ -91,1 +91,4 @@\n-    throws IOException {\n+            throws IOException {\n+        if (names == null || names.isEmpty()) {\n+            throw new IllegalArgumentException(\"names cannot be null or empty\");\n+        }\n@@ -98,10 +101,0 @@\n-    \/**\n-     * Create a default SubjectAlternativeNameExtension. The extension\n-     * is marked non-critical.\n-     *\/\n-    public SubjectAlternativeNameExtension() {\n-        extensionId = PKIXExtensions.SubjectAlternativeName_Id;\n-        critical = false;\n-        names = new GeneralNames();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectAlternativeNameExtension.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -81,1 +81,2 @@\n-     * @param accessDescriptions the List of AccessDescription\n+     * @param accessDescriptions the List of AccessDescription,\n+     *                           cannot be null or empty.\n@@ -86,0 +87,4 @@\n+        if (accessDescriptions == null || accessDescriptions.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"AccessDescription cannot be null or empty\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectInfoAccessExtension.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    throws IOException {\n+            throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectKeyIdentifierExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8059916\n+ * @bug 8059916 8296742\n@@ -30,0 +30,1 @@\n+ *          java.base\/sun.security.util\n@@ -32,0 +33,3 @@\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.CertificatePolicyId;\n+import sun.security.x509.CertificatePolicyMap;\n@@ -35,0 +39,2 @@\n+import java.util.List;\n+\n@@ -37,1 +43,1 @@\n-        PolicyConstraintsExtension pce = new PolicyConstraintsExtension(-1,-1);\n+        PolicyConstraintsExtension pce = new PolicyConstraintsExtension(1, 1);\n@@ -43,1 +49,3 @@\n-        PolicyMappingsExtension pme = new PolicyMappingsExtension();\n+        CertificatePolicyId id = new CertificatePolicyId(ObjectIdentifier.of(\"1.2.3.4\"));\n+        PolicyMappingsExtension pme = new PolicyMappingsExtension(List.of(\n+                new CertificatePolicyMap(id, id)));\n","filename":"test\/jdk\/sun\/security\/x509\/Extensions\/DefaultCriticality.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8049237 8242151\n+ * @bug 8049237 8242151 8296742\n@@ -158,8 +158,0 @@\n-        SubjectAlternativeNameExtension subjectName\n-                = new SubjectAlternativeNameExtension();\n-        IssuerAlternativeNameExtension issuerName\n-                = new IssuerAlternativeNameExtension();\n-\n-        GeneralNames subjectNames = subjectName.getNames();\n-\n-        GeneralNames issuerNames = issuerName.getNames();\n@@ -167,0 +159,1 @@\n+        GeneralNames subjectNames = new GeneralNames();\n@@ -170,0 +163,2 @@\n+        SubjectAlternativeNameExtension subjectName\n+                = new SubjectAlternativeNameExtension(subjectNames);\n@@ -171,0 +166,1 @@\n+        GeneralNames issuerNames = new GeneralNames();\n@@ -173,0 +169,2 @@\n+        IssuerAlternativeNameExtension issuerName\n+                = new IssuerAlternativeNameExtension(issuerNames);\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/V3Certificate.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}