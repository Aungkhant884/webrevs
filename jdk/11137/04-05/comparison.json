{"files":[{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296742\n+ * @summary Illegal X509 Extension should not be created\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Vector;\n+\n+public class IllegalExtensions {\n+\n+    public static void main(String [] args) throws Exception {\n+\n+        var oid = ObjectIdentifier.of(\"1.2.3.4\");\n+        var emptyNames = new GeneralNames();\n+        var name = new GeneralName(new X500Name(\"CN=one\"));\n+        var names = new GeneralNames();\n+        names.add(name);\n+\n+        var ad = new AccessDescription(AccessDescription.Ad_CAISSUERS_Id, name);\n+        new AuthorityInfoAccessExtension(List.of(ad));\n+        Utils.runAndCheckException(() -> new AuthorityInfoAccessExtension(List.of()), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new AuthorityInfoAccessExtension(null), IllegalArgumentException.class);\n+\n+        var kid = new KeyIdentifier(new byte[32]);\n+        var sn = new SerialNumber(0);\n+        new AuthorityKeyIdentifierExtension(kid, null, null);\n+        new AuthorityKeyIdentifierExtension(null, names, null);\n+        new AuthorityKeyIdentifierExtension(null, null, sn);\n+        Utils.runAndCheckException(() -> new AuthorityKeyIdentifierExtension(null, null, null), IllegalArgumentException.class);\n+\n+        new CertificateIssuerExtension(names);\n+        Utils.runAndCheckException(() -> new CertificateIssuerExtension(null), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new CertificateIssuerExtension(emptyNames), IllegalArgumentException.class);\n+\n+        var pi = new PolicyInformation(new CertificatePolicyId(oid), Collections.emptySet());\n+        new CertificatePoliciesExtension(List.of(pi));\n+        Utils.runAndCheckException(() -> new CertificatePoliciesExtension(null), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new CertificatePoliciesExtension(List.of()), IllegalArgumentException.class);\n+\n+        var dp = new DistributionPoint(names, null, null);\n+        new CRLDistributionPointsExtension(List.of(dp));\n+        Utils.runAndCheckException(() -> new CRLDistributionPointsExtension(List.of()), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new CRLDistributionPointsExtension(null), IllegalArgumentException.class);\n+\n+        new CRLNumberExtension(0);\n+        new CRLNumberExtension(BigInteger.ONE);\n+        Utils.runAndCheckException(() -> new CRLNumberExtension(null), IllegalArgumentException.class);\n+\n+        new CRLReasonCodeExtension(1);\n+        Utils.runAndCheckException(() -> new CRLReasonCodeExtension(0), IllegalArgumentException.class);\n+\n+        new ExtendedKeyUsageExtension(new Vector<>(List.of(oid)));\n+        Utils.runAndCheckException(() -> new ExtendedKeyUsageExtension(null), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new ExtendedKeyUsageExtension(new Vector<>()), IllegalArgumentException.class);\n+\n+        new InhibitAnyPolicyExtension(0);\n+        new InhibitAnyPolicyExtension(-1);\n+        Utils.runAndCheckException(() -> new InhibitAnyPolicyExtension(-2), IllegalArgumentException.class);\n+\n+        new InvalidityDateExtension(new Date());\n+        Utils.runAndCheckException(() -> new InvalidityDateExtension(null), IllegalArgumentException.class);\n+\n+        new IssuerAlternativeNameExtension(names);\n+        Utils.runAndCheckException(() -> new IssuerAlternativeNameExtension(null), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new IssuerAlternativeNameExtension(emptyNames), IllegalArgumentException.class);\n+\n+        var dpn = new DistributionPointName(names);\n+        var rf = new ReasonFlags(new boolean[1]);\n+        new IssuingDistributionPointExtension(dpn, null, false, false, false, false);\n+        new IssuingDistributionPointExtension(null, rf, false, false, false, false);\n+        new IssuingDistributionPointExtension(null, null, true, false, false, false);\n+        new IssuingDistributionPointExtension(null, null, false, true, false, false);\n+        new IssuingDistributionPointExtension(null, null, false, false, true, false);\n+        new IssuingDistributionPointExtension(null, null, false, false, false, true);\n+        Utils.runAndCheckException(() -> new IssuingDistributionPointExtension(null, null, false, false, false, false), IllegalArgumentException.class);\n+\n+        var gss = new GeneralSubtrees();\n+        new NameConstraintsExtension(gss, null);\n+        new NameConstraintsExtension((GeneralSubtrees) null, gss);\n+        Utils.runAndCheckException(() -> new NameConstraintsExtension((GeneralSubtrees) null, null), IllegalArgumentException.class);\n+\n+        new PolicyConstraintsExtension(0, 0);\n+        new PolicyConstraintsExtension(-1, 0);\n+        new PolicyConstraintsExtension(0, -1);\n+        Utils.runAndCheckException(() -> new PolicyConstraintsExtension(-1, -1), IllegalArgumentException.class);\n+\n+        var cpi = new CertificatePolicyId(oid);\n+        var cpm = new CertificatePolicyMap(cpi, cpi);\n+        new PolicyMappingsExtension(List.of(cpm));\n+        Utils.runAndCheckException(() -> new PolicyMappingsExtension(List.of()), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new PolicyMappingsExtension(null), IllegalArgumentException.class);\n+\n+        new PrivateKeyUsageExtension(new Date(), new Date());\n+        new PrivateKeyUsageExtension(new Date(), null);\n+        new PrivateKeyUsageExtension((Date) null, new Date());\n+        Utils.runAndCheckException(() -> new PrivateKeyUsageExtension((Date) null, null), IllegalArgumentException.class);\n+\n+        new SubjectAlternativeNameExtension(names);\n+        Utils.runAndCheckException(() -> new SubjectAlternativeNameExtension(null), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new SubjectAlternativeNameExtension(emptyNames), IllegalArgumentException.class);\n+\n+        new SubjectInfoAccessExtension(List.of(ad));\n+        Utils.runAndCheckException(() -> new SubjectInfoAccessExtension(List.of()), IllegalArgumentException.class);\n+        Utils.runAndCheckException(() -> new SubjectInfoAccessExtension(null), IllegalArgumentException.class);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/Extensions\/IllegalExtensions.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}