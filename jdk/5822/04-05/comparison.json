{"files":[{"patch":"@@ -61,0 +61,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -151,7 +152,14 @@\n- *\n- * Host name-to-IP address <i>resolution<\/i> is accomplished through\n- * the use of a combination of local machine configuration information\n- * and network naming services such as the Domain Name System (DNS)\n- * and Network Information Service(NIS). The particular naming\n- * services(s) being used is by default the local machine configured\n- * one. For any host name, its corresponding IP address is returned.\n+ * Host name-to-IP address <i>resolution<\/i> is accomplished through the use\n+ * of an {@linkplain InetAddressResolver InetAddress resolver}. Lookup operations\n+ * performed by this class use the\n+ * <a href=\"spi\/InetAddressResolverProvider.html#system-wide-resolver\">\n+ * system-wide resolver<\/a>. The <i>system-wide resolver<\/i> can be customized\n+ * by <a href=\"spi\/InetAddressResolverProvider.html#system-wide-resolver\">\n+ * deploying<\/a> an {@link InetAddressResolverProvider}.\n+ * <p id=\"built-in-resolver\">The built-in resolver implementation is used by\n+ * default and accomplishes host name-to-IP address <i>resolution<\/i> through the\n+ * use of a combination of local machine configuration information and network\n+ * naming services such as the Domain Name System (DNS) and Network Information\n+ * Service(NIS). The particular naming services(s) being used is by default the\n+ * local machine configured one. For any host name, its corresponding IP address\n+ * is returned.\n@@ -207,39 +215,0 @@\n- * <h3 id=\"resolverProviders\"> InetAddress Resolver Providers <\/h3>\n- *\n- * <p> Host name resolution and reverse name resolution operations are delegated to a\n- * {@linkplain InetAddressResolver resolver}. Lookup operations performed by\n- * this class use the <i>system-wide resolver<\/i>. The system-wide resolver\n- * is set once, lazily, after the VM is fully initialized and when\n- * an invocation of a method in this class triggers the first lookup operation.\n- *\n- * <p> A <i>custom resolver<\/i> can be installed as the system-wide resolver\n- * by deploying a {@linkplain InetAddressResolverProvider resolver provider}.\n- * A resolver provider is essentially a factory for resolvers, and is used\n- * to instantiate a custom resolver. If no resolver provider\n- * is found, then the <i>built-in resolver<\/i> will be set as the\n- * system-wide resolver.\n- *\n- * <p> A custom resolver is found and installed as the system-wide resolver\n- * as follows:\n- * <ol>\n- *  <li>The {@link ServiceLoader} mechanism is used to locate an\n- *      {@link InetAddressResolverProvider InetAddressResolverProvider} using the\n- *      system class loader. The order in which providers are located is\n- *      {@linkplain ServiceLoader#load(java.lang.Class, java.lang.ClassLoader) implementation specific}.\n- *      The first provider found will be used to instantiate the {@link InetAddressResolver InetAddressResolver}\n- *      by invoking the {@link InetAddressResolverProvider#get(InetAddressResolverProvider.Configuration)}\n- *      method. The returned {@code InetAddressResolver} will be installed as the system-wide\n- *      resolver.\n- *  <li>If the previous step fails to find any resolver provider the\n- *      built-in resolver will be set as the system-wide resolver.\n- * <\/ol>\n- *\n- * <p> If instantiating a custom resolver from a provider discovered in\n- * step 1 throws an error or exception, the system-wide resolver will not be\n- * installed and the error or exception will be propagated to the calling thread.\n- * Otherwise, any lookup operation will be performed through the installed\n- * <i>system-wide resolver<\/i>.\n- * @implNote\n- * For any lookup operation that might occur before the VM is fully booted the <i>built-in\n- * resolver<\/i> will be used.\n- *\n@@ -340,0 +309,1 @@\n+    @Stable\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":16,"deletions":46,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -36,4 +36,3 @@\n- * <a href=\"{@docRoot}\/java.base\/java\/net\/InetAddress.html#resolverProviders\">installed<\/a>\n- * as a <i>system-wide resolver<\/i>.\n- * {@link InetAddress} delegates all lookup requests to the installed <i>system-wide resolver<\/i>\n- * instance.\n+ * <a href=\"InetAddressResolverProvider.html#system-wide-resolver\">installed<\/a> as a\n+ * <i>system-wide resolver<\/i>. {@link InetAddress} delegates all lookup requests to\n+ * the installed <i>system-wide resolver<\/i> instance.\n@@ -42,2 +41,2 @@\n- * <a href=\"{@docRoot}\/java.base\/java\/net\/InetAddress.html#resolverProviders\">deploying an implementation<\/a>\n- * of {@link InetAddressResolverProvider}.\n+ * <a href=\"InetAddressResolverProvider.html#system-wide-resolver\">\n+ * deploying an implementation<\/a> of {@link InetAddressResolverProvider}.\n@@ -102,1 +101,1 @@\n-         * Specifies if IPv4 addresses need to be queried during lookup.\n+         * Characteristic value signifying if IPv4 addresses need to be queried during lookup.\n@@ -108,1 +107,1 @@\n-         * Specifies if IPv6 addresses need to be queried during lookup.\n+         * Characteristic value signifying if IPv6 addresses need to be queried during lookup.\n@@ -114,1 +113,2 @@\n-         * Specifies if IPv4 addresses should be returned first by {@code InetAddressResolver}.\n+         * Characteristic value signifying if IPv4 addresses should be returned\n+         * first by {@code InetAddressResolver}.\n@@ -120,1 +120,2 @@\n-         * Specifies if IPv6 addresses should be returned first by {@code InetAddressResolver}.\n+         * Characteristic value signifying if IPv6 addresses should be returned\n+         * first by {@code InetAddressResolver}.\n@@ -186,1 +187,1 @@\n-         * Returns an integer value which specifies lookup operation characteristics.\n+         * Returns a set of characteristics of this lookup policy.\n","filename":"src\/java.base\/share\/classes\/java\/net\/spi\/InetAddressResolver.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -34,11 +34,49 @@\n- * A resolver provider class is a factory for custom implementations of {@linkplain\n- * InetAddressResolver resolvers} which define operations for looking-up (resolving) host names\n- * and IP addresses.\n- * Resolver providers are <a href=\"{@docRoot}\/java.base\/java\/net\/InetAddress.html#resolverProviders\">\n- * discovered<\/a> by {@link InetAddress} to instantiate and install a <i>system-wide resolver<\/i>.\n- * <p>\n- * A resolver provider is a concrete subclass of this class that has a zero-argument\n- * constructor and implements the abstract methods specified below.\n- * <p>\n- * Resolver providers are located using the {@link ServiceLoader} facility, as specified by\n- * {@link InetAddress}.\n+ * Service-provider class for {@linkplain InetAddressResolver InetAddress resolvers}.\n+ *\n+ * <p>A resolver provider is a factory for custom implementations of {@linkplain\n+ * InetAddressResolver resolvers}. A resolver define operations for looking up\n+ * (resolving) host names and IP addresses.\n+ * <p>A resolver provider is a concrete subclass of this class that has a\n+ * zero-argument constructor and implements the abstract methods specified below.\n+ *\n+ * <h2 id=\"system-wide-resolver\"> Installing the system-wide resolver <\/h2>\n+ * <p> Resolver providers are discovered by {@link InetAddress} to instantiate and\n+ * install a <i>system-wide resolver<\/i>. Resolver providers are located by\n+ * {@link InetAddress} using the {@link ServiceLoader} facility.\n+ *\n+ * <p>Host name resolution and reverse name resolution operations performed by\n+ * {@link InetAddress} use the <i>system-wide<\/i> {@linkplain InetAddressResolver\n+ * resolver}. The system-wide resolver is set once, lazily, after the VM is fully\n+ * initialized and when an invocation of a method in {@link InetAddress} class\n+ * triggers the first lookup operation.\n+ *\n+ * <p> A <i>custom resolver<\/i> can be installed as the system-wide resolver\n+ * by deploying an {@code InetAddressResolverProvider}. If no resolver provider\n+ * is found, then the <a href=\"..\/InetAddress.html#built-in-resolver\">built-in\n+ * resolver<\/a> will be set as the system-wide resolver.\n+ *\n+ * <p> A custom resolver is found and installed as the system-wide resolver\n+ * as follows:\n+ * <ol>\n+ *  <li>The {@link ServiceLoader} mechanism is used to locate an\n+ *      {@code InetAddressResolverProvider} using the\n+ *      system class loader. The order in which providers are located is\n+ *      {@linkplain ServiceLoader#load(java.lang.Class, java.lang.ClassLoader)\n+ *      implementation specific}.\n+ *      The first provider found will be used to instantiate the\n+ *      {@link InetAddressResolver InetAddressResolver} by invoking the\n+ *      {@link InetAddressResolverProvider#get(InetAddressResolverProvider.Configuration)}\n+ *      method. The returned {@code InetAddressResolver} will be installed as the\n+ *      system-wide resolver.\n+ *  <li>If the previous step fails to find any resolver provider the\n+ *      built-in resolver will be set as the system-wide resolver.\n+ * <\/ol>\n+ *\n+ * <p> If instantiating a custom resolver from a provider discovered in\n+ * step 1 throws an error or exception, the system-wide resolver will not be\n+ * installed and the error or exception will be propagated to the calling thread.\n+ * Otherwise, any lookup operation will be performed through the installed\n+ * <i>system-wide resolver<\/i>.\n+ *\n+ * @implNote {@link InetAddress} will use the <i>built-in resolver<\/i> for any lookup operation\n+ * that might occur before the VM is fully booted.\n@@ -51,1 +89,1 @@\n-     * Initialise and return the {@link InetAddressResolver} provided by\n+     * Initialise and return an {@link InetAddressResolver} provided by\n@@ -53,1 +91,1 @@\n-     * <a href=\"{@docRoot}\/java.base\/java\/net\/InetAddress.html#resolverProviders\">installing<\/a>\n+     * <a href=\"#system-wide-resolver\">installing<\/a>\n@@ -88,3 +126,3 @@\n-     * implementation does not perform any heavy initialization in its\n-     * constructor, in order to avoid possible risks of deadlock or class\n-     * loading cycles during the instantiation of the service provider.\n+     * implementation initialization should be as simple as possible, in order to avoid\n+     * possible risks of deadlock or class loading cycles during the instantiation of the\n+     * service provider.\n@@ -109,1 +147,1 @@\n-     * A {@code Configuration} interface is supplied to the\n+     * A {@code Configuration} object is supplied to the\n","filename":"src\/java.base\/share\/classes\/java\/net\/spi\/InetAddressResolverProvider.java","additions":55,"deletions":17,"binary":false,"changes":72,"status":"modified"}]}