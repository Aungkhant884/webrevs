{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,4 +338,8 @@\n-    \/\/ Do not auto-enable UseSHA3Intrinsics until it has been fully tested on hardware\n-    \/\/ if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {\n-      \/\/ FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);\n-    \/\/ }\n+    \/\/ Auto-enable UseSHA3Intrinsics on hardware with performance benefit.\n+    \/\/ Note that the evaluation of UseSHA3Intrinsics shows better performance\n+    \/\/ on Apple silicon but worse performance on Neoverse V1 and N2.\n+    if (_cpu == CPU_APPLE) {  \/\/ Apple silicon\n+      if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {\n+        FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);\n+      }\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,5 +56,15 @@\n-  \/\/ hw.optional.floatingpoint always returns 1, see\n-  \/\/ https:\/\/github.com\/apple\/darwin-xnu\/blob\/master\/bsd\/kern\/kern_mib.c#L416.\n-  \/\/ ID_AA64PFR0_EL1 describes AdvSIMD always equals to FP field.\n-  assert(cpu_has(\"hw.optional.floatingpoint\"), \"should be\");\n-  assert(cpu_has(\"hw.optional.neon\"), \"should be\");\n+  \/\/ cpu_has() uses sysctlbyname function to check the existence of CPU\n+  \/\/ features. References: Apple developer document [1] and XNU kernel [2].\n+  \/\/ [1] https:\/\/developer.apple.com\/documentation\/kernel\/1387446-sysctlbyname\/determining_instruction_set_characteristics\n+  \/\/ [2] https:\/\/github.com\/apple-oss-distributions\/xnu\/blob\/main\/bsd\/kern\/kern_mib.c\n+  \/\/\n+  \/\/ Note that for some features (e.g., LSE, SHA512 and SHA3) there are two\n+  \/\/ parameters for sysctlbyname, which are invented at different times.\n+  \/\/ Considering backward compatibility, we check both here.\n+  \/\/\n+  \/\/ Floating-point and Advance SIMD features are standard in Apple processors\n+  \/\/ beginning with M1 and A7, and don't need to be checked [1].\n+  \/\/ 1) hw.optional.floatingpoint always returns 1 [2].\n+  \/\/ 2) ID_AA64PFR0_EL1 describes AdvSIMD always equals to FP field.\n+  \/\/    See the Arm ARM, section \"ID_AA64PFR0_EL1, AArch64 Processor Feature\n+  \/\/    Register 0\".\n@@ -63,2 +73,7 @@\n-  \/\/ All Apple-darwin Arm processors have AES and PMULL.\n-  _features |= CPU_AES | CPU_PMULL;\n+  \/\/ All Apple-darwin Arm processors have AES, PMULL, SHA1 and SHA2.\n+  \/\/ See https:\/\/github.com\/apple-oss-distributions\/xnu\/blob\/main\/osfmk\/arm\/commpage\/commpage.c#L412\n+  assert(cpu_has(\"hw.optional.arm.FEAT_AES\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_PMULL\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_SHA1\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_SHA256\"), \"should be\");\n+  _features |= CPU_AES | CPU_PMULL | CPU_SHA1 | CPU_SHA2;\n@@ -66,4 +81,15 @@\n-  \/\/ Only few features are available via sysctl, see line 614\n-  \/\/ https:\/\/opensource.apple.com\/source\/xnu\/xnu-6153.141.1\/bsd\/kern\/kern_mib.c.auto.html\n-  if (cpu_has(\"hw.optional.armv8_crc32\"))     _features |= CPU_CRC32;\n-  if (cpu_has(\"hw.optional.armv8_1_atomics\")) _features |= CPU_LSE;\n+  if (cpu_has(\"hw.optional.armv8_crc32\")) {\n+    _features |= CPU_CRC32;\n+  }\n+  if (cpu_has(\"hw.optional.arm.FEAT_LSE\") ||\n+      cpu_has(\"hw.optional.armv8_1_atomics\")) {\n+    _features |= CPU_LSE;\n+  }\n+  if (cpu_has(\"hw.optional.arm.FEAT_SHA512\") ||\n+      cpu_has(\"hw.optional.armv8_2_sha512\")) {\n+    _features |= CPU_SHA512;\n+  }\n+  if (cpu_has(\"hw.optional.arm.FEAT_SHA3\") ||\n+      cpu_has(\"hw.optional.armv8_2_sha3\")) {\n+    _features |= CPU_SHA3;\n+  }\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vm_version_bsd_aarch64.cpp","additions":38,"deletions":12,"binary":false,"changes":50,"status":"modified"}]}