{"files":[{"patch":"@@ -339,0 +339,2 @@\n+    \/\/ Note that the evaluation of UseSHA3Intrinsics shows better performance\n+    \/\/ on Apple silicon but worse performance on Neoverse V1 and N2.\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,4 +56,15 @@\n-  \/\/ hw.optional.floatingpoint always returns 1.\n-  \/\/ See https:\/\/github.com\/apple\/darwin-xnu\/blob\/main\/bsd\/kern\/kern_mib.c#L744\n-  \/\/ ID_AA64PFR0_EL1 describes AdvSIMD always equals to FP field.\n-  \/\/ See https:\/\/developer.arm.com\/documentation\/ddi0595\/2021-12\/AArch64-Registers\/ID-AA64PFR0-EL1--AArch64-Processor-Feature-Register-0\n+  \/\/ cpu_has() uses sysctlbyname function to check the existence of CPU\n+  \/\/ features. References: Apple developer document [1] and XNU kernel [2].\n+  \/\/ [1] https:\/\/developer.apple.com\/documentation\/kernel\/1387446-sysctlbyname\/determining_instruction_set_characteristics\n+  \/\/ [2] https:\/\/github.com\/apple-oss-distributions\/xnu\/blob\/main\/bsd\/kern\/kern_mib.c\n+  \/\/\n+  \/\/ Note that for some features (e.g., ASIMD, LSE, SHA512 and SHA3) there are\n+  \/\/ two parameters for sysctlbyname, which are invented at different times.\n+  \/\/ Considering backward compatibility, we check both here.\n+  \/\/\n+  \/\/ Floating-point and Advance SIMD features are standard in Apple processors\n+  \/\/ beginning with M1 and A7 [1].\n+  \/\/ 1) hw.optional.floatingpoint always returns 1 [2].\n+  \/\/ 2) ID_AA64PFR0_EL1 describes AdvSIMD always equals to FP field.\n+  \/\/    See the Arm ARM, section \"ID_AA64PFR0_EL1, AArch64 Processor Feature\n+  \/\/    Register 0\".\n@@ -61,1 +72,2 @@\n-  assert(cpu_has(\"hw.optional.neon\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.AdvSIMD\") ||\n+         cpu_has(\"hw.optional.neon\"), \"should be\");\n@@ -65,0 +77,5 @@\n+  \/\/ See https:\/\/github.com\/apple-oss-distributions\/xnu\/blob\/main\/osfmk\/arm\/commpage\/commpage.c#L412\n+  assert(cpu_has(\"hw.optional.arm.FEAT_AES\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_PMULL\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_SHA1\"), \"should be\");\n+  assert(cpu_has(\"hw.optional.arm.FEAT_SHA256\"), \"should be\");\n@@ -67,5 +84,0 @@\n-  \/\/ Only few features are available via sysctl.\n-  \/\/ See https:\/\/github.com\/apple\/darwin-xnu\/blob\/main\/bsd\/kern\/kern_mib.c#L855\n-  \/\/ Regarding SHA512 and SHA3, there are two sysctl flags for them, which\n-  \/\/ might be invented at different times. We check both here.\n-  \/\/ See https:\/\/git.tartarus.org\/?p=simon\/putty.git;a=blob_plain;f=unix\/utils\/arm_arch_queries.c;hb=HEAD\n@@ -75,1 +87,2 @@\n-  if (cpu_has(\"hw.optional.armv8_1_atomics\")) {\n+  if (cpu_has(\"hw.optional.arm.FEAT_LSE\") ||\n+      cpu_has(\"hw.optional.armv8_1_atomics\")) {\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vm_version_bsd_aarch64.cpp","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"}]}