[{"commit":{"message":"Enable UseSHA3Intrinsics by default on Apple silicon\n\nHere shows the test on M1.\n\n```\n$ .\/build-fastdebug\/images\/jdk\/bin\/java -XX:+PrintFlagsFinal --version | grep SHA\n  bool UseSHA                   = true       {product} {default}\n  bool UseSHA1Intrinsics        = true    {diagnostic} {default}\n  bool UseSHA256Intrinsics      = true    {diagnostic} {default}\n  bool UseSHA3Intrinsics        = true    {diagnostic} {default}\n  bool UseSHA512Intrinsics      = true    {diagnostic} {default}\n```"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"4970f1a4d671c155ef27e752c3f46e6c62e806ae"},{"commit":{"message":"8297092: [macos_aarch64] Add support for SHA feature detection\n\nThe detection of SHA features including SHA1, SHA2, SHA512 and SHA3, is\nmissing in macOS on Apple silicon. In this patch, we add the support.\n\n* SHA1 and SHA2 are set uncoditionally to true on darwin. See [1].\n\n* SHA512 and SHA3 will be set depending on the existing `hw.optional`\n  flags\n\n* Some old links are updated in this patch as well.\n\nWith the detection, the corresponding SHA related intrinsics flags are\nenabled. See the test result on my local environment, i.e. M1.\n\n```\n$ .\/jdk\/bin\/java -XX:+PrintFlagsFinal --version | grep SHA\n     bool UseSHA                = true       {product} {default}\n     bool UseSHA1Intrinsics     = true    {diagnostic} {default}\n     bool UseSHA256Intrinsics   = true    {diagnostic} {default}\n     bool UseSHA3Intrinsics     = false   {diagnostic} {default}\n     bool UseSHA512Intrinsics   = true    {diagnostic} {default}\n\n$ .\/jdk\/bin\/java -XX:+PrintFlagsFinal -XX:+UseSHA3Intrinsics  --version | grep SHA3\n     bool UseSHA3Intrinsics     = true    {diagnostic} {command line}\n```\n\nNote that UseSHA3Intrinsics are NOT enabled by default on supported\nhardware because there is performance regression one some hardware. See\nJDK-8292894. Hence we have to enable it explicitly.\n\nJtreg testing:\n\nWe ran tier1~3 on M1 and found the following two new failures. They can\nbe fixed once JDK-8292894 are resolved.\n\n```\ncompiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java\n```\n\nPerformance testing:\n\nJMH test case MessageDigests.java is used to evaluate the performance\nuplifts of UseSHA*Intrinsics. Here shows the data on M1.\n\n```\nBenchmark                    (digesterName)  (length)   Mode  Cnt    Before      After   Units\nMessageDigests.digest                 SHA-1        64  thrpt   15  2670.195  14767.116  ops\/ms\nMessageDigests.digest                 SHA-1     16384  thrpt   15    21.756    147.816  ops\/ms\nMessageDigests.digest               SHA-224        64  thrpt   15  1729.686  17366.833  ops\/ms\nMessageDigests.digest               SHA-224     16384  thrpt   15    14.044    149.707  ops\/ms\nMessageDigests.digest               SHA-256        64  thrpt   15  1729.529  16915.554  ops\/ms\nMessageDigests.digest               SHA-256     16384  thrpt   15    14.040    149.720  ops\/ms\nMessageDigests.digest               SHA-384        64  thrpt   15  2551.285   8996.372  ops\/ms\nMessageDigests.digest               SHA-384     16384  thrpt   15    21.338     86.996  ops\/ms\nMessageDigests.digest               SHA-512        64  thrpt   15  2528.185   8886.926  ops\/ms\nMessageDigests.digest               SHA-512     16384  thrpt   15    21.298     86.840  ops\/ms\nMessageDigests.digest              SHA3-256        64  thrpt   15  3595.392   5628.810  ops\/ms\nMessageDigests.digest              SHA3-256     16384  thrpt   15    29.208     52.917  ops\/ms\nMessageDigests.digest              SHA3-512        64  thrpt   15  3604.652   5563.199  ops\/ms\nMessageDigests.digest              SHA3-512     16384  thrpt   15    16.545     28.182  ops\/ms\nMessageDigests.getAndDigest           SHA-1        64  thrpt   15  2467.470  11878.581  ops\/ms\nMessageDigests.getAndDigest           SHA-1     16384  thrpt   15    21.179    146.849  ops\/ms\nMessageDigests.getAndDigest         SHA-224        64  thrpt   15  1635.583   5864.632  ops\/ms\nMessageDigests.getAndDigest         SHA-224     16384  thrpt   15    14.023    148.556  ops\/ms\nMessageDigests.getAndDigest         SHA-256        64  thrpt   15  1633.913   5741.416  ops\/ms\nMessageDigests.getAndDigest         SHA-256     16384  thrpt   15    14.029    148.518  ops\/ms\nMessageDigests.getAndDigest         SHA-384        64  thrpt   15  2373.041   7634.589  ops\/ms\nMessageDigests.getAndDigest         SHA-384     16384  thrpt   15    21.335     86.452  ops\/ms\nMessageDigests.getAndDigest         SHA-512        64  thrpt   15  2366.305   7781.053  ops\/ms\nMessageDigests.getAndDigest         SHA-512     16384  thrpt   15    21.324     86.352  ops\/ms\nMessageDigests.getAndDigest        SHA3-256        64  thrpt   15  3154.196   4770.368  ops\/ms\nMessageDigests.getAndDigest        SHA3-256     16384  thrpt   15    29.028     52.621  ops\/ms\nMessageDigests.getAndDigest        SHA3-512        64  thrpt   15  3345.374   4828.986  ops\/ms\nMessageDigests.getAndDigest        SHA3-512     16384  thrpt   15    16.443     28.063  ops\/ms\n```\n\n[1] https:\/\/github.com\/golang\/go\/blob\/master\/src\/internal\/cpu\/cpu_arm64_darwin.go#L14"},"files":[{"filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vm_version_bsd_aarch64.cpp"}],"sha":"8d9ac0fa329b85ae90a7e610de56bde6e0804c2e"}]