{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,0 @@\n-    static void f(I intf) throws Throwable {\n-        I.finalize();\n-    }\n-    public static void testFinalize() throws Throwable {\n-        f(new InterfaceObj());\n-    }\n@@ -56,14 +50,0 @@\n-    static Method f:\"(LI;)V\" throws java\/lang\/Throwable stack 1 locals 1 {\n-        aload_0;\n-        invokeinterface    InterfaceMethod I.finalize:\"()V\", 1;\n-        return;\n-    }\n-\n-    public static Method testFinalize:\"()V\" throws java\/lang\/Throwable stack 2 locals 1 {\n-        new    class InterfaceObj;\n-        dup;\n-        invokespecial   Method \"<init>\":\"()V\";\n-        invokestatic    Method f:\"(LI;)V\";\n-        return;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/InterfaceObj.jasm","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary test interface resolution when clone and finalize are declared abstract within\n+ * @summary test interface resolution when clone and toString are declared abstract within\n@@ -33,1 +33,1 @@\n-    void finalize() throws Throwable;\n+    String toString();\n@@ -45,2 +45,1 @@\n-    @SuppressWarnings(\"removal\")\n-    public void finalize() throws Throwable {\n+    public String toString() {\n@@ -48,1 +47,1 @@\n-            System.out.println(\"In InterfaceObjectTest's finalize() method\\n\");\n+            System.out.println(\"In InterfaceObjectTest's toString() method\\n\");\n@@ -52,0 +51,1 @@\n+        return \"InterfaceObjectTest\";\n@@ -57,1 +57,1 @@\n-            o1.finalize();\n+            o1.toString();\n@@ -72,9 +72,0 @@\n-        try {\n-            java.lang.reflect.Method m = cls.getMethod(\"testFinalize\");\n-            m.invoke(cls);\n-            throw new RuntimeException(\"Failed to throw NoSuchMethodError for finalize()\");\n-        } catch (java.lang.reflect.InvocationTargetException e) {\n-            if (!e.getCause().toString().contains(\"NoSuchMethodError\")) {\n-                throw new RuntimeException(\"wrong ITE: \" + e.getCause().toString());\n-            }\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/InterfaceObjectTest.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"}]}