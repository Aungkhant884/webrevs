{"files":[{"patch":"@@ -89,0 +89,1 @@\n+import static java.lang.System.err;\n@@ -357,5 +358,13 @@\n-                assertTrue(CancellationException.class.isAssignableFrom(wrapped.getClass()));\n-                Throwable cause = wrapped.getCause();\n-                out.println(\"CancellationException cause: \" + x);\n-                assertTrue(IOException.class.isAssignableFrom(cause.getClass()));\n-                if (cause instanceof HttpConnectTimeoutException) {\n+                Throwable cause = wrapped;\n+                if (mayInterruptIfRunning) {\n+                    assertTrue(CancellationException.class.isAssignableFrom(wrapped.getClass()),\n+                            \"Unexpected exception: \" + wrapped);\n+                    cause = wrapped.getCause();\n+                    out.println(\"CancellationException cause: \" + x);\n+                    if (cause instanceof HttpConnectTimeoutException) {\n+                        cause.printStackTrace(out);\n+                        throw new RuntimeException(\"Unexpected timeout exception\", cause);\n+                    }\n+                }\n+                if (!IOException.class.isAssignableFrom(cause.getClass())) {\n+                    out.println(\"Unexpected cause: \" + cause.getClass());\n@@ -363,1 +372,0 @@\n-                    throw new RuntimeException(\"Unexpected timeout exception\", cause);\n@@ -365,0 +373,1 @@\n+                assertTrue(IOException.class.isAssignableFrom(cause.getClass()));\n@@ -382,1 +391,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 1000,\n@@ -494,1 +503,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 1000,\n@@ -516,0 +525,1 @@\n+            var uriStr = uri + \"\/post\/req=\" + i;\n@@ -518,1 +528,2 @@\n-                out.printf(\"%s Interrupting main from: %s (%s)\", now(), current, uri);\n+                out.printf(\"%s Interrupting main from: %s (%s)%n\", now(), current, uriStr);\n+                err.printf(\"%s Interrupting main from: %s (%s)%n\", now(), current, uriStr);\n@@ -529,1 +540,1 @@\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n+            HttpRequest req = HttpRequest.newBuilder(URI.create(uriStr))\n@@ -535,0 +546,1 @@\n+                out.println(\"Sending: \" + uriStr);\n@@ -539,1 +551,1 @@\n-\n+            out.println(uriStr + \": got result or exception\");\n@@ -541,1 +553,1 @@\n-                out.println(\"Got expected exception: \" + failed);\n+                out.println(uriStr + \": Got expected exception: \" + failed);\n@@ -543,0 +555,1 @@\n+                out.println(uriStr + \": got IOException: \" + failed);\n@@ -547,2 +560,2 @@\n-                if (interruptingThread.get() == main) {\n-                    out.println(\"Accepting IOException: \" + failed);\n+                if (interruptingThread.isDone() && interruptingThread.get() == main) {\n+                    out.println(uriStr + \": Accepting IOException: \" + failed);\n@@ -551,0 +564,1 @@\n+                    out.println(uriStr + \": unexpected exception: \" + failed);\n@@ -554,1 +568,1 @@\n-                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n+                out.println(uriStr + \": unexpected exception: \" + failed);\n@@ -556,0 +570,4 @@\n+            } else {\n+                assert failed == null;\n+                out.println(uriStr + \": got body: \" + body);\n+                assertEquals(body, Stream.of(BODY.split(\"\\\\|\")).collect(Collectors.joining()));\n@@ -557,0 +575,1 @@\n+            out.println(\"next iteration\");\n@@ -558,1 +577,1 @@\n-            var error = TRACKER.check(tracker, 200,\n+            var error = TRACKER.check(tracker, 1000,\n","filename":"test\/jdk\/java\/net\/httpclient\/CancelRequestTest.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"}]}