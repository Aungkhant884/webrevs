{"files":[{"patch":"@@ -104,5 +104,8 @@\n-#define SAFEPOINT                                                                 \\\n-    {                                                                             \\\n-       \/* zap freed handles rather than GC'ing them *\/                            \\\n-       HandleMarkCleaner __hmc(THREAD);                                           \\\n-       CALL_VM(SafepointMechanism::process_if_requested(THREAD), handle_exception); \\\n+#define SAFEPOINT                                                                                            \\\n+    {                                                                                                        \\\n+       \/* zap freed handles rather than GC'ing them *\/                                                       \\\n+       HandleMarkCleaner __hmc(THREAD);                                                                      \\\n+       if (SafepointMechanism::should_process(THREAD)) {                                                     \\\n+         CALL_VM(SafepointMechanism::process_if_requested_with_exit_check(THREAD, true \/* check asyncs *\/),  \\\n+                 handle_exception);                                                                          \\\n+       }                                                                                                     \\\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -739,23 +739,0 @@\n-  \/\/ Check for pending. async. exceptions or suspends - except if the\n-  \/\/ thread was blocked inside the VM. has_special_runtime_exit_condition()\n-  \/\/ is called last since it grabs a lock and we only want to do that when\n-  \/\/ we must.\n-  \/\/\n-  \/\/ Note: we never deliver an async exception at a polling point as the\n-  \/\/ compiler may not have an exception handler for it. The polling\n-  \/\/ code will notice the async and deoptimize and the exception will\n-  \/\/ be delivered. (Polling at a return point is ok though). Sure is\n-  \/\/ a lot of bother for a deprecated feature...\n-  \/\/\n-  \/\/ We don't deliver an async exception if the thread state is\n-  \/\/ _thread_in_native_trans so JNI functions won't be called with\n-  \/\/ a surprising pending exception. If the thread state is going back to java,\n-  \/\/ async exception is checked in check_special_condition_for_native_trans().\n-\n-  if (state != _thread_blocked_trans &&\n-      state != _thread_in_vm_trans &&\n-      thread->has_special_runtime_exit_condition()) {\n-    thread->handle_special_runtime_exit_condition(\n-      !thread->is_at_poll_safepoint() && (state != _thread_in_native_trans));\n-  }\n-\n@@ -957,6 +934,1 @@\n-    SafepointMechanism::process_if_requested(self);\n-    \/\/ We have to wait if we are here because of a handshake for object deoptimization.\n-    if (self->is_obj_deopt_suspend()) {\n-      self->wait_for_object_deoptimization();\n-    }\n-    self->check_and_handle_async_exceptions();\n+    SafepointMechanism::process_if_requested_with_exit_check(self, true \/* check asyncs *\/);\n@@ -972,1 +944,0 @@\n-    set_at_poll_safepoint(true);\n@@ -977,0 +948,1 @@\n+    set_at_poll_safepoint(true);\n@@ -978,5 +950,6 @@\n-    SafepointMechanism::process_if_requested(self);\n-    \/\/ We have to wait if we are here because of a handshake for object deoptimization.\n-    if (self->is_obj_deopt_suspend()) {\n-      self->wait_for_object_deoptimization();\n-    }\n+    \/\/ We never deliver an async exception at a polling point as the\n+    \/\/ compiler may not have an exception handler for it. The polling\n+    \/\/ code will notice the pending async exception, deoptimize and\n+    \/\/ the exception will be delivered. (Polling at a return point\n+    \/\/ is ok though). Sure is a lot of bother for a deprecated feature...\n+    SafepointMechanism::process_if_requested_with_exit_check(self, false \/* check asyncs *\/);\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":8,"deletions":35,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    SafepointSynchronize::block(thread); \/\/ Recursive\n+    SafepointSynchronize::block(thread);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+  static inline void process_if_requested_with_exit_check(JavaThread* thread, bool check_asyncs);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,0 +83,7 @@\n+void SafepointMechanism::process_if_requested_with_exit_check(JavaThread* thread, bool check_asyncs) {\n+  process_if_requested(thread);\n+  if (thread->has_special_runtime_exit_condition()) {\n+    thread->handle_special_runtime_exit_condition(check_asyncs);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2415,1 +2415,0 @@\n-  } while (is_external_suspend());\n@@ -2417,3 +2416,4 @@\n-  if (state != _thread_in_native) {\n-    SafepointMechanism::process_if_requested(this);\n-  }\n+    if (state != _thread_in_native) {\n+      SafepointMechanism::process_if_requested(this);\n+    }\n+  } while (is_external_suspend());\n@@ -2499,1 +2499,0 @@\n-\n@@ -2502,11 +2501,1 @@\n-  if (thread->is_external_suspend()) {\n-    thread->java_suspend_self_with_safepoint_check();\n-  } else {\n-    SafepointMechanism::process_if_requested(thread);\n-  }\n-\n-  if (thread->is_obj_deopt_suspend()) {\n-    thread->wait_for_object_deoptimization();\n-  }\n-\n-  JFR_ONLY(SUSPEND_THREAD_CONDITIONAL(thread);)\n+  SafepointMechanism::process_if_requested_with_exit_check(thread, false \/* check asyncs *\/);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"}]}