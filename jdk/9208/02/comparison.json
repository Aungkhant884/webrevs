{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,6 +427,2 @@\n-            Integer totalSecs = totalSeconds;\n-            ZoneOffset result = SECONDS_CACHE.get(totalSecs);\n-            if (result == null) {\n-                result = new ZoneOffset(totalSeconds);\n-                SECONDS_CACHE.putIfAbsent(totalSecs, result);\n-                result = SECONDS_CACHE.get(totalSecs);\n+            return SECONDS_CACHE.computeIfAbsent(totalSeconds, totalSecs -> {\n+                ZoneOffset result = new ZoneOffset(totalSecs);\n@@ -434,2 +430,2 @@\n-            }\n-            return result;\n+                return result;\n+            });\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -312,7 +312,1 @@\n-        Object store = CACHE.get(key);\n-        if (store == null) {\n-            store = createStore(field, locale);\n-            CACHE.putIfAbsent(key, store);\n-            store = CACHE.get(key);\n-        }\n-        return store;\n+        return CACHE.computeIfAbsent(key, e -> createStore(e.getKey(), e.getValue()));\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeTextProvider.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,7 +163,1 @@\n-        DecimalStyle info = CACHE.get(locale);\n-        if (info == null) {\n-            info = create(locale);\n-            CACHE.putIfAbsent(locale, info);\n-            info = CACHE.get(locale);\n-        }\n-        return info;\n+        return CACHE.computeIfAbsent(locale, DecimalStyle::create);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DecimalStyle.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,1 +199,1 @@\n-    private static final ConcurrentMap<String, WeekFields> CACHE = new ConcurrentHashMap<>(4, 0.75f, 2);\n+    private static final ConcurrentMap<WeekFieldsKey, WeekFields> CACHE = new ConcurrentHashMap<>(4, 0.75f, 2);\n@@ -329,8 +329,5 @@\n-        String key = firstDayOfWeek.toString() + minimalDaysInFirstWeek;\n-        WeekFields rules = CACHE.get(key);\n-        if (rules == null) {\n-            rules = new WeekFields(firstDayOfWeek, minimalDaysInFirstWeek);\n-            CACHE.putIfAbsent(key, rules);\n-            rules = CACHE.get(key);\n-        }\n-        return rules;\n+        WeekFieldsKey key = new WeekFieldsKey(firstDayOfWeek, minimalDaysInFirstWeek);\n+        return CACHE.computeIfAbsent(key, k -> new WeekFields(k.firstDayOfWeek, k.minimalDaysInFirstWeek));\n+    }\n+\n+    private record WeekFieldsKey(DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/WeekFields.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}