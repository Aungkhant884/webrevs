{"files":[{"patch":"@@ -47,0 +47,3 @@\n+import java.util.HashMap;\n+import java.util.Map;\n+\n@@ -130,0 +133,1 @@\n+        qualifiedSymbolCache = new HashMap<>();\n@@ -171,0 +175,6 @@\n+    \/** Cache the symbol to reflect the qualifying type.\n+     *  key: corresponding type\n+     *  value: qualified symbol\n+     *\/\n+    Map<Type, Symbol> qualifiedSymbolCache;\n+\n@@ -233,2 +243,5 @@\n-            Symbol qualifier = new ClassSymbol(Flags.PUBLIC, site.tsym.name,\n-                                               site, syms.noSymbol);\n+            Symbol qualifier;\n+            if ((qualifier = qualifiedSymbolCache.get(site)) == null) {\n+                qualifier = new ClassSymbol(Flags.PUBLIC, site.tsym.name, site, syms.noSymbol);\n+                qualifiedSymbolCache.put(site, qualifier);\n+            }\n@@ -2417,0 +2430,1 @@\n+            qualifiedSymbolCache.clear();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255757\n+ * @summary Javac shouldn't emit duplicate pool entries on array::clone\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8255757\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPool.*;\n+\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+\n+public class T8255757 extends TestRunner {\n+    ToolBox tb;\n+\n+    T8255757() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        T8255757 t = new T8255757();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testDuplicatePoolEntries() throws Exception {\n+        String code = \"\"\"\n+                public class Test {\n+                    void test(Object[] o) {\n+                        o.clone();\n+                        o.clone();\n+                    }\n+                    void test2(Object[] o) {\n+                        o.clone();\n+                        o.clone();\n+                    }\n+                }\"\"\";\n+        Path curPath = Path.of(\".\");\n+        new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .run();\n+\n+        ClassFile cf = ClassFile.read(curPath.resolve(\"Test.class\"));\n+        ConstantPool cp = cf.constant_pool;\n+        int num = 0;\n+        for (CPInfo cpInfo : cp.entries()) {\n+            if (cpInfo instanceof CONSTANT_Methodref_info) {\n+                int class_index = ((CONSTANT_Methodref_info) cpInfo).class_index;\n+                int name_and_type_index = ((CONSTANT_Methodref_info) cpInfo).name_and_type_index;\n+                int class_name_index = ((CONSTANT_Class_info)\n+                        cp.getClassInfo(class_index)).name_index;\n+                int method_name_index = ((CONSTANT_NameAndType_info)\n+                        cp.getNameAndTypeInfo(name_and_type_index)).name_index;\n+                int method_type_name_index = ((CONSTANT_NameAndType_info)\n+                        cp.getNameAndTypeInfo(name_and_type_index)).type_index;\n+                if (\"[Ljava\/lang\/Object;\".equals(cp.getUTF8Value(class_name_index)) &&\n+                        \"clone\".equals(cp.getUTF8Value(method_name_index)) &&\n+                        \"()Ljava\/lang\/Object;\".equals(cp.getUTF8Value(method_type_name_index))) {\n+                    ++num;\n+                }\n+            }\n+        }\n+        if (num != 1) {\n+            throw new AssertionError(\"The number of the pool entries on array::clone is not right.\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}