{"files":[{"patch":"@@ -4625,8 +4625,1 @@\n-      case 2: {\n-        if (vlen_enc == AVX_512bit && !VM_Version::supports_avx512bw()) {\n-          vpmovsxwd(dst, src, vlen_enc);\n-        } else {\n-          vpmovsxbw(dst, src, vlen_enc);\n-        }\n-        break;\n-      }\n+      case 2: vpmovsxbw(dst, src, vlen_enc); break;\n@@ -4641,17 +4634,2 @@\n-        if (vlen_enc == AVX_512bit) {\n-          if (VM_Version::supports_avx512bw()) {\n-            evpmovwb(dst, src, vlen_enc);\n-          } else {\n-            evpmovdw(dst, src, vlen_enc);\n-          }\n-        } else if (VM_Version::supports_avx512vl()) {\n-          if (VM_Version::supports_avx512bw()) {\n-            evpmovwb(dst, src, vlen_enc);\n-          } else if (dst_bt != T_BYTE) {\n-            evpmovdw(dst, src, vlen_enc);\n-          } else if (vlen_enc == AVX_128bit) {\n-            vpacksswb(dst, src, src, vlen_enc);\n-          } else {\n-            vpacksswb(dst, src, src, vlen_enc);\n-            vpermq(dst, dst, 0x08, vlen_enc);\n-          }\n+        if (vlen_enc == AVX_128bit) {\n+          vpacksswb(dst, src, src, vlen_enc);\n@@ -4659,6 +4637,2 @@\n-          if (vlen_enc == AVX_128bit) {\n-            vpacksswb(dst, src, src, vlen_enc);\n-          } else {\n-            vpacksswb(dst, src, src, vlen_enc);\n-            vpermq(dst, dst, 0x08, vlen_enc);\n-          }\n+          vpacksswb(dst, src, src, vlen_enc);\n+          vpermq(dst, dst, 0x08, vlen_enc);\n@@ -4669,3 +4643,1 @@\n-        if (vlen_enc == AVX_512bit || VM_Version::supports_avx512vl()) {\n-          evpmovdb(dst, src, vlen_enc);\n-        } else if (vlen_enc == AVX_128bit) {\n+        if (vlen_enc == AVX_128bit) {\n@@ -4682,3 +4654,1 @@\n-        if (vlen_enc == AVX_512bit || VM_Version::supports_avx512vl()) {\n-          evpmovqb(dst, src, vlen_enc);\n-        } else if (vlen_enc == AVX_128bit) {\n+        if (vlen_enc == AVX_128bit) {\n@@ -4701,50 +4671,0 @@\n-void C2_MacroAssembler::vector_mask_cast(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                         XMMRegister xtmp2, BasicType dst_bt, BasicType src_bt, int vlen) {\n-  int dst_bt_size = type2aelembytes(dst_bt);\n-  int src_bt_size = type2aelembytes(src_bt);\n-  if (dst_bt_size > src_bt_size) {\n-    switch (dst_bt_size \/ src_bt_size) {\n-      case 2:\n-        vpmovsxbw(xtmp1, src, AVX_128bit);\n-        vpshufd(xtmp2, src, 0x0E, AVX_128bit);\n-        vpmovsxbw(xtmp2, xtmp2, AVX_128bit);\n-        vinsertf128(dst, xtmp1, xtmp2, 0x01);\n-        break;\n-      case 4:\n-        vpmovsxbd(xtmp1, src, AVX_128bit);\n-        vpshufd(xtmp2, src, 0x01, AVX_128bit);\n-        vpmovsxbd(xtmp2, xtmp2, AVX_128bit);\n-        vinsertf128(dst, xtmp1, xtmp2, 0x01);\n-        break;\n-      case 8:\n-        vpmovsxbq(xtmp1, src, AVX_128bit);\n-        pshuflw(xtmp2, src, 0x01);\n-        vpmovsxbq(xtmp2, xtmp2, AVX_128bit);\n-        vinsertf128(dst, xtmp1, xtmp2, 0x01);\n-        break;\n-      default: ShouldNotReachHere();\n-    }\n-  } else {\n-    assert(dst_bt_size < src_bt_size, \"\");\n-    assert(xtmp2 == xnoreg, \"\");\n-    switch (src_bt_size \/ dst_bt_size) {\n-      case 2:\n-        vextractf128(xtmp1, src, 0x01);\n-        vpacksswb(dst, src, xtmp1, AVX_128bit);\n-        break;\n-      case 4:\n-        vextractf128(xtmp1, src, 0x01);\n-        vpackssdw(dst, src, xtmp1, AVX_128bit);\n-        vpacksswb(dst, dst, dst, AVX_128bit);\n-        break;\n-      case 8:\n-        vpermilps(dst, src, 0x08, AVX_256bit);\n-        vpermpd(dst, dst, 0x08, AVX_256bit);\n-        vpackssdw(dst, dst, dst, AVX_128bit);\n-        vpacksswb(dst, dst, dst, AVX_128bit);\n-        break;\n-      default: ShouldNotReachHere();\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":87,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -344,3 +344,0 @@\n-  void vector_mask_cast(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                        XMMRegister xtmp2, BasicType dst_bt, BasicType src_bt, int vlen);\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1853,0 +1853,1 @@\n+    case Op_VectorMaskCast:\n@@ -8389,1 +8390,0 @@\n-  predicate(Matcher::vector_length(n) == Matcher::vector_length(n->in(1)));\n@@ -8400,2 +8400,1 @@\n-  predicate((Matcher::vector_length(n) == Matcher::vector_length(n->in(1))) &&\n-            (Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))));\n+  predicate(Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)));\n@@ -8412,5 +8411,1 @@\n-  predicate(Matcher::vector_length(n) == Matcher::vector_length(n->in(1)) &&\n-            Matcher::vector_length_in_bytes(n) != Matcher::vector_length_in_bytes(n->in(1)) &&\n-            (UseAVX >= 2 ||\n-             (Matcher::vector_length_in_bytes(n) != 32 &&\n-              Matcher::vector_length_in_bytes(n->in(1)) != 32)));\n+  predicate(Matcher::vector_length_in_bytes(n) != Matcher::vector_length_in_bytes(n->in(1)));\n@@ -8428,34 +8423,0 @@\n-instruct vmaskcast_avx1_32B_expand(vec dst, vec src, vec xtmp1, vec xtmp2) %{\n-  predicate(UseAVX == 1 && Matcher::vector_length_in_bytes(n) == 32 &&\n-            Matcher::vector_length(n) == Matcher::vector_length(n->in(1)) &&\n-            Matcher::vector_length_in_bytes(n) > Matcher::vector_length_in_bytes(n->in(1)));\n-  match(Set dst (VectorMaskCast src));\n-  effect(TEMP xtmp1, TEMP xtmp2);\n-  format %{ \"vector_mask_cast $dst, $src\\t! using $xtmp1, $xtmp2 as TEMP\" %}\n-  ins_encode %{\n-    int vlen = Matcher::vector_length(this);\n-    BasicType src_bt = Matcher::vector_element_basic_type(this, $src);\n-    BasicType dst_bt = Matcher::vector_element_basic_type(this);\n-    __ vector_mask_cast($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                                 $xtmp2$$XMMRegister, dst_bt, src_bt, vlen);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmaskcast_avx1_32B_shrink(vec dst, vec src, vec xtmp) %{\n-  predicate(UseAVX == 1 && Matcher::vector_length_in_bytes(n->in(1)) == 32 &&\n-            Matcher::vector_length(n) == Matcher::vector_length(n->in(1)) &&\n-            Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1)));\n-  match(Set dst (VectorMaskCast src));\n-  effect(TEMP xtmp);\n-  format %{ \"vector_mask_cast $dst, $src\\t! using $xtmp as TEMP\" %}\n-  ins_encode %{\n-    int vlen = Matcher::vector_length(this);\n-    BasicType src_bt = Matcher::vector_element_basic_type(this, $src);\n-    BasicType dst_bt = Matcher::vector_element_basic_type(this);\n-    __ vector_mask_cast($dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister,\n-                                 xnoreg, dst_bt, src_bt, vlen);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":3,"deletions":42,"binary":false,"changes":45,"status":"modified"}]}