{"files":[{"patch":"@@ -4621,0 +4621,2 @@\n+  assert(vlen_enc != AVX_512bit, \"\");\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+    public static final String VECTOR_MASK_CAST = START + \"VectorMaskCast\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+\n@@ -35,1 +37,0 @@\n-import jdk.test.lib.Utils;\n@@ -37,2 +38,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -42,1 +43,1 @@\n- * @bug 8273264\n+ * @bug 8273264 8292898\n@@ -44,2 +45,2 @@\n- * @library \/test\/lib\n- * @summary AArch64: [vector] Add missing rules for VectorMaskCast\n+ * @library \/test\/lib \/\n+ * @summary Unify vector mask cast and add missing rules for VectorMaskCast\n@@ -48,1 +49,1 @@\n- * @run testng\/othervm -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorMaskCastTest\n+ * @run driver compiler.vectorapi.VectorMaskCastTest\n@@ -51,1 +52,0 @@\n-\n@@ -59,1 +59,1 @@\n-public class VectorMaskCastTest{\n+public class VectorMaskCastTest {\n@@ -61,1 +61,0 @@\n-    private static final int NUM_ITER = 5000;\n@@ -64,4 +63,6 @@\n-    public static boolean[] genMask() {\n-        boolean[] mask = new boolean[64];\n-        for (int i = 0; i < 64; i ++) {\n-            mask[i] = rd.nextBoolean();\n+    private static final boolean[] mask_arr;\n+\n+    static {\n+        mask_arr = new boolean[64];\n+        for (int i = 0; i < 64; i++) {\n+            mask_arr[i] = rd.nextBoolean();\n@@ -69,1 +70,0 @@\n-        return mask;\n@@ -73,1 +73,4 @@\n-    private static void testByte64ToShort128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testByte64ToShort128() {\n@@ -75,1 +78,1 @@\n-        Assert.assertEquals(mByte64.cast(ShortVector.SPECIES_128).toString(), mByte64.toString());\n+        Asserts.assertEquals(mByte64.cast(ShortVector.SPECIES_128).toString(), mByte64.toString());\n@@ -78,1 +81,4 @@\n-    private static void testByte64ToInt256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testByte64ToInt256() {\n@@ -80,1 +86,1 @@\n-        Assert.assertEquals(mByte64.cast(IntVector.SPECIES_256).toString(), mByte64.toString());\n+        Asserts.assertEquals(mByte64.cast(IntVector.SPECIES_256).toString(), mByte64.toString());\n@@ -83,1 +89,4 @@\n-    private static void testByte64ToFloat256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testByte64ToFloat256() {\n@@ -85,1 +94,1 @@\n-        Assert.assertEquals(mByte64.cast(FloatVector.SPECIES_256).toString(), mByte64.toString());\n+        Asserts.assertEquals(mByte64.cast(FloatVector.SPECIES_256).toString(), mByte64.toString());\n@@ -88,1 +97,4 @@\n-    private static void testByte64ToLong512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testByte64ToLong512() {\n@@ -90,1 +102,1 @@\n-        Assert.assertEquals(mByte64.cast(LongVector.SPECIES_512).toString(), mByte64.toString());\n+        Asserts.assertEquals(mByte64.cast(LongVector.SPECIES_512).toString(), mByte64.toString());\n@@ -93,1 +105,4 @@\n-    private static void testByte64ToDouble512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testByte64ToDouble512() {\n@@ -95,1 +110,1 @@\n-        Assert.assertEquals(mByte64.cast(DoubleVector.SPECIES_512).toString(), mByte64.toString());\n+        Asserts.assertEquals(mByte64.cast(DoubleVector.SPECIES_512).toString(), mByte64.toString());\n@@ -98,1 +113,4 @@\n-    private static void testByte128ToShort256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testByte128ToShort256() {\n@@ -100,1 +118,1 @@\n-        Assert.assertEquals(mByte128.cast(ShortVector.SPECIES_256).toString(), mByte128.toString());\n+        Asserts.assertEquals(mByte128.cast(ShortVector.SPECIES_256).toString(), mByte128.toString());\n@@ -103,1 +121,4 @@\n-    private static void testByte128ToInt512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testByte128ToInt512() {\n@@ -105,1 +126,1 @@\n-        Assert.assertEquals(mByte128.cast(IntVector.SPECIES_512).toString(), mByte128.toString());\n+        Asserts.assertEquals(mByte128.cast(IntVector.SPECIES_512).toString(), mByte128.toString());\n@@ -108,1 +129,4 @@\n-    private static void testByte128ToFloat512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testByte128ToFloat512() {\n@@ -110,1 +134,1 @@\n-        Assert.assertEquals(mByte128.cast(FloatVector.SPECIES_512).toString(), mByte128.toString());\n+        Asserts.assertEquals(mByte128.cast(FloatVector.SPECIES_512).toString(), mByte128.toString());\n@@ -113,1 +137,4 @@\n-    private static void testByte256ToShort512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testByte256ToShort512() {\n@@ -115,1 +142,1 @@\n-        Assert.assertEquals(mByte256.cast(ShortVector.SPECIES_512).toString(), mByte256.toString());\n+        Asserts.assertEquals(mByte256.cast(ShortVector.SPECIES_512).toString(), mByte256.toString());\n@@ -119,1 +146,4 @@\n-    private static void testShort64ToInt128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testShort64ToInt128() {\n@@ -121,1 +151,1 @@\n-        Assert.assertEquals(mShort64.cast(IntVector.SPECIES_128).toString(), mShort64.toString());\n+        Asserts.assertEquals(mShort64.cast(IntVector.SPECIES_128).toString(), mShort64.toString());\n@@ -124,1 +154,4 @@\n-    private static void testShort64ToFloat128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testShort64ToFloat128() {\n@@ -126,1 +159,1 @@\n-        Assert.assertEquals(mShort64.cast(FloatVector.SPECIES_128).toString(), mShort64.toString());\n+        Asserts.assertEquals(mShort64.cast(FloatVector.SPECIES_128).toString(), mShort64.toString());\n@@ -129,1 +162,4 @@\n-    private static void testShort64ToLong256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testShort64ToLong256() {\n@@ -131,1 +167,1 @@\n-        Assert.assertEquals(mShort64.cast(LongVector.SPECIES_256).toString(), mShort64.toString());\n+        Asserts.assertEquals(mShort64.cast(LongVector.SPECIES_256).toString(), mShort64.toString());\n@@ -134,1 +170,4 @@\n-    private static void testShort64ToDouble256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testShort64ToDouble256() {\n@@ -136,1 +175,1 @@\n-        Assert.assertEquals(mShort64.cast(DoubleVector.SPECIES_256).toString(), mShort64.toString());\n+        Asserts.assertEquals(mShort64.cast(DoubleVector.SPECIES_256).toString(), mShort64.toString());\n@@ -139,1 +178,4 @@\n-    private static void testShort128ToByte64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testShort128ToByte64() {\n@@ -141,1 +183,1 @@\n-        Assert.assertEquals(mShort128.cast(ByteVector.SPECIES_64).toString(), mShort128.toString());\n+        Asserts.assertEquals(mShort128.cast(ByteVector.SPECIES_64).toString(), mShort128.toString());\n@@ -144,1 +186,4 @@\n-    private static void testShort128ToInt256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testShort128ToInt256() {\n@@ -146,1 +191,1 @@\n-        Assert.assertEquals(mShort128.cast(IntVector.SPECIES_256).toString(), mShort128.toString());\n+        Asserts.assertEquals(mShort128.cast(IntVector.SPECIES_256).toString(), mShort128.toString());\n@@ -149,1 +194,4 @@\n-    private static void testShort128ToFloat256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testShort128ToFloat256() {\n@@ -151,1 +199,1 @@\n-        Assert.assertEquals(mShort128.cast(FloatVector.SPECIES_256).toString(), mShort128.toString());\n+        Asserts.assertEquals(mShort128.cast(FloatVector.SPECIES_256).toString(), mShort128.toString());\n@@ -154,1 +202,4 @@\n-    private static void testShort128ToLong512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testShort128ToLong512() {\n@@ -156,1 +207,1 @@\n-        Assert.assertEquals(mShort128.cast(LongVector.SPECIES_512).toString(), mShort128.toString());\n+        Asserts.assertEquals(mShort128.cast(LongVector.SPECIES_512).toString(), mShort128.toString());\n@@ -159,1 +210,4 @@\n-    private static void testShort128ToDouble512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testShort128ToDouble512() {\n@@ -161,1 +215,1 @@\n-        Assert.assertEquals(mShort128.cast(DoubleVector.SPECIES_512).toString(), mShort128.toString());\n+        Asserts.assertEquals(mShort128.cast(DoubleVector.SPECIES_512).toString(), mShort128.toString());\n@@ -164,1 +218,4 @@\n-    private static void testShort256ToByte128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testShort256ToByte128() {\n@@ -166,1 +223,1 @@\n-        Assert.assertEquals(mShort256.cast(ByteVector.SPECIES_128).toString(), mShort256.toString());\n+        Asserts.assertEquals(mShort256.cast(ByteVector.SPECIES_128).toString(), mShort256.toString());\n@@ -169,1 +226,4 @@\n-    private static void testShort256ToInt512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testShort256ToInt512() {\n@@ -171,1 +231,1 @@\n-        Assert.assertEquals(mShort256.cast(IntVector.SPECIES_512).toString(), mShort256.toString());\n+        Asserts.assertEquals(mShort256.cast(IntVector.SPECIES_512).toString(), mShort256.toString());\n@@ -174,1 +234,4 @@\n-    private static void testShort256ToFloat512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testShort256ToFloat512() {\n@@ -176,1 +239,1 @@\n-        Assert.assertEquals(mShort256.cast(FloatVector.SPECIES_512).toString(), mShort256.toString());\n+        Asserts.assertEquals(mShort256.cast(FloatVector.SPECIES_512).toString(), mShort256.toString());\n@@ -179,1 +242,4 @@\n-    private static void testShort512ToByte256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testShort512ToByte256() {\n@@ -181,1 +247,1 @@\n-        Assert.assertEquals(mShort512.cast(ByteVector.SPECIES_256).toString(), mShort512.toString());\n+        Asserts.assertEquals(mShort512.cast(ByteVector.SPECIES_256).toString(), mShort512.toString());\n@@ -185,1 +251,4 @@\n-    private static void testInt64ToLong128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testInt64ToLong128() {\n@@ -187,1 +256,1 @@\n-        Assert.assertEquals(mInt64.cast(LongVector.SPECIES_128).toString(), mInt64.toString());\n+        Asserts.assertEquals(mInt64.cast(LongVector.SPECIES_128).toString(), mInt64.toString());\n@@ -190,1 +259,4 @@\n-    private static void testInt64ToDouble128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testInt64ToDouble128() {\n@@ -192,1 +264,1 @@\n-        Assert.assertEquals(mInt64.cast(DoubleVector.SPECIES_128).toString(), mInt64.toString());\n+        Asserts.assertEquals(mInt64.cast(DoubleVector.SPECIES_128).toString(), mInt64.toString());\n@@ -195,1 +267,4 @@\n-    private static void testInt128ToShort64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testInt128ToShort64() {\n@@ -197,1 +272,1 @@\n-        Assert.assertEquals(mInt128.cast(ShortVector.SPECIES_64).toString(), mInt128.toString());\n+        Asserts.assertEquals(mInt128.cast(ShortVector.SPECIES_64).toString(), mInt128.toString());\n@@ -200,1 +275,4 @@\n-    private static void testInt128ToLong256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testInt128ToLong256() {\n@@ -202,1 +280,1 @@\n-        Assert.assertEquals(mInt128.cast(LongVector.SPECIES_256).toString(), mInt128.toString());\n+        Asserts.assertEquals(mInt128.cast(LongVector.SPECIES_256).toString(), mInt128.toString());\n@@ -205,1 +283,4 @@\n-    private static void testInt128ToDouble256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testInt128ToDouble256() {\n@@ -207,1 +288,1 @@\n-        Assert.assertEquals(mInt128.cast(DoubleVector.SPECIES_256).toString(), mInt128.toString());\n+        Asserts.assertEquals(mInt128.cast(DoubleVector.SPECIES_256).toString(), mInt128.toString());\n@@ -210,1 +291,4 @@\n-    private static void testInt256ToShort128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testInt256ToShort128() {\n@@ -212,1 +296,1 @@\n-        Assert.assertEquals(mInt256.cast(ShortVector.SPECIES_128).toString(), mInt256.toString());\n+        Asserts.assertEquals(mInt256.cast(ShortVector.SPECIES_128).toString(), mInt256.toString());\n@@ -215,1 +299,4 @@\n-    private static void testInt256ToByte64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testInt256ToByte64() {\n@@ -217,1 +304,1 @@\n-        Assert.assertEquals(mInt256.cast(ByteVector.SPECIES_64).toString(), mInt256.toString());\n+        Asserts.assertEquals(mInt256.cast(ByteVector.SPECIES_64).toString(), mInt256.toString());\n@@ -220,1 +307,4 @@\n-    private static void testInt256ToLong512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testInt256ToLong512() {\n@@ -222,1 +312,1 @@\n-        Assert.assertEquals(mInt256.cast(LongVector.SPECIES_512).toString(), mInt256.toString());\n+        Asserts.assertEquals(mInt256.cast(LongVector.SPECIES_512).toString(), mInt256.toString());\n@@ -225,1 +315,4 @@\n-    private static void testInt256ToDouble512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testInt256ToDouble512() {\n@@ -227,1 +320,1 @@\n-        Assert.assertEquals(mInt256.cast(DoubleVector.SPECIES_512).toString(), mInt256.toString());\n+        Asserts.assertEquals(mInt256.cast(DoubleVector.SPECIES_512).toString(), mInt256.toString());\n@@ -230,1 +323,4 @@\n-    private static void testInt512ToShort256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testInt512ToShort256() {\n@@ -232,1 +328,1 @@\n-        Assert.assertEquals(mInt512.cast(ShortVector.SPECIES_256).toString(), mInt512.toString());\n+        Asserts.assertEquals(mInt512.cast(ShortVector.SPECIES_256).toString(), mInt512.toString());\n@@ -235,1 +331,4 @@\n-    private static void testInt512ToByte128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testInt512ToByte128() {\n@@ -237,1 +336,1 @@\n-        Assert.assertEquals(mInt512.cast(ByteVector.SPECIES_128).toString(), mInt512.toString());\n+        Asserts.assertEquals(mInt512.cast(ByteVector.SPECIES_128).toString(), mInt512.toString());\n@@ -241,1 +340,4 @@\n-    private static void testFloat64ToLong128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloat64ToLong128() {\n@@ -243,1 +345,1 @@\n-        Assert.assertEquals(mFloat64.cast(LongVector.SPECIES_128).toString(), mFloat64.toString());\n+        Asserts.assertEquals(mFloat64.cast(LongVector.SPECIES_128).toString(), mFloat64.toString());\n@@ -246,1 +348,4 @@\n-    private static void testFloat64ToDouble128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloat64ToDouble128() {\n@@ -248,1 +353,1 @@\n-        Assert.assertEquals(mFloat64.cast(DoubleVector.SPECIES_128).toString(), mFloat64.toString());\n+        Asserts.assertEquals(mFloat64.cast(DoubleVector.SPECIES_128).toString(), mFloat64.toString());\n@@ -251,1 +356,4 @@\n-    private static void testFloat128ToShort64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+    public static void testFloat128ToShort64() {\n@@ -253,1 +361,1 @@\n-        Assert.assertEquals(mFloat128.cast(ShortVector.SPECIES_64).toString(), mFloat128.toString());\n+        Asserts.assertEquals(mFloat128.cast(ShortVector.SPECIES_64).toString(), mFloat128.toString());\n@@ -256,1 +364,4 @@\n-    private static void testFloat128ToLong256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testFloat128ToLong256() {\n@@ -258,1 +369,1 @@\n-        Assert.assertEquals(mFloat128.cast(LongVector.SPECIES_256).toString(), mFloat128.toString());\n+        Asserts.assertEquals(mFloat128.cast(LongVector.SPECIES_256).toString(), mFloat128.toString());\n@@ -261,1 +372,4 @@\n-    private static void testFloat128ToDouble256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testFloat128ToDouble256() {\n@@ -263,1 +377,1 @@\n-        Assert.assertEquals(mFloat128.cast(DoubleVector.SPECIES_256).toString(), mFloat128.toString());\n+        Asserts.assertEquals(mFloat128.cast(DoubleVector.SPECIES_256).toString(), mFloat128.toString());\n@@ -266,1 +380,4 @@\n-    private static void testFloat256ToShort128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testFloat256ToShort128() {\n@@ -268,1 +385,1 @@\n-        Assert.assertEquals(mFloat256.cast(ShortVector.SPECIES_128).toString(), mFloat256.toString());\n+        Asserts.assertEquals(mFloat256.cast(ShortVector.SPECIES_128).toString(), mFloat256.toString());\n@@ -271,1 +388,4 @@\n-    private static void testFloat256ToByte64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testFloat256ToByte64() {\n@@ -273,1 +393,1 @@\n-        Assert.assertEquals(mFloat256.cast(ByteVector.SPECIES_64).toString(), mFloat256.toString());\n+        Asserts.assertEquals(mFloat256.cast(ByteVector.SPECIES_64).toString(), mFloat256.toString());\n@@ -276,1 +396,4 @@\n-    private static void testFloat256ToLong512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testFloat256ToLong512() {\n@@ -278,1 +401,1 @@\n-        Assert.assertEquals(mFloat256.cast(LongVector.SPECIES_512).toString(), mFloat256.toString());\n+        Asserts.assertEquals(mFloat256.cast(LongVector.SPECIES_512).toString(), mFloat256.toString());\n@@ -281,1 +404,4 @@\n-    private static void testFloat256ToDouble512(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testFloat256ToDouble512() {\n@@ -283,1 +409,1 @@\n-        Assert.assertEquals(mFloat256.cast(DoubleVector.SPECIES_512).toString(), mFloat256.toString());\n+        Asserts.assertEquals(mFloat256.cast(DoubleVector.SPECIES_512).toString(), mFloat256.toString());\n@@ -286,1 +412,4 @@\n-    private static void testFloat512ToShort256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testFloat512ToShort256() {\n@@ -288,1 +417,1 @@\n-        Assert.assertEquals(mFloat512.cast(ShortVector.SPECIES_256).toString(), mFloat512.toString());\n+        Asserts.assertEquals(mFloat512.cast(ShortVector.SPECIES_256).toString(), mFloat512.toString());\n@@ -291,1 +420,4 @@\n-    private static void testFloat512ToByte128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testFloat512ToByte128() {\n@@ -293,1 +425,1 @@\n-        Assert.assertEquals(mFloat512.cast(ByteVector.SPECIES_128).toString(), mFloat512.toString());\n+        Asserts.assertEquals(mFloat512.cast(ByteVector.SPECIES_128).toString(), mFloat512.toString());\n@@ -297,1 +429,4 @@\n-    private static void testLong128ToInt64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLong128ToInt64() {\n@@ -299,1 +434,1 @@\n-        Assert.assertEquals(mLong128.cast(IntVector.SPECIES_64).toString(), mLong128.toString());\n+        Asserts.assertEquals(mLong128.cast(IntVector.SPECIES_64).toString(), mLong128.toString());\n@@ -302,1 +437,4 @@\n-    private static void testLong128ToFloat64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLong128ToFloat64() {\n@@ -304,1 +442,1 @@\n-        Assert.assertEquals(mLong128.cast(FloatVector.SPECIES_64).toString(), mLong128.toString());\n+        Asserts.assertEquals(mLong128.cast(FloatVector.SPECIES_64).toString(), mLong128.toString());\n@@ -307,1 +445,4 @@\n-    private static void testLong256ToInt128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testLong256ToInt128() {\n@@ -309,1 +450,1 @@\n-        Assert.assertEquals(mLong256.cast(IntVector.SPECIES_128).toString(), mLong256.toString());\n+        Asserts.assertEquals(mLong256.cast(IntVector.SPECIES_128).toString(), mLong256.toString());\n@@ -312,1 +453,4 @@\n-    private static void testLong256ToFloat128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testLong256ToFloat128() {\n@@ -314,1 +458,1 @@\n-        Assert.assertEquals(mLong256.cast(FloatVector.SPECIES_128).toString(), mLong256.toString());\n+        Asserts.assertEquals(mLong256.cast(FloatVector.SPECIES_128).toString(), mLong256.toString());\n@@ -317,1 +461,4 @@\n-    private static void testLong256ToShort64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testLong256ToShort64() {\n@@ -319,1 +466,1 @@\n-        Assert.assertEquals(mLong256.cast(ShortVector.SPECIES_64).toString(), mLong256.toString());\n+        Asserts.assertEquals(mLong256.cast(ShortVector.SPECIES_64).toString(), mLong256.toString());\n@@ -322,1 +469,4 @@\n-    private static void testLong512ToInt256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testLong512ToInt256() {\n@@ -324,1 +474,1 @@\n-        Assert.assertEquals(mLong512.cast(IntVector.SPECIES_256).toString(), mLong512.toString());\n+        Asserts.assertEquals(mLong512.cast(IntVector.SPECIES_256).toString(), mLong512.toString());\n@@ -327,1 +477,4 @@\n-    private static void testLong512ToFloat256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testLong512ToFloat256() {\n@@ -329,1 +482,1 @@\n-        Assert.assertEquals(mLong512.cast(FloatVector.SPECIES_256).toString(), mLong512.toString());\n+        Asserts.assertEquals(mLong512.cast(FloatVector.SPECIES_256).toString(), mLong512.toString());\n@@ -332,1 +485,4 @@\n-    private static void testLong512ToShort128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testLong512ToShort128() {\n@@ -334,1 +490,1 @@\n-        Assert.assertEquals(mLong512.cast(ShortVector.SPECIES_128).toString(), mLong512.toString());\n+        Asserts.assertEquals(mLong512.cast(ShortVector.SPECIES_128).toString(), mLong512.toString());\n@@ -337,1 +493,4 @@\n-    private static void testLong512ToByte64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testLong512ToByte64() {\n@@ -339,1 +498,1 @@\n-        Assert.assertEquals(mLong512.cast(ByteVector.SPECIES_64).toString(), mLong512.toString());\n+        Asserts.assertEquals(mLong512.cast(ByteVector.SPECIES_64).toString(), mLong512.toString());\n@@ -343,1 +502,4 @@\n-    private static void testDouble128ToInt64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDouble128ToInt64() {\n@@ -345,1 +507,1 @@\n-        Assert.assertEquals(mDouble128.cast(IntVector.SPECIES_64).toString(), mDouble128.toString());\n+        Asserts.assertEquals(mDouble128.cast(IntVector.SPECIES_64).toString(), mDouble128.toString());\n@@ -348,1 +510,4 @@\n-    private static void testDouble128ToFloat64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDouble128ToFloat64() {\n@@ -350,1 +515,1 @@\n-        Assert.assertEquals(mDouble128.cast(FloatVector.SPECIES_64).toString(), mDouble128.toString());\n+        Asserts.assertEquals(mDouble128.cast(FloatVector.SPECIES_64).toString(), mDouble128.toString());\n@@ -353,1 +518,4 @@\n-    private static void testDouble256ToInt128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testDouble256ToInt128() {\n@@ -355,1 +523,1 @@\n-        Assert.assertEquals(mDouble256.cast(IntVector.SPECIES_128).toString(), mDouble256.toString());\n+        Asserts.assertEquals(mDouble256.cast(IntVector.SPECIES_128).toString(), mDouble256.toString());\n@@ -358,1 +526,4 @@\n-    private static void testDouble256ToFloat128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testDouble256ToFloat128() {\n@@ -360,1 +531,1 @@\n-        Assert.assertEquals(mDouble256.cast(FloatVector.SPECIES_128).toString(), mDouble256.toString());\n+        Asserts.assertEquals(mDouble256.cast(FloatVector.SPECIES_128).toString(), mDouble256.toString());\n@@ -363,1 +534,4 @@\n-    private static void testDouble256ToShort64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    public static void testDouble256ToShort64() {\n@@ -365,2 +539,2 @@\n-        Assert.assertEquals(mDouble256.cast(ShortVector.SPECIES_64).toString(), mDouble256.toString());\n-    };\n+        Asserts.assertEquals(mDouble256.cast(ShortVector.SPECIES_64).toString(), mDouble256.toString());\n+    }\n@@ -368,1 +542,4 @@\n-    private static void testDouble512ToInt256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testDouble512ToInt256() {\n@@ -370,1 +547,1 @@\n-        Assert.assertEquals(mDouble512.cast(IntVector.SPECIES_256).toString(), mDouble512.toString());\n+        Asserts.assertEquals(mDouble512.cast(IntVector.SPECIES_256).toString(), mDouble512.toString());\n@@ -373,1 +550,4 @@\n-    private static void testDouble512ToFloat256(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testDouble512ToFloat256() {\n@@ -375,1 +555,1 @@\n-        Assert.assertEquals(mDouble512.cast(FloatVector.SPECIES_256).toString(), mDouble512.toString());\n+        Asserts.assertEquals(mDouble512.cast(FloatVector.SPECIES_256).toString(), mDouble512.toString());\n@@ -378,1 +558,4 @@\n-    private static void testDouble512ToShort128(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testDouble512ToShort128() {\n@@ -380,1 +563,1 @@\n-        Assert.assertEquals(mDouble512.cast(ShortVector.SPECIES_128).toString(), mDouble512.toString());\n+        Asserts.assertEquals(mDouble512.cast(ShortVector.SPECIES_128).toString(), mDouble512.toString());\n@@ -383,1 +566,4 @@\n-    private static void testDouble512ToByte64(boolean[] mask_arr) {\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VECTOR_MASK_CAST, \"> 0\" }, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    public static void testDouble512ToByte64() {\n@@ -385,82 +571,5 @@\n-        Assert.assertEquals(mDouble512.cast(ByteVector.SPECIES_64).toString(), mDouble512.toString());\n-    }\n-\n-\n-    @Test\n-    public static void testMaskCast() {\n-        for (int i = 0; i < NUM_ITER; i++) {\n-            boolean[] mask = genMask();\n-            \/\/ Byte\n-            testByte64ToShort128(mask);\n-            testByte64ToInt256(mask);\n-            testByte64ToFloat256(mask);\n-            testByte64ToLong512(mask);\n-            testByte64ToDouble512(mask);\n-            testByte128ToShort256(mask);\n-            testByte128ToInt512(mask);\n-            testByte128ToFloat512(mask);\n-            testByte256ToShort512(mask);\n-\n-            \/\/ Short\n-            testShort64ToInt128(mask);\n-            testShort64ToFloat128(mask);\n-            testShort64ToLong256(mask);\n-            testShort64ToDouble256(mask);\n-            testShort128ToByte64(mask);\n-            testShort128ToInt256(mask);\n-            testShort128ToFloat256(mask);\n-            testShort128ToLong512(mask);\n-            testShort128ToDouble512(mask);\n-            testShort256ToByte128(mask);\n-            testShort256ToInt512(mask);\n-            testShort256ToFloat512(mask);\n-            testShort512ToByte256(mask);\n-\n-            \/\/ Int\n-            testInt64ToLong128(mask);\n-            testInt64ToDouble128(mask);\n-            testInt128ToShort64(mask);\n-            testInt128ToLong256(mask);\n-            testInt128ToDouble256(mask);\n-            testInt256ToShort128(mask);\n-            testInt256ToByte64(mask);\n-            testInt256ToLong512(mask);\n-            testInt256ToDouble512(mask);\n-            testInt512ToShort256(mask);\n-            testInt512ToByte128(mask);\n-\n-            \/\/ Float\n-            testFloat64ToLong128(mask);\n-            testFloat64ToDouble128(mask);\n-            testFloat128ToShort64(mask);\n-            testFloat128ToLong256(mask);\n-            testFloat128ToDouble256(mask);\n-            testFloat256ToShort128(mask);\n-            testFloat256ToByte64(mask);\n-            testFloat256ToLong512(mask);\n-            testFloat256ToDouble512(mask);\n-            testFloat512ToShort256(mask);\n-            testFloat512ToByte128(mask);\n-\n-            \/\/ Long\n-            testLong128ToInt64(mask);\n-            testLong128ToFloat64(mask);\n-            testLong256ToInt128(mask);\n-            testLong256ToFloat128(mask);\n-            testLong256ToShort64(mask);\n-            testLong512ToInt256(mask);\n-            testLong512ToFloat256(mask);\n-            testLong512ToShort128(mask);\n-            testLong512ToByte64(mask);\n-\n-            \/\/ Double\n-            testDouble128ToInt64(mask);\n-            testDouble128ToFloat64(mask);\n-            testDouble256ToInt128(mask);\n-            testDouble256ToFloat128(mask);\n-            testDouble256ToShort64(mask);\n-            testDouble512ToInt256(mask);\n-            testDouble512ToFloat256(mask);\n-            testDouble512ToShort128(mask);\n-            testDouble512ToByte64(mask);\n-        }\n+        Asserts.assertEquals(mDouble512.cast(ByteVector.SPECIES_64).toString(), mDouble512.toString());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java","additions":331,"deletions":222,"binary":false,"changes":553,"status":"modified"}]}