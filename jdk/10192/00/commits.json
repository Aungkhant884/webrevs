[{"commit":{"message":"8292898: [vectorapi] Unify vector mask cast operation"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86.ad"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"73835bee062bf4e35d5e38da0b9d5951cc716bc6"},{"commit":{"message":"8291600: [vectorapi] vector cast op check is not always needed for vector mask cast\n\nRecently we found the performance of \"FIRST_NONZERO\" for double type\nis largely worse than the other types on x86 when UseAVX=2. The main\nreason is the \"VectorCastL2X\" op is not supported by the backend when\nthe dst element type is T_DOUBLE. This makes the check of VectorCast\nop fail before intrinsifying \"VectorMask.cast()\" which is used in the\n\"FIRST_NONZERO\" java implementation (see [1]). However, the compiler\nwill not generate the VectorCast op for VectorMask.cast() if:\n\n 1) the current platform supports the predicated feature\n 2) the element size (in bytes) of the src and dst type is the same\n\nSo the check of \"VectorCast\" op is needless for such cases. Limiting\nthe specified vector cast op check to vectors can fix it.\n\nHere is the performance of \"FIRST_NONZERO\" benchmark [2] on an x86\nmachine with UseAVX=2:\n\nBenchmark                          (size) Mode Cnt Before  After   Units\nDoubleMaxVector.FIRST_NONZERO       1024  thrpt 15 49.266 2460.886 ops\/ms\nDoubleMaxVector.FIRST_NONZEROMasked 1024  thrpt 15 49.554 1892.223 ops\/ms\n\nVerified on a64fx and x86 avx-512 machines.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java#L770\n[2] https:\/\/github.com\/openjdk\/panama-vector\/blob\/vectorIntrinsics\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java#L246\n\nJDK_SCOPE: test\/jdk\/jdk\/incubator\/vector,test\/hotspot\/jtreg\/compiler\/vectorapi\n\nJira: ENTLLT-5485\nCustomizedGitHooks: yes\nChange-Id: I22bd9e678a215d5e0dca568b497bf68983e3580b"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"}],"sha":"9d741c7ed138fd05daea84655af19c01576f07e5"}]