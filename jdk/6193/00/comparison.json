{"files":[{"patch":"@@ -55,0 +55,6 @@\n+  if (addr == (address)(intptr_t)-1) {\n+    \/\/ dladdr() in macOS12\/Monterey returns success for -1, but that addr value\n+    \/\/ won't work in this function. Should have been handled by the caller.\n+    ShouldNotReachHere();\n+    return false;\n+  }\n","filename":"src\/hotspot\/os\/bsd\/decoder_machO.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -881,0 +881,1 @@\n+#if defined(__APPLE__)\n@@ -882,0 +883,1 @@\n+#endif\n@@ -890,1 +892,0 @@\n-  char localbuf[MACH_MAXSYMLEN];\n@@ -893,0 +894,10 @@\n+#if defined(__APPLE__)\n+    if (addr == (address)(intptr_t)-1) {\n+      \/\/ dladdr() in macOS12\/Monterey returns success for -1, but that addr\n+      \/\/ value should not be allowed to work to avoid confusion.\n+      buf[0] = '\\0';\n+      if (offset) *offset = -1;\n+      return false;\n+    }\n+#endif\n+\n@@ -901,0 +912,8 @@\n+\n+#if !defined(__APPLE__)\n+    \/\/ The 6-parameter Decoder::decode() function is not implemented on macOS.\n+    \/\/ The Mach-O binary format does not contain a \"list of files\" with address\n+    \/\/ ranges like ELF. That makes sense since Mach-O can contain binaries for\n+    \/\/ than one instruction set so there can be more than one address range for\n+    \/\/ each \"file\".\n+\n@@ -908,0 +927,1 @@\n+#endif\n@@ -909,0 +929,2 @@\n+#if defined(__APPLE__)\n+    char localbuf[MACH_MAXSYMLEN];\n@@ -919,0 +941,2 @@\n+#endif\n+\n@@ -933,0 +957,10 @@\n+#if defined(__APPLE__)\n+    if (addr == (address)(intptr_t)-1) {\n+      \/\/ dladdr() in macOS12\/Monterey returns success for -1, but that addr\n+      \/\/ value should not be allowed to work to avoid confusion.\n+      buf[0] = '\\0';\n+      if (offset) *offset = -1;\n+      return false;\n+    }\n+#endif\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -910,1 +910,1 @@\n-#endif \/\/ HANDLE_FUNCTION_DESCRIPTORS\n+#endif \/\/ HAVE_FUNCTION_DESCRIPTORS\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -712,5 +712,1 @@\n-#if defined(__APPLE__)  \/\/ See JDK-8273967.\n-  TEST_VM(os, DISABLED_dll_address_to_function_and_library_name) {\n-#else\n-  TEST_VM(os, dll_address_to_function_and_library_name) {\n-#endif\n+TEST_VM(os, dll_address_to_function_and_library_name) {\n@@ -729,0 +725,1 @@\n+  LOG(\"os::print_function_and_library_name(st, -1) expects FALSE.\");\n@@ -731,0 +728,1 @@\n+  LOG(\"os::print_function_and_library_name(st, NULL) expects FALSE.\");\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}