{"files":[{"patch":"@@ -159,0 +159,5 @@\n+     * @implNote\n+     * If the {@link System.Logger#getLogger(String) System.Logger.getLogger(\"java.lang.Runtime\")}\n+     * is enabled for logging level {@link System.Logger.Level#DEBUG Level.DEBUG} the stack trace\n+     * of the call to {@code Runtime.exit()} is logged.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -158,4 +158,0 @@\n-     * <p>\n-     * If the system logger {@code java.lang.Runtime} is enabled for logging level DEBUG\/FINE\n-     * the stack trace of the call to {@code Runtime.exit()} or {@code System.exit()}\n-     * is logged.\n@@ -164,9 +160,1 @@\n-        System.Logger log = null;\n-        try {\n-            \/\/ Locate the logger without holding the lock;\n-            \/\/ the setup of the logger may be a heavyweight operation\n-            log = System.getLogger(\"java.lang.Runtime\");\n-        } catch (Throwable throwable) {\n-            \/\/ Exceptions from locating the Logger are printed but do not prevent exit\n-            System.err.println(\"Runtime.exit() log finder failed with: \" + throwable.getMessage());\n-        }\n+        System.Logger log = getRuntimeExitLogger(); \/\/ Locate the logger without holding the lock;\n@@ -177,1 +165,1 @@\n-            if (log != null && log.isLoggable(System.Logger.Level.DEBUG)) {\n+            if (log != null) {\n@@ -188,0 +176,13 @@\n+    \/\/ Locate and return the logger for Shutdown.exit, if it is functional and DEBUG enabled.\n+    \/\/ Exceptions should not prevent System.exit; the exception is printed and otherwise ignored.\n+    private static System.Logger getRuntimeExitLogger() {\n+        try {\n+            System.Logger log = System.getLogger(\"java.lang.Runtime\");\n+            return (log.isLoggable(System.Logger.Level.DEBUG)) ? log : null;\n+        } catch (Throwable throwable) {\n+            \/\/ Exceptions from locating the Logger are printed but do not prevent exit\n+            System.err.println(\"Runtime.exit() log finder failed with: \" + throwable.getMessage());\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Shutdown.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"}]}