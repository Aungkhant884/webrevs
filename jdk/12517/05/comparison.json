{"files":[{"patch":"@@ -159,0 +159,5 @@\n+     * @implNote\n+     * If the {@linkplain System#getLogger(String) the system logger} for {@code java.lang.Runtime}\n+     * is enabled with logging level {@link System.Logger.Level#DEBUG Level.DEBUG} the stack trace\n+     * of the call to {@code Runtime.exit()} is logged.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+        System.Logger log = getRuntimeExitLogger(); \/\/ Locate the logger without holding the lock;\n@@ -164,0 +165,5 @@\n+            if (log != null) {\n+                Throwable throwable = new Throwable(\"Runtime.exit(\" + status + \")\");\n+                log.log(System.Logger.Level.DEBUG, \"Runtime.exit() called with status: \" + status,\n+                        throwable);\n+            }\n@@ -170,0 +176,14 @@\n+    \/* Locate and return the logger for Shutdown.exit, if it is functional and DEBUG enabled.\n+     * Exceptions should not prevent System.exit; the exception is printed and otherwise ignored.\n+     *\/\n+    private static System.Logger getRuntimeExitLogger() {\n+        try {\n+            System.Logger log = System.getLogger(\"java.lang.Runtime\");\n+            return (log.isLoggable(System.Logger.Level.DEBUG)) ? log : null;\n+        } catch (Throwable throwable) {\n+            \/\/ Exceptions from locating the Logger are printed but do not prevent exit\n+            System.err.println(\"Runtime.exit() log finder failed with: \" + throwable.getMessage());\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Shutdown.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1905,0 +1905,3 @@\n+     * @implNote\n+     * The initiation of the shutdown sequence is logged by {@link Runtime#exit(int)}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.Runtime to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = FINE\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-FINE.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#  \tEnable logging java.lang.Runtime to the console\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = INFO\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-INFO.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @summary verify logging of call to System.exit or Runtime.exit.\n+ * @run junit\/othervm RuntimeExitLogTest\n+ *\/\n+\n+public class RuntimeExitLogTest {\n+\n+    private static final String TEST_JDK = System.getProperty(\"test.jdk\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    \/**\n+     * Call System.exit() with the parameter (or zero if not supplied).\n+     * @param args zero or 1 argument, an exit status\n+     *\/\n+    public static void main(String[] args) throws InterruptedException {\n+        int status = args.length > 0 ? Integer.parseInt(args[0]) : 0;\n+        System.exit(status);\n+    }\n+\n+    \/**\n+     * Test various log level settings, and none.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> logParamProvider() {\n+        return Stream.of(\n+                \/\/ Logging enabled with level DEBUG\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 1, true),\n+                \/\/ Logging disabled due to level\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-INFO.properties\").toString()), 2, false),\n+                \/\/ Console logger\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=DEBUG\"), 3, true),\n+                \/\/ Console logger\n+                Arguments.of(List.of(), 4, false)\n+        );\n+    }\n+\n+    \/**\n+     * Check that the logger output of a launched process contains the expected message.\n+     * @param logProps The name of the log.properties file to set on the command line\n+     * @param status the expected exit status of the process\n+     * @param shouldLog true if the log should contain the message expected from Runtime.exit(status)\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"logParamProvider\")\n+    public void checkLogger(List<String> logProps, int status, boolean shouldLog) {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.redirectErrorStream(true);\n+\n+        List<String> cmd = pb.command();\n+        cmd.add(Path.of(TEST_JDK,\"bin\", \"java\").toString());\n+        cmd.addAll(logProps);\n+        cmd.add(this.getClass().getName());\n+        cmd.add(Integer.toString(status));\n+\n+        try {\n+            Process process = pb.start();\n+            try (BufferedReader reader = process.inputReader()) {\n+                List<String> lines = reader.lines().toList();\n+                final String expected = \"Runtime.exit() called with status: \" + status;\n+                Optional<String> found = lines.stream().filter(s -> s.contains(expected)).findFirst();\n+                if (found.isPresent() != shouldLog) {\n+                    System.err.println(\"---- Process output begin\");\n+                    lines.forEach(l -> System.err.println(l));\n+                    System.err.println(\"---- Process output end\");\n+                    fail(\"Unexpected log contents\");\n+                }\n+            }\n+            int result = process.waitFor();\n+            assertEquals(status, result, \"Exit status\");\n+        } catch (IOException | InterruptedException ex) {\n+            fail(ex);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/RuntimeExitLogTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}