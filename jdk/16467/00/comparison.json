{"files":[{"patch":"@@ -218,3 +218,6 @@\n-        context.getPainter().paintProgressBarBackground(context,\n-                          g, 0, 0, c.getWidth(), c.getHeight(),\n-                          progressBar.getOrientation());\n+\n+        if (((JProgressBar) c).isBorderPainted()) {\n+            context.getPainter().paintProgressBarBackground(context,\n+                    g, 0, 0, c.getWidth(), c.getHeight(),\n+                    progressBar.getOrientation());\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthProgressBarUI.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8224261\n+ * @key headful\n+ * @summary Verifies if JProgressBar border is painted even though border\n+ *          painting is set to false\n+ * @run main TestProgressBarBorder\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JProgressBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class TestProgressBarBorder {\n+\n+    private static JFrame frame;\n+    private static JProgressBar progressBar;\n+    private static volatile Point pt;\n+    private static volatile boolean passed;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (laf.getName().contains(\"Nimbus\") || laf.getName().contains(\"GTK\")) {\n+                System.out.println(\"Testing LAF: \" + laf.getName());\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            } else {\n+                continue;\n+            }\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    createAndShowUI();\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(1000);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    pt = progressBar.getLocationOnScreen();\n+                });\n+\n+                BufferedImage borderPaintedImg =\n+                        robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                                progressBar.getWidth(), progressBar.getHeight()));\n+\n+                progressBar.setBorderPainted(false);\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                BufferedImage borderNotPaintedImg =\n+                        robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                                progressBar.getWidth(), progressBar.getHeight()));\n+\n+                robot.delay(500);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    passed = compareImage(borderPaintedImg, borderNotPaintedImg);\n+                });\n+\n+                if (!passed) {\n+                    ImageIO.write(borderPaintedImg, \"png\", new File(\"borderPaintedImg.png\"));\n+                    ImageIO.write(borderNotPaintedImg, \"png\", new File(\"borderNotPaintedImg.png\"));\n+                    throw new RuntimeException(\"JProgressBar border is painted although \" +\n+                            \"border painting is set to false\");\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test JProgressBar Border\");\n+        JPanel p = new JPanel(new FlowLayout());\n+        progressBar  = new JProgressBar();\n+        \/\/ set initial value\n+        progressBar.setValue(0);\n+        progressBar.setBorderPainted(true);\n+        progressBar.setStringPainted(true);\n+        p.add(progressBar);\n+        frame.add(p);\n+        frame.setSize(200, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    \/*\n+    * Compare JProgressBar border painted and border not painted image and\n+    * if both images width and height are equal but pixel's RGB values are\n+    * not equal, method returns true; false otherwise.\n+    *\/\n+\n+    private static boolean compareImage(BufferedImage img1, BufferedImage img2) {\n+        if (img1.getWidth() == img2.getWidth()\n+                && img1.getHeight() == img2.getHeight()) {\n+            for (int x = 0; x < img1.getWidth(); ++x) {\n+                for (int y = 0; y < img1.getHeight(); ++y) {\n+                    if (img1.getRGB(x, y) != img2.getRGB(x, y)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        } else {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/TestProgressBarBorder.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}