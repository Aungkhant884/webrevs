{"files":[{"patch":"@@ -1489,0 +1489,5 @@\n+        \/** the static level value in the current environment should count the number of nested static modifiers\n+         *  but this calculation doesn't consider static type declarations. Now that implicitly static\n+         *  local type declarations like records, interfaces and enums, are allowed we need to adjust the static level\n+         *\/\n+        int adjustedStaticLevel = env.info.staticLevel;\n@@ -1507,2 +1512,3 @@\n-                        \/\/ or it is a local variable but it is not declared inside of the static local type\n-                        \/\/ then error\n+                        \/* or it is a local variable but it is not declared in the same static context it is being\n+                         * referred from\n+                         *\/\n@@ -1512,3 +1518,1 @@\n-                        !isInnerClassOfMethod(sym.owner, env.tree.hasTag(CLASSDEF) ?\n-                                ((JCClassDecl)env.tree).sym :\n-                                env.enclClass.sym)))\n+                        adjustedStaticLevel > env1.info.staticLevel))\n@@ -1522,1 +1526,4 @@\n-            if ((env1.enclClass.sym.flags() & STATIC) != 0) staticOnly = true;\n+            if ((env1.enclClass.sym.flags() & STATIC) != 0) {\n+                staticOnly = true;\n+                adjustedStaticLevel++;\n+            }\n@@ -2316,1 +2323,2 @@\n-    Symbol findTypeVar(Env<AttrContext> currentEnv, Env<AttrContext> originalEnv, Name name, boolean staticOnly) {\n+    Symbol findTypeVar(Env<AttrContext> currentEnv, Env<AttrContext> originalEnv, Name name, boolean staticOnly, int adjustedStaticLevel) {\n+        \/\/ the adjusted static level is the\n@@ -2326,3 +2334,1 @@\n-                    !isInnerClassOfMethod(sym.owner, originalEnv.tree.hasTag(CLASSDEF) ?\n-                            ((JCClassDecl)originalEnv.tree).sym :\n-                            originalEnv.enclClass.sym)))) {\n+                    adjustedStaticLevel > currentEnv.info.staticLevel))) {\n@@ -2337,8 +2343,0 @@\n-    boolean isInnerClassOfMethod(Symbol msym, Symbol csym) {\n-        while (csym.owner != msym) {\n-            if (csym.isStatic()) return false;\n-            csym = csym.owner.enclClass();\n-        }\n-        return (csym.owner == msym && !csym.isStatic());\n-    }\n-\n@@ -2355,0 +2353,1 @@\n+        int adjustedStaticLevel = env.info.staticLevel;\n@@ -2358,1 +2357,1 @@\n-            final Symbol tyvar = findTypeVar(env1, env, name, staticOnly);\n+            final Symbol tyvar = findTypeVar(env1, env, name, staticOnly, adjustedStaticLevel);\n@@ -2388,1 +2387,1 @@\n-            if ((encl.sym.flags() & STATIC) != 0)\n+            if ((encl.sym.flags() & STATIC) != 0) {\n@@ -2390,0 +2389,4 @@\n+            }\n+            if ((env1.enclClass.sym.flags() & STATIC) != 0) {\n+                adjustedStaticLevel++;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -749,0 +749,5 @@\n+                record R() {\n+                    void test(U u) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n@@ -755,0 +760,7 @@\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2(U u) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -804,0 +816,5 @@\n+                interface I {\n+                    default void test(U u) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n@@ -810,0 +827,7 @@\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X { void test2(U u) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -866,0 +890,6 @@\n+                enum E {\n+                    A;\n+                    void test(U u) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n@@ -873,0 +903,8 @@\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X { void test2(U u) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -922,0 +960,5 @@\n+                static class SC {\n+                    void test(U u) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n@@ -927,0 +970,7 @@\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X { void test2(U u) {} }\n+                    }\n+                }\n@@ -968,0 +1018,24 @@\n+\n+        \/\/ but still non-static declarations can't be accessed from a static method inside a local class\n+        for (String s : List.of(\n+                \"System.out.println(localVar)\",\n+                \"System.out.println(param)\",\n+                \"System.out.println(field)\",\n+                \"T t\",\n+                \"U u\"\n+        )) {\n+            assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                    \"\"\"\n+                    class C<T> {\n+                        int field = 0;\n+                        <U> void foo(int param) {\n+                            int localVar = 1;\n+                            class Local {\n+                                static void m() {\n+                                    #S;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    \"\"\".replaceFirst(\"#S\", s));\n+        }\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"modified"}]}