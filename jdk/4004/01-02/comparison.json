{"files":[{"patch":"@@ -1506,12 +1506,3 @@\n-                   (sym.flags() & STATIC) == 0 &&\n-                    sym.kind == VAR &&\n-                        \/\/ if it is a field\n-                        (sym.owner.kind == TYP ||\n-                        \/\/ or it is a local variable but it is not declared inside of the static local type\n-                        \/\/ then error\n-                        allowRecords &&\n-                        (sym.owner.kind == MTH) &&\n-                        env1 != env &&\n-                        !isInnerClassOfMethod(sym.owner, env.tree.hasTag(CLASSDEF) ?\n-                                ((JCClassDecl)env.tree).sym :\n-                                env.enclClass.sym)))\n+                        sym.kind == VAR &&\n+                        sym.owner.kind == TYP &&\n+                        (sym.flags() & STATIC) == 0)\n@@ -2319,2 +2310,2 @@\n-    Symbol findTypeVar(Env<AttrContext> currentEnv, Env<AttrContext> originalEnv, Name name, boolean staticOnly) {\n-        for (Symbol sym : currentEnv.info.scope.getSymbolsByName(name)) {\n+    Symbol findTypeVar(Env<AttrContext> env, Name name, boolean staticOnly) {\n+        for (Symbol sym : env.info.scope.getSymbolsByName(name)) {\n@@ -2322,12 +2313,6 @@\n-                if (staticOnly &&\n-                    sym.type.hasTag(TYPEVAR) &&\n-                    ((sym.owner.kind == TYP) ||\n-                    \/\/ are we trying to access a TypeVar defined in a method from a local static type: interface, enum or record?\n-                    allowRecords &&\n-                    (sym.owner.kind == MTH &&\n-                    currentEnv != originalEnv &&\n-                        (!isInnerClassOfMethod(sym.owner, originalEnv.tree.hasTag(CLASSDEF) ?\n-                        ((JCClassDecl)originalEnv.tree).sym :\n-                        originalEnv.enclClass.sym) ||\n-                        originalEnv.info.staticLevel > currentEnv.info.staticLevel)\n-                    ))) {\n+                if (sym.type.hasTag(TYPEVAR) &&\n+                        (staticOnly || (isStatic(env) && sym.owner.kind == TYP)))\n+                    \/\/ if staticOnly is set, it means that we have recursed through a static declaration,\n+                    \/\/ so type variable symbols should not be accessible. If staticOnly is unset, but\n+                    \/\/ we are in a static declaration (field or method), we should not allow type-variables\n+                    \/\/ defined in the enclosing class to \"leak\" into this context.\n@@ -2335,1 +2320,0 @@\n-                }\n@@ -2342,8 +2326,0 @@\n-    boolean isInnerClassOfMethod(Symbol msym, Symbol csym) {\n-        while (csym.owner != msym) {\n-            if (csym.isStatic()) return false;\n-            csym = csym.owner.enclClass();\n-        }\n-        return (csym.owner == msym && !csym.isStatic());\n-    }\n-\n@@ -2361,1 +2337,0 @@\n-            if (isStatic(env1)) staticOnly = true;\n@@ -2363,1 +2338,2 @@\n-            final Symbol tyvar = findTypeVar(env1, env, name, staticOnly);\n+            final Symbol tyvar = findTypeVar(env1, name, staticOnly);\n+            if (isStatic(env1)) staticOnly = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":13,"deletions":37,"binary":false,"changes":50,"status":"modified"}]}