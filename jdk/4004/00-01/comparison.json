{"files":[{"patch":"@@ -1489,5 +1489,0 @@\n-        \/** the static level value in the current environment should count the number of nested static modifiers\n-         *  but this calculation doesn't consider static type declarations. Now that implicitly static\n-         *  local type declarations like records, interfaces and enums, are allowed we need to adjust the static level\n-         *\/\n-        int adjustedStaticLevel = env.info.staticLevel;\n@@ -1496,1 +1491,0 @@\n-            if (isStatic(env1)) staticOnly = true;\n@@ -1500,0 +1494,3 @@\n+                    if (staticOnly) {\n+                        return new StaticError(sym);\n+                    }\n@@ -1503,0 +1500,1 @@\n+            if (isStatic(env1)) staticOnly = true;\n@@ -1512,3 +1510,2 @@\n-                        \/* or it is a local variable but it is not declared in the same static context it is being\n-                         * referred from\n-                         *\/\n+                        \/\/ or it is a local variable but it is not declared inside of the static local type\n+                        \/\/ then error\n@@ -1518,1 +1515,3 @@\n-                        adjustedStaticLevel > env1.info.staticLevel))\n+                        !isInnerClassOfMethod(sym.owner, env.tree.hasTag(CLASSDEF) ?\n+                                ((JCClassDecl)env.tree).sym :\n+                                env.enclClass.sym)))\n@@ -1526,4 +1525,1 @@\n-            if ((env1.enclClass.sym.flags() & STATIC) != 0) {\n-                staticOnly = true;\n-                adjustedStaticLevel++;\n-            }\n+            if ((env1.enclClass.sym.flags() & STATIC) != 0) staticOnly = true;\n@@ -2323,2 +2319,1 @@\n-    Symbol findTypeVar(Env<AttrContext> currentEnv, Env<AttrContext> originalEnv, Name name, boolean staticOnly, int adjustedStaticLevel) {\n-        \/\/ the adjusted static level is the\n+    Symbol findTypeVar(Env<AttrContext> currentEnv, Env<AttrContext> originalEnv, Name name, boolean staticOnly) {\n@@ -2334,1 +2329,5 @@\n-                    adjustedStaticLevel > currentEnv.info.staticLevel))) {\n+                        (!isInnerClassOfMethod(sym.owner, originalEnv.tree.hasTag(CLASSDEF) ?\n+                        ((JCClassDecl)originalEnv.tree).sym :\n+                        originalEnv.enclClass.sym) ||\n+                        originalEnv.info.staticLevel > currentEnv.info.staticLevel)\n+                    ))) {\n@@ -2343,0 +2342,8 @@\n+    boolean isInnerClassOfMethod(Symbol msym, Symbol csym) {\n+        while (csym.owner != msym) {\n+            if (csym.isStatic()) return false;\n+            csym = csym.owner.enclClass();\n+        }\n+        return (csym.owner == msym && !csym.isStatic());\n+    }\n+\n@@ -2353,1 +2360,0 @@\n-        int adjustedStaticLevel = env.info.staticLevel;\n@@ -2357,1 +2363,1 @@\n-            final Symbol tyvar = findTypeVar(env1, env, name, staticOnly, adjustedStaticLevel);\n+            final Symbol tyvar = findTypeVar(env1, env, name, staticOnly);\n@@ -2387,1 +2393,1 @@\n-            if ((encl.sym.flags() & STATIC) != 0) {\n+            if ((encl.sym.flags() & STATIC) != 0)\n@@ -2389,4 +2395,0 @@\n-            }\n-            if ((env1.enclClass.sym.flags() & STATIC) != 0) {\n-                adjustedStaticLevel++;\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"}]}