[{"commit":{"message":"Remove related comments in some test files\n\nChange-Id: I5dd1c156bd80221dde53737e718da0254c5381d8"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizeURShiftSubword.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayShiftOpTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicByteOpTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicShortOpTest.java"}],"sha":"907b14cbbaa981c90e29e5b26f46394b29df5eeb"},{"commit":{"message":"Merge branch 'master' into fg8283307\n\nChange-Id: Ic4645656ea156e8cac993995a5dc675aa46cb21a"},"files":[],"sha":"d1706baf4360e786adec00dc6051334ae52cc4ab"},{"commit":{"message":"8283307: Vectorize unsigned shift right on signed subword types\n\n```\npublic short[] vectorUnsignedShiftRight(short[] shorts) {\n    short[] res = new short[SIZE];\n    for (int i = 0; i < SIZE; i++) {\n        res[i] = (short) (shorts[i] >>> 3);\n    }\n    return res;\n}\n```\nIn C2's SLP, vectorization of unsigned shift right on signed\nsubword types (byte\/short) like the case above is intentionally\ndisabled[1]. Because the vector unsigned shift on signed\nsubword types behaves differently from the Java spec. It's\nworthy to vectorize more cases in quite low cost. Also,\nunsigned shift right on signed subword is not uncommon and we\nmay find similar cases in Lucene benchmark[2].\n\nTaking unsigned right shift on short type as an example,\n\nShort:\n    | <- 16 bits  -> |  <- 16 bits ->  |\n    | 1 1 1 ... 1  1 |      data       |\n\nwhen the shift amount is a constant not greater than the number\nof sign extended bits, 16 higher bits for short type shown like\nabove, the unsigned shift on signed subword types can be\ntransformed into a signed shift and hence becomes vectorizable.\nHere is the transformation:\n\nFor T_SHORT (shift <= 16):\n  src    RShiftCntV shift          src    RShiftCntV shift\n   \\      \/                  ==>    \\       \/\n   URShiftVS                         RShiftVS\n\nThis patch does the transformation in SuperWord::implemented() and\nSuperWord::output(). It helps vectorize the short cases above. We\ncan handle unsigned right shift on byte type in a similar way. The\ngenerated assembly code for one iteration on aarch64 is like:\n```\n...\nsbfiz   x13, x10, #1, #32\nadd     x15, x11, x13\nldr     q16, [x15, #16]\nsshr    v16.8h, v16.8h, #3\nadd     x13, x17, x13\nstr     q16, [x13, #16]\n...\n```\n\nHere is the performance data for micro-benchmark before and after\nthis patch on both AArch64 and x64 machines. We can observe about\n~80% improvement with this patch.\n\nThe perf data on AArch64:\nBefore the patch:\nBenchmark        (SIZE)  (shiftCount)  Mode  Cnt    Score   Error  Units\nurShiftImmByte    1024         3       avgt    5  295.711 ± 0.117  ns\/op\nurShiftImmShort   1024         3       avgt    5  284.559 ± 0.148  ns\/op\n\nafter the patch:\nBenchmark         (SIZE) (shiftCount)  Mode  Cnt    Score   Error  Units\nurShiftImmByte     1024        3       avgt    5   45.111 ± 0.047  ns\/op\nurShiftImmShort    1024        3       avgt    5   55.294 ± 0.072  ns\/op\n\nThe perf data on X86:\nBefore the patch:\nBenchmark        (SIZE) (shiftCount)  Mode  Cnt    Score    Error  Units\nurShiftImmByte    1024        3       avgt    5  361.374 ±  4.621  ns\/op\nurShiftImmShort   1024        3       avgt    5  365.390 ±  3.595  ns\/op\n\nAfter the patch:\nBenchmark        (SIZE) (shiftCount)  Mode  Cnt    Score    Error  Units\nurShiftImmByte    1024        3       avgt    5  105.489 ±  0.488  ns\/op\nurShiftImmShort   1024        3       avgt    5   43.400 ±  0.394  ns\/op\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/002e3667443d94e2303c875daf72cf1ccbbb0099\/src\/hotspot\/share\/opto\/vectornode.cpp#L190\n[2] https:\/\/github.com\/jpountz\/decode-128-ints-benchmark\/\n\nChange-Id: I9bd0cfdfcd9c477e8905a4c877d5e7ff14e39161"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizeURShiftSubword.java"}],"sha":"a26ebe8139d605f7ceaef1e58c1446e166f379c8"}]