{"files":[{"patch":"@@ -487,1 +487,1 @@\n-        this(bytes, offset, length, lookupCharset(charsetName));\n+        this(lookupCharset(charsetName), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n@@ -520,1 +520,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -522,2 +521,11 @@\n-        Objects.requireNonNull(charset);\n-        checkBoundsOffCount(offset, length, bytes.length);\n+        this(Objects.requireNonNull(charset), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n+    }\n+\n+    \/**\n+     * This method does not do any precondition checks on its argument.\n+     * <p>\n+     * Important: parameter order of this method is deliberately changed in order to\n+     * disambiguate it against other similar methods ot this class.\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    private String(Charset charset, byte[] bytes, int offset, int length) {\n@@ -1373,1 +1381,1 @@\n-        this(bytes, 0, bytes.length, charsetName);\n+        this(lookupCharset(charsetName), bytes, 0, bytes.length);\n@@ -1397,1 +1405,1 @@\n-        this(bytes, 0, bytes.length, charset);\n+        this(Objects.requireNonNull(charset), bytes, 0, bytes.length);\n@@ -1427,1 +1435,1 @@\n-        this(bytes, offset, length, Charset.defaultCharset());\n+        this(Charset.defaultCharset(), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n@@ -1447,1 +1455,1 @@\n-        this(bytes, 0, bytes.length);\n+        this(Charset.defaultCharset(), bytes, 0, bytes.length);\n@@ -4585,0 +4593,1 @@\n+     * @return  {@code offset} if the sub-range within bounds of the range\n@@ -4589,2 +4598,2 @@\n-    static void checkBoundsOffCount(int offset, int count, int length) {\n-        Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n+    static int checkBoundsOffCount(int offset, int count, int length) {\n+        return Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-                name = new String(buf, 0, buf.length, UTF_8.INSTANCE);\n+                name = new String(buf, UTF_8.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/Manifest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        return new String(data, 0, data.length);\n+        return new String(data);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/Entity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-            String st = new String(bytes, 0, bytes.length, UTF_16LE);\n+            String st = new String(bytes, UTF_16LE);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDataTransferer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package micro.org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(5)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 10, time = 5)\n+public class StringConstructor {\n+  private byte[] array;\n+\n+  @Setup\n+  public void setup() {\n+    array = \"\".getBytes(StandardCharsets.UTF_8);\n+  }\n+\n+  @Benchmark\n+  public String newStringFromArray() {\n+    return new String(array);\n+  }\n+\n+  @Benchmark\n+  public String newStringFromArrayWithCharset() {\n+    return new String(array, StandardCharsets.UTF_8);\n+  }\n+\n+  @Benchmark\n+  public String newStringFromArrayWithCharsetName() throws Exception {\n+    return new String(array, StandardCharsets.UTF_8.name());\n+  }\n+\n+  @Benchmark\n+  public String newStringFromRangedArray() {\n+    return new String(array, 0, 0);\n+  }\n+\n+  @Benchmark\n+  public String newStringFromRangedArrayWithCharset() {\n+    return new String(array, 0, 0, StandardCharsets.UTF_8);\n+  }\n+\n+  @Benchmark\n+  public String newStringFromRangedArrayWithCharsetName() throws Exception {\n+    return new String(array, 0, 0, StandardCharsets.UTF_8.name());\n+  }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConstructor.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}