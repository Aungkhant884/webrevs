{"files":[{"patch":"@@ -31,2 +31,0 @@\n-import java.time.Instant;\n-import java.time.InstantSource;\n@@ -46,0 +44,2 @@\n+\n+import jdk.internal.net.http.common.Deadline;\n@@ -48,0 +48,1 @@\n+import jdk.internal.net.http.common.TimeLine;\n@@ -68,1 +69,1 @@\n-    private final InstantSource timeSource;\n+    private final TimeLine timeSource;\n@@ -133,1 +134,1 @@\n-    ConnectionPool(long clientId, InstantSource timeSource) {\n+    ConnectionPool(long clientId, TimeLine timeSource) {\n@@ -140,1 +141,1 @@\n-    private ConnectionPool(String tag, InstantSource timeSource) {\n+    private ConnectionPool(String tag, TimeLine timeSource) {\n@@ -196,1 +197,1 @@\n-    void returnToPool(HttpConnection conn, Instant now, long keepAlive) {\n+    void returnToPool(HttpConnection conn, Deadline now, long keepAlive) {\n@@ -306,1 +307,1 @@\n-    long purgeExpiredConnectionsAndReturnNextDeadline(Instant now) {\n+    long purgeExpiredConnectionsAndReturnNextDeadline(Deadline now) {\n@@ -366,2 +367,2 @@\n-        final Instant expiry; \/\/ absolute time in seconds of expiry time\n-        ExpiryEntry(HttpConnection connection, Instant expiry) {\n+        final Deadline expiry; \/\/ absolute time in seconds of expiry time\n+        ExpiryEntry(HttpConnection connection, Deadline expiry) {\n@@ -382,1 +383,1 @@\n-        private final InstantSource timeSource;\n+        private final TimeLine timeSource;\n@@ -385,1 +386,1 @@\n-        ExpiryList(InstantSource timeSource) {\n+        ExpiryList(TimeLine timeSource) {\n@@ -400,1 +401,1 @@\n-        Optional<Instant> nextExpiryDeadline() {\n+        Optional<Deadline> nextExpiryDeadline() {\n@@ -417,2 +418,2 @@\n-        void add(HttpConnection conn, Instant now, long keepAlive) {\n-            Instant then = now.truncatedTo(ChronoUnit.SECONDS)\n+        void add(HttpConnection conn, Deadline now, long keepAlive) {\n+            Deadline then = now.truncatedTo(ChronoUnit.SECONDS)\n@@ -460,1 +461,1 @@\n-        List<HttpConnection> purgeUntil(Instant now) {\n+        List<HttpConnection> purgeUntil(Deadline now) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ConnectionPool.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import java.time.Instant;\n@@ -90,0 +89,1 @@\n+import jdk.internal.net.http.common.Deadline;\n@@ -1749,1 +1749,1 @@\n-            Instant now = TimeSource.now();\n+            Deadline now = TimeSource.now();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.net.http.common.Deadline;\n@@ -49,1 +50,1 @@\n-    private final Instant deadline;\n+    private final Deadline deadline;\n@@ -58,1 +59,1 @@\n-    public Instant deadline() {\n+    public Deadline deadline() {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/TimeoutEvent.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.net.http.common;\n+\n+import java.time.DateTimeException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.time.temporal.Temporal;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.TemporalAmount;\n+import java.time.temporal.TemporalUnit;\n+import java.time.temporal.UnsupportedTemporalTypeException;\n+\n+\/**\n+ * A Deadline represents an instant on a {@linkplain TimeLine time line}.\n+ *\/\n+public final class Deadline implements Comparable<Deadline> {\n+\n+    public static final Deadline MIN = new Deadline(Instant.MIN);\n+    public static final Deadline MAX = new Deadline(Instant.MAX);\n+\n+    private final Instant deadline;\n+    private Deadline(Instant deadline) {\n+        this.deadline = deadline;\n+    }\n+\n+\n+    \/**\n+     * Returns a copy of this deadline with the specified duration in nanoseconds added.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param nanosToAdd  the nanoseconds to add, positive or negative\n+     * @return a {@code Deadline} based on this deadline with the specified nanoseconds added, not null\n+     * @throws DateTimeException if the result exceeds the maximum or minimum deadline\n+     * @throws ArithmeticException if numeric overflow occurs\n+     *\/\n+    public Deadline plusNanos(long nanosToAdd) {\n+        return new Deadline(deadline.plusNanos(nanosToAdd));\n+    }\n+\n+    \/**\n+     * Returns a copy of this {@code Deadline} truncated to the specified unit.\n+     * <p>\n+     * Truncating the deadline returns a copy of the original with fields\n+     * smaller than the specified unit set to zero.\n+     * The fields are calculated on the basis of using a UTC offset as seen\n+     * in {@code Instant.toString}.\n+     * For example, truncating with the {@link ChronoUnit#MINUTES MINUTES} unit will\n+     * round down to the nearest minute, setting the seconds and nanoseconds to zero.\n+     * <p>\n+     * The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n+     * that divides into the length of a standard day without remainder.\n+     * This includes all supplied time units on {@link ChronoUnit} and\n+     * {@link ChronoUnit#DAYS DAYS}. Other units throw an exception.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param unit  the unit to truncate to, not null\n+     * @return a {@code Deadline} based on this deadline with the time truncated, not null\n+     * @throws DateTimeException if the unit is invalid for truncation\n+     * @throws UnsupportedTemporalTypeException if the unit is not supported\n+     *\/\n+    public Deadline truncatedTo(ChronoUnit unit) {\n+        return of(deadline.truncatedTo(unit));\n+    }\n+\n+    \/**\n+     * Returns a copy of this deadline with the specified amount added.\n+     * <p>\n+     * This returns a {@code Deadline}, based on this one, with the amount\n+     * in terms of the unit added. If it is not possible to add the amount, because the\n+     * unit is not supported or for some other reason, an exception is thrown.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @see Instant#plus(long, TemporalUnit)\n+     *\n+     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n+     * @param unit  the unit of the amount to add, not null\n+     * @return a {@code Deadline} based on this deadline with the specified amount added, not null\n+     * @throws DateTimeException if the addition cannot be made\n+     * @throws UnsupportedTemporalTypeException if the unit is not supported\n+     * @throws ArithmeticException if numeric overflow occurs\n+     *\/\n+    public Deadline plus(long amountToAdd, TemporalUnit unit) {\n+        if (amountToAdd == 0) return this;\n+        return Deadline.of(deadline.plus(amountToAdd, unit));\n+    }\n+\n+    \/**\n+     * Returns a copy of this deadline with the specified duration in seconds added.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param secondsToAdd  the seconds to add, positive or negative\n+     * @return a {@code Deadline} based on this deadline with the specified seconds added, not null\n+     * @throws DateTimeException if the result exceeds the maximum or minimum deadline\n+     * @throws ArithmeticException if numeric overflow occurs\n+     *\/\n+    public Deadline plusSeconds(long secondsToAdd) {\n+        if (secondsToAdd == 0) return this;\n+        return Deadline.of(deadline.plusSeconds(secondsToAdd));\n+    }\n+\n+    \/**\n+     * Returns a copy of this deadline with the specified amount added.\n+     * <p>\n+     * This returns a {@code Deadline}, based on this one, with the specified amount added.\n+     * The amount is typically {@link Duration} but may be any other type implementing\n+     * the {@link TemporalAmount} interface.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param amountToAdd  the amount to add, not null\n+     * @return a {@code Deadline} based on this deadline with the addition made, not null\n+     * @throws DateTimeException if the addition cannot be made\n+     * @throws ArithmeticException if numeric overflow occurs\n+     *\/\n+    public Deadline plus(TemporalAmount amountToAdd) {\n+        return Deadline.of(deadline.plus(amountToAdd));\n+    }\n+\n+    \/**\n+     * Calculates the amount of time until another deadline in terms of the specified unit.\n+     * <p>\n+     * This calculates the amount of time between two {@code Deadline}\n+     * objects in terms of a single {@code TemporalUnit}.\n+     * The start and end points are {@code this} and the specified deadline.\n+     * The result will be negative if the end is before the start.\n+     * The calculation returns a whole number, representing the number of\n+     * complete units between the two deadlines.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param endExclusive  the end deadline, exclusive\n+     * @param unit  the unit to measure the amount in, not null\n+     * @return the amount of time between this deadline and the end deadline\n+     * @throws DateTimeException if the amount cannot be calculated\n+     * @throws UnsupportedTemporalTypeException if the unit is not supported\n+     * @throws ArithmeticException if numeric overflow occurs\n+     *\/\n+    public long until(Deadline endExclusive, TemporalUnit unit) {\n+        return deadline.until(endExclusive.deadline, unit);\n+    }\n+\n+    \/**\n+     * Checks if this deadline is after the specified deadline.\n+     * <p>\n+     * The comparison is based on the time-line position of the deadlines.\n+     *\n+     * @param otherDeadline  the other deadline to compare to, not null\n+     * @return true if this deadline is after the specified deadline\n+     * @throws NullPointerException if otherDeadline is null\n+     *\/\n+    public boolean isAfter(Deadline otherDeadline) {\n+        return compareTo(otherDeadline) > 0;\n+    }\n+\n+    \/**\n+     * Checks if this deadline is before the specified deadline.\n+     * <p>\n+     * The comparison is based on the time-line position of the deadines.\n+     *\n+     * @param otherDeadline  the other deadine to compare to, not null\n+     * @return true if this deadline is before the specified deadine\n+     * @throws NullPointerException if otherDeadline is null\n+     *\/\n+    public boolean isBefore(Deadline otherDeadline) {\n+        return compareTo(otherDeadline) < 0;\n+    }\n+\n+    @Override\n+    public int compareTo(Deadline o) {\n+        return deadline.compareTo(o.deadline);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return deadline.toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o instanceof Deadline d) {\n+            return deadline.equals(d.deadline);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return deadline.hashCode();\n+    }\n+\n+    static Deadline of(Instant instant) {\n+        return new Deadline(instant);\n+    }\n+}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Deadline.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.net.http.common;\n+\n+\/**\n+ * An alternative timeline that can deliver deadline instants.\n+ *\/\n+public interface TimeLine {\n+    \/**\n+     * {@return the current instant on this alternative timeline}\n+     *\/\n+    Deadline instant();\n+}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/TimeLine.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * An {@link InstantSource} based on {@link System#nanoTime()} for the\n+ * A {@link TimeLine} based on {@link System#nanoTime()} for the\n@@ -41,1 +41,1 @@\n-public final class TimeSource implements InstantSource {\n+public final class TimeSource implements TimeLine {\n@@ -67,1 +67,1 @@\n-        Instant instant(long nanos) {\n+        Deadline instant(long nanos) {\n@@ -71,1 +71,1 @@\n-        Instant instant(long nanos, long delay) {\n+        Deadline instant(long nanos, long delay) {\n@@ -80,1 +80,1 @@\n-            return now;\n+            return Deadline.of(now);\n@@ -94,1 +94,1 @@\n-    public Instant instant() {\n+    public Deadline instant() {\n@@ -125,1 +125,1 @@\n-    public static Instant now() {\n+    public static Deadline now() {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/TimeSource.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+import jdk.internal.net.http.common.TimeLine;\n+import jdk.internal.net.http.common.Deadline;\n@@ -99,2 +101,2 @@\n-        final InstantSource instantSource = TimeSource.source();\n-        ConnectionPool pool = new ConnectionPool(666, instantSource);\n+        final TimeLine timeLine = TimeSource.source();\n+        ConnectionPool pool = new ConnectionPool(666, timeLine);\n@@ -107,1 +109,1 @@\n-        Instant now = instantSource.instant().truncatedTo(ChronoUnit.SECONDS);\n+        Deadline now = timeLine.instant().truncatedTo(ChronoUnit.SECONDS);\n@@ -149,1 +151,1 @@\n-        Instant next = now;\n+        Deadline next = now;\n@@ -186,1 +188,1 @@\n-        Instant now = TimeSource.now().truncatedTo(ChronoUnit.SECONDS);\n+        Deadline now = TimeSource.now().truncatedTo(ChronoUnit.SECONDS);\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/ConnectionPoolTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}