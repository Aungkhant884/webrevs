{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.time.InstantSource;\n@@ -47,0 +48,1 @@\n+import jdk.internal.net.http.common.TimeSource;\n@@ -66,0 +68,1 @@\n+    private final InstantSource timeSource;\n@@ -127,1 +130,1 @@\n-        this(\"ConnectionPool(\"+clientId+\")\");\n+        this(clientId, TimeSource.source());\n@@ -130,4 +133,8 @@\n-    \/**\n-     * There should be one of these per HttpClient.\n-     *\/\n-    private ConnectionPool(String tag) {\n+    ConnectionPool(long clientId, InstantSource timeSource) {\n+        this(\"ConnectionPool(\"+clientId+\")\", Objects.requireNonNull(timeSource));\n+    }\n+\n+        \/**\n+         * There should be one of these per HttpClient.\n+         *\/\n+    private ConnectionPool(String tag, InstantSource timeSource) {\n@@ -137,1 +144,2 @@\n-        expiryList = new ExpiryList();\n+        this.timeSource = timeSource;\n+        this.expiryList = new ExpiryList(timeSource);\n@@ -184,1 +192,1 @@\n-        returnToPool(conn, Instant.now(), KEEP_ALIVE_TIMEOUT);\n+        returnToPool(conn, timeSource.instant(), KEEP_ALIVE_TIMEOUT);\n@@ -294,1 +302,1 @@\n-        return purgeExpiredConnectionsAndReturnNextDeadline(Instant.now());\n+        return purgeExpiredConnectionsAndReturnNextDeadline(timeSource.instant());\n@@ -374,0 +382,1 @@\n+        private final InstantSource timeSource;\n@@ -376,0 +385,4 @@\n+        ExpiryList(InstantSource timeSource) {\n+            this.timeSource = timeSource;\n+        }\n+\n@@ -400,1 +413,1 @@\n-            add(conn, Instant.now(), KEEP_ALIVE_TIMEOUT);\n+            add(conn, timeSource.instant(), KEEP_ALIVE_TIMEOUT);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ConnectionPool.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+import jdk.internal.net.http.common.TimeSource;\n@@ -1748,1 +1749,1 @@\n-            Instant now = Instant.now();\n+            Instant now = TimeSource.now();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.net.http.common.TimeSource;\n@@ -293,1 +294,1 @@\n-        return timer.deadline().isAfter(Instant.now());\n+        return timer.deadline().isAfter(TimeSource.now());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainHttpConnection.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import jdk.internal.net.http.common.TimeSource;\n+\n@@ -51,1 +53,1 @@\n-        deadline = Instant.now().plus(duration);\n+        deadline = TimeSource.now().plus(duration);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/TimeoutEvent.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.net.http.common;\n+\n+import java.time.Instant;\n+import java.time.InstantSource;\n+\n+\/**\n+ * An {@link InstantSource} based on {@link System#nanoTime()} for the\n+ * purpose of handling timeouts. This time source is intentionally not\n+ * based on the system clock, in order to not be sensitive to clock skews\n+ * caused by changes to the wall clock. Consequently, callers should use\n+ * instants returned by this time source solely for the purpose of\n+ * comparing them with other instants returned by this same time source.\n+ * The granularity of instants returned is identical to the granularity\n+ * of {@link System#nanoTime()}. This time source has the same property\n+ * of monotonicity than the {@link System#nanoTime()} it is based on.\n+ *\/\n+public final class TimeSource implements InstantSource {\n+\n+    private static volatile NanoSource nanoSource = new NanoSource();\n+    private static final TimeSource SOURCE = new TimeSource();\n+\n+    private NanoSource localSource = nanoSource;\n+    private TimeSource() {}\n+\n+    private static final class NanoSource {\n+        \/\/ Duration (in nanoseconds) for which the static nanoSource\n+        \/\/ instance is considered valid.\n+        \/\/ The use of Integer.MAX_VALUE is arbitrary.\n+        \/\/ Any value not too close to Long.MAX_VALUE\n+        \/\/ would do.\n+        static final int TIME_WINDOW = Integer.MAX_VALUE;\n+\n+        final Instant first;\n+        final long firstNanos;\n+        NanoSource() {\n+            this(Instant.now(), System.nanoTime());\n+        }\n+        NanoSource(Instant first, long firstNanos) {\n+            this.first = first;\n+            this.firstNanos = firstNanos;\n+        }\n+\n+        Instant instant(long nanos) {\n+            return instant(nanos, nanos - firstNanos);\n+        }\n+\n+        Instant instant(long nanos, long delay) {\n+            Instant now = first.plusNanos(delay);\n+            if (!isInWindow(delay)) {\n+                \/\/ Shifts the time reference (firstNanos) to\n+                \/\/ prevent issues that may be caused by\n+                \/\/ System.nanoTime() - firstNanos wrapping\n+                \/\/ around.\n+                nanoSource = new NanoSource(now, nanos);\n+            }\n+            return now;\n+        }\n+\n+        long delay(long nanos) {\n+            return nanos - firstNanos;\n+        }\n+\n+        boolean isInWindow(long delay) {\n+            return delay >= 0 && delay <= TIME_WINDOW;\n+        }\n+\n+    }\n+\n+    @Override\n+    public Instant instant() {\n+        long nanos = System.nanoTime();\n+        long delay = localSource.delay(nanos);\n+        \/\/ use localSource if possible to avoid a volatile read\n+        if (localSource.isInWindow(delay)) {\n+            return localSource.instant(nanos, delay);\n+        } else {\n+            \/\/ will cause the time reference to shift forward,\n+            \/\/ at the cost of a volatile write + a volatile read\n+            var instant = nanoSource.instant(nanos);\n+            \/\/ if this is reordered by the compiler it's not a big deal,\n+            \/\/ will get the new value next time around...\n+            localSource = nanoSource;\n+            return instant;\n+        }\n+    }\n+\n+    \/**\n+     * {@return the time source}\n+     *\/\n+    public static TimeSource source() {\n+        return SOURCE;\n+    }\n+\n+    \/**\n+     * {@return the current instant obtained from the time source}\n+     * This is equivalent to calling:\n+     * {@snippet\n+     *     TimeSource.source().instant();\n+     * }\n+     *\/\n+    public static Instant now() {\n+        return SOURCE.instant();\n+    }\n+}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/TimeSource.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.time.InstantSource;\n@@ -60,0 +61,1 @@\n+import jdk.internal.net.http.common.TimeSource;\n@@ -97,1 +99,2 @@\n-        ConnectionPool pool = new ConnectionPool(666);\n+        final InstantSource instantSource = TimeSource.source();\n+        ConnectionPool pool = new ConnectionPool(666, instantSource);\n@@ -104,1 +107,1 @@\n-        Instant now = Instant.now().truncatedTo(ChronoUnit.SECONDS);\n+        Instant now = instantSource.instant().truncatedTo(ChronoUnit.SECONDS);\n@@ -183,1 +186,1 @@\n-        Instant now = Instant.now().truncatedTo(ChronoUnit.SECONDS);\n+        Instant now = TimeSource.now().truncatedTo(ChronoUnit.SECONDS);\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/ConnectionPoolTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}