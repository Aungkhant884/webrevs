{"files":[{"patch":"@@ -49,0 +49,2 @@\n+static void addPreparedClass(JNIEnv *env, jclass klass);\n+\n@@ -55,0 +57,1 @@\n+    JDI_ASSERT(jvmti_env == trackingEnv);\n@@ -58,2 +61,15 @@\n-void\n-classTrack_addPreparedClass(JNIEnv *env_unused, jclass klass)\n+\/*\n+ * Invoke the callback when classes are prepared.\n+ *\/\n+void JNICALL\n+cbTrackingClassPrepare(jvmtiEnv* jvmti_env, JNIEnv *env, jthread thread, jclass klass)\n+{\n+    JDI_ASSERT(jvmti_env == trackingEnv);\n+    addPreparedClass(env, klass);\n+}\n+\n+\/*\n+ * Add a class to the prepared class hash table.\n+ *\/\n+static void\n+addPreparedClass(JNIEnv *env, jclass klass)\n@@ -62,1 +78,0 @@\n-    jvmtiEnv* env = trackingEnv;\n@@ -73,1 +88,1 @@\n-        error = JVMTI_FUNC_PTR(trackingEnv, GetTag)(env, klass, &tag);\n+        error = JVMTI_FUNC_PTR(trackingEnv, GetTag)(trackingEnv, klass, &tag);\n@@ -86,1 +101,1 @@\n-    error = JVMTI_FUNC_PTR(trackingEnv, SetTag)(env, klass, ptr_to_jlong(signature));\n+    error = JVMTI_FUNC_PTR(trackingEnv, SetTag)(trackingEnv, klass, ptr_to_jlong(signature));\n@@ -105,0 +120,2 @@\n+\n+    \/\/ Setup JVMTI callbacks\n@@ -106,0 +123,1 @@\n+    cb.ClassPrepare = cbTrackingClassPrepare;\n@@ -110,0 +128,2 @@\n+\n+    \/\/ Enable OBJECT_FREE events\n@@ -114,0 +134,7 @@\n+\n+    \/\/ Enable CLASS_PREPARE events\n+    error = JVMTI_FUNC_PTR(trackingEnv, SetEventNotificationMode)(trackingEnv, JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);\n+    if (error != JVMTI_ERROR_NONE) {\n+        return JNI_FALSE;\n+    }\n+\n@@ -146,1 +173,1 @@\n-                classTrack_addPreparedClass(env, klass);\n+                addPreparedClass(env, klass);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/classTrack.c","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -36,6 +36,0 @@\n-\/*\n- * Add a class to the prepared class hash table.\n- *\/\n-void\n-classTrack_addPreparedClass(JNIEnv *env, jclass klass);\n-\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/classTrack.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1268,1 +1268,0 @@\n-        case EI_CLASS_PREPARE:\n@@ -1329,1 +1328,0 @@\n-        case EI_CLASS_PREPARE:\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventFilter.c","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -549,5 +549,0 @@\n-        \/* We must keep track of all classes prepared to know what's unloaded *\/\n-        if (evinfo->ei == EI_CLASS_PREPARE) {\n-            classTrack_addPreparedClass(env, evinfo->clazz);\n-        }\n-\n@@ -1512,5 +1507,0 @@\n-    error = threadControl_setEventMode(JVMTI_ENABLE,\n-                                       EI_CLASS_PREPARE, NULL);\n-    if (error != JVMTI_ERROR_NONE) {\n-        EXIT_ERROR(error,\"Can't enable class prepare events\");\n-    }\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.c","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}