{"files":[{"patch":"@@ -1785,14 +1785,0 @@\n-\/\/ Indicate if the safepoint node needs the polling page as an input\n-\n-\/\/ the shared code plants the oop data at the start of the generated\n-\/\/ code for the safepoint node and that needs ot be at the load\n-\/\/ instruction itself. so we cannot plant a mov of the safepoint poll\n-\/\/ address followed by a load. setting this to true means the mov is\n-\/\/ scheduled as a prior instruction. that's better for scheduling\n-\/\/ anyway.\n-\n-bool SafePointNode::needs_polling_address_input()\n-{\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -149,6 +149,0 @@\n-\/\/ Indicate if the safepoint node needs the polling page as an input.\n-\/\/ Since ARM does not have absolute addressing, it does.\n-bool SafePointNode::needs_polling_address_input() {\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1162,8 +1162,0 @@\n-\/\/ Indicate if the safepoint node needs the polling page as an input.\n-bool SafePointNode::needs_polling_address_input() {\n-  \/\/ The address is loaded from thread by a seperate node.\n-  return true;\n-}\n-\n-\/\/=============================================================================\n-\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -674,6 +674,0 @@\n-\/\/ Indicate if the safepoint node needs the polling page as an input.\n-\/\/ Since z\/Architecture does not have absolute addressing, it does.\n-bool SafePointNode::needs_polling_address_input() {\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -487,2 +487,0 @@\n-  static  bool           needs_polling_address_input();\n-\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3704,10 +3704,0 @@\n-        if (n->is_CountedLoop() && n->as_CountedLoop()->is_strip_mined()) {\n-          \/\/ In strip-mined counted loops, the CountedLoopNode may be\n-          \/\/ used by the address polling node of the outer safepoint.\n-          \/\/ Skip this use because it's safe.\n-          Node* sfpt = n->as_CountedLoop()->outer_safepoint();\n-          Node* polladr = sfpt->in(TypeFunc::Parms+0);\n-          if (use == polladr) {\n-            continue;\n-          }\n-        }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1641,0 +1641,10 @@\n+\n+        Node* polladdr = sfpt->in(TypeFunc::Parms);\n+        if (polladdr != nullptr && polladdr->is_Load()) {\n+          \/\/ Polling load should be pinned outside inner loop.\n+          Node* new_polladdr = polladdr->clone();\n+          new_polladdr->set_req(0, iffalse);\n+          _igvn.register_new_node_with_optimizer(new_polladdr, polladdr);\n+          set_ctrl(new_polladdr, iffalse);\n+          sfpt->set_req(TypeFunc::Parms, new_polladdr);\n+        }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}