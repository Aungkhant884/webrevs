{"files":[{"patch":"@@ -36,1 +36,1 @@\n-    MemorySegment segment;\n+    private MemorySegment segment;\n@@ -67,2 +67,4 @@\n-    private MemorySegment newSegment(long size, long align) {\n-        return MemorySegment.allocateNative(size, align, scope);\n+    private MemorySegment newSegment(long bytesSize, long bytesAlignment) {\n+        size += Utils.alignUp(bytesSize, bytesAlignment);\n+        checkSize();\n+        return MemorySegment.allocateNative(bytesSize, bytesAlignment, scope);\n@@ -71,2 +73,1 @@\n-    @Override\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+    private void checkSize() {\n@@ -76,8 +77,14 @@\n-        long prevSp = sp;\n-        long allocatedSize = 0L;\n-        try {\n-            \/\/ try to slice from current segment first...\n-            MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n-            if (slice != null) {\n-                allocatedSize = sp - prevSp;\n-                return slice;\n+    }\n+\n+    @Override\n+    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+        checkSize();\n+        \/\/ try to slice from current segment first...\n+        MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n+        if (slice != null) {\n+            return slice;\n+        } else {\n+            long maxPossibleAllocationSize = bytesSize + bytesAlignment - 1;\n+            if (maxPossibleAllocationSize > blockSize) {\n+                \/\/ too big\n+                return newSegment(bytesSize, bytesAlignment);\n@@ -85,19 +92,5 @@\n-                long maxPossibleAllocationSize = bytesSize + bytesAlignment - 1;\n-                if (maxPossibleAllocationSize > blockSize) {\n-                    \/\/ too big\n-                    allocatedSize = Utils.alignUp(bytesSize, bytesAlignment);\n-                    return newSegment(bytesSize, bytesAlignment);\n-                } else {\n-                    \/\/ allocate a new segment and slice from there\n-                    allocatedSize += segment.byteSize() - sp;\n-                    sp = 0L;\n-                    segment = newSegment(blockSize, 1L);\n-                    slice = trySlice(bytesSize, bytesAlignment);\n-                    allocatedSize += sp;\n-                    return slice;\n-                }\n-            }\n-        } finally {\n-            size += allocatedSize;\n-            if (size > arenaSize) {\n-                throw new OutOfMemoryError();\n+                \/\/ allocate a new segment and slice from there\n+                sp = 0L;\n+                segment = newSegment(blockSize, 1L);\n+                slice = trySlice(bytesSize, bytesAlignment);\n+                return slice;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":25,"deletions":32,"binary":false,"changes":57,"status":"modified"}]}