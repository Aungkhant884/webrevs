{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -58,1 +59,3 @@\n-     * (that is, libraries loaded using {@link System#loadLibrary} or {@link System#load}).\n+     * (that is, libraries loaded using {@link System#loadLibrary} or {@link System#load}). The returned lookup\n+     * returns native symbols backed by a <em>loader scope<\/em>, a non-closeable, shared scope which keeps the\n+     * caller's classloader <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">reachable<\/a>.\n@@ -75,0 +78,1 @@\n+        ResourceScope loaderScope = ResourceScopeImpl.heapScope(loader);\n@@ -79,1 +83,1 @@\n-            return addr == MemoryAddress.NULL? Optional.empty() : Optional.of(NativeSymbol.ofAddress(name, addr, ResourceScope.globalScope()));\n+            return addr == MemoryAddress.NULL? Optional.empty() : Optional.of(NativeSymbol.ofAddress(name, addr, loaderScope));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SymbolLookup.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -191,1 +191,3 @@\n-        public GlobalScopeImpl() {\n+        final Object ref;\n+\n+        public GlobalScopeImpl(Object ref) {\n@@ -193,0 +195,1 @@\n+            this.ref = ref;\n@@ -218,1 +221,5 @@\n-    public static final ResourceScopeImpl GLOBAL = new GlobalScopeImpl();\n+    public static final ResourceScopeImpl GLOBAL = new GlobalScopeImpl(null);\n+\n+    public static ResourceScopeImpl heapScope(Object ref) {\n+        return new GlobalScopeImpl(ref);\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @compile --add-modules jdk.incubator.foreign lookup\/Lookup.java\n+ * @compile --add-modules jdk.incubator.foreign invoker\/Invoker.java\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED TestLoaderLookup\n+ *\/\n+\n+import java.lang.reflect.*;\n+import jdk.incubator.foreign.*;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Paths;\n+\n+public class TestLoaderLookup {\n+    public static void main(String[] args) throws ReflectiveOperationException {\n+        ClassLoader loader1 = newClassLoader(\"lookup\");\n+        Class<?> lookup = loader1.loadClass(\"lookup.Lookup\");\n+        Method fooSymbol = lookup.getDeclaredMethod(\"fooSymbol\");\n+        NativeSymbol foo = (NativeSymbol)fooSymbol.invoke(null);\n+\n+        ClassLoader loader2 = newClassLoader(\"invoker\");\n+        Class<?> invoker = loader2.loadClass(\"invoker.Invoker\");\n+        Method invoke = invoker.getDeclaredMethod(\"invoke\", NativeSymbol.class);\n+        invoke.invoke(null, foo);\n+\n+        loader1 = null;\n+        lookup = null;\n+        fooSymbol = null;\n+        \/\/ Make sure that the loader is kept reachable\n+        for (int i = 0 ; i < 1000 ; i++) {\n+            invoke.invoke(null, foo); \/\/ might crash if loader1 is GC'ed\n+            System.gc();\n+        }\n+    }\n+\n+    public static ClassLoader newClassLoader(String path) {\n+        try {\n+            return new URLClassLoader(new URL[] {\n+                    Paths.get(System.getProperty(\"test.classes\", path)).toUri().toURL(),\n+            }, null);\n+        } catch (MalformedURLException e){\n+            throw new RuntimeException(\"Unexpected URL conversion failure\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestLoaderLookup.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package invoker;\n+\n+import jdk.incubator.foreign.*;\n+\n+public class Invoker {\n+    public static void invoke(NativeSymbol symbol) throws Throwable {\n+        var linker = CLinker.systemCLinker();\n+        var handle = linker.downcallHandle(symbol, FunctionDescriptor.ofVoid());\n+        handle.invokeExact();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/invoker\/Invoker.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package lookup;\n+\n+import jdk.incubator.foreign.*;\n+\n+public class Lookup {\n+    static {\n+        System.loadLibrary(\"Foo\");\n+    }\n+\n+    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+\n+    public static NativeSymbol fooSymbol() {\n+        return lookup.lookup(\"foo\").get();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/lookup\/Lookup.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT void foo(void) {\n+    \/\/ do nothing\n+}\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/lookup\/libFoo.c","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}