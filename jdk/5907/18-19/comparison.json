{"files":[{"patch":"@@ -105,1 +105,1 @@\n- * {@link MemoryAddress#ofLong(long)} and {@link MemorySegment#ofAddressNative(MemoryAddress, long, ResourceScope)}.\n+ * {@link MemoryAddress#ofLong(long)} and {@link MemorySegment#ofAddress(MemoryAddress, long, ResourceScope)}.\n@@ -110,1 +110,1 @@\n- * full spatial, temporal and confinement bounds. To do this, clients can {@link #ofAddressNative(MemoryAddress, long, ResourceScope) obtain}\n+ * full spatial, temporal and confinement bounds. To do this, clients can {@link #ofAddress(MemoryAddress, long, ResourceScope) obtain}\n@@ -787,1 +787,1 @@\n-    static MemorySegment ofAddressNative(MemoryAddress address, long bytesSize, ResourceScope scope) {\n+    static MemorySegment ofAddress(MemoryAddress address, long bytesSize, ResourceScope scope) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n- * {@linkplain jdk.incubator.foreign.MemorySegment#ofAddressNative(jdk.incubator.foreign.MemoryAddress, long, jdk.incubator.foreign.ResourceScope) create}\n+ * {@linkplain jdk.incubator.foreign.MemorySegment#ofAddress(jdk.incubator.foreign.MemoryAddress, long, jdk.incubator.foreign.ResourceScope) create}\n@@ -166,1 +166,1 @@\n-MemorySegment segment = MemorySegment.ofAddressNative(addr, 4, scope); \/\/ segment is 4 bytes long\n+MemorySegment segment = MemorySegment.ofAddress(addr, 4, scope); \/\/ segment is 4 bytes long\n@@ -221,1 +221,1 @@\n- * the restricted method {@link MemorySegment#ofAddressNative(MemoryAddress, long, ResourceScope)}\n+ * the restricted method {@link MemorySegment#ofAddress(MemoryAddress, long, ResourceScope)}\n@@ -225,1 +225,1 @@\n- * For instance, in the case of {@link MemorySegment#ofAddressNative(MemoryAddress, long, ResourceScope)},\n+ * For instance, in the case of {@link MemorySegment#ofAddress(MemoryAddress, long, ResourceScope)},\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            MemorySegment funcs = MemorySegment.ofAddressNative(fallbackLibLookup.lookup(\"funcs\").orElseThrow().address(),\n+            MemorySegment funcs = MemorySegment.ofAddress(fallbackLibLookup.lookup(\"funcs\").orElseThrow().address(),\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.ref.Cleaner;\n@@ -115,1 +114,1 @@\n-        MemorySegment gpRegsArea = MemorySegment.ofAddressNative(grTop(segment).addOffset(-MAX_GP_OFFSET),\n+        MemorySegment gpRegsArea = MemorySegment.ofAddress(grTop(segment).addOffset(-MAX_GP_OFFSET),\n@@ -118,1 +117,1 @@\n-        MemorySegment fpRegsArea = MemorySegment.ofAddressNative(vrTop(segment).addOffset(-MAX_FP_OFFSET),\n+        MemorySegment fpRegsArea = MemorySegment.ofAddress(vrTop(segment).addOffset(-MAX_FP_OFFSET),\n@@ -127,1 +126,1 @@\n-        MemorySegment ms = MemorySegment.ofAddressNative(MemoryAddress.ofLong(ptr),\n+        MemorySegment ms = MemorySegment.ofAddress(MemoryAddress.ofLong(ptr),\n@@ -250,1 +249,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddressNative(stackPtr(), layout.byteSize(), scope());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), scope());\n@@ -258,1 +257,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddressNative(stackPtr(), layout.byteSize(), scope());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), scope());\n@@ -300,1 +299,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddressNative(ptr, layout.byteSize(), scope());\n+                    MemorySegment slice = MemorySegment.ofAddress(ptr, layout.byteSize(), scope());\n@@ -346,1 +345,1 @@\n-        return readFromSegment(MemorySegment.ofAddressNative(ma, LAYOUT.byteSize(), scope));\n+        return readFromSegment(MemorySegment.ofAddress(ma, LAYOUT.byteSize(), scope));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                    MemorySegment struct = MemorySegment.ofAddressNative(structAddr, layout.byteSize(), scope());\n+                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), scope());\n@@ -142,1 +142,1 @@\n-        MemorySegment segment = MemorySegment.ofAddressNative(addr, Long.MAX_VALUE, scope);\n+        MemorySegment segment = MemorySegment.ofAddress(addr, Long.MAX_VALUE, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.ref.Cleaner;\n@@ -131,1 +130,1 @@\n-        MemorySegment base = MemorySegment.ofAddressNative(MemoryAddress.ofLong(ptr),\n+        MemorySegment base = MemorySegment.ofAddress(MemoryAddress.ofLong(ptr),\n@@ -173,1 +172,1 @@\n-        return MemorySegment.ofAddressNative(((MemoryAddress)VH_reg_save_area.get(segment)),\n+        return MemorySegment.ofAddress(((MemoryAddress)VH_reg_save_area.get(segment)),\n@@ -225,1 +224,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddressNative(stackPtr(), layout.byteSize(), scope());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), scope());\n@@ -234,1 +233,1 @@\n-                        MemorySegment slice = MemorySegment.ofAddressNative(stackPtr(), layout.byteSize(), localScope);\n+                        MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), localScope);\n@@ -299,1 +298,1 @@\n-        return readFromSegment(MemorySegment.ofAddressNative(ma, LAYOUT.byteSize(), scope));\n+        return readFromSegment(MemorySegment.ofAddress(ma, LAYOUT.byteSize(), scope));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                    MemorySegment struct = MemorySegment.ofAddressNative(structAddr, layout.byteSize(), scope());\n+                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), scope());\n@@ -141,1 +141,1 @@\n-        MemorySegment segment = MemorySegment.ofAddressNative(addr, Long.MAX_VALUE, scope);\n+        MemorySegment segment = MemorySegment.ofAddress(addr, Long.MAX_VALUE, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-                this.base = MemorySegment.ofAddressNative(addr, SIZE, ResourceScope.globalScope());\n+                this.base = MemorySegment.ofAddress(addr, SIZE, ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-        MemorySegment segment = MemorySegment.ofAddressNative(MemoryAddress.NULL, seq.byteSize(), ResourceScope.globalScope());\n+        MemorySegment segment = MemorySegment.ofAddress(MemoryAddress.NULL, seq.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,1 +491,1 @@\n-        MemorySegment segment = MemorySegment.ofAddressNative(MemoryAddress.NULL, Integer.MAX_VALUE + 10L, ResourceScope.newImplicitScope());\n+        MemorySegment segment = MemorySegment.ofAddress(MemoryAddress.NULL, Integer.MAX_VALUE + 10L, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        return MemorySegment.ofAddressNative(addr, numElements * layout.byteSize(), ResourceScope.globalScope());\n+        return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-            MemorySegment mallocSegment = MemorySegment.ofAddressNative(addr, 12, scope);\n+            MemorySegment mallocSegment = MemorySegment.ofAddress(addr, 12, scope);\n@@ -184,1 +184,1 @@\n-            mallocSegment = MemorySegment.ofAddressNative(addr, 12, scope);\n+            mallocSegment = MemorySegment.ofAddress(addr, 12, scope);\n@@ -203,1 +203,1 @@\n-            MemorySegment.ofAddressNative(segment.address(), 0, ResourceScope.globalScope());\n+            MemorySegment.ofAddress(segment.address(), 0, ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        Method method = MemorySegment.class.getDeclaredMethod(\"ofAddressNative\", MemoryAddress.class, long.class, ResourceScope.class);\n+        Method method = MemorySegment.class.getDeclaredMethod(\"ofAddress\", MemoryAddress.class, long.class, ResourceScope.class);\n@@ -66,1 +66,1 @@\n-        var mh = MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddressNative\",\n+        var mh = MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n@@ -73,1 +73,1 @@\n-        MemorySegment.ofAddressNative(MemoryAddress.NULL, 4000, ResourceScope.globalScope());\n+        MemorySegment.ofAddress(MemoryAddress.NULL, 4000, ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-            UNSAFE(scope -> MemorySegment.ofAddressNative(MemoryAddress.NULL, 10, scope));\n+            UNSAFE(scope -> MemorySegment.ofAddress(MemoryAddress.NULL, 10, scope));\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-            MemorySegment sharedSegment = MemorySegment.ofAddressNative(s.address(), s.byteSize(), scope);\n+            MemorySegment sharedSegment = MemorySegment.ofAddress(s.address(), s.byteSize(), scope);\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -65,1 +64,1 @@\n-        MemorySegment segment = MemorySegment.ofAddressNative(LOOKUP.lookup(\"c\").get().address(), ValueLayout.JAVA_INT.byteSize(), ResourceScope.globalScope());\n+        MemorySegment segment = MemorySegment.ofAddress(LOOKUP.lookup(\"c\").get().address(), ValueLayout.JAVA_INT.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestSymbolLookup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                    { MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddressNative\",\n+                    { MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n@@ -63,1 +63,1 @@\n-                            \"MemorySegment::ofAddressNative\" },\n+                            \"MemorySegment::ofAddress\" },\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        MemorySegment seg = MemorySegment.ofAddressNative(ma, 4L, ResourceScope.newImplicitScope());\n+        MemorySegment seg = MemorySegment.ofAddress(ma, 4L, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/malloc\/TestMixedMallocFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-                    MemorySegment ms = MemorySegment.ofAddressNative(intPtr, C_INT.byteSize(), ResourceScope.globalScope());\n+                    MemorySegment ms = MemorySegment.ofAddress(intPtr, C_INT.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        MemorySegment str = MemorySegment.ofAddressNative(address, len + 1, ResourceScope.globalScope());\n+        MemorySegment str = MemorySegment.ofAddress(address, len + 1, ResourceScope.globalScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-            this.inputSegment = MemorySegment.ofAddressNative(MemoryAddress.ofLong(inputAddress), 8*SIZE, ResourceScope.globalScope());\n-            this.outputSegment = MemorySegment.ofAddressNative(MemoryAddress.ofLong(outputAddress), 8*SIZE, ResourceScope.globalScope());\n+            this.inputSegment = MemorySegment.ofAddress(MemoryAddress.ofLong(inputAddress), 8*SIZE, ResourceScope.globalScope());\n+            this.outputSegment = MemorySegment.ofAddress(MemoryAddress.ofLong(outputAddress), 8*SIZE, ResourceScope.globalScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/UnrolledAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -243,2 +243,2 @@\n-      final var srcBufferSegmentConfined = MemorySegment.ofAddressNative(srcAddress, size, scope).asByteBuffer();\n-      final var dstBufferSegmentConfined = MemorySegment.ofAddressNative(dstAddress, size, scope).asByteBuffer();\n+      final var srcBufferSegmentConfined = MemorySegment.ofAddress(srcAddress, size, scope).asByteBuffer();\n+      final var dstBufferSegmentConfined = MemorySegment.ofAddress(dstAddress, size, scope).asByteBuffer();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -213,2 +213,2 @@\n-      final var srcBufferSegmentConfined = MemorySegment.ofAddressNative(srcAddress, size, scope).asByteBuffer();\n-      final var dstBufferSegmentConfined = MemorySegment.ofAddressNative(dstAddress, size, scope).asByteBuffer();\n+      final var srcBufferSegmentConfined = MemorySegment.ofAddress(srcAddress, size, scope).asByteBuffer();\n+      final var dstBufferSegmentConfined = MemorySegment.ofAddress(dstAddress, size, scope).asByteBuffer();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShort.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}