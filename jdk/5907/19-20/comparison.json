{"files":[{"patch":"@@ -65,1 +65,1 @@\n- *         <li>if {@code L} occurs in a parameter position and {@code E} is {@code NativeAddress.class},\n+ *         <li>if {@code L} occurs in a parameter position and {@code E} is {@code MemoryAddress.class},\n@@ -133,2 +133,4 @@\n- * Upcall stubs are generally safer to work with, as the linker runtime can validate the type of the target method\n- * handle against the provided function descriptor and report an error if any mismatch is detected. If the target method\n+ * Upcall stubs are safer to work with, as the linker runtime can validate the type of the target method\n+ * handle against the provided function descriptor and report an error if any mismatch is detected. That said, JVM\n+ * crashes might still occur if the native code casts the function pointer associated with an upcall stub to a type\n+ * that is incompatible with the provided function descriptor. Moreover, if the target method\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}