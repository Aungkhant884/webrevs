{"files":[{"patch":"@@ -73,0 +73,37 @@\n+    @Test\n+    public void testClosedStructAddr_6() throws Throwable {\n+        MethodHandle handle = CLinker.systemCLinker().downcallHandle(\n+                LOOKUP.lookup(\"addr_func_6\").get(),\n+                FunctionDescriptor.ofVoid(C_POINTER, C_POINTER, C_POINTER, C_POINTER, C_POINTER, C_POINTER));\n+        for (int i = 0 ; i < 6 ; i++) {\n+            MemorySegment[] segments = new MemorySegment[]{\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope()),\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope()),\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope()),\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope()),\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope()),\n+                    MemorySegment.allocateNative(POINT, ResourceScope.newImplicitScope())\n+            };\n+            \/\/ check liveness\n+            segments[i].scope().close();\n+            for (int j = 0 ; j < 6 ; j++) {\n+                if (i == j) {\n+                    assertFalse(segments[j].scope().isAlive());\n+                } else {\n+                    assertTrue(segments[j].scope().isAlive());\n+                }\n+            }\n+            try {\n+                handle.invokeWithArguments(segments);\n+                fail();\n+            } catch (IllegalStateException ex) {\n+                assertTrue(ex.getMessage().contains(\"Already closed\"));\n+            }\n+            for (int j = 0 ; j < 6 ; j++) {\n+                if (i != j) {\n+                    segments[j].scope().close(); \/\/ should succeed!\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+EXPORT void addr_func_6(struct Point* p1, struct Point* p2, struct Point* p3, struct Point* p4, struct Point* p5, struct Point* p6) { }\n+\n","filename":"test\/jdk\/java\/foreign\/libSafeAccess.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}