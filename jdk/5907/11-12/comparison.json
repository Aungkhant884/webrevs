{"files":[{"patch":"@@ -31,2 +31,0 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1583,5 +1583,0 @@\n-            @Override\n-            public void ensureCustomized(MethodHandle mh) {\n-                mh.customize();\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -139,7 +139,0 @@\n-    \/**\n-     * Ensure given method handle is customized\n-     *\n-     * @param mh the method handle\n-     *\/\n-    void ensureCustomized(MethodHandle mh);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-     * @return a Java UTF-8 string containing all the bytes read from the given starting address ({@code toRowLongValue() + offset})\n+     * @return a Java string constructed from the bytes read from the given starting address ({@code toRowLongValue() + offset})\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-     * Performs an element-wise bulk copy from given source segment to this segment. More specifically, the bytes at\n+     * Performs a bulk copy from given source segment to this segment. More specifically, the bytes at\n@@ -397,4 +397,0 @@\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source segment size is not\n-     * a multiple of the source element layout size, if the source segment is incompatible with the alignment constraints\n-     * in the source element layout, or if this segment is incompatible with the alignment constraints\n-     * in the destination element layout.\n@@ -633,1 +629,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -635,1 +631,1 @@\n-     * @return a Java UTF-8 string containing all the bytes read from the given starting address up to (but not including)\n+     * @return a Java string constructed from the bytes read from the given starting address up to (but not including)\n@@ -652,1 +648,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -762,1 +758,1 @@\n-     * Creates a new native memory segment with given size and resource scope, and whose base address is this address.\n+     * Creates a new native memory segment with given size and resource scope, and whose base address is the given address.\n@@ -769,1 +765,1 @@\n-     * Clients should ensure that the address and bounds refers to a valid region of memory that is accessible for reading and,\n+     * Clients should ensure that the address and bounds refer to a valid region of memory that is accessible for reading and,\n@@ -1035,1 +1031,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1052,1 +1048,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1068,1 +1064,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1085,1 +1081,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1087,1 +1083,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the boolean value to be written.\n@@ -1101,1 +1097,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1118,1 +1114,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1120,1 +1116,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the char value to be written.\n@@ -1134,1 +1130,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1151,1 +1147,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1153,1 +1149,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the short value to be written.\n@@ -1167,1 +1163,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1184,1 +1180,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1186,1 +1182,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the int value to be written.\n@@ -1200,1 +1196,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1217,1 +1213,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1219,1 +1215,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the float value to be written.\n@@ -1233,1 +1229,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1250,1 +1246,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1252,1 +1248,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the long value to be written.\n@@ -1266,1 +1262,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1283,1 +1279,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1285,1 +1281,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the double value to be written.\n@@ -1299,1 +1295,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1316,1 +1312,1 @@\n-     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param offset offset in bytes (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1318,1 +1314,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the address value to be written.\n@@ -1332,1 +1328,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1349,1 +1345,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1351,1 +1347,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the char value to be written.\n@@ -1365,1 +1361,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1382,1 +1378,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1384,1 +1380,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the short value to be written.\n@@ -1398,1 +1394,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1415,1 +1411,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1417,1 +1413,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the int value to be written.\n@@ -1431,1 +1427,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1448,1 +1444,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1450,1 +1446,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the float value to be written.\n@@ -1464,1 +1460,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1481,1 +1477,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1483,1 +1479,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the long value to be written.\n@@ -1497,1 +1493,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1514,1 +1510,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1516,1 +1512,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the double value to be written.\n@@ -1530,1 +1526,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1547,1 +1543,1 @@\n-     * @param index index (relative to this segment). For instance, if this segment is a {@link #isNative()} segment,\n+     * @param index index (relative to this segment). For instance, if this segment is a {@linkplain #isNative() native} segment,\n@@ -1549,1 +1545,1 @@\n-     * @param value the byte value to be written.\n+     * @param value the address value to be written.\n@@ -1563,1 +1559,1 @@\n-     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n+     * Supported array types are {@code byte[]}, {@code char[]}, {@code short[]}, {@code int[]}, {@code float[]}, {@code long[]} and {@code double[]}.\n@@ -1604,1 +1600,1 @@\n-     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n+     * Supported array types are {@code byte[]}, {@code char[]}, {@code short[]}, {@code int[]}, {@code float[]}, {@code long[]} and {@code double[]}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":55,"deletions":59,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-        return ResourceScopeImpl.createConfined( Thread.currentThread(), null);\n+        return ResourceScopeImpl.createConfined(Thread.currentThread(), null);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-     * with the same scope as this variable argument list. using the segment provided allocator. Copying is useful to\n+     * with the same scope as this variable argument list. Copying is useful to\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,2 @@\n+    private final static int ADDRESS_SIZE_BITS = Unsafe.ADDRESS_SIZE * 8;\n+\n@@ -172,3 +174,2 @@\n-        if (carrier == void.class) return;\n-        if (carrier == MemoryAddress.class && size != (Unsafe.ADDRESS_SIZE * 8)) {\n-            throw new IllegalArgumentException(\"Address size mismatch: \" + (Unsafe.ADDRESS_SIZE * 8) + \" != \" + size);\n+        if (carrier == MemoryAddress.class && size != ADDRESS_SIZE_BITS) {\n+            throw new IllegalArgumentException(\"Address size mismatch: \" + ADDRESS_SIZE_BITS + \" != \" + size);\n@@ -176,3 +177,5 @@\n-        if (carrier.isPrimitive() && Wrapper.forPrimitiveType(carrier).bitWidth() != size &&\n-                carrier != boolean.class && size != 8) {\n-            throw new IllegalArgumentException(\"Carrier size mismatch: \" + carrier.getName() + \" != \" + size);\n+        if (carrier.isPrimitive()) {\n+            int expectedSize =  carrier == boolean.class ? 8 : Wrapper.forPrimitiveType(carrier).bitWidth();\n+            if (size != expectedSize) {\n+                throw new IllegalArgumentException(\"Carrier size mismatch: \" + carrier.getName() + \" != \" + size);\n+            }\n@@ -183,2 +186,1 @@\n-        return carrier == void.class\n-                || carrier == boolean.class\n+        return carrier == boolean.class\n@@ -484,1 +486,1 @@\n-            super(MemoryAddress.class, order, Unsafe.ADDRESS_SIZE * 8);\n+            super(MemoryAddress.class, order, ADDRESS_SIZE_BITS);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,5 +38,5 @@\n-    long sp = 0L;\n-    long size = 0;\n-    final long blockSize;\n-    final long arenaSize;\n-    final ResourceScope scope;\n+    private long sp = 0L;\n+    private long size = 0;\n+    private final long blockSize;\n+    private final long arenaSize;\n+    private final ResourceScope scope;\n@@ -73,0 +73,3 @@\n+        if (size > arenaSize) {\n+            throw new OutOfMemoryError();\n+        }\n@@ -86,3 +89,0 @@\n-                    if (size > arenaSize) {\n-                        throw new OutOfMemoryError();\n-                    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+        Objects.requireNonNull(target);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-            value = (int) STATE.getVolatile(jdk.internal.foreign.SharedScope.this);\n+            value = (int) STATE.getVolatile(this);\n@@ -106,1 +106,1 @@\n-        } while (!STATE.compareAndSet(jdk.internal.foreign.SharedScope.this, value, value - 1));\n+        } while (!STATE.compareAndSet(this, value, value - 1));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}