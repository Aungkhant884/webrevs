{"files":[{"patch":"@@ -401,3 +401,0 @@\n-            if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) {\n-                continue;\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.util.Map;\n@@ -95,0 +96,72 @@\n+                \/\/ Turkish I with dot\n+                new Object[] { \"\\u0130\", false, 0, \"i\", 0, 1, false },\n+                new Object[] { \"\\u0130\", true,  0, \"i\", 0, 1, true },\n+                \/\/ i without dot\n+                new Object[] { \"\\u0131\", false, 0, \"i\", 0, 1, false },\n+                new Object[] { \"\\u0131\", true,  0, \"i\", 0, 1, true },\n+                \/\/ Exhaustive list of 1-char latin1 strings that match\n+                \/\/ case-insensitively:\n+                \/\/ for (char c1 = 0; c1 < 255; c1++) {\n+                \/\/   for (char c2 = c; c2 < 255; c2++) {\n+                \/\/     if (c1 == c2) continue;\n+                \/\/     if (String.valueOf(c1).regionMatches(true, 0, String.valueOf(c2), 0, 1)) {\n+                \/\/       System.out.println(\"                new Object[] { \\\"\\\\u00\"\n+                \/\/                          + Integer.toHexString((int)c) + \"\\\", true, 0, \\\"\\\\u00\"\n+                \/\/                          + Integer.toHexString((int)c2) + \"\\\", 0, 1, true },\");\n+                \/\/ }}}\n+                new Object[] { \"\\u0041\", true, 0, \"\\u0061\", 0, 1, true },\n+                new Object[] { \"\\u0042\", true, 0, \"\\u0062\", 0, 1, true },\n+                new Object[] { \"\\u0043\", true, 0, \"\\u0063\", 0, 1, true },\n+                new Object[] { \"\\u0044\", true, 0, \"\\u0064\", 0, 1, true },\n+                new Object[] { \"\\u0045\", true, 0, \"\\u0065\", 0, 1, true },\n+                new Object[] { \"\\u0046\", true, 0, \"\\u0066\", 0, 1, true },\n+                new Object[] { \"\\u0047\", true, 0, \"\\u0067\", 0, 1, true },\n+                new Object[] { \"\\u0048\", true, 0, \"\\u0068\", 0, 1, true },\n+                new Object[] { \"\\u0049\", true, 0, \"\\u0069\", 0, 1, true },\n+                new Object[] { \"\\u004a\", true, 0, \"\\u006a\", 0, 1, true },\n+                new Object[] { \"\\u004b\", true, 0, \"\\u006b\", 0, 1, true },\n+                new Object[] { \"\\u004c\", true, 0, \"\\u006c\", 0, 1, true },\n+                new Object[] { \"\\u004d\", true, 0, \"\\u006d\", 0, 1, true },\n+                new Object[] { \"\\u004e\", true, 0, \"\\u006e\", 0, 1, true },\n+                new Object[] { \"\\u004f\", true, 0, \"\\u006f\", 0, 1, true },\n+                new Object[] { \"\\u0050\", true, 0, \"\\u0070\", 0, 1, true },\n+                new Object[] { \"\\u0051\", true, 0, \"\\u0071\", 0, 1, true },\n+                new Object[] { \"\\u0052\", true, 0, \"\\u0072\", 0, 1, true },\n+                new Object[] { \"\\u0053\", true, 0, \"\\u0073\", 0, 1, true },\n+                new Object[] { \"\\u0054\", true, 0, \"\\u0074\", 0, 1, true },\n+                new Object[] { \"\\u0055\", true, 0, \"\\u0075\", 0, 1, true },\n+                new Object[] { \"\\u0056\", true, 0, \"\\u0076\", 0, 1, true },\n+                new Object[] { \"\\u0057\", true, 0, \"\\u0077\", 0, 1, true },\n+                new Object[] { \"\\u0058\", true, 0, \"\\u0078\", 0, 1, true },\n+                new Object[] { \"\\u0059\", true, 0, \"\\u0079\", 0, 1, true },\n+                new Object[] { \"\\u005a\", true, 0, \"\\u007a\", 0, 1, true },\n+                new Object[] { \"\\u00c0\", true, 0, \"\\u00e0\", 0, 1, true },\n+                new Object[] { \"\\u00c1\", true, 0, \"\\u00e1\", 0, 1, true },\n+                new Object[] { \"\\u00c2\", true, 0, \"\\u00e2\", 0, 1, true },\n+                new Object[] { \"\\u00c3\", true, 0, \"\\u00e3\", 0, 1, true },\n+                new Object[] { \"\\u00c4\", true, 0, \"\\u00e4\", 0, 1, true },\n+                new Object[] { \"\\u00c5\", true, 0, \"\\u00e5\", 0, 1, true },\n+                new Object[] { \"\\u00c6\", true, 0, \"\\u00e6\", 0, 1, true },\n+                new Object[] { \"\\u00c7\", true, 0, \"\\u00e7\", 0, 1, true },\n+                new Object[] { \"\\u00c8\", true, 0, \"\\u00e8\", 0, 1, true },\n+                new Object[] { \"\\u00c9\", true, 0, \"\\u00e9\", 0, 1, true },\n+                new Object[] { \"\\u00ca\", true, 0, \"\\u00ea\", 0, 1, true },\n+                new Object[] { \"\\u00cb\", true, 0, \"\\u00eb\", 0, 1, true },\n+                new Object[] { \"\\u00cc\", true, 0, \"\\u00ec\", 0, 1, true },\n+                new Object[] { \"\\u00cd\", true, 0, \"\\u00ed\", 0, 1, true },\n+                new Object[] { \"\\u00ce\", true, 0, \"\\u00ee\", 0, 1, true },\n+                new Object[] { \"\\u00cf\", true, 0, \"\\u00ef\", 0, 1, true },\n+                new Object[] { \"\\u00d0\", true, 0, \"\\u00f0\", 0, 1, true },\n+                new Object[] { \"\\u00d1\", true, 0, \"\\u00f1\", 0, 1, true },\n+                new Object[] { \"\\u00d2\", true, 0, \"\\u00f2\", 0, 1, true },\n+                new Object[] { \"\\u00d3\", true, 0, \"\\u00f3\", 0, 1, true },\n+                new Object[] { \"\\u00d4\", true, 0, \"\\u00f4\", 0, 1, true },\n+                new Object[] { \"\\u00d5\", true, 0, \"\\u00f5\", 0, 1, true },\n+                new Object[] { \"\\u00d6\", true, 0, \"\\u00f6\", 0, 1, true },\n+                new Object[] { \"\\u00d8\", true, 0, \"\\u00f8\", 0, 1, true },\n+                new Object[] { \"\\u00d9\", true, 0, \"\\u00f9\", 0, 1, true },\n+                new Object[] { \"\\u00da\", true, 0, \"\\u00fa\", 0, 1, true },\n+                new Object[] { \"\\u00db\", true, 0, \"\\u00fb\", 0, 1, true },\n+                new Object[] { \"\\u00dc\", true, 0, \"\\u00fc\", 0, 1, true },\n+                new Object[] { \"\\u00dd\", true, 0, \"\\u00fd\", 0, 1, true },\n+                new Object[] { \"\\u00de\", true, 0, \"\\u00fe\", 0, 1, true },\n@@ -101,1 +174,1 @@\n-        map.get(str)\n+        map.getOrDefault(str, Map.of(str, str)) \/\/ Allow data provider to test adhoc strings\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/RegionMatches.java","additions":75,"deletions":2,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -34,0 +37,1 @@\n+import java.util.Locale;\n@@ -40,0 +44,3 @@\n+@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -46,0 +53,1 @@\n+    private String str1UP;\n@@ -51,0 +59,1 @@\n+        str1UP = str1.toUpperCase(Locale.ROOT);\n@@ -88,0 +97,6 @@\n+    @Benchmark\n+    public void regionMatchesLatin1(Blackhole bh) {\n+        bh.consume(str1.regionMatches(true, 0, str2, 0, str1.length()));\n+        bh.consume(str2.regionMatches(true, 16, str1UP, 0, 8));\n+        bh.consume(str3.regionMatches(true, 6, str4, 1, 2));\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringOther.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}