{"files":[{"patch":"@@ -336,0 +336,7 @@\n+            \/\/ the below three variables are kept in sync with index,\n+            \/\/ and used by JarLoader with JarIndex\n+            private boolean firstInLoader = true;\n+            private HashSet<String> visitedInLoader = null;\n+            private int[] indexCount = null;\n+            private URL urlWithIndex = null;\n+\n@@ -343,4 +350,46 @@\n-                    while ((loader = getLoader(index++)) != null) {\n-                        url = loader.findResource(name, check);\n-                        if (url != null) {\n-                            return true;\n+                    while ((loader = getLoader(index)) != null) {\n+                        if (loader instanceof JarLoader) {\n+                            JarLoader jarLoader = (JarLoader) loader;\n+                            JarIndex jarIndex = jarLoader.getIndex();\n+                            if (jarIndex == null) {\n+                                index++;\n+                                url = loader.findResource(name, check);\n+                                if (url != null) {\n+                                    return true;\n+                                }\n+                            } else {\n+                                if (firstInLoader) {\n+                                    \/\/ Get resource from the jar file corresponding to the JarLoader\n+                                    url = jarLoader.findResource(name, check, true);\n+                                    visitedInLoader = new HashSet<>();\n+                                    firstInLoader = false;\n+                                    indexCount = new int[1];\n+                                    indexCount[0] = 0;\n+                                    if (url != null) {\n+                                        urlWithIndex = url;\n+                                        return true;\n+                                    }\n+                                }\n+                                \/\/ Get resource through jarIndex\n+                                url = jarLoader.findResource(name, check, visitedInLoader, indexCount);\n+                                if (url != null) {\n+                                    \/\/ ignore the jar with index\n+                                    if (indexCount[0] == 1 && urlWithIndex != null && url.sameFile(urlWithIndex) == true) {\n+                                        urlWithIndex = null;\n+                                        continue;\n+                                    }\n+                                    return true;\n+                                }\n+                                index++;\n+                                \/\/ reinitialize the below variables when using the new loader\n+                                firstInLoader = true;\n+                                indexCount = null;\n+                                visitedInLoader = null;\n+                                urlWithIndex = null;\n+                            }\n+                        } else {\n+                            index++;\n+                            url = loader.findResource(name, check);\n+                            if (url != null) {\n+                                return true;\n+                            }\n@@ -929,0 +978,15 @@\n+        URL findResource(final String name, boolean check, boolean ignoreIndex) {\n+            Resource rsc = getResource(name, check, ignoreIndex);\n+            if (rsc != null) {\n+                return rsc.getURL();\n+            }\n+            return null;\n+        }\n+\n+        URL findResource(final String name, boolean check, Set<String> visited, int[] indexCount) {\n+            Resource rsc = getResource(name, check, visited, true, indexCount);\n+            if (rsc != null) {\n+                return rsc.getURL();\n+            }\n+            return null;\n+        }\n@@ -934,0 +998,5 @@\n+            return getResource(name, check, false);\n+        }\n+\n+\n+        Resource getResource(final String name, boolean check, boolean ignoreIndex) {\n@@ -946,0 +1015,4 @@\n+            if (ignoreIndex) {\n+                return null;\n+            }\n+\n@@ -960,0 +1033,6 @@\n+            return getResource(name, check, visited, false, null);\n+        }\n+\n+        @SuppressWarnings(\"removal\")\n+        Resource getResource(final String name, boolean check,\n+                             Set<String> visited, boolean noRecursion, int[] indexCount) {\n@@ -962,1 +1041,1 @@\n-            int count = 0;\n+            int count = indexCount != null ? indexCount[0] : 0;\n@@ -1027,0 +1106,3 @@\n+                            if (indexCount != null) {\n+                                indexCount[0] = count;\n+                            }\n@@ -1046,1 +1128,1 @@\n-                            newLoader.getIndex() == null) {\n+                            newLoader.getIndex() == null || noRecursion) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":88,"deletions":6,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 6957241\n+ * @summary Verify that multiple file are loaded with JarIndex\n+ * @modules jdk.jartool\/sun.tools.jar\n+ *          jdk.httpserver\n+ *          jdk.compiler\n+ *          jdk.zipfs\n+ * @run main\/othervm MultiSameFileTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+\/**\n+ * Verifies the fix for 6957241: ClassLoader.getResources() returns only 1\n+ * instance when using jar indexing\n+ *\n+ * 1) Compile the test sources:\n+ *   jarE:\n+ *     Main.java\n+ *     resource.txt\n+ *   jarF:\n+ *     resource.txt\n+ *\n+ * 2) Build three jar files e.jar, f.jar\n+ *\n+ * 3) Create an index in a.jar (jar -i e.jar f.jar)\n+ *\n+ * 4) Start a process to execute java -cp e.jar:f.jar Main\n+ *\n+ * The test then tries to locate services\/resources within the jars using\n+ * URLClassLoader.\n+ *\n+ *\/\n+\n+public class MultiSameFileTest {\n+    static final String slash = File.separator;\n+    static final String[] testSources =  {\n+         \"jarE\" + slash + \"e\" + slash + \"Main.java\",\n+         \"jarE\" + slash + \"resource.txt\",\n+         \"jarF\" + slash + \"resource.txt\"};\n+\n+    static final String testSrc = System.getProperty(\"test.src\");\n+    static final String testSrcDir = testSrc != null ? testSrc : \".\";\n+    static final String testClasses = System.getProperty(\"test.classes\");\n+    static final String testClassesDir = testClasses != null ? testClasses : \".\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        buildTest();\n+\n+        doTest(testClassesDir);\n+    }\n+\n+    static void buildTest() {\n+        \/* compile the source that will be used to generate the jars *\/\n+        testSources[0] = testSrcDir + slash + testSources[0];\n+\n+        compile(\"-d\" , testClassesDir,\n+                \"-sourcepath\", testSrcDir,\n+                testSources[0]);\n+\n+        \/* build the 2 jar files *\/\n+        jar(\"-cf\", testClassesDir + slash + \"e.jar\",\n+            \"-C\", testClassesDir, \"e\",\n+            \"-C\", testSrcDir + slash + \"jarE\", \"resource.txt\");\n+        jar(\"-cf\", testClassesDir + slash + \"f.jar\",\n+            \"-C\", testSrcDir + slash + \"jarF\", \"resource.txt\");\n+\n+        \/* Create an index in a.jar for b.jar and c.jar *\/\n+        createIndex(testClassesDir);\n+    }\n+\n+    \/* run jar <args> *\/\n+    static void jar(String... args) {\n+        debug(\"Running: jar \" + Arrays.toString(args));\n+        sun.tools.jar.Main jar = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jar.run(args)) {\n+            throw new RuntimeException(\"jar failed: args=\" + Arrays.toString(args));\n+        }\n+    }\n+\n+    \/* run javac <args> *\/\n+    static void compile(String... args) {\n+        debug(\"Running: javac \" + Arrays.toString(args));\n+        if (com.sun.tools.javac.Main.compile(args) != 0) {\n+             throw new RuntimeException(\"javac failed: args=\" + Arrays.toString(args));\n+        }\n+    }\n+\n+    static String jar;\n+    static String java;\n+    static {\n+        jar = System.getProperty(\"java.home\") + slash+  \"bin\" + slash + \"jar\";\n+        java = System.getProperty(\"java.home\") + slash+  \"bin\" + slash + \"java\";\n+    }\n+\n+    \/* create the index *\/\n+    static void createIndex(String workingDir) {\n+        \/\/ ProcessBuilder is used so that the current directory can be set\n+        \/\/ to the directory that directly contains the jars.\n+        debug(\"Running jar to create the index\");\n+        ProcessBuilder pb = new ProcessBuilder(\n+           jar, \"-J-Dsun.misc.JarIndex.metaInfFilenames=true\", \"-i\", \"e.jar\", \"f.jar\");\n+        pb.directory(new File(workingDir));\n+        \/\/pd.inheritIO();\n+        try {\n+            Process p = pb.start();\n+            if(p.waitFor() != 0)\n+                throw new RuntimeException(\"jar indexing failed\");\n+\n+            if(debug && p != null) {\n+                String line = null;\n+                BufferedReader reader =\n+                         new BufferedReader(new InputStreamReader(p.getInputStream()));\n+                while((line = reader.readLine()) != null)\n+                    debug(line);\n+                reader = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n+                while((line = reader.readLine()) != null)\n+                    debug(line);\n+            }\n+        } catch(InterruptedException ie) { throw new RuntimeException(ie);\n+        } catch(IOException e) { throw new RuntimeException(e); }\n+    }\n+\n+    static final boolean debug = true;\n+\n+    static void debug(Object message) { if (debug) System.out.println(message); }\n+\n+    \/* create the index *\/\n+    static void doTest(String workingDir) {\n+        \/\/ ProcessBuilder is used so that the current directory can be set\n+        \/\/ to the directory that directly contains the jars.\n+        debug(\"Running java -cp e.jar:f.jar e.Main\");\n+        ProcessBuilder pb = new ProcessBuilder(\n+           java, \"-cp\", \"e.jar:f.jar\", \"e.Main\");\n+        pb.directory(new File(workingDir));\n+        \/\/pd.inheritIO();\n+        try {\n+            Process p = pb.start();\n+            if(p.waitFor() != 0)\n+                throw new RuntimeException(\"run java failed\");\n+\n+            if(p != null) {\n+                String line = null;\n+                BufferedReader reader =\n+                         new BufferedReader(new InputStreamReader(p.getInputStream()));\n+                String output = \"\";\n+                while((line = reader.readLine()) != null)\n+                    output += line;\n+\n+                debug(output);\n+\n+                if (output.contains(\"There are 2 resouce files\") == false) {\n+                    throw new RuntimeException(\"can't get the 2 instances.\");\n+                }\n+\n+                reader = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n+                while((line = reader.readLine()) != null)\n+                    debug(line);\n+            }\n+        } catch(InterruptedException ie) { throw new RuntimeException(ie);\n+        } catch(IOException e) { throw new RuntimeException(e); }\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/MultiSameFileTest.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"},{"patch":"@@ -0,0 +1,344 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6957241\n+ * @summary Verify that multiple services are loaded with JarIndex\n+ * @modules jdk.jartool\/sun.tools.jar\n+ *          jdk.httpserver\n+ *          jdk.compiler\n+ *          jdk.zipfs\n+ * @run main\/othervm MultiServiceTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+\/**\n+ * Verifies that multiple services are loaded with JarIndex\n+ *\n+ * 1) Compile the test sources:\n+ *   jarA:\n+ *     META-INF\/services\/my.happy.land\n+ *     com\/message\/spi\/MessageService.java\n+ *     a\/A.java\n+ *   jarC:\n+ *     META-INF\/services\/com.message.spi.MessageService\n+ *     my\/impl\/StandardMessageService.java\n+ *   jarD:\n+ *     META-INF\/services\/com.message.spi.MessageService\n+ *     se\/impl\/SecondMessageService.java\n+ *\n+ * 2) Build three jar files a.jar, c.jar, d.jar\n+ *\n+ * 3) Create an index in a.jar (jar -i a.jar c.jar d.jar)\n+ *      with sun.misc.JarIndex.metaInfFilenames=true\n+ *\n+ * 4) Start a HTTP server serving out the three jars.\n+ *\n+ * The test then tries to locate services\/resources within the jars using\n+ * URLClassLoader. Each request to the HTTP server is recorded to ensure\n+ * only the correct amount of requests are being made.\n+ *\n+ *\/\n+\n+public class MultiServiceTest {\n+    static final String slash = File.separator;\n+    static final String[] testSources =  {\n+         \"jarA\" + slash + \"a\" + slash + \"A.java\",\n+         \"jarA\" + slash + \"com\" + slash + \"message\" + slash + \"spi\" + slash + \"MessageService.java\",\n+         \"jarC\" + slash + \"my\" + slash + \"impl\" + slash + \"StandardMessageService.java\",\n+         \"jarD\" + slash + \"se\" + slash + \"impl\" + slash + \"SecondMessageService.java\"};\n+\n+    static final String testSrc = System.getProperty(\"test.src\");\n+    static final String testSrcDir = testSrc != null ? testSrc : \".\";\n+    static final String testClasses = System.getProperty(\"test.classes\");\n+    static final String testClassesDir = testClasses != null ? testClasses : \".\";\n+\n+    static JarHttpServer httpServer;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Set global url cache to false so that we can track every jar request.\n+        (new URL(\"http:\/\/localhost\/\")).openConnection().setDefaultUseCaches(false);\n+\n+        buildTest();\n+\n+        try {\n+            httpServer = new JarHttpServer(testClassesDir);\n+            httpServer.start();\n+\n+            doTest(httpServer.getAddress());\n+\n+        } catch (IOException ioe) {\n+            ioe.printStackTrace();\n+        } finally {\n+            if (httpServer != null) { httpServer.stop(2); }\n+        }\n+    }\n+\n+    static void buildTest() {\n+        \/* compile the source that will be used to generate the jars *\/\n+        for (int i=0; i<testSources.length; i++)\n+            testSources[i] = testSrcDir + slash + testSources[i];\n+\n+        compile(\"-d\" , testClassesDir,\n+                \"-sourcepath\", testSrcDir,\n+                testSources[0], testSources[1], testSources[2], testSources[3]);\n+\n+        \/* build the 3 jar files *\/\n+        jar(\"-cf\", testClassesDir + slash + \"a.jar\",\n+            \"-C\", testClassesDir, \"a\",\n+            \"-C\", testClassesDir, \"com\",\n+            \"-C\", testSrcDir + slash + \"jarA\", \"META-INF\");\n+        jar(\"-cf\", testClassesDir + slash + \"c.jar\",\n+            \"-C\", testClassesDir, \"my\",\n+            \"-C\", testSrcDir + slash + \"jarC\", \"META-INF\");\n+        jar(\"-cf\", testClassesDir + slash + \"d.jar\",\n+            \"-C\", testClassesDir, \"se\",\n+            \"-C\", testSrcDir + slash + \"jarD\", \"META-INF\");\n+\n+        \/* Create an index in a.jar for b.jar and c.jar *\/\n+        createIndex(testClassesDir);\n+    }\n+\n+    \/* run jar <args> *\/\n+    static void jar(String... args) {\n+        debug(\"Running: jar \" + Arrays.toString(args));\n+        sun.tools.jar.Main jar = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jar.run(args)) {\n+            throw new RuntimeException(\"jar failed: args=\" + Arrays.toString(args));\n+        }\n+    }\n+\n+    \/* run javac <args> *\/\n+    static void compile(String... args) {\n+        debug(\"Running: javac \" + Arrays.toString(args));\n+        if (com.sun.tools.javac.Main.compile(args) != 0) {\n+             throw new RuntimeException(\"javac failed: args=\" + Arrays.toString(args));\n+        }\n+    }\n+\n+    static String jar;\n+    static {\n+        jar = System.getProperty(\"java.home\") + slash+  \"bin\" + slash + \"jar\";\n+    }\n+\n+    \/* create the index *\/\n+    static void createIndex(String workingDir) {\n+        \/\/ ProcessBuilder is used so that the current directory can be set\n+        \/\/ to the directory that directly contains the jars.\n+        debug(\"Running jar to create the index\");\n+        ProcessBuilder pb = new ProcessBuilder(\n+           jar, \"-J-Dsun.misc.JarIndex.metaInfFilenames=true\", \"-i\", \"a.jar\", \"c.jar\", \"d.jar\");\n+        pb.directory(new File(workingDir));\n+        \/\/pd.inheritIO();\n+        try {\n+            Process p = pb.start();\n+            if(p.waitFor() != 0)\n+                throw new RuntimeException(\"jar indexing failed\");\n+\n+            if(debug && p != null) {\n+                String line = null;\n+                BufferedReader reader =\n+                         new BufferedReader(new InputStreamReader(p.getInputStream()));\n+                while((line = reader.readLine()) != null)\n+                    debug(line);\n+                reader = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n+                while((line = reader.readLine()) != null)\n+                    debug(line);\n+            }\n+        } catch(InterruptedException ie) { throw new RuntimeException(ie);\n+        } catch(IOException e) { throw new RuntimeException(e); }\n+    }\n+\n+    static final boolean debug = true;\n+\n+    static void debug(Object message) { if (debug) System.out.println(message); }\n+\n+    \/* service define in c.jar *\/\n+    static final String messageService = \"com.message.spi.MessageService\";\n+\n+    \/* a service that is not defined in any of the jars *\/\n+    static final String unknownService = \"java.lang.Object\";\n+\n+    static void doTest(InetSocketAddress serverAddress) throws IOException {\n+        URL baseURL = new URL(\"http:\/\/localhost:\" + serverAddress.getPort() + \"\/\");\n+\n+        int failed = 0;\n+\n+        \/\/ Tests using java.util.SerivceLoader\n+        if (!javaUtilServiceLoaderTest(baseURL, messageService, true)) {\n+            System.out.println(\"Test: ServiceLoader looking for \" + messageService + \", failed\");\n+            failed++;\n+        }\n+\n+        if (failed > 0)\n+            throw new RuntimeException(\"Failed: \" + failed + \" tests\");\n+    }\n+\n+    static boolean javaUtilServiceLoaderTest(URL baseURL,\n+                                             String serviceClass,\n+                                             boolean expectToFind) throws IOException {\n+        debug(\"----------------------------------\");\n+        debug(\"Running test with java.util.ServiceLoader looking for \" + serviceClass);\n+        URLClassLoader loader = getLoader(baseURL);\n+        httpServer.reset();\n+\n+        Class<?> messageServiceClass = null;\n+        try {\n+            messageServiceClass = loader.loadClass(serviceClass);\n+        } catch (ClassNotFoundException cnfe) {\n+            System.err.println(cnfe);\n+            throw new RuntimeException(\"Error in test: \" + cnfe);\n+        }\n+\n+        Iterator<?> iterator = (ServiceLoader.load(messageServiceClass, loader)).iterator();\n+        if (expectToFind && !iterator.hasNext()) {\n+            debug(messageServiceClass + \" NOT found.\");\n+            return false;\n+        }\n+\n+        while (iterator.hasNext()) {\n+            debug(\"found \" + iterator.next() + \" \" + messageService);\n+        }\n+\n+        if (httpServer.cDotJar == 0) {\n+            debug(\"No request sent to the httpserver for c.jar\");\n+            return false;\n+        }\n+        if (httpServer.dDotJar == 0) {\n+            debug(\"No request sent to the httpserver for d.jar\");\n+            return false;\n+        }\n+\n+        debug(\"HttpServer: \" + httpServer);\n+        return true;\n+    }\n+\n+    static URLClassLoader getLoader(URL baseURL) throws IOException {\n+        ClassLoader loader = Basic.class.getClassLoader();\n+\n+        while (loader.getParent() != null)\n+            loader = loader.getParent();\n+\n+        return new URLClassLoader( new URL[]{\n+            new URL(baseURL, \"a.jar\"),\n+            new URL(baseURL, \"c.jar\"),\n+            new URL(baseURL, \"d.jar\")}, loader );\n+    }\n+\n+    \/**\n+     * HTTP Server to server the jar files.\n+     *\/\n+    static class JarHttpServer implements HttpHandler {\n+        final String docsDir;\n+        final HttpServer httpServer;\n+        int aDotJar, cDotJar, dDotJar;\n+\n+        JarHttpServer(String docsDir) throws IOException {\n+            this.docsDir = docsDir;\n+\n+            httpServer = HttpServer.create(new InetSocketAddress(0), 0);\n+            httpServer.createContext(\"\/\", this);\n+        }\n+\n+        void start() throws IOException {\n+            httpServer.start();\n+        }\n+\n+        void stop(int delay) {\n+            httpServer.stop(delay);\n+        }\n+\n+        InetSocketAddress getAddress() {\n+            return httpServer.getAddress();\n+        }\n+\n+        void reset() {\n+            aDotJar = cDotJar = dDotJar = 0;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"aDotJar=\" + aDotJar + \", cDotJar=\" + cDotJar + \", dDotJar=\" + dDotJar;\n+        }\n+\n+        public void handle(HttpExchange t) throws IOException {\n+            InputStream is = t.getRequestBody();\n+            Headers map = t.getRequestHeaders();\n+            Headers rmap = t.getResponseHeaders();\n+            URI uri = t.getRequestURI();\n+\n+            debug(\"Server: received request for \" + uri);\n+            String path = uri.getPath();\n+            if (path.endsWith(\"a.jar\"))\n+                aDotJar++;\n+            else if (path.endsWith(\"c.jar\"))\n+                cDotJar++;\n+            else if (path.endsWith(\"d.jar\"))\n+                dDotJar++;\n+            else\n+                System.out.println(\"Unexpected resource request\" + path);\n+\n+            while (is.read() != -1);\n+            is.close();\n+\n+            File file = new File(docsDir, path);\n+            if (!file.exists())\n+                throw new RuntimeException(\"Error: request for \" + file);\n+            long clen = file.length();\n+            t.sendResponseHeaders (200, clen);\n+            OutputStream os = t.getResponseBody();\n+            FileInputStream fis = new FileInputStream(file);\n+            try {\n+                byte[] buf = new byte [16 * 1024];\n+                int len;\n+                while ((len=fis.read(buf)) != -1) {\n+                    os.write (buf, 0, len);\n+                }\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+            fis.close();\n+            os.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/MultiServiceTest.java","additions":344,"deletions":0,"binary":false,"changes":344,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+# Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+\n+se.impl.SecondMessageService\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarD\/META-INF\/services\/com.message.spi.MessageService","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package se.impl;\n+\n+public class SecondMessageService implements com.message.spi.MessageService {\n+    @Override\n+    public String message() {\n+        return \"This is a message from the second message service\";\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarD\/se\/impl\/SecondMessageService.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package e;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Enumeration;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws IOException {\n+        Enumeration<URL> e = Thread.currentThread().getContextClassLoader().getResources(\"resource.txt\");\n+        int count = 0;\n+        while (e.hasMoreElements()) {\n+            URL u = e.nextElement();\n+            count++;\n+        }\n+        System.out.println(\"There are \" + count + \" resouce files.\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarE\/e\/Main.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarE\/resource.txt","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/jarF\/resource.txt","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"}]}