{"files":[{"patch":"@@ -249,0 +249,32 @@\n+  PhaseIterGVN *igvn = phase->is_IterGVN();\n+  const TypeInt* this_type = this->type()->is_int();\n+  Node* z = in(1);\n+  const TypeInteger* rx = NULL;\n+  const TypeInteger* ry = NULL;\n+  \/\/ Similar to ConvI2LNode::Ideal() for the same reasons\n+  if (!_range_check_dependency && Compile::push_thru_add(phase, z, this_type, rx, ry, T_INT)) {\n+    if (igvn == NULL) {\n+      \/\/ Postpone this optimization to iterative GVN, where we can handle deep\n+      \/\/ AddI chains without an exponential number of recursive Ideal() calls.\n+      phase->record_for_igvn(this);\n+      return NULL;\n+    }\n+    int op = z->Opcode();\n+    Node* x = z->in(1);\n+    Node* y = z->in(2);\n+\n+    Node* cx = new CastIINode(x, rx->is_int(),\n+                              _carry_dependency, _range_check_dependency);\n+    cx->set_req(0, in(0));\n+    cx = phase->transform(cx);\n+    Node* cy = new CastIINode(y, ry->is_int(),\n+                              _carry_dependency, _range_check_dependency);\n+    cy->set_req(0, in(0));\n+    cy = phase->transform(cy);\n+    switch (op) {\n+      case Op_AddI:  return new AddINode(cx, cy);\n+      case Op_SubI:  return new SubINode(cx, cy);\n+      default:       ShouldNotReachHere();\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+class TypeInteger;\n@@ -1174,0 +1175,4 @@\n+\n+  static bool\n+  push_thru_add(PhaseGVN* phase, Node* z, const TypeInteger* tz, const TypeInteger*& rx, const TypeInteger*& ry,\n+                BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"compile.hpp\"\n@@ -255,1 +256,0 @@\n-#ifdef _LP64\n@@ -262,0 +262,1 @@\n+#ifdef _LP64\n@@ -278,0 +279,74 @@\n+bool Compile::push_thru_add(PhaseGVN* phase, Node* z, const TypeInteger* tz, const TypeInteger*& rx, const TypeInteger*& ry,\n+                            BasicType bt) {\n+  int op = z->Opcode();\n+  if (op == Op_AddI || op == Op_SubI) {\n+    Node* x = z->in(1);\n+    Node* y = z->in(2);\n+    assert (x != z && y != z, \"dead loop in ConvI2LNode::Ideal\");\n+    if (phase->type(x) == Type::TOP) {\n+      return false;\n+    }\n+    if (phase->type(y) == Type::TOP) {\n+      return false;\n+    }\n+    const TypeInt*  tx = phase->type(x)->is_int();\n+    const TypeInt*  ty = phase->type(y)->is_int();\n+\n+    jlong xlo = tx->is_int()->_lo;\n+    jlong xhi = tx->is_int()->_hi;\n+    jlong ylo = ty->is_int()->_lo;\n+    jlong yhi = ty->is_int()->_hi;\n+    jlong zlo = tz->lo_as_long();\n+    jlong zhi = tz->hi_as_long();\n+    jlong vbit = CONST64(1) << BitsPerInt;\n+    int widen =  MAX2(tx->_widen, ty->_widen);\n+    if (op == Op_SubI) {\n+      jlong ylo0 = ylo;\n+      ylo = -yhi;\n+      yhi = -ylo0;\n+    }\n+    \/\/ See if x+y can cause positive overflow into z+2**32\n+    if (long_ranges_overlap(xlo+ylo, xhi+yhi, zlo+vbit, zhi+vbit)) {\n+      return false;\n+    }\n+    \/\/ See if x+y can cause negative overflow into z-2**32\n+    if (long_ranges_overlap(xlo+ylo, xhi+yhi, zlo-vbit, zhi-vbit)) {\n+      return false;\n+    }\n+    \/\/ Now it's always safe to assume x+y does not overflow.\n+    \/\/ This is true even if some pairs x,y might cause overflow, as long\n+    \/\/ as that overflow value cannot fall into [zlo,zhi].\n+\n+    \/\/ Confident that the arithmetic is \"as if infinite precision\",\n+    \/\/ we can now use z's range to put constraints on those of x and y.\n+    \/\/ The \"natural\" range of x [xlo,xhi] can perhaps be narrowed to a\n+    \/\/ more \"restricted\" range by intersecting [xlo,xhi] with the\n+    \/\/ range obtained by subtracting y's range from the asserted range\n+    \/\/ of the I2L conversion.  Here's the interval arithmetic algebra:\n+    \/\/    x == z-y == [zlo,zhi]-[ylo,yhi] == [zlo,zhi]+[-yhi,-ylo]\n+    \/\/    => x in [zlo-yhi, zhi-ylo]\n+    \/\/    => x in [zlo-yhi, zhi-ylo] INTERSECT [xlo,xhi]\n+    \/\/    => x in [xlo MAX zlo-yhi, xhi MIN zhi-ylo]\n+    jlong rxlo = MAX2(xlo, zlo - yhi);\n+    jlong rxhi = MIN2(xhi, zhi - ylo);\n+    \/\/ And similarly, x changing place with y:\n+    jlong rylo = MAX2(ylo, zlo - xhi);\n+    jlong ryhi = MIN2(yhi, zhi - xlo);\n+    if (rxlo > rxhi || rylo > ryhi) {\n+      return false;  \/\/ x or y is dying; don't mess w\/ it\n+    }\n+    if (op == Op_SubI) {\n+      jlong rylo0 = rylo;\n+      rylo = -ryhi;\n+      ryhi = -rylo0;\n+    }\n+    assert(rxlo == (int)rxlo && rxhi == (int)rxhi, \"x should not overflow\");\n+    assert(rylo == (int)rylo && ryhi == (int)ryhi, \"y should not overflow\");\n+    rx = TypeInteger::make(rxlo, rxhi, widen, bt);\n+    ry = TypeInteger::make(rylo, ryhi, widen, bt);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+\n@@ -351,2 +426,3 @@\n-  int op = z->Opcode();\n-  if (op == Op_AddI || op == Op_SubI) {\n+  const TypeInteger* rx = NULL;\n+  const TypeInteger* ry = NULL;\n+  if (Compile::push_thru_add(phase, z, this_type, rx, ry, T_LONG)) {\n@@ -359,0 +435,1 @@\n+    int op = z->Opcode();\n@@ -361,30 +438,0 @@\n-    assert (x != z && y != z, \"dead loop in ConvI2LNode::Ideal\");\n-    if (phase->type(x) == Type::TOP)  return this_changed;\n-    if (phase->type(y) == Type::TOP)  return this_changed;\n-    const TypeInt*  tx = phase->type(x)->is_int();\n-    const TypeInt*  ty = phase->type(y)->is_int();\n-    const TypeLong* tz = this_type;\n-    jlong xlo = tx->_lo;\n-    jlong xhi = tx->_hi;\n-    jlong ylo = ty->_lo;\n-    jlong yhi = ty->_hi;\n-    jlong zlo = tz->_lo;\n-    jlong zhi = tz->_hi;\n-    jlong vbit = CONST64(1) << BitsPerInt;\n-    int widen =  MAX2(tx->_widen, ty->_widen);\n-    if (op == Op_SubI) {\n-      jlong ylo0 = ylo;\n-      ylo = -yhi;\n-      yhi = -ylo0;\n-    }\n-    \/\/ See if x+y can cause positive overflow into z+2**32\n-    if (long_ranges_overlap(xlo+ylo, xhi+yhi, zlo+vbit, zhi+vbit)) {\n-      return this_changed;\n-    }\n-    \/\/ See if x+y can cause negative overflow into z-2**32\n-    if (long_ranges_overlap(xlo+ylo, xhi+yhi, zlo-vbit, zhi-vbit)) {\n-      return this_changed;\n-    }\n-    \/\/ Now it's always safe to assume x+y does not overflow.\n-    \/\/ This is true even if some pairs x,y might cause overflow, as long\n-    \/\/ as that overflow value cannot fall into [zlo,zhi].\n@@ -392,27 +439,2 @@\n-    \/\/ Confident that the arithmetic is \"as if infinite precision\",\n-    \/\/ we can now use z's range to put constraints on those of x and y.\n-    \/\/ The \"natural\" range of x [xlo,xhi] can perhaps be narrowed to a\n-    \/\/ more \"restricted\" range by intersecting [xlo,xhi] with the\n-    \/\/ range obtained by subtracting y's range from the asserted range\n-    \/\/ of the I2L conversion.  Here's the interval arithmetic algebra:\n-    \/\/    x == z-y == [zlo,zhi]-[ylo,yhi] == [zlo,zhi]+[-yhi,-ylo]\n-    \/\/    => x in [zlo-yhi, zhi-ylo]\n-    \/\/    => x in [zlo-yhi, zhi-ylo] INTERSECT [xlo,xhi]\n-    \/\/    => x in [xlo MAX zlo-yhi, xhi MIN zhi-ylo]\n-    jlong rxlo = MAX2(xlo, zlo - yhi);\n-    jlong rxhi = MIN2(xhi, zhi - ylo);\n-    \/\/ And similarly, x changing place with y:\n-    jlong rylo = MAX2(ylo, zlo - xhi);\n-    jlong ryhi = MIN2(yhi, zhi - xlo);\n-    if (rxlo > rxhi || rylo > ryhi) {\n-      return this_changed;  \/\/ x or y is dying; don't mess w\/ it\n-    }\n-    if (op == Op_SubI) {\n-      jlong rylo0 = rylo;\n-      rylo = -ryhi;\n-      ryhi = -rylo0;\n-    }\n-    assert(rxlo == (int)rxlo && rxhi == (int)rxhi, \"x should not overflow\");\n-    assert(rylo == (int)rylo && ryhi == (int)ryhi, \"y should not overflow\");\n-    Node* cx = find_or_make_convI2L(igvn, x, TypeLong::make(rxlo, rxhi, widen));\n-    Node* cy = find_or_make_convI2L(igvn, y, TypeLong::make(rylo, ryhi, widen));\n+    Node* cx = find_or_make_convI2L(igvn, x, rx->is_long());\n+    Node* cy = find_or_make_convI2L(igvn, y, ry->is_long());\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":82,"deletions":60,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -2409,0 +2409,1 @@\n+  exp = exp->uncast();\n@@ -2417,1 +2418,1 @@\n-    if (exp->in(1) == iv && exp->in(2)->is_Con()) {\n+    if (exp->in(1)->uncast() == iv && exp->in(2)->is_Con()) {\n@@ -2423,1 +2424,1 @@\n-    if (exp->in(2) == iv && exp->in(1)->is_Con()) {\n+    if (exp->in(2)->uncast() == iv && exp->in(1)->is_Con()) {\n@@ -2430,1 +2431,1 @@\n-    if (exp->in(1) == iv && exp->in(2)->is_Con()) {\n+    if (exp->in(1)->uncast() == iv && exp->in(2)->is_Con()) {\n@@ -2451,0 +2452,1 @@\n+  exp = exp->uncast();\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-  if (n->Opcode() == Op_CastII && n->as_CastII()->has_range_check() &&\n-      region->is_CountedLoop() && n->in(1) == region->as_CountedLoop()->phi()) {\n+  if (n->Opcode() == Op_CastII && region->is_CountedLoop() &&\n+      n->in(1) == region->as_CountedLoop()->phi()) {\n@@ -1118,1 +1118,1 @@\n-        if (m->is_CastII() && m->isa_CastII()->has_range_check()) {\n+        if (m->is_CastII()) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}