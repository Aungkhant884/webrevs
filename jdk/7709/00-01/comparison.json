{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8282008\n@@ -27,1 +28,0 @@\n- * @library \/test\/lib\n@@ -39,0 +39,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -41,0 +42,2 @@\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n@@ -44,2 +47,0 @@\n-import java.util.stream.Collectors;\n-import java.util.concurrent.Callable;\n@@ -53,3 +54,3 @@\n-    private static final Path SRC_DIR = Path.of(System.getProperty(\"test.src\", \".\"));\n-    private static final Path WORK_DIR = Path.of(System.getProperty(\"user.dir\", \".\"));\n-    private static final Path TEST_CLASSES = Path.of(System.getProperty(\"test.classes\", \".\"));\n+    private static final Path SRC_DIR = Paths.get(System.getProperty(\"test.src\", \".\"));\n+    private static final Path WORK_DIR = Paths.get(System.getProperty(\"user.dir\", \".\"));\n+    private static final Path TEST_CLASSES = Paths.get(System.getProperty(\"test.classes\", \".\"));\n@@ -64,0 +65,2 @@\n+    private static final char NEWLINE = '\\n';\n+    private static final char BACKSLASH = '\\\\';\n@@ -70,3 +73,3 @@\n-    private static final List<String> ECHO_JAVA_ARGS = List.of(\"java\", \"-classpath\", TEST_CLASSES.toString(), \"ArgCheck\");\n-    private static final List<String> ECHO_CMD_ARGS = List.of(ECHO_CMD_PATH);\n-    private static final List<String> ECHO_VBS_ARGS = List.of(\"CScript\", \"\/b\", ECHO_VBS_PATH);\n+    private static final List<String> ECHO_JAVA_ARGS = Arrays.asList(\"java\", \"-classpath\", TEST_CLASSES.toString(), \"ArgCheck\");\n+    private static final List<String> ECHO_CMD_ARGS = Arrays.asList(ECHO_CMD_PATH);\n+    private static final List<String> ECHO_VBS_ARGS = Arrays.asList(\"CScript\", \"\/b\", ECHO_VBS_PATH);\n@@ -78,1 +81,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws IOException {\n@@ -86,1 +89,3 @@\n-        System.out.println(\"Java Version: \" + Runtime.getRuntime().version());\n+        System.out.println(\"Java Version: \" + System.getProperty(\"java.version\"));\n+\n+        createFiles();\n@@ -91,2 +96,0 @@\n-        ArgCheck ac = new ArgCheck();\n-        ac.setup();\n@@ -99,1 +102,1 @@\n-                    ac.testQuoteCases(cmd);\n+                    testCommand(cmd);\n@@ -121,1 +124,1 @@\n-         *\n+         * @param allowAmbiguous  true\/false to set property jdk.lang.Process.allowAmbiguousCommands\n@@ -124,1 +127,0 @@\n-         * @param allowAmbiguous  true\/false to set property jdk.lang.Process.allowAmbiguousCommands\n@@ -127,1 +129,2 @@\n-        CMD(List<String> command, List<String> arguments, boolean allowAmbiguous, String expected) {\n+        CMD(boolean allowAmbiguous, List<String> command, List<String> arguments, List<String> expected) {\n+            this.allowAmbiguous = allowAmbiguous;\n@@ -130,2 +133,1 @@\n-            this.allowAmbiguous = allowAmbiguous;\n-            this.result = expected.indent(0);\n+            this.expected = expected;\n@@ -134,0 +136,1 @@\n+        final boolean allowAmbiguous;\n@@ -136,2 +139,1 @@\n-        final boolean allowAmbiguous;\n-        final String result;\n+        final List<String> expected;\n@@ -143,1 +145,1 @@\n-    static final List<CMD> CASES = List.of(\n+    static final List<CMD> CASES = Arrays.asList(\n@@ -149,15 +151,12 @@\n-            new CMD(ECHO_JAVA_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_1\"),\n-                    false,\n-                    \"SPACE AND BACKSLASH\\\\\\n\" +\n-                            \"ARG_1\"),\n-            new CMD(ECHO_CMD_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_2\"),\n-                    false,\n-                    \"\\\"SPACE AND BACKSLASH\\\\\\\"\\n\" +\n-                            \"ARG_2\"),\n-            new CMD(ECHO_VBS_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_3\"),\n-                    false,\n-                    \"SPACE AND BACKSLASH\\\\\\\\\\n\" +\n-                            \"ARG_3\"),\n+            new CMD(false,\n+                    ECHO_JAVA_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_1\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_1\")),\n+            new CMD(false,\n+                    ECHO_CMD_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_2\"),\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_2\")),\n+            new CMD(false,\n+                    ECHO_VBS_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_3\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH + BACKSLASH, \"ARG_3\")),\n@@ -169,15 +168,12 @@\n-            new CMD(ECHO_JAVA_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_11\"),\n-                    false,\n-                    \"SPACE AND BACKSLASH\\\\\\n\" +\n-                            \"ARG_11\"),\n-            new CMD(ECHO_CMD_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_12\"),\n-                    false,\n-                    \"\\\"SPACE AND BACKSLASH\\\\\\\"\\n\" +\n-                            \"ARG_12\"),\n-            new CMD(ECHO_VBS_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_13\"),\n-                    false,\n-                    \"SPACE AND BACKSLASH\\\\\\\\\\n\" +\n-                            \"ARG_13\"),\n+            new CMD(false,\n+                    ECHO_JAVA_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_11\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_11\")),\n+            new CMD(false,\n+                    ECHO_CMD_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_12\"),\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_12\")),\n+            new CMD(false,\n+                    ECHO_VBS_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_13\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH + BACKSLASH, \"ARG_13\")),\n@@ -189,15 +185,12 @@\n-            new CMD(ECHO_JAVA_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_21\"),\n-                    true,\n-                    \"SPACE AND BACKSLASH\\\\\\n\" +\n-                            \"ARG_21\"),\n-            new CMD(ECHO_CMD_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_22\"),\n-                    true,\n-                    \"\\\"SPACE AND BACKSLASH\\\\\\\\\\\"\\n\" +\n-                            \"ARG_22\"),\n-            new CMD(ECHO_VBS_ARGS,\n-                    List.of(SPACE_AND_BACKSLASH, \"ARG_23\"),\n-                    true,\n-                    \"SPACE AND BACKSLASH\\\\\\\\\\n\" +\n-                            \"ARG_23\"),\n+            new CMD(true,\n+                    ECHO_JAVA_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_21\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_21\")),\n+            new CMD(true,\n+                    ECHO_CMD_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_22\"),\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + BACKSLASH + DOUBLE_QUOTE, \"ARG_22\")),\n+            new CMD(true,\n+                    ECHO_VBS_ARGS,\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_23\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH + BACKSLASH, \"ARG_23\")),\n@@ -208,14 +201,12 @@\n-            new CMD(ECHO_JAVA_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_31\"),\n-                    true,\n-                    \"SPACE AND BACKSLASH\\\" ARG_31\"),\n-            new CMD(ECHO_CMD_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_32\"),\n-                    true,\n-                    \"\\\"SPACE AND BACKSLASH\\\\\\\"\\n\" +\n-                            \"ARG_32\"),\n-            new CMD(ECHO_VBS_ARGS,\n-                    List.of(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_33\"),\n-                    true,\n-                    \"SPACE AND BACKSLASH\\\\\\n\" +\n-                            \"ARG_33\")\n+            new CMD(true,\n+                    ECHO_JAVA_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_31\"),\n+                    Arrays.asList(\"SPACE AND BACKSLASH\\\" ARG_31\")),\n+            new CMD(true,\n+                    ECHO_CMD_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_32\"),\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_32\")),\n+            new CMD(true,\n+                    ECHO_VBS_ARGS,\n+                    Arrays.asList(DOUBLE_QUOTE + SPACE_AND_BACKSLASH + DOUBLE_QUOTE, \"ARG_33\"),\n+                    Arrays.asList(SPACE_AND_BACKSLASH, \"ARG_33\"))\n@@ -224,12 +215,0 @@\n-    \/**\n-     * Test various commands and arguments invoking non-exe (.cmd) scripts with lenient argument checking.\n-     *\n-     * @param commands A {@literal List<String>} of command arguents.\n-     * @param expected an expected result, either the class of an expected exception or an Integer exit value\n-     *\/\n-    void testQuoteCases(CMD cmd) throws Exception {\n-        List<String> args = new ArrayList<>(cmd.command);\n-        args.addAll(cmd.arguments);\n-        testCommand(() -> new ProcessBuilder(args).start(), args, cmd.allowAmbiguous, cmd.result);\n-    }\n-\n@@ -239,4 +218,1 @@\n-     * @param callable a callable to create the Process\n-     * @param arguments a list of command strings\n-     * @param allowAmbiguous true\/false to set the value of system property jdk.lang.Process.allowAmbiguousCommands\n-     * @param expected   expected stdout\n+     * @param cmd a CMD test case with arguments, allowAmbiguousCommands mode, and expected output\n@@ -244,4 +220,5 @@\n-    private static void testCommand(Callable<Process> callable, List<String> arguments,\n-                                    boolean allowAmbiguous, String expected) throws Exception {\n-        System.setProperty(AMBIGUOUS_PROP_NAME, Boolean.toString(allowAmbiguous));\n-        String actual = \"\";\n+    private static void testCommand(CMD cmd) throws Exception {\n+        System.setProperty(AMBIGUOUS_PROP_NAME, Boolean.toString(cmd.allowAmbiguous));\n+        List<String> actual = null;\n+        List<String> arguments = new ArrayList<>(cmd.command);\n+        arguments.addAll(cmd.arguments);\n@@ -250,1 +227,2 @@\n-            Process process = callable.call();\n+            ProcessBuilder pb = new ProcessBuilder(arguments);\n+            Process process = pb.start();\n@@ -252,2 +230,3 @@\n-                byte[] bytes = is.readAllBytes();\n-                actual = new String(bytes, Charset.defaultCharset()).indent(0);\n+                String str = readAllBytesAsString(is);\n+                str = str.replace(\"\\r\", \"\");\n+                actual = Arrays.asList(str.split(\"\\n\"));\n@@ -259,1 +238,2 @@\n-                throw new RuntimeException(\"exitCode: \" + exitCode);\n+                actual = new ArrayList(actual);\n+                actual.add(\"Exit code: \" + exitCode);\n@@ -262,3 +242,1 @@\n-            actual = ioe.getMessage();\n-            actual = actual.replace(arguments.get(0), \"CMD\");\n-            ioe.printStackTrace();\n+            actual = Arrays.asList(ioe.getMessage().replace(arguments.get(0), \"CMD\"));\n@@ -266,1 +244,1 @@\n-            actual = ex.getMessage();       \/\/ Use exception message as output\n+            actual = Arrays.asList(ex.getMessage());       \/\/ Use exception message as output\n@@ -268,7 +246,29 @@\n-        if (expected != null) {\n-            if (!Objects.equals(actual, expected)) {\n-                System.out.println(\"Invoking(\" + allowAmbiguous + \"): \" + arguments);\n-                System.out.print(\"Actual:   \" + actual);\n-                System.out.print(\"Expected: \" + expected);\n-                System.out.println();\n-                throw new RuntimeException(\"Unexpected output\");\n+        if (!Objects.equals(actual, cmd.expected)) {\n+            System.out.println(\"Invoking(\" + cmd.allowAmbiguous + \"): \" + arguments);\n+            if (actual.size() != cmd.expected.size()) {\n+                System.out.println(\"Args Length: actual: \" + actual.size() + \" expected: \" + cmd.expected.size());\n+            }\n+            System.out.println(\"Actual:   \" + actual);\n+            System.out.println(\"Expected: \" + cmd.expected);\n+            System.out.println();\n+            throw new RuntimeException(\"Unexpected output\");\n+        }\n+    }\n+\n+    \/**\n+     * Private method to readAllBytes as a String.\n+     * (InputStream.readAllBytes is not supported by the JDK until 9)\n+     * @param is an InputStream\n+     * @return a String with the contents\n+     * @throws IOException if an error occurs\n+     *\/\n+    private static String readAllBytesAsString(InputStream is) throws IOException {\n+        final int BUF_SIZE = 8192;\n+        byte[] bytes = new byte[BUF_SIZE];\n+        int off = 0;\n+        int len;\n+        while ((len = is.read(bytes, off, bytes.length - off)) > 0) {\n+            off += len;\n+            if (off >= bytes.length) {\n+                \/\/ no space in buffer, reallocate larger\n+                bytes = Arrays.copyOf(bytes, bytes.length + BUF_SIZE);\n@@ -276,2 +276,0 @@\n-        } else {\n-            System.out.println(\"out: \" + actual);\n@@ -279,0 +277,1 @@\n+        return new String(bytes, 0, off, Charset.defaultCharset());\n@@ -286,7 +285,3 @@\n-    private static void setup() {\n-        try {\n-            Files.writeString(Path.of(ECHO_CMD_PATH), EchoArgumentsCmd);\n-            Files.writeString(Path.of(ECHO_VBS_PATH), EchoArgumentsVbs);\n-        } catch (IOException e) {\n-            throw new Error(e.getMessage());\n-        }\n+    private static void createFiles() throws IOException {\n+        Files.write(Paths.get(ECHO_CMD_PATH), EchoArgumentsCmd.getBytes(StandardCharsets.UTF_8));\n+        Files.write(Paths.get(ECHO_VBS_PATH), EchoArgumentsVbs.getBytes(StandardCharsets.UTF_8));\n@@ -296,1 +291,1 @@\n-     * Self contained .cmd to echo each arg on a separate line.\n+     * Self contained .cmd to echo each argument on a separate line.\n@@ -312,1 +307,1 @@\n-     * Self contained .vbs to echo each arg on a separate line.\n+     * Self contained .vbs to echo each argument on a separate line.\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ArgCheck.java","additions":122,"deletions":127,"binary":false,"changes":249,"status":"modified"}]}