{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.util.ArrayList;\n@@ -47,0 +46,1 @@\n+\n@@ -87,0 +87,2 @@\n+    HttpClient client;\n+    int numberOfRequests;\n@@ -88,0 +90,1 @@\n+    static final int REQUESTS_PER_CLIENT = 10; \/\/ create new client every 10 requests\n@@ -122,4 +125,7 @@\n-        System.gc();\n-        try {\n-            Thread.sleep(PAUSE_FOR_GC);\n-        } catch (InterruptedException x) {\n+        if (client == null || numberOfRequests == REQUESTS_PER_CLIENT) {\n+            out.println(\"--- new client\");\n+            client = newHttpClient();\n+            System.gc();\n+            try {\n+                Thread.sleep(PAUSE_FOR_GC);\n+            } catch (InterruptedException x) {\n@@ -127,0 +133,1 @@\n+            }\n@@ -128,0 +135,1 @@\n+        numberOfRequests++;\n@@ -171,1 +179,0 @@\n-        HttpClient client = newHttpClient();\n@@ -195,1 +202,0 @@\n-        HttpClient client = newHttpClient();\n@@ -271,8 +277,1 @@\n-        List<Object[]> list = new ArrayList<>();\n-        Arrays.asList(cases).stream()\n-                .map(e -> new Object[] {e[0], e[1], true})  \/\/ reuse client\n-                .forEach(list::add);\n-        Arrays.asList(cases).stream()\n-                .map(e -> new Object[] {e[0], e[1], false}) \/\/ do not reuse client\n-                .forEach(list::add);\n-        return list.stream().toArray(Object[][]::new);\n+        return cases;\n@@ -281,2 +280,0 @@\n-    static final int ITERATION_COUNT = 3;\n-\n@@ -292,12 +289,0 @@\n-    HttpClient sharedClient = null;\n-    HttpClient newHttpClient(boolean shared) {\n-        if (shared) {\n-            HttpClient sharedClient = this.sharedClient;\n-            if (sharedClient == null) {\n-                sharedClient = this.sharedClient = newHttpClient();\n-            }\n-            return sharedClient;\n-        }\n-        return newHttpClient();\n-    }\n-\n@@ -558,4 +543,2 @@\n-            for (int i = 0; i < len; ++i) {\n-                os.write(responseBytes[i]);\n-                os.flush();\n-            }\n+            os.write(responseBytes, 0, len);\n+            os.flush();\n@@ -706,1 +689,0 @@\n-        if (sharedClient != null) sharedClient = null;\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBody.java","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.net.http.HttpClient;\n@@ -45,2 +44,0 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertEquals;\n@@ -52,1 +49,1 @@\n-    void testSynchronousGET(String urlp, String expectedMsg, boolean sameClient)\n+    void testSynchronousGET(String urlp, String expectedMsg)\n@@ -56,20 +53,14 @@\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            String url = uniqueURL(urlp);\n-            if (client == null)\n-                client = newHttpClient(sameClient);\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            out.println(\"Request: \" + request);\n-            try {\n-                HttpResponse<String> response = client.send(request, ofString());\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (IOException ioe) {\n-                out.println(\"Caught expected exception:\" + ioe);\n-                assertExpectedMessage(request, ioe, expectedMsg);\n-                \/\/ synchronous API must have the send method on the stack\n-                assertSendMethodOnStack(ioe);\n-                assertNoConnectionExpiredException(ioe);\n-            }\n+        String url = uniqueURL(urlp);\n+        HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+        out.println(\"Request: \" + request);\n+        try {\n+            HttpResponse<String> response = client.send(request, ofString());\n+            String body = response.body();\n+            out.println(response + \": \" + body);\n+            fail(\"UNEXPECTED RESPONSE: \" + response);\n+        } catch (IOException ioe) {\n+            out.println(\"Caught expected exception:\" + ioe);\n+            assertExpectedMessage(request, ioe, expectedMsg);\n+            \/\/ synchronous API must have the send method on the stack\n+            assertSendMethodOnStack(ioe);\n+            assertNoConnectionExpiredException(ioe);\n@@ -80,1 +71,1 @@\n-    void testAsynchronousGET(String urlp, String expectedMsg, boolean sameClient)\n+    void testAsynchronousGET(String urlp, String expectedMsg)\n@@ -84,22 +75,16 @@\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            String url = uniqueURL(urlp);\n-            if (client == null)\n-                client = newHttpClient(sameClient);\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            out.println(\"Request: \" + request);\n-            try {\n-                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (ExecutionException ee) {\n-                if (ee.getCause() instanceof IOException) {\n-                    IOException ioe = (IOException) ee.getCause();\n-                    out.println(\"Caught expected exception:\" + ioe);\n-                    assertExpectedMessage(request, ioe, expectedMsg);\n-                    assertNoConnectionExpiredException(ioe);\n-                } else {\n-                    throw ee;\n-                }\n+        String url = uniqueURL(urlp);\n+        HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+        out.println(\"Request: \" + request);\n+        try {\n+            HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n+            String body = response.body();\n+            out.println(response + \": \" + body);\n+            fail(\"UNEXPECTED RESPONSE: \" + response);\n+        } catch (ExecutionException ee) {\n+            if (ee.getCause() instanceof IOException) {\n+                IOException ioe = (IOException) ee.getCause();\n+                out.println(\"Caught expected exception:\" + ioe);\n+                assertExpectedMessage(request, ioe, expectedMsg);\n+                assertNoConnectionExpiredException(ioe);\n+            } else {\n+                throw ee;\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyGet.java","additions":32,"deletions":47,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.net.http.HttpClient;\n@@ -49,2 +48,0 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertEquals;\n@@ -63,1 +60,1 @@\n-    void testSynchronousPOST(String urlp, String expectedMsg, boolean sameClient)\n+    void testSynchronousPOST(String urlp, String expectedMsg)\n@@ -67,17 +64,12 @@\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            String url = uniqueURL(urlp);\n-            if (client == null)\n-                client = newHttpClient(sameClient);\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n-                    .build();\n-            out.println(\"Request: \" + request);\n-            try {\n-                HttpResponse<String> response = client.send(request, ofString());\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (IOException ioe) {\n-                out.println(\"Caught expected exception:\" + ioe);\n+        String url = uniqueURL(urlp);\n+        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n+                .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n+                .build();\n+        out.println(\"Request: \" + request);\n+        try {\n+            HttpResponse<String> response = client.send(request, ofString());\n+            String body = response.body();\n+            out.println(response + \": \" + body);\n+            fail(\"UNEXPECTED RESPONSE: \" + response);\n+        } catch (IOException ioe) {\n+            out.println(\"Caught expected exception:\" + ioe);\n@@ -85,4 +77,4 @@\n-                List<String> expectedMessages = new ArrayList<>();\n-                expectedMessages.add(expectedMsg);\n-                MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n-                                   .forEach(expectedMessages::add);\n+            List<String> expectedMessages = new ArrayList<>();\n+            expectedMessages.add(expectedMsg);\n+            MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n+                               .forEach(expectedMessages::add);\n@@ -90,5 +82,4 @@\n-                assertExpectedMessage(request, ioe, expectedMessages);\n-                \/\/ synchronous API must have the send method on the stack\n-                assertSendMethodOnStack(ioe);\n-                assertNoConnectionExpiredException(ioe);\n-            }\n+            assertExpectedMessage(request, ioe, expectedMessages);\n+            \/\/ synchronous API must have the send method on the stack\n+            assertSendMethodOnStack(ioe);\n+            assertNoConnectionExpiredException(ioe);\n@@ -99,1 +90,1 @@\n-    void testAsynchronousPOST(String urlp, String expectedMsg, boolean sameClient)\n+    void testAsynchronousPOST(String urlp, String expectedMsg)\n@@ -103,19 +94,14 @@\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            String url = uniqueURL(urlp);\n-            if (client == null)\n-                client = newHttpClient(sameClient);\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n-                    .build();\n-            out.println(\"Request: \" + request);\n-            try {\n-                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (ExecutionException ee) {\n-                if (ee.getCause() instanceof IOException) {\n-                    IOException ioe = (IOException) ee.getCause();\n-                    out.println(\"Caught expected exception:\" + ioe);\n+        String url = uniqueURL(urlp);\n+        HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n+                .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n+                .build();\n+        out.println(\"Request: \" + request);\n+        try {\n+            HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n+            String body = response.body();\n+            out.println(response + \": \" + body);\n+            fail(\"UNEXPECTED RESPONSE: \" + response);\n+        } catch (ExecutionException ee) {\n+            if (ee.getCause() instanceof IOException) {\n+                IOException ioe = (IOException) ee.getCause();\n+                out.println(\"Caught expected exception:\" + ioe);\n@@ -123,4 +109,4 @@\n-                    List<String> expectedMessages = new ArrayList<>();\n-                    expectedMessages.add(expectedMsg);\n-                    MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n-                            .forEach(expectedMessages::add);\n+                List<String> expectedMessages = new ArrayList<>();\n+                expectedMessages.add(expectedMsg);\n+                MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n+                        .forEach(expectedMessages::add);\n@@ -128,5 +114,4 @@\n-                    assertExpectedMessage(request, ioe, expectedMessages);\n-                    assertNoConnectionExpiredException(ioe);\n-                } else {\n-                    throw ee;\n-                }\n+                assertExpectedMessage(request, ioe, expectedMessages);\n+                assertNoConnectionExpiredException(ioe);\n+            } else {\n+                throw ee;\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyPost.java","additions":44,"deletions":59,"binary":false,"changes":103,"status":"modified"}]}