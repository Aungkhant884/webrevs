{"files":[{"patch":"@@ -231,13 +231,0 @@\n-\/\/ Free all pages in the region.\n-void MutableNUMASpace::free_region(MemRegion mr) {\n-  HeapWord *start = align_up(mr.start(), page_size());\n-  HeapWord *end = align_down(mr.end(), page_size());\n-  if (end > start) {\n-    MemRegion aligned_region(start, end);\n-    assert((intptr_t)aligned_region.start()     % page_size() == 0 &&\n-           (intptr_t)aligned_region.byte_size() % page_size() == 0, \"Bad alignment\");\n-    assert(region().contains(aligned_region), \"Sanity\");\n-    os::free_memory((char*)aligned_region.start(), aligned_region.byte_size(), page_size());\n-  }\n-}\n-\n@@ -396,45 +383,0 @@\n-\/\/ Try to merge the invalid region with the bottom or top region by decreasing\n-\/\/ the intersection area. Return the invalid_region aligned to the page_size()\n-\/\/ boundary if it's inside the intersection. Return non-empty invalid_region\n-\/\/ if it lies inside the intersection (also page-aligned).\n-\/\/ |------------------new_region---------------------------------|\n-\/\/ |----------------|-------invalid---|--------------------------|\n-\/\/ |----bottom_region--|---intersection---|------top_region------|\n-void MutableNUMASpace::merge_regions(MemRegion new_region, MemRegion* intersection,\n-                                     MemRegion *invalid_region) {\n-  if (intersection->start() >= invalid_region->start() && intersection->contains(invalid_region->end())) {\n-    *intersection = MemRegion(invalid_region->end(), intersection->end());\n-    *invalid_region = MemRegion();\n-  } else\n-    if (intersection->end() <= invalid_region->end() && intersection->contains(invalid_region->start())) {\n-      *intersection = MemRegion(intersection->start(), invalid_region->start());\n-      *invalid_region = MemRegion();\n-    } else\n-      if (intersection->equals(*invalid_region) || invalid_region->contains(*intersection)) {\n-        *intersection = MemRegion(new_region.start(), new_region.start());\n-        *invalid_region = MemRegion();\n-      } else\n-        if (intersection->contains(invalid_region)) {\n-            \/\/ That's the only case we have to make an additional bias_region() call.\n-            HeapWord* start = invalid_region->start();\n-            HeapWord* end = invalid_region->end();\n-            if (UseLargePages && page_size() >= alignment()) {\n-              HeapWord *p = align_down(start, alignment());\n-              if (new_region.contains(p)) {\n-                start = p;\n-              }\n-              p = align_up(end, alignment());\n-              if (new_region.contains(end)) {\n-                end = p;\n-              }\n-            }\n-            if (intersection->start() > start) {\n-              *intersection = MemRegion(start, intersection->end());\n-            }\n-            if (intersection->end() < end) {\n-              *intersection = MemRegion(intersection->start(), end);\n-            }\n-            *invalid_region = MemRegion(start, end);\n-        }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -100,9 +100,0 @@\n-    void add_invalid_region(MemRegion r) {\n-      if (!_invalid_region.is_empty()) {\n-      _invalid_region.set_start(MIN2(_invalid_region.start(), r.start()));\n-      _invalid_region.set_end(MAX2(_invalid_region.end(), r.end()));\n-      } else {\n-      _invalid_region = r;\n-      }\n-    }\n-\n@@ -164,2 +155,1 @@\n-  \/\/ Free pages in a given region.\n-  void free_region(MemRegion mr);\n+\n@@ -179,9 +169,0 @@\n-  \/\/ Try to merge the invalid region with the bottom or top region by decreasing\n-  \/\/ the intersection area. Return the invalid_region aligned to the page_size()\n-  \/\/ boundary if it's inside the intersection. Return non-empty invalid_region\n-  \/\/ if it lies inside the intersection (also page-aligned).\n-  \/\/ |------------------new_region---------------------------------|\n-  \/\/ |----------------|-------invalid---|--------------------------|\n-  \/\/ |----bottom_region--|---intersection---|------top_region------|\n-  void merge_regions(MemRegion new_region, MemRegion* intersection,\n-                     MemRegion *invalid_region);\n@@ -189,1 +170,1 @@\n- public:\n+public:\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"}]}