{"files":[{"patch":"@@ -1269,1 +1269,3 @@\n-            if (!getFileChooser().getCurrentDirectory().equals(f)) {\n+            File curDir = getFileChooser().getCurrentDirectory();\n+\n+            if (curDir != null && !curDir.equals(f)) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalFileChooserUI.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JFileChooser;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+import javax.swing.filechooser.FileView;\n+import jdk.test.lib.Platform;\n+\/*\n+ * @test\n+ * @bug 6616245\n+ * @key headful\n+ * @requires (os.family == \"windows\" | os.family == \"linux\")\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @summary Test to check if NPE occurs when using custom FileView.\n+ * @run main\/manual FileViewNPETest\n+ *\/\n+public class FileViewNPETest {\n+    static JFrame frame;\n+    static JFileChooser jfc;\n+    static PassFailJFrame passFailJFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                try {\n+                    initialize();\n+                } catch (InterruptedException | InvocationTargetException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    static void initialize() throws InterruptedException, InvocationTargetException {\n+        \/\/Initialize the components\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Select any folder except \"C:\\\\temp\" (In windows) \/ \"\/tmp\"\n+                (In linux) and click to traverse through it.\n+                2. Repeat the traversal try (2 times) and on second try if\n+                NPE occurs then test FAILS else test PASS.\n+                \"\"\";\n+        frame = new JFrame(\"JFileChooser File View NPE test\");\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 5, 40);\n+        jfc = new JFileChooser();\n+        String path = \"\";\n+        if (Platform.isWindows()) {\n+            path = \"C:\" + File.separator + \"temp\";\n+        } else {\n+            path = File.separator + \"tmp\";\n+        }\n+\n+        jfc.setCurrentDirectory(new File(path));\n+        jfc.setFileView(new CustomFileView(path));\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+        frame.add(jfc, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n+\n+class CustomFileView extends FileView {\n+    private String basePath;\n+\n+    public CustomFileView(String path) {\n+        basePath = path;\n+    }\n+\n+    public Boolean isTraversable(File filePath) {\n+        if ((filePath != null) && (filePath.isDirectory())) {\n+            return filePath.getAbsolutePath().startsWith(basePath);\n+        } else {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileViewNPETest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}