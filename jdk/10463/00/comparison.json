{"files":[{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm\/timeout=300 ThreadAPI\n+ * @run testng ThreadAPI\n@@ -34,2 +34,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=no-vmcontinuations\n@@ -40,1 +40,1 @@\n- * @run testng\/othervm\/timeout=300 -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations ThreadAPI\n+ * @run testng\/othervm -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations ThreadAPI\n@@ -55,0 +55,1 @@\n+import java.util.concurrent.ScheduledExecutorService;\n@@ -66,0 +67,3 @@\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n@@ -72,0 +76,26 @@\n+    \/\/ used for scheduling thread interrupt\n+    private ScheduledExecutorService scheduler;\n+\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        ThreadFactory factory = (task) -> {\n+            Thread thread = new Thread(task);\n+            thread.setDaemon(true);\n+            return thread;\n+        };\n+        scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+    }\n+\n+    @AfterClass\n+    public void tearDown() {\n+        scheduler.shutdown();\n+    }\n+\n+    \/**\n+     * An operation that does not return a result but may throw an exception.\n+     *\/\n+    @FunctionalInterface\n+    interface ThrowingRunnable {\n+        void run() throws Exception;\n+    }\n+\n@@ -84,1 +114,1 @@\n-        Thread.sleep(100); \/\/ give time for virtual thread to park\n+        awaitParked(thread);\n@@ -108,1 +138,1 @@\n-            Thread.sleep(100); \/\/ give time for virtual thread to block\n+            awaitBlocked(thread);\n@@ -138,1 +168,1 @@\n-            Thread.sleep(100); \/\/ give time for virtual thread to block\n+            awaitParked(thread);\n@@ -209,1 +239,1 @@\n-            \/\/ Thread.currentThread() returned the virtual thread\n+            \/\/ Thread.currentThread() returned by the virtual thread\n@@ -344,5 +374,5 @@\n-            thread.join(100);\n-            thread.join(100, 0);\n-            thread.join(100, 100);\n-            thread.join(0, 100);\n-            assertFalse(thread.join(Duration.ofMillis(-100)));\n+            thread.join(20);\n+            thread.join(20, 0);\n+            thread.join(20, 20);\n+            thread.join(0, 20);\n+            assertFalse(thread.join(Duration.ofMillis(-20)));\n@@ -350,1 +380,1 @@\n-            assertFalse(thread.join(Duration.ofMillis(100)));\n+            assertFalse(thread.join(Duration.ofMillis(20)));\n@@ -417,1 +447,1 @@\n-                Thread.sleep(100);\n+                Thread.sleep(50);\n@@ -635,1 +665,1 @@\n-        long nanos = TimeUnit.NANOSECONDS.convert(2, TimeUnit.SECONDS);\n+        long nanos = TimeUnit.NANOSECONDS.convert(100, TimeUnit.MILLISECONDS);\n@@ -661,1 +691,1 @@\n-                fail();\n+                fail(\"join not interrupted\");\n@@ -688,1 +718,1 @@\n-                fail();\n+                fail(\"join not interrupted\");\n@@ -707,2 +737,2 @@\n-                for (int i=0; i<10; i++) {\n-                    LockSupport.parkNanos(Duration.ofMillis(100).toNanos());\n+                for (int i = 0; i < 10; i++) {\n+                    LockSupport.parkNanos(Duration.ofMillis(20).toNanos());\n@@ -735,1 +765,1 @@\n-                    LockSupport.parkNanos(Duration.ofMillis(100).toNanos());\n+                    LockSupport.parkNanos(Duration.ofMillis(20).toNanos());\n@@ -740,1 +770,1 @@\n-            assertFalse(thread.join(Duration.ofSeconds(1)));\n+            assertFalse(thread.join(Duration.ofMillis(100)));\n@@ -859,1 +889,1 @@\n-                    fail();\n+                    fail(\"sleep not interrupted\");\n@@ -868,1 +898,1 @@\n-        Thread.sleep(100);  \/\/ give time for thread to block\n+        awaitParked(thread);\n@@ -888,1 +918,1 @@\n-        Thread.sleep(100);  \/\/ give time for thread to block\n+        awaitParked(thread);\n@@ -895,1 +925,1 @@\n-     * Test trying to park, wait or block with interrupt status set.\n+     * Test trying to park with interrupt status set.\n@@ -905,0 +935,1 @@\n+    }\n@@ -906,0 +937,5 @@\n+    \/**\n+     * Test trying to wait with interrupt status set.\n+     *\/\n+    @Test\n+    public void testInterrupt9() throws Exception {\n@@ -912,1 +948,1 @@\n-                    fail();\n+                    fail(\"wait not interrupted\");\n@@ -918,0 +954,1 @@\n+    }\n@@ -919,0 +956,5 @@\n+    \/**\n+     * Test trying to block with interrupt status set.\n+     *\/\n+    @Test\n+    public void testInterrupt10() throws Exception {\n@@ -1188,1 +1230,1 @@\n-     * Test Thread.sleep(2000), thread should sleep.\n+     * Tasks that sleep for 1 second.\n@@ -1190,17 +1232,9 @@\n-    @Test\n-    public void testSleep3() throws Exception {\n-        VThreadRunner.run(() -> {\n-            long start = millisTime();\n-            Thread.sleep(2000);\n-            expectDuration(start, \/*min*\/1900, \/*max*\/4000);\n-        });\n-        VThreadRunner.run(() -> {\n-            long start = millisTime();\n-            Thread.sleep(2000, 0);\n-            expectDuration(start, \/*min*\/1900, \/*max*\/4000);\n-        });\n-        VThreadRunner.run(() -> {\n-            long start = millisTime();\n-            Thread.sleep(Duration.ofMillis(2000));\n-            expectDuration(start, \/*min*\/1900, \/*max*\/4000);\n-        });\n+    @DataProvider(name = \"oneSecondSleepers\")\n+    public Object[][] oneSecondSleepers() {\n+        ThrowingRunnable[] sleepers = {\n+                () -> Thread.sleep(1000),\n+                () -> Thread.sleep(Duration.ofSeconds(1))\n+        };\n+        return Arrays.stream(sleepers)\n+                .map(s -> new Object[] { s })\n+                .toArray(Object[][]::new);\n@@ -1210,1 +1244,1 @@\n-     * Test Thread.sleep with interrupt status set.\n+     * Test Thread.sleep duration.\n@@ -1212,14 +1246,2 @@\n-    @Test\n-    public void testSleep4() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Thread me = Thread.currentThread();\n-            me.interrupt();\n-            try {\n-                Thread.sleep(0);\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ expected\n-                assertFalse(me.isInterrupted());\n-            }\n-        });\n-\n+    @Test(dataProvider = \"oneSecondSleepers\")\n+    public void testSleep3(ThrowingRunnable sleeper) throws Exception {\n@@ -1227,9 +1249,3 @@\n-            Thread me = Thread.currentThread();\n-            me.interrupt();\n-            try {\n-                Thread.sleep(0, 0);\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ expected\n-                assertFalse(me.isInterrupted());\n-            }\n+            long start = millisTime();\n+            sleeper.run();\n+            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n@@ -1237,0 +1253,1 @@\n+    }\n@@ -1238,11 +1255,17 @@\n-        VThreadRunner.run(() -> {\n-            Thread me = Thread.currentThread();\n-            me.interrupt();\n-            try {\n-                Thread.sleep(1000);\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ expected\n-                assertFalse(me.isInterrupted());\n-            }\n-        });\n+    \/**\n+     * Tasks that sleep for zero or longer duration.\n+     *\/\n+    @DataProvider(name = \"sleepers\")\n+    public Object[][] sleepers() {\n+        ThrowingRunnable[] sleepers = {\n+                () -> Thread.sleep(0),\n+                () -> Thread.sleep(0, 0),\n+                () -> Thread.sleep(1000),\n+                () -> Thread.sleep(1000, 0),\n+                () -> Thread.sleep(Duration.ofMillis(0)),\n+                () -> Thread.sleep(Duration.ofMillis(1000)),\n+        };\n+        return Arrays.stream(sleepers)\n+                .map(s -> new Object[] { s })\n+                .toArray(Object[][]::new);\n+    }\n@@ -1250,0 +1273,5 @@\n+    \/**\n+     * Test Thread.sleep with interrupt status set.\n+     *\/\n+    @Test(dataProvider = \"sleepers\")\n+    public void testSleep4(ThrowingRunnable sleeper) throws Exception {\n@@ -1254,2 +1282,2 @@\n-                Thread.sleep(1000, 0);\n-                fail();\n+                sleeper.run();\n+                fail(\"sleep was not interrupted\");\n@@ -1261,0 +1289,1 @@\n+    }\n@@ -1262,0 +1291,5 @@\n+    \/**\n+     * Test Thread.sleep with interrupt status set and a negative duration.\n+     *\/\n+    @Test\n+    public void testSleep4() throws Exception {\n@@ -1268,24 +1302,0 @@\n-\n-        VThreadRunner.run(() -> {\n-            Thread me = Thread.currentThread();\n-            me.interrupt();\n-            try {\n-                Thread.sleep(Duration.ofMillis(0));\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ expected\n-                assertFalse(me.isInterrupted());\n-            }\n-        });\n-\n-        VThreadRunner.run(() -> {\n-            Thread me = Thread.currentThread();\n-            me.interrupt();\n-            try {\n-                Thread.sleep(Duration.ofMillis(1000));\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ expected\n-                assertFalse(me.isInterrupted());\n-            }\n-        });\n@@ -1295,1 +1305,1 @@\n-     * Test interrupting Thread.sleep\n+     * Tasks that sleep for a long time.\n@@ -1297,25 +1307,11 @@\n-    @Test\n-    public void testSleep5() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Thread t = Thread.currentThread();\n-            scheduleInterrupt(t, 2000);\n-            try {\n-                Thread.sleep(20*1000);\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ interrupt status should be cleared\n-                assertFalse(t.isInterrupted());\n-            }\n-        });\n-\n-        VThreadRunner.run(() -> {\n-            Thread t = Thread.currentThread();\n-            scheduleInterrupt(t, 2000);\n-            try {\n-                Thread.sleep(20*1000, 0);\n-                fail();\n-            } catch (InterruptedException e) {\n-                \/\/ interrupt status should be cleared\n-                assertFalse(t.isInterrupted());\n-            }\n-        });\n+    @DataProvider(name = \"longSleepers\")\n+    public Object[][] longSleepers() {\n+        ThrowingRunnable[] sleepers = {\n+                () -> Thread.sleep(20_000),\n+                () -> Thread.sleep(20_000, 0),\n+                () -> Thread.sleep(Duration.ofSeconds(20)),\n+        };\n+        return Arrays.stream(sleepers)\n+                .map(s -> new Object[] { s })\n+                .toArray(Object[][]::new);\n+    }\n@@ -1323,0 +1319,5 @@\n+    \/**\n+     * Test interrupting Thread.sleep.\n+     *\/\n+    @Test(dataProvider = \"longSleepers\")\n+    public void testSleep5(ThrowingRunnable sleeper) throws Exception {\n@@ -1325,1 +1326,1 @@\n-            scheduleInterrupt(t, 2000);\n+            scheduleInterrupt(t, 100);\n@@ -1327,2 +1328,2 @@\n-                Thread.sleep(Duration.ofSeconds(20));\n-                fail();\n+                sleeper.run();\n+                fail(\"sleep was not interrupted\");\n@@ -1337,1 +1338,1 @@\n-     * Test that Thread.sleep should not disrupt parking permit.\n+     * Test that Thread.sleep does not disrupt parking permit.\n@@ -1345,2 +1346,2 @@\n-            Thread.sleep(2000);\n-            expectDuration(start, \/*min*\/1900, \/*max*\/4000);\n+            Thread.sleep(1000);\n+            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n@@ -1360,1 +1361,0 @@\n-            long start = millisTime();\n@@ -1362,6 +1362,4 @@\n-                Thread.sleep(2000);\n-                long elapsed = millisTime() - start;\n-                if (elapsed < 1900) {\n-                    exc.set(new RuntimeException(\"sleep too short\"));\n-                }\n-            } catch (InterruptedException e) {\n+                long start = millisTime();\n+                Thread.sleep(1000);\n+                expectDuration(start, \/*min*\/900, \/*max*\/4000);\n+            } catch (Exception e) {\n@@ -1373,1 +1371,1 @@\n-        for (int i=0; i<5; i++) {\n+        for (int i = 0; i < 5; i++) {\n@@ -1385,1 +1383,1 @@\n-     * Test Thread.sleep when pinned\n+     * Test Thread.sleep when pinned.\n@@ -1392,1 +1390,1 @@\n-                Thread.sleep(2000);\n+                Thread.sleep(1000);\n@@ -1394,1 +1392,1 @@\n-            expectDuration(start, \/*min*\/1900, \/*max*\/4000);\n+            expectDuration(start, \/*min*\/900, \/*max*\/4000);\n@@ -1399,1 +1397,1 @@\n-     * Test Thread.sleep when pinned and with interrupt status set\n+     * Test Thread.sleep when pinned and with interrupt status set.\n@@ -1410,1 +1408,1 @@\n-                fail();\n+                fail(\"sleep not interrupted\");\n@@ -1419,1 +1417,1 @@\n-     * Test interrupting Thread.sleep when pinned\n+     * Test interrupting Thread.sleep when pinned.\n@@ -1425,1 +1423,1 @@\n-            scheduleInterrupt(t, 2000);\n+            scheduleInterrupt(t, 100);\n@@ -1430,1 +1428,1 @@\n-                fail();\n+                fail(\"sleep not interrupted\");\n@@ -2296,0 +2294,24 @@\n+    \/**\n+     * Waits for the given thread to park.\n+     *\/\n+    static void awaitParked(Thread thread) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != Thread.State.WAITING && state != Thread.State.TIMED_WAITING) {\n+            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+\n+    \/**\n+     * Waits for the given thread to block waiting on a monitor.\n+     *\/\n+    static void awaitBlocked(Thread thread) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != Thread.State.BLOCKED) {\n+            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+\n@@ -2299,10 +2321,2 @@\n-    private static void scheduleInterrupt(Thread thread, long delay) {\n-        Runnable interruptTask = () -> {\n-            try {\n-                Thread.sleep(delay);\n-                thread.interrupt();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-        };\n-        new Thread(interruptTask).start();\n+    private void scheduleInterrupt(Thread thread, long delayInMillis) {\n+        scheduler.schedule(thread::interrupt, delayInMillis, TimeUnit.MILLISECONDS);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":180,"deletions":166,"binary":false,"changes":346,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -26,3 +26,0 @@\n- * @requires vm.debug != true\n- * @compile --enable-preview -source ${jdk.version} PinALot.java\n- * @run main\/othervm --enable-preview PinALot\n@@ -30,0 +27,3 @@\n+ * @requires vm.debug != true\n+ * @enablePreview\n+ * @run main PinALot 500000\n@@ -32,1 +32,1 @@\n-\/**\n+\/*\n@@ -35,2 +35,2 @@\n- * @compile --enable-preview -source ${jdk.version} PinALot.java\n- * @run main\/othervm\/timeout=300 --enable-preview PinALot 200000\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 PinALot 200000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PinALot.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,3 +24,11 @@\n-\/**\n- * @test\n- * @summary Stress test virtual threads with SynchronousQueue and LinkedTransferQueue\n+\/*\n+ * @test id=sq\n+ * @summary Stress test virtual threads with a SynchronousQueue\n+ * @requires vm.debug != true\n+ * @enablePreview\n+ * @run main PingPong SQ 500000\n+ *\/\n+\n+\/*\n+ * @test id=ltq\n+ * @summary Stress test virtual threads with a LinkedTransferQueue\n@@ -28,3 +36,2 @@\n- * @compile --enable-preview -source ${jdk.version} PingPong.java\n- * @run main\/othervm --enable-preview PingPong SQ 1000000\n- * @run main\/othervm --enable-preview PingPong LTQ 1000000\n+ * @enablePreview\n+ * @run main PingPong LTQ 500000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PingPong.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} Skynet.java\n- * @run main\/othervm\/timeout=300 --enable-preview Skynet\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 Skynet\n@@ -32,1 +32,1 @@\n-\/**\n+\/*\n@@ -36,2 +36,2 @@\n- * @compile --enable-preview -source ${jdk.version} Skynet.java\n- * @run main\/othervm\/timeout=300 --enable-preview -XX:+UnlockDiagnosticVMOptions\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 -XX:+UnlockDiagnosticVMOptions\n@@ -46,2 +46,0 @@\n-    public static final int ITERATIONS = 10;\n-\n@@ -49,1 +47,2 @@\n-        for (int i = 0; i < ITERATIONS; i++) {\n+        int iterations = (args.length > 0) ? Integer.parseInt(args[0]) : 10;\n+        for (int i = 0; i < iterations; i++) {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/Skynet.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} SleepALot.java\n- * @run main\/othervm --enable-preview SleepALot\n+ * @enablePreview\n+ * @run main\/othervm SleepALot 500000\n@@ -32,1 +32,1 @@\n-\/**\n+\/*\n@@ -35,2 +35,2 @@\n- * @compile --enable-preview -source ${jdk.version} SleepALot.java\n- * @run main\/othervm\/timeout=300 --enable-preview SleepALot 200000\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 SleepALot 200000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/SleepALot.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} TimedGet.java\n- * @run main\/othervm -Xmx1g --enable-preview TimedGet\n+ * @enablePreview\n+ * @run main\/othervm -Xmx1g TimedGet 100000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/TimedGet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} YieldALot.java\n- * @run main\/othervm --enable-preview YieldALot\n+ * @enablePreview\n+ * @run main YieldALot 500000\n@@ -32,1 +32,1 @@\n-\/**\n+\/*\n@@ -35,2 +35,2 @@\n- * @compile --enable-preview -source ${jdk.version} YieldALot.java\n- * @run main\/othervm\/timeout=360 --enable-preview YieldALot 200000\n+ * @enablePreview\n+ * @run main YieldALot 200000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/YieldALot.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} CloseTest.java\n- * @run testng\/othervm --enable-preview CloseTest\n+ * @enablePreview\n+ * @run testng CloseTest\n@@ -84,1 +84,1 @@\n-            Thread.sleep(Duration.ofSeconds(1));\n+            Thread.sleep(Duration.ofMillis(100));\n@@ -91,1 +91,1 @@\n-        assertEquals(future.get(), \"foo\");\n+        assertEquals(future.resultNow(), \"foo\");\n@@ -102,1 +102,1 @@\n-            Thread.sleep(Duration.ofSeconds(1));\n+            Thread.sleep(Duration.ofMillis(100));\n@@ -113,1 +113,1 @@\n-        assertEquals(future.get(), \"foo\");\n+        assertEquals(future.resultNow(), \"foo\");\n","filename":"test\/jdk\/java\/util\/concurrent\/ExecutorService\/CloseTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=platform\n@@ -27,2 +27,8 @@\n- * @compile --enable-preview -source ${jdk.version} ThreadPerTaskExecutorTest.java\n- * @run testng\/othervm\/timeout=300 --enable-preview ThreadPerTaskExecutorTest\n+ * @enablePreview\n+ * @run testng\/othervm -DthreadFactory=platform ThreadPerTaskExecutorTest\n+ *\/\n+\n+\/*\n+ * @test id=virtual\n+ * @enablePreview\n+ * @run testng\/othervm -DthreadFactory=virtual ThreadPerTaskExecutorTest\n@@ -32,0 +38,1 @@\n+import java.util.Arrays;\n@@ -57,0 +64,1 @@\n+    private Object[][] threadFactories;\n@@ -65,1 +73,13 @@\n-        scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+\n+        \/\/ thread factories\n+        String value = System.getProperty(\"threadFactory\");\n+        List<ThreadFactory> list = new ArrayList<>();\n+        if (value == null || value.equals(\"platform\"))\n+            list.add(Thread.ofPlatform().factory());\n+        if (value == null || value.equals(\"virtual\"))\n+            list.add(Thread.ofVirtual().factory());\n+        assertTrue(list.size() > 0, \"No thread factories for tests\");\n+        this.threadFactories = list.stream()\n+                .map(f -> new Object[] { f })\n+                .toArray(Object[][]::new);\n@@ -75,4 +95,1 @@\n-        return new Object[][] {\n-            { Executors.defaultThreadFactory(), },\n-            { Thread.ofVirtual().factory(), },\n-        };\n+        return threadFactories;\n@@ -83,6 +100,4 @@\n-        var defaultThreadFactory = Executors.defaultThreadFactory();\n-        var virtualThreadFactory = Thread.ofVirtual().factory();\n-        return new Object[][] {\n-            { Executors.newThreadPerTaskExecutor(defaultThreadFactory), },\n-            { Executors.newThreadPerTaskExecutor(virtualThreadFactory), },\n-        };\n+        return Arrays.stream(threadFactories)\n+                .map(f -> Executors.newThreadPerTaskExecutor((ThreadFactory) f[0]))\n+                .map(e -> new Object[] { e })\n+                .toArray(Object[][]::new);\n@@ -219,1 +234,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -404,1 +419,1 @@\n-                fail();\n+                fail(\"invokeAny did not throw\");\n@@ -422,1 +437,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -427,1 +442,1 @@\n-                fail();\n+                fail(\"invokeAny did not throw\");\n@@ -451,1 +466,1 @@\n-     * completion of the last task is delayed.\n+     * completion of the first task to complete normally is delayed.\n@@ -458,1 +473,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -561,1 +576,1 @@\n-                fail();\n+                fail(\"invokeAny did not throw\");\n@@ -587,1 +602,1 @@\n-                fail();\n+                fail(\"invokeAny did not throw\");\n@@ -660,1 +675,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -687,1 +702,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -714,1 +729,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -784,1 +799,1 @@\n-                fail();\n+                fail(\"invokeAll did not throw\");\n@@ -808,1 +823,1 @@\n-                fail();\n+                fail(\"invokeAll did not throw\");\n@@ -818,1 +833,1 @@\n-     * Test interrupt with thread blocked in invokeAll\n+     * Test interrupt with thread blocked in invokeAll.\n@@ -828,1 +843,1 @@\n-                fail();\n+                fail(\"invokeAll did not throw\");\n@@ -844,1 +859,1 @@\n-     * Test interrupt with thread blocked in timed-invokeAll\n+     * Test interrupt with thread blocked in timed-invokeAll.\n@@ -854,1 +869,1 @@\n-                fail();\n+                fail(\"invokeAll did not throw\");\n","filename":"test\/jdk\/java\/util\/concurrent\/ThreadPerTaskExecutor\/ThreadPerTaskExecutorTest.java","additions":46,"deletions":31,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=platform\n@@ -30,1 +30,8 @@\n- * @run testng\/othervm StructuredTaskScopeTest\n+ * @run testng\/othervm -DthreadFactory=platform StructuredTaskScopeTest\n+ *\/\n+\n+\/*\n+ * @test id=virtual\n+ * @enablePreview\n+ * @modules jdk.incubator.concurrent\n+ * @run testng\/othervm -DthreadFactory=virtual StructuredTaskScopeTest\n@@ -40,0 +47,1 @@\n+import java.util.ArrayList;\n@@ -68,0 +76,1 @@\n+    private Object[][] threadFactories;\n@@ -76,1 +85,13 @@\n-        scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+\n+        \/\/ thread factories\n+        String value = System.getProperty(\"threadFactory\");\n+        List<ThreadFactory> list = new ArrayList<>();\n+        if (value == null || value.equals(\"platform\"))\n+            list.add(Thread.ofPlatform().factory());\n+        if (value == null || value.equals(\"virtual\"))\n+            list.add(Thread.ofVirtual().factory());\n+        assertTrue(list.size() > 0, \"No thread factories for tests\");\n+        this.threadFactories = list.stream()\n+                .map(f -> new Object[] { f })\n+                .toArray(Object[][]::new);\n@@ -89,6 +110,1 @@\n-        var defaultThreadFactory = Executors.defaultThreadFactory();\n-        var virtualThreadFactory = Thread.ofVirtual().factory();\n-        return new Object[][] {\n-                { defaultThreadFactory, },\n-                { virtualThreadFactory, },\n-        };\n+        return threadFactories;\n@@ -287,1 +303,1 @@\n-            \/\/ start a second task to shutdown the scope after 500ms\n+            \/\/ start a second task to shutdown the scope after a short delay\n@@ -289,1 +305,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(100));\n@@ -322,1 +338,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -365,1 +381,1 @@\n-                Thread.sleep(Duration.ofSeconds(3));\n+                Thread.sleep(Duration.ofMillis(100));\n@@ -373,1 +389,1 @@\n-                fail();\n+                fail(\"join did not throw\");\n@@ -399,1 +415,1 @@\n-                fail();\n+                fail(\"join did not throw\");\n@@ -449,1 +465,1 @@\n-                Thread.sleep(Duration.ofMillis(500));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -545,2 +561,2 @@\n-                        scope.joinUntil(Instant.now().plusSeconds(1));\n-                        fail();\n+                        scope.joinUntil(Instant.now().plusMillis(50));\n+                        fail(\"joinUntil did not throw\");\n@@ -575,1 +591,1 @@\n-                    fail();\n+                    fail(\"joinUntil did not throw\");\n@@ -583,1 +599,1 @@\n-                    fail();\n+                    fail(\"joinUntil did not throw\");\n@@ -601,1 +617,1 @@\n-                Thread.sleep(Duration.ofSeconds(3));\n+                Thread.sleep(Duration.ofMillis(100));\n@@ -605,1 +621,1 @@\n-            \/\/ join should throw\n+            \/\/ joinUntil should throw\n@@ -609,1 +625,1 @@\n-                fail();\n+                fail(\"joinUntil did not throw\");\n@@ -621,1 +637,1 @@\n-     * Test interrupt of thread blocked in joinUntil\n+     * Test interrupt of thread blocked in joinUntil.\n@@ -631,1 +647,1 @@\n-            \/\/ join should throw\n+            \/\/ joinUntil should throw\n@@ -635,1 +651,1 @@\n-                fail();\n+                fail(\"joinUntil did not throw\");\n@@ -790,1 +806,1 @@\n-            scheduler.schedule(latch::countDown, 1, TimeUnit.SECONDS);\n+            scheduler.schedule(latch::countDown, 100, TimeUnit.MILLISECONDS);\n@@ -849,1 +865,1 @@\n-                    fail();\n+                    fail(\"close did not throw\");\n@@ -873,1 +889,1 @@\n-                Thread.sleep(Duration.ofMillis(100));\n+                Thread.sleep(Duration.ofMillis(20));\n@@ -893,1 +909,1 @@\n-                Thread.sleep(Duration.ofMillis(100));\n+                Thread.sleep(Duration.ofMillis(20));\n@@ -920,2 +936,2 @@\n-                future.get(100, TimeUnit.MICROSECONDS);\n-                fail();\n+                future.get(20, TimeUnit.MILLISECONDS);\n+                fail(\"Future.get did not throw\");\n","filename":"test\/jdk\/jdk\/incubator\/concurrent\/StructuredTaskScope\/StructuredTaskScopeTest.java","additions":48,"deletions":32,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=platform\n@@ -28,2 +28,9 @@\n- * @compile --enable-preview -source ${jdk.version} ThreadFlockTest.java\n- * @run testng\/othervm --enable-preview ThreadFlockTest\n+ * @enablePreview\n+ * @run testng\/othervm -DthreadFactory=platform ThreadFlockTest\n+ *\/\n+\n+\/*\n+ * @test id=virtual\n+ * @modules java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @run testng\/othervm -DthreadFactory=virtual ThreadFlockTest\n@@ -49,0 +56,1 @@\n+    private Object[][] threadFactories;\n@@ -57,1 +65,13 @@\n-        scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(factory);\n+\n+        \/\/ thread factories\n+        String value = System.getProperty(\"threadFactory\");\n+        List<ThreadFactory> list = new ArrayList<>();\n+        if (value == null || value.equals(\"platform\"))\n+            list.add(Thread.ofPlatform().factory());\n+        if (value == null || value.equals(\"virtual\"))\n+            list.add(Thread.ofVirtual().factory());\n+        assertTrue(list.size() > 0, \"No thread factories for tests\");\n+        this.threadFactories = list.stream()\n+                .map(f -> new Object[] { f })\n+                .toArray(Object[][]::new);\n@@ -67,6 +87,1 @@\n-        var defaultThreadFactory = Executors.defaultThreadFactory();\n-        var virtualThreadFactory = Thread.ofVirtual().factory();\n-        return new Object[][] {\n-                { defaultThreadFactory, },\n-                { virtualThreadFactory, },\n-        };\n+        return threadFactories;\n@@ -384,1 +399,1 @@\n-                    Thread.sleep(Duration.ofSeconds(1));\n+                    Thread.sleep(Duration.ofMillis(50));\n@@ -434,1 +449,1 @@\n-                    fail();\n+                    fail(\"awaitAll did not throw\");\n@@ -461,2 +476,2 @@\n-                        flock.awaitAll(Duration.ofSeconds(1));\n-                        fail();\n+                        flock.awaitAll(Duration.ofMillis(50));\n+                        fail(\"awaitAll did not throw\");\n@@ -491,1 +506,1 @@\n-                    fail();\n+                    fail(\"awaitAll did not throw\");\n@@ -495,1 +510,1 @@\n-                    fail();\n+                    fail(\"awaitAll did not throw\");\n@@ -530,1 +545,1 @@\n-                fail();\n+                fail(\"awaitAll did not throw\");\n@@ -540,1 +555,1 @@\n-                fail();\n+                fail(\"awaitAll did not throw\");\n@@ -542,1 +557,1 @@\n-                fail();\n+                fail(\"TimeoutException not expected\");\n@@ -582,1 +597,1 @@\n-                fail();\n+                fail(\"awaitAll did not throw\");\n@@ -591,1 +606,1 @@\n-                fail();\n+                fail(\"awaitAll did not throw\");\n@@ -593,1 +608,1 @@\n-                fail();\n+                fail(\"TimeoutException not expected\");\n@@ -709,1 +724,1 @@\n-                try { Thread.sleep(Duration.ofSeconds(1)); } catch (Exception e) { }\n+                try { Thread.sleep(Duration.ofMillis(500)); } catch (Exception e) { }\n@@ -785,1 +800,1 @@\n-                Thread.sleep(Duration.ofSeconds(1));\n+                Thread.sleep(Duration.ofMillis(50));\n@@ -961,1 +976,1 @@\n-                    fail();\n+                    fail(\"close did not throw\");\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/ThreadFlockTest.java","additions":40,"deletions":25,"binary":false,"changes":65,"status":"modified"}]}