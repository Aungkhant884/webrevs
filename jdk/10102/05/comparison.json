{"files":[{"patch":"@@ -41,3 +41,30 @@\n- * This class implements an input stream filter for reading files in the\n- * ZIP file format. Includes support for both compressed and uncompressed\n- * entries.\n+ * An input stream for reading compressed and uncompressed\n+ * {@linkplain ZipEntry ZIP file entries} from a stream of bytes in the ZIP file\n+ * format.\n+ *\n+ * <H2>Reading Zip File Entries<\/H2>\n+ *\n+ * The {@link #getNextEntry()} method is used to read the next ZIP file entry\n+ * (Local file (LOC) header record in the ZIP format) and position the stream at\n+ * the entry's file data. The file data may read using one of the\n+ * {@code ZipInputStream} read methods such\n+ * as {@link #read(byte[], int, int) read} or {@link #readAllBytes() readAllBytes()}.\n+ * For example:\n+ *    {@snippet :\n+ *      Path jar = Path.of(\"foo.jar\");\n+ *      try (InputStream is = Files.newInputStream(jar);\n+ *           ZipInputStream zis = new ZipInputStream(is)) {\n+ *          ZipEntry ze;\n+ *          while((ze= zis.getNextEntry()) != null) {\n+ *             var bytes = zis.readAllBytes();\n+ *             System.out.printf(\"Entry: %s, bytes read: %s%n\", ze.getName(),\n+ *                     bytes.length);\n+ *          }\n+ *      }\n+ *    }\n+ * @apiNote\n+ * The LOC header contains metadata about the Zip file entry. {@code ZipInputStream}\n+ * does not read the Central directory (CEN) header for the entry and therefore\n+ * will not have access to its metadata such as the external file attributes.\n+ * {@linkplain ZipFile} may be used when the information stored within\n+ * the CEN header is required.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"}]}