{"files":[{"patch":"@@ -179,1 +179,1 @@\n-            switch (provName) {\n+            p = switch (provName) {\n@@ -181,1 +181,1 @@\n-                    p = new sun.security.provider.Sun();\n+                    new sun.security.provider.Sun();\n@@ -183,1 +183,1 @@\n-                    p = new sun.security.rsa.SunRsaSign();\n+                    new sun.security.rsa.SunRsaSign();\n@@ -185,3 +185,3 @@\n-                    p = new com.sun.crypto.provider.SunJCE();\n-                case \"SunJSSE\" -> p = new sun.security.ssl.SunJSSE();\n-                case \"SunEC\" -> p = new sun.security.ec.SunEC();\n+                    new com.sun.crypto.provider.SunJCE();\n+                case \"SunJSSE\" -> new sun.security.ssl.SunJSSE();\n+                case \"SunEC\" -> new sun.security.ec.SunEC();\n@@ -212,1 +212,1 @@\n-                    p = tmp;\n+                    yield tmp;\n@@ -222,1 +222,1 @@\n-                        return null;\n+                        yield null;\n@@ -227,1 +227,1 @@\n-                        p = doLoadProvider();\n+                        yield doLoadProvider();\n@@ -232,1 +232,1 @@\n-            }\n+            };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/ProviderConfig.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    \/\/provides java.security.Provider with sun.security.ec.SunEC;\n","filename":"src\/jdk.crypto.ec\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -78,0 +78,5 @@\n+ * @run main\/othervm --limit-modules java.base\n+ *              -DSERVER_PROTOCOL=SSLv3,TLSv1,TLSv1.1,TLSv1.2,TLSv1.3\n+ *              -DCLIENT_PROTOCOL=TLSv1.3\n+ *              -DCIPHER=TLS_AES_256_GCM_SHA384\n+ *          TestJSSE\n","filename":"test\/jdk\/javax\/net\/ssl\/TLS\/TestJSSEClientProtocol.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,0 +63,5 @@\n+ * @run main\/othervm --limit-modules java.base\n+ *              -DSERVER_PROTOCOL=TLSv1.2\n+ *              -DCLIENT_PROTOCOL=TLSv1.3\n+ *              -DCIPHER=TLS_AES_256_GCM_SHA384\n+ *          TestJSSE javax.net.ssl.SSLHandshakeException\n","filename":"test\/jdk\/javax\/net\/ssl\/TLS\/TestJSSEServerProtocol.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import java.util.Optional;\n+import java.lang.module.ModuleFinder;\n+import static jdk.test.lib.Asserts.*;\n@@ -29,2 +30,2 @@\n- * @summary Verify jdk.crypto.ec dummy module exists\n- * @modules jdk.crypto.ec\n+ * @library \/test\/lib\n+ * @summary Verify jdk.crypto.ec empty module\n@@ -34,3 +35,1 @@\n-\/* This test verifies that with jdk.crypto.ec loaded that the EC modules is\n- * available. The KeyPairGenerator is just to verify SunEC is working.  Other\n- * tests access internal sun.security.ec APIs from java.base (see TestEC.java)\n+\/* This test verifies jdk.crypto.ec is in the image, but not resolvable.\n@@ -40,4 +39,6 @@\n-        if (!ModuleLayer.boot().findModule(\"jdk.crypto.ec\").isPresent()) {\n-            throw new AssertionError(\"jdk.crypto.ec module does not exist\");\n-        }\n-        System.out.println(\"jdk.crypto.ec module exists\");\n+        \/\/ True if module is found in the image.\n+        assertTrue(ModuleFinder.ofSystem().find(\"jdk.crypto.ec\").isPresent(),\n+            \"jdk.crypto.ec was not found in image.\");\n+        \/\/ Since the module empty, isPresent() should be false.\n+        assertFalse(ModuleLayer.boot().findModule(\"jdk.crypto.ec\").\n+            isPresent(), \"jdk.crypto.ec shouldn't be resolvable.\");\n","filename":"test\/jdk\/sun\/security\/ec\/ecModuleCheck.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}