{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,2 @@\n-    private static final int SIZE = 4096;\n+    private static final int BASE_SIZE = 4096;\n+    private static long blockSize;\n@@ -51,1 +52,1 @@\n-    private static void testWrite(Path p) throws Exception {\n+    private static int testWrite(Path p) throws Exception {\n@@ -54,3 +55,4 @@\n-            FileStore fs = Files.getFileStore(p);\n-            int alignment = (int)fs.getBlockSize();\n-            ByteBuffer src = ByteBuffer.allocateDirect(SIZE + alignment - 1)\n+            int bs = (int)blockSize;\n+            int size = Math.max(BASE_SIZE, bs);\n+            int alignment = bs;\n+            ByteBuffer src = ByteBuffer.allocateDirect(size + alignment - 1)\n@@ -58,1 +60,2 @@\n-            for (int j = 0; j < SIZE; j++) {\n+            assert src.capacity() != 0;\n+            for (int j = 0; j < size; j++) {\n@@ -63,0 +66,1 @@\n+            return size;\n@@ -66,1 +70,1 @@\n-    private static void testRead(Path p) throws Exception {\n+    private static int testRead(Path p) throws Exception {\n@@ -68,3 +72,4 @@\n-            FileStore fs = Files.getFileStore(p);\n-            int alignment = (int)fs.getBlockSize();\n-            ByteBuffer dest = ByteBuffer.allocateDirect(SIZE + alignment - 1)\n+            int bs = (int)blockSize;\n+            int size = Math.max(BASE_SIZE, bs);\n+            int alignment = bs;\n+            ByteBuffer dest = ByteBuffer.allocateDirect(size + alignment - 1)\n@@ -72,0 +77,1 @@\n+            assert dest.capacity() != 0;\n@@ -73,0 +79,1 @@\n+            return size;\n@@ -81,5 +88,1 @@\n-    public static boolean isDirectIOSupportedByFS(Path p) throws Exception {\n-        return true;\n-    }\n-\n-    private static boolean isFileInCache(Path p) {\n+    private static boolean isFileInCache(int size, Path p) {\n@@ -87,1 +90,1 @@\n-        return isFileInCache0(SIZE, path);\n+        return isFileInCache0(size, path);\n@@ -94,5 +97,1 @@\n-\n-        if (!isDirectIOSupportedByFS(p)) {\n-            Files.delete(p);\n-            return;\n-        }\n+        blockSize = Files.getFileStore(p).getBlockSize();\n@@ -103,2 +102,2 @@\n-            testWrite(p);\n-            if (isFileInCache(p)) {\n+            int size = testWrite(p);\n+            if (isFileInCache(size, p)) {\n@@ -108,2 +107,2 @@\n-            testRead(p);\n-            if (isFileInCache(p)) {\n+            size = testRead(p);\n+            if (isFileInCache(size, p)) {\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/directio\/DirectIOTest.java","additions":25,"deletions":26,"binary":false,"changes":51,"status":"modified"}]}