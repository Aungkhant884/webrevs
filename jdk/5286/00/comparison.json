{"files":[{"patch":"@@ -43,0 +43,2 @@\n+import java.util.Objects;\n+\n@@ -78,0 +80,5 @@\n+    \/\/ A one slot local ccache for krb5 login. This is only used when\n+    \/\/ useSubjectCredsOnly is false.\n+    static String lastClient = null;\n+    static KerberosTicket lastTicket = null;\n+\n@@ -85,1 +92,1 @@\n-    static KerberosTicket getInitialTicket(GSSCaller caller,\n+    static synchronized KerberosTicket getInitialTicket(GSSCaller caller,\n@@ -98,3 +105,32 @@\n-            Subject subject = GSSUtil.login(caller, GSSUtil.GSS_KRB5_MECH_OID);\n-            ticket = SubjectComber.find(subject,\n-                    null, clientPrincipal, KerberosTicket.class);\n+            if (Objects.equals(clientPrincipal, lastClient)\n+                    && lastTicket != null) {\n+                if (lastTicket.isCurrent()) {\n+                    if (DEBUG) {\n+                        System.out.println(\"getInitialTicket: use cached ticket\");\n+                    }\n+                    ticket = lastTicket;\n+                } else if (lastTicket.isRenewable()) {\n+                    try {\n+                        lastTicket.refresh();\n+                        if (DEBUG) {\n+                            System.out.println(\"getInitialTicket: renew cached ticket\");\n+                        }\n+                        ticket = lastTicket;\n+                    } catch (Exception e) {\n+                        if (DEBUG) {\n+                            System.out.println(\"getInitialTicket: renew cached ticket failed\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (ticket == null) {\n+                Subject subject = GSSUtil.login(caller, GSSUtil.GSS_KRB5_MECH_OID);\n+                ticket = SubjectComber.find(subject,\n+                        null, clientPrincipal, KerberosTicket.class);\n+                lastClient = clientPrincipal;\n+                lastTicket = ticket;\n+                if (DEBUG) {\n+                    System.out.println(\"getInitialTicket: retrieve ticket from KDC\");\n+                }\n+            }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Util.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6859027\n+ * @summary Duplicate communications to KDC in GSSManager.createCredential(usage)\n+ * @library \/test\/lib\n+ * @compile -XDignore.symbol.file MultiMechsLoginOnce.java\n+ * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts MultiMechsLoginOnce me\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts MultiMechsLoginOnce null\n+ *\/\n+\n+import org.ietf.jgss.GSSCredential;\n+import org.ietf.jgss.GSSManager;\n+import org.ietf.jgss.GSSName;\n+import org.ietf.jgss.Oid;\n+\n+public class MultiMechsLoginOnce {\n+\n+    static int count = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        new OneKDC(null) {\n+            @Override\n+            protected byte[] processAsReq(byte[] in) throws Exception {\n+                count++;\n+                return super.processAsReq(in);\n+            }\n+        }.writeJAASConf()\n+                .setOption(KDC.Option.PREAUTH_REQUIRED, false);\n+\n+        System.setProperty(\"javax.security.auth.useSubjectCredsOnly\", \"false\");\n+        GSSManager man = GSSManager.getInstance();\n+\n+        \/\/ Test both with name and without name\n+        GSSName me = args[0].equals(\"me\")\n+                ? man.createName(OneKDC.USER, GSSName.NT_USER_NAME)\n+                : null;\n+        GSSCredential cred = man.createCredential(\n+                me,\n+                GSSCredential.DEFAULT_LIFETIME,\n+                (Oid[])null,\n+                GSSCredential.INITIATE_ONLY);\n+        if (cred.getMechs().length < 2) {\n+            throw new RuntimeException(\"Not multi mech: \" + cred);\n+        }\n+        if (count != 1) {\n+            throw new RuntimeException(\"Request not once: \" + count);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/MultiMechsLoginOnce.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}