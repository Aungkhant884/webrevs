{"files":[{"patch":"@@ -1605,1 +1605,0 @@\n-  static bool _whitebox_used;\n@@ -1608,4 +1607,0 @@\n-  \/\/ This function is needed only for testing purposes to support multiple\n-  \/\/ enable&disable notifyJvmti events. Otherwise, there can be only one call\n-  \/\/ to enable_virtual_threads_notify_jvmti() for late binding agents. There\n-  \/\/ have to be no JvmtiThreadState's and need to correct them in such a case.\n@@ -1621,2 +1616,1 @@\n-    \/\/ It was not maintained while notifyJvmti was disabled but there can be\n-    \/\/ a leftover from previous cycle when notification were enabled.\n+    \/\/ It was not maintained while notifyJvmti was disabled.\n@@ -1643,3 +1637,1 @@\n-      if (_whitebox_used) {\n-        correct_jvmti_thread_state(jt); \/\/ needed in testing environment only\n-      }\n+      correct_jvmti_thread_state(jt);\n@@ -1654,3 +1646,0 @@\n-    if (!enable) {\n-      _whitebox_used = true; \/\/ disabling is available via WhiteBox only\n-    }\n@@ -1667,2 +1656,0 @@\n-bool VM_SetNotifyJvmtiEventsMode::_whitebox_used = false;\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies JVMTI GetLocalStorage\/SetLocalStorage\n+ * @requires vm.continuations\n+ * @requires vm.jvmti\n+ * @compile VThreadTLSTest.java\n+ * @run main\/othervm\/native -agentlib:VThreadTLSTest VThreadTLSTest\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8311556\n+ * @summary Verifies JVMTI GetLocalStorage\/SetLocalStorage\n+ * @requires vm.continuations\n+ * @requires vm.jvmti\n+ * @compile VThreadTLSTest.java\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true -XX:+EnableDynamicAgentLoading VThreadTLSTest attach\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class VThreadTLSTest {\n+    static final String AGENT_LIB = \"VThreadTLSTest\";\n+    static volatile boolean attached;\n+    static volatile boolean failed;\n+\n+    static void log(String msg) { System.out.println(msg); }\n+    static native long getTLS();\n+    static native void setTLS(long value);\n+\n+    static void test() {\n+        try {\n+            while (!attached) {\n+                \/\/ keep mounted\n+            }\n+            long threadId = Thread.currentThread().threadId();\n+            setTLS(threadId);\n+            long mountedValue = getTLS();\n+\n+            if (mountedValue != threadId) {\n+                log(\"Error: wrong TLS value while mounted: \" + threadId + \", \" + mountedValue);\n+                failed = true;\n+                return;\n+            }\n+            for (int repetion = 0; repetion < 10; repetion++) {\n+                Thread.sleep(1);\n+                long tlsValue = getTLS();\n+                if (tlsValue != threadId) {\n+                    log(\"Error: wrong TLS value after yield: expected: \" + threadId + \" got: \" + tlsValue);\n+                    failed = true;\n+                    return;\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (ExecutorService execService = Executors.newVirtualThreadPerTaskExecutor()) {\n+            for (int threadCount = 0; threadCount < 20; threadCount++) {\n+                execService.execute(() -> test());\n+            }\n+            if (args.length == 1 && args[0].equals(\"attach\")) {\n+                log(\"loading \" + AGENT_LIB + \" lib\");\n+                VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+                vm.loadAgentLibrary(AGENT_LIB);\n+            }\n+            Thread.sleep(10);\n+            attached = true;\n+        }\n+        if (failed) {\n+            throw new RuntimeException(\"Test FAILED: errors encountered\");\n+        } else {\n+            log(\"Test passed\");\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadTLSTest\/VThreadTLSTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <cstdlib>\n+#include <cstring>\n+#include <jvmti.h>\n+#include \"jvmti_common.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv *jvmti;\n+\n+JNIEXPORT jlong JNICALL\n+Java_VThreadTLSTest_getTLS(JNIEnv* jni, jclass clazz) {\n+  void* data;\n+  jvmtiError err = jvmti->GetThreadLocalStorage(nullptr, &data);\n+  check_jvmti_status(jni, err, \"getTLS: Failed in JVMTI GetThreadLocalStorage\");\n+  return (jlong)data;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_VThreadTLSTest_setTLS(JNIEnv* jni, jclass clazz, jlong value) {\n+  jvmtiError err = jvmti->SetThreadLocalStorage(nullptr, (void*)value);\n+  check_jvmti_status(jni, err, \"setTLS: Failed in JVMTI SetThreadLocalStorage\");\n+}\n+\n+jint agent_init(JavaVM *jvm, char *options, void *reserved) {\n+  jvmtiCapabilities caps;\n+  jvmtiError err;\n+\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    LOG(\"agent_init: could not initialize JVMTI\\n\");\n+    return JNI_ERR;\n+  }\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_support_virtual_threads = 1;\n+\n+  err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"agent_init: error in JVMTI AddCapabilities: %s (%d)\\n\", TranslateError(err), err);\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnLoad\\n\");\n+  return agent_init(jvm, options, reserved);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnAttach(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnAttach\\n\");\n+  return agent_init(jvm, options, reserved);\n+}\n+\n+} \/\/ extern \"C\"\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadTLSTest\/libVThreadTLSTest.cpp","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}