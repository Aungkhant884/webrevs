{"files":[{"patch":"@@ -2081,3 +2081,3 @@\n-                                                          Klass* accessing_klass,\n-                                                          Handle *appendix_result,\n-                                                          TRAPS) {\n+                                                     Klass* accessing_klass,\n+                                                     Handle* appendix_result,\n+                                                     TRAPS) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    result.set_handle(method, appendix, THREAD);\n+    result.set_handle(vmClasses::MethodHandle_klass(), method, appendix, THREAD);\n@@ -224,1 +224,1 @@\n-  result.set_handle(resolved_method(), resolved_appendix(), CHECK);\n+  result.set_handle(vmClasses::MethodHandle_klass(), resolved_method(), resolved_appendix(), CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,5 +97,0 @@\n-void CallInfo::set_handle(const methodHandle& resolved_method,\n-                          Handle resolved_appendix, TRAPS) {\n-  set_handle(vmClasses::MethodHandle_klass(), resolved_method, resolved_appendix, CHECK);\n-}\n-\n@@ -479,8 +474,6 @@\n-      Handle method_type;\n-      Method* result = SystemDictionary::find_method_handle_invoker(\n-                                                            klass,\n-                                                            name,\n-                                                            full_signature,\n-                                                            link_info.current_klass(),\n-                                                            &appendix,\n-                                                            CHECK_NULL);\n+      Method* result = SystemDictionary::find_method_handle_invoker(klass,\n+                                                                    name,\n+                                                                    full_signature,\n+                                                                    link_info.current_klass(),\n+                                                                    &appendix,\n+                                                                    CHECK_NULL);\n@@ -624,1 +617,1 @@\n-      || (resolved_klass == vmClasses::MethodHandle_klass() &&\n+      || ((resolved_klass == vmClasses::MethodHandle_klass() || resolved_klass == vmClasses::VarHandle_klass()) &&\n@@ -1682,0 +1675,13 @@\n+bool LinkResolver::resolve_previously_linked_invokehandle(CallInfo& result, const LinkInfo& link_info, const constantPoolHandle& pool, int index, TRAPS) {\n+  int cache_index = ConstantPool::decode_cpcache_index(index, true);\n+  ConstantPoolCacheEntry* cpce = pool->cache()->entry_at(cache_index);\n+  if (!cpce->is_f1_null()) {\n+    Klass* resolved_klass = link_info.resolved_klass();\n+    methodHandle method(THREAD, cpce->f1_as_method());\n+    Handle     appendix(THREAD, cpce->appendix_if_resolved(pool));\n+    result.set_handle(resolved_klass, method, appendix, CHECK_false);\n+    return true;\n+  } else {\n+    return false;\n+  }\n+}\n@@ -1684,1 +1690,0 @@\n-  \/\/ This guy is reached from InterpreterRuntime::resolve_invokehandle.\n@@ -1691,0 +1696,4 @@\n+  { \/\/ Check if the call site has been bound already, and short circuit:\n+    bool is_done = resolve_previously_linked_invokehandle(result, link_info, pool, index, CHECK);\n+    if (is_done) return;\n+  }\n@@ -1702,1 +1711,1 @@\n-  Handle       resolved_appendix;\n+  Handle resolved_appendix;\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -69,2 +69,0 @@\n-  void set_handle(const methodHandle& resolved_method,\n-                  Handle resolved_appendix, TRAPS);\n@@ -252,0 +250,5 @@\n+  static bool resolve_previously_linked_invokehandle(CallInfo& result,\n+                                                     const LinkInfo& link_info,\n+                                                     const constantPoolHandle& pool,\n+                                                     int index, TRAPS);\n+\n@@ -340,1 +343,0 @@\n- public:\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java 8256368 generic-all\n","filename":"test\/jdk\/ProblemList-Xcomp.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}