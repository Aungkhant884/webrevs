{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -367,1 +367,3 @@\n-     * Recording must be started, but not necessarily stopped.\n+     * For a dump to succeed the recording must be be running, or\n+     * both stopped and to disk. If the recording is in any other state, an\n+     * {@link IOException} is thrown.\n@@ -373,1 +375,1 @@\n-     *         location\n+     *         location, for example if the recording is closed\n@@ -377,0 +379,3 @@\n+     *\n+     *  @see #getState()\n+     *  @see #isToDisk()\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+ * <p>\n+ * If the annotated value equals {@code Long.MAX_VALUE), it represents forever.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Timespan.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.time.temporal.ChronoUnit;\n@@ -758,0 +759,4 @@\n+     * If the committed event value was {@code Long.MAX_VALUE},\n+     * regardless of the unit set by {@code @Timespan}, this method returns\n+     * {@link ChronoUnit.FOREVER.getDuration()}.\n+     * <p>\n@@ -814,0 +819,3 @@\n+        if (timespan == Long.MAX_VALUE) {\n+            return ChronoUnit.FOREVER.getDuration();\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.time.temporal.ChronoUnit;\n@@ -556,0 +557,4 @@\n+            if (d.equals(ChronoUnit.FOREVER.getDuration())) {\n+                println(\"Forever\");\n+                return true;\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/PrettyWriter.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.time.temporal.ChronoUnit;\n@@ -95,0 +96,6 @@\n+        @Timespan(Timespan.SECONDS)\n+        long foreverMillis = Long.MAX_VALUE;\n+\n+        @Timespan(Timespan.NANOSECONDS)\n+        long foreverNanoseconds = Long.MAX_VALUE;\n+\n@@ -182,0 +189,3 @@\n+        Asserts.assertEquals(event.getDuration(\"foreverMillis\"), ChronoUnit.FOREVER.getDuration());\n+        Asserts.assertEquals(event.getDuration(\"foreverNanoseconds\"), ChronoUnit.FOREVER.getDuration());\n+\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedObject.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}