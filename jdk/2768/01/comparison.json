{"files":[{"patch":"@@ -2441,0 +2441,10 @@\n+const bool Matcher::is_predicate_operand(int opcode) {\n+  return false;\n+}\n+const RegMask* Matcher::predicate_reg_mask(void) {\n+  return NULL;\n+}\n+const Type* Matcher::predicate_reg_type() {\n+  assert(has_predicated_vectors(), \"\");\n+  return Type::BOTTOM;\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -995,0 +995,10 @@\n+const bool Matcher::is_predicate_operand(int opcode) {\n+  return false;\n+}\n+const RegMask* Matcher::predicate_reg_mask(void) {\n+  return NULL;\n+}\n+const Type* Matcher::predicate_reg_type() {\n+  assert(has_predicated_vectors(), \"\");\n+  return Type::BOTTOM;\n+}\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2162,0 +2162,10 @@\n+const bool Matcher::is_predicate_operand(int opcode) {\n+  return false;\n+}\n+const RegMask* Matcher::predicate_reg_mask(void) {\n+  return NULL;\n+}\n+const Type* Matcher::predicate_reg_type() {\n+  assert(has_predicated_vectors(), \"\");\n+  return Type::BOTTOM;\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1548,0 +1548,10 @@\n+const bool Matcher::is_predicate_operand(int opcode) {\n+  return false;\n+}\n+const RegMask* Matcher::predicate_reg_mask(void) {\n+  return NULL;\n+}\n+const Type* Matcher::predicate_reg_type() {\n+  assert(has_predicated_vectors(), \"\");\n+  return Type::BOTTOM;\n+}\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-void C2_MacroAssembler::setvectmask(Register dst, Register src) {\n+void C2_MacroAssembler::setvectmask(Register dst, Register src, KRegister mask) {\n@@ -57,1 +57,1 @@\n-  Assembler::kmovdl(k1, dst);\n+  Assembler::kmovdl(mask, dst);\n@@ -61,1 +61,1 @@\n-void C2_MacroAssembler::restorevectmask() {\n+void C2_MacroAssembler::restorevectmask(KRegister mask) {\n@@ -63,1 +63,1 @@\n-  Assembler::knotwl(k1, k0);\n+  Assembler::knotwl(mask, k0);\n@@ -1896,1 +1896,1 @@\n-void C2_MacroAssembler::genmask(Register dst, Register len, Register temp) {\n+void C2_MacroAssembler::genmask(KRegister dst, Register len, Register temp) {\n@@ -1898,2 +1898,3 @@\n-  mov64(dst, -1L);\n-  bzhiq(dst, dst, len);\n+  mov64(temp, -1L);\n+  bzhiq(temp, temp, len);\n+  kmovql(dst, temp);\n@@ -2157,1 +2158,2 @@\n-void C2_MacroAssembler::vectortest(int bt, int vlen, XMMRegister src1, XMMRegister src2, XMMRegister vtmp1, XMMRegister vtmp2) {\n+void C2_MacroAssembler::vectortest(int bt, int vlen, XMMRegister src1, XMMRegister src2,\n+                                   XMMRegister vtmp1, XMMRegister vtmp2, KRegister mask) {\n@@ -2195,1 +2197,0 @@\n-        KRegister ktemp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n@@ -2197,1 +2198,1 @@\n-        evpcmpeqb(ktemp, src1, src2, Assembler::AVX_512bit);\n+        evpcmpeqb(mask, src1, src2, Assembler::AVX_512bit);\n@@ -2199,1 +2200,1 @@\n-          ktestql(ktemp, ktemp);\n+          ktestql(mask, mask);\n@@ -2202,1 +2203,1 @@\n-          kortestql(ktemp, ktemp);\n+          kortestql(mask, mask);\n@@ -2919,1 +2920,1 @@\n-                                       XMMRegister vec1, int ae) {\n+                                       XMMRegister vec1, int ae, KRegister mask) {\n@@ -3072,1 +3073,1 @@\n-        evpcmpeqb(k7, vec1, Address(str2, result, scale), Assembler::AVX_512bit); \/\/ k7 == 11..11, if operands equal, otherwise k7 has some 0\n+        evpcmpeqb(mask, vec1, Address(str2, result, scale), Assembler::AVX_512bit); \/\/ k7 == 11..11, if operands equal, otherwise k7 has some 0\n@@ -3075,1 +3076,1 @@\n-        evpcmpeqb(k7, vec1, Address(str2, result, scale2), Assembler::AVX_512bit); \/\/ k7 == 11..11, if operands equal, otherwise k7 has some 0\n+        evpcmpeqb(mask, vec1, Address(str2, result, scale2), Assembler::AVX_512bit); \/\/ k7 == 11..11, if operands equal, otherwise k7 has some 0\n@@ -3077,1 +3078,1 @@\n-      kortestql(k7, k7);\n+      kortestql(mask, mask);\n@@ -3261,1 +3262,1 @@\n-    kmovql(cnt1, k7);\n+    kmovql(cnt1, mask);\n@@ -3310,1 +3311,1 @@\n-  XMMRegister vec1, XMMRegister vec2) {\n+  XMMRegister vec1, XMMRegister vec2, KRegister mask1, KRegister mask2) {\n@@ -3342,2 +3343,2 @@\n-    evpcmpgtb(k2, vec2, Address(ary1, len, Address::times_1), Assembler::AVX_512bit);\n-    kortestql(k2, k2);\n+    evpcmpgtb(mask1, vec2, Address(ary1, len, Address::times_1), Assembler::AVX_512bit);\n+    kortestql(mask1, mask1);\n@@ -3360,1 +3361,1 @@\n-    kmovql(k3, tmp3_aliased);\n+    kmovql(mask2, tmp3_aliased);\n@@ -3385,1 +3386,1 @@\n-    evpcmpgtb(k3, vec1, Address(len, 0), Assembler::AVX_512bit);\n+    evpcmpgtb(mask2, vec1, Address(len, 0), Assembler::AVX_512bit);\n@@ -3388,2 +3389,2 @@\n-    evpcmpgtb(k2, k3, vec2, Address(ary1, 0), Assembler::AVX_512bit);\n-    ktestq(k2, k3);\n+    evpcmpgtb(mask1, mask2, vec2, Address(ary1, 0), Assembler::AVX_512bit);\n+    ktestq(mask1, mask2);\n@@ -3516,1 +3517,1 @@\n-                                      XMMRegister vec1, XMMRegister vec2, bool is_char) {\n+                                      XMMRegister vec1, XMMRegister vec2, bool is_char, KRegister mask) {\n@@ -3579,2 +3580,2 @@\n-      evpcmpeqb(k7, vec1, Address(ary2, limit, Address::times_1), Assembler::AVX_512bit);\n-      kortestql(k7, k7);\n+      evpcmpeqb(mask, vec1, Address(ary2, limit, Address::times_1), Assembler::AVX_512bit);\n+      kortestql(mask, mask);\n@@ -3597,2 +3598,2 @@\n-      evpcmpeqb(k7, vec1, Address(ary2, result, Address::times_1), Assembler::AVX_512bit);\n-      kortestql(k7, k7);\n+      evpcmpeqb(mask, vec1, Address(ary2, result, Address::times_1), Assembler::AVX_512bit);\n+      kortestql(mask, mask);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":30,"deletions":29,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-  void setvectmask(Register dst, Register src);\n-  void restorevectmask();\n+  void setvectmask(Register dst, Register src, KRegister mask = k1);\n+  void restorevectmask(KRegister mask = k1);\n@@ -134,1 +134,1 @@\n-                  XMMRegister vtmp1 = xnoreg, XMMRegister vtmp2 = xnoreg);\n+                  XMMRegister vtmp1 = xnoreg, XMMRegister vtmp2 = xnoreg, KRegister mask = knoreg);\n@@ -149,1 +149,1 @@\n-  void genmask(Register dst, Register len, Register temp);\n+  void genmask(KRegister dst, Register len, Register temp);\n@@ -247,1 +247,1 @@\n-                      XMMRegister vec1, int ae);\n+                      XMMRegister vec1, int ae, KRegister mask = knoreg);\n@@ -253,1 +253,1 @@\n-                     XMMRegister vec1, XMMRegister vec2);\n+                     XMMRegister vec1, XMMRegister vec2, KRegister mask1 = knoreg, KRegister mask2 = knoreg);\n@@ -258,1 +258,1 @@\n-                     XMMRegister vec1, XMMRegister vec2, bool is_char);\n+                     XMMRegister vec1, XMMRegister vec2, bool is_char, KRegister mask = knoreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-LP64_ONLY(extern void reg_mask_init();)\n+extern void reg_mask_init();\n@@ -64,1 +64,1 @@\n-  LP64_ONLY(reg_mask_init();)\n+  reg_mask_init();\n","filename":"src\/hotspot\/cpu\/x86\/c2_init_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,0 +149,12 @@\n+  const int opmask_size = 8;\n+  if (UseAVX > 2) {\n+    __ subptr(rsp, 7*opmask_size);\n+    __ kmovql(Address(rsp, opmask_size * 6), k7);\n+    __ kmovql(Address(rsp, opmask_size * 5), k6);\n+    __ kmovql(Address(rsp, opmask_size * 4), k5);\n+    __ kmovql(Address(rsp, opmask_size * 3), k4);\n+    __ kmovql(Address(rsp, opmask_size * 2), k3);\n+    __ kmovql(Address(rsp, opmask_size * 1), k2);\n+    __ kmovql(Address(rsp, opmask_size * 0), k1);\n+  }\n+\n@@ -153,0 +165,11 @@\n+  if (UseAVX > 2) {\n+    __ kmovql(k1, Address(rsp, opmask_size * 0));\n+    __ kmovql(k2, Address(rsp, opmask_size * 1));\n+    __ kmovql(k3, Address(rsp, opmask_size * 2));\n+    __ kmovql(k4, Address(rsp, opmask_size * 3));\n+    __ kmovql(k5, Address(rsp, opmask_size * 4));\n+    __ kmovql(k6, Address(rsp, opmask_size * 5));\n+    __ kmovql(k7, Address(rsp, opmask_size * 6));\n+    __ addptr(rsp, 7*opmask_size);\n+  }\n+\n@@ -397,0 +420,1 @@\n+  GrowableArray<KRegister>       _opmask_registers;\n@@ -453,0 +477,5 @@\n+  void opmask_register_save(KRegister reg) {\n+    _spill_offset -= 8;\n+    __ kmovql(Address(rsp, _spill_offset), reg);\n+  }\n+\n@@ -458,0 +487,5 @@\n+  void opmask_register_restore(KRegister reg) {\n+    __ kmovql(reg, Address(rsp, _spill_offset));\n+    _spill_offset += 8;\n+  }\n+\n@@ -471,0 +505,9 @@\n+    if (UseAVX > 2) {\n+      caller_saved.Insert(OptoReg::as_OptoReg(k1->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k2->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k3->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k4->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k5->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k6->as_VMReg()));\n+      caller_saved.Insert(OptoReg::as_OptoReg(k7->as_VMReg()));\n+    }\n@@ -480,0 +523,1 @@\n+    int opmask_spill_size = 0;\n@@ -493,0 +537,5 @@\n+      } else if (vm_reg->is_KRegister()) {\n+        if (caller_saved.Member(opto_reg)) {\n+          _opmask_registers.append(vm_reg->as_KRegister());\n+          opmask_spill_size += 8;\n+        }\n@@ -523,1 +572,1 @@\n-    _spill_offset = _spill_size = align_up(xmm_spill_size + gp_spill_size + arg_spill_size, 16);\n+    _spill_offset = _spill_size = align_up(xmm_spill_size + gp_spill_size + opmask_spill_size + arg_spill_size, 16);\n@@ -530,0 +579,1 @@\n+      _opmask_registers(),\n@@ -579,0 +629,5 @@\n+\n+    \/\/ Save opmask purpose registers\n+    for (int i = 0; i < _opmask_registers.length(); i++) {\n+      opmask_register_save(_opmask_registers.at(i));\n+    }\n@@ -582,0 +637,5 @@\n+    \/\/ Restore opmask registers\n+    for (int i = _opmask_registers.length() - 1; i >= 0; i--) {\n+      opmask_register_restore(_opmask_registers.at(i));\n+    }\n+\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2528,0 +2528,8 @@\n+void MacroAssembler::kmovql(KRegister dst, AddressLiteral src, Register scratch_reg) {\n+  if (reachable(src)) {\n+    kmovql(dst, as_Address(src));\n+  } else {\n+    lea(scratch_reg, src);\n+    kmovql(dst, Address(scratch_reg, 0));\n+  }\n+}\n@@ -4944,1 +4952,1 @@\n-void MacroAssembler::xmm_clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp) {\n+void MacroAssembler::xmm_clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp, KRegister mask) {\n@@ -4977,1 +4985,1 @@\n-    fill64_masked_avx(3, base, 0, xtmp, k2, cnt, rtmp, true);\n+    fill64_masked_avx(3, base, 0, xtmp, mask, cnt, rtmp, true);\n@@ -4996,1 +5004,1 @@\n-    fill32_masked_avx(3, base, 0, xtmp, k2, cnt, rtmp);\n+    fill32_masked_avx(3, base, 0, xtmp, mask, cnt, rtmp);\n@@ -5010,1 +5018,1 @@\n-void MacroAssembler::clear_mem(Register base, int cnt, Register rtmp, XMMRegister xtmp) {\n+void MacroAssembler::clear_mem(Register base, int cnt, Register rtmp, XMMRegister xtmp, KRegister mask) {\n@@ -5035,2 +5043,2 @@\n-        kmovwl(k2, rtmp);\n-        evmovdqu(T_LONG, k2, Address(base, disp), xtmp, Assembler::AVX_256bit);\n+        kmovwl(mask, rtmp);\n+        evmovdqu(T_LONG, mask, Address(base, disp), xtmp, Assembler::AVX_256bit);\n@@ -5044,2 +5052,2 @@\n-          kmovwl(k2, rtmp);\n-          evmovdqu(T_LONG, k2, Address(base, disp), xtmp, Assembler::AVX_512bit);\n+          kmovwl(mask, rtmp);\n+          evmovdqu(T_LONG, mask, Address(base, disp), xtmp, Assembler::AVX_512bit);\n@@ -5054,2 +5062,2 @@\n-          kmovwl(k2, rtmp);\n-          evmovdqu(T_LONG, k2, Address(base, disp), xtmp, Assembler::AVX_512bit);\n+          kmovwl(mask, rtmp);\n+          evmovdqu(T_LONG, mask, Address(base, disp), xtmp, Assembler::AVX_512bit);\n@@ -5064,2 +5072,2 @@\n-          kmovwl(k2, rtmp);\n-          evmovdqu(T_LONG, k2, Address(base, disp), xtmp, Assembler::AVX_512bit);\n+          kmovwl(mask, rtmp);\n+          evmovdqu(T_LONG, mask, Address(base, disp), xtmp, Assembler::AVX_512bit);\n@@ -5069,2 +5077,2 @@\n-          kmovwl(k2, rtmp);\n-          evmovdqu(T_LONG, k2, Address(base, disp + 32), xtmp, Assembler::AVX_256bit);\n+          kmovwl(mask, rtmp);\n+          evmovdqu(T_LONG, mask, Address(base, disp + 32), xtmp, Assembler::AVX_256bit);\n@@ -5080,1 +5088,2 @@\n-void MacroAssembler::clear_mem(Register base, Register cnt, Register tmp, XMMRegister xtmp, bool is_large) {\n+void MacroAssembler::clear_mem(Register base, Register cnt, Register tmp, XMMRegister xtmp,\n+                               bool is_large, KRegister mask) {\n@@ -5120,1 +5129,1 @@\n-    xmm_clear_mem(base, cnt, tmp, xtmp);\n+    xmm_clear_mem(base, cnt, tmp, xtmp, mask);\n@@ -7752,1 +7761,1 @@\n-  Register tmp5, Register result) {\n+  Register tmp5, Register result, KRegister mask1, KRegister mask2) {\n@@ -7804,1 +7813,1 @@\n-    kmovdl(k3, result);\n+    kmovdl(mask2, result);\n@@ -7806,3 +7815,3 @@\n-    evmovdquw(tmp1Reg, k3, Address(src, 0), \/*merge*\/ false, Assembler::AVX_512bit);\n-    evpcmpuw(k2, k3, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n-    ktestd(k2, k3);\n+    evmovdquw(tmp1Reg, mask2, Address(src, 0), \/*merge*\/ false, Assembler::AVX_512bit);\n+    evpcmpuw(mask1, mask2, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n+    ktestd(mask1, mask2);\n@@ -7811,1 +7820,1 @@\n-    evpmovwb(Address(dst, 0), k3, tmp1Reg, Assembler::AVX_512bit);\n+    evpmovwb(Address(dst, 0), mask2, tmp1Reg, Assembler::AVX_512bit);\n@@ -7832,2 +7841,2 @@\n-    evpcmpuw(k2, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n-    kortestdl(k2, k2);\n+    evpcmpuw(mask1, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n+    kortestdl(mask1, mask1);\n@@ -7854,1 +7863,1 @@\n-    kmovdl(k3, result);\n+    kmovdl(mask2, result);\n@@ -7856,3 +7865,3 @@\n-    evmovdquw(tmp1Reg, k3, Address(src, 0), \/*merge*\/ false, Assembler::AVX_512bit);\n-    evpcmpuw(k2, k3, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n-    ktestd(k2, k3);\n+    evmovdquw(tmp1Reg, mask2, Address(src, 0), \/*merge*\/ false, Assembler::AVX_512bit);\n+    evpcmpuw(mask1, mask2, tmp1Reg, tmp2Reg, Assembler::le, Assembler::AVX_512bit);\n+    ktestd(mask1, mask2);\n@@ -7861,1 +7870,1 @@\n-    evpmovwb(Address(dst, 0), k3, tmp1Reg, Assembler::AVX_512bit);\n+    evpmovwb(Address(dst, 0), mask2, tmp1Reg, Assembler::AVX_512bit);\n@@ -7961,1 +7970,1 @@\n-  XMMRegister tmp1, Register tmp2) {\n+  XMMRegister tmp1, Register tmp2, KRegister mask) {\n@@ -8014,3 +8023,3 @@\n-    kmovdl(k2, tmp3_aliased);\n-    evpmovzxbw(tmp1, k2, Address(src, 0), Assembler::AVX_512bit);\n-    evmovdquw(Address(dst, 0), k2, tmp1, \/*merge*\/ true, Assembler::AVX_512bit);\n+    kmovdl(mask, tmp3_aliased);\n+    evpmovzxbw(tmp1, mask, Address(src, 0), Assembler::AVX_512bit);\n+    evmovdquw(Address(dst, 0), mask, tmp1, \/*merge*\/ true, Assembler::AVX_512bit);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":42,"deletions":33,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -1094,0 +1094,7 @@\n+  void kmovql(KRegister dst, KRegister src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, Register src) { Assembler::kmovql(dst, src); }\n+  void kmovql(Register dst, KRegister src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, Address src) { Assembler::kmovql(dst, src); }\n+  void kmovql(Address  dst, KRegister src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, AddressLiteral src, Register scratch_reg = rscratch1);\n+\n@@ -1686,1 +1693,1 @@\n-  void clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp, bool is_large);\n+  void clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp, bool is_large, KRegister mask=knoreg);\n@@ -1689,1 +1696,1 @@\n-  void clear_mem(Register base, int cnt, Register rtmp, XMMRegister xtmp);\n+  void clear_mem(Register base, int cnt, Register rtmp, XMMRegister xtmp, KRegister mask=knoreg);\n@@ -1692,1 +1699,1 @@\n-  void xmm_clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp);\n+  void xmm_clear_mem(Register base, Register cnt, Register rtmp, XMMRegister xtmp, KRegister mask=knoreg);\n@@ -1805,1 +1812,2 @@\n-                           XMMRegister tmp4, Register tmp5, Register result);\n+                           XMMRegister tmp4, Register tmp5, Register result,\n+                           KRegister mask1 = knoreg, KRegister mask2 = knoreg);\n@@ -1809,1 +1817,1 @@\n-                          XMMRegister tmp1, Register tmp2);\n+                          XMMRegister tmp1, Register tmp2, KRegister mask = knoreg);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-    max_slots_per_register = 1\n+    max_slots_per_register = 2\n@@ -260,1 +260,1 @@\n-      2 * FloatRegisterImpl::number_of_registers +\n+      2 * FloatRegisterImpl::number_of_registers + NOT_LP64(8) LP64_ONLY(0) +\n@@ -262,1 +262,1 @@\n-      KRegisterImpl::number_of_registers + \/\/ mask registers\n+      KRegisterImpl::number_of_registers * KRegisterImpl::max_slots_per_register + \/\/ mask registers\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+  int opmask_state_bytes = KRegisterImpl::number_of_registers * 8;\n@@ -145,0 +146,3 @@\n+  if(UseAVX > 2) {\n+    additional_frame_words += opmask_state_bytes \/ wordSize;\n+  }\n@@ -234,0 +238,9 @@\n+#ifdef COMPILER2\n+  if (UseAVX > 2) {\n+    __ subptr(rsp, opmask_state_bytes);\n+    \/\/ Save opmask registers\n+    for (int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+      __ kmovql(Address(rsp, n*8), as_KRegister(n));\n+    }\n+  }\n+#endif\n@@ -254,0 +267,1 @@\n+\n@@ -281,0 +295,1 @@\n+  int opmask_state_bytes = KRegisterImpl::number_of_registers * 8;\n@@ -294,0 +309,3 @@\n+  if (UseAVX > 2) {\n+    additional_frame_bytes += opmask_state_bytes;\n+  }\n@@ -325,1 +343,0 @@\n-\n@@ -328,0 +345,1 @@\n+      off = opmask_state_bytes;\n@@ -329,1 +347,4 @@\n-        __ vinsertf64x4_high(as_XMMRegister(n), Address(rsp, n*32));\n+        __ vinsertf64x4_high(as_XMMRegister(n), Address(rsp, n*32+off));\n+      }\n+      for (int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(as_KRegister(n), Address(rsp, n*8));\n@@ -333,0 +354,9 @@\n+  } else {\n+#ifdef COMPILER2\n+    if (UseAVX > 2) {\n+      for (int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(as_KRegister(n), Address(rsp, n*8));\n+      }\n+      __ addptr(rsp, additional_frame_bytes);\n+    }\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+#define XSAVE_AREA_OPMASK_BEGIN 1088\n@@ -98,0 +99,1 @@\n+#define DEF_OPMASK_OFFS(regnum)    opmask ## regnum ## _off = opmask_off + (regnum)*8\/BytesPerInt,     opmask ## regnum ## H_off\n@@ -108,0 +110,4 @@\n+    \/\/ 2..7 are implied in range usage\n+    opmask_off         = xmm_off + (XSAVE_AREA_OPMASK_BEGIN - XSAVE_AREA_BEGIN)\/BytesPerInt,\n+    DEF_OPMASK_OFFS(0),\n+    DEF_OPMASK_OFFS(1),\n@@ -216,0 +222,6 @@\n+\n+      base_addr = XSAVE_AREA_OPMASK_BEGIN;\n+      off = 0;\n+      for(int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(Address(rsp, base_addr+(off++*8)), as_KRegister(n));\n+      }\n@@ -225,0 +237,5 @@\n+      base_addr = XSAVE_AREA_OPMASK_BEGIN;\n+      off = 0;\n+      for(int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(Address(rsp, base_addr+(off++*8)), as_KRegister(n));\n+      }\n@@ -384,0 +401,5 @@\n+      base_addr = XSAVE_AREA_OPMASK_BEGIN;\n+      off = 0;\n+      for (int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(as_KRegister(n), Address(rsp, base_addr+(off++*8)));\n+      }\n@@ -393,0 +415,5 @@\n+      base_addr = XSAVE_AREA_OPMASK_BEGIN;\n+      off = 0;\n+      for (int n = 0; n < KRegisterImpl::number_of_registers; n++) {\n+        __ kmovql(as_KRegister(n), Address(rsp, base_addr+(off++*8)));\n+      }\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+\/\/TODO: Case for KRegisters\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -631,0 +631,26 @@\n+\/\/ AVX3 Mask Registers.\n+reg_def K0   (SOC, SOC, Op_RegI,  0, k0->as_VMReg());\n+reg_def K0_H (SOC, SOC, Op_RegI,  0, k0->as_VMReg()->next());\n+\n+reg_def K1   (SOC, SOC, Op_RegI,  1, k1->as_VMReg());\n+reg_def K1_H (SOC, SOC, Op_RegI,  1, k1->as_VMReg()->next());\n+\n+reg_def K2   (SOC, SOC, Op_RegI,  2, k2->as_VMReg());\n+reg_def K2_H (SOC, SOC, Op_RegI,  2, k2->as_VMReg()->next());\n+\n+reg_def K3   (SOC, SOC, Op_RegI,  3, k3->as_VMReg());\n+reg_def K3_H (SOC, SOC, Op_RegI,  3, k3->as_VMReg()->next());\n+\n+reg_def K4   (SOC, SOC, Op_RegI,  4, k4->as_VMReg());\n+reg_def K4_H (SOC, SOC, Op_RegI,  4, k4->as_VMReg()->next());\n+\n+reg_def K5   (SOC, SOC, Op_RegI,  5, k5->as_VMReg());\n+reg_def K5_H (SOC, SOC, Op_RegI,  5, k5->as_VMReg()->next());\n+\n+reg_def K6   (SOC, SOC, Op_RegI,  6, k6->as_VMReg());\n+reg_def K6_H (SOC, SOC, Op_RegI,  6, k6->as_VMReg()->next());\n+\n+reg_def K7   (SOC, SOC, Op_RegI,  7, k7->as_VMReg());\n+reg_def K7_H (SOC, SOC, Op_RegI,  7, k7->as_VMReg()->next());\n+\n+\n@@ -667,0 +693,27 @@\n+alloc_class chunk2(K7, K7_H,\n+                   K6, K6_H,\n+                   K5, K5_H,\n+                   K4, K4_H,\n+                   K3, K3_H,\n+                   K2, K2_H,\n+                   K1, K1_H,\n+                   K0, K0_H);\n+\n+reg_class  opmask_reg(K0, K0_H,\n+                      K1, K1_H,\n+                      K2, K2_H,\n+                      K3, K3_H,\n+                      K4, K4_H,\n+                      K5, K5_H,\n+                      K6, K6_H,\n+                      K7, K7_H);\n+\n+reg_class opmask_reg_K0(K0, K0_H);\n+reg_class opmask_reg_K1(K1, K1_H);\n+reg_class opmask_reg_K2(K2, K2_H);\n+reg_class opmask_reg_K3(K3, K3_H);\n+reg_class opmask_reg_K4(K4, K4_H);\n+reg_class opmask_reg_K5(K5, K5_H);\n+reg_class opmask_reg_K6(K6, K6_H);\n+reg_class opmask_reg_K7(K7, K7_H);\n+\n@@ -668,1 +721,2 @@\n-alloc_class chunk2(RFLAGS);\n+alloc_class chunk3(RFLAGS);\n+\n@@ -1527,0 +1581,1 @@\n+\n@@ -1530,0 +1585,1 @@\n+#ifdef _LP64\n@@ -1533,0 +1589,3 @@\n+#else\n+      return false;\n+#endif\n@@ -1611,0 +1670,1 @@\n+#ifdef _LP64\n@@ -1617,0 +1677,3 @@\n+#else\n+      return false;\n+#endif\n@@ -1834,0 +1897,28 @@\n+const RegMask* Matcher::predicate_reg_mask(void) {\n+  return &_OPMASK_REG_mask;\n+}\n+\n+const bool Matcher::is_predicate_operand(int opcode) {\n+  if (!has_predicated_vectors()) {\n+    return false;\n+  }\n+  switch(opcode) {\n+    case KREG:\n+    case KREG_K0:\n+    case KREG_K1:\n+    case KREG_K2:\n+    case KREG_K3:\n+    case KREG_K4:\n+    case KREG_K5:\n+    case KREG_K6:\n+    case KREG_K7:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+const Type* Matcher::predicate_reg_type() {\n+  return TypeLong::LONG;\n+}\n+\n@@ -2556,1 +2647,1 @@\n-instruct setMask(rRegI dst, rRegI src) %{\n+instruct setMask(rRegI dst, rRegI src, kReg_K1 mask) %{\n@@ -2562,1 +2653,1 @@\n-    __ setvectmask($dst$$Register, $src$$Register);\n+    __ setvectmask($dst$$Register, $src$$Register, $mask$$KRegister);\n@@ -3602,1 +3693,1 @@\n-instruct evgather(vec dst, memory mem, vec idx, rRegP tmp) %{\n+instruct evgather(vec dst, memory mem, vec idx, rRegP tmp, kReg ktmp) %{\n@@ -3605,1 +3696,1 @@\n-  effect(TEMP dst, TEMP tmp);\n+  effect(TEMP dst, TEMP tmp, TEMP ktmp);\n@@ -3615,2 +3706,1 @@\n-    KRegister ktmp = k2;\n-    __ kmovwl(k2, ExternalAddress(vector_all_bits_set()), $tmp$$Register);\n+    __ kmovwl($ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), $tmp$$Register);\n@@ -3618,1 +3708,1 @@\n-    __ evgather(elem_bt, $dst$$XMMRegister, ktmp, $tmp$$Register, $idx$$XMMRegister, vlen_enc);\n+    __ evgather(elem_bt, $dst$$XMMRegister, $ktmp$$KRegister, $tmp$$Register, $idx$$XMMRegister, vlen_enc);\n@@ -3627,1 +3717,1 @@\n-instruct scatter(memory mem, vec src, vec idx, rRegP tmp) %{\n+instruct scatter(memory mem, vec src, vec idx, rRegP tmp, kReg ktmp) %{\n@@ -3629,1 +3719,1 @@\n-  effect(TEMP tmp);\n+  effect(TEMP tmp, TEMP ktmp);\n@@ -3640,2 +3730,1 @@\n-    KRegister ktmp = k2;\n-    __ kmovwl(k2, ExternalAddress(vector_all_bits_set()), $tmp$$Register);\n+    __ kmovwl($ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), $tmp$$Register);\n@@ -3643,1 +3732,1 @@\n-    __ evscatter(elem_bt, $tmp$$Register, $idx$$XMMRegister, ktmp, $src$$XMMRegister, vlen_enc);\n+    __ evscatter(elem_bt, $tmp$$Register, $idx$$XMMRegister, $ktmp$$KRegister, $src$$XMMRegister, vlen_enc);\n@@ -5744,1 +5833,1 @@\n-instruct evminmaxFP_reg_eavx(vec dst, vec a, vec b, vec atmp, vec btmp) %{\n+instruct evminmaxFP_reg_eavx(vec dst, vec a, vec b, vec atmp, vec btmp, kReg ktmp) %{\n@@ -5749,1 +5838,1 @@\n-  effect(TEMP dst, USE a, USE b, TEMP atmp, TEMP btmp);\n+  effect(TEMP dst, USE a, USE b, TEMP atmp, TEMP btmp, TEMP ktmp);\n@@ -5758,1 +5847,0 @@\n-    KRegister ktmp = k1;\n@@ -5761,1 +5849,1 @@\n-                   ktmp, $atmp$$XMMRegister , $btmp$$XMMRegister, vlen_enc);\n+                   $ktmp$$KRegister, $atmp$$XMMRegister , $btmp$$XMMRegister, vlen_enc);\n@@ -6826,1 +6914,1 @@\n-instruct evcmpFD(vec dst, vec src1, vec src2, immI8 cond, rRegP scratch) %{\n+instruct evcmpFD(vec dst, vec src1, vec src2, immI8 cond, rRegP scratch, kReg ktmp) %{\n@@ -6830,1 +6918,1 @@\n-  effect(TEMP scratch);\n+  effect(TEMP scratch, TEMP ktmp);\n@@ -6835,1 +6923,0 @@\n-    KRegister ktmp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n@@ -6838,2 +6925,2 @@\n-      __ evcmpps(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-      __ evmovdqul($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), false, vlen_enc, $scratch$$Register);\n+      __ evcmpps($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+      __ evmovdqul($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), false, vlen_enc, $scratch$$Register);\n@@ -6841,2 +6928,2 @@\n-      __ evcmppd(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-      __ evmovdquq($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), false, vlen_enc, $scratch$$Register);\n+      __ evcmppd($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+      __ evmovdquq($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), false, vlen_enc, $scratch$$Register);\n@@ -6864,1 +6951,1 @@\n-instruct evcmp(vec dst, vec src1, vec src2, immI8 cond, rRegP scratch) %{\n+instruct evcmp(vec dst, vec src1, vec src2, immI8 cond, rRegP scratch, kReg ktmp) %{\n@@ -6868,1 +6955,1 @@\n-  effect(TEMP scratch);\n+  effect(TEMP scratch, TEMP ktmp);\n@@ -6875,1 +6962,0 @@\n-    KRegister ktmp = k2; \/\/ Use a hardcoded temp due to no k register allocation.\n@@ -6882,2 +6968,2 @@\n-        __ evpcmpb(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-        __ evmovdqub($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n+        __ evpcmpb($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+        __ evmovdqub($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n@@ -6887,2 +6973,2 @@\n-        __ evpcmpw(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-        __ evmovdquw($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n+        __ evpcmpw($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+        __ evmovdquw($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n@@ -6892,2 +6978,2 @@\n-        __ evpcmpd(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-        __ evmovdqul($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n+        __ evpcmpd($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+        __ evmovdqul($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n@@ -6897,2 +6983,2 @@\n-        __ evpcmpq(ktmp, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n-        __ evmovdquq($dst$$XMMRegister, ktmp, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n+        __ evpcmpq($ktmp$$KRegister, mask, $src1$$XMMRegister, $src2$$XMMRegister, cmp, vlen_enc);\n+        __ evmovdquq($dst$$XMMRegister, $ktmp$$KRegister, ExternalAddress(vector_all_bits_set()), merge, vlen_enc, $scratch$$Register);\n@@ -7076,1 +7162,1 @@\n-instruct evblendvp64(vec dst, vec src1, vec src2, vec mask, rRegP scratch) %{\n+instruct evblendvp64(vec dst, vec src1, vec src2, vec mask, rRegP scratch, kReg ktmp) %{\n@@ -7080,1 +7166,1 @@\n-  effect(TEMP scratch);\n+  effect(TEMP scratch, TEMP ktmp);\n@@ -7084,3 +7170,2 @@\n-     KRegister ktmp = k2;\n-    __ evpcmp(elem_bt, ktmp, k0, $mask$$XMMRegister, ExternalAddress(vector_all_bits_set()), Assembler::eq, vlen_enc, $scratch$$Register);\n-    __ evpblend(elem_bt, $dst$$XMMRegister, ktmp, $src1$$XMMRegister, $src2$$XMMRegister, true, vlen_enc);\n+    __ evpcmp(elem_bt, $ktmp$$KRegister, k0, $mask$$XMMRegister, ExternalAddress(vector_all_bits_set()), Assembler::eq, vlen_enc, $scratch$$Register);\n+    __ evpblend(elem_bt, $dst$$XMMRegister, $ktmp$$KRegister, $src1$$XMMRegister, $src2$$XMMRegister, true, vlen_enc);\n@@ -7227,1 +7312,1 @@\n-instruct vptest_alltrue(rRegI dst, legVec src1, legVec src2, rFlagsReg cr) %{\n+instruct vptest_alltrue(rRegI dst, legVec src1, legVec src2, kReg ktmp, rFlagsReg cr) %{\n@@ -7231,1 +7316,1 @@\n-  effect(KILL cr);\n+  effect(KILL cr, TEMP ktmp);\n@@ -7235,1 +7320,1 @@\n-    __ vectortest(BoolTest::overflow, vlen, $src1$$XMMRegister, $src2$$XMMRegister); \n+    __ vectortest(BoolTest::overflow, vlen, $src1$$XMMRegister, $src2$$XMMRegister, xnoreg, xnoreg, $ktmp$$KRegister);\n@@ -7258,1 +7343,1 @@\n-instruct vptest_anytrue(rRegI dst, legVec src1, legVec src2, rFlagsReg cr) %{\n+instruct vptest_anytrue(rRegI dst, legVec src1, legVec src2, kReg ktmp, rFlagsReg cr) %{\n@@ -7262,1 +7347,1 @@\n-  effect(KILL cr);\n+  effect(KILL cr, TEMP ktmp);\n@@ -7266,1 +7351,1 @@\n-    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister);\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister, xnoreg, xnoreg, $ktmp$$KRegister);\n@@ -7287,1 +7372,1 @@\n-instruct cmpvptest_anytrue(rFlagsReg cr, legVec src1, legVec src2, immI_0 zero) %{\n+instruct cmpvptest_anytrue(rFlagsReg cr, legVec src1, legVec src2, immI_0 zero, kReg ktmp) %{\n@@ -7291,0 +7376,1 @@\n+  effect(TEMP ktmp);\n@@ -7294,1 +7380,1 @@\n-    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister);\n+    __ vectortest(BoolTest::ne, vlen, $src1$$XMMRegister, $src2$$XMMRegister, xnoreg, xnoreg, $ktmp$$KRegister);\n@@ -7947,2 +8033,1 @@\n-\n-instruct vmasked_load64(vec dst, memory mem, rRegL mask) %{\n+instruct vmasked_load64(vec dst, memory mem, kReg mask) %{\n@@ -7954,2 +8039,1 @@\n-    __ kmovql(k2, $mask$$Register);\n-    __ evmovdqu(elmType, k2, $dst$$XMMRegister, $mem$$Address, vector_len);\n+    __ evmovdqu(elmType, $mask$$KRegister, $dst$$XMMRegister, $mem$$Address, vector_len);\n@@ -7960,1 +8044,1 @@\n-instruct vmask_gen(rRegL dst, rRegL len, rRegL tempLen) %{\n+instruct vmask_gen(kReg dst, rRegL len, rRegL temp) %{\n@@ -7962,2 +8046,2 @@\n-  effect(TEMP_DEF dst, TEMP tempLen);\n-  format %{ \"vector_mask_gen $len \\t! vector mask generator\" %}\n+  effect(TEMP temp);\n+  format %{ \"vector_mask_gen32 $dst, $len \\t! vector mask generator\" %}\n@@ -7965,1 +8049,1 @@\n-    __ genmask($dst$$Register, $len$$Register, $tempLen$$Register);\n+    __ genmask($dst$$KRegister, $len$$Register, $temp$$Register);\n@@ -7970,1 +8054,1 @@\n-instruct vmask_gen_imm(rRegL dst, immL len) %{\n+instruct vmask_gen_imm(kReg dst, immL len, rRegL temp) %{\n@@ -7973,0 +8057,1 @@\n+  effect(TEMP temp);\n@@ -7974,1 +8059,2 @@\n-    __ mov64($dst$$Register, (0xFFFFFFFFFFFFFFFFUL >> (64 -$len$$constant)));\n+    __ mov64($temp$$Register, (0xFFFFFFFFFFFFFFFFUL >> (64 -$len$$constant)));\n+    __ kmovql($dst$$KRegister, $temp$$Register);\n@@ -7979,1 +8065,1 @@\n-instruct vmasked_store64(memory mem, vec src, rRegL mask) %{\n+instruct vmasked_store64(memory mem, vec src, kReg mask) %{\n@@ -7986,2 +8072,1 @@\n-    __ kmovql(k2, $mask$$Register);\n-    __ evmovdqu(elmType, k2, $mem$$Address, $src$$XMMRegister, vector_len);\n+    __ evmovdqu(elmType, $mask$$KRegister, $mem$$Address, $src$$XMMRegister, vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":146,"deletions":61,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -263,0 +263,6 @@\n+void reg_mask_init() {\n+  if(Matcher::has_predicated_vectors()) {\n+    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()));\n+  }\n+}\n+\n@@ -734,1 +740,1 @@\n-enum RC { rc_bad, rc_int, rc_float, rc_xmm, rc_stack };\n+enum RC { rc_bad, rc_int, rc_kreg, rc_float, rc_xmm, rc_stack };\n@@ -1106,1 +1112,1 @@\n-  if( dst_first_rc == rc_int && src_first_rc == rc_stack )\n+  if( src_first_rc == rc_stack && dst_first_rc == rc_int )\n@@ -1195,1 +1201,1 @@\n-    return impl_x_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),src_first, src_second, size, st);\n+    return impl_x_helper(cbuf,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n@@ -1199,1 +1205,1 @@\n-  if( dst_first_rc == rc_xmm && src_first_rc == rc_stack ) {\n+  if( src_first_rc == rc_stack && dst_first_rc == rc_xmm ) {\n@@ -1204,1 +1210,1 @@\n-  if( dst_first_rc == rc_xmm && src_first_rc == rc_float ) {\n+  if( src_first_rc == rc_float && dst_first_rc == rc_xmm ) {\n@@ -1260,0 +1266,36 @@\n+  \/\/ AVX-512 opmask specific spilling.\n+  if (src_first_rc == rc_stack && dst_first_rc == rc_kreg) {\n+    assert((src_first & 1) == 0 && src_first + 1 == src_second, \"invalid register pair\");\n+    assert((dst_first & 1) == 0 && dst_first + 1 == dst_second, \"invalid register pair\");\n+    MacroAssembler _masm(cbuf);\n+    int offset = ra_->reg2offset(src_first);\n+    __ kmovql(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+    return 0;\n+  }\n+\n+  if (src_first_rc == rc_kreg && dst_first_rc == rc_stack) {\n+    assert((src_first & 1) == 0 && src_first + 1 == src_second, \"invalid register pair\");\n+    assert((dst_first & 1) == 0 && dst_first + 1 == dst_second, \"invalid register pair\");\n+    MacroAssembler _masm(cbuf);\n+    int offset = ra_->reg2offset(dst_first);\n+    __ kmovql(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n+    return 0;\n+  }\n+\n+  if (src_first_rc == rc_kreg && dst_first_rc == rc_int) {\n+    Unimplemented();\n+    return 0;\n+  }\n+\n+  if (src_first_rc == rc_int && dst_first_rc == rc_kreg) {\n+    Unimplemented();\n+    return 0;\n+  }\n+\n+  if (src_first_rc == rc_kreg && dst_first_rc == rc_kreg) {\n+    assert((src_first & 1) == 0 && src_first + 1 == src_second, \"invalid register pair\");\n+    assert((dst_first & 1) == 0 && dst_first + 1 == dst_second, \"invalid register pair\");\n+    MacroAssembler _masm(cbuf);\n+    __ kmovql(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+    return 0;\n+  }\n@@ -3577,0 +3619,74 @@\n+operand kReg()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K0()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K0));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K1()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K1));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K2()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K2));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Special Registers\n+operand kReg_K3()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K3));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K4()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K4));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K5()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K5));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K6()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K6));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Special Registers\n+operand kReg_K7()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K7));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n@@ -11413,1 +11529,1 @@\n-instruct rep_stos(eCXRegI cnt, eDIRegP base, regD tmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n+instruct rep_stos(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n@@ -11416,1 +11532,1 @@\n-  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, KILL zero, KILL cr);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, TEMP ktmp, KILL zero, KILL cr);\n@@ -11467,1 +11583,1 @@\n-                 $tmp$$XMMRegister, false);\n+                 $tmp$$XMMRegister, false, $ktmp$$KRegister);\n@@ -11472,1 +11588,1 @@\n-instruct rep_stos_large(eCXRegI cnt, eDIRegP base, regD tmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n+instruct rep_stos_large(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n@@ -11475,1 +11591,1 @@\n-  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, KILL zero, KILL cr);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, TEMP ktmp, KILL zero, KILL cr);\n@@ -11516,1 +11632,1 @@\n-                 $tmp$$XMMRegister, true);\n+                 $tmp$$XMMRegister, true, $ktmp$$KRegister);\n@@ -11521,1 +11637,1 @@\n-instruct rep_stos_im(immI cnt, eRegP base, regD tmp, rRegI zero, Universe dummy, eFlagsReg cr)\n+instruct rep_stos_im(immI cnt, kReg ktmp, eRegP base, regD tmp, rRegI zero, Universe dummy, eFlagsReg cr)\n@@ -11525,1 +11641,1 @@\n-  effect(TEMP tmp, TEMP zero, KILL cr);\n+  effect(TEMP tmp, TEMP zero, TEMP ktmp, KILL cr);\n@@ -11528,1 +11644,1 @@\n-   __ clear_mem($base$$Register, $cnt$$constant, $zero$$Register, $tmp$$XMMRegister);\n+   __ clear_mem($base$$Register, $cnt$$constant, $zero$$Register, $tmp$$XMMRegister, $ktmp$$KRegister);\n@@ -11534,1 +11650,1 @@\n-                         eAXRegI result, regD tmp1, eFlagsReg cr) %{\n+                         eAXRegI result, regD tmp1, kReg ktmp, eFlagsReg cr) %{\n@@ -11537,1 +11653,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -11543,1 +11659,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::LL);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::LL, $ktmp$$KRegister);\n@@ -11549,1 +11665,1 @@\n-                         eAXRegI result, regD tmp1, eFlagsReg cr) %{\n+                         eAXRegI result, regD tmp1, kReg ktmp, eFlagsReg cr) %{\n@@ -11552,1 +11668,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -11558,1 +11674,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::UU);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::UU, $ktmp$$KRegister);\n@@ -11564,1 +11680,1 @@\n-                          eAXRegI result, regD tmp1, eFlagsReg cr) %{\n+                          eAXRegI result, regD tmp1, kReg ktmp, eFlagsReg cr) %{\n@@ -11567,1 +11683,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -11573,1 +11689,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::LU);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::LU, $ktmp$$KRegister);\n@@ -11579,1 +11695,1 @@\n-                          eAXRegI result, regD tmp1, eFlagsReg cr) %{\n+                          eAXRegI result, regD tmp1, kReg ktmp, eFlagsReg cr) %{\n@@ -11582,1 +11698,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -11588,1 +11704,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::UL);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::UL, $ktmp$$KRegister);\n@@ -11595,1 +11711,1 @@\n-                       regD tmp1, regD tmp2, eBXRegI tmp3, eFlagsReg cr) %{\n+                       regD tmp1, regD tmp2, kReg ktmp, eBXRegI tmp3, eFlagsReg cr) %{\n@@ -11597,1 +11713,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL tmp3, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL tmp3, KILL cr);\n@@ -11603,1 +11719,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/, $ktmp$$KRegister);\n@@ -11770,1 +11886,1 @@\n-                       regD tmp1, regD tmp2, eCXRegI tmp3, eBXRegI tmp4, eFlagsReg cr)\n+                       regD tmp1, regD tmp2, kReg ktmp, eCXRegI tmp3, eBXRegI tmp4, eFlagsReg cr)\n@@ -11774,1 +11890,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n@@ -11781,1 +11897,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/, $ktmp$$KRegister);\n@@ -11787,1 +11903,1 @@\n-                       regD tmp1, regD tmp2, eCXRegI tmp3, eBXRegI tmp4, eFlagsReg cr)\n+                       regD tmp1, regD tmp2, kReg ktmp, eCXRegI tmp3, eBXRegI tmp4, eFlagsReg cr)\n@@ -11791,1 +11907,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n@@ -11798,1 +11914,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, true \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, true \/* char *\/, $ktmp$$KRegister);\n@@ -11804,1 +11920,1 @@\n-                      regD tmp1, regD tmp2, eBXRegI tmp3, eFlagsReg cr)\n+                      regD tmp1, regD tmp2, kReg ktmp1, kReg ktmp2, eBXRegI tmp3, eFlagsReg cr)\n@@ -11807,1 +11923,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL len, KILL tmp3, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp1, TEMP ktmp2, USE_KILL ary1, USE_KILL len, KILL tmp3, KILL cr);\n@@ -11813,1 +11929,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -11819,2 +11935,2 @@\n-instruct string_compress(eSIRegP src, eDIRegP dst, eDXRegI len, regD tmp1, regD tmp2, regD tmp3, regD tmp4,\n-                         eCXRegI tmp5, eAXRegI result, eFlagsReg cr) %{\n+instruct string_compress(eSIRegP src, eDIRegP dst, eDXRegI len, regD tmp1, regD tmp2,\n+                         regD tmp3, regD tmp4, kReg ktmp1, kReg ktmp2, eCXRegI tmp5, eAXRegI result, eFlagsReg cr) %{\n@@ -11822,1 +11938,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL src, USE_KILL dst, USE_KILL len, KILL tmp5, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP ktmp1, TEMP ktmp2, USE_KILL src, USE_KILL dst, USE_KILL len, KILL tmp5, KILL cr);\n@@ -11828,1 +11944,2 @@\n-                           $tmp4$$XMMRegister, $tmp5$$Register, $result$$Register);\n+                           $tmp4$$XMMRegister, $tmp5$$Register, $result$$Register,\n+                           $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -11835,1 +11952,1 @@\n-                        regD tmp1, eCXRegI tmp2, eFlagsReg cr) %{\n+                        regD tmp1, kReg ktmp, eCXRegI tmp2, eFlagsReg cr) %{\n@@ -11837,1 +11954,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n@@ -11842,1 +11959,1 @@\n-                          $tmp1$$XMMRegister, $tmp2$$Register);\n+                          $tmp1$$XMMRegister, $tmp2$$Register, $ktmp$$KRegister);\n@@ -12270,1 +12387,1 @@\n-instruct jmpLoopEnd_and_restoreMask(cmpOp cop, eFlagsReg cr, label labl) %{\n+instruct jmpLoopEnd_and_restoreMask(cmpOp cop, kReg_K1 ktmp, eFlagsReg cr, label labl) %{\n@@ -12273,1 +12390,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -12282,1 +12399,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n@@ -12288,1 +12405,1 @@\n-instruct jmpLoopEndU_and_restoreMask(cmpOpU cop, eFlagsRegU cmp, label labl) %{\n+instruct jmpLoopEndU_and_restoreMask(cmpOpU cop, kReg_K1 ktmp, eFlagsRegU cmp, label labl) %{\n@@ -12291,1 +12408,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -12300,1 +12417,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n@@ -12305,1 +12422,1 @@\n-instruct jmpLoopEndUCF_and_restoreMask(cmpOpUCF cop, eFlagsRegUCF cmp, label labl) %{\n+instruct jmpLoopEndUCF_and_restoreMask(cmpOpUCF cop, kReg_K1 ktmp, eFlagsRegUCF cmp, label labl) %{\n@@ -12308,1 +12425,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -12317,1 +12434,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":171,"deletions":54,"binary":false,"changes":225,"status":"modified"},{"patch":"@@ -427,0 +427,4 @@\n+\n+  if(Matcher::has_predicated_vectors()) {\n+    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()));\n+  }\n@@ -1017,0 +1021,1 @@\n+  rc_kreg,\n@@ -1031,0 +1036,2 @@\n+  if (r->is_KRegister()) return rc_kreg;\n+\n@@ -1274,0 +1281,18 @@\n+#endif\n+        }\n+      }\n+      return 0;\n+    } else if (dst_first_rc == rc_kreg) {\n+      \/\/ mem -> kreg\n+      if ((src_first & 1) == 0 && src_first + 1 == src_second &&\n+          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {\n+        \/\/ 64-bit\n+        int offset = ra_->reg2offset(src_first);\n+        if (cbuf) {\n+          MacroAssembler _masm(cbuf);\n+          __ kmovql(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+#ifndef PRODUCT\n+        } else {\n+          st->print(\"kmovq   %s, [rsp + #%d]\\t# spill\",\n+                     Matcher::regName[dst_first],\n+                     offset);\n@@ -1379,0 +1404,17 @@\n+    } else if (dst_first_rc == rc_kreg) {\n+      if ((src_first & 1) == 0 && src_first + 1 == src_second &&\n+          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {\n+      \/\/ 64-bit\n+        if (cbuf) {\n+          MacroAssembler _masm(cbuf);\n+          __ kmovql(as_KRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n+  #ifndef PRODUCT\n+        } else {\n+           st->print(\"kmovq   %s, %s\\t# spill\",\n+                       Matcher::regName[dst_first],\n+                       Matcher::regName[src_first]);\n+  #endif\n+        }\n+      }\n+      Unimplemented();\n+      return 0;\n@@ -1479,0 +1521,59 @@\n+    } else if (dst_first_rc == rc_kreg) {\n+      assert(false, \"Illegal spilling\");\n+      return 0;\n+    }\n+  } else if (src_first_rc == rc_kreg) {\n+    if (dst_first_rc == rc_stack) {\n+      \/\/ mem -> kreg\n+      if ((src_first & 1) == 0 && src_first + 1 == src_second &&\n+          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {\n+        \/\/ 64-bit\n+        int offset = ra_->reg2offset(dst_first);\n+        if (cbuf) {\n+          MacroAssembler _masm(cbuf);\n+          __ kmovql(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n+#ifndef PRODUCT\n+        } else {\n+          st->print(\"kmovq   [rsp + #%d] , %s\\t# spill\",\n+                     offset,\n+                     Matcher::regName[src_first]);\n+#endif\n+        }\n+      }\n+      return 0;\n+    } else if(dst_first_rc == rc_int) {\n+      if ((src_first & 1) == 0 && src_first + 1 == src_second &&\n+          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {\n+        \/\/ 64-bit\n+        if (cbuf) {\n+          MacroAssembler _masm(cbuf);\n+          __ kmovql(as_Register(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+#ifndef PRODUCT\n+        } else {\n+         st->print(\"kmovq   %s, %s\\t# spill\",\n+                     Matcher::regName[dst_first],\n+                     Matcher::regName[src_first]);\n+#endif\n+        }\n+      }\n+      Unimplemented();\n+      return 0;\n+    } else if(dst_first_rc == rc_kreg) {\n+      if ((src_first & 1) == 0 && src_first + 1 == src_second &&\n+          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {\n+        \/\/ 64-bit\n+        if (cbuf) {\n+          MacroAssembler _masm(cbuf);\n+          __ kmovql(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+#ifndef PRODUCT\n+        } else {\n+         st->print(\"kmovq   %s, %s\\t# spill\",\n+                     Matcher::regName[dst_first],\n+                     Matcher::regName[src_first]);\n+#endif\n+        }\n+      }\n+      return 0;\n+    } else if(dst_first_rc == rc_float) {\n+      assert(false, \"Illegal spill\");\n+      return 0;\n@@ -1481,1 +1582,0 @@\n-\n@@ -3282,0 +3382,74 @@\n+operand kReg()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K0()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K0));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K1()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K1));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K2()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K2));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Special Registers\n+operand kReg_K3()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K3));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K4()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K4));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K5()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K5));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+operand kReg_K6()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K6));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n+\/\/ Special Registers\n+operand kReg_K7()\n+%{\n+  constraint(ALLOC_IN_RC(opmask_reg_K7));\n+  match(RegVMask);\n+  format %{%}\n+  interface(REG_INTER);\n+%}\n+\n@@ -10747,1 +10921,1 @@\n-instruct rep_stos(rcx_RegL cnt, rdi_RegP base, regD tmp, rax_RegI zero,\n+instruct rep_stos(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegI zero,\n@@ -10752,1 +10926,1 @@\n-  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, KILL zero, KILL cr);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, TEMP ktmp, KILL zero, KILL cr);\n@@ -10801,1 +10975,1 @@\n-                 $tmp$$XMMRegister, false);\n+                 $tmp$$XMMRegister, false, $ktmp$$KRegister);\n@@ -10806,1 +10980,1 @@\n-instruct rep_stos_large(rcx_RegL cnt, rdi_RegP base, regD tmp, rax_RegI zero,\n+instruct rep_stos_large(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegI zero,\n@@ -10811,1 +10985,1 @@\n-  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, KILL zero, KILL cr);\n+  effect(USE_KILL cnt, USE_KILL base, TEMP tmp, TEMP ktmp, KILL zero, KILL cr);\n@@ -10851,1 +11025,1 @@\n-                 $tmp$$XMMRegister, true);\n+                 $tmp$$XMMRegister, true, $ktmp$$KRegister);\n@@ -10856,1 +11030,1 @@\n-instruct rep_stos_im(immL cnt, rRegP base, regD tmp, rRegI zero, Universe dummy, rFlagsReg cr)\n+instruct rep_stos_im(immL cnt, rRegP base, regD tmp, rRegI zero, kReg ktmp, Universe dummy, rFlagsReg cr)\n@@ -10860,1 +11034,1 @@\n-  effect(TEMP tmp, TEMP zero, KILL cr);\n+  effect(TEMP tmp, TEMP zero, TEMP ktmp, KILL cr);\n@@ -10863,1 +11037,1 @@\n-   __ clear_mem($base$$Register, $cnt$$constant, $zero$$Register, $tmp$$XMMRegister);\n+   __ clear_mem($base$$Register, $cnt$$constant, $zero$$Register, $tmp$$XMMRegister, $ktmp$$KRegister);\n@@ -10869,1 +11043,1 @@\n-                         rax_RegI result, legRegD tmp1, rFlagsReg cr)\n+                         rax_RegI result, legRegD tmp1, kReg ktmp, rFlagsReg cr)\n@@ -10873,1 +11047,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -10879,1 +11053,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::LL);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::LL, $ktmp$$KRegister);\n@@ -10885,1 +11059,1 @@\n-                         rax_RegI result, legRegD tmp1, rFlagsReg cr)\n+                         rax_RegI result, legRegD tmp1, kReg ktmp, rFlagsReg cr)\n@@ -10889,1 +11063,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -10895,1 +11069,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::UU);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::UU, $ktmp$$KRegister);\n@@ -10901,1 +11075,1 @@\n-                          rax_RegI result, legRegD tmp1, rFlagsReg cr)\n+                          rax_RegI result, legRegD tmp1, kReg ktmp, rFlagsReg cr)\n@@ -10905,1 +11079,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -10911,1 +11085,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::LU);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::LU, $ktmp$$KRegister);\n@@ -10917,1 +11091,1 @@\n-                          rax_RegI result, legRegD tmp1, rFlagsReg cr)\n+                          rax_RegI result, legRegD tmp1, kReg ktmp, rFlagsReg cr)\n@@ -10921,1 +11095,1 @@\n-  effect(TEMP tmp1, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(TEMP tmp1, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n@@ -10927,1 +11101,1 @@\n-                      $tmp1$$XMMRegister, StrIntrinsicNode::UL);\n+                      $tmp1$$XMMRegister, StrIntrinsicNode::UL, $ktmp$$KRegister);\n@@ -11100,1 +11274,1 @@\n-                       legRegD tmp1, legRegD tmp2, rbx_RegI tmp3, rFlagsReg cr)\n+                       legRegD tmp1, legRegD tmp2, kReg ktmp, rbx_RegI tmp3, rFlagsReg cr)\n@@ -11103,1 +11277,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL tmp3, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL tmp3, KILL cr);\n@@ -11109,1 +11283,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/, $ktmp$$KRegister);\n@@ -11116,1 +11290,1 @@\n-                       legRegD tmp1, legRegD tmp2, rcx_RegI tmp3, rbx_RegI tmp4, rFlagsReg cr)\n+                       legRegD tmp1, legRegD tmp2, kReg ktmp, rcx_RegI tmp3, rbx_RegI tmp4, rFlagsReg cr)\n@@ -11120,1 +11294,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n@@ -11126,1 +11300,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, false \/* char *\/, $ktmp$$KRegister);\n@@ -11132,1 +11306,1 @@\n-                       legRegD tmp1, legRegD tmp2, rcx_RegI tmp3, rbx_RegI tmp4, rFlagsReg cr)\n+                       legRegD tmp1, legRegD tmp2, kReg ktmp, rcx_RegI tmp3, rbx_RegI tmp4, rFlagsReg cr)\n@@ -11136,1 +11310,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL ary1, USE_KILL ary2, KILL tmp3, KILL tmp4, KILL cr);\n@@ -11142,1 +11316,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, true \/* char *\/);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, true \/* char *\/, $ktmp$$KRegister);\n@@ -11148,1 +11322,1 @@\n-                       legRegD tmp1, legRegD tmp2, rbx_RegI tmp3, rFlagsReg cr)\n+                       legRegD tmp1, legRegD tmp2, kReg ktmp1, kReg ktmp2, rbx_RegI tmp3, rFlagsReg cr,)\n@@ -11151,1 +11325,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL ary1, USE_KILL len, KILL tmp3, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp1, TEMP ktmp2, USE_KILL ary1, USE_KILL len, KILL tmp3, KILL cr);\n@@ -11157,1 +11331,1 @@\n-                     $tmp1$$XMMRegister, $tmp2$$XMMRegister);\n+                     $tmp1$$XMMRegister, $tmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -11163,2 +11337,2 @@\n-instruct string_compress(rsi_RegP src, rdi_RegP dst, rdx_RegI len, legRegD tmp1, legRegD tmp2, legRegD tmp3, legRegD tmp4,\n-                         rcx_RegI tmp5, rax_RegI result, rFlagsReg cr) %{\n+instruct string_compress(rsi_RegP src, rdi_RegP dst, rdx_RegI len, legRegD tmp1, legRegD tmp2, legRegD tmp3,\n+                         legRegD tmp4, kReg ktmp1, kReg ktmp2, rcx_RegI tmp5, rax_RegI result, rFlagsReg cr) %{\n@@ -11166,1 +11340,2 @@\n-  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL src, USE_KILL dst, USE_KILL len, KILL tmp5, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP ktmp1, TEMP ktmp2, USE_KILL src, USE_KILL dst,\n+         USE_KILL len, KILL tmp5, KILL cr);\n@@ -11172,1 +11347,2 @@\n-                           $tmp4$$XMMRegister, $tmp5$$Register, $result$$Register);\n+                           $tmp4$$XMMRegister, $tmp5$$Register, $result$$Register,\n+                           $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -11179,1 +11355,1 @@\n-                        legRegD tmp1, rcx_RegI tmp2, rFlagsReg cr) %{\n+                        legRegD tmp1, kReg ktmp, rcx_RegI tmp2, rFlagsReg cr) %{\n@@ -11181,1 +11357,1 @@\n-  effect(TEMP tmp1, TEMP tmp2, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP ktmp, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n@@ -11186,1 +11362,1 @@\n-                          $tmp1$$XMMRegister, $tmp2$$Register);\n+                          $tmp1$$XMMRegister, $tmp2$$Register, $ktmp$$KRegister);\n@@ -11978,1 +12154,1 @@\n-instruct jmpLoopEnd_and_restoreMask(cmpOp cop, rFlagsReg cr, label labl)\n+instruct jmpLoopEnd_and_restoreMask(cmpOp cop, kReg_K1 ktmp, rFlagsReg cr, label labl)\n@@ -11982,1 +12158,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -11991,1 +12167,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n@@ -11997,1 +12173,1 @@\n-instruct jmpLoopEndU_and_restoreMask(cmpOpU cop, rFlagsRegU cmp, label labl) %{\n+instruct jmpLoopEndU_and_restoreMask(cmpOpU cop, kReg_K1 ktmp, rFlagsRegU cmp, label labl) %{\n@@ -12000,1 +12176,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -12009,1 +12185,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n@@ -12014,1 +12190,1 @@\n-instruct jmpLoopEndUCF_and_restoreMask(cmpOpUCF cop, rFlagsRegUCF cmp, label labl) %{\n+instruct jmpLoopEndUCF_and_restoreMask(cmpOpUCF cop, kReg_K1 ktmp, rFlagsRegUCF cmp, label labl) %{\n@@ -12017,1 +12193,1 @@\n-  effect(USE labl);\n+  effect(USE labl, TEMP ktmp);\n@@ -12026,1 +12202,1 @@\n-    __ restorevectmask();\n+    __ restorevectmask($ktmp$$KRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":226,"deletions":50,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -949,1 +949,1 @@\n-    return \"Type::BOTTOM\";\n+    return \"Matcher::predicate_reg_type()\";\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2268,0 +2268,1 @@\n+    if (strcmp(rep_var,\"$KRegister\") == 0)      return \"as_KRegister\";\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,59 @@\n+void PhiNode::add_req(Node *n) {\n+  Node::add_req(n);\n+  if (Matcher::is_mask_generating_node(n)) {\n+    set_has_masked_inputs(true);\n+  }\n+}\n+\n+void PhiNode::add_req_batch(Node* n, uint m) {\n+  Node::add_req_batch(n, m);\n+  if (Matcher::is_mask_generating_node(n)) {\n+    set_has_masked_inputs(true);\n+  }\n+}\n+void PhiNode::del_req(uint idx) {\n+  Node::del_req(idx);\n+  bool remove_masked_inputs_flags = true;\n+  for(uint i = 0; i < req() ; i++) {\n+     if(Matcher::is_mask_generating_node(in(i))) {\n+        remove_masked_inputs_flags = false;\n+     }\n+  }\n+  if (remove_masked_inputs_flags) {\n+     set_has_masked_inputs(false);\n+  }\n+}\n+\n+void PhiNode::del_req_ordered(uint idx) {\n+  Node::del_req_ordered(idx);\n+  bool remove_masked_inputs_flags = true;\n+  for(uint i = 0; i < req() ; i++) {\n+     if(Matcher::is_mask_generating_node(in(i))) {\n+        remove_masked_inputs_flags = false;\n+     }\n+  }\n+  if (remove_masked_inputs_flags) {\n+     set_has_masked_inputs(false);\n+  }\n+}\n+\n+void PhiNode::ins_req(uint i, Node *n) {\n+  Node::ins_req(i, n);\n+  if (Matcher::is_mask_generating_node(n)) {\n+    set_has_masked_inputs(true);\n+  }\n+}\n+\n+void PhiNode::set_req(uint i, Node *n) {\n+  Node::set_req(i, n);\n+  if (Matcher::is_mask_generating_node(n)) {\n+    set_has_masked_inputs(true);\n+  }\n+}\n+\n+void PhiNode::init_req(uint i, Node *n) {\n+  Node::init_req(i, n);\n+  if (Matcher::is_mask_generating_node(n)) {\n+    set_has_masked_inputs(true);\n+  }\n+}\n@@ -2461,0 +2520,3 @@\n+  if (_has_masked_inputs) {\n+    ideal_reg = Op_RegVMask;\n+  }\n@@ -2467,0 +2529,16 @@\n+uint PhiNode::ideal_reg() const {\n+  if (_has_masked_inputs) {\n+    return Op_RegVMask;\n+  } else {\n+    return _type->ideal_reg();\n+  }\n+}\n+\n+const Type* PhiNode::bottom_type() const {\n+  if (_has_masked_inputs) {\n+    return Matcher::predicate_reg_type();\n+  } else {\n+    return type();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+  bool _has_masked_inputs;\n@@ -162,1 +163,2 @@\n-      _inst_offset(ioffs)\n+      _inst_offset(ioffs),\n+      _has_masked_inputs(false)\n@@ -183,0 +185,2 @@\n+  bool has_masked_inputs() { return _has_masked_inputs;}\n+  void set_has_masked_inputs(bool val = true) { _has_masked_inputs = val;}\n@@ -203,0 +207,9 @@\n+  virtual uint  ideal_reg() const;\n+\n+  virtual void add_req(Node *n);\n+  virtual void add_req_batch(Node* n, uint m);\n+  virtual void del_req(uint idx);\n+  virtual void del_req_ordered(uint idx);\n+  virtual void ins_req(uint i, Node *n);\n+  virtual void set_req(uint i, Node *n);\n+  virtual void init_req(uint i, Node *n);\n@@ -217,1 +230,1 @@\n-\n+  virtual const Type *bottom_type() const;\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -827,1 +827,2 @@\n-        assert(n_type->isa_vect() == NULL || lrg._is_vector || ireg == Op_RegD || ireg == Op_RegL,\n+        assert(n_type->isa_vect() == NULL || lrg._is_vector ||\n+               ireg == Op_RegD || ireg == Op_RegL  || ireg == Op_RegVMask,\n@@ -897,0 +898,3 @@\n+#if defined(IA32) || defined(AMD64)\n+        case Op_RegVMask:\n+#endif\n@@ -902,1 +906,1 @@\n-          if( ireg == Op_RegL ) {\n+          if( ireg == Op_RegL  || ireg == Op_RegVMask ) {\n@@ -1039,2 +1043,2 @@\n-        assert(n->in(k)->bottom_type()->isa_vect() == NULL ||\n-               is_vect || kreg == Op_RegD || kreg == Op_RegL,\n+        assert(n->in(k)->bottom_type()->isa_vect() == NULL || is_vect ||\n+               kreg == Op_RegD || kreg == Op_RegL || kreg == Op_RegVMask,\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -412,1 +412,2 @@\n-        lrg.mask().overlap(*Matcher::idealreg2regmask[Op_RegI])) {\n+        ( lrg.mask().overlap(*Matcher::idealreg2regmask[Op_RegI]) ||\n+          lrg.mask().overlap(*Matcher::idealreg2regmask[Op_RegVMask]))) {\n@@ -448,1 +449,2 @@\n-      if (r.overlap(*Matcher::idealreg2regmask[Op_RegI])) {\n+      if (r.overlap(*Matcher::idealreg2regmask[Op_RegI]) ||\n+          r.overlap(*Matcher::idealreg2regmask[Op_RegVMask])) {\n@@ -503,1 +505,2 @@\n-      if (rm.overlap(*Matcher::idealreg2regmask[Op_RegI])) {\n+      if (rm.overlap(*Matcher::idealreg2regmask[Op_RegI]) ||\n+          rm.overlap(*Matcher::idealreg2regmask[Op_RegVMask])) {\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,0 +106,6 @@\n+  KRegister  as_KRegister(PhaseRegAlloc *ra_, const Node *node)   const {\n+    return ::as_KRegister(reg(ra_, node));\n+  }\n+  KRegister  as_KRegister(PhaseRegAlloc *ra_, const Node *node, int idx)   const {\n+    return ::as_KRegister(reg(ra_, node, idx));\n+  }\n@@ -319,0 +325,2 @@\n+    } else if (Matcher::is_mask_generating_oper(ideal_Opcode())) {\n+      return Op_RegVMask;\n@@ -582,1 +590,1 @@\n-  const Type *_type;\n+  const Node *_node;\n@@ -586,1 +594,1 @@\n-    MachIdealNode(), _in(&in), _out(&out), _type(n->bottom_type()), _spill_type(spill_type) {\n+    MachIdealNode(), _in(&in), _out(&out), _node(n), _spill_type(spill_type) {\n@@ -597,2 +605,10 @@\n-  virtual const class Type *bottom_type() const { return _type; }\n-  virtual uint ideal_reg() const { return _type->ideal_reg(); }\n+  virtual const class Type *bottom_type() const { return _node->bottom_type(); }\n+  virtual uint ideal_reg() const {\n+    if(_node->isa_Mach()) {\n+      return _node->as_Mach()->ideal_reg();\n+    }\n+    if (_node->isa_Phi()) {\n+      return _node->ideal_reg();\n+    }\n+    return _node->bottom_type()->ideal_reg();\n+  }\n@@ -1078,0 +1094,8 @@\n+  virtual uint ideal_reg() const {\n+    if (Matcher::is_predicate_operand(_opnd_array[0]->opcode())) {\n+      return Op_RegVMask;\n+    } else {\n+      return MachNode::ideal_reg();\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  Node* mask_gen =  new VectorMaskGenNode(length, TypeLong::LONG, Type::get_const_basic_type(type));\n+  Node* mask_gen =  new VectorMaskGenNode(length, Matcher::predicate_reg_type(), Type::get_const_basic_type(type));\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+  idealreg2spillmask  [Op_RegVMask] = NULL;\n@@ -112,0 +113,1 @@\n+  idealreg2debugmask  [Op_RegVMask] = NULL;\n@@ -126,0 +128,1 @@\n+  idealreg2mhdebugmask[Op_RegVMask] = NULL;\n@@ -433,1 +436,1 @@\n-#define NOF_STACK_MASKS (3*12)\n+#define NOF_STACK_MASKS (3*13)\n@@ -490,0 +493,4 @@\n+  idealreg2spillmask  [Op_RegVMask] = &rms[36];\n+  idealreg2debugmask  [Op_RegVMask] = &rms[37];\n+  idealreg2mhdebugmask[Op_RegVMask] = &rms[38];\n+\n@@ -534,0 +541,5 @@\n+  if (Matcher::has_predicated_vectors()) {\n+   *idealreg2spillmask[Op_RegVMask] = *idealreg2regmask[Op_RegVMask];\n+   idealreg2spillmask[Op_RegVMask]->OR(aligned_stack_mask);\n+  }\n+\n@@ -652,0 +664,3 @@\n+  if (Matcher::has_predicated_vectors()) {\n+    *idealreg2debugmask  [Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n+  }\n@@ -666,0 +681,3 @@\n+  if (Matcher::has_predicated_vectors()) {\n+    *idealreg2mhdebugmask[Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n+  }\n@@ -686,0 +704,3 @@\n+  if (Matcher::has_predicated_vectors()) {\n+    idealreg2debugmask[Op_RegVMask]->SUBTRACT(*caller_save_mask);\n+  }\n@@ -700,1 +721,3 @@\n-\n+  if (Matcher::has_predicated_vectors()) {\n+    idealreg2mhdebugmask[Op_RegVMask]->SUBTRACT(*mh_caller_save_mask);\n+  }\n@@ -968,0 +991,6 @@\n+  idealreg2regmask[Op_VecZ] = regmask_for_ideal_register(Op_VecZ, ret);\n+  if (Matcher::has_predicated_vectors()) {\n+    idealreg2regmask[Op_RegVMask] = regmask_for_ideal_register(Op_RegVMask, ret);\n+  } else {\n+    idealreg2regmask[Op_RegVMask] = idealreg2regmask[Op_RegI];\n+  }\n@@ -2562,0 +2591,3 @@\n+    case Op_RegVMask: {\n+       return Matcher::predicate_reg_mask();\n+    } break;\n@@ -2616,0 +2648,1 @@\n+\n@@ -2829,0 +2862,23 @@\n+\n+bool Matcher::is_mask_generating_node(Node* n) {\n+  if(!Matcher::has_predicated_vectors() || !n) {\n+    return false;\n+  }\n+  if (n->is_Phi()) {\n+    return reinterpret_cast<PhiNode*>(n)->has_masked_inputs();\n+  }\n+  return is_mask_generating_oper(n->Opcode());\n+}\n+\n+bool Matcher::is_mask_generating_oper(int opcode) {\n+  \/\/TODO: Other mask generating nodes are VectorLoadMask\n+  \/\/and VectorMaskCmp, will be handled along with changes\n+  \/\/to corresponding instruction patterns.\n+  switch(opcode) {\n+    case Op_VectorMaskGen:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -322,0 +322,6 @@\n+  static const RegMask* predicate_reg_mask(void);\n+  static const bool is_predicate_operand(int opcode);\n+  static bool is_mask_generating_node(Node* n);\n+  static bool is_mask_generating_oper(int opcode);\n+\n+  static const Type* predicate_reg_type();\n@@ -512,0 +518,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -413,1 +413,1 @@\n-  void add_req( Node *n ); \/\/ Append a NEW required input\n+  virtual void add_req( Node *n ); \/\/ Append a NEW required input\n@@ -418,5 +418,5 @@\n-  void add_req_batch( Node* n, uint m ); \/\/ Append m NEW required inputs (all n).\n-  void del_req( uint idx ); \/\/ Delete required edge & compact\n-  void del_req_ordered( uint idx ); \/\/ Delete required edge & compact with preserved order\n-  void ins_req( uint i, Node *n ); \/\/ Insert a NEW required input\n-  void set_req( uint i, Node *n ) {\n+  virtual void add_req_batch( Node* n, uint m ); \/\/ Append m NEW required inputs (all n).\n+  virtual void del_req( uint idx ); \/\/ Delete required edge & compact\n+  virtual void del_req_ordered( uint idx ); \/\/ Delete required edge & compact with preserved order\n+  virtual void ins_req( uint i, Node *n ); \/\/ Insert a NEW required input\n+  virtual void set_req( uint i, Node *n ) {\n@@ -434,1 +434,1 @@\n-  void init_req( uint i, Node *n ) {\n+  virtual void init_req( uint i, Node *n ) {\n@@ -695,0 +695,1 @@\n+      DEFINE_CLASS_ID(Vector, Type, 7)\n@@ -739,1 +740,0 @@\n-    DEFINE_CLASS_ID(Vector,   Node, 13)\n@@ -1025,0 +1025,1 @@\n+  virtual const void* meta_data() const { return NULL; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ Stack-slots (spill locations) start at the nest Chunk past the last machine\n+\/\/ Stack-slots (spill locations) start at the next Chunk past the last machine\n","filename":"src\/hotspot\/share\/opto\/optoreg.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1358,0 +1358,3 @@\n+      if (def->ideal_reg() == Op_RegVMask) {\n+        static_cast<PhiNode*>(phi)->set_has_masked_inputs();\n+      }\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,3 @@\n+#if defined(AMD64) || defined(IA32)\n+    case Op_RegVMask:\n+#endif\n","filename":"src\/hotspot\/share\/opto\/regmask.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -563,0 +563,3 @@\n+  if (Matcher::has_predicated_vectors()) {\n+    mreg2type[Op_RegVMask] = Matcher::predicate_reg_type();\n+  }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -828,0 +828,3 @@\n+  virtual uint  ideal_reg() const {\n+    return Op_RegVMask;\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}