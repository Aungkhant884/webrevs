{"files":[{"patch":"@@ -470,16 +470,16 @@\n-  reg_def P0 (SOC, SOC, Op_RegVMask, 0, p0->as_VMReg());\n-  reg_def P1 (SOC, SOC, Op_RegVMask, 1, p1->as_VMReg());\n-  reg_def P2 (SOC, SOC, Op_RegVMask, 2, p2->as_VMReg());\n-  reg_def P3 (SOC, SOC, Op_RegVMask, 3, p3->as_VMReg());\n-  reg_def P4 (SOC, SOC, Op_RegVMask, 4, p4->as_VMReg());\n-  reg_def P5 (SOC, SOC, Op_RegVMask, 5, p5->as_VMReg());\n-  reg_def P6 (SOC, SOC, Op_RegVMask, 6, p6->as_VMReg());\n-  reg_def P7 (SOC, SOC, Op_RegVMask, 7, p7->as_VMReg());\n-  reg_def P8 (SOC, SOC, Op_RegVMask, 8, p8->as_VMReg());\n-  reg_def P9 (SOC, SOC, Op_RegVMask, 9, p9->as_VMReg());\n-  reg_def P10 (SOC, SOC, Op_RegVMask, 10, p10->as_VMReg());\n-  reg_def P11 (SOC, SOC, Op_RegVMask, 11, p11->as_VMReg());\n-  reg_def P12 (SOC, SOC, Op_RegVMask, 12, p12->as_VMReg());\n-  reg_def P13 (SOC, SOC, Op_RegVMask, 13, p13->as_VMReg());\n-  reg_def P14 (SOC, SOC, Op_RegVMask, 14, p14->as_VMReg());\n-  reg_def P15 (SOC, SOC, Op_RegVMask, 15, p15->as_VMReg());\n+  reg_def P0 (SOC, SOC, Op_RegVectMask, 0, p0->as_VMReg());\n+  reg_def P1 (SOC, SOC, Op_RegVectMask, 1, p1->as_VMReg());\n+  reg_def P2 (SOC, SOC, Op_RegVectMask, 2, p2->as_VMReg());\n+  reg_def P3 (SOC, SOC, Op_RegVectMask, 3, p3->as_VMReg());\n+  reg_def P4 (SOC, SOC, Op_RegVectMask, 4, p4->as_VMReg());\n+  reg_def P5 (SOC, SOC, Op_RegVectMask, 5, p5->as_VMReg());\n+  reg_def P6 (SOC, SOC, Op_RegVectMask, 6, p6->as_VMReg());\n+  reg_def P7 (SOC, SOC, Op_RegVectMask, 7, p7->as_VMReg());\n+  reg_def P8 (SOC, SOC, Op_RegVectMask, 8, p8->as_VMReg());\n+  reg_def P9 (SOC, SOC, Op_RegVectMask, 9, p9->as_VMReg());\n+  reg_def P10 (SOC, SOC, Op_RegVectMask, 10, p10->as_VMReg());\n+  reg_def P11 (SOC, SOC, Op_RegVectMask, 11, p11->as_VMReg());\n+  reg_def P12 (SOC, SOC, Op_RegVectMask, 12, p12->as_VMReg());\n+  reg_def P13 (SOC, SOC, Op_RegVectMask, 13, p13->as_VMReg());\n+  reg_def P14 (SOC, SOC, Op_RegVectMask, 14, p14->as_VMReg());\n+  reg_def P15 (SOC, SOC, Op_RegVectMask, 15, p15->as_VMReg());\n@@ -5612,1 +5612,1 @@\n-  match(RegVMask);\n+  match(RegVectMask);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -11527,0 +11527,1 @@\n+\/\/ Small ClearArray non-AVX512.\n@@ -11529,2 +11530,1 @@\n-              ((UseAVX <= 2 || !VM_Version::supports_avx512vlbw()) &&\n-                !n->in(2)->bottom_type()->is_int()->is_con()));\n+              (UseAVX <= 2 || !VM_Version::supports_avx512vlbw()));\n@@ -11588,0 +11588,1 @@\n+\/\/ Small ClearArray AVX512 non-constant length.\n@@ -11649,0 +11650,1 @@\n+\/\/ Large ClearArray non-AVX512.\n@@ -11698,0 +11700,1 @@\n+\/\/ Large ClearArray AVX512.\n@@ -11746,0 +11749,2 @@\n+\n+\/\/ Small ClearArray AVX512 constant length.\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -10944,0 +10944,1 @@\n+\/\/ Small ClearArray non-AVX512.\n@@ -10948,2 +10949,1 @@\n-              ((UseAVX <= 2 || !VM_Version::supports_avx512vlbw()) &&\n-               !n->in(2)->bottom_type()->is_long()->is_con()));\n+              (UseAVX <= 2 || !VM_Version::supports_avx512vlbw()));\n@@ -11005,0 +11005,1 @@\n+\/\/ Small ClearArray AVX512 non-constant length.\n@@ -11066,0 +11067,1 @@\n+\/\/ Large ClearArray non-AVX512.\n@@ -11116,0 +11118,1 @@\n+\/\/ Large ClearArray AVX512.\n@@ -11166,0 +11169,1 @@\n+\/\/ Small ClearArray AVX512 constant length.\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}