{"files":[{"patch":"@@ -2443,1 +2443,1 @@\n-  return NULL;\n+  return &_PR_REG_mask;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -632,3 +632,0 @@\n-reg_def K0   (SOC, SOC, Op_RegI,  0, k0->as_VMReg());\n-reg_def K0_H (SOC, SOC, Op_RegI,  0, k0->as_VMReg()->next());\n-\n@@ -699,2 +696,1 @@\n-                   K1, K1_H,\n-                   K0, K0_H);\n+                   K1, K1_H);\n@@ -702,2 +698,1 @@\n-reg_class  opmask_reg(K0, K0_H,\n-                      K1, K1_H,\n+reg_class  opmask_reg(K1, K1_H,\n@@ -711,1 +706,0 @@\n-reg_class opmask_reg_K0(K0, K0_H);\n@@ -2626,1 +2620,1 @@\n-  predicate(Matcher::has_predicated_vectors());\n+  predicate(PostLoopMultiversioning && Matcher::has_predicated_vectors());\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -265,2 +265,0 @@\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()));\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()->next()));\n@@ -270,2 +268,4 @@\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()));\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()->next()));\n+    if (PostLoopMultiversioning) {\n+      const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()));\n+      const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()->next()));\n+    }\n@@ -3633,8 +3633,0 @@\n-operand kReg_K0()\n-%{\n-  constraint(ALLOC_IN_RC(opmask_reg_K0));\n-  match(RegVMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n@@ -12405,1 +12397,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n@@ -12425,1 +12417,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n@@ -12444,1 +12436,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -429,2 +429,0 @@\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()));\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k0->as_VMReg()->next()));\n@@ -434,2 +432,4 @@\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()));\n-    const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()->next()));\n+    if (PostLoopMultiversioning) {\n+      const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()));\n+      const_cast<RegMask*>(&_OPMASK_REG_mask)->Remove(OptoReg::as_OptoReg(k1->as_VMReg()->next()));\n+    }\n@@ -3409,8 +3409,0 @@\n-operand kReg_K0()\n-%{\n-  constraint(ALLOC_IN_RC(opmask_reg_K0));\n-  match(RegVMask);\n-  format %{%}\n-  interface(REG_INTER);\n-%}\n-\n@@ -12199,1 +12191,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n@@ -12219,1 +12211,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n@@ -12238,1 +12230,1 @@\n-  predicate(n->has_vector_mask_set());\n+  predicate(PostLoopMultiversioning && n->has_vector_mask_set());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -413,1 +413,2 @@\n-         lrg.mask().overlap(*Matcher::idealreg2regmask[Op_RegVMask]))) {\n+         (Matcher::has_predicated_vectors() &&\n+          lrg.mask().overlap(*Matcher::idealreg2regmask[Op_RegVMask])))) {\n@@ -450,1 +451,2 @@\n-          r.overlap(*Matcher::idealreg2regmask[Op_RegVMask])) {\n+           (Matcher::has_predicated_vectors() &&\n+            r.overlap(*Matcher::idealreg2regmask[Op_RegVMask]))) {\n@@ -506,1 +508,2 @@\n-          rm.overlap(*Matcher::idealreg2regmask[Op_RegVMask])) {\n+           (Matcher::has_predicated_vectors() &&\n+            rm.overlap(*Matcher::idealreg2regmask[Op_RegVMask]))) {\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -541,2 +541,1 @@\n-  if (Matcher::has_predicated_vectors()) {\n-   *idealreg2spillmask[Op_RegVMask] = *idealreg2regmask[Op_RegVMask];\n+  *idealreg2spillmask[Op_RegVMask] = *idealreg2regmask[Op_RegVMask];\n@@ -544,1 +543,0 @@\n-  }\n@@ -664,3 +662,1 @@\n-  if (Matcher::has_predicated_vectors()) {\n-    *idealreg2debugmask  [Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n-  }\n+  *idealreg2debugmask  [Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n@@ -681,3 +677,1 @@\n-  if (Matcher::has_predicated_vectors()) {\n-    *idealreg2mhdebugmask[Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n-  }\n+  *idealreg2mhdebugmask[Op_RegVMask] = *idealreg2spillmask[Op_RegVMask];\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2522,3 +2522,0 @@\n-  if (!t->isa_vectmask()) {\n-    return false;\n-  }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}