{"files":[{"patch":"@@ -2473,1 +2473,1 @@\n-  STATIC_ASSERT(JNIHandles::TypeTag::weak == 0b1);\n+  STATIC_ASSERT(JNIHandles::TypeTag::weak_global == 0b1);\n@@ -2484,1 +2484,1 @@\n-                 value, Address(value, -JNIHandles::TypeTag::weak), tmp1, tmp2);\n+                 value, Address(value, -JNIHandles::TypeTag::weak_global), tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1299,1 +1299,1 @@\n-  tst(value, JNIHandles::TypeTag::weak); \/\/ Test for weak tag.\n+  tst(value, JNIHandles::TypeTag::weak_global); \/\/ Test for weak tag.\n@@ -1310,1 +1310,1 @@\n-                 Address(value, -JNIHandles::TypeTag::weak), value, tmp1, tmp2, noreg);\n+                 Address(value, -JNIHandles::TypeTag::weak_global), value, tmp1, tmp2, noreg);\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-  __ andi_(tmp2, value, JNIHandles::TypeTag::weak);\n+  __ andi_(tmp2, value, JNIHandles::TypeTag::weak_global);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-  __ andi_(tmp1, value, JNIHandles::TypeTag::weak);\n+  __ andi_(tmp1, value, JNIHandles::TypeTag::weak_global);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-  andi(t0, value, JNIHandles::TypeTag::weak);\n+  andi(t0, value, JNIHandles::TypeTag::weak_global);\n@@ -579,1 +579,1 @@\n-                 Address(value, -JNIHandles::TypeTag::weak), tmp1, tmp2);\n+                 Address(value, -JNIHandles::TypeTag::weak_global), tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -403,1 +403,1 @@\n-  __ z_tmll(tmp1, JNIHandles::TypeTag::weak); \/\/ Test for jweak tag.\n+  __ z_tmll(tmp1, JNIHandles::TypeTag::weak_global); \/\/ Test for jweak tag.\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3899,1 +3899,1 @@\n-  testptr(value, JNIHandles::TypeTag::weak); \/\/ Test for weak tag.\n+  testptr(value, JNIHandles::TypeTag::weak_global); \/\/ Test for weak tag.\n@@ -3910,1 +3910,1 @@\n-                 value, Address(value, -JNIHandles::TypeTag::weak), tmp, thread);\n+                 value, Address(value, -JNIHandles::TypeTag::weak_global), tmp, thread);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  return _method_holder != NULL && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_global_weak_cleared(_method_holder);\n+  return _method_holder != NULL && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_weak_global_cleared(_method_holder);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    STATIC_ASSERT(TypeTag::local == 0);\n@@ -106,1 +107,1 @@\n-jobject JNIHandles::make_weak_global(Handle obj, AllocFailType alloc_failmode) {\n+jweak JNIHandles::make_weak_global(Handle obj, AllocFailType alloc_failmode) {\n@@ -109,1 +110,1 @@\n-  jobject res = NULL;\n+  jweak res = NULL;\n@@ -118,2 +119,2 @@\n-      char* tptr = reinterpret_cast<char*>(ptr) + TypeTag::weak;\n-      res = reinterpret_cast<jobject>(tptr);\n+      char* tptr = reinterpret_cast<char*>(ptr) + TypeTag::weak_global;\n+      res = reinterpret_cast<jweak>(tptr);\n@@ -139,1 +140,1 @@\n-bool JNIHandles::is_global_weak_cleared(jweak handle) {\n+bool JNIHandles::is_weak_global_cleared(jweak handle) {\n@@ -141,3 +142,1 @@\n-  assert(is_jweak_tagged(handle), \"not a weak handle\");\n-  assert(!is_global_tagged(handle), \"not a weak handle\");\n-  oop* oop_ptr = jweak_ptr(handle);\n+  oop* oop_ptr = weak_global_ptr(handle);\n@@ -150,2 +149,0 @@\n-    assert(is_global_tagged(handle), \"must be global handle\");\n-    assert(!is_jweak_tagged(handle), \"wrong method for destroying jweak\");\n@@ -159,1 +156,1 @@\n-void JNIHandles::destroy_weak_global(jobject handle) {\n+void JNIHandles::destroy_weak_global(jweak handle) {\n@@ -161,3 +158,1 @@\n-    assert(is_jweak_tagged(handle), \"JNI handle not jweak\");\n-    assert(!is_global_tagged(handle), \"wrong method for destroying global\");\n-    oop* oop_ptr = jweak_ptr(handle);\n+    oop* oop_ptr = weak_global_ptr(handle);\n@@ -191,2 +186,2 @@\n-  if (is_jweak_tagged(handle)) {\n-    if (is_storage_handle(weak_global_handles(), jweak_ptr(handle))) {\n+  if (is_weak_global_tagged(handle)) {\n+    if (is_storage_handle(weak_global_handles(), weak_global_ptr(handle))) {\n@@ -257,2 +252,2 @@\n-  assert(!is_jweak_tagged(handle) || is_storage_handle(weak_global_handles(), jweak_ptr(handle)), \"invalid storage\");\n-  return is_jweak_tagged(handle);\n+  assert(!is_weak_global_tagged(handle) || is_storage_handle(weak_global_handles(), weak_global_ptr(handle)), \"invalid storage\");\n+  return is_weak_global_tagged(handle);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  inline static bool is_jweak_tagged(jobject handle);\n+  inline static bool is_weak_global_tagged(jobject handle);\n@@ -51,1 +51,1 @@\n-  inline static oop* jobject_ptr(jobject handle); \/\/ NOT jweak or global!\n+  inline static oop* local_ptr(jobject handle);\n@@ -53,1 +53,1 @@\n-  inline static oop* jweak_ptr(jobject handle);\n+  inline static oop* weak_global_ptr(jweak handle);\n@@ -69,1 +69,1 @@\n-    weak = 0b01,\n+    weak_global = 0b01,\n@@ -81,1 +81,1 @@\n-  STATIC_ASSERT((TypeTag::weak & tag_mask) == TypeTag::weak);\n+  STATIC_ASSERT((TypeTag::weak_global & tag_mask) == TypeTag::weak_global);\n@@ -106,4 +106,4 @@\n-  static jobject make_weak_global(Handle obj,\n-                                  AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n-  static void destroy_weak_global(jobject handle);\n-  static bool is_global_weak_cleared(jweak handle); \/\/ Test jweak without resolution\n+  static jweak make_weak_global(Handle obj,\n+                                AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  static void destroy_weak_global(jweak handle);\n+  static bool is_weak_global_cleared(jweak handle); \/\/ Test jweak without resolution\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-inline bool JNIHandles::is_jweak_tagged(jobject handle) {\n-  return is_tagged_with(handle, TypeTag::weak);\n+inline bool JNIHandles::is_weak_global_tagged(jobject handle) {\n+  return is_tagged_with(handle, TypeTag::weak_global);\n@@ -51,1 +51,1 @@\n-inline oop* JNIHandles::jobject_ptr(jobject handle) {\n+inline oop* JNIHandles::local_ptr(jobject handle) {\n@@ -53,0 +53,1 @@\n+  STATIC_ASSERT(TypeTag::local == 0);\n@@ -62,3 +63,3 @@\n-inline oop* JNIHandles::jweak_ptr(jobject handle) {\n-  assert(is_jweak_tagged(handle), \"precondition\");\n-  char* ptr = reinterpret_cast<char*>(handle) - TypeTag::weak;\n+inline oop* JNIHandles::weak_global_ptr(jweak handle) {\n+  assert(is_weak_global_tagged(handle), \"precondition\");\n+  char* ptr = reinterpret_cast<char*>(handle) - TypeTag::weak_global;\n@@ -74,2 +75,2 @@\n-  if (is_jweak_tagged(handle)) {       \/\/ Unlikely\n-    result = NativeAccess<ON_PHANTOM_OOP_REF|decorators>::oop_load(jweak_ptr(handle));\n+  if (is_weak_global_tagged(handle)) {       \/\/ Unlikely\n+    result = NativeAccess<ON_PHANTOM_OOP_REF|decorators>::oop_load(weak_global_ptr(handle));\n@@ -82,1 +83,1 @@\n-    result = *jobject_ptr(handle);\n+    result = *local_ptr(handle);\n@@ -121,3 +122,1 @@\n-    assert(!is_jweak_tagged(handle), \"Invalid JNI local handle\");\n-    assert(!is_global_tagged(handle), \"Invalid JNI local handle\");\n-    *jobject_ptr(handle) = NULL;\n+    *local_ptr(handle) = NULL;\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.inline.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"}]}