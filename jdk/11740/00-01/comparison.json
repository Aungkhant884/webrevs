{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2473,1 +2473,1 @@\n-  STATIC_ASSERT(JNIHandles::weak_tag_mask == 0b1);\n+  STATIC_ASSERT(JNIHandles::TypeTag::weak == 0b1);\n@@ -2477,1 +2477,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::global_tag_value), tmp1, tmp2);\n+  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::TypeTag::global), tmp1, tmp2);\n@@ -2484,1 +2484,1 @@\n-                 value, Address(value, -JNIHandles::weak_tag_value), tmp1, tmp2);\n+                 value, Address(value, -JNIHandles::TypeTag::weak), tmp1, tmp2);\n@@ -2498,1 +2498,1 @@\n-    STATIC_ASSERT(JNIHandles::global_tag_value == 0b10);\n+    STATIC_ASSERT(JNIHandles::TypeTag::global == 0b10);\n@@ -2507,1 +2507,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::global_tag_value), tmp1, tmp2);\n+  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::TypeTag::global), tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/jniFastGetField_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1299,1 +1299,1 @@\n-  tst(value, JNIHandles::weak_tag_mask); \/\/ Test for weak tag.\n+  tst(value, JNIHandles::TypeTag::weak); \/\/ Test for weak tag.\n@@ -1303,1 +1303,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::global_tag_value), value, tmp1, tmp2, noreg);\n+  access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::TypeTag::global), value, tmp1, tmp2, noreg);\n@@ -1310,1 +1310,1 @@\n-                 Address(value, -JNIHandles::weak_tag_value), value, tmp1, tmp2, noreg);\n+                 Address(value, -JNIHandles::TypeTag::weak), value, tmp1, tmp2, noreg);\n@@ -1327,1 +1327,1 @@\n-    tst(value, JNIHandles::global_tag_value); \/\/ Test for global tag.\n+    tst(value, JNIHandles::TypeTag::global); \/\/ Test for global tag.\n@@ -1335,1 +1335,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::global_tag_value), value, tmp1, tmp2, noreg);\n+  access_load_at(T_OBJECT, IN_NATIVE, Address(value, -JNIHandles::TypeTag::global), value, tmp1, tmp2, noreg);\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -381,1 +381,1 @@\n-  __ andi_(tmp2, value, JNIHandles::weak_tag_mask);\n+  __ andi_(tmp2, value, JNIHandles::TypeTag::weak);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-  __ andi_(tmp1, value, JNIHandles::weak_tag_mask);\n+  __ andi_(tmp1, value, JNIHandles::TypeTag::weak);\n@@ -159,1 +159,1 @@\n-    __ andi_(tmp1, value, JNIHandles::global_tag_value);\n+    __ andi_(tmp1, value, JNIHandles::TypeTag::global);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/modRefBarrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -568,1 +568,1 @@\n-  andi(t0, value, JNIHandles::weak_tag_mask);\n+  andi(t0, value, JNIHandles::TypeTag::weak);\n@@ -573,1 +573,1 @@\n-                 Address(value, -JNIHandles::global_tag_value), tmp1, tmp2);\n+                 Address(value, -JNIHandles::TypeTag::global), tmp1, tmp2);\n@@ -579,1 +579,1 @@\n-                 Address(value, -JNIHandles::weak_tag_value), tmp1, tmp2);\n+                 Address(value, -JNIHandles::TypeTag::weak), tmp1, tmp2);\n@@ -594,1 +594,1 @@\n-    andi(t0, value, JNIHandles::global_tag_value); \/\/ Test for global tag.\n+    andi(t0, value, JNIHandles::TypeTag::global); \/\/ Test for global tag.\n@@ -603,1 +603,1 @@\n-                 Address(value, -JNIHandles::global_tag_value), tmp1, tmp2);\n+                 Address(value, -JNIHandles::TypeTag::global), tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -403,1 +403,1 @@\n-  __ z_tmll(tmp1, JNIHandles::weak_tag_mask); \/\/ Test for jweak tag.\n+  __ z_tmll(tmp1, JNIHandles::TypeTag::weak); \/\/ Test for jweak tag.\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3899,1 +3899,1 @@\n-  testptr(value, JNIHandles::weak_tag_mask); \/\/ Test for weak tag.\n+  testptr(value, JNIHandles::TypeTag::weak); \/\/ Test for weak tag.\n@@ -3903,1 +3903,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::global_tag_value), tmp, thread);\n+  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::TypeTag::global), tmp, thread);\n@@ -3910,1 +3910,1 @@\n-                 value, Address(value, -JNIHandles::weak_tag_value), tmp, thread);\n+                 value, Address(value, -JNIHandles::TypeTag::weak), tmp, thread);\n@@ -3928,1 +3928,1 @@\n-    testptr(value, JNIHandles::global_tag_value); \/\/ Test for global tag.\n+    testptr(value, JNIHandles::TypeTag::global); \/\/ Test for global tag.\n@@ -3936,1 +3936,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::global_tag_value), tmp, thread);\n+  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, -JNIHandles::TypeTag::global), tmp, thread);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3125,1 +3125,1 @@\n-  Node* jobj_untagged = _gvn.transform(new AddPNode(top(), jobj, _gvn.MakeConX(-JNIHandles::global_tag_value)));\n+  Node* jobj_untagged = _gvn.transform(new AddPNode(top(), jobj, _gvn.MakeConX(-JNIHandles::TypeTag::global)));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-      char* tptr = reinterpret_cast<char*>(ptr) + global_tag_value;\n+      char* tptr = reinterpret_cast<char*>(ptr) + TypeTag::global;\n@@ -118,1 +118,1 @@\n-      char* tptr = reinterpret_cast<char*>(ptr) + weak_tag_value;\n+      char* tptr = reinterpret_cast<char*>(ptr) + TypeTag::weak;\n@@ -250,1 +250,2 @@\n-  return is_global_tagged(handle) && !is_jweak_tagged(handle) && is_storage_handle(global_handles(), global_ptr(handle));\n+  assert(!is_global_tagged(handle) || is_storage_handle(global_handles(), global_ptr(handle)), \"invalid storage\");\n+  return is_global_tagged(handle);\n@@ -256,1 +257,2 @@\n-  return is_jweak_tagged(handle) && !is_global_tagged(handle) && is_storage_handle(weak_global_handles(), jweak_ptr(handle));\n+  assert(!is_jweak_tagged(handle) || is_storage_handle(weak_global_handles(), jweak_ptr(handle)), \"invalid storage\");\n+  return is_jweak_tagged(handle);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+  inline static bool is_local_tagged(jobject handle);\n@@ -64,11 +65,12 @@\n-  \/\/ Low tag bit in jobject used to distinguish a jweak.  jweak is\n-  \/\/ type equivalent to jobject, but there are places where we need to\n-  \/\/ be able to distinguish jweak values from other jobjects, and\n-  \/\/ is_weak_global_handle is unsuitable for performance reasons.  To\n-  \/\/ provide such a test we add weak_tag_value to the (aligned) byte\n-  \/\/ address designated by the jobject to produce the corresponding\n-  \/\/ jweak.  Accessing the value of a jobject must account for it\n-  \/\/ being a possibly offset jweak.\n-  static const uintptr_t weak_tag_size = 1;\n-  static const uintptr_t weak_tag_alignment = (1u << weak_tag_size);\n-  static const uintptr_t weak_tag_mask = weak_tag_alignment - 1;\n+  \/\/ Low tag bits in jobject used to distinguish its type. Checking\n+  \/\/ the underlying storage type is unsuitable for performance reasons.\n+  enum TypeTag {\n+    local = 0b00,\n+    weak = 0b01,\n+    global = 0b10,\n+  };\n+\n+private:\n+  inline static bool is_tagged_with(jobject handle, TypeTag tag);\n+\n+public:\n@@ -76,8 +78,5 @@\n-  static const uintptr_t tag_alignment = (1u << tag_size);\n-  static const uintptr_t tag_mask = tag_alignment - 1;\n-  static const int weak_tag_value = 1;\n-  \/\/ Low tag bit in jobject used to distinguish a global jobject.\n-  \/\/ There are places where we need to be able to distinguish global\n-  \/\/ values from other jobjects, and is_global_handle is unsuitable\n-  \/\/ for performance reasons.\n-  static const int global_tag_value = 2;\n+  static const uintptr_t tag_mask = ((1u << tag_size) - 1u);\n+\n+  STATIC_ASSERT((TypeTag::local & tag_mask) == TypeTag::local);\n+  STATIC_ASSERT((TypeTag::weak & tag_mask) == TypeTag::weak);\n+  STATIC_ASSERT((TypeTag::global & tag_mask) == TypeTag::global);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.hpp","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,8 @@\n+inline bool JNIHandles::is_tagged_with(jobject handle, TypeTag tag) {\n+  return (reinterpret_cast<uintptr_t>(handle) & tag_mask) == tag;\n+}\n+\n+inline bool JNIHandles::is_local_tagged(jobject handle) {\n+  return is_tagged_with(handle, TypeTag::local);\n+}\n+\n@@ -36,3 +44,1 @@\n-  STATIC_ASSERT(weak_tag_size == 1);\n-  STATIC_ASSERT(weak_tag_value == 1);\n-  return (reinterpret_cast<uintptr_t>(handle) & weak_tag_mask) != 0;\n+  return is_tagged_with(handle, TypeTag::weak);\n@@ -42,1 +48,1 @@\n-  return (reinterpret_cast<uintptr_t>(handle) & global_tag_value) == global_tag_value;\n+  return is_tagged_with(handle, TypeTag::global);\n@@ -46,2 +52,1 @@\n-  assert(!is_jweak_tagged(handle), \"precondition\");\n-  assert(!is_global_tagged(handle), \"precondition\");\n+  assert(is_local_tagged(handle), \"precondition\");\n@@ -53,2 +58,1 @@\n-  assert(!is_jweak_tagged(handle), \"precondition\");\n-  char* ptr = reinterpret_cast<char*>(handle) - global_tag_value;\n+  char* ptr = reinterpret_cast<char*>(handle) - TypeTag::global;\n@@ -60,2 +64,1 @@\n-  assert(!is_global_tagged(handle), \"precondition\");\n-  char* ptr = reinterpret_cast<char*>(handle) - weak_tag_value;\n+  char* ptr = reinterpret_cast<char*>(handle) - TypeTag::weak;\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.inline.hpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FastGetField\/FastGetField.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/FastGetField\/libFastGetField.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}