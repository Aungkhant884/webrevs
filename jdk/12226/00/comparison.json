{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-    _scavenge_closure->set_scanned_cld(NULL);\n+    _scavenge_closure->set_scanned_cld(nullptr);\n@@ -184,1 +184,1 @@\n-  _old_gen = NULL;\n+  _old_gen = nullptr;\n@@ -274,1 +274,1 @@\n-  from()->set_next_compaction_space(NULL);\n+  from()->set_next_compaction_space(nullptr);\n@@ -285,1 +285,1 @@\n-  from()->set_next_compaction_space(NULL);\n+  from()->set_next_compaction_space(nullptr);\n@@ -485,1 +485,1 @@\n-  HeapWord* result = NULL;\n+  HeapWord* result = nullptr;\n@@ -498,1 +498,1 @@\n-                        result == NULL ? \"NULL\" : \"object\");\n+                        result == nullptr ? \"null\" : \"object\");\n@@ -549,1 +549,1 @@\n-  GCTraceTime(Trace, gc, phases) tm(\"DefNew\", NULL, heap->gc_cause());\n+  GCTraceTime(Trace, gc, phases) tm(\"DefNew\", nullptr, heap->gc_cause());\n@@ -667,1 +667,1 @@\n-  from()->set_next_compaction_space(NULL);\n+  from()->set_next_compaction_space(nullptr);\n@@ -690,1 +690,1 @@\n-  _preserved_marks_set.restore(NULL);\n+  _preserved_marks_set.restore(nullptr);\n@@ -719,1 +719,1 @@\n-  oop obj = NULL;\n+  oop obj = nullptr;\n@@ -728,1 +728,1 @@\n-  if (obj == NULL) {\n+  if (obj == nullptr) {\n@@ -730,1 +730,1 @@\n-    if (obj == NULL) {\n+    if (obj == nullptr) {\n@@ -819,1 +819,1 @@\n-  if (_old_gen == NULL) {\n+  if (_old_gen == nullptr) {\n@@ -929,1 +929,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,2 @@\n-  assert(ref_processor() == NULL, \"no stomping\");\n-  assert(rp != NULL, \"should be non-NULL\");\n+  assert(ref_processor() == nullptr, \"no stomping\");\n+  assert(rp != nullptr, \"should be non-null\");\n@@ -137,1 +137,1 @@\n-  set_ref_processor(NULL);\n+  set_ref_processor(nullptr);\n@@ -156,1 +156,1 @@\n-  if (scratch != NULL) {\n+  if (scratch != nullptr) {\n@@ -188,1 +188,1 @@\n-    CLDClosure* weak_cld_closure = ClassUnloading ? NULL : &follow_cld_closure;\n+    CLDClosure* weak_cld_closure = ClassUnloading ? nullptr : &follow_cld_closure;\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,4 +55,4 @@\n-PreservedMark*          MarkSweep::_preserved_marks = NULL;\n-ReferenceProcessor*     MarkSweep::_ref_processor   = NULL;\n-STWGCTimer*             MarkSweep::_gc_timer        = NULL;\n-SerialOldTracer*        MarkSweep::_gc_tracer       = NULL;\n+PreservedMark*          MarkSweep::_preserved_marks = nullptr;\n+ReferenceProcessor*     MarkSweep::_ref_processor   = nullptr;\n+STWGCTimer*             MarkSweep::_gc_timer        = nullptr;\n+SerialOldTracer*        MarkSweep::_gc_tracer       = nullptr;\n@@ -60,1 +60,1 @@\n-StringDedup::Requests*  MarkSweep::_string_dedup_requests = NULL;\n+StringDedup::Requests*  MarkSweep::_string_dedup_requests = nullptr;\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  _reserved(reserved), _end(NULL)\n+  _reserved(reserved), _end(nullptr)\n@@ -235,1 +235,1 @@\n-  assert(blk_start != NULL && blk_end > blk_start,\n+  assert(blk_start != nullptr && blk_end > blk_start,\n@@ -302,1 +302,1 @@\n-  \/\/ Use for debugging.  Initialize to NULL to distinguish the\n+  \/\/ Use for debugging.  Initialize to null to distinguish the\n@@ -304,3 +304,3 @@\n-  HeapWord* last_p = NULL;\n-  HeapWord* last_start = NULL;\n-  oop last_o = NULL;\n+  HeapWord* last_p = nullptr;\n+  HeapWord* last_start = nullptr;\n+  oop last_o = nullptr;\n@@ -390,1 +390,1 @@\n-  assert(blk_start != NULL && blk_end > blk_start,\n+  assert(blk_start != nullptr && blk_end > blk_start,\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,1 +339,1 @@\n-    assert(_array != NULL, \"_array should be non-NULL\");\n+    assert(_array != nullptr, \"_array should be non-null\");\n@@ -369,1 +369,1 @@\n-    _next_offset_threshold = NULL;\n+    _next_offset_threshold = nullptr;\n@@ -387,1 +387,1 @@\n-  \/\/ blk_end are NULL because NULL is represented as 0, and thus\n+  \/\/ blk_end are null because null is represented as 0, and thus\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n-    _eden_pool(NULL),\n-    _survivor_pool(NULL),\n-    _old_pool(NULL) {\n+    _eden_pool(nullptr),\n+    _survivor_pool(nullptr),\n+    _old_pool(nullptr) {\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}