{"files":[{"patch":"@@ -183,0 +183,19 @@\n+      } else if (k->is_instance_klass()) {\n+        \/\/ Need special handling for hidden classes because the JVM\n+        \/\/ appends \"+<hex-address>\" to hidden class names.\n+        InstanceKlass *ik = InstanceKlass::cast(k);\n+        if (ik->is_hidden()) {\n+          ResourceMark rm;\n+          char* k_name = ksym->as_C_string();\n+          \/\/ Find the first '+' char and truncate the string at that point.\n+          \/\/ NOTE: This will not work correctly if the original hidden class\n+          \/\/ name contains a '+'.\n+          char* plus_char = strchr(k_name, '+');\n+          if (plus_char != NULL) {\n+            *plus_char = 0;\n+            char* c_name = _name->as_C_string();\n+            if (strcmp(c_name, k_name) == 0) {\n+              _count++;\n+            }\n+          }\n+        }\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266496\n+ * @summary Test that Whitebox.isClassAlive() works with hidden classes.\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestHiddenClassIsAlive\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.MethodType;\n+\n+import sun.hotspot.WhiteBox;\n+\n+final class MyClass {\n+    MyClass() {}\n+    public Object get(int i) { return null; }\n+}\n+\n+public class TestHiddenClassIsAlive {\n+\n+\n+    public static void main(String[] args) throws Throwable {\n+        byte[] classBytes = readClassFile(\"MyClass.class\");\n+        Lookup lookup = MethodHandles.lookup();\n+        Class<?> c = lookup.defineHiddenClass(classBytes, true).lookupClass();\n+        if (!WhiteBox.getWhiteBox().isClassAlive(\"MyClass\")) {\n+            throw new RuntimeException(\"Hidden class should be alive\");\n+        }\n+    }\n+\n+    static byte[] readClassFile(String classFileName) throws Exception {\n+        File classFile = new File(System.getProperty(\"test.classes\") + File.separator + classFileName);\n+        try (FileInputStream in = new FileInputStream(classFile);\n+             ByteArrayOutputStream out = new ByteArrayOutputStream())\n+        {\n+            int b;\n+            while ((b = in.read()) != -1) {\n+                out.write(b);\n+            }\n+            return out.toByteArray();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/whitebox\/TestHiddenClassIsAlive.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}