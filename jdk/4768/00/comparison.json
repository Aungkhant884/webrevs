{"files":[{"patch":"@@ -2925,0 +2925,30 @@\n+class G1YoungGCVerifierMark : public StackObj {\n+  G1HeapVerifier::G1VerifyType _type;\n+\n+  static G1HeapVerifier::G1VerifyType young_collection_verify_type() {\n+    G1CollectorState* state = G1CollectedHeap::heap()->collector_state();\n+    if (state->in_concurrent_start_gc()) {\n+      return G1HeapVerifier::G1VerifyConcurrentStart;\n+    } else if (state->in_young_only_phase()) {\n+      return G1HeapVerifier::G1VerifyYoungNormal;\n+    } else {\n+      return G1HeapVerifier::G1VerifyMixed;\n+    }\n+  }\n+\n+public:\n+  G1YoungGCVerifierMark() : _type(young_collection_verify_type()) {\n+    G1CollectedHeap::heap()->verify_before_young_collection(_type);\n+  }\n+\n+  ~G1YoungGCVerifierMark() {\n+    G1CollectedHeap::heap()->verify_after_young_collection(_type);\n+  }\n+};\n+\n+class G1YoungGCNotifyPauseMark : public StackObj {\n+public:\n+  G1YoungGCNotifyPauseMark() { G1CollectedHeap::heap()->policy()->note_young_gc_pause_start(); }\n+  ~G1YoungGCNotifyPauseMark() { G1CollectedHeap::heap()->policy()->note_young_gc_pause_end(); }\n+};\n+\n@@ -3056,2 +3086,2 @@\n-    \/\/ Young GC internal timing\n-    policy()->note_gc_start();\n+    \/\/ Young GC internal pause timing\n+    G1YoungGCNotifyPauseMark npm;\n@@ -3072,2 +3102,1 @@\n-    G1HeapVerifier::G1VerifyType verify_type = young_collection_verify_type();\n-    verify_before_young_collection(verify_type);\n+    G1YoungGCVerifierMark vm;\n@@ -3077,4 +3106,4 @@\n-      \/\/ The elapsed time induced by the start time below deliberately elides\n-      \/\/ the possible verification above.\n-      double sample_start_time_sec = os::elapsedTime();\n-      policy()->record_collection_pause_start(sample_start_time_sec);\n+      \/\/ Young GC internal collection timing. The elapsed time recorded in the\n+      \/\/ policy for the collection deliberately elides verification (and some\n+      \/\/ other trivial setup above).\n+      policy()->record_young_collection_start();\n@@ -3109,3 +3138,1 @@\n-      double sample_end_time_sec = os::elapsedTime();\n-      double pause_time_ms = (sample_end_time_sec - sample_start_time_sec) * MILLIUNITS;\n-      policy()->record_collection_pause_end(pause_time_ms, concurrent_operation_is_full_mark);\n+      policy()->record_young_collection_end(concurrent_operation_is_full_mark);\n@@ -3113,4 +3140,0 @@\n-    verify_after_young_collection(verify_type);\n-\n-    policy()->print_phases();\n-\n@@ -3806,1 +3829,1 @@\n-  const double gc_start_time_ms = phase_times()->cur_collection_start_sec() * 1000.0;\n+  const double collection_start_time_ms = phase_times()->cur_collection_start_sec() * 1000.0;\n@@ -3810,1 +3833,1 @@\n-    double time_used_ms = os::elapsedTime() * 1000.0 - gc_start_time_ms;\n+    double time_used_ms = os::elapsedTime() * 1000.0 - collection_start_time_ms;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+  friend class G1YoungGCVerifierMark;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-void G1GCPhaseTimes::note_gc_start() {\n+void G1GCPhaseTimes::record_gc_pause_start() {\n@@ -214,1 +214,1 @@\n-void G1GCPhaseTimes::note_gc_end() {\n+void G1GCPhaseTimes::record_gc_pause_end() {\n@@ -250,0 +250,1 @@\n+  print();\n@@ -522,2 +523,0 @@\n-  note_gc_end();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -209,1 +209,0 @@\n-  void note_gc_end();\n@@ -237,1 +236,2 @@\n-  void note_gc_start();\n+  void record_gc_pause_start();\n+  void record_gc_pause_end();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,2 +116,2 @@\n-void G1Policy::note_gc_start() {\n-  phase_times()->note_gc_start();\n+void G1Policy::note_young_gc_pause_start() {\n+  phase_times()->record_gc_pause_start();\n@@ -520,1 +520,2 @@\n-void G1Policy::record_collection_pause_start(double start_time_sec) {\n+void G1Policy::record_young_collection_start() {\n+  Ticks now = Ticks::now();\n@@ -531,1 +532,1 @@\n-  phase_times()->record_cur_collection_start_sec(start_time_sec);\n+  phase_times()->record_cur_collection_start_sec(now.seconds());\n@@ -631,1 +632,1 @@\n-void G1Policy::record_collection_pause_end(double pause_time_ms, bool concurrent_operation_is_full_mark) {\n+void G1Policy::record_young_collection_end(bool concurrent_operation_is_full_mark) {\n@@ -634,2 +635,3 @@\n-  double end_time_sec = os::elapsedTime();\n-  double start_time_sec = phase_times()->cur_collection_start_sec();\n+  double start_time_s = phase_times()->cur_collection_start_sec();\n+  double end_time_s = Ticks::now().seconds();\n+  double pause_time_ms = (end_time_s - start_time_s) * 1000.0;\n@@ -647,1 +649,1 @@\n-  double app_time_ms = (start_time_sec * 1000.0 - _analytics->prev_collection_pause_end_ms());\n+  double app_time_ms = (start_time_s * 1000.0 - _analytics->prev_collection_pause_end_ms());\n@@ -669,1 +671,1 @@\n-  record_pause(this_pause, start_time_sec, end_time_sec);\n+  record_pause(this_pause, start_time_s, end_time_s);\n@@ -892,1 +894,2 @@\n-void G1Policy::print_phases() {\n+void G1Policy::note_young_gc_pause_end() {\n+  phase_times()->record_gc_pause_end();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -304,1 +304,2 @@\n-  void note_gc_start();\n+  void note_young_gc_pause_start();\n+  void note_young_gc_pause_end();\n@@ -313,2 +314,2 @@\n-  void record_collection_pause_start(double start_time_sec);\n-  void record_collection_pause_end(double pause_time_ms, bool concurrent_operation_is_full_mark);\n+  void record_young_collection_start();\n+  void record_young_collection_end(bool concurrent_operation_is_full_mark);\n@@ -331,2 +332,0 @@\n-  void print_phases();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}