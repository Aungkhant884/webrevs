{"files":[{"patch":"@@ -233,1 +233,0 @@\n-    Deoptimization::print_statistics();\n@@ -242,1 +241,0 @@\n-#ifndef COMPILER1\n@@ -244,0 +242,1 @@\n+#ifndef COMPILER1\n@@ -355,0 +354,8 @@\n+#ifdef COMPILER2_OR_JVMCI\n+  if ((LogVMOutput || LogCompilation) && UseCompiler) {\n+    \/\/ Only print the statistics to the log file\n+    FlagSetting fs(DisplayVMOutput, false);\n+    Deoptimization::print_statistics();\n+  }\n+#endif \/* COMPILER2 || INCLUDE_JVMCI *\/\n+\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8275865\n+ * @requires vm.compiler2.enabled\n+ * @summary Verify that the Deoptimization statistics are printed to the VM\/Compiler log file\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xbatch -XX:-UseOnStackReplacement -XX:-OmitStackTraceInFastThrow\n+ *                   -XX:-OmitStackTraceInFastThrow\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation\n+ *                   -XX:-LogVMOutput -XX:LogFile=compilation.log DeoptStats\n+ * @run main\/othervm -Xbatch -XX:-UseOnStackReplacement -XX:-OmitStackTraceInFastThrow\n+ *                   -XX:-OmitStackTraceInFastThrow\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation\n+ *                   -XX:+LogVMOutput -XX:LogFile=vmOutput.log DeoptStats\n+ * @run main\/othervm DeoptStats compilation.log vmOutput.log\n+ *\/\n+\n+import java.nio.file.Paths;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DeoptStats {\n+\n+    static class Value {\n+        int i;\n+    }\n+\n+    static int f(Value v) {\n+        return v.i;\n+    }\n+\n+    public static void verify(String[] logFiles) throws Exception {\n+        for (String logFile : logFiles) {\n+            OutputAnalyzer oa = new OutputAnalyzer(Paths.get(logFile));\n+            oa.shouldMatchByLine(\"<statistics type='deoptimization'>\", \/\/ Start from this line\n+                                 \"<\/statistics>\",                      \/\/ Match until this line\n+                                 \"(Deoptimization traps recorded:)|( .+)\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            verify(args);\n+        } else {\n+            for (int i = 0; i < 20_000; i++) {\n+                try {\n+                    f(null);\n+                }\n+                catch (NullPointerException npe) { }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/DeoptStats.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}