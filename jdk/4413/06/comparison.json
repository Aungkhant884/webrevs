{"files":[{"patch":"@@ -0,0 +1,584 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8076190 8242151 8153005 8266182\n+ * @summary This is java keytool <-> openssl interop test. This test generates\n+ *          some openssl keystores on the fly, java operates on it and\n+ *          vice versa.\n+ *\n+ *          Note: This test executes some openssl command, so need to set\n+ *          openssl path using system property \"test.openssl.path\" or it should\n+ *          be available in \/usr\/bin or \/usr\/local\/bin\n+ *          Required OpenSSL version : OpenSSL 1.1.*\n+ *\n+ * @modules java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @library \/sun\/security\/pkcs11\/\n+ * @run main\/othervm\/timeout=600 KeytoolOpensslInteropTest\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.artifacts.OpensslArtifactFetcher;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+import java.util.Objects;\n+\n+import static jdk.test.lib.security.DerUtils.*;\n+import static sun.security.util.KnownOIDs.*;\n+import static sun.security.pkcs.ContentInfo.*;\n+\n+public class KeytoolOpensslInteropTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+        String opensslPath = OpensslArtifactFetcher.getOpenssl1dot1dotStar();\n+        if (opensslPath != null) {\n+            \/\/ if preferred version of openssl is available perform all\n+            \/\/ keytool <-> openssl interop tests\n+            generateInitialKeystores(opensslPath);\n+            testWithJavaCommands();\n+            testWithOpensslCommands(opensslPath);\n+        } else {\n+            \/\/ since preferred version of openssl is not available skip all\n+            \/\/ openssl command dependent tests with a warning\n+            System.out.println(\"\\n\\u001B[31mWarning: Can't find openssl \"\n+                    + \"(version 1.1.*) binary on this machine, please install\"\n+                    + \" and set openssl path with property \"\n+                    + \"'test.openssl.path'. Now running only half portion of \"\n+                    + \"the test, skipping all tests which depends on openssl \"\n+                    + \"commands.\\u001B[0m\\n\");\n+            \/\/ De-BASE64 textual files in .\/params to `pwd`\n+            try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n+                    Path.of(System.getProperty(\"test.src\"), \"params\"),\n+                    p -> !p.getFileName().toString().equals(\"README\"))) {\n+                stream.forEach(p -> {\n+                    try (InputStream is = Files.newInputStream(p);\n+                        OutputStream os = Files.newOutputStream(\n+                                p.getFileName())) {\n+                        Base64.getMimeDecoder().wrap(is).transferTo(os);\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                });\n+            }\n+            testWithJavaCommands();\n+        }\n+    }\n+\n+    private static void generateInitialKeystores(String opensslPath)\n+            throws Throwable {\n+        keytool(\"-keystore ks -keyalg ec -genkeypair -storepass\"\n+                + \" changeit -alias a -dname CN=A\").shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\", \"ks\",\n+                \"-nodes\", \"-out\", \"kandc\", \"-passin\", \"pass:changeit\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os2\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\", \"-nomac\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os3\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os4\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"PBE-SHA1-RC4-128\", \"-keypbe\",\n+                \"PBE-SHA1-RC4-128\", \"-macalg\", \"SHA224\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os5\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"AES-256-CBC\", \"-keypbe\",\n+                \"AES-256-CBC\", \"-macalg\", \"SHA512\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithJavaCommands() throws Throwable {\n+        byte[] data;\n+\n+        \/\/ openssl -> keytool interop check\n+        \/\/ os2. no cert pbe, no mac.\n+        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ You can even load it with a wrong storepass, controversial\n+        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ os3. no cert pbe, has mac. just like JKS\n+        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ Cannot load with a wrong storepass, same as JKS\n+        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ os4. non default algs\n+        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ os5. strong non default algs\n+        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ keytool\n+\n+        \/\/ Current default pkcs12 setting\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnormal -deststorepass changeit\");\n+\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ Import it into a new keystore with legacy algorithms\n+        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n+                + \"-destkeystore kslegacyimp -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.legacy\");\n+        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n+        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n+        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+\n+        \/\/ Add a new entry with password-less settings, still has a storepass\n+        keytool(\"-keystore ksnormal -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=b \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n+\n+        \/\/ Different keypbe alg, no cert pbe and no mac\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnopass -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ Add a new entry with normal settings, still password-less\n+        keytool(\"-keystore ksnopass -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n+\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnewic -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ keypbe alg cannot be NONE\n+        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n+                .shouldContain(\"NONE AlgorithmParameters not available\")\n+                .shouldHaveExitValue(1);\n+\n+        \/\/ new entry new keypbe alg (and default ic), else unchanged\n+        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check KeyStore loading multiple keystores\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n+                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check keytool behavior\n+\n+        \/\/ ksnormal has password\n+\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate chain length: 0\");\n+\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ ksnopass is password-less\n+\n+        keytool(\"-list -keystore ksnopass\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ -certreq prompts for keypass\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-certreq -alias a -keystore ksnopass\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -storepass works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -keypass also works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -importkeystore prompts for srckeypass\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass \"\n+                + \"-destkeystore jks3 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ ksnopass2 is ksnopass + 2 cert entries\n+\n+        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n+        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n+        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n+        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore prompts for srckeypass for private keys\n+        \/\/ and no prompt for certs\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n+                + \"-destkeystore jks5 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"4 entries successfully imported\");\n+\n+        \/\/ ksonlycert has only cert entries\n+\n+        ks.deleteEntry(\"a\");\n+        ks.deleteEntry(\"b\");\n+        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore does not prompt at all\n+        keytool(\"-importkeystore -srckeystore ksonlycert \"\n+                + \"-destkeystore jks6 -deststorepass changeit\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ create a new password-less keystore\n+        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n+\n+        \/\/ Normally storepass is prompted for\n+        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        \/\/ ... but not if it's password-less\n+        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\");\n+\n+        \/\/ still prompt for keypass for genkeypair and certreq\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-keystore ksnopassnew -genkeypair -keyalg DSA \"\n+                + \"-alias a -dname CN=A \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldNotContain(\"Enter key password for <a>\");\n+\n+        \/\/ params only read on demand\n+\n+        \/\/ keyPbeIterationCount is used by -genkeypair\n+        keytool(\"-keystore ksgenbadkeyic -genkeypair -keyalg DSA \"\n+                + \"-alias a -dname CN=A \"\n+                + \"-storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n+                .shouldHaveExitValue(1);\n+\n+        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n+\n+        \/\/ but not used by -importcert\n+        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n+                + \"-noprompt -storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ None is used by -list\n+        keytool(\"-keystore ksnormal -storepass changeit -list \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithOpensslCommands(String opensslPath)\n+            throws Throwable {\n+\n+        OutputAnalyzer output1 = ProcessTools.executeCommand(opensslPath,\n+                \"pkcs12\", \"-in\", \"ksnormal\", \"-passin\", \"pass:changeit\",\n+                \"-info\", \"-nokeys\", \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha256, Iteration 10000\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\");\n+\n+        OutputAnalyzer output2 = ProcessTools.executeCommand(opensslPath,\n+                \"pkcs12\", \"-in\", \"ksnormaldup\", \"-passin\", \"pass:changeit\",\n+                \"-info\", \"-nokeys\", \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnormal & ksnormaldup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldNotHaveExitValue(0);\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldNotContain(\"PKCS7 Encrypted data:\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopassdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnopass & ksnopassdup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewic\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha256, Iteration 5555\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 7777, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 6666, PRF hmacWithSHA256\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewicdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnewic & ksnewicdup show different info\");\n+        }\n+    }\n+\n+    \/**\n+     * Check keystore loading and key\/cert reading.\n+     *\n+     * @param keystore the file name of keystore\n+     * @param alias the key\/cert to read\n+     * @param storePass store pass to try out, can be null\n+     * @param keypass key pass to try, can not be null\n+     * @param expectedLoad expected result of keystore loading, true if non\n+     *                     null, false if null, exception class if exception\n+     * @param expectedCert expected result of cert reading\n+     * @param expectedKey expected result of key reading\n+     *\/\n+    private static void check(\n+            String keystore,\n+            String alias,\n+            String storePass,\n+            String keypass,\n+            Object expectedLoad,\n+            Object expectedCert,\n+            Object expectedKey) {\n+        KeyStore ks = null;\n+        Object actualLoad, actualCert, actualKey;\n+        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n+        try {\n+            ks = KeyStore.getInstance(new File(keystore),\n+                    storePass == null ? null : storePass.toCharArray());\n+            actualLoad = ks != null;\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualLoad = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n+\n+        \/\/ If not loaded correctly, skip cert\/key reading\n+        if (!Objects.equals(actualLoad, true)) {\n+            return;\n+        }\n+\n+        try {\n+            actualCert = (ks.getCertificate(alias) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualCert = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n+\n+        try {\n+            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualKey = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n+    }\n+\n+    private static OutputAnalyzer keytool(String s) throws Throwable {\n+        return SecurityTools.keytool(s);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":584,"deletions":0,"binary":false,"changes":584,"status":"added"},{"patch":"@@ -1,453 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8076190 8242151 8153005\n- * @library \/test\/lib\n- * @modules java.base\/sun.security.pkcs\n- *          java.base\/sun.security.util\n- * @summary Customizing the generation of a PKCS12 keystore\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.SecurityTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.KeyStore;\n-import java.util.Base64;\n-import java.util.Objects;\n-\n-import static jdk.test.lib.security.DerUtils.*;\n-import static sun.security.util.KnownOIDs.*;\n-import static sun.security.pkcs.ContentInfo.*;\n-\n-public class ParamsTest  {\n-\n-    public static void main(String[] args) throws Throwable {\n-\n-        \/\/ De-BASE64 textual files in .\/params to `pwd`\n-        try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n-                Path.of(System.getProperty(\"test.src\"), \"params\"),\n-                p -> !p.getFileName().toString().equals(\"README\"))) {\n-            stream.forEach(p -> {\n-                try (InputStream is = Files.newInputStream(p);\n-                     OutputStream os = Files.newOutputStream(p.getFileName())) {\n-                    Base64.getMimeDecoder().wrap(is).transferTo(os);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            });\n-        }\n-\n-        byte[] data;\n-\n-        \/\/ openssl -> keytool interop check\n-\n-        \/\/ os2. no cert pbe, no mac.\n-        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ You can even load it with a wrong storepass, controversial\n-        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ os3. no cert pbe, has mac. just like JKS\n-        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ Cannot load with a wrong storepass, same as JKS\n-        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ os4. non default algs\n-        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ os5. strong non default algs\n-        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ keytool\n-\n-        \/\/ Current default pkcs12 setting\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnormal -deststorepass changeit\");\n-\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ Import it into a new keystore with legacy algorithms\n-        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n-                + \"-destkeystore kslegacyimp -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.legacy\");\n-        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n-\n-        \/\/ Add a new entry with password-less settings, still has a storepass\n-        keytool(\"-keystore ksnormal -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=b \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n-\n-        \/\/ Different keypbe alg, no cert pbe and no mac\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnopass -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ Add a new entry with normal settings, still password-less\n-        keytool(\"-keystore ksnopass -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n-\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnewic -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ keypbe alg cannot be NONE\n-        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n-                .shouldContain(\"NONE AlgorithmParameters not available\")\n-                .shouldHaveExitValue(1);\n-\n-        \/\/ new entry new keypbe alg (and default ic), else unchanged\n-        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check KeyStore loading multiple keystores\n-        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n-        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n-                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check keytool behavior\n-\n-        \/\/ ksnormal has password\n-\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate chain length: 0\");\n-\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ ksnopass is password-less\n-\n-        keytool(\"-list -keystore ksnopass\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ -certreq prompts for keypass\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-certreq -alias a -keystore ksnopass\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -storepass works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -keypass also works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -importkeystore prompts for srckeypass\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass \"\n-                + \"-destkeystore jks3 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ ksnopass2 is ksnopass + 2 cert entries\n-\n-        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n-        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n-        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n-        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore prompts for srckeypass for private keys\n-        \/\/ and no prompt for certs\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n-                + \"-destkeystore jks5 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"4 entries successfully imported\");\n-\n-        \/\/ ksonlycert has only cert entries\n-\n-        ks.deleteEntry(\"a\");\n-        ks.deleteEntry(\"b\");\n-        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore does not prompt at all\n-        keytool(\"-importkeystore -srckeystore ksonlycert \"\n-                + \"-destkeystore jks6 -deststorepass changeit\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ create a new password-less keystore\n-        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n-\n-        \/\/ Normally storepass is prompted for\n-        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        \/\/ ... but not if it's password-less\n-        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\");\n-\n-        \/\/ still prompt for keypass for genkeypair and certreq\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-keystore ksnopassnew -genkeypair -keyalg DSA \"\n-                + \"-alias a -dname CN=A \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldNotContain(\"Enter key password for <a>\");\n-\n-        \/\/ params only read on demand\n-\n-        \/\/ keyPbeIterationCount is used by -genkeypair\n-        keytool(\"-keystore ksgenbadkeyic -genkeypair -keyalg DSA \"\n-                + \"-alias a -dname CN=A \"\n-                + \"-storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n-                .shouldHaveExitValue(1);\n-\n-        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n-\n-        \/\/ but not used by -importcert\n-        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n-                + \"-noprompt -storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ None is used by -list\n-        keytool(\"-keystore ksnormal -storepass changeit -list \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-    }\n-\n-    \/**\n-     * Check keystore loading and key\/cert reading.\n-     *\n-     * @param keystore the file name of keystore\n-     * @param alias the key\/cert to read\n-     * @param storePass store pass to try out, can be null\n-     * @param keypass key pass to try, can not be null\n-     * @param expectedLoad expected result of keystore loading, true if non\n-     *                     null, false if null, exception class if exception\n-     * @param expectedCert expected result of cert reading\n-     * @param expectedKey expected result of key reading\n-     *\/\n-    private static void check(\n-            String keystore,\n-            String alias,\n-            String storePass,\n-            String keypass,\n-            Object expectedLoad,\n-            Object expectedCert,\n-            Object expectedKey) {\n-        KeyStore ks = null;\n-        Object actualLoad, actualCert, actualKey;\n-        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n-        try {\n-            ks = KeyStore.getInstance(new File(keystore),\n-                    storePass == null ? null : storePass.toCharArray());\n-            actualLoad = ks != null;\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualLoad = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n-\n-        \/\/ If not loaded correctly, skip cert\/key reading\n-        if (!Objects.equals(actualLoad, true)) {\n-            return;\n-        }\n-\n-        try {\n-            actualCert = (ks.getCertificate(alias) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualCert = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n-\n-        try {\n-            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualKey = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n-    }\n-\n-    static OutputAnalyzer keytool(String s) throws Throwable {\n-        return SecurityTools.keytool(s);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsTest.java","additions":0,"deletions":453,"binary":false,"changes":453,"status":"deleted"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.artifacts;\n+\n+import java.io.File;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.artifacts.Artifact;\n+import jdk.test.lib.artifacts.ArtifactResolver;\n+import jdk.test.lib.artifacts.ArtifactResolverException;\n+\n+public class OpensslArtifactFetcher {\n+\n+    \/**\n+     * Gets the openssl binary path of version 1.1.*\n+     *\n+     * Openssl selection flow:\n+        1. Check whether property test.openssl.path is set and it's the\n+           preferred version(1.1.*) of openssl, then return that path.\n+        2. Else look for already installed openssl (version 1.1.*) in system\n+           path \/usr\/bin\/openssl or \/usr\/local\/bin\/openssl, then return that\n+           path.\n+        3. Else try to download openssl (version 1.1.*) from the artifactory\n+           and return that path, if download fails then return null.\n+     *\n+     * @return openssl binary path of version 1.1.*\n+     *\/\n+    public static String getOpenssl1dot1dotStar() {\n+        String version = \"1.1.\";\n+        String path = getOpensslFromSystemProp(version);\n+        if (path != null) {\n+            return path;\n+        } else {\n+            path = getDefaultSystemOpensslPath(version);\n+            if (path != null) {\n+                return path;\n+            } else if (Platform.is64bit()) {\n+                if (Platform.isLinux()) {\n+                    path = fetchOpenssl(LINUX_X64.class);\n+                } else if (Platform.isOSX()) {\n+                    path = fetchOpenssl(MACOSX_X64.class);\n+                } else if (Platform.isWindows()) {\n+                    path = fetchOpenssl(WINDOWS_X64.class);\n+                }\n+                if (verifyOpensslVersion(path, version)) {\n+                    return path;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String getOpensslFromSystemProp(String version) {\n+        String path = System.getProperty(\"test.openssl.path\");\n+        System.out.println(\"System Property - test.openssl.path: \" + path);\n+        if (!verifyOpensslVersion(path, version)) {\n+            path = null;\n+        }\n+        return path;\n+    }\n+\n+    private static String getDefaultSystemOpensslPath(String version) {\n+        if(verifyOpensslVersion(\"\/usr\/bin\/openssl\", version)) {\n+            return \"\/usr\/bin\/openssl\";\n+        } else if(verifyOpensslVersion(\"\/usr\/local\/bin\/openssl\", version)) {\n+            return \"\/usr\/local\/bin\/openssl\";\n+        }\n+        return null;\n+    }\n+\n+    private static boolean verifyOpensslVersion(String path, String version) {\n+        if (path != null) {\n+            try {\n+                ProcessTools.executeCommand(path, \"version\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(version);\n+                return true;\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static String fetchOpenssl(Class<?> clazz) {\n+        String path = null;\n+        try {\n+            path = ArtifactResolver.resolve(clazz).entrySet().stream()\n+                    .findAny().get().getValue() + File.separator + \"openssl\"\n+                    + File.separator + \"bin\" + File.separator + \"openssl\";\n+            System.out.println(\"path: \" + path);\n+        } catch (ArtifactResolverException e) {\n+            Throwable cause = e.getCause();\n+            if (cause == null) {\n+                System.out.println(\"Cannot resolve artifact, \"\n+                        + \"please check if JIB jar is present in classpath.\");\n+            } else {\n+                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n+                        + \"\\nPlease make sure the artifact is available.\", e);\n+            }\n+        }\n+        return path;\n+    }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-linux_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class LINUX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-macosx_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class MACOSX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-windows_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class WINDOWS_X64 { }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/OpensslArtifactFetcher.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}