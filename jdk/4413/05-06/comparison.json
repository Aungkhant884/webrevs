{"files":[{"patch":"@@ -47,1 +47,1 @@\n-import jdk.test.lib.artifacts.openssl.OpensslArtifactFetcher;\n+import jdk.test.lib.artifacts.OpensslArtifactFetcher;\n@@ -70,22 +70,2 @@\n-        \/\/ openssl selection flow:\n-        \/\/ 1. Check whether test.openssl.path is set and it's the the preferred\n-        \/\/    version(1.1.*) of openssl\n-        \/\/ 2. If above property doesn't set, then look for already installed\n-        \/\/    openssl (version 1.1.*) in system path \/usr\/bin\/openssl or\n-        \/\/    \/usr\/local\/bin\/openssl\n-        \/\/ 3. if above is also not available try to download openssl from\n-        \/\/    artifactory\n-        \/\/ If any of above 3 succeeds then perform all tests, otherwise skip\n-        \/\/ all openssl command dependent tests.\n-\n-        String opensslPath = System.getProperty(\"test.openssl.path\");\n-        if (opensslPath == null) {\n-            \/\/ checking the existence of already installed openssl\n-            \/\/ in the test machine\n-            opensslPath = getSystemOpensslPath();\n-        }\n-        if (opensslPath == null) {\n-            \/\/ trying to download from artifactory\n-            opensslPath = OpensslArtifactFetcher.fetchOpenssl();\n-        }\n-        if (opensslPath != null && verifyOpensslVerion(opensslPath)) {\n+        String opensslPath = OpensslArtifactFetcher.getOpenssl1dot1dotStar();\n+        if (opensslPath != null) {\n@@ -604,21 +584,0 @@\n-\n-    private static String getSystemOpensslPath() {\n-        if(verifyOpensslVerion(\"\/usr\/bin\/openssl\")) {\n-            return \"\/usr\/bin\/openssl\";\n-        } else if(verifyOpensslVerion(\"\/usr\/local\/bin\/openssl\")) {\n-            return \"\/usr\/local\/bin\/openssl\";\n-        }\n-        return null;\n-    }\n-\n-    private static boolean verifyOpensslVerion(String path) {\n-        try {\n-            ProcessTools.executeCommand(path, \"version\")\n-                    .shouldHaveExitValue(0)\n-                    .shouldMatch(\"1.1.*\");\n-            return true;\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            return false;\n-        }\n-    }\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":3,"deletions":44,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package jdk.test.lib.artifacts.openssl;\n+package jdk.test.lib.artifacts;\n@@ -29,0 +29,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -35,8 +36,34 @@\n-    public static String fetchOpenssl() {\n-        if (Platform.is64bit()) {\n-            if (Platform.isLinux()) {\n-                return fetchOpenssl(LINUX_X64.class);\n-            } else if (Platform.isOSX()) {\n-                return fetchOpenssl(MACOSX_X64.class);\n-            } else if (Platform.isWindows()) {\n-                return fetchOpenssl(WINDOWS_X64.class);\n+    \/**\n+     * Gets the openssl binary path of version 1.1.*\n+     *\n+     * Openssl selection flow:\n+        1. Check whether property test.openssl.path is set and it's the\n+           preferred version(1.1.*) of openssl, then return that path.\n+        2. Else look for already installed openssl (version 1.1.*) in system\n+           path \/usr\/bin\/openssl or \/usr\/local\/bin\/openssl, then return that\n+           path.\n+        3. Else try to download openssl (version 1.1.*) from the artifactory\n+           and return that path, if download fails then return null.\n+     *\n+     * @return openssl binary path of version 1.1.*\n+     *\/\n+    public static String getOpenssl1dot1dotStar() {\n+        String version = \"1.1.\";\n+        String path = getOpensslFromSystemProp(version);\n+        if (path != null) {\n+            return path;\n+        } else {\n+            path = getDefaultSystemOpensslPath(version);\n+            if (path != null) {\n+                return path;\n+            } else if (Platform.is64bit()) {\n+                if (Platform.isLinux()) {\n+                    path = fetchOpenssl(LINUX_X64.class);\n+                } else if (Platform.isOSX()) {\n+                    path = fetchOpenssl(MACOSX_X64.class);\n+                } else if (Platform.isWindows()) {\n+                    path = fetchOpenssl(WINDOWS_X64.class);\n+                }\n+                if (verifyOpensslVersion(path, version)) {\n+                    return path;\n+                }\n@@ -48,0 +75,32 @@\n+    private static String getOpensslFromSystemProp(String version) {\n+        String path = System.getProperty(\"test.openssl.path\");\n+        System.out.println(\"System Property - test.openssl.path: \" + path);\n+        if (!verifyOpensslVersion(path, version)) {\n+            path = null;\n+        }\n+        return path;\n+    }\n+\n+    private static String getDefaultSystemOpensslPath(String version) {\n+        if(verifyOpensslVersion(\"\/usr\/bin\/openssl\", version)) {\n+            return \"\/usr\/bin\/openssl\";\n+        } else if(verifyOpensslVersion(\"\/usr\/local\/bin\/openssl\", version)) {\n+            return \"\/usr\/local\/bin\/openssl\";\n+        }\n+        return null;\n+    }\n+\n+    private static boolean verifyOpensslVersion(String path, String version) {\n+        if (path != null) {\n+            try {\n+                ProcessTools.executeCommand(path, \"version\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(version);\n+                return true;\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/OpensslArtifactFetcher.java","additions":68,"deletions":9,"binary":false,"changes":77,"status":"modified"}]}