{"files":[{"patch":"@@ -0,0 +1,633 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8076190 8242151 8153005 8266182\n+ * @summary This is java keytool <-> openssl interop test. This test generates\n+ *          some openssl keystores, java operates on it and vice versa.\n+ *\n+ *          Note: This test executes some openssl command, so need to set\n+ *          openssl root path using system property \"test.openssl.path\".\n+ *          Install OpenSSL 1.1.* version and set this variable.\n+ *\n+ * @modules java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @library \/sun\/security\/pkcs11\/\n+ * @run main\/othervm\/timeout=600 KeytoolOpensslInteropTest\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.DirectoryStream;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+import java.util.Objects;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.artifacts.Artifact;\n+import jdk.test.lib.artifacts.ArtifactResolver;\n+import jdk.test.lib.artifacts.ArtifactResolverException;\n+\n+import static jdk.test.lib.security.DerUtils.*;\n+import static sun.security.util.KnownOIDs.*;\n+import static sun.security.pkcs.ContentInfo.*;\n+\n+public class KeytoolOpensslInteropTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+        String opensslPath = System.getProperty(\"test.openssl.path\");\n+        if (opensslPath == null) {\n+            opensslPath = fetchOpenssl();\n+        }\n+        if (opensslPath != null) {\n+            opensslPath = opensslPath + File.separator + \"bin\"\n+                + File.separator + \"openssl\";\n+            generateInitialKeystores(opensslPath);\n+            testWithJavaCommands();\n+            testWithOpensslCommands(opensslPath);\n+        } else {\n+            throw new IllegalArgumentException(\"Error: Can't find openssl \"\n+                    + \"binary on this machine, please install and set openssl \"\n+                    + \"(version 1.1.*) path with property\"\n+                    + \" 'test.openssl.path'\");\n+        }\n+    }\n+\n+    private static void generateInitialKeystores(String opensslPath)\n+            throws Throwable {\n+        OutputAnalyzer output = ProcessTools.executeCommand(\n+                opensslPath, \"version\")\n+                .shouldHaveExitValue(0);\n+\n+        keytool(\"-keystore ks -keyalg ec -genkeypair -storepass\"\n+                + \" changeit -alias a -dname CN=A\").shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\", \"ks\",\n+                \"-nodes\", \"-out\", \"kandc\", \"-passin\", \"pass:changeit\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os2\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\", \"-nomac\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os3\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os4\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"PBE-SHA1-RC4-128\", \"-keypbe\",\n+                \"PBE-SHA1-RC4-128\", \"-macalg\", \"SHA224\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os5\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"AES-256-CBC\", \"-keypbe\",\n+                \"AES-256-CBC\", \"-macalg\", \"SHA512\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithJavaCommands() throws Throwable {\n+        byte[] data;\n+\n+        \/\/ openssl -> keytool interop check\n+        \/\/ os2. no cert pbe, no mac.\n+        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ You can even load it with a wrong storepass, controversial\n+        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ os3. no cert pbe, has mac. just like JKS\n+        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ Cannot load with a wrong storepass, same as JKS\n+        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ os4. non default algs\n+        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ os5. strong non default algs\n+        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ keytool\n+\n+        \/\/ Current default pkcs12 setting\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnormal -deststorepass changeit\");\n+\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ Import it into a new keystore with legacy algorithms\n+        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n+                + \"-destkeystore kslegacyimp -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.legacy\");\n+        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n+        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n+        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+\n+        \/\/ Add a new entry with password-less settings, still has a storepass\n+        keytool(\"-keystore ksnormal -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=b \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n+\n+        \/\/ Different keypbe alg, no cert pbe and no mac\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnopass -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ Add a new entry with normal settings, still password-less\n+        keytool(\"-keystore ksnopass -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n+\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnewic -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ keypbe alg cannot be NONE\n+        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n+                .shouldContain(\"NONE AlgorithmParameters not available\")\n+                .shouldHaveExitValue(1);\n+\n+        \/\/ new entry new keypbe alg (and default ic), else unchanged\n+        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n+                + \"-storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check KeyStore loading multiple keystores\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n+                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n+        checkInt(data, \"22\", 10000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check keytool behavior\n+\n+        \/\/ ksnormal has password\n+\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate chain length: 0\");\n+\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ ksnopass is password-less\n+\n+        keytool(\"-list -keystore ksnopass\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ -certreq prompts for keypass\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-certreq -alias a -keystore ksnopass\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -storepass works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -keypass also works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -importkeystore prompts for srckeypass\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass \"\n+                + \"-destkeystore jks3 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ ksnopass2 is ksnopass + 2 cert entries\n+\n+        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n+        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n+        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n+        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore prompts for srckeypass for private keys\n+        \/\/ and no prompt for certs\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n+                + \"-destkeystore jks5 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"4 entries successfully imported\");\n+\n+        \/\/ ksonlycert has only cert entries\n+\n+        ks.deleteEntry(\"a\");\n+        ks.deleteEntry(\"b\");\n+        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore does not prompt at all\n+        keytool(\"-importkeystore -srckeystore ksonlycert \"\n+                + \"-destkeystore jks6 -deststorepass changeit\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ create a new password-less keystore\n+        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n+\n+        \/\/ Normally storepass is prompted for\n+        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        \/\/ ... but not if it's password-less\n+        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\");\n+\n+        \/\/ still prompt for keypass for genkeypair and certreq\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-keystore ksnopassnew -genkeypair -keyalg DSA \"\n+                + \"-alias a -dname CN=A \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldNotContain(\"Enter key password for <a>\");\n+\n+        \/\/ params only read on demand\n+\n+        \/\/ keyPbeIterationCount is used by -genkeypair\n+        keytool(\"-keystore ksgenbadkeyic -genkeypair -keyalg DSA \"\n+                + \"-alias a -dname CN=A \"\n+                + \"-storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n+                .shouldHaveExitValue(1);\n+\n+        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n+\n+        \/\/ but not used by -importcert\n+        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n+                + \"-noprompt -storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ None is used by -list\n+        keytool(\"-keystore ksnormal -storepass changeit -list \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithOpensslCommands(String opensslPath)\n+            throws Throwable {\n+\n+        OutputAnalyzer output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnormal\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha256, Iteration 10000\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\");\n+\n+        OutputAnalyzer output2 = ProcessTools.executeCommand(opensslPath,\n+                \"pkcs12\", \"-in\", \"ksnormaldup\", \"-passin\", \"pass:changeit\",\n+                \"-info\", \"-nokeys\", \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnormal & ksnormaldup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldNotHaveExitValue(0);\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldNotContain(\"PKCS7 Encrypted data:\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopassdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnopass & ksnopassdup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewic\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha256, Iteration 5555\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 7777, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 6666, PRF hmacWithSHA256\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewicdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnewic & ksnewicdup show different info\");\n+        }\n+    }\n+\n+    \/**\n+     * Check keystore loading and key\/cert reading.\n+     *\n+     * @param keystore the file name of keystore\n+     * @param alias the key\/cert to read\n+     * @param storePass store pass to try out, can be null\n+     * @param keypass key pass to try, can not be null\n+     * @param expectedLoad expected result of keystore loading, true if non\n+     *                     null, false if null, exception class if exception\n+     * @param expectedCert expected result of cert reading\n+     * @param expectedKey expected result of key reading\n+     *\/\n+    private static void check(\n+            String keystore,\n+            String alias,\n+            String storePass,\n+            String keypass,\n+            Object expectedLoad,\n+            Object expectedCert,\n+            Object expectedKey) {\n+        KeyStore ks = null;\n+        Object actualLoad, actualCert, actualKey;\n+        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n+        try {\n+            ks = KeyStore.getInstance(new File(keystore),\n+                    storePass == null ? null : storePass.toCharArray());\n+            actualLoad = ks != null;\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualLoad = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n+\n+        \/\/ If not loaded correctly, skip cert\/key reading\n+        if (!Objects.equals(actualLoad, true)) {\n+            return;\n+        }\n+\n+        try {\n+            actualCert = (ks.getCertificate(alias) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualCert = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n+\n+        try {\n+            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualKey = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n+    }\n+\n+    static OutputAnalyzer keytool(String s) throws Throwable {\n+        return SecurityTools.keytool(s);\n+    }\n+\n+    private static String fetchOpenssl() {\n+        if (Platform.is64bit()) {\n+            if (Platform.isLinux()) {\n+                return fetchOpenssl(LINUX_X64.class);\n+            } else if (Platform.isOSX()) {\n+                return fetchOpenssl(MACOSX_X64.class);\n+            } else if (Platform.isWindows()) {\n+                return fetchOpenssl(WINDOWS_X64.class);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String fetchOpenssl(Class<?> clazz) {\n+        String path = null;\n+        try {\n+            path = ArtifactResolver.resolve(clazz).entrySet().stream()\n+                    .findAny().get().getValue() + File.separator + \"openssl\";\n+            System.out.println(\"path: \" + path);\n+        } catch (ArtifactResolverException e) {\n+            Throwable cause = e.getCause();\n+            if (cause == null) {\n+                System.out.println(\"Cannot resolve artifact, \"\n+                        + \"please check if JIB jar is present in classpath.\");\n+            } else {\n+                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n+                        + \"\\nPlease make sure the artifact is available.\", e);\n+            }\n+        }\n+        return path;\n+    }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-linux_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class LINUX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-macosx_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class MACOSX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-windows_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class WINDOWS_X64 { }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":633,"deletions":0,"binary":false,"changes":633,"status":"added"},{"patch":"@@ -1,78 +0,0 @@\n-#\n-# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8266182\n-# @library \/test\/lib\n-# @modules java.base\/sun.security.pkcs\n-#          java.base\/sun.security.util\n-# @summary This is java keytool <-> openssl interop test.\n-#          ParamsTest.java does some operation on pre-generated openssl\n-#          keystores and generate some new JDK keystores under scratch\n-#          directory. The KeytoolOpensslInterop.sh performs some openssl\n-#          command on JDK generated kestores.\n-#\n-#          Steps: \n-#          1) Install OpenSSL 1.1.* version\n-#          2) Add installed openssl in to system PATH variable\n-#             Eg: export PATH=<path to openssl>:$PATH\n-#             and make sure desired version installed properly by checking\n-#             output of 'openssl version'.\n-#          3) Run this test using jtreg command, include -e:PATH option in the\n-#             jtreg command to take updated PATH by jtreg \n-#\n-#          Success Criteria : jtreg test should pass, and make sure text\n-#          'Succeed!!!' is present in the jtreg log STDOUT: section.\n-#\n-# @run main\/manual\/othervm ParamsTest\n-# @run shell\/manual KeytoolOpensslInteropTest.sh\n-\n-echo \"DEBUG - openssl version :\" $(openssl version)\n-openssl pkcs12 -in ksnormal -passin pass:changeit -info -nokeys -nocerts 2> t2 || exit 20\n-grep \"MAC: sha256, Iteration 10000\" t2 || exit 21\n-grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t2 || exit 23\n-grep \"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t2 || exit 24\n-\n-openssl pkcs12 -in ksnormaldup -passin pass:changeit -info -nokeys -nocerts 2> t22 || exit 25\n-diff t2 t22 || exit 26\n-\n-openssl pkcs12 -in ksnopass -passin pass:changeit -info -nokeys -nocerts && exit 30\n-\n-openssl pkcs12 -in ksnopass -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t3 || exit 31\n-grep \"PKCS7 Encrypted data:\" t3 && exit 33\n-grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 10000, PRF hmacWithSHA256\" t3 || exit 34\n-grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 10000\" t3 || exit 35\n-\n-openssl pkcs12 -in ksnopassdup -passin pass:changeit -info -nokeys -nocerts -nomacver 2> t33 || exit 36\n-diff t3 t33 || exit 37\n-\n-openssl pkcs12 -in ksnewic -passin pass:changeit -info -nokeys -nocerts 2> t4 || exit 40\n-grep \"MAC: sha256, Iteration 5555\" t4 || exit 41\n-grep \"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC, Iteration 7777, PRF hmacWithSHA256\" t4 || exit 43\n-grep \"Shrouded Keybag: pbeWithSHA1And128BitRC4, Iteration 10000\" t4 || exit 44\n-grep \"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC, Iteration 6666, PRF hmacWithSHA256\" t4 || exit 45\n-\n-openssl pkcs12 -in ksnewicdup -passin pass:changeit -info -nokeys -nocerts 2> t44 || exit 46\n-diff t4 t44 || exit 47\n-\n-echo Succeed!!!\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.sh","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,453 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8076190 8242151 8153005\n- * @library \/test\/lib\n- * @modules java.base\/sun.security.pkcs\n- *          java.base\/sun.security.util\n- * @summary Customizing the generation of a PKCS12 keystore\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.SecurityTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.KeyStore;\n-import java.util.Base64;\n-import java.util.Objects;\n-\n-import static jdk.test.lib.security.DerUtils.*;\n-import static sun.security.util.KnownOIDs.*;\n-import static sun.security.pkcs.ContentInfo.*;\n-\n-public class ParamsTest  {\n-\n-    public static void main(String[] args) throws Throwable {\n-\n-        \/\/ De-BASE64 textual files in .\/params to `pwd`\n-        try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n-                Path.of(System.getProperty(\"test.src\"), \"params\"),\n-                p -> !p.getFileName().toString().equals(\"README\"))) {\n-            stream.forEach(p -> {\n-                try (InputStream is = Files.newInputStream(p);\n-                     OutputStream os = Files.newOutputStream(p.getFileName())) {\n-                    Base64.getMimeDecoder().wrap(is).transferTo(os);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            });\n-        }\n-\n-        byte[] data;\n-\n-        \/\/ openssl -> keytool interop check\n-\n-        \/\/ os2. no cert pbe, no mac.\n-        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ You can even load it with a wrong storepass, controversial\n-        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ os3. no cert pbe, has mac. just like JKS\n-        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ Cannot load with a wrong storepass, same as JKS\n-        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ os4. non default algs\n-        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ os5. strong non default algs\n-        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ keytool\n-\n-        \/\/ Current default pkcs12 setting\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnormal -deststorepass changeit\");\n-\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ Import it into a new keystore with legacy algorithms\n-        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n-                + \"-destkeystore kslegacyimp -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.legacy\");\n-        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n-\n-        \/\/ Add a new entry with password-less settings, still has a storepass\n-        keytool(\"-keystore ksnormal -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=b \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n-\n-        \/\/ Different keypbe alg, no cert pbe and no mac\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnopass -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ Add a new entry with normal settings, still password-less\n-        keytool(\"-keystore ksnopass -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n-\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnewic -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ keypbe alg cannot be NONE\n-        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n-                .shouldContain(\"NONE AlgorithmParameters not available\")\n-                .shouldHaveExitValue(1);\n-\n-        \/\/ new entry new keypbe alg (and default ic), else unchanged\n-        keytool(\"-keystore ksnewic -genkeypair -keyalg DSA \"\n-                + \"-storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check KeyStore loading multiple keystores\n-        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n-        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n-                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n-        checkInt(data, \"22\", 10000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_256); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check keytool behavior\n-\n-        \/\/ ksnormal has password\n-\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate chain length: 0\");\n-\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ ksnopass is password-less\n-\n-        keytool(\"-list -keystore ksnopass\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ -certreq prompts for keypass\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-certreq -alias a -keystore ksnopass\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -storepass works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -keypass also works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -importkeystore prompts for srckeypass\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass \"\n-                + \"-destkeystore jks3 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ ksnopass2 is ksnopass + 2 cert entries\n-\n-        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n-        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n-        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n-        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore prompts for srckeypass for private keys\n-        \/\/ and no prompt for certs\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n-                + \"-destkeystore jks5 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"4 entries successfully imported\");\n-\n-        \/\/ ksonlycert has only cert entries\n-\n-        ks.deleteEntry(\"a\");\n-        ks.deleteEntry(\"b\");\n-        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore does not prompt at all\n-        keytool(\"-importkeystore -srckeystore ksonlycert \"\n-                + \"-destkeystore jks6 -deststorepass changeit\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ create a new password-less keystore\n-        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n-\n-        \/\/ Normally storepass is prompted for\n-        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        \/\/ ... but not if it's password-less\n-        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\");\n-\n-        \/\/ still prompt for keypass for genkeypair and certreq\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-keystore ksnopassnew -genkeypair -keyalg DSA \"\n-                + \"-alias a -dname CN=A \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldNotContain(\"Enter key password for <a>\");\n-\n-        \/\/ params only read on demand\n-\n-        \/\/ keyPbeIterationCount is used by -genkeypair\n-        keytool(\"-keystore ksgenbadkeyic -genkeypair -keyalg DSA \"\n-                + \"-alias a -dname CN=A \"\n-                + \"-storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n-                .shouldHaveExitValue(1);\n-\n-        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n-\n-        \/\/ but not used by -importcert\n-        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n-                + \"-noprompt -storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ None is used by -list\n-        keytool(\"-keystore ksnormal -storepass changeit -list \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-    }\n-\n-    \/**\n-     * Check keystore loading and key\/cert reading.\n-     *\n-     * @param keystore the file name of keystore\n-     * @param alias the key\/cert to read\n-     * @param storePass store pass to try out, can be null\n-     * @param keypass key pass to try, can not be null\n-     * @param expectedLoad expected result of keystore loading, true if non\n-     *                     null, false if null, exception class if exception\n-     * @param expectedCert expected result of cert reading\n-     * @param expectedKey expected result of key reading\n-     *\/\n-    private static void check(\n-            String keystore,\n-            String alias,\n-            String storePass,\n-            String keypass,\n-            Object expectedLoad,\n-            Object expectedCert,\n-            Object expectedKey) {\n-        KeyStore ks = null;\n-        Object actualLoad, actualCert, actualKey;\n-        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n-        try {\n-            ks = KeyStore.getInstance(new File(keystore),\n-                    storePass == null ? null : storePass.toCharArray());\n-            actualLoad = ks != null;\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualLoad = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n-\n-        \/\/ If not loaded correctly, skip cert\/key reading\n-        if (!Objects.equals(actualLoad, true)) {\n-            return;\n-        }\n-\n-        try {\n-            actualCert = (ks.getCertificate(alias) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualCert = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n-\n-        try {\n-            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualKey = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n-    }\n-\n-    static OutputAnalyzer keytool(String s) throws Throwable {\n-        return SecurityTools.keytool(s);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsTest.java","additions":0,"deletions":453,"binary":false,"changes":453,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-Preparing data in this directory\n-Do not use OpenSSL 3.0.0. The default algorithms for pkcs12 are changed.\n-\n-(\n-mkdir tmp\n-cd tmp\n-keytool -keystore ks -keyalg ec -genkeypair -storepass changeit -alias a -dname CN=A\n-openssl pkcs12 -in ks -nodes -out kandc -passin pass:changeit\n-openssl pkcs12 -export -in kandc -out os2 -name a -passout pass:changeit \\\n-        -certpbe NONE -nomac\n-openssl pkcs12 -export -in kandc -out os3 -name a -passout pass:changeit \\\n-        -certpbe NONE\n-openssl pkcs12 -export -in kandc -out os4 -name a -passout pass:changeit \\\n-        -certpbe PBE-SHA1-RC4-128 -keypbe PBE-SHA1-RC4-128 -macalg SHA224\n-openssl pkcs12 -export -in kandc -out os5 -name a -passout pass:changeit \\\n-        -certpbe AES-256-CBC -keypbe AES-256-CBC -macalg SHA512\n-for a in *; do\n-    openssl base64 -in $a -out ..\/$a\n-done\n-cd ..\n-rm -rf tmp\n-)\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/README","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-QmFnIEF0dHJpYnV0ZXMKICAgIGZyaWVuZGx5TmFtZTogYQogICAgbG9jYWxLZXlJ\n-RDogNTQgNjkgNkQgNjUgMjAgMzEgMzUgMzMgMzggMzEgMzMgMzQgMzAgMzUgMzkg\n-MzQgMzMgMzUgCktleSBBdHRyaWJ1dGVzOiA8Tm8gQXR0cmlidXRlcz4KLS0tLS1C\n-RUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNYUUlCQURDQ0FqVUdCeXFHU000NEJB\n-RXdnZ0lvQW9JQkFRQ1BlVFhadWFycHY2dnRpSHJQU1ZHMjh5N0YKbmp1dk54am82\n-c1NXSHo3OU5nYm5RMUdweEJnek9iZ0o1OEt1SEZPYnAwZGJoZEFScmJpMGVZZDFT\n-WVJwWEt3TwpqeFN6Tmdnb29pLzZKeEVLUFdLcGswVTBDYUQrYVd4R1dQaEwzU0NC\n-bkRjSm9CQlhzWld0elFBalBicFVoTFlwCkg1MWtqdmlEUklaM2w1enNCTFEwcHF3\n-dWRlbVlYZUk5c0NrdndSR01uL3FkZ1lIbk00MjNrcmN3MTdualNWa3YKYUFtWWNo\n-VTVGZW85YTR0R1U4WXpSWStBT3pLa3d1RHljcEFsYms0L2lqc0lPS0hFVU9UaGpC\n-b3BvMzNmWHFGRAoza3RtL3dTUVB0WFBGaVBoV05TSHhnanBmeUVjMkIzS0k4dHVP\n-QWRsK0NMalFyNUlUQVYyT1RsZ0hOWm5BaDBBCnV2YVdwb1Y0OTkvZTUvcG55WGZI\n-aGU4eXNqTzY1WURBdk5WcFhRS0NBUUFXcGx4WUlFaFFjRTUxQXFPWFZ3UU4KTk5v\n-Nk5IakJWTlRrcGNBdEpDN2dUNWJtSGt2UWtFcTlySTgzN3JIZ256R0MwanlRUTh0\n-a0w0Z0FRV0R0K2NvSgpzeUIycDV3eXBpZnlSejZSaDV1aXhPZEV2U0NCVkV5MVc0\n-QXNObzBmcUQ3VWllbE9ENkJvampKQ2lseDR4SGpHCmpRVW50eHlhT3JzTEMrRXNS\n-R2lXT2VmVHpuVGJFQnBscWl1SDlreG9KdHMreHk5TFZabURTN1R0c0M5OGtPbWsK\n-bHRPbFhWTmI2L3hGMVBZWjlqODk3YnVIT1NYQzhpVGdkekVwYmFpSDdCNUhTUGgr\n-KzEvZXQxU0VNV3NpTXQ3bApVOTJ2QWhFckRSOEMyakNYTWlUK0o2N2FpNTFMS1NM\n-WnVvdmpudG5oQTZZOFVvRUx4b2kzNHUxREZ1SHZGOXZlCkJCOENIUUMzU0hOSm5u\n-cjF0TG00aDdKR1RETU02cUJQc2N3cmdMcGZHOW9tCi0tLS0tRU5EIFBSSVZBVEUg\n-S0VZLS0tLS0KQmFnIEF0dHJpYnV0ZXMKICAgIGZyaWVuZGx5TmFtZTogYQogICAg\n-bG9jYWxLZXlJRDogNTQgNjkgNkQgNjUgMjAgMzEgMzUgMzMgMzggMzEgMzMgMzQg\n-MzAgMzUgMzkgMzQgMzMgMzUgCnN1YmplY3Q9L0NOPUEKaXNzdWVyPS9DTj1BCi0t\n-LS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFRXpDQ0E3K2dBd0lCQWdJRWJ1\n-OFlOREFOQmdsZ2hrZ0JaUU1FQXdJRkFEQU1NUW93Q0FZRFZRUURFd0ZCCk1CNFhE\n-VEU0TURreU9ERXhNamN6T1ZvWERURTRNVEl5TnpFeE1qY3pPVm93RERFS01BZ0dB\n-MVVFQXhNQlFUQ0MKQTBJd2dnSTFCZ2NxaGtqT09BUUJNSUlDS0FLQ0FRRUFqM2sx\n-MmJtcTZiK3I3WWg2ejBsUnR2TXV4WjQ3cnpjWQo2T3JFbGg4Ky9UWUc1ME5ScWNR\n-WU16bTRDZWZDcmh4VG02ZEhXNFhRRWEyNHRIbUhkVW1FYVZ5c0RvOFVzellJCktL\n-SXYraWNSQ2oxaXFaTkZOQW1nL21sc1JsajRTOTBnZ1p3M0NhQVFWN0dWcmMwQUl6\n-MjZWSVMyS1IrZFpJNzQKZzBTR2Q1ZWM3QVMwTkthc0xuWHBtRjNpUGJBcEw4RVJq\n-Si82bllHQjV6T050NUszTU5lNTQwbFpMMmdKbUhJVgpPUlhxUFd1TFJsUEdNMFdQ\n-Z0RzeXBNTGc4bktRSlc1T1A0bzdDRGloeEZEazRZd2FLYU45MzE2aFE5NUxadjhF\n-CmtEN1Z6eFlqNFZqVWg4WUk2WDhoSE5nZHlpUExiamdIWmZnaTQwSytTRXdGZGpr\n-NVlCeldad0lkQUxyMmxxYUYKZVBmZjN1ZjZaOGwzeDRYdk1ySXp1dVdBd0x6VmFW\n-MENnZ0VBRnFaY1dDQklVSEJPZFFLamwxY0VEVFRhT2pSNAp3VlRVNUtYQUxTUXU0\n-RStXNWg1TDBKQkt2YXlQTis2eDRKOHhndEk4a0VQTFpDK0lBRUZnN2ZuS0NiTWdk\n-cWVjCk1xWW44a2Mra1llYm9zVG5STDBnZ1ZSTXRWdUFMRGFOSDZnKzFJbnBUZytn\n-YUk0eVFvcGNlTVI0eG8wRko3Y2MKbWpxN0N3dmhMRVJvbGpubjA4NTAyeEFhWmFv\n-cmgvWk1hQ2JiUHNjdlMxV1pnMHUwN2JBdmZKRHBwSmJUcFYxVApXK3Y4UmRUMkdm\n-WS9QZTI3aHprbHd2SWs0SGN4S1cyb2grd2VSMGo0ZnZ0ZjNyZFVoREZySWpMZTVW\n-UGRyd0lSCkt3MGZBdG93bHpJay9pZXUyb3VkU3lraTJicUw0NTdaNFFPbVBGS0JD\n-OGFJdCtMdFF4Ymg3eGZiM2dPQ0FRVUEKQW9JQkFEK0syd1RoV3VyRGpZTUNYeGZy\n-dXJOK0drZFNFeXk5cCtkdkhJUDFrTWhybTcrRXV6LzExUVlGcGI4Vgpic0NhWWUx\n-ME9qWkF1WjRXSmdTbkl5R0swb2JzbjlKWkZubUdDbGlxRkVoWGJwbnhyOGxhS3Iw\n-dDRERytPMTF2CjVQRGh4aHd2b1VZb2ZwWTFEYjN0SHlxdytWM3RRWVA3K3RaNDRB\n-eW1SdTNtbktZTVZzRHd2M0x1UEdaLzJmQ0MKY2lYVEJIU3VFbzdCUDdBbjdFYkZO\n-K0JaQldlTlgvcjNOZm1nL0tmQjQ1OFNZMmhFYlplRW5kZUh4d204VFRORwpQaXdi\n-Nkx5ZE5RS0VFS003cmVFTjkwTXVsUVJMZkhVVFBWZXB5dU9QK1ZySEI3WS9lVWhI\n-K2RNeHp6d3pLOHJ6CjRYaEwxRFBhT1ZMdmxCSUR5VE5QZU4wV2V4bWpJVEFmTUIw\n-R0ExVWREZ1FXQkJUQThWK01SSXRNU3Yyb283YjgKYzVlQ0tybzdxREFOQmdsZ2hr\n-Z0JaUU1FQXdJRkFBTS9BREE4QWh3a0dVK2VVR0kvTFFVejMzTUk3cC9BVXd1WAo0\n-SnZOVGUrUGhQZFZBaHdvUzdNMFIzbjRnSkkxU2FRdnoyTWhuR3Z1T3Q5UzZMdkRR\n-NWRFCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/kandc","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-MIIIQQIBAzCCB\/oGCSqGSIb3DQEHAaCCB+sEggfnMIIH4zCCAv8GCSqGSIb3DQEH\n-AaCCAvAEggLsMIIC6DCCAuQGCyqGSIb3DQEMCgECoIICmzCCApcwKQYKKoZIhvcN\n-AQwBAzAbBBSZfQZ+F5Za9YLcGbyXsafOUX50XwIDAMNQBIICaBh7FmOBnDoFngWz\n-pnK5+SzD16E8TNFxZneou1n2Nxq8MXMgfLjlVb9PSlARDU+Pj9FhRdjWqTEncKwn\n-5owDYujiOSGmAHih64nFHoICs34o5LAKv9l8UhfE1qUgA4iA1VdakD31N8ZGR29O\n-2tglXKrHE9n6f5k47mzqcPiNIgHH1KSWu143AInYTOjpEJD2YpBTzL0YxvnLbaY1\n-v+PRokbHak8siO\/MCNwwQBD5lJX7kVld4iMjeJvBX9pUwqfD4EDuvJo9QkHmy+GB\n-UBAMRBsMHwV9E832dHxh+JYveg0TI8FACnLHpmbYpCs+K69A6yOAUqfUIseLUJR4\n-XSd2HZODXyLHAimJK9AQGRpGWORiRu2E\/XimLo2qhPKEOl2hbi+R95hb2h2wGgr1\n-RhCsAFHac7cW4r\/s1HacU0JCzWJKyV76LbNHDexlGj09B47VAAAfE7zlHmUIShEN\n-zwQ6EUDxrK+h7wY2GS2fqcseqDvPXtxvbGjkAyfYE+6aT2g6vtd6PTrBSRt6Lzp6\n-rUC0IrHXXpBb8qanvuAd+OPC4skp\/hI\/q7qCsKOUzRc5Xmm1FMUfJr6UeadSvpfw\n-V9C28zEMPcW+KdS2W7f0uvebIgUU7xj8dg27XC+C7oPhLz\/pIFQ4n449GQNUo57K\n-WPmGeT\/coO3jVk+E7uzXeFkwp2rGXQNWin44UUGGG0\/S04YMRJknpRzw8sILD4d1\n-N\/iEazUOl35pua9+0OTFqNJzSemqO3kevgVXrsSzQCLeoB1dn4mpvqkPV87B5JOC\n-t3fpDVSBrcFF43qeveQ65lpbcbOoucO\/h16s8w8xNjARBgkqhkiG9w0BCRQxBB4C\n-AGEwIQYJKoZIhvcNAQkVMRQEElRpbWUgMTUzODEzNDA1OTQzNTCCBNwGCSqGSIb3\n-DQEHBqCCBM0wggTJAgEAMIIEwgYJKoZIhvcNAQcBMCkGCiqGSIb3DQEMAQYwGwQU\n-tPIqPBD1WiaRd01W1t6\/znB2PmkCAwDDUICCBIhvxfWroewV\/5cO8r24YQkMVjvs\n-2kgkLusWbreMScR\/LE5lcLXHYAS3KMJJWfwBBKa3nvyuMiYPnuzTReSd7SxtCZtG\n-+EIyyf6mTUdqBTPkDduqDHqugzokHKFycsTi2YBam1ohyTOUoUOFnJeOyJ4FOVQ5\n-TQOPUXgBW8s2jMm181+w0E3NXiEC+c+cPZUm2aQPLUxEYqTuJsMY6Uz+jv94hOIH\n-eeZHwVBy8D\/3pUB56L89JBRARpIsCP+BQIaTFyopXQ8i50gdT3a6KL8O9Zzjjij8\n-VLjCpLdC9wR5yY4Js\/cZyER\/uxl8zBroheiye5U77rw4WQrSQhn\/cBoTDR0llwlU\n-K3IL4J22UjtTmIQlFAV8XWz7GZAVJkuJLEtuO6JjHSgO8NTnfN2T4oWaNAwdAK3S\n-UrJVpk4yx0+B2UokxyY0Y3FErLzM7BMq\/X9Rvhs9Zwwr+ZftqXEaiYHHSEPGNGZI\n-Gh3P8F8EThCcyVe7yFK+0DCj3Y8jrZZLXh8e1M1wPWVay52JL1QApTfs0ucwlMLz\n-19KUSm13ztuCBo47OrMU1ur6a1eQZkOvRmdMxKNLLrET3sBh7ZE6SbjijCtDfYdf\n-k4+Q9VrO+04atyXg8Gy4vRZB\/koe8oXCDgPYTTqLHNywTuhJq30Ev71D0GdiwPy7\n-9urLh2ocm7neRIGsaYRXxa0U6IpT47wOYbUOz3y6Yf5yjoI3E0gWYZtuQVGRkatF\n-p97mJExQ9aBy1l4hqmgU4bcqBepq2fdxhVueiZD84QZqfZ5H9pRzVPjHoqzIH8wm\n-kmM78mlMqu8IPqny0I3zF6z+wapd0vpjpeaLItlUAJ2Eiz7d4BHKBeAPsZtPUQzr\n-hPtM\/ao5QjLHddLqh2lauJk0Og+4Uj1UftelM6ERZPN0JXEyh+DU9hs2czTnJKlZ\n-BEB07\/1WFPCrdj\/eNe7K02Xs2kpJKiXjAWNxFNWtqDQY3U5\/lAY8oY\/dc6LG+iuO\n-yDLXD4TSJZSNrOOHKmp4TXpuMRM2tbw9m0vrweegSB6GIzUIA1MOvgsjbSgWwmhy\n-LoG6QriLhTXZQd+Uh6uqlCBrgXQ2K+RuIsZCZaZE64pUtK3Tl6ZwBe3POfxMCkjm\n-YQ\/ZJ7k0IOk9lQfA6InlfSDkS7B5WHev7Fqh96GI9sUSox13El9VvbNfFDZy5lem\n-Ml8GTDLrlop5TRDeplHknettKqMQmpj2nopGvTn4EFSNFz8AZmEtOaptzkP5l3ar\n-DRgPqhxclb\/4QX7c67s1l\/pcR16BbiH05rxVUTclg8rB0FCo14Hi5CQF0turk5QK\n-ptM9kvz\/VtDUpHArRz7NaFZdJuVC1IRq8dgmSi7MN7LaQ0mVIfeQ1ssHjLhIQMbA\n-aE8Xwij9Q5OAoNcA8Ucctqgl12\/9uKfZ5lKeZnVR4DyVhjnTJ9Ounv1unagBj\/Jq\n-6o4ibStuqfHhKhBtQkr4RXsrocJhgMhfhbUqgQRx0pWuODrpqQMuG6yTnw7ePPMt\n-w29mceyPdU8EoYUUPCDZdpv3giurH5E22tnRDyU0Mm1Spbe\/rDA+MCEwCQYFKw4D\n-AhoFAAQUtavY6pX+J6lZHeGkx3Rlt6Hc8iEEFOUlujwYOLAzDd2fQcGdyL8MrGvo\n-AgMBhqA=\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/ks","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-MIIHrwIBAzCCB6gGCSqGSIb3DQEHAaCCB5kEggeVMIIHkTCCBJUGCSqGSIb3DQEH\n-AaCCBIYEggSCMIIEfjCCBHoGCyqGSIb3DQEMCgEDoIIELzCCBCsGCiqGSIb3DQEJ\n-FgGgggQbBIIEFzCCBBMwggO\/oAMCAQICBG7vGDQwDQYJYIZIAWUDBAMCBQAwDDEK\n-MAgGA1UEAxMBQTAeFw0xODA5MjgxMTI3MzlaFw0xODEyMjcxMTI3MzlaMAwxCjAI\n-BgNVBAMTAUEwggNCMIICNQYHKoZIzjgEATCCAigCggEBAI95Ndm5qum\/q+2Ies9J\n-UbbzLsWeO683GOjqxJYfPv02BudDUanEGDM5uAnnwq4cU5unR1uF0BGtuLR5h3VJ\n-hGlcrA6PFLM2CCiiL\/onEQo9YqmTRTQJoP5pbEZY+EvdIIGcNwmgEFexla3NACM9\n-ulSEtikfnWSO+INEhneXnOwEtDSmrC516Zhd4j2wKS\/BEYyf+p2BgeczjbeStzDX\n-ueNJWS9oCZhyFTkV6j1ri0ZTxjNFj4A7MqTC4PJykCVuTj+KOwg4ocRQ5OGMGimj\n-fd9eoUPeS2b\/BJA+1c8WI+FY1IfGCOl\/IRzYHcojy244B2X4IuNCvkhMBXY5OWAc\n-1mcCHQC69pamhXj3397n+mfJd8eF7zKyM7rlgMC81WldAoIBABamXFggSFBwTnUC\n-o5dXBA002jo0eMFU1OSlwC0kLuBPluYeS9CQSr2sjzfuseCfMYLSPJBDy2QviABB\n-YO35ygmzIHannDKmJ\/JHPpGHm6LE50S9IIFUTLVbgCw2jR+oPtSJ6U4PoGiOMkKK\n-XHjEeMaNBSe3HJo6uwsL4SxEaJY559POdNsQGmWqK4f2TGgm2z7HL0tVmYNLtO2w\n-L3yQ6aSW06VdU1vr\/EXU9hn2Pz3tu4c5JcLyJOB3MSltqIfsHkdI+H77X963VIQx\n-ayIy3uVT3a8CESsNHwLaMJcyJP4nrtqLnUspItm6i+Oe2eEDpjxSgQvGiLfi7UMW\n-4e8X294DggEFAAKCAQA\/itsE4Vrqw42DAl8X67qzfhpHUhMsvafnbxyD9ZDIa5u\/\n-hLs\/9dUGBaW\/FW7AmmHtdDo2QLmeFiYEpyMhitKG7J\/SWRZ5hgpYqhRIV26Z8a\/J\n-Wiq9LeAxvjtdb+Tw4cYcL6FGKH6WNQ297R8qsPld7UGD+\/rWeOAMpkbt5pymDFbA\n-8L9y7jxmf9nwgnIl0wR0rhKOwT+wJ+xGxTfgWQVnjV\/69zX5oPynweOfEmNoRG2X\n-hJ3Xh8cJvE0zRj4sG+i8nTUChBCjO63hDfdDLpUES3x1Ez1Xqcrjj\/laxwe2P3lI\n-R\/nTMc88MyvK8+F4S9Qz2jlS75QSA8kzT3jdFnsZoyEwHzAdBgNVHQ4EFgQUwPFf\n-jESLTEr9qKO2\/HOXgiq6O6gwDQYJYIZIAWUDBAMCBQADPwAwPAIcJBlPnlBiPy0F\n-M99zCO6fwFMLl+CbzU3vj4T3VQIcKEuzNEd5+ICSNUmkL89jIZxr7jrfUui7w0OX\n-RDE4MBEGCSqGSIb3DQEJFDEEHgIAYTAjBgkqhkiG9w0BCRUxFgQU0essNYYOWMdT\n-\/A\/ozvhbEmwKv2YwggL0BgkqhkiG9w0BBwGgggLlBIIC4TCCAt0wggLZBgsqhkiG\n-9w0BDAoBAqCCAo4wggKKMBwGCiqGSIb3DQEMAQMwDgQI8K+MRZ3EoKQCAggABIIC\n-aGUbReB6byOtQd7BAAym6y+S1O6URFnEjYs+aFVTmwRuRDE6d3xToxZUkOaVsUc5\n-kR5P6ixifkd\/S4yRl+t0Eqvn1yhTwR\/ptTm\/EL8a7RygPG3\/wsSsXUCVEBvtTO3q\n-G+iXUmLk5FjeiOpCbccOUNTZmPXgnSfw0YYrenjr5Z0MOk4BESe+\/V8rvEG71fJ7\n-KRE6m1b3E8ad3mz09BnccBFdJyY0xEjwD8KJLnUDVyaopYPnvi2Z7OunsyMWUgx8\n-gftqGpk5IhskIEnvgQ9NNjL2JpytbG0nVkpgtBULcKCXtPEqqweY\/6m5VFAhkikX\n-urUiJr+svjRFqkXuv+oPJ+6o\/Y4QTJSqHbavsXWEwAo+3IxyMhQwLMf\/6iXfBiGL\n-RIrLON3s6c0AcboGCtn1nfEcaXzNrTXkFpzJSFYGBHZVlXdyptDmsMXZbJlZAPFb\n-2dIzx9yJHqS3AV560p30399VWSko7HmY7t+EbZH\/vrdVD+Vzy2zPXFDtbu70j8C\/\n-RT21LAjjjrliIop\/2Akhz3eOTZcEAoQNBLcNBXoIdo7HiX6KzpKvdW51lWWEcAWf\n-zl878rJpmIdmvCc4HDkuzcpdvxk+q6pTn5Wh5K+X1ImTwWL+C+s4xHhiNAMzc4dK\n-eMsmukiAW301uZkjU30vpJ2BjBwrRo+ej9s18ePviy65E9UYeforrPIkaM9lpwID\n-AB17QgeVuciHiw\/g7HmbAacWwoqZc41eipIxqPWHlqEGYeARm0x4zb47qWwcowSO\n-AwlDuvRorpin25ZhiPesY1SJzFll5fAD0bxoQcry7S+2CetF7c8st3AxODARBgkq\n-hkiG9w0BCRQxBB4CAGEwIwYJKoZIhvcNAQkVMRYEFNHrLDWGDljHU\/wP6M74WxJs\n-Cr9m\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/os2","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-MIIH4gIBAzCCB6gGCSqGSIb3DQEHAaCCB5kEggeVMIIHkTCCBJUGCSqGSIb3DQEH\n-AaCCBIYEggSCMIIEfjCCBHoGCyqGSIb3DQEMCgEDoIIELzCCBCsGCiqGSIb3DQEJ\n-FgGgggQbBIIEFzCCBBMwggO\/oAMCAQICBG7vGDQwDQYJYIZIAWUDBAMCBQAwDDEK\n-MAgGA1UEAxMBQTAeFw0xODA5MjgxMTI3MzlaFw0xODEyMjcxMTI3MzlaMAwxCjAI\n-BgNVBAMTAUEwggNCMIICNQYHKoZIzjgEATCCAigCggEBAI95Ndm5qum\/q+2Ies9J\n-UbbzLsWeO683GOjqxJYfPv02BudDUanEGDM5uAnnwq4cU5unR1uF0BGtuLR5h3VJ\n-hGlcrA6PFLM2CCiiL\/onEQo9YqmTRTQJoP5pbEZY+EvdIIGcNwmgEFexla3NACM9\n-ulSEtikfnWSO+INEhneXnOwEtDSmrC516Zhd4j2wKS\/BEYyf+p2BgeczjbeStzDX\n-ueNJWS9oCZhyFTkV6j1ri0ZTxjNFj4A7MqTC4PJykCVuTj+KOwg4ocRQ5OGMGimj\n-fd9eoUPeS2b\/BJA+1c8WI+FY1IfGCOl\/IRzYHcojy244B2X4IuNCvkhMBXY5OWAc\n-1mcCHQC69pamhXj3397n+mfJd8eF7zKyM7rlgMC81WldAoIBABamXFggSFBwTnUC\n-o5dXBA002jo0eMFU1OSlwC0kLuBPluYeS9CQSr2sjzfuseCfMYLSPJBDy2QviABB\n-YO35ygmzIHannDKmJ\/JHPpGHm6LE50S9IIFUTLVbgCw2jR+oPtSJ6U4PoGiOMkKK\n-XHjEeMaNBSe3HJo6uwsL4SxEaJY559POdNsQGmWqK4f2TGgm2z7HL0tVmYNLtO2w\n-L3yQ6aSW06VdU1vr\/EXU9hn2Pz3tu4c5JcLyJOB3MSltqIfsHkdI+H77X963VIQx\n-ayIy3uVT3a8CESsNHwLaMJcyJP4nrtqLnUspItm6i+Oe2eEDpjxSgQvGiLfi7UMW\n-4e8X294DggEFAAKCAQA\/itsE4Vrqw42DAl8X67qzfhpHUhMsvafnbxyD9ZDIa5u\/\n-hLs\/9dUGBaW\/FW7AmmHtdDo2QLmeFiYEpyMhitKG7J\/SWRZ5hgpYqhRIV26Z8a\/J\n-Wiq9LeAxvjtdb+Tw4cYcL6FGKH6WNQ297R8qsPld7UGD+\/rWeOAMpkbt5pymDFbA\n-8L9y7jxmf9nwgnIl0wR0rhKOwT+wJ+xGxTfgWQVnjV\/69zX5oPynweOfEmNoRG2X\n-hJ3Xh8cJvE0zRj4sG+i8nTUChBCjO63hDfdDLpUES3x1Ez1Xqcrjj\/laxwe2P3lI\n-R\/nTMc88MyvK8+F4S9Qz2jlS75QSA8kzT3jdFnsZoyEwHzAdBgNVHQ4EFgQUwPFf\n-jESLTEr9qKO2\/HOXgiq6O6gwDQYJYIZIAWUDBAMCBQADPwAwPAIcJBlPnlBiPy0F\n-M99zCO6fwFMLl+CbzU3vj4T3VQIcKEuzNEd5+ICSNUmkL89jIZxr7jrfUui7w0OX\n-RDE4MBEGCSqGSIb3DQEJFDEEHgIAYTAjBgkqhkiG9w0BCRUxFgQU0essNYYOWMdT\n-\/A\/ozvhbEmwKv2YwggL0BgkqhkiG9w0BBwGgggLlBIIC4TCCAt0wggLZBgsqhkiG\n-9w0BDAoBAqCCAo4wggKKMBwGCiqGSIb3DQEMAQMwDgQIFvtCm+ogILcCAggABIIC\n-aLbDb3DKmULPLHfwvcVdp3cbM1Bcj3T\/keIzwnOzdMluj8wisUEQA\/U1onSgp1eZ\n-Hfk0TPcgd339Uevuh059GL5yFknH2VHhU6nO8Pz+OVpjab9nSBpWjv+PnlSAKWr6\n-5ODx9t5TGPO5V7PBqtxDiU4YeBI6akUlroJz3lSH3dD8t3KBdi3GjnG0S4iBadrW\n-BGV5izRPIbaDpISAscwDInXZ4HJhWbD14\/mEOyKHwAmD+NwxMhAS97SRC7N\/rAJD\n-ACj0dQYb3MW4QqVgF2QBQmOYXq6CsrQvc8faQWpqgH2JYzquTu4vx7xFGuKlXSLU\n-+9hAo99NID6xYryebjMFe7sJFLXyMYLt9pWn5f72xR0PrH71EpTRQkZVIYUfnxkL\n-iCFwNgWyPF7NYwieUKQ+JyPq3cllK+kuViiNwEvYO4TJp4XjYMXefXFlarX2llQz\n-J\/tu9LJu9eA9A528i7hvJ0ZFpYtZA40CWaJRlCKZqT9P\/YQGiNOt31JxJtFyiEpl\n-i\/dh49clBpibQouRKSc\/uTNePJ1IyaWkgE1SwmmEz+ZSFSlhxS4Ba0+2MsRKoirC\n-8M6V0A16W4V2af9jVgRpIyRcRfYZBBij2Cu2k\/UB\/hrqxlYp3nehOC6PAVT40EwC\n-HO5613cu2LSJDgxEtaNMcj5Zy6KkJ3vB2BxxfdHL6Dz3uLa+8BuEpfLUidccgCgm\n-MQpxplgLVztIkq6HZy\/koMGgv2ywV7LGLlVpKBHmKDO2yvYhr6J2rbNMsh5Bbq9i\n-YiZVz7TdmqY4L8rEtEuwJA2SgHUV0FhpoD56WTfPZvfYgoHhHu1hBcQxODARBgkq\n-hkiG9w0BCRQxBB4CAGEwIwYJKoZIhvcNAQkVMRYEFNHrLDWGDljHU\/wP6M74WxJs\n-Cr9mMDEwITAJBgUrDgMCGgUABBRQNcC69+RQUJu5I4ode2JYzXe2KAQI1mkwkuSh\n-sUUCAggA\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/os3","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-MIIIGwIBAzCCB9UGCSqGSIb3DQEHAaCCB8YEggfCMIIHvjCCBMkGCSqGSIb3DQEH\n-BqCCBLowggS2AgEAMIIErwYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQEwDgQIkluN\n-Qu+v+1gCAggAgIIEgr9xMS47pyB8kvlbU+\/Uwh4pfbjeLm4h4FjR1GxKU0ouoct7\n-cg\/4S1AZfa2vjVCRxkdWLvf88eAtp96E1YVIdDT\/3ZSY953eNA\/xvNF2HWVJT18H\n-jEOuNhmVHbuMIbfmG8sm6rwN2e3xnxuCDkYWvLNTiWOcoQTmLfJIqp5J2FLj2zwN\n-0jApAepDE2NtEaq+edMU+3c3d7b0+n9BB32b5w1LaXzShuN2cpHOYJvkw+h32eyJ\n-XrjlRB8J9\/4XAzyz269UM9QWdxECqBeTfd1m8PhV\/9xR9QOIcur0Flv\/Cw0j3sos\n-oMBibypXsV7GzGZKrUAIVAnhYsDB\/yxxL\/vPjZ8nCzl7iKc+wBNJiXIO04XNg00U\n-bUBOSeoGs4ns909u09+qtwQf6fCiV8VwP\/h5vIGB++Kv06O9CWt20lOv9KZPqZOR\n-5H0ndbx60LoTsPT5FzOysOWqUNFx6wiggV9Txl38zax\/VwOLA01Uq1jPDHEHQWIY\n-M139MTL+5P43hDBy9TOyO8uzD3eUj3\/+pvoyZb2wfV7NmN5WBgP\/MDnm6Jk+eFMw\n-6v4mXwKycIX6qsBNdTc4QAEgcHwv544eqxPiBuxerr5bySSodWjoziEtyzvgNx1f\n-jGqQDn7VlZlDrn6rlJ0\/iX0xv4M\/PVngMUezfmW+zo4998NXlurXKbA2FG\/U0mqt\n-Ys0QGYkfoTFwHixYK4Mf7B4pwlHo3FCO+kjv+t1VZxZF\/Pr8B1qflgeBJaiqH6oJ\n-oh1L1vdOh93VowZFUvgmx27Fb3rIUhvGh1rzfhp5OmMaoXP97TwaHLsK2c\/BDwJp\n-cwmfaJByDcrlTAeBsNlzffD0o61ZAhYMZuGFEoyuIpm8qOcIW1dVrYe8tYP7ZTDA\n-FUmmoymB+6cK8wW5V5BeRmSxU2DnkBDGriEzQTtepQLgzy7LtLU8rs1mIszwTiNj\n-60MI6gX22taT0C8kpsH\/xwKeKw+7tsyL8bk4N8zQ8h\/osMdxtO0QVpxikQ3KAinj\n-nurVqvcqq3n0EqHwRJ+NQMwuERbbDXcRDowQSWJc2HLn8odxL18dvOpu2IQlH2DA\n-NtZpLqP7EZ36ebA6txlPdH2GUH7V9ZQwF+3t+NbMXrZLx93DAwdpzVDY9a96AFsE\n-YHd3f3ReT8TzIwB1dOrvIOPO82cIy5\/OIaDa9XelY2\/dRVfU4cHpNhRZSLmsQfsQ\n-yorPQi1baNT0GjoCDgynUvP2DWBdIyjZ442ysfNmO5MjmjYEA17ofBapc4xhsU5B\n-+XgyfVyfeDHNO+zMZvrdMPnXwu+A3ggaQorvQbAfV8JfVSZoyleKjTxNgx61KI3j\n-dQsEtLQgvAbLsI+Ku7z86HVZ7PH69i3qHtJo8s8Nw4a9QvCCgpiMqw04EQawlZY1\n-aCrOsHvElFB0klIlGpMPugJ1YVgSvXtMwLgLMlAr8mQW+10uKMtrVU5Iq6SAkRDe\n-ff57iqXoKpNJVGsV9ZxrMT7Y5oECJvHLUWtqapsu7Xpp0\/DUPcRxAfCj7ZBxEfVW\n-sBBDmUia+TTVYT7TJPTzMIIC7QYJKoZIhvcNAQcBoIIC3gSCAtowggLWMIIC0gYL\n-KoZIhvcNAQwKAQKgggKHMIICgzAcBgoqhkiG9w0BDAEBMA4ECLpLJ5EtNx41AgII\n-AASCAmEutLb3vdtinkV4hEXRDnRPd19WXSTOFI5g3ZLc2liyiQ3fA\/gvXQihmZjp\n-spYf6kWBkI6+hx3AwM1Vg0FerAJAe9MnMZqZtu\/pdqaxiPnbdm5lpB2FiLyrCvY+\n-8cyISOPi9LRWZCsf24dUBVHJu4W+BULiZSwoakwLy7UxNclcBKrrIz3brm5UF2Xl\n-CMqI3N+afaHDst2n1BjwX4InnU9p2FY5Em227hdoWWni+IR8fn0yUMz2ma\/kgQ2\/\n-ntr3ursuq27kC3haWW47kitxK2fZIyjs03gQp2sH0u0ReDIt3EswvPWgjT+EkpjW\n-NgXK7GyWVdjcJDciTnIBs\/vvhkcZVuTgflYpFTbzRK1I1M2eXSjxmEKQ8vmA2wRr\n-IFzrEcMOo5pTFnUxeOfpucV2j5uD8g8Uk9rxkOwaM1q9yipf5qd5MjJBKrqBuqaW\n-3v9tKwCoJRTRWR+Y7SMjy2aB\/Y2pRGMtmPOuUs4q81ket97Vp4R9ruIkIsEvVMg6\n-hXWIhP7Or13f7Qr2Xh71Px7VJmMmfhBaXLEfJtD7kVmRAFzPK0QHYDCpLoka\/7aZ\n-AsrRP54XCkDTeTwhFkKLJW68a4s7+bLaHjaGgjb+62\/J2CulVG6KDvlo3I2\/yB8P\n-0lWzWJdLJuRnPDPVZTB2HXKb\/XJtw1MdcdvxvtzEbSM4naZ1YfYVXzT+zowq7kKk\n-N0sgLv357q0HsylKT2Rvs94J0ackaiVaBQCHVReSfNPRwQ2IvjvEq3AML+vt06x7\n-4lXiPtNsuAnkMA7whVWTdSZTvSPGxesWIS+3kTAybMPkum7KIL8xODARBgkqhkiG\n-9w0BCRQxBB4CAGEwIwYJKoZIhvcNAQkVMRYEFNHrLDWGDljHU\/wP6M74WxJsCr9m\n-MD0wLTANBglghkgBZQMEAgQFAAQcG2U041U943EvoFbDQVXR7ZMuU8LZJ4EiaB6O\n-owQIAiAhw9ZbovsCAggA\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/os4","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-MIII0gIBAzCCCGgGCSqGSIb3DQEHAaCCCFkEgghVMIIIUTCCBRIGCSqGSIb3DQEH\n-BqCCBQMwggT\/AgEAMIIE+AYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqG\n-SIb3DQEFDDAcBAgb15a0ITFWEQICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQME\n-ASoEEC7w7N9MK45XaZg4OAPhmtWAggSQ2OAIm4D\/rCA94AbcuQCpYxG8Td7v6cbY\n-bnP9twj3Cvt5muXvMV32lMj\/ucXPuICt5lXdBMhHVJ8jxJq3t8GBbJbIpmG\/CzXv\n-ImZa\/Zt4TLBwKKibvaT6LHocCJAh3eRoHiXdje71KeVmu80d+ygl7w5\/fnqc+FO6\n-ypDx2OzcVTDMVnBdT9pD9eLCQQBxA8uvZFuY3C5GTONgE8WpvtqLHhjHLAff0T9N\n-B6eNiFxqP3WVzobcNmOV0H\/6Vn5YUcVk7kk5YtYBbeHo5mq7hkoMKtniQiGMd8Qh\n-GYw6d+OPYBr+CDA\/TsGApUxdqMNsdtyn83BEx\/6y9BA4veWz54DU5o4PqnvV332V\n-ZUa3cD+4r5yfRcM5AFCEOppvK5i\/3aJllCsKn4yVzHpWn6vmL\/qQCZU1epgONmzJ\n-eCAOTPiDKkc5mJc4qj+ILIVuY+m+n\/wNdWgrhr5zGzSGwHgaQMmnhCjF2BlAZL7m\n-neIPDSqBImCVuA3MWPerkhW9SHbIiAXmIUN\/DBI\/fiPlryCSN\/oMujLJgogADtks\n-J4ml2zByChWcepayfpi+YVdIc+eNTjAqrW3iD26mnEqyWPjey+lFfvKmUffNnL46\n-IMeN33WPjMLi0rmxqsPGLpK8rw81TE6qe8d4SXqgZfzV5uQFEOV\/tGZ0QOuXgkc6\n-YAsZlYz7QNdh9I7JhwTup\/j4nPcgM5NJXvRCVq765MCzV\/gdLeO2msuR\/VlvIZon\n-P9HTzqzOkCakT0nV\/bdPAMGAhZt7iprgn1Gb\/XiA9GK+ejeaZfRW4YJ6oqGI\/5gS\n-RNxdf9I5ThC9efFdPM+3WxKun4bSBjJZCBjAkRlse2nQt\/ET51qAt8T1Uw0ON5ch\n-NoHe\/ZE9MNX5\/9bt6T9w86Gh\/Wfzq8K\/93ywlbd7fNOJm\/T8HH9yY1Lm3Hg4PgES\n-feA3VL0JeTWnZu\/ngLQ8JWRKKYjNg0BwejoKRZ3PEpnS1ZUxmjcJlgXGn2SWW99+\n-j\/dQgl80Tn\/IJnAUBwxvDjmoWVvAGLglnNbruCWX\/bjTg4cJyYVeSQ5fEHyi2pU\/\n-+bcvVTK9HuWE7cT9rDP4rWPRaAi4UAB9AShx3jgh\/g2Va8Tqpow1hqS2eSjm+JfQ\n-Bk3Nh6dYDgqLW4OjCTVfRa4hzbNck5zcybY3JtC7jKjok31V87W1jPRveWgXYE0z\n-AZlSRwgnzMujycpXplZ9JMz9QMB7toISVs+ArjN2CZRjLCWRAwLcoKQ7D1A5S8LU\n-PYXk\/y7ovmaSfyN1PYkaelnAuo2zI4YWDM\/LL55het4Y8eCo0zFwLSxDrPz5jW8p\n-A4S1Du5JJ7n52RYmI9+QxwymCUOkWScpIgI\/aM6p4s3xfnqGMZUQy+O0qMsczSw0\n-i9IVx\/C8akDjK\/gMlJePYqil\/WPfEUl5qAkGn9eu2\/kC4XNITiM9xNBDy1d+NvSO\n-8CjBfDd3pOPqjqeM\/dLO660ZZrsvt7LnevJQ+9pq9LeXIrcHpLJp2Oqq5o85lCn7\n-\/eoykT+ghu6L0OhYaIcDNMvxUAXJfVQQ0rMd+q\/72VKdb2HGrB88CjCCAzcGCSqG\n-SIb3DQEHAaCCAygEggMkMIIDIDCCAxwGCyqGSIb3DQEMCgECoIIC0TCCAs0wVwYJ\n-KoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECOnimmypiWZ5AgIIADAMBggqhkiG\n-9w0CCQUAMB0GCWCGSAFlAwQBKgQQLT9O9V8VM45JpgROXv51VgSCAnAbjtRsnqGS\n-hwCR6JP8T3ZpY1LUjZM7P\/X0VcQ+Fq3cxHtY5Bf55+Ha8cQRGwnptlwnfgxILGIn\n-1yseJSkKUTDTIlMpoFfDtLCU0lNWzwhYfbajUxIesYsgFYCYn94MgJ+Vb7MWbbW+\n-KxhqSGWPDicCZ6dY2zNFUt4dnxJ1NYZGS4ZpfDmdh\/bW29vT++Yi1H6Be1Qd+aMj\n-a9+8Yb69AjnglujqOKTlzaXPb1DfnuteZKUZxqt\/6TR1fh28KYxBJ6YvyDzkwhx\/\n-0ksy\/+ItokRWZ9Bb2nmIiss352UtGEi2JOIN+QyOcvSCQCvPucW1DXg53dOhVvEZ\n-Q1NNKvV9w8s8ao0GotqCK6lfu1fHo2yrp5dV3p03Xxzu1jeuZL27oSaHvW6on90s\n-oV0djJUHHtYJOp1YWEOJOSqQsHsvPA4G9YMKx00Rl9P0aVSWTNqN96VjEzHOHyCX\n-lzH5asHLbsTbnvhQHmq1J7Jm3RjncZ+oJOdcvkBoKUnYbqCHJiUOM7McRIEI0VkI\n-0Endzm+U0z8jZxcpvAowgOf\/sWC\/ddr\/1rNRE\/BzVhmqvLfYOkIsvBwm6LpbiOgg\n-fV0VUHZxTSk6uwYLfNQkJ7i\/NQOCAo8MGIHAMi0e5\/FAAE7mN2V2HfWCQOiXjsnD\n-Twb9xztwa6u8tjCXLfW5sws958sxMMM23F61Q6aZcx0k+lc9VaiHgRUjiwKesZjn\n-E3b\/mKSFEIy\/9dqC5SpmIctEmoQWcxNNntSzD6WkA0EP5pw0CoAzMSW2Mzp5D6kD\n-\/0pH6xjs9oaMmoq6SoTphNF9hsJJ\/uXUSVtO8ZrKB0upHGl+Q5lwLeMxODARBgkq\n-hkiG9w0BCRQxBB4CAGEwIwYJKoZIhvcNAQkVMRYEFNHrLDWGDljHU\/wP6M74WxJs\n-Cr9mMGEwUTANBglghkgBZQMEAgMFAARAjFxC6pnq5Gh874xeaWuQ+C9mmRbiqBaL\n-MgfxIfJj3AFVFXGlm7xigHtZGFIrkXNC5croycYgTPMOczulADAOdgQIOFtoK+zm\n-YOMCAggA\n","filename":"test\/jdk\/sun\/security\/pkcs12\/params\/os5","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"}]}