{"files":[{"patch":"@@ -60,25 +60,0 @@\n-class MonitorList {\n-  ObjectMonitor* volatile _head;\n-  volatile size_t _count;\n-  volatile size_t _max;\n-\n-public:\n-  void add(ObjectMonitor* monitor);\n-  size_t unlink_deflated(Thread* self, LogStream* ls, elapsedTimer* timer_p,\n-                         GrowableArray<ObjectMonitor*>* unlinked_list);\n-  size_t count() const;\n-  size_t max() const;\n-\n-  class Iterator;\n-  Iterator iterator() const;\n-};\n-\n-class MonitorList::Iterator {\n-  ObjectMonitor* _current;\n-\n-public:\n-  Iterator(ObjectMonitor* head) : _current(head) {}\n-  bool has_next() const { return _current != NULL; }\n-  ObjectMonitor* next();\n-};\n-\n@@ -240,1 +215,1 @@\n-static MonitorList _in_use_list;\n+MonitorList ObjectSynchronizer::_in_use_list;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -39,0 +39,28 @@\n+class MonitorList {\n+  friend class VMStructs;\n+\n+private:\n+  ObjectMonitor* volatile _head;\n+  volatile size_t _count;\n+  volatile size_t _max;\n+\n+public:\n+  void add(ObjectMonitor* monitor);\n+  size_t unlink_deflated(Thread* self, LogStream* ls, elapsedTimer* timer_p,\n+                         GrowableArray<ObjectMonitor*>* unlinked_list);\n+  size_t count() const;\n+  size_t max() const;\n+\n+  class Iterator;\n+  Iterator iterator() const;\n+};\n+\n+class MonitorList::Iterator {\n+  ObjectMonitor* _current;\n+\n+public:\n+  Iterator(ObjectMonitor* head) : _current(head) {}\n+  bool has_next() const { return _current != NULL; }\n+  ObjectMonitor* next();\n+};\n+\n@@ -154,0 +182,1 @@\n+  static MonitorList _in_use_list;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -893,0 +893,2 @@\n+  static_field(ObjectSynchronizer,             _in_use_list,                                  MonitorList)                           \\\n+  volatile_nonstatic_field(MonitorList,        _head,                                         ObjectMonitor*)                        \\\n@@ -1470,0 +1472,1 @@\n+  declare_toplevel_type(MonitorList)                                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-      gBlockList = type.getAddressField(\"g_block_list\").getValue();\n-      blockSize = db.lookupIntConstant(\"ObjectSynchronizer::_BLOCKSIZE\").intValue();\n+      inUseList = type.getAddressField(\"_in_use_list\").getValue();\n@@ -87,1 +86,1 @@\n-    if (gBlockList != null) {\n+    if (inUseList != null) {\n@@ -96,3 +95,0 @@\n-    \/\/ JVMTI raw monitors are not pointed by gBlockList\n-    \/\/ and are not included by this Iterator. May add them later.\n-\n@@ -100,3 +96,2 @@\n-      blockAddr = gBlockList;\n-      index = blockSize - 1;\n-      block = new ObjectMonitor(blockAddr);\n+      headAddr = inUseList;\n+      block = new ObjectMonitor(headAddr);\n@@ -106,1 +101,1 @@\n-      return (index > 0 || block.nextOM() != null);\n+      return (block.nextOM() != null);\n@@ -110,9 +105,4 @@\n-      Address addr;\n-      if (index == 0) {\n-        \/\/ advance to next block\n-        blockAddr = block.nextOM();\n-        if (blockAddr == null) {\n-          throw new NoSuchElementException();\n-        }\n-        block = new ObjectMonitor(blockAddr);\n-        index = blockSize - 1;\n+      \/\/ advance to next block\n+      Address blockAddr = block.nextOM();\n+      if (blockAddr == null) {\n+        throw new NoSuchElementException();\n@@ -120,3 +110,2 @@\n-      addr = blockAddr.addOffsetTo(index*objectMonitorTypeSize);\n-      index --;\n-      return new ObjectMonitor(addr);\n+      block = new ObjectMonitor(blockAddr);\n+      return block;\n@@ -130,2 +119,1 @@\n-    private int index;\n-    private Address blockAddr;\n+    private Address headAddr;\n@@ -134,2 +122,1 @@\n-  private static Address gBlockList;\n-  private static int blockSize;\n+  private static Address inUseList;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ObjectSynchronizer.java","additions":13,"deletions":26,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import sun.jvm.hotspot.HotSpotAgent;\n+import sun.jvm.hotspot.oops.Oop;\n+import sun.jvm.hotspot.runtime.ObjectMonitor;\n+import sun.jvm.hotspot.runtime.ObjectSynchronizer;\n+import sun.jvm.hotspot.runtime.VM;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+\/**\n+ * @test\n+ * @bug 8259008\n+ * @library \/test\/lib\n+ * @requires vm.hasSA\n+ * @modules jdk.hotspot.agent\/sun.jvm.hotspot\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.oops\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.runtime\n+ * @run main TestObjectMonitorIterate\n+ *\/\n+\n+public class TestObjectMonitorIterate {\n+\n+    private static void test(String pid) {\n+        HotSpotAgent agent = new HotSpotAgent();\n+        try {\n+            agent.attach(Integer.parseInt(pid));\n+\n+            var heap = VM.getVM().getObjectHeap();\n+            var itr = ObjectSynchronizer.objectMonitorIterator();\n+            while (itr.hasNext()) {\n+                ObjectMonitor mon = (ObjectMonitor)itr.next();\n+                Oop oop = heap.newOop(mon.object());\n+                System.out.println(\"Monitor found: \" + oop.getKlass().getName().asString());\n+                return;\n+            }\n+        } finally {\n+            agent.detach();\n+        }\n+        throw new RuntimeException(\"Monitor not found\");\n+    }\n+\n+    private static void createAnotherToAttach(long lingeredAppPid) throws Exception {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+            \"--add-modules=jdk.hotspot.agent\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.oops=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.runtime=ALL-UNNAMED\",\n+            \"TestObjectMonitorIterate\",\n+             Long.toString(lingeredAppPid));\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n+        OutputAnalyzer SAOutput = ProcessTools.executeProcess(processBuilder);\n+        SAOutput.shouldHaveExitValue(0);\n+        System.out.println(SAOutput.getOutput());\n+    }\n+\n+    public static void main (String... args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        if (args == null || args.length == 0) {\n+            LingeredApp app = new LingeredAppWithLock();\n+            try {\n+                LingeredApp.startApp(app, \"-XX:+UsePerfData\");\n+                createAnotherToAttach(app.getPid());\n+            } finally {\n+                LingeredApp.stopApp(app);\n+            }\n+        } else {\n+            test(args[0]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestObjectMonitorIterate.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}