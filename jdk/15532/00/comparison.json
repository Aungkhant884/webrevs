{"files":[{"patch":"@@ -526,1 +526,1 @@\n-\n+            JCCase previousC = null;\n@@ -544,1 +544,1 @@\n-                if (validCaseLabelList && !previousCompletesNormally) {\n+                if (validCaseLabelList && !previousCompletesNormally || c.guard != null) {\n@@ -578,1 +578,2 @@\n-                        if (c.guard != null) {\n+                        boolean hasGuard = c.guard != null;\n+                        if (hasGuard) {\n@@ -588,6 +589,17 @@\n-                        c.stats = c.stats.prepend(make.If(makeUnary(Tag.NOT, test).setType(syms.booleanType),\n-                                                           make.Block(0, List.of(make.Exec(make.Assign(make.Ident(index),\n-                                                                                                       makeLit(syms.intType, i + labels.length()))\n-                                                                                     .setType(syms.intType)),\n-                                                                                 continueSwitch)),\n-                                                           null));\n+\n+                        if (previousC != null && hasGuard && previousCompletesNormally) {\n+                            JCExpression or = make.Literal(false);\n+                            for (JCPatternCaseLabel label: labels) {\n+                                or = makeBinary(Tag.OR, makeTypeTest(make.Ident(temp), make.Type(label.pat.type)), or);\n+                            }\n+                            test = makeBinary(Tag.AND, or, test);\n+                            previousC.stats = previousC.stats.appendList(c.stats); \/\/ copying to previous\n+                        }\n+\n+                        JCIf ifStatement = make.If(makeUnary(Tag.NOT, test).setType(syms.booleanType),\n+                                make.Block(0, List.of(make.Exec(make.Assign(make.Ident(index),\n+                                                        makeLit(syms.intType, i + labels.length()))\n+                                                .setType(syms.intType)),\n+                                        continueSwitch)),\n+                                null);\n+                        c.stats = c.stats.prepend(ifStatement);\n@@ -595,0 +607,1 @@\n+                        previousC = c;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8314226\n+ * @summary Series of colon-style fallthrough switch cases with guards compiled incorrectly\n+ * @enablePreview\n+ * @compile T8314226.java\n+ * @run main T8314226\n+ *\/\n+\n+public class T8314226 {\n+    int multipleGuardedCases(Object obj) {\n+        switch (obj) {\n+            case Integer _ when ((Integer) obj) > 0:\n+            case String _ when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int multipleGuardedCasesMultiplePatterns(Object obj) {\n+        switch (obj) {\n+            case String _ when !((String) obj).isEmpty():\n+            case Integer _, Byte _ when ((Number) obj).intValue() > 0:\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    int singleGuardedCase(Object obj) {\n+        switch (obj) {\n+            case String _ when !((String) obj).isEmpty():\n+                return 1;\n+            default:\n+                return -1;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new T8314226().run();\n+    }\n+\n+    private void run() {\n+        assertEquals(1, multipleGuardedCases(42));\n+        assertEquals(1, multipleGuardedCases(\"test\"));\n+        assertEquals(-1, multipleGuardedCases(\"\"));\n+        assertEquals(1, multipleGuardedCasesMultiplePatterns((byte) 42));\n+        assertEquals(1, multipleGuardedCasesMultiplePatterns(\"test\"));\n+        assertEquals(-1, multipleGuardedCasesMultiplePatterns(\"\"));\n+        assertEquals(-1, singleGuardedCase(42));\n+        assertEquals(1, singleGuardedCase(\"test\"));\n+        assertEquals(-1, singleGuardedCase(\"\"));\n+    }\n+\n+    void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8314226.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}