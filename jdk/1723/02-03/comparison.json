{"files":[{"patch":"@@ -163,1 +163,1 @@\n-    \"Should never try to verify empty queue\") {\n+    \"assert.cur != &_sentinel. failed: Should never try to verify empty queue\") {\n@@ -169,1 +169,1 @@\n-    \"Should never try to verify empty queue\") {\n+    \"assert.cur != &_sentinel. failed: Should never try to verify empty queue\") {\n@@ -175,1 +175,1 @@\n-    \"Not allowed to update time while in queue\") {\n+    \"assert._next == __null. failed: Not allowed to update time while in queue\") {\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-TEST_VM_ASSERT_MSG(metaspace, test_overwriter, \"Corrupt block\") {\n+TEST_VM_ASSERT_MSG(metaspace, test_overwriter, \".*failed: Corrupt block\") {\n","filename":"test\/hotspot\/gtest\/metaspace\/test_allocationGuard.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-TEST_VM_ASSERT_MSG(metaspace, BlockTree_overwriter_test, \"Invalid node\") {\n+TEST_VM_ASSERT_MSG(metaspace, BlockTree_overwriter_test, \".*failed: Invalid node\") {\n","filename":"test\/hotspot\/gtest\/metaspace\/test_blocktree.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                   \"Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n@@ -62,1 +62,1 @@\n-                   \"Attempting to acquire lock mutex_rankB\/50 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankB\/50 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n@@ -92,1 +92,1 @@\n-                   \"Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n@@ -122,1 +122,1 @@\n-                   \"Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n+                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n@@ -138,1 +138,1 @@\n-                   \"Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n+                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n@@ -154,1 +154,1 @@\n-                   \"Attempting to wait on monitor monitor_rank_special_minus_one\/5 while holding lock monitor_rank_special\/6 \"\n+                   \".* Attempting to wait on monitor monitor_rank_special_minus_one\/5 while holding lock monitor_rank_special\/6 \"\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex_rank.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -153,1 +153,2 @@\n-TEST_VM_ASSERT_MSG(os, page_size_for_region_with_zero_min_pages, \"sanity\") {\n+TEST_VM_ASSERT_MSG(os, page_size_for_region_with_zero_min_pages,\n+                   \"assert.min_pages > 0. failed: sanity\") {\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-    \"This lock should always have a safepoint check for Java threads\") {\n+    \"assert.!thread->is_active_Java_thread() || _safepoint_check_required != _safepoint_check_always. failed: \"\n+    \"This lock should always have a safepoint check for Java threads: SFPT_Test_lock\") {\n@@ -40,1 +41,2 @@\n-    \"This lock should never have a safepoint check for Java thread\") {\n+    \"assert._safepoint_check_required != _safepoint_check_never. failed: \"\n+    \"This lock should never have a safepoint check for Java threads: SFPT_Test_lock\") {\n@@ -46,0 +48,1 @@\n+    \"assert._rank > special || _safepoint_check_required == _safepoint_check_never. failed: \"\n@@ -52,1 +55,1 @@\n-    \"Possible safepoint reached by thread that does not allow it\") {\n+    \".* Possible safepoint reached by thread that does not allow it\") {\n","filename":"test\/hotspot\/gtest\/runtime\/test_safepoint_locks.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-                \"^assert failed: .*\" msg);                          \\\n+                \"^assert failed: \" msg);                            \\\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -499,1 +499,1 @@\n-    \"Copying of CHeap arrays not supported\") {\n+    \"assert.!on_C_heap... failed: Copying of CHeap arrays not supported\") {\n@@ -506,1 +506,1 @@\n-    \"Assignment of CHeap arrays not supported\") {\n+    \"assert.!on_C_heap... failed: Assignment of CHeap arrays not supported\") {\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-                  \"memory leak: allocating without ResourceMark\") {\n+                  \"fatal error: memory leak: allocating without ResourceMark\") {\n","filename":"test\/hotspot\/gtest\/utilities\/test_vmerror.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}