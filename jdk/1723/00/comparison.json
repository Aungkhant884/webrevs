{"files":[{"patch":"@@ -293,3 +293,0 @@\n-  product(bool, ExecutingUnitTests, false,                                  \\\n-          \"Whether the JVM is running unit tests or not\")                   \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3803,0 +3803,1 @@\n+#endif\n@@ -3804,0 +3805,1 @@\n+#ifdef ASSERT\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,4 @@\n-  notproduct(uintx, ErrorHandlerTest, 0,                                    \\\n+  product(bool, ExecutingUnitTests, false,                                  \\\n+          \"Whether the JVM is running unit tests or not\")                   \\\n+                                                                            \\\n+  develop(uintx, ErrorHandlerTest, 0,                                       \\\n@@ -500,0 +503,1 @@\n+          range(0, 17)                                                      \\\n@@ -501,1 +505,1 @@\n-  notproduct(uintx, TestCrashInErrorHandler, 0,                             \\\n+  develop(uintx, TestCrashInErrorHandler, 0,                                \\\n@@ -504,0 +508,1 @@\n+          range(0, 17)                                                      \\\n@@ -505,1 +510,1 @@\n-  notproduct(bool, TestSafeFetchInErrorHandler, false,                      \\\n+  develop(bool, TestSafeFetchInErrorHandler, false   ,                      \\\n@@ -508,1 +513,1 @@\n-  notproduct(bool, TestUnresponsiveErrorHandler, false,                     \\\n+  develop(bool, TestUnresponsiveErrorHandler, false,                        \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -241,0 +241,27 @@\n+static char _detail_msg[1024];\n+\n+static void print_error_for_unit_test(const char* message, const char* detail_fmt, va_list detail_args) {\n+#ifdef ASSERT\n+  if (ExecutingUnitTests) {\n+    if (detail_fmt != NULL) {\n+      \/\/ Special handling for the sake of gtest death tests which expect the assert\n+      \/\/ message to be printed in one short line to stderr (see TEST_VM_ASSERT_MSG) and\n+      \/\/ cannot be tweaked to accept our normal assert message.\n+      jio_vsnprintf(_detail_msg, sizeof(_detail_msg), detail_fmt, detail_args);\n+\n+      \/\/ the VM assert tests look for \"assert failed: \"\n+      if (message == NULL) {\n+        fprintf(stderr, \"assert failed: %s\", _detail_msg);\n+      } else {\n+        if (strlen(_detail_msg) > 0) {\n+          fprintf(stderr, \"assert failed: %s: %s\", message, _detail_msg);\n+        } else {\n+          fprintf(stderr, \"assert failed: Error: %s\", message);\n+        }\n+      }\n+      ::fflush(stderr);\n+    }\n+  }\n+#endif \/\/ ASSERT\n+}\n+\n@@ -253,14 +280,1 @@\n-#ifdef ASSERT\n-  if (detail_fmt != NULL && ExecutingUnitTests) {\n-    \/\/ Special handling for the sake of gtest death tests which expect the assert\n-    \/\/ message to be printed in one short line to stderr (see TEST_VM_ASSERT_MSG) and\n-    \/\/ cannot be tweaked to accept our normal assert message.\n-    va_list detail_args_copy;\n-    va_copy(detail_args_copy, detail_args);\n-    ::fputs(\"assert failed: \", stderr);\n-    ::vfprintf(stderr, detail_fmt, detail_args_copy);\n-    ::fputs(\"\\n\", stderr);\n-    ::fflush(stderr);\n-    va_end(detail_args_copy);\n-  }\n-#endif\n+  print_error_for_unit_test(error_msg, detail_fmt, detail_args);\n@@ -288,0 +302,3 @@\n+\n+  print_error_for_unit_test(\"fatal error\", detail_fmt, detail_args);\n+\n@@ -297,0 +314,3 @@\n+\n+  print_error_for_unit_test(NULL, detail_fmt, detail_args);\n+\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -396,0 +396,2 @@\n+DEBUG_ONLY(static void controlled_crash(int how));\n+\n@@ -447,1 +449,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n@@ -506,1 +508,1 @@\n-#endif \/\/ PRODUCT\n+#endif \/\/ ASSERT\n@@ -1740,1 +1742,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n@@ -1773,9 +1775,2 @@\n-\/\/ how can be one of:\n-\/\/ 1,2 - asserts\n-\/\/ 3,4 - guarantee\n-\/\/ 5-7 - fatal\n-\/\/ 8 - vm_exit_out_of_memory\n-\/\/ 9 - ShouldNotCallThis\n-\/\/ 10 - ShouldNotReachHere\n-\/\/ 11 - Unimplemented\n-\/\/ 12,13 - (not guaranteed) crashes\n+\/\/ 1  - assert\n+\/\/ 2  - guarantee\n@@ -1784,1 +1779,1 @@\n-void VMError::controlled_crash(int how) {\n+void controlled_crash(int how) {\n@@ -1787,22 +1782,0 @@\n-  \/\/ If asserts are disabled, use the corresponding guarantee instead.\n-  NOT_DEBUG(if (how <= 2) how += 2);\n-\n-  const char* const str = \"hello\";\n-  const size_t      num = (size_t)os::vm_page_size();\n-\n-  const char* const eol = os::line_separator();\n-  const char* const msg = \"this message should be truncated during formatting\";\n-  char * const dataPtr = NULL;  \/\/ bad data pointer\n-  const void (*funcPtr)(void);  \/\/ bad function pointer\n-\n-#if defined(PPC64) && !defined(ABI_ELFv2)\n-  struct FunctionDescriptor functionDescriptor;\n-\n-  functionDescriptor.set_entry((address) 0xF);\n-  funcPtr = (const void(*)()) &functionDescriptor;\n-#else\n-  funcPtr = (const void(*)()) 0xF;\n-#endif\n-\n-  \/\/ Keep this in sync with test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorHandler.java\n-  \/\/ which tests cases 1 thru 13.\n@@ -1824,24 +1797,4 @@\n-    case  1: vmassert(str == NULL, \"expected null\"); break;\n-    case  2: vmassert(num == 1023 && *str == 'X',\n-                      \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str); break;\n-    case  3: guarantee(str == NULL, \"expected null\"); break;\n-    case  4: guarantee(num == 1023 && *str == 'X',\n-                       \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str); break;\n-    case  5: fatal(\"expected null\"); break;\n-    case  6: fatal(\"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str); break;\n-    case  7: fatal(\"%s%s#    %s%s#    %s%s#    %s%s#    %s%s#    \"\n-                   \"%s%s#    %s%s#    %s%s#    %s%s#    %s%s#    \"\n-                   \"%s%s#    %s%s#    %s%s#    %s%s#    %s\",\n-                   msg, eol, msg, eol, msg, eol, msg, eol, msg, eol,\n-                   msg, eol, msg, eol, msg, eol, msg, eol, msg, eol,\n-                   msg, eol, msg, eol, msg, eol, msg, eol, msg); break;\n-    case  8: vm_exit_out_of_memory(num, OOM_MALLOC_ERROR, \"ChunkPool::allocate\"); break;\n-    case  9: ShouldNotCallThis(); break;\n-    case 10: ShouldNotReachHere(); break;\n-    case 11: Unimplemented(); break;\n-    \/\/ There's no guarantee the bad data pointer will crash us\n-    \/\/ so \"break\" out to the ShouldNotReachHere().\n-    case 12: *dataPtr = '\\0'; break;\n-    \/\/ There's no guarantee the bad function pointer will crash us\n-    \/\/ so \"break\" out to the ShouldNotReachHere().\n-    case 13: (*funcPtr)(); break;\n+    case 1: assert(how == 0, \"test assert\"); break;\n+    case 2: guarantee(how == 0, \"test guarantee\"); break;\n+\n+    \/\/ The other cases are unused.\n@@ -1861,11 +1814,3 @@\n-    case 18: {\n-      \/\/ Check for assert when allocating from resource area without a\n-      \/\/ ResourceMark.  There must not be a ResourceMark on the\n-      \/\/ current stack when invoking this test case.\n-      ResourceArea* area = Thread::current()->resource_area();\n-      assert(area->nesting() == 0, \"unexpected ResourceMark\");\n-      area->allocate_bytes(100);\n-      break;\n-    }\n-\n-    default: tty->print_cr(\"ERROR: %d: unexpected test_num value.\", how);\n+    default:\n+      \/\/ If another number is given, give a generic crash.\n+      fatal(\"Crashing with number %d\", how);\n@@ -1876,1 +1821,1 @@\n-#endif \/\/ !PRODUCT\n+#endif \/\/ !ASSERT\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":16,"deletions":71,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,2 +187,1 @@\n-  NOT_PRODUCT(static void test_error_handler();)\n-  NOT_PRODUCT(static void controlled_crash(int how);)\n+  DEBUG_ONLY(static void test_error_handler();)\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-                \"^assert failed: \" msg);                            \\\n+                \"^assert failed: .*\" msg);                          \\\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"unittest.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/resourceArea.inline.hpp\"\n+#include \"runtime\/thread.hpp\"\n+\n+#ifdef ASSERT\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, resourceMark,\n+                  \"memory leak: allocating without ResourceMark\") {\n+\n+  \/\/ Check for assert when allocating from resource area without a\n+  \/\/ ResourceMark.  There must not be a ResourceMark on the\n+  \/\/ current stack when invoking this test case.\n+  ResourceArea* area = Thread::current()->resource_area();\n+  assert(area->nesting() == 0, \"unexpected ResourceMark\");\n+  area->allocate_bytes(100);\n+}\n+\n+const char* const str = \"hello\";\n+const size_t      num = 500;\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, assert1, \"assert.str == NULL. failed: expected null\") {\n+  vmassert(str == NULL, \"expected null\");\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, assert2, \"assert.num == 1023 && .str == 'X'. failed: num=500 str=\\\"hello\\\"\") {\n+  vmassert(num == 1023 && *str == 'X',\n+           \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, guarantee1, \"guarantee.str == NULL. failed: expected null\") {\n+  guarantee(str == NULL, \"expected null\");\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, guarantee2, \"guarantee.num == 1023 && .str == 'X'. failed: num=500 str=\\\"hello\\\"\") {\n+  guarantee(num == 1023 && *str == 'X',\n+            \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, fatal1, \"fatal error: expected null\") {\n+  fatal(\"expected null\");\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, fatal2, \"fatal error: num=500 str=\\\"hello\\\"\") {\n+  fatal(\"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, fatal3, \"fatal error: this message should be truncated during formatting\") {\n+  const char* const eol = os::line_separator();\n+  const char* const msg = \"this message should be truncated during formatting\";\n+  fatal(\"%s%s#    %s%s#    %s%s#    %s%s#    %s%s#    \"\n+        \"%s%s#    %s%s#    %s%s#    %s%s#    %s%s#    \"\n+        \"%s%s#    %s%s#    %s%s#    %s%s#    %s\",\n+        msg, eol, msg, eol, msg, eol, msg, eol, msg, eol,\n+        msg, eol, msg, eol, msg, eol, msg, eol, msg, eol,\n+        msg, eol, msg, eol, msg, eol, msg, eol, msg);\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, out_of_memory1, \"ChunkPool::allocate\") {\n+  const size_t      num = (size_t)os::vm_page_size();\n+  vm_exit_out_of_memory(num, OOM_MALLOC_ERROR, \"ChunkPool::allocate\");\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, shouldnotcallthis1, \"Error: ShouldNotCall\") {\n+  ShouldNotCallThis();\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, shouldnotreachhere1, \"Error: ShouldNotReachHere\") {\n+  ShouldNotReachHere();\n+}\n+\n+TEST_VM_ASSERT_MSG(vmErrorTest, unimplemented1, \"Error: Unimplemented\") {\n+  Unimplemented();\n+}\n+#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/utilities\/test_vmerror.cpp","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -279,1 +279,0 @@\n- -runtime\/ErrorHandling\/ErrorHandler.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @requires (vm.debug == true)\n- * @bug 6888954\n- * @bug 8015884\n- * @summary Exercise HotSpot error handling code by invoking java with\n- *          -XX:ErrorHandlerTest option to cause an error report. Check the results.\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run driver ErrorHandler\n- *\/\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class ErrorHandler {\n-\n-    public static OutputAnalyzer runTest(int testcase) throws Exception {\n-        \/\/ The -XX:ErrorHandlerTest=N option requires debug bits.\n-        return new OutputAnalyzer(\n-            ProcessTools.createJavaProcessBuilder(\n-            \"-XX:-CreateCoredumpOnCrash\", \"-XX:ErrorHandlerTest=\" + testcase)\n-            .start());\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Keep this in sync with hotspot\/src\/share\/vm\/utilities\/debug.cpp\n-        int i = 1;\n-        String[] strings = {\n-            \"assert(str == NULL) failed: expected null\",\n-            \"assert(num == 1023 && *str == 'X') failed: num=\",\n-            \"guarantee(str == NULL) failed: expected null\",\n-            \"guarantee(num == 1023 && *str == 'X') failed: num=\",\n-            \"fatal error: expected null\",\n-            \"fatal error: num=\",\n-            \"fatal error: this message should be truncated during formatting\",\n-            \"ChunkPool::allocate\",\n-            \"Error: ShouldNotCall()\",\n-            \"Error: ShouldNotReachHere()\",\n-            \"Error: Unimplemented()\"\n-        };\n-\n-        String[] patterns = {\n-            \"(SIGILL|SIGSEGV|EXCEPTION_ACCESS_VIOLATION).* at pc=\",\n-            \/\/ -XX:ErrorHandlerTest=13 is too unreliable. It sometimes fails to crash in the expected way.\n-            \/\/ -XX:ErrorHandlerTest=14 is tested by SafeFetchInErrorHandlingTest.java\n-            \/\/ -XX:ErrorHandlerTest=15 is tested by SecondaryErrorTest.java\n-            \/\/ -XX:ErrorHandlerTest=16 is tested by ThreadsListHandleInErrorHandlingTest.java\n-            \/\/ -XX:ErrorHandlerTest=17 is tested by NestedThreadsListHandleInErrorHandlingTest.java\n-        };\n-\n-        for (String s : strings) {\n-            runTest(i++).shouldContain(s);\n-        }\n-\n-        for (String p : patterns) {\n-            runTest(i++).shouldMatch(p);\n-        }\n-\n-        \/\/ Tests after here could be handled by above iterations, but doing\n-        \/\/ so would renumber ErrorHandlerTest cases, requiring updates a\n-        \/\/ bunch of other test programs.\n-\n-        runTest(18).shouldContain(\"memory leak: allocating without ResourceMark\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorHandler.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -59,1 +59,1 @@\n-            \"-XX:ErrorHandlerTest=\" + (do_assert ? \"1\" : \"3\"),\n+            \"-XX:ErrorHandlerTest=\" + (do_assert ? \"1\" : \"2\"),\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ShowRegistersOnAssertTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-           \"-XX:ErrorHandlerTest=12\", \/\/ trigger potential SEGV\n+           \"-XX:ErrorHandlerTest=14\", \/\/ trigger potential SEGV\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}