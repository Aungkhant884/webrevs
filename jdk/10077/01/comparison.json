{"files":[{"patch":"@@ -170,1 +170,1 @@\n-      DISABLED_WARNINGS=\"4800\"\n+      DISABLED_WARNINGS=\"4800 5105\"\n@@ -542,4 +542,0 @@\n-  # Ideally we would have a common level across all toolchains so that all sources\n-  # are sure to conform to the same standard. Unfortunately neither our sources nor\n-  # our toolchains are in a condition to support that. But what we loosely aim for is\n-  # C99 level.\n@@ -547,2 +543,1 @@\n-    # Explicitly set C99. clang and xlclang support the same flag.\n-    LANGSTD_CFLAGS=\"-std=c99\"\n+    LANGSTD_CFLAGS=\"-std=c11\"\n@@ -550,6 +545,8 @@\n-    # MSVC doesn't support C99\/C11 explicitly, unless you compile as C++:\n-    # LANGSTD_CFLAGS=\"-TP\"\n-    # but that requires numerous changes to the sources files. So we are limited\n-    # to C89\/C90 plus whatever extensions Visual Studio has decided to implement.\n-    # This is the lowest bar for shared code.\n-    LANGSTD_CFLAGS=\"\"\n+    if test \"x$TOOLCHAIN_VERSION\" != x2017; then\n+      LANGSTD_CFLAGS=\"-std:c11\"\n+    else\n+      # Visual Studio 2017 does not support the full C11, nor any other well-defined C standard.\n+      # We use the default, which is roughly C89 + certain chosen extensions. VS2017 will need to\n+      # be retired if we get a C11 construct in the source code that it cannot handle.\n+      LANGSTD_CFLAGS=\"\"\n+    fi\n","filename":"make\/autoconf\/flags-cflags.m4","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"}]}