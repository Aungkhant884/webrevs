{"files":[{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 4680160\n- * @summary The deprecated Thread.stop exposes un-checked JNI calls\n- *          that result in crashes when NULL is passed into subsequent\n- *          JNI calls.\n- *\/\n-\n-import java.net.*;\n-import java.io.IOException;\n-\n-public class ThreadStop {\n-\n-    static class Server implements Runnable {\n-\n-        ServerSocket ss;\n-\n-        Server() throws IOException {\n-            ss = new ServerSocket();\n-            ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n-        }\n-\n-        public int localPort() {\n-            return ss.getLocalPort();\n-        }\n-\n-\n-        public void run() {\n-            try {\n-                Socket s = ss.accept();\n-            } catch (IOException ioe) {\n-            } catch (ThreadDeath x) {\n-            } finally {\n-                try {\n-                    ss.close();\n-                } catch (IOException x) { }\n-            }\n-        }\n-    }\n-\n-    public static void main(String args[]) throws Exception {\n-\n-        \/\/ start a server\n-        Server svr = new Server();\n-        Thread thr = new Thread(svr);\n-        thr.start();\n-\n-        \/\/ give server time to block in ServerSocket.accept()\n-        Thread.sleep(2000);\n-\n-        \/\/ \"stop\" the thread\n-        thr.stop();\n-\n-        \/\/ give thread time to stop\n-        Thread.sleep(2000);\n-\n-        \/\/ it's platform specific if Thread.stop interrupts the\n-        \/\/ thread - on Linux\/Windows most likely that thread is\n-        \/\/ still in accept() so we connect to server which causes\n-        \/\/ it to unblock and do JNI-stuff with a pending exception\n-\n-        try (Socket s = new Socket(svr.ss.getInetAddress(), svr.localPort())) {\n-        } catch (IOException ioe) {\n-        }\n-        thr.join();\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/net\/ServerSocket\/ThreadStop.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"}]}