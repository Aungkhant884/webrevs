{"files":[{"patch":"@@ -1368,2 +1368,9 @@\n-        int[][] Ke = new int[ROUNDS + 1][4]; \/\/ encryption round keys\n-        int[][] Kd = new int[ROUNDS + 1][4]; \/\/ decryption round keys\n+        int[][] Ke = new int[ROUNDS + 1][]; \/\/ encryption round keys\n+        int[][] Kd = new int[ROUNDS + 1][]; \/\/ decryption round keys\n+\n+        \/\/ It is significantly faster to allocate individual arrays,\n+        \/\/ instead of doing the multi-array allocation. See JDK-8308105.\n+        for (int c = 0; c < ROUNDS + 1; c++) {\n+            Ke[c] = new int[4];\n+            Kd[c] = new int[4];\n+        }\n@@ -1447,0 +1454,2 @@\n+        } else {\n+            sessionK = new int[2][];\n@@ -1448,1 +1457,2 @@\n-        sessionK = new int[][] { expandedKe, expandedKd };\n+        sessionK[0] = expandedKe;\n+        sessionK[1] = expandedKd;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESCrypt.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-Xms1g\", \"-Xmx1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+public class AESReinit {\n+\n+    private Cipher cipher;\n+    private Random random;\n+\n+    byte[] key = new byte[16];\n+    byte[] iv  = new byte[16];\n+\n+    @Setup\n+    public void prepare() throws Exception {\n+        random = new Random();\n+        cipher = Cipher.getInstance(\"AES\/GCM\/NoPadding\");\n+        key = new byte[16];\n+        iv = new byte[16];\n+    }\n+\n+    @Benchmark\n+    public void test() throws Exception {\n+        random.nextBytes(key);\n+        random.nextBytes(iv);\n+        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n+        GCMParameterSpec param = new GCMParameterSpec(128, iv);\n+        cipher.init(Cipher.ENCRYPT_MODE, secretKey, param);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/AESReinit.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}