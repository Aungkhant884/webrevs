{"files":[{"patch":"@@ -1064,31 +1064,0 @@\n-    \/**\n-     * Expand an int[(ROUNDS+1)][4] into int[(ROUNDS+1)*4].\n-     * For decryption round keys, need to rotate right by 4 ints.\n-     * @param kr The round keys for encryption or decryption.\n-     * @param decrypting True if 'kr' is for decryption and false otherwise.\n-     *\/\n-    private static final int[] expandToSubKey(int[][] kr, boolean decrypting) {\n-        int total = kr.length;\n-        int[] expK = new int[total*4];\n-        if (decrypting) {\n-            \/\/ decrypting, rotate right by 4 ints\n-            \/\/ i.e. i==0\n-            for(int j=0; j<4; j++) {\n-                expK[j] = kr[total-1][j];\n-            }\n-            for(int i=1; i<total; i++) {\n-                for(int j=0; j<4; j++) {\n-                    expK[i*4 + j] = kr[i-1][j];\n-                }\n-            }\n-        } else {\n-            \/\/ encrypting, straight expansion\n-            for(int i=0; i<total; i++) {\n-                for(int j=0; j<4; j++) {\n-                    expK[i*4 + j] = kr[i][j];\n-                }\n-            }\n-        }\n-        return expK;\n-    }\n-\n@@ -1364,2 +1333,1 @@\n-        int ROUNDS          = getRounds(k.length);\n-        int ROUND_KEY_COUNT = (ROUNDS + 1) * 4;\n+        final int BC = 4;\n@@ -1367,3 +1335,2 @@\n-        int BC = 4;\n-        int[][] Ke = new int[ROUNDS + 1][]; \/\/ encryption round keys\n-        int[][] Kd = new int[ROUNDS + 1][]; \/\/ decryption round keys\n+        int ROUNDS          = getRounds(k.length);\n+        int ROUND_KEY_COUNT = (ROUNDS + 1) * BC;\n@@ -1371,6 +1338,2 @@\n-        \/\/ It is significantly faster to allocate individual arrays,\n-        \/\/ instead of doing the multi-array allocation. See JDK-8308105.\n-        for (int c = 0; c < ROUNDS + 1; c++) {\n-            Ke[c] = new int[4];\n-            Kd[c] = new int[4];\n-        }\n+        int[] Ke = new int[ROUND_KEY_COUNT]; \/\/ encryption round keys\n+        int[] Kd = new int[ROUND_KEY_COUNT]; \/\/ decryption round keys\n@@ -1394,2 +1357,2 @@\n-            Ke[t \/ 4][t % 4] = tk[j];\n-            Kd[ROUNDS - (t \/ 4)][t % 4] = tk[j];\n+            Ke[t] = tk[j];\n+            Kd[(ROUNDS - (t \/ BC))*BC + (t % BC)] = tk[j];\n@@ -1419,2 +1382,2 @@\n-                Ke[t \/ 4][t % 4] = tk[j];\n-                Kd[ROUNDS - (t \/ 4)][t % 4] = tk[j];\n+                Ke[t] = tk[j];\n+                Kd[(ROUNDS - (t \/ BC))*BC + (t % BC)] = tk[j];\n@@ -1426,5 +1389,6 @@\n-                tt = Kd[r][j];\n-                Kd[r][j] = U1[(tt >>> 24) & 0xFF] ^\n-                           U2[(tt >>> 16) & 0xFF] ^\n-                           U3[(tt >>>  8) & 0xFF] ^\n-                           U4[ tt         & 0xFF];\n+                int idx = r*BC + j;\n+                tt = Kd[idx];\n+                Kd[idx] = U1[(tt >>> 24) & 0xFF] ^\n+                          U2[(tt >>> 16) & 0xFF] ^\n+                          U3[(tt >>>  8) & 0xFF] ^\n+                          U4[ tt         & 0xFF];\n@@ -1434,4 +1398,12 @@\n-        \/\/ assemble the encryption (Ke) and decryption (Kd) round keys\n-        \/\/ and expand them into arrays of ints.\n-        int[] expandedKe = expandToSubKey(Ke, false); \/\/ decrypting==false\n-        int[] expandedKd = expandToSubKey(Kd, true);  \/\/ decrypting==true\n+        \/\/ For decryption round keys, need to rotate right by 4 ints.\n+        \/\/ Do that without allocating and zeroing the small buffer.\n+        int KdTail_0 = Kd[Kd.length - 4];\n+        int KdTail_1 = Kd[Kd.length - 3];\n+        int KdTail_2 = Kd[Kd.length - 2];\n+        int KdTail_3 = Kd[Kd.length - 1];\n+        System.arraycopy(Kd, 0, Kd, 4, Kd.length - 4);\n+        Kd[0] = KdTail_0;\n+        Kd[1] = KdTail_1;\n+        Kd[2] = KdTail_2;\n+        Kd[3] = KdTail_3;\n+\n@@ -1439,6 +1411,0 @@\n-        for (int[] ia: Ke) {\n-            Arrays.fill(ia, 0);\n-        }\n-        for (int[] ia: Kd) {\n-            Arrays.fill(ia, 0);\n-        }\n@@ -1457,2 +1423,2 @@\n-        sessionK[0] = expandedKe;\n-        sessionK[1] = expandedKd;\n+        sessionK[0] = Ke;\n+        sessionK[1] = Kd;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESCrypt.java","additions":29,"deletions":63,"binary":false,"changes":92,"status":"modified"}]}