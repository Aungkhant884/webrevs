{"files":[{"patch":"@@ -1674,0 +1674,35 @@\n+        new Command(\"threadcontext\", \"threadcontext [-v] { -a | id }\", false) {\n+            public void doit(Tokens t) {\n+                boolean verbose = false;\n+                if (t.countTokens() == 2) {\n+                    if (t.nextToken().equals(\"-v\")) {\n+                        verbose = true;\n+                    } else {\n+                        usage();\n+                        return;\n+                    }\n+                }\n+                if (t.countTokens() != 1) {\n+                    usage();\n+                    return;\n+                }\n+                String id = t.nextToken();\n+                Threads threads = VM.getVM().getThreads();\n+                boolean all = id.equals(\"-a\");\n+                for (int i = 0; i < threads.getNumberOfThreads(); i++) {\n+                    JavaThread thread = threads.getJavaThreadAt(i);\n+                    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                    thread.printThreadIDOn(new PrintStream(bos));\n+                    if (all || bos.toString().equals(id)) {\n+                        out.format(\"Thread \\\"%s\\\" id=%s Address=%s\\n\",\n+                                   thread.getThreadName(), bos.toString(), thread.getAddress());\n+                        thread.printThreadContextOn(out, verbose);\n+                        out.println(\" \");\n+                        if (!all) return;\n+                    }\n+                }\n+                if (!all) {\n+                    out.println(\"Couldn't find thread \" + id);\n+                }\n+            }\n+        },\n@@ -1679,1 +1714,1 @@\n-                    String name = t.nextToken();\n+                    String id = t.nextToken();\n@@ -1681,1 +1716,1 @@\n-                    boolean all = name.equals(\"-a\");\n+                    boolean all = id.equals(\"-a\");\n@@ -1686,1 +1721,1 @@\n-                        if (all || bos.toString().equals(name)) {\n+                        if (all || bos.toString().equals(id)) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -484,0 +484,19 @@\n+  \/\/ Print the contents of all registers in the thread's context\n+  public void printThreadContextOn(PrintStream out, boolean verbose){\n+    ThreadContext tc = getThreadProxy().getContext();\n+    for (int r = 0; r < tc.getNumRegisters(); r++) {\n+      Address regAddr = tc.getRegisterAsAddress(r);\n+      System.out.format(\"Register(%s): %s\", tc.getRegisterName(r), regAddr);\n+      if (regAddr == null) {\n+        System.out.println();\n+      } else {\n+        PointerLocation l = PointerFinder.find(regAddr);\n+        if (l.isUnknown()) {\n+          System.out.println();\n+        } else {\n+          System.out.print(\": \");\n+          l.printOn(System.out, false, verbose);\n+        }\n+      }\n+    }\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaThread.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8190198\n+ * @summary Test clhsdb where command\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbThreadContext\n+ *\/\n+\n+public class ClhsdbThreadContext {\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting ClhsdbThreadContext test\");\n+\n+        LingeredApp theApp = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            theApp = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+\n+            \/\/ Run threadcontext on all threads\n+            String cmdStr = \"threadcontext -a\";\n+            List<String> cmds = List.of(cmdStr);\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            expStrMap.put(cmdStr, List.of(\n+                    \"Thread \\\"Common-Cleaner\\\"\",\n+                    \"Thread \\\"Service Thread\\\"\",\n+                    \"Thread \\\"Finalizer\\\"\",\n+                    \"Thread \\\"SteadyStateThread\\\"\",\n+                    \"In java stack for thread \\\"SteadyStateThread\\\"\"));\n+            String cmdOutput = test.run(theApp.getPid(), cmds, expStrMap, null);\n+\n+            \/\/ Run threadcontext on all threads in verbose mode\n+            cmdStr = \"threadcontext -v -a\";\n+            cmds = List.of(cmdStr);\n+            expStrMap = new HashMap<>();\n+            expStrMap.put(cmdStr, List.of(\n+                    \"Thread \\\"Common-Cleaner\\\"\",\n+                    \"Thread \\\"Service Thread\\\"\",\n+                    \"Thread \\\"Finalizer\\\"\",\n+                    \"Thread \\\"SteadyStateThread\\\"\"));\n+            Map<String, List<String>> unexpStrMap = new HashMap<>();\n+            unexpStrMap.put(cmdStr, List.of(\n+                    \"In java stack for thread \\\"SteadyStateThread\\\"\"));\n+            test.run(theApp.getPid(), cmds, expStrMap, unexpStrMap);\n+\n+            \/\/ Look for a line like the following and parse the threadID out of it.\n+            \/\/    Thread \"SteadyStateThread\" id=18010 Address=0x000014bf103eaf50\n+            String[] parts = cmdOutput.split(\"Thread \\\"SteadyStateThread\\\" id=\");\n+            String[] tokens = parts[1].split(\" \");\n+            String threadID = tokens[0];\n+\n+            \/\/ Run threadcontext on the SteadyStateThread in verbose mode\n+            cmdStr = \"threadcontext -v \" + threadID;\n+            cmds = List.of(cmdStr);\n+            expStrMap = new HashMap<>();\n+            expStrMap.put(cmdStr, List.of(\n+                    \"Thread \\\"SteadyStateThread\\\"\",\n+                    \"java.lang.Thread.State: BLOCKED\",\n+                    \"In java stack \\\\[0x\\\\p{XDigit}+,0x\\\\p{XDigit}+,0x\\\\p{XDigit}+\\\\] for thread\"));\n+            unexpStrMap = new HashMap<>();\n+            unexpStrMap.put(cmdStr, List.of(\n+                    \"Thread \\\"Common-Cleaner\\\"\",\n+                    \"Thread \\\"Service Thread\\\"\",\n+                    \"Thread \\\"Finalizer\\\"\"));\n+            test.run(theApp.getPid(), cmds, expStrMap, unexpStrMap);\n+\n+            \/\/ Run threadcontext on all threads in verbose mode\n+\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbThreadContext.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}