{"files":[{"patch":"@@ -208,2 +208,0 @@\n-    uint _chunk_length;\n-\n@@ -214,0 +212,1 @@\n+    static constexpr uint num_cards_per_worker = M;\n@@ -217,1 +216,0 @@\n-                         uint chunk_length,\n@@ -222,1 +220,0 @@\n-      _chunk_length(chunk_length),\n@@ -224,4 +221,1 @@\n-      _scan_state(scan_state) {\n-\n-      assert(chunk_length > 0, \"must be\");\n-    }\n+      _scan_state(scan_state) {}\n@@ -236,2 +230,0 @@\n-      return ((double)align_up((size_t)num_regions << HeapRegion::LogCardsPerRegion, chunk_size()) \/ chunk_size());\n-    }\n@@ -239,0 +231,3 @@\n+      double num_cards = num_regions << HeapRegion::LogCardsPerRegion;\n+      return ceil(num_cards \/ num_cards_per_worker);\n+    }\n@@ -247,2 +242,0 @@\n-    static uint chunk_size() { return M; }\n-\n@@ -250,0 +243,2 @@\n+      const uint num_regions_per_worker = num_cards_per_worker \/ (uint) HeapRegion::CardsPerRegion;\n+\n@@ -251,2 +246,2 @@\n-        uint next = Atomic::fetch_and_add(&_cur_dirty_regions, _chunk_length);\n-        uint max = MIN2(next + _chunk_length, _regions->size());\n+        uint next = Atomic::fetch_and_add(&_cur_dirty_regions, num_regions_per_worker);\n+        uint max = MIN2(next + num_regions_per_worker, _regions->size());\n@@ -371,3 +366,1 @@\n-    uint const chunk_length = G1ClearCardTableTask::chunk_size() \/ (uint)HeapRegion::CardsPerRegion;\n-\n-    return new G1ClearCardTableTask(G1CollectedHeap::heap(), _all_dirty_regions, chunk_length, this);\n+    return new G1ClearCardTableTask(G1CollectedHeap::heap(), _all_dirty_regions, this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"}]}