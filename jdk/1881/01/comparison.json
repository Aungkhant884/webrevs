{"files":[{"patch":"@@ -5492,2 +5492,1 @@\n-                checkForDeclarationAnnotations(tree.recvparam.mods.annotations,\n-                        tree.recvparam.vartype.type.tsym);\n+                checkForDeclarationAnnotations(tree.recvparam.mods.annotations, tree.recvparam.sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8239596\n+ * @summary PARAMETER annotation on receiver type should cause error\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TestParameterAnnotationOnReceiverType\n+ *\/\n+\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class TestParameterAnnotationOnReceiverType extends TestRunner {\n+    ToolBox tb;\n+\n+    public TestParameterAnnotationOnReceiverType() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestParameterAnnotationOnReceiverType t = new TestParameterAnnotationOnReceiverType();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testReceiverTypeDoesNotCauseError() throws Exception {\n+        String code = \"\"\"\n+                import java.lang.annotation.ElementType;\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+                import java.lang.annotation.Target;\n+                class Test8239596 {\n+                    @Retention(RetentionPolicy.RUNTIME)\n+                    @Target({ElementType.TYPE_USE})\n+                    @interface TypeUse { }\n+\n+                    @Retention(RetentionPolicy.RUNTIME)\n+                    @Target({ElementType.PARAMETER})\n+                    @interface Param { }\n+\n+                    public void test(@TypeUse @Param Test8239596 this) { }\n+                }\"\"\";\n+\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"Test8239596.java:14:31: compiler.err.annotation.type.not.applicable.to.type: Test8239596.Param\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/TestParameterAnnotationOnReceiverType.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}