{"files":[{"patch":"@@ -35,1 +35,1 @@\n-  intptr_t* sp = last_Java_sp();\n+  intptr_t* sp = Atomic::load_acquire(&_anchor._last_Java_sp);\n@@ -38,6 +38,0 @@\n-  \/\/ Last_Java_pc is not set, if we come here from compiled code.\n-  \/\/ Assume spill slot for link register contains a suitable pc.\n-  \/\/ Should have been filled by method entry code.\n-  if (pc == NULL)\n-    pc =  (address) *(sp + 2);\n-\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  intptr_t* sp = last_Java_sp();\n+  intptr_t* sp = Atomic::load_acquire(&_anchor._last_Java_sp);\n@@ -37,7 +37,0 @@\n-  \/\/ Last_Java_pc is not set, if we come here from compiled code.\n-  \/\/ Assume spill slot for link register contains a suitable pc.\n-  \/\/ Should have been filled by method entry code.\n-  if (pc == NULL) {\n-    pc = (address) *(sp + 2);\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -696,1 +696,1 @@\n-  guarantee(!may_yield || cl.is_complete(), \"Must have completed iteration when not yielding.\");\n+  guarantee(may_yield || cl.is_complete(), \"Must have completed iteration when not yielding.\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+ private:\n+  Thread* const _thread;\n@@ -159,1 +161,1 @@\n-  ExclusiveOp(Operation& operation) : MutexedWriteOp<Operation>(operation) {}\n+  ExclusiveOp(Operation& operation);\n@@ -184,0 +186,2 @@\n+ private:\n+  Thread* const _thread;\n@@ -186,1 +190,1 @@\n-  ExclusiveDiscardOp(jfr_operation_mode mode = concurrent) : DiscardOp<Operation>(mode) {}\n+  ExclusiveDiscardOp(jfr_operation_mode mode = concurrent);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-static void retired_sensitive_acquire(Type* t) {\n+static void retired_sensitive_acquire(Type* t, Thread* thread) {\n@@ -96,0 +96,2 @@\n+  assert(thread != nullptr, \"invariant\");\n+  assert(thread == Thread::current(), \"invariant\");\n@@ -99,1 +101,0 @@\n-  Thread* const thread = Thread::current();\n@@ -107,0 +108,3 @@\n+template <typename Operation>\n+inline ExclusiveOp<Operation>::ExclusiveOp(Operation& operation) : MutexedWriteOp<Operation>(operation), _thread(Thread::current()) {}\n+\n@@ -109,1 +113,1 @@\n-  retired_sensitive_acquire(t);\n+  retired_sensitive_acquire(t, _thread);\n@@ -111,1 +115,1 @@\n-  \/\/ User is required to ensure proper release of the acquisition\n+  \/\/ The user is required to ensure proper release of the acquisition.\n@@ -136,0 +140,3 @@\n+template <typename Operation>\n+inline ExclusiveDiscardOp<Operation>::ExclusiveDiscardOp(jfr_operation_mode mode) : DiscardOp<Operation>(mode), _thread(Thread::current()) {}\n+\n@@ -138,1 +145,1 @@\n-  retired_sensitive_acquire(t);\n+  retired_sensitive_acquire(t, _thread);\n@@ -140,1 +147,1 @@\n-  \/\/ User is required to ensure proper release of the acquisition\n+  \/\/ The user is required to ensure proper release of the acquisition.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -4354,0 +4354,3 @@\n+                    while (pat instanceof JCParenthesizedPattern parenthesized) {\n+                        pat = parenthesized.pattern;\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n-\n-\n-serviceability\/sa\/TestJhsdbJstackMixed.java 8248675 linux-aarch64\n-\n@@ -40,0 +36,2 @@\n+serviceability\/sa\/TestJhsdbJstackMixed.java 8248675 linux-aarch64\n+\n@@ -41,0 +39,1 @@\n+serviceability\/jvmti\/GetLocalVariable\/GetLocalWithoutSuspendTest.java 8290013 windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -757,0 +757,1 @@\n+jdk\/jfr\/api\/consumer\/TestRecordingFileWrite.java                8287699 linux-x64,macosx-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}