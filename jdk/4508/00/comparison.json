{"files":[{"patch":"@@ -797,1 +797,1 @@\n-          if (compilation()->profile_branches() || compilation()->count_backedges()) {\n+          if (compilation()->profile_branches() || compilation()->is_profiling()) {\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-  virtual bool is_range_check_stub() const       { return false; }\n-  virtual bool is_divbyzero_stub() const         { return false; }\n@@ -70,9 +68,1 @@\n-  virtual void visit(LIR_OpVisitState* visit) {\n-#ifndef PRODUCT\n-    if (LIRTracePeephole && Verbose) {\n-      tty->print(\"no visitor for \");\n-      print_name(tty);\n-      tty->cr();\n-    }\n-#endif\n-  }\n+  virtual void visit(LIR_OpVisitState* visit) = 0;\n@@ -184,1 +174,0 @@\n-  virtual bool is_range_check_stub() const       { return true; }\n@@ -227,1 +216,0 @@\n-  virtual bool is_divbyzero_stub() const         { return true; }\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -231,2 +231,0 @@\n-  bool count_invocations() { return is_profiling(); }\n-  bool count_backedges()   { return is_profiling(); }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"c1\/c1_Defs.hpp\"\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Defs.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -3054,1 +3054,1 @@\n-  if (std_entry->number_of_preds() > 0 || count_invocations() || count_backedges() || RangeCheckElimination) {\n+  if (std_entry->number_of_preds() > 0 || is_profiling() || RangeCheckElimination) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -392,2 +392,0 @@\n-  bool count_invocations()     { return _compilation->count_invocations();     }\n-  bool count_backedges()       { return _compilation->count_backedges();       }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -406,1 +406,0 @@\n-    case lir_backwardbranch_target:    \/\/ result and info always invalid\n@@ -1640,1 +1639,0 @@\n-     case lir_backwardbranch_target: s = \"backbranch\";    break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -891,1 +891,0 @@\n-      , lir_backwardbranch_target\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3371,1 +3371,1 @@\n-  if (compilation()->count_backedges()) {\n+  if (compilation()->is_profiling()) {\n@@ -3759,7 +3759,0 @@\n-\n-LIR_Opr LIRGenerator::maybe_mask_boolean(StoreIndexed* x, LIR_Opr array, LIR_Opr value, CodeEmitInfo*& null_check_info) {\n-  if (x->check_boolean()) {\n-    value = mask_boolean(array, value, null_check_info);\n-  }\n-  return value;\n-}\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-    if (compilation()->count_invocations()) {\n+    if (compilation()->is_profiling()) {\n@@ -405,1 +405,1 @@\n-    if (compilation()->count_backedges()) {\n+    if (compilation()->is_profiling()) {\n@@ -411,1 +411,1 @@\n-    if (compilation()->count_backedges()) {\n+    if (compilation()->is_profiling()) {\n@@ -431,3 +431,0 @@\n-  void bind_block_entry(BlockBegin* block);\n-  void start_block(BlockBegin* block);\n-\n@@ -472,1 +469,0 @@\n-  void do_ClassIDIntrinsic(Intrinsic* x);\n@@ -485,1 +481,0 @@\n-  LIR_Opr maybe_mask_boolean(StoreIndexed* x, LIR_Opr array, LIR_Opr value, CodeEmitInfo*& null_check_info);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"c1\/c1_ValueSet.inline.hpp\"\n+#include \"c1\/c1_ValueSet.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"c1\/c1_ValueSet.inline.hpp\"\n+#include \"c1\/c1_ValueSet.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"c1\/c1_ValueSet.hpp\"\n-\n","filename":"src\/hotspot\/share\/c1\/c1_ValueSet.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/bitMap.inline.hpp\"\n@@ -42,1 +43,1 @@\n-  ValueSet();\n+  ValueSet() : _map(Instruction::number_of_instructions()) {}\n@@ -44,9 +45,13 @@\n-  ValueSet* copy();\n-  bool contains(Value x);\n-  void put     (Value x);\n-  void remove  (Value x);\n-  bool set_intersect(ValueSet* other);\n-  void set_union(ValueSet* other);\n-  void clear   ();\n-  void set_from(ValueSet* other);\n-  bool equals  (ValueSet* other);\n+  ValueSet* copy() {\n+    ValueSet* res = new ValueSet();\n+    res->_map.set_from(_map);\n+    return res;\n+  }\n+  bool contains(Value x)              { return _map.at(x->id()); }\n+  void put(Value x)                   { _map.set_bit(x->id()); }\n+  void remove(Value x)                { _map.clear_bit(x->id()); }\n+  bool set_intersect(ValueSet* other) { return _map.set_intersection_with_result(other->_map); }\n+  void set_union(ValueSet* other)     { _map.set_union(other->_map); }\n+  void clear()                        { _map.clear(); }\n+  void set_from(ValueSet* other)      { _map.set_from(other->_map); }\n+  bool equals(ValueSet* other)        { return _map.is_same(other->_map); }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueSet.hpp","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_C1_C1_VALUESET_INLINE_HPP\n-#define SHARE_C1_C1_VALUESET_INLINE_HPP\n-\n-#include \"c1\/c1_ValueSet.hpp\"\n-\n-#include \"c1\/c1_Instruction.hpp\"\n-#include \"utilities\/bitMap.inline.hpp\"\n-\n-inline ValueSet::ValueSet() : _map(Instruction::number_of_instructions()) {\n-}\n-\n-inline ValueSet* ValueSet::copy() {\n-  ValueSet* res = new ValueSet();\n-  res->_map.set_from(_map);\n-  return res;\n-}\n-\n-inline bool ValueSet::contains(Value x) {\n-  return _map.at(x->id());\n-}\n-\n-inline void ValueSet::put(Value x) {\n-  _map.set_bit(x->id());\n-}\n-\n-inline void ValueSet::remove(Value x) {\n-  _map.clear_bit(x->id());\n-}\n-\n-inline bool ValueSet::set_intersect(ValueSet* other) {\n-  return _map.set_intersection_with_result(other->_map);\n-}\n-\n-inline void ValueSet::set_union(ValueSet* other) {\n-  _map.set_union(other->_map);\n-}\n-\n-inline void ValueSet::clear() {\n-  _map.clear();\n-}\n-\n-inline void ValueSet::set_from(ValueSet* other) {\n-  _map.set_from(other->_map);\n-}\n-\n-inline bool ValueSet::equals(ValueSet* other) {\n-  return _map.is_same(other->_map);\n-}\n-\n-#endif \/\/ SHARE_C1_C1_VALUESET_INLINE_HPP\n","filename":"src\/hotspot\/share\/c1\/c1_ValueSet.inline.hpp","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -83,6 +83,0 @@\n-ValueType* ValueType::join(ValueType* y) const {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-class     IntInterval;\n@@ -56,2 +55,0 @@\n-class     MethodDataType;\n-class       MethodDataConstant;\n@@ -135,1 +132,0 @@\n-  bool is_method_data()                          { return as_MethodDataType() != NULL; }\n@@ -158,1 +154,0 @@\n-  virtual MethodDataType*   as_MethodDataType()  { return NULL; }\n@@ -161,1 +156,0 @@\n-\n@@ -170,1 +164,0 @@\n-  virtual MethodDataConstant* as_MethodDataConstant() { return NULL; }\n@@ -177,1 +170,0 @@\n-  ValueType* join(ValueType* y) const;\n@@ -218,19 +210,0 @@\n-class IntInterval: public IntType {\n- private:\n-  jint _beg;\n-  jint _end;\n-\n- public:\n-  IntInterval(jint beg, jint end) {\n-    assert(beg <= end, \"illegal interval\");\n-    _beg = beg;\n-    _end = end;\n-  }\n-\n-  jint beg() const                               { return _beg; }\n-  jint end() const                               { return _end; }\n-\n-  virtual bool is_interval() const               { return true; }\n-};\n-\n-\n@@ -454,22 +427,0 @@\n-class MethodDataType: public MetadataType {\n- public:\n-  virtual MethodDataType* as_MethodDataType()           { return this; }\n-};\n-\n-\n-class MethodDataConstant: public MethodDataType {\n- private:\n-  ciMethodData* _value;\n-\n- public:\n-  MethodDataConstant(ciMethodData* value)               { _value = value; }\n-\n-  ciMethodData* value() const                           { return _value; }\n-\n-  virtual bool is_constant() const                      { return true; }\n-\n-  virtual MethodDataConstant* as_MethodDataConstant()   { return this; }\n-  virtual ciMetadata* constant_value() const            { return _value; }\n-};\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.hpp","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -200,3 +200,0 @@\n-  develop(bool, LIRTracePeephole, false,                                    \\\n-          \"Trace peephole optimizer\")                                       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/c1\/c1_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}