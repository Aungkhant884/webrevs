{"files":[{"patch":"@@ -609,1 +609,0 @@\n-    java\/util\/zip\/ZipFile\/TestTooManyEntries.java \\\n","filename":"test\/jdk\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/manual CenSizeTooLarge\n+ * @run testng CenSizeTooLarge\n@@ -34,4 +34,1 @@\n-import java.io.File;\n-import java.io.BufferedOutputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n@@ -40,0 +37,2 @@\n+import java.nio.channels.FileChannel;\n+import java.nio.charset.StandardCharsets;\n@@ -41,0 +40,1 @@\n+import java.util.Arrays;\n@@ -74,0 +74,4 @@\n+    \/\/ Helps SparseOutputStream detect write of the last CEN entry\n+    private static final String LAST_COMMENT = \"LastCEN\";\n+    private static final byte[] LAST_COMMENT_BYTES = LAST_COMMENT.getBytes(StandardCharsets.UTF_8);\n+\n@@ -85,1 +89,2 @@\n-        try (ZipOutputStream zip = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(hugeZipFile)))) {\n+        try (OutputStream out = new SparseOutputStream(new FileOutputStream(hugeZipFile));\n+             ZipOutputStream zip = new ZipOutputStream(out)) {\n@@ -107,0 +112,4 @@\n+                if (i == NUM_ENTRIES -1) {\n+                    \/\/ Help SparseOutputStream detect the last CEN entry write\n+                    entry.setComment(LAST_COMMENT);\n+                }\n@@ -110,0 +119,1 @@\n+\n@@ -155,0 +165,38 @@\n+\n+    \/**\n+     * By writing sparse 'holes' until the last CEN is detected, we can save disk space\n+     * used by this test from ~2GB to ~4K\n+     *\/\n+    private static class SparseOutputStream extends FilterOutputStream {\n+        private final FileChannel channel;\n+        private boolean afterLastCEN = false;\n+        private long position = 0;\n+\n+        public SparseOutputStream(FileOutputStream fos) {\n+            super(fos);\n+            this.channel = fos.getChannel();\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            position += len;\n+            if (afterLastCEN) {\n+                out.write(b, off, len);\n+            } else {\n+                channel.position(position);\n+                if (Arrays.equals(LAST_COMMENT_BYTES, 0, LAST_COMMENT_BYTES.length, b, off, len)) {\n+                    afterLastCEN = true;\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            position++;\n+            if (afterLastCEN) {\n+                out.write(b);\n+            } else {\n+                channel.position(position);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/CenSizeTooLarge.java","additions":54,"deletions":6,"binary":false,"changes":60,"status":"modified"}]}