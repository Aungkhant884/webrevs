{"files":[{"patch":"@@ -3819,2 +3819,1 @@\n-        boolean checkForImports = true;\n-        boolean firstTypeDecl = true;\n+        boolean firstTypeDecl = true;   \/\/ have we see a class, enum, or interface declaration yet?\n@@ -3824,1 +3823,1 @@\n-                skip(checkForImports, false, false, false);\n+                skip(firstTypeDecl, false, false, false);\n@@ -3828,1 +3827,18 @@\n-            if (checkForImports && mods == null && token.kind == IMPORT) {\n+            \/\/ JLS 7.3 doesn't allow extra semicolons after package or import declarations,\n+            \/\/ but here we try to provide a more helpful error message if we encounter any.\n+            \/\/ Do that by slurping in as many semicolons as possible, and then seeing what\n+            \/\/ comes after before deciding how best to handle them.\n+            ListBuffer<JCTree> semiList = new ListBuffer<>();\n+            while (firstTypeDecl && mods == null && token.kind == SEMI) {\n+                semiList.append(toP(F.at(token.pos).Skip()));\n+                nextToken();\n+                if (token.kind == EOF)\n+                    break;\n+            }\n+            if (firstTypeDecl && mods == null && token.kind == IMPORT) {\n+                if (!semiList.isEmpty()) {\n+                    if (source.compareTo(Source.JDK21) >= 0)\n+                        reportSyntaxError(semiList.first().pos, Errors.ExtraneousSemicolon);\n+                    else\n+                        log.warning(semiList.first().pos, Warnings.ExtraneousSemicolon);\n+                }\n@@ -3840,0 +3856,6 @@\n+                    if (!semiList.isEmpty()) {\n+                        if (source.compareTo(Source.JDK21) >= 0)\n+                            reportSyntaxError(semiList.first().pos, Errors.ExtraneousSemicolon);\n+                        else\n+                            log.warning(semiList.first().pos, Warnings.ExtraneousSemicolon);\n+                    }\n@@ -3856,0 +3878,1 @@\n+                defs.appendList(semiList.toList());\n@@ -3860,2 +3883,0 @@\n-                if (def instanceof JCClassDecl)\n-                    checkForImports = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2344,0 +2344,6 @@\n+compiler.err.extraneous.semicolon=\\\n+    extraneous semicolon\n+\n+compiler.warn.extraneous.semicolon=\\\n+    extraneous semicolon\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import javax.naming.InvalidNameException;;\n+import javax.naming.InvalidNameException;\n","filename":"test\/jdk\/com\/sun\/jndi\/dns\/Parser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import java.security.AccessControlException;;\n-import java.security.Permission;;\n+import java.security.AccessControlException;\n+import java.security.Permission;\n","filename":"test\/jdk\/java\/lang\/constant\/methodTypeDesc\/ResolveConstantDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import static java.lang.management.MemoryNotificationInfo.*;;\n+import static java.lang.management.MemoryNotificationInfo.*;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/CollectionUsageThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-import java.util.concurrent.TimeoutException;;\n+import java.util.concurrent.TimeoutException;\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.test.lib.process.ProcessTools;;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/jdk\/jfr\/tool\/ExecuteHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-AnnotatedImport.java:11:7: compiler.err.expected: token.identifier\n+AnnotatedImport.java:11:1: compiler.err.expected4: class, interface, enum, record\n@@ -5,1 +5,1 @@\n-AnnotatedImport.java:12:18: compiler.err.expected: token.identifier\n+AnnotatedImport.java:12:1: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedImport.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-2 errors\n+AnnotatedPackage1.java:11:1: compiler.err.expected4: class, interface, enum, record\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage1.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-2 errors\n+AnnotatedPackage2.java:11:1: compiler.err.expected4: class, interface, enum, record\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage2.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.extraneous.semicolon\n+\n+import java.util.Map;;      \/\/ NOTE: extra semicolon\n+import java.util.Set;\n+\n+class ExtraImportSemicolonError {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ExtraImportSemicolonError.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.extraneous.semicolon\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: --source 20\n+\n+import java.util.Map;;      \/\/ NOTE: extra semicolon\n+import java.util.Set;\n+\n+class ExtraImportSemicolonWarning {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ExtraImportSemicolonWarning.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 5059679\n+ * @summary Verify proper error reporting of extra semicolon before import statement\n+ * @compile\/fail\/ref=ExtraImportSemicolon.out1 -XDrawDiagnostics ExtraImportSemicolon.java\n+ * @compile\/ref=ExtraImportSemicolon.out2 -source 20 -XDrawDiagnostics ExtraImportSemicolon.java\n+ *\/\n+\n+import java.util.Map;;      \/\/ NOTE: extra semicolon\n+import java.util.Set;\n+\n+class ExtraImportSemicolon {\n+}\n","filename":"test\/langtools\/tools\/javac\/parser\/ExtraImportSemicolon.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+ExtraImportSemicolon.java:9:22: compiler.err.extraneous.semicolon\n+1 error\n","filename":"test\/langtools\/tools\/javac\/parser\/ExtraImportSemicolon.out1","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+- compiler.warn.source.no.system.modules.path: 20\n+ExtraImportSemicolon.java:9:22: compiler.warn.extraneous.semicolon\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/parser\/ExtraImportSemicolon.out2","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     6963934\n- * @summary JCCompilationUnit.getImports does not report all imports\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.File;\n-import javax.tools.JavaCompiler;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.ToolProvider;; \/\/ NOTE: extra semicolon for test\n-\n-import com.sun.source.tree.CompilationUnitTree;\n-import com.sun.source.tree.ImportTree;\n-import com.sun.source.util.JavacTask;\n-; \/\/ NOTE: extra semicolon for test\n-\n-public class T6963934 {\n-    public static void main(String[] args) throws Exception {\n-        File testSrc = new File(System.getProperty(\"test.src\"));\n-        File thisSrc = new File(testSrc, T6963934.class.getSimpleName() + \".java\");\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        try (StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null)) {\n-            JavacTask task = (JavacTask) compiler.getTask(null, fileManager, null, null, null,\n-                    fileManager.getJavaFileObjects(thisSrc));\n-            CompilationUnitTree tree = task.parse().iterator().next();\n-            int count = 0;\n-            for (ImportTree importTree : tree.getImports()) {\n-                System.out.println(importTree);\n-                count++;\n-            }\n-            int expected = 7;\n-            if (count != expected)\n-                throw new Exception(\"unexpected number of imports found: \" + count + \", expected: \" + expected);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/tree\/T6963934.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.internal.perf.PerfCounter;;\n+import jdk.internal.perf.PerfCounter;\n","filename":"test\/langtools\/tools\/jdeps\/modules\/src\/unsupported\/q\/Counter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -467,1 +467,1 @@\n-            String template = \"#Package;\\n\" +\n+            String template = \"#Package\\n\" +\n","filename":"test\/langtools\/tools\/lib\/types\/TypeHarness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}