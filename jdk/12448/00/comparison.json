{"files":[{"patch":"@@ -3860,2 +3860,0 @@\n-                if (def instanceof JCClassDecl)\n-                    checkForImports = false;\n@@ -3864,0 +3862,1 @@\n+                checkForImports = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-AnnotatedImport.java:11:7: compiler.err.expected: token.identifier\n+AnnotatedImport.java:11:1: compiler.err.expected4: class, interface, enum, record\n@@ -5,1 +5,1 @@\n-AnnotatedImport.java:12:18: compiler.err.expected: token.identifier\n+AnnotatedImport.java:12:1: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedImport.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-2 errors\n+AnnotatedPackage1.java:11:1: compiler.err.expected4: class, interface, enum, record\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage1.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-2 errors\n+AnnotatedPackage2.java:11:1: compiler.err.expected4: class, interface, enum, record\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage2.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     6963934\n- * @summary JCCompilationUnit.getImports does not report all imports\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.File;\n-import javax.tools.JavaCompiler;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.ToolProvider;; \/\/ NOTE: extra semicolon for test\n-\n-import com.sun.source.tree.CompilationUnitTree;\n-import com.sun.source.tree.ImportTree;\n-import com.sun.source.util.JavacTask;\n-; \/\/ NOTE: extra semicolon for test\n-\n-public class T6963934 {\n-    public static void main(String[] args) throws Exception {\n-        File testSrc = new File(System.getProperty(\"test.src\"));\n-        File thisSrc = new File(testSrc, T6963934.class.getSimpleName() + \".java\");\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        try (StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null)) {\n-            JavacTask task = (JavacTask) compiler.getTask(null, fileManager, null, null, null,\n-                    fileManager.getJavaFileObjects(thisSrc));\n-            CompilationUnitTree tree = task.parse().iterator().next();\n-            int count = 0;\n-            for (ImportTree importTree : tree.getImports()) {\n-                System.out.println(importTree);\n-                count++;\n-            }\n-            int expected = 7;\n-            if (count != expected)\n-                throw new Exception(\"unexpected number of imports found: \" + count + \", expected: \" + expected);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/tree\/T6963934.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -467,1 +467,1 @@\n-            String template = \"#Package;\\n\" +\n+            String template = \"#Package\\n\" +\n","filename":"test\/langtools\/tools\/lib\/types\/TypeHarness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}