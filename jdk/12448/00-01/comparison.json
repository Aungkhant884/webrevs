{"files":[{"patch":"@@ -3819,2 +3819,1 @@\n-        boolean checkForImports = true;\n-        boolean firstTypeDecl = true;\n+        boolean firstTypeDecl = true;   \/\/ have we see a class, enum, or interface declaration yet?\n@@ -3824,1 +3823,1 @@\n-                skip(checkForImports, false, false, false);\n+                skip(firstTypeDecl, false, false, false);\n@@ -3828,1 +3827,14 @@\n-            if (checkForImports && mods == null && token.kind == IMPORT) {\n+            \/\/ JLS 7.3 doesn't allow extra semi-colons after package or import declarations,\n+            \/\/ but here we try to provide a more helpful error message if we encounter any.\n+            \/\/ Do that by slurping in as many semi-colons as possible, and then seeing what\n+            \/\/ comes after before deciding how best to handle them.\n+            ListBuffer<JCTree> semiList = new ListBuffer<>();\n+            while (firstTypeDecl && mods == null && token.kind == SEMI) {\n+                semiList.append(toP(F.at(token.pos).Skip()));\n+                nextToken();\n+                if (token.kind == EOF)\n+                    break;\n+            }\n+            if (firstTypeDecl && mods == null && token.kind == IMPORT) {\n+                if (!semiList.isEmpty())\n+                    reportSyntaxError(semiList.first().pos, Errors.ExtraneousSemiColon);\n@@ -3840,0 +3852,2 @@\n+                    if (!semiList.isEmpty())\n+                        reportSyntaxError(semiList.first().pos, Errors.ExtraneousSemiColon);\n@@ -3856,0 +3870,1 @@\n+                defs.appendList(semiList.toList());\n@@ -3862,1 +3877,0 @@\n-                checkForImports = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2344,0 +2344,3 @@\n+compiler.err.extraneous.semi.colon=\\\n+    extraneous semi-colon\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import javax.naming.InvalidNameException;;\n+import javax.naming.InvalidNameException;\n","filename":"test\/jdk\/com\/sun\/jndi\/dns\/Parser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import java.security.AccessControlException;;\n-import java.security.Permission;;\n+import java.security.AccessControlException;\n+import java.security.Permission;\n","filename":"test\/jdk\/java\/lang\/constant\/methodTypeDesc\/ResolveConstantDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import static java.lang.management.MemoryNotificationInfo.*;;\n+import static java.lang.management.MemoryNotificationInfo.*;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/CollectionUsageThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-import java.util.concurrent.TimeoutException;;\n+import java.util.concurrent.TimeoutException;\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.test.lib.process.ProcessTools;;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/jdk\/jfr\/tool\/ExecuteHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.extraneous.semi.colon\n+\n+import java.util.Map;;      \/\/ NOTE: extra semi-colon\n+import java.util.Set;\n+\n+class ExtraneousSemiColon {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ExtraneousSemiColon.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.internal.perf.PerfCounter;;\n+import jdk.internal.perf.PerfCounter;\n","filename":"test\/langtools\/tools\/jdeps\/modules\/src\/unsupported\/q\/Counter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}