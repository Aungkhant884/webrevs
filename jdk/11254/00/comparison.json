{"files":[{"patch":"@@ -603,4 +603,1 @@\n-  ServiceThread::add_oop_handle_release(_threadObj);\n-  ServiceThread::add_oop_handle_release(_vthread);\n-  ServiceThread::add_oop_handle_release(_jvmti_vthread);\n-  ServiceThread::add_oop_handle_release(_extentLocalCache);\n+  ServiceThread::add_oop_handle_release_for(this);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+  friend class ServiceThread; \/\/ for OopHandle access\n@@ -87,0 +88,5 @@\n+\n+  \/\/ All references to Java objects managed via OopHandles. These\n+  \/\/ have to be released by the ServiceThread after the JavaThread has\n+  \/\/ terminated. If you add\/remove an OopHandle be sure to update the\n+  \/\/ ServiceThread code to match.\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-\/\/ Defer releasing JavaThread OopHandle to the ServiceThread\n+\/\/ Defer releasing JavaThread OopHandles to the ServiceThread\n@@ -64,1 +64,2 @@\n-  OopHandle      _handle;\n+  static const int _count = 4;  \/\/ Need to keep in sync with JavaThread\n+  OopHandle _handles[_count];\n@@ -66,0 +67,1 @@\n+  int _index;\n@@ -67,5 +69,12 @@\n-   OopHandleList(OopHandle h, OopHandleList* next) : _handle(h), _next(next) {}\n-   ~OopHandleList() {\n-     _handle.release(JavaThread::thread_oop_storage());\n-   }\n-   OopHandleList* next() const { return _next; }\n+  OopHandleList(OopHandleList* next) : _next(next), _index(0) {}\n+  void add(OopHandle h) {\n+    assert(_index < _count, \"too many additions\");\n+    _handles[_index++] = h;\n+  }\n+  ~OopHandleList() {\n+    assert(_index == _count, \"usage error\");\n+    for (int i = 0; i < _count; i++) {\n+      _handles[i].release(JavaThread::thread_oop_storage());\n+    }\n+  }\n+  OopHandleList* next() const { return _next; }\n@@ -265,1 +274,1 @@\n-void ServiceThread::add_oop_handle_release(OopHandle handle) {\n+void ServiceThread::add_oop_handle_release_for(JavaThread* jt) {\n@@ -267,1 +276,5 @@\n-  OopHandleList* new_head = new OopHandleList(handle, _oop_handle_list);\n+  OopHandleList* new_head = new OopHandleList(_oop_handle_list);\n+  new_head->add(jt->_threadObj);\n+  new_head->add(jt->_vthread);\n+  new_head->add(jt->_jvmti_vthread);\n+  new_head->add(jt->_extentLocalCache);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-  static void add_oop_handle_release(OopHandle handle);\n+  \/\/ Add jt's OopHandles to the service thread OopHandle queue to be released.\n+  static void add_oop_handle_release_for(JavaThread* jt);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}