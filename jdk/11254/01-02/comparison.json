{"files":[{"patch":"@@ -602,2 +602,2 @@\n-  \/\/ Ask ServiceThread to release the OopHandles\n-  ServiceThread::add_oop_handle_release_for(this);\n+  \/\/ Enqueue OopHandles for release by the service thread.\n+  add_oop_handles_for_release();\n@@ -2073,0 +2073,54 @@\n+\n+\/\/ Deferred OopHandle release support.\n+\n+class OopHandleList : public CHeapObj<mtInternal> {\n+  static const int _count = 4;\n+  OopHandle _handles[_count];\n+  OopHandleList* _next;\n+  int _index;\n+ public:\n+  OopHandleList(OopHandleList* next) : _next(next), _index(0) {}\n+  void add(OopHandle h) {\n+    assert(_index < _count, \"too many additions\");\n+    _handles[_index++] = h;\n+  }\n+  ~OopHandleList() {\n+    assert(_index == _count, \"usage error\");\n+    for (int i = 0; i < _index; i++) {\n+      _handles[i].release(JavaThread::thread_oop_storage());\n+    }\n+  }\n+  OopHandleList* next() const { return _next; }\n+};\n+\n+OopHandleList* JavaThread::_oop_handle_list = nullptr;\n+\n+\/\/ Called by the ServiceThread to do the work of releasing\n+\/\/ the OopHandles.\n+void JavaThread::release_oop_handles() {\n+  OopHandleList* list;\n+  {\n+    MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n+    list = _oop_handle_list;\n+    _oop_handle_list = nullptr;\n+  }\n+  assert(!SafepointSynchronize::is_at_safepoint(), \"cannot be called at a safepoint\");\n+\n+  while (list != nullptr) {\n+    OopHandleList* l = list;\n+    list = l->next();\n+    delete l;\n+  }\n+}\n+\n+\/\/ Add our OopHandles for later release.\n+void JavaThread::add_oop_handles_for_release() {\n+  MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n+  OopHandleList* new_head = new OopHandleList(_oop_handle_list);\n+  new_head->add(_threadObj);\n+  new_head->add(_vthread);\n+  new_head->add(_jvmti_vthread);\n+  new_head->add(_extentLocalCache);\n+  _oop_handle_list = new_head;\n+  Service_lock->notify_all();\n+}\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+class OopHandleList;\n@@ -84,1 +85,1 @@\n-  friend class ServiceThread; \/\/ for OopHandle access\n+  friend class ServiceThread; \/\/ for deferred OopHandle release access\n@@ -91,2 +92,1 @@\n-  \/\/ terminated. If you add\/remove an OopHandle be sure to update the\n-  \/\/ ServiceThread code to match.\n+  \/\/ terminated - see add_oop_handles_for_release().\n@@ -1177,0 +1177,14 @@\n+\n+  \/\/ Deferred OopHandle release support\n+ private:\n+  \/\/ List of OopHandles to be released - guarded by the Service_lock.\n+  static OopHandleList* _oop_handle_list;\n+  \/\/ Add our OopHandles to the list for the service thread to release.\n+  void add_oop_handles_for_release();\n+  \/\/ Called by the ServiceThread to release the OopHandles.\n+  static void release_oop_handles();\n+  \/\/ Called by the ServiceThread to poll if there are any OopHandles to release.\n+  \/\/ Called when holding the Service_lock.\n+  static bool has_oop_handles_to_release() {\n+    return _oop_handle_list != nullptr;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -62,39 +62,0 @@\n-\/\/ Defer releasing JavaThread OopHandles to the ServiceThread\n-class OopHandleList : public CHeapObj<mtInternal> {\n-  static const int _count = 4;  \/\/ Need to keep in sync with JavaThread\n-  OopHandle _handles[_count];\n-  OopHandleList* _next;\n-  int _index;\n- public:\n-  OopHandleList(OopHandleList* next) : _next(next), _index(0) {}\n-  void add(OopHandle h) {\n-    assert(_index < _count, \"too many additions\");\n-    _handles[_index++] = h;\n-  }\n-  ~OopHandleList() {\n-    assert(_index == _count, \"usage error\");\n-    for (int i = 0; i < _index; i++) {\n-      _handles[i].release(JavaThread::thread_oop_storage());\n-    }\n-  }\n-  OopHandleList* next() const { return _next; }\n-};\n-\n-static OopHandleList* _oop_handle_list = NULL;\n-\n-static void release_oop_handles() {\n-  OopHandleList* list;\n-  {\n-    MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n-    list = _oop_handle_list;\n-    _oop_handle_list = NULL;\n-  }\n-  assert(!SafepointSynchronize::is_at_safepoint(), \"cannot be called at a safepoint\");\n-\n-  while (list != NULL) {\n-    OopHandleList* l = list;\n-    list = l->next();\n-    delete l;\n-  }\n-}\n-\n@@ -164,1 +125,1 @@\n-              (oop_handles_to_release = (_oop_handle_list != NULL)) |\n+              (oop_handles_to_release = JavaThread::has_oop_handles_to_release()) |\n@@ -227,1 +188,1 @@\n-      release_oop_handles();\n+      JavaThread::release_oop_handles();\n@@ -273,11 +234,0 @@\n-\n-void ServiceThread::add_oop_handle_release_for(JavaThread* jt) {\n-  MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n-  OopHandleList* new_head = new OopHandleList(_oop_handle_list);\n-  new_head->add(jt->_threadObj);\n-  new_head->add(jt->_vthread);\n-  new_head->add(jt->_jvmti_vthread);\n-  new_head->add(jt->_extentLocalCache);\n-  _oop_handle_list = new_head;\n-  Service_lock->notify_all();\n-}\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":2,"deletions":52,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -55,2 +55,0 @@\n-  \/\/ Add jt's OopHandles to the service thread OopHandle queue to be released.\n-  static void add_oop_handle_release_for(JavaThread* jt);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}