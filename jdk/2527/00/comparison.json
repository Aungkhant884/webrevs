{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,30 @@\n+#ifdef ASSERT\n+void MemoryCounter::update_peak_count(size_t count) {\n+  size_t peak_cnt = peak_count();\n+  while (peak_cnt < count) {\n+    size_t old_cnt = Atomic::cmpxchg(&_peak_count, peak_cnt, count, memory_order_relaxed);\n+    if (old_cnt != peak_cnt) {\n+      peak_cnt = old_cnt;\n+    }\n+  }\n+}\n+\n+void MemoryCounter::update_peak_size(size_t sz) {\n+  size_t peak_sz = peak_size();\n+  while (peak_sz < sz) {\n+    size_t old_sz = Atomic::cmpxchg(&_peak_size, peak_sz, sz, memory_order_relaxed);\n+    if (old_sz != peak_sz) {\n+      peak_sz = old_sz;\n+    }\n+  }\n+}\n+\n+size_t MemoryCounter::peak_count() const {\n+  return Atomic::load(&_peak_count);\n+}\n+\n+size_t MemoryCounter::peak_size() const {\n+  return Atomic::load(&_peak_size);\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,2 @@\n-  DEBUG_ONLY(size_t   _peak_count;)\n-  DEBUG_ONLY(size_t   _peak_size; )\n+  DEBUG_ONLY(volatile size_t   _peak_count;)\n+  DEBUG_ONLY(volatile size_t   _peak_size; )\n@@ -56,1 +56,1 @@\n-    Atomic::inc(&_count);\n+    size_t cnt = Atomic::add(&_count, size_t(1), memory_order_relaxed);\n@@ -58,2 +58,2 @@\n-      Atomic::add(&_size, sz);\n-      DEBUG_ONLY(_peak_size = MAX2(_peak_size, _size));\n+      size_t sum = Atomic::add(&_size, sz, memory_order_relaxed);\n+      DEBUG_ONLY(update_peak_size(sum);)\n@@ -61,1 +61,1 @@\n-    DEBUG_ONLY(_peak_count = MAX2(_peak_count, _count);)\n+    DEBUG_ONLY(update_peak_count(cnt);)\n@@ -65,3 +65,3 @@\n-    assert(_count > 0, \"Nothing allocated yet\");\n-    assert(_size >= sz, \"deallocation > allocated\");\n-    Atomic::dec(&_count);\n+    assert(count() > 0, \"Nothing allocated yet\");\n+    assert(size() >= sz, \"deallocation > allocated\");\n+    Atomic::dec(&_count, memory_order_relaxed);\n@@ -69,1 +69,1 @@\n-      Atomic::sub(&_size, sz);\n+      Atomic::sub(&_size, sz, memory_order_relaxed);\n@@ -75,3 +75,3 @@\n-      assert(sz >= 0 || _size >= size_t(-sz), \"Must be\");\n-      Atomic::add(&_size, size_t(sz));\n-      DEBUG_ONLY(_peak_size = MAX2(_size, _peak_size);)\n+      assert(sz >= 0 || size() >= size_t(-sz), \"Must be\");\n+      size_t sum = Atomic::add(&_size, size_t(sz), memory_order_relaxed);\n+      DEBUG_ONLY(update_peak_size(sum);)\n@@ -81,4 +81,2 @@\n-  inline size_t count() const { return _count; }\n-  inline size_t size()  const { return _size;  }\n-  DEBUG_ONLY(inline size_t peak_count() const { return _peak_count; })\n-  DEBUG_ONLY(inline size_t peak_size()  const { return _peak_size; })\n+  inline size_t count() const { return Atomic::load(&_count); }\n+  inline size_t size()  const { return Atomic::load(&_size);  }\n@@ -86,0 +84,6 @@\n+#ifdef ASSERT\n+  void update_peak_count(size_t cnt);\n+  void update_peak_size(size_t sz);\n+  size_t peak_count() const;\n+  size_t peak_size()  const;\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"}]}