{"files":[{"patch":"@@ -672,1 +672,0 @@\n-javax\/swing\/Popup\/TaskbarPositionTest.java 8065097 macosx-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,28 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import javax.swing.*;\n-import javax.swing.event.*;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseAdapter;\n+import javax.swing.AbstractAction;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JSeparator;\n+import javax.swing.JTextField;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.PopupMenuListener;\n+import javax.swing.event.PopupMenuEvent;\n@@ -33,1 +57,0 @@\n- * @author Mark Davidson\n@@ -40,1 +63,1 @@\n-public class TaskbarPositionTest extends JFrame implements ActionListener {\n+public class TaskbarPositionTest implements ActionListener {\n@@ -45,0 +68,1 @@\n+    private static JFrame frame;\n@@ -66,4 +90,4 @@\n-        super(\"Use CTRL-down to show a JPopupMenu\");\n-        setContentPane(panel = createContentPane());\n-        setJMenuBar(createMenuBar(\"1 - First Menu\", true));\n-        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame = new JFrame(\"Use CTRL-down to show a JPopupMenu\");\n+        frame.setContentPane(panel = createContentPane());\n+        frame.setJMenuBar(createMenuBar(\"1 - First Menu\", true));\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n@@ -76,1 +100,1 @@\n-        pack();\n+        frame.pack();\n@@ -83,1 +107,1 @@\n-        this.setLocation(0, (int) screenBounds.getHeight() - 2 * this.getHeight());\n+        frame.setLocation(0, screenBounds.y + screenBounds.height - frame.getHeight());\n@@ -86,1 +110,1 @@\n-        GraphicsConfiguration gc = this.getGraphicsConfiguration();\n+        GraphicsConfiguration gc = frame.getGraphicsConfiguration();\n@@ -96,1 +120,1 @@\n-        setVisible(true);\n+        frame.setVisible(true);\n@@ -116,1 +140,2 @@\n-                if (p.y < cpos.y) {\n+                if (p.y+1 < cpos.y) {\n+                    System.out.println(\"p.y \" + p.y + \" cpos.y \" + cpos.y);\n@@ -264,76 +289,85 @@\n-\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                test = new TaskbarPositionTest();\n-            }\n-        });\n-\n-        \/\/ Use Robot to automate the test\n-        Robot robot;\n-        robot = new Robot();\n-        robot.setAutoDelay(125);\n-\n-        \/\/ 1 - menu\n-        Util.hitMnemonics(robot, KeyEvent.VK_1);\n-\n-        robot.waitForIdle();\n-        isPopupOnScreen(menu1.getPopupMenu(), screenBounds);\n-\n-        \/\/ 2 menu with sub menu\n-        robot.keyPress(KeyEvent.VK_RIGHT);\n-        robot.keyRelease(KeyEvent.VK_RIGHT);\n-        Util.hitMnemonics(robot, KeyEvent.VK_S);\n-\n-        robot.waitForIdle();\n-        isPopupOnScreen(menu2.getPopupMenu(), screenBounds);\n-\n-        robot.keyPress(KeyEvent.VK_ENTER);\n-        robot.keyRelease(KeyEvent.VK_ENTER);\n-\n-        \/\/ Focus should go to non editable combo box\n-        robot.waitForIdle();\n-        Thread.sleep(500);\n-\n-        robot.keyPress(KeyEvent.VK_DOWN);\n-\n-        \/\/ How do we check combo boxes?\n-\n-        \/\/ Editable combo box\n-        robot.keyPress(KeyEvent.VK_TAB);\n-        robot.keyRelease(KeyEvent.VK_TAB);\n-        robot.keyPress(KeyEvent.VK_DOWN);\n-        robot.keyRelease(KeyEvent.VK_DOWN);\n-\n-        \/\/ combo1.getUI();\n-\n-        \/\/ Popup from Text field\n-        robot.keyPress(KeyEvent.VK_TAB);\n-        robot.keyRelease(KeyEvent.VK_TAB);\n-        robot.keyPress(KeyEvent.VK_CONTROL);\n-        robot.keyPress(KeyEvent.VK_DOWN);\n-        robot.keyRelease(KeyEvent.VK_DOWN);\n-        robot.keyRelease(KeyEvent.VK_CONTROL);\n-\n-        \/\/ Popup from a mouse click.\n-        Point pt = new Point(2, 2);\n-        SwingUtilities.convertPointToScreen(pt, panel);\n-        robot.mouseMove((int) pt.getX(), (int) pt.getY());\n-        robot.mousePress(InputEvent.BUTTON3_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON3_MASK);\n-\n-        robot.waitForIdle();\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                test.setLocation(-30, 100);\n-                combo1.addPopupMenuListener(new ComboPopupCheckListener());\n-                combo1.requestFocus();\n-            }\n-        });\n-\n-        robot.keyPress(KeyEvent.VK_DOWN);\n-        robot.keyRelease(KeyEvent.VK_DOWN);\n-        robot.keyPress(KeyEvent.VK_ESCAPE);\n-        robot.keyRelease(KeyEvent.VK_ESCAPE);\n-\n-        robot.waitForIdle();\n-        Thread.sleep(500);\n+        try {\n+            \/\/ Use Robot to automate the test\n+            Robot robot;\n+            robot = new Robot();\n+            robot.setAutoDelay(50);\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    test = new TaskbarPositionTest();\n+                }\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ 1 - menu\n+            Util.hitMnemonics(robot, KeyEvent.VK_1);\n+\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isPopupOnScreen(menu1.getPopupMenu(), screenBounds));\n+\n+            \/\/ 2 menu with sub menu\n+            robot.keyPress(KeyEvent.VK_RIGHT);\n+            robot.keyRelease(KeyEvent.VK_RIGHT);\n+            Util.hitMnemonics(robot, KeyEvent.VK_S);\n+\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isPopupOnScreen(menu2.getPopupMenu(), screenBounds));\n+\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+\n+            \/\/ Focus should go to non editable combo box\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+\n+            \/\/ How do we check combo boxes?\n+\n+            \/\/ Editable combo box\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+\n+            \/\/ combo1.getUI();\n+\n+            \/\/ Popup from Text field\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+            \/\/ Popup from a mouse click.\n+            Point pt = new Point(2, 2);\n+            SwingUtilities.convertPointToScreen(pt, panel);\n+            robot.mouseMove(pt.x, pt.y);\n+            robot.mousePress(InputEvent.BUTTON3_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_MASK);\n+\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    frame.setLocation(-30, 100);\n+                    combo1.addPopupMenuListener(new ComboPopupCheckListener());\n+                    combo1.requestFocus();\n+                }\n+            });\n+\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+\n+            robot.waitForIdle();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n","filename":"test\/jdk\/javax\/swing\/Popup\/TaskbarPositionTest.java","additions":126,"deletions":92,"binary":false,"changes":218,"status":"modified"}]}