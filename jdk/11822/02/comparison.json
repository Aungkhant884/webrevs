{"files":[{"patch":"@@ -5140,0 +5140,51 @@\n+instruct vmaskcmp_zeroI_neon(vReg dst, vReg src, immI0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateB zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateS zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateI zero)) cond));\n+  format %{ \"vmaskcmp_zeroI_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, bt, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_zeroL_neon(vReg dst, vReg src, immL0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateL zero)) cond));\n+  format %{ \"vmaskcmp_zeroL_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, T_LONG, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_zeroF_neon(vReg dst, vReg src, immF0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateF zero)) cond));\n+  format %{ \"vmaskcmp_zeroF_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, T_FLOAT, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_zeroD_neon(vReg dst, vReg src, immD0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateD zero)) cond));\n+  format %{ \"vmaskcmp_zeroD_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, T_DOUBLE, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3556,0 +3556,34 @@\n+instruct vmaskcmp_zeroI_neon(vReg dst, vReg src, immI0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateB zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateS zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateI zero)) cond));\n+  format %{ \"vmaskcmp_zeroI_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, bt, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+dnl\n+dnl VMASKCMP_ZERO_NEON($1,   $2        )\n+dnl VMASKCMP_ZERO_NEON(type, basic_type)\n+define(`VMASKCMP_ZERO_NEON', `\n+instruct vmaskcmp_zero$1_neon(vReg dst, vReg src, imm`$1'0 zero, immI cond) %{\n+  predicate(UseSVE == 0);\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate$1 zero)) cond));\n+  format %{ \"vmaskcmp_zero$1_neon $dst, $src, #0\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    __ neon_compare_zero($dst$$FloatRegister, $2, $src$$FloatRegister,\n+                         (int)($cond$$constant), \/* isQ *\/ length_in_bytes == 16);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+VMASKCMP_ZERO_NEON(L, T_LONG)\n+VMASKCMP_ZERO_NEON(F, T_FLOAT)\n+VMASKCMP_ZERO_NEON(D, T_DOUBLE)\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3174,0 +3174,5 @@\n+  INSN(fcmgt,  0, 0b10, 0b01, 0b01100); \/\/ Floating-point compare greater than zero (vector)\n+  INSN(fcmeq,  0, 0b10, 0b01, 0b01101); \/\/ Floating-point compare equal to zero (vector)\n+  INSN(fcmlt,  0, 0b10, 0b01, 0b01110); \/\/ Floating-point compare less than zero (vector)\n+  INSN(fcmge,  1, 0b10, 0b01, 0b01100); \/\/ Floating-point compare greater than or equal to zero (vector)\n+  INSN(fcmle,  1, 0b10, 0b01, 0b01101); \/\/ Floating-point compare less than or equal to zero (vector)\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -928,1 +928,1 @@\n-        notr(dst, T16B, dst);\n+        notr(dst, isQ ? T16B : T8B, dst);\n@@ -944,1 +944,1 @@\n-        notr(dst, T16B, dst);\n+        notr(dst, isQ ? T16B : T8B, dst);\n@@ -962,0 +962,38 @@\n+void C2_MacroAssembler::neon_compare_zero(FloatRegister dst, BasicType bt, FloatRegister src,\n+                                          int cond, bool isQ) {\n+  SIMD_Arrangement size = esize2arrangement((unsigned)type2aelembytes(bt), isQ);\n+  if (bt == T_FLOAT || bt == T_DOUBLE) {\n+    switch (cond) {\n+      case BoolTest::eq: fcmeq(dst, size, src); break;\n+      case BoolTest::ne: {\n+        fcmeq(dst, size, src);\n+        notr(dst, isQ ? T16B : T8B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: fcmge(dst, size, src); break;\n+      case BoolTest::gt: fcmgt(dst, size, src); break;\n+      case BoolTest::le: fcmle(dst, size, src); break;\n+      case BoolTest::lt: fcmlt(dst, size, src); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (cond) {\n+      case BoolTest::eq: cmeq(dst, size, src); break;\n+      case BoolTest::ne: {\n+        cmeq(dst, size, src);\n+        notr(dst, isQ ? T16B : T8B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: cmge(dst, size, src); break;\n+      case BoolTest::gt: cmgt(dst, size, src); break;\n+      case BoolTest::le: cmle(dst, size, src); break;\n+      case BoolTest::lt: cmlt(dst, size, src); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,3 @@\n+  void neon_compare_zero(FloatRegister dst, BasicType bt, FloatRegister src,\n+                         int cond, bool isQ);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1247,0 +1247,16 @@\n+class NEONCompareWithZero(CommonNEONInstruction):\n+    numRegs = 2\n+\n+    def __init__(self, args):\n+        self._name, self.arrangement = args\n+\n+    def astr(self):\n+        buf = '%s\\t%s.%s' % (self._name, self._firstSIMDreg, self.arrangement)\n+        current = self._firstSIMDreg\n+        for cnt in range(1, self.numRegs):\n+            buf = '%s, %s.%s' % (buf, current.nextReg(), self.arrangement)\n+            current = current.nextReg()\n+\n+        buf += ', #0'\n+        return buf\n+\n@@ -1599,0 +1615,13 @@\n+NEONCompareWithZeroInstructions = ['cmgt', 'cmge', 'cmeq', 'cmlt', 'cmle',\n+                                   'fcmgt', 'fcmge', 'fcmeq', 'fcmlt', 'fcmle']\n+NEONNonFloatArrangement = ['8B', '16B', '4H', '8H', '2S', '4S', '2D']\n+NEONFloatArrangement = ['2S', '4S', '2D']\n+NEONCompareWithZeroArgs = []\n+for ins in NEONCompareWithZeroInstructions:\n+    arrangements = NEONFloatArrangement if ins[0] == 'f' else NEONNonFloatArrangement\n+    for currentArrangement in arrangements:\n+        currentArgs = [ins, currentArrangement]\n+        NEONCompareWithZeroArgs.append(currentArgs)\n+\n+generate(NEONCompareWithZero, NEONCompareWithZeroArgs)\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -625,0 +625,52 @@\n+\/\/ NEONCompareWithZero\n+    __ cmgt(v12, __ T8B, v13);                         \/\/       cmgt    v12.8B, v13.8B, #0\n+    __ cmgt(v15, __ T16B, v16);                        \/\/       cmgt    v15.16B, v16.16B, #0\n+    __ cmgt(v11, __ T4H, v12);                         \/\/       cmgt    v11.4H, v12.4H, #0\n+    __ cmgt(v10, __ T8H, v11);                         \/\/       cmgt    v10.8H, v11.8H, #0\n+    __ cmgt(v17, __ T2S, v18);                         \/\/       cmgt    v17.2S, v18.2S, #0\n+    __ cmgt(v24, __ T4S, v25);                         \/\/       cmgt    v24.4S, v25.4S, #0\n+    __ cmgt(v21, __ T2D, v22);                         \/\/       cmgt    v21.2D, v22.2D, #0\n+    __ cmge(v23, __ T8B, v24);                         \/\/       cmge    v23.8B, v24.8B, #0\n+    __ cmge(v0, __ T16B, v1);                          \/\/       cmge    v0.16B, v1.16B, #0\n+    __ cmge(v16, __ T4H, v17);                         \/\/       cmge    v16.4H, v17.4H, #0\n+    __ cmge(v10, __ T8H, v11);                         \/\/       cmge    v10.8H, v11.8H, #0\n+    __ cmge(v6, __ T2S, v7);                           \/\/       cmge    v6.2S, v7.2S, #0\n+    __ cmge(v28, __ T4S, v29);                         \/\/       cmge    v28.4S, v29.4S, #0\n+    __ cmge(v6, __ T2D, v7);                           \/\/       cmge    v6.2D, v7.2D, #0\n+    __ cmeq(v5, __ T8B, v6);                           \/\/       cmeq    v5.8B, v6.8B, #0\n+    __ cmeq(v5, __ T16B, v6);                          \/\/       cmeq    v5.16B, v6.16B, #0\n+    __ cmeq(v20, __ T4H, v21);                         \/\/       cmeq    v20.4H, v21.4H, #0\n+    __ cmeq(v17, __ T8H, v18);                         \/\/       cmeq    v17.8H, v18.8H, #0\n+    __ cmeq(v15, __ T2S, v16);                         \/\/       cmeq    v15.2S, v16.2S, #0\n+    __ cmeq(v17, __ T4S, v18);                         \/\/       cmeq    v17.4S, v18.4S, #0\n+    __ cmeq(v29, __ T2D, v30);                         \/\/       cmeq    v29.2D, v30.2D, #0\n+    __ cmlt(v26, __ T8B, v27);                         \/\/       cmlt    v26.8B, v27.8B, #0\n+    __ cmlt(v28, __ T16B, v29);                        \/\/       cmlt    v28.16B, v29.16B, #0\n+    __ cmlt(v1, __ T4H, v2);                           \/\/       cmlt    v1.4H, v2.4H, #0\n+    __ cmlt(v27, __ T8H, v28);                         \/\/       cmlt    v27.8H, v28.8H, #0\n+    __ cmlt(v0, __ T2S, v1);                           \/\/       cmlt    v0.2S, v1.2S, #0\n+    __ cmlt(v20, __ T4S, v21);                         \/\/       cmlt    v20.4S, v21.4S, #0\n+    __ cmlt(v28, __ T2D, v29);                         \/\/       cmlt    v28.2D, v29.2D, #0\n+    __ cmle(v15, __ T8B, v16);                         \/\/       cmle    v15.8B, v16.8B, #0\n+    __ cmle(v12, __ T16B, v13);                        \/\/       cmle    v12.16B, v13.16B, #0\n+    __ cmle(v10, __ T4H, v11);                         \/\/       cmle    v10.4H, v11.4H, #0\n+    __ cmle(v28, __ T8H, v29);                         \/\/       cmle    v28.8H, v29.8H, #0\n+    __ cmle(v28, __ T2S, v29);                         \/\/       cmle    v28.2S, v29.2S, #0\n+    __ cmle(v19, __ T4S, v20);                         \/\/       cmle    v19.4S, v20.4S, #0\n+    __ cmle(v22, __ T2D, v23);                         \/\/       cmle    v22.2D, v23.2D, #0\n+    __ fcmgt(v10, __ T2S, v11);                        \/\/       fcmgt   v10.2S, v11.2S, #0\n+    __ fcmgt(v4, __ T4S, v5);                          \/\/       fcmgt   v4.4S, v5.4S, #0\n+    __ fcmgt(v30, __ T2D, v31);                        \/\/       fcmgt   v30.2D, v31.2D, #0\n+    __ fcmge(v20, __ T2S, v21);                        \/\/       fcmge   v20.2S, v21.2S, #0\n+    __ fcmge(v8, __ T4S, v9);                          \/\/       fcmge   v8.4S, v9.4S, #0\n+    __ fcmge(v30, __ T2D, v31);                        \/\/       fcmge   v30.2D, v31.2D, #0\n+    __ fcmeq(v17, __ T2S, v18);                        \/\/       fcmeq   v17.2S, v18.2S, #0\n+    __ fcmeq(v10, __ T4S, v11);                        \/\/       fcmeq   v10.4S, v11.4S, #0\n+    __ fcmeq(v27, __ T2D, v28);                        \/\/       fcmeq   v27.2D, v28.2D, #0\n+    __ fcmlt(v2, __ T2S, v3);                          \/\/       fcmlt   v2.2S, v3.2S, #0\n+    __ fcmlt(v24, __ T4S, v25);                        \/\/       fcmlt   v24.4S, v25.4S, #0\n+    __ fcmlt(v4, __ T2D, v5);                          \/\/       fcmlt   v4.2D, v5.2D, #0\n+    __ fcmle(v3, __ T2S, v4);                          \/\/       fcmle   v3.2S, v4.2S, #0\n+    __ fcmle(v8, __ T4S, v9);                          \/\/       fcmle   v8.4S, v9.4S, #0\n+    __ fcmle(v22, __ T2D, v23);                        \/\/       fcmle   v22.2D, v23.2D, #0\n+\n@@ -626,18 +678,18 @@\n-    __ absr(v12, __ T8B, v13);                         \/\/       abs     v12.8B, v13.8B\n-    __ absr(v15, __ T16B, v16);                        \/\/       abs     v15.16B, v16.16B\n-    __ absr(v11, __ T4H, v12);                         \/\/       abs     v11.4H, v12.4H\n-    __ absr(v10, __ T8H, v11);                         \/\/       abs     v10.8H, v11.8H\n-    __ absr(v17, __ T2S, v18);                         \/\/       abs     v17.2S, v18.2S\n-    __ absr(v24, __ T4S, v25);                         \/\/       abs     v24.4S, v25.4S\n-    __ absr(v21, __ T2D, v22);                         \/\/       abs     v21.2D, v22.2D\n-    __ fabs(v23, __ T2S, v24);                         \/\/       fabs    v23.2S, v24.2S\n-    __ fabs(v0, __ T4S, v1);                           \/\/       fabs    v0.4S, v1.4S\n-    __ fabs(v16, __ T2D, v17);                         \/\/       fabs    v16.2D, v17.2D\n-    __ fneg(v10, __ T2S, v11);                         \/\/       fneg    v10.2S, v11.2S\n-    __ fneg(v6, __ T4S, v7);                           \/\/       fneg    v6.4S, v7.4S\n-    __ fneg(v28, __ T2D, v29);                         \/\/       fneg    v28.2D, v29.2D\n-    __ fsqrt(v6, __ T2S, v7);                          \/\/       fsqrt   v6.2S, v7.2S\n-    __ fsqrt(v5, __ T4S, v6);                          \/\/       fsqrt   v5.4S, v6.4S\n-    __ fsqrt(v5, __ T2D, v6);                          \/\/       fsqrt   v5.2D, v6.2D\n-    __ notr(v20, __ T8B, v21);                         \/\/       not     v20.8B, v21.8B\n-    __ notr(v17, __ T16B, v18);                        \/\/       not     v17.16B, v18.16B\n+    __ absr(v17, __ T8B, v18);                         \/\/       abs     v17.8B, v18.8B\n+    __ absr(v13, __ T16B, v14);                        \/\/       abs     v13.16B, v14.16B\n+    __ absr(v4, __ T4H, v5);                           \/\/       abs     v4.4H, v5.4H\n+    __ absr(v28, __ T8H, v29);                         \/\/       abs     v28.8H, v29.8H\n+    __ absr(v23, __ T2S, v24);                         \/\/       abs     v23.2S, v24.2S\n+    __ absr(v21, __ T4S, v22);                         \/\/       abs     v21.4S, v22.4S\n+    __ absr(v25, __ T2D, v26);                         \/\/       abs     v25.2D, v26.2D\n+    __ fabs(v24, __ T2S, v25);                         \/\/       fabs    v24.2S, v25.2S\n+    __ fabs(v3, __ T4S, v4);                           \/\/       fabs    v3.4S, v4.4S\n+    __ fabs(v23, __ T2D, v24);                         \/\/       fabs    v23.2D, v24.2D\n+    __ fneg(v26, __ T2S, v27);                         \/\/       fneg    v26.2S, v27.2S\n+    __ fneg(v23, __ T4S, v24);                         \/\/       fneg    v23.4S, v24.4S\n+    __ fneg(v14, __ T2D, v15);                         \/\/       fneg    v14.2D, v15.2D\n+    __ fsqrt(v21, __ T2S, v22);                        \/\/       fsqrt   v21.2S, v22.2S\n+    __ fsqrt(v3, __ T4S, v4);                          \/\/       fsqrt   v3.4S, v4.4S\n+    __ fsqrt(v23, __ T2D, v24);                        \/\/       fsqrt   v23.2D, v24.2D\n+    __ notr(v8, __ T8B, v9);                           \/\/       not     v8.8B, v9.8B\n+    __ notr(v24, __ T16B, v25);                        \/\/       not     v24.16B, v25.16B\n@@ -646,38 +698,38 @@\n-    __ andr(v15, __ T8B, v16, v17);                    \/\/       and     v15.8B, v16.8B, v17.8B\n-    __ andr(v17, __ T16B, v18, v19);                   \/\/       and     v17.16B, v18.16B, v19.16B\n-    __ orr(v29, __ T8B, v30, v31);                     \/\/       orr     v29.8B, v30.8B, v31.8B\n-    __ orr(v26, __ T16B, v27, v28);                    \/\/       orr     v26.16B, v27.16B, v28.16B\n-    __ eor(v28, __ T8B, v29, v30);                     \/\/       eor     v28.8B, v29.8B, v30.8B\n-    __ eor(v1, __ T16B, v2, v3);                       \/\/       eor     v1.16B, v2.16B, v3.16B\n-    __ addv(v27, __ T8B, v28, v29);                    \/\/       add     v27.8B, v28.8B, v29.8B\n-    __ addv(v0, __ T16B, v1, v2);                      \/\/       add     v0.16B, v1.16B, v2.16B\n-    __ addv(v20, __ T4H, v21, v22);                    \/\/       add     v20.4H, v21.4H, v22.4H\n-    __ addv(v28, __ T8H, v29, v30);                    \/\/       add     v28.8H, v29.8H, v30.8H\n-    __ addv(v15, __ T2S, v16, v17);                    \/\/       add     v15.2S, v16.2S, v17.2S\n-    __ addv(v12, __ T4S, v13, v14);                    \/\/       add     v12.4S, v13.4S, v14.4S\n-    __ addv(v10, __ T2D, v11, v12);                    \/\/       add     v10.2D, v11.2D, v12.2D\n-    __ fadd(v28, __ T2S, v29, v30);                    \/\/       fadd    v28.2S, v29.2S, v30.2S\n-    __ fadd(v28, __ T4S, v29, v30);                    \/\/       fadd    v28.4S, v29.4S, v30.4S\n-    __ fadd(v19, __ T2D, v20, v21);                    \/\/       fadd    v19.2D, v20.2D, v21.2D\n-    __ subv(v22, __ T8B, v23, v24);                    \/\/       sub     v22.8B, v23.8B, v24.8B\n-    __ subv(v10, __ T16B, v11, v12);                   \/\/       sub     v10.16B, v11.16B, v12.16B\n-    __ subv(v4, __ T4H, v5, v6);                       \/\/       sub     v4.4H, v5.4H, v6.4H\n-    __ subv(v30, __ T8H, v31, v0);                     \/\/       sub     v30.8H, v31.8H, v0.8H\n-    __ subv(v20, __ T2S, v21, v22);                    \/\/       sub     v20.2S, v21.2S, v22.2S\n-    __ subv(v8, __ T4S, v9, v10);                      \/\/       sub     v8.4S, v9.4S, v10.4S\n-    __ subv(v30, __ T2D, v31, v0);                     \/\/       sub     v30.2D, v31.2D, v0.2D\n-    __ fsub(v17, __ T2S, v18, v19);                    \/\/       fsub    v17.2S, v18.2S, v19.2S\n-    __ fsub(v10, __ T4S, v11, v12);                    \/\/       fsub    v10.4S, v11.4S, v12.4S\n-    __ fsub(v27, __ T2D, v28, v29);                    \/\/       fsub    v27.2D, v28.2D, v29.2D\n-    __ mulv(v2, __ T8B, v3, v4);                       \/\/       mul     v2.8B, v3.8B, v4.8B\n-    __ mulv(v24, __ T16B, v25, v26);                   \/\/       mul     v24.16B, v25.16B, v26.16B\n-    __ mulv(v4, __ T4H, v5, v6);                       \/\/       mul     v4.4H, v5.4H, v6.4H\n-    __ mulv(v3, __ T8H, v4, v5);                       \/\/       mul     v3.8H, v4.8H, v5.8H\n-    __ mulv(v8, __ T2S, v9, v10);                      \/\/       mul     v8.2S, v9.2S, v10.2S\n-    __ mulv(v22, __ T4S, v23, v24);                    \/\/       mul     v22.4S, v23.4S, v24.4S\n-    __ fabd(v17, __ T2S, v18, v19);                    \/\/       fabd    v17.2S, v18.2S, v19.2S\n-    __ fabd(v13, __ T4S, v14, v15);                    \/\/       fabd    v13.4S, v14.4S, v15.4S\n-    __ fabd(v4, __ T2D, v5, v6);                       \/\/       fabd    v4.2D, v5.2D, v6.2D\n-    __ faddp(v28, __ T2S, v29, v30);                   \/\/       faddp   v28.2S, v29.2S, v30.2S\n-    __ faddp(v23, __ T4S, v24, v25);                   \/\/       faddp   v23.4S, v24.4S, v25.4S\n-    __ faddp(v21, __ T2D, v22, v23);                   \/\/       faddp   v21.2D, v22.2D, v23.2D\n+    __ andr(v19, __ T8B, v20, v21);                    \/\/       and     v19.8B, v20.8B, v21.8B\n+    __ andr(v15, __ T16B, v16, v17);                   \/\/       and     v15.16B, v16.16B, v17.16B\n+    __ orr(v16, __ T8B, v17, v18);                     \/\/       orr     v16.8B, v17.8B, v18.8B\n+    __ orr(v2, __ T16B, v3, v4);                       \/\/       orr     v2.16B, v3.16B, v4.16B\n+    __ eor(v1, __ T8B, v2, v3);                        \/\/       eor     v1.8B, v2.8B, v3.8B\n+    __ eor(v0, __ T16B, v1, v2);                       \/\/       eor     v0.16B, v1.16B, v2.16B\n+    __ addv(v24, __ T8B, v25, v26);                    \/\/       add     v24.8B, v25.8B, v26.8B\n+    __ addv(v4, __ T16B, v5, v6);                      \/\/       add     v4.16B, v5.16B, v6.16B\n+    __ addv(v3, __ T4H, v4, v5);                       \/\/       add     v3.4H, v4.4H, v5.4H\n+    __ addv(v11, __ T8H, v12, v13);                    \/\/       add     v11.8H, v12.8H, v13.8H\n+    __ addv(v30, __ T2S, v31, v0);                     \/\/       add     v30.2S, v31.2S, v0.2S\n+    __ addv(v27, __ T4S, v28, v29);                    \/\/       add     v27.4S, v28.4S, v29.4S\n+    __ addv(v9, __ T2D, v10, v11);                     \/\/       add     v9.2D, v10.2D, v11.2D\n+    __ fadd(v25, __ T2S, v26, v27);                    \/\/       fadd    v25.2S, v26.2S, v27.2S\n+    __ fadd(v2, __ T4S, v3, v4);                       \/\/       fadd    v2.4S, v3.4S, v4.4S\n+    __ fadd(v12, __ T2D, v13, v14);                    \/\/       fadd    v12.2D, v13.2D, v14.2D\n+    __ subv(v17, __ T8B, v18, v19);                    \/\/       sub     v17.8B, v18.8B, v19.8B\n+    __ subv(v30, __ T16B, v31, v0);                    \/\/       sub     v30.16B, v31.16B, v0.16B\n+    __ subv(v1, __ T4H, v2, v3);                       \/\/       sub     v1.4H, v2.4H, v3.4H\n+    __ subv(v12, __ T8H, v13, v14);                    \/\/       sub     v12.8H, v13.8H, v14.8H\n+    __ subv(v28, __ T2S, v29, v30);                    \/\/       sub     v28.2S, v29.2S, v30.2S\n+    __ subv(v0, __ T4S, v1, v2);                       \/\/       sub     v0.4S, v1.4S, v2.4S\n+    __ subv(v17, __ T2D, v18, v19);                    \/\/       sub     v17.2D, v18.2D, v19.2D\n+    __ fsub(v12, __ T2S, v13, v14);                    \/\/       fsub    v12.2S, v13.2S, v14.2S\n+    __ fsub(v17, __ T4S, v18, v19);                    \/\/       fsub    v17.4S, v18.4S, v19.4S\n+    __ fsub(v21, __ T2D, v22, v23);                    \/\/       fsub    v21.2D, v22.2D, v23.2D\n+    __ mulv(v12, __ T8B, v13, v14);                    \/\/       mul     v12.8B, v13.8B, v14.8B\n+    __ mulv(v27, __ T16B, v28, v29);                   \/\/       mul     v27.16B, v28.16B, v29.16B\n+    __ mulv(v29, __ T4H, v30, v31);                    \/\/       mul     v29.4H, v30.4H, v31.4H\n+    __ mulv(v30, __ T8H, v31, v0);                     \/\/       mul     v30.8H, v31.8H, v0.8H\n+    __ mulv(v1, __ T2S, v2, v3);                       \/\/       mul     v1.2S, v2.2S, v3.2S\n+    __ mulv(v25, __ T4S, v26, v27);                    \/\/       mul     v25.4S, v26.4S, v27.4S\n+    __ fabd(v27, __ T2S, v28, v29);                    \/\/       fabd    v27.2S, v28.2S, v29.2S\n+    __ fabd(v4, __ T4S, v5, v6);                       \/\/       fabd    v4.4S, v5.4S, v6.4S\n+    __ fabd(v29, __ T2D, v30, v31);                    \/\/       fabd    v29.2D, v30.2D, v31.2D\n+    __ faddp(v3, __ T2S, v4, v5);                      \/\/       faddp   v3.2S, v4.2S, v5.2S\n+    __ faddp(v6, __ T4S, v7, v8);                      \/\/       faddp   v6.4S, v7.4S, v8.4S\n+    __ faddp(v29, __ T2D, v30, v31);                   \/\/       faddp   v29.2D, v30.2D, v31.2D\n@@ -685,30 +737,30 @@\n-    __ fmul(v24, __ T4S, v25, v26);                    \/\/       fmul    v24.4S, v25.4S, v26.4S\n-    __ fmul(v3, __ T2D, v4, v5);                       \/\/       fmul    v3.2D, v4.2D, v5.2D\n-    __ mlav(v23, __ T4H, v24, v25);                    \/\/       mla     v23.4H, v24.4H, v25.4H\n-    __ mlav(v26, __ T8H, v27, v28);                    \/\/       mla     v26.8H, v27.8H, v28.8H\n-    __ mlav(v23, __ T2S, v24, v25);                    \/\/       mla     v23.2S, v24.2S, v25.2S\n-    __ mlav(v14, __ T4S, v15, v16);                    \/\/       mla     v14.4S, v15.4S, v16.4S\n-    __ fmla(v21, __ T2S, v22, v23);                    \/\/       fmla    v21.2S, v22.2S, v23.2S\n-    __ fmla(v3, __ T4S, v4, v5);                       \/\/       fmla    v3.4S, v4.4S, v5.4S\n-    __ fmla(v23, __ T2D, v24, v25);                    \/\/       fmla    v23.2D, v24.2D, v25.2D\n-    __ mlsv(v8, __ T4H, v9, v10);                      \/\/       mls     v8.4H, v9.4H, v10.4H\n-    __ mlsv(v24, __ T8H, v25, v26);                    \/\/       mls     v24.8H, v25.8H, v26.8H\n-    __ mlsv(v19, __ T2S, v20, v21);                    \/\/       mls     v19.2S, v20.2S, v21.2S\n-    __ mlsv(v15, __ T4S, v16, v17);                    \/\/       mls     v15.4S, v16.4S, v17.4S\n-    __ fmls(v16, __ T2S, v17, v18);                    \/\/       fmls    v16.2S, v17.2S, v18.2S\n-    __ fmls(v2, __ T4S, v3, v4);                       \/\/       fmls    v2.4S, v3.4S, v4.4S\n-    __ fmls(v1, __ T2D, v2, v3);                       \/\/       fmls    v1.2D, v2.2D, v3.2D\n-    __ fdiv(v0, __ T2S, v1, v2);                       \/\/       fdiv    v0.2S, v1.2S, v2.2S\n-    __ fdiv(v24, __ T4S, v25, v26);                    \/\/       fdiv    v24.4S, v25.4S, v26.4S\n-    __ fdiv(v4, __ T2D, v5, v6);                       \/\/       fdiv    v4.2D, v5.2D, v6.2D\n-    __ maxv(v3, __ T8B, v4, v5);                       \/\/       smax    v3.8B, v4.8B, v5.8B\n-    __ maxv(v11, __ T16B, v12, v13);                   \/\/       smax    v11.16B, v12.16B, v13.16B\n-    __ maxv(v30, __ T4H, v31, v0);                     \/\/       smax    v30.4H, v31.4H, v0.4H\n-    __ maxv(v27, __ T8H, v28, v29);                    \/\/       smax    v27.8H, v28.8H, v29.8H\n-    __ maxv(v9, __ T2S, v10, v11);                     \/\/       smax    v9.2S, v10.2S, v11.2S\n-    __ maxv(v25, __ T4S, v26, v27);                    \/\/       smax    v25.4S, v26.4S, v27.4S\n-    __ smaxp(v2, __ T8B, v3, v4);                      \/\/       smaxp   v2.8B, v3.8B, v4.8B\n-    __ smaxp(v12, __ T16B, v13, v14);                  \/\/       smaxp   v12.16B, v13.16B, v14.16B\n-    __ smaxp(v17, __ T4H, v18, v19);                   \/\/       smaxp   v17.4H, v18.4H, v19.4H\n-    __ smaxp(v30, __ T8H, v31, v0);                    \/\/       smaxp   v30.8H, v31.8H, v0.8H\n-    __ smaxp(v1, __ T2S, v2, v3);                      \/\/       smaxp   v1.2S, v2.2S, v3.2S\n+    __ fmul(v17, __ T4S, v18, v19);                    \/\/       fmul    v17.4S, v18.4S, v19.4S\n+    __ fmul(v8, __ T2D, v9, v10);                      \/\/       fmul    v8.2D, v9.2D, v10.2D\n+    __ mlav(v7, __ T4H, v8, v9);                       \/\/       mla     v7.4H, v8.4H, v9.4H\n+    __ mlav(v12, __ T8H, v13, v14);                    \/\/       mla     v12.8H, v13.8H, v14.8H\n+    __ mlav(v0, __ T2S, v1, v2);                       \/\/       mla     v0.2S, v1.2S, v2.2S\n+    __ mlav(v19, __ T4S, v20, v21);                    \/\/       mla     v19.4S, v20.4S, v21.4S\n+    __ fmla(v1, __ T2S, v2, v3);                       \/\/       fmla    v1.2S, v2.2S, v3.2S\n+    __ fmla(v23, __ T4S, v24, v25);                    \/\/       fmla    v23.4S, v24.4S, v25.4S\n+    __ fmla(v2, __ T2D, v3, v4);                       \/\/       fmla    v2.2D, v3.2D, v4.2D\n+    __ mlsv(v0, __ T4H, v1, v2);                       \/\/       mls     v0.4H, v1.4H, v2.4H\n+    __ mlsv(v8, __ T8H, v9, v10);                      \/\/       mls     v8.8H, v9.8H, v10.8H\n+    __ mlsv(v23, __ T2S, v24, v25);                    \/\/       mls     v23.2S, v24.2S, v25.2S\n+    __ mlsv(v25, __ T4S, v26, v27);                    \/\/       mls     v25.4S, v26.4S, v27.4S\n+    __ fmls(v15, __ T2S, v16, v17);                    \/\/       fmls    v15.2S, v16.2S, v17.2S\n+    __ fmls(v29, __ T4S, v30, v31);                    \/\/       fmls    v29.4S, v30.4S, v31.4S\n+    __ fmls(v3, __ T2D, v4, v5);                       \/\/       fmls    v3.2D, v4.2D, v5.2D\n+    __ fdiv(v10, __ T2S, v11, v12);                    \/\/       fdiv    v10.2S, v11.2S, v12.2S\n+    __ fdiv(v22, __ T4S, v23, v24);                    \/\/       fdiv    v22.4S, v23.4S, v24.4S\n+    __ fdiv(v10, __ T2D, v11, v12);                    \/\/       fdiv    v10.2D, v11.2D, v12.2D\n+    __ maxv(v4, __ T8B, v5, v6);                       \/\/       smax    v4.8B, v5.8B, v6.8B\n+    __ maxv(v17, __ T16B, v18, v19);                   \/\/       smax    v17.16B, v18.16B, v19.16B\n+    __ maxv(v1, __ T4H, v2, v3);                       \/\/       smax    v1.4H, v2.4H, v3.4H\n+    __ maxv(v11, __ T8H, v12, v13);                    \/\/       smax    v11.8H, v12.8H, v13.8H\n+    __ maxv(v7, __ T2S, v8, v9);                       \/\/       smax    v7.2S, v8.2S, v9.2S\n+    __ maxv(v10, __ T4S, v11, v12);                    \/\/       smax    v10.4S, v11.4S, v12.4S\n+    __ smaxp(v15, __ T8B, v16, v17);                   \/\/       smaxp   v15.8B, v16.8B, v17.8B\n+    __ smaxp(v16, __ T16B, v17, v18);                  \/\/       smaxp   v16.16B, v17.16B, v18.16B\n+    __ smaxp(v2, __ T4H, v3, v4);                      \/\/       smaxp   v2.4H, v3.4H, v4.4H\n+    __ smaxp(v9, __ T8H, v10, v11);                    \/\/       smaxp   v9.8H, v10.8H, v11.8H\n+    __ smaxp(v11, __ T2S, v12, v13);                   \/\/       smaxp   v11.2S, v12.2S, v13.2S\n@@ -716,25 +768,25 @@\n-    __ fmax(v28, __ T2S, v29, v30);                    \/\/       fmax    v28.2S, v29.2S, v30.2S\n-    __ fmax(v0, __ T4S, v1, v2);                       \/\/       fmax    v0.4S, v1.4S, v2.4S\n-    __ fmax(v17, __ T2D, v18, v19);                    \/\/       fmax    v17.2D, v18.2D, v19.2D\n-    __ minv(v12, __ T8B, v13, v14);                    \/\/       smin    v12.8B, v13.8B, v14.8B\n-    __ minv(v17, __ T16B, v18, v19);                   \/\/       smin    v17.16B, v18.16B, v19.16B\n-    __ minv(v21, __ T4H, v22, v23);                    \/\/       smin    v21.4H, v22.4H, v23.4H\n-    __ minv(v12, __ T8H, v13, v14);                    \/\/       smin    v12.8H, v13.8H, v14.8H\n-    __ minv(v27, __ T2S, v28, v29);                    \/\/       smin    v27.2S, v28.2S, v29.2S\n-    __ minv(v29, __ T4S, v30, v31);                    \/\/       smin    v29.4S, v30.4S, v31.4S\n-    __ sminp(v30, __ T8B, v31, v0);                    \/\/       sminp   v30.8B, v31.8B, v0.8B\n-    __ sminp(v1, __ T16B, v2, v3);                     \/\/       sminp   v1.16B, v2.16B, v3.16B\n-    __ sminp(v25, __ T4H, v26, v27);                   \/\/       sminp   v25.4H, v26.4H, v27.4H\n-    __ sminp(v27, __ T8H, v28, v29);                   \/\/       sminp   v27.8H, v28.8H, v29.8H\n-    __ sminp(v4, __ T2S, v5, v6);                      \/\/       sminp   v4.2S, v5.2S, v6.2S\n-    __ sminp(v29, __ T4S, v30, v31);                   \/\/       sminp   v29.4S, v30.4S, v31.4S\n-    __ fmin(v3, __ T2S, v4, v5);                       \/\/       fmin    v3.2S, v4.2S, v5.2S\n-    __ fmin(v6, __ T4S, v7, v8);                       \/\/       fmin    v6.4S, v7.4S, v8.4S\n-    __ fmin(v29, __ T2D, v30, v31);                    \/\/       fmin    v29.2D, v30.2D, v31.2D\n-    __ cmeq(v25, __ T8B, v26, v27);                    \/\/       cmeq    v25.8B, v26.8B, v27.8B\n-    __ cmeq(v17, __ T16B, v18, v19);                   \/\/       cmeq    v17.16B, v18.16B, v19.16B\n-    __ cmeq(v8, __ T4H, v9, v10);                      \/\/       cmeq    v8.4H, v9.4H, v10.4H\n-    __ cmeq(v7, __ T8H, v8, v9);                       \/\/       cmeq    v7.8H, v8.8H, v9.8H\n-    __ cmeq(v12, __ T2S, v13, v14);                    \/\/       cmeq    v12.2S, v13.2S, v14.2S\n-    __ cmeq(v0, __ T4S, v1, v2);                       \/\/       cmeq    v0.4S, v1.4S, v2.4S\n-    __ cmeq(v19, __ T2D, v20, v21);                    \/\/       cmeq    v19.2D, v20.2D, v21.2D\n+    __ fmax(v14, __ T2S, v15, v16);                    \/\/       fmax    v14.2S, v15.2S, v16.2S\n+    __ fmax(v13, __ T4S, v14, v15);                    \/\/       fmax    v13.4S, v14.4S, v15.4S\n+    __ fmax(v2, __ T2D, v3, v4);                       \/\/       fmax    v2.2D, v3.2D, v4.2D\n+    __ minv(v6, __ T8B, v7, v8);                       \/\/       smin    v6.8B, v7.8B, v8.8B\n+    __ minv(v19, __ T16B, v20, v21);                   \/\/       smin    v19.16B, v20.16B, v21.16B\n+    __ minv(v25, __ T4H, v26, v27);                    \/\/       smin    v25.4H, v26.4H, v27.4H\n+    __ minv(v15, __ T8H, v16, v17);                    \/\/       smin    v15.8H, v16.8H, v17.8H\n+    __ minv(v4, __ T2S, v5, v6);                       \/\/       smin    v4.2S, v5.2S, v6.2S\n+    __ minv(v2, __ T4S, v3, v4);                       \/\/       smin    v2.4S, v3.4S, v4.4S\n+    __ sminp(v4, __ T8B, v5, v6);                      \/\/       sminp   v4.8B, v5.8B, v6.8B\n+    __ sminp(v11, __ T16B, v12, v13);                  \/\/       sminp   v11.16B, v12.16B, v13.16B\n+    __ sminp(v17, __ T4H, v18, v19);                   \/\/       sminp   v17.4H, v18.4H, v19.4H\n+    __ sminp(v20, __ T8H, v21, v22);                   \/\/       sminp   v20.8H, v21.8H, v22.8H\n+    __ sminp(v16, __ T2S, v17, v18);                   \/\/       sminp   v16.2S, v17.2S, v18.2S\n+    __ sminp(v17, __ T4S, v18, v19);                   \/\/       sminp   v17.4S, v18.4S, v19.4S\n+    __ fmin(v10, __ T2S, v11, v12);                    \/\/       fmin    v10.2S, v11.2S, v12.2S\n+    __ fmin(v20, __ T4S, v21, v22);                    \/\/       fmin    v20.4S, v21.4S, v22.4S\n+    __ fmin(v22, __ T2D, v23, v24);                    \/\/       fmin    v22.2D, v23.2D, v24.2D\n+    __ cmeq(v12, __ T8B, v13, v14);                    \/\/       cmeq    v12.8B, v13.8B, v14.8B\n+    __ cmeq(v25, __ T16B, v26, v27);                   \/\/       cmeq    v25.16B, v26.16B, v27.16B\n+    __ cmeq(v23, __ T4H, v24, v25);                    \/\/       cmeq    v23.4H, v24.4H, v25.4H\n+    __ cmeq(v28, __ T8H, v29, v30);                    \/\/       cmeq    v28.8H, v29.8H, v30.8H\n+    __ cmeq(v14, __ T2S, v15, v16);                    \/\/       cmeq    v14.2S, v15.2S, v16.2S\n+    __ cmeq(v10, __ T4S, v11, v12);                    \/\/       cmeq    v10.4S, v11.4S, v12.4S\n+    __ cmeq(v24, __ T2D, v25, v26);                    \/\/       cmeq    v24.2D, v25.2D, v26.2D\n@@ -742,39 +794,39 @@\n-    __ fcmeq(v23, __ T4S, v24, v25);                   \/\/       fcmeq   v23.4S, v24.4S, v25.4S\n-    __ fcmeq(v2, __ T2D, v3, v4);                      \/\/       fcmeq   v2.2D, v3.2D, v4.2D\n-    __ cmgt(v0, __ T8B, v1, v2);                       \/\/       cmgt    v0.8B, v1.8B, v2.8B\n-    __ cmgt(v8, __ T16B, v9, v10);                     \/\/       cmgt    v8.16B, v9.16B, v10.16B\n-    __ cmgt(v23, __ T4H, v24, v25);                    \/\/       cmgt    v23.4H, v24.4H, v25.4H\n-    __ cmgt(v25, __ T8H, v26, v27);                    \/\/       cmgt    v25.8H, v26.8H, v27.8H\n-    __ cmgt(v15, __ T2S, v16, v17);                    \/\/       cmgt    v15.2S, v16.2S, v17.2S\n-    __ cmgt(v29, __ T4S, v30, v31);                    \/\/       cmgt    v29.4S, v30.4S, v31.4S\n-    __ cmgt(v3, __ T2D, v4, v5);                       \/\/       cmgt    v3.2D, v4.2D, v5.2D\n-    __ cmhi(v10, __ T8B, v11, v12);                    \/\/       cmhi    v10.8B, v11.8B, v12.8B\n-    __ cmhi(v22, __ T16B, v23, v24);                   \/\/       cmhi    v22.16B, v23.16B, v24.16B\n-    __ cmhi(v10, __ T4H, v11, v12);                    \/\/       cmhi    v10.4H, v11.4H, v12.4H\n-    __ cmhi(v4, __ T8H, v5, v6);                       \/\/       cmhi    v4.8H, v5.8H, v6.8H\n-    __ cmhi(v17, __ T2S, v18, v19);                    \/\/       cmhi    v17.2S, v18.2S, v19.2S\n-    __ cmhi(v1, __ T4S, v2, v3);                       \/\/       cmhi    v1.4S, v2.4S, v3.4S\n-    __ cmhi(v11, __ T2D, v12, v13);                    \/\/       cmhi    v11.2D, v12.2D, v13.2D\n-    __ cmhs(v7, __ T8B, v8, v9);                       \/\/       cmhs    v7.8B, v8.8B, v9.8B\n-    __ cmhs(v10, __ T16B, v11, v12);                   \/\/       cmhs    v10.16B, v11.16B, v12.16B\n-    __ cmhs(v15, __ T4H, v16, v17);                    \/\/       cmhs    v15.4H, v16.4H, v17.4H\n-    __ cmhs(v16, __ T8H, v17, v18);                    \/\/       cmhs    v16.8H, v17.8H, v18.8H\n-    __ cmhs(v2, __ T2S, v3, v4);                       \/\/       cmhs    v2.2S, v3.2S, v4.2S\n-    __ cmhs(v9, __ T4S, v10, v11);                     \/\/       cmhs    v9.4S, v10.4S, v11.4S\n-    __ cmhs(v11, __ T2D, v12, v13);                    \/\/       cmhs    v11.2D, v12.2D, v13.2D\n-    __ fcmgt(v12, __ T2S, v13, v14);                   \/\/       fcmgt   v12.2S, v13.2S, v14.2S\n-    __ fcmgt(v14, __ T4S, v15, v16);                   \/\/       fcmgt   v14.4S, v15.4S, v16.4S\n-    __ fcmgt(v13, __ T2D, v14, v15);                   \/\/       fcmgt   v13.2D, v14.2D, v15.2D\n-    __ cmge(v2, __ T8B, v3, v4);                       \/\/       cmge    v2.8B, v3.8B, v4.8B\n-    __ cmge(v6, __ T16B, v7, v8);                      \/\/       cmge    v6.16B, v7.16B, v8.16B\n-    __ cmge(v19, __ T4H, v20, v21);                    \/\/       cmge    v19.4H, v20.4H, v21.4H\n-    __ cmge(v25, __ T8H, v26, v27);                    \/\/       cmge    v25.8H, v26.8H, v27.8H\n-    __ cmge(v15, __ T2S, v16, v17);                    \/\/       cmge    v15.2S, v16.2S, v17.2S\n-    __ cmge(v4, __ T4S, v5, v6);                       \/\/       cmge    v4.4S, v5.4S, v6.4S\n-    __ cmge(v2, __ T2D, v3, v4);                       \/\/       cmge    v2.2D, v3.2D, v4.2D\n-    __ fcmge(v4, __ T2S, v5, v6);                      \/\/       fcmge   v4.2S, v5.2S, v6.2S\n-    __ fcmge(v11, __ T4S, v12, v13);                   \/\/       fcmge   v11.4S, v12.4S, v13.4S\n-    __ fcmge(v17, __ T2D, v18, v19);                   \/\/       fcmge   v17.2D, v18.2D, v19.2D\n-    __ facgt(v20, __ T2S, v21, v22);                   \/\/       facgt   v20.2S, v21.2S, v22.2S\n-    __ facgt(v16, __ T4S, v17, v18);                   \/\/       facgt   v16.4S, v17.4S, v18.4S\n-    __ facgt(v17, __ T2D, v18, v19);                   \/\/       facgt   v17.2D, v18.2D, v19.2D\n+    __ fcmeq(v11, __ T4S, v12, v13);                   \/\/       fcmeq   v11.4S, v12.4S, v13.4S\n+    __ fcmeq(v30, __ T2D, v31, v0);                    \/\/       fcmeq   v30.2D, v31.2D, v0.2D\n+    __ cmgt(v10, __ T8B, v11, v12);                    \/\/       cmgt    v10.8B, v11.8B, v12.8B\n+    __ cmgt(v15, __ T16B, v16, v17);                   \/\/       cmgt    v15.16B, v16.16B, v17.16B\n+    __ cmgt(v7, __ T4H, v8, v9);                       \/\/       cmgt    v7.4H, v8.4H, v9.4H\n+    __ cmgt(v2, __ T8H, v3, v4);                       \/\/       cmgt    v2.8H, v3.8H, v4.8H\n+    __ cmgt(v3, __ T2S, v4, v5);                       \/\/       cmgt    v3.2S, v4.2S, v5.2S\n+    __ cmgt(v13, __ T4S, v14, v15);                    \/\/       cmgt    v13.4S, v14.4S, v15.4S\n+    __ cmgt(v19, __ T2D, v20, v21);                    \/\/       cmgt    v19.2D, v20.2D, v21.2D\n+    __ cmhi(v16, __ T8B, v17, v18);                    \/\/       cmhi    v16.8B, v17.8B, v18.8B\n+    __ cmhi(v16, __ T16B, v17, v18);                   \/\/       cmhi    v16.16B, v17.16B, v18.16B\n+    __ cmhi(v3, __ T4H, v4, v5);                       \/\/       cmhi    v3.4H, v4.4H, v5.4H\n+    __ cmhi(v1, __ T8H, v2, v3);                       \/\/       cmhi    v1.8H, v2.8H, v3.8H\n+    __ cmhi(v11, __ T2S, v12, v13);                    \/\/       cmhi    v11.2S, v12.2S, v13.2S\n+    __ cmhi(v29, __ T4S, v30, v31);                    \/\/       cmhi    v29.4S, v30.4S, v31.4S\n+    __ cmhi(v5, __ T2D, v6, v7);                       \/\/       cmhi    v5.2D, v6.2D, v7.2D\n+    __ cmhs(v8, __ T8B, v9, v10);                      \/\/       cmhs    v8.8B, v9.8B, v10.8B\n+    __ cmhs(v14, __ T16B, v15, v16);                   \/\/       cmhs    v14.16B, v15.16B, v16.16B\n+    __ cmhs(v28, __ T4H, v29, v30);                    \/\/       cmhs    v28.4H, v29.4H, v30.4H\n+    __ cmhs(v29, __ T8H, v30, v31);                    \/\/       cmhs    v29.8H, v30.8H, v31.8H\n+    __ cmhs(v0, __ T2S, v1, v2);                       \/\/       cmhs    v0.2S, v1.2S, v2.2S\n+    __ cmhs(v20, __ T4S, v21, v22);                    \/\/       cmhs    v20.4S, v21.4S, v22.4S\n+    __ cmhs(v7, __ T2D, v8, v9);                       \/\/       cmhs    v7.2D, v8.2D, v9.2D\n+    __ fcmgt(v20, __ T2S, v21, v22);                   \/\/       fcmgt   v20.2S, v21.2S, v22.2S\n+    __ fcmgt(v23, __ T4S, v24, v25);                   \/\/       fcmgt   v23.4S, v24.4S, v25.4S\n+    __ fcmgt(v27, __ T2D, v28, v29);                   \/\/       fcmgt   v27.2D, v28.2D, v29.2D\n+    __ cmge(v21, __ T8B, v22, v23);                    \/\/       cmge    v21.8B, v22.8B, v23.8B\n+    __ cmge(v26, __ T16B, v27, v28);                   \/\/       cmge    v26.16B, v27.16B, v28.16B\n+    __ cmge(v24, __ T4H, v25, v26);                    \/\/       cmge    v24.4H, v25.4H, v26.4H\n+    __ cmge(v4, __ T8H, v5, v6);                       \/\/       cmge    v4.8H, v5.8H, v6.8H\n+    __ cmge(v1, __ T2S, v2, v3);                       \/\/       cmge    v1.2S, v2.2S, v3.2S\n+    __ cmge(v22, __ T4S, v23, v24);                    \/\/       cmge    v22.4S, v23.4S, v24.4S\n+    __ cmge(v16, __ T2D, v17, v18);                    \/\/       cmge    v16.2D, v17.2D, v18.2D\n+    __ fcmge(v30, __ T2S, v31, v0);                    \/\/       fcmge   v30.2S, v31.2S, v0.2S\n+    __ fcmge(v5, __ T4S, v6, v7);                      \/\/       fcmge   v5.4S, v6.4S, v7.4S\n+    __ fcmge(v11, __ T2D, v12, v13);                   \/\/       fcmge   v11.2D, v12.2D, v13.2D\n+    __ facgt(v8, __ T2S, v9, v10);                     \/\/       facgt   v8.2S, v9.2S, v10.2S\n+    __ facgt(v27, __ T4S, v28, v29);                   \/\/       facgt   v27.4S, v28.4S, v29.4S\n+    __ facgt(v14, __ T2D, v15, v16);                   \/\/       facgt   v14.2D, v15.2D, v16.2D\n@@ -783,6 +835,6 @@\n-    __ sve_fcm(Assembler::EQ, p5, __ D, p3, z20, 0.0); \/\/       fcmeq   p5.d, p3\/z, z20.d, #0.0\n-    __ sve_fcm(Assembler::GT, p13, __ D, p3, z23, 0.0); \/\/      fcmgt   p13.d, p3\/z, z23.d, #0.0\n-    __ sve_fcm(Assembler::GE, p5, __ S, p3, z24, 0.0); \/\/       fcmge   p5.s, p3\/z, z24.s, #0.0\n-    __ sve_fcm(Assembler::LT, p15, __ D, p1, z10, 0.0); \/\/      fcmlt   p15.d, p1\/z, z10.d, #0.0\n-    __ sve_fcm(Assembler::LE, p1, __ S, p4, z3, 0.0);  \/\/       fcmle   p1.s, p4\/z, z3.s, #0.0\n-    __ sve_fcm(Assembler::NE, p8, __ S, p0, z16, 0.0); \/\/       fcmne   p8.s, p0\/z, z16.s, #0.0\n+    __ sve_fcm(Assembler::EQ, p14, __ D, p4, z21, 0.0); \/\/      fcmeq   p14.d, p4\/z, z21.d, #0.0\n+    __ sve_fcm(Assembler::GT, p15, __ S, p4, z5, 0.0); \/\/       fcmgt   p15.s, p4\/z, z5.s, #0.0\n+    __ sve_fcm(Assembler::GE, p15, __ D, p5, z17, 0.0); \/\/      fcmge   p15.d, p5\/z, z17.d, #0.0\n+    __ sve_fcm(Assembler::LT, p8, __ S, p2, z12, 0.0); \/\/       fcmlt   p8.s, p2\/z, z12.s, #0.0\n+    __ sve_fcm(Assembler::LE, p3, __ D, p6, z29, 0.0); \/\/       fcmle   p3.d, p6\/z, z29.d, #0.0\n+    __ sve_fcm(Assembler::NE, p14, __ S, p2, z29, 0.0); \/\/      fcmne   p14.s, p2\/z, z29.s, #0.0\n@@ -1043,9 +1095,9 @@\n-    __ swp(Assembler::xword, r11, r30, r5);            \/\/       swp     x11, x30, [x5]\n-    __ ldadd(Assembler::xword, r8, r15, r29);          \/\/       ldadd   x8, x15, [x29]\n-    __ ldbic(Assembler::xword, r30, r0, r20);          \/\/       ldclr   x30, x0, [x20]\n-    __ ldeor(Assembler::xword, r7, r20, r23);          \/\/       ldeor   x7, x20, [x23]\n-    __ ldorr(Assembler::xword, r28, r21, r27);         \/\/       ldset   x28, x21, [x27]\n-    __ ldsmin(Assembler::xword, r25, r5, r1);          \/\/       ldsmin  x25, x5, [x1]\n-    __ ldsmax(Assembler::xword, r23, r16, sp);         \/\/       ldsmax  x23, x16, [sp]\n-    __ ldumin(Assembler::xword, r5, r12, r9);          \/\/       ldumin  x5, x12, [x9]\n-    __ ldumax(Assembler::xword, r28, r15, r29);        \/\/       ldumax  x28, x15, [x29]\n+    __ swp(Assembler::xword, r20, r10, r4);            \/\/       swp     x20, x10, [x4]\n+    __ ldadd(Assembler::xword, r24, r17, r17);         \/\/       ldadd   x24, x17, [x17]\n+    __ ldbic(Assembler::xword, r22, r3, r29);          \/\/       ldclr   x22, x3, [x29]\n+    __ ldeor(Assembler::xword, r15, r22, r19);         \/\/       ldeor   x15, x22, [x19]\n+    __ ldorr(Assembler::xword, r19, r22, r2);          \/\/       ldset   x19, x22, [x2]\n+    __ ldsmin(Assembler::xword, r15, r6, r12);         \/\/       ldsmin  x15, x6, [x12]\n+    __ ldsmax(Assembler::xword, r16, r11, r13);        \/\/       ldsmax  x16, x11, [x13]\n+    __ ldumin(Assembler::xword, r23, r1, r30);         \/\/       ldumin  x23, x1, [x30]\n+    __ ldumax(Assembler::xword, r19, r5, r17);         \/\/       ldumax  x19, x5, [x17]\n@@ -1054,9 +1106,9 @@\n-    __ swpa(Assembler::xword, r22, zr, r19);           \/\/       swpa    x22, xzr, [x19]\n-    __ ldadda(Assembler::xword, zr, r5, r14);          \/\/       ldadda  xzr, x5, [x14]\n-    __ ldbica(Assembler::xword, r16, zr, r15);         \/\/       ldclra  x16, xzr, [x15]\n-    __ ldeora(Assembler::xword, r27, r20, r16);        \/\/       ldeora  x27, x20, [x16]\n-    __ ldorra(Assembler::xword, r12, r11, r9);         \/\/       ldseta  x12, x11, [x9]\n-    __ ldsmina(Assembler::xword, r6, r30, r17);        \/\/       ldsmina x6, x30, [x17]\n-    __ ldsmaxa(Assembler::xword, r27, r28, r30);       \/\/       ldsmaxa x27, x28, [x30]\n-    __ ldumina(Assembler::xword, r7, r10, r20);        \/\/       ldumina x7, x10, [x20]\n-    __ ldumaxa(Assembler::xword, r10, r4, r24);        \/\/       ldumaxa x10, x4, [x24]\n+    __ swpa(Assembler::xword, r2, r16, r22);           \/\/       swpa    x2, x16, [x22]\n+    __ ldadda(Assembler::xword, r13, r10, r21);        \/\/       ldadda  x13, x10, [x21]\n+    __ ldbica(Assembler::xword, r29, r27, r12);        \/\/       ldclra  x29, x27, [x12]\n+    __ ldeora(Assembler::xword, r27, r3, r1);          \/\/       ldeora  x27, x3, [x1]\n+    __ ldorra(Assembler::xword, zr, r24, r19);         \/\/       ldseta  xzr, x24, [x19]\n+    __ ldsmina(Assembler::xword, r17, r9, r28);        \/\/       ldsmina x17, x9, [x28]\n+    __ ldsmaxa(Assembler::xword, r27, r15, r7);        \/\/       ldsmaxa x27, x15, [x7]\n+    __ ldumina(Assembler::xword, r21, r23, sp);        \/\/       ldumina x21, x23, [sp]\n+    __ ldumaxa(Assembler::xword, r25, r2, sp);         \/\/       ldumaxa x25, x2, [sp]\n@@ -1065,9 +1117,9 @@\n-    __ swpal(Assembler::xword, r17, r17, r22);         \/\/       swpal   x17, x17, [x22]\n-    __ ldaddal(Assembler::xword, r3, r29, r15);        \/\/       ldaddal x3, x29, [x15]\n-    __ ldbical(Assembler::xword, r22, r19, r19);       \/\/       ldclral x22, x19, [x19]\n-    __ ldeoral(Assembler::xword, r22, r2, r15);        \/\/       ldeoral x22, x2, [x15]\n-    __ ldorral(Assembler::xword, r6, r12, r16);        \/\/       ldsetal x6, x12, [x16]\n-    __ ldsminal(Assembler::xword, r11, r13, r23);      \/\/       ldsminal        x11, x13, [x23]\n-    __ ldsmaxal(Assembler::xword, r1, r30, r19);       \/\/       ldsmaxal        x1, x30, [x19]\n-    __ lduminal(Assembler::xword, r5, r17, r2);        \/\/       lduminal        x5, x17, [x2]\n-    __ ldumaxal(Assembler::xword, r16, r22, r13);      \/\/       ldumaxal        x16, x22, [x13]\n+    __ swpal(Assembler::xword, r27, r16, r10);         \/\/       swpal   x27, x16, [x10]\n+    __ ldaddal(Assembler::xword, r23, r19, r3);        \/\/       ldaddal x23, x19, [x3]\n+    __ ldbical(Assembler::xword, r16, r0, r25);        \/\/       ldclral x16, x0, [x25]\n+    __ ldeoral(Assembler::xword, r26, r23, r2);        \/\/       ldeoral x26, x23, [x2]\n+    __ ldorral(Assembler::xword, r16, r12, r4);        \/\/       ldsetal x16, x12, [x4]\n+    __ ldsminal(Assembler::xword, r28, r30, r29);      \/\/       ldsminal        x28, x30, [x29]\n+    __ ldsmaxal(Assembler::xword, r16, r27, r6);       \/\/       ldsmaxal        x16, x27, [x6]\n+    __ lduminal(Assembler::xword, r9, r29, r15);       \/\/       lduminal        x9, x29, [x15]\n+    __ ldumaxal(Assembler::xword, r7, r4, r7);         \/\/       ldumaxal        x7, x4, [x7]\n@@ -1076,9 +1128,9 @@\n-    __ swpl(Assembler::xword, r10, r21, r29);          \/\/       swpl    x10, x21, [x29]\n-    __ ldaddl(Assembler::xword, r27, r12, r27);        \/\/       ldaddl  x27, x12, [x27]\n-    __ ldbicl(Assembler::xword, r3, r1, sp);           \/\/       ldclrl  x3, x1, [sp]\n-    __ ldeorl(Assembler::xword, r24, r19, r17);        \/\/       ldeorl  x24, x19, [x17]\n-    __ ldorrl(Assembler::xword, r9, r28, r27);         \/\/       ldsetl  x9, x28, [x27]\n-    __ ldsminl(Assembler::xword, r15, r7, r21);        \/\/       ldsminl x15, x7, [x21]\n-    __ ldsmaxl(Assembler::xword, r23, zr, r25);        \/\/       ldsmaxl x23, xzr, [x25]\n-    __ lduminl(Assembler::xword, r2, zr, r27);         \/\/       lduminl x2, xzr, [x27]\n-    __ ldumaxl(Assembler::xword, r16, r10, r23);       \/\/       ldumaxl x16, x10, [x23]\n+    __ swpl(Assembler::xword, r15, r9, r23);           \/\/       swpl    x15, x9, [x23]\n+    __ ldaddl(Assembler::xword, r8, r2, r28);          \/\/       ldaddl  x8, x2, [x28]\n+    __ ldbicl(Assembler::xword, r21, zr, r5);          \/\/       ldclrl  x21, xzr, [x5]\n+    __ ldeorl(Assembler::xword, r27, r0, r17);         \/\/       ldeorl  x27, x0, [x17]\n+    __ ldorrl(Assembler::xword, r15, r4, r26);         \/\/       ldsetl  x15, x4, [x26]\n+    __ ldsminl(Assembler::xword, r8, r28, r22);        \/\/       ldsminl x8, x28, [x22]\n+    __ ldsmaxl(Assembler::xword, r27, r27, r25);       \/\/       ldsmaxl x27, x27, [x25]\n+    __ lduminl(Assembler::xword, r23, r0, r4);         \/\/       lduminl x23, x0, [x4]\n+    __ ldumaxl(Assembler::xword, r6, r16, r0);         \/\/       ldumaxl x6, x16, [x0]\n@@ -1087,9 +1139,9 @@\n-    __ swp(Assembler::word, r19, r3, r15);             \/\/       swp     w19, w3, [x15]\n-    __ ldadd(Assembler::word, r0, r25, r26);           \/\/       ldadd   w0, w25, [x26]\n-    __ ldbic(Assembler::word, r23, r2, r15);           \/\/       ldclr   w23, w2, [x15]\n-    __ ldeor(Assembler::word, r12, r4, r28);           \/\/       ldeor   w12, w4, [x28]\n-    __ ldorr(Assembler::word, r30, r29, r16);          \/\/       ldset   w30, w29, [x16]\n-    __ ldsmin(Assembler::word, r27, r6, r9);           \/\/       ldsmin  w27, w6, [x9]\n-    __ ldsmax(Assembler::word, r29, r16, r7);          \/\/       ldsmax  w29, w16, [x7]\n-    __ ldumin(Assembler::word, r4, r7, r15);           \/\/       ldumin  w4, w7, [x15]\n-    __ ldumax(Assembler::word, r9, r23, r8);           \/\/       ldumax  w9, w23, [x8]\n+    __ swp(Assembler::word, r4, r15, r1);              \/\/       swp     w4, w15, [x1]\n+    __ ldadd(Assembler::word, r10, r7, r5);            \/\/       ldadd   w10, w7, [x5]\n+    __ ldbic(Assembler::word, r10, r28, r7);           \/\/       ldclr   w10, w28, [x7]\n+    __ ldeor(Assembler::word, r20, r23, r21);          \/\/       ldeor   w20, w23, [x21]\n+    __ ldorr(Assembler::word, r6, r11, r8);            \/\/       ldset   w6, w11, [x8]\n+    __ ldsmin(Assembler::word, r17, zr, r6);           \/\/       ldsmin  w17, wzr, [x6]\n+    __ ldsmax(Assembler::word, r17, r2, r12);          \/\/       ldsmax  w17, w2, [x12]\n+    __ ldumin(Assembler::word, r30, r29, r3);          \/\/       ldumin  w30, w29, [x3]\n+    __ ldumax(Assembler::word, r27, r22, r29);         \/\/       ldumax  w27, w22, [x29]\n@@ -1098,9 +1150,9 @@\n-    __ swpa(Assembler::word, r2, r28, r21);            \/\/       swpa    w2, w28, [x21]\n-    __ ldadda(Assembler::word, zr, r5, r27);           \/\/       ldadda  wzr, w5, [x27]\n-    __ ldbica(Assembler::word, r0, r17, r15);          \/\/       ldclra  w0, w17, [x15]\n-    __ ldeora(Assembler::word, r4, r26, r8);           \/\/       ldeora  w4, w26, [x8]\n-    __ ldorra(Assembler::word, r28, r22, r27);         \/\/       ldseta  w28, w22, [x27]\n-    __ ldsmina(Assembler::word, r27, r25, r23);        \/\/       ldsmina w27, w25, [x23]\n-    __ ldsmaxa(Assembler::word, r0, r4, r6);           \/\/       ldsmaxa w0, w4, [x6]\n-    __ ldumina(Assembler::word, r16, r0, r4);          \/\/       ldumina w16, w0, [x4]\n-    __ ldumaxa(Assembler::word, r15, r1, r10);         \/\/       ldumaxa w15, w1, [x10]\n+    __ swpa(Assembler::word, r14, r13, r28);           \/\/       swpa    w14, w13, [x28]\n+    __ ldadda(Assembler::word, r17, r24, r5);          \/\/       ldadda  w17, w24, [x5]\n+    __ ldbica(Assembler::word, r2, r14, r10);          \/\/       ldclra  w2, w14, [x10]\n+    __ ldeora(Assembler::word, r16, r11, r27);         \/\/       ldeora  w16, w11, [x27]\n+    __ ldorra(Assembler::word, r23, r12, r4);          \/\/       ldseta  w23, w12, [x4]\n+    __ ldsmina(Assembler::word, r22, r17, r4);         \/\/       ldsmina w22, w17, [x4]\n+    __ ldsmaxa(Assembler::word, r1, r19, r16);         \/\/       ldsmaxa w1, w19, [x16]\n+    __ ldumina(Assembler::word, r16, r13, r14);        \/\/       ldumina w16, w13, [x14]\n+    __ ldumaxa(Assembler::word, r12, r2, r17);         \/\/       ldumaxa w12, w2, [x17]\n@@ -1109,9 +1161,9 @@\n-    __ swpal(Assembler::word, r7, r5, r10);            \/\/       swpal   w7, w5, [x10]\n-    __ ldaddal(Assembler::word, r28, r7, r20);         \/\/       ldaddal w28, w7, [x20]\n-    __ ldbical(Assembler::word, r23, r21, r6);         \/\/       ldclral w23, w21, [x6]\n-    __ ldeoral(Assembler::word, r11, r8, r17);         \/\/       ldeoral w11, w8, [x17]\n-    __ ldorral(Assembler::word, zr, r6, r17);          \/\/       ldsetal wzr, w6, [x17]\n-    __ ldsminal(Assembler::word, r2, r12, r30);        \/\/       ldsminal        w2, w12, [x30]\n-    __ ldsmaxal(Assembler::word, r29, r3, r27);        \/\/       ldsmaxal        w29, w3, [x27]\n-    __ lduminal(Assembler::word, r22, r29, r14);       \/\/       lduminal        w22, w29, [x14]\n-    __ ldumaxal(Assembler::word, r13, r28, r17);       \/\/       ldumaxal        w13, w28, [x17]\n+    __ swpal(Assembler::word, r3, r21, r23);           \/\/       swpal   w3, w21, [x23]\n+    __ ldaddal(Assembler::word, r5, r6, r7);           \/\/       ldaddal w5, w6, [x7]\n+    __ ldbical(Assembler::word, r19, r13, r28);        \/\/       ldclral w19, w13, [x28]\n+    __ ldeoral(Assembler::word, r17, r16, r6);         \/\/       ldeoral w17, w16, [x6]\n+    __ ldorral(Assembler::word, r2, r29, r3);          \/\/       ldsetal w2, w29, [x3]\n+    __ ldsminal(Assembler::word, r4, r6, r15);         \/\/       ldsminal        w4, w6, [x15]\n+    __ ldsmaxal(Assembler::word, r20, r13, r12);       \/\/       ldsmaxal        w20, w13, [x12]\n+    __ lduminal(Assembler::word, r20, r8, r25);        \/\/       lduminal        w20, w8, [x25]\n+    __ ldumaxal(Assembler::word, r20, r19, r0);        \/\/       ldumaxal        w20, w19, [x0]\n@@ -1120,9 +1172,9 @@\n-    __ swpl(Assembler::word, r24, r5, r2);             \/\/       swpl    w24, w5, [x2]\n-    __ ldaddl(Assembler::word, r14, r10, r16);         \/\/       ldaddl  w14, w10, [x16]\n-    __ ldbicl(Assembler::word, r11, r27, r23);         \/\/       ldclrl  w11, w27, [x23]\n-    __ ldeorl(Assembler::word, r12, r4, r22);          \/\/       ldeorl  w12, w4, [x22]\n-    __ ldorrl(Assembler::word, r17, r4, r1);           \/\/       ldsetl  w17, w4, [x1]\n-    __ ldsminl(Assembler::word, r19, r16, r15);        \/\/       ldsminl w19, w16, [x15]\n-    __ ldsmaxl(Assembler::word, r13, r14, r12);        \/\/       ldsmaxl w13, w14, [x12]\n-    __ lduminl(Assembler::word, r2, r17, r3);          \/\/       lduminl w2, w17, [x3]\n-    __ ldumaxl(Assembler::word, r21, r23, r5);         \/\/       ldumaxl w21, w23, [x5]\n+    __ swpl(Assembler::word, r11, r24, r6);            \/\/       swpl    w11, w24, [x6]\n+    __ ldaddl(Assembler::word, r20, zr, r14);          \/\/       ldaddl  w20, wzr, [x14]\n+    __ ldbicl(Assembler::word, r16, r6, r0);           \/\/       ldclrl  w16, w6, [x0]\n+    __ ldeorl(Assembler::word, r7, r15, r19);          \/\/       ldeorl  w7, w15, [x19]\n+    __ ldorrl(Assembler::word, r26, r9, r10);          \/\/       ldsetl  w26, w9, [x10]\n+    __ ldsminl(Assembler::word, r23, r21, r22);        \/\/       ldsminl w23, w21, [x22]\n+    __ ldsmaxl(Assembler::word, r28, r2, r3);          \/\/       ldsmaxl w28, w2, [x3]\n+    __ lduminl(Assembler::word, r15, r19, r20);        \/\/       lduminl w15, w19, [x20]\n+    __ ldumaxl(Assembler::word, r7, r4, r29);          \/\/       ldumaxl w7, w4, [x29]\n@@ -1131,4 +1183,4 @@\n-    __ bcax(v6, __ T16B, v7, v17, v12);                \/\/       bcax            v6.16B, v7.16B, v17.16B, v12.16B\n-    __ eor3(v27, __ T16B, v16, v16, v6);               \/\/       eor3            v27.16B, v16.16B, v16.16B, v6.16B\n-    __ rax1(v2, __ T2D, v28, v3);                      \/\/       rax1            v2.2D, v28.2D, v3.2D\n-    __ xar(v4, __ T2D, v6, v17, 40);                   \/\/       xar             v4.2D, v6.2D, v17.2D, #40\n+    __ bcax(v7, __ T16B, v0, v8, v16);                 \/\/       bcax            v7.16B, v0.16B, v8.16B, v16.16B\n+    __ eor3(v19, __ T16B, v22, v4, v15);               \/\/       eor3            v19.16B, v22.16B, v4.16B, v15.16B\n+    __ rax1(v9, __ T2D, v22, v11);                     \/\/       rax1            v9.2D, v22.2D, v11.2D\n+    __ xar(v25, __ T2D, v5, v30, 33);                  \/\/       xar             v25.2D, v5.2D, v30.2D, #33\n@@ -1137,4 +1189,4 @@\n-    __ sha512h(v13, __ T2D, v12, v19);                 \/\/       sha512h         q13, q12, v19.2D\n-    __ sha512h2(v8, __ T2D, v24, v19);                 \/\/       sha512h2                q8, q24, v19.2D\n-    __ sha512su0(v17, __ T2D, v0);                     \/\/       sha512su0               v17.2D, v0.2D\n-    __ sha512su1(v10, __ T2D, v23, v6);                \/\/       sha512su1               v10.2D, v23.2D, v6.2D\n+    __ sha512h(v13, __ T2D, v22, v11);                 \/\/       sha512h         q13, q22, v11.2D\n+    __ sha512h2(v1, __ T2D, v13, v8);                  \/\/       sha512h2                q1, q13, v8.2D\n+    __ sha512su0(v20, __ T2D, v16);                    \/\/       sha512su0               v20.2D, v16.2D\n+    __ sha512su1(v25, __ T2D, v15, v4);                \/\/       sha512su1               v25.2D, v15.2D, v4.2D\n@@ -1143,5 +1195,5 @@\n-    __ sve_add(z19, __ D, 112u);                       \/\/       add     z19.d, z19.d, #0x70\n-    __ sve_sub(z16, __ B, 1u);                         \/\/       sub     z16.b, z16.b, #0x1\n-    __ sve_and(z7, __ H, 63489u);                      \/\/       and     z7.h, z7.h, #0xf801\n-    __ sve_eor(z8, __ H, 51199u);                      \/\/       eor     z8.h, z8.h, #0xc7ff\n-    __ sve_orr(z22, __ D, 17179852800u);               \/\/       orr     z22.d, z22.d, #0x3ffffc000\n+    __ sve_add(z4, __ S, 67u);                         \/\/       add     z4.s, z4.s, #0x43\n+    __ sve_sub(z6, __ D, 35u);                         \/\/       sub     z6.d, z6.d, #0x23\n+    __ sve_and(z28, __ S, 4294049777u);                \/\/       and     z28.s, z28.s, #0xfff1fff1\n+    __ sve_eor(z9, __ H, 8064u);                       \/\/       eor     z9.h, z9.h, #0x1f80\n+    __ sve_orr(z28, __ B, 1u);                         \/\/       orr     z28.b, z28.b, #0x1\n@@ -1150,5 +1202,5 @@\n-    __ sve_add(z15, __ S, 167u);                       \/\/       add     z15.s, z15.s, #0xa7\n-    __ sve_sub(z7, __ B, 235u);                        \/\/       sub     z7.b, z7.b, #0xeb\n-    __ sve_and(z7, __ B, 131u);                        \/\/       and     z7.b, z7.b, #0x83\n-    __ sve_eor(z19, __ S, 2147484159u);                \/\/       eor     z19.s, z19.s, #0x800001ff\n-    __ sve_orr(z9, __ S, 4292870159u);                 \/\/       orr     z9.s, z9.s, #0xffe0000f\n+    __ sve_add(z26, __ S, 150u);                       \/\/       add     z26.s, z26.s, #0x96\n+    __ sve_sub(z14, __ H, 149u);                       \/\/       sub     z14.h, z14.h, #0x95\n+    __ sve_and(z21, __ D, 18302628885642084351u);      \/\/       and     z21.d, z21.d, #0xfe000000007fffff\n+    __ sve_eor(z21, __ S, 2151677951u);                \/\/       eor     z21.s, z21.s, #0x803fffff\n+    __ sve_orr(z29, __ S, 1u);                         \/\/       orr     z29.s, z29.s, #0x1\n@@ -1157,5 +1209,5 @@\n-    __ sve_add(z5, __ D, 133u);                        \/\/       add     z5.d, z5.d, #0x85\n-    __ sve_sub(z13, __ S, 96u);                        \/\/       sub     z13.s, z13.s, #0x60\n-    __ sve_and(z1, __ H, 51199u);                      \/\/       and     z1.h, z1.h, #0xc7ff\n-    __ sve_eor(z16, __ D, 274877904896u);              \/\/       eor     z16.d, z16.d, #0x3ffffff800\n-    __ sve_orr(z4, __ S, 4186112u);                    \/\/       orr     z4.s, z4.s, #0x3fe000\n+    __ sve_add(z4, __ S, 196u);                        \/\/       add     z4.s, z4.s, #0xc4\n+    __ sve_sub(z4, __ S, 39u);                         \/\/       sub     z4.s, z4.s, #0x27\n+    __ sve_and(z23, __ D, 66977792u);                  \/\/       and     z23.d, z23.d, #0x3fe0000\n+    __ sve_eor(z8, __ H, 57855u);                      \/\/       eor     z8.h, z8.h, #0xe1ff\n+    __ sve_orr(z17, __ D, 274877904896u);              \/\/       orr     z17.d, z17.d, #0x3ffffff800\n@@ -1164,5 +1216,5 @@\n-    __ sve_add(z29, __ B, 234u);                       \/\/       add     z29.b, z29.b, #0xea\n-    __ sve_sub(z16, __ D, 214u);                       \/\/       sub     z16.d, z16.d, #0xd6\n-    __ sve_and(z9, __ H, 8064u);                       \/\/       and     z9.h, z9.h, #0x1f80\n-    __ sve_eor(z28, __ B, 1u);                         \/\/       eor     z28.b, z28.b, #0x1\n-    __ sve_orr(z26, __ S, 1610637312u);                \/\/       orr     z26.s, z26.s, #0x60006000\n+    __ sve_add(z30, __ B, 85u);                        \/\/       add     z30.b, z30.b, #0x55\n+    __ sve_sub(z19, __ H, 5u);                         \/\/       sub     z19.h, z19.h, #0x5\n+    __ sve_and(z9, __ B, 225u);                        \/\/       and     z9.b, z9.b, #0xe1\n+    __ sve_eor(z4, __ D, 9007199254739968u);           \/\/       eor     z4.d, z4.d, #0x1ffffffffffc00\n+    __ sve_orr(z27, __ D, 9241386433220968447u);       \/\/       orr     z27.d, z27.d, #0x803fffff803fffff\n@@ -1171,5 +1223,5 @@\n-    __ sve_add(z8, __ S, 179u);                        \/\/       add     z8.s, z8.s, #0xb3\n-    __ sve_sub(z24, __ B, 160u);                       \/\/       sub     z24.b, z24.b, #0xa0\n-    __ sve_and(z21, __ S, 2151677951u);                \/\/       and     z21.s, z21.s, #0x803fffff\n-    __ sve_eor(z29, __ S, 1u);                         \/\/       eor     z29.s, z29.s, #0x1\n-    __ sve_orr(z4, __ S, 491520u);                     \/\/       orr     z4.s, z4.s, #0x78000\n+    __ sve_add(z30, __ S, 183u);                       \/\/       add     z30.s, z30.s, #0xb7\n+    __ sve_sub(z20, __ D, 236u);                       \/\/       sub     z20.d, z20.d, #0xec\n+    __ sve_and(z9, __ H, 1008u);                       \/\/       and     z9.h, z9.h, #0x3f0\n+    __ sve_eor(z20, __ D, 72057594037895168u);         \/\/       eor     z20.d, z20.d, #0xffffffffff8000\n+    __ sve_orr(z13, __ H, 56u);                        \/\/       orr     z13.h, z13.h, #0x38\n@@ -1178,5 +1230,5 @@\n-    __ sve_add(z19, __ B, 195u);                       \/\/       add     z19.b, z19.b, #0xc3\n-    __ sve_sub(z25, __ S, 17u);                        \/\/       sub     z25.s, z25.s, #0x11\n-    __ sve_and(z8, __ H, 57855u);                      \/\/       and     z8.h, z8.h, #0xe1ff\n-    __ sve_eor(z17, __ D, 274877904896u);              \/\/       eor     z17.d, z17.d, #0x3ffffff800\n-    __ sve_orr(z30, __ B, 225u);                       \/\/       orr     z30.b, z30.b, #0xe1\n+    __ sve_add(z24, __ H, 159u);                       \/\/       add     z24.h, z24.h, #0x9f\n+    __ sve_sub(z13, __ S, 145u);                       \/\/       sub     z13.s, z13.s, #0x91\n+    __ sve_and(z16, __ B, 12u);                        \/\/       and     z16.b, z16.b, #0xc\n+    __ sve_eor(z11, __ H, 32256u);                     \/\/       eor     z11.h, z11.h, #0x7e00\n+    __ sve_orr(z15, __ B, 254u);                       \/\/       orr     z15.b, z15.b, #0xfe\n@@ -1185,56 +1237,56 @@\n-    __ sve_add(z12, __ B, z0, z9);                     \/\/       add     z12.b, z0.b, z9.b\n-    __ sve_sub(z24, __ D, z17, z4);                    \/\/       sub     z24.d, z17.d, z4.d\n-    __ sve_fadd(z6, __ D, z9, z27);                    \/\/       fadd    z6.d, z9.d, z27.d\n-    __ sve_fmul(z13, __ D, z16, z30);                  \/\/       fmul    z13.d, z16.d, z30.d\n-    __ sve_fsub(z22, __ D, z20, z30);                  \/\/       fsub    z22.d, z20.d, z30.d\n-    __ sve_abs(z9, __ B, p3, z19);                     \/\/       abs     z9.b, p3\/m, z19.b\n-    __ sve_add(z20, __ H, p7, z9);                     \/\/       add     z20.h, p7\/m, z20.h, z9.h\n-    __ sve_and(z13, __ B, p3, z19);                    \/\/       and     z13.b, p3\/m, z13.b, z19.b\n-    __ sve_asr(z24, __ H, p2, z19);                    \/\/       asr     z24.h, p2\/m, z24.h, z19.h\n-    __ sve_bic(z17, __ B, p4, z16);                    \/\/       bic     z17.b, p4\/m, z17.b, z16.b\n-    __ sve_clz(z0, __ H, p0, z11);                     \/\/       clz     z0.h, p0\/m, z11.h\n-    __ sve_cnt(z15, __ B, p3, z15);                    \/\/       cnt     z15.b, p3\/m, z15.b\n-    __ sve_eor(z15, __ B, p7, z5);                     \/\/       eor     z15.b, p7\/m, z15.b, z5.b\n-    __ sve_lsl(z10, __ B, p5, z26);                    \/\/       lsl     z10.b, p5\/m, z10.b, z26.b\n-    __ sve_lsr(z0, __ D, p2, z19);                     \/\/       lsr     z0.d, p2\/m, z0.d, z19.d\n-    __ sve_mul(z10, __ S, p6, z3);                     \/\/       mul     z10.s, p6\/m, z10.s, z3.s\n-    __ sve_neg(z7, __ H, p6, z28);                     \/\/       neg     z7.h, p6\/m, z28.h\n-    __ sve_not(z21, __ H, p2, z26);                    \/\/       not     z21.h, p2\/m, z26.h\n-    __ sve_orr(z17, __ H, p7, z17);                    \/\/       orr     z17.h, p7\/m, z17.h, z17.h\n-    __ sve_rbit(z2, __ S, p7, z16);                    \/\/       rbit    z2.s, p7\/m, z16.s\n-    __ sve_revb(z20, __ H, p1, z19);                   \/\/       revb    z20.h, p1\/m, z19.h\n-    __ sve_smax(z1, __ H, p6, z17);                    \/\/       smax    z1.h, p6\/m, z1.h, z17.h\n-    __ sve_smin(z16, __ B, p4, z21);                   \/\/       smin    z16.b, p4\/m, z16.b, z21.b\n-    __ sve_sub(z4, __ H, p0, z23);                     \/\/       sub     z4.h, p0\/m, z4.h, z23.h\n-    __ sve_fabs(z6, __ S, p2, z20);                    \/\/       fabs    z6.s, p2\/m, z20.s\n-    __ sve_fadd(z16, __ S, p7, z12);                   \/\/       fadd    z16.s, p7\/m, z16.s, z12.s\n-    __ sve_fdiv(z3, __ S, p5, z9);                     \/\/       fdiv    z3.s, p5\/m, z3.s, z9.s\n-    __ sve_fmax(z24, __ D, p7, z3);                    \/\/       fmax    z24.d, p7\/m, z24.d, z3.d\n-    __ sve_fmin(z22, __ D, p1, z25);                   \/\/       fmin    z22.d, p1\/m, z22.d, z25.d\n-    __ sve_fmul(z13, __ D, p1, z7);                    \/\/       fmul    z13.d, p1\/m, z13.d, z7.d\n-    __ sve_fneg(z5, __ D, p5, z17);                    \/\/       fneg    z5.d, p5\/m, z17.d\n-    __ sve_frintm(z0, __ D, p0, z9);                   \/\/       frintm  z0.d, p0\/m, z9.d\n-    __ sve_frintn(z11, __ S, p2, z11);                 \/\/       frintn  z11.s, p2\/m, z11.s\n-    __ sve_frintp(z17, __ S, p4, z11);                 \/\/       frintp  z17.s, p4\/m, z11.s\n-    __ sve_fsqrt(z24, __ D, p4, z30);                  \/\/       fsqrt   z24.d, p4\/m, z30.d\n-    __ sve_fsub(z8, __ D, p4, z14);                    \/\/       fsub    z8.d, p4\/m, z8.d, z14.d\n-    __ sve_fmad(z22, __ S, p7, z22, z7);               \/\/       fmad    z22.s, p7\/m, z22.s, z7.s\n-    __ sve_fmla(z5, __ S, p7, z27, z10);               \/\/       fmla    z5.s, p7\/m, z27.s, z10.s\n-    __ sve_fmls(z14, __ S, p6, z21, z20);              \/\/       fmls    z14.s, p6\/m, z21.s, z20.s\n-    __ sve_fmsb(z3, __ D, p5, z25, z5);                \/\/       fmsb    z3.d, p5\/m, z25.d, z5.d\n-    __ sve_fnmad(z29, __ S, p4, z17, z1);              \/\/       fnmad   z29.s, p4\/m, z17.s, z1.s\n-    __ sve_fnmsb(z14, __ D, p7, z13, z0);              \/\/       fnmsb   z14.d, p7\/m, z13.d, z0.d\n-    __ sve_fnmla(z2, __ D, p7, z20, z22);              \/\/       fnmla   z2.d, p7\/m, z20.d, z22.d\n-    __ sve_fnmls(z29, __ S, p3, z8, z2);               \/\/       fnmls   z29.s, p3\/m, z8.s, z2.s\n-    __ sve_mla(z14, __ S, p5, z22, z0);                \/\/       mla     z14.s, p5\/m, z22.s, z0.s\n-    __ sve_mls(z25, __ S, p6, z23, z12);               \/\/       mls     z25.s, p6\/m, z23.s, z12.s\n-    __ sve_and(z21, z1, z1);                           \/\/       and     z21.d, z1.d, z1.d\n-    __ sve_eor(z19, z11, z19);                         \/\/       eor     z19.d, z11.d, z19.d\n-    __ sve_orr(z23, z8, z30);                          \/\/       orr     z23.d, z8.d, z30.d\n-    __ sve_bic(z19, z19, z20);                         \/\/       bic     z19.d, z19.d, z20.d\n-    __ sve_uzp1(z20, __ S, z13, z30);                  \/\/       uzp1    z20.s, z13.s, z30.s\n-    __ sve_uzp2(z30, __ S, z30, z25);                  \/\/       uzp2    z30.s, z30.s, z25.s\n-    __ sve_fabd(z17, __ S, p3, z11);                   \/\/       fabd    z17.s, p3\/m, z17.s, z11.s\n-    __ sve_bext(z28, __ B, z20, z5);                   \/\/       bext    z28.b, z20.b, z5.b\n-    __ sve_bdep(z13, __ B, z13, z2);                   \/\/       bdep    z13.b, z13.b, z2.b\n-    __ sve_eor3(z10, z11, z19);                        \/\/       eor3    z10.d, z10.d, z11.d, z19.d\n+    __ sve_add(z5, __ S, z0, z10);                     \/\/       add     z5.s, z0.s, z10.s\n+    __ sve_sub(z26, __ H, z3, z0);                     \/\/       sub     z26.h, z3.h, z0.h\n+    __ sve_fadd(z19, __ D, z28, z10);                  \/\/       fadd    z19.d, z28.d, z10.d\n+    __ sve_fmul(z3, __ D, z19, z7);                    \/\/       fmul    z3.d, z19.d, z7.d\n+    __ sve_fsub(z28, __ S, z13, z21);                  \/\/       fsub    z28.s, z13.s, z21.s\n+    __ sve_abs(z26, __ D, p3, z17);                    \/\/       abs     z26.d, p3\/m, z17.d\n+    __ sve_add(z17, __ D, p3, z2);                     \/\/       add     z17.d, p3\/m, z17.d, z2.d\n+    __ sve_and(z16, __ B, p5, z20);                    \/\/       and     z16.b, p5\/m, z16.b, z20.b\n+    __ sve_asr(z19, __ D, p0, z1);                     \/\/       asr     z19.d, p0\/m, z19.d, z1.d\n+    __ sve_bic(z17, __ S, p2, z16);                    \/\/       bic     z17.s, p2\/m, z17.s, z16.s\n+    __ sve_clz(z21, __ B, p0, z4);                     \/\/       clz     z21.b, p0\/m, z4.b\n+    __ sve_cnt(z23, __ H, p3, z6);                     \/\/       cnt     z23.h, p3\/m, z6.h\n+    __ sve_eor(z20, __ D, p3, z16);                    \/\/       eor     z20.d, p3\/m, z20.d, z16.d\n+    __ sve_lsl(z12, __ S, p0, z3);                     \/\/       lsl     z12.s, p0\/m, z12.s, z3.s\n+    __ sve_lsr(z9, __ D, p0, z24);                     \/\/       lsr     z9.d, p0\/m, z9.d, z24.d\n+    __ sve_mul(z3, __ B, p4, z22);                     \/\/       mul     z3.b, p4\/m, z3.b, z22.b\n+    __ sve_neg(z25, __ B, p5, z13);                    \/\/       neg     z25.b, p5\/m, z13.b\n+    __ sve_not(z7, __ S, p6, z5);                      \/\/       not     z7.s, p6\/m, z5.s\n+    __ sve_orr(z17, __ B, p4, z0);                     \/\/       orr     z17.b, p4\/m, z17.b, z0.b\n+    __ sve_rbit(z9, __ H, p5, z11);                    \/\/       rbit    z9.h, p5\/m, z11.h\n+    __ sve_revb(z11, __ S, p3, z17);                   \/\/       revb    z11.s, p3\/m, z17.s\n+    __ sve_smax(z11, __ S, p3, z24);                   \/\/       smax    z11.s, p3\/m, z11.s, z24.s\n+    __ sve_smin(z30, __ S, p4, z8);                    \/\/       smin    z30.s, p4\/m, z30.s, z8.s\n+    __ sve_sub(z14, __ D, p6, z22);                    \/\/       sub     z14.d, p6\/m, z14.d, z22.d\n+    __ sve_fabs(z22, __ S, p2, z8);                    \/\/       fabs    z22.s, p2\/m, z8.s\n+    __ sve_fadd(z27, __ S, p7, z10);                   \/\/       fadd    z27.s, p7\/m, z27.s, z10.s\n+    __ sve_fdiv(z14, __ D, p6, z21);                   \/\/       fdiv    z14.d, p6\/m, z14.d, z21.d\n+    __ sve_fmax(z0, __ D, p0, z22);                    \/\/       fmax    z0.d, p0\/m, z0.d, z22.d\n+    __ sve_fmin(z5, __ D, p6, z29);                    \/\/       fmin    z5.d, p6\/m, z5.d, z29.d\n+    __ sve_fmul(z17, __ S, p0, z12);                   \/\/       fmul    z17.s, p0\/m, z17.s, z12.s\n+    __ sve_fneg(z29, __ D, p3, z0);                    \/\/       fneg    z29.d, p3\/m, z0.d\n+    __ sve_frintm(z2, __ D, p7, z20);                  \/\/       frintm  z2.d, p7\/m, z20.d\n+    __ sve_frintn(z21, __ S, p7, z12);                 \/\/       frintn  z21.s, p7\/m, z12.s\n+    __ sve_frintp(z2, __ D, p0, z14);                  \/\/       frintp  z2.d, p0\/m, z14.d\n+    __ sve_fsqrt(z22, __ D, p0, z19);                  \/\/       fsqrt   z22.d, p0\/m, z19.d\n+    __ sve_fsub(z26, __ D, p6, z12);                   \/\/       fsub    z26.d, p6\/m, z26.d, z12.d\n+    __ sve_fmad(z21, __ D, p0, z1, z10);               \/\/       fmad    z21.d, p0\/m, z1.d, z10.d\n+    __ sve_fmla(z11, __ S, p5, z23, z23);              \/\/       fmla    z11.s, p5\/m, z23.s, z23.s\n+    __ sve_fmls(z30, __ D, p4, z19, z19);              \/\/       fmls    z30.d, p4\/m, z19.d, z19.d\n+    __ sve_fmsb(z4, __ D, p5, z13, z30);               \/\/       fmsb    z4.d, p5\/m, z13.d, z30.d\n+    __ sve_fnmad(z30, __ D, p7, z25, z17);             \/\/       fnmad   z30.d, p7\/m, z25.d, z17.d\n+    __ sve_fnmsb(z14, __ D, p2, z12, z28);             \/\/       fnmsb   z14.d, p2\/m, z12.d, z28.d\n+    __ sve_fnmla(z5, __ S, p0, z13, z13);              \/\/       fnmla   z5.s, p0\/m, z13.s, z13.s\n+    __ sve_fnmls(z7, __ S, p2, z11, z19);              \/\/       fnmls   z7.s, p2\/m, z11.s, z19.s\n+    __ sve_mla(z25, __ D, p3, z2, z3);                 \/\/       mla     z25.d, p3\/m, z2.d, z3.d\n+    __ sve_mls(z0, __ D, p5, z5, z20);                 \/\/       mls     z0.d, p5\/m, z5.d, z20.d\n+    __ sve_and(z28, z13, z13);                         \/\/       and     z28.d, z13.d, z13.d\n+    __ sve_eor(z13, z29, z1);                          \/\/       eor     z13.d, z29.d, z1.d\n+    __ sve_orr(z27, z3, z3);                           \/\/       orr     z27.d, z3.d, z3.d\n+    __ sve_bic(z8, z24, z9);                           \/\/       bic     z8.d, z24.d, z9.d\n+    __ sve_uzp1(z25, __ B, z10, z14);                  \/\/       uzp1    z25.b, z10.b, z14.b\n+    __ sve_uzp2(z20, __ D, z25, z6);                   \/\/       uzp2    z20.d, z25.d, z6.d\n+    __ sve_fabd(z19, __ D, p4, z6);                    \/\/       fabd    z19.d, p4\/m, z19.d, z6.d\n+    __ sve_bext(z13, __ H, z1, z28);                   \/\/       bext    z13.h, z1.h, z28.h\n+    __ sve_bdep(z9, __ B, z1, z1);                     \/\/       bdep    z9.b, z1.b, z1.b\n+    __ sve_eor3(z27, z26, z14);                        \/\/       eor3    z27.d, z27.d, z26.d, z14.d\n@@ -1243,9 +1295,9 @@\n-    __ sve_andv(v25, __ B, p3, z2);                    \/\/       andv b25, p3, z2.b\n-    __ sve_orv(v29, __ B, p0, z20);                    \/\/       orv b29, p0, z20.b\n-    __ sve_eorv(v20, __ H, p7, z28);                   \/\/       eorv h20, p7, z28.h\n-    __ sve_smaxv(v13, __ D, p2, z13);                  \/\/       smaxv d13, p2, z13.d\n-    __ sve_sminv(v1, __ B, p3, z27);                   \/\/       sminv b1, p3, z27.b\n-    __ sve_fminv(v3, __ D, p6, z8);                    \/\/       fminv d3, p6, z8.d\n-    __ sve_fmaxv(v9, __ S, p0, z25);                   \/\/       fmaxv s9, p0, z25.s\n-    __ sve_fadda(v14, __ D, p0, z20);                  \/\/       fadda d14, p0, d14, z20.d\n-    __ sve_uaddv(v6, __ S, p7, z19);                   \/\/       uaddv d6, p7, z19.s\n+    __ sve_andv(v4, __ D, p7, z17);                    \/\/       andv d4, p7, z17.d\n+    __ sve_orv(v2, __ B, p0, z24);                     \/\/       orv b2, p0, z24.b\n+    __ sve_eorv(v25, __ B, p7, z13);                   \/\/       eorv b25, p7, z13.b\n+    __ sve_smaxv(v22, __ D, p3, z15);                  \/\/       smaxv d22, p3, z15.d\n+    __ sve_sminv(v16, __ D, p1, z11);                  \/\/       sminv d16, p1, z11.d\n+    __ sve_fminv(v15, __ S, p0, z15);                  \/\/       fminv s15, p0, z15.s\n+    __ sve_fmaxv(v27, __ D, p1, z22);                  \/\/       fmaxv d27, p1, z22.d\n+    __ sve_fadda(v27, __ D, p4, z10);                  \/\/       fadda d27, p4, d27, z10.d\n+    __ sve_uaddv(v16, __ S, p7, z7);                   \/\/       uaddv d16, p7, z7.s\n@@ -1270,7 +1322,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400040f,     0x94000000,\n-    0x97ffffd4,     0x9400040c,     0x3400000a,     0x34fffa2a,\n-    0x3400812a,     0x35000008,     0x35fff9c8,     0x350080c8,\n-    0xb400000b,     0xb4fff96b,     0xb400806b,     0xb500001d,\n-    0xb5fff91d,     0xb500801d,     0x10000013,     0x10fff8b3,\n-    0x10007fb3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307f36,     0x3758000c,     0x375ff7cc,     0x37587ecc,\n+    0x14000000,     0x17ffffd7,     0x14000441,     0x94000000,\n+    0x97ffffd4,     0x9400043e,     0x3400000a,     0x34fffa2a,\n+    0x3400876a,     0x35000008,     0x35fff9c8,     0x35008708,\n+    0xb400000b,     0xb4fff96b,     0xb40086ab,     0xb500001d,\n+    0xb5fff91d,     0xb500865d,     0x10000013,     0x10fff8b3,\n+    0x100085f3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36308576,     0x3758000c,     0x375ff7cc,     0x3758850c,\n@@ -1281,13 +1333,13 @@\n-    0x54007ca0,     0x54000001,     0x54fff541,     0x54007c41,\n-    0x54000002,     0x54fff4e2,     0x54007be2,     0x54000002,\n-    0x54fff482,     0x54007b82,     0x54000003,     0x54fff423,\n-    0x54007b23,     0x54000003,     0x54fff3c3,     0x54007ac3,\n-    0x54000004,     0x54fff364,     0x54007a64,     0x54000005,\n-    0x54fff305,     0x54007a05,     0x54000006,     0x54fff2a6,\n-    0x540079a6,     0x54000007,     0x54fff247,     0x54007947,\n-    0x54000008,     0x54fff1e8,     0x540078e8,     0x54000009,\n-    0x54fff189,     0x54007889,     0x5400000a,     0x54fff12a,\n-    0x5400782a,     0x5400000b,     0x54fff0cb,     0x540077cb,\n-    0x5400000c,     0x54fff06c,     0x5400776c,     0x5400000d,\n-    0x54fff00d,     0x5400770d,     0x5400000e,     0x54ffefae,\n-    0x540076ae,     0x5400000f,     0x54ffef4f,     0x5400764f,\n+    0x540082e0,     0x54000001,     0x54fff541,     0x54008281,\n+    0x54000002,     0x54fff4e2,     0x54008222,     0x54000002,\n+    0x54fff482,     0x540081c2,     0x54000003,     0x54fff423,\n+    0x54008163,     0x54000003,     0x54fff3c3,     0x54008103,\n+    0x54000004,     0x54fff364,     0x540080a4,     0x54000005,\n+    0x54fff305,     0x54008045,     0x54000006,     0x54fff2a6,\n+    0x54007fe6,     0x54000007,     0x54fff247,     0x54007f87,\n+    0x54000008,     0x54fff1e8,     0x54007f28,     0x54000009,\n+    0x54fff189,     0x54007ec9,     0x5400000a,     0x54fff12a,\n+    0x54007e6a,     0x5400000b,     0x54fff0cb,     0x54007e0b,\n+    0x5400000c,     0x54fff06c,     0x54007dac,     0x5400000d,\n+    0x54fff00d,     0x54007d4d,     0x5400000e,     0x54ffefae,\n+    0x54007cee,     0x5400000f,     0x54ffef4f,     0x54007c8f,\n@@ -1384,147 +1436,159 @@\n-    0x7e70fb59,     0x7eb0f949,     0x7ef0fb59,     0x0e20b9ac,\n-    0x4e20ba0f,     0x0e60b98b,     0x4e60b96a,     0x0ea0ba51,\n-    0x4ea0bb38,     0x4ee0bad5,     0x0ea0fb17,     0x4ea0f820,\n-    0x4ee0fa30,     0x2ea0f96a,     0x6ea0f8e6,     0x6ee0fbbc,\n-    0x2ea1f8e6,     0x6ea1f8c5,     0x6ee1f8c5,     0x2e205ab4,\n-    0x6e205a51,     0x0e311e0f,     0x4e331e51,     0x0ebf1fdd,\n-    0x4ebc1f7a,     0x2e3e1fbc,     0x6e231c41,     0x0e3d879b,\n-    0x4e228420,     0x0e7686b4,     0x4e7e87bc,     0x0eb1860f,\n-    0x4eae85ac,     0x4eec856a,     0x0e3ed7bc,     0x4e3ed7bc,\n-    0x4e75d693,     0x2e3886f6,     0x6e2c856a,     0x2e6684a4,\n-    0x6e6087fe,     0x2eb686b4,     0x6eaa8528,     0x6ee087fe,\n-    0x0eb3d651,     0x4eacd56a,     0x4efdd79b,     0x0e249c62,\n-    0x4e3a9f38,     0x0e669ca4,     0x4e659c83,     0x0eaa9d28,\n-    0x4eb89ef6,     0x2eb3d651,     0x6eafd5cd,     0x6ee6d4a4,\n-    0x2e3ed7bc,     0x6e39d717,     0x6e77d6d5,     0x2e3bdf59,\n-    0x6e3adf38,     0x6e65dc83,     0x0e799717,     0x4e7c977a,\n-    0x0eb99717,     0x4eb095ee,     0x0e37ced5,     0x4e25cc83,\n-    0x4e79cf17,     0x2e6a9528,     0x6e7a9738,     0x2eb59693,\n-    0x6eb1960f,     0x0eb2ce30,     0x4ea4cc62,     0x4ee3cc41,\n-    0x2e22fc20,     0x6e3aff38,     0x6e66fca4,     0x0e256483,\n-    0x4e2d658b,     0x0e6067fe,     0x4e7d679b,     0x0eab6549,\n-    0x4ebb6759,     0x0e24a462,     0x4e2ea5ac,     0x0e73a651,\n-    0x4e60a7fe,     0x0ea3a441,     0x4eaea5ac,     0x0e3ef7bc,\n-    0x4e22f420,     0x4e73f651,     0x0e2e6dac,     0x4e336e51,\n-    0x0e776ed5,     0x4e6e6dac,     0x0ebd6f9b,     0x4ebf6fdd,\n-    0x0e20affe,     0x4e23ac41,     0x0e7baf59,     0x4e7daf9b,\n-    0x0ea6aca4,     0x4ebfafdd,     0x0ea5f483,     0x4ea8f4e6,\n-    0x4efff7dd,     0x2e3b8f59,     0x6e338e51,     0x2e6a8d28,\n-    0x6e698d07,     0x2eae8dac,     0x6ea28c20,     0x6ef58e93,\n-    0x0e23e441,     0x4e39e717,     0x4e64e462,     0x0e223420,\n-    0x4e2a3528,     0x0e793717,     0x4e7b3759,     0x0eb1360f,\n-    0x4ebf37dd,     0x4ee53483,     0x2e2c356a,     0x6e3836f6,\n-    0x2e6c356a,     0x6e6634a4,     0x2eb33651,     0x6ea33441,\n-    0x6eed358b,     0x2e293d07,     0x6e2c3d6a,     0x2e713e0f,\n-    0x6e723e30,     0x2ea43c62,     0x6eab3d49,     0x6eed3d8b,\n-    0x2eaee5ac,     0x6eb0e5ee,     0x6eefe5cd,     0x0e243c62,\n-    0x4e283ce6,     0x0e753e93,     0x4e7b3f59,     0x0eb13e0f,\n-    0x4ea63ca4,     0x4ee43c62,     0x2e26e4a4,     0x6e2de58b,\n-    0x6e73e651,     0x2eb6eeb4,     0x6eb2ee30,     0x6ef3ee51,\n-    0x65d22e85,     0x65d02efd,     0x65902f05,     0x65d1254f,\n-    0x65913071,     0x65932208,     0xba5fd3e3,     0x3a5f03e5,\n-    0xfa411be4,     0x7a42cbe2,     0x93df03ff,     0xc820ffff,\n-    0x8822fc7f,     0xc8247cbf,     0x88267fff,     0x4e010fe0,\n-    0x5e040420,     0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,\n-    0x4e071fe1,     0x4e042c20,     0x4e062c20,     0x4e052c20,\n-    0x4e083c20,     0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,\n-    0x9eae0020,     0x0f03f409,     0x6f03f40e,     0x4cc0ac3f,\n-    0x0ea1b820,     0x4e21c862,     0x4e61b8a4,     0x05a08020,\n-    0x05104fe0,     0x05505001,     0x05906fe2,     0x05d03005,\n-    0x05101fea,     0x05901feb,     0x04b0e3e0,     0x0470e7e1,\n-    0x042f9c20,     0x043f9c35,     0x047f9c20,     0x04ff9c20,\n-    0x04299420,     0x04319160,     0x0461943e,     0x04a19020,\n-    0x04038100,     0x040381a0,     0x040387e1,     0x04438be2,\n-    0x04c38fe3,     0x040181e0,     0x04018100,     0x04018621,\n-    0x04418b22,     0x04418822,     0x04818c23,     0x040081e0,\n-    0x04008120,     0x04008761,     0x04008621,     0x04408822,\n-    0x04808c23,     0x042053ff,     0x047f5401,     0x25208028,\n-    0x2538cfe0,     0x2578d001,     0x25b8efe2,     0x25f8f007,\n-    0x2538dfea,     0x25b8dfeb,     0xa400a3e0,     0xa420a7e0,\n-    0xa4484be0,     0xa467afe0,     0xa4a8a7ea,     0xa547a814,\n-    0xa4084ffe,     0xa55c53e0,     0xa5e1540b,     0xe400fbf6,\n-    0xe408ffff,     0xe420e7e0,     0xe4484be0,     0xe460efe0,\n-    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n-    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x0420e3e9,\n-    0x0460e3ea,     0x04a0e3eb,     0x04e0e3ec,     0x25104042,\n-    0x25104871,     0x25904861,     0x25904c92,     0x05344020,\n-    0x05744041,     0x05b44062,     0x05f44083,     0x252c8840,\n-    0x253c1420,     0x25681572,     0x25a21ce3,     0x25ea1e34,\n-    0x253c0421,     0x25680572,     0x25a20ce3,     0x25ea0e34,\n-    0x0522c020,     0x05e6c0a4,     0x2401a001,     0x2443a051,\n-    0x24858881,     0x24c78cd1,     0x24850891,     0x24c70cc1,\n-    0x250f9001,     0x25508051,     0x25802491,     0x25df28c1,\n-    0x25850c81,     0x251e10d1,     0x65816001,     0x65c36051,\n-    0x65854891,     0x65c74cc1,     0x05733820,     0x05b238a4,\n-    0x05f138e6,     0x0570396a,     0x65d0a001,     0x65d6a443,\n-    0x65d4a826,     0x6594ac26,     0x6554ac26,     0x6556ac26,\n-    0x6552ac26,     0x65cbac85,     0x65caac01,     0x6589ac85,\n-    0x6588ac01,     0x65c9ac85,     0x65c8ac01,     0x65dea833,\n-    0x659ca509,     0x65d8a801,     0x65dcac01,     0x655cb241,\n-    0x0520a1e0,     0x0521a601,     0x052281e0,     0x05238601,\n-    0x04a14026,     0x042244a6,     0x046344a6,     0x04a444a6,\n-    0x04e544a7,     0x0568aca7,     0x05b23230,     0x853040af,\n-    0xc5b040af,     0xe57080af,     0xe5b080af,     0x25034440,\n-    0x254054c4,     0x25034640,     0x25415a05,     0x25834440,\n-    0x25c54489,     0x250b5d3a,     0x2550dc20,     0x2518e3e1,\n-    0x2518e021,     0x2518e0a1,     0x2518e121,     0x2518e1a1,\n-    0x2558e3e2,     0x2558e042,     0x2558e0c2,     0x2558e142,\n-    0x2598e3e3,     0x2598e063,     0x2598e0e3,     0x2598e163,\n-    0x25d8e3e4,     0x25d8e084,     0x25d8e104,     0x25d8e184,\n-    0x2518e407,     0x05214800,     0x05614800,     0x05a14800,\n-    0x05e14800,     0x05214c00,     0x05614c00,     0x05a14c00,\n-    0x05e14c00,     0x05304001,     0x05314001,     0x05a18610,\n-    0x05e18610,     0x05271e11,     0x6545e891,     0x6585e891,\n-    0x65c5e891,     0x6545c891,     0x6585c891,     0x65c5c891,\n-    0x45b0c210,     0x45f1c231,     0x1e601000,     0x1e603000,\n-    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,\n-    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,\n-    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,\n-    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,\n-    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,\n-    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,\n-    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,\n-    0x1e7e1000,     0x1e7e3000,     0xf82b80be,     0xf82803af,\n-    0xf83e1280,     0xf82722f4,     0xf83c3375,     0xf8395025,\n-    0xf83743f0,     0xf825712c,     0xf83c63af,     0xf8b6827f,\n-    0xf8bf01c5,     0xf8b011ff,     0xf8bb2214,     0xf8ac312b,\n-    0xf8a6523e,     0xf8bb43dc,     0xf8a7728a,     0xf8aa6304,\n-    0xf8f182d1,     0xf8e301fd,     0xf8f61273,     0xf8f621e2,\n-    0xf8e6320c,     0xf8eb52ed,     0xf8e1427e,     0xf8e57051,\n-    0xf8f061b6,     0xf86a83b5,     0xf87b036c,     0xf86313e1,\n-    0xf8782233,     0xf869337c,     0xf86f52a7,     0xf877433f,\n-    0xf862737f,     0xf87062ea,     0xb83381e3,     0xb8200359,\n-    0xb83711e2,     0xb82c2384,     0xb83e321d,     0xb83b5126,\n-    0xb83d40f0,     0xb82471e7,     0xb8296117,     0xb8a282bc,\n-    0xb8bf0365,     0xb8a011f1,     0xb8a4211a,     0xb8bc3376,\n-    0xb8bb52f9,     0xb8a040c4,     0xb8b07080,     0xb8af6141,\n-    0xb8e78145,     0xb8fc0287,     0xb8f710d5,     0xb8eb2228,\n-    0xb8ff3226,     0xb8e253cc,     0xb8fd4363,     0xb8f671dd,\n-    0xb8ed623c,     0xb8788045,     0xb86e020a,     0xb86b12fb,\n-    0xb86c22c4,     0xb8713024,     0xb87351f0,     0xb86d418e,\n-    0xb8627071,     0xb87560b7,     0xce3130e6,     0xce101a1b,\n-    0xce638f82,     0xce91a0c4,     0xce73818d,     0xce738708,\n-    0xcec08011,     0xce668aea,     0x25e0ce13,     0x2521c030,\n-    0x05802ca7,     0x05401588,     0x05039276,     0x25a0d4ef,\n-    0x2521dd67,     0x05800e47,     0x05400933,     0x050059c9,\n-    0x25e0d0a5,     0x25a1cc0d,     0x05801581,     0x0543ab50,\n-    0x05009904,     0x2520dd5d,     0x25e1dad0,     0x05804ca9,\n-    0x0540061c,     0x05001c3a,     0x25a0d668,     0x2521d418,\n-    0x05800ad5,     0x0540001d,     0x05008864,     0x2520d873,\n-    0x25a1c239,     0x05801d68,     0x0543ab51,     0x05001e7e,\n-    0x0429000c,     0x04e40638,     0x65db0126,     0x65de0a0d,\n-    0x65de0696,     0x0416ae69,     0x04401d34,     0x041a0e6d,\n-    0x04508a78,     0x041b1211,     0x0459a160,     0x041aadef,\n-    0x04191caf,     0x0413974a,     0x04d18a60,     0x0490186a,\n-    0x0457bb87,     0x045eab55,     0x04581e31,     0x05a79e02,\n-    0x05648674,     0x04481a21,     0x040a12b0,     0x044102e4,\n-    0x049caa86,     0x65809d90,     0x658d9523,     0x65c69c78,\n-    0x65c78736,     0x65c284ed,     0x04ddb625,     0x65c2a120,\n-    0x6580a96b,     0x6581b171,     0x65cdb3d8,     0x65c191c8,\n-    0x65a79ed6,     0x65aa1f65,     0x65b43aae,     0x65e5b723,\n-    0x65a1d23d,     0x65e0fdae,     0x65f65e82,     0x65a26d1d,\n-    0x048056ce,     0x048c7af9,     0x04213035,     0x04b33173,\n-    0x047e3117,     0x04f43273,     0x05be69b4,     0x05b96fde,\n-    0x65888d71,     0x4505b29c,     0x4502b5ad,     0x042b3a6a,\n-    0x041a2c59,     0x0418229d,     0x04593f94,     0x04c829ad,\n-    0x040a2f61,     0x65c73903,     0x65862329,     0x65d8228e,\n-    0x04813e66,\n+    0x7e70fb59,     0x7eb0f949,     0x7ef0fb59,     0x0e2089ac,\n+    0x4e208a0f,     0x0e60898b,     0x4e60896a,     0x0ea08a51,\n+    0x4ea08b38,     0x4ee08ad5,     0x2e208b17,     0x6e208820,\n+    0x2e608a30,     0x6e60896a,     0x2ea088e6,     0x6ea08bbc,\n+    0x6ee088e6,     0x0e2098c5,     0x4e2098c5,     0x0e609ab4,\n+    0x4e609a51,     0x0ea09a0f,     0x4ea09a51,     0x4ee09bdd,\n+    0x0e20ab7a,     0x4e20abbc,     0x0e60a841,     0x4e60ab9b,\n+    0x0ea0a820,     0x4ea0aab4,     0x4ee0abbc,     0x2e209a0f,\n+    0x6e2099ac,     0x2e60996a,     0x6e609bbc,     0x2ea09bbc,\n+    0x6ea09a93,     0x6ee09af6,     0x0ea0c96a,     0x4ea0c8a4,\n+    0x4ee0cbfe,     0x2ea0cab4,     0x6ea0c928,     0x6ee0cbfe,\n+    0x0ea0da51,     0x4ea0d96a,     0x4ee0db9b,     0x0ea0e862,\n+    0x4ea0eb38,     0x4ee0e8a4,     0x2ea0d883,     0x6ea0d928,\n+    0x6ee0daf6,     0x0e20ba51,     0x4e20b9cd,     0x0e60b8a4,\n+    0x4e60bbbc,     0x0ea0bb17,     0x4ea0bad5,     0x4ee0bb59,\n+    0x0ea0fb38,     0x4ea0f883,     0x4ee0fb17,     0x2ea0fb7a,\n+    0x6ea0fb17,     0x6ee0f9ee,     0x2ea1fad5,     0x6ea1f883,\n+    0x6ee1fb17,     0x2e205928,     0x6e205b38,     0x0e351e93,\n+    0x4e311e0f,     0x0eb21e30,     0x4ea41c62,     0x2e231c41,\n+    0x6e221c20,     0x0e3a8738,     0x4e2684a4,     0x0e658483,\n+    0x4e6d858b,     0x0ea087fe,     0x4ebd879b,     0x4eeb8549,\n+    0x0e3bd759,     0x4e24d462,     0x4e6ed5ac,     0x2e338651,\n+    0x6e2087fe,     0x2e638441,     0x6e6e85ac,     0x2ebe87bc,\n+    0x6ea28420,     0x6ef38651,     0x0eaed5ac,     0x4eb3d651,\n+    0x4ef7d6d5,     0x0e2e9dac,     0x4e3d9f9b,     0x0e7f9fdd,\n+    0x4e609ffe,     0x0ea39c41,     0x4ebb9f59,     0x2ebdd79b,\n+    0x6ea6d4a4,     0x6effd7dd,     0x2e25d483,     0x6e28d4e6,\n+    0x6e7fd7dd,     0x2e3bdf59,     0x6e33de51,     0x6e6add28,\n+    0x0e699507,     0x4e6e95ac,     0x0ea29420,     0x4eb59693,\n+    0x0e23cc41,     0x4e39cf17,     0x4e64cc62,     0x2e629420,\n+    0x6e6a9528,     0x2eb99717,     0x6ebb9759,     0x0eb1ce0f,\n+    0x4ebfcfdd,     0x4ee5cc83,     0x2e2cfd6a,     0x6e38fef6,\n+    0x6e6cfd6a,     0x0e2664a4,     0x4e336651,     0x0e636441,\n+    0x4e6d658b,     0x0ea96507,     0x4eac656a,     0x0e31a60f,\n+    0x4e32a630,     0x0e64a462,     0x4e6ba549,     0x0eada58b,\n+    0x4eaea5ac,     0x0e30f5ee,     0x4e2ff5cd,     0x4e64f462,\n+    0x0e286ce6,     0x4e356e93,     0x0e7b6f59,     0x4e716e0f,\n+    0x0ea66ca4,     0x4ea46c62,     0x0e26aca4,     0x4e2dad8b,\n+    0x0e73ae51,     0x4e76aeb4,     0x0eb2ae30,     0x4eb3ae51,\n+    0x0eacf56a,     0x4eb6f6b4,     0x4ef8f6f6,     0x2e2e8dac,\n+    0x6e3b8f59,     0x2e798f17,     0x6e7e8fbc,     0x2eb08dee,\n+    0x6eac8d6a,     0x6efa8f38,     0x0e23e441,     0x4e2de58b,\n+    0x4e60e7fe,     0x0e2c356a,     0x4e31360f,     0x0e693507,\n+    0x4e643462,     0x0ea53483,     0x4eaf35cd,     0x4ef53693,\n+    0x2e323630,     0x6e323630,     0x2e653483,     0x6e633441,\n+    0x2ead358b,     0x6ebf37dd,     0x6ee734c5,     0x2e2a3d28,\n+    0x6e303dee,     0x2e7e3fbc,     0x6e7f3fdd,     0x2ea23c20,\n+    0x6eb63eb4,     0x6ee93d07,     0x2eb6e6b4,     0x6eb9e717,\n+    0x6efde79b,     0x0e373ed5,     0x4e3c3f7a,     0x0e7a3f38,\n+    0x4e663ca4,     0x0ea33c41,     0x4eb83ef6,     0x4ef23e30,\n+    0x2e20e7fe,     0x6e27e4c5,     0x6e6de58b,     0x2eaaed28,\n+    0x6ebdef9b,     0x6ef0edee,     0x65d232ae,     0x659030bf,\n+    0x65d0362f,     0x65912988,     0x65d13bb3,     0x65932bae,\n+    0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,     0x7a42cbe2,\n+    0x93df03ff,     0xc820ffff,     0x8822fc7f,     0xc8247cbf,\n+    0x88267fff,     0x4e010fe0,     0x5e040420,     0x4e081fe1,\n+    0x4e0c1fe1,     0x4e0a1fe1,     0x4e071fe1,     0x4e042c20,\n+    0x4e062c20,     0x4e052c20,     0x4e083c20,     0x0e0c3c20,\n+    0x0e0a3c20,     0x0e073c20,     0x9eae0020,     0x0f03f409,\n+    0x6f03f40e,     0x4cc0ac3f,     0x0ea1b820,     0x4e21c862,\n+    0x4e61b8a4,     0x05a08020,     0x05104fe0,     0x05505001,\n+    0x05906fe2,     0x05d03005,     0x05101fea,     0x05901feb,\n+    0x04b0e3e0,     0x0470e7e1,     0x042f9c20,     0x043f9c35,\n+    0x047f9c20,     0x04ff9c20,     0x04299420,     0x04319160,\n+    0x0461943e,     0x04a19020,     0x04038100,     0x040381a0,\n+    0x040387e1,     0x04438be2,     0x04c38fe3,     0x040181e0,\n+    0x04018100,     0x04018621,     0x04418b22,     0x04418822,\n+    0x04818c23,     0x040081e0,     0x04008120,     0x04008761,\n+    0x04008621,     0x04408822,     0x04808c23,     0x042053ff,\n+    0x047f5401,     0x25208028,     0x2538cfe0,     0x2578d001,\n+    0x25b8efe2,     0x25f8f007,     0x2538dfea,     0x25b8dfeb,\n+    0xa400a3e0,     0xa420a7e0,     0xa4484be0,     0xa467afe0,\n+    0xa4a8a7ea,     0xa547a814,     0xa4084ffe,     0xa55c53e0,\n+    0xa5e1540b,     0xe400fbf6,     0xe408ffff,     0xe420e7e0,\n+    0xe4484be0,     0xe460efe0,     0xe547e400,     0xe4014be0,\n+    0xe4a84fe0,     0xe5f15000,     0x858043e0,     0x85a043ff,\n+    0xe59f5d08,     0x0420e3e9,     0x0460e3ea,     0x04a0e3eb,\n+    0x04e0e3ec,     0x25104042,     0x25104871,     0x25904861,\n+    0x25904c92,     0x05344020,     0x05744041,     0x05b44062,\n+    0x05f44083,     0x252c8840,     0x253c1420,     0x25681572,\n+    0x25a21ce3,     0x25ea1e34,     0x253c0421,     0x25680572,\n+    0x25a20ce3,     0x25ea0e34,     0x0522c020,     0x05e6c0a4,\n+    0x2401a001,     0x2443a051,     0x24858881,     0x24c78cd1,\n+    0x24850891,     0x24c70cc1,     0x250f9001,     0x25508051,\n+    0x25802491,     0x25df28c1,     0x25850c81,     0x251e10d1,\n+    0x65816001,     0x65c36051,     0x65854891,     0x65c74cc1,\n+    0x05733820,     0x05b238a4,     0x05f138e6,     0x0570396a,\n+    0x65d0a001,     0x65d6a443,     0x65d4a826,     0x6594ac26,\n+    0x6554ac26,     0x6556ac26,     0x6552ac26,     0x65cbac85,\n+    0x65caac01,     0x6589ac85,     0x6588ac01,     0x65c9ac85,\n+    0x65c8ac01,     0x65dea833,     0x659ca509,     0x65d8a801,\n+    0x65dcac01,     0x655cb241,     0x0520a1e0,     0x0521a601,\n+    0x052281e0,     0x05238601,     0x04a14026,     0x042244a6,\n+    0x046344a6,     0x04a444a6,     0x04e544a7,     0x0568aca7,\n+    0x05b23230,     0x853040af,     0xc5b040af,     0xe57080af,\n+    0xe5b080af,     0x25034440,     0x254054c4,     0x25034640,\n+    0x25415a05,     0x25834440,     0x25c54489,     0x250b5d3a,\n+    0x2550dc20,     0x2518e3e1,     0x2518e021,     0x2518e0a1,\n+    0x2518e121,     0x2518e1a1,     0x2558e3e2,     0x2558e042,\n+    0x2558e0c2,     0x2558e142,     0x2598e3e3,     0x2598e063,\n+    0x2598e0e3,     0x2598e163,     0x25d8e3e4,     0x25d8e084,\n+    0x25d8e104,     0x25d8e184,     0x2518e407,     0x05214800,\n+    0x05614800,     0x05a14800,     0x05e14800,     0x05214c00,\n+    0x05614c00,     0x05a14c00,     0x05e14c00,     0x05304001,\n+    0x05314001,     0x05a18610,     0x05e18610,     0x05271e11,\n+    0x6545e891,     0x6585e891,     0x65c5e891,     0x6545c891,\n+    0x6585c891,     0x65c5c891,     0x45b0c210,     0x45f1c231,\n+    0x1e601000,     0x1e603000,     0x1e621000,     0x1e623000,\n+    0x1e641000,     0x1e643000,     0x1e661000,     0x1e663000,\n+    0x1e681000,     0x1e683000,     0x1e6a1000,     0x1e6a3000,\n+    0x1e6c1000,     0x1e6c3000,     0x1e6e1000,     0x1e6e3000,\n+    0x1e701000,     0x1e703000,     0x1e721000,     0x1e723000,\n+    0x1e741000,     0x1e743000,     0x1e761000,     0x1e763000,\n+    0x1e781000,     0x1e783000,     0x1e7a1000,     0x1e7a3000,\n+    0x1e7c1000,     0x1e7c3000,     0x1e7e1000,     0x1e7e3000,\n+    0xf834808a,     0xf8380231,     0xf83613a3,     0xf82f2276,\n+    0xf8333056,     0xf82f5186,     0xf83041ab,     0xf83773c1,\n+    0xf8336225,     0xf8a282d0,     0xf8ad02aa,     0xf8bd119b,\n+    0xf8bb2023,     0xf8bf3278,     0xf8b15389,     0xf8bb40ef,\n+    0xf8b573f7,     0xf8b963e2,     0xf8fb8150,     0xf8f70073,\n+    0xf8f01320,     0xf8fa2057,     0xf8f0308c,     0xf8fc53be,\n+    0xf8f040db,     0xf8e971fd,     0xf8e760e4,     0xf86f82e9,\n+    0xf8680382,     0xf87510bf,     0xf87b2220,     0xf86f3344,\n+    0xf86852dc,     0xf87b433b,     0xf8777080,     0xf8666010,\n+    0xb824802f,     0xb82a00a7,     0xb82a10fc,     0xb83422b7,\n+    0xb826310b,     0xb83150df,     0xb8314182,     0xb83e707d,\n+    0xb83b63b6,     0xb8ae838d,     0xb8b100b8,     0xb8a2114e,\n+    0xb8b0236b,     0xb8b7308c,     0xb8b65091,     0xb8a14213,\n+    0xb8b071cd,     0xb8ac6222,     0xb8e382f5,     0xb8e500e6,\n+    0xb8f3138d,     0xb8f120d0,     0xb8e2307d,     0xb8e451e6,\n+    0xb8f4418d,     0xb8f47328,     0xb8f46013,     0xb86b80d8,\n+    0xb87401df,     0xb8701006,     0xb867226f,     0xb87a3149,\n+    0xb87752d5,     0xb87c4062,     0xb86f7293,     0xb86763a4,\n+    0xce284007,     0xce043ed3,     0xce6b8ec9,     0xce9e84b9,\n+    0xce6b82cd,     0xce6885a1,     0xcec08214,     0xce6489f9,\n+    0x25a0c864,     0x25e1c466,     0x0580659c,     0x05404ca9,\n+    0x0500061c,     0x25a0d2da,     0x2561d2ae,     0x05823bb5,\n+    0x05400ad5,     0x0500001d,     0x25a0d884,     0x25a1c4e4,\n+    0x05837917,     0x05401d68,     0x0503ab51,     0x2520cabe,\n+    0x2561c0b3,     0x05801e69,     0x0543b544,     0x05000adb,\n+    0x25a0d6fe,     0x25e1dd94,     0x058064a9,     0x05438d14,\n+    0x05006c4d,     0x2560d3f8,     0x25a1d22d,     0x05803630,\n+    0x05403cab,     0x05003ecf,     0x04aa0005,     0x0460047a,\n+    0x65ca0393,     0x65c70a63,     0x659505bc,     0x04d6ae3a,\n+    0x04c00c51,     0x041a1690,     0x04d08033,     0x049b0a11,\n+    0x0419a095,     0x045aacd7,     0x04d90e14,     0x0493806c,\n+    0x04d18309,     0x041012c3,     0x0417b5b9,     0x049eb8a7,\n+    0x04181011,     0x05679569,     0x05a48e2b,     0x04880f0b,\n+    0x048a111e,     0x04c11ace,     0x049ca916,     0x65809d5b,\n+    0x65cd9aae,     0x65c682c0,     0x65c79ba5,     0x65828191,\n+    0x04ddac1d,     0x65c2be82,     0x6580bd95,     0x65c1a1c2,\n+    0x65cda276,     0x65c1999a,     0x65ea8035,     0x65b716eb,\n+    0x65f3327e,     0x65feb5a4,     0x65f1df3e,     0x65fce98e,\n+    0x65ad41a5,     0x65b36967,     0x04c34c59,     0x04d474a0,\n+    0x042d31bc,     0x04a133ad,     0x0463307b,     0x04e93308,\n+    0x052e6959,     0x05e66f34,     0x65c890d3,     0x455cb02d,\n+    0x4501b429,     0x043a39db,     0x04da3e24,     0x04182302,\n+    0x04193db9,     0x04c82df6,     0x04ca2570,     0x658721ef,\n+    0x65c626db,     0x65d8315b,     0x04813cf0,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":562,"deletions":498,"binary":false,"changes":1060,"status":"modified"},{"patch":"@@ -1301,0 +1301,20 @@\n+    public static final String VMASK_CMP_ZERO_I_NEON = PREFIX + \"VMASK_CMP_ZERO_I_NEON\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_ZERO_I_NEON, \"vmaskcmp_zeroI_neon\");\n+    }\n+\n+    public static final String VMASK_CMP_ZERO_L_NEON = PREFIX + \"VMASK_CMP_ZERO_L_NEON\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_ZERO_L_NEON, \"vmaskcmp_zeroL_neon\");\n+    }\n+\n+    public static final String VMASK_CMP_ZERO_F_NEON = PREFIX + \"VMASK_CMP_ZERO_F_NEON\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_ZERO_F_NEON, \"vmaskcmp_zeroF_neon\");\n+    }\n+\n+    public static final String VMASK_CMP_ZERO_D_NEON = PREFIX + \"VMASK_CMP_ZERO_D_NEON\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_ZERO_D_NEON, \"vmaskcmp_zeroD_neon\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.ShortVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorOperators;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * @test\n+ * @bug 8297753\n+ * @key randomness\n+ * @library \/test\/lib \/\n+ * @requires os.arch==\"aarch64\"\n+ * @summary Add optimized rules for vector compare with zero on NEON\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.VectorCompareWithZeroTest\n+ *\/\n+\n+public class VectorCompareWithZeroTest {\n+    private static final VectorSpecies<Byte> B_SPECIES = ByteVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Short> S_SPECIES = ShortVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_PREFERRED;\n+    private static final int LENGTH = 1024;\n+    private static final Random RD = Utils.getRandomInstance();\n+    private static byte[] ba;\n+    private static short[] sa;\n+    private static int[] ia;\n+    private static long[] la;\n+    private static float[] fa;\n+    private static double[] da;\n+\n+    static {\n+        ba = new byte[LENGTH];\n+        sa = new short[LENGTH];\n+        ia = new int[LENGTH];\n+        la = new long[LENGTH];\n+        fa = new float[LENGTH];\n+        da = new double[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ba[i] = (byte) RD.nextInt(25);\n+            sa[i] = (short) RD.nextInt(25);\n+            ia[i] = RD.nextInt(25);\n+            la[i] = RD.nextLong(25);\n+            fa[i] = RD.nextFloat(25.0F);\n+            da[i] = RD.nextDouble(25.0);\n+        }\n+    }\n+\n+    interface ByteOp {\n+        boolean apply(byte a);\n+    }\n+\n+    interface ShortOp {\n+        boolean apply(short a);\n+    }\n+\n+    interface IntOp {\n+        boolean apply(int a);\n+    }\n+\n+    interface LongOp {\n+        boolean apply(long a);\n+    }\n+\n+    interface FloatOp {\n+        boolean apply(float a);\n+    }\n+\n+    interface DoubleOp {\n+        boolean apply(double a);\n+    }\n+\n+    private static void assertArrayEquals(byte[] a, boolean[] r, ByteOp f) {\n+        for (int i = 0; i < B_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    private static void assertArrayEquals(short[] a, boolean[] r, ShortOp f) {\n+        for (int i = 0; i < S_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    private static void assertArrayEquals(int[] a, boolean[] r, IntOp f) {\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    private static void assertArrayEquals(long[] a, boolean[] r, LongOp f) {\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    private static void assertArrayEquals(float[] a, boolean[] r, FloatOp f) {\n+        for (int i = 0; i < F_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    private static void assertArrayEquals(double[] a, boolean[] r, DoubleOp f) {\n+        for (int i = 0; i < D_SPECIES.length(); i++) {\n+            Asserts.assertEquals(f.apply(a[i]), r[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_I_NEON, \">= 1\" })\n+    public static void testByteVectorEqualToZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        ByteVector av = ByteVector.fromArray(B_SPECIES, ba, 0);\n+        av.compare(VectorOperators.EQ, 0).intoArray(r, 0);\n+        assertArrayEquals(ba, r, (a) -> (a == (byte) 0 ? true : false));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_I_NEON, \">= 1\" })\n+    public static void testShortVectorNotEqualToZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        ShortVector av = ShortVector.fromArray(S_SPECIES, sa, 0);\n+        av.compare(VectorOperators.NE, 0).intoArray(r, 0);\n+        assertArrayEquals(sa, r, (a) -> (a != (short) 0 ? true : false));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_I_NEON, \">= 1\" })\n+    public static void testIntVectorGreaterEqualToZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        av.compare(VectorOperators.GE, 0).intoArray(r, 0);\n+        assertArrayEquals(ia, r, (a) -> (a >= 0 ? true : false));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_L_NEON, \">= 1\" })\n+    public static void testLongVectorGreaterThanZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        av.compare(VectorOperators.GT, 0).intoArray(r, 0);\n+        assertArrayEquals(la, r, (a) -> (a > 0 ? true : false));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_F_NEON, \">= 1\" })\n+    public static void testFloatVectorLessEqualToZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        FloatVector av = FloatVector.fromArray(F_SPECIES, fa, 0);\n+        av.compare(VectorOperators.LE, 0).intoArray(r, 0);\n+        assertArrayEquals(fa, r, (a) -> (a <= 0.0F ? true : false));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VMASK_CMP_ZERO_D_NEON, \">= 1\" })\n+    public static void testDoubleVectorLessThanZero() {\n+        boolean[] r = new boolean[LENGTH];\n+        DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, 0);\n+        av.compare(VectorOperators.LT, 0).intoArray(r, 0);\n+        assertArrayEquals(da, r, (a) -> (a < 0.0 ? true : false));\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(10000)\n+                    .addFlags(\"--add-modules=jdk.incubator.vector\")\n+                    .addFlags(\"-XX:UseSVE=0\")\n+                    .start();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithZeroTest.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"}]}