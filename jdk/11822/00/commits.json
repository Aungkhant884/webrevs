[{"commit":{"message":"8297753: AArch64: Add optimized rules for vector compare with zero on NEON\n\nWe can use the compare-with-zero instructions like cmgt(zero)[1]\nimmediately to avoid the extra scalar2vector operations.\n\nThe following instruction sequence\n```\nmovi  v16.4s, #0x0\ncmgt  v16.4s, v17.4s, v16.4s\n```\ncan be optimized to:\n```\ncmgt v16.4s, v17.4s, #0x0\n```\nThis patch does the following:\n1. Add NEON floating-point compare-with-zero instructions.\n2. Add optimized match rules to generate the compare-with-zero\ninstructions.\n\n[1]: https:\/\/developer.arm.com\/documentation\/ddi0602\/2022-06\/SIMD-FP-Instructions\/CMGT--zero---Compare-signed-Greater-than-zero--vector--\n\nChange-Id: If026b477a0cad809bd201feafbfc9ab301a1b569"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithZeroTest.java"}],"sha":"ce4af5fd7867276ce15f5a92d99992585acfc9ef"}]