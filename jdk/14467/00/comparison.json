{"files":[{"patch":"@@ -59,5 +59,13 @@\n-        try (Recording recording = new Recording()) {\n-            recording.enable(EventNames.OldObjectSample).withoutStackTrace().with(\"cutoff\", \"infinity\");\n-            recording.start();\n-            for(int i = 0; i < 25; i++) {\n-              leak.add( buildNestedArray(CHAIN_DEPTH));\n+        while (true) {\n+            try (Recording recording = new Recording()) {\n+                recording.enable(EventNames.OldObjectSample).withoutStackTrace().with(\"cutoff\", \"infinity\");\n+                recording.start();\n+                for(int i = 0; i < 25; i++) {\n+                  leak.add( buildNestedArray(CHAIN_DEPTH));\n+                }\n+                recording.stop();\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Events.hasEvents(events);\n+                if (verifyObjectArray(events)) {\n+                    return;\n+                }\n@@ -65,4 +73,2 @@\n-            recording.stop();\n-            List<RecordedEvent> events = Events.fromRecording(recording);\n-            Events.hasEvents(events);\n-            verifyObjectArray(events);\n+            leak.clear();\n+            System.out.println(\"Retrying...\");\n@@ -72,1 +78,1 @@\n-    private static void verifyObjectArray(List<RecordedEvent> events) throws Exception {\n+    private static boolean verifyObjectArray(List<RecordedEvent> events) throws Exception {\n@@ -106,1 +112,1 @@\n-                return;\n+                return true;\n@@ -109,1 +115,2 @@\n-        throw new Exception(\"Could not find event with \" + ArrayLeak[].class + \" as (leak) object\");\n+        System.out.println(\"Could not find event with \" + ArrayLeak[].class + \" as (leak) object\");\n+        return false;\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestArrayInformation.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"}]}