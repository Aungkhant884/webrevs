{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.ref.Reference;\n@@ -172,5 +173,9 @@\n-        NativeBuffer nb;\n-        long address;\n-        if (dst instanceof sun.nio.ch.DirectBuffer) {\n-            nb = null;\n-            address = ((sun.nio.ch.DirectBuffer)dst).address() + pos;\n+        if (dst instanceof sun.nio.ch.DirectBuffer buf) {\n+            try {\n+                long address = buf.address() + pos;\n+                int n = read(name, address, rem);\n+                dst.position(pos + n);\n+                return n;\n+            } finally {\n+                Reference.reachabilityFence(buf);\n+            }\n@@ -178,3 +183,11 @@\n-            \/\/ substitute with native buffer\n-            nb = NativeBuffers.getNativeBuffer(rem);\n-            address = nb.address();\n+            try (NativeBuffer nb = NativeBuffers.getNativeBuffer(rem)) {\n+                long address = nb.address();\n+                int n = read(name, address, rem);\n+\n+                \/\/ copy from buffer into backing array\n+                int off = dst.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+                unsafe.copyMemory(null, address, dst.array(), off, n);\n+                dst.position(pos + n);\n+\n+                return n;\n+            }\n@@ -182,0 +195,1 @@\n+    }\n@@ -183,0 +197,1 @@\n+    private int read(String name, long address, int rem) throws IOException {\n@@ -190,9 +205,1 @@\n-            try {\n-                int n = fgetxattr(fd, nameAsBytes(file,name), address, rem);\n-\n-                \/\/ if remaining is zero then fgetxattr returns the size\n-                if (rem == 0) {\n-                    if (n > 0)\n-                        throw new UnixException(ERANGE);\n-                    return 0;\n-                }\n+            int n = fgetxattr(fd, nameAsBytes(file, name), address, rem);\n@@ -200,9 +207,9 @@\n-                \/\/ copy from buffer into backing array if necessary\n-                if (nb != null) {\n-                    int off = dst.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n-                    unsafe.copyMemory(null, address, dst.array(), off, n);\n-                }\n-                dst.position(pos + n);\n-                return n;\n-            } catch (UnixException x) {\n-                String msg = (x.errno() == ERANGE) ?\n+            \/\/ if remaining is zero then fgetxattr returns the size\n+            if (rem == 0) {\n+                if (n > 0)\n+                    throw new UnixException(ERANGE);\n+                return 0;\n+            }\n+            return n;\n+        } catch (UnixException x) {\n+            String msg = (x.errno() == ERANGE) ?\n@@ -210,1 +217,1 @@\n-                throw new FileSystemException(file.getPathForExceptionMessage(),\n+            throw new FileSystemException(file.getPathForExceptionMessage(),\n@@ -212,3 +219,0 @@\n-            } finally {\n-                close(fd);\n-            }\n@@ -216,2 +220,1 @@\n-            if (nb != null)\n-                nb.release();\n+            close(fd);\n@@ -221,0 +224,1 @@\n+    @Override\n@@ -230,5 +234,9 @@\n-        NativeBuffer nb;\n-        long address;\n-        if (src instanceof sun.nio.ch.DirectBuffer) {\n-            nb = null;\n-            address = ((sun.nio.ch.DirectBuffer)src).address() + pos;\n+        if (src instanceof sun.nio.ch.DirectBuffer buf) {\n+            try {\n+                long address = buf.address() + pos;\n+                write(name, address, rem);\n+                src.position(pos + rem);\n+                return rem;\n+            } finally {\n+                Reference.reachabilityFence(buf);\n+            }\n@@ -236,3 +244,2 @@\n-            \/\/ substitute with native buffer\n-            nb = NativeBuffers.getNativeBuffer(rem);\n-            address = nb.address();\n+            try (NativeBuffer nb = NativeBuffers.getNativeBuffer(rem)) {\n+                long address = nb.address();\n@@ -240,11 +247,16 @@\n-            if (src.hasArray()) {\n-                \/\/ copy from backing array into buffer\n-                int off = src.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n-                unsafe.copyMemory(src.array(), off, null, address, rem);\n-            } else {\n-                \/\/ backing array not accessible so transfer via temporary array\n-                byte[] tmp = new byte[rem];\n-                src.get(tmp);\n-                src.position(pos);  \/\/ reset position as write may fail\n-                unsafe.copyMemory(tmp, Unsafe.ARRAY_BYTE_BASE_OFFSET, null,\n-                    address, rem);\n+                if (src.hasArray()) {\n+                    \/\/ copy from backing array into buffer\n+                    int off = src.arrayOffset() + pos + Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+                    unsafe.copyMemory(src.array(), off, null, address, rem);\n+                } else {\n+                    \/\/ backing array not accessible so transfer via temporary array\n+                    byte[] tmp = new byte[rem];\n+                    src.get(tmp);\n+                    src.position(pos);  \/\/ reset position as write may fail\n+                    unsafe.copyMemory(tmp, Unsafe.ARRAY_BYTE_BASE_OFFSET, null,\n+                            address, rem);\n+                }\n+\n+                write(name, address, rem);\n+                src.position(pos + rem);\n+                return rem;\n@@ -253,0 +265,1 @@\n+    }\n@@ -254,0 +267,1 @@\n+    private void write(String name, long address, int rem) throws IOException {\n@@ -261,6 +275,3 @@\n-            try {\n-                fsetxattr(fd, nameAsBytes(file,name), address, rem);\n-                src.position(pos + rem);\n-                return rem;\n-            } catch (UnixException x) {\n-                throw new FileSystemException(file.getPathForExceptionMessage(),\n+            fsetxattr(fd, nameAsBytes(file,name), address, rem);\n+        } catch (UnixException x) {\n+            throw new FileSystemException(file.getPathForExceptionMessage(),\n@@ -269,3 +280,0 @@\n-            } finally {\n-                close(fd);\n-            }\n@@ -273,2 +281,1 @@\n-            if (nb != null)\n-                nb.release();\n+            close(fd);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":69,"deletions":62,"binary":false,"changes":131,"status":"modified"}]}