{"files":[{"patch":"@@ -9648,0 +9648,84 @@\n+\/\/ Manifest a CmpU result in an integer register.\n+\/\/ (src1 < src2) ? -1 : ((src1 > src2) ? 1 : 0)\n+instruct cmpU3_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2, rFlagsReg flags)\n+%{\n+  match(Set dst (CmpU3 src1 src2));\n+  effect(KILL flags);\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{\n+      \"cmpw $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lo\\t# CmpU3(reg)\"\n+  %}\n+  ins_encode %{\n+    __ cmpw($src1$$Register, $src2$$Register);\n+    __ csetw($dst$$Register, Assembler::NE);\n+    __ cnegw($dst$$Register, $dst$$Register, Assembler::LO);\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct cmpU3_reg_imm(iRegINoSp dst, iRegI src1, immIAddSub src2, rFlagsReg flags)\n+%{\n+  match(Set dst (CmpU3 src1 src2));\n+  effect(KILL flags);\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{\n+      \"subsw zr, $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lo\\t# CmpU3(imm)\"\n+  %}\n+  ins_encode %{\n+    __ subsw(zr, $src1$$Register, (int32_t)$src2$$constant);\n+    __ csetw($dst$$Register, Assembler::NE);\n+    __ cnegw($dst$$Register, $dst$$Register, Assembler::LO);\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+\/\/ Manifest a CmpUL result in an integer register.\n+\/\/ (src1 < src2) ? -1 : ((src1 > src2) ? 1 : 0)\n+instruct cmpUL3_reg_reg(iRegINoSp dst, iRegL src1, iRegL src2, rFlagsReg flags)\n+%{\n+  match(Set dst (CmpUL3 src1 src2));\n+  effect(KILL flags);\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{\n+      \"cmp $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lo\\t# CmpUL3(reg)\"\n+  %}\n+  ins_encode %{\n+    __ cmp($src1$$Register, $src2$$Register);\n+    __ csetw($dst$$Register, Assembler::NE);\n+    __ cnegw($dst$$Register, $dst$$Register, Assembler::LO);\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct cmpUL3_reg_imm(iRegINoSp dst, iRegL src1, immLAddSub src2, rFlagsReg flags)\n+%{\n+  match(Set dst (CmpUL3 src1 src2));\n+  effect(KILL flags);\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{\n+      \"subs zr, $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lo\\t# CmpUL3(imm)\"\n+  %}\n+  ins_encode %{\n+    __ subs(zr, $src1$$Register, (int32_t)$src2$$constant);\n+    __ csetw($dst$$Register, Assembler::NE);\n+    __ cnegw($dst$$Register, $dst$$Register, Assembler::LO);\n+  %}\n+\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -9655,1 +9739,1 @@\n-  ins_cost(INSN_COST * 6);\n+  ins_cost(INSN_COST * 3);\n@@ -9657,3 +9741,3 @@\n-      \"cmp $src1, $src2\"\n-      \"csetw $dst, ne\"\n-      \"cnegw $dst, lt\"\n+      \"cmp $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lt\\t# CmpL3(reg)\"\n@@ -9661,1 +9745,0 @@\n-  \/\/ format %{ \"CmpL3 $dst, $src1, $src2\" %}\n@@ -9676,1 +9759,1 @@\n-  ins_cost(INSN_COST * 6);\n+  ins_cost(INSN_COST * 3);\n@@ -9678,3 +9761,3 @@\n-      \"cmp $src1, $src2\"\n-      \"csetw $dst, ne\"\n-      \"cnegw $dst, lt\"\n+      \"subs zr, $src1, $src2\\n\\t\"\n+      \"csetw $dst, ne\\n\\t\"\n+      \"cnegw $dst, lt\\t# CmpL3(imm)\"\n@@ -9683,6 +9766,1 @@\n-    int32_t con = (int32_t)$src2$$constant;\n-     if (con < 0) {\n-      __ adds(zr, $src1$$Register, -con);\n-    } else {\n-      __ subs(zr, $src1$$Register, con);\n-    }\n+    __ subs(zr, $src1$$Register, (int32_t)$src2$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":93,"deletions":15,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @bug 8283726\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @bug 8283726 8287925\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"aarch64\"\n@@ -76,0 +76,24 @@\n+    @Test\n+    @IR(counts = {IRNode.CMP_U3, \"1\"})\n+    public int compareIntWithImm1(int x) {\n+        return Integer.compareUnsigned(x, 42);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_U3, \"1\"})\n+    public int compareIntWithImm2(int x) {\n+        return Integer.compareUnsigned(x, 42 << 12);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_U3, \"1\"})\n+    public int compareIntWithImm3(int x) {\n+        return Integer.compareUnsigned(x, 42 << 24);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_U3, \"1\"})\n+    public int compareIntWithImm4(int x) {\n+        return Integer.compareUnsigned(x, Integer.MIN_VALUE);\n+    }\n+\n@@ -82,1 +106,38 @@\n-    @Run(test = {\"lessThanInt\", \"lessThanLong\", \"compareInt\", \"compareLong\"})\n+    @Test\n+    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n+    public int compareLongWithImm1(long x) {\n+        return Long.compareUnsigned(x, 42);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n+    public int compareLongWithImm2(long x) {\n+        return Long.compareUnsigned(x, 42 << 12);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n+    public int compareLongWithImm3(long x) {\n+        return Long.compareUnsigned(x, 42 << 24);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n+    public int compareLongWithImm4(long x) {\n+        return Long.compareUnsigned(x, Integer.MIN_VALUE);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMP_UL3, \"1\"})\n+    public int compareLongWithImm5(long x) {\n+        return Long.compareUnsigned(x, Long.MIN_VALUE);\n+    }\n+\n+    @Run(test = {\"lessThanInt\", \"lessThanLong\",\n+                 \"compareInt\",\n+                 \"compareIntWithImm1\", \"compareIntWithImm2\",\n+                 \"compareIntWithImm3\", \"compareIntWithImm4\",\n+                 \"compareLong\",\n+                 \"compareLongWithImm1\", \"compareLongWithImm2\",\n+                 \"compareLongWithImm3\", \"compareLongWithImm4\",\n+                 \"compareLongWithImm5\"})\n@@ -92,0 +153,4 @@\n+            Asserts.assertEquals(compareIntWithImm1(x), expectedResult(x, 42));\n+            Asserts.assertEquals(compareIntWithImm2(x), expectedResult(x, 42 << 12));\n+            Asserts.assertEquals(compareIntWithImm3(x), expectedResult(x, 42 << 24));\n+            Asserts.assertEquals(compareIntWithImm4(x), expectedResult(x, Integer.MIN_VALUE));\n@@ -100,0 +165,5 @@\n+            Asserts.assertEquals(compareLongWithImm1(x), expectedResult(x, 42));\n+            Asserts.assertEquals(compareLongWithImm2(x), expectedResult(x, 42 << 12));\n+            Asserts.assertEquals(compareLongWithImm3(x), expectedResult(x, 42 << 24));\n+            Asserts.assertEquals(compareLongWithImm4(x), expectedResult(x, Integer.MIN_VALUE));\n+            Asserts.assertEquals(compareLongWithImm5(x), expectedResult(x, Long.MIN_VALUE));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestCompareUnsigned.java","additions":73,"deletions":3,"binary":false,"changes":76,"status":"modified"}]}