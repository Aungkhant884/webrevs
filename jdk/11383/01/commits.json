[{"commit":{"message":"immIAddSub is always positive\n\nAs commented by aph, \"immIAddSub\" is always positive and we needn't\ncheck the signedness.\n\nBesides, more \"comparing reg with imm\" test cases are added."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestCompareUnsigned.java"}],"sha":"ef39db220c022412d01fdf10ac8c883187f54fe1"},{"commit":{"message":"8287925: AArch64: intrinsics for compareUnsigned method in Integer and Long\n\nx86 implemented the intrinsics for compareUnsigned() method in Integer\nand Long. See JDK-8283726. We add the corresponding AArch64 backend\nsupport in this patch.\n\nNote-1: minor style issues are fixed for CmpL3 related rules.\n\nNote-2: Jtreg case TestCompareUnsigned.java is updated to cover the\nmatching rules for \"comparing reg with imm\" case.\n\nTesting: tier1~3 passed on Linux\/AArch64 platform with no new failures.\n\nFollowing is the performance data for the JMH case:\n\n```\n                                                       Before          After\nBenchmark                         (size) Mode  Cnt   Score   Error  Score   Error  Units\nIntegers.compareUnsignedDirect      500  avgt    5   0.994 ± 0.001  0.872 ± 0.015  us\/op\nIntegers.compareUnsignedIndirect    500  avgt    5   0.991 ± 0.001  0.833 ± 0.055  us\/op\nLongs.compareUnsignedDirect         500  avgt    5   1.052 ± 0.001  0.974 ± 0.057  us\/op\nLongs.compareUnsignedIndirect       500  avgt    5   1.053 ± 0.001  0.916 ± 0.038  us\/op\n```"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestCompareUnsigned.java"}],"sha":"4f7277489e0131ee2f04cbcfdee3a5032f486cdd"}]