{"files":[{"patch":"@@ -2304,1 +2304,0 @@\n-  ResourceMark rm;\n@@ -2319,5 +2318,2 @@\n-    \/\/ print strings not indices\n-      \/\/st->print(\"klass_index=%d\", uncached_klass_ref_index_at(index));\n-      \/\/st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(index));\n-      st->print(\"klass_index=%d, %s\", uncached_klass_ref_index_at(index), klass_name_symbol_at(index));\n-      st->print(\" name_and_type_index=%d, %s:%s\", uncached_name_and_type_ref_index_at(index), name_symbol_at(index), signature_symbol_at((index)));\n+      st->print(\"klass_index=%d\", uncached_klass_ref_index_at(index));\n+      st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(index));\n@@ -2341,4 +2337,2 @@\n-      \/\/ st->print(\"name_index=%d\", name_ref_index_at(index));\n-      \/\/ st->print(\" signature_index=%d\", signature_ref_index_at(index));\n-      st->print(\"name_index=%d %s\", name_ref_index_at(index), name_symbol_at(index));\n-      st->print(\" signature_index=%d %s\", signature_ref_index_at(index), signature_symbol_at(index));\n+      st->print(\"name_index=%d\", name_ref_index_at(index));\n+      st->print(\" signature_index=%d\", signature_ref_index_at(index));\n@@ -2390,2 +2384,0 @@\n-        \/\/ st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(index));\n-        \/\/ st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n@@ -2393,1 +2385,1 @@\n-        st->print(\" name_and_type_index=%d %s:%s\", bootstrap_name_and_type_ref_index_at(index), name_symbol_invokedynamic_at(index), signature_symbol_invokedynamic_at(index));\n+        st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -695,24 +695,0 @@\n-\/\/ Acquire symbols from method and field entries\n-\/\/ For fields and methods\n-char* name_symbol_at(int which) { return symbol_at(name_ref_index_at(uncached_name_and_type_ref_index_at(which)))->as_C_string(); }\n-char* signature_symbol_at(int which) { return symbol_at(signature_ref_index_at(uncached_name_and_type_ref_index_at(which)))->as_C_string(); }\n-char* klass_name_symbol_at(int which) {\n-  EXCEPTION_MARK;\n-  Klass* k = klass_at(uncached_klass_ref_index_at(which), CATCH);\n-  return  k->name()->as_C_string();\n-}\n-\/\/ Get class name from invokedynamic\n-char* klass_name_symbol_invokedynamic_at(int which) {\n-  EXCEPTION_MARK;\n-  int index = uncached_klass_ref_index_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n-  Klass* k = klass_at(index, CATCH);\n-  guarantee(k != NULL, \"need klass\");\n-  return k->name()->as_C_string();\n-}\n-char* name_symbol_invokedynamic_at(int which) {\n-  return name_symbol_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n-}\n-char* signature_symbol_invokedynamic_at(int which) {\n-  return signature_symbol_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -624,3 +624,0 @@\n-  ResourceMark rm;\n-  ConstantPool* pool = cache->constant_pool();\n-  EXCEPTION_MARK; \/\/ do I need this?\n@@ -636,0 +633,1 @@\n+    ResourceMark rm;\n@@ -638,2 +636,16 @@\n-\n-    if (bytecode_1() == Bytecodes::_invokedynamic) {\n+    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n+    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n+    st->print_cr(\" -     Method: \" INTPTR_FORMAT \" %s\", p2i(m), m != nullptr ? m->external_name() : nullptr);\n+    st->print_cr(\" - flag values: [%02x|0|0|%01x|%01x|%01x|%01x|0|%01x|%01x|00|00|%02x]\",\n+               flag_state(), has_local_signature(), has_appendix(),\n+               is_forced_virtual(), is_final(), is_vfinal(),\n+               indy_resolution_failed(), parameter_size());\n+    st->print_cr(\" - tos: %s\\n - local signature: %01x\\n\"\n+          \" - has appendix: %01x\\n - forced virtual: %01x\\n\"\n+          \" - final: %01x\\n - virtual final: %01x\\n - resolution failed: %01x\\n\"\n+          \" - num parameters: %02x\",\n+               type2name(as_BasicType(flag_state())), has_local_signature(), has_appendix(),\n+               is_forced_virtual(), is_final(), is_vfinal(),\n+               indy_resolution_failed(), parameter_size());\n+    if ((bytecode_1() == Bytecodes::_invokehandle ||\n+       bytecode_1() == Bytecodes::_invokedynamic)) {\n@@ -641,2 +653,2 @@\n-      if (m != nullptr && 0) {\n-        \/*st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n+      if (m != nullptr) {\n+        st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n@@ -646,6 +658,1 @@\n-                    m->name()->as_C_string(), m->signature()->as_C_string());*\/\n-        st->print_cr(\" - Method: \" INTPTR_FORMAT \" %s\", p2i(m), m->name_and_sig_as_C_string());\n-      } else {\n-        st->print_cr(\" - Method: (unresolved) %s.%s:%s\", pool->klass_name_symbol_invokedynamic_at(constant_pool_index()),\n-                  pool->name_symbol_invokedynamic_at(constant_pool_index()),\n-                  pool->signature_symbol_invokedynamic_at(constant_pool_index()));\n+                    m->name()->as_C_string(), m->signature()->as_C_string());\n@@ -657,8 +664,0 @@\n-    } else {\n-      if (m != nullptr) {\n-        st->print_cr(\" - Method: \" INTPTR_FORMAT \" %s\", p2i(m), m->name_and_sig_as_C_string());\n-      } else {\n-        st->print_cr(\" - Method: (unresolved) %s.%s:%s\", pool->klass_name_symbol_at(constant_pool_index()),\n-                  pool->name_symbol_at(constant_pool_index()),\n-                  pool->signature_symbol_at(constant_pool_index()));\n-      }\n@@ -666,14 +665,2 @@\n-    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n-    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n-    st->print_cr(\" - flag values: [%02x|0|0|%01x|%01x|%01x|%01x|0|%01x|%01x|00|00|%02x]\",\n-              flag_state(), has_local_signature(), has_appendix(),\n-              is_forced_virtual(), is_final(), is_vfinal(),\n-              indy_resolution_failed(), parameter_size());\n-    st->print_cr(\" - tos: %s\\n - local signature: %01x\\n\"\n-          \" - has appendix: %01x\\n - forced virtual: %01x\\n\"\n-          \" - final: %01x\\n - virtual Final: %01x\\n - resolution Failed: %01x\\n\"\n-          \" - num Parameters: %02x\",\n-              type2name(as_BasicType(flag_state())), has_local_signature(), has_appendix(),\n-              is_forced_virtual(), is_final(), is_vfinal(),\n-              indy_resolution_failed(), parameter_size());\n-  } else {\n+  }\n+  else {\n@@ -681,3 +668,0 @@\n-    st->print_cr(\" - field: %s.%s:%s\", pool->klass_name_symbol_at(constant_pool_index()),\n-               pool->name_symbol_at(constant_pool_index()),\n-               pool->signature_symbol_at(constant_pool_index()));\n@@ -690,1 +674,0 @@\n-    st->print_cr(\" - is resolved: %s\", pool->tag_at(constant_pool_index()).is_unresolved_klass() ? \"false\" : \"true\");\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":22,"deletions":39,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include \"precompiled.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/constantPool.hpp\"\n+#include \"oops\/cpCache.hpp\"\n+#include \"oops\/method.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include \"unittest.hpp\"\n+\n+\/\/ Tests for ConstantPoolCache::print_on() function\n+TEST_VM(ConstantPoolCache, print_on) {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+  ResourceMark rm;\n+  stringStream ss;\n+\n+  InstanceKlass* klass = vmClasses::System_klass();\n+  klass->constants()->cache()->print_on(&ss);\n+\n+  const char* output = ss.freeze();\n+  \/\/ method entry test\n+  ASSERT_TRUE(strstr(output, \"this\") != NULL) << \"must have \\\"this\\\"\";\n+  ASSERT_TRUE(strstr(output, \"bytecode 1:\") != NULL) << \"must have \\\"bytecode 1\\\"\";\n+  ASSERT_TRUE(strstr(output, \"bytecode 2:\") != NULL) << \"must have \\\"bytecode 2\\\"\";\n+  ASSERT_TRUE(strstr(output, \"cp index:\") != NULL) << \"must have constant pool index\";\n+  ASSERT_TRUE(strstr(output, \"F1:\") != NULL) << \"must have F1 value\";\n+  ASSERT_TRUE(strstr(output, \"F2:\") != NULL) << \"must have F2 value\";\n+  ASSERT_TRUE(strstr(output, \"Method:\") != NULL) << \"must have a method\";\n+  ASSERT_TRUE(strstr(output, \"flag values:\") != NULL) << \"must have a flag\";\n+  ASSERT_TRUE(strstr(output, \"tos:\") != NULL) << \"must have result type\";\n+  ASSERT_TRUE(strstr(output, \"local signature:\") != NULL) << \"must have local signature flag\";\n+  ASSERT_TRUE(strstr(output, \"has appendix:\") != NULL) << \"must have appendix flag\";\n+  ASSERT_TRUE(strstr(output, \"forced virtual:\") != NULL) << \"must have forced virtual flag\";\n+  ASSERT_TRUE(strstr(output, \"final:\") != NULL) << \"must have final flag\";\n+  ASSERT_TRUE(strstr(output, \"virtual final:\") != NULL) << \"must have virtual final flag\";\n+  ASSERT_TRUE(strstr(output, \"resolution failed:\") != NULL) << \"must have resolution failed flag\";\n+  ASSERT_TRUE(strstr(output, \"num parameters:\") != NULL) << \"must have number of parameters\";\n+\n+  \/\/ field entry test\n+  ASSERT_TRUE(strstr(output, \"volatile:\") != NULL) << \"must have volatile flag\";\n+  ASSERT_TRUE(strstr(output, \"field index:\") != NULL) << \"must have field index\";\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}