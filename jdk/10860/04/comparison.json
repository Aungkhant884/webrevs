{"files":[{"patch":"@@ -2304,0 +2304,1 @@\n+  ResourceMark rm;\n@@ -2318,2 +2319,5 @@\n-      st->print(\"klass_index=%d\", uncached_klass_ref_index_at(index));\n-      st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(index));\n+    \/\/ print strings not indices\n+      \/\/st->print(\"klass_index=%d\", uncached_klass_ref_index_at(index));\n+      \/\/st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(index));\n+      st->print(\"klass_index=%d, %s\", uncached_klass_ref_index_at(index), klass_name_symbol_at(index));\n+      st->print(\" name_and_type_index=%d, %s:%s\", uncached_name_and_type_ref_index_at(index), name_symbol_at(index), signature_symbol_at((index)));\n@@ -2337,2 +2341,4 @@\n-      st->print(\"name_index=%d\", name_ref_index_at(index));\n-      st->print(\" signature_index=%d\", signature_ref_index_at(index));\n+      \/\/ st->print(\"name_index=%d\", name_ref_index_at(index));\n+      \/\/ st->print(\" signature_index=%d\", signature_ref_index_at(index));\n+      st->print(\"name_index=%d %s\", name_ref_index_at(index), name_symbol_at(index));\n+      st->print(\" signature_index=%d %s\", signature_ref_index_at(index), signature_symbol_at(index));\n@@ -2384,0 +2390,2 @@\n+        \/\/ st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(index));\n+        \/\/ st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n@@ -2385,1 +2393,1 @@\n-        st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n+        st->print(\" name_and_type_index=%d %s:%s\", bootstrap_name_and_type_ref_index_at(index), name_symbol_invokedynamic_at(index), signature_symbol_invokedynamic_at(index));\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -695,0 +695,24 @@\n+\/\/ Acquire symbols from method and field entries\n+\/\/ For fields and methods\n+char* name_symbol_at(int which) { return symbol_at(name_ref_index_at(uncached_name_and_type_ref_index_at(which)))->as_C_string(); }\n+char* signature_symbol_at(int which) { return symbol_at(signature_ref_index_at(uncached_name_and_type_ref_index_at(which)))->as_C_string(); }\n+char* klass_name_symbol_at(int which) {\n+  EXCEPTION_MARK;\n+  Klass* k = klass_at(uncached_klass_ref_index_at(which), CATCH);\n+  return  k->name()->as_C_string();\n+}\n+\/\/ Get class name from invokedynamic\n+char* klass_name_symbol_invokedynamic_at(int which) {\n+  EXCEPTION_MARK;\n+  int index = uncached_klass_ref_index_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n+  Klass* k = klass_at(index, CATCH);\n+  guarantee(k != NULL, \"need klass\");\n+  return k->name()->as_C_string();\n+}\n+char* name_symbol_invokedynamic_at(int which) {\n+  return name_symbol_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n+}\n+char* signature_symbol_invokedynamic_at(int which) {\n+  return signature_symbol_at(method_handle_index_at(bootstrap_method_ref_index_at(which)));\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -624,0 +624,3 @@\n+  ResourceMark rm;\n+  ConstantPool* pool = cache->constant_pool();\n+  EXCEPTION_MARK; \/\/ do I need this?\n@@ -626,10 +629,7 @@\n-  \/\/ print entry\n-  st->print(\"%3d  (\" PTR_FORMAT \")  \", index, (intptr_t)this);\n-  st->print_cr(\"[%02x|%02x|%5d]\", bytecode_2(), bytecode_1(),\n-               constant_pool_index());\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_flags);\n-\n-  if ((bytecode_1() == Bytecodes::_invokehandle ||\n-       bytecode_1() == Bytecodes::_invokedynamic)) {\n+  \/\/ print universal entry info\n+  st->print_cr(\"%3d\", index);\n+  st->print_cr(\" - this: \" PTR_FORMAT, p2i(this));\n+  st->print_cr(\" - bytecode 1: %s %02x\", Bytecodes::name(bytecode_1()), bytecode_1());\n+  st->print_cr(\" - bytecode 2: %s %02x\", Bytecodes::name(bytecode_2()), bytecode_2());\n+  st->print_cr(\" - cp index: %5d\", constant_pool_index());\n+  if (is_method_entry()) {\n@@ -638,12 +638,27 @@\n-    oop appendix = appendix_if_resolved(cph);\n-    ResourceMark rm;\n-    if (m != NULL) {\n-      st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n-                   m->is_native() ? \" (native)\" : \"\",\n-                   p2i(m),\n-                   m->method_holder()->name()->as_C_string(),\n-                   m->name()->as_C_string(), m->signature()->as_C_string());\n-    }\n-    if (appendix != NULL) {\n-      st->print(\"  appendix: \");\n-      appendix->print_on(st);\n+\n+    if (bytecode_1() == Bytecodes::_invokedynamic) {\n+      oop appendix = appendix_if_resolved(cph);\n+      if (m != nullptr && 0) {\n+        \/*st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n+                    m->is_native() ? \" (native)\" : \"\",\n+                    p2i(m),\n+                    m->method_holder()->name()->as_C_string(),\n+                    m->name()->as_C_string(), m->signature()->as_C_string());*\/\n+        st->print_cr(\" - Method: \" INTPTR_FORMAT \" %s\", p2i(m), m->name_and_sig_as_C_string());\n+      } else {\n+        st->print_cr(\" - Method: (unresolved) %s.%s:%s\", pool->klass_name_symbol_invokedynamic_at(constant_pool_index()),\n+                  pool->name_symbol_invokedynamic_at(constant_pool_index()),\n+                  pool->signature_symbol_invokedynamic_at(constant_pool_index()));\n+      }\n+      if (appendix != nullptr) {\n+        st->print(\"  appendix: \");\n+        appendix->print_on(st);\n+      }\n+    } else {\n+      if (m != nullptr) {\n+        st->print_cr(\" - Method: \" INTPTR_FORMAT \" %s\", p2i(m), m->name_and_sig_as_C_string());\n+      } else {\n+        st->print_cr(\" - Method: (unresolved) %s.%s:%s\", pool->klass_name_symbol_at(constant_pool_index()),\n+                  pool->name_symbol_at(constant_pool_index()),\n+                  pool->signature_symbol_at(constant_pool_index()));\n+      }\n@@ -651,0 +666,25 @@\n+    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n+    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n+    st->print_cr(\" - flag values: [%02x|0|0|%01x|%01x|%01x|%01x|0|%01x|%01x|00|00|%02x]\",\n+              flag_state(), has_local_signature(), has_appendix(),\n+              is_forced_virtual(), is_final(), is_vfinal(),\n+              indy_resolution_failed(), parameter_size());\n+    st->print_cr(\" - tos: %s\\n - local signature: %01x\\n\"\n+          \" - has appendix: %01x\\n - forced virtual: %01x\\n\"\n+          \" - final: %01x\\n - virtual Final: %01x\\n - resolution Failed: %01x\\n\"\n+          \" - num Parameters: %02x\",\n+              type2name(as_BasicType(flag_state())), has_local_signature(), has_appendix(),\n+              is_forced_virtual(), is_final(), is_vfinal(),\n+              indy_resolution_failed(), parameter_size());\n+  } else {\n+    assert(is_field_entry(), \"must be a field entry\");\n+    st->print_cr(\" - field: %s.%s:%s\", pool->klass_name_symbol_at(constant_pool_index()),\n+               pool->name_symbol_at(constant_pool_index()),\n+               pool->signature_symbol_at(constant_pool_index()));\n+    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n+    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n+    st->print_cr(\" - flag values: [%02x|0|1|0|0|0|%01x|%01x|0|0|%04x]\",\n+               flag_state(), is_final(), is_volatile(), field_index());\n+    st->print_cr(\" - tos: %s\\n - final: %d\\n - volatile: %d\\n - field index: %04x\",\n+          type2name(as_BasicType(flag_state())), is_final(), is_volatile(), field_index());\n+    st->print_cr(\" - is resolved: %s\", pool->tag_at(constant_pool_index()).is_unresolved_klass() ? \"false\" : \"true\");\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":62,"deletions":22,"binary":false,"changes":84,"status":"modified"}]}