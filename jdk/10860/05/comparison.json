{"files":[{"patch":"@@ -626,10 +626,8 @@\n-  \/\/ print entry\n-  st->print(\"%3d  (\" PTR_FORMAT \")  \", index, (intptr_t)this);\n-  st->print_cr(\"[%02x|%02x|%5d]\", bytecode_2(), bytecode_1(),\n-               constant_pool_index());\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n-  st->print_cr(\"                 [   \" PTR_FORMAT \"]\", (intptr_t)_flags);\n-\n-  if ((bytecode_1() == Bytecodes::_invokehandle ||\n-       bytecode_1() == Bytecodes::_invokedynamic)) {\n+  \/\/ print universal entry info\n+  st->print_cr(\"%3d\", index);\n+  st->print_cr(\" - this: \" PTR_FORMAT, p2i(this));\n+  st->print_cr(\" - bytecode 1: %s %02x\", Bytecodes::name(bytecode_1()), bytecode_1());\n+  st->print_cr(\" - bytecode 2: %s %02x\", Bytecodes::name(bytecode_2()), bytecode_2());\n+  st->print_cr(\" - cp index: %5d\", constant_pool_index());\n+  if (is_method_entry()) {\n+    ResourceMark rm;\n@@ -638,12 +636,28 @@\n-    oop appendix = appendix_if_resolved(cph);\n-    ResourceMark rm;\n-    if (m != NULL) {\n-      st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n-                   m->is_native() ? \" (native)\" : \"\",\n-                   p2i(m),\n-                   m->method_holder()->name()->as_C_string(),\n-                   m->name()->as_C_string(), m->signature()->as_C_string());\n-    }\n-    if (appendix != NULL) {\n-      st->print(\"  appendix: \");\n-      appendix->print_on(st);\n+    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n+    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n+    st->print_cr(\" -     Method: \" INTPTR_FORMAT \" %s\", p2i(m), m != nullptr ? m->external_name() : nullptr);\n+    st->print_cr(\" - flag values: [%02x|0|0|%01x|%01x|%01x|%01x|0|%01x|%01x|00|00|%02x]\",\n+               flag_state(), has_local_signature(), has_appendix(),\n+               is_forced_virtual(), is_final(), is_vfinal(),\n+               indy_resolution_failed(), parameter_size());\n+    st->print_cr(\" - tos: %s\\n - local signature: %01x\\n\"\n+          \" - has appendix: %01x\\n - forced virtual: %01x\\n\"\n+          \" - final: %01x\\n - virtual final: %01x\\n - resolution failed: %01x\\n\"\n+          \" - num parameters: %02x\",\n+               type2name(as_BasicType(flag_state())), has_local_signature(), has_appendix(),\n+               is_forced_virtual(), is_final(), is_vfinal(),\n+               indy_resolution_failed(), parameter_size());\n+    if ((bytecode_1() == Bytecodes::_invokehandle ||\n+       bytecode_1() == Bytecodes::_invokedynamic)) {\n+      oop appendix = appendix_if_resolved(cph);\n+      if (m != nullptr) {\n+        st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n+                    m->is_native() ? \" (native)\" : \"\",\n+                    p2i(m),\n+                    m->method_holder()->name()->as_C_string(),\n+                    m->name()->as_C_string(), m->signature()->as_C_string());\n+      }\n+      if (appendix != nullptr) {\n+        st->print(\"  appendix: \");\n+        appendix->print_on(st);\n+      }\n@@ -652,0 +666,9 @@\n+  else {\n+    assert(is_field_entry(), \"must be a field entry\");\n+    st->print_cr(\" - F1:  [   \" PTR_FORMAT \"]\", (intptr_t)_f1);\n+    st->print_cr(\" - F2:  [   \" PTR_FORMAT \"]\", (intptr_t)_f2);\n+    st->print_cr(\" - flag values: [%02x|0|1|0|0|0|%01x|%01x|0|0|%04x]\",\n+               flag_state(), is_final(), is_volatile(), field_index());\n+    st->print_cr(\" - tos: %s\\n - final: %d\\n - volatile: %d\\n - field index: %04x\",\n+          type2name(as_BasicType(flag_state())), is_final(), is_volatile(), field_index());\n+  }\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":45,"deletions":22,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include \"precompiled.hpp\"\n+#include \"classfile\/vmClasses.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/constantPool.hpp\"\n+#include \"oops\/cpCache.hpp\"\n+#include \"oops\/method.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include \"unittest.hpp\"\n+\n+\/\/ Tests for ConstantPoolCache::print_on() function\n+TEST_VM(ConstantPoolCache, print_on) {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+  ResourceMark rm;\n+  stringStream ss;\n+\n+  InstanceKlass* klass = vmClasses::System_klass();\n+  klass->constants()->cache()->print_on(&ss);\n+\n+  const char* output = ss.freeze();\n+  \/\/ method entry test\n+  ASSERT_TRUE(strstr(output, \"this\") != NULL) << \"must have \\\"this\\\"\";\n+  ASSERT_TRUE(strstr(output, \"bytecode 1:\") != NULL) << \"must have \\\"bytecode 1\\\"\";\n+  ASSERT_TRUE(strstr(output, \"bytecode 2:\") != NULL) << \"must have \\\"bytecode 2\\\"\";\n+  ASSERT_TRUE(strstr(output, \"cp index:\") != NULL) << \"must have constant pool index\";\n+  ASSERT_TRUE(strstr(output, \"F1:\") != NULL) << \"must have F1 value\";\n+  ASSERT_TRUE(strstr(output, \"F2:\") != NULL) << \"must have F2 value\";\n+  ASSERT_TRUE(strstr(output, \"Method:\") != NULL) << \"must have a method\";\n+  ASSERT_TRUE(strstr(output, \"flag values:\") != NULL) << \"must have a flag\";\n+  ASSERT_TRUE(strstr(output, \"tos:\") != NULL) << \"must have result type\";\n+  ASSERT_TRUE(strstr(output, \"local signature:\") != NULL) << \"must have local signature flag\";\n+  ASSERT_TRUE(strstr(output, \"has appendix:\") != NULL) << \"must have appendix flag\";\n+  ASSERT_TRUE(strstr(output, \"forced virtual:\") != NULL) << \"must have forced virtual flag\";\n+  ASSERT_TRUE(strstr(output, \"final:\") != NULL) << \"must have final flag\";\n+  ASSERT_TRUE(strstr(output, \"virtual final:\") != NULL) << \"must have virtual final flag\";\n+  ASSERT_TRUE(strstr(output, \"resolution failed:\") != NULL) << \"must have resolution failed flag\";\n+  ASSERT_TRUE(strstr(output, \"num parameters:\") != NULL) << \"must have number of parameters\";\n+\n+  \/\/ field entry test\n+  ASSERT_TRUE(strstr(output, \"volatile:\") != NULL) << \"must have volatile flag\";\n+  ASSERT_TRUE(strstr(output, \"field index:\") != NULL) << \"must have field index\";\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}