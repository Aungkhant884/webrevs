{"files":[{"patch":"@@ -80,0 +80,1 @@\n+  virtual size_t live()         const { return used(); }\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1405,0 +1405,1 @@\n+  _live_size(0),\n@@ -1847,0 +1848,5 @@\n+size_t G1CollectedHeap::live() const {\n+  size_t size = Atomic::load(&_live_size);\n+  return size > 0 ? size : used();\n+}\n+\n@@ -4571,0 +4577,4 @@\n+void G1CollectedHeap::set_live(size_t bytes) {\n+  Atomic::release_store(&_live_size, bytes);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+  friend class G1ConcurrentMark;\n@@ -181,0 +182,2 @@\n+  volatile size_t _live_size;\n+\n@@ -214,0 +217,1 @@\n+  void set_live(size_t bytes);\n@@ -1057,0 +1061,1 @@\n+  virtual size_t live() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1105,0 +1105,10 @@\n+  \/\/ collect the liveness info from all referenced regions\n+  \/\/ the info should be consistent form the previous marking phase\n+  size_t live_size = 0;\n+  uint max_reserved_regions = _g1h->max_reserved_regions();\n+  for (uint i = 0; i < max_reserved_regions; i++) {\n+    live_size += _region_mark_stats[i]._live_words;\n+  }\n+\n+  _g1h->set_live(live_size * HeapWordSize);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -199,0 +199,5 @@\n+size_t ParallelScavengeHeap::live() const {\n+  size_t live = _young_live + _eden_live + _old_live;\n+  return live > 0 ? live : used();\n+}\n+\n@@ -435,0 +440,1 @@\n+  capture_live();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,4 @@\n+  size_t _young_live;\n+  size_t _eden_live;\n+  size_t _old_live;\n+\n@@ -85,0 +89,2 @@\n+  inline void capture_live();\n+\n@@ -87,0 +93,1 @@\n+  size_t live() const;\n@@ -93,0 +100,1 @@\n+\n@@ -105,1 +113,4 @@\n-             false \/* are_ConcurrentGC_threads *\/) { }\n+             false \/* are_ConcurrentGC_threads *\/),\n+    _young_live(0),\n+    _eden_live(0),\n+    _old_live(0) { }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,0 +43,7 @@\n+  capture_live();\n+}\n+\n+inline void ParallelScavengeHeap::capture_live() {\n+  _young_live = young_gen()->used_in_bytes();\n+  _eden_live = young_gen()->eden_space()->used_in_bytes();\n+  _old_live = old_gen()->used_in_bytes();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+ friend class ParallelScavengeHeap;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -436,0 +436,5 @@\n+size_t DefNewGeneration::live() const {\n+  return eden()->live()\n+       + from()->live();      \/\/ to() is only used during scavenge\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+  size_t live() const;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+  size_t _live_size;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+  size_t live() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/cardGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+inline size_t CardGeneration::live() const {\n+  return space()->live();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/cardGeneration.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,0 +217,2 @@\n+  \/\/ a best-effort estimate of the live set size\n+  virtual size_t live() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+  _live_size(0),\n@@ -681,0 +682,2 @@\n+  \/\/ update the live size after last GC\n+  _live_size = _young_gen->live() + _old_gen->live();\n@@ -1141,0 +1144,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,0 +91,2 @@\n+  size_t _live_size;\n+\n@@ -178,0 +180,4 @@\n+  size_t live() const {\n+    size_t live = _live_size;\n+    return live > 0 ? live : used();\n+  };\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+  virtual size_t live() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -159,0 +159,1 @@\n+  virtual size_t live() const = 0;\n@@ -447,0 +448,1 @@\n+  size_t    _zombie_space;\n@@ -551,0 +553,3 @@\n+  size_t live() const            {\n+    return used() - _zombie_space;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -165,0 +165,2 @@\n+  size_t live_offset = 0;\n+\n@@ -186,1 +188,3 @@\n-        compact_top = cp->space->forward(obj, obj->size(), cp, compact_top);\n+        size_t obj_size = obj->size();\n+        live_offset += obj_size;\n+        compact_top = cp->space->forward(obj, obj_size, cp, compact_top);\n@@ -207,0 +211,1 @@\n+  space->_zombie_space = live_offset;\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -572,0 +572,8 @@\n+  EventGCHeapSummary event;\n+  if (event.should_commit()) {\n+    event.set_gcId(GCId::current());\n+    event.set_when(GCWhen::AfterGC);\n+    event.set_heapUsed(heap->used());\n+    event.set_heapLive(heap->live());\n+    event.commit();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-  heap->mark_complete_marking_context();\n+  heap->mark_finished();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -626,0 +626,5 @@\n+size_t ShenandoahHeap::live() const {\n+  size_t live = Atomic::load_acquire(&_live);\n+  return live > 0 ? live : used();\n+}\n+\n@@ -649,0 +654,4 @@\n+void ShenandoahHeap::set_live(size_t bytes) {\n+  Atomic::release_store_fence(&_live, bytes);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -174,0 +174,1 @@\n+  volatile size_t _live;\n@@ -181,0 +182,1 @@\n+  void set_live(size_t bytes);\n@@ -195,0 +197,1 @@\n+  size_t live()              const;\n@@ -567,0 +570,1 @@\n+  inline void mark_finished();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -491,0 +491,24 @@\n+inline void ShenandoahHeap::mark_finished() {\n+  mark_complete_marking_context();\n+\n+  class ShenandoahCollectLiveSizeClosure : public ShenandoahHeapRegionClosure {\n+  private:\n+    size_t _live;\n+\n+  public:\n+    ShenandoahCollectLiveSizeClosure() : _live(0) {}\n+\n+    void heap_region_do(ShenandoahHeapRegion* r) {\n+      _live += r->get_live_data_bytes();\n+    }\n+\n+    size_t get_live() {\n+      return _live;\n+    }\n+  };\n+\n+  ShenandoahCollectLiveSizeClosure cl;\n+  heap_region_iterate(&cl);\n+  set_live(cl.get_live());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  heap->mark_complete_marking_context();\n+  heap->mark_finished();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,0 +110,5 @@\n+size_t ZCollectedHeap::live() const {\n+  size_t live = ZStatHeap::live();\n+  return live > 0 ? live : used();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+protected:\n+  virtual size_t live() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1355,0 +1355,4 @@\n+size_t ZStatHeap::live() {\n+  return _at_mark_end.live;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -549,0 +549,1 @@\n+  static size_t live();\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -199,0 +199,7 @@\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"heapLive\" label=\"Heap Live\" description=\"Live bytes allocated by objects in the heap\" \/>\n+  <\/Event>\n+\n+  <Event name=\"HeapUsageSummary\" category=\"Java Virtual Machine, GC, Heap\" label=\"Heap Usage Summary\" startTime=\"false\" period=\"everyChunk\">\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"capacity\" label=\"Heap Capacity\" description=\"Maximum number of bytes to be allocated by objects in the heap\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"used\" label=\"Heap Used\" description=\"Bytes allocated by objects in the heap\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"live\" label=\"Heap Live\" description=\"Live bytes allocated by objects in the heap\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -638,1 +638,0 @@\n-\n@@ -647,0 +646,11 @@\n+\n+TRACE_REQUEST_FUNC(HeapUsageSummary) {\n+  EventHeapUsageSummary event;\n+  if (event.should_commit()) {\n+    CollectedHeap* heap = Universe::heap();\n+    event.set_capacity(heap->capacity());\n+    event.set_used(heap->used());\n+    event.set_live(heap->live());\n+    event.commit();\n+  }\n+}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -310,0 +310,5 @@\n+    <event name=\"jdk.HeapUsageSummary\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -310,0 +310,5 @@\n+    <event name=\"jdk.HeapUsageSummary\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">5 s<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}