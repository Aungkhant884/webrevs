{"files":[{"patch":"@@ -95,0 +95,2 @@\n+  size_t total_live = 0;\n+\n@@ -100,1 +102,4 @@\n-    size_t garbage = region->garbage();\n+    size_t live = region->get_live_data_bytes();\n+    size_t garbage = region->used() - live;\n+    assert(region->garbage() == garbage, \"Garbage calculation should agree\");\n+\n@@ -117,0 +122,3 @@\n+\n+        \/\/ This region has live data, add up to estimate.\n+        total_live += live;\n@@ -119,1 +127,0 @@\n-      \/\/ Reclaim humongous regions here, and count them as the immediate garbage\n@@ -127,1 +134,5 @@\n-      if (!region->has_live()) {\n+      if (region->has_live()) {\n+        \/\/ Humongous region is live, count the entire chain as live.\n+        total_live += oop(region->bottom())->size() * HeapWordSize;\n+      } else {\n+        \/\/ Reclaim humongous regions here, and count them as the immediate garbage\n@@ -144,0 +155,3 @@\n+  \/\/ Update the live data estimate\n+  heap->set_live(total_live);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -266,1 +266,0 @@\n-  heap->update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1060,0 +1060,1 @@\n+    heap->set_live(post_compact.get_live());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -577,1 +577,0 @@\n-  inline void update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -491,23 +491,0 @@\n-\/\/ a heap-region iterating closure to collect the liveness estimate\n-class ShenandoahCollectLiveSizeClosure : public ShenandoahHeapRegionClosure {\n-  private:\n-    size_t _live;\n-\n-  public:\n-    ShenandoahCollectLiveSizeClosure() : _live(0) {}\n-\n-    void heap_region_do(ShenandoahHeapRegion* r) {\n-      _live += r->get_live_data_bytes();\n-    }\n-\n-    size_t get_live() {\n-      return _live;\n-    }\n-};\n-\n-inline void ShenandoahHeap::update_live() {\n-  ShenandoahCollectLiveSizeClosure cl;\n-  heap_region_iterate(&cl);\n-  set_live(cl.get_live());\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-  heap->update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}