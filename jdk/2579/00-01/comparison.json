{"files":[{"patch":"@@ -80,1 +80,1 @@\n-  virtual size_t live()         const { return used(); }\n+  virtual size_t live()         const { return _space->used(); }\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4575,1 +4575,1 @@\n-  Atomic::release_store(&_live_size, bytes);\n+  Atomic::store(&_live_size, bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -218,1 +218,3 @@\n-  \/\/ a best-effort estimate of the live set size\n+  \/\/ Returns the estimate of live set size. Because live set changes over time,\n+  \/\/ this is a best-effort estimate by each of the implementations. These usually\n+  \/\/ are most precise right after the GC cycle.\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -247,0 +247,5 @@\n+size_t GenCollectedHeap::live() const {\n+  size_t live = _live_size;\n+  return live > 0 ? live : used();\n+}\n+\n@@ -684,2 +689,0 @@\n-  \/\/ update the live size after last GC\n-  _live_size = _young_gen->live() + _old_gen->live();\n@@ -1146,1 +1149,0 @@\n-\n@@ -1261,0 +1263,3 @@\n+\n+  \/\/ update the live size after last GC\n+  _live_size = _young_gen->live() + _old_gen->live();\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -180,4 +180,1 @@\n-  size_t live() const {\n-    size_t live = _live_size;\n-    return live > 0 ? live : used();\n-  };\n+  size_t live() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  virtual size_t live() const = 0;\n+  virtual size_t live() const = 0;      \/\/ The estimate of live bytes in the gen.\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-  size_t    _zombie_space;\n+  size_t    _dead_space;\n@@ -554,1 +554,1 @@\n-    return used() - _zombie_space;\n+    return used() - _dead_space;\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,3 @@\n-  DeadSpacer(CompactibleSpace* space) : _allowed_deadspace_words(0), _space(space) {\n+  size_t _dead_space;\n+\n+  DeadSpacer(CompactibleSpace* space) : _allowed_deadspace_words(0), _space(space), _dead_space(0) {\n@@ -126,0 +128,1 @@\n+      _dead_space += dead_length;\n@@ -165,2 +168,0 @@\n-  size_t live_offset = 0;\n-\n@@ -189,1 +190,0 @@\n-        live_offset += obj_size;\n@@ -211,1 +211,1 @@\n-  space->_zombie_space = live_offset;\n+  space->_dead_space = dead_spacer._dead_space;\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -605,8 +605,0 @@\n-  EventGCHeapSummary event;\n-  if (event.should_commit()) {\n-    event.set_gcId(GCId::current());\n-    event.set_when(GCWhen::AfterGC);\n-    event.set_heapUsed(heap->used());\n-    event.set_heapLive(heap->live());\n-    event.commit();\n-  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -265,1 +265,2 @@\n-  heap->mark_finished();\n+  heap->mark_complete_marking_context();\n+  heap->update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -628,1 +628,1 @@\n-  size_t live = Atomic::load_acquire(&_live);\n+  size_t live = Atomic::load(&_live);\n@@ -655,1 +655,1 @@\n-  Atomic::release_store_fence(&_live, bytes);\n+  Atomic::store(&_live, bytes);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -575,1 +575,0 @@\n-  inline void mark_finished();\n@@ -578,0 +577,1 @@\n+  inline void update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,4 +491,2 @@\n-inline void ShenandoahHeap::mark_finished() {\n-  mark_complete_marking_context();\n-\n-  class ShenandoahCollectLiveSizeClosure : public ShenandoahHeapRegionClosure {\n+\/\/ a heap-region iterating closure to collect the liveness estimate\n+class ShenandoahCollectLiveSizeClosure : public ShenandoahHeapRegionClosure {\n@@ -508,1 +506,1 @@\n-  };\n+};\n@@ -510,0 +508,1 @@\n+inline void ShenandoahHeap::update_live() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -94,1 +94,2 @@\n-  heap->mark_finished();\n+  heap->mark_complete_marking_context();\n+  heap->update_live();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  size_t live = ZStatHeap::live();\n+  size_t live = ZStatHeap::live_at_mark_end();\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1356,1 +1356,1 @@\n-size_t ZStatHeap::live() {\n+size_t ZStatHeap::live_at_mark_end() {\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -549,1 +549,1 @@\n-  static size_t live();\n+  static size_t live_at_mark_end();\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,0 @@\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"heapLive\" label=\"Heap Live\" description=\"Live bytes allocated by objects in the heap\" \/>\n@@ -205,1 +204,1 @@\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"live\" label=\"Heap Live\" description=\"Live bytes allocated by objects in the heap\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"live\" label=\"Heap Live\" description=\"Estimate of live bytes allocated by objects in the heap\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -649,7 +649,5 @@\n-  if (event.should_commit()) {\n-    CollectedHeap* heap = Universe::heap();\n-    event.set_capacity(heap->capacity());\n-    event.set_used(heap->used());\n-    event.set_live(heap->live());\n-    event.commit();\n-  }\n+  CollectedHeap* heap = Universe::heap();\n+  event.set_capacity(heap->capacity());\n+  event.set_used(heap->used());\n+  event.set_live(heap->live());\n+  event.commit();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}