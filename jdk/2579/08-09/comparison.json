{"files":[{"patch":"@@ -440,1 +440,1 @@\n-  capture_live();\n+  update_live_estimate();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-  \/\/ in order to provide accurate estimate this method must be called only when the heap has just been collected and compacted\n-  inline void capture_live();\n+  \/\/ In order to provide accurate estimate this method must be called only when the heap has just been collected and compacted.\n+  inline void update_live_estimate();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  capture_live();\n+  update_live_estimate();\n@@ -46,1 +46,1 @@\n-inline void ParallelScavengeHeap::capture_live() {\n+inline void ParallelScavengeHeap::update_live_estimate() {\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n- friend class ParallelScavengeHeap;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -218,0 +218,1 @@\n+  \n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -553,3 +553,1 @@\n-  size_t live() const            {\n-    return used() - _dead_space;\n-  }\n+  size_t live() const            { return used() - _dead_space;       }\n@@ -558,0 +556,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+  friend class CompactibleSpace;\n+\n+  size_t _max_deadspace_words;\n@@ -90,3 +93,1 @@\n-  size_t _dead_space;\n-\n-  DeadSpacer(CompactibleSpace* space) : _allowed_deadspace_words(0), _space(space), _dead_space(0) {\n+  DeadSpacer(CompactibleSpace* space) : _max_deadspace_words(0), _allowed_deadspace_words(0), _space(space) {\n@@ -104,1 +105,2 @@\n-        _allowed_deadspace_words = (space->capacity() * ratio \/ 100) \/ HeapWordSize;\n+        _max_deadspace_words = (space->capacity() * ratio \/ 100) \/ HeapWordSize;\n+        _allowed_deadspace_words = _max_deadspace_words;\n@@ -128,1 +130,0 @@\n-      _dead_space += dead_length;\n@@ -136,0 +137,5 @@\n+private:\n+  size_t get_dead_space() {\n+    return (_max_deadspace_words - _allowed_deadspace_words) * HeapWordSize;\n+  }\n+\n@@ -189,2 +195,1 @@\n-        size_t obj_size = obj->size();\n-        compact_top = cp->space->forward(obj, obj_size, cp, compact_top);\n+        compact_top = cp->space->forward(obj, obj->size(), cp, compact_top);\n@@ -211,1 +216,1 @@\n-  space->_dead_space = dead_spacer._dead_space;\n+  space->_dead_space = dead_spacer.get_dead_space();\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}