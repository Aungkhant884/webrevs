{"files":[{"patch":"@@ -413,1 +413,2 @@\n-  _top_at_rebuild_starts(NEW_C_HEAP_ARRAY(HeapWord*, _g1h->max_reserved_regions(), mtGC))\n+  _top_at_rebuild_starts(NEW_C_HEAP_ARRAY(HeapWord*, _g1h->max_reserved_regions(), mtGC)),\n+  _needs_remembered_set_rebuild(false)\n@@ -1153,0 +1154,2 @@\n+\n+      _needs_remembered_set_rebuild = (cl.total_selected_for_rebuild() > 0);\n@@ -1324,1 +1327,1 @@\n-  {\n+  if (needs_remembered_set_rebuild()) {\n@@ -1328,0 +1331,2 @@\n+  } else {\n+    log_debug(gc, phases)(\"No Remembered Sets to update after rebuild\");\n@@ -1343,1 +1348,1 @@\n-    policy->record_concurrent_mark_cleanup_end();\n+    policy->record_concurrent_mark_cleanup_end(needs_remembered_set_rebuild());\n@@ -1956,0 +1961,6 @@\n+  \/\/ If Remark did not select any regions for RemSet rebuild,\n+  \/\/ skip the rebuild remembered set phase\n+  if (!needs_remembered_set_rebuild()) {\n+    log_debug(gc, marking)(\"Skipping Remembered Set Rebuild. No regions selected for rebuild\");\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -460,0 +460,2 @@\n+  \/\/ If true, then Remark pause selected regions for rebuilding.\n+  bool _needs_remembered_set_rebuild;\n@@ -600,0 +602,3 @@\n+\n+  uint needs_remembered_set_rebuild() const { return _needs_remembered_set_rebuild; }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -552,1 +552,0 @@\n-\n@@ -1101,3 +1100,7 @@\n-void G1Policy::record_concurrent_mark_cleanup_end() {\n-  G1CollectionSetCandidates* candidates = G1CollectionSetChooser::build(_g1h->workers(), _g1h->num_regions());\n-  _collection_set->set_candidates(candidates);\n+void G1Policy::record_concurrent_mark_cleanup_end(bool has_rebuilt_remembered_sets) {\n+  bool mixed_gc_pending = false;\n+  if (has_rebuilt_remembered_sets) {\n+    G1CollectionSetCandidates* candidates = G1CollectionSetChooser::build(_g1h->workers(), _g1h->num_regions());\n+    _collection_set->set_candidates(candidates);\n+    mixed_gc_pending = next_gc_should_be_mixed(\"request mixed gcs\", \"request young-only gcs\");\n+  }\n@@ -1110,1 +1113,0 @@\n-  bool mixed_gc_pending = next_gc_should_be_mixed(\"request mixed gcs\", \"request young-only gcs\");\n@@ -1137,0 +1139,3 @@\n+  if (_collection_set->candidates() == NULL) {\n+    return;\n+  }\n@@ -1232,1 +1237,1 @@\n-  if (candidates->is_empty()) {\n+  if (candidates == NULL || candidates->is_empty()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-  void record_concurrent_mark_cleanup_end();\n+  void record_concurrent_mark_cleanup_end(bool has_rebuilt_remembered_sets);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test TestSkipRebuildRemsetPhase\n+ * @summary Skip Rebuild Remset Phase if the Remark pause does not identify any rebuild candidates.\n+ *          Fill up a region to above the set G1MixedGCLiveThresholdPercent.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver gc.g1.TestSkipRebuildRemsetPhase\n+ *\/\n+\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import sun.hotspot.WhiteBox;\n+\n+public class TestSkipRebuildRemsetPhase {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xbootclasspath\/a:.\",\n+                                                                  \"-XX:+UseG1GC\",\n+                                                                  \"-XX:+UnlockExperimentalVMOptions\",\n+                                                                  \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                  \"-XX:+WhiteBoxAPI\",\n+                                                                  \"-XX:G1MixedGCLiveThresholdPercent=20\",\n+                                                                  \"-Xlog:gc+marking=debug,gc+phases=debug,gc+remset+tracking=trace\",\n+                                                                  \"-Xms10M\",\n+                                                                  \"-Xmx10M\",\n+                                                                  GCTest.class.getName());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Skipping Remembered Set Rebuild.\");\n+        output.shouldContain(\"No Remembered Sets to update after rebuild\");\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    public static class GCTest {\n+        public static void main(String args[]) throws Exception {\n+            WhiteBox wb = WhiteBox.getWhiteBox();\n+            \/\/ Allocate some memory less than region size.\n+            Object used = alloc();\n+\n+            \/\/ Trigger the full GC using the WhiteBox API.\n+            wb.fullGC();  \/\/ full\n+\n+            \/\/ Memory objects have been promoted to old by full GC.\n+            \/\/ Concurrent cycle should not select any regions for rebuilding\n+            wb.g1StartConcMarkCycle(); \/\/ concurrent-start, remark and cleanup\n+\n+            \/\/ Sleep to make sure concurrent cycle is done\n+            while (wb.g1InConcurrentMark()) {\n+                Thread.sleep(1000);\n+            }\n+\n+            System.out.println(used);\n+        }\n+\n+        private static Object alloc() {\n+            \/\/ Since G1MixedGCLiveThresholdPercent is 20%, make sure to allocate object larger than that\n+            \/\/ so that it will not be collected and the expected message printed.\n+            final int objectSize = WhiteBox.getWhiteBox().g1RegionSize() \/ 3;\n+            Object ret = new byte[objectSize];\n+            return ret;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSkipRebuildRemsetPhase.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}