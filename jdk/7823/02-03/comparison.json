{"files":[{"patch":"@@ -1063,0 +1063,1 @@\n+                inner_head->verify_strip_mined(1);\n@@ -1067,1 +1068,0 @@\n-                assert(inner_loop != NULL, \"inner strip mined loop expected\");\n@@ -1069,0 +1069,1 @@\n+                inner_head->verify_strip_mined(1);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2154,0 +2154,1 @@\n+        const Type* limit_t = _igvn.type(limit);\n@@ -2156,0 +2157,2 @@\n+        limit = new CastIINode(limit, limit_t);\n+        register_new_node(limit, opaq_ctrl);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -853,1 +853,4 @@\n-  assert(hi->hi_as_long() > lo->lo_as_long(), \"no iterations?\");\n+  if (hi->hi_as_long() <= lo->lo_as_long()) {\n+    \/\/ not a loop after all\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @bug 8259609 8276116\n- * @summary C2: optimize long range checks in long counted loops\n+ * @bug 8281429\n+ * @summary PhiNode::Value() is too conservative for tripcount of CountedLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopPhiValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @bug 8278228\n- * @summary C2: Improve identical back-to-back if elimination\n+ * @bug 8282592\n+ * @summary C2: assert(false) failed: graph should be schedulable\n@@ -47,1 +47,1 @@\n-    static boolean test1_helper(int start, int stop, double[] array1, double[] array2) {\n+    static boolean test1_helper(int start, int stop, double[] array1) {\n@@ -59,4 +59,3 @@\n-    @IR(counts = { IRNode.COUNTEDLOOP, \"3\" })\n-    static double[] test1(int stop, double[] array2) {\n-        double[] array1 = null;\n-        array1 = new double[10];\n+    @IR(counts = { IRNode.COUNTEDLOOP, \"2\" })\n+    static double[] test1(int stop) {\n+        double[] array1 = new double[10];\n@@ -64,1 +63,1 @@\n-            if (test1_helper(8, j, array1, array2)) {\n+            if (test1_helper(8, j, array1)) {\n@@ -75,2 +74,2 @@\n-        test1_helper(1, 1000, array3, array3);\n-        test1(11, array3);\n+        test1_helper(1, 1000, array3);\n+        test1(11);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSkeletonPredicates.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281429\n+ * @summary PhiNode::Value() is too conservative for tripcount of CountedLoop\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch TestCountedLoopPhiValue\n+ *\/\n+\n+public class TestCountedLoopPhiValue {\n+    public static void main(String[] args) {\n+        test1();\n+        test2();\n+    }\n+\n+    private static void test1() {\n+        for (long l = (Long.MAX_VALUE - 1); l != (Long.MIN_VALUE + 100_000); l++) {\n+            if (l == 0) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    private static void test2() {\n+        for (int i = 1; i < 10 * 182 * 138; i++) {\n+            iMeth(-9, -9);\n+        }\n+    }\n+\n+    public static final int N = 400;\n+\n+    public static long instanceCount=-2L;\n+    public static long lArrFld[]=new long[N];\n+\n+    public static void iMeth(int i6, int i7) {\n+\n+        double d1;\n+        int i8, i10, i11=30785, i12=8;\n+        long l2;\n+        byte by=58;\n+\n+        d1 = i7;\n+        i8 = 1;\n+        while (++i8 < 342) {\n+            for (l2 = 1; l2 < 5; l2++) {\n+                i6 -= (int)d1;\n+                for (i10 = 1; i10 < 2; i10++) {\n+                    i7 += (int)l2;\n+                    i12 *= i11;\n+                    i11 -= i12;\n+                    instanceCount += i10;\n+                    lArrFld[i8 - 1] = by;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopPhiValue.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}