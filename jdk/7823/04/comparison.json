{"files":[{"patch":"@@ -1111,1 +1111,1 @@\n-          assert(stride_t->hi_as_long() >= stride_t->lo_as_long(), \"bad stride type\");\n+          assert(stride_t->is_con(), \"bad stride type\");\n@@ -1120,1 +1120,14 @@\n-              return TypeInteger::make(MIN2(lo->lo_as_long(), hi->lo_as_long()), hi->hi_as_long(), 3, l->bt())->filter_speculative(_type);\n+              jlong first = lo->lo_as_long();\n+              if (first < max_signed_integer(l->bt())) {\n+                first += 1; \/\/ lo is after decrement\n+                \/\/ When bounds are constant and ABS(stride) greater than 1, exact bounds for the phi can be computed\n+                if (lo->is_con() && hi->is_con() && hi->lo_as_long() > lo->hi_as_long() && stride_t->lo_as_long() != -1) {\n+                  julong uhi = static_cast<julong>(hi->lo_as_long());\n+                  julong ulo = static_cast<julong>(lo->hi_as_long());\n+                  julong diff = ((uhi - ulo - 1) \/ (-stride_t->lo_as_long())) * (-stride_t->lo_as_long());\n+                  julong ufirst = hi->lo_as_long() - diff;\n+                  first = reinterpret_cast<jlong &>(ufirst);\n+                  assert(first >= lo->lo_as_long() + 1, \"should end up with narrower range\");\n+                }\n+              }\n+              return TypeInteger::make(MIN2(first, hi->lo_as_long()), hi->hi_as_long(), 3, l->bt())->filter_speculative(_type);\n@@ -1122,1 +1135,14 @@\n-              return TypeInteger::make(lo->lo_as_long(), MAX2(lo->hi_as_long(), hi->hi_as_long()), 3, l->bt())->filter_speculative(_type);\n+              jlong last = hi->hi_as_long();\n+              if (last > min_signed_integer(l->bt())) {\n+                last -= 1; \/\/ hi is after increment\n+                \/\/ When bounds are constant and ABS(stride) greater than 1, exact bounds for the phi can be computed\n+                if (lo->is_con() && hi->is_con() && hi->lo_as_long() > lo->hi_as_long() && stride_t->lo_as_long() != 1) {\n+                  julong uhi = static_cast<julong>(hi->lo_as_long());\n+                  julong ulo = static_cast<julong>(lo->hi_as_long());\n+                  julong diff = ((uhi - ulo - 1) \/ stride_t->lo_as_long()) * stride_t->lo_as_long();\n+                  julong ulast = lo->hi_as_long() + diff;\n+                  last = reinterpret_cast<jlong &>(ulast);\n+                  assert(last <= hi->hi_as_long() - 1, \"should end up with narrower range\");\n+                }\n+              }\n+              return TypeInteger::make(lo->lo_as_long(), MAX2(lo->hi_as_long(), last), 3, l->bt())->filter_speculative(_type);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -846,4 +846,14 @@\n-  \/\/ May not have gone thru igvn yet so don't use _igvn.type(phi) (PhaseIdealLoop::is_counted_loop() sets the iv phi's type)\n-  const TypeInteger* phi_t = phi->bottom_type()->is_integer(bt);\n-  assert(phi_t->hi_as_long() >= phi_t->lo_as_long(), \"dead phi?\");\n-  iters_limit = checked_cast<int>(MIN2((julong)iters_limit, (julong)(phi_t->hi_as_long() - phi_t->lo_as_long())));\n+  \/\/ Take what we know about the number of iterations of the long counted loop into account when computing the limit of\n+  \/\/ the inner loop.\n+  const Node* init = head->init_trip();\n+  const TypeInteger* lo = _igvn.type(init)->is_integer(bt);\n+  const TypeInteger* hi = _igvn.type(limit)->is_integer(bt);\n+  if (stride_con < 0) {\n+    swap(lo, hi);\n+  }\n+  if (hi->hi_as_long() <= lo->lo_as_long()) {\n+    \/\/ not a loop after all\n+    return false;\n+  }\n+  julong orig_iters = hi->hi_as_long() - lo->lo_as_long();\n+  iters_limit = checked_cast<int>(MIN2((julong)iters_limit, orig_iters));\n@@ -4461,0 +4471,1 @@\n+          head->as_BaseCountedLoop()->is_valid_counted_loop(head->as_BaseCountedLoop()->bt()) &&\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281429\n+ * @summary PhiNode::Value() is too conservative for tripcount of CountedLoop\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestCountedLoopPhiValue\n+ *\/\n+\n+public class TestCountedLoopPhiValue {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:LoopUnrollLimit=0\");\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.IF })\n+    public static float test1() {\n+        int i = 0;\n+        int j;\n+        float v = 1;\n+        do {\n+            v *= 2;\n+            j = i;\n+            i++;\n+        } while (i < 10);\n+        if (j < 10) {\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.IF })\n+    public static float test2() {\n+        int i = 0;\n+        int j;\n+        float v = 1;\n+        do {\n+            v *= 2;\n+            j = i;\n+            i += 2;\n+        } while (i < 10);\n+        if (j < 9) {\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.IF })\n+    public static float test3() {\n+        int i = 10;\n+        int j;\n+        float v = 1;\n+        do {\n+            v *= 2;\n+            j = i;\n+            i--;\n+        } while (i > 0);\n+        if (j > 0) {\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.IF })\n+    public static float test4() {\n+        int i = 10;\n+        int j;\n+        float v = 1;\n+        do {\n+            v *= 2;\n+            j = i;\n+            i -= 2;\n+        } while (i > 0);\n+        if (j > 1) {\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountedLoopPhiValue.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -32,2 +32,2 @@\n- * @bug 8278228\n- * @summary C2: Improve identical back-to-back if elimination\n+ * @bug 8282592\n+ * @summary C2: assert(false) failed: graph should be schedulable\n@@ -47,1 +47,1 @@\n-    static boolean test1_helper(int start, int stop, double[] array1, double[] array2) {\n+    static boolean test1_helper(int start, int stop, double[] array1) {\n@@ -59,4 +59,3 @@\n-    @IR(counts = { IRNode.COUNTEDLOOP, \"3\" })\n-    static double[] test1(int stop, double[] array2) {\n-        double[] array1 = null;\n-        array1 = new double[10];\n+    @IR(counts = { IRNode.COUNTEDLOOP, \"2\" })\n+    static double[] test1(int stop) {\n+        double[] array1 = new double[10];\n@@ -64,1 +63,1 @@\n-            if (test1_helper(8, j, array1, array2)) {\n+            if (test1_helper(8, j, array1)) {\n@@ -75,2 +74,2 @@\n-        test1_helper(1, 1000, array3, array3);\n-        test1(11, array3);\n+        test1_helper(1, 1000, array3);\n+        test1(11);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSkeletonPredicates.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281429\n+ * @summary PhiNode::Value() is too conservative for tripcount of CountedLoop\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch TestCountedLoopPhiValue\n+ *\/\n+\n+public class TestCountedLoopPhiValue {\n+    public static void main(String[] args) {\n+        test1();\n+        test2();\n+    }\n+\n+    private static void test1() {\n+        for (long l = (Long.MAX_VALUE - 1); l != (Long.MIN_VALUE + 100_000); l++) {\n+            if (l == 0) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    private static void test2() {\n+        for (int i = 1; i < 10 * 182 * 138; i++) {\n+            iMeth(-9, -9);\n+        }\n+    }\n+\n+    public static final int N = 400;\n+\n+    public static long instanceCount=-2L;\n+    public static long lArrFld[]=new long[N];\n+\n+    public static void iMeth(int i6, int i7) {\n+\n+        double d1;\n+        int i8, i10, i11=30785, i12=8;\n+        long l2;\n+        byte by=58;\n+\n+        d1 = i7;\n+        i8 = 1;\n+        while (++i8 < 342) {\n+            for (l2 = 1; l2 < 5; l2++) {\n+                i6 -= (int)d1;\n+                for (i10 = 1; i10 < 2; i10++) {\n+                    i7 += (int)l2;\n+                    i12 *= i11;\n+                    i11 -= i12;\n+                    instanceCount += i10;\n+                    lArrFld[i8 - 1] = by;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopPhiValue.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}