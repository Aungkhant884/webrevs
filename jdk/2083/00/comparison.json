{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n- * \"node --> next\" becomes \"[node] --> next\", in an attempt to convey node as being exlusively reserved.\n+ * \"node --> next\" becomes \"[node] --> next\", in an attempt to convey the node as exlusively reserved.\n@@ -69,2 +69,1 @@\n-    version_handle.checkout();\n-    assert(version_handle.is_tracked(), \"invariant\");\n+    version_handle->checkout();\n@@ -120,1 +119,0 @@\n-    assert(version_handle.is_tracked(), \"invariant\");\n@@ -152,1 +150,0 @@\n-    assert(version_handle.is_tracked(), \"invariant\");\n@@ -185,1 +182,1 @@\n-  version_handle.release(); \/\/ release_store_fence\n+  OrderAccess::storestore();\n@@ -207,1 +204,0 @@\n-    assert(version_handle.is_tracked(), \"invariant\");\n@@ -231,1 +227,0 @@\n-    assert(version_handle.is_tracked(), \"invariant\");\n@@ -240,5 +235,3 @@\n-  \/\/ Increment the current version so we can track when other threads have seen this update.\n-  VersionType version = version_handle.increment();\n-  version_handle.release(); \/\/ release_store_fence\n-  \/\/ Rendezvous with checkouts for versions less than this version.\n-  version_handle.await(version);\n+  \/\/ Commit the modification back to the version control system.\n+  \/\/ It blocks until all checkouts for versions earlier than the commit have been released.\n+  version_handle->commit();\n@@ -258,2 +251,1 @@\n-  version_handle.checkout();\n-  assert(version_handle.is_tracked(), \"invariant\");\n+  version_handle->checkout();\n@@ -284,2 +276,1 @@\n-  version_handle.checkout();\n-  assert(version_handle.is_tracked(), \"invariant\");\n+  version_handle->checkout();\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrConcurrentLinkedListHost.inline.hpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  return _version_system.get_handle();\n+  return _version_system.get();\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrConcurrentQueue.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-  template <typename, typename>\n-  friend class RefCountPointer;\n@@ -54,1 +52,1 @@\n-      const T* temp = _ptr;\n+      _ptr->remove_ref();\n@@ -56,1 +54,0 @@\n-      temp->remove_ref();\n@@ -79,1 +76,1 @@\n-  const T & operator->() const {\n+  const T& operator->() const {\n@@ -86,0 +83,23 @@\n+\n+  static RefCountHandle<T> make(const T* ptr) {\n+    return ptr;\n+  }\n+};\n+\n+class SingleThreadedRefCounter {\n+ private:\n+  mutable intptr_t _refs;\n+ public:\n+  SingleThreadedRefCounter() : _refs(0) {}\n+\n+  void inc() const {\n+    ++_refs;\n+  }\n+\n+  bool dec() const {\n+    return --_refs == 0;\n+  }\n+\n+  intptr_t current() const {\n+    return _refs;\n+  }\n@@ -90,1 +110,1 @@\n-  mutable volatile int _refs;\n+  mutable volatile intptr_t _refs;\n@@ -102,1 +122,1 @@\n-  int current() const {\n+  intptr_t current() const {\n@@ -149,2 +169,1 @@\n-    assert(ptr != NULL, \"invariant\");\n-    return RefHandle(new RefCountPointer<T, RefCountImpl>(ptr));\n+    return RefHandle::make(new RefCountPointer<T, RefCountImpl>(ptr));\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrRefCountPointer.hpp","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+#include \"jfr\/utilities\/jfrRefCountPointer.hpp\"\n@@ -69,1 +70,5 @@\n-   public:\n+    friend class JfrVersionSystem;\n+    template <typename>\n+    friend class RefCountHandle;\n+   private:\n+    JfrVersionSystem* const _system;\n@@ -71,3 +76,6 @@\n-    Type _version;\n-    bool _live;\n-    Node();\n+    mutable Type _version;\n+    SingleThreadedRefCounter _ref_counter;\n+    mutable bool _live;\n+    Node(JfrVersionSystem* system);\n+    void add_ref() const;\n+    void remove_ref() const;\n@@ -75,9 +83,1 @@\n-    void set(Type version);\n-  };\n-  typedef Node* NodePtr;\n- public:\n-  class Handle {\n-   private:\n-    JfrVersionSystem* _system;\n-    NodePtr _node;\n-    Handle(JfrVersionSystem* system);\n+    void set(Type version) const;\n@@ -85,2 +85,0 @@\n-    Handle();\n-    ~Handle();\n@@ -88,5 +86,3 @@\n-    void release();\n-    Type increment();\n-    void await(Type version);\n-    DEBUG_ONLY(bool is_tracked() const;)\n-    friend class JfrVersionSystem;\n+    void commit();\n+    const Node* operator->() const { return this; }\n+    Node* operator->() { return this; }\n@@ -94,0 +90,1 @@\n+  typedef Node* NodePtr;\n@@ -95,0 +92,1 @@\n+ public:\n@@ -99,3 +97,2 @@\n-  \/\/ to access the versioning system\n-  Handle get_handle();\n-  Handle checkout_handle();\n+  typedef RefCountHandle<Node> Handle;\n+  Handle get();\n@@ -104,0 +101,6 @@\n+  NodePtr acquire();\n+  void await(Type version);\n+  Type tip() const;\n+  Type inc_tip();\n+  NodePtr synchronize_with(Type version, NodePtr last) const;\n+  DEBUG_ONLY(void assert_state(const Node* node) const;)\n@@ -111,10 +114,0 @@\n-  volatile int _spinlock;\n-\n-  NodePtr acquire();\n-  void release(NodePtr node);\n-  void await(Type version);\n-  Type tip() const;\n-  Type increment();\n-  NodePtr synchronize_with(Type version, NodePtr last) const;\n-  debug_only(bool is_registered(Type version) const;)\n-  friend class Handle;\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrVersionSystem.hpp","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -32,11 +32,1 @@\n-inline JfrVersionSystem::Node::Node() : _next(NULL), _version(0), _live(true) {}\n-\n-inline traceid JfrVersionSystem::Node::version() const {\n-  return _version;\n-}\n-\n-inline void JfrVersionSystem::Node::set(traceid version) {\n-  Atomic::release_store_fence(&_version, version);\n-}\n-\n-inline JfrVersionSystem::JfrVersionSystem() : _tip(), _head(NULL), _spinlock(0) {\n+inline JfrVersionSystem::JfrVersionSystem() : _tip(), _head(NULL) {\n@@ -65,1 +55,1 @@\n-inline JfrVersionSystem::Type JfrVersionSystem::increment() {\n+inline JfrVersionSystem::Type JfrVersionSystem::inc_tip() {\n@@ -83,1 +73,1 @@\n-    assert(node->_version == 0, \"invariant\");\n+    DEBUG_ONLY(assert_state(node);)\n@@ -87,1 +77,1 @@\n-  node = new Node();\n+  node = new Node(this);\n@@ -93,0 +83,1 @@\n+  DEBUG_ONLY(assert_state(node);)\n@@ -96,5 +87,39 @@\n-inline void JfrVersionSystem::release(JfrVersionSystem::NodePtr node) {\n-  assert(node != NULL, \"invariant\");\n-  assert(node->_live, \"invariant\");\n-  Atomic::release_store_fence(&node->_version, (traceid)0);\n-  node->_live = false;\n+inline JfrVersionSystem::Handle JfrVersionSystem::get() {\n+  return Handle::make(acquire());\n+}\n+\n+inline JfrVersionSystem::Node::Node(JfrVersionSystem* system) : _system(system), _next(NULL), _version(0), _live(true) {}\n+\n+inline traceid JfrVersionSystem::Node::version() const {\n+  return _version;\n+}\n+\n+inline void JfrVersionSystem::Node::set(traceid version) const {\n+  Atomic::release_store_fence(&_version, version);\n+}\n+\n+inline void JfrVersionSystem::Node::add_ref() const {\n+  _ref_counter.inc();\n+}\n+\n+inline void JfrVersionSystem::Node::remove_ref() const {\n+  if (_ref_counter.dec()) {\n+    assert(_live, \"invariant\");\n+    set(0);\n+    _live = false;\n+  }\n+}\n+\n+inline void JfrVersionSystem::Node::checkout() {\n+  set(_system->tip());\n+  assert(version() != 0, \"invariant\");\n+}\n+\n+inline void JfrVersionSystem::Node::commit() {\n+  assert(version() != 0, \"invariant\");\n+  \/\/ A commit consist of an atomic increment of the tip.\n+  const Type commit_version = _system->inc_tip();\n+  \/\/ Release this checkout.\n+  set(0);\n+  \/\/ Await release of checkouts for earlier versions.\n+  _system->await(commit_version);\n@@ -116,1 +141,1 @@\n-inline void JfrVersionSystem::await(JfrVersionSystem::Type  version) {\n+inline void JfrVersionSystem::await(JfrVersionSystem::Type version) {\n@@ -130,42 +155,0 @@\n-inline JfrVersionSystem::Handle JfrVersionSystem::get_handle() {\n-  return Handle(this);\n-}\n-\n-inline JfrVersionSystem::Handle JfrVersionSystem::checkout_handle() {\n-  Handle handle(this);\n-  handle.checkout();\n-  return handle;\n-}\n-\n-inline JfrVersionSystem::Handle::Handle(JfrVersionSystem* system) : _system(system), _node(system->acquire()) {}\n-\n-inline JfrVersionSystem::Handle::Handle() : _system(NULL), _node(NULL) {}\n-\n-inline JfrVersionSystem::Handle::~Handle() {\n-  if (_node != NULL) {\n-    _system->release(_node);\n-  }\n-}\n-\n-inline void JfrVersionSystem::Handle::checkout() {\n-  assert(_node != NULL, \"invariant\");\n-  _node->set(_system->tip());\n-}\n-\n-inline JfrVersionSystem::Type JfrVersionSystem::Handle::increment() {\n-  assert(_node != NULL, \"invariant\");\n-  const Type version = _system->increment();\n-  assert(version > _node->version(), \"invariant\");\n-  return version;\n-}\n-\n-inline void JfrVersionSystem::Handle::release() {\n-  assert(_node != NULL, \"invariant\");\n-  _system->release(_node);\n-  _node = NULL;\n-}\n-\n-inline void JfrVersionSystem::Handle::await(JfrVersionSystem::Type  version) {\n-  _system->await(version);\n-}\n-\n@@ -173,15 +156,5 @@\n-inline bool JfrVersionSystem::is_registered(JfrVersionSystem::Type version) const {\n-  NodePtr node = _head;\n-  while (node != NULL) {\n-    if (Atomic::load_acquire(&node->_version) == version) {\n-      return true;\n-    }\n-    node = node->_next;\n-  }\n-  return false;\n-}\n-\n-inline bool JfrVersionSystem::Handle::is_tracked() const {\n-  assert(_node != NULL, \"invariant\");\n-  const Type current_version = _node->version();\n-  return current_version != 0 && _system->is_registered(current_version);\n+inline void JfrVersionSystem::assert_state(const JfrVersionSystem::Node* node) const {\n+  assert(node != NULL, \"invariant\");\n+  assert(node->_live, \"invariant\");\n+  assert(node->_version == 0, \"invariant\");\n+  assert(node->_ref_counter.current() == 0, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrVersionSystem.inline.hpp","additions":51,"deletions":78,"binary":false,"changes":129,"status":"modified"}]}