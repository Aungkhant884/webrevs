{"files":[{"patch":"@@ -277,1 +277,1 @@\n-        Content output = (new DeprecatedTaglet()).getTagletOutput(member,\n+        Content output = (new DeprecatedTaglet()).getAllBlockTagOutput(member,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -379,1 +379,1 @@\n-            Content paramInfo = (new ParamTaglet()).getTagletOutput(typeElement,\n+            Content paramInfo = (new ParamTaglet()).getAllBlockTagOutput(typeElement,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        String value = utils.constantValueExpresion(member);\n+        String value = utils.constantValueExpression(member);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.taglets.Taglet;\n@@ -335,4 +336,1 @@\n-        Content output = new ContentBuilder();\n-        TagletWriter.genTagOutput(configuration.tagletManager, e,\n-            configuration.tagletManager.getBlockTaglets(e),\n-                getTagletWriterInstance(false), output);\n+        Content output = getBlockTagOutput(e);\n@@ -344,2 +342,2 @@\n-     * Check whether there are any tags for Serialization Overview\n-     * section to be printed.\n+     * Returns the content generated from the default supported set of block tags\n+     * for this element.\n@@ -347,2 +345,28 @@\n-     * @param field the VariableElement object to check for tags.\n-     * @return true if there are tags to be printed else return false.\n+     * @param element the element\n+     *\n+     * @return the content\n+     *\/\n+    protected Content getBlockTagOutput(Element element) {\n+        return getBlockTagOutput(element, configuration.tagletManager.getBlockTaglets(element));\n+    }\n+\n+    \/**\n+     * Returns the content generated from a specified set of block tags\n+     * for this element.\n+     *\n+     * @param element the element\n+     * @param taglets the taglets to handle the required set of tags\n+     *\n+     * @return the content\n+     *\/\n+    protected Content getBlockTagOutput(Element element, List<Taglet> taglets) {\n+        return getTagletWriterInstance(false)\n+                .getBlockTagOutput(configuration.tagletManager, element, taglets);\n+    }\n+\n+    \/**\n+     * Returns whether there are any tags in a field for the Serialization Overview\n+     * section to be generated.\n+     *\n+     * @param field the field to check\n+     * @return {@code true} if and only if there are tags to be included\n@@ -351,4 +375,1 @@\n-        Content output = new ContentBuilder();\n-        TagletWriter.genTagOutput(configuration.tagletManager, field,\n-                configuration.tagletManager.getBlockTaglets(field),\n-                getTagletWriterInstance(false), output);\n+        Content output = getBlockTagOutput(field);\n@@ -358,0 +379,5 @@\n+    private Content getInlineTagOutput(Element element, DocTree holder, DocTree tree, boolean isFirstSentence, boolean inSummary) {\n+        return getTagletWriterInstance(isFirstSentence, inSummary)\n+                .getInlineTagOutput(element, configuration.tagletManager, holder, tree);\n+    }\n+\n@@ -1443,5 +1469,2 @@\n-                    Content docRootContent = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager,\n-                            holderTag,\n-                            node,\n-                            getTagletWriterInstance(isFirstSentence));\n+                    Content docRootContent = getInlineTagOutput(element, holderTag, node,\n+                            isFirstSentence, false);\n@@ -1479,3 +1502,2 @@\n-                    Content output = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager, holderTag,\n-                            tag, getTagletWriterInstance(isFirstSentence));\n+                    Content output = getInlineTagOutput(element, holderTag, node,\n+                            isFirstSentence, false);\n@@ -1489,3 +1511,1 @@\n-                    Content output = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager, holderTag, tag,\n-                            getTagletWriterInstance(isFirstSentence, inSummary));\n+                    Content output = getInlineTagOutput(element, holderTag, node, isFirstSentence, inSummary);\n@@ -1538,3 +1558,1 @@\n-                    Content output = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager, holderTag, tag,\n-                            getTagletWriterInstance(isFirstSentence));\n+                    Content output = getInlineTagOutput(element, holderTag, node, isFirstSentence, false);\n@@ -1547,3 +1565,1 @@\n-                    Content output = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager, holderTag, tag,\n-                            getTagletWriterInstance(isFirstSentence, inSummary));\n+                    Content output = getInlineTagOutput(element, holderTag, node, isFirstSentence, inSummary);\n@@ -1582,3 +1598,1 @@\n-                    Content output = TagletWriter.getInlineTagOutput(element,\n-                            configuration.tagletManager, holderTag, tag,\n-                            getTagletWriterInstance(isFirstSentence));\n+                    Content output = getInlineTagOutput(element, holderTag, node, isFirstSentence, false);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":46,"deletions":32,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -199,7 +199,6 @@\n-        Content tagContent = new ContentBuilder();\n-        TagletWriter.genTagOutput(configuration.tagletManager, field,\n-                configuration.tagletManager.getBlockTaglets(field),\n-                writer.getTagletWriterInstance(false), tagContent);\n-        HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);\n-        dl.add(tagContent);\n-        contentTree.add(dl);  \/\/ TODO: what if empty?\n+        Content tagContent = writer.getBlockTagOutput(field);\n+        if (!tagContent.isEmpty()) {\n+            HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);\n+            dl.add(tagContent);\n+            contentTree.add(dl);\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialFieldWriter.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -156,6 +156,2 @@\n-        Content tagContent = new ContentBuilder();\n-        TagletManager tagletManager =\n-            configuration.tagletManager;\n-        TagletWriter.genTagOutput(tagletManager, member,\n-            tagletManager.getSerializedFormTaglets(),\n-            writer.getTagletWriterInstance(false), tagContent);\n+        TagletManager tagletManager = configuration.tagletManager;\n+        Content tagContent = writer.getBlockTagOutput(member, tagletManager.getSerializedFormTaglets());\n@@ -165,1 +161,1 @@\n-        if (name(member).compareTo(\"writeExternal\") == 0\n+        if (name(member).equals(\"writeExternal\")\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialMethodWriter.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -146,3 +146,3 @@\n-                    List<? extends DocTree> commentTags = ch.getDescription(deprs.get(0));\n-                    if (!commentTags.isEmpty()) {\n-                        result.add(commentTagsToOutput(null, element, commentTags, false));\n+                    List<? extends DocTree> commentTrees = ch.getDescription(deprs.get(0));\n+                    if (!commentTrees.isEmpty()) {\n+                        result.add(commentTagsToOutput(element, null, commentTrees, false));\n@@ -157,2 +157,2 @@\n-                    List<? extends DocTree> bodyTags = ch.getBody(deprs.get(0));\n-                    Content body = commentTagsToOutput(null, element, bodyTags, false);\n+                    List<? extends DocTree> bodyTrees = ch.getBody(deprs.get(0));\n+                    Content body = commentTagsToOutput(element, null, bodyTrees, false);\n@@ -208,12 +208,0 @@\n-    @Override\n-    public Content propertyTagOutput(Element element, DocTree tag, String prefix) {\n-        Content body = new ContentBuilder();\n-        CommentHelper ch = utils.getCommentHelper(element);\n-        body.add(new RawHtml(prefix));\n-        body.add(\" \");\n-        body.add(HtmlTree.CODE(new RawHtml(ch.getText(tag))));\n-        body.add(\".\");\n-        Content result = HtmlTree.P(body);\n-        return result;\n-    }\n-\n@@ -276,1 +264,1 @@\n-    public Content simpleTagOutput(Element element, List<? extends DocTree> simpleTags, String header) {\n+    public Content simpleBlockTagOutput(Element element, List<? extends DocTree> simpleTags, String header) {\n@@ -293,10 +281,0 @@\n-    @Override\n-    public Content simpleTagOutput(Element element, DocTree simpleTag, String header) {\n-        CommentHelper ch = utils.getCommentHelper(element);\n-        List<? extends DocTree> description = ch.getDescription(simpleTag);\n-        Content body = htmlWriter.commentTagsToContent(simpleTag, element, description, false, inSummary);\n-        return new ContentBuilder(\n-                HtmlTree.DT(new RawHtml(header)),\n-                HtmlTree.DD(body));\n-    }\n-\n@@ -361,2 +339,2 @@\n-    public Content commentTagsToOutput(DocTree holderTag, List<? extends DocTree> tags) {\n-        return commentTagsToOutput(holderTag, null, tags, false);\n+    public Content commentTagsToOutput(DocTree holder, List<? extends DocTree> tags) {\n+        return commentTagsToOutput(null, holder, tags, false);\n@@ -366,2 +344,2 @@\n-    public Content commentTagsToOutput(Element holder, List<? extends DocTree> tags) {\n-        return commentTagsToOutput(null, holder, tags, false);\n+    public Content commentTagsToOutput(Element element, List<? extends DocTree> tags) {\n+        return commentTagsToOutput(element, null, tags, false);\n@@ -371,2 +349,2 @@\n-    public Content commentTagsToOutput(DocTree holderTag,\n-                                       Element holder,\n+    public Content commentTagsToOutput(Element holder,\n+                                       DocTree holderTag,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":12,"deletions":34,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-                                        utils.constantValueExpresion(field), serialUidTree);\n+                                        utils.constantValueExpression(field), serialUidTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n@@ -156,1 +156,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/BaseTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/CodeTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/DeprecatedTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    public Content getTagletOutput(Element holder, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element holder, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/DocRootTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/IndexTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,2 +98,2 @@\n-                replacement = writer.commentTagsToOutput(inheritedDoc.holderTag,\n-                    inheritedDoc.holder, inheritedDoc.inlineTags, isFirstSentence);\n+                replacement = writer.commentTagsToOutput(inheritedDoc.holder, inheritedDoc.holderTag,\n+                    inheritedDoc.inlineTags, isFirstSentence);\n@@ -114,1 +114,1 @@\n-    public Content getTagletOutput(Element e, DocTree tag, TagletWriter tagletWriter) {\n+    public Content getInlineTagOutput(Element e, DocTree tag, TagletWriter tagletWriter) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    public Content getTagletOutput(Element e, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element e, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/LiteralTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ReturnTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SeeTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * A custom single-argument tag.\n+ * A custom single-argument block tag.\n@@ -181,6 +181,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n-        return header == null || tag == null ? null : writer.simpleTagOutput(element, tag, header);\n-    }\n-\n-    @Override\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n@@ -192,1 +187,1 @@\n-        return writer.simpleTagOutput(holder, tags, header);\n+        return writer.simpleBlockTagOutput(holder, tags, header);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SimpleTaglet.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    public Content getTagletOutput(Element holder, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element holder, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SummaryTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SystemPropertyTaglet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,5 @@\n-     * instance of a tag handled by this taglet.\n+     * instance of an inline tag handled by this taglet.\n+     *\n+     * @param owner  the element for the enclosing doc comment\n+     * @param tag    the tag\n+     * @param writer the taglet-writer used in this doclet\n@@ -132,3 +136,0 @@\n-     * @param element the element for the enclosing doc comment\n-     * @param tag     the tag\n-     * @param writer  the taglet-writer used in this doclet\n@@ -136,1 +137,1 @@\n-     * @throws UnsupportedTagletOperationException thrown when the method is not supported by the taglet\n+     * @throws UnsupportedTagletOperationException if the method is not supported by the taglet\n@@ -138,1 +139,1 @@\n-    Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) throws\n+    Content getInlineTagOutput(Element owner, DocTree tag, TagletWriter writer) throws\n@@ -143,1 +144,4 @@\n-     * instances of a tag handled by this taglet.\n+     * all instances of block tags handled by this taglet.\n+     *\n+     * @param owner  the element for the enclosing doc comment\n+     * @param writer the taglet-writer used in this doclet\n@@ -145,2 +149,0 @@\n-     * @param element the element for the enclosing doc comment\n-     * @param writer  the taglet-writer used in this doclet\n@@ -148,1 +150,1 @@\n-     * @throws UnsupportedTagletOperationException thrown when the method is not supported by the taglet\n+     * @throws UnsupportedTagletOperationException if the method is not supported by the taglet\n@@ -150,1 +152,1 @@\n-    Content getTagletOutput(Element element, TagletWriter writer) throws\n+    Content getAllBlockTagOutput(Element owner, TagletWriter writer) throws\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/Taglet.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    private List<Taglet> inlineTags;\n+    private Map<String, Taglet> inlineTags;\n@@ -291,1 +291,1 @@\n-     * Add a new {@code SimpleTaglet}.\n+     * Adds a new {@code SimpleTaglet}.\n@@ -335,3 +335,4 @@\n-     * Given a name of a seen custom tag, remove it from the set of unseen\n-     * custom tags.\n-     * @param name the name of the seen custom tag\n+     * Reports that a tag was seen in a doc comment.\n+     * It is removed from the list of custom tags that have not yet been seen.\n+     *\n+     * @param name the name of the tag\n@@ -339,1 +340,1 @@\n-    void seenCustomTag(String name) {\n+    void seenTag(String name) {\n@@ -500,1 +501,1 @@\n-    List<Taglet> getInlineTaglets() {\n+    Map<String, Taglet> getInlineTaglets() {\n@@ -502,1 +503,1 @@\n-            initBlockTaglets();\n+            initTaglets();\n@@ -513,1 +514,1 @@\n-            initBlockTaglets();\n+            initTaglets();\n@@ -528,1 +529,1 @@\n-            initBlockTaglets();\n+            initTaglets();\n@@ -568,1 +569,1 @@\n-     * Initialize the custom tag Lists.\n+     * Initialize the tag collections.\n@@ -570,1 +571,1 @@\n-    private void initBlockTaglets() {\n+    private void initTaglets() {\n@@ -577,1 +578,1 @@\n-        inlineTags = new ArrayList<>();\n+        inlineTags = new LinkedHashMap<>();\n@@ -579,3 +580,3 @@\n-        for (Taglet current : allTaglets.values()) {\n-            if (current.isInlineTag()) {\n-                inlineTags.add(current);\n+        for (Taglet t : allTaglets.values()) {\n+            if (t.isInlineTag()) {\n+                inlineTags.put(t.getName(), t);\n@@ -584,3 +585,3 @@\n-            if (current.isBlockTag()) {\n-                for (Location l : current.getAllowedLocations()) {\n-                    blockTagletsByLocation.get(l).add(current);\n+            if (t.isBlockTag()) {\n+                for (Location l : t.getAllowedLocations()) {\n+                    blockTagletsByLocation.get(l).add(t);\n@@ -591,1 +592,1 @@\n-        \/\/Init the serialized form tags\n+        \/\/ init the serialized form tags for the serialized form page\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Map;\n@@ -63,1 +64,3 @@\n-     * @return an instance of an output object.\n+     * Returns an instance of an output object.\n+     *\n+     * @return an instance of an output object\n@@ -68,1 +71,4 @@\n-     * Return the output for a {@code {@code ...}} tag.\n+     * Returns the output for a {@code {@code ...}} tag.\n+     *\n+     * @param element The element that owns the doc comment\n+     * @param tag     the tag\n@@ -70,3 +76,1 @@\n-     * @param element\n-     * @param tag the tag.\n-     * @return the output of the taglet.\n+     * @return the output\n@@ -77,1 +81,4 @@\n-     * Return the output for a {@code {@index...}} tag.\n+     * Returns the output for a {@code {@index...}} tag.\n+     *\n+     * @param element The element that owns the doc comment\n+     * @param tag     the tag\n@@ -79,2 +86,1 @@\n-     * @param tag the tag.\n-     * @return the output of the taglet.\n+     * @return the output\n@@ -85,2 +91,3 @@\n-     * Returns the output for the DocRoot inline tag.\n-     * @return the output for the DocRoot inline tag.\n+     * Returns the output for a {@code {@docRoot}} tag.\n+     *\n+     * @return the output\n@@ -91,1 +98,3 @@\n-     * Return the deprecated tag output.\n+     * Returns the output for a {@code @deprecated} tag.\n+     *\n+     * @param element The element that owns the doc comment\n@@ -93,2 +102,1 @@\n-     * @param element the element to write deprecated documentation for.\n-     * @return the output of the deprecated tag.\n+     * @return the output\n@@ -99,1 +107,4 @@\n-     * Return the output for a {@code {@literal ...}} tag.\n+     * Returns the output for a {@code {@literal ...}} tag.\n+     *\n+     * @param element The element that owns the doc comment\n+     * @param tag     the tag\n@@ -101,3 +112,1 @@\n-     * @param element\n-     * @param tag the tag.\n-     * @return the output of the taglet.\n+     * @return the output\n@@ -108,1 +117,1 @@\n-     * Return the header for the param tags.\n+     * Returns the header for the {@code @param} tags.\n@@ -111,1 +120,2 @@\n-     * @return the header for the param tags\n+     *\n+     * @return the header\n@@ -116,1 +126,7 @@\n-     * Return the output for param tags.\n+     * Returns the output for a {@code @param} tag.\n+     * Note we cannot rely on the name in the tag, because we might be\n+     * inheriting the tag.\n+     *\n+     * @param element   The element that owns the doc comment\n+     * @param paramTag  the parameter to document\n+     * @param paramName the name of the parameter\n@@ -118,4 +134,1 @@\n-     * @param element\n-     * @param paramTag the parameter to document.\n-     * @param paramName the name of the parameter.\n-     * @return the output of the param tag.\n+     * @return the output\n@@ -126,1 +139,1 @@\n-     * Return the output for property tags.\n+     * Returns the output for a {@code @return} tag.\n@@ -128,9 +141,2 @@\n-     * @param element\n-     * @param propertyTag the parameter to document.\n-     * @param prefix the text with which to prefix the property name.\n-     * @return the output of the param tag.\n-     *\/\n-    protected abstract Content propertyTagOutput(Element element, DocTree propertyTag, String prefix);\n-\n-    \/**\n-     * Return the return tag output.\n+     * @param element   The element that owns the doc comment\n+     * @param returnTag the return tag to document\n@@ -138,3 +144,1 @@\n-     * @param element\n-     * @param returnTag the return tag to output.\n-     * @return the output of the return tag.\n+     * @return the output\n@@ -145,1 +149,1 @@\n-     * Return the see tag output.\n+     * Returns the output for {@code @see} tags.\n@@ -147,8 +151,2 @@\n-     * @param holder\n-     * @param seeTags the array of See tags.\n-     * @return the output of the see tags.\n-     *\/\n-    protected abstract Content seeTagOutput(Element holder, List<? extends DocTree> seeTags);\n-\n-    \/**\n-     * Return the output for a simple tag.\n+     * @param element The element that owns the doc comment\n+     * @param seeTags the list of tags\n@@ -156,4 +154,1 @@\n-     * @param element\n-     * @param simpleTags the array of simple tags.\n-     * @param header\n-     * @return the output of the simple tags.\n+     * @return the output\n@@ -161,1 +156,1 @@\n-    protected abstract Content simpleTagOutput(Element element, List<? extends DocTree> simpleTags, String header);\n+    protected abstract Content seeTagOutput(Element element, List<? extends DocTree> seeTags);\n@@ -164,1 +159,1 @@\n-     * Return the output for a simple tag.\n+     * Returns the output for a series of simple tags.\n@@ -166,4 +161,5 @@\n-     * @param element\n-     * @param simpleTag the simple tag.\n-     * @param header\n-     * @return the output of the simple tag.\n+     * @param element    The element that owns the doc comment\n+     * @param simpleTags the list of simple tags\n+     * @param header     the header for the series of tags\n+     *\n+     * @return the output\n@@ -171,1 +167,1 @@\n-    protected abstract Content simpleTagOutput(Element element, DocTree simpleTag, String header);\n+    protected abstract Content simpleBlockTagOutput(Element element, List<? extends DocTree> simpleTags, String header);\n@@ -174,1 +170,1 @@\n-     * Return the system property tag output.\n+     * Returns the output for a {@code {@systemProperty...}} tag.\n@@ -176,1 +172,1 @@\n-     * @param element\n+     * @param element           The element that owns the doc comment\n@@ -178,1 +174,2 @@\n-     * @return the output of system property tag\n+     *\n+     * @return the output\n@@ -183,1 +180,1 @@\n-     * Return the header for the throws tag.\n+     * Returns the header for the {@code @throws} tag.\n@@ -185,1 +182,1 @@\n-     * @return the header for the throws tag.\n+     * @return the header for the throws tag\n@@ -190,1 +187,1 @@\n-     * Return the header for the throws tag.\n+     * Returns the output for a {@code @throws} tag.\n@@ -192,4 +189,5 @@\n-     * @param element\n-     * @param throwsTag the throws tag.\n-     * @param substituteType instantiated type of a generic type-variable, or null.\n-     * @return the output of the throws tag.\n+     * @param element        The element that owns the doc comment\n+     * @param throwsTag      the throws tag\n+     * @param substituteType instantiated type of a generic type-variable, or null\n+     *\n+     * @return the output\n@@ -200,1 +198,3 @@\n-     * Return the output for the throws tag.\n+     * Returns the output for a default {@code @throws} tag.\n+     *\n+     * @param throwsType the type that is thrown\n@@ -202,2 +202,1 @@\n-     * @param throwsType the throws type.\n-     * @return the output of the throws type.\n+     * @return the output\n@@ -208,1 +207,1 @@\n-     * Return the output for the value tag.\n+     * Returns the output for a {@code {@value}} tag.\n@@ -210,2 +209,2 @@\n-     * @param field       the constant field that holds the value tag.\n-     * @param constantVal the constant value to document.\n+     * @param field       the constant field that holds the value tag\n+     * @param constantVal the constant value to document\n@@ -213,2 +212,3 @@\n-     *                    constant field itself.\n-     * @return the output of the value tag.\n+     *                    constant field itself\n+     *\n+     * @return the output\n@@ -220,1 +220,1 @@\n-     * Return the main type element of the current page or null for pages that don't have one.\n+     * Returns the main type element of the current page or null for pages that don't have one.\n@@ -227,8 +227,10 @@\n-     * Given an output object, append to it the tag documentation for\n-     * the given member.\n-     *\n-     * @param tagletManager the manager that manages the taglets.\n-     * @param element the element that we are print tags for.\n-     * @param taglets the taglets to print.\n-     * @param writer the writer that will generate the output strings.\n-     * @param output the output buffer to store the output in.\n+     * Returns the content generated from the block tags for a given element.\n+     * The content is generated according to the order of the list of taglets.\n+     * The result is a possibly-empty list of the output generated by each\n+     * of the given taglets for all of the tags they individually support.\n+     *\n+     * @param tagletManager the manager that manages the taglets\n+     * @param element       the element that we are to write tags for\n+     * @param taglets       the taglets for the tags to write\n+     *\n+     * @return the content\n@@ -236,1 +238,1 @@\n-    public static void genTagOutput(TagletManager tagletManager,\n+    public Content getBlockTagOutput(TagletManager tagletManager,\n@@ -238,5 +240,9 @@\n-                                    List<Taglet> taglets,\n-                                    TagletWriter writer,\n-                                    Content output)\n-    {\n-        Utils utils = writer.configuration().utils;\n+                                    List<Taglet> taglets) {\n+        for (Taglet t : taglets) {\n+            if (!t.isBlockTag()) {\n+                throw new IllegalArgumentException(t.getName());\n+            }\n+        }\n+\n+        Content output = getOutputInstance();\n+        Utils utils = configuration().utils;\n@@ -251,0 +257,1 @@\n+\n@@ -261,0 +268,1 @@\n+\n@@ -266,0 +274,1 @@\n+\n@@ -270,1 +279,1 @@\n-            Content currentOutput = null;\n+\n@@ -272,7 +281,4 @@\n-                currentOutput = taglet.getTagletOutput(element, writer);\n-            } catch (UnsupportedTagletOperationException utoe) {\n-                \/\/The taglet does not take a member as an argument.  Let's try\n-                \/\/a single tag.\n-                List<? extends DocTree> tags = utils.getBlockTags(element, taglet);\n-                if (!tags.isEmpty()) {\n-                    currentOutput = taglet.getTagletOutput(element, tags.get(0), writer);\n+                Content tagletOutput = taglet.getAllBlockTagOutput(element, this);\n+                if (tagletOutput != null) {\n+                    tagletManager.seenTag(taglet.getName());\n+                    output.add(tagletOutput);\n@@ -280,4 +286,4 @@\n-            }\n-            if (currentOutput != null) {\n-                tagletManager.seenCustomTag(taglet.getName());\n-                output.add(currentOutput);\n+            } catch (UnsupportedTagletOperationException e) {\n+                \/\/ malformed taglet:\n+                \/\/ claims to support block tags (see Taglet.isBlockTag) but does not provide the\n+                \/\/ appropriate method, Taglet.getAllBlockTagOutput.\n@@ -286,0 +292,1 @@\n+        return output;\n@@ -287,0 +294,1 @@\n+\n@@ -288,8 +296,10 @@\n-     * Given an inline tag, return its output.\n-     * @param holder\n-     * @param tagletManager The taglet manager for the current doclet.\n-     * @param holderTag The tag that holds this inline tag, or {@code null} if\n-     *                  there is no tag that holds it.\n-     * @param inlineTag The inline tag to be documented.\n-     * @param tagletWriter The taglet writer to write the output.\n-     * @return The output of the inline tag.\n+     * Returns the content generated from an inline tag in the doc comment for a given element,\n+     * or {@code null} if the tag is not supported or does not return any output.\n+     *\n+     * @param holder        the element associated with the doc comment\n+     * @param tagletManager the taglet manager for the current doclet\n+     * @param holderTag     the tag that holds this inline tag, or {@code null} if\n+     *                      there is no tag that holds it\n+     * @param inlineTag     the inline tag to be documented\n+     *\n+     * @return the content, or {@code null}\n@@ -297,8 +307,7 @@\n-    public static Content getInlineTagOutput(Element holder,\n-                                             TagletManager tagletManager,\n-                                             DocTree holderTag,\n-                                             DocTree inlineTag,\n-                                             TagletWriter tagletWriter)\n-    {\n-        List<Taglet> definedTags = tagletManager.getInlineTaglets();\n-        CommentHelper ch = tagletWriter.configuration().utils.getCommentHelper(holder);\n+    public Content getInlineTagOutput(Element holder,\n+                                      TagletManager tagletManager,\n+                                      DocTree holderTag,\n+                                      DocTree inlineTag) {\n+\n+        Map<String, Taglet> inlineTags = tagletManager.getInlineTaglets();\n+        CommentHelper ch = configuration().utils.getCommentHelper(holder);\n@@ -306,12 +315,16 @@\n-        \/\/This is a custom inline tag.\n-        for (Taglet definedTag : definedTags) {\n-            if ((definedTag.getName()).equals(inlineTagName)) {\n-                \/\/ Given a name of a seen custom tag, remove it from the\n-                \/\/ set of unseen custom tags.\n-                tagletManager.seenCustomTag(definedTag.getName());\n-                Content output = definedTag.getTagletOutput(holder,\n-                        holderTag != null &&\n-                        definedTag.getName().equals(\"inheritDoc\") ?\n-                        holderTag : inlineTag, tagletWriter);\n-                return output;\n-            }\n+        Taglet t = inlineTags.get(inlineTagName);\n+        if (t == null) {\n+            return null;\n+        }\n+\n+        try {\n+            Content tagletOutput = t.getInlineTagOutput(holder,\n+                    holderTag != null && t.getName().equals(\"inheritDoc\") ? holderTag : inlineTag,\n+                    this);\n+            tagletManager.seenTag(t.getName());\n+            return tagletOutput;\n+        } catch (UnsupportedTagletOperationException e) {\n+            \/\/ malformed taglet:\n+            \/\/ claims to support inline tags (see Taglet.isInlineTag) but does not provide the\n+            \/\/ appropriate method, Taglet.getInlineTagOutput.\n+            return null;\n@@ -319,1 +332,0 @@\n-        return null;\n@@ -323,1 +335,1 @@\n-     * Converts inline tags and text to TagOutput, expanding the\n+     * Converts inline tags and text to content, expanding the\n@@ -326,1 +338,1 @@\n-     * to non-inline tags.\n+     * to block tags.\n@@ -328,4 +340,5 @@\n-     * @param holderTag the tag that holds the documentation.\n-     * @param tags   array of text tags and inline tags (often alternating)\n-     *               present in the text of interest for this doc.\n-     * @return the {@link Content} representing the comments.\n+     * @param holderTree the tree that holds the documentation\n+     * @param trees      list of {@code DocTree} nodes containing text and inline tags (often alternating)\n+     *                   present in the text of interest for this doc\n+     *\n+     * @return the generated content\n@@ -333,1 +346,1 @@\n-    public abstract Content commentTagsToOutput(DocTree holderTag, List<? extends DocTree> tags);\n+    public abstract Content commentTagsToOutput(DocTree holderTree, List<? extends DocTree> trees);\n@@ -336,1 +349,1 @@\n-     * Converts inline tags and text to TagOutput, expanding the\n+     * Converts inline tags and text to content, expanding the\n@@ -339,1 +352,5 @@\n-     * to non-inline tags.\n+     * to block tags.\n+     *\n+     * @param element The element that owns the documentation\n+     * @param trees  list of {@code DocTree} nodes containing text and inline tags (often alternating)\n+     *               present in the text of interest for this doc\n@@ -341,4 +358,1 @@\n-     * @param holder the element where comment resides.\n-     * @param tags   array of text tags and inline tags (often alternating)\n-     *               present in the text of interest for this doc.\n-     * @return the {@link Content} representing the comments.\n+     * @return the generated content\n@@ -346,1 +360,1 @@\n-    public abstract Content commentTagsToOutput(Element holder, List<? extends DocTree> tags);\n+    public abstract Content commentTagsToOutput(Element element, List<? extends DocTree> trees);\n@@ -349,1 +363,1 @@\n-     * Converts inline tags and text to TagOutput, expanding the\n+     * Converts inline tags and text to content, expanding the\n@@ -354,6 +368,7 @@\n-     * @param holderTag the tag that holds the documentation.\n-     * @param holder the element where comment resides.\n-     * @param tags   array of text tags and inline tags (often alternating)\n-     *               present in the text of interest for this doc.\n-     * @param isFirstSentence true if this is the first sentence.\n-     * @return the {@link Content} representing the comments.\n+     * @param element         the element where comment resides\n+     * @param holder          the tag that holds the documentation\n+     * @param trees           array of text tags and inline tags (often alternating)\n+     *                        present in the text of interest for this doc\n+     * @param isFirstSentence true if this is the first sentence\n+     *\n+     * @return the generated content\n@@ -361,2 +376,2 @@\n-    public abstract Content commentTagsToOutput(DocTree holderTag,\n-        Element holder, List<? extends DocTree> tags, boolean isFirstSentence);\n+    public abstract Content commentTagsToOutput(Element element, DocTree holder,\n+                                                List<? extends DocTree> trees, boolean isFirstSentence);\n@@ -365,1 +380,3 @@\n-     * @return an instance of the configuration used for this doclet.\n+     * Returns an instance of the configuration used for this doclet.\n+     *\n+     * @return an instance of the configuration used for this doclet\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java","additions":172,"deletions":155,"binary":false,"changes":327,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Collections;\n@@ -114,1 +113,1 @@\n-    public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n@@ -116,1 +115,1 @@\n-        output.add(new RawHtml(userTaglet.toString(Collections.singletonList(tag), element)));\n+        output.add(new RawHtml(userTaglet.toString(List.of(tag), element)));\n@@ -121,1 +120,1 @@\n-    public Content getTagletOutput(Element holder, TagletWriter writer) {\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/UserTaglet.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,4 +88,5 @@\n-    public Content getTagletOutput(Element holder, DocTree tag, TagletWriter writer) {\n-        Utils utils = writer.configuration().utils;\n-        Messages messages = writer.configuration().getMessages();\n-        VariableElement field = getVariableElement(holder, writer.configuration(), tag);\n+    public Content getInlineTagOutput(Element holder, DocTree tag, TagletWriter writer) {\n+        BaseConfiguration configuration = writer.configuration();\n+        Utils utils = configuration.utils;\n+        Messages messages = configuration.getMessages();\n+        VariableElement field = getVariableElement(holder, configuration, tag);\n@@ -104,1 +105,1 @@\n-                utils.constantValueExpresion(field),\n+                utils.constantValueExpression(field),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ValueTaglet.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2271,1 +2271,1 @@\n-    public String constantValueExpresion(VariableElement ve) {\n+    public String constantValueExpression(VariableElement ve) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}