{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -54,2 +55,0 @@\n-    private static BufferedImage bufferedImageAfter;\n-    private static BufferedImage bufferedImageBefore;\n@@ -58,0 +57,1 @@\n+        Point clkPoint;\n@@ -64,6 +64,1 @@\n-                    try {\n-                        createAndShowGUI();\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                        throw new RuntimeException(\"Exception while creating UI\");\n-                    }\n+                    createAndShowGUI();\n@@ -72,0 +67,1 @@\n+            testRobot.delay(1000);\n@@ -73,1 +69,2 @@\n-            CaptureBeforeClick();\n+            BufferedImage bufferedImageBefore = testRobot.createScreenCapture(getCaptureRect());\n+            testRobot.delay(1000);\n@@ -75,1 +72,2 @@\n-            MouseActions();\n+            clkPoint = getMousePosition();\n+            mouseEvents(clkPoint);\n@@ -79,1 +77,2 @@\n-            CaptureAfterClick();\n+            BufferedImage bufferedImageAfter = testRobot.createScreenCapture(getCaptureRect());\n+            testRobot.delay(1000);\n@@ -134,2 +133,1 @@\n-     * Capture the screen before click and sets the Before click Image\n-     * @throws Exception\n+     * mouseEvents for last row click\n@@ -137,3 +135,0 @@\n-    private static void CaptureBeforeClick() throws Exception {\n-\n-        SwingUtilities.invokeAndWait(new Runnable() {\n@@ -141,11 +136,7 @@\n-            @Override\n-            public void run() {\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException e) {\n-                    e.printStackTrace();\n-                }\n-                bufferedImageBefore = captureImage();\n-                testRobot.delay(1000);\n-            }\n-        });\n+    private static void mouseEvents(Point clkPnt)  {\n+        testRobot.mouseMove(clkPnt.x, clkPnt.y);\n+        testRobot.delay(50);\n+        testRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        testRobot.delay(50);\n+        testRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        testRobot.delay(50);\n@@ -153,1 +144,0 @@\n-\n@@ -156,1 +146,2 @@\n-     * Mouse Actions for last row click\n+     * getMousePosition Actions for last row click\n+     * @returns Point\n@@ -160,1 +151,2 @@\n-    private static void MouseActions() throws Exception {\n+    private static Point getMousePosition() throws Exception {\n+        final Point[] clickPoint = new Point[1];\n@@ -164,12 +156,1 @@\n-                try {\n-                    Point clickPoint = getCellClickPoint(2, 0);\n-\n-                    testRobot.mouseMove(clickPoint.x, clickPoint.y);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                testRobot.delay(50);\n-                testRobot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-                testRobot.delay(50);\n-                testRobot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-                testRobot.delay(50);\n+                clickPoint[0] = getCellClickPoint(2, 0);\n@@ -178,0 +159,1 @@\n+        return clickPoint[0];\n@@ -187,1 +169,0 @@\n-\n@@ -189,1 +170,0 @@\n-\n@@ -198,4 +178,4 @@\n-    \/***\n-     *\n-     * Capture the screen after click and sets the After click Image\n-     * @throws Exception\n+    \/****\n+     * getCaptureRect Method - To Compute the Rectangle for\n+     * Screen Capturing the Last Row for comparison\n+     * @return Rectangle\n@@ -204,2 +184,2 @@\n-    private static void CaptureAfterClick() throws Exception {\n-\n+    private static Rectangle getCaptureRect() throws InterruptedException, InvocationTargetException {\n+        final Rectangle[] captureRect = new Rectangle[1];\n@@ -207,1 +187,0 @@\n-\n@@ -210,1 +189,5 @@\n-                bufferedImageAfter = captureImage();\n+                Rectangle cellRect = table.getCellRect(2, 0, true);\n+                Point point = new Point(cellRect.x, cellRect.y);\n+                SwingUtilities.convertPointToScreen(point, table);\n+\n+                captureRect[0] = new Rectangle(point.x, point.y, table.getColumnCount() * cellRect.width, cellRect.height);\n@@ -213,14 +196,1 @@\n-    }\n-\n-    \/****\n-     * Capture Method - To Screen Capture the Last Row for comparison\n-     * @return BufferedImage\n-     *\/\n-\n-    private static BufferedImage captureImage() {\n-        Rectangle cellRect = table.getCellRect(2, 0, true);\n-        Point point = new Point(cellRect.x, cellRect.y);\n-        SwingUtilities.convertPointToScreen(point, table);\n-\n-        Rectangle captureRect = new Rectangle(point.x, point.y, table.getColumnCount() * cellRect.width, cellRect.height);\n-        return testRobot.createScreenCapture(captureRect);\n+        return captureRect[0];\n","filename":"test\/jdk\/javax\/swing\/JTable\/8236907\/LastVisibleRow.java","additions":36,"deletions":66,"binary":false,"changes":102,"status":"modified"}]}