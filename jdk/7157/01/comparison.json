{"files":[{"patch":"@@ -49,16 +49,1 @@\n- * <pre>{@literal\n- *   List<AnnotationElement> typeAnnotations = new ArrayList<>();\n- *   typeAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n- *   typeAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n- *   typeAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n- *\n- *   List<AnnotationElement> fieldAnnotations = new ArrayList<>();\n- *   fieldAnnotations.add(new AnnotationElement(Label.class, \"Message\"));\n- *\n- *   List<ValueDescriptor> fields = new ArrayList<>();\n- *   fields.add(new ValueDescriptor(String.class, \"message\", fieldAnnotations));\n- *\n- *   EventFactory f = EventFactory.create(typeAnnotations, fields);\n- *   Event event = f.newEvent();\n- *   event.commit();\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"AnnotationElementOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/AnnotationElement.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -34,21 +34,1 @@\n- * <pre>{@literal\n- * import jdk.jfr.Event;\n- * import jdk.jfr.Description;\n- * import jdk.jfr.Label;\n- *\n- * public class Example {\n- *\n- *   @Label(\"Hello World\")\n- *   @Description(\"Helps programmer getting started\")\n- *   static class HelloWorld extends Event {\n- *       @Label(\"Message\")\n- *       String message;\n- *   }\n- *\n- *   public static void main(String... args) {\n- *       HelloWorld event = new HelloWorld();\n- *       event.message = \"hello, world!\";\n- *       event.commit();\n- *   }\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"EventOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Event.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -55,23 +55,1 @@\n- * <pre>\n- * {@code\n- * List<ValueDescriptor> fields = new ArrayList<>();\n- * List<AnnotationElement> messageAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Message\"));\n- * fields.add(new ValueDescriptor(String.class, \"message\", messageAnnotations));\n- * List<AnnotationElement> numberAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Number\"));\n- * fields.add(new ValueDescriptor(int.class, \"number\", numberAnnotations));\n- *\n- * String[] category = { \"Example\", \"Getting Started\" };\n- * List<AnnotationElement> eventAnnotations = new ArrayList<>();\n- * eventAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n- * eventAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n- * eventAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n- * eventAnnotations.add(new AnnotationElement(Category.class, category));\n- *\n- * EventFactory f = EventFactory.create(eventAnnotations, fields);\n- *\n- * Event event = f.newEvent();\n- * event.set(0, \"hello, world!\");\n- * event.set(1, 4711);\n- * event.commit();\n- * }\n- * <\/pre>\n+ * {@snippet class=\"Snippets\" region=\"EventFactoryOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventFactory.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -41,12 +41,0 @@\n- * <pre>\n- * {@code\n- * Recording r = new Recording();\n- * r.enable(\"jdk.CPULoad\")\n- *    .withPeriod(Duration.ofSeconds(1));\n- * r.enable(\"jdk.FileWrite\")\n- *    .withoutStackTrace()\n- *    .withThreshold(Duration.ofNanos(10));\n- * r.start();\n- * Thread.sleep(10_000);\n- * r.stop();\n- * r.dump(Files.createTempFile(\"recording\", \".jfr\"));\n@@ -54,2 +42,2 @@\n- * }\n- * <\/pre>\n+ * {@snippet class=\"Snippets\" region=\"EventSettingOverview\"}\n+ *\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventSettings.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -95,9 +95,1 @@\n-     * <pre>{@literal\n-     * try (Recording snapshot = FlightRecorder.getFlightRecorder().takeSnapshot()) {\n-     *   if (snapshot.getSize() > 0) {\n-     *     snapshot.setMaxSize(100_000_000);\n-     *     snapshot.setMaxAge(Duration.ofMinutes(5));\n-     *     snapshot.dump(Paths.get(\"snapshot.jfr\"));\n-     *   }\n-     * }\n-     * }<\/pre>\n+     * {@snippet class=\"Snippets\" region=\"FlightRecorderTakeSnapshot\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorder.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,30 +39,1 @@\n- * <pre>{@literal\n- * @MetadataDefinition\n- * @Label(\"Severity\")\n- * @Description(\"Value between 0 and 100 that indicates severity. 100 is most severe.\")\n- * @Retention(RetentionPolicy.RUNTIME)\n- * @Target({ElementType.TYPE})\n- * public @interface Severity {\n- *     int value() default 50;\n- * }\n- *\n- * @MetadataDefinition\n- * @Label(\"Transaction Id\")\n- * @Relational\n- * @Retention(RetentionPolicy.RUNTIME)\n- * @Target({ElementType.FIELD})\n- * public @interface TransactionId {\n- * }\n- *\n- * @Severity(80)\n- * @Label(\"Transaction Blocked\")\n- * class TransactionBlocked extends Event {\n- *     @TransactionId\n- *     @Label(\"Transaction\")\n- *     long transactionId1;\n- *\n- *     @TransactionId\n- *     @Label(\"Transaction Blocker\")\n- *     long transactionId2;\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"MetadataDefinitionOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/MetadataDefinition.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -49,9 +49,1 @@\n- * <pre>{@literal\n- *   Configuration c = Configuration.getConfiguration(\"default\");\n- *   Recording r = new Recording(c);\n- *   r.start();\n- *   System.gc();\n- *   Thread.sleep(5000);\n- *   r.stop();\n- *   r.dump(Files.createTempFile(\"my-recording\", \".jfr\"));\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"RecordingOverview\"}\n@@ -146,1 +138,1 @@\n-     * <pre>{@literal\n+     * {@snippet :\n@@ -148,1 +140,1 @@\n-     * }<\/pre>\n+     * }\n@@ -310,1 +302,1 @@\n-     * <pre>{@literal\n+     * {@snippet :\n@@ -316,1 +308,1 @@\n-     * }<\/pre>\n+     * }\n@@ -320,1 +312,1 @@\n-     * <pre>{@literal\n+     * {@snippet :\n@@ -324,1 +316,1 @@\n-     * }<\/pre>\n+     * }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -40,24 +40,1 @@\n- * <pre>{@literal\n- * final class RegExpControl extends SettingControl {\n- *   private Pattern pattern = Pattern.compile(\".*\");\n- *\n- *   @Override\n- *   public void setValue(String value) {\n- *     this.pattern = Pattern.compile(value);\n- *   }\n- *\n- *   @Override\n- *   public String combine(Set<String> values) {\n- *     return String.join(\"|\", values);\n- *   }\n- *\n- *   @Override\n- *   public String getValue() {\n- *     return pattern.toString();\n- *   }\n- *\n- *   public boolean matches(String s) {\n- *     return pattern.matcher(s).find();\n- *   }\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"SettingControlOverview1\"}\n@@ -88,38 +65,1 @@\n- * <pre>{@literal\n- * abstract class HTTPRequest extends Event {\n- *   @Label(\"Request URI\")\n- *   protected String uri;\n- *\n- *   @Label(\"Servlet URI Filter\")\n- *   @SettingDefinition\n- *   protected boolean uriFilter(RegExpControl regExp) {\n- *     return regExp.matches(uri);\n- *   }\n- * }\n- *\n- * @Label(\"HTTP Get Request\")\n- * class HTTPGetRequest extends HTTPRequest {\n- * }\n- *\n- * @Label(\"HTTP Post Request\")\n- * class HTTPPostRequest extends HTTPRequest {\n- * }\n- *\n- * class ExampleServlet extends HttpServlet {\n- *   protected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n- *     HTTPGetRequest request = new HTTPGetRequest();\n- *     request.begin();\n- *     request.uri = req.getRequestURI();\n- *     ...\n- *     request.commit();\n- *   }\n- *\n- *   protected void doPost(HttpServletRequest req, HttpServletResponse resp) {\n- *     HTTPPostRequest request = new HTTPPostRequest();\n- *     request.begin();\n- *     request.uri = req.getRequestURI();\n- *     ...\n- *     request.commit();\n- *   }\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"SettingControlOverview2\"}\n@@ -131,6 +71,1 @@\n- * <pre>{@literal\n- * Recording r = new Recording();\n- * r.enable(\"HTTPGetRequest\").with(\"uriFilter\", \"https:\/\/www.example.com\/list\/.*\");\n- * r.enable(\"HTTPPostRequest\").with(\"uriFilter\", \"https:\/\/www.example.com\/login\/.*\");\n- * r.start();\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"SettingControlOverview3\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/SettingControl.java","additions":3,"deletions":68,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -98,19 +98,1 @@\n- * <pre>{@literal\n- * try (var es = EventStream.openRepository()) {\n- *   es.onEvent(\"jdk.CPULoad\", event -> {\n- *     System.out.println(\"CPU Load \" + event.getEndTime());\n- *     System.out.println(\" Machine total: \" + 100 * event.getFloat(\"machineTotal\") + \"%\");\n- *     System.out.println(\" JVM User: \" + 100 * event.getFloat(\"jvmUser\") + \"%\");\n- *     System.out.println(\" JVM System: \" + 100 * event.getFloat(\"jvmSystem\") + \"%\");\n- *     System.out.println();\n- *   });\n- *   es.onEvent(\"jdk.GarbageCollection\", event -> {\n- *     System.out.println(\"Garbage collection: \" + event.getLong(\"gcId\"));\n- *     System.out.println(\" Cause: \" + event.getString(\"cause\"));\n- *     System.out.println(\" Total pause: \" + event.getDuration(\"sumOfPauses\"));\n- *     System.out.println(\" Longest pause: \" + event.getDuration(\"longestPause\"));\n- *     System.out.println();\n- *   });\n- *   es.start();\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"EventStreamOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/EventStream.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -228,17 +228,1 @@\n-     *\n-     * <pre>{@literal\n-     * if (event.hasField(\"intValue\")) {\n-     *   int intValue = event.getValue(\"intValue\");\n-     *   System.out.println(\"Int value: \" + intValue);\n-     * }\n-     *\n-     * if (event.hasField(\"objectClass\")) {\n-     *   RecordedClass clazz = event.getValue(\"objectClass\");\n-     *   System.out.println(\"Class name: \" + clazz.getName());\n-     * }\n-     *\n-     * if (event.hasField(\"sampledThread\")) {\n-     *   RecordedThread sampledThread = event.getValue(\"sampledThread\");\n-     *   System.out.println(\"Sampled thread: \" + sampledThread.getJavaName());\n-     * }\n-     * }<\/pre>\n+     * {@snippet class=\"Snippets\" region=\"RecordedObjectGetValue\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,8 +52,1 @@\n- * <pre>{@literal\n- * try (RecordingFile recordingFile = new RecordingFile(Paths.get(\"recording.jfr\"))) {\n- *   while (recordingFile.hasMoreEvents()) {\n- *     RecordedEvent event = recordingFile.readEvent();\n- *     System.out.println(event);\n- *   }\n- * }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"RecordingFileOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,9 +59,2 @@\n- * <pre>{@literal\n- * Configuration c = Configuration.getConfiguration(\"default\");\n- * try (var rs = new RecordingStream(c)) {\n- *     rs.onEvent(\"jdk.GarbageCollection\", System.out::println);\n- *     rs.onEvent(\"jdk.CPULoad\", System.out::println);\n- *     rs.onEvent(\"jdk.JVMInformation\", System.out::println);\n- *     rs.start();\n- * }\n- * }<\/pre>\n+ *\n+ * {@snippet class=\"Snippets\" region=\"RecordingStreamOverview\"}\n@@ -143,7 +136,1 @@\n-     * <pre>{@literal\n-     * var c = Configuration.getConfiguration(\"default\");\n-     * try (var rs = new RecordingStream(c)) {\n-     *   rs.onEvent(System.out::println);\n-     *   rs.start();\n-     * }\n-     * }<\/pre>\n+     * {@snippet class=\"Snippets\" region=\"RecordingStreamConstructor\"}\n@@ -192,11 +179,1 @@\n-     * <pre>{@literal\n-     * Configuration defaultConfiguration = Configuration.getConfiguration(\"default\");\n-     * Configuration profileConfiguration = Configuration.getConfiguration(\"profile\");\n-     * try (var rs = new RecordingStream(defaultConfiguration)) {\n-     *    rs.onEvent(System.out::println);\n-     *    rs.startAsync();\n-     *    Thread.sleep(20_000);\n-     *    rs.setSettings(profileConfiguration.getSettings());\n-     *    Thread.sleep(20_000);\n-     * }\n-     * }<\/pre>\n+     * {@snippet class=\"Snippets\" region=\"RecordingStreamSetSettings\"}\n@@ -387,10 +364,2 @@\n-     * <pre>{@literal\n-     * try (var stream = new RecordingStream()) {\n-     *   stream.enable(\"jdk.CPULoad\").withPeriod(Duration.ofSeconds(1));\n-     *   stream.onEvent(\"jdk.CPULoad\", event -> {\n-     *     System.out.println(event);\n-     *   });\n-     *   stream.startAsync();\n-     *   Thread.sleep(10_000);\n-     * }\n-     * }<\/pre>\n+     *\n+     * {@snippet class=\"Snippets\" region=\"RecordingStreamStartAsync\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":6,"deletions":37,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -30,6 +30,0 @@\n- * <pre>{@literal\n- * public static void main(String[] args) throws IOException {\n- *     if (args.length != 1) {\n- *         System.err.println(\"Must specify a recording file.\");\n- *         return;\n- *     }\n@@ -37,16 +31,1 @@\n- *     RecordingFile.readAllEvents(Path.of(args[0])).stream()\n- *         .filter(e -> e.getEventType().getName().equals(\"jdk.ExecutionSample\"))\n- *         .map(e -> e.getStackTrace())\n- *         .filter(s -> s != null)\n- *         .map(s -> s.getFrames().get(0))\n- *         .filter(f -> f.isJavaFrame())\n- *         .map(f -> f.getMethod())\n- *         .collect(\n- *             Collectors.groupingBy(m -> m.getType().getName() + \".\" + m.getName() + \" \" + m.getDescriptor(),\n- *             Collectors.counting()))\n- *         .entrySet()\n- *         .stream()\n- *         .sorted((a, b) -> b.getValue().compareTo(a.getValue()))\n- *         .forEach(e -> System.out.printf(\"%8d %s\\n\", e.getValue(), e.getKey()));\n- *     }\n- * }<\/pre>\n+ * {@snippet class=\"Snippets\" region=\"PackageOverview\"}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/package-info.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package example2;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.stream.Collectors;\n+import jdk.jfr.consumer.EventStream;\n+import jdk.jfr.consumer.RecordingFile;\n+import jdk.jfr.consumer.RecordedClass;\n+import jdk.jfr.consumer.RecordedThread;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.Configuration;\n+import jdk.jfr.consumer.RecordedEvent;\n+\n+public class Snippets {\n+\n+    class PackageOveriview {\n+        \/\/ @start region=\"PackageOverview\"\n+        public static void main(String[] args) throws IOException {\n+            if (args.length != 1) {\n+                System.err.println(\"Must specify a recording file.\");\n+                return;\n+            }\n+\n+            RecordingFile.readAllEvents(Path.of(args[0])).stream()\n+                .filter(e -> e.getEventType().getName().equals(\"jdk.ExecutionSample\"))\n+                .map(e -> e.getStackTrace())\n+                .filter(s -> s != null)\n+                .map(s -> s.getFrames().get(0))\n+                .filter(f -> f.isJavaFrame())\n+                .map(f -> f.getMethod())\n+                .collect(\n+                    Collectors.groupingBy(m -> m.getType().getName() + \".\" + m.getName() + \" \" + m.getDescriptor(),\n+                    Collectors.counting()))\n+                .entrySet()\n+                .stream()\n+                .sorted((a, b) -> b.getValue().compareTo(a.getValue()))\n+                .forEach(e -> System.out.printf(\"%8d %s\\n\", e.getValue(), e.getKey()));\n+        }\n+        \/\/ @end\n+    }\n+\n+    void EventStreamOverview() throws Exception {\n+        \/\/ @start region=\"EventStreamOverview\"\n+        try (var es = EventStream.openRepository()) {\n+            es.onEvent(\"jdk.CPULoad\", event -> {\n+                System.out.println(\"CPU Load \" + event.getEndTime());\n+                System.out.println(\" Machine total: \" + 100 * event.getFloat(\"machineTotal\") + \"%\");\n+                System.out.println(\" JVM User: \" + 100 * event.getFloat(\"jvmUser\") + \"%\");\n+                System.out.println(\" JVM System: \" + 100 * event.getFloat(\"jvmSystem\") + \"%\");\n+                System.out.println();\n+            });\n+            es.onEvent(\"jdk.GarbageCollection\", event -> {\n+                System.out.println(\"Garbage collection: \" + event.getLong(\"gcId\"));\n+                System.out.println(\" Cause: \" + event.getString(\"cause\"));\n+                System.out.println(\" Total pause: \" + event.getDuration(\"sumOfPauses\"));\n+                System.out.println(\" Longest pause: \" + event.getDuration(\"longestPause\"));\n+                System.out.println();\n+            });\n+            es.start();\n+        }\n+        \/\/ @end\n+    }\n+\n+    void RecordingFileOverview() throws Exception {\n+        \/\/ @start region=\"RecordingFileOverview\"\n+        try (RecordingFile recordingFile = new RecordingFile(Paths.get(\"recording.jfr\"))) {\n+            while (recordingFile.hasMoreEvents()) {\n+                RecordedEvent event = recordingFile.readEvent();\n+                System.out.println(event);\n+            }\n+        }\n+        \/\/ @end\n+    }\n+\n+    void RecordedObjectGetValue() {\n+        RecordedEvent event = null;\n+        \/\/ @start region=\"RecordedObjectGetValue\"\n+        if (event.hasField(\"intValue\")) {\n+            int intValue = event.getValue(\"intValue\");\n+            System.out.println(\"Int value: \" + intValue);\n+        }\n+\n+        if (event.hasField(\"objectClass\")) {\n+            RecordedClass clazz = event.getValue(\"objectClass\");\n+            System.out.println(\"Class name: \" + clazz.getName());\n+        }\n+\n+        if (event.hasField(\"sampledThread\")) {\n+            RecordedThread sampledThread = event.getValue(\"sampledThread\");\n+            System.out.println(\"Sampled thread: \" + sampledThread.getJavaName());\n+        }\n+        \/\/ @end\n+    }\n+\n+    void RecordingStreamOverview() throws Exception {\n+     \/\/ @start region=\"RecordingStreamOverview\"\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        try (var rs = new RecordingStream(c)) {\n+            rs.onEvent(\"jdk.GarbageCollection\", System.out::println);\n+            rs.onEvent(\"jdk.CPULoad\", System.out::println);\n+            rs.onEvent(\"jdk.JVMInformation\", System.out::println);\n+            rs.start();\n+        }\n+     \/\/ @end\n+    }\n+\n+    void RecordingStreamConstructor() throws Exception {\n+        \/\/ @start region=\"RecordingStreamConstructor\"\n+        var c = Configuration.getConfiguration(\"default\");\n+        try (var rs = new RecordingStream(c)) {\n+            rs.onEvent(System.out::println);\n+            rs.start();\n+        }\n+        \/\/ @end\n+    }\n+\n+    void RecordingStreamSetSettings() throws Exception {\n+        \/\/ @start region=\"RecordingStreamSetSettings\"\n+        Configuration defaultConfiguration = Configuration.getConfiguration(\"default\");\n+        Configuration profileConfiguration = Configuration.getConfiguration(\"profile\");\n+        try (var rs = new RecordingStream(defaultConfiguration)) {\n+            rs.onEvent(System.out::println);\n+            rs.startAsync();\n+            Thread.sleep(20_000);\n+            rs.setSettings(profileConfiguration.getSettings());\n+            Thread.sleep(20_000);\n+        }\n+        \/\/ @end\n+    }\n+\n+    void RecordingStreamStartAsync() throws Exception {\n+        \/\/ @start region=\"RecordingStreamStartAsync\"\n+        try (var stream = new RecordingStream()) {\n+            stream.enable(\"jdk.CPULoad\").withPeriod(Duration.ofSeconds(1));\n+            stream.onEvent(\"jdk.CPULoad\", event -> {\n+                System.out.println(event);\n+            });\n+            stream.startAsync();\n+            Thread.sleep(10_000);\n+        }\n+        \/\/ @end\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/snippet-files\/Snippets.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,291 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package example1;\n+\n+import jdk.jfr.AnnotationElement;\n+import jdk.jfr.ValueDescriptor;\n+import jdk.jfr.EventFactory;\n+import jdk.jfr.Event;\n+import jdk.jfr.Name;\n+import jdk.jfr.Label;\n+import jdk.jfr.Description;\n+import jdk.jfr.Category;\n+import jdk.jfr.Recording;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Relational;\n+import jdk.jfr.consumer.RecordingFile;\n+import jdk.jfr.Configuration;\n+import jdk.jfr.SettingDefinition;\n+import jdk.jfr.SettingControl;\n+import jdk.jfr.FlightRecorder;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.annotation.ElementType;\n+\n+public class Snippets {\n+\n+    void AnnotationElementOverview() {\n+        \/\/ @start region=\"AnnotationElementOverview\"\n+        List<AnnotationElement> typeAnnotations = new ArrayList<>();\n+        typeAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n+        typeAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n+        typeAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n+\n+        List<AnnotationElement> fieldAnnotations = new ArrayList<>();\n+        fieldAnnotations.add(new AnnotationElement(Label.class, \"Message\"));\n+\n+        List<ValueDescriptor> fields = new ArrayList<>();\n+        fields.add(new ValueDescriptor(String.class, \"message\", fieldAnnotations));\n+\n+        EventFactory f = EventFactory.create(typeAnnotations, fields);\n+        Event event = f.newEvent();\n+        event.commit();\n+        \/\/ @end\n+    }\n+\n+    \/\/ @start region=\"EventOverview\"\n+    public class Example {\n+\n+        @Label(\"Hello World\")\n+        @Description(\"Helps programmer getting started\")\n+        static class HelloWorld extends Event {\n+            @Label(\"Message\")\n+            String message;\n+        }\n+\n+        public static void main(String... args) {\n+            HelloWorld event = new HelloWorld();\n+            event.message = \"hello, world!\";\n+            event.commit();\n+        }\n+    }\n+    \/\/ @end\n+\n+    void EventFactoryOverview() {\n+        \/\/ @start region=\"EventFactoryOverview\"\n+        List<ValueDescriptor> fields = new ArrayList<>();\n+        List<AnnotationElement> messageAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Message\"));\n+        fields.add(new ValueDescriptor(String.class, \"message\", messageAnnotations));\n+        List<AnnotationElement> numberAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Number\"));\n+        fields.add(new ValueDescriptor(int.class, \"number\", numberAnnotations));\n+\n+        String[] category = { \"Example\", \"Getting Started\" };\n+        List<AnnotationElement> eventAnnotations = new ArrayList<>();\n+        eventAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n+        eventAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n+        eventAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n+        eventAnnotations.add(new AnnotationElement(Category.class, category));\n+\n+        EventFactory f = EventFactory.create(eventAnnotations, fields);\n+\n+        Event event = f.newEvent();\n+        event.set(0, \"hello, world!\");\n+        event.set(1, 4711);\n+        event.commit();\n+        \/\/ @end\n+    }\n+\n+    void EventSettingOverview() throws Exception {\n+        \/\/ @start region=\"EventSettingOverview\"\n+        Recording r = new Recording();\n+        r.enable(\"jdk.CPULoad\")\n+         .withPeriod(Duration.ofSeconds(1));\n+        r.enable(\"jdk.FileWrite\")\n+         .withoutStackTrace()\n+         .withThreshold(Duration.ofNanos(10));\n+        r.start();\n+        Thread.sleep(10_000);\n+        r.stop();\n+        r.dump(Files.createTempFile(\"recording\", \".jfr\"));\n+        \/\/ @end\n+    }\n+\n+    void FlightRecorderTakeSnapshot() throws Exception {\n+        \/\/@start region=\"FlightRecorderTakeSnapshot\"\n+        try (Recording snapshot = FlightRecorder.getFlightRecorder().takeSnapshot()) {\n+            if (snapshot.getSize() > 0) {\n+                snapshot.setMaxSize(100_000_000);\n+                snapshot.setMaxAge(Duration.ofMinutes(5));\n+                snapshot.dump(Paths.get(\"snapshot.jfr\"));\n+            }\n+        }\n+      \/\/@end\n+    }\n+\n+    \/\/ @start region=\"MetadataDefinitionOverview\"\n+    @MetadataDefinition\n+    @Label(\"Severity\")\n+    @Description(\"Value between 0 and 100 that indicates severity. 100 is most severe.\")\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ ElementType.TYPE })\n+    public @interface Severity {\n+        int value() default 50;\n+    }\n+\n+    @MetadataDefinition\n+    @Label(\"Transaction Id\")\n+    @Relational\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ ElementType.FIELD })\n+    public @interface TransactionId {\n+    }\n+\n+    @Severity(80)\n+    @Label(\"Transaction Blocked\")\n+    class TransactionBlocked extends Event {\n+        @TransactionId\n+        @Label(\"Transaction\")\n+        long transactionId1;\n+\n+        @TransactionId\n+        @Label(\"Transaction Blocker\")\n+        long transactionId2;\n+    }\n+    \/\/ @end\n+\n+ void RecordingnOverview() throws Exception {\n+  \/\/ @start region=\"RecordingOverview\"\n+     Configuration c = Configuration.getConfiguration(\"default\");\n+     Recording r = new Recording(c);\n+     r.start();\n+     System.gc();\n+     Thread.sleep(5000);\n+     r.stop();\n+     r.dump(Files.createTempFile(\"my-recording\", \".jfr\"));\n+  \/\/ @end\n+ }\n+\n+\/\/@start region=\"SettingControlOverview1\"\n+ final class RegExpControl extends SettingControl {\n+     private Pattern pattern = Pattern.compile(\".*\");\n+\n+     @Override\n+     public void setValue(String value) {\n+         this.pattern = Pattern.compile(value);\n+     }\n+\n+     @Override\n+     public String combine(Set<String> values) {\n+         return String.join(\"|\", values);\n+     }\n+\n+     @Override\n+     public String getValue() {\n+         return pattern.toString();\n+     }\n+\n+     public boolean matches(String s) {\n+         return pattern.matcher(s).find();\n+     }\n+ }\n+\/\/@end\n+\n+ class HttpServlet {\n+ }\n+\n+ class HttpServletRequest {\n+     public String getRequestURI() {\n+         return null;\n+     }\n+ }\n+\n+ class HttpServletResponse {\n+ }\n+\n+\/\/@start region=\"SettingControlOverview2\"\n+ abstract class HTTPRequest extends Event {\n+     @Label(\"Request URI\")\n+     protected String uri;\n+\n+     @Label(\"Servlet URI Filter\")\n+     @SettingDefinition\n+     protected boolean uriFilter(RegExpControl regExp) {\n+         return regExp.matches(uri);\n+     }\n+ }\n+\n+ @Label(\"HTTP Get Request\")\n+ class HTTPGetRequest extends HTTPRequest {\n+ }\n+\n+ @Label(\"HTTP Post Request\")\n+ class HTTPPostRequest extends HTTPRequest {\n+ }\n+\n+ class ExampleServlet extends HttpServlet {\n+     protected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n+         HTTPGetRequest request = new HTTPGetRequest();\n+         request.begin();\n+         request.uri = req.getRequestURI();\n+         code: \/\/ @replace regex='code:' replacement=\"...\"\n+         request.commit();\n+     }\n+\n+     protected void doPost(HttpServletRequest req, HttpServletResponse resp) {\n+         HTTPPostRequest request = new HTTPPostRequest();\n+         request.begin();\n+         request.uri = req.getRequestURI();\n+         code: \/\/ @replace regex='code:' replacement=\"...\"\n+         request.commit();\n+     }\n+ }\n+\/\/@end\n+\n+ void SettingControlOverview3() {\n+     \/\/ @start region=\"SettingControlOverview3\"\n+     Recording r = new Recording();\n+     r.enable(\"HTTPGetRequest\").with(\"uriFilter\", \"https:\/\/www.example.com\/list\/.*\");\n+     r.enable(\"HTTPPostRequest\").with(\"uriFilter\", \"https:\/\/www.example.com\/login\/.*\");\n+     r.start();\n+     \/\/ @end\n+ }\n+\n+ \/\/@start region=\"SettingDefinitionOverview\"\n+ class HelloWorld extends Event {\n+\n+     @Label(\"Message\")\n+     String message;\n+\n+     @SettingDefinition\n+     @Label(\"Message Filter\")\n+     public boolean filter(RegExpControl regExp) {\n+         return regExp.matches(message);\n+     }\n+ }\n+\/\/@end\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/snippet-files\/Snippets.java","additions":291,"deletions":0,"binary":false,"changes":291,"status":"added"}]}