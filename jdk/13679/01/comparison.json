{"files":[{"patch":"@@ -1688,0 +1688,52 @@\n+    \/**\n+     * {@return a case folded IETF BCP 47 language tag}\n+     *\n+     * <p>This method formats a language tag into one with case convention\n+     * that adheres to section 2.1.1. Formatting of Language Tags of RFC5646.\n+     * This format is defined as: <i>All subtags, including extension and private\n+     * use subtags, use lowercase letters with two exceptions: two-letter\n+     * and four-letter subtags that neither appear at the start of the tag\n+     * nor occur after singletons. Such two-letter subtags are all\n+     * uppercase (as in the tags \"en-CA-x-ca\" or \"sgn-BE-FR\") and four-\n+     * letter subtags are titlecase (as in the tag \"az-Latn-x-latn\").<\/i> As\n+     * legacy tags are not always well-formed, this method\n+     * will simply case fold a legacy tag to match the exact case convention\n+     * for the particular tag specified in the respective\n+     * {@link ##legacy_tags_replacement Legacy tags} table.\n+     *\n+     * <p><b>Special Exceptions<\/b>\n+     * <p>To maintain consistency with {@link ##def_variant variant}\n+     * which is case-sensitive, this method will neither case fold variant\n+     * subtags nor case fold private use subtags prefixed by {@code lvariant}.\n+     *\n+     * <p>For example,\n+     * {@snippet lang=java :\n+     * String tag = \"ja-kana-jp-x-lvariant-Oracle-JDK-Standard-Edition\";\n+     * Locale.caseFoldLanguageTag(tag); \/\/ returns \"ja-Kana-JP-x-lvariant-Oracle-JDK-Standard-Edition\"\n+     * String tag2 = \"ja-kana-jp-x-Oracle-JDK-Standard-Edition\";\n+     * Locale.caseFoldLanguageTag(tag2); \/\/ returns \"ja-Kana-JP-x-oracle-jdk-standard-edition\"\n+     * }\n+     *\n+     * <p>Excluding case folding, this method makes no modifications to the tag itself.\n+     * Case convention of language tags does not carry meaning, and is simply\n+     * recommended as it corresponds with various ISO standards, including:\n+     * ISO639-1, ISO15924, and ISO3166-1.\n+     *\n+     * <p>As the formatting of the case convention is dependent on the\n+     * positioning of certain subtags, callers of this method should ensure\n+     * that the language tag is well-formed, (conforming to section 2.1. Syntax\n+     * of RFC5646).\n+     *\n+     * @param languageTag the IETF BCP 47 language tag.\n+     * @throws IllformedLocaleException if {@code languageTag} is not well-formed\n+     * @throws NullPointerException if {@code languageTag} is {@code null}\n+     * @spec https:\/\/www.rfc-editor.org\/rfc\/rfc5646.html#section-2.1\n+     *       RFC5646 2.1. Syntax\n+     * @spec https:\/\/www.rfc-editor.org\/rfc\/rfc5646#section-2.1.1\n+     *       RFC5646 2.1.1. Formatting of Language Tags\n+     * @since 21\n+     *\/\n+    public static String caseFoldLanguageTag(String languageTag) {\n+        return LanguageTag.caseFoldTag(languageTag);\n+    }\n+\n@@ -1757,1 +1809,1 @@\n-     * <table class=\"striped\">\n+     * <table class=\"striped\" id=\"legacy_tags_replacement\">\n@@ -1789,1 +1841,1 @@\n-     * <table class=\"striped\">\n+     * <table class=\"striped\" id=\"legacy_tags_no_replacement\">\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,7 +34,1 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.StringJoiner;\n+import java.util.*;\n@@ -62,1 +56,1 @@\n-\n+    private boolean wellFormed;\n@@ -211,1 +205,0 @@\n-\n@@ -213,0 +206,1 @@\n+            tag.wellFormed = false;\n@@ -220,0 +214,2 @@\n+        } else {\n+            tag.wellFormed = true;\n@@ -221,1 +217,0 @@\n-\n@@ -417,0 +412,42 @@\n+    public static String caseFoldTag(String tag) {\n+        \/\/ Illegal tags\n+        if (!parse(tag, null).wellFormed) {\n+            throw new IllformedLocaleException(\"Ill formed tag\");\n+        }\n+        \/\/ Legacy tags\n+        String potentialLegacy = tag.toLowerCase(Locale.ROOT);\n+        if (LEGACY.containsKey(potentialLegacy)) {\n+            return LEGACY.get(potentialLegacy)[0];\n+        }\n+        \/\/ Non-legacy tags\n+        StringBuilder bldr = new StringBuilder();\n+        String[] subtags = tag.split(\"-\");\n+        boolean privateFound = false;\n+        boolean singletonFound = false;\n+        boolean privUseVarFound = false;\n+        for (int i = 0; i < subtags.length; i++) {\n+            if (privUseVarFound) {\n+                bldr.append(subtags[i]);\n+            } else if (i > 0 && isVariant(subtags[i]) && !singletonFound && !privateFound) {\n+                bldr.append(subtags[i]);\n+            } else if (i > 0 && isRegion(subtags[i]) && !singletonFound && !privateFound) {\n+                bldr.append(canonicalizeRegion(subtags[i]));\n+            } else if (i > 0 && isScript(subtags[i]) && !singletonFound && !privateFound) {\n+                bldr.append(canonicalizeScript(subtags[i]));\n+            \/\/ If subtag is not 2 letter, 4 letter, or variant\n+            \/\/ under the right conditions, then it should be lower-case\n+            } else {\n+                if (isPrivateusePrefix(subtags[i])) {\n+                    privateFound = true;\n+                } else if (isExtensionSingleton(subtags[i])) {\n+                    singletonFound = true;\n+                } else if (subtags[i].equals(PRIVUSE_VARIANT_PREFIX)) {\n+                    privUseVarFound = true;\n+                }\n+                bldr.append(subtags[i].toLowerCase(Locale.ROOT));\n+            }\n+            bldr.append(\"-\");\n+        }\n+        return bldr.substring(0, bldr.length()-1);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":48,"deletions":11,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8159337\n+ * @summary Test Locale.caseFoldLanguageTag(String languageTag)\n+ * @run junit caseFoldLanguageTagTest\n+ *\/\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Test the implementation of Locale.caseFoldLanguageTag(String languageTag).\n+ * A variety of well-formed tags are tested, composed of the following subtags:\n+ * language, extlang, script, region, variant, extension, singleton, privateuse,\n+ * grandfathered, and irregular. For more info, see the following,\n+ * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc5646.html#section-2.1\">Tag Syntax<\/a>).\n+ * In addition, the method is tested to ensure that IllegalArgumentException and\n+ * NullPointerException are thrown given the right circumstances.\n+ *\/\n+public class caseFoldLanguageTagTest {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"wellFormedTags\")\n+    public void TestWellFormedTags(String tag, String foldedTag) {\n+        assertEquals(foldedTag, Locale.caseFoldLanguageTag(tag), String.format(\"Folded %s\", tag));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"illFormedTags\")\n+    public void TestIllFormedTags(String tag) {\n+        try {\n+            Locale.caseFoldLanguageTag(tag);\n+            throw new RuntimeException(\"$$$ Failure: ill formed tags should throw IAE\");\n+        } catch (IllegalArgumentException ignored) {}\n+    }\n+\n+    @Test\n+    public void TestNPE() {\n+        try {\n+            Locale.caseFoldLanguageTag(null);\n+            throw new RuntimeException(\"$$$ Failure: NPE should be thrown when tag is null\");\n+        } catch (NullPointerException ignored) {}\n+    }\n+\n+    private static Stream<Arguments> wellFormedTags() {\n+        return Stream.of(\n+                \/\/ langtag tests\n+                \/\/ language\n+                Arguments.of(\"AB\", \"ab\"),\n+                \/\/ language - ext\n+                Arguments.of(\"AB-ABC\", \"ab-abc\"),\n+                \/\/ language - ext - script\n+                Arguments.of(\"AB-ABC-ABCD\", \"ab-abc-Abcd\"),\n+                \/\/ language - ext - script - region\n+                Arguments.of(\"AB-ABC-ABCD-ab\", \"ab-abc-Abcd-AB\"),\n+                \/\/ language - region\n+                Arguments.of(\"AB-ab\", \"ab-AB\"),\n+                \/\/ language - script\n+                Arguments.of(\"AB-aBCD\", \"ab-Abcd\"),\n+                \/\/ language - private use\n+                Arguments.of(\"AB-X-AB-ABCD\", \"ab-x-ab-abcd\"),\n+                \/\/ language - ext - script - region - variant\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE\", \"ab-abc-Abcd-AB-ABCDE\"),\n+                \/\/ language - ext - script - region - variant x 2\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-fghij\",\n+                        \"ab-abc-Abcd-AB-ABCDE-fghij\"),\n+                \/\/ language - ext - script - region - variant - extension\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-A-ABCD\",\n+                        \"ab-abc-Abcd-AB-ABCDE-a-abcd\"),\n+                \/\/ language - ext - script - region - variant - private\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-X-ABCD\",\n+                        \"ab-abc-Abcd-AB-ABCDE-x-abcd\"),\n+                \/\/ language - ext - script - region - variant - extension x2\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-A-ABCD-B-EFGHI\",\n+                        \"ab-abc-Abcd-AB-ABCDE-a-abcd-b-efghi\"),\n+                \/\/ language - ext - script - region - variant - extension - private\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-A-ABCD-X-ABCD\",\n+                        \"ab-abc-Abcd-AB-ABCDE-a-abcd-x-abcd\"),\n+                \/\/ language - ext - script - region - variant x2 - extension x2  - private (x2 ext)\n+                Arguments.of(\"AB-ABC-ABCD-ab-ABCDE-A-ABCD-X-ABCD-EFGHI\",\n+                        \"ab-abc-Abcd-AB-ABCDE-a-abcd-x-abcd-efghi\"),\n+                \/\/ language - variant x2 - extension x3 - private\n+                Arguments.of(\"AB-aBcDeF-GhIjKl-a-ABC-DEFGH-B-ABC-C-ABC-X-A-ABC-DEF\",\n+                        \"ab-aBcDeF-GhIjKl-a-abc-defgh-b-abc-c-abc-x-a-abc-def\"),\n+                \/\/ language - ext- script - region - variant - extension x2 - private (x2 ext)\n+                Arguments.of(\"AB-ABC-ABCD-ab-abCDe12-A-AB-B-ABCD-X-AB-ABCD\",\n+                        \"ab-abc-Abcd-AB-abCDe12-a-ab-b-abcd-x-ab-abcd\"),\n+\n+                \/\/ private use tests\n+                Arguments.of(\"X-Abc\", \"x-abc\"), \/\/ regular private\n+                Arguments.of(\"X-A-ABC\", \"x-a-abc\"), \/\/ private w\/ extended (incl. 1)\n+                Arguments.of(\"X-A-AB-Abcd\", \"x-a-ab-abcd\"), \/\/ private w\/ extended (incl. 1, 2, 4)\n+\n+                \/\/ Legacy tests\n+                \/\/ irregular\n+                Arguments.of(\"I-AMI\", \"i-ami\"),\n+                Arguments.of(\"EN-gb-OED\", \"en-GB-oed\"),\n+                Arguments.of(\"SGN-be-fr\", \"sgn-BE-FR\"),\n+                \/\/ regular\n+                Arguments.of(\"NO-BOK\", \"no-bok\"),\n+                Arguments.of(\"CEL-GAULISH\", \"cel-gaulish\"),\n+                Arguments.of(\"ZH-MIN-NAN\", \"zh-min-nan\"),\n+\n+                \/\/ Special JDK Cases (Variant and x-lvariant)\n+                Arguments.of(\"de-POSIX-x-URP-lvariant-Abc-Def\", \"de-POSIX-x-urp-lvariant-Abc-Def\"),\n+                Arguments.of(\"JA-JPAN-JP-U-CA-JAPANESE-x-RANDOM-lvariant-JP\",\n+                        \"ja-Jpan-JP-u-ca-japanese-x-random-lvariant-JP\"),\n+                Arguments.of(\"ja-JP-u-ca-japanese-x-lvariant-JP\", \"ja-JP-u-ca-japanese-x-lvariant-JP\"),\n+                Arguments.of(\"XX-ABCD-yy-VARIANT-x-TEST-lvariant-JDK\",\n+                        \"xx-Abcd-YY-VARIANT-x-test-lvariant-JDK\"),\n+                Arguments.of(\"ja-kana-jp-x-lvariant-Oracle-JDK-Standard-Edition\",\n+                        \"ja-Kana-JP-x-lvariant-Oracle-JDK-Standard-Edition\"),\n+                Arguments.of(\"ja-kana-jp-x-Oracle-JDK-Standard-Edition\",\n+                        \"ja-Kana-JP-x-oracle-jdk-standard-edition\")\n+        );\n+    }\n+\n+    private static Stream<Arguments> illFormedTags() {\n+        return Stream.of(\n+                \/\/ Starts with non-language\n+                Arguments.of(\"xabadadoo-me\"),\n+                \/\/ Starts with singleton\n+                Arguments.of(\"a-abc\"),\n+                Arguments.of(\"a-singleton-en-us\"),\n+                \/\/ Hanging dash\n+                Arguments.of(\"en-\"),\n+                \/\/ Double dash\n+                Arguments.of(\"en--US\"),\n+                \/\/ Script before ext lang\n+                Arguments.of(\"ab-Script-ext\"),\n+                \/\/ Region before ext lang\n+                Arguments.of(\"ab-AB-ext\"),\n+                \/\/ Variants at start\n+                Arguments.of(\"variant-first-ab\")\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/CaseFoldLanguageTagTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}