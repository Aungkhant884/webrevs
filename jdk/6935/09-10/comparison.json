{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,2 +127,2 @@\n-            boolean mark = RND.nextBoolean();\n-            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut, bufferBytes, mark);\n+            boolean markAndReset = RND.nextBoolean();\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut, bufferBytes, markAndReset);\n@@ -154,1 +154,1 @@\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut, int bufferBytes, boolean mark) throws Exception {\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut, int bufferBytes, boolean markAndReset) throws Exception {\n@@ -167,3 +167,3 @@\n-            \/\/ set mark\n-            if (mark) {\n-              in.mark(1);\n+            \/\/ set mark at current position for later replay\n+            if (markAndReset) {\n+                in.mark(Integer.MAX_VALUE);\n@@ -176,1 +176,1 @@\n-            assertEquals(reported, expected, format(\"reported %d bytes but should report %d\", reported, expected));\n+            assertEquals(reported, expected, format(\"transferred %d bytes but should report %d\", reported, expected));\n@@ -181,0 +181,14 @@\n+\n+            \/\/ replay from marked position\n+            if (markAndReset) {\n+                in.reset();\n+\n+                reported = in.transferTo(out);\n+                expected = count - bufferBytes;\n+\n+                assertEquals(reported, expected, format(\"replayed %d bytes but should report %d\", reported, expected));\n+\n+                outBytes = recorder.get().get();\n+                assertTrue(Arrays.equals(inBytes, posIn + bufferBytes, inBytes.length, outBytes, posOut + count, outBytes.length),\n+                    format(\"inBytes.length=%d, outBytes.length=%d\", inBytes.length - posIn - bufferBytes, outBytes.length - posOut - count));\n+            }\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/TransferTo.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"}]}