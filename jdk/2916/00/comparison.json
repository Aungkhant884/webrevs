{"files":[{"patch":"@@ -49,0 +49,3 @@\n+    private static final int MIN_LISTXATTR_BUF_SIZE = 1024;\n+    private static final int MAX_LISTXATTR_BUF_SIZE = 32 * 1024;\n+\n@@ -62,1 +65,1 @@\n-    private List<String> asList(long address, int size) {\n+    private static List<String> asList(long address, int size) {\n@@ -73,4 +76,1 @@\n-                if (s.startsWith(USER_NAMESPACE)) {\n-                    s = s.substring(USER_NAMESPACE.length());\n-                    list.add(s);\n-                }\n+                list.add(s);\n@@ -84,0 +84,16 @@\n+    \/\/ runs flistxattr, increases buffer size up to MAX_LISTXATTR_BUF_SIZE if required\n+    private static List<String> list(int fd, int bufSize) throws UnixException {\n+        try {\n+            try (NativeBuffer buffer = NativeBuffers.getNativeBuffer(bufSize)) {\n+                int n = flistxattr(fd, buffer.address(), bufSize);\n+                return asList(buffer.address(), n);\n+            } \/\/ release buffer before recursion\n+        } catch (UnixException x) {\n+            if (x.errno() == ERANGE && bufSize < MAX_LISTXATTR_BUF_SIZE) {\n+                return list(fd, bufSize * 2); \/\/ try larger buffer size:\n+            } else {\n+                throw x;\n+            }\n+        }\n+    }\n+\n@@ -108,1 +124,0 @@\n-        NativeBuffer buffer = null;\n@@ -110,21 +125,9 @@\n-            int size = 1024;\n-            buffer = NativeBuffers.getNativeBuffer(size);\n-            for (;;) {\n-                try {\n-                    int n = flistxattr(fd, buffer.address(), size);\n-                    List<String> list = asList(buffer.address(), n);\n-                    return Collections.unmodifiableList(list);\n-                } catch (UnixException x) {\n-                    \/\/ allocate larger buffer if required\n-                    if (x.errno() == ERANGE && size < 32*1024) {\n-                        buffer.release();\n-                        size *= 2;\n-                        buffer = null;\n-                        buffer = NativeBuffers.getNativeBuffer(size);\n-                        continue;\n-                    }\n-                    throw new FileSystemException(file.getPathForExceptionMessage(),\n-                        null, \"Unable to get list of extended attributes: \" +\n-                        x.getMessage());\n-                }\n-            }\n+            List<String> attrNames = list(fd, MIN_LISTXATTR_BUF_SIZE);\n+            return attrNames.stream()\n+                    .filter(s -> s.startsWith(USER_NAMESPACE))\n+                    .map(s -> s.substring(USER_NAMESPACE.length()))\n+                    .toList();\n+        } catch (UnixException x) {\n+            throw new FileSystemException(file.getPathForExceptionMessage(),\n+                null, \"Unable to get list of extended attributes: \" +\n+                x.getMessage());\n@@ -132,2 +135,0 @@\n-            if (buffer != null)\n-                buffer.release();\n@@ -315,1 +316,0 @@\n-        NativeBuffer buffer = null;\n@@ -317,5 +317,2 @@\n-\n-            \/\/ call flistxattr to get list of extended attributes.\n-            int size = 1024;\n-            buffer = NativeBuffers.getNativeBuffer(size);\n-            for (;;) {\n+            List<String> attrNames = list(ofd, MIN_LISTXATTR_BUF_SIZE);\n+            for (String name : attrNames) {\n@@ -323,36 +320,3 @@\n-                    size = flistxattr(ofd, buffer.address(), size);\n-                    break;\n-                } catch (UnixException x) {\n-                    \/\/ allocate larger buffer if required\n-                    if (x.errno() == ERANGE && size < 32*1024) {\n-                        buffer.release();\n-                        size *= 2;\n-                        buffer = null;\n-                        buffer = NativeBuffers.getNativeBuffer(size);\n-                        continue;\n-                    }\n-\n-                    \/\/ unable to get list of attributes\n-                    return;\n-                }\n-            }\n-\n-            \/\/ parse buffer as array of NULL-terminated C strings.\n-            long address = buffer.address();\n-            int start = 0;\n-            int pos = 0;\n-            while (pos < size) {\n-                if (unsafe.getByte(address + pos) == 0) {\n-                    \/\/ extract attribute name and copy attribute to target.\n-                    \/\/ FIXME: We can avoid needless copying by using address+pos\n-                    \/\/ as the address of the name.\n-                    int len = pos - start;\n-                    byte[] name = new byte[len];\n-                    unsafe.copyMemory(null, address+start, name,\n-                        Unsafe.ARRAY_BYTE_BASE_OFFSET, len);\n-                    try {\n-                        copyExtendedAttribute(ofd, name, nfd);\n-                    } catch (UnixException ignore) {\n-                        \/\/ ignore\n-                    }\n-                    start = pos + 1;\n+                    copyExtendedAttribute(ofd, Util.toBytes(name), nfd);\n+                } catch(UnixException ignore){\n+                    \/\/ ignore\n@@ -360,1 +324,0 @@\n-                pos++;\n@@ -362,4 +325,3 @@\n-\n-        } finally {\n-            if (buffer != null)\n-                buffer.release();\n+        } catch (UnixException e) {\n+            \/\/ unable to get list of attributes\n+            return;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserDefinedFileAttributeView.java","additions":38,"deletions":76,"binary":false,"changes":114,"status":"modified"}]}