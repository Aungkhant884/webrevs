{"files":[{"patch":"@@ -132,1 +132,0 @@\n- *     <li>{@code unsigned short}<\/li>\n@@ -147,1 +146,7 @@\n- * The following table shows some examples of how C types are modelled in Linux\/x64:\n+ * A native linker typically does not provide canonical layouts for C's unsigned integral types. Instead, they are\n+ * modelled using the canonical layouts associated with their corresponding signed integral types. For instance,\n+ * the C type {@code unsigned long} maps to the layout constant {@link ValueLayout#JAVA_LONG} on Linux\/x64, but maps to\n+ * the layout constant {@link ValueLayout#JAVA_INT} on Windows\/x64.\n+ * <p>\n+ * The following table shows some examples of how C types are modelled in Linux\/x64 (all the examples provided\n+ * here will assume these platform-dependent mappings):\n@@ -162,1 +167,1 @@\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code char}<\/th>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code char} <br> {@code unsigned char}<\/th>\n@@ -165,1 +170,1 @@\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code short}<\/th>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code short} <br> {@code unsigned short}<\/th>\n@@ -168,4 +173,1 @@\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code unsigned short}<\/th>\n- *     <td style=\"text-align:center;\">{@link ValueLayout#JAVA_CHAR}<\/td>\n- *     <td style=\"text-align:center;\">{@code char}<\/td>\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code int}<\/th>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code int} <br> {@code unsigned int}<\/th>\n@@ -174,1 +176,1 @@\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long}<\/th>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long} <br> {@code unsigned long}<\/th>\n@@ -177,1 +179,1 @@\n- * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long long}<\/th>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long long} <br> {@code unsigned long long}<\/th>\n@@ -225,2 +227,2 @@\n- * More formally, all native linker implementations operate on a subset of memory layouts, called <em>supported layouts<\/em>.\n- * A layout {@code L} is supported iff:\n+ * All native linker implementations operate on a subset of memory layouts. More formally, a layout {@code L}\n+ * is supported by a native linker {@code NL} iff:\n@@ -233,1 +235,1 @@\n- * <li>{@code S.elementLayout()} is a supported layout.<\/li>\n+ * <li>{@code S.elementLayout()} is a layout supported by {@code NL}.<\/li>\n@@ -240,1 +242,1 @@\n- * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or a supported layout, and<\/li>\n+ * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or a layout supported by {@code NL}, and<\/li>\n@@ -246,2 +248,2 @@\n- * Native linkers only support function descriptors whose argument\/return layouts are supported layouts and\n- * are not sequence layouts.\n+ * A native linker only supports function descriptors whose argument\/return layouts are layouts supported by that linker\n+ * and are not sequence layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -260,1 +260,0 @@\n-            Map.entry(\"unsigned short\", ValueLayout.JAVA_CHAR),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-import static java.lang.invoke.MethodType.methodType;\n-import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n@@ -117,2 +115,2 @@\n-                    C_SHORT, JAVA_CHAR);\n-            Object[] args = {1, 10D, 2L, 3F, (byte) 0, (short) 13, 'a'};\n+                    C_SHORT, C_SHORT);\n+            Object[] args = {1, 10D, 2L, 3F, (byte) 0, (short) 13, (short) 14 };\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n-import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n@@ -69,3 +67,1 @@\n-            {new LinkRequest(fd_II_V), new LinkRequest(fd_II_V, Linker.Option.firstVariadicArg(1))},\n-            {new LinkRequest(FunctionDescriptor.ofVoid(JAVA_SHORT)), new LinkRequest(FunctionDescriptor.ofVoid(JAVA_CHAR))},\n-            {new LinkRequest(FunctionDescriptor.ofVoid(JAVA_SHORT)), new LinkRequest(FunctionDescriptor.ofVoid(JAVA_CHAR))},\n+            {new LinkRequest(fd_II_V), new LinkRequest(fd_II_V, Linker.Option.firstVariadicArg(1))}\n@@ -155,1 +151,0 @@\n-            \"unsigned short\",\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -169,2 +169,1 @@\n-            { JAVA_SHORT,   shortToInt((short) 42), SHORT_HOB_MASK,   SHORT_TO_INT,   SAVE_SHORT_AS_INT   },\n-            { JAVA_CHAR,    charToInt('a'),         CHAR_HOB_MASK,    CHAR_TO_INT,    SAVE_CHAR_AS_INT    }\n+            { JAVA_SHORT,   shortToInt((short) 42), SHORT_HOB_MASK,   SHORT_TO_INT,   SAVE_SHORT_AS_INT   }\n","filename":"test\/jdk\/java\/foreign\/normalize\/TestNormalize.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}