{"files":[{"patch":"@@ -59,1 +59,1 @@\n-    while (v > 1) {\n+    while (v >= 1) {\n@@ -74,1 +74,1 @@\n-  \/\/ Defensively saturate for product bits:\n+  \/\/ Defensively saturate for product bits\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-class BinaryMagnitudeSeq {\n+class BinaryMagnitudeSeq : public CHeapObj<mtInternal> {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shenandoah\/shenandoahNumberSeq.hpp\"\n+#include \"unittest.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include <iostream>\n+using namespace std;\n+\n+class ShenandoahNumberSeqTest: public ::testing::Test {\n+ protected:\n+  HdrSeq seq;\n+};\n+\n+class BasicShenandoahNumberSeqTest: public ShenandoahNumberSeqTest {\n+ protected:\n+  const double err = 0.5;\n+  BasicShenandoahNumberSeqTest() {\n+    seq.add(0);\n+    seq.add(1);\n+    seq.add(10);\n+    for (int i = 0; i < 7; i++) {\n+      seq.add(100);\n+    }\n+    cout << \" p0 = \" << seq.percentile(0);\n+    cout << \" p10 = \" << seq.percentile(10);\n+    cout << \" p20 = \" << seq.percentile(20);\n+    cout << \" p30 = \" << seq.percentile(30);\n+    cout << \" p50 = \" << seq.percentile(50);\n+    cout << \" p80 = \" << seq.percentile(80);\n+    cout << \" p90 = \" << seq.percentile(90);\n+    cout << \" p100 = \" << seq.percentile(100);\n+  }\n+};\n+\n+TEST_VM_F(BasicShenandoahNumberSeqTest, maximum_test) {\n+  EXPECT_EQ(seq.maximum(), 100);\n+}\n+\n+TEST_VM_F(BasicShenandoahNumberSeqTest, minimum_test) {\n+  EXPECT_EQ(0, seq.percentile(0));\n+}\n+\n+TEST_VM_F(BasicShenandoahNumberSeqTest, percentile_test) {\n+  EXPECT_NEAR(0, seq.percentile(10), err);\n+  EXPECT_NEAR(1, seq.percentile(20), err);\n+  EXPECT_NEAR(10, seq.percentile(30), err);\n+  EXPECT_NEAR(100, seq.percentile(40), err);\n+  EXPECT_NEAR(100, seq.percentile(50), err);\n+  EXPECT_NEAR(100, seq.percentile(75), err);\n+  EXPECT_NEAR(100, seq.percentile(90), err);\n+  EXPECT_NEAR(100, seq.percentile(100), err);\n+}\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahNumberSeq.cpp","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}