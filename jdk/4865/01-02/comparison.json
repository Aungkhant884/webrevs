{"files":[{"patch":"@@ -1139,1 +1139,1 @@\n-  if (StressGCM && C->randomized_select(cand_cnt)) {\n+  if (StressGCM) {\n@@ -1141,0 +1141,5 @@\n+    return C->randomized_select(cand_cnt);\n+  }\n+\n+  \/\/ Better Frequency\n+  if (LCA->_freq < least_freq) {\n@@ -1144,16 +1149,10 @@\n-  if (!StressGCM) {\n-    \/\/ Better Frequency\n-    if (LCA->_freq < least_freq) {\n-      return true;\n-    }\n-    \/\/ Otherwise, choose with latency\n-    const double delta = 1 + PROB_UNLIKELY_MAG(4);\n-    if (!in_latency                     &&  \/\/ No block containing latency\n-        LCA->_freq < least_freq * delta &&  \/\/ No worse frequency\n-        target_latency >= end_latency   &&  \/\/ within latency range\n-        !self->is_iteratively_computed()    \/\/ But don't hoist IV increments\n-             \/\/ because they may end up above other uses of their phi forcing\n-             \/\/ their result register to be different from their input.\n-    ) {\n-      return true;\n-    }\n+  \/\/ Otherwise, choose with latency\n+  const double delta = 1 + PROB_UNLIKELY_MAG(4);\n+  if (!in_latency                     &&  \/\/ No block containing latency\n+      LCA->_freq < least_freq * delta &&  \/\/ No worse frequency\n+      target_latency >= end_latency   &&  \/\/ within latency range\n+      !self->is_iteratively_computed()    \/\/ But don't hoist IV increments\n+            \/\/ because they may end up above other uses of their phi forcing\n+            \/\/ their result register to be different from their input.\n+  ) {\n+    return true;\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"}]}