{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n@@ -137,5 +139,0 @@\n-    \/** Cache of time-zone offset by offset in seconds. *\/\n-    private static final ConcurrentMap<Integer, ZoneOffset> SECONDS_CACHE = new ConcurrentHashMap<>(16, 0.75f, 4);\n-    \/** Cache of time-zone offset by ID. *\/\n-    private static final ConcurrentMap<String, ZoneOffset> ID_CACHE = new ConcurrentHashMap<>(16, 0.75f, 4);\n-\n@@ -146,0 +143,13 @@\n+\n+    \/\/ Max slot number for either direction - or +\n+    private static final int MAX_SECONDS_CACHE_SLOT = MAX_SECONDS \/ (15 * SECONDS_PER_MINUTE);\n+\n+    \/** Cache of time-zone offset by offset in seconds [-18h, +18h] for each even quarter of an hour. *\/\n+    @Stable\n+    private static final ZoneOffset[] SECONDS_CACHE = new ZoneOffset[MAX_SECONDS_CACHE_SLOT * 2 + 1];\n+\n+    \/** Access to the SECONDS_CACHE must be made via VarHandle volatile access *\/\n+    private static final VarHandle SECONDS_CACHE_VH = MethodHandles.arrayElementVarHandle(ZoneOffset[].class);\n+\n+    \/** Cache of time-zone offset by ID. *\/\n+    private static final ConcurrentMap<String, ZoneOffset> ID_CACHE = new ConcurrentHashMap<>(16, 0.75f, 4);\n@@ -427,5 +437,15 @@\n-            return SECONDS_CACHE.computeIfAbsent(totalSeconds, totalSecs -> {\n-                ZoneOffset result = new ZoneOffset(totalSecs);\n-                ID_CACHE.putIfAbsent(result.getId(), result);\n-                return result;\n-            });\n+            int slot = cacheSlot(totalSeconds);\n+            \/\/ Happens-before semantics are needed for double-checked locking\n+            \/\/ to prevent reading uninitialized ZoneOffset objects due to reordering.\n+            ZoneOffset cached = getAcquireSecondsCache(slot);\n+            if (cached == null) {\n+                synchronized (SECONDS_CACHE) {\n+                    cached = getAcquireSecondsCache(slot);\n+                    if (cached == null) {\n+                        cached = new ZoneOffset(totalSeconds);\n+                        setReleaseSecondsCache(slot, cached);\n+                        ID_CACHE.putIfAbsent(cached.getId(), cached);\n+                    }\n+                }\n+            }\n+            return cached;\n@@ -437,0 +457,11 @@\n+    static ZoneOffset getAcquireSecondsCache(int slot) {\n+        return (ZoneOffset) SECONDS_CACHE_VH.getAcquire(SECONDS_CACHE, slot);\n+    }\n+    static void setReleaseSecondsCache(int slot, ZoneOffset value) {\n+        SECONDS_CACHE_VH.setRelease(SECONDS_CACHE, slot, value);\n+    }\n+\n+    private static int cacheSlot(int totalSeconds) {\n+        return MAX_SECONDS_CACHE_SLOT + totalSeconds \/ (15 * SECONDS_PER_MINUTE);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":42,"deletions":11,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,1 @@\n+\n@@ -90,1 +91,0 @@\n-    private static final ZoneOffset OFFSET_M18 = ZoneOffset.ofHours(-18);\n@@ -101,3 +101,5 @@\n-            {make(OFFSET_PONE), OFFSET_PONE},\n-            {make(OFFSET_PTWO), OFFSET_PTWO},\n-            {make(OFFSET_M18), OFFSET_M18},\n+                {make(ZoneOffset.MIN), ZoneOffset.MIN},\n+                {make(ZoneOffset.UTC), ZoneOffset.UTC},\n+                {make(OFFSET_PONE), OFFSET_PONE},\n+                {make(OFFSET_PTWO), OFFSET_PTWO},\n+                {make(ZoneOffset.MAX), ZoneOffset.MAX},\n@@ -139,1 +141,3 @@\n-        assertEquals(test.isValidOffset(LDT, expectedOffset), true);\n+        if (expectedOffset == ZoneOffset.UTC)\n+            \/\/ The tests below are not made to work with ZoneOffset.UTC\n+            return;\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/zone\/TCKFixedZoneRules.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}