{"files":[{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.time.ZoneOffset;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+\/**\n+ * Examine ZoneOffset.ofTotalSeconds operations\n+ *\/\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class ZoneOffsetBench {\n+\n+    \/\/ An array with all the cached values [-18h, 18h]\n+    private static final int CACHED_SECONDS[] = IntStream.range(-18, 18)\n+            \/\/ Convert hour to seconds\n+            .map(h -> h * 3600)\n+            \/\/ Include each even quarter of an hour\n+            .flatMap(s -> IntStream.iterate(s, l -> l + 3600 \/ 4).limit(4))\n+            \/\/ There some overlaps so remove these\n+            .distinct()\n+            .toArray();\n+\n+    @Benchmark\n+    public long getFromCache() {\n+        long sum = 0;\n+        for (int s : CACHED_SECONDS) {\n+            ZoneOffset zo = ZoneOffset.ofTotalSeconds(s);\n+            sum += zo.getTotalSeconds();\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/ZoneOffsetBench.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}