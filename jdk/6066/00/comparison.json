{"files":[{"patch":"@@ -119,1 +119,0 @@\n-  Rank   rank() const          { return _rank; }\n@@ -122,1 +121,0 @@\n-  void   set_next(Mutex *next) { _next = next; }\n@@ -195,1 +193,2 @@\n-  const char *name() const                  { return _name; }\n+  const char *name() const     { return _name; }\n+  Rank   rank() const          { DEBUG_ONLY(return _rank) NOT_DEBUG(return safepoint); }\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -192,15 +192,0 @@\n-#define def(var, type, pri, vm_block) {       \\\n-  var = new type(Mutex::pri, #var, vm_block); \\\n-}\n-\n-\/\/ Specify relative ranked lock\n-#ifdef ASSERT\n-#define defl(var, type, held_lock, vm_block) {         \\\n-  var = new type(held_lock->rank()-1, #var, vm_block); \\\n-}\n-#else\n-#define defl(var, type, held_lock, vm_block) {         \\\n-  var = new type(Mutex::safepoint, #var, vm_block);    \\\n-}\n-#endif\n-\n@@ -209,1 +194,1 @@\n-  def(tty_lock                     , PaddedMutex  , tty,            true);      \/\/ allow to lock in VM\n+  tty_lock                     = new PaddedMutex(Mutex::tty, \"tty_lock\");      \/\/ allow to lock in VM\n@@ -211,1 +196,1 @@\n-  def(STS_lock                     , PaddedMonitor, nosafepoint,    true);\n+  STS_lock                     = new PaddedMonitor(Mutex::nosafepoint, \"STS_lock\");\n@@ -214,1 +199,1 @@\n-    def(CGC_lock                   , PaddedMonitor, nosafepoint,    true);\n+    CGC_lock                   = new PaddedMonitor(Mutex::nosafepoint, \"CGC_lock\");\n@@ -216,1 +201,1 @@\n-    def(G1DetachedRefinementStats_lock, PaddedMutex, nosafepoint-2, true);\n+    G1DetachedRefinementStats_lock = new PaddedMutex(Mutex::nosafepoint-2, \"G1DetachedRefinementStats_lock\");\n@@ -218,4 +203,4 @@\n-    def(FreeList_lock              , PaddedMutex  , service-1,      true);\n-    def(OldSets_lock               , PaddedMutex  , nosafepoint,    true);\n-    def(Uncommit_lock              , PaddedMutex  , service-2,      true);\n-    def(RootRegionScan_lock        , PaddedMonitor, nosafepoint-1,  true);\n+    FreeList_lock              = new PaddedMutex(Mutex::service-1, \"FreeList_lock\");\n+    OldSets_lock               = new PaddedMutex(Mutex::nosafepoint, \"OldSets_lock\");\n+    Uncommit_lock              = new PaddedMutex(Mutex::service-2, \"Uncommit_lock\");\n+    RootRegionScan_lock        = new PaddedMonitor(Mutex::nosafepoint-1, \"RootRegionScan_lock\");\n@@ -223,2 +208,2 @@\n-    def(MarkStackFreeList_lock     , PaddedMutex  , nosafepoint,    true);\n-    def(MarkStackChunkList_lock    , PaddedMutex  , nosafepoint,    true);\n+    MarkStackFreeList_lock     = new PaddedMutex(Mutex::nosafepoint, \"MarkStackFreeList_lock\");\n+    MarkStackChunkList_lock    = new PaddedMutex(Mutex::nosafepoint, \"MarkStackChunkList_lock\");\n@@ -226,1 +211,1 @@\n-    def(MonitoringSupport_lock     , PaddedMutex  , service-1,      true);      \/\/ used for serviceability monitoring support\n+    MonitoringSupport_lock     = new PaddedMutex(Mutex::service-1, \"MonitoringSupport_lock\"); \/\/ used for serviceability monitoring support\n@@ -228,4 +213,4 @@\n-  def(StringDedup_lock             , PaddedMonitor, nosafepoint,    true);\n-  def(StringDedupIntern_lock       , PaddedMutex  , nosafepoint,    true);\n-  def(ParGCRareEvent_lock          , PaddedMutex  , safepoint,      true);\n-  def(RawMonitor_lock              , PaddedMutex  , nosafepoint-1,  true);\n+  StringDedup_lock             = new PaddedMonitor(Mutex::nosafepoint, \"StringDedup_lock\");\n+  StringDedupIntern_lock       = new PaddedMutex(Mutex::nosafepoint, \"StringDedupIntern_lock\");\n+  ParGCRareEvent_lock          = new PaddedMutex(Mutex::safepoint, \"ParGCRareEvent_lock\", true);\n+  RawMonitor_lock              = new PaddedMutex(Mutex::nosafepoint-1, \"RawMonitor_lock\");\n@@ -233,1 +218,1 @@\n-  def(Metaspace_lock               , PaddedMutex  , nosafepoint-3,  true);\n+  Metaspace_lock               = new PaddedMutex(Mutex::nosafepoint-3, \"Metaspace_lock\");\n@@ -235,3 +220,3 @@\n-  def(Patching_lock                , PaddedMutex  , nosafepoint,    true);      \/\/ used for safepointing and code patching.\n-  def(MonitorDeflation_lock        , PaddedMonitor, nosafepoint,    true);      \/\/ used for monitor deflation thread operations\n-  def(Service_lock                 , PaddedMonitor, service,        true);      \/\/ used for service thread operations\n+  Patching_lock                = new PaddedMutex(Mutex::nosafepoint, \"Patching_lock\"); \/\/ used for safepointing and code patching.\n+  MonitorDeflation_lock        = new PaddedMonitor(Mutex::nosafepoint, \"MonitorDeflation_lock\"); \/\/ used for monitor deflation thread operations\n+  Service_lock                 = new PaddedMonitor(Mutex::service, \"Service_lock\"); \/\/ used for service thread operations\n@@ -240,1 +225,1 @@\n-    def(Notification_lock          , PaddedMonitor, service,        true);  \/\/ used for notification thread operations\n+    Notification_lock          = new PaddedMonitor(Mutex::service, \"Notification_lock\");  \/\/ used for notification thread operations\n@@ -245,1 +230,1 @@\n-  def(JmethodIdCreation_lock       , PaddedMutex  , nosafepoint-2,  true); \/\/ used for creating jmethodIDs.\n+  JmethodIdCreation_lock       = new PaddedMutex(Mutex::nosafepoint-2, \"JmethodIdCreation_lock\"); \/\/ used for creating jmethodIDs.\n@@ -247,6 +232,6 @@\n-  def(SharedDictionary_lock        , PaddedMutex  , safepoint,      true);\n-  def(VMStatistic_lock             , PaddedMutex  , safepoint,      false);\n-  def(JNIHandleBlockFreeList_lock  , PaddedMutex  , nosafepoint-1,  true);      \/\/ handles are used by VM thread\n-  def(SignatureHandlerLibrary_lock , PaddedMutex  , safepoint,      false);\n-  def(SymbolArena_lock             , PaddedMutex  , nosafepoint,    true);\n-  def(ExceptionCache_lock          , PaddedMutex  , safepoint,      false);\n+  SharedDictionary_lock        = new PaddedMutex(Mutex::safepoint, \"SharedDictionary_lock\", true);\n+  VMStatistic_lock             = new PaddedMutex(Mutex::safepoint, \"VMStatistic_lock\");\n+  JNIHandleBlockFreeList_lock  = new PaddedMutex(Mutex::nosafepoint-1, \"JNIHandleBlockFreeList_lock \");      \/\/ handles are used by VM thread\n+  SignatureHandlerLibrary_lock = new PaddedMutex(Mutex::safepoint, \"SignatureHandlerLibrary_lock\");\n+  SymbolArena_lock             = new PaddedMutex(Mutex::nosafepoint, \"SymbolArena_lock\");\n+  ExceptionCache_lock          = new PaddedMutex(Mutex::safepoint, \"ExceptionCache_lock\");\n@@ -254,1 +239,1 @@\n-  def(FullGCALot_lock              , PaddedMutex  , safepoint,      false); \/\/ a lock to make FullGCALot MT safe\n+  FullGCALot_lock              = new PaddedMutex(Mutex::safepoint, \"FullGCALot_lock\"); \/\/ a lock to make FullGCALot MT safe\n@@ -256,1 +241,1 @@\n-  def(BeforeExit_lock              , PaddedMonitor, safepoint,      true);\n+  BeforeExit_lock              = new PaddedMonitor(Mutex::safepoint, \"BeforeExit_lock\", true);\n@@ -258,2 +243,2 @@\n-  def(NonJavaThreadsList_lock      , PaddedMutex,   nosafepoint-1,  true);\n-  def(NonJavaThreadsListSync_lock  , PaddedMutex,   nosafepoint,    true);\n+  NonJavaThreadsList_lock      = new PaddedMutex(Mutex::nosafepoint-1, \"NonJavaThreadsList_lock\");\n+  NonJavaThreadsListSync_lock  = new PaddedMutex(Mutex::nosafepoint, \"NonJavaThreadsListSync_lock\");\n@@ -261,5 +246,5 @@\n-  def(RetData_lock                 , PaddedMutex  , safepoint,      false);\n-  def(Terminator_lock              , PaddedMonitor, safepoint,      true);\n-  def(InitCompleted_lock           , PaddedMonitor, nosafepoint,    true);\n-  def(Notify_lock                  , PaddedMonitor, safepoint,      true);\n-  def(AdapterHandlerLibrary_lock   , PaddedMutex  , safepoint,      true);\n+  RetData_lock                 = new PaddedMutex(Mutex::safepoint, \"RetData_lock\");\n+  Terminator_lock              = new PaddedMonitor(Mutex::safepoint, \"Terminator_lock\", true);\n+  InitCompleted_lock           = new PaddedMonitor(Mutex::nosafepoint, \"InitCompleted_lock\");\n+  Notify_lock                  = new PaddedMonitor(Mutex::safepoint, \"Notify_lock\", true);\n+  AdapterHandlerLibrary_lock   = new PaddedMutex(Mutex::safepoint, \"AdapterHandlerLibrary_lock\", true);\n@@ -267,2 +252,2 @@\n-  def(Heap_lock                    , PaddedMonitor, safepoint,      false); \/\/ Doesn't safepoint check during termination.\n-  def(JfieldIdCreation_lock        , PaddedMutex  , safepoint,      true);  \/\/ jfieldID, Used in VM_Operation\n+  Heap_lock                    = new PaddedMonitor(Mutex::safepoint, \"Heap_lock\"); \/\/ Doesn't safepoint check during termination.\n+  JfieldIdCreation_lock        = new PaddedMutex(Mutex::safepoint, \"JfieldIdCreation_lock\", true);  \/\/ jfieldID, Used in VM_Operation\n@@ -270,5 +255,5 @@\n-  def(CompiledIC_lock              , PaddedMutex  , nosafepoint,    true);  \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n-  def(MethodCompileQueue_lock      , PaddedMonitor, safepoint,      false);\n-  def(CompileStatistics_lock       , PaddedMutex  , safepoint,      false);\n-  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint,    true);\n-  def(MultiArray_lock              , PaddedMutex  , safepoint,      false);\n+  CompiledIC_lock              = new PaddedMutex(Mutex::nosafepoint, \"CompiledIC_lock\");  \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n+  MethodCompileQueue_lock      = new PaddedMonitor(Mutex::safepoint, \"MethodCompileQueue_lock\");\n+  CompileStatistics_lock       = new PaddedMutex(Mutex::safepoint, \"CompileStatistics_lock\");\n+  DirectivesStack_lock         = new PaddedMutex(Mutex::nosafepoint, \"DirectivesStack_lock\");\n+  MultiArray_lock              = new PaddedMutex(Mutex::safepoint, \"MultiArray_lock\");\n@@ -276,3 +261,3 @@\n-  def(JvmtiThreadState_lock        , PaddedMutex  , safepoint,      false); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n-  def(EscapeBarrier_lock           , PaddedMonitor, nosafepoint,    true);  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n-  def(Management_lock              , PaddedMutex  , safepoint,      false); \/\/ used for JVM management\n+  JvmtiThreadState_lock        = new PaddedMutex(Mutex::safepoint, \"JvmtiThreadState_lock\"); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n+  EscapeBarrier_lock           = new PaddedMonitor(Mutex::nosafepoint, \"EscapeBarrier_lock\");  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n+  Management_lock              = new PaddedMutex(Mutex::safepoint, \"Management_lock\"); \/\/ used for JVM management\n@@ -280,3 +265,3 @@\n-  def(ConcurrentGCBreakpoints_lock , PaddedMonitor, safepoint,      true);\n-  def(MethodData_lock              , PaddedMutex  , safepoint,      false);\n-  def(TouchedMethodLog_lock        , PaddedMutex  , safepoint,      false);\n+  ConcurrentGCBreakpoints_lock = new PaddedMonitor(Mutex::safepoint, \"ConcurrentGCBreakpoints_lock\", true);\n+  MethodData_lock              = new PaddedMutex(Mutex::safepoint, \"MethodData_lock\");\n+  TouchedMethodLog_lock        = new PaddedMutex(Mutex::safepoint, \"TouchedMethodLog_lock\");\n@@ -284,4 +269,4 @@\n-  def(CompileThread_lock           , PaddedMonitor, safepoint,      false);\n-  def(PeriodicTask_lock            , PaddedMonitor, safepoint,      true);\n-  def(RedefineClasses_lock         , PaddedMonitor, safepoint,      true);\n-  def(Verify_lock                  , PaddedMutex,   safepoint,      true);\n+  CompileThread_lock           = new PaddedMonitor(Mutex::safepoint, \"CompileThread_lock\");\n+  PeriodicTask_lock            = new PaddedMonitor(Mutex::safepoint, \"PeriodicTask_lock\", true);\n+  RedefineClasses_lock         = new PaddedMonitor(Mutex::safepoint, \"RedefineClasses_lock\", true);\n+  Verify_lock                  = new PaddedMutex(Mutex::safepoint, \"Verify_lock\", true);\n@@ -290,1 +275,1 @@\n-    def(Compilation_lock           , PaddedMonitor, nosafepoint,    true);\n+    Compilation_lock           = new PaddedMonitor(Mutex::nosafepoint, \"Compilation_lock\");\n@@ -294,4 +279,4 @@\n-  def(JfrBuffer_lock               , PaddedMutex  , nosafepoint,       true);\n-  def(JfrMsg_lock                  , PaddedMonitor, nosafepoint-3,     true);\n-  def(JfrStacktrace_lock           , PaddedMutex  , stackwatermark-1,  true);\n-  def(JfrThreadSampler_lock        , PaddedMonitor, nosafepoint,       true);\n+  JfrBuffer_lock               = new PaddedMutex(Mutex::nosafepoint, \"JfrBuffer_lock\");\n+  JfrMsg_lock                  = new PaddedMonitor(Mutex::nosafepoint-3, \"JfrMsg_lock\");\n+  JfrStacktrace_lock           = new PaddedMutex(Mutex::stackwatermark-1, \"JfrStacktrace_lock\");\n+  JfrThreadSampler_lock        = new PaddedMonitor(Mutex::nosafepoint, \"JfrThreadSampler_lock\");\n@@ -301,1 +286,1 @@\n-  def(UnsafeJlong_lock             , PaddedMutex  , nosafepoint,    true);\n+  UnsafeJlong_lock             = new PaddedMutex(Mutex::nosafepoint, \"UnsafeJlong_lock\");\n@@ -304,6 +289,6 @@\n-  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , safepoint,      false);\n-  def(NMethodSweeperStats_lock     , PaddedMutex  , nosafepoint,    true);\n-  def(ThreadsSMRDelete_lock        , PaddedMonitor, nosafepoint-3,  true); \/\/ Holds ConcurrentHashTableResize_lock\n-  def(ThreadIdTableCreate_lock     , PaddedMutex  , safepoint,      false);\n-  def(SharedDecoder_lock           , PaddedMutex  , tty-1,          true);\n-  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint,    true);\n+  CodeHeapStateAnalytics_lock  = new PaddedMutex(Mutex::safepoint, \"CodeHeapStateAnalytics_lock\");\n+  NMethodSweeperStats_lock     = new PaddedMutex(Mutex::nosafepoint, \"NMethodSweeperStats_lock\");\n+  ThreadsSMRDelete_lock        = new PaddedMonitor(Mutex::nosafepoint-3, \"ThreadsSMRDelete_lock\"); \/\/ Holds ConcurrentHashTableResize_lock\n+  ThreadIdTableCreate_lock     = new PaddedMutex(Mutex::safepoint, \"ThreadIdTableCreate_lock\");\n+  SharedDecoder_lock           = new PaddedMutex(Mutex::tty-1, \"SharedDecoder_lock\");\n+  DCmdFactory_lock             = new PaddedMutex(Mutex::nosafepoint, \"DCmdFactory_lock\");\n@@ -311,1 +296,1 @@\n-  def(NMTQuery_lock                , PaddedMutex  , safepoint,      false);\n+  NMTQuery_lock                = new PaddedMutex(Mutex::safepoint, \"NMTQuery_lock\");\n@@ -315,1 +300,1 @@\n-  def(CDSClassFileStream_lock      , PaddedMutex  , safepoint,      false);\n+  CDSClassFileStream_lock      = new PaddedMutex(Mutex::safepoint, \"CDSClassFileStream_lock\");\n@@ -317,5 +302,5 @@\n-  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint,    true);\n-  def(CDSLambda_lock               , PaddedMutex  , nosafepoint,    true);\n-  def(DumpRegion_lock              , PaddedMutex  , nosafepoint,    true);\n-  def(ClassListFile_lock           , PaddedMutex  , nosafepoint,    true);\n-  def(LambdaFormInvokers_lock      , PaddedMutex  , safepoint,      false);\n+  DumpTimeTable_lock           = new PaddedMutex(Mutex::nosafepoint, \"DumpTimeTable_lock\");\n+  CDSLambda_lock               = new PaddedMutex(Mutex::nosafepoint, \"CDSLambda_lock\");\n+  DumpRegion_lock              = new PaddedMutex(Mutex::nosafepoint, \"DumpRegion_lock\");\n+  ClassListFile_lock           = new PaddedMutex(Mutex::nosafepoint, \"ClassListFile_lock\");\n+  LambdaFormInvokers_lock      = new PaddedMutex(Mutex::safepoint, \"LambdaFormInvokers_lock\");\n@@ -323,2 +308,2 @@\n-  def(Bootclasspath_lock           , PaddedMutex  , nosafepoint,    true);\n-  def(Zip_lock                     , PaddedMonitor, nosafepoint-1,  true); \/\/ Holds DumpTimeTable_lock\n+  Bootclasspath_lock           = new PaddedMutex(Mutex::nosafepoint, \"Bootclasspath_lock\");\n+  Zip_lock                     = new PaddedMonitor(Mutex::nosafepoint-1, \"Zip_lock\"); \/\/ Holds DumpTimeTable_lock\n@@ -327,1 +312,1 @@\n-  def(JVMCI_lock                   , PaddedMonitor, safepoint,      true);\n+  JVMCI_lock                   = new PaddedMonitor(Mutex::safepoint, \"JVMCI_lock\", true);\n@@ -331,15 +316,16 @@\n-  defl(InlineCacheBuffer_lock      , PaddedMutex  , CompiledIC_lock,  true);\n-  defl(VtableStubs_lock            , PaddedMutex  , CompiledIC_lock,  true);  \/\/ Also holds DumpTimeTable_lock\n-  defl(CodeCache_lock              , PaddedMonitor, VtableStubs_lock, true);\n-  defl(CompiledMethod_lock         , PaddedMutex  , CodeCache_lock,   true);\n-  defl(CodeSweeper_lock            , PaddedMonitor, CompiledMethod_lock, true);\n-\n-  defl(Threads_lock                , PaddedMonitor, CompileThread_lock, true);\n-  defl(Heap_lock                   , PaddedMonitor, MultiArray_lock,    false);\n-  defl(Compile_lock                , PaddedMutex ,  MethodCompileQueue_lock, false);\n-\n-  defl(PerfDataMemAlloc_lock       , PaddedMutex  , Heap_lock,         true);\n-  defl(PerfDataManager_lock        , PaddedMutex  , Heap_lock,         true);\n-  defl(ClassLoaderDataGraph_lock   , PaddedMutex  , MultiArray_lock,   false);\n-  defl(VMOperation_lock            , PaddedMonitor, Compile_lock,      true);\n-  defl(ClassInitError_lock         , PaddedMonitor, Threads_lock,      true);\n+  \/\/ Pass allow_vm_block explicitly here.\n+  InlineCacheBuffer_lock      = new PaddedMutex(CompiledIC_lock->rank()-1, \"InlineCacheBuffer_lock\");\n+  VtableStubs_lock            = new PaddedMutex(CompiledIC_lock->rank()-1, \"VtableStubs_lock\");  \/\/ Also holds DumpTimeTable_lock\n+  CodeCache_lock              = new PaddedMonitor(VtableStubs_lock->rank()-1, \"CodeCache_lock\");\n+  CompiledMethod_lock         = new PaddedMutex(CodeCache_lock->rank()-1, \"CompiledMethod_lock\");\n+  CodeSweeper_lock            = new PaddedMonitor(CompiledMethod_lock->rank()-1, \"CodeSweeper_lock\");\n+\n+  Threads_lock                = new PaddedMonitor(CompileThread_lock->rank()-1, \"Threads_lock\", true);\n+  Heap_lock                   = new PaddedMonitor(MultiArray_lock->rank()-1, \"Heap_lock\");\n+  Compile_lock                = new PaddedMutex( MethodCompileQueue_lock->rank()-1, \"Compile_lock\");\n+\n+  PerfDataMemAlloc_lock       = new PaddedMutex(Heap_lock->rank()-1, \"PerfDataMemAlloc_lock\", true);\n+  PerfDataManager_lock        = new PaddedMutex(Heap_lock->rank()-1, \"PerfDataManager_lock\", true);\n+  ClassLoaderDataGraph_lock   = new PaddedMutex(MultiArray_lock->rank()-1, \"ClassLoaderDataGraph_lock\");\n+  VMOperation_lock            = new PaddedMonitor(Compile_lock->rank()-1, \"VMOperation_lock\", true);\n+  ClassInitError_lock         = new PaddedMonitor(Threads_lock->rank()-1, \"ClassInitError_lock\", true);\n@@ -348,1 +334,1 @@\n-    defl(G1OldGCCount_lock         , PaddedMonitor, Threads_lock,      true);\n+    G1OldGCCount_lock         = new PaddedMonitor(Threads_lock->rank()-1, \"G1OldGCCount_lock\", true);\n@@ -350,6 +336,6 @@\n-  defl(CompileTaskAlloc_lock       , PaddedMutex ,  MethodCompileQueue_lock,   true);\n-  defl(ExpandHeap_lock             , PaddedMutex ,  Heap_lock,                 true);\n-  defl(OopMapCacheAlloc_lock       , PaddedMutex ,  Threads_lock,              true);\n-  defl(Module_lock                 , PaddedMutex ,  ClassLoaderDataGraph_lock, false);\n-  defl(SystemDictionary_lock       , PaddedMonitor, Module_lock,               true);\n-  defl(JNICritical_lock            , PaddedMonitor, MultiArray_lock,           true); \/\/ used for JNI critical regions\n+  CompileTaskAlloc_lock       = new PaddedMutex(MethodCompileQueue_lock->rank()-1, \"CompileTaskAlloc_lock\", true);\n+  ExpandHeap_lock             = new PaddedMutex(Heap_lock->rank()-1, \"ExpandHeap_lock\", true);\n+  OopMapCacheAlloc_lock       = new PaddedMutex(Threads_lock->rank()-1, \"OopMapCacheAlloc_lock\", true);\n+  Module_lock                 = new PaddedMutex(ClassLoaderDataGraph_lock->rank()-1, \"Module_lock\");\n+  SystemDictionary_lock       = new PaddedMonitor(Module_lock->rank()-1, \"SystemDictionary_lock\", true);\n+  JNICritical_lock            = new PaddedMonitor(MultiArray_lock->rank()-1, \"JNICritical_lock\", true); \/\/ used for JNI critical regions\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":98,"deletions":112,"binary":false,"changes":210,"status":"modified"}]}