{"files":[{"patch":"@@ -138,0 +138,1 @@\n+  assert_lock_strong(Metaspace_lock);\n@@ -247,0 +248,2 @@\n+  \/\/ It is valid to poison the chunk payload area at this point since its physically separated from\n+  \/\/ the chunk meta info.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -239,1 +239,2 @@\n-  \/\/ Poison the memory region. It will be unpoisoned later by MetaspaceArena.\n+  \/\/ Poison the memory region. It will be unpoisoned later on a per-chunk base for chunks that are\n+  \/\/ handed to arenas.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-#include \"sanitizers\/address.h\"\n@@ -946,6 +945,2 @@\n-\/\/ os::print_hex_dump is used from the crash handler and may attempt to do scary things like read\n-\/\/ parent stack frames, read outside of initialized memory, and etc. So we tell ASan to not\n-\/\/ instrument this function.\n-NO_SANITIZE_ADDRESS void os::print_hex_dump(outputStream* st, address start, address end,\n-                                            int unitsize, int bytes_per_line,\n-                                            address logical_start) {\n+void os::print_hex_dump(outputStream* st, address start, address end, int unitsize,\n+                        int bytes_per_line, address logical_start) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}