{"files":[{"patch":"@@ -31,1 +31,0 @@\n-#include \"sanitizers\/address.h\"\n@@ -83,6 +82,4 @@\n-\n-    Block(Block* next, size_t word_size) : _next(next), _word_size(word_size) {\n-      \/\/ Poison the remaining memory region.\n-      ASAN_POISON_MEMORY_REGION(reinterpret_cast<char*>(this) + sizeof(Block),\n-                                (_word_size * BytesPerWord) - sizeof(Block));\n-    }\n+    Block(Block* next, size_t word_size) :\n+      _next(next),\n+      _word_size(word_size)\n+    {}\n@@ -146,2 +143,0 @@\n-    \/\/ Ensure the memory region for the block is unpoisoned.\n-    ASAN_UNPOISON_MEMORY_REGION(p, sizeof(Block));\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"sanitizers\/address.h\"\n@@ -112,5 +111,1 @@\n-    {\n-      \/\/ Poison the remaining memory region.\n-      ASAN_POISON_MEMORY_REGION(reinterpret_cast<char*>(this) + sizeof(Node),\n-                                (_word_size * BytesPerWord) - sizeof(Node));\n-    }\n+    {}\n@@ -355,1 +350,0 @@\n-#ifndef ADDRESS_SANITIZER\n@@ -357,1 +351,0 @@\n-#endif\n@@ -359,2 +352,0 @@\n-    \/\/ Ensure the memory region for the node is unpoisoned.\n-    ASAN_UNPOISON_MEMORY_REGION(p, sizeof(Node));\n@@ -397,1 +388,0 @@\n-#ifndef ADDRESS_SANITIZER\n@@ -399,1 +389,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"sanitizers\/address.h\"\n@@ -110,0 +111,17 @@\n+Metachunk* ChunkManager::get_chunk(chunklevel_t preferred_level, chunklevel_t max_level, size_t min_committed_words) {\n+  assert(preferred_level <= max_level, \"Sanity\");\n+  assert(chunklevel::level_fitting_word_size(min_committed_words) >= max_level, \"Sanity\");\n+\n+  Metachunk* c;\n+  {\n+    MutexLocker fcl(Metaspace_lock, Mutex::_no_safepoint_check_flag);\n+    c = get_chunk_locked(preferred_level, max_level, min_committed_words);\n+  }\n+\n+  if (c != nullptr) {\n+    ASAN_UNPOISON_MEMORY_REGION(c->base(), c->word_size() * BytesPerWord);\n+  }\n+\n+  return c;\n+}\n+\n@@ -119,6 +137,1 @@\n-Metachunk* ChunkManager::get_chunk(chunklevel_t preferred_level, chunklevel_t max_level, size_t min_committed_words) {\n-  assert(preferred_level <= max_level, \"Sanity\");\n-  assert(chunklevel::level_fitting_word_size(min_committed_words) >= max_level, \"Sanity\");\n-\n-  MutexLocker fcl(Metaspace_lock, Mutex::_no_safepoint_check_flag);\n-\n+Metachunk* ChunkManager::get_chunk_locked(chunklevel_t preferred_level, chunklevel_t max_level, size_t min_committed_words) {\n@@ -234,0 +247,1 @@\n+  ASAN_POISON_MEMORY_REGION(c->base(), c->word_size() * BytesPerWord);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -98,0 +98,2 @@\n+  Metachunk* get_chunk_locked(chunklevel_t preferred_level, chunklevel_t max_level, size_t min_committed_words);\n+\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"sanitizers\/address.h\"\n@@ -237,2 +236,0 @@\n-      \/\/ Unpoison memory region for requested size. The extra size should remain poisoned.\n-      ASAN_UNPOISON_MEMORY_REGION(p, requested_word_size * BytesPerWord);\n@@ -249,3 +246,0 @@\n-  if (p != nullptr) {\n-    \/\/ Unpoison memory region for requested size. The extra size should remain poisoned.\n-    ASAN_UNPOISON_MEMORY_REGION(p, requested_word_size * BytesPerWord);\n@@ -253,15 +247,12 @@\n-    \/\/ Fence allocation\n-    if (Settings::use_allocation_guard()) {\n-      STATIC_ASSERT(is_aligned(sizeof(Fence), BytesPerWord));\n-      MetaWord* guard = allocate_inner(sizeof(Fence) \/ BytesPerWord);\n-      if (guard != NULL) {\n-        \/\/ Unpoison the memory region for the fence.\n-        ASAN_UNPOISON_MEMORY_REGION(guard, sizeof(Fence));\n-        \/\/ Ignore allocation errors for the fence to keep coding simple. If this\n-        \/\/ happens (e.g. because right at this time we hit the Metaspace GC threshold)\n-        \/\/ we miss adding this one fence. Not a big deal. Note that his would\n-        \/\/ be pretty rare. Chances are much higher the primary allocation above\n-        \/\/ would have already failed).\n-        Fence* f = new(guard) Fence(_first_fence);\n-        _first_fence = f;\n-      }\n+  \/\/ Fence allocation\n+  if (p != NULL && Settings::use_allocation_guard()) {\n+    STATIC_ASSERT(is_aligned(sizeof(Fence), BytesPerWord));\n+    MetaWord* guard = allocate_inner(sizeof(Fence) \/ BytesPerWord);\n+    if (guard != NULL) {\n+      \/\/ Ignore allocation errors for the fence to keep coding simple. If this\n+      \/\/ happens (e.g. because right at this time we hit the Metaspace GC threshold)\n+      \/\/ we miss adding this one fence. Not a big deal. Note that his would\n+      \/\/ be pretty rare. Chances are much higher the primary allocation above\n+      \/\/ would have already failed).\n+      Fence* f = new(guard) Fence(_first_fence);\n+      _first_fence = f;\n@@ -269,1 +260,0 @@\n-#endif \/\/ ASSERT\n@@ -271,0 +261,1 @@\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -272,0 +272,4 @@\n+  \/\/ Undo the poisoning before potentially unmapping memory. This ensures that future mappings at\n+  \/\/ the same address do not unexpectedly fail with use-after-poison.\n+  ASAN_UNPOISON_MEMORY_REGION(_rs.base(), _rs.size());\n+\n@@ -275,4 +279,0 @@\n-  } else {\n-    \/\/ We do not own the memory region, so we need to unpoison it to undo the previous poisoning in\n-    \/\/ the constructor.\n-    ASAN_UNPOISON_MEMORY_REGION(_rs.base(), _rs.size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}