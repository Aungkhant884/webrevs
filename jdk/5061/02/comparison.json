{"files":[{"patch":"@@ -588,0 +588,11 @@\n+        if (target == this) {\n+            synchronized (positionLock) {\n+                long posThis = position();\n+                if (posThis - count + 1 <= position &&\n+                    position - count + 1 <= posThis &&\n+                    !nd.canTransferToFromOverlappedMap()) {\n+                    return IOStatus.UNSUPPORTED_CASE;\n+                }\n+            }\n+        }\n+\n@@ -680,1 +691,1 @@\n-            count = (int)(sz - position);\n+            count = sz - position;\n@@ -707,0 +718,8 @@\n+            if (src == this) {\n+                if (position() - max + 1 <= pos &&\n+                    pos - max + 1 <= position() &&\n+                    !nd.canTransferToFromOverlappedMap()) {\n+                    return IOStatus.UNSUPPORTED_CASE;\n+                }\n+            }\n+\n@@ -782,3 +801,6 @@\n-        if (src instanceof FileChannelImpl)\n-           return transferFromFileChannel((FileChannelImpl)src,\n-                                          position, count);\n+\n+        if (src instanceof FileChannelImpl) {\n+            long n = transferFromFileChannel((FileChannelImpl)src, position, count);\n+            if (n >= 0)\n+                return n;\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,2 @@\n+    abstract boolean canTransferToFromOverlappedMap();\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileDispatcher.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,0 +129,4 @@\n+    boolean canTransferToFromOverlappedMap() {\n+        return canTransferToFromOverlappedMap0();\n+    }\n+\n@@ -187,0 +191,2 @@\n+    static native boolean canTransferToFromOverlappedMap0();\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -341,0 +341,10 @@\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_ch_FileDispatcherImpl_canTransferToFromOverlappedMap0(JNIEnv *env, jclass clazz)\n+{\n+#ifdef MACOSX\n+    return JNI_FALSE;\n+#else\n+    return JNI_TRUE;\n+#endif\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,4 @@\n+    boolean canTransferToFromOverlappedMap() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8140241\n+ * @summary Test transferring to and from same file channel\n+ *\/\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n+import java.io.RandomAccessFile;\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.util.Random;\n+\n+public class TransferOverlappedFileChannel {\n+\n+    private static File file;\n+    private static FileChannel channel;\n+\n+    public static void main(String[] args) throws Exception {\n+        file = File.createTempFile(\"readingin\", null);\n+        file.deleteOnExit();\n+        generateBigFile(file);\n+        RandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n+        channel = raf.getChannel();\n+        transferToNoOverlap();\n+        transferToOverlap();\n+        transferFromNoOverlap();\n+        transferFromOverlap();\n+        channel.close();\n+        file.delete();\n+    }\n+\n+    private static void transferToNoOverlap() throws IOException {\n+        final long length = file.length();\n+\n+        \/\/ position at three quarters\n+        channel.position(length*3\/4);\n+        \/\/ copy last quarter to third quarter\n+        \/\/ (copied and overwritten regions do NOT overlap)\n+        \/\/ So: 1 2 3 4 -> 1 2 4 4\n+        channel.transferTo(length \/ 2, length \/ 4, channel);\n+        System.out.println(\"transferToNoOverlap: OK\");\n+    }\n+\n+    private static void transferToOverlap() throws IOException {\n+        final long length = file.length();\n+\n+        \/\/ position at half\n+        channel.position(length\/2);\n+        \/\/ copy last half to second quarter\n+        \/\/ (copied and overwritten regions DO overlap)\n+        \/\/ So: 1 2 3 4 -> 1 3 4 4\n+        channel.transferTo(length \/ 4, length \/ 2, channel);\n+        System.out.println(\"transferToOverlap: OK\");\n+    }\n+\n+    private static void transferFromNoOverlap() throws IOException {\n+        final long length = file.length();\n+\n+        \/\/ position at three quarters\n+        channel.position(length*3\/4);\n+        \/\/ copy last quarter to third quarter\n+        \/\/ (copied and overwritten regions do NOT overlap)\n+        \/\/ So: 1 2 3 4 -> 1 2 4 4\n+        channel.transferFrom(channel, length \/ 2, length \/ 4);\n+        System.out.println(\"transferFromNoOverlap: OK\");\n+    }\n+\n+    private static void transferFromOverlap() throws IOException {\n+        final long length = file.length();\n+\n+        \/\/ position at half\n+        channel.position(length\/2);\n+        \/\/ copy last half to second quarter\n+        \/\/ (copied and overwritten regions DO overlap)\n+        \/\/ So: 1 2 3 4 -> 1 3 4 4\n+        channel.transferFrom(channel, length \/ 4, length \/ 2);\n+        System.out.println(\"transferFromOverlap: OK\");\n+    }\n+\n+    static void generateBigFile(File file) throws Exception {\n+        OutputStream out = new BufferedOutputStream(\n+                new FileOutputStream(file));\n+        byte[] randomBytes = new byte[1024];\n+        Random rand = new Random(0);\n+        rand.nextBytes(randomBytes);\n+        for (int i = 0; i < 1024; i++) {\n+            out.write(randomBytes);\n+        }\n+        out.flush();\n+        out.close();\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferOverlappedFileChannel.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}