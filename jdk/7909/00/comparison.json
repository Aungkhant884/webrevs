{"files":[{"patch":"@@ -740,1 +740,1 @@\n-         * 696 - the expected number of entities\n+         * 737 - the expected number of entities\n@@ -743,1 +743,1 @@\n-        private static final int NUM_ENTITIES = 696;\n+        private static final int NUM_ENTITIES = 737;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8080535 8191410 8215194 8221431 8239383 8268081 8283465\n+ * @summary Check if the NUM_ENTITIES field reflects the correct number\n+ *      of Character.UnicodeBlock constants.\n+ * @modules java.base\/java.lang:open\n+ * @run testng NumberEntities\n+ *\/\n+\n+import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+\n+@Test\n+public class NumberEntities {\n+    public void test_NumberEntities() throws Throwable {\n+        \/\/ The number of entries in Character.UnicodeBlock.map.\n+        \/\/ See src\/java.base\/share\/classes\/java\/lang\/Character.java\n+        Field n = Character.UnicodeBlock.class.getDeclaredField(\"NUM_ENTITIES\");\n+        Field m = Character.UnicodeBlock.class.getDeclaredField(\"map\");\n+        n.setAccessible(true);\n+        m.setAccessible(true);\n+        assertEquals(((Map)m.get(null)).size(), n.getInt(null));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Character\/UnicodeBlock\/NumberEntities.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8080535 8191410 8215194 8221431 8239383 8268081\n- * @summary Expected size of Character.UnicodeBlock.map is not optimal\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.base\/java.util:open\n- * @build jdk.test.lib.util.OptimalCapacity\n- * @run main OptimalMapSize\n- *\/\n-\n-import java.lang.reflect.Field;\n-import jdk.test.lib.util.OptimalCapacity;\n-\n-\/\/ What will be the number of the Unicode blocks in the future.\n-\/\/\n-\/\/ According to http:\/\/www.unicode.org\/versions\/Unicode7.0.0\/ ,\n-\/\/ in Unicode 7 there will be added 32 new blocks (96 with aliases).\n-\/\/ According to http:\/\/www.unicode.org\/versions\/beta-8.0.0.html ,\n-\/\/ in Unicode 8 there will be added 10 more blocks (30 with aliases).\n-\/\/\n-\/\/ After implementing support of Unicode 9 and 10 in Java, there will\n-\/\/ be 638 entries in Character.UnicodeBlock.map.\n-\/\/\n-\/\/ As of Unicode 11, 667 entries are expected.\n-\/\/ As of Unicode 12.1, 676 entries are expected.\n-\/\/ As of Unicode 13.0, 684 entries are expected.\n-\/\/ As of Unicode 14.0, 696 entries are expected.\n-\/\/\n-\/\/ Initialization of the map and this test will have to be adjusted\n-\/\/ accordingly then.\n-\/\/\n-\/\/ Note that HashMap's implementation aligns the initial capacity to\n-\/\/ a power of two size, so it will end up 1024 (and thus succeed) in\n-\/\/ cases, such as 638, 667, 676, 684, and 696.\n-\n-public class OptimalMapSize {\n-    public static void main(String[] args) throws Throwable {\n-        \/\/ The initial size of Character.UnicodeBlock.map.\n-        \/\/ See src\/java.base\/share\/classes\/java\/lang\/Character.java\n-        Field f = Character.UnicodeBlock.class.getDeclaredField(\"NUM_ENTITIES\");\n-        f.setAccessible(true);\n-        int num_entities = f.getInt(null);\n-        assert num_entities == 696;\n-        int initialCapacity = (int)(num_entities \/ 0.75f + 1.0f);\n-\n-        OptimalCapacity.ofHashMap(Character.UnicodeBlock.class,\n-                \"map\", initialCapacity);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Character\/UnicodeBlock\/OptimalMapSize.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"}]}