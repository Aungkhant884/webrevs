{"files":[{"patch":"@@ -146,1 +146,2 @@\n-     * Returns a pre-processing Filter with the given description and operation.\n+     * Returns a pre-processing {@code Filter} with the given description and\n+     * operation.\n@@ -148,4 +149,23 @@\n-     * <p>The {@link Consumer operation} is the effective implementation of\n-     * the returned Filter and is executed for each {@code HttpExchange} before\n-     * invoking the next filter in the chain, or the exchange handler\n-     * (if this is the final filter in the chain).\n+     * <p>The {@code description} string describes the returned filter. The\n+     * {@link Consumer operation} is the effective implementation of the filter.\n+     * It is executed for each {@code HttpExchange} before invoking either the\n+     * next filter in the chain or the exchange handler (if this is the final\n+     * filter in the chain).\n+     *\n+     * @apiNote\n+     * A beforeHandler filter is typically used to examine or modify the\n+     * exchange state before it is handled. The filter operation is executed\n+     * before {@link Filter.Chain#doFilter(HttpExchange)} is invoked, so before\n+     * any subsequent filters in the chain and the exchange handler are\n+     * executed. The response is commonly sent by the exchange handler.\n+     * The filter is only expected to send the response in the uncommon case\n+     * that the exchange will not be handled after the filter is executed.\n+     *\n+     * <p> Example of adding a response header to all responses:\n+     * <pre>{@code\n+     *     var filter = Filter.beforeHandler(\"Add response header X-Content-Type-Options\",\n+     *                 (var e) -> e.getResponseHeaders().set(\"X-Content-Type-Options\", \"nosniff\"));\n+     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n+     *     server.createContext(\"\/\", new SomeHandler()).getFilters().add(filter);\n+     *     server.start();\n+     * }<\/pre>\n@@ -159,2 +179,2 @@\n-    public static Filter beforeResponse(String description,\n-                                        Consumer<HttpExchange> operation) {\n+    public static Filter beforeHandler(String description,\n+                                       Consumer<HttpExchange> operation) {\n@@ -177,1 +197,8 @@\n-     * Returns a post-processing Filter with the given description and operation.\n+     * Returns a post-processing {@code Filter} with the given description and\n+     * operation.\n+     *\n+     * <p>The {@code description} string describes the returned filter. The\n+     * {@link Consumer operation} is the effective implementation of the filter.\n+     * It is executed for each {@code HttpExchange} after invoking either the\n+     * next filter in the chain or the exchange handler (if this filter is the\n+     * final filter in the chain).\n@@ -179,4 +206,29 @@\n-     * <p>The {@link Consumer operation} is the effective implementation of\n-     * the returned Filter and is executed for each {@code HttpExchange} after\n-     * invoking the next filter in the chain, or the exchange handler\n-     * (if this is the final filter in the chain).\n+     * @apiNote\n+     * An afterHandler filter is typically used to examine the exchange state\n+     * rather than modifying it. The filter operation is executed after\n+     * {@link Filter.Chain#doFilter(HttpExchange)} is invoked, this means any\n+     * subsequent filters in the chain and the exchange handler have been\n+     * executed and the response has commonly been sent. The filter is only\n+     * expected to send the response in the uncommon case that the exchange\n+     * has not been handled before the filter is executed.\n+     *\n+     * <p> Example of logging the response code of all exchanges:\n+     * <pre>{@code\n+     *     var filter = Filter.afterHandler(\"Log response code\", (var e) -> log(e.getResponseCode());\n+     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n+     *     var context = server.createContext(\"\/\", new SomeHandler());\n+     *     context.getFilters().add(filter);\n+     *     server.start();\n+     * }<\/pre>\n+     *\n+     * <p> Example of adding a sequence of afterHandler filters to a context\n+     * (note the ordering):\n+     * <pre>{@code\n+     *     var filter1 = Filter.afterHandler(\"Set a1\", (var e) -> e.setAttribute(\"a1\", \"some value\"));\n+     *     var filter2 = Filter.afterHandler(\"Get a1\", (var e) -> doSomething(e.getAttribute(\"a1\")));\n+     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n+     *     var context = server.createContext(\"\/\", new SomeHandler());\n+     *     context.getFilters().add(filter2);\n+     *     context.getFilters().add(filter1);\n+     *     server.start();\n+     * }<\/pre>\n@@ -190,2 +242,2 @@\n-    public static Filter afterResponse(String description,\n-                                       Consumer<HttpExchange> operation) {\n+    public static Filter afterHandler(String description,\n+                                      Consumer<HttpExchange> operation) {\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Filter.java","additions":66,"deletions":14,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Basic tests for static factory methods of Filter\n+ * @summary  Tests for Filter static factory methods\n@@ -32,0 +32,2 @@\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n@@ -37,0 +39,2 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -54,0 +58,1 @@\n+    static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n@@ -58,1 +63,0 @@\n-            Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n@@ -68,4 +72,4 @@\n-        expectThrows(NPE, () -> Filter.beforeResponse(null, (HttpExchange e) -> e.getResponseHeaders().set(\"X-Foo\", \"Bar\")));\n-        expectThrows(NPE, () -> Filter.beforeResponse(\"Some description\", null));\n-        expectThrows(NPE, () -> Filter.afterResponse(null, HttpExchange::getResponseCode));\n-        expectThrows(NPE, () -> Filter.afterResponse(\"Some description\", null));\n+        expectThrows(NPE, () -> Filter.beforeHandler(null, (HttpExchange e) -> e.getResponseHeaders().set(\"X-Foo\", \"Bar\")));\n+        expectThrows(NPE, () -> Filter.beforeHandler(\"Some description\", null));\n+        expectThrows(NPE, () -> Filter.afterHandler(null, HttpExchange::getResponseCode));\n+        expectThrows(NPE, () -> Filter.afterHandler(\"Some description\", null));\n@@ -77,2 +81,2 @@\n-        var beforeFilter = Filter.beforeResponse(desc, HttpExchange::getRequestBody);\n-        var afterFilter = Filter.afterResponse(desc, HttpExchange::getRequestBody);\n+        var beforeFilter = Filter.beforeHandler(desc, HttpExchange::getRequestBody);\n+        var afterFilter = Filter.afterHandler(desc, HttpExchange::getResponseCode);\n@@ -84,3 +88,3 @@\n-    public void testBeforeResponse() throws Exception {\n-        var handler = new TestHttpHandler();\n-        var filter = Filter.beforeResponse(\"Add x-foo response header\",\n+    public void testBeforeHandler() throws Exception {\n+        var handler = new EchoHandler();\n+        var filter = Filter.beforeHandler(\"Add x-foo response header\",\n@@ -104,3 +108,3 @@\n-    public void testBeforeResponseRepeated() throws Exception {\n-        var handler = new TestHttpHandler();\n-        var filter1 = Filter.beforeResponse(\"Add x-foo response header\",\n+    public void testBeforeHandlerRepeated() throws Exception {\n+        var handler = new EchoHandler();\n+        var filter1 = Filter.beforeHandler(\"Add x-foo response header\",\n@@ -108,1 +112,1 @@\n-        var filter2 = Filter.beforeResponse(\"Update x-foo response header\",\n+        var filter2 = Filter.beforeHandler(\"Update x-foo response header\",\n@@ -128,5 +132,14 @@\n-    public void testAfterResponse() throws Exception {\n-        var handler = new TestHttpHandler();\n-        var respCode = new int[1];\n-        var filter = Filter.afterResponse(\"Log response code\",\n-                (var e) -> respCode[0] = e.getResponseCode());\n+    public void testBeforeHandlerSendResponse() throws Exception {\n+        var handler = new NoResponseHandler();\n+        var filter = Filter.beforeHandler(\"Add x-foo response header and send response\",\n+                (var e) -> {\n+                    try (InputStream is = e.getRequestBody();\n+                         OutputStream os = e.getResponseBody()) {\n+                        var len = is.transferTo(os);\n+                        e.getResponseHeaders().set(\"x-foo\", \"bar\");\n+                        e.sendResponseHeaders(200, len);\n+                    } catch (IOException ioe) {\n+                        ioe.printStackTrace(System.out);\n+                        throw new UncheckedIOException(ioe);\n+                    }\n+                });\n@@ -141,1 +154,2 @@\n-            assertEquals(response.statusCode(), respCode[0]);\n+            assertEquals(response.headers().map().size(), 3);\n+            assertEquals(response.headers().firstValue(\"x-foo\").orElseThrow(), \"bar\");\n@@ -148,3 +162,23 @@\n-    public void testAfterResponseRepeated() throws Exception {\n-        var handler = new TestHttpHandler();\n-        var attr = new String[1];\n+    public void testAfterHandler() throws Exception {\n+        var handler = new EchoHandler();\n+        var respCode = new AtomicInteger();\n+        var filter = Filter.afterHandler(\"Log response code\",\n+                (var e) -> respCode.set(e.getResponseCode()));\n+        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        server.createContext(\"\/\", handler).getFilters().add(filter);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.statusCode(), respCode.get());\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public void testAfterHandlerRepeated() throws Exception {\n+        var handler = new EchoHandler();\n+        var attr = new AtomicReference<String>();\n@@ -152,1 +186,1 @@\n-        var afterFilter1 = Filter.afterResponse(\"Set attribute\",\n+        var filter1 = Filter.afterHandler(\"Set attribute\",\n@@ -154,2 +188,2 @@\n-        var afterFilter2 = Filter.afterResponse(\"Read attribute\",\n-                (var e) -> attr[0] = (String) e.getAttribute(\"test-attr\"));\n+        var filter2 = Filter.afterHandler(\"Read attribute\",\n+                (var e) -> attr.set((String) e.getAttribute(\"test-attr\")));\n@@ -158,2 +192,2 @@\n-        context.getFilters().add(afterFilter2);\n-        context.getFilters().add(afterFilter1);\n+        context.getFilters().add(filter2);\n+        context.getFilters().add(filter1);\n@@ -166,1 +200,1 @@\n-            assertEquals(attr[0], value);\n+            assertEquals(attr.get(), value);\n@@ -173,4 +207,34 @@\n-    public void testBeforeAndAfterResponse() throws Exception {\n-        var handler = new TestHttpHandler();\n-        var respCode = new int[1];\n-        var beforeFilter = Filter.beforeResponse(\"Add x-foo response header\",\n+    public void testAfterHandlerSendResponse() throws Exception {\n+        var handler = new NoResponseHandler();\n+        var respCode = new AtomicInteger();\n+        var filter = Filter.afterHandler(\"Log response code and send response\",\n+                (var e) -> {\n+                    try (InputStream is = e.getRequestBody();\n+                         OutputStream os = e.getResponseBody()) {\n+                        var len = is.transferTo(os);\n+                        e.sendResponseHeaders(200, len);\n+                        respCode.set(e.getResponseCode());\n+                    } catch (IOException ioe) {\n+                        ioe.printStackTrace(System.out);\n+                        throw new UncheckedIOException(ioe);\n+                    }\n+                });\n+        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        server.createContext(\"\/\", handler).getFilters().add(filter);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.statusCode(), respCode.get());\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public void testBeforeAndAfterHandler() throws Exception {\n+        var handler = new EchoHandler();\n+        var respCode = new AtomicInteger();\n+        var beforeFilter = Filter.beforeHandler(\"Add x-foo response header\",\n@@ -178,2 +242,2 @@\n-        var afterFilter = Filter.afterResponse(\"Log response code\",\n-                (var e) -> respCode[0] = e.getResponseCode());\n+        var afterFilter = Filter.afterHandler(\"Log response code\",\n+                (var e) -> respCode.set(e.getResponseCode()));\n@@ -190,1 +254,1 @@\n-            assertEquals(response.statusCode(), respCode[0]);\n+            assertEquals(response.statusCode(), respCode.get());\n@@ -203,1 +267,1 @@\n-     * A test handler that discards the request and sends no response\n+     * A test handler that discards the request and echos the request body\n@@ -205,1 +269,1 @@\n-    static class TestHttpHandler implements HttpHandler {\n+    static class EchoHandler implements HttpHandler {\n@@ -208,3 +272,4 @@\n-            try (InputStream is = exchange.getRequestBody()) {\n-                is.readAllBytes();\n-                exchange.sendResponseHeaders(200, -1);\n+            try (InputStream is = exchange.getRequestBody();\n+                 OutputStream os = exchange.getResponseBody()) {\n+                var len = is.transferTo(os);\n+                exchange.sendResponseHeaders(200, len);\n@@ -214,0 +279,8 @@\n+\n+    \/**\n+     * A test handler that does nothing\n+     *\/\n+    static class NoResponseHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException { }\n+    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FilterTest.java","additions":115,"deletions":42,"binary":false,"changes":157,"status":"modified"}]}