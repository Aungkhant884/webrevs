{"files":[{"patch":"@@ -149,5 +149,5 @@\n-     * <p>The {@code description} string describes the returned filter. The\n-     * {@link Consumer operation} is the effective implementation of the filter.\n-     * It is executed for each {@code HttpExchange} before invoking either the\n-     * next filter in the chain or the exchange handler (if this is the final\n-     * filter in the chain).\n+     * <p>The {@link #description() description} describes the returned filter.\n+     * The {@link Consumer operation} is the effective implementation of the\n+     * filter. It is executed for each {@code HttpExchange} before invoking\n+     * either the next filter in the chain or the exchange handler (if this is\n+     * the final filter in the chain).\n@@ -157,6 +157,6 @@\n-     * exchange state before it is handled. The filter operation is executed\n-     * before {@link Filter.Chain#doFilter(HttpExchange)} is invoked, so before\n-     * any subsequent filters in the chain and the exchange handler are\n-     * executed. The response is commonly sent by the exchange handler.\n-     * The filter is only expected to send the response in the uncommon case\n-     * that the exchange will not be handled after the filter is executed.\n+     * exchange state before it is handled. The filter {@code operation} is\n+     * executed before {@link Filter.Chain#doFilter(HttpExchange)} is invoked,\n+     * so before any subsequent filters in the chain and the exchange handler\n+     * are executed. The filter {@code operation} is not expected to handle the\n+     * request or {@linkplain HttpExchange#sendResponseHeaders(int, long) send response headers},\n+     * since this is commonly done by the exchange handler.\n@@ -164,1 +164,1 @@\n-     * <p> Example of adding a response header to all responses:\n+     * <p> Example of adding the Foo response header to all responses:\n@@ -166,5 +166,3 @@\n-     *     var filter = Filter.beforeHandler(\"Add response header X-Content-Type-Options\",\n-     *                 (var e) -> e.getResponseHeaders().set(\"X-Content-Type-Options\", \"nosniff\"));\n-     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n-     *     server.createContext(\"\/\", new SomeHandler()).getFilters().add(filter);\n-     *     server.start();\n+     *     var filter = Filter.beforeHandler(\"Add response header Foo\",\n+     *                 e -> e.getResponseHeaders().set(\"Foo\", \"Bar\"));\n+     *     httpContext.getFilters().add(filter);\n@@ -200,5 +198,5 @@\n-     * <p>The {@code description} string describes the returned filter. The\n-     * {@link Consumer operation} is the effective implementation of the filter.\n-     * It is executed for each {@code HttpExchange} after invoking either the\n-     * next filter in the chain or the exchange handler (if this filter is the\n-     * final filter in the chain).\n+     * <p>The {@link #description() description} describes the returned filter.\n+     * The {@link Consumer operation} is the effective implementation of the\n+     * filter. It is executed for each {@code HttpExchange} after invoking\n+     * either the next filter in the chain or the exchange handler (if this\n+     * filter is the final filter in the chain).\n@@ -208,1 +206,1 @@\n-     * rather than modifying it. The filter operation is executed after\n+     * rather than modifying it. The filter {@code operation} is executed after\n@@ -211,3 +209,4 @@\n-     * executed and the response has commonly been sent. The filter is only\n-     * expected to send the response in the uncommon case that the exchange\n-     * has not been handled before the filter is executed.\n+     * executed. The filter {@code operation} is not expected to handle the\n+     * exchange or {@linkplain HttpExchange#sendResponseHeaders(int, long) send the response headers}.\n+     * Doing so is likely to fail, since this is commonly done by the exchange\n+     * handler.\n@@ -215,1 +214,1 @@\n-     * <p> Example of logging the response code of all exchanges:\n+     * <p> Example of adding a filter that logs the response code of all exchanges:\n@@ -217,5 +216,2 @@\n-     *     var filter = Filter.afterHandler(\"Log response code\", (var e) -> log(e.getResponseCode());\n-     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n-     *     var context = server.createContext(\"\/\", new SomeHandler());\n-     *     context.getFilters().add(filter);\n-     *     server.start();\n+     *     var filter = Filter.afterHandler(\"Log response code\", e -> log(e.getResponseCode());\n+     *     httpContext.getFilters().add(filter);\n@@ -224,2 +220,3 @@\n-     * <p> Example of adding a sequence of afterHandler filters to a context\n-     * (note the ordering):\n+     * <p> Example of adding a sequence of afterHandler filters to a context:<br>\n+     * The order in which the filters are invoked is reverse to the order in\n+     * which they are added to the context's filter-list.\n@@ -227,7 +224,3 @@\n-     *     var filter1 = Filter.afterHandler(\"Set a1\", (var e) -> e.setAttribute(\"a1\", \"some value\"));\n-     *     var filter2 = Filter.afterHandler(\"Get a1\", (var e) -> doSomething(e.getAttribute(\"a1\")));\n-     *     var server = HttpServer.create(new InetSocketAddress(0), 10);\n-     *     var context = server.createContext(\"\/\", new SomeHandler());\n-     *     context.getFilters().add(filter2);\n-     *     context.getFilters().add(filter1);\n-     *     server.start();\n+     *     var a1Set = Filter.afterHandler(\"Set a1\", e -> e.setAttribute(\"a1\", \"some value\"));\n+     *     var a1Get = Filter.afterHandler(\"Get a1\", e -> doSomething(e.getAttribute(\"a1\")));\n+     *     httpContext.getFilters().addAll(List.of(a1Get, a1Set));\n@@ -235,0 +228,2 @@\n+     * <p>The operation of {@code a1Get} will be invoked after the operation of\n+     * {@code a1Set} because {@code a1Get} was added before {@code a1Set}.\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Filter.java","additions":36,"deletions":41,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.net.InetAddress;\n@@ -57,1 +58,1 @@\n-\n+    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n@@ -93,1 +94,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10);\n@@ -115,1 +116,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n@@ -149,1 +150,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n@@ -170,1 +171,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n@@ -193,1 +194,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n@@ -227,1 +228,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n@@ -249,1 +250,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(0), 10);\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FilterTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}