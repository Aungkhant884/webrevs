{"files":[{"patch":"@@ -56,3 +56,28 @@\n-  Chunk* take_from_pool();\n-  void return_to_pool(Chunk* chunk);\n-  void prune();\n+  Chunk* take_from_pool() {\n+    ThreadCritical tc;\n+    Chunk* c = _first;\n+    if (_first != nullptr) {\n+      _first = _first->next();\n+    }\n+    return c;\n+  }\n+  void return_to_pool(Chunk* chunk) {\n+    assert(chunk->length() == _size, \"wrong pool for this chunk\");\n+    ThreadCritical tc;\n+    chunk->set_next(_first);\n+    _first = chunk;\n+  }\n+\n+  void prune() {\n+    \/\/ Free all chunks while in ThreadCritical lock\n+    \/\/ so NMT adjustment is stable.\n+    ThreadCritical tc;\n+    Chunk* cur = _first;\n+    Chunk* next = nullptr;\n+    while (cur != nullptr) {\n+      next = cur->next();\n+      os::free(cur);\n+      cur = next;\n+    }\n+    _first = nullptr;\n+  }\n@@ -61,1 +86,8 @@\n-  static ChunkPool* get_pool_for_size(size_t size);\n+  static ChunkPool* get_pool_for_size(size_t size) {\n+    for (int i = 0; i < _num_pools; i++) {\n+      if (_pools[i]._size == size) {\n+        return _pools + i;\n+      }\n+    }\n+    return nullptr;\n+  }\n@@ -66,26 +98,3 @@\n-  static void clean();\n-  static Chunk* allocate_chunk(AllocFailType alloc_failmode, size_t length);\n-  static void deallocate_chunk(Chunk* p);\n-};\n-\n-\n-Chunk* ChunkPool::take_from_pool() {\n-  ThreadCritical tc;\n-  Chunk* c = _first;\n-  if (_first != nullptr) {\n-    _first = _first->next();\n-  }\n-  return c;\n-}\n-\n-void ChunkPool::return_to_pool(Chunk* chunk) {\n-  assert(chunk->length() == _size, \"wrong pool for this chunk\");\n-  ThreadCritical tc;\n-  chunk->set_next(_first);\n-  _first = chunk;\n-}\n-\n-ChunkPool* ChunkPool::get_pool_for_size(size_t size) {\n-  for (int i = 0; i < _num_pools; i++) {\n-    if (_pools[i]._size == size) {\n-      return _pools + i;\n+  static void clean()  {\n+    for (int i = 0; i < _num_pools; i++) {\n+      _pools[i].prune();\n@@ -94,2 +103,0 @@\n-  return nullptr;\n-}\n@@ -97,19 +104,3 @@\n-void ChunkPool::prune() {\n-  \/\/ Free all chunks while in ThreadCritical lock\n-  \/\/ so NMT adjustment is stable.\n-  ThreadCritical tc;\n-  Chunk* cur = _first;\n-  Chunk* next = nullptr;\n-  while (cur != nullptr) {\n-    next = cur->next();\n-    os::free(cur);\n-    cur = next;\n-  }\n-  _first = nullptr;\n-}\n-\n-void ChunkPool::clean() {\n-  for (int i = 0; i < _num_pools; i++) {\n-    _pools[i].prune();\n-  }\n-}\n+  static Chunk* allocate_chunk(AllocFailType alloc_failmode, size_t length);\n+  static void deallocate_chunk(Chunk* p);\n+};\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":42,"deletions":51,"binary":false,"changes":93,"status":"modified"}]}