{"files":[{"patch":"@@ -45,0 +45,29 @@\n+\/\/ MT-safe pool of same-sized chunks to reduce malloc\/free thrashing\n+\/\/ NB: not using Mutex because pools are used before Threads are initialized\n+class ChunkPool {\n+  \/\/ Our four static pools\n+  static const int _num_pools = 4;\n+  static ChunkPool _pools[_num_pools];\n+\n+  Chunk*       _first;        \/\/ first cached Chunk; its first word points to next chunk\n+  const size_t _size;         \/\/ (inner payload) size of the chunks this pool serves\n+\n+  \/\/ Allocate a chunk from the pool; returns null if pool is empty.\n+  Chunk* take_from_pool();\n+  \/\/ Return a chunk to the pool\n+  void return_to_pool(Chunk* chunk);\n+  \/\/ Prune the pool\n+  void prune();\n+\n+  \/\/ Given a (inner payload) size, return the pool responsible for it, or null if the size is non-standard\n+  static ChunkPool* get_pool_for_size(size_t size);\n+\n+public:\n+  ChunkPool(size_t size) : _first(nullptr), _size(size) {}\n+\n+  static void clean();\n+  static Chunk* allocate_chunk(AllocFailType alloc_failmode, size_t length);\n+  static void deallocate_chunk(Chunk* p);\n+};\n+\n+\n@@ -156,1 +185,1 @@\n-void ChunkPool::start_chunk_pool_cleaner_task() {\n+void Arena::start_chunk_pool_cleaner_task() {\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -82,32 +82,0 @@\n-\/\/ MT-safe pool of same-sized chunks to reduce malloc\/free thrashing\n-\/\/ NB: not using Mutex because pools are used before Threads are initialized\n-class ChunkPool {\n-  \/\/ Our four static pools\n-  static const int _num_pools = 4;\n-  static ChunkPool _pools[_num_pools];\n-\n-  Chunk*       _first;        \/\/ first cached Chunk; its first word points to next chunk\n-  const size_t _size;         \/\/ (inner payload) size of the chunks this pool serves\n-\n-  \/\/ Allocate a chunk from the pool; returns null if pool is empty.\n-  Chunk* take_from_pool();\n-  \/\/ Return a chunk to the pool\n-  void return_to_pool(Chunk* chunk);\n-  \/\/ Prune the pool\n-  void prune();\n-\n-  \/\/ Given a (inner payload) size, return the pool responsible for it, or null if the size is non-standard\n-  static ChunkPool* get_pool_for_size(size_t size);\n-\n-public:\n-  ChunkPool(size_t size) : _first(nullptr), _size(size) {}\n-\n-  static void clean();\n-  static Chunk* allocate_chunk(AllocFailType alloc_failmode, size_t length);\n-  static void deallocate_chunk(Chunk* p);\n-\n-  \/\/ Start the chunk_pool cleaner task\n-  static void start_chunk_pool_cleaner_task();\n-};\n-\n-\n@@ -143,0 +111,3 @@\n+  \/\/ Start the chunk_pool cleaner task\n+  static void start_chunk_pool_cleaner_task();\n+\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -678,1 +678,1 @@\n-  ChunkPool::start_chunk_pool_cleaner_task();\n+  Arena::start_chunk_pool_cleaner_task();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}