{"files":[{"patch":"@@ -45,1 +45,2 @@\n-            p.addSelectedNodes(c.getNodes());\n+            p.addSelectedNodes(c.getNodes(), true);\n+            p.centerSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/Bytecodes\/src\/main\/java\/com\/sun\/hotspot\/igv\/bytecodes\/SelectBytecodesAction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,0 +102,3 @@\n+        edgeLayer.removeChildren();\n+        mainLayer.removeChildren();\n+\n@@ -121,1 +124,1 @@\n-    public void clearSelection() {\n+    private void clearSelection() {\n@@ -129,1 +132,1 @@\n-    public void selectionChanged() {\n+    private void selectionChanged() {\n@@ -137,1 +140,2 @@\n-            p.addSelectedNodes(inputNodes);\n+            p.addSelectedNodes(inputNodes, true);\n+            p.centerSelectedNodes();\n@@ -141,1 +145,1 @@\n-    public void addToSelection(BlockWidget widget) {\n+    private void addToSelection(BlockWidget widget) {\n@@ -147,1 +151,1 @@\n-    public void removeFromSelection(BlockWidget widget) {\n+    private void removeFromSelection(BlockWidget widget) {\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javax.swing.SwingUtilities;\n@@ -105,5 +106,7 @@\n-        if (lastProvider != null) {\n-            InputGraph graph = lastProvider.getGraph();\n-            if (graph != null) {\n-                scene.setGraph(graph);\n-                return;\n+        SwingUtilities.invokeLater(() -> {\n+            if (lastProvider != null) {\n+                InputGraph graph = lastProvider.getGraph();\n+                if (graph != null) {\n+                    scene.setGraph(graph);\n+                    return;\n+                }\n@@ -111,2 +114,2 @@\n-        }\n-        scene.setGraph(new InputGraph(\"\"));\n+            scene.setGraph(new InputGraph(\"\"));\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -258,1 +258,6 @@\n-        return getGroup().getGraphs().indexOf(this);\n+        Group group = getGroup();\n+        if (group != null) {\n+            return group.getGraphs().indexOf(this);\n+        } else {\n+            return -1;\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputGraph.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    void addSelectedNodes(Collection<InputNode> nodes);\n+    void centerSelectedNodes();\n@@ -41,1 +41,1 @@\n-    void clearSelectedNodes();\n+    void addSelectedNodes(Collection<InputNode> nodes, boolean showIfHidden);\n@@ -43,0 +43,1 @@\n+    void clearSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/services\/InputGraphProvider.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import com.sun.hotspot.igv.data.*;\n@@ -28,0 +27,1 @@\n+import com.sun.hotspot.igv.data.*;\n@@ -271,0 +271,10 @@\n+\n+    public Figure getRootFigure() {\n+        Properties.PropertySelector<Figure> selector = new Properties.PropertySelector<>(figures);\n+        Figure root = selector.selectSingle(new Properties.StringPropertyMatcher(\"name\", \"Root\"));\n+        if (root == null) {\n+            root = selector.selectSingle(new Properties.StringPropertyMatcher(\"name\", \"Start\"));\n+        }\n+        return root;\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/Diagram.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,5 +48,5 @@\n-    public RangeSliderModel(List<String> positions) {\n-        assert positions.size() > 0;\n-        this.changedEvent = new ChangedEvent<>(this);\n-        this.colorChangedEvent = new ChangedEvent<>(this);\n-        setPositions(positions);\n+    public RangeSliderModel() {\n+        changedEvent = new ChangedEvent<>(this);\n+        colorChangedEvent = new ChangedEvent<>(this);\n+        positions = new ArrayList<>();\n+        colors = new ArrayList<>();\n@@ -91,4 +91,6 @@\n-        firstPosition = fp;\n-        secondPosition = sp;\n-        ensureOrder();\n-        changedEvent.fire();\n+        if (firstPosition != fp || secondPosition != sp) {\n+            firstPosition = fp;\n+            secondPosition = sp;\n+            ensureOrder();\n+            changedEvent.fire();\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/Util\/src\/main\/java\/com\/sun\/hotspot\/igv\/util\/RangeSliderModel.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+                            editor.centerSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/BlockQuickSearch.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,4 @@\n-import com.sun.hotspot.igv.util.*;\n+import com.sun.hotspot.igv.util.ColorIcon;\n+import com.sun.hotspot.igv.util.DoubleClickAction;\n+import com.sun.hotspot.igv.util.DoubleClickHandler;\n+import com.sun.hotspot.igv.util.PropertiesSheet;\n@@ -41,3 +44,1 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.MouseEvent;\n-import java.awt.event.MouseWheelListener;\n+import java.awt.event.*;\n@@ -54,1 +55,2 @@\n-import org.netbeans.api.visual.animator.SceneAnimator;\n+import org.netbeans.api.visual.animator.AnimatorEvent;\n+import org.netbeans.api.visual.animator.AnimatorListener;\n@@ -80,1 +82,0 @@\n-    private final LayerWidget connectionLayer;\n@@ -85,0 +86,1 @@\n+    private final LayerWidget connectionLayer;\n@@ -162,1 +164,1 @@\n-        validate();\n+        validateAll();\n@@ -172,1 +174,0 @@\n-        \/\/ Fix for jumping during zooming\n@@ -174,2 +175,1 @@\n-        getView().scrollRectToVisible(visibleRect);\n-\n+        validateAll();\n@@ -186,24 +186,0 @@\n-    @Override\n-    public void centerFigures(Collection<Figure> figures) {\n-        getModel().showFigures(figures);\n-        Rectangle overallRect = null;\n-        for (Figure figure : figures) {\n-            FigureWidget figureWidget = getWidget(figure);\n-            if (figureWidget != null) {\n-                Rectangle bounds = figureWidget.getBounds();\n-                if (bounds != null) {\n-                    Point location = figureWidget.getLocation();\n-                    Rectangle figureRect = new Rectangle(location.x, location.y, bounds.width, bounds.height);\n-                    if (overallRect == null) {\n-                        overallRect = figureRect;\n-                    } else {\n-                        overallRect = overallRect.union(figureRect);\n-                    }\n-                }\n-            }\n-        }\n-        if (overallRect != null) {\n-            centerRectangle(overallRect);\n-        }\n-    }\n-\n@@ -213,3 +189,15 @@\n-        public void filteredChanged(SelectionCoordinator source) {\n-            setHighlightedObjects(idSetToObjectSet(source.getHighlightedObjects()));\n-            validate();\n+        public void filteredChanged(SelectionCoordinator coordinator) {\n+            Set<Integer> ids = coordinator.getHighlightedObjects();\n+            Set<Object> result = new HashSet<>();\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                if (ids.contains(figure.getInputNode().getId())) {\n+                    result.add(figure);\n+                }\n+                for (Slot slot : figure.getSlots()) {\n+                    if (!Collections.disjoint(slot.getSource().getSourceNodesAsSet(), ids)) {\n+                        result.add(slot);\n+                    }\n+                }\n+            }\n+            setHighlightedObjects(result);\n+            validateAll();\n@@ -221,2 +209,2 @@\n-        public void filteredChanged(SelectionCoordinator source) {\n-            Set<Integer> ids = source.getSelectedObjects();\n+        public void filteredChanged(SelectionCoordinator coordinator) {\n+            Set<Integer> ids = coordinator.getSelectedObjects();\n@@ -224,3 +212,3 @@\n-            for (Figure f : getModel().getDiagram().getFigures()) {\n-                if (ids.contains(f.getInputNode().getId())) {\n-                    figures.add(f);\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                if (ids.contains(figure.getInputNode().getId())) {\n+                    figures.add(figure);\n@@ -229,3 +217,3 @@\n-            centerFigures(figures);\n-            setSelectedObjects(idSetToObjectSet(ids));\n-            validate();\n+            setFigureSelection(figures);\n+            centerSelectedFigures();\n+            validateAll();\n@@ -239,2 +227,2 @@\n-    private void setScrollPosition(Point p) {\n-        scrollPane.getViewport().setViewPosition(p);\n+    private void setScrollPosition(Point position) {\n+        scrollPane.getViewport().setViewPosition(position);\n@@ -344,1 +332,1 @@\n-            Widget widget = new Widget(DiagramScene.this);\n+            Widget widget = new Widget(this);\n@@ -346,1 +334,0 @@\n-            widget.setForeground(Color.red);\n@@ -446,1 +433,0 @@\n-\n@@ -483,5 +469,17 @@\n-        this.modelState = new ModelState(model);\n-        this.model.getDiagramChangedEvent().addListener(m -> update());\n-        this.model.getGraphChangedEvent().addListener(m -> addUndo());\n-        this.model.getSelectedNodesChangedEvent().addListener(m -> selectedNodesChanged());\n-        this.model.getHiddenNodesChangedEvent().addListener(m -> hiddenNodesChanged());\n+        modelState = new ModelState(model);\n+\n+        model.getDiagramChangedEvent().addListener(m -> update());\n+        model.getGraphChangedEvent().addListener(m -> graphChanged());\n+        model.getHiddenNodesChangedEvent().addListener(m -> hiddenNodesChanged());\n+        scrollPane.addHierarchyBoundsListener(new HierarchyBoundsListener() {\n+            @Override\n+            public void ancestorMoved(HierarchyEvent e) {}\n+\n+            @Override\n+            public void ancestorResized(HierarchyEvent e) {\n+                if (scrollPane.getBounds().width > 0) {\n+                    centerRootNode();\n+                    scrollPane.removeHierarchyBoundsListener(this);\n+                }\n+            }\n+        });\n@@ -491,0 +489,1 @@\n+    @Override\n@@ -501,1 +500,1 @@\n-        return getModel().getHiddenNodes().isEmpty();\n+        return model.getHiddenNodes().isEmpty();\n@@ -522,1 +521,2 @@\n-                centerFigures(Collections.singleton(figure));\n+                model.showFigures(model.getSelectedFigures());\n+                centerSelectedFigures();\n@@ -542,6 +542,1 @@\n-    private void update() {\n-        mainLayer.removeChildren();\n-        blockLayer.removeChildren();\n-\n-        rebuilding = true;\n-\n+    private void clearObjects() {\n@@ -552,0 +547,1 @@\n+    }\n@@ -553,7 +549,2 @@\n-        Diagram d = getModel().getDiagram();\n-\n-        Map<InputBlock, Integer> maxWidth = new HashMap<>();\n-        for (InputBlock b : d.getInputBlocks()) {\n-            maxWidth.put(b, 10);\n-        }\n-        for (Figure f : d.getFigures()) {\n+    private void updateFigureTexts() {\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n@@ -561,5 +552,1 @@\n-            f.updateLines();\n-            \/\/ Compute max node width in each block.\n-            if (f.getWidth() > maxWidth.get(f.getBlock().getInputBlock())) {\n-                maxWidth.put(f.getBlock().getInputBlock(), f.getWidth());\n-            }\n+            figure.updateLines();\n@@ -567,0 +554,1 @@\n+    }\n@@ -568,4 +556,5 @@\n-        for (Figure f : d.getFigures()) {\n-            \/\/ Set all nodes' width to the maximum width in the blocks?\n-            if (getModel().getShowCFG()) {\n-                f.setWidth(maxWidth.get(f.getBlock().getInputBlock()));\n+    private void updateFigureWidths() {\n+        if (getModel().getShowCFG()) {\n+            Map<InputBlock, Integer> maxWidth = new HashMap<>();\n+            for (InputBlock inputBlock : getModel().getDiagram().getInputBlocks()) {\n+                maxWidth.put(inputBlock, 10);\n@@ -573,0 +562,12 @@\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                \/\/ Compute max node width in each block.\n+                if (figure.getWidth() > maxWidth.get(figure.getBlock().getInputBlock())) {\n+                    maxWidth.put(figure.getBlock().getInputBlock(), figure.getWidth());\n+                }\n+            }\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                \/\/ Set all nodes' width to the maximum width in the blocks?\n+                figure.setWidth(maxWidth.get(figure.getBlock().getInputBlock()));\n+            }\n+        }\n+    }\n@@ -574,14 +575,17 @@\n-            FigureWidget w = new FigureWidget(f, this, mainLayer);\n-            w.getActions().addAction(ActionFactory.createPopupMenuAction(w));\n-            w.getActions().addAction(selectAction);\n-            w.getActions().addAction(hoverAction);\n-            w.setVisible(false);\n-\n-            addObject(f, w);\n-\n-            for (InputSlot s : f.getInputSlots()) {\n-                SlotWidget sw = new InputSlotWidget(s, this, w, w);\n-                addObject(s, sw);\n-                sw.getActions().addAction(new DoubleClickAction(sw));\n-                sw.getActions().addAction(hoverAction);\n-                sw.getActions().addAction(selectAction);\n+    private void rebuildMainLayer() {\n+        mainLayer.removeChildren();\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            FigureWidget figureWidget = new FigureWidget(figure, this);\n+            figureWidget.setVisible(false);\n+            figureWidget.getActions().addAction(ActionFactory.createPopupMenuAction(figureWidget));\n+            figureWidget.getActions().addAction(selectAction);\n+            figureWidget.getActions().addAction(hoverAction);\n+            addObject(figure, figureWidget);\n+            mainLayer.addChild(figureWidget);\n+\n+            for (InputSlot inputSlot : figure.getInputSlots()) {\n+                SlotWidget slotWidget = new InputSlotWidget(inputSlot, this, figureWidget, figureWidget);\n+                slotWidget.getActions().addAction(new DoubleClickAction(slotWidget));\n+                slotWidget.getActions().addAction(hoverAction);\n+                slotWidget.getActions().addAction(selectAction);\n+                addObject(inputSlot, slotWidget);\n@@ -590,6 +594,6 @@\n-            for (OutputSlot s : f.getOutputSlots()) {\n-                SlotWidget sw = new OutputSlotWidget(s, this, w, w);\n-                addObject(s, sw);\n-                sw.getActions().addAction(new DoubleClickAction(sw));\n-                sw.getActions().addAction(hoverAction);\n-                sw.getActions().addAction(selectAction);\n+            for (OutputSlot outputSlot : figure.getOutputSlots()) {\n+                SlotWidget slotWidget = new OutputSlotWidget(outputSlot, this, figureWidget, figureWidget);\n+                slotWidget.getActions().addAction(new DoubleClickAction(slotWidget));\n+                slotWidget.getActions().addAction(hoverAction);\n+                slotWidget.getActions().addAction(selectAction);\n+                addObject(outputSlot, slotWidget);\n@@ -598,0 +602,1 @@\n+    }\n@@ -599,0 +604,2 @@\n+    private void rebuildBlockLayer() {\n+        blockLayer.removeChildren();\n@@ -600,6 +607,6 @@\n-            for (InputBlock bn : d.getInputBlocks()) {\n-                BlockWidget w = new BlockWidget(this, bn);\n-                w.getActions().addAction(new DoubleClickAction(w));\n-                w.setVisible(false);\n-                addObject(bn, w);\n-                blockLayer.addChild(w);\n+            for (InputBlock inputBlock : getModel().getDiagram().getInputBlocks()) {\n+                BlockWidget blockWidget = new BlockWidget(this, inputBlock);\n+                blockWidget.getActions().addAction(new DoubleClickAction(blockWidget));\n+                blockWidget.setVisible(false);\n+                addObject(inputBlock, blockWidget);\n+                blockLayer.addChild(blockWidget);\n@@ -608,0 +615,1 @@\n+    }\n@@ -609,0 +617,11 @@\n+    private void update() {\n+        rebuilding = true;\n+        clearObjects();\n+        updateFigureTexts();\n+        updateFigureWidths();\n+        rebuildMainLayer();\n+        rebuildBlockLayer();\n+        relayout();\n+        setFigureSelection(model.getSelectedFigures());\n+        validateAll();\n+        centerSelectedFigures();\n@@ -610,1 +629,0 @@\n-        updateHiddenNodes(model.getHiddenNodes(), true);\n@@ -613,2 +631,8 @@\n-    private void hiddenNodesChanged() {\n-        updateHiddenNodes(model.getHiddenNodes(), true);\n+    public void validateAll() {\n+        validate();\n+        scrollPane.validate();\n+    }\n+\n+    private void graphChanged() {\n+        update();\n+        centerRootNode();\n@@ -618,2 +642,22 @@\n-    private void selectedNodesChanged() {\n-        updateHiddenNodes(model.getHiddenNodes(), false);\n+    private void centerRootNode() {\n+        if (getModel().getSelectedNodes().isEmpty()) {\n+            Figure rootFigure = getModel().getDiagram().getRootFigure();\n+            if (rootFigure != null) {\n+                int rootId = rootFigure.getInputNode().getId();\n+                if (!getModel().getHiddenNodes().contains(rootId)) {\n+                    FigureWidget rootWidget = getWidget(rootFigure);\n+                    if (rootWidget != null) {\n+                        Rectangle bounds = rootWidget.getBounds();\n+                        if (bounds != null) {\n+                            Point location = rootWidget.getLocation();\n+                            centerRectangle(new Rectangle(location.x, location.y, bounds.width, bounds.height));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void hiddenNodesChanged() {\n+        relayout();\n+        addUndo();\n@@ -645,31 +689,0 @@\n-    private void relayout(Set<Widget> oldVisibleWidgets) {\n-        Diagram diagram = getModel().getDiagram();\n-\n-        HashSet<Figure> figures = new HashSet<>();\n-\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            if (w.isVisible()) {\n-                figures.add(f);\n-            }\n-        }\n-\n-        HashSet<Connection> edges = new HashSet<>();\n-\n-        for (Connection c : diagram.getConnections()) {\n-            if (isVisible(c)) {\n-                edges.add(c);\n-            }\n-        }\n-\n-        if (getModel().getShowSea()) {\n-            doSeaLayout(figures, edges);\n-        } else if (getModel().getShowBlocks()) {\n-            doClusteredLayout(edges);\n-        } else if (getModel().getShowCFG()) {\n-            doCFGLayout(figures, edges);\n-        }\n-\n-        relayoutWithoutLayout(oldVisibleWidgets);\n-    }\n-\n@@ -741,1 +754,1 @@\n-    private Set<Pair<Point, Point>> lineCache = new HashSet<>();\n+\n@@ -753,63 +766,0 @@\n-    private void relayoutWithoutLayout(Set<Widget> oldVisibleWidgets) {\n-        assert oldVisibleWidgets != null;\n-\n-        Diagram diagram = getModel().getDiagram();\n-        connectionLayer.removeChildren();\n-\n-        SceneAnimator connectionAnimator = getSceneAnimator();\n-        boolean doAnimation = shouldAnimate();\n-        if (!doAnimation) {\n-            connectionAnimator = null;\n-        }\n-\n-        Set<Pair<Point, Point>> lastLineCache = lineCache;\n-        lineCache = new HashSet<>();\n-        for (Figure figure : diagram.getFigures()) {\n-            for (OutputSlot outputSlot : figure.getOutputSlots()) {\n-                List<Connection> connectionList = new ArrayList<>(outputSlot.getConnections());\n-                processOutputSlot(lastLineCache, outputSlot, connectionList, 0, null, null, connectionAnimator);\n-            }\n-        }\n-\n-        if (getModel().getShowCFG()) {\n-            for (BlockConnection c : diagram.getBlockConnections()) {\n-                if (isVisible(c)) {\n-                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, connectionAnimator);\n-                }\n-            }\n-        }\n-\n-        SceneAnimator animator = getSceneAnimator();\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            if (w.isVisible()) {\n-                Point p = f.getPosition();\n-                Point p2 = new Point(p.x, p.y);\n-                if (doAnimation && oldVisibleWidgets.contains(w)) {\n-                    animator.animatePreferredLocation(w, p2);\n-                } else {\n-                    w.setPreferredLocation(p2);\n-                    animator.animatePreferredLocation(w, p2);\n-                }\n-            }\n-        }\n-\n-        if (getModel().getShowBlocks() || getModel().getShowCFG()) {\n-            for (Block b : diagram.getBlocks()) {\n-                BlockWidget w = getWidget(b.getInputBlock());\n-                if (w != null && w.isVisible()) {\n-                    Point location = new Point(b.getBounds().x, b.getBounds().y);\n-                    Rectangle r = new Rectangle(location.x, location.y, b.getBounds().width, b.getBounds().height);\n-\n-                    if (doAnimation && oldVisibleWidgets.contains(w)) {\n-                        animator.animatePreferredBounds(w, r);\n-                    } else {\n-                        w.setPreferredBounds(r);\n-                        animator.animatePreferredBounds(w, r);\n-                    }\n-                }\n-            }\n-        }\n-\n-        validate();\n-    }\n@@ -818,1 +768,1 @@\n-    private void processOutputSlot(Set<Pair<Point, Point>> lastLineCache, OutputSlot outputSlot, List<Connection> connections, int controlPointIndex, Point lastPoint, LineWidget predecessor, SceneAnimator animator) {\n+    private void processOutputSlot(OutputSlot outputSlot, List<Connection> connections, int controlPointIndex, Point lastPoint, LineWidget predecessor) {\n@@ -858,1 +808,0 @@\n-\n@@ -860,1 +809,0 @@\n-\n@@ -863,0 +811,2 @@\n+                } else if (c.getStyle() == Connection.ConnectionStyle.INVISIBLE) {\n+                    isVisible = false;\n@@ -864,1 +814,0 @@\n-\n@@ -868,4 +817,0 @@\n-\n-                if (c.getStyle() == Connection.ConnectionStyle.INVISIBLE) {\n-                    isVisible = false;\n-                }\n@@ -876,16 +821,8 @@\n-                Point p1 = new Point(lastPoint.x, lastPoint.y);\n-                Point p2 = new Point(currentPoint.x, currentPoint.y);\n-\n-                Pair<Point, Point> curPair = new Pair<>(p1, p2);\n-                SceneAnimator curAnimator = animator;\n-                if (lastLineCache.contains(curPair)) {\n-                    curAnimator = null;\n-                }\n-                LineWidget lineWidget = new LineWidget(this, outputSlot, connectionList, p1, p2, predecessor, curAnimator, isBold, isDashed);\n-                lineWidget.setVisible(isVisible);\n-                lineCache.add(curPair);\n-\n-                newPredecessor = lineWidget;\n-                connectionLayer.addChild(lineWidget);\n-                addObject(new ConnectionSet(connectionList), lineWidget);\n-                lineWidget.getActions().addAction(hoverAction);\n+                Point src = new Point(lastPoint);\n+                Point dest = new Point(currentPoint);\n+                newPredecessor = new LineWidget(this, outputSlot, connectionList, src, dest, predecessor, isBold, isDashed);\n+                newPredecessor.setVisible(isVisible);\n+\n+                connectionLayer.addChild(newPredecessor);\n+                addObject(new ConnectionSet(connectionList), newPredecessor);\n+                newPredecessor.getActions().addAction(hoverAction);\n@@ -894,1 +831,1 @@\n-            processOutputSlot(lastLineCache, outputSlot, connectionList, controlPointIndex + 1, currentPoint, newPredecessor, animator);\n+            processOutputSlot(outputSlot, connectionList, controlPointIndex + 1, currentPoint, newPredecessor);\n@@ -907,1 +844,1 @@\n-        setSelectedObjects(Collections.emptySet());\n+        clearSelectedNodes();\n@@ -935,5 +872,10 @@\n-    private Set<Object> idSetToObjectSet(Set<Integer> ids) {\n-        Set<Object> result = new HashSet<>();\n-        for (Figure f : getModel().getDiagram().getFigures()) {\n-            if (ids.contains(f.getInputNode().getId())) {\n-                result.add(f);\n+    @Override\n+    public void addSelectedNodes(Collection<InputNode> nodes, boolean showIfHidden) {\n+        Set<Integer> nodeIds = new HashSet<>(model.getSelectedNodes());\n+        for (InputNode inputNode : nodes) {\n+            nodeIds.add(inputNode.getId());\n+        }\n+        Set<Figure> selectedFigures = new HashSet<>();\n+        for (Figure figure : model.getDiagram().getFigures()) {\n+            if (nodeIds.contains(figure.getInputNode().getId())) {\n+                selectedFigures.add(figure);\n@@ -941,0 +883,11 @@\n+        }\n+        setFigureSelection(selectedFigures);\n+        if (showIfHidden) {\n+            model.showFigures(model.getSelectedFigures());\n+        }\n+    }\n+\n+    @Override\n+    public void clearSelectedNodes() {\n+        setSelectedObjects(Collections.emptySet());\n+    }\n@@ -942,3 +895,16 @@\n-            for (Slot s : f.getSlots()) {\n-                if (!Collections.disjoint(s.getSource().getSourceNodesAsSet(), ids)) {\n-                    result.add(s);\n+    @Override\n+    public void centerSelectedFigures() {\n+        Set<Figure> selectedFigures = model.getSelectedFigures();\n+        Rectangle overallRect = null;\n+        for (Figure figure : selectedFigures) {\n+            FigureWidget figureWidget = getWidget(figure);\n+            if (figureWidget != null) {\n+                Rectangle bounds = figureWidget.getBounds();\n+                if (bounds != null) {\n+                    Point location = figureWidget.getLocation();\n+                    Rectangle figureRect = new Rectangle(location.x, location.y, bounds.width, bounds.height);\n+                    if (overallRect == null) {\n+                        overallRect = figureRect;\n+                    } else {\n+                        overallRect = overallRect.union(figureRect);\n+                    }\n@@ -948,1 +914,3 @@\n-        return result;\n+        if (overallRect != null) {\n+            centerRectangle(overallRect);\n+        }\n@@ -954,0 +922,1 @@\n+\n@@ -955,2 +924,6 @@\n-        if (factor < 1.0) {\n-            centredZoom(getZoomFactor() * factor, null);\n+        double zoomFactor = getZoomFactor();\n+        double newZoomFactor = zoomFactor * factor;\n+        if (factor < 1.0 || zoomFactor < 1.0) {\n+            newZoomFactor = Math.min(1.0, newZoomFactor);\n+            centredZoom(newZoomFactor, null);\n+            factor = newZoomFactor \/ zoomFactor;\n@@ -966,1 +939,1 @@\n-        viewRect.x = Math.min(scrollPane.getViewport().getViewSize().width - viewRect.width, viewRect.x);\n+        viewRect.x = Math.min(getView().getBounds().width - viewRect.width, viewRect.x);\n@@ -968,1 +941,1 @@\n-        viewRect.y = Math.min(scrollPane.getViewport().getViewSize().height - viewRect.height, viewRect.y);\n+        viewRect.y = Math.min(getView().getBounds().height - viewRect.height, viewRect.y);\n@@ -972,2 +945,1 @@\n-    @Override\n-    public void setFigureSelection(Set<Figure> list) {\n+    private void setFigureSelection(Set<Figure> list) {\n@@ -1003,4 +975,8 @@\n-    private void updateHiddenNodes(Set<Integer> newHiddenNodes, boolean doRelayout) {\n-\n-        Diagram diagram = getModel().getDiagram();\n-        assert diagram != null;\n+    private void rebuildConnectionLayer() {\n+        connectionLayer.removeChildren();\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            for (OutputSlot outputSlot : figure.getOutputSlots()) {\n+                List<Connection> connectionList = new ArrayList<>(outputSlot.getConnections());\n+                processOutputSlot(outputSlot, connectionList, 0, null, null);\n+            }\n+        }\n@@ -1008,2 +984,8 @@\n-        Set<InputBlock> visibleBlocks = new HashSet<>();\n-        Set<Widget> oldVisibleWidgets = new HashSet<>();\n+        if (getModel().getShowCFG()) {\n+            for (BlockConnection blockConnection : getModel().getDiagram().getBlockConnections()) {\n+                if (isVisible(blockConnection)) {\n+                    processOutputSlot(null, Collections.singletonList(blockConnection), 0, null, null);\n+                }\n+            }\n+        }\n+    }\n@@ -1011,4 +993,6 @@\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            if (w != null && w.isVisible()) {\n-                oldVisibleWidgets.add(w);\n+    private Set<FigureWidget> getVisibleFigureWidgets() {\n+        Set<FigureWidget> visibleFigureWidgets = new HashSet<>();\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            FigureWidget figureWidget = getWidget(figure);\n+            if (figureWidget != null && figureWidget.isVisible()) {\n+                visibleFigureWidgets.add(figureWidget);\n@@ -1017,0 +1001,2 @@\n+        return visibleFigureWidgets;\n+    }\n@@ -1018,0 +1004,2 @@\n+    private Set<BlockWidget> getVisibleBlockWidgets() {\n+        Set<BlockWidget> visibleBlockWidgets = new HashSet<>();\n@@ -1019,4 +1007,4 @@\n-            for (InputBlock b : diagram.getInputBlocks()) {\n-                BlockWidget w = getWidget(b);\n-                if (w.isVisible()) {\n-                    oldVisibleWidgets.add(w);\n+            for (InputBlock inputBlock : getModel().getDiagram().getInputBlocks()) {\n+                BlockWidget blockWidget = getWidget(inputBlock);\n+                if (blockWidget.isVisible()) {\n+                    visibleBlockWidgets.add(blockWidget);\n@@ -1026,0 +1014,2 @@\n+        return visibleBlockWidgets;\n+    }\n@@ -1027,11 +1017,5 @@\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            w.setBoundary(false);\n-            if (newHiddenNodes.contains(f.getInputNode().getId())) {\n-                \/\/ Figure is hidden\n-                w.setVisible(false);\n-            } else {\n-                \/\/ Figure is shown\n-                w.setVisible(true);\n-                visibleBlocks.add(f.getBlock().getInputBlock());\n-            }\n+    private void updateVisibleFigureWidgets() {\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            FigureWidget figureWidget = getWidget(figure);\n+            figureWidget.setBoundary(false);\n+            figureWidget.setVisible(!model.getHiddenNodes().contains(figure.getInputNode().getId()));\n@@ -1039,0 +1023,1 @@\n+    }\n@@ -1040,0 +1025,1 @@\n+    private void updateNodeHull() {\n@@ -1042,8 +1028,7 @@\n-            for (Figure f : diagram.getFigures()) {\n-                FigureWidget w = getWidget(f);\n-                if (!w.isVisible()) {\n-                    Set<Figure> set = new HashSet<>(f.getPredecessorSet());\n-                    set.addAll(f.getSuccessorSet());\n-\n-                    boolean b = false;\n-                    for (Figure neighbor : set) {\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                FigureWidget figureWidget = getWidget(figure);\n+                if (!figureWidget.isVisible()) {\n+                    Set<Figure> neighborSet = new HashSet<>(figure.getPredecessorSet());\n+                    neighborSet.addAll(figure.getSuccessorSet());\n+                    boolean hasVisibleNeighbor = false;\n+                    for (Figure neighbor : neighborSet) {\n@@ -1052,1 +1037,1 @@\n-                            b = true;\n+                            hasVisibleNeighbor = true;\n@@ -1056,5 +1041,3 @@\n-\n-                    if (b) {\n-                        w.setBoundary(true);\n-                        visibleBlocks.add(f.getBlock().getInputBlock());\n-                        boundaries.add(w);\n+                    if (hasVisibleNeighbor) {\n+                        figureWidget.setBoundary(true);\n+                        boundaries.add(figureWidget);\n@@ -1064,5 +1047,2 @@\n-\n-            for (FigureWidget w : boundaries) {\n-                if (w.isBoundary()) {\n-                    w.setVisible(true);\n-                }\n+            for (FigureWidget figureWidget : boundaries) {\n+                figureWidget.setVisible(true);\n@@ -1070,0 +1050,2 @@\n+        } else {\n+            getModel().getSelectedNodes().removeAll(getModel().getHiddenNodes());\n@@ -1071,0 +1053,1 @@\n+    }\n@@ -1072,6 +1055,7 @@\n-        if (getModel().getShowCFG()) {\n-            \/\/ Blockless figures and artificial blocks are hidden in this view.\n-            for (Figure f : diagram.getFigures()) {\n-                if (f.getBlock().getInputBlock().isArtificial()) {\n-                    FigureWidget w = getWidget(f);\n-                    w.setVisible(false);\n+    private void updateVisibleBlockWidgets() {\n+        if (getModel().getShowBlocks() || getModel().getShowCFG()) {\n+            Set<InputBlock> visibleBlocks = new HashSet<>();\n+            for (Figure figure : getModel().getDiagram().getFigures()) {\n+                FigureWidget figureWidget = getWidget(figure);\n+                if (figureWidget.isVisible()) {\n+                    visibleBlocks.add(figure.getBlock().getInputBlock());\n@@ -1080,1 +1064,1 @@\n-            if (getModel().getShowEmptyBlocks()) {\n+            if (getModel().getShowCFG() && getModel().getShowEmptyBlocks()) {\n@@ -1082,1 +1066,56 @@\n-                visibleBlocks.addAll(diagram.getInputBlocks());\n+                visibleBlocks.addAll(getModel().getDiagram().getInputBlocks());\n+            }\n+            if (getModel().getShowCFG()) {\n+                \/\/ Blockless figures and artificial blocks are hidden in this view.\n+                for (Figure figure : getModel().getDiagram().getFigures()) {\n+                    if (figure.getBlock().getInputBlock().isArtificial()) {\n+                        FigureWidget figureWidget = getWidget(figure);\n+                        figureWidget.setVisible(false);\n+                    }\n+                }\n+            }\n+\n+            for (InputBlock inputBlock : getModel().getDiagram().getInputBlocks()) {\n+                \/\/ A block is visible if it is marked as such, except for\n+                \/\/ artificial or null blocks in the CFG view.\n+                boolean visibleAfter = visibleBlocks.contains(inputBlock) &&\n+                        !(getModel().getShowCFG() && (inputBlock.isArtificial() || inputBlock.getNodes().isEmpty()));\n+\n+                BlockWidget blockWidget = getWidget(inputBlock);\n+                blockWidget.setVisible(visibleAfter);\n+            }\n+        }\n+    }\n+\n+    private HashSet<Figure> getVisibleFigures() {\n+        HashSet<Figure> visibleFigures = new HashSet<>();\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            FigureWidget figureWidget = getWidget(figure);\n+            if (figureWidget.isVisible()) {\n+                visibleFigures.add(figure);\n+            }\n+        }\n+        return visibleFigures;\n+    }\n+\n+    private HashSet<Connection> getVisibleConnections() {\n+        HashSet<Connection> visibleConnections = new HashSet<>();\n+        for (Connection connection : getModel().getDiagram().getConnections()) {\n+            if (isVisible(connection)) {\n+                visibleConnections.add(connection);\n+            }\n+        }\n+        return visibleConnections;\n+    }\n+\n+    private void updateFigureWidgetLocations(Set<FigureWidget> oldVisibleFigureWidgets) {\n+        boolean doAnimation = shouldAnimate();\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            FigureWidget figureWidget = getWidget(figure);\n+            if (figureWidget.isVisible()) {\n+                Point location = new Point(figure.getPosition());\n+                if (doAnimation && oldVisibleFigureWidgets.contains(figureWidget)) {\n+                    getSceneAnimator().animatePreferredLocation(figureWidget, location);\n+                } else {\n+                    figureWidget.setPreferredLocation(location);\n+                }\n@@ -1085,0 +1124,1 @@\n+    }\n@@ -1086,0 +1126,1 @@\n+    private void updateBlockWidgetBounds(Set<BlockWidget> oldVisibleBlockWidgets) {\n@@ -1087,1 +1128,14 @@\n-            for (InputBlock b : diagram.getInputBlocks()) {\n+            boolean doAnimation = shouldAnimate();\n+            for (Block block : getModel().getDiagram().getBlocks()) {\n+                BlockWidget blockWidget = getWidget(block.getInputBlock());\n+                if (blockWidget != null && blockWidget.isVisible()) {\n+                    Rectangle bounds = new Rectangle(block.getBounds());\n+                    if (doAnimation && oldVisibleBlockWidgets.contains(blockWidget)) {\n+                        getSceneAnimator().animatePreferredBounds(blockWidget, bounds);\n+                    } else {\n+                        blockWidget.setPreferredBounds(bounds);\n+                    }\n+                }\n+            }\n+        }\n+    }\n@@ -1089,4 +1143,9 @@\n-                \/\/ A block is visible if it is marked as such, except for\n-                \/\/ artificial or null blocks in the CFG view.\n-                boolean visibleAfter = visibleBlocks.contains(b) &&\n-                    !(getModel().getShowCFG() && (b.isArtificial() || b.getNodes().isEmpty()));\n+    private void centerSingleSelectedFigure() {\n+        if (model.getSelectedFigures().size() == 1) {\n+            if (getSceneAnimator().getPreferredLocationAnimator().isRunning()) {\n+                getSceneAnimator().getPreferredLocationAnimator().addAnimatorListener(new AnimatorListener() {\n+                    @Override\n+                    public void animatorStarted(AnimatorEvent animatorEvent) {}\n+\n+                    @Override\n+                    public void animatorReset(AnimatorEvent animatorEvent) {}\n@@ -1094,2 +1153,16 @@\n-                BlockWidget w = getWidget(b);\n-                w.setVisible(visibleAfter);\n+                    @Override\n+                    public void animatorFinished(AnimatorEvent animatorEvent) {\n+                        getSceneAnimator().getPreferredLocationAnimator().removeAnimatorListener(this);\n+                    }\n+\n+                    @Override\n+                    public void animatorPreTick(AnimatorEvent animatorEvent) {}\n+\n+                    @Override\n+                    public void animatorPostTick(AnimatorEvent animatorEvent) {\n+                        validateAll();\n+                        centerSelectedFigures();\n+                    }\n+                });\n+            } else {\n+                centerSelectedFigures();\n@@ -1098,0 +1171,6 @@\n+    }\n+\n+    private void relayout() {\n+        rebuilding = true;\n+        Set<FigureWidget> oldVisibleFigureWidgets = getVisibleFigureWidgets();\n+        Set<BlockWidget> oldVisibleBlockWidgets = getVisibleBlockWidgets();\n@@ -1099,2 +1178,12 @@\n-        if (doRelayout) {\n-            relayout(oldVisibleWidgets);\n+        updateVisibleFigureWidgets();\n+        updateNodeHull();\n+        updateVisibleBlockWidgets();\n+\n+        HashSet<Figure> visibleFigures = getVisibleFigures();\n+        HashSet<Connection> visibleConnections = getVisibleConnections();\n+        if (getModel().getShowSea()) {\n+            doSeaLayout(visibleFigures, visibleConnections);\n+        } else if (getModel().getShowBlocks()) {\n+            doClusteredLayout(visibleConnections);\n+        } else if (getModel().getShowCFG()) {\n+            doCFGLayout(visibleFigures, visibleConnections);\n@@ -1102,1 +1191,8 @@\n-        validate();\n+        rebuildConnectionLayer();\n+\n+        updateFigureWidgetLocations(oldVisibleFigureWidgets);\n+        updateBlockWidgetBounds(oldVisibleBlockWidgets);\n+        validateAll();\n+\n+        centerSingleSelectedFigure();\n+        rebuilding = false;\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":404,"deletions":308,"binary":false,"changes":712,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    private final ChangedListener<FilterChain> filterChainChangedListener = source -> rebuildDiagram();\n+    private final ChangedListener<FilterChain> filterChainChangedListener = source -> filterChanged();\n@@ -121,0 +121,1 @@\n+        this.hideDuplicates = hideDuplicates;\n@@ -132,1 +133,0 @@\n-        diagramChangedEvent.fire();\n@@ -137,1 +137,0 @@\n-        super(Collections.singletonList(\"default\"));\n@@ -205,1 +204,1 @@\n-        this.selectedNodes = nodes;\n+        selectedNodes = nodes;\n@@ -246,1 +245,1 @@\n-        HashSet<Integer> newHiddenNodes = new HashSet<>(hiddenNodes);\n+        boolean somethingChanged = false;\n@@ -248,1 +247,6 @@\n-            newHiddenNodes.remove(f.getInputNode().getId());\n+            if (hiddenNodes.remove(f.getInputNode().getId())) {\n+                somethingChanged = true;\n+            }\n+        }\n+        if (somethingChanged) {\n+            hiddenNodesChangedEvent.fire();\n@@ -250,1 +254,0 @@\n-        setHiddenNodes(newHiddenNodes);\n@@ -270,1 +273,2 @@\n-        this.hiddenNodes = nodes;\n+        hiddenNodes = nodes;\n+        selectedNodes.removeAll(hiddenNodes);\n@@ -278,0 +282,5 @@\n+    private void filterChanged() {\n+        rebuildDiagram();\n+        diagramChangedEvent.fire();\n+    }\n+\n@@ -300,2 +309,0 @@\n-\n-        diagramChangedEvent.fire();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.hotspot.igv.graph.Figure;\n+import com.sun.hotspot.igv.data.InputNode;\n@@ -34,1 +34,0 @@\n-import java.util.Set;\n@@ -80,1 +79,1 @@\n-    void setFigureSelection(Set<Figure> list);\n+    void centerSelectedFigures();\n@@ -82,1 +81,3 @@\n-    void centerFigures(Collection<Figure> list);\n+    void addSelectedNodes(Collection<InputNode> nodes, boolean showIfHidden);\n+\n+    void clearSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    public void addSelectedNodes(Collection<InputNode> nodes) {\n+    public void centerSelectedNodes() {\n@@ -62,1 +62,10 @@\n-            editor.addSelectedNodes(nodes, false);\n+            editor.centerSelectedNodes();\n+            editor.requestActive();\n+        }\n+    }\n+\n+    @Override\n+    public void addSelectedNodes(Collection<InputNode> nodes, boolean showIfHidden) {\n+        if (editor != null && EditorTopComponent.isOpen(editor)) {\n+            editor.addSelectedNodes(nodes, showIfHidden);\n+            editor.requestActive();\n@@ -70,0 +79,1 @@\n+            editor.requestActive();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorInputGraphProvider.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n-import com.sun.hotspot.igv.data.*;\n+import com.sun.hotspot.igv.data.GraphDocument;\n+import com.sun.hotspot.igv.data.Group;\n+import com.sun.hotspot.igv.data.InputGraph;\n+import com.sun.hotspot.igv.data.InputNode;\n@@ -30,2 +33,0 @@\n-import com.sun.hotspot.igv.graph.Diagram;\n-import com.sun.hotspot.igv.graph.Figure;\n@@ -150,1 +151,1 @@\n-        diagramViewModel.getDiagramChangedEvent().addListener(model -> {\n+        diagramViewModel.getGraphChangedEvent().addListener(model -> {\n@@ -252,4 +253,0 @@\n-    private Diagram getDiagram() {\n-        return getModel().getDiagram();\n-    }\n-\n@@ -329,15 +326,6 @@\n-    public void addSelectedNodes(Collection<InputNode> nodes, boolean centerSelection) {\n-        Set<Integer> ids = new HashSet<>(getModel().getSelectedNodes());\n-        for (InputNode n : nodes) {\n-            ids.add(n.getId());\n-        }\n-        Set<Figure> selectedFigures = new HashSet<>();\n-        for (Figure f : getDiagram().getFigures()) {\n-            if (ids.contains(f.getInputNode().getId())) {\n-                selectedFigures.add(f);\n-            }\n-        }\n-        scene.setFigureSelection(selectedFigures);\n-        if (centerSelection) {\n-            scene.centerFigures(selectedFigures);\n-        }\n+    public void addSelectedNodes(Collection<InputNode> nodes, boolean showIfHidden) {\n+        scene.addSelectedNodes(nodes, showIfHidden);\n+    }\n+\n+    public void centerSelectedNodes() {\n+        scene.centerSelectedFigures();\n@@ -347,1 +335,1 @@\n-        scene.setFigureSelection(Collections.emptySet());\n+        scene.clearSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+                            editor.centerSelectedNodes();\n@@ -155,0 +156,1 @@\n+                                editor.centerSelectedNodes();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/NodeQuickSearch.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-            graphProvider.addSelectedNodes(blockWidget.blockNode.getNodes());\n+            graphProvider.addSelectedNodes(blockWidget.blockNode.getNodes(), false);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/BlockWidget.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    public FigureWidget(final Figure f, DiagramScene scene, Widget parent) {\n+    public FigureWidget(final Figure f, DiagramScene scene) {\n@@ -96,1 +96,0 @@\n-        parent.addChild(this);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/FigureWidget.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import org.netbeans.api.visual.animator.SceneAnimator;\n@@ -76,1 +75,1 @@\n-    public LineWidget(DiagramScene scene, OutputSlot s, List<Connection> connections, Point from, Point to, LineWidget predecessor, SceneAnimator animator, boolean isBold, boolean isDashed) {\n+    public LineWidget(DiagramScene scene, OutputSlot s, List<Connection> connections, Point from, Point to, LineWidget predecessor, boolean isBold, boolean isDashed) {\n@@ -120,6 +119,1 @@\n-        if (animator == null) {\n-            this.setBackground(color);\n-        } else {\n-            this.setBackground(Color.WHITE);\n-            animator.animateBackgroundColor(this, color);\n-        }\n+        setBackground(color);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/LineWidget.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}