{"files":[{"patch":"@@ -127,1 +127,1 @@\n-  {\"jdk\/internal\/module\/ArchivedBootLayer\",       \"archivedBootLayer\"},\n+  {ARCHIVED_BOOT_LAYER_CLASS,                     ARCHIVED_BOOT_LAYER_FIELD},\n@@ -1753,0 +1753,22 @@\n+bool HeapShared::is_archived_boot_layer_available(JavaThread* current) {\n+  TempNewSymbol klass_name = SymbolTable::new_symbol(ARCHIVED_BOOT_LAYER_CLASS);\n+  InstanceKlass* k = SystemDictionary::find_instance_klass(current, klass_name, Handle(), Handle());\n+  if (k == nullptr) {\n+    return false;\n+  } else {\n+    TempNewSymbol field_name = SymbolTable::new_symbol(ARCHIVED_BOOT_LAYER_FIELD);\n+    TempNewSymbol field_signature = SymbolTable::new_symbol(\"Ljdk\/internal\/module\/ArchivedBootLayer;\");\n+    fieldDescriptor fd;\n+    if (k->find_field(field_name, field_signature, true, &fd) != nullptr) {\n+      oop m = k->java_mirror();\n+      oop f = m->obj_field(fd.offset());\n+      if (CompressedOops::is_null(f)) {\n+        return false;\n+      }\n+    } else {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+#define ARCHIVED_BOOT_LAYER_CLASS \"jdk\/internal\/module\/ArchivedBootLayer\"\n+#define ARCHIVED_BOOT_LAYER_FIELD \"archivedBootLayer\"\n+\n@@ -163,0 +166,1 @@\n+  static bool is_archived_boot_layer_available(JavaThread* current) NOT_CDS_JAVA_HEAP_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -393,1 +393,0 @@\n-\n@@ -783,0 +782,4 @@\n+  if (!HeapShared::is_archived_boot_layer_available(THREAD)) {\n+    log_info(cds)(\"archivedBootLayer not available, disabling full module graph\");\n+    disable_full_module_graph();\n+  }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-            needResolution = (traceOutput != null) || CDS.isDumpingStaticArchive();\n+            needResolution = (traceOutput != null);\n@@ -475,6 +475,9 @@\n-            ModuleReference mainModuleRef = systemModuleFinder.find(mainModule).orElse(null);\n-            if (mainModuleRef != null) {\n-                URI mainModuleLocation = mainModuleRef.location().orElse(null);\n-                if (mainModuleLocation != null && mainModuleLocation.getScheme().equalsIgnoreCase(\"jrt\")) {\n-                    canArchive = true;\n-                }\n+            String scheme = systemModuleFinder.find(mainModule)\n+                    .stream()\n+                    .map(ModuleReference::location)\n+                    .flatMap(Optional::stream)\n+                    .findAny()\n+                    .map(URI::getScheme)\n+                    .orElse(null);\n+            if (\"jrt\".equalsIgnoreCase(scheme)) {\n+                canArchive = true;\n@@ -491,1 +494,1 @@\n-            if (!hasSplitPackages) {\n+            if (!hasSplitPackages && !hasIncubatorModules) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,3 +38,4 @@\n-        final String moduleOption = \"jdk.compiler\/com.sun.tools.javac.Main\";\n-        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug\";\n-        final String javacVersionPattern = \"javac.[0-9][0-9][-].*\";\n+        final String moduleOption = \"jdk.httpserver\/sun.net.httpserver.simpleserver.Main\";\n+        final String incubatorModule = \"jdk.incubator.vector\";\n+        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,module=trace\";\n+        final String versionPattern = \"java.[0-9][0-9][-].*\";\n@@ -44,0 +45,1 @@\n+        \/\/ dump a base archive with -m jdk.httpserver\n@@ -57,3 +59,3 @@\n-          \/\/ version of the jdk.compiler module, e.g. javac 22-ea\n-          .shouldMatch(javacVersionPattern)\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.compiler\");\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern)\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n@@ -64,1 +66,1 @@\n-            \"-m\", \"jdk.httpserver\/sun.net.httpserver.simpleserver.Main\",\n+            \"-m\", \"jdk.compiler\/com.sun.tools.javac.Main\",\n@@ -67,1 +69,1 @@\n-          .shouldContain(\"Mismatched modules: runtime jdk.httpserver dump time jdk.compiler\");\n+          .shouldContain(\"Mismatched modules: runtime jdk.compiler dump time jdk.httpserver\");\n@@ -74,1 +76,1 @@\n-          .shouldContain(\"Module jdk.compiler specified during dump time but not during runtime\");\n+          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\");\n@@ -91,3 +93,27 @@\n-          .shouldContain(\"Module jdk.compiler specified during runtime but not during dump time\")\n-          \/\/ version of the jdk.compiler module, e.g. javac 22-ea\n-          .shouldMatch(javacVersionPattern);\n+          .shouldContain(\"Module jdk.httpserver specified during runtime but not during dump time\")\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern);\n+\n+        \/\/ dump an archive with an incubator module, -m jdk.incubator.vector\n+        archiveName = TestCommon.getNewArchiveName(\"incubator-module\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-m\", incubatorModule,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          \/\/ module graph won't be archived with an incubator module\n+          .shouldContain(\"archivedBootLayer not available, disabling full module graph\");\n+\n+        \/\/ run with the same incubator module\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-m\", incubatorModule,\n+            \"-version\");\n+        oa.shouldContain(\"full module graph: disabled\")\n+          \/\/ module is not restored from archive\n+          .shouldContain(\"define_module(): creation of module: jdk.incubator.vector\")\n+          .shouldContain(\"WARNING: Using incubator modules: jdk.incubator.vector\")\n+          .shouldContain(\"module jdk.incubator.vector does not have a ModuleMainClass attribute, use -m <module>\/<main-class>\")\n+          .shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":38,"deletions":12,"binary":false,"changes":50,"status":"modified"}]}