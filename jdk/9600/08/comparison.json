{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -36,2 +36,0 @@\n-#include OS_HEADER_INLINE(os)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"os_aix.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,19 @@\n+\/\/ SYSCALL_RISCV_FLUSH_ICACHE is used to flush instruction cache. The \"fence.i\" instruction\n+\/\/ only work on the current hart, so kernel provides the icache flush syscall to flush icache\n+\/\/ on each hart. You can pass a flag to determine a global or local icache flush.\n+static void icache_flush(long int start, long int end)\n+{\n+  const int SYSCALL_RISCV_FLUSH_ICACHE = 259;\n+  register long int __a7 asm (\"a7\") = SYSCALL_RISCV_FLUSH_ICACHE;\n+  register long int __a0 asm (\"a0\") = start;\n+  register long int __a1 asm (\"a1\") = end;\n+  \/\/ the flush can be applied to either all threads or only the current.\n+  \/\/ 0 means a global icache flush, and the icache flush will be applied\n+  \/\/ to other harts concurrently executing.\n+  register long int __a2 asm (\"a2\") = 0;\n+  __asm__ volatile (\"ecall\\n\\t\"\n+                    : \"+r\" (__a0)\n+                    : \"r\" (__a0), \"r\" (__a1), \"r\" (__a2), \"r\" (__a7)\n+                    : \"memory\");\n+}\n+\n@@ -33,1 +52,1 @@\n-  os::icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));\n+  icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -33,2 +33,0 @@\n-#include OS_HEADER_INLINE(os)\n-\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_32.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -32,3 +33,0 @@\n-\/\/ The following header contains the implementations of rdtsc()\n-#include OS_CPU_HEADER_INLINE(os)\n-\n","filename":"src\/hotspot\/cpu\/x86\/rdtsc_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -42,2 +42,0 @@\n-#include OS_HEADER_INLINE(os)\n-\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-\/\/ Information about the protection of the page at address '0' on this os.\n-static bool zero_page_read_protected() { return false; }\n+#include \"runtime\/os.hpp\"\n@@ -34,1 +33,1 @@\n-class Aix {\n+class os::Aix {\n@@ -180,0 +179,3 @@\n+\n+  static bool platform_print_native_stack(outputStream* st, void* context, char *buf, int buf_size);\n+  static void* resolve_function_descriptor(void* p);\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/\/ os_aix.hpp included by os.hpp\n+#include \"os_aix.hpp\"\n@@ -34,0 +34,5 @@\n+\/\/ Information about the protection of the page at address '0' on this os.\n+inline bool os::zero_page_read_protected() {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-\/\/ Bsd_OS defines the interface to Bsd operating systems\n+#include \"runtime\/os.hpp\"\n@@ -30,2 +30,1 @@\n-\/\/ Information about the protection of the page at address '0' on this os.\n-static bool zero_page_read_protected() { return true; }\n+\/\/ Bsd_OS defines the interface to Bsd operating systems\n@@ -33,1 +32,1 @@\n-class Bsd {\n+class os::Bsd {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-\/\/ os_bsd.hpp included by os.hpp\n+#include \"os_bsd.hpp\"\n@@ -33,0 +33,4 @@\n+inline bool os::zero_page_read_protected() {\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.inline.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"os_linux.hpp\"\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"os_linux.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zNUMA_linux.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"os_linux.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"os_linux.hpp\"\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4458,0 +4458,83 @@\n+#if defined(IA32) && !defined(ZERO)\n+\/*\n+ * Work-around (execute code at a high address) for broken NX emulation using CS limit,\n+ * Red Hat patch \"Exec-Shield\" (IA32 only).\n+ *\n+ * Map and execute at a high VA to prevent CS lazy updates race with SMP MM\n+ * invalidation.Further code generation by the JVM will no longer cause CS limit\n+ * updates.\n+ *\n+ * Affects IA32: RHEL 5 & 6, Ubuntu 10.04 (LTS), 10.10, 11.04, 11.10, 12.04.\n+ * @see JDK-8023956\n+ *\/\n+static void workaround_expand_exec_shield_cs_limit() {\n+  assert(os::Linux::initial_thread_stack_bottom() != NULL, \"sanity\");\n+  size_t page_size = os::vm_page_size();\n+\n+  \/*\n+   * JDK-8197429\n+   *\n+   * Expand the stack mapping to the end of the initial stack before\n+   * attempting to install the codebuf.  This is needed because newer\n+   * Linux kernels impose a distance of a megabyte between stack\n+   * memory and other memory regions.  If we try to install the\n+   * codebuf before expanding the stack the installation will appear\n+   * to succeed but we'll get a segfault later if we expand the stack\n+   * in Java code.\n+   *\n+   *\/\n+  if (os::is_primordial_thread()) {\n+    address limit = os::Linux::initial_thread_stack_bottom();\n+    if (! DisablePrimordialThreadGuardPages) {\n+      limit += StackOverflow::stack_red_zone_size() +\n+               StackOverflow::stack_yellow_zone_size();\n+    }\n+    os::Linux::expand_stack_to(limit);\n+  }\n+\n+  \/*\n+   * Take the highest VA the OS will give us and exec\n+   *\n+   * Although using -(pagesz) as mmap hint works on newer kernel as you would\n+   * think, older variants affected by this work-around don't (search forward only).\n+   *\n+   * On the affected distributions, we understand the memory layout to be:\n+   *\n+   *   TASK_LIMIT= 3G, main stack base close to TASK_LIMT.\n+   *\n+   * A few pages south main stack will do it.\n+   *\n+   * If we are embedded in an app other than launcher (initial != main stack),\n+   * we don't have much control or understanding of the address space, just let it slide.\n+   *\/\n+  char* hint = (char*)(os::Linux::initial_thread_stack_bottom() -\n+                       (StackOverflow::stack_guard_zone_size() + page_size));\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+\n+  if (codebuf == NULL) {\n+    \/\/ JDK-8197429: There may be a stack gap of one megabyte between\n+    \/\/ the limit of the stack and the nearest memory region: this is a\n+    \/\/ Linux kernel workaround for CVE-2017-1000364.  If we failed to\n+    \/\/ map our codebuf, try again at an address one megabyte lower.\n+    hint -= 1 * M;\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+  }\n+\n+  if ((codebuf == NULL) || (!os::commit_memory(codebuf, page_size, true))) {\n+    return; \/\/ No matter, we tried, best effort.\n+  }\n+\n+  MemTracker::record_virtual_memory_type((address)codebuf, mtInternal);\n+\n+  log_info(os)(\"[CS limit NX emulation work-around, exec code at: %p]\", codebuf);\n+\n+  \/\/ Some code to exec: the 'ret' instruction\n+  codebuf[0] = 0xC3;\n+\n+  \/\/ Call the code in the codebuf\n+  __asm__ volatile(\"call *%0\" : : \"r\"(codebuf));\n+\n+  \/\/ keep the page mapped so CS limit isn't reduced.\n+}\n+#endif \/\/ defined(IA32) && !defined(ZERO)\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":83,"deletions":0,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ Linux_OS defines the interface to Linux operating systems\n+#include \"runtime\/os.hpp\"\n@@ -30,2 +30,1 @@\n-\/\/ Information about the protection of the page at address '0' on this os.\n-static bool zero_page_read_protected() { return true; }\n+\/\/ os::Linux defines the interface to Linux operating systems\n@@ -33,1 +32,1 @@\n-class Linux {\n+class os::Linux {\n@@ -160,0 +159,1 @@\n+  static void expand_stack_to(address bottom);\n@@ -201,1 +201,0 @@\n-  static void expand_stack_to(address bottom);\n@@ -431,0 +430,2 @@\n+\n+  void* resolve_function_descriptor(void* p);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-\/\/ os_linux.hpp included by os.hpp\n+#include \"os_linux.hpp\"\n@@ -33,0 +33,4 @@\n+inline bool os::zero_page_read_protected() {\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.inline.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"os_linux.hpp\"\n","filename":"src\/hotspot\/os\/linux\/trimCHeapDCmd.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#ifdef LINUX\n@@ -29,1 +28,0 @@\n-#endif\n@@ -54,0 +52,3 @@\n+#ifdef LINUX\n+#include \"os_linux.hpp\"\n+#endif\n@@ -557,1 +558,1 @@\n-void os::Posix::print_user_info(outputStream* st) {\n+void os::print_user_info(outputStream* st) {\n@@ -571,1 +572,1 @@\n-  print_umask(st, umsk);\n+  os::Posix::print_umask(st, umsk);\n@@ -577,1 +578,1 @@\n-void os::Posix::print_active_locale(outputStream* st) {\n+void os::print_active_locale(outputStream* st) {\n@@ -1131,2 +1132,2 @@\n-#if !defined(AIX) && !defined(__APPLE__)\n-    \/\/ bsd and aix don't have this\n+#ifdef LINUX\n+    \/\/ This only works with os::Linux::manually_expand_stack()\n@@ -1150,1 +1151,1 @@\n-#endif \/\/ AIX or BSD\n+#endif \/\/ LINUX\n@@ -2013,0 +2014,5 @@\n+\n+const char* os::file_separator() { return \"\/\"; }\n+const char* os::line_separator() { return \"\\n\"; }\n+const char* os::path_separator() { return \":\"; }\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+#include \"runtime\/os.hpp\"\n+\n+#include <errno.h>\n+\n@@ -37,4 +41,5 @@\n-\/\/ File conventions\n-static const char* file_separator() { return \"\/\"; }\n-static const char* line_separator() { return \"\\n\"; }\n-static const char* path_separator() { return \":\"; }\n+\/\/ macros for restartable system calls\n+\n+#define RESTARTABLE(_cmd, _result) do { \\\n+    _result = _cmd; \\\n+  } while(((int)_result == OS_ERR) && (errno == EINTR))\n@@ -42,1 +47,7 @@\n-class Posix {\n+#define RESTARTABLE_RETURN_INT(_cmd) do { \\\n+  int _result; \\\n+  RESTARTABLE(_cmd, _result); \\\n+  return _result; \\\n+} while(false)\n+\n+class os::Posix {\n@@ -84,2 +95,0 @@\n-  static void print_user_info(outputStream* st);\n-\n@@ -95,2 +104,0 @@\n-\n-  static void print_active_locale(outputStream* st);\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ os_posix.hpp included by os.hpp\n+#include \"os_posix.hpp\"\n@@ -37,12 +37,0 @@\n-\/\/ macros for restartable system calls\n-\n-#define RESTARTABLE(_cmd, _result) do { \\\n-    _result = _cmd; \\\n-  } while(((int)_result == OS_ERR) && (errno == EINTR))\n-\n-#define RESTARTABLE_RETURN_INT(_cmd) do { \\\n-  int _result; \\\n-  RESTARTABLE(_cmd, _result); \\\n-  return _result; \\\n-} while(false)\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.inline.hpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+#if defined(LINUX)\n+#include \"os_linux.hpp\"\n+#endif\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/posix\/safefetch_static_posix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"os_windows.hpp\"\n","filename":"src\/hotspot\/os\/windows\/iphlp_interface.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5941,0 +5941,13 @@\n+\n+\/\/ File conventions\n+const char* os::file_separator() { return \"\\\\\"; }\n+const char* os::line_separator() { return \"\\r\\n\"; }\n+const char* os::path_separator() { return \";\"; }\n+\n+void os::print_user_info(outputStream* st) {\n+  \/\/ not implemented yet\n+}\n+\n+void os::print_active_locale(outputStream* st) {\n+  \/\/ not implemented yet\n+}\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,4 +27,0 @@\n-\/\/ Win32_OS defines the interface to windows operating systems\n-\n-\/\/ strtok_s is the Windows thread-safe equivalent of POSIX strtok_r\n-#define strtok_r strtok_s\n@@ -32,2 +28,1 @@\n-#define S_ISCHR(mode)   (((mode) & _S_IFCHR) == _S_IFCHR)\n-#define S_ISFIFO(mode)  (((mode) & _S_IFIFO) == _S_IFIFO)\n+#include \"runtime\/os.hpp\"\n@@ -35,2 +30,1 @@\n-\/\/ Information about the protection of the page at address '0' on this os.\n-static bool zero_page_read_protected() { return true; }\n+\/\/ Win32_OS defines the interface to windows operating systems\n@@ -38,4 +32,2 @@\n-\/\/ File conventions\n-static const char* file_separator() { return \"\\\\\"; }\n-static const char* line_separator() { return \"\\r\\n\"; }\n-static const char* path_separator() { return \";\"; }\n+class outputStream;\n+class Thread;\n@@ -43,1 +35,1 @@\n-class win32 {\n+class os::win32 {\n@@ -45,1 +37,1 @@\n-  friend unsigned __stdcall thread_native_entry(class Thread*);\n+  friend unsigned __stdcall thread_native_entry(Thread*);\n@@ -59,0 +51,5 @@\n+  static bool platform_print_native_stack(outputStream* st, const void* context,\n+                                          char *buf, int buf_size);\n+\n+  static bool register_code_area(char *low, char *high);\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ os_windows.hpp included by os.hpp\n+#include \"os_windows.hpp\"\n@@ -34,0 +34,4 @@\n+inline bool os::zero_page_read_protected() {\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"os_windows.hpp\"\n","filename":"src\/hotspot\/os\/windows\/pdh_interface.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+#include \"os_aix.hpp\"\n+#include \"os_posix.hpp\"\n@@ -511,1 +513,1 @@\n-bool os::platform_print_native_stack(outputStream* st, void* context, char *buf, int buf_size) {\n+bool os::Aix::platform_print_native_stack(outputStream* st, void* context, char *buf, int buf_size) {\n@@ -517,1 +519,1 @@\n-void* os::resolve_function_descriptor(void* p) {\n+void* os::Aix::resolve_function_descriptor(void* p) {\n@@ -520,0 +522,2 @@\n+\n+void os::setup_fpu() {}\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_AIX_PPC_OS_AIX_PPC_HPP\n-#define OS_CPU_AIX_PPC_OS_AIX_PPC_HPP\n-\n-  static void setup_fpu() {}\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-  #define PLATFORM_PRINT_NATIVE_STACK 1\n-  static bool platform_print_native_stack(outputStream* st, void* context,\n-                                          char *buf, int buf_size);\n-\n-  #define HAVE_FUNCTION_DESCRIPTORS 1\n-  static void* resolve_function_descriptor(void* p);\n-\n-#endif \/\/ OS_CPU_AIX_PPC_OS_AIX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.hpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_AIX_PPC_OS_AIX_PPC_INLINE_HPP\n+#define OS_CPU_AIX_PPC_OS_AIX_PPC_INLINE_HPP\n+\n+#include \"os_aix.hpp\"\n+\n+#define HAVE_PLATFORM_PRINT_NATIVE_STACK 1\n+inline bool os::platform_print_native_stack(outputStream* st, const void* context,\n+                                            char *buf, int buf_size) {\n+  return os::Aix::platform_print_native_stack(st, context, buf, buf_size);\n+}\n+\n+#define HAVE_FUNCTION_DESCRIPTORS 1\n+inline void* os::resolve_function_descriptor(void* p) {\n+  return os::Aix::resolve_function_descriptor(p);\n+}\n+#endif \/\/ OS_CPU_AIX_PPC_OS_AIX_PPC_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.inline.hpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -38,0 +38,2 @@\n+#include \"os_bsd.hpp\"\n+#include \"os_posix.hpp\"\n@@ -340,4 +342,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_HPP\n-#define OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_HPP\n-\n-  static void setup_fpu();\n-\n-  static bool is_allocatable(size_t bytes);\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_INLINE_HPP\n+#define OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_INLINE_HPP\n+\n+#endif \/\/ OS_CPU_BSD_AARCH64_OS_BSD_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -35,0 +35,2 @@\n+#include \"os_bsd.hpp\"\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_X86_OS_BSD_X86_HPP\n-#define OS_CPU_BSD_X86_OS_BSD_X86_HPP\n-\n-\/\/ Core region alignment is 16K to be able to run binaries built on MacOS x64\n-\/\/ on MacOS aarch64.\n-#if defined(__APPLE__) && defined(COMPATIBLE_CDS_ALIGNMENT)\n-#define CDS_CORE_REGION_ALIGNMENT (16*K)\n-#endif\n-\n-  static void setup_fpu();\n-  static bool supports_sse();\n-  static juint cpu_microcode_revision();\n-\n-  static jlong rdtsc();\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_BSD_X86_OS_BSD_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,10 @@\n+#if defined(__APPLE__) && defined(COMPATIBLE_CDS_ALIGNMENT)\n+#define HAVE_CDS_CORE_REGION_ALIGNMENT 1\n+inline size_t os::cds_core_region_alignment() {\n+  \/\/ Core region alignment is 16K to be able to run binaries built on MacOS x64\n+  \/\/ on MacOS aarch64.\n+  return (16*K);\n+}\n+#endif\n+\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.inline.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+#include \"os_bsd.hpp\"\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright 2007, 2008, 2010 Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_BSD_ZERO_OS_BSD_ZERO_HPP\n-#define OS_CPU_BSD_ZERO_OS_BSD_ZERO_HPP\n-\n-  static void setup_fpu() {}\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_BSD_ZERO_OS_BSD_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.hpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_BSD_ZERO_OS_BSD_ZERO_INLINE_HPP\n+#define OS_CPU_BSD_ZERO_OS_BSD_ZERO_INLINE_HPP\n+\n+#endif \/\/ OS_CPU_BSD_ZERO_OS_BSD_ZERO_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -36,0 +36,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_HPP\n-#define OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_HPP\n-\n-#if defined(COMPATIBLE_CDS_ALIGNMENT)\n-#define CDS_CORE_REGION_ALIGNMENT (64*K)\n-#endif\n-\n-  static void setup_fpu();\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_INLINE_HPP\n+#define OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_INLINE_HPP\n+\n+#include \"runtime\/os.hpp\"\n+\n+#if defined(COMPATIBLE_CDS_ALIGNMENT)\n+#define HAVE_CDS_CORE_REGION_ALIGNMENT 1\n+inline size_t os::cds_core_region_alignment() {\n+  return (64*K);\n+}\n+#endif\n+\n+#endif \/\/ OS_CPU_LINUX_AARCH64_OS_LINUX_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.inline.hpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -34,0 +34,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ARM_OS_LINUX_ARM_HPP\n-#define OS_CPU_LINUX_ARM_OS_LINUX_ARM_HPP\n-\n-  static void setup_fpu();\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_LINUX_ARM_OS_LINUX_ARM_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.hpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_ARM_OS_LINUX_ARM_INLINE_HPP\n+#define OS_CPU_LINUX_ARM_OS_LINUX_ARM_INLINE_HPP\n+\n+\n+#endif \/\/ OS_CPU_LINUX_ARM_OS_LINUX_ARM_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.inline.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -37,0 +37,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n@@ -46,0 +48,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -518,1 +521,1 @@\n-void* os::resolve_function_descriptor(void* p) {\n+void* os::Linux::resolve_function_descriptor(void* p) {\n@@ -522,0 +525,2 @@\n+\n+void os::setup_fpu() {}\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_PPC_OS_LINUX_PPC_HPP\n-#define OS_CPU_LINUX_PPC_OS_LINUX_PPC_HPP\n-\n-  static void setup_fpu() {}\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#if !defined(ABI_ELFv2)\n-  \/\/ ppc (not ppcle) has function descriptors\n-  #define HAVE_FUNCTION_DESCRIPTORS 1\n-  static void* resolve_function_descriptor(void* p);\n-#endif\n-\n-#endif \/\/ OS_CPU_LINUX_PPC_OS_LINUX_PPC_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.hpp","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_PPC_OS_LINUX_PPC_INLINE_HPP\n+#define OS_CPU_LINUX_PPC_OS_LINUX_PPC_INLINE_HPP\n+\n+#include \"os_linux.hpp\"\n+\n+#if !defined(ABI_ELFv2)\n+  \/\/ ppc (not ppcle) has function descriptors\n+#define HAVE_FUNCTION_DESCRIPTORS 1\n+inline void* os::resolve_function_descriptor(void* p) {\n+  return os::Linux::resolve_function_descriptor(p);\n+}\n+#endif\n+\n+#endif \/\/ OS_CPU_LINUX_PPC_OS_LINUX_PPC_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.inline.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -36,0 +36,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_RISCV_VM_OS_LINUX_RISCV_HPP\n-#define OS_CPU_LINUX_RISCV_VM_OS_LINUX_RISCV_HPP\n-\n-  static void setup_fpu();\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-  \/\/ SYSCALL_RISCV_FLUSH_ICACHE is used to flush instruction cache. The \"fence.i\" instruction\n-  \/\/ only work on the current hart, so kernel provides the icache flush syscall to flush icache\n-  \/\/ on each hart. You can pass a flag to determine a global or local icache flush.\n-  static void icache_flush(long int start, long int end)\n-  {\n-    const int SYSCALL_RISCV_FLUSH_ICACHE = 259;\n-    register long int __a7 asm (\"a7\") = SYSCALL_RISCV_FLUSH_ICACHE;\n-    register long int __a0 asm (\"a0\") = start;\n-    register long int __a1 asm (\"a1\") = end;\n-    \/\/ the flush can be applied to either all threads or only the current.\n-    \/\/ 0 means a global icache flush, and the icache flush will be applied\n-    \/\/ to other harts concurrently executing.\n-    register long int __a2 asm (\"a2\") = 0;\n-    __asm__ volatile (\"ecall\\n\\t\"\n-                      : \"+r\" (__a0)\n-                      : \"r\" (__a0), \"r\" (__a1), \"r\" (__a2), \"r\" (__a7)\n-                      : \"memory\");\n-  }\n-\n-#endif \/\/ OS_CPU_LINUX_RISCV_VM_OS_LINUX_RISCV_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.hpp","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_RISCV_OS_LINUX_RISCV_INLINE_HPP\n+#define OS_CPU_LINUX_RISCV_OS_LINUX_RISCV_INLINE_HPP\n+\n+#endif \/\/ OS_CPU_LINUX_RISCV_OS_LINUX_RISCV_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -39,0 +39,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n@@ -480,0 +482,2 @@\n+\n+void os::setup_fpu() {}\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_S390_OS_LINUX_S390_HPP\n-#define OS_CPU_LINUX_S390_OS_LINUX_S390_HPP\n-\n-  static void setup_fpu() {}\n-\n-  \/\/ Used to register dynamic code cache area with the OS.\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-#endif \/\/ OS_CPU_LINUX_S390_OS_LINUX_S390_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.hpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_S390_OS_LINUX_S390_INLINE_HPP\n+#define OS_CPU_LINUX_S390_OS_LINUX_S390_INLINE_HPP\n+\n+#endif \/\/ OS_CPU_LINUX_S390_OS_LINUX_S390_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -35,0 +35,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n@@ -654,77 +656,0 @@\n-\n-\/*\n- * IA32 only: execute code at a high address in case buggy NX emulation is present. I.e. avoid CS limit\n- * updates (JDK-8023956).\n- *\/\n-void os::workaround_expand_exec_shield_cs_limit() {\n-#if defined(IA32)\n-  assert(Linux::initial_thread_stack_bottom() != NULL, \"sanity\");\n-  size_t page_size = os::vm_page_size();\n-\n-  \/*\n-   * JDK-8197429\n-   *\n-   * Expand the stack mapping to the end of the initial stack before\n-   * attempting to install the codebuf.  This is needed because newer\n-   * Linux kernels impose a distance of a megabyte between stack\n-   * memory and other memory regions.  If we try to install the\n-   * codebuf before expanding the stack the installation will appear\n-   * to succeed but we'll get a segfault later if we expand the stack\n-   * in Java code.\n-   *\n-   *\/\n-  if (os::is_primordial_thread()) {\n-    address limit = Linux::initial_thread_stack_bottom();\n-    if (! DisablePrimordialThreadGuardPages) {\n-      limit += StackOverflow::stack_red_zone_size() +\n-               StackOverflow::stack_yellow_zone_size();\n-    }\n-    os::Linux::expand_stack_to(limit);\n-  }\n-\n-  \/*\n-   * Take the highest VA the OS will give us and exec\n-   *\n-   * Although using -(pagesz) as mmap hint works on newer kernel as you would\n-   * think, older variants affected by this work-around don't (search forward only).\n-   *\n-   * On the affected distributions, we understand the memory layout to be:\n-   *\n-   *   TASK_LIMIT= 3G, main stack base close to TASK_LIMT.\n-   *\n-   * A few pages south main stack will do it.\n-   *\n-   * If we are embedded in an app other than launcher (initial != main stack),\n-   * we don't have much control or understanding of the address space, just let it slide.\n-   *\/\n-  char* hint = (char*)(Linux::initial_thread_stack_bottom() -\n-                       (StackOverflow::stack_guard_zone_size() + page_size));\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n-\n-  if (codebuf == NULL) {\n-    \/\/ JDK-8197429: There may be a stack gap of one megabyte between\n-    \/\/ the limit of the stack and the nearest memory region: this is a\n-    \/\/ Linux kernel workaround for CVE-2017-1000364.  If we failed to\n-    \/\/ map our codebuf, try again at an address one megabyte lower.\n-    hint -= 1 * M;\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n-  }\n-\n-  if ((codebuf == NULL) || (!os::commit_memory(codebuf, page_size, true))) {\n-    return; \/\/ No matter, we tried, best effort.\n-  }\n-\n-  MemTracker::record_virtual_memory_type((address)codebuf, mtInternal);\n-\n-  log_info(os)(\"[CS limit NX emulation work-around, exec code at: %p]\", codebuf);\n-\n-  \/\/ Some code to exec: the 'ret' instruction\n-  codebuf[0] = 0xC3;\n-\n-  \/\/ Call the code in the codebuf\n-  __asm__ volatile(\"call *%0\" : : \"r\"(codebuf));\n-\n-  \/\/ keep the page mapped so CS limit isn't reduced.\n-#endif\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":2,"deletions":77,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_X86_OS_LINUX_X86_HPP\n-#define OS_CPU_LINUX_X86_OS_LINUX_X86_HPP\n-\n-  static void setup_fpu();\n-  static bool supports_sse();\n-  static juint cpu_microcode_revision();\n-\n-  static jlong rdtsc();\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-  \/*\n-   * Work-around for broken NX emulation using CS limit, Red Hat patch \"Exec-Shield\"\n-   * (IA32 only).\n-   *\n-   * Map and execute at a high VA to prevent CS lazy updates race with SMP MM\n-   * invalidation.Further code generation by the JVM will no longer cause CS limit\n-   * updates.\n-   *\n-   * Affects IA32: RHEL 5 & 6, Ubuntu 10.04 (LTS), 10.10, 11.04, 11.10, 12.04.\n-   * @see JDK-8023956\n-   *\/\n-  static void workaround_expand_exec_shield_cs_limit();\n-\n-#endif \/\/ OS_CPU_LINUX_X86_OS_LINUX_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.hpp","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -36,0 +36,2 @@\n+#include \"os_linux.hpp\"\n+#include \"os_posix.hpp\"\n@@ -401,0 +403,2 @@\n+\n+void os::setup_fpu() {}\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright 2007, 2008, 2010, 2018, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_HPP\n-#define OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_HPP\n-\n-  static void setup_fpu() {}\n-\n-  \/\/ Used to register dynamic code cache area with the OS\n-  \/\/ Note: Currently only used in 64 bit Windows implementations\n-  static bool register_code_area(char *low, char *high) { return true; }\n-\n-  \/*\n-   * Work-around for broken NX emulation using CS limit, Red Hat patch \"Exec-Shield\"\n-   * (IA32 only).\n-   *\n-   * Map and execute at a high VA to prevent CS lazy updates race with SMP MM\n-   * invalidation.Further code generation by the JVM will no longer cause CS limit\n-   * updates.\n-   *\n-   * Affects IA32: RHEL 5 & 6, Ubuntu 10.04 (LTS), 10.10, 11.04, 11.10, 12.04.\n-   * @see JDK-8023956\n-   *\/\n-  static void workaround_expand_exec_shield_cs_limit();\n-\n-#endif \/\/ OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.hpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_INLINE_HPP\n+#define OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_INLINE_HPP\n+\n+\n+\n+#endif \/\/ OS_CPU_LINUX_ZERO_OS_LINUX_ZERO_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.inline.hpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"os_windows.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n-#define OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n-\n-  static void setup_fpu();\n-  static bool supports_sse();\n-\n-  static bool      register_code_area(char *low, char *high) {\n-    \/\/ Using Vectored Exception Handling\n-    return true;\n-  }\n-\n-#endif \/\/ OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.hpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -30,0 +30,5 @@\n+inline bool os::register_code_area(char *low, char *high) {\n+  \/\/ Using Vectored Exception Handling\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"os_windows.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/assembler_windows_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"os_windows.hpp\"\n@@ -44,0 +45,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -168,1 +170,1 @@\n-bool os::register_code_area(char *low, char *high) {\n+bool os::win32::register_code_area(char *low, char *high) {\n@@ -212,1 +214,1 @@\n-#ifdef AMD64\n+#ifdef HAVE_PLATFORM_PRINT_NATIVE_STACK\n@@ -224,2 +226,2 @@\n-bool os::platform_print_native_stack(outputStream* st, const void* context,\n-                                     char *buf, int buf_size)\n+bool os::win32::platform_print_native_stack(outputStream* st, const void* context,\n+                                            char *buf, int buf_size)\n@@ -296,1 +298,1 @@\n-#endif \/\/ AMD64\n+#endif \/\/ HAVE_PLATFORM_PRINT_NATIVE_STACK\n@@ -561,0 +563,4 @@\n+\n+bool os::supports_sse() {\n+  return true;\n+}\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_CPU_WINDOWS_X86_OS_WINDOWS_X86_HPP\n-#define OS_CPU_WINDOWS_X86_OS_WINDOWS_X86_HPP\n-\n-  \/\/\n-  \/\/ NOTE: we are back in class os here, not win32\n-  \/\/\n-\n-  static void setup_fpu();\n-  static bool supports_sse() { return true; }\n-  static juint cpu_microcode_revision();\n-\n-  static jlong rdtsc();\n-\n-  static bool      register_code_area(char *low, char *high);\n-\n-#ifdef AMD64\n-#define PLATFORM_PRINT_NATIVE_STACK 1\n-static bool platform_print_native_stack(outputStream* st, const void* context,\n-                                        char *buf, int buf_size);\n-#endif\n-\n-#endif \/\/ OS_CPU_WINDOWS_X86_OS_WINDOWS_X86_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.hpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,9 @@\n+#include \"os_windows.hpp\"\n+\n+#ifdef AMD64\n+#define HAVE_PLATFORM_PRINT_NATIVE_STACK 1\n+inline bool os::platform_print_native_stack(outputStream* st, const void* context,\n+                                     char *buf, int buf_size) {\n+  return os::win32::platform_print_native_stack(st, context, buf, buf_size);\n+}\n+#endif\n@@ -38,0 +47,4 @@\n+inline bool os::register_code_area(char *low, char *high) {\n+  return os::win32::register_code_area(low, high);\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.inline.hpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -129,2 +129,3 @@\n-\/\/ os::vm_allocation_granularity() is usually 4K for most OSes. However, on Linux\/aarch64,\n-\/\/ it can be either 4K or 64K and on Macosx-arm it is 16K. To generate archives that are\n+\/\/ os::vm_allocation_granularity() is usually 4K for most OSes. However, some platforms\n+\/\/ such as linux-aarch64 and macos-x64 ...\n+\/\/ it can be either 4K or 64K and on macos-aarch64 it is 16K. To generate archives that are\n@@ -134,3 +135,3 @@\n-\/\/ Upon successful configuration, the compactible alignment then can be defined as in:\n-\/\/   os_linux_aarch64.hpp\n-\/\/ which is the highest page size configured on the platform.\n+\/\/ Upon successful configuration, the compactible alignment then can be defined in:\n+\/\/   os_linux_aarch64.cpp\n+\/\/   os_bsd_x86.cpp\n@@ -138,5 +139,1 @@\n-#if defined(CDS_CORE_REGION_ALIGNMENT)\n-  return CDS_CORE_REGION_ALIGNMENT;\n-#else\n-  return (size_t)os::vm_allocation_granularity();\n-#endif \/\/ CDS_CORE_REGION_ALIGNMENT\n+  return os::cds_core_region_alignment();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -32,2 +32,0 @@\n-#include OS_HEADER_INLINE(os)\n-\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTime.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,1 @@\n-#include \"runtime\/os.hpp\"\n-\n-#include OS_HEADER_INLINE(os)\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTimeConverter.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,67 @@\n-\/\/ os defines the interface to operating system; this includes traditional\n-\/\/ OS services (time, I\/O) as well as other functionality with system-\n-\/\/ dependent code.\n+\/\/ Rules for using and implementing methods declared in the \"os\" class\n+\/\/ ===================================================================\n+\/\/\n+\/\/ The \"os\" class defines a number of the interfaces for porting HotSpot\n+\/\/ to different operating systems. For example, I\/O, memory, timing, etc.\n+\/\/ Note that additional classes such as Semaphore, Mutex, etc., are used for\n+\/\/ porting specific groups of features.\n+\/\/\n+\/\/ Structure of os*.{cpp, hpp} files\n+\/\/\n+\/\/ - os.hpp\n+\/\/\n+\/\/   (This file) declares the entire API of the \"os\" class.\n+\/\/\n+\/\/ - os.inline.hpp\n+\/\/\n+\/\/   To use any of the inline methods declared in the \"os\" class, this\n+\/\/   header file must be included.\n+\/\/\n+\/\/ - src\/hotspot\/os\/<os>\/os_<os>.hpp\n+\/\/ - src\/hotspot\/os\/posix\/os_posix.hpp\n+\/\/\n+\/\/   These headers declare APIs that should be used only within the\n+\/\/   platform-specific source files for that particular OS.\n+\/\/\n+\/\/   For example, os_linux.hpp declares the os::Linux class, which provides\n+\/\/   many methods that can be used by files under os\/linux\/ and os_cpu\/linux_*\/\n+\/\/\n+\/\/   os_posix.hpp can be used by platform-specific files for POSIX-like\n+\/\/   OSes such as aix, bsd and linux.\n+\/\/\n+\/\/   Platform-independent source files should not include these header files\n+\/\/   (although sadly there are some rare exceptions ...)\n+\/\/\n+\/\/ - os.cpp\n+\/\/\n+\/\/   Platform-independent methods of the \"os\" class are defined\n+\/\/   in os.cpp. These are not part of the porting interface, but rather\n+\/\/   can be considered as convenience functions for accessing\n+\/\/   the porting interface. E.g., os::print_function_and_library_name().\n+\/\/\n+\/\/ The methods declared in os.hpp but not implemented in os.cpp are\n+\/\/ a part the HotSpot Porting APIs. They must be implemented in one of\n+\/\/ the following four files:\n+\/\/\n+\/\/ - src\/hotspot\/os\/<os>\/os_<os>.inline.hpp\n+\/\/ - src\/hotspot\/os_cpu\/<os>_<cpu>\/os_<os>_<cpu>.inline.hpp\n+\/\/ - src\/hotspot\/os\/<os>\/os_<os>.cpp\n+\/\/ - src\/hotspot\/os_cpu\/<os>_<cpu>\/os_<os>_<cpu>.cpp\n+\/\/\n+\/\/   The Porting APIs declared as \"inline\" in os.hpp MUST be\n+\/\/   implemented in one of the two .inline.hpp files, depending on\n+\/\/   whether the feature is specific to a particular CPU architecture\n+\/\/   for this OS. These two files are automatically included by\n+\/\/   os.inline.hpp. Platform-independent source files must not include\n+\/\/   these two files directly.\n+\/\/\n+\/\/   If the full definition of an inline method is too complex to fit in a\n+\/\/   header file, the actual implementation can be deferred to another\n+\/\/   method defined in the .cpp files.\n+\/\/\n+\/\/   The Porting APIs that are *not* declared as \"inline\" in os.hpp MUST\n+\/\/   be implemented in one of the two .cpp files above. These files\n+\/\/   also implement OS-specific APIs such as os::Linux, os::Posix, etc.\n+\/\/\n+\/\/ (Note: on the POSIX-like platforms, some of the Porting APIs are implemented\n+\/\/ in os_posix.cpp instead).\n@@ -282,3 +346,3 @@\n-  static bool uses_stack_guard_pages();\n-  static bool must_commit_stack_guard_pages();\n-  static void map_stack_shadow_pages(address sp);\n+  inline static bool uses_stack_guard_pages();\n+  inline static bool must_commit_stack_guard_pages();\n+  inline static void map_stack_shadow_pages(address sp);\n@@ -352,0 +416,1 @@\n+  inline static size_t cds_core_region_alignment();\n@@ -635,0 +700,3 @@\n+  \/\/ Used only on PPC.\n+  inline static void* resolve_function_descriptor(void* p);\n+\n@@ -698,0 +766,3 @@\n+  static void print_user_info(outputStream* st);\n+  static void print_active_locale(outputStream* st);\n+\n@@ -873,1 +944,33 @@\n-  \/\/ Platform dependent stuff\n+  \/\/ File conventions\n+  static const char* file_separator();\n+  static const char* line_separator();\n+  static const char* path_separator();\n+\n+  \/\/ Information about the protection of the page at address '0' on this os.\n+  inline static bool zero_page_read_protected();\n+\n+  static void setup_fpu();\n+  static bool supports_sse();\n+  static juint cpu_microcode_revision();\n+\n+  static inline jlong rdtsc();\n+\n+  \/\/ Used to register dynamic code cache area with the OS\n+  \/\/ Note: Currently only used in 64 bit Windows implementations\n+  inline static bool register_code_area(char *low, char *high);\n+\n+  \/\/ Platform-specific code for interacting with individual OSes.\n+  \/\/ TODO: This is for compatibility only with current usage of os::Linux, etc.\n+  \/\/ We can get rid of the following block if we rename such a class to something\n+  \/\/ like ::LinuxUtils\n+#if defined(AIX)\n+  class Aix;\n+#elif defined(BSD)\n+  class Bsd;\n+#elif defined(LINUX)\n+  class Linux;\n+#elif defined(_WINDOWS)\n+  class win32;\n+#endif\n+\n+  \/\/ Ditto - Posix-specific API. Ideally should be moved to something like ::PosixUtils.\n@@ -875,1 +978,9 @@\n-# include \"os_posix.hpp\"\n+  class Posix;\n+#endif\n+\n+  \/\/ FIXME - some random stuff that was in os_windows.hpp\n+#ifdef _WINDOWS\n+  \/\/ strtok_s is the Windows thread-safe equivalent of POSIX strtok_r\n+# define strtok_r strtok_s\n+# define S_ISCHR(mode)   (((mode) & _S_IFCHR) == _S_IFCHR)\n+# define S_ISFIFO(mode)  (((mode) & _S_IFIFO) == _S_IFIFO)\n@@ -877,2 +988,0 @@\n-#include OS_CPU_HEADER(os)\n-#include OS_HEADER(os)\n@@ -885,7 +994,2 @@\n-#ifndef PLATFORM_PRINT_NATIVE_STACK\n-  \/\/ No platform-specific code for printing the native stack.\n-  static bool platform_print_native_stack(outputStream* st, const void* context,\n-                                          char *buf, int buf_size) {\n-    return false;\n-  }\n-#endif\n+  inline static bool platform_print_native_stack(outputStream* st, const void* context,\n+                                                 char *buf, int buf_size);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":121,"deletions":17,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,30 @@\n+#include OS_CPU_HEADER_INLINE(os)\n+\n+\/\/ Below are inline functions that are rarely implemented by the platforms.\n+\/\/ Provide default empty implementation.\n+\n+#ifndef HAVE_PLATFORM_PRINT_NATIVE_STACK\n+inline bool os::platform_print_native_stack(outputStream* st, const void* context,\n+                                     char *buf, int buf_size) {\n+  return false;\n+}\n+#endif\n+\n+#ifndef HAVE_CDS_CORE_REGION_ALIGNMENT\n+inline size_t os::cds_core_region_alignment() {\n+  return (size_t)os::vm_allocation_granularity();\n+}\n+#endif\n+\n+#ifndef _WINDOWS\n+\/\/ Currently used only on Windows.\n+inline bool os::register_code_area(char *low, char *high) {\n+  return true;\n+}\n+#endif\n+\n+#ifndef HAVE_FUNCTION_DESCRIPTORS\n+inline void* os::resolve_function_descriptor(void* p) {\n+  return NULL;\n+}\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/os.inline.hpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1076,0 +1076,1 @@\n+#include <netdb.h>\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-#include OS_CPU_HEADER(os)\n-\n","filename":"src\/hotspot\/share\/utilities\/ticks.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -996,1 +996,0 @@\n-#ifndef _WIN32\n@@ -1000,1 +999,1 @@\n-       os::Posix::print_user_info(st);\n+       os::print_user_info(st);\n@@ -1002,1 +1001,0 @@\n-#endif\n@@ -1161,1 +1159,0 @@\n-#ifndef _WIN32\n@@ -1165,1 +1162,1 @@\n-       os::Posix::print_active_locale(st);\n+       os::print_active_locale(st);\n@@ -1168,1 +1165,0 @@\n-#endif\n@@ -1352,2 +1348,2 @@\n-#ifndef _WIN32\n-  os::Posix::print_active_locale(st);\n+\n+  os::print_active_locale(st);\n@@ -1355,1 +1351,1 @@\n-#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,3 @@\n+#ifdef _WIN32\n+#include \"os_windows.hpp\"\n+#endif\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include \"os_linux.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}