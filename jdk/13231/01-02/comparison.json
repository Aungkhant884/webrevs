{"files":[{"patch":"@@ -268,4 +268,0 @@\n-    private String captureText() {\n-        return text instanceof String s ? s : text.subSequence(first, last).toString();\n-    }\n-\n@@ -281,12 +277,9 @@\n-        return toMatchResult(captureText());\n-    }\n-\n-    private ImmutableMatchResult toMatchResult(String capturedText) {\n-        return new ImmutableMatchResult(\n-                first,\n-                last,\n-                groupCount(),\n-                groups.clone(),\n-                capturedText,\n-                namedGroups(),\n-                capturedText == text ? 0 : first);\n+        String capturedText = hasMatch()\n+                ? text instanceof String s\n+                    ? s.substring(first, last)\n+                    : text.subSequence(first, last).toString()\n+                : null;\n+        return new ImmutableMatchResult(first, last, groupCount(),\n+                groups.clone(), capturedText,\n+                namedGroups()\n+        );\n@@ -298,1 +291,0 @@\n-        private final int[] groups;\n@@ -300,0 +292,1 @@\n+        private final int[] groups;\n@@ -302,1 +295,0 @@\n-        private final int offset;\n@@ -306,1 +298,1 @@\n-                             Map<String, Integer> namedGroups, int offset) {\n+                             Map<String, Integer> namedGroups) {\n@@ -313,1 +305,0 @@\n-            this.offset = offset;\n@@ -359,1 +350,1 @@\n-            return text.subSequence(groups[group * 2] - offset, groups[group * 2 + 1] - offset).toString();\n+            return text.substring(groups[group * 2] - first, groups[group * 2 + 1] - first);\n@@ -1327,3 +1318,0 @@\n-            \/\/ The input sequence as a string, set once only after first find\n-            \/\/ Avoids repeated conversion from CharSequence for each match\n-            String textAsString;\n@@ -1340,1 +1328,1 @@\n-                return toMatchResult(textAsString);\n+                return toMatchResult();\n@@ -1355,3 +1343,0 @@\n-                \/\/ Capture the input sequence as a string on first find\n-                if (found && state < 0)\n-                    textAsString = captureText();\n@@ -1380,3 +1365,0 @@\n-                \/\/ Capture the input sequence as a string on first find\n-                textAsString = captureText();\n-\n@@ -1385,1 +1367,1 @@\n-                    action.accept(toMatchResult(textAsString));\n+                    action.accept(toMatchResult());\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -29,0 +30,1 @@\n+import java.util.regex.MatchResult;\n@@ -40,1 +42,1 @@\n- * @summary Tests to excercise the optimization described in the bug report.\n+ * @summary Tests to exercise the optimization described in the bug report.\n@@ -50,3 +52,2 @@\n-\n-    private static final String group1;\n-    private static final String group2;\n+    private static final String group1 = \"abc\";\n+    private static final String group2 = \"wxyz\";\n@@ -54,1 +55,0 @@\n-\n@@ -56,0 +56,6 @@\n+    private static final String groupResults = \"(([a-z]+)([0-9]*))\";\n+    private static final String inResults;\n+    private static final String letters1 = \"abcd\";\n+    private static final String digits1 = \"12\";\n+    private static final String letters2 = \"pqr\";\n+    private static final String digits2 = \"\";\n@@ -62,2 +68,0 @@\n-        group1 = \"abc\";\n-        group2 = \"wxyz\";\n@@ -66,0 +70,1 @@\n+        inResults = \" \".repeat(prefixLen) + letters1 + digits1 + \" \".repeat(infixLen) + letters2 + digits2 + \" \".repeat(suffixLen);\n@@ -105,0 +110,72 @@\n+    private static void testResultsStream(CharSequence cs) {\n+        Matcher m = Pattern.compile(groupResults).matcher(cs);\n+        List<MatchResult> results = m.results().toList();\n+        assertEquals(2, results.size());\n+\n+        int startLetters1 = prefixLen;\n+        int endLetters1 = startLetters1 + letters1.length();\n+        int startDigits1 = endLetters1;\n+        int endDigits1 = startDigits1 + digits1.length();\n+\n+        assertEquals(startLetters1, results.get(0).start());\n+        assertEquals(startLetters1, results.get(0).start(0));\n+        assertEquals(startLetters1, results.get(0).start(1));\n+        assertEquals(startLetters1, results.get(0).start(2));\n+        assertEquals(startDigits1, results.get(0).start(3));\n+\n+        assertEquals(endDigits1, results.get(0).end());\n+        assertEquals(endDigits1, results.get(0).end(0));\n+        assertEquals(endDigits1, results.get(0).end(1));\n+        assertEquals(endLetters1, results.get(0).end(2));\n+        assertEquals(endDigits1, results.get(0).end(3));\n+\n+        assertEquals(letters1 + digits1, results.get(0).group());\n+        assertEquals(letters1 + digits1, results.get(0).group(0));\n+        assertEquals(letters1 + digits1, results.get(0).group(1));\n+        assertEquals(letters1, results.get(0).group(2));\n+        assertEquals(digits1, results.get(0).group(3));\n+\n+        int startLetters2 = endDigits1 + infixLen;\n+        int endLetters2 = startLetters2 + letters2.length();\n+        int startDigits2 = endLetters2;\n+        int endDigits2 = startDigits2 + digits2.length();\n+\n+        assertEquals(startLetters2, results.get(1).start());\n+        assertEquals(startLetters2, results.get(1).start(0));\n+        assertEquals(startLetters2, results.get(1).start(1));\n+        assertEquals(startLetters2, results.get(1).start(2));\n+        assertEquals(startDigits2, results.get(1).start(3));\n+\n+        assertEquals(endDigits2, results.get(1).end());\n+        assertEquals(endDigits2, results.get(1).end(0));\n+        assertEquals(endDigits2, results.get(1).end(1));\n+        assertEquals(endLetters2, results.get(1).end(2));\n+        assertEquals(endDigits2, results.get(1).end(3));\n+\n+        assertEquals(letters2 + digits2, results.get(1).group());\n+        assertEquals(letters2 + digits2, results.get(1).group(0));\n+        assertEquals(letters2 + digits2, results.get(1).group(1));\n+        assertEquals(letters2, results.get(1).group(2));\n+        assertEquals(digits2, results.get(1).group(3));\n+    }\n+\n+    @Test\n+    void testResultsStreamString() {\n+        testResultsStream(inResults);\n+    }\n+\n+    @Test\n+    void testResultsStreamStringBuilder() {\n+        testResultsStream(new StringBuilder(inResults));\n+    }\n+\n+    @Test\n+    void testResultsStreamStringBuffer() {\n+        testResultsStream(new StringBuffer(inResults));\n+    }\n+\n+    @Test\n+    void testResultsStreamCharBuffer() {\n+        testResultsStream(CharBuffer.wrap(inResults));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/regex\/ImmutableMatchResultTest.java","additions":84,"deletions":7,"binary":false,"changes":91,"status":"modified"}]}