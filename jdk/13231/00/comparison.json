{"files":[{"patch":"@@ -268,0 +268,4 @@\n+    private String captureText() {\n+        return text instanceof String s ? s : text.subSequence(first, last).toString();\n+    }\n+\n@@ -277,1 +281,1 @@\n-        return toMatchResult(text.toString());\n+        return toMatchResult(captureText());\n@@ -280,7 +284,9 @@\n-    private MatchResult toMatchResult(String text) {\n-        return new ImmutableMatchResult(this.first,\n-                                        this.last,\n-                                        groupCount(),\n-                                        this.groups.clone(),\n-                                        text,\n-                                        namedGroups());\n+    private ImmutableMatchResult toMatchResult(String capturedText) {\n+        return new ImmutableMatchResult(\n+                first,\n+                last,\n+                groupCount(),\n+                groups.clone(),\n+                capturedText,\n+                namedGroups(),\n+                capturedText == text ? 0 : first);\n@@ -296,0 +302,1 @@\n+        private final int offset;\n@@ -299,2 +306,1 @@\n-                             Map<String, Integer> namedGroups)\n-        {\n+                             Map<String, Integer> namedGroups, int offset) {\n@@ -307,0 +313,1 @@\n+            this.offset = offset;\n@@ -352,1 +359,1 @@\n-            return text.subSequence(groups[group * 2], groups[group * 2 + 1]).toString();\n+            return text.subSequence(groups[group * 2] - offset, groups[group * 2 + 1] - offset).toString();\n@@ -373,1 +380,0 @@\n-\n@@ -1351,1 +1357,1 @@\n-                    textAsString = text.toString();\n+                    textAsString = captureText();\n@@ -1375,1 +1381,1 @@\n-                textAsString = text.toString();\n+                textAsString = captureText();\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8132995\n+ * @summary Tests to excercise the optimization described in the bug report.\n+ * @run junit ImmutableMatchResultTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class ImmutableMatchResultTest {\n+\n+    private static final int prefixLen = 3;\n+    private static final int infixLen = 5;\n+    private static final int suffixLen = 4;\n+\n+    private static final String group1 = \"abc\";\n+    private static final String group2 = \"wxyz\";\n+    private static final String group0 = group1 + \"-\".repeat(infixLen) + group2;\n+\n+    private static final String in = \"-\".repeat(prefixLen) + group0 + \"-\".repeat(suffixLen);\n+\n+    private static void test(CharSequence cs) {\n+        Matcher m = Pattern.compile(\"(\" + group1 + \")-*(\" + group2 + \")\").matcher(cs);\n+        assertTrue(m.find());\n+\n+        assertEquals(prefixLen, m.start());\n+        assertEquals(prefixLen + group0.length(), m.end());\n+        assertEquals(group0, m.toMatchResult().group());\n+\n+        assertEquals(prefixLen, m.start(1));\n+        assertEquals(prefixLen + group1.length(), m.end(1));\n+        assertEquals(group1, m.toMatchResult().group(1));\n+\n+        assertEquals(prefixLen + group1.length() + infixLen, m.start(2));\n+        assertEquals(prefixLen + group1.length() + infixLen + group2.length(), m.end(2));\n+        assertEquals(group2, m.toMatchResult().group(2));\n+    }\n+\n+    @Test\n+    void testString() {\n+        test(in);\n+    }\n+\n+    @Test\n+    void testStringBuilder() {\n+        test(new StringBuilder(in));\n+    }\n+\n+    @Test\n+    void testStringBuffer() {\n+        test(new StringBuffer(in));\n+    }\n+\n+    @Test\n+    void testCharBuffer() {\n+        test(CharBuffer.wrap(in));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/regex\/ImmutableMatchResultTest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}