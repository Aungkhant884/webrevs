{"files":[{"patch":"@@ -741,2 +741,0 @@\n-java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java 8282270 linux-all\n-java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java 8282270 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-        \/\/ Position the frame on prime number coordinates to avoid\n-        \/\/ them being multiple of the desktop scale; this tests Linux\n+        \/\/ Position the frame on prime number coordinates (mind OFFSET)\n+        \/\/ to avoid them being multiple of the desktop scale; this tests Linux\n@@ -76,1 +76,1 @@\n-        frame.setBounds(83, 97, 400, 300);\n+        frame.setBounds(78, 92, 100, 100);\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,6 @@\n+import java.awt.image.BufferedImage;\n+import javax.swing.UIManager;\n+import javax.imageio.ImageIO;\n+import java.io.File;\n+import java.io.IOException;\n+\n@@ -43,2 +49,0 @@\n- * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n- * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n@@ -46,2 +50,0 @@\n- * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n- * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n@@ -55,0 +57,3 @@\n+        final int topOffset = 50;\n+        final int leftOffset = 50;\n+\n@@ -56,3 +61,3 @@\n-        \/\/ Position the frame on prime number coordinates to avoid\n-        \/\/ them being multiple of the desktop scale; this tests Linux\n-        \/\/ color picker better.\n+        \/\/ Position the frame such that color picker will work with\n+        \/\/ prime number coordinates (mind the offset) to avoid them being\n+        \/\/ multiple of the desktop scale; this tests Linux color picker better.\n@@ -63,1 +68,1 @@\n-        frame.setBounds(83, 97, 400, 300);\n+        frame.setBounds(89, 99, 100, 100);\n@@ -77,1 +82,1 @@\n-                for (int i = 1; i < 4; i++) {\n+                for (int i = 1; i < COLORS.length; i++) {\n@@ -79,1 +84,1 @@\n-                    g.fillRect(i, 0, 1, 1);\n+                    g.fillRect(leftOffset + i, topOffset, 1, 1);\n@@ -91,2 +96,1 @@\n-        final Point screenLocation = frame.getLocationOnScreen();\n-        checkPixelColors(robot, screenLocation.x, screenLocation.y);\n+        captureImageOf(frame, robot);\n@@ -94,2 +98,8 @@\n-        robot.delay(100);\n-        frame.dispose();\n+        final Point screenLocation = frame.getLocationOnScreen();\n+        try {\n+            checkPixelColors(robot, screenLocation.x + leftOffset,\n+                    screenLocation.y + topOffset);\n+        } finally {\n+            robot.delay(100);\n+            frame.dispose();\n+        }\n@@ -99,1 +109,1 @@\n-        for (int i = 0; i < 4; i++) {\n+        for (int i = 0; i < COLORS.length; i++) {\n@@ -104,0 +114,1 @@\n+                saveImage();\n@@ -111,0 +122,20 @@\n+\n+    private static BufferedImage image;\n+\n+    static void captureImageOf(Frame frame, Robot robot) {\n+        Rectangle rect = frame.getBounds();\n+        rect.setLocation(frame.getLocationOnScreen());\n+\n+        System.out.println(\"Creating screen capture of \" + rect);\n+        image = robot.createScreenCapture(rect);\n+    }\n+\n+    static void saveImage() {\n+        System.out.println(\"Check image.png\");\n+        try {\n+            ImageIO.write(image, \"png\", new File(\"image.png\"));\n+        } catch(IOException e) {\n+            System.out.println(\"failed to save image.png.\");\n+            e.printStackTrace();\n+        }\n+    }\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java","additions":46,"deletions":15,"binary":false,"changes":61,"status":"modified"}]}