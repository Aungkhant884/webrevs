{"files":[{"patch":"@@ -741,2 +741,0 @@\n-java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java 8282270 linux-all\n-java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java 8282270 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.awt.Point;\n@@ -35,3 +34,0 @@\n-import javax.imageio.ImageIO;\n-import java.io.File;\n-import java.io.IOException;\n@@ -42,2 +38,2 @@\n- * @bug 8073320 8280861\n- * @summary  Linux and Windows HiDPI support\n+ * @bug 8073320\n+ * @summary  Windows HiDPI support\n@@ -48,2 +44,0 @@\n- * @run main\/othervm -Dsun.java2d.uiScale=1 HiDPIRobotScreenCaptureTest\n- * @run main\/othervm -Dsun.java2d.uiScale=2 HiDPIRobotScreenCaptureTest\n@@ -69,8 +63,1 @@\n-        \/\/ Position the frame on prime number coordinates to avoid\n-        \/\/ them being multiple of the desktop scale; this tests Linux\n-        \/\/ color picker better.\n-        \/\/ Also, the position should be far enough from the top left\n-        \/\/ corner of the screen to reduce the chance of being repositioned\n-        \/\/ by the system because that area's occupied by the global\n-        \/\/ menu bar and such.\n-        frame.setBounds(83, 97, 400, 300);\n+        frame.setBounds(40, 30, 400, 300);\n@@ -102,1 +89,1 @@\n-        robot.delay(500);\n+        Thread.sleep(200);\n@@ -107,1 +94,0 @@\n-        System.out.println(\"Creating screen capture of \" + rect);\n@@ -118,5 +104,3 @@\n-        checkRectColor(image, new Rectangle(0, 0, w \/ 2, h \/ 2), COLORS[0]);\n-        checkRectColor(image, new Rectangle(w \/ 2, 0, w \/ 2, h \/ 2), COLORS[1]);\n-        checkRectColor(image, new Rectangle(0, h \/ 2, w \/ 2, h \/ 2), COLORS[2]);\n-        checkRectColor(image, new Rectangle(w \/ 2, h \/ 2, w \/ 2, h \/ 2), COLORS[3]);\n-    }\n+        if (image.getRGB(w \/ 4, h \/ 4) != COLORS[0].getRGB()) {\n+            throw new RuntimeException(\"Wrong image color!\");\n+        }\n@@ -124,10 +108,3 @@\n-    private static final int OFFSET = 5;\n-    static void checkRectColor(BufferedImage image, Rectangle rect, Color expectedColor) {\n-        System.out.println(\"Checking rectangle \" + rect + \" to have color \" + expectedColor);\n-        final Point[] pointsToCheck = new Point[] {\n-                new Point(rect.x + OFFSET, rect.y + OFFSET),                           \/\/ top left corner\n-                new Point(rect.x + rect.width - OFFSET, rect.y + OFFSET),              \/\/ top right corner\n-                new Point(rect.x + rect.width \/ 2, rect.y + rect.height \/ 2),          \/\/ center\n-                new Point(rect.x + OFFSET, rect.y + rect.height - OFFSET),             \/\/ bottom left corner\n-                new Point(rect.x + rect.width - OFFSET, rect.y + rect.height - OFFSET) \/\/ bottom right corner\n-        };\n+        if (image.getRGB(3 * w \/ 4, h \/ 4) != COLORS[1].getRGB()) {\n+            throw new RuntimeException(\"Wrong image color!\");\n+        }\n@@ -135,15 +112,6 @@\n-        for (final var point : pointsToCheck) {\n-            System.out.print(\"Checking color at \" + point + \" to be equal to \" + expectedColor);\n-            final int actualColor = image.getRGB(point.x, point.y);\n-            if (actualColor != expectedColor.getRGB()) {\n-                System.out.println(\"... Mismatch: found \" + new Color(actualColor) + \" instead. Check image.png.\");\n-                try {\n-                    ImageIO.write(image, \"png\", new File(\"image.png\"));\n-                } catch(IOException e) {\n-                    System.out.println(\"failed to save image.png.\");\n-                    e.printStackTrace();\n-                }\n-                throw new RuntimeException(\"Wrong image color!\");\n-            } else {\n-                System.out.println(\"... OK\");\n-            }\n+        if (image.getRGB(w \/ 4, 3 * h \/ 4) != COLORS[2].getRGB()) {\n+            throw new RuntimeException(\"Wrong image color!\");\n+        }\n+\n+        if (image.getRGB(3 * w \/ 4, 3 * h \/ 4) != COLORS[3].getRGB()) {\n+            throw new RuntimeException(\"Wrong image color!\");\n@@ -152,1 +120,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java","additions":18,"deletions":50,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n- * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n- * @run main\/othervm -Djdk.gtk.version=2 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n@@ -46,2 +44,0 @@\n- * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=2 ScreenCaptureGtkTest\n- * @run main\/othervm -Djdk.gtk.version=3 -Dsun.java2d.uiScale=3 ScreenCaptureGtkTest\n@@ -55,0 +51,3 @@\n+        final int topOffset = 100;\n+        final int leftOffset = 100;\n+\n@@ -56,3 +55,3 @@\n-        \/\/ Position the frame on prime number coordinates to avoid\n-        \/\/ them being multiple of the desktop scale; this tests Linux\n-        \/\/ color picker better.\n+        \/\/ Position the frame such that color picker will work with\n+        \/\/ prime number coordinates to avoid them being multiple\n+        \/\/ of the desktop scale; this tests Linux color picker better.\n@@ -63,1 +62,1 @@\n-        frame.setBounds(83, 97, 400, 300);\n+        frame.setBounds(91, 97, 400, 300);\n@@ -79,1 +78,1 @@\n-                    g.fillRect(i, 0, 1, 1);\n+                    g.fillRect(leftOffset + i, topOffset, 1, 1);\n@@ -92,1 +91,2 @@\n-        checkPixelColors(robot, screenLocation.x, screenLocation.y);\n+        checkPixelColors(robot, screenLocation.x + leftOffset,\n+                screenLocation.y + topOffset);\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/ScreenCaptureGtkTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}