{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.awt.Point;\n@@ -41,2 +42,2 @@\n- * @bug 8073320\n- * @summary  Windows HiDPI support\n+ * @bug 8073320 8280861\n+ * @summary  Linux and Windows HiDPI support\n@@ -47,0 +48,2 @@\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 HiDPIRobotScreenCaptureTest\n+ * @run main\/othervm -Dsun.java2d.uiScale=2 HiDPIRobotScreenCaptureTest\n@@ -66,4 +69,3 @@\n-\n-        \/\/ Position the frame such that color picker will work with\n-        \/\/ prime number coordinates (mind the offset) to avoid them being\n-        \/\/ multiple of the desktop scale; this tests Linux color picker better.\n+        \/\/ Position the frame on prime number coordinates (mind OFFSET)\n+        \/\/ to avoid them being multiple of the desktop scale; this tests Linux\n+        \/\/ color picker better.\n@@ -74,1 +76,1 @@\n-        frame.setBounds(83, 97, 100, 100);\n+        frame.setBounds(78, 92, 100, 100);\n@@ -116,4 +118,4 @@\n-        checkRectColor(image, w \/ 4, h \/ 4, COLORS[0]);\n-        checkRectColor(image, 3 * w \/ 4, h \/ 4, COLORS[1]);\n-        checkRectColor(image, w \/ 4, 3 * h \/ 4, COLORS[2]);\n-        checkRectColor(image, 3 * w \/ 4, 3 * h \/ 4, COLORS[3]);\n+        checkRectColor(image, new Rectangle(0, 0, w \/ 2, h \/ 2), COLORS[0]);\n+        checkRectColor(image, new Rectangle(w \/ 2, 0, w \/ 2, h \/ 2), COLORS[1]);\n+        checkRectColor(image, new Rectangle(0, h \/ 2, w \/ 2, h \/ 2), COLORS[2]);\n+        checkRectColor(image, new Rectangle(w \/ 2, h \/ 2, w \/ 2, h \/ 2), COLORS[3]);\n@@ -122,10 +124,25 @@\n-    static void checkRectColor(BufferedImage image, int x, int y, Color expectedColor) {\n-        System.out.println(\"Checking (\" + x + \", \" + y + \") to have color \" + expectedColor);\n-        final int actualColor = image.getRGB(x, y);\n-        if (actualColor != expectedColor.getRGB()) {\n-            System.out.println(\"... Mismatch: found \" + new Color(actualColor) + \" instead. Check image.png.\");\n-            try {\n-                ImageIO.write(image, \"png\", new File(\"image.png\"));\n-            } catch(IOException e) {\n-                System.out.println(\"failed to save image.png.\");\n-                e.printStackTrace();\n+    private static final int OFFSET = 5;\n+    static void checkRectColor(BufferedImage image, Rectangle rect, Color expectedColor) {\n+        System.out.println(\"Checking rectangle \" + rect + \" to have color \" + expectedColor);\n+        final Point[] pointsToCheck = new Point[] {\n+                new Point(rect.x + OFFSET, rect.y + OFFSET),                           \/\/ top left corner\n+                new Point(rect.x + rect.width - OFFSET, rect.y + OFFSET),              \/\/ top right corner\n+                new Point(rect.x + rect.width \/ 2, rect.y + rect.height \/ 2),          \/\/ center\n+                new Point(rect.x + OFFSET, rect.y + rect.height - OFFSET),             \/\/ bottom left corner\n+                new Point(rect.x + rect.width - OFFSET, rect.y + rect.height - OFFSET) \/\/ bottom right corner\n+        };\n+\n+        for (final var point : pointsToCheck) {\n+            System.out.print(\"Checking color at \" + point + \" to be equal to \" + expectedColor);\n+            final int actualColor = image.getRGB(point.x, point.y);\n+            if (actualColor != expectedColor.getRGB()) {\n+                System.out.println(\"... Mismatch: found \" + new Color(actualColor) + \" instead. Check image.png.\");\n+                try {\n+                    ImageIO.write(image, \"png\", new File(\"image.png\"));\n+                } catch(IOException e) {\n+                    System.out.println(\"failed to save image.png.\");\n+                    e.printStackTrace();\n+                }\n+                throw new RuntimeException(\"Wrong image color!\");\n+            } else {\n+                System.out.println(\"... OK\");\n@@ -133,3 +150,0 @@\n-            throw new RuntimeException(\"Wrong image color!\");\n-        } else {\n-            System.out.println(\"... OK\");\n","filename":"test\/jdk\/java\/awt\/Robot\/HiDPIScreenCapture\/HiDPIRobotScreenCaptureTest.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"}]}