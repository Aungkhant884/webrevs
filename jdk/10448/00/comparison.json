{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.tools.jlink.internal.plugins;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n+import jdk.tools.jlink.plugin.ResourcePoolEntry;\n+import jdk.tools.jlink.plugin.ResourcePoolEntry.Type;\n+\n+\/**\n+ * Jlink plugin to copy files in the current runtime image into the output image.\n+ * The files to copy are specified as {@link File#pathSeparatorChar} separated\n+ * paths relative to the image root directory.\n+ *\/\n+public final class CopyFilesPlugin extends AbstractPlugin {\n+\n+    \/**\n+     * List of relative path names for the files to copy.\n+     *\/\n+    private final List<String> files = new ArrayList<>();\n+\n+    public CopyFilesPlugin() {\n+        super(\"copy-files\");\n+    }\n+\n+    @Override\n+    public Category getType() {\n+        return Category.ADDER;\n+    }\n+\n+    @Override\n+    public boolean hasArguments() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean hasRawArgument() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void configure(Map<String, String> config) {\n+        String arg = config.get(getName());\n+        if (arg == null) {\n+            throw new AssertionError();\n+        }\n+        for (String relativePath : arg.split(File.pathSeparator)) {\n+            files.add(relativePath);\n+        }\n+    }\n+\n+    @Override\n+    public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n+        if (!files.isEmpty()) {\n+            in.transformAndCopy(Function.identity(), out);\n+\n+            String javaHome = System.getProperty(\"java.home\");\n+            for (String relativePath : files) {\n+                Path file = Paths.get(javaHome, relativePath);\n+                out.add(ResourcePoolEntry.create(\"\/java.base\/top\/\" + relativePath, Type.TOP, file));\n+            }\n+        }\n+        return out.build();\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/CopyFilesPlugin.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -95,0 +95,11 @@\n+copy-files.description=\\\n+Copies files from the current image to the output image. \\n\\\n+The files to copy are specified as ':' (';' on Windows) separated paths \\n\\\n+relative to the image root.\n+\n+copy-files.usage=\\\n+\\  --copy-files              Copies files from the current image to the \\n\\\n+\\                            output image. The files to copy are specified as \\n\\\n+\\                            ':' (';' on Windows) separated paths relative \\n\\\n+\\                            to the image root.\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+        jdk.tools.jlink.internal.plugins.CopyFilesPlugin,\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test copy files plugin\n+ * @library ..\/..\/lib\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jmod\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.compiler\n+ * @build tests.*\n+ * @run main CopyFilesPluginTest\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import tests.Helper;\n+\n+public class CopyFilesPluginTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+\n+        Helper helper = Helper.newHelper();\n+        if (helper == null) {\n+            System.err.println(\"Test not run\");\n+            return;\n+        }\n+\n+        var module = \"copyfiles\";\n+        helper.generateDefaultJModule(module);\n+        var image = helper.generateDefaultImage(new String[] {\n+                \"--add-modules\", \"jdk.jlink,jdk.jdeps,jdk.internal.opt,jdk.compiler,jdk.zipfs,java.compiler\",\n+                \"--keep-packaged-modules\", \"images\/copyfiles.image\/jmods\"\n+            }, module)\n+            .assertSuccess();\n+        helper.checkImage(image, module, null, null);\n+\n+        String[] files = {\n+            \"lib\/foo\",\n+            \"bin\/bar\",\n+            \"foreign\/baz\"\n+        };\n+\n+        for (String file : files) {\n+            Path path = image.resolve(file);\n+            Files.createDirectories(path.getParent());\n+            Files.writeString(image.resolve(file), file);\n+        }\n+\n+        var launcher = image.resolve(\"bin\/jlink\"\n+                                     + (System.getProperty(\"os.name\").startsWith(\"Windows\")\n+                                        ? \".exe\" : \"\"));\n+\n+\n+        var oa = ProcessTools.executeProcess(launcher.toString(),\n+                                             \"--add-modules\", \"ALL-MODULE-PATH\",\n+                                             \"--copy-files=\" + String.join(File.pathSeparator, files),\n+                                             \"--output\", \"image2\");\n+        oa.shouldHaveExitValue(0);\n+\n+        for (String file : files) {\n+            Path path = Paths.get(\"image2\", file);\n+            String content = Files.readString(path);\n+            if (!file.equals(content)) {\n+                throw new AssertionError(path + \": expected \\\"\" + file + \"\\\", got \\\"\" + content + \"\\\"\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CopyFilesPluginTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}