{"files":[{"patch":"@@ -1474,1 +1474,1 @@\n-        genTry(tree.body, List.nil(), syncEnv);\n+        genTry(tree.body, List.nil(), syncEnv, false);\n@@ -1508,1 +1508,1 @@\n-        genTry(tree.body, tree.catchers, tryEnv);\n+        genTry(tree.body, tree.catchers, tryEnv, true);\n@@ -1513,2 +1513,3 @@\n-         *  @param catchers  The lis of catch clauses.\n-         *  @param env       the environment current for the body.\n+         *  @param catchers  The list of catch clauses.\n+         *  @param env       The current environment of the body.\n+         *  @param actualTry Identify try or synchronized statement, true for try and false for synchronized.\n@@ -1516,1 +1517,1 @@\n-        void genTry(JCTree body, List<JCCatch> catchers, Env<GenContext> env) {\n+        void genTry(JCTree body, List<JCCatch> catchers, Env<GenContext> env, boolean actualTry) {\n@@ -1526,1 +1527,6 @@\n-            Chain exitChain = code.branch(goto_);\n+            Chain exitChain;\n+            if (startpc == endpc && actualTry) {\n+                exitChain = code.branch(dontgoto);\n+            } else {\n+                exitChain = code.branch(goto_);\n+            }\n@@ -1544,1 +1550,1 @@\n-            if (hasFinalizer) {\n+            if (hasFinalizer && (startpc != endpc || !actualTry)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8022186\n+ * @bug 8022186 8271254\n@@ -56,2 +56,4 @@\n-        checkClassFile(Paths.get(System.getProperty(\"test.classes\"),\n-                this.getClass().getName() + \"$Test.class\"));\n+        for (int i = 1; i <= 8; i++) {\n+            checkClassFile(Paths.get(System.getProperty(\"test.classes\"),\n+                    this.getClass().getName() + \"$Test\" + i + \".class\"));\n+        }\n@@ -65,0 +67,1 @@\n+        numberOfRefToStr = 0;\n@@ -158,1 +161,80 @@\n-    public class Test {\n+    public class Test1 {\n+        void methodToLookFor() {\n+            try {\n+                \/\/ empty intentionally\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test2 {\n+        void methodToLookFor() {\n+            try {\n+                \/\/ empty intentionally\n+            } catch (Exception e) {\n+                System.out.println(\"EXCEPTION\");\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test3 {\n+        void methodToLookFor() {\n+            try {\n+                ;  \/\/ skip statement intentionally\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test4 {\n+        void methodToLookFor() {\n+            try {\n+                ;  \/\/ skip statement intentionally\n+            } catch (Exception e) {\n+                System.out.println(\"EXCEPTION\");\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test5 {\n+        void methodToLookFor() {\n+            try {\n+                \/\/ empty try statement\n+                try { } finally { }\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test6 {\n+        void methodToLookFor() {\n+            try {\n+                \/\/ empty try statement\n+                try { } catch (Exception e) { } finally { }\n+            } catch (Exception e) {\n+                System.out.println(\"EXCEPTION\");\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test7 {\n+        void methodToLookFor() {\n+            try {\n+                \/\/ empty try statement with skip statement\n+                try { ; } finally { }\n+            } finally {\n+                System.out.println(\"STR_TO_LOOK_FOR\");\n+            }\n+        }\n+    }\n+\n+    public class Test8 {\n@@ -161,0 +243,4 @@\n+                \/\/ empty try statement with skip statement\n+                try { ; } catch (Exception e) { } finally { }\n+            } catch (Exception e) {\n+                System.out.println(\"EXCEPTION\");\n","filename":"test\/langtools\/tools\/javac\/T8022186\/DeadCodeGeneratedForEmptyTryTest.java","additions":91,"deletions":5,"binary":false,"changes":96,"status":"modified"}]}