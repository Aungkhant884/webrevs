{"files":[{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class NMTAnalyze {\n+  public static class BenchmarkRecord {\n+    public String jmh_method, mode, units;\n+    public int    N, threads, cnt;\n+    public double score, error;\n+  }\n+\n+  public static enum BenchmarkFields {\n+    NMT_METHOD    ,\n+    N             ,\n+    THREADS       ,\n+    MODE          ,\n+    CNT           ,\n+    SCORE         ,\n+    QUESTION_MARK ,\n+    ERROR         ,\n+    UNITS\n+  }\n+\n+  public static String fileName;\n+  public static List<BenchmarkRecord> records = new ArrayList<>();\n+\n+  private static void skipUntilReport(BufferedReader reader) throws IOException {\n+    String line = reader.readLine();\n+    while (line != null) {\n+      String ReportStartKeyword = \"Benchmark\";\n+      if (!line.startsWith(ReportStartKeyword) || line.contains(\"#\")) {\n+        line = reader.readLine();\n+        continue;\n+      } else {\n+        break;\n+      }\n+    }\n+  }\n+\n+  private static void readRecords(BufferedReader reader) throws IOException {\n+    String line;\n+    while ((line = reader.readLine()) != null) {\n+\n+      if (!line.startsWith(\"NMTBenchmark\"))\n+        continue;\n+      BenchmarkRecord rec = new BenchmarkRecord();\n+      String[] fields = Arrays.asList(line.split(\" \"))\n+                      .stream()\n+                      .filter(f -> f.length() > 0)\n+                      .collect(Collectors.toList())\n+                      .toArray(new String[0]);\n+\n+      rec.jmh_method  =                    fields[BenchmarkFields.NMT_METHOD.ordinal()];\n+      rec.N           =   Integer.parseInt(fields[BenchmarkFields.N         .ordinal()]);\n+      rec.threads     =   Integer.parseInt(fields[BenchmarkFields.THREADS   .ordinal()]);\n+      rec.cnt         =   Integer.parseInt(fields[BenchmarkFields.CNT       .ordinal()]);\n+      rec.mode        =                    fields[BenchmarkFields.MODE      .ordinal()];\n+      rec.units       =                    fields[BenchmarkFields.UNITS     .ordinal()];\n+      rec.score       = Double.parseDouble(fields[BenchmarkFields.SCORE     .ordinal()]);\n+      rec.error       = Double.parseDouble(fields[BenchmarkFields.ERROR     .ordinal()]);\n+\n+      records.add(rec);\n+    };\n+  }\n+\n+  private static void analyzeRecords(BufferedReader reader) {\n+    String NMT_OFF     = \"NMTOff\";\n+    String NMT_DETAIL  = \"NMTDetail\";\n+    String NMT_SUMMARY = \"NMTSummary\";\n+    int[] threads = {0, 4};\n+    String [] methods = {\"mixAallocateFreeMemory\", \"mixAllocateReallocateMemory\", \"onlyAllocateMemory\"};\n+\n+    System.out.printf(\"\\n%40s %6s %9s %6s %15s %6s %24s %6s\\n\",\"Method\", \"Threads\", \" \", \"Off \", \" \", \"Summary\", \" \", \"Detail\");\n+    for(String m: methods) {\n+      for (int t: threads) {\n+        List<BenchmarkRecord> mtd_thrd = records.stream()\n+                                        .filter(r -> r.jmh_method.contains(m) && r.threads == t)\n+                                        .collect(Collectors.toList());\n+        BenchmarkRecord off_rec     = mtd_thrd.stream().filter(r->r.jmh_method.contains(NMT_OFF))    .collect(Collectors.toList()).get(0);\n+        BenchmarkRecord summary_rec = mtd_thrd.stream().filter(r->r.jmh_method.contains(NMT_SUMMARY)).collect(Collectors.toList()).get(0);\n+        BenchmarkRecord detail_rec  = mtd_thrd.stream().filter(r->r.jmh_method.contains(NMT_DETAIL)) .collect(Collectors.toList()).get(0);\n+\n+        Double nmt_off         = off_rec    .score;\n+        Double nmt_summary     = summary_rec.score;\n+        Double nmt_detail      = detail_rec .score;\n+\n+        Double nmt_off_err     = off_rec    .error;\n+        Double nmt_summary_err = summary_rec.error;\n+        Double nmt_detail_err  = detail_rec .error;\n+\n+        System.out.printf(\"%40s %5d    %7.3f (± %6.3f)    %7.3f (± %6.3f) %7.3f%%   %7.3f (± %6.3f) %7.3f%%\\n\",\n+                          m, t,\n+                          nmt_off, nmt_off_err,\n+                          nmt_summary, nmt_summary_err, (nmt_summary - nmt_off) \/ nmt_off * 100.0,\n+                          nmt_detail, nmt_detail_err, (nmt_detail - nmt_off) \/ nmt_off * 100.0);\n+      }\n+    }\n+\n+  }\n+\n+  public static void main(String[] args) {\n+    if (args.length < 1) {\n+      System.out.println(\"Usage: java NMTAnalyze.java <benchmark-results-filename>\");\n+      System.exit(1);\n+    }\n+    fileName = args[0];\n+    System.out.println(args[0]);\n+    try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n+      System.out.println(\"file name \" + fileName);\n+\n+      skipUntilReport(reader);\n+      readRecords(reader);\n+      analyzeRecords(reader);\n+\n+      reader.close();\n+    } catch (IOException ioe) {\n+      ioe.printStackTrace();\n+      System.out.println(ioe.getMessage());\n+    } finally {\n+    }\n+\n+  }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/runtime\/NMTAnalyze.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}