{"files":[{"patch":"@@ -158,1 +158,1 @@\n-                Date invalidity = InvalidityDateExtension.toImpl(ext).get(\"DATE\");\n+                Date invalidity = InvalidityDateExtension.toImpl(ext).getDate();\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertificateRevokedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -326,1 +326,1 @@\n-        return(namesCopy);\n+        return namesCopy;\n@@ -633,1 +633,1 @@\n-                crlNum = crlNumExt.get(CRLNumberExtension.NUMBER);\n+                crlNum = crlNumExt.getCrlNumber();\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CRLSelector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1291,1 +1291,1 @@\n-        return (issuer == null ? null : issuer.getName());\n+        return issuer == null ? null : issuer.getName();\n@@ -1313,1 +1313,1 @@\n-        return (issuer == null ? null: issuer.getEncoded());\n+        return issuer == null ? null: issuer.getEncoded();\n@@ -1350,1 +1350,1 @@\n-        return (subject == null ? null : subject.getName());\n+        return subject == null ? null : subject.getName();\n@@ -1372,1 +1372,1 @@\n-        return (subject == null ? null : subject.getEncoded());\n+        return subject == null ? null : subject.getEncoded();\n@@ -1871,1 +1871,1 @@\n-        return (s);\n+        return s;\n@@ -2123,6 +2123,2 @@\n-                try {\n-                    Date notAfter = ext.get(PrivateKeyUsageExtension.NOT_AFTER);\n-                    time = notAfter.toString();\n-                } catch (CertificateException ex) {\n-                    \/\/ not able to retrieve notAfter value\n-                }\n+                Date notAfter = ext.getNotAfter();\n+                time = notAfter.toString();\n@@ -2139,6 +2135,2 @@\n-                try {\n-                    Date notBefore = ext.get(PrivateKeyUsageExtension.NOT_BEFORE);\n-                    time = notBefore.toString();\n-                } catch (CertificateException ex) {\n-                    \/\/ not able to retrieve notBefore value\n-                }\n+                Date notBefore = ext.getNotBefore();\n+                time = notBefore.toString();\n@@ -2230,2 +2222,1 @@\n-                Vector<ObjectIdentifier> certKeyPurposeVector =\n-                    ext.get(ExtendedKeyUsageExtension.USAGES);\n+                Vector<ObjectIdentifier> certKeyPurposeVector = ext.getUsages();\n@@ -2267,2 +2258,1 @@\n-            GeneralNames certNames =\n-                    sanExt.get(SubjectAlternativeNameExtension.SUBJECT_NAME);\n+            GeneralNames certNames = sanExt.getNames();\n@@ -2336,1 +2326,1 @@\n-            List<PolicyInformation> policies = ext.get(CertificatePoliciesExtension.POLICIES);\n+            List<PolicyInformation> policies = ext.getCertPolicies();\n@@ -2404,4 +2394,2 @@\n-            GeneralSubtrees permitted =\n-                    ext.get(NameConstraintsExtension.PERMITTED_SUBTREES);\n-            GeneralSubtrees excluded =\n-                    ext.get(NameConstraintsExtension.EXCLUDED_SUBTREES);\n+            GeneralSubtrees permitted = ext.getPermittedSubtrees();\n+            GeneralSubtrees excluded = ext.getExcludedSubtrees();\n@@ -2409,1 +2397,1 @@\n-                if (matchExcluded(excluded) == false) {\n+                if (!matchExcluded(excluded)) {\n@@ -2414,1 +2402,1 @@\n-                if (matchPermitted(permitted) == false) {\n+                if (!matchPermitted(permitted)) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CertSelector.java","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -687,3 +687,1 @@\n-                    certIssuerName = (Principal)\n-                        tbsCert.get(X509CertInfo.ISSUER + \".\" +\n-                                    X509CertInfo.DN_NAME);\n+                    certIssuerName = tbsCert.getIssuer();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -620,5 +620,1 @@\n-                try {\n-                    exts.encode(temp2, true);\n-                } catch (CertificateException ex) {\n-                    throw new IOException(ex.toString());\n-                }\n+                exts.encode(temp2, true);\n@@ -690,1 +686,1 @@\n-        return (os == null? n : os.stdName());\n+        return os == null? n : os.stdName();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,2 +134,1 @@\n-            SerialNumber asn = (SerialNumber)ext.get(\n-                AuthorityKeyIdentifierExtension.SERIAL_NUMBER);\n+            SerialNumber asn = ext.getSerialNumber();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AdaptableX509CertSelector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-            algorithmId = (AlgorithmId)x509Cert.get(X509CertImpl.SIG_ALG);\n+            algorithmId = x509Cert.getSigAlg();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-            return (test.subtreeDepth()-base.subtreeDepth());\n+            return test.subtreeDepth()-base.subtreeDepth();\n@@ -233,1 +233,1 @@\n-            return (baseDistance + testDistance - (2 * commonDistance));\n+            return baseDistance + testDistance - (2 * commonDistance);\n@@ -303,2 +303,1 @@\n-            GeneralNames altNames = altNameExt.get(\n-                    SubjectAlternativeNameExtension.SUBJECT_NAME);\n+            GeneralNames altNames = altNameExt.getNames();\n@@ -340,4 +339,2 @@\n-        GeneralSubtrees permitted =\n-                constraints.get(NameConstraintsExtension.PERMITTED_SUBTREES);\n-        GeneralSubtrees excluded =\n-                constraints.get(NameConstraintsExtension.EXCLUDED_SUBTREES);\n+        GeneralSubtrees permitted = constraints.getPermittedSubtrees();\n+        GeneralSubtrees excluded = constraints.getExcludedSubtrees();\n@@ -365,1 +362,1 @@\n-                return (distance + 1);\n+                return distance + 1;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Builder.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                    ext.get(CRLDistributionPointsExtension.POINTS);\n+                    ext.getDistributionPoints();\n@@ -119,1 +119,1 @@\n-        } catch (CertificateException | IOException e) {\n+        } catch (CertificateException e) {\n@@ -336,3 +336,1 @@\n-            if (idpExt == null ||\n-                    idpExt.get(IssuingDistributionPointExtension.INDIRECT_CRL)\n-                    == Boolean.FALSE) {\n+            if (idpExt == null || !idpExt.isIndirectCRL()) {\n@@ -401,2 +399,1 @@\n-            DistributionPointName idpPoint = (DistributionPointName)\n-                idpExt.get(IssuingDistributionPointExtension.POINT);\n+            DistributionPointName idpPoint = idpExt.getDistributionPoint();\n@@ -498,3 +495,2 @@\n-            Boolean b = (Boolean)\n-                idpExt.get(IssuingDistributionPointExtension.ONLY_USER_CERTS);\n-            if (b.equals(Boolean.TRUE) && certImpl.getBasicConstraints() != -1) {\n+            boolean b = idpExt.hasOnlyUserCerts();\n+            if (b && certImpl.getBasicConstraints() != -1) {\n@@ -509,3 +505,2 @@\n-            b = (Boolean)\n-                idpExt.get(IssuingDistributionPointExtension.ONLY_CA_CERTS);\n-            if (b.equals(Boolean.TRUE) && certImpl.getBasicConstraints() == -1) {\n+            b = idpExt.hasOnlyCACerts();\n+            if (b && certImpl.getBasicConstraints() == -1) {\n@@ -520,3 +515,2 @@\n-            b = (Boolean) idpExt.get\n-                (IssuingDistributionPointExtension.ONLY_ATTRIBUTE_CERTS);\n-            if (b.equals(Boolean.TRUE)) {\n+            b = idpExt.hasOnlyAttributeCerts();\n+            if (b) {\n@@ -534,2 +528,1 @@\n-            reasons = (ReasonFlags)\n-                idpExt.get(IssuingDistributionPointExtension.REASONS);\n+            reasons = idpExt.getRevocationReasons();\n@@ -606,2 +599,1 @@\n-                SerialNumber asn = (SerialNumber)akidext.get(\n-                        AuthorityKeyIdentifierExtension.SERIAL_NUMBER);\n+                SerialNumber asn = akidext.getSerialNumber();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/DistributionPointFetcher.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-        if (init || !X509CertImpl.isSelfIssued(cert)){\n+        if (init || !X509CertImpl.isSelfIssued(cert)) {\n@@ -194,2 +194,1 @@\n-            try {\n-                SubjectAlternativeNameExtension subjAltNameExt\n+            SubjectAlternativeNameExtension subjAltNameExt\n@@ -197,6 +196,4 @@\n-                if (subjAltNameExt != null) {\n-                    GeneralNames gNames = subjAltNameExt.get(\n-                            SubjectAlternativeNameExtension.SUBJECT_NAME);\n-                    for (GeneralName gName : gNames.names()) {\n-                        subjectNamesTraversed.add(gName.getName());\n-                    }\n+            if (subjAltNameExt != null) {\n+                GeneralNames gNames = subjAltNameExt.getNames();\n+                for (GeneralName gName : gNames.names()) {\n+                    subjectNamesTraversed.add(gName.getName());\n@@ -204,7 +201,0 @@\n-            } catch (IOException e) {\n-                if (debug != null) {\n-                    debug.println(\"ForwardState.updateState() unexpected \"\n-                        + \"exception\");\n-                    e.printStackTrace();\n-                }\n-                throw new CertPathValidatorException(e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ForwardState.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -268,2 +267,1 @@\n-        boolean finalCert) throws CertPathValidatorException\n-    {\n+        boolean finalCert) throws CertPathValidatorException {\n@@ -274,2 +272,1 @@\n-        try {\n-            PolicyConstraintsExtension polConstExt\n+        PolicyConstraintsExtension polConstExt\n@@ -277,16 +274,10 @@\n-            if (polConstExt == null)\n-                return explicitPolicy;\n-            int require =\n-                polConstExt.get(PolicyConstraintsExtension.REQUIRE).intValue();\n-            if (debug != null) {\n-                debug.println(\"PolicyChecker.mergeExplicitPolicy() \"\n-                   + \"require Index from cert = \" + require);\n-            }\n-            if (!finalCert) {\n-                if (require != -1) {\n-                    if ((explicitPolicy == -1) || (require < explicitPolicy)) {\n-                        explicitPolicy = require;\n-                    }\n-                }\n-            } else {\n-                if (require == 0)\n+        if (polConstExt == null)\n+            return explicitPolicy;\n+        int require = polConstExt.getRequire();\n+        if (debug != null) {\n+            debug.println(\"PolicyChecker.mergeExplicitPolicy() \"\n+                    + \"require Index from cert = \" + require);\n+        }\n+        if (!finalCert) {\n+            if (require != -1) {\n+                if ((explicitPolicy == -1) || (require < explicitPolicy)) {\n@@ -294,0 +285,1 @@\n+                }\n@@ -295,7 +287,3 @@\n-        } catch (IOException e) {\n-            if (debug != null) {\n-                debug.println(\"PolicyChecker.mergeExplicitPolicy \"\n-                              + \"unexpected exception\");\n-                e.printStackTrace();\n-            }\n-            throw new CertPathValidatorException(e);\n+        } else {\n+            if (require == 0)\n+                explicitPolicy = require;\n@@ -303,1 +291,0 @@\n-\n@@ -321,2 +308,1 @@\n-        throws CertPathValidatorException\n-    {\n+        throws CertPathValidatorException {\n@@ -327,2 +313,1 @@\n-        try {\n-            PolicyConstraintsExtension polConstExt\n+        PolicyConstraintsExtension polConstExt\n@@ -330,2 +315,2 @@\n-            if (polConstExt == null)\n-                return policyMapping;\n+        if (polConstExt == null)\n+            return policyMapping;\n@@ -333,4 +318,3 @@\n-            int inhibit =\n-                polConstExt.get(PolicyConstraintsExtension.INHIBIT).intValue();\n-            if (debug != null)\n-                debug.println(\"PolicyChecker.mergePolicyMapping() \"\n+        int inhibit = polConstExt.getInhibit();\n+        if (debug != null)\n+            debug.println(\"PolicyChecker.mergePolicyMapping() \"\n@@ -339,10 +323,3 @@\n-            if (inhibit != -1) {\n-                if ((policyMapping == -1) || (inhibit < policyMapping)) {\n-                    policyMapping = inhibit;\n-                }\n-            }\n-        } catch (IOException e) {\n-            if (debug != null) {\n-                debug.println(\"PolicyChecker.mergePolicyMapping \"\n-                              + \"unexpected exception\");\n-                e.printStackTrace();\n+        if (inhibit != -1) {\n+            if ((policyMapping == -1) || (inhibit < policyMapping)) {\n+                policyMapping = inhibit;\n@@ -350,1 +327,0 @@\n-            throw new CertPathValidatorException(e);\n@@ -369,2 +345,1 @@\n-        X509CertImpl currCert) throws CertPathValidatorException\n-    {\n+        X509CertImpl currCert) throws CertPathValidatorException {\n@@ -375,2 +350,1 @@\n-        try {\n-            InhibitAnyPolicyExtension inhAnyPolExt = (InhibitAnyPolicyExtension)\n+        InhibitAnyPolicyExtension inhAnyPolExt = (InhibitAnyPolicyExtension)\n@@ -378,2 +352,2 @@\n-            if (inhAnyPolExt == null)\n-                return inhibitAnyPolicy;\n+        if (inhAnyPolExt == null)\n+            return inhibitAnyPolicy;\n@@ -381,4 +355,3 @@\n-            int skipCerts =\n-                inhAnyPolExt.get(InhibitAnyPolicyExtension.SKIP_CERTS).intValue();\n-            if (debug != null)\n-                debug.println(\"PolicyChecker.mergeInhibitAnyPolicy() \"\n+        int skipCerts = inhAnyPolExt.getSkipCerts();\n+        if (debug != null)\n+            debug.println(\"PolicyChecker.mergeInhibitAnyPolicy() \"\n@@ -387,10 +360,3 @@\n-            if (skipCerts != -1) {\n-                if (skipCerts < inhibitAnyPolicy) {\n-                    inhibitAnyPolicy = skipCerts;\n-                }\n-            }\n-        } catch (IOException e) {\n-            if (debug != null) {\n-                debug.println(\"PolicyChecker.mergeInhibitAnyPolicy \"\n-                              + \"unexpected exception\");\n-                e.printStackTrace();\n+        if (skipCerts != -1) {\n+            if (skipCerts < inhibitAnyPolicy) {\n+                inhibitAnyPolicy = skipCerts;\n@@ -398,1 +364,0 @@\n-            throw new CertPathValidatorException(e);\n@@ -400,1 +365,0 @@\n-\n@@ -452,6 +416,1 @@\n-            try {\n-                policyInfo = currCertPolicies.get(CertificatePoliciesExtension.POLICIES);\n-            } catch (IOException ioe) {\n-                throw new CertPathValidatorException(\"Exception while \"\n-                    + \"retrieving policyOIDs\", ioe);\n-            }\n+            policyInfo = currCertPolicies.getCertPolicies();\n@@ -621,1 +580,1 @@\n-                PolicyNodeImpl node = new PolicyNodeImpl(parentNode, policy,\n+                new PolicyNodeImpl(parentNode, policy,\n@@ -675,1 +634,0 @@\n-            PolicyNodeImpl curNode = null;\n@@ -701,1 +659,1 @@\n-                    curNode = new PolicyNodeImpl\n+                    new PolicyNodeImpl\n@@ -709,1 +667,1 @@\n-                curNode = new PolicyNodeImpl\n+                new PolicyNodeImpl\n@@ -750,11 +708,1 @@\n-        try {\n-            maps = polMappingsExt.get(PolicyMappingsExtension.MAP);\n-        } catch (IOException e) {\n-            if (debug != null) {\n-                debug.println(\"PolicyChecker.processPolicyMappings() \"\n-                    + \"mapping exception\");\n-                e.printStackTrace();\n-            }\n-            throw new CertPathValidatorException(\"Exception while checking \"\n-                                                 + \"mapping\", e);\n-        }\n+        maps = polMappingsExt.getMaps();\n@@ -819,1 +767,1 @@\n-                        PolicyNodeImpl curNode = new PolicyNodeImpl\n+                        new PolicyNodeImpl\n@@ -856,7 +804,1 @@\n-        List<PolicyInformation> policyInfo;\n-        try {\n-            policyInfo = currCertPolicies.get(CertificatePoliciesExtension.POLICIES);\n-        } catch (IOException ioe) {\n-            throw new CertPathValidatorException(\"Exception while \"\n-                + \"retrieving policyOIDs\", ioe);\n-        }\n+        List<PolicyInformation> policyInfo = currCertPolicies.getCertPolicies();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PolicyChecker.java","additions":43,"deletions":101,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -842,0 +842,3 @@\n+    private static final boolean[] ALL_REASONS =\n+            {true, true, true, true, true, true, true, true, true};\n+\n@@ -851,1 +854,1 @@\n-     * @param trustAnchors a <code>Set<\/code> of <code>TrustAnchor<\/code>s>\n+     * @param anchors a <code>Set<\/code> of <code>TrustAnchor<\/code>s>\n@@ -854,2 +857,0 @@\n-    private static final boolean[] ALL_REASONS =\n-        {true, true, true, true, true, true, true, true, true};\n@@ -882,1 +883,1 @@\n-                points = ext.get(CRLDistributionPointsExtension.POINTS);\n+                points = ext.getDistributionPoints();\n@@ -968,0 +969,3 @@\n+    private static final boolean [] CRL_SIGN_USAGE =\n+            { false, false, false, false, false, false, true };\n+\n@@ -982,2 +986,0 @@\n-    private static final boolean [] CRL_SIGN_USAGE =\n-        { false, false, false, false, false, false, true };\n@@ -1182,1 +1184,1 @@\n-                return(false);\n+                return false;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -149,1 +148,1 @@\n-                 (x509Cert.getIssuerX500Principal()).append(\"\\n\");\n+                (x509Cert.getIssuerX500Principal()).append(\"\\n\");\n@@ -151,1 +150,1 @@\n-                 (x509Cert.getSubjectX500Principal()).append(\"\\n\");\n+                (x509Cert.getSubjectX500Principal()).append(\"\\n\");\n@@ -153,1 +152,1 @@\n-                 (x509Cert.getSerialNumber().toString(16)).append(\"\\n\");\n+                (x509Cert.getSerialNumber().toString(16)).append(\"\\n\");\n@@ -155,1 +154,1 @@\n-                 (x509Cert.getNotAfter().toString()).append(\"\\n\");\n+                (x509Cert.getNotAfter().toString()).append(\"\\n\");\n@@ -172,2 +171,1 @@\n-        try {\n-            SubjectKeyIdentifierExtension sKeyID =\n+        SubjectKeyIdentifierExtension sKeyID =\n@@ -175,6 +173,5 @@\n-            if (sKeyID != null) {\n-                KeyIdentifier keyID = sKeyID.get(\n-                        SubjectKeyIdentifierExtension.KEY_ID);\n-                sb.append(\"SubjKeyID:  \").append(keyID.toString());\n-            }\n-            AuthorityKeyIdentifierExtension aKeyID =\n+        if (sKeyID != null) {\n+            KeyIdentifier keyID = sKeyID.getKeyIdentifier();\n+            sb.append(\"SubjKeyID:  \").append(keyID.toString());\n+        }\n+        AuthorityKeyIdentifierExtension aKeyID =\n@@ -182,10 +179,3 @@\n-            if (aKeyID != null) {\n-                KeyIdentifier keyID = (KeyIdentifier)aKeyID.get(\n-                        AuthorityKeyIdentifierExtension.KEY_ID);\n-                sb.append(\"AuthKeyID:  \").append(keyID.toString());\n-            }\n-        } catch (IOException e) {\n-            if (debug != null) {\n-                debug.println(\"Vertex.certToString() unexpected exception\");\n-                e.printStackTrace();\n-            }\n+        if (aKeyID != null) {\n+            KeyIdentifier keyID = aKeyID.getKeyIdentifier();\n+            sb.append(\"AuthKeyID:  \").append(keyID.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Vertex.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-            return (level != Level.OFF);\n+            return level != Level.OFF;\n@@ -483,5 +483,2 @@\n-                X509CertInfo certInfo =\n-                        (X509CertInfo)x509.get(X509CertImpl.NAME + \".\" +\n-                                                       X509CertImpl.INFO);\n-                CertificateExtensions certExts = (CertificateExtensions)\n-                        certInfo.get(X509CertInfo.EXTENSIONS);\n+                X509CertInfo certInfo = x509.getInfo();\n+                CertificateExtensions certExts = certInfo.getExtensions();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -322,2 +322,1 @@\n-            info.set(X509CertInfo.VERSION,\n-                     new CertificateVersion(CertificateVersion.V3));\n+            info.setVersion(new CertificateVersion(CertificateVersion.V3));\n@@ -327,5 +326,4 @@\n-            info.set(X509CertInfo.SERIAL_NUMBER,\n-                    CertificateSerialNumber.newRandom64bit(prng));\n-            info.set(X509CertInfo.SUBJECT, myname);\n-            info.set(X509CertInfo.KEY, new CertificateX509Key(publicKey));\n-            info.set(X509CertInfo.VALIDITY, interval);\n+            info.setSerialNumber(CertificateSerialNumber.newRandom64bit(prng));\n+            info.setSubject(myname);\n+            info.setKey(new CertificateX509Key(publicKey));\n+            info.setValidity(interval);\n@@ -334,1 +332,1 @@\n-                info.set(X509CertInfo.ISSUER, signerSubjectName);\n+                info.setIssuer(signerSubjectName);\n@@ -336,1 +334,1 @@\n-                info.set(X509CertInfo.ISSUER, myname);\n+                info.setIssuer(myname);\n@@ -338,1 +336,1 @@\n-            if (ext != null) info.set(X509CertInfo.EXTENSIONS, ext);\n+            if (ext != null) info.setExtensions(ext);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/CertAndKeyGen.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1454,4 +1454,2 @@\n-        X509CertInfo signerCertInfo = (X509CertInfo)signerCertImpl.get(\n-                X509CertImpl.NAME + \".\" + X509CertImpl.INFO);\n-        X500Name issuer = (X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + \".\" +\n-                                           X509CertInfo.DN_NAME);\n+        X509CertInfo signerCertInfo = signerCertImpl.getInfo();\n+        X500Name issuer = signerCertInfo.getSubject();\n@@ -1470,6 +1468,4 @@\n-        info.set(X509CertInfo.VALIDITY, interval);\n-        info.set(X509CertInfo.SERIAL_NUMBER,\n-                CertificateSerialNumber.newRandom64bit(new SecureRandom()));\n-        info.set(X509CertInfo.VERSION,\n-                    new CertificateVersion(CertificateVersion.V3));\n-        info.set(X509CertInfo.ISSUER, issuer);\n+        info.setValidity(interval);\n+        info.setSerialNumber(CertificateSerialNumber.newRandom64bit(new SecureRandom()));\n+        info.setVersion(new CertificateVersion(CertificateVersion.V3));\n+        info.setIssuer(issuer);\n@@ -1501,3 +1497,2 @@\n-        info.set(X509CertInfo.KEY, new CertificateX509Key(req.getSubjectPublicKeyInfo()));\n-        info.set(X509CertInfo.SUBJECT,\n-                    dname==null?req.getSubjectName():new X500Name(dname));\n+        info.setKey(new CertificateX509Key(req.getSubjectPublicKeyInfo()));\n+        info.setSubject(dname==null?req.getSubjectName():new X500Name(dname));\n@@ -1543,1 +1538,1 @@\n-        info.set(X509CertInfo.EXTENSIONS, ext);\n+        info.setExtensions(ext);\n@@ -1570,4 +1565,2 @@\n-        X509CertInfo signerCertInfo = (X509CertInfo)signerCertImpl.get(\n-                X509CertImpl.NAME + \".\" + X509CertImpl.INFO);\n-        X500Name owner = (X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + \".\" +\n-                                                      X509CertInfo.DN_NAME);\n+        X509CertInfo signerCertInfo = signerCertImpl.getInfo();\n+        X500Name owner = signerCertInfo.getSubject();\n@@ -1592,1 +1585,1 @@\n-                ext.set(\"Reason\", new CRLReasonCodeExtension(Integer.parseInt(id.substring(d+1))));\n+                ext.setExtension(\"Reason\", new CRLReasonCodeExtension(Integer.parseInt(id.substring(d+1))));\n@@ -1973,4 +1966,2 @@\n-            X509CertInfo signerCertInfo = (X509CertInfo)signerCertImpl.get(\n-                    X509CertImpl.NAME + \".\" + X509CertImpl.INFO);\n-            X500Name signerSubjectName = (X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + \".\" +\n-                    X509CertInfo.DN_NAME);\n+            X509CertInfo signerCertInfo = signerCertImpl.getInfo();\n+            X500Name signerSubjectName = signerCertInfo.getSubject();\n@@ -2069,1 +2060,1 @@\n-     * @changePassword if the password can be changed\n+     * @param changePassword if the password can be changed\n@@ -2669,2 +2660,1 @@\n-        List<DistributionPoint> distPoints =\n-                ext.get(CRLDistributionPointsExtension.POINTS);\n+        List<DistributionPoint> distPoints = ext.getDistributionPoints();\n@@ -3205,3 +3195,1 @@\n-        X509CertInfo certInfo = (X509CertInfo)certImpl.get(X509CertImpl.NAME\n-                                                           + \".\" +\n-                                                           X509CertImpl.INFO);\n+        X509CertInfo certInfo = certImpl.getInfo();\n@@ -3214,1 +3202,1 @@\n-        certInfo.set(X509CertInfo.VALIDITY, interval);\n+        certInfo.setValidity(interval);\n@@ -3217,1 +3205,1 @@\n-        certInfo.set(X509CertInfo.SERIAL_NUMBER,\n+        certInfo.setSerialNumber(\n@@ -3224,2 +3212,1 @@\n-            owner = (X500Name)certInfo.get(X509CertInfo.SUBJECT + \".\" +\n-                                           X509CertInfo.DN_NAME);\n+            owner = certInfo.getSubject();\n@@ -3229,2 +3216,1 @@\n-            certInfo.set(X509CertInfo.SUBJECT + \".\" +\n-                         X509CertInfo.DN_NAME, owner);\n+            certInfo.setSubject(owner);\n@@ -3233,2 +3219,1 @@\n-        certInfo.set(X509CertInfo.ISSUER + \".\" +\n-                     X509CertInfo.DN_NAME, owner);\n+        certInfo.setIssuer(owner);\n@@ -3236,2 +3221,1 @@\n-        certInfo.set(X509CertInfo.VERSION,\n-                        new CertificateVersion(CertificateVersion.V3));\n+        certInfo.setVersion(new CertificateVersion(CertificateVersion.V3));\n@@ -3241,1 +3225,1 @@\n-                (CertificateExtensions)certInfo.get(X509CertInfo.EXTENSIONS),\n+                certInfo.getExtensions(),\n@@ -3245,1 +3229,1 @@\n-        certInfo.set(X509CertInfo.EXTENSIONS, ext);\n+        certInfo.setExtensions(ext);\n@@ -3508,1 +3492,1 @@\n-     * @prompt the prompt string printed\n+     * @param prompt the prompt string printed\n@@ -3637,5 +3621,2 @@\n-            X509CertInfo certInfo = (X509CertInfo)impl.get(X509CertImpl.NAME\n-                                                           + \".\" +\n-                                                           X509CertImpl.INFO);\n-            CertificateExtensions exts = (CertificateExtensions)\n-                    certInfo.get(X509CertInfo.EXTENSIONS);\n+            X509CertInfo certInfo = impl.getInfo();\n+            CertificateExtensions exts = certInfo.getExtensions();\n@@ -4511,3 +4492,2 @@\n-    private static void setExt(CertificateExtensions result, Extension ex)\n-            throws IOException {\n-        result.set(ex.getId(), ex);\n+    private static void setExt(CertificateExtensions result, Extension ex) {\n+        result.setExtension(ex.getId(), ex);\n@@ -4573,1 +4553,1 @@\n-                    request2.set(ex.getId(), ex);\n+                    request2.setExtension(ex.getId(), ex);\n@@ -4614,1 +4594,1 @@\n-                                Extension e = request2.get(n);\n+                                Extension e = request2.getExtension(n);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":32,"deletions":52,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -311,2 +311,1 @@\n-            Boolean val = ext.get(type);\n-            return val.booleanValue();\n+            return ext.get(type);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/SimpleValidator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.x509;\n-\n-import java.util.Vector;\n-\n-\/**\n- * <p>This class provides the Enumeration implementation used\n- * by all the X509 certificate attributes to return the attribute\n- * names contained within them.\n- *\n- * @author Amit Kapoor\n- * @author Hemma Prafullchandra\n- *\/\n-public class AttributeNameEnumeration extends Vector<String> {\n-\n-    @java.io.Serial\n-    private static final long serialVersionUID = -6067440240757099134L;\n-\n-    \/**\n-     * The default constructor for this class.\n-     *\/\n-    public AttributeNameEnumeration() {\n-        super(4,2);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AttributeNameEnumeration.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -66,1 +66,1 @@\n-        implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -68,10 +68,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                                \"x509.info.extensions.AuthorityInfoAccess\";\n-\n-    \/**\n-     * Attribute name.\n-     *\/\n@@ -79,1 +69,0 @@\n-    public static final String DESCRIPTIONS = \"descriptions\";\n@@ -139,1 +128,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -162,34 +151,1 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with an instanceof check\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            if (!(obj instanceof List)) {\n-                throw new IOException(\"Attribute value should be of type List.\");\n-            }\n-            accessDescriptions = (List<AccessDescription>)obj;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:AuthorityInfoAccessExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public List<AccessDescription> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            return accessDescriptions;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:AuthorityInfoAccessExtension.\");\n-        }\n-    }\n-\n-\n-\n-     \/\/ Encode this extension value\n+    \/\/ Encode this extension value\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityInfoAccessExtension.java","additions":3,"deletions":47,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -56,10 +56,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                         \"x509.info.extensions.AuthorityKeyIdentifier\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -67,3 +59,0 @@\n-    public static final String KEY_ID = \"key_id\";\n-    public static final String AUTH_NAME = \"auth_name\";\n-    public static final String SERIAL_NUMBER = \"serial_number\";\n@@ -229,27 +218,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            if (!(obj instanceof KeyIdentifier)) {\n-              throw new IOException(\"Attribute value should be of \" +\n-                                    \"type KeyIdentifier.\");\n-            }\n-            id = (KeyIdentifier)obj;\n-        } else if (name.equalsIgnoreCase(AUTH_NAME)) {\n-            if (!(obj instanceof GeneralNames)) {\n-              throw new IOException(\"Attribute value should be of \" +\n-                                    \"type GeneralNames.\");\n-            }\n-            names = (GeneralNames)obj;\n-        } else if (name.equalsIgnoreCase(SERIAL_NUMBER)) {\n-            if (!(obj instanceof SerialNumber)) {\n-              throw new IOException(\"Attribute value should be of \" +\n-                                    \"type SerialNumber.\");\n-            }\n-            serialNum = (SerialNumber)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:AuthorityKeyIdentifier.\");\n-        }\n-        encodeThis();\n+    public KeyIdentifier getKeyIdentifier() {\n+        return id;\n@@ -258,14 +222,2 @@\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            return (id);\n-        } else if (name.equalsIgnoreCase(AUTH_NAME)) {\n-            return (names);\n-        } else if (name.equalsIgnoreCase(SERIAL_NUMBER)) {\n-            return (serialNum);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:AuthorityKeyIdentifier.\");\n-        }\n+    public GeneralNames getAuthName() {\n+        return names;\n@@ -274,0 +226,3 @@\n+    public SerialNumber getSerialNumber() {\n+        return serialNum;\n+    }\n@@ -277,1 +232,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -281,1 +236,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityKeyIdentifierExtension.java","additions":11,"deletions":56,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -52,9 +52,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.BasicConstraints\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -62,2 +55,0 @@\n-    public static final String IS_CA = \"is_ca\";\n-    public static final String PATH_LEN = \"path_len\";\n@@ -201,19 +192,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(IS_CA)) {\n-            if (!(obj instanceof Boolean)) {\n-              throw new IOException(\"Attribute value should be of type Boolean.\");\n-            }\n-            ca = ((Boolean)obj).booleanValue();\n-        } else if (name.equalsIgnoreCase(PATH_LEN)) {\n-            if (!(obj instanceof Integer)) {\n-              throw new IOException(\"Attribute value should be of type Integer.\");\n-            }\n-            pathLen = ((Integer)obj).intValue();\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:BasicConstraints.\");\n-        }\n-        encodeThis();\n+    public boolean isCa() {\n+        return ca;\n@@ -222,12 +196,2 @@\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(IS_CA)) {\n-            return (Boolean.valueOf(ca));\n-        } else if (name.equalsIgnoreCase(PATH_LEN)) {\n-            return (Integer.valueOf(pathLen));\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:BasicConstraints.\");\n-        }\n+    public int getPathLen() {\n+        return pathLen;\n@@ -236,2 +200,0 @@\n-\n-\n@@ -239,1 +201,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -243,1 +205,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/BasicConstraintsExtension.java","additions":8,"deletions":46,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -84,10 +84,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                                \"x509.info.extensions.CRLDistributionPoints\";\n-\n-    \/**\n-     * Attribute name.\n-     *\/\n@@ -95,1 +85,0 @@\n-    public static final String POINTS = \"points\";\n@@ -188,1 +177,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -221,20 +210,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with instanceof\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(POINTS)) {\n-            if (!(obj instanceof List)) {\n-                throw new IOException(\"Attribute value should be of type List.\");\n-            }\n-            distributionPoints = (List<DistributionPoint>)obj;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                  \"] not recognized by \" +\n-                                  \"CertAttrSet:\" + extensionName + '.');\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n+   \/**\n+     * Get the DistributionPoint value.\n@@ -242,8 +213,2 @@\n-    public List<DistributionPoint> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POINTS)) {\n-            return distributionPoints;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                  \"] not recognized by \" +\n-                                  \"CertAttrSet:\" + extensionName + '.');\n-        }\n+    public List<DistributionPoint> getDistributionPoints() {\n+        return distributionPoints;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLDistributionPointsExtension.java","additions":6,"deletions":41,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -172,2 +172,1 @@\n-    public Extension get(String alias) {\n-        X509AttributeName attr = new X509AttributeName(alias);\n+    public Extension getExtension(String alias) {\n@@ -175,2 +174,1 @@\n-        String id = attr.getPrefix();\n-        if (id.equalsIgnoreCase(X509CertImpl.NAME)) { \/\/ fully qualified\n+        if (alias.startsWith(X509CertImpl.NAME)) {\n@@ -179,1 +177,1 @@\n-        } else\n+        } else {\n@@ -181,0 +179,1 @@\n+        }\n@@ -188,2 +187,1 @@\n-     * @param obj the Object to set the extension identified by the\n-     *        alias.\n+     * @param ext the extension identified by the alias.\n@@ -191,2 +189,2 @@\n-    public void set(String alias, Object obj) {\n-        map.put(alias, (Extension)obj);\n+    public void setExtension(String alias, Extension ext) {\n+        map.put(alias, ext);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLExtensions.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -49,3 +49,0 @@\n-    \/**\n-     * Attribute name.\n-     *\/\n@@ -53,1 +50,0 @@\n-    public static final String NUMBER = \"value\";\n@@ -138,1 +134,1 @@\n-     * Set the attribute value.\n+     * Get the crlNumber value.\n@@ -140,23 +136,2 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            if (!(obj instanceof BigInteger)) {\n-                throw new IOException(\"Attribute must be of type BigInteger.\");\n-            }\n-            crlNumber = (BigInteger)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by\" +\n-                                  \" CertAttrSet:\" + extensionName + '.');\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public BigInteger get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            return crlNumber;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by\" +\n-                                  \" CertAttrSet:\" + extensionName + '.');\n-        }\n+    public BigInteger getCrlNumber() {\n+        return crlNumber;\n@@ -209,1 +184,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -213,1 +188,1 @@\n-        return (extensionName);\n+        return extensionName;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLNumberExtension.java","additions":6,"deletions":31,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -44,3 +44,0 @@\n-    \/**\n-     * Attribute name\n-     *\/\n@@ -48,1 +45,0 @@\n-    public static final String REASON = \"reason\";\n@@ -105,29 +101,0 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Integer)) {\n-            throw new IOException(\"Attribute must be of type Integer.\");\n-        }\n-        if (name.equalsIgnoreCase(REASON)) {\n-            reasonCode = ((Integer)obj).intValue();\n-        } else {\n-            throw new IOException\n-                (\"Name not supported by CRLReasonCodeExtension\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Integer get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(REASON)) {\n-            return reasonCode;\n-        } else {\n-            throw new IOException\n-                (\"Name not supported by CRLReasonCodeExtension\");\n-        }\n-    }\n-\n-\n@@ -159,1 +126,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -177,0 +144,4 @@\n+\n+    public int getReason() {\n+        return reasonCode;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLReasonCodeExtension.java","additions":6,"deletions":35,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.security.cert.CertificateException;\n@@ -34,13 +33,1 @@\n- * This interface defines the methods required of a certificate attribute.\n- * Examples of X.509 certificate attributes are Validity, Issuer_Name, and\n- * Subject Name. A CertAttrSet may comprise one attribute or many\n- * attributes.\n- * <p>\n- * A CertAttrSet itself can also be comprised of other sub-sets.\n- * In the case of X.509 V3 certificates, for example, the \"extensions\"\n- * attribute has subattributes, such as those for KeyUsage and\n- * AuthorityKeyIdentifier.\n- *\n- * @author Amit Kapoor\n- * @author Hemma Prafullchandra\n- * @see CertificateException\n+ * This interface defines a certificate attribute that can be DER-encoded.\n@@ -48,1 +35,1 @@\n-public interface CertAttrSet<T> {\n+public interface CertAttrSet {\n@@ -51,2 +38,1 @@\n-     * Encodes the attribute to the output stream in a format\n-     * that can be parsed by the <code>decode<\/code> method.\n+     * Encodes the attribute to the output stream.\n@@ -55,26 +41,1 @@\n-     *\n-     * @exception CertificateException on encoding or validity errors.\n-     * @exception IOException on other errors.\n-     *\/\n-    void encode(DerOutputStream out)\n-        throws CertificateException, IOException;\n-\n-    \/**\n-     * Sets an attribute value within this CertAttrSet.\n-     *\n-     * @param name the name of the attribute (e.g. \"x509.info.key\")\n-     * @param obj the attribute object.\n-     *\n-     * @exception CertificateException on attribute handling errors.\n-     * @exception IOException on other errors.\n-     *\/\n-    void set(String name, Object obj)\n-        throws CertificateException, IOException;\n-\n-    \/**\n-     * Gets an attribute value for this CertAttrSet.\n-     *\n-     * @param name the name of the attribute to return.\n-     *\n-     * @exception CertificateException on attribute handling errors.\n-     * @exception IOException on other errors.\n+     * @exception IOException on write errors.\n@@ -82,2 +43,1 @@\n-    Object get(String name)\n-        throws CertificateException, IOException;\n+    void encode(DerOutputStream out) throws IOException;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertAttrSet.java","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public class CertificateAlgorithmId implements CertAttrSet<String> {\n+public class CertificateAlgorithmId implements CertAttrSet {\n@@ -42,8 +42,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.algorithmID\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n@@ -52,8 +44,0 @@\n-    \/**\n-     * Identifier to be used with get, set, and delete methods. When\n-     * using this identifier the associated object being passed in or\n-     * returned is an instance of AlgorithmId.\n-     * @see sun.security.x509.AlgorithmId\n-     *\/\n-    public static final String ALGORITHM = \"algorithm\";\n-\n@@ -112,16 +96,1 @@\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof AlgorithmId)) {\n-            throw new IOException(\"Attribute must be of type AlgorithmId.\");\n-        }\n-        if (name.equalsIgnoreCase(ALGORITHM)) {\n-            algId = (AlgorithmId)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                              \"CertAttrSet:CertificateAlgorithmId.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n+     * Get the AlgorithmId value.\n@@ -129,7 +98,2 @@\n-    public AlgorithmId get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ALGORITHM)) {\n-            return (algId);\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                               \"CertAttrSet:CertificateAlgorithmId.\");\n-        }\n+    public AlgorithmId getAlgId() throws IOException {\n+        return algId;\n@@ -137,1 +101,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateAlgorithmId.java","additions":4,"deletions":41,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -43,9 +43,2 @@\n-public class CertificateExtensions implements CertAttrSet<Extension> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions\";\n-    \/**\n-     * name\n-     *\/\n+public class CertificateExtensions implements CertAttrSet {\n+\n@@ -151,2 +144,1 @@\n-    public void encode(DerOutputStream out)\n-            throws CertificateException, IOException {\n+    public void encode(DerOutputStream out) throws IOException {\n@@ -165,1 +157,1 @@\n-    throws CertificateException, IOException {\n+            throws IOException {\n@@ -182,1 +174,1 @@\n-     * Set the attribute value.\n+     * Set the extension value.\n@@ -184,2 +176,1 @@\n-     * @param obj the object to set.\n-     * @exception IOException if the object could not be cached.\n+     * @param ext the extension to set.\n@@ -187,6 +178,2 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (obj instanceof Extension) {\n-            map.put(name, (Extension)obj);\n-        } else {\n-            throw new IOException(\"Unknown extension type.\");\n-        }\n+    public void setExtension(String name, Extension ext) {\n+        map.put(name, ext);\n@@ -196,3 +183,5 @@\n-     * Get the attribute value.\n-     * @param name the extension name used in the lookup.\n-     * @exception IOException if named extension is not found.\n+     * Get the extension with this alias.\n+     *\n+     * @param alias the identifier string for the extension to retrieve.\n+     *              Could be one of \"x509.info.extensions.ExtensionName\",\n+     *              \"ExtensionName\", \"2.3.4.5\".\n@@ -200,4 +189,7 @@\n-    public Extension get(String name) throws IOException {\n-        Extension obj = map.get(name);\n-        if (obj == null) {\n-            throw new IOException(\"No extension found with name \" + name);\n+    public Extension getExtension(String alias) {\n+        String name;\n+        if (alias.startsWith(X509CertImpl.NAME)) {\n+            int index = alias.lastIndexOf('.');\n+            name = alias.substring(index + 1);\n+        } else {\n+            name = alias;\n@@ -205,6 +197,0 @@\n-        return (obj);\n-    }\n-\n-    \/\/ Similar to get(String), but throw no exception, might return null.\n-    \/\/ Used in X509CertImpl::getExtension(OID).\n-    Extension getExtension(String name) {\n@@ -215,1 +201,1 @@\n-     * Delete the attribute value.\n+     * Delete the extension value.\n@@ -313,1 +299,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateExtensions.java","additions":21,"deletions":36,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -64,3 +64,0 @@\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -68,1 +65,0 @@\n-    public static final String ISSUER = \"issuer\";\n@@ -118,31 +114,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\n-     * @throws IOException on error\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER)) {\n-            if (!(obj instanceof GeneralNames)) {\n-                throw new IOException(\"Attribute value must be of type \" +\n-                    \"GeneralNames\");\n-            }\n-            this.names = (GeneralNames)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:CertificateIssuer\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Gets the attribute value.\n-     *\n-     * @throws IOException on error\n-     *\/\n-    public GeneralNames get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER)) {\n-            return names;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:CertificateIssuer\");\n-        }\n+    public GeneralNames getNames() {\n+        return names;\n@@ -151,1 +118,0 @@\n-\n@@ -178,1 +144,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateIssuerExtension.java","additions":4,"deletions":38,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.x509;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n-import javax.security.auth.x500.X500Principal;\n-\n-import sun.security.util.*;\n-\n-\/**\n- * This class defines the X500Name attribute for the Certificate.\n- *\n- * @author Amit Kapoor\n- * @author Hemma Prafullchandra\n- * @see CertAttrSet\n- *\/\n-public class CertificateIssuerName implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.issuer\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n-    public static final String NAME = \"issuer\";\n-    public static final String DN_NAME = \"dname\";\n-\n-    \/\/ accessor name for cached X500Principal only\n-    \/\/ do not allow a set() of this value\n-    public static final String DN_PRINCIPAL = \"x500principal\";\n-\n-    \/\/ Private data member\n-    private X500Name    dnName;\n-\n-    \/\/ cached X500Principal version of the name\n-    private X500Principal dnPrincipal;\n-\n-    \/**\n-     * Default constructor for the certificate attribute.\n-     *\n-     * @param name the X500Name\n-     *\/\n-    public CertificateIssuerName(X500Name name) {\n-        this.dnName = name;\n-    }\n-\n-    \/**\n-     * Create the object, decoding the values from the passed DER stream.\n-     *\n-     * @param in the DerInputStream to read the X500Name from.\n-     * @exception IOException on decoding errors.\n-     *\/\n-    public CertificateIssuerName(DerInputStream in) throws IOException {\n-        dnName = new X500Name(in);\n-    }\n-\n-    \/**\n-     * Create the object, decoding the values from the passed stream.\n-     *\n-     * @param in the InputStream to read the X500Name from.\n-     * @exception IOException on decoding errors.\n-     *\/\n-    public CertificateIssuerName(InputStream in) throws IOException {\n-        DerValue derVal = new DerValue(in);\n-        dnName = new X500Name(derVal);\n-    }\n-\n-    \/**\n-     * Return the name as user readable string.\n-     *\/\n-    public String toString() {\n-        if (dnName == null) return \"\";\n-        return(dnName.toString());\n-    }\n-\n-    \/**\n-     * Encode the name in DER form to the stream.\n-     *\n-     * @param out the DerOutputStream to marshal the contents to.\n-     * @exception IOException on errors.\n-     *\/\n-    @Override\n-    public void encode(DerOutputStream out) throws IOException {\n-        dnName.encode(out);\n-    }\n-\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof X500Name)) {\n-            throw new IOException(\"Attribute must be of type X500Name.\");\n-        }\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            this.dnName = (X500Name)obj;\n-            this.dnPrincipal = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateIssuerName.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            return(dnName);\n-        } else if (name.equalsIgnoreCase(DN_PRINCIPAL)) {\n-            if ((dnPrincipal == null) && (dnName != null)) {\n-                dnPrincipal = dnName.asX500Principal();\n-            }\n-            return dnPrincipal;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateIssuerName.\");\n-        }\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateIssuerName.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -69,9 +69,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.CertificatePolicies\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -79,1 +72,0 @@\n-    public static final String POLICIES = \"policies\";\n@@ -190,1 +182,1 @@\n-     * Set the attribute value.\n+     * Get the PolicyInformation value.\n@@ -192,27 +184,3 @@\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with an instanceof check\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(POLICIES)) {\n-            if (!(obj instanceof List)) {\n-                throw new IOException(\"Attribute value should be of type List.\");\n-            }\n-            certPolicies = (List<PolicyInformation>)obj;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:CertificatePoliciesExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public List<PolicyInformation> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POLICIES)) {\n-            \/\/XXXX May want to consider cloning this\n-            return certPolicies;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:CertificatePoliciesExtension.\");\n-        }\n+    public List<PolicyInformation> getCertPolicies() {\n+        \/\/XXXX May want to consider cloning this\n+        return certPolicies;\n@@ -224,1 +192,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -228,1 +196,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificatePoliciesExtension.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -41,6 +41,1 @@\n-public class CertificateSerialNumber implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.serialNumber\";\n+public class CertificateSerialNumber implements CertAttrSet {\n@@ -48,3 +43,0 @@\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n@@ -52,1 +44,0 @@\n-    public static final String NUMBER = \"number\";\n@@ -109,1 +100,1 @@\n-        return (serial.toString());\n+        return serial.toString();\n@@ -123,25 +114,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof SerialNumber)) {\n-            throw new IOException(\"Attribute must be of type SerialNumber.\");\n-        }\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            serial = (SerialNumber)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:CertificateSerialNumber.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public SerialNumber get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            return (serial);\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:CertificateSerialNumber.\");\n-        }\n+    public SerialNumber getSerial() {\n+        return serial;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateSerialNumber.java","additions":4,"deletions":36,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -42,11 +42,1 @@\n-public class CertificateSubjectName implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.subject\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n-    public static final String NAME = \"subject\";\n-    public static final String DN_NAME = \"dname\";\n+public class CertificateSubjectName implements CertAttrSet {\n@@ -54,3 +44,1 @@\n-    \/\/ accessor name for cached X500Principal only\n-    \/\/ do not allow a set() of this value\n-    public static final String DN_PRINCIPAL = \"x500principal\";\n+    public static final String NAME = \"subject\";\n@@ -99,1 +87,1 @@\n-        return(dnName.toString());\n+        return dnName.toString();\n@@ -112,33 +100,0 @@\n-\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof X500Name)) {\n-            throw new IOException(\"Attribute must be of type X500Name.\");\n-        }\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            this.dnName = (X500Name)obj;\n-            this.dnPrincipal = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateSubjectName.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            return(dnName);\n-        } else if (name.equalsIgnoreCase(DN_PRINCIPAL)) {\n-            if ((dnPrincipal == null) && (dnName != null)) {\n-                dnPrincipal = dnName.asX500Principal();\n-            }\n-            return dnPrincipal;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateSubjectName.\");\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateSubjectName.java","additions":3,"deletions":48,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -40,9 +40,2 @@\n-public class CertificateValidity implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.validity\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n+public class CertificateValidity implements CertAttrSet {\n+\n@@ -50,2 +43,0 @@\n-    public static final String NOT_BEFORE = \"notBefore\";\n-    public static final String NOT_AFTER = \"notAfter\";\n@@ -62,2 +53,2 @@\n-    private Date getNotBefore() {\n-        return (new Date(notBefore.getTime()));\n+    public Date getNotBefore() {\n+        return new Date(notBefore.getTime());\n@@ -67,2 +58,2 @@\n-    private Date getNotAfter() {\n-       return (new Date(notAfter.getTime()));\n+    public Date getNotAfter() {\n+       return new Date(notAfter.getTime());\n@@ -172,31 +163,0 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Date)) {\n-            throw new IOException(\"Attribute must be of type Date.\");\n-        }\n-        if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-            notBefore = (Date)obj;\n-        } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-            notAfter = (Date)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                            \"CertAttrSet: CertificateValidity.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Date get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-            return (getNotBefore());\n-        } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-            return (getNotAfter());\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                            \"CertAttrSet: CertificateValidity.\");\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateValidity.java","additions":6,"deletions":46,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class CertificateVersion implements CertAttrSet<String> {\n+public class CertificateVersion implements CertAttrSet {\n@@ -53,8 +53,1 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.version\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n+\n@@ -62,1 +55,0 @@\n-    public static final String VERSION = \"number\";\n@@ -68,2 +60,2 @@\n-    private int getVersion() {\n-        return(version);\n+    public int getVersion() {\n+        return version;\n@@ -150,1 +142,1 @@\n-        return(\"Version: V\" + (version+1));\n+        return \"Version: V\" + (version+1);\n@@ -172,28 +164,1 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Integer)) {\n-            throw new IOException(\"Attribute must be of type Integer.\");\n-        }\n-        if (name.equalsIgnoreCase(VERSION)) {\n-            version = ((Integer)obj).intValue();\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateVersion.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Integer get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(VERSION)) {\n-            return(getVersion());\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateVersion.\");\n-        }\n-    }\n-\n-    \/**\n+   \/**\n@@ -203,1 +168,1 @@\n-        return(version - vers);\n+        return version - vers;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateVersion.java","additions":7,"deletions":42,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -41,9 +41,2 @@\n-public class CertificateX509Key implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.key\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n+public class CertificateX509Key implements CertAttrSet {\n+\n@@ -51,1 +44,0 @@\n-    public static final String KEY = \"value\";\n@@ -92,1 +84,1 @@\n-        return(key.toString());\n+        return key.toString();\n@@ -106,14 +98,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(KEY)) {\n-            this.key = (PublicKey)obj;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateX509Key.\");\n-        }\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n+   \/**\n+     * Get the PublicKey value.\n@@ -121,7 +101,2 @@\n-    public PublicKey get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(KEY)) {\n-            return(key);\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateX509Key.\");\n-        }\n+    public PublicKey getKey() {\n+        return key;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateX509Key.java","additions":7,"deletions":32,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -62,3 +62,0 @@\n-    \/**\n-     * Attribute name.\n-     *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/DeltaCRLIndicatorExtension.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -82,9 +82,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.ExtendedKeyUsage\";\n-\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -92,1 +83,0 @@\n-    public static final String USAGES = \"usages\";\n@@ -210,1 +200,1 @@\n-     * Set the attribute value.\n+     * Get the keyUsages value.\n@@ -212,27 +202,3 @@\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with instanceof\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(USAGES)) {\n-            if (!(obj instanceof Vector)) {\n-                throw new IOException(\"Attribute value should be of type Vector.\");\n-            }\n-            this.keyUsages = (Vector<ObjectIdentifier>)obj;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:ExtendedKeyUsageExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Vector<ObjectIdentifier> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(USAGES)) {\n-            \/\/XXXX May want to consider cloning this\n-            return keyUsages;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:ExtendedKeyUsageExtension.\");\n-        }\n+    public Vector<ObjectIdentifier> getUsages() {\n+        \/\/XXXX May want to consider cloning this\n+        return keyUsages;\n@@ -244,1 +210,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -248,1 +214,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/ExtendedKeyUsageExtension.java","additions":7,"deletions":41,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -60,9 +60,1 @@\n-implements CertAttrSet<String> {\n-\n-    private static final Debug debug = Debug.getInstance(\"certpath\");\n-\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.InhibitAnyPolicy\";\n+        implements CertAttrSet {\n@@ -76,3 +68,0 @@\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -80,1 +69,0 @@\n-    public static final String SKIP_CERTS = \"skip_certs\";\n@@ -148,22 +136,0 @@\n-     \/**\n-      * Return user readable form of extension.\n-      *\/\n-     public String toString() {\n-         return super.toString() + \"InhibitAnyPolicy: \" + skipCerts + \"\\n\";\n-     }\n-\n-     \/**\n-      * Encode this extension value to the output stream.\n-      *\n-      * @param out the DerOutputStream to encode the extension to.\n-      *\/\n-     @Override\n-     public void encode(DerOutputStream out) throws IOException {\n-         if (extensionValue == null) {\n-             this.extensionId = PKIXExtensions.InhibitAnyPolicy_Id;\n-             critical = true;\n-             encodeThis();\n-         }\n-         super.encode(out);\n-     }\n-\n@@ -171,6 +137,1 @@\n-     * Set the attribute value.\n-     *\n-     * @param name name of attribute to set. Must be SKIP_CERTS.\n-     * @param obj  value to which attribute is to be set.  Must be Integer\n-     *             type.\n-     * @throws IOException on error\n+     * Return user readable form of extension.\n@@ -178,16 +139,2 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(SKIP_CERTS)) {\n-            if (!(obj instanceof Integer))\n-                throw new IOException(\"Attribute value should be of type Integer.\");\n-            int skipCertsValue = ((Integer)obj).intValue();\n-            if (skipCertsValue < -1)\n-                throw new IOException(\"Invalid value for skipCerts\");\n-            if (skipCertsValue == -1) {\n-                skipCerts = Integer.MAX_VALUE;\n-            } else {\n-                skipCerts = skipCertsValue;\n-            }\n-        } else\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:InhibitAnyPolicy.\");\n-        encodeThis();\n+    public String toString() {\n+        return super.toString() + \"InhibitAnyPolicy: \" + skipCerts + \"\\n\";\n@@ -197,1 +144,1 @@\n-     * Get the attribute value.\n+     * Encode this extension value to the output stream.\n@@ -199,4 +146,1 @@\n-     * @param name name of attribute to get.  Must be SKIP_CERTS.\n-     * @return value of the attribute.  In this case it will be of type\n-     *          Integer.\n-     * @throws IOException on error\n+     * @param out the DerOutputStream to encode the extension to.\n@@ -204,6 +148,8 @@\n-    public Integer get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(SKIP_CERTS))\n-            return (skipCerts);\n-        else\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:InhibitAnyPolicy.\");\n+    @Override\n+    public void encode(DerOutputStream out) throws IOException {\n+        if (extensionValue == null) {\n+            this.extensionId = PKIXExtensions.InhibitAnyPolicy_Id;\n+            critical = true;\n+            encodeThis();\n+        }\n+        super.encode(out);\n@@ -212,1 +158,3 @@\n-\n+    public int getSkipCerts() {\n+        return skipCerts;\n+    }\n@@ -215,1 +163,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -217,1 +165,1 @@\n-     * @return name of attribute.\n+     * @return name of extension.\n@@ -221,1 +169,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InhibitAnyPolicyExtension.java","additions":20,"deletions":72,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -65,1 +65,0 @@\n-    public static final String DATE = \"date\";\n@@ -121,1 +120,1 @@\n-     * Set the attribute value.\n+     * Get the Date value.\n@@ -123,23 +122,3 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Date)) {\n-            throw new IOException(\"Attribute must be of type Date.\");\n-        }\n-        if (name.equalsIgnoreCase(DATE)) {\n-            date = (Date) obj;\n-        } else {\n-            throw new IOException\n-                (\"Name not supported by InvalidityDateExtension\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Date get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DATE)) {\n-            if (date == null) {\n-                return null;\n-            } else {\n-                return (new Date(date.getTime()));    \/\/ clone\n-            }\n+    public Date getDate() throws IOException {\n+        if (date == null) {\n+            return null;\n@@ -147,2 +126,1 @@\n-            throw new IOException\n-                (\"Name not supported by InvalidityDateExtension\");\n+            return new Date(date.getTime());    \/\/ clone\n@@ -178,1 +156,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InvalidityDateExtension.java","additions":7,"deletions":29,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -49,10 +49,2 @@\n-extends Extension implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                         \"x509.info.extensions.IssuerAlternativeName\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        extends Extension implements CertAttrSet {\n+\n@@ -60,1 +52,0 @@\n-    public static final String ISSUER_NAME = \"issuer_name\";\n@@ -173,15 +164,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER_NAME)) {\n-            if (!(obj instanceof GeneralNames)) {\n-              throw new IOException(\"Attribute value should be of\" +\n-                                    \" type GeneralNames.\");\n-            }\n-            names = (GeneralNames)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:IssuerAlternativeName.\");\n-        }\n-        encodeThis();\n+    public GeneralNames getNames() {\n+        return names;\n@@ -191,15 +169,1 @@\n-     * Get the attribute value.\n-     *\/\n-    public GeneralNames get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER_NAME)) {\n-            return (names);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:IssuerAlternativeName.\");\n-        }\n-    }\n-\n-\n-\n-    \/**\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -209,1 +173,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuerAlternativeNameExtension.java","additions":6,"deletions":42,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -69,10 +69,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                                \"x509.info.extensions.IssuingDistributionPoint\";\n-\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -80,6 +70,0 @@\n-    public static final String POINT = \"point\";\n-    public static final String REASONS = \"reasons\";\n-    public static final String ONLY_USER_CERTS = \"only_user_certs\";\n-    public static final String ONLY_CA_CERTS = \"only_ca_certs\";\n-    public static final String ONLY_ATTRIBUTE_CERTS = \"only_attribute_certs\";\n-    public static final String INDIRECT_CRL = \"indirect_crl\";\n@@ -221,1 +205,1 @@\n-     * Returns the name of this attribute.\n+     * Returns the name of this extension.\n@@ -245,51 +229,2 @@\n-    \/**\n-     * Sets the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(POINT)) {\n-            if (!(obj instanceof DistributionPointName)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type DistributionPointName.\");\n-            }\n-            distributionPoint = (DistributionPointName)obj;\n-\n-        } else if (name.equalsIgnoreCase(REASONS)) {\n-            if (!(obj instanceof ReasonFlags)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type ReasonFlags.\");\n-            }\n-            revocationReasons = (ReasonFlags)obj;\n-\n-        } else if (name.equalsIgnoreCase(INDIRECT_CRL)) {\n-            if (!(obj instanceof Boolean)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type Boolean.\");\n-            }\n-            isIndirectCRL = ((Boolean)obj).booleanValue();\n-\n-        } else if (name.equalsIgnoreCase(ONLY_USER_CERTS)) {\n-            if (!(obj instanceof Boolean)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type Boolean.\");\n-            }\n-            hasOnlyUserCerts = ((Boolean)obj).booleanValue();\n-\n-        } else if (name.equalsIgnoreCase(ONLY_CA_CERTS)) {\n-            if (!(obj instanceof Boolean)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type Boolean.\");\n-            }\n-            hasOnlyCACerts = ((Boolean)obj).booleanValue();\n-\n-        } else if (name.equalsIgnoreCase(ONLY_ATTRIBUTE_CERTS)) {\n-            if (!(obj instanceof Boolean)) {\n-                throw new IOException(\n-                    \"Attribute value should be of type Boolean.\");\n-            }\n-            hasOnlyAttributeCerts = ((Boolean)obj).booleanValue();\n-\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by \" +\n-                \"CertAttrSet:IssuingDistributionPointExtension.\");\n-        }\n+    public void setRevocationReasons(ReasonFlags val) throws IOException {\n+        revocationReasons = val;\n@@ -299,15 +234,3 @@\n-    \/**\n-     * Gets the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POINT)) {\n-            return distributionPoint;\n-\n-        } else if (name.equalsIgnoreCase(INDIRECT_CRL)) {\n-            return Boolean.valueOf(isIndirectCRL);\n-\n-        } else if (name.equalsIgnoreCase(REASONS)) {\n-            return revocationReasons;\n-\n-        } else if (name.equalsIgnoreCase(ONLY_USER_CERTS)) {\n-            return Boolean.valueOf(hasOnlyUserCerts);\n+    public DistributionPointName getDistributionPoint() {\n+        return distributionPoint;\n+    }\n@@ -315,2 +238,3 @@\n-        } else if (name.equalsIgnoreCase(ONLY_CA_CERTS)) {\n-            return Boolean.valueOf(hasOnlyCACerts);\n+    public ReasonFlags getRevocationReasons() {\n+        return revocationReasons;\n+    }\n@@ -318,2 +242,3 @@\n-        } else if (name.equalsIgnoreCase(ONLY_ATTRIBUTE_CERTS)) {\n-            return Boolean.valueOf(hasOnlyAttributeCerts);\n+    public boolean hasOnlyUserCerts() {\n+        return hasOnlyUserCerts;\n+    }\n@@ -321,5 +246,2 @@\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by \" +\n-                \"CertAttrSet:IssuingDistributionPointExtension.\");\n-        }\n+    public boolean hasOnlyCACerts() {\n+        return hasOnlyCACerts;\n@@ -328,0 +250,3 @@\n+    public boolean hasOnlyAttributeCerts() {\n+        return hasOnlyAttributeCerts;\n+    }\n@@ -329,0 +254,3 @@\n+    public boolean isIndirectCRL() {\n+        return isIndirectCRL;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuingDistributionPointExtension.java","additions":21,"deletions":93,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -49,8 +49,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.KeyUsage\";\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -186,5 +178,1 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Boolean)) {\n-            throw new IOException(\"Attribute must be of type Boolean.\");\n-        }\n-        boolean val = ((Boolean)obj).booleanValue();\n+    public void set(String name, boolean val) throws IOException {\n@@ -219,1 +207,1 @@\n-    public Boolean get(String name) throws IOException {\n+    public boolean get(String name) throws IOException {\n@@ -221,1 +209,1 @@\n-            return Boolean.valueOf(isSet(0));\n+            return isSet(0);\n@@ -223,1 +211,1 @@\n-            return Boolean.valueOf(isSet(1));\n+            return isSet(1);\n@@ -225,1 +213,1 @@\n-            return Boolean.valueOf(isSet(2));\n+            return isSet(2);\n@@ -227,1 +215,1 @@\n-            return Boolean.valueOf(isSet(3));\n+            return isSet(3);\n@@ -229,1 +217,1 @@\n-            return Boolean.valueOf(isSet(4));\n+            return isSet(4);\n@@ -231,1 +219,1 @@\n-            return Boolean.valueOf(isSet(5));\n+            return isSet(5);\n@@ -233,1 +221,1 @@\n-            return Boolean.valueOf(isSet(6));\n+            return isSet(6);\n@@ -235,1 +223,1 @@\n-            return Boolean.valueOf(isSet(7));\n+            return isSet(7);\n@@ -237,1 +225,1 @@\n-            return Boolean.valueOf(isSet(8));\n+            return isSet(8);\n@@ -308,1 +296,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -312,1 +300,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/KeyUsageExtension.java","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -63,9 +63,2 @@\n-implements CertAttrSet<String>, Cloneable {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.NameConstraints\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet, Cloneable {\n+\n@@ -73,2 +66,0 @@\n-    public static final String PERMITTED_SUBTREES = \"permitted_subtrees\";\n-    public static final String EXCLUDED_SUBTREES = \"excluded_subtrees\";\n@@ -247,21 +238,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(PERMITTED_SUBTREES)) {\n-            if (!(obj instanceof GeneralSubtrees)) {\n-                throw new IOException(\"Attribute value should be\"\n-                                    + \" of type GeneralSubtrees.\");\n-            }\n-            permitted = (GeneralSubtrees)obj;\n-        } else if (name.equalsIgnoreCase(EXCLUDED_SUBTREES)) {\n-            if (!(obj instanceof GeneralSubtrees)) {\n-                throw new IOException(\"Attribute value should be \"\n-                                    + \"of type GeneralSubtrees.\");\n-            }\n-            excluded = (GeneralSubtrees)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:NameConstraintsExtension.\");\n-        }\n-        encodeThis();\n+    public GeneralSubtrees getPermittedSubtrees() {\n+        return permitted;\n@@ -270,12 +242,2 @@\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public GeneralSubtrees get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(PERMITTED_SUBTREES)) {\n-            return (permitted);\n-        } else if (name.equalsIgnoreCase(EXCLUDED_SUBTREES)) {\n-            return (excluded);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:NameConstraintsExtension.\");\n-        }\n+    public GeneralSubtrees getExcludedSubtrees() {\n+        return excluded;\n@@ -284,2 +246,0 @@\n-\n-\n@@ -287,1 +247,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -291,1 +251,1 @@\n-        return (NAME);\n+        return NAME;\n@@ -330,1 +290,1 @@\n-        GeneralSubtrees newExcluded = newConstraints.get(EXCLUDED_SUBTREES);\n+        GeneralSubtrees newExcluded = newConstraints.getExcludedSubtrees();\n@@ -347,1 +307,1 @@\n-        GeneralSubtrees newPermitted = newConstraints.get(PERMITTED_SUBTREES);\n+        GeneralSubtrees newPermitted = newConstraints.getPermittedSubtrees();\n@@ -435,2 +395,1 @@\n-                altNames = altNameExt.get(\n-                        SubjectAlternativeNameExtension.SUBJECT_NAME);\n+                altNames = altNameExt.getNames();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NameConstraintsExtension.java","additions":11,"deletions":52,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -53,9 +53,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.NetscapeCertType\";\n-\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -202,5 +193,1 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Boolean))\n-            throw new IOException(\"Attribute must be of type Boolean.\");\n-\n-        boolean val = ((Boolean)obj).booleanValue();\n+    public void set(String name, Boolean val) throws IOException {\n@@ -214,2 +201,2 @@\n-    public Boolean get(String name) throws IOException {\n-        return Boolean.valueOf(isSet(getPosition(name)));\n+    public boolean get(String name) throws IOException {\n+        return isSet(getPosition(name));\n@@ -218,1 +205,0 @@\n-\n@@ -271,1 +257,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -275,1 +261,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NetscapeCertTypeExtension.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -53,9 +53,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                         \"x509.info.extensions.OCSPNoCheck\";\n-    \/**\n-     * Attribute names.\n-     *\/\n@@ -91,19 +82,1 @@\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        throw new IOException(\"No attribute is allowed by \" +\n-                        \"CertAttrSet:OCSPNoCheckExtension.\");\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        throw new IOException(\"No attribute is allowed by \" +\n-                        \"CertAttrSet:OCSPNoCheckExtension.\");\n-    }\n-\n-\n-\n-    \/**\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/OCSPNoCheckExtension.java","additions":2,"deletions":29,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -56,9 +56,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.PolicyConstraints\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -66,2 +59,0 @@\n-    public static final String REQUIRE = \"require\";\n-    public static final String INHIBIT = \"inhibit\";\n@@ -212,17 +203,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (!(obj instanceof Integer)) {\n-            throw new IOException(\"Attribute value should be of type Integer.\");\n-        }\n-        if (name.equalsIgnoreCase(REQUIRE)) {\n-            require = ((Integer)obj).intValue();\n-        } else if (name.equalsIgnoreCase(INHIBIT)) {\n-            inhibit = ((Integer)obj).intValue();\n-        } else {\n-          throw new IOException(\"Attribute name \" + \"[\" + name + \"]\" +\n-                                \" not recognized by \" +\n-                                \"CertAttrSet:PolicyConstraints.\");\n-        }\n-        encodeThis();\n+    public int getRequire() {\n+        return require;\n@@ -231,12 +207,2 @@\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Integer get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(REQUIRE)) {\n-            return require;\n-        } else if (name.equalsIgnoreCase(INHIBIT)) {\n-            return inhibit;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:PolicyConstraints.\");\n-        }\n+    public int getInhibit() {\n+        return inhibit;\n@@ -245,2 +211,0 @@\n-\n-\n@@ -248,1 +212,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -252,1 +216,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyConstraintsExtension.java","additions":8,"deletions":44,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -169,48 +169,0 @@\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public Object get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ID)) {\n-            return policyIdentifier;\n-        } else if (name.equalsIgnoreCase(QUALIFIERS)) {\n-            return policyQualifiers;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by PolicyInformation.\");\n-        }\n-    }\n-\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with instanceof\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(ID)) {\n-            if (obj instanceof CertificatePolicyId)\n-                policyIdentifier = (CertificatePolicyId)obj;\n-            else\n-                throw new IOException(\"Attribute value must be instance \" +\n-                    \"of CertificatePolicyId.\");\n-        } else if (name.equalsIgnoreCase(QUALIFIERS)) {\n-            if (policyIdentifier == null) {\n-                throw new IOException(\"Attribute must have a \" +\n-                    \"CertificatePolicyIdentifier value before \" +\n-                    \"PolicyQualifierInfo can be set.\");\n-            }\n-            if (obj instanceof Set) {\n-                for (Object obj1 : (Set<?>) obj) {\n-                    if (!(obj1 instanceof PolicyQualifierInfo)) {\n-                        throw new IOException(\"Attribute value must be a \" +\n-                                    \"Set of PolicyQualifierInfo objects.\");\n-                    }\n-                }\n-                policyQualifiers = (Set<PolicyQualifierInfo>) obj;\n-            } else {\n-                throw new IOException(\"Attribute value must be of type Set.\");\n-            }\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by PolicyInformation\");\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyInformation.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -53,9 +53,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.PolicyMappings\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -63,1 +56,0 @@\n-    public static final String MAP = \"map\";\n@@ -160,28 +152,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with instanceof\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(MAP)) {\n-            if (!(obj instanceof List)) {\n-              throw new IOException(\"Attribute value should be of\" +\n-                                    \" type List.\");\n-            }\n-            maps = (List<CertificatePolicyMap>)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:PolicyMappingsExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public List<CertificatePolicyMap> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(MAP)) {\n-            return (maps);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:PolicyMappingsExtension.\");\n-        }\n+    public List<CertificatePolicyMap> getMaps() {\n+        return maps;\n@@ -191,1 +157,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -195,1 +161,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyMappingsExtension.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -61,9 +61,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info.extensions.PrivateKeyUsage\";\n-    \/**\n-     * Sub attributes name for this CertAttrSet.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -71,2 +64,0 @@\n-    public static final String NOT_BEFORE = \"not_before\";\n-    public static final String NOT_AFTER = \"not_after\";\n@@ -251,18 +242,2 @@\n-    \/**\n-     * Set the attribute value.\n-     * @exception CertificateException on attribute handling errors.\n-     *\/\n-    public void set(String name, Object obj)\n-    throws CertificateException, IOException {\n-        if (!(obj instanceof Date)) {\n-            throw new CertificateException(\"Attribute must be of type Date.\");\n-        }\n-        if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-            notBefore = (Date)obj;\n-        } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-            notAfter = (Date)obj;\n-        } else {\n-          throw new CertificateException(\"Attribute name not recognized by\"\n-                           + \" CertAttrSet:PrivateKeyUsage.\");\n-        }\n-        encodeThis();\n+    public Date getNotBefore() {\n+        return new Date(notBefore.getTime());\n@@ -271,16 +246,3 @@\n-    \/**\n-     * Get the attribute value.\n-     * @exception CertificateException on attribute handling errors.\n-     *\/\n-    public Date get(String name) throws CertificateException {\n-      if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-          return (new Date(notBefore.getTime()));\n-      } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-          return (new Date(notAfter.getTime()));\n-      } else {\n-          throw new CertificateException(\"Attribute name not recognized by\"\n-                           + \" CertAttrSet:PrivateKeyUsage.\");\n-      }\n-  }\n-\n-\n+    public Date getNotAfter() {\n+        return new Date(notAfter.getTime());\n+    }\n@@ -289,1 +251,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -293,1 +255,1 @@\n-      return(NAME);\n+      return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PrivateKeyUsageExtension.java","additions":9,"deletions":47,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -54,10 +54,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                         \"x509.info.extensions.SubjectAlternativeName\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -65,1 +57,0 @@\n-    public static final String SUBJECT_NAME = \"subject_name\";\n@@ -176,1 +167,1 @@\n-     * Set the attribute value.\n+     * Get the GeneralNames value.\n@@ -178,24 +169,2 @@\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(SUBJECT_NAME)) {\n-            if (!(obj instanceof GeneralNames)) {\n-              throw new IOException(\"Attribute value should be of \" +\n-                                    \"type GeneralNames.\");\n-            }\n-            names = (GeneralNames)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:SubjectAlternativeName.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public GeneralNames get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(SUBJECT_NAME)) {\n-            return (names);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:SubjectAlternativeName.\");\n-        }\n+    public GeneralNames getNames() {\n+        return names;\n@@ -207,1 +176,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -211,1 +180,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectAlternativeNameExtension.java","additions":7,"deletions":38,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        implements CertAttrSet<String> {\n+        implements CertAttrSet {\n@@ -72,10 +72,0 @@\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                                \"x509.info.extensions.SubjectInfoAccess\";\n-\n-    \/**\n-     * Attribute name.\n-     *\/\n@@ -83,1 +73,0 @@\n-    public static final String DESCRIPTIONS = \"descriptions\";\n@@ -143,1 +132,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -166,34 +155,1 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    @SuppressWarnings(\"unchecked\") \/\/ Checked with instanceof\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            if (!(obj instanceof List)) {\n-                throw new IOException(\"Attribute value should be of type List.\");\n-            }\n-            accessDescriptions = (List<AccessDescription>)obj;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:SubjectInfoAccessExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public List<AccessDescription> get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            return accessDescriptions;\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:SubjectInfoAccessExtension.\");\n-        }\n-    }\n-\n-\n-\n-     \/\/ Encode this extension value\n+    \/\/ Encode this extension value\n@@ -221,1 +177,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectInfoAccessExtension.java","additions":3,"deletions":48,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -54,10 +54,2 @@\n-implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT =\n-                         \"x509.info.extensions.SubjectKeyIdentifier\";\n-    \/**\n-     * Attribute names.\n-     *\/\n+        implements CertAttrSet {\n+\n@@ -65,1 +57,0 @@\n-    public static final String KEY_ID = \"key_id\";\n@@ -136,27 +127,2 @@\n-    \/**\n-     * Set the attribute value.\n-     *\/\n-    public void set(String name, Object obj) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            if (!(obj instanceof KeyIdentifier)) {\n-              throw new IOException(\"Attribute value should be of\" +\n-                                    \" type KeyIdentifier.\");\n-            }\n-            id = (KeyIdentifier)obj;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:SubjectKeyIdentifierExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Get the attribute value.\n-     *\/\n-    public KeyIdentifier get(String name) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            return (id);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:SubjectKeyIdentifierExtension.\");\n-        }\n+    public KeyIdentifier getKeyIdentifier() {\n+        return id;\n@@ -165,2 +131,0 @@\n-\n-\n@@ -168,1 +132,1 @@\n-     * Return the name of this attribute.\n+     * Return the name of this extension.\n@@ -172,1 +136,1 @@\n-        return (NAME);\n+        return NAME;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectKeyIdentifierExtension.java","additions":6,"deletions":42,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.x509;\n-\n-\/**\n- * This class is used to parse attribute names like \"x509.info.extensions\".\n- *\n- * @author Amit Kapoor\n- * @author Hemma Prafullchandra\n- *\/\n-public class X509AttributeName {\n-    \/\/ Public members\n-    private static final char SEPARATOR = '.';\n-\n-    \/\/ Private data members\n-    private final String prefix;\n-    private final String suffix;\n-\n-    \/**\n-     * Default constructor for the class. Name is of the form\n-     * \"x509.info.extensions\".\n-     *\n-     * @param name the attribute name.\n-     *\/\n-    public X509AttributeName(String name) {\n-        int i = name.indexOf(SEPARATOR);\n-        if (i < 0) {\n-            prefix = name;\n-            suffix = null;\n-        } else {\n-            prefix = name.substring(0, i);\n-            suffix = name.substring(i + 1);\n-        }\n-    }\n-\n-    \/**\n-     * Return the prefix of the name.\n-     *\/\n-    public String getPrefix() {\n-      return (prefix);\n-    }\n-\n-    \/**\n-     * Return the suffix of the name.\n-     *\/\n-    public String getSuffix() {\n-      return (suffix);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509AttributeName.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -147,1 +147,1 @@\n-        return (extensions != null);\n+        return extensions != null;\n@@ -275,1 +275,0 @@\n-     * @throws IOException on error\n@@ -277,1 +276,1 @@\n-    public Integer getReasonCode() throws IOException {\n+    public Integer getReasonCode() {\n@@ -282,1 +281,1 @@\n-        return reasonCode.get(CRLReasonCodeExtension.REASON);\n+        return reasonCode.getReason();\n@@ -423,1 +422,1 @@\n-                crlExt = extensions.get(extAlias);\n+                crlExt = extensions.getExtension(extAlias);\n@@ -450,1 +449,1 @@\n-        return extensions.get(OIDMap.getName(oid));\n+        return extensions.getExtension(OIDMap.getName(oid));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CRLEntryImpl.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -210,5 +210,1 @@\n-                try {\n-                    badCertIssuer = getCertIssuer(badCert, badCertIssuer);\n-                } catch (IOException ioe) {\n-                    throw new CRLException(ioe);\n-                }\n+                badCertIssuer = getCertIssuer(badCert, badCertIssuer);\n@@ -689,1 +685,1 @@\n-        return (new Date(thisUpdate.getTime()));\n+        return new Date(thisUpdate.getTime());\n@@ -701,1 +697,1 @@\n-        return (new Date(nextUpdate.getTime()));\n+        return new Date(nextUpdate.getTime());\n@@ -841,1 +837,0 @@\n-     * @throws IOException on error\n@@ -843,1 +838,1 @@\n-    public KeyIdentifier getAuthKeyId() throws IOException {\n+    public KeyIdentifier getAuthKeyId() {\n@@ -846,2 +841,1 @@\n-            return (KeyIdentifier)aki.get(\n-                    AuthorityKeyIdentifierExtension.KEY_ID);\n+            return aki.getKeyIdentifier();\n@@ -857,1 +851,0 @@\n-     * @throws IOException on error\n@@ -859,4 +852,3 @@\n-    public AuthorityKeyIdentifierExtension getAuthKeyIdExtension()\n-        throws IOException {\n-        Object obj = getExtension(PKIXExtensions.AuthorityKey_Id);\n-        return (AuthorityKeyIdentifierExtension)obj;\n+    public AuthorityKeyIdentifierExtension getAuthKeyIdExtension() {\n+        return (AuthorityKeyIdentifierExtension)\n+                getExtension(PKIXExtensions.AuthorityKey_Id);\n@@ -869,1 +861,0 @@\n-     * @throws IOException on error\n@@ -871,3 +862,3 @@\n-    public CRLNumberExtension getCRLNumberExtension() throws IOException {\n-        Object obj = getExtension(PKIXExtensions.CRLNumber_Id);\n-        return (CRLNumberExtension)obj;\n+    public CRLNumberExtension getCRLNumberExtension() {\n+        return (CRLNumberExtension)\n+                getExtension(PKIXExtensions.CRLNumber_Id);\n@@ -880,1 +871,0 @@\n-     * @throws IOException on error\n@@ -882,1 +872,1 @@\n-    public BigInteger getCRLNumber() throws IOException {\n+    public BigInteger getCRLNumber() {\n@@ -885,1 +875,1 @@\n-            return numExt.get(CRLNumberExtension.NUMBER);\n+            return numExt.getCrlNumber();\n@@ -895,1 +885,0 @@\n-     * @throws IOException on error\n@@ -897,5 +886,3 @@\n-    public DeltaCRLIndicatorExtension getDeltaCRLIndicatorExtension()\n-        throws IOException {\n-\n-        Object obj = getExtension(PKIXExtensions.DeltaCRLIndicator_Id);\n-        return (DeltaCRLIndicatorExtension)obj;\n+    public DeltaCRLIndicatorExtension getDeltaCRLIndicatorExtension() {\n+        return (DeltaCRLIndicatorExtension)\n+                getExtension(PKIXExtensions.DeltaCRLIndicator_Id);\n@@ -908,1 +895,0 @@\n-     * @throws IOException on error\n@@ -910,1 +896,1 @@\n-    public BigInteger getBaseCRLNumber() throws IOException {\n+    public BigInteger getBaseCRLNumber() {\n@@ -913,1 +899,1 @@\n-            return dciExt.get(DeltaCRLIndicatorExtension.NUMBER);\n+            return dciExt.getCrlNumber();\n@@ -923,1 +909,0 @@\n-     * @throws IOException on error\n@@ -925,4 +910,3 @@\n-    public IssuerAlternativeNameExtension getIssuerAltNameExtension()\n-        throws IOException {\n-        Object obj = getExtension(PKIXExtensions.IssuerAlternativeName_Id);\n-        return (IssuerAlternativeNameExtension)obj;\n+    public IssuerAlternativeNameExtension getIssuerAltNameExtension() {\n+        return (IssuerAlternativeNameExtension)\n+                getExtension(PKIXExtensions.IssuerAlternativeName_Id);\n@@ -936,1 +920,0 @@\n-     * @throws IOException on error\n@@ -939,4 +922,3 @@\n-        getIssuingDistributionPointExtension() throws IOException {\n-\n-        Object obj = getExtension(PKIXExtensions.IssuingDistributionPoint_Id);\n-        return (IssuingDistributionPointExtension) obj;\n+            getIssuingDistributionPointExtension() {\n+        return (IssuingDistributionPointExtension)\n+                getExtension(PKIXExtensions.IssuingDistributionPoint_Id);\n@@ -1029,1 +1011,1 @@\n-                crlExt = extensions.get(extAlias);\n+                crlExt = extensions.getExtension(extAlias);\n@@ -1054,1 +1036,1 @@\n-        return extensions.get(OIDMap.getName(oid));\n+        return extensions.getExtension(OIDMap.getName(oid));\n@@ -1246,1 +1228,1 @@\n-        X500Principal prevCertIssuer) throws IOException {\n+        X500Principal prevCertIssuer) {\n@@ -1251,1 +1233,1 @@\n-            GeneralNames names = ciExt.get(CertificateIssuerExtension.ISSUER);\n+            GeneralNames names = ciExt.getNames();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CRLImpl.java","additions":28,"deletions":46,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -80,4 +80,0 @@\n-    private static final char DOT = '.';\n-    \/**\n-     * Public attribute names.\n-     *\/\n@@ -85,34 +81,0 @@\n-    public static final String INFO = X509CertInfo.NAME;\n-    public static final String ALG_ID = \"algorithm\";\n-    public static final String SIGNATURE = \"signature\";\n-    public static final String SIGNED_CERT = \"signed_cert\";\n-\n-    \/**\n-     * The following are defined for ease-of-use. These\n-     * are the most frequently retrieved attributes.\n-     *\/\n-    \/\/ x509.info.subject.dname\n-    public static final String SUBJECT_DN = NAME + DOT + INFO + DOT +\n-                               X509CertInfo.SUBJECT + DOT + X509CertInfo.DN_NAME;\n-    \/\/ x509.info.issuer.dname\n-    public static final String ISSUER_DN = NAME + DOT + INFO + DOT +\n-                               X509CertInfo.ISSUER + DOT + X509CertInfo.DN_NAME;\n-    \/\/ x509.info.serialNumber.number\n-    public static final String SERIAL_ID = NAME + DOT + INFO + DOT +\n-                               X509CertInfo.SERIAL_NUMBER + DOT +\n-                               CertificateSerialNumber.NUMBER;\n-    \/\/ x509.info.key.value\n-    public static final String PUBLIC_KEY = NAME + DOT + INFO + DOT +\n-                               X509CertInfo.KEY + DOT +\n-                               CertificateX509Key.KEY;\n-\n-    \/\/ x509.info.version.value\n-    public static final String VERSION = NAME + DOT + INFO + DOT +\n-                               X509CertInfo.VERSION + DOT +\n-                               CertificateVersion.VERSION;\n-\n-    \/\/ x509.algorithm\n-    public static final String SIG_ALG = NAME + DOT + ALG_ID;\n-\n-    \/\/ x509.signature\n-    public static final String SIG = NAME + DOT + SIGNATURE;\n@@ -558,2 +520,1 @@\n-            info.set(X509CertInfo.ALGORITHM_ID,\n-                    new CertificateAlgorithmId(algId));\n+            info.setAlgorithmId(new CertificateAlgorithmId(algId));\n@@ -613,1 +574,1 @@\n-            interval = (CertificateValidity)info.get(CertificateValidity.NAME);\n+            interval = info.getValidity();\n@@ -628,54 +589,0 @@\n-     *\n-     * @param name the name of the attribute.\n-     * @exception CertificateParsingException on invalid attribute identifier.\n-     *\/\n-    public Object get(String name)\n-    throws CertificateParsingException {\n-        X509AttributeName attr = new X509AttributeName(name);\n-        String id = attr.getPrefix();\n-        if (!(id.equalsIgnoreCase(NAME))) {\n-            throw new CertificateParsingException(\"Invalid root of \"\n-                          + \"attribute name, expected [\" + NAME +\n-                          \"], received \" + \"[\" + id + \"]\");\n-        }\n-        attr = new X509AttributeName(attr.getSuffix());\n-        id = attr.getPrefix();\n-\n-        if (id.equalsIgnoreCase(INFO)) {\n-            if (info == null) {\n-                return null;\n-            }\n-            if (attr.getSuffix() != null) {\n-                try {\n-                    return info.get(attr.getSuffix());\n-                } catch (IOException | CertificateException e) {\n-                    throw new CertificateParsingException(e.toString());\n-                }\n-            } else {\n-                return info;\n-            }\n-        } else if (id.equalsIgnoreCase(ALG_ID)) {\n-            return(algId);\n-        } else if (id.equalsIgnoreCase(SIGNATURE)) {\n-            if (signature != null)\n-                return signature.clone();\n-            else\n-                return null;\n-        } else if (id.equalsIgnoreCase(SIGNED_CERT)) {\n-            if (signedCert != null)\n-                return signedCert.clone();\n-            else\n-                return null;\n-        } else {\n-            throw new CertificateParsingException(\"Attribute name not \"\n-                 + \"recognized or get() not allowed for the same: \" + id);\n-        }\n-    }\n-\n-    \/**\n-     * Set the requested attribute in the certificate.\n-     *\n-     * @param name the name of the attribute.\n-     * @param obj the value of the attribute.\n-     * @exception CertificateException on invalid attribute identifier.\n-     * @exception IOException on encoding error of attribute.\n@@ -683,31 +590,3 @@\n-    public void set(String name, Object obj)\n-    throws CertificateException, IOException {\n-        \/\/ check if immutable\n-        if (readOnly)\n-            throw new CertificateException(\"cannot over-write existing\"\n-                                           + \" certificate\");\n-\n-        X509AttributeName attr = new X509AttributeName(name);\n-        String id = attr.getPrefix();\n-        if (!(id.equalsIgnoreCase(NAME))) {\n-            throw new CertificateException(\"Invalid root of attribute name,\"\n-                           + \" expected [\" + NAME + \"], received \" + id);\n-        }\n-        attr = new X509AttributeName(attr.getSuffix());\n-        id = attr.getPrefix();\n-\n-        if (id.equalsIgnoreCase(INFO)) {\n-            if (attr.getSuffix() == null) {\n-                if (!(obj instanceof X509CertInfo)) {\n-                    throw new CertificateException(\"Attribute value should\"\n-                                    + \" be of type X509CertInfo.\");\n-                }\n-                info = (X509CertInfo)obj;\n-            } else {\n-                info.set(attr.getSuffix(), obj);\n-            }\n-            signedCert = null;  \/\/reset this as certificate data has changed\n-        } else {\n-            throw new CertificateException(\"Attribute name not recognized or \" +\n-                              \"set() not allowed for the same: \" + id);\n-        }\n+\n+    public X509CertInfo getInfo() {\n+        return info;\n@@ -742,6 +621,1 @@\n-        try {\n-            return (PublicKey)info.get(CertificateX509Key.NAME\n-                                + DOT + CertificateX509Key.KEY);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getKey().getKey();\n@@ -759,3 +633,2 @@\n-            int vers = ((Integer)info.get(CertificateVersion.NAME\n-                        + DOT + CertificateVersion.VERSION)).intValue();\n-            return vers+1;\n+            int vers = info.getVersion().getVersion();\n+            return vers + 1;\n@@ -787,7 +660,1 @@\n-        try {\n-            return (SerialNumber)info.get(\n-                              CertificateSerialNumber.NAME + DOT +\n-                              CertificateSerialNumber.NUMBER);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getSerialNumber().getSerial();\n@@ -806,6 +673,1 @@\n-        try {\n-            return (Principal)info.get(X509CertInfo.SUBJECT + DOT +\n-                                                    X509CertInfo.DN_NAME);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getSubject();\n@@ -824,3 +686,1 @@\n-            return (X500Principal)info.get(\n-                                            X509CertInfo.SUBJECT + DOT +\n-                                            \"x500principal\");\n+            return info.getSubject().asX500Principal();\n@@ -841,6 +701,1 @@\n-        try {\n-            return (Principal)info.get(X509CertInfo.ISSUER + DOT +\n-                                                   X509CertInfo.DN_NAME);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getIssuer();\n@@ -859,3 +714,1 @@\n-            return (X500Principal)info.get(\n-                                            X509CertInfo.ISSUER + DOT +\n-                                            \"x500principal\");\n+            return info.getIssuer().asX500Principal();\n@@ -875,6 +728,1 @@\n-        try {\n-            return (Date) info.get(CertificateValidity.NAME + DOT +\n-                                        CertificateValidity.NOT_BEFORE);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getValidity().getNotBefore();\n@@ -891,6 +739,1 @@\n-        try {\n-            return (Date) info.get(CertificateValidity.NAME + DOT +\n-                                     CertificateValidity.NOT_AFTER);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return info.getValidity().getNotAfter();\n@@ -935,1 +778,1 @@\n-        return (algId.getName());\n+        return algId.getName();\n@@ -948,1 +791,5 @@\n-        return (oid.toString());\n+        return oid.toString();\n+    }\n+\n+    public AlgorithmId getSigAlg() {\n+        return algId;\n@@ -970,8 +817,2 @@\n-        try {\n-            UniqueIdentity id = (UniqueIdentity)info.get(\n-                                 X509CertInfo.ISSUER_ID);\n-            if (id == null)\n-                return null;\n-            else\n-                return (id.getId());\n-        } catch (Exception e) {\n+        UniqueIdentity id = info.getIssuerUniqueId();\n+        if (id == null)\n@@ -979,1 +820,2 @@\n-        }\n+        else\n+            return id.getId();\n@@ -990,8 +832,2 @@\n-        try {\n-            UniqueIdentity id = (UniqueIdentity)info.get(\n-                                 X509CertInfo.SUBJECT_ID);\n-            if (id == null)\n-                return null;\n-            else\n-                return (id.getId());\n-        } catch (Exception e) {\n+        UniqueIdentity id = info.getSubjectUniqueId();\n+        if (id == null)\n@@ -999,1 +835,2 @@\n-        }\n+        else\n+            return id.getId();\n@@ -1006,4 +843,1 @@\n-            try {\n-                return (KeyIdentifier)aki.get(\n-                    AuthorityKeyIdentifierExtension.KEY_ID);\n-            } catch (IOException ioe) {} \/\/ not possible\n+            return aki.getKeyIdentifier();\n@@ -1020,3 +854,1 @@\n-            try {\n-                return ski.get(SubjectKeyIdentifierExtension.KEY_ID);\n-            } catch (IOException ioe) {} \/\/ not possible\n+            return ski.getKeyIdentifier();\n@@ -1154,7 +986,2 @@\n-        try {\n-            CertificateExtensions exts = (CertificateExtensions)info.get(\n-                                         CertificateExtensions.NAME);\n-            if (exts == null)\n-                return false;\n-            return exts.hasUnsupportedCriticalExtension();\n-        } catch (Exception e) {\n+        CertificateExtensions exts = info.getExtensions();\n+        if (exts == null)\n@@ -1162,1 +989,1 @@\n-        }\n+        return exts.hasUnsupportedCriticalExtension();\n@@ -1178,2 +1005,1 @@\n-            CertificateExtensions exts = (CertificateExtensions)info.get(\n-                                         CertificateExtensions.NAME);\n+            CertificateExtensions exts = info.getExtensions();\n@@ -1208,2 +1034,1 @@\n-            CertificateExtensions exts = (CertificateExtensions)info.get(\n-                                         CertificateExtensions.NAME);\n+            CertificateExtensions exts = info.getExtensions();\n@@ -1237,6 +1062,5 @@\n-        try {\n-            CertificateExtensions extensions;\n-            try {\n-                extensions = (CertificateExtensions)info.get(CertificateExtensions.NAME);\n-            } catch (CertificateException ce) {\n-                return null;\n+        CertificateExtensions extensions = info.getExtensions();\n+        if (extensions != null) {\n+            Extension ex = extensions.getExtension(oid.toString());\n+            if (ex != null) {\n+                return ex;\n@@ -1244,4 +1068,4 @@\n-            if (extensions != null) {\n-                Extension ex = extensions.getExtension(oid.toString());\n-                if (ex != null) {\n-                    return ex;\n+            for (Extension ex2 : extensions.getAllExtensions()) {\n+                if (ex2.getExtensionId().equals(oid)) {\n+                    \/\/XXXX May want to consider cloning this\n+                    return ex2;\n@@ -1249,7 +1073,0 @@\n-                for (Extension ex2 : extensions.getAllExtensions()) {\n-                    if (ex2.getExtensionId().equals(oid)) {\n-                        \/\/XXXX May want to consider cloning this\n-                        return ex2;\n-                    }\n-                }\n-                \/* no such extension in this certificate *\/\n@@ -1257,3 +1074,1 @@\n-            return null;\n-        } catch (IOException ioe) {\n-            return null;\n+            \/* no such extension in this certificate *\/\n@@ -1261,0 +1076,1 @@\n+        return null;\n@@ -1267,13 +1083,2 @@\n-        try {\n-            CertificateExtensions extensions;\n-            try {\n-                extensions = (CertificateExtensions)info.get(CertificateExtensions.NAME);\n-            } catch (CertificateException ce) {\n-                return null;\n-            }\n-            if (extensions == null) {\n-                return null;\n-            } else {\n-                return extensions.getUnparseableExtensions().get(oid.toString());\n-            }\n-        } catch (IOException ioe) {\n+        CertificateExtensions extensions = info.getExtensions();\n+        if (extensions == null) {\n@@ -1281,0 +1086,2 @@\n+        } else {\n+            return extensions.getUnparseableExtensions().get(oid.toString());\n@@ -1295,2 +1102,1 @@\n-            CertificateExtensions exts = (CertificateExtensions)info.get(\n-                                     CertificateExtensions.NAME);\n+            CertificateExtensions exts = info.getExtensions();\n@@ -1312,5 +1118,1 @@\n-                try {\n-                    certExt = (Extension)this.get(extAlias);\n-                } catch (CertificateException e) {\n-                    \/\/ get() throws an Exception instead of returning null, ignore\n-                }\n+                certExt = getInfo().getExtensions().getExtension(extAlias);\n@@ -1345,5 +1147,2 @@\n-            String extAlias = OIDMap.getName(PKIXExtensions.KeyUsage_Id);\n-            if (extAlias == null)\n-                return null;\n-\n-            KeyUsageExtension certExt = (KeyUsageExtension)this.get(extAlias);\n+            KeyUsageExtension certExt = (KeyUsageExtension)\n+                    getInfo().getExtensions().getExtension(KeyUsageExtension.NAME);\n@@ -1438,5 +1237,1 @@\n-            String extAlias = OIDMap.getName(PKIXExtensions.BasicConstraints_Id);\n-            if (extAlias == null)\n-                return -1;\n-            BasicConstraintsExtension certExt =\n-                        (BasicConstraintsExtension)this.get(extAlias);\n+            BasicConstraintsExtension certExt = getBasicConstraintsExtension();\n@@ -1446,4 +1241,2 @@\n-            if (((Boolean) certExt.get(BasicConstraintsExtension.IS_CA)).\n-                    booleanValue())\n-                return ((Integer)certExt.get(\n-                        BasicConstraintsExtension.PATH_LEN)).intValue();\n+            if (certExt.isCa())\n+                return certExt.getPathLen();\n@@ -1580,8 +1373,1 @@\n-        GeneralNames names;\n-        try {\n-            names = subjectAltNameExt.get(\n-                    SubjectAlternativeNameExtension.SUBJECT_NAME);\n-        } catch (IOException ioe) {\n-            \/\/ should not occur\n-            return Collections.emptySet();\n-        }\n+        GeneralNames names = subjectAltNameExt.getNames();\n@@ -1613,8 +1399,1 @@\n-            GeneralNames names;\n-            try {\n-                names = subjectAltNameExt.get(\n-                        SubjectAlternativeNameExtension.SUBJECT_NAME);\n-            }  catch (IOException ioe) {\n-                \/\/ should not occur\n-                return Collections.emptySet();\n-            }\n+            GeneralNames names = subjectAltNameExt.getNames();\n@@ -1646,8 +1425,1 @@\n-        GeneralNames names;\n-        try {\n-            names = issuerAltNameExt.get(\n-                    IssuerAlternativeNameExtension.ISSUER_NAME);\n-        } catch (IOException ioe) {\n-            \/\/ should not occur\n-            return Collections.emptySet();\n-        }\n+        GeneralNames names = issuerAltNameExt.getNames();\n@@ -1679,8 +1451,1 @@\n-            GeneralNames names;\n-            try {\n-                names = issuerAltNameExt.get(\n-                        IssuerAlternativeNameExtension.ISSUER_NAME);\n-            }  catch (IOException ioe) {\n-                \/\/ should not occur\n-                return Collections.emptySet();\n-            }\n+            GeneralNames names = issuerAltNameExt.getNames();\n@@ -1749,4 +1514,1 @@\n-        AlgorithmId infoSigAlg = (AlgorithmId)info.get(\n-                                              CertificateAlgorithmId.NAME\n-                                              + DOT +\n-                                              CertificateAlgorithmId.ALGORITHM);\n+        AlgorithmId infoSigAlg = info.getAlgorithmId().getAlgId();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":63,"deletions":301,"binary":false,"changes":364,"status":"modified"},{"patch":"@@ -64,6 +64,2 @@\n-public class X509CertInfo implements CertAttrSet<String> {\n-    \/**\n-     * Identifier for this attribute, to be used with the\n-     * get, set, delete methods of Certificate, x509 type.\n-     *\/\n-    public static final String IDENT = \"x509.info\";\n+public class X509CertInfo {\n+\n@@ -100,12 +96,0 @@\n-    \/\/ Attribute numbers for internal manipulation\n-    private static final int ATTR_VERSION = 1;\n-    private static final int ATTR_SERIAL = 2;\n-    private static final int ATTR_ALGORITHM = 3;\n-    private static final int ATTR_ISSUER = 4;\n-    private static final int ATTR_VALIDITY = 5;\n-    private static final int ATTR_SUBJECT = 6;\n-    private static final int ATTR_KEY = 7;\n-    private static final int ATTR_ISSUER_ID = 8;\n-    private static final int ATTR_SUBJECT_ID = 9;\n-    private static final int ATTR_EXTENSIONS = 10;\n-\n@@ -115,15 +99,0 @@\n-    \/\/ The certificate attribute name to integer mapping stored here\n-    private static final Map<String,Integer> map = new HashMap<>();\n-    static {\n-        map.put(VERSION, Integer.valueOf(ATTR_VERSION));\n-        map.put(SERIAL_NUMBER, Integer.valueOf(ATTR_SERIAL));\n-        map.put(ALGORITHM_ID, Integer.valueOf(ATTR_ALGORITHM));\n-        map.put(ISSUER, Integer.valueOf(ATTR_ISSUER));\n-        map.put(VALIDITY, Integer.valueOf(ATTR_VALIDITY));\n-        map.put(SUBJECT, Integer.valueOf(ATTR_SUBJECT));\n-        map.put(KEY, Integer.valueOf(ATTR_KEY));\n-        map.put(ISSUER_ID, Integer.valueOf(ATTR_ISSUER_ID));\n-        map.put(SUBJECT_ID, Integer.valueOf(ATTR_SUBJECT_ID));\n-        map.put(EXTENSIONS, Integer.valueOf(ATTR_EXTENSIONS));\n-    }\n-\n@@ -181,1 +150,0 @@\n-    @Override\n@@ -235,1 +203,1 @@\n-            return(true);\n+            return true;\n@@ -237,1 +205,1 @@\n-            return(false);\n+            return false;\n@@ -239,1 +207,1 @@\n-            return(false);\n+            return false;\n@@ -243,1 +211,1 @@\n-                return(false);\n+                return false;\n@@ -246,1 +214,1 @@\n-        return(true);\n+        return true;\n@@ -259,1 +227,1 @@\n-        return(retval);\n+        return retval;\n@@ -334,61 +302,3 @@\n-    \/**\n-     * Set the certificate attribute.\n-     *\n-     * @param name the name of the Certificate attribute.\n-     * @param val the value of the Certificate attribute.\n-     * @exception CertificateException on invalid attributes.\n-     * @exception IOException on other errors.\n-     *\/\n-    public void set(String name, Object val)\n-    throws CertificateException, IOException {\n-        X509AttributeName attrName = new X509AttributeName(name);\n-\n-        int attr = attributeMap(attrName.getPrefix());\n-        if (attr == 0) {\n-            throw new CertificateException(\"Attribute name not recognized: \"\n-                                           + name);\n-        }\n-        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n-        rawCertInfo = null;\n-        String suffix = attrName.getSuffix();\n-\n-        switch (attr) {\n-        case ATTR_VERSION:\n-            if (suffix == null) {\n-                setVersion(val);\n-            } else {\n-                version.set(suffix, val);\n-            }\n-            break;\n-\n-        case ATTR_SERIAL:\n-            if (suffix == null) {\n-                setSerialNumber(val);\n-            } else {\n-                serialNum.set(suffix, val);\n-            }\n-            break;\n-\n-        case ATTR_ALGORITHM:\n-            if (suffix == null) {\n-                setAlgorithmId(val);\n-            } else {\n-                algId.set(suffix, val);\n-            }\n-            break;\n-\n-        case ATTR_ISSUER:\n-            setIssuer(val);\n-            break;\n-\n-        case ATTR_VALIDITY:\n-            if (suffix == null) {\n-                setValidity(val);\n-            } else {\n-                interval.set(suffix, val);\n-            }\n-            break;\n-\n-        case ATTR_SUBJECT:\n-            setSubject(val);\n-            break;\n+    public CertificateExtensions getExtensions() {\n+        return extensions;\n+    }\n@@ -396,26 +306,2 @@\n-        case ATTR_KEY:\n-            if (suffix == null) {\n-                setKey(val);\n-            } else {\n-                pubKey.set(suffix, val);\n-            }\n-            break;\n-\n-        case ATTR_ISSUER_ID:\n-            setIssuerUniqueId(val);\n-            break;\n-\n-        case ATTR_SUBJECT_ID:\n-            setSubjectUniqueId(val);\n-            break;\n-\n-        case ATTR_EXTENSIONS:\n-            if (suffix == null) {\n-                setExtensions(val);\n-            } else {\n-                if (extensions == null)\n-                    extensions = new CertificateExtensions();\n-                extensions.set(suffix, val);\n-            }\n-            break;\n-        }\n+    public UniqueIdentity getIssuerUniqueId() {\n+        return issuerUniqueId;\n@@ -424,0 +310,3 @@\n+    public UniqueIdentity getSubjectUniqueId() {\n+        return subjectUniqueId;\n+    }\n@@ -425,11 +314,3 @@\n-    \/**\n-     * Get the certificate attribute.\n-     *\n-     * @param name the name of the Certificate attribute.\n-     *\n-     * @exception CertificateException on invalid attributes.\n-     * @exception IOException on other errors.\n-     *\/\n-    public Object get(String name)\n-    throws CertificateException, IOException {\n-        X509AttributeName attrName = new X509AttributeName(name);\n+    public X500Name getIssuer() {\n+        return issuer;\n+    }\n@@ -437,66 +318,2 @@\n-        int attr = attributeMap(attrName.getPrefix());\n-        if (attr == 0) {\n-            throw new CertificateParsingException(\n-                          \"Attribute name not recognized: \" + name);\n-        }\n-        String suffix = attrName.getSuffix();\n-\n-        switch (attr) { \/\/ frequently used attributes first\n-        case (ATTR_EXTENSIONS):\n-            if (suffix == null) {\n-                return(extensions);\n-            } else {\n-                if (extensions == null) {\n-                    return null;\n-                } else {\n-                    return(extensions.get(suffix));\n-                }\n-            }\n-        case (ATTR_SUBJECT):\n-            if (suffix == null) {\n-                return(subject);\n-            } else {\n-                return(getX500Name(suffix, false));\n-            }\n-        case (ATTR_ISSUER):\n-            if (suffix == null) {\n-                return(issuer);\n-            } else {\n-                return(getX500Name(suffix, true));\n-            }\n-        case (ATTR_KEY):\n-            if (suffix == null) {\n-                return(pubKey);\n-            } else {\n-                return(pubKey.get(suffix));\n-            }\n-        case (ATTR_ALGORITHM):\n-            if (suffix == null) {\n-                return(algId);\n-            } else {\n-                return(algId.get(suffix));\n-            }\n-        case (ATTR_VALIDITY):\n-            if (suffix == null) {\n-                return(interval);\n-            } else {\n-                return(interval.get(suffix));\n-            }\n-        case (ATTR_VERSION):\n-            if (suffix == null) {\n-                return(version);\n-            } else {\n-                return(version.get(suffix));\n-            }\n-        case (ATTR_SERIAL):\n-            if (suffix == null) {\n-                return(serialNum);\n-            } else {\n-                return(serialNum.get(suffix));\n-            }\n-        case (ATTR_ISSUER_ID):\n-            return(issuerUniqueId);\n-        case (ATTR_SUBJECT_ID):\n-            return(subjectUniqueId);\n-        }\n-        return null;\n+    public X500Name getSubject() {\n+        return subject;\n@@ -624,8 +441,4 @@\n-            SubjectAlternativeNameExtension subjectAltNameExt;\n-            GeneralNames names;\n-            try {\n-                subjectAltNameExt = (SubjectAlternativeNameExtension)\n-                        extensions.get(SubjectAlternativeNameExtension.NAME);\n-                names = subjectAltNameExt.get(\n-                        SubjectAlternativeNameExtension.SUBJECT_NAME);\n-            } catch (IOException e) {\n+            SubjectAlternativeNameExtension subjectAltNameExt =\n+                    (SubjectAlternativeNameExtension)\n+                    extensions.getExtension(SubjectAlternativeNameExtension.NAME);\n+            if (subjectAltNameExt == null) {\n@@ -636,0 +449,1 @@\n+            GeneralNames names = subjectAltNameExt.getNames();\n@@ -700,11 +514,0 @@\n-    \/**\n-     * Returns the integer attribute number for the passed attribute name.\n-     *\/\n-    private int attributeMap(String name) {\n-        Integer num = map.get(name);\n-        if (num == null) {\n-            return 0;\n-        }\n-        return num.intValue();\n-    }\n-\n@@ -717,5 +520,8 @@\n-    private void setVersion(Object val) throws CertificateException {\n-        if (!(val instanceof CertificateVersion)) {\n-            throw new CertificateException(\"Version class type invalid.\");\n-        }\n-        version = (CertificateVersion)val;\n+    public void setVersion(CertificateVersion val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        version = val;\n+    }\n+\n+    public CertificateVersion getVersion() {\n+        return version;\n@@ -730,5 +536,8 @@\n-    private void setSerialNumber(Object val) throws CertificateException {\n-        if (!(val instanceof CertificateSerialNumber)) {\n-            throw new CertificateException(\"SerialNumber class type invalid.\");\n-        }\n-        serialNum = (CertificateSerialNumber)val;\n+    public void setSerialNumber(CertificateSerialNumber val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        serialNum = val;\n+    }\n+\n+    public CertificateSerialNumber getSerialNumber() {\n+        return serialNum;\n@@ -743,6 +552,8 @@\n-    private void setAlgorithmId(Object val) throws CertificateException {\n-        if (!(val instanceof CertificateAlgorithmId)) {\n-            throw new CertificateException(\n-                             \"AlgorithmId class type invalid.\");\n-        }\n-        algId = (CertificateAlgorithmId)val;\n+    public void setAlgorithmId(CertificateAlgorithmId val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        algId = val;\n+    }\n+\n+    public CertificateAlgorithmId getAlgorithmId() {\n+        return algId;\n@@ -757,6 +568,4 @@\n-    private void setIssuer(Object val) throws CertificateException {\n-        if (!(val instanceof X500Name)) {\n-            throw new CertificateException(\n-                             \"Issuer class type invalid.\");\n-        }\n-        issuer = (X500Name)val;\n+    public void setIssuer(X500Name val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        issuer = val;\n@@ -771,6 +580,8 @@\n-    private void setValidity(Object val) throws CertificateException {\n-        if (!(val instanceof CertificateValidity)) {\n-            throw new CertificateException(\n-                             \"CertificateValidity class type invalid.\");\n-        }\n-        interval = (CertificateValidity)val;\n+    public void setValidity(CertificateValidity val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        interval = val;\n+    }\n+\n+    public CertificateValidity getValidity() {\n+        return interval;\n@@ -785,6 +596,4 @@\n-    private void setSubject(Object val) throws CertificateException {\n-        if (!(val instanceof X500Name)) {\n-            throw new CertificateException(\n-                             \"Subject class type invalid.\");\n-        }\n-        subject = (X500Name)val;\n+    public void setSubject(X500Name val) throws CertificateException {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        subject = val;\n@@ -799,6 +608,8 @@\n-    private void setKey(Object val) throws CertificateException {\n-        if (!(val instanceof CertificateX509Key)) {\n-            throw new CertificateException(\n-                             \"Key class type invalid.\");\n-        }\n-        pubKey = (CertificateX509Key)val;\n+    public void setKey(CertificateX509Key val) {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n+        pubKey = val;\n+    }\n+\n+    public CertificateX509Key getKey() {\n+        return pubKey;\n@@ -813,1 +624,3 @@\n-    private void setIssuerUniqueId(Object val) throws CertificateException {\n+    public void setIssuerUniqueId(UniqueIdentity val) throws CertificateException {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n@@ -817,5 +630,1 @@\n-        if (!(val instanceof UniqueIdentity)) {\n-            throw new CertificateException(\n-                             \"IssuerUniqueId class type invalid.\");\n-        }\n-        issuerUniqueId = (UniqueIdentity)val;\n+        issuerUniqueId = val;\n@@ -830,1 +639,3 @@\n-    private void setSubjectUniqueId(Object val) throws CertificateException {\n+    public void setSubjectUniqueId(UniqueIdentity val) throws CertificateException {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n@@ -834,5 +645,1 @@\n-        if (!(val instanceof UniqueIdentity)) {\n-            throw new CertificateException(\n-                             \"SubjectUniqueId class type invalid.\");\n-        }\n-        subjectUniqueId = (UniqueIdentity)val;\n+        subjectUniqueId = val;\n@@ -847,1 +654,3 @@\n-    private void setExtensions(Object val) throws CertificateException {\n+    public void setExtensions(CertificateExtensions val) throws CertificateException {\n+        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n+        rawCertInfo = null;\n@@ -851,5 +660,1 @@\n-        if (!(val instanceof CertificateExtensions)) {\n-          throw new CertificateException(\n-                             \"Extensions class type invalid.\");\n-        }\n-        extensions = (CertificateExtensions)val;\n+        extensions = val;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertInfo.java","additions":86,"deletions":281,"binary":false,"changes":367,"status":"modified"},{"patch":"@@ -1,245 +0,0 @@\n-<HTML>\n-<BODY>\n-<HEAD>\n-<TITLE>Certificate Attributes<\/TITLE>\n-<\/HEAD>\n-<h2><center>Certificate Attributes<\/center><\/h2>\n-<font size=3><center>July 1998<\/font><\/center>\n-<p>\n-In JDK1.2 we provide an implementation of X.509 (version 3).\n-The X509CertImpl class supports the following methods to\n-manipulate the various attributes of a certificate:\n-<pre>\n-     Object get(String name), and\n-     void set(String name, Object value)\n-<\/pre>\n-A list of all the X.509 v3 Certificate attributes that can be manipulated\n-is provided in the following table.\n-For example, if you want to get the signature component of\n-the certificate:\n-<pre>\n-     X509CertImpl cert;\n-     \/\/ get the certificate object\n-     byte[] sig = (byte[])cert.get(\"x509.signature\");\n-                  \/\/ using the fully-qualified identifier\n-OR\n-     byte[] sig = (byte[])cert.get(X509CertImpl.SIG);\n-                  \/\/ using defined constants\n-<\/pre>\n-<p>\n-<table border=1>\n-<caption>sun.security.x509.X509CertImpl<\/caption>\n-<tr>\n-<td><strong>Attribute<\/strong><\/td>\n-<td><strong>Fully-qualified identifier<\/strong><\/td>\n-<td><strong>Defined constants<\/strong><\/td>\n-<td><strong>Type of Object returned<\/strong><br>\n-(in sun.security.x509 unless fully-qualified)<\/td>\n-<\/tr>\n-<tr>\n-<td>signatureAlgorithm<\/td>\n-<td>x509.algorithm<\/td>\n-<td>X509CertImpl.SIG_ALG<\/td>\n-<td>AlgorithmId<\/td>\n-<\/tr>\n-<tr>\n-<td>signature<\/td>\n-<td>x509.signature<\/td>\n-<td>X509CertImpl.SIG<\/td>\n-<td>byte[]<\/td>\n-<\/tr>\n-<tr>\n-<td>tbsCertificate<\/td>\n-<td>x509.info<\/td>\n-<td>X509CertInfo.IDENT<\/td>\n-<td>X509CertInfo<\/td>\n-<\/tr>\n-<tr>\n-<td>version<\/td>\n-<td>x509.info.version<br>\n-x509.info.version.number<\/td>\n-<td>CertificateVersion.IDENT<br>\n-none<\/td>\n-<td>CertificateVersion<br>\n-java.lang.Integer<\/td>\n-<\/tr>\n-<tr>\n-<td>serialNumber<\/td>\n-<td>x509.info.serialNumber<br>\n-x509.info.serialNumber.number<\/td>\n-<td>CertificateSerialNumber.IDENT<br>\n-X509CertImpl.SERIAL_ID<\/td>\n-<td>CertificateSerialNumber<br>\n-SerialNumber<\/td>\n-<\/tr>\n-<tr>\n-<td>signature<\/td>\n-<td>x509.info.algorithmID<br>\n-x509.info.algorithmID.algorithm<\/td>\n-<td>CertificateAlgorithmId.IDENT<br>\n-none<\/td>\n-<td>CertificateAlgorithmId<br>\n-AlgorithmId<\/td>\n-<\/tr>\n-<tr>\n-<td>issuer<\/td>\n-<td>x509.info.issuer<br>\n-x509.info.issuer.dname<\/td>\n-<td>none<br>\n-X509CertImpl.ISSUER_DN<\/td>\n-<td>X500Name<br>\n-X500Name<\/td>\n-<\/tr>\n-<tr>\n-<td>validity<br>\n-validity.notAfter<br>\n-validity.notBefore<\/td>\n-<td>x509.info.validity<br>\n-x509.info.validity.notAfter<br>\n-x509.info.validity.notBefore<\/td>\n-<td>CertificateValidity.IDENT<br>\n-none<br>\n-none<\/td>\n-<td>CertificateValidity<br>\n-java.util.Date<br>\n-java.util.Date<\/td>\n-<\/tr>\n-<tr>\n-<td>subject<\/td>\n-<td>x509.info.subject<br>\n-x509.info.subject.dname<\/td>\n-<td>none<br>\n-X509CertImpl.SUBJECT_DN<\/td>\n-<td>X500Name<br>\n-X500Name<\/td>\n-<\/tr>\n-<tr>\n-<td>subjectPublicKeyInfo<\/td>\n-<td>x509.info.key<br>\n-x509.info.key.value<\/td>\n-<td>CertificateX509Key.IDENT<br>\n-X509CertImpl.PUBLIC_KEY<\/td>\n-<td>CertificateX509Key<br>\n-X509Key<\/td>\n-<\/tr>\n-<tr>\n-<td>issuerUniqueID<\/td>\n-<td>x509.info.issuerID<br>\n-x509.info.issuerID.id<\/td>\n-<td>none<br>\n-none<\/td>\n-<td>UniqueIdentity<br>\n-UniqueIdentity<\/td>\n-<\/tr>\n-<tr>\n-<td>subjectUniqueID<\/td>\n-<td>x509.info.subjectID<br>\n-x509.info.subjectID.id<\/td>\n-<td>none<br>\n-none<\/td>\n-<td>UniqueIdentity<br>\n-UniqueIdentity<\/td>\n-<\/tr>\n-<tr>\n-<td>extensions<\/td>\n-<td>x509.info.extensions<\/td>\n-<td>CertificateExtensions.IDENT<\/td>\n-<td>CertificateExtensions<\/td>\n-<\/tr>\n-<\/table>\n-<br>\n-<br>\n-<table border=1>\n-<caption>X.509 V3 certificate extensions<\/caption>\n-<tr>\n-<td><strong>Extension<\/strong><\/td>\n-<td><strong>Extension attribute identifier<\/strong><\/td>\n-<td><strong>Short form<\/strong><\/td>\n-<td><strong>Type of Object returned<\/strong><\/td>\n-<\/tr>\n-<tr>\n-<td>Authority Key Identifier<\/td>\n-<td>x509.info.extensions.AuthorityKeyIdentifier<\/td>\n-<td>AuthorityKeyIdentifierExtension.IDENT<\/td>\n-<td>AuthorityKeyIdentifierExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Subject Key Identifier<\/td>\n-<td>x509.info.extensions.SubjectKeyIdentifier<\/td>\n-<td>SubjectKeyIdentifierExtension.IDENT<\/td>\n-<td>SubjectKeyIdentifierExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Key Usage<\/td>\n-<td>x509.info.extensions.KeyUsage<\/td>\n-<td>KeyUsageExtension.IDENT<\/td>\n-<td>KeyUsageExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Private Key Usage Period<\/td>\n-<td>x509.info.extensions.PrivateKeyUsage<\/td>\n-<td>PrivateKeyUsageExtension.IDENT<\/td>\n-<td>PrivateKeyUsageExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Policy Mappings<\/td>\n-<td>x509.info.extensions.PolicyMappings<\/td>\n-<td>PolicyMappingsExtension.IDENT<\/td>\n-<td>PolicyMappingsExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Subject Alternative Name<\/td>\n-<td>x509.info.extensions.SubjectAlternativeName<\/td>\n-<td>SubjectAlternativeNameExtension.IDENT<\/td>\n-<td>SubjectAlternativeNameExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Issuer Alternative Name<\/td>\n-<td>x509.info.extensions.IssuerAlternativeName<\/td>\n-<td>IssuerAlternativeNameExtension.IDENT<\/td>\n-<td>IssuerAlternativeNameExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Basic Constraints<\/td>\n-<td>x509.info.extensions.BasicConstraints<\/td>\n-<td>BasicConstraintsExtension.IDENT<\/td>\n-<td>BasicConstraintsExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Name Constraints<\/td>\n-<td>x509.info.extensions.NameConstraints<\/td>\n-<td>NameConstraintsExtension.IDENT<\/td>\n-<td>NameConstraintsExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Policy Constraints<\/td>\n-<td>x509.info.extensions.PolicyConstraints<\/td>\n-<td>PolicyConstraintsExtension.IDENT<\/td>\n-<td>PolicyConstraintsExtension<\/td>\n-<\/tr>\n-<tr>\n-<td>Netscape Certificate Type<\/td>\n-<td>x509.info.extensions.NetscapeCertType<\/td>\n-<td>NetscapeCertTypeExtension.IDENT<\/td>\n-<td>NetscapeCertTypeExtension<\/td>\n-<\/tr>\n-<\/table>\n-<p>\n-Extensions can be added by implementing the\n-<code>sun.security.x509.CertAttrSet<\/code> interface and\n-subclassing <code>sun.security.x509.Extension<\/code> class.\n-Register the new extension using the OIDMap class.\n-The following extensions are not currently supported from the\n-PKIX profile:\n-<table>\n-<tr>\n-<td>Name<\/td>\n-<td>ObjectIdentifier<\/td>\n-<\/tr>\n-<tr>\n-<td>CertificatePolicies<\/td>\n-<td>2.5.29.32<\/td>\n-<\/tr>\n-<\/table>\n-<\/BODY>\n-<\/HTML>\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/certAttributes.html","additions":0,"deletions":245,"binary":false,"changes":245,"status":"deleted"},{"patch":"@@ -2402,1 +2402,1 @@\n-                Boolean val = extn.get(NetscapeCertTypeExtension.OBJECT_SIGNING);\n+                boolean val = extn.get(NetscapeCertTypeExtension.OBJECT_SIGNING);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-import static sun.security.x509.NameConstraintsExtension.EXCLUDED_SUBTREES;\n-import static sun.security.x509.NameConstraintsExtension.PERMITTED_SUBTREES;\n@@ -28,1 +26,0 @@\n-import java.io.ByteArrayOutputStream;\n@@ -30,1 +27,0 @@\n-import java.io.InputStream;\n@@ -287,1 +283,1 @@\n-        Date validDate = (Date) ext.get(PrivateKeyUsageExtension.NOT_BEFORE);\n+        Date validDate = ext.getNotBefore();\n@@ -354,2 +350,2 @@\n-        GeneralNames names = (GeneralNames) ext.get(SubjectAlternativeNameExtension.SUBJECT_NAME);\n-        GeneralName name = (GeneralName) names.get(0);\n+        GeneralNames names = ext.getNames();\n+        GeneralName name = names.get(0);\n@@ -386,1 +382,1 @@\n-        List<PolicyInformation> policies = ext.get(CertificatePoliciesExtension.POLICIES);\n+        List<PolicyInformation> policies = ext.getCertPolicies();\n@@ -406,2 +402,2 @@\n-        GeneralSubtrees permitted = (GeneralSubtrees) ext.get(PERMITTED_SUBTREES);\n-        GeneralSubtrees excluded = (GeneralSubtrees) ext.get(EXCLUDED_SUBTREES);\n+        GeneralSubtrees permitted = ext.getPermittedSubtrees();\n+        GeneralSubtrees excluded = ext.getExcludedSubtrees();\n","filename":"test\/jdk\/java\/security\/cert\/X509CertSelectorTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -248,4 +248,2 @@\n-        info.set(X509CertInfo.VERSION,\n-                new CertificateVersion(CertificateVersion.V1));\n-        info.set(X509CertInfo.SERIAL_NUMBER,\n-                new CertificateSerialNumber(\n+        info.setVersion(new CertificateVersion(CertificateVersion.V1));\n+        info.setSerialNumber(new CertificateSerialNumber(\n@@ -253,6 +251,5 @@\n-        info.set(X509CertInfo.ALGORITHM_ID,\n-                new CertificateAlgorithmId(algId));\n-        info.set(X509CertInfo.SUBJECT, agent);\n-        info.set(X509CertInfo.KEY, new CertificateX509Key(publicKey));\n-        info.set(X509CertInfo.VALIDITY, interval);\n-        info.set(X509CertInfo.ISSUER, agent);\n+        info.setAlgorithmId(new CertificateAlgorithmId(algId));\n+        info.setSubject(agent);\n+        info.setKey(new CertificateX509Key(publicKey));\n+        info.setValidity(interval);\n+        info.setIssuer(agent);\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs7\/SignerOrder.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.util.Arrays;\n@@ -58,4 +57,2 @@\n-        X509CertInfo signerCertInfo = (X509CertInfo)signerCertImpl.get(\n-                X509CertImpl.NAME + \".\" + X509CertImpl.INFO);\n-        X500Name owner = (X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + \".\"\n-                + X509CertInfo.DN_NAME);\n+        X509CertInfo signerCertInfo = signerCertImpl.getInfo();\n+        X500Name owner = signerCertInfo.getSubject();\n@@ -70,1 +67,1 @@\n-        ext.set(\"Reason\", new CRLReasonCodeExtension(1));\n+        ext.setExtension(\"Reason\", new CRLReasonCodeExtension(1));\n","filename":"test\/jdk\/sun\/security\/provider\/X509Factory\/BigCRL.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        exts.set(ext.getId(), ext);\n+        exts.setExtension(ext.getId(), ext);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NoGoodKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        exts.set(\"x\", new SubjectAlternativeNameExtension(names));\n+        exts.setExtension(\"x\", new SubjectAlternativeNameExtension(names));\n","filename":"test\/jdk\/sun\/security\/x509\/OtherName\/Parse.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,13 +125,9 @@\n-        cert.set(X509CertInfo.VERSION,\n-                new CertificateVersion(CertificateVersion.V3));\n-        cert.set(X509CertInfo.SERIAL_NUMBER,\n-                new CertificateSerialNumber((int) (firstDate.getTime() \/ 1000)));\n-        cert.set(X509CertInfo.ALGORITHM_ID,\n-                new CertificateAlgorithmId(AlgorithmId.get(sigAlg)));\n-        cert.set(X509CertInfo.SUBJECT, subject);\n-        cert.set(X509CertInfo.KEY, new CertificateX509Key(publicKey));\n-        cert.set(X509CertInfo.VALIDITY, interval);\n-        cert.set(X509CertInfo.ISSUER, issuer);\n-\n-        cert.set(X509CertInfo.ISSUER_ID,\n-                new UniqueIdentity(\n+        cert.setVersion(new CertificateVersion(CertificateVersion.V3));\n+        cert.setSerialNumber(new CertificateSerialNumber((int) (firstDate.getTime() \/ 1000)));\n+        cert.setAlgorithmId(new CertificateAlgorithmId(AlgorithmId.get(sigAlg)));\n+        cert.setSubject(subject);\n+        cert.setKey(new CertificateX509Key(publicKey));\n+        cert.setValidity(interval);\n+        cert.setIssuer(issuer);\n+\n+        cert.setIssuerUniqueId(new UniqueIdentity(\n@@ -139,1 +135,1 @@\n-        cert.set(X509CertInfo.SUBJECT_ID, new UniqueIdentity(subjectId));\n+        cert.setSubjectUniqueId(new UniqueIdentity(subjectId));\n@@ -166,3 +162,1 @@\n-        GeneralNames subjectNames\n-                = (GeneralNames) subjectName.\n-                get(SubjectAlternativeNameExtension.SUBJECT_NAME);\n+        GeneralNames subjectNames = subjectName.getNames();\n@@ -170,3 +164,1 @@\n-        GeneralNames issuerNames\n-                = (GeneralNames) issuerName.\n-                get(IssuerAlternativeNameExtension.ISSUER_NAME);\n+        GeneralNames issuerNames = issuerName.getNames();\n@@ -204,9 +196,9 @@\n-        exts.set(SubjectAlternativeNameExtension.NAME, subjectName);\n-        exts.set(IssuerAlternativeNameExtension.NAME, issuerName);\n-        exts.set(PrivateKeyUsageExtension.NAME, pkusage);\n-        exts.set(KeyUsageExtension.NAME, usage);\n-        exts.set(AuthorityKeyIdentifierExtension.NAME, aki);\n-        exts.set(SubjectKeyIdentifierExtension.NAME, ski);\n-        exts.set(BasicConstraintsExtension.NAME, cons);\n-        exts.set(PolicyConstraintsExtension.NAME, pce);\n-        cert.set(X509CertInfo.EXTENSIONS, exts);\n+        exts.setExtension(SubjectAlternativeNameExtension.NAME, subjectName);\n+        exts.setExtension(IssuerAlternativeNameExtension.NAME, issuerName);\n+        exts.setExtension(PrivateKeyUsageExtension.NAME, pkusage);\n+        exts.setExtension(KeyUsageExtension.NAME, usage);\n+        exts.setExtension(AuthorityKeyIdentifierExtension.NAME, aki);\n+        exts.setExtension(SubjectKeyIdentifierExtension.NAME, ski);\n+        exts.setExtension(BasicConstraintsExtension.NAME, cons);\n+        exts.setExtension(PolicyConstraintsExtension.NAME, pce);\n+        cert.setExtensions(exts);\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/V3Certificate.java","additions":22,"deletions":30,"binary":false,"changes":52,"status":"modified"}]}