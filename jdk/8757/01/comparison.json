{"files":[{"patch":"@@ -2311,6 +2311,16 @@\n-  ShenandoahHeapRegion* region = heap_region_containing(obj);\n-  bool allocated_after_mark_start = marking_context()->allocated_after_mark_start(obj);\n-  bool requires_concmark_barriers = is_concurrent_mark_in_progress() && !allocated_after_mark_start;\n-  bool requires_loadref_barriers = has_forwarded_objects() && cast_from_oop<HeapWord*>(obj) < heap_region_containing(obj)->get_update_watermark();\n-  bool requires_deep_loadref_barriers = allocated_after_mark_start && has_forwarded_objects();\n-  return requires_concmark_barriers || requires_loadref_barriers || requires_deep_loadref_barriers;\n+  if (is_idle()) return false;\n+\n+  \/\/ Objects allocated after marking start are implicitly alive, don't need any barriers during\n+  \/\/ marking phase.\n+  if (is_concurrent_mark_in_progress() && marking_context()->allocated_after_mark_start(obj)) {\n+    return false;\n+  }\n+\n+  \/\/ Objects allocated after evacuation start are guaranteed in to-space, don't need any barriers\n+  \/\/ during evacuation\/update references phases.\n+  if (has_forwarded_objects() &&\n+      cast_from_oop<HeapWord*>(obj) >= heap_region_containing(obj)->get_update_watermark()) {\n+    return false;\n+  }\n+\n+  return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1288,2 +1288,2 @@\n-    assert(!UseZGC || !chunk->requires_barriers(), \"Allocated ZGC object requires barriers\");\n-    _barriers = !UseZGC && chunk->requires_barriers();\n+    assert(!UseZGC || !UseShenandoahGC || !chunk->requires_barriers(), \"Allocated ZGC\/ShenandoahGC object requires barriers\");\n+    _barriers = !UseZGC && !UseShenandoahGC && chunk->requires_barriers();\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}