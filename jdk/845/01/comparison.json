{"files":[{"patch":"@@ -3903,4 +3903,1 @@\n-            \/\/ Skip over Record attribute if not supported or if super class is\n-            \/\/ not java.lang.Record.\n-            if (supports_records() &&\n-                cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n+            if (supports_records()) { \/\/ Skip over Record attribute if not supported.\n@@ -3911,5 +3908,0 @@\n-              \/\/ Check that class is final and not abstract.\n-              if (!_access_flags.is_final() || _access_flags.is_abstract()) {\n-                classfile_parse_error(\"Record attribute in non-final or abstract class file %s\", THREAD);\n-                return;\n-              }\n@@ -3925,9 +3917,3 @@\n-              if (supports_records()) {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n-                  _class_name->as_C_string());\n-              } else {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n-                   _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n-              }\n+              log_info(class, record)(\n+                \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n+                 _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-\/\/ This test is a Record marked as abstract.  It should result in a\n-\/\/ ClassFormatError exception.\n+\/\/ This test is a Record marked as abstract.  Loading this class should\n+\/\/ not cause a ClassFormatError exception.\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/abstractRecord.jcod","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile superNotJLRecord.jcod recordIgnoredVersion.jcod\n+ * @compile recordIgnoredVersion.jcod\n@@ -40,6 +40,0 @@\n-            \"-Xlog:class+record\", \"-Xshare:off\", \"superNotJLRecord\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Ignoring Record attribute\");\n-        output.shouldContain(\"because super type is not java.lang.Record\");\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"--enable-preview\",\n@@ -47,1 +41,1 @@\n-        output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/ignoreRecordAttribute.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-\/\/ This test is a Record but not marked final.  It should result in a\n-\/\/ ClassFormatError exception.\n+\/\/ This test is a Record but not marked final.  Loading this class should\n+\/\/ not cause a ClassFormatError exception.\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/notFinalRecord.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,3 +57,2 @@\n-        \/\/ Test loading a Record type marked abstract. This should throw ClassFormatError.\n-        runTest(\"abstractRecord\",\n-                \"Record attribute in non-final or abstract class\");\n+        \/\/ Test loading a Record type marked abstract. This should not throw ClassFormatError.\n+        Class abstractClass = Class.forName(\"abstractRecord\");\n@@ -61,3 +60,2 @@\n-        \/\/ Test loading a Record type that is not final. This should throw ClassFormatError.\n-        runTest(\"notFinalRecord\",\n-                \"Record attribute in non-final or abstract class\");\n+        \/\/ Test loading a Record type that is not final. This should not throw ClassFormatError.\n+        Class notFinalClass = Class.forName(\"notFinalRecord\");\n@@ -76,3 +74,8 @@\n-        \/\/ Test that loading a class whose super class is not java.lang.Record\n-        \/\/ ignores a badly formed Record attribute. No exception should be thrown.\n-        newClass = Class.forName(\"superNotJLRecord\");\n+        \/\/ Test that loading a class containing an ill-formed Record attribute causes a\n+        \/\/ ClassFormatError exception even though its super class is not java.lang.Record.\n+        runTest(\"superNotJLRecord\", \"Truncated class file\");\n+\n+        \/\/ Test that loading a class that contains a properly formed Record attribute\n+        \/\/ does not cause a ClassFormatError exception even though its super class is not\n+        \/\/ java.lang.Record.\n+        Class superNoJLRClass = Class.forName(\"superNotJLRecordOK\");\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordAttributeTest.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n-\/\/ This test has a Record attribute that is too short but its super class is\n-\/\/ not java.lang.Record.  So, the bogus Record attribute should be ignored.\n+\/\/ This test has a Record attribute that is too short and its super class is\n+\/\/ not java.lang.Record.  The bad Record attribute should still be detected\n+\/\/ causing a ClassFormatError exception.\n@@ -346,0 +347,326 @@\n+\n+\n+\n+\/\/ This test was generated from this source and then modified:\n+\/\/    record recordNames(int x, String y) {}\n+\/\/\n+\/\/ This class has a valid Record attribute but its super class is\n+\/\/ not java.lang.Record.  Loading this class should not cause a\n+\/\/ ClassFormatError exception.\n+class superNotJLRecordOK {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  60; \/\/ version\n+  [69] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"superNotJLRecordOK\"; \/\/ #10     at 0x46\n+    Utf8 \"x\"; \/\/ #11     at 0x56\n+    Utf8 \"I\"; \/\/ #12     at 0x5A\n+    Field #8 #14; \/\/ #13     at 0x5E\n+    NameAndType #15 #16; \/\/ #14     at 0x63\n+    Utf8 \"y\"; \/\/ #15     at 0x68\n+    Utf8 \"Ljava\/lang\/String;\"; \/\/ #16     at 0x6C\n+    InvokeDynamic 0s #18; \/\/ #17     at 0x81\n+    NameAndType #19 #20; \/\/ #18     at 0x86\n+    Utf8 \"toString\"; \/\/ #19     at 0x8B\n+    Utf8 \"(LsuperNotJLRecordOK;)Ljava\/lang\/String;\"; \/\/ #20     at 0x96\n+    InvokeDynamic 0s #22; \/\/ #21     at 0xBC\n+    NameAndType #23 #24; \/\/ #22     at 0xC1\n+    Utf8 \"hashCode\"; \/\/ #23     at 0xC6\n+    Utf8 \"(LsuperNotJLRecordOK;)I\"; \/\/ #24     at 0xD1\n+    InvokeDynamic 0s #26; \/\/ #25     at 0xE6\n+    NameAndType #27 #28; \/\/ #26     at 0xEB\n+    Utf8 \"equals\"; \/\/ #27     at 0xF0\n+    Utf8 \"(LsuperNotJLRecordOK;Ljava\/lang\/Object;)Z\"; \/\/ #28     at 0xF9\n+    Dynamic 1s #30; \/\/ #29     at 0x0120\n+    NameAndType #31 #32; \/\/ #30     at 0x0125\n+    Utf8 \"\\\\%pattern\\\\%recordExample\\\\%(ILjava\\\\|lang\\\\|String\\\\?)\"; \/\/ #31     at 0x012A\n+    Utf8 \"Ljava\/lang\/runtime\/PatternHandle;\"; \/\/ #32     at 0x015F\n+    Utf8 \"(ILjava\/lang\/String;)V\"; \/\/ #33     at 0x0183\n+    Utf8 \"Code\"; \/\/ #34     at 0x019C\n+    Utf8 \"LineNumberTable\"; \/\/ #35     at 0x01A3\n+    Utf8 \"MethodParameters\"; \/\/ #36     at 0x01B5\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #37     at 0x01C8\n+    Utf8 \"()I\"; \/\/ #38     at 0x01DF\n+    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #39     at 0x01E5\n+    Utf8 \"()Ljava\/lang\/runtime\/PatternHandle;\"; \/\/ #40     at 0x01FD\n+    Utf8 \"SourceFile\"; \/\/ #41     at 0x0223\n+    Utf8 \"superNotJLRecordOK.java\"; \/\/ #42     at 0x0230\n+    Utf8 \"Record\"; \/\/ #43     at 0x0245\n+    Utf8 \"BootstrapMethods\"; \/\/ #44     at 0x024E\n+    MethodHandle 6b #46; \/\/ #45     at 0x0261\n+    Method #47 #48; \/\/ #46     at 0x0265\n+    class #49; \/\/ #47     at 0x026A\n+    NameAndType #50 #51; \/\/ #48     at 0x026D\n+    Utf8 \"java\/lang\/runtime\/ObjectMethods\"; \/\/ #49     at 0x0272\n+    Utf8 \"bootstrap\"; \/\/ #50     at 0x029A\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\"; \/\/ #51     at 0x02A6\n+    String #53; \/\/ #52     at 0x035A\n+    Utf8 \"x;y\"; \/\/ #53     at 0x035D\n+    MethodHandle 1b #7; \/\/ #54     at 0x0363\n+    MethodHandle 1b #13; \/\/ #55     at 0x0367\n+    MethodHandle 6b #57; \/\/ #56     at 0x036B\n+    Method #58 #59; \/\/ #57     at 0x036F\n+    class #60; \/\/ #58     at 0x0374\n+    NameAndType #61 #62; \/\/ #59     at 0x0377\n+    Utf8 \"java\/lang\/runtime\/PatternHandles\"; \/\/ #60     at 0x037C\n+    Utf8 \"ofLazyProjection\"; \/\/ #61     at 0x039F\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/Class;Ljava\/lang\/Class;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/runtime\/PatternHandle;\"; \/\/ #62     at 0x03B2\n+    Utf8 \"InnerClasses\"; \/\/ #63     at 0x0453\n+    class #65; \/\/ #64     at 0x0462\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #65     at 0x0465\n+    class #67; \/\/ #66     at 0x048D\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #67     at 0x0490\n+    Utf8 \"Lookup\"; \/\/ #68     at 0x04B1\n+  } \/\/ Constant Pool\n+\n+  0x0030; \/\/ access [ ACC_SUPER ACC_FINAL ]\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0x04C4\n+      0x8012; \/\/ access\n+      #11; \/\/ name_cpx\n+      #12; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x04CC\n+      0x8012; \/\/ access\n+      #15; \/\/ name_cpx\n+      #16; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [7] { \/\/ methods\n+    { \/\/ Member at 0x04D6\n+      0x0001; \/\/ access\n+      #5; \/\/ name_cpx\n+      #33; \/\/ sig_cpx\n+      [2] { \/\/ Attributes\n+        Attr(#34, 39) { \/\/ Code at 0x04DE\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[15]{\n+            0x2AB700012A1BB500;\n+            0x072A2CB5000DB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x04FF\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x050B\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#36, 9) { \/\/ MethodParameters at 0x050B\n+          0x02000B8000000F80;\n+          0x00;\n+        } \/\/ end MethodParameters\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x051A\n+      0x8001; \/\/ access\n+      #19; \/\/ name_cpx\n+      #37; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 31) { \/\/ Code at 0x0522\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00110000B0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x053B\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0547\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0547\n+      0x8011; \/\/ access\n+      #23; \/\/ name_cpx\n+      #38; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 31) { \/\/ Code at 0x054F\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00150000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x0568\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0574\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0574\n+      0x8011; \/\/ access\n+      #27; \/\/ name_cpx\n+      #39; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 32) { \/\/ Code at 0x057C\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[8]{\n+            0x2A2BBA00190000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x0596\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x05A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x05A2\n+      0x8001; \/\/ access\n+      #11; \/\/ name_cpx\n+      #38; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 29) { \/\/ Code at 0x05AA\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB40007AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x05C1\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x05CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x05CD\n+      0x8001; \/\/ access\n+      #15; \/\/ name_cpx\n+      #37; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 29) { \/\/ Code at 0x05D5\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB4000DB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x05EC\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x05F8\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x05F8\n+      0x0009; \/\/ access\n+      #31; \/\/ name_cpx\n+      #40; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#34, 27) { \/\/ Code at 0x0600\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[3]{\n+            0x121DB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#35, 6) { \/\/ LineNumberTable at 0x0615\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0621\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [4] { \/\/ Attributes\n+    Attr(#41, 2) { \/\/ SourceFile at 0x0623\n+      #42;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#43, 14) { \/\/ Record at 0x062B\n+      0x0002000B000C0000;\n+      0x000F00100000;\n+    } \/\/ end Record\n+    ;\n+    Attr(#44, 24) { \/\/ BootstrapMethods at 0x063F\n+      [2] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #45; \/\/ bootstrap_method_ref\n+          [4] { \/\/ bootstrap_arguments\n+            #8; \/\/  at 0x064D\n+            #52; \/\/  at 0x064F\n+            #54; \/\/  at 0x0651\n+            #55; \/\/  at 0x0653\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+        ;\n+        {  \/\/  bootstrap_method\n+          #56; \/\/ bootstrap_method_ref\n+          [3] { \/\/ bootstrap_arguments\n+            #8; \/\/  at 0x0659\n+            #54; \/\/  at 0x065B\n+            #55; \/\/  at 0x065D\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+    ;\n+    Attr(#63, 10) { \/\/ InnerClasses at 0x065D\n+      [1] { \/\/ InnerClasses\n+        #64 #66 #68 25; \/\/  at 0x066D\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class superNotJLRecordOK\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/superNotJLRecord.jcod","additions":329,"deletions":2,"binary":false,"changes":331,"status":"modified"}]}