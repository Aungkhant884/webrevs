{"files":[{"patch":"@@ -60,1 +60,5 @@\n-      LIBFFI_LIBS=\"-L${with_libffi}\/lib -lffi\"\n+      if test \"x${OPENJDK_TARGET_OS}\" != \"xwindows\"; then\n+        LIBFFI_LIBS=\"-L${with_libffi}\/lib -lffi\"\n+      else\n+        LIBFFI_LIBS=\"${with_libffi}\/lib\/libffi.lib\"\n+      fi\n@@ -70,1 +74,5 @@\n-      LIBFFI_LIBS=\"-L${with_libffi_lib} -lffi\"\n+      if test \"x${OPENJDK_TARGET_OS}\" != \"xwindows\"; then\n+        LIBFFI_LIBS=\"-L${with_libffi_lib} -lffi\"\n+      else\n+        LIBFFI_LIBS=\"${with_libffi_lib}\/libffi.lib\"\n+      fi\n@@ -109,1 +117,0 @@\n-    AC_MSG_CHECKING([if libffi works])\n@@ -115,0 +122,2 @@\n+\n+    AC_MSG_CHECKING([if libffi works])\n@@ -123,3 +132,0 @@\n-    CFLAGS=\"$OLD_CFLAGS\"\n-    LIBS=\"$OLD_LIBS\"\n-    AC_LANG_POP(C)\n@@ -133,0 +139,24 @@\n+    # Check if FFI_GO_CLOSURES is properly defined. On some distributions, notably MacOS AArch64,\n+    # ffitarget.h (included from ffi.h) does not explicitly define FFI_GO_CLOSURES. This makes the\n+    # further include of ffi.h trigger the \"FFI_GO_CLOSURES is undefined\" warning, which fails\n+    # the build when warnings are fatal.\n+    AC_MSG_CHECKING([for FFI_GO_CLOSURES definition])\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n+      #include <ffi.h>\n+      #ifndef FFI_GO_CLOSURES\n+      #error \"FFI_GO_CLOSURES is not defined\"\n+      #endif\n+      ][])],\n+      [\n+        AC_MSG_RESULT([yes])\n+      ],\n+      [\n+        AC_MSG_RESULT([no, defining])\n+        LIBFFI_CFLAGS=\"$LIBFFI_CFLAGS -DFFI_GO_CLOSURES=0\"\n+      ]\n+    )\n+\n+    CFLAGS=\"$OLD_CFLAGS\"\n+    LIBS=\"$OLD_LIBS\"\n+    AC_LANG_POP(C)\n+\n@@ -135,0 +165,8 @@\n+      if test \"x${OPENJDK_TARGET_OS}\" = \"xmacosx\"; then\n+        LIBFFI_LIB_FILE_NAME=libffi.?.dylib\n+      elif test \"x${OPENJDK_TARGET_OS}\" = \"xwindows\"; then\n+        LIBFFI_LIB_FILE_NAME=libffi.dll\n+      else\n+        LIBFFI_LIB_FILE_NAME=libffi.so.?\n+      fi\n+\n@@ -137,2 +175,2 @@\n-        if test -e ${LIBFFI_LIB_PATH}\/libffi.so.?; then\n-          LIBFFI_LIB_FILE=\"${LIBFFI_LIB_PATH}\/libffi.so.?\"\n+        if test -e ${LIBFFI_LIB_PATH}\/${LIBFFI_LIB_FILE_NAME}; then\n+          LIBFFI_LIB_FILE=\"${LIBFFI_LIB_PATH}\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -140,1 +178,1 @@\n-          AC_MSG_ERROR([Could not locate libffi.so.? for bundling in ${LIBFFI_LIB_PATH}])\n+          AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling in ${LIBFFI_LIB_PATH}])\n@@ -145,4 +183,4 @@\n-          if test -e ${SYSROOT}\/usr\/lib\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/libffi.so.?\"\n-          elif test -e ${SYSROOT}\/usr\/lib\/i386-linux-gnu\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/i386-linux-gnu\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME}\"\n+          elif test -e ${SYSROOT}\/usr\/lib\/i386-linux-gnu\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/i386-linux-gnu\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -150,1 +188,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n@@ -153,4 +191,4 @@\n-          if test -e ${SYSROOT}\/usr\/lib64\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib64\/libffi.so.?\"\n-          elif test -e ${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib64\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib64\/${LIBFFI_LIB_FILE_NAME}\"\n+          elif test -e ${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -158,1 +196,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n@@ -162,2 +200,2 @@\n-          if test -e ${SYSROOT}\/usr\/lib\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -165,1 +203,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n","filename":"make\/autoconf\/lib-ffi.m4","additions":60,"deletions":22,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -41,0 +41,32 @@\n+# Note that while the build system supports linking against libffi on Windows (x64),\n+# I couldn't get this script working with a Windows devkit, and instead had to manually create\n+# a libffi bundle for Windows. The steps I took were as follows:\n+#\n+# 1. run 'x64 Native Tools Command Prompt for VS 2022'. After that, cl.exe and link.exe should be on path\n+#\n+# 2. in the same shell, run `ucrt64` (this is one of the shell environments that comes with MSYS2).\n+#    This should carry over the environment set up by the VS dev prompt into the ucrt64 prompt.\n+#\n+# 3. then, in the libffi repo root folder:\n+#   3.a run `autogen.sh`\n+#   3.b run:\n+# ```\n+# bash configure \\\n+#   CC=\"\/path\/to\/libffi\/msvcc.sh -m64\" \\\n+#   CXX=\"\/path\/to\/libffi\/msvcc.sh -m64\" \\\n+#   CPPFLAGS=\"-DFFI_BUILDING_DLL\" \\\n+#   --disable-docs \\\n+#   --prefix=<install dest>\n+# ```\n+# (`<install dest>` can be whatever you like. That's what you point `--with-libffi` to).\n+#\n+# 4. run `make install`. This should create the `<install dest>` directory with the files:\n+#    `include\/ffi.h`, `include\/ffitarget.h`, `lib\/libffi.dll`. It also creates a `lib\/libffi.lib` file,\n+#    but it is of the wrong file type, `DLL` rather than `LIBRARY`.\n+#\n+# 5. Manually create a working `.lib` file (in the <install dest>\/lib dir):\n+#   5.a use `dumpbin \/exports libffi.dll` to get a list of exported symbols\n+#   5.b put them in a `libffi.def` file: `EXPORTS` on the first line, then a symbol on each line following\n+#   5.c run `lib \/def:libffi.def \/machine:x64 \/out:libffi.lib` to create the right `.lib` file (`lib` is a visual studio tool)\n+#\n+\n@@ -52,0 +84,1 @@\n+OS_NAME=$(uname -s)\n@@ -84,0 +117,21 @@\n+\n+case $OS_NAME in\n+  Linux)\n+    CC=$DEVKIT_DIR\/bin\/gcc\n+    CXX=$DEVKIT_DIR\/bin\/g++\n+    # For Linux\/x86 it's under \/lib\/ instead of \/lib64\/\n+    LIB_FOLDER=lib64\n+    LIB_NAME=libffi.so*\n+    ;;\n+  Darwin)\n+    CC=$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/gcc\n+    CXX=$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/gcc\n+    LIB_FOLDER=lib\n+    LIB_NAME=libffi.*.dylib\n+    ;;\n+  *)\n+    echo \" Unsupported OS: $OS_NAME\"\n+    exit 1\n+    ;;\n+esac\n+\n@@ -85,1 +139,5 @@\n-bash .\/configure --prefix=$INSTALL_DIR CC=$DEVKIT_DIR\/bin\/gcc CXX=$DEVKIT_DIR\/bin\/g++\n+bash .\/configure \\\n+  --disable-docs \\\n+  --prefix=$INSTALL_DIR \\\n+  CC=$CC \\\n+  CXX=$CXX\n@@ -93,1 +151,1 @@\n-  echo \"Copying libffi.so* to image\"\n+  echo \"Copying ${LIB_NAME} to image\"\n@@ -95,2 +153,1 @@\n-  # For Linux\/x86 it's under \/lib\/ instead of \/lib64\/\n-  cp -a $INSTALL_DIR\/lib64\/libffi.so* $IMAGE_DIR\/lib\/\n+  cp -a $INSTALL_DIR\/${LIB_FOLDER}\/${LIB_NAME} $IMAGE_DIR\/lib\/\n","filename":"make\/devkit\/createLibffiBundle.sh","additions":61,"deletions":4,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -231,0 +231,1 @@\n+      LIBS_windows := $(LIBFFI_LIBS) ws2_32.lib, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-#ifdef __APPLE__\n-#define FFI_GO_CLOSURES 0\n-#endif\n-\n","filename":"src\/hotspot\/cpu\/zero\/globalDefinitions_zero.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <stdint.h>\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStack.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n@@ -42,0 +43,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n","filename":"test\/jdk\/java\/foreign\/arraystructs\/TestArrayStructs.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}