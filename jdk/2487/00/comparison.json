{"files":[{"patch":"@@ -1243,0 +1243,1 @@\n+        int len;\n@@ -1247,1 +1248,1 @@\n-            return cipher.decryptFinal(src, dst);\n+            len = cipher.decryptFinal(src, dst);\n@@ -1252,1 +1253,1 @@\n-            return cipher.encryptFinal(src, dst);\n+            len = cipher.encryptFinal(src, dst);\n@@ -1254,0 +1255,2 @@\n+        endDoFinal();\n+        return len;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/CipherCore.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -910,0 +910,1 @@\n+        src.position(src.limit());\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261462\n+ * @summary Verify that after the first doFinal() decryption op, the ByteBuffer\n+ * is properly set for the second operation.\n+ *\/\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import java.nio.ByteBuffer;\n+\n+public class ResetByteBuffer {\n+\n+    Cipher c;\n+    SecretKey key;\n+    ByteBuffer in, out;\n+    byte[] data = new byte[1500];\n+    byte encrypted[];\n+\n+    public static final void main(String args[]) throws Exception {\n+        \/\/ Cannot do encryption back to back with AES\/GCM\n+        \/\/ Tests GCM's ByteBuffer code\n+        String algo = \"AES\/GCM\/NoPadding\";\n+        new ResetByteBuffer(algo).decrypt(true).updateTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(false).updateTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(true).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(false).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(true).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(false).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(true).doFinalTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(false).doFinalTest().doFinalTest();\n+\n+        \/\/ Tests CipherCore code.  Testing CBC should be enough to cover the\n+        \/\/ other algorithms that use CipherCore\n+        algo = \"AES\/CBC\/PKCS5Padding\";\n+        new ResetByteBuffer(algo).encrypt(true).updateTest().updateTest();\n+        new ResetByteBuffer(algo).encrypt(false).updateTest().updateTest();\n+        new ResetByteBuffer(algo).encrypt(true).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).encrypt(false).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).encrypt(true).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).encrypt(false).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).encrypt(true).doFinalTest().doFinalTest();\n+        new ResetByteBuffer(algo).encrypt(false).doFinalTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(true).updateTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(false).updateTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(true).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(false).updateTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(true).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(false).doFinalTest().updateTest();\n+        new ResetByteBuffer(algo).decrypt(true).doFinalTest().doFinalTest();\n+        new ResetByteBuffer(algo).decrypt(false).doFinalTest().doFinalTest();\n+    }\n+\n+    public ResetByteBuffer(String algo) throws Exception {\n+        c = Cipher.getInstance(algo);\n+        String a[] = algo.split(\"\/\");\n+        KeyGenerator kg = KeyGenerator.getInstance(a[0]);\n+        key = kg.generateKey();\n+        \/\/ Setup encrypted data\n+        c.init(Cipher.ENCRYPT_MODE, key, c.getParameters());\n+        encrypted = new byte[c.getOutputSize(data.length)];\n+        c.doFinal(data, 0, data.length, encrypted, 0);\n+    }\n+\n+    ResetByteBuffer decrypt(boolean direct) throws Exception {\n+        \/\/ allocate bytebuffers\n+        if (direct) {\n+            in = ByteBuffer.allocateDirect(encrypted.length);\n+            out = ByteBuffer.allocateDirect(encrypted.length);\n+        } else {\n+            in = ByteBuffer.allocate(encrypted.length);\n+            out = ByteBuffer.allocate(encrypted.length);\n+        }\n+        in.put(encrypted);\n+        in.flip();\n+        c.init(Cipher.DECRYPT_MODE, key, c.getParameters());\n+        return this;\n+    }\n+\n+    ResetByteBuffer encrypt(boolean direct) throws Exception {\n+        \/\/ allocate bytebuffers\n+        if (direct) {\n+            in = ByteBuffer.allocateDirect(data.length);\n+            out = ByteBuffer.allocateDirect(c.getOutputSize(data.length));\n+        } else {\n+            in = ByteBuffer.allocate(data.length);\n+            out = ByteBuffer.allocate(c.getOutputSize(data.length));\n+        }\n+        c.init(Cipher.ENCRYPT_MODE, key, c.getParameters());\n+        return this;\n+    }\n+\n+    ResetByteBuffer updateTest() throws Exception {\n+        int updateLen = data.length \/ 2;\n+        in.limit(updateLen);\n+        c.update(in, out);\n+        in.limit(in.capacity());\n+        c.doFinal(in, out);\n+        if (in.capacity() != in.position()) {\n+            System.out.println(\"There is data remaining in the input buffer\");\n+        }\n+        if (out.limit() != out.position()) {\n+            System.out.println(\"There is data remaining in the output buffer\");\n+        }\n+        in.flip();\n+        out.position(0);\n+        out.limit(out.capacity());\n+        return this;\n+    }\n+\n+    ResetByteBuffer doFinalTest() throws Exception {\n+        c.doFinal(in, out);\n+        if (in.capacity() != in.position()) {\n+            System.out.println(\"There is data remaining in the input buffer\");\n+        }\n+        if (out.limit() != out.position()) {\n+            System.out.println(\"There is data remaining in the output buffer\");\n+        }\n+        in.flip();\n+        out.position(0);\n+        out.limit(out.capacity());\n+        return this;\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/CipherSpi\/ResetByteBuffer.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}