{"files":[{"patch":"@@ -41,8 +41,0 @@\n-import javax.net.ssl.HostnameVerifier;\n-import javax.net.ssl.HttpsURLConnection;\n-import javax.net.ssl.SSLSession;\n-import javax.net.ssl.SSLSocket;\n-import java.io.BufferedReader;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n@@ -50,3 +42,0 @@\n-import java.net.URL;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -107,57 +96,0 @@\n-\n-    @Override\n-    protected boolean isCustomizedClientConnection() { return true; }\n-\n-    @Override\n-    protected void runServerApplication(SSLSocket socket) throws Exception {\n-        var response = \"Hello World!\";\n-        var out = new DataOutputStream(socket.getOutputStream());\n-        try {\n-            \/\/ We don't need to process the data from the socket\n-            \/\/ Simply sending a response right away is sufficient\n-            \/\/ to generate the desired debug output\n-            var responseBytes = response.getBytes(UTF_8);\n-\n-            out.writeBytes(\"HTTP\/1.0 200 OK\\r\\n\");\n-            out.writeBytes(\"Content-Length: \" + responseBytes.length + \"\\r\\n\");\n-            out.writeBytes(\"Content-Type: text\/html\\r\\n\\r\\n\");\n-            out.write(responseBytes);\n-            out.flush();\n-        } catch (Exception e) {\n-            System.err.println(\"Server-Side Exception: \" + e);\n-            e.printStackTrace(System.err);\n-            out.writeBytes(\"HTTP\/1.0 400 \" + e.getMessage() + \"\\r\\n\");\n-            out.writeBytes(\"Content-Type: text\/html\\r\\n\\r\\n\");\n-            out.flush();\n-        } finally {\n-            socket.getInputStream().readAllBytes();\n-        }\n-    }\n-\n-    @Override\n-    protected void runClientApplication(int serverPort) throws Exception {\n-        var context = createClientSSLContext();\n-        HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());\n-        HttpsURLConnection.setDefaultHostnameVerifier(new NameVerifier());\n-\n-        var host = serverAddress == null ? \"localhost\" : serverAddress.getHostAddress();\n-        var url = new URL(\"https:\/\/\" + host + \":\" + serverPort + \"\/\");\n-        System.out.println(\"Connecting to \" + url);\n-        System.out.println(\"Reading data on client side: \");\n-        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();\n-        try (var in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n-            String line;\n-            while ((line = in.readLine()) != null) {\n-                System.out.println(line);\n-            }\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static class NameVerifier implements HostnameVerifier {\n-        @Override\n-        public boolean verify(String s, SSLSession sslSession) {\n-            return true;\n-        }\n-    }\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"modified"}]}