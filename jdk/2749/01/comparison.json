{"files":[{"patch":"@@ -92,0 +92,5 @@\n+                output.asLines()\n+                        .stream()\n+                        .filter(line -> line.startsWith(\"Connecting to\"))\n+                        .forEach(System.out::println); \/\/ prints connection info from test jvm output\n+\n@@ -93,1 +98,2 @@\n-                    throw new RuntimeException(\"Test JVM process failed. JVM stderr= \" + output.getStderr());\n+                    output.asLines().forEach(System.out::println);\n+                    throw new RuntimeException(\"Test JVM process failed\");\n@@ -120,1 +126,3 @@\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n+            System.err.println(\"Server-Side Exception: \" + e);\n+            e.printStackTrace(System.err);\n@@ -124,0 +132,2 @@\n+        } finally {\n+            socket.getInputStream().readAllBytes();\n@@ -135,5 +145,8 @@\n-        var httpsConnection = (HttpsURLConnection) url.openConnection();\n-        httpsConnection.disconnect();\n-        try (var in = new BufferedReader(new InputStreamReader(httpsConnection.getInputStream()))) {\n-            \/\/ Getting the input stream from the BufferedReader is sufficient to generate the desired debug output\n-            \/\/ We don't need to process the data\n+        System.out.println(\"Connecting to \" + url);\n+        System.out.println(\"Reading data on client side: \");\n+        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();\n+        try (var in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n+            String line;\n+            while ((line = in.readLine()) != null) {\n+                System.out.println(line);\n+            }\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"}]}