{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library ..\/..\/lib\n+ * @library \/tools\/lib ..\/..\/lib\n@@ -33,1 +33,1 @@\n- * @build javadoc.tester.*\n+ * @build toolbox.ToolBox javadoc.tester.*\n@@ -38,0 +38,1 @@\n+import toolbox.ToolBox;\n@@ -46,0 +47,2 @@\n+    ToolBox tb = new ToolBox();\n+\n@@ -49,1 +52,1 @@\n-        copyDir(testSrc(\"pkg\"), \".\");\n+        tb.copyDir(testSrc(\"pkg\"), \"pkg\");\n@@ -61,1 +64,1 @@\n-        copyDir(testSrc(\"pkg\"), outdir);\n+        tb.copyDir(testSrc(\"pkg\"), outdir + \"\/pkg\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDocFileDir\/TestDocFileDir.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,3 +168,2 @@\n-        Path outputDirPath = outputDir.toPath();\n-        for (Path p : tb.findFiles(\".html\", outputDirPath)) {\n-            checkBodyClass(outputDirPath.relativize(p));\n+        for (Path p : tb.findFiles(\".html\", outputDir)) {\n+            checkBodyClass(outputDir.relativize(p));\n@@ -234,3 +233,2 @@\n-        Path outputDirPath = outputDir.toPath();\n-        for (Path p : tb.findFiles(\".html\", outputDirPath)) {\n-            checkMetadata(outputDirPath.relativize(p));\n+        for (Path p : tb.findFiles(\".html\", outputDir)) {\n+            checkMetadata(outputDir.relativize(p));\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMetadata\/TestMetadata.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,0 +38,3 @@\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -203,1 +206,1 @@\n-        File f = new File(outputDir, file);\n+        Path f = outputDir.resolve(file);\n@@ -205,1 +208,1 @@\n-        try (FileOutputStream fos = new FileOutputStream(f)) {\n+        try (OutputStream fos = Files.newOutputStream(f)) {\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/TestRelativeLinks.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,3 +44,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileReader;\n@@ -48,0 +45,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -74,1 +73,1 @@\n-        engine.eval(new BufferedReader(new FileReader(new File(testSrc, \"javadoc-search.js\"))));\n+        engine.eval(Files.newBufferedReader(Path.of(testSrc).resolve(\"javadoc-search.js\")));\n@@ -76,1 +75,1 @@\n-        inv.invokeFunction(\"loadIndexFiles\", outputDir.getAbsolutePath());\n+        inv.invokeFunction(\"loadIndexFiles\", outputDir.toAbsolutePath().toString());\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/TestSearchScript.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-            c.checkDirectory(outputDir.toPath());\n+            c.checkDirectory(outputDir);\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSingletonLists\/TestSingletonLists.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -384,1 +384,1 @@\n-            c.checkDirectory(outputDir.toPath());\n+            c.checkDirectory(outputDir);\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testStylesheet\/TestStylesheet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -30,2 +29,0 @@\n-import java.io.FileWriter;\n-import java.io.FilenameFilter;\n@@ -44,0 +41,2 @@\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileVisitResult;\n@@ -47,0 +46,2 @@\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -51,0 +52,1 @@\n+import java.util.Comparator;\n@@ -160,1 +162,1 @@\n-    protected File outputDir;\n+    protected Path outputDir;\n@@ -172,1 +174,1 @@\n-    private final Map<File,SoftReference<String>> fileContentCache = new HashMap<>();\n+    private final Map<Path,SoftReference<String>> fileContentCache = new HashMap<>();\n@@ -188,1 +190,1 @@\n-        return new File(testSrc, path).getPath();\n+        return Path.of(testSrc).resolve(path).toString();\n@@ -198,1 +200,1 @@\n-        EMPTY((file, name) -> true),\n+        EMPTY(p -> true),\n@@ -205,1 +207,1 @@\n-        NO_HTML_FILES((file, name) -> name.endsWith(\".html\")),\n+        NO_HTML_FILES(p -> p.getFileName().toString().endsWith(\".html\")),\n@@ -209,1 +211,1 @@\n-        NONE(null) { @Override void check(File dir) { } };\n+        NONE(null) { @Override void check(Path dir) { } };\n@@ -212,1 +214,1 @@\n-        FilenameFilter filter;\n+        DirectoryStream.Filter<Path> filter;\n@@ -214,1 +216,1 @@\n-        DirectoryCheck(FilenameFilter f) {\n+        DirectoryCheck(DirectoryStream.Filter<Path> f) {\n@@ -218,9 +220,14 @@\n-        void check(File dir) {\n-            if (dir.isDirectory()) {\n-                String[] contents = dir.list(filter);\n-                if (contents == null)\n-                    throw new Error(\"cannot list directory: \" + dir);\n-                if (contents.length > 0) {\n-                    System.err.println(\"Found extraneous files in dir:\" + dir.getAbsolutePath());\n-                    for (String x : contents) {\n-                        System.err.println(x);\n+        void check(Path dir) {\n+            if (Files.isDirectory(dir)) {\n+                List<Path> contents = new ArrayList<>();\n+                try (var ds = Files.newDirectoryStream(dir, filter)) {\n+                    for (Path p : ds) {\n+                        contents.add(p);\n+                    }\n+                } catch (IOException e) {\n+                    throw new Error(\"cannot list directory: \" + dir + \"; \" + e, e);\n+                }\n+                if (!contents.isEmpty()) {\n+                    System.err.println(\"Found extraneous files in dir:\" + dir.toAbsolutePath());\n+                    for (Path p : contents) {\n+                        System.err.println(p);\n@@ -319,1 +326,1 @@\n-        outputDir = new File(\".\");\n+        outputDir = Path.of(\".\");\n@@ -325,1 +332,1 @@\n-                case \"-d\" -> outputDir = new File(args[++i]);\n+                case \"-d\" -> outputDir = Path.of(args[++i]);\n@@ -380,1 +387,1 @@\n-        if (exitCode == Exit.OK.code && outputDir.exists()) {\n+        if (exitCode == Exit.OK.code && Files.exists(outputDir)) {\n@@ -505,2 +512,2 @@\n-            String fileString = readFile(outputDir, path);\n-            checkOutput(new File(outputDir, path).getPath(), fileString, expectedFound, strings);\n+            String fileString = readFile(outputDir, Path.of(path));\n+            checkOutput(outputDir.resolve(path).toString(), fileString, expectedFound, strings);\n@@ -597,1 +604,1 @@\n-            c.checkDirectory(outputDir.toPath());\n+            c.checkDirectory(outputDir);\n@@ -619,1 +626,1 @@\n-            c.checkDirectory(outputDir.toPath());\n+            c.checkDirectory(outputDir);\n@@ -644,2 +651,2 @@\n-                File f = new File(outputDir, p);\n-                s.checkFiles(List.of(f.toPath()), false, Collections.emptySet());\n+                Path f = outputDir.resolve(p);\n+                s.checkFiles(List.of(f), false, Collections.emptySet());\n@@ -694,2 +701,2 @@\n-            File file = new File(outputDir, path);\n-            boolean isFound = file.exists();\n+            Path file = outputDir.resolve(path);\n+            boolean isFound = Files.exists(file);\n@@ -711,1 +718,1 @@\n-        File file = new File(outputDir, path);\n+        Path file = outputDir.resolve(path);\n@@ -739,1 +746,1 @@\n-        File file = new File(outputDir, path);\n+        Path file = outputDir.resolve(path);\n@@ -765,2 +772,2 @@\n-        File bd1 = new File(baseDir1);\n-        File bd2 = new File(baseDir2);\n+        Path bd1 = Path.of(baseDir1);\n+        Path bd2 = Path.of(baseDir2);\n@@ -768,1 +775,1 @@\n-            diff(bd1, bd2, file);\n+            diff(bd1, bd2, Path.of(file));\n@@ -772,45 +779,0 @@\n-    \/**\n-     * Copies a directory from one place to another.\n-     *\n-     * @param targetDir the directory to copy.\n-     * @param destDir the destination to copy the directory to.\n-     *\/\n-    \/\/ TODO: convert to using java.nio.Files.walkFileTree\n-    public void copyDir(String targetDir, String destDir) {\n-        try {\n-            File targetDirObj = new File(targetDir);\n-            File destDirParentObj = new File(destDir);\n-            File destDirObj = new File(destDirParentObj, targetDirObj.getName());\n-            if (! destDirParentObj.exists()) {\n-                destDirParentObj.mkdir();\n-            }\n-            if (! destDirObj.exists()) {\n-                destDirObj.mkdir();\n-            }\n-            String[] files = targetDirObj.list();\n-            for (String file : files) {\n-                File srcFile = new File(targetDirObj, file);\n-                File destFile = new File(destDirObj, file);\n-                if (srcFile.isFile()) {\n-                    out.println(\"Copying \" + srcFile + \" to \" + destFile);\n-                    copyFile(destFile, srcFile);\n-                } else if(srcFile.isDirectory()) {\n-                    copyDir(srcFile.getAbsolutePath(), destDirObj.getAbsolutePath());\n-                }\n-            }\n-        } catch (IOException exc) {\n-            throw new Error(\"Could not copy \" + targetDir + \" to \" + destDir);\n-        }\n-    }\n-\n-    \/**\n-     * Copies a file.\n-     *\n-     * @param destfile the destination file\n-     * @param srcfile the source file\n-     * @throws IOException\n-     *\/\n-    public void copyFile(File destfile, File srcfile) throws IOException {\n-        Files.copy(srcfile.toPath(), destfile.toPath());\n-    }\n-\n@@ -824,1 +786,1 @@\n-        return readFile(outputDir, fileName);\n+        return readFile(outputDir, Path.of(fileName));\n@@ -828,1 +790,1 @@\n-        return readFile(outputDir, fileName);\n+        return readFile(outputDir, Path.of(fileName));\n@@ -832,1 +794,1 @@\n-        return readFile(new File(baseDir), fileName);\n+        return readFile(Path.of(baseDir), Path.of(fileName));\n@@ -836,2 +798,2 @@\n-        File baseDir;\n-        if (file.startsWith(outputDir.toPath())) {\n+        Path baseDir;\n+        if (file.startsWith(outputDir)) {\n@@ -840,1 +802,1 @@\n-            baseDir = currDir.toFile();\n+            baseDir = currDir;\n@@ -842,1 +804,1 @@\n-            baseDir = file.getParent().toFile();\n+            baseDir = file.getParent();\n@@ -844,1 +806,1 @@\n-        String fileName = baseDir.toPath().relativize(file).toString();\n+        Path fileName = baseDir.relativize(file);\n@@ -855,1 +817,1 @@\n-    private String readFile(File baseDir, String fileName) throws Error {\n+    private String readFile(Path baseDir, Path fileName) throws Error {\n@@ -861,1 +823,1 @@\n-            File file = new File(baseDir, fileName);\n+            Path file = baseDir.resolve(fileName);\n@@ -868,1 +830,1 @@\n-            content = new String(Files.readAllBytes(file.toPath()), charset);\n+            content = new String(Files.readAllBytes(file), charset);\n@@ -900,1 +862,1 @@\n-    protected void passed(File file, String message) {\n+    protected void passed(Path file, String message) {\n@@ -925,1 +887,1 @@\n-    protected void failed(File file, String message) {\n+    protected void failed(Path file, String message) {\n@@ -1005,1 +967,1 @@\n-    private void diff(File baseDir1, File baseDir2, String file) {\n+    private void diff(Path baseDir1, Path baseDir2, Path file) {\n@@ -1008,1 +970,1 @@\n-        checking(\"diff \" + new File(baseDir1, file) + \", \" + new File(baseDir2, file));\n+        checking(\"diff \" + baseDir1.resolve(file) + \", \" + baseDir2.resolve(file));\n@@ -1071,8 +1033,8 @@\n-        String outDir;\n-        String rootDir = rootDir();\n-\n-        static String rootDir() {\n-            File f = new File(\".\").getAbsoluteFile();\n-            while (!new File(f, \".hg\").exists())\n-                f = f.getParentFile();\n-            return f.getPath();\n+        Path outDir;\n+        Path rootDir = rootDir();\n+\n+        static Path rootDir() {\n+            Path f = Path.of(\".\").toAbsolutePath();\n+            while (f != null && !Files.exists(f.resolve(\".git\")))\n+                f = f.getParent();\n+            return f;\n@@ -1081,2 +1043,2 @@\n-        void setOutDir(File outDir) {\n-            this.outDir = outDir.getPath();\n+        void setOutDir(Path outDir) {\n+            this.outDir = outDir;\n@@ -1087,3 +1049,4 @@\n-            if (file.startsWith(outDir + \"\/\"))\n-                file = file.substring(outDir.length() + 1);\n-            tests.add(file + \" \" + positive);\n+            Path p = Path.of(file);\n+            if (p.startsWith(outDir))\n+                p = p.relativize(outDir);\n+            tests.add(p + \" \" + positive);\n@@ -1094,1 +1057,1 @@\n-            String simpleText = text.replaceAll(\"\\\\s+\", \" \").replace(rootDir, \"[ROOT]\");\n+            String simpleText = text.replaceAll(\"\\\\s+\", \" \").replace(rootDir.toString(), \"[ROOT]\");\n@@ -1099,2 +1062,3 @@\n-            if (file.startsWith(outDir + \"\/\"))\n-                file = file.substring(outDir.length() + 1);\n+            Path p = Path.of(file);\n+            if (p.startsWith(outDir))\n+                p = p.relativize(outDir);\n@@ -1102,1 +1066,1 @@\n-            tests.add(file + \" \" + positive + \" \" + text.hashCode() + \" \" + simpleText);\n+            tests.add(p + \" \" + positive + \" \" + text.hashCode() + \" \" + simpleText);\n@@ -1107,2 +1071,2 @@\n-            tests.sort((a, b) -> a.compareTo(b));\n-            try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"tester.log\"))) {\n+            tests.sort(Comparator.naturalOrder());\n+            try (var bw = Files.newBufferedWriter(Path.of(\"tester.log\"))) {\n@@ -1119,2 +1083,0 @@\n-    \/\/ Support classes for checkLinks\n-\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":79,"deletions":117,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.FileVisitOption;\n@@ -49,0 +51,1 @@\n+import java.util.EnumSet;\n@@ -252,1 +255,45 @@\n-     * Creates one of more directories.\n+     * Copies the contents of a directory to another directory.\n+     * <p>Similar to the shell command: {@code rsync fromDir\/ toDir\/}.\n+     *\n+     * @param fromDir the directory containing the files to be copied\n+     * @param toDir   the destination to which to copy the files\n+     *\/\n+    public void copyDir(String fromDir, String toDir) {\n+        copyDir(Path.of(fromDir), Path.of(toDir));\n+    }\n+\n+    \/**\n+     * Copies the contents of a directory to another directory.\n+     * The destination direction should not already exist.\n+     * <p>Similar to the shell command: {@code rsync fromDir\/ toDir\/}.\n+     *\n+     * @param fromDir the directory containing the files to be copied\n+     * @param toDir   the destination to which to copy the files\n+     *\/\n+    public void copyDir(Path fromDir, Path toDir) {\n+        try {\n+            if (toDir.getParent() != null) {\n+                Files.createDirectories(toDir.getParent());\n+            }\n+            Files.walkFileTree(fromDir, new SimpleFileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult preVisitDirectory(Path fromSubdir, BasicFileAttributes attrs)\n+                        throws IOException {\n+                    Files.copy(fromSubdir, toDir.resolve(fromDir.relativize(fromSubdir)));\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult visitFile(Path fromFile, BasicFileAttributes attrs)\n+                        throws IOException {\n+                    Files.copy(fromFile, toDir.resolve(fromDir.relativize(fromFile)));\n+                    return FileVisitResult.CONTINUE;\n+                }\n+            });\n+        } catch (IOException e) {\n+            throw new Error(\"Could not copy \" + fromDir + \" to \" + toDir + \": \" + e, e);\n+        }\n+    }\n+\n+    \/**\n+     * Creates one or more directories.\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"}]}