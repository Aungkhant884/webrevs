{"files":[{"patch":"@@ -2245,1 +2245,1 @@\n-  \/\/ Save pc in thread\n+\n@@ -2247,6 +2247,1 @@\n-  \/\/ Do not blow up if no thread info available.\n-  if (thread) {\n-    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Pc);\n-  }\n-  \/\/ Set pc to handler\n-  exceptionInfo->ContextRecord->Pc = (DWORD64)handler;\n+  #define PC_NAME Pc\n@@ -2254,6 +2249,3 @@\n-  \/\/ Do not blow up if no thread info available.\n-  if (thread != NULL) {\n-    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Rip);\n-  }\n-  \/\/ Set pc to handler\n-  exceptionInfo->ContextRecord->Rip = (DWORD64)handler;\n+  #define PC_NAME Rip\n+#elif defined(_M_IX86)\n+  #define PC_NAME Eip\n@@ -2261,3 +2253,6 @@\n-  \/\/ Do not blow up if no thread info available.\n-  if (thread != NULL) {\n-    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Eip);\n+  #error unknown architecture\n+#endif\n+\n+  \/\/ Save pc in thread\n+  if (thread != nullptr && thread->is_Java_thread()) {\n+    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->PC_NAME);\n@@ -2265,0 +2260,1 @@\n+\n@@ -2266,2 +2262,1 @@\n-  exceptionInfo->ContextRecord->Eip = (DWORD)(DWORD_PTR)handler;\n-#endif\n+  exceptionInfo->ContextRecord->PC_NAME = (DWORD64)handler;\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-static intptr_t* invalid_address = (intptr_t*)(intptr_t)os::min_page_size();\n+static intptr_t* invalid_address = (intptr_t*)(intptr_t) NOT_AIX(os::min_page_size()) AIX_ONLY(-1);\n@@ -42,0 +42,2 @@\n+#ifndef _WIN32\n+\/\/ Needs JDK-8185734 to be solved\n@@ -48,0 +50,1 @@\n+#endif \/\/ _WIN32\n","filename":"test\/hotspot\/gtest\/runtime\/test_safefetch.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}