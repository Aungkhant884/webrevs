{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-    AixFileSystem(UnixFileSystemProvider provider, String dir) {\n-        super(provider, dir);\n+    AixFileSystem(UnixFileSystemProvider provider) {\n+        super(provider);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/AixFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-    AixFileSystem newFileSystem(String dir) {\n-        return new AixFileSystem(this, dir);\n+    AixFileSystem newFileSystem() {\n+        return new AixFileSystem(this);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/AixFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n-    LinuxFileSystem(UnixFileSystemProvider provider, String dir) {\n-        super(provider, dir);\n+    LinuxFileSystem(UnixFileSystemProvider provider) {\n+        super(provider);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-    LinuxFileSystem newFileSystem(String dir) {\n-        return new LinuxFileSystem(this, dir);\n+    LinuxFileSystem newFileSystem() {\n+        return new LinuxFileSystem(this);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,2 +49,2 @@\n-    BsdFileSystem(UnixFileSystemProvider provider, String dir) {\n-        super(provider, dir);\n+    BsdFileSystem(UnixFileSystemProvider provider) {\n+        super(provider);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-    BsdFileSystem newFileSystem(String dir) {\n-        return new BsdFileSystem(this, dir);\n+    BsdFileSystem newFileSystem() {\n+        return new BsdFileSystem(this);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-    MacOSXFileSystem(UnixFileSystemProvider provider, String dir) {\n-        super(provider, dir);\n+    MacOSXFileSystem(UnixFileSystemProvider provider) {\n+        super(provider);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-    MacOSXFileSystem newFileSystem(String dir) {\n-        return new MacOSXFileSystem(this, dir);\n+    MacOSXFileSystem newFileSystem() {\n+        return new MacOSXFileSystem(this);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -76,1 +77,0 @@\n-    private final boolean needToResolveAgainstDefaultDirectory;\n@@ -80,1 +80,2 @@\n-    UnixFileSystem(UnixFileSystemProvider provider, String dir) {\n+    UnixFileSystem(UnixFileSystemProvider provider) {\n+        String dir = StaticProperty.userDir();\n@@ -87,22 +88,0 @@\n-        \/\/ if process-wide chdir is allowed or default directory is not the\n-        \/\/ process working directory then paths must be resolved against the\n-        \/\/ default directory.\n-        String propValue = GetPropertyAction\n-                .privilegedGetProperty(\"sun.nio.fs.chdirAllowed\", \"false\");\n-        boolean chdirAllowed = propValue.isEmpty() ? true : Boolean.parseBoolean(propValue);\n-        if (chdirAllowed) {\n-            this.needToResolveAgainstDefaultDirectory = true;\n-        } else {\n-            byte[] cwd = UnixNativeDispatcher.getcwd();\n-            boolean defaultIsCwd = (cwd.length == defaultDirectory.length);\n-            if (defaultIsCwd) {\n-                for (int i=0; i<cwd.length; i++) {\n-                    if (cwd[i] != defaultDirectory[i]) {\n-                        defaultIsCwd = false;\n-                        break;\n-                    }\n-                }\n-            }\n-            this.needToResolveAgainstDefaultDirectory = !defaultIsCwd;\n-        }\n-\n@@ -118,4 +97,0 @@\n-    boolean needToResolveAgainstDefaultDirectory() {\n-        return needToResolveAgainstDefaultDirectory;\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":3,"deletions":28,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        theFileSystem = newFileSystem(StaticProperty.userDir());\n+        theFileSystem = newFileSystem();\n@@ -86,1 +86,1 @@\n-     * Constructs a new file system using the given default directory.\n+     * Constructs a new file system.\n@@ -88,1 +88,1 @@\n-    abstract UnixFileSystem newFileSystem(String dir);\n+    abstract UnixFileSystem newFileSystem();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,5 +55,0 @@\n-    \/**\n-     * char *getcwd(char *buf, size_t size);\n-     *\/\n-    static native byte[] getcwd();\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,4 +141,2 @@\n-        \/\/ resolve against default directory if required (chdir allowed or\n-        \/\/ file system default directory is not working directory)\n-        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n-            return resolve(getFileSystem().defaultDirectory(), path);\n+        if (!isEmpty()) {\n+            return path;\n@@ -146,7 +144,3 @@\n-            if (!isEmpty()) {\n-                return path;\n-            } else {\n-                \/\/ empty path case will access current directory\n-                byte[] here = { '.' };\n-                return here;\n-            }\n+            \/\/ empty path case will access current directory\n+            byte[] here = { '.' };\n+            return here;\n@@ -163,5 +157,1 @@\n-        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n-            return Util.toString(getByteArrayForSysCalls());\n-        } else {\n-            return toString();\n-        }\n+        return toString();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,19 +327,0 @@\n-JNIEXPORT jbyteArray JNICALL\n-Java_sun_nio_fs_UnixNativeDispatcher_getcwd(JNIEnv* env, jclass this) {\n-    jbyteArray result = NULL;\n-    char buf[PATH_MAX+1];\n-\n-    \/* EINTR not listed as a possible error *\/\n-    char* cwd = getcwd(buf, sizeof(buf));\n-    if (cwd == NULL) {\n-        throwUnixException(env, errno);\n-    } else {\n-        jsize len = (jsize)strlen(buf);\n-        result = (*env)->NewByteArray(env, len);\n-        if (result != NULL) {\n-            (*env)->SetByteArrayRegion(env, result, 0, len, (jbyte*)buf);\n-        }\n-    }\n-    return result;\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -45,2 +46,1 @@\n-    WindowsFileSystem(WindowsFileSystemProvider provider,\n-                      String dir)\n+    WindowsFileSystem(WindowsFileSystemProvider provider)\n@@ -51,0 +51,1 @@\n+        String dir = StaticProperty.userDir();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -52,1 +51,1 @@\n-        theFileSystem = new WindowsFileSystem(this, StaticProperty.userDir());\n+        theFileSystem = new WindowsFileSystem(this);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}