{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,5 +55,0 @@\n-    \/**\n-     * char *getcwd(char *buf, size_t size);\n-     *\/\n-    static native byte[] getcwd();\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,19 +327,0 @@\n-JNIEXPORT jbyteArray JNICALL\n-Java_sun_nio_fs_UnixNativeDispatcher_getcwd(JNIEnv* env, jclass this) {\n-    jbyteArray result = NULL;\n-    char buf[PATH_MAX+1];\n-\n-    \/* EINTR not listed as a possible error *\/\n-    char* cwd = getcwd(buf, sizeof(buf));\n-    if (cwd == NULL) {\n-        throwUnixException(env, errno);\n-    } else {\n-        jsize len = (jsize)strlen(buf);\n-        result = (*env)->NewByteArray(env, len);\n-        if (result != NULL) {\n-            (*env)->SetByteArrayRegion(env, result, 0, len, (jbyte*)buf);\n-        }\n-    }\n-    return result;\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"}]}