{"files":[{"patch":"@@ -1855,0 +1855,8 @@\n+    case Op_VectorLongToMask:\n+      if (UseAVX < 1 || !is_LP64) {\n+        return false;\n+      }\n+      if (UseAVX < 3 && !VM_Version::supports_bmi2()) {\n+        return false;\n+      }\n+      break;\n@@ -9501,0 +9509,40 @@\n+\n+instruct long_to_maskLE8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) <= 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    int vec_enc  = vector_length_encoding(mask_len);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, xnoreg, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+\n+instruct long_to_maskGT8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp1, rFlagsReg cr) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) > 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp1, KILL cr);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp1, as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    assert(mask_len <= 32, \"invalid mask length\");\n+    int vec_enc  = vector_length_encoding(mask_len);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, $xtmp1$$XMMRegister, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct long_to_mask_evex(kReg dst, rRegL src) %{\n+  predicate(n->bottom_type()->isa_vectmask());\n+  match(Set dst (VectorLongToMask src));\n+  format %{ \"long_to_mask_evex $dst, $src\\t!\" %}\n+  ins_encode %{\n+    __ kmov($dst$$KRegister, $src$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n@@ -9520,0 +9568,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -502,0 +502,6 @@\n+  if (do_iterative_escape_analysis() != DoEscapeAnalysis && PrintOpto) {\n+    \/\/ Recompiling without iterative escape analysis\n+    tty->print_cr(\"*********************************************************\");\n+    tty->print_cr(\"** Bailout: Recompile without iterative escape analysis**\");\n+    tty->print_cr(\"*********************************************************\");\n+  }\n@@ -2164,7 +2170,3 @@\n-    ConnectionGraph::do_analysis(this, &igvn);\n-\n-    if (failing())  return;\n-\n-    \/\/ Optimize out fields loads from scalar replaceable allocations.\n-    igvn.optimize();\n-    print_method(PHASE_ITER_GVN_AFTER_EA, 2);\n+    bool progress;\n+    do {\n+      ConnectionGraph::do_analysis(this, &igvn);\n@@ -2172,1 +2174,1 @@\n-    if (failing())  return;\n+      if (failing())  return;\n@@ -2174,5 +2176,1 @@\n-    if (congraph() != NULL && macro_count() > 0) {\n-      TracePhase tp(\"macroEliminate\", &timers[_t_macroEliminate]);\n-      PhaseMacroExpand mexp(igvn);\n-      mexp.eliminate_macro_nodes();\n-      igvn.set_delay_transform(false);\n+      int mcount = macro_count(); \/\/ Record number of allocations and locks before IGVN\n@@ -2180,0 +2178,1 @@\n+      \/\/ Optimize out fields loads from scalar replaceable allocations.\n@@ -2181,1 +2180,1 @@\n-      print_method(PHASE_ITER_GVN_AFTER_ELIMINATION, 2);\n+      print_method(PHASE_ITER_GVN_AFTER_EA, 2);\n@@ -2184,1 +2183,18 @@\n-    }\n+\n+      if (congraph() != NULL && macro_count() > 0) {\n+        TracePhase tp(\"macroEliminate\", &timers[_t_macroEliminate]);\n+        PhaseMacroExpand mexp(igvn);\n+        mexp.eliminate_macro_nodes();\n+        igvn.set_delay_transform(false);\n+\n+        igvn.optimize();\n+        print_method(PHASE_ITER_GVN_AFTER_ELIMINATION, 2);\n+\n+        if (failing())  return;\n+      }\n+      progress = do_iterative_escape_analysis() &&\n+                 (macro_count() < mcount) &&\n+                 ConnectionGraph::has_candidates(this);\n+      \/\/ Try again if candidates exist and made progress\n+      \/\/ by removing some allocations and\/or locks.\n+    } while (progress);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -649,2 +649,0 @@\n-sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java                 8209398 generic-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}