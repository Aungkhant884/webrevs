{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -338,1 +336,1 @@\n-        List<String> elements = parseRecipe(concatType, recipe, constants);\n+        String[] constantStrings = parseRecipe(concatType, recipe, constants);\n@@ -355,1 +353,1 @@\n-                    generateMHInlineCopy(concatType, elements)\n+                    generateMHInlineCopy(concatType, constantStrings)\n@@ -365,3 +363,3 @@\n-    private static List<String> parseRecipe(MethodType concatType,\n-                                            String recipe,\n-                                            Object[] constants)\n+    private static String[] parseRecipe(MethodType concatType,\n+                                        String recipe,\n+                                        Object[] constants)\n@@ -372,2 +370,9 @@\n-        \/\/ Element list containing interleaving String constants\n-        List<String> elements = new ArrayList<>();\n+        int paramCount = concatType.parameterCount();\n+        \/\/ Array containing interleaving String constants, starting with\n+        \/\/ the first prefix and ending with the final prefix:\n+        \/\/\n+        \/\/   consts[0] + arg0 + consts[1] + arg 1 + ... + consts[paramCount].\n+        \/\/\n+        \/\/ consts will be null if there's no constant to insert at a position.\n+        \/\/ An empty String constant will be replaced by null.\n+        String[] consts = new String[paramCount + 1];\n@@ -392,6 +397,3 @@\n-                \/\/ Flush any accumulated characters into a constant\n-                if (acc.length() > 0) {\n-                    elements.add(acc.toString());\n-                    acc.setLength(0);\n-                } else {\n-                    elements.add(null);\n+                \/\/ Check for overflow\n+                if (oCount >= paramCount) {\n+                    throw argumentMismatch(concatType, oCount);\n@@ -399,1 +401,4 @@\n-                oCount++;\n+\n+                \/\/ Flush any accumulated characters into a constant\n+                consts[oCount++] = acc.length() > 0 ? acc.toString() : null;\n+                acc.setLength(0);\n@@ -406,7 +411,0 @@\n-\n-        \/\/ Flush the remaining characters as constant:\n-        if (acc.length() > 0) {\n-            elements.add(acc.toString());\n-        } else {\n-            elements.add(null);\n-        }\n@@ -419,1 +417,4 @@\n-        return elements;\n+\n+        \/\/ Flush the remaining characters as constant:\n+        consts[oCount] = acc.length() > 0 ? acc.toString() : null;\n+        return consts;\n@@ -448,1 +449,1 @@\n-    private static MethodHandle generateMHInlineCopy(MethodType mt, List<String> constants) {\n+    private static MethodHandle generateMHInlineCopy(MethodType mt, String[] constants) {\n@@ -450,1 +451,1 @@\n-        String suffix = constants.get(paramCount);\n+        String suffix = constants[paramCount];\n@@ -457,1 +458,2 @@\n-            String prefix = constants.get(0);\n+            String prefix = constants[0];\n+            \/\/ Empty constants will be\n@@ -470,1 +472,1 @@\n-                && constants.get(0) == null && constants.get(1) == null) {\n+                && constants[0] == null && constants[1] == null) {\n@@ -516,2 +518,1 @@\n-        for (int i = 0; i < paramCount; i++) {\n-            var constant = constants.get(i);\n+        for (String constant : constants) {\n@@ -521,1 +522,1 @@\n-        } \/\/ deal with suffix later, if needed\n+        }\n@@ -536,1 +537,1 @@\n-            initialLengthCoder = JLA.stringConcatMix(initialLengthCoder, suffix) - suffix.length();\n+            initialLengthCoder -= suffix.length();\n@@ -581,1 +582,1 @@\n-    private static MethodHandle filterInPrependers(MethodHandle mh, List<String> constants, Class<?>[] ptypes) {\n+    private static MethodHandle filterInPrependers(MethodHandle mh, String[] constants, Class<?>[] ptypes) {\n@@ -728,0 +729,1 @@\n+\n@@ -742,1 +744,1 @@\n-    private static MethodHandle prepender(int pos, List<String> constants, Class<?>[] ptypes, int count) {\n+    private static MethodHandle prepender(int pos, String[] constants, Class<?>[] ptypes, int count) {\n@@ -745,1 +747,1 @@\n-            return prepender(constants.get(pos), ptypes[pos]);\n+            return prepender(constants[pos], ptypes[pos]);\n@@ -748,1 +750,1 @@\n-            return prepender(constants.get(pos), ptypes[pos], constants.get(pos + 1), ptypes[pos + 1]);\n+            return prepender(constants[pos], ptypes[pos], constants[pos + 1], ptypes[pos + 1]);\n@@ -756,1 +758,1 @@\n-                    prepender(constants.get(pos), ptypes[pos], constants.get(pos + 1), ptypes[pos + 1]),\n+                    prepender(constants[pos], ptypes[pos], constants[pos + 1], ptypes[pos + 1]),\n@@ -759,1 +761,1 @@\n-                    prepender(constants.get(pos + 2), ptypes[pos + 2]),\n+                    prepender(constants[pos + 2], ptypes[pos + 2]),\n@@ -765,1 +767,1 @@\n-                    prepender(constants.get(pos), ptypes[pos], constants.get(pos + 1), ptypes[pos + 1]),\n+                    prepender(constants[pos], ptypes[pos], constants[pos + 1], ptypes[pos + 1]),\n@@ -768,1 +770,1 @@\n-                    prepender(constants.get(pos + 2), ptypes[pos + 2], constants.get(pos + 3), ptypes[pos + 3]),\n+                    prepender(constants[pos + 2], ptypes[pos + 2], constants[pos + 3], ptypes[pos + 3]),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"}]}