[{"commit":{"message":"Merge branch 'master' into IncompatibleClassChangeError-to-MatchException"},"files":[{"filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java"}],"sha":"1483a220fbfb42e339f09bb417ab528045ebdadb"},{"commit":{"message":"Using pattern switch instead of record patterns as the feature key to determine whether MatchException should be used instead of ICCE."},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java"}],"sha":"c33852154c70a2286e27748e670cbe22b0c76242"},{"commit":{"message":"8297118: Change IncompatibleClassChangeError to MatchException for exhaustive switch statements and switch expressions"},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java"},{"filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java"},{"filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChangesNonPreview.java"},{"filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java"}],"sha":"1ccb11a5c0ab0a9e9ad9542591c392246dbdc01f"},{"commit":{"message":"Using skipTypeVars as suggested."},"files":[],"sha":"e7196a024d187d6a818eb44c63c04f67ed1084eb"},{"commit":{"message":"Reflecting review feedback - proper handling of type vars and intersection types."},"files":[],"sha":"5afc60236005d5ea77984f2baeca7e928334ce3a"},{"commit":{"message":"Not looking for common supertype, not solving in a loop."},"files":[],"sha":"5996914bfd04b6cb3727c92c067aa20b33678941"},{"commit":{"message":"Reflecting review comment."},"files":[],"sha":"c8f29c4ef819434cfa23967711c6bc244adb1e00"},{"commit":{"message":"Apply suggestions from code review\n\nCo-authored-by: Maurizio Cimadamore <54672762+mcimadamore@users.noreply.github.com>"},"files":[],"sha":"89e28ab472cbc59f04d72e8a457286c5488b9920"},{"commit":{"message":"Better tests for inference with recursive bounds, and related fixes."},"files":[],"sha":"77c34fcf9f8a80d25621fcd1e4fa805acd77c2fe"},{"commit":{"message":"Adding a kind to InstanceOfTree, as suggested."},"files":[],"sha":"efe0d213d24685c14e9e9e65bd895954300b86c9"},{"commit":{"message":"Reflecting review feedback."},"files":[],"sha":"f68756f1cb9b875632275fdbf41bbf56e55713f2"},{"commit":{"message":"Fixing test."},"files":[],"sha":"6f1c30d864db28dad18142665ccaa4e1a17dc879"},{"commit":{"message":"Cleanup."},"files":[],"sha":"456e811bcb7bf46d7e0c3502448b8885739d8d7f"},{"commit":{"message":"Some more cleanup."},"files":[],"sha":"9b0bd99761b415788a11e12afc89f46a3abd3f9d"},{"commit":{"message":"Various cleanup and adjustments to specification updates."},"files":[],"sha":"2f0c59792dc5b6b66740b366a3f70605599a588e"},{"commit":{"message":"8294942: Compiler implementation for Record Patterns (Second Preview)"},"files":[],"sha":"a17ec69c5d99411d5c1f8ea9e48d668818ebe12f"}]