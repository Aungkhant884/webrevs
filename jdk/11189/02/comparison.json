{"files":[{"patch":"@@ -57,0 +57,1 @@\n+import com.sun.tools.javac.code.Source.Feature;\n@@ -103,0 +104,1 @@\n+    private final boolean useMatchException;\n@@ -129,0 +131,4 @@\n+        Source source = Source.instance(context);\n+        Preview preview = Preview.instance(context);\n+        useMatchException = Feature.PATTERN_SWITCH.allowedInSource(source) &&\n+                            (preview.isEnabled() || !preview.isPreview(Feature.PATTERN_SWITCH));\n@@ -3627,2 +3633,3 @@\n-        boolean matchException = tree.patternSwitch && !tree.wasEnumSelector;\n-        List<JCCase> cases = tree.patternSwitch ? addDefaultIfNeeded(matchException, tree.cases)\n+        List<JCCase> cases = tree.patternSwitch ? addDefaultIfNeeded(tree.patternSwitch,\n+                                                                     tree.wasEnumSelector,\n+                                                                     tree.cases)\n@@ -3635,2 +3642,1 @@\n-        boolean matchException = tree.patternSwitch && !tree.wasEnumSelector;\n-        List<JCCase> cases = addDefaultIfNeeded(matchException, tree.cases);\n+        List<JCCase> cases = addDefaultIfNeeded(tree.patternSwitch, tree.wasEnumSelector, tree.cases);\n@@ -3640,1 +3646,2 @@\n-    private List<JCCase> addDefaultIfNeeded(boolean matchException, List<JCCase> cases) {\n+    private List<JCCase> addDefaultIfNeeded(boolean patternSwitch, boolean wasEnumSelector,\n+                                            List<JCCase> cases) {\n@@ -3642,0 +3649,2 @@\n+            boolean matchException = useMatchException;\n+            matchException |= patternSwitch && !wasEnumSelector;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        } catch (IncompatibleClassChangeError e) {\n+        } catch (MatchException e) {\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8297118\n+ * @summary Verify pattern switches work properly when the set of enum constant changes.\n+ * @compile EnumTypeChangesNonPreview.java\n+ * @compile EnumTypeChanges2.java\n+ * @run main EnumTypeChangesNonPreview\n+ * @run main\/othervm --enable-preview EnumTypeChangesNonPreview\n+ *\/\n+\n+import java.util.function.Function;\n+\n+public class EnumTypeChangesNonPreview {\n+\n+    public static void main(String... args) throws Exception {\n+        new EnumTypeChangesNonPreview().run();\n+    }\n+\n+    void run() throws Exception {\n+        doRunExhaustive(this::expressionEnumExhaustive);\n+    }\n+\n+    void doRunExhaustive(Function<EnumTypeChangesEnum, String> c) throws Exception {\n+        try {\n+            c.apply(EnumTypeChangesEnum.valueOf(\"C\"));\n+            throw new AssertionError();\n+        } catch (IncompatibleClassChangeError e) {\n+            \/\/expected\n+        }\n+    }\n+\n+    String expressionEnumExhaustive(EnumTypeChangesEnum e) {\n+        return switch (e) {\n+            case A -> \"A\";\n+            case B -> \"B\";\n+        };\n+    }\n+}\n+\n+enum EnumTypeChangesEnum {\n+    A,\n+    B;\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChangesNonPreview.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8297118\n+ * @summary Verify javac uses MatchException or IncompatibleClassChangeError for exhaustive switches\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main\/othervm --enable-preview MatchExceptionTest\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+import com.sun.tools.classfile.ConstantPool.CPInfo;\n+import java.util.Arrays;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class MatchExceptionTest extends TestRunner {\n+    private static final String JAVA_VERSION = System.getProperty(\"java.specification.version\");\n+    private static final String TEST_METHOD = \"test\";\n+\n+    ToolBox tb;\n+    ClassFile cf;\n+\n+    public MatchExceptionTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        MatchExceptionTest t = new MatchExceptionTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testNestedPatternVariablesBytecode() throws Exception {\n+        String codeStatement = \"\"\"\n+                class Test {\n+                    void test(E e) {\n+                      switch (e) {\n+                          case null -> {}\n+                          case S -> {}\n+                      };\n+                    }\n+                    enum E { S; }\n+                }\"\"\";\n+        String codeExpression = \"\"\"\n+                class Test {\n+                    int test(E e) {\n+                      return switch (e) {\n+                          case S -> 0;\n+                      };\n+                    }\n+                    enum E { S; }\n+                }\"\"\";\n+        record Setup(boolean hasMatchException, String... options) {\n+            public String toString() {\n+                return \"Setup[hasMatchException=\" + hasMatchException +\n+                       \", options=\" + Arrays.toString(options) + \"]\";\n+            }\n+        }\n+        Setup[] variants = new Setup[] {\n+            new Setup(false, \"-source\", \"20\"),\n+            new Setup(false, \"-source\", JAVA_VERSION),\n+            new Setup(true, \"-source\", JAVA_VERSION, \"--enable-preview\"),\n+        };\n+        record Source(String source, boolean needsPreview) {}\n+        Source[] sources = new Source[] {\n+            new Source(codeStatement, true),\n+            new Source(codeExpression, false),\n+        };\n+        Path curPath = Path.of(\".\");\n+        for (Source source : sources) {\n+            for (Setup variant : variants) {\n+                if (source.needsPreview &&\n+                    !Arrays.asList(variant.options).contains(\"--enable-preview\")) {\n+                    continue;\n+                }\n+                new JavacTask(tb)\n+                        .options(variant.options)\n+                        .sources(source.source)\n+                        .outdir(curPath)\n+                        .run();\n+\n+                cf = ClassFile.read(curPath.resolve(\"Test.class\"));\n+                boolean incompatibleClassChangeErrror = false;\n+                boolean matchException = false;\n+                for (CPInfo entry : cf.constant_pool.entries()) {\n+                    if (entry.getTag() == ConstantPool.CONSTANT_Class) {\n+                        CONSTANT_Class_info clazz = (CONSTANT_Class_info) entry;\n+                        incompatibleClassChangeErrror |=\n+                                \"java\/lang\/IncompatibleClassChangeError\".equals(clazz.getName());\n+                        matchException |= \"java\/lang\/MatchException\".equals(clazz.getName());\n+                    }\n+                }\n+                if (variant.hasMatchException) {\n+                    assertTrue(\"Expected MatchException (\" + variant + \")\", matchException);\n+                    assertTrue(\"Did not expect IncompatibleClassChangeError (\" + variant + \")\",\n+                               !incompatibleClassChangeErrror);\n+                } else {\n+                    assertTrue(\"Did not expect MatchException (\" + variant + \")\", !matchException);\n+                    assertTrue(\"Expected IncompatibleClassChangeError (\" + variant + \")\",\n+                               incompatibleClassChangeErrror);\n+                }\n+            }\n+        }\n+    }\n+\n+    void assertTrue(String message, boolean b) {\n+        if (!b) {\n+            throw new AssertionError(message);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}