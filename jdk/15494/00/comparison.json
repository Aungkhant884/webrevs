{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1177,0 +1177,4 @@\n+    public void printMessage(Diagnostic.Kind kind, CharSequence msg) {\n+        printMessage(kind, msg, (JCDiagnostic.DiagnosticPosition) null, null);\n+    }\n+\n@@ -1183,1 +1187,1 @@\n-        newSource = root.getSourceFile();\n+        newSource = root == null ? null : root.getSourceFile();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import jdk.javadoc.internal.doclint.DocLint;\n@@ -126,7 +127,0 @@\n-    \/**\n-     * Keep track of standard tags in lowercase to compare for better\n-     * error messages when a tag like {@code @docRoot} is mistakenly spelled\n-     * lowercase {@code @docroot}.\n-     *\/\n-    private final Set<String> standardTagsLowercase;\n-\n@@ -188,1 +182,0 @@\n-        standardTagsLowercase = new HashSet<>();\n@@ -347,0 +340,2 @@\n+    private boolean reportedHelpOnUnknownTag;\n+\n@@ -366,2 +361,4 @@\n-                    if (standardTagsLowercase.contains(Utils.toLowerCase(name))) {\n-                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagLowercase\", ch.getTagName(tag));\n+                    List<String> suggestions = DocLint.suggestSimilar(allTaglets.keySet(), name);\n+                    if (!suggestions.isEmpty()) {\n+                        messages.warning(ch.getDocTreePath(tag), \"doclet.UnknownTagWithHint\", ch.getTagName(tag),\n+                                String.join(\", \", suggestions)); \/\/ TODO: revisit after 8041488\n@@ -371,0 +368,4 @@\n+                    if (!reportedHelpOnUnknownTag) {\n+                        reportedHelpOnUnknownTag = true;\n+                        messages.notice(\"doclet.UnknownTagHelp\");\n+                    }\n@@ -663,1 +664,0 @@\n-        standardTagsLowercase.add(Utils.toLowerCase(name));\n@@ -671,1 +671,0 @@\n-        standardTagsLowercase.add(Utils.toLowerCase(name));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletManager.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -120,1 +120,3 @@\n-doclet.UnknownTagLowercase={0} is an unknown tag -- same as a known tag except for case.\n+doclet.UnknownTagWithHint={0} is an unknown tag; the most similar tags are: {1}\n+doclet.UnknownTagHelp=An unknown tag has been reported. Mistyped? \\\n+  Forgot to add a custom tag or register a taglet?\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1142,0 +1142,2 @@\n+    private boolean reportedHelpOnUnknownTag;\n+\n@@ -1150,2 +1152,13 @@\n-        if (env.customTags != null && !env.customTags.contains(tagName))\n-            env.messages.error(SYNTAX, tree, \"dc.tag.unknown\", tagName);\n+        if (env.customTags != null && !env.customTags.contains(tagName)) {\n+            var suggestions = DocLint.suggestSimilar(env.customTags, tagName);\n+            if (suggestions.isEmpty()) {\n+                env.messages.error(SYNTAX, tree, \"dc.tag.unknown\", tagName);\n+            } else {\n+                env.messages.error(SYNTAX, tree, \"dc.tag.unknown.with.hint\", tagName,\n+                        String.join(\", \", suggestions)); \/\/ TODO: revisit after 8041488\n+            }\n+            if (!reportedHelpOnUnknownTag) {\n+                reportedHelpOnUnknownTag = true;\n+                env.messages.note(SYNTAX, \"dc.tag.unknown.help\");\n+            }\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.util.Collection;\n+import java.util.Comparator;\n@@ -64,0 +66,1 @@\n+import com.sun.tools.javac.util.StringUtils.DamerauLevenshteinDistance;\n@@ -376,0 +379,23 @@\n+    public static List<String> suggestSimilar(Collection<String> knownTags, String unknownTag) {\n+        final double MIN_SIMILARITY = 2.0 \/ 3;\n+        record Pair(String tag, double similarity) { }\n+        return knownTags.stream()\n+                .distinct() \/\/ filter duplicates in known, otherwise they will result in duplicates in suggested\n+                .map(t -> new Pair(t, similarity(t, unknownTag)))\n+                .sorted(Comparator.comparingDouble(Pair::similarity).reversed() \/* more similar first *\/)\n+                \/\/ .peek(p -> System.out.printf(\"%.3f, (%s ~ %s)%n\", p.similarity, p.tag, unknownTag)) \/\/ debug\n+                .takeWhile(p -> Double.compare(p.similarity, MIN_SIMILARITY) >= 0)\n+                .map(Pair::tag)\n+                .toList();\n+    }\n+\n+    \/\/ a value in [0, 1] range: the closer the value is to 1, the more similar\n+    \/\/ the strings are\n+    private static double similarity(String a, String b) {\n+        \/\/ Normalize the distance so that similarity between \"x\" and \"y\" is\n+        \/\/ less than that of \"ax\" and \"ay\". Use the greater of two lengths\n+        \/\/ as normalizer, as it's an upper bound for the distance.\n+        return 1.0 - ((double) DamerauLevenshteinDistance.of(a, b))\n+                \/ Math.max(a.length(), b.length());\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/DocLint.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import com.sun.tools.javac.api.JavacTrees;\n@@ -99,0 +100,4 @@\n+    void note(Group group, String code, Object... args) {\n+        report(group, Diagnostic.Kind.NOTE, code, args);\n+    }\n+\n@@ -115,0 +120,12 @@\n+    protected void report(Group group, Diagnostic.Kind dkind, String code, Object... args) {\n+        if (options.isEnabled(group, env.currAccess)) {\n+            if (dkind == Diagnostic.Kind.WARNING && env.suppressWarnings(group)) {\n+                return;\n+            }\n+            String msg = (code == null) ? (String) args[0] : localize(code, args);\n+            ((JavacTrees) env.trees).printMessage(dkind, msg);\n+\n+            stats.record(group, dkind, code);\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Messages.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,3 @@\n+dc.tag.unknown.with.hint = unknown tag: {0}; the most similar tags are: {1}\n+dc.tag.unknown.help = An unknown tag has been reported. Mistyped? \\\n+  Forgot to add a custom tag or register a taglet?\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint.properties","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8314448\n+ * @bug 8314448 8288660\n@@ -36,0 +36,3 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n@@ -71,1 +74,1 @@\n-                    .checkUnique(\"unknown tag\");\n+                    .checkUnique(Pattern.compile(\"unknown tag[.;:]\")); \/\/ specific enough not to catch \"helpful note\"\n@@ -79,1 +82,1 @@\n-                .checkUnique(\"unknown tag\");\n+                .checkUnique(Pattern.compile(\"unknown tag[.;:]\")); \/\/ specific enough not to catch \"helpful note\"\n@@ -106,0 +109,135 @@\n+\n+    \/\/ This tests two assertions:\n+    \/\/\n+    \/\/   - the \"helpful note\" is output exactly once,\n+    \/\/   - some typos have fix suggestions, and\n+    \/\/   - there's no difference between inline and block tags as\n+    \/\/     far as the diagnostic output is concerned\n+    @Test\n+    public void testSimilarTags(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        \/\/ put some tags as inline in the main description, so that they are\n+        \/\/ not parsed as contents of the immediately preceding unknown\n+        \/\/ block tags\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                \/**\n+                 * {@cod}\n+                 * {@codejdk.net.hosts.file}\n+                 * {@coe}\n+                 * {@cpde}\n+                 * {@ocde}\n+                 * {@ode}\n+                 *\n+                 * @auther\n+                 *\n+                 * @Depricated\n+                 * @deprecation\n+                 *\n+                 * @DocRoot\n+                 * @dccRoot\n+                 * @docroot\n+                 *\n+                 * @ecception\n+                 * @excception\n+                 * @exceptbion\n+                 * @exceptino\n+                 * @exceptions\n+                 * @exceptoin\n+                 * @execption\n+                 *\n+                 * @implnote\n+                 *\n+                 * @inheritdoc\n+                 * @inherotDoc\n+                 * @inheretdoc\n+                 * @inhertitDoc\n+                 *\n+                 * @jvm\n+                 * @jmvs\n+                 *\n+                 * @Link\n+                 * @linK\n+                 * @linbk\n+                 * @lini\n+                 * @linke\n+                 * @linked\n+                 *\n+                 * @linkplan\n+                 *\n+                 * @params\n+                 * @pararm\n+                 * @parasm\n+                 * @parem\n+                 * @parm\n+                 * @parma\n+                 * @praam\n+                 * @prarm\n+                 *\n+                 * @Return\n+                 * @eturn\n+                 * @result\n+                 * @retrun\n+                 * @retuen\n+                 * @retun\n+                 * @retunr\n+                 * @retur\n+                 * @returns\n+                 * @returnss\n+                 * @retursn\n+                 * @rturn\n+                 *\n+                 * @See\n+                 * @gsee\n+                 *\n+                 * @serialdata\n+                 *\n+                 * @sinc\n+                 * @sine\n+                 *\n+                 * @systemproperty\n+                 *\n+                 * @thows\n+                 * @thrown\n+                 * @throwss\n+                 *\/\n+                public class MyClass { }\n+                \"\"\");\n+        \/\/ don't check exit status: we don't care if it's an error or warning\n+\n+        \/\/ DocLint is explicit\n+        int i = 0;\n+        for (var check : new String[]{\":all\", \":none\", \"\", null}) {\n+            var outputDir = \"out-DocLint-\" + i++; \/\/ use separate output directories\n+\n+            var args = new ArrayList<String>();\n+            if (check != null) \/\/ check == null means DocLint is default\n+                args.add(\"-Xdoclint\" + check);\n+            args.addAll(Arrays.asList(\n+                    \"-d\", base.resolve(outputDir).toString(),\n+                    \"-tag\", \"apiNote:a:API Note:\",\n+                    \"-tag\", \"implSpec:a:Implementation Requirements:\",\n+                    \"-tag\", \"implNote:a:Implementation Note:\",\n+                    \"-tag\", \"jls:a:JLS\", \/\/ this tag isn't exactly that of JDK, for simplicity reasons\n+                    \"-tag\", \"jvms:a:JVMS\", \/\/ this tag isn't exactly that of JDK, for simplicity reasons\n+                    \"--source-path\", src.toString(),\n+                    \"x\"));\n+\n+            javadoc(args.toArray(new String[]{}));\n+\n+            new OutputChecker(Output.OUT)\n+                    .setExpectFound(true)\n+                    .checkUnique( \/* \"helpful note\" *\/ \"\"\"\n+                            An unknown tag has been reported. Mistyped? \\\n+                            Forgot to add a custom tag or register a taglet?\n+                            \"\"\");\n+            new OutputChecker(Output.OUT)\n+                    .setExpectFound(true)\n+                    .setExpectOrdered(false)\n+                    .check(\"author\", \"code\", \"deprecated\", \"docRoot\",\n+                            \"exception\", \"implNote\", \"inheritDoc\", \"jvms\",\n+                            \"link\", \"linkplain\", \"param\", \"return\", \"see\",\n+                            \"serialData\", \"since\", \"systemProperty\", \"throws\");\n+        }\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUknownTags\/TestUnknownTags.java","additions":141,"deletions":3,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8006248 8028318\n+ * @bug 8006248 8028318 8288660\n","filename":"test\/langtools\/tools\/doclint\/CustomTagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+Note: An unknown tag has been reported. Mistyped? Forgot to add a custom tag or register a taglet?\n","filename":"test\/langtools\/tools\/doclint\/CustomTagTest.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+Note: An unknown tag has been reported. Mistyped? Forgot to add a custom tag or register a taglet?\n","filename":"test\/langtools\/tools\/doclint\/CustomTagTestWithOption.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}