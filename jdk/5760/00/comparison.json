{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -62,0 +63,3 @@\n+    \/\/ reading lock\n+    private final ReentrantLock readLock = new ReentrantLock();\n+\n@@ -477,2 +481,10 @@\n-    private static int read(InputStream is, byte[] buf, int off, int len)  throws IOException {\n-        int readLen = is.read(buf, off, len);\n+    private int read(InputStream is, byte[] buf, int off, int len)  throws IOException {\n+\n+        int readLen = 0;\n+        readLock.lock();\n+        try {\n+            readLen = is.read(buf, off, len);\n+        } finally {\n+            readLock.unlock();\n+        }\n+\n@@ -495,5 +507,7 @@\n-        int remaining = is.available();\n-        if (tryToRead && (remaining == 0)) {\n-            \/\/ try to wait and read one byte if no buffered input\n-            is.read();\n-        }\n+        readLock.lock();\n+        try {\n+            int remaining = is.available();\n+            if (tryToRead && (remaining == 0)) {\n+                \/\/ try to wait and read one byte if no buffered input\n+                is.read();\n+            }\n@@ -501,2 +515,5 @@\n-        while ((remaining = is.available()) != 0) {\n-            is.skip(remaining);\n+            while ((remaining = is.available()) != 0) {\n+                is.skip(remaining);\n+            }\n+        } finally {\n+            readLock.unlock();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketInputRecord.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"}]}