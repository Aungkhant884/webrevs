{"files":[{"patch":"@@ -1413,6 +1413,16 @@\n-        while (!conContext.isInboundClosed()) {\n-            try {\n-                Plaintext plainText = decode(null);\n-                if ((plainText.contentType == ContentType.HANDSHAKE.id) &&\n-                        conContext.isNegotiated) {\n-                    return 0;\n+        appInput.readLock.lock();\n+        try {\n+            while (!conContext.isInboundClosed()) {\n+                try {\n+                    Plaintext plainText = decode(null);\n+                    if ((plainText.contentType == ContentType.HANDSHAKE.id) &&\n+                            conContext.isNegotiated) {\n+                        return 0;\n+                    }\n+                } catch (SSLException |\n+                        InterruptedIOException | SocketException se) {\n+                    \/\/ Don't change exception in case of timeouts or interrupts\n+                    \/\/ or SocketException.\n+                    throw se;\n+                } catch (IOException ioe) {\n+                    throw new SSLException(\"readHandshakeRecord\", ioe);\n@@ -1420,7 +1430,0 @@\n-            } catch (SSLException |\n-                    InterruptedIOException | SocketException se) {\n-                \/\/ Don't change exception in case of timeouts or interrupts\n-                \/\/ or SocketException.\n-                throw se;\n-            } catch (IOException ioe) {\n-                throw new SSLException(\"readHandshakeRecord\", ioe);\n@@ -1428,0 +1431,2 @@\n+        } finally {\n+            appInput.readLock.unlock();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.concurrent.locks.ReentrantLock;\n@@ -63,3 +62,0 @@\n-    \/\/ reading lock\n-    private final ReentrantLock readLock = new ReentrantLock();\n-\n@@ -481,10 +477,2 @@\n-    private int read(InputStream is, byte[] buf, int off, int len)  throws IOException {\n-\n-        int readLen = 0;\n-        readLock.lock();\n-        try {\n-            readLen = is.read(buf, off, len);\n-        } finally {\n-            readLock.unlock();\n-        }\n-\n+    private static int read(InputStream is, byte[] buf, int off, int len)  throws IOException {\n+        int readLen = is.read(buf, off, len);\n@@ -507,7 +495,5 @@\n-        readLock.lock();\n-        try {\n-            int remaining = is.available();\n-            if (tryToRead && (remaining == 0)) {\n-                \/\/ try to wait and read one byte if no buffered input\n-                is.read();\n-            }\n+        int remaining = is.available();\n+        if (tryToRead && (remaining == 0)) {\n+            \/\/ try to wait and read one byte if no buffered input\n+            is.read();\n+        }\n@@ -515,5 +501,2 @@\n-            while ((remaining = is.available()) != 0) {\n-                is.skip(remaining);\n-            }\n-        } finally {\n-            readLock.unlock();\n+        while ((remaining = is.available()) != 0) {\n+            is.skip(remaining);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketInputRecord.java","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"}]}