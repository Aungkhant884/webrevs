{"files":[{"patch":"@@ -1413,6 +1413,16 @@\n-        while (!conContext.isInboundClosed()) {\n-            try {\n-                Plaintext plainText = decode(null);\n-                if ((plainText.contentType == ContentType.HANDSHAKE.id) &&\n-                        conContext.isNegotiated) {\n-                    return 0;\n+        appInput.readLock.lock();\n+        try {\n+            while (!conContext.isInboundClosed()) {\n+                try {\n+                    Plaintext plainText = decode(null);\n+                    if ((plainText.contentType == ContentType.HANDSHAKE.id) &&\n+                            conContext.isNegotiated) {\n+                        return 0;\n+                    }\n+                } catch (SSLException |\n+                        InterruptedIOException | SocketException se) {\n+                    \/\/ Don't change exception in case of timeouts or interrupts\n+                    \/\/ or SocketException.\n+                    throw se;\n+                } catch (IOException ioe) {\n+                    throw new SSLException(\"readHandshakeRecord\", ioe);\n@@ -1420,7 +1430,0 @@\n-            } catch (SSLException |\n-                    InterruptedIOException | SocketException se) {\n-                \/\/ Don't change exception in case of timeouts or interrupts\n-                \/\/ or SocketException.\n-                throw se;\n-            } catch (IOException ioe) {\n-                throw new SSLException(\"readHandshakeRecord\", ioe);\n@@ -1428,0 +1431,2 @@\n+        } finally {\n+            appInput.readLock.unlock();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274524\n+ * @summary 8274524: SSLSocket.close() hangs if it is called during the ssl handshake\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm ClientSocketCloseHang TLSv1.2\n+ * @run main\/othervm ClientSocketCloseHang TLSv1.3\n+ *\/\n+\n+\n+import javax.net.ssl.*;\n+import java.net.InetAddress;\n+\n+public class ClientSocketCloseHang implements SSLContextTemplate {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"jdk.tls.client.protocols\", args[0]);\n+        for (int i = 0; i<= 20; i++) {\n+            System.err.println(\"===================================\");\n+            System.err.println(\"loop \" + i);\n+            System.err.println(\"===================================\");\n+            new ClientSocketCloseHang().test();\n+        }\n+    }\n+\n+    private void test() throws Exception {\n+        SSLServerSocket listenSocket = null;\n+        SSLSocket serverSocket = null;\n+        ClientSocket clientSocket = null;\n+        try {\n+            SSLServerSocketFactory serversocketfactory =\n+                    createServerSSLContext().getServerSocketFactory();\n+            listenSocket =\n+                    (SSLServerSocket)serversocketfactory.createServerSocket(0);\n+            listenSocket.setNeedClientAuth(false);\n+            listenSocket.setEnableSessionCreation(true);\n+            listenSocket.setUseClientMode(false);\n+\n+\n+            System.err.println(\"Starting client\");\n+            clientSocket = new ClientSocket(listenSocket.getLocalPort());\n+            clientSocket.start();\n+\n+            System.err.println(\"Accepting client requests\");\n+            serverSocket = (SSLSocket) listenSocket.accept();\n+\n+            serverSocket.startHandshake();\n+        } finally {\n+            if (clientSocket != null) {\n+                clientSocket.close();\n+            }\n+            if (listenSocket != null) {\n+                listenSocket.close();\n+            }\n+\n+            if (serverSocket != null) {\n+                serverSocket.close();\n+            }\n+        }\n+    }\n+\n+    private class ClientSocket extends Thread{\n+        int serverPort = 0;\n+        SSLSocket clientSocket = null;\n+\n+        public ClientSocket(int serverPort) {\n+            this.serverPort = serverPort;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                System.err.println(\n+                        \"Connecting to server at port \" + serverPort);\n+                SSLSocketFactory sslSocketFactory =\n+                        createClientSSLContext().getSocketFactory();\n+                clientSocket = (SSLSocket)sslSocketFactory.createSocket(\n+                        InetAddress.getLocalHost(), serverPort);\n+                clientSocket.setSoLinger(true, 3);\n+                clientSocket.startHandshake();\n+            } catch (Exception e) {\n+            }\n+        }\n+\n+        public void close() {\n+            Thread t = new Thread() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        if (clientSocket != null) {\n+                            clientSocket.close();\n+                        }\n+                    } catch (Exception ex) {\n+                    }\n+                }\n+            };\n+            try {\n+                \/\/ Close client connection\n+                t.start();\n+                t.join(2000); \/\/ 2 sec\n+            } catch (InterruptedException ex) {\n+                return;\n+            }\n+\n+            if (t.isAlive()) {\n+                throw new RuntimeException(\"SSL Client hangs on close\");\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/ClientSocketCloseHang.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}