{"files":[{"patch":"@@ -458,1 +458,1 @@\n-  if (_new_checkpoint.is_signaled()) {\n+  if (_new_checkpoint.is_signaled_with_reset()) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1104,0 +1104,4 @@\n+  \/\/ JfrTraceIdEpoch::has_changed_tag_state_no_reset() is a load-acquire we issue to see side-effects (i.e. tags).\n+  \/\/ The JfrRecorderThread does this as part of normal processing, but with concurrent class unloading, which can\n+  \/\/ happen in arbitrary threads, we invoke it explicitly.\n+  JfrTraceIdEpoch::has_changed_tag_state_no_reset();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1816,0 +1816,24 @@\n+Event settings and .jfc options can be specified using the following\n+syntax:\n+.TP\n+.B \\f[CB]option=\\f[R]\\f[I]value\\f[R]\n+Specifies the option value to modify.\n+To list available options, use the \\f[CB]JAVA_HOME\\f[R]\/bin\/jfr tool.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]event\\-setting\\f[R]=\\f[I]value\\f[R]\n+Specifies the event setting value to modify.\n+Use the form: #= To add a new event setting, prefix the event name with\n+\\[aq]+\\[aq].\n+.RS\n+.RE\n+.PP\n+You can specify values for multiple event settings and .jfc options by\n+separating them with a comma.\n+In case of a conflict between a parameter and a .jfc option, the\n+parameter will take precedence.\n+The whitespace delimiter can be omitted for timespan values, i.e.\n+20ms.\n+For more information about the settings syntax, see Javadoc of the\n+jdk.jfr package.\n","filename":"src\/java.base\/share\/man\/java.1","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}