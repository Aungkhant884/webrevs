{"files":[{"patch":"@@ -71,5 +71,0 @@\n-bool G1Allocator::has_mutator_alloc_region() {\n-  uint node_index = current_node_index();\n-  return has_mutator_alloc_region(node_index);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-  bool has_mutator_alloc_region();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -445,2 +445,1 @@\n-    log_debug(gc, alloc)(\"%s: Failed to allocate \"\n-                         SIZE_FORMAT \" words\", Thread::current()->name(), word_size);\n+    log_debug(gc, alloc)(\"%s: Failed to allocate %zu words\", Thread::current()->name(), word_size);\n@@ -742,7 +741,0 @@\n-HeapWord* G1CollectedHeap::attempt_allocation_at_safepoint(size_t word_size,\n-                                                           bool expect_null_mutator_alloc_region) {\n-  assert_at_safepoint_on_vm_thread();\n-  uint node_index = _allocator->current_node_index();\n-  return attempt_allocation_at_safepoint(word_size, expect_null_mutator_alloc_region, node_index);\n-}\n-\n@@ -981,2 +973,2 @@\n-  \/\/ Attempt to satisfy allocation requests failed; reset the requests, execute a full gc,\n-  \/\/ then try again.\n+  \/\/ Attempt to satisfy allocation requests failed; reset the satisfied requests,\n+  \/\/ execute a full gc, then try again.\n@@ -1088,1 +1080,1 @@\n-      assert((int)len >= 0, \"size too large \" SIZE_FORMAT \" becomes %d\", words, (int)len);\n+      assert((int)len >= 0, \"size too large %zu becomes %d\", words, (int)len);\n@@ -1113,2 +1105,1 @@\n-  log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocation request failed). Allocation request: \" SIZE_FORMAT \"B\",\n-                            word_size * HeapWordSize);\n+  log_debug(gc, ergo, heap)(\"Attempt heap expansion. Expansion request: %zuB\", expand_bytes);\n@@ -1124,10 +1115,0 @@\n-HeapWord* G1CollectedHeap::expand_and_allocate(size_t word_size) {\n-  assert_at_safepoint_on_vm_thread();\n-\n-  if (expand(word_size)) {\n-    return attempt_allocation_at_safepoint(word_size,\n-                                           false \/* expect_null_mutator_alloc_region *\/);\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":5,"deletions":24,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-    StalledAllocReq() : StalledAllocReq(0, 0) {}\n+    StalledAllocReq() : StalledAllocReq(0, 0) { }\n@@ -522,4 +522,4 @@\n-                                  uint gc_count_before,\n-                                  bool should_try_gc,\n-                                  HeapWord** result,\n-                                  GCCause::Cause gc_cause);\n+                                   uint gc_count_before,\n+                                   bool should_try_gc,\n+                                   HeapWord** result,\n+                                   GCCause::Cause gc_cause);\n@@ -528,6 +528,3 @@\n-  \/\/ at the end of a successful GC). expect_null_mutator_alloc_region\n-  \/\/ specifies whether the mutator alloc region is expected to be null\n-  \/\/ or not.\n-  HeapWord* attempt_allocation_at_safepoint(size_t word_size,\n-                                            bool expect_null_mutator_alloc_region);\n-\n+  \/\/ at the end of a successful GC). node_index speficies the memory node\n+  \/\/ to use for allocation. expect_null_mutator_alloc_region specifies\n+  \/\/ whether the mutator alloc region is expected to be null or not.\n@@ -574,0 +571,1 @@\n+\n@@ -584,1 +582,1 @@\n-  \/\/ Helper method for satisfy_failed_allocation()\n+  \/\/ Helper method for handle_allocation_requests()\n@@ -589,4 +587,1 @@\n-  \/\/ Attempts to expand the heap sufficiently to support an allocation of the\n-  \/\/ given \"word_size\". If successful, perform the allocation and return the address\n-  \/\/ of the allocated block, or else null.\n-  HeapWord* expand_and_allocate(size_t word_size);\n+  \/\/ Attempts to expand the heap by \"word_size\" words.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"}]}