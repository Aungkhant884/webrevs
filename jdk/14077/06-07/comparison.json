{"files":[{"patch":"@@ -405,1 +405,1 @@\n-bool G1CollectedHeap::attempt_allocation_after_gc(size_t word_size,\n+void G1CollectedHeap::attempt_allocation_after_gc(StalledAllocReq* req,\n@@ -408,1 +408,0 @@\n-                                                  HeapWord** result,\n@@ -411,7 +410,0 @@\n-  StalledAllocReq request(word_size, _allocator->current_node_index());\n-\n-  {\n-    MutexLocker ml(&_alloc_request_lock, Mutex::_no_safepoint_check_flag);\n-    _stalled_allocations.insert_last(&request);\n-  }\n-\n@@ -419,1 +411,1 @@\n-    do_collection_pause(word_size, gc_count_before, gc_cause);\n+    do_collection_pause(req->size(), gc_count_before, gc_cause);\n@@ -426,19 +418,0 @@\n-\n-  {\n-    MutexLocker ml(&_alloc_request_lock, Mutex::_no_safepoint_check_flag);\n-    _stalled_allocations.remove(&request);\n-  }\n-\n-  if (request.pending()) {\n-    \/\/ GC Safepoint did not handle our allocation request. We should retry.\n-    return false;\n-  } else if (request.succeeded()) {\n-    *result = request.result();\n-  } else {\n-    assert(request.failed(), \"Sanity check!\");\n-    \/\/ VM successfully scheduled a collection which failed to allocate. No\n-    \/\/ point in trying to allocate further. We'll just return null.\n-    log_debug(gc, alloc)(\"%s: Failed to allocate %zu words\", Thread::current()->name(), word_size);\n-    *result = nullptr;\n-  }\n-  return true;\n@@ -463,1 +436,1 @@\n-  HeapWord* result = nullptr;\n+  StalledAllocReq request(word_size, _allocator->current_node_index(), this);\n@@ -471,0 +444,5 @@\n+      \/\/ Allocation request could have been satisfied while thread was blocked on the lock.\n+      if (!request.pending()){\n+        return request.result();\n+      }\n+\n@@ -473,1 +451,1 @@\n-      result = _allocator->attempt_allocation_locked(word_size);\n+      HeapWord* result = _allocator->attempt_allocation_locked(word_size);\n@@ -475,0 +453,1 @@\n+        assert(request.pending(), \"Sanity!\");\n@@ -486,0 +465,1 @@\n+          assert(request.pending(), \"Sanity!\");\n@@ -498,2 +478,9 @@\n-    if (attempt_allocation_after_gc(word_size, gc_count_before, should_try_gc, &result, GCCause::_g1_inc_collection_pause)) {\n-      return result;\n+    attempt_allocation_after_gc(&request, gc_count_before, should_try_gc, GCCause::_g1_inc_collection_pause);\n+\n+    if (request.pending()) {\n+      \/\/ GC Safepoint did not handle our allocation request. We should retry.\n+      continue;\n+    } else if (request.failed()) {\n+      \/\/ VM successfully scheduled a collection which failed to allocate. No\n+      \/\/ point in trying to allocate further. We'll just return null.\n+      log_debug(gc, alloc)(\"%s: Failed to allocate %zu words\", Thread::current()->name(), request.size());\n@@ -501,0 +488,2 @@\n+\n+    return request.result();\n@@ -681,1 +670,1 @@\n-  HeapWord* result = nullptr;\n+  StalledAllocReq request(word_size, _allocator->current_node_index(), this);\n@@ -689,0 +678,5 @@\n+      \/\/ Allocation request could have been satisfied while thread was blocked on the lock.\n+      if (!request.pending()){\n+        return request.result();\n+      }\n+\n@@ -693,1 +687,1 @@\n-      result = humongous_obj_allocate(word_size);\n+      HeapWord* result = humongous_obj_allocate(word_size);\n@@ -697,0 +691,2 @@\n+\n+        assert(request.pending(), \"Sanity!\");\n@@ -708,2 +704,9 @@\n-    if (attempt_allocation_after_gc(word_size, gc_count_before, should_try_gc, &result, GCCause::_g1_humongous_allocation)) {\n-      return result;\n+    attempt_allocation_after_gc(&request, gc_count_before, should_try_gc, GCCause::_g1_humongous_allocation);\n+\n+    if (request.pending()) {\n+      \/\/ GC Safepoint did not handle our allocation request. We should retry.\n+      continue;\n+    } else if (request.failed()) {\n+      \/\/ VM successfully scheduled a collection which failed to allocate. No\n+      \/\/ point in trying to allocate further. We'll just return null.\n+      log_debug(gc, alloc)(\"%s: Failed to allocate %zu words\", Thread::current()->name(), request.size());\n@@ -711,0 +714,2 @@\n+\n+    return request.result();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":42,"deletions":37,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    StalledAllocReq(size_t size, uint numa_node) :\n+    StalledAllocReq(size_t size, uint numa_node, G1CollectedHeap* g1h = G1CollectedHeap::heap()) :\n@@ -197,2 +197,9 @@\n-      _state(AllocationState::Pending)\n-    { }\n+      _state(AllocationState::Pending),\n+      _g1h(g1h)\n+    {\n+      if (_g1h != nullptr) {\n+        _g1h->enqueue_req(this);\n+      }\n+    }\n+\n+    StalledAllocReq() : StalledAllocReq(0, 0, nullptr) { }\n@@ -200,1 +207,6 @@\n-    StalledAllocReq() : StalledAllocReq(0, 0) { }\n+    ~StalledAllocReq() {\n+      if (_g1h != nullptr) {\n+        assert(_result == nullptr || succeeded(), \"Sanity\");\n+        _g1h->dequeue_req(this);\n+      }\n+    }\n@@ -223,0 +235,1 @@\n+    G1CollectedHeap* _g1h;\n@@ -228,0 +241,10 @@\n+  void enqueue_req(StalledAllocReq *req) {\n+    MutexLocker ml(&_alloc_request_lock, Mutex::_no_safepoint_check_flag);\n+    _stalled_allocations.insert_last(req);\n+  }\n+\n+  void dequeue_req(StalledAllocReq *req) {\n+    MutexLocker ml(&_alloc_request_lock, Mutex::_no_safepoint_check_flag);\n+    _stalled_allocations.remove(req);\n+  }\n+\n@@ -523,1 +546,1 @@\n-  bool attempt_allocation_after_gc(size_t word_size,\n+  void attempt_allocation_after_gc(StalledAllocReq* req,\n@@ -526,1 +549,0 @@\n-                                   HeapWord** result,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -135,3 +135,2 @@\n-  \/\/ If any allocation has been requested, try to do that first.\n-  bool has_allocation_requests = !g1h->_stalled_allocations.is_empty();\n-  if (has_allocation_requests) {\n+  \/\/ Only if operation was really triggered by an allocation.\n+  if (_word_size) {\n@@ -157,3 +156,1 @@\n-  has_allocation_requests = !g1h->_stalled_allocations.is_empty();\n-\n-  if (has_allocation_requests) {\n+  if (!g1h->_stalled_allocations.is_empty()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}