{"files":[{"patch":"@@ -84,0 +84,4 @@\n+  virtual void set_callee_method(ciMethod* m) {\n+    assert(InlineTree::check_can_parse(m) == NULL, \"parse must be possible\");\n+    _method = m;\n+  }\n@@ -717,1 +721,6 @@\n-    LateInlineStringCallGenerator* cg = new LateInlineStringCallGenerator(method(), _inline_cg);\n+    CallJavaNode* callj = call->as_CallJava();\n+\n+    if (_inline_cg->method() != callj->method()) {\n+      _inline_cg->set_callee_method(callj->method());\n+    }\n+    LateInlineStringCallGenerator* cg = new LateInlineStringCallGenerator(callj->method(), _inline_cg);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- private:\n+ protected:\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,2 +730,2 @@\n-\n-    if (_late_inlines.length() == 0 && !has_mh_late_inlines() && !failing() && has_stringbuilder()) {\n+    \/\/ c2 may skip the incremental inliner, so process _string_late_inlines earlier\n+    if (_late_inlines.length() == 0 && !has_mh_late_inlines() && !failing() && (has_stringbuilder() || has_stringsubstring())) {\n@@ -4798,0 +4798,22 @@\n+\n+void Compile::update_string_late_inline(CallJavaNode* call, CallJavaNode* new_call) {\n+  for (int i = 0; i < _string_late_inlines.length(); i++) {\n+    CallGenerator* cg = _string_late_inlines.at(i);\n+    CallGenerator* new_cg;\n+\n+    if (call == cg->call_node()) {\n+      assert(cg->is_string_late_inline(), \"not string late!\");\n+      _string_late_inlines.at(i) = new_cg = cg->with_call_node(new_call);\n+\n+      if (print_inlining() || print_intrinsics()) {\n+        for (int j = 0; j < _print_inlining_list->length(); j++) {\n+          if (_print_inlining_list->adr_at(j)->cg() == cg) {\n+            _print_inlining_list->adr_at(j)->set_cg(new_cg);\n+          }\n+        }\n+      }\n+      return;\n+    }\n+  }\n+  ShouldNotReachHere();\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+class CallJavaNode;\n@@ -1194,0 +1195,2 @@\n+\n+  void update_string_late_inline(CallJavaNode* call, CallJavaNode* new_call);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1211,0 +1211,6 @@\n+  \/\/ a dummy region node: one single input\n+  \/\/ dummy region nodes should only exist before Optimize()\n+  if (ctrl != NULL && ctrl->is_Region() && ctrl->req() == 2) {\n+    ctrl = ctrl->in(1);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -659,0 +659,1 @@\n+  C->update_string_late_inline(startsWith, new_call);\n@@ -660,0 +661,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}