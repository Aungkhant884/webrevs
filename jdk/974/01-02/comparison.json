{"files":[{"patch":"@@ -1015,0 +1015,1 @@\n+  if (_bci == -1) return true;\n@@ -1018,7 +1019,0 @@\n-  \/\/ vmIntrinsics::_String_startsWith, callee has changed to the overrided version\n-  if (callee->holder()->name() == ciSymbol::java_lang_String()\n-          && 0 == strcmp(callee->name()->as_quoted_ascii(), \"startsWith\")\n-          && override_symbolic_info()) {\n-    return true; \/\/skip\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -672,1 +672,1 @@\n-  const int       _bci;         \/\/ Byte Code Index of call byte code\n+  int     _bci;                    \/\/ Byte Code Index of call byte code\n@@ -696,1 +696,2 @@\n-\n+  int bci() const { return _bci; }\n+  void set_bci(int bci) { _bci = bci;}\n@@ -740,1 +741,1 @@\n-    if ((jvms() != NULL) && is_boxing_method()) {\n+    if (jvms() != NULL) {\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -641,2 +641,1 @@\n-void PhaseStringOpts::optimize_startsWith(CallJavaNode* substr, CallJavaNode* startsWith,\n-                                          Node* castpp, CallProjections& projs) {\n+CallJavaNode* PhaseStringOpts::optimize_startsWith(CallJavaNode* substr, CallJavaNode* startsWith, Node* castpp) {\n@@ -650,9 +649,13 @@\n-\n-  startsWith->replace_edge(startsWith->in(TypeFunc::Parms + 0), base);\n-  startsWith->ins_req(TypeFunc::Parms + 2, beg_idx);\n-  startsWith->set_tf(TypeFunc::make(m2));\n-  startsWith->set_method(m2);\n-  startsWith->set_override_symbolic_info(true);\n-  startsWith->jvms()->adapt_position(+1);\n-\n-  Node* ctrl = startsWith->in(TypeFunc::Control);\n+  CallJavaNode* new_call = static_cast<CallJavaNode* >(_gvn->transform(startsWith->clone()));\n+\n+  new_call->replace_edge(new_call->in(TypeFunc::Parms + 0), base);\n+  new_call->ins_req(TypeFunc::Parms + 2, beg_idx);\n+  new_call->set_tf(TypeFunc::make(m2));\n+  new_call->set_method(m2);\n+  new_call->set_bci(-1);\n+  new_call->jvms()->adapt_position(+1);\n+  C->gvn_replace_by(startsWith, new_call);\n+  startsWith->disconnect_inputs(C);\n+  startsWith->destruct();\n+\n+  Node* ctrl = new_call->in(TypeFunc::Control);\n@@ -667,1 +670,1 @@\n-    \/\/ if substr controls startsWith, hoist startsWith\n+    \/\/ if substr controls new_call, hoist it\n@@ -675,1 +678,1 @@\n-        startsWith->replace_edge(startsWith->in(idx), substr->in(idx));\n+        new_call->replace_edge(new_call->in(idx), substr->in(idx));\n@@ -683,1 +686,1 @@\n-  ctrl = startsWith->in(TypeFunc::Control);\n+  ctrl = new_call->in(TypeFunc::Control);\n@@ -706,2 +709,2 @@\n-  ctrl->replace_edge(startsWith, normal);\n-  startsWith->set_req(TypeFunc::Control, normal);\n+  ctrl->replace_edge(new_call, normal);\n+  new_call->set_req(TypeFunc::Control, normal);\n@@ -720,0 +723,2 @@\n+    CallProjections projs;\n+    substr->extract_projections(&projs, true);\n@@ -731,0 +736,2 @@\n+\n+  return new_call;\n@@ -737,1 +744,1 @@\n-    CallStaticJavaNode* call = calls[i]->as_CallStaticJava();\n+    CallJavaNode* call = calls[i]->as_CallStaticJava();\n@@ -742,1 +749,0 @@\n-      CallProjections projs;\n@@ -746,1 +752,1 @@\n-        substr->extract_projections(&projs, true);\n+\n@@ -754,1 +760,1 @@\n-        optimize_startsWith(substr, call, castpp, projs);\n+        call = optimize_startsWith(substr, call, castpp);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  void optimize_startsWith(CallJavaNode* substr, CallJavaNode* startsWith, Node* castpp, CallProjections& projs);\n+  CallJavaNode* optimize_startsWith(CallJavaNode* substr, CallJavaNode* startsWith, Node* castpp);\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}