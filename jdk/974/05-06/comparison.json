{"files":[{"patch":"@@ -4818,1 +4818,0 @@\n-  ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -641,2 +641,2 @@\n-\/\/ transform from s=substring(base, beg, end); s.startsWith(prefix)\n-\/\/ to substring(base, beg, end)| base.startsWith(prefix, beg)\n+\/\/ transform from s=substring(base, beg); s.startsWith(prefix)\n+\/\/ to substring(base, beg)| base.startsWith(prefix, beg)\n@@ -744,0 +744,42 @@\n+\/\/ A substring is trivial if it is generated from String.substring(base, beginIndex)\n+\/\/ C2 may avoid from creating trivial substring by using alternative APIs, eg.\n+\/\/ String::startsWith(base, beginIdex) or StringBuilder::append(base, beginIdex)\n+bool PhaseStringOpts::is_trivial_substring(CallStaticJavaNode* substr) {\n+  if (substr != nullptr && substr->method() != nullptr) {\n+    if (substr->method()->is_string_substring()) {\n+      \/\/ fastpath: caller is substring(base, beginIndex)\n+      ciMethod* caller = substr->jvms()->method();\n+      if (caller->name() == ciSymbols::substring_name() && caller->arg_size_no_receiver() == 1)\n+        return true;\n+\n+\/\/ return true if caller is  String.substring(base, beginIndex, base.length())\n+\/\/     88  AddP  === _  44  44  87  [[ 89  163  171 ]]   Oop:java\/lang\/String:NotNull:exact+16 * ...\n+\/\/   89  LoadB  === _  7  88  [[ 94  164  172 ]]\n+\/\/   68  LoadRange  === _  7  67  [[ 94 ]]\n+\/\/ 94  RShiftI  === _  68  89  [[ 95  154 ]]  !jvms: String::length @ bci:9 (line 675) ...\n+      Node* base = substr->in(TypeFunc::Parms + 0);\n+      Node* end_idx = substr->in(TypeFunc::Parms + 2);\n+      Node_Notes* notes = C->node_notes_at(end_idx->_idx);\n+      if (notes != nullptr && !notes->is_clear()) {\n+        JVMState* jvms = notes->jvms();\n+        if (jvms->has_method()) {\n+          Node* t;\n+          ciMethod* method = jvms->method();\n+\n+          \/\/ callee is java.lang.String::length\n+          if (method->holder()->name() == ciSymbols::java_lang_String() &&\n+              method->name() == ciSymbols::length_name() &&\n+              end_idx->Opcode() == Op_RShiftI) {\n+            t = end_idx->in(2);\n+            if (t->is_Load()) {\n+              t = t->in(2);\n+              return t->is_AddP() && t->in(1) == base;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -754,2 +796,1 @@\n-      if (substr != nullptr && substr->method() != nullptr &&\n-          substr->method()->is_string_substring()) {\n+      if (is_trivial_substring(substr)) {\n@@ -2184,3 +2225,1 @@\n-  if (OptimizeSubstring) {\n-    tty->print_cr(\"OptimizeSubstring: substring_eliminated= %d\", substring_eliminated);\n-  }\n+  tty->print_cr(\"OptimizeSubstring: substring_eliminated= %d\", substring_eliminated);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":46,"deletions":7,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+  bool is_trivial_substring(CallStaticJavaNode* substr);\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,2 +47,9 @@\n-        }\n-        else {\n+            check_nontrivial();\n+        } else if (args[0].equals(\"nontrivial\")) {\n+            boolean val1 = false;\n+             for (int i = 0; i < 20_000; ++i) {\n+                val1 |= TestOptimizeSubstring.useStartsWith_NonTrivial();\n+            }\n+\n+            Asserts.assertFalse(val1, \"val1 should be false\");\n+        } else {\n@@ -95,0 +102,15 @@\n+    private static void check_nontrivial() {\n+        OutputAnalyzer oa;\n+        try {\n+            oa = ProcessTools.executeTestJvm(\"-XX:+UnlockDiagnosticVMOptions\", \"-Xbootclasspath\/a:.\",\n+                    \"-XX:+OptimizeSubstring\", \"-XX:-UseOnStackReplacement\",\n+                    \"-XX:+PrintOptoAssembly\", \"-XX:-TieredCompilation\",\n+                    \"-XX:CompileOnly=\" + TestOptimizeSubstring.class.getName() + \"::useStartsWith_NonTrivial\",\n+                    TestOptimizeSubstring.class.getName(),\n+                    \"nontrivial\");\n+        } catch (Exception e) {\n+            throw new Error(\"Exception launching child for check_nontrivial\");\n+        }\n+        oa.shouldHaveExitValue(0);\n+    }\n+\n@@ -99,0 +121,8 @@\n+\n+    \/\/ courtesy of John Rose's comment\n+    \/\/ https:\/\/github.com\/openjdk\/jdk\/pull\/974#pullrequestreview-551773771\n+    private static boolean useStartsWith_NonTrivial() {\n+        String s = \"abcd\";\n+        String x = s.substring(1, 2);\n+        return x.startsWith(\"bc\");\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestOptimizeSubstring.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}