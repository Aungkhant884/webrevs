[{"commit":{"message":"fix crash when users disable inliner using -XX:-Inline\n\nwhen inliner is off, substring optimization is skipped as well\nbecause it depends on late_inliner."},"files":[{"filename":"src\/hotspot\/share\/opto\/compile.cpp"}],"sha":"044fdb41c0e6087ae001d1815df0a8e0e085e25c"},{"commit":{"message":"do api transformation for trivial substrings.\n\nA substring is trivial if it is generated from String.substring(base, beginIndex)\nString.substring(base, beginIndex, endIndex) is not trivial unless endIndex == base.length().\n\nThis patch fixes the wrong transformation like this because x isn't trivial here.\nString s = \"abcd\"; String x = s.substring(1, 2); x.startsWith(\"bc\");"},"files":[{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestOptimizeSubstring.java"}],"sha":"dd72a4032e21f675c1881d1f7a2c3cd72d6c5b2f"},{"commit":{"message":"allow C2 to \"late\" inline the overloaded methods.\n\nCompile::update_string_late_inline clones the callGenerator of the CallJavaNode and change\nthe bound ciMethod of it. the function also update the callGenerator in _string_late_inlines.\nThe new callnode will be handled in Compile::inline_string_calls."},"files":[{"filename":"src\/hotspot\/share\/opto\/callGenerator.cpp"},{"filename":"src\/hotspot\/share\/opto\/callGenerator.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"}],"sha":"c5a25bfb0a592b126aaea5395cf7b3d5007977fd"},{"commit":{"message":"fix build failure after merging"},"files":[{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"}],"sha":"f96e87c717db9812bbf30ffc57702c6cf3d60d97"},{"commit":{"message":"Merge branch 'master' into JDK-8254807"},"files":[{"filename":"src\/hotspot\/share\/ci\/ciMethod.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciMethod.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.hpp"},{"filename":"src\/hotspot\/share\/opto\/doCall.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"}],"sha":"60491ffc9088d3360e283550ede30fa7b8993c07"},{"commit":{"message":"use a brand new CallNode instead of overloading the startsWith.\n\nset_bci to -1 so we skip symbolic info validation"},"files":[{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.hpp"}],"sha":"b8ef8ce7d95c0e73cc2331efa28943c82062c0dd"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\nimprove microbenchmark based on the PR feedback."},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/SubstringStartsWith.java"}],"sha":"2543aa883cc6056f16251b983b36d310501ed61f"},{"commit":{"message":"fix a regression test on x86_32"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestOptimizeSubstring.java"}],"sha":"56108f76ba34cc8784b1cbd71722bd277148f6dd"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\nadd more comments"},"files":[{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"}],"sha":"02310974b565b9dcae1a9009b11eda1071cbaed1"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\ninvoke uncommon_trap if the index is out of bound before startsWith"},"files":[{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.hpp"}],"sha":"b5017f19fe27be74a5412e6efeadd15477805594"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\nadd a regression test to verify that OptimizeSubstirng works"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestOptimizeSubstring.java"}],"sha":"f279e289da60255caa82baff5de2124ea3274ad0"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\nadd a microbench to show performance improvement"},"files":[],"sha":"ff777902f623b6c7ac3b018a692a34b79cd17d8f"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()\n\nbugfix"},"files":[{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"}],"sha":"aa8c45e4e1e2fdfc8ffc0b3a59fd64dc860b15c9"},{"commit":{"message":"8254807: Optimize startsWith() for String.substring()"},"files":[{"filename":"src\/hotspot\/share\/ci\/ciMethod.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciMethod.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.hpp"},{"filename":"src\/hotspot\/share\/opto\/doCall.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/stringopts.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/String.java"}],"sha":"a3307d7c20f455282be1c8385970e545fc464f6e"}]