{"files":[{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 200, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 25, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class SubstringStartsWith {\n+    \/\/ model substrings in 3 representative lengths.\n+    \/\/ 1. small size = 4 for a variable name\n+    \/\/ 2. medium size = 24 or url or a filepath\n+    \/\/ 3. long string = 256 for a human-readable message\n+    @Param({\"4\", \"24\", \"256\"})\n+    private int substrLength;\n+    private String sample_ascii;\n+    private String sample_utf16;\n+    private String prefix_ascii;\n+    private String prefix_utf16;\n+\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+       StringBuilder sb = new StringBuilder();\n+       String tile = \"abcdef\";\n+       for (int i=0; i<512 * 2; i = i + tile.length()) {\n+           sb.append(tile);\n+       }\n+       sample_ascii = sb.toString();\n+       prefix_ascii = sample_ascii.substring(0, 2);\n+\n+       sb = new StringBuilder();\n+       tile = \"\\u4F60\\u597D\\u3088\\u3046\\u3053\\u305DJava\";\n+       for (int i=0; i<512 * 2; i = i + tile.length()) {\n+           sb.append(tile);\n+       }\n+       sample_utf16 = sb.toString();\n+       prefix_utf16 = sample_utf16.substring(0, 2);\n+    }\n+\n+    boolean substr2StartsWith(String base, String prefix) {\n+        return base.substring(1, 1 + substrLength).startsWith(prefix);\n+    }\n+\n+    boolean substr2StartsWith_noalloc(String base, String prefix) {\n+        \/\/boundary check as same as java.lang.String::checkBoundsBeginEnd\n+        int begin = 1;\n+        int end = begin + substrLength;\n+        if (begin < 0 || begin > end || end > base.length()) {\n+            throw new StringIndexOutOfBoundsException(\n+                \"begin \" + begin + \", end \" + end + \", length \" + base.length());\n+        }\n+\n+        return base.startsWith(prefix, begin);\n+    }\n+\n+    @Benchmark\n+    public boolean substr2StartsWith_singleByte() {\n+        return substr2StartsWith(sample_ascii, prefix_ascii);\n+    }\n+\n+    @Benchmark\n+    public boolean substr2StartsWith_noalloc_singleByte() {\n+        return substr2StartsWith_noalloc(sample_ascii, prefix_ascii);\n+    }\n+\n+    @Benchmark\n+    public boolean substr2StartsWith_doubleBytes() {\n+        return substr2StartsWith(sample_utf16, prefix_utf16);\n+    }\n+\n+    @Benchmark\n+    public boolean substr2StartsWith_noalloc_doubleBytes() {\n+        return substr2StartsWith_noalloc(sample_utf16, prefix_utf16);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/SubstringStartsWith.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.vm.compiler;\n-\n-import java.util.concurrent.TimeUnit;\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@Warmup(iterations = 5, time = 200, timeUnit = TimeUnit.MILLISECONDS)\n-@Measurement(iterations = 20, time = 200, timeUnit = TimeUnit.MILLISECONDS)\n-@State(Scope.Benchmark)\n-public class SubstringAndStartsWith {\n-    @Param({\"1\", \"8\", \"32\", \"128\", \"256\", \"512\"})\n-    public int substrLength;\n-    public String sample;\n-    public String prefix = \"a\";\n-\n-    @Setup(Level.Trial)\n-    public void doSetup() {\n-       StringBuilder sb = new StringBuilder();\n-       for (int i=0; i<512 * 2; i = i + 6) {\n-           sb.append(\"abcdef\");\n-       }\n-       sample = sb.toString();\n-    }\n-\n-    @Benchmark\n-    public boolean substr2StartsWith() {\n-        return sample.substring(substrLength, substrLength * 2).startsWith(prefix);\n-    }\n-\n-    @Benchmark\n-    public boolean substr2StartsWith_noalloc() {\n-        \/\/ compare prefix length with the length of substring\n-        if (prefix.length() > substrLength) return false;\n-        return sample.startsWith(prefix, substrLength); \/\/ substrLength here is actually the beginIdex of substring\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubstringAndStartsWith.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}