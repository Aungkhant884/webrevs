{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -101,1 +102,1 @@\n-     * Returns the hash code value for this code signer.\n+     * {@return the hash code value for this code signer}\n@@ -104,2 +105,0 @@\n-     *\n-     * @return a hash code value for this code signer.\n@@ -107,0 +106,1 @@\n+    @Override\n@@ -129,0 +129,1 @@\n+    @Override\n@@ -130,5 +131,1 @@\n-        if ((!(obj instanceof CodeSigner that))) {\n-            return false;\n-        }\n-\n-        if (this == that) {\n+        if (this == obj) {\n@@ -137,9 +134,3 @@\n-        Timestamp thatTimestamp = that.getTimestamp();\n-        if (timestamp == null) {\n-            if (thatTimestamp != null) {\n-                return false;\n-            }\n-        } else {\n-            if ((!timestamp.equals(thatTimestamp))) {\n-                return false;\n-            }\n+\n+        if (!(obj instanceof CodeSigner that)) {\n+            return false;\n@@ -147,0 +138,3 @@\n+\n+        if (!Objects.equals(timestamp, that.getTimestamp()))\n+            return false;\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSigner.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -352,5 +353,1 @@\n-        if (this.name == null) {\n-            if (that.name != null) {\n-                return false;\n-            }\n-        } else if (!this.name.equals(that.name)) {\n+        if (!Objects.equals(this.name, that.name)) {\n@@ -361,8 +358,2 @@\n-        if (this.actions == null) {\n-            if (that.actions != null) {\n-                return false;\n-            }\n-        } else {\n-            if (!this.actions.equals(that.actions)) {\n-                return false;\n-            }\n+        if (!Objects.equals(this.actions, that.actions)) {\n+            return false;\n@@ -407,3 +398,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -413,6 +402,1 @@\n-        int hash = type.hashCode();\n-        if (name != null)\n-            hash ^= name.hashCode();\n-        if (actions != null)\n-            hash ^= actions.hashCode();\n-        return hash;\n+        return Objects.hash(type, name, actions);\n","filename":"src\/java.base\/share\/classes\/java\/security\/UnresolvedPermission.java","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -619,0 +620,1 @@\n+        @Override\n@@ -621,4 +623,2 @@\n-            if (alg != null) retval ^= alg.hashCode();\n-            if (exemptionMechanism != null) {\n-                retval ^= exemptionMechanism.hashCode();\n-            }\n+            retval ^= Objects.hashCode(alg);\n+            retval ^= Objects.hashCode(exemptionMechanism);\n@@ -626,4 +626,2 @@\n-            if (checkParam) retval ^= 100;\n-            if (algParamSpec != null) {\n-                retval ^= algParamSpec.hashCode();\n-            }\n+            retval ^= (checkParam ? 100 : 0);\n+            retval ^= Objects.hashCode(algParamSpec);\n@@ -633,0 +631,1 @@\n+        @Override\n@@ -640,6 +639,2 @@\n-            if (this.cryptoPermission == null) {\n-                if (that.cryptoPermission != null) return false;\n-            } else {\n-                if (!this.cryptoPermission.equals(\n-                                                 that.cryptoPermission))\n-                    return false;\n+            if (Objects.equals(this.cryptoPermission, that.cryptoPermission)) {\n+                return false;\n@@ -655,1 +650,1 @@\n-            if (!(this.maxKeySize == that.maxKeySize)) return false;\n+            if (this.maxKeySize != that.maxKeySize) return false;\n@@ -659,5 +654,1 @@\n-            if (this.algParamSpec == null) {\n-                return that.algParamSpec == null;\n-            } else {\n-                return this.algParamSpec.equals(that.algParamSpec);\n-            }\n+            return Objects.equals(this.algParamSpec, that.algParamSpec);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPolicyParser.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -910,4 +910,0 @@\n-        if (o == null) {\n-            return false;\n-        }\n-\n@@ -1006,3 +1002,1 @@\n-     * Returns a hashcode for this {@code Subject}.\n-     *\n-     * @return a hashcode for this {@code Subject}.\n+     * {@return a hashcode for this {@code Subject}}\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -84,0 +85,1 @@\n+    @Override\n@@ -90,9 +92,2 @@\n-            byte[] thisCert = this.getEncoded();\n-            byte[] otherCert = ((Certificate)other).getEncoded();\n-\n-            if (thisCert.length != otherCert.length)\n-                return false;\n-            for (int i = 0; i < thisCert.length; i++)\n-                 if (thisCert[i] != otherCert[i])\n-                     return false;\n-            return true;\n+            return Arrays.equals(this.getEncoded(),\n+                    ((Certificate)other).getEncoded());\n@@ -105,4 +100,2 @@\n-     * Returns a hashcode value for this certificate from its\n-     * encoded form.\n-     *\n-     * @return the hashcode value.\n+     * {@return a hashcode value for this certificate from its\n+     * encoded form}\n@@ -110,0 +103,1 @@\n+    @Override\n@@ -111,1 +105,0 @@\n-        int     retval = 0;\n@@ -113,5 +106,1 @@\n-            byte[] certData = this.getEncoded();\n-            for (int i = 1; i < certData.length; i++) {\n-                 retval += certData[i] * i;\n-            }\n-            return (retval);\n+            return Arrays.hashCode(this.getEncoded());\n@@ -119,1 +108,1 @@\n-            return (retval);\n+            return 0;\n","filename":"src\/java.base\/share\/classes\/javax\/security\/cert\/Certificate.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -71,1 +72,1 @@\n-     * a value for every bit of the BitArray. i.e. {@code 8*a.length <= length}.\n+     * a value for every bit of the BitArray, i.e. {@code 8*a.length >= length}.\n@@ -82,1 +83,1 @@\n-     * the BitArray, i.e. {@code 8*(a.length - ofs) <= length}.\n+     * the BitArray, i.e. {@code 8*(a.length - ofs) >= length}.\n@@ -180,0 +181,1 @@\n+    @Override\n@@ -182,8 +184,3 @@\n-        if (!(obj instanceof BitArray ba)) return false;\n-\n-        if (ba.length != length) return false;\n-\n-        for (int i = 0; i < repn.length; i += 1) {\n-            if (repn[i] != ba.repn[i]) return false;\n-        }\n-        return true;\n+        if (!(obj instanceof BitArray other)) return false;\n+        if (length != other.length) return false;\n+        return Arrays.equals(repn, other.repn);\n@@ -205,3 +202,1 @@\n-     * Returns a hash code value for this bit array.\n-     *\n-     * @return  a hash code value for this bit array.\n+     * {@return a hash code value for this bit array}\n@@ -209,0 +204,1 @@\n+    @Override\n@@ -210,6 +206,1 @@\n-        int hashCode = 0;\n-\n-        for (int i = 0; i < repn.length; i++)\n-            hashCode = 31*hashCode + repn[i];\n-\n-        return hashCode ^ length;\n+        return Arrays.hashCode(repn) ^ length;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/BitArray.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"}]}