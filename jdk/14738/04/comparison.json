{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -943,1 +943,1 @@\n-     * Returns the hash code value for this context. The hash code\n+     * {@return the hash code value for this context} The hash code\n@@ -946,2 +946,0 @@\n-     *\n-     * @return a hash code value for this context.\n@@ -949,1 +947,1 @@\n-\n+    @Override\n@@ -956,3 +954,3 @@\n-        for (int i =0; i < context.length; i++) {\n-            if (context[i] != null)\n-                hashCode ^= context[i].hashCode();\n+        for (ProtectionDomain protectionDomain : context) {\n+            if (protectionDomain != null)\n+                hashCode ^= protectionDomain.hashCode();\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessControlContext.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+    @Override\n@@ -106,3 +107,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -110,1 +109,1 @@\n-\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/AllPermission.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-     * Returns the hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -224,2 +224,0 @@\n-     *\n-     * @return a hash code value for this object.\n","filename":"src\/java.base\/share\/classes\/java\/security\/BasicPermission.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -101,1 +102,1 @@\n-     * Returns the hash code value for this code signer.\n+     * {@return the hash code value for this code signer}\n@@ -104,2 +105,0 @@\n-     *\n-     * @return a hash code value for this code signer.\n@@ -107,0 +106,1 @@\n+    @Override\n@@ -109,5 +109,1 @@\n-            if (timestamp == null) {\n-                myhash = signerCertPath.hashCode();\n-            } else {\n-                myhash = signerCertPath.hashCode() + timestamp.hashCode();\n-            }\n+            myhash = signerCertPath.hashCode() + Objects.hashCode(timestamp);\n@@ -129,0 +125,1 @@\n+    @Override\n@@ -130,5 +127,1 @@\n-        if ((!(obj instanceof CodeSigner that))) {\n-            return false;\n-        }\n-\n-        if (this == that) {\n+        if (this == obj) {\n@@ -137,11 +130,4 @@\n-        Timestamp thatTimestamp = that.getTimestamp();\n-        if (timestamp == null) {\n-            if (thatTimestamp != null) {\n-                return false;\n-            }\n-        } else {\n-            if ((!timestamp.equals(thatTimestamp))) {\n-                return false;\n-            }\n-        }\n-        return signerCertPath.equals(that.getSignerCertPath());\n+\n+        return obj instanceof CodeSigner other\n+                && Objects.equals(timestamp, other.getTimestamp())\n+                && signerCertPath.equals(other.getSignerCertPath());\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSigner.java","additions":11,"deletions":25,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,3 +133,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -139,4 +137,1 @@\n-        if (location != null)\n-            return location.hashCode();\n-        else\n-            return 0;\n+        return Objects.hashCode(location);\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSource.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,0 +339,1 @@\n+    @Override\n@@ -481,3 +482,1 @@\n-     * Returns a hashcode for this {@code Identity}.\n-     *\n-     * @return a hashcode for this {@code Identity}.\n+     * {@return the hashcode for this {@code Identity}}\n@@ -485,0 +484,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/Identity.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -352,5 +353,1 @@\n-        if (this.name == null) {\n-            if (that.name != null) {\n-                return false;\n-            }\n-        } else if (!this.name.equals(that.name)) {\n+        if (!Objects.equals(this.name, that.name)) {\n@@ -361,8 +358,2 @@\n-        if (this.actions == null) {\n-            if (that.actions != null) {\n-                return false;\n-            }\n-        } else {\n-            if (!this.actions.equals(that.actions)) {\n-                return false;\n-            }\n+        if (!Objects.equals(this.actions, that.actions)) {\n+            return false;\n@@ -407,3 +398,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -413,6 +402,1 @@\n-        int hash = type.hashCode();\n-        if (name != null)\n-            hash ^= name.hashCode();\n-        if (actions != null)\n-            hash ^= actions.hashCode();\n-        return hash;\n+        return Objects.hash(type, name, actions);\n","filename":"src\/java.base\/share\/classes\/java\/security\/UnresolvedPermission.java","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,1 @@\n+    @Override\n@@ -185,1 +186,1 @@\n-                && that.getType().equals(this.type)\n+                && this.type.equals(that.getType())\n@@ -190,2 +191,2 @@\n-     * Returns the hashcode for this certification path. The hash code of\n-     * a certification path is defined to be the result of the following\n+     * {@return the hashcode value for this certification path} The hash code\n+     * of a certification path is defined to be the result of the following\n@@ -201,2 +202,0 @@\n-     *\n-     * @return the hashcode value for this certification path\n@@ -204,0 +203,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPath.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -86,0 +87,1 @@\n+    @Override\n@@ -95,5 +97,1 @@\n-            if (thisCRLEntry.length != otherCRLEntry.length)\n-                return false;\n-            for (int i = 0; i < thisCRLEntry.length; i++)\n-                 if (thisCRLEntry[i] != otherCRLEntry[i])\n-                     return false;\n+            return Arrays.equals(thisCRLEntry, otherCRLEntry);\n@@ -103,1 +101,0 @@\n-        return true;\n@@ -107,4 +104,2 @@\n-     * Returns a hashcode value for this CRL entry from its\n-     * encoded form.\n-     *\n-     * @return the hashcode value.\n+     * {@return the hashcode value for this CRL entry from its\n+     * encoded form}\n@@ -112,0 +107,1 @@\n+    @Override\n@@ -113,1 +109,0 @@\n-        int     retval = 0;\n@@ -115,4 +110,1 @@\n-            byte[] entryData = this.getEncoded();\n-            for (int i = 1; i < entryData.length; i++)\n-                 retval += entryData[i] * i;\n-\n+            return Arrays.hashCode(this.getEncoded());\n@@ -120,1 +112,1 @@\n-            return(retval);\n+            return 0;\n@@ -122,1 +114,0 @@\n-        return(retval);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CRLEntry.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -218,0 +219,1 @@\n+    @Override\n@@ -229,3 +231,1 @@\n-     * Returns a hash code value for this characteristic 2\n-     * finite field.\n-     * @return a hash code value.\n+     * {@return the hash code value for this characteristic 2 finite field}\n@@ -233,0 +233,1 @@\n+    @Override\n@@ -234,2 +235,0 @@\n-        int value = m << 5;\n-        value += (rp==null? 0:rp.hashCode());\n@@ -238,1 +237,1 @@\n-        return value;\n+        return m << 5 + Objects.hashCode(rp);\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECFieldF2m.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,1 @@\n+    @Override\n@@ -106,2 +107,1 @@\n-     * Returns a hash code value for this elliptic curve point.\n-     * @return a hash code value.\n+     * {@return the hash code value for this elliptic curve point}\n@@ -109,0 +109,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECPoint.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -619,0 +620,1 @@\n+        @Override\n@@ -621,4 +623,2 @@\n-            if (alg != null) retval ^= alg.hashCode();\n-            if (exemptionMechanism != null) {\n-                retval ^= exemptionMechanism.hashCode();\n-            }\n+            retval ^= Objects.hashCode(alg);\n+            retval ^= Objects.hashCode(exemptionMechanism);\n@@ -626,4 +626,2 @@\n-            if (checkParam) retval ^= 100;\n-            if (algParamSpec != null) {\n-                retval ^= algParamSpec.hashCode();\n-            }\n+            retval ^= (checkParam ? 100 : 0);\n+            retval ^= Objects.hashCode(algParamSpec);\n@@ -633,0 +631,1 @@\n+        @Override\n@@ -640,6 +639,2 @@\n-            if (this.cryptoPermission == null) {\n-                if (that.cryptoPermission != null) return false;\n-            } else {\n-                if (!this.cryptoPermission.equals(\n-                                                 that.cryptoPermission))\n-                    return false;\n+            if (!Objects.equals(this.cryptoPermission, that.cryptoPermission)) {\n+                return false;\n@@ -655,1 +650,1 @@\n-            if (!(this.maxKeySize == that.maxKeySize)) return false;\n+            if (this.maxKeySize != that.maxKeySize) return false;\n@@ -659,5 +654,1 @@\n-            if (this.algParamSpec == null) {\n-                return that.algParamSpec == null;\n-            } else {\n-                return this.algParamSpec.equals(that.algParamSpec);\n-            }\n+            return Objects.equals(this.algParamSpec, that.algParamSpec);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPolicyParser.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -910,4 +910,0 @@\n-        if (o == null) {\n-            return false;\n-        }\n-\n@@ -1006,3 +1002,1 @@\n-     * Returns a hashcode for this {@code Subject}.\n-     *\n-     * @return a hashcode for this {@code Subject}.\n+     * {@return a hashcode for this {@code Subject}}\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -84,0 +85,1 @@\n+    @Override\n@@ -90,9 +92,2 @@\n-            byte[] thisCert = this.getEncoded();\n-            byte[] otherCert = ((Certificate)other).getEncoded();\n-\n-            if (thisCert.length != otherCert.length)\n-                return false;\n-            for (int i = 0; i < thisCert.length; i++)\n-                 if (thisCert[i] != otherCert[i])\n-                     return false;\n-            return true;\n+            return Arrays.equals(this.getEncoded(),\n+                    ((Certificate)other).getEncoded());\n@@ -105,4 +100,2 @@\n-     * Returns a hashcode value for this certificate from its\n-     * encoded form.\n-     *\n-     * @return the hashcode value.\n+     * {@return a hashcode value for this certificate from its\n+     * encoded form}\n@@ -110,0 +103,1 @@\n+    @Override\n@@ -111,1 +105,0 @@\n-        int     retval = 0;\n@@ -113,5 +106,1 @@\n-            byte[] certData = this.getEncoded();\n-            for (int i = 1; i < certData.length; i++) {\n-                 retval += certData[i] * i;\n-            }\n-            return (retval);\n+            return Arrays.hashCode(this.getEncoded());\n@@ -119,1 +108,1 @@\n-            return (retval);\n+            return 0;\n","filename":"src\/java.base\/share\/classes\/javax\/security\/cert\/Certificate.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,0 +156,1 @@\n+    @Override\n@@ -169,1 +170,1 @@\n-        PKCS10Attribute thisAttr, otherAttr;\n+        PKCS10Attribute thisAttr;\n@@ -171,2 +172,1 @@\n-        for (int i=0; i < len; i++) {\n-            otherAttr = attrs[i];\n+        for (PKCS10Attribute otherAttr : attrs) {\n@@ -178,1 +178,1 @@\n-            if (! thisAttr.equals(otherAttr))\n+            if (!thisAttr.equals(otherAttr))\n@@ -185,3 +185,1 @@\n-     * Returns a hashcode value for this PKCS10Attributes.\n-     *\n-     * @return the hashcode value.\n+     * {@return the hashcode value for this PKCS10Attributes}\n@@ -189,0 +187,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs10\/PKCS10Attributes.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1122,4 +1122,1 @@\n-            int retval = permission.hashCode();\n-            if (name != null) retval ^= name.hashCode();\n-            if (action != null) retval ^= action.hashCode();\n-            return retval;\n+            return Objects.hash(permission, name, action);\n@@ -1133,26 +1130,5 @@\n-            if (! (obj instanceof PermissionEntry that))\n-                return false;\n-\n-            if (this.permission == null) {\n-                if (that.permission != null) return false;\n-            } else {\n-                if (!this.permission.equals(that.permission)) return false;\n-            }\n-\n-            if (this.name == null) {\n-                if (that.name != null) return false;\n-            } else {\n-                if (!this.name.equals(that.name)) return false;\n-            }\n-\n-            if (this.action == null) {\n-                if (that.action != null) return false;\n-            } else {\n-                if (!this.action.equals(that.action)) return false;\n-            }\n-\n-            if (this.signedBy == null) {\n-                return that.signedBy == null;\n-            } else {\n-                return this.signedBy.equals(that.signedBy);\n-            }\n+            return obj instanceof PermissionEntry that\n+                    && Objects.equals(this.permission, that.permission)\n+                    && Objects.equals(this.name, that.name)\n+                    && Objects.equals(this.action, that.action)\n+                    && Objects.equals(this.signedBy, that.signedBy);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicyParser.java","additions":7,"deletions":31,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -229,4 +229,0 @@\n-        if (obj == null) {\n-            return false;\n-        }\n-\n@@ -237,5 +233,2 @@\n-        if (obj instanceof ResponderId respObj) {\n-            return Arrays.equals(encodedRid, respObj.getEncoded());\n-        }\n-\n-        return false;\n+        return obj instanceof ResponderId respObj\n+                && Arrays.equals(encodedRid, respObj.getEncoded());\n@@ -245,3 +238,1 @@\n-     * Returns the hash code value for this {@code ResponderId}\n-     *\n-     * @return the hash code value for this {@code ResponderId}\n+     * {@return the hash code value for this {@code ResponderId}}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ResponderId.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -71,1 +72,1 @@\n-     * a value for every bit of the BitArray. i.e. {@code 8*a.length <= length}.\n+     * a value for every bit of the BitArray, i.e. {@code 8*a.length >= length}.\n@@ -82,1 +83,1 @@\n-     * the BitArray, i.e. {@code 8*(a.length - ofs) <= length}.\n+     * the BitArray, i.e. {@code 8*(a.length - ofs) >= length}.\n@@ -180,0 +181,1 @@\n+    @Override\n@@ -182,1 +184,0 @@\n-        if (!(obj instanceof BitArray ba)) return false;\n@@ -184,6 +185,3 @@\n-        if (ba.length != length) return false;\n-\n-        for (int i = 0; i < repn.length; i += 1) {\n-            if (repn[i] != ba.repn[i]) return false;\n-        }\n-        return true;\n+        return obj instanceof BitArray other\n+                && length == other.length\n+                && Arrays.equals(repn, other.repn);\n@@ -205,3 +203,1 @@\n-     * Returns a hash code value for this bit array.\n-     *\n-     * @return  a hash code value for this bit array.\n+     * {@return a hash code value for this bit array}\n@@ -209,0 +205,1 @@\n+    @Override\n@@ -210,6 +207,1 @@\n-        int hashCode = 0;\n-\n-        for (int i = 0; i < repn.length; i++)\n-            hashCode = 31*hashCode + repn[i];\n-\n-        return hashCode ^ length;\n+        return Arrays.hashCode(repn) ^ length;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/BitArray.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,17 +173,8 @@\n-    public boolean equals(Object other) {\n-        if (!(other instanceof EDIPartyName))\n-            return false;\n-        String otherAssigner = ((EDIPartyName)other).assigner;\n-        if (this.assigner == null) {\n-            if (otherAssigner != null)\n-                return false;\n-        } else {\n-            if (!(this.assigner.equals(otherAssigner)))\n-                return false;\n-        }\n-        String otherParty = ((EDIPartyName)other).party;\n-        if (this.party == null) {\n-            return otherParty == null;\n-        } else {\n-            return this.party.equals(otherParty);\n-        }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+\n+        return obj instanceof EDIPartyName other\n+                && Objects.equals(this.assigner, other.assigner)\n+                && Objects.equals(this.party, other.party);\n@@ -193,3 +184,1 @@\n-     * Returns the hash code value for this EDIPartyName.\n-     *\n-     * @return a hash code value.\n+     * {@return the hash code value for this EDIPartyName}\n@@ -197,0 +186,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/EDIPartyName.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,1 @@\n-     * @param other GeneralSubtree to compare to this\n+     * @param obj GeneralSubtree to compare to this\n@@ -155,14 +155,9 @@\n-    public boolean equals(Object other) {\n-        if (!(other instanceof GeneralSubtree otherGS))\n-            return false;\n-        if (this.name == null) {\n-            if (otherGS.name != null) {\n-                return false;\n-            }\n-        } else {\n-            if (!((this.name).equals(otherGS.name)))\n-                return false;\n-        }\n-        if (this.minimum != otherGS.minimum)\n-            return false;\n-        return this.maximum == otherGS.maximum;\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+\n+        return obj instanceof GeneralSubtree other\n+                && Objects.equals(this.name, other.name)\n+                && this.minimum == other.minimum\n+                && this.maximum == other.maximum;\n@@ -172,3 +167,1 @@\n-     * Returns the hash code for this GeneralSubtree.\n-     *\n-     * @return a hash code value.\n+     * {@return the hash code for this GeneralSubtree}\n@@ -176,0 +169,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/GeneralSubtree.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -398,0 +398,1 @@\n+    @Override\n@@ -407,0 +408,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X500Name.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}