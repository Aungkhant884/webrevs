{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -943,1 +943,1 @@\n-     * Returns the hash code value for this context. The hash code\n+     * {@return the hash code value for this context} The hash code\n@@ -946,2 +946,0 @@\n-     *\n-     * @return a hash code value for this context.\n@@ -949,1 +947,1 @@\n-\n+    @Override\n@@ -956,3 +954,3 @@\n-        for (int i =0; i < context.length; i++) {\n-            if (context[i] != null)\n-                hashCode ^= context[i].hashCode();\n+        for (ProtectionDomain protectionDomain : context) {\n+            if (protectionDomain != null)\n+                hashCode ^= protectionDomain.hashCode();\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessControlContext.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+    @Override\n@@ -106,3 +107,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -110,1 +109,1 @@\n-\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/AllPermission.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-     * Returns the hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -224,2 +224,0 @@\n-     *\n-     * @return a hash code value for this object.\n","filename":"src\/java.base\/share\/classes\/java\/security\/BasicPermission.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,5 +109,1 @@\n-            if (timestamp == null) {\n-                myhash = signerCertPath.hashCode();\n-            } else {\n-                myhash = signerCertPath.hashCode() + timestamp.hashCode();\n-            }\n+            myhash = signerCertPath.hashCode() + Objects.hashCode(timestamp);\n@@ -135,7 +131,3 @@\n-        if (!(obj instanceof CodeSigner that)) {\n-            return false;\n-        }\n-\n-        if (!Objects.equals(timestamp, that.getTimestamp()))\n-            return false;\n-        return signerCertPath.equals(that.getSignerCertPath());\n+        return obj instanceof CodeSigner other\n+                && Objects.equals(timestamp, other.getTimestamp())\n+                && signerCertPath.equals(other.getSignerCertPath());\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSigner.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,3 +133,1 @@\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n+     * {@return the hash code value for this object}\n@@ -139,4 +137,1 @@\n-        if (location != null)\n-            return location.hashCode();\n-        else\n-            return 0;\n+        return Objects.hashCode(location);\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSource.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,0 +339,1 @@\n+    @Override\n@@ -481,3 +482,1 @@\n-     * Returns a hashcode for this {@code Identity}.\n-     *\n-     * @return a hashcode for this {@code Identity}.\n+     * {@return the hashcode for this {@code Identity}}\n@@ -485,0 +484,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/Identity.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,1 @@\n+    @Override\n@@ -185,1 +186,1 @@\n-                && that.getType().equals(this.type)\n+                && this.type.equals(that.getType())\n@@ -190,2 +191,2 @@\n-     * Returns the hashcode for this certification path. The hash code of\n-     * a certification path is defined to be the result of the following\n+     * {@return the hashcode value for this certification path} The hash code\n+     * of a certification path is defined to be the result of the following\n@@ -201,2 +202,0 @@\n-     *\n-     * @return the hashcode value for this certification path\n@@ -204,0 +203,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPath.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -86,0 +87,1 @@\n+    @Override\n@@ -95,5 +97,1 @@\n-            if (thisCRLEntry.length != otherCRLEntry.length)\n-                return false;\n-            for (int i = 0; i < thisCRLEntry.length; i++)\n-                 if (thisCRLEntry[i] != otherCRLEntry[i])\n-                     return false;\n+            return Arrays.equals(thisCRLEntry, otherCRLEntry);\n@@ -103,1 +101,0 @@\n-        return true;\n@@ -107,4 +104,2 @@\n-     * Returns a hashcode value for this CRL entry from its\n-     * encoded form.\n-     *\n-     * @return the hashcode value.\n+     * {@return the hashcode value for this CRL entry from its\n+     * encoded form}\n@@ -112,0 +107,1 @@\n+    @Override\n@@ -113,1 +109,0 @@\n-        int     retval = 0;\n@@ -115,4 +110,1 @@\n-            byte[] entryData = this.getEncoded();\n-            for (int i = 1; i < entryData.length; i++)\n-                 retval += entryData[i] * i;\n-\n+            return Arrays.hashCode(this.getEncoded());\n@@ -120,1 +112,1 @@\n-            return(retval);\n+            return 0;\n@@ -122,1 +114,0 @@\n-        return(retval);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CRLEntry.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,1 @@\n+    @Override\n@@ -229,3 +230,1 @@\n-     * Returns a hash code value for this characteristic 2\n-     * finite field.\n-     * @return a hash code value.\n+     * {@return the hash code value for this characteristic 2 finite field}\n@@ -233,0 +232,1 @@\n+    @Override\n@@ -235,0 +235,2 @@\n+        \/\/ consider simplifying using Objects.hashCode(rp) after JDK-8015417\n+        \/\/ has been resolved:\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECFieldF2m.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,1 @@\n+    @Override\n@@ -106,2 +107,1 @@\n-     * Returns a hash code value for this elliptic curve point.\n-     * @return a hash code value.\n+     * {@return the hash code value for this elliptic curve point}\n@@ -109,0 +109,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECPoint.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-     * {@return a hashcode value for this PKCS10Attributes}\n+     * {@return the hashcode value for this PKCS10Attributes}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs10\/PKCS10Attributes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1130,4 +1130,2 @@\n-            if (! (obj instanceof PermissionEntry that))\n-                return false;\n-\n-            return Objects.equals(this.permission, that.permission)\n+            return obj instanceof PermissionEntry that\n+                    && Objects.equals(this.permission, that.permission)\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicyParser.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -233,5 +233,2 @@\n-        if (obj instanceof ResponderId respObj) {\n-            return Arrays.equals(encodedRid, respObj.getEncoded());\n-        }\n-\n-        return false;\n+        return obj instanceof ResponderId respObj\n+                && Arrays.equals(encodedRid, respObj.getEncoded());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ResponderId.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -184,3 +184,4 @@\n-        if (!(obj instanceof BitArray other)) return false;\n-        if (length != other.length) return false;\n-        return Arrays.equals(repn, other.repn);\n+\n+        return obj instanceof BitArray other\n+                && length == other.length\n+                && Arrays.equals(repn, other.repn);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/BitArray.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -174,5 +174,7 @@\n-    public boolean equals(Object other) {\n-        if (!(other instanceof EDIPartyName))\n-            return false;\n-        return Objects.equals(this.assigner, ((EDIPartyName)other).assigner)\n-                && Objects.equals(this.party, ((EDIPartyName)other).party);\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+\n+        return obj instanceof EDIPartyName other\n+                && Objects.equals(this.assigner, other.assigner)\n+                && Objects.equals(this.party, other.party);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/EDIPartyName.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-     * @param other GeneralSubtree to compare to this\n+     * @param obj GeneralSubtree to compare to this\n@@ -156,8 +156,8 @@\n-    public boolean equals(Object other) {\n-        if (!(other instanceof GeneralSubtree otherGS))\n-            return false;\n-        if (!Objects.equals(this.name, otherGS.name))\n-            return false;\n-        if (this.minimum != otherGS.minimum)\n-            return false;\n-        return this.maximum == otherGS.maximum;\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+\n+        return obj instanceof GeneralSubtree other\n+                && Objects.equals(this.name, other.name)\n+                && this.minimum == other.minimum\n+                && this.maximum == other.maximum;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/GeneralSubtree.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}