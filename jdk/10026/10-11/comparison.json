{"files":[{"patch":"@@ -40,1 +40,1 @@\n-import com.sun.hotspot.igv.view.actions.MouseCenteredZoomAction;\n+import com.sun.hotspot.igv.view.actions.MouseZoomAction;\n@@ -64,1 +64,0 @@\n-import org.openide.util.Utilities;\n@@ -99,2 +98,0 @@\n-\n-\n@@ -104,1 +101,1 @@\n-    public static final float ZOOM_MAX_FACTOR = 3.0f;\n+    public static final float ZOOM_MAX_FACTOR = 4.0f;\n@@ -164,2 +161,2 @@\n-    public void zoomIn(Point zoomCenter) {\n-        centredZoom(getZoomFactor() * ZOOM_INCREMENT, zoomCenter);\n+    public void zoomIn(Point zoomCenter, double factor) {\n+        centredZoom(getZoomFactor() * factor, zoomCenter);\n@@ -169,2 +166,2 @@\n-    public void zoomOut(Point zoomCenter) {\n-        centredZoom(getZoomFactor() \/ ZOOM_INCREMENT, zoomCenter);\n+    public void zoomOut(Point zoomCenter, double factor) {\n+        centredZoom(getZoomFactor() \/ factor, zoomCenter);\n@@ -311,1 +308,1 @@\n-    private JScrollPane createScrollPane() {\n+    private JScrollPane createScrollPane(MouseZoomAction mouseZoomAction) {\n@@ -330,2 +327,0 @@\n-\n-\n@@ -334,1 +329,0 @@\n-\n@@ -342,37 +336,1 @@\n-\n-        scrollPane.addMouseWheelListener(new MouseWheelListener() {\n-            private final int modifiers = Utilities.isMac() ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK;\n-            @Override\n-            public void mouseWheelMoved(MouseWheelEvent event) {\n-                if ((event.getModifiersEx() & modifiers) != modifiers) {\n-                    \/\/ If modifier key is not pressed, use wheel for panning\n-                    JComponent view = DiagramScene.this.getView();\n-                    Rectangle visibleRect = view.getVisibleRect();\n-                    int amount = event.getWheelRotation() * 64;\n-                    switch (event.getModifiers() & 11) {\n-                        case 0:\n-                            visibleRect.y += amount;\n-                            break;\n-                        case 1:\n-                            visibleRect.x += amount;\n-                            break;\n-                        default:\n-                            return;\n-                    }\n-                    view.scrollRectToVisible(visibleRect);\n-                    return;\n-                }\n-\n-                Rectangle visibleRect = DiagramScene.this.getView().getVisibleRect();\n-                Point zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n-                zoomCenter = DiagramScene.this.convertViewToScene(zoomCenter);\n-\n-                int n = event.getWheelRotation();\n-                if (n > 0) {\n-                    DiagramScene.this.zoomOut(null);\n-                } else if (n < 0) {\n-                    DiagramScene.this.zoomIn(null);\n-                }\n-            }\n-        });\n-\n+        scrollPane.addMouseWheelListener(mouseZoomAction);\n@@ -480,1 +438,2 @@\n-        scrollPane = createScrollPane();\n+        MouseZoomAction mouseZoomAction = new MouseZoomAction(this);\n+        scrollPane = createScrollPane(mouseZoomAction);\n@@ -530,1 +489,1 @@\n-        this.getActions().addAction( new MouseCenteredZoomAction(this));\n+        this.getActions().addAction(mouseZoomAction);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":11,"deletions":52,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    void zoomOut(Point zoomCenter);\n+    void zoomOut(Point zoomCenter, double speed);\n@@ -62,1 +62,1 @@\n-    void zoomIn(Point zoomCenter);\n+    void zoomIn(Point zoomCenter, double speed);\n@@ -82,0 +82,1 @@\n+    JComponent getView();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        scene.zoomOut(null);\n+        scene.zoomOut(null, DiagramScene.ZOOM_INCREMENT);\n@@ -279,1 +279,1 @@\n-        scene.zoomIn(null);\n+        scene.zoomIn(null, DiagramScene.ZOOM_INCREMENT);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.view.actions;\n-\n-import com.sun.hotspot.igv.view.DiagramScene;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.event.KeyEvent;\n-import javax.swing.JComponent;\n-import org.netbeans.api.visual.action.WidgetAction;\n-import org.netbeans.api.visual.widget.Widget;\n-import org.openide.util.Utilities;\n-\n-\n-public class MouseCenteredZoomAction extends WidgetAction.Adapter {\n-\n-    private static final int modifiers = Utilities.isMac() ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK;\n-    private final DiagramScene scene;\n-\n-    public MouseCenteredZoomAction(DiagramScene scene) {\n-        this.prev_n = 0;\n-        this.scene = scene;\n-    }\n-\n-    private int prev_n;\n-    @Override\n-    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n-        if ((event.getModifiersEx() & modifiers) != modifiers) {\n-            \/\/ If modifier key is not pressed, use wheel for panning\n-            JComponent view = scene.getView();\n-            Rectangle visibleRect = view.getVisibleRect();\n-            int amount = event.getWheelRotation() * 64;\n-            switch (event.getModifiers() & 11) {\n-                case 0:\n-                    visibleRect.y += amount;\n-                    break;\n-                case 1:\n-                    visibleRect.x += amount;\n-                    break;\n-                default:\n-                    return State.REJECTED;\n-            }\n-            view.scrollRectToVisible(visibleRect);\n-            return State.CONSUMED;\n-        }\n-\n-        Point mouseLocation = widget.convertLocalToScene(event.getPoint());\n-        int n = event.getWheelRotation();\n-        if (n > 0) {\n-            if (prev_n == n) {\n-                scene.zoomOut(mouseLocation);\n-            } else {\n-                prev_n = n;\n-            }\n-        } else if (n < 0) {\n-            if (prev_n == n) {\n-                scene.zoomIn(mouseLocation);\n-            } else {\n-                prev_n = n;\n-            }\n-        }\n-        return State.CONSUMED;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/MouseCenteredZoomAction.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.DiagramScene;\n+import com.sun.hotspot.igv.view.DiagramViewer;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import javax.swing.JComponent;\n+import org.netbeans.api.visual.action.WidgetAction;\n+import org.netbeans.api.visual.widget.Widget;\n+import org.openide.util.Utilities;\n+\n+\n+public class MouseZoomAction extends WidgetAction.Adapter implements MouseWheelListener {\n+\n+    private static final int MODIFIER = Utilities.isMac() ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK;\n+    private final DiagramViewer scene;\n+    private int prev_n;\n+\n+    public MouseZoomAction(DiagramScene scene) {\n+        this.prev_n = 0;\n+        this.scene = scene;\n+    }\n+\n+    private boolean performPanning(int modifiersEx, int wheelRotation) {\n+        \/\/ If modifier key is not pressed, use wheel for panning\n+        JComponent view = scene.getView();\n+        Rectangle visibleRect = view.getVisibleRect();\n+        int amount = wheelRotation * 32;\n+        if (modifiersEx == 0) {\n+            visibleRect.y += amount;\n+        } else if (modifiersEx == InputEvent.SHIFT_DOWN_MASK) {\n+            visibleRect.x += amount;\n+        } else {\n+            return false;\n+        }\n+        view.scrollRectToVisible(visibleRect);\n+        return true;\n+    }\n+\n+    private boolean performZooming(Point sceneMouseLocation, int n) {\n+        if (n > 0) {\n+            if (prev_n > 0) {\n+                scene.zoomOut(sceneMouseLocation, Math.pow(1.1, Math.abs(n)));\n+                return true;\n+            } else {\n+                prev_n = 1;\n+            }\n+        } else if (n < 0) {\n+            if (prev_n < 0) {\n+                scene.zoomIn(sceneMouseLocation, Math.pow(1.1, Math.abs(n)));\n+                return true;\n+            } else {\n+                prev_n = -1;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Perform mouse centered zooming\n+     *\/\n+    @Override\n+    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n+        if ((event.getModifiersEx() & MODIFIER) != MODIFIER) {\n+            \/\/ If modifier key is not pressed, use wheel for panning\n+            if (performPanning(event.getModifiersEx(), event.getWheelRotation())) {\n+                return State.CONSUMED;\n+            } else {\n+                return State.REJECTED;\n+            }\n+        }\n+\n+        Point sceneMouseLocation = widget.convertLocalToScene(event.getPoint());\n+        int n = event.getWheelRotation();\n+        if (performZooming(sceneMouseLocation, n)) {\n+            return State.CONSUMED;\n+        } else {\n+            return State.REJECTED;\n+        }\n+    }\n+\n+    \/**\n+     * Perform scene centered zooming\n+     *\/\n+    @Override\n+    public void mouseWheelMoved(MouseWheelEvent event) {\n+        if ((event.getModifiersEx() & MODIFIER) != MODIFIER) {\n+            \/\/ If modifier key is not pressed, use wheel for panning\n+            performPanning(event.getModifiersEx(), event.getWheelRotation());\n+        } else {\n+            performZooming(null, event.getWheelRotation());\n+        }\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/MouseZoomAction.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -36,1 +36,1 @@\n-    private static final String[] CHOICES = { \"25%\", \"50%\", \"75%\", \"100%\", \"125%\", \"150%\",\"200%\",\"300%\"};\n+    private static final String[] CHOICES = { \"25%\", \"50%\", \"75%\", \"100%\", \"125%\", \"150%\",\"200%\",\"300%\", \"400%\"};\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomLevelAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}