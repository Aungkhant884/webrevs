{"files":[{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view;\n+\n+import java.awt.EventQueue;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import javax.swing.JViewport;\n+import org.netbeans.api.visual.animator.Animator;\n+import org.netbeans.api.visual.animator.AnimatorEvent;\n+import org.netbeans.api.visual.animator.AnimatorListener;\n+import org.netbeans.api.visual.animator.SceneAnimator;\n+\n+public class CustomZoomAnimator extends Animator implements AnimatorListener {\n+    private volatile double sourceZoom;\n+    private volatile double targetZoom;\n+    private volatile Point zoomCenter;\n+    private volatile double oldZoom;\n+    private volatile Rectangle visibleRect;\n+    private DiagramViewer diagramViewer;\n+\n+    public CustomZoomAnimator(DiagramViewer viewer, SceneAnimator sceneAnimator) {\n+        super(sceneAnimator);\n+        this.diagramViewer = viewer;\n+        super.addAnimatorListener(this);\n+    }\n+\n+    public synchronized void animateZoomFactor(double zoomFactor, Point zoomCenter) {\n+        if (this.isRunning()) {\n+            if (this.sourceZoom < this.targetZoom && this.targetZoom < zoomFactor) {\n+                this.targetZoom = zoomFactor;\n+            } else if (this.sourceZoom > this.targetZoom && this.targetZoom > zoomFactor) {\n+                this.targetZoom = zoomFactor;\n+            }\n+        } else {\n+            this.targetZoom = zoomFactor;\n+            this.sourceZoom = this.getScene().getZoomFactor();\n+            this.oldZoom = this.sourceZoom;\n+            this.visibleRect = this.getScene().getView().getVisibleRect();\n+            if (zoomCenter == null) {\n+                this.zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n+                this.zoomCenter =  this.getScene().convertViewToScene(this.zoomCenter);\n+            } else {\n+                this.zoomCenter = zoomCenter;\n+            }\n+            this.start();\n+        }\n+    }\n+\n+    public synchronized double getTargetZoom() {\n+        if (this.isRunning()) {\n+            return this.targetZoom;\n+        } else {\n+            return this.getScene().getZoomFactor();\n+        }\n+    }\n+\n+    private synchronized void do_tick(double progress) {\n+        double newZoom = progress >= 1.0 ? this.targetZoom : this.sourceZoom + progress * (this.targetZoom - this.sourceZoom);\n+        this.getScene().setZoomFactor(newZoom);\n+        this.getScene().validate();\n+\n+        Point location = this.getScene().getLocation();\n+        visibleRect.x += (int)(newZoom * (double)(location.x + this.zoomCenter.x)) - (int)(this.oldZoom * (double)(location.x + this.zoomCenter.x));\n+        visibleRect.y += (int)(newZoom * (double)(location.y + this.zoomCenter.y)) - (int)(this.oldZoom * (double)(location.y + this.zoomCenter.y));\n+\n+        \/\/ Ensure to be within area\n+        visibleRect.x = Math.max(0, visibleRect.x);\n+        visibleRect.y = Math.max(0, visibleRect.y);\n+\n+        this.getScene().getView().scrollRectToVisible(visibleRect);\n+        this.oldZoom = newZoom;\n+    }\n+\n+    @Override\n+    public void animatorStarted(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n+    public void animatorPreTick(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n+    public void tick(double progress) {\n+        EventQueue.invokeLater(()->this.do_tick(progress));\n+    }\n+\n+    @Override\n+    public void animatorPostTick(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n+    public void animatorFinished(AnimatorEvent animatorEvent) {\n+        this.diagramViewer.getZoomChangedEvent().fire();\n+    }\n+\n+    @Override\n+    public void animatorReset(AnimatorEvent animatorEvent) {}\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/CustomZoomAnimator.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -26,5 +26,2 @@\n-import com.sun.hotspot.igv.data.ChangedListener;\n-import com.sun.hotspot.igv.data.ControllableChangedListener;\n-import com.sun.hotspot.igv.data.InputBlock;\n-import com.sun.hotspot.igv.data.InputNode;\n-import com.sun.hotspot.igv.data.Pair;\n+\n+import com.sun.hotspot.igv.data.*;\n@@ -32,1 +29,1 @@\n-import com.sun.hotspot.igv.data.services.Scheduler;\n+import com.sun.hotspot.igv.data.*;\n@@ -34,1 +31,0 @@\n-import com.sun.hotspot.igv.hierarchicallayout.HierarchicalClusterLayoutManager;\n@@ -36,1 +32,1 @@\n-import com.sun.hotspot.igv.hierarchicallayout.LinearLayoutManager;\n+import com.sun.hotspot.igv.hierarchicallayout.HierarchicalClusterLayoutManager;\n@@ -38,0 +34,1 @@\n+import com.sun.hotspot.igv.hierarchicallayout.LinearLayoutManager;\n@@ -39,1 +36,0 @@\n-import com.sun.hotspot.igv.layout.Link;\n@@ -42,1 +38,0 @@\n-import com.sun.hotspot.igv.util.CustomSelectAction;\n@@ -45,0 +40,1 @@\n+import com.sun.hotspot.igv.view.actions.CustomSelectAction;\n@@ -46,1 +42,1 @@\n-import com.sun.hotspot.igv.view.EditorTopComponent;\n+import com.sun.hotspot.igv.view.actions.MouseCenteredZoomAction;\n@@ -53,0 +49,2 @@\n+import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;\n+import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;\n@@ -58,0 +56,2 @@\n+import org.netbeans.api.visual.animator.AnimatorEvent;\n+import org.netbeans.api.visual.animator.AnimatorListener;\n@@ -68,0 +68,1 @@\n+import org.openide.util.Utilities;\n@@ -70,1 +71,0 @@\n-import org.openide.util.Utilities;\n@@ -90,2 +90,0 @@\n-    private Widget topLeft;\n-    private Widget bottomRight;\n@@ -96,0 +94,2 @@\n+    private CustomZoomAnimator zoomAnimator = new CustomZoomAnimator(this, this.getSceneAnimator());\n+\n@@ -99,1 +99,1 @@\n-    public static final float ALPHA = 0.4f;\n+    private static final float ALPHA = 0.4f;\n@@ -104,11 +104,9 @@\n-    public static final int BORDER_SIZE = 20;\n-\n-\n-    public static final int UNDOREDO_LIMIT = 100;\n-    public static final int SCROLL_UNIT_INCREMENT = 80;\n-    public static final int SCROLL_BLOCK_INCREMENT = 400;\n-    public static final float ZOOM_MAX_FACTOR = 3.0f;\n-    public static final float ZOOM_MIN_FACTOR = 0.0f;\/\/0.15f;\n-    public static final float ZOOM_INCREMENT = 1.5f;\n-    public static final int SLOT_OFFSET = 8;\n-    public static final int ANIMATION_LIMIT = 40;\n+    private static final int BORDER_SIZE = 20;\n+    private static final int UNDOREDO_LIMIT = 100;\n+    private static final int SCROLL_UNIT_INCREMENT = 80;\n+    private static final int SCROLL_BLOCK_INCREMENT = 400;\n+    private static final double ZOOM_MAX_FACTOR = 4.0;\n+    private static final double ZOOM_MIN_FACTOR = 0.1;\n+    private static final double ZOOM_INCREMENT = 1.3;\n+    private static final int SLOT_OFFSET = 8;\n+    private static final int ANIMATION_LIMIT = 40;\n@@ -147,0 +145,4 @@\n+    public static float getAlpha() {\n+        return DiagramScene.ALPHA;\n+    }\n+\n@@ -156,0 +158,15 @@\n+    private double getZoomMinFactor() {\n+        double factorWidth = getScrollPane().getViewport().getViewRect().getWidth() \/ getBounds().getWidth() ;\n+        double factorHeight = getScrollPane().getViewport().getViewRect().getHeight() \/ getBounds().getHeight();\n+        double zoomToFit = 0.98 * Math.min(factorWidth, factorHeight);\n+        zoomToFit = Math.max(zoomToFit, this.ZOOM_MIN_FACTOR);\n+        zoomToFit = Math.min(zoomToFit, 1.0);\n+        return zoomToFit;\n+    }\n+\n+    private double getZoomMaxFactor() {\n+        return this.ZOOM_MAX_FACTOR;\n+    }\n+\n+\n+\n@@ -157,6 +174,2 @@\n-    public void zoomOut() {\n-        double zoom = getZoomFactor();\n-        double newZoom = zoom \/ DiagramScene.ZOOM_INCREMENT;\n-        if (newZoom > DiagramScene.ZOOM_MIN_FACTOR) {\n-            zoom(newZoom);\n-        }\n+    public void zoomIn(Point zoomCenter) {\n+        animatedZoom(this.zoomAnimator.getTargetZoom() * ZOOM_INCREMENT, zoomCenter);\n@@ -166,1 +179,3 @@\n-    public void zoomIn() {\n+    public void zoomOut(Point zoomCenter) {\n+        animatedZoom(this.zoomAnimator.getTargetZoom() \/ ZOOM_INCREMENT, zoomCenter);\n+    }\n@@ -168,5 +183,30 @@\n-        double zoom = getZoomFactor();\n-        double newZoom = zoom * DiagramScene.ZOOM_INCREMENT;\n-        if (newZoom < DiagramScene.ZOOM_MAX_FACTOR) {\n-            zoom(newZoom);\n-        }\n+    @Override\n+    public void setZoomLevel(int percentage) {\n+        this.animatedZoom((double)percentage \/ 100.0, null);\n+    }\n+\n+    @Override\n+    public int getZoomLevel() {\n+        return (int)(zoomAnimator.getTargetZoom() * 100.0);\n+    }\n+\n+    private void animatedZoom(double newZoom, Point zoomCenter) {\n+        newZoom = Math.max(newZoom, this.getZoomMinFactor());\n+        newZoom = Math.min(newZoom,  this.getZoomMaxFactor());\n+        this.zoomAnimator.animateZoomFactor(newZoom, zoomCenter);\n+    }\n+\n+    private ChangedEvent<DiagramViewer> zoomChangedEvent = new ChangedEvent<>(this);\n+\n+    @Override\n+    public ChangedEvent<DiagramViewer> getZoomChangedEvent() {\n+        return zoomChangedEvent;\n+    }\n+\n+    @Override\n+    public void zoomIn() {\n+        animatedZoom(this.zoomAnimator.getTargetZoom() * ZOOM_INCREMENT, null);\n+    }\n+    @Override\n+    public void zoomOut() {\n+        animatedZoom(this.zoomAnimator.getTargetZoom() \/ ZOOM_INCREMENT, null);\n@@ -176,7 +216,16 @@\n-        double currentZoom = getZoomFactor();\n-        Point viewPosition = getScrollPane().getViewport().getViewPosition();\n-        Rectangle viewRect = getScrollPane().getViewport().getViewRect();\n-        setZoomFactor(newZoom);\n-        validate();\n-        getScrollPane().getViewport().validate();\n-        getScrollPane().getViewport().setViewPosition(new Point((int) ((viewPosition.x + viewRect.width \/ 2) * newZoom \/ currentZoom - viewRect.width \/ 2), (int) ((viewPosition.y + viewRect.height \/ 2) * newZoom \/ currentZoom - viewRect.height \/ 2)));\n+        Rectangle visibleRect = this.getView().getVisibleRect();\n+        double oldZoom = this.getZoomFactor();\n+\n+        newZoom = Math.max(newZoom, this.getZoomMinFactor());\n+        newZoom = Math.min(newZoom,  this.getZoomMaxFactor());\n+        this.setZoomFactor(newZoom);\n+        this.validate();\n+\n+        Point zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n+        visibleRect.x += (int)(newZoom \/ oldZoom * (double)zoomCenter.x) - zoomCenter.x;\n+        visibleRect.y += (int)(newZoom \/ oldZoom * (double)zoomCenter.y) - zoomCenter.y;\n+\n+        this.getView().scrollRectToVisible(visibleRect);\n+        this.validate();\n+\n+        this.zoomChangedEvent.fire();\n@@ -187,1 +236,0 @@\n-\n@@ -278,4 +326,4 @@\n-        JComponent comp = this.createView();\n-        comp.setDoubleBuffered(true);\n-        comp.setBackground(Color.WHITE);\n-        comp.setOpaque(true);\n+        JComponent viewComponent = this.createView();\n+        viewComponent.setDoubleBuffered(true);\n+        viewComponent.setBackground(Color.WHITE);\n+        viewComponent.setOpaque(true);\n@@ -284,7 +332,55 @@\n-        JScrollPane result = new JScrollPane(comp);\n-        result.setBackground(Color.WHITE);\n-        result.getVerticalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n-        result.getVerticalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n-        result.getHorizontalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n-        result.getHorizontalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n-        return result;\n+        JPanel centeringPanel = new JPanel(new GridBagLayout());\n+        centeringPanel.setBackground(Color.WHITE);\n+        centeringPanel.setOpaque(true);\n+        centeringPanel.add(viewComponent);\n+        JScrollPane scrollPane = new JScrollPane(centeringPanel,  VERTICAL_SCROLLBAR_ALWAYS, HORIZONTAL_SCROLLBAR_ALWAYS);\n+        scrollPane.setBackground(Color.WHITE);\n+        scrollPane.getVerticalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n+        scrollPane.getVerticalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n+        scrollPane.getHorizontalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n+        scrollPane.getHorizontalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n+\n+        \/\/ remove the default MouseWheelListener of the JScrollPane\n+        for (MouseWheelListener listener: scrollPane.getMouseWheelListeners()) {\n+            scrollPane.removeMouseWheelListener(listener);\n+        }\n+\n+        \/\/ add a new MouseWheelListener for zooming if the mouse is outside of the viewComponent\n+        \/\/ but still inside of the scrollPane\n+        scrollPane.addMouseWheelListener(new MouseWheelListener() {\n+            private int modifiers = Utilities.isMac() ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK;\n+            @Override\n+            public void mouseWheelMoved(MouseWheelEvent event) {\n+                if ((event.getModifiers() & modifiers) != modifiers) {\n+                    \/\/ If modifier key is not pressed, use wheel for panning\n+                    JComponent view = DiagramScene.this.getView();\n+                    Rectangle visibleRect = view.getVisibleRect();\n+                    int amount = event.getWheelRotation() * 64;\n+                    switch (event.getModifiers() & 11) {\n+                        case 0:\n+                            visibleRect.y += amount;\n+                            break;\n+                        case 1:\n+                            visibleRect.x += amount;\n+                            break;\n+                        default:\n+                            return;\n+                    }\n+                    view.scrollRectToVisible(visibleRect);\n+                    return;\n+                }\n+\n+                Rectangle visibleRect = DiagramScene.this.getView().getVisibleRect();\n+                Point zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n+                zoomCenter = DiagramScene.this.convertViewToScene(zoomCenter);\n+\n+                int n = event.getWheelRotation();\n+                if (n > 0) {\n+                    DiagramScene.this.zoomOut(zoomCenter);\n+                } else if (n < 0) {\n+                    DiagramScene.this.zoomIn(zoomCenter);\n+                }\n+            }\n+        });\n+\n+        return scrollPane;\n@@ -439,8 +535,1 @@\n-        topLeft = new Widget(this);\n-        topLeft.setPreferredLocation(new Point(-BORDER_SIZE, -BORDER_SIZE));\n-        this.addChild(topLeft);\n-\n-        bottomRight = new Widget(this);\n-        bottomRight.setPreferredLocation(new Point(-BORDER_SIZE, -BORDER_SIZE));\n-        this.addChild(bottomRight);\n-\n+        this.setBorder(BorderFactory.createLineBorder(Color.white, BORDER_SIZE));\n@@ -448,2 +537,1 @@\n-        this.getInputBindings().setZoomActionModifiers(Utilities.isMac() ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK);\n-        this.getActions().addAction(ActionFactory.createMouseCenteredZoomAction(1.1));\n+        this.getActions().addAction(new MouseCenteredZoomAction(this));\n@@ -451,1 +539,0 @@\n-        this.getActions().addAction(ActionFactory.createWheelPanAction());\n@@ -740,57 +827,0 @@\n-        int maxX = -BORDER_SIZE;\n-        int maxY = -BORDER_SIZE;\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            if (w.isVisible()) {\n-                Point p = f.getPosition();\n-                Dimension d = f.getSize();\n-                maxX = Math.max(maxX, p.x + d.width);\n-                maxY = Math.max(maxY, p.y + d.height);\n-            }\n-        }\n-\n-        for (FigureConnection c : diagram.getConnections()) {\n-            List<Point> points = c.getControlPoints();\n-            FigureWidget w1 = getWidget((Figure) c.getTo().getVertex());\n-            FigureWidget w2 = getWidget((Figure) c.getFrom().getVertex());\n-            if (w1.isVisible() && w2.isVisible()) {\n-                for (Point p : points) {\n-                    if (p != null) {\n-                        maxX = Math.max(maxX, p.x);\n-                        maxY = Math.max(maxY, p.y);\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (getModel().getShowBlocks() || getModel().getShowCFG()) {\n-            for (Block b : diagram.getBlocks()) {\n-                BlockWidget w = getWidget(b.getInputBlock());\n-                if (w != null && w.isVisible()) {\n-                    Rectangle r = b.getBounds();\n-                    maxX = Math.max(maxX, r.x + r.width);\n-                    maxY = Math.max(maxY, r.y + r.height);\n-                }\n-            }\n-        }\n-\n-        bottomRight.setPreferredLocation(new Point(maxX + BORDER_SIZE, maxY + BORDER_SIZE));\n-        int offx = 0;\n-        int offy = 0;\n-        int curWidth = maxX + 2 * BORDER_SIZE;\n-        int curHeight = maxY + 2 * BORDER_SIZE;\n-\n-        Rectangle bounds = this.getScrollPane().getBounds();\n-        bounds.width \/= getZoomFactor();\n-        bounds.height \/= getZoomFactor();\n-        if (curWidth < bounds.width) {\n-            offx = (bounds.width - curWidth) \/ 2;\n-        }\n-\n-        if (curHeight < bounds.height) {\n-            offy = (bounds.height - curHeight) \/ 2;\n-        }\n-\n-        final int offx2 = offx;\n-        final int offy2 = offy;\n-\n@@ -819,1 +849,1 @@\n-                processOutputSlot(lastLineCache, s, cl, 0, null, null, offx2, offy2, anim);\n+                processOutputSlot(lastLineCache, s, cl, 0, null, null, 0, 0, anim);\n@@ -826,1 +856,1 @@\n-                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, offx2, offy2, animator);\n+                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, 0, 0, animator);\n@@ -835,1 +865,1 @@\n-                Point p2 = new Point(p.x + offx2, p.y + offy2);\n+                Point p2 = new Point(p.x, p.y);\n@@ -849,1 +879,1 @@\n-                    Point location = new Point(b.getBounds().x + offx2, b.getBounds().y + offy2);\n+                    Point location = new Point(b.getBounds().x, b.getBounds().y);\n@@ -1063,15 +1093,0 @@\n-    private Point calcCenter(Rectangle r) {\n-\n-        Point center = new Point((int) r.getCenterX(), (int) r.getCenterY());\n-        center.x -= getScrollPane().getViewport().getViewRect().width \/ 2;\n-        center.y -= getScrollPane().getViewport().getViewRect().height \/ 2;\n-\n-        \/\/ Ensure to be within area\n-        center.x = Math.max(0, center.x);\n-        center.x = Math.min(getScrollPane().getViewport().getViewSize().width - getScrollPane().getViewport().getViewRect().width, center.x);\n-        center.y = Math.max(0, center.y);\n-        center.y = Math.min(getScrollPane().getViewport().getViewSize().height - getScrollPane().getViewport().getViewRect().height, center.y);\n-\n-        return center;\n-    }\n-\n@@ -1079,0 +1094,2 @@\n+        Rectangle rect = convertSceneToView(r);\n+        Rectangle viewRect = getScrollPane().getViewport().getViewRect();\n@@ -1080,2 +1097,7 @@\n-        if (getScrollPane().getViewport().getViewRect().width == 0 || getScrollPane().getViewport().getViewRect().height == 0) {\n-            return;\n+        double factor = Math.min(viewRect.getWidth() \/ rect.getWidth(),  viewRect.getHeight() \/ rect.getHeight());\n+        if (factor < 1.0) {\n+            zoom(getZoomFactor() * factor);\n+            rect.x *= factor;\n+            rect.y *= factor;\n+            rect.width *= factor;\n+            rect.height *= factor;\n@@ -1084,17 +1106,10 @@\n-        Rectangle r2 = new Rectangle(r.x, r.y, r.width, r.height);\n-        r2 = convertSceneToView(r2);\n-\n-        double factorX = (double) r2.width \/ (double) getScrollPane().getViewport().getViewRect().width;\n-        double factorY = (double) r2.height \/ (double) getScrollPane().getViewport().getViewRect().height;\n-        double factor = Math.max(factorX, factorY);\n-        if (factor >= 1.0) {\n-            Point p = getScrollPane().getViewport().getViewPosition();\n-            setZoomFactor(getZoomFactor() \/ factor);\n-            r2.x \/= factor;\n-            r2.y \/= factor;\n-            r2.width \/= factor;\n-            r2.height \/= factor;\n-            getScrollPane().getViewport().setViewPosition(calcCenter(r2));\n-        } else {\n-            getScrollPane().getViewport().setViewPosition(calcCenter(r2));\n-        }\n+        viewRect.x = rect.x + rect.width \/ 2 - viewRect.width \/ 2;\n+        viewRect.y = rect.y + rect.height \/ 2 - viewRect.height \/ 2;\n+\n+        \/\/ Ensure to be within area\n+        viewRect.x = Math.max(0, viewRect.x);\n+        viewRect.x = Math.min(getScrollPane().getViewport().getViewSize().width - viewRect.width, viewRect.x);\n+        viewRect.y = Math.max(0, viewRect.y);\n+        viewRect.y = Math.min(getScrollPane().getViewport().getViewSize().height - viewRect.height, viewRect.y);\n+\n+        this.getView().scrollRectToVisible(viewRect);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":178,"deletions":163,"binary":false,"changes":341,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -28,3 +29,2 @@\n-import java.awt.Component;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n+\n+import java.awt.*;\n@@ -41,1 +41,1 @@\n-interface DiagramViewer {\n+public interface DiagramViewer {\n@@ -58,0 +58,2 @@\n+    public void zoomOut(Point zoomCenter);\n+\n@@ -60,0 +62,8 @@\n+    public void zoomIn(Point zoomCenter);\n+\n+    public void setZoomLevel(int percentage);\n+\n+    public int getZoomLevel();\n+\n+    public ChangedEvent<DiagramViewer> getZoomChangedEvent();\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -260,2 +260,0 @@\n-        toolBar.add(ShowAllAction.get(ZoomOutAction.class));\n-        toolBar.add(ShowAllAction.get(ZoomInAction.class));\n@@ -263,0 +261,1 @@\n+        toolBar.add(new ZoomLevelAction(scene));\n@@ -413,0 +412,4 @@\n+    public void setZoomLevel(int percentage) {\n+        scene.setZoomLevel(percentage);\n+    }\n+\n@@ -432,1 +435,5 @@\n-        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        try {\n+            return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        } catch (Exception e) {\n+            return null;\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package com.sun.hotspot.igv.util;\n+package com.sun.hotspot.igv.view.actions;\n@@ -67,1 +67,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/CustomSelectAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.DiagramScene;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JComponent;\n+import org.netbeans.api.visual.action.WidgetAction;\n+import org.netbeans.api.visual.widget.Widget;\n+import org.openide.util.Utilities;\n+\n+\n+public class MouseCenteredZoomAction extends WidgetAction.Adapter {\n+\n+    private static int modifiers = Utilities.isMac() ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK;\n+    private DiagramScene scene;\n+\n+    public MouseCenteredZoomAction(DiagramScene scene) {\n+        this.scene = scene;\n+    }\n+\n+    @Override\n+    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n+        if ((event.getModifiers() & modifiers) != modifiers) {\n+            \/\/ If modifier key is not pressed, use wheel for panning\n+            JComponent view = this.scene.getView();\n+            Rectangle visibleRect = view.getVisibleRect();\n+            int amount = event.getWheelRotation() * 64;\n+            switch (event.getModifiers() & 11) {\n+                case 0:\n+                    visibleRect.y += amount;\n+                    break;\n+                case 1:\n+                    visibleRect.x += amount;\n+                    break;\n+                default:\n+                    return State.REJECTED;\n+            }\n+            view.scrollRectToVisible(visibleRect);\n+            return State.CONSUMED;\n+        }\n+\n+        Point mouseLocation = widget.convertLocalToScene(event.getPoint());\n+        int n = event.getWheelRotation();\n+        if (n > 0) {\n+            this.scene.zoomOut(mouseLocation);\n+        } else if (n < 0) {\n+            this.scene.zoomIn(mouseLocation);\n+        }\n+        return State.CONSUMED;\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/MouseCenteredZoomAction.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -55,2 +55,0 @@\n-        \/\/ D is the Control key on most platforms, the Command (meta) key on Macintosh\n-        putValue(Action.ACCELERATOR_KEY, Utilities.stringToKey(\"D-EQUALS\"));\n@@ -72,1 +70,1 @@\n-        return \"com\/sun\/hotspot\/igv\/view\/images\/zoom_in.png\";\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomIn.svg\"; \/\/ NOI18N\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomInAction.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.view.DiagramViewer;\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import javax.swing.*;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+\n+public final class ZoomLevelAction extends JComboBox<String> implements ChangedListener<DiagramViewer> {\n+\n+    private static String[] choices = { \"25%\", \"50%\", \"75%\", \"100%\", \"125%\", \"150%\",\"200%\",\"300%\"};\n+\n+    private DiagramViewer diagramScene;\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.requestActive();\n+        }\n+\n+        String levelStr = (String)this.getSelectedItem();\n+        levelStr = levelStr.replaceAll(\"\\\\s\",\"\");\n+        levelStr = levelStr.replaceFirst(\"%\",\"\");\n+        try{\n+            int level = Integer.parseInt(levelStr);\n+            if (level > 0 && level < 1000) {\n+                this.setZoomLevel(level);\n+            } else {\n+                this.setZoomLevel(100);\n+            }\n+        } catch(NumberFormatException exception){\n+            this.setZoomLevel(100);\n+        }\n+    }\n+\n+    public ZoomLevelAction(DiagramViewer scene) {\n+        super();\n+        this.setModel(new DefaultComboBoxModel<>(this.choices));\n+        this.setSelectedIndex(3); \/\/ init value: 100%\n+        this.addActionListener(this);\n+        this.setVisible(true);\n+        this.setEditable(true);\n+        this.setUI(new BasicComboBoxUI());\n+        this.setFont(this.getFont().deriveFont((float)(this.getFont().getSize2D()*0.9)));\n+        JTextField text = (JTextField) this.getEditor().getEditorComponent();\n+        text.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));\n+        text.setColumns(3);\n+        this.setMaximumSize(this.getPreferredSize());\n+\n+        this.diagramScene = scene;\n+        scene.getZoomChangedEvent().addListener(this);\n+    }\n+\n+    private void setZoomLevel(int zoomLevel) {\n+        this.setSelectedItem(zoomLevel + \"%\");\n+        diagramScene.setZoomLevel(zoomLevel);\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewer diagramViewer) {\n+        this.setSelectedItem(diagramViewer.getZoomLevel() + \"%\");\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomLevelAction.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -51,2 +51,0 @@\n-        \/\/ D is the Control key on most platforms, the Command (meta) key on Macintosh\n-        putValue(Action.ACCELERATOR_KEY, Utilities.stringToKey(\"D-MINUS\"));\n@@ -72,1 +70,1 @@\n-        return \"com\/sun\/hotspot\/igv\/view\/images\/zoom_out.png\";\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomOut.svg\"; \/\/ NOI18N\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomOutAction.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import javax.swing.Action;\n+import org.openide.util.HelpCtx;\n+import org.openide.util.actions.CallableSystemAction;\n+\n+public final class ZoomResetAction extends CallableSystemAction {\n+\n+    @Override\n+    public void performAction() {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.setZoomLevel(100);\n+        }\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Reset zoom (100%)\";\n+    }\n+\n+    public ZoomResetAction() {\n+        putValue(Action.SHORT_DESCRIPTION, \"Reset zoom to 100%\");\n+    }\n+\n+    @Override\n+    public HelpCtx getHelpCtx() {\n+        return HelpCtx.DEFAULT_HELP;\n+    }\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected String iconResource() {\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomReset.svg\"; \/\/ NOI18N\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomResetAction.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -247,1 +247,1 @@\n-            float alpha = DiagramScene.ALPHA;\n+            float alpha = DiagramScene.getAlpha();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/FigureWidget.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomIn.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"64.1875\"\n+   inkscape:cx=\"3.5443038\"\n+   inkscape:cy=\"8.3583252\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"82\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+<line\n+   class=\"st18\"\n+   x1=\"6.6498079\"\n+   y1=\"3.85517\"\n+   x2=\"6.6498079\"\n+   y2=\"9.9234934\"\n+   id=\"line23\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-width:1.398;stroke-dasharray:none;stroke-linecap:round\" \/>\n+<line\n+   class=\"st18\"\n+   x1=\"3.7348101\"\n+   y1=\"6.7376232\"\n+   x2=\"9.8716478\"\n+   y2=\"6.7376232\"\n+   id=\"line25\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-linecap:round\" \/><line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomIn.svg","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomIn.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"64.1875\"\n+   inkscape:cx=\"3.5443038\"\n+   inkscape:cy=\"8.3583252\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"82\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+\n+<line\n+   class=\"st18\"\n+   x1=\"3.7348101\"\n+   y1=\"6.7376232\"\n+   x2=\"9.8716478\"\n+   y2=\"6.7376232\"\n+   id=\"line25\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-linecap:round\" \/><line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomOut.svg","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomReset.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"36.320439\"\n+   inkscape:cx=\"2.2163829\"\n+   inkscape:cy=\"6.8694104\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"25\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/><ellipse\n+   class=\"st6\"\n+   cx=\"6.7592793\"\n+   cy=\"6.7868128\"\n+   id=\"circle19-5\"\n+   style=\"fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.227052;stroke-opacity:1\"\n+   rx=\"1.3970011\"\n+   ry=\"1.3284868\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+\n+<line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomReset.svg","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -26,0 +26,12 @@\n+        <file name=\"D-MINUS.shadow\">\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ZoomOutAction.instance\"\/>\n+        <\/file>\n+        <file name=\"DS-MINUS.shadow\">\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ZoomInAction.instance\"\/>\n+        <\/file>\n+        <file name=\"D-EQUALS.shadow\">\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ZoomInAction.instance\"\/>\n+        <\/file>\n+        <file name=\"D-0.shadow\">\n+            <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ZoomResetAction.instance\"\/>\n+        <\/file>\n@@ -46,0 +58,1 @@\n+            <file name=\"com-sun-hotspot-igv-view-actions-ZoomResetAction.instance\"><attr name=\"position\" intvalue=\"2001\"\/><\/file>\n@@ -90,1 +103,5 @@\n-                <attr name=\"position\" intvalue=\"450\"\/>\n+                <attr name=\"position\" intvalue=\"550\"\/>\n+            <\/file>\n+            <file name=\"com-sun-hotspot-igv-view-actions-ZoomResetAction.shadow\">\n+                <attr name=\"originalFile\" stringvalue=\"Actions\/View\/com-sun-hotspot-igv-view-actions-ZoomResetAction.instance\"\/>\n+                <attr name=\"position\" intvalue=\"600\"\/>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/layer.xml","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}