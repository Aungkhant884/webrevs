{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import org.netbeans.api.visual.animator.AnimatorEvent;\n+import org.netbeans.api.visual.animator.AnimatorListener;\n@@ -33,1 +35,1 @@\n-public class CustomZoomAnimator extends Animator {\n+public class CustomZoomAnimator extends Animator implements AnimatorListener {\n@@ -39,0 +41,1 @@\n+    private DiagramViewer diagramViewer;\n@@ -40,1 +43,1 @@\n-    public CustomZoomAnimator(SceneAnimator sceneAnimator) {\n+    public CustomZoomAnimator(DiagramViewer viewer, SceneAnimator sceneAnimator) {\n@@ -42,0 +45,2 @@\n+        this.diagramViewer = viewer;\n+        super.addAnimatorListener(this);\n@@ -87,0 +92,7 @@\n+    @Override\n+    public void animatorStarted(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n+    public void animatorPreTick(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n@@ -90,0 +102,11 @@\n+\n+    @Override\n+    public void animatorPostTick(AnimatorEvent animatorEvent) {}\n+\n+    @Override\n+    public void animatorFinished(AnimatorEvent animatorEvent) {\n+        this.diagramViewer.getZoomChangedEvent().fire();\n+    }\n+\n+    @Override\n+    public void animatorReset(AnimatorEvent animatorEvent) {}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/CustomZoomAnimator.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\n+import com.sun.hotspot.igv.data.*;\n@@ -54,0 +56,2 @@\n+import org.netbeans.api.visual.animator.AnimatorEvent;\n+import org.netbeans.api.visual.animator.AnimatorListener;\n@@ -90,2 +94,1 @@\n-    private CustomZoomAnimator zoomAnimator = new CustomZoomAnimator(this.getSceneAnimator());;\n-\n+    private CustomZoomAnimator zoomAnimator = new CustomZoomAnimator(this, this.getSceneAnimator());\n@@ -155,1 +158,1 @@\n-    private double getZoomToFitFactor() {\n+    private double getZoomMinFactor() {\n@@ -158,5 +161,1 @@\n-        return Math.min(factorWidth, factorHeight);\n-    }\n-\n-    private double getZoomMinFactor() {\n-        double zoomToFit = 0.98 * this.getZoomToFitFactor();\n+        double zoomToFit = 0.98 * Math.min(factorWidth, factorHeight);\n@@ -172,0 +171,2 @@\n+\n+\n@@ -173,2 +174,2 @@\n-    public void zoomOut() {\n-        zoom(1.0 \/ ZOOM_INCREMENT);\n+    public void zoomIn(Point zoomCenter) {\n+        animatedZoom(this.zoomAnimator.getTargetZoom() * ZOOM_INCREMENT, zoomCenter);\n@@ -179,1 +180,1 @@\n-        animatedZoom(1.0 \/ ZOOM_INCREMENT, zoomCenter);\n+        animatedZoom(this.zoomAnimator.getTargetZoom() \/ ZOOM_INCREMENT, zoomCenter);\n@@ -183,2 +184,5 @@\n-    public void zoomIn() {\n-        zoom(ZOOM_INCREMENT);\n+    public void setZoomLevel(int percentage) {\n+        Rectangle visibleRect = this.getView().getVisibleRect();\n+        Point zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n+        zoomCenter = this.convertViewToScene(zoomCenter);\n+        this.zoomAnimator.animateZoomFactor((double)percentage \/ 100.0, zoomCenter);\n@@ -188,2 +192,8 @@\n-    public void zoomIn(Point zoomCenter) {\n-        animatedZoom(ZOOM_INCREMENT, zoomCenter);\n+    public int getZoomLevel() {\n+        return (int)(zoomAnimator.getTargetZoom() * 100.0);\n+    }\n+\n+    private void animatedZoom(double newZoom, Point zoomCenter) {\n+        newZoom = Math.max(newZoom, this.getZoomMinFactor());\n+        newZoom = Math.min(newZoom,  this.getZoomMaxFactor());\n+        this.zoomAnimator.animateZoomFactor(newZoom, zoomCenter);\n@@ -192,0 +202,2 @@\n+    private ChangedEvent<DiagramViewer> zoomChangedEvent = new ChangedEvent<>(this);\n+\n@@ -193,5 +205,2 @@\n-    public void zoomLevel(int percentage) {\n-        Rectangle visibleRect = this.getView().getVisibleRect();\n-        Point zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n-        zoomCenter = this.convertViewToScene(zoomCenter);\n-        this.zoomAnimator.animateZoomFactor((double)percentage \/ 100.0, zoomCenter);\n+    public ChangedEvent<DiagramViewer> getZoomChangedEvent() {\n+        return zoomChangedEvent;\n@@ -200,2 +209,8 @@\n-    private void zoom(double zoomMultiplier) {\n-        Rectangle visibleRect = this.getView().getVisibleRect();\n+    @Override\n+    public void zoomIn() {\n+        zoom(this.getZoomFactor() * ZOOM_INCREMENT);\n+    }\n+    @Override\n+    public void zoomOut() {\n+        zoom(this.getZoomFactor() \/ ZOOM_INCREMENT);\n+    }\n@@ -203,0 +218,2 @@\n+    private void zoom(double newZoom) {\n+        Rectangle visibleRect = this.getView().getVisibleRect();\n@@ -204,1 +221,1 @@\n-        double newZoom = oldZoom * zoomMultiplier;\n+\n@@ -216,1 +233,0 @@\n-    }\n@@ -218,5 +234,1 @@\n-    private void animatedZoom(double zoomMultiplier, Point zoomCenter) {\n-        double zoomFactor = this.zoomAnimator.getTargetZoom() * zoomMultiplier;\n-        zoomFactor = Math.max(zoomFactor, this.getZoomMinFactor());\n-        zoomFactor = Math.min(zoomFactor,  this.getZoomMaxFactor());\n-        this.zoomAnimator.animateZoomFactor(zoomFactor, zoomCenter);\n+        this.zoomChangedEvent.fire();\n@@ -1090,1 +1102,1 @@\n-            setZoomFactor(getZoomFactor() * factor);\n+            zoom(getZoomFactor() * factor);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":42,"deletions":30,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -40,1 +41,1 @@\n-interface DiagramViewer {\n+public interface DiagramViewer {\n@@ -63,1 +64,5 @@\n-    public void zoomLevel(int percentage);\n+    public void setZoomLevel(int percentage);\n+\n+    public int getZoomLevel();\n+\n+    public ChangedEvent<DiagramViewer> getZoomChangedEvent();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -260,2 +260,0 @@\n-        toolBar.add(ShowAllAction.get(ZoomOutAction.class));\n-        toolBar.add(ShowAllAction.get(ZoomInAction.class));\n@@ -263,0 +261,1 @@\n+        toolBar.add(new ZoomLevelAction(scene));\n@@ -413,2 +412,2 @@\n-    public void zoomLevel(int percentage) {\n-        scene.zoomLevel(percentage);\n+    public void setZoomLevel(int percentage) {\n+        scene.setZoomLevel(percentage);\n@@ -436,1 +435,5 @@\n-        return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        try {\n+            return (EditorTopComponent) EditorTopComponent.getRegistry().getActivated();\n+        } catch (Exception e) {\n+            return null;\n+        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.view.DiagramViewer;\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import javax.swing.*;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+\n+public final class ZoomLevelAction extends JComboBox<String> implements ChangedListener<DiagramViewer> {\n+\n+    private static String[] choices = { \"25%\", \"50%\", \"75%\", \"100%\", \"125%\", \"150%\",\"200%\",\"300%\"};\n+\n+    private DiagramViewer diagramScene;\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.requestActive();\n+        }\n+\n+        String levelStr = (String)this.getSelectedItem();\n+        levelStr = levelStr.replaceAll(\"\\\\s\",\"\");\n+        levelStr = levelStr.replaceFirst(\"%\",\"\");\n+        try{\n+            int level = Integer.parseInt(levelStr);\n+            if (level > 0 && level < 1000) {\n+                this.setZoomLevel(level);\n+            } else {\n+                this.setZoomLevel(100);\n+            }\n+        } catch(NumberFormatException exception){\n+            this.setZoomLevel(100);\n+        }\n+    }\n+\n+    public ZoomLevelAction(DiagramViewer scene) {\n+        super();\n+        this.setModel(new DefaultComboBoxModel<>(this.choices));\n+        this.setSelectedIndex(3); \/\/ init value: 100%\n+        this.addActionListener(this);\n+        this.setVisible(true);\n+        this.setEditable(true);\n+        this.setUI(new BasicComboBoxUI());\n+        this.setFont(this.getFont().deriveFont((float)(this.getFont().getSize2D()*0.9)));\n+        JTextField text = (JTextField) this.getEditor().getEditorComponent();\n+        text.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));\n+        text.setColumns(3);\n+        this.setMaximumSize(this.getPreferredSize());\n+\n+        this.diagramScene = scene;\n+        scene.getZoomChangedEvent().addListener(this);\n+    }\n+\n+    private void setZoomLevel(int zoomLevel) {\n+        this.setSelectedItem(zoomLevel + \"%\");\n+        diagramScene.setZoomLevel(zoomLevel);\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewer diagramViewer) {\n+        this.setSelectedItem(diagramViewer.getZoomLevel() + \"%\");\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomLevelAction.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-            editor.zoomLevel(100);\n+            editor.setZoomLevel(100);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomResetAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}