{"files":[{"patch":"@@ -1,182 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.util;\n-\n-import java.awt.Container;\n-import java.awt.Dimension;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import javax.swing.JComponent;\n-import javax.swing.JScrollPane;\n-import org.netbeans.api.visual.action.WidgetAction;\n-import org.netbeans.api.visual.action.WidgetAction.State;\n-import org.netbeans.api.visual.action.WidgetAction.WidgetMouseWheelEvent;\n-import org.netbeans.api.visual.animator.SceneAnimator;\n-import org.netbeans.api.visual.widget.Scene;\n-import org.netbeans.api.visual.widget.Widget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class BoundedZoomAction extends WidgetAction.Adapter {\n-\n-    private double minFactor = 0.0;\n-    private double maxFactor = Double.MAX_VALUE;\n-    private double zoomMultiplier;\n-    private boolean useAnimator;\n-\n-    public BoundedZoomAction(double zoomMultiplier, boolean useAnimator) {\n-        this.zoomMultiplier = zoomMultiplier;\n-        this.useAnimator = useAnimator;\n-    }\n-\n-    public double getMinFactor() {\n-        return minFactor;\n-    }\n-\n-    public void setMinFactor(double d) {\n-        minFactor = d;\n-    }\n-\n-    public double getMaxFactor() {\n-        return maxFactor;\n-    }\n-\n-    public void setMaxFactor(double d) {\n-        maxFactor = d;\n-    }\n-\n-    private JScrollPane findScrollPane(JComponent component) {\n-        for (;;) {\n-            if (component == null) {\n-                return null;\n-            }\n-            if (component instanceof JScrollPane) {\n-                return ((JScrollPane) component);\n-            }\n-            Container parent = component.getParent();\n-            if (!(parent instanceof JComponent)) {\n-                return null;\n-            }\n-            component = (JComponent) parent;\n-        }\n-    }\n-\n-    @Override\n-    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n-        final Scene scene = widget.getScene();\n-        int amount = event.getWheelRotation();\n-        JScrollPane scrollPane = findScrollPane(scene.getView());\n-        Point viewPosition = null;\n-        Point mouseLocation = scene.convertSceneToView(event.getPoint());\n-        int xOffset = 0;\n-        int yOffset = 0;\n-        Point oldViewPosition = null;\n-        Rectangle bounds = new Rectangle(scene.getBounds());\n-        Dimension componentSize = new Dimension(scene.getView().getPreferredSize());\n-\n-        if (scrollPane != null) {\n-            viewPosition = new Point(scrollPane.getViewport().getViewPosition());\n-            oldViewPosition = new Point(viewPosition);\n-            xOffset = (mouseLocation.x - viewPosition.x);\n-            yOffset = (mouseLocation.y - viewPosition.y);\n-            viewPosition.x += xOffset;\n-            viewPosition.y += yOffset;\n-        }\n-\n-        if (useAnimator) {\n-            SceneAnimator sceneAnimator = scene.getSceneAnimator();\n-            synchronized (sceneAnimator) {\n-                double zoom = sceneAnimator.isAnimatingZoomFactor() ? sceneAnimator.getTargetZoomFactor() : scene.getZoomFactor();\n-                while (amount > 0 && zoom \/ zoomMultiplier >= minFactor && zoom \/ zoomMultiplier <= maxFactor) {\n-                    zoom \/= zoomMultiplier;\n-                    if (viewPosition != null) {\n-                        viewPosition.x \/= zoomMultiplier;\n-                        viewPosition.y \/= zoomMultiplier;\n-                        bounds.width \/= zoomMultiplier;\n-                        bounds.height \/= zoomMultiplier;\n-                        componentSize.width \/= zoomMultiplier;\n-                        componentSize.height \/= zoomMultiplier;\n-                    }\n-                    amount--;\n-                }\n-                while (amount < 0 && zoom * zoomMultiplier >= minFactor && zoom * zoomMultiplier <= maxFactor) {\n-                    zoom *= zoomMultiplier;\n-                    if (viewPosition != null) {\n-                        viewPosition.x *= zoomMultiplier;\n-                        viewPosition.y *= zoomMultiplier;\n-                        bounds.width *= zoomMultiplier;\n-                        bounds.height *= zoomMultiplier;\n-                        componentSize.width *= zoomMultiplier;\n-                        componentSize.height *= zoomMultiplier;\n-                    }\n-                    amount++;\n-                }\n-                sceneAnimator.animateZoomFactor(zoom);\n-            }\n-        } else {\n-            double zoom = scene.getZoomFactor();\n-            while (amount > 0 && zoom \/ zoomMultiplier >= minFactor && zoom \/ zoomMultiplier <= maxFactor) {\n-                zoom \/= zoomMultiplier;\n-                if (viewPosition != null) {\n-                    viewPosition.x \/= zoomMultiplier;\n-                    viewPosition.y \/= zoomMultiplier;\n-                    bounds.width \/= zoomMultiplier;\n-                    bounds.height \/= zoomMultiplier;\n-                    componentSize.width \/= zoomMultiplier;\n-                    componentSize.height \/= zoomMultiplier;\n-                }\n-                amount--;\n-            }\n-            while (amount < 0 && zoom * zoomMultiplier >= minFactor && zoom * zoomMultiplier <= maxFactor) {\n-                zoom *= zoomMultiplier;\n-                if (viewPosition != null) {\n-                    viewPosition.x *= zoomMultiplier;\n-                    viewPosition.y *= zoomMultiplier;\n-                    bounds.width *= zoomMultiplier;\n-                    bounds.height *= zoomMultiplier;\n-                    componentSize.width *= zoomMultiplier;\n-                    componentSize.height *= zoomMultiplier;\n-                }\n-                amount++;\n-            }\n-            scene.setZoomFactor(zoom);\n-        }\n-\n-        if (scrollPane != null) {\n-            scene.validate(); \/\/ Call validate to update size of scene\n-            Dimension size = scrollPane.getViewport().getExtentSize();\n-            viewPosition.x -= xOffset;\n-            viewPosition.y -= yOffset;\n-            scene.resolveBounds(scene.getLocation(), bounds);\n-            scene.getView().setPreferredSize(componentSize);\n-            scene.getView().revalidate();\n-            scene.getView().addNotify();\n-            scrollPane.getViewport().setViewPosition(viewPosition);\n-        }\n-\n-        return WidgetAction.State.CONSUMED;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/Util\/src\/main\/java\/com\/sun\/hotspot\/igv\/util\/BoundedZoomAction.java","additions":0,"deletions":182,"binary":false,"changes":182,"status":"deleted"},{"patch":"@@ -1,175 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.view;\n-\n-import java.awt.Container;\n-import java.awt.Dimension;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import javax.swing.JComponent;\n-import javax.swing.JScrollPane;\n-import org.netbeans.api.visual.action.WidgetAction;\n-import org.netbeans.api.visual.action.WidgetAction.State;\n-import org.netbeans.api.visual.action.WidgetAction.WidgetMouseWheelEvent;\n-import org.netbeans.api.visual.animator.SceneAnimator;\n-import org.netbeans.api.visual.widget.Scene;\n-import org.netbeans.api.visual.widget.Widget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class BoundedZoomAction extends WidgetAction.Adapter {\n-\n-    private double minFactor = 0.0;\n-    private double maxFactor = Double.MAX_VALUE;\n-    private double zoomMultiplier;\n-    private boolean useAnimator;\n-\n-    public BoundedZoomAction(double zoomMultiplier, boolean useAnimator) {\n-        assert zoomMultiplier > 1.0;\n-        this.zoomMultiplier = zoomMultiplier;\n-        this.useAnimator = useAnimator;\n-    }\n-\n-    public double getMinFactor() {\n-        return minFactor;\n-    }\n-\n-    public void setMinFactor(double d) {\n-        minFactor = d;\n-    }\n-\n-    public double getMaxFactor() {\n-        return maxFactor;\n-    }\n-\n-    public void setMaxFactor(double d) {\n-        maxFactor = d;\n-    }\n-\n-    private JScrollPane findScrollPane(JComponent component) {\n-        for (;;) {\n-            if (component == null) {\n-                return null;\n-            }\n-            if (component instanceof JScrollPane) {\n-                return ((JScrollPane) component);\n-            }\n-            Container parent = component.getParent();\n-            if (!(parent instanceof JComponent)) {\n-                return null;\n-            }\n-            component = (JComponent) parent;\n-        }\n-    }\n-\n-    @Override\n-    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n-        final Scene scene = widget.getScene();\n-        int amount = event.getWheelRotation();\n-        JScrollPane scrollPane = findScrollPane(scene.getView());\n-        Point viewPosition = null;\n-        Point mouseLocation = scene.convertSceneToView(event.getPoint());\n-        int xOffset = 0;\n-        int yOffset = 0;\n-        Rectangle bounds = new Rectangle(scene.getBounds());\n-        Dimension componentSize = new Dimension(scene.getView().getPreferredSize());\n-        if (scrollPane != null) {\n-            viewPosition = new Point(scrollPane.getViewport().getViewPosition());\n-            xOffset = (mouseLocation.x - viewPosition.x);\n-            yOffset = (mouseLocation.y - viewPosition.y);\n-            viewPosition.x += xOffset;\n-            viewPosition.y += yOffset;\n-        }\n-\n-        if (useAnimator) {\n-            SceneAnimator sceneAnimator = scene.getSceneAnimator();\n-            synchronized (sceneAnimator) {\n-                double zoom = sceneAnimator.isAnimatingZoomFactor() ? sceneAnimator.getTargetZoomFactor() : scene.getZoomFactor();\n-                while (amount > 0 && zoom \/ zoomMultiplier >= minFactor) {\n-                    zoom \/= zoomMultiplier;\n-                    if (viewPosition != null) {\n-                        viewPosition.x \/= zoomMultiplier;\n-                        viewPosition.y \/= zoomMultiplier;\n-                        bounds.width \/= zoomMultiplier;\n-                        bounds.height \/= zoomMultiplier;\n-                        componentSize.width \/= zoomMultiplier;\n-                        componentSize.height \/= zoomMultiplier;\n-                    }\n-                    amount--;\n-                }\n-                while (amount < 0 && zoom * zoomMultiplier <= maxFactor) {\n-                    zoom *= zoomMultiplier;\n-                    if (viewPosition != null) {\n-                        viewPosition.x *= zoomMultiplier;\n-                        viewPosition.y *= zoomMultiplier;\n-                        bounds.width *= zoomMultiplier;\n-                        bounds.height *= zoomMultiplier;\n-                        componentSize.width *= zoomMultiplier;\n-                        componentSize.height *= zoomMultiplier;\n-                    }\n-                    amount++;\n-                }\n-                sceneAnimator.animateZoomFactor(zoom);\n-            }\n-        } else {\n-            double zoom = scene.getZoomFactor();\n-            while (amount > 0 && zoom \/ zoomMultiplier >= minFactor) {\n-                zoom \/= zoomMultiplier;\n-                if (viewPosition != null) {\n-                    viewPosition.x \/= zoomMultiplier;\n-                    viewPosition.y \/= zoomMultiplier;\n-                    bounds.width \/= zoomMultiplier;\n-                    bounds.height \/= zoomMultiplier;\n-                    componentSize.width \/= zoomMultiplier;\n-                    componentSize.height \/= zoomMultiplier;\n-                }\n-                amount--;\n-            }\n-            while (amount < 0 && zoom * zoomMultiplier <= maxFactor) {\n-                zoom *= zoomMultiplier;\n-                if (viewPosition != null) {\n-                    viewPosition.x *= zoomMultiplier;\n-                    viewPosition.y *= zoomMultiplier;\n-                    bounds.width *= zoomMultiplier;\n-                    bounds.height *= zoomMultiplier;\n-                    componentSize.width *= zoomMultiplier;\n-                    componentSize.height *= zoomMultiplier;\n-                }\n-                amount++;\n-            }\n-            scene.setZoomFactor(zoom);\n-        }\n-\n-        if (scrollPane != null) {\n-            viewPosition.x -= xOffset;\n-            viewPosition.y -= yOffset;\n-            scrollPane.getViewport().setViewPosition(viewPosition);\n-        }\n-\n-\n-        return WidgetAction.State.CONSUMED;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/BoundedZoomAction.java","additions":0,"deletions":175,"binary":false,"changes":175,"status":"deleted"},{"patch":"@@ -40,0 +40,1 @@\n+import com.sun.hotspot.igv.view.actions.MouseZoomAction;\n@@ -42,3 +43,1 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.KeyEvent;\n-import java.awt.event.MouseEvent;\n+import java.awt.event.*;\n@@ -48,0 +47,2 @@\n+import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;\n+import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;\n@@ -63,1 +64,0 @@\n-import org.openide.util.Utilities;\n@@ -85,2 +85,0 @@\n-    private Widget topLeft;\n-    private Widget bottomRight;\n@@ -100,2 +98,0 @@\n-\n-\n@@ -105,2 +101,2 @@\n-    public static final float ZOOM_MAX_FACTOR = 3.0f;\n-    public static final float ZOOM_MIN_FACTOR = 0.0f;\/\/0.15f;\n+    public static final float ZOOM_MAX_FACTOR = 4.0f;\n+    public static final float ZOOM_MIN_FACTOR = 0.1f;\n@@ -151,0 +147,13 @@\n+    private double getZoomMinFactor() {\n+        double factorWidth = getScrollPane().getViewport().getViewRect().getWidth() \/ getBounds().getWidth() ;\n+        double factorHeight = getScrollPane().getViewport().getViewRect().getHeight() \/ getBounds().getHeight();\n+        double zoomToFit = 0.98 * Math.min(factorWidth, factorHeight);\n+        zoomToFit = Math.max(zoomToFit, ZOOM_MIN_FACTOR);\n+        zoomToFit = Math.min(zoomToFit, 1.0);\n+        return zoomToFit;\n+    }\n+\n+    private double getZoomMaxFactor() {\n+        return ZOOM_MAX_FACTOR;\n+    }\n+\n@@ -152,6 +161,2 @@\n-    public void zoomOut() {\n-        double zoom = getZoomFactor();\n-        double newZoom = zoom \/ DiagramScene.ZOOM_INCREMENT;\n-        if (newZoom > DiagramScene.ZOOM_MIN_FACTOR) {\n-            zoom(newZoom);\n-        }\n+    public void zoomIn(Point zoomCenter, double factor) {\n+        centredZoom(getZoomFactor() * factor, zoomCenter);\n@@ -161,1 +166,3 @@\n-    public void zoomIn() {\n+    public void zoomOut(Point zoomCenter, double factor) {\n+        centredZoom(getZoomFactor() \/ factor, zoomCenter);\n+    }\n@@ -163,5 +170,3 @@\n-        double zoom = getZoomFactor();\n-        double newZoom = zoom * DiagramScene.ZOOM_INCREMENT;\n-        if (newZoom < DiagramScene.ZOOM_MAX_FACTOR) {\n-            zoom(newZoom);\n-        }\n+    @Override\n+    public void setZoomPercentage(int percentage) {\n+        centredZoom((double)percentage \/ 100.0, null);\n@@ -170,5 +175,17 @@\n-    private void zoom(double newZoom) {\n-        double currentZoom = getZoomFactor();\n-        Point viewPosition = getScrollPane().getViewport().getViewPosition();\n-        Rectangle viewRect = getScrollPane().getViewport().getViewRect();\n-        setZoomFactor(newZoom);\n+    @Override\n+    public int getZoomPercentage() {\n+        return (int) (getZoomFactor() * 100);\n+    }\n+\n+    private void centredZoom(double zoomFactor, Point zoomCenter) {\n+        zoomFactor = Math.max(zoomFactor, getZoomMinFactor());\n+        zoomFactor = Math.min(zoomFactor,  getZoomMaxFactor());\n+\n+        double oldZoom = getZoomFactor();\n+        Rectangle visibleRect = getView().getVisibleRect();\n+        if (zoomCenter == null) {\n+            zoomCenter = new Point(visibleRect.x + visibleRect.width \/ 2, visibleRect.y + visibleRect.height \/ 2);\n+            zoomCenter =  getScene().convertViewToScene(zoomCenter);\n+        }\n+\n+        setZoomFactor(zoomFactor);\n@@ -176,2 +193,21 @@\n-        getScrollPane().getViewport().validate();\n-        getScrollPane().getViewport().setViewPosition(new Point((int) ((viewPosition.x + viewRect.width \/ 2) * newZoom \/ currentZoom - viewRect.width \/ 2), (int) ((viewPosition.y + viewRect.height \/ 2) * newZoom \/ currentZoom - viewRect.height \/ 2)));\n+\n+        Point location = getScene().getLocation();\n+        visibleRect.x += (int)(zoomFactor * (double)(location.x + zoomCenter.x)) - (int)(oldZoom * (double)(location.x + zoomCenter.x));\n+        visibleRect.y += (int)(zoomFactor * (double)(location.y + zoomCenter.y)) - (int)(oldZoom * (double)(location.y + zoomCenter.y));\n+\n+        \/\/ Ensure to be within area\n+        visibleRect.x = Math.max(0, visibleRect.x);\n+        visibleRect.y = Math.max(0, visibleRect.y);\n+\n+        \/\/ Fix for jumping during zooming\n+        getView().scrollRectToVisible(visibleRect);\n+        getView().scrollRectToVisible(visibleRect);\n+\n+        zoomChangedEvent.fire();\n+    }\n+\n+    private final ChangedEvent<DiagramViewer> zoomChangedEvent = new ChangedEvent<>(this);\n+\n+    @Override\n+    public ChangedEvent<DiagramViewer> getZoomChangedEvent() {\n+        return zoomChangedEvent;\n@@ -272,14 +308,30 @@\n-    private JScrollPane createScrollPane() {\n-        JComponent comp = this.createView();\n-        comp.setDoubleBuffered(true);\n-        comp.setBackground(Color.WHITE);\n-        comp.setOpaque(true);\n-        this.setBackground(Color.WHITE);\n-        this.setOpaque(true);\n-        JScrollPane result = new JScrollPane(comp);\n-        result.setBackground(Color.WHITE);\n-        result.getVerticalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n-        result.getVerticalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n-        result.getHorizontalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n-        result.getHorizontalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n-        return result;\n+    private JScrollPane createScrollPane(MouseZoomAction mouseZoomAction) {\n+        setBackground(Color.WHITE);\n+        setOpaque(true);\n+\n+        JComponent viewComponent = createView();\n+        viewComponent.setBackground(Color.WHITE);\n+        viewComponent.setOpaque(true);\n+\n+        JPanel centeringPanel = new JPanel(new GridBagLayout());\n+        centeringPanel.setBackground(Color.WHITE);\n+        centeringPanel.setOpaque(true);\n+        centeringPanel.add(viewComponent);\n+\n+        JScrollPane scrollPane = new JScrollPane(centeringPanel,  VERTICAL_SCROLLBAR_ALWAYS, HORIZONTAL_SCROLLBAR_ALWAYS);\n+        scrollPane.setBackground(Color.WHITE);\n+        scrollPane.getVerticalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n+        scrollPane.getVerticalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n+        scrollPane.getHorizontalScrollBar().setUnitIncrement(SCROLL_UNIT_INCREMENT);\n+        scrollPane.getHorizontalScrollBar().setBlockIncrement(SCROLL_BLOCK_INCREMENT);\n+        scrollPane.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);\n+\n+        \/\/ remove the default MouseWheelListener of the JScrollPane\n+        for (MouseWheelListener listener: scrollPane.getMouseWheelListeners()) {\n+            scrollPane.removeMouseWheelListener(listener);\n+        }\n+\n+        \/\/ add a new MouseWheelListener for zooming if the mouse is outside the viewComponent\n+        \/\/ but still inside the scrollPane\n+        scrollPane.addMouseWheelListener(mouseZoomAction);\n+        return scrollPane;\n@@ -386,1 +438,2 @@\n-        scrollPane = createScrollPane();\n+        MouseZoomAction mouseZoomAction = new MouseZoomAction(this);\n+        scrollPane = createScrollPane(mouseZoomAction);\n@@ -434,8 +487,1 @@\n-        topLeft = new Widget(this);\n-        topLeft.setPreferredLocation(new Point(-BORDER_SIZE, -BORDER_SIZE));\n-        this.addChild(topLeft);\n-\n-        bottomRight = new Widget(this);\n-        bottomRight.setPreferredLocation(new Point(-BORDER_SIZE, -BORDER_SIZE));\n-        this.addChild(bottomRight);\n-\n+        this.setBorder(BorderFactory.createLineBorder(Color.white, BORDER_SIZE));\n@@ -443,2 +489,1 @@\n-        this.getInputBindings().setZoomActionModifiers(Utilities.isMac() ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK);\n-        this.getActions().addAction(ActionFactory.createMouseCenteredZoomAction(1.1));\n+        this.getActions().addAction(mouseZoomAction);\n@@ -446,1 +491,0 @@\n-        this.getActions().addAction(ActionFactory.createWheelPanAction());\n@@ -735,57 +779,0 @@\n-        int maxX = -BORDER_SIZE;\n-        int maxY = -BORDER_SIZE;\n-        for (Figure f : diagram.getFigures()) {\n-            FigureWidget w = getWidget(f);\n-            if (w.isVisible()) {\n-                Point p = f.getPosition();\n-                Dimension d = f.getSize();\n-                maxX = Math.max(maxX, p.x + d.width);\n-                maxY = Math.max(maxY, p.y + d.height);\n-            }\n-        }\n-\n-        for (FigureConnection c : diagram.getConnections()) {\n-            List<Point> points = c.getControlPoints();\n-            FigureWidget w1 = getWidget((Figure) c.getTo().getVertex());\n-            FigureWidget w2 = getWidget((Figure) c.getFrom().getVertex());\n-            if (w1.isVisible() && w2.isVisible()) {\n-                for (Point p : points) {\n-                    if (p != null) {\n-                        maxX = Math.max(maxX, p.x);\n-                        maxY = Math.max(maxY, p.y);\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (getModel().getShowBlocks() || getModel().getShowCFG()) {\n-            for (Block b : diagram.getBlocks()) {\n-                BlockWidget w = getWidget(b.getInputBlock());\n-                if (w != null && w.isVisible()) {\n-                    Rectangle r = b.getBounds();\n-                    maxX = Math.max(maxX, r.x + r.width);\n-                    maxY = Math.max(maxY, r.y + r.height);\n-                }\n-            }\n-        }\n-\n-        bottomRight.setPreferredLocation(new Point(maxX + BORDER_SIZE, maxY + BORDER_SIZE));\n-        int offx = 0;\n-        int offy = 0;\n-        int curWidth = maxX + 2 * BORDER_SIZE;\n-        int curHeight = maxY + 2 * BORDER_SIZE;\n-\n-        Rectangle bounds = this.getScrollPane().getBounds();\n-        bounds.width \/= getZoomFactor();\n-        bounds.height \/= getZoomFactor();\n-        if (curWidth < bounds.width) {\n-            offx = (bounds.width - curWidth) \/ 2;\n-        }\n-\n-        if (curHeight < bounds.height) {\n-            offy = (bounds.height - curHeight) \/ 2;\n-        }\n-\n-        final int offx2 = offx;\n-        final int offy2 = offy;\n-\n@@ -814,1 +801,1 @@\n-                processOutputSlot(lastLineCache, s, cl, 0, null, null, offx2, offy2, anim);\n+                processOutputSlot(lastLineCache, s, cl, 0, null, null, 0, 0, anim);\n@@ -821,1 +808,1 @@\n-                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, offx2, offy2, animator);\n+                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, 0, 0, animator);\n@@ -830,1 +817,1 @@\n-                Point p2 = new Point(p.x + offx2, p.y + offy2);\n+                Point p2 = new Point(p.x, p.y);\n@@ -844,1 +831,1 @@\n-                    Point location = new Point(b.getBounds().x + offx2, b.getBounds().y + offy2);\n+                    Point location = new Point(b.getBounds().x, b.getBounds().y);\n@@ -970,10 +957,0 @@\n-    @Override\n-    public void initialize() {\n-        Figure f = getModel().getDiagramToView().getRootFigure();\n-        if (f != null) {\n-            setUndoRedoEnabled(false);\n-            gotoFigure(f);\n-            setUndoRedoEnabled(true);\n-        }\n-    }\n-\n@@ -1058,15 +1035,0 @@\n-    private Point calcCenter(Rectangle r) {\n-\n-        Point center = new Point((int) r.getCenterX(), (int) r.getCenterY());\n-        center.x -= getScrollPane().getViewport().getViewRect().width \/ 2;\n-        center.y -= getScrollPane().getViewport().getViewRect().height \/ 2;\n-\n-        \/\/ Ensure to be within area\n-        center.x = Math.max(0, center.x);\n-        center.x = Math.min(getScrollPane().getViewport().getViewSize().width - getScrollPane().getViewport().getViewRect().width, center.x);\n-        center.y = Math.max(0, center.y);\n-        center.y = Math.min(getScrollPane().getViewport().getViewSize().height - getScrollPane().getViewport().getViewRect().height, center.y);\n-\n-        return center;\n-    }\n-\n@@ -1074,3 +1036,9 @@\n-\n-        if (getScrollPane().getViewport().getViewRect().width == 0 || getScrollPane().getViewport().getViewRect().height == 0) {\n-            return;\n+        Rectangle rect = convertSceneToView(r);\n+        Rectangle viewRect = getScrollPane().getViewport().getViewRect();\n+        double factor = Math.min(viewRect.getWidth() \/ rect.getWidth(),  viewRect.getHeight() \/ rect.getHeight());\n+        if (factor < 1.0) {\n+            centredZoom(getZoomFactor() * factor, null);\n+            rect.x *= factor;\n+            rect.y *= factor;\n+            rect.width *= factor;\n+            rect.height *= factor;\n@@ -1078,0 +1046,8 @@\n+        viewRect.x = rect.x + rect.width \/ 2 - viewRect.width \/ 2;\n+        viewRect.y = rect.y + rect.height \/ 2 - viewRect.height \/ 2;\n+        \/\/ Ensure to be within area\n+        viewRect.x = Math.max(0, viewRect.x);\n+        viewRect.x = Math.min(getScrollPane().getViewport().getViewSize().width - viewRect.width, viewRect.x);\n+        viewRect.y = Math.max(0, viewRect.y);\n+        viewRect.y = Math.min(getScrollPane().getViewport().getViewSize().height - viewRect.height, viewRect.y);\n+        getView().scrollRectToVisible(viewRect);\n@@ -1079,17 +1055,0 @@\n-        Rectangle r2 = new Rectangle(r.x, r.y, r.width, r.height);\n-        r2 = convertSceneToView(r2);\n-\n-        double factorX = (double) r2.width \/ (double) getScrollPane().getViewport().getViewRect().width;\n-        double factorY = (double) r2.height \/ (double) getScrollPane().getViewport().getViewRect().height;\n-        double factor = Math.max(factorX, factorY);\n-        if (factor >= 1.0) {\n-            Point p = getScrollPane().getViewport().getViewPosition();\n-            setZoomFactor(getZoomFactor() \/ factor);\n-            r2.x \/= factor;\n-            r2.y \/= factor;\n-            r2.width \/= factor;\n-            r2.height \/= factor;\n-            getScrollPane().getViewport().setViewPosition(calcCenter(r2));\n-        } else {\n-            getScrollPane().getViewport().setViewPosition(calcCenter(r2));\n-        }\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":120,"deletions":161,"binary":false,"changes":281,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.hotspot.igv.data.ChangedEvent;\n@@ -30,0 +31,1 @@\n+import java.awt.Point;\n@@ -41,1 +43,1 @@\n-interface DiagramViewer {\n+public interface DiagramViewer {\n@@ -50,1 +52,1 @@\n-    public void paint(Graphics2D generator);\n+    void paint(Graphics2D generator);\n@@ -52,1 +54,1 @@\n-    public Lookup getLookup();\n+    Lookup getLookup();\n@@ -54,1 +56,1 @@\n-    public JComponent createSatelliteView();\n+    JComponent createSatelliteView();\n@@ -56,1 +58,1 @@\n-    public Component getComponent();\n+    Component getComponent();\n@@ -58,1 +60,1 @@\n-    public void zoomOut();\n+    void zoomOut(Point zoomCenter, double speed);\n@@ -60,1 +62,1 @@\n-    public void zoomIn();\n+    void zoomIn(Point zoomCenter, double speed);\n@@ -62,1 +64,3 @@\n-    public UndoRedo getUndoRedo();\n+    void setZoomPercentage(int percentage);\n+    int getZoomPercentage();\n+    ChangedEvent<DiagramViewer> getZoomChangedEvent();\n@@ -64,1 +68,1 @@\n-    public void componentHidden();\n+    UndoRedo getUndoRedo();\n@@ -66,1 +70,1 @@\n-    public void componentShowing();\n+    void componentHidden();\n@@ -68,1 +72,1 @@\n-    public void initialize();\n+    void componentShowing();\n@@ -70,1 +74,1 @@\n-    public void setSelection(Collection<Figure> list);\n+    void setSelection(Collection<Figure> list);\n@@ -72,1 +76,1 @@\n-    public void centerFigures(List<Figure> list);\n+    void centerFigures(List<Figure> list);\n@@ -74,1 +78,1 @@\n-    public void setInteractionMode(InteractionMode mode);\n+    void setInteractionMode(InteractionMode mode);\n@@ -76,1 +80,1 @@\n-    public Rectangle getBounds();\n+    Rectangle getBounds();\n@@ -78,0 +82,1 @@\n+    JComponent getView();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionListener;\n@@ -158,0 +160,10 @@\n+        \/\/ needed to update when the satellite component is moved\n+        satelliteComponent.addMouseMotionListener(new MouseMotionListener() {\n+            @Override\n+            public void mouseDragged(MouseEvent e) {\n+                centerPanel.repaint();\n+            }\n+\n+            @Override\n+            public void mouseMoved(MouseEvent e) {}\n+        });\n@@ -176,3 +188,0 @@\n-        toolBar.addSeparator();\n-        toolBar.add(ZoomOutAction.get(ZoomOutAction.class));\n-        toolBar.add(ZoomInAction.get(ZoomInAction.class));\n@@ -215,0 +224,2 @@\n+        toolBar.addSeparator();\n+        toolBar.add(new ZoomLevelAction(scene));\n@@ -264,1 +275,1 @@\n-        scene.zoomOut();\n+        scene.zoomOut(null, DiagramScene.ZOOM_INCREMENT);\n@@ -268,1 +279,5 @@\n-        scene.zoomIn();\n+        scene.zoomIn(null, DiagramScene.ZOOM_INCREMENT);\n+    }\n+\n+    public void setZoomLevel(int percentage) {\n+        scene.setZoomPercentage(percentage);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/CustomSelectAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.DiagramScene;\n+import com.sun.hotspot.igv.view.DiagramViewer;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import javax.swing.JComponent;\n+import org.netbeans.api.visual.action.WidgetAction;\n+import org.netbeans.api.visual.widget.Widget;\n+import org.openide.util.Utilities;\n+\n+\n+public class MouseZoomAction extends WidgetAction.Adapter implements MouseWheelListener {\n+\n+    private static final int MODIFIER = Utilities.isMac() ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK;\n+    private final DiagramViewer scene;\n+    private int prev_n;\n+\n+    public MouseZoomAction(DiagramScene scene) {\n+        this.prev_n = 0;\n+        this.scene = scene;\n+    }\n+\n+    private boolean performPanning(int modifiersEx, int wheelRotation) {\n+        \/\/ If modifier key is not pressed, use wheel for panning\n+        JComponent view = scene.getView();\n+        Rectangle visibleRect = view.getVisibleRect();\n+        int amount = wheelRotation * 32;\n+        if (modifiersEx == 0) {\n+            visibleRect.y += amount;\n+        } else if (modifiersEx == InputEvent.SHIFT_DOWN_MASK) {\n+            visibleRect.x += amount;\n+        } else {\n+            return false;\n+        }\n+        view.scrollRectToVisible(visibleRect);\n+        return true;\n+    }\n+\n+    private boolean performZooming(Point sceneMouseLocation, int n) {\n+        if (n > 0) {\n+            if (prev_n > 0) {\n+                scene.zoomOut(sceneMouseLocation, Math.pow(1.1, Math.abs(n)));\n+                return true;\n+            } else {\n+                prev_n = 1;\n+            }\n+        } else if (n < 0) {\n+            if (prev_n < 0) {\n+                scene.zoomIn(sceneMouseLocation, Math.pow(1.1, Math.abs(n)));\n+                return true;\n+            } else {\n+                prev_n = -1;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Perform mouse centered zooming\n+     *\/\n+    @Override\n+    public State mouseWheelMoved(Widget widget, WidgetMouseWheelEvent event) {\n+        if ((event.getModifiersEx() & MODIFIER) != MODIFIER) {\n+            \/\/ If modifier key is not pressed, use wheel for panning\n+            if (performPanning(event.getModifiersEx(), event.getWheelRotation())) {\n+                return State.CONSUMED;\n+            } else {\n+                return State.REJECTED;\n+            }\n+        }\n+\n+        Point sceneMouseLocation = widget.convertLocalToScene(event.getPoint());\n+        int n = event.getWheelRotation();\n+        if (performZooming(sceneMouseLocation, n)) {\n+            return State.CONSUMED;\n+        } else {\n+            return State.REJECTED;\n+        }\n+    }\n+\n+    \/**\n+     * Perform scene centered zooming\n+     *\/\n+    @Override\n+    public void mouseWheelMoved(MouseWheelEvent event) {\n+        if ((event.getModifiersEx() & MODIFIER) != MODIFIER) {\n+            \/\/ If modifier key is not pressed, use wheel for panning\n+            performPanning(event.getModifiersEx(), event.getWheelRotation());\n+        } else {\n+            performZooming(null, event.getWheelRotation());\n+        }\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/MouseZoomAction.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -45,1 +45,2 @@\n-        @ActionReference(path = \"Shortcuts\", name = \"D-EQUALS\")\n+        @ActionReference(path = \"Shortcuts\", name = \"D-EQUALS\"),\n+        @ActionReference(path = \"Shortcuts\", name = \"DS-MINUS\")\n@@ -87,1 +88,1 @@\n-        return \"com\/sun\/hotspot\/igv\/view\/images\/zoom_in.png\";\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomIn.svg\"; \/\/ NOI18N\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomInAction.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.data.ChangedListener;\n+import com.sun.hotspot.igv.view.DiagramViewer;\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import javax.swing.*;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+\n+public final class ZoomLevelAction extends JComboBox<String> implements ChangedListener<DiagramViewer> {\n+\n+    private static final String[] CHOICES = { \"25%\", \"50%\", \"75%\", \"100%\", \"125%\", \"150%\",\"200%\",\"300%\", \"400%\"};\n+\n+    private final DiagramViewer diagramScene;\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.requestActive();\n+        }\n+\n+        String levelStr = (String) getSelectedItem();\n+        assert levelStr != null;\n+        levelStr = levelStr.replaceAll(\"\\\\s\",\"\");\n+        levelStr = levelStr.replaceFirst(\"%\",\"\");\n+        try{\n+            int level = Integer.parseInt(levelStr);\n+            if (level > 0 && level < 1000) {\n+                setZoomLevel(level);\n+            } else {\n+                setZoomLevel(100);\n+            }\n+        } catch(NumberFormatException exception){\n+            setZoomLevel(100);\n+        }\n+    }\n+\n+    public ZoomLevelAction(DiagramViewer scene) {\n+        diagramScene = scene;\n+\n+        setModel(new DefaultComboBoxModel<>(CHOICES));\n+        setSelectedIndex(3); \/\/ init value: 100%\n+        setVisible(true);\n+        setEditable(true);\n+        setUI(new BasicComboBoxUI());\n+        setFont(getFont().deriveFont((float)(getFont().getSize2D()*0.9)));\n+        addActionListener(this);\n+\n+        JTextField text = (JTextField) getEditor().getEditorComponent();\n+        text.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));\n+        text.setColumns(3);\n+        setMaximumSize(getPreferredSize());\n+\n+        scene.getZoomChangedEvent().addListener(this);\n+    }\n+\n+    private void setZoomLevel(int zoomLevel) {\n+        setSelectedItem(zoomLevel + \"%\");\n+        diagramScene.setZoomPercentage(zoomLevel);\n+    }\n+\n+    @Override\n+    public void changed(DiagramViewer diagramViewer) {\n+        setSelectedItem(diagramViewer.getZoomPercentage() + \"%\");\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomLevelAction.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -87,1 +87,1 @@\n-        return \"com\/sun\/hotspot\/igv\/view\/images\/zoom_out.png\";\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomOut.svg\"; \/\/ NOI18N\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomOutAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import javax.swing.Action;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.HelpCtx;\n+import org.openide.util.ImageUtilities;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.CallableSystemAction;\n+\n+@ActionID(category = \"View\", id = \"com.sun.hotspot.igv.view.actions.ZoomResetAction\")\n+@ActionRegistration(displayName = \"#CTL_ZoomResetAction\")\n+@ActionReferences({\n+        @ActionReference(path = \"Menu\/View\", position = 550),\n+        @ActionReference(path = \"Shortcuts\", name = \"D-0\")\n+})\n+@NbBundle.Messages({\n+        \"CTL_ZoomResetAction=Reset zoom (100%\",\n+        \"HINT_ZoomResetAction=Rest the zoom level to 100%\"\n+})\n+public final class ZoomResetAction extends CallableSystemAction {\n+\n+    public ZoomResetAction() {\n+        putValue(Action.SHORT_DESCRIPTION, getDescription());\n+        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+    }\n+\n+    @Override\n+    public void performAction() {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            editor.setZoomLevel(100);\n+        }\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NbBundle.getMessage(NextDiagramAction.class, \"CTL_ZoomResetAction\");\n+    }\n+\n+    private String getDescription() {\n+        return NbBundle.getMessage(NextDiagramAction.class, \"HINT_ZoomResetAction\");\n+    }\n+\n+    @Override\n+    public HelpCtx getHelpCtx() {\n+        return HelpCtx.DEFAULT_HELP;\n+    }\n+\n+    @Override\n+    protected boolean asynchronous() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected String iconResource() {\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/zoomReset.svg\"; \/\/ NOI18N\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomResetAction.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomIn.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"64.1875\"\n+   inkscape:cx=\"3.5443038\"\n+   inkscape:cy=\"8.3583252\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"82\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+<line\n+   class=\"st18\"\n+   x1=\"6.6498079\"\n+   y1=\"3.85517\"\n+   x2=\"6.6498079\"\n+   y2=\"9.9234934\"\n+   id=\"line23\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-width:1.398;stroke-dasharray:none;stroke-linecap:round\" \/>\n+<line\n+   class=\"st18\"\n+   x1=\"3.7348101\"\n+   y1=\"6.7376232\"\n+   x2=\"9.8716478\"\n+   y2=\"6.7376232\"\n+   id=\"line25\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-linecap:round\" \/><line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomIn.svg","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomIn.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"64.1875\"\n+   inkscape:cx=\"3.5443038\"\n+   inkscape:cy=\"8.3583252\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"82\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+\n+<line\n+   class=\"st18\"\n+   x1=\"3.7348101\"\n+   y1=\"6.7376232\"\n+   x2=\"9.8716478\"\n+   y2=\"6.7376232\"\n+   id=\"line25\"\n+   style=\"fill:#000000;stroke:#000000;stroke-opacity:1;stroke-linecap:round\" \/><line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomOut.svg","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+\n+<svg\n+   version=\"1.1\"\n+   id=\"Vector_Icons\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   width=\"16px\"\n+   height=\"16px\"\n+   viewBox=\"0 0 16 16\"\n+   style=\"enable-background:new 0 0 16 16;\"\n+   xml:space=\"preserve\"\n+   sodipodi:docname=\"zoomReset.svg\"\n+   inkscape:version=\"1.2.1 (9c6d41e, 2022-07-14)\"\n+   xmlns:inkscape=\"http:\/\/www.inkscape.org\/namespaces\/inkscape\"\n+   xmlns:sodipodi=\"http:\/\/sodipodi.sourceforge.net\/DTD\/sodipodi-0.dtd\"\n+   xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n+   xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"><defs\n+   id=\"defs30\" \/><sodipodi:namedview\n+   id=\"namedview28\"\n+   pagecolor=\"#ffffff\"\n+   bordercolor=\"#000000\"\n+   borderopacity=\"0.25\"\n+   inkscape:showpageshadow=\"2\"\n+   inkscape:pageopacity=\"0.0\"\n+   inkscape:pagecheckerboard=\"0\"\n+   inkscape:deskcolor=\"#d1d1d1\"\n+   showgrid=\"false\"\n+   inkscape:zoom=\"36.320439\"\n+   inkscape:cx=\"2.2163829\"\n+   inkscape:cy=\"6.8694104\"\n+   inkscape:window-width=\"2452\"\n+   inkscape:window-height=\"1205\"\n+   inkscape:window-x=\"2204\"\n+   inkscape:window-y=\"25\"\n+   inkscape:window-maximized=\"0\"\n+   inkscape:current-layer=\"Vector_Icons\" \/>\n+<style\n+   type=\"text\/css\"\n+   id=\"style9\">\n+\t.st0{fill:#FFFFFF;}\n+\t.st1{opacity:0.25;}\n+\t.st2{fill:#FAFAFA;}\n+\t.st3{opacity:0.33;}\n+\t.st4{fill:none;stroke:#474747;stroke-miterlimit:10;}\n+\t.st5{opacity:0.42;}\n+\t.st6{fill:#CAE3FF;}\n+\t.st7{opacity:0.2;}\n+\t.st8{opacity:0.03;}\n+\t.st9{opacity:0.1;}\n+\t.st10{opacity:0.15;}\n+\t.st11{opacity:0.45;}\n+\t.st12{fill:#FFE1B0;}\n+\t.st13{fill:#B3DBFF;}\n+\t.st14{fill:#FBDC7C;}\n+\t.st15{fill:#FFDB43;}\n+\t.st16{fill:#E79B00;}\n+\t.st17{fill:#3883CE;}\n+\t.st18{fill:none;stroke:#003399;stroke-width:1.375;stroke-miterlimit:10;}\n+\t.st19{fill:#E8513D;}\n+\t.st20{fill:#1E1E1E;}\n+\t.st21{fill:#FFC36D;}\n+\t.st22{fill:#9FCBFF;}\n+\t.st23{fill:#E9F7FF;}\n+\t.st24{fill:#62707C;}\n+\t.st25{fill:#7A8896;}\n+\t.st26{fill:#57BFFF;}\n+\t.st27{fill:#E69D35;}\n+\t.st28{fill:#9CFF73;}\n+\t.st29{fill:#4891CC;}\n+\t.st30{fill:#474747;}\n+\t.st31{fill:#CCA05E;}\n+\t.st32{opacity:0.67;}\n+\t.st33{opacity:0.3;}\n+\t.st34{fill:#EAEAEA;}\n+\t.st35{fill:#FFE945;}\n+\t.st36{fill:#FFCF8C;}\n+\t.st37{fill:#FF5252;}\n+\t.st38{opacity:0.12;}\n+\t.st39{fill:#45A5F4;}\n+\t.st40{fill:url(#SVGID_1_);}\n+\t.st41{fill:url(#SVGID_2_);}\n+\t.st42{opacity:0.05;}\n+\t.st43{fill:#3D81F5;}\n+\t.st44{fill:#CECECE;}\n+\t.st45{fill:#B5B5B5;}\n+\t.st46{opacity:0.4;}\n+\t.st47{fill:#595959;}\n+\t.st48{fill:#80FF80;}\n+\t.st49{fill:#C8FF80;}\n+\t.st50{fill:#FFEE80;}\n+\t.st51{fill:#FFA680;}\n+\t.st52{fill:#FF8080;}\n+\t.st53{fill:none;}\n+\t.st54{fill:#007AFF;}\n+\t.st55{fill:#EFFF78;}\n+\t.st56{fill:#FFDA00;}\n+\t.st57{fill:#3EADFF;}\n+\t.st58{opacity:0.67;fill:#FFFFFF;}\n+\t.st59{fill:#2E92FF;}\n+\t.st60{fill:#3AEA00;}\n+\t.st61{fill:#303030;}\n+<\/style>\n+\n+<ellipse\n+   class=\"st6\"\n+   cx=\"6.8032284\"\n+   cy=\"6.8893313\"\n+   id=\"circle19\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.01708;stroke-opacity:1\"\n+   rx=\"6.136837\"\n+   ry=\"6.0683227\" \/><ellipse\n+   class=\"st6\"\n+   cx=\"6.7592793\"\n+   cy=\"6.7868128\"\n+   id=\"circle19-5\"\n+   style=\"fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.227052;stroke-opacity:1\"\n+   rx=\"1.3970011\"\n+   ry=\"1.3284868\" \/>\n+<path\n+   class=\"st17\"\n+   d=\"m 6.8032287,1.8192652 c 2.9663162,0 5.3796083,2.2744318 5.3796083,5.0700662 0,2.7956345 -2.4132921,5.0700656 -5.3796083,5.0700656 -2.9663161,0 -5.3796085,-2.2744311 -5.3796085,-5.0700656 0,-2.7956344 2.4132924,-5.0700662 5.3796085,-5.0700662 m 0,-1.01401319 c -3.5656045,0 -6.45553013,2.72363949 -6.45553013,6.08407939 0,3.3604396 2.88992563,6.0840796 6.45553013,6.0840796 3.5656043,0 6.4555293,-2.72364 6.4555293,-6.0840796 0,-3.3604399 -2.889925,-6.08407939 -6.4555293,-6.08407939 z\"\n+   id=\"path21\"\n+   style=\"fill:#000000;stroke-width:1.04452\" \/>\n+\n+<line\n+   class=\"st18\"\n+   x1=\"11.240422\"\n+   y1=\"11.341141\"\n+   x2=\"14.91732\"\n+   y2=\"14.941232\"\n+   id=\"line25-0\"\n+   style=\"fill:#c1ddf1;fill-opacity:1;stroke:#000000;stroke-width:1.846;stroke-linecap:round;stroke-miterlimit:9.8;stroke-dasharray:none;stroke-opacity:1;paint-order:markers fill stroke\" \/>\n+<\/svg>\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/zoomReset.svg","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}