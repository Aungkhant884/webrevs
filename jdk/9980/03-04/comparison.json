{"files":[{"patch":"@@ -2947,2 +2947,2 @@\n-void G1CollectedHeap::clear_bitmap_for_region(HeapRegion* hr) {\n-  concurrent_mark()->clear_bitmap_for_region(hr);\n+void G1CollectedHeap::clear_mark_data_for_region(HeapRegion* hr) {\n+  concurrent_mark()->clear_mark_data_for_region(hr);\n@@ -3304,0 +3304,2 @@\n+  assert(!_cm->is_marked_in_bitmap(obj), \"must be\");\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-  void clear_bitmap_for_region(HeapRegion* hr);\n+  void clear_mark_data_for_region(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-      r->note_end_of_clearing();\n+      r->reset_top_at_mark_start();\n@@ -1888,1 +1888,1 @@\n-void G1ConcurrentMark::clear_bitmap_for_region(HeapRegion* hr) {\n+void G1ConcurrentMark::clear_mark_data_for_region(HeapRegion* hr) {\n@@ -1891,1 +1891,1 @@\n-  hr->note_end_of_clearing();\n+  hr->reset_top_at_mark_start();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -584,4 +584,3 @@\n-  \/\/ Clears marks for all objects in the given region in the marking\n-  \/\/ bitmap. This should only be used to clean the bitmap during a\n-  \/\/ safepoint.\n-  void clear_bitmap_for_region(HeapRegion* hr);\n+  \/\/ Clears marking data including marks for all objects in the given region.\n+  \/\/ This should only be used during a safepoint.\n+  void clear_mark_data_for_region(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-  \/\/ Initialized outside of the constructor because the number of workers is unknown\n-  \/\/ at that time\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1284,1 +1284,1 @@\n-        _g1h->clear_bitmap_for_region(hr);\n+        _g1h->clear_mark_data_for_region(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,2 +116,2 @@\n-    return ((double)G1CollectedHeap::get_chunks_per_region() \/ G1RestoreRetainedRegionChunksPerWorker) *\n-      _evac_failure_regions->num_regions_failed_evacuation();\n+    double chunks_per_thread = (double)G1CollectedHeap::get_chunks_per_region() \/ G1RestoreRetainedRegionChunksPerWorker;\n+    return chunks_per_thread * _evac_failure_regions->num_regions_failed_evacuation();\n@@ -138,2 +138,1 @@\n-    RestoreRetainedRegionsTask* restore_retained_regions_task = new RestoreRetainedRegionsTask(evac_failure_regions);\n-    add_parallel_task(restore_retained_regions_task);\n+    add_parallel_task(new RestoreRetainedRegionsTask(evac_failure_regions));\n@@ -372,1 +371,1 @@\n-      G1CollectedHeap::heap()->clear_bitmap_for_region(r);\n+      G1CollectedHeap::heap()->clear_mark_data_for_region(r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -246,5 +246,1 @@\n-  void init_top_at_mark_start() {\n-    set_top_at_mark_start(bottom());\n-    _parsable_bottom = bottom();\n-    _garbage_bytes = 0;\n-  }\n+  inline void init_top_at_mark_start();\n@@ -378,1 +374,1 @@\n-  inline void note_end_of_clearing();\n+  inline void reset_top_at_mark_start();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  set_top_at_mark_start(bottom());\n+  reset_top_at_mark_start();\n@@ -320,1 +320,7 @@\n-inline void HeapRegion::note_end_of_clearing() {\n+inline void HeapRegion::init_top_at_mark_start() {\n+  reset_top_at_mark_start();\n+  _parsable_bottom = bottom();\n+  _garbage_bytes = 0;\n+}\n+\n+inline void HeapRegion::reset_top_at_mark_start() {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}