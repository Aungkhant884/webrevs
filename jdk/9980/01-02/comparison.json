{"files":[{"patch":"@@ -2947,2 +2947,2 @@\n-void G1CollectedHeap::clear_bitmap_for_region(HeapRegion* hr, bool update_tams) {\n-  concurrent_mark()->clear_bitmap_for_region(hr, update_tams);\n+void G1CollectedHeap::clear_bitmap_for_region(HeapRegion* hr) {\n+  concurrent_mark()->clear_bitmap_for_region(hr);\n@@ -3304,0 +3304,1 @@\n+  _cm->raw_mark_in_bitmap(obj);\n@@ -3305,3 +3306,1 @@\n-    _cm->raw_mark_in_bitmap(worker_id, obj, obj_size);\n-  } else {\n-    _cm->raw_mark_in_bitmap(obj);\n+    _cm->add_to_liveness(worker_id, obj, obj_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -528,0 +528,4 @@\n+  \/\/ The returned value is a trade-off between granularity of work distribution and\n+  \/\/ memory usage and maintenance costs of that table.\n+  \/\/ Testing showed that 64 for 1M\/2M region, 128 for 4M\/8M regions, 256 for 16\/32M regions,\n+  \/\/ and so on seems to be such a good trade-off.\n@@ -612,1 +616,1 @@\n-  void clear_bitmap_for_region(HeapRegion* hr, bool update_tams);\n+  void clear_bitmap_for_region(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1888,1 +1888,1 @@\n-void G1ConcurrentMark::clear_bitmap_for_region(HeapRegion* hr, bool update_tams) {\n+void G1ConcurrentMark::clear_bitmap_for_region(HeapRegion* hr) {\n@@ -1891,3 +1891,1 @@\n-  if (update_tams) {\n-    hr->note_end_of_clearing();\n-  }\n+  hr->note_end_of_clearing();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -583,2 +583,0 @@\n-  \/\/ Same as above, but also updates liveness information.\n-  inline void raw_mark_in_bitmap(uint worker_id, oop obj, size_t obj_size);\n@@ -587,1 +585,1 @@\n-  \/\/ bitmap. This should only be used clean the bitmap during a\n+  \/\/ bitmap. This should only be used to clean the bitmap during a\n@@ -589,1 +587,1 @@\n-  void clear_bitmap_for_region(HeapRegion* hr, bool update_tams);\n+  void clear_bitmap_for_region(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -287,5 +287,0 @@\n-inline void G1ConcurrentMark::raw_mark_in_bitmap(uint worker_id, oop obj, size_t obj_size) {\n-  raw_mark_in_bitmap(obj);\n-  add_to_liveness(worker_id, obj, obj_size);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    G1GCPhaseTimes::RemoveSelfForwardsInChunks;\n+    G1GCPhaseTimes::RemoveSelfForwards;\n@@ -109,1 +109,1 @@\n-class G1RemoveSelfForwardsInChunksTask::RegionGarbageWordsCache {\n+class G1RemoveSelfForwardsTask::RegionGarbageWordsCache {\n@@ -150,1 +150,1 @@\n-void G1RemoveSelfForwardsInChunksTask::process_chunk(uint worker_id,\n+void G1RemoveSelfForwardsTask::process_chunk(uint worker_id,\n@@ -226,1 +226,1 @@\n-G1RemoveSelfForwardsInChunksTask::G1RemoveSelfForwardsInChunksTask(G1EvacFailureRegions* evac_failure_regions) :\n+G1RemoveSelfForwardsTask::G1RemoveSelfForwardsTask(G1EvacFailureRegions* evac_failure_regions) :\n@@ -233,1 +233,1 @@\n-void G1RemoveSelfForwardsInChunksTask::work(uint worker_id) {\n+void G1RemoveSelfForwardsTask::work(uint worker_id) {\n@@ -248,1 +248,1 @@\n-void G1RemoveSelfForwardsInChunksTask::initialize(uint num_workers) {\n+void G1RemoveSelfForwardsTask::initialize() {\n@@ -254,2 +254,2 @@\n-  log_debug(gc, ergo)(\"Initializing removing self forwards with %u chunks per region given %u workers\",\n-                      _num_chunks_per_region, num_workers);\n+  log_debug(gc, ergo)(\"Initializing removing self forwards with %u chunks per region\",\n+                      _num_chunks_per_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class G1RemoveSelfForwardsInChunksTask : public WorkerTask {\n+class G1RemoveSelfForwardsTask : public WorkerTask {\n@@ -59,1 +59,1 @@\n-  explicit G1RemoveSelfForwardsInChunksTask(G1EvacFailureRegions* evac_failure_regions);\n+  explicit G1RemoveSelfForwardsTask(G1EvacFailureRegions* evac_failure_regions);\n@@ -63,1 +63,1 @@\n-  void initialize(uint num_workers);\n+  void initialize();\n@@ -66,1 +66,1 @@\n-#endif \/\/ SHARE_GC_G1_G1EVACFAILURE_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_GC_G1_G1EVACFAILURE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  _gc_par_phases[RemoveSelfForwardsInChunks] = new WorkerDataArray<double>(\"RemoveSelfForwardsInChunks\", \"Remove Self Forwards In Chunks (ms):\", max_gc_threads);\n+  _gc_par_phases[RemoveSelfForwards] = new WorkerDataArray<double>(\"RemoveSelfForwards\", \"Remove Self Forwards (ms):\", max_gc_threads);\n@@ -139,4 +139,4 @@\n-  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Chunks:\", RemoveSelfForwardChunksNum);\n-  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Empty Forward Chunks:\", RemoveSelfForwardEmptyChunksNum);\n-  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Objects:\", RemoveSelfForwardObjectsNum);\n-  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Bytes:\", RemoveSelfForwardObjectsBytes);\n+  _gc_par_phases[RemoveSelfForwards]->create_thread_work_items(\"Forward Chunks:\", RemoveSelfForwardChunksNum);\n+  _gc_par_phases[RemoveSelfForwards]->create_thread_work_items(\"Empty Forward Chunks:\", RemoveSelfForwardEmptyChunksNum);\n+  _gc_par_phases[RemoveSelfForwards]->create_thread_work_items(\"Forward Objects:\", RemoveSelfForwardObjectsNum);\n+  _gc_par_phases[RemoveSelfForwards]->create_thread_work_items(\"Forward Bytes:\", RemoveSelfForwardObjectsBytes);\n@@ -493,1 +493,1 @@\n-    debug_phase(_gc_par_phases[RemoveSelfForwardsInChunks], 2);\n+    debug_phase(_gc_par_phases[RemoveSelfForwards], 2);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    RemoveSelfForwardsInChunks,\n+    RemoveSelfForwards,\n@@ -154,1 +154,1 @@\n-  enum RemoveSelfForwardsInChunksWorkItems {\n+  enum RemoveSelfForwardsWorkItems {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1284,1 +1284,1 @@\n-        _g1h->clear_bitmap_for_region(hr, true \/* update_tams *\/);\n+        _g1h->clear_bitmap_for_region(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  G1RemoveSelfForwardsInChunksTask _task;\n+  G1RemoveSelfForwardsTask _task;\n@@ -119,2 +119,2 @@\n-  void initialize(uint num_workers) {\n-    _task.initialize(num_workers);\n+  void initialize() {\n+    _task.initialize();\n@@ -140,2 +140,1 @@\n-    uint num_workers = clamp(num_workers_estimate(), 1u, G1CollectedHeap::heap()->workers()->active_workers());\n-    restore_retained_regions_task->initialize(num_workers);\n+    restore_retained_regions_task->initialize();\n@@ -372,1 +371,3 @@\n-      G1CollectedHeap::heap()->clear_bitmap_for_region(r, false \/* update_tams *\/);\n+      assert(r->bottom() == r->top_at_mark_start(),\n+             \"TAMS should have been reset for region %u\", r->hrm_index());\n+      G1CollectedHeap::heap()->clear_bitmap_for_region(r);\n@@ -382,1 +383,4 @@\n-    _claimer(0) { }\n+    _claimer(0) {\n+    assert(!G1CollectedHeap::heap()->collector_state()->in_concurrent_start_gc(),\n+           \"Should not clear bitmaps of retained regions during concurrent start\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-            \"RemoveSelfForwardsInChunks\",\n+            \"RemoveSelfForwards\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}