{"files":[{"patch":"@@ -105,6 +105,6 @@\n-    private BufferedWriter outputWriter = null;\n-    private Charset outputCharset = null;\n-    private BufferedReader inputReader = null;\n-    private Charset inputCharset = null;\n-    private BufferedReader errorReader = null;\n-    private Charset errorCharset = null;\n+    private BufferedWriter outputWriter;\n+    private Charset outputCharset;\n+    private BufferedReader inputReader;\n+    private Charset inputCharset;\n+    private BufferedReader errorReader;\n+    private Charset errorCharset;\n@@ -129,3 +129,3 @@\n-     * Use {@link #getOutputStream} and {@link #outputWriter} with extreme care.\n-     * Output to the {@code BufferedWriter} may be held in the buffer until\n-     * {@linkplain BufferedWriter#flush flush} is called.\n+     * When writing to both {@link #getOutputStream()} and either {@link #outputWriter()}\n+     * or {@link #outputWriter(Charset)}, {@link BufferedWriter#flush BufferedWriter.flush}\n+     * should be called before writes to the {@code OutputStream}.\n@@ -205,3 +205,3 @@\n-     * {@link Charset} named by the {@code native.encoding}\n-     * system property or the {@link Charset#defaultCharset()} if the\n-     * {@code native.encoding} is not supported.\n+     * {@link Charset} named by the {@code native.encoding} system property.\n+     * If the {@code native.encoding} is not a valid charset name or not supported\n+     * the {@link Charset#defaultCharset()} is used.\n@@ -235,0 +235,4 @@\n+     * <p>The first call to this method creates the {@link BufferedReader BufferedReader},\n+     * if called again with the same {@code charset} the same {@code BufferedReader} is returned.\n+     * It is an error to call this method again with a different {@code charset}.\n+     *\n@@ -242,1 +246,1 @@\n-     * Using both {@link #getInputStream} and {@link #inputReader} has\n+     * Using both {@link #getInputStream} and {@link #inputReader(Charset)} has\n@@ -247,1 +251,1 @@\n-     * the bytes available from the underlying stream is on a best effort basis and\n+     * reading of the bytes available from the underlying stream is on a best effort basis and\n@@ -250,6 +254,0 @@\n-     * @implNote\n-     * This is equivalent to:\n-     * {@code\n-     *     return new BufferedReader(new InputStreamReader(getInputStream(), charset));\n-     * }\n-     *\n@@ -259,1 +257,1 @@\n-     * @throws IllegalArgumentException if called more than once with different charset arguments\n+     * @throws IllegalStateException if called more than once with different charset arguments\n@@ -270,1 +268,1 @@\n-                    throw new IllegalArgumentException(\"BufferedReader was created with charset: \" + inputCharset);\n+                    throw new IllegalStateException(\"BufferedReader was created with charset: \" + inputCharset);\n@@ -282,3 +280,3 @@\n-     * {@link Charset} named by the {@code native.encoding}\n-     * system property or the {@link Charset#defaultCharset()} if the\n-     * {@code native.encoding} is not supported.\n+     * {@link Charset} named by the {@code native.encoding} system property.\n+     * If the {@code native.encoding} is not a valid charset name or not supported\n+     * the {@link Charset#defaultCharset()} is used.\n@@ -307,0 +305,4 @@\n+     * <p>The first call to this method creates the {@link BufferedReader BufferedReader},\n+     * if called again with the same {@code charset} the same {@code BufferedReader} is returned.\n+     * It is an error to call this method again with a different {@code charset}.\n+     *\n@@ -314,1 +316,1 @@\n-     * Using both {@link #getErrorStream} and {@link #errorReader} has\n+     * Using both {@link #getErrorStream} and {@link #errorReader(Charset)} has\n@@ -319,1 +321,1 @@\n-     * the bytes available from the underlying stream is on a best effort basis and\n+     * reading of the bytes available from the underlying stream is on a best effort basis and\n@@ -322,6 +324,0 @@\n-     * @implNote\n-     * This is equivalent to:\n-     * {@code\n-     *     return new BufferedReader(new InputStreamReader(getErrorStream(), charset));\n-     * }\n-     *\n@@ -331,1 +327,1 @@\n-     * @throws IllegalArgumentException if called more than once with different charset arguments\n+     * @throws IllegalStateException if called more than once with different charset arguments\n@@ -342,1 +338,1 @@\n-                    throw new IllegalArgumentException(\"BufferedReader was created with charset: \" + errorCharset);\n+                    throw new IllegalStateException(\"BufferedReader was created with charset: \" + errorCharset);\n@@ -354,20 +350,4 @@\n-     * <p>Characters written encoded to bytes using {@link OutputStreamWriter}\n-     * and the {@link Charset} named by the {@code native.encoding} system property\n-     * piped into the standard input of the process represented by this {@code Process} object.\n-     * If the {@code Charset} is not supported, the {@link Charset#defaultCharset()} is used.\n-     * Call the {@link BufferedWriter#flush()} method to flush buffered output to the process.\n-     *\n-     * <p>If the standard input of the process has been redirected using\n-     * {@link ProcessBuilder#redirectInput(Redirect)\n-     * ProcessBuilder.redirectInput} then this method will return a\n-     * <a href=\"ProcessBuilder.html#redirect-input\">null output writer<\/a>.\n-     *\n-     * @apiNote\n-     * A {@linkplain BufferedWriter} writes characters, arrays of characters, and strings.\n-     * Wrapping the {@link BufferedWriter} with a {@link PrintWriter} provides\n-     * efficient buffering and formatting of primitives and objects as well as support\n-     * for auto-flush on line endings.\n-     * <p>\n-     * Use {@link #getOutputStream} and {@link #outputWriter} with extreme care.\n-     * Output to the {@code BufferedWriter} may be held in the buffer until\n-     * {@linkplain BufferedWriter#flush flush} is called.\n+     * <p>This method delegates to {@link #outputWriter(Charset)} using the\n+     * {@link Charset} named by the {@code native.encoding} system property.\n+     * If the {@code native.encoding} is not a valid charset name or not supported\n+     * the {@link Charset#defaultCharset()} is used.\n@@ -390,2 +370,2 @@\n-     * and the {@link Charset}\n-     * piped into the standard input of the process represented by this {@code Process} object.\n+     * and the {@link Charset} are written to the standard input of the process represented\n+     * by this {@code Process}.\n@@ -394,1 +374,4 @@\n-     * Call the {@link BufferedWriter#flush()} method to flush buffered output to the process.\n+     *\n+     * <p>The first call to this method creates the {@link BufferedWriter BufferedWriter},\n+     * if called again with the same {@code charset} the same {@code BufferedWriter} is returned.\n+     * It is an error to call this method again with a different {@code charset}.\n@@ -399,1 +382,1 @@\n-     * <a href=\"ProcessBuilder.html#redirect-input\">null output writer<\/a>.\n+     * <a href=\"ProcessBuilder.html#redirect-input\">null output stream<\/a>.\n@@ -406,0 +389,1 @@\n+     * Call the {@link BufferedWriter#flush()} method to flush buffered output to the process.\n@@ -407,3 +391,3 @@\n-     * Use {@link #getOutputStream} and {@link #outputWriter} with extreme care.\n-     * Output to the {@code BufferedWriter} may be held in the buffer until\n-     * {@linkplain BufferedWriter#flush flush} is called.\n+     * When writing to both {@link #getOutputStream()} and either {@link #outputWriter()}\n+     * or {@link #outputWriter(Charset)}, {@linkplain BufferedWriter#flush BufferedWriter.flush}\n+     * should be called before writes to the {@code OutputStream}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":46,"deletions":62,"binary":false,"changes":108,"status":"modified"}]}