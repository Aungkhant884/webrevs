{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -101,0 +102,10 @@\n+\n+    \/\/ Readers and Writers created for this process; so repeated calls return the same object\n+    \/\/ All updates must be done while synchronized on this Process.\n+    private BufferedWriter outputWriter = null;\n+    private Charset outputCharset = null;\n+    private BufferedReader inputReader = null;\n+    private Charset inputCharset = null;\n+    private BufferedReader errorReader = null;\n+    private Charset errorCharset = null;\n+\n@@ -117,1 +128,7 @@\n-     * <p>Implementation note: It is a good idea for the returned\n+     * @apiNote\n+     * Use {@link #getOutputStream} and {@link #outputWriter} with extreme care.\n+     * Output to the {@code BufferedWriter} may be held in the buffer until\n+     * {@linkplain BufferedWriter#flush flush} is called.\n+     *\n+     * @implNote\n+     * Implementation note: It is a good idea for the returned\n@@ -143,1 +160,6 @@\n-     * <p>Implementation note: It is a good idea for the returned\n+     * @apiNote\n+     * Use {@link #getInputStream} and {@link #inputReader} with extreme care.\n+     * The {@code BufferedReader} may have buffered input from the input stream.\n+     *\n+     * @implNote\n+     * Implementation note: It is a good idea for the returned\n@@ -164,1 +186,6 @@\n-     * <p>Implementation note: It is a good idea for the returned\n+     * @apiNote\n+     * Use {@link #getInputStream} and {@link #inputReader} with extreme care.\n+     * The {@code BufferedReader} may have buffered input from the input stream.\n+     *\n+     * @implNote\n+     * Implementation note: It is a good idea for the returned\n@@ -178,1 +205,1 @@\n-     * {@link Charset} named by the {@systemProperty native.encoding}\n+     * {@link Charset} named by the {@code native.encoding}\n@@ -187,1 +214,1 @@\n-    public BufferedReader inputReader() {\n+    public final BufferedReader inputReader() {\n@@ -201,1 +228,1 @@\n-     * The BufferedReader reads and buffers characters from the InputStreamReader.\n+     * The {@code BufferedReader} reads and buffers characters from the InputStreamReader.\n@@ -219,0 +246,4 @@\n+     * <p>When the process has terminated, and the standard input has not been redirected,\n+     * the bytes available from the underlying stream is on a best effort basis and\n+     * may be unpredictable.\n+     *\n@@ -225,2 +256,2 @@\n-     * @param charset the {@code Charset} used to decode bytes to characters, not null\n-     * @return a BufferedReader for the standard output of the process using the {@code charset}\n+     * @param charset the {@code Charset} used to decode bytes to characters\n+     * @return a {@code BufferedReader} for the standard output of the process using the {@code charset}\n@@ -228,0 +259,1 @@\n+     * @throws IllegalArgumentException if called more than once with different charset arguments\n@@ -230,2 +262,12 @@\n-    public BufferedReader inputReader(Charset charset) {\n-        return new BufferedReader(new InputStreamReader(getInputStream(), charset));\n+    public final BufferedReader inputReader(Charset charset) {\n+        Objects.requireNonNull(charset, \"charset\");\n+        synchronized (this) {\n+            if (inputReader == null) {\n+                inputCharset = charset;\n+                inputReader = new BufferedReader(new InputStreamReader(getInputStream(), charset));\n+            } else {\n+                if (!inputCharset.equals(charset))\n+                    throw new IllegalArgumentException(\"BufferedReader was created with charset: \" + inputCharset);\n+            }\n+            return inputReader;\n+        }\n@@ -240,1 +282,1 @@\n-     * {@link Charset} named by the {@systemProperty native.encoding}\n+     * {@link Charset} named by the {@code native.encoding}\n@@ -249,1 +291,1 @@\n-    public BufferedReader errorReader() {\n+    public final BufferedReader errorReader() {\n@@ -263,1 +305,1 @@\n-     * The BufferedReader reads and buffers characters from the InputStreamReader.\n+     * The {@code BufferedReader} reads and buffers characters from the InputStreamReader.\n@@ -276,0 +318,4 @@\n+     * <p>When the process has terminated, and the standard error has not been redirected,\n+     * the bytes available from the underlying stream is on a best effort basis and\n+     * may be unpredictable.\n+     *\n@@ -282,2 +328,2 @@\n-     * @param charset the {@code Charset} used to decode bytes to characters, not null\n-     * @return a BufferedReader for the standard error of the process using the {@code charset}\n+     * @param charset the {@code Charset} used to decode bytes to characters\n+     * @return a {@code BufferedReader} for the standard error of the process using the {@code charset}\n@@ -285,0 +331,1 @@\n+     * @throws IllegalArgumentException if called more than once with different charset arguments\n@@ -287,2 +334,12 @@\n-    public BufferedReader errorReader(Charset charset) {\n-        return new BufferedReader(new InputStreamReader(getErrorStream(), charset));\n+    public final BufferedReader errorReader(Charset charset) {\n+        Objects.requireNonNull(charset, \"charset\");\n+        synchronized (this) {\n+            if (errorReader == null) {\n+                errorCharset = charset;\n+                errorReader = new BufferedReader(new InputStreamReader(getErrorStream(), charset));\n+            } else {\n+                if (!errorCharset.equals(charset))\n+                    throw new IllegalArgumentException(\"BufferedReader was created with charset: \" + errorCharset);\n+            }\n+            return errorReader;\n+        }\n@@ -292,1 +349,2 @@\n-     * Returns a {@code BufferedWriter} connected to the normal input of the process the native encoding.\n+     * Returns a {@code BufferedWriter} connected to the normal input of the process\n+     * using the native encoding.\n@@ -297,1 +355,1 @@\n-     * and the {@link Charset} named by the {@systemProperty native.encoding} system property\n+     * and the {@link Charset} named by the {@code native.encoding} system property\n@@ -314,1 +372,1 @@\n-     * Output to the BufferedWriter may be held in the buffer until\n+     * Output to the {@code BufferedWriter} may be held in the buffer until\n@@ -317,1 +375,1 @@\n-     * @return a BufferedWriter to the standard input of the process using the charset\n+     * @return a {@code BufferedWriter} to the standard input of the process using the charset\n@@ -321,1 +379,1 @@\n-    public BufferedWriter outputWriter() {\n+    public final BufferedWriter outputWriter() {\n@@ -326,1 +384,2 @@\n-     * Returns a {@code BufferedWriter} connected to the normal input of the process using a Charset.\n+     * Returns a {@code BufferedWriter} connected to the normal input of the process\n+     * using a Charset.\n@@ -333,0 +392,2 @@\n+     * Malformed-input and unmappable-character sequences are replaced with the charset's\n+     * default replacement.\n@@ -347,1 +408,1 @@\n-     * Output to the BufferedWriter may be held in the buffer until\n+     * Output to the {@code BufferedWriter} may be held in the buffer until\n@@ -350,2 +411,2 @@\n-     * @param charset the {@code Charset} to encode characters to bytes, not null\n-     * @return a BufferedWriter to the standard input of the process using the {@code charset}\n+     * @param charset the {@code Charset} to encode characters to bytes\n+     * @return a {@code BufferedWriter} to the standard input of the process using the {@code charset}\n@@ -353,0 +414,1 @@\n+     * @throws IllegalArgumentException if called more than once with different charset arguments\n@@ -355,2 +417,12 @@\n-    public BufferedWriter outputWriter(Charset charset) {\n-        return new BufferedWriter(new OutputStreamWriter(getOutputStream(), charset));\n+    public final BufferedWriter outputWriter(Charset charset) {\n+        Objects.requireNonNull(charset, \"charset\");\n+        synchronized (this) {\n+            if (outputWriter == null) {\n+                outputCharset = charset;\n+                outputWriter = new BufferedWriter(new OutputStreamWriter(getOutputStream(), charset));\n+            } else {\n+                if (!outputCharset.equals(charset))\n+                    throw new IllegalArgumentException(\"BufferedWriter was created with charset: \" + outputCharset);\n+            }\n+            return outputWriter;\n+        }\n@@ -804,1 +876,1 @@\n-         * {@return Charset for the native encoding or {@link Charset#defaultCharset()}\n+         * Charset for the native encoding or {@link Charset#defaultCharset().\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":101,"deletions":29,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -212,1 +213,4 @@\n-\n+    \/**\n+     * Test passing null when a charset is expected\n+     * @throws IOException if an I\/O error occurs; not expected\n+     *\/\n@@ -248,0 +252,55 @@\n+    \/**\n+     * Test passing different charset on multiple calls when the same charset is expected.\n+     * @throws IOException if an I\/O error occurs; not expected\n+     *\/\n+    @Test\n+    void testIllegalArgCharsets()  throws IOException {\n+        String nativeEncoding = System.getProperty(\"native.encoding\");\n+        Charset cs = Charset.forName(nativeEncoding);\n+        System.out.println(\"Native.encoding Charset: \" + cs);\n+        Charset otherCharset = cs.equals(StandardCharsets.UTF_8)\n+                ? StandardCharsets.ISO_8859_1\n+                : StandardCharsets.UTF_8;\n+\n+        \/\/ Launch a child; its behavior is not interesting and is ignored\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"ReaderWriterTest$ChildWithCharset\");\n+\n+        Process p = pb.start();\n+        try {\n+            var writer = p.outputWriter(cs);\n+            writer = p.outputWriter(cs);        \/\/ try again with same\n+            writer = p.outputWriter(otherCharset);  \/\/ this should throw\n+            Assert.fail(\"Process.outputWriter(otherCharset) did not throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException ile) {\n+            \/\/ expected, ignore\n+            System.out.println(ile);\n+        }\n+        try {\n+            var reader = p.inputReader(cs);\n+            reader = p.inputReader(cs);             \/\/ try again with same\n+            reader = p.inputReader(otherCharset);   \/\/ this should throw\n+            Assert.fail(\"Process.inputReader(otherCharset) did not throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException ile) {\n+            \/\/ expected, ignore\n+            System.out.println(ile);\n+        }\n+        try {\n+            var reader = p.errorReader(cs);\n+            reader = p.errorReader(cs);             \/\/ try again with same\n+            reader = p.errorReader(otherCharset);   \/\/ this should throw\n+            Assert.fail(\"Process.errorReader(otherCharset) did not throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException ile) {\n+            \/\/ expected, ignore\n+            System.out.println(ile);\n+        }\n+\n+        p.destroyForcibly();\n+        try {\n+            \/\/ Collect the exit status to cleanup after the process; but ignore it\n+            p.waitFor();\n+        } catch (InterruptedException ie) {\n+            \/\/ Ignored\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ReaderWriterTest.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"}]}