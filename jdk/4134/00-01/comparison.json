{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,4 +262,3 @@\n-     * Returns a {@code PrintWriter} connected to the normal input of the process.\n-     * PrintWriter prints formatted representations of objects to a text-output stream.\n-     * PrintWriter does not throw exceptions; instead, exceptional situations set\n-     * an internal flag that can be tested via the {@link PrintWriter#checkError} method.\n+     * Returns a {@code BufferedWriter} connected to the normal input of the process the native encoding.\n+     * Writes text to a character-output stream, buffering characters so as to provide\n+     * for the efficient writing of single characters, arrays, and strings.\n@@ -267,2 +266,2 @@\n-     * <p>Characters written to the writer are converted to bytes using the\n-     * {@link Charset} named by the {@systemProperty native.encoding} system property\n+     * <p>Characters written encoded to bytes using {@link OutputStreamWriter}\n+     * and the {@link Charset} named by the {@systemProperty native.encoding} system property\n@@ -271,2 +270,1 @@\n-     * Call the {@link PrintWriter#flush()} method to flush buffered output\n-     * to the process.\n+     * Call the {@link BufferedWriter#flush()} method to flush buffered output to the process.\n@@ -280,0 +278,5 @@\n+     * A {@linkplain BufferedWriter} writes characters, arrays of characters, and strings.\n+     * Wrapping the {@link BufferedWriter} with a {@link PrintWriter} provides\n+     * efficient buffering and formatting of primitives and objects as well as support\n+     * for auto-flush on line endings.\n+     * <p>\n@@ -281,2 +284,2 @@\n-     * Output to the PrintWriter may be held in the buffer until\n-     * {@linkplain PrintWriter#flush flush} is called.\n+     * Output to the BufferedWriter may be held in the buffer until\n+     * {@linkplain BufferedWriter#flush flush} is called.\n@@ -284,3 +287,1 @@\n-     * @param autoFlush if {@code true} the {@code println}, {@code printf}, or {@code format}\n-     *                  methods will flush the output buffer\n-     * @return a PrintWriter to the standard input of the process using the charset\n+     * @return a BufferedWriter to the standard input of the process using the charset\n@@ -289,2 +290,2 @@\n-    public PrintWriter outputWriter(boolean autoFlush) {\n-        return new PrintWriter(getOutputStream(), autoFlush, CharsetHolder.nativeCharset());\n+    public BufferedWriter outputWriter() {\n+        return outputWriter(CharsetHolder.nativeCharset());\n@@ -294,4 +295,3 @@\n-     * Returns a {@code PrintWriter} connected to the normal input of the process using a Charset.\n-     * PrintWriter prints formatted representations of objects to a text-output stream.\n-     * PrintWriter does not throw exceptions; instead, exceptional situations set\n-     * an internal flag that can be tested via the {@link PrintWriter#checkError} method.\n+     * Returns a {@code BufferedWriter} connected to the normal input of the process using a Charset.\n+     * Writes text to a character-output stream, buffering characters so as to provide\n+     * for the efficient writing of single characters, arrays, and strings.\n@@ -299,2 +299,2 @@\n-     * <p>Characters written to the writer are converted to bytes using the\n-     * {@link Charset} named by the {@systemProperty native.encoding} system property\n+     * <p>Characters written by the writer are encoded to bytes using {@link OutputStreamWriter}\n+     * and the {@link Charset}\n@@ -302,4 +302,1 @@\n-     * If the {@code Charset} for the {@code native.encoding} is not supported,\n-     * the {@link Charset#defaultCharset()} is used.\n-     * Call the {@link PrintWriter#flush()} method to flush buffered output\n-     * to the process.\n+     * Call the {@link BufferedWriter#flush()} method to flush buffered output to the process.\n@@ -313,0 +310,5 @@\n+     * A {@linkplain BufferedWriter} writes characters, arrays of characters, and strings.\n+     * Wrapping the {@link BufferedWriter} with a {@link PrintWriter} provides\n+     * efficient buffering and formatting of primitives and objects as well as support\n+     * for auto-flush on line endings.\n+     * <p>\n@@ -314,2 +316,2 @@\n-     * Output to the PrintWriter may be held in the buffer until\n-     * {@linkplain PrintWriter#flush flush} is called.\n+     * Output to the BufferedWriter may be held in the buffer until\n+     * {@linkplain BufferedWriter#flush flush} is called.\n@@ -317,4 +319,2 @@\n-     * @param autoFlush if {@code true} the {@code println}, {@code printf}, or {@code format}\n-     *                  methods will flush the output buffer\n-     * @param charset the {@code Charset} to convert characters to bytes\n-     * @return a PrintWriter to the standard input of the process using the {@code charset}\n+     * @param charset the {@code Charset} to encode characters to bytes\n+     * @return a BufferedWriter to the standard input of the process using the {@code charset}\n@@ -322,2 +322,2 @@\n-    public PrintWriter outputWriter(boolean autoFlush, Charset charset) {\n-        return new PrintWriter(getOutputStream(), autoFlush, charset);\n+    public BufferedWriter outputWriter(Charset charset) {\n+        return new BufferedWriter(new OutputStreamWriter(getOutputStream(), charset));\n@@ -772,2 +772,0 @@\n-         *\n-         * @return the Charset for the native encoding or {@link Charset#defaultCharset()}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n- * @run testng\/othervm  SerialFilterTest\n- * @run testng\/othervm  -Djdk.serialSetFilterAfterRead=true SerialFilterTest\n+ * @run testng\/othervm  -Djdk.serialFilterTrace SerialFilterTest\n+ * @run testng\/othervm  -Djdk.serialSetFilterAfterRead=true -Djdk.serialFilterTrace SerialFilterTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.nio.charset.UnsupportedCharsetException;\n@@ -43,0 +44,2 @@\n+import jtreg.SkippedException;\n+\n@@ -80,1 +83,1 @@\n-        writeTestChars(p.outputWriter(true));\n+        writeTestChars(p.outputWriter());\n@@ -106,0 +109,3 @@\n+     * Test a child with a character set.\n+     * A Process is spawned; characters are written to and read from the child\n+     * using the character set and compared.\n@@ -107,1 +113,1 @@\n-     * @param nativeEncoding\n+     * @param nativeEncoding a charset name\n@@ -111,4 +117,7 @@\n-        String osName = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n-\n-        Charset cs = Charset.forName(nativeEncoding);\n-        System.out.println(\"Charset: \" + cs);\n+        Charset cs = null;\n+        try {\n+            cs = Charset.forName(nativeEncoding);\n+            System.out.println(\"Charset: \" + cs);\n+        } catch (UnsupportedCharsetException use) {\n+            throw new SkippedException(\"Charset not supported: \" + nativeEncoding);\n+        }\n@@ -121,2 +130,0 @@\n-        var env = pb.environment();\n-        env.put(\"LANG\", \"en_US.\" + cleanCSName);\n@@ -126,1 +133,1 @@\n-        writeTestChars(p.outputWriter(true, cs));\n+        writeTestChars(p.outputWriter(cs));\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ReaderWriterTest.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"}]}