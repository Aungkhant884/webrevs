{"files":[{"patch":"@@ -229,1 +229,7 @@\n-     * Gets the Collator for the desired locale.\n+     * Gets the Collator for the desired locale. If the desired locale\n+     * has the \"{@code ks}\" and\/or the \"{@code kk}\"\n+     * <a href=\"https:\/\/www.unicode.org\/reports\/tr35\/tr35-collation.html#Setting_Options\">\n+     * Unicode collation settings<\/a>, the returned {@code Collator} instance\n+     * will have the specified strength and\/or decomposition respectively. If the specified\n+     * setting value is not recognized, strength and\/or decomposition will not be\n+     * overridden.\n@@ -261,0 +267,21 @@\n+\n+            \/\/ Override strength and decomposition with `desiredLocale`, if any\n+            var strength = desiredLocale.getUnicodeLocaleType(\"ks\");\n+            if (strength != null) {\n+                strength = strength.toLowerCase(Locale.ROOT);\n+                switch (strength) {\n+                    case \"level1\" -> result.setStrength(PRIMARY);\n+                    case \"level2\" -> result.setStrength(SECONDARY);\n+                    case \"level3\" -> result.setStrength(TERTIARY);\n+                    case \"identic\" -> result.setStrength(IDENTICAL);\n+                }\n+            }\n+            var norm = desiredLocale.getUnicodeLocaleType(\"kk\");\n+            if (norm != null) {\n+                norm = norm.toLowerCase(Locale.ROOT);\n+                switch (norm) {\n+                    case \"true\" -> result.setDecomposition(CANONICAL_DECOMPOSITION);\n+                    case \"false\" -> result.setDecomposition(NO_DECOMPOSITION);\n+                }\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308108\n+ * @summary Tests for BCP 47 collation settings\n+ * @run junit CollationSettingsTests\n+ *\/\n+\n+import java.text.Collator;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+import static java.text.Collator.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CollationSettingsTests {\n+    private static final Collator ENG_DEF =  Collator.getInstance(Locale.ENGLISH);\n+\n+    private static Stream<Arguments> strengthData() {\n+        return Stream.of(\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-level1\"), PRIMARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-level2\"), SECONDARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-level3\"), TERTIARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-identic\"), IDENTICAL),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-LEVEL1\"), PRIMARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-LEVEL2\"), SECONDARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-LEVEL3\"), TERTIARY),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-IDENTIC\"), IDENTICAL),\n+            \/\/ unrecognized setting value\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-foo\"), ENG_DEF.getStrength()),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-level4\"), ENG_DEF.getStrength()),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-ks-identical\"), ENG_DEF.getStrength())\n+        );\n+    }\n+\n+    private static Stream<Arguments> decompData() {\n+        return Stream.of(\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-true\"), CANONICAL_DECOMPOSITION),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-false\"), NO_DECOMPOSITION),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-TRUE\"), CANONICAL_DECOMPOSITION),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-FALSE\"), NO_DECOMPOSITION),\n+            \/\/ unrecognized setting value\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-foo\"), ENG_DEF.getDecomposition()),\n+            Arguments.of(Locale.forLanguageTag(\"en-u-kk-truetrue\"), ENG_DEF.getDecomposition())\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"strengthData\")\n+    public void testStrength(Locale l, int expected) {\n+        assertEquals(expected, Collator.getInstance(l).getStrength());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"decompData\")\n+    public void testDecomposition(Locale l, int expected) {\n+        assertEquals(expected, Collator.getInstance(l).getDecomposition());\n+    }\n+}\n","filename":"test\/jdk\/sun\/text\/resources\/Collator\/CollationSettingsTests.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}