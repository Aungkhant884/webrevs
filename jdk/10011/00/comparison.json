{"files":[{"patch":"@@ -1658,2 +1658,3 @@\n-instruct vfabd(vReg dst, vReg src1, vReg src2) %{\n-  predicate(Matcher::vector_length_in_bytes(n) <= 16);\n+instruct vfabd_neon(vReg dst, vReg src1, vReg src2) %{\n+  predicate(VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)) &&\n+            !n->as_Vector()->is_predicated_vector());\n@@ -1662,1 +1663,1 @@\n-  format %{ \"vfabd $dst, $src1, $src2\\t# vector <= 128 bits\" %}\n+  format %{ \"vfabd_neon $dst, $src1, $src2\" %}\n@@ -1666,0 +1667,30 @@\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vfabd_sve(vReg dst_src1, vReg src2) %{\n+  predicate(!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)) &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst_src1 (AbsVF (SubVF dst_src1 src2)));\n+  match(Set dst_src1 (AbsVD (SubVD dst_src1 src2)));\n+  format %{ \"vfabd_sve $dst_src1, $dst_src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_fabd($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+                ptrue, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector fabs diff - predicated\n+\n+instruct vfabd_masked(vReg dst_src1, vReg src2, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src1 (AbsVF (SubVF (Binary dst_src1 src2) pg) pg));\n+  match(Set dst_src1 (AbsVD (SubVD (Binary dst_src1 src2) pg) pg));\n+  format %{ \"vfabd_masked $dst_src1, $pg, $dst_src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_fabd($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+                $pg$$PRegister, $src2$$FloatRegister);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -874,2 +874,3 @@\n-instruct vfabd(vReg dst, vReg src1, vReg src2) %{\n-  predicate(Matcher::vector_length_in_bytes(n) <= 16);\n+instruct vfabd_neon(vReg dst, vReg src1, vReg src2) %{\n+  predicate(VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)) &&\n+            !n->as_Vector()->is_predicated_vector());\n@@ -878,1 +879,1 @@\n-  format %{ \"vfabd $dst, $src1, $src2\\t# vector <= 128 bits\" %}\n+  format %{ \"vfabd_neon $dst, $src1, $src2\" %}\n@@ -886,0 +887,30 @@\n+instruct vfabd_sve(vReg dst_src1, vReg src2) %{\n+  predicate(!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)) &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst_src1 (AbsVF (SubVF dst_src1 src2)));\n+  match(Set dst_src1 (AbsVD (SubVD dst_src1 src2)));\n+  format %{ \"vfabd_sve $dst_src1, $dst_src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_fabd($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+                ptrue, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector fabs diff - predicated\n+\n+instruct vfabd_masked(vReg dst_src1, vReg src2, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src1 (AbsVF (SubVF (Binary dst_src1 src2) pg) pg));\n+  match(Set dst_src1 (AbsVD (SubVD (Binary dst_src1 src2) pg) pg));\n+  format %{ \"vfabd_masked $dst_src1, $pg, $dst_src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_fabd($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+                $pg$$PRegister, $src2$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3158,0 +3158,1 @@\n+  INSN(sve_fabd,   0b01100101, 0b001000100); \/\/ floating-point absolute difference\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1921,0 +1921,1 @@\n+                       [\"fabd\", \"ZPZ\", \"m\", \"dn\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1210,2 +1210,3 @@\n-    __ sve_bext(z20, __ H, z4, z20);                   \/\/       bext    z20.h, z4.h, z20.h\n-    __ sve_bdep(z30, __ D, z22, z30);                  \/\/       bdep    z30.d, z22.d, z30.d\n+    __ sve_fabd(z20, __ S, p1, z20);                   \/\/       fabd    z20.s, p1\/m, z20.s, z20.s\n+    __ sve_bext(z30, __ D, z22, z30);                  \/\/       bext    z30.d, z22.d, z30.d\n+    __ sve_bdep(z25, __ H, z17, z17);                  \/\/       bdep    z25.h, z17.h, z17.h\n@@ -1214,9 +1215,9 @@\n-    __ sve_andv(v25, __ H, p4, z17);                   \/\/       andv h25, p4, z17.h\n-    __ sve_orv(v11, __ S, p3, z28);                    \/\/       orv s11, p3, z28.s\n-    __ sve_eorv(v5, __ H, p0, z13);                    \/\/       eorv h5, p0, z13.h\n-    __ sve_smaxv(v2, __ H, p1, z10);                   \/\/       smaxv h2, p1, z10.h\n-    __ sve_sminv(v19, __ H, p1, z25);                  \/\/       sminv h19, p1, z25.h\n-    __ sve_fminv(v2, __ S, p0, z29);                   \/\/       fminv s2, p0, z29.s\n-    __ sve_fmaxv(v20, __ D, p1, z20);                  \/\/       fmaxv d20, p1, z20.d\n-    __ sve_fadda(v28, __ S, p3, z13);                  \/\/       fadda s28, p3, s28, z13.s\n-    __ sve_uaddv(v13, __ H, p7, z1);                   \/\/       uaddv d13, p7, z1.h\n+    __ sve_andv(v11, __ S, p3, z28);                   \/\/       andv s11, p3, z28.s\n+    __ sve_orv(v5, __ H, p0, z13);                     \/\/       orv h5, p0, z13.h\n+    __ sve_eorv(v2, __ H, p1, z10);                    \/\/       eorv h2, p1, z10.h\n+    __ sve_smaxv(v19, __ H, p1, z25);                  \/\/       smaxv h19, p1, z25.h\n+    __ sve_sminv(v2, __ B, p0, z29);                   \/\/       sminv b2, p0, z29.b\n+    __ sve_fminv(v20, __ D, p1, z20);                  \/\/       fminv d20, p1, z20.d\n+    __ sve_fmaxv(v28, __ S, p3, z13);                  \/\/       fmaxv s28, p3, z13.s\n+    __ sve_fadda(v13, __ S, p7, z1);                   \/\/       fadda s13, p7, s13, z1.s\n+    __ sve_uaddv(v27, __ D, p0, z3);                   \/\/       uaddv d27, p0, z3.d\n@@ -1241,7 +1242,7 @@\n-    0x14000000,     0x17ffffd7,     0x140003fe,     0x94000000,\n-    0x97ffffd4,     0x940003fb,     0x3400000a,     0x34fffa2a,\n-    0x34007f0a,     0x35000008,     0x35fff9c8,     0x35007ea8,\n-    0xb400000b,     0xb4fff96b,     0xb4007e4b,     0xb500001d,\n-    0xb5fff91d,     0xb5007dfd,     0x10000013,     0x10fff8b3,\n-    0x10007d93,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307d16,     0x3758000c,     0x375ff7cc,     0x37587cac,\n+    0x14000000,     0x17ffffd7,     0x140003ff,     0x94000000,\n+    0x97ffffd4,     0x940003fc,     0x3400000a,     0x34fffa2a,\n+    0x34007f2a,     0x35000008,     0x35fff9c8,     0x35007ec8,\n+    0xb400000b,     0xb4fff96b,     0xb4007e6b,     0xb500001d,\n+    0xb5fff91d,     0xb5007e1d,     0x10000013,     0x10fff8b3,\n+    0x10007db3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307d36,     0x3758000c,     0x375ff7cc,     0x37587ccc,\n@@ -1252,13 +1253,13 @@\n-    0x54007a80,     0x54000001,     0x54fff541,     0x54007a21,\n-    0x54000002,     0x54fff4e2,     0x540079c2,     0x54000002,\n-    0x54fff482,     0x54007962,     0x54000003,     0x54fff423,\n-    0x54007903,     0x54000003,     0x54fff3c3,     0x540078a3,\n-    0x54000004,     0x54fff364,     0x54007844,     0x54000005,\n-    0x54fff305,     0x540077e5,     0x54000006,     0x54fff2a6,\n-    0x54007786,     0x54000007,     0x54fff247,     0x54007727,\n-    0x54000008,     0x54fff1e8,     0x540076c8,     0x54000009,\n-    0x54fff189,     0x54007669,     0x5400000a,     0x54fff12a,\n-    0x5400760a,     0x5400000b,     0x54fff0cb,     0x540075ab,\n-    0x5400000c,     0x54fff06c,     0x5400754c,     0x5400000d,\n-    0x54fff00d,     0x540074ed,     0x5400000e,     0x54ffefae,\n-    0x5400748e,     0x5400000f,     0x54ffef4f,     0x5400742f,\n+    0x54007aa0,     0x54000001,     0x54fff541,     0x54007a41,\n+    0x54000002,     0x54fff4e2,     0x540079e2,     0x54000002,\n+    0x54fff482,     0x54007982,     0x54000003,     0x54fff423,\n+    0x54007923,     0x54000003,     0x54fff3c3,     0x540078c3,\n+    0x54000004,     0x54fff364,     0x54007864,     0x54000005,\n+    0x54fff305,     0x54007805,     0x54000006,     0x54fff2a6,\n+    0x540077a6,     0x54000007,     0x54fff247,     0x54007747,\n+    0x54000008,     0x54fff1e8,     0x540076e8,     0x54000009,\n+    0x54fff189,     0x54007689,     0x5400000a,     0x54fff12a,\n+    0x5400762a,     0x5400000b,     0x54fff0cb,     0x540075cb,\n+    0x5400000c,     0x54fff06c,     0x5400756c,     0x5400000d,\n+    0x54fff00d,     0x5400750d,     0x5400000e,     0x54ffefae,\n+    0x540074ae,     0x5400000f,     0x54ffef4f,     0x5400744f,\n@@ -1494,4 +1495,4 @@\n-    0x05b36e3e,     0x4554b094,     0x45deb6de,     0x045a3239,\n-    0x04982f8b,     0x045921a5,     0x04482542,     0x044a2733,\n-    0x658723a2,     0x65c62694,     0x65982dbc,     0x04413c2d,\n-\n+    0x05b36e3e,     0x65888694,     0x45deb2de,     0x4551b639,\n+    0x049a2f8b,     0x045821a5,     0x04592542,     0x04482733,\n+    0x040a23a2,     0x65c72694,     0x65862dbc,     0x65983c2d,\n+    0x04c1207b,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":36,"deletions":35,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * @test\n+ * @bug 8292587\n+ * @key randomness\n+ * @library \/test\/lib \/\n+ * @requires os.arch==\"aarch64\"\n+ * @summary AArch64: Support SVE fabd instruction\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run driver compiler.vectorapi.VectorAbsDiffTest\n+ *\/\n+\n+public class VectorAbsDiffTest {\n+    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n+\n+    private static int LENGTH = 1024;\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    private static float[] fa;\n+    private static float[] fb;\n+    private static float[] fr;\n+    private static double[] da;\n+    private static double[] db;\n+    private static double[] dr;\n+    private static boolean[] m;\n+\n+    static {\n+        fa = new float[LENGTH];\n+        fb = new float[LENGTH];\n+        fr = new float[LENGTH];\n+        da = new double[LENGTH];\n+        db = new double[LENGTH];\n+        dr = new double[LENGTH];\n+        m = new boolean[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            fa[i] = RD.nextFloat((float) 25.0);\n+            fb[i] = RD.nextFloat((float) 25.0);\n+            da[i] = RD.nextDouble(25.0);\n+            db[i] = RD.nextDouble(25.0);\n+            m[i] = RD.nextBoolean();\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"vfabd\", \"> 0\"})\n+    public static void testFloatAbsDiff() {\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            av.sub(bv).lanewise(VectorOperators.ABS).intoArray(fr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatAbsDiff\")\n+    public static void testFloatAbsDiff_runner() {\n+        testFloatAbsDiff();\n+        for (int i = 0; i < F_SPECIES.length(); i++) {\n+            Asserts.assertEquals(Math.abs(fa[i] - fb[i]), fr[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"vfabd_masked\", \"> 0\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    public static void testFloatAbsDiffMasked() {\n+        VectorMask<Float> mask = VectorMask.fromArray(F_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            av.lanewise(VectorOperators.SUB, bv, mask).lanewise(VectorOperators.ABS, mask).intoArray(fr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatAbsDiffMasked\")\n+    public static void testFloatAbsDiffMasked_runner() {\n+        testFloatAbsDiffMasked();\n+        for (int i = 0; i < F_SPECIES.length(); i++) {\n+            if (m[i]) {\n+                Asserts.assertEquals(Math.abs(fa[i] - fb[i]), fr[i]);\n+            } else {\n+                Asserts.assertEquals(fa[i], fr[i]);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"vfabd\", \"> 0\"})\n+    public static void testDoubleAbsDiff() {\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            av.sub(bv).lanewise(VectorOperators.ABS).intoArray(dr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleAbsDiff\")\n+    public static void testDoubleAbsDiff_runner() {\n+        testDoubleAbsDiff();\n+        for (int i = 0; i < D_SPECIES.length(); i++) {\n+            Asserts.assertEquals(Math.abs(da[i] - db[i]), dr[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"vfabd_masked\", \"> 0\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    public static void testDoubleAbsDiffMasked() {\n+        VectorMask<Double> mask = VectorMask.fromArray(D_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            av.lanewise(VectorOperators.SUB, bv, mask).lanewise(VectorOperators.ABS, mask).intoArray(dr, i);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleAbsDiffMasked\")\n+    public static void testDoubleAbsDiffMasked_runner() {\n+        testDoubleAbsDiffMasked();\n+        for (int i = 0; i < D_SPECIES.length(); i++) {\n+            if (m[i]) {\n+                Asserts.assertEquals(Math.abs(da[i] - db[i]), dr[i]);\n+            } else {\n+                Asserts.assertEquals(da[i], dr[i]);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorAbsDiffTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -71,1 +71,1 @@\n-            floatsD[i] = Math.abs(floatsA[i] - floatsB[i]);\n+            floatsD[i] = Math.abs(Math.abs(floatsA[i] - floatsB[i]) - 3.14f);\n@@ -78,1 +78,1 @@\n-            doublesD[i] = Math.abs(doublesA[i] - doublesB[i]);\n+            doublesD[i] = Math.abs(Math.abs(doublesA[i] - doublesB[i]) - 3.14d);\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/FloatingScalarVectorAbsDiff.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}