{"files":[{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -38,1 +37,1 @@\n-  if (ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()) {\n+  if (ClassUnloading) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -38,1 +37,1 @@\n-  if (ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()) {\n+  if (ClassUnloading) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahCodeRoots.hpp\"\n@@ -292,2 +291,1 @@\n-  assert(ShenandoahConcurrentRoots::should_do_concurrent_class_unloading(),\n-         \"Only when running concurrent class unloading\");\n+  assert(ShenandoahHeap::heap()->unload_classes(), \"Only when running concurrent class unloading\");\n@@ -348,2 +346,1 @@\n-  assert(ShenandoahConcurrentRoots::should_do_concurrent_class_unloading(),\n-         \"Only when running concurrent class unloading\");\n+  assert(ShenandoahHeap::heap()->unload_classes(), \"Only when running concurrent class unloading\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-  if (heap->is_concurrent_weak_root_in_progress() &&\n-      ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n+  if (heap->unload_classes() &&\n+      heap->is_concurrent_weak_root_in_progress()) {\n@@ -499,1 +499,1 @@\n-  if (ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n+  if (heap->unload_classes()) {\n@@ -698,1 +698,0 @@\n-  bool                                       _concurrent_class_unloading;\n@@ -707,3 +706,2 @@\n-    _phase(phase),\n-    _concurrent_class_unloading(ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n-    if (_concurrent_class_unloading) {\n+    _phase(phase) {\n+    if (ShenandoahHeap::heap()->unload_classes()) {\n@@ -720,1 +718,1 @@\n-    if (_concurrent_class_unloading) {\n+    if (ShenandoahHeap::heap()->unload_classes()) {\n@@ -746,1 +744,1 @@\n-    if (_concurrent_class_unloading) {\n+    if (ShenandoahHeap::heap()->unload_classes()) {\n@@ -784,1 +782,1 @@\n-  if (!ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n+  if (!ShenandoahHeap::heap()->unload_classes()) {\n@@ -792,1 +790,1 @@\n-          ShenandoahConcurrentRoots::should_do_concurrent_class_unloading(),\n+          heap->unload_classes(),\n@@ -826,1 +824,0 @@\n-  bool                                          _process_codecache;\n@@ -834,3 +831,2 @@\n-    _nmethod_itr(ShenandoahCodeRoots::table()),\n-    _process_codecache(!ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n-    if (_process_codecache) {\n+    _nmethod_itr(ShenandoahCodeRoots::table()) {\n+    if (!ShenandoahHeap::heap()->unload_classes()) {\n@@ -843,1 +839,1 @@\n-    if (_process_codecache) {\n+    if (!ShenandoahHeap::heap()->unload_classes()) {\n@@ -868,1 +864,1 @@\n-    if (_process_codecache) {\n+    if (!ShenandoahHeap::heap()->unload_classes()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-class ShenandoahSATBAndRemarkCodeRootsThreadsClosure : public ThreadClosure {\n+class ShenandoahSATBAndRemarkThreadsClosure : public ThreadClosure {\n@@ -110,1 +110,0 @@\n-  MarkingCodeBlobClosure* _code_cl;\n@@ -114,1 +113,1 @@\n-  ShenandoahSATBAndRemarkCodeRootsThreadsClosure(SATBMarkQueueSet& satb_qset, OopClosure* cl, MarkingCodeBlobClosure* code_cl) :\n+  ShenandoahSATBAndRemarkThreadsClosure(SATBMarkQueueSet& satb_qset, OopClosure* cl) :\n@@ -116,1 +115,1 @@\n-    _cl(cl), _code_cl(code_cl),\n+    _cl(cl),\n@@ -126,9 +125,1 @@\n-          thread->oops_do(_cl, _code_cl);\n-        } else if (_code_cl != NULL) {\n-          \/\/ In theory it should not be neccessary to explicitly walk the nmethods to find roots for concurrent marking\n-          \/\/ however the liveness of oops reachable from nmethods have very complex lifecycles:\n-          \/\/ * Alive if on the stack of an executing method\n-          \/\/ * Weakly reachable otherwise\n-          \/\/ Some objects reachable from nmethods, such as the class loader (or klass_holder) of the receiver should be\n-          \/\/ live by the SATB invariant but other oops recorded in nmethods may behave differently.\n-          thread->as_Java_thread()->nmethods_do(_code_cl);\n+          thread->oops_do(_cl, NULL);\n@@ -167,1 +158,0 @@\n-      bool do_nmethods = heap->unload_classes() && !ShenandoahConcurrentRoots::can_do_concurrent_class_unloading();\n@@ -169,4 +159,2 @@\n-      MarkingCodeBlobClosure blobsCl(&mark_cl, !CodeBlobToOopClosure::FixRelocations);\n-      ShenandoahSATBAndRemarkCodeRootsThreadsClosure tc(satb_mq_set,\n-                                                        ShenandoahIUBarrier ? &mark_cl : NULL,\n-                                                        do_nmethods ? &blobsCl : NULL);\n+      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set,\n+                                               ShenandoahIUBarrier ? &mark_cl : NULL);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-\n-bool ShenandoahConcurrentRoots::can_do_concurrent_roots() {\n-  return true;\n-}\n-\n-bool ShenandoahConcurrentRoots::should_do_concurrent_roots() {\n-  return can_do_concurrent_roots() &&\n-         !ShenandoahHeap::heap()->is_stw_gc_in_progress();\n-}\n-\n-bool ShenandoahConcurrentRoots::can_do_concurrent_class_unloading() {\n-  return ClassUnloading;\n-}\n-\n-bool ShenandoahConcurrentRoots::should_do_concurrent_class_unloading() {\n-  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n-  return can_do_concurrent_class_unloading() &&\n-         heap->unload_classes() &&\n-         !heap->is_stw_gc_in_progress();\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentRoots.cpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHCONCURRENTROOTS_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHCONCURRENTROOTS_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-class ShenandoahConcurrentRoots : public AllStatic {\n-public:\n-  \/\/ Can GC settings allow concurrent root processing\n-  static bool can_do_concurrent_roots();\n-  \/\/ If current GC cycle can process roots concurrently\n-  static bool should_do_concurrent_roots();\n-\n-  \/\/ If GC settings allow concurrent class unloading\n-  static bool can_do_concurrent_class_unloading();\n-  \/\/ If current GC cycle can unload classes concurrently\n-  static bool should_do_concurrent_class_unloading();\n-};\n-\n-\n-#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHCONCURRENTROOTS_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentRoots.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -183,1 +183,1 @@\n-      if (ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()) {\n+      if (ClassUnloading) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -1728,1 +1727,0 @@\n-  assert(ShenandoahConcurrentRoots::can_do_concurrent_roots(), \"Why set the flag?\");\n@@ -1737,1 +1735,0 @@\n-  assert(ShenandoahConcurrentRoots::can_do_concurrent_roots(), \"Why set the flag?\");\n@@ -1987,1 +1984,1 @@\n-  if (ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n+  if (unload_classes()) {\n@@ -1995,1 +1992,1 @@\n-  if (ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {\n+  if (unload_classes()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -127,1 +126,1 @@\n-  if (ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()) {\n+  if (ClassUnloading) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkCompact.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -287,1 +286,1 @@\n-  CodeBlobToOopClosure* adjust_code_closure = ShenandoahConcurrentRoots::can_do_concurrent_class_unloading() ?\n+  CodeBlobToOopClosure* adjust_code_closure = ClassUnloading ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -180,3 +179,3 @@\n-  CodeBlobToOopClosure* codes_cl = ShenandoahConcurrentRoots::can_do_concurrent_class_unloading() ?\n-                                  static_cast<CodeBlobToOopClosure*>(&blobs_and_disarm_Cl) :\n-                                  static_cast<CodeBlobToOopClosure*>(&update_blobs);\n+  CodeBlobToOopClosure* codes_cl = ClassUnloading ?\n+                                   static_cast<CodeBlobToOopClosure*>(&blobs_and_disarm_Cl) :\n+                                   static_cast<CodeBlobToOopClosure*>(&update_blobs);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -35,2 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahCodeRoots.hpp\"\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -123,1 +121,1 @@\n-  if (ShenandoahConcurrentRoots::can_do_concurrent_class_unloading()) {\n+  if (ClassUnloading) {\n@@ -134,1 +132,1 @@\n-  assert(ShenandoahConcurrentRoots::can_do_concurrent_class_unloading(), \"Sanity\");\n+  assert(ClassUnloading, \"Sanity\");\n@@ -141,1 +139,1 @@\n-  assert(ShenandoahConcurrentRoots::can_do_concurrent_class_unloading(), \"Filtered by caller\");\n+  assert(ClassUnloading, \"Filtered by caller\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentRoots.hpp\"\n@@ -817,1 +816,1 @@\n-  VerifyWeakRoots verify_weak_roots = ShenandoahConcurrentRoots::should_do_concurrent_class_unloading() ?\n+  VerifyWeakRoots verify_weak_roots = _heap->unload_classes() ?\n@@ -835,1 +834,1 @@\n-  VerifyWeakRoots verify_weak_roots = ShenandoahConcurrentRoots::should_do_concurrent_class_unloading() ?\n+  VerifyWeakRoots verify_weak_roots = _heap->unload_classes() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}