{"files":[{"patch":"@@ -130,1 +130,1 @@\n-  __ far_call(Address(Runtime1::entry_for(Runtime1::throw_div0_exception_id), relocInfo::runtime_call_type));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::throw_div0_exception_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2442,0 +2442,3 @@\n+  assert(entry.rspec().type() == relocInfo::external_word_type\n+        || entry.rspec().type() == relocInfo::runtime_call_type\n+        || entry.rspec().type() == relocInfo::none, \"wrong entry relocInfo type\");\n@@ -2457,0 +2460,3 @@\n+  assert(entry.rspec().type() == relocInfo::external_word_type\n+        || entry.rspec().type() == relocInfo::runtime_call_type\n+        || entry.rspec().type() == relocInfo::none, \"wrong entry relocInfo type\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -601,2 +601,7 @@\n-  \/\/ Jumps that can reach anywhere in the code cache.\n-  \/\/ Trashes tmp.\n+  \/\/ The address must be inside the code cache.\n+  \/\/ Supported entry.rspec():\n+  \/\/ - relocInfo::external_word_type\n+  \/\/ - relocInfo::runtime_call_type\n+  \/\/ - relocInfo::none\n+  \/\/ In the case of a far call\/jump, the entry address is put in the tmp register.\n+  \/\/ The tmp register is invalidated.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}