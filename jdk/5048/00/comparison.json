{"files":[{"patch":"@@ -271,0 +271,1 @@\n+  const TypeAryPtr* ary_ptr = src->get_ptr_type()->isa_aryptr();\n@@ -272,8 +273,5 @@\n-  if (ac->is_clone_array()) {\n-    const TypeAryPtr* ary_ptr = src->get_ptr_type()->isa_aryptr();\n-    BasicType bt;\n-    if (ary_ptr == NULL) {\n-      \/\/ ary_ptr can be null iff we are running with StressReflectiveCode\n-      \/\/ This code will be unreachable\n-      assert(StressReflectiveCode, \"Guard against surprises\");\n-      bt = T_LONG;\n+  if (ac->is_clone_array() && ary_ptr != NULL) {\n+    BasicType bt = ary_ptr->elem()->array_element_basic_type();\n+    if (is_reference_type(bt)) {\n+      \/\/ Clone object array\n+      bt = T_OBJECT;\n@@ -281,8 +279,2 @@\n-      bt = ary_ptr->elem()->array_element_basic_type();\n-      if (is_reference_type(bt)) {\n-        \/\/ Clone object array\n-        bt = T_OBJECT;\n-      } else {\n-        \/\/ Clone primitive array\n-        bt = T_LONG;\n-      }\n+      \/\/ Clone primitive array\n+      bt = T_LONG;\n@@ -333,1 +325,0 @@\n-  assert(ac->is_clone_inst(), \"Sanity check\");\n@@ -338,1 +329,1 @@\n-  Node* const base_offset = phase->longcon(arraycopy_payload_base_offset(false) >> LogBytesPerLong);\n+  Node* const base_offset = phase->longcon(arraycopy_payload_base_offset(ac->is_clone_array()) >> LogBytesPerLong);\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8155643 8268125 8270461\n+ * @bug 8155643 8268125 8270461 8270098\n@@ -28,0 +28,1 @@\n+ * @modules java.base\/java.lang:+open\n@@ -31,0 +32,1 @@\n+ *                   -XX:CompileCommand=compileonly,jdk.internal.reflect.GeneratedMethodAccessor*::invoke\n@@ -33,0 +35,1 @@\n+ *                   -XX:CompileCommand=compileonly,jdk.internal.reflect.GeneratedMethodAccessor*::invoke\n@@ -36,0 +39,5 @@\n+ *                   -XX:CompileCommand=compileonly,jdk.internal.reflect.GeneratedMethodAccessor*::invoke\n+ *                   compiler.arraycopy.TestObjectArrayClone\n+ * @run main\/othervm -Xbatch -XX:-UseTypeProfile\n+ *                   -XX:CompileCommand=compileonly,compiler.arraycopy.TestObjectArrayClone::testClone*\n+ *                   -XX:CompileCommand=compileonly,jdk.internal.reflect.GeneratedMethodAccessor*::invoke\n@@ -41,0 +49,4 @@\n+import java.lang.invoke.*;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n@@ -62,1 +74,1 @@\n-        } catch(CloneNotSupportedException e) {\n+        } catch (CloneNotSupportedException e) {\n@@ -139,0 +151,11 @@\n+    public static String[] testCloneShortObjectArray2(Method clone) throws Exception {\n+        String[] arr = new String[5];\n+        arr[0] = str1;\n+        arr[1] = str2;\n+        arr[2] = str3;\n+        arr[3] = str4;\n+        arr[4] = str5;\n+        escape_arr = arr;\n+        return (String[]) testCloneObject(clone, arr);\n+    }\n+\n@@ -164,1 +187,8 @@\n-    public static void main(String[] args) {\n+    public static Object testCloneObject(Method clone, Object obj) throws Exception {\n+        return clone.invoke(obj);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Method clone = Object.class.getDeclaredMethod(\"clone\");\n+        clone.setAccessible(true);\n+\n@@ -181,0 +211,14 @@\n+        for (int i = 0; i < 50_000; i++) {\n+            for (int j = 0; j < arr1.length; j++) {\n+                arr1[j] = new String(Integer.toString(j));\n+            }\n+            String[] arr2 = (String[]) testCloneObject(clone, arr1);\n+            verifyStr(arr1, arr2);\n+            String[] arr3 = (String[]) testCloneObject(clone, arr1);\n+            verifyStr(arr1, arr3);\n+            String[] arr4 = (String[]) testCloneObject(clone, arr1);\n+            verifyStr(arr1, arr4);\n+            verifyStr(arr1, arr3);\n+            verifyStr(arr1, arr2);\n+        }\n+\n@@ -188,0 +232,3 @@\n+            String[] value4 = testCloneShortObjectArray2(clone);\n+            verifyStr(value4, escape_arr);\n+            verifyStr(value, value4);\n@@ -214,0 +261,4 @@\n+        int[] arr2 = new int[42];\n+        for (int i = 0; i < arr2.length; i++) {\n+            arr2[i] = i;\n+        }\n@@ -215,1 +266,10 @@\n-            testClonePrimitiveArray(new int[42]);\n+            int[] res1 = testClonePrimitiveArray(arr2);\n+            int[] res2 = (int[])testCloneObject(clone, arr2);\n+            for (int j = 0; j < arr2.length; j++) {\n+                if (res1[j] != j) {\n+                    throw new RuntimeException(\"Unexpected result: \" + res1[j] + \" != \" + j);\n+                }\n+                if (res2[j] != j) {\n+                    throw new RuntimeException(\"Unexpected result: \" + res2[j] + \" != \" + j);\n+                }\n+            }\n@@ -230,0 +290,11 @@\n+        for (int i = 0; i < 50_000; i++) {\n+            Payload p1 = (Payload) testCloneObject(clone, ref);\n+            verifyPayload(ref, p1);\n+            Payload p2 = (Payload) testCloneObject(clone, ref);\n+            verifyPayload(ref, p2);\n+            Payload p3 = (Payload) testCloneObject(clone, ref);\n+            verifyPayload(ref, p3);\n+            verifyPayload(p2, p3);\n+            verifyPayload(p1, p3);\n+        }\n+\n@@ -241,0 +312,11 @@\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            Payload2 p1 = (Payload2) testCloneObject(clone, ref2);\n+            verifyPayload2(ref2, p1);\n+            Payload2 p2 = (Payload2) testCloneObject(clone, ref2);\n+            verifyPayload2(ref2, p2);\n+            Payload2 p3 = (Payload2) testCloneObject(clone, ref2);\n+            verifyPayload2(ref2, p3);\n+            verifyPayload2(p2, p3);\n+            verifyPayload2(p1, p3);\n+        }\n@@ -326,1 +408,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestObjectArrayClone.java","additions":86,"deletions":5,"binary":false,"changes":91,"status":"modified"}]}