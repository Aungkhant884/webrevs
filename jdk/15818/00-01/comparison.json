{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.font.FontRenderContext;\n@@ -64,0 +65,3 @@\n+    \/** Locale for getting font names. *\/\n+    private static final Locale ENGLISH_LOCALE = Locale.ENGLISH;\n+\n@@ -70,1 +74,1 @@\n-                              .getAvailableFontFamilyNames(Locale.ENGLISH))\n+                              .getAvailableFontFamilyNames(ENGLISH_LOCALE))\n@@ -73,0 +77,1 @@\n+                      .filter(font -> !isBrokenFont(font))\n@@ -85,0 +90,20 @@\n+    \/**\n+     * Checks whether the font renders the glyph in {@code TEXT} and\n+     * returns {@code true} if the glyph isn't rendered.\n+     *\n+     * @param font the font to test\n+     * @return {@code true} if the visual bounds of {@code TEXT} are empty, and\n+     *         {@code false} otherwise\n+     *\/\n+    private static boolean isBrokenFont(final Font font) {\n+        final boolean empty =\n+                font.createGlyphVector(new FontRenderContext(null, false, false),\n+                                       TEXT)\n+                    .getVisualBounds()\n+                    .isEmpty();\n+        if (empty) {\n+            System.err.println(\"Broken font: \" + font.getFontName(ENGLISH_LOCALE));\n+        }\n+        return empty;\n+    }\n+\n@@ -148,1 +173,1 @@\n-        String fontName = font.getFontName(Locale.ENGLISH);\n+        String fontName = font.getFontName(ENGLISH_LOCALE);\n@@ -161,4 +186,0 @@\n-     * <p>\n-     * If the left half of the image contains only pixels of the background\n-     * color, the glyph isn't rendered at all, such a font is ignored as if\n-     * it were a success.\n@@ -167,3 +188,2 @@\n-     * @return {@code true} if the hieroglyph is stretched correctly, or\n-     *                      if there's no glyph in the image; or<br>\n-     *         {@code false} if the right half of the image contains only\n+     * @return {@code true} if the hieroglyph is stretched correctly; or\n+     *         {@code false} if right half of the image contains only\n@@ -175,27 +195,0 @@\n-\n-        \/\/ Some fonts map the character to zero-width glyph.\n-        \/\/ Verify the glyph is rendered on the left side of the image.\n-        if (!verifyImage(image, 0, width \/ 2)) {\n-            \/\/ Ignore the broken font\n-            return true;\n-        }\n-\n-        \/\/ There's a glyph on the left side of the image,\n-        \/\/ Verify it is stretched, i.e. it is present on the right side\n-        return verifyImage(image, width \/ 2, width);\n-    }\n-\n-    \/**\n-     * Verifies a portion of the rendered image of the hieroglyph.\n-     * It returns {@code true} if it finds pixels of a different color\n-     * from the background.\n-     *\n-     * @param image the image to verify\n-     * @param startX the starting <i>x<\/i> coordinate\n-     * @param endX the limit for the <i>x<\/i> coordinate\n-     * @return {@code true} if there are non-background color pixels, and\n-     *         {@code false} otherwise\n-     *\/\n-    private static boolean verifyImage(final BufferedImage image,\n-                                       final int startX,\n-                                       final int endX) {\n@@ -203,1 +196,1 @@\n-        for (int x = startX; x < endX; x++) {\n+        for (int x = width \/ 2; x < width; x++) {\n@@ -206,1 +199,1 @@\n-                    \/\/ Any other color but background means there's a glyph\n+                    \/\/ Any other color but background means the glyph is stretched\n@@ -212,1 +205,2 @@\n-        \/\/ There's no glyph in the tested part of the image\n+        \/\/ The right side of the image is filled with the background color only,\n+        \/\/ the glyph isn't stretched.\n","filename":"test\/jdk\/java\/awt\/font\/FontScaling\/StretchedFontTest.java","additions":33,"deletions":39,"binary":false,"changes":72,"status":"modified"}]}