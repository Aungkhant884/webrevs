{"files":[{"patch":"@@ -1636,1 +1636,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n@@ -1658,1 +1658,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n@@ -1713,1 +1713,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    andi(t0, hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    test_bit(t0, hdr, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -806,1 +806,1 @@\n-        __ andi(t0, t, JVM_ACC_HAS_FINALIZER);\n+        __ test_bit(t0, t, exact_log2(JVM_ACC_HAS_FINALIZER));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1162,1 +1162,1 @@\n-  andi(t0, cnt1, 4);\n+  test_bit(t0, cnt1, 2);\n@@ -1174,1 +1174,1 @@\n-  andi(t0, cnt1, 2);\n+  test_bit(t0, cnt1, 1);\n@@ -1187,1 +1187,1 @@\n-    andi(t0, cnt1, 1);\n+    test_bit(t0, cnt1, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED);\n+        __ test_bit(t0, t0, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -250,1 +250,1 @@\n-    __ andi(t1, t1, ShenandoahHeap::HAS_FORWARDED);\n+    __ test_bit(t1, t1, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -254,1 +254,1 @@\n-    __ andi(t0, t1, ShenandoahHeap::WEAK_ROOTS);\n+    __ test_bit(t0, t1, ShenandoahHeap::WEAK_ROOTS_BITPOS);\n@@ -256,1 +256,1 @@\n-    __ andi(t0, t1, ShenandoahHeap::HAS_FORWARDED);\n+    __ test_bit(t0, t1, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -280,1 +280,1 @@\n-    __ andi(t0, t1, 1);\n+    __ test_bit(t0, t1, 0);\n@@ -452,1 +452,1 @@\n-  __ andi(t0, t1, ShenandoahHeap::EVACUATION);\n+  __ test_bit(t0, t1, ShenandoahHeap::EVACUATION_BITPOS);\n@@ -645,1 +645,1 @@\n-  __ andi(tmp, tmp, ShenandoahHeap::MARKING);\n+  __ test_bit(tmp, tmp, ShenandoahHeap::MARKING_BITPOS);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    andi(t0, t1, JavaThread::popframe_pending_bit);\n+    test_bit(t0, t1, exact_log2(JavaThread::popframe_pending_bit));\n@@ -104,1 +104,1 @@\n-    andi(t0, t1, JavaThread::popframe_processing_bit);\n+    test_bit(t0, t1, exact_log2(JavaThread::popframe_processing_bit));\n@@ -526,1 +526,1 @@\n-    andi(t1, t1, SafepointMechanism::poll_bit());\n+    test_bit(t1, t1, exact_log2(SafepointMechanism::poll_bit()));\n@@ -623,1 +623,1 @@\n-  andi(t0, x12, JVM_ACC_SYNCHRONIZED);\n+  test_bit(t0, x12, exact_log2(JVM_ACC_SYNCHRONIZED));\n@@ -808,1 +808,1 @@\n-      andi(tmp, tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n+      test_bit(tmp, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n@@ -1676,1 +1676,1 @@\n-  andi(t0, obj, TypeEntries::type_unknown);\n+  test_bit(t0, obj, exact_log2(TypeEntries::type_unknown));\n@@ -1944,1 +1944,1 @@\n-void InterpreterMacroAssembler::verify_access_flags(Register access_flags, uint32_t flag_bits,\n+void InterpreterMacroAssembler::verify_access_flags(Register access_flags, uint32_t flag,\n@@ -1947,1 +1947,1 @@\n-  andi(t0, access_flags, flag_bits);\n+  test_bit(t0, access_flags, exact_log2(flag));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-  void verify_access_flags(Register access_flags, uint32_t flag_bits,\n+  void verify_access_flags(Register access_flags, uint32_t flag,\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  __ andi(t0, rcounter, 1);\n+  __ test_bit(t0, rcounter, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-  andi(t0, value, JNIHandles::TypeTag::weak_global);\n+  test_bit(t0, value, exact_log2(JNIHandles::TypeTag::weak_global));\n@@ -601,1 +601,1 @@\n-    andi(t0, value, JNIHandles::TypeTag::global); \/\/ Test for global tag.\n+    test_bit(t0, value, exact_log2(JNIHandles::TypeTag::global)); \/\/ Test for global tag.\n@@ -2421,1 +2421,1 @@\n-    andi(t0, t0, SafepointMechanism::poll_bit());\n+    test_bit(t0, t0, exact_log2(SafepointMechanism::poll_bit()));\n@@ -3672,1 +3672,1 @@\n-    andi(t0, t0, 0x1);\n+    test_bit(t0, t0, 0);\n@@ -3913,1 +3913,1 @@\n-    andi(t0, cnt, i);\n+    test_bit(t0, cnt, exact_log2(i));\n@@ -3923,1 +3923,1 @@\n-    andi(t0, cnt, 1);\n+    test_bit(t0, cnt, 0);\n@@ -4481,0 +4481,9 @@\n+\n+void MacroAssembler::test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp) {\n+  assert(bit_pos < 64, \"invalid bit range\");\n+  if (UseZbs) {\n+    bexti(Rd, Rs, bit_pos);\n+    return;\n+  }\n+  andi(Rd, Rs, 1UL << bit_pos, tmp);\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1213,0 +1213,3 @@\n+  \/\/ test single bit in Rs, result is set to Rd\n+  void test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp = t0);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2409,1 +2409,1 @@\n-      __ andi(flag, flag, JVM_ACC_IS_VALUE_BASED_CLASS, tmp \/* tmp *\/);\n+      __ test_bit(flag, flag, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS), tmp \/* tmp *\/);\n@@ -2414,1 +2414,1 @@\n-    __ andi(t0, disp_hdr, markWord::monitor_value);\n+    __ test_bit(t0, disp_hdr, exact_log2(markWord::monitor_value));\n@@ -2513,1 +2513,1 @@\n-    __ andi(t0, tmp, markWord::monitor_value);\n+    __ test_bit(t0, tmp, exact_log2(markWord::monitor_value));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -668,1 +668,1 @@\n-      __ andi(t1, t0, JVM_ACC_STATIC);\n+      __ test_bit(t1, t0, exact_log2(JVM_ACC_STATIC));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -810,1 +810,1 @@\n-      __ andi(t0, count, 4);\n+      __ test_bit(t0, count, 2);\n@@ -832,1 +832,1 @@\n-      __ andi(t0, count, 2);\n+      __ test_bit(t0, count, 1);\n@@ -1698,1 +1698,1 @@\n-    __ andi(t0, t0, 1);\n+    __ test_bit(t0, t0, 0);\n@@ -1779,1 +1779,1 @@\n-    __ andi(t0, src_pos, 1UL << 31);\n+    __ test_bit(t0, src_pos, 31);\n@@ -1787,1 +1787,1 @@\n-    __ andi(t0, dst_pos, 1UL << 31);\n+    __ test_bit(t0, dst_pos, 31);\n@@ -1798,1 +1798,1 @@\n-    __ andi(t0, scratch_length, 1UL << 31);\n+    __ test_bit(t0, scratch_length, 31);\n@@ -1838,1 +1838,1 @@\n-    __ andi(t0, lh, 1UL << 31);\n+    __ test_bit(t0, lh, 31);\n@@ -1889,1 +1889,1 @@\n-    __ andi(t0, x22_elsize, 2);\n+    __ test_bit(t0, x22_elsize, 1);\n@@ -1891,1 +1891,1 @@\n-    __ andi(t0, x22_elsize, 1);\n+    __ test_bit(t0, x22_elsize, 0);\n@@ -1905,1 +1905,1 @@\n-    __ andi(t0, x22_elsize, 1);\n+    __ test_bit(t0, x22_elsize, 0);\n@@ -2080,1 +2080,1 @@\n-          __ andi(t0, to, 1);\n+          __ test_bit(t0, to, 0);\n@@ -2089,1 +2089,1 @@\n-          __ andi(t0, to, 2);\n+          __ test_bit(t0, to, 1);\n@@ -2098,1 +2098,1 @@\n-          __ andi(t0, to, 4);\n+          __ test_bit(t0, to, 2);\n@@ -2142,1 +2142,1 @@\n-        __ andi(t0, count, 1);\n+        __ test_bit(t0, count, 0);\n@@ -2147,1 +2147,1 @@\n-        __ andi(t0, count, 2);\n+        __ test_bit(t0, count, 1);\n@@ -2152,1 +2152,1 @@\n-        __ andi(t0, count, 4);\n+        __ test_bit(t0, count, 2);\n@@ -2157,1 +2157,1 @@\n-        __ andi(t0, count, 1);\n+        __ test_bit(t0, count, 0);\n@@ -2162,1 +2162,1 @@\n-        __ andi(t0, count, 2);\n+        __ test_bit(t0, count, 1);\n@@ -3094,1 +3094,1 @@\n-      andi(t0, count, 0x1);\n+      test_bit(t0, count, 0);\n@@ -3110,1 +3110,1 @@\n-      andi(tmp, count, 0x1);\n+      test_bit(tmp, count, 0);\n@@ -3362,1 +3362,1 @@\n-      andi(t0, i, 0x1);\n+      test_bit(t0, i, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    __ andi(t0, c_rarg3, 1UL << i);\n+    __ test_bit(t0, c_rarg3, i);\n@@ -1084,1 +1084,1 @@\n-    __ andi(t0, t, JVM_ACC_STATIC);\n+    __ test_bit(t0, t, exact_log2(JVM_ACC_STATIC));\n@@ -1273,1 +1273,1 @@\n-    __ andi(t0, t, JVM_ACC_SYNCHRONIZED);\n+    __ test_bit(t0, t, exact_log2(JVM_ACC_SYNCHRONIZED));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1107,1 +1107,1 @@\n-  __ andi(t0, x12, Klass::layout_helper_boolean_diffbit());\n+  __ test_bit(t0, x12, exact_log2(Klass::layout_helper_boolean_diffbit()));\n@@ -2089,1 +2089,1 @@\n-    __ andi(t0, x13, JVM_ACC_HAS_FINALIZER);\n+    __ test_bit(t0, x13, exact_log2(JVM_ACC_HAS_FINALIZER));\n@@ -2259,1 +2259,1 @@\n-  __ andi(t0, index, 1UL << ResolvedIndyEntry::has_appendix_shift);\n+  __ test_bit(t0, index, ResolvedIndyEntry::has_appendix_shift);\n@@ -2522,1 +2522,1 @@\n-  __ andi(t0, raw_flags, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+  __ test_bit(t0, raw_flags, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2621,1 +2621,1 @@\n-    __ andi(t0, x15, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x15, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2831,1 +2831,1 @@\n-    __ andi(t0, x15, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x15, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2932,1 +2932,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2980,1 +2980,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3066,1 +3066,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3110,1 +3110,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3159,1 +3159,1 @@\n-    __ andi(t0, flags, 1UL << ConstantPoolCacheEntry::has_appendix_shift);\n+    __ test_bit(t0, flags, ConstantPoolCacheEntry::has_appendix_shift);\n@@ -3200,1 +3200,1 @@\n-  __ andi(t0, flags, 1UL << ConstantPoolCacheEntry::is_vfinal_shift);\n+  __ test_bit(t0, flags, ConstantPoolCacheEntry::is_vfinal_shift);\n@@ -3292,1 +3292,1 @@\n-  __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_forced_virtual_shift);\n+  __ test_bit(t0, x13, ConstantPoolCacheEntry::is_forced_virtual_shift);\n@@ -3302,1 +3302,1 @@\n-  __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_vfinal_shift);\n+  __ test_bit(t0, x13, ConstantPoolCacheEntry::is_vfinal_shift);\n@@ -3471,1 +3471,1 @@\n-  __ andi(t0, x13, Klass::_lh_instance_slow_path_bit);\n+  __ test_bit(t0, x13, exact_log2(Klass::_lh_instance_slow_path_bit));\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}