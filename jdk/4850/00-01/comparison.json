{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.awt.Button;\n@@ -34,1 +33,0 @@\n-import java.awt.Dialog;\n@@ -36,2 +34,1 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n+import java.awt.BorderLayout;\n@@ -39,0 +36,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -42,16 +41,21 @@\n-    private static void init() {\n-        String[] instructions = {\n-                \"This test assumes and requires that you have a printer installed\",\n-                \"When the dialog appears, increment the number of copies then press OK.\",\n-        };\n-        String[] errorMessage = {\n-                \"Since you did not increase the number of copies in the print dialog the testcase is failed. \" +\n-                \"Please click fail button.\"\n-        };\n-\n-        String[] successMessage = {\n-                \"You have increased the number of copies in the print dialog the testcase is passed. \" +\n-                \"Please click pass button\"\n-        };\n-        Sysout.createDialog();\n-        Sysout.printInstructions(instructions);\n+    private static final Frame instructionFrame = new Frame();\n+    private static volatile boolean testResult;\n+    private static volatile CountDownLatch countDownLatch;\n+\n+    private static void createInstructionUI() {\n+\n+        final String instruction = \"\"\"\n+                This test assumes and requires that you have a printer installed\n+                When the dialog appears, increment the number of copies then\n+                press OK\/Print.The test will throw an exception if you fail\n+                to do this, since,it cannot distinguish that from a failure.\"\"\";\n+\n+        Panel mainControlPanel = new Panel(new BorderLayout());\n+        TextArea instructionTextArea = new TextArea();\n+        instructionTextArea.setText(instruction);\n+        instructionTextArea.setEditable(false);\n+        mainControlPanel.add(instructionTextArea, BorderLayout.CENTER);\n+        instructionFrame.add(mainControlPanel);\n+        instructionFrame.pack();\n+        instructionFrame.setVisible(true);\n+    }\n@@ -59,0 +63,1 @@\n+    public static void showPrintDialog() {\n@@ -60,1 +65,5 @@\n-        if (job.getPrintService() == null || !job.printDialog()) {\n+        if (job.getPrintService() == null) {\n+            System.out.println(\"Looks like printer is not configured. Please install printer and \" +\n+                    \"re-run the test case.\");\n+            testResult = false;\n+            countDownLatch.countDown();\n@@ -63,7 +72,1 @@\n-        if (job.getCopies() == 1) {\n-            Sysout.printInstructions(errorMessage);\n-        }\n-\n-        if (job.getCopies() > 1) {\n-            Sysout.printInstructions(successMessage);\n-        }\n+        checkNoOfCopies(job, job.printDialog());\n@@ -72,48 +75,5 @@\n-    \/*****************************************************\n-     Standard Test Machinery Section\n-     DO NOT modify anything in this section -- it's a\n-     standard chunk of code which has all of the\n-     synchronisation necessary for the test harness.\n-     By keeping it the same in all tests, it is easier\n-     to read and understand someone else's test, as\n-     well as insuring that all tests behave correctly\n-     with the test harness.\n-     There is a section following this for test-defined\n-     classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    public static void main(String args[]) throws InterruptedException {\n-        mainThread = Thread.currentThread();\n-        try {\n-            init();\n-        } catch (TestPassedException e) {\n-            \/\/The test passed, so just return from main and harness will interpret this return as a pass\n-            return;\n-        }\n-\n-        \/*\n-            At this point, neither test passed nor test failed has been\n-            called -- either would have thrown an exception and ended the\n-            test, so we know we have multiple threads.\n-            Test involves other threads, so sleep and wait for them to\n-            called pass() or fail()\n-         *\/\n-        try {\n-            Thread.sleep(sleepTime);\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n-        } catch (InterruptedException e) {\n-            if (!testGeneratedInterrupt) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-            if (theTestPassed == false) {\n-                throw new RuntimeException(failureMessage);\n-            }\n+    public static void checkNoOfCopies(PrinterJob job, boolean pdReturnValue) {\n+        if (pdReturnValue) {\n+            System.out.println(\"User has selected OK\/Print button on the PrintDialog\");\n+        } else {\n+            System.out.println(\"User has selected Cancel button on the PrintDialog\");\n@@ -121,20 +81,7 @@\n-\n-    }\n-\n-    public static synchronized void setTimeoutTo(int seconds) {\n-        sleepTime = seconds * 1000;\n-    }\n-\n-    public static synchronized void pass() {\n-        Sysout.println(\"The test passed.\");\n-        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n-\n-        \/\/ first check if this is executing in main thread\n-        if (mainThread == Thread.currentThread()) {\n-            \/*\n-             * Still in the main thread, so set the flag just for kicks,\n-             * and throw a test passed exception which will be caught\n-             * and end the test.\n-             *\/\n-            theTestPassed = true;\n-            throw new TestPassedException();\n+        int copies = job.getCopies();\n+        if (copies <= 1) {\n+            testResult = false;\n+            System.out.println(\"Expected the number of copies to be more than 1 but got \" + copies);\n+        } else {\n+            testResult = true;\n+            System.out.println(\"Total number of copies : \" + copies);\n@@ -142,6 +89,2 @@\n-        \/*\n-         * pass was called from a different thread, so set the flag and interrupt the main thead.\n-         *\/\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n+        countDownLatch.countDown();\n+        instructionFrame.dispose();\n@@ -150,12 +93,6 @@\n-    public static synchronized void fail() {\n-        \/\/ test writer didn't specify why test failed, so give generic\n-        fail(\"it just plain failed! :-)\");\n-    }\n-\n-    public static synchronized void fail(String whyFailed) {\n-        Sysout.println(\"The test failed: \" + whyFailed);\n-        Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n-        \/\/check if this called from main thread\n-        if (mainThread == Thread.currentThread()) {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException(whyFailed);\n+    public static void main(String[] args) throws InterruptedException {\n+        countDownLatch = new CountDownLatch(1);\n+        createInstructionUI();\n+        showPrintDialog();\n+        if (!countDownLatch.await(5, TimeUnit.MINUTES)) {\n+            throw new RuntimeException(\"Timeout : No action was performed on the test UI.\");\n@@ -163,147 +100,2 @@\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\n-}\n-\n-\/**\n- * This exception is used to exit from any level of call nesting\n- * when it's determined that the test has passed, and immediately\n- * end the test.\n- *\/\n-class TestPassedException extends RuntimeException {\n-}\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n- chunk of code whose purpose is to make user\n- interaction uniform, and thereby make it simpler\n- to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- * This is part of the standard test machinery.\n- * It creates a dialog (with the instructions), and is the interface\n- * for sending text messages to the user.\n- * To print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method.  Put one line of instructions per array entry.\n- * To display a message for the tester to see, simply call Sysout.println\n- * with the string to be displayed.\n- * This mimics System.out.println but works within the test harness as well\n- * as standalone.\n- *\/\n-\n-class Sysout {\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-}\n-\n-\/**\n- * This is part of the standard test machinery.  It provides a place for the\n- * test instructions to be displayed, and a place for interactive messages\n- * to the user to be displayed.\n- * To have the test instructions displayed, see Sysout.\n- * To have a message to the user be displayed, see Sysout.\n- * Do not call anything in this dialog directly.\n- *\/\n-class TestDialog extends Dialog implements ActionListener {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-    Panel buttonP = new Panel();\n-    Button passB = new Button(\"pass\");\n-    Button failB = new Button(\"fail\");\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        passB = new Button(\"pass\");\n-        passB.setActionCommand(\"pass\");\n-        passB.addActionListener(this);\n-        buttonP.add(\"East\", passB);\n-\n-        failB = new Button(\"fail\");\n-        failB.setActionCommand(\"fail\");\n-        failB.addActionListener(this);\n-        buttonP.add(\"West\", failB);\n-\n-        add(\"South\", buttonP);\n-        pack();\n-        setVisible(true);\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        instructionsText.setText(\"\");\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                            lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                } else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-            }\n-        }\n-    }\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-    }\n-\n-    \/**\n-     * Catch presses of the passed and failed buttons. Wimply call the standard pass() or fail()\n-     * static methods of XparColor\n-     *\/\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getActionCommand() == \"pass\") {\n-            DialogCopies.pass();\n-        } else {\n-            DialogCopies.fail();\n+        if (!testResult) {\n+            throw new RuntimeException(\"Test failed!\");\n","filename":"test\/jdk\/java\/awt\/print\/Dialog\/DialogCopies.java","additions":54,"deletions":262,"binary":false,"changes":316,"status":"modified"}]}