{"files":[{"patch":"@@ -362,1 +362,1 @@\n-                      Register in, Register out, Register ct, Register subkeyHtbl, Register pos);\n+                           Register in, Register out, Register ct, XMMRegister aad_hashx, Register pos);\n@@ -365,2 +365,4 @@\n-  void ghash8_encrypt8_parallel_avx2(Register key, Register subkeyHtbl, XMMRegister ctr_blockx, XMMRegister aad_hashx,\n-                                Register in, Register out, Register ct, Register pos, bool out_order, Register rounds);\n+  void ghash8_encrypt8_parallel_avx2(Register key, Register subkeyHtbl, XMMRegister ctr_blockx, Register in,\n+                                     Register out, Register ct, Register pos, bool out_order, Register rounds,\n+                                     XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4,\n+                                     XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, XMMRegister xmm8);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -352,3 +352,2 @@\n-  \/\/ Save rbp and rsp\n-  __ push(rbp);\n-  __ movq(rbp, rsp);\n+  \/\/ Save rsp\n+  __ movq(r14, rsp);\n@@ -361,2 +360,1 @@\n-  __ movq(rsp, rbp);\n-  __ pop(rbp);\n+  __ movq(rsp, r14);\n@@ -3293,0 +3291,6 @@\n+\/\/Implements data * hashkey mod (128, 127, 126, 121, 0)\n+\/\/Inputs:\n+\/\/GH and HK - 128 bits each\n+\/\/Output:\n+\/\/GH = GH * Hashkey mod poly\n+\/\/Temp registers: xmm1, xmm2, xmm3\n@@ -3327,0 +3331,6 @@\n+\/\/Generate 8 constants from the given subkeyH.\n+\/\/Input:\n+\/\/htbl - table containing the initial subkeyH\n+\/\/Output:\n+\/\/htbl - containing 8 H constants\n+\/\/Temp registers: xmm0, xmm1, xmm2, xmm6, xmm11, xmm12\n@@ -3337,1 +3347,1 @@\n-  __ movdqu(xmm2, xmm6);\n+  __ vpsrlq(xmm1, xmm6, 63, Assembler::AVX_128bit);\n@@ -3339,3 +3349,1 @@\n-  __ vpsrlq(xmm2, xmm2, 63, Assembler::AVX_128bit);\n-  __ movdqu(xmm1, xmm2);\n-  __ vpslldq(xmm2, xmm2, 8, Assembler::AVX_128bit);\n+  __ vpslldq(xmm2, xmm1, 8, Assembler::AVX_128bit);\n@@ -3343,0 +3351,1 @@\n+\n@@ -3355,1 +3364,0 @@\n-  __ ret(0);\n@@ -3378,3 +3386,19 @@\n-void StubGenerator::ghash8_encrypt8_parallel_avx2(Register key, Register subkeyHtbl, XMMRegister ctr_blockx, XMMRegister aad_hashx,\n-                                                  Register in, Register out, Register ct, Register pos, bool in_order, Register rounds) {\n-\n+\/\/Encrypts and hashes 8 blocks in an interleaved fashion.\n+\/\/Inputs:\n+\/\/key - key for aes operations\n+\/\/subkeyHtbl - table containing H constants\n+\/\/ctr_blockx - counter for aes operations\n+\/\/in - input buffer\n+\/\/out - output buffer\n+\/\/ct - ciphertext buffer\n+\/\/pos - holds the length processed in this method\n+\/\/in_order - boolean that indicates if incrementing counter without shuffling is needed\n+\/\/rounds - number of aes rounds calculated based on key length\n+\/\/xmm1-xmm8 - holds encrypted counter values\n+\/\/Outputs:\n+\/\/xmm1-xmm8 - encrypted counter values\n+\/\/Temp registers: xmm0, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15\n+void StubGenerator::ghash8_encrypt8_parallel_avx2(Register key, Register subkeyHtbl, XMMRegister ctr_blockx, Register in,\n+                                                  Register out, Register ct, Register pos, bool in_order, Register rounds,\n+                                                  XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4,\n+                                                  XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, XMMRegister xmm8) {\n@@ -3391,7 +3415,3 @@\n-  __ movdqu(Address(rsp, 16 * 0), xmm2);\n-  __ movdqu(Address(rsp, 16 * 1), xmm3);\n-  __ movdqu(Address(rsp, 16 * 2), xmm4);\n-  __ movdqu(Address(rsp, 16 * 3), xmm5);\n-  __ movdqu(Address(rsp, 16 * 4), xmm6);\n-  __ movdqu(Address(rsp, 16 * 5), xmm7);\n-  __ movdqu(Address(rsp, 16 * 6), xmm8);\n+  for (int i = 0; i <= 6; i++) {\n+    __ movdqu(Address(rsp, 16 * i), as_XMMRegister(i + 2));\n+  }\n@@ -3403,6 +3423,3 @@\n-    __ vpaddd(xmm3, xmm1, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm4, xmm2, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm5, xmm3, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm6, xmm4, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm7, xmm5, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm8, xmm6, t5, Assembler::AVX_128bit);\n+    for (int rnum = 1; rnum <= 6; rnum++) {\n+      __ vpaddd(as_XMMRegister(rnum + 2), as_XMMRegister(rnum), t5, Assembler::AVX_128bit);\n+    }\n@@ -3419,6 +3436,3 @@\n-    __ vpaddd(xmm3, xmm1, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm4, xmm2, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm5, xmm3, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm6, xmm4, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm7, xmm5, t5, Assembler::AVX_128bit);\n-    __ vpaddd(xmm8, xmm6, t5, Assembler::AVX_128bit);\n+    for (int rnum = 1; rnum <= 6; rnum++) {\n+      __ vpaddd(as_XMMRegister(rnum + 2), as_XMMRegister(rnum), t5, Assembler::AVX_128bit);\n+    }\n@@ -3541,0 +3555,5 @@\n+\/\/Input:\n+\/\/subkeyHtbl - table containing H constants\n+\/\/Output:\n+\/\/xmm14 - calculated aad hash\n+\/\/Temp registers: xmm0, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15\n@@ -3604,0 +3623,14 @@\n+\/\/Encrypt initial number of 8 blocks\n+\/\/Inputs:\n+\/\/ctr - counter for aes operations\n+\/\/rounds - number of aes rounds calculated based on key length\n+\/\/key - key for aes operations\n+\/\/len - input length to be processed\n+\/\/in - input buffer\n+\/\/out - output buffer\n+\/\/ct - ciphertext buffer\n+\/\/aad_hashx - input aad hash\n+\/\/pos - holds the length processed in this method\n+\/\/Outputs:\n+\/\/xmm1-xmm8 - holds updated encrypted counter values\n+\/\/Temp registers: xmm0, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15\n@@ -3605,1 +3638,1 @@\n-                                        Register out, Register ct, Register subkeyHtbl, Register pos) {\n+                                        Register out, Register ct, XMMRegister aad_hashx, Register pos) {\n@@ -3615,2 +3648,2 @@\n-  \/\/Move AAD_HASH to temp reg\n-  __ movdqu(t2, xmm8);\n+  \/\/Move AAD_HASH to temp reg t3\n+  __ movdqu(t3, aad_hashx);\n@@ -3621,0 +3654,1 @@\n+  __ movdqu(t6, ExternalAddress(counter_mask_linc2_addr()), rbx \/*rscratch*\/ );\n@@ -3622,6 +3656,3 @@\n-  __ vpaddd(xmm3, xmm2, t5, Assembler::AVX_128bit);\n-  __ vpaddd(xmm4, xmm3, t5, Assembler::AVX_128bit);\n-  __ vpaddd(xmm5, xmm4, t5, Assembler::AVX_128bit);\n-  __ vpaddd(xmm6, xmm5, t5, Assembler::AVX_128bit);\n-  __ vpaddd(xmm7, xmm6, t5, Assembler::AVX_128bit);\n-  __ vpaddd(xmm8, xmm7, t5, Assembler::AVX_128bit);\n+  for (int rnum = 1; rnum <= 6; rnum++) {\n+    __ vpaddd(as_XMMRegister(rnum + 2), as_XMMRegister(rnum), t6, Assembler::AVX_128bit);\n+  }\n@@ -3668,3 +3699,1 @@\n-  \/\/The hash should end up in T3\n-  __ movdqu(t3, t2);\n-  \/\/ XOR and store data\n+  \/\/XOR and store data\n@@ -3684,1 +3713,1 @@\n-  \/\/Update len (r14) with the number of blocks processed\n+  \/\/Update len with the number of blocks processed\n@@ -3695,0 +3724,15 @@\n+\/\/AES-GCM interleaved implementation\n+\/\/Inputs:\n+\/\/in - input buffer\n+\/\/len- message length to be processed\n+\/\/ct - cipher text buffer\n+\/\/out - output buffer\n+\/\/key - key for aes operations\n+\/\/state - aad hash for ghash computation\n+\/\/subkeyHtbl- table consisting of H constants\n+\/\/counter - counter for aes operations\n+\/\/Output:\n+\/\/xmm9 - counter value\n+\/\/xmm14 - newly calculated aad hash\n+\/\/rax - length processed\n+\/\/Temp registers: r10, r15, xmm8, xmm9\n@@ -3701,1 +3745,1 @@\n-  Label encrypt_done, encrypt_by_8_parallel, encrypt_by_8_new, encrypt_by_8, hash_last_8, enc_dec_done, generate_htbl_8_blks;\n+  Label encrypt_done, encrypt_by_8_parallel, encrypt_by_8_new, encrypt_by_8, hash_last_8, generate_htbl_8_blks;\n@@ -3709,2 +3753,2 @@\n-  \/\/ Generate 8 constants for htbl\n-  __ call(generate_htbl_8_blks, relocInfo::none);\n+  \/\/Generate 8 constants for htbl\n+  generateHtbl_8_block_avx2(subkeyHtbl, rbx \/*rscratch*\/);\n@@ -3712,1 +3756,1 @@\n-  \/\/ Compute #rounds for AES based on the length of the key array\n+  \/\/Compute #rounds for AES based on the length of the key array\n@@ -3715,1 +3759,1 @@\n-  \/\/ Load and shuffle state and counter values\n+  \/\/Load and shuffle state and counter values\n@@ -3721,1 +3765,1 @@\n-  initial_blocks_avx2(ctr_blockx, rounds, key, len, in, out, ct, subkeyHtbl, pos);\n+  initial_blocks_avx2(ctr_blockx, rounds, key, len, in, out, ct, aad_hashx, pos);\n@@ -3740,1 +3784,2 @@\n-  ghash8_encrypt8_parallel_avx2(key, subkeyHtbl, ctr_blockx, aad_hashx, in, out, ct, pos, false, rounds);\n+  ghash8_encrypt8_parallel_avx2(key, subkeyHtbl, ctr_blockx, in, out, ct, pos, false, rounds,\n+                                xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8);\n@@ -3753,1 +3798,2 @@\n-  ghash8_encrypt8_parallel_avx2(key, subkeyHtbl, ctr_blockx, aad_hashx, in, out, ct, pos, true, rounds);\n+  ghash8_encrypt8_parallel_avx2(key, subkeyHtbl, ctr_blockx, in, out, ct, pos, true, rounds,\n+                                xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8);\n@@ -3770,1 +3816,1 @@\n-  \/\/ xor out round keys\n+  \/\/Xor out round keys\n@@ -3773,1 +3819,0 @@\n-  __ jmp(enc_dec_done);\n@@ -3775,6 +3820,1 @@\n-  __ bind(generate_htbl_8_blks);\n-  generateHtbl_8_block_avx2(subkeyHtbl, rbx \/*rscratch*\/);\n-\n-  __ bind(enc_dec_done);\n-  __ movq(rax, pos);\n-}\n+ }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":101,"deletions":61,"binary":false,"changes":162,"status":"modified"}]}