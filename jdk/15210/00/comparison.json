{"files":[{"patch":"@@ -6234,1 +6234,1 @@\n-void Assembler::testb(Register dst, int imm8) {\n+void Assembler::testb(Register dst, int imm8, bool use_ral) {\n@@ -6237,2 +6237,8 @@\n-    emit_int8((unsigned char)0xA8);\n-    emit_int8(imm8);\n+    if (use_ral) {\n+      emit_int8((unsigned char)0xA8);\n+      emit_int8(imm8);\n+    } else {\n+      emit_int8((unsigned char)0xF6);\n+      emit_int8((unsigned char)0xC4);\n+      emit_int8(imm8);\n+    }\n@@ -10969,0 +10975,30 @@\n+void Assembler::fld_d(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDD);\n+  emit_operand32(rax, adr, 0);\n+}\n+\n+void Assembler::fprem() {\n+  emit_int16((unsigned char)0xD9, (unsigned char)0xF8);\n+}\n+\n+void Assembler::fnstsw_ax() {\n+  emit_int16((unsigned char)0xDF, (unsigned char)0xE0);\n+}\n+\n+void Assembler::fstp_d(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDD);\n+  emit_operand32(rbx, adr, 0);\n+}\n+\n+void Assembler::fstp_d(int index) {\n+  emit_farith(0xDD, 0xD8, index);\n+}\n+\n+void Assembler::emit_farith(int b1, int b2, int i) {\n+  assert(isByte(b1) && isByte(b2), \"wrong opcode\");\n+  assert(0 <= i &&  i < 8, \"illegal stack offset\");\n+  emit_int16(b1, b2 + i);\n+}\n+\n@@ -11012,6 +11048,0 @@\n-void Assembler::emit_farith(int b1, int b2, int i) {\n-  assert(isByte(b1) && isByte(b2), \"wrong opcode\");\n-  assert(0 <= i &&  i < 8, \"illegal stack offset\");\n-  emit_int16(b1, b2 + i);\n-}\n-\n@@ -11179,6 +11209,0 @@\n-void Assembler::fld_d(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDD);\n-  emit_operand32(rax, adr, 0);\n-}\n-\n@@ -11268,8 +11292,0 @@\n-void Assembler::fnstsw_ax() {\n-  emit_int16((unsigned char)0xDF, (unsigned char)0xE0);\n-}\n-\n-void Assembler::fprem() {\n-  emit_int16((unsigned char)0xD9, (unsigned char)0xF8);\n-}\n-\n@@ -11306,10 +11322,0 @@\n-void Assembler::fstp_d(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDD);\n-  emit_operand32(rbx, adr, 0);\n-}\n-\n-void Assembler::fstp_d(int index) {\n-  emit_farith(0xDD, 0xD8, index);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":39,"deletions":33,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1247,1 +1247,6 @@\n-#ifndef _LP64\n+  void fnstsw_ax();\n+  void fprem();\n+  void fld_d(Address adr);\n+  void fstp_d(Address adr);\n+  void fstp_d(int index);\n+\n@@ -1253,0 +1258,1 @@\n+#ifndef _LP64\n@@ -1311,1 +1317,0 @@\n-  void fld_d(Address adr);\n@@ -1340,4 +1345,0 @@\n-\n-  void fnstsw_ax();\n-\n-  void fprem();\n@@ -1355,2 +1356,0 @@\n-  void fstp_d(Address adr);\n-  void fstp_d(int index);\n@@ -2186,1 +2185,1 @@\n-  void testb(Register dst, int imm8);\n+  void testb(Register dst, int imm8, bool use_ral = true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-#if defined(TARGET_COMPILER_gcc) && !defined(_WIN64)\n@@ -89,18 +88,4 @@\n-  jfloat retval;\n-  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n-  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n-  asm (\"\\\n-1:               \\n\\\n-fprem            \\n\\\n-fnstsw %%ax      \\n\\\n-test   $0x4,%%ah \\n\\\n-jne    1b        \\n\\\n-\"\n-    :\"=t\"(retval)\n-    :\"0\"(x), \"u\"(y)\n-    :\"cc\", \"ax\");\n-  } else {\n-    assert(StubRoutines::fmod() != nullptr, \"\");\n-    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n-    jdouble dx = (jdouble) x;\n-    jdouble dy = (jdouble) y;\n+  assert(StubRoutines::fmod() != nullptr, \"\");\n+  jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+  jdouble dx = (jdouble) x;\n+  jdouble dy = (jdouble) y;\n@@ -108,3 +93,1 @@\n-    retval = (jfloat) (*addr)(dx, dy);\n-  }\n-  return retval;\n+  return (jfloat) (*addr)(dx, dy);\n@@ -114,16 +97,2 @@\n-  jdouble retval;\n-  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n-  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n-  asm (\"\\\n-1:               \\n\\\n-fprem            \\n\\\n-fnstsw %%ax      \\n\\\n-test   $0x4,%%ah \\n\\\n-jne    1b        \\n\\\n-\"\n-    :\"=t\"(retval)\n-    :\"0\"(x), \"u\"(y)\n-    :\"cc\", \"ax\");\n-  } else {\n-    assert(StubRoutines::fmod() != nullptr, \"\");\n-    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+  assert(StubRoutines::fmod() != nullptr, \"\");\n+  jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n@@ -131,3 +100,1 @@\n-    retval = (*addr)(x, y);\n-  }\n-  return retval;\n+  return (*addr)(x, y);\n@@ -135,1 +102,0 @@\n-#endif \/\/ TARGET_COMPILER_gcc && !_WIN64\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":8,"deletions":42,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -3982,3 +3982,1 @@\n-  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n-    StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n-  }\n+  StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -515,1 +515,15 @@\n-    assert(false, \"SSE not implemented\");\n+    Label x87_loop;\n+    __ movsd(Address(rbp, -8), xmm1);\n+    __ movsd(Address(rbp, -16), xmm0);\n+    __ fld_d(Address(rbp, -8));\n+    __ fld_d(Address(rbp, -16));\n+\n+    __ bind(x87_loop);\n+    __ fprem();\n+    __ fnstsw_ax();\n+    __ testb(rax, 0x4, false);\n+    __ jcc(Assembler::notZero, x87_loop);\n+\n+    __ fstp_d(1);\n+    __ fstp_d(Address(rbp, -8));\n+    __ movsd(xmm0, Address(rbp, -8));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-#if !defined(X86) || !defined(TARGET_COMPILER_gcc) || defined(_WIN64)\n+#if !defined(X86)\n@@ -273,1 +273,1 @@\n-#endif \/\/ !X86 || !TARGET_COMPILER_gcc || _WIN64\n+#endif \/\/ !X86\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}