{"files":[{"patch":"@@ -5100,0 +5100,8 @@\n+    @Override\n+    public void visitModifiers(JCModifiers tree) {\n+        \/\/error recovery only:\n+        Assert.check(resultInfo.pkind == KindSelector.ERR);\n+\n+        attribAnnotationTypes(tree.annotations, env);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8270139\n+ * @bug 8270139 8273039\n@@ -40,0 +40,1 @@\n+import static jdk.jshell.Snippet.Status.REJECTED;\n@@ -52,0 +53,7 @@\n+\n+    public void testBrokenName() {\n+        assertEval(\"int strictfp = 0;\",\n+                   DiagCheck.DIAG_ERROR,\n+                   DiagCheck.DIAG_IGNORE,\n+                   ste(MAIN_SNIPPET, NONEXISTENT, REJECTED, false, null));\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ErrorRecoveryTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8273039\n+ * @summary Verify error recovery in Attr\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main AttrRecoveryTest\n+*\/\n+\n+import com.sun.source.tree.AnnotationTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.ErroneousTree;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskListener;\n+import com.sun.source.util.TreePath;\n+import com.sun.source.util.TreePathScanner;\n+import com.sun.source.util.Trees;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import javax.lang.model.element.Element;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class AttrRecoveryTest extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new AttrRecoveryTest().runTests();\n+    }\n+\n+    AttrRecoveryTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testModifiers(Path base) throws Exception {\n+        record TestCase(String name, String source, String expectedAnnotation, String... errors) {}\n+        TestCase[] tests = new TestCase[] {\n+            new TestCase(\"a\",\n+                         \"\"\"\n+                         public class Test {\n+                             Object i () { return int strictfp @Deprecated = 0; }\n+                         }\n+                         \"\"\",\n+                         \"java.lang.Deprecated\",\n+                         \"Test.java:2:30: compiler.err.dot.class.expected\",\n+                         \"Test.java:2:51: compiler.err.expected4: class, interface, enum, record\",\n+                         \"Test.java:2:26: compiler.err.unexpected.type: kindname.value, kindname.class\",\n+                         \"3 errors\"),\n+            new TestCase(\"b\",\n+                         \"\"\"\n+                         public class Test {\n+                             Object i () { return int strictfp = 0; }\n+                         }\n+                         \"\"\",\n+                         null,\n+                         \"Test.java:2:30: compiler.err.dot.class.expected\",\n+                         \"Test.java:2:39: compiler.err.expected4: class, interface, enum, record\",\n+                         \"Test.java:2:26: compiler.err.unexpected.type: kindname.value, kindname.class\",\n+                         \"3 errors\")\n+        };\n+        for (TestCase test : tests) {\n+            Path current = base.resolve(\"\" + test.name);\n+            Path src = current.resolve(\"src\");\n+            Path classes = current.resolve(\"classes\");\n+            tb.writeJavaFiles(src,\n+                              test.source);\n+\n+            Files.createDirectories(classes);\n+\n+            var log =\n+                    new JavacTask(tb)\n+                        .options(\"-XDrawDiagnostics\",\n+                                 \"-XDshould-stop.at=FLOW\",\n+                                 \"-Xlint:-preview\")\n+                        .outdir(classes)\n+                        .files(tb.findJavaFiles(src))\n+                        .callback(t -> {\n+                            t.addTaskListener(new TaskListener() {\n+                                CompilationUnitTree parsed;\n+                                @Override\n+                                public void finished(TaskEvent e) {\n+                                    switch (e.getKind()) {\n+                                        case PARSE -> parsed = e.getCompilationUnit();\n+                                        case ANALYZE ->\n+                                            checkAnnotationsValid(t, parsed, test.expectedAnnotation);\n+                                    }\n+                                }\n+                            });\n+                        })\n+                        .run(Task.Expect.FAIL, 1)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+            if (!List.of(test.errors).equals(log)) {\n+                throw new AssertionError(\"Incorrect errors, expected: \" + List.of(test.errors) +\n+                                          \", actual: \" + log);\n+            }\n+        }\n+    }\n+\n+    private void checkAnnotationsValid(com.sun.source.util.JavacTask task,\n+                                       CompilationUnitTree cut,\n+                                       String expected) {\n+        boolean[] foundAnnotation = new boolean[1];\n+        Trees trees = Trees.instance(task);\n+\n+        new TreePathScanner<Void, Void>() {\n+            @Override\n+            public Void visitAnnotation(AnnotationTree node, Void p) {\n+                TreePath typePath = new TreePath(getCurrentPath(), node.getAnnotationType());\n+                Element el = trees.getElement(typePath);\n+                if (el == null || !el.equals(task.getElements().getTypeElement(expected))) {\n+                    throw new AssertionError();\n+                }\n+                foundAnnotation[0] = true;\n+                return super.visitAnnotation(node, p);\n+            }\n+\n+            @Override\n+            public Void visitErroneous(ErroneousTree node, Void p) {\n+                return scan(node.getErrorTrees(), p);\n+            }\n+        }.scan(cut, null);\n+        if (foundAnnotation[0] ^ (expected != null)) {\n+            throw new AssertionError();\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/attr\/AttrRecoveryTest.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}