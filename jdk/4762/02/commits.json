[{"commit":{"message":"macroAssembler_ppc.hpp: add warnings about use of align_prefix()"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp"}],"sha":"f90fbd23e2cee124c0ec27bbfeb8ac53c29bbf12"},{"commit":{"message":"stubGenerator_ppc.cpp: fixes for feedback from Kazunori Ogata and Martin Doerr\n\ndecodeBlock changes:\n\n* Remove unroll loop and associated comments\n* Change comments referring to \"P10+\" to \"P10 (or later)\" to remove ambiguity\n* Make clear the lack of need for \"aligh_prefix()\" calls when using xxpermx due to the align(32) call\n\nThe following change isn't based on feedback:\n\nencodeBlock changes:\n* Fix a comment that still referred to \"unrolled loop\".  Unrolling was removed in an earlier commit."},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp"}],"sha":"1400e26da749a1a7ca312b706ac7473ecdd699ee"},{"commit":{"message":"macroAssembler_ppc.cpp: fix whitespace error"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp"}],"sha":"bfa1d3be82b5c0610a11ed5e0e80c155c7816778"},{"commit":{"message":"stubGenerator_ppc.cpp: decodeBlock(): Use xxpermx to improve performance of decodeBlock on Power10+\n\nxxpermx, available in Power64 ISA 3.1+, provides the ability to do\nlower-cost, large table look-ups.  Here we use it for looking up a 7-bit\nBase64 character and translating it to a 6-bit value, while also detecting\nillegal Base64 characters.  Because Base64 characters are restricted to\nvalues between 32 and 127, we only need three xxpermx instructions to\ncomplete the lookup.\n\nThis yields about a 5% improvement in performance, with a small amount\nadditional overhead per intrinsic call due to need to load constants into\nthe lookup table vector registers."},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp"}],"sha":"fc2b8a21874b3c22fc758ff853fe7981d1f7bb29"},{"commit":{"message":"Add xxpermx instruction, and align_prefix() method\n\nIn addition to the definition of the xxpermx instruction, this commit also\nadds align_prefix() which conditionally adds a nop if needed to push an\ninstruction prefix past the 64-byte cache line boundary as required by the\nISA 3.1 architecture.  Previous commits to add prefixed instructions didn't\nsupport their use from intrinsics, because instruct nodes in ppc.ad can\nspecify their own alignment requirements.  Since we can't make use of\ninstruct mechanism in intrinsics, I have added align_prefix(), which needs\nto be called explicitly for each use of a prefixed instruction.  I feel\nthis is a controversial thing to do, because it requires that anyone using\na prefixed instruction in an intrinsic will need to remember to add a call\nto align_prefix() before each instruction.  We had a discussion here about\nthis, but haven't come up with any alternatives that seem to be workable."},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp"},{"filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp"}],"sha":"4d1c4331752b07061e90f5610c16f24390b5fd2a"},{"commit":{"message":"stubGenerator_cpp.cpp: decodeBlock(): use constant block for loading constants into vector registers for cleaner and faster code\n\nThe code is cleaner because we only need to load one address, and then all\nconstants are loaded from that address plus a specific offset.\n\nThis reduces the overhead of calling the instrinsic, because although the\nconstant loading isn't in the main loop, it is performed on every call to\nthe intrinsic."},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp"}],"sha":"6bcb20a61dbce55bb0118b13460b2ede74e0d2cd"},{"commit":{"message":"stubGenerator_ppc.cpp: Remove p10 pextd optimization\n\nThe use of pextd seemed like a good idea at the time, but benchmarking on a\nreal Power10 machine shows a drop of about 3% in performance over the original\nimplementation.  So revert this optimization attempt."},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp"}],"sha":"911b38e8c7c9f7ecb435d282d1360b3c2512d6bc"}]