{"files":[{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-#include <new>\n-\n-\/\/--------------------------------------------------------------------------------------\n-\/\/ Non-product code\n-\n-#ifndef PRODUCT\n-\/\/ The global operator new should never be called since it will usually indicate\n-\/\/ a memory leak.  Use CHeapObj as the base class of such objects to make it explicit\n-\/\/ that they're allocated on the C heap.\n-\/\/ Commented out in product version to avoid conflicts with third-party C++ native code.\n-\/\/\n-\/\/ In C++98\/03 the throwing new operators are defined with the following signature:\n-\/\/\n-\/\/ void* operator new(std::size_tsize) throw(std::bad_alloc);\n-\/\/ void* operator new[](std::size_tsize) throw(std::bad_alloc);\n-\/\/\n-\/\/ while all the other (non-throwing) new and delete operators are defined with an empty\n-\/\/ throw clause (i.e. \"operator delete(void* p) throw()\") which means that they do not\n-\/\/ throw any exceptions (see section 18.4 of the C++ standard).\n-\/\/\n-\/\/ In the new C++11\/14 standard, the signature of the throwing new operators was changed\n-\/\/ by completely omitting the throw clause (which effectively means they could throw any\n-\/\/ exception) while all the other new\/delete operators where changed to have a 'nothrow'\n-\/\/ clause instead of an empty throw clause.\n-\/\/\n-\/\/ Unfortunately, the support for exception specifications among C++ compilers is still\n-\/\/ very fragile. While some more strict compilers like AIX xlC or HP aCC reject to\n-\/\/ override the default throwing new operator with a user operator with an empty throw()\n-\/\/ clause, the MS Visual C++ compiler warns for every non-empty throw clause like\n-\/\/ throw(std::bad_alloc) that it will ignore the exception specification. The following\n-\/\/ operator definitions have been checked to correctly work with all currently supported\n-\/\/ compilers and they should be upwards compatible with C++11\/14. Therefore\n-\/\/ PLEASE BE CAREFUL if you change the signature of the following operators!\n-\n-static void * zero = (void *) 0;\n-\n-void* operator new(size_t size) \/* throw(std::bad_alloc) *\/ {\n-  fatal(\"Should not call global operator new\");\n-  return zero;\n-}\n-\n-void* operator new [](size_t size) \/* throw(std::bad_alloc) *\/ {\n-  fatal(\"Should not call global operator new[]\");\n-  return zero;\n-}\n-\n-void* operator new(size_t size, const std::nothrow_t&  nothrow_constant) throw() {\n-  fatal(\"Should not call global operator new\");\n-  return 0;\n-}\n-\n-void* operator new [](size_t size, std::nothrow_t&  nothrow_constant) throw() {\n-  fatal(\"Should not call global operator new[]\");\n-  return 0;\n-}\n-\n-void operator delete(void* p) throw() {\n-  fatal(\"Should not call global delete\");\n-}\n-\n-void operator delete [](void* p) throw() {\n-  fatal(\"Should not call global delete []\");\n-}\n-\n-void operator delete(void* p, size_t size) throw() {\n-  fatal(\"Should not call global sized delete\");\n-}\n-\n-void operator delete [](void* p, size_t size) throw() {\n-  fatal(\"Should not call global sized delete []\");\n-}\n-\n-#endif \/\/ Non-product\n","filename":"src\/hotspot\/share\/memory\/operator_new.cpp","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1222,0 +1222,4 @@\n+\/\/----------------------------------------------------------------------------------------------------\n+\n+\/\/ Allow use of C++ thread_local when approved - see JDK-8282469.\n+#define APPROVED_CPP_THREAD_LOCAL thread_local\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}