{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/manual ExhaustingTests\n+ * @run main ExhaustingTests\n@@ -34,0 +34,10 @@\n+\/*\n+ * Note on usage: for more exhaustive testing to help validate changes\n+ * to StrictMath, the DEFAULT_SHIFT setting should be set to 0. This\n+ * will test all float values against the unary methods. Running all\n+ * the float values for a single method takes on the order of a minute\n+ * or two. The default setting is a shift of 10, meaning every 1024th\n+ * float value is tested and the overall test runs within the typical\n+ * time expectations of a tier 1 test.\n+ *\/\n+\n@@ -51,0 +61,2 @@\n+    private static final int DEFAULT_SHIFT = 10;\n+\n@@ -57,2 +69,2 @@\n-         \/\/ new UnaryTestCase(\"sqrt\",  FdlibmTranslit::sqrt,  StrictMath::sqrt),\n-            new UnaryTestCase(\"cbrt\",  FdlibmTranslit::cbrt,  StrictMath::cbrt),\n+         \/\/ new UnaryTestCase(\"sqrt\",  FdlibmTranslit::sqrt,  StrictMath::sqrt,  DEFAULT_SHIFT),\n+            new UnaryTestCase(\"cbrt\",  FdlibmTranslit::cbrt,  StrictMath::cbrt,  DEFAULT_SHIFT),\n@@ -60,3 +72,3 @@\n-         \/\/ new UnaryTestCase(\"log\",   FdlibmTranslit::log,   StrictMath::log),\n-            new UnaryTestCase(\"log10\", FdlibmTranslit::log10, StrictMath::log10),\n-            new UnaryTestCase(\"log1p\", FdlibmTranslit::log1p, StrictMath::log1p),\n+         \/\/ new UnaryTestCase(\"log\",   FdlibmTranslit::log,   StrictMath::log,   DEFAULT_SHIFT),\n+            new UnaryTestCase(\"log10\", FdlibmTranslit::log10, StrictMath::log10, DEFAULT_SHIFT),\n+            new UnaryTestCase(\"log1p\", FdlibmTranslit::log1p, StrictMath::log1p, DEFAULT_SHIFT),\n@@ -64,2 +76,2 @@\n-            new UnaryTestCase(\"exp\",   FdlibmTranslit::exp,   StrictMath::exp),\n-            new UnaryTestCase(\"expm1\", FdlibmTranslit::expm1, StrictMath::expm1),\n+         \/\/ new UnaryTestCase(\"exp\",   FdlibmTranslit::exp,   StrictMath::exp,   DEFAULT_SHIFT),\n+            new UnaryTestCase(\"expm1\", FdlibmTranslit::expm1, StrictMath::expm1, DEFAULT_SHIFT),\n@@ -67,3 +79,3 @@\n-         \/\/ new UnaryTestCase(\"sinh\",  FdlibmTranslit::sinh,  StrictMath::sinh),\n-         \/\/ new UnaryTestCase(\"cosh\",  FdlibmTranslit::cosh,  StrictMath::cosh),\n-         \/\/ new UnaryTestCase(\"tanh\",  FdlibmTranslit::tanh,  StrictMath::tanh),\n+         \/\/ new UnaryTestCase(\"sinh\",  FdlibmTranslit::sinh,  StrictMath::sinh,  DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"cosh\",  FdlibmTranslit::cosh,  StrictMath::cosh,  DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"tanh\",  FdlibmTranslit::tanh,  StrictMath::tanh,  DEFAULT_SHIFT),\n@@ -71,3 +83,3 @@\n-         \/\/ new UnaryTestCase(\"sin\",   FdlibmTranslit::sin,   StrictMath::sin),\n-         \/\/ new UnaryTestCase(\"cos\",   FdlibmTranslit::cos,   StrictMath::cos),\n-         \/\/ new UnaryTestCase(\"tan\",   FdlibmTranslit::tan,   StrictMath::tan),\n+         \/\/ new UnaryTestCase(\"sin\",   FdlibmTranslit::sin,   StrictMath::sin,   DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"cos\",   FdlibmTranslit::cos,   StrictMath::cos,   DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"tan\",   FdlibmTranslit::tan,   StrictMath::tan,   DEFAULT_SHIFT),\n@@ -75,3 +87,3 @@\n-         \/\/ new UnaryTestCase(\"asin\",  FdlibmTranslit::asin,  StrictMath::asin),\n-         \/\/ new UnaryTestCase(\"acos\",  FdlibmTranslit::acos,  StrictMath::acos),\n-         \/\/ new UnaryTestCase(\"atan\",  FdlibmTranslit::atan,  StrictMath::atan),\n+         \/\/ new UnaryTestCase(\"asin\",  FdlibmTranslit::asin,  StrictMath::asin,  DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"acos\",  FdlibmTranslit::acos,  StrictMath::acos,  DEFAULT_SHIFT),\n+         \/\/ new UnaryTestCase(\"atan\",  FdlibmTranslit::atan,  StrictMath::atan,  DEFAULT_SHIFT),\n@@ -84,0 +96,1 @@\n+            int increment = 1 << testCase.shiftDistance;\n@@ -85,1 +98,1 @@\n-                i++;\n+                i += increment;\n@@ -98,1 +111,8 @@\n-                                        DoubleUnaryOperator strictMath) {}\n+                                        DoubleUnaryOperator strictMath,\n+                                        int shiftDistance) {\n+        UnaryTestCase {\n+            if (shiftDistance < 0 || shiftDistance >= 31) {\n+                throw new IllegalArgumentException(\"Shift out of range\");\n+            }\n+        }\n+    }\n@@ -106,0 +126,5 @@\n+\n+        \/\/ Shift of 16 for a binary method gives comparable running\n+        \/\/ time to exhaustive testing of a unary method (testing every\n+        \/\/ 2^16 floating point values over two arguments is 2^32\n+        \/\/ probes).\n@@ -107,2 +132,2 @@\n-            new BinaryTestCase(\"hypot\", FdlibmTranslit::hypot, StrictMath::hypot),\n-         \/\/ new BinaryTestCase(\"atan2\", FdlibmTranslit::atan2, StrictMath::atan2),\n+            new BinaryTestCase(\"hypot\", FdlibmTranslit::hypot, StrictMath::hypot, 20, 20),\n+         \/\/ new BinaryTestCase(\"atan2\", FdlibmTranslit::atan2, StrictMath::atan2, 20, 20),\n@@ -111,1 +136,0 @@\n-        \/\/ to get 2^32 probes for a binary method, sample every 2^16 float values.\n@@ -116,2 +140,5 @@\n-            for (long i = Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i += 65_536) {\n-                for (long j = Integer.MIN_VALUE; j <= Integer.MAX_VALUE; j += 65_536) {\n+            int iIncrement = 1 << testCase.xShift;\n+            int jIncrement = 1 << testCase.yShift;\n+\n+            for (long i = Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i += iIncrement) {\n+                for (long j = Integer.MIN_VALUE; j <= Integer.MAX_VALUE; j += jIncrement) {\n@@ -132,1 +159,10 @@\n-                                         DoubleBinaryOperator strictMath) {}\n+                                         DoubleBinaryOperator strictMath,\n+                                         int xShift,\n+                                         int yShift) {\n+        BinaryTestCase {\n+            if (xShift < 0 || xShift >= 31 ||\n+                yShift < 0 || yShift >= 31 ) {\n+                throw new IllegalArgumentException(\"Shift out of range\");\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/StrictMath\/ExhaustingTests.java","additions":61,"deletions":25,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -89,4 +89,0 @@\n-    public static double exp(double x) {\n-        return Exp.compute(x);\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/StrictMath\/FdlibmTranslit.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}