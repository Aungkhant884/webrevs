{"files":[{"patch":"@@ -33,13 +33,4 @@\n-import java.awt.Frame;\n-import java.awt.GridBagLayout;\n-import java.awt.GridBagConstraints;\n-import java.awt.Panel;\n-import java.awt.TextArea;\n-import java.awt.Button;\n-import java.awt.Scrollbar;\n-import java.awt.Component;\n-import java.awt.Graphics;\n-import java.awt.Color;\n-import java.awt.Insets;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n+import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseEvent;\n@@ -53,1 +44,1 @@\n-public class ScrollBarBorderTest implements ActionListener {\n+public class ScrollBarBorderTest {\n@@ -69,13 +60,2 @@\n-    private static Frame instructionFrame;\n-    private static GridBagLayout layout;\n-    private static Panel mainControlPanel;\n-    private static Panel resultButtonPanel;\n-    private static TextArea instructionTextArea;\n-    private static Button passButton;\n-    private static Button failButton;\n-    private static Thread mainThread = null;\n-    private static boolean testPassed = false;\n-    private static boolean isInterrupted = false;\n-    private static final int testTimeOut = 300000;\n-    private static String testFailMessage = \"Test Failed. Thumb was able to move into border.\";\n-\n+    private static Robot robot;\n+    private int thumbPressed = 0;\n@@ -87,0 +67,9 @@\n+        scrollBar.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mousePressed(MouseEvent e) throws RuntimeException {\n+                thumbPressed++;\n+                if(thumbPressed > 1) {\n+                    throw new RuntimeException(\"Thumb was able to move into the border.\");\n+                }\n+            }\n+        });\n@@ -104,72 +93,0 @@\n-    private void createInstructionUI() {\n-        instructionFrame = new Frame(\"Scrollbar\");\n-        layout = new GridBagLayout();\n-        mainControlPanel = new Panel(layout);\n-        resultButtonPanel = new Panel(layout);\n-\n-        GridBagConstraints gbc = new GridBagConstraints();\n-        String instructions\n-                = \"\\nINSTRUCTIONS:\\n\"\n-                + \"\\n   Try to drag the thumb of the scrollbar into the red zone.\"\n-                + \"\\n   If the thumb is able to go into the red zone, click fail.\"\n-                + \"\\n   Otherwise, pass.\";\n-\n-        instructionTextArea = new TextArea(7, 70);\n-        instructionTextArea.setText(instructions);\n-        instructionTextArea.setEnabled(false);\n-        instructionTextArea.setBackground(Color.white);\n-\n-        gbc.gridx = 0;\n-        gbc.gridy = 0;\n-        gbc.weightx = 0.5;\n-        gbc.fill = GridBagConstraints.HORIZONTAL;\n-        mainControlPanel.add(instructionTextArea, gbc);\n-\n-        passButton = new Button(\"Pass\");\n-        passButton.setName(\"Pass\");\n-        passButton.addActionListener((ActionListener) this);\n-\n-        failButton = new Button(\"Fail\");\n-        failButton.setName(\"Fail\");\n-        failButton.addActionListener((ActionListener) this);\n-\n-        setButtonEnable(true);\n-\n-        gbc.gridx = 0;\n-        gbc.gridy = 0;\n-        resultButtonPanel.add(passButton, gbc);\n-        gbc.gridx = 1;\n-        gbc.gridy = 0;\n-        resultButtonPanel.add(failButton, gbc);\n-        gbc.gridx = 0;\n-        gbc.gridy = 1;\n-        mainControlPanel.add(resultButtonPanel, gbc);\n-\n-        instructionFrame.add(mainControlPanel);\n-        instructionFrame.pack();\n-        instructionFrame.setVisible(true);\n-    }\n-\n-    @Override\n-    public void actionPerformed(ActionEvent ae) {\n-        if (ae.getSource() instanceof Button) {\n-            Button btn = (Button) ae.getSource();\n-            switch (btn.getName()) {\n-                case \"Pass\":\n-                    testPassed = true;\n-                    isInterrupted = true;\n-                    mainThread.interrupt();\n-                    break;\n-                case \"Fail\":\n-                    testPassed = false;\n-                    isInterrupted = true;\n-                    mainThread.interrupt();\n-                    break;\n-            }\n-        }\n-    }\n-\n-    private static void setButtonEnable(boolean status) {\n-        passButton.setEnabled(status);\n-        failButton.setEnabled(status);\n-    }\n@@ -179,1 +96,0 @@\n-        instructionFrame.dispose();\n@@ -184,1 +100,0 @@\n-        borderTest.createInstructionUI();\n@@ -187,1 +102,0 @@\n-        mainThread = Thread.currentThread();\n@@ -189,7 +103,3 @@\n-            mainThread.sleep(testTimeOut);\n-        } catch (InterruptedException ex) {\n-            if (!testPassed) {\n-                throw new RuntimeException(testFailMessage);\n-            }\n-        } finally {\n-            cleanUp();\n+            robot = new Robot();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to create Robot.\");\n@@ -197,0 +107,2 @@\n+        robot.setAutoDelay(50);\n+        robot.waitForIdle();\n@@ -198,4 +110,18 @@\n-        if (!isInterrupted) {\n-            throw new RuntimeException(\"Test Timed out after \"\n-                    + testTimeOut \/ 1000 + \" seconds\");\n-        }\n+        Point p = frame.getLocationOnScreen();\n+\n+        robot.mouseMove(p.x + 40, p.y + 95);\n+        robot.mousePress(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mouseMove(p.x + 480, p.y + 95);\n+        robot.mouseRelease(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mousePress(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mouseRelease(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+\n+        cleanUp();\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":39,"deletions":113,"binary":false,"changes":152,"status":"modified"}]}