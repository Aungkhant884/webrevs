{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -147,1 +147,2 @@\n-        painter.paint(g, c, 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Rectangle trackBounds = getTrackBounds();\n+        painter.paint(g, c, trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);\n@@ -191,1 +192,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, insets.top,\n+                fScrollBar.getWidth() - (insets.left + insets.right),\n+                fScrollBar.getHeight() - (insets.top + insets.bottom));\n@@ -195,1 +199,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, insets.top,\n+            fScrollBar.getWidth() - (insets.left + insets.right),\n+            fScrollBar.getHeight() - (insets.top + insets.bottom));\n@@ -231,1 +238,4 @@\n-        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), x, y);\n+        Insets insets = fScrollBar.getInsets();\n+        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0,\n+                fScrollBar.getWidth() - (insets.left + insets.right),\n+                fScrollBar.getHeight() - (insets.top + insets.bottom), x, y);\n@@ -347,1 +357,3 @@\n-            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), offsetWeCareAbout, visibleAmt, extent);\n+            final Rectangle limitRect = getDragBounds(); \/\/ GetThemeTrackDragRect\n+            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(),\n+                    limitRect.x, limitRect.y, limitRect.width, limitRect.height, offsetWeCareAbout, visibleAmt, extent);\n@@ -600,1 +612,1 @@\n-        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), ScrollBarPart.THUMB);\n+        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), limitRect.x, limitRect.y, limitRect.width, limitRect.height, ScrollBarPart.THUMB);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaScrollBarUI.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ImageObserver;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JScrollBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.border.Border;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+\/*\n+ * @test\n+ * @bug 8190264\n+ * @summary JScrollBar ignores its border when using macOS Mac OS X Aqua look and feel\n+ * @run main ScrollBarBorderTest\n+ *\/\n+public class ScrollBarBorderTest {\n+    private static JScrollBar scrollBar;\n+    public static final int BORDER_WIDTH = 150;\n+    public static final int WIDTH = BORDER_WIDTH + 200;\n+    public static final int HEIGHT = 20;\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+            System.out.println(laf.getName());\n+        } catch (UnsupportedLookAndFeelException ignored){\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void testHorizontal() {\n+        \/\/ create scroll bar\n+        scrollBar = new JScrollBar(JScrollBar.HORIZONTAL);\n+        scrollBar.setSize(WIDTH, HEIGHT);\n+        scrollBar.setBorder(new HorizontalCustomBorder());\n+\n+        \/\/ paint image with thumb set to default value\n+        BufferedImage image1 = new BufferedImage(WIDTH, HEIGHT, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = image1.createGraphics();\n+        scrollBar.paint(graphics2D);\n+        graphics2D.dispose();\n+\n+        \/\/ paint image with thumb set to max value\n+        scrollBar.setValue(Integer.MAX_VALUE);\n+        BufferedImage image2 = new BufferedImage(WIDTH, HEIGHT, TYPE_INT_ARGB);\n+        Graphics2D graphics2D2 = image2.createGraphics();\n+        scrollBar.paint(graphics2D2);\n+        graphics2D2.dispose();\n+\n+        \/\/ check border for thumb\n+        for (int i = WIDTH - BORDER_WIDTH; i < WIDTH; i++) {\n+            for (int j = 0; j < HEIGHT; j++) {\n+                int c1 = image1.getRGB(i,j);\n+                int c2 = image2.getRGB(i,j);\n+                if(c1 != c2) {\n+                    System.out.println(i + \" \" + j + \" \" + \"Color1: \"\n+                                       + Integer.toHexString(c1));\n+                    System.out.println(i + \" \" + j + \" \" + \"Color2: \"\n+                                       + Integer.toHexString(c2));\n+                    saveImage(image1, \"himage1.png\");\n+                    saveImage(image2, \"himage2.png\");\n+                    throw new RuntimeException(\"Horizontal border has a thumb in it\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void testVertical() {\n+        \/\/ create scroll bar\n+        scrollBar = new JScrollBar(JScrollBar.VERTICAL);\n+        scrollBar.setSize(HEIGHT, WIDTH);\n+        scrollBar.setBorder(new VerticalCustomBorder());\n+\n+        \/\/ paint image with thumb set to 0\n+        scrollBar.setValue(0);\n+        BufferedImage image1 = new BufferedImage(HEIGHT, WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = image1.createGraphics();\n+        scrollBar.paint(graphics2D);\n+        graphics2D.dispose();\n+\n+        \/\/ paint image with thumb set to max value\n+        scrollBar.setValue(Integer.MAX_VALUE);\n+        BufferedImage image2 = new BufferedImage(HEIGHT, WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D2 = image2.createGraphics();\n+        scrollBar.paint(graphics2D2);\n+        graphics2D2.dispose();\n+\n+        \/\/ check border for thumb\n+        for (int i = WIDTH - BORDER_WIDTH; i < WIDTH; i++) {\n+            for (int j = 0; j < HEIGHT; j++) {\n+                int c1 = image1.getRGB(j,i);\n+                int c2 = image2.getRGB(j,i);\n+                if(c1 != c2) {\n+                    System.out.println(i + \" \" + j + \" \" + \"Color1: \"\n+                                       + Integer.toHexString(c1));\n+                    System.out.println(i + \" \" + j + \" \" + \"Color2: \"\n+                                       + Integer.toHexString(c2));\n+                    saveImage(image1, \"vimage1.png\");\n+                    saveImage(image2, \"vimage2.png\");\n+                    throw new RuntimeException(\"Vertical border has a thumb in it\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            \/\/ Don't propagate the exception\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                SwingUtilities.invokeAndWait(ScrollBarBorderTest::testHorizontal);\n+                SwingUtilities.invokeAndWait(ScrollBarBorderTest::testVertical);\n+        }\n+    }\n+\n+    \/\/ custom border\n+    private static class HorizontalCustomBorder implements Border {\n+        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n+            g.setColor(new Color(255, 0, 0, 100));\n+            g.fillRect(width - BORDER_WIDTH, y, width, height);\n+        }\n+\n+        public Insets getBorderInsets(Component c) {\n+            return new Insets(0, 0, 0, 150);\n+        }\n+\n+        public boolean isBorderOpaque() {\n+            return true;\n+        }\n+    }\n+\n+    \/\/ custom border\n+    private static class VerticalCustomBorder implements Border {\n+        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n+            g.setColor(new Color(255, 0, 0, 100));\n+            g.fillRect(x, height - BORDER_WIDTH, width, height);\n+        }\n+\n+        public Insets getBorderInsets(Component c) {\n+            return new Insets(0, 0, 150, 0);\n+        }\n+\n+        public boolean isBorderOpaque() {\n+            return true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}