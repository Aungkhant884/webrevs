{"files":[{"patch":"@@ -147,1 +147,2 @@\n-        painter.paint(g, c, 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Rectangle trackBounds = getTrackBounds();\n+        painter.paint(g, c, trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);\n@@ -191,1 +192,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, 0,\n+                fScrollBar.getWidth() - (insets.left + insets.right),\n+                fScrollBar.getHeight());\n@@ -195,1 +199,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, 0,\n+            fScrollBar.getWidth() - (insets.left + insets.right),\n+            fScrollBar.getHeight());\n@@ -231,1 +238,3 @@\n-        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), x, y);\n+        Insets insets = fScrollBar.getInsets();\n+        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0,\n+                fScrollBar.getWidth() - (insets.left + insets.right), fScrollBar.getHeight(), x, y);\n@@ -347,1 +356,3 @@\n-            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), offsetWeCareAbout, visibleAmt, extent);\n+            final Rectangle limitRect = getDragBounds(); \/\/ GetThemeTrackDragRect\n+            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(),\n+                    limitRect.x, limitRect.y, limitRect.width, limitRect.height, offsetWeCareAbout, visibleAmt, extent);\n@@ -600,1 +611,1 @@\n-        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), ScrollBarPart.THUMB);\n+        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), limitRect.x, limitRect.y, limitRect.width, limitRect.height, ScrollBarPart.THUMB);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaScrollBarUI.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JScrollBar;\n+import javax.swing.JPanel;\n+import javax.swing.JFrame;\n+import javax.swing.BoxLayout;\n+import javax.swing.JLabel;\n+import javax.swing.Box;\n+import javax.swing.UIManager;\n+import javax.swing.border.Border;\n+import javax.swing.border.EmptyBorder;\n+import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 8190264\n+ * @summary JScrollBar ignores its border when using macOS Mac OS X Aqua look and feel\n+ * @run main ScrollBarBorderTest\n+ *\/\n+public class ScrollBarBorderTest {\n+\n+    \/\/ On macOS 10.12.6 using the Mac look and feel (com.apple.laf.AquaLookAndFeel)\n+    \/\/ the scroll bar ignores the custom border and allows the scroll thumb to move\n+    \/\/ beneath the border. Run with:\n+    \/\/ java ScrollBarBorderTest\n+\n+    \/\/ If run using any other look and feel (e.g. Metal) then the right side of\n+    \/\/ the scroll bar stops at the border as expected. Run with:\n+    \/\/ java -Dswing.defaultlaf=javax.swing.plaf.metal.MetalLookAndFeel ScrollBarBorderTest\n+\n+    \/\/ Java version: 1.8.0_151\n+\n+    private static JScrollBar scrollBar;\n+    private static JPanel panel;\n+    private static JFrame frame;\n+    private static Robot robot;\n+    private int thumbPressed = 0;\n+\n+    public void createAndShowGUI() {\n+        \/\/ create scroll bar\n+        scrollBar = new JScrollBar(Scrollbar.HORIZONTAL);\n+        scrollBar.setBorder(new CustomBorder());\n+        scrollBar.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mousePressed(MouseEvent e) throws RuntimeException {\n+                thumbPressed++;\n+                if(thumbPressed > 1) {\n+                    throw new RuntimeException(\"Thumb was able to move into the border.\");\n+                }\n+            }\n+        });\n+\n+        \/\/ create panel\n+        panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+        panel.setBorder(new EmptyBorder(20, 20, 20, 20));\n+        panel.add(new JLabel(UIManager.getLookAndFeel().toString()));\n+        panel.add(Box.createVerticalStrut(20));\n+        panel.add(scrollBar);\n+\n+        \/\/ create frame\n+        frame = new JFrame(\"ScrollBarBorderTest\");\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.getContentPane().add(panel);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+\n+    private static void cleanUp() {\n+        frame.dispose();\n+    }\n+\n+    public static void main(String[] args) {\n+        ScrollBarBorderTest borderTest = new ScrollBarBorderTest();\n+        borderTest.createAndShowGUI();\n+\n+        try {\n+            robot = new Robot();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to create Robot.\");\n+        }\n+        robot.setAutoDelay(50);\n+        robot.waitForIdle();\n+\n+        Point p = frame.getLocationOnScreen();\n+\n+        robot.mouseMove(p.x + 40, p.y + 95);\n+        robot.mousePress(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mouseMove(p.x + 480, p.y + 95);\n+        robot.mouseRelease(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mousePress(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+        robot.mouseRelease(MouseEvent.getMaskForButton(MouseEvent.BUTTON1));\n+        robot.waitForIdle();\n+\n+\n+        cleanUp();\n+    }\n+\n+\n+    \/\/ custom border\n+    private static class CustomBorder implements Border {\n+        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n+            g.setColor(new Color(255, 0, 0, 100));\n+            g.fillRect(width - 150, y, width, height);\n+        }\n+\n+        public Insets getBorderInsets(Component c) {\n+            return new Insets(0, 0, 0, 150);\n+        }\n+\n+        public boolean isBorderOpaque() {\n+            return true;\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}