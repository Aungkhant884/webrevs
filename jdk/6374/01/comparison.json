{"files":[{"patch":"@@ -147,1 +147,2 @@\n-        painter.paint(g, c, 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Rectangle trackBounds = getTrackBounds();\n+        painter.paint(g, c, trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);\n@@ -191,1 +192,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, 0,\n+                fScrollBar.getWidth() - (insets.left + insets.right),\n+                fScrollBar.getHeight());\n@@ -195,1 +199,4 @@\n-        return new Rectangle(0, 0, fScrollBar.getWidth(), fScrollBar.getHeight());\n+        Insets insets = fScrollBar.getInsets();\n+        return new Rectangle(insets.left, 0,\n+            fScrollBar.getWidth() - (insets.left + insets.right),\n+            fScrollBar.getHeight());\n@@ -231,1 +238,3 @@\n-        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), x, y);\n+        Insets insets = fScrollBar.getInsets();\n+        return JRSUIUtils.HitDetection.getHitForPoint(painter.getControl(), 0, 0,\n+                fScrollBar.getWidth() - (insets.left + insets.right), fScrollBar.getHeight(), x, y);\n@@ -347,1 +356,3 @@\n-            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), offsetWeCareAbout, visibleAmt, extent);\n+            final Rectangle limitRect = getDragBounds(); \/\/ GetThemeTrackDragRect\n+            final double offsetChange = JRSUIUtils.ScrollBar.getNativeOffsetChange(painter.getControl(),\n+                    limitRect.x, limitRect.y, limitRect.width, limitRect.height, offsetWeCareAbout, visibleAmt, extent);\n@@ -600,1 +611,1 @@\n-        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), 0, 0, fScrollBar.getWidth(), fScrollBar.getHeight(), ScrollBarPart.THUMB);\n+        JRSUIUtils.ScrollBar.getPartBounds(rect, painter.getControl(), limitRect.x, limitRect.y, limitRect.width, limitRect.height, ScrollBarPart.THUMB);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaScrollBarUI.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+import javax.swing.JScrollBar;\r\n+import javax.swing.JPanel;\r\n+import javax.swing.JFrame;\r\n+import javax.swing.BoxLayout;\r\n+import javax.swing.JLabel;\r\n+import javax.swing.Box;\r\n+import javax.swing.UIManager;\r\n+import javax.swing.border.Border;\r\n+import javax.swing.border.EmptyBorder;\r\n+import java.awt.Frame;\r\n+import java.awt.GridBagLayout;\r\n+import java.awt.GridBagConstraints;\r\n+import java.awt.Panel;\r\n+import java.awt.TextArea;\r\n+import java.awt.Button;\r\n+import java.awt.Scrollbar;\r\n+import java.awt.Component;\r\n+import java.awt.Graphics;\r\n+import java.awt.Color;\r\n+import java.awt.Insets;\r\n+import java.awt.event.ActionEvent;\r\n+import java.awt.event.ActionListener;\r\n+\r\n+\/*\r\n+ * @test\r\n+ * @run main\/manual ScrollBarBorderTest\r\n+ *\/\r\n+public class ScrollBarBorderTest implements ActionListener {\r\n+\r\n+    \/\/ On macOS 10.12.6 using the Mac look and feel (com.apple.laf.AquaLookAndFeel)\r\n+    \/\/ the scroll bar ignores the custom border and allows the scroll thumb to move\r\n+    \/\/ beneath the border. Run with:\r\n+    \/\/ java ScrollBarBorderTest\r\n+\r\n+    \/\/ If run using any other look and feel (e.g. Metal) then the right side of\r\n+    \/\/ the scroll bar stops at the border as expected. Run with:\r\n+    \/\/ java -Dswing.defaultlaf=javax.swing.plaf.metal.MetalLookAndFeel ScrollBarBorderTest\r\n+\r\n+    \/\/ Java version: 1.8.0_151\r\n+\r\n+    private static JScrollBar scrollBar;\r\n+    private static JPanel panel;\r\n+    private static JFrame frame;\r\n+    private static Frame instructionFrame;\r\n+    private static GridBagLayout layout;\r\n+    private static Panel mainControlPanel;\r\n+    private static Panel resultButtonPanel;\r\n+    private static TextArea instructionTextArea;\r\n+    private static Button passButton;\r\n+    private static Button failButton;\r\n+    private static Thread mainThread = null;\r\n+    private static boolean testPassed = false;\r\n+    private static boolean isInterrupted = false;\r\n+    private static final int testTimeOut = 300000;\r\n+    private static String testFailMessage = \"Test Failed. Thumb was able to move into border.\";\r\n+\r\n+\r\n+    public void createAndShowGUI() {\r\n+        \/\/ create scroll bar\r\n+        scrollBar = new JScrollBar(Scrollbar.HORIZONTAL);\r\n+        scrollBar.setBorder(new CustomBorder());\r\n+\r\n+        \/\/ create panel\r\n+        panel = new JPanel();\r\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\r\n+        panel.setBorder(new EmptyBorder(20, 20, 20, 20));\r\n+        panel.add(new JLabel(UIManager.getLookAndFeel().toString()));\r\n+        panel.add(Box.createVerticalStrut(20));\r\n+        panel.add(scrollBar);\r\n+\r\n+        \/\/ create frame\r\n+        frame = new JFrame(\"ScrollBarBorderTest\");\r\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n+        frame.getContentPane().add(panel);\r\n+        frame.pack();\r\n+        frame.setVisible(true);\r\n+    }\r\n+\r\n+    private void createInstructionUI() {\r\n+        instructionFrame = new Frame(\"Scrollbar\");\r\n+        layout = new GridBagLayout();\r\n+        mainControlPanel = new Panel(layout);\r\n+        resultButtonPanel = new Panel(layout);\r\n+\r\n+        GridBagConstraints gbc = new GridBagConstraints();\r\n+        String instructions\r\n+                = \"\\nINSTRUCTIONS:\\n\"\r\n+                + \"\\n   Try to drag the thumb of the scrollbar into the red zone.\"\r\n+                + \"\\n   If the thumb is able to go into the red zone, click fail.\"\r\n+                + \"\\n   Otherwise, pass.\";\r\n+\r\n+        instructionTextArea = new TextArea(7, 70);\r\n+        instructionTextArea.setText(instructions);\r\n+        instructionTextArea.setEnabled(false);\r\n+        instructionTextArea.setBackground(Color.white);\r\n+\r\n+        gbc.gridx = 0;\r\n+        gbc.gridy = 0;\r\n+        gbc.weightx = 0.5;\r\n+        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n+        mainControlPanel.add(instructionTextArea, gbc);\r\n+\r\n+        passButton = new Button(\"Pass\");\r\n+        passButton.setName(\"Pass\");\r\n+        passButton.addActionListener((ActionListener) this);\r\n+\r\n+        failButton = new Button(\"Fail\");\r\n+        failButton.setName(\"Fail\");\r\n+        failButton.addActionListener((ActionListener) this);\r\n+\r\n+        setButtonEnable(true);\r\n+\r\n+        gbc.gridx = 0;\r\n+        gbc.gridy = 0;\r\n+        resultButtonPanel.add(passButton, gbc);\r\n+        gbc.gridx = 1;\r\n+        gbc.gridy = 0;\r\n+        resultButtonPanel.add(failButton, gbc);\r\n+        gbc.gridx = 0;\r\n+        gbc.gridy = 1;\r\n+        mainControlPanel.add(resultButtonPanel, gbc);\r\n+\r\n+        instructionFrame.add(mainControlPanel);\r\n+        instructionFrame.pack();\r\n+        instructionFrame.setVisible(true);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void actionPerformed(ActionEvent ae) {\r\n+        if (ae.getSource() instanceof Button) {\r\n+            Button btn = (Button) ae.getSource();\r\n+            switch (btn.getName()) {\r\n+                case \"Pass\":\r\n+                    testPassed = true;\r\n+                    isInterrupted = true;\r\n+                    mainThread.interrupt();\r\n+                    break;\r\n+                case \"Fail\":\r\n+                    testPassed = false;\r\n+                    isInterrupted = true;\r\n+                    mainThread.interrupt();\r\n+                    break;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void setButtonEnable(boolean status) {\r\n+        passButton.setEnabled(status);\r\n+        failButton.setEnabled(status);\r\n+    }\r\n+\r\n+    private static void cleanUp() {\r\n+        frame.dispose();\r\n+        instructionFrame.dispose();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        ScrollBarBorderTest borderTest = new ScrollBarBorderTest();\r\n+        borderTest.createInstructionUI();\r\n+        borderTest.createAndShowGUI();\r\n+\r\n+        mainThread = Thread.currentThread();\r\n+        try {\r\n+            mainThread.sleep(testTimeOut);\r\n+        } catch (InterruptedException ex) {\r\n+            if (!testPassed) {\r\n+                throw new RuntimeException(testFailMessage);\r\n+            }\r\n+        } finally {\r\n+            cleanUp();\r\n+        }\r\n+\r\n+        if (!isInterrupted) {\r\n+            throw new RuntimeException(\"Test Timed out after \"\r\n+                    + testTimeOut \/ 1000 + \" seconds\");\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    \/\/ custom border\r\n+    private static class CustomBorder implements Border {\r\n+        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\r\n+            g.setColor(new Color(255, 0, 0, 100));\r\n+            g.fillRect(width - 150, y, width, height);\r\n+        }\r\n+\r\n+        public Insets getBorderInsets(Component c) {\r\n+            return new Insets(0, 0, 0, 150);\r\n+        }\r\n+\r\n+        public boolean isBorderOpaque() {\r\n+            return true;\r\n+        }\r\n+    }\r\n+\r\n+} \n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"}]}