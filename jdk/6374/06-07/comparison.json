{"files":[{"patch":"@@ -24,7 +24,1 @@\n-import javax.swing.JScrollBar;\n-import javax.swing.JPanel;\n-import javax.swing.JFrame;\n-import javax.swing.BoxLayout;\n-import javax.swing.JLabel;\n-import javax.swing.Box;\n-import javax.swing.UIManager;\n+import javax.swing.*;\n@@ -34,2 +28,3 @@\n-import java.awt.event.MouseAdapter;\n-import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n@@ -59,22 +54,0 @@\n-    private static Robot robot;\n-\n-    public void createAndShowGUI() {\n-        \/\/ create scroll bar\n-        scrollBar = new JScrollBar(Scrollbar.HORIZONTAL);\n-        scrollBar.setBorder(new CustomBorder());\n-\n-        \/\/ create panel\n-        panel = new JPanel();\n-        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n-        panel.setBorder(new EmptyBorder(20, 20, 20, 20));\n-        panel.add(new JLabel(UIManager.getLookAndFeel().toString()));\n-        panel.add(Box.createVerticalStrut(20));\n-        panel.add(scrollBar);\n-\n-        \/\/ create frame\n-        frame = new JFrame(\"ScrollBarBorderTest\");\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.getContentPane().add(panel);\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n@@ -82,3 +55,37 @@\n-\n-    private static void cleanUp() {\n-        frame.dispose();\n+    public void createImage(int scrollbarValue, final BufferedImage image) throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                \/\/ create scroll bar\n+                scrollBar = new JScrollBar(Scrollbar.HORIZONTAL);\n+                scrollBar.setBorder(new CustomBorder());\n+                scrollBar.setValue(scrollbarValue);\n+\n+                \/\/ create panel\n+                panel = new JPanel() {\n+                    @Override\n+                    protected void paintComponent(final Graphics g) {\n+                        Graphics2D graphics2D = image.createGraphics();\n+                        super.paintComponent(graphics2D);\n+                        graphics2D.dispose();\n+                    }\n+                };\n+\n+                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+                panel.setBorder(new EmptyBorder(20, 20, 20, 20));\n+                panel.setSize(200,90);\n+                panel.add(new JLabel(UIManager.getLookAndFeel().toString()));\n+                panel.add(Box.createVerticalStrut(20));\n+                panel.add(scrollBar);\n+\n+                \/\/ create frame\n+                frame = new JFrame(\"ScrollBarBorderTest\");\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\/\/                frame.getContentPane().add(panel);\n+                frame.getContentPane().add(new JLabel(new ImageIcon(image)));\n+                frame.pack();\n+            }\n+        });\n+\n+        SwingUtilities.invokeAndWait(() -> frame.setVisible(true));\n+        SwingUtilities.invokeAndWait(frame::dispose);\n@@ -87,8 +94,17 @@\n-    public static void main(String[] args) {\n-        ScrollBarBorderTest borderTest = new ScrollBarBorderTest();\n-        borderTest.createAndShowGUI();\n-\n-        try {\n-            robot = new Robot();\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Unable to create Robot.\");\n+    public void test() throws Exception {\n+        final BufferedImage bi1 = new BufferedImage(550,90,TYPE_INT_ARGB);\n+        final BufferedImage bi2 = new BufferedImage(550,90,TYPE_INT_ARGB);\n+\n+        createImage(0,bi1);\n+        createImage(Integer.MAX_VALUE,bi2);\n+\n+        for (int i = 0; i < bi1.getWidth(); i++) {\n+            for (int j = 0; j < bi1.getHeight(); j++) {\n+                int c1 = bi1.getRGB(i,j);\n+                int c2 = bi2.getRGB(i,j);\n+                if (c1 != c2) {\n+                    \/\/ need to find location of border but colors are always 0\n+                    System.out.println(i + \" \" + j + \" \" + \"Color before \" + c1);\n+                    System.out.println(i + \" \" + j + \" \" + \"Color after \" + c2);\n+                }\n+            }\n@@ -96,0 +112,1 @@\n+    }\n@@ -97,14 +114,3 @@\n-        robot.setAutoDelay(50);\n-        robot.waitForIdle();\n-\n-        Point p = frame.getLocationOnScreen();\n-\n-        Color c1 = robot.getPixelColor(p.x + 480, p.y + 95);\n-        scrollBar.setValue(Integer.MAX_VALUE);\n-        Color c2 = robot.getPixelColor(p.x + 480, p.y + 95);\n-\n-        if (c1.getRGB() != c2.getRGB()) {\n-            System.out.println(\"Color before \" + c1.getRed());\n-            System.out.println(\"Color after \" + c2.getRGB());\n-            throw new RuntimeException(\"Thumb was able to move into border.\");\n-        }\n+    public static void main(String[] args) throws Exception {\n+        ScrollBarBorderTest borderTest = new ScrollBarBorderTest();\n+        borderTest.test();\n@@ -112,1 +118,2 @@\n-        cleanUp();\n+\/\/        Thread.sleep(10000);\n+\/\/        throw new RuntimeException();\n@@ -115,1 +122,0 @@\n-\n@@ -131,1 +137,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":64,"deletions":59,"binary":false,"changes":123,"status":"modified"}]}