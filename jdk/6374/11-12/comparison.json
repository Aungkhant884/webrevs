{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -193,1 +193,1 @@\n-        return new Rectangle(insets.left, 0,\n+        return new Rectangle(insets.left, insets.top,\n@@ -195,1 +195,1 @@\n-                fScrollBar.getHeight());\n+                fScrollBar.getHeight() - (insets.top + insets.bottom));\n@@ -200,1 +200,1 @@\n-        return new Rectangle(insets.left, 0,\n+        return new Rectangle(insets.left, insets.top,\n@@ -202,1 +202,1 @@\n-            fScrollBar.getHeight());\n+            fScrollBar.getHeight() - (insets.top + insets.bottom));\n@@ -240,1 +240,2 @@\n-                fScrollBar.getWidth() - (insets.left + insets.right), fScrollBar.getHeight(), x, y);\n+                fScrollBar.getWidth() - (insets.left + insets.right),\n+                fScrollBar.getHeight() - (insets.top + insets.bottom), x, y);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaScrollBarUI.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.awt.image.ImageObserver;\n@@ -66,1 +67,1 @@\n-    public static void test() {\n+    public static void testHorizontal() {\n@@ -69,1 +70,0 @@\n-        scrollBar.setBorder(new CustomBorder());\n@@ -71,0 +71,1 @@\n+        scrollBar.setBorder(new HorizontalCustomBorder());\n@@ -95,3 +96,41 @@\n-                    saveImage(image1, \"image1.png\");\n-                    saveImage(image2, \"image2.png\");\n-                    throw new RuntimeException(\"Border has a thumb in it\");\n+                    saveImage(image1, \"himage1.png\");\n+                    saveImage(image2, \"himage2.png\");\n+                    throw new RuntimeException(\"Horizontal border has a thumb in it\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void testVertical() {\n+        \/\/ create scroll bar\n+        scrollBar = new JScrollBar(JScrollBar.VERTICAL);\n+        scrollBar.setSize(HEIGHT, WIDTH);\n+        scrollBar.setBorder(new VerticalCustomBorder());\n+\n+        \/\/ paint image with thumb set to 0\n+        scrollBar.setValue(0);\n+        BufferedImage image1 = new BufferedImage(HEIGHT, WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = image1.createGraphics();\n+        scrollBar.paint(graphics2D);\n+        graphics2D.dispose();\n+\n+        \/\/ paint image with thumb set to max value\n+        scrollBar.setValue(Integer.MAX_VALUE);\n+        BufferedImage image2 = new BufferedImage(HEIGHT, WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D2 = image2.createGraphics();\n+        scrollBar.paint(graphics2D2);\n+        graphics2D2.dispose();\n+\n+        \/\/ check border for thumb\n+        for (int i = WIDTH - BORDER_WIDTH; i < WIDTH; i++) {\n+            for (int j = 0; j < HEIGHT; j++) {\n+                int c1 = image1.getRGB(j,i);\n+                int c2 = image2.getRGB(j,i);\n+                if(c1 != c2) {\n+                    System.out.println(i + \" \" + j + \" \" + \"Color1: \"\n+                                       + Integer.toHexString(c1));\n+                    System.out.println(i + \" \" + j + \" \" + \"Color2: \"\n+                                       + Integer.toHexString(c2));\n+                    saveImage(image1, \"vimage1.png\");\n+                    saveImage(image2, \"vimage2.png\");\n+                    throw new RuntimeException(\"Vertical border has a thumb in it\");\n@@ -114,1 +153,0 @@\n-            try {\n@@ -116,4 +154,2 @@\n-                SwingUtilities.invokeAndWait(ScrollBarBorderTest::test);\n-            } catch (InvocationTargetException e) {\n-                throw new RuntimeException(\"Border has a thumb in it\");\n-            }\n+                SwingUtilities.invokeAndWait(ScrollBarBorderTest::testHorizontal);\n+                SwingUtilities.invokeAndWait(ScrollBarBorderTest::testVertical);\n@@ -124,1 +160,1 @@\n-    private static class CustomBorder implements Border {\n+    private static class HorizontalCustomBorder implements Border {\n@@ -138,0 +174,16 @@\n+\n+    \/\/ custom border\n+    private static class VerticalCustomBorder implements Border {\n+        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n+            g.setColor(new Color(255, 0, 0, 100));\n+            g.fillRect(x, height - BORDER_WIDTH, width, height);\n+        }\n+\n+        public Insets getBorderInsets(Component c) {\n+            return new Insets(0, 0, 150, 0);\n+        }\n+\n+        public boolean isBorderOpaque() {\n+            return true;\n+        }\n+    }\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/AquaLFScrollbarTest\/ScrollBarBorderTest.java","additions":64,"deletions":12,"binary":false,"changes":76,"status":"modified"}]}