{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -934,0 +934,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -994,0 +1004,8 @@\n+\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n@@ -1190,0 +1208,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/Basic-X.java.template","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -360,0 +360,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -420,0 +430,8 @@\n+\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n@@ -594,0 +612,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicBigDecimal.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicBigInteger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicBooleanObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicByteObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicCharObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicDateTime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -332,0 +332,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -393,0 +403,8 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n+\n@@ -490,0 +508,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicDouble.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -331,0 +331,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -392,0 +402,8 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n+\n@@ -489,0 +507,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicDoubleObject.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -331,0 +331,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -392,0 +402,8 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n+\n@@ -492,0 +510,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicFloat.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -331,0 +331,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %e - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.1e\", \"9.9e-324\", 1e-323);\n+        test(\"%.1e\", \"9.9e-323\", 1e-322);\n+        test(\"%.15e\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.15e\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.16e\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.16e\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n@@ -392,0 +402,8 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %f - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.0f\", \"738790000000000000000\", 7.3879e20);\n+        test(\"%.0f\", \"100000000000000000000000\", 1e23);\n+        test(\"%.0f\", \"200000000000000000000000\", 2e23);\n+        test(\"%.0f\", \"19400994884341945000000000\", 1.9400994884341945E25);\n+\n@@ -477,0 +495,10 @@\n+        \/\/---------------------------------------------------------------------\n+        \/\/ %g - adoption of Double.toString(double) algorithm (8300869)\n+        \/\/---------------------------------------------------------------------\n+        test(\"%.2g\", \"9.9e-324\", 1e-323);\n+        test(\"%.2g\", \"9.9e-323\", 1e-322);\n+        test(\"%.16g\", \"7.387900000000000e+20\", 7.3879e20);\n+        test(\"%.16g\", \"1.000000000000000e+23\", 1e23);\n+        test(\"%.17g\", \"2.0000000000000000e+23\", 2e23);\n+        test(\"%.17g\", \"1.9400994884341945e+25\", 1.9400994884341945E25);\n+\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicFloatObject.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicIntObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicLongObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicShortObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}