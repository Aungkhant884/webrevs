{"files":[{"patch":"@@ -29,0 +29,2 @@\n+#include \"utilities\/numberSeq.hpp\"\n+#include \"utilities\/tableStatistics.hpp\"\n@@ -262,0 +264,20 @@\n+  template<typename Function>\n+  TableStatistics statistics_calculate(Function size_function) const {\n+    NumberSeq summary;\n+    size_t literal_bytes = 0;\n+    Node* const* bucket = table();\n+    const unsigned sz = table_size();\n+    while (bucket < bucket_at(sz)) {\n+      Node* node = *bucket;\n+      int count = 0;\n+      while (node != NULL) {\n+        literal_bytes += size_function(node->_key, node->_value);\n+        count++;\n+        node = node->_next;\n+      }\n+      summary.add((double)count);\n+      ++bucket;\n+    }\n+    return TableStatistics(summary, literal_bytes, sizeof(Node*), sizeof(Node));\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-TableStatistics::TableStatistics(TableRateStatistics& rate_stats, NumberSeq summary, size_t literal_bytes, size_t bucket_bytes, size_t node_bytes) :\n+TableStatistics::TableStatistics(NumberSeq summary, size_t literal_bytes, size_t bucket_bytes, size_t node_bytes) :\n@@ -117,0 +117,1 @@\n+}\n@@ -118,0 +119,4 @@\n+TableStatistics::TableStatistics(TableRateStatistics& rate_stats,\n+                                  NumberSeq summary, size_t literal_bytes,\n+                                  size_t bucket_bytes, size_t node_bytes) :\n+  TableStatistics(summary, literal_bytes, bucket_bytes, node_bytes) {\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,1 @@\n+  TableStatistics(NumberSeq summary, size_t literal_bytes, size_t bucket_bytes, size_t node_bytes);\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -449,0 +449,43 @@\n+\n+class ResourceHashtablePrintTest : public ::testing::Test {\n+ public:\n+    class TestValue {\n+      int _i;\n+      int _j;\n+      int _k;\n+     public:\n+      TestValue(int i) : _i(i), _j(i+1), _k(i+2) {}\n+    };\n+    ResourceHashtable<int, TestValue*, 30, ResourceObj::C_HEAP, mtTest> _test_table;\n+\n+    class TableDeleter {\n+     public:\n+      bool do_entry(int& key, TestValue*& val) {\n+        delete val;\n+        return true;\n+      }\n+    };\n+};\n+\n+TEST_VM_F(ResourceHashtablePrintTest, print_test) {\n+  for (int i = 0; i < 300; i++) {\n+    TestValue* tv = new TestValue(i);\n+    _test_table.put(i, tv);  \/\/ all the entries can be the same.\n+  }\n+  auto printer = [&] (int& key, TestValue*& val) {\n+    return sizeof(*val);\n+  };\n+  TableStatistics ts = _test_table.statistics_calculate(printer);\n+  ResourceMark rm;\n+  stringStream st;\n+  ts.print(&st, \"TestTable\");\n+  \/\/ Verify output in string\n+  const char* strings[] = {\n+      \"Number of buckets\", \"Number of entries\", \"300\", \"Number of literals\", \"Average bucket size\", \"Maximum bucket size\" };\n+  for (const auto& str : strings) {\n+    ASSERT_TRUE(strstr(st.as_string(), str) != nullptr) << \"string not present \" << str;\n+  }\n+  \/\/ Cleanup: need to delete pointers in entries\n+  TableDeleter deleter;\n+  _test_table.unlink(&deleter);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}