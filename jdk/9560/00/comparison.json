{"files":[{"patch":"@@ -122,1 +122,1 @@\n-    _serial_compaction_point(),\n+    _serial_compaction_point(this),\n@@ -135,0 +135,1 @@\n+  _compaction_tops = NEW_C_HEAP_ARRAY(HeapWord*, _heap->max_regions(), mtGC);\n@@ -137,0 +138,1 @@\n+    _compaction_tops[j] = nullptr;\n@@ -141,1 +143,1 @@\n-    _compaction_points[i] = new G1FullGCCompactionPoint();\n+    _compaction_points[i] = new G1FullGCCompactionPoint(this);\n@@ -155,0 +157,1 @@\n+  FREE_C_HEAP_ARRAY(HeapWord*, _compaction_tops);\n@@ -370,1 +373,1 @@\n-      current->set_compaction_top(current->bottom());\n+      set_compaction_top(current, current->bottom());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+class HeapRegion;\n@@ -92,0 +93,2 @@\n+  HeapWord*volatile *_compaction_tops;\n+\n@@ -131,0 +134,3 @@\n+  inline void set_compaction_top(HeapRegion* r, HeapWord* value);\n+  inline HeapWord* compaction_top(HeapRegion* r) const;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/g1\/heapRegion.inline.hpp\"\n@@ -32,1 +33,1 @@\n-\n+#include \"runtime\/atomic.hpp\"\n@@ -63,0 +64,8 @@\n+void G1FullCollector::set_compaction_top(HeapRegion* r, HeapWord* value) {\n+  Atomic::store(&_compaction_tops[r->hrm_index()], value);\n+}\n+\n+HeapWord* G1FullCollector::compaction_top(HeapRegion* r) const {\n+  return Atomic::load(&_compaction_tops[r->hrm_index()]);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1FullCollector.hpp\"\n@@ -66,0 +65,4 @@\n+    assert(_collector->compaction_top(r) == nullptr,\n+           \"region %u compaction_top \" PTR_FORMAT \" must not be different from bottom \" PTR_FORMAT,\n+           r->hrm_index(), p2i(_collector->compaction_top(r)), p2i(r->bottom()));\n+\n@@ -113,1 +116,1 @@\n-  hr->reset_compacted_after_full_gc();\n+  hr->reset_compacted_after_full_gc(_collector->compaction_top(hr));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+class G1FullCollector;\n@@ -38,1 +39,1 @@\n-protected:\n+  G1FullCollector* _collector;\n@@ -41,1 +42,0 @@\n-private:\n@@ -47,0 +47,1 @@\n+    _collector(collector),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"gc\/g1\/g1FullCollector.inline.hpp\"\n@@ -31,3 +32,4 @@\n-G1FullGCCompactionPoint::G1FullGCCompactionPoint() :\n-    _current_region(NULL),\n-    _compaction_top(NULL) {\n+G1FullGCCompactionPoint::G1FullGCCompactionPoint(G1FullCollector* collector) :\n+    _collector(collector),\n+    _current_region(nullptr),\n+    _compaction_top(nullptr) {\n@@ -44,1 +46,1 @@\n-    _current_region->set_compaction_top(_compaction_top);\n+    _collector->set_compaction_top(_current_region, _compaction_top);\n@@ -49,1 +51,1 @@\n-  _compaction_top = _current_region->compaction_top();\n+  _compaction_top = _collector->compaction_top(_current_region);\n@@ -86,1 +88,1 @@\n-  _current_region->set_compaction_top(_compaction_top);\n+  _collector->set_compaction_top(_current_region, _compaction_top);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+class G1FullCollector;\n@@ -35,0 +36,1 @@\n+  G1FullCollector* _collector;\n@@ -46,1 +48,1 @@\n-  G1FullGCCompactionPoint();\n+  G1FullGCCompactionPoint(G1FullCollector* collector);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  hr->set_compaction_top(hr->bottom());\n+  _collector->set_compaction_top(hr, hr->bottom());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -226,1 +226,0 @@\n-  _compaction_top(NULL),\n@@ -261,1 +260,0 @@\n-  set_compaction_top(bottom());\n@@ -771,1 +769,0 @@\n-  set_compaction_top(bottom());\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-  HeapWord* _compaction_top;\n@@ -92,3 +91,0 @@\n-  void set_compaction_top(HeapWord* compaction_top) { _compaction_top = compaction_top; }\n-  HeapWord* compaction_top() const { return _compaction_top; }\n-\n@@ -127,1 +123,0 @@\n-  void reset_compaction_top_after_compaction();\n@@ -187,1 +182,1 @@\n-  void reset_compacted_after_full_gc();\n+  void reset_compacted_after_full_gc(HeapWord* new_top);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -193,6 +193,1 @@\n-inline void HeapRegion::reset_compaction_top_after_compaction() {\n-  set_top(compaction_top());\n-  _compaction_top = bottom();\n-}\n-\n-inline void HeapRegion::reset_compacted_after_full_gc() {\n+inline void HeapRegion::reset_compacted_after_full_gc(HeapWord* new_top) {\n@@ -201,1 +196,1 @@\n-  reset_compaction_top_after_compaction();\n+  set_top(new_top);\n@@ -212,4 +207,0 @@\n-  assert(compaction_top() == bottom(),\n-         \"region %u compaction_top \" PTR_FORMAT \" must not be different from bottom \" PTR_FORMAT,\n-         hrm_index(), p2i(compaction_top()), p2i(bottom()));\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  nonstatic_field(HeapRegion, _compaction_top, HeapWord*)                     \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-    private static AddressField compactionTopField;\n@@ -73,1 +72,0 @@\n-        compactionTopField = type.getAddressField(\"_compaction_top\");\n@@ -96,2 +94,0 @@\n-    public Address compactionTop() { return compactionTopField.getValue(addr); }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  private static AddressField compactionTopField;\n@@ -54,2 +53,0 @@\n-\n-    compactionTopField = type.getAddressField(\"_compaction_top\");\n@@ -61,5 +58,0 @@\n-\n-  \/** May be used temporarily during a compaction phase. *\/\n-  public Address compactionTop() {\n-    return compactionTopField.getValue(addr);\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/CompactibleSpace.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}