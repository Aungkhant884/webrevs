{"files":[{"patch":"@@ -622,0 +622,3 @@\n+        TestFormat.check(getAnnotation(testMethod, Arguments.class) != null || testMethod.getParameterCount() == 0,\n+                         \"Missing @Arguments annotation to define arguments of \" + testMethod + \" required by \"\n+                         + \"checked test \" + m);\n@@ -628,1 +631,1 @@\n-            irMatchRulePrinter.emitRuleEncoding(m, checkedTest.isSkipped());\n+            irMatchRulePrinter.emitRuleEncoding(testMethod, checkedTest.isSkipped());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -142,0 +142,7 @@\n+    @FailCount(0) \/\/ Combined with both checkNoArgAnnotation2() below\n+    @Test\n+    public void noArgAnnotation2(int a) {}\n+\n+    @Check(test = \"noArgAnnotation2\")\n+    public void checkNoArgAnnotation2() {}\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.IRViolationException;\n+import compiler.lib.ir_framework.driver.TestVMException;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @summary Test different custom run tests.\n+ * @library \/test\/lib \/testlibrary_tests \/\n+ * @run driver ir_framework.tests.TestCheckedTests\n+ *\/\n+\n+public class TestCheckedTests {\n+    public int iFld;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+        try {\n+            TestFramework.run(BadIRAndRuntimeCheckedTests.class);\n+            Utils.shouldHaveThrownException();\n+        } catch (TestVMException e) {\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Test Failures (2)\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"checkTestBad3\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"checkTestBad5\"));\n+            Asserts.assertTrue(e.getExceptionInfo().split(\"BadCheckedTestException\").length == 3);\n+            Asserts.assertFalse(e.getExceptionInfo().contains(\"Failed IR Rules\"));\n+        }\n+\n+        try {\n+            TestFramework.run(BadIRCheckedTests.class);\n+            Utils.shouldHaveThrownException();\n+        } catch (IRViolationException e) {\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Failed IR Rules (3)\"));\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.STORE_I, \"1\"})\n+    public void testGood1() {\n+        iFld = 3;\n+    }\n+\n+    @Check(test = \"testGood1\")\n+    public void checkTestGood1(TestInfo info) {\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int testGood2() {\n+        iFld = 3;\n+        return 3;\n+    }\n+\n+    @Check(test = \"testGood2\")\n+    public void sameName(int retValue) {\n+        if (retValue != 3) {\n+            throw new RuntimeException(\"must be 3 but was \" + retValue);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(Argument.NUMBER_42)\n+    @IR(failOn = IRNode.LOAD)\n+    @IR(counts = {IRNode.STORE_I, \"0\"})\n+    public int testGood3(int x) {\n+        return x;\n+    }\n+\n+    @Check(test = \"testGood3\")\n+    public void sameName(int retValue, TestInfo info) {\n+        if (retValue != 42) {\n+            throw new RuntimeException(\"must be 42\");\n+        }\n+    }\n+}\n+\n+class BadIRAndRuntimeCheckedTests {\n+    public int iFld;\n+\n+    @Test\n+    @IR(counts = {IRNode.STORE_I, \"2\"})\n+    public void testBad1() {\n+        iFld = 3;\n+    }\n+\n+    @Check(test = \"testBad1\")\n+    public void checkTestBad1(TestInfo info) {\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.STORE_I)\n+    public int testBad2() {\n+        iFld = 3;\n+        return 3;\n+    }\n+\n+    @Check(test = \"testBad2\")\n+    public void sameName(int retValue) {\n+        if (retValue != 3) {\n+            throw new RuntimeException(\"must be 3\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(Argument.NUMBER_42)\n+    public int testBad3(int x) {\n+        return x;\n+    }\n+\n+    @Check(test = \"testBad3\")\n+    public void checkTestBad3(int retValue) {\n+        if (retValue == 42) {\n+            \/\/ Always\n+            throw new BadCheckedTestException(\"expected\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(Argument.NUMBER_42)\n+    @IR(failOn = IRNode.LOAD)\n+    @IR(counts = {IRNode.STORE_I, \"1\"})\n+    public int testBad4(int x) {\n+        return x;\n+    }\n+\n+    @Check(test = \"testBad4\")\n+    public void sameName(int retValue, TestInfo info) {\n+        if (retValue != 42) {\n+            throw new RuntimeException(\"must be 42\");\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(Argument.NUMBER_42)\n+    public int testBad5(int x) {\n+        return x;\n+    }\n+\n+    @Check(test = \"testBad5\")\n+    public void checkTestBad5(int retValue) {\n+        if (retValue == 42) {\n+            \/\/ Always\n+            throw new BadCheckedTestException(\"expected\");\n+        }\n+    }\n+}\n+\n+class BadIRCheckedTests {\n+    public int iFld;\n+\n+    @Test\n+    @IR(counts = {IRNode.STORE_I, \"2\"})\n+    public void testBad1() {\n+        iFld = 3;\n+    }\n+\n+    @Check(test = \"testBad1\")\n+    public void checkTestBad1(TestInfo info) {\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.STORE_I)\n+    public int testBad2() {\n+        iFld = 3;\n+        return 3;\n+    }\n+\n+    @Check(test = \"testBad2\")\n+    public void sameName(int retValue) {\n+        if (retValue != 3) {\n+            throw new RuntimeException(\"must be 3\");\n+        }\n+    }\n+\n+\n+    @Test\n+    @Arguments(Argument.NUMBER_42)\n+    @IR(failOn = IRNode.LOAD)\n+    @IR(counts = {IRNode.STORE_I, \"1\"})\n+    public int testBad4(int x) {\n+        return x;\n+    }\n+\n+    @Check(test = \"testBad4\")\n+    public void sameName(int retValue, TestInfo info) {\n+        if (retValue != 42) {\n+            throw new RuntimeException(\"must be 42\");\n+        }\n+    }\n+}\n+\n+class BadCheckedTestException extends RuntimeException {\n+    BadCheckedTestException(String s) {\n+        super(s);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCheckedTests.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"}]}