{"files":[{"patch":"@@ -25,5 +25,1 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n+import javax.crypto.spec.SecretKeySpec;\n@@ -31,0 +27,1 @@\n+import java.security.KeyFactory;\n@@ -35,0 +32,2 @@\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n@@ -54,1 +53,1 @@\n-            checkKeyEquality(k, copy(k));\n+            checkKeyEquality(k, copy(alg.algoName(), k));\n@@ -61,1 +60,1 @@\n-            checkKeyPairEquality(kp, copy(kp));\n+            checkKeyPairEquality(kp, copy(alg.algoName(), kp));\n@@ -67,1 +66,1 @@\n-    private record KeygenAlgo(String algoName, Provider provider) {\n+            private record KeygenAlgo(String algoName, Provider provider) {\n@@ -87,1 +86,1 @@\n-            System.out.println(\"Result equals\/hashCode: \"\n+            System.out.println(\"Result- equals\/hashCode: \"\n@@ -90,1 +89,1 @@\n-            System.out.println(\"Result encoded check: \" + !Arrays.equals(\n+            System.out.println(\"Result- encoded check: \" + !Arrays.equals(\n@@ -92,1 +91,1 @@\n-            System.out.println(\"Result format check: \"\n+            System.out.println(\"Result- format check: \"\n@@ -100,12 +99,1 @@\n-    \/**\n-     * Get a copy of the original object type.\n-     *\/\n-    private static <T extends Object> T copy(T orig)\n-            throws IOException, ClassNotFoundException {\n-\n-        byte[] serialize;\n-        try ( ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n-            oos.writeObject(orig);\n-            serialize = bos.toByteArray();\n-        }\n+    private static Key copy(String algo, Key key) throws Exception {\n@@ -113,6 +101,11 @@\n-        T copy;\n-        try ( ByteArrayInputStream bis = new ByteArrayInputStream(serialize);\n-                ObjectInputStream ois = new ObjectInputStream(bis)) {\n-            copy = (T) ois.readObject();\n-        }\n-        return copy;\n+        return new SecretKeySpec(key.getEncoded(), algo);\n+    }\n+\n+    private static KeyPair copy(String algo, KeyPair kp) throws Exception {\n+\n+        KeyFactory kf = KeyFactory.getInstance(algo);\n+        return new KeyPair(\n+                kf.generatePublic(\n+                        new X509EncodedKeySpec(kp.getPublic().getEncoded())),\n+                kf.generatePrivate(\n+                        new PKCS8EncodedKeySpec(kp.getPrivate().getEncoded())));\n@@ -130,1 +123,2 @@\n-                        && !s.getAlgorithm().startsWith(\"SunTls\")) {\n+                        && !((s.getAlgorithm().startsWith(\"SunTls\"))\n+                        || s.getProvider().getName().equals(\"SunMSCAPI\"))) {\n@@ -147,1 +141,2 @@\n-        return KeyPairGenerator.getInstance(algoName, provider).generateKeyPair();\n+        return KeyPairGenerator.getInstance(algoName, provider)\n+                .generateKeyPair();\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/CompareKeys.java","additions":26,"deletions":31,"binary":false,"changes":57,"status":"modified"}]}