{"files":[{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.crypto.SecretKey;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.security.Key;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.util.Arrays;\n+import javax.crypto.KeyGenerator;\n+\n+\/*\n+ * @test\n+ * @bug 8185127\n+ * @summary Test key comparison between the Keys generated through KeyGenerator\n+ * @run main CompareKeys\n+ *\/\n+public class CompareKeys {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        for (KeyAlgo ka : KeyAlgo.values()) {\n+            SecretKey k = ka.genSecretKey();\n+            checkKeyEquality(k, copy(k));\n+        }\n+\n+        for (KeyPairAlgo kpa : KeyPairAlgo.values()) {\n+            KeyPair kp = kpa.genKeyPair();\n+            checkKeyPairEquality(kp, copy(kp));\n+        }\n+        System.out.println(\"Done!\");\n+    }\n+\n+    private static void checkKeyPairEquality(KeyPair origkp, KeyPair copykp)\n+            throws Exception {\n+\n+        checkKeyEquality(origkp.getPrivate(), copykp.getPrivate());\n+        checkKeyEquality(origkp.getPublic(), copykp.getPublic());\n+    }\n+\n+    \/**\n+     * Compare original KeyPair with another copy.\n+     *\/\n+    private static void checkKeyEquality(Key origKey, Key copyKey) {\n+\n+        if (!origKey.equals(copyKey)\n+                && !Arrays.equals(origKey.getEncoded(), copyKey.getEncoded())\n+                && origKey.hashCode() != copyKey.hashCode()) {\n+            throw new RuntimeException(\"Key inequality found\");\n+        }\n+        System.out.printf(\"Equality check Passed for key Type:%s & Algo: %s%n\",\n+                origKey.getClass(), origKey.getAlgorithm());\n+    }\n+\n+    \/**\n+     * Get a copy of the original object type.\n+     *\/\n+    private static <T extends Object> T copy(T orig)\n+            throws IOException, ClassNotFoundException {\n+\n+        byte[] serialize;\n+        try ( ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n+            oos.writeObject(orig);\n+            serialize = bos.toByteArray();\n+        }\n+\n+        T copy;\n+        try ( ByteArrayInputStream bis = new ByteArrayInputStream(serialize);\n+                ObjectInputStream ois = new ObjectInputStream(bis)) {\n+            copy = (T) ois.readObject();\n+        }\n+        return copy;\n+    }\n+\n+    private enum KeyAlgo {\n+\n+        AES(\"AES\"),\n+        ARCFOUR(\"ARCFOUR\"),\n+        Blowfish(\"Blowfish\"),\n+        ChaCha20(\"ChaCha20\"),\n+        DES(\"DES\"),\n+        DESede(\"DESede\"),\n+        HmacMD5(\"HmacMD5\"),\n+        HmacSHA1(\"HmacSHA1\"),\n+        HmacSHA224(\"HmacSHA224\"),\n+        HmacSHA256(\"HmacSHA256\"),\n+        HmacSHA384(\"HmacSHA384\"),\n+        HmacSHA512(\"HmacSHA512\"),\n+        RC2(\"RC2\");\n+\n+        private String algoName;\n+\n+        private KeyAlgo(String name) {\n+            this.algoName = name;\n+        }\n+\n+        public SecretKey genSecretKey() throws Exception {\n+            KeyGenerator kg = KeyGenerator.getInstance(this.algoName);\n+            return kg.generateKey();\n+        }\n+    }\n+\n+    private enum KeyPairAlgo {\n+\n+        DiffieHellman(\"DiffieHellman\"),\n+        DSA(\"DSA\"),\n+        RSA(\"RSA\"),\n+        RSASSAPSS(\"RSASSA-PSS\"),\n+        EC(\"EC\"),\n+        EdDSA(\"EdDSA\"),\n+        Ed25519(\"Ed25519\"),\n+        Ed448(\"Ed448\"),\n+        XDH(\"XDH\"),\n+        X25519(\"X25519\"),\n+        X448(\"X448\");\n+\n+        private final String algoName;\n+\n+        private KeyPairAlgo(String name) {\n+            this.algoName = name;\n+        }\n+\n+        public KeyPair genKeyPair() throws Exception {\n+            KeyPairGenerator kpg = KeyPairGenerator.getInstance(this.algoName);\n+            return kpg.generateKeyPair();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/CompareKeys.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}