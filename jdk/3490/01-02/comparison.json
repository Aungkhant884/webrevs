{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import java.security.Provider;\n+import java.security.Security;\n@@ -34,0 +36,2 @@\n+import java.util.LinkedList;\n+import java.util.List;\n@@ -39,1 +43,1 @@\n- * @summary Test key comparison between the Keys generated through KeyGenerator\n+ * @summary Test key comparison for the Keys generated through KeyGenerator\n@@ -46,2 +50,4 @@\n-        for (KeyAlgo ka : KeyAlgo.values()) {\n-            SecretKey k = ka.genSecretKey();\n+        for (KeygenAlgo alg : getSupportedAlgo(\"KeyGenerator\")) {\n+            System.out.printf(\"Verifying provider %s and algorithm %s%n\",\n+                    alg.provider().getName(), alg.algoName());\n+            SecretKey k = genSecretKey(alg.algoName(), alg.provider());\n@@ -51,2 +57,4 @@\n-        for (KeyPairAlgo kpa : KeyPairAlgo.values()) {\n-            KeyPair kp = kpa.genKeyPair();\n+        for (KeygenAlgo alg : getSupportedAlgo(\"KeyPairGenerator\")) {\n+            System.out.printf(\"Verifying provider %s and algorithm %s%n\",\n+                    alg.provider().getName(), alg.algoName());\n+            KeyPair kp = genKeyPair(alg.algoName(), alg.provider());\n@@ -58,0 +66,5 @@\n+    @SuppressWarnings(\"preview\")\n+    private record KeygenAlgo(String algoName, Provider provider) {\n+\n+    }\n+\n@@ -66,1 +79,1 @@\n-     * Compare original Key with another copy.\n+     * Compare original KeyPair with another copy.\n@@ -70,1 +83,2 @@\n-        if (!origKey.equals(copyKey)\n+        if (!(origKey.equals(copyKey)\n+                || origKey.hashCode() == copyKey.hashCode())\n@@ -72,1 +86,8 @@\n-                && origKey.hashCode() != copyKey.hashCode()) {\n+                && !origKey.getFormat().equals(copyKey.getFormat())) {\n+            System.out.println(\"Result equals\/hashCode: \"\n+                    + !(origKey.equals(copyKey)\n+                    || origKey.hashCode() == copyKey.hashCode()));\n+            System.out.println(\"Result encoded check: \" + !Arrays.equals(\n+                    origKey.getEncoded(), copyKey.getEncoded()));\n+            System.out.println(\"Result format check: \"\n+                    + !origKey.getFormat().equals(copyKey.getFormat()));\n@@ -75,2 +96,2 @@\n-        System.out.printf(\"Equality check Passed for key Type:%s & Algo: %s%n\",\n-                origKey.getClass(), origKey.getAlgorithm());\n+        System.out.printf(\"%s equality check Passed%n\",\n+                origKey.getClass().getName());\n@@ -100,21 +121,2 @@\n-    private enum KeyAlgo {\n-\n-        AES(\"AES\"),\n-        ARCFOUR(\"ARCFOUR\"),\n-        Blowfish(\"Blowfish\"),\n-        ChaCha20(\"ChaCha20\"),\n-        DES(\"DES\"),\n-        DESede(\"DESede\"),\n-        HmacMD5(\"HmacMD5\"),\n-        HmacSHA1(\"HmacSHA1\"),\n-        HmacSHA224(\"HmacSHA224\"),\n-        HmacSHA256(\"HmacSHA256\"),\n-        HmacSHA384(\"HmacSHA384\"),\n-        HmacSHA512(\"HmacSHA512\"),\n-        RC2(\"RC2\");\n-\n-        private String algoName;\n-\n-        private KeyAlgo(String name) {\n-            this.algoName = name;\n-        }\n+    private static List<KeygenAlgo> getSupportedAlgo(String type)\n+            throws Exception {\n@@ -122,3 +124,10 @@\n-        public SecretKey genSecretKey() throws Exception {\n-            KeyGenerator kg = KeyGenerator.getInstance(this.algoName);\n-            return kg.generateKey();\n+        List<KeygenAlgo> kgs = new LinkedList<>();\n+        for (Provider p : Security.getProviders()) {\n+            for (Provider.Service s : p.getServices()) {\n+                \/\/ Remove the algorithms from the list which require\n+                \/\/ pre-initialisation to make the Test generic across algorithms\n+                if (s.getType().contains(type)\n+                        && !s.getAlgorithm().startsWith(\"SunTls\")) {\n+                    kgs.add(new KeygenAlgo(s.getAlgorithm(), s.getProvider()));\n+                }\n+            }\n@@ -126,0 +135,1 @@\n+        return kgs;\n@@ -128,13 +138,2 @@\n-    private enum KeyPairAlgo {\n-\n-        DiffieHellman(\"DiffieHellman\"),\n-        DSA(\"DSA\"),\n-        RSA(\"RSA\"),\n-        RSASSAPSS(\"RSASSA-PSS\"),\n-        EC(\"EC\"),\n-        EdDSA(\"EdDSA\"),\n-        Ed25519(\"Ed25519\"),\n-        Ed448(\"Ed448\"),\n-        XDH(\"XDH\"),\n-        X25519(\"X25519\"),\n-        X448(\"X448\");\n+    public static SecretKey genSecretKey(String algoName, Provider provider)\n+            throws Exception {\n@@ -142,1 +141,2 @@\n-        private final String algoName;\n+        return KeyGenerator.getInstance(algoName, provider).generateKey();\n+    }\n@@ -144,3 +144,2 @@\n-        private KeyPairAlgo(String name) {\n-            this.algoName = name;\n-        }\n+    public static KeyPair genKeyPair(String algoName, Provider provider)\n+            throws Exception {\n@@ -148,4 +147,1 @@\n-        public KeyPair genKeyPair() throws Exception {\n-            KeyPairGenerator kpg = KeyPairGenerator.getInstance(this.algoName);\n-            return kpg.generateKeyPair();\n-        }\n+        return KeyPairGenerator.getInstance(algoName, provider).generateKeyPair();\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/CompareKeys.java","additions":51,"deletions":55,"binary":false,"changes":106,"status":"modified"}]}