{"files":[{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.crypto.SecretKey;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.security.Key;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.crypto.KeyGenerator;\n+\n+\/*\n+ * @test\n+ * @bug 8185127\n+ * @summary Test key comparison for the Keys generated through KeyGenerator\n+ * @run main CompareKeys\n+ *\/\n+public class CompareKeys {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        for (KeygenAlgo alg : getSupportedAlgo(\"KeyGenerator\")) {\n+            System.out.printf(\"Verifying provider %s and algorithm %s%n\",\n+                    alg.provider().getName(), alg.algoName());\n+            SecretKey k = genSecretKey(alg.algoName(), alg.provider());\n+            checkKeyEquality(k, copy(k));\n+        }\n+\n+        for (KeygenAlgo alg : getSupportedAlgo(\"KeyPairGenerator\")) {\n+            System.out.printf(\"Verifying provider %s and algorithm %s%n\",\n+                    alg.provider().getName(), alg.algoName());\n+            KeyPair kp = genKeyPair(alg.algoName(), alg.provider());\n+            checkKeyPairEquality(kp, copy(kp));\n+        }\n+        System.out.println(\"Done!\");\n+    }\n+\n+    @SuppressWarnings(\"preview\")\n+    private record KeygenAlgo(String algoName, Provider provider) {\n+\n+    }\n+\n+    private static void checkKeyPairEquality(KeyPair origkp, KeyPair copykp)\n+            throws Exception {\n+\n+        checkKeyEquality(origkp.getPrivate(), copykp.getPrivate());\n+        checkKeyEquality(origkp.getPublic(), copykp.getPublic());\n+    }\n+\n+    \/**\n+     * Compare original Key with another copy.\n+     *\/\n+    private static void checkKeyEquality(Key origKey, Key copyKey) {\n+\n+        if (!(origKey.equals(copyKey)\n+                || origKey.hashCode() == copyKey.hashCode())\n+                && !Arrays.equals(origKey.getEncoded(), copyKey.getEncoded())\n+                && !origKey.getFormat().equals(copyKey.getFormat())) {\n+            System.out.println(\"Result equals\/hashCode: \"\n+                    + !(origKey.equals(copyKey)\n+                    || origKey.hashCode() == copyKey.hashCode()));\n+            System.out.println(\"Result encoded check: \" + !Arrays.equals(\n+                    origKey.getEncoded(), copyKey.getEncoded()));\n+            System.out.println(\"Result format check: \"\n+                    + !origKey.getFormat().equals(copyKey.getFormat()));\n+            throw new RuntimeException(\"Key inequality found\");\n+        }\n+        System.out.printf(\"%s equality check Passed%n\",\n+                origKey.getClass().getName());\n+    }\n+\n+    \/**\n+     * Get a copy of the original object type.\n+     *\/\n+    private static <T extends Object> T copy(T orig)\n+            throws IOException, ClassNotFoundException {\n+\n+        byte[] serialize;\n+        try ( ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n+            oos.writeObject(orig);\n+            serialize = bos.toByteArray();\n+        }\n+\n+        T copy;\n+        try ( ByteArrayInputStream bis = new ByteArrayInputStream(serialize);\n+                ObjectInputStream ois = new ObjectInputStream(bis)) {\n+            copy = (T) ois.readObject();\n+        }\n+        return copy;\n+    }\n+\n+    private static List<KeygenAlgo> getSupportedAlgo(String type)\n+            throws Exception {\n+\n+        List<KeygenAlgo> kgs = new LinkedList<>();\n+        for (Provider p : Security.getProviders()) {\n+            for (Provider.Service s : p.getServices()) {\n+                \/\/ Remove the algorithms from the list which require\n+                \/\/ pre-initialisation to make the Test generic across algorithms\n+                if (s.getType().contains(type)\n+                        && !s.getAlgorithm().startsWith(\"SunTls\")) {\n+                    kgs.add(new KeygenAlgo(s.getAlgorithm(), s.getProvider()));\n+                }\n+            }\n+        }\n+        return kgs;\n+    }\n+\n+    public static SecretKey genSecretKey(String algoName, Provider provider)\n+            throws Exception {\n+\n+        return KeyGenerator.getInstance(algoName, provider).generateKey();\n+    }\n+\n+    public static KeyPair genKeyPair(String algoName, Provider provider)\n+            throws Exception {\n+\n+        return KeyPairGenerator.getInstance(algoName, provider).generateKeyPair();\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/CompareKeys.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}