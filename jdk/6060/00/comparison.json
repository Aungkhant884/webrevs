{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -77,2 +78,4 @@\n-  \/\/ Note: normally, there is no reason ever to delete a vslist since they are\n-  \/\/ global objects, but for gtests it makes sense to allow this.\n+  \/\/ Delete every single mapping in this list.\n+  \/\/ Please note that this only gets executed during gtests under controlled\n+  \/\/ circumstances, so we do not have any concurrency issues here. The \"real\"\n+  \/\/ lists in metaspace are immortal.\n@@ -99,1 +102,1 @@\n-  _first_node = vsn;\n+  Atomic::release_store(&_first_node, vsn);\n@@ -189,1 +192,2 @@\n-  const VirtualSpaceNode* vsn = _first_node;\n+  \/\/ Note: needs to work without locks.\n+  const VirtualSpaceNode* vsn = Atomic::load_acquire(&_first_node);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-\/\/ VirtualSpaceList manages a single (if its non-expandable) or\n-\/\/  a series of (if its expandable) virtual memory regions used\n+\/\/ VirtualSpaceList manages a series of virtual memory regions used\n@@ -51,0 +50,11 @@\n+\/\/\n+\/\/ The list will only ever grow, never shrink. It will be immortal,\n+\/\/  never to be destroyed.\n+\/\/\n+\/\/ The list will only be modified under lock protection, but may be\n+\/\/  read asynchronously without lock.\n+\/\/\n+\/\/ The list may be prevented from expanding beyond a single node -\n+\/\/  in that case it degenerates to a one-node-list (used for\n+\/\/  class space).\n+\/\/\n@@ -57,2 +67,2 @@\n-  \/\/ Head of the list.\n-  VirtualSpaceNode* _first_node;\n+  \/\/ Head of the list (last added).\n+  VirtualSpaceNode* volatile _first_node;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}