{"files":[{"patch":"@@ -89,2 +89,2 @@\n-void CompilationPolicy::compile_if_required(const methodHandle& selected_method, TRAPS) {\n-  if (must_be_compiled(selected_method)) {\n+void CompilationPolicy::compile_if_required(const methodHandle& m, TRAPS) {\n+  if (must_be_compiled(m)) {\n@@ -97,1 +97,1 @@\n-    if (selected_method->method_holder()->is_not_initialized()) {\n+    if (m->method_holder()->is_not_initialized()) {\n@@ -107,3 +107,5 @@\n-    CompileBroker::compile_method(selected_method, InvocationEntryBci,\n-        CompilationPolicy::initial_compile_level(selected_method),\n-        methodHandle(), 0, CompileTask::Reason_MustBeCompiled, THREAD);\n+    CompLevel level = initial_compile_level(m);\n+    if (PrintTieredEvents) {\n+      print_event(COMPILE, m(), m(), InvocationEntryBci, level);\n+    }\n+    CompileBroker::compile_method(m, InvocationEntryBci, level, methodHandle(), 0, CompileTask::Reason_MustBeCompiled, THREAD);\n@@ -340,1 +342,1 @@\n-void CompilationPolicy::print_counters(const char* prefix, Method* m) {\n+void CompilationPolicy::print_counters(const char* prefix, const Method* m) {\n@@ -361,2 +363,1 @@\n-void CompilationPolicy::print_event(EventType type, Method* m, Method* im,\n-                                        int bci, CompLevel level) {\n+void CompilationPolicy::print_event(EventType type, const Method* m, const Method* im, int bci, CompLevel level) {\n@@ -677,3 +678,2 @@\n-  if (max_task != NULL && max_task->comp_level() == CompLevel_full_profile &&\n-      TieredStopAtLevel > CompLevel_full_profile &&\n-      max_method != NULL && is_method_profiled(max_method_h)) {\n+  if (max_task != NULL && max_task->comp_level() == CompLevel_full_profile && TieredStopAtLevel > CompLevel_full_profile &&\n+      max_method != NULL && is_method_profiled(max_method_h) && !Arguments::is_compiler_only()) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  static void print_counters(const char* prefix, Method* m);\n+  static void print_counters(const char* prefix, const Method* m);\n@@ -219,1 +219,1 @@\n-  static void print_event(EventType type, Method* m, Method* im, int bci, CompLevel level);\n+  static void print_event(EventType type, const Method* m, const Method* im, int bci, CompLevel level);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,0 +308,11 @@\n+    if (Arguments::is_compiler_only()) { \/\/ -Xcomp\n+      \/\/ Be much more aggressive in tiered mode with -Xcomp and exercise C2 more.\n+      \/\/ We will first compile a level 3 version (C1 with full profiling), then do one invocation of it and\n+      \/\/ compile a level 4 (C2) and then continue executing it.\n+      if (FLAG_IS_DEFAULT(Tier3InvokeNotifyFreqLog)) {\n+        FLAG_SET_CMDLINE(Tier3InvokeNotifyFreqLog, 0);\n+      }\n+      if (FLAG_IS_DEFAULT(Tier4InvocationThreshold)) {\n+        FLAG_SET_CMDLINE(Tier4InvocationThreshold, 0);\n+      }\n+    }\n@@ -310,4 +321,0 @@\n-  if (!UseInterpreter) { \/\/ -Xcomp\n-    Tier3InvokeNotifyFreqLog = 0;\n-    Tier4InvocationThreshold = 0;\n-  }\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1974,1 +1974,1 @@\n-int Method::invocation_count() {\n+int Method::invocation_count() const {\n@@ -1986,1 +1986,1 @@\n-int Method::backedge_count() {\n+int Method::backedge_count() const {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -426,2 +426,2 @@\n-  int invocation_count();\n-  int backedge_count();\n+  int invocation_count() const;\n+  int backedge_count() const;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,2 +88,0 @@\n-intx   Arguments::_Tier3InvokeNotifyFreqLog     = Tier3InvokeNotifyFreqLog;\n-intx   Arguments::_Tier4InvocationThreshold     = Tier4InvocationThreshold;\n@@ -1461,6 +1459,0 @@\n-  if (FLAG_IS_DEFAULT(Tier3InvokeNotifyFreqLog)) {\n-    Tier3InvokeNotifyFreqLog = Arguments::_Tier3InvokeNotifyFreqLog;\n-  }\n-  if (FLAG_IS_DEFAULT(Tier4InvocationThreshold)) {\n-    Tier4InvocationThreshold = Arguments::_Tier4InvocationThreshold;\n-  }\n@@ -1486,7 +1478,0 @@\n-    \/\/ Be much more aggressive in tiered mode with -Xcomp and exercise C2 more.\n-    \/\/ We will first compile a level 3 version (C1 with full profiling), then do one invocation of it and\n-    \/\/ compile a level 4 (C2) and then continue executing it.\n-    if (CompilerConfig::is_c2_or_jvmci_compiler_enabled()) {\n-      Tier3InvokeNotifyFreqLog = 0;\n-      Tier4InvocationThreshold = 0;\n-    }\n@@ -2139,2 +2124,0 @@\n-  Arguments::_Tier3InvokeNotifyFreqLog = Tier3InvokeNotifyFreqLog;\n-  Arguments::_Tier4InvocationThreshold = Tier4InvocationThreshold;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -357,2 +357,0 @@\n-  static intx _Tier3InvokeNotifyFreqLog;\n-  static intx _Tier4InvocationThreshold;\n@@ -620,2 +618,4 @@\n-  static Mode mode()                        { return _mode; }\n-  static bool is_interpreter_only() { return mode() == _int; }\n+  static Mode mode()                { return _mode;           }\n+  static bool is_interpreter_only() { return mode() == _int;  }\n+  static bool is_compiler_only()    { return mode() == _comp; }\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-compiler\/jvmci\/compilerToVM\/IsMatureTest.java 8219555 generic-all\n-compiler\/jvmci\/compilerToVM\/IsMatureVsReprofileTest.java 8219555 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @requires vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n+ * @requires vm.flavor == \"server\" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4) & vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/compiler\/tiered\/Level2RecompilationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}