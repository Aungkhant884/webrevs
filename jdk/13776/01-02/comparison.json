{"files":[{"patch":"@@ -127,0 +127,13 @@\n+#ifdef ASSERT\n+  static const uintptr_t canary = 0xFFEEFFEE;\n+  static void write_canary(MetaWord* p, size_t word_size) {\n+    if (word_size > 1) { \/\/ 1-word-sized blocks have no space for a canary\n+      ((uintptr_t*)p)[word_size - 1] = canary;\n+    }\n+  }\n+  static bool check_canary(const Block* b, size_t word_size) {\n+    return word_size == 1 || \/\/ 1-word-sized blocks have no space for a canary\n+           ((const uintptr_t*)b)[word_size - 1] == canary;\n+  }\n+#endif\n+\n@@ -138,1 +151,1 @@\n-    DEBUG_ONLY(p[word_size - 1] = 0;) \/\/ canary\n+    DEBUG_ONLY(write_canary(p, word_size);)\n@@ -157,0 +170,2 @@\n+      assert(check_canary(b, real_word_size),\n+             \"bad block in list[%d] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b, real_word_size));\n@@ -160,4 +175,1 @@\n-      MetaWord* p = (MetaWord*)b;\n-      assert(real_word_size == 1 || p[real_word_size - 1] == 0,\n-             \"bad block size in list[%d] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b, real_word_size));\n-      return p;\n+      return (MetaWord*)b;\n@@ -185,3 +197,1 @@\n-        assert(s == 1 || ((MetaWord*)b)[s - 1] == 0,\n-              \"bad block size in list[%d] at pos %d (\" BLOCK_FORMAT \")\",\n-              i, pos, BLOCK_FORMAT_ARGS(b, s));\n+        assert(check_canary(b, s), \"\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\/\/ Metaspace allocations have to be aligned such that 64bit values are aligned\n+\/\/ Metaspace allocations have to be aligned such that 64-bit values are aligned\n@@ -45,1 +45,1 @@\n-\/\/ 64 bit, we don't need special handling for allocating Klass*.\n+\/\/ 64-bit, we don't need special handling for allocating Klass*.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}