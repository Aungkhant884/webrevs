{"files":[{"patch":"@@ -61,0 +61,5 @@\n+    @Override\n+    boolean ipDontFragmentSupported() {\n+        return true;\n+    }\n+\n","filename":"src\/jdk.net\/linux\/classes\/jdk\/net\/LinuxSocketOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,5 @@\n+    @Override\n+    boolean ipDontFragmentSupported() {\n+        return ipDontFragmentSupported0();\n+    }\n+\n@@ -111,0 +116,2 @@\n+    private static native boolean ipDontFragmentSupported0();\n+\n","filename":"src\/jdk.net\/macosx\/classes\/jdk\/net\/MacOSXSocketOptions.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -192,0 +192,29 @@\n+\/*\n+ * Class:     jdk_net_MacOSXSocketOptions\n+ * Method:    ipDontFragmentSupported0\n+ * Signature: ()Z;\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_jdk_net_MacOSXSocketOptions_ipDontFragmentSupported0\n+(JNIEnv *env, jobject unused) {\n+    jint rv, fd, value;\n+    fd = socket(AF_INET, SOCK_DGRAM, 0);\n+    if (fd == -1)\n+        return JNI_FALSE;\n+    value = 1;\n+    rv = setsockopt(fd, IPPROTO_IP, IP_DONTFRAG, &value, sizeof(value));\n+    close(fd);\n+    if (rv == -1) {\n+        return JNI_FALSE;\n+    }\n+    fd = socket(AF_INET6, SOCK_DGRAM, 0);\n+    if (fd == -1)\n+        return JNI_FALSE;\n+    value = 1;\n+    rv = setsockopt(fd, IPPROTO_IPV6, IPV6_DONTFRAG, &value, sizeof(value));\n+    close(fd);\n+    if (rv == -1) {\n+        return JNI_FALSE;\n+    }\n+    return JNI_TRUE;\n+}\n+\n","filename":"src\/jdk.net\/macosx\/native\/libextnet\/MacOSXSocketOptions.c","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -235,0 +235,2 @@\n+    private static final boolean ipDontFragmentSupported  =\n+            platformSocketOptions.ipDontFragmentSupported();\n@@ -252,1 +254,3 @@\n-        options.add(IP_DONTFRAGMENT);\n+        if (ipDontFragmentSupported) {\n+            options.add(IP_DONTFRAGMENT);\n+        }\n@@ -441,0 +445,4 @@\n+        boolean ipDontFragmentSupported() {\n+            return false;\n+        }\n+\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/ExtendedSocketOptions.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,5 @@\n+    @Override\n+    boolean ipDontFragmentSupported() {\n+        return true;\n+    }\n+\n","filename":"src\/jdk.net\/windows\/classes\/jdk\/net\/WindowsSocketOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -567,3 +567,0 @@\n-java\/nio\/channels\/etc\/PrintSupportedOptions.java                8285671 macosx-x64\n-java\/nio\/channels\/DatagramChannel\/AfterDisconnect.java          8285671 macosx-x64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8243099\n+ * @bug 8243099 8285671\n@@ -28,0 +28,2 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -35,0 +37,1 @@\n+import jdk.test.lib.Platform;\n@@ -41,0 +44,2 @@\n+    private static boolean isMacos;\n+\n@@ -42,0 +47,1 @@\n+        isMacos = Platform.isOSX();\n@@ -58,0 +64,22 @@\n+    \/**\n+     * Returns true if the option is supported, false if not supported.\n+     * Throws exception if it is not supported, but should be\n+     *\/\n+    static boolean checkSupported(DatagramChannel c1) throws IOException {\n+        boolean supported = c1.supportedOptions().contains(IP_DONTFRAGMENT);\n+\n+        if (!isMacos && !supported) {\n+            throw new RuntimeException(\"IP_DONTFRAGMENT should be supported\");\n+        }\n+        return supported;\n+    }\n+\n+    static boolean checkSupported(DatagramSocket c1) throws IOException {\n+        boolean supported = c1.supportedOptions().contains(IP_DONTFRAGMENT);\n+\n+        if (!isMacos && !supported) {\n+            throw new RuntimeException(\"IP_DONTFRAGMENT should be supported\");\n+        }\n+        return supported;\n+    }\n+\n@@ -61,0 +89,3 @@\n+            if (!checkSupported(c1)) {\n+                return;\n+            }\n@@ -78,0 +109,3 @@\n+            if (!checkSupported(c1)) {\n+                return;\n+            }\n@@ -93,0 +127,3 @@\n+        if (!checkSupported(c1)) {\n+            return;\n+        }\n","filename":"test\/jdk\/jdk\/net\/ExtendedSocketOption\/DontFragmentTest.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}