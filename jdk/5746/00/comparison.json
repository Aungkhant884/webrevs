{"files":[{"patch":"@@ -0,0 +1,283 @@\n+\/*\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.AnnotationValue;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.type.TypeMirror;\n+\n+import jdk.javadoc.internal.doclets.formats.html.markup.Comment;\n+import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n+import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeMemberWriter;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;\n+\n+\n+\/**\n+ * Writes annotation interface member documentation in HTML format.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class AnnotationTypeMemberWriterImpl extends AbstractMemberWriter\n+    implements AnnotationTypeMemberWriter, MemberSummaryWriter {\n+\n+    \/**\n+     * We generate separate summaries for required and optional annotation interface members,\n+     * so we need dedicated writer instances for each kind. For the details section, a single\n+     * shared list is generated so a special {@code ANY} value is provided for this case.\n+     *\/\n+    enum Kind {\n+        OPTIONAL,\n+        REQUIRED,\n+        ANY\n+    }\n+\n+    private final Kind kind;\n+\n+    \/**\n+     * Construct a new AnnotationTypeMemberWriterImpl for any kind of member.\n+     *\n+     * @param writer The writer for the class that the member belong to.\n+     *\/\n+    public AnnotationTypeMemberWriterImpl(SubWriterHolderWriter writer) {\n+        super(writer);\n+        this.kind = Kind.ANY;\n+    }\n+\n+    \/**\n+     * Construct a new AnnotationTypeMemberWriterImpl for a specific kind of member.\n+     *\n+     * @param writer         the writer that will write the output.\n+     * @param annotationType the AnnotationType that holds this member.\n+     * @param kind           the kind of annotation interface members to handle.\n+     *\/\n+    public AnnotationTypeMemberWriterImpl(SubWriterHolderWriter writer,\n+                                          TypeElement annotationType,\n+                                          Kind kind) {\n+        super(writer, annotationType);\n+        this.kind = kind;\n+    }\n+\n+    @Override\n+    public Content getMemberSummaryHeader(TypeElement typeElement,\n+            Content memberSummaryTree) {\n+        switch (kind) {\n+            case OPTIONAL -> memberSummaryTree.add(selectComment(\n+                    MarkerComments.START_OF_ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY,\n+                    MarkerComments.START_OF_ANNOTATION_INTERFACE_OPTIONAL_MEMBER_SUMMARY));\n+            case REQUIRED -> memberSummaryTree.add(selectComment(\n+                    MarkerComments.START_OF_ANNOTATION_TYPE_REQUIRED_MEMBER_SUMMARY,\n+                    MarkerComments.START_OF_ANNOTATION_INTERFACE_REQUIRED_MEMBER_SUMMARY));\n+            case ANY -> throw new RuntimeException(\"unsupported member kind\");\n+        }\n+        Content memberTree = new ContentBuilder();\n+        writer.addSummaryHeader(this, memberTree);\n+        return memberTree;\n+    }\n+\n+    @Override\n+    public Content getMemberTreeHeader() {\n+        return writer.getMemberTreeHeader();\n+    }\n+\n+    @Override\n+    public void addSummary(Content summariesList, Content content) {\n+        writer.addSummary(HtmlStyle.memberSummary,\n+                switch (kind) {\n+                    case REQUIRED -> HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY;\n+                    case OPTIONAL -> HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY;\n+                    case ANY -> throw new RuntimeException(\"unsupported member kind\");\n+                },\n+                summariesList, content);\n+    }\n+\n+    @Override\n+    public void addAnnotationDetailsMarker(Content memberDetails) {\n+        memberDetails.add(selectComment(\n+                MarkerComments.START_OF_ANNOTATION_TYPE_DETAILS,\n+                MarkerComments.START_OF_ANNOTATION_INTERFACE_DETAILS));\n+    }\n+\n+    @Override\n+    public Content getAnnotationDetailsTreeHeader() {\n+        Content memberDetailsTree = new ContentBuilder();\n+        Content heading = HtmlTree.HEADING(Headings.TypeDeclaration.DETAILS_HEADING,\n+                contents.annotationTypeDetailsLabel);\n+        memberDetailsTree.add(heading);\n+        return memberDetailsTree;\n+    }\n+\n+    @Override\n+    public Content getAnnotationDocTreeHeader(Element member) {\n+        Content annotationDocTree = new ContentBuilder();\n+        Content heading = HtmlTree.HEADING(Headings.TypeDeclaration.MEMBER_HEADING,\n+                Text.of(name(member)));\n+        annotationDocTree.add(heading);\n+        return HtmlTree.SECTION(HtmlStyle.detail, annotationDocTree)\n+                .setId(htmlIds.forMember(typeElement, (ExecutableElement) member));\n+    }\n+\n+    @Override\n+    public Content getSignature(Element member) {\n+        return new Signatures.MemberSignature(member, this)\n+                .setType(getType(member))\n+                .setAnnotations(writer.getAnnotationInfo(member, true))\n+                .toContent();\n+    }\n+\n+    @Override\n+    public void addDeprecated(Element member, Content annotationDocTree) {\n+        addDeprecatedInfo(member, annotationDocTree);\n+    }\n+\n+    @Override\n+    public void addPreview(Element member, Content contentTree) {\n+        addPreviewInfo(member, contentTree);\n+    }\n+\n+    @Override\n+    public void addComments(Element member, Content annotationDocTree) {\n+        addComment(member, annotationDocTree);\n+    }\n+\n+    @Override\n+    public void addTags(Element member, Content annotationDocTree) {\n+        writer.addTagsInfo(member, annotationDocTree);\n+    }\n+\n+    @Override\n+    public Content getAnnotationDetails(Content annotationDetailsTreeHeader, Content annotationDetailsTree) {\n+        Content annotationDetails = new ContentBuilder(annotationDetailsTreeHeader, annotationDetailsTree);\n+        return getMemberTree(HtmlTree.SECTION(HtmlStyle.memberDetails, annotationDetails));\n+    }\n+\n+    @Override\n+    public void addSummaryLabel(Content memberTree) {\n+        HtmlTree label = HtmlTree.HEADING(Headings.TypeDeclaration.SUMMARY_HEADING,\n+                switch (kind) {\n+                    case REQUIRED -> contents.annotateTypeRequiredMemberSummaryLabel;\n+                    case OPTIONAL -> contents.annotateTypeOptionalMemberSummaryLabel;\n+                    case ANY -> throw new RuntimeException(\"unsupported member kind\");\n+                });\n+        memberTree.add(label);\n+    }\n+\n+    \/**\n+     * Get the caption for the summary table.\n+     * @return the caption\n+     *\/\n+    protected Content getCaption() {\n+        return contents.getContent(\n+                switch (kind) {\n+                    case REQUIRED -> \"doclet.Annotation_Type_Required_Members\";\n+                    case OPTIONAL -> \"doclet.Annotation_Type_Optional_Members\";\n+                    case ANY -> throw new RuntimeException(\"unsupported member kind\");\n+                });\n+    }\n+\n+    @Override\n+    public TableHeader getSummaryTableHeader(Element member) {\n+        return new TableHeader(contents.modifierAndTypeLabel,\n+                switch (kind) {\n+                    case REQUIRED -> contents.annotationTypeRequiredMemberLabel;\n+                    case OPTIONAL -> contents.annotationTypeOptionalMemberLabel;\n+                    case ANY -> throw new RuntimeException(\"unsupported member kind\");\n+                },\n+                contents.descriptionLabel);\n+    }\n+\n+    @Override\n+    protected Table createSummaryTable() {\n+        return new Table(HtmlStyle.summaryTable)\n+                .setCaption(getCaption())\n+                .setHeader(getSummaryTableHeader(typeElement))\n+                .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colSecond, HtmlStyle.colLast);\n+    }\n+\n+    @Override\n+    public void addInheritedSummaryLabel(TypeElement typeElement, Content inheritedTree) {\n+    }\n+\n+    @Override\n+    protected void addSummaryLink(HtmlLinkInfo.Kind context, TypeElement typeElement, Element member,\n+                                  Content tdSummary) {\n+        Content memberLink = writer.getDocLink(context, utils.getEnclosingTypeElement(member), member,\n+                name(member), HtmlStyle.memberNameLink);\n+        Content code = HtmlTree.CODE(memberLink);\n+        tdSummary.add(code);\n+    }\n+\n+    @Override\n+    protected void addInheritedSummaryLink(TypeElement typeElement,\n+            Element member, Content linksTree) {\n+        \/\/Not applicable.\n+    }\n+\n+    @Override\n+    protected void addSummaryType(Element member, Content tdSummaryType) {\n+        addModifierAndType(member, getType(member), tdSummaryType);\n+    }\n+\n+    @Override\n+    protected Content getSummaryLink(Element member) {\n+        String name = utils.getFullyQualifiedName(member) + \".\" + member.getSimpleName();\n+        return writer.getDocLink(HtmlLinkInfo.Kind.MEMBER_DEPRECATED_PREVIEW, member, name);\n+    }\n+\n+    protected Comment selectComment(Comment c1, Comment c2) {\n+        HtmlConfiguration configuration = writer.configuration;\n+        SourceVersion sv = configuration.docEnv.getSourceVersion();\n+        return sv.compareTo(SourceVersion.RELEASE_16) < 0 ? c1 : c2;\n+    }\n+\n+    private TypeMirror getType(Element member) {\n+        return utils.isExecutableElement(member)\n+                ? utils.getReturnType(typeElement, (ExecutableElement) member)\n+                : member.asType();\n+    }\n+\n+    public void addDefaultValueInfo(Element member, Content annotationDocTree) {\n+        if (utils.isAnnotationType(member)) {\n+            ExecutableElement ee = (ExecutableElement) member;\n+            AnnotationValue value = ee.getDefaultValue();\n+            if (value != null) {\n+                Content dl = HtmlTree.DL(HtmlStyle.notes);\n+                dl.add(HtmlTree.DT(contents.default_));\n+                dl.add(HtmlTree.DD(Text.of(value.toString())));\n+                annotationDocTree.add(dl);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeMemberWriterImpl.java","additions":283,"deletions":0,"binary":false,"changes":283,"status":"added"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.formats.html;\n-\n-import javax.lang.model.element.AnnotationValue;\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.TypeElement;\n-\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n-import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeOptionalMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;\n-\n-\n-\/**\n- * Writes annotation type optional member documentation in HTML format.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class AnnotationTypeOptionalMemberWriterImpl extends\n-        AnnotationTypeRequiredMemberWriterImpl\n-    implements AnnotationTypeOptionalMemberWriter, MemberSummaryWriter {\n-\n-    \/**\n-     * Construct a new AnnotationTypeOptionalMemberWriterImpl.\n-     *\n-     * @param writer         the writer that will write the output.\n-     * @param annotationType the AnnotationType that holds this member.\n-     *\/\n-    public AnnotationTypeOptionalMemberWriterImpl(SubWriterHolderWriter writer,\n-        TypeElement annotationType) {\n-        super(writer, annotationType);\n-    }\n-\n-    @Override\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content memberSummaryTree) {\n-        memberSummaryTree.add(selectComment(\n-                MarkerComments.START_OF_ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY,\n-                MarkerComments.START_OF_ANNOTATION_INTERFACE_OPTIONAL_MEMBER_SUMMARY));\n-        Content memberTree = new ContentBuilder();\n-        writer.addSummaryHeader(this, memberTree);\n-        return memberTree;\n-    }\n-\n-    @Override\n-    public void addSummary(Content summariesList, Content content) {\n-        writer.addSummary(HtmlStyle.memberSummary,\n-                HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY, summariesList, content);\n-    }\n-\n-    @Override\n-    public void addDefaultValueInfo(Element member, Content annotationDocTree) {\n-        if (utils.isAnnotationType(member)) {\n-            ExecutableElement ee = (ExecutableElement) member;\n-            AnnotationValue value = ee.getDefaultValue();\n-            if (value != null) {\n-                Content dl = HtmlTree.DL(HtmlStyle.notes);\n-                dl.add(HtmlTree.DT(contents.default_));\n-                dl.add(HtmlTree.DD(Text.of(value.toString())));\n-                annotationDocTree.add(dl);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addSummaryLabel(Content memberTree) {\n-        Content label = HtmlTree.HEADING(Headings.TypeDeclaration.SUMMARY_HEADING,\n-                contents.annotateTypeOptionalMemberSummaryLabel);\n-        memberTree.add(label);\n-    }\n-\n-    @Override\n-    protected Content getCaption() {\n-        return contents.getContent(\"doclet.Annotation_Type_Optional_Members\");\n-    }\n-\n-    @Override\n-    public TableHeader getSummaryTableHeader(Element member) {\n-        return new TableHeader(contents.modifierAndTypeLabel,\n-                contents.annotationTypeOptionalMemberLabel, contents.descriptionLabel);\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeOptionalMemberWriterImpl.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.formats.html;\n-\n-import javax.lang.model.SourceVersion;\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.type.TypeMirror;\n-\n-import jdk.javadoc.internal.doclets.formats.html.markup.Comment;\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n-import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeRequiredMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;\n-\n-\n-\/**\n- * Writes annotation type required member documentation in HTML format.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class AnnotationTypeRequiredMemberWriterImpl extends AbstractMemberWriter\n-    implements AnnotationTypeRequiredMemberWriter, MemberSummaryWriter {\n-\n-    \/**\n-     * Construct a new AnnotationTypeRequiredMemberWriterImpl.\n-     *\n-     * @param writer         the writer that will write the output.\n-     * @param annotationType the AnnotationType that holds this member.\n-     *\/\n-    public AnnotationTypeRequiredMemberWriterImpl(SubWriterHolderWriter writer,\n-            TypeElement annotationType) {\n-        super(writer, annotationType);\n-    }\n-\n-    @Override\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content memberSummaryTree) {\n-        memberSummaryTree.add(selectComment(\n-                MarkerComments.START_OF_ANNOTATION_TYPE_REQUIRED_MEMBER_SUMMARY,\n-                MarkerComments.START_OF_ANNOTATION_INTERFACE_REQUIRED_MEMBER_SUMMARY));\n-        Content memberTree = new ContentBuilder();\n-        writer.addSummaryHeader(this, memberTree);\n-        return memberTree;\n-    }\n-\n-    @Override\n-    public Content getMemberTreeHeader() {\n-        return writer.getMemberTreeHeader();\n-    }\n-\n-    @Override\n-    public void addSummary(Content summariesList, Content content) {\n-        writer.addSummary(HtmlStyle.memberSummary,\n-                HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY, summariesList, content);\n-    }\n-\n-    @Override\n-    public void addAnnotationDetailsMarker(Content memberDetails) {\n-        memberDetails.add(selectComment(\n-                MarkerComments.START_OF_ANNOTATION_TYPE_DETAILS,\n-                MarkerComments.START_OF_ANNOTATION_INTERFACE_DETAILS));\n-    }\n-\n-    @Override\n-    public Content getAnnotationDetailsTreeHeader() {\n-        Content memberDetailsTree = new ContentBuilder();\n-        if (!writer.printedAnnotationHeading) {\n-            Content heading = HtmlTree.HEADING(Headings.TypeDeclaration.DETAILS_HEADING,\n-                    contents.annotationTypeDetailsLabel);\n-            memberDetailsTree.add(heading);\n-            writer.printedAnnotationHeading = true;\n-        }\n-        return memberDetailsTree;\n-    }\n-\n-    @Override\n-    public Content getAnnotationDocTreeHeader(Element member) {\n-        Content annotationDocTree = new ContentBuilder();\n-        Content heading = HtmlTree.HEADING(Headings.TypeDeclaration.MEMBER_HEADING,\n-                Text.of(name(member)));\n-        annotationDocTree.add(heading);\n-        return HtmlTree.SECTION(HtmlStyle.detail, annotationDocTree)\n-                .setId(htmlIds.forMember(typeElement, (ExecutableElement) member));\n-    }\n-\n-    @Override\n-    public Content getSignature(Element member) {\n-        return new Signatures.MemberSignature(member, this)\n-                .setType(getType(member))\n-                .setAnnotations(writer.getAnnotationInfo(member, true))\n-                .toContent();\n-    }\n-\n-    @Override\n-    public void addDeprecated(Element member, Content annotationDocTree) {\n-        addDeprecatedInfo(member, annotationDocTree);\n-    }\n-\n-    @Override\n-    public void addPreview(Element member, Content contentTree) {\n-        addPreviewInfo(member, contentTree);\n-    }\n-\n-    @Override\n-    public void addComments(Element member, Content annotationDocTree) {\n-        addComment(member, annotationDocTree);\n-    }\n-\n-    @Override\n-    public void addTags(Element member, Content annotationDocTree) {\n-        writer.addTagsInfo(member, annotationDocTree);\n-    }\n-\n-    @Override\n-    public Content getAnnotationDetails(Content annotationDetailsTreeHeader, Content annotationDetailsTree) {\n-        Content annotationDetails = new ContentBuilder(annotationDetailsTreeHeader, annotationDetailsTree);\n-        return getMemberTree(HtmlTree.SECTION(HtmlStyle.memberDetails, annotationDetails));\n-    }\n-\n-    @Override\n-    public void addSummaryLabel(Content memberTree) {\n-        HtmlTree label = HtmlTree.HEADING(Headings.TypeDeclaration.SUMMARY_HEADING,\n-                contents.annotateTypeRequiredMemberSummaryLabel);\n-        memberTree.add(label);\n-    }\n-\n-    \/**\n-     * Get the caption for the summary table.\n-     * @return the caption\n-     *\/\n-    \/\/ Overridden by AnnotationTypeOptionalMemberWriterImpl\n-    protected Content getCaption() {\n-        return contents.getContent(\"doclet.Annotation_Type_Required_Members\");\n-    }\n-\n-    @Override\n-    public TableHeader getSummaryTableHeader(Element member) {\n-        return new TableHeader(contents.modifierAndTypeLabel,\n-                contents.annotationTypeRequiredMemberLabel, contents.descriptionLabel);\n-    }\n-\n-    @Override\n-    protected Table createSummaryTable() {\n-        return new Table(HtmlStyle.summaryTable)\n-                .setCaption(getCaption())\n-                .setHeader(getSummaryTableHeader(typeElement))\n-                .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colSecond, HtmlStyle.colLast);\n-    }\n-\n-    @Override\n-    public void addInheritedSummaryLabel(TypeElement typeElement, Content inheritedTree) {\n-    }\n-\n-    @Override\n-    protected void addSummaryLink(HtmlLinkInfo.Kind context, TypeElement typeElement, Element member,\n-                                  Content tdSummary) {\n-        Content memberLink = writer.getDocLink(context, utils.getEnclosingTypeElement(member), member,\n-                name(member), HtmlStyle.memberNameLink);\n-        Content code = HtmlTree.CODE(memberLink);\n-        tdSummary.add(code);\n-    }\n-\n-    @Override\n-    protected void addInheritedSummaryLink(TypeElement typeElement,\n-            Element member, Content linksTree) {\n-        \/\/Not applicable.\n-    }\n-\n-    @Override\n-    protected void addSummaryType(Element member, Content tdSummaryType) {\n-        addModifierAndType(member, getType(member), tdSummaryType);\n-    }\n-\n-    @Override\n-    protected Content getSummaryLink(Element member) {\n-        String name = utils.getFullyQualifiedName(member) + \".\" + member.getSimpleName();\n-        return writer.getDocLink(HtmlLinkInfo.Kind.MEMBER_DEPRECATED_PREVIEW, member, name);\n-    }\n-\n-    protected Comment selectComment(Comment c1, Comment c2) {\n-        HtmlConfiguration configuration = writer.configuration;\n-        SourceVersion sv = configuration.docEnv.getSourceVersion();\n-        return sv.compareTo(SourceVersion.RELEASE_16) < 0 ? c1 : c2;\n-    }\n-\n-    private TypeMirror getType(Element member) {\n-        return utils.isExecutableElement(member)\n-                ? utils.getReturnType(typeElement, (ExecutableElement) member)\n-                : member.asType();\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"},{"patch":"@@ -180,5 +180,0 @@\n-    \/**\n-     * To check whether annotation heading is printed or not.\n-     *\/\n-    protected boolean printedAnnotationHeading = false;\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -446,0 +446,2 @@\n+            \/\/ We generate separate summaries for optional and required annotation members\n+            case ANNOTATION_TYPE_MEMBER -> throw new IllegalArgumentException(\"unsupported member kind\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -390,13 +390,3 @@\n-            if (element.getKind() == ElementKind.ANNOTATION_TYPE) {\n-                \/\/ Handle annotation interfaces separately as required and optional elements\n-                \/\/ share a combined details section.\n-                addTypeDetailLink(FIELDS, !vmt.getVisibleMembers(FIELDS).isEmpty(), listContents);\n-                boolean hasAnnotationElements =\n-                        !vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_OPTIONAL).isEmpty()\n-                                || !vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_REQUIRED).isEmpty();\n-                addTypeDetailLink(ANNOTATION_TYPE_MEMBER_REQUIRED, hasAnnotationElements, listContents);\n-            } else {\n-                Set<VisibleMemberTable.Kind> detailSet = VisibleMemberTable.Kind.forDetailsOf(element.getKind());\n-                for (VisibleMemberTable.Kind kind : detailSet) {\n-                    addTypeDetailLink(kind, !vmt.getVisibleMembers(kind).isEmpty(), listContents);\n-                }\n+            Set<VisibleMemberTable.Kind> detailSet = VisibleMemberTable.Kind.forDetailsOf(element.getKind());\n+            for (VisibleMemberTable.Kind kind : detailSet) {\n+                addTypeDetailLink(kind, !vmt.getVisibleMembers(kind).isEmpty(), listContents);\n@@ -433,4 +423,2 @@\n-            case ANNOTATION_TYPE_MEMBER_REQUIRED,\n-                 ANNOTATION_TYPE_MEMBER_OPTIONAL ->\n-                    links.createLink(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL,\n-                            contents.navAnnotationTypeMember, link);\n+            case ANNOTATION_TYPE_MEMBER -> links.createLink(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL,\n+                    contents.navAnnotationTypeMember, link);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-            default -> new AnnotationTypeOptionalMemberWriterImpl(this, null);\n+            default -> new AnnotationTypeMemberWriterImpl(this);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeOptionalMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeRequiredMemberWriter;\n@@ -83,1 +81,1 @@\n-    public AnnotationTypeOptionalMemberWriter getAnnotationTypeOptionalMemberWriter(\n+    public AnnotationTypeMemberWriterImpl getAnnotationTypeMemberWriter(\n@@ -86,2 +84,2 @@\n-        return new AnnotationTypeOptionalMemberWriterImpl(\n-                (ClassWriterImpl) classWriter, te);\n+        return new AnnotationTypeMemberWriterImpl(\n+                (ClassWriterImpl) classWriter, te, AnnotationTypeMemberWriterImpl.Kind.ANY);\n@@ -91,1 +89,1 @@\n-    public AnnotationTypeRequiredMemberWriter getAnnotationTypeRequiredMemberWriter(\n+    public AnnotationTypeMemberWriterImpl getAnnotationTypeOptionalMemberWriter(\n@@ -94,2 +92,10 @@\n-        return new AnnotationTypeRequiredMemberWriterImpl(\n-            (ClassWriterImpl) classWriter, te);\n+        return new AnnotationTypeMemberWriterImpl(\n+                (ClassWriterImpl) classWriter, te, AnnotationTypeMemberWriterImpl.Kind.OPTIONAL);\n+    }\n+\n+    @Override\n+    public AnnotationTypeMemberWriterImpl getAnnotationTypeRequiredMemberWriter(\n+            ClassWriter classWriter) {\n+        TypeElement te = classWriter.getTypeElement();\n+        return new AnnotationTypeMemberWriterImpl(\n+            (ClassWriterImpl) classWriter, te, AnnotationTypeMemberWriterImpl.Kind.REQUIRED);\n@@ -135,2 +141,1 @@\n-                return (AnnotationTypeOptionalMemberWriterImpl)\n-                        getAnnotationTypeOptionalMemberWriter(classWriter);\n+                return getAnnotationTypeOptionalMemberWriter(classWriter);\n@@ -138,2 +143,1 @@\n-                return (AnnotationTypeRequiredMemberWriterImpl)\n-                        getAnnotationTypeRequiredMemberWriter(classWriter);\n+                return getAnnotationTypeRequiredMemberWriter(classWriter);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/WriterFactoryImpl.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit;\n+\n+import javax.lang.model.element.Element;\n+\n+\/**\n+ * The interface for writing annotation type required member output.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+\n+public interface AnnotationTypeMemberWriter extends MemberWriter {\n+\n+    \/**\n+     * Add the annotation type member tree header.\n+     *\n+     * @return content tree for the member tree header\n+     *\/\n+    Content getMemberTreeHeader();\n+\n+    \/**\n+     * Add the annotation type details marker.\n+     *\n+     * @param memberDetails the content tree representing details marker\n+     *\/\n+    void addAnnotationDetailsMarker(Content memberDetails);\n+\n+    \/**\n+     * Add the annotation type details tree header.\n+     *\n+     * @return content tree for the annotation details header\n+     *\/\n+    Content getAnnotationDetailsTreeHeader();\n+\n+    \/**\n+     * Get the annotation type documentation tree header.\n+     *\n+     * @param member the annotation type being documented\n+     * @return content tree for the annotation type documentation header\n+     *\/\n+    Content getAnnotationDocTreeHeader(Element member);\n+\n+    \/**\n+     * Get the annotation type details tree.\n+     *\n+     * @param annotationDetailsTreeHeader the content tree representing annotation type details header\n+     * @param annotationDetailsTree the content tree representing annotation type details\n+     * @return content tree for the annotation type details\n+     *\/\n+    Content getAnnotationDetails(Content annotationDetailsTreeHeader, Content annotationDetailsTree);\n+\n+    \/**\n+     * Get the signature for the given member.\n+     *\n+     * @param member the member being documented\n+     * @return content tree for the annotation type signature\n+     *\/\n+    Content getSignature(Element member);\n+\n+    \/**\n+     * Add the deprecated output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the deprecated information will be added\n+     *\/\n+    void addDeprecated(Element member, Content annotationDocTree);\n+\n+    \/**\n+     * Add the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param contentTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(Element member, Content contentTree);\n+\n+    \/**\n+     * Add the comments for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree the content tree to which the comments will be added\n+     *\/\n+    void addComments(Element member, Content annotationDocTree);\n+\n+    \/**\n+     * Add the tags for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree the content tree to which the tags will be added\n+     *\/\n+    void addTags(Element member, Content annotationDocTree);\n+\n+    \/**\n+     * Add the the default value documentation if the member has one.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the default value will be added\n+     *\/\n+    void addDefaultValueInfo(Element member, Content annotationDocTree);\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AnnotationTypeMemberWriter.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit;\n-\n-import javax.lang.model.element.Element;\n-\n-\/**\n- * The interface for writing annotation type optional member output.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-\n-public interface AnnotationTypeOptionalMemberWriter extends\n-        AnnotationTypeRequiredMemberWriter {\n-\n-    \/**\n-     * Add the the default value documentation.\n-     *\n-     * @param member the member being documented\n-     * @param annotationDocTree content tree to which the default value will be added\n-     *\/\n-    void addDefaultValueInfo(Element member, Content annotationDocTree);\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AnnotationTypeOptionalMemberWriter.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit;\n-\n-import javax.lang.model.element.Element;\n-\n-\/**\n- * The interface for writing annotation type required member output.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-\n-public interface AnnotationTypeRequiredMemberWriter extends MemberWriter {\n-\n-    \/**\n-     * Add the annotation type member tree header.\n-     *\n-     * @return content tree for the member tree header\n-     *\/\n-    Content getMemberTreeHeader();\n-\n-    \/**\n-     * Add the annotation type details marker.\n-     *\n-     * @param memberDetails the content tree representing details marker\n-     *\/\n-    void addAnnotationDetailsMarker(Content memberDetails);\n-\n-    \/**\n-     * Add the annotation type details tree header.\n-     *\n-     * @return content tree for the annotation details header\n-     *\/\n-    Content getAnnotationDetailsTreeHeader();\n-\n-    \/**\n-     * Get the annotation type documentation tree header.\n-     *\n-     * @param member the annotation type being documented\n-     * @return content tree for the annotation type documentation header\n-     *\/\n-    Content getAnnotationDocTreeHeader(Element member);\n-\n-    \/**\n-     * Get the annotation type details tree.\n-     *\n-     * @param annotationDetailsTreeHeader the content tree representing annotation type details header\n-     * @param annotationDetailsTree the content tree representing annotation type details\n-     * @return content tree for the annotation type details\n-     *\/\n-    Content getAnnotationDetails(Content annotationDetailsTreeHeader, Content annotationDetailsTree);\n-\n-    \/**\n-     * Get the signature for the given member.\n-     *\n-     * @param member the member being documented\n-     * @return content tree for the annotation type signature\n-     *\/\n-    Content getSignature(Element member);\n-\n-    \/**\n-     * Add the deprecated output for the given member.\n-     *\n-     * @param member the member being documented\n-     * @param annotationDocTree content tree to which the deprecated information will be added\n-     *\/\n-    void addDeprecated(Element member, Content annotationDocTree);\n-\n-    \/**\n-     * Add the preview output for the given member.\n-     *\n-     * @param member the member being documented\n-     * @param annotationDocTree content tree to which the preview information will be added\n-     *\/\n-    void addPreview(Element member, Content contentTree);\n-\n-    \/**\n-     * Add the comments for the given member.\n-     *\n-     * @param member the member being documented\n-     * @param annotationDocTree the content tree to which the comments will be added\n-     *\/\n-    void addComments(Element member, Content annotationDocTree);\n-\n-    \/**\n-     * Add the tags for the given member.\n-     *\n-     * @param member the member being documented\n-     * @param annotationDocTree the content tree to which the tags will be added\n-     *\/\n-    void addTags(Element member, Content annotationDocTree);\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AnnotationTypeRequiredMemberWriter.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,10 @@\n+    \/**\n+     * Return the annotation type member writer for a given annotation\n+     * type, or null if this writer is not supported by the doclet.\n+     *\n+     * @param classWriter the writer for the annotation type being documented\n+     * @return the member writer\n+     *\/\n+    AnnotationTypeMemberWriter getAnnotationTypeMemberWriter(\n+            ClassWriter classWriter);\n+\n@@ -99,1 +109,1 @@\n-    AnnotationTypeOptionalMemberWriter getAnnotationTypeOptionalMemberWriter(\n+    AnnotationTypeMemberWriter getAnnotationTypeOptionalMemberWriter(\n@@ -109,1 +119,1 @@\n-    AnnotationTypeRequiredMemberWriter getAnnotationTypeRequiredMemberWriter(\n+    AnnotationTypeMemberWriter getAnnotationTypeRequiredMemberWriter(\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WriterFactory.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-    protected List<? extends Element> getVisibleMembers(Kind kind) {\n+    protected List<Element> getVisibleMembers(Kind kind) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/AbstractMemberBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,214 @@\n+\/*\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit.builders;\n+\n+import java.util.*;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.TypeElement;\n+\n+import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeMemberWriter;\n+import jdk.javadoc.internal.doclets.toolkit.BaseOptions;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.DocletException;\n+\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;\n+\n+\/**\n+ * Builds documentation for required annotation type members.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class AnnotationTypeMemberBuilder extends AbstractMemberBuilder {\n+\n+    \/**\n+     * The writer to output the member documentation.\n+     *\/\n+    protected AnnotationTypeMemberWriter writer;\n+\n+    \/**\n+     * The list of members being documented.\n+     *\/\n+    protected List<Element> members;\n+\n+    \/**\n+     * The index of the current member that is being documented at this point\n+     * in time.\n+     *\/\n+    protected Element currentMember;\n+\n+    \/**\n+     * Construct a new AnnotationTypeRequiredMemberBuilder.\n+     *\n+     * @param context  the build context.\n+     * @param typeElement the class whose members are being documented.\n+     * @param writer the doclet specific writer.\n+     *\/\n+    protected AnnotationTypeMemberBuilder(Context context,\n+                                          TypeElement typeElement,\n+                                          AnnotationTypeMemberWriter writer) {\n+        super(context, typeElement);\n+        this.writer = Objects.requireNonNull(writer);\n+        \/\/ In contrast to the annotation interface member summaries the details generated\n+        \/\/ by this builder share a single list for both required and optional members.\n+        this.members = getVisibleMembers(ANNOTATION_TYPE_MEMBER);\n+    }\n+\n+\n+    \/**\n+     * Construct a new AnnotationTypeMemberBuilder.\n+     *\n+     * @param context  the build context.\n+     * @param typeElement the class whose members are being documented.\n+     * @param writer the doclet specific writer.\n+     * @return an instance of this object\n+     *\/\n+    public static AnnotationTypeMemberBuilder getInstance(\n+            Context context, TypeElement typeElement,\n+            AnnotationTypeMemberWriter writer) {\n+        return new AnnotationTypeMemberBuilder(context, typeElement,\n+                writer);\n+    }\n+\n+    \/**\n+     * Returns whether or not there are members to document.\n+     * @return whether or not there are members to document\n+     *\/\n+    @Override\n+    public boolean hasMembersToDocument() {\n+        return !members.isEmpty();\n+    }\n+\n+    @Override\n+    public void build(Content contentTree) throws DocletException {\n+        buildAnnotationTypeMember(contentTree);\n+    }\n+\n+    \/**\n+     * Build the member documentation.\n+     *\n+     * @param detailsList the content tree to which the documentation will be added\n+     * @throws DocletException if an error occurs\n+     *\/\n+    protected void buildAnnotationTypeMember(Content detailsList)\n+            throws DocletException {\n+        if (hasMembersToDocument()) {\n+            writer.addAnnotationDetailsMarker(detailsList);\n+            Content annotationDetailsTreeHeader = writer.getAnnotationDetailsTreeHeader();\n+            Content memberList = writer.getMemberList();\n+\n+            for (Element member : members) {\n+                currentMember = member;\n+                Content annotationDocTree = writer.getAnnotationDocTreeHeader(currentMember);\n+\n+                buildAnnotationTypeMemberChildren(annotationDocTree);\n+\n+                memberList.add(writer.getMemberListItem(annotationDocTree));\n+            }\n+            Content annotationDetails = writer.getAnnotationDetails(annotationDetailsTreeHeader, memberList);\n+            detailsList.add(annotationDetails);\n+        }\n+    }\n+\n+    protected void buildAnnotationTypeMemberChildren(Content annotationDocTree) {\n+        buildSignature(annotationDocTree);\n+        buildDeprecationInfo(annotationDocTree);\n+        buildPreviewInfo(annotationDocTree);\n+        buildMemberComments(annotationDocTree);\n+        buildTagInfo(annotationDocTree);\n+        buildDefaultValueInfo(annotationDocTree);\n+    }\n+\n+    \/**\n+     * Build the signature.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildSignature(Content annotationDocTree) {\n+        annotationDocTree.add(writer.getSignature(currentMember));\n+    }\n+\n+    \/**\n+     * Build the deprecation information.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildDeprecationInfo(Content annotationDocTree) {\n+        writer.addDeprecated(currentMember, annotationDocTree);\n+    }\n+\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content annotationDocTree) {\n+        writer.addPreview(currentMember, annotationDocTree);\n+    }\n+\n+    \/**\n+     * Build the comments for the member.  Do nothing if\n+     * {@link BaseOptions#noComment()} is set to true.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildMemberComments(Content annotationDocTree) {\n+        if (!options.noComment()) {\n+            writer.addComments(currentMember, annotationDocTree);\n+        }\n+    }\n+\n+    \/**\n+     * Build the tag information.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildTagInfo(Content annotationDocTree) {\n+        writer.addTags(currentMember, annotationDocTree);\n+    }\n+\n+    \/**\n+     * Build the default value for this optional member.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildDefaultValueInfo(Content annotationDocTree) {\n+        writer.addDefaultValueInfo(currentMember, annotationDocTree);\n+    }\n+\n+    \/**\n+     * Return the annotation type required member writer for this builder.\n+     *\n+     * @return the annotation type required member constant writer for this\n+     * builder.\n+     *\/\n+    public AnnotationTypeMemberWriter getWriter() {\n+        return writer;\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/AnnotationTypeMemberBuilder.java","additions":214,"deletions":0,"binary":false,"changes":214,"status":"added"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit.builders;\n-\n-import javax.lang.model.element.TypeElement;\n-\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeOptionalMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeRequiredMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n-\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;\n-\n-\/**\n- * Builds documentation for optional annotation type members.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class AnnotationTypeOptionalMemberBuilder extends AnnotationTypeRequiredMemberBuilder {\n-\n-    \/**\n-     * Construct a new AnnotationTypeMemberBuilder.\n-     *\n-     * @param context  the build context.\n-     * @param typeElement the class whose members are being documented.\n-     * @param writer the doclet specific writer.\n-     *\/\n-    private AnnotationTypeOptionalMemberBuilder(Context context,\n-            TypeElement typeElement,\n-            AnnotationTypeOptionalMemberWriter writer) {\n-        super(context, typeElement, writer, ANNOTATION_TYPE_MEMBER_OPTIONAL);\n-    }\n-\n-\n-    \/**\n-     * Construct a new AnnotationTypeMemberBuilder.\n-     *\n-     * @param context  the build context.\n-     * @param typeElement the class whose members are being documented.\n-     * @param writer the doclet specific writer.\n-     * @return the new AnnotationTypeMemberBuilder\n-     *\/\n-    public static AnnotationTypeOptionalMemberBuilder getInstance(\n-            Context context, TypeElement typeElement,\n-            AnnotationTypeOptionalMemberWriter writer) {\n-        return new AnnotationTypeOptionalMemberBuilder(context,\n-                typeElement, writer);\n-    }\n-\n-    @Override\n-    public void build(Content contentTree) throws DocletException {\n-        buildAnnotationTypeOptionalMember(contentTree);\n-    }\n-\n-    \/**\n-     * Build the annotation type optional member documentation.\n-     *\n-     * @param memberDetailsTree the content tree to which the documentation will be added\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    protected void buildAnnotationTypeOptionalMember(Content memberDetailsTree)\n-                throws DocletException {\n-        buildAnnotationTypeMember(memberDetailsTree);\n-    }\n-\n-    @Override\n-    protected void buildAnnotationTypeMemberChildren(Content annotationDocTree) {\n-        super.buildAnnotationTypeMemberChildren(annotationDocTree);\n-        buildDefaultValueInfo(annotationDocTree);\n-    }\n-\n-    \/**\n-     * Build the default value for this optional member.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildDefaultValueInfo(Content annotationDocTree) {\n-        ((AnnotationTypeOptionalMemberWriter) writer).addDefaultValueInfo(currentMember,\n-                annotationDocTree);\n-    }\n-\n-    @Override\n-    public AnnotationTypeRequiredMemberWriter getWriter() {\n-        return writer;\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/AnnotationTypeOptionalMemberBuilder.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,218 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit.builders;\n-\n-import java.util.*;\n-\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.TypeElement;\n-import jdk.javadoc.internal.doclets.formats.html.AbstractMemberWriter;\n-\n-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeRequiredMemberWriter;\n-import jdk.javadoc.internal.doclets.toolkit.BaseOptions;\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n-import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n-\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;\n-\n-\/**\n- * Builds documentation for required annotation type members.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class AnnotationTypeRequiredMemberBuilder extends AbstractMemberBuilder {\n-\n-\n-    \/**\n-     * The writer to output the member documentation.\n-     *\/\n-    protected AnnotationTypeRequiredMemberWriter writer;\n-\n-    \/**\n-     * The list of members being documented.\n-     *\/\n-    protected List<? extends Element> members;\n-\n-    \/**\n-     * The index of the current member that is being documented at this point\n-     * in time.\n-     *\/\n-    protected Element currentMember;\n-\n-    \/**\n-     * Construct a new AnnotationTypeRequiredMemberBuilder.\n-     *\n-     * @param context  the build context.\n-     * @param typeElement the class whose members are being documented.\n-     * @param writer the doclet specific writer.\n-     * @param memberType the kind of member this builder processes.\n-     *\/\n-    protected AnnotationTypeRequiredMemberBuilder(Context context,\n-            TypeElement typeElement,\n-            AnnotationTypeRequiredMemberWriter writer,\n-            VisibleMemberTable.Kind memberType) {\n-        super(context, typeElement);\n-        this.writer = Objects.requireNonNull(writer);\n-        this.members = getVisibleMembers(memberType);\n-    }\n-\n-\n-    \/**\n-     * Construct a new AnnotationTypeMemberBuilder.\n-     *\n-     * @param context  the build context.\n-     * @param typeElement the class whose members are being documented.\n-     * @param writer the doclet specific writer.\n-     * @return an instance of this object\n-     *\/\n-    public static AnnotationTypeRequiredMemberBuilder getInstance(\n-            Context context, TypeElement typeElement,\n-            AnnotationTypeRequiredMemberWriter writer) {\n-        return new AnnotationTypeRequiredMemberBuilder(context, typeElement,\n-                writer, ANNOTATION_TYPE_MEMBER_REQUIRED);\n-    }\n-\n-    \/**\n-     * Returns whether or not there are members to document.\n-     * @return whether or not there are members to document\n-     *\/\n-    @Override\n-    public boolean hasMembersToDocument() {\n-        return !members.isEmpty();\n-    }\n-\n-    @Override\n-    public void build(Content contentTree) throws DocletException {\n-        buildAnnotationTypeRequiredMember(contentTree);\n-    }\n-\n-    \/**\n-     * Build the annotation type required member documentation.\n-     *\n-     * @param memberDetailsTree the content tree to which the documentation will be added\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    protected void buildAnnotationTypeRequiredMember(Content memberDetailsTree)\n-            throws DocletException {\n-        buildAnnotationTypeMember(memberDetailsTree);\n-    }\n-\n-    \/**\n-     * Build the member documentation.\n-     *\n-     * @param detailsList the content tree to which the documentation will be added\n-     * @throws DocletException if an error occurs\n-     *\/\n-    protected void buildAnnotationTypeMember(Content detailsList)\n-            throws DocletException {\n-        if (hasMembersToDocument()) {\n-            writer.addAnnotationDetailsMarker(detailsList);\n-            Content annotationDetailsTreeHeader = writer.getAnnotationDetailsTreeHeader();\n-            Content memberList = writer.getMemberList();\n-\n-            for (Element member : members) {\n-                currentMember = member;\n-                Content annotationDocTree = writer.getAnnotationDocTreeHeader(currentMember);\n-\n-                buildAnnotationTypeMemberChildren(annotationDocTree);\n-\n-                memberList.add(writer.getMemberListItem(annotationDocTree));\n-            }\n-            Content annotationDetails = writer.getAnnotationDetails(annotationDetailsTreeHeader, memberList);\n-            detailsList.add(annotationDetails);\n-        }\n-    }\n-\n-    protected void buildAnnotationTypeMemberChildren(Content annotationDocTree) {\n-        buildSignature(annotationDocTree);\n-        buildDeprecationInfo(annotationDocTree);\n-        buildPreviewInfo(annotationDocTree);\n-        buildMemberComments(annotationDocTree);\n-        buildTagInfo(annotationDocTree);\n-    }\n-\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildSignature(Content annotationDocTree) {\n-        annotationDocTree.add(writer.getSignature(currentMember));\n-    }\n-\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content annotationDocTree) {\n-        writer.addDeprecated(currentMember, annotationDocTree);\n-    }\n-\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content annotationDocTree) {\n-        writer.addPreview(currentMember, annotationDocTree);\n-    }\n-\n-    \/**\n-     * Build the comments for the member.  Do nothing if\n-     * {@link BaseOptions#noComment()} is set to true.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildMemberComments(Content annotationDocTree) {\n-        if (!options.noComment()) {\n-            writer.addComments(currentMember, annotationDocTree);\n-        }\n-    }\n-\n-    \/**\n-     * Build the tag information.\n-     *\n-     * @param annotationDocTree the content tree to which the documentation will be added\n-     *\/\n-    protected void buildTagInfo(Content annotationDocTree) {\n-        writer.addTags(currentMember, annotationDocTree);\n-    }\n-\n-    \/**\n-     * Return the annotation type required member writer for this builder.\n-     *\n-     * @return the annotation type required member constant writer for this\n-     * builder.\n-     *\/\n-    public AnnotationTypeRequiredMemberWriter getWriter() {\n-        return writer;\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/AnnotationTypeRequiredMemberBuilder.java","additions":0,"deletions":218,"binary":false,"changes":218,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,0 @@\n-\n-\n-\n@@ -136,16 +133,1 @@\n-    public AbstractMemberBuilder getAnnotationTypeOptionalMemberBuilder(\n-            ClassWriter classWriter) {\n-        return AnnotationTypeOptionalMemberBuilder.getInstance(context,\n-            classWriter.getTypeElement(),\n-            writerFactory.getAnnotationTypeOptionalMemberWriter(classWriter));\n-    }\n-\n-    \/**\n-     * Return an instance of the annotation type member builder for the given\n-     * class.\n-     *\n-     * @param classWriter the writer for the enclosing annotation type\n-     * @return an instance of the annotation type member builder for the given\n-     *         annotation type.\n-     *\/\n-    public AbstractMemberBuilder getAnnotationTypeRequiredMemberBuilder(\n+    public AbstractMemberBuilder getAnnotationTypeMemberBuilder(\n@@ -153,1 +135,1 @@\n-        return AnnotationTypeRequiredMemberBuilder.getInstance(context,\n+        return AnnotationTypeMemberBuilder.getInstance(context,\n@@ -155,1 +137,1 @@\n-            writerFactory.getAnnotationTypeRequiredMemberWriter(classWriter));\n+            writerFactory.getAnnotationTypeMemberWriter(classWriter));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/BuilderFactory.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -344,2 +344,1 @@\n-        buildAnnotationTypeRequiredMemberDetails(detailsList);\n-        buildAnnotationTypeOptionalMemberDetails(detailsList);\n+        buildAnnotationTypeMemberDetails(detailsList);\n@@ -407,1 +406,1 @@\n-    protected void buildAnnotationTypeOptionalMemberDetails(Content memberDetailsTree)\n+    protected void buildAnnotationTypeMemberDetails(Content memberDetailsTree)\n@@ -409,12 +408,1 @@\n-        builderFactory.getAnnotationTypeOptionalMemberBuilder(writer).build(memberDetailsTree);\n-    }\n-\n-    \/**\n-     * Build the annotation type required member documentation.\n-     *\n-     * @param memberDetailsTree the content tree to which the documentation will be added\n-     * @throws DocletException if there is a problem building the documentation\n-     *\/\n-    protected void buildAnnotationTypeRequiredMemberDetails(Content memberDetailsTree)\n-            throws DocletException {\n-        builderFactory.getAnnotationTypeRequiredMemberBuilder(writer).build(memberDetailsTree);\n+        builderFactory.getAnnotationTypeMemberBuilder(writer).build(memberDetailsTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ClassBuilder.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        ANNOTATION_TYPE_MEMBER_OPTIONAL,\n+        ANNOTATION_TYPE_MEMBER,\n@@ -108,0 +108,1 @@\n+        ANNOTATION_TYPE_MEMBER_OPTIONAL,\n@@ -115,1 +116,1 @@\n-                FIELDS, ANNOTATION_TYPE_MEMBER_OPTIONAL, ANNOTATION_TYPE_MEMBER_REQUIRED);\n+                FIELDS, ANNOTATION_TYPE_MEMBER_REQUIRED, ANNOTATION_TYPE_MEMBER_OPTIONAL);\n@@ -120,0 +121,2 @@\n+        private static final EnumSet<Kind> annotationDetailSet = EnumSet.of(\n+                FIELDS, ANNOTATION_TYPE_MEMBER);\n@@ -138,3 +141,5 @@\n-            return kind == ElementKind.ENUM\n-                    ? enumDetailSet\n-                    : defaultDetailSet;\n+            return switch (kind) {\n+                case ANNOTATION_TYPE -> annotationDetailSet;\n+                case ENUM -> enumDetailSet;\n+                default -> defaultDetailSet;\n+            };\n@@ -216,1 +221,1 @@\n-    public List<? extends Element> getAllVisibleMembers(Kind kind) {\n+    public List<Element> getAllVisibleMembers(Kind kind) {\n@@ -228,1 +233,1 @@\n-    public List<? extends Element> getVisibleMembers(Kind kind, Predicate<Element> p) {\n+    public List<Element> getVisibleMembers(Kind kind, Predicate<Element> p) {\n@@ -243,1 +248,1 @@\n-    public List<? extends Element> getVisibleMembers(Kind kind) {\n+    public List<Element> getVisibleMembers(Kind kind) {\n@@ -258,1 +263,1 @@\n-    public List<? extends Element> getMembers(Kind kind) {\n+    public List<Element> getMembers(Kind kind) {\n@@ -780,0 +785,1 @@\n+                            addMember(e, Kind.ANNOTATION_TYPE_MEMBER);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-             8242056 8261976\n+             8242056 8261976 8223358\n@@ -75,0 +75,1 @@\n+                    <ul class=\"sub-nav-list\">\n@@ -76,1 +77,4 @@\n-                    <li>Field&nbsp;|&nbsp;<\/li>\"\"\",\n+                    <li>Field&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#annotation-interface-required-element-summary\">Required<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#annotation-interface-optional-element-summary\">Optional<\/a><\/li>\n+                    <\/ul>\"\"\",\n@@ -78,0 +82,1 @@\n+                    <ul class=\"sub-nav-list\">\n@@ -79,1 +84,3 @@\n-                    <li>Field&nbsp;|&nbsp;<\/li>\"\"\");\n+                    <li>Field&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#annotation-interface-element-detail\">Element<\/a><\/li>\n+                    <\/ul>\"\"\");\n@@ -82,14 +89,64 @@\n-                    \"<!-- ============ ANNOTATION INTERFACE MEMBER DETAIL =========== -->\",\n-                    \"<ul class=\\\"member-list\\\">\",\n-                    \"<li>\",\n-                    \"\"\"\n-                        <section class=\"details\" id=\"annotation-interface-element-detail\">\"\"\",\n-                    \"<h2>Element Details<\/h2>\",\n-                    \"<\/a>\",\n-                    \"<ul class=\\\"member-list\\\">\",\n-                    \"<li>\",\n-                    \"\"\"\n-                        <section class=\"detail\" id=\"value()\">\"\"\",\n-                    \"<h3>value<\/h3>\\n\",\n-                    \"\"\"\n-                        <div class=\"member-signature\"><span class=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">value<\/span><\/div>\"\"\");\n+                \"\"\"\n+                    <section class=\"summary\">\n+                    <ul class=\"summary-list\">\n+                    <!-- =========== ANNOTATION INTERFACE REQUIRED MEMBER SUMMARY =========== -->\n+                    <li>\n+                    <section class=\"member-summary\" id=\"annotation-interface-required-element-summary\">\n+                    <h2>Required Element Summary<\/h2>\n+                    <div class=\"caption\"><span>Required Elements<\/span><\/div>\n+                    <div class=\"summary-table three-column-summary\">\n+                    <div class=\"table-header col-first\">Modifier and Type<\/div>\n+                    <div class=\"table-header col-second\">Required Element<\/div>\n+                    <div class=\"table-header col-last\">Description<\/div>\n+                    <div class=\"col-first even-row-color\"><code>int<\/code><\/div>\n+                    <div class=\"col-second even-row-color\"><code><a href=\"#value()\" class=\"member-name-link\">value<\/a><\/code><\/div>\n+                    <div class=\"col-last even-row-color\">&nbsp;<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    <\/li>\n+                    <!-- =========== ANNOTATION INTERFACE OPTIONAL MEMBER SUMMARY =========== -->\n+                    <li>\n+                    <section class=\"member-summary\" id=\"annotation-interface-optional-element-summary\">\n+                    <h2>Optional Element Summary<\/h2>\n+                    <div class=\"caption\"><span>Optional Elements<\/span><\/div>\n+                    <div class=\"summary-table three-column-summary\">\n+                    <div class=\"table-header col-first\">Modifier and Type<\/div>\n+                    <div class=\"table-header col-second\">Optional Element<\/div>\n+                    <div class=\"table-header col-last\">Description<\/div>\n+                    <div class=\"col-first even-row-color\"><code>java.lang.String<\/code><\/div>\n+                    <div class=\"col-second even-row-color\"><code><a href=\"#optional()\" class=\"member-name-link\">optional<\/a><\/code><\/div>\n+                    <div class=\"col-last even-row-color\">&nbsp;<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    <\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\",\n+                \"\"\"\n+                    <section class=\"details\" id=\"annotation-interface-element-detail\">\n+                    <ul class=\"details-list\">\n+                    <!-- ============ ANNOTATION INTERFACE MEMBER DETAIL =========== -->\n+                    <li>\n+                    <section class=\"member-details\">\n+                    <h2>Element Details<\/h2>\n+                    <ul class=\"member-list\">\n+                    <li>\n+                    <section class=\"detail\" id=\"value()\">\n+                    <h3>value<\/h3>\n+                    <div class=\"member-signature\"><span class=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">value<\/span><\/div>\n+                    <\/section>\n+                    <\/li>\n+                    <li>\n+                    <section class=\"detail\" id=\"optional()\">\n+                    <h3>optional<\/h3>\n+                    <div class=\"member-signature\"><span class=\"return-type\">java.lang.String<\/span>&nbsp;<span class=\"element-name\">optional<\/span><\/div>\n+                    <dl class=\"notes\">\n+                    <dt>Default:<\/dt>\n+                    <dd>\"\"<\/dd>\n+                    <\/dl>\n+                    <\/section>\n+                    <\/li>\n+                    <\/ul>\n+                    <\/section>\n+                    <\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAnnotationTypes\/TestAnnotationTypes.java","additions":74,"deletions":17,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    String optional() default \"\";\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAnnotationTypes\/pkg\/AnnotationType.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}