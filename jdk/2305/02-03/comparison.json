{"files":[{"patch":"@@ -989,1 +989,1 @@\n-        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText);\n@@ -1055,1 +1055,1 @@\n-    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText);\n@@ -1080,1 +1080,1 @@\n-                       isGray, effectiveRange.location, effectiveRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                       isGray, effectiveRange.location, effectiveRange.length);\n@@ -1095,1 +1095,1 @@\n-            selectionRange.location, selectionRange.length, JNI_FALSE); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+            selectionRange.location, selectionRange.length, JNI_FALSE);\n@@ -1117,1 +1117,1 @@\n-    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText);\n@@ -1170,1 +1170,1 @@\n-    jobject theString = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobject theString = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length);\n@@ -1204,1 +1204,1 @@\n-    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange);\n@@ -1245,1 +1245,1 @@\n-    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange);\n@@ -1284,1 +1284,1 @@\n-                                theRange.location); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                theRange.location);\n@@ -1325,1 +1325,1 @@\n-                      (jint)flippedLocation.x, (jint)flippedLocation.y); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      (jint)flippedLocation.x, (jint)flippedLocation.y);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenURI, jURL); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenURI, jURL);\n@@ -313,1 +313,1 @@\n-    jobject jFileNamesArray = (*env)->NewObject(env, sjc_ArrayList, jm_ArrayList_ctor, (jint)[filenames count]); \/\/ AWT_THREADING Safe (known object)\n+    jobject jFileNamesArray = (*env)->NewObject(env, sjc_ArrayList, jm_ArrayList_ctor, (jint)[filenames count]);\n@@ -366,1 +366,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handlePrintFile, jFileNamesArray); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handlePrintFile, jFileNamesArray);\n@@ -381,1 +381,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleNativeNotification, notificationType); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleNativeNotification, notificationType);\n@@ -625,1 +625,1 @@\n-                           waitUntilDone:NO]; \/\/ AWT_THREADING Safe (non-blocking)\n+                           waitUntilDone:NO];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/ApplicationDelegate.m","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                (*env)->CallVoidMethod(env, self.clipboardOwner, jm_lostOwnership); \/\/ AWT_THREADING Safe (event)\n+                (*env)->CallVoidMethod(env, self.clipboardOwner, jm_lostOwnership);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CClipboard.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-    jobject jfilenameArray = (*env)->NewObjectArray(env, filenameCount, stringClazz, NULL); \/\/ AWT_THREADING Safe (known object)\n+    jobject jfilenameArray = (*env)->NewObjectArray(env, filenameCount, stringClazz, NULL);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDataTransferer.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -574,1 +574,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y);\n@@ -596,1 +596,1 @@\n-    [self performSelectorOnMainThread:@selector(doDrag) withObject:nil waitUntilDone:YES]; \/\/ AWT_THREADING Safe (called from unique asynchronous thread)\n+    [self performSelectorOnMainThread:@selector(doDrag) withObject:nil waitUntilDone:YES];\n@@ -615,1 +615,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y);\n@@ -690,1 +690,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -694,1 +694,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -721,1 +721,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -733,1 +733,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDragSource.m","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    BOOL returnValue = (*env)->CallBooleanMethod(env, fFileDialog, jm_queryFF, jString); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    BOOL returnValue = (*env)->CallBooleanMethod(env, fFileDialog, jm_queryFF, jString);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CFileDialog.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -611,0 +611,1 @@\n+            JNU_ThrowOutOfMemoryError(env, \"Could not get string chars\");\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CTextPipe.m","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        str = JavaStringToNSString(env, jstr); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        str = JavaStringToNSString(env, jstr);\n@@ -103,1 +103,1 @@\n-             fAccessibleAction, fIndex, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+             fAccessibleAction, fIndex, fComponent);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    jobject dimension = (*env)->CallStaticObjectMethod(env, jc_Dimension, jm_getSize, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobject dimension = (*env)->CallStaticObjectMethod(env, jc_Dimension, jm_getSize, axComponent, component);\n@@ -72,1 +72,1 @@\n-                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axComponent, component);\n@@ -87,1 +87,1 @@\n-                      axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axContext, component);\n@@ -98,1 +98,1 @@\n-                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, index, component);\n@@ -108,1 +108,1 @@\n-                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, index, component);\n@@ -118,1 +118,1 @@\n-                    accessible, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    accessible, component);\n@@ -129,1 +129,1 @@\n-                    accessible, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    accessible, index, component);\n@@ -140,1 +140,1 @@\n-                    axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, component);\n@@ -150,1 +150,1 @@\n-    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_contains, axContext, axState, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_contains, axContext, axState, component);\n@@ -211,1 +211,1 @@\n-                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axComponent, component);\n@@ -222,1 +222,1 @@\n-    int i = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getCharCount, axText, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    int i = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getCharCount, axText, component);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.m","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-                  parent->fAccessible, parent->fComponent, whichChildren, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  parent->fAccessible, parent->fComponent, whichChildren, allowIgnored);\n@@ -492,1 +492,1 @@\n-                     jm_getInitialAttributeStates, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     jm_getInitialAttributeStates, fAccessible, fComponent);\n@@ -591,1 +591,1 @@\n-    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent);\n@@ -868,1 +868,1 @@\n-    NSNumber *value = [NSNumber numberWithBool:(*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent)]; \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSNumber *value = [NSNumber numberWithBool:(*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent)];\n@@ -900,1 +900,1 @@\n-    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) { \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) {\n@@ -917,1 +917,1 @@\n-        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent);\n@@ -931,1 +931,1 @@\n-                                   sjm_getAccessibleDescription, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                   sjm_getAccessibleDescription, fAccessible, fComponent);\n@@ -992,1 +992,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent);\n@@ -1015,1 +1015,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent);\n@@ -1072,1 +1072,1 @@\n-                           fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           fAccessible, fComponent);\n@@ -1199,1 +1199,1 @@\n-        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent);\n@@ -1209,1 +1209,1 @@\n-                           sjm_getAccessibleComponent, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           sjm_getAccessibleComponent, fAccessible, fComponent);\n@@ -1271,1 +1271,1 @@\n-    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent);\n@@ -1332,1 +1332,1 @@\n-                                                   selectedMenuItem->fComponent ); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                                   selectedMenuItem->fComponent );\n@@ -1354,1 +1354,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent);\n@@ -1362,1 +1362,1 @@\n-            num = JavaNumberToNSNumber(env, str); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+            num = JavaNumberToNSNumber(env, str);\n@@ -1470,1 +1470,1 @@\n-                               jparent, (jfloat)point.x, (jfloat)point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                               jparent, (jfloat)point.x, (jfloat)point.y);\n@@ -1500,1 +1500,1 @@\n-    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent);\n@@ -1702,1 +1702,1 @@\n-                                  fAccessible, fComponent, whichTabs, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                  fAccessible, fComponent, whichTabs, allowIgnored);\n@@ -2078,1 +2078,1 @@\n-        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component);\n@@ -2082,1 +2082,1 @@\n-    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b); \/\/ AWT_THREADING Safe (!appKit)\n+    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-                           sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           sjm_getAccessibleName, fAccessible, fComponent);\n@@ -150,1 +150,1 @@\n-                      sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                      sjm_getAccessibleText, fAccessible, fComponent);\n@@ -157,1 +157,1 @@\n-                       sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                       sjm_getAccessibleEditableText, fAccessible, fComponent);\n@@ -166,1 +166,1 @@\n-    NSString *string = JavaStringToNSString(env, jrange); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSString *string = JavaStringToNSString(env, jrange);\n@@ -184,1 +184,1 @@\n-                     sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     sjm_getAccessibleEditableText, fAccessible, fComponent);\n@@ -207,1 +207,1 @@\n-                        fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                        fAccessible, fComponent);\n@@ -235,1 +235,1 @@\n-              fAccessible, fComponent, jstringValue); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+              fAccessible, fComponent, jstringValue);\n@@ -247,1 +247,1 @@\n-                jm_getSelectedTextRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                jm_getSelectedTextRange, fAccessible, fComponent);\n@@ -277,1 +277,1 @@\n-                  fAccessible, fComponent, startIndex, endIndex); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  fAccessible, fComponent, startIndex, endIndex);\n@@ -288,1 +288,1 @@\n-                     sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     sjm_getAccessibleText, fAccessible, fComponent);\n@@ -307,1 +307,1 @@\n-                 jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                 jm_getVisibleCharacterRange, fAccessible, fComponent);\n@@ -329,1 +329,1 @@\n-                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent);\n@@ -368,1 +368,1 @@\n-                              fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                              fAccessible, fComponent, range.location, range.length);\n@@ -400,1 +400,1 @@\n-                       fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                       fAccessible, fComponent, [line intValue]);\n@@ -416,1 +416,1 @@\n-                jm_getRangeForLine, fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                jm_getRangeForLine, fAccessible, fComponent, [line intValue]);\n@@ -446,1 +446,1 @@\n-                            fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, range.location, range.length);\n@@ -478,1 +478,1 @@\n-                            fAccessible, fComponent, point.x, point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, point.x, point.y);\n@@ -511,1 +511,1 @@\n-                              fAccessible, fComponent, index); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                              fAccessible, fComponent, index);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaTextAccessibility.m","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                           fCurPainter, fCurPageFormat, jPageIndex, context); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           fCurPainter, fCurPageFormat, jPageIndex, context);\n@@ -123,1 +123,1 @@\n-    jobject o = (*env)->CallObjectMethod(env, fPrinterJob, jm_getJobName); \/\/ AWT_THREADING Safe (known object)\n+    jobject o = (*env)->CallObjectMethod(env, fPrinterJob, jm_getJobName);\n@@ -196,1 +196,1 @@\n-                                jm_getPageformatPrintablePeekgraphics, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                jm_getPageformatPrintablePeekgraphics, jPageNumber);\n@@ -215,1 +215,1 @@\n-                                    fCurPeekGraphics, fCurPageFormat, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                    fCurPeekGraphics, fCurPageFormat, jPageNumber);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            NSString* str = JNFJavaToNSString(env, axName);\n+            NSString* str = JavaStringToNSString(env, axName);\n@@ -103,1 +103,1 @@\n-    NSString *string = JNFJavaToNSString(env, jrange); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSString *string = JavaStringToNSString(env, jrange);\n@@ -119,1 +119,1 @@\n-                 jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                 jm_getVisibleCharacterRange, fAccessible, fComponent);\n@@ -133,1 +133,1 @@\n-                            fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, range.location, range.length);\n@@ -136,1 +136,1 @@\n-    NSString* str = JNFJavaToNSString(env, jstringForRange);\n+    NSString* str = JavaStringToNSString(env, jstringForRange);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonTextAccessibility.m","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,0 +61,13 @@\n+ * Returns an NSString in decomposed UTF16 format that is compatible with HFS's\n+ * expectation of the UTF16 format for file system paths.\n+ *\n+ * Example string: \"\/Users\/Amélie\/\"\n+ *\n+ * Java's UTF16 string is \"\/ U s e r s \/ A m \\351 l i e \/\"\n+ * macOS UTF16 string suitable for HFS is \"\/ U s e r s \/ A m e \\314 \\201 l i e \/\"\n+ *\n+ * There is no direct API that takes in NSString UTF16 encoded by Java\n+ * and produces NSString UTF16 for HFS, so we first need to decompose it\n+ * into chars (suitable for low level C file APIs), and only then\n+ * create NSString representation of this decomposition back into UTF16 string.\n+ *\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.m","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-    \/\/ Make sure that when we run in AWTRunLoopMode we don't exit randomly\n+    \/\/ Make sure that when we run in javaRunLoopMode we don't exit randomly\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/NSApplicationAWT.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeOpenLater); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeOpenLater);\n@@ -131,1 +131,1 @@\n-    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeMenuClosing); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeMenuClosing);\n@@ -152,1 +152,1 @@\n-                    NSMinY(rect), NSMinX(rect), NSMaxY(rect), NSMaxX(rect)); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    NSMinY(rect), NSMinX(rect), NSMaxY(rect), NSMaxX(rect));\n@@ -207,1 +207,1 @@\n-             javaKind, javaX, javaY, javaModifiers, javaWhen); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+             javaKind, javaX, javaY, javaModifiers, javaWhen);\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/ScreenMenu.m","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}