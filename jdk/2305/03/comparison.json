{"files":[{"patch":"@@ -104,1 +104,0 @@\n-          -framework JavaNativeFoundation \\\n@@ -130,1 +129,0 @@\n-          -framework JavaNativeFoundation \\\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n-        -framework JavaNativeFoundation \\\n@@ -770,2 +769,1 @@\n-        -framework Cocoa \\\n-        -framework JavaNativeFoundation\n+        -framework Cocoa\n@@ -869,1 +867,0 @@\n-          -framework JavaNativeFoundation \\\n@@ -907,1 +904,0 @@\n-          -framework JavaNativeFoundation \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-      -framework Cocoa -framework JavaNativeFoundation\n+      -framework Cocoa\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTEvent.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTSurfaceLayers.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -138,1 +137,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^() {\n+    [ThreadUtilities performOnMainThreadWaiting:NO block:^() {\n@@ -464,2 +463,2 @@\n-        characters = JNFNSToJavaString(env, [event characters]);\n-        charactersIgnoringModifiers = JNFNSToJavaString(env, [event charactersIgnoringModifiers]);\n+        characters = NSStringToJavaString(env, [event characters]);\n+        charactersIgnoringModifiers = NSStringToJavaString(env, [event charactersIgnoringModifiers]);\n@@ -578,4 +577,1 @@\n-        if (env != NULL)\n-        {\n-            JNFDumpJavaStack(env);\n-        }\n+        NSLog(@\"%@\",[NSThread callStackSymbols]);\n@@ -595,1 +591,1 @@\n-        JNFDumpJavaStack(env);\n+        NSLog(@\"%@\",[NSThread callStackSymbols]);\n@@ -992,2 +988,2 @@\n-        jstring insertedText =  JNFNSToJavaString(env, useString);\n-        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        jstring insertedText =  NSStringToJavaString(env, useString);\n+        (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_insertText, insertedText);\n@@ -1058,2 +1054,2 @@\n-    jstring inProcessText = JNFNSToJavaString(env, incomingString);\n-    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jstring inProcessText = NSStringToJavaString(env, incomingString);\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_startIMUpdate, inProcessText);\n@@ -1084,1 +1080,1 @@\n-                       isGray, effectiveRange.location, effectiveRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                       isGray, effectiveRange.location, effectiveRange.length);\n@@ -1099,1 +1095,1 @@\n-            selectionRange.location, selectionRange.length, JNI_FALSE); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+            selectionRange.location, selectionRange.length, JNI_FALSE);\n@@ -1121,1 +1117,1 @@\n-    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, fInputMethodLOCKABLE, jm_unmarkText);\n@@ -1174,1 +1170,1 @@\n-    jobject theString = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobject theString = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_substringFromRange, theRange.location, theRange.length);\n@@ -1177,1 +1173,1 @@\n-    id result = [[[NSAttributedString alloc] initWithString:JNFJavaToNSString(env, theString)] autorelease];\n+    id result = [[[NSAttributedString alloc] initWithString:JavaStringToNSString(env, theString)] autorelease];\n@@ -1208,1 +1204,1 @@\n-    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_markedRange);\n@@ -1249,1 +1245,1 @@\n-    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    array = (*env)->CallObjectMethod(env, fInputMethodLOCKABLE, jm_selectedRange);\n@@ -1288,1 +1284,1 @@\n-                                theRange.location); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                theRange.location);\n@@ -1329,1 +1325,1 @@\n-                      (jint)flippedLocation.x, (jint)flippedLocation.y); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      (jint)flippedLocation.x, (jint)flippedLocation.y);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -1447,1 +1446,1 @@\n-                              withObject:JNFJavaToNSString(env, jtitle)\n+                              withObject:JavaStringToNSString(env, jtitle)\n@@ -1523,1 +1522,1 @@\n-    NSURL *url = (filename == NULL) ? nil : [NSURL fileURLWithPath:JNFNormalizedNSStringForPath(env, filename)];\n+    NSURL *url = (filename == NULL) ? nil : [NSURL fileURLWithPath:NormalizedPathNSStringFromJavaString(env, filename)];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTWindow.m","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -293,1 +291,1 @@\n-    jstring jURL = JNFNSToJavaString(env, url);\n+    jstring jURL = NSStringToJavaString(env, url);\n@@ -296,1 +294,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenURI, jURL); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleOpenURI, jURL);\n@@ -315,1 +313,1 @@\n-    jobject jFileNamesArray = (*env)->NewObject(env, sjc_ArrayList, jm_ArrayList_ctor, (jint)[filenames count]); \/\/ AWT_THREADING Safe (known object)\n+    jobject jFileNamesArray = (*env)->NewObject(env, sjc_ArrayList, jm_ArrayList_ctor, (jint)[filenames count]);\n@@ -319,1 +317,1 @@\n-        jstring jFileName = JNFNormalizedJavaStringForPath(env, filename);\n+        jstring jFileName = NormalizedPathJavaStringFromNSString(env, filename);\n@@ -341,1 +339,1 @@\n-    jstring jSearchString = JNFNSToJavaString(env, searchString);\n+    jstring jSearchString = NSStringToJavaString(env, searchString);\n@@ -368,1 +366,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handlePrintFile, jFileNamesArray); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handlePrintFile, jFileNamesArray);\n@@ -383,1 +381,1 @@\n-    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleNativeNotification, notificationType); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallStaticVoidMethod(env, sjc_AppEventHandler, jm_handleNativeNotification, notificationType);\n@@ -627,1 +625,1 @@\n-                           waitUntilDone:NO]; \/\/ AWT_THREADING Safe (non-blocking)\n+                           waitUntilDone:NO];\n@@ -717,1 +715,1 @@\n-    NSString *badgeString = JNFJavaToNSString(env, badge);\n+    NSString *badgeString = JavaStringToNSString(env, badge);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/ApplicationDelegate.m","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -102,1 +101,1 @@\n-                (*env)->CallVoidMethod(env, self.clipboardOwner, jm_lostOwnership); \/\/ AWT_THREADING Safe (event)\n+                (*env)->CallVoidMethod(env, self.clipboardOwner, jm_lostOwnership);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CClipboard.m","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -78,1 +77,1 @@\n-    NSString *cursorName = JNFJavaToNSString(env, name);\n+    NSString *cursorName = JavaStringToNSString(env, name);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CCursorManager.m","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n-\n@@ -113,1 +110,1 @@\n-    returnValue = registerFormatWithPasteboard(JNFJavaToNSString(env, newformat));\n+    returnValue = registerFormatWithPasteboard(JavaStringToNSString(env, newformat));\n@@ -128,1 +125,1 @@\n-    returnValue = JNFNSToJavaString(env, formatForIndex(index));\n+    returnValue = NSStringToJavaString(env, formatForIndex(index));\n@@ -141,1 +138,1 @@\n-    jobject jfilenameArray = (*env)->NewObjectArray(env, filenameCount, stringClazz, NULL); \/\/ AWT_THREADING Safe (known object)\n+    jobject jfilenameArray = (*env)->NewObjectArray(env, filenameCount, stringClazz, NULL);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDataTransferer.m","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -46,1 +45,1 @@\n-    NSURL *url = [NSURL URLWithString:JNFJavaToNSString(env, uri)];\n+    NSURL *url = [NSURL URLWithString:JavaStringToNSString(env, uri)];\n@@ -71,1 +70,1 @@\n-    NSString *path  = JNFNormalizedNSStringForPath(env, jpath);\n+    NSString *path  = NormalizedPathNSStringFromJavaString(env, jpath);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDesktopPeer.m","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -575,1 +574,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragDropFinishedMethod, success, dragOp, (jint) point.x, (jint) point.y);\n@@ -597,1 +596,1 @@\n-    [self performSelectorOnMainThread:@selector(doDrag) withObject:nil waitUntilDone:YES]; \/\/ AWT_THREADING Safe (called from unique asynchronous thread)\n+    [self performSelectorOnMainThread:@selector(doDrag) withObject:nil waitUntilDone:YES];\n@@ -616,1 +615,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, operationChangedMethod, targetActions, modifiedModifiers, (jint) point.x, (jint) point.y);\n@@ -691,1 +690,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMotionMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -695,1 +694,1 @@\n-        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+        (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragMouseMovedMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -722,1 +721,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragEnterMethod, targetActions, (jint) fModifiers, (jint) point.x, (jint) point.y);\n@@ -734,1 +733,1 @@\n-    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y); \/\/ AWT_THREADING Safe (event)\n+    (*env)->CallVoidMethod(env, fDragSourceContextPeer, dragExitMethod, (jint) point.x, (jint) point.y);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDragSource.m","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDragSourceContextPeer.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTarget.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDropTargetContextPeer.m","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#import \"ThreadUtilities.h\"\n@@ -29,1 +30,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -52,1 +52,1 @@\n-            [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^() {\n+            [ThreadUtilities performOnMainThreadWaiting:NO block:^() {\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CFRetainedResource.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CFileDialog.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -30,1 +29,0 @@\n-#import \"CFileDialog.h\"\n@@ -33,0 +31,1 @@\n+#import \"CFileDialog.h\"\n@@ -146,1 +145,1 @@\n-    jstring jString = JNFNormalizedJavaStringForPath(env, filename);\n+    jstring jString = NormalizedPathJavaStringFromNSString(env, filename);\n@@ -150,1 +149,1 @@\n-    BOOL returnValue = (*env)->CallBooleanMethod(env, fFileDialog, jm_queryFF, jString); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    BOOL returnValue = (*env)->CallBooleanMethod(env, fFileDialog, jm_queryFF, jString);\n@@ -202,1 +201,1 @@\n-    NSString *dialogTitle = JNFJavaToNSString(env, title);\n+    NSString *dialogTitle = JavaStringToNSString(env, title);\n@@ -210,2 +209,2 @@\n-                                                            directory:JNFJavaToNSString(env, directory)\n-                                                                 file:JNFJavaToNSString(env, file)\n+                                                            directory:JavaStringToNSString(env, directory)\n+                                                                 file:JavaStringToNSString(env, file)\n@@ -218,1 +217,1 @@\n-    [JNFRunLoop performOnMainThread:@selector(safeSaveOrLoad)\n+    [ThreadUtilities performOnMainThread:@selector(safeSaveOrLoad)\n@@ -231,1 +230,1 @@\n-            jstring filename = JNFNormalizedJavaStringForPath(env, [url path]);\n+            jstring filename = NormalizedPathJavaStringFromNSString(env, [url path]);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CFileDialog.m","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -117,13 +115,12 @@\n-        JNFPerformEnvBlock(JNFThreadDetachImmediately, ^(JNIEnv *env) {\n-            jobject cgeRef = (jobject)userInfo;\n-\n-            jobject graphicsEnv = (*env)->NewLocalRef(env, cgeRef);\n-            if (graphicsEnv == NULL) return; \/\/ ref already GC'd\n-            DECLARE_CLASS(jc_CGraphicsEnvironment, \"sun\/awt\/CGraphicsEnvironment\");\n-            DECLARE_METHOD(jm_displayReconfiguration,\n-                    jc_CGraphicsEnvironment, \"_displayReconfiguration\",\"(IZ)V\");\n-            (*env)->CallVoidMethod(env, graphicsEnv, jm_displayReconfiguration,\n-                    (jint) display, (jboolean) flags & kCGDisplayRemoveFlag);\n-            (*env)->DeleteLocalRef(env, graphicsEnv);\n-            CHECK_EXCEPTION();\n-        });\n+        JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n+        jobject cgeRef = (jobject)userInfo;\n+\n+        jobject graphicsEnv = (*env)->NewLocalRef(env, cgeRef);\n+        if (graphicsEnv == NULL) return; \/\/ ref already GC'd\n+        DECLARE_CLASS(jc_CGraphicsEnvironment, \"sun\/awt\/CGraphicsEnvironment\");\n+        DECLARE_METHOD(jm_displayReconfiguration,\n+                jc_CGraphicsEnvironment, \"_displayReconfiguration\",\"(IZ)V\");\n+        (*env)->CallVoidMethod(env, graphicsEnv, jm_displayReconfiguration,\n+                (jint) display, (jboolean) flags & kCGDisplayRemoveFlag);\n+        (*env)->DeleteLocalRef(env, graphicsEnv);\n+        CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsEnv.m","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -207,1 +206,1 @@\n-    NSString *path = JNFNormalizedNSStringForPath(env, file);\n+    NSString *path = NormalizedPathNSStringFromJavaString(env, file);\n@@ -227,1 +226,1 @@\n-    NSString *path = JNFNormalizedNSStringForPath(env, file);\n+    NSString *path = NormalizedPathNSStringFromJavaString(env, file);\n@@ -250,1 +249,1 @@\n-    image = [[NSImage imageNamed:JNFJavaToNSString(env, name)] retain];\n+    image = [[NSImage imageNamed:JavaStringToNSString(env, name)] retain];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CImage.m","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -163,1 +162,1 @@\n-    returnValue = JNFNSToJavaString(env, keyboardInfo);\n+    returnValue = NSStringToJavaString(env, keyboardInfo);\n@@ -262,1 +261,1 @@\n-    NSString *localeStr = JNFJavaToNSString(env, locale);\n+    NSString *localeStr = JavaStringToNSString(env, locale);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CInputMethod.m","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -219,1 +218,1 @@\n-    [((CMenu *)jlong_to_ptr(menuObject)) setJavaMenuTitle:JNFJavaToNSString(env, label)];\n+    [((CMenu *)jlong_to_ptr(menuObject)) setJavaMenuTitle:JavaStringToNSString(env, label)];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenu.m","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenuBar.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenuComponent.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -316,1 +315,1 @@\n-    NSString *theLabel = JNFJavaToNSString(env, label);\n+    NSString *theLabel = JavaStringToNSString(env, label);\n@@ -345,1 +344,1 @@\n-    NSString *theTooltip = JNFJavaToNSString(env, tooltip);\n+    NSString *theTooltip = JavaStringToNSString(env, tooltip);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CMenuItem.m","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPopupMenu.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -90,1 +89,1 @@\n-        NSPrinter* nsPrinter = [NSPrinter printerWithName:JNFJavaToNSString(env, printer)];\n+        NSPrinter* nsPrinter = [NSPrinter printerWithName:JavaStringToNSString(env, printer)];\n@@ -348,1 +347,1 @@\n-    NSString *printerName = JNFJavaToNSString(env, printerNameObj);\n+    NSString *printerName = JavaStringToNSString(env, printerNameObj);\n@@ -367,1 +366,1 @@\n-    jstring printerName = JNFNSToJavaString(env, name);\n+    jstring printerName = NSStringToJavaString(env, name);\n@@ -378,1 +377,1 @@\n-        jstring str = JNFNSToJavaString(env, nsStr);\n+        jstring str = NSStringToJavaString(env, nsStr);\n@@ -494,1 +493,1 @@\n-       NSString *nsDestStr = JNFJavaToNSString(env, dest);\n+       NSString *nsDestStr = JavaStringToNSString(env, dest);\n@@ -631,1 +630,1 @@\n-            NSString *printerTray = JNFJavaToNSString(env, printerTrayObj);\n+            NSString *printerTray = JavaStringToNSString(env, printerTrayObj);\n@@ -645,1 +644,1 @@\n-            NSString *printerName = JNFJavaToNSString(env, printerNameObj);\n+            NSString *printerName = JavaStringToNSString(env, printerNameObj);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobot.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CSystemColors.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -589,0 +587,3 @@\n+    if (str == NULL) {\n+        return;\n+    }\n@@ -600,1 +601,1 @@\n-        JNF_CHECK_AND_RETHROW_EXCEPTION(env);\n+        CHECK_EXCEPTION();\n@@ -608,1 +609,5 @@\n-        const jchar *unichars = JNFGetStringUTF16UniChars(env, str);\n+        const jchar *unichars = (*env)->GetStringChars(env, str, NULL);\n+        if (unichars == NULL) {\n+            JNU_ThrowOutOfMemoryError(env, \"Could not get string chars\");\n+            return;\n+        }\n@@ -613,1 +618,1 @@\n-        JNFReleaseStringUTF16UniChars(env, str, unichars);\n+        (*env)->ReleaseStringChars(env, str, unichars);\n@@ -638,1 +643,1 @@\n-        JNF_CHECK_AND_RETHROW_EXCEPTION(env);\n+        CHECK_EXCEPTION();\n@@ -651,1 +656,1 @@\n-            JNF_CHECK_AND_RETHROW_EXCEPTION(env);\n+            CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CTextPipe.m","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -345,1 +344,1 @@\n-    NSString *tooltip = JNFJavaToNSString(env, jtooltip);\n+    NSString *tooltip = JavaStringToNSString(env, jtooltip);\n@@ -398,2 +397,2 @@\n-    NSString *caption = JNFJavaToNSString(env, jcaption);\n-    NSString *text = JNFJavaToNSString(env, jtext);\n+    NSString *caption = JavaStringToNSString(env, jcaption);\n+    NSString *text = JavaStringToNSString(env, jtext);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CTrayIcon.m","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -595,1 +594,1 @@\n-    NSString* s = JNFJavaToNSString(env, msg);\n+    NSString* s = JavaStringToNSString(env, msg);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CWrapper.m","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -103,1 +102,4 @@\n-    if (env != NULL) [JNFException raise:env as:kRuntimeException reason:\"Failed to convert, no screen.\"];\n+    if ((env != NULL) && ([NSThread isMainThread] == NO)) {\n+        JNU_ThrowByName(env, \"java\/lang\/RuntimeException\", \"Failed to convert, no screen.\");\n+    }\n+    [NSException raise:NSGenericException format:@\"Failed to convert, no screen.\"];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/GeomUtilities.m","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/ImageSurfaceData.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        str = JNFJavaToNSString(env, jstr); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        str = JavaStringToNSString(env, jstr);\n@@ -103,1 +103,1 @@\n-             fAccessibleAction, fIndex, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+             fAccessibleAction, fIndex, fComponent);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import \"JNIUtilities.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -61,1 +59,1 @@\n-    jobject dimension = (*env)->CallStaticObjectMethod(env, jc_Dimension, jm_getSize, axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jobject dimension = (*env)->CallStaticObjectMethod(env, jc_Dimension, jm_getSize, axComponent, component);\n@@ -74,1 +72,1 @@\n-                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axComponent, component);\n@@ -78,1 +76,1 @@\n-    NSString* str = JNFJavaToNSString(env, axRole);\n+    NSString* str = JavaStringToNSString(env, axRole);\n@@ -89,1 +87,1 @@\n-                      axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axContext, component);\n@@ -100,1 +98,1 @@\n-                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, index, component);\n@@ -110,1 +108,1 @@\n-                    axContext, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, index, component);\n@@ -120,1 +118,1 @@\n-                    accessible, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    accessible, component);\n@@ -131,1 +129,1 @@\n-                    accessible, index, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    accessible, index, component);\n@@ -142,1 +140,1 @@\n-                    axContext, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    axContext, component);\n@@ -152,1 +150,1 @@\n-    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_contains, axContext, axState, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    jboolean b = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_contains, axContext, axState, component);\n@@ -213,1 +211,1 @@\n-                      axComponent, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                      axComponent, component);\n@@ -224,1 +222,1 @@\n-    int i = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getCharCount, axText, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    int i = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getCharCount, axText, component);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.m","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -315,1 +314,1 @@\n-            jstring jString = JNFNSToJavaString(env, [ignoredKeys objectAtIndex:i]);\n+            jstring jString = NSStringToJavaString(env, [ignoredKeys objectAtIndex:i]);\n@@ -351,1 +350,1 @@\n-                  parent->fAccessible, parent->fComponent, whichChildren, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  parent->fAccessible, parent->fComponent, whichChildren, allowIgnored);\n@@ -371,1 +370,1 @@\n-            childJavaRole = JNFJavaToNSString(env, jkey);\n+            childJavaRole = JavaStringToNSString(env, jkey);\n@@ -493,1 +492,1 @@\n-                     jm_getInitialAttributeStates, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     jm_getInitialAttributeStates, fAccessible, fComponent);\n@@ -592,1 +591,1 @@\n-    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent);\n@@ -869,1 +868,1 @@\n-    NSNumber *value = [NSNumber numberWithBool:(*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent)]; \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSNumber *value = [NSNumber numberWithBool:(*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent)];\n@@ -901,1 +900,1 @@\n-    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) { \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) {\n@@ -918,1 +917,1 @@\n-        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent);\n@@ -932,1 +931,1 @@\n-                                   sjm_getAccessibleDescription, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                   sjm_getAccessibleDescription, fAccessible, fComponent);\n@@ -937,1 +936,1 @@\n-    NSString* str = JNFJavaToNSString(env, val);\n+    NSString* str = JavaStringToNSString(env, val);\n@@ -959,0 +958,26 @@\n+\/*\n+ * The java\/lang\/Number concrete class could be for any of the Java primitive\n+ * numerical types or some other subclass.\n+ * All existing A11Y code uses Integer so that is what we look for first\n+ * But all must be able to return a double and NSNumber accepts a double,\n+ * so that's the fall back.\n+ *\/\n+static NSNumber* JavaNumberToNSNumber(JNIEnv *env, jobject jnumber) {\n+    if (jnumber == NULL) {\n+        return nil;\n+    }\n+    DECLARE_CLASS_RETURN(jnumber_Class, \"java\/lang\/Number\", nil);\n+    DECLARE_CLASS_RETURN(jinteger_Class, \"java\/lang\/Integer\", nil);\n+    DECLARE_METHOD_RETURN(jm_intValue, jnumber_Class, \"intValue\", \"()D\", nil);\n+    DECLARE_METHOD_RETURN(jm_doubleValue, jnumber_Class, \"doubleValue\", \"()D\", nil);\n+    if ((*env)->IsInstanceOf(env, jnumber, jinteger_Class)) {\n+        jint i = (*env)->CallIntMethod(env, jnumber_Class, jm_intValue);\n+        CHECK_EXCEPTION();\n+        return [NSNumber numberWithInteger:i];\n+    } else {\n+        jdouble d = (*env)->CallDoubleMethod(env, jnumber_Class, jm_doubleValue);\n+        CHECK_EXCEPTION();\n+        return [NSNumber numberWithDouble:d];\n+    }\n+}\n+\n@@ -967,1 +992,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent);\n@@ -972,1 +997,1 @@\n-    NSNumber* num = JNFJavaToNSNumber(env, axValue);\n+    NSNumber* num = JavaNumberToNSNumber(env, axValue);\n@@ -990,1 +1015,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent);\n@@ -995,1 +1020,1 @@\n-    NSNumber* num = JNFJavaToNSNumber(env, axValue);\n+    NSNumber* num = JavaNumberToNSNumber(env, axValue);\n@@ -1047,1 +1072,1 @@\n-                           fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           fAccessible, fComponent);\n@@ -1118,1 +1143,1 @@\n-            value = JNFJavaToNSString(env, axRole);\n+            value = JavaStringToNSString(env, axRole);\n@@ -1174,1 +1199,1 @@\n-        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent);\n@@ -1184,1 +1209,1 @@\n-                           sjm_getAccessibleComponent, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           sjm_getAccessibleComponent, fAccessible, fComponent);\n@@ -1246,1 +1271,1 @@\n-    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent);\n@@ -1251,1 +1276,1 @@\n-    NSString* str = JNFJavaToNSString(env, val);\n+    NSString* str = JavaStringToNSString(env, val);\n@@ -1307,1 +1332,1 @@\n-                                                   selectedMenuItem->fComponent ); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                                   selectedMenuItem->fComponent );\n@@ -1312,1 +1337,1 @@\n-                NSString* itemString = JNFJavaToNSString(env, itemValue);\n+                NSString* itemString = JavaStringToNSString(env, itemValue);\n@@ -1329,1 +1354,1 @@\n-    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent);\n@@ -1337,1 +1362,1 @@\n-            num = JNFJavaToNSNumber(env, str); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+            num = JavaNumberToNSNumber(env, str);\n@@ -1445,1 +1470,1 @@\n-                               jparent, (jfloat)point.x, (jfloat)point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                               jparent, (jfloat)point.x, (jfloat)point.y);\n@@ -1475,1 +1500,1 @@\n-    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent);\n@@ -1677,1 +1702,1 @@\n-                                  fAccessible, fComponent, whichTabs, allowIgnored); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                                  fAccessible, fComponent, whichTabs, allowIgnored);\n@@ -1698,1 +1723,1 @@\n-    NSString *tabJavaRole = JNFJavaToNSString(env, jkey);\n+    NSString *tabJavaRole = JavaStringToNSString(env, jkey);\n@@ -2053,1 +2078,1 @@\n-        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component);\n@@ -2057,1 +2082,1 @@\n-    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b); \/\/ AWT_THREADING Safe (!appKit)\n+    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":56,"deletions":31,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-                           sjm_getAccessibleName, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           sjm_getAccessibleName, fAccessible, fComponent);\n@@ -140,1 +140,1 @@\n-            NSString* str = JNFJavaToNSString(env, axName);\n+            NSString* str = JavaStringToNSString(env, axName);\n@@ -150,1 +150,1 @@\n-                      sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                      sjm_getAccessibleText, fAccessible, fComponent);\n@@ -157,1 +157,1 @@\n-                       sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                       sjm_getAccessibleEditableText, fAccessible, fComponent);\n@@ -166,1 +166,1 @@\n-    NSString *string = JNFJavaToNSString(env, jrange); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSString *string = JavaStringToNSString(env, jrange);\n@@ -184,1 +184,1 @@\n-                     sjm_getAccessibleEditableText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     sjm_getAccessibleEditableText, fAccessible, fComponent);\n@@ -207,1 +207,1 @@\n-                        fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                        fAccessible, fComponent);\n@@ -210,1 +210,1 @@\n-    NSString* str = JNFJavaToNSString(env, axText);\n+    NSString* str = JavaStringToNSString(env, axText);\n@@ -230,1 +230,1 @@\n-    jstring jstringValue = JNFNSToJavaString(env, (NSString *)value);\n+    jstring jstringValue = NSStringToJavaString(env, (NSString *)value);\n@@ -235,1 +235,1 @@\n-              fAccessible, fComponent, jstringValue); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+              fAccessible, fComponent, jstringValue);\n@@ -247,1 +247,1 @@\n-                jm_getSelectedTextRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                jm_getSelectedTextRange, fAccessible, fComponent);\n@@ -277,1 +277,1 @@\n-                  fAccessible, fComponent, startIndex, endIndex); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  fAccessible, fComponent, startIndex, endIndex);\n@@ -288,1 +288,1 @@\n-                     sjm_getAccessibleText, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                     sjm_getAccessibleText, fAccessible, fComponent);\n@@ -307,1 +307,1 @@\n-                 jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                 jm_getVisibleCharacterRange, fAccessible, fComponent);\n@@ -329,1 +329,1 @@\n-                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent);\n@@ -368,1 +368,1 @@\n-                              fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                              fAccessible, fComponent, range.location, range.length);\n@@ -400,1 +400,1 @@\n-                       fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                       fAccessible, fComponent, [line intValue]);\n@@ -416,1 +416,1 @@\n-                jm_getRangeForLine, fAccessible, fComponent, [line intValue]); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                jm_getRangeForLine, fAccessible, fComponent, [line intValue]);\n@@ -446,1 +446,1 @@\n-                            fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, range.location, range.length);\n@@ -449,1 +449,1 @@\n-    NSString* str = JNFJavaToNSString(env, jstringForRange);\n+    NSString* str = JavaStringToNSString(env, jstringForRange);\n@@ -478,1 +478,1 @@\n-                            fAccessible, fComponent, point.x, point.y); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, point.x, point.y);\n@@ -511,1 +511,1 @@\n-                              fAccessible, fComponent, index); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                              fAccessible, fComponent, index);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaTextAccessibility.m","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-        [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){}];\n+        [ThreadUtilities performOnMainThreadWaiting:YES block:^(){}];\n@@ -520,1 +520,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -590,1 +590,1 @@\n-        isRunning = [[NSRunLoop currentRunLoop] runMode:(inAWT ? [JNFRunLoop javaRunLoopMode] : NSDefaultRunLoopMode)\n+        isRunning = [[NSRunLoop currentRunLoop] runMode:(inAWT ? [ThreadUtilities javaRunLoopMode] : NSDefaultRunLoopMode)\n@@ -657,1 +657,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -730,1 +730,1 @@\n-    return JNFNSToJavaString(env, @\"\/Library\/Fonts\");\n+    return NSStringToJavaString(env, @\"\/Library\/Fonts\");\n@@ -872,1 +872,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/LWCToolkit.m","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -56,1 +54,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -67,1 +65,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrintModel.m","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterSurfaceData.m","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -109,1 +107,1 @@\n-                           fCurPainter, fCurPageFormat, jPageIndex, context); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                           fCurPainter, fCurPageFormat, jPageIndex, context);\n@@ -125,1 +123,1 @@\n-    jobject o = (*env)->CallObjectMethod(env, fPrinterJob, jm_getJobName); \/\/ AWT_THREADING Safe (known object)\n+    jobject o = (*env)->CallObjectMethod(env, fPrinterJob, jm_getJobName);\n@@ -127,1 +125,1 @@\n-    id result = JNFJavaToNSString(env, o);\n+    id result = JavaStringToNSString(env, o);\n@@ -198,1 +196,1 @@\n-                                jm_getPageformatPrintablePeekgraphics, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                jm_getPageformatPrintablePeekgraphics, jPageNumber);\n@@ -217,1 +215,1 @@\n-                                    fCurPeekGraphics, fCurPageFormat, jPageNumber); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                                    fCurPeekGraphics, fCurPageFormat, jPageNumber);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/QuartzRenderer.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/QuartzSurfaceData.m","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            NSString* str = JNFJavaToNSString(env, axName);\n+            NSString* str = JavaStringToNSString(env, axName);\n@@ -103,1 +103,1 @@\n-    NSString *string = JNFJavaToNSString(env, jrange); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+    NSString *string = JavaStringToNSString(env, jrange);\n@@ -119,1 +119,1 @@\n-                 jm_getVisibleCharacterRange, fAccessible, fComponent); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                 jm_getVisibleCharacterRange, fAccessible, fComponent);\n@@ -133,1 +133,1 @@\n-                            fAccessible, fComponent, range.location, range.length); \/\/ AWT_THREADING Safe (AWTRunLoop)\n+                            fAccessible, fComponent, range.location, range.length);\n@@ -136,1 +136,1 @@\n-    NSString* str = JNFJavaToNSString(env, jstringForRange);\n+    NSString* str = JavaStringToNSString(env, jstringForRange);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonTextAccessibility.m","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -313,1 +311,1 @@\n-        jobject jFontName = JNFNSToJavaString(env, fontname);\n+        jobject jFontName = NSStringToJavaString(env, fontname);\n@@ -315,1 +313,1 @@\n-            JNFNSToJavaString(env, GetFamilyNameForFontName(fontname));\n+            NSStringToJavaString(env, GetFamilyNameForFontName(fontname));\n@@ -337,1 +335,1 @@\n-    NSString *path = JNFJavaToNSString(env, filename);\n+    NSString *path = JavaStringToNSString(env, filename);\n@@ -437,1 +435,1 @@\n-        [AWTFont awtFontForName:JNFJavaToNSString(env, nativeFontName)\n+        [AWTFont awtFontForName:JavaStringToNSString(env, nativeFontName)\n@@ -573,1 +571,1 @@\n-        jstring jFontName = (jstring)JNFNSToJavaString(env, fontname);\n+        jstring jFontName = (jstring)NSStringToJavaString(env, fontname);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTFont.m","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/AWTStrike.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/CCharToGlyphMapper.m","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -29,0 +28,1 @@\n+#import \"JNIUtilities.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/CGGlyphImages.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -126,0 +125,1 @@\n+\n@@ -291,0 +291,1 @@\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/opengl\/CGLGraphicsConfig.m","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/opengl\/CGLLayer.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-            [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^(){\n+            [ThreadUtilities performOnMainThreadWaiting:NO block:^(){\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/opengl\/CGLSurfaceData.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,4 +29,0 @@\n-\n-#import <Cocoa\/Cocoa.h>\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n@@ -35,0 +31,1 @@\n+#import <Cocoa\/Cocoa.h>\n@@ -45,1 +42,1 @@\n-        NSString *filename = JNFNormalizedNSStringForPath(env, javaFilename);\n+        NSString *filename = NormalizedPathNSStringFromJavaString(env, javaFilename);\n@@ -62,1 +59,1 @@\n-        NSString *filename = JNFNormalizedNSStringForPath(env, javaFilename);\n+        NSString *filename = NormalizedPathNSStringFromJavaString(env, javaFilename);\n@@ -77,1 +74,1 @@\n-        NSString *filename = JNFNormalizedNSStringForPath(env, javaFilename);\n+        NSString *filename = NormalizedPathNSStringFromJavaString(env, javaFilename);\n@@ -93,1 +90,1 @@\n-        NSString *filename = JNFNormalizedNSStringForPath(env, javaFilename);\n+        NSString *filename = NormalizedPathNSStringFromJavaString(env, javaFilename);\n@@ -111,1 +108,1 @@\n-        NSString *filename = JNFNormalizedNSStringForPath(env, javaFilename);\n+        NSString *filename = NormalizedPathNSStringFromJavaString(env, javaFilename);\n@@ -136,1 +133,1 @@\n-            filename = JNFNormalizedJavaStringForPath(env, filenameString);\n+            filename = NormalizedPathJavaStringFromNSString(env, filenameString);\n@@ -155,1 +152,1 @@\n-    NSURL *url = [NSURL URLWithString:JNFNormalizedNSStringForPath(env, urlString)];\n+    NSURL *url = [NSURL URLWithString:NormalizedPathNSStringFromJavaString(env, urlString)];\n@@ -158,1 +155,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:NO block:^(){\n@@ -177,3 +174,3 @@\n-    NSString *resourceName = JNFNormalizedNSStringForPath(env, javaResourceName);\n-        NSString *subDirectory = JNFNormalizedNSStringForPath(env, javaSubDirName);\n-        NSString *typeName = JNFNormalizedNSStringForPath(env, javaTypeName);\n+    NSString *resourceName = NormalizedPathNSStringFromJavaString(env, javaResourceName);\n+        NSString *subDirectory = NormalizedPathNSStringFromJavaString(env, javaSubDirName);\n+        NSString *typeName = NormalizedPathNSStringFromJavaString(env, javaTypeName);\n@@ -185,1 +182,1 @@\n-    filename = JNFNormalizedJavaStringForPath(env, path);\n+    filename = NormalizedPathJavaStringFromNSString(env, path);\n@@ -204,1 +201,1 @@\n-        filename = JNFNormalizedJavaStringForPath(env, [mainBundle bundlePath]);\n+        filename = NormalizedPathJavaStringFromNSString(env, [mainBundle bundlePath]);\n@@ -223,1 +220,1 @@\n-    NSString * path = JNFNormalizedNSStringForPath(env, fileName);\n+    NSString * path = NormalizedPathNSStringFromJavaString(env, fileName);\n@@ -225,1 +222,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -249,2 +246,2 @@\n-    NSString *path = JNFNormalizedNSStringForPath(env, url);\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    NSString *path = NormalizedPathNSStringFromJavaString(env, url);\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n","filename":"src\/java.desktop\/macosx\/native\/libosx\/CFileManager.m","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,0 +240,10 @@\n+\/********        STRING CONVERSION SUPPORT    *********\/\n+\n+JNIEXPORT NSString* JavaStringToNSString(JNIEnv *env, jstring jstr);\n+\n+JNIEXPORT jstring NSStringToJavaString(JNIEnv* env, NSString *str);\n+\n+JNIEXPORT NSString* NormalizedPathNSStringFromJavaString(JNIEnv *env, jstring pathStr);\n+\n+JNIEXPORT jstring NormalizedPathJavaStringFromNSString(JNIEnv* env, NSString *str);\n+\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.h","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"JNIUtilities.h\"\n+\n+NSString* JavaStringToNSString(JNIEnv *env, jstring jstr) {\n+    if (jstr == NULL) {\n+        return NULL;\n+    }\n+    jsize len = (*env)->GetStringLength(env, jstr);\n+    const jchar *chars = (*env)->GetStringChars(env, jstr, NULL);\n+    if (chars == NULL) {\n+        return NULL;\n+    }\n+    NSString *result = [NSString stringWithCharacters:(UniChar *)chars length:len];\n+    (*env)->ReleaseStringChars(env, jstr, chars);\n+    return result;\n+}\n+\n+jstring NSStringToJavaString(JNIEnv* env, NSString *str) {\n+\n+    if (str == NULL) {\n+       return NULL;\n+    }\n+    jstring jStr = (*env)->NewStringUTF(env, [str UTF8String]);\n+    CHECK_EXCEPTION();\n+    return jStr;\n+}\n+\n+\/*\n+ * These next conversion functions are for file system paths.\n+ * The NSString needs to be in de-composed UTF-16 format for the Apple file system\n+ * The Java String needs to be in pre-composed UTF-16 format for display by Java.\n+ * https:\/\/developer.apple.com\/library\/archive\/qa\/qa1235\/_index.html\n+ * has some information on this.\n+ *\/\n+\n+\/*\n+ * Returns an NSString in decomposed UTF16 format that is compatible with HFS's\n+ * expectation of the UTF16 format for file system paths.\n+ *\n+ * Example string: \"\/Users\/Amélie\/\"\n+ *\n+ * Java's UTF16 string is \"\/ U s e r s \/ A m \\351 l i e \/\"\n+ * macOS UTF16 string suitable for HFS is \"\/ U s e r s \/ A m e \\314 \\201 l i e \/\"\n+ *\n+ * There is no direct API that takes in NSString UTF16 encoded by Java\n+ * and produces NSString UTF16 for HFS, so we first need to decompose it\n+ * into chars (suitable for low level C file APIs), and only then\n+ * create NSString representation of this decomposition back into UTF16 string.\n+ *\n+ * https:\/\/developer.apple.com\/documentation\/foundation\/nsstring\/1414559-filesystemrepresentation?language=objc\n+ * describes how to get a file system representation as a char* from an NSString\n+ * and then using FileManager (!) convert it to an NSString.\n+ * But we want an NSString.\n+ * So the steps are\n+ * 1) Convert to NSString\n+ * 2) call [NSString fileSystemRepresentation] which gives us a char*\n+ * 3) Convert the returned char* to an NSString using FileManager (is there a better way?)\n+ *\/\n+NSString* NormalizedPathNSStringFromJavaString(JNIEnv *env, jstring pathStr) {\n+    if (pathStr == NULL) {\n+        return nil;\n+    }\n+    NSString *nsStr = JavaStringToNSString(env, pathStr);\n+    if (nsStr == NULL) {\n+        return nil;\n+    }\n+    const char* chs = [nsStr fileSystemRepresentation];\n+    int len = strlen(chs);\n+    NSString* result = [[NSFileManager defaultManager]\n+                  stringWithFileSystemRepresentation:chs length:len];\n+    return result;\n+}\n+\n+\/*\n+ * Given what is (potentially) a de-composed NSString, convert it to pre-composed\n+ * Then convert it into a Java String.\n+ *\/\n+jstring NormalizedPathJavaStringFromNSString(JNIEnv* env, NSString *str) {\n+    if (str == nil) {\n+        return NULL;\n+    }\n+    NSString *normStr = [str precomposedStringWithCanonicalMapping];\n+    return NSStringToJavaString(env, normStr);\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.m","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -26,6 +26,1 @@\n-\/*\n- * Must include this before JavaNativeFoundation.h to get jni.h from build\n- *\/\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-\n+#import \"JNIUtilities.h\"\n@@ -33,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/NSApplicationAWT.h","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -163,3 +163,0 @@\n-\n-    \/\/ inform any interested parties that the AWT has arrived and is pumping\n-    [[NSNotificationCenter defaultCenter] postNotificationName:JNFRunLoopDidStartNotification object:self];\n@@ -274,1 +271,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:NO block:^(){\n@@ -329,2 +326,2 @@\n-    \/\/ Make sure that when we run in AWTRunLoopMode we don't exit randomly\n-    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:[JNFRunLoop javaRunLoopMode]];\n+    \/\/ Make sure that when we run in javaRunLoopMode we don't exit randomly\n+    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:[ThreadUtilities javaRunLoopMode]];\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/NSApplicationAWT.m","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/*\n- * Must include this before JavaNativeFoundation.h to get jni.h from build\n- *\/\n@@ -33,1 +30,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/PropertiesUtilities.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    jstring jKey = JNFNSToJavaString(env, key);\n+    jstring jKey = NSStringToJavaString(env, key);\n@@ -41,1 +41,1 @@\n-    NSString *value = JNFJavaToNSString(env, jValue);\n+    NSString *value = JavaStringToNSString(env, jValue);\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/PropertiesUtilities.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-@interface ThreadUtilities { }\n+@interface ThreadUtilities : NSObject { } \/* Extend NSObject so can call performSelectorOnMainThread *\/\n@@ -135,1 +135,0 @@\n-\/\/Wrappers for the corresponding JNFRunLoop methods with a check for main thread\n@@ -138,0 +137,1 @@\n++ (NSString*)javaRunLoopMode;\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/ThreadUtilities.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -37,0 +36,2 @@\n+static NSString* JavaRunLoopMode = @\"javaRunLoopMode\";\n+static NSArray<NSString*> *javaModes = nil;\n@@ -52,0 +53,9 @@\n++ (void)initialize {\n+    \/* All the standard modes plus ours *\/\n+    javaModes = [[NSArray alloc] initWithObjects:NSDefaultRunLoopMode,\n+                                           NSModalPanelRunLoopMode,\n+                                           NSEventTrackingRunLoopMode,\n+                                           JavaRunLoopMode,\n+                                           nil];\n+}\n+\n@@ -74,0 +84,18 @@\n+\/* This is needed because we can't directly pass a block to\n+ * performSelectorOnMainThreadWaiting .. since it expects a selector\n+ *\/\n++ (void)invokeBlock:(void (^)())block {\n+  block();\n+}\n+\n+\/*\n+ * When running a block where either we don't wait, or it needs to run on another thread\n+ * we need to copy it from stack to heap, use the copy in the call and release after use.\n+ * Do this only when we must because it could be expensive.\n+ * Note : if waiting cross-thread, possibly the stack allocated copy is accessible ?\n+ *\/\n++ (void)invokeBlockCopy:(void (^)(void))blockCopy {\n+  blockCopy();\n+  Block_release(blockCopy);\n+}\n+\n@@ -78,1 +106,6 @@\n-        [JNFRunLoop performOnMainThreadWaiting:wait withBlock:block];\n+        if (wait == YES) {\n+            [self performOnMainThread:@selector(invokeBlock:) on:self withObject:block waitUntilDone:YES];\n+        } else {\n+            void (^blockCopy)(void) = Block_copy(block);\n+            [self performOnMainThread:@selector(invokeBlockCopy:) on:self withObject:blockCopy waitUntilDone:NO];\n+        }\n@@ -86,1 +119,1 @@\n-        [JNFRunLoop performOnMainThread:aSelector on:target withObject:arg waitUntilDone:wait];\n+        [target performSelectorOnMainThread:aSelector withObject:arg waitUntilDone:wait modes:javaModes];\n@@ -90,0 +123,4 @@\n++ (NSString*)javaRunLoopMode {\n+    return JavaRunLoopMode;\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/ThreadUtilities.m","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -47,1 +46,1 @@\n-    returnValue = JNFNSToJavaString(env, getRunningJavaBundle());\n+    returnValue = NSStringToJavaString(env, getRunningJavaBundle());\n@@ -64,1 +63,1 @@\n-    returnValue = JNFNSToJavaString(env, [[NSBundle bundleWithIdentifier:@\"com.apple.JavaVM\"] bundlePath]);\n+    returnValue = NSStringToJavaString(env, [[NSBundle bundleWithIdentifier:@\"com.apple.JavaVM\"] bundlePath]);\n@@ -82,1 +81,1 @@\n-    returnValue = JNFNSToJavaString(env, (NSString*)machineName);\n+    returnValue = NSStringToJavaString(env, (NSString*)machineName);\n@@ -172,1 +171,1 @@\n-            returnValue = JNFNSToJavaString(env, (NSString *)mutableDisplayName);\n+            returnValue = NSStringToJavaString(env, (NSString *)mutableDisplayName);\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/AquaFileView.m","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\/\/ Must include this before JavaNativeFoundation.h to get jni.h from build\n@@ -30,2 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n-\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/AquaLookAndFeel.m","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/AquaNativeResources.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import \"JNIUtilities.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/JRSUIConstantSync.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import \"JNIUtilities.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/JRSUIController.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import \"JNIUtilities.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/JRSUIFocus.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/ScreenMenu.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -112,1 +111,1 @@\n-    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeOpenLater); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeOpenLater);\n@@ -132,1 +131,1 @@\n-    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeMenuClosing); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+    (*env)->CallVoidMethod(env, self.javaObject, jm_ScreenMenu_invokeMenuClosing);\n@@ -153,1 +152,1 @@\n-                    NSMinY(rect), NSMinX(rect), NSMaxY(rect), NSMaxX(rect)); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+                    NSMinY(rect), NSMinX(rect), NSMaxY(rect), NSMaxX(rect));\n@@ -159,0 +158,10 @@\n+\/*\n+ * The input is an NSTimeInterval (a double representing seconds and fractions of seconds)\n+ * 0.0 means midnight Jan 1, 2001.\n+ * The output is a Java long representing time in milliseconds since midnight Jan 1st 1970.\n+ * There is a Cocoa constant representing that difference : NSTimeIntervalSince1970\n+ *\/\n+static jlong NSTimeIntervalToJavaMilliseconds(NSTimeInterval interval) {\n+    NSTimeInterval interval1970 = interval + NSTimeIntervalSince1970;\n+    return (jlong)(interval1970 * 1000);\n+}\n@@ -190,1 +199,1 @@\n-    jlong javaWhen = JNFNSTimeIntervalToJavaMillis([event timestamp]);\n+    jlong javaWhen = NSTimeIntervalToJavaMilliseconds([event timestamp]);\n@@ -198,1 +207,1 @@\n-             javaKind, javaX, javaY, javaModifiers, javaWhen); \/\/ AWT_THREADING Safe (AWTRunLoopMode)\n+             javaKind, javaX, javaY, javaModifiers, javaWhen);\n@@ -224,1 +233,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^{\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^{\n@@ -251,1 +260,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^{\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^{\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/ScreenMenu.m","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -229,1 +228,1 @@\n-        [JNFRunLoop performOnMainThreadWaiting:NO withBlock:^() {\n+        [ThreadUtilities performOnMainThreadWaiting:NO block:^() {\n@@ -246,1 +245,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -285,1 +284,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -344,1 +343,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -433,1 +432,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+    [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n@@ -448,1 +447,1 @@\n-        [JNFRunLoop performOnMainThreadWaiting:YES withBlock:^(){\n+        [ThreadUtilities performOnMainThreadWaiting:YES block:^(){\n","filename":"src\/java.desktop\/macosx\/native\/libsplashscreen\/splashscreen_sys.m","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n+#import <jni_util.h>\n@@ -32,0 +32,34 @@\n+#define JNI_COCOA_ENTER(env) \\\n+ NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init]; \\\n+ @try {\n+\n+#define JNI_COCOA_EXIT(env) \\\n+ } \\\n+ @catch (NSException *e) { \\\n+     NSLog(@\"%@\", [e callStackSymbols]); \\\n+ } \\\n+ @finally { \\\n+    [pool drain]; \\\n+  };\n+\n+\/*\n+ * Pass the block to a selector of a class that extends NSObject\n+ * There is no need to copy the block since this class always waits.\n+ *\/\n+@interface BlockRunner : NSObject { }\n+\n++ (void)invokeBlock:(void (^)())block;\n+@end\n+\n+@implementation BlockRunner\n+\n++ (void)invokeBlock:(void (^)())block{\n+  block();\n+}\n+\n++ (void)performBlock:(void (^)())block {\n+  [self performSelectorOnMainThread:@selector(invokeBlock:) withObject:block waitUntilDone:YES];\n+}\n+\n+@end\n+\n@@ -39,1 +73,1 @@\n-    JNF_COCOA_ENTER(env);\n+    JNI_COCOA_ENTER(env);\n@@ -71,1 +105,1 @@\n-        [JNFRunLoop performOnMainThreadWaiting:YES withBlock:block];\n+        [BlockRunner performBlock:block];\n@@ -74,1 +108,1 @@\n-    JNF_COCOA_EXIT(env);\n+    JNI_COCOA_EXIT(env);\n@@ -84,1 +118,1 @@\n-    JNF_COCOA_ENTER(env);\n+    JNI_COCOA_ENTER(env);\n@@ -100,1 +134,1 @@\n-        [JNFRunLoop performOnMainThreadWaiting:YES withBlock:block];\n+        [BlockRunner performBlock:block];\n@@ -103,1 +137,1 @@\n-    JNF_COCOA_EXIT(env);\n+    JNI_COCOA_EXIT(env);\n@@ -114,1 +148,1 @@\n-    JNF_COCOA_ENTER(env);\n+    JNI_COCOA_ENTER(env);\n@@ -120,1 +154,1 @@\n-    [JNFRunLoop performOnMainThreadWaiting:YES withBlock:block];\n+    [BlockRunner performBlock:block];\n@@ -122,1 +156,1 @@\n-  JNF_COCOA_EXIT(env);\n+  JNI_COCOA_EXIT(env);\n","filename":"test\/jdk\/java\/awt\/Window\/MainKeyWindowTest\/libTestMainKeyWindow.c","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"}]}