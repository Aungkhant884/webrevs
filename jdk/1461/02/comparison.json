{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,10 +68,15 @@\n-     * This empty constructor automatically seeds the generator.  We attempt\n-     * to provide sufficient seed bytes to completely randomize the internal\n-     * state of the generator (20 bytes).  Note, however, that our seed\n-     * generation algorithm has not been thoroughly studied or widely deployed.\n-     *\n-     * <p>The first time this constructor is called in a given Virtual Machine,\n-     * it may take several seconds of CPU time to seed the generator, depending\n-     * on the underlying hardware.  Successive calls run quickly because they\n-     * rely on the same (internal) pseudo-random number generator for their\n-     * seed bits.\n+     * An empty constructor that creates an unseeded SecureRandom object.\n+     * <p>\n+     * Unless the user calls setSeed(), the first call to engineGetBytes()\n+     * will have the SeedGenerator provide sufficient seed bytes to\n+     * completely randomize the internal state of the generator (20 bytes).\n+     * Note that the old threaded seed generation algorithm is provided\n+     * only as a fallback, and has not been thoroughly studied or widely\n+     * deployed.\n+     * <p>\n+     * The SeedGenerator relies on a VM-wide entropy pool to generate\n+     * seed bytes for these objects.  The first time the SeedGenerator is\n+     * called, it may take several seconds of CPU time to initialize,\n+     * depending on the underlying hardware.  Successive calls run\n+     * quickly because they rely on the same (internal) pseudo-random\n+     * number generator for their seed bits.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SecureRandom.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}