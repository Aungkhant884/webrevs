{"files":[{"patch":"@@ -728,1 +728,1 @@\n-  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/, true \/* single thread*\/>\n+  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/>\n@@ -737,1 +737,1 @@\n-    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers()),\n+    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers(), false \/*heap iteration*\/),\n@@ -841,1 +841,2 @@\n-  ShenandoahClassLoaderDataRoots<true \/*concurrent*\/, false \/*single threaded*\/> _cld_roots;\n+  ShenandoahClassLoaderDataRoots<true \/*concurrent*\/>\n+                                                _cld_roots;\n@@ -849,1 +850,1 @@\n-    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers()),\n+    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers(), false \/*heap iteration*\/),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1324,1 +1324,2 @@\n-  ShenandoahHeapIterationRootScanner rp;\n+  uint n_workers = safepoint_workers() != NULL ? safepoint_workers()->active_workers() : 1;\n+  ShenandoahHeapIterationRootScanner rp(n_workers);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-   _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers()),\n+   _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers(), false \/*heap iteration*\/),\n@@ -157,1 +157,1 @@\n-  _cld_roots(phase, n_workers),\n+  _cld_roots(phase, n_workers, false \/*heap iteration*\/),\n@@ -216,1 +216,1 @@\n-  _cld_roots(phase, n_workers),\n+  _cld_roots(phase, n_workers, false \/*heap iteration*\/),\n@@ -225,1 +225,1 @@\n-  _cld_roots(phase, n_workers),\n+  _cld_roots(phase, n_workers, false \/*heap iteration*\/),\n@@ -251,1 +251,1 @@\n-ShenandoahHeapIterationRootScanner::ShenandoahHeapIterationRootScanner() :\n+ShenandoahHeapIterationRootScanner::ShenandoahHeapIterationRootScanner(uint n_workers) :\n@@ -255,1 +255,1 @@\n-   _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, 1),\n+   _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, n_workers, true \/*heap iteration*\/),\n@@ -262,2 +262,2 @@\n-   \/\/ Must use _claim_none to avoid interfering with concurrent CLDG iteration\n-   CLDToOopClosure clds(oops, ClassLoaderData::_claim_none);\n+   \/\/ Must use _claim_other to avoid interfering with concurrent CLDG iteration\n+   CLDToOopClosure clds(oops, ClassLoaderData::_claim_other);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n+template <bool CONCURRENT>\n@@ -117,2 +117,0 @@\n-    if (SINGLE_THREADED) return 1u;\n-\n@@ -126,1 +124,1 @@\n-  ShenandoahClassLoaderDataRoots(ShenandoahPhaseTimings::Phase phase, uint n_workers);\n+  ShenandoahClassLoaderDataRoots(ShenandoahPhaseTimings::Phase phase, uint n_workers, bool heap_iteration);\n@@ -167,1 +165,1 @@\n-  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/, false \/* single_thread*\/>\n+  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/>\n@@ -183,1 +181,1 @@\n-  ShenandoahClassLoaderDataRoots<true \/*concurrent*\/, false \/* single-threaded*\/>\n+  ShenandoahClassLoaderDataRoots<true \/*concurrent*\/>\n@@ -204,2 +202,1 @@\n-  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/, true \/*single threaded*\/>\n-                                                           _cld_roots;\n+  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/>     _cld_roots;\n@@ -210,1 +207,1 @@\n-  ShenandoahHeapIterationRootScanner();\n+  ShenandoahHeapIterationRootScanner(uint n_workers);\n@@ -219,2 +216,1 @@\n-  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/, false \/*single threaded*\/>\n-                                                            _cld_roots;\n+  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/>      _cld_roots;\n@@ -236,2 +232,1 @@\n-  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/, false \/*single threaded*\/>\n-                                                            _cld_roots;\n+  ShenandoahClassLoaderDataRoots<false \/*concurrent*\/>      _cld_roots;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -78,2 +78,2 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n-ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::ShenandoahClassLoaderDataRoots(ShenandoahPhaseTimings::Phase phase, uint n_workers) :\n+template <bool CONCURRENT>\n+ShenandoahClassLoaderDataRoots<CONCURRENT>::ShenandoahClassLoaderDataRoots(ShenandoahPhaseTimings::Phase phase, uint n_workers, bool heap_iteration) :\n@@ -82,1 +82,3 @@\n-  if (!SINGLE_THREADED) {\n+  if (heap_iteration) {\n+    ClassLoaderDataGraph::clear_claimed_marks(ClassLoaderData::_claim_other);\n+  } else {\n@@ -85,1 +87,2 @@\n-  if (CONCURRENT && !SINGLE_THREADED) {\n+\n+  if (CONCURRENT) {\n@@ -91,1 +94,0 @@\n-  assert(CONCURRENT || Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n@@ -94,3 +96,3 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n-ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::~ShenandoahClassLoaderDataRoots() {\n-  if (CONCURRENT && !SINGLE_THREADED) {\n+template <bool CONCURRENT>\n+ShenandoahClassLoaderDataRoots<CONCURRENT>::~ShenandoahClassLoaderDataRoots() {\n+  if (CONCURRENT) {\n@@ -101,2 +103,2 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n-void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id) {\n+template <bool CONCURRENT>\n+void ShenandoahClassLoaderDataRoots<CONCURRENT>::cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id) {\n@@ -106,6 +108,1 @@\n-      if (SINGLE_THREADED){\n-        MutexLocker ml(ClassLoaderDataGraph_lock, Mutex::_no_safepoint_check_flag);\n-        f(clds);\n-      } else {\n-        f(clds);\n-      }\n+      f(clds);\n@@ -120,2 +117,2 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n-void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::always_strong_cld_do(CLDClosure* clds, uint worker_id) {\n+template <bool CONCURRENT>\n+void ShenandoahClassLoaderDataRoots<CONCURRENT>::always_strong_cld_do(CLDClosure* clds, uint worker_id) {\n@@ -125,2 +122,2 @@\n-template <bool CONCURRENT, bool SINGLE_THREADED>\n-void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::cld_do(CLDClosure* clds, uint worker_id) {\n+template <bool CONCURRENT>\n+void ShenandoahClassLoaderDataRoots<CONCURRENT>::cld_do(CLDClosure* clds, uint worker_id) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=passive\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      TestJcmdHeapDump\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:-ShenandoahDegeneratedGC\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=aggressive\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahOOMDuringEvacALot\n+ *      TestJcmdHeapDump\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahAllocFailureALot\n+ *      TestJcmdHeapDump\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=adaptive\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n+ *      -Dtarget=10000\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=static\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=static\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=compact\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact\n+ *     TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=iu-aggressive\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahOOMDuringEvacALot\n+ *      TestJcmdHeapDump\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n+ *      -XX:+ShenandoahAllocFailureALot\n+ *      TestJcmdHeapDump\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+\/*\n+ * @test id=iu\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/com.sun.tools.attach\n+ *\n+ * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n+ *      TestJcmdHeapDump\n+ *\/\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+\n+public class TestJcmdHeapDump {\n+    public static void main(String[] args) {\n+        long pid = ProcessHandle.current().pid();\n+        JDKToolLauncher jcmd = JDKToolLauncher.createUsingTestJDK(\"jcmd\");\n+        jcmd.addToolArg(String.valueOf(pid));\n+        jcmd.addToolArg(\"GC.heap_dump\");\n+        String dumpFileName = \"myheapdump\" + String.valueOf(pid);\n+        jcmd.addToolArg(dumpFileName);\n+\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(jcmd.getCommand());\n+            Process jcmdProc = pb.start();\n+\n+            OutputAnalyzer output = new OutputAnalyzer(jcmdProc);\n+            jcmdProc.waitFor();\n+            output.shouldHaveExitValue(0);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed: \" + e);\n+        }\n+\n+        File f = new File(dumpFileName);\n+        if (f.exists()) {\n+            f.delete();\n+        } else {\n+            throw new RuntimeException(\"Dump file not created\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}