{"files":[{"patch":"@@ -217,0 +217,13 @@\n+\t<LI><P><B>{@systemProperty jdk.https.negotiate.cbt}<\/B> (default: &lt;never&gt;)<BR>\n+\tThis controls the generation and sending of TLS channel binding tokens (CBT) when Kerberos \n+        or the Negotiate authentication scheme using Kerberos are employed over HTTPS with \n+        {@code HttpURLConnection}. There are three possible settings:<\/P>\n+        <OL>\n+          <LI><P>\"never\". This is also the default value if the property is not set. In this case,\n+              CBT's are never sent.<\/P>\n+          <LI><P>\"always\". CBTs are sent for all Kerberos authentication attempts over HTTPS.<\/P>\n+          <LI><P>\"domain:&lt;comma separated domain list&gt;\" Each domain in the list specifies destination\n+              host or hosts for which a CBT is sent. Domains can be single hosts like foo, or foo.com,\n+              or wildcards like *.foo.com which matches all hosts under foo.com and its sub-domains.\n+              CBTs are not sent to any destinations that don't match one of the list entries<\/P>\n+\t<\/OL>\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    \/* \"jdk.spnego.cbt\" property can be set to \"always\" (always sent), \"never\" (never sent) or\n+    \/* \"jdk.https.negotiate.cbt\" property can be set to \"always\" (always sent), \"never\" (never sent) or\n@@ -163,0 +163,5 @@\n+    private static void logError(String msg) {\n+        if (logger.isLoggable(PlatformLogger.Level.SEVERE)) {\n+            logger.severe(msg);\n+        }\n+    }\n@@ -183,0 +188,1 @@\n+            logError(\"Unexpected value for \\\"jdk.https.negotiate.cbt\\\" system property\");\n@@ -194,1 +200,1 @@\n-        String s = props.getProperty(\"jdk.spnego.cbt\");\n+        String s = props.getProperty(\"jdk.https.negotiate.cbt\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.util;\n+\n+\/**\n+ * Thrown by TlsChannelBinding if an error occurs\n+ *\/\n+public class ChannelBindingException extends Exception {\n+\n+    @java.io.Serial\n+    private static final long serialVersionUID = -5021387249782788460L;\n+\n+    \/**\n+     * Constructs a ChannelBindingException with no detail message. A detail\n+     * message is a String that describes this particular exception.\n+     *\/\n+    public ChannelBindingException() {\n+        super();\n+    }\n+\n+    \/**\n+     * Constructs a ChannelBindingException with a detail message and\n+     * specified cause.\n+     *\/\n+    public ChannelBindingException(String msg, Exception e) {\n+        super(msg, e);\n+    }\n+\n+    \/**\n+     * Constructs a ChannelBindingException with a detail message\n+     *\/\n+    public ChannelBindingException(String msg) {\n+        super(msg);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ChannelBindingException.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-package com.sun.jndi.ldap.sasl;\n@@ -27,2 +26,2 @@\n-import javax.naming.NamingException;\n-import javax.security.sasl.SaslException;\n+package sun.security.util;\n+\n@@ -87,1 +86,1 @@\n-     * @throws NamingException\n+     * @throws ChannelBindingException\n@@ -89,1 +88,1 @@\n-    public static TlsChannelBindingType parseType(String cbType) throws NamingException {\n+    public static TlsChannelBindingType parseType(String cbType) throws ChannelBindingException {\n@@ -94,1 +93,1 @@\n-                throw new NamingException(\"Illegal value for \" +\n+                throw new ChannelBindingException(\"Illegal value for \" +\n@@ -107,1 +106,1 @@\n-     * @throws SaslException\n+     * @throws ChannelBindingException\n@@ -109,1 +108,1 @@\n-    public static TlsChannelBinding create(X509Certificate serverCertificate) throws SaslException {\n+    public static TlsChannelBinding create(X509Certificate serverCertificate) throws ChannelBindingException {\n@@ -130,1 +129,1 @@\n-            throw new SaslException(\"Cannot create TLS channel binding data\", e);\n+            throw new ChannelBindingException(\"Cannot create TLS channel binding data\", e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/TlsChannelBinding.java","additions":8,"deletions":9,"binary":false,"changes":17,"previous_filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/sasl\/TlsChannelBinding.java","status":"renamed"},{"patch":"@@ -45,1 +45,3 @@\n-import com.sun.jndi.ldap.sasl.TlsChannelBinding.TlsChannelBindingType;\n+import sun.security.util.ChannelBindingException;\n+import sun.security.util.TlsChannelBinding;\n+import sun.security.util.TlsChannelBinding.TlsChannelBindingType;\n@@ -126,2 +128,3 @@\n-                TlsChannelBindingType cbType =\n-                        TlsChannelBinding.parseType(\n+                TlsChannelBindingType cbType;\n+                try {\n+                    cbType = TlsChannelBinding.parseType(\n@@ -129,0 +132,3 @@\n+                } catch (ChannelBindingException e) {\n+                    throw new SaslException(e.getMessage());\n+                }\n@@ -133,2 +139,6 @@\n-                        TlsChannelBinding tlsCB =\n-                                TlsChannelBinding.create(cert);\n+                        TlsChannelBinding tlsCB;\n+                        try {\n+                            tlsCB = TlsChannelBinding.create(cert);\n+                        } catch (ChannelBindingException e) {\n+                            throw new SaslException(e.getMessage());\n+                        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/sasl\/LdapSasl.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -130,3 +130,0 @@\n-    exports com.sun.jndi.ldap.sasl to\n-        java.security.jgss;\n-\n","filename":"src\/java.naming\/share\/classes\/module-info.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javax.security.sasl.SaslException;\n@@ -46,1 +45,2 @@\n-import com.sun.jndi.ldap.sasl.TlsChannelBinding;\n+import sun.security.util.ChannelBindingException;\n+import sun.security.util.TlsChannelBinding;\n@@ -72,1 +72,1 @@\n-    private void init(HttpCallerInfo hci) throws GSSException, SaslException {\n+    private void init(HttpCallerInfo hci) throws GSSException, ChannelBindingException {\n@@ -125,1 +125,1 @@\n-        } catch (GSSException | SaslException  e) {\n+        } catch (GSSException | ChannelBindingException  e) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/net\/www\/protocol\/http\/spnego\/NegotiatorImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}