{"files":[{"patch":"@@ -217,0 +217,13 @@\n+\t<LI><P><B>{@systemProperty jdk.https.negotiate.cbt}<\/B> (default: &lt;never&gt;)<BR>\n+\tThis controls the generation and sending of TLS channel binding tokens (CBT) when Kerberos \n+        or the Negotiate authentication scheme using Kerberos are employed over HTTPS with \n+        {@code HttpURLConnection}. There are three possible settings:<\/P>\n+        <OL>\n+          <LI><P>\"never\". This is also the default value if the property is not set. In this case,\n+              CBT's are never sent.<\/P>\n+          <LI><P>\"always\". CBTs are sent for all Kerberos authentication attempts over HTTPS.<\/P>\n+          <LI><P>\"domain:&lt;comma separated domain list&gt;\" Each domain in the list specifies destination\n+              host or hosts for which a CBT is sent. Domains can be single hosts like foo, or foo.com,\n+              or wildcards like *.foo.com which matches all hosts under foo.com and its sub-domains.\n+              CBTs are not sent to any destinations that don't match one of the list entries<\/P>\n+\t<\/OL>\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -147,0 +147,9 @@\n+    \/* \"jdk.https.negotiate.cbt\" property can be set to \"always\" (always sent), \"never\" (never sent) or\n+     * \"domain:a,c.d,*.e.f\" (sent to host a, or c.d or to the domain e.f and any of its subdomains). This is\n+     * a comma separated list of arbitrary length with no white-space allowed.\n+     * If enabled (for a particular destination) then SPNEGO authentication requests will include\n+     * a channel binding token for the destination server. The default behavior and setting for the\n+     * property is \"never\"\n+     *\/\n+    private static final String spnegoCBT;\n+\n@@ -148,0 +157,1 @@\n+\n@@ -153,0 +163,5 @@\n+    private static void logError(String msg) {\n+        if (logger.isLoggable(PlatformLogger.Level.SEVERE)) {\n+            logger.severe(msg);\n+        }\n+    }\n@@ -168,0 +183,10 @@\n+    static String normalizeCBT(String s) {\n+        if (s == null || ! (s.equals(\"always\") ||\n+                s.equals(\"never\") || s.startsWith(\"domain:\"))) {\n+            return \"never\";\n+        } else {\n+            logError(\"Unexpected value for \\\"jdk.https.negotiate.cbt\\\" system property\");\n+            return s;\n+        }\n+    }\n+\n@@ -175,0 +200,3 @@\n+        String s = props.getProperty(\"jdk.https.negotiate.cbt\");\n+        spnegoCBT = normalizeCBT(s);\n+\n@@ -209,0 +237,4 @@\n+    public String getSpnegoCBT() {\n+        return spnegoCBT;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.security.cert.X509Certificate;\n@@ -54,0 +55,3 @@\n+    \/\/ Used to obtain server cert for SPNEGO CBT.\n+    \/\/ May be null in which case CBT is not set\n+    public final X509Certificate serverCert;\n@@ -68,0 +72,1 @@\n+        this.serverCert =  old.serverCert;\n@@ -74,0 +79,4 @@\n+        this(url, null, a);\n+    }\n+\n+    public HttpCallerInfo(URL url, X509Certificate serverCert, Authenticator a) {\n@@ -75,0 +84,1 @@\n+        this.serverCert= serverCert;\n@@ -103,0 +113,4 @@\n+        this(url, host, port, null, a);\n+    }\n+\n+    public HttpCallerInfo(URL url, String host, int port, X509Certificate serverCert, Authenticator a) {\n@@ -106,0 +120,1 @@\n+        this.serverCert = serverCert;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpCallerInfo.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1743,1 +1743,1 @@\n-                            new HttpCallerInfo(url,\n+                            getHttpCallerInfo(url,\n@@ -1818,1 +1818,1 @@\n-                            new HttpCallerInfo(url, authenticator),\n+                            getHttpCallerInfo(url, authenticator),\n@@ -2214,1 +2214,1 @@\n-                            new HttpCallerInfo(url,\n+                            getHttpCallerInfo(url,\n@@ -2283,0 +2283,15 @@\n+    \/**\n+     * Overridden in https to also include the server certificate\n+     *\/\n+    protected HttpCallerInfo getHttpCallerInfo(URL url, String proxy, int port,\n+                                               Authenticator authenticator) {\n+        return new HttpCallerInfo(url, proxy, port, authenticator);\n+    }\n+\n+    \/**\n+     * Overridden in https to also include the server certificate\n+     *\/\n+    protected HttpCallerInfo getHttpCallerInfo(URL url, Authenticator authenticator) {\n+        return new HttpCallerInfo(url, authenticator);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/*\n+\/**\n@@ -28,0 +28,1 @@\n+import java.net.Authenticator;\n@@ -32,0 +33,2 @@\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n@@ -39,0 +42,1 @@\n+import sun.net.www.protocol.http.HttpCallerInfo;\n@@ -312,0 +316,67 @@\n+\n+    \/**\n+     * If no SSL Session available or if the system config does not allow it\n+     * don't use the extended caller info (the server cert).\n+     * Otherwise return true to include the server cert\n+     *\/\n+    private boolean useExtendedCallerInfo(URL url) {\n+        HttpsClient https = (HttpsClient)http;\n+        if (https.getSSLSession() == null) {\n+            return false;\n+        }\n+        String prop = http.getSpnegoCBT();\n+        if (prop.equals(\"never\")) {\n+            return false;\n+        }\n+        String target = url.getHost();\n+        if (prop.startsWith(\"domain:\")) {\n+            String[] domains = prop.substring(7).split(\",\");\n+            for (String domain : domains) {\n+                if (target.equals(domain)) {\n+                    return true;\n+                }\n+                if (domain.startsWith(\"*.\") && target.endsWith(domain.substring(1))) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    protected HttpCallerInfo getHttpCallerInfo(URL url, String proxy, int port,\n+                                               Authenticator authenticator)\n+    {\n+        if (!useExtendedCallerInfo(url)) {\n+            return super.getHttpCallerInfo(url, proxy, port, authenticator);\n+        }\n+        HttpsClient https = (HttpsClient)http;\n+        try {\n+            Certificate[] certs = https.getServerCertificates();\n+            if (certs[0] instanceof X509Certificate x509Cert) {\n+                return new HttpCallerInfo(url, proxy, port, x509Cert, authenticator);\n+            }\n+        } catch (SSLPeerUnverifiedException e) {\n+            \/\/ ignore\n+        }\n+        return super.getHttpCallerInfo(url, proxy, port, authenticator);\n+    }\n+\n+    @Override\n+    protected HttpCallerInfo getHttpCallerInfo(URL url, Authenticator authenticator)\n+    {\n+        if (!useExtendedCallerInfo(url)) {\n+            return super.getHttpCallerInfo(url, authenticator);\n+        }\n+        HttpsClient https = (HttpsClient)http;\n+        try {\n+            Certificate[] certs = https.getServerCertificates();\n+            if (certs[0] instanceof X509Certificate x509Cert) {\n+                return new HttpCallerInfo(url, x509Cert, authenticator);\n+            }\n+        } catch (SSLPeerUnverifiedException e) {\n+            \/\/ ignore\n+        }\n+        return super.getHttpCallerInfo(url, authenticator);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/https\/AbstractDelegateHttpsURLConnection.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.util;\n+\n+\/**\n+ * Thrown by TlsChannelBinding if an error occurs\n+ *\/\n+public class ChannelBindingException extends Exception {\n+\n+    @java.io.Serial\n+    private static final long serialVersionUID = -5021387249782788460L;\n+\n+    \/**\n+     * Constructs a ChannelBindingException with no detail message. A detail\n+     * message is a String that describes this particular exception.\n+     *\/\n+    public ChannelBindingException() {\n+        super();\n+    }\n+\n+    \/**\n+     * Constructs a ChannelBindingException with a detail message and\n+     * specified cause.\n+     *\/\n+    public ChannelBindingException(String msg, Exception e) {\n+        super(msg, e);\n+    }\n+\n+    \/**\n+     * Constructs a ChannelBindingException with a detail message\n+     *\/\n+    public ChannelBindingException(String msg) {\n+        super(msg);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ChannelBindingException.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-package com.sun.jndi.ldap.sasl;\n@@ -27,2 +26,2 @@\n-import javax.naming.NamingException;\n-import javax.security.sasl.SaslException;\n+package sun.security.util;\n+\n@@ -87,1 +86,1 @@\n-     * @throws NamingException\n+     * @throws ChannelBindingException\n@@ -89,1 +88,1 @@\n-    public static TlsChannelBindingType parseType(String cbType) throws NamingException {\n+    public static TlsChannelBindingType parseType(String cbType) throws ChannelBindingException {\n@@ -94,1 +93,1 @@\n-                throw new NamingException(\"Illegal value for \" +\n+                throw new ChannelBindingException(\"Illegal value for \" +\n@@ -107,1 +106,1 @@\n-     * @throws SaslException\n+     * @throws ChannelBindingException\n@@ -109,1 +108,1 @@\n-    public static TlsChannelBinding create(X509Certificate serverCertificate) throws SaslException {\n+    public static TlsChannelBinding create(X509Certificate serverCertificate) throws ChannelBindingException {\n@@ -130,1 +129,1 @@\n-            throw new SaslException(\"Cannot create TLS channel binding data\", e);\n+            throw new ChannelBindingException(\"Cannot create TLS channel binding data\", e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/TlsChannelBinding.java","additions":8,"deletions":9,"binary":false,"changes":17,"previous_filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/sasl\/TlsChannelBinding.java","status":"renamed"},{"patch":"@@ -45,1 +45,3 @@\n-import com.sun.jndi.ldap.sasl.TlsChannelBinding.TlsChannelBindingType;\n+import sun.security.util.ChannelBindingException;\n+import sun.security.util.TlsChannelBinding;\n+import sun.security.util.TlsChannelBinding.TlsChannelBindingType;\n@@ -126,2 +128,3 @@\n-                TlsChannelBindingType cbType =\n-                        TlsChannelBinding.parseType(\n+                TlsChannelBindingType cbType;\n+                try {\n+                    cbType = TlsChannelBinding.parseType(\n@@ -129,0 +132,3 @@\n+                } catch (ChannelBindingException e) {\n+                    throw new SaslException(e.getMessage());\n+                }\n@@ -133,2 +139,6 @@\n-                        TlsChannelBinding tlsCB =\n-                                TlsChannelBinding.create(cert);\n+                        TlsChannelBinding tlsCB;\n+                        try {\n+                            tlsCB = TlsChannelBinding.create(cert);\n+                        } catch (ChannelBindingException e) {\n+                            throw new SaslException(e.getMessage());\n+                        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/sasl\/LdapSasl.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    requires java.security.sasl;\n","filename":"src\/java.security.jgss\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.security.cert.Certificate;\n@@ -43,0 +44,3 @@\n+import sun.security.jgss.krb5.internal.TlsChannelBindingImpl;\n+import sun.security.util.ChannelBindingException;\n+import sun.security.util.TlsChannelBinding;\n@@ -68,1 +72,1 @@\n-    private void init(HttpCallerInfo hci) throws GSSException {\n+    private void init(HttpCallerInfo hci) throws GSSException, ChannelBindingException {\n@@ -103,0 +107,8 @@\n+        if (hci.serverCert != null) {\n+            if (DEBUG) {\n+                System.out.println(\"Negotiate: Setting CBT\");\n+            }\n+            \/\/ set the channel binding token\n+            TlsChannelBinding b = TlsChannelBinding.create(hci.serverCert);\n+            context.setChannelBinding(new TlsChannelBindingImpl(b.getData()));\n+        }\n@@ -113,1 +125,1 @@\n-        } catch (GSSException e) {\n+        } catch (GSSException | ChannelBindingException  e) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/net\/www\/protocol\/http\/spnego\/NegotiatorImpl.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}