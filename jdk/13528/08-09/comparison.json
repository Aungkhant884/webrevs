{"files":[{"patch":"@@ -278,1 +278,1 @@\n-     * Flag that indicates that a local variable, a lambda parameter, or an unnamed pattern variable is unnamed.\n+     * Currently available: Bit 48.\n@@ -280,1 +280,0 @@\n-    public static final long UNNAMED = 1L<<48;\n@@ -521,1 +520,0 @@\n-        UNNAMED(Flags.UNNAMED),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-        return (flags_field & UNNAMED) != 0;\n+        return name.isEmpty();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4164,1 +4164,3 @@\n-        BindingSymbol v = new BindingSymbol(tree.var.mods.flags, tree.var.name, type, env.info.scope.owner);\n+        Name name = tree.var.name;\n+        if (name == names.underscore) name = names.empty;\n+        BindingSymbol v = new BindingSymbol(tree.var.mods.flags, name, type, env.info.scope.owner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -294,7 +294,3 @@\n-        Name name;\n-        if (Feature.UNNAMED_VARIABLES.allowedInSource(source) && (tree.mods.flags & UNNAMED) != 0) {\n-            name = names.empty;\n-        } else {\n-            name = tree.name;\n-        }\n-        VarSymbol v = new VarSymbol(0, name , vartype, enclScope.owner);\n+        Name name = tree.name;\n+        if (Feature.UNNAMED_VARIABLES.allowedInSource(source) && name == names.underscore) name = names.empty;\n+        VarSymbol v = new VarSymbol(0, name, vartype, enclScope.owner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -726,1 +726,1 @@\n-        return (sym.flags() & Flags.UNNAMED) != 0;\n+        return sym.isUnnamed();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3556,1 +3556,0 @@\n-            mods.flags |= Flags.UNNAMED;\n@@ -3664,1 +3663,0 @@\n-                mods.flags |= Flags.UNNAMED;\n@@ -3709,1 +3707,1 @@\n-        if ((mods.flags & Flags.UNNAMED) != 0 && Feature.UNNAMED_VARIABLES.allowedInSource(source)) {\n+        if (Feature.UNNAMED_VARIABLES.allowedInSource(source) && name == names.underscore) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -151,1 +151,0 @@\n-            \":t\",\n@@ -162,1 +161,0 @@\n-            \":t\",\n@@ -172,1 +170,0 @@\n-            \":t\",\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -19,0 +19,1 @@\n+UnnamedErrors.java:11:17: compiler.err.already.defined: kindname.variable, x, kindname.class, UnnamedErrors\n@@ -26,1 +27,1 @@\n-23 errors\n\\ No newline at end of file\n+24 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,0 +78,5 @@\n+\n+            if(!node.getName().toString().equals(\"_\")) {\n+                throw new RuntimeException(\"Expected the underscore as the name of the Tree API but got: \" + node.getName());\n+            }\n+\n@@ -90,1 +95,1 @@\n-            if (!elements.isUnnamed(element)) {\n+            if (!elements.isUnnamed(element) || !element.getSimpleName().isEmpty()) {\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedVariableElement.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}