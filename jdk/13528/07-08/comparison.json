{"files":[{"patch":"@@ -826,5 +826,1 @@\n-                Name name = identOrUnderscore();\n-                if (name == names.underscore) {\n-                    mods.flags |= Flags.UNNAMED;\n-                }\n-                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null));\n+                JCVariableDecl var = variableDeclaratorRest(varPos, mods, e, identOrUnderscore(), false, null, false, false, true);\n@@ -833,1 +829,1 @@\n-                    if (name == names.underscore) {\n+                    if (var.name == names.underscore) {\n@@ -3529,1 +3525,1 @@\n-        JCVariableDecl head = variableDeclaratorRest(pos, mods, type, name, reqInit, dc, localDecl, false);\n+        JCVariableDecl head = variableDeclaratorRest(pos, mods, type, name, reqInit, dc, localDecl, false, false);\n@@ -3544,1 +3540,1 @@\n-        return variableDeclaratorRest(token.pos, mods, type, identOrUnderscore(), reqInit, dc, localDecl, true);\n+        return variableDeclaratorRest(token.pos, mods, type, identOrUnderscore(), reqInit, dc, localDecl, true, false);\n@@ -3554,1 +3550,1 @@\n-                                  boolean reqInit, Comment dc, boolean localDecl, boolean compound) {\n+                                  boolean reqInit, Comment dc, boolean localDecl, boolean compound, boolean isTypePattern) {\n@@ -3561,1 +3557,1 @@\n-            if (!localDecl) {\n+            if (!localDecl && !isTypePattern) {\n@@ -3571,20 +3567,23 @@\n-        JCTree elemType = TreeInfo.innermostType(type, true);\n-        int startPos = Position.NOPOS;\n-        if (elemType.hasTag(IDENT)) {\n-            Name typeName = ((JCIdent)elemType).name;\n-            if (restrictedTypeNameStartingAtSource(typeName, pos, !compound && localDecl) != null) {\n-                if (typeName != names.var) {\n-                    reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedHere(typeName));\n-                } else if (type.hasTag(TYPEARRAY) && !compound) {\n-                    \/\/error - 'var' and arrays\n-                    reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedArray(typeName));\n-                } else {\n-                    declaredUsingVar = true;\n-                    if(compound)\n-                        \/\/error - 'var' in compound local var decl\n-                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedCompound(typeName));\n-                    startPos = TreeInfo.getStartPos(mods);\n-                    if (startPos == Position.NOPOS)\n-                        startPos = TreeInfo.getStartPos(type);\n-                    \/\/implicit type\n-                    type = null;\n+        JCVariableDecl result;\n+        if (!isTypePattern) {\n+            int startPos = Position.NOPOS;\n+            JCTree elemType = TreeInfo.innermostType(type, true);\n+            if (elemType.hasTag(IDENT)) {\n+                Name typeName = ((JCIdent) elemType).name;\n+                if (restrictedTypeNameStartingAtSource(typeName, pos, !compound && localDecl) != null) {\n+                    if (typeName != names.var) {\n+                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedHere(typeName));\n+                    } else if (type.hasTag(TYPEARRAY) && !compound) {\n+                        \/\/error - 'var' and arrays\n+                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedArray(typeName));\n+                    } else {\n+                        declaredUsingVar = true;\n+                        if (compound)\n+                            \/\/error - 'var' in compound local var decl\n+                            reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedCompound(typeName));\n+                        startPos = TreeInfo.getStartPos(mods);\n+                        if (startPos == Position.NOPOS)\n+                            startPos = TreeInfo.getStartPos(type);\n+                        \/\/implicit type\n+                        type = null;\n+                    }\n@@ -3593,0 +3592,5 @@\n+            result = toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n+            attach(result, dc);\n+            result.startPos = startPos;\n+        } else {\n+            result = toP(F.at(pos).VarDef(mods, name, type, null));\n@@ -3594,4 +3598,1 @@\n-        JCVariableDecl result =\n-            toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n-        attach(result, dc);\n-        result.startPos = startPos;\n+\n@@ -3742,1 +3743,1 @@\n-            return variableDeclaratorRest(token.pos, mods, t, ident(), true, null, true, false);\n+            return variableDeclaratorRest(token.pos, mods, t, ident(), true, null, true, false, false);\n@@ -3747,1 +3748,1 @@\n-            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false);\n+            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":37,"deletions":36,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrLintUnderscore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-    \/\/ JEP\n+    \/\/ JEP 443 examples\n@@ -153,1 +153,1 @@\n-    void jep(ColoredPoint r) {\n+    void jep443examples(ColoredPoint r) {\n@@ -183,1 +183,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/Unnamed.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}