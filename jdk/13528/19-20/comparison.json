{"files":[{"patch":"@@ -107,2 +107,3 @@\n-     * The default implementation of this method examines whether {@code\n-     * getSimpleName()} returns an empty name.\n+     * The default implementation of this method calls {@code\n+     * getSimpleName()} and returns {@code true} if the result is\n+     * empty and {@code false} otherwise.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/VariableElement.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -712,15 +712,0 @@\n-    \/**\n-     * {@return {@code true} if the element has an empty name, {@code false} otherwise}\n-     *\n-     * @implSpec\n-     * The default implementation of this method examines whether {@code\n-     * getSimpleName()} returns an empty name.\n-     *\n-     * @param element the element being examined\n-     * @since 21\n-     *\/\n-    @PreviewFeature(feature=PreviewFeature.Feature.UNNAMED, reflective = true)\n-    default boolean isUnnamed(VariableElement element) {\n-        return element.getSimpleName().isEmpty();\n-    }\n-\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -723,6 +723,0 @@\n-    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n-    public boolean isUnnamed(VariableElement element) {\n-        VarSymbol sym = (VarSymbol) element;\n-        return sym.isUnnamedVariable();\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,4 +49,0 @@\n-            Elements vacuousElements = new VacuousElements();\n-            expectNpe( () -> vacuousElements.isUnnamed(null));\n-            expectNpe( () -> elements.isUnnamed(null));\n-\n@@ -99,4 +95,0 @@\n-            if (!elements.isUnnamed(element)) {\n-                throw new RuntimeException(\"Expected empty name for simple name of an unnamed variable, but got: \" +\n-                        element.getSimpleName());\n-            }\n@@ -131,20 +123,0 @@\n-\n-    private void expectNpe(java.util.function.BooleanSupplier bs) {\n-        try {\n-            bs.getAsBoolean();\n-            messager.printError(\"Did not get expected NPE\");\n-        } catch (NullPointerException npe) {\n-            ; \/\/ Expected\n-        }\n-    }\n-\n-    private void expectFalse(java.util.function.BooleanSupplier bs) {\n-        try {\n-            boolean result = bs.getAsBoolean();\n-            if (result) {\n-                messager.printError(\"Unexpected true result\");\n-            }\n-        } catch (NullPointerException npe) {\n-            messager.printError(\"Unexpected NPE thrown\");\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedVariableElement.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"}]}