{"files":[{"patch":"@@ -3556,0 +3556,3 @@\n+        if (!localDecl && result.name() == names.underscore) {\n+            log.error(DiagnosticFlag.SYNTAX, result.varPos(), Errors.UnderscoreAsIdentifier);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -9,1 +9,6 @@\n-    private int _; \/\/no fields\n+    private int _; \/\/ error\n+    private int _, x;  \/\/ error\n+    private int x, _, y, _, z, _;  \/\/ error\n+    private int _ = 0, _ = 1; \/\/ error\n+    private int a = 0, _ = 1; \/\/ error\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,15 +2,22 @@\n-UnnamedErrors.java:10:18: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:11:23: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:12:19: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:17:26: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:19:26: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:22:18: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:29:18: compiler.err.restricted.type.not.allowed.here: var\n-UnnamedErrors.java:29:22: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:72:18: compiler.err.underscore.as.identifier\n-UnnamedErrors.java:72:19: compiler.err.expected: token.identifier\n-UnnamedErrors.java:31:13: compiler.err.unconditional.pattern.and.default\n-UnnamedErrors.java:40:18: compiler.err.pattern.dominated\n-UnnamedErrors.java:49:29: compiler.err.flows.through.from.pattern\n-UnnamedErrors.java:56:29: compiler.err.flows.through.from.pattern\n-UnnamedErrors.java:63:32: compiler.err.flows.through.from.pattern\n+UnnamedErrors.java:10:17: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:11:20: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:11:26: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:11:32: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:12:17: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:12:24: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:13:24: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:15:18: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:16:23: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:17:19: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:22:26: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:24:26: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:27:18: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:34:18: compiler.err.restricted.type.not.allowed.here: var\n+UnnamedErrors.java:34:22: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:77:18: compiler.err.underscore.as.identifier\n+UnnamedErrors.java:77:19: compiler.err.expected: token.identifier\n+UnnamedErrors.java:36:13: compiler.err.unconditional.pattern.and.default\n+UnnamedErrors.java:45:18: compiler.err.pattern.dominated\n+UnnamedErrors.java:54:29: compiler.err.flows.through.from.pattern\n+UnnamedErrors.java:61:29: compiler.err.flows.through.from.pattern\n+UnnamedErrors.java:68:32: compiler.err.flows.through.from.pattern\n@@ -19,1 +26,1 @@\n-16 errors\n\\ No newline at end of file\n+23 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.out","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"}]}