{"files":[{"patch":"@@ -106,0 +106,4 @@\n+     * @implSpec\n+     * The default implementation of this method returns {@code\n+     * false}.\n+     *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/VariableElement.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -715,0 +715,4 @@\n+     * @implSpec\n+     * The default implementation of this method returns {@code\n+     * false}.\n+     *\n@@ -720,1 +724,1 @@\n-        return element.getSimpleName().isEmpty();\n+        return false;\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/AnyPatternTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,0 +212,1 @@\n+            case UNNAMED_VARIABLES -> true;\n@@ -215,1 +216,0 @@\n-            case UNNAMED_VARIABLES -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+@SuppressWarnings(\"preview\")\n@@ -722,0 +723,6 @@\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public boolean isUnnamed(Element element) {\n+        Symbol sym = (Symbol) element;\n+        return (sym.flags() & Flags.UNNAMED) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import javax.lang.model.util.Elements;\n@@ -47,0 +48,4 @@\n+            Elements vacuousElements = new VacuousElements();\n+            expectFalse( () -> vacuousElements.isUnnamed(null));\n+            expectNpe( () -> elements.isUnnamed(null));\n+\n@@ -111,0 +116,20 @@\n+\n+    private void expectNpe(java.util.function.BooleanSupplier bs) {\n+        try {\n+            bs.getAsBoolean();\n+            messager.printError(\"Did not get expected NPE\");\n+        } catch (NullPointerException npe) {\n+            ; \/\/ Expected\n+        }\n+    }\n+\n+    private void expectFalse(java.util.function.BooleanSupplier bs) {\n+        try {\n+            boolean result = bs.getAsBoolean();\n+            if (result) {\n+                messager.printError(\"Unexpected true result\");\n+            }\n+        } catch (NullPointerException npe) {\n+            messager.printError(\"Unexpected NPE thrown\");\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedVariableElement.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}