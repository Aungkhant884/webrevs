{"files":[{"patch":"@@ -2072,1 +2072,1 @@\n-            if (param.vartype != null && param.name != names.empty) {\n+            if (param.vartype != null && param.name != names.error) {\n@@ -2079,2 +2079,2 @@\n-            if (param.vartype == null && param.name != names.empty ||\n-                param.vartype != null && param.name == names.empty) {\n+            if (param.vartype == null && param.name != names.error ||\n+                param.vartype != null && param.name == names.error) {\n@@ -3642,0 +3642,8 @@\n+\n+        if (Feature.UNNAMED_VARIABLES.allowedInSource(source) && name == names.empty\n+                && localDecl\n+                && init == null\n+                && token.kind != COLON) { \/\/ if its unnamed local variable, it needs to have an init unless in enhanced-for\n+            syntaxError(token.pos, Errors.Expected(EQ));\n+        }\n+\n@@ -3772,1 +3780,1 @@\n-            name = names.empty;\n+            name = names.error;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+            \"<error>:t\",\n@@ -161,0 +162,1 @@\n+            \"<error>:t\",\n@@ -170,0 +172,1 @@\n+            \"<error>:t\",\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+\n+        unnamedTest();\n@@ -90,1 +92,1 @@\n-        String[] strs = null;\n+        String[] strs = new String[] { \"str1\", \"str2\" };\n@@ -97,0 +99,10 @@\n+        TwoIntParams p3 = (int _, int b) -> {};\n+        TwoIntParams p4 = (int _, int _) -> {};\n+        TwoIntParamsIntRet p5 = (int _, int _) -> { return 1; };\n+\n+        p1.run(1, 2);\n+        p2.run(1, 2);\n+        p3.run(1, 2);\n+        p4.run(1, 2);\n+        p5.run(1, 2);\n+\n@@ -100,1 +112,1 @@\n-        for (int _ = 0, _ = 1; ;) {}\n+        for (int _ = 0, _ = 1, x = 1; x <= 1 ; x++) {}\n@@ -274,0 +286,6 @@\n+    interface TwoIntParams {\n+        public void run(int o1, int o2);\n+    }\n+    interface TwoIntParamsIntRet {\n+        public int run(int a, int b);\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/Unnamed.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -100,0 +100,9 @@\n+    void testUnderscoreWithoutInitializer() {\n+        int _;\n+        int x1 = 1, _, x2;\n+\n+        for (int x = 1, _; x<=1; x++) {\n+\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-UnnamedErrors.java:82:50: compiler.err.expected: ';'\n+UnnamedErrors.java:82:51: compiler.err.expected: =\n@@ -21,0 +21,3 @@\n+UnnamedErrors.java:101:14: compiler.err.expected: =\n+UnnamedErrors.java:102:22: compiler.err.expected: =\n+UnnamedErrors.java:104:26: compiler.err.expected: =\n@@ -27,1 +30,0 @@\n-UnnamedErrors.java:82:51: compiler.err.cant.resolve.location: kindname.class, when, , , (compiler.misc.location: kindname.class, UnnamedErrors, null)\n@@ -33,1 +35,1 @@\n-30 errors\n\\ No newline at end of file\n+32 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.out","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}