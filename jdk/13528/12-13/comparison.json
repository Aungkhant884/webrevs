{"files":[{"patch":"@@ -829,1 +829,1 @@\n-                    if (var.name == names.underscore) {\n+                    if (var.name == names.underscore && !allowVar) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,4 +47,5 @@\n-        assertEquals(1, test_multiple_expr(new Box<>(new R1())));\n-        assertEquals(1, test_unrolled_expr(new Box<>(new R1())));\n-        assertEquals(1, test_multiple_stat(new Box<>(new R1())));\n-        assertEquals(1, test_unrolled_stat(new Box<>(new R1())));\n+        assertEquals(1, testMultipleExpr(new Box<>(new R1())));\n+        assertEquals(1, testUnrolledExpr(new Box<>(new R1())));\n+        assertEquals(1, testMultipleStat(new Box<>(new R1())));\n+        assertEquals(1, testUnrolledStat(new Box<>(new R1())));\n+        assertEquals(2, testMixVarWithExplicit(new Box<>(new R2())));\n@@ -162,1 +163,1 @@\n-    int test_multiple_expr(Box<?> t) {\n+    int testMultipleExpr(Box<?> t) {\n@@ -169,1 +170,1 @@\n-    int test_unrolled_expr(Box<?> t) {\n+    int testUnrolledExpr(Box<?> t) {\n@@ -177,1 +178,1 @@\n-    int test_multiple_stat(Box<?> t) {\n+    int testMultipleStat(Box<?> t) {\n@@ -189,1 +190,1 @@\n-    int test_unrolled_stat(Box<?> t) {\n+    int testUnrolledStat(Box<?> t) {\n@@ -204,0 +205,16 @@\n+    int testMixVarWithExplicit(Box<?> t) {\n+        int success = -1;\n+        success = switch(t) {\n+            case Box(R1 _) : {\n+                yield 1;\n+            }\n+            case Box(R2 _), Box(var _) : {\n+                yield 2;\n+            }\n+            default : {\n+                yield -2;\n+            }\n+        };\n+        return success;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Unnamed.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    void dominance_error(Object o) {\n+    void dominanceError(Object o) {\n@@ -52,1 +52,1 @@\n-    void mixed_named_unnamed_error(Object o) {\n+    void mixedNamedUnnamedError(Object o) {\n@@ -80,1 +80,1 @@\n-    int guard_errors(Object o, int x1, int x2) {\n+    int guardErrors(Object o, int x1, int x2) {\n@@ -87,0 +87,13 @@\n+    int testMixVarWithExplicitDominanceError(Box<?> t) {\n+        int success = -1;\n+        success = switch(t) {\n+            case Box(var _), Box(R2 _) : {\n+                yield 1;\n+            }\n+            default : {\n+                yield -2;\n+            }\n+        };\n+        return success;\n+    }\n+\n@@ -92,0 +105,4 @@\n+    sealed abstract class Base permits R1, R2 { }\n+    final  class R1  extends Base { }\n+    final  class R2  extends Base { }\n+    record Box<T extends Base>(T content) { }\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-UnnamedErrors.java:82:56: compiler.err.already.defined: kindname.variable, x2, kindname.method, guard_errors(java.lang.Object,int,int)\n+UnnamedErrors.java:82:56: compiler.err.already.defined: kindname.variable, x2, kindname.method, guardErrors(java.lang.Object,int,int)\n@@ -31,0 +31,1 @@\n+UnnamedErrors.java:90:30: compiler.err.pattern.dominated\n@@ -33,1 +34,1 @@\n-30 errors\n\\ No newline at end of file\n+31 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/UnnamedErrors.out","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}