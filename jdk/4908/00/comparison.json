{"files":[{"patch":"@@ -601,0 +601,3 @@\n+  \/\/ simulate crash during compilation\n+  assert(_env->compile_id() != CICrashAt, \"just as planned\");\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2129,2 +2129,0 @@\n-  \/\/ simulate crash during compilation\n-  assert(task->compile_id() != CICrashAt, \"just as planned\");\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -478,0 +478,3 @@\n+  \/\/ simulate crash during compilation\n+  assert(_compile->compile_id() != CICrashAt, \"just as planned\");\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270925\n+ * @library \/ \/test\/lib\n+ * @summary testing of ciReplay with inlining\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      compiler.ciReplay.TestInlining\n+ *\/\n+\n+package compiler.ciReplay;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+import jdk.test.lib.Asserts;\n+\n+public class TestInlining extends CiReplayBase {\n+    public static void main(String args[]) {\n+        new TestInlining().runTest(false, TIERED_DISABLED_VM_OPTION);\n+    }\n+\n+    @Override\n+    public void testAction() {\n+        try {\n+            Path replayFilePath = Paths.get(REPLAY_FILE_NAME);\n+            List<String> replayContent = Files.readAllLines(replayFilePath);\n+            boolean found = false;\n+            for (int i = 0; i < replayContent.size(); i++) {\n+                String line = replayContent.get(i);\n+                if (line.startsWith(\"compile \")) {\n+                    StringTokenizer tokenizer = new StringTokenizer(line, \" \");\n+                    Asserts.assertEQ(tokenizer.nextToken(), \"compile\");\n+                    tokenizer.nextToken(); \/\/ class\n+                    tokenizer.nextToken(); \/\/ method\n+                    tokenizer.nextToken(); \/\/ signature\n+                    tokenizer.nextToken(); \/\/ bci\n+                    Asserts.assertEQ(tokenizer.nextToken(), \"4\"); \/\/ level\n+                    Asserts.assertEQ(tokenizer.nextToken(), \"inline\");\n+                    found = true;\n+                }\n+            }\n+            Asserts.assertEQ(found, true);\n+        } catch (IOException ioe) {\n+            throw new Error(\"Failed to read\/write replay data: \" + ioe, ioe);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestInlining.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}