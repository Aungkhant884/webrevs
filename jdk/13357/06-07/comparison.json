{"files":[{"patch":"@@ -54,2 +54,2 @@\n-    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template, \\\n-    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/OperatingSystemProps.java, \\\n+    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template, \\\n+    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/PlatformProps.java, \\\n@@ -59,0 +59,1 @@\n+        @@OPENJDK_TARGET_CPU_ENDIAN@@ => $(OPENJDK_TARGET_CPU_ENDIAN) ; \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * Each architecture has a matching {@code public static boolean isXXX()} method\n+ * Each architecture, except OTHER, has a matching {@code public static boolean isXXX()} method\n@@ -32,3 +32,2 @@\n- * The enum values correspond to architectures as named in the build system.\n- * See the values of `OPENJDK_TARGET_ARCH_OSARCH`.\n- * The order and ordinal values must match the values defined in OperatingSystemProps.java.template.\n+ * The values of `OPENJDK_TARGET_ARCH_OSARCH` from the build are mapped to the\n+ * architecture values.\n@@ -37,6 +36,7 @@\n-    X64(),        \/\/ Represents AMD64 and X86_64\n-    X86(),\n-    AARCH64(),\n-    RISCV64(),\n-    S390(),\n-    PPC64LE(),\n+    OTHER,      \/\/ An unknown architecture not specifically named\n+    X64,        \/\/ Represents AMD64 and X86_64\n+    X86,\n+    AARCH64,\n+    RISCV64,\n+    S390,\n+    PPC64,\n@@ -53,1 +53,1 @@\n-        return OperatingSystemProps.TARGET_ARCH_IS_X64;\n+        return PlatformProps.TARGET_ARCH_IS_X64;\n@@ -61,1 +61,1 @@\n-        return OperatingSystemProps.TARGET_ARCH_IS_X86;\n+        return PlatformProps.TARGET_ARCH_IS_X86;\n@@ -69,1 +69,1 @@\n-        return OperatingSystemProps.TARGET_ARCH_IS_RISCV64;\n+        return PlatformProps.TARGET_ARCH_IS_RISCV64;\n@@ -77,1 +77,1 @@\n-        return OperatingSystemProps.TARGET_ARCH_IS_S390;\n+        return PlatformProps.TARGET_ARCH_IS_S390;\n@@ -84,2 +84,2 @@\n-    public static boolean isPPC64LE() {\n-        return OperatingSystemProps.TARGET_ARCH_IS_PPC64LE;\n+    public static boolean isPPC64() {\n+        return PlatformProps.TARGET_ARCH_IS_PPC64;\n@@ -93,1 +93,1 @@\n-        return OperatingSystemProps.TARGET_ARCH_IS_AARCH64;\n+        return PlatformProps.TARGET_ARCH_IS_AARCH64;\n@@ -100,1 +100,1 @@\n-        return archValues[OperatingSystemProps.CURRENT_ARCH_ORDINAL];\n+        return PlatformProps.CURRENT_ARCH;\n@@ -108,1 +108,9 @@\n-        return OperatingSystemProps.TARGET_ARCH_BITS == 64;\n+        return PlatformProps.TARGET_ARCH_BITS == 64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is little-endian}\n+     *\/\n+    @ForceInline\n+    public static boolean isLittleEndian() {\n+        return PlatformProps.TARGET_ARCH_LITTLE_ENDIAN;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":27,"deletions":19,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.internal.util.OperatingSystemProps;\n+import jdk.internal.util.PlatformProps;\n@@ -83,3 +83,0 @@\n-    \/\/ Cache a copy of the array for lightweight indexing\n-    private static final OperatingSystem[] osValues = OperatingSystem.values();\n-\n@@ -91,1 +88,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_LINUX;\n+        return PlatformProps.TARGET_OS_IS_LINUX;\n@@ -99,1 +96,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_MACOSX;\n+        return PlatformProps.TARGET_OS_IS_MACOS;\n@@ -107,1 +104,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_WINDOWS;\n+        return PlatformProps.TARGET_OS_IS_WINDOWS;\n@@ -115,1 +112,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_AIX;\n+        return PlatformProps.TARGET_OS_IS_AIX;\n@@ -122,1 +119,1 @@\n-        return osValues[OperatingSystemProps.CURRENT_OS_ORDINAL];\n+        return PlatformProps.CURRENT_OS;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.util;\n-\n-\/**\n- * The corresponding source file is generated by GensrcMisc.gmk for java.base.\n- * @see OperatingSystem\n- * @see Architecture\n- *\/\n-class OperatingSystemProps {\n-\n-    \/\/ Unique integers named to match the build system naming of the build target\n-    \/\/ The values must match the ordinals of the respective enum\n-    private static final int TARGET_OS_linux   = 0;\n-    private static final int TARGET_OS_macosx  = 1;\n-    private static final int TARGET_OS_windows = 2;\n-    private static final int TARGET_OS_aix     = 3;\n-\n-    \/\/ Index\/ordinal of the current OperatingSystem enum as substituted by the build\n-    static final int CURRENT_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;\n-\n-    \/\/ Precomputed booleans for each Operating System\n-    static final boolean TARGET_OS_IS_LINUX   = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_linux;\n-    static final boolean TARGET_OS_IS_MACOSX  = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_macosx;\n-    static final boolean TARGET_OS_IS_WINDOWS = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_windows;\n-    static final boolean TARGET_OS_IS_AIX     = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_aix;\n-\n-    \/\/ Unique integers named to match the build system naming of the OPENJDK_TARGET_CPU\n-    \/\/ The values must match the ordinals of the Architecture enum\n-    private static final int TARGET_ARCH_x86_64   = 0;   \/\/ aka X64, AMD64\n-    private static final int TARGET_ARCH_x86      = 1;\n-    private static final int TARGET_ARCH_aarch64  = 2;\n-    private static final int TARGET_ARCH_riscv64  = 3;\n-    private static final int TARGET_ARCH_s390x    = 4;\n-    private static final int TARGET_ARCH_ppc64le  = 5;\n-\n-    \/\/ Index\/ordinal of the current Architecure enum as substituted by the build\n-    static final int CURRENT_ARCH_ORDINAL = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@;\n-\n-    \/\/ Architecture.is64Bit() uses this value\n-    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;\n-\n-    \/\/ Precomputed booleans for each Architecture, shared with jdk.internal.util.Architecture\n-    \/\/ The variables are named to match the Architecture value names, and the values are named to match the build variables.\n-    static final boolean TARGET_ARCH_IS_X64         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86_64;\n-    static final boolean TARGET_ARCH_IS_X86         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86;\n-    static final boolean TARGET_ARCH_IS_AARCH64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_aarch64;\n-    static final boolean TARGET_ARCH_IS_RISCV64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_riscv64;\n-    static final boolean TARGET_ARCH_IS_S390        = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_s390x;\n-    static final boolean TARGET_ARCH_IS_PPC64LE     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_ppc64le;\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import java.util.Locale;\n+\n+\/**\n+ * The corresponding source file is generated by GensrcMisc.gmk for java.base.\n+ * @see OperatingSystem\n+ * @see Architecture\n+ *\/\n+class PlatformProps {\n+\n+    \/\/ Index\/ordinal of the current OperatingSystem enum as substituted by the build\n+    static final OperatingSystem CURRENT_OS = initOS(\"@@OPENJDK_TARGET_OS@@\");\n+\n+    \/\/ Precomputed booleans for each Operating System\n+    static final boolean TARGET_OS_IS_LINUX   = \"@@OPENJDK_TARGET_OS@@\" == \"linux\";\n+    static final boolean TARGET_OS_IS_MACOS   = \"@@OPENJDK_TARGET_OS@@\" == \"macosx\";\n+    static final boolean TARGET_OS_IS_WINDOWS = \"@@OPENJDK_TARGET_OS@@\" == \"windows\";\n+    static final boolean TARGET_OS_IS_AIX     = \"@@OPENJDK_TARGET_OS@@\" == \"aix\";\n+\n+    \/**\n+     * Returns the OperatingSystem of the build.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized are throw an ExceptionInInitializerError with IllegalArgumentException.\n+     *\/\n+    private static OperatingSystem initOS(String osName) {\n+        String mapped = switch (osName) {\n+            case \"macosx\" -> \"macos\";\n+            default -> osName;\n+        };\n+        return OperatingSystem.valueOf(mapped.toUpperCase(Locale.ROOT));\n+    }\n+\n+    \/\/ The Architecture value for the current architecture\n+    static final Architecture CURRENT_ARCH = initArch(\"@@OPENJDK_TARGET_CPU@@\");\n+\n+    \/\/ Architecture.is64Bit() uses this value\n+    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;\n+\n+    \/\/ Architecture.isLittleEndian value from the build\n+    static final boolean TARGET_ARCH_LITTLE_ENDIAN = \"@@OPENJDK_TARGET_CPU_ENDIAN@@\" == \"little\";\n+\n+    \/\/ Precomputed booleans for each Architecture, shared with jdk.internal.util.Architecture\n+    \/\/ The variables are named to match the Architecture value names, and\n+    \/\/ the values are named to match the build variables.\n+    static final boolean TARGET_ARCH_IS_X64         = \"@@OPENJDK_TARGET_CPU@@\" == \"x86_64\";\n+    static final boolean TARGET_ARCH_IS_X86         = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n+    static final boolean TARGET_ARCH_IS_AARCH64     = \"@@OPENJDK_TARGET_CPU@@\" == \"aarch64\";\n+    static final boolean TARGET_ARCH_IS_RISCV64     = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n+    static final boolean TARGET_ARCH_IS_S390        = \"@@OPENJDK_TARGET_CPU@@\" == \"s390x\";\n+    static final boolean TARGET_ARCH_IS_PPC64       = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n+\n+    \/**\n+     * Returns the Architecture of the built architecture.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized are mapped to Architecture.OTHER.\n+     *\/\n+    private static Architecture initArch(String archName) {\n+        try {\n+            String mapped = switch (archName) {\n+                case \"x86_64\" -> \"x64\";\n+                case \"ppc64le\" -> \"ppc64\";\n+                case \"s390x\" -> \"s390\";\n+                default -> archName;\n+            };\n+            return Architecture.valueOf(mapped.toUpperCase(Locale.ROOT));\n+        } catch (IllegalArgumentException ile) {\n+            return Architecture.OTHER;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -286,2 +286,1 @@\n-        java.desktop,\n-        jdk.accessibility;\n+        java.desktop;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.util\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,2 +127,0 @@\n-import jdk.internal.util.Architecture;\n-\n@@ -169,1 +167,1 @@\n-        if (Architecture.isX86()) {\n+        if (System.getProperty(\"os.arch\").equals(\"x86\")) {\n","filename":"src\/jdk.accessibility\/windows\/classes\/com\/sun\/java\/accessibility\/internal\/AccessBridge.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import jdk.internal.util.Architecture;\n-\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/AttachProviderImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static jdk.internal.util.Architecture.OTHER;\n@@ -29,1 +30,1 @@\n-import static jdk.internal.util.Architecture.PPC64LE;\n+import static jdk.internal.util.Architecture.PPC64;\n@@ -67,2 +68,2 @@\n-            case \"ppc64le\" -> PPC64LE;  \/\/ unverified\n-            default    -> fail(\"Unknown os.arch: \" + osArch);\n+            case \"ppc64le\" -> PPC64;  \/\/ unverified\n+            default -> OTHER;\n@@ -84,1 +85,1 @@\n-                Arguments.of(PPC64LE, Architecture.isPPC64LE())\n+                Arguments.of(PPC64, Architecture.isPPC64())\n@@ -103,0 +104,1 @@\n+            case OTHER -> Architecture.is64bit();   \/\/ Always ok, expected value is unknown\n@@ -108,1 +110,1 @@\n-            case PPC64LE -> true;\n+            case PPC64 -> true;\n@@ -112,0 +114,18 @@\n+\n+    \/**\n+     * Test that Architecture.isLittleEndian() matches Architecture.current().\n+     *\/\n+    @Test\n+    public void isLittleEndianVsCurrent() {\n+        Architecture current = Architecture.current();\n+        boolean expectedEndian = switch (current) {\n+            case OTHER -> Architecture.isLittleEndian();   \/\/ Always ok, expected value is unknown\n+            case X64 -> true;\n+            case X86 -> true;\n+            case AARCH64 -> true;\n+            case RISCV64 -> true;\n+            case S390 -> false;\n+            case PPC64 -> true;\n+        };\n+        assertEquals(Architecture.isLittleEndian(), expectedEndian, \"mismatch in isLittleEndian\");\n+    }\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}