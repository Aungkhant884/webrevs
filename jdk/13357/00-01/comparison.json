{"files":[{"patch":"@@ -58,1 +58,2 @@\n-        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_CPU), \\\n+        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_CPU) ; \\\n+        @@OPENJDK_TARGET_CPU_BITS@@ => $(OPENJDK_TARGET_CPU_BITS), \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        } else if (Architecture.isAarch64()) {\n+        } else if (Architecture.isAARCH64()) {\n@@ -63,1 +63,1 @@\n-        } else if (Architecture.isRiscv64()) {\n+        } else if (Architecture.isRISCV()) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.internal.vm.annotation.ForceInline;\n+\n@@ -34,8 +36,8 @@\n-    X64(true),        \/\/ Represents AMD64 and X86_64\n-    X86(false),\n-    IA64(true),\n-    ARM(false),\n-    AARCH64(true),\n-    RISCV64(true),\n-    S390X(true),\n-    PPC64LE(true),\n+    X64(),        \/\/ Represents AMD64 and X86_64\n+    X86(),\n+    IA64(),\n+    ARM(),\n+    AARCH64(),\n+    RISCV64(),\n+    S390X(),\n+    PPC64LE(),\n@@ -47,13 +49,0 @@\n-    \/**\n-     * 64-bit Architecture = true; false = 32-bit\/other.\n-     *\/\n-    private final boolean is64Bit;\n-\n-    \/**\n-     * Construct an Architecture enum.\n-     * @param is64Bit true if the architecture uses 64-bit addressing.\n-     *\/\n-    Architecture(boolean is64Bit) {\n-        this.is64Bit = is64Bit;\n-    }\n-\n@@ -63,0 +52,1 @@\n+    @ForceInline\n@@ -70,0 +60,1 @@\n+    @ForceInline\n@@ -77,0 +68,1 @@\n+    @ForceInline\n@@ -84,1 +76,2 @@\n-    public static boolean isArm() {\n+    @ForceInline\n+    public static boolean isARM() {\n@@ -91,1 +84,2 @@\n-    public static boolean isRiscv64() {\n+    @ForceInline\n+    public static boolean isRISCV() {\n@@ -98,0 +92,1 @@\n+    @ForceInline\n@@ -105,1 +100,2 @@\n-    public static boolean isPpc64le() {\n+    @ForceInline\n+    public static boolean isPPC64LE() {\n@@ -112,1 +108,2 @@\n-    public static boolean isAarch64() {\n+    @ForceInline\n+    public static boolean isAARCH64() {\n@@ -124,1 +121,1 @@\n-     * {@return true if the architecture uses 64-bit addressing}\n+     * {@return {@code true} if the current architecture is 64-bit}\n@@ -126,2 +123,3 @@\n-    public boolean is64Bit() {\n-        return is64Bit;\n+    @ForceInline\n+    public static boolean is64bit() {\n+        return OperatingSystemProps.TARGET_ARCH_BITS == 64;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    \/\/ Architecture.is64Bit() uses this value\n+    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n- * @summary Verify Architecture enum matches system property os.arch\n+ * @bug 8304915\n+ * @summary Verify Architecture enum maps to system property os.arch\n@@ -56,1 +57,1 @@\n-    public void arch_nameVsCurrent() {\n+    public void nameVsCurrent() {\n@@ -63,0 +64,1 @@\n+            case \"i386\" -> X86;\n@@ -84,3 +86,3 @@\n-                Arguments.of(ARM, Architecture.isArm()),\n-                Arguments.of(AARCH64, Architecture.isAarch64()),\n-                Arguments.of(RISCV64, Architecture.isRiscv64()),\n+                Arguments.of(ARM, Architecture.isARM()),\n+                Arguments.of(AARCH64, Architecture.isAARCH64()),\n+                Arguments.of(RISCV64, Architecture.isRISCV()),\n@@ -88,1 +90,1 @@\n-                Arguments.of(PPC64LE, Architecture.isPpc64le())\n+                Arguments.of(PPC64LE, Architecture.isPPC64LE())\n@@ -99,0 +101,19 @@\n+\n+    \/**\n+     * Test that Architecture.is64bit() matches Architecture.current().\n+     *\/\n+    @Test\n+    public void is64BitVsCurrent() {\n+        Architecture current = Architecture.current();\n+        boolean expected64Bit = switch (current) {\n+            case X64 -> true;\n+            case X86 -> false;\n+            case IA64 -> true;\n+            case ARM -> true;\n+            case AARCH64 -> true;\n+            case RISCV64 -> true;\n+            case S390X -> true;\n+            case PPC64LE -> true;\n+        };\n+        assertEquals(Architecture.is64bit(), expected64Bit, \"mismatch in is64bit\");\n+    }\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"}]}