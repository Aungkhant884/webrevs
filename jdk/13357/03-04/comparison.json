{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.util.Architecture;\n@@ -30,0 +29,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -42,0 +42,1 @@\n+    private static final String ARCH;\n@@ -45,0 +46,1 @@\n+        ARCH = StaticProperty.osArch();\n@@ -48,1 +50,1 @@\n-        if (Architecture.isX64() && ADDRESS_SIZE == 64) {\n+        if ((ARCH.equals(\"amd64\") || ARCH.equals(\"x86_64\")) && ADDRESS_SIZE == 64) {\n@@ -54,1 +56,1 @@\n-        } else if (Architecture.isAARCH64()) {\n+        } else if (ARCH.equals(\"aarch64\")) {\n@@ -63,1 +65,1 @@\n-        } else if (Architecture.isRISCV64()) {\n+        } else if (ARCH.equals(\"riscv64\")) {\n@@ -80,1 +82,1 @@\n-                            \", \" + Architecture.current() + \", \" + ADDRESS_SIZE);\n+                            \", \" + ARCH + \", \" + ADDRESS_SIZE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -38,2 +39,0 @@\n-    IA64(),\n-    ARM(),\n@@ -42,1 +41,1 @@\n-    S390X(),\n+    S390(),\n@@ -47,1 +46,1 @@\n-    private static final Architecture[] archValues = Architecture.values();\n+    private static final @Stable Architecture[] archValues = Architecture.values();\n@@ -65,16 +64,0 @@\n-    \/**\n-     * {@return {@code true} if the current architecture is IA64}\n-     *\/\n-    @ForceInline\n-    public static boolean isIA64() {\n-        return OperatingSystemProps.TARGET_ARCH_IS_IA64;\n-    }\n-\n-    \/**\n-     * {@return {@code true} if the current architecture is Arm}\n-     *\/\n-    @ForceInline\n-    public static boolean isARM() {\n-        return OperatingSystemProps.TARGET_ARCH_IS_ARM;\n-    }\n-\n@@ -90,1 +73,1 @@\n-     * {@return {@code true} if the current architecture is S390X}\n+     * {@return {@code true} if the current architecture is S390}\n@@ -93,2 +76,2 @@\n-    public static boolean isS390X() {\n-        return OperatingSystemProps.TARGET_ARCH_IS_S390X;\n+    public static boolean isS390() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_S390;\n@@ -114,1 +97,1 @@\n-     * {@return return the current architecture}\n+     * {@return the current architecture}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":8,"deletions":25,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -52,6 +52,4 @@\n-    private static final int TARGET_ARCH_ia64     = 2;\n-    private static final int TARGET_ARCH_arm      = 3;\n-    private static final int TARGET_ARCH_aarch64  = 4;\n-    private static final int TARGET_ARCH_riscv64  = 5;\n-    private static final int TARGET_ARCH_s390x    = 6;\n-    private static final int TARGET_ARCH_ppc64le  = 7;\n+    private static final int TARGET_ARCH_aarch64  = 2;\n+    private static final int TARGET_ARCH_riscv64  = 3;\n+    private static final int TARGET_ARCH_s390x    = 4;\n+    private static final int TARGET_ARCH_ppc64le  = 5;\n@@ -65,1 +63,2 @@\n-    \/\/ Precomputed booleans for each Architecture, shared with Architecure\n+    \/\/ Precomputed booleans for each Architecture, shared with jdk.internal.util.Architecture\n+    \/\/ The variables are named to match the Architecture value names, and the values are named to match the build variables.\n@@ -68,2 +67,0 @@\n-    static final boolean TARGET_ARCH_IS_IA64        = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_ia64;\n-    static final boolean TARGET_ARCH_IS_ARM         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_arm;\n@@ -72,1 +69,1 @@\n-    static final boolean TARGET_ARCH_IS_S390X       = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_s390x;\n+    static final boolean TARGET_ARCH_IS_S390        = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_s390x;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @ignore architecture can not be overridden by setting os.arch - delete test\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static jdk.internal.util.Architecture.ARM;\n-import static jdk.internal.util.Architecture.IA64;\n@@ -33,1 +31,1 @@\n-import static jdk.internal.util.Architecture.S390X;\n+import static jdk.internal.util.Architecture.S390;\n@@ -66,2 +64,0 @@\n-            case \"ia64\" -> IA64;  \/\/ unverified\n-            case \"arm\" -> ARM;  \/\/ unverified\n@@ -70,1 +66,1 @@\n-            case \"s390x\" -> S390X;  \/\/ unverified\n+            case \"s390x\", \"s390\" -> S390;  \/\/ unverified\n@@ -85,2 +81,0 @@\n-                Arguments.of(IA64, Architecture.isIA64()),\n-                Arguments.of(ARM, Architecture.isARM()),\n@@ -89,1 +83,1 @@\n-                Arguments.of(S390X, Architecture.isS390X()),\n+                Arguments.of(S390, Architecture.isS390()),\n@@ -111,2 +105,0 @@\n-            case IA64 -> true;\n-            case ARM -> true;\n@@ -115,1 +107,1 @@\n-            case S390X -> true;\n+            case S390 -> true;\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"}]}