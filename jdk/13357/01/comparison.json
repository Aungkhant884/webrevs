{"files":[{"patch":"@@ -57,1 +57,3 @@\n-        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS), \\\n+        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS) ; \\\n+        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_CPU) ; \\\n+        @@OPENJDK_TARGET_CPU_BITS@@ => $(OPENJDK_TARGET_CPU_BITS), \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.util.Architecture;\n@@ -29,1 +30,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -42,1 +42,0 @@\n-    private static final String ARCH;\n@@ -46,1 +45,0 @@\n-        ARCH = StaticProperty.osArch();\n@@ -50,1 +48,1 @@\n-        if ((ARCH.equals(\"amd64\") || ARCH.equals(\"x86_64\")) && ADDRESS_SIZE == 64) {\n+        if (Architecture.isX64() && ADDRESS_SIZE == 64) {\n@@ -56,1 +54,1 @@\n-        } else if (ARCH.equals(\"aarch64\")) {\n+        } else if (Architecture.isAARCH64()) {\n@@ -65,1 +63,1 @@\n-        } else if (ARCH.equals(\"riscv64\")) {\n+        } else if (Architecture.isRISCV()) {\n@@ -82,1 +80,1 @@\n-                            \", \" + ARCH + \", \" + ADDRESS_SIZE);\n+                            \", \" + Architecture.current() + \", \" + ADDRESS_SIZE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+\/**\n+ * System architecture enum values.\n+ * Each architecture has a matching {@code public static boolean isXXX()} method\n+ * that is true when running on that architecture.\n+ * The enum values correspond to architectures as named in the build system.\n+ * See the values of `OPENJDK_TARGET_ARCH_OSARCH`.\n+ * The order and ordinal values must match the values defined in OperatingSystemProps.java.template.\n+ *\/\n+public enum Architecture {\n+    X64(),        \/\/ Represents AMD64 and X86_64\n+    X86(),\n+    IA64(),\n+    ARM(),\n+    AARCH64(),\n+    RISCV64(),\n+    S390X(),\n+    PPC64LE(),\n+    ;\n+\n+    \/\/ Cache a copy of the array for lightweight indexing\n+    private static final Architecture[] archValues = Architecture.values();\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is X64, Aka amd64}\n+     *\/\n+    @ForceInline\n+    public static boolean isX64() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_X64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is X86}\n+     *\/\n+    @ForceInline\n+    public static boolean isX86() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_X86;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is IA64}\n+     *\/\n+    @ForceInline\n+    public static boolean isIA64() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_IA64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is Arm}\n+     *\/\n+    @ForceInline\n+    public static boolean isARM() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_ARM;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is RISCV64}\n+     *\/\n+    @ForceInline\n+    public static boolean isRISCV() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_RISCV64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is S390X}\n+     *\/\n+    @ForceInline\n+    public static boolean isS390X() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_S390X;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is PPC64LE}\n+     *\/\n+    @ForceInline\n+    public static boolean isPPC64LE() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_PPC64LE;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is AARCH64}\n+     *\/\n+    @ForceInline\n+    public static boolean isAARCH64() {\n+        return OperatingSystemProps.TARGET_ARCH_IS_AARCH64;\n+    }\n+\n+    \/**\n+     * {@return return the current architecture}\n+     *\/\n+    public static Architecture current() {\n+        return archValues[OperatingSystemProps.CURRENT_ARCH_ORDINAL];\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is 64-bit}\n+     *\/\n+    @ForceInline\n+    public static boolean is64bit() {\n+        return OperatingSystemProps.TARGET_ARCH_BITS == 64;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+ * @see Architecture\n@@ -46,0 +47,27 @@\n+\n+    \/\/ Unique integers named to match the build system naming of the OPENJDK_TARGET_CPU\n+    \/\/ The values must match the ordinals of the Architecture enum\n+    private static final int TARGET_ARCH_x86_64   = 0;   \/\/ aka X64, AMD64\n+    private static final int TARGET_ARCH_x86      = 1;\n+    private static final int TARGET_ARCH_ia64     = 2;\n+    private static final int TARGET_ARCH_arm      = 3;\n+    private static final int TARGET_ARCH_aarch64  = 4;\n+    private static final int TARGET_ARCH_riscv64  = 5;\n+    private static final int TARGET_ARCH_s390x    = 6;\n+    private static final int TARGET_ARCH_ppc64le  = 7;\n+\n+    \/\/ Index\/ordinal of the current Architecure enum as substituted by the build\n+    static final int CURRENT_ARCH_ORDINAL = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@;\n+\n+    \/\/ Architecture.is64Bit() uses this value\n+    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;\n+\n+    \/\/ Precomputed booleans for each Architecture, shared with Architecure\n+    static final boolean TARGET_ARCH_IS_X64         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86_64;\n+    static final boolean TARGET_ARCH_IS_X86         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86;\n+    static final boolean TARGET_ARCH_IS_IA64        = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_ia64;\n+    static final boolean TARGET_ARCH_IS_ARM         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_arm;\n+    static final boolean TARGET_ARCH_IS_AARCH64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_aarch64;\n+    static final boolean TARGET_ARCH_IS_RISCV64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_riscv64;\n+    static final boolean TARGET_ARCH_IS_S390X       = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_s390x;\n+    static final boolean TARGET_ARCH_IS_PPC64LE     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_ppc64le;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -286,1 +286,3 @@\n-        java.desktop;\n+        java.desktop,\n+        jdk.accessibility,\n+        jdk.attach;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.util\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,0 +127,2 @@\n+import jdk.internal.util.Architecture;\n+\n@@ -167,1 +169,1 @@\n-        if (System.getProperty(\"os.arch\").equals(\"x86\")) {\n+        if (Architecture.isX86()) {\n","filename":"src\/jdk.accessibility\/windows\/classes\/com\/sun\/java\/accessibility\/internal\/AccessBridge.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import jdk.internal.util.Architecture;\n+\n@@ -45,2 +47,3 @@\n-        String arch = System.getProperty(\"os.arch\");\n-        if (!arch.equals(\"x86\") && !arch.equals(\"amd64\") && !arch.equals(\"aarch64\")) {\n+        if (!Architecture.isX86() &&\n+            !Architecture.isX64() &&\n+            !Architecture.isAarch64()) {\n@@ -48,1 +51,1 @@\n-                \"This provider is not supported on this processor architecture\");\n+                \"This provider is not supported on this processor architecture: \" + Architecture.current());\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/AttachProviderImpl.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @ignore architecture can not be overridden by setting os.arch - delete test\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.Architecture;\n+\n+import static jdk.internal.util.Architecture.AARCH64;\n+import static jdk.internal.util.Architecture.ARM;\n+import static jdk.internal.util.Architecture.IA64;\n+import static jdk.internal.util.Architecture.PPC64LE;\n+import static jdk.internal.util.Architecture.RISCV64;\n+import static jdk.internal.util.Architecture.S390X;\n+import static jdk.internal.util.Architecture.X64;\n+import static jdk.internal.util.Architecture.X86;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @bug 8304915\n+ * @summary Verify Architecture enum maps to system property os.arch\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit ArchTest\n+ *\/\n+public class ArchTest {\n+    \/**\n+     * Test consistency of System property \"os.arch\" with Architecture.current().\n+     *\/\n+    @Test\n+    public void nameVsCurrent() {\n+        String osArch = System.getProperty(\"os.arch\").toLowerCase(Locale.ROOT);\n+        System.out.printf(\"System property os.arch: \\\"%s\\\", Architecture.current(): \\\"%s\\\"%n\",\n+                osArch, Architecture.current());\n+        Architecture arch = switch (osArch) {\n+            case \"x86_64\" -> X64;\n+            case \"x86\" -> X86;\n+            case \"i386\" -> X86;\n+            case \"amd64\" -> X64;  \/\/ Is alias for X86_64\n+            case \"ia64\" -> IA64;  \/\/ unverified\n+            case \"arm\" -> ARM;  \/\/ unverified\n+            case \"aarch64\" -> AARCH64;\n+            case \"riscv64\" -> RISCV64;  \/\/ unverified\n+            case \"s390x\" -> S390X;  \/\/ unverified\n+            case \"ppc64le\" -> PPC64LE;  \/\/ unverified\n+            default    -> fail(\"Unknown os.arch: \" + osArch);\n+        };\n+        assertEquals(Architecture.current(), arch, \"mismatch in Architecture.current vs \" + osArch);\n+    }\n+\n+    \/**\n+     * Test various Architecture enum values vs boolean isXXX() methods.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> archParams() {\n+        return Stream.of(\n+                Arguments.of(X64, Architecture.isX64()),\n+                Arguments.of(X86, Architecture.isX86()),\n+                Arguments.of(IA64, Architecture.isIA64()),\n+                Arguments.of(ARM, Architecture.isARM()),\n+                Arguments.of(AARCH64, Architecture.isAARCH64()),\n+                Arguments.of(RISCV64, Architecture.isRISCV()),\n+                Arguments.of(S390X, Architecture.isS390X()),\n+                Arguments.of(PPC64LE, Architecture.isPPC64LE())\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"archParams\")\n+    public void isArch(Architecture arch, boolean isArch) {\n+        Architecture current = Architecture.current();\n+        assertEquals(arch == current, isArch,\n+                \"Mismatch \" + arch + \" == \" + current + \" vs is\" + arch);\n+    }\n+\n+    \/**\n+     * Test that Architecture.is64bit() matches Architecture.current().\n+     *\/\n+    @Test\n+    public void is64BitVsCurrent() {\n+        Architecture current = Architecture.current();\n+        boolean expected64Bit = switch (current) {\n+            case X64 -> true;\n+            case X86 -> false;\n+            case IA64 -> true;\n+            case ARM -> true;\n+            case AARCH64 -> true;\n+            case RISCV64 -> true;\n+            case S390X -> true;\n+            case PPC64LE -> true;\n+        };\n+        assertEquals(Architecture.is64bit(), expected64Bit, \"mismatch in is64bit\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}