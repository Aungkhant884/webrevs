{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Locale;\n@@ -44,0 +45,2 @@\n+    private static Architecture CURRENT_ARCH = initArch(PlatformProps.CURRENT_ARCH_STRING);\n+\n@@ -96,1 +99,1 @@\n-        return PlatformProps.CURRENT_ARCH;\n+        return CURRENT_ARCH;\n@@ -114,0 +117,14 @@\n+\n+\n+    \/**\n+     * Returns the Architecture of the built architecture.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized are mapped to Architecture.OTHER.\n+     *\/\n+    private static Architecture initArch(String archName) {\n+        try {\n+            return Architecture.valueOf(archName.toUpperCase(Locale.ROOT));\n+        } catch (IllegalArgumentException ile) {\n+            return Architecture.OTHER;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Locale;\n+\n@@ -83,0 +85,2 @@\n+    private static final OperatingSystem CURRENT_OS = initOS(PlatformProps.CURRENT_OS_STRING);\n+\n@@ -119,1 +123,1 @@\n-        return PlatformProps.CURRENT_OS;\n+        return CURRENT_OS;\n@@ -121,0 +125,10 @@\n+\n+    \/**\n+     * Returns the OperatingSystem of the build.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized throw an ExceptionInInitializerError with IllegalArgumentException.\n+     *\/\n+    private static OperatingSystem initOS(String osName) {\n+        return OperatingSystem.valueOf(osName.toUpperCase(Locale.ROOT));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,1 +35,9 @@\n-    static final OperatingSystem CURRENT_OS = initOS(\"@@OPENJDK_TARGET_OS@@\");\n+    static final String CURRENT_OS_STRING = mapOSString(\"@@OPENJDK_TARGET_OS@@\");\n+\n+    \/\/ Map the build time OS name to the known values of OperatingSystem enum.\n+    private static String mapOSString(String osName) {\n+        return switch (osName) {\n+            case \"macosx\" -> \"macos\";\n+            default -> osName;\n+        };\n+    }\n@@ -43,9 +51,10 @@\n-    \/**\n-     * Returns the OperatingSystem of the build.\n-     * Build time names are mapped to respective uppercase enum values.\n-     * Names not recognized are throw an ExceptionInInitializerError with IllegalArgumentException.\n-     *\/\n-    private static OperatingSystem initOS(String osName) {\n-        String mapped = switch (osName) {\n-            case \"macosx\" -> \"macos\";\n-            default -> osName;\n+    \/\/ The Architecture value for the current architecture\n+    static final String CURRENT_ARCH_STRING = mapArchString(\"@@OPENJDK_TARGET_CPU@@\");\n+\n+    \/\/ Map the build time arch name to the well known values.\n+    private static String mapArchString(String archName) {\n+        return switch (archName) {\n+            case \"x86_64\" -> \"x64\";\n+            case \"ppc64le\" -> \"ppc64\";\n+            case \"s390x\" -> \"s390\";\n+            default -> archName;\n@@ -53,1 +62,0 @@\n-        return OperatingSystem.valueOf(mapped.toUpperCase(Locale.ROOT));\n@@ -56,3 +64,0 @@\n-    \/\/ The Architecture value for the current architecture\n-    static final Architecture CURRENT_ARCH = initArch(\"@@OPENJDK_TARGET_CPU@@\");\n-\n@@ -74,19 +79,0 @@\n-\n-    \/**\n-     * Returns the Architecture of the built architecture.\n-     * Build time names are mapped to respective uppercase enum values.\n-     * Names not recognized are mapped to Architecture.OTHER.\n-     *\/\n-    private static Architecture initArch(String archName) {\n-        try {\n-            String mapped = switch (archName) {\n-                case \"x86_64\" -> \"x64\";\n-                case \"ppc64le\" -> \"ppc64\";\n-                case \"s390x\" -> \"s390\";\n-                default -> archName;\n-            };\n-            return Architecture.valueOf(mapped.toUpperCase(Locale.ROOT));\n-        } catch (IllegalArgumentException ile) {\n-            return Architecture.OTHER;\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template","additions":19,"deletions":33,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -49,0 +50,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -52,0 +54,4 @@\n+    private static boolean IS_BIG_ENDIAN = Unsafe.getUnsafe().isBigEndian();\n+\n+    private static boolean IS_64BIT_ADDRESS = Unsafe.getUnsafe().addressSize() == 8;\n+\n@@ -98,1 +104,1 @@\n-     * Test that Architecture.is64bit() matches Architecture.current().\n+     * Test that Architecture.is64bit() matches Unsafe.addressSize() == 8.\n@@ -102,11 +108,2 @@\n-        Architecture current = Architecture.current();\n-        boolean expected64Bit = switch (current) {\n-            case OTHER -> Architecture.is64bit();   \/\/ Always ok, expected value is unknown\n-            case X64 -> true;\n-            case X86 -> false;\n-            case AARCH64 -> true;\n-            case RISCV64 -> true;\n-            case S390 -> true;\n-            case PPC64 -> true;\n-        };\n-        assertEquals(Architecture.is64bit(), expected64Bit, \"mismatch in is64bit\");\n+        assertEquals(Architecture.is64bit(), IS_64BIT_ADDRESS,\n+                \"Architecture.is64bit() does not match UNSAFE.addressSize() == 8\");\n@@ -116,1 +113,1 @@\n-     * Test that Architecture.isLittleEndian() matches Architecture.current().\n+     * Test that Architecture.isLittleEndian() == !Unsafe.isBigEndian().\n@@ -120,11 +117,2 @@\n-        Architecture current = Architecture.current();\n-        boolean expectedEndian = switch (current) {\n-            case OTHER -> Architecture.isLittleEndian();   \/\/ Always ok, expected value is unknown\n-            case X64 -> true;\n-            case X86 -> true;\n-            case AARCH64 -> true;\n-            case RISCV64 -> true;\n-            case S390 -> false;\n-            case PPC64 -> true;\n-        };\n-        assertEquals(Architecture.isLittleEndian(), expectedEndian, \"mismatch in isLittleEndian\");\n+        assertEquals(Architecture.isLittleEndian(), !IS_BIG_ENDIAN,\n+                \"isLittleEndian does not match UNSAFE.isBigEndian()\");\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"}]}