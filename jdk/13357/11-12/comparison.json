{"files":[{"patch":"@@ -53,0 +53,19 @@\n+\n+# Normalize OPENJDK_TARGET_CPU name to match jdk.internal.util.Architecture enum\n+ifneq ($(filter $(OPENJDK_TARGET_CPU), ppc64le), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = ppc64\n+else ifneq ($(filter $(OPENJDK_TARGET_CPU), s390x), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = s390\n+else ifneq ($(filter $(OPENJDK_TARGET_CPU), x86_64 amd64), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = x64\n+else\n+  OPENJDK_TARGET_ARCH_CANONICAL := $(OPENJDK_TARGET_CPU)\n+endif\n+\n+# Normalize OPENJDK_TARGET_OS operating system name to match jdk.internal.util.OperatingSystem enum\n+ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  OPENJDK_TARGET_OS_CANONICAL = macos\n+else\n+  OPENJDK_TARGET_OS_CANONICAL := $(OPENJDK_TARGET_OS)\n+endif\n+\n@@ -57,2 +76,2 @@\n-        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS) ; \\\n-        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_CPU) ; \\\n+        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS_CANONICAL) ; \\\n+        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_ARCH_CANONICAL) ; \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * The values of `OPENJDK_TARGET_ARCH_OSARCH` from the build are mapped to the\n+ * The values of `OPENJDK_TARGET_CPU` from the build are mapped to the\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-     * Names not recognized throw an ExceptionInInitializerError with IllegalArgumentException.\n+     * Names not recognized throw ExceptionInInitializerError with IllegalArgumentException.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.util.Locale;\n-\n@@ -34,10 +32,2 @@\n-    \/\/ Index\/ordinal of the current OperatingSystem enum as substituted by the build\n-    static final String CURRENT_OS_STRING = mapOSString(\"@@OPENJDK_TARGET_OS@@\");\n-\n-    \/\/ Map the build time OS name to the known values of OperatingSystem enum.\n-    private static String mapOSString(String osName) {\n-        return switch (osName) {\n-            case \"macosx\" -> \"macos\";\n-            default -> osName;\n-        };\n-    }\n+    \/\/ Name of the current OperatingSystem enum as substituted by the build\n+    static final String CURRENT_OS_STRING = \"@@OPENJDK_TARGET_OS@@\";\n@@ -47,1 +37,1 @@\n-    static final boolean TARGET_OS_IS_MACOS   = \"@@OPENJDK_TARGET_OS@@\" == \"macosx\";\n+    static final boolean TARGET_OS_IS_MACOS   = \"@@OPENJDK_TARGET_OS@@\" == \"macos\";\n@@ -52,11 +42,1 @@\n-    static final String CURRENT_ARCH_STRING = mapArchString(\"@@OPENJDK_TARGET_CPU@@\");\n-\n-    \/\/ Map the build time arch name to the well known values.\n-    private static String mapArchString(String archName) {\n-        return switch (archName) {\n-            case \"x86_64\" -> \"x64\";\n-            case \"ppc64le\" -> \"ppc64\";\n-            case \"s390x\" -> \"s390\";\n-            default -> archName;\n-        };\n-    }\n+    static final String CURRENT_ARCH_STRING = \"@@OPENJDK_TARGET_CPU@@\";\n@@ -72,7 +52,7 @@\n-    \/\/ the values are named to match the build variables.\n-    static final boolean TARGET_ARCH_IS_X64         = \"@@OPENJDK_TARGET_CPU@@\" == \"x86_64\";\n-    static final boolean TARGET_ARCH_IS_X86         = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n-    static final boolean TARGET_ARCH_IS_AARCH64     = \"@@OPENJDK_TARGET_CPU@@\" == \"aarch64\";\n-    static final boolean TARGET_ARCH_IS_RISCV64     = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n-    static final boolean TARGET_ARCH_IS_S390        = \"@@OPENJDK_TARGET_CPU@@\" == \"s390x\";\n-    static final boolean TARGET_ARCH_IS_PPC64       = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n+    \/\/ the values chosen to match the build values.\n+    static final boolean TARGET_ARCH_IS_X64     = \"@@OPENJDK_TARGET_CPU@@\" == \"x64\";\n+    static final boolean TARGET_ARCH_IS_X86     = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n+    static final boolean TARGET_ARCH_IS_AARCH64 = \"@@OPENJDK_TARGET_CPU@@\" == \"aarch64\";\n+    static final boolean TARGET_ARCH_IS_RISCV64 = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n+    static final boolean TARGET_ARCH_IS_S390    = \"@@OPENJDK_TARGET_CPU@@\" == \"s390\";\n+    static final boolean TARGET_ARCH_IS_PPC64   = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template","additions":11,"deletions":31,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -67,4 +67,2 @@\n-            case \"x86_64\" -> X64;\n-            case \"x86\" -> X86;\n-            case \"i386\" -> X86;\n-            case \"amd64\" -> X64;  \/\/ Is alias for X86_64\n+            case \"x86_64\", \"amd64\" -> X64;\n+            case \"x86\", \"i386\" -> X86;\n@@ -74,1 +72,1 @@\n-            case \"ppc64\", \"ppc64le\" -> PPC64;  \/\/ unverified\n+            case \"ppc64\", \"ppc64le\" -> PPC64;\n@@ -100,1 +98,1 @@\n-                \"Mismatch \" + arch + \" == \" + current + \" vs is\" + arch);\n+                \"Method is\" + arch + \"(): returned \" + isArch + \", should be (\" + arch + \" == \" + current + \")\");\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}