{"files":[{"patch":"@@ -2580,0 +2580,2 @@\n+        boolean previewClassFile =\n+                minorVersion == ClassFile.PREVIEW_MINOR_VERSION;\n@@ -2583,1 +2585,1 @@\n-            if (majorVersion == (maxMajor + 1))\n+            if (majorVersion == (maxMajor + 1) && !previewClassFile)\n@@ -2595,1 +2597,1 @@\n-        if (minorVersion == ClassFile.PREVIEW_MINOR_VERSION) {\n+        if (previewClassFile) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8231599\n+ * @summary Verify javac does not crash on preview classfiles from the future\n+            Java versions.\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.jvm\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TooNewMajorVersionTest\n+ *\/\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import com.sun.tools.javac.jvm.ClassFile.Version;\n+\n+import java.io.RandomAccessFile;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+public class TooNewMajorVersionTest extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    TooNewMajorVersionTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        TooNewMajorVersionTest t = new TooNewMajorVersionTest();\n+        t.runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void brokenMajorVersionWithPreview(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                               class C {\n+                                   private Object o = null;\n+                                   private boolean b = o instanceof String s;\n+                               }\n+                               \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        for (int upgrade = 1; upgrade < 3; upgrade++) {\n+            new JavacTask(tb)\n+                    .outdir(classes)\n+                    .options(\"-XDforcePreview\",\n+                             \"--enable-preview\",\n+                             \"--release\", String.valueOf(Runtime.version().feature()))\n+                    .files(tb.findJavaFiles(src))\n+                    .run()\n+                    .writeAll();\n+\n+            Path classfile = classes.resolve(\"C.class\");\n+            int wrongMajor;\n+\n+            try (RandomAccessFile f = new RandomAccessFile(classfile.toFile(), \"rw\")) {\n+                f.readInt();\n+                short minor = f.readShort();\n+                if (minor != (-1)) {\n+                    throw new AssertionError(\"Unexpected minor version: \" + minor);\n+                }\n+                long point = f.getFilePointer();\n+                short major = f.readShort();\n+                f.seek(point);\n+                f.writeShort(wrongMajor = major + upgrade);\n+            }\n+\n+            Path test = base.resolve(\"test\");\n+            tb.writeJavaFiles(test, \"class Test extends C {}\");\n+            Path testClasses = base.resolve(\"classes\");\n+\n+            Files.createDirectories(testClasses);\n+\n+            for (String extraOption : new String[] {\"-XDignored\", \"--enable-preview\"}) {\n+                List<String> log = new JavacTask(tb)\n+                        .outdir(testClasses)\n+                        .options(\"-XDrawDiagnostics\",\n+                                 \"-classpath\", classes.toString(),\n+                                 \"--release\", String.valueOf(Runtime.version().feature()),\n+                                 extraOption)\n+                        .files(tb.findJavaFiles(test))\n+                        .run(Task.Expect.FAIL)\n+                        .writeAll()\n+                        .getOutputLines(Task.OutputKind.DIRECT);\n+                List<String> expected = List.of(\n+                        \"Test.java:1:20: compiler.err.cant.access: C, (compiler.misc.bad.class.file.header: C.class, (compiler.misc.wrong.version: \" + wrongMajor + \", 65535, \" + Version.MAX().major + \", 0))\",\n+                        \"1 error\"\n+                );\n+                if (!log.equals(expected))\n+                    throw new Exception(\"expected output not found\" + log);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/preview\/classReaderTest\/TooNewMajorVersionTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}