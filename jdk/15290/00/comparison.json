{"files":[{"patch":"@@ -2082,0 +2082,1 @@\n+  const Node* parse_predicate_uncommon_trap = predicate_block->parse_predicate()->uncommon_trap();\n@@ -2085,0 +2086,5 @@\n+    ProjNode* uncommon_proj = iff->proj_out(1 - next_regular_predicate_proj->as_Proj()->_con);\n+    if (uncommon_proj->unique_ctrl_out() != parse_predicate_uncommon_trap) {\n+      \/\/ Does not belong to this Predicate Block anymore.\n+      break;\n+    }\n@@ -2087,1 +2093,0 @@\n-      ProjNode* uncommon_proj = iff->proj_out(1 - next_regular_predicate_proj->as_Proj()->_con);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314233\n+ * @requires vm.compiler2.enabled\n+ * @summary Test that loop peeling does not treat unrelated Opaque4 node as Template Assertion Predicate.\n+ * @run main\/othervm -Xbatch -XX:LoopMaxUnroll=0\n+ *                   -XX:CompileCommand=compileonly,compiler.predicates.TestPeelingFindsUnrelatedOpaque4Node::*\n+ *                   -XX:CompileCommand=inline,*String::* compiler.predicates.TestPeelingFindsUnrelatedOpaque4Node\n+ *\/\n+\n+package compiler.predicates;\n+\n+public class TestPeelingFindsUnrelatedOpaque4Node {\n+    static int iFld;\n+    static boolean flag;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 1000; i++) {\n+            test();\n+            flag = !flag;\n+        }\n+    }\n+\n+    static void test() {\n+        String s = flag ? \"34323653\" : \"343423\";\n+        s.contains(\"343\");\n+        \/\/ Inlined and will call StringLatin1.indexOf intrinsics which emits Opaque4 node which will be wrongly\n+        \/\/ found as Template Assertion Predicate when trying to initialize them which triggers the assert.\n+        s.contains(\"3442\");\n+\n+        for (int i = 0; i < 100; i++) {\n+            if (flag) { \/\/ Triggers peeling\n+                return;\n+            }\n+            iFld = 34;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestPeelingFindsUnrelatedOpaque4Node.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}