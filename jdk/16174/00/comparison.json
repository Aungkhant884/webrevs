{"files":[{"patch":"@@ -264,1 +264,1 @@\n-            if (root.getRefererId() == thread.getId()) {\n+            if (root.getReferrerId() == thread.getId()) {\n@@ -289,1 +289,1 @@\n-        JavaHeapObject referrer = root.getReferer();\n+        JavaHeapObject referrer = root.getReferrer();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/HeapDump\/VThreadInHeapDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,3 +56,3 @@\n-    \/\/ referers and referersLen go through two phases:  Building and\n-    \/\/ resolved.  When building, referers might have duplicates, but can\n-    \/\/ be appended to.  When resolved, referers has no duplicates or\n+    \/\/ referrers and referrersLen go through two phases:  Building and\n+    \/\/ resolved.  When building, referrers might have duplicates, but can\n+    \/\/ be appended to.  When resolved, referrers has no duplicates or\n@@ -61,2 +61,2 @@\n-    private JavaThing[] referers = null;\n-    private int referersLen = 0;        \/\/ -1 when resolved\n+    private JavaThing[] referrers = null;\n+    private int referrersLen = 0;        \/\/ -1 when resolved\n@@ -80,1 +80,1 @@\n-    \/\/  Eliminate duplicates from referers, and size the array exactly.\n+    \/\/ Eliminate duplicates from referrers, and size the array exactly.\n@@ -82,1 +82,1 @@\n-    \/\/ referers data member for details.\n+    \/\/ referrers data member for details.\n@@ -84,3 +84,3 @@\n-    void setupReferers() {\n-        if (referersLen > 1) {\n-            \/\/ Copy referers to map, screening out duplicates\n+    void setupReferrers() {\n+        if (referrersLen > 1) {\n+            \/\/ Copy referrers to map, screening out duplicates\n@@ -88,3 +88,3 @@\n-            for (int i = 0; i < referersLen; i++) {\n-                if (map.get(referers[i]) == null) {\n-                    map.put(referers[i], referers[i]);\n+            for (int i = 0; i < referrersLen; i++) {\n+                if (map.get(referrers[i]) == null) {\n+                    map.put(referrers[i], referrers[i]);\n@@ -95,2 +95,2 @@\n-            referers = new JavaThing[map.size()];\n-            map.keySet().toArray(referers);\n+            referrers = new JavaThing[map.size()];\n+            map.keySet().toArray(referrers);\n@@ -98,1 +98,1 @@\n-        referersLen = -1;\n+        referrersLen = -1;\n@@ -137,6 +137,6 @@\n-        if (referersLen == 0) {\n-            referers = new JavaThing[1];        \/\/ It was null\n-        } else if (referersLen == referers.length) {\n-            JavaThing[] copy = new JavaThing[(3 * (referersLen + 1)) \/ 2];\n-            System.arraycopy(referers, 0, copy, 0, referersLen);\n-            referers = copy;\n+        if (referrersLen == 0) {\n+            referrers = new JavaThing[1];        \/\/ It was null\n+        } else if (referrersLen == referrers.length) {\n+            JavaThing[] copy = new JavaThing[(3 * (referrersLen + 1)) \/ 2];\n+            System.arraycopy(referrers, 0, copy, 0, referrersLen);\n+            referrers = copy;\n@@ -144,2 +144,2 @@\n-        referers[referersLen++] = other;\n-        \/\/ We just append to referers here.  Measurements have shown that\n+        referrers[referrersLen++] = other;\n+        \/\/ We just append to referrers here.  Measurements have shown that\n@@ -167,2 +167,2 @@\n-    public Enumeration<JavaThing> getReferers() {\n-        if (referersLen != -1) {\n+    public Enumeration<JavaThing> getReferrers() {\n+        if (referrersLen != -1) {\n@@ -176,1 +176,1 @@\n-                return referers != null && num < referers.length;\n+                return referrers != null && num < referrers.length;\n@@ -180,1 +180,1 @@\n-                return referers[num++];\n+                return referrers[num++];\n@@ -186,1 +186,1 @@\n-     * Given other, which the caller promises is in referers, determines if\n+     * Given other, which the caller promises is in referrers, determines if\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaHeapObject.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-    private long refererId;     \/\/ Thread or Class responsible for this, or 0\n-    private int index = -1;             \/\/ Index in Snapshot.roots\n+    private long referrerId;    \/\/ Thread or Class responsible for this, or 0\n+    private int index = -1;     \/\/ Index in Snapshot.roots\n@@ -53,1 +53,1 @@\n-    private JavaHeapObject referer = null;\n+    private JavaHeapObject referrer = null;\n@@ -71,2 +71,2 @@\n-    public Root(long id, long refererId, int type, String description) {\n-        this(id, refererId, type, description, null);\n+    public Root(long id, long referrerId, int type, String description) {\n+        this(id, referrerId, type, description, null);\n@@ -76,1 +76,1 @@\n-    public Root(long id, long refererId, int type, String description,\n+    public Root(long id, long referrerId, int type, String description,\n@@ -79,1 +79,1 @@\n-        this.refererId = refererId;\n+        this.referrerId = referrerId;\n@@ -140,2 +140,2 @@\n-    public JavaHeapObject getReferer() {\n-        return referer;\n+    public JavaHeapObject getReferrer() {\n+        return referrer;\n@@ -144,2 +144,2 @@\n-    public long getRefererId() {\n-        return refererId;\n+    public long getReferrerId() {\n+        return referrerId;\n@@ -164,2 +164,2 @@\n-        if (refererId != 0) {\n-            referer = ss.findThing(refererId);\n+        if (referrerId != 0) {\n+            referrer = ss.findThing(referrerId);\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Root.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-            t.setupReferers();\n+            t.setupReferrers();\n@@ -464,1 +464,1 @@\n-                \/\/ referers, because they might be more interesting.\n+                \/\/ referrers, because they might be more interesting.\n@@ -466,3 +466,3 @@\n-            Enumeration<JavaThing> referers = curr.getReferers();\n-            while (referers.hasMoreElements()) {\n-                JavaHeapObject t = (JavaHeapObject) referers.nextElement();\n+            Enumeration<JavaThing> referrers = curr.getReferrers();\n+            while (referrers.hasMoreElements()) {\n+                JavaHeapObject t = (JavaHeapObject)referrers.nextElement();\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}