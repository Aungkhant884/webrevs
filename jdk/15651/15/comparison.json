{"files":[{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for decimal digits.\n- *\n- * @since 21\n- *\/\n-final class DecimalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of DecimalDigits.\n-     *\/\n-    static final Digits INSTANCE = new DecimalDigits();\n-\n-    static {\n-        short[] digits = new short[10 * 10];\n-\n-        for (int i = 0; i < 10; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 10; j++) {\n-                short lo = (short) (j + '0');\n-                digits[i * 10 + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private DecimalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        boolean negative = value < 0;\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long q;\n-        int r;\n-        while (value <= Integer.MIN_VALUE) {\n-            q = value \/ 100;\n-            r = (int)((q * 100) - value);\n-            value = q;\n-            int digits = DIGITS[r];\n-\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int iq, ivalue = (int)value;\n-        while (ivalue <= -100) {\n-            iq = ivalue \/ 100;\n-            r = (iq * 100) - ivalue;\n-            ivalue = iq;\n-            int digits = DIGITS[r];\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (ivalue < 0) {\n-            ivalue = -ivalue;\n-        }\n-\n-        int digits = DIGITS[ivalue];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (9 < ivalue) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (negative) {\n-            putCharMH.invokeExact(buffer, --index, (int)'-');\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        boolean negative = value < 0;\n-        int sign = negative ? 1 : 0;\n-\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long precision = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (value > precision)\n-                return i + sign;\n-\n-            precision = 10 * precision;\n-        }\n-\n-        return 19 + sign;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/DecimalDigits.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -39,0 +39,3 @@\n+import jdk.internal.util.DecimalDigits;\n+import jdk.internal.util.HexDigits;\n+import jdk.internal.util.OctalDigits;\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.util.HexDigits;\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for decimal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class DecimalDigits implements Digits {\n+\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    private static final short[] DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n+\n+    \/**\n+     * Singleton instance of DecimalDigits.\n+     *\/\n+    public static final Digits INSTANCE = new DecimalDigits();\n+\n+    \/**\n+     * Constructor.\n+     *\/\n+    private DecimalDigits() {\n+    }\n+\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n+        boolean negative = value < 0;\n+        if (!negative) {\n+            value = -value;\n+        }\n+\n+        long q;\n+        int r;\n+        while (value <= Integer.MIN_VALUE) {\n+            q = value \/ 100;\n+            r = (int)((q * 100) - value);\n+            value = q;\n+            int digits = DIGITS[r];\n+\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        int iq, ivalue = (int)value;\n+        while (ivalue <= -100) {\n+            iq = ivalue \/ 100;\n+            r = (iq * 100) - ivalue;\n+            ivalue = iq;\n+            int digits = DIGITS[r];\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        if (ivalue < 0) {\n+            ivalue = -ivalue;\n+        }\n+\n+        int digits = DIGITS[ivalue];\n+        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+\n+        if (9 < ivalue) {\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        if (negative) {\n+            putCharMH.invokeExact(buffer, --index, (int)'-');\n+        }\n+\n+        return index;\n+    }\n+\n+    @Override\n+    public int size(long value) {\n+        boolean negative = value < 0;\n+        int sign = negative ? 1 : 0;\n+\n+        if (!negative) {\n+            value = -value;\n+        }\n+\n+        long precision = -10;\n+        for (int i = 1; i < 19; i++) {\n+            if (value > precision)\n+                return i + sign;\n+\n+            precision = 10 * precision;\n+        }\n+\n+        return 19 + sign;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package java.util;\n+package jdk.internal.util;\n@@ -36,1 +36,1 @@\n-sealed interface Digits permits DecimalDigits, HexDigits, OctalDigits {\n+public sealed interface Digits permits DecimalDigits, HexDigits, OctalDigits {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Digits.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/java\/util\/Digits.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package java.util;\n+package jdk.internal.util;\n@@ -37,1 +37,1 @@\n-final class HexDigits implements Digits {\n+public final class HexDigits implements Digits {\n@@ -82,1 +82,1 @@\n-    static final Digits INSTANCE = new HexDigits();\n+    public static final Digits INSTANCE = new HexDigits();\n@@ -108,1 +108,1 @@\n-    static int digit(int b0, int b1) {\n+    public static int digit(int b0, int b1) {\n@@ -115,1 +115,1 @@\n-    static long digit(int b0, int b1, int b2, int b3) {\n+    public static long digit(int b0, int b1, int b2, int b3) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/java\/util\/HexDigits.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package java.util;\n+package jdk.internal.util;\n@@ -37,1 +37,1 @@\n-final class OctalDigits implements Digits {\n+public final class OctalDigits implements Digits {\n@@ -44,1 +44,1 @@\n-    static final Digits INSTANCE = new OctalDigits();\n+    public static final Digits INSTANCE = new OctalDigits();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/java\/util\/OctalDigits.java","status":"renamed"}]}