{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -832,1 +833,1 @@\n-        int spaceNeeded = count + Integer.stringSize(i);\n+        int spaceNeeded = count + DecimalDigits.stringSize(i);\n@@ -857,1 +858,1 @@\n-        int spaceNeeded = count + Long.stringSize(l);\n+        int spaceNeeded = count + DecimalDigits.stringSize(l);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -429,1 +430,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n@@ -459,26 +460,0 @@\n-    \/**\n-     * Returns the string representation size for a given int value.\n-     *\n-     * @param x int value\n-     * @return string size\n-     *\n-     * @implNote There are other ways to compute this: e.g. binary search,\n-     * but values are biased heavily towards zero, and therefore linear search\n-     * wins. The iteration results are also routinely inlined in the generated\n-     * code after loop unrolling.\n-     *\/\n-    static int stringSize(int x) {\n-        int d = 1;\n-        if (x >= 0) {\n-            d = 0;\n-            x = -x;\n-        }\n-        int p = -10;\n-        for (int i = 1; i < 10; i++) {\n-            if (x > p)\n-                return i + d;\n-            p = 10 * p;\n-        }\n-        return 10 + d;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -459,1 +460,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n@@ -489,26 +490,0 @@\n-    \/**\n-     * Returns the string representation size for a given long value.\n-     *\n-     * @param x long value\n-     * @return string size\n-     *\n-     * @implNote There are other ways to compute this: e.g. binary search,\n-     * but values are biased heavily towards zero, and therefore linear search\n-     * wins. The iteration results are also routinely inlined in the generated\n-     * code after loop unrolling.\n-     *\/\n-    static int stringSize(long x) {\n-        int d = 1;\n-        if (x >= 0) {\n-            d = 0;\n-            x = -x;\n-        }\n-        long p = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (x > p)\n-                return i + d;\n-            p = 10 * p;\n-        }\n-        return 19 + d;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -101,1 +102,1 @@\n-        return checkOverflow(lengthCoder + Integer.stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n@@ -112,1 +113,1 @@\n-        return checkOverflow(lengthCoder + Long.stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import static jdk.internal.util.DecimalDigits.digitPair;\n@@ -46,35 +47,0 @@\n-\n-    \/**\n-     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n-     * <pre>\n-     *      00 -> '0' | ('0' << 8) -> 0x3030\n-     *      01 -> '1' | ('0' << 8) -> 0x3130\n-     *      02 -> '2' | ('0' << 8) -> 0x3230\n-     *\n-     *     ...\n-     *\n-     *      10 -> '0' | ('1' << 8) -> 0x3031\n-     *      11 -> '1' | ('1' << 8) -> 0x3131\n-     *      12 -> '2' | ('1' << 8) -> 0x3231\n-     *\n-     *     ...\n-     *\n-     *      97 -> '7' | ('9' << 8) -> 0x3739\n-     *      98 -> '8' | ('9' << 8) -> 0x3839\n-     *      99 -> '9' | ('9' << 8) -> 0x3939\n-     * <\/pre>\n-     *\/\n-    @Stable\n-    static final short[] PACKED_DIGITS = new short[] {\n-            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n-            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n-            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n-            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n-            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n-            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n-            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n-            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n-            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n-            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n-    };\n-\n@@ -151,1 +117,1 @@\n-            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[r]);\n+            ByteArrayLittleEndian.setShort(buf, charPos, digitPair(r));\n@@ -157,1 +123,1 @@\n-            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i]);\n+            ByteArrayLittleEndian.setShort(buf, charPos, digitPair(-i));\n@@ -199,1 +165,1 @@\n-            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(int)((q * 100) - i)]);\n+            ByteArrayLittleEndian.setShort(buf, charPos, digitPair((int)((q * 100) - i)));\n@@ -209,1 +175,1 @@\n-            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(q2 * 100) - i2]);\n+            ByteArrayLittleEndian.setShort(buf, charPos, digitPair((q2 * 100) - i2));\n@@ -216,1 +182,1 @@\n-            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i2]);\n+            ByteArrayLittleEndian.setShort(buf, charPos, digitPair(-i2));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import static jdk.internal.util.DecimalDigits.digitPair;\n+\n@@ -1547,1 +1549,1 @@\n-            int packed = (int) StringLatin1.PACKED_DIGITS[r];\n+            int packed = (int) digitPair(r);\n@@ -1556,1 +1558,1 @@\n-            int packed = (int) StringLatin1.PACKED_DIGITS[-i];\n+            int packed = (int) digitPair(-i);\n@@ -1594,1 +1596,1 @@\n-            int packed = (int) StringLatin1.PACKED_DIGITS[(int)((q * 100) - i)];\n+            int packed = (int) digitPair((int)((q * 100) - i));\n@@ -1608,1 +1610,1 @@\n-            int packed = (int) StringLatin1.PACKED_DIGITS[(q2 * 100) - i2];\n+            int packed = (int) digitPair((q2 * 100) - i2);\n@@ -1620,1 +1622,1 @@\n-            int packed = (int) StringLatin1.PACKED_DIGITS[-i2];\n+            int packed = (int) digitPair(-i2);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for decimal digits.\n- *\n- * @since 21\n- *\/\n-final class DecimalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of DecimalDigits.\n-     *\/\n-    static final Digits INSTANCE = new DecimalDigits();\n-\n-    static {\n-        short[] digits = new short[10 * 10];\n-\n-        for (int i = 0; i < 10; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 10; j++) {\n-                short lo = (short) (j + '0');\n-                digits[i * 10 + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private DecimalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        boolean negative = value < 0;\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long q;\n-        int r;\n-        while (value <= Integer.MIN_VALUE) {\n-            q = value \/ 100;\n-            r = (int)((q * 100) - value);\n-            value = q;\n-            int digits = DIGITS[r];\n-\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int iq, ivalue = (int)value;\n-        while (ivalue <= -100) {\n-            iq = ivalue \/ 100;\n-            r = (iq * 100) - ivalue;\n-            ivalue = iq;\n-            int digits = DIGITS[r];\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (ivalue < 0) {\n-            ivalue = -ivalue;\n-        }\n-\n-        int digits = DIGITS[ivalue];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (9 < ivalue) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        if (negative) {\n-            putCharMH.invokeExact(buffer, --index, (int)'-');\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        boolean negative = value < 0;\n-        int sign = negative ? 1 : 0;\n-\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long precision = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (value > precision)\n-                return i + sign;\n-\n-            precision = 10 * precision;\n-        }\n-\n-        return 19 + sign;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/DecimalDigits.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -36,1 +36,1 @@\n-sealed interface Digits permits DecimalDigits, HexDigits, OctalDigits {\n+sealed interface Digits permits HexDigits {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Digits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.util.DecimalDigits;\n+import jdk.internal.util.OctalDigits;\n@@ -143,1 +145,1 @@\n-            int length = DecimalDigits.INSTANCE.size(value);\n+            int length = DecimalDigits.stringSize(value);\n@@ -145,1 +147,1 @@\n-            DecimalDigits.INSTANCE.digits(value, this.digits, length, PUT_CHAR_DIGIT);\n+            DecimalDigits.digits(value, this.digits, length, PUT_CHAR_DIGIT);\n@@ -274,1 +276,1 @@\n-            this.length = OctalDigits.INSTANCE.size(value);\n+            this.length = OctalDigits.stringSize(value);\n@@ -293,1 +295,1 @@\n-            OctalDigits.INSTANCE.digits(value, buffer, (int)lengthCoder, putCharMH);\n+            OctalDigits.digits(value, buffer, (int)lengthCoder, putCharMH);\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for octal digits.\n- *\n- * @since 21\n- *\/\n-final class OctalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of OctalDigits.\n-     *\/\n-    static final Digits INSTANCE = new OctalDigits();\n-\n-    static {\n-        short[] digits = new short[8 * 8];\n-\n-        for (int i = 0; i < 8; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 8; j++) {\n-                short lo = (short) (j + '0');\n-                digits[(i << 3) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private OctalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        while ((value & ~0x3F) != 0) {\n-            int digits = DIGITS[(int) (value & 0x3F)];\n-            value >>>= 6;\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0x3F)];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (7 < value) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/OctalDigits.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+import jdk.internal.vm.annotation.Stable;\n+\n+public final class DecimalDigits {\n+    public static int digits(long value, byte[] buffer, int index, MethodHandle putCharMH) throws Throwable {\n+        boolean negative = value < 0;\n+        if (!negative) {\n+            value = -value;\n+        }\n+\n+        long q;\n+        int r;\n+        while (value <= Integer.MIN_VALUE) {\n+            q = value \/ 100;\n+            r = (int)((q * 100) - value);\n+            value = q;\n+            int digits = digitPair(r);\n+\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        int iq, ivalue = (int)value;\n+        while (ivalue <= -100) {\n+            iq = ivalue \/ 100;\n+            r = (iq * 100) - ivalue;\n+            ivalue = iq;\n+            int digits = digitPair(r);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        if (ivalue < 0) {\n+            ivalue = -ivalue;\n+        }\n+\n+        int digits = digitPair(ivalue);\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n+\n+        if (9 < ivalue) {\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+        }\n+\n+        if (negative) {\n+            putCharMH.invokeExact(buffer, --index, (int)'-');\n+        }\n+\n+        return index;\n+    }\n+\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    private static final short[] PACKED_DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n+\n+    public static short digitPair(int i) {\n+        return PACKED_DIGITS[i];\n+    }\n+\n+    \/**\n+     * Returns the string representation size for a given int value.\n+     *\n+     * @param x int value\n+     * @return string size\n+     *\n+     * @implNote There are other ways to compute this: e.g. binary search,\n+     * but values are biased heavily towards zero, and therefore linear search\n+     * wins. The iteration results are also routinely inlined in the generated\n+     * code after loop unrolling.\n+     *\/\n+    public static int stringSize(int x) {\n+        int d = 1;\n+        if (x >= 0) {\n+            d = 0;\n+            x = -x;\n+        }\n+        int p = -10;\n+        for (int i = 1; i < 10; i++) {\n+            if (x > p)\n+                return i + d;\n+            p = 10 * p;\n+        }\n+        return 10 + d;\n+    }\n+\n+    \/**\n+     * Returns the string representation size for a given long value.\n+     *\n+     * @param x long value\n+     * @return string size\n+     *\n+     * @implNote There are other ways to compute this: e.g. binary search,\n+     * but values are biased heavily towards zero, and therefore linear search\n+     * wins. The iteration results are also routinely inlined in the generated\n+     * code after loop unrolling.\n+     *\/\n+    public static int stringSize(long x) {\n+        int d = 1;\n+        if (x >= 0) {\n+            d = 0;\n+            x = -x;\n+        }\n+        long p = -10;\n+        for (int i = 1; i < 19; i++) {\n+            if (x > p)\n+                return i + d;\n+            p = 10 * p;\n+        }\n+        return 19 + d;\n+    }\n+\n+    \/**\n+     * Places characters representing the integer i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n+     * integer.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    public static int getChars(int i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        int q, r;\n+        int charPos = index;\n+\n+        boolean negative = i < 0;\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Generate two digits per iteration\n+        while (i <= -100) {\n+            q = i \/ 100;\n+            r = (q * 100) - i;\n+            i = q;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[r]);\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i]);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n+    \/**\n+     * Places characters representing the long i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n+     * long.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    public static int getChars(long i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(int)((q * 100) - i)]);\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(q2 * 100) - i2]);\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i2]);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for octal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class OctalDigits {\n+    @Stable\n+    private static final short[] DIGITS;\n+\n+    static {\n+        short[] digits = new short[8 * 8];\n+\n+        for (int i = 0; i < 8; i++) {\n+            short hi = (short) ((i + '0') << 8);\n+\n+            for (int j = 0; j < 8; j++) {\n+                short lo = (short) (j + '0');\n+                digits[(i << 3) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+\n+    public static int digits(long value, byte[] buffer, int index, MethodHandle putCharMH) throws Throwable {\n+        while ((value & ~0x3F) != 0) {\n+            int digits = DIGITS[(int) (value & 0x3F)];\n+            value >>>= 6;\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        int digits = DIGITS[(int) (value & 0x3F)];\n+        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+\n+        if (7 < value) {\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        return index;\n+    }\n+\n+    public static int stringSize(long value) {\n+        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}