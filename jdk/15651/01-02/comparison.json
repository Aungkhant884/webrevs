{"files":[{"patch":"@@ -28,2 +28,1 @@\n-import static jdk.internal.util.DecimalDigits.stringSize;\n-\n+import jdk.internal.util.DecimalDigits;\n@@ -431,1 +430,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -45,2 +46,0 @@\n-import static jdk.internal.util.DecimalDigits.stringSize;\n-\n@@ -461,1 +460,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static jdk.internal.util.DecimalDigits.stringSize;\n-\n+import jdk.internal.util.DecimalDigits;\n@@ -103,1 +102,1 @@\n-        return checkOverflow(lengthCoder + stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n@@ -114,1 +113,1 @@\n-        return checkOverflow(lengthCoder + stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-sealed interface Digits permits HexDigits, OctalDigits {\n+sealed interface Digits permits HexDigits {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Digits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.internal.util.OctalDigits;\n@@ -275,1 +276,1 @@\n-            this.length = OctalDigits.INSTANCE.size(value);\n+            this.length = OctalDigits.stringSize(value);\n@@ -294,1 +295,1 @@\n-            OctalDigits.INSTANCE.digits(value, buffer, (int)lengthCoder, putCharMH);\n+            OctalDigits.digits(value, buffer, (int)lengthCoder, putCharMH);\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.util;\n-\n-import java.lang.invoke.MethodHandle;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for octal digits.\n- *\n- * @since 21\n- *\/\n-final class OctalDigits implements Digits {\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    \/**\n-     * Singleton instance of OctalDigits.\n-     *\/\n-    static final Digits INSTANCE = new OctalDigits();\n-\n-    static {\n-        short[] digits = new short[8 * 8];\n-\n-        for (int i = 0; i < 8; i++) {\n-            short hi = (short) ((i + '0') << 8);\n-\n-            for (int j = 0; j < 8; j++) {\n-                short lo = (short) (j + '0');\n-                digits[(i << 3) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private OctalDigits() {\n-    }\n-\n-    @Override\n-    public int digits(long value, byte[] buffer, int index,\n-                      MethodHandle putCharMH) throws Throwable {\n-        while ((value & ~0x3F) != 0) {\n-            int digits = DIGITS[(int) (value & 0x3F)];\n-            value >>>= 6;\n-            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0x3F)];\n-        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n-\n-        if (7 < value) {\n-            putCharMH.invokeExact(buffer, --index, digits >> 8);\n-        }\n-\n-        return index;\n-    }\n-\n-    @Override\n-    public int size(long value) {\n-        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/util\/OctalDigits.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import jdk.internal.vm.annotation.Stable;\n+\n+\/**\n+ * Digits class for octal digits.\n+ *\n+ * @since 21\n+ *\/\n+public final class OctalDigits {\n+    @Stable\n+    private static final short[] DIGITS;\n+\n+    static {\n+        short[] digits = new short[8 * 8];\n+\n+        for (int i = 0; i < 8; i++) {\n+            short hi = (short) ((i + '0') << 8);\n+\n+            for (int j = 0; j < 8; j++) {\n+                short lo = (short) (j + '0');\n+                digits[(i << 3) + j] = (short) (hi | lo);\n+            }\n+        }\n+\n+        DIGITS = digits;\n+    }\n+\n+    public static int digits(long value, byte[] buffer, int index, MethodHandle putCharMH) throws Throwable {\n+        while ((value & ~0x3F) != 0) {\n+            int digits = DIGITS[(int) (value & 0x3F)];\n+            value >>>= 6;\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        int digits = DIGITS[(int) (value & 0x3F)];\n+        putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n+\n+        if (7 < value) {\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+        }\n+\n+        return index;\n+    }\n+\n+    public static int stringSize(long value) {\n+        return (66 - Long.numberOfLeadingZeros(value)) \/ 3;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}