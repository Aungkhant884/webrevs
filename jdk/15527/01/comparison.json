{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.io.RandomAccessFile;\n@@ -33,9 +32,30 @@\n-\/\/ This is a simple parser for parsing the output of\n-\/\/\n-\/\/   java -Xshare:dump -Xlog:cds+map=debug,cds+map+oops=trace:file=cds.map:none:filesize=0\n-\/\/\n-\/\/ Currently it just check the output related to JDK-8308903.\n-\/\/ I.e., each oop fields in the HeapObjects must point to a valid HeapObject.\n-\/\/\n-\/\/ It can be extended to check for the other parts of the map file, or perform\n-\/\/ more analysis on the HeapObjects.\n+\/*\n+\n+This is a simple parser for parsing the output of\n+\n+   java -Xshare:dump -Xlog:cds+map=debug,cds+map+oops=trace:file=cds.map:none:filesize=0\n+\n+The map file contains patterns like this for the heap objects:\n+\n+======================================================================\n+0x00000000ffe00000: @@ Object (0xffe00000) java.lang.String\n+ - klass: 'java\/lang\/String' 0x0000000800010220\n+ - fields (3 words):\n+ - private 'hash' 'I' @12  0 (0x00000000)\n+ - private final 'coder' 'B' @16  0 (0x00)\n+ - private 'hashIsZero' 'Z' @17  true (0x01)\n+ - injected 'flags' 'B' @18  1 (0x01)\n+ - private final 'value' '[B' @20 0x00000000ffe00018 (0xffe00018) [B length: 0\n+0x00000000ffe00018: @@ Object (0xffe00018) [B length: 0\n+ - klass: {type array byte} 0x00000008000024d8\n+======================================================================\n+\n+Currently this parser just check the output related to JDK-8308903.\n+I.e., each oop field must point to a valid HeapObject. For example, the 'value' field\n+in the String must point to a valid byte array.\n+\n+This parser can be extended to check for the other parts of the map file, or perform\n+more analysis on the HeapObjects.\n+\n+*\/\n+\n@@ -47,0 +67,1 @@\n+        public int stringCount = 0;\n@@ -54,0 +75,3 @@\n+            if (heapObject.className.equals(\"java.lang.String\")) {\n+                stringCount ++;\n+            }\n@@ -187,1 +211,0 @@\n-            \/\/ TODO: read all the array elements\n@@ -236,0 +259,1 @@\n+        lineCount = 0;\n@@ -257,1 +281,2 @@\n-            System.out.println(\"Found \"  + mapFile.heapObjectCount() + \" heap objects\");\n+            System.out.println(\"Found \" + mapFile.heapObjectCount() + \" heap objects (\"\n+                               + mapFile.stringCount + \" strings)\");\n@@ -273,2 +298,3 @@\n-    public static int validate(MapFile mapFile) {\n-        int count = 0;\n+    public static void validate(MapFile mapFile) {\n+        int count1 = 0;\n+        int count2 = 0;\n@@ -284,2 +310,4 @@\n-                    mustContain(mapFile.oopToObject, field, oop, false);\n-                    count ++;\n+                    if (oop != 0) {\n+                        mustContain(mapFile.oopToObject, field, oop, false);\n+                        count1 ++;\n+                    }\n@@ -288,1 +316,1 @@\n-                        count ++;\n+                        count2 ++;\n@@ -293,2 +321,15 @@\n-        System.out.println(\"Checked \" + count + \" oop field references\");\n-        return count;\n+        System.out.println(\"Found \" + count1 + \" non-null oop field references (normal)\");\n+        System.out.println(\"Found \" + count2 + \" non-null oop field references (narrow)\");\n+\n+        if (mapFile.heapObjectCount() > 0) {\n+            \/\/ heapObjectCount() may be zero if the selected GC doesn't support heap object archiving.\n+            if (mapFile.stringCount <= 0) {\n+                throw new RuntimeException(\"CDS map file should contain at least one string\");\n+            }\n+            if (count1 < mapFile.stringCount) {\n+                throw new RuntimeException(\"CDS map file seems incorrect: \" + mapFile.heapObjectCount() +\n+                                           \" objects (\" + mapFile.stringCount + \" strings). Each string should\" +\n+                                           \" have one non-null oop field but we found only \" + count1 +\n+                                           \" non-null oop field references\");\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapReader.java","additions":60,"deletions":19,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import java.io.FileInputStream;\n-import java.io.IOException;\n@@ -79,6 +77,1 @@\n-        int oopFieldCount = CDSMapReader.validate(mapFile);\n-        if (mapFile.heapObjectCount() > 0 && oopFieldCount < 10000) {\n-            \/\/ heapObjectCount() may be zero if the selected GC doesn't support heap object archiving.\n-            throw new RuntimeException(\"CDS map file seems incorrect: \" + mapFile.heapObjectCount() +\n-                                       \" objects but only \" + oopFieldCount + \" oop field references\");\n-        }\n+        CDSMapReader.validate(mapFile);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}