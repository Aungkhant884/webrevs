{"files":[{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316746\n+ * @summary During OSR, locks get transferred from interpreter frame.\n+ *          Check that unlocking 2 such locks works in the OSR compiled nmethod.\n+ *          Some platforms verify that the unlocking happens in the corrent order.\n+ *\n+ * @run main\/othervm -Xbatch TestUnlockOSR\n+ *\/\n+\n+public class TestUnlockOSR {\n+    static void test_method(Object a, Object b, int limit) {\n+        synchronized(a) { \/\/ allocate space for monitors\n+            synchronized(b) {\n+            }\n+        } \/\/ free space to test allocation in reused space\n+        synchronized(a) { \/\/ reuse the space\n+            synchronized(b) {\n+                for (int i = 0; i < limit; i++) {}\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        Object a = new TestUnlockOSR(),\n+               b = new TestUnlockOSR();\n+        \/\/ avoid uncommon trap before last unlocks\n+        for (int i = 0; i < 100; i++) { test_method(a, b, 0); }\n+        \/\/ trigger OSR\n+        test_method(a, b, 100000);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestUnlockOSR.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}