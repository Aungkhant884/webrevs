{"files":[{"patch":"@@ -1981,1 +1981,1 @@\n-\/\/ Add a InterpMonitorElem to stack (see frame_sparc.hpp).\n+\/\/ Add a monitor (see frame_ppc.hpp).\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4170,2 +4170,11 @@\n-           Rscratch3         = R5_ARG3,\n-           Rcurrent_obj_addr = R6_ARG4;\n+           Rbot              = R5_ARG3,\n+           Rfree_slot        = R6_ARG4;\n+\n+  Label Lfound, Lallocate_new;\n+\n+  __ ld(Rscratch1, _abi0(callers_sp), R1_SP); \/\/ load FP\n+  __ li(Rfree_slot, 0); \/\/ Points to free slot or null.\n+\n+  \/\/ Set up search loop - start with topmost monitor.\n+  __ mr(Rcurrent_monitor, R26_monitor);\n+  __ addi(Rbot, Rscratch1, -frame::ijava_state_size);\n@@ -4177,2 +4186,3 @@\n-  \/\/ Try to acquire a lock on the object.\n-  \/\/ Repeat until succeeded (i.e., until monitorenter returns true).\n+  \/\/ Check if any slot is present => short cut to allocation if not.\n+  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+  __ beq(CCR0, Lallocate_new);\n@@ -4182,4 +4192,2 @@\n-  Label Lfound, Lexit, Lallocate_new;\n-  ConditionRegister found_free_slot = CCR0,\n-                    found_same_obj  = CCR1,\n-                    reached_limit   = CCR6;\n+  \/\/ Note: The order of the monitors is important for C2 OSR which derives the\n+  \/\/       unlock order from it.\n@@ -4187,2 +4195,1 @@\n-    Label Lloop;\n-    Register Rlimit = Rcurrent_monitor;\n+    Label Lloop, LnotFree;\n@@ -4190,5 +4197,5 @@\n-    \/\/ Set up search loop - start with topmost monitor.\n-    __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n-\n-    __ ld(Rlimit, 0, R1_SP);\n-    __ addi(Rlimit, Rlimit, - (frame::ijava_state_size + frame::interpreter_frame_monitor_size_in_bytes() - in_bytes(BasicObjectLock::obj_offset()))); \/\/ Monitor base\n+    __ bind(Lloop);\n+    __ ld(Rcurrent_obj, in_bytes(BasicObjectLock::obj_offset()), Rcurrent_monitor);\n+    \/\/ Found object?\n+    __ cmpd(CCR0, Rcurrent_obj, Robj_to_lock);\n+    __ beq(CCR0, Lfound); \/\/ recursive locking\n@@ -4196,3 +4203,4 @@\n-    \/\/ Check if any slot is present => short cut to allocation if not.\n-    __ cmpld(reached_limit, Rcurrent_obj_addr, Rlimit);\n-    __ bgt(reached_limit, Lallocate_new);\n+    __ cmpdi(CCR0, Rcurrent_obj, 0);\n+    __ bne(CCR0, LnotFree);\n+    __ mr(Rfree_slot, Rcurrent_monitor); \/\/ remember free slot closest to the bottom\n+    __ bind(LnotFree);\n@@ -4200,19 +4208,3 @@\n-    \/\/ Pre-load topmost slot.\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-    \/\/ The search loop.\n-    __ bind(Lloop);\n-    \/\/ Found free slot?\n-    __ cmpdi(found_free_slot, Rcurrent_obj, 0);\n-    \/\/ Is this entry for same obj? If so, stop the search and take the found\n-    \/\/ free slot or allocate a new one to enable recursive locking.\n-    __ cmpd(found_same_obj, Rcurrent_obj, Robj_to_lock);\n-    __ cmpld(reached_limit, Rcurrent_obj_addr, Rlimit);\n-    __ beq(found_free_slot, Lexit);\n-    __ beq(found_same_obj, Lallocate_new);\n-    __ bgt(reached_limit, Lallocate_new);\n-    \/\/ Check if last allocated BasicLockObj reached.\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-    \/\/ Next iteration if unchecked BasicObjectLocks exist on the stack.\n-    __ b(Lloop);\n+    __ addi(Rcurrent_monitor, Rcurrent_monitor, frame::interpreter_frame_monitor_size_in_bytes());\n+    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+    __ bne(CCR0, Lloop);\n@@ -4223,4 +4215,3 @@\n-  __ bind(Lexit);\n-\n-  __ addi(Rcurrent_monitor, Rcurrent_obj_addr, -(frame::interpreter_frame_monitor_size_in_bytes()) - in_bytes(BasicObjectLock::obj_offset()));\n-  __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, - frame::interpreter_frame_monitor_size_in_bytes());\n+  __ cmpdi(CCR0, Rfree_slot, 0);\n+  __ beq(CCR0, Lallocate_new);\n+  __ mr(Rcurrent_monitor, Rfree_slot);\n@@ -4234,1 +4225,0 @@\n-  __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n@@ -4244,1 +4234,1 @@\n-  __ std(Robj_to_lock, 0, Rcurrent_obj_addr);\n+  __ std(Robj_to_lock, in_bytes(BasicObjectLock::obj_offset()), Rcurrent_monitor);\n@@ -4262,2 +4252,3 @@\n-           Rcurrent_obj_addr = R3_ARG1,\n-           Rlimit            = R4_ARG2;\n+           Rscratch          = R3_ARG1,\n+           Rbot              = R4_ARG2;\n+\n@@ -4266,3 +4257,5 @@\n-  \/\/ Check corner case: unbalanced monitorEnter \/ Exit.\n-  __ ld(Rlimit, 0, R1_SP);\n-  __ addi(Rlimit, Rlimit, - (frame::ijava_state_size + frame::interpreter_frame_monitor_size_in_bytes())); \/\/ Monitor base\n+  __ ld(Rscratch, _abi0(callers_sp), R1_SP); \/\/ load FP\n+\n+  \/\/ Set up search loop - start with topmost monitor.\n+  __ mr(Rcurrent_monitor, R26_monitor);\n+  __ addi(Rbot, Rscratch, -frame::ijava_state_size);\n@@ -4273,2 +4266,3 @@\n-  __ cmpld(CCR0, R26_monitor, Rlimit);\n-  __ bgt(CCR0, Lillegal_monitor_state);\n+  \/\/ Check corner case: unbalanced monitorEnter \/ Exit.\n+  __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+  __ beq(CCR0, Lillegal_monitor_state);\n@@ -4280,6 +4274,0 @@\n-    \/\/ Start with topmost monitor.\n-    __ addi(Rcurrent_obj_addr, R26_monitor, in_bytes(BasicObjectLock::obj_offset()));\n-    __ addi(Rlimit, Rlimit, in_bytes(BasicObjectLock::obj_offset()));\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-\n@@ -4287,0 +4275,1 @@\n+    __ ld(Rcurrent_obj, in_bytes(BasicObjectLock::obj_offset()), Rcurrent_monitor);\n@@ -4291,8 +4280,3 @@\n-    \/\/ Check if last allocated BasicLockObj reached.\n-\n-    __ ld(Rcurrent_obj, 0, Rcurrent_obj_addr);\n-    __ cmpld(CCR0, Rcurrent_obj_addr, Rlimit);\n-    __ addi(Rcurrent_obj_addr, Rcurrent_obj_addr, frame::interpreter_frame_monitor_size_in_bytes());\n-\n-    \/\/ Next iteration if unchecked BasicObjectLocks exist on the stack.\n-    __ ble(CCR0, Lloop);\n+    __ addi(Rcurrent_monitor, Rcurrent_monitor, frame::interpreter_frame_monitor_size_in_bytes());\n+    __ cmpld(CCR0, Rcurrent_monitor, Rbot);\n+    __ bne(CCR0, Lloop);\n@@ -4308,2 +4292,0 @@\n-  __ addi(Rcurrent_monitor, Rcurrent_obj_addr,\n-          -(frame::interpreter_frame_monitor_size_in_bytes()) - in_bytes(BasicObjectLock::obj_offset()));\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":48,"deletions":66,"binary":false,"changes":114,"status":"modified"}]}