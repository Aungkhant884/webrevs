{"files":[{"patch":"@@ -687,1 +687,1 @@\n-        return Math.abs(v) > MAX_VALUE;\n+        return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY);\n@@ -701,1 +701,1 @@\n-        return Math.abs(d) <= MAX_VALUE;\n+        return Math.abs(d) <= Double.MAX_VALUE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-        return Math.abs(v) > MAX_VALUE;\n+        return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY);\n@@ -526,2 +526,2 @@\n-    public static boolean isFinite(float f) {\n-        return Math.abs(f) <= MAX_VALUE;\n+     public static boolean isFinite(float f) {\n+        return Math.abs(f) <= Float.MAX_VALUE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,2 +37,6 @@\n-            0,\n-            1,\n+            Double.NEGATIVE_INFINITY,\n+            -Double.MAX_VALUE,\n+            -1.0,\n+            -Double.MIN_VALUE,\n+            -0.0,\n+            0.0,\n@@ -40,0 +44,1 @@\n+            1.0,\n@@ -42,1 +47,0 @@\n-            Double.NEGATIVE_INFINITY,\n@@ -47,2 +51,6 @@\n-            0,\n-            1,\n+            Float.NEGATIVE_INFINITY,\n+            -Float.MAX_VALUE,\n+            -1.0F,\n+            -Float.MIN_VALUE,\n+            -0.0F,\n+            0.0F,\n@@ -50,0 +58,1 @@\n+            1.0F,\n@@ -52,1 +61,0 @@\n-            Float.NEGATIVE_INFINITY,\n@@ -89,0 +97,48 @@\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveLessThanTwoDoubles(double x, double y) {\n+        return x < y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveLessThanTwoFloats(float x, float y) {\n+        return x < y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveMoreThanTwoDoubles(double x, double y) {\n+        return x > y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveMoreThanTwoFloats(float x, float y) {\n+        return x > y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveLessEqualTwoDoubles(double x, double y) {\n+        return x <= y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveLessEqualTwoFloats(float x, float y) {\n+        return x <= y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveMoreEqualTwoDoubles(double x, double y) {\n+        return x >= y ? 1 : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CMOVEI, \"1\"})\n+    public int cMoveMoreEqualTwoFloats(float x, float y) {\n+        return x >= y ? 1 : 0;\n+    }\n+\n@@ -113,0 +169,72 @@\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchEqualTwoDoubles(double x, double y) {\n+        return x == y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchEqualTwoFloats(float x, float y) {\n+        return x == y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchNotEqualTwoDoubles(double x, double y) {\n+        return x != y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchNotEqualTwoFloats(float x, float y) {\n+        return x != y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchLessThanTwoDoubles(double x, double y) {\n+        return x < y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchLessThanTwoFloats(float x, float y) {\n+        return x < y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchMoreThanTwoDoubles(double x, double y) {\n+        return x > y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchMoreThanTwoFloats(float x, float y) {\n+        return x > y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchLessEqualTwoDoubles(double x, double y) {\n+        return x <= y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchLessEqualTwoFloats(float x, float y) {\n+        return x <= y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchMoreEqualTwoDoubles(double x, double y) {\n+        return x >= y ? call() : 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.IF, \"1\"})\n+    public int branchMoreEqualTwoFloats(float x, float y) {\n+        return x >= y ? call() : 0;\n+    }\n+\n@@ -138,0 +266,2 @@\n+            \"cMoveLessThanTwoDoubles\", \"cMoveLessThanTwoFloats\", \"cMoveMoreThanTwoDoubles\", \"cMoveMoreThanTwoFloats\",\n+            \"cMoveLessEqualTwoDoubles\", \"cMoveLessEqualTwoFloats\", \"cMoveMoreEqualTwoDoubles\", \"cMoveMoreEqualTwoFloats\",\n@@ -139,0 +269,3 @@\n+            \"branchEqualTwoDoubles\", \"branchEqualTwoFloats\", \"branchNotEqualTwoDoubles\", \"branchNotEqualTwoFloats\",\n+            \"branchLessThanTwoDoubles\", \"branchLessThanTwoFloats\", \"branchMoreThanTwoDoubles\", \"branchMoreThanTwoFloats\",\n+            \"branchLessEqualTwoDoubles\", \"branchLessEqualTwoFloats\", \"branchMoreEqualTwoDoubles\", \"branchMoreEqualTwoFloats\",\n@@ -143,8 +276,31 @@\n-                Asserts.assertEquals(cMoveEqualTwoDoubles(DOUBLES[i], DOUBLES[i]),\n-                        (i != DOUBLES.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveNotEqualTwoDoubles(DOUBLES[i], DOUBLES[i]),\n-                        (i == DOUBLES.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveEqualTwoDoubles(DOUBLES[i], DOUBLES[j]),\n-                        (i == j && i != DOUBLES.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveNotEqualTwoDoubles(DOUBLES[i], DOUBLES[j]),\n-                        (i != j || i == DOUBLES.length - 1) ? 1 : 0);\n+                int len = DOUBLES.length;\n+                double x = DOUBLES[i];\n+                double y = DOUBLES[j];\n+                Asserts.assertEquals(cMoveEqualTwoDoubles(x, x),\n+                        (x == x) ? 1 : 0);\n+                Asserts.assertEquals(cMoveNotEqualTwoDoubles(x, x),\n+                        (x != x) ? 1 : 0);\n+                Asserts.assertEquals(cMoveEqualTwoDoubles(x, y),\n+                        (x == y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveNotEqualTwoDoubles(x, y),\n+                        (x != y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveLessThanTwoDoubles(x, y),\n+                        (x < y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveLessEqualTwoDoubles(x, y),\n+                        (x <= y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveMoreThanTwoDoubles(x, y),\n+                        (x > y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveMoreEqualTwoDoubles(x, y),\n+                        (x >= y) ? 1 : 0);\n+                Asserts.assertEquals(branchEqualTwoDoubles(x, y),\n+                        (x == y) ? 1 : 0);\n+                Asserts.assertEquals(branchNotEqualTwoDoubles(x, y),\n+                        (x != y) ? 1 : 0);\n+                Asserts.assertEquals(branchLessThanTwoDoubles(x, y),\n+                        (x < y) ? 1 : 0);\n+                Asserts.assertEquals(branchLessEqualTwoDoubles(x, y),\n+                        (x <= y) ? 1 : 0);\n+                Asserts.assertEquals(branchMoreThanTwoDoubles(x, y),\n+                        (x > y) ? 1 : 0);\n+                Asserts.assertEquals(branchMoreEqualTwoDoubles(x, y),\n+                        (x >= y) ? 1 : 0);\n@@ -155,8 +311,31 @@\n-                Asserts.assertEquals(cMoveEqualTwoFloats(FLOATS[i], FLOATS[i]),\n-                        (i != FLOATS.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveNotEqualTwoFloats(FLOATS[i], FLOATS[i]),\n-                        (i == FLOATS.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveEqualTwoFloats(FLOATS[i], FLOATS[j]),\n-                        (i == j && i != FLOATS.length - 1) ? 1 : 0);\n-                Asserts.assertEquals(cMoveNotEqualTwoFloats(FLOATS[i], FLOATS[j]),\n-                        (i != j || i == FLOATS.length - 1) ? 1 : 0);\n+                int len = FLOATS.length;\n+                float x = FLOATS[i];\n+                float y = FLOATS[j];\n+                Asserts.assertEquals(cMoveEqualTwoFloats(x, x),\n+                        (x == x) ? 1 : 0);\n+                Asserts.assertEquals(cMoveNotEqualTwoFloats(x, x),\n+                        (x != x) ? 1 : 0);\n+                Asserts.assertEquals(cMoveEqualTwoFloats(x, y),\n+                        (x == y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveNotEqualTwoFloats(x, y),\n+                        (x != y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveLessThanTwoFloats(x, y),\n+                        (x < y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveLessEqualTwoFloats(x, y),\n+                        (x <= y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveMoreThanTwoFloats(x, y),\n+                        (x > y) ? 1 : 0);\n+                Asserts.assertEquals(cMoveMoreEqualTwoFloats(x, y),\n+                        (x >= y) ? 1 : 0);\n+                Asserts.assertEquals(branchEqualTwoFloats(x, y),\n+                        (x == y) ? 1 : 0);\n+                Asserts.assertEquals(branchNotEqualTwoFloats(x, y),\n+                        (x != y) ? 1 : 0);\n+                Asserts.assertEquals(branchLessThanTwoFloats(x, y),\n+                        (x < y) ? 1 : 0);\n+                Asserts.assertEquals(branchLessEqualTwoFloats(x, y),\n+                        (x <= y) ? 1 : 0);\n+                Asserts.assertEquals(branchMoreThanTwoFloats(x, y),\n+                        (x > y) ? 1 : 0);\n+                Asserts.assertEquals(branchMoreEqualTwoFloats(x, y),\n+                        (x >= y) ? 1 : 0);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFPComparison.java","additions":201,"deletions":22,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-\n-\/**\n- * @test\n- * @summary Verify isNan, isInfinite, isFinite\n- * @bug 8285973\n- * @library \/test\/lib\n- * @run main\/othervm Classification\n- *\/\n-public class Classification {\n-    public static void main(String[] args) {\n-        testIsNaN();\n-        testIsInfinite();\n-        testIsFinite();\n-    }\n-\n-    static void testIsNaN() {\n-        Asserts.assertTrue(Double.isNaN(Double.NaN));\n-        Asserts.assertFalse(Double.isNaN(0));\n-        Asserts.assertFalse(Double.isNaN(1));\n-        Asserts.assertFalse(Double.isNaN(Double.MIN_VALUE));\n-        Asserts.assertFalse(Double.isNaN(Double.MAX_VALUE));\n-        Asserts.assertFalse(Double.isNaN(Double.POSITIVE_INFINITY));\n-        Asserts.assertFalse(Double.isNaN(Double.NEGATIVE_INFINITY));\n-    }\n-\n-    static void testIsInfinite() {\n-        Asserts.assertFalse(Double.isInfinite(Double.NaN));\n-        Asserts.assertFalse(Double.isInfinite(0));\n-        Asserts.assertFalse(Double.isInfinite(1));\n-        Asserts.assertFalse(Double.isInfinite(Double.MIN_VALUE));\n-        Asserts.assertFalse(Double.isInfinite(Double.MAX_VALUE));\n-        Asserts.assertTrue(Double.isInfinite(Double.POSITIVE_INFINITY));\n-        Asserts.assertTrue(Double.isInfinite(Double.NEGATIVE_INFINITY));\n-    }\n-\n-    static void testIsFinite() {\n-        Asserts.assertFalse(Double.isFinite(Double.NaN));\n-        Asserts.assertTrue(Double.isFinite(0));\n-        Asserts.assertTrue(Double.isFinite(1));\n-        Asserts.assertTrue(Double.isFinite(Double.MIN_VALUE));\n-        Asserts.assertTrue(Double.isFinite(Double.MAX_VALUE));\n-        Asserts.assertFalse(Double.isFinite(Double.POSITIVE_INFINITY));\n-        Asserts.assertFalse(Double.isFinite(Double.NEGATIVE_INFINITY));\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Double\/Classification.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-\n-\/**\n- * @test\n- * @summary Verify isNan, isInfinite, isFinite\n- * @bug 8285973\n- * @library \/test\/lib\n- * @run main\/othervm Classification\n- *\/\n-public class Classification {\n-    public static void main(String[] args) {\n-        testIsNaN();\n-        testIsInfinite();\n-        testIsFinite();\n-    }\n-\n-    static void testIsNaN() {\n-        Asserts.assertTrue(Float.isNaN(Float.NaN));\n-        Asserts.assertFalse(Float.isNaN(0));\n-        Asserts.assertFalse(Float.isNaN(1));\n-        Asserts.assertFalse(Float.isNaN(Float.MIN_VALUE));\n-        Asserts.assertFalse(Float.isNaN(Float.MAX_VALUE));\n-        Asserts.assertFalse(Float.isNaN(Float.POSITIVE_INFINITY));\n-        Asserts.assertFalse(Float.isNaN(Float.NEGATIVE_INFINITY));\n-    }\n-\n-    static void testIsInfinite() {\n-        Asserts.assertFalse(Float.isInfinite(Float.NaN));\n-        Asserts.assertFalse(Float.isInfinite(0));\n-        Asserts.assertFalse(Float.isInfinite(1));\n-        Asserts.assertFalse(Float.isInfinite(Float.MIN_VALUE));\n-        Asserts.assertFalse(Float.isInfinite(Float.MAX_VALUE));\n-        Asserts.assertTrue(Float.isInfinite(Float.POSITIVE_INFINITY));\n-        Asserts.assertTrue(Float.isInfinite(Float.NEGATIVE_INFINITY));\n-    }\n-\n-    static void testIsFinite() {\n-        Asserts.assertFalse(Float.isFinite(Float.NaN));\n-        Asserts.assertTrue(Float.isFinite(0));\n-        Asserts.assertTrue(Float.isFinite(1));\n-        Asserts.assertTrue(Float.isFinite(Float.MIN_VALUE));\n-        Asserts.assertTrue(Float.isFinite(Float.MAX_VALUE));\n-        Asserts.assertFalse(Float.isFinite(Float.POSITIVE_INFINITY));\n-        Asserts.assertFalse(Float.isFinite(Float.NEGATIVE_INFINITY));\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Float\/Classification.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"}]}