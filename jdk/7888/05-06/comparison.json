{"files":[{"patch":"@@ -143,1 +143,2 @@\n-     * {@return the owner thread associated with this memory session (if any)}\n+     * {@return the owner thread associated with this memory session, or {@code null} if this session is shared\n+     * across multiple threads}\n@@ -165,1 +166,1 @@\n-     * Closes this memory session. As a side effect, if this operation completes without exceptions, this session\n+     * Closes this memory session. If this operation completes without exceptions, this session\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -975,1 +975,1 @@\n-     * with a given offset, size and memory session.\n+     * with the given offset, size and memory session.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private static final Function<String, Optional<MemorySegment>> fallbackLookup = name -> Optional.empty();\n+    private static final SymbolLookup fallbackLookup = name -> Optional.empty();\n@@ -57,1 +57,1 @@\n-    private static final Function<String, Optional<MemorySegment>> syslookup = makeSystemLookup();\n+    private static final SymbolLookup syslookup = makeSystemLookup();\n@@ -59,1 +59,1 @@\n-    private static final Function<String, Optional<MemorySegment>> makeSystemLookup() {\n+    private static final SymbolLookup makeSystemLookup() {\n@@ -73,1 +73,1 @@\n-    private static Function<String, Optional<MemorySegment>> makeWindowsLookup() {\n+    private static SymbolLookup makeWindowsLookup() {\n@@ -80,1 +80,1 @@\n-        Function<String, Optional<MemorySegment>> lookup = libLookup(libs -> libs.load(stdLib));\n+        SymbolLookup lookup = libLookup(libs -> libs.load(stdLib));\n@@ -85,1 +85,1 @@\n-            Function<String, Optional<MemorySegment>> fallbackLibLookup =\n+            SymbolLookup fallbackLibLookup =\n@@ -89,1 +89,1 @@\n-            MemorySegment funcs = MemorySegment.ofAddress(fallbackLibLookup.apply(\"funcs\").orElseThrow().address(),\n+            MemorySegment funcs = MemorySegment.ofAddress(fallbackLibLookup.lookup(\"funcs\").orElseThrow().address(),\n@@ -95,2 +95,2 @@\n-            final Function<String, Optional<MemorySegment>> finalLookup = lookup;\n-            lookup = name -> finalLookup.apply(name).or(() -> fallbackLookup.apply(name));\n+            final SymbolLookup finalLookup = lookup;\n+            lookup = name -> finalLookup.lookup(name).or(() -> fallbackLookup.apply(name));\n@@ -102,1 +102,1 @@\n-    private static Function<String, Optional<MemorySegment>> libLookup(Function<RawNativeLibraries, NativeLibrary> loader) {\n+    private static SymbolLookup libLookup(Function<RawNativeLibraries, NativeLibrary> loader) {\n@@ -135,0 +135,1 @@\n+    @Override\n@@ -136,1 +137,1 @@\n-        return syslookup.apply(name);\n+        return syslookup.lookup(name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}