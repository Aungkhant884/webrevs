{"files":[{"patch":"@@ -176,1 +176,1 @@\n-     * @return a new downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n+     * @return a downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n@@ -199,1 +199,1 @@\n-     * @return a new downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n+     * @return a downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/CLinker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-     * @return a new memory address instance.\n+     * @return a memory address with the given raw long value.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.UnaryOperator;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -585,1 +585,1 @@\n-     * Copy the contents of this memory segment into a fresh byte array.\n+     * Copy the contents of this memory segment into a new byte array.\n@@ -588,1 +588,1 @@\n-     * @return a fresh byte array copy of this memory segment.\n+     * @return a new byte array whose contents are copied from this memory segment.\n@@ -597,1 +597,1 @@\n-     * Copy the contents of this memory segment into a fresh short array.\n+     * Copy the contents of this memory segment into a new short array.\n@@ -600,1 +600,1 @@\n-     * @return a fresh short array copy of this memory segment.\n+     * @return a new short array whose contents are copied from this memory segment.\n@@ -609,1 +609,1 @@\n-     * Copy the contents of this memory segment into a fresh char array.\n+     * Copy the contents of this memory segment into a new char array.\n@@ -612,1 +612,1 @@\n-     * @return a fresh char array copy of this memory segment.\n+     * @return a new char array whose contents are copied from this memory segment.\n@@ -621,1 +621,1 @@\n-     * Copy the contents of this memory segment into a fresh int array.\n+     * Copy the contents of this memory segment into a new int array.\n@@ -624,1 +624,1 @@\n-     * @return a fresh int array copy of this memory segment.\n+     * @return a new int array whose contents are copied from this memory segment.\n@@ -633,1 +633,1 @@\n-     * Copy the contents of this memory segment into a fresh float array.\n+     * Copy the contents of this memory segment into a new float array.\n@@ -636,1 +636,1 @@\n-     * @return a fresh float array copy of this memory segment.\n+     * @return a new float array whose contents are copied from this memory segment.\n@@ -645,1 +645,1 @@\n-     * Copy the contents of this memory segment into a fresh long array.\n+     * Copy the contents of this memory segment into a new long array.\n@@ -648,1 +648,1 @@\n-     * @return a fresh long array copy of this memory segment.\n+     * @return a new long array whose contents are copied from this memory segment.\n@@ -657,1 +657,1 @@\n-     * Copy the contents of this memory segment into a fresh double array.\n+     * Copy the contents of this memory segment into a new double array.\n@@ -660,1 +660,1 @@\n-     * @return a fresh double array copy of this memory segment.\n+     * @return a new double array whose contents are copied from this memory segment.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -30,2 +29,0 @@\n-import java.nio.channels.FileChannel;\n-import java.nio.file.Path;\n@@ -33,1 +30,0 @@\n-import java.util.function.Consumer;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n- * MemoryAddress addr = ... \/\/obtain address from native code\n+ * MemoryAddress addr = ... \/\/ obtain address from native code\n@@ -162,1 +162,1 @@\n- * MemoryAddress addr = ... \/\/obtain address from native code\n+ * MemoryAddress addr = ... \/\/ obtain address from native code\n@@ -230,1 +230,1 @@\n- * option. If this option is not specified, access to restricted method is enabled for all modules, but\n+ * option. If this option is not specified, access to restricted methods is enabled for all modules, but\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7986,1 +7986,1 @@\n-     * starting at position {@code pos} (of type {@code C1, C2 ... Cn}, where {@code C1, C2 ... Cn} are the return type\n+     * starting at position {@code pos} (of type {@code C1, C2 ... Cn}, where {@code C1, C2 ... Cn} are the return types\n@@ -8035,1 +8035,1 @@\n-     * @return an adapter var handle which inserts an additional coordinates,\n+     * @return an adapter var handle which inserts additional coordinates,\n@@ -8151,1 +8151,1 @@\n-     * @param pos position of first coordinate to drop (zero for the leftmost)\n+     * @param pos position of the first coordinate to drop (zero for the leftmost)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-import static java.lang.foreign.ValueLayout.ADDRESS;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.*;\n@@ -67,1 +68,1 @@\n-    private static final VMStorage INDIRECT_RESULT = AArch64Architecture.r8;\n+    private static final VMStorage INDIRECT_RESULT = r8;\n@@ -80,8 +81,8 @@\n-    private static final ABIDescriptor C = AArch64Architecture.abiFor(\n-        new VMStorage[] { AArch64Architecture.r0, AArch64Architecture.r1, AArch64Architecture.r2, AArch64Architecture.r3, AArch64Architecture.r4, AArch64Architecture.r5, AArch64Architecture.r6, AArch64Architecture.r7, INDIRECT_RESULT},\n-        new VMStorage[] { AArch64Architecture.v0, AArch64Architecture.v1, AArch64Architecture.v2, AArch64Architecture.v3, AArch64Architecture.v4, AArch64Architecture.v5, AArch64Architecture.v6, AArch64Architecture.v7 },\n-        new VMStorage[] { AArch64Architecture.r0, AArch64Architecture.r1 },\n-        new VMStorage[] { AArch64Architecture.v0, AArch64Architecture.v1, AArch64Architecture.v2, AArch64Architecture.v3 },\n-        new VMStorage[] { AArch64Architecture.r9, AArch64Architecture.r10, AArch64Architecture.r11, AArch64Architecture.r12, AArch64Architecture.r13, AArch64Architecture.r14, AArch64Architecture.r15 },\n-        new VMStorage[] { AArch64Architecture.v16, AArch64Architecture.v17, AArch64Architecture.v18, AArch64Architecture.v19, AArch64Architecture.v20, AArch64Architecture.v21, AArch64Architecture.v22, AArch64Architecture.v23, AArch64Architecture.v25,\n-                          AArch64Architecture.v26, AArch64Architecture.v27, AArch64Architecture.v28, AArch64Architecture.v29, AArch64Architecture.v30, AArch64Architecture.v31 },\n+    private static final ABIDescriptor C = abiFor(\n+        new VMStorage[] { r0, r1, r2, r3, r4, r5, r6, r7, INDIRECT_RESULT},\n+        new VMStorage[] { v0, v1, v2, v3, v4, v5, v6, v7 },\n+        new VMStorage[] { r0, r1 },\n+        new VMStorage[] { v0, v1, v2, v3 },\n+        new VMStorage[] { r9, r10, r11, r12, r13, r14, r15 },\n+        new VMStorage[] { v16, v17, v18, v19, v20, v21, v22, v23, v25,\n+                          v26, v27, v28, v29, v30, v31 },\n@@ -191,1 +192,1 @@\n-                AArch64Architecture.stackStorage((int)(stackOffset \/ STACK_SLOT_SIZE));\n+                stackStorage((int)(stackOffset \/ STACK_SLOT_SIZE));\n@@ -233,2 +234,2 @@\n-            nRegs[AArch64Architecture.StorageClasses.INTEGER] = MAX_REGISTER_ARGUMENTS;\n-            nRegs[AArch64Architecture.StorageClasses.VECTOR] = MAX_REGISTER_ARGUMENTS;\n+            nRegs[StorageClasses.INTEGER] = MAX_REGISTER_ARGUMENTS;\n+            nRegs[StorageClasses.VECTOR] = MAX_REGISTER_ARGUMENTS;\n@@ -311,1 +312,1 @@\n-                        AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        StorageClasses.INTEGER, layout);\n@@ -318,1 +319,1 @@\n-                            boolean useFloat = storage.type() == AArch64Architecture.StorageClasses.VECTOR;\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -337,1 +338,1 @@\n-                        AArch64Architecture.StorageClasses.INTEGER, AArch64.C_POINTER);\n+                        StorageClasses.INTEGER, AArch64.C_POINTER);\n@@ -345,1 +346,1 @@\n-                        AArch64Architecture.StorageClasses.VECTOR, group.memberLayouts().size());\n+                        StorageClasses.VECTOR, group.memberLayouts().size());\n@@ -351,1 +352,1 @@\n-                            boolean useFloat = storage.type() == AArch64Architecture.StorageClasses.VECTOR;\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -368,1 +369,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -374,1 +375,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -380,1 +381,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.VECTOR, layout);\n+                        storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n@@ -413,1 +414,1 @@\n-                        AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        StorageClasses.INTEGER, layout);\n@@ -421,1 +422,1 @@\n-                            boolean useFloat = storage.type() == AArch64Architecture.StorageClasses.VECTOR;\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -435,1 +436,1 @@\n-                        AArch64Architecture.StorageClasses.INTEGER, AArch64.C_POINTER);\n+                        StorageClasses.INTEGER, AArch64.C_POINTER);\n@@ -446,1 +447,1 @@\n-                        AArch64Architecture.StorageClasses.VECTOR, group.memberLayouts().size());\n+                        StorageClasses.VECTOR, group.memberLayouts().size());\n@@ -452,1 +453,1 @@\n-                            boolean useFloat = storage.type() == AArch64Architecture.StorageClasses.VECTOR;\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -466,1 +467,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -473,1 +474,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.INTEGER, layout);\n+                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -479,1 +480,1 @@\n-                        storageCalculator.nextStorage(AArch64Architecture.StorageClasses.VECTOR, layout);\n+                        storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":29,"deletions":28,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.internal.foreign.abi.x64.X86_64Architecture;\n@@ -52,0 +51,1 @@\n+import static jdk.internal.foreign.abi.x64.X86_64Architecture.*;\n@@ -60,5 +60,5 @@\n-    private static final ABIDescriptor CSysV = X86_64Architecture.abiFor(\n-        new VMStorage[] { X86_64Architecture.rdi, X86_64Architecture.rsi, X86_64Architecture.rdx, X86_64Architecture.rcx, X86_64Architecture.r8, X86_64Architecture.r9, X86_64Architecture.rax },\n-        new VMStorage[] { X86_64Architecture.xmm0, X86_64Architecture.xmm1, X86_64Architecture.xmm2, X86_64Architecture.xmm3, X86_64Architecture.xmm4, X86_64Architecture.xmm5, X86_64Architecture.xmm6, X86_64Architecture.xmm7 },\n-        new VMStorage[] { X86_64Architecture.rax, X86_64Architecture.rdx },\n-        new VMStorage[] { X86_64Architecture.xmm0, X86_64Architecture.xmm1 },\n+    private static final ABIDescriptor CSysV = abiFor(\n+        new VMStorage[] { rdi, rsi, rdx, rcx, r8, r9, rax },\n+        new VMStorage[] { xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7 },\n+        new VMStorage[] { rax, rdx },\n+        new VMStorage[] { xmm0, xmm1 },\n@@ -66,2 +66,2 @@\n-        new VMStorage[] { X86_64Architecture.r10, X86_64Architecture.r11 },\n-        new VMStorage[] { X86_64Architecture.xmm8, X86_64Architecture.xmm9, X86_64Architecture.xmm10, X86_64Architecture.xmm11, X86_64Architecture.xmm12, X86_64Architecture.xmm13, X86_64Architecture.xmm14, X86_64Architecture.xmm15 },\n+        new VMStorage[] { r10, r11 },\n+        new VMStorage[] { xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15 },\n@@ -111,1 +111,1 @@\n-                    List.of(vmStore(X86_64Architecture.rax, long.class)));\n+                    List.of(vmStore(rax, long.class)));\n@@ -161,1 +161,1 @@\n-            return type == X86_64Architecture.StorageClasses.INTEGER ?\n+            return type == StorageClasses.INTEGER ?\n@@ -168,1 +168,1 @@\n-            VMStorage storage = X86_64Architecture.stackStorage((int)stackOffset);\n+            VMStorage storage = stackStorage((int)stackOffset);\n@@ -207,1 +207,1 @@\n-                storage[i] = nextStorage(sse ? X86_64Architecture.StorageClasses.VECTOR : X86_64Architecture.StorageClasses.INTEGER);\n+                storage[i] = nextStorage(sse ? StorageClasses.VECTOR : StorageClasses.INTEGER);\n@@ -214,1 +214,1 @@\n-                case X86_64Architecture.StorageClasses.INTEGER:\n+                case StorageClasses.INTEGER:\n@@ -216,1 +216,1 @@\n-                case X86_64Architecture.StorageClasses.VECTOR:\n+                case StorageClasses.VECTOR:\n@@ -225,1 +225,1 @@\n-                case X86_64Architecture.StorageClasses.INTEGER:\n+                case StorageClasses.INTEGER:\n@@ -228,1 +228,1 @@\n-                case X86_64Architecture.StorageClasses.VECTOR:\n+                case StorageClasses.VECTOR:\n@@ -269,1 +269,1 @@\n-                        boolean useFloat = storage.type() == X86_64Architecture.StorageClasses.VECTOR;\n+                        boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -279,1 +279,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.INTEGER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -284,1 +284,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.INTEGER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -289,1 +289,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.VECTOR);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR);\n@@ -321,1 +321,1 @@\n-                        boolean useFloat = storage.type() == X86_64Architecture.StorageClasses.VECTOR;\n+                        boolean useFloat = storage.type() == StorageClasses.VECTOR;\n@@ -330,1 +330,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.INTEGER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -336,1 +336,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.INTEGER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.INTEGER);\n@@ -341,1 +341,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(X86_64Architecture.StorageClasses.VECTOR);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageClasses.VECTOR);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}