{"files":[{"patch":"@@ -72,0 +72,3 @@\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerUnnamed := \/EHsc\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerModule := \/EHsc\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLoaderLookupInvoker := \/EHsc\n@@ -74,0 +77,3 @@\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerUnnamed := $(LIBCXX)\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerModule := $(LIBCXX)\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLoaderLookupInvoker := $(LIBCXX)\n@@ -80,0 +86,3 @@\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerUnnamed := $(LIBCXX) -pthread\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLinkerInvokerModule := $(LIBCXX) -pthread\n+  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libLoaderLookupInvoker := $(LIBCXX) -pthread\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.loader.BuiltinClassLoader;\n@@ -160,2 +161,2 @@\n-        MemorySession loaderSession = (loader == null) ?\n-                MemorySession.global() : \/\/ boot loader never goes away\n+        MemorySession loaderSession = (loader == null || loader instanceof BuiltinClassLoader) ?\n+                MemorySession.global() : \/\/ builtin loaders never go away\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -114,5 +114,1 @@\n-        class Holder {\n-            private final static Module FALLBACK_MODULE =\n-                    SharedSecrets.getJavaLangAccess().defineUnnamedModule(null); \/\/ lazy init\n-        }\n-        \/\/ if there is no caller class, act as if the call came from an unnamed module\n+        \/\/ if there is no caller class, act as if the call came from unnamed module of system class loader\n@@ -120,1 +116,1 @@\n-                currentClass.getModule() : Holder.FALLBACK_MODULE;\n+                currentClass.getModule() : ClassLoader.getSystemClassLoader().getUnnamedModule();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+    static final String PANAMA_JNI = \"panama_module\/org.openjdk.foreigntest.PanamaMainJNI\";\n@@ -133,0 +134,1 @@\n+                { \"panama_enable_native_access_jni\", PANAMA_JNI, successNoWarning(), new String[]{\"--enable-native-access=ALL-UNNAMED\"} },\n@@ -137,0 +139,1 @@\n+                { \"panama_comma_separated_enable_jni\", PANAMA_JNI, successNoWarning(), new String[]{\"--enable-native-access=java.base,ALL-UNNAMED\"} },\n@@ -141,0 +144,1 @@\n+                { \"panama_enable_native_access_warn_jni\", PANAMA_JNI, successWithWarning(\"ALL-UNNAMED\"), new String[]{} },\n@@ -170,1 +174,3 @@\n-        Stream<String> s1 = Stream.of(vmopts);\n+        Stream<String> s1 = Stream.concat(\n+                Stream.of(vmopts),\n+                Stream.of(\"-Djava.library.path=\" + System.getProperty(\"java.library.path\")));\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+\n+    static {\n+        System.loadLibrary(\"LinkerInvokerUnnamed\");\n+    }\n+\n@@ -37,0 +42,1 @@\n+        testJNIAccess();\n@@ -59,0 +65,6 @@\n+\n+   public static void testJNIAccess() {\n+        nativeLinker0();\n+    }\n+\n+    static native void nativeLinker0();\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include \"jni.h\"\n+#include <thread>\n+\n+void call(JavaVM *jvm) {\n+    JNIEnv* env;\n+    jvm->AttachCurrentThread((void**)&env, NULL);\n+    jclass linkerClass = env->FindClass(\"java\/lang\/foreign\/Linker\");\n+    jmethodID nativeLinkerMethod = env->GetStaticMethodID(linkerClass, \"nativeLinker\", \"()Ljava\/lang\/foreign\/Linker;\");\n+    env->CallStaticVoidMethod(linkerClass, nativeLinkerMethod);\n+    jvm->DetachCurrentThread();\n+}\n+\n+extern \"C\" {\n+    JNIEXPORT void JNICALL\n+    Java_org_openjdk_foreigntest_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n+        JavaVM* jvm;\n+        env->GetJavaVM(&jvm);\n+        std::thread thrd(call, jvm);\n+        thrd.join();\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/libLinkerInvokerUnnamed.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+package org.openjdk.foreigntest;\n+\n+public class PanamaMainJNI {\n+\n+    static {\n+        System.loadLibrary(\"LinkerInvokerModule\");\n+    }\n+\n+    public static void main(String[] args) {\n+        testDirectAccessCLinker();\n+    }\n+\n+    public static void testDirectAccessCLinker() {\n+        System.out.println(\"Trying to get Linker\");\n+        nativeLinker0();\n+        System.out.println(\"Got Linker\");\n+    }\n+\n+    static native void nativeLinker0();\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainJNI.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include \"jni.h\"\n+#include <thread>\n+\n+void call(JavaVM *jvm) {\n+    JNIEnv* env;\n+    jvm->AttachCurrentThread((void**)&env, NULL);\n+    jclass linkerClass = env->FindClass(\"java\/lang\/foreign\/Linker\");\n+    jmethodID nativeLinkerMethod = env->GetStaticMethodID(linkerClass, \"nativeLinker\", \"()Ljava\/lang\/foreign\/Linker;\");\n+    env->CallStaticVoidMethod(linkerClass, nativeLinkerMethod);\n+    jvm->DetachCurrentThread();\n+}\n+\n+extern \"C\" {\n+    JNIEXPORT void JNICALL\n+    Java_org_openjdk_foreigntest_PanamaMainJNI_nativeLinker0(JNIEnv *env, jclass cls) {\n+        JavaVM* jvm;\n+        env->GetJavaVM(&jvm);\n+        std::thread thrd(call, jvm);\n+        thrd.join();\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/libLinkerInvokerModule.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.SymbolLookup;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @run testng\/othervm TestLoaderLookupJNI\n+ *\/\n+public class TestLoaderLookupJNI {\n+\n+    static {\n+        System.loadLibrary(\"LoaderLookupInvoker\");\n+    }\n+\n+    @Test\n+    void testLoaderLookupJNI() {\n+        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n+        assertTrue(loaderLookup.lookup(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n+        \/\/ now try calling via JNI\n+        loaderLookup = loaderLookup0(); \/\/ lookup backed by application loader, so can see same symbols\n+        assertTrue(loaderLookup.lookup(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n+    }\n+\n+    static native SymbolLookup loaderLookup0();\n+}\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestLoaderLookupJNI.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include \"jni.h\"\n+#include <thread>\n+\n+jobject res;\n+\n+jobject call(JavaVM *jvm) {\n+    JNIEnv* env;\n+    jvm->AttachCurrentThread((void**)&env, NULL);\n+    jclass symbolLookupClass = env->FindClass(\"java\/lang\/foreign\/SymbolLookup\");\n+    jmethodID loaderLookupMethod = env->GetStaticMethodID(symbolLookupClass, \"loaderLookup\", \"()Ljava\/lang\/foreign\/SymbolLookup;\");\n+    res = env->NewGlobalRef(env->CallStaticObjectMethod(symbolLookupClass, loaderLookupMethod));\n+    jvm->DetachCurrentThread();\n+    return res;\n+}\n+\n+extern \"C\" {\n+    JNIEXPORT jobject JNICALL\n+    Java_TestLoaderLookupJNI_loaderLookup0(JNIEnv *env, jclass cls) {\n+        JavaVM* jvm;\n+        env->GetJavaVM(&jvm);\n+        std::thread thrd(call, jvm);\n+        thrd.join();\n+        return res;\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/libLoaderLookupInvoker.cpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}