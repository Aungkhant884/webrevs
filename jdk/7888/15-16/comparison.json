{"files":[{"patch":"@@ -57,1 +57,1 @@\n-        STRUCT(\"\", Long::sum),\n+        STRUCT(\"\", Math::addExact),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.function.Supplier;\n@@ -393,1 +394,1 @@\n-     * MemoryLayout.sequenceLayout(Long.MAX_VALUE, this)\n+     * MemoryLayout.sequenceLayout(0, this)\n@@ -408,1 +409,1 @@\n-        return computePathOp(LayoutPath.rootPath(MemoryLayout.sequenceLayout(Long.MAX_VALUE, this)),\n+        return computePathOp(LayoutPath.rootPath(MemoryLayout.sequenceLayout(0, this)),\n@@ -678,1 +679,2 @@\n-        return new SequenceLayout(elementCount, Objects.requireNonNull(elementLayout));\n+        return wrapOverflow(() ->\n+                new SequenceLayout(elementCount, Objects.requireNonNull(elementLayout)));\n@@ -689,4 +691,5 @@\n-        return new GroupLayout(GroupLayout.Kind.STRUCT,\n-                Stream.of(elements)\n-                        .map(Objects::requireNonNull)\n-                        .collect(Collectors.toList()));\n+        return MemoryLayout.wrapOverflow(() ->\n+                new GroupLayout(GroupLayout.Kind.STRUCT,\n+                        Stream.of(elements)\n+                                .map(Objects::requireNonNull)\n+                                .collect(Collectors.toList())));\n@@ -708,0 +711,8 @@\n+\n+    private static <L extends MemoryLayout> L wrapOverflow(Supplier<L> layoutSupplier) {\n+        try {\n+            return layoutSupplier.get();\n+        } catch (ArithmeticException ex) {\n+            throw new IllegalArgumentException(\"Layout size exceeds Long.MAX_VALUE\");\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        super(elemCount * elementLayout.bitSize(), alignment, name);\n+        super(Math.multiplyExact(elemCount, elementLayout.bitSize()), alignment, name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,0 +133,19 @@\n+    @Test\n+    public void testSequenceOverflow() {\n+        assertThrows(IllegalArgumentException.class, \/\/ negative\n+                () -> MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_SHORT));\n+        assertThrows(IllegalArgumentException.class, \/\/ flip back to positive\n+                () -> MemoryLayout.sequenceLayout(Long.MAX_VALUE\/3, JAVA_LONG));\n+    }\n+\n+    @Test\n+    public void testStructOverflow() {\n+        assertThrows(IllegalArgumentException.class, \/\/ negative\n+                () -> MemoryLayout.structLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE),\n+                                                MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE)));\n+        assertThrows(IllegalArgumentException.class, \/\/ flip back to positive\n+                () -> MemoryLayout.structLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE),\n+                                                MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE),\n+                                                MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE)));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}