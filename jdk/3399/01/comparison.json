{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -770,1 +770,1 @@\n-            tree.expr = typeCast != null && types.isSameType(typeCast.type, originalTarget)\n+            tree.expr = typeCast != null && types.isSameType(typeCast.type, tree.type)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8263642\n+ * @summary javac should not emit duplicate checkcast for first bound of intersection type in cast\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main DuplicatedCheckcastTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Method;\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class DuplicatedCheckcastTest extends TestRunner {\n+    ToolBox tb;\n+\n+    public DuplicatedCheckcastTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        DuplicatedCheckcastTest t = new DuplicatedCheckcastTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testDuplicatedCheckcast() throws Exception {\n+        String code = \"\"\"\n+                class IntersectionTypeTest {\n+                    interface I1 { }\n+                    static class C1 { }\n+                    static Object test(Object o) {\n+                        return (C1 & I1) o;\n+                    }\n+                }\"\"\";\n+        Path curPath = Path.of(\".\");\n+        new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .run();\n+        ClassFile cf = ClassFile.read(curPath.resolve(\"IntersectionTypeTest.class\"));\n+        ArrayList<Instruction> checkCastList = new ArrayList<>();\n+        for (Method method : cf.methods) {\n+            if (\"test\".equals(method.getName(cf.constant_pool))) {\n+                Code_attribute code_attribute = (Code_attribute) method.attributes.get(Attribute.Code);\n+                for (Instruction instruction : code_attribute.getInstructions()) {\n+                    if (\"checkcast\".equals(instruction.getMnemonic())) {\n+                        checkCastList.add(instruction);\n+                    }\n+                }\n+            }\n+        }\n+        if (checkCastList.size() != 2) {\n+            throw new AssertionError(\"The number of the instruction 'checkcast' is not right. \" +\n+                    \"Expected number: 2, actual number: \" + checkCastList.size());\n+        }\n+        \/\/ first checkcast\n+        int classIndex = checkCastList.get(0).getUnsignedShort(1);\n+        CONSTANT_Class_info classInfo = cf.constant_pool.getClassInfo(classIndex);\n+        String className = classInfo.getName();\n+        if (!\"IntersectionTypeTest$I1\".equals(className)) {\n+            throw new AssertionError(\"The type of the first 'checkcast' is not right. \" +\n+                    \"Expected: IntersectionTypeTest$I1, actual: \" + className);\n+        }\n+        \/\/ second checkcast\n+        classIndex = checkCastList.get(1).getUnsignedShort(1);\n+        classInfo = cf.constant_pool.getClassInfo(classIndex);\n+        className = classInfo.getName();\n+        if (!\"IntersectionTypeTest$C1\".equals(className)) {\n+            throw new AssertionError(\"The type of the second 'checkcast' is not right. \" +\n+                    \"Expected: IntersectionTypeTest$C1, actual: \" + className);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}