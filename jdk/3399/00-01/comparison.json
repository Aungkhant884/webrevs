{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -770,1 +770,1 @@\n-            tree.expr = typeCast != null && types.isSameType(typeCast.type, originalTarget)\n+            tree.expr = typeCast != null && types.isSameType(typeCast.type, tree.type)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2223,2 +2223,1 @@\n-           types.asSuper(tree.expr.type, tree.clazz.type.tsym) == null &&\n-           tree.clazz.getTag() != TYPEINTERSECTION) {\n+           types.asSuper(tree.expr.type, tree.clazz.type.tsym) == null) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.ArrayList;\n@@ -43,0 +44,1 @@\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n@@ -77,1 +79,1 @@\n-        int checkcastNumber = 0;\n+        ArrayList<Instruction> checkCastList = new ArrayList<>();\n@@ -83,1 +85,1 @@\n-                        checkcastNumber++;\n+                        checkCastList.add(instruction);\n@@ -88,1 +90,1 @@\n-        if (checkcastNumber != 2) {\n+        if (checkCastList.size() != 2) {\n@@ -90,1 +92,17 @@\n-                    \"Expected number: 2, actual number: \" + checkcastNumber);\n+                    \"Expected number: 2, actual number: \" + checkCastList.size());\n+        }\n+        \/\/ first checkcast\n+        int classIndex = checkCastList.get(0).getUnsignedShort(1);\n+        CONSTANT_Class_info classInfo = cf.constant_pool.getClassInfo(classIndex);\n+        String className = classInfo.getName();\n+        if (!\"IntersectionTypeTest$I1\".equals(className)) {\n+            throw new AssertionError(\"The type of the first 'checkcast' is not right. \" +\n+                    \"Expected: IntersectionTypeTest$I1, actual: \" + className);\n+        }\n+        \/\/ second checkcast\n+        classIndex = checkCastList.get(1).getUnsignedShort(1);\n+        classInfo = cf.constant_pool.getClassInfo(classIndex);\n+        className = classInfo.getName();\n+        if (!\"IntersectionTypeTest$C1\".equals(className)) {\n+            throw new AssertionError(\"The type of the second 'checkcast' is not right. \" +\n+                    \"Expected: IntersectionTypeTest$C1, actual: \" + className);\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"}]}