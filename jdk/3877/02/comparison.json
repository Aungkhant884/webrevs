{"files":[{"patch":"@@ -72,1 +72,0 @@\n-  Thread* THREAD = Thread::current();\n","filename":"src\/hotspot\/cpu\/x86\/jvmciCodeInstaller_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -60,1 +60,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -96,1 +96,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -108,1 +108,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -121,1 +121,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -159,1 +159,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -203,1 +203,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n","filename":"src\/hotspot\/cpu\/zero\/stack_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    JavaThread *thread = THREAD->as_Java_thread();\n+    JavaThread *thread = THREAD;\n@@ -319,1 +319,1 @@\n-  ZeroStack *stack = THREAD->as_Java_thread()->zero_stack();\n+  ZeroStack *stack = THREAD->zero_stack();\n","filename":"src\/hotspot\/cpu\/zero\/stubGenerator_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -125,1 +125,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -173,1 +173,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -307,1 +307,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -554,1 +554,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -642,1 +642,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -733,1 +733,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -749,1 +749,1 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n+  JavaThread *thread = THREAD;\n@@ -824,1 +824,1 @@\n-  ZeroStack *stack = THREAD->as_Java_thread()->zero_stack();\n+  ZeroStack *stack = THREAD->zero_stack();\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2545,1 +2545,1 @@\n-                         JavaCallArguments* args, Thread* thread) {\n+                         JavaCallArguments* args, JavaThread* thread) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2224,1 +2224,1 @@\n-                              Thread* thread) {\n+                              JavaThread* thread) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4767,1 +4767,1 @@\n-                         JavaCallArguments* args, Thread* thread) {\n+                         JavaCallArguments* args, JavaThread* thread) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread) {\n+void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, JavaThread* thread) {\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread) {\n+void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, JavaThread* thread) {\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -902,2 +902,2 @@\n-  static void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n-    ResourceMark rm(THREAD);\n+  static void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n+    ResourceMark rm(current);\n@@ -907,2 +907,2 @@\n-  static void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n-    ResourceMark rm(THREAD);\n+  static void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n+    ResourceMark rm(current);\n@@ -918,1 +918,1 @@\n-    Thread* THREAD = Thread::current();\n+    Thread* current = Thread::current();\n@@ -932,1 +932,1 @@\n-        write_klass((Klass*)src, runtime_dest, type_name, bytes, THREAD);\n+        write_klass((Klass*)src, runtime_dest, type_name, bytes, current);\n@@ -936,1 +936,1 @@\n-                    runtime_dest, type_name, bytes, THREAD);\n+                    runtime_dest, type_name, bytes, current);\n@@ -940,1 +940,1 @@\n-                    runtime_dest, type_name, bytes, THREAD);\n+                    runtime_dest, type_name, bytes, current);\n@@ -943,1 +943,1 @@\n-        write_method((Method*)src, runtime_dest, type_name, bytes, THREAD);\n+        write_method((Method*)src, runtime_dest, type_name, bytes, current);\n@@ -946,1 +946,1 @@\n-        write_method(((ConstMethod*)src)->method(), runtime_dest, type_name, bytes, THREAD);\n+        write_method(((ConstMethod*)src)->method(), runtime_dest, type_name, bytes, current);\n@@ -950,1 +950,1 @@\n-          ResourceMark rm(THREAD);\n+          ResourceMark rm(current);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -525,1 +525,1 @@\n-void ClassListParser::resolve_indy(Thread* current, Symbol* class_name_symbol) {\n+void ClassListParser::resolve_indy(JavaThread* current, Symbol* class_name_symbol) {\n@@ -527,1 +527,1 @@\n-  Thread* THREAD = current; \/\/ For exception macros.\n+  JavaThread* THREAD = current; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  void resolve_indy(Thread* current, Symbol* class_name_symbol);\n+  void resolve_indy(JavaThread* current, Symbol* class_name_symbol);\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-  Thread* THREAD = Thread::current();\n@@ -253,1 +252,0 @@\n-  Thread* THREAD = Thread::current();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-void HeapShared::resolve_classes(Thread* THREAD) {\n+void HeapShared::resolve_classes(JavaThread* THREAD) {\n@@ -704,1 +704,1 @@\n-                                               int num, Thread* THREAD) {\n+                                               int num, JavaThread* THREAD) {\n@@ -714,1 +714,1 @@\n-void HeapShared::resolve_classes_for_subgraph_of(Klass* k, Thread* THREAD) {\n+void HeapShared::resolve_classes_for_subgraph_of(Klass* k, JavaThread* THREAD) {\n@@ -726,1 +726,1 @@\n-void HeapShared::initialize_from_archived_subgraph(Klass* k, Thread* THREAD) {\n+void HeapShared::initialize_from_archived_subgraph(Klass* k, JavaThread* THREAD) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -278,2 +278,2 @@\n-                                            int num, Thread* THREAD);\n-  static void resolve_classes_for_subgraph_of(Klass* k, Thread* THREAD);\n+                                            int num, JavaThread* THREAD);\n+  static void resolve_classes_for_subgraph_of(Klass* k, JavaThread* THREAD);\n@@ -389,2 +389,2 @@\n-  static void resolve_classes(Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void initialize_from_archived_subgraph(Klass* k, Thread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void resolve_classes(JavaThread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void initialize_from_archived_subgraph(Klass* k, JavaThread* THREAD) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-void MetaspaceShared::read_extra_data(Thread* current, const char* filename) {\n+void MetaspaceShared::read_extra_data(JavaThread* current, const char* filename) {\n@@ -292,1 +292,1 @@\n-      Thread* THREAD = current; \/\/ For exception macros.\n+      JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -637,1 +637,1 @@\n-  ClassLoader::initialize_shared_path(Thread::current());\n+  ClassLoader::initialize_shared_path(JavaThread::current());\n@@ -756,1 +756,1 @@\n-bool MetaspaceShared::try_link_class(Thread* current, InstanceKlass* ik) {\n+bool MetaspaceShared::try_link_class(JavaThread* current, InstanceKlass* ik) {\n@@ -758,1 +758,1 @@\n-  Thread* THREAD = current; \/\/ For exception macros.\n+  JavaThread* THREAD = current; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  static bool try_link_class(Thread* current, InstanceKlass* ik);\n+  static bool try_link_class(JavaThread* current, InstanceKlass* ik);\n@@ -187,1 +187,1 @@\n-  static void read_extra_data(Thread* current, const char* filename) NOT_CDS_RETURN;\n+  static void read_extra_data(JavaThread* current, const char* filename) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  Thread* THREAD = thread;                  \\\n+  JavaThread* THREAD = thread; \/* For exception macros. *\/ \\\n@@ -53,1 +53,1 @@\n-  Thread* THREAD = thread;                  \\\n+  JavaThread* THREAD = thread; \/* For exception macros. *\/ \\\n@@ -58,2 +58,2 @@\n-  CompilerThread* thread=CompilerThread::current(); \\\n-  Thread* THREAD = thread;\n+  CompilerThread* thread = CompilerThread::current(); \\\n+  JavaThread* THREAD = thread; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5752,1 +5752,0 @@\n-  assert(THREAD->is_Java_thread(), \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-ClassFileStream* ClassPathDirEntry::open_stream(Thread* current, const char* name) {\n+ClassFileStream* ClassPathDirEntry::open_stream(JavaThread* current, const char* name) {\n@@ -289,1 +289,1 @@\n-u1* ClassPathZipEntry::open_entry(Thread* current, const char* name, jint* filesize, bool nul_terminate) {\n+u1* ClassPathZipEntry::open_entry(JavaThread* current, const char* name, jint* filesize, bool nul_terminate) {\n@@ -291,1 +291,1 @@\n-  ThreadToNativeFromVM ttn(current->as_Java_thread());\n+  ThreadToNativeFromVM ttn(current);\n@@ -317,1 +317,1 @@\n-ClassFileStream* ClassPathZipEntry::open_stream(Thread* current, const char* name) {\n+ClassFileStream* ClassPathZipEntry::open_stream(JavaThread* current, const char* name) {\n@@ -375,1 +375,1 @@\n-ClassFileStream* ClassPathImageEntry::open_stream(Thread* current, const char* name) {\n+ClassFileStream* ClassPathImageEntry::open_stream(JavaThread* current, const char* name) {\n@@ -386,1 +386,1 @@\n-ClassFileStream* ClassPathImageEntry::open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data) {\n+ClassFileStream* ClassPathImageEntry::open_stream_for_loader(JavaThread* current, const char* name, ClassLoaderData* loader_data) {\n@@ -502,1 +502,1 @@\n-void ClassLoader::setup_bootstrap_search_path(Thread* current) {\n+void ClassLoader::setup_bootstrap_search_path(JavaThread* current) {\n@@ -515,1 +515,1 @@\n-void ClassLoader::setup_app_search_path(Thread* current, const char *class_path) {\n+void ClassLoader::setup_app_search_path(JavaThread* current, const char *class_path) {\n@@ -543,1 +543,1 @@\n-void ClassLoader::setup_module_search_path(Thread* current, const char* path) {\n+void ClassLoader::setup_module_search_path(JavaThread* current, const char* path) {\n@@ -572,1 +572,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* current = JavaThread::current();\n@@ -586,1 +586,1 @@\n-    ResourceMark rm(THREAD);\n+    ResourceMark rm(current);\n@@ -594,1 +594,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(THREAD, path, &st, false, false);\n+        ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n@@ -626,1 +626,1 @@\n-void ClassLoader::setup_bootstrap_search_path_impl(Thread* current, const char *class_path) {\n+void ClassLoader::setup_bootstrap_search_path_impl(JavaThread* current, const char *class_path) {\n@@ -678,1 +678,1 @@\n-void ClassLoader::add_to_exploded_build_list(Thread* current, Symbol* module_sym) {\n+void ClassLoader::add_to_exploded_build_list(JavaThread* current, Symbol* module_sym) {\n@@ -721,1 +721,1 @@\n-ClassPathEntry* ClassLoader::create_class_path_entry(Thread* current,\n+ClassPathEntry* ClassLoader::create_class_path_entry(JavaThread* current,\n@@ -797,1 +797,1 @@\n-void ClassLoader::add_to_app_classpath_entries(Thread* current,\n+void ClassLoader::add_to_app_classpath_entries(JavaThread* current,\n@@ -830,1 +830,1 @@\n-bool ClassLoader::update_class_path_entry_list(Thread* current,\n+bool ClassLoader::update_class_path_entry_list(JavaThread* current,\n@@ -1077,1 +1077,1 @@\n-ClassFileStream* ClassLoader::search_module_entries(Thread* current,\n+ClassFileStream* ClassLoader::search_module_entries(JavaThread* current,\n@@ -1133,1 +1133,0 @@\n-  assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n@@ -1255,1 +1254,1 @@\n-void ClassLoader::record_result(Thread* current, InstanceKlass* ik, const ClassFileStream* stream) {\n+void ClassLoader::record_result(JavaThread* current, InstanceKlass* ik, const ClassFileStream* stream) {\n@@ -1437,1 +1436,1 @@\n-void ClassLoader::initialize_shared_path(Thread* current) {\n+void ClassLoader::initialize_shared_path(JavaThread* current) {\n@@ -1510,1 +1509,1 @@\n-void ClassLoader::classLoader_init2(Thread* current) {\n+void ClassLoader::classLoader_init2(JavaThread* current) {\n@@ -1554,1 +1553,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* current = JavaThread::current();\n@@ -1567,1 +1566,1 @@\n-    MutexLocker ml(THREAD, Module_lock);\n+    MutexLocker ml(current, Module_lock);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  virtual ClassFileStream* open_stream(Thread* current, const char* name) = 0;\n+  virtual ClassFileStream* open_stream(JavaThread* current, const char* name) = 0;\n@@ -70,1 +70,1 @@\n-  virtual ClassFileStream* open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data) {\n+  virtual ClassFileStream* open_stream_for_loader(JavaThread* current, const char* name, ClassLoaderData* loader_data) {\n@@ -84,1 +84,1 @@\n-  ClassFileStream* open_stream(Thread* current, const char* name);\n+  ClassFileStream* open_stream(JavaThread* current, const char* name);\n@@ -111,2 +111,2 @@\n-  u1* open_entry(Thread* current, const char* name, jint* filesize, bool nul_terminate);\n-  ClassFileStream* open_stream(Thread* current, const char* name);\n+  u1* open_entry(JavaThread* current, const char* name, jint* filesize, bool nul_terminate);\n+  ClassFileStream* open_stream(JavaThread* current, const char* name);\n@@ -130,2 +130,2 @@\n-  ClassFileStream* open_stream(Thread* current, const char* name);\n-  ClassFileStream* open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data);\n+  ClassFileStream* open_stream(JavaThread* current, const char* name);\n+  ClassFileStream* open_stream_for_loader(JavaThread* current, const char* name, ClassLoaderData* loader_data);\n@@ -224,3 +224,3 @@\n-  CDS_ONLY(static void setup_app_search_path(Thread* current, const char* class_path);)\n-  CDS_ONLY(static void setup_module_search_path(Thread* current, const char* path);)\n-  static void add_to_app_classpath_entries(Thread* current,\n+  CDS_ONLY(static void setup_app_search_path(JavaThread* current, const char* class_path);)\n+  CDS_ONLY(static void setup_module_search_path(JavaThread* current, const char* path);)\n+  static void add_to_app_classpath_entries(JavaThread* current,\n@@ -243,2 +243,2 @@\n-  static void setup_bootstrap_search_path(Thread* current);\n-  static void setup_bootstrap_search_path_impl(Thread* current, const char *class_path);\n+  static void setup_bootstrap_search_path(JavaThread* current);\n+  static void setup_bootstrap_search_path_impl(JavaThread* current, const char *class_path);\n@@ -260,1 +260,1 @@\n-  static ClassPathEntry* create_class_path_entry(Thread* current,\n+  static ClassPathEntry* create_class_path_entry(JavaThread* current,\n@@ -272,1 +272,1 @@\n-  static bool update_class_path_entry_list(Thread* current,\n+  static bool update_class_path_entry_list(JavaThread* current,\n@@ -313,1 +313,1 @@\n-  static void add_to_exploded_build_list(Thread* current, Symbol* module_name);\n+  static void add_to_exploded_build_list(JavaThread* current, Symbol* module_name);\n@@ -316,1 +316,1 @@\n-  static ClassFileStream* search_module_entries(Thread* current,\n+  static ClassFileStream* search_module_entries(JavaThread* current,\n@@ -340,2 +340,2 @@\n-  static void classLoader_init2(Thread* current);\n-  CDS_ONLY(static void initialize_shared_path(Thread* current);)\n+  static void classLoader_init2(JavaThread* current);\n+  CDS_ONLY(static void initialize_shared_path(JavaThread* current);)\n@@ -368,1 +368,1 @@\n-  static void  record_result(Thread* current, InstanceKlass* ik, const ClassFileStream* stream);\n+  static void  record_result(JavaThread* current, InstanceKlass* ik, const ClassFileStream* stream);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -106,2 +106,1 @@\n-  Thread* THREAD = Thread::current();\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-void ClassLoaderExt::setup_app_search_path(Thread* current) {\n+void ClassLoaderExt::setup_app_search_path(JavaThread* current) {\n@@ -84,1 +84,1 @@\n-void ClassLoaderExt::process_module_table(Thread* current, ModuleEntryTable* met) {\n+void ClassLoaderExt::process_module_table(JavaThread* current, ModuleEntryTable* met) {\n@@ -97,1 +97,1 @@\n-void ClassLoaderExt::setup_module_paths(Thread* current) {\n+void ClassLoaderExt::setup_module_paths(JavaThread* current) {\n@@ -106,1 +106,2 @@\n-char* ClassLoaderExt::read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size, bool clean_text) {\n+char* ClassLoaderExt::read_manifest(JavaThread* current, ClassPathEntry* entry,\n+                                    jint *manifest_size, bool clean_text) {\n@@ -166,1 +167,1 @@\n-void ClassLoaderExt::process_jar_manifest(Thread* current, ClassPathEntry* entry,\n+void ClassLoaderExt::process_jar_manifest(JavaThread* current, ClassPathEntry* entry,\n@@ -228,1 +229,1 @@\n-void ClassLoaderExt::setup_search_paths(Thread* current) {\n+void ClassLoaderExt::setup_search_paths(JavaThread* current) {\n@@ -273,1 +274,1 @@\n-                               THREAD->as_Java_thread()->get_thread_stat()->perf_timers_addr(),\n+                               THREAD->get_thread_stat()->perf_timers_addr(),\n@@ -303,1 +304,1 @@\n-ClassPathEntry* ClassLoaderExt::find_classpath_entry_from_cache(Thread* current, const char* path) {\n+ClassPathEntry* ClassLoaderExt::find_classpath_entry_from_cache(JavaThread* current, const char* path) {\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  static void setup_app_search_path(Thread* current); \/\/ Only when -Xshare:dump\n-  static void process_module_table(Thread* current, ModuleEntryTable* met);\n+  static void setup_app_search_path(JavaThread* current); \/\/ Only when -Xshare:dump\n+  static void process_module_table(JavaThread* current, ModuleEntryTable* met);\n@@ -60,2 +60,2 @@\n-  static char* read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size, bool clean_text);\n-  static ClassPathEntry* find_classpath_entry_from_cache(Thread* current, const char* path);\n+  static char* read_manifest(JavaThread* current, ClassPathEntry* entry, jint *manifest_size, bool clean_text);\n+  static ClassPathEntry* find_classpath_entry_from_cache(JavaThread* current, const char* path);\n@@ -64,1 +64,1 @@\n-  static void process_jar_manifest(Thread* current, ClassPathEntry* entry, bool check_for_duplicates);\n+  static void process_jar_manifest(JavaThread* current, ClassPathEntry* entry, bool check_for_duplicates);\n@@ -69,2 +69,2 @@\n-  static void setup_search_paths(Thread* current);\n-  static void setup_module_paths(Thread* current);\n+  static void setup_search_paths(JavaThread* current);\n+  static void setup_module_paths(JavaThread* current);\n@@ -72,1 +72,1 @@\n-  static char* read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size) {\n+  static char* read_manifest(JavaThread* current, ClassPathEntry* entry, jint *manifest_size) {\n@@ -78,1 +78,1 @@\n-  static char* read_raw_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size) {\n+  static char* read_raw_manifest(JavaThread* current, ClassPathEntry* entry, jint *manifest_size) {\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-    JavaThread* thread = THREAD->as_Java_thread();\n+    JavaThread* thread = THREAD;\n@@ -444,1 +444,1 @@\n-  { JavaThread* thread = THREAD->as_Java_thread();\n+  { JavaThread* thread = THREAD;\n@@ -524,0 +524,8 @@\n+  jchar* result = as_unicode_string_or_null(java_string, length);\n+  if (result == NULL) {\n+    THROW_MSG_0(vmSymbols::java_lang_OutOfMemoryError(), \"could not allocate Unicode string\");\n+  }\n+  return result;\n+}\n+\n+jchar* java_lang_String::as_unicode_string_or_null(oop java_string, int& length) {\n@@ -539,2 +547,0 @@\n-  } else {\n-    THROW_MSG_0(vmSymbols::java_lang_OutOfMemoryError(), \"could not allocate Unicode string\");\n@@ -1090,1 +1096,1 @@\n-    set_mirror_module_field(THREAD->as_Java_thread(), k, mirror, module);\n+    set_mirror_module_field(THREAD, k, mirror, module);\n@@ -1397,1 +1403,1 @@\n-  set_mirror_module_field(THREAD->as_Java_thread(), k, mirror, module);\n+  set_mirror_module_field(THREAD, k, mirror, module);\n@@ -2406,1 +2412,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -2471,1 +2477,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -2607,1 +2613,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -2634,1 +2640,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -2702,3 +2708,3 @@\n-  Thread* THREAD = Thread::current();\n-  objArrayHandle result(THREAD, objArrayOop(backtrace(throwable)));\n-  BacktraceIterator iter(result, THREAD);\n+  JavaThread* current = JavaThread::current();\n+  objArrayHandle result(current, objArrayOop(backtrace(throwable)));\n+  BacktraceIterator iter(result, current);\n@@ -2716,1 +2722,1 @@\n-  BacktraceElement bte = iter.next(THREAD);\n+  BacktraceElement bte = iter.next(current);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+  static jchar* as_unicode_string_or_null(oop java_string, int& length);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    assert(THREAD->is_Java_thread(), \"must be JavaThread\");\n@@ -122,1 +121,1 @@\n-    const JavaThread* jt = THREAD->as_Java_thread();\n+    const JavaThread* jt = THREAD;\n@@ -174,1 +173,0 @@\n-  assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -108,1 +108,0 @@\n-    EXCEPTION_MARK;\n@@ -115,1 +114,1 @@\n-    ResourceMark rm(THREAD);\n+    ResourceMark rm;\n@@ -118,1 +117,1 @@\n-    jchar* chars = java_lang_String::as_unicode_string(val_oop, length, THREAD);\n+    jchar* chars = java_lang_String::as_unicode_string_or_null(val_oop, length);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-  Thread* THREAD = Thread::current();\n+  Thread* current = Thread::current();\n@@ -480,1 +480,1 @@\n-    if (_local_table->insert(THREAD, lookup, sym, &rehash_warning, &clean_hint)) {\n+    if (_local_table->insert(current, lookup, sym, &rehash_warning, &clean_hint)) {\n@@ -485,1 +485,1 @@\n-    if (_local_table->get(THREAD, lookup, stg, &rehash_warning)) {\n+    if (_local_table->get(current, lookup, stg, &rehash_warning)) {\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -622,1 +622,1 @@\n-  ObjectLocker ol(lockObject, THREAD->as_Java_thread());\n+  ObjectLocker ol(lockObject, THREAD);\n@@ -685,1 +685,1 @@\n-        loaded_class = handle_parallel_loading(THREAD->as_Java_thread(),\n+        loaded_class = handle_parallel_loading(THREAD,\n@@ -882,1 +882,1 @@\n-    JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n+    JvmtiExport::post_class_load(THREAD, k);\n@@ -914,1 +914,1 @@\n-  ObjectLocker ol(lockObject, THREAD->as_Java_thread());\n+  ObjectLocker ol(lockObject, THREAD);\n@@ -1213,1 +1213,1 @@\n-    ObjectLocker ol(lockObject, THREAD->as_Java_thread());\n+    ObjectLocker ol(lockObject, THREAD);\n@@ -1330,1 +1330,1 @@\n-    JavaThread* jt = THREAD->as_Java_thread();\n+    JavaThread* jt = THREAD;\n@@ -1407,1 +1407,1 @@\n-      JvmtiExport::post_class_load(THREAD->as_Java_thread(), loaded_class);\n+      JvmtiExport::post_class_load(THREAD, loaded_class);\n@@ -1433,1 +1433,1 @@\n-    assert(ObjectSynchronizer::current_thread_holds_lock(THREAD->as_Java_thread(),\n+    assert(ObjectSynchronizer::current_thread_holds_lock(THREAD,\n@@ -1480,1 +1480,1 @@\n-    JvmtiExport::post_class_load(THREAD->as_Java_thread(), k);\n+    JvmtiExport::post_class_load(THREAD, k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1723,1 +1723,1 @@\n-    JvmtiExport::post_class_load(THREAD->as_Java_thread(), loaded_lambda);\n+    JvmtiExport::post_class_load(THREAD, loaded_lambda);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n@@ -304,1 +304,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -706,1 +706,1 @@\n-      THREAD->as_Java_thread()->is_interp_only_mode()) {\n+      THREAD->is_interp_only_mode()) {\n@@ -756,1 +756,1 @@\n-      JavaThread* jt = THREAD->as_Java_thread();\n+      JavaThread* jt = THREAD;\n@@ -931,1 +931,1 @@\n-void CompilationPolicy::create_mdo(const methodHandle& mh, Thread* THREAD) {\n+void CompilationPolicy::create_mdo(const methodHandle& mh, JavaThread* THREAD) {\n@@ -944,2 +944,1 @@\n-      JavaThread* jt = THREAD->as_Java_thread();\n-      frame last_frame = jt->last_frame();\n+      frame last_frame = THREAD->last_frame();\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  static void create_mdo(const methodHandle& mh, Thread* thread);\n+  static void create_mdo(const methodHandle& mh, JavaThread* THREAD);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-void CompileBroker::compilation_init_phase1(Thread* THREAD) {\n+void CompileBroker::compilation_init_phase1(JavaThread* THREAD) {\n@@ -876,1 +876,1 @@\n-JavaThread* CompileBroker::make_thread(ThreadType type, jobject thread_handle, CompileQueue* queue, AbstractCompiler* comp, Thread* THREAD) {\n+JavaThread* CompileBroker::make_thread(ThreadType type, jobject thread_handle, CompileQueue* queue, AbstractCompiler* comp, JavaThread* THREAD) {\n@@ -1063,1 +1063,1 @@\n-void CompileBroker::possibly_add_compiler_threads(Thread* THREAD) {\n+void CompileBroker::possibly_add_compiler_threads(JavaThread* THREAD) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-  static JavaThread* make_thread(ThreadType type, jobject thread_oop, CompileQueue* queue, AbstractCompiler* comp, Thread* THREAD);\n+  static JavaThread* make_thread(ThreadType type, jobject thread_oop, CompileQueue* queue, AbstractCompiler* comp, JavaThread* THREAD);\n@@ -240,1 +240,1 @@\n-  static void possibly_add_compiler_threads(Thread* THREAD);\n+  static void possibly_add_compiler_threads(JavaThread* THREAD);\n@@ -298,1 +298,1 @@\n-  static void compilation_init_phase1(Thread* THREAD);\n+  static void compilation_init_phase1(JavaThread* THREAD);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-void AllocTracer::send_allocation_outside_tlab(Klass* klass, HeapWord* obj, size_t alloc_size, Thread* thread) {\n+void AllocTracer::send_allocation_outside_tlab(Klass* klass, HeapWord* obj, size_t alloc_size, JavaThread* thread) {\n@@ -44,1 +44,1 @@\n-void AllocTracer::send_allocation_in_new_tlab(Klass* klass, HeapWord* obj, size_t tlab_size, size_t alloc_size, Thread* thread) {\n+void AllocTracer::send_allocation_in_new_tlab(Klass* klass, HeapWord* obj, size_t tlab_size, size_t alloc_size, JavaThread* thread) {\n","filename":"src\/hotspot\/share\/gc\/shared\/allocTracer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,2 @@\n-    static void send_allocation_outside_tlab(Klass* klass, HeapWord* obj, size_t alloc_size, Thread* thread);\n-    static void send_allocation_in_new_tlab(Klass* klass, HeapWord* obj, size_t tlab_size, size_t alloc_size, Thread* thread);\n+    static void send_allocation_outside_tlab(Klass* klass, HeapWord* obj, size_t alloc_size, JavaThread* thread);\n+    static void send_allocation_in_new_tlab(Klass* klass, HeapWord* obj, size_t tlab_size, size_t alloc_size, JavaThread* thread);\n","filename":"src\/hotspot\/share\/gc\/shared\/allocTracer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  Thread*             _thread;\n+  JavaThread*         _thread;\n@@ -72,1 +72,1 @@\n-      _thread(Thread::current()),\n+      _thread(JavaThread::current()),\n@@ -98,1 +98,1 @@\n-  PreserveObj(Thread* thread, oop* obj_ptr)\n+  PreserveObj(JavaThread* thread, oop* obj_ptr)\n@@ -116,1 +116,1 @@\n-  Thread* THREAD = _thread;\n+  JavaThread* THREAD = _thread; \/\/ For exception macros.\n@@ -124,1 +124,1 @@\n-  if (!THREAD->in_retryable_allocation()) {\n+  if (!_thread->in_retryable_allocation()) {\n@@ -145,1 +145,1 @@\n-  Thread* THREAD = _thread;\n+  JavaThread* THREAD = _thread; \/\/ For exception macros.\n@@ -175,1 +175,0 @@\n-  assert(_thread->is_Java_thread(), \"non Java threads shouldn't allocate on the Heap\");\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-      JavaThread* THREAD = current; \/\/ for exception macros\n+      JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -658,1 +658,1 @@\n-    Thread* THREAD = current;  \/\/ for exception macros\n+    JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -829,1 +829,1 @@\n-    Thread* THREAD = current;  \/\/ for exception macros\n+    JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -910,1 +910,1 @@\n-    Thread* THREAD = current;  \/\/ for exception macros\n+    JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -931,1 +931,1 @@\n-    Thread* THREAD = current;  \/\/ for exception macros\n+    JavaThread* THREAD = current; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-static void push_jni_handle_block(Thread* const thread) {\n+static void push_jni_handle_block(JavaThread* const thread) {\n@@ -80,1 +80,1 @@\n-static void pop_jni_handle_block(Thread* const thread) {\n+static void pop_jni_handle_block(JavaThread* const thread) {\n@@ -94,1 +94,1 @@\n-  Thread* const _thread;\n+  JavaThread* const _thread;\n@@ -96,1 +96,1 @@\n-  JNIHandleBlockManager(Thread* thread) : _thread(thread) {\n+  JNIHandleBlockManager(JavaThread* thread) : _thread(thread) {\n@@ -734,1 +734,0 @@\n-\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1400,1 +1400,1 @@\n-static ClassFileStream* create_new_bytes_for_subklass(const InstanceKlass* ik, const ClassFileParser& parser, Thread* t) {\n+static ClassFileStream* create_new_bytes_for_subklass(const InstanceKlass* ik, const ClassFileParser& parser, JavaThread* t) {\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n+  ThreadInVMfromNative tvmfn(THREAD);\n@@ -118,1 +118,1 @@\n-    ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n+    ThreadInVMfromNative tvmfn(THREAD);\n@@ -139,1 +139,1 @@\n-    ThreadInVMfromNative tvmfn(THREAD->as_Java_thread());\n+    ThreadInVMfromNative tvmfn(THREAD);\n@@ -168,1 +168,1 @@\n-    ThreadInVMfromNative transition(THREAD->as_Java_thread());\n+    ThreadInVMfromNative transition(THREAD);\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-void JfrJavaSupport::check_java_thread_in_vm(Thread* t) {\n+void JfrJavaSupport::check_java_thread_in_vm(JavaThread* t) {\n@@ -55,1 +55,1 @@\n-  assert(t->as_Java_thread()->thread_state() == _thread_in_vm, \"invariant\");\n+  assert(t->thread_state() == _thread_in_vm, \"invariant\");\n@@ -58,1 +58,1 @@\n-void JfrJavaSupport::check_java_thread_in_native(Thread* t) {\n+void JfrJavaSupport::check_java_thread_in_native(JavaThread* t) {\n@@ -60,1 +60,1 @@\n-  assert(t->as_Java_thread()->thread_state() == _thread_in_native, \"invariant\");\n+  assert(t->thread_state() == _thread_in_native, \"invariant\");\n@@ -63,1 +63,1 @@\n-static void check_new_unstarted_java_thread(Thread* t) {\n+static void check_new_unstarted_java_thread(JavaThread* t) {\n@@ -65,1 +65,1 @@\n-  assert(t->as_Java_thread()->thread_state() == _thread_new, \"invariant\");\n+  assert(t->thread_state() == _thread_new, \"invariant\");\n@@ -72,1 +72,1 @@\n-jobject JfrJavaSupport::local_jni_handle(const oop obj, Thread* t) {\n+jobject JfrJavaSupport::local_jni_handle(const oop obj, JavaThread* t) {\n@@ -77,1 +77,1 @@\n-jobject JfrJavaSupport::local_jni_handle(const jobject handle, Thread* t) {\n+jobject JfrJavaSupport::local_jni_handle(const jobject handle, JavaThread* t) {\n@@ -87,1 +87,1 @@\n-jobject JfrJavaSupport::global_jni_handle(const oop obj, Thread* t) {\n+jobject JfrJavaSupport::global_jni_handle(const oop obj, JavaThread* t) {\n@@ -93,1 +93,1 @@\n-jobject JfrJavaSupport::global_jni_handle(const jobject handle, Thread* t) {\n+jobject JfrJavaSupport::global_jni_handle(const jobject handle, JavaThread* t) {\n@@ -102,1 +102,1 @@\n-jweak JfrJavaSupport::global_weak_jni_handle(const oop obj, Thread* t) {\n+jweak JfrJavaSupport::global_weak_jni_handle(const oop obj, JavaThread* t) {\n@@ -108,1 +108,1 @@\n-jweak JfrJavaSupport::global_weak_jni_handle(const jobject handle, Thread* t) {\n+jweak JfrJavaSupport::global_weak_jni_handle(const jobject handle, JavaThread* t) {\n@@ -142,1 +142,1 @@\n-  ObjectSynchronizer::jni_enter(h_obj, THREAD->as_Java_thread());\n+  ObjectSynchronizer::jni_enter(h_obj, THREAD);\n@@ -199,1 +199,1 @@\n-static void handle_result(JavaValue* result, bool global_ref, Thread* t) {\n+static void handle_result(JavaValue* result, bool global_ref, JavaThread* t) {\n@@ -278,1 +278,1 @@\n-void JfrJavaSupport::set_array_element(jobjectArray arr, jobject element, int index, Thread* t) {\n+void JfrJavaSupport::set_array_element(jobjectArray arr, jobject element, int index, JavaThread* t) {\n@@ -491,1 +491,1 @@\n-const char* JfrJavaSupport::c_str(oop string, Thread* t) {\n+const char* JfrJavaSupport::c_str(oop string, JavaThread* t) {\n@@ -509,1 +509,1 @@\n-const char* JfrJavaSupport::c_str(jstring string, Thread* t) {\n+const char* JfrJavaSupport::c_str(jstring string, JavaThread* t) {\n@@ -548,1 +548,1 @@\n-void JfrJavaSupport::abort(jstring errorMsg, Thread* t) {\n+void JfrJavaSupport::abort(jstring errorMsg, JavaThread* t) {\n@@ -561,1 +561,1 @@\n-void JfrJavaSupport::set_cause(jthrowable throwable, Thread* t) {\n+void JfrJavaSupport::set_cause(jthrowable throwable, JavaThread* t) {\n@@ -593,1 +593,1 @@\n-void JfrJavaSupport::uncaught_exception(jthrowable throwable, Thread* t) {\n+void JfrJavaSupport::uncaught_exception(jthrowable throwable, JavaThread* t) {\n@@ -687,1 +687,1 @@\n-  jweak ref = JfrJavaSupport::global_weak_jni_handle(thread, Thread::current());\n+  jweak ref = JfrJavaSupport::global_weak_jni_handle(thread, JavaThread::current());\n@@ -836,1 +836,1 @@\n-  DEBUG_ONLY(check_new_unstarted_java_thread(t);)\n+  DEBUG_ONLY(check_new_unstarted_java_thread(t->as_Java_thread());)\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n-  static jobject local_jni_handle(const oop obj, Thread* t);\n-  static jobject local_jni_handle(const jobject handle, Thread* t);\n+  static jobject local_jni_handle(const oop obj, JavaThread* t);\n+  static jobject local_jni_handle(const jobject handle, JavaThread* t);\n@@ -40,2 +40,2 @@\n-  static jobject global_jni_handle(const oop obj, Thread* t);\n-  static jobject global_jni_handle(const jobject handle, Thread* t);\n+  static jobject global_jni_handle(const oop obj, JavaThread* t);\n+  static jobject global_jni_handle(const jobject handle, JavaThread* t);\n@@ -44,2 +44,2 @@\n-  static jweak global_weak_jni_handle(const oop obj, Thread* t);\n-  static jweak global_weak_jni_handle(const jobject handle, Thread* t);\n+  static jweak global_weak_jni_handle(const oop obj, JavaThread* t);\n+  static jweak global_weak_jni_handle(const jobject handle, JavaThread* t);\n@@ -50,1 +50,1 @@\n-  static void set_array_element(jobjectArray arr, jobject element, int index, Thread* t);\n+  static void set_array_element(jobjectArray arr, jobject element, int index, JavaThread* t);\n@@ -79,2 +79,2 @@\n-  static const char* c_str(jstring string, Thread* jt);\n-  static const char* c_str(oop string, Thread* t);\n+  static const char* c_str(jstring string, JavaThread* jt);\n+  static const char* c_str(oop string, JavaThread* t);\n@@ -104,1 +104,1 @@\n-  static void uncaught_exception(jthrowable throwable, Thread* t);\n+  static void uncaught_exception(jthrowable throwable, JavaThread* t);\n@@ -107,2 +107,2 @@\n-  DEBUG_ONLY(static void check_java_thread_in_vm(Thread* t);)\n-  DEBUG_ONLY(static void check_java_thread_in_native(Thread* t);)\n+  DEBUG_ONLY(static void check_java_thread_in_vm(JavaThread* t);)\n+  DEBUG_ONLY(static void check_java_thread_in_native(JavaThread* t);)\n@@ -123,1 +123,1 @@\n-  static void set_cause(jthrowable throwable, Thread* t);\n+  static void set_cause(jthrowable throwable, JavaThread* t);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(Thread::current());)\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(JavaThread::current());)\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadDumpEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(Thread::current()));\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(JavaThread::current()));\n@@ -372,1 +372,1 @@\n-size_t JfrCheckpointManager::write_threads(Thread* thread) {\n+size_t JfrCheckpointManager::write_threads(JavaThread* thread) {\n@@ -375,1 +375,1 @@\n-  ThreadInVMfromNative transition(thread->as_Java_thread());\n+  ThreadInVMfromNative transition(thread);\n@@ -384,1 +384,1 @@\n-  Thread* const thread = Thread::current();\n+  JavaThread* const thread = JavaThread::current();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-  size_t write_threads(Thread* thread);\n+  size_t write_threads(JavaThread* thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-static void write_metadata_blob(JfrChunkWriter& chunkwriter, Thread* thread) {\n+static void write_metadata_blob(JfrChunkWriter& chunkwriter, JavaThread* thread) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrMetadataEvent.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,3 +108,2 @@\n-const char* get_java_thread_name(const Thread* t) {\n-  assert(t != NULL, \"invariant\");\n-  const JavaThread* const jt = t->as_Java_thread();\n+const char* get_java_thread_name(const JavaThread* jt) {\n+  assert(jt != NULL, \"invariant\");\n@@ -127,1 +126,1 @@\n-  return t->is_Java_thread() ? get_java_thread_name(t) : t->name();\n+  return t->is_Java_thread() ? get_java_thread_name(t->as_Java_thread()) : t->name();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,1 +199,1 @@\n-  Thread* const thread = Thread::current();\n+  JavaThread* const thread = JavaThread::current();\n@@ -227,1 +227,1 @@\n-  return Arguments::is_dumping_archive() || launch_command_line_recordings(Thread::current());\n+  return Arguments::is_dumping_archive() || launch_command_line_recordings(JavaThread::current());\n@@ -411,1 +411,1 @@\n-  return JfrRecorderThread::start(_checkpoint_manager, _post_box, Thread::current());\n+  return JfrRecorderThread::start(_checkpoint_manager, _post_box, JavaThread::current());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  friend void recorderthread_entry(JavaThread*, Thread*);\n+  friend void recorderthread_entry(JavaThread*, JavaThread*);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static jobject install_chunk_monitor(Thread* thread) {\n+static jobject install_chunk_monitor(JavaThread* thread) {\n@@ -51,1 +51,1 @@\n-static jobject get_chunk_monitor(Thread* thread) {\n+static jobject get_chunk_monitor(JavaThread* thread) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-bool JfrOptionSet::initialize(Thread* thread) {\n+bool JfrOptionSet::initialize(JavaThread* thread) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  static bool initialize(Thread* thread);\n+  static bool initialize(JavaThread* thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  friend void recorderthread_entry(JavaThread*, Thread*);\n+  friend void recorderthread_entry(JavaThread*, JavaThread*);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -648,1 +648,1 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(Thread::current()));\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(JavaThread::current()));\n@@ -656,1 +656,1 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(Thread::current()));\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(JavaThread::current()));\n@@ -664,1 +664,1 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(Thread::current()));\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(JavaThread::current()));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-void recorderthread_entry(JavaThread*, Thread*);\n+void recorderthread_entry(JavaThread*, JavaThread*);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-void recorderthread_entry(JavaThread* thread, Thread* unused) {\n+void recorderthread_entry(JavaThread* thread, JavaThread* unused) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThreadLoop.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-JfrAllocationTracer::JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, Thread* thread) {\n+JfrAllocationTracer::JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, JavaThread* thread) {\n@@ -33,1 +33,1 @@\n-    LeakProfiler::sample(obj, alloc_size, thread->as_Java_thread());\n+    LeakProfiler::sample(obj, alloc_size, thread);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, Thread* thread);\n+  JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, JavaThread* thread);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-static void fill_klasses(GrowableArray<const void*>& event_subklasses, const Klass* event_klass, Thread* thread) {\n+static void fill_klasses(GrowableArray<const void*>& event_subklasses, const Klass* event_klass, JavaThread* thread) {\n@@ -110,1 +110,1 @@\n-static void transform_klasses_to_local_jni_handles(GrowableArray<const void*>& event_subklasses, Thread* thread) {\n+static void transform_klasses_to_local_jni_handles(GrowableArray<const void*>& event_subklasses, JavaThread* thread) {\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  Thread* t = Thread::current();\n+  JavaThread* t = JavaThread::current();\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrJavaLog.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-    initialized = setup_event_writer_offsets(Thread::current());\n+    initialized = setup_event_writer_offsets(JavaThread::current());\n@@ -214,1 +214,1 @@\n-jobject JfrJavaEventWriter::event_writer(Thread* t) {\n+jobject JfrJavaEventWriter::event_writer(JavaThread* t) {\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-  static jobject event_writer(Thread* t);\n+  static jobject event_writer(JavaThread* t);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-    JavaThread* THREAD = JavaThread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-  assert(THREAD->is_Java_thread(), \"must be\");\n@@ -100,1 +99,1 @@\n-      THREAD->as_Java_thread()->sleep(100);\n+      THREAD->sleep(100);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  Thread* THREAD = thread;                                        \\\n+  JavaThread* THREAD = thread;                                        \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -264,1 +264,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -317,1 +317,1 @@\n-        JavaThread* THREAD = thread->as_Java_thread();\n+        JavaThread* THREAD = thread->as_Java_thread(); \/\/ For exception macros.\n@@ -346,1 +346,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -356,1 +356,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -574,1 +574,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -642,1 +642,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -668,1 +668,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -696,1 +696,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -710,1 +710,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -729,1 +729,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -746,1 +746,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -763,1 +763,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -782,1 +782,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -806,1 +806,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -836,1 +836,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -888,1 +888,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -993,1 +993,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -1036,1 +1036,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -1075,1 +1075,1 @@\n-  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current()); \/\/ For exception macros.\n@@ -1109,1 +1109,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1121,1 +1121,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1133,1 +1133,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1146,1 +1146,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1158,1 +1158,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1170,1 +1170,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1190,1 +1190,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1208,1 +1208,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1228,1 +1228,1 @@\n-    JavaThread* THREAD = JavaThread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1239,1 +1239,1 @@\n-    JavaThread* THREAD = JavaThread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1251,1 +1251,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1277,1 +1277,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1317,1 +1317,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1403,2 +1403,2 @@\n-  Thread* THREAD = Thread::current();\n-  if (!mirror.is_hotspot() && !THREAD->is_Java_thread()) {\n+  Thread* current = Thread::current();\n+  if (!mirror.is_hotspot() && !current->is_Java_thread()) {\n@@ -1525,1 +1525,1 @@\n-      Thread* THREAD = Thread::current();                                                                            \\\n+      JavaThread* THREAD = JavaThread::current(); \/* For exception macros. *\/ \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  JavaThread* thread=JavaThread::current(); \\\n-  Thread* THREAD = thread;\n+  JavaThread* thread = JavaThread::current(); \\\n+  JavaThread* THREAD = thread; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-    Thread* THREAD = Thread::current();                                                 \\\n+    JavaThread* THREAD = JavaThread::current(); \/* For exception macros. *\/             \\\n@@ -309,1 +309,0 @@\n-    Thread* THREAD = Thread::current();\n@@ -382,1 +381,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -491,1 +490,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-      JavaThread* THREAD = _thread;\n+      JavaThread* THREAD = _thread; \/\/ For exception macros.\n@@ -1049,1 +1049,1 @@\n-    JavaThread* THREAD = JavaThread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1089,1 +1089,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -1200,1 +1200,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+class JavaThread;\n@@ -346,1 +347,1 @@\n-                     Type type, Thread* thread) throw();\n+                     Type type, JavaThread* thread) throw();\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -819,2 +819,0 @@\n-  assert(THREAD->is_Java_thread(), \"can't allocate in non-Java thread because we cannot throw exception\");\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -628,2 +628,2 @@\n-    Thread* THREAD = Thread::current();\n-    Handle default_err_h(THREAD, default_err);\n+    JavaThread* current = JavaThread::current();\n+    Handle default_err_h(current, default_err);\n@@ -632,1 +632,1 @@\n-    Handle exc(THREAD, preallocated_out_of_memory_errors()->obj_at(next));\n+    Handle exc(current, preallocated_out_of_memory_errors()->obj_at(next));\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-  JavaThread* javaThread = THREAD->as_Java_thread();\n+  JavaThread* javaThread = THREAD;\n@@ -601,1 +601,1 @@\n-    Thread *thread = Thread::current();\n+    Thread* current = Thread::current();\n@@ -605,2 +605,2 @@\n-    Handle h_prot (thread, protection_domain);\n-    Handle h_loader (thread, loader);\n+    Handle h_prot (current, protection_domain);\n+    Handle h_loader (current, loader);\n@@ -609,2 +609,2 @@\n-    \/\/ Avoid constant pool verification at a safepoint, which takes the Module_lock.\n-    if (k != NULL && !SafepointSynchronize::is_at_safepoint()) {\n+    \/\/ Avoid constant pool verification at a safepoint, as it takes the Module_lock.\n+    if (k != NULL && current->is_Java_thread()) {\n@@ -612,2 +612,2 @@\n-      ExceptionMark em(thread);\n-      Thread* THREAD = thread; \/\/ For exception macros.\n+      JavaThread* THREAD = current->as_Java_thread(); \/\/ For exception macros.\n+      ExceptionMark em(THREAD);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/thread.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -485,1 +485,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -732,1 +732,1 @@\n-  Thread* THREAD = Thread::current();\n+  Thread* current = Thread::current();\n@@ -737,1 +737,1 @@\n-    RawBytecodeStream bcs(methodHandle(THREAD, m));\n+    RawBytecodeStream bcs(methodHandle(current, m));\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2162,1 +2162,3 @@\n-    _exception = Exceptions::new_exception(current, vmSymbols::java_lang_LinkageError(), msg_buffer2);\n+    _exception = Exceptions::new_exception(current->as_Java_thread(),\n+                                           vmSymbols::java_lang_LinkageError(),\n+                                           msg_buffer2);\n@@ -2440,1 +2442,1 @@\n-  Thread *THREAD = Thread::current();  \/\/ Could really have TRAPS argument.\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  Thread* THREAD = Thread::current();\n+  Thread* current = Thread::current();\n@@ -205,1 +205,1 @@\n-    ResourceMark rm(THREAD);\n+    ResourceMark rm(current);\n@@ -212,1 +212,1 @@\n-    ResourceMark rm(THREAD);\n+    ResourceMark rm(current);\n@@ -219,1 +219,1 @@\n-    ResourceMark rm(THREAD);\n+    ResourceMark rm(current);\n@@ -300,1 +300,1 @@\n-          bool is_member = nest_host_k->has_nest_member(THREAD->as_Java_thread(), this);\n+          bool is_member = nest_host_k->has_nest_member(THREAD, this);\n@@ -769,1 +769,1 @@\n-  ObjectLocker ol(h_init_lock, THREAD->as_Java_thread());\n+  ObjectLocker ol(h_init_lock, THREAD);\n@@ -858,1 +858,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n@@ -960,1 +960,1 @@\n-        JvmtiExport::post_class_prepare(THREAD->as_Java_thread(), this);\n+        JvmtiExport::post_class_prepare(THREAD, this);\n@@ -1024,1 +1024,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n@@ -1170,1 +1170,1 @@\n-    ObjectLocker ol(h_init_lock, THREAD->as_Java_thread());\n+    ObjectLocker ol(h_init_lock, THREAD);\n@@ -1395,1 +1395,1 @@\n-    JavaThread *jt = THREAD->as_Java_thread();\n+    JavaThread *jt = THREAD;\n@@ -3630,5 +3630,4 @@\n-      Thread* THREAD = Thread::current();\n-      Klass* caller =\n-            THREAD->is_Java_thread()\n-                ? THREAD->as_Java_thread()->security_get_caller_class(1)\n-                : NULL;\n+      Thread* current = Thread::current();\n+      Klass* caller = current->is_Java_thread() ?\n+        current->as_Java_thread()->security_get_caller_class(1):\n+        NULL;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -571,1 +571,1 @@\n-    Thread* THREAD = current;\n+    JavaThread* THREAD = current->as_Java_thread(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,1 +668,1 @@\n-  void log_touched(TRAPS);\n+  void log_touched(Thread* current);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-  THREAD->as_Java_thread()->check_possible_safepoint();\n+  THREAD->check_possible_safepoint();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  Thread* THREAD = Thread::current();\n+  Thread* current = Thread::current();\n@@ -96,2 +96,2 @@\n-  HandleMark hm(THREAD);\n-  Handle object(THREAD, this);\n+  HandleMark hm(current);\n+  Handle object(current, this);\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    JavaThread *jt = THREAD->as_Java_thread();\n+    JavaThread *jt = THREAD;\n@@ -202,1 +202,1 @@\n-  THREAD->as_Java_thread()->check_possible_safepoint();\n+  THREAD->check_possible_safepoint();\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-  Thread* current_thread = Thread::current();\n+  JavaThread* current_thread = JavaThread::current();\n","filename":"src\/hotspot\/share\/prims\/foreign_globals.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3605,1 +3605,1 @@\n-          JavaThread* THREAD = thread;\n+          JavaThread* THREAD = thread; \/\/ For exception macros.\n@@ -3646,1 +3646,1 @@\n-      JavaThread* THREAD = JavaThread::current();\n+      JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  JavaThread* jthread = THREAD->as_Java_thread();\n+  JavaThread* jthread = THREAD;\n@@ -841,1 +841,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  JavaThread* THREAD = JavaThread::current(); \/\/ pass to macros\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -236,1 +236,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -257,1 +257,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -279,1 +279,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -300,1 +300,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -322,1 +322,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -348,1 +348,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* current = JavaThread::current();\n@@ -351,1 +351,1 @@\n-  Handle h_module(THREAD, JNIHandles::resolve(module));\n+  Handle h_module(current, JNIHandles::resolve(module));\n@@ -693,1 +693,1 @@\n-    JavaThread* THREAD = JavaThread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2690,1 +2690,1 @@\n-      JavaThread* THREAD = JavaThread::current();\n+      JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1384,1 +1384,1 @@\n-    Thread* THREAD = current;  \/\/ for exception processing\n+    JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -2112,1 +2112,1 @@\n-  Thread* THREAD = Thread::current();  \/\/ For exception processing\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-  Thread* THREAD = Thread::current();\n-  BytecodeStream s_old(methodHandle(THREAD, old_method));\n-  BytecodeStream s_new(methodHandle(THREAD, new_method));\n+  Thread* current = Thread::current();\n+  BytecodeStream s_old(methodHandle(current, old_method));\n+  BytecodeStream s_new(methodHandle(current, new_method));\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n@@ -410,1 +410,1 @@\n-    KeepStackGCProcessedMark keep_stack(THREAD->as_Java_thread());\n+    KeepStackGCProcessedMark keep_stack(THREAD);\n@@ -466,1 +466,1 @@\n-  JavaThread* jt = THREAD->as_Java_thread();\n+  JavaThread* jt = THREAD;\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  JavaThread* THREAD = thread;\n+  JavaThread* THREAD = thread; \/\/ For exception macros.\n@@ -81,1 +81,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  Thread* THREAD = Thread::current();\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1005,1 +1005,1 @@\n-bool WhiteBox::compile_method(Method* method, int comp_level, int bci, Thread* THREAD) {\n+bool WhiteBox::compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD) {\n@@ -2083,1 +2083,0 @@\n-  Thread* THREAD = Thread::current();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  static bool compile_method(Method* method, int comp_level, int bci, Thread* THREAD);\n+  static bool compile_method(Method* method, int comp_level, int bci, JavaThread* THREAD);\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-      Thread* THREAD = thread;\n+      JavaThread* THREAD = thread; \/\/ For exception macros.\n@@ -1805,1 +1805,1 @@\n-  Thread* THREAD = thread;\n+  JavaThread* THREAD = thread; \/\/ For exception macros.\n@@ -1843,1 +1843,1 @@\n-      JavaThread* jt = THREAD->as_Java_thread();\n+      JavaThread* jt = THREAD;\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-                                         Thread::current()));        \\\n+                                         JavaThread::current()));    \\\n@@ -303,1 +303,1 @@\n-  Thread* THREAD = thread;                                           \\\n+  JavaThread* THREAD = thread; \/* For exception macros. *\/           \\\n@@ -312,1 +312,1 @@\n-  Thread* THREAD = thread;                                           \\\n+  JavaThread* THREAD = thread; \/* For exception macros. *\/           \\\n@@ -361,1 +361,1 @@\n-    Thread* THREAD = current;                                        \\\n+    JavaThread* THREAD = current; \/* For exception macros. *\/        \\\n@@ -367,1 +367,1 @@\n-    Thread* THREAD = current;                                        \\\n+    JavaThread* THREAD = current; \/* For exception macros. *\/        \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -675,1 +675,1 @@\n-  Thread *THREAD = Thread::current(); \/\/ can't be NULL\n+  JavaThread* THREAD = JavaThread::current(); \/\/ can't be NULL\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n@@ -339,3 +339,2 @@\n-  \/\/ Check if we need to wrap a potential OS exception handler around thread\n-  \/\/ This is used for e.g. Win32 structured exception handlers\n-  assert(THREAD->is_Java_thread(), \"only JavaThreads can make JavaCalls\");\n+  \/\/ Check if we need to wrap a potential OS exception handler around thread.\n+  \/\/ This is used for e.g. Win32 structured exception handlers.\n@@ -343,1 +342,1 @@\n-  \/\/ stack that has installed its own exception handlers\n+  \/\/ stack that has installed its own exception handlers.\n@@ -349,1 +348,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1424,1 +1424,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1462,1 +1462,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1756,1 +1756,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1775,1 +1775,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-typedef void (*java_call_t)(JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread);\n+typedef void (*java_call_t)(JavaValue* value, const methodHandle& method, JavaCallArguments* args, JavaThread* thread);\n@@ -823,1 +823,1 @@\n-  static void os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread);\n+  static void os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, JavaThread* thread);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1036,3 +1036,1 @@\n-          if (THREAD->is_Java_thread()) {\n-            JvmtiExport::clear_detected_exception(THREAD->as_Java_thread());\n-          }\n+          JvmtiExport::clear_detected_exception(THREAD);\n@@ -1150,3 +1148,1 @@\n-    if (THREAD->is_Java_thread()) {\n-      JvmtiExport::clear_detected_exception(THREAD->as_Java_thread());\n-    }\n+    JvmtiExport::clear_detected_exception(THREAD);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/runtime\/relocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -904,1 +904,1 @@\n-  assert(self == Thread::current()->as_Java_thread(), \"must be self\");\n+  assert(self == JavaThread::current(), \"must be self\");\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -791,1 +791,1 @@\n-  Thread* THREAD = current; \/\/ For exception processing.\n+  JavaThread* THREAD = current; \/\/ For exception macros.\n@@ -1053,1 +1053,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1082,1 +1082,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1199,1 +1199,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1339,1 +1339,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1659,1 +1659,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -1766,1 +1766,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -597,1 +597,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -640,1 +640,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -679,1 +679,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n@@ -698,1 +698,1 @@\n-  JavaThread* current = THREAD->as_Java_thread();\n+  JavaThread* current = THREAD;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2900,1 +2900,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -183,3 +183,3 @@\n-  Thread* THREAD = Thread::current();\n-  ResourceMark rm(THREAD);\n-  HandleMark hm(THREAD);\n+  Thread* current = Thread::current();\n+  ResourceMark rm(current);\n+  HandleMark hm(current);\n@@ -240,1 +240,1 @@\n-          Handle obj(THREAD, monitor->owner());\n+          Handle obj(current, monitor->owner());\n@@ -269,1 +269,1 @@\n-        print_locked_object_class_name(st, Handle(THREAD, monitor->owner()), lock_state);\n+        print_locked_object_class_name(st, Handle(current, monitor->owner()), lock_state);\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -571,2 +571,2 @@\n-  JavaThread* THREAD = JavaThread::current();\n-  RegisterMap map(THREAD, false);\n+  JavaThread* current = JavaThread::current();\n+  RegisterMap map(current, false);\n@@ -591,2 +591,2 @@\n-      methodHandle caller(THREAD, elem->method());\n-      methodHandle callee(THREAD, element(index - 1)->method());\n+      methodHandle caller(current, elem->method());\n+      methodHandle callee(current, element(index - 1)->method());\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -119,1 +119,1 @@\n-    Thread* THREAD = Thread::current();\n+    JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -204,1 +204,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1010,1 +1010,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = THREAD;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n@@ -183,1 +183,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current(); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-bool Exceptions::special_exception(Thread* thread, const char* file, int line, Handle h_exception) {\n+bool Exceptions::special_exception(JavaThread* thread, const char* file, int line, Handle h_exception) {\n@@ -105,3 +105,2 @@\n-  if (thread->is_VM_thread()\n-      || !thread->can_call_java()) {\n-    \/\/ We do not care what kind of exception we get for the vm-thread or a thread which\n+  if (!thread->can_call_java()) {\n+    \/\/ We do not care what kind of exception we get for a thread which\n@@ -116,1 +115,1 @@\n-bool Exceptions::special_exception(Thread* thread, const char* file, int line, Symbol* h_name, const char* message) {\n+bool Exceptions::special_exception(JavaThread* thread, const char* file, int line, Symbol* h_name, const char* message) {\n@@ -128,3 +127,2 @@\n-  if (thread->is_VM_thread()\n-      || !thread->can_call_java()) {\n-    \/\/ We do not care what kind of exception we get for the vm-thread or a thread which\n+  if (!thread->can_call_java()) {\n+    \/\/ We do not care what kind of exception we get for a thread which\n@@ -140,1 +138,1 @@\n-void Exceptions::_throw_oop(Thread* thread, const char* file, int line, oop exception) {\n+void Exceptions::_throw_oop(JavaThread* thread, const char* file, int line, oop exception) {\n@@ -146,1 +144,1 @@\n-void Exceptions::_throw(Thread* thread, const char* file, int line, Handle h_exception, const char* message) {\n+void Exceptions::_throw(JavaThread* thread, const char* file, int line, Handle h_exception, const char* message) {\n@@ -161,1 +159,1 @@\n-  \/\/ Check for special boot-strapping\/vm-thread handling\n+  \/\/ Check for special boot-strapping\/compiler-thread handling\n@@ -184,1 +182,1 @@\n-void Exceptions::_throw_msg(Thread* thread, const char* file, int line, Symbol* name, const char* message,\n+void Exceptions::_throw_msg(JavaThread* thread, const char* file, int line, Symbol* name, const char* message,\n@@ -186,1 +184,1 @@\n-  \/\/ Check for special boot-strapping\/vm-thread handling\n+  \/\/ Check for special boot-strapping\/compiler-thread handling\n@@ -194,1 +192,1 @@\n-void Exceptions::_throw_msg_cause(Thread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause,\n+void Exceptions::_throw_msg_cause(JavaThread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause,\n@@ -196,1 +194,1 @@\n-  \/\/ Check for special boot-strapping\/vm-thread handling\n+  \/\/ Check for special boot-strapping\/compiler-thread handling\n@@ -203,1 +201,1 @@\n-void Exceptions::_throw_cause(Thread* thread, const char* file, int line, Symbol* name, Handle h_cause,\n+void Exceptions::_throw_cause(JavaThread* thread, const char* file, int line, Symbol* name, Handle h_cause,\n@@ -205,1 +203,1 @@\n-  \/\/ Check for special boot-strapping\/vm-thread handling\n+  \/\/ Check for special boot-strapping\/compiler-thread handling\n@@ -212,2 +210,2 @@\n-void Exceptions::_throw_args(Thread* thread, const char* file, int line, Symbol* name, Symbol* signature, JavaCallArguments *args) {\n-  \/\/ Check for special boot-strapping\/vm-thread handling\n+void Exceptions::_throw_args(JavaThread* thread, const char* file, int line, Symbol* name, Symbol* signature, JavaCallArguments *args) {\n+  \/\/ Check for special boot-strapping\/compiler-thread handling\n@@ -225,1 +223,1 @@\n-void Exceptions::_throw_msg_cause(Thread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause) {\n+void Exceptions::_throw_msg_cause(JavaThread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause) {\n@@ -228,1 +226,1 @@\n-void Exceptions::_throw_msg(Thread* thread, const char* file, int line, Symbol* name, const char* message) {\n+void Exceptions::_throw_msg(JavaThread* thread, const char* file, int line, Symbol* name, const char* message) {\n@@ -231,1 +229,1 @@\n-void Exceptions::_throw_cause(Thread* thread, const char* file, int line, Symbol* name, Handle h_cause) {\n+void Exceptions::_throw_cause(JavaThread* thread, const char* file, int line, Symbol* name, Handle h_cause) {\n@@ -236,1 +234,1 @@\n-void Exceptions::throw_stack_overflow_exception(Thread* THREAD, const char* file, int line, const methodHandle& method) {\n+void Exceptions::throw_stack_overflow_exception(JavaThread* THREAD, const char* file, int line, const methodHandle& method) {\n@@ -255,1 +253,1 @@\n-void Exceptions::throw_unsafe_access_internal_error(Thread* thread, const char* file, int line, const char* message) {\n+void Exceptions::throw_unsafe_access_internal_error(JavaThread* thread, const char* file, int line, const char* message) {\n@@ -261,1 +259,1 @@\n-void Exceptions::fthrow(Thread* thread, const char* file, int line, Symbol* h_name, const char* format, ...) {\n+void Exceptions::fthrow(JavaThread* thread, const char* file, int line, Symbol* h_name, const char* format, ...) {\n@@ -274,1 +272,1 @@\n-Handle Exceptions::new_exception(Thread *thread, Symbol* name,\n+Handle Exceptions::new_exception(JavaThread* thread, Symbol* name,\n@@ -279,1 +277,0 @@\n-  assert(thread->is_Java_thread(), \"can only be called by a Java thread\");\n@@ -306,1 +303,1 @@\n-Handle Exceptions::new_exception(Thread *thread, Symbol* name,\n+Handle Exceptions::new_exception(JavaThread* thread, Symbol* name,\n@@ -337,1 +334,1 @@\n-Handle Exceptions::new_exception(Thread* thread, Symbol* name,\n+Handle Exceptions::new_exception(JavaThread* thread, Symbol* name,\n@@ -354,1 +351,1 @@\n-Handle Exceptions::new_exception(Thread* thread, Symbol* name,\n+Handle Exceptions::new_exception(JavaThread* thread, Symbol* name,\n@@ -405,1 +402,1 @@\n-Handle Exceptions::new_exception(Thread* thread, Symbol* name,\n+Handle Exceptions::new_exception(JavaThread* thread, Symbol* name,\n@@ -422,1 +419,1 @@\n-void Exceptions::wrap_dynamic_exception(bool is_indy, Thread* THREAD) {\n+void Exceptions::wrap_dynamic_exception(bool is_indy, JavaThread* THREAD) {\n@@ -502,2 +499,2 @@\n-ExceptionMark::ExceptionMark(Thread* thread) {\n-  assert(thread == Thread::current(), \"must be\");\n+ExceptionMark::ExceptionMark(JavaThread* thread) {\n+  assert(thread == JavaThread::current(), \"must be\");\n@@ -509,1 +506,1 @@\n-  _thread = Thread::current();\n+  _thread = JavaThread::current();\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-class Thread;\n+class JavaThread;\n@@ -108,2 +108,2 @@\n-  static bool special_exception(Thread *thread, const char* file, int line, Handle exception);\n-  static bool special_exception(Thread* thread, const char* file, int line, Symbol* name, const char* message);\n+  static bool special_exception(JavaThread* thread, const char* file, int line, Handle exception);\n+  static bool special_exception(JavaThread* thread, const char* file, int line, Symbol* name, const char* message);\n@@ -126,2 +126,2 @@\n-  static void _throw_oop(Thread* thread, const char* file, int line, oop exception);\n-  static void _throw(Thread* thread, const char* file, int line, Handle exception, const char* msg = NULL);\n+  static void _throw_oop(JavaThread* thread, const char* file, int line, oop exception);\n+  static void _throw(JavaThread* thread, const char* file, int line, Handle exception, const char* msg = NULL);\n@@ -129,2 +129,2 @@\n-  static void _throw_msg(Thread* thread, const char* file, int line, Symbol* name, const char* message);\n-  static void _throw_msg(Thread* thread, const char* file, int line, Symbol* name, const char* message,\n+  static void _throw_msg(JavaThread* thread, const char* file, int line, Symbol* name, const char* message);\n+  static void _throw_msg(JavaThread* thread, const char* file, int line, Symbol* name, const char* message,\n@@ -133,2 +133,2 @@\n-  static void _throw_msg_cause(Thread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause);\n-  static void _throw_msg_cause(Thread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause,\n+  static void _throw_msg_cause(JavaThread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause);\n+  static void _throw_msg_cause(JavaThread* thread, const char* file, int line, Symbol* name, const char* message, Handle h_cause,\n@@ -137,2 +137,2 @@\n-  static void _throw_cause(Thread* thread, const char* file, int line, Symbol* name, Handle h_cause);\n-  static void _throw_cause(Thread* thread, const char* file, int line, Symbol* name, Handle h_cause,\n+  static void _throw_cause(JavaThread* thread, const char* file, int line, Symbol* name, Handle h_cause);\n+  static void _throw_cause(JavaThread* thread, const char* file, int line, Symbol* name, Handle h_cause,\n@@ -141,1 +141,1 @@\n-  static void _throw_args(Thread* thread, const char* file, int line,\n+  static void _throw_args(JavaThread* thread, const char* file, int line,\n@@ -147,1 +147,1 @@\n-  static void fthrow(Thread* thread, const char* file, int line, Symbol* name,\n+  static void fthrow(JavaThread* thread, const char* file, int line, Symbol* name,\n@@ -151,1 +151,1 @@\n-  static Handle new_exception(Thread* thread, Symbol* name,\n+  static Handle new_exception(JavaThread* thread, Symbol* name,\n@@ -155,1 +155,1 @@\n-  static Handle new_exception(Thread* thread, Symbol* name,\n+  static Handle new_exception(JavaThread* thread, Symbol* name,\n@@ -160,1 +160,1 @@\n-  static Handle new_exception(Thread* thread, Symbol* name,\n+  static Handle new_exception(JavaThread* thread, Symbol* name,\n@@ -165,1 +165,1 @@\n-  static Handle new_exception(Thread* thread, Symbol* name,\n+  static Handle new_exception(JavaThread* thread, Symbol* name,\n@@ -170,1 +170,1 @@\n-  static Handle new_exception(Thread* thread, Symbol* name,\n+  static Handle new_exception(JavaThread* thread, Symbol* name,\n@@ -174,1 +174,1 @@\n-  static void throw_stack_overflow_exception(Thread* thread, const char* file, int line, const methodHandle& method);\n+  static void throw_stack_overflow_exception(JavaThread* thread, const char* file, int line, const methodHandle& method);\n@@ -176,1 +176,1 @@\n-  static void throw_unsafe_access_internal_error(Thread* thread, const char* file, int line, const char* message);\n+  static void throw_unsafe_access_internal_error(JavaThread* thread, const char* file, int line, const char* message);\n@@ -178,1 +178,1 @@\n-  static void wrap_dynamic_exception(bool is_indy, Thread* thread);\n+  static void wrap_dynamic_exception(bool is_indy, JavaThread* thread);\n@@ -204,1 +204,1 @@\n-#define TRAPS  Thread* THREAD\n+#define TRAPS  JavaThread* THREAD\n@@ -333,1 +333,1 @@\n-  Thread* _thread;\n+  JavaThread* _thread;\n@@ -338,1 +338,1 @@\n-  ExceptionMark(Thread* thread);\n+  ExceptionMark(JavaThread* thread);\n@@ -341,1 +341,1 @@\n-  Thread* thread() {\n+  JavaThread* thread() {\n@@ -354,1 +354,1 @@\n-#define EXCEPTION_MARK                           ExceptionMark __em; Thread* THREAD = __em.thread();\n+#define EXCEPTION_MARK                           ExceptionMark __em; JavaThread* THREAD = __em.thread();\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current();\n@@ -116,1 +116,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JavaThread::current();\n","filename":"test\/hotspot\/gtest\/utilities\/test_metaspaceClosure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}