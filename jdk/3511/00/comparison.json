{"files":[{"patch":"@@ -991,1 +991,1 @@\n-        bool const is_live = _cm->liveness(hr->humongous_start_region()->hrm_index()) > 0;\n+        bool const is_live = _cm->live_words(hr->humongous_start_region()->hrm_index()) > 0;\n@@ -994,1 +994,1 @@\n-        size_t const live_bytes = _cm->liveness(hr->hrm_index());\n+        size_t const live_bytes = _cm->live_bytes(hr->hrm_index());\n@@ -1032,1 +1032,1 @@\n-      size_t const marked_words = _cm->liveness(region_idx);\n+      size_t const marked_words = _cm->live_words(region_idx);\n@@ -1045,1 +1045,1 @@\n-        add_marked_bytes_and_note_end(hr, marked_words * HeapWordSize);\n+        add_marked_bytes_and_note_end(hr, _cm->live_bytes(region_idx));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-  \/\/ Liveness of the given region as determined by concurrent marking, i.e. the amount of\n+  \/\/ Live words in the given region as determined by concurrent marking, i.e. the amount of\n@@ -464,1 +464,3 @@\n-  size_t liveness(uint region) const { return _region_mark_stats[region]._live_words; }\n+  size_t live_words(uint region) const { return _region_mark_stats[region]._live_words; }\n+\n+  size_t live_bytes(uint region) const { return live_words(region) * HeapWordSize; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1824,1 +1824,1 @@\n-                                        _cm->liveness(region_idx) * HeapWordSize,\n+                                        _cm->live_bytes(region_idx),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-                                    cm->liveness(r->hrm_index()) * HeapWordSize,\n+                                    cm->live_bytes(r->hrm_index()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test TestMixedGCLiveThreshold\n+ * @summary Test G1MixedGCLiveThresholdPercent. Fill up a region to at least 1\/3 region-size,\n+ * the region should not be selected for mixed GC cycle if liveness is above threshold.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver gc.g1.TestMixedGCLiveThreshold\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import sun.hotspot.WhiteBox;\n+\n+public class TestMixedGCLiveThreshold {\n+    private static final String pattern = \"Remembered Set Tracking update regions total ([0-9]+), selected ([0-9]+)$\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ -XX:G1MixedGCLiveThresholdPercent=0\n+        testMixedGCLiveThresholdPercent(0, false);\n+\n+        \/\/ -XX:G1MixedGCLiveThresholdPercent=25\n+        testMixedGCLiveThresholdPercent(25, false);\n+\n+        \/\/ -XX:G1MixedGCLiveThresholdPercent=100\n+        testMixedGCLiveThresholdPercent(100, true);\n+    }\n+\n+    private static void testMixedGCLiveThresholdPercent(int liveThresholdPercent, boolean expectedRebuild) throws Exception {\n+        OutputAnalyzer output = testWithMixedGCLiveThresholdPercent(liveThresholdPercent);\n+\n+        boolean regionsSelected = regionsSelectedForRebuild(output.getStdout());\n+\n+        Asserts.assertEquals(regionsSelected, expectedRebuild,\n+                             (expectedRebuild ?\n+                             \"No Regions selected for rebuild. G1MixedGCLiveThresholdPercent=\"+ liveThresholdPercent +\n+                             \" at least one region should be selected\" :\n+                             \"Regions selected for rebuild. G1MixedGCLiveThresholdPercent=\"+ liveThresholdPercent +\n+                             \" no regions should be selected\")\n+                            );\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    private static OutputAnalyzer testWithMixedGCLiveThresholdPercent(int percent) throws Exception {\n+        ArrayList<String> basicOpts = new ArrayList<>();\n+        Collections.addAll(basicOpts, new String[] {\n+                                       \"-Xbootclasspath\/a:.\",\n+                                       \"-XX:+UseG1GC\",\n+                                       \"-XX:+UnlockDiagnosticVMOptions\",\n+                                       \"-XX:+UnlockExperimentalVMOptions\",\n+                                       \"-XX:+WhiteBoxAPI\",\n+                                       \"-Xlog:gc+remset+tracking=trace\",\n+                                       \"-Xms10M\",\n+                                       \"-Xmx10M\"});\n+\n+        basicOpts.add(\"-XX:G1MixedGCLiveThresholdPercent=\"+percent);\n+\n+        basicOpts.add(GCTest.class.getName());\n+\n+        ProcessBuilder procBuilder =  ProcessTools.createJavaProcessBuilder(basicOpts);\n+        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        return analyzer;\n+    }\n+\n+    private static boolean regionsSelectedForRebuild(String output) throws Exception {\n+        Matcher m = Pattern.compile(pattern, Pattern.MULTILINE).matcher(output);\n+\n+        if (!m.find()) {\n+            throw new Exception(\"Could not find correct output for Remembered Set Tracking in stdout,\" +\n+              \" should match the pattern \\\"\" + pattern + \"\\\", but stdout is \\n\" + output);\n+        }\n+        return Integer.parseInt(m.group(2)) > 0;\n+    }\n+\n+    public static class GCTest {\n+        public static void main(String args[]) throws Exception {\n+            WhiteBox wb = WhiteBox.getWhiteBox();\n+            \/\/ Allocate some memory less than region size.\n+            Object used = allocate();\n+\n+            \/\/ Trigger the full GC using the WhiteBox API.\n+            wb.fullGC();  \/\/ full\n+\n+            \/\/ Memory objects have been promoted to old by full GC.\n+            \/\/ Concurrent cycle may select regions for rebuilding\n+            wb.g1StartConcMarkCycle(); \/\/ concurrent-start, remark and cleanup\n+\n+            \/\/ Sleep to make sure concurrent cycle is done\n+            while (wb.g1InConcurrentMark()) {\n+                Thread.sleep(1000);\n+            }\n+            System.out.println(used);\n+        }\n+\n+        private static Object allocate() {\n+            final int objectSize = WhiteBox.getWhiteBox().g1RegionSize() \/ 3;\n+            Object ret = new byte[objectSize];\n+            return ret;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestMixedGCLiveThreshold.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}