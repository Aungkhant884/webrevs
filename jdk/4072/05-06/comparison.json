{"files":[{"patch":"@@ -257,9 +257,8 @@\n-        try {\n-            update(in, inOfs, completeBlkLen, out, outOfs);\n-            if (lastBlockSize != 0) {\n-                \/\/ do the last partial block\n-                checkBlock();\n-                embeddedCipher.encryptBlock(counter, 0, block, 0);\n-                for (int n = 0; n < lastBlockSize; n++) {\n-                    out[outOfs + completeBlkLen + n] = (byte) ((in[inOfs + completeBlkLen + n] ^ block[n]));\n-                }\n+        update(in, inOfs, completeBlkLen, out, outOfs);\n+        if (lastBlockSize != 0) {\n+            \/\/ do the last partial block\n+            checkBlock();\n+            embeddedCipher.encryptBlock(counter, 0, block, 0);\n+            for (int n = 0; n < lastBlockSize; n++) {\n+                out[outOfs + completeBlkLen + n] =\n+                    (byte) ((in[inOfs + completeBlkLen + n] ^ block[n]));\n@@ -267,2 +266,0 @@\n-        } finally {\n-            reset();\n@@ -294,9 +291,7 @@\n-        try {\n-            update(src, dst);\n-            if (lastBlockSize != 0) {\n-                checkBlock();\n-                \/\/ do the last partial block\n-                embeddedCipher.encryptBlock(counter, 0, block, 0);\n-                for (int n = 0; n < lastBlockSize; n++) {\n-                    dst.put((byte) (src.get() ^ block[n]));\n-                }\n+        update(src, dst);\n+        if (lastBlockSize != 0) {\n+            checkBlock();\n+            \/\/ do the last partial block\n+            embeddedCipher.encryptBlock(counter, 0, block, 0);\n+            for (int n = 0; n < lastBlockSize; n++) {\n+                dst.put((byte) (src.get() ^ block[n]));\n@@ -304,2 +299,0 @@\n-        } finally {\n-            reset();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GCTR.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -162,1 +162,2 @@\n-    private static void processBlock(byte[] data, int ofs, long[] st, long[] subH) {\n+    private static void processBlock(byte[] data, int ofs, long[] st,\n+        long[] subH) {\n@@ -244,1 +245,2 @@\n-    private static void ghashRangeCheck(byte[] in, int inOfs, int inLen, long[] st, long[] subH) {\n+    private static void ghashRangeCheck(byte[] in, int inOfs, int inLen,\n+        long[] st, long[] subH) {\n@@ -276,1 +278,2 @@\n-    private static void processBlocks(byte[] data, int inOfs, int blocks, long[] st, long[] subH) {\n+    private static void processBlocks(byte[] data, int inOfs, int blocks,\n+        long[] st, long[] subH) {\n@@ -290,1 +293,2 @@\n-            processBlocks(data, 0, MAX_LEN \/ AES_BLOCK_SIZE, state, subkeyHtbl);\n+            processBlocks(data, 0, MAX_LEN \/ AES_BLOCK_SIZE, state,\n+                subkeyHtbl);\n@@ -296,1 +300,2 @@\n-            processBlocks(data, 0, len \/ AES_BLOCK_SIZE, state, subkeyHtbl);\n+            processBlocks(data, 0, len \/ AES_BLOCK_SIZE, state,\n+                subkeyHtbl);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GHASH.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -744,1 +744,2 @@\n-            if (buffer != null && buffer.remaining() > 0) {\n+            int bLen = getBufferedLength();\n+            if (bLen > 0) {\n@@ -746,1 +747,1 @@\n-                if (buffer.remaining() >= blockSize) {\n+                if (bLen >= blockSize) {\n@@ -751,1 +752,1 @@\n-                if (buffer.remaining() > 0) {\n+                if (bLen > 0) {\n@@ -1014,0 +1015,1 @@\n+\n@@ -1015,1 +1017,0 @@\n-            checkDataLength(inLen, getBufferedLength());\n@@ -1023,0 +1024,1 @@\n+            checkDataLength(inLen, bLen);\n@@ -1042,1 +1044,1 @@\n-                \/\/ blen is now the offset for 'buffer'\n+                \/\/ bLen is now the offset for 'buffer'\n@@ -1097,1 +1099,2 @@\n-            checkDataLength(src.remaining(), getBufferedLength());\n+            int bLen = getBufferedLength();\n+            checkDataLength(src.remaining(), bLen);\n@@ -1101,2 +1104,1 @@\n-            ByteBuffer buffer = (ibuffer == null || ibuffer.size() == 0) ?\n-                null : ByteBuffer.wrap(ibuffer.toByteArray());\n+\n@@ -1107,1 +1109,2 @@\n-            if (buffer != null && buffer.remaining() > 0) {\n+            if (bLen > 0) {\n+                ByteBuffer buffer = ByteBuffer.wrap(ibuffer.toByteArray());\n@@ -1109,3 +1112,1 @@\n-                int remainder = buffer.remaining() % blockSize;\n-                \/\/ number of bytes along block boundary\n-                int blen = ibuffer.size() - remainder;\n+                int remainder = bLen % blockSize;\n@@ -1115,1 +1116,1 @@\n-                if (blen > 0) {\n+                if (ibuffer.size() - remainder > 0) {\n@@ -1172,2 +1173,2 @@\n-            int bufLen = getBufferedLength();\n-            checkDataLength(inLen, bufLen, tagLenBytes);\n+            int bLen = getBufferedLength();\n+            checkDataLength(inLen, bLen, tagLenBytes);\n@@ -1181,1 +1182,1 @@\n-            if (bufLen > 0) {\n+            if (bLen > 0) {\n@@ -1186,3 +1187,3 @@\n-                if (bufLen >= blockSize) {\n-                    r = doUpdate(buffer, 0, bufLen, out, outOfs);\n-                    bufLen -= r;\n+                if (bLen >= blockSize) {\n+                    r = gctrghash.update(buffer, 0, bLen, out, outOfs);\n+                    bLen -= r;\n@@ -1194,1 +1195,1 @@\n-                if (bufLen > 0 && inLen > 0 && bufLen + inLen >= blockSize) {\n+                if (bLen > 0 && inLen > 0 && bLen + inLen >= blockSize) {\n@@ -1202,1 +1203,1 @@\n-                    bufLen = 0;\n+                    bLen = 0;\n@@ -1207,5 +1208,5 @@\n-                if (bufLen > 0) {\n-                    block = new byte[bufLen + inLen];\n-                    System.arraycopy(buffer, 0, block, 0, bufLen);\n-                    System.arraycopy(in, inOfs, block, bufLen, inLen);\n-                    inLen += bufLen;\n+                if (bLen > 0) {\n+                    block = new byte[bLen + inLen];\n+                    System.arraycopy(buffer, 0, block, 0, bLen);\n+                    System.arraycopy(in, inOfs, block, bLen, inLen);\n+                    inLen += bLen;\n@@ -1218,11 +1219,2 @@\n-            if (inLen > 0) {\n-                if (inLen > TRIGGERLEN) {\n-                    int r = throttleData(gctrghash, in, inOfs, inLen, out,\n-                        outOfs + resultLen);\n-                    inOfs += r;\n-                    inLen -= r;\n-                    resultLen += r;\n-                    processed += r;\n-                }\n-\n-                processed += gctrghash.doFinal(in, inOfs, inLen, out,\n+            if (inLen > TRIGGERLEN) {\n+                int r = throttleData(gctrghash, in, inOfs, inLen, out,\n@@ -1230,1 +1222,4 @@\n-                resultLen += inLen;\n+                inOfs += r;\n+                inLen -= r;\n+                resultLen += r;\n+                processed += r;\n@@ -1233,0 +1228,4 @@\n+            processed += gctrghash.doFinal(in, inOfs, inLen, out,\n+                outOfs + resultLen);\n+            resultLen += inLen;\n+\n@@ -1241,1 +1240,2 @@\n-            restoreOut(out, resultLen + tagLenBytes);\n+            int len = resultLen + tagLenBytes;\n+            restoreOut(out, len);\n@@ -1244,1 +1244,1 @@\n-            return (resultLen + tagLenBytes);\n+            return len;\n@@ -1413,2 +1413,1 @@\n-            int bufLen = getBufferedLength();\n-            int len = inLen + bufLen;\n+            int len = inLen + getBufferedLength();\n@@ -1588,1 +1587,0 @@\n-            int bLen = getBufferedLength();\n@@ -1593,1 +1591,2 @@\n-            int ctBufLen = bLen;\n+            int bLen = getBufferedLength();\n+\n@@ -1597,1 +1596,1 @@\n-                ctBufLen += tagOfs;\n+                bLen += tagOfs;\n@@ -1602,1 +1601,1 @@\n-            if (ctBufLen > 0) {\n+            if (bLen > 0) {\n@@ -1605,2 +1604,2 @@\n-                if (ctBufLen >= blockSize) {\n-                    len += op.update(buffer, 0, ctBufLen, out, outOfs);\n+                if (bLen >= blockSize) {\n+                    len += op.update(buffer, 0, bLen, out, outOfs);\n@@ -1613,1 +1612,1 @@\n-                int bufRemainder = ctBufLen - len;\n+                int bufRemainder = bLen - len;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":48,"deletions":49,"binary":false,"changes":97,"status":"modified"}]}