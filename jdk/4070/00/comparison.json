{"files":[{"patch":"@@ -83,0 +83,1 @@\n+  bool                         _has_checked_exclusion;\n@@ -125,0 +126,1 @@\n+    _has_checked_exclusion = false;\n@@ -177,4 +179,0 @@\n-  void set_excluded() {\n-    _excluded = true;\n-  }\n-\n@@ -191,15 +189,8 @@\n-  void set_failed_verification() {\n-    _failed_verification = true;\n-  }\n-\n-  bool failed_verification() {\n-    return _failed_verification;\n-  }\n-\n-  void set_nest_host(InstanceKlass* nest_host) {\n-    _nest_host = nest_host;\n-  }\n-\n-  InstanceKlass* nest_host() {\n-    return _nest_host;\n-  }\n+  \/\/ simple accessors\n+  void set_excluded()                               { _excluded = true; }\n+  bool has_checked_exclusion() const                { return _has_checked_exclusion; }\n+  void set_has_checked_exclusion()                  { _has_checked_exclusion = true; }\n+  bool failed_verification() const                  { return _failed_verification; }\n+  void set_failed_verification()                    { _failed_verification = true; }\n+  InstanceKlass* nest_host() const                  { return _nest_host; }\n+  void set_nest_host(InstanceKlass* nest_host)      { _nest_host = nest_host; }\n@@ -1329,1 +1320,2 @@\n-void SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason) {\n+\/\/ Returns true so the caller can do:    return warn_excluded(\".....\");\n+bool SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason) {\n@@ -1332,0 +1324,1 @@\n+  return true;\n@@ -1334,1 +1327,22 @@\n-bool SystemDictionaryShared::should_be_excluded(InstanceKlass* k) {\n+bool SystemDictionaryShared::check_for_exclusion(InstanceKlass* k, DumpTimeSharedClassInfo* info) {\n+  if (MetaspaceShared::is_in_shared_metaspace(k)) {\n+    \/\/ We have reached a super type that's already in the base archive. Treat it\n+    \/\/ as \"not excluded\".\n+    assert(DynamicDumpSharedSpaces, \"must be\");\n+    return false;\n+  }\n+\n+  if (info == NULL) {\n+    info = _dumptime_table->get(k);\n+    assert(info != NULL, \"supertypes of any classes in _dumptime_table must either be shared, or must also be in _dumptime_table\");\n+  }\n+\n+  if (!info->has_checked_exclusion()) {\n+    if (check_for_exclusion_impl(k)) {\n+      info->set_excluded();\n+    }\n+    info->set_has_checked_exclusion();\n+  }\n+\n+  return info->is_excluded();\n+}\n@@ -1336,0 +1350,1 @@\n+bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k) {\n@@ -1337,2 +1352,1 @@\n-    warn_excluded(k, \"In error state\");\n-    return true;\n+    return warn_excluded(k, \"In error state\");\n@@ -1341,2 +1355,1 @@\n-    warn_excluded(k, \"Has been redefined\");\n-    return true;\n+    return warn_excluded(k, \"Has been redefined\");\n@@ -1347,2 +1360,1 @@\n-    warn_excluded(k, \"Unsupported location\");\n-    return true;\n+    return warn_excluded(k, \"Unsupported location\");\n@@ -1354,2 +1366,1 @@\n-    warn_excluded(k, \"Signed JAR\");\n-    return true;\n+    return warn_excluded(k, \"Signed JAR\");\n@@ -1362,2 +1373,1 @@\n-    warn_excluded(k, \"JFR event class\");\n-    return true;\n+    return warn_excluded(k, \"JFR event class\");\n@@ -1377,2 +1387,1 @@\n-      warn_excluded(k, \"Failed verification\");\n-      return true;\n+      return warn_excluded(k, \"Failed verification\");\n@@ -1381,2 +1390,1 @@\n-        warn_excluded(k, \"Not linked\");\n-        return true;\n+        return warn_excluded(k, \"Not linked\");\n@@ -1396,2 +1404,1 @@\n-    warn_excluded(k, \"Old class has been linked\");\n-    return true;\n+    return warn_excluded(k, \"Old class has been linked\");\n@@ -1400,2 +1407,1 @@\n-  InstanceKlass* super = k->java_super();\n-  if (super != NULL && should_be_excluded(super)) {\n+  if (k->is_hidden() && !is_registered_lambda_proxy_class(k)) {\n@@ -1403,1 +1409,1 @@\n-    log_warning(cds)(\"Skipping %s: super class %s is excluded\", k->name()->as_C_string(), super->name()->as_C_string());\n+    log_debug(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), \"Hidden class\");\n@@ -1407,1 +1413,2 @@\n-  if (k->is_hidden() && !is_registered_lambda_proxy_class(k)) {\n+  InstanceKlass* super = k->java_super();\n+  if (super != NULL && check_for_exclusion(super, NULL)) {\n@@ -1409,1 +1416,1 @@\n-    log_debug(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), \"Hidden class\");\n+    log_warning(cds)(\"Skipping %s: super class %s is excluded @%p\", k->name()->as_C_string(), super->name()->as_C_string(), super);\n@@ -1417,2 +1424,2 @@\n-    if (should_be_excluded(intf)) {\n-      log_warning(cds)(\"Skipping %s: interface %s is excluded\", k->name()->as_C_string(), intf->name()->as_C_string());\n+    if (check_for_exclusion(intf, NULL)) {\n+      log_warning(cds)(\"Skipping %s: interface %s is excluded @%p\", k->name()->as_C_string(), intf->name()->as_C_string(), intf);\n@@ -1423,1 +1430,1 @@\n-  return false;\n+  return false; \/\/ false == k should NOT be excluded\n@@ -1450,3 +1457,1 @@\n-    if (SystemDictionaryShared::should_be_excluded(k) || info.is_excluded()) {\n-      info.set_excluded();\n-    }\n+    SystemDictionaryShared::check_for_exclusion(k, &info);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":53,"deletions":48,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -215,2 +215,2 @@\n-  static void warn_excluded(InstanceKlass* k, const char* reason);\n-  static bool should_be_excluded(InstanceKlass* k);\n+  static bool warn_excluded(InstanceKlass* k, const char* reason);\n+  static bool check_for_exclusion_impl(InstanceKlass* k);\n@@ -307,0 +307,1 @@\n+  static bool check_for_exclusion(InstanceKlass* k, DumpTimeSharedClassInfo* info);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}