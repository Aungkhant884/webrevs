{"files":[{"patch":"@@ -82,1 +82,6 @@\n-# include <dlfcn.h>\n+# include <sys\/types.h>\n+# include <sys\/mman.h>\n+# include <sys\/stat.h>\n+# include <sys\/select.h>\n+# include <pthread.h>\n+# include <signal.h>\n@@ -85,1 +90,0 @@\n-# include <fcntl.h>\n@@ -87,9 +91,1 @@\n-# include <inttypes.h>\n-# include <link.h>\n-# include <linux\/elf-em.h>\n-# include <poll.h>\n-# include <pthread.h>\n-# include <pthread.h>\n-# include <pwd.h>\n-# include <signal.h>\n-# include <stdint.h>\n+# include <dlfcn.h>\n@@ -97,2 +93,0 @@\n-# include <string.h>\n-# include <syscall.h>\n@@ -100,3 +94,0 @@\n-# include <sys\/ioctl.h>\n-# include <sys\/ipc.h>\n-# include <sys\/mman.h>\n@@ -104,4 +95,1 @@\n-# include <sys\/select.h>\n-# include <sys\/shm.h>\n-# include <sys\/socket.h>\n-# include <sys\/stat.h>\n+# include <pthread.h>\n@@ -109,1 +97,0 @@\n-# include <sys\/sysinfo.h>\n@@ -112,1 +99,0 @@\n-# include <sys\/types.h>\n@@ -114,0 +100,14 @@\n+# include <sys\/socket.h>\n+# include <pwd.h>\n+# include <poll.h>\n+# include <fcntl.h>\n+# include <string.h>\n+# include <syscall.h>\n+# include <sys\/sysinfo.h>\n+# include <sys\/ipc.h>\n+# include <sys\/shm.h>\n+# include <link.h>\n+# include <stdint.h>\n+# include <inttypes.h>\n+# include <sys\/ioctl.h>\n+# include <linux\/elf-em.h>\n@@ -1747,1 +1747,8 @@\n-  \/\/ JDK-8295159: Protect floating-point environment.\n+  \/\/ Save and restore the floating-point environment around dlopen().\n+  \/\/ There are known cases where global library initialization sets\n+  \/\/ FPU flags that affect computation accuracy, for example, enabling\n+  \/\/ Flush-To-Zero and Denormals-Are-Zero. Do not let those libraries\n+  \/\/ break Java arithmetic. Unfortunately, this might affect libraries\n+  \/\/ that might depend on these FPU features for performance and\/or\n+  \/\/ numerical \"accuracy\", but we need to protect Java semantics first\n+  \/\/ and foremost. See JDK-8295159.\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":30,"deletions":23,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main compiler.floatingpoint.TestDenormalDouble\n+ * @run main\/othervm\/native compiler.floatingpoint.TestDenormalDouble\n@@ -50,0 +50,1 @@\n+        System.out.println(\"Loading libfast-math.so\");\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestDenormalDouble.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm compiler.floatingpoint.TestDenormalFloat\n+ * @run main\/othervm\/native compiler.floatingpoint.TestDenormalFloat\n@@ -31,10 +31,0 @@\n-\/\/ gcc -g -ffast-math -shared -Lbuild\/linux-x86_64-server-release\/jdk\/lib -ljava -o libfast-math.so libfast-math.c\n-\/\/ LD_LIBRARY_PATH=.:build\/linux-x86_64-server-release\/jdk\/lib:build\/linux-x86_64-server-release\/jdk\/lib\/server\/ java -cp \/tmp compiler.floatingpoint.TestDenormalFloat\n-\/\/\n-\/\/ Result:\n-\/\/ Loading libfast-math.so\n-\/\/ Exception in thread \"main\" java.lang.AssertionError: TEST FAILED: 0.0\n-\/\/      at compiler.floatingpoint.TestDenormalFloat.testFloats(TestDenormalFloat.java:47)\n-\/\/      at compiler.floatingpoint.TestDenormalFloat.main(TestDenormalFloat.java:57)\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestDenormalFloat.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}