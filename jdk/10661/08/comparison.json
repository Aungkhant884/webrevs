{"files":[{"patch":"@@ -854,0 +854,1 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LDFLAGS_libfast-math := -ffast-math\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5165,0 +5165,16 @@\n+      Label FAIL, DONE;\n+#ifdef _LP64\n+      \/\/ Perform a little arithmetic to make sure that denormal\n+      \/\/ numbers are handled correctly, i.e. that the \"Denormals Are\n+      \/\/ Zeros\" flag has not been set.\n+      movsd(xmm9, ExternalAddress(StubRoutines::x86::addr_unity()), rsi);\n+      movsd(xmm8, ExternalAddress(StubRoutines::x86::addr_thresh()), rsi);\n+      addsd(xmm8, xmm9);\n+      ucomisd(xmm8, xmm9);\n+      jcc(Assembler::equal, FAIL);\n+      xorpd(xmm9, ExternalAddress(StubRoutines::x86::double_sign_flip()), rsi);\n+      subsd(xmm9, xmm8);\n+      ucomisd(xmm8, xmm9);\n+      jcc(Assembler::notEqual, DONE);\n+#endif\n+      bind(FAIL);\n@@ -5166,0 +5182,1 @@\n+      bind(DONE);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3902,0 +3902,4 @@\n+  StubRoutines::x86::_unity\n+    = jdouble_cast(0x0030000000000000); \/\/ 0x1.0p-1020;\n+  StubRoutines::x86::_thresh\n+    = jdouble_cast(0x0000000000000003); \/\/ 0x0.0000000000003p-1022;\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,0 +131,2 @@\n+  static double  _unity;\n+  static double  _thresh;\n@@ -215,0 +217,2 @@\n+  static address addr_unity()            { return (address)&_unity; }\n+  static address addr_thresh()           { return (address)&_thresh; }\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+double  StubRoutines::x86::_unity;\n+double  StubRoutines::x86::_thresh;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86_64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+# include <fenv.h>\n@@ -975,0 +976,39 @@\n+void *os::Bsd::dlopen_helper(const char *filename, int mode) {\n+#if defined(__GNUC__)\n+  \/\/ Save and restore the floating-point environment around dlopen().\n+  \/\/ There are known cases where global library initialization sets\n+  \/\/ FPU flags that affect computation accuracy, for example, enabling\n+  \/\/ Flush-To-Zero and Denormals-Are-Zero. Do not let those libraries\n+  \/\/ break Java arithmetic. Unfortunately, this might affect libraries\n+  \/\/ that might depend on these FPU features for performance and\/or\n+  \/\/ numerical \"accuracy\", but we need to protect Java semantics first\n+  \/\/ and foremost. See JDK-8295159.\n+\n+  fenv_t default_fenv;\n+  int rtn = fegetenv(&default_fenv);\n+  assert(rtn == 0, \"fegetnv must succeed\");\n+#endif \/\/ defined(__GNUC__)\n+\n+  void * result= ::dlopen(filename, RTLD_LAZY);\n+\n+#if defined(__GNUC__)\n+  if (result  != nullptr) {\n+    \/\/ Quickly test to make sure denormals are correctly handled.\n+    static const double unity\n+      = jdouble_cast(0x0030000000000000); \/\/ 0x1.0p-1020;\n+    static const volatile double thresh\n+      = jdouble_cast(0x0000000000000003); \/\/ 0x0.0000000000003p-1022;\n+    if (unity + thresh == unity || -unity - thresh == -unity) {\n+      \/\/ We just dlopen()ed a library that mangled the floating-point\n+      \/\/ flags. Silently fix things now.\n+      int rtn = fesetenv(&default_fenv);\n+      assert(rtn == 0, \"fesetenv must succeed\");\n+      assert(unity + thresh != unity && -unity - thresh != -unity,\n+             \"fsetenv didn't work\");\n+    }\n+  }\n+#endif \/\/ defined(__GNUC__)\n+\n+  return result;\n+}\n+\n@@ -987,1 +1027,1 @@\n-  void * result= ::dlopen(filename, RTLD_LAZY);\n+  void * result= os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n@@ -1032,1 +1072,1 @@\n-  void * result= ::dlopen(filename, RTLD_LAZY);\n+  void * result= os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -73,0 +73,2 @@\n+  static void *dlopen_helper(const char *path, int mode);\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,2 @@\n+# include <fcntl.h>\n+# include <fenv.h>\n@@ -1799,0 +1801,12 @@\n+  \/\/ Save and restore the floating-point environment around dlopen().\n+  \/\/ There are known cases where global library initialization sets\n+  \/\/ FPU flags that affect computation accuracy, for example, enabling\n+  \/\/ Flush-To-Zero and Denormals-Are-Zero. Do not let those libraries\n+  \/\/ break Java arithmetic. Unfortunately, this might affect libraries\n+  \/\/ that might depend on these FPU features for performance and\/or\n+  \/\/ numerical \"accuracy\", but we need to protect Java semantics first\n+  \/\/ and foremost. See JDK-8295159.\n+  fenv_t default_fenv;\n+  int rtn = fegetenv(&default_fenv);\n+  assert(rtn == 0, \"fegetnv must succeed\");\n+\n@@ -1830,0 +1844,13 @@\n+    \/\/ Quickly test to make sure denormals are correctly handled.\n+    static const double unity\n+      = jdouble_cast(0x0030000000000000); \/\/ 0x1.0p-1020;\n+    static const volatile double thresh\n+      = jdouble_cast(0x0000000000000003); \/\/ 0x0.0000000000003p-1022;\n+    if (unity + thresh == unity || -unity - thresh == -unity) {\n+      \/\/ We just dlopen()ed a library that mangled the floating-point\n+      \/\/ flags. Silently fix things now.\n+      int rtn = fesetenv(&default_fenv);\n+      assert(rtn == 0, \"fesetenv must succeed\");\n+      assert(unity + thresh != unity && -unity - thresh != -unity,\n+             \"fsetenv didn't work\");\n+    }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+compiler\/floatingpoint\/TestDenormalFloat.java 8317810 generic-i586\n+compiler\/floatingpoint\/TestDenormalDouble.java 8317810 generic-i586\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295159\n+ * @summary DSO created with -ffast-math breaks Java floating-point arithmetic\n+ * @run main\/othervm\/native compiler.floatingpoint.TestDenormalDouble\n+ *\/\n+\n+package compiler.floatingpoint;\n+\n+import static java.lang.System.loadLibrary;\n+\n+public class TestDenormalDouble {\n+    static volatile double lastDouble;\n+\n+    private static void testDoubles() {\n+        lastDouble = 0x1.0p-1074;\n+        for (double x = lastDouble * 2; x <= 0x1.0p1022; x *= 2) {\n+            if (x != x || x <= lastDouble) {\n+                throw new AssertionError(\"TEST FAILED: \" + x);\n+            }\n+            lastDouble = x;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testDoubles();\n+        System.out.println(\"Loading libfast-math.so\");\n+        loadLibrary(\"fast-math\");\n+        testDoubles();\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestDenormalDouble.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295159\n+ * @summary DSO created with -ffast-math breaks Java floating-point arithmetic\n+ * @run main\/othervm\/native compiler.floatingpoint.TestDenormalFloat\n+ *\/\n+\n+package compiler.floatingpoint;\n+\n+import static java.lang.System.loadLibrary;\n+\n+public class TestDenormalFloat {\n+    static volatile float lastFloat;\n+\n+    private static void testFloats() {\n+        lastFloat = 0x1.0p-149f;\n+        for (float x = lastFloat * 2; x <= 0x1.0p127f; x *= 2) {\n+            if (x != x || x <= lastFloat) {\n+                throw new AssertionError(\"TEST FAILED: \" + x);\n+            }\n+            lastFloat = x;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testFloats();\n+        System.out.println(\"Loading libfast-math.so\");\n+        loadLibrary(\"fast-math\");\n+        testFloats();\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestDenormalFloat.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <assert.h>\n+#include <fenv.h>\n+#include \"jni.h\"\n+\n+\/\/ See GCC bug 55522:\n+\/\/\n+\/\/ \"When used at link-time, [ GCC with -ffast-math ] may include\n+\/\/ libraries or startup files that change the default FPU control word\n+\/\/ or other similar optimizations.\"\n+\/\/\n+\/\/ This breaks Java's floating point arithmetic.\n+\n+#if defined(__GNUC__)\n+static void __attribute__((constructor)) set_flush_to_zero(void) {\n+\n+#if defined(__x86_64__) && defined(SSE)\n+#define MXCSR_DAZ (1 << 6)      \/* Enable denormals are zero mode *\/\n+#define MXCSR_FTZ (1 << 15)     \/* Enable flush to zero mode *\/\n+  unsigned int mxcsr = __builtin_ia32_stmxcsr ();\n+  mxcsr |= MXCSR_DAZ | MXCSR_FTZ;\n+  __builtin_ia32_ldmxcsr (mxcsr);\n+\n+#elif defined(__aarch64__)\n+#define _FPU_FPCR_FZ (unsigned long)0x1000000\n+#define _FPU_SETCW(fpcr) \\\n+  {  __asm__ __volatile__ (\"msr fpcr, %0\" : : \"r\" (fpcr)); }\n+  \/* Flush to zero, round to nearest, IEEE exceptions disabled.  *\/\n+  _FPU_SETCW (_FPU_FPCR_FZ);\n+\n+#endif \/\/ CPU arch\n+\n+}\n+#endif \/\/ defined(__GNUC__)\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/libfast-math.c","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}