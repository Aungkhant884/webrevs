{"files":[{"patch":"@@ -345,1 +345,1 @@\n-   do_name(     arraySort_name,                                  \"arraySort\")                                           \\\n+   do_name(     arraySort_name,                                  \"sort\")                                                \\\n@@ -349,1 +349,1 @@\n-   do_name(     arrayPartition_name,                             \"arrayPartition\")                                      \\\n+   do_name(     arrayPartition_name,                             \"partition\")                                           \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Arrays;\n@@ -35,1 +34,0 @@\n-\n@@ -56,2 +54,0 @@\n-\n-\n@@ -131,2 +127,2 @@\n-     * Represents a function that accepts an array and sorts the specified range\n-     * of an array into ascending order.\n+     * Represents a function that accepts the array and sorts the specified range\n+     * of the array into ascending order.\n@@ -137,1 +133,1 @@\n-         * Sorts the specified range of an array.\n+         * Sorts the specified range of the array.\n@@ -147,1 +143,1 @@\n-     * Sorts the specified range of an array into ascending numerical order.\n+     * Sorts the specified range of the array into ascending numerical order.\n@@ -160,1 +156,1 @@\n-    private static <A> void arraySort(Class<?> elemType, A array, long offset, int low, int high, SortOperation<A> so) {\n+    private static <A> void sort(Class<?> elemType, A array, long offset, int low, int high, SortOperation<A> so) {\n@@ -165,2 +161,2 @@\n-     * Represents a function that accepts an array and partitions the specified range\n-     * of an array using the pivots provided.\n+     * Represents a function that accepts the array and partitions the specified range\n+     * of the array using the pivots provided.\n@@ -171,1 +167,1 @@\n-         * Partitions the specified range of an array using the given pivots.\n+         * Partitions the specified range of the array using the given pivots.\n@@ -183,1 +179,1 @@\n-     * Partitions the specified range of an array using the two pivots provided.\n+     * Partitions the specified range of the array using the two pivots provided.\n@@ -198,1 +194,1 @@\n-    private static <A> int[] arrayPartition(Class<?> elemType, A array, long offset, int low, int high, int indexPivot1, int indexPivot2, PartitionOperation<A> po) {\n+    private static <A> int[] partition(Class<?> elemType, A array, long offset, int low, int high, int indexPivot1, int indexPivot2, PartitionOperation<A> po) {\n@@ -258,1 +254,0 @@\n-        int[] pivotIndices;\n@@ -265,1 +260,1 @@\n-                arraySort(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n+                sort(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n@@ -273,1 +268,1 @@\n-                arraySort(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n+                sort(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n@@ -359,1 +354,1 @@\n-                pivotIndices = arrayPartition(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n+                int[] pivotIndices = partition(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n@@ -383,1 +378,1 @@\n-                pivotIndices = arrayPartition(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n+                int[] pivotIndices = partition(int.class, a, Unsafe.ARRAY_INT_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n@@ -402,1 +397,1 @@\n-     * Partitions the specified range of an array using the two pivots provided.\n+     * Partitions the specified range of the array using the two pivots provided.\n@@ -491,1 +486,1 @@\n-     * Partitions the specified range of an array using a single pivot provided.\n+     * Partitions the specified range of the array using a single pivot provided.\n@@ -1063,1 +1058,0 @@\n-        int[] pivotIndices;\n@@ -1071,1 +1065,1 @@\n-                arraySort(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n+                sort(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n@@ -1079,1 +1073,1 @@\n-                arraySort(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n+                sort(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n@@ -1159,1 +1153,1 @@\n-            if(a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n+            if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n@@ -1166,1 +1160,1 @@\n-                pivotIndices = arrayPartition(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n+                int[] pivotIndices = partition(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n@@ -1187,1 +1181,1 @@\n-                pivotIndices = arrayPartition(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n+                int[] pivotIndices = partition(long.class, a, Unsafe.ARRAY_LONG_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n@@ -1206,1 +1200,1 @@\n-     * Partitions the specified range of an array using the two pivots provided.\n+     * Partitions the specified range of the array using the two pivots provided.\n@@ -1294,1 +1288,1 @@\n-     * Partitions the specified range of an array using a single pivot provided.\n+     * Partitions the specified range of the array using a single pivot provided.\n@@ -2654,1 +2648,0 @@\n-        int[] pivotIndices;\n@@ -2662,1 +2655,1 @@\n-                arraySort(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n+                sort(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n@@ -2670,1 +2663,1 @@\n-                arraySort(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n+                sort(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n@@ -2750,1 +2743,1 @@\n-            if(a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n+            if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n@@ -2757,1 +2750,1 @@\n-                pivotIndices = arrayPartition(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n+                int[] pivotIndices = partition(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n@@ -2778,1 +2771,1 @@\n-                pivotIndices = arrayPartition(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n+                int[] pivotIndices = partition(float.class, a, Unsafe.ARRAY_FLOAT_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n@@ -2797,1 +2790,1 @@\n-     * Partitions the specified range of an array using the two pivots provided.\n+     * Partitions the specified range of the array using the two pivots provided.\n@@ -2885,1 +2878,1 @@\n-     * Partitions the specified range of an array using a single pivot provided.\n+     * Partitions the specified range of the array using a single pivot provided.\n@@ -3509,1 +3502,0 @@\n-        int[] pivotIndices;\n@@ -3516,1 +3508,1 @@\n-                arraySort(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n+                sort(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, DualPivotQuicksort::mixedInsertionSort);\n@@ -3524,1 +3516,1 @@\n-                arraySort(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n+                sort(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, DualPivotQuicksort::insertionSort);\n@@ -3604,1 +3596,1 @@\n-            if(a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n+            if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]) {\n@@ -3611,1 +3603,1 @@\n-                pivotIndices = arrayPartition(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n+                int[] pivotIndices = partition(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, e1, e5, DualPivotQuicksort::partitionDualPivot);\n@@ -3632,1 +3624,1 @@\n-                pivotIndices = arrayPartition(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n+                int[] pivotIndices = partition(double.class, a, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, low, high, e3, e3, DualPivotQuicksort::partitionSinglePivot);\n@@ -3652,1 +3644,1 @@\n-     * Partitions the specified range of an array using the two pivots provided.\n+     * Partitions the specified range of the array using the two pivots provided.\n@@ -3741,1 +3733,1 @@\n-     * Partitions the specified range of an array using a single pivot provided.\n+     * Partitions the specified range of the array using a single pivot provided.\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":37,"deletions":45,"binary":false,"changes":82,"status":"modified"}]}