{"files":[{"patch":"@@ -346,1 +346,1 @@\n-   do_signature(arraySort_signature,          \"(Ljava\/lang\/Class;Ljava\/lang\/Object;JIILjava\/util\/SortOperation;)V\")     \\\n+   do_signature(arraySort_signature, \"(Ljava\/lang\/Class;Ljava\/lang\/Object;JIILjava\/util\/DualPivotQuicksort$SortOperation;)V\") \\\n@@ -348,1 +348,1 @@\n-  do_intrinsic(_arrayPartition,           java_util_DualPivotQuicksort, arrayPartition_name, arrayPartition_signature, F_S)   \\\n+  do_intrinsic(_arrayPartition,           java_util_DualPivotQuicksort, arrayPartition_name, arrayPartition_signature, F_S) \\\n@@ -350,1 +350,1 @@\n-   do_signature(arrayPartition_signature, \"(Ljava\/lang\/Class;Ljava\/lang\/Object;JIIIILjava\/util\/PartitionOperation;)[I\") \\\n+   do_signature(arrayPartition_signature, \"(Ljava\/lang\/Class;Ljava\/lang\/Object;JIIIILjava\/util\/DualPivotQuicksort$PartitionOperation;)[I\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,34 +57,0 @@\n-\/**\n- * Represents a function that accepts an array and sorts a specified range\n- * of the array into ascending order.\n- *\/\n-@FunctionalInterface\n-interface SortOperation<A> {\n-    \/**\n-     * Sorts the specified range of the array.\n-     *\n-     * @param a the array to be sorted\n-     * @param low the index of the first element, inclusive, to be sorted\n-     * @param high the index of the last element, exclusive, to be sorted\n-     *\/\n-    void sort(A a, int low, int high);\n-}\n-\n-\/**\n- * Represents a function that accepts an array and partitions a specified range\n- * of the array based on the pivots provided.\n- *\/\n-@FunctionalInterface\n-interface PartitionOperation<A> {\n-     \/**\n-     * Partitions the specified range of the array.\n-     *\n-     * @param a the array to be sorted\n-     * @param low the index of the first element, inclusive, to be sorted\n-     * @param high the index of the last element, exclusive, to be sorted\n-     * @param indexPivot1 the index of pivot1, the first pivot\n-     * @param indexPivot2 the index of pivot2, the second pivot\n-     *\/\n-    int[] partition(A a, int low, int high, int indexPivot1, int indexPivot2);\n-}\n-\n@@ -164,0 +130,16 @@\n+    \/**\n+     * Represents a function that accepts an array and sorts a specified range\n+     * of the array into ascending order.\n+     *\/\n+    @FunctionalInterface\n+    private static interface SortOperation<A> {\n+        \/**\n+         * Sorts the specified range of the array.\n+         *\n+         * @param a the array to be sorted\n+         * @param low the index of the first element, inclusive, to be sorted\n+         * @param high the index of the last element, exclusive, to be sorted\n+         *\/\n+        void sort(A a, int low, int high);\n+    }\n+\n@@ -179,0 +161,1 @@\n+    @ForceInline\n@@ -183,0 +166,18 @@\n+    \/**\n+     * Represents a function that accepts an array and partitions a specified range\n+     * of the array based on the pivots provided.\n+     *\/\n+    @FunctionalInterface\n+    interface PartitionOperation<A> {\n+        \/**\n+         * Partitions the specified range of the array.\n+         *\n+         * @param a the array to be sorted\n+         * @param low the index of the first element, inclusive, to be sorted\n+         * @param high the index of the last element, exclusive, to be sorted\n+         * @param indexPivot1 the index of pivot1, the first pivot\n+         * @param indexPivot2 the index of pivot2, the second pivot\n+         *\/\n+        int[] partition(A a, int low, int high, int indexPivot1, int indexPivot2);\n+    }\n+\n@@ -203,1 +204,0 @@\n-\n@@ -504,1 +504,1 @@\n-        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"both the pivot indices must be same\");\n+        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"Both the pivot indices must be same\");\n@@ -1308,1 +1308,1 @@\n-        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"both the pivot indices must be same\");\n+        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"Both the pivot indices must be same\");\n@@ -2900,1 +2900,1 @@\n-        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"both the pivot indices must be same\");\n+        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"Both the pivot indices must be same\");\n@@ -3756,1 +3756,1 @@\n-        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"both the pivot indices must be same\");\n+        if (indexPivot1 != indexPivot2) throw new IllegalArgumentException(\"Both the pivot indices must be same\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"}]}