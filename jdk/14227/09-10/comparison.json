{"files":[{"patch":"@@ -346,1 +346,1 @@\n-   do_signature(arraySort_signature,                             \"(Ljava\/lang\/Class;Ljava\/lang\/Object;II)V\")            \\\n+   do_signature(arraySort_signature,                             \"(Ljava\/lang\/Class;Ljava\/lang\/Object;JII)V\")           \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5204,4 +5204,5 @@\n-  Node* elementType     = argument(0);\n-  Node* array           = argument(1);\n-  Node* fromIndex       = argument(2);\n-  Node* toIndex         = argument(3);\n+  Node* elementType     = null_check(argument(0));\n+  Node* obj             = argument(1);\n+  Node* offset          = argument(2);\n+  Node* fromIndex       = argument(4);\n+  Node* toIndex         = argument(5);\n@@ -5212,1 +5213,0 @@\n-\n@@ -5216,11 +5216,3 @@\n-  array = must_be_not_null(array, true);\n-\n-  const TypeAryPtr* array_type = array->Value(&_gvn)->isa_aryptr();\n-  assert(array_type != nullptr &&  array_type->elem() != Type::BOTTOM, \"args are strange\");\n-\n-  \/\/ for the quick and dirty code we will skip all the checks.\n-  \/\/ we are just trying to get the call to be generated.\n-  Node* array_fromIndex  = array;\n-  if (fromIndex != nullptr || toIndex != nullptr) {\n-    assert(fromIndex != nullptr && toIndex != nullptr, \"\");\n-    array_fromIndex = array_element_address(array, fromIndex, bt);\n+  const TypeAryPtr* obj_t = _gvn.type(obj)->isa_aryptr();\n+  if (obj_t == nullptr || obj_t->elem() == Type::BOTTOM ) {\n+    return false; \/\/ failed input validation\n@@ -5228,1 +5220,1 @@\n-\n+  Node* obj_adr = make_unsafe_address(obj, offset);\n@@ -5232,1 +5224,1 @@\n-                    array_fromIndex, fromIndex, toIndex);\n+                    obj_adr, fromIndex, toIndex);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2021 Serge Sans Paille. All rights reserved.\n@@ -553,1 +554,2 @@\n-void avx512_qselect<int32_t>(int32_t *arr, int64_t k, int64_t arrsize) {\n+void avx512_qselect<int32_t>(int32_t *arr, int64_t k, int64_t arrsize,\n+                             bool hasnan) {\n@@ -561,1 +563,2 @@\n-void avx512_qselect<uint32_t>(uint32_t *arr, int64_t k, int64_t arrsize) {\n+void avx512_qselect<uint32_t>(uint32_t *arr, int64_t k, int64_t arrsize,\n+                              bool hasnan) {\n@@ -569,6 +572,9 @@\n-void avx512_qselect<float>(float *arr, int64_t k, int64_t arrsize) {\n-    if (arrsize > 1) {\n-        int64_t nan_count = replace_nan_with_inf(arr, arrsize);\n-        qselect_32bit_<zmm_vector<float>, float>(arr, k, 0, arrsize - 1,\n-                                                 2 * (int64_t)log2(arrsize));\n-        replace_inf_with_nan(arr, arrsize, nan_count);\n+void avx512_qselect<float>(float *arr, int64_t k, int64_t arrsize,\n+                           bool hasnan) {\n+    int64_t indx_last_elem = arrsize - 1;\n+    if (UNLIKELY(hasnan)) {\n+        indx_last_elem = move_nans_to_end_of_array(arr, arrsize);\n+    }\n+    if (indx_last_elem >= k) {\n+        qselect_32bit_<zmm_vector<float>, float>(\n+            arr, k, 0, indx_last_elem, 2 * (int64_t)log2(indx_last_elem));\n","filename":"src\/java.base\/linux\/native\/libavx512_x86_64\/avx512-32bit-qsort.hpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -786,1 +786,2 @@\n-void avx512_qselect<int64_t>(int64_t *arr, int64_t k, int64_t arrsize) {\n+void avx512_qselect<int64_t>(int64_t *arr, int64_t k, int64_t arrsize,\n+                             bool hasnan) {\n@@ -794,1 +795,2 @@\n-void avx512_qselect<uint64_t>(uint64_t *arr, int64_t k, int64_t arrsize) {\n+void avx512_qselect<uint64_t>(uint64_t *arr, int64_t k, int64_t arrsize,\n+                              bool hasnan) {\n@@ -802,6 +804,9 @@\n-void avx512_qselect<double>(double *arr, int64_t k, int64_t arrsize) {\n-    if (arrsize > 1) {\n-        int64_t nan_count = replace_nan_with_inf(arr, arrsize);\n-        qselect_64bit_<zmm_vector<double>, double>(arr, k, 0, arrsize - 1,\n-                                                   2 * (int64_t)log2(arrsize));\n-        replace_inf_with_nan(arr, arrsize, nan_count);\n+void avx512_qselect<double>(double *arr, int64_t k, int64_t arrsize,\n+                            bool hasnan) {\n+    int64_t indx_last_elem = arrsize - 1;\n+    if (UNLIKELY(hasnan)) {\n+        indx_last_elem = move_nans_to_end_of_array(arr, arrsize);\n+    }\n+    if (indx_last_elem >= k) {\n+        qselect_64bit_<zmm_vector<double>, double>(\n+            arr, k, 0, indx_last_elem, 2 * (int64_t)log2(indx_last_elem));\n","filename":"src\/java.base\/linux\/native\/libavx512_x86_64\/avx512-64bit-qsort.hpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-#include <immintrin.h>\n-\n@@ -65,0 +63,1 @@\n+#include <immintrin.h>\n@@ -110,0 +109,3 @@\n+#define LIKELY(x) __builtin_expect((x), 1)\n+#define UNLIKELY(x) __builtin_expect((x), 0)\n+\n@@ -122,2 +124,3 @@\n-void avx512_qselect(T *arr, int64_t k, int64_t arrsize);\n-void avx512_qselect_fp16(uint16_t *arr, int64_t k, int64_t arrsize);\n+void avx512_qselect(T *arr, int64_t k, int64_t arrsize, bool hasnan = false);\n+void avx512_qselect_fp16(uint16_t *arr, int64_t k, int64_t arrsize,\n+                         bool hasnan = false);\n@@ -126,2 +129,3 @@\n-inline void avx512_partial_qsort(T *arr, int64_t k, int64_t arrsize) {\n-    avx512_qselect<T>(arr, k - 1, arrsize);\n+inline void avx512_partial_qsort(T *arr, int64_t k, int64_t arrsize,\n+                                 bool hasnan = false) {\n+    avx512_qselect<T>(arr, k - 1, arrsize, hasnan);\n@@ -130,3 +134,3 @@\n-inline void avx512_partial_qsort_fp16(uint16_t *arr, int64_t k,\n-                                      int64_t arrsize) {\n-    avx512_qselect_fp16(arr, k - 1, arrsize);\n+inline void avx512_partial_qsort_fp16(uint16_t *arr, int64_t k, int64_t arrsize,\n+                                      bool hasnan = false) {\n+    avx512_qselect_fp16(arr, k - 1, arrsize, hasnan);\n@@ -140,0 +144,26 @@\n+template <typename T>\n+bool is_a_nan(T elem) {\n+    return std::isnan(elem);\n+}\n+\n+\/*\n+ * Sort all the NAN's to end of the array and return the index of the last elem\n+ * in the array which is not a nan\n+ *\/\n+template <typename T>\n+int64_t move_nans_to_end_of_array(T *arr, int64_t arrsize) {\n+    int64_t jj = arrsize - 1;\n+    int64_t ii = 0;\n+    int64_t count = 0;\n+    while (ii <= jj) {\n+        if (is_a_nan(arr[ii])) {\n+            std::swap(arr[ii], arr[jj]);\n+            jj -= 1;\n+            count++;\n+        } else {\n+            ii += 1;\n+        }\n+    }\n+    return arrsize - count - 1;\n+}\n+\n","filename":"src\/java.base\/linux\/native\/libavx512_x86_64\/avx512-common-qsort.h","additions":39,"deletions":9,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Arrays.NaturalOrder;\n@@ -49,0 +50,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -80,0 +82,10 @@\n+    \/**\n+     * Sorts the specified array into ascending numerical order.\n+     *\n+     *\n+     * @param elemType the class of the array to be sorted\n+     * @param array the array to be sorted\n+     * @param offset the array offset\n+     * @param fromIndex from Index\n+     * @param toIndex to Index\n+     *\/\n@@ -81,1 +93,1 @@\n-    private static void arraySort(Class<?> elemType, Object array, int fromIndex, int toIndex) {\n+    public static void arraySort(Class<?> elemType, Object array, long offset, int fromIndex, int toIndex) {\n@@ -108,1 +120,2 @@\n-        arraySort(int.class, a, 0, a.length);\n+        int offset = Unsafe.ARRAY_INT_BASE_OFFSET;\n+        arraySort(int.class, a, offset, 0, a.length);\n@@ -132,1 +145,2 @@\n-        arraySort(int.class, a, fromIndex, toIndex);\n+        int offset = Unsafe.ARRAY_INT_BASE_OFFSET + (fromIndex << ArraysSupport.LOG2_ARRAY_INT_INDEX_SCALE);\n+        arraySort(int.class, a, offset, fromIndex, toIndex);\n@@ -146,1 +160,2 @@\n-        arraySort(long.class, a, 0, a.length);\n+        int offset = Unsafe.ARRAY_LONG_BASE_OFFSET;\n+        arraySort(long.class, a, offset, 0, a.length);\n@@ -170,1 +185,2 @@\n-        arraySort(long.class, a, fromIndex, toIndex);\n+        int offset = Unsafe.ARRAY_LONG_BASE_OFFSET + (fromIndex << ArraysSupport.LOG2_ARRAY_LONG_INDEX_SCALE);\n+        arraySort(long.class, a, offset, fromIndex, toIndex);\n@@ -306,1 +322,2 @@\n-        arraySort(float.class, a, 0, a.length);\n+        int offset = Unsafe.ARRAY_FLOAT_BASE_OFFSET;\n+        arraySort(float.class, a, offset, 0, a.length);\n@@ -338,1 +355,2 @@\n-        arraySort(float.class, a, fromIndex, toIndex);\n+        int offset = Unsafe.ARRAY_FLOAT_BASE_OFFSET + (fromIndex << ArraysSupport.LOG2_ARRAY_FLOAT_INDEX_SCALE);\n+        arraySort(float.class, a, offset, fromIndex, toIndex);\n@@ -360,1 +378,2 @@\n-        arraySort(double.class, a, 0, a.length);\n+        int offset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET;\n+        arraySort(double.class, a, offset, 0, a.length);\n@@ -392,1 +411,2 @@\n-        arraySort(double.class, a, fromIndex, toIndex);\n+        int offset = Unsafe.ARRAY_DOUBLE_BASE_OFFSET + (fromIndex << ArraysSupport.LOG2_ARRAY_DOUBLE_INDEX_SCALE);\n+        arraySort(double.class, a, offset, fromIndex, toIndex);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"}]}