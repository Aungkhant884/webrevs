{"files":[{"patch":"@@ -247,1 +247,0 @@\n-      LDFLAGS_windows := -defaultlib:msvcrt, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -344,9 +344,3 @@\n-  do_intrinsic(_arraySortI,                 java_util_Arrays,     arraySort_name, arraySortI_signature,          F_S)   \\\n-   do_name(     arraySort_name,                                   \"arraySort\")                                          \\\n-   do_signature(arraySortI_signature,                             \"([III)V\")                                            \\\n-  do_intrinsic(_arraySortL,                 java_util_Arrays,     arraySort_name, arraySortL_signature,          F_S)   \\\n-   do_signature(arraySortL_signature,                             \"([JII)V\")                                            \\\n-  do_intrinsic(_arraySortF,                 java_util_Arrays,     arraySort_name, arraySortF_signature,          F_S)   \\\n-   do_signature(arraySortF_signature,                             \"([FII)V\")                                            \\\n-  do_intrinsic(_arraySortD,                 java_util_Arrays,     arraySort_name, arraySortD_signature,          F_S)   \\\n-   do_signature(arraySortD_signature,                             \"([DII)V\")                                            \\\n+  do_intrinsic(_arraySort,                java_util_Arrays,       arraySort_name, arraySort_signature,           F_S)   \\\n+   do_name(     arraySort_name,                                  \"arraySort\")                                           \\\n+   do_signature(arraySort_signature,                             \"(Ljava\/lang\/Class;Ljava\/lang\/Object;II)V\")            \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -578,4 +578,1 @@\n-  case vmIntrinsics::_arraySortI:\n-  case vmIntrinsics::_arraySortL:\n-  case vmIntrinsics::_arraySortF:\n-  case vmIntrinsics::_arraySortD:\n+  case vmIntrinsics::_arraySort:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -295,4 +295,1 @@\n-  case vmIntrinsics::_arraySortI:\n-  case vmIntrinsics::_arraySortL:\n-  case vmIntrinsics::_arraySortF:\n-  case vmIntrinsics::_arraySortD:               return inline_arraysort(intrinsic_id());\n+  case vmIntrinsics::_arraySort:               return inline_arraysort(intrinsic_id());\n@@ -5206,1 +5203,0 @@\n-  BasicType bt;\n@@ -5208,16 +5204,8 @@\n-  switch(id) {\n-    case vmIntrinsics::_arraySortI:\n-      bt = T_INT;\n-      break;\n-    case vmIntrinsics::_arraySortL:\n-      bt = T_LONG;\n-      break;\n-    case vmIntrinsics::_arraySortF:\n-      bt = T_FLOAT;\n-      break;\n-    case vmIntrinsics::_arraySortD:\n-      bt = T_DOUBLE;\n-      break;\n-    default:\n-      break;\n-  }\n+  Node* elementType     = argument(0);\n+  Node* array           = argument(1);\n+  Node* fromIndex       = argument(2);\n+  Node* toIndex         = argument(3);\n+\n+  const TypeInstPtr* elem_klass = gvn().type(elementType)->isa_instptr();\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  BasicType bt = elem_type->basic_type();\n@@ -5228,4 +5216,0 @@\n-  Node* array           = argument(0);\n-  Node* fromIndex       = argument(1);\n-  Node* toIndex         = argument(2);\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -82,17 +82,6 @@\n-    private static void arraySort(int[] array, int fromIndex, int toIndex) {\n-        DualPivotQuicksort.sort(array, 0, fromIndex, toIndex);\n-    }\n-\n-    @IntrinsicCandidate\n-    private static void arraySort(long[] array, int fromIndex, int toIndex) {\n-        DualPivotQuicksort.sort(array, 0, fromIndex, toIndex);\n-    }\n-\n-    @IntrinsicCandidate\n-    private static void arraySort(float[] array, int fromIndex, int toIndex) {\n-        DualPivotQuicksort.sort(array, 0, fromIndex, toIndex);\n-    }\n-\n-    @IntrinsicCandidate\n-    private static void arraySort(double[] array, int fromIndex, int toIndex) {\n-        DualPivotQuicksort.sort(array, 0, fromIndex, toIndex);\n+    private static void arraySort(Class<?> elemType, Object array, int fromIndex, int toIndex) {\n+        if (elemType == int.class) DualPivotQuicksort.sort((int[]) array, 0, fromIndex, toIndex);\n+        else if (elemType == long.class) DualPivotQuicksort.sort((long[]) array, 0, fromIndex, toIndex);\n+        else if (elemType == float.class) DualPivotQuicksort.sort((float[]) array, 0, fromIndex, toIndex);\n+        else if (elemType == double.class) DualPivotQuicksort.sort((double[]) array, 0, fromIndex, toIndex);\n+        else throw new UnsupportedOperationException(\"arraySort intrinsic not supported for this type: \" + elemType.toString());\n@@ -120,1 +109,1 @@\n-        arraySort(a, 0, a.length);\n+        arraySort(int.class, a, 0, a.length);\n@@ -144,1 +133,1 @@\n-        arraySort(a, fromIndex, toIndex);\n+        arraySort(int.class, a, fromIndex, toIndex);\n@@ -158,1 +147,1 @@\n-        arraySort(a, 0, a.length);\n+        arraySort(long.class, a, 0, a.length);\n@@ -182,1 +171,1 @@\n-        arraySort(a, fromIndex, toIndex);\n+        arraySort(long.class, a, fromIndex, toIndex);\n@@ -318,1 +307,1 @@\n-        arraySort(a, 0, a.length);\n+        arraySort(float.class, a, 0, a.length);\n@@ -350,1 +339,1 @@\n-        arraySort(a, fromIndex, toIndex);\n+        arraySort(float.class, a, fromIndex, toIndex);\n@@ -372,1 +361,1 @@\n-        arraySort(a, 0, a.length);\n+        arraySort(double.class, a, 0, a.length);\n@@ -404,1 +393,1 @@\n-        arraySort(a, fromIndex, toIndex);\n+        arraySort(double.class, a, fromIndex, toIndex);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Level;\n@@ -90,2 +91,2 @@\n-    @Benchmark\n-    public void intSort() throws Throwable {\n+    @Setup(Level.Invocation)\n+    public void init() {\n@@ -93,0 +94,7 @@\n+        longs_sorted = longs_unsorted.clone();\n+        floats_sorted = floats_unsorted.clone();\n+        doubles_sorted = doubles_unsorted.clone();\n+    }\n+\n+    @Benchmark\n+    public int[] intSort() throws Throwable {\n@@ -94,0 +102,1 @@\n+        return ints_sorted;\n@@ -97,2 +106,1 @@\n-    public void longSort() throws Throwable {\n-        longs_sorted = longs_unsorted.clone();\n+    public long[] longSort() throws Throwable {\n@@ -100,0 +108,1 @@\n+        return longs_sorted;\n@@ -103,2 +112,1 @@\n-    public void floatSort() throws Throwable {\n-        floats_sorted = floats_unsorted.clone();\n+    public float[] floatSort() throws Throwable {\n@@ -106,0 +114,1 @@\n+        return floats_sorted;\n@@ -109,2 +118,1 @@\n-    public void doubleSort() throws Throwable {\n-        doubles_sorted = doubles_unsorted.clone();\n+    public double[] doubleSort() throws Throwable {\n@@ -112,0 +120,1 @@\n+        return doubles_sorted;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysSort.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"}]}