{"files":[{"patch":"@@ -246,1 +246,0 @@\n-java\/awt\/Robot\/ModifierRobotKey\/ModifierRobotKeyTest.java 8157173 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -60,2 +61,2 @@\n-    private int[] textKeys, modifierKeys, inputMasks;\n-    private boolean[] modifierStatus, textStatus;\n+    private final int[] textKeys, modifierKeys, inputMasks;\n+    private final boolean[] modifierStatus, textStatus;\n@@ -80,3 +81,3 @@\n-            inputMasks[0] =  InputEvent.SHIFT_MASK;\n-            inputMasks[1] =  InputEvent.CTRL_MASK;\n-            inputMasks[2] =  InputEvent.ALT_MASK;\n+            inputMasks[0] =  InputEvent.SHIFT_DOWN_MASK;\n+            inputMasks[1] =  InputEvent.CTRL_DOWN_MASK;\n+            inputMasks[2] =  InputEvent.ALT_DOWN_MASK;\n@@ -91,4 +92,4 @@\n-            inputMasks[0] =  InputEvent.SHIFT_MASK;\n-            inputMasks[1] =  InputEvent.CTRL_MASK;\n-            inputMasks[2] =  InputEvent.ALT_MASK;\n-            inputMasks[3] =  InputEvent.ALT_GRAPH_MASK;\n+            inputMasks[0] =  InputEvent.SHIFT_DOWN_MASK;\n+            inputMasks[1] =  InputEvent.CTRL_DOWN_MASK;\n+            inputMasks[2] =  InputEvent.ALT_DOWN_MASK;\n+            inputMasks[3] =  InputEvent.ALT_GRAPH_DOWN_MASK;\n@@ -110,1 +111,1 @@\n-        EventQueue.invokeAndWait( () -> { initializeGUI(); });\n+        EventQueue.invokeAndWait(this::initializeGUI);\n@@ -118,1 +119,1 @@\n-            if (! startTest) {\n+            if (!startTest) {\n@@ -122,1 +123,1 @@\n-                if ((event.getModifiers() & inputMasks[x]) != 0) {\n+                if ((event.getModifiersEx() & inputMasks[x]) != 0) {\n@@ -124,1 +125,1 @@\n-                                      event.getKeyModifiersText(inputMasks[x]));\n+                            InputEvent.getModifiersExText(inputMasks[x]));\n@@ -131,1 +132,1 @@\n-                                                 event.getKeyText(textKeys[x]));\n+                            KeyEvent.getKeyText(textKeys[x]));\n@@ -152,53 +153,19 @@\n-        robot = new ExtendedRobot();\n-        robot.setAutoDelay(20);\n-        robot.waitForIdle();\n-\n-        robot.mouseMove((int) frame.getLocationOnScreen().getX() +\n-                                                    frame.getSize().width \/ 2,\n-                        (int) frame.getLocationOnScreen().getY() +\n-                                                    frame.getSize().height \/ 2);\n-        robot.click(MouseEvent.BUTTON1_MASK);\n-        robot.waitForIdle();\n-        assertTrue(focusGained, \"FAIL: Canvas gained focus!\");\n-\n-        String error = null;\n-        exit1:\n-        for (int i = 0; i < modifierKeys.length; i++) {\n-            for (int j = 0; j < textKeys.length; j++) {\n-                if (error != null) {\n-                    break exit1;\n-                }\n-                robot.waitForIdle(100);\n-                synchronized (lock) {\n-                    tempPress = false;\n-                    robot.keyPress(modifierKeys[i]);\n-                    lock.wait(WAIT_DELAY);\n-                }\n-                if (!tempPress) {\n-                    error =\"FAIL: keyPressed triggered for i=\" + i;\n-                }\n-\n-                synchronized (lock) {\n-                    resetStatus();\n-                    startTest = true;\n-                    robot.keyPress(textKeys[j]);\n-                    lock.wait(WAIT_DELAY);\n-                }\n-\n-                if (!(modifierStatus[i] && textStatus[j])) {\n-                    error = \"FAIL: KeyEvent not proper!\"+\n-                            \"Key checked: i=\" + i + \"; j=\" + j+\n-                            \"ModifierStatus = \" + modifierStatus[i]+\n-                            \"TextStatus = \" + textStatus[j];\n-                }\n-\n-                startTest = false;\n-                robot.keyRelease(textKeys[j]);\n-                robot.keyRelease(modifierKeys[i]);\n-            }\n-        }\n-\n-        exit2:\n-        for (int i = 0; i < modifierKeys.length; i++) {\n-            for (int j = i + 1; j < modifierKeys.length; j++) {\n-                for (int k = 0; k < textKeys.length; k++) {\n+        try {\n+            robot = new ExtendedRobot();\n+            robot.setAutoDelay(50);\n+            robot.waitForIdle(1000);\n+\n+            robot.mouseMove(\n+                    (int) frame.getLocationOnScreen().getX() +\n+                            frame.getSize().width \/ 2,\n+                    (int) frame.getLocationOnScreen().getY() +\n+                            frame.getSize().height \/ 2\n+            );\n+            robot.click(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            assertTrue(focusGained, \"FAIL: Canvas gained focus!\");\n+\n+            String error = null;\n+            exit1:\n+            for (int i = 0; i < modifierKeys.length; i++) {\n+                for (int j = 0; j < textKeys.length; j++) {\n@@ -206,1 +173,1 @@\n-                        break exit2;\n+                        break exit1;\n@@ -208,10 +175,29 @@\n-                    robot.waitForIdle(100);\n-                    synchronized (lock) {\n-                        tempPress = false;\n-                        robot.keyPress(modifierKeys[i]);\n-                        lock.wait(WAIT_DELAY);\n-                    }\n-\n-                    if (!tempPress) {\n-                        error = \"FAIL: MultiKeyTest: keyPressed \" +\n-                                                         \"triggered for i=\" + i;\n+                    try {\n+                        robot.waitForIdle(100);\n+                        synchronized (lock) {\n+                            tempPress = false;\n+                            robot.keyPress(modifierKeys[i]);\n+                            lock.wait(WAIT_DELAY);\n+                        }\n+                        if (!tempPress) {\n+                            error = \"FAIL: keyPressed triggered for i=\" + i;\n+                        }\n+\n+                        synchronized (lock) {\n+                            resetStatus();\n+                            startTest = true;\n+                            robot.keyPress(textKeys[j]);\n+                            lock.wait(WAIT_DELAY);\n+                        }\n+\n+                        if (!(modifierStatus[i] && textStatus[j])) {\n+                            error = \"FAIL: KeyEvent not proper!\" +\n+                                    \"Key checked: i=\" + i + \"; j=\" + j +\n+                                    \"ModifierStatus = \" + modifierStatus[i] +\n+                                    \"TextStatus = \" + textStatus[j];\n+                        }\n+\n+                        startTest = false;\n+                    } finally {\n+                        robot.keyRelease(textKeys[j]);\n+                        robot.keyRelease(modifierKeys[i]);\n@@ -219,0 +205,2 @@\n+                }\n+            }\n@@ -220,24 +208,52 @@\n-                    synchronized (lock) {\n-                        tempPress = false;\n-                        robot.keyPress(modifierKeys[j]);\n-                        lock.wait(WAIT_DELAY);\n-                    }\n-                    if (!tempPress) {\n-                        error = \"FAIL: MultiKeyTest keyPressed \" +\n-                                                         \"triggered for j=\" + j;\n-                    };\n-\n-                    synchronized (lock) {\n-                        resetStatus();\n-                        startTest = true;\n-                        robot.keyPress(textKeys[k]);\n-                        lock.wait(WAIT_DELAY);\n-                    }\n-                    if (!(modifierStatus[i] && modifierStatus[j]\n-                                                              && textStatus[k]))\n-                    {\n-                        error = \"FAIL: KeyEvent not proper!\" +\n-                               \"Key checked: i=\" + i + \"; j=\" + j + \"; k=\" + k +\n-                               \"Modifier1Status = \" + modifierStatus[i] +\n-                               \"Modifier2Status = \" + modifierStatus[j] +\n-                               \"TextStatus = \" + textStatus[k];\n+            exit2:\n+            for (int i = 0; i < modifierKeys.length; i++) {\n+                for (int j = i + 1; j < modifierKeys.length; j++) {\n+                    for (int k = 0; k < textKeys.length; k++) {\n+                        if (error != null) {\n+                            break exit2;\n+                        }\n+                        try {\n+                            robot.waitForIdle(100);\n+                            synchronized (lock) {\n+                                tempPress = false;\n+                                robot.keyPress(modifierKeys[i]);\n+                                lock.wait(WAIT_DELAY);\n+                            }\n+\n+                            if (!tempPress) {\n+                                error = \"FAIL: MultiKeyTest: keyPressed \" +\n+                                        \"triggered for i=\" + i;\n+                            }\n+\n+                            synchronized (lock) {\n+                                tempPress = false;\n+                                robot.keyPress(modifierKeys[j]);\n+                                lock.wait(WAIT_DELAY);\n+                            }\n+                            if (!tempPress) {\n+                                error = \"FAIL: MultiKeyTest keyPressed \" +\n+                                        \"triggered for j=\" + j;\n+                            }\n+\n+                            synchronized (lock) {\n+                                resetStatus();\n+                                startTest = true;\n+                                robot.keyPress(textKeys[k]);\n+                                lock.wait(WAIT_DELAY);\n+                            }\n+                            if (!(modifierStatus[i]\n+                                    && modifierStatus[j]\n+                                    && textStatus[k])) {\n+                                error = \"FAIL: KeyEvent not proper!\" +\n+                                        \"Key checked: i=\" + i + \"; j=\" + j + \"; k=\" + k +\n+                                        \"Modifier1Status = \" + modifierStatus[i] +\n+                                        \"Modifier2Status = \" + modifierStatus[j] +\n+                                        \"TextStatus = \" + textStatus[k];\n+                            }\n+\n+                            startTest = false;\n+                        } finally {\n+                            robot.keyRelease(textKeys[k]);\n+                            robot.keyRelease(modifierKeys[j]);\n+                            robot.keyRelease(modifierKeys[i]);\n+                        }\n@@ -245,5 +261,0 @@\n-\n-                    startTest = false;\n-                    robot.keyRelease(textKeys[k]);\n-                    robot.keyRelease(modifierKeys[j]);\n-                    robot.keyRelease(modifierKeys[i]);\n@@ -252,1 +263,0 @@\n-        }\n@@ -254,2 +264,4 @@\n-        frame.dispose();\n-        assertNull(error, error);\n+            assertNull(error, error);\n+        } finally {\n+            frame.dispose();\n+        }\n@@ -259,6 +271,2 @@\n-        for (int i = 0; i < modifierStatus.length; i++) {\n-            modifierStatus[i] = false;\n-        }\n-        for (int i = 0; i < textStatus.length; i++) {\n-            textStatus[i] = false;\n-        }\n+        Arrays.fill(modifierStatus, false);\n+        Arrays.fill(textStatus, false);\n","filename":"test\/jdk\/java\/awt\/Robot\/ModifierRobotKey\/ModifierRobotKeyTest.java","additions":125,"deletions":117,"binary":false,"changes":242,"status":"modified"}]}