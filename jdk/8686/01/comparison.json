{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-        (DWORD)len);         \/* Number of bytes to map *\/\n+        (SIZE_T)len);        \/* Number of bytes to map *\/\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileChannelImpl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Path;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @bug 8286637\n+ * @requires os.family == \"windows\"\n+ * @summary Ensure that memory mapping beyond 32-bit range does not cause an\n+ *          EXCEPTION_ACCESS_VIOLATION.\n+ * @run main\/othervm LargeMapTest\n+ *\/\n+public class LargeMapTest {\n+    private static final String FILE = \"test.dat\";\n+    private static final long LENGTH = 8000000000L;\n+    private static final long OFFSET = 3704800000L;\n+    private static final int  BUFSIZ = 100000;\n+\n+    public static void main(String[] args) throws IOException {\n+        System.out.println(System.getProperty(\"sun.arch.data.model\"));\n+        System.out.println(System.getProperty(\"os.arch\"));\n+        System.out.println(System.getProperty(\"java.version\"));\n+\n+        Path p = Path.of(FILE);\n+        p.toFile().deleteOnExit();\n+        try (RandomAccessFile raf = new RandomAccessFile(FILE, \"rw\");) {\n+            raf.setLength(LENGTH); \/\/~8gb\n+        }\n+\n+        long offset = OFFSET;\n+        ByteBuffer bb = ByteBuffer.allocateDirect(BUFSIZ);\n+\n+        try (FileChannel fc = FileChannel.open(p, READ, WRITE);) {\n+            MemorySegment mbb = MemorySegment.ofByteBuffer(bb);\n+            MemorySegment mappedMemorySegment =\n+                fc.map(FileChannel.MapMode.READ_WRITE, 0, p.toFile().length(),\n+                       MemorySession.openImplicit());\n+\n+            final int interval = BUFSIZ*1000;\n+            while (offset < LENGTH) {\n+                if (offset % interval == 0)\n+                    System.out.println(\"offset: \" + offset);\n+                MemorySegment target = mappedMemorySegment.asSlice(offset, BUFSIZ);\n+                offset = offset + BUFSIZ;\n+                target.copyFrom(mbb);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeMapTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}