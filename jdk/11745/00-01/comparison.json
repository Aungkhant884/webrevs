{"files":[{"patch":"@@ -986,0 +986,5 @@\n+    \/*stringStream ss;\n+    ss.print(\"Class %s does not have field '\", resolved_klass->external_name());\n+    sig->print_as_signature_external_return_type(&ss);\n+    ss.print(\" %s'\", field->as_C_string());\n+    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(), ss.as_string());*\/\n@@ -989,1 +994,1 @@\n-                type2name(Signature::basic_type(sig->char_at(0))),\n+                Signature::field_type_string(sig),\n@@ -991,0 +996,1 @@\n+                \/\/type2name(Signature::basic_type(sig->char_at(0)))\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -438,0 +438,23 @@\n+const char* Signature::field_type_string(const Symbol* signature) {\n+  if (basic_type(signature->char_at(0)) == T_OBJECT) {\n+    return strip_envelope(signature)->as_C_string();\n+  } else if (basic_type(signature->char_at(0)) == T_ARRAY) {\n+    char* buf = NEW_RESOURCE_ARRAY(char, 64);\n+    buf[signature->utf8_length()] = '\\0';\n+    int i;\n+    for (i = 0; i < signature->utf8_length() && signature->char_at(i) == JVM_SIGNATURE_ARRAY; i++);\n+    if (basic_type(signature->char_at(i)) == T_OBJECT) {\n+      strcpy(buf, strip_envelope(signature)->as_C_string());\n+    } else {\n+      strcpy(buf, type2name(Signature::basic_type(signature->char_at(i))));\n+    }\n+    for (int j = 0; j < i; j++) {\n+      buf[strlen(buf)] = '\\0';\n+      strncat(buf, \"[]\", strlen(buf));\n+    }\n+    return buf;\n+  } else {\n+    return (char*)type2name(Signature::basic_type(signature->char_at(0)));\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+  static const char* field_type_string(const Symbol* signature);\n+\n","filename":"src\/hotspot\/share\/runtime\/signature.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/*  Let jtreg compile this one with NoSuchFieldTest.java *\/\n-public class FieldName {\n+\/* Base definition for compilation by javac. *\/\n+\/*public class FieldName {\n@@ -27,7 +27,1 @@\n-}\n-\n-\/*  Then have a @compile this version into FieldName1.jasm\n-public class FieldName {\n-    public static long x = 123;\n-}\n-*\/\n+}*\/\n@@ -35,1 +29,0 @@\n-\/*  Then have a @compile this version into FieldName2.jasm\n@@ -37,0 +30,3 @@\n+  public static int x;\n+  public static char[] y;\n+  public static TestClass z;\n@@ -38,1 +34,0 @@\n-*\/\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n-  public static Field x:J;\n+  public static Field y:\"[C\";\n+  public static Field z:\"LTestClass;\";\n@@ -14,7 +15,0 @@\n-  static Method \"<clinit>\":\"()V\"\n-\tstack 2 locals 0\n-  {\n-\t\tldc2_w\tlong 123l;\n-\t\tputstatic\tField x:\"J\";\n-\t\treturn;\n-  }\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName1.jasm","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5,0 +5,3 @@\n+  public static Field x:I;\n+  public static Field z:\"LTestClass;\";\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName2.jasm","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,16 @@\n+\n+super public class FieldName\n+\tversion 65:0\n+{\n+  public static Field x:I;\n+  public static Field y:\"[C\";\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+\n+} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName3.jasm","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -33,0 +33,2 @@\n+ * @compile FieldName3.jasm\n+ * @run main NoSuchFieldOutputTest\n@@ -39,0 +41,1 @@\n+\n@@ -40,25 +43,31 @@\n-      try {\n-          FieldName fm = new FieldName();\n-          Object x = FieldName.x;\n-          String s = \"x = \" + x;\n-          throwTestException(\"Non error output does not match\", s);\n-      } catch (NoSuchFieldError nsfe) {\n-          Pattern noSuchFieldPattern = Pattern.compile(\"Class (?<classname>[\\\\w\\\\d]+) does not have field '(?<signature>[\\\\w\\\\d]+) (?<varname>[\\\\w\\\\d]+)'\");\n-          String output = nsfe.getMessage();\n-          Matcher noSuchFieldMatcher = noSuchFieldPattern.matcher(output);\n-          if (noSuchFieldMatcher.matches()) {\n-            String classname = noSuchFieldMatcher.group(\"classname\");\n-            String signature = noSuchFieldMatcher.group(\"signature\");\n-            String varname   = noSuchFieldMatcher.group(\"varname\");\n-            if (!classname.equals(\"FieldName\")) {\n-              throwTestException(\"Failed to match class name\", output);\n-            }\n-            if (!signature.equals(\"int\")) {\n-              throwTestException(\"Failed to match type signature\", output);\n-            }\n-            if (!varname.equals(\"x\")) {\n-              throwTestException(\"Failed to match field name\", output);\n-            }\n-          } else {\n-            throwTestException(\"Output does not match\", output);\n-          }\n+    try {\n+      FieldName fm = new FieldName();\n+      String s = \"\";\n+      Object x = FieldName.x;\n+      s = s + \"\\nx = \" + x;\n+      Object y = FieldName.y;\n+      s = s + \"\\ny = \" + y;\n+      Object z = FieldName.z;\n+      s = s + \"\\nz = \" + z;\n+      throwTestException(\"Did not throw NoSuchFieldError\", s);\n+    } catch (NoSuchFieldError nsfe) {\n+      testNoSuchFieldOutput(nsfe);\n+    }\n+  }\n+\n+  private static void testNoSuchFieldOutput(NoSuchFieldError nsfe) throws Exception {\n+    Pattern noSuchFieldPattern = Pattern.compile(\"Class (?<classname>[\\\\w\\\\d]+) does not have field '(?<signature>[\\\\S]+) (?<varname>[\\\\w\\\\d]+)'\");\n+    String output = nsfe.getMessage();\n+    Matcher noSuchFieldMatcher = noSuchFieldPattern.matcher(output);\n+    if (noSuchFieldMatcher.matches()) {\n+      String classname = noSuchFieldMatcher.group(\"classname\");\n+      String signature = noSuchFieldMatcher.group(\"signature\");\n+      String varname   = noSuchFieldMatcher.group(\"varname\");\n+      if (!classname.equals(\"FieldName\")) {\n+        throwTestException(\"Failed to match class name\", output);\n+      }\n+      if (!signature.equals(\"int\") && !signature.equals(\"char[]\") && !signature.equals(\"TestClass\")) {\n+        throwTestException(\"Failed to match type signature\", output);\n+      }\n+      if (!varname.equals(\"x\") && !varname.equals(\"y\") && !varname.equals(\"z\")) {\n+        throwTestException(\"Failed to match field name\", output);\n@@ -66,0 +75,4 @@\n+    } else {\n+      throwTestException(\"Output format does not match\", output);\n+    }\n+    System.out.println(output);\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldOutputTest.java","additions":38,"deletions":25,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public class Base {}\n+ public class TestClass {}\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/TestClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelCircularity\/test-classes\/Base.java","status":"copied"}]}