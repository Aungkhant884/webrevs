{"files":[{"patch":"@@ -975,1 +975,4 @@\n-    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(), field->as_C_string());\n+    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(),\n+        err_msg(\"No resolved class, field '%s %s'\",\n+                type2name(Signature::basic_type(sig->char_at(0))),\n+                field->as_C_string()));\n@@ -983,1 +986,5 @@\n-    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(), field->as_C_string());\n+    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(),\n+        err_msg(\"Class %s does not have field '%s %s'\",\n+                resolved_klass->external_name(),\n+                type2name(Signature::basic_type(sig->char_at(0))),\n+                field->as_C_string()));\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*  Let jtreg compile this one with NoSuchFieldTest.java *\/\n+public class FieldName {\n+  public static int x = 123;\n+}\n+\n+\/*  Then have a @compile this version into FieldName1.jasm\n+public class FieldName {\n+    public static long x = 123;\n+}\n+*\/\n+\n+\/*  Then have a @compile this version into FieldName2.jasm\n+public class FieldName {\n+}\n+*\/\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\n+super public class FieldName\n+\tversion 65:0\n+{\n+  public static Field x:J;\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+  static Method \"<clinit>\":\"()V\"\n+\tstack 2 locals 0\n+  {\n+\t\tldc2_w\tlong 123l;\n+\t\tputstatic\tField x:\"J\";\n+\t\treturn;\n+  }\n+\n+} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName1.jasm","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+\n+super public class FieldName\n+\tversion 65:0\n+{\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+\n+} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName2.jasm","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8298065\n+ * @summary Test output of NoSuchFieldError when field signature does not match\n+ * @compile NoSuchFieldOutputTest.java FieldName.java\n+ * @compile FieldName1.jasm\n+ * @run main NoSuchFieldOutputTest\n+ * @compile FieldName2.jasm\n+ * @run main NoSuchFieldOutputTest\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class NoSuchFieldOutputTest {\n+  public static void main(java.lang.String[] unused) throws Exception {\n+      try {\n+          FieldName fm = new FieldName();\n+          Object x = FieldName.x;\n+          String s = \"x = \" + x;\n+          throwTestException(\"Non error output does not match\", s);\n+      } catch (NoSuchFieldError nsfe) {\n+          Pattern noSuchFieldPattern = Pattern.compile(\"Class (?<classname>[\\\\w\\\\d]+) does not have field '(?<signature>[\\\\w\\\\d]+) (?<varname>[\\\\w\\\\d]+)'\");\n+          String output = nsfe.getMessage();\n+          Matcher noSuchFieldMatcher = noSuchFieldPattern.matcher(output);\n+          if (noSuchFieldMatcher.matches()) {\n+            String classname = noSuchFieldMatcher.group(\"classname\");\n+            String signature = noSuchFieldMatcher.group(\"signature\");\n+            String varname   = noSuchFieldMatcher.group(\"varname\");\n+            if (!classname.equals(\"FieldName\")) {\n+              throwTestException(\"Failed to match class name\", output);\n+            }\n+            if (!signature.equals(\"int\")) {\n+              throwTestException(\"Failed to match type signature\", output);\n+            }\n+            if (!varname.equals(\"x\")) {\n+              throwTestException(\"Failed to match field name\", output);\n+            }\n+          } else {\n+            throwTestException(\"Output does not match\", output);\n+          }\n+      }\n+  }\n+  private static void throwTestException(String reason, String output) throws Exception {\n+      throw new Exception(reason + \" . Stdout is :\\n\" + output);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldOutputTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}