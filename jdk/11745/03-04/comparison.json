{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -975,4 +975,1 @@\n-    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(),\n-        err_msg(\"No resolved class, field '%s %s'\",\n-                type2name(Signature::basic_type(sig->char_at(0))),\n-                field->as_C_string()));\n+    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(), field->as_C_string());\n@@ -986,5 +983,5 @@\n-    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(),\n-        err_msg(\"Class %s does not have field '%s %s'\",\n-                resolved_klass->external_name(),\n-                Signature::field_type_string(sig),\n-                field->as_C_string()));\n+    stringStream ss;\n+    ss.print(\"Class %s does not have member field '\", resolved_klass->external_name());\n+    sig->print_signature_as_external_field_type(&ss);\n+    ss.print(\" %s'\", field->as_C_string());\n+    THROW_MSG(vmSymbols::java_lang_NoSuchFieldError(), ss.as_string());\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -297,0 +297,12 @@\n+void Symbol::print_signature_as_external_field_type(outputStream *os) {\n+  for (SignatureStream ss(this, false); !ss.is_done(); ss.next()) {\n+    if (ss.is_array()) {\n+      print_array(os, ss);\n+    } else if (ss.is_reference()) {\n+      print_class(os, ss);\n+    } else {\n+      os->print(\"%s\", type2name(ss.type()));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,0 +278,1 @@\n+  void print_signature_as_external_field_type(outputStream *os);\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -438,24 +438,0 @@\n-const char* Signature::field_type_string(const Symbol* signature) {\n-  return field_type_string_impl(signature, 0);\n-}\n-\n-const char* Signature::field_type_string_impl(const Symbol* signature, int index) {\n-  if (basic_type(signature->char_at(index)) == T_OBJECT) {\n-    return strip_envelope(signature)->as_C_string();\n-  } else if (basic_type(signature->char_at(index)) == T_ARRAY) {\n-    int i;\n-    \/\/ Unravel and count array layers\n-    for (i = 0; i < signature->utf8_length() && signature->char_at(i) == JVM_SIGNATURE_ARRAY; i++);\n-    char* buf = NEW_RESOURCE_ARRAY(char, 64);\n-    strncpy(buf, field_type_string_impl(signature, i), 64);\n-    \/\/ Append array braces to type name\n-    for (int j = 0; j < i; j++) {\n-      strncat(buf, \"[]\", strlen(buf));\n-      buf[strlen(buf)] = '\\0';\n-    }\n-    return buf;\n-  }\n-  \/\/ If it is a primitive, grab its basic type and return\n-  return (char*)type2name(Signature::basic_type(signature->char_at(index)));\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -128,3 +128,0 @@\n-  static const char* field_type_string_impl(const Symbol* signature, int index);\n-  static const char* field_type_string(const Symbol* signature);\n-\n","filename":"src\/hotspot\/share\/runtime\/signature.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* Base definition for compilation by javac. *\/\n-public class FieldName {\n-  public static int x;\n-  public static char[] y;\n-  public static TestClass z;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-super public class FieldName\n-\tversion 65:0\n-{\n-  public static Field y:\"[C\";\n-  public static Field z:\"LTestClass;\";\n-\n-  public Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-  {\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-  }\n-\n-} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName1.jasm","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-super public class FieldName\n-\tversion 65:0\n-{\n-  public static Field x:I;\n-  public static Field z:\"LTestClass;\";\n-\n-  public Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-  {\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-  }\n-\n-} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName2.jasm","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-super public class FieldName\n-\tversion 65:0\n-{\n-  public static Field x:I;\n-  public static Field y:\"[C\";\n-\n-  public Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-  {\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-  }\n-\n-} \/\/ end Class FieldName\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/FieldName3.jasm","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -0,0 +1,76 @@\n+\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+public class NoSuchFieldArray {\n+    static char[] z = {1, 2, 3};\n+    static {\n+       System.out.println(\"z = \" + z);\n+    }\n+}\n+*\/\n+\n+super public class NoSuchFieldArray\n+\tversion 65:0\n+{\n+  \/\/ REMOVED static Field z:\"[C\";\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+  static Method \"<clinit>\":\"()V\"\n+\tstack 4 locals 0\n+  {\n+\t\ticonst_3;\n+\t\tnewarray char;\n+\t\tdup;\n+\t\ticonst_0;\n+\t\ticonst_1;\n+\t\tcastore;\n+\t\tdup;\n+\t\ticonst_1;\n+\t\ticonst_2;\n+\t\tcastore;\n+\t\tdup;\n+\t\ticonst_2;\n+\t\ticonst_3;\n+\t\tcastore;\n+\t\tputstatic\tField z:\"[C\";\n+\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+\t\tgetstatic\tField z:\"[C\";\n+\t\tinvokestatic\tMethod java\/lang\/String.valueOf:\"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";\n+\t\tinvokedynamic\tInvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":makeConcatWithConstants:\"(Ljava\/lang\/String;)Ljava\/lang\/String;\" {\n+\t\t\tString \"z = \"\n+\t\t};\n+\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+\t\treturn;\n+  }\n+\n+  public static final InnerClass Lookup=class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+} \/\/ end Class NoSuchFieldArray\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldArray.jasm","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+public class NoSuchFieldPrimitive {\n+    static double[][] a;\n+    static {\n+       System.out.println(\"a = \" + a);\n+    }\n+}\n+*\/\n+\n+super public class NoSuchFieldMultiArray\n+\tversion 65:0\n+{\n+  \/\/ REMOVED static Field a:\"[[D\";\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+  static Method \"<clinit>\":\"()V\"\n+\tstack 2 locals 0\n+  {\n+\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+\t\tgetstatic\tField a:\"[[D\";\n+\t\tinvokestatic\tMethod java\/lang\/String.valueOf:\"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";\n+\t\tinvokedynamic\tInvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":makeConcatWithConstants:\"(Ljava\/lang\/String;)Ljava\/lang\/String;\" {\n+\t\t\tString \"a = \"\n+\t\t};\n+\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+\t\treturn;\n+  }\n+\n+  public static final InnerClass Lookup=class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+} \/\/ end Class NoSuchFieldMultiArray\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldMultiArray.jasm","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,2 @@\n- * @compile NoSuchFieldOutputTest.java FieldName.java\n- * @compile FieldName1.jasm\n- * @run main NoSuchFieldOutputTest\n- * @compile FieldName2.jasm\n- * @run main NoSuchFieldOutputTest\n- * @compile FieldName3.jasm\n+ * @compile NoSuchFieldPrimitive.jasm NoSuchFieldReference.jasm\n+ * @compile NoSuchFieldArray.jasm NoSuchFieldMultiArray.jasm\n@@ -40,0 +36,1 @@\n+\/\/ Tests the output text of NoSuchFieldError\n@@ -44,9 +41,6 @@\n-      FieldName fm = new FieldName();\n-      String s = \"\";\n-      Object x = FieldName.x;\n-      s = s + \"\\nx = \" + x;\n-      Object y = FieldName.y;\n-      s = s + \"\\ny = \" + y;\n-      Object z = FieldName.z;\n-      s = s + \"\\nz = \" + z;\n-      throwTestException(\"Did not throw NoSuchFieldError\", s);\n+      Class.forName(\"NoSuchFieldPrimitive\").newInstance();\n+    } catch (NoSuchFieldError nsfe) {\n+      testNoSuchFieldOutput(nsfe, \"primitive\");\n+    }\n+    try {\n+      Class.forName(\"NoSuchFieldReference\").newInstance();\n@@ -54,1 +48,11 @@\n-      testNoSuchFieldOutput(nsfe);\n+      testNoSuchFieldOutput(nsfe, \"reference\");\n+    }\n+    try {\n+      Class.forName(\"NoSuchFieldArray\").newInstance();\n+    } catch (NoSuchFieldError nsfe) {\n+      testNoSuchFieldOutput(nsfe, \"array\");\n+    }\n+    try {\n+      Class.forName(\"NoSuchFieldMultiArray\").newInstance();\n+    } catch (NoSuchFieldError nsfe) {\n+      testNoSuchFieldOutput(nsfe, \"multiArray\");\n@@ -58,2 +62,2 @@\n-  private static void testNoSuchFieldOutput(NoSuchFieldError nsfe) throws Exception {\n-    Pattern noSuchFieldPattern = Pattern.compile(\"Class (?<classname>[\\\\w\\\\d]+) does not have field '(?<signature>[\\\\S]+) (?<varname>[\\\\w\\\\d]+)'\");\n+  private static void testNoSuchFieldOutput(NoSuchFieldError nsfe, String testType) throws Exception {\n+    Pattern noSuchFieldPattern = Pattern.compile(\"Class (?<classname>[\\\\w\\\\d]+) does not have member field '(?<signature>[\\\\S]+) (?<varname>[\\\\w\\\\d]+)'\");\n@@ -63,11 +67,15 @@\n-      String classname = noSuchFieldMatcher.group(\"classname\");\n-      String signature = noSuchFieldMatcher.group(\"signature\");\n-      String varname   = noSuchFieldMatcher.group(\"varname\");\n-      if (!classname.equals(\"FieldName\")) {\n-        throwTestException(\"Failed to match class name\", output);\n-      }\n-      if (!signature.equals(\"int\") && !signature.equals(\"char[]\") && !signature.equals(\"TestClass\")) {\n-        throwTestException(\"Failed to match type signature\", output);\n-      }\n-      if (!varname.equals(\"x\") && !varname.equals(\"y\") && !varname.equals(\"z\")) {\n-        throwTestException(\"Failed to match field name\", output);\n+      switch(testType) {\n+      case \"primitive\":\n+        checkOutputGroups(noSuchFieldMatcher, output, \"NoSuchFieldPrimitive\", \"int\", \"x\");\n+        break;\n+      case \"reference\":\n+        checkOutputGroups(noSuchFieldMatcher, output, \"NoSuchFieldReference\", \"TestClass\", \"y\");\n+        break;\n+      case \"array\":\n+        checkOutputGroups(noSuchFieldMatcher, output, \"NoSuchFieldArray\", \"char[]\", \"z\");\n+        break;\n+      case \"multiArray\":\n+        checkOutputGroups(noSuchFieldMatcher, output, \"NoSuchFieldMultiArray\", \"double[][]\", \"a\");\n+        break;\n+      default:\n+        throwTestException(\"No matching test\", output);\n@@ -80,0 +88,17 @@\n+\n+  private static void checkOutputGroups(Matcher noSuchFieldMatcher, String output,\n+                                 String testClass, String testSig, String testVar) throws Exception {\n+    String classname = noSuchFieldMatcher.group(\"classname\");\n+    String signature = noSuchFieldMatcher.group(\"signature\");\n+    String varname   = noSuchFieldMatcher.group(\"varname\");\n+    if (!classname.equals(testClass)) {\n+      throwTestException(\"Failed to match class name\", output);\n+    }\n+    if (!signature.equals(testSig)) {\n+      throwTestException(\"Failed to match type signature\", output);\n+    }\n+    if (!varname.equals(testVar)) {\n+      throwTestException(\"Failed to match field name\", output);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldOutputTest.java","additions":55,"deletions":30,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+public class NoSuchFieldPrimitive {\n+    static int x = 123;\n+    static {\n+       System.out.println(\"x = \" + x);\n+    }\n+}\n+*\/\n+\n+super public class NoSuchFieldPrimitive\n+\tversion 65:0\n+{\n+  \/\/ REMOVED static Field x:I;\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+  static Method \"<clinit>\":\"()V\"\n+\tstack 2 locals 0\n+  {\n+\t\tbipush\t123;\n+\t\tputstatic\tField x:\"I\";\n+\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+\t\tgetstatic\tField x:\"I\";\n+\t\tinvokedynamic\tInvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":makeConcatWithConstants:\"(I)Ljava\/lang\/String;\" {\n+\t\t\tString \"x = \"\n+\t\t};\n+\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+\t\treturn;\n+  }\n+\n+  public static final InnerClass Lookup=class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+} \/\/ end Class NoSuchFieldPrimitive\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldPrimitive.jasm","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+public class NoSuchFieldReference {\n+    static TestClass y;\n+    static {\n+       System.out.println(\"y = \" + y);\n+    }\n+}\n+*\/\n+\n+super public class NoSuchFieldReference\n+\tversion 65:0\n+{\n+  \/\/ REMOVED static Field y:\"LTestClass;\";\n+\n+  public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+  {\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+  }\n+  static Method \"<clinit>\":\"()V\"\n+\tstack 2 locals 0\n+  {\n+\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+\t\tgetstatic\tField y:\"LTestClass;\";\n+\t\tinvokestatic\tMethod java\/lang\/String.valueOf:\"(Ljava\/lang\/Object;)Ljava\/lang\/String;\";\n+\t\tinvokedynamic\tInvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":makeConcatWithConstants:\"(Ljava\/lang\/String;)Ljava\/lang\/String;\" {\n+\t\t\tString \"y = \"\n+\t\t};\n+\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+\t\treturn;\n+  }\n+\n+  public static final InnerClass Lookup=class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+} \/\/ end Class NoSuchFieldReference\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/NoSuchFieldReference.jasm","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n- public class TestClass {}\n+\/\/ Used as a reference type for a field in NoSuchFieldReference.jasm\n+public class TestClass {}\n","filename":"test\/hotspot\/jtreg\/runtime\/linkResolver\/TestClass.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}