{"files":[{"patch":"@@ -54,1 +54,1 @@\n-            \/\/Use command \"class java.lang.Thread\" to get the address of the InstanceKlass for java.lang.Thread\n+            \/\/ Use command \"class java.lang.Thread\" to get the address of the InstanceKlass for java.lang.Thread\n@@ -60,2 +60,0 @@\n-            String threadAddress = null;\n-            String[] parts = classOutput.split(\"\\n\");\n@@ -63,8 +61,8 @@\n-            \/\/extract thread address from the output line similar to \"java\/lang\/Thread @0x000000080001d940\"\n-            for (String part : parts) {\n-                if (part.startsWith(\"java\/lang\/Thread\")) {\n-                    String[] addresses = part.split(\" @\");\n-                    threadAddress = addresses[1];\n-                    break;\n-                }\n-            }\n+            \/\/ Extract the thread InstanceKlass address from the output, which looks similar to the following:\n+            \/\/   java\/lang\/Thread @0x000000080001d940\n+            String threadAddress = classOutput.lines().filter(part -> part.startsWith(\"java\/lang\/Thread\"))\n+                                                      .map(part -> part.split(\" @\"))\n+                                                      .findFirst()\n+                                                      .map(addresses -> addresses[1])\n+                                                      .orElse(null);\n+\n@@ -75,1 +73,1 @@\n-            \/\/Use \"inspect\" on the thread address we extracted in previous step\n+            \/\/ Use \"inspect\" on the thread address we extracted in previous step\n@@ -81,2 +79,0 @@\n-            String symbolAddress = null;\n-            parts = inspectOutput.split(\"\\n\");\n@@ -84,9 +80,7 @@\n-            \/\/extract address comes along with Symbol instance, following is corresponding sample output line\n-            \/\/Symbol* Klass::_name: Symbol @ 0x0000000800471120\n-            for (String part : parts) {\n-                if (part.startsWith(\"Symbol\")) {\n-                    String[] symbolParts = part.split(\"@ \");\n-                    symbolAddress = symbolParts[1];\n-                    break;\n-                }\n-            }\n+            \/\/ The inspect command output will have one line of output that looks like the following.\n+            \/\/ Symbol* Klass::_name: Symbol @ 0x0000000800471120\n+            \/\/ Extract the Symbol address from it.\n+            String symbolAddress = inspectOutput.lines().filter(part -> part.startsWith(\"Symbol\"))\n+                                                        .map(part -> part.split(\"@ \"))\n+                                                        .findFirst().map(symbolParts -> symbolParts[1])\n+                                                        .orElse(null);\n@@ -97,1 +91,2 @@\n-            \/\/Running \"symbol\" command on the Symbol instance address extracted in previous step\n+            \/\/ Run \"symbol\" command on the Symbol instance address extracted in previous step.\n+            \/\/ It should produce the symbol for java\/lang\/Thread.\n@@ -103,1 +98,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbSymbol.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"}]}