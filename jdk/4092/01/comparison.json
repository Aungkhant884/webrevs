{"files":[{"patch":"@@ -674,1 +674,1 @@\n-sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.sh                 8209398 generic-all\n+sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java                 8209398 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,10 @@\n+\/* @test\n+ * @bug 8187023\n+ * @summary Pkcs11 config file should be assumed in ISO-8859-1\n+ * @library \/test\/lib\n+ * @run testng\/othervm ReadConfInUTF16Env\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.Test;\n+\n@@ -28,6 +38,0 @@\n-    public static void main(String argv[]) {\n-        Provider p = Security.getProvider(\"SunPKCS11\");\n-        if (p == null) {\n-            System.out.println(\"Skipping test - no PKCS11 provider available\");\n-            return;\n-        }\n@@ -35,1 +39,16 @@\n-        System.out.println(p.getName());\n+    @Test\n+    public void testReadConfInUTF16Env() throws Exception {\n+        String[] testCommand = new String[] { \"-Dfile.encoding=UTF-16\",\n+                TestSunPKCS11Provider.class.getName()};\n+        ProcessTools.executeTestJvm(testCommand).shouldHaveExitValue(0);\n+    }\n+\n+    static class TestSunPKCS11Provider {\n+        public static void main(String[] args) throws Exception {\n+            Provider p = Security.getProvider(\"SunPKCS11\");\n+            if (p == null) {\n+                System.out.println(\"Skipping test - no PKCS11 provider available\");\n+                return;\n+            }\n+            System.out.println(p.getName());\n+        }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-#\n-# Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8187023\n-# @summary Pkcs11 config file should be assumed in ISO-8859-1\n-# @library \/test\/lib\n-# @build ReadConfInUTF16Env\n-# @run shell ReadConfInUTF16Env.sh\n-\n-# jtreg does not like -Dfile.encoding=UTF-16 inside a @run main line,\n-# testlibrary.ProcessTools.createJavaProcessBuilder() also had troubles\n-# executing a subprocess with -Dfile.encoding=UTF-16 option added,\n-# therefore a shell test is written.\n-\n-$TESTJAVA\/bin\/java $TESTVMOPTS -cp $TESTCLASSES \\\n-  -Dfile.encoding=UTF-16 \\\n-  ReadConfInUTF16Env\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.sh","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,15 @@\n+\/* @test\n+ * @bug 4938185\n+ * @summary KeyStore support for NSS cert\/key databases\n+ * To run manually:\n+ *    set environment variable:\n+ *     <token>     [activcard|ibutton|nss|sca1000]\n+ *     <command>   [list|basic]\n+ *\n+ * Note:\n+ *    . 'list' lists the token aliases\n+ *    . 'basic' does not run with activcard,\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm Basic\n+ *\/\n+\n@@ -25,0 +40,1 @@\n+import java.nio.file.Path;\n@@ -30,4 +46,0 @@\n-import java.security.KeyPairGenerator;\n-import java.security.KeyPair;\n-import java.security.SecureRandom;\n-import java.security.AuthProvider;\n@@ -36,1 +48,0 @@\n-import java.security.ProviderException;\n@@ -47,1 +58,0 @@\n-import javax.security.auth.login.LoginException;\n@@ -51,0 +61,2 @@\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n@@ -55,3 +67,3 @@\n-    private static final char SEP = File.separatorChar;\n-\n-    private static String DIR = System.getProperty(\"DIR\");\n+    private static final Path TEST_DATA_PATH = Path.of(BASE)\n+            .resolve(\"BasicData\");\n+    private static final String DIR = TEST_DATA_PATH.toString();\n@@ -91,0 +103,16 @@\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                TEST_DATA_PATH.resolve(\"p11-nss.txt\").toString());\n+        System.setProperty(\"TOKEN\", \"nss\");\n+        System.setProperty(\"TEST\", \"basic\");\n+    }\n+\n+    @Test\n+    public void testBasic() throws Exception {\n+        String[] args = {\"sm\", \"Basic.policy\"};\n+        main(new Basic(), args);\n+    }\n+\n@@ -105,4 +133,0 @@\n-    public static void main(String[] args) throws Exception {\n-        main(new Basic(), args);\n-    }\n-\n@@ -139,1 +163,1 @@\n-        Certificate caCert = (X509Certificate)cf.generateCertificate\n+        Certificate caCert = cf.generateCertificate\n@@ -141,1 +165,1 @@\n-        Certificate ca2Cert = (X509Certificate)cf.generateCertificate\n+        Certificate ca2Cert = cf.generateCertificate\n@@ -143,1 +167,1 @@\n-        Certificate pk1cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk1cert = cf.generateCertificate\n@@ -145,1 +169,1 @@\n-        Certificate pk1cert2 = (X509Certificate)cf.generateCertificate\n+        Certificate pk1cert2 = cf.generateCertificate\n@@ -147,1 +171,1 @@\n-        Certificate pk2cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk2cert = cf.generateCertificate\n@@ -149,1 +173,1 @@\n-        Certificate pk3cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk3cert = cf.generateCertificate\n@@ -376,1 +400,1 @@\n-        Map options = new HashMap();\n+        Map<String, String> options = new HashMap<>();\n@@ -381,1 +405,1 @@\n-        m.initialize(s, new TextCallbackHandler(), new HashMap(), options);\n+        m.initialize(s, new TextCallbackHandler(), new HashMap<>(), options);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.java","additions":46,"deletions":22,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1,171 +0,0 @@\n-#\n-# Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4938185\n-# @library \/test\/lib\n-# @summary KeyStore support for NSS cert\/key databases\n-#\n-# @run shell Basic.sh\n-\n-# To run by hand:\n-#    %sh Basic.sh <recompile> [yes|no]\n-#\t\t  <token>     [activcard|ibutton|nss|sca1000]\n-#                 <command>   [list|basic]\n-#\n-#    %sh Basic.sh no ibutton list\n-#\n-# Note:\n-#    . 'list' lists the token aliases\n-#    . 'basic' does not run with activcard,\n-#      and tests different things depending on what is supported by each token\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# get command from input args -\n-# default to 'nss basic'\n-\n-RECOMPILE=\"yes\"\n-if [ $# = '3' ] ; then\n-    RECOMPILE=$1\n-    TOKEN=$2\n-    TEST=$3\n-elif [ $# = '2' ] ; then\n-    TOKEN=$1\n-    TEST=$2\n-else\n-    TOKEN=\"nss\"\n-    TEST=\"basic\"\n-fi\n-\n-DEBUG=sunpkcs11,pkcs11keystore\n-\n-echo RECOMPILE=${RECOMPILE}\n-echo TOKEN=${TOKEN}\n-echo TEST=${TEST}\n-echo DEBUG=${DEBUG}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    ARCH=`uname -m`\n-    case \"$ARCH\" in\n-      i[3-6]86 ) \n-\tFS=\"\/\"\n-\tPS=\":\"\n-\tCP=\"${FS}bin${FS}cp\"\n-\tCHMOD=\"${FS}bin${FS}chmod\"\n-\t;;\n-      * )\n-#     ia64 )\n-#     x86_64 )\n-\techo \"Unsupported System: Linux ${ARCH}\"\n-\texit 0;\n-\t;;\n-    esac\n-    ;;\n-  Windows* )  \n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-\n-    # 'uname -m' does not give us enough information -\n-    #  should rely on $PROCESSOR_IDENTIFIER (as is done in Defs-windows.gmk),\n-    #  but JTREG does not pass this env variable when executing a shell script.\n-    #\n-    #  execute test program - rely on it to exit if platform unsupported\n-\n-    ;;\n-  * )\n-    echo \"Unsupported System: ${OS}\"\n-    exit 0;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable if token is NSS\n-\n-if [ \"${TOKEN}\" = \"nss\" ] ; then\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-fi\n-\n-# compile test\n-\n-if [ \"${RECOMPILE}\" = \"yes\" ] ; then\n-    ${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-  -classpath ${TESTSRC}${FS}..${PS}${TESTSRC}${FS}loader.jar \\\n-  -d ${TESTCLASSES} \\\n-  ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-  ${TESTSRC}${FS}Basic.java \\\n-  ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-fi\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-\t-classpath ${TESTCLASSES}${PS}${TESTSRC}${FS}loader.jar${PS}${CPAPPEND} \\\n-\t-DDIR=${TESTSRC}${FS}BasicData \\\n-\t-DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-\t-DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${TOKEN}.txt \\\n-\t-DNO_DEFAULT=true \\\n-\t-DNO_DEIMOS=true \\\n-\t-DTOKEN=${TOKEN} \\\n-\t-DTEST=${TEST} \\\n-\t-Dtest.src=${TESTSRC} \\\n-\t-Dtest.classes=${TESTCLASSES} \\\n-\t-Djava.security.debug=${DEBUG} \\\n-\tBasic sm Basic.policy\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.sh","additions":0,"deletions":171,"binary":false,"changes":171,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,11 @@\n+\/* @test\n+ * @bug 4938185 7106773\n+ * @summary KeyStore support for NSS cert\/key databases\n+ *          512 bits RSA key cannot work with SHA384 and SHA512\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm ClientAuth\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n@@ -25,2 +36,3 @@\n-import java.net.*;\n-import java.util.*;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.file.Path;\n@@ -28,0 +40,2 @@\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n@@ -46,1 +60,4 @@\n-    private static String DIR = System.getProperty(\"DIR\");\n+    private static final Path TEST_DATA_PATH = Path.of(BASE)\n+            .resolve(\"ClientAuthData\");\n+\n+    private static final String DIR = TEST_DATA_PATH.toString();\n@@ -58,1 +75,1 @@\n-    volatile static boolean serverReady = false;\n+    private final CountDownLatch serverReadyLatch = new CountDownLatch(1);\n@@ -74,0 +91,34 @@\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir(TEST_DATA_PATH);\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                TEST_DATA_PATH.resolve(\"p11-nss.txt\").toString());\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", \"\");\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv1() throws Exception {\n+        String[] args = { \"TLSv1\" };\n+        runTest(args);\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv11() throws Exception {\n+        String[] args = { \"TLSv1.1\" };\n+        runTest(args);\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv12AndCipherSuite() throws Exception {\n+        String[] args = { \"TLSv1.2\", \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\" };\n+        runTest(args);\n+    }\n+\n+    private void runTest(String[] args) throws Exception {\n+        System.out.println(\"Running with args: \" + Arrays.toString(args));\n+        parseArguments(args);\n+        main(new ClientAuth());\n+    }\n+\n@@ -103,2 +154,4 @@\n-        SSLServerSocket sslServerSocket = (SSLServerSocket)\n-                                ssf.createServerSocket(serverPort);\n+        InetSocketAddress socketAddress =\n+                new InetSocketAddress(InetAddress.getLoopbackAddress(), serverPort);\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) ssf.createServerSocket();\n+        sslServerSocket.bind(socketAddress);\n@@ -112,1 +165,1 @@\n-        serverReady = true;\n+        serverReadyLatch.countDown();\n@@ -136,3 +189,1 @@\n-        while (!serverReady) {\n-            Thread.sleep(50);\n-        }\n+        serverReadyLatch.await();\n@@ -199,9 +250,0 @@\n-    public static void main(String[] args) throws Exception {\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", \"\");\n-\n-        \/\/ Get the customized arguments.\n-        parseArguments(args);\n-        main(new ClientAuth());\n-    }\n-\n@@ -306,1 +348,1 @@\n-    void startServer(boolean newThread) throws Exception {\n+    void startServer (boolean newThread) {\n@@ -308,14 +350,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReadyLatch.countDown();\n+                    serverException = e;\n@@ -323,1 +363,1 @@\n-            };\n+            });\n@@ -331,1 +371,1 @@\n-                serverReady = true;\n+                serverReadyLatch.countDown();\n@@ -336,1 +376,1 @@\n-    void startClient(boolean newThread) throws Exception {\n+    void startClient (boolean newThread) {\n@@ -338,11 +378,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n@@ -350,1 +388,1 @@\n-            };\n+            });\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuth.java","additions":88,"deletions":50,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -1,166 +0,0 @@\n-#\n-# Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4938185 7106773\n-# @summary KeyStore support for NSS cert\/key databases\n-#          512 bits RSA key cannot work with SHA384 and SHA512\n-# @library \/test\/lib\n-# @run shell ClientAuth.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    ARCH=`uname -m`\n-    case \"$ARCH\" in\n-      i[3-6]86 )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-      * )\n-#     ia64 )\n-#     x86_64 )\n-    echo \"Unsupported System: Linux ${ARCH}\"\n-    exit 0;\n-    ;;\n-    esac\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-\n-    # 'uname -m' does not give us enough information -\n-    #  should rely on $PROCESSOR_IDENTIFIER (as is done in Defs-windows.gmk),\n-    #  but JTREG does not pass this env variable when executing a shell script.\n-    #\n-    #  execute test program - rely on it to exit if platform unsupported\n-\n-    ;;\n-  * )\n-    echo \"Unsupported System: ${OS}\"\n-    exit 0;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable\n-\n-${CP} ${TESTSRC}${FS}ClientAuthData${FS}cert8.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-${CP} ${TESTSRC}${FS}ClientAuthData${FS}key3.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-\n-# compile test\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    -classpath ${TESTSRC} \\\n-    -d ${TESTCLASSES} \\\n-    ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-    ${TESTSRC}${FS}ClientAuth.java \\\n-    ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-echo \"Run ClientAuth TLSv1 ...\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1\n-\n-# save error status\n-status=$?\n-\n-# return if failed\n-if [ \"${status}\" != \"0\" ] ; then\n-    exit $status\n-fi\n-\n-# run test\n-echo \"Run ClientAuth TLSv1.1 ...\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1.1\n-\n-# save error status\n-status=$?\n-\n-# return if failed\n-if [ \"${status}\" != \"0\" ] ; then\n-    exit $status\n-fi\n-\n-# run test with specified TLS protocol and cipher suite\n-echo \"Run ClientAuth TLSv1.2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1.2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuth.sh","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/cert8.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/key3.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/secmod.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/truststore","binary":true,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,8 @@\n+\/* @test\n+ * @bug 6599979\n+ * @summary Ensure that re-assigning the alias works\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm SecretKeysBasic\n+ *\/\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n@@ -25,0 +33,1 @@\n+import java.nio.file.Path;\n@@ -45,1 +54,11 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"TOKEN\", \"nss\");\n+        System.setProperty(\"CUSTOM_P11_CONFIG\", Path.of(BASE)\n+                .resolve(\"BasicData\").resolve(\"p11-nss.txt\").toString());\n+    }\n+\n+    @Test\n+    public void testBasic() throws Exception {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,156 +0,0 @@\n-#\n-# Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6599979\n-# @summary Ensure that re-assigning the alias works\n-#\n-# @library \/test\/lib ..\n-# @build SecretKeysBasic\n-# @run shell SecretKeysBasic.sh\n-#\n-# To run by hand:\n-#    %sh SecretKeysBasic.sh\n-#\n-# Note:\n-#    . test only runs on solaris at the moment\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    JAVAC_CMD=`which javac`\n-    TESTJAVA=`dirname $JAVAC_CMD`\/..\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-#DEBUG=sunpkcs11,pkcs11keystore\n-\n-echo DEBUG=${DEBUG}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Windows_* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    TOKENS=\"nss\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    TOKENS=\"nss\"\n-    ;;\n-  * )\n-    FS=\"\/\"\n-    PS=\":\"\n-    TOKENS=\"nss\"\n-    ;;\n-esac\n-\n-CP=\"cp -f\"\n-RM=\"rm -rf\"\n-MKDIR=\"mkdir -p\"\n-CHMOD=\"chmod\"\n-\n-\n-STATUS=0\n-for token in ${TOKENS}\n-do\n-\n-if [ ${token} = \"nss\" ]\n-then\n-    # make cert\/key DBs writable if token is NSS\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-    USED_FILE_LIST=\"${TESTCLASSES}${FS}cert8.db ${TESTCLASSES}${FS}key3.db\"\n-elif [ ${token} = \"solaris\" ]\n-then\n-    # copy keystore into write-able location\n-    if [ -d ${TESTCLASSES}${FS}pkcs11_softtoken ]\n-    then\n-        echo \"Removing old pkcs11_keystore, creating new pkcs11_keystore\"\n-\n-        echo ${RM} ${TESTCLASSES}${FS}pkcs11_softtoken\n-        ${RM} ${TESTCLASSES}${FS}pkcs11_softtoken\n-    fi\n-    echo ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}private\n-    ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}private\n-\n-    echo ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}public\n-    ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}public\n-\n-    echo ${CP} ${TESTSRC}${FS}BasicData${FS}pkcs11_softtoken${FS}objstore_info \\\n-    ${TESTCLASSES}${FS}pkcs11_softtoken\n-    ${CP} ${TESTSRC}${FS}BasicData${FS}pkcs11_softtoken${FS}objstore_info \\\n-    ${TESTCLASSES}${FS}pkcs11_softtoken\n-\n-    echo ${CHMOD} +w ${TESTCLASSES}${FS}pkcs11_softtoken${FS}objstore_info\n-    ${CHMOD} 600 ${TESTCLASSES}${FS}pkcs11_softtoken${FS}objstore_info\n-    USED_FILE_LIST=\"${TESTCLASSES}${FS}pkcs11_softtoken\"\n-fi\n-\n-# run test\n-cd ${TESTSRC}\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -DDIR=${TESTSRC}${FS}BasicData${FS} \\\n-        -classpath \\\n-        ${TESTCLASSES}${PS}${TESTCLASSES}${FS}..${PS}${TESTSRC}${FS}loader.jar${PS}${CPAPPEND} \\\n-        -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${token}.txt \\\n-        -DNO_DEFAULT=true \\\n-        -DNO_DEIMOS=true \\\n-        -DTOKEN=${token} \\\n-        -Djava.security.debug=${DEBUG} \\\n-        SecretKeysBasic\n-\n-#\t-DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${token}.txt \\\n-\n-# save error status\n-if [ $? != 0 ]\n-then\n-    echo \"Test against \" ${token} \" Failed!\"\n-    STATUS=1\n-fi\n-\n-# clean up\n-${RM} ${USED_FILE_LIST}\n-\n-done\n-\n-# return\n-exit ${STATUS}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.sh","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -38,0 +38,1 @@\n+import java.nio.file.StandardCopyOption;\n@@ -75,0 +76,2 @@\n+    static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n+\n@@ -863,0 +866,25 @@\n+    protected void setCommonSystemProps() {\n+        System.setProperty(\"java.security.debug\", \"true\");\n+        System.setProperty(\"NO_DEIMOS\", \"true\");\n+        System.setProperty(\"NO_DEFAULT\", \"true\");\n+        System.setProperty(\"CUSTOM_DB_DIR\", TEST_CLASSES);\n+    }\n+\n+    protected void copyNssCertKeyToClassesDir() throws IOException {\n+        Path dbPath = Path.of(BASE).getParent().resolve(\"nss\").resolve(\"db\");\n+        copyNssCertKeyToClassesDir(dbPath);\n+    }\n+\n+    protected void copyNssCertKeyToClassesDir(Path dbPath) throws IOException {\n+        Path destinationPath = Path.of(TEST_CLASSES);\n+        String keyDbFile = \"key3.db\";\n+        String certDbFile = \"cert8.db\";\n+\n+        Files.copy(dbPath.resolve(certDbFile),\n+                destinationPath.resolve(certDbFile),\n+                StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(dbPath.resolve(keyDbFile),\n+                destinationPath.resolve(keyDbFile),\n+                StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,11 @@\n-import java.io.*;\n-import java.util.*;\n+\/* @test\n+ * @bug 5070773\n+ * @summary SunPKCS11 provider does not support spaces config's provider name\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm ConfigQuotedString\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n@@ -27,1 +36,0 @@\n-import javax.security.auth.callback.*;\n@@ -31,1 +39,8 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        Path configPath = Path.of(BASE).resolve(\"ConfigQuotedString-nss.txt\");\n+        System.setProperty(\"CUSTOM_P11_CONFIG\", configPath.toString());\n+    }\n+\n+    @Test\n+    public void testQuotedString() throws Exception {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/ConfigQuotedString.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,120 +0,0 @@\n-#\n-# Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 5070773\n-# @summary SunPKCS11 provider does not support spaces config's provider name\n-# @run shell ConfigQuotedString.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-    COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# let java test exit if platform unsupported\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Darwin )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  AIX )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    #\n-    # javac does not like \/cygdrive produced by `pwd`\n-    #\n-    TESTSRC=`cygpath -d ${TESTSRC}`\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# compile test\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath ${TESTSRC}${FS}.. \\\n-        -d ${TESTCLASSES} \\\n-        ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-        ${TESTSRC}${FS}ConfigQuotedString.java \\\n-        ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ConfigQuotedString-nss.txt \\\n-        -Dtest.src=${TESTSRC} \\\n-        -Dtest.classes=${TESTCLASSES} \\\n-        ConfigQuotedString\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/ConfigQuotedString.sh","additions":0,"deletions":120,"binary":false,"changes":120,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,10 @@\n+\/* @test\n+ * @bug 4850423\n+ * @summary login facilities for hardware tokens\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm -Djava.security.manager=allow Login\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n@@ -25,1 +35,1 @@\n-import java.util.*;\n+import java.nio.file.Path;\n@@ -37,1 +47,11 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                Path.of(BASE).resolve(\"Login-nss.txt\").toString());\n+    }\n+\n+    @Test\n+    public void testLogin() throws Exception {\n+        String[] args = new String[]{ \"sm\", \"Login.policy\"};\n@@ -48,1 +68,1 @@\n-        if (ks.getProvider() instanceof java.security.AuthProvider) {\n+        if (ks.getProvider() instanceof AuthProvider ap) {\n@@ -55,1 +75,0 @@\n-        AuthProvider ap = (AuthProvider)ks.getProvider();\n@@ -110,1 +129,1 @@\n-            if (!(callbacks[0] instanceof PasswordCallback)) {\n+            if (!(callbacks[0] instanceof PasswordCallback pc)) {\n@@ -113,1 +132,0 @@\n-            PasswordCallback pc = (PasswordCallback)callbacks[0];\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-#\n-# Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4850423\n-# @summary login facilities for hardware tokens\n-#\n-# @run shell Login.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-    COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# let java test exit if platform unsupported\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Darwin )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  AIX )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    #\n-    # javac does not like \/cygdrive produced by `pwd`\n-    #\n-    TESTSRC=`cygpath -d ${TESTSRC}`\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable\n-\n-${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-\n-# compile test\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath ${TESTSRC}${FS}.. \\\n-        -d ${TESTCLASSES} \\\n-        ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-        ${TESTSRC}${FS}Login.java \\\n-        ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-        -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}Login-nss.txt \\\n-        -DNO_DEFAULT=true \\\n-        -DNO_DEIMOS=true \\\n-        -Dtest.src=${TESTSRC} \\\n-        -Dtest.classes=${TESTCLASSES} \\\n-        -Djava.security.debug=${DEBUG} \\\n-        -Djava.security.manager=allow \\\n-        Login sm Login.policy\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.sh","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"}]}