{"files":[{"patch":"@@ -4249,3 +4249,6 @@\n-\/\/ Round double with mode\n-\n-void MacroAssembler::round_double_mode(FloatRegister dst, FloatRegister src, enum Round_double_mode round_mode, Register converted_dbl, Register mask, Register converted_dbl_masked)\n+\/\/ According to Java SE specification, for floating-point round operations, if\n+\/\/ the input is NaN, +\/-infinity, or +\/-0, the same input is returned as the\n+\/\/ rounded result; this differs from behavior of RISC-V fcvt instructions (which\n+\/\/ round out-of-range values to the nearest max or min value), therefore special\n+\/\/ handling is needed by NaN, +\/-Infinity, +\/-0.\n+void MacroAssembler::round_double_mode(FloatRegister dst, FloatRegister src, enum Round_double_mode round_mode, Register tmp1, Register tmp2, Register tmp3)\n@@ -4255,1 +4258,1 @@\n-  assert_different_registers(converted_dbl, mask, converted_dbl_masked);\n+  assert_different_registers(tmp1, tmp2, tmp3);\n@@ -4257,2 +4260,5 @@\n-  \/\/ setting roundig mode to double->long (rm_direct) and long->double (rm_back) conversions\n-  RoundingMode rm_direct, rm_back;\n+  \/\/ setting roundig mode to conversions\n+  \/\/ here we use similar modes to double->long and long->double conversions\n+  \/\/ different mode for long->double conversion matter only if long value was not representable as double\n+  \/\/ we got long value as a result of double->long conversion so it is defenitely representable\n+  RoundingMode rm;\n@@ -4261,2 +4267,1 @@\n-      rm_direct = RoundingMode::rup;\n-      rm_back = RoundingMode::rdn;\n+      rm = RoundingMode::rup;\n@@ -4265,2 +4270,1 @@\n-      rm_direct = RoundingMode::rdn;\n-      rm_back = RoundingMode::rup;\n+      rm = RoundingMode::rdn;\n@@ -4269,2 +4273,1 @@\n-      rm_direct = RoundingMode::rne;\n-      rm_back = RoundingMode::rne;\n+      rm = RoundingMode::rne;\n@@ -4276,3 +4279,3 @@\n-  \/\/ converted_dbl - is a register to store double converted to long int\n-  \/\/ mask - is a register to create constant for comparsion\n-  \/\/ converted_dbl_masked - is a register were we stroe modidfied result of double -> long int comparison\n+  \/\/ tmp1 - is a register to store double converted to long int\n+  \/\/ tmp2 - is a register to create constant for comparsion\n+  \/\/ tmp3 - is a register were we store modidfied result of double -> long int comparison\n@@ -4283,2 +4286,2 @@\n-  addi(mask, zr, 1);\n-  slli(mask, mask, 63);\n+  addi(tmp2, zr, 1);\n+  slli(tmp2, tmp2, 63);\n@@ -4286,1 +4289,1 @@\n-  fcvt_l_d(converted_dbl, src, rm_direct);\n+  fcvt_l_d(tmp1, src, rm);\n@@ -4290,5 +4293,5 @@\n-  \/\/ converted_dbl = 011...1111 or 100...0000\n-  \/\/ converting to: converted_dbl_masked = 100...0000\n-  addi(converted_dbl_masked, converted_dbl, 1);\n-  andi(converted_dbl_masked, converted_dbl_masked, -2);\n-  beq(converted_dbl_masked, mask, bad_val);\n+  \/\/ tmp1 = 011...1111 or 100...0000\n+  \/\/ converting to: tmp3 = 100...0000\n+  addi(tmp3, tmp1, 1);\n+  andi(tmp3, tmp3, -2);\n+  beq(tmp3, tmp2, bad_val);\n@@ -4296,2 +4299,2 @@\n-  fcvt_d_l(dst, converted_dbl, rm_back);\n-  \/\/ add sign of input value to result\n+  fcvt_d_l(dst, tmp1, rm);\n+  \/\/ add sign of input value to result for +\/- 0 cases\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1238,1 +1238,1 @@\n-  void round_double_mode(FloatRegister dst, FloatRegister src, enum Round_double_mode round_mode, Register converted_dbl, Register mask, Register converted_dbl_masked);\n+  void round_double_mode(FloatRegister dst, FloatRegister src, enum Round_double_mode round_mode, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4176,10 +4176,0 @@\n-pipe_class fp_rnd_d(fRegD dst, fRegD src)\n-%{\n-  instruction_count(10);\n-  multiple_bundles;\n-  src    : S1(read);\n-  dst    : S5(write);\n-  DECODE : ID;\n-  FPU    : S5;\n-%}\n-\n@@ -7706,1 +7696,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -7708,1 +7698,1 @@\n-  format %{ \"RoundDoubleMode $src,$rmode\" %}\n+  format %{ \"RoundDoubleMode $src, $rmode\" %}\n@@ -7727,1 +7717,1 @@\n-  ins_pipe(fp_rnd_d);\n+  ins_pipe(pipe_class_default);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"}]}