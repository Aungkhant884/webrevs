{"files":[{"patch":"@@ -2738,14 +2738,1 @@\n-Handle java_lang_Throwable::get_cause_with_stack_trace(Handle throwable, TRAPS) {\n-  \/\/ Call to JVM to fill in the stack trace and clear declaringClassObject to\n-  \/\/ not keep classes alive in the stack trace.\n-  \/\/ call this:  public StackTraceElement[] getStackTrace()\n-  assert(throwable.not_null(), \"shouldn't be\");\n-\n-  JavaValue result(T_ARRAY);\n-  JavaCalls::call_virtual(&result, throwable,\n-                          vmClasses::Throwable_klass(),\n-                          vmSymbols::getStackTrace_name(),\n-                          vmSymbols::getStackTrace_signature(),\n-                          CHECK_NH);\n-  Handle stack_trace(THREAD, result.get_oop());\n-  assert(stack_trace->is_objArray(), \"Should be an array\");\n+Handle java_lang_Throwable::get_cause(Handle throwable, bool with_stack_trace, TRAPS) {\n@@ -2771,3 +2758,4 @@\n-  \/\/ If new_exception returns a different exception while creating the exception, return null.\n-  if (h_cause->klass()->name() != exception_name) {\n-    log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n+  if (with_stack_trace) {\n+    \/\/ If new_exception returns a different exception while creating the exception, return null.\n+    if (h_cause->klass()->name() != exception_name) {\n+      log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n@@ -2775,1 +2763,1 @@\n-    return Handle();\n+      return Handle();\n@@ -2777,5 +2765,4 @@\n-  java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n-  \/\/ Clear backtrace because the stacktrace should be used instead.\n-  set_backtrace(h_cause(), nullptr);\n-  return h_cause;\n-}\n+    \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n+    \/\/ not keep classes alive in the stack trace.\n+    \/\/ call this:  public StackTraceElement[] getStackTrace()\n+    assert(throwable.not_null(), \"shouldn't be\");\n@@ -2783,3 +2770,8 @@\n-Handle java_lang_Throwable::get_cause_simple(JavaThread* current, Handle throwable) {\n-  \/\/ Same as get_cause_with_stack_trace, but without calling a JVM.\n-  assert(throwable.not_null(), \"shouldn't be\");\n+    JavaValue result(T_ARRAY);\n+    JavaCalls::call_virtual(&result, throwable,\n+                            vmClasses::Throwable_klass(),\n+                            vmSymbols::getStackTrace_name(),\n+                            vmSymbols::getStackTrace_signature(),\n+                            CHECK_NH);\n+    Handle stack_trace(THREAD, result.get_oop());\n+    assert(stack_trace->is_objArray(), \"Should be an array\");\n@@ -2787,10 +2779,3 @@\n-  \/\/ Now create the message with the original exception and thread name.\n-  Symbol* message = java_lang_Throwable::detail_message(throwable());\n-  ResourceMark rm(current);\n-  stringStream st;\n-  st.print(\"Exception %s%s \", throwable()->klass()->name()->as_klass_external_name(),\n-             message == nullptr ? \"\" : \":\");\n-  if (message == NULL) {\n-    st.print(\"[in thread \\\"%s\\\"]\", current->name());\n-  } else {\n-    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n+    java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n+    \/\/ Clear backtrace because the stacktrace should be used instead.\n+    set_backtrace(h_cause(), nullptr);\n@@ -2799,2 +2784,1 @@\n-  Symbol* exception_name =  throwable()->klass()->name();\n-  return Exceptions::new_exception(current, exception_name, st.as_string());\n+  return h_cause;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":22,"deletions":38,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -618,3 +618,2 @@\n-  static Handle get_cause_with_stack_trace(Handle throwable, TRAPS);\n-  static Handle get_cause_simple(JavaThread* current, Handle throwable);\n-\n+  static Handle get_cause(Handle throwable, bool with_stack_trace, TRAPS);\n+  \n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -477,2 +477,2 @@\n-  Symbol* cause_sym = NULL;\n-  Symbol* cause_msg = NULL;\n+  Symbol* cause_sym = nullptr;\n+  Symbol* cause_msg = nullptr;\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -983,1 +983,1 @@\n-  Handle cause = java_lang_Throwable::get_cause_with_stack_trace(exception, THREAD);\n+  Handle cause = java_lang_Throwable::get_cause(exception, true, THREAD);\n@@ -987,1 +987,1 @@\n-    cause = java_lang_Throwable::get_cause_simple(THREAD, exception);\n+    cause = java_lang_Throwable::get_cause(exception, false, THREAD);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Test that StackOverflowError is correctly reporting in stack trace\n+ * @summary Test that StackOverflowError is correctly reported in stack trace\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}