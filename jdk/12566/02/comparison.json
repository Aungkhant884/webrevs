{"files":[{"patch":"@@ -2738,14 +2738,1 @@\n-Handle java_lang_Throwable::get_cause_with_stack_trace(Handle throwable, TRAPS) {\n-  \/\/ Call to JVM to fill in the stack trace and clear declaringClassObject to\n-  \/\/ not keep classes alive in the stack trace.\n-  \/\/ call this:  public StackTraceElement[] getStackTrace()\n-  assert(throwable.not_null(), \"shouldn't be\");\n-\n-  JavaValue result(T_ARRAY);\n-  JavaCalls::call_virtual(&result, throwable,\n-                          vmClasses::Throwable_klass(),\n-                          vmSymbols::getStackTrace_name(),\n-                          vmSymbols::getStackTrace_signature(),\n-                          CHECK_NH);\n-  Handle stack_trace(THREAD, result.get_oop());\n-  assert(stack_trace->is_objArray(), \"Should be an array\");\n+Handle java_lang_Throwable::get_cause(Handle throwable, bool with_stack_trace, TRAPS) {\n@@ -2771,3 +2758,4 @@\n-  \/\/ If new_exception returns a different exception while creating the exception, return null.\n-  if (h_cause->klass()->name() != exception_name) {\n-    log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n+  if (with_stack_trace) {\n+    \/\/ If new_exception returns a different exception while creating the exception, return null.\n+    if (h_cause->klass()->name() != exception_name) {\n+      log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n@@ -2775,1 +2763,19 @@\n-    return Handle();\n+      return Handle();\n+  }\n+    \/\/ Call to java to fill in the stack trace and clear declaringClassObject to\n+    \/\/ not keep classes alive in the stack trace.\n+    \/\/ call this:  public StackTraceElement[] getStackTrace()\n+    assert(throwable.not_null(), \"shouldn't be\");\n+\n+    JavaValue result(T_ARRAY);\n+    JavaCalls::call_virtual(&result, throwable,\n+                            vmClasses::Throwable_klass(),\n+                            vmSymbols::getStackTrace_name(),\n+                            vmSymbols::getStackTrace_signature(),\n+                            CHECK_NH);\n+    Handle stack_trace(THREAD, result.get_oop());\n+    assert(stack_trace->is_objArray(), \"Should be an array\");\n+\n+    java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n+    \/\/ Clear backtrace because the stacktrace should be used instead.\n+    set_backtrace(h_cause(), nullptr);\n@@ -2777,3 +2783,1 @@\n-  java_lang_Throwable::set_stacktrace(h_cause(), stack_trace());\n-  \/\/ Clear backtrace because the stacktrace should be used instead.\n-  set_backtrace(h_cause(), nullptr);\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -618,2 +618,2 @@\n-  static Handle get_cause_with_stack_trace(Handle throwable, TRAPS);\n-\n+  static Handle get_cause(Handle throwable, bool with_stack_trace, TRAPS);\n+  \n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -475,0 +475,9 @@\n+  \/\/ Try to discover the cause\n+  oop cause = java_lang_Throwable::cause(PENDING_EXCEPTION);\n+  Symbol* cause_sym = nullptr;\n+  Symbol* cause_msg = nullptr;\n+\n+  if (cause != NULL ) {\n+    cause_sym = cause->klass()->name();\n+    cause_msg = java_lang_Throwable::detail_message(cause);\n+  }\n@@ -476,1 +485,1 @@\n-  SystemDictionary::add_resolution_error(cpool, index, error, message);\n+  SystemDictionary::add_resolution_error(cpool, index, error, message, cause_sym, cause_msg);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -983,1 +983,1 @@\n-  Handle cause = java_lang_Throwable::get_cause_with_stack_trace(exception, THREAD);\n+  Handle cause = java_lang_Throwable::get_cause(exception, true, THREAD);\n@@ -985,0 +985,1 @@\n+    \/\/ Retry with the simple method\n@@ -986,1 +987,1 @@\n-    return;\n+    cause = java_lang_Throwable::get_cause(exception, false, THREAD);\n@@ -991,1 +992,1 @@\n-  bool created = false;\n+  bool created;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8302491\n+ * @requires vm.compMode != \"Xint\"\n+ * @summary Test that StackOverflowError is correctly reported in stack trace\n+ *          as underlying cause of NoClassDefFoundError\n+ * @run main\/othervm -Xcomp -Xss256k TestNoClassDefFoundCause\n+ *\/\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+\n+public class TestNoClassDefFoundCause {\n+\n+    static class CrashWithSOE {\n+\n+        private static ClassLoader cl = ClassLoader.getSystemClassLoader();\n+        private static String className = \"TestNoClassDefFoundCause$CantBeLoaded\";\n+        private static CrashWithSOE b;\n+\n+        static {\n+            try {\n+                b = new CrashWithSOE();\n+            } catch (Throwable tt) {\n+                b = null;\n+            }\n+        }\n+\n+        public CrashWithSOE() throws Throwable {\n+            try {\n+                new CrashWithSOE();\n+            } catch (StackOverflowError se) {\n+                try {\n+                    Object inst = cl.loadClass(className).newInstance();\n+                } catch (Throwable e) {\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void verify_stack(Throwable e, String cause) throws Exception {\n+        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(byteOS);\n+        e.printStackTrace(printStream);\n+        printStream.close();\n+        String stackTrace = byteOS.toString(\"ASCII\");\n+        if (!stackTrace.contains(cause)) {\n+            throw new RuntimeException(\" \\\"\" + cause + \"\\\" missing from stacktrace\");\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception{\n+        try {\n+            CrashWithSOE b = new CrashWithSOE();\n+            throw new RuntimeException(\"Error: Any expected exception wasn't thrown\");\n+        }catch (NoClassDefFoundError t){\n+            System.err.println(\"Check results:\");\n+            verify_stack(t, \"Caused by: java.lang.StackOverflowError\");\n+            System.err.println(\"Exception stack trace for \" + t.toString() + \" is ok\");\n+        } catch (Throwable t) {\n+            System.err.println(\"Exception NoClassDefFoundError wasn't thrown\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}