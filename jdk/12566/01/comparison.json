{"files":[{"patch":"@@ -2783,0 +2783,20 @@\n+Handle java_lang_Throwable::get_cause_simple(JavaThread* current, Handle throwable) {\n+  \/\/ Same as get_cause_with_stack_trace, but without calling a JVM.\n+  assert(throwable.not_null(), \"shouldn't be\");\n+\n+  \/\/ Now create the message with the original exception and thread name.\n+  Symbol* message = java_lang_Throwable::detail_message(throwable());\n+  ResourceMark rm(current);\n+  stringStream st;\n+  st.print(\"Exception %s%s \", throwable()->klass()->name()->as_klass_external_name(),\n+             message == nullptr ? \"\" : \":\");\n+  if (message == NULL) {\n+    st.print(\"[in thread \\\"%s\\\"]\", current->name());\n+  } else {\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), current->name());\n+  }\n+\n+  Symbol* exception_name =  throwable()->klass()->name();\n+  return Exceptions::new_exception(current, exception_name, st.as_string());\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -619,0 +619,1 @@\n+  static Handle get_cause_simple(JavaThread* current, Handle throwable);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -475,0 +475,9 @@\n+  \/\/ Try to discover the cause\n+  oop cause = java_lang_Throwable::cause(PENDING_EXCEPTION);\n+  Symbol* cause_sym = NULL;\n+  Symbol* cause_msg = NULL;\n+\n+  if (cause != NULL ) {\n+    cause_sym = cause->klass()->name();\n+    cause_msg = java_lang_Throwable::detail_message(cause);\n+  }\n@@ -476,1 +485,1 @@\n-  SystemDictionary::add_resolution_error(cpool, index, error, message);\n+  SystemDictionary::add_resolution_error(cpool, index, error, message, cause_sym, cause_msg);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -985,0 +985,1 @@\n+    \/\/ Retry with the simple method\n@@ -986,1 +987,1 @@\n-    return;\n+    cause = java_lang_Throwable::get_cause_simple(THREAD, exception);\n@@ -991,1 +992,1 @@\n-  bool created = false;\n+  bool created;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8302491\n+ * @requires vm.compMode != \"Xint\"\n+ * @summary Test that StackOverflowError is correctly reporting in stack trace\n+ *          as underlying cause of NoClassDefFoundError\n+ * @run main\/othervm -Xcomp -Xss256k TestNoClassDefFoundCause\n+ *\/\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+\n+public class TestNoClassDefFoundCause {\n+\n+    static class CrashWithSOE {\n+\n+        private static ClassLoader cl = ClassLoader.getSystemClassLoader();\n+        private static String className = \"TestNoClassDefFoundCause$CantBeLoaded\";\n+        private static CrashWithSOE b;\n+\n+        static {\n+            try {\n+                b = new CrashWithSOE();\n+            } catch (Throwable tt) {\n+                b = null;\n+            }\n+        }\n+\n+        public CrashWithSOE() throws Throwable {\n+            try {\n+                new CrashWithSOE();\n+            } catch (StackOverflowError se) {\n+                try {\n+                    Object inst = cl.loadClass(className).newInstance();\n+                } catch (Throwable e) {\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void verify_stack(Throwable e, String cause) throws Exception {\n+        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(byteOS);\n+        e.printStackTrace(printStream);\n+        printStream.close();\n+        String stackTrace = byteOS.toString(\"ASCII\");\n+        if (!stackTrace.contains(cause)) {\n+            throw new RuntimeException(\" \\\"\" + cause + \"\\\" missing from stacktrace\");\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception{\n+        try {\n+            CrashWithSOE b = new CrashWithSOE();\n+            throw new RuntimeException(\"Error: Any expected exception wasn't thrown\");\n+        }catch (NoClassDefFoundError t){\n+            System.err.println(\"Check results:\");\n+            verify_stack(t, \"Caused by: java.lang.StackOverflowError\");\n+            System.err.println(\"Exception stack trace for \" + t.toString() + \" is ok\");\n+        } catch (Throwable t) {\n+            System.err.println(\"Exception NoClassDefFoundError wasn't thrown\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestNoClassDefFoundCause.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}