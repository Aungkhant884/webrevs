{"files":[{"patch":"@@ -178,1 +178,5 @@\n-      binutils_target=\"\"\n+      if test \"x$COMPILE_TYPE\" = xcross; then\n+        binutils_target=\"--host=$OPENJDK_TARGET_AUTOCONF_NAME\"\n+      else\n+        binutils_target=\"\"\n+      fi\n","filename":"make\/autoconf\/lib-hsdis.m4","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,214 +0,0 @@\n-#\n-# Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n-# Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# The Universal Permissive License (UPL), Version 1.0\n-#\n-# Subject to the condition set forth below, permission is hereby granted to\n-# any person obtaining a copy of this software, associated documentation\n-# and\/or data (collectively the \"Software\"), free of charge and under any\n-# and all copyright rights in the Software, and any and all patent rights\n-# owned or freely licensable by each licensor hereunder covering either (i)\n-# the unmodified Software as contributed to or provided by such licensor,\n-# or (ii) the Larger Works (as defined below), to deal in both\n-#\n-# (a) the Software, and\n-#\n-# (b) any piece of software and\/or hardware listed in the lrgrwrks.txt file\n-# if one is included with the Software (each a \"Larger Work\" to which the\n-# Software is contributed by such licensors),\n-#\n-# without restriction, including without limitation the rights to copy,\n-# create derivative works of, display, perform, and distribute the Software\n-# and make, use, sell, offer for sale, import, export, have made, and have\n-# sold the Software and the Larger Work(s), and to sublicense the foregoing\n-# rights on either these or other terms.\n-#\n-# This license is subject to the following condition:\n-#\n-# The above copyright notice and either this complete permission notice or\n-# at a minimum a reference to the UPL must be included in all copies or\n-# substantial portions of the Software.\n-#\n-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n-# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n-# NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n-# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n-# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n-# USE OR OTHER DEALINGS IN THE SOFTWARE.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-#\n-\n-# Single gnu makefile for linux and windows (windows requires cygwin and mingw)\n-\n-# Default arch; it is changed below as needed.\n-ARCH\t\t= i386\n-OS\t\t= $(shell uname)\n-AR\t\t= ar\n-\n-## OS = Linux ##\n-ifeq\t\t($(OS),Linux)\n-ifneq           ($(MINGW),)\n-LIB_EXT\t\t= .dll\n-CPPFLAGS += -I$(TARGET_DIR)\/include\n-LDFLAGS += -L$(TARGET_DIR)\/lib\n-OS=windows\n-ifneq           ($(findstring x86_64-,$(MINGW)),)\n-ARCH=amd64\n-else\n-ARCH=i386\n-endif\n-CC \t\t= $(MINGW)-gcc\n-CONFIGURE_ARGS= --host=$(MINGW) --target=$(MINGW)\n-else   #linux\n-CPU             = $(shell uname -m)\n-ARCH1=$(CPU:x86_64=amd64)\n-ARCH=$(ARCH1:i686=i386)\n-ifdef LP64\n-CFLAGS\/amd64\t+= -m64\n-CFLAGS\/ppc64\t+= -m64\n-CFLAGS\/ppc64le  += -m64 -DABI_ELFv2\n-else\n-ARCH=$(ARCH1:amd64=i386)\n-ifneq ($(findstring arm,$(ARCH)),)\n-ARCH=arm\n-endif\n-CFLAGS\/i386\t+= -m32\n-endif\n-CFLAGS\t\t+= $(CFLAGS\/$(ARCH))\n-CFLAGS\t\t+= -fPIC\n-OS\t\t= linux\n-LIB_EXT\t\t= .so\n-CC \t\t= gcc\n-endif\n-CFLAGS\t\t+= -O\n-DLDFLAGS\t+= -shared\n-LDFLAGS         += -ldl\n-OUTFLAGS\t+= -o $@\n-else\n-## OS = AIX ##\n-ifeq\t\t($(OS),AIX)\n-OS              = aix\n-ARCH            = ppc64\n-CC              = xlc_r\n-CFLAGS          += -DAIX -g -qpic=large -q64\n-CFLAGS\/ppc64    += -q64\n-AR              = ar -X64\n-DLDFLAGS        += -qmkshrobj -lz\n-OUTFLAGS        += -o $@\n-LIB_EXT\t\t= .so\n-else\n-## OS = Darwin ##\n-ifeq ($(OS),Darwin)\n-CPU             = $(shell uname -m)\n-ARCH1=$(CPU:x86_64=amd64)\n-ARCH2=$(ARCH1:arm64=aarch64)\n-ARCH=$(ARCH2:i686=i386)\n-CONFIGURE_ARGS\/aarch64= --enable-targets=aarch64-darwin\n-CONFIGURE_ARGS = $(CONFIGURE_ARGS\/$(ARCH))\n-ifdef LP64\n-CFLAGS\/amd64    += -m64\n-else\n-ARCH=$(ARCH2:amd64=i386)\n-CFLAGS\/i386     += -m32\n-endif # LP64\n-ifeq ($(CPU), arm64)\n-CFLAGS\/aarch64  += -m64\n-endif # arm64\n-CFLAGS          += $(CFLAGS\/$(ARCH))\n-CFLAGS          += -fPIC\n-OS              = macosx\n-LIB_EXT         = .dylib\n-CC              = gcc\n-CFLAGS          += -O\n-# CFLAGS        += -DZ_PREFIX\n-DLDFLAGS        += -shared\n-DLDFLAGS        += -lz\n-LDFLAGS         += -ldl\n-OUTFLAGS        += -o $@\n-else\n-## OS = Windows ##\n-OS\t\t= windows\n-CC\t\t= gcc\n-CFLAGS\t\t+=  \/nologo \/MD \/W3 \/WX \/O2 \/Fo$(@:.dll=.obj) \/Gi-\n-CFLAGS\t\t+= LIBARCH=\\\"$(LIBARCH)\\\"\n-DLDFLAGS\t+= \/dll \/subsystem:windows \/incremental:no \\\n-\t\t\t\/export:decode_instruction\n-OUTFLAGS\t+= \/link \/out:$@\n-LIB_EXT\t\t= .dll\n-endif   # Darwin\n-endif   # AIX\n-endif\t# Linux\n-\n-LIBARCH\t\t= $(ARCH)\n-ifdef\t\tLP64\n-LIBARCH64\/i386\t= amd64\n-LIBARCH64\t= $(LIBARCH64\/$(ARCH))\n-ifneq\t\t($(LIBARCH64),)\n-LIBARCH\t\t= $(LIBARCH64)\n-endif   # LIBARCH64\/$(ARCH)\n-endif   # LP64\n-\n-JDKARCH=$(LIBARCH:i386=i586)\n-\n-ifeq            ($(BINUTILS),)\n-# Pop all the way out of the workspace to look for binutils.\n-# ...You probably want to override this setting.\n-BINUTILSDIR\t= $(shell cd build\/binutils;pwd)\n-else\n-BINUTILSDIR\t= $(shell cd $(BINUTILS);pwd)\n-endif\n-\n-CPPFLAGS\t+= -I$(BINUTILSDIR)\/include -I$(BINUTILSDIR)\/bfd -I$(TARGET_DIR)\/bfd\n-CPPFLAGS\t+= -DLIBARCH_$(LIBARCH) -DLIBARCH=\\\"$(LIBARCH)\\\" -DLIB_EXT=\\\"$(LIB_EXT)\\\"\n-\n-TARGET_DIR\t= build\/$(OS)-$(JDKARCH)\n-TARGET\t\t= $(TARGET_DIR)\/hsdis-$(LIBARCH)$(LIB_EXT)\n-\n-SOURCE\t\t= hsdis.c\n-\n-LIBRARIES =\t$(TARGET_DIR)\/bfd\/libbfd.a \\\n-\t\t$(TARGET_DIR)\/opcodes\/libopcodes.a \\\n-\t\t$(TARGET_DIR)\/libiberty\/libiberty.a\n-\n-ifneq ($(MINGW),)\n-LIBRARIES +=\t$(TARGET_DIR)\/zlib\/libz.a\n-endif\n-\n-DEMO_TARGET\t= $(TARGET_DIR)\/hsdis-demo\n-DEMO_SOURCE\t= hsdis-demo.c\n-\n-.PHONY:  all clean demo both\n-\n-all:  $(TARGET)\n-\n-both: all all64\n-\n-%64:\n-\t$(MAKE) LP64=1 ${@:%64=%}\n-\n-demo: $(TARGET) $(DEMO_TARGET)\n-\n-$(LIBRARIES): $(TARGET_DIR) $(TARGET_DIR)\/Makefile\n-\tif [ ! -f $@ ]; then cd $(TARGET_DIR); make all-opcodes; fi\n-\n-$(TARGET_DIR)\/Makefile:\n-\t(cd $(TARGET_DIR); CC=$(CC) CFLAGS=\"$(CFLAGS)\" AR=\"$(AR)\" $(BINUTILSDIR)\/configure --disable-nls $(CONFIGURE_ARGS))\n-\n-$(TARGET): $(SOURCE) $(LIBS) $(LIBRARIES) $(TARGET_DIR)\n-\t$(CC) $(OUTFLAGS) $(CPPFLAGS) $(CFLAGS) $(SOURCE) $(DLDFLAGS) $(LIBRARIES)\n-\n-$(DEMO_TARGET): $(DEMO_SOURCE) $(TARGET) $(TARGET_DIR)\n-\t$(CC) $(OUTFLAGS) -DTARGET_DIR=\\\"$(TARGET_DIR)\\\" $(CPPFLAGS) -g $(CFLAGS\/$(ARCH)) $(DEMO_SOURCE) $(LDFLAGS)\n-\n-$(TARGET_DIR):\n-\t[ -d $@ ] || mkdir -p $@\n-\n-clean:\n-\trm -rf $(TARGET_DIR)\n","filename":"src\/utils\/hsdis\/Makefile","additions":0,"deletions":214,"binary":false,"changes":214,"status":"deleted"}]}