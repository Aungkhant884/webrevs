{"files":[{"patch":"@@ -131,0 +131,1 @@\n+  void load_field_entry(Register cache, Register index, int bcp_offset = 1);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/resolvedFieldEntry.hpp\"\n@@ -490,1 +491,1 @@\n-  \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+  \/\/ Scale the index to be the entry index * sizeof(ResolvedIndyEntry)\n@@ -495,0 +496,17 @@\n+void InterpreterMacroAssembler::load_field_entry(Register cache, Register index, int bcp_offset) {\n+  \/\/ Get index out of bytecode pointer\n+  get_cache_index_at_bcp(index, bcp_offset, sizeof(u2));\n+  \/\/ Take shortcut if the size is a power of 2\n+  if (is_power_of_2(sizeof(ResolvedFieldEntry))) {\n+    \/\/ Scale index by power of 2\n+    sldi(index, index, log2i_exact(sizeof(ResolvedFieldEntry)));\n+  } else {\n+    \/\/ Scale the index to be the entry index * sizeof(ResolvedFieldEntry)\n+    mulli(index, index, sizeof(ResolvedFieldEntry));\n+  }\n+  \/\/ Get address of field entries array\n+  ld_ptr(cache, in_bytes(ConstantPoolCache::field_entries_offset()), R27_constPoolCache);\n+  addi(cache, cache, Array<ResolvedFieldEntry>::base_offset_in_bytes());\n+  add(cache, cache, index);\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedFieldEntry.hpp\"\n@@ -119,7 +120,4 @@\n-      __ get_cache_and_index_at_bcp(Rtemp \/* dst = cache *\/, 1);\n-      \/\/ ((*(cache+indices))>>((1+byte_no)*8))&0xFF:\n-#if defined(VM_LITTLE_ENDIAN)\n-      __ lbz(Rnew_bc, in_bytes(ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::indices_offset()) + 1 + byte_no, Rtemp);\n-#else\n-      __ lbz(Rnew_bc, in_bytes(ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::indices_offset()) + 7 - (1 + byte_no), Rtemp);\n-#endif\n+      __ load_field_entry(Rtemp, Rnew_bc);\n+      int code_offset = (byte_no == f1_byte) ? in_bytes(ResolvedFieldEntry::get_code_offset())\n+                                             : in_bytes(ResolvedFieldEntry::put_code_offset());\n+      __ lbz(Rnew_bc, code_offset, Rtemp);\n@@ -2250,0 +2248,62 @@\n+void TemplateTable::resolve_cache_and_index_for_field(int byte_no,\n+                                            Register Rcache,\n+                                            Register index) {\n+  assert_different_registers(Rcache, index);\n+\n+  Label resolved;\n+\n+  Bytecodes::Code code = bytecode();\n+  switch (code) {\n+  case Bytecodes::_nofast_getfield: code = Bytecodes::_getfield; break;\n+  case Bytecodes::_nofast_putfield: code = Bytecodes::_putfield; break;\n+  default: break;\n+  }\n+\n+  assert(byte_no == f1_byte || byte_no == f2_byte, \"byte_no out of range\");\n+  __ load_field_entry(Rcache, index);\n+  int code_offset = (byte_no == f1_byte) ? in_bytes(ResolvedFieldEntry::get_code_offset())\n+                                         : in_bytes(ResolvedFieldEntry::put_code_offset());\n+  __ lbz(R0, code_offset, Rcache);\n+  __ cmpwi(CCR0, R0, (int)code); \/\/ have we resolved this bytecode?\n+  __ beq(CCR0, resolved);\n+\n+  \/\/ resolve first time through\n+  address entry = CAST_FROM_FN_PTR(address, InterpreterRuntime::resolve_from_cache);\n+  __ li(R4_ARG2, (int)code);\n+  __ call_VM(noreg, entry, R4_ARG2);\n+\n+  \/\/ Update registers with resolved info\n+  __ load_field_entry(Rcache, index);\n+  __ bind(resolved);\n+\n+  \/\/ Use acquire semantics for the bytecode (see ResolvedFieldEntry::fill_in()).\n+  __ isync(); \/\/ Order load wrt. succeeding loads.\n+}\n+\n+void TemplateTable::load_resolved_field_entry(Register obj,\n+                                              Register cache,\n+                                              Register tos_state,\n+                                              Register offset,\n+                                              Register flags,\n+                                              bool is_static = false) {\n+  assert_different_registers(cache, tos_state, flags, offset);\n+\n+  \/\/ Field offset\n+  __ load_sized_value(offset, in_bytes(ResolvedFieldEntry::field_offset_offset()), cache, sizeof(int), true \/*is_signed*\/);\n+\n+  \/\/ Flags\n+  __ lbz(flags, in_bytes(ResolvedFieldEntry::flags_offset()), cache);\n+\n+  if (tos_state != noreg) {\n+    __ lbz(tos_state, in_bytes(ResolvedFieldEntry::type_offset()), cache);\n+  }\n+\n+  \/\/ Klass overwrite register\n+  if (is_static) {\n+    __ ld(obj, in_bytes(ResolvedFieldEntry::field_holder_offset()), cache);\n+    const int mirror_offset = in_bytes(Klass::java_mirror_offset());\n+    __ ld(obj, mirror_offset, obj);\n+    __ resolve_oop_handle(obj, R11_scratch1, R12_scratch2, MacroAssembler::PRESERVATION_NONE);\n+  }\n+}\n+\n@@ -2435,1 +2495,0 @@\n-    ByteSize cp_base_offset = ConstantPoolCache::base_offset();\n@@ -2446,1 +2505,0 @@\n-    __ addi(Rcache, Rcache, in_bytes(cp_base_offset));\n@@ -2470,1 +2528,1 @@\n-      __ get_cache_and_index_at_bcp(Rcache, 1);\n+      __ load_field_entry(Rcache, Rscratch);\n@@ -2496,3 +2554,4 @@\n-                 Rclass_or_obj = R22_tmp2,\n-                 Roffset       = R23_tmp3,\n-                 Rflags        = R31,\n+                 Rclass_or_obj = R22_tmp2, \/\/ Needs to survive C call.\n+                 Roffset       = R23_tmp3, \/\/ Needs to survive C call.\n+                 Rtos_state    = R30,      \/\/ Needs to survive C call.\n+                 Rflags        = R31,      \/\/ Needs to survive C call.\n@@ -2510,1 +2569,1 @@\n-  resolve_cache_and_index(byte_no, Rcache, Rscratch, sizeof(u2));\n+  resolve_cache_and_index_for_field(byte_no, Rcache, Rscratch);\n@@ -2516,1 +2575,1 @@\n-  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n+  load_resolved_field_entry(Rclass_or_obj, Rcache, Rtos_state, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n@@ -2522,1 +2581,1 @@\n-  __ rldicl(Rscratch, Rflags, 64-ConstantPoolCacheEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n+  __ rldicl(Rscratch, Rflags, 64-ResolvedFieldEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n@@ -2525,3 +2584,0 @@\n-  \/\/ Check field type.\n-  __ rldicl(Rflags, Rflags, 64-ConstantPoolCacheEntry::tos_state_shift, 64-ConstantPoolCacheEntry::tos_state_bits);\n-\n@@ -2530,1 +2586,1 @@\n-  __ cmpldi(CCR0, Rflags, number_of_states);\n+  __ cmpldi(CCR0, Rtos_state, number_of_states);\n@@ -2535,1 +2591,1 @@\n-  __ sldi(Rflags, Rflags, LogBytesPerWord);\n+  __ sldi(Rtos_state, Rtos_state, LogBytesPerWord);\n@@ -2540,1 +2596,1 @@\n-  __ ldx(Rbtable, Rbtable, Rflags);\n+  __ ldx(Rbtable, Rbtable, Rtos_state);\n@@ -2756,1 +2812,0 @@\n-    ByteSize cp_base_offset = ConstantPoolCache::base_offset();\n@@ -2759,1 +2814,0 @@\n-    __ addi(Rcache, Rcache, in_bytes(cp_base_offset));\n@@ -2780,1 +2834,1 @@\n-          const Register Rflags = Robj;\n+          const Register Rtos_state = Robj;\n@@ -2786,2 +2840,1 @@\n-          __ ld(Rflags, in_bytes(ConstantPoolCacheEntry::flags_offset()), Rcache); \/\/ Big Endian\n-          __ rldicl(Rflags, Rflags, 64-ConstantPoolCacheEntry::tos_state_shift, 64-ConstantPoolCacheEntry::tos_state_bits);\n+          __ lbz(Rtos_state, in_bytes(ResolvedFieldEntry::type_offset()), Rcache);\n@@ -2789,2 +2842,2 @@\n-          __ cmpwi(CCR0, Rflags, ltos);\n-          __ cmpwi(CCR1, Rflags, dtos);\n+          __ cmpwi(CCR0, Rtos_state, ltos);\n+          __ cmpwi(CCR1, Rtos_state, dtos);\n@@ -2805,1 +2858,1 @@\n-    __ get_cache_and_index_at_bcp(Rcache, 1);\n+    __ load_field_entry(Rcache, Rscratch);\n@@ -2833,1 +2886,2 @@\n-                 Rflags        = R30,\n+                 Rtos_state    = R23_tmp3, \/\/ Needs to survive C call.\n+                 Rflags        = R30,      \/\/ Needs to survive C call.\n@@ -2853,1 +2907,1 @@\n-  resolve_cache_and_index(byte_no, Rcache, Rscratch, sizeof(u2));\n+  resolve_cache_and_index_for_field(byte_no, Rcache, Rscratch);\n@@ -2855,1 +2909,1 @@\n-  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n+  load_resolved_field_entry(Rclass_or_obj, Rcache, Rtos_state, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n@@ -2861,4 +2915,1 @@\n-  __ rldicl(Rscratch, Rflags, 64-ConstantPoolCacheEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n-\n-  \/\/ Check the field type.\n-  __ rldicl(Rflags, Rflags, 64-ConstantPoolCacheEntry::tos_state_shift, 64-ConstantPoolCacheEntry::tos_state_bits);\n+  __ rldicl(Rscratch, Rflags, 64-ResolvedFieldEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n@@ -2868,1 +2919,1 @@\n-  __ cmpldi(CCR0, Rflags, number_of_states);\n+  __ cmpldi(CCR0, Rtos_state, number_of_states);\n@@ -2873,1 +2924,1 @@\n-  __ sldi(Rflags, Rflags, LogBytesPerWord);\n+  __ sldi(Rtos_state, Rtos_state, LogBytesPerWord);\n@@ -2878,1 +2929,1 @@\n-  __ ldx(Rbtable, Rbtable, Rflags);\n+  __ ldx(Rbtable, Rbtable, Rtos_state);\n@@ -3088,1 +3139,1 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 1);\n+  __ load_field_entry(Rcache, Rscratch);\n@@ -3090,1 +3141,1 @@\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n+  load_resolved_field_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3096,1 +3147,1 @@\n-  __ rldicl_(Rscratch, Rflags, 64-ConstantPoolCacheEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n+  __ rldicl_(Rscratch, Rflags, 64-ResolvedFieldEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n@@ -3169,2 +3220,2 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 1);\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n+  __ load_field_entry(Rcache, Rscratch);\n+  load_resolved_field_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3179,1 +3230,1 @@\n-  __ rldicl_(Rscratch, Rflags, 64-ConstantPoolCacheEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n+  __ rldicl_(Rscratch, Rflags, 64-ResolvedFieldEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n@@ -3308,2 +3359,2 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 2);\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n+  __ load_field_entry(Rcache, Rscratch, 2);\n+  load_resolved_field_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3320,1 +3371,1 @@\n-  __ rldicl_(Rscratch, Rflags, 64-ConstantPoolCacheEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n+  __ rldicl_(Rscratch, Rflags, 64-ResolvedFieldEntry::is_volatile_shift, 63); \/\/ Extract volatile bit.\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":100,"deletions":49,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2664,6 +2664,7 @@\n-  const Register cache = x12;\n-  const Register index = x13;\n-  const Register obj   = x12;\n-  const Register off   = x9;\n-  const Register flags = x10;\n-  const Register bc    = x14;\n+  const Register cache     = x12;\n+  const Register index     = x13;\n+  const Register tos_state = x13;\n+  const Register obj       = x12;\n+  const Register off       = x9;\n+  const Register flags     = x10;\n+  const Register bc        = x14;\n@@ -2673,1 +2674,1 @@\n-  load_resolved_field_entry(obj, cache, index, off, flags, is_static);\n+  load_resolved_field_entry(obj, cache, tos_state, off, flags, is_static);\n@@ -2690,2 +2691,1 @@\n-  \/\/ Index holds TOS\n-  __ bnez(index, notByte);\n+  __ bnez(tos_state, notByte);\n@@ -2715,1 +2715,1 @@\n-  __ sub(t0, index, (u1)ztos);\n+  __ sub(t0, tos_state, (u1)ztos);\n@@ -2735,1 +2735,1 @@\n-  __ sub(t0, index, (u1)atos);\n+  __ sub(t0, tos_state, (u1)atos);\n@@ -2756,1 +2756,1 @@\n-  __ sub(t0, index, (u1)itos);\n+  __ sub(t0, tos_state, (u1)itos);\n@@ -2776,1 +2776,1 @@\n-  __ sub(t0, index, (u1)ctos);\n+  __ sub(t0, tos_state, (u1)ctos);\n@@ -2796,1 +2796,1 @@\n-  __ sub(t0, index, (u1)stos);\n+  __ sub(t0, tos_state, (u1)stos);\n@@ -2816,1 +2816,1 @@\n-  __ sub(t0, index, (u1)ltos);\n+  __ sub(t0, tos_state, (u1)ltos);\n@@ -2836,1 +2836,1 @@\n-  __ sub(t0, index, (u1)ftos);\n+  __ sub(t0, tos_state, (u1)ftos);\n@@ -2857,1 +2857,1 @@\n-  __ sub(t0, index, (u1)dtos);\n+  __ sub(t0, tos_state, (u1)dtos);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-  switch (entry->tos()) {\n+  switch (entry->tos_state()) {\n@@ -642,1 +642,1 @@\n-    switch (entry->tos()) {\n+    switch (entry->tos_state()) {\n@@ -656,1 +656,1 @@\n-    switch (entry->tos()) {\n+    switch (entry->tos_state()) {\n@@ -710,1 +710,1 @@\n-  switch (entry->tos()) {\n+  switch (entry->tos_state()) {\n@@ -729,1 +729,1 @@\n-    switch (entry->tos()) {\n+    switch (entry->tos_state()) {\n@@ -744,1 +744,1 @@\n-    switch (entry->tos()) {\n+    switch (entry->tos_state()) {\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1196,1 +1196,1 @@\n-  switch((TosState)entry->tos()) {\n+  switch((TosState)entry->tos_state()) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1758,1 +1758,1 @@\n-              REWRITE_AT_PC(fast_get_type((TosState)(entry->tos())));\n+              REWRITE_AT_PC(fast_get_type((TosState)(entry->tos_state())));\n@@ -1767,1 +1767,1 @@\n-          TosState tos_type = (TosState)(entry->tos());\n+          TosState tos_type = (TosState)(entry->tos_state());\n@@ -1872,1 +1872,1 @@\n-          TosState tos_type = (TosState)(entry->tos());\n+          TosState tos_type = (TosState)(entry->tos_state());\n@@ -1890,1 +1890,1 @@\n-              REWRITE_AT_PC(fast_put_type((TosState)(entry->tos())));\n+              REWRITE_AT_PC(fast_put_type((TosState)(entry->tos_state())));\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  u1 _tos;                      \/\/ TOS state\n+  u1 _tos_state;                      \/\/ TOS state\n@@ -82,1 +82,1 @@\n-  u1 tos()                      const { return _tos;          }\n+  u1 tos_state()                const { return _tos_state;    }\n@@ -125,1 +125,1 @@\n-    \/\/ This has to be done last\n+    \/\/ These must be set after the other fields\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}