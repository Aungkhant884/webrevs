{"files":[{"patch":"@@ -1879,1 +1879,1 @@\n-  \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+  \/\/ Scale the index to be the entry index * sizeof(ResolvedIndyEntry)\n@@ -1893,1 +1893,1 @@\n-    mul(index, index, cache); \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+    mul(index, index, cache); \/\/ Scale the index to be the entry index * sizeof(ResolvedFieldEntry)\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2117,1 +2117,1 @@\n-    imull(index, index, sizeof(ResolvedIndyEntry)); \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+    imull(index, index, sizeof(ResolvedIndyEntry)); \/\/ Scale the index to be the entry index * sizeof(ResolvedIndyEntry)\n@@ -2132,1 +2132,1 @@\n-    imull(index, index, sizeof(ResolvedFieldEntry)); \/\/ Scale the index to be the entry index * sizeof(ResolvedInvokeDynamicInfo)\n+    imull(index, index, sizeof(ResolvedFieldEntry)); \/\/ Scale the index to be the entry index * sizeof(ResolvedFieldEntry)\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-    ResolvedFieldEntry *entry);\n+    ResolvedFieldEntry* entry);\n@@ -125,1 +125,1 @@\n-    ResolvedFieldEntry *entry, jvalue *value);\n+    ResolvedFieldEntry* entry, jvalue *value);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -191,2 +191,0 @@\n-    if (!_method_handle_invokers.is_empty())\n-      maybe_rewrite_invokehandle(p - 1, cp_index, -1, reverse);\n@@ -197,2 +195,0 @@\n-    if (!_method_handle_invokers.is_empty())\n-      maybe_rewrite_invokehandle(p - 1, pool_index, -1, reverse);\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -647,1 +647,1 @@\n-  if (entries.length()) {\n+  if (entries.length() != 0) {\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  st->print_cr(\" - Bytecode 1: %s\", Bytecodes::name((Bytecodes::Code)get_code()));\n-  st->print_cr(\" - Bytecode 2: %s\", Bytecodes::name((Bytecodes::Code)put_code()));\n+  st->print_cr(\" - Get Bytecode: %s\", Bytecodes::name((Bytecodes::Code)get_code()));\n+  st->print_cr(\" - Put Bytecode: %s\", Bytecodes::name((Bytecodes::Code)put_code()));\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"code\/compressedStream.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1031,1 +1031,1 @@\n-        int pool_index = mh->constants()->resolved_field_entry_at(field_index)->constant_pool_index();\n+        u2 pool_index = mh->constants()->resolved_field_entry_at(field_index)->constant_pool_index();\n@@ -1033,1 +1033,1 @@\n-        Bytes::put_Java_u2((address)(p+1), (u2)pool_index);     \/\/ java byte ordering\n+        Bytes::put_Java_u2((address)(p+1), pool_index);     \/\/ java byte ordering\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,2 +70,2 @@\n-  ASSERT_TRUE(strstr(output, \"Bytecode 1:\") != NULL) << \"must have \\\"bytecode 1\\\"\";\n-  ASSERT_TRUE(strstr(output, \"Bytecode 2:\") != NULL) << \"must have \\\"bytecode 2\\\"\";\n+  ASSERT_TRUE(strstr(output, \"Put Bytecode:\") != NULL) << \"must have \\\"put code\\\"\";\n+  ASSERT_TRUE(strstr(output, \"Get Bytecode:\") != NULL) << \"must have \\\"get code\\\"\";\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}