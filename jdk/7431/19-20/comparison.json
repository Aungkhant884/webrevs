{"files":[{"patch":"@@ -270,3 +270,19 @@\n-        \/\/ Allow for a bit of growth\n-        this((int) ((1 + m.size()) * 1.1));\n-        putAll(m);\n+        this(m, m.size());\n+    }\n+\n+    \/**\n+     * Constructs a new identity hash map containing the keys-value mappings\n+     * in the specified map, with expected size\n+     *\n+     * @param map the map whose mappings are to be placed into this map\n+     * @param expectedSize the expected size of the created IdentityHashMap\n+     * @throws NullPointerException if the specified map is null\n+     *\/\n+    private IdentityHashMap(Map<? extends K, ? extends V> map, int expectedSize) {\n+        this(expectedSize);\n+        if (expectedSize == 0) {\n+            return;\n+        }\n+        for (Entry<? extends K, ? extends V> e : map.entrySet()) {\n+            put(e.getKey(), e.getValue());\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/IdentityHashMap.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.IdentityHashMap;\n@@ -54,0 +55,9 @@\n+    private static final int TEST_SIZE = 128;\n+    private static final Integer[] INTEGER_ARRAY = new Integer[TEST_SIZE];\n+\n+    static {\n+        for (int i = 0; i < TEST_SIZE; ++i) {\n+            INTEGER_ARRAY[i] = i;\n+        }\n+    }\n+\n@@ -56,2 +66,2 @@\n-        List<Object[]> testParameters = new ArrayList<>(200);\n-        for (int i = 8; i <= 128; ++i) {\n+        List<Object[]> testParameters = new ArrayList<>(TEST_SIZE * 3);\n+        for (int i = 0; i <= TEST_SIZE; ++i) {\n@@ -74,0 +84,8 @@\n+            testParameters.add(\n+                    new Object[]{\n+                            (Supplier<Map<Object, Object>>) IdentityHashMap::new,\n+                            (Function<Integer, Map<Object, Object>>) IdentityHashMap::new,\n+                            (Function<Map<Object, Object>, Map<Object, Object>>) IdentityHashMap::new,\n+                            i\n+                    }\n+            );\n@@ -100,1 +118,1 @@\n-            map.put(i, i);\n+            map.put(INTEGER_ARRAY[i], INTEGER_ARRAY[i]);\n@@ -109,0 +127,3 @@\n+        if (table == null) {\n+            return -1;\n+        }\n@@ -122,4 +143,3 @@\n-            Assert.assertEquals(\n-                    \"length b not equals to 16\",\n-                    lengthA,\n-                    length\n+            Assert.assertTrue(\n+                    \"length b larger than length a!\",\n+                    length <= lengthA\n@@ -132,4 +152,3 @@\n-            Assert.assertEquals(\n-                    \"length c not equals to 16\",\n-                    lengthA,\n-                    length\n+            Assert.assertTrue(\n+                    \"length c larger than length a!\",\n+                    length <= lengthA\n@@ -143,4 +162,3 @@\n-            Assert.assertEquals(\n-                    \"length d not equals to 16\",\n-                    lengthA,\n-                    length\n+            Assert.assertTrue(\n+                    \"length d larger than length a!\",\n+                    length <= lengthA\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":33,"deletions":15,"binary":false,"changes":48,"status":"modified"}]}