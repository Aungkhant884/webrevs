{"files":[{"patch":"@@ -3903,1 +3903,1 @@\n-            directory = new HashMap<>((int)(universe.length \/ 0.75f) + 1);\n+            directory = new HashMap<>((int) Math.ceil(universe.length \/ 0.75));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -498,3 +498,3 @@\n-                float ft = ((float)s \/ loadFactor) + 1.0F;\n-                int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n-                         (int)ft : MAXIMUM_CAPACITY);\n+                double dt = Math.ceil(s \/ loadFactor);\n+                int t = ((dt < (double)MAXIMUM_CAPACITY) ?\n+                         (int)dt : MAXIMUM_CAPACITY);\n@@ -1530,2 +1530,2 @@\n-            float fc = (float)mappings \/ lf + 1.0f;\n-            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n+            double dc = Math.ceil(mappings \/ lf);\n+            int cap = ((dc < DEFAULT_INITIAL_CAPACITY) ?\n@@ -1533,1 +1533,1 @@\n-                       (fc >= MAXIMUM_CAPACITY) ?\n+                       (dc >= MAXIMUM_CAPACITY) ?\n@@ -1535,1 +1535,1 @@\n-                       tableSizeFor((int)fc));\n+                       tableSizeFor((int)dc));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,3 +216,1 @@\n-        int capacity = 1;\n-        while (capacity < initialCapacity)\n-            capacity <<= 1;\n+        int capacity = HashMap.tableSizeFor(initialCapacity);\n@@ -254,1 +252,1 @@\n-        this(Math.max((int) ((float)m.size() \/ DEFAULT_LOAD_FACTOR + 1.0F),\n+        this(Math.max((int) Math.ceil(m.size() \/ 0.75),\n@@ -560,1 +558,1 @@\n-            int targetCapacity = (int)(numKeysToBeAdded \/ loadFactor + 1);\n+            int targetCapacity = (int)Math.ceil(numKeysToBeAdded \/ loadFactor);\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -834,1 +834,1 @@\n-     * to dynamically resize.\n+     * to dynamically re(size).\n@@ -898,3 +898,3 @@\n-        long size = (long)(1.0 + (long)initialCapacity \/ loadFactor);\n-        int cap = (size >= (long)MAXIMUM_CAPACITY) ?\n-            MAXIMUM_CAPACITY : tableSizeFor((int)size);\n+        int size = (int)Math.ceil(initialCapacity \/ loadFactor);\n+        int cap = (size >= MAXIMUM_CAPACITY) ?\n+            MAXIMUM_CAPACITY : tableSizeFor(size);\n@@ -1466,3 +1466,3 @@\n-            long ts = (long)(1.0 + size \/ LOAD_FACTOR);\n-            int n = (ts >= (long)MAXIMUM_CAPACITY) ?\n-                MAXIMUM_CAPACITY : tableSizeFor((int)ts);\n+            int ts = (int)Math.ceil(size \/ (double)LOAD_FACTOR);\n+            int n = (ts >= MAXIMUM_CAPACITY) ?\n+                MAXIMUM_CAPACITY : tableSizeFor(ts);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-\n-        int initialCapacity = (int)(e.getEnumConstants().length \/ 0.75f) + 1;\n+        final int size = e.getEnumConstants().length;\n+        int initialCapacity = size + (size + 2) \/ 3;\n","filename":"test\/jdk\/java\/lang\/Enum\/ConstantDirectoryOptimalCapacity.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}