{"files":[{"patch":"@@ -58,5 +58,0 @@\n-    private static void putMap(Map<String, String> map, int i) {\n-        String String = Integer.toString(i);\n-        map.put(String, String);\n-    }\n-\n@@ -105,3 +100,1 @@\n-        for (int i = 0; i < size; ++i) {\n-            putMap(map, i);\n-        }\n+        putN(map, size);\n@@ -131,1 +124,2 @@\n-            putMap(map, i);\n+            String string = Integer.toString(i);\n+            map.put(string, string);\n@@ -142,1 +136,1 @@\n-        return new Object[][]{\n+        return new Object[][] {\n@@ -144,131 +138,13 @@\n-                {1, 1},\n-                {2, 2},\n-                {3, 4},\n-                {4, 4},\n-                {5, 8},\n-                {6, 8},\n-                {7, 8},\n-                {8, 8},\n-                {9, 16},\n-                {10, 16},\n-                {11, 16},\n-                {12, 16},\n-                {13, 16},\n-                {14, 16},\n-                {15, 16},\n-                {16, 16},\n-                {17, 32},\n-                {18, 32},\n-                {19, 32},\n-                {20, 32},\n-                {21, 32},\n-                {22, 32},\n-                {23, 32},\n-                {24, 32},\n-                {25, 32},\n-                {26, 32},\n-                {27, 32},\n-                {28, 32},\n-                {29, 32},\n-                {30, 32},\n-                {31, 32},\n-                {32, 32},\n-                {33, 64},\n-                {34, 64},\n-                {35, 64},\n-                {36, 64},\n-                {37, 64},\n-                {38, 64},\n-                {39, 64},\n-                {40, 64},\n-                {41, 64},\n-                {42, 64},\n-                {43, 64},\n-                {44, 64},\n-                {45, 64},\n-                {46, 64},\n-                {47, 64},\n-                {48, 64},\n-                {49, 64},\n-                {50, 64},\n-                {51, 64},\n-                {52, 64},\n-                {53, 64},\n-                {54, 64},\n-                {55, 64},\n-                {56, 64},\n-                {57, 64},\n-                {58, 64},\n-                {59, 64},\n-                {60, 64},\n-                {61, 64},\n-                {62, 64},\n-                {63, 64},\n-                {64, 64},\n-                {65, 128},\n-                {66, 128},\n-                {67, 128},\n-                {68, 128},\n-                {69, 128},\n-                {70, 128},\n-                {71, 128},\n-                {72, 128},\n-                {73, 128},\n-                {74, 128},\n-                {75, 128},\n-                {76, 128},\n-                {77, 128},\n-                {78, 128},\n-                {79, 128},\n-                {80, 128},\n-                {81, 128},\n-                {82, 128},\n-                {83, 128},\n-                {84, 128},\n-                {85, 128},\n-                {86, 128},\n-                {87, 128},\n-                {88, 128},\n-                {89, 128},\n-                {90, 128},\n-                {91, 128},\n-                {92, 128},\n-                {93, 128},\n-                {94, 128},\n-                {95, 128},\n-                {96, 128},\n-                {97, 128},\n-                {98, 128},\n-                {99, 128},\n-                {100, 128},\n-                {101, 128},\n-                {102, 128},\n-                {103, 128},\n-                {104, 128},\n-                {105, 128},\n-                {106, 128},\n-                {107, 128},\n-                {108, 128},\n-                {109, 128},\n-                {110, 128},\n-                {111, 128},\n-                {112, 128},\n-                {113, 128},\n-                {114, 128},\n-                {115, 128},\n-                {116, 128},\n-                {117, 128},\n-                {118, 128},\n-                {119, 128},\n-                {120, 128},\n-                {121, 128},\n-                {122, 128},\n-                {123, 128},\n-                {124, 128},\n-                {125, 128},\n-                {126, 128},\n-                {127, 128},\n-                {MAX - 1, MAX},\n-                {MAX, MAX},\n-                {MAX + 1, MAX},\n-                {Integer.MAX_VALUE, MAX}\n+                { 0,                   1 },\n+                { 1,                   1 },\n+                { 2,                   2 },\n+                { 3,                   4 },\n+                { 4,                   4 },\n+                { 5,                   8 },\n+                { 15,                 16 },\n+                { 16,                 16 },\n+                { 17,                 32 },\n+                { MAX-1,             MAX },\n+                { MAX,               MAX },\n+                { MAX+1,             MAX },\n+                { Integer.MAX_VALUE, MAX }\n@@ -317,1 +193,1 @@\n-        putMap(map, 0);\n+        map.put(\"\", \"\");\n@@ -343,1 +219,1 @@\n-        putMap(map, 0);\n+        map.put(\"\", \"\");\n@@ -368,62 +244,23 @@\n-                pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)), map -> {\n-                }),\n-                pcc(\"phm0pn\", size, cap, () -> new HashMap<>(), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"phm0pa\", size, cap, () -> new HashMap<>(), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-\n-                pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> {\n-                }),\n-                pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-\n-                pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)), map -> {\n-                }),\n-                pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n-                    putN(map, size);\n-                }),\n-                pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n-                    map.putAll(makeMap(size));\n-                }),\n-                pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(makeMap(size));\n-                })\n+                pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)),       map -> { }),\n+                pcc(\"phm0pn\", size, cap, () -> new HashMap<>(),                    map -> { putN(map, size); }),\n+                pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap),                 map -> { putN(map, size); }),\n+                pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { putN(map, size); }),\n+                pcc(\"phm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(makeMap(size)); }),\n+\n+                pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> { }),\n+                pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(),              map -> { putN(map, size); }),\n+                pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { putN(map, size); }),\n+                pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { putN(map, size); }),\n+                pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(makeMap(size)); }),\n+\n+                pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)),   map -> { }),\n+                pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(),                map -> { putN(map, size); }),\n+                pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap),             map -> { putN(map, size); }),\n+                pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { putN(map, size); }),\n+                pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(makeMap(size)); })\n@@ -435,26 +272,11 @@\n-                pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)), map -> {\n-                }),\n-                pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-                pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-                pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-\n-                pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> {\n-                }),\n-                pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-                pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-                pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-\n-                pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)), map -> {\n-                }),\n+                pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)),       map -> { }),\n+                pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(fakeMap(size)); }),\n+\n+                pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> { }),\n+                pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(fakeMap(size)); }),\n+\n+                pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)),   map -> { }),\n@@ -462,6 +284,2 @@\n-                pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n-                    map.putAll(fakeMap(size));\n-                }),\n-                pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n-                    map.putAll(fakeMap(size));\n-                })\n+                pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(fakeMap(size)); })\n@@ -477,48 +295,3 @@\n-        cases.addAll(genPopulatedCapacityCases(16, 32));\n-        cases.addAll(genPopulatedCapacityCases(17, 32));\n-        cases.addAll(genPopulatedCapacityCases(18, 32));\n-        cases.addAll(genPopulatedCapacityCases(19, 32));\n-        cases.addAll(genPopulatedCapacityCases(20, 32));\n-        cases.addAll(genPopulatedCapacityCases(21, 32));\n-        cases.addAll(genPopulatedCapacityCases(22, 32));\n-        cases.addAll(genPopulatedCapacityCases(23, 32));\n-        cases.addAll(genPopulatedCapacityCases(24, 32));\n-        cases.addAll(genPopulatedCapacityCases(25, 64));\n-        cases.addAll(genPopulatedCapacityCases(26, 64));\n-        cases.addAll(genPopulatedCapacityCases(27, 64));\n-        cases.addAll(genPopulatedCapacityCases(28, 64));\n-        cases.addAll(genPopulatedCapacityCases(29, 64));\n-        cases.addAll(genPopulatedCapacityCases(30, 64));\n-        cases.addAll(genPopulatedCapacityCases(31, 64));\n-        cases.addAll(genPopulatedCapacityCases(32, 64));\n-        cases.addAll(genPopulatedCapacityCases(33, 64));\n-        cases.addAll(genPopulatedCapacityCases(34, 64));\n-        cases.addAll(genPopulatedCapacityCases(35, 64));\n-        cases.addAll(genPopulatedCapacityCases(36, 64));\n-        cases.addAll(genPopulatedCapacityCases(37, 64));\n-        cases.addAll(genPopulatedCapacityCases(38, 64));\n-        cases.addAll(genPopulatedCapacityCases(39, 64));\n-        cases.addAll(genPopulatedCapacityCases(40, 64));\n-        cases.addAll(genPopulatedCapacityCases(41, 64));\n-        cases.addAll(genPopulatedCapacityCases(42, 64));\n-        cases.addAll(genPopulatedCapacityCases(43, 64));\n-        cases.addAll(genPopulatedCapacityCases(44, 64));\n-        cases.addAll(genPopulatedCapacityCases(45, 64));\n-        cases.addAll(genPopulatedCapacityCases(46, 64));\n-        cases.addAll(genPopulatedCapacityCases(47, 64));\n-        cases.addAll(genPopulatedCapacityCases(48, 64));\n-        cases.addAll(genPopulatedCapacityCases(49, 128));\n-        cases.addAll(genPopulatedCapacityCases(50, 128));\n-        cases.addAll(genPopulatedCapacityCases(51, 128));\n-        cases.addAll(genPopulatedCapacityCases(52, 128));\n-        cases.addAll(genPopulatedCapacityCases(53, 128));\n-        cases.addAll(genPopulatedCapacityCases(54, 128));\n-        cases.addAll(genPopulatedCapacityCases(55, 128));\n-        cases.addAll(genPopulatedCapacityCases(56, 128));\n-        cases.addAll(genPopulatedCapacityCases(57, 128));\n-        cases.addAll(genPopulatedCapacityCases(58, 128));\n-        cases.addAll(genPopulatedCapacityCases(59, 128));\n-        cases.addAll(genPopulatedCapacityCases(60, 128));\n-        cases.addAll(genPopulatedCapacityCases(61, 128));\n-        cases.addAll(genPopulatedCapacityCases(62, 128));\n-        cases.addAll(genPopulatedCapacityCases(63, 128));\n+        cases.addAll(genPopulatedCapacityCases(11,  16));\n+        cases.addAll(genPopulatedCapacityCases(12,  16));\n+        cases.addAll(genPopulatedCapacityCases(13,  32));\n@@ -526,63 +299,0 @@\n-        cases.addAll(genPopulatedCapacityCases(65, 128));\n-        cases.addAll(genPopulatedCapacityCases(66, 128));\n-        cases.addAll(genPopulatedCapacityCases(67, 128));\n-        cases.addAll(genPopulatedCapacityCases(68, 128));\n-        cases.addAll(genPopulatedCapacityCases(69, 128));\n-        cases.addAll(genPopulatedCapacityCases(70, 128));\n-        cases.addAll(genPopulatedCapacityCases(71, 128));\n-        cases.addAll(genPopulatedCapacityCases(72, 128));\n-        cases.addAll(genPopulatedCapacityCases(73, 128));\n-        cases.addAll(genPopulatedCapacityCases(74, 128));\n-        cases.addAll(genPopulatedCapacityCases(75, 128));\n-        cases.addAll(genPopulatedCapacityCases(76, 128));\n-        cases.addAll(genPopulatedCapacityCases(77, 128));\n-        cases.addAll(genPopulatedCapacityCases(78, 128));\n-        cases.addAll(genPopulatedCapacityCases(79, 128));\n-        cases.addAll(genPopulatedCapacityCases(80, 128));\n-        cases.addAll(genPopulatedCapacityCases(81, 128));\n-        cases.addAll(genPopulatedCapacityCases(82, 128));\n-        cases.addAll(genPopulatedCapacityCases(83, 128));\n-        cases.addAll(genPopulatedCapacityCases(84, 128));\n-        cases.addAll(genPopulatedCapacityCases(85, 128));\n-        cases.addAll(genPopulatedCapacityCases(86, 128));\n-        cases.addAll(genPopulatedCapacityCases(87, 128));\n-        cases.addAll(genPopulatedCapacityCases(88, 128));\n-        cases.addAll(genPopulatedCapacityCases(89, 128));\n-        cases.addAll(genPopulatedCapacityCases(90, 128));\n-        cases.addAll(genPopulatedCapacityCases(91, 128));\n-        cases.addAll(genPopulatedCapacityCases(92, 128));\n-        cases.addAll(genPopulatedCapacityCases(93, 128));\n-        cases.addAll(genPopulatedCapacityCases(94, 128));\n-        cases.addAll(genPopulatedCapacityCases(95, 128));\n-        cases.addAll(genPopulatedCapacityCases(96, 128));\n-        cases.addAll(genPopulatedCapacityCases(97, 256));\n-        cases.addAll(genPopulatedCapacityCases(98, 256));\n-        cases.addAll(genPopulatedCapacityCases(99, 256));\n-        cases.addAll(genPopulatedCapacityCases(100, 256));\n-        cases.addAll(genPopulatedCapacityCases(101, 256));\n-        cases.addAll(genPopulatedCapacityCases(102, 256));\n-        cases.addAll(genPopulatedCapacityCases(103, 256));\n-        cases.addAll(genPopulatedCapacityCases(104, 256));\n-        cases.addAll(genPopulatedCapacityCases(105, 256));\n-        cases.addAll(genPopulatedCapacityCases(106, 256));\n-        cases.addAll(genPopulatedCapacityCases(107, 256));\n-        cases.addAll(genPopulatedCapacityCases(108, 256));\n-        cases.addAll(genPopulatedCapacityCases(109, 256));\n-        cases.addAll(genPopulatedCapacityCases(110, 256));\n-        cases.addAll(genPopulatedCapacityCases(111, 256));\n-        cases.addAll(genPopulatedCapacityCases(112, 256));\n-        cases.addAll(genPopulatedCapacityCases(113, 256));\n-        cases.addAll(genPopulatedCapacityCases(114, 256));\n-        cases.addAll(genPopulatedCapacityCases(115, 256));\n-        cases.addAll(genPopulatedCapacityCases(116, 256));\n-        cases.addAll(genPopulatedCapacityCases(117, 256));\n-        cases.addAll(genPopulatedCapacityCases(118, 256));\n-        cases.addAll(genPopulatedCapacityCases(119, 256));\n-        cases.addAll(genPopulatedCapacityCases(120, 256));\n-        cases.addAll(genPopulatedCapacityCases(121, 256));\n-        cases.addAll(genPopulatedCapacityCases(122, 256));\n-        cases.addAll(genPopulatedCapacityCases(123, 256));\n-        cases.addAll(genPopulatedCapacityCases(124, 256));\n-        cases.addAll(genPopulatedCapacityCases(125, 256));\n-        cases.addAll(genPopulatedCapacityCases(126, 256));\n-        cases.addAll(genPopulatedCapacityCases(127, 256));\n@@ -609,0 +319,1 @@\n+\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":59,"deletions":348,"binary":false,"changes":407,"status":"modified"}]}