{"files":[{"patch":"@@ -469,1 +469,1 @@\n-        if (++size >= threshold)\n+        if (++size > threshold)\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @modules java.base\/java.lang:open\n- *          java.base\/java.util:open\n@@ -32,1 +30,4 @@\n- * @run junit HashMapsPutAllOverAllocateTableTest\n+ * @run junit\/othervm\/timeout=1000\n+ *      --add-opens java.base\/java.lang=ALL-UNNAMED\n+ *      --add-opens java.base\/java.util=ALL-UNNAMED\n+ *      HashMapsPutAllOverAllocateTableTest\n@@ -35,0 +36,5 @@\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n@@ -37,0 +43,1 @@\n+import java.util.ArrayList;\n@@ -38,1 +45,0 @@\n-import java.util.IdentityHashMap;\n@@ -45,5 +51,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n@@ -55,17 +56,20 @@\n-        return List.of(\n-                new Object[]{\n-                        (Supplier<Map<Object, Object>>) HashMap::new,\n-                        (Function<Integer, Map<Object, Object>>) HashMap::new,\n-                        (Function<Map<Object, Object>, Map<Object, Object>>) HashMap::new,\n-                },\n-                new Object[]{\n-                        (Supplier<Map<Object, Object>>) WeakHashMap::new,\n-                        (Function<Integer, Map<Object, Object>>) WeakHashMap::new,\n-                        (Function<Map<Object, Object>, Map<Object, Object>>) WeakHashMap::new,\n-                },\n-                new Object[]{\n-                        (Supplier<Map<Object, Object>>) IdentityHashMap::new,\n-                        (Function<Integer, Map<Object, Object>>) IdentityHashMap::new,\n-                        (Function<Map<Object, Object>, Map<Object, Object>>) IdentityHashMap::new,\n-                }\n-        );\n+        List<Object[]> testParameters = new ArrayList<>(200);\n+        for (int i = 8; i <= 128; ++i) {\n+            testParameters.add(\n+                    new Object[]{\n+                            (Supplier<Map<Object, Object>>) HashMap::new,\n+                            (Function<Integer, Map<Object, Object>>) HashMap::new,\n+                            (Function<Map<Object, Object>, Map<Object, Object>>) HashMap::new,\n+                            i\n+                    }\n+            );\n+            testParameters.add(\n+                    new Object[]{\n+                            (Supplier<Map<Object, Object>>) WeakHashMap::new,\n+                            (Function<Integer, Map<Object, Object>>) WeakHashMap::new,\n+                            (Function<Map<Object, Object>, Map<Object, Object>>) WeakHashMap::new,\n+                            i\n+                    }\n+            );\n+        }\n+        return testParameters;\n@@ -80,0 +84,2 @@\n+    private final int mapSize;\n+\n@@ -83,1 +89,2 @@\n-            Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap\n+            Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap,\n+            int mapSize\n@@ -88,0 +95,1 @@\n+        this.mapSize = mapSize;\n@@ -90,2 +98,2 @@\n-    public static void fill12(Map<Object, Object> map) {\n-        for (int i = 0; i < 12; i++) {\n+    public static void fillN(int mapSize, Map<Object, Object> map) {\n+        for (int i = 0; i < mapSize; i++) {\n@@ -96,1 +104,2 @@\n-    public static int getArrayLength(Map<Object, Object> map) throws NoSuchFieldException, IllegalAccessException {\n+    public static int getArrayLength(Map<Object, Object> map) throws\n+            NoSuchFieldException, IllegalAccessException {\n@@ -107,11 +116,2 @@\n-        fill12(a);\n-\n-        {\n-            int length = getArrayLength(a);\n-            Assert.assertEquals(\n-                    \"length a not equals to 16\",\n-                    16,\n-                    length\n-            );\n-        }\n-\n+        fillN(mapSize, a);\n+        int lengthA = getArrayLength(a);\n@@ -119,2 +119,2 @@\n-            Map<Object, Object> b = createNewMapWithInt.apply(12);\n-            fill12(b);\n+            Map<Object, Object> b = createNewMapWithInt.apply(mapSize);\n+            fillN(mapSize, b);\n@@ -124,1 +124,1 @@\n-                    16,\n+                    lengthA,\n@@ -134,1 +134,1 @@\n-                    16,\n+                    lengthA,\n@@ -145,1 +145,1 @@\n-                    16,\n+                    lengthA,\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"}]}