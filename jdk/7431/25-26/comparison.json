{"files":[{"patch":"@@ -1,53 +1,53 @@\n-\/*\r\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-import org.testng.annotations.Test;\r\n-\r\n-import static org.testng.Assert.assertEquals;\r\n-\r\n-\/*\r\n- * @test\r\n- * @bug 8210280\r\n- * @modules java.base\/java.util:open\r\n- * @summary White box test for HashMap tableSizeFor function\r\n- * @run testng WhiteBoxHashMapTableSizeForTest\r\n- *\/\r\n-public class WhiteBoxHashMapTableSizeForTest {\r\n-\r\n-    @Test\r\n-    public void testTableSizeFor() {\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(0), 1);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(1), 1);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(2), 2);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(3), 4);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(15), 16);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(16), 16);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(17), 32);\r\n-        int maxSize = 1 << 30;\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize - 1), maxSize);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize), maxSize);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize + 1), maxSize);\r\n-        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(Integer.MAX_VALUE), maxSize);\r\n-    }\r\n-\r\n-}\r\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8210280\n+ * @modules java.base\/java.util:open\n+ * @summary White box test for HashMap tableSizeFor function\n+ * @run testng WhiteBoxHashMapTableSizeForTest\n+ *\/\n+public class WhiteBoxHashMapTableSizeForTest {\n+\n+    @Test\n+    public void testTableSizeFor() {\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(0), 1);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(1), 1);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(2), 2);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(3), 4);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(15), 16);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(16), 16);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(17), 32);\n+        int maxSize = 1 << 30;\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize - 1), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize + 1), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(Integer.MAX_VALUE), maxSize);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapTableSizeForTest.java","additions":53,"deletions":53,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -1,170 +1,170 @@\n-\/*\r\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-import java.lang.invoke.MethodHandle;\r\n-import java.lang.invoke.MethodHandles;\r\n-import java.lang.invoke.MethodType;\r\n-import java.lang.reflect.Array;\r\n-import java.lang.reflect.Field;\r\n-import java.util.HashMap;\r\n-import java.util.LinkedHashMap;\r\n-import java.util.Map;\r\n-import java.util.Objects;\r\n-import java.util.WeakHashMap;\r\n-import java.util.function.BiFunction;\r\n-import java.util.function.Function;\r\n-import java.util.function.Supplier;\r\n-\r\n-public class WhiteBoxHashMapTestUtil {\r\n-\r\n-    private static final MethodHandle TABLE_SIZE_FOR;\r\n-\r\n-    static {\r\n-        try {\r\n-            Class<?> mClass = HashMap.class;\r\n-            MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(mClass, MethodHandles.lookup());\r\n-            TABLE_SIZE_FOR = lookup.findStatic(\r\n-                    mClass, \"tableSizeFor\",\r\n-                    MethodType.methodType(int.class, int.class));\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(\"WhiteBoxHashMapTableSizeForTest init failed\", e);\r\n-        }\r\n-    }\r\n-\r\n-    static int tableSizeFor(int n) {\r\n-        try {\r\n-            return (int) TABLE_SIZE_FOR.invoke(n);\r\n-        } catch (Throwable t) {\r\n-            throw new AssertionError(t);\r\n-        }\r\n-    }\r\n-\r\n-    static int getArrayLength(Map<?, ?> map) {\r\n-        Field field = null;\r\n-        Class<?> mapClass = map.getClass();\r\n-        while (!Map.class.equals(mapClass)) {\r\n-            try {\r\n-                field = mapClass.getDeclaredField(\"table\");\r\n-                break;\r\n-            } catch (NoSuchFieldException ignored) {\r\n-            }\r\n-            mapClass = mapClass.getSuperclass();\r\n-        }\r\n-        Objects.requireNonNull(field);\r\n-        field.setAccessible(true);\r\n-        Object table = null;\r\n-        try {\r\n-            table = field.get(map);\r\n-        } catch (IllegalAccessException e) {\r\n-            throw new RuntimeException(\"cannot get table for map \" + map.getClass().getName(), e);\r\n-        }\r\n-        if (table == null) {\r\n-            return -1;\r\n-        }\r\n-        return Array.getLength(table);\r\n-    }\r\n-\r\n-    static class WhiteBoxHashMapTestSuite<T extends Map> {\r\n-\r\n-        private final Class<T> mapClass;\r\n-\r\n-        private final Function<T, Integer> getArrayLength;\r\n-\r\n-        private final Supplier<T> createNewMap;\r\n-\r\n-        private final Function<Integer, T> createNewMapWithCapacity;\r\n-\r\n-        private final BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor;\r\n-\r\n-        private final Function<Map, T> createNewMapWithMap;\r\n-\r\n-        public WhiteBoxHashMapTestSuite(\r\n-                Class<T> mapClass,\r\n-                Function<T, Integer> getArrayLength,\r\n-                Supplier<T> createNewMap,\r\n-                BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor,\r\n-                Function<Integer, T> createNewMapWithCapacity,\r\n-                Function<Map, T> createNewMapWithMap\r\n-        ) {\r\n-            this.mapClass = mapClass;\r\n-            this.getArrayLength = getArrayLength;\r\n-            this.createNewMap = createNewMap;\r\n-            this.createNewMapWithCapacityAndFactor = createNewMapWithCapacityAndFactor;\r\n-            this.createNewMapWithCapacity = createNewMapWithCapacity;\r\n-            this.createNewMapWithMap = createNewMapWithMap;\r\n-        }\r\n-\r\n-        public Class<T> getMapClass() {\r\n-            return mapClass;\r\n-        }\r\n-\r\n-        public Function<T, Integer> getGetArrayLength() {\r\n-            return getArrayLength;\r\n-        }\r\n-\r\n-        public Supplier<T> getCreateNewMap() {\r\n-            return createNewMap;\r\n-        }\r\n-\r\n-        public Function<Integer, T> getCreateNewMapWithCapacity() {\r\n-            return createNewMapWithCapacity;\r\n-        }\r\n-\r\n-        public BiFunction<Integer, Float, T> getCreateNewMapWithCapacityAndFactor() {\r\n-            return createNewMapWithCapacityAndFactor;\r\n-        }\r\n-\r\n-        public Function<Map, T> getCreateNewMapWithMap() {\r\n-            return createNewMapWithMap;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    static WhiteBoxHashMapTestSuite<HashMap> HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\r\n-            HashMap.class,\r\n-            WhiteBoxHashMapTestUtil::getArrayLength,\r\n-            HashMap::new,\r\n-            HashMap::new,\r\n-            HashMap::new,\r\n-            HashMap::new\r\n-    );\r\n-\r\n-    static WhiteBoxHashMapTestSuite<LinkedHashMap> LINKED_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\r\n-            LinkedHashMap.class,\r\n-            WhiteBoxHashMapTestUtil::getArrayLength,\r\n-            LinkedHashMap::new,\r\n-            LinkedHashMap::new,\r\n-            LinkedHashMap::new,\r\n-            LinkedHashMap::new\r\n-    );\r\n-\r\n-    static WhiteBoxHashMapTestSuite<WeakHashMap> WEAK_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\r\n-            WeakHashMap.class,\r\n-            WhiteBoxHashMapTestUtil::getArrayLength,\r\n-            WeakHashMap::new,\r\n-            WeakHashMap::new,\r\n-            WeakHashMap::new,\r\n-            WeakHashMap::new\r\n-    );\r\n-\r\n-}\r\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.WeakHashMap;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class WhiteBoxHashMapTestUtil {\n+\n+    private static final MethodHandle TABLE_SIZE_FOR;\n+\n+    static {\n+        try {\n+            Class<?> mClass = HashMap.class;\n+            MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(mClass, MethodHandles.lookup());\n+            TABLE_SIZE_FOR = lookup.findStatic(\n+                    mClass, \"tableSizeFor\",\n+                    MethodType.methodType(int.class, int.class));\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"WhiteBoxHashMapTableSizeForTest init failed\", e);\n+        }\n+    }\n+\n+    static int tableSizeFor(int n) {\n+        try {\n+            return (int) TABLE_SIZE_FOR.invoke(n);\n+        } catch (Throwable t) {\n+            throw new AssertionError(t);\n+        }\n+    }\n+\n+    static int getArrayLength(Map<?, ?> map) {\n+        Field field = null;\n+        Class<?> mapClass = map.getClass();\n+        while (!Map.class.equals(mapClass)) {\n+            try {\n+                field = mapClass.getDeclaredField(\"table\");\n+                break;\n+            } catch (NoSuchFieldException ignored) {\n+            }\n+            mapClass = mapClass.getSuperclass();\n+        }\n+        Objects.requireNonNull(field);\n+        field.setAccessible(true);\n+        Object table = null;\n+        try {\n+            table = field.get(map);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"cannot get table for map \" + map.getClass().getName(), e);\n+        }\n+        if (table == null) {\n+            return -1;\n+        }\n+        return Array.getLength(table);\n+    }\n+\n+    static class WhiteBoxHashMapTestSuite<T extends Map> {\n+\n+        private final Class<T> mapClass;\n+\n+        private final Function<T, Integer> getArrayLength;\n+\n+        private final Supplier<T> createNewMap;\n+\n+        private final Function<Integer, T> createNewMapWithCapacity;\n+\n+        private final BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor;\n+\n+        private final Function<Map, T> createNewMapWithMap;\n+\n+        public WhiteBoxHashMapTestSuite(\n+                Class<T> mapClass,\n+                Function<T, Integer> getArrayLength,\n+                Supplier<T> createNewMap,\n+                BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor,\n+                Function<Integer, T> createNewMapWithCapacity,\n+                Function<Map, T> createNewMapWithMap\n+        ) {\n+            this.mapClass = mapClass;\n+            this.getArrayLength = getArrayLength;\n+            this.createNewMap = createNewMap;\n+            this.createNewMapWithCapacityAndFactor = createNewMapWithCapacityAndFactor;\n+            this.createNewMapWithCapacity = createNewMapWithCapacity;\n+            this.createNewMapWithMap = createNewMapWithMap;\n+        }\n+\n+        public Class<T> getMapClass() {\n+            return mapClass;\n+        }\n+\n+        public Function<T, Integer> getGetArrayLength() {\n+            return getArrayLength;\n+        }\n+\n+        public Supplier<T> getCreateNewMap() {\n+            return createNewMap;\n+        }\n+\n+        public Function<Integer, T> getCreateNewMapWithCapacity() {\n+            return createNewMapWithCapacity;\n+        }\n+\n+        public BiFunction<Integer, Float, T> getCreateNewMapWithCapacityAndFactor() {\n+            return createNewMapWithCapacityAndFactor;\n+        }\n+\n+        public Function<Map, T> getCreateNewMapWithMap() {\n+            return createNewMapWithMap;\n+        }\n+\n+    }\n+\n+    static WhiteBoxHashMapTestSuite<HashMap> HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            HashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            HashMap::new,\n+            HashMap::new,\n+            HashMap::new,\n+            HashMap::new\n+    );\n+\n+    static WhiteBoxHashMapTestSuite<LinkedHashMap> LINKED_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            LinkedHashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new\n+    );\n+\n+    static WhiteBoxHashMapTestSuite<WeakHashMap> WEAK_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            WeakHashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            WeakHashMap::new,\n+            WeakHashMap::new,\n+            WeakHashMap::new,\n+            WeakHashMap::new\n+    );\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapTestUtil.java","additions":170,"deletions":170,"binary":false,"changes":340,"status":"modified"}]}