{"files":[{"patch":"@@ -58,36 +58,3 @@\n-    static class KeyStructure {\n-\n-        int value;\n-\n-        public KeyStructure(int value) {\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return this.value;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o)\n-                return true;\n-            if (o == null || getClass() != o.getClass())\n-                return false;\n-            KeyStructure that = (KeyStructure) o;\n-            return value == that.value;\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-\n-        public void setValue(int value) {\n-            this.value = value;\n-        }\n-\n-    }\n-\n-    private static void putMap(Map<KeyStructure, KeyStructure> map, int i) {\n-        KeyStructure keyStructure = new KeyStructure(i);\n-        map.put(keyStructure, keyStructure);\n+    private static void putMap(Map<String, String> map, int i) {\n+        String String = Integer.toString(i);\n+        map.put(String, String);\n@@ -136,2 +103,2 @@\n-    Map<KeyStructure, KeyStructure> makeMap(int size) {\n-        Map<KeyStructure, KeyStructure> map = new HashMap<>();\n+    Map<String, String> makeMap(int size) {\n+        Map<String, String> map = new HashMap<>();\n@@ -146,1 +113,1 @@\n-    Map<KeyStructure, KeyStructure> fakeMap(int size) {\n+    Map<String, String> fakeMap(int size) {\n@@ -148,2 +115,2 @@\n-            public Set<Map.Entry<KeyStructure, KeyStructure>> entrySet() {\n-                return new AbstractSet<Map.Entry<KeyStructure, KeyStructure>>() {\n+            public Set<Map.Entry<String, String>> entrySet() {\n+                return new AbstractSet<Map.Entry<String, String>>() {\n@@ -154,3 +121,2 @@\n-                    public Iterator<Map.Entry<KeyStructure, KeyStructure>> iterator() {\n-                        KeyStructure keyStructure = new KeyStructure(1);\n-                        return Set.of(Map.entry(keyStructure, keyStructure)).iterator();\n+                    public Iterator<Map.Entry<String, String>> iterator() {\n+                        return Set.of(Map.entry(\"1\", \"1\")).iterator();\n@@ -163,1 +129,1 @@\n-    void putN(Map<KeyStructure, KeyStructure> map, int n) {\n+    void putN(Map<String, String> map, int n) {\n@@ -178,1 +144,0 @@\n-                {0, 1},\n@@ -350,2 +315,2 @@\n-    public void defaultCapacity(Supplier<Map<KeyStructure, KeyStructure>> s) {\n-        Map<KeyStructure, KeyStructure> map = s.get();\n+    public void defaultCapacity(Supplier<Map<String, String>> s) {\n+        Map<String, String> map = s.get();\n@@ -365,6 +330,6 @@\n-            cases.add(new Object[]{\"rhm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new HashMap<>(cap)});\n-            cases.add(new Object[]{\"rhm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new HashMap<>(cap, 0.75f)});\n-            cases.add(new Object[]{\"rlm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new LinkedHashMap<>(cap)});\n-            cases.add(new Object[]{\"rlm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new LinkedHashMap<>(cap, 0.75f)});\n-            cases.add(new Object[]{\"rwm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new WeakHashMap<>(cap)});\n-            cases.add(new Object[]{\"rwm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new WeakHashMap<>(cap, 0.75f)});\n+            cases.add(new Object[]{\"rhm1\", cap, (Supplier<Map<String, String>>) () -> new HashMap<>(cap)});\n+            cases.add(new Object[]{\"rhm2\", cap, (Supplier<Map<String, String>>) () -> new HashMap<>(cap, 0.75f)});\n+            cases.add(new Object[]{\"rlm1\", cap, (Supplier<Map<String, String>>) () -> new LinkedHashMap<>(cap)});\n+            cases.add(new Object[]{\"rlm2\", cap, (Supplier<Map<String, String>>) () -> new LinkedHashMap<>(cap, 0.75f)});\n+            cases.add(new Object[]{\"rwm1\", cap, (Supplier<Map<String, String>>) () -> new WeakHashMap<>(cap)});\n+            cases.add(new Object[]{\"rwm2\", cap, (Supplier<Map<String, String>>) () -> new WeakHashMap<>(cap, 0.75f)});\n@@ -376,2 +341,2 @@\n-    public void requestedCapacity(String label, int cap, Supplier<Map<KeyStructure, KeyStructure>> s) {\n-        Map<KeyStructure, KeyStructure> map = s.get();\n+    public void requestedCapacity(String label, int cap, Supplier<Map<String, String>> s) {\n+        Map<String, String> map = s.get();\n@@ -396,2 +361,2 @@\n-                 Supplier<Map<KeyStructure, KeyStructure>> supplier,\n-                 Consumer<Map<KeyStructure, KeyStructure>> consumer) {\n+                 Supplier<Map<String, String>> supplier,\n+                 Consumer<Map<String, String>> consumer) {\n@@ -512,17 +477,1 @@\n-        cases.addAll(genPopulatedCapacityCases(0, 1));\n-        cases.addAll(genPopulatedCapacityCases(1, 1));\n-        cases.addAll(genPopulatedCapacityCases(2, 2));\n-        cases.addAll(genPopulatedCapacityCases(3, 4));\n-        cases.addAll(genPopulatedCapacityCases(4, 4));\n-        cases.addAll(genPopulatedCapacityCases(5, 8));\n-        cases.addAll(genPopulatedCapacityCases(6, 8));\n-        cases.addAll(genPopulatedCapacityCases(7, 8));\n-        cases.addAll(genPopulatedCapacityCases(8, 8));\n-        cases.addAll(genPopulatedCapacityCases(9, 16));\n-        cases.addAll(genPopulatedCapacityCases(10, 16));\n-        cases.addAll(genPopulatedCapacityCases(11, 16));\n-        cases.addAll(genPopulatedCapacityCases(12, 16));\n-        cases.addAll(genPopulatedCapacityCases(13, 16));\n-        cases.addAll(genPopulatedCapacityCases(14, 16));\n-        cases.addAll(genPopulatedCapacityCases(15, 16));\n-        cases.addAll(genPopulatedCapacityCases(16, 16));\n+        cases.addAll(genPopulatedCapacityCases(16, 32));\n@@ -537,8 +486,8 @@\n-        cases.addAll(genPopulatedCapacityCases(25, 32));\n-        cases.addAll(genPopulatedCapacityCases(26, 32));\n-        cases.addAll(genPopulatedCapacityCases(27, 32));\n-        cases.addAll(genPopulatedCapacityCases(28, 32));\n-        cases.addAll(genPopulatedCapacityCases(29, 32));\n-        cases.addAll(genPopulatedCapacityCases(30, 32));\n-        cases.addAll(genPopulatedCapacityCases(31, 32));\n-        cases.addAll(genPopulatedCapacityCases(32, 32));\n+        cases.addAll(genPopulatedCapacityCases(25, 64));\n+        cases.addAll(genPopulatedCapacityCases(26, 64));\n+        cases.addAll(genPopulatedCapacityCases(27, 64));\n+        cases.addAll(genPopulatedCapacityCases(28, 64));\n+        cases.addAll(genPopulatedCapacityCases(29, 64));\n+        cases.addAll(genPopulatedCapacityCases(30, 64));\n+        cases.addAll(genPopulatedCapacityCases(31, 64));\n+        cases.addAll(genPopulatedCapacityCases(32, 64));\n@@ -561,16 +510,16 @@\n-        cases.addAll(genPopulatedCapacityCases(49, 64));\n-        cases.addAll(genPopulatedCapacityCases(50, 64));\n-        cases.addAll(genPopulatedCapacityCases(51, 64));\n-        cases.addAll(genPopulatedCapacityCases(52, 64));\n-        cases.addAll(genPopulatedCapacityCases(53, 64));\n-        cases.addAll(genPopulatedCapacityCases(54, 64));\n-        cases.addAll(genPopulatedCapacityCases(55, 64));\n-        cases.addAll(genPopulatedCapacityCases(56, 64));\n-        cases.addAll(genPopulatedCapacityCases(57, 64));\n-        cases.addAll(genPopulatedCapacityCases(58, 64));\n-        cases.addAll(genPopulatedCapacityCases(59, 64));\n-        cases.addAll(genPopulatedCapacityCases(60, 64));\n-        cases.addAll(genPopulatedCapacityCases(61, 64));\n-        cases.addAll(genPopulatedCapacityCases(62, 64));\n-        cases.addAll(genPopulatedCapacityCases(63, 64));\n-        cases.addAll(genPopulatedCapacityCases(64, 64));\n+        cases.addAll(genPopulatedCapacityCases(49, 128));\n+        cases.addAll(genPopulatedCapacityCases(50, 128));\n+        cases.addAll(genPopulatedCapacityCases(51, 128));\n+        cases.addAll(genPopulatedCapacityCases(52, 128));\n+        cases.addAll(genPopulatedCapacityCases(53, 128));\n+        cases.addAll(genPopulatedCapacityCases(54, 128));\n+        cases.addAll(genPopulatedCapacityCases(55, 128));\n+        cases.addAll(genPopulatedCapacityCases(56, 128));\n+        cases.addAll(genPopulatedCapacityCases(57, 128));\n+        cases.addAll(genPopulatedCapacityCases(58, 128));\n+        cases.addAll(genPopulatedCapacityCases(59, 128));\n+        cases.addAll(genPopulatedCapacityCases(60, 128));\n+        cases.addAll(genPopulatedCapacityCases(61, 128));\n+        cases.addAll(genPopulatedCapacityCases(62, 128));\n+        cases.addAll(genPopulatedCapacityCases(63, 128));\n+        cases.addAll(genPopulatedCapacityCases(64, 128));\n@@ -609,31 +558,31 @@\n-        cases.addAll(genPopulatedCapacityCases(97, 128));\n-        cases.addAll(genPopulatedCapacityCases(98, 128));\n-        cases.addAll(genPopulatedCapacityCases(99, 128));\n-        cases.addAll(genPopulatedCapacityCases(100, 128));\n-        cases.addAll(genPopulatedCapacityCases(101, 128));\n-        cases.addAll(genPopulatedCapacityCases(102, 128));\n-        cases.addAll(genPopulatedCapacityCases(103, 128));\n-        cases.addAll(genPopulatedCapacityCases(104, 128));\n-        cases.addAll(genPopulatedCapacityCases(105, 128));\n-        cases.addAll(genPopulatedCapacityCases(106, 128));\n-        cases.addAll(genPopulatedCapacityCases(107, 128));\n-        cases.addAll(genPopulatedCapacityCases(108, 128));\n-        cases.addAll(genPopulatedCapacityCases(109, 128));\n-        cases.addAll(genPopulatedCapacityCases(110, 128));\n-        cases.addAll(genPopulatedCapacityCases(111, 128));\n-        cases.addAll(genPopulatedCapacityCases(112, 128));\n-        cases.addAll(genPopulatedCapacityCases(113, 128));\n-        cases.addAll(genPopulatedCapacityCases(114, 128));\n-        cases.addAll(genPopulatedCapacityCases(115, 128));\n-        cases.addAll(genPopulatedCapacityCases(116, 128));\n-        cases.addAll(genPopulatedCapacityCases(117, 128));\n-        cases.addAll(genPopulatedCapacityCases(118, 128));\n-        cases.addAll(genPopulatedCapacityCases(119, 128));\n-        cases.addAll(genPopulatedCapacityCases(120, 128));\n-        cases.addAll(genPopulatedCapacityCases(121, 128));\n-        cases.addAll(genPopulatedCapacityCases(122, 128));\n-        cases.addAll(genPopulatedCapacityCases(123, 128));\n-        cases.addAll(genPopulatedCapacityCases(124, 128));\n-        cases.addAll(genPopulatedCapacityCases(125, 128));\n-        cases.addAll(genPopulatedCapacityCases(126, 128));\n-        cases.addAll(genPopulatedCapacityCases(127, 128));\n+        cases.addAll(genPopulatedCapacityCases(97, 256));\n+        cases.addAll(genPopulatedCapacityCases(98, 256));\n+        cases.addAll(genPopulatedCapacityCases(99, 256));\n+        cases.addAll(genPopulatedCapacityCases(100, 256));\n+        cases.addAll(genPopulatedCapacityCases(101, 256));\n+        cases.addAll(genPopulatedCapacityCases(102, 256));\n+        cases.addAll(genPopulatedCapacityCases(103, 256));\n+        cases.addAll(genPopulatedCapacityCases(104, 256));\n+        cases.addAll(genPopulatedCapacityCases(105, 256));\n+        cases.addAll(genPopulatedCapacityCases(106, 256));\n+        cases.addAll(genPopulatedCapacityCases(107, 256));\n+        cases.addAll(genPopulatedCapacityCases(108, 256));\n+        cases.addAll(genPopulatedCapacityCases(109, 256));\n+        cases.addAll(genPopulatedCapacityCases(110, 256));\n+        cases.addAll(genPopulatedCapacityCases(111, 256));\n+        cases.addAll(genPopulatedCapacityCases(112, 256));\n+        cases.addAll(genPopulatedCapacityCases(113, 256));\n+        cases.addAll(genPopulatedCapacityCases(114, 256));\n+        cases.addAll(genPopulatedCapacityCases(115, 256));\n+        cases.addAll(genPopulatedCapacityCases(116, 256));\n+        cases.addAll(genPopulatedCapacityCases(117, 256));\n+        cases.addAll(genPopulatedCapacityCases(118, 256));\n+        cases.addAll(genPopulatedCapacityCases(119, 256));\n+        cases.addAll(genPopulatedCapacityCases(120, 256));\n+        cases.addAll(genPopulatedCapacityCases(121, 256));\n+        cases.addAll(genPopulatedCapacityCases(122, 256));\n+        cases.addAll(genPopulatedCapacityCases(123, 256));\n+        cases.addAll(genPopulatedCapacityCases(124, 256));\n+        cases.addAll(genPopulatedCapacityCases(125, 256));\n+        cases.addAll(genPopulatedCapacityCases(126, 256));\n+        cases.addAll(genPopulatedCapacityCases(127, 256));\n@@ -654,3 +603,3 @@\n-                                  Supplier<Map<KeyStructure, KeyStructure>> s,\n-                                  Consumer<Map<KeyStructure, KeyStructure>> c) {\n-        Map<KeyStructure, KeyStructure> map = s.get();\n+                                  Supplier<Map<String, String>> s,\n+                                  Consumer<Map<String, String>> c) {\n+        Map<String, String> map = s.get();\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":82,"deletions":133,"binary":false,"changes":215,"status":"modified"}]}