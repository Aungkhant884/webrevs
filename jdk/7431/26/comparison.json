{"files":[{"patch":"@@ -498,3 +498,3 @@\n-                float ft = ((float)s \/ loadFactor) + 1.0F;\n-                int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n-                         (int)ft : MAXIMUM_CAPACITY);\n+                double dt = Math.ceil(s \/ (double)loadFactor);\n+                int t = ((dt < (double)MAXIMUM_CAPACITY) ?\n+                         (int)dt : MAXIMUM_CAPACITY);\n@@ -1530,2 +1530,2 @@\n-            float fc = (float)mappings \/ lf + 1.0f;\n-            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n+            double dc = Math.ceil(mappings \/ (double)lf);\n+            int cap = ((dc < DEFAULT_INITIAL_CAPACITY) ?\n@@ -1533,1 +1533,1 @@\n-                       (fc >= MAXIMUM_CAPACITY) ?\n+                       (dc >= MAXIMUM_CAPACITY) ?\n@@ -1535,1 +1535,1 @@\n-                       tableSizeFor((int)fc));\n+                       tableSizeFor((int)dc));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,3 +216,1 @@\n-        int capacity = 1;\n-        while (capacity < initialCapacity)\n-            capacity <<= 1;\n+        int capacity = HashMap.tableSizeFor(initialCapacity);\n@@ -254,1 +252,1 @@\n-        this(Math.max((int) ((float)m.size() \/ DEFAULT_LOAD_FACTOR + 1.0F),\n+        this(Math.max((int) Math.ceil(m.size() \/ (double)DEFAULT_LOAD_FACTOR),\n@@ -471,1 +469,1 @@\n-        if (++size >= threshold)\n+        if (++size > threshold)\n@@ -560,1 +558,1 @@\n-            int targetCapacity = (int)(numKeysToBeAdded \/ loadFactor + 1);\n+            int targetCapacity = (int)Math.ceil(numKeysToBeAdded \/ (double)loadFactor);\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -545,0 +545,1 @@\n+java\/lang\/Enum\/ConstantDirectoryOptimalCapacity.java            8282120 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.junit.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8210280\n+ * @summary White box tests for HashMap internals around table resize\n+ *\n+ * @run junit\/othervm\/timeout=1000\n+ *      --add-opens java.base\/java.lang=ALL-UNNAMED\n+ *      --add-opens java.base\/java.util=ALL-UNNAMED\n+ *      WhiteBoxHashMapDefaultConstructorCapacityTest\n+ *\/\n+@RunWith(Parameterized.class)\n+public class WhiteBoxHashMapDefaultConstructorCapacityTest<T extends Map> {\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> testFunctionsList() {\n+        return List.of(\n+                new Object[]{WhiteBoxHashMapTestUtil.HASH_MAP_TEST_SUITE},\n+                new Object[]{WhiteBoxHashMapTestUtil.LINKED_HASH_MAP_TEST_SUITE}\n+        );\n+    }\n+\n+    private final WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite;\n+\n+    public WhiteBoxHashMapDefaultConstructorCapacityTest(\n+            WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite\n+    ) {\n+        this.whiteBoxHashMapTestSuite = whiteBoxHashMapTestSuite;\n+    }\n+\n+    @Test\n+    public void capacityTestDefaultConstructor() {\n+        T map = whiteBoxHashMapTestSuite.getCreateNewMap().get();\n+        assertEquals(-1, (int) whiteBoxHashMapTestSuite.getGetArrayLength().apply(map));\n+\n+        map.put(1, 1);\n+        assertEquals(16, (int) whiteBoxHashMapTestSuite.getGetArrayLength().apply(map)); \/\/ default initial capacity\n+\n+        map.putAll(IntStream.range(0, 64).boxed().collect(toMap(i -> i, i -> i)));\n+        assertEquals(128, (int) whiteBoxHashMapTestSuite.getGetArrayLength().apply(map));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapDefaultConstructorCapacityTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8210280\n+ * @summary White box tests for hashMap Initial capacity\n+ *\n+ * @run junit\/othervm\/timeout=1000\n+ *      --add-opens java.base\/java.lang=ALL-UNNAMED\n+ *      --add-opens java.base\/java.util=ALL-UNNAMED\n+ *      WhiteBoxHashMapInitialCapacityTest\n+ *\/\n+@RunWith(Parameterized.class)\n+public class WhiteBoxHashMapInitialCapacityTest<T extends Map> {\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> testFunctionsList() {\n+        return List.of(\n+                new Object[]{WhiteBoxHashMapTestUtil.HASH_MAP_TEST_SUITE},\n+                new Object[]{WhiteBoxHashMapTestUtil.LINKED_HASH_MAP_TEST_SUITE}\n+        );\n+    }\n+\n+    private final WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite;\n+\n+    public WhiteBoxHashMapInitialCapacityTest(\n+            WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite\n+    ) {\n+        this.whiteBoxHashMapTestSuite = whiteBoxHashMapTestSuite;\n+    }\n+\n+    @Test\n+    public void capacityTestInitialCapacity() {\n+        int initialCapacity = ThreadLocalRandom.current().nextInt(2, 128);\n+        capacityTestInitialCapacitySingleMap(\n+                whiteBoxHashMapTestSuite.getCreateNewMapWithCapacity().apply(initialCapacity),\n+                initialCapacity\n+        );\n+        capacityTestInitialCapacitySingleMap(\n+                whiteBoxHashMapTestSuite.getCreateNewMapWithCapacityAndFactor().apply(initialCapacity, 0.75F),\n+                initialCapacity\n+        );\n+    }\n+\n+    public void capacityTestInitialCapacitySingleMap(\n+            T map,\n+            int initialCapacity\n+    ) {\n+        assertEquals(-1, (int) whiteBoxHashMapTestSuite.getGetArrayLength().apply(map));\n+        map.put(1, 1);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(initialCapacity), (int) whiteBoxHashMapTestSuite.getGetArrayLength().apply(map));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapInitialCapacityTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 8210280\n+ * @modules java.base\/java.util:open\n+ * @summary White box test for HashMap tableSizeFor function\n+ * @run testng WhiteBoxHashMapTableSizeForTest\n+ *\/\n+public class WhiteBoxHashMapTableSizeForTest {\n+\n+    @Test\n+    public void testTableSizeFor() {\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(0), 1);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(1), 1);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(2), 2);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(3), 4);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(15), 16);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(16), 16);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(17), 32);\n+        int maxSize = 1 << 30;\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize - 1), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(maxSize + 1), maxSize);\n+        assertEquals(WhiteBoxHashMapTestUtil.tableSizeFor(Integer.MAX_VALUE), maxSize);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapTableSizeForTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.WeakHashMap;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class WhiteBoxHashMapTestUtil {\n+\n+    private static final MethodHandle TABLE_SIZE_FOR;\n+\n+    static {\n+        try {\n+            Class<?> mClass = HashMap.class;\n+            MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(mClass, MethodHandles.lookup());\n+            TABLE_SIZE_FOR = lookup.findStatic(\n+                    mClass, \"tableSizeFor\",\n+                    MethodType.methodType(int.class, int.class));\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"WhiteBoxHashMapTableSizeForTest init failed\", e);\n+        }\n+    }\n+\n+    static int tableSizeFor(int n) {\n+        try {\n+            return (int) TABLE_SIZE_FOR.invoke(n);\n+        } catch (Throwable t) {\n+            throw new AssertionError(t);\n+        }\n+    }\n+\n+    static int getArrayLength(Map<?, ?> map) {\n+        Field field = null;\n+        Class<?> mapClass = map.getClass();\n+        while (!Map.class.equals(mapClass)) {\n+            try {\n+                field = mapClass.getDeclaredField(\"table\");\n+                break;\n+            } catch (NoSuchFieldException ignored) {\n+            }\n+            mapClass = mapClass.getSuperclass();\n+        }\n+        Objects.requireNonNull(field);\n+        field.setAccessible(true);\n+        Object table = null;\n+        try {\n+            table = field.get(map);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"cannot get table for map \" + map.getClass().getName(), e);\n+        }\n+        if (table == null) {\n+            return -1;\n+        }\n+        return Array.getLength(table);\n+    }\n+\n+    static class WhiteBoxHashMapTestSuite<T extends Map> {\n+\n+        private final Class<T> mapClass;\n+\n+        private final Function<T, Integer> getArrayLength;\n+\n+        private final Supplier<T> createNewMap;\n+\n+        private final Function<Integer, T> createNewMapWithCapacity;\n+\n+        private final BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor;\n+\n+        private final Function<Map, T> createNewMapWithMap;\n+\n+        public WhiteBoxHashMapTestSuite(\n+                Class<T> mapClass,\n+                Function<T, Integer> getArrayLength,\n+                Supplier<T> createNewMap,\n+                BiFunction<Integer, Float, T> createNewMapWithCapacityAndFactor,\n+                Function<Integer, T> createNewMapWithCapacity,\n+                Function<Map, T> createNewMapWithMap\n+        ) {\n+            this.mapClass = mapClass;\n+            this.getArrayLength = getArrayLength;\n+            this.createNewMap = createNewMap;\n+            this.createNewMapWithCapacityAndFactor = createNewMapWithCapacityAndFactor;\n+            this.createNewMapWithCapacity = createNewMapWithCapacity;\n+            this.createNewMapWithMap = createNewMapWithMap;\n+        }\n+\n+        public Class<T> getMapClass() {\n+            return mapClass;\n+        }\n+\n+        public Function<T, Integer> getGetArrayLength() {\n+            return getArrayLength;\n+        }\n+\n+        public Supplier<T> getCreateNewMap() {\n+            return createNewMap;\n+        }\n+\n+        public Function<Integer, T> getCreateNewMapWithCapacity() {\n+            return createNewMapWithCapacity;\n+        }\n+\n+        public BiFunction<Integer, Float, T> getCreateNewMapWithCapacityAndFactor() {\n+            return createNewMapWithCapacityAndFactor;\n+        }\n+\n+        public Function<Map, T> getCreateNewMapWithMap() {\n+            return createNewMapWithMap;\n+        }\n+\n+    }\n+\n+    static WhiteBoxHashMapTestSuite<HashMap> HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            HashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            HashMap::new,\n+            HashMap::new,\n+            HashMap::new,\n+            HashMap::new\n+    );\n+\n+    static WhiteBoxHashMapTestSuite<LinkedHashMap> LINKED_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            LinkedHashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new,\n+            LinkedHashMap::new\n+    );\n+\n+    static WhiteBoxHashMapTestSuite<WeakHashMap> WEAK_HASH_MAP_TEST_SUITE = new WhiteBoxHashMapTestSuite<>(\n+            WeakHashMap.class,\n+            WhiteBoxHashMapTestUtil::getArrayLength,\n+            WeakHashMap::new,\n+            WeakHashMap::new,\n+            WeakHashMap::new,\n+            WeakHashMap::new\n+    );\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapTestUtil.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+\/*\n+ * @test\n+ * @bug 8281631\n+ * @summary HashMap copy constructor and putAll can over-allocate table\n+ * @author  Xeno Amess\n+ *\n+ * @run junit\/othervm\/timeout=1000\n+ *      --add-opens java.base\/java.lang=ALL-UNNAMED\n+ *      --add-opens java.base\/java.util=ALL-UNNAMED\n+ *      WhiteBoxHashMapsPutAllOverAllocateTableTest\n+ *\/\n+@RunWith(Parameterized.class)\n+public class WhiteBoxHashMapsPutAllOverAllocateTableTest<T extends Map> {\n+\n+    private static final int TEST_SIZE = 128;\n+    private static final Integer[] INTEGER_ARRAY = new Integer[TEST_SIZE];\n+\n+    static {\n+        for (int i = 0; i < TEST_SIZE; ++i) {\n+            INTEGER_ARRAY[i] = i;\n+        }\n+    }\n+\n+    private static <T extends Map> Object[] testCase(\n+            WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite,\n+            int mapSize\n+    ) {\n+        return new Object[]{\n+                whiteBoxHashMapTestSuite,\n+                mapSize\n+        };\n+    }\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> testFunctionsList() {\n+        List<Object[]> testParameters = new ArrayList<>(TEST_SIZE * 3);\n+        for (int i = 0; i <= TEST_SIZE; ++i) {\n+            testParameters.add(\n+                    testCase(\n+                            WhiteBoxHashMapTestUtil.HASH_MAP_TEST_SUITE,\n+                            i\n+                    )\n+            );\n+            testParameters.add(\n+                    testCase(\n+                            WhiteBoxHashMapTestUtil.LINKED_HASH_MAP_TEST_SUITE,\n+                            i\n+                    )\n+            );\n+            testParameters.add(\n+                    testCase(\n+                            WhiteBoxHashMapTestUtil.WEAK_HASH_MAP_TEST_SUITE,\n+                            i\n+                    )\n+            );\n+        }\n+        return testParameters;\n+    }\n+\n+    private final WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite;\n+\n+    private final int mapSize;\n+\n+    private final String testName;\n+\n+    public WhiteBoxHashMapsPutAllOverAllocateTableTest(\n+            WhiteBoxHashMapTestUtil.WhiteBoxHashMapTestSuite<T> whiteBoxHashMapTestSuite,\n+            int mapSize\n+    ) {\n+        this.whiteBoxHashMapTestSuite = whiteBoxHashMapTestSuite;\n+        this.mapSize = mapSize;\n+        this.testName = this.whiteBoxHashMapTestSuite.getMapClass().getName();\n+    }\n+\n+    public static void fillN(int mapSize, Map<Object, Object> map) {\n+        for (int i = 0; i < mapSize; i++) {\n+            map.put(INTEGER_ARRAY[i], INTEGER_ARRAY[i]);\n+        }\n+    }\n+\n+    @Test\n+    public void test() throws IllegalAccessException {\n+\n+        T a = whiteBoxHashMapTestSuite.getCreateNewMap().get();\n+        fillN(mapSize, a);\n+        int lengthA = whiteBoxHashMapTestSuite.getGetArrayLength().apply(a);\n+        {\n+            T b = whiteBoxHashMapTestSuite.getCreateNewMapWithCapacity().apply(mapSize);\n+            fillN(mapSize, b);\n+            int length = whiteBoxHashMapTestSuite.getGetArrayLength().apply(b);\n+            Assert.assertTrue(\n+                    testName + \" : \" + \"length b larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+        {\n+            T c = whiteBoxHashMapTestSuite.getCreateNewMapWithMap().apply(a);\n+            int length = whiteBoxHashMapTestSuite.getGetArrayLength().apply(c);\n+            Assert.assertTrue(\n+                    testName + \" : \" + \"length c larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+        {\n+            T d = whiteBoxHashMapTestSuite.getCreateNewMap().get();\n+            d.putAll(a);\n+            int length = whiteBoxHashMapTestSuite.getGetArrayLength().apply(d);\n+            Assert.assertTrue(\n+                    testName + \" : \" + \"length d larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxHashMapsPutAllOverAllocateTableTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.lang.invoke.VarHandle;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.function.Supplier;\n-import java.util.stream.IntStream;\n-\n-import static java.util.stream.Collectors.toMap;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNull;\n-\n-\/*\n- * @test\n- * @bug 8210280\n- * @modules java.base\/java.util:open\n- * @summary White box tests for HashMap internals around table resize\n- * @run testng WhiteBoxResizeTest\n- * @key randomness\n- *\/\n-public class WhiteBoxResizeTest {\n-    final ThreadLocalRandom rnd = ThreadLocalRandom.current();\n-    final MethodHandle TABLE_SIZE_FOR;\n-    final VarHandle THRESHOLD;\n-    final VarHandle TABLE;\n-\n-    public WhiteBoxResizeTest() throws ReflectiveOperationException {\n-        Class<?> mClass = HashMap.class;\n-        String nodeClassName = mClass.getName() + \"$Node\";\n-        Class<?> nodeArrayClass = Class.forName(\"[L\" + nodeClassName + \";\");\n-        MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(mClass, MethodHandles.lookup());\n-        TABLE = lookup.findVarHandle(mClass, \"table\", nodeArrayClass);\n-        this.TABLE_SIZE_FOR = lookup.findStatic(\n-                mClass, \"tableSizeFor\",\n-                MethodType.methodType(int.class, int.class));\n-        this.THRESHOLD = lookup.findVarHandle(mClass, \"threshold\", int.class);\n-    }\n-\n-    int tableSizeFor(int n) {\n-        try {\n-            return (int) TABLE_SIZE_FOR.invoke(n);\n-        } catch (Throwable t) { throw new AssertionError(t); }\n-    }\n-\n-    Object[] table(HashMap map) {\n-        try {\n-            return (Object[]) TABLE.get(map);\n-        } catch (Throwable t) { throw new AssertionError(t); }\n-    }\n-\n-    int capacity(HashMap map) {\n-        return table(map).length;\n-    }\n-\n-    @Test\n-    public void testTableSizeFor() {\n-        assertEquals(tableSizeFor(0), 1);\n-        assertEquals(tableSizeFor(1), 1);\n-        assertEquals(tableSizeFor(2), 2);\n-        assertEquals(tableSizeFor(3), 4);\n-        assertEquals(tableSizeFor(15), 16);\n-        assertEquals(tableSizeFor(16), 16);\n-        assertEquals(tableSizeFor(17), 32);\n-        int maxSize = 1 << 30;\n-        assertEquals(tableSizeFor(maxSize - 1), maxSize);\n-        assertEquals(tableSizeFor(maxSize), maxSize);\n-        assertEquals(tableSizeFor(maxSize + 1), maxSize);\n-        assertEquals(tableSizeFor(Integer.MAX_VALUE), maxSize);\n-    }\n-\n-    @Test\n-    public void capacityTestDefaultConstructor() {\n-        capacityTestDefaultConstructor(new HashMap<>());\n-        capacityTestDefaultConstructor(new LinkedHashMap<>());\n-    }\n-\n-    void capacityTestDefaultConstructor(HashMap<Integer, Integer> map) {\n-        assertNull(table(map));\n-\n-        map.put(1, 1);\n-        assertEquals(capacity(map), 16); \/\/ default initial capacity\n-\n-        map.putAll(IntStream.range(0, 64).boxed().collect(toMap(i -> i, i -> i)));\n-        assertEquals(capacity(map), 128);\n-    }\n-\n-    @Test\n-    public void capacityTestInitialCapacity() {\n-        int initialCapacity = rnd.nextInt(2, 128);\n-        List<Supplier<HashMap<Integer, Integer>>> suppliers = List.of(\n-            () -> new HashMap<>(initialCapacity),\n-            () -> new HashMap<>(initialCapacity, 0.75f),\n-            () -> new LinkedHashMap<>(initialCapacity),\n-            () -> new LinkedHashMap<>(initialCapacity, 0.75f));\n-\n-        for (Supplier<HashMap<Integer, Integer>> supplier : suppliers) {\n-            HashMap<Integer, Integer> map = supplier.get();\n-            assertNull(table(map));\n-\n-            map.put(1, 1);\n-            assertEquals(capacity(map), tableSizeFor(initialCapacity));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"}]}