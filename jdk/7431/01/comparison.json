{"files":[{"patch":"@@ -3903,1 +3903,2 @@\n-            directory = new HashMap<>((int)(universe.length \/ 0.75f) + 1);\n+            final int size = universe.length;\n+            directory = new HashMap<>(size + (size + 2) \/ 3);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -498,3 +498,3 @@\n-                float ft = ((float)s \/ loadFactor) + 1.0F;\n-                int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n-                         (int)ft : MAXIMUM_CAPACITY);\n+                double dt = Math.ceil(s \/ loadFactor);\n+                int t = ((dt < (double)MAXIMUM_CAPACITY) ?\n+                         (int)dt : MAXIMUM_CAPACITY);\n@@ -1530,2 +1530,2 @@\n-            float fc = (float)mappings \/ lf + 1.0f;\n-            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n+            double dc = Math.ceil(mappings \/ lf);\n+            int cap = ((dc < DEFAULT_INITIAL_CAPACITY) ?\n@@ -1533,1 +1533,1 @@\n-                       (fc >= MAXIMUM_CAPACITY) ?\n+                       (dc >= MAXIMUM_CAPACITY) ?\n@@ -1535,1 +1535,1 @@\n-                       tableSizeFor((int)fc));\n+                       tableSizeFor((int)dc));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -243,0 +243,9 @@\n+    \/**\n+     * use for calculate HashMap capacity, using default load factor 0.75\n+     * @param size size\n+     * @return HashMap capacity under default load factor\n+     *\/\n+    private static int calculateHashMapCapacity(int size){\n+        return size + (size + 2) \/ 3;\n+    }\n+\n@@ -254,1 +263,1 @@\n-        this(Math.max((int) ((float)m.size() \/ DEFAULT_LOAD_FACTOR + 1.0F),\n+        this(Math.max(calculateHashMapCapacity(m.size()),\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-\n-        int initialCapacity = (int)(e.getEnumConstants().length \/ 0.75f) + 1;\n+        final int size = e.getEnumConstants().length;\n+        int initialCapacity = size + (size + 2) \/ 3;\n","filename":"test\/jdk\/java\/lang\/Enum\/ConstantDirectoryOptimalCapacity.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}