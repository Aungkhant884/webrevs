{"files":[{"patch":"@@ -498,3 +498,3 @@\n-                float ft = ((float)s \/ loadFactor) + 1.0F;\n-                int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n-                         (int)ft : MAXIMUM_CAPACITY);\n+                double dt = Math.ceil(s \/ (double)loadFactor);\n+                int t = ((dt < (double)MAXIMUM_CAPACITY) ?\n+                         (int)dt : MAXIMUM_CAPACITY);\n@@ -1530,2 +1530,2 @@\n-            float fc = (float)mappings \/ lf + 1.0f;\n-            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n+            double dc = Math.ceil(mappings \/ (double)lf);\n+            int cap = ((dc < DEFAULT_INITIAL_CAPACITY) ?\n@@ -1533,1 +1533,1 @@\n-                       (fc >= MAXIMUM_CAPACITY) ?\n+                       (dc >= MAXIMUM_CAPACITY) ?\n@@ -1535,1 +1535,1 @@\n-                       tableSizeFor((int)fc));\n+                       tableSizeFor((int)dc));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,3 +216,1 @@\n-        int capacity = 1;\n-        while (capacity < initialCapacity)\n-            capacity <<= 1;\n+        int capacity = HashMap.tableSizeFor(initialCapacity);\n@@ -254,1 +252,1 @@\n-        this(Math.max((int) ((float)m.size() \/ DEFAULT_LOAD_FACTOR + 1.0F),\n+        this(Math.max((int) Math.ceil(m.size() \/ (double)DEFAULT_LOAD_FACTOR),\n@@ -471,1 +469,1 @@\n-        if (++size >= threshold)\n+        if (++size > threshold)\n@@ -560,1 +558,1 @@\n-            int targetCapacity = (int)(numKeysToBeAdded \/ loadFactor + 1);\n+            int targetCapacity = (int)Math.ceil(numKeysToBeAdded \/ (double)loadFactor);\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -545,0 +545,1 @@\n+java\/lang\/Enum\/ConstantDirectoryOptimalCapacity.java            8282120 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281631\n+ * @summary HashMap copy constructor and putAll can over-allocate table\n+ * @author  Xeno Amess\n+ *\n+ * @run junit\/othervm\/timeout=1000\n+ *      --add-opens java.base\/java.lang=ALL-UNNAMED\n+ *      --add-opens java.base\/java.util=ALL-UNNAMED\n+ *      HashMapsPutAllOverAllocateTableTest\n+ *\/\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+@RunWith(Parameterized.class)\n+public class HashMapsPutAllOverAllocateTableTest {\n+\n+    private static final int TEST_SIZE = 128;\n+    private static final Integer[] INTEGER_ARRAY = new Integer[TEST_SIZE];\n+\n+    static {\n+        for (int i = 0; i < TEST_SIZE; ++i) {\n+            INTEGER_ARRAY[i] = i;\n+        }\n+    }\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> testFunctionsList() {\n+        List<Object[]> testParameters = new ArrayList<>(TEST_SIZE * 3);\n+        for (int i = 0; i <= TEST_SIZE; ++i) {\n+            testParameters.add(\n+                    new Object[]{\n+                            (Supplier<Map<Object, Object>>) HashMap::new,\n+                            (Function<Integer, Map<Object, Object>>) HashMap::new,\n+                            (Function<Map<Object, Object>, Map<Object, Object>>) HashMap::new,\n+                            i\n+                    }\n+            );\n+            testParameters.add(\n+                    new Object[]{\n+                            (Supplier<Map<Object, Object>>) WeakHashMap::new,\n+                            (Function<Integer, Map<Object, Object>>) WeakHashMap::new,\n+                            (Function<Map<Object, Object>, Map<Object, Object>>) WeakHashMap::new,\n+                            i\n+                    }\n+            );\n+        }\n+        return testParameters;\n+    }\n+\n+    private final Supplier<Map<Object, Object>> createNewMap;\n+\n+    private final Function<Integer, Map<Object, Object>> createNewMapWithInt;\n+\n+    private final Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap;\n+\n+    private final int mapSize;\n+\n+    public HashMapsPutAllOverAllocateTableTest(\n+            Supplier<Map<Object, Object>> createNewMap,\n+            Function<Integer, Map<Object, Object>> createNewMapWithInt,\n+            Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap,\n+            int mapSize\n+    ) {\n+        this.createNewMap = createNewMap;\n+        this.createNewMapWithInt = createNewMapWithInt;\n+        this.createNewMapWithMap = createNewMapWithMap;\n+        this.mapSize = mapSize;\n+    }\n+\n+    public static void fillN(int mapSize, Map<Object, Object> map) {\n+        for (int i = 0; i < mapSize; i++) {\n+            map.put(INTEGER_ARRAY[i], INTEGER_ARRAY[i]);\n+        }\n+    }\n+\n+    public static int getArrayLength(Map<Object, Object> map) throws\n+            NoSuchFieldException, IllegalAccessException {\n+        Field field = map.getClass().getDeclaredField(\"table\");\n+        field.setAccessible(true);\n+        Object table = field.get(map);\n+        if (table == null) {\n+            return -1;\n+        }\n+        return Array.getLength(table);\n+    }\n+\n+    @Test\n+    public void test() throws NoSuchFieldException, IllegalAccessException {\n+\n+        Map<Object, Object> a = createNewMap.get();\n+        fillN(mapSize, a);\n+        int lengthA = getArrayLength(a);\n+        {\n+            Map<Object, Object> b = createNewMapWithInt.apply(mapSize);\n+            fillN(mapSize, b);\n+            int length = getArrayLength(b);\n+            Assert.assertTrue(\n+                    \"length b larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+        {\n+            Map<Object, Object> c = createNewMapWithMap.apply(a);\n+            int length = getArrayLength(c);\n+            Assert.assertTrue(\n+                    \"length c larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+        {\n+            Map<Object, Object> d = createNewMap.get();\n+            d.putAll(a);\n+            int length = getArrayLength(d);\n+            Assert.assertTrue(\n+                    \"length d larger than length a!\",\n+                    length <= lengthA\n+            );\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}