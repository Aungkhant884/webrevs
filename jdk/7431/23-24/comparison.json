{"files":[{"patch":"@@ -45,1 +45,1 @@\n-import java.util.IdentityHashMap;\n+import java.util.LinkedHashMap;\n@@ -48,0 +48,1 @@\n+import java.util.Objects;\n@@ -64,0 +65,16 @@\n+    private static <T extends Map<Object, Object>> Object[] testCase(\n+            String name,\n+            Supplier<T> createNewMap,\n+            Function<Integer, T> createNewMapWithInt,\n+            Function<T, T> createNewMapWithMap,\n+            int mapSize\n+    ) {\n+        return new Object[]{\n+                name + \" size \" + mapSize,\n+                createNewMap,\n+                createNewMapWithInt,\n+                createNewMapWithMap,\n+                mapSize\n+        };\n+    }\n+\n@@ -69,4 +86,5 @@\n-                    new Object[]{\n-                            (Supplier<Map<Object, Object>>) HashMap::new,\n-                            (Function<Integer, Map<Object, Object>>) HashMap::new,\n-                            (Function<Map<Object, Object>, Map<Object, Object>>) HashMap::new,\n+                    testCase(\n+                            HashMap.class.getName(),\n+                            HashMap::new,\n+                            HashMap::new,\n+                            HashMap::new,\n@@ -74,1 +92,1 @@\n-                    }\n+                    )\n@@ -77,4 +95,5 @@\n-                    new Object[]{\n-                            (Supplier<Map<Object, Object>>) WeakHashMap::new,\n-                            (Function<Integer, Map<Object, Object>>) WeakHashMap::new,\n-                            (Function<Map<Object, Object>, Map<Object, Object>>) WeakHashMap::new,\n+                    testCase(\n+                            LinkedHashMap.class.getName(),\n+                            LinkedHashMap::new,\n+                            LinkedHashMap::new,\n+                            LinkedHashMap::new,\n@@ -82,1 +101,10 @@\n-                    }\n+                    )\n+            );\n+            testParameters.add(\n+                    testCase(\n+                            WeakHashMap.class.getName(),\n+                            WeakHashMap::new,\n+                            WeakHashMap::new,\n+                            WeakHashMap::new,\n+                            i\n+                    )\n@@ -88,0 +116,2 @@\n+    private final String testName;\n+\n@@ -97,0 +127,1 @@\n+            String testName,\n@@ -102,0 +133,1 @@\n+        this.testName = testName;\n@@ -114,3 +146,13 @@\n-    public static int getArrayLength(Map<Object, Object> map) throws\n-            NoSuchFieldException, IllegalAccessException {\n-        Field field = map.getClass().getDeclaredField(\"table\");\n+    public static int getArrayLength(Map<?, ?> map) throws\n+            IllegalAccessException {\n+        Field field = null;\n+        Class<?> mapClass = map.getClass();\n+        while (!Map.class.equals(mapClass)) {\n+            try {\n+                field = mapClass.getDeclaredField(\"table\");\n+                break;\n+            } catch (NoSuchFieldException ignored) {\n+            }\n+            mapClass = mapClass.getSuperclass();\n+        }\n+        Objects.requireNonNull(field);\n@@ -126,1 +168,1 @@\n-    public void test() throws NoSuchFieldException, IllegalAccessException {\n+    public void test() throws IllegalAccessException {\n@@ -136,1 +178,1 @@\n-                    \"length b larger than length a!\",\n+                    testName + \" : \" + \"length b larger than length a!\",\n@@ -145,1 +187,1 @@\n-                    \"length c larger than length a!\",\n+                    testName + \" : \" + \"length c larger than length a!\",\n@@ -155,1 +197,1 @@\n-                    \"length d larger than length a!\",\n+                    testName + \" : \" + \"length d larger than length a!\",\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":60,"deletions":18,"binary":false,"changes":78,"status":"modified"}]}