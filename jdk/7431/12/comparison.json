{"files":[{"patch":"@@ -3903,1 +3903,1 @@\n-            directory = new HashMap<>((int)(universe.length \/ 0.75f) + 1);\n+            directory = new HashMap<>((int) Math.ceil(universe.length \/ 0.75));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -498,3 +498,3 @@\n-                float ft = ((float)s \/ loadFactor) + 1.0F;\n-                int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n-                         (int)ft : MAXIMUM_CAPACITY);\n+                double dt = Math.ceil(s \/ loadFactor);\n+                int t = ((dt < (double)MAXIMUM_CAPACITY) ?\n+                         (int)dt : MAXIMUM_CAPACITY);\n@@ -1530,2 +1530,2 @@\n-            float fc = (float)mappings \/ lf + 1.0f;\n-            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n+            double dc = Math.ceil(mappings \/ lf);\n+            int cap = ((dc < DEFAULT_INITIAL_CAPACITY) ?\n@@ -1533,1 +1533,1 @@\n-                       (fc >= MAXIMUM_CAPACITY) ?\n+                       (dc >= MAXIMUM_CAPACITY) ?\n@@ -1535,1 +1535,1 @@\n-                       tableSizeFor((int)fc));\n+                       tableSizeFor((int)dc));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -216,3 +216,1 @@\n-        int capacity = 1;\n-        while (capacity < initialCapacity)\n-            capacity <<= 1;\n+        int capacity = HashMap.tableSizeFor(initialCapacity);\n@@ -254,1 +252,1 @@\n-        this(Math.max((int) ((float)m.size() \/ DEFAULT_LOAD_FACTOR + 1.0F),\n+        this(Math.max((int) Math.ceil(m.size() \/ 0.75),\n@@ -560,1 +558,1 @@\n-            int targetCapacity = (int)(numKeysToBeAdded \/ loadFactor + 1);\n+            int targetCapacity = (int)Math.ceil(numKeysToBeAdded \/ loadFactor);\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-\n-        int initialCapacity = (int)(e.getEnumConstants().length \/ 0.75f) + 1;\n+        final int size = e.getEnumConstants().length;\n+        int initialCapacity = size + (size + 2) \/ 3;\n","filename":"test\/jdk\/java\/lang\/Enum\/ConstantDirectoryOptimalCapacity.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281631\n+ * @summary HashMap copy constructor and putAll can over-allocate table\n+ * @modules java.base\/java.lang:open\n+ *          java.base\/java.util:open\n+ * @author  Xeno Amess\n+ *\n+ * @compile HashMapsPutAllOverAllocateTableTest.java\n+ * @run main HashMapsPutAllOverAllocateTableTest\n+ *\/\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+public class HashMapsPutAllOverAllocateTableTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        testOneMapClass(HashMap.class);\n+        testOneMapClass(WeakHashMap.class);\n+        testOneMapClass(IdentityHashMap.class);\n+        testOneMapClass(LinkedHashMap.class);\n+    }\n+\n+    public static <T extends Map<Object, Object>> void testOneMapClass(Class<T> mapClass) throws Exception {\n+        Map<Object, Object> a = mapClass.getDeclaredConstructor().newInstance();\n+        fill12(a);\n+        Map<Object, Object> b = mapClass.getDeclaredConstructor(int.class).newInstance(12);\n+        fill12(b);\n+        Map<Object, Object> c = mapClass.getDeclaredConstructor(Map.class).newInstance(a);\n+        Map<Object, Object> d = mapClass.getDeclaredConstructor().newInstance();\n+        d.putAll(a);\n+        int lengthA = getArrayLength(a);\n+        int lengthB = getArrayLength(b);\n+        int lengthC = getArrayLength(c);\n+        int lengthD = getArrayLength(d);\n+        if (lengthA != lengthB) {\n+            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthB : \" + lengthB);\n+        }\n+        if (lengthA != lengthC) {\n+            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthC : \" + lengthC);\n+        }\n+        if (lengthA != lengthD) {\n+            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthD : \" + lengthD);\n+        }\n+    }\n+\n+    public static void fill12(Map<Object, Object> map) {\n+        for (int i = 0; i < 12; i++) {\n+            map.put(i, i);\n+        }\n+    }\n+\n+    public static int getArrayLength(Map<Object, Object> map) throws NoSuchFieldException, IllegalAccessException {\n+        Field field = map.getClass().getDeclaredField(\"table\");\n+        field.setAccessible(true);\n+        Object table = field.get(map);\n+        return Array.getLength(table);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}