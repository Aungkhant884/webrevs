{"files":[{"patch":"@@ -25,0 +25,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -42,5 +45,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -69,1 +67,1 @@\n-        public int hashCode(){\n+        public int hashCode() {\n@@ -93,0 +91,4 @@\n+    private static void putMap(Map<KeyStructure, KeyStructure> map, int i) {\n+        putMap(map, i);\n+    }\n+\n@@ -114,1 +116,3 @@\n-        } catch (Throwable t) { throw new AssertionError(t); }\n+        } catch (Throwable t) {\n+            throw new AssertionError(t);\n+        }\n@@ -117,1 +121,1 @@\n-    Object[] table(Map<?,?> map) {\n+    Object[] table(Map<?, ?> map) {\n@@ -121,1 +125,3 @@\n-        } catch (Throwable t) { throw new AssertionError(t); }\n+        } catch (Throwable t) {\n+            throw new AssertionError(t);\n+        }\n@@ -124,1 +130,1 @@\n-    int capacity(Map<?,?> map) {\n+    int capacity(Map<?, ?> map) {\n@@ -129,4 +135,6 @@\n-    Map<KeyStructure, Integer> makeMap(int size) {\n-        return IntStream.range(0, size)\n-                .boxed()\n-                .collect(Collectors.toUnmodifiableMap(KeyStructure::new, i -> i));\n+    Map<KeyStructure, KeyStructure> makeMap(int size) {\n+        Map<KeyStructure, KeyStructure> map = new HashMap<>();\n+        for (int i = 0; i < size; ++i) {\n+            putMap(map, i);\n+        }\n+        return map;\n@@ -137,1 +145,1 @@\n-    Map<KeyStructure, Integer> fakeMap(int size) {\n+    Map<KeyStructure, KeyStructure> fakeMap(int size) {\n@@ -139,5 +147,9 @@\n-            public Set<Map.Entry<KeyStructure,Integer>> entrySet() {\n-                return new AbstractSet<Map.Entry<KeyStructure,Integer>>() {\n-                    public int size() { return size; }\n-                    public Iterator<Map.Entry<KeyStructure,Integer>> iterator() {\n-                        return Set.of(Map.entry(new KeyStructure(1), 1)).iterator();\n+            public Set<Map.Entry<KeyStructure, KeyStructure>> entrySet() {\n+                return new AbstractSet<Map.Entry<KeyStructure, KeyStructure>>() {\n+                    public int size() {\n+                        return size;\n+                    }\n+\n+                    public Iterator<Map.Entry<KeyStructure, KeyStructure>> iterator() {\n+                        KeyStructure keyStructure = new KeyStructure(1);\n+                        return Set.of(Map.entry(keyStructure, keyStructure)).iterator();\n@@ -150,1 +162,1 @@\n-    void putN(Map<KeyStructure, Integer> map, int n) {\n+    void putN(Map<KeyStructure, KeyStructure> map, int n) {\n@@ -152,1 +164,1 @@\n-            map.put(new KeyStructure(i), i);\n+            putMap(map, i);\n@@ -160,1 +172,1 @@\n-    @DataProvider(name=\"tableSizeFor\")\n+    @DataProvider(name = \"tableSizeFor\")\n@@ -163,1 +175,1 @@\n-        return new Object[][] {\n+        return new Object[][]{\n@@ -165,132 +177,132 @@\n-                { 0,                   1 },\n-                { 1,                   1 },\n-                { 2,                   2 },\n-                { 3,                   4 },\n-                { 4,                   4 },\n-                { 5,                   8 },\n-                { 6,                   8 },\n-                { 7,                   8 },\n-                { 8,                   8 },\n-                { 9,                  16 },\n-                { 10,                 16 },\n-                { 11,                 16 },\n-                { 12,                 16 },\n-                { 13,                 16 },\n-                { 14,                 16 },\n-                { 15,                 16 },\n-                { 16,                 16 },\n-                { 17,                 32 },\n-                { 18,                 32 },\n-                { 19,                 32 },\n-                { 20,                 32 },\n-                { 21,                 32 },\n-                { 22,                 32 },\n-                { 23,                 32 },\n-                { 24,                 32 },\n-                { 25,                 32 },\n-                { 26,                 32 },\n-                { 27,                 32 },\n-                { 28,                 32 },\n-                { 29,                 32 },\n-                { 30,                 32 },\n-                { 31,                 32 },\n-                { 32,                 32 },\n-                { 33,                 64 },\n-                { 34,                 64 },\n-                { 35,                 64 },\n-                { 36,                 64 },\n-                { 37,                 64 },\n-                { 38,                 64 },\n-                { 39,                 64 },\n-                { 40,                 64 },\n-                { 41,                 64 },\n-                { 42,                 64 },\n-                { 43,                 64 },\n-                { 44,                 64 },\n-                { 45,                 64 },\n-                { 46,                 64 },\n-                { 47,                 64 },\n-                { 48,                 64 },\n-                { 49,                 64 },\n-                { 50,                 64 },\n-                { 51,                 64 },\n-                { 52,                 64 },\n-                { 53,                 64 },\n-                { 54,                 64 },\n-                { 55,                 64 },\n-                { 56,                 64 },\n-                { 57,                 64 },\n-                { 58,                 64 },\n-                { 59,                 64 },\n-                { 60,                 64 },\n-                { 61,                 64 },\n-                { 62,                 64 },\n-                { 63,                 64 },\n-                { 64,                 64 },\n-                { 65,                128 },\n-                { 66,                128 },\n-                { 67,                128 },\n-                { 68,                128 },\n-                { 69,                128 },\n-                { 70,                128 },\n-                { 71,                128 },\n-                { 72,                128 },\n-                { 73,                128 },\n-                { 74,                128 },\n-                { 75,                128 },\n-                { 76,                128 },\n-                { 77,                128 },\n-                { 78,                128 },\n-                { 79,                128 },\n-                { 80,                128 },\n-                { 81,                128 },\n-                { 82,                128 },\n-                { 83,                128 },\n-                { 84,                128 },\n-                { 85,                128 },\n-                { 86,                128 },\n-                { 87,                128 },\n-                { 88,                128 },\n-                { 89,                128 },\n-                { 90,                128 },\n-                { 91,                128 },\n-                { 92,                128 },\n-                { 93,                128 },\n-                { 94,                128 },\n-                { 95,                128 },\n-                { 96,                128 },\n-                { 97,                128 },\n-                { 98,                128 },\n-                { 99,                128 },\n-                { 100,               128 },\n-                { 101,               128 },\n-                { 102,               128 },\n-                { 103,               128 },\n-                { 104,               128 },\n-                { 105,               128 },\n-                { 106,               128 },\n-                { 107,               128 },\n-                { 108,               128 },\n-                { 109,               128 },\n-                { 110,               128 },\n-                { 111,               128 },\n-                { 112,               128 },\n-                { 113,               128 },\n-                { 114,               128 },\n-                { 115,               128 },\n-                { 116,               128 },\n-                { 117,               128 },\n-                { 118,               128 },\n-                { 119,               128 },\n-                { 120,               128 },\n-                { 121,               128 },\n-                { 122,               128 },\n-                { 123,               128 },\n-                { 124,               128 },\n-                { 125,               128 },\n-                { 126,               128 },\n-                { 127,               128 },\n-                { MAX-1,             MAX },\n-                { MAX,               MAX },\n-                { MAX+1,             MAX },\n-                { Integer.MAX_VALUE, MAX }\n+                {0, 1},\n+                {1, 1},\n+                {2, 2},\n+                {3, 4},\n+                {4, 4},\n+                {5, 8},\n+                {6, 8},\n+                {7, 8},\n+                {8, 8},\n+                {9, 16},\n+                {10, 16},\n+                {11, 16},\n+                {12, 16},\n+                {13, 16},\n+                {14, 16},\n+                {15, 16},\n+                {16, 16},\n+                {17, 32},\n+                {18, 32},\n+                {19, 32},\n+                {20, 32},\n+                {21, 32},\n+                {22, 32},\n+                {23, 32},\n+                {24, 32},\n+                {25, 32},\n+                {26, 32},\n+                {27, 32},\n+                {28, 32},\n+                {29, 32},\n+                {30, 32},\n+                {31, 32},\n+                {32, 32},\n+                {33, 64},\n+                {34, 64},\n+                {35, 64},\n+                {36, 64},\n+                {37, 64},\n+                {38, 64},\n+                {39, 64},\n+                {40, 64},\n+                {41, 64},\n+                {42, 64},\n+                {43, 64},\n+                {44, 64},\n+                {45, 64},\n+                {46, 64},\n+                {47, 64},\n+                {48, 64},\n+                {49, 64},\n+                {50, 64},\n+                {51, 64},\n+                {52, 64},\n+                {53, 64},\n+                {54, 64},\n+                {55, 64},\n+                {56, 64},\n+                {57, 64},\n+                {58, 64},\n+                {59, 64},\n+                {60, 64},\n+                {61, 64},\n+                {62, 64},\n+                {63, 64},\n+                {64, 64},\n+                {65, 128},\n+                {66, 128},\n+                {67, 128},\n+                {68, 128},\n+                {69, 128},\n+                {70, 128},\n+                {71, 128},\n+                {72, 128},\n+                {73, 128},\n+                {74, 128},\n+                {75, 128},\n+                {76, 128},\n+                {77, 128},\n+                {78, 128},\n+                {79, 128},\n+                {80, 128},\n+                {81, 128},\n+                {82, 128},\n+                {83, 128},\n+                {84, 128},\n+                {85, 128},\n+                {86, 128},\n+                {87, 128},\n+                {88, 128},\n+                {89, 128},\n+                {90, 128},\n+                {91, 128},\n+                {92, 128},\n+                {93, 128},\n+                {94, 128},\n+                {95, 128},\n+                {96, 128},\n+                {97, 128},\n+                {98, 128},\n+                {99, 128},\n+                {100, 128},\n+                {101, 128},\n+                {102, 128},\n+                {103, 128},\n+                {104, 128},\n+                {105, 128},\n+                {106, 128},\n+                {107, 128},\n+                {108, 128},\n+                {109, 128},\n+                {110, 128},\n+                {111, 128},\n+                {112, 128},\n+                {113, 128},\n+                {114, 128},\n+                {115, 128},\n+                {116, 128},\n+                {117, 128},\n+                {118, 128},\n+                {119, 128},\n+                {120, 128},\n+                {121, 128},\n+                {122, 128},\n+                {123, 128},\n+                {124, 128},\n+                {125, 128},\n+                {126, 128},\n+                {127, 128},\n+                {MAX - 1, MAX},\n+                {MAX, MAX},\n+                {MAX + 1, MAX},\n+                {Integer.MAX_VALUE, MAX}\n@@ -300,1 +312,1 @@\n-    @Test(dataProvider=\"tableSizeFor\")\n+    @Test(dataProvider = \"tableSizeFor\")\n@@ -309,1 +321,1 @@\n-    @DataProvider(name=\"lazy\")\n+    @DataProvider(name = \"lazy\")\n@@ -311,2 +323,2 @@\n-        return new Object[][] {\n-                { new HashMap<>() },\n+        return new Object[][]{\n+                {new HashMap<>()},\n@@ -314,1 +326,1 @@\n-                { new LinkedHashMap<>() }\n+                {new LinkedHashMap<>()}\n@@ -318,2 +330,2 @@\n-    @Test(dataProvider=\"lazy\")\n-    public void lazyTableAllocation(Map<?,?> map) {\n+    @Test(dataProvider = \"lazy\")\n+    public void lazyTableAllocation(Map<?, ?> map) {\n@@ -327,1 +339,1 @@\n-    @DataProvider(name=\"defaultCapacity\")\n+    @DataProvider(name = \"defaultCapacity\")\n@@ -329,4 +341,4 @@\n-        return new Supplier<?>[][] {\n-                { () -> new HashMap<>() },\n-                { () -> new LinkedHashMap<>() },\n-                { () -> new WeakHashMap<>() }\n+        return new Supplier<?>[][]{\n+                {() -> new HashMap<>()},\n+                {() -> new LinkedHashMap<>()},\n+                {() -> new WeakHashMap<>()}\n@@ -336,4 +348,4 @@\n-    @Test(dataProvider=\"defaultCapacity\")\n-    public void defaultCapacity(Supplier<Map<KeyStructure, Integer>> s) {\n-        Map<KeyStructure, Integer> map = s.get();\n-        map.put(new KeyStructure(0), 0);\n+    @Test(dataProvider = \"defaultCapacity\")\n+    public void defaultCapacity(Supplier<Map<KeyStructure, KeyStructure>> s) {\n+        Map<KeyStructure, KeyStructure> map = s.get();\n+        putMap(map, 0);\n@@ -347,1 +359,1 @@\n-    @DataProvider(name=\"requestedCapacity\")\n+    @DataProvider(name = \"requestedCapacity\")\n@@ -352,6 +364,6 @@\n-            cases.add(new Object[] { \"rhm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new HashMap<>(cap) });\n-            cases.add(new Object[] { \"rhm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new HashMap<>(cap, 0.75f) });\n-            cases.add(new Object[] { \"rlm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new LinkedHashMap<>(cap) });\n-            cases.add(new Object[] { \"rlm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new LinkedHashMap<>(cap, 0.75f) });\n-            cases.add(new Object[] { \"rwm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new WeakHashMap<>(cap) });\n-            cases.add(new Object[] { \"rwm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new WeakHashMap<>(cap, 0.75f) });\n+            cases.add(new Object[]{\"rhm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new HashMap<>(cap)});\n+            cases.add(new Object[]{\"rhm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new HashMap<>(cap, 0.75f)});\n+            cases.add(new Object[]{\"rlm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new LinkedHashMap<>(cap)});\n+            cases.add(new Object[]{\"rlm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new LinkedHashMap<>(cap, 0.75f)});\n+            cases.add(new Object[]{\"rwm1\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new WeakHashMap<>(cap)});\n+            cases.add(new Object[]{\"rwm2\", cap, (Supplier<Map<KeyStructure, KeyStructure>>) () -> new WeakHashMap<>(cap, 0.75f)});\n@@ -362,4 +374,4 @@\n-    @Test(dataProvider=\"requestedCapacity\")\n-    public void requestedCapacity(String label, int cap, Supplier<Map<KeyStructure, Integer>> s) {\n-        Map<KeyStructure, Integer> map = s.get();\n-        map.put(new KeyStructure(0), 0);\n+    @Test(dataProvider = \"requestedCapacity\")\n+    public void requestedCapacity(String label, int cap, Supplier<Map<KeyStructure, KeyStructure>> s) {\n+        Map<KeyStructure, KeyStructure> map = s.get();\n+        putMap(map, 0);\n@@ -383,3 +395,3 @@\n-                 Supplier<Map<KeyStructure,Integer>> supplier,\n-                 Consumer<Map<KeyStructure,Integer>> consumer) {\n-        return new Object[] { label, size, expectedCapacity, supplier, consumer };\n+                 Supplier<Map<KeyStructure, KeyStructure>> supplier,\n+                 Consumer<Map<KeyStructure, KeyStructure>> consumer) {\n+        return new Object[]{label, size, expectedCapacity, supplier, consumer};\n@@ -390,23 +402,62 @@\n-                pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)),       map -> { }),\n-                pcc(\"phm0pn\", size, cap, () -> new HashMap<>(),                    map -> { putN(map, size); }),\n-                pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap),                 map -> { putN(map, size); }),\n-                pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { putN(map, size); }),\n-                pcc(\"phm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(makeMap(size)); }),\n-\n-                pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> { }),\n-                pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(),              map -> { putN(map, size); }),\n-                pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { putN(map, size); }),\n-                pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { putN(map, size); }),\n-                pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(makeMap(size)); }),\n-\n-                pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)),   map -> { }),\n-                pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(),                map -> { putN(map, size); }),\n-                pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap),             map -> { putN(map, size); }),\n-                pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { putN(map, size); }),\n-                pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(makeMap(size)); }),\n-                pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(makeMap(size)); })\n+                pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)), map -> {\n+                }),\n+                pcc(\"phm0pn\", size, cap, () -> new HashMap<>(), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"phm0pa\", size, cap, () -> new HashMap<>(), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+\n+                pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> {\n+                }),\n+                pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+\n+                pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)), map -> {\n+                }),\n+                pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n+                    putN(map, size);\n+                }),\n+                pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n+                    map.putAll(makeMap(size));\n+                }),\n+                pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(makeMap(size));\n+                })\n@@ -418,11 +469,26 @@\n-                pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)),       map -> { }),\n-                pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(fakeMap(size)); }),\n-                pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(fakeMap(size)); }),\n-                pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(fakeMap(size)); }),\n-\n-                pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> { }),\n-                pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(fakeMap(size)); }),\n-                pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(fakeMap(size)); }),\n-                pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(fakeMap(size)); }),\n-\n-                pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)),   map -> { }),\n+                pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)), map -> {\n+                }),\n+                pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+                pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+                pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+\n+                pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> {\n+                }),\n+                pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+                pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+                pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+\n+                pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)), map -> {\n+                }),\n@@ -430,2 +496,6 @@\n-                pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(fakeMap(size)); }),\n-                pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(fakeMap(size)); })\n+                pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap), map -> {\n+                    map.putAll(fakeMap(size));\n+                }),\n+                pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f), map -> {\n+                    map.putAll(fakeMap(size));\n+                })\n@@ -438,1 +508,1 @@\n-    @DataProvider(name=\"populatedCapacity\")\n+    @DataProvider(name = \"populatedCapacity\")\n@@ -579,1 +649,1 @@\n-    @Test(dataProvider=\"populatedCapacity\")\n+    @Test(dataProvider = \"populatedCapacity\")\n@@ -583,3 +653,3 @@\n-                                  Supplier<Map<KeyStructure,Integer>> s,\n-                                  Consumer<Map<KeyStructure,Integer>> c) {\n-        Map<KeyStructure,Integer> map = s.get();\n+                                  Supplier<Map<KeyStructure, KeyStructure>> s,\n+                                  Consumer<Map<KeyStructure, KeyStructure>> c) {\n+        Map<KeyStructure, KeyStructure> map = s.get();\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":297,"deletions":227,"binary":false,"changes":524,"status":"modified"}]}