{"files":[{"patch":"@@ -59,0 +59,34 @@\n+\n+    static class KeyStructure {\n+\n+        int value;\n+\n+        public KeyStructure(int value) {\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public int hashCode(){\n+            return this.value;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o)\n+                return true;\n+            if (o == null || getClass() != o.getClass())\n+                return false;\n+            KeyStructure that = (KeyStructure) o;\n+            return value == that.value;\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(int value) {\n+            this.value = value;\n+        }\n+\n+    }\n+\n@@ -66,1 +100,1 @@\n-            HashMap.class, \"tableSizeFor\", MethodType.methodType(int.class, int.class));\n+                HashMap.class, \"tableSizeFor\", MethodType.methodType(int.class, int.class));\n@@ -95,1 +129,1 @@\n-    Map<Integer, Integer> makeMap(int size) {\n+    Map<KeyStructure, Integer> makeMap(int size) {\n@@ -97,2 +131,2 @@\n-                        .boxed()\n-                        .collect(Collectors.toUnmodifiableMap(i -> i, i -> i));\n+                .boxed()\n+                .collect(Collectors.toUnmodifiableMap(KeyStructure::new, i -> i));\n@@ -103,1 +137,1 @@\n-    Map<Integer, Integer> fakeMap(int size) {\n+    Map<KeyStructure, Integer> fakeMap(int size) {\n@@ -105,2 +139,2 @@\n-            public Set<Map.Entry<Integer,Integer>> entrySet() {\n-                return new AbstractSet<Map.Entry<Integer,Integer>>() {\n+            public Set<Map.Entry<KeyStructure,Integer>> entrySet() {\n+                return new AbstractSet<Map.Entry<KeyStructure,Integer>>() {\n@@ -108,2 +142,2 @@\n-                    public Iterator<Map.Entry<Integer,Integer>> iterator() {\n-                        return Set.of(Map.entry(1, 1)).iterator();\n+                    public Iterator<Map.Entry<KeyStructure,Integer>> iterator() {\n+                        return Set.of(Map.entry(new KeyStructure(1), 1)).iterator();\n@@ -116,16 +150,1 @@\n-    private static final Integer[] INTEGER_CONSTANTS = buildIntegerConstants();\n-\n-    private static final int INTEGER_CONSTANTS_LENGTH = 256;\n-\n-    private static Integer[] buildIntegerConstants() {\n-        Integer[] integerArray = new Integer[INTEGER_CONSTANTS_LENGTH];\n-        for (int i = 0; i < INTEGER_CONSTANTS_LENGTH; ++i) {\n-            integerArray[i] = i;\n-        }\n-        return integerArray;\n-    }\n-\n-    void putN(Map<Integer, Integer> map, int n) {\n-        if (n < 0 || n > INTEGER_CONSTANTS_LENGTH) {\n-            throw new IllegalArgumentException(\"n not legal : \" + n);\n-        }\n+    void putN(Map<KeyStructure, Integer> map, int n) {\n@@ -133,1 +152,1 @@\n-            map.put(INTEGER_CONSTANTS[i], INTEGER_CONSTANTS[i]);\n+            map.put(new KeyStructure(i), i);\n@@ -145,14 +164,133 @@\n-            \/\/ tableSizeFor(arg), expected\n-            { 0,                   1 },\n-            { 1,                   1 },\n-            { 2,                   2 },\n-            { 3,                   4 },\n-            { 4,                   4 },\n-            { 5,                   8 },\n-            { 15,                 16 },\n-            { 16,                 16 },\n-            { 17,                 32 },\n-            { MAX-1,             MAX },\n-            { MAX,               MAX },\n-            { MAX+1,             MAX },\n-            { Integer.MAX_VALUE, MAX }\n+                \/\/ tableSizeFor(arg), expected\n+                { 0,                   1 },\n+                { 1,                   1 },\n+                { 2,                   2 },\n+                { 3,                   4 },\n+                { 4,                   4 },\n+                { 5,                   8 },\n+                { 6,                   8 },\n+                { 7,                   8 },\n+                { 8,                   8 },\n+                { 9,                  16 },\n+                { 10,                 16 },\n+                { 11,                 16 },\n+                { 12,                 16 },\n+                { 13,                 16 },\n+                { 14,                 16 },\n+                { 15,                 16 },\n+                { 16,                 16 },\n+                { 17,                 32 },\n+                { 18,                 32 },\n+                { 19,                 32 },\n+                { 20,                 32 },\n+                { 21,                 32 },\n+                { 22,                 32 },\n+                { 23,                 32 },\n+                { 24,                 32 },\n+                { 25,                 32 },\n+                { 26,                 32 },\n+                { 27,                 32 },\n+                { 28,                 32 },\n+                { 29,                 32 },\n+                { 30,                 32 },\n+                { 31,                 32 },\n+                { 32,                 32 },\n+                { 33,                 64 },\n+                { 34,                 64 },\n+                { 35,                 64 },\n+                { 36,                 64 },\n+                { 37,                 64 },\n+                { 38,                 64 },\n+                { 39,                 64 },\n+                { 40,                 64 },\n+                { 41,                 64 },\n+                { 42,                 64 },\n+                { 43,                 64 },\n+                { 44,                 64 },\n+                { 45,                 64 },\n+                { 46,                 64 },\n+                { 47,                 64 },\n+                { 48,                 64 },\n+                { 49,                 64 },\n+                { 50,                 64 },\n+                { 51,                 64 },\n+                { 52,                 64 },\n+                { 53,                 64 },\n+                { 54,                 64 },\n+                { 55,                 64 },\n+                { 56,                 64 },\n+                { 57,                 64 },\n+                { 58,                 64 },\n+                { 59,                 64 },\n+                { 60,                 64 },\n+                { 61,                 64 },\n+                { 62,                 64 },\n+                { 63,                 64 },\n+                { 64,                 64 },\n+                { 65,                128 },\n+                { 66,                128 },\n+                { 67,                128 },\n+                { 68,                128 },\n+                { 69,                128 },\n+                { 70,                128 },\n+                { 71,                128 },\n+                { 72,                128 },\n+                { 73,                128 },\n+                { 74,                128 },\n+                { 75,                128 },\n+                { 76,                128 },\n+                { 77,                128 },\n+                { 78,                128 },\n+                { 79,                128 },\n+                { 80,                128 },\n+                { 81,                128 },\n+                { 82,                128 },\n+                { 83,                128 },\n+                { 84,                128 },\n+                { 85,                128 },\n+                { 86,                128 },\n+                { 87,                128 },\n+                { 88,                128 },\n+                { 89,                128 },\n+                { 90,                128 },\n+                { 91,                128 },\n+                { 92,                128 },\n+                { 93,                128 },\n+                { 94,                128 },\n+                { 95,                128 },\n+                { 96,                128 },\n+                { 97,                128 },\n+                { 98,                128 },\n+                { 99,                128 },\n+                { 100,               128 },\n+                { 101,               128 },\n+                { 102,               128 },\n+                { 103,               128 },\n+                { 104,               128 },\n+                { 105,               128 },\n+                { 106,               128 },\n+                { 107,               128 },\n+                { 108,               128 },\n+                { 109,               128 },\n+                { 110,               128 },\n+                { 111,               128 },\n+                { 112,               128 },\n+                { 113,               128 },\n+                { 114,               128 },\n+                { 115,               128 },\n+                { 116,               128 },\n+                { 117,               128 },\n+                { 118,               128 },\n+                { 119,               128 },\n+                { 120,               128 },\n+                { 121,               128 },\n+                { 122,               128 },\n+                { 123,               128 },\n+                { 124,               128 },\n+                { 125,               128 },\n+                { 126,               128 },\n+                { 127,               128 },\n+                { MAX-1,             MAX },\n+                { MAX,               MAX },\n+                { MAX+1,             MAX },\n+                { Integer.MAX_VALUE, MAX }\n@@ -174,3 +312,3 @@\n-            { new HashMap<>() },\n-         \/\/ { new WeakHashMap<>() }, \/\/ WHM doesn't allocate lazily\n-            { new LinkedHashMap<>() }\n+                { new HashMap<>() },\n+                \/\/ { new WeakHashMap<>() }, \/\/ WHM doesn't allocate lazily\n+                { new LinkedHashMap<>() }\n@@ -192,3 +330,3 @@\n-            { () -> new HashMap<>() },\n-            { () -> new LinkedHashMap<>() },\n-            { () -> new WeakHashMap<>() }\n+                { () -> new HashMap<>() },\n+                { () -> new LinkedHashMap<>() },\n+                { () -> new WeakHashMap<>() }\n@@ -199,3 +337,3 @@\n-    public void defaultCapacity(Supplier<Map<Integer, Integer>> s) {\n-        var map = s.get();\n-        map.put(0, 0);\n+    public void defaultCapacity(Supplier<Map<KeyStructure, Integer>> s) {\n+        Map<KeyStructure, Integer> map = s.get();\n+        map.put(new KeyStructure(0), 0);\n@@ -211,1 +349,1 @@\n-        var cases = new ArrayList<Object[]>();\n+        ArrayList<Object[]> cases = new ArrayList<>();\n@@ -214,6 +352,6 @@\n-            cases.add(new Object[] { \"rhm1\", cap, (Supplier<Map<Integer, Integer>>) () -> new HashMap<>(cap) });\n-            cases.add(new Object[] { \"rhm2\", cap, (Supplier<Map<Integer, Integer>>) () -> new HashMap<>(cap, 0.75f) });\n-            cases.add(new Object[] { \"rlm1\", cap, (Supplier<Map<Integer, Integer>>) () -> new LinkedHashMap<>(cap) });\n-            cases.add(new Object[] { \"rlm2\", cap, (Supplier<Map<Integer, Integer>>) () -> new LinkedHashMap<>(cap, 0.75f) });\n-            cases.add(new Object[] { \"rwm1\", cap, (Supplier<Map<Integer, Integer>>) () -> new WeakHashMap<>(cap) });\n-            cases.add(new Object[] { \"rwm2\", cap, (Supplier<Map<Integer, Integer>>) () -> new WeakHashMap<>(cap, 0.75f) });\n+            cases.add(new Object[] { \"rhm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new HashMap<>(cap) });\n+            cases.add(new Object[] { \"rhm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new HashMap<>(cap, 0.75f) });\n+            cases.add(new Object[] { \"rlm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new LinkedHashMap<>(cap) });\n+            cases.add(new Object[] { \"rlm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new LinkedHashMap<>(cap, 0.75f) });\n+            cases.add(new Object[] { \"rwm1\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new WeakHashMap<>(cap) });\n+            cases.add(new Object[] { \"rwm2\", cap, (Supplier<Map<KeyStructure, Integer>>) () -> new WeakHashMap<>(cap, 0.75f) });\n@@ -225,3 +363,3 @@\n-    public void requestedCapacity(String label, int cap, Supplier<Map<Integer, Integer>> s) {\n-        var map = s.get();\n-        map.put(0, 0);\n+    public void requestedCapacity(String label, int cap, Supplier<Map<KeyStructure, Integer>> s) {\n+        Map<KeyStructure, Integer> map = s.get();\n+        map.put(new KeyStructure(0), 0);\n@@ -245,2 +383,2 @@\n-                 Supplier<Map<Integer,Integer>> supplier,\n-                 Consumer<Map<Integer,Integer>> consumer) {\n+                 Supplier<Map<KeyStructure,Integer>> supplier,\n+                 Consumer<Map<KeyStructure,Integer>> consumer) {\n@@ -252,23 +390,23 @@\n-            pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)),       map -> { }),\n-            pcc(\"phm0pn\", size, cap, () -> new HashMap<>(),                    map -> { putN(map, size); }),\n-            pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap),                 map -> { putN(map, size); }),\n-            pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { putN(map, size); }),\n-            pcc(\"phm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(makeMap(size)); }),\n-\n-            pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> { }),\n-            pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(),              map -> { putN(map, size); }),\n-            pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { putN(map, size); }),\n-            pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { putN(map, size); }),\n-            pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(makeMap(size)); }),\n-\n-            pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)),   map -> { }),\n-            pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(),                map -> { putN(map, size); }),\n-            pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap),             map -> { putN(map, size); }),\n-            pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { putN(map, size); }),\n-            pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(makeMap(size)); }),\n-            pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(makeMap(size)); })\n+                pcc(\"phmcpy\", size, cap, () -> new HashMap<>(makeMap(size)),       map -> { }),\n+                pcc(\"phm0pn\", size, cap, () -> new HashMap<>(),                    map -> { putN(map, size); }),\n+                pcc(\"phm1pn\", size, cap, () -> new HashMap<>(cap),                 map -> { putN(map, size); }),\n+                pcc(\"phm2pn\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { putN(map, size); }),\n+                pcc(\"phm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"phm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"phm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(makeMap(size)); }),\n+\n+                pcc(\"plmcpy\", size, cap, () -> new LinkedHashMap<>(makeMap(size)), map -> { }),\n+                pcc(\"plm0pn\", size, cap, () -> new LinkedHashMap<>(),              map -> { putN(map, size); }),\n+                pcc(\"plm1pn\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { putN(map, size); }),\n+                pcc(\"plm2pn\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { putN(map, size); }),\n+                pcc(\"plm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"plm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"plm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(makeMap(size)); }),\n+\n+                pcc(\"pwmcpy\", size, cap, () -> new WeakHashMap<>(makeMap(size)),   map -> { }),\n+                pcc(\"pwm0pn\", size, cap, () -> new WeakHashMap<>(),                map -> { putN(map, size); }),\n+                pcc(\"pwm1pn\", size, cap, () -> new WeakHashMap<>(cap),             map -> { putN(map, size); }),\n+                pcc(\"pwm2pn\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { putN(map, size); }),\n+                pcc(\"pwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"pwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(makeMap(size)); }),\n+                pcc(\"pwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(makeMap(size)); })\n@@ -280,14 +418,14 @@\n-            pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)),       map -> { }),\n-            pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(fakeMap(size)); }),\n-            pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(fakeMap(size)); }),\n-            pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(fakeMap(size)); }),\n-\n-            pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> { }),\n-            pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(fakeMap(size)); }),\n-            pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(fakeMap(size)); }),\n-            pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(fakeMap(size)); }),\n-\n-            pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)),   map -> { }),\n-         \/\/ pcc(\"fwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(fakeMap(size)); }), \/\/ see note\n-            pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(fakeMap(size)); }),\n-            pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(fakeMap(size)); })\n+                pcc(\"fhmcpy\", size, cap, () -> new HashMap<>(fakeMap(size)),       map -> { }),\n+                pcc(\"fhm0pa\", size, cap, () -> new HashMap<>(),                    map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fhm1pa\", size, cap, () -> new HashMap<>(cap),                 map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fhm2pa\", size, cap, () -> new HashMap<>(cap, 0.75f),          map -> { map.putAll(fakeMap(size)); }),\n+\n+                pcc(\"flmcpy\", size, cap, () -> new LinkedHashMap<>(fakeMap(size)), map -> { }),\n+                pcc(\"flm0pa\", size, cap, () -> new LinkedHashMap<>(),              map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"flm1pa\", size, cap, () -> new LinkedHashMap<>(cap),           map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"flm2pa\", size, cap, () -> new LinkedHashMap<>(cap, 0.75f),    map -> { map.putAll(fakeMap(size)); }),\n+\n+                pcc(\"fwmcpy\", size, cap, () -> new WeakHashMap<>(fakeMap(size)),   map -> { }),\n+                \/\/ pcc(\"fwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(fakeMap(size)); }), \/\/ see note\n+                pcc(\"fwm1pa\", size, cap, () -> new WeakHashMap<>(cap),             map -> { map.putAll(fakeMap(size)); }),\n+                pcc(\"fwm2pa\", size, cap, () -> new WeakHashMap<>(cap, 0.75f),      map -> { map.putAll(fakeMap(size)); })\n@@ -302,5 +440,129 @@\n-        var cases = new ArrayList<Object[]>();\n-        cases.addAll(genPopulatedCapacityCases(11,  16));\n-        cases.addAll(genPopulatedCapacityCases(12,  16));\n-        cases.addAll(genPopulatedCapacityCases(13,  32));\n-        cases.addAll(genPopulatedCapacityCases(64, 128));\n+        ArrayList<Object[]> cases = new ArrayList<>();\n+        cases.addAll(genPopulatedCapacityCases(0, 1));\n+        cases.addAll(genPopulatedCapacityCases(1, 1));\n+        cases.addAll(genPopulatedCapacityCases(2, 2));\n+        cases.addAll(genPopulatedCapacityCases(3, 4));\n+        cases.addAll(genPopulatedCapacityCases(4, 4));\n+        cases.addAll(genPopulatedCapacityCases(5, 8));\n+        cases.addAll(genPopulatedCapacityCases(6, 8));\n+        cases.addAll(genPopulatedCapacityCases(7, 8));\n+        cases.addAll(genPopulatedCapacityCases(8, 8));\n+        cases.addAll(genPopulatedCapacityCases(9, 16));\n+        cases.addAll(genPopulatedCapacityCases(10, 16));\n+        cases.addAll(genPopulatedCapacityCases(11, 16));\n+        cases.addAll(genPopulatedCapacityCases(12, 16));\n+        cases.addAll(genPopulatedCapacityCases(13, 16));\n+        cases.addAll(genPopulatedCapacityCases(14, 16));\n+        cases.addAll(genPopulatedCapacityCases(15, 16));\n+        cases.addAll(genPopulatedCapacityCases(16, 16));\n+        cases.addAll(genPopulatedCapacityCases(17, 32));\n+        cases.addAll(genPopulatedCapacityCases(18, 32));\n+        cases.addAll(genPopulatedCapacityCases(19, 32));\n+        cases.addAll(genPopulatedCapacityCases(20, 32));\n+        cases.addAll(genPopulatedCapacityCases(21, 32));\n+        cases.addAll(genPopulatedCapacityCases(22, 32));\n+        cases.addAll(genPopulatedCapacityCases(23, 32));\n+        cases.addAll(genPopulatedCapacityCases(24, 32));\n+        cases.addAll(genPopulatedCapacityCases(25, 32));\n+        cases.addAll(genPopulatedCapacityCases(26, 32));\n+        cases.addAll(genPopulatedCapacityCases(27, 32));\n+        cases.addAll(genPopulatedCapacityCases(28, 32));\n+        cases.addAll(genPopulatedCapacityCases(29, 32));\n+        cases.addAll(genPopulatedCapacityCases(30, 32));\n+        cases.addAll(genPopulatedCapacityCases(31, 32));\n+        cases.addAll(genPopulatedCapacityCases(32, 32));\n+        cases.addAll(genPopulatedCapacityCases(33, 64));\n+        cases.addAll(genPopulatedCapacityCases(34, 64));\n+        cases.addAll(genPopulatedCapacityCases(35, 64));\n+        cases.addAll(genPopulatedCapacityCases(36, 64));\n+        cases.addAll(genPopulatedCapacityCases(37, 64));\n+        cases.addAll(genPopulatedCapacityCases(38, 64));\n+        cases.addAll(genPopulatedCapacityCases(39, 64));\n+        cases.addAll(genPopulatedCapacityCases(40, 64));\n+        cases.addAll(genPopulatedCapacityCases(41, 64));\n+        cases.addAll(genPopulatedCapacityCases(42, 64));\n+        cases.addAll(genPopulatedCapacityCases(43, 64));\n+        cases.addAll(genPopulatedCapacityCases(44, 64));\n+        cases.addAll(genPopulatedCapacityCases(45, 64));\n+        cases.addAll(genPopulatedCapacityCases(46, 64));\n+        cases.addAll(genPopulatedCapacityCases(47, 64));\n+        cases.addAll(genPopulatedCapacityCases(48, 64));\n+        cases.addAll(genPopulatedCapacityCases(49, 64));\n+        cases.addAll(genPopulatedCapacityCases(50, 64));\n+        cases.addAll(genPopulatedCapacityCases(51, 64));\n+        cases.addAll(genPopulatedCapacityCases(52, 64));\n+        cases.addAll(genPopulatedCapacityCases(53, 64));\n+        cases.addAll(genPopulatedCapacityCases(54, 64));\n+        cases.addAll(genPopulatedCapacityCases(55, 64));\n+        cases.addAll(genPopulatedCapacityCases(56, 64));\n+        cases.addAll(genPopulatedCapacityCases(57, 64));\n+        cases.addAll(genPopulatedCapacityCases(58, 64));\n+        cases.addAll(genPopulatedCapacityCases(59, 64));\n+        cases.addAll(genPopulatedCapacityCases(60, 64));\n+        cases.addAll(genPopulatedCapacityCases(61, 64));\n+        cases.addAll(genPopulatedCapacityCases(62, 64));\n+        cases.addAll(genPopulatedCapacityCases(63, 64));\n+        cases.addAll(genPopulatedCapacityCases(64, 64));\n+        cases.addAll(genPopulatedCapacityCases(65, 128));\n+        cases.addAll(genPopulatedCapacityCases(66, 128));\n+        cases.addAll(genPopulatedCapacityCases(67, 128));\n+        cases.addAll(genPopulatedCapacityCases(68, 128));\n+        cases.addAll(genPopulatedCapacityCases(69, 128));\n+        cases.addAll(genPopulatedCapacityCases(70, 128));\n+        cases.addAll(genPopulatedCapacityCases(71, 128));\n+        cases.addAll(genPopulatedCapacityCases(72, 128));\n+        cases.addAll(genPopulatedCapacityCases(73, 128));\n+        cases.addAll(genPopulatedCapacityCases(74, 128));\n+        cases.addAll(genPopulatedCapacityCases(75, 128));\n+        cases.addAll(genPopulatedCapacityCases(76, 128));\n+        cases.addAll(genPopulatedCapacityCases(77, 128));\n+        cases.addAll(genPopulatedCapacityCases(78, 128));\n+        cases.addAll(genPopulatedCapacityCases(79, 128));\n+        cases.addAll(genPopulatedCapacityCases(80, 128));\n+        cases.addAll(genPopulatedCapacityCases(81, 128));\n+        cases.addAll(genPopulatedCapacityCases(82, 128));\n+        cases.addAll(genPopulatedCapacityCases(83, 128));\n+        cases.addAll(genPopulatedCapacityCases(84, 128));\n+        cases.addAll(genPopulatedCapacityCases(85, 128));\n+        cases.addAll(genPopulatedCapacityCases(86, 128));\n+        cases.addAll(genPopulatedCapacityCases(87, 128));\n+        cases.addAll(genPopulatedCapacityCases(88, 128));\n+        cases.addAll(genPopulatedCapacityCases(89, 128));\n+        cases.addAll(genPopulatedCapacityCases(90, 128));\n+        cases.addAll(genPopulatedCapacityCases(91, 128));\n+        cases.addAll(genPopulatedCapacityCases(92, 128));\n+        cases.addAll(genPopulatedCapacityCases(93, 128));\n+        cases.addAll(genPopulatedCapacityCases(94, 128));\n+        cases.addAll(genPopulatedCapacityCases(95, 128));\n+        cases.addAll(genPopulatedCapacityCases(96, 128));\n+        cases.addAll(genPopulatedCapacityCases(97, 128));\n+        cases.addAll(genPopulatedCapacityCases(98, 128));\n+        cases.addAll(genPopulatedCapacityCases(99, 128));\n+        cases.addAll(genPopulatedCapacityCases(100, 128));\n+        cases.addAll(genPopulatedCapacityCases(101, 128));\n+        cases.addAll(genPopulatedCapacityCases(102, 128));\n+        cases.addAll(genPopulatedCapacityCases(103, 128));\n+        cases.addAll(genPopulatedCapacityCases(104, 128));\n+        cases.addAll(genPopulatedCapacityCases(105, 128));\n+        cases.addAll(genPopulatedCapacityCases(106, 128));\n+        cases.addAll(genPopulatedCapacityCases(107, 128));\n+        cases.addAll(genPopulatedCapacityCases(108, 128));\n+        cases.addAll(genPopulatedCapacityCases(109, 128));\n+        cases.addAll(genPopulatedCapacityCases(110, 128));\n+        cases.addAll(genPopulatedCapacityCases(111, 128));\n+        cases.addAll(genPopulatedCapacityCases(112, 128));\n+        cases.addAll(genPopulatedCapacityCases(113, 128));\n+        cases.addAll(genPopulatedCapacityCases(114, 128));\n+        cases.addAll(genPopulatedCapacityCases(115, 128));\n+        cases.addAll(genPopulatedCapacityCases(116, 128));\n+        cases.addAll(genPopulatedCapacityCases(117, 128));\n+        cases.addAll(genPopulatedCapacityCases(118, 128));\n+        cases.addAll(genPopulatedCapacityCases(119, 128));\n+        cases.addAll(genPopulatedCapacityCases(120, 128));\n+        cases.addAll(genPopulatedCapacityCases(121, 128));\n+        cases.addAll(genPopulatedCapacityCases(122, 128));\n+        cases.addAll(genPopulatedCapacityCases(123, 128));\n+        cases.addAll(genPopulatedCapacityCases(124, 128));\n+        cases.addAll(genPopulatedCapacityCases(125, 128));\n+        cases.addAll(genPopulatedCapacityCases(126, 128));\n+        cases.addAll(genPopulatedCapacityCases(127, 128));\n@@ -321,3 +583,3 @@\n-                                  Supplier<Map<Integer,Integer>> s,\n-                                  Consumer<Map<Integer,Integer>> c) {\n-        var map = s.get();\n+                                  Supplier<Map<KeyStructure,Integer>> s,\n+                                  Consumer<Map<KeyStructure,Integer>> c) {\n+        Map<KeyStructure,Integer> map = s.get();\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":368,"deletions":106,"binary":false,"changes":474,"status":"modified"}]}