{"files":[{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -33,1 +34,1 @@\n- * @run main HashMapsPutAllOverAllocateTableTest\n+ * @run junit\/othervm HashMapsPutAllOverAllocateTableTest\n@@ -40,0 +41,1 @@\n+import java.util.List;\n@@ -42,0 +44,2 @@\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n@@ -43,0 +47,6 @@\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n@@ -45,4 +55,19 @@\n-    public static void main(String[] args) throws Exception {\n-        testOneMapClass(HashMap.class);\n-        testOneMapClass(WeakHashMap.class);\n-        testOneMapClass(IdentityHashMap.class);\n+    @Parameterized.Parameters\n+    public static List<Object[]> testFunctionsList() {\n+        return List.of(\n+                new Object[]{\n+                        (Supplier<Map<Object, Object>>) HashMap::new,\n+                        (Function<Integer, Map<Object, Object>>) HashMap::new,\n+                        (Function<Map<Object, Object>, Map<Object, Object>>) HashMap::new,\n+                },\n+                new Object[]{\n+                        (Supplier<Map<Object, Object>>) WeakHashMap::new,\n+                        (Function<Integer, Map<Object, Object>>) WeakHashMap::new,\n+                        (Function<Map<Object, Object>, Map<Object, Object>>) WeakHashMap::new,\n+                },\n+                new Object[]{\n+                        (Supplier<Map<Object, Object>>) IdentityHashMap::new,\n+                        (Function<Integer, Map<Object, Object>>) IdentityHashMap::new,\n+                        (Function<Map<Object, Object>, Map<Object, Object>>) IdentityHashMap::new,\n+                }\n+        );\n@@ -51,21 +76,14 @@\n-    public static <T extends Map<Object, Object>> void testOneMapClass(Class<T> mapClass) throws Exception {\n-        Map<Object, Object> a = mapClass.getDeclaredConstructor().newInstance();\n-        fill12(a);\n-        Map<Object, Object> b = mapClass.getDeclaredConstructor(int.class).newInstance(12);\n-        fill12(b);\n-        Map<Object, Object> c = mapClass.getDeclaredConstructor(Map.class).newInstance(a);\n-        Map<Object, Object> d = mapClass.getDeclaredConstructor().newInstance();\n-        d.putAll(a);\n-        int lengthA = getArrayLength(a);\n-        int lengthB = getArrayLength(b);\n-        int lengthC = getArrayLength(c);\n-        int lengthD = getArrayLength(d);\n-        if (lengthA != lengthB) {\n-            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthB : \" + lengthB);\n-        }\n-        if (lengthA != lengthC) {\n-            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthC : \" + lengthC);\n-        }\n-        if (lengthA != lengthD) {\n-            throw new RuntimeException(\"lengthA not equals lengthB! lengthA : \" + lengthA + \" , lengthD : \" + lengthD);\n-        }\n+    private final Supplier<Map<Object, Object>> createNewMap;\n+\n+    private final Function<Integer, Map<Object, Object>> createNewMapWithInt;\n+\n+    private final Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap;\n+\n+    public HashMapsPutAllOverAllocateTableTest(\n+            Supplier<Map<Object, Object>> createNewMap,\n+            Function<Integer, Map<Object, Object>> createNewMapWithInt,\n+            Function<Map<Object, Object>, Map<Object, Object>> createNewMapWithMap\n+    ) {\n+        this.createNewMap = createNewMap;\n+        this.createNewMapWithInt = createNewMapWithInt;\n+        this.createNewMapWithMap = createNewMapWithMap;\n@@ -87,0 +105,49 @@\n+    @Test\n+    public void test() throws NoSuchFieldException, IllegalAccessException {\n+\n+        Map<Object, Object> a = createNewMap.get();\n+        fill12(a);\n+\n+        {\n+            int length = getArrayLength(a);\n+            Assert.assertEquals(\n+                    \"length a not equals to 16\",\n+                    16,\n+                    length\n+            );\n+        }\n+\n+        {\n+            Map<Object, Object> b = createNewMapWithInt.apply(12);\n+            fill12(b);\n+            int length = getArrayLength(b);\n+            Assert.assertEquals(\n+                    \"length b not equals to 16\",\n+                    16,\n+                    length\n+            );\n+        }\n+\n+        {\n+            Map<Object, Object> c = createNewMapWithMap.apply(a);\n+            int length = getArrayLength(c);\n+            Assert.assertEquals(\n+                    \"length c not equals to 16\",\n+                    16,\n+                    length\n+            );\n+        }\n+\n+        {\n+            Map<Object, Object> d = createNewMap.get();\n+            d.putAll(a);\n+            int length = getArrayLength(d);\n+            Assert.assertEquals(\n+                    \"length d not equals to 16\",\n+                    16,\n+                    length\n+            );\n+        }\n+\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Map\/HashMapsPutAllOverAllocateTableTest.java","additions":93,"deletions":26,"binary":false,"changes":119,"status":"modified"}]}