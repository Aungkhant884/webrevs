{"files":[{"patch":"@@ -225,2 +225,9 @@\n-  sprintf(buf, \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n-  if (_model2) sprintf(buf+strlen(buf), \"(0x%03x)\", _model2);\n+  int printed_len = os::snprintf(buf, sizeof(buf), \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(buf), \"insufficient buf\");\n+  if (_model2) {\n+    size_t remaining_size = sizeof(buf) - printed_len;\n+    printed_len = os::snprintf(buf + printed_len, remaining_size, \"(0x%03x)\", _model2);\n+    assert(printed_len > 0, \"error occurs for os::snprintf\");\n+    assert((size_t)printed_len < remaining_size, \"insufficient buf\");\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -251,1 +251,3 @@\n-  sprintf(ver_str, \"%d\", ATTACH_PROTOCOL_VER);\n+  int printed_ver_len = os::snprintf(ver_str, sizeof(ver_str), \"%d\", ATTACH_PROTOCOL_VER);\n+  assert(printed_ver_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_ver_len < sizeof(ver_str), \"insufficient ver_str buf\");\n@@ -260,1 +262,1 @@\n-  const int max_len = (sizeof(ver_str) + 1) + (AttachOperation::name_length_max + 1) +\n+  const int max_len = (printed_ver_len + 1) + (AttachOperation::name_length_max + 1) +\n@@ -291,1 +293,1 @@\n-          if ((strlen(buf) != strlen(ver_str)) ||\n+          if ((strlen(buf) != (size_t)printed_ver_len) ||\n@@ -294,2 +296,4 @@\n-            sprintf(msg, \"%d\\n\", ATTACH_ERROR_BADVERSION);\n-            write_fully(s, msg, strlen(msg));\n+            int printed_msg_len = os::snprintf(msg, sizeof(msg), \"%d\\n\", ATTACH_ERROR_BADVERSION);\n+            assert(printed_msg_len > 0, \"error occurs at os::snprintf\");\n+            assert((size_t)printed_msg_len < sizeof(msg), \"insufficient msg buf\");\n+            write_fully(s, msg, printed_msg_len);\n@@ -414,2 +418,4 @@\n-  sprintf(msg, \"%d\\n\", result);\n-  int rc = BsdAttachListener::write_fully(this->socket(), msg, strlen(msg));\n+  int printed_msg_len = os::snprintf(msg, sizeof(msg), \"%d\\n\", result);\n+  assert(printed_msg_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_msg_len < sizeof(msg), \"insufficient msg buf\");\n+  int rc = BsdAttachListener::write_fully(this->socket(), msg, printed_msg_len);\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  \/\/ Buffer that fits several sprintfs.\n+  \/\/ Buffer that fits several snprintfs.\n@@ -379,5 +379,6 @@\n-    char *ld_library_path = NEW_C_HEAP_ARRAY(char,\n-                                             strlen(v) + 1 +\n-                                             sizeof(SYS_EXT_DIR) + sizeof(\"\/lib\/\") + strlen(cpu_arch) + sizeof(DEFAULT_LIBPATH) + 1,\n-                                             mtInternal);\n-    sprintf(ld_library_path, \"%s%s\" SYS_EXT_DIR \"\/lib\/%s:\" DEFAULT_LIBPATH, v, v_colon, cpu_arch);\n+    const size_t ld_library_path_size = strlen(v) + 1 + sizeof(SYS_EXT_DIR) +\n+            sizeof(\"\/lib\/\") + strlen(cpu_arch) + sizeof(DEFAULT_LIBPATH) + 1;\n+    char *ld_library_path = NEW_C_HEAP_ARRAY(char, ld_library_path_size, mtInternal);\n+    int printed_len = os::snprintf(ld_library_path, ld_library_path_size, \"%s%s\" SYS_EXT_DIR \"\/lib\/%s:\" DEFAULT_LIBPATH, v, v_colon, cpu_arch);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < ld_library_path_size, \"insufficient ld_library_path buf\");\n@@ -389,1 +390,3 @@\n-  sprintf(buf, \"%s\" EXTENSIONS_DIR \":\" SYS_EXT_DIR EXTENSIONS_DIR, Arguments::get_java_home());\n+  int printed_len = os::snprintf(buf, bufsize, \"%s\" EXTENSIONS_DIR \":\" SYS_EXT_DIR EXTENSIONS_DIR, Arguments::get_java_home());\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < bufsize, \"insufficient buf\");\n@@ -404,1 +407,1 @@\n-  \/\/ Buffer that fits several sprintfs.\n+  \/\/ Buffer that fits several snprintfs.\n@@ -474,5 +477,3 @@\n-    char *ld_library_path = NEW_C_HEAP_ARRAY(char,\n-                                             strlen(v) + 1 + strlen(l) + 1 +\n-                                             system_ext_size + 3,\n-                                             mtInternal);\n-    sprintf(ld_library_path, \"%s%s%s%s%s\" SYS_EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS \":.\",\n+    const size_t ld_library_path_size = strlen(v) + 1 + strlen(l) + 1 + system_ext_size + 3;\n+    char *ld_library_path = NEW_C_HEAP_ARRAY(char, ld_library_path_size, mtInternal);\n+    int printed_len = os::snprintf(ld_library_path, ld_library_path_size, \"%s%s%s%s%s\" SYS_EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS \":.\",\n@@ -480,0 +481,2 @@\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < ld_library_path_size, \"insufficient ld_library_path buf\");\n@@ -489,1 +492,1 @@\n-  sprintf(buf, \"%s\" SYS_EXTENSIONS_DIR \":%s\" EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS,\n+  int printed_len = os::snprintf(buf, bufsize, \"%s\" SYS_EXTENSIONS_DIR \":%s\" EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS,\n@@ -491,0 +494,2 @@\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < bufsize, \"insufficient buf\");\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -214,2 +214,5 @@\n-          char* buf = (char*) AdlAllocateHeap(strlen(instr->_ident) + 4);\n-          sprintf(buf, \"%s_%d\", instr->_ident, match_rules_cnt++);\n+          const size_t buf_size = strlen(instr->_ident) + 4;\n+          char* buf = (char*) AdlAllocateHeap(buf_size);\n+          int printed_len = snprintf(buf, buf_size, \"%s_%d\", instr->_ident, match_rules_cnt++);\n+          assert(printed_len > 0, \"error occurs at snprintf\");\n+          assert((size_t)printed_len < buf_size, \"insufficient buf\");\n@@ -2879,3 +2882,5 @@\n-  char* ec_name = (char*) AdlAllocateHeap(strlen(inst._ident) + strlen(prefix) + 1);\n-  sprintf(ec_name, \"%s%s\", prefix, inst._ident);\n-\n+  const size_t ec_name_size = strlen(inst._ident) + strlen(prefix) + 1;\n+  char* ec_name = (char*) AdlAllocateHeap(ec_name_size);\n+  int printed_len = snprintf(ec_name, ec_name_size, \"%s%s\", prefix, inst._ident);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert((size_t)printed_len < ec_name_size, \"insufficient ec_name buf\");\n@@ -3350,3 +3355,5 @@\n-  char* ec_name = (char*) AdlAllocateHeap(strlen(inst._ident) + strlen(prefix) + 1);\n-  sprintf(ec_name, \"%s%s\", prefix, inst._ident);\n-\n+  const size_t ec_name_size = strlen(inst._ident) + strlen(prefix) + 1;\n+  char* ec_name = (char*) AdlAllocateHeap(ec_name_size);\n+  int printed_len = snprintf(ec_name, ec_name_size, \"%s%s\", prefix, inst._ident);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert((size_t)printed_len < ec_name_size, \"insufficient ec_name buf\");\n@@ -4670,2 +4677,5 @@\n-      char* buf = (char*) AdlAllocateHeap(strlen(param) + 3);\n-      sprintf(buf, \"(%s)\", param);\n+      const size_t buf_size = strlen(param) + 3;\n+      char* buf = (char*) AdlAllocateHeap(buf_size);\n+      int printed_len = snprintf(buf, buf_size, \"(%s)\", param);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert((size_t)printed_len < buf_size, \"insufficient buf\");\n@@ -5278,2 +5288,5 @@\n-  char* location = (char *)AdlAllocateHeap(strlen(file) + 100);\n-  sprintf(location, \"\\n#line %d \\\"%s\\\"\\n\", line, file);\n+  const size_t location_size = strlen(file) + 100;\n+  char* location = (char *)AdlAllocateHeap(location_size);\n+  int printed_len = snprintf(location, location_size, \"\\n#line %d \\\"%s\\\"\\n\", line, file);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert((size_t)printed_len < location_size, \"insufficient location buf\");\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -818,1 +818,3 @@\n-    sprintf(regMask,\"%s%s()\", rc_name, mask);\n+    int printed_len = snprintf(regMask, length, \"%s%s()\", rc_name, mask);\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < length, \"insufficient regMask buf\");\n@@ -911,1 +913,3 @@\n-  sprintf(result,\"%s%s\", stack_or, reg_mask_name);\n+  int printed_len = snprintf(result, length, \"%s%s\", stack_or, reg_mask_name);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert(printed_len < length, \"insufficient result buf\");\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -215,1 +215,3 @@\n-    sprintf(Expr::buffer(), \"_kids[0]->_cost[%s]\", lchild_to_upper);\n+    int printed_len = snprintf(Expr::buffer(), STRING_BUFFER_LENGTH, \"_kids[0]->_cost[%s]\", lchild_to_upper);\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < STRING_BUFFER_LENGTH, \"lchild_to_upper overflow\");\n@@ -221,1 +223,3 @@\n-    sprintf(Expr::buffer(), \"_kids[1]->_cost[%s]\", rchild_to_upper);\n+    int printed_len = snprintf(Expr::buffer(), STRING_BUFFER_LENGTH, \"_kids[1]->_cost[%s]\", rchild_to_upper);\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < STRING_BUFFER_LENGTH, \"rchild_to_upper overflow\");\n@@ -760,1 +764,1 @@\n-    sprintf( string_buffer, \"0\");\n+    snprintf(string_buffer, STRING_BUFFER_LENGTH, \"0\");\n","filename":"src\/hotspot\/share\/adlc\/dfa.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#define remaining_buflen(buffer, position) (sizeof(buffer) - (position - buffer))\n+\n@@ -1536,1 +1538,4 @@\n-      sprintf(s,\"\/*%s*\/(\",(char*)i._key);\n+      size_t remaining_len = remaining_buflen(buf, s);\n+      int printed_len =  snprintf(s, remaining_len, \"\/*%s*\/(\",(char*)i._key);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert((size_t)printed_len < remaining_len, \"insufficient buf\");\n@@ -3475,1 +3480,3 @@\n-  sprintf(subtree,\"_%s_%s_%s\", _opType, lstr, rstr);\n+  int printed_len = snprintf(subtree, len, \"_%s_%s_%s\", _opType, lstr, rstr);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert(printed_len < len, \"insufficient buf\");\n@@ -3922,2 +3929,3 @@\n-  char* buf = (char*) AdlAllocateHeap(strlen(instr_ident) + 4);\n-  sprintf(buf, \"%s_%d\", instr_ident, match_rules_cnt++);\n+  const size_t buf_size = strlen(instr_ident) + 4;\n+  char* buf = (char*) AdlAllocateHeap(buf_size);\n+  snprintf(buf, buf_size, \"%s_%d\", instr_ident, match_rules_cnt++);\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -469,1 +469,3 @@\n-  sprintf(fname,\"%s%s\",base,suffix);\n+  int printed_len = snprintf(fname,len,\"%s%s\",base,suffix);\n+  assert(printed_len > 0, \"error occurs at snprintf\");\n+  assert(printed_len < len, \"insufficient fname buf\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#define remaining_buflen(buffer, position) (sizeof(buffer) - (position - buffer))\n+\n@@ -200,1 +202,2 @@\n-  char *operand_stages = new char [templen];\n+  const size_t operand_stages_size = templen;\n+  char *operand_stages = new char [operand_stages_size];\n@@ -214,3 +217,8 @@\n-    templen += sprintf(&operand_stages[templen], \"  stage_%s%c\\n\",\n-      tmppipeopnd ? tmppipeopnd->_stage : \"undefined\",\n-      (++i < paramcount ? ',' : ' ') );\n+    int remaining_len = operand_stages_size - templen;\n+    int printed_len = snprintf(&operand_stages[templen],\n+        remaining_len, \"  stage_%s%c\\n\",\n+        tmppipeopnd ? tmppipeopnd->_stage : \"undefined\",\n+        (++i < paramcount ? ',' : ' ') );\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < remaining_len, \"insufficient operand_stages buf\");\n+    templen += printed_len;\n@@ -281,0 +289,1 @@\n+  const size_t resource_stages_size = templen;\n@@ -287,5 +296,9 @@\n-\n-    templen += sprintf(&resource_stages[templen], \"  stage_%s%-*s \/\/ %s\\n\",\n-      resname, max_stage - (int)strlen(resname) + 1,\n-      (i < pipeline->_rescount-1) ? \",\" : \"\",\n-      pipeline->_reslist.name(i));\n+    int remaining_len = resource_stages_size - templen;\n+    int printed_len = snprintf(&resource_stages[templen],\n+        remaining_len, \"  stage_%s%-*s \/\/ %s\\n\",\n+        resname, max_stage - (int)strlen(resname) + 1,\n+        (i < pipeline->_rescount-1) ? \",\" : \"\",\n+        pipeline->_reslist.name(i));\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < remaining_len, \"insufficient resource_stages buf\");\n+    templen += printed_len;\n@@ -347,1 +360,3 @@\n-    templen = sprintf(temp, \"%d\", res_cycles[i]);\n+    templen = snprintf(temp, sizeof(temp), \"%d\", res_cycles[i]);\n+    assert(templen > 0, \"error occurs at snprintf\");\n+    assert((size_t)templen < sizeof(temp), \"insufficient temp buf\");\n@@ -356,1 +371,2 @@\n-  char * resource_cycles = new char [templen];\n+  const size_t resource_cycles_size = templen;\n+  char * resource_cycles = new char [resource_cycles_size];\n@@ -361,2 +377,7 @@\n-    templen += sprintf(&resource_cycles[templen], \"  %*d%c \/\/ %s\\n\",\n-      cyclelen, res_cycles[i], (i < pipeline->_rescount-1) ? ',' : ' ', pipeline->_reslist.name(i));\n+    int remaining_len = resource_cycles_size - templen;\n+    int printed_len = snprintf(&resource_cycles[templen], remaining_len,\n+        \"  %*d%c \/\/ %s\\n\", cyclelen, res_cycles[i],\n+        (i < pipeline->_rescount-1) ? ',' : ' ', pipeline->_reslist.name(i));\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < remaining_len, \"insufficient resource_cycles buf\");\n+    templen += printed_len;\n@@ -434,1 +455,2 @@\n-  char * resource_mask = new char [templen];\n+  const size_t resource_mask_size = templen;\n+  char * resource_mask = new char [resource_mask_size];\n@@ -458,2 +480,3 @@\n-    int formatlen =\n-      sprintf(&resource_mask[templen], \"  %s(0x%0*x, %*d, %*d, %s %s(\",\n+    int remaining_len = resource_mask_size - templen;\n+    int formatlen = snprintf(&resource_mask[templen],\n+        remaining_len, \"  %s(0x%0*x, %*d, %*d, %s %s(\",\n@@ -465,1 +488,2 @@\n-\n+    assert(formatlen > 0, \"error occurs at snprintf\");\n+    assert(formatlen < remaining_len, \"insufficient resource_mask buf\");\n@@ -498,2 +522,5 @@\n-      formatlen =\n-        sprintf(&resource_mask[templen], \"0x%08x%s\", res_mask[j], j > 0 ? \", \" : \"\");\n+      remaining_len = resource_mask_size - templen;\n+      formatlen = snprintf(&resource_mask[templen],\n+          remaining_len, \"0x%08x%s\", res_mask[j], j > 0 ? \", \" : \"\");\n+      assert(formatlen > 0, \"error occurs at snprintf\");\n+      assert(formatlen < remaining_len, \"insufficient resource_mask buf\");\n@@ -530,3 +557,4 @@\n-    int printed = sprintf(args, \"0x%x, 0x%x, %u\",\n-      resources_used, resources_used_exclusively, element_count);\n-    assert(printed <= 36, \"overflow\");\n+    int printed_len = snprintf(args, 37, \"0x%x, 0x%x, %u\",\n+        resources_used, resources_used_exclusively, element_count);\n+    assert(printed_len > 0, \"error occurs at snprintf\");\n+    assert(printed_len < 37, \"insufficient resources_used buf\");\n@@ -1069,1 +1097,3 @@\n-        sprintf(inst_prefix, \"inst%d_\",   inst_position);\n+        int printed_len = snprintf(inst_prefix, sizeof(inst_prefix), \"inst%d_\",   inst_position);\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < sizeof(inst_prefix), \"inst_prefix buf overflow\");\n@@ -1071,1 +1101,3 @@\n-        sprintf(receiver,    \"inst%d->\", inst_position);\n+        printed_len = snprintf(receiver, sizeof(receiver), \"inst%d->\", inst_position);\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < sizeof(receiver), \"receiver buf overflow\");\n@@ -1165,1 +1197,3 @@\n-          sprintf(left_reg_index,\",inst%u_idx%u\", (unsigned)left_index, (unsigned)left_op_index);\n+          int printed_len = snprintf(left_reg_index, sizeof(left_reg_index), \",inst%u_idx%u\", (unsigned)left_index, (unsigned)left_op_index);\n+          assert(printed_len > 0, \"error occurs at snprintf\");\n+          assert(printed_len < sizeof(left_reg_index), \"left_reg_index buf overflow\");\n@@ -1177,1 +1211,3 @@\n-            sprintf(right_reg_index,\",inst%u_idx%u\", (unsigned)right_index, (unsigned)right_op_index);\n+            int printed_len = snprintf(right_reg_index, sizeof(right_reg_index), \",inst%u_idx%u\", (unsigned)right_index, (unsigned)right_op_index);\n+            assert(printed_len > 0, \"error occurs at snprintf\");\n+            assert(printed_len < sizeof(right_reg_index), \"right_reg_index buf overflow\");\n@@ -2566,3 +2602,14 @@\n-      ib += sprintf(ib, \"  unsigned idx_%-5s = mach_constant_base_node_input(); \\t\/\/ %s, \\t%s\\n\",\n-                    name, type, arg_name);\n-      nb += sprintf(nb, \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n+      int remaining_len = remaining_buflen(idxbuf, ib);\n+      int printed_len = snprintf(ib, remaining_len,\n+          \"  unsigned idx_%-5s = mach_constant_base_node_input(); \\t\/\/ %s, \\t%s\\n\",\n+          name, type, arg_name);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"ib buf overflow\");\n+      ib += printed_len;\n+\n+      remaining_len = remaining_buflen(nbuf, nb);\n+      printed_len = snprintf(nb, remaining_len,\n+          \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"nb buf overflow\");\n+      nb += printed_len;\n@@ -2575,4 +2622,21 @@\n-      ib += sprintf(ib, \"  unsigned idx_%-5s = idx%d; \\t\/\/ %s, \\t%s\\n\",\n-                    name, idx, type, arg_name);\n-      nb += sprintf(nb, \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n-      ob += sprintf(ob, \"  %sOper *op_%s = (%sOper *)opnd_array(%d);\\n\", type, name, type, idx);\n+      int remaining_len = remaining_buflen(idxbuf, ib);\n+      int printed_len = snprintf(ib, remaining_len,\n+          \"  unsigned idx_%-5s = idx%d; \\t\/\/ %s, \\t%s\\n\",\n+          name, idx, type, arg_name);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"ib buf overflow\");\n+      ib += printed_len;\n+\n+      remaining_len = remaining_buflen(nbuf, nb);\n+      printed_len = snprintf(nb, remaining_len,\n+          \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"nb buf overflow\");\n+      nb += printed_len;\n+\n+      remaining_len = remaining_buflen(opbuf, ob);\n+      printed_len = snprintf(ob, remaining_len,\n+          \"  %sOper *op_%s = (%sOper *)opnd_array(%d);\\n\", type, name, type, idx);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"ob buf overflow\");\n+      ob += printed_len;\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":97,"deletions":33,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -691,1 +691,3 @@\n-  sprintf(message, \"Index %d out of bounds for length %d\", index, a->length());\n+  int printed_len = os::snprintf(message, sizeof(message), \"Index %d out of bounds for length %d\", index, a->length());\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(sizeof(message)), \"message buf overflow\");\n@@ -703,1 +705,3 @@\n-  sprintf(message, \"%d\", index);\n+  int printed_len = os::snprintf(message, sizeof(message), \"%d\", index);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(sizeof(message)), \"message buf overflow\");\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,1 +164,3 @@\n-    sprintf(&header_version[JVM_IDENT_MAX-9], \"%08x\", hash);\n+    int printed_len = os::snprintf(&header_version[JVM_IDENT_MAX-9], 9, \"%08x\", hash);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert(printed_len < 9, \"header_version buf overflow\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2523,1 +2523,2 @@\n-  char* buf = NEW_RESOURCE_ARRAY(char, buf_len + 64);\n+  const size_t buf_size = buf_len + 64;\n+  char* buf = NEW_RESOURCE_ARRAY(char, buf_size);\n@@ -2526,1 +2527,4 @@\n-  sprintf(buf, \"\\tat %s.%s(\", klass_name, method_name);\n+  int printed_len = os::snprintf(buf, buf_size, \"\\tat %s.%s(\", klass_name, method_name);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < buf_size, \"insufficient buf\");\n+  size_t buf_off = printed_len;\n@@ -2530,0 +2534,1 @@\n+    int remaining_len = buf_size - buf_off;\n@@ -2531,3 +2536,9 @@\n-      sprintf(buf + (int)strlen(buf), \"%s@%s\/\", module_name, module_version);\n-    } else {\n-      sprintf(buf + (int)strlen(buf), \"%s\/\", module_name);\n+      int printed_len = os::snprintf(buf + buf_off, remaining_len, \"%s@%s\/\", module_name, module_version);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"buf overflow\");\n+      buf_off += printed_len;\n+    } else {;\n+      int printed_len = os::snprintf(buf + buf_off, remaining_len, \"%s\/\", module_name);\n+      assert(printed_len > 0, \"error occurs at snprintf\");\n+      assert(printed_len < remaining_len, \"buf overflow\");\n+      buf_off += printed_len;\n@@ -2546,0 +2557,1 @@\n+      int remaining_len = buf_size - buf_off;\n@@ -2548,1 +2560,4 @@\n-        sprintf(buf + (int)strlen(buf), \"%s:%d)\", source_file_name, line_number);\n+        int printed_len = os::snprintf(buf + buf_off, remaining_len, \"%s:%d)\", source_file_name, line_number);\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < remaining_len, \"buf overflow\");\n+        buf_off += printed_len;\n@@ -2551,1 +2566,4 @@\n-        sprintf(buf + (int)strlen(buf), \"%s)\", source_file_name);\n+        int printed_len = os::snprintf(buf + buf_off, remaining_len, \"%s)\", source_file_name);\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < remaining_len, \"buf overflow\");\n+        buf_off += printed_len;\n@@ -2554,1 +2572,4 @@\n-        sprintf(buf + (int)strlen(buf), \"Unknown Source)\");\n+        int printed_len = os::snprintf(buf + buf_off, remaining_len, \"Unknown Source)\");\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < remaining_len, \"buf overflow\");\n+        buf_off += printed_len;\n@@ -2556,0 +2577,1 @@\n+\n@@ -2558,1 +2580,5 @@\n-        sprintf(buf + (int)strlen(buf), \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n+        remaining_len = buf_size - buf_off;\n+        int printed_len = os::snprintf(buf + buf_off, remaining_len, \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n+        assert(printed_len > 0, \"error occurs at snprintf\");\n+        assert(printed_len < remaining_len, \"buf overflow\");\n+        buf_off += printed_len;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -780,1 +780,4 @@\n-      char xn[12]; sprintf(xn, \"x%d\", j);\n+      char xn[12];\n+      int printed_len = os::snprintf(xn, sizeof(xn), \"x%d\", j);\n+      assert(printed_len > 0, \"error occurs at os::snprintf\");\n+      assert((size_t)printed_len < sizeof(xn), \"xn buf overflow\");\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -935,1 +935,3 @@\n-    sprintf(name_buffer, \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+    int printed_len = os::snprintf(name_buffer, sizeof(name_buffer), \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < sizeof(name_buffer), \"name_buffer overflow\");\n@@ -957,1 +959,3 @@\n-    sprintf(name_buffer, \"C1 CompilerThread%d\", i);\n+    int printed_len = os::snprintf(name_buffer, sizeof(name_buffer), \"C1 CompilerThread%d\", i);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < sizeof(name_buffer), \"name_buffer overflow\");\n@@ -1021,1 +1025,3 @@\n-        sprintf(name_buffer, \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+        int printed_len = os::snprintf(name_buffer, sizeof(name_buffer), \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+        assert(printed_len > 0, \"error occurs at os::snprintf\");\n+        assert((size_t)printed_len < sizeof(name_buffer), \"name_buffer overflow\");\n@@ -2603,1 +2609,3 @@\n-      sprintf(tier_name, \"Tier%d\", tier);\n+      int printed_len = os::snprintf(tier_name, sizeof(tier_name), \"Tier%d\", tier);\n+      assert(printed_len > 0, \"error occurs at os::snprintf\");\n+      assert((size_t)printed_len < sizeof(tier_name), \"tier_name buf overflow\");\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -232,4 +232,9 @@\n-  if (_indy_index != -1)\n-    sprintf(what, \"indy#%d\", decode_indy_index());\n-  else\n-    sprintf(what, \"condy\");\n+  if (_indy_index != -1) {\n+    int printed_len = os::snprintf(what, sizeof(what), \"indy#%d\", decode_indy_index());\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < sizeof(what), \"what buf overflow\");\n+  } else {\n+    int printed_len = os::snprintf(what, sizeof(what), \"condy\");\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < sizeof(what), \"what buf overflow\");\n+  }\n@@ -251,0 +256,1 @@\n+    int pos = 0;\n@@ -252,1 +258,0 @@\n-      int pos = (int) strlen(argbuf);\n@@ -254,1 +259,5 @@\n-        sprintf(argbuf + pos, \"...\");\n+        int remaining_len = sizeof(argbuf) - pos;\n+        int printed_len = os::snprintf(argbuf + pos, remaining_len, \"...\");\n+        assert(printed_len > 0, \"error occurs at os::snprintf\");\n+        assert(printed_len < remaining_len, \"argbuf overflow\");\n+        pos += printed_len;\n@@ -257,2 +266,8 @@\n-      if (i > 0)  argbuf[pos++] = ',';\n-      sprintf(argbuf+pos, \"%d\", arg_index(i));\n+      if (i > 0) {\n+          argbuf[pos++] = ',';\n+      }\n+      int remaining_len = sizeof(argbuf) - pos;\n+      int printed_len = os::snprintf(argbuf+pos, remaining_len, \"%d\", arg_index(i));\n+      assert(printed_len > 0, \"error occurs at os::snprintf\");\n+      assert(printed_len < remaining_len, \"argbuf overflow\");\n+      pos += printed_len;\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -262,1 +262,3 @@\n-  sprintf(hash_buf, \"\/\" UINTX_FORMAT, hash);\n+  int printed_len = os::snprintf(hash_buf, sizeof(hash_buf), \"\/\" UINTX_FORMAT, hash);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(hash_buf), \"hash_buf overflow\");\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -311,3 +311,5 @@\n-    size_t name_buf_len = strlen(vmField.typeName) + strlen(vmField.fieldName) + 2 \/* \"::\" *\/;\n-    char* name_buf = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, name_buf_len + 1);\n-    sprintf(name_buf, \"%s::%s\", vmField.typeName, vmField.fieldName);\n+    const size_t name_buf_size = strlen(vmField.typeName) + strlen(vmField.fieldName) + 3 \/* \"::\" *\/;\n+    char* name_buf = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, name_buf_size);\n+    int printed_len = os::snprintf(name_buf, name_buf_size, \"%s::%s\", vmField.typeName, vmField.fieldName);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < name_buf_size, \"name_buf overflow\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -177,1 +177,3 @@\n-      sprintf(buf, \"<null>\");\n+      int printed_len = os::snprintf(buf, sizeof(buf), \"<null>\");\n+      assert(printed_len > 0, \"error occurs at os::snprintf\");\n+      assert((size_t)printed_len < sizeof(buf), \"insufficient buf\");\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2599,1 +2599,3 @@\n-  sprintf(buf, \"reason%d\", reason);\n+  int printed_len = os::snprintf(buf, sizeof(buf), \"reason%d\", reason);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(buf), \"insufficient buf\");\n@@ -2609,1 +2611,3 @@\n-  sprintf(buf, \"action%d\", action);\n+  int printed_len = os::snprintf(buf, sizeof(buf), \"action%d\", action);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(buf), \"insufficient buf\");\n@@ -2730,1 +2734,1 @@\n-            if (bc_case == BC_CASE_LIMIT && (int)bc == 0)\n+            if (bc_case == BC_CASE_LIMIT && (int)bc == 0) {\n@@ -2732,1 +2736,2 @@\n-            sprintf(name, \"%s\/%s\/%s\",\n+            }\n+            int printed_len = os::snprintf(name, sizeof(name), \"%s\/%s\/%s\",\n@@ -2736,0 +2741,2 @@\n+            assert(printed_len > 0, \"error occurs at os::snprintf\");\n+            assert((size_t)printed_len < sizeof(name), \"name buffer overflow\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1276,1 +1276,3 @@\n-  sprintf(modified_mode, \"%s\" LINUX_ONLY(\"e\") BSD_ONLY(\"e\") WINDOWS_ONLY(\"N\"), mode);\n+  int printed_len = os::snprintf(modified_mode, sizeof(modified_mode), \"%s\" LINUX_ONLY(\"e\") BSD_ONLY(\"e\") WINDOWS_ONLY(\"N\"), mode);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(modified_mode), \"modified_mode buf overflow\");\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-  _name = NEW_C_HEAP_ARRAY(char, strlen(name) + strlen(prefix) + 2, mtInternal);\n+  const size_t _name_size = strlen(name) + strlen(prefix) + 2;\n+  _name = NEW_C_HEAP_ARRAY(char, _name_size, mtInternal);\n@@ -103,1 +104,3 @@\n-    sprintf(_name, \"%s.%s\", prefix, name);\n+    int printed_len = os::snprintf(_name, _name_size, \"%s.%s\", prefix, name);\n+    assert(printed_len > 0, \"error occurs at os::snprintf\");\n+    assert((size_t)printed_len < _name_size, \"_name buf overflow\");\n@@ -367,1 +370,3 @@\n-   sprintf(result, \"%s.%s\", ns, name);\n+   int printed_len = os::snprintf(result, len, \"%s.%s\", ns, name);\n+   assert(printed_len > 0, \"error occurs at os::snprintf\");\n+   assert((size_t)printed_len < len, \"result buf overflow\");\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -449,1 +449,3 @@\n-  sprintf(buffer, \"printnm: \" INTPTR_FORMAT, p);\n+  int printed_len = os::snprintf(buffer, sizeof(buffer), \"printnm: \" INTPTR_FORMAT, p);\n+  assert(printed_len > 0, \"error occurs at os::snprintf\");\n+  assert((size_t)printed_len < sizeof(buffer), \"buffer overflow\");\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\n+#include \"runtime\/os.hpp\"\n@@ -227,1 +227,1 @@\n-      sprintf(p, \"\\\\u%04x\", c);\n+      os::snprintf(p, 7, \"\\\\u%04x\", c);  \/\/ counting terminating zero in\n@@ -521,1 +521,1 @@\n-      sprintf(p, \"\\\\u%04x\", c);\n+      os::snprintf(p, 7, \"\\\\u%04x\", c);    \/\/ counting terminating zero in\n","filename":"src\/hotspot\/share\/utilities\/utf8.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-                    sprintf(channelName, \"Ch %d\", ch);\n+                    snprintf(channelName, 16, \"Ch %d\", ch);\n","filename":"src\/java.desktop\/macosx\/native\/libjsound\/PLATFORM_API_MacOSX_Ports.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}