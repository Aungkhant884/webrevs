{"files":[{"patch":"@@ -74,0 +74,1 @@\n+bool HeapShared::_disable_writing = false;\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -158,1 +158,6 @@\n-    CDS_JAVA_HEAP_ONLY(return (UseG1GC && UseCompressedOops && UseCompressedClassPointers);)\n+    CDS_JAVA_HEAP_ONLY(\n+      if (_disable_writing) {\n+        return false;\n+      }\n+      return (UseG1GC && UseCompressedOops && UseCompressedClassPointers);\n+    )\n@@ -162,0 +167,3 @@\n+  static void disable_writing() {\n+    CDS_JAVA_HEAP_ONLY(_disable_writing = true;)\n+  }\n@@ -191,0 +199,1 @@\n+  static bool _disable_writing;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-    \/\/ No path entry found for this class. Must be a shared class loaded by the\n+    \/\/ No path entry found for this class: most likely a shared class loaded by the\n@@ -1342,2 +1342,2 @@\n-    if (classpath_index < 0) {\n-      assert(ik->shared_classpath_index() < 0, \"Sanity\");\n+    if (classpath_index < 0 && !SystemDictionaryShared::is_builtin_loader(ik->class_loader_data())) {\n+      assert(ik->shared_classpath_index() < 0, \"not assigned yet\");\n@@ -1362,1 +1362,1 @@\n-  ClassLoaderExt::record_result(classpath_index, ik);\n+  ClassLoaderExt::record_result(classpath_index, ik, stream);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/heapShared.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"classfile\/classFileStream.hpp\"\n@@ -230,1 +232,12 @@\n-void ClassLoaderExt::record_result(const s2 classpath_index, InstanceKlass* result) {\n+bool ClassLoaderExt::is_module_image_path(const char* path) {\n+  char* runtime_boot_path = Arguments::get_sysclasspath();\n+  char* p = strstr((char*)runtime_boot_path, os::path_separator());\n+  size_t module_path_len = (p == NULL) ? strlen(runtime_boot_path) : p - runtime_boot_path + 1;\n+  if (strlen(path) == module_path_len && strncmp(path, runtime_boot_path, module_path_len) == 0) {\n+    return true;\n+  } else {\n+    return false;\n+  }\n+}\n+\n+void ClassLoaderExt::record_result(const s2 classpath_index, InstanceKlass* result, const ClassFileStream* stream) {\n@@ -248,0 +261,17 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+  if (DumpSharedSpaces && AllowArchivingWithJavaAgent && classloader_type == ClassLoader::BOOT_LOADER &&\n+      classpath_index < 0 && HeapShared::can_write() && is_module_image_path(stream->source())) {\n+    \/\/ During static dump, classes for the built-in loaders are always loaded from\n+    \/\/ known locations (jimage, classpath or modulepath), so classpath_index should\n+    \/\/ always be >= 0.\n+    \/\/ The only exception is when a java agent is used during dump time (for testing\n+    \/\/ purposes only). If a class is transformed by the agent, the CodeSource of\n+    \/\/ this class may point to an unknown location. This may break heap object archiving,\n+    \/\/ which requires all the boot classes to be from known locations. This is an\n+    \/\/ uncommon scenario (even in test cases). Let's simply disable heap object archiving.\n+    ResourceMark rm;\n+    log_warning(cds)(\"CDS heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n+                     result->external_name());\n+    HeapShared::disable_writing();\n+  }\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+class ClassFileStream;\n@@ -62,0 +63,1 @@\n+  static bool is_module_image_path(const char* path);\n@@ -114,1 +116,1 @@\n-  static void record_result(const s2 classpath_index, InstanceKlass* result);\n+  static void record_result(const s2 classpath_index, InstanceKlass* result, const ClassFileStream* stream);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -357,0 +357,1 @@\n+ -runtime\/cds\/appcds\/LambdaWithJavaAgent.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276126\n+ * @summary Test static dumping with java agent transforming a class loaded\n+ *          by the boot class loader.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.jvmti\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @compile test-classes\/Hello.java\n+ * @compile test-classes\/TransformBootClass.java\n+ * @run driver LambdaWithJavaAgent\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaWithJavaAgent {\n+\n+    public static String agentClasses[] = {\n+        TransformBootClass.class.getName(),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = Hello.class.getName();\n+        String namePrefix = \"lambda-with-java-agent\";\n+        JarBuilder.build(namePrefix, mainClass);\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String classList = namePrefix + \".list\";\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"TransformBootClass.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/TransformBootClass.mf\"),\n+                                        agentClasses);\n+        String useJavaAgent = \"-javaagent:\" + agentJar + \"=jdk\/internal\/math\/FDBigInteger\";\n+\n+        \/\/ dump class list\n+        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass);\n+\n+        \/\/ create archive with the class list\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n+                       \"-cp\", appJar,\n+                       \"-XX:+AllowArchivingWithJavaAgent\",\n+                       useJavaAgent,\n+                       \"-Xlog:class+load,cds+class=debug,cds\")\n+            .setArchiveName(archiveName);\n+        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n+        output.shouldContain(\"CDS heap objects cannot be written because class jdk.internal.math.FDBigInteger maybe modified by ClassFileLoadHook\")\n+              .shouldContain(\"Skipping jdk\/internal\/math\/FDBigInteger: Unsupported location\")\n+              .shouldMatch(\".class.load.*jdk.internal.math.FDBigInteger.*source.*modules\");\n+\n+        \/\/ run with archive\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\",\n+                       \"-XX:+AllowArchivingWithJavaAgent\",\n+                       useJavaAgent)\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        output = CDSTestUtils.runWithArchive(runOpts);\n+        TestCommon.checkExecReturn(output, 0, true,\n+            \"Hello source: shared objects file\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithJavaAgent.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+\n+public class TransformBootClass implements ClassFileTransformer {\n+\n+    static String targetClass = null;\n+\n+    public byte[] transform(ClassLoader loader, String name, Class<?> classBeingRedefined,\n+                            ProtectionDomain pd, byte[] buffer) throws IllegalClassFormatException {\n+\n+        if (name.equals(targetClass)) {\n+            System.out.println(\"Transforming class \" + name);\n+            return buffer;\n+        }\n+        return null;\n+    }\n+\n+    private static Instrumentation savedInstrumentation;\n+\n+    public static void premain(String agentArguments, Instrumentation instrumentation) {\n+        System.out.println(\"TransformBootClass.premain() is called\");\n+        instrumentation.addTransformer(new TransformBootClass(), \/*canRetransform=*\/true);\n+        savedInstrumentation = instrumentation;\n+        if (agentArguments != null) {\n+            targetClass = agentArguments;\n+        }\n+    }\n+\n+    public static Instrumentation getInstrumentation() {\n+        return savedInstrumentation;\n+    }\n+\n+    public static void agentmain(String args, Instrumentation inst) throws Exception {\n+        premain(args, inst);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/TransformBootClass.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+Manifest-Version: 1.0\n+Premain-Class: TransformBootClass\n+Agent-Class: TransformBootClass\n+Can-Retransform-Classes: true\n+Can-Redefine-Classes: true\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/TransformBootClass.mf","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"}]}