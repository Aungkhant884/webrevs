{"files":[{"patch":"@@ -0,0 +1,31 @@\n+package tools.javac.combo;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.junit.jupiter.api.extension.AfterAllCallback;\r\n+import org.junit.jupiter.api.extension.ExtensionContext;\r\n+import org.junit.jupiter.api.extension.TestWatcher;\r\n+\r\n+public class ComboWatcher implements TestWatcher, AfterAllCallback {\r\n+    private final Set<String> errors = Collections.synchronizedSet(new HashSet<>());\r\n+\r\n+    @Override\r\n+    public void testFailed(ExtensionContext context, Throwable cause) {\r\n+        if (context.getRequiredTestInstance() instanceof JavacTemplateTestBase instance) {\r\n+            errors.addAll(instance.diags.errorKeys());\r\n+            if (instance instanceof CompilationTestCase) {\r\n+                \/\/ Make sure offending template ends up in log file on failure\r\n+                System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", instance.diags.errorKeys(),\r\n+                        instance.sourceFiles.stream().map(SourceFile::template).toList());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void afterAll(ExtensionContext extensionContext) {\r\n+        if (errors.isEmpty()) return;\r\n+        System.err.println(\"Errors found in tests: \" + errors);\r\n+    }\r\n+}\r\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/ComboWatcher.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package tools.javac.combo;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtensionContext;\n-\n-import static java.util.stream.Collectors.toList;\n-\n-\/**\n- * Class for TestWatcher implementation.\n- *\/\n-public class CompilationDiagnosticPrinter extends JavacTemplateTestBase {\n-    @Override\n-    public void testFailed(ExtensionContext context, Throwable cause) {\n-        \/\/ Make sure offending template ends up in log file on failure\n-        System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(),\n-                sourceFiles.stream().map(p -> p.snd).collect(toList()));\n-    }\n-\n-    \/\/ After the suite is done, dump any errors to output\n-    @Override\n-    public void afterTestExecution(ExtensionContext context) {\n-        if (!suiteErrors.isEmpty())\n-            System.err.println(\"Errors found in test suite: \" + suiteErrors);\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/CompilationDiagnosticPrinter.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -34,6 +34,0 @@\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtensionContext;\n-\n-import static java.util.stream.Collectors.toList;\n-\n@@ -44,1 +38,1 @@\n-    private String[] compileOptions = new String[] { };\n+    private String[] compileOptions = new String[]{};\n@@ -74,1 +68,1 @@\n-            compileOptions = new String[] {};\n+            compileOptions = new String[]{};\n@@ -98,2 +92,1 @@\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/CompilationTestCase.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.HashSet;\n@@ -39,1 +38,0 @@\n-import java.util.Set;\n@@ -51,2 +49,0 @@\n-import com.sun.tools.javac.util.Pair;\n-import org.junit.jupiter.api.AfterEach;\n@@ -54,4 +50,1 @@\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtensionContext;\n-import org.junit.jupiter.api.extension.TestWatcher;\n-import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -62,1 +55,1 @@\n- * Base class for template-driven TestNG javac tests that support on-the-fly\n+ * Base class for template-driven JUnit javac tests that support on-the-fly\n@@ -74,5 +67,5 @@\n-public abstract class JavacTemplateTestBase implements TestWatcher, AfterTestExecutionCallback {\n-    protected static final Set<String> suiteErrors = Collections.synchronizedSet(new HashSet<>());\n-    protected static final AtomicInteger counter = new AtomicInteger();\n-    protected static final File root = new File(\"gen\");\n-    protected static final File nullDir = new File(\"empty\");\n+@ExtendWith(ComboWatcher.class)\n+public abstract class JavacTemplateTestBase {\n+    private static final AtomicInteger counter = new AtomicInteger();\n+    private static final File root = new File(\"gen\");\n+    private static final File nullDir = new File(\"empty\");\n@@ -82,1 +75,1 @@\n-    protected final List<Pair<String, String>> sourceFiles = new ArrayList<>();\n+    protected final List<SourceFile> sourceFiles = new ArrayList<>();\n@@ -98,1 +91,1 @@\n-        sourceFiles.add(new Pair<>(name, template));\n+        sourceFiles.add(new SourceFile(name, template));\n@@ -142,18 +135,0 @@\n-    \/\/ After each test method, if the test failed, capture source files and diagnostics and put them in the log\n-    @Override\n-    public void testFailed(ExtensionContext context, Throwable cause) {\n-    }\n-\n-    \/\/ After the suite is done, dump any errors to output\n-    @Override\n-    public void afterTestExecution(ExtensionContext context) {\n-    }\n-\n-    \/**\n-     * Get a description of this test case; since test cases may be combinatorially\n-     * generated, this should include all information needed to describe the test case\n-     *\/\n-    protected String getTestCaseDescription() {\n-        return this.toString();\n-    }\n-\n@@ -247,3 +222,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n-        for (Pair<String, String> e : sourceFiles)\n-            files.add(new FileAdapter(e.fst, e.snd));\n+        var files = sourceFiles.stream().map(FileAdapter::new).toList();\n@@ -257,3 +230,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n-        for (Pair<String, String> e : sourceFiles)\n-            files.add(new FileAdapter(e.fst, e.snd));\n+        var files = sourceFiles.stream().map(FileAdapter::new).toList();\n@@ -263,1 +234,1 @@\n-    private File compile(List<File> classpaths, List<JavaFileObject> files, boolean generate) throws IOException {\n+    private File compile(List<File> classpaths, List<? extends JavaFileObject> files, boolean generate) throws IOException {\n@@ -316,3 +287,3 @@\n-        FileAdapter(String filename, String templateString) {\n-            super(URI.create(\"myfo:\/\" + filename), Kind.SOURCE);\n-            this.templateString = templateString;\n+        FileAdapter(SourceFile file) {\n+            super(URI.create(\"myfo:\/\" + file.name()), Kind.SOURCE);\n+            this.templateString = file.template();\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/JavacTemplateTestBase.java","additions":15,"deletions":44,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1,28 +1,26 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-\n-public class C extends p.q.Q implements I {\n-    public static String cString =  \"CClass\";\n-}\n+\/*\r\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+package tools.javac.combo;\r\n+\r\n+public record SourceFile(String name, String template) {}\r\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/SourceFile.java","additions":26,"deletions":28,"binary":false,"changes":54,"previous_filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/describeConstable\/p\/C.java","status":"copied"},{"patch":"@@ -26,1 +26,2 @@\n-import org.junit.jupiter.api.BeforeAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -28,0 +29,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -32,2 +34,0 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,1 +38,1 @@\n-    static Map<String, Template> vars = new HashMap<>();\n+    final Map<String, Template> vars = new HashMap<>();\n@@ -40,2 +40,2 @@\n-    @BeforeAll\n-    static void before() { vars.clear(); }\n+    @BeforeEach\n+    void before() { vars.clear(); }\n@@ -45,1 +45,1 @@\n-        assertEquals(result, expected, \"for \" + template);\n+        assertEquals(expected, result, \"for \" + template);\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/TemplateTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.io.IOException;\n@@ -28,2 +27,1 @@\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import tools.javac.combo.*;\n+import tools.javac.combo.CompilationTestCase;\n@@ -31,3 +29,0 @@\n-import static java.util.stream.Collectors.toList;\n-\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/expswitch\/ExpSwitchNestingTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/BridgeMethodsTemplateTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import org.junit.jupiter.api.extension.ExtendWith;\n@@ -46,1 +45,0 @@\n-import tools.javac.combo.CompilationDiagnosticPrinter;\n@@ -48,1 +46,0 @@\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/BoundUnboundSearchTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.util.List;\n@@ -28,1 +27,0 @@\n-\n@@ -30,5 +28,1 @@\n-import org.junit.jupiter.api.extension.ExtensionContext;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import tools.javac.combo.*;\n-\n-import static java.util.stream.Collectors.toList;\n+import tools.javac.combo.JavacTemplateTestBase;\n@@ -36,1 +30,0 @@\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/ScopeTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import org.junit.jupiter.api.extension.ExtendWith;\n@@ -38,1 +37,0 @@\n-import tools.javac.combo.CompilationDiagnosticPrinter;\n@@ -40,1 +38,0 @@\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations2.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n- * @run testng\/othervm -DuseAP=false RecordCompilationTests\n- * @run testng\/othervm -DuseAP=true RecordCompilationTests\n+ * @run junit\/othervm -DuseAP=false RecordCompilationTests\n+ * @run junit\/othervm -DuseAP=true RecordCompilationTests\n@@ -100,1 +100,0 @@\n-import org.testng.annotations.Test;\n@@ -102,0 +101,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -104,1 +104,0 @@\n-import static org.testng.Assert.assertEquals;\n@@ -118,2 +117,1 @@\n-@Test\n-public class RecordCompilationTests extends CompilationTestCase {\n+class RecordCompilationTests extends CompilationTestCase {\n@@ -147,1 +145,2 @@\n-    public void testMalformedDeclarations() {\n+    @Test\n+    void testMalformedDeclarations() {\n@@ -169,1 +168,2 @@\n-    public void testGoodDeclarations() {\n+    @Test\n+    void testGoodDeclarations() {\n@@ -199,1 +199,2 @@\n-    public void testGoodMemberDeclarations() {\n+    @Test\n+    void testGoodMemberDeclarations() {\n@@ -210,1 +211,2 @@\n-    public void testBadComponentNames() {\n+    @Test\n+    void testBadComponentNames() {\n@@ -215,1 +217,2 @@\n-    public void testRestrictedIdentifiers() {\n+    @Test\n+    void testRestrictedIdentifiers() {\n@@ -234,1 +237,2 @@\n-    public void testValidMembers() {\n+    @Test\n+    void testValidMembers() {\n@@ -245,1 +249,2 @@\n-    public void testCyclic() {\n+    @Test\n+    void testCyclic() {\n@@ -250,1 +255,2 @@\n-    public void testBadExtends() {\n+    @Test\n+    void testBadExtends() {\n@@ -258,1 +264,2 @@\n-    public void testNoExtendRecord() {\n+    @Test\n+    void testNoExtendRecord() {\n@@ -270,1 +277,2 @@\n-    public void testFieldDeclarations() {\n+    @Test\n+    void testFieldDeclarations() {\n@@ -298,1 +306,2 @@\n-    public void testAccessorRedeclaration() {\n+    @Test\n+    void testAccessorRedeclaration() {\n@@ -354,1 +363,2 @@\n-    public void testConstructorRedeclaration() {\n+    @Test\n+    void testConstructorRedeclaration() {\n@@ -445,1 +455,2 @@\n-    public void testAnnotationCriteria() {\n+    @Test\n+    void testAnnotationCriteria() {\n@@ -454,1 +465,1 @@\n-        assertEquals(goodSet.size() + badSet.size(), values().length);\n+        Assert.check(goodSet.size() + badSet.size() == values().length);\n@@ -478,1 +489,2 @@\n-    public void testNestedRecords() {\n+    @Test\n+    void testNestedRecords() {\n@@ -496,1 +508,2 @@\n-    public void testDuplicatedMember() {\n+    @Test\n+    void testDuplicatedMember() {\n@@ -505,1 +518,2 @@\n-    public void testStaticLocals() {\n+    @Test\n+    void testStaticLocals() {\n@@ -595,1 +609,2 @@\n-    public void testStaticDefinitionsInInnerClasses() {\n+    @Test\n+    void testStaticDefinitionsInInnerClasses() {\n@@ -1061,1 +1076,2 @@\n-    public void testReturnInCanonical_Compact() {\n+    @Test\n+    void testReturnInCanonical_Compact() {\n@@ -1070,1 +1086,2 @@\n-    public void testArgumentsAreNotFinalInCompact() {\n+    @Test\n+    void testArgumentsAreNotFinalInCompact() {\n@@ -1081,1 +1098,2 @@\n-    public void testNoNativeMethods() {\n+    @Test\n+    void testNoNativeMethods() {\n@@ -1088,1 +1106,2 @@\n-    public void testRecordsInsideInner() {\n+    @Test\n+    void testRecordsInsideInner() {\n@@ -1129,1 +1148,2 @@\n-    public void testAnnoInsideLocalOrAnonymous() {\n+    @Test\n+    void testAnnoInsideLocalOrAnonymous() {\n@@ -1233,1 +1253,2 @@\n-    public void testReceiverParameter() {\n+    @Test\n+    void testReceiverParameter() {\n@@ -1261,1 +1282,2 @@\n-    public void testOnlyOneFieldRef() throws Exception {\n+    @Test\n+    void testOnlyOneFieldRef() throws Exception {\n@@ -1312,1 +1334,2 @@\n-    public void testCheckInitializationOrderInCompactConstructor() throws Exception {\n+    @Test\n+    void testCheckInitializationOrderInCompactConstructor() throws Exception {\n@@ -1350,1 +1373,2 @@\n-    public void testAcceptRecordId() {\n+    @Test\n+    void testAcceptRecordId() {\n@@ -1367,1 +1391,2 @@\n-    public void testMultipleAnnosInRecord() throws Exception {\n+    @Test\n+    void testMultipleAnnosInRecord() throws Exception {\n@@ -1408,1 +1433,2 @@\n-    public void testAnnos() throws Exception {\n+    @Test\n+    void testAnnos() throws Exception {\n@@ -1571,1 +1597,2 @@\n-    public void testOnlyTypeAnnotationsOnComponentField() throws Exception {\n+    @Test\n+    void testOnlyTypeAnnotationsOnComponentField() throws Exception {\n@@ -1786,1 +1813,2 @@\n-    public void testMethodsInheritedFromRecordArePublicAndFinal() throws Exception {\n+    @Test\n+    void testMethodsInheritedFromRecordArePublicAndFinal() throws Exception {\n@@ -1805,1 +1833,2 @@\n-    public void testCanonicalAccessibility() throws Exception {\n+    @Test\n+    void testCanonicalAccessibility() throws Exception {\n@@ -1856,1 +1885,2 @@\n-    public void testSameArity() {\n+    @Test\n+    void testSameArity() {\n@@ -1930,1 +1960,2 @@\n-    public void testSafeVararsAnno() {\n+    @Test\n+    void testSafeVararsAnno() {\n@@ -1992,1 +2023,2 @@\n-    public void testOverrideAtAccessor() {\n+    @Test\n+    void testOverrideAtAccessor() {\n@@ -2030,1 +2062,2 @@\n-    public void testNoAssigmentInsideCompactRecord() {\n+    @Test\n+    void testNoAssigmentInsideCompactRecord() {\n@@ -2051,1 +2084,2 @@\n-    public void testNoNPEStaticAnnotatedFields() {\n+    @Test\n+    void testNoNPEStaticAnnotatedFields() {\n@@ -2084,1 +2118,2 @@\n-    public void testDoNotAllowCStyleArraySyntaxForRecComponents() {\n+    @Test\n+    void testDoNotAllowCStyleArraySyntaxForRecComponents() {\n@@ -2102,1 +2137,2 @@\n-    public void testNoWarningForSerializableRecords() {\n+    @Test\n+    void testNoWarningForSerializableRecords() {\n@@ -2117,1 +2153,2 @@\n-    public void testAnnotationsOnVarargsRecComp() {\n+    @Test\n+    void testAnnotationsOnVarargsRecComp() {\n@@ -2152,1 +2189,2 @@\n-    public void testSaveVarargsAnno() {\n+    @Test\n+    void testSaveVarargsAnno() {\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":86,"deletions":48,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.lang.constant.ClassDesc;\n-\n-import java.io.File;\n-\n@@ -48,2 +44,0 @@\n-\n-import java.util.ArrayList;\n@@ -57,1 +51,0 @@\n-\n@@ -64,2 +57,1 @@\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import tools.javac.combo.*;\n+import tools.javac.combo.CompilationTestCase;\n@@ -74,1 +66,0 @@\n-@ExtendWith(CompilationDiagnosticPrinter.class)\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}