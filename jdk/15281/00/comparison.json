{"files":[{"patch":"@@ -1,1 +1,1 @@\n-# This file identifies root(s) of the test-ng hierarchy.\n+# This file identifies root(s) of the JUnit hierarchy.\n@@ -3,1 +3,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/lib\/combo\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package tools.javac.combo;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+\/**\n+ * Class for TestWatcher implementation.\n+ *\/\n+public class CompilationDiagnosticPrinter extends JavacTemplateTestBase {\n+    @Override\n+    public void testFailed(ExtensionContext context, Throwable cause) {\n+        \/\/ Make sure offending template ends up in log file on failure\n+        System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(),\n+                sourceFiles.stream().map(p -> p.snd).collect(toList()));\n+    }\n+\n+    \/\/ After the suite is done, dump any errors to output\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) {\n+        if (!suiteErrors.isEmpty())\n+            System.err.println(\"Errors found in test suite: \" + suiteErrors);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/CompilationDiagnosticPrinter.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,3 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n@@ -43,1 +43,0 @@\n-@Test\n@@ -49,9 +48,0 @@\n-    @AfterMethod\n-    public void dumpTemplateIfError(ITestResult result) {\n-        \/\/ Make sure offending template ends up in log file on failure\n-        if (!result.isSuccess()) {\n-            System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(),\n-                              sourceFiles.stream().map(p -> p.snd).collect(toList()));\n-        }\n-    }\n-\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/CompilationTestCase.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package tools.javac.combo;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import com.sun.tools.javac.util.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+\/**\n+ * Class for TestWatcher implementation.\n+ *\/\n+public class JavacTemplateDiagnosticPrinter extends JavacTemplateTestBase {\n+\n+    \/\/ After each test method, if the test failed, capture source files and diagnostics and put them in the log\n+    @Override\n+    public void testFailed(ExtensionContext context, Throwable cause) {\n+        suiteErrors.addAll(diags.errorKeys());\n+        List<Object> list = new ArrayList<>();\n+        list.add(\"Test case: \" + getTestCaseDescription());\n+        for (Pair<String, String> e : sourceFiles)\n+            list.add(\"Source file \" + e.fst + \": \" + e.snd);\n+        if (diags.errorsFound())\n+            list.add(\"Compile diagnostics: \" + diags.toString());\n+        System.err.printf(Arrays.toString(list.toArray(new Object[0])));\n+    }\n+    \/\/ After the suite is done, dump any errors to output\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) {\n+        if (!suiteErrors.isEmpty())\n+            System.err.println(\"Errors found in test suite: \" + suiteErrors);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/JavacTemplateDiagnosticsPrinter.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,5 +52,6 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n@@ -58,1 +59,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -73,6 +74,5 @@\n-@Test\n-public abstract class JavacTemplateTestBase {\n-    private static final Set<String> suiteErrors = Collections.synchronizedSet(new HashSet<>());\n-    private static final AtomicInteger counter = new AtomicInteger();\n-    private static final File root = new File(\"gen\");\n-    private static final File nullDir = new File(\"empty\");\n+public abstract class JavacTemplateTestBase implements TestWatcher, AfterTestExecutionCallback {\n+    protected static final Set<String> suiteErrors = Collections.synchronizedSet(new HashSet<>());\n+    protected static final AtomicInteger counter = new AtomicInteger();\n+    protected static final File root = new File(\"gen\");\n+    protected static final File nullDir = new File(\"empty\");\n@@ -133,1 +133,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -143,14 +143,2 @@\n-    @AfterMethod\n-    public void copyErrors(ITestResult result) {\n-        if (!result.isSuccess()) {\n-            suiteErrors.addAll(diags.errorKeys());\n-\n-            List<Object> list = new ArrayList<>();\n-            Collections.addAll(list, result.getParameters());\n-            list.add(\"Test case: \" + getTestCaseDescription());\n-            for (Pair<String, String> e : sourceFiles)\n-                list.add(\"Source file \" + e.fst + \": \" + e.snd);\n-            if (diags.errorsFound())\n-                list.add(\"Compile diagnostics: \" + diags.toString());\n-            result.setParameters(list.toArray(new Object[list.size()]));\n-        }\n+    @Override\n+    public void testFailed(ExtensionContext context, Throwable cause) {\n@@ -159,1 +147,0 @@\n-    @AfterSuite\n@@ -161,3 +148,2 @@\n-    public void dumpErrors() {\n-        if (!suiteErrors.isEmpty())\n-            System.err.println(\"Errors found in test suite: \" + suiteErrors);\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) {\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/JavacTemplateTestBase.java","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -32,2 +32,2 @@\n-import static org.testng.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -37,3 +37,2 @@\n-@Test\n-public class TemplateTest {\n-    Map<String, Template> vars = new HashMap<>();\n+class TemplateTest {\n+    static Map<String, Template> vars = new HashMap<>();\n@@ -41,2 +40,2 @@\n-    @BeforeTest\n-    void before() { vars.clear(); }\n+    @BeforeAll\n+    static void before() { vars.clear(); }\n@@ -53,1 +52,2 @@\n-    public void testTemplateExpansion() {\n+    @Test\n+    void testTemplateExpansion() {\n@@ -75,1 +75,2 @@\n-    public void testIndexedTemplate() {\n+    @Test\n+    void testIndexedTemplate() {\n@@ -85,1 +86,2 @@\n-    public void testAngleBrackets() {\n+    @Test\n+    void testAngleBrackets() {\n@@ -90,3 +92,3 @@\n-    @Test(expectedExceptions = IllegalStateException.class )\n-    public void testUnknownKey() {\n-        assertTemplate(\"#{Q}\", \"#{Q}\");\n+    @Test\n+    void testUnknownKey() {\n+        assertThrows(IllegalStateException.class, () -> assertTemplate(\"#{Q}\", \"#{Q}\"));\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/TemplateTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,3 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n-import tools.javac.combo.CompilationTestCase;\n-import tools.javac.combo.JavacTemplateTestBase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import tools.javac.combo.*;\n@@ -35,2 +33,2 @@\n-@Test\n-public class ExpSwitchNestingTest extends CompilationTestCase {\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class ExpSwitchNestingTest extends CompilationTestCase {\n@@ -80,1 +78,2 @@\n-    public void testReallySimpleCases() {\n+    @Test\n+    void testReallySimpleCases() {\n@@ -87,1 +86,2 @@\n-    public void testLambda() {\n+    @Test\n+    void testLambda() {\n@@ -109,1 +109,2 @@\n-    public void testEswitch() {\n+    @Test\n+    void testEswitch() {\n@@ -154,1 +155,2 @@\n-    public void testNestedInExpSwitch() {\n+    @Test\n+    void testNestedInExpSwitch() {\n@@ -187,1 +189,2 @@\n-    public void testBreakExpressionLabelDisambiguation() {\n+    @Test\n+    void testBreakExpressionLabelDisambiguation() {\n@@ -197,1 +200,2 @@\n-    public void testFunReturningSwitchExp() {\n+    @Test\n+    void testFunReturningSwitchExp() {\n@@ -201,1 +205,2 @@\n-    public void testContinueLoops() {\n+    @Test\n+    void testContinueLoops() {\n","filename":"test\/langtools\/tools\/javac\/expswitch\/ExpSwitchNestingTest.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/expswitch\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -59,1 +59,0 @@\n-@Test\n@@ -232,1 +231,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/BridgeMethodTestCase.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-\n-import org.testng.annotations.Test;\n+import tools.javac.combo.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -33,2 +34,2 @@\n-@Test\n-public class BridgeMethodsTemplateTest extends BridgeMethodTestCase {\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class BridgeMethodsTemplateTest extends BridgeMethodTestCase {\n@@ -42,1 +43,2 @@\n-    public void test1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test1() throws IOException, ReflectiveOperationException {\n@@ -55,1 +57,2 @@\n-    public void test2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test2() throws IOException, ReflectiveOperationException {\n@@ -68,1 +71,2 @@\n-    public void test3() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test3() throws IOException, ReflectiveOperationException {\n@@ -81,1 +85,2 @@\n-    public void test4() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test4() throws IOException, ReflectiveOperationException {\n@@ -94,1 +99,2 @@\n-    public void test5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test5() throws IOException, ReflectiveOperationException {\n@@ -107,1 +113,2 @@\n-    public void test6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test6() throws IOException, ReflectiveOperationException {\n@@ -120,1 +127,2 @@\n-    public void test7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test7() throws IOException, ReflectiveOperationException {\n@@ -133,1 +141,2 @@\n-    public void test8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test8() throws IOException, ReflectiveOperationException {\n@@ -146,1 +155,2 @@\n-    public void test9() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test9() throws IOException, ReflectiveOperationException {\n@@ -159,1 +169,2 @@\n-    public void test10() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test10() throws IOException, ReflectiveOperationException {\n@@ -172,1 +183,2 @@\n-    public void test11() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test11() throws IOException, ReflectiveOperationException {\n@@ -186,1 +198,2 @@\n-    public void test12() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test12() throws IOException, ReflectiveOperationException {\n@@ -200,1 +213,2 @@\n-    public void test13() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test13() throws IOException, ReflectiveOperationException {\n@@ -214,1 +228,2 @@\n-    public void test14() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test14() throws IOException, ReflectiveOperationException {\n@@ -228,1 +243,2 @@\n-    public void test15() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test15() throws IOException, ReflectiveOperationException {\n@@ -242,1 +258,2 @@\n-    public void test16() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test16() throws IOException, ReflectiveOperationException {\n@@ -256,1 +273,2 @@\n-    public void test17() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test17() throws IOException, ReflectiveOperationException {\n@@ -270,1 +288,2 @@\n-    public void test18() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test18() throws IOException, ReflectiveOperationException {\n@@ -284,1 +303,2 @@\n-    public void test19() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test19() throws IOException, ReflectiveOperationException {\n@@ -298,1 +318,2 @@\n-    public void test20() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test20() throws IOException, ReflectiveOperationException {\n@@ -312,1 +333,2 @@\n-    public void test21() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test21() throws IOException, ReflectiveOperationException {\n@@ -326,1 +348,2 @@\n-    public void test22() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test22() throws IOException, ReflectiveOperationException {\n@@ -340,1 +363,2 @@\n-    public void test23() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test23() throws IOException, ReflectiveOperationException {\n@@ -354,1 +378,2 @@\n-    public void test24() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test24() throws IOException, ReflectiveOperationException {\n@@ -368,1 +393,2 @@\n-    public void test25() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test25() throws IOException, ReflectiveOperationException {\n@@ -382,1 +408,2 @@\n-    public void test26() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test26() throws IOException, ReflectiveOperationException {\n@@ -395,1 +422,2 @@\n-    public void test27() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test27() throws IOException, ReflectiveOperationException {\n@@ -408,1 +436,2 @@\n-    public void test28() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test28() throws IOException, ReflectiveOperationException {\n@@ -421,1 +450,2 @@\n-    public void test29() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test29() throws IOException, ReflectiveOperationException {\n@@ -435,1 +465,2 @@\n-    public void test30() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test30() throws IOException, ReflectiveOperationException {\n@@ -449,1 +480,2 @@\n-    public void test31() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test31() throws IOException, ReflectiveOperationException {\n@@ -463,1 +495,2 @@\n-    public void test32() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test32() throws IOException, ReflectiveOperationException {\n@@ -477,1 +510,2 @@\n-    public void test33() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test33() throws IOException, ReflectiveOperationException {\n@@ -491,1 +525,2 @@\n-    public void test34() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test34() throws IOException, ReflectiveOperationException {\n@@ -505,1 +540,2 @@\n-    public void test35() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test35() throws IOException, ReflectiveOperationException {\n@@ -519,1 +555,2 @@\n-    public void test36() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test36() throws IOException, ReflectiveOperationException {\n@@ -533,1 +570,2 @@\n-    public void test37() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test37() throws IOException, ReflectiveOperationException {\n@@ -547,1 +585,2 @@\n-    public void test38() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test38() throws IOException, ReflectiveOperationException {\n@@ -561,1 +600,2 @@\n-    public void test39() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test39() throws IOException, ReflectiveOperationException {\n@@ -576,1 +616,2 @@\n-    public void test40() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test40() throws IOException, ReflectiveOperationException {\n@@ -590,1 +631,2 @@\n-    public void test41() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test41() throws IOException, ReflectiveOperationException {\n@@ -604,1 +646,2 @@\n-    public void test42() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test42() throws IOException, ReflectiveOperationException {\n@@ -618,1 +661,2 @@\n-    public void test43() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test43() throws IOException, ReflectiveOperationException {\n@@ -633,1 +677,2 @@\n-    public void test44() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test44() throws IOException, ReflectiveOperationException {\n@@ -648,1 +693,2 @@\n-    public void test45() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test45() throws IOException, ReflectiveOperationException {\n@@ -662,1 +708,2 @@\n-    public void test46() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test46() throws IOException, ReflectiveOperationException {\n@@ -676,1 +723,2 @@\n-    public void test47() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test47() throws IOException, ReflectiveOperationException {\n@@ -690,1 +738,2 @@\n-    public void test48() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test48() throws IOException, ReflectiveOperationException {\n@@ -704,1 +753,2 @@\n-    public void test49() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test49() throws IOException, ReflectiveOperationException {\n@@ -720,1 +770,2 @@\n-    public void test50() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test50() throws IOException, ReflectiveOperationException {\n@@ -735,1 +786,2 @@\n-    public void test51() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test51() throws IOException, ReflectiveOperationException {\n@@ -749,1 +801,2 @@\n-    public void test52() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test52() throws IOException, ReflectiveOperationException {\n@@ -763,1 +816,2 @@\n-    public void test53() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test53() throws IOException, ReflectiveOperationException {\n@@ -778,1 +832,2 @@\n-    public void test54() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test54() throws IOException, ReflectiveOperationException {\n@@ -793,1 +848,2 @@\n-    public void test55() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test55() throws IOException, ReflectiveOperationException {\n@@ -808,1 +864,2 @@\n-    public void test56() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test56() throws IOException, ReflectiveOperationException {\n@@ -823,1 +880,2 @@\n-    public void test57() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test57() throws IOException, ReflectiveOperationException {\n@@ -838,1 +896,2 @@\n-    public void test58() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test58() throws IOException, ReflectiveOperationException {\n@@ -853,1 +912,2 @@\n-    public void test59() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test59() throws IOException, ReflectiveOperationException {\n@@ -868,1 +928,2 @@\n-    public void test60() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test60() throws IOException, ReflectiveOperationException {\n@@ -883,1 +944,2 @@\n-    public void test61() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test61() throws IOException, ReflectiveOperationException {\n@@ -898,1 +960,2 @@\n-    public void test62() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test62() throws IOException, ReflectiveOperationException {\n@@ -913,1 +976,2 @@\n-    public void test63() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test63() throws IOException, ReflectiveOperationException {\n@@ -928,1 +992,2 @@\n-    public void test64() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test64() throws IOException, ReflectiveOperationException {\n@@ -943,1 +1008,2 @@\n-    public void test65() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test65() throws IOException, ReflectiveOperationException {\n@@ -958,1 +1024,2 @@\n-    public void test66() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test66() throws IOException, ReflectiveOperationException {\n@@ -973,1 +1040,2 @@\n-    public void test67() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test67() throws IOException, ReflectiveOperationException {\n@@ -981,1 +1049,2 @@\n-    public void testA1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA1() throws IOException, ReflectiveOperationException {\n@@ -986,1 +1055,2 @@\n-    public void testA2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA2() throws IOException, ReflectiveOperationException {\n@@ -991,1 +1061,2 @@\n-    public void testA3() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA3() throws IOException, ReflectiveOperationException {\n@@ -996,1 +1067,2 @@\n-    public void testA4() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA4() throws IOException, ReflectiveOperationException {\n@@ -1002,1 +1074,2 @@\n-    public void testA5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA5() throws IOException, ReflectiveOperationException {\n@@ -1007,1 +1080,2 @@\n-    public void testA6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA6() throws IOException, ReflectiveOperationException {\n@@ -1013,1 +1087,2 @@\n-    public void testA7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA7() throws IOException, ReflectiveOperationException {\n@@ -1018,1 +1093,2 @@\n-    public void testA8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA8() throws IOException, ReflectiveOperationException {\n@@ -1022,1 +1098,2 @@\n-    public void testA9() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA9() throws IOException, ReflectiveOperationException {\n@@ -1027,1 +1104,2 @@\n-    public void testA10() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA10() throws IOException, ReflectiveOperationException {\n@@ -1031,1 +1109,2 @@\n-    public void testA11() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA11() throws IOException, ReflectiveOperationException {\n@@ -1039,1 +1118,2 @@\n-    public void testB1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB1() throws IOException, ReflectiveOperationException {\n@@ -1046,1 +1126,2 @@\n-    public void testB2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB2() throws IOException, ReflectiveOperationException {\n@@ -1059,1 +1140,2 @@\n-    public void testB5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB5() throws IOException, ReflectiveOperationException {\n@@ -1064,1 +1146,2 @@\n-    public void testB6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB6() throws IOException, ReflectiveOperationException {\n@@ -1069,1 +1152,2 @@\n-    public void testB7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB7() throws IOException, ReflectiveOperationException {\n@@ -1074,1 +1158,2 @@\n-    public void testB8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB8() throws IOException, ReflectiveOperationException {\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/BridgeMethodsTemplateTest.java","additions":174,"deletions":89,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# This file identifies root(s) of the test-ng hierarchy.\n+# This file identifies root(s) of the JUnit hierarchy.\n@@ -3,1 +3,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng BoundUnboundSearchTest\n+ * @run junit BoundUnboundSearchTest\n@@ -43,1 +43,2 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -45,0 +46,1 @@\n+import tools.javac.combo.CompilationDiagnosticPrinter;\n@@ -46,4 +48,2 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n-public class BoundUnboundSearchTest extends CompilationTestCase {\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class BoundUnboundSearchTest extends CompilationTestCase {\n@@ -61,1 +61,1 @@\n-    public BoundUnboundSearchTest() {\n+    BoundUnboundSearchTest() {\n@@ -78,1 +78,2 @@\n-    public void test() {\n+    @Test\n+    void test() {\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/BoundUnboundSearchTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,4 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n-import tools.javac.combo.JavacTemplateTestBase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import tools.javac.combo.*;\n@@ -36,2 +36,2 @@\n-@Test\n-public class ScopeTest extends JavacTemplateTestBase {\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class ScopeTest extends JavacTemplateTestBase {\n@@ -87,8 +87,0 @@\n-    @AfterMethod\n-    public void dumpTemplateIfError(ITestResult result) {\n-        \/\/ Make sure offending template ends up in log file on failure\n-        if (!result.isSuccess()) {\n-            System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(), sourceFiles.stream().map(p -> p.snd).collect(toList()));\n-        }\n-    }\n-\n@@ -124,1 +116,2 @@\n-    public void testIf() {\n+    @Test\n+    void testIf() {\n@@ -131,1 +124,2 @@\n-    public void testWhile() {\n+    @Test\n+    void testWhile() {\n@@ -136,1 +130,2 @@\n-    public void testDoWhile() {\n+    @Test\n+    void testDoWhile() {\n@@ -141,1 +136,2 @@\n-    public void testFor() {\n+    @Test\n+    void testFor() {\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/ScopeTest.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm LocalStaticDeclarations2\n+ * @run junit\/othervm LocalStaticDeclarations2\n@@ -35,1 +35,2 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -37,0 +38,1 @@\n+import tools.javac.combo.CompilationDiagnosticPrinter;\n@@ -38,5 +40,4 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n-public class LocalStaticDeclarations2 extends CompilationTestCase {\n-    public void testLocalStatic() {\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class LocalStaticDeclarations2 extends CompilationTestCase {\n+    @Test\n+    void testLocalStatic() {\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations2.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n- * @run testng\/othervm -DuseAP=false SealedCompilationTests\n- * @run testng\/othervm -DuseAP=true SealedCompilationTests\n+ * @run junit\/othervm -DuseAP=false SealedCompilationTests\n+ * @run junit\/othervm -DuseAP=true SealedCompilationTests\n@@ -63,5 +63,3 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n-import org.testng.annotations.Test;\n-import tools.javac.combo.CompilationTestCase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import tools.javac.combo.*;\n@@ -74,2 +72,4 @@\n-@Test\n-public class SealedCompilationTests extends CompilationTestCase {\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(CompilationDiagnosticPrinter.class)\n+class SealedCompilationTests extends CompilationTestCase {\n@@ -97,1 +97,1 @@\n-    public SealedCompilationTests() {\n+    SealedCompilationTests() {\n@@ -119,1 +119,2 @@\n-    public void testSimpleExtension() {\n+    @Test\n+    void testSimpleExtension() {\n@@ -197,1 +198,2 @@\n-    public void testSealedAndRecords() {\n+    @Test\n+    void testSealedAndRecords() {\n@@ -213,1 +215,2 @@\n-    public void testBadExtension() {\n+    @Test\n+    void testBadExtension() {\n@@ -244,1 +247,2 @@\n-    public void testRestrictedKeyword() {\n+    @Test\n+    void testRestrictedKeyword() {\n@@ -292,1 +296,2 @@\n-    public void testRejectPermitsInNonSealedClass() {\n+    @Test\n+    void testRejectPermitsInNonSealedClass() {\n@@ -305,1 +310,2 @@\n-    public void testTypeInPermitsIsSameClassOrSuper() {\n+    @Test\n+    void testTypeInPermitsIsSameClassOrSuper() {\n@@ -329,1 +335,2 @@\n-    public void testBadModifiers() {\n+    @Test\n+    void testBadModifiers() {\n@@ -347,1 +354,2 @@\n-    public void testAnonymous_FunctionalExpr_and_Sealed() {\n+    @Test\n+    void testAnonymous_FunctionalExpr_and_Sealed() {\n@@ -406,1 +414,2 @@\n-    public void testNoLocalSealedClasses() {\n+    @Test\n+    void testNoLocalSealedClasses() {\n@@ -425,1 +434,2 @@\n-    public void testLocalCantExtendSealed() {\n+    @Test\n+    void testLocalCantExtendSealed() {\n@@ -457,1 +467,2 @@\n-    public void testSealedInterfaceAndAbstracClasses() {\n+    @Test\n+    void testSealedInterfaceAndAbstracClasses() {\n@@ -499,1 +510,2 @@\n-    public void testEnumsCantBeSealedOrNonSealed() {\n+    @Test\n+    void testEnumsCantBeSealedOrNonSealed() {\n@@ -514,1 +526,2 @@\n-    public void testEnumsCanImplementSealedInterfaces() {\n+    @Test\n+    void testEnumsCanImplementSealedInterfaces() {\n@@ -524,1 +537,2 @@\n-    public void testClassesCanExtendNonSealed() {\n+    @Test\n+    void testClassesCanExtendNonSealed() {\n@@ -537,1 +551,2 @@\n-    public void testEmptyPermits() {\n+    @Test\n+    void testEmptyPermits() {\n@@ -547,1 +562,2 @@\n-    public void testTypeVarInPermits() {\n+    @Test\n+    void testTypeVarInPermits() {\n@@ -558,1 +574,2 @@\n-    public void testRepeatedTypeInPermits() {\n+    @Test\n+    void testRepeatedTypeInPermits() {\n@@ -569,1 +586,2 @@\n-    public void testSubtypeDoesntExtendSealed() {\n+    @Test\n+    void testSubtypeDoesntExtendSealed() {\n@@ -593,1 +611,2 @@\n-    public void testAPIForPrimitiveAndArrayClasses() {\n+    @Test\n+    void testAPIForPrimitiveAndArrayClasses() {\n@@ -602,1 +621,2 @@\n-    public void testPrinting() throws Exception {\n+    @Test\n+    void testPrinting() throws Exception {\n@@ -718,1 +738,2 @@\n-    public void testNonSealedErroneousSuper() {\n+    @Test\n+    void testNonSealedErroneousSuper() {\n@@ -730,1 +751,2 @@\n-    public void testNonSealedErroneousSuperInterface() {\n+    @Test\n+    void testNonSealedErroneousSuperInterface() {\n@@ -742,1 +764,2 @@\n-    public void testIllFormedNonSealed() {\n+    @Test\n+    void testIllFormedNonSealed() {\n@@ -770,1 +793,2 @@\n-    public void testPermitsClause() {\n+    @Test\n+    void testPermitsClause() {\n@@ -832,1 +856,2 @@\n-    public void testSealedNonSealedWithOtherModifiers() {\n+    @Test\n+    void testSealedNonSealedWithOtherModifiers() {\n@@ -875,1 +900,2 @@\n-    public void testSubClassBeforeSealedClassInSameCU() {\n+    @Test\n+    void testSubClassBeforeSealedClassInSameCU() {\n@@ -954,1 +980,2 @@\n-    public void testDoNotAllowSealedAnnotation() {\n+    @Test\n+    void testDoNotAllowSealedAnnotation() {\n@@ -965,1 +992,2 @@\n-    public void testNarrowConversion() {\n+    @Test\n+    void testNarrowConversion() {\n@@ -1267,1 +1295,2 @@\n-    public void testIntersectionWithSealedClasses() {\n+    @Test\n+    void testIntersectionWithSealedClasses() {\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":69,"deletions":40,"binary":false,"changes":109,"status":"modified"}]}