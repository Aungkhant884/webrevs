{"files":[{"patch":"@@ -1,1 +1,1 @@\n-# This file identifies root(s) of the test-ng hierarchy.\n+# This file identifies root(s) of the JUnit hierarchy.\n@@ -3,1 +3,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/lib\/combo\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+package tools.javac.combo;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.junit.jupiter.api.extension.AfterAllCallback;\r\n+import org.junit.jupiter.api.extension.ExtensionContext;\r\n+import org.junit.jupiter.api.extension.TestWatcher;\r\n+\r\n+public class ComboWatcher implements TestWatcher, AfterAllCallback {\r\n+    private final Set<String> errors = Collections.synchronizedSet(new HashSet<>());\r\n+\r\n+    @Override\r\n+    public void testFailed(ExtensionContext context, Throwable cause) {\r\n+        if (context.getRequiredTestInstance() instanceof JavacTemplateTestBase instance) {\r\n+            errors.addAll(instance.diags.errorKeys());\r\n+            if (instance instanceof CompilationTestCase) {\r\n+                \/\/ Make sure offending template ends up in log file on failure\r\n+                System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", instance.diags.errorKeys(),\r\n+                        instance.sourceFiles.stream().map(SourceFile::template).toList());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void afterAll(ExtensionContext extensionContext) {\r\n+        if (errors.isEmpty()) return;\r\n+        System.err.println(\"Errors found in tests: \" + errors);\r\n+    }\r\n+}\r\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/ComboWatcher.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,6 +34,0 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n-\n-import static java.util.stream.Collectors.toList;\n-\n@@ -43,1 +37,0 @@\n-@Test\n@@ -45,1 +38,1 @@\n-    private String[] compileOptions = new String[] { };\n+    private String[] compileOptions = new String[]{};\n@@ -49,9 +42,0 @@\n-    @AfterMethod\n-    public void dumpTemplateIfError(ITestResult result) {\n-        \/\/ Make sure offending template ends up in log file on failure\n-        if (!result.isSuccess()) {\n-            System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(),\n-                              sourceFiles.stream().map(p -> p.snd).collect(toList()));\n-        }\n-    }\n-\n@@ -84,1 +68,1 @@\n-            compileOptions = new String[] {};\n+            compileOptions = new String[]{};\n@@ -108,2 +92,1 @@\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/CompilationTestCase.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.util.HashSet;\n@@ -39,1 +38,0 @@\n-import java.util.Set;\n@@ -51,6 +49,2 @@\n-import com.sun.tools.javac.util.Pair;\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -58,1 +52,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -61,1 +55,1 @@\n- * Base class for template-driven TestNG javac tests that support on-the-fly\n+ * Base class for template-driven JUnit javac tests that support on-the-fly\n@@ -73,1 +67,1 @@\n-@Test\n+@ExtendWith(ComboWatcher.class)\n@@ -75,1 +69,0 @@\n-    private static final Set<String> suiteErrors = Collections.synchronizedSet(new HashSet<>());\n@@ -82,1 +75,1 @@\n-    protected final List<Pair<String, String>> sourceFiles = new ArrayList<>();\n+    protected final List<SourceFile> sourceFiles = new ArrayList<>();\n@@ -98,1 +91,1 @@\n-        sourceFiles.add(new Pair<>(name, template));\n+        sourceFiles.add(new SourceFile(name, template));\n@@ -133,1 +126,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n@@ -142,32 +135,0 @@\n-    \/\/ After each test method, if the test failed, capture source files and diagnostics and put them in the log\n-    @AfterMethod\n-    public void copyErrors(ITestResult result) {\n-        if (!result.isSuccess()) {\n-            suiteErrors.addAll(diags.errorKeys());\n-\n-            List<Object> list = new ArrayList<>();\n-            Collections.addAll(list, result.getParameters());\n-            list.add(\"Test case: \" + getTestCaseDescription());\n-            for (Pair<String, String> e : sourceFiles)\n-                list.add(\"Source file \" + e.fst + \": \" + e.snd);\n-            if (diags.errorsFound())\n-                list.add(\"Compile diagnostics: \" + diags.toString());\n-            result.setParameters(list.toArray(new Object[list.size()]));\n-        }\n-    }\n-\n-    @AfterSuite\n-    \/\/ After the suite is done, dump any errors to output\n-    public void dumpErrors() {\n-        if (!suiteErrors.isEmpty())\n-            System.err.println(\"Errors found in test suite: \" + suiteErrors);\n-    }\n-\n-    \/**\n-     * Get a description of this test case; since test cases may be combinatorially\n-     * generated, this should include all information needed to describe the test case\n-     *\/\n-    protected String getTestCaseDescription() {\n-        return this.toString();\n-    }\n-\n@@ -261,3 +222,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n-        for (Pair<String, String> e : sourceFiles)\n-            files.add(new FileAdapter(e.fst, e.snd));\n+        var files = sourceFiles.stream().map(FileAdapter::new).toList();\n@@ -271,3 +230,1 @@\n-        List<JavaFileObject> files = new ArrayList<>();\n-        for (Pair<String, String> e : sourceFiles)\n-            files.add(new FileAdapter(e.fst, e.snd));\n+        var files = sourceFiles.stream().map(FileAdapter::new).toList();\n@@ -277,1 +234,1 @@\n-    private File compile(List<File> classpaths, List<JavaFileObject> files, boolean generate) throws IOException {\n+    private File compile(List<File> classpaths, List<? extends JavaFileObject> files, boolean generate) throws IOException {\n@@ -330,3 +287,3 @@\n-        FileAdapter(String filename, String templateString) {\n-            super(URI.create(\"myfo:\/\" + filename), Kind.SOURCE);\n-            this.templateString = templateString;\n+        FileAdapter(SourceFile file) {\n+            super(URI.create(\"myfo:\/\" + file.name()), Kind.SOURCE);\n+            this.templateString = file.template();\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/JavacTemplateTestBase.java","additions":15,"deletions":58,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1,28 +1,26 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-\n-public class C extends p.q.Q implements I {\n-    public static String cString =  \"CClass\";\n-}\n+\/*\r\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+package tools.javac.combo;\r\n+\r\n+public record SourceFile(String name, String template) {}\r\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/SourceFile.java","additions":26,"deletions":28,"binary":false,"changes":54,"previous_filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/describeConstable\/p\/C.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -32,2 +34,0 @@\n-import static org.testng.Assert.assertEquals;\n-\n@@ -37,3 +37,2 @@\n-@Test\n-public class TemplateTest {\n-    Map<String, Template> vars = new HashMap<>();\n+class TemplateTest {\n+    final Map<String, Template> vars = new HashMap<>();\n@@ -41,1 +40,1 @@\n-    @BeforeTest\n+    @BeforeEach\n@@ -46,1 +45,1 @@\n-        assertEquals(result, expected, \"for \" + template);\n+        assertEquals(expected, result, \"for \" + template);\n@@ -53,1 +52,2 @@\n-    public void testTemplateExpansion() {\n+    @Test\n+    void testTemplateExpansion() {\n@@ -75,1 +75,2 @@\n-    public void testIndexedTemplate() {\n+    @Test\n+    void testIndexedTemplate() {\n@@ -85,1 +86,2 @@\n-    public void testAngleBrackets() {\n+    @Test\n+    void testAngleBrackets() {\n@@ -90,3 +92,3 @@\n-    @Test(expectedExceptions = IllegalStateException.class )\n-    public void testUnknownKey() {\n-        assertTemplate(\"#{Q}\", \"#{Q}\");\n+    @Test\n+    void testUnknownKey() {\n+        assertThrows(IllegalStateException.class, () -> assertTemplate(\"#{Q}\", \"#{Q}\"));\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/TemplateTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.IOException;\n@@ -27,3 +26,1 @@\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -31,1 +28,0 @@\n-import tools.javac.combo.JavacTemplateTestBase;\n@@ -33,4 +29,1 @@\n-import static java.util.stream.Collectors.toList;\n-\n-@Test\n-public class ExpSwitchNestingTest extends CompilationTestCase {\n+class ExpSwitchNestingTest extends CompilationTestCase {\n@@ -80,1 +73,2 @@\n-    public void testReallySimpleCases() {\n+    @Test\n+    void testReallySimpleCases() {\n@@ -87,1 +81,2 @@\n-    public void testLambda() {\n+    @Test\n+    void testLambda() {\n@@ -109,1 +104,2 @@\n-    public void testEswitch() {\n+    @Test\n+    void testEswitch() {\n@@ -154,1 +150,2 @@\n-    public void testNestedInExpSwitch() {\n+    @Test\n+    void testNestedInExpSwitch() {\n@@ -187,1 +184,2 @@\n-    public void testBreakExpressionLabelDisambiguation() {\n+    @Test\n+    void testBreakExpressionLabelDisambiguation() {\n@@ -197,1 +195,2 @@\n-    public void testFunReturningSwitchExp() {\n+    @Test\n+    void testFunReturningSwitchExp() {\n@@ -201,1 +200,2 @@\n-    public void testContinueLoops() {\n+    @Test\n+    void testContinueLoops() {\n","filename":"test\/langtools\/tools\/javac\/expswitch\/ExpSwitchNestingTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/expswitch\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -59,1 +59,0 @@\n-@Test\n@@ -232,1 +231,1 @@\n-    @BeforeMethod\n+    @BeforeEach\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/BridgeMethodTestCase.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-\n-import org.testng.annotations.Test;\n+import tools.javac.combo.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -33,2 +34,1 @@\n-@Test\n-public class BridgeMethodsTemplateTest extends BridgeMethodTestCase {\n+class BridgeMethodsTemplateTest extends BridgeMethodTestCase {\n@@ -42,1 +42,2 @@\n-    public void test1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test1() throws IOException, ReflectiveOperationException {\n@@ -55,1 +56,2 @@\n-    public void test2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test2() throws IOException, ReflectiveOperationException {\n@@ -68,1 +70,2 @@\n-    public void test3() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test3() throws IOException, ReflectiveOperationException {\n@@ -81,1 +84,2 @@\n-    public void test4() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test4() throws IOException, ReflectiveOperationException {\n@@ -94,1 +98,2 @@\n-    public void test5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test5() throws IOException, ReflectiveOperationException {\n@@ -107,1 +112,2 @@\n-    public void test6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test6() throws IOException, ReflectiveOperationException {\n@@ -120,1 +126,2 @@\n-    public void test7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test7() throws IOException, ReflectiveOperationException {\n@@ -133,1 +140,2 @@\n-    public void test8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test8() throws IOException, ReflectiveOperationException {\n@@ -146,1 +154,2 @@\n-    public void test9() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test9() throws IOException, ReflectiveOperationException {\n@@ -159,1 +168,2 @@\n-    public void test10() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test10() throws IOException, ReflectiveOperationException {\n@@ -172,1 +182,2 @@\n-    public void test11() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test11() throws IOException, ReflectiveOperationException {\n@@ -186,1 +197,2 @@\n-    public void test12() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test12() throws IOException, ReflectiveOperationException {\n@@ -200,1 +212,2 @@\n-    public void test13() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test13() throws IOException, ReflectiveOperationException {\n@@ -214,1 +227,2 @@\n-    public void test14() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test14() throws IOException, ReflectiveOperationException {\n@@ -228,1 +242,2 @@\n-    public void test15() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test15() throws IOException, ReflectiveOperationException {\n@@ -242,1 +257,2 @@\n-    public void test16() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test16() throws IOException, ReflectiveOperationException {\n@@ -256,1 +272,2 @@\n-    public void test17() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test17() throws IOException, ReflectiveOperationException {\n@@ -270,1 +287,2 @@\n-    public void test18() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test18() throws IOException, ReflectiveOperationException {\n@@ -284,1 +302,2 @@\n-    public void test19() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test19() throws IOException, ReflectiveOperationException {\n@@ -298,1 +317,2 @@\n-    public void test20() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test20() throws IOException, ReflectiveOperationException {\n@@ -312,1 +332,2 @@\n-    public void test21() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test21() throws IOException, ReflectiveOperationException {\n@@ -326,1 +347,2 @@\n-    public void test22() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test22() throws IOException, ReflectiveOperationException {\n@@ -340,1 +362,2 @@\n-    public void test23() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test23() throws IOException, ReflectiveOperationException {\n@@ -354,1 +377,2 @@\n-    public void test24() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test24() throws IOException, ReflectiveOperationException {\n@@ -368,1 +392,2 @@\n-    public void test25() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test25() throws IOException, ReflectiveOperationException {\n@@ -382,1 +407,2 @@\n-    public void test26() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test26() throws IOException, ReflectiveOperationException {\n@@ -395,1 +421,2 @@\n-    public void test27() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test27() throws IOException, ReflectiveOperationException {\n@@ -408,1 +435,2 @@\n-    public void test28() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test28() throws IOException, ReflectiveOperationException {\n@@ -421,1 +449,2 @@\n-    public void test29() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test29() throws IOException, ReflectiveOperationException {\n@@ -435,1 +464,2 @@\n-    public void test30() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test30() throws IOException, ReflectiveOperationException {\n@@ -449,1 +479,2 @@\n-    public void test31() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test31() throws IOException, ReflectiveOperationException {\n@@ -463,1 +494,2 @@\n-    public void test32() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test32() throws IOException, ReflectiveOperationException {\n@@ -477,1 +509,2 @@\n-    public void test33() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test33() throws IOException, ReflectiveOperationException {\n@@ -491,1 +524,2 @@\n-    public void test34() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test34() throws IOException, ReflectiveOperationException {\n@@ -505,1 +539,2 @@\n-    public void test35() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test35() throws IOException, ReflectiveOperationException {\n@@ -519,1 +554,2 @@\n-    public void test36() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test36() throws IOException, ReflectiveOperationException {\n@@ -533,1 +569,2 @@\n-    public void test37() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test37() throws IOException, ReflectiveOperationException {\n@@ -547,1 +584,2 @@\n-    public void test38() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test38() throws IOException, ReflectiveOperationException {\n@@ -561,1 +599,2 @@\n-    public void test39() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test39() throws IOException, ReflectiveOperationException {\n@@ -576,1 +615,2 @@\n-    public void test40() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test40() throws IOException, ReflectiveOperationException {\n@@ -590,1 +630,2 @@\n-    public void test41() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test41() throws IOException, ReflectiveOperationException {\n@@ -604,1 +645,2 @@\n-    public void test42() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test42() throws IOException, ReflectiveOperationException {\n@@ -618,1 +660,2 @@\n-    public void test43() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test43() throws IOException, ReflectiveOperationException {\n@@ -633,1 +676,2 @@\n-    public void test44() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test44() throws IOException, ReflectiveOperationException {\n@@ -648,1 +692,2 @@\n-    public void test45() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test45() throws IOException, ReflectiveOperationException {\n@@ -662,1 +707,2 @@\n-    public void test46() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test46() throws IOException, ReflectiveOperationException {\n@@ -676,1 +722,2 @@\n-    public void test47() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test47() throws IOException, ReflectiveOperationException {\n@@ -690,1 +737,2 @@\n-    public void test48() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test48() throws IOException, ReflectiveOperationException {\n@@ -704,1 +752,2 @@\n-    public void test49() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test49() throws IOException, ReflectiveOperationException {\n@@ -720,1 +769,2 @@\n-    public void test50() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test50() throws IOException, ReflectiveOperationException {\n@@ -735,1 +785,2 @@\n-    public void test51() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test51() throws IOException, ReflectiveOperationException {\n@@ -749,1 +800,2 @@\n-    public void test52() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test52() throws IOException, ReflectiveOperationException {\n@@ -763,1 +815,2 @@\n-    public void test53() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test53() throws IOException, ReflectiveOperationException {\n@@ -778,1 +831,2 @@\n-    public void test54() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test54() throws IOException, ReflectiveOperationException {\n@@ -793,1 +847,2 @@\n-    public void test55() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test55() throws IOException, ReflectiveOperationException {\n@@ -808,1 +863,2 @@\n-    public void test56() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test56() throws IOException, ReflectiveOperationException {\n@@ -823,1 +879,2 @@\n-    public void test57() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test57() throws IOException, ReflectiveOperationException {\n@@ -838,1 +895,2 @@\n-    public void test58() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test58() throws IOException, ReflectiveOperationException {\n@@ -853,1 +911,2 @@\n-    public void test59() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test59() throws IOException, ReflectiveOperationException {\n@@ -868,1 +927,2 @@\n-    public void test60() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test60() throws IOException, ReflectiveOperationException {\n@@ -883,1 +943,2 @@\n-    public void test61() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test61() throws IOException, ReflectiveOperationException {\n@@ -898,1 +959,2 @@\n-    public void test62() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test62() throws IOException, ReflectiveOperationException {\n@@ -913,1 +975,2 @@\n-    public void test63() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test63() throws IOException, ReflectiveOperationException {\n@@ -928,1 +991,2 @@\n-    public void test64() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test64() throws IOException, ReflectiveOperationException {\n@@ -943,1 +1007,2 @@\n-    public void test65() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test65() throws IOException, ReflectiveOperationException {\n@@ -958,1 +1023,2 @@\n-    public void test66() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test66() throws IOException, ReflectiveOperationException {\n@@ -973,1 +1039,2 @@\n-    public void test67() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void test67() throws IOException, ReflectiveOperationException {\n@@ -981,1 +1048,2 @@\n-    public void testA1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA1() throws IOException, ReflectiveOperationException {\n@@ -986,1 +1054,2 @@\n-    public void testA2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA2() throws IOException, ReflectiveOperationException {\n@@ -991,1 +1060,2 @@\n-    public void testA3() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA3() throws IOException, ReflectiveOperationException {\n@@ -996,1 +1066,2 @@\n-    public void testA4() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA4() throws IOException, ReflectiveOperationException {\n@@ -1002,1 +1073,2 @@\n-    public void testA5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA5() throws IOException, ReflectiveOperationException {\n@@ -1007,1 +1079,2 @@\n-    public void testA6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA6() throws IOException, ReflectiveOperationException {\n@@ -1013,1 +1086,2 @@\n-    public void testA7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA7() throws IOException, ReflectiveOperationException {\n@@ -1018,1 +1092,2 @@\n-    public void testA8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA8() throws IOException, ReflectiveOperationException {\n@@ -1022,1 +1097,2 @@\n-    public void testA9() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA9() throws IOException, ReflectiveOperationException {\n@@ -1027,1 +1103,2 @@\n-    public void testA10() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA10() throws IOException, ReflectiveOperationException {\n@@ -1031,1 +1108,2 @@\n-    public void testA11() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testA11() throws IOException, ReflectiveOperationException {\n@@ -1039,1 +1117,2 @@\n-    public void testB1() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB1() throws IOException, ReflectiveOperationException {\n@@ -1046,1 +1125,2 @@\n-    public void testB2() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB2() throws IOException, ReflectiveOperationException {\n@@ -1059,1 +1139,2 @@\n-    public void testB5() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB5() throws IOException, ReflectiveOperationException {\n@@ -1064,1 +1145,2 @@\n-    public void testB6() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB6() throws IOException, ReflectiveOperationException {\n@@ -1069,1 +1151,2 @@\n-    public void testB7() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB7() throws IOException, ReflectiveOperationException {\n@@ -1074,1 +1157,2 @@\n-    public void testB8() throws IOException, ReflectiveOperationException {\n+    @Test\n+    void testB8() throws IOException, ReflectiveOperationException {\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/BridgeMethodsTemplateTest.java","additions":173,"deletions":89,"binary":false,"changes":262,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# This file identifies root(s) of the test-ng hierarchy.\n+# This file identifies root(s) of the JUnit hierarchy.\n@@ -3,1 +3,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/lambda\/bridge\/template_tests\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng BoundUnboundSearchTest\n+ * @run junit BoundUnboundSearchTest\n@@ -43,1 +43,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -46,4 +46,1 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n-public class BoundUnboundSearchTest extends CompilationTestCase {\n+class BoundUnboundSearchTest extends CompilationTestCase {\n@@ -61,1 +58,1 @@\n-    public BoundUnboundSearchTest() {\n+    BoundUnboundSearchTest() {\n@@ -78,1 +75,2 @@\n-    public void test() {\n+    @Test\n+    void test() {\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/BoundUnboundSearchTest.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.util.List;\n@@ -28,4 +27,1 @@\n-\n-import org.testng.ITestResult;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -34,4 +30,1 @@\n-import static java.util.stream.Collectors.toList;\n-\n-@Test\n-public class ScopeTest extends JavacTemplateTestBase {\n+class ScopeTest extends JavacTemplateTestBase {\n@@ -87,8 +80,0 @@\n-    @AfterMethod\n-    public void dumpTemplateIfError(ITestResult result) {\n-        \/\/ Make sure offending template ends up in log file on failure\n-        if (!result.isSuccess()) {\n-            System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", diags.errorKeys(), sourceFiles.stream().map(p -> p.snd).collect(toList()));\n-        }\n-    }\n-\n@@ -124,1 +109,2 @@\n-    public void testIf() {\n+    @Test\n+    void testIf() {\n@@ -131,1 +117,2 @@\n-    public void testWhile() {\n+    @Test\n+    void testWhile() {\n@@ -136,1 +123,2 @@\n-    public void testDoWhile() {\n+    @Test\n+    void testDoWhile() {\n@@ -141,1 +129,2 @@\n-    public void testFor() {\n+    @Test\n+    void testFor() {\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/ScopeTest.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm LocalStaticDeclarations2\n+ * @run junit\/othervm LocalStaticDeclarations2\n@@ -35,1 +35,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -38,5 +38,3 @@\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n-public class LocalStaticDeclarations2 extends CompilationTestCase {\n-    public void testLocalStatic() {\n+class LocalStaticDeclarations2 extends CompilationTestCase {\n+    @Test\n+    void testLocalStatic() {\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations2.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * @run testng\/othervm -DuseAP=false RecordCompilationTests\n- * @run testng\/othervm -DuseAP=true RecordCompilationTests\n+ * @run junit\/othervm -DuseAP=false RecordCompilationTests\n+ * @run junit\/othervm -DuseAP=true RecordCompilationTests\n@@ -84,1 +84,0 @@\n-import org.testng.annotations.Test;\n@@ -86,0 +85,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -88,1 +88,0 @@\n-import static org.testng.Assert.assertEquals;\n@@ -102,2 +101,1 @@\n-@Test\n-public class RecordCompilationTests extends CompilationTestCase {\n+class RecordCompilationTests extends CompilationTestCase {\n@@ -131,1 +129,2 @@\n-    public void testMalformedDeclarations() {\n+    @Test\n+    void testMalformedDeclarations() {\n@@ -153,1 +152,2 @@\n-    public void testGoodDeclarations() {\n+    @Test\n+    void testGoodDeclarations() {\n@@ -183,1 +183,2 @@\n-    public void testGoodMemberDeclarations() {\n+    @Test\n+    void testGoodMemberDeclarations() {\n@@ -194,1 +195,2 @@\n-    public void testBadComponentNames() {\n+    @Test\n+    void testBadComponentNames() {\n@@ -199,1 +201,2 @@\n-    public void testRestrictedIdentifiers() {\n+    @Test\n+    void testRestrictedIdentifiers() {\n@@ -218,1 +221,2 @@\n-    public void testValidMembers() {\n+    @Test\n+    void testValidMembers() {\n@@ -229,1 +233,2 @@\n-    public void testCyclic() {\n+    @Test\n+    void testCyclic() {\n@@ -234,1 +239,2 @@\n-    public void testBadExtends() {\n+    @Test\n+    void testBadExtends() {\n@@ -242,1 +248,2 @@\n-    public void testNoExtendRecord() {\n+    @Test\n+    void testNoExtendRecord() {\n@@ -254,1 +261,2 @@\n-    public void testFieldDeclarations() {\n+    @Test\n+    void testFieldDeclarations() {\n@@ -282,1 +290,2 @@\n-    public void testAccessorRedeclaration() {\n+    @Test\n+    void testAccessorRedeclaration() {\n@@ -338,1 +347,2 @@\n-    public void testConstructorRedeclaration() {\n+    @Test\n+    void testConstructorRedeclaration() {\n@@ -429,1 +439,2 @@\n-    public void testAnnotationCriteria() {\n+    @Test\n+    void testAnnotationCriteria() {\n@@ -438,1 +449,1 @@\n-        assertEquals(goodSet.size() + badSet.size(), values().length);\n+        Assert.check(goodSet.size() + badSet.size() == values().length);\n@@ -462,1 +473,2 @@\n-    public void testNestedRecords() {\n+    @Test\n+    void testNestedRecords() {\n@@ -480,1 +492,2 @@\n-    public void testDuplicatedMember() {\n+    @Test\n+    void testDuplicatedMember() {\n@@ -489,1 +502,2 @@\n-    public void testStaticLocals() {\n+    @Test\n+    void testStaticLocals() {\n@@ -579,1 +593,2 @@\n-    public void testStaticDefinitionsInInnerClasses() {\n+    @Test\n+    void testStaticDefinitionsInInnerClasses() {\n@@ -1045,1 +1060,2 @@\n-    public void testReturnInCanonical_Compact() {\n+    @Test\n+    void testReturnInCanonical_Compact() {\n@@ -1054,1 +1070,2 @@\n-    public void testArgumentsAreNotFinalInCompact() {\n+    @Test\n+    void testArgumentsAreNotFinalInCompact() {\n@@ -1065,1 +1082,2 @@\n-    public void testNoNativeMethods() {\n+    @Test\n+    void testNoNativeMethods() {\n@@ -1072,1 +1090,2 @@\n-    public void testRecordsInsideInner() {\n+    @Test\n+    void testRecordsInsideInner() {\n@@ -1113,1 +1132,2 @@\n-    public void testAnnoInsideLocalOrAnonymous() {\n+    @Test\n+    void testAnnoInsideLocalOrAnonymous() {\n@@ -1217,1 +1237,2 @@\n-    public void testReceiverParameter() {\n+    @Test\n+    void testReceiverParameter() {\n@@ -1245,1 +1266,2 @@\n-    public void testOnlyOneFieldRef() throws Exception {\n+    @Test\n+    void testOnlyOneFieldRef() throws Exception {\n@@ -1295,3 +1317,4 @@\n-    public void testCheckInitializationOrderInCompactConstructor() throws Exception {\n-        FieldInstruction putField1 = null;\n-        FieldInstruction putField2 = null;\n+    @Test\n+    void testCheckInitializationOrderInCompactConstructor() throws Exception {\n+        int putField1 = -1;\n+        int putField2 = -1;\n@@ -1334,1 +1357,2 @@\n-    public void testAcceptRecordId() {\n+    @Test\n+    void testAcceptRecordId() {\n@@ -1351,1 +1375,2 @@\n-    public void testMultipleAnnosInRecord() throws Exception {\n+    @Test\n+    void testMultipleAnnosInRecord() throws Exception {\n@@ -1392,1 +1417,2 @@\n-    public void testAnnos() throws Exception {\n+    @Test\n+    void testAnnos() throws Exception {\n@@ -1535,1 +1561,2 @@\n-    public void testOnlyTypeAnnotationsOnComponentField() throws Exception {\n+    @Test\n+    void testOnlyTypeAnnotationsOnComponentField() throws Exception {\n@@ -1758,1 +1785,2 @@\n-    public void testMethodsInheritedFromRecordArePublicAndFinal() throws Exception {\n+    @Test\n+    void testMethodsInheritedFromRecordArePublicAndFinal() throws Exception {\n@@ -1777,1 +1805,2 @@\n-    public void testCanonicalAccessibility() throws Exception {\n+    @Test\n+    void testCanonicalAccessibility() throws Exception {\n@@ -1826,1 +1855,2 @@\n-    public void testSameArity() {\n+    @Test\n+    void testSameArity() {\n@@ -1900,1 +1930,2 @@\n-    public void testSafeVararsAnno() {\n+    @Test\n+    void testSafeVararsAnno() {\n@@ -1962,1 +1993,2 @@\n-    public void testOverrideAtAccessor() {\n+    @Test\n+    void testOverrideAtAccessor() {\n@@ -2000,1 +2032,2 @@\n-    public void testNoAssigmentInsideCompactRecord() {\n+    @Test\n+    void testNoAssigmentInsideCompactRecord() {\n@@ -2021,1 +2054,2 @@\n-    public void testNoNPEStaticAnnotatedFields() {\n+    @Test\n+    void testNoNPEStaticAnnotatedFields() {\n@@ -2054,1 +2088,2 @@\n-    public void testDoNotAllowCStyleArraySyntaxForRecComponents() {\n+    @Test\n+    void testDoNotAllowCStyleArraySyntaxForRecComponents() {\n@@ -2072,1 +2107,2 @@\n-    public void testNoWarningForSerializableRecords() {\n+    @Test\n+    void testNoWarningForSerializableRecords() {\n@@ -2087,1 +2123,2 @@\n-    public void testAnnotationsOnVarargsRecComp() {\n+    @Test\n+    void testAnnotationsOnVarargsRecComp() {\n@@ -2122,1 +2159,2 @@\n-    public void testSaveVarargsAnno() {\n+    @Test\n+    void testSaveVarargsAnno() {\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":88,"deletions":50,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n- * @run testng\/othervm -DuseAP=false SealedCompilationTests\n- * @run testng\/othervm -DuseAP=true SealedCompilationTests\n+ * @run junit\/othervm -DuseAP=false SealedCompilationTests\n+ * @run junit\/othervm -DuseAP=true SealedCompilationTests\n@@ -40,4 +40,0 @@\n-import java.lang.constant.ClassDesc;\n-\n-import java.io.File;\n-\n@@ -48,2 +44,0 @@\n-\n-import java.util.ArrayList;\n@@ -57,1 +51,0 @@\n-\n@@ -63,4 +56,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -74,2 +64,3 @@\n-@Test\n-public class SealedCompilationTests extends CompilationTestCase {\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+class SealedCompilationTests extends CompilationTestCase {\n@@ -97,1 +88,1 @@\n-    public SealedCompilationTests() {\n+    SealedCompilationTests() {\n@@ -119,1 +110,2 @@\n-    public void testSimpleExtension() {\n+    @Test\n+    void testSimpleExtension() {\n@@ -197,1 +189,2 @@\n-    public void testSealedAndRecords() {\n+    @Test\n+    void testSealedAndRecords() {\n@@ -213,1 +206,2 @@\n-    public void testBadExtension() {\n+    @Test\n+    void testBadExtension() {\n@@ -244,1 +238,2 @@\n-    public void testRestrictedKeyword() {\n+    @Test\n+    void testRestrictedKeyword() {\n@@ -292,1 +287,2 @@\n-    public void testRejectPermitsInNonSealedClass() {\n+    @Test\n+    void testRejectPermitsInNonSealedClass() {\n@@ -305,1 +301,2 @@\n-    public void testTypeInPermitsIsSameClassOrSuper() {\n+    @Test\n+    void testTypeInPermitsIsSameClassOrSuper() {\n@@ -329,1 +326,2 @@\n-    public void testBadModifiers() {\n+    @Test\n+    void testBadModifiers() {\n@@ -347,1 +345,2 @@\n-    public void testAnonymous_FunctionalExpr_and_Sealed() {\n+    @Test\n+    void testAnonymous_FunctionalExpr_and_Sealed() {\n@@ -406,1 +405,2 @@\n-    public void testNoLocalSealedClasses() {\n+    @Test\n+    void testNoLocalSealedClasses() {\n@@ -425,1 +425,2 @@\n-    public void testLocalCantExtendSealed() {\n+    @Test\n+    void testLocalCantExtendSealed() {\n@@ -457,1 +458,2 @@\n-    public void testSealedInterfaceAndAbstracClasses() {\n+    @Test\n+    void testSealedInterfaceAndAbstracClasses() {\n@@ -499,1 +501,2 @@\n-    public void testEnumsCantBeSealedOrNonSealed() {\n+    @Test\n+    void testEnumsCantBeSealedOrNonSealed() {\n@@ -514,1 +517,2 @@\n-    public void testEnumsCanImplementSealedInterfaces() {\n+    @Test\n+    void testEnumsCanImplementSealedInterfaces() {\n@@ -524,1 +528,2 @@\n-    public void testClassesCanExtendNonSealed() {\n+    @Test\n+    void testClassesCanExtendNonSealed() {\n@@ -537,1 +542,2 @@\n-    public void testEmptyPermits() {\n+    @Test\n+    void testEmptyPermits() {\n@@ -547,1 +553,2 @@\n-    public void testTypeVarInPermits() {\n+    @Test\n+    void testTypeVarInPermits() {\n@@ -558,1 +565,2 @@\n-    public void testRepeatedTypeInPermits() {\n+    @Test\n+    void testRepeatedTypeInPermits() {\n@@ -569,1 +577,2 @@\n-    public void testSubtypeDoesntExtendSealed() {\n+    @Test\n+    void testSubtypeDoesntExtendSealed() {\n@@ -593,1 +602,2 @@\n-    public void testAPIForPrimitiveAndArrayClasses() {\n+    @Test\n+    void testAPIForPrimitiveAndArrayClasses() {\n@@ -602,1 +612,2 @@\n-    public void testPrinting() throws Exception {\n+    @Test\n+    void testPrinting() throws Exception {\n@@ -718,1 +729,2 @@\n-    public void testNonSealedErroneousSuper() {\n+    @Test\n+    void testNonSealedErroneousSuper() {\n@@ -730,1 +742,2 @@\n-    public void testNonSealedErroneousSuperInterface() {\n+    @Test\n+    void testNonSealedErroneousSuperInterface() {\n@@ -742,1 +755,2 @@\n-    public void testIllFormedNonSealed() {\n+    @Test\n+    void testIllFormedNonSealed() {\n@@ -770,1 +784,2 @@\n-    public void testPermitsClause() {\n+    @Test\n+    void testPermitsClause() {\n@@ -832,1 +847,2 @@\n-    public void testSealedNonSealedWithOtherModifiers() {\n+    @Test\n+    void testSealedNonSealedWithOtherModifiers() {\n@@ -875,1 +891,2 @@\n-    public void testSubClassBeforeSealedClassInSameCU() {\n+    @Test\n+    void testSubClassBeforeSealedClassInSameCU() {\n@@ -954,1 +971,2 @@\n-    public void testDoNotAllowSealedAnnotation() {\n+    @Test\n+    void testDoNotAllowSealedAnnotation() {\n@@ -965,1 +983,2 @@\n-    public void testNarrowConversion() {\n+    @Test\n+    void testNarrowConversion() {\n@@ -1267,1 +1286,2 @@\n-    public void testIntersectionWithSealedClasses() {\n+    @Test\n+    void testIntersectionWithSealedClasses() {\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":66,"deletions":46,"binary":false,"changes":112,"status":"modified"}]}