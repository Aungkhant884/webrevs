{"files":[{"patch":"@@ -1,31 +1,31 @@\n-package tools.javac.combo;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import org.junit.jupiter.api.extension.AfterAllCallback;\r\n-import org.junit.jupiter.api.extension.ExtensionContext;\r\n-import org.junit.jupiter.api.extension.TestWatcher;\r\n-\r\n-public class ComboWatcher implements TestWatcher, AfterAllCallback {\r\n-    private final Set<String> errors = Collections.synchronizedSet(new HashSet<>());\r\n-\r\n-    @Override\r\n-    public void testFailed(ExtensionContext context, Throwable cause) {\r\n-        if (context.getRequiredTestInstance() instanceof JavacTemplateTestBase instance) {\r\n-            errors.addAll(instance.diags.errorKeys());\r\n-            if (instance instanceof CompilationTestCase) {\r\n-                \/\/ Make sure offending template ends up in log file on failure\r\n-                System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", instance.diags.errorKeys(),\r\n-                        instance.sourceFiles.stream().map(SourceFile::template).toList());\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void afterAll(ExtensionContext extensionContext) {\r\n-        if (errors.isEmpty()) return;\r\n-        System.err.println(\"Errors found in tests: \" + errors);\r\n-    }\r\n-}\r\n+package tools.javac.combo;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+\n+public class ComboWatcher implements TestWatcher, AfterAllCallback {\n+    private final Set<String> errors = Collections.synchronizedSet(new HashSet<>());\n+\n+    @Override\n+    public void testFailed(ExtensionContext context, Throwable cause) {\n+        if (context.getRequiredTestInstance() instanceof JavacTemplateTestBase instance) {\n+            errors.addAll(instance.diags.errorKeys());\n+            if (instance instanceof CompilationTestCase) {\n+                \/\/ Make sure offending template ends up in log file on failure\n+                System.err.printf(\"Diagnostics: %s%nTemplate: %s%n\", instance.diags.errorKeys(),\n+                        instance.sourceFiles.stream().map(SourceFile::template).toList());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext extensionContext) {\n+        if (errors.isEmpty()) return;\n+        System.err.println(\"Errors found in tests: \" + errors);\n+    }\n+}\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/ComboWatcher.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1,26 +1,26 @@\n-\/*\r\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-package tools.javac.combo;\r\n-\r\n-public record SourceFile(String name, String template) {}\r\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package tools.javac.combo;\n+\n+public record SourceFile(String name, String template) {}\n","filename":"test\/langtools\/lib\/combo\/tools\/javac\/combo\/SourceFile.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"}]}