{"files":[{"patch":"@@ -1896,1 +1896,1 @@\n-void os::pd_pretouch_memory(void *first, void *last, size_t page_size) {\n+void os::pd_pretouch_memory(void* first, void* last, size_t page_size) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1614,1 +1614,1 @@\n-void os::pd_pretouch_memory(void *first, void *last, size_t page_size) {\n+void os::pd_pretouch_memory(void* first, void* last, size_t page_size) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2837,0 +2837,1 @@\n+#define MADV_POPULATE_WRITE_value 23\n@@ -2838,1 +2839,4 @@\n-  #define MADV_POPULATE_WRITE 23\n+  #define MADV_POPULATE_WRITE MADV_POPULATE_WRITE_value\n+#else\n+  \/\/ Sanity-check our assumed default value if we build with a new enough libc.\n+  static_assert(MADV_POPULATE_WRITE == MADV_POPULATE_WRITE_value);\n@@ -2896,1 +2900,1 @@\n-static void warn_fail_pretouch_memory(void *first, void *last, size_t page_size,\n+static void warn_fail_pretouch_memory(void* first, void* last, size_t page_size,\n@@ -2904,2 +2908,2 @@\n-void os::pd_pretouch_memory(void *first, void *last, size_t page_size) {\n-  size_t len = static_cast<char *>(last) - static_cast<char *>(first) + page_size;\n+void os::pd_pretouch_memory(void* first, void* last, size_t page_size) {\n+  const size_t len = pointer_delta(last, first, sizeof(char)) + page_size;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3824,1 +3824,1 @@\n-void os::pd_pretouch_memory(void *first, void *last, size_t page_size) {\n+void os::pd_pretouch_memory(void* first, void* last, size_t page_size) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2118,0 +2118,3 @@\n+  assert(is_aligned(first, page_size), \"pointer \" PTR_FORMAT \" is not page-aligned by %zu\", p2i(first), page_size);\n+  assert(is_aligned(last, page_size), \"pointer \" PTR_FORMAT \" is not page-aligned by %zu\", p2i(last), page_size);\n+  assert(first <= last, \"invalid range: \" PTR_FORMAT \" -> \" PTR_FORMAT, p2i(first), p2i(last));\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-  static void   pd_pretouch_memory(void *first, void *last, size_t page_size);\n+  static void   pd_pretouch_memory(void* first, void* last, size_t page_size);\n@@ -228,4 +228,4 @@\n-  \/\/ Some platforms may have special treatments for pretouch, while most\n-  \/\/ platforms do the same. So the common part of the code was extract here to\n-  \/\/ avoid copying it around.\n-  static void   pretouch_memory_common(void *first, void *last, size_t page_size);\n+  \/\/ Some platforms may have special treatment for pretouch, while most\n+  \/\/ platforms do the same thing. So the common part of the code was extracted\n+  \/\/ here to avoid copying it around.\n+  static void   pretouch_memory_common(void* first, void* last, size_t page_size);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @comment The test is not ParallelGC-specific, but a multi-threaded GC is    \\\n+ * @comment The test is not ParallelGC-specific, but a multi-threaded GC is\n","filename":"test\/hotspot\/jtreg\/gc\/parallel\/TestParallelAlwaysPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}