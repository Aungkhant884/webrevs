{"files":[{"patch":"@@ -56,0 +56,1 @@\n+    PRINT_DYNAMIC           = 1 << 3, \/\/ extra information for invokedynamic (and dynamic constant ...)\n","filename":"src\/hotspot\/share\/classfile\/classPrinter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/handles.inline.hpp\"\n@@ -78,0 +79,1 @@\n+  void      print_constant_nocheck(int i, outputStream* st = tty);\n@@ -310,0 +312,4 @@\n+  print_constant_nocheck(i, st);\n+}\n+\n+void BytecodePrinter::print_constant_nocheck(int i, outputStream* st) {\n@@ -382,1 +388,0 @@\n-}\n@@ -384,0 +389,51 @@\n+  if (ClassPrinter::has_mode(_flags, ClassPrinter::PRINT_DYNAMIC) &&\n+      (tag.is_dynamic_constant() || tag.is_invoke_dynamic())) {\n+    int bsm = constants->bootstrap_method_ref_index_at(i);\n+    const char* ref_kind = \"\";\n+    switch (constants->method_handle_ref_kind_at(bsm)) {\n+    case JVM_REF_getField         : ref_kind = \"REF_getField\"; break;\n+    case JVM_REF_getStatic        : ref_kind = \"REF_getStatic\"; break;\n+    case JVM_REF_putField         : ref_kind = \"REF_putField\"; break;\n+    case JVM_REF_putStatic        : ref_kind = \"REF_putStatic\"; break;\n+    case JVM_REF_invokeVirtual    : ref_kind = \"REF_invokeVirtual\"; break;\n+    case JVM_REF_invokeStatic     : ref_kind = \"REF_invokeStatic\"; break;\n+    case JVM_REF_invokeSpecial    : ref_kind = \"REF_invokeSpecial\"; break;\n+    case JVM_REF_newInvokeSpecial : ref_kind = \"REF_newInvokeSpecial\"; break;\n+    case JVM_REF_invokeInterface  : ref_kind = \"REF_invokeInterface\"; break;\n+    default                       : ShouldNotReachHere();\n+    }\n+    st->print(\"  BSM: %s\", ref_kind);\n+    print_field_or_method(-i, constants->method_handle_index_at(bsm), st);\n+    int argc = constants->bootstrap_argument_count_at(i);\n+    st->print(\"  arguments[%d] = {\", argc);\n+    if (argc > 0) {\n+      st->cr();\n+      for (int arg_i = 0; arg_i < argc; arg_i++) {\n+        int arg = constants->bootstrap_argument_index_at(i, arg_i);\n+        st->print(\"    \");\n+        print_constant_nocheck(arg);\n+      }\n+    }\n+    st->print_cr(\"  }\");\n+    if (tag.is_invoke_dynamic()) {\n+      int indy_index = orig_i;\n+      ConstantPoolCacheEntry* cpce = constants->invokedynamic_cp_cache_entry_at(indy_index);\n+      int cp_cache_index = constants->invokedynamic_cp_cache_index(indy_index);\n+      st->print(\"  ConstantPoolCacheEntry: \");\n+      cpce->print(st, cp_cache_index);\n+      constantPoolHandle cph(Thread::current(), constants);\n+      Method* m = cpce->method_if_resolved(cph);\n+      oop appendix = cpce->appendix_if_resolved(cph);\n+      if (m != NULL) {\n+        st->print_cr(\"  Method: %s.%s%s\", m->method_holder()->name()->as_C_string(),\n+                     m->name()->as_C_string(), m->signature()->as_C_string());\n+      }\n+      if (appendix != NULL) {\n+        st->print(\"  appendix: \");\n+        appendix->print_on(st);\n+      }\n+    } else {\n+      \/\/ TODO: print info for tag.is_dynamic_constant()\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":57,"deletions":1,"binary":false,"changes":58,"status":"modified"}]}