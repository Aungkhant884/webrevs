{"files":[{"patch":"@@ -61,1 +61,1 @@\n-    if (ik->is_loaded() && matches_klass(_class_name_pattern, ik)) {\n+    if (ik->is_loaded() && matches(_class_name_pattern, ik->name())) {\n@@ -67,1 +67,1 @@\n-      _st->print(\"[%3d] \" INTPTR_FORMAT \" %s \", _num++, p2i(k), ik->external_name());\n+      _st->print(\"[%3d] \" INTPTR_FORMAT \" %s \", _num++, p2i(k), ik->name()->as_C_string());\n@@ -127,10 +127,0 @@\n-bool ClassPrinter::matches_klass(const char* pattern, InstanceKlass* ik) {\n-  if (ik->is_hidden()) {\n-    ResourceMark rm;\n-    return matches(pattern, ik->external_name(), 0, 0);\n-  } else {\n-    return matches(pattern, ik->name());\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/share\/classfile\/classPrinter.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    PRINT_METHOD_HANDLE     = 1 << 4, \/\/ extra information for invokehandle\n","filename":"src\/hotspot\/share\/classfile\/classPrinter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,10 +74,13 @@\n-  bool      check_index(int i, int& cp_index, outputStream* st = tty);\n-  bool      check_cp_cache_index(int i, int& cp_index, outputStream* st = tty);\n-  bool      check_obj_index(int i, int& cp_index, outputStream* st = tty);\n-  bool      check_invokedynamic_index(int i, int& cp_index, outputStream* st = tty);\n-  void      print_constant(int i, outputStream* st = tty);\n-  void      print_constant_nocheck(int i, outputStream* st = tty);\n-  void      print_field_or_method(int i, outputStream* st = tty);\n-  void      print_field_or_method(int orig_i, int i, outputStream* st = tty);\n-  void      print_attributes(int bci, outputStream* st = tty);\n-  void      bytecode_epilog(int bci, outputStream* st = tty);\n+  bool      check_index(int i, int& cp_index, outputStream* st);\n+  bool      check_cp_cache_index(int i, int& cp_index, outputStream* st);\n+  bool      check_obj_index(int i, int& cp_index, outputStream* st);\n+  bool      check_invokedynamic_index(int i, int& cp_index, outputStream* st);\n+  void      print_constant(int i, outputStream* st);\n+  void      print_constant_nocheck(int i, outputStream* st);\n+  void      print_cpcache_entry(int cpc_index, outputStream* st);\n+  void      print_dynamic(int orig_i, int i, constantTag tag, outputStream* st);\n+  void      print_field_or_method(int i, outputStream* st);\n+  void      print_field_or_method(int orig_i, int i, outputStream* st);\n+  void      print_invoke_handle(int i, outputStream* st);\n+  void      print_attributes(int bci, outputStream* st);\n+  void      bytecode_epilog(int bci, outputStream* st);\n@@ -127,1 +130,1 @@\n-    print_attributes(bci);\n+    print_attributes(bci, st);\n@@ -391,13 +394,30 @@\n-    int bsm = constants->bootstrap_method_ref_index_at(i);\n-    const char* ref_kind = \"\";\n-    switch (constants->method_handle_ref_kind_at(bsm)) {\n-    case JVM_REF_getField         : ref_kind = \"REF_getField\"; break;\n-    case JVM_REF_getStatic        : ref_kind = \"REF_getStatic\"; break;\n-    case JVM_REF_putField         : ref_kind = \"REF_putField\"; break;\n-    case JVM_REF_putStatic        : ref_kind = \"REF_putStatic\"; break;\n-    case JVM_REF_invokeVirtual    : ref_kind = \"REF_invokeVirtual\"; break;\n-    case JVM_REF_invokeStatic     : ref_kind = \"REF_invokeStatic\"; break;\n-    case JVM_REF_invokeSpecial    : ref_kind = \"REF_invokeSpecial\"; break;\n-    case JVM_REF_newInvokeSpecial : ref_kind = \"REF_newInvokeSpecial\"; break;\n-    case JVM_REF_invokeInterface  : ref_kind = \"REF_invokeInterface\"; break;\n-    default                       : ShouldNotReachHere();\n+    print_dynamic(orig_i, i, tag, st);\n+  }\n+}\n+\n+void BytecodePrinter::print_dynamic(int orig_i, int i, constantTag tag, outputStream* st) {\n+  ConstantPool* constants = method()->constants();\n+  int bsm = constants->bootstrap_method_ref_index_at(i);\n+  const char* ref_kind = \"\";\n+  switch (constants->method_handle_ref_kind_at(bsm)) {\n+  case JVM_REF_getField         : ref_kind = \"REF_getField\"; break;\n+  case JVM_REF_getStatic        : ref_kind = \"REF_getStatic\"; break;\n+  case JVM_REF_putField         : ref_kind = \"REF_putField\"; break;\n+  case JVM_REF_putStatic        : ref_kind = \"REF_putStatic\"; break;\n+  case JVM_REF_invokeVirtual    : ref_kind = \"REF_invokeVirtual\"; break;\n+  case JVM_REF_invokeStatic     : ref_kind = \"REF_invokeStatic\"; break;\n+  case JVM_REF_invokeSpecial    : ref_kind = \"REF_invokeSpecial\"; break;\n+  case JVM_REF_newInvokeSpecial : ref_kind = \"REF_newInvokeSpecial\"; break;\n+  case JVM_REF_invokeInterface  : ref_kind = \"REF_invokeInterface\"; break;\n+  default                       : ShouldNotReachHere();\n+  }\n+  st->print(\"  BSM: %s\", ref_kind);\n+  print_field_or_method(-i, constants->method_handle_index_at(bsm), st);\n+  int argc = constants->bootstrap_argument_count_at(i);\n+  st->print(\"  arguments[%d] = {\", argc);\n+  if (argc > 0) {\n+    st->cr();\n+    for (int arg_i = 0; arg_i < argc; arg_i++) {\n+      int arg = constants->bootstrap_argument_index_at(i, arg_i);\n+      st->print(\"    \");\n+      print_constant_nocheck(arg, st);\n@@ -405,11 +425,31 @@\n-    st->print(\"  BSM: %s\", ref_kind);\n-    print_field_or_method(-i, constants->method_handle_index_at(bsm), st);\n-    int argc = constants->bootstrap_argument_count_at(i);\n-    st->print(\"  arguments[%d] = {\", argc);\n-    if (argc > 0) {\n-      st->cr();\n-      for (int arg_i = 0; arg_i < argc; arg_i++) {\n-        int arg = constants->bootstrap_argument_index_at(i, arg_i);\n-        st->print(\"    \");\n-        print_constant_nocheck(arg);\n-      }\n+  }\n+  st->print_cr(\"  }\");\n+  if (tag.is_invoke_dynamic()) {\n+    int indy_index = orig_i;\n+    int cpc_index = constants->invokedynamic_cp_cache_index(indy_index);\n+    print_cpcache_entry(cpc_index, st);\n+  } else {\n+    \/\/ TODO: print info for tag.is_dynamic_constant()\n+  }\n+}\n+\n+void BytecodePrinter::print_invoke_handle(int i, outputStream* st) {\n+  print_cpcache_entry(ConstantPool::decode_cpcache_index(i), st);\n+}\n+\n+void BytecodePrinter::print_cpcache_entry(int cpc_index, outputStream* st) {\n+  ConstantPool* constants = method()->constants();\n+  ConstantPoolCacheEntry* cpce = constants->cache()->entry_at(cpc_index);\n+  st->print(\"  ConstantPoolCacheEntry: \");\n+  cpce->print(st, cpc_index);\n+  if (cpce->bytecode_1() == Bytecodes::_invokehandle ||\n+      cpce->bytecode_1() == Bytecodes::_invokedynamic) {\n+    constantPoolHandle cph(Thread::current(), constants);\n+    Method* m = cpce->method_if_resolved(cph);\n+    oop appendix = cpce->appendix_if_resolved(cph);\n+    if (m != NULL) {\n+      st->print_cr(\"  Method%s: \" INTPTR_FORMAT \" %s.%s%s\",\n+                   m->is_native() ? \" (native)\" : \"\",\n+                   p2i(m),\n+                   m->method_holder()->name()->as_C_string(),\n+                   m->name()->as_C_string(), m->signature()->as_C_string());\n@@ -417,21 +457,3 @@\n-    st->print_cr(\"  }\");\n-    if (tag.is_invoke_dynamic()) {\n-      int indy_index = orig_i;\n-      ConstantPoolCacheEntry* cpce = constants->invokedynamic_cp_cache_entry_at(indy_index);\n-      int cp_cache_index = constants->invokedynamic_cp_cache_index(indy_index);\n-      st->print(\"  ConstantPoolCacheEntry: \");\n-      cpce->print(st, cp_cache_index);\n-      constantPoolHandle cph(Thread::current(), constants);\n-      Method* m = cpce->method_if_resolved(cph);\n-      oop appendix = cpce->appendix_if_resolved(cph);\n-      if (m != NULL) {\n-        st->print_cr(\"  Method: \" INTPTR_FORMAT \" %s.%s%s\", p2i(m),\n-                     m->method_holder()->name()->as_C_string(),\n-                     m->name()->as_C_string(), m->signature()->as_C_string());\n-      }\n-      if (appendix != NULL) {\n-        st->print(\"  appendix: \");\n-        appendix->print_on(st);\n-      }\n-    } else {\n-      \/\/ TODO: print info for tag.is_dynamic_constant()\n+    if (appendix != NULL) {\n+      st->print(\"  appendix: \");\n+      appendix->print_on(st);\n@@ -602,1 +624,8 @@\n-      print_field_or_method(get_index_u2_cpcache(), st);\n+      {\n+        int i = get_index_u2_cpcache();\n+        print_field_or_method(i, st);\n+        if (raw_code() == Bytecodes::_invokehandle &&\n+            ClassPrinter::has_mode(_flags, ClassPrinter::PRINT_METHOD_HANDLE)) {\n+          print_invoke_handle(i, st);\n+        }\n+      }\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":86,"deletions":57,"binary":false,"changes":143,"status":"modified"}]}