{"files":[{"patch":"@@ -1191,1 +1191,1 @@\n-        List<Element> result = Util.stream(scopeIterable)\n+        Set<Element> result = Util.stream(scopeIterable)\n@@ -1194,1 +1194,1 @@\n-                             .collect(toCollection(ArrayList :: new));\n+                             .collect(toCollection(LinkedHashSet :: new));\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789\n+ * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789 8314662\n@@ -51,0 +51,1 @@\n+import jdk.jshell.MethodSnippet;\n@@ -56,0 +57,1 @@\n+import static jdk.jshell.Snippet.Status.NONEXISTENT;\n@@ -58,0 +60,1 @@\n+import static jdk.jshell.Snippet.Status.RECOVERABLE_DEFINED;\n@@ -800,0 +803,10 @@\n+\n+    \/\/JDK-8314662\n+    public void testDuplicateImport() {\n+        MethodSnippet m1 = methodKey(assertEval(\"void test(String s) { foo(); }\", ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_DEFINED, true, null)));\n+        MethodSnippet m2 = methodKey(assertEval(\"void test(Integer i) { foo(); }\", ste(MAIN_SNIPPET, NONEXISTENT, RECOVERABLE_DEFINED, true, null)));\n+        assertEval(\"void foo() { }\", ste(MAIN_SNIPPET, NONEXISTENT, VALID, true, null),\n+                                     ste(m1, RECOVERABLE_DEFINED, VALID, true, MAIN_SNIPPET),\n+                                     ste(m2, RECOVERABLE_DEFINED, VALID, true, MAIN_SNIPPET));\n+        assertSignature(\"test(|\", \"void test(String s)\", \"void test(Integer i)\");\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}