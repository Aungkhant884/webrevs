{"files":[{"patch":"@@ -1789,0 +1789,10 @@\n+const char* os::Linux::dll_path(void* lib) {\n+  struct link_map *lmap;\n+  int res_dli = ::dlinfo(lib, RTLD_DI_LINKMAP, &lmap);\n+  const char* l_path = \"<none>\";\n+  if (res_dli == 0) {\n+    l_path = lmap->l_name;\n+  }\n+  return l_path;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,0 +123,1 @@\n+  static const char *dll_path(void* lib);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -709,1 +709,19 @@\n-  ::dlclose(lib);\n+  const char* l_path = LINUX_ONLY(os::Linux::dll_path(lib))\n+                       NOT_LINUX(\"<not available>\");\n+  int res = ::dlclose(lib);\n+\n+  if (res == 0) {\n+    Events::log_dll_message(NULL, \"Unloaded shared library \\\"%s\\\" [\" INTPTR_FORMAT \"]\",\n+                            l_path, p2i(lib));\n+    log_info(os)(\"Unloaded shared library \\\"%s\\\" [\" INTPTR_FORMAT \"]\", l_path, p2i(lib));\n+  } else {\n+    const char* error_report = ::dlerror();\n+    if (error_report == NULL) {\n+      error_report = \"dlerror returned no error description\";\n+    }\n+\n+    Events::log_dll_message(NULL, \"Attempt to unload shared library \\\"%s\\\" [\" INTPTR_FORMAT \"] failed, %s\",\n+                            l_path, p2i(lib), error_report);\n+    log_info(os)(\"Attempt to unload shared library \\\"%s\\\" [\" INTPTR_FORMAT \"] failed, %s\",\n+                  l_path, p2i(lib), error_report);\n+  }\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1239,1 +1239,12 @@\n-  ::FreeLibrary((HMODULE)lib);\n+  char name[MAX_PATH];\n+  if (::GetModuleFileName((HMODULE)lib, name, sizeof(name)) == 0) {\n+    name[0] = '\\0';\n+  }\n+  if (::FreeLibrary((HMODULE)lib)) {\n+    Events::log_dll_message(NULL, \"Unloaded dll \\\"%s\\\" [\" INTPTR_FORMAT \"]\", name, p2i(lib));\n+    log_info(os)(\"Unloaded dll \\\"%s\\\" [\" INTPTR_FORMAT \"]\", name, p2i(lib));\n+  } else {\n+    const DWORD errcode = ::GetLastError();\n+    Events::log_dll_message(NULL, \"Attempt to unload dll \\\"%s\\\" [\" INTPTR_FORMAT \"] failed (error code %d)\", name, p2i(lib), errcode);\n+    log_info(os)(\"Attempt to unload dll \\\"%s\\\" [\" INTPTR_FORMAT \"] failed (error code %d)\", name, p2i(lib), errcode);\n+  }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}