{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,3 @@\n+#ifdef _ALLBSD_SOURCE\n+#include <sys\/attr.h>\n+#endif\n@@ -143,0 +146,13 @@\n+    \/\/ flags used with setattrlist\n+#ifdef _ALLBSD_SOURCE\n+    static final int PREFIX_ATTR_CMN_CRTIME = ATTR_CMN_CRTIME;\n+    static final int PREFIX_ATTR_CMN_MODTIME = ATTR_CMN_MODTIME;\n+    static final int PREFIX_ATTR_CMN_ACCTIME = ATTR_CMN_ACCTIME;\n+    static final int PREFIX_FSOPT_NOFOLLOW = FSOPT_NOFOLLOW;\n+#else\n+    \/\/ not supported (dummy values will not be used at runtime).\n+    static final int PREFIX_ATTR_CMN_CRTIME = 00;\n+    static final int PREFIX_ATTR_CMN_MODTIME = 00;\n+    static final int PREFIX_ATTR_CMN_ACCTIME = 00;\n+    static final int PREFIX_FSOPT_NOFOLLOW = 00;\n+#endif\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixConstants.java.template","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,1 +66,2 @@\n-            if (lastModifiedTime == null && lastAccessTime == null) {\n+            if (lastModifiedTime == null && lastAccessTime == null &&\n+                (createTime == null || !setattrlistSupported())) {\n@@ -74,0 +75,28 @@\n+            if (setattrlistSupported()) {\n+                int commonattr = 0;\n+                long modValue = 0L;\n+                if (lastModifiedTime != null) {\n+                    modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+                    commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n+                }\n+                long accValue = 0L;\n+                if (lastAccessTime != null) {\n+                    accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n+                    commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n+                }\n+                long createValue = 0L;\n+                if (createTime != null) {\n+                    createValue = createTime.to(TimeUnit.NANOSECONDS);\n+                    commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n+                }\n+                try {\n+                    long options = followLinks ?\n+                        0 : UnixConstants.FSOPT_NOFOLLOW;\n+                    setattrlist(file, commonattr, modValue, accValue,\n+                                createValue, options);\n+                    return;\n+                } catch (UnixException x) {\n+                    x.rethrowAsIOException(file);\n+                }\n+            }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -530,0 +530,22 @@\n+    \/**\n+     * setattrlist(const char* path, struct attrlist* attrList, void* attrBuf,\n+     *             size_t attrBufSize, unsigned long options)\n+     *\/\n+    static void setattrlist(UnixPath path, int commonattr, long modTime,\n+                            long accTime, long createTime, long options)\n+        throws UnixException {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            long comp = Blocker.begin();\n+            try {\n+                setattrlist0(buffer.address(), commonattr, modTime, accTime,\n+                             createTime, options);\n+            } finally {\n+                Blocker.end(comp);\n+            }\n+        }\n+    }\n+    private static native void setattrlist0(long pathAddress, int commonattr,\n+                                            long modTime, long accTime,\n+                                            long createTime, long options)\n+        throws UnixException;\n+\n@@ -769,0 +791,1 @@\n+    private static final int SUPPORTS_SETATTRLIST   = 1 << 6;\n@@ -807,0 +830,7 @@\n+    \/**\n+     * Supports setting file creation time attribute\n+     *\/\n+    static boolean setattrlistSupported() {\n+        return (capabilities & SUPPORTS_SETATTRLIST) != 0;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include <sys\/attr.h>\n@@ -294,0 +295,1 @@\n+    capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_SETATTRLIST;\n@@ -751,0 +753,43 @@\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_UnixNativeDispatcher_setattrlist0(JNIEnv* env, jclass this,\n+    jlong pathAddress, int commonattr, jlong modTime, jlong accTime,\n+    jlong createTime, jlong options)\n+{\n+#ifdef _ALLBSD_SOURCE\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+    \/\/ attributes must align on 4-byte boundaries per the getattrlist(2) spec\n+    const int attrsize = ((sizeof(struct timespec) + 3)\/4)*4;\n+    char buf[3*attrsize];\n+\n+    int count = 0;\n+    \/\/ attributes are ordered per the getattrlist(2) spec\n+    if ((commonattr & ATTR_CMN_CRTIME) != 0) {\n+        struct timespec* t = (struct timespec*)buf;\n+        t->tv_sec   = createTime \/ 1000000000;\n+        t->tv_nsec  = createTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_MODTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = modTime \/ 1000000000;\n+        t->tv_nsec  = modTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_ACCTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = accTime \/ 1000000000;\n+        t->tv_nsec  = accTime % 1000000000;\n+        count++;\n+    }\n+\n+    struct attrlist attrList;\n+    memset(&attrList, 0, sizeof(struct attrlist));\n+    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;\n+    attrList.commonattr = commonattr;\n+\n+    if (setattrlist(path, &attrList, (void*)buf, count*attrsize, options) != 0) {\n+        throwUnixException(env, errno);\n+    }\n+#endif\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8011536\n+ * @bug 8011536 8151430\n@@ -28,1 +28,3 @@\n- * @library ..\/..\n+ * @library  ..\/.. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main CreationTime\n@@ -37,0 +39,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -75,4 +79,7 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (os.contains(\"OS X\") && Files.getFileStore(file).type().equals(\"hfs\")) {\n-            supportsCreationTimeRead = true;\n-        } else if (os.startsWith(\"Windows\")) {\n+        if (Platform.isOSX()) {\n+            String type = Files.getFileStore(file).type();\n+            if (type.equals(\"apfs\") || type.equals(\"hfs\")) {\n+                supportsCreationTimeRead = true;\n+                supportsCreationTimeWrite = true;\n+            }\n+        } else if (Platform.isWindows()) {\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"}]}