{"files":[{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import java.nio.file.attribute.FileTime;\n+import java.util.concurrent.TimeUnit;\n+import static sun.nio.fs.BsdNativeDispatcher.setattrlist;\n+\n+class BsdFileAttributeViews {\n+    \/\/\n+    \/\/ Use setattrlist(2) system call which can set creation, modification,\n+    \/\/ and access times.\n+    \/\/\n+    private static void setTimes(UnixPath path, FileTime lastModifiedTime,\n+                                 FileTime lastAccessTime, FileTime createTime,\n+                                 boolean followLinks) throws IOException\n+    {\n+        \/\/ null => don't change\n+        if (lastModifiedTime == null && lastAccessTime == null &&\n+            createTime == null) {\n+            \/\/ no effect\n+            return;\n+        }\n+\n+        \/\/ permission check\n+        path.checkWrite();\n+\n+        int commonattr = 0;\n+        long modValue = 0L;\n+        if (lastModifiedTime != null) {\n+            modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n+        }\n+        long accValue = 0L;\n+        if (lastAccessTime != null) {\n+            accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n+        }\n+        long createValue = 0L;\n+        if (createTime != null) {\n+            createValue = createTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n+        }\n+\n+        try {\n+            setattrlist(path, commonattr, modValue, accValue, createValue,\n+                        followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(path);\n+        }\n+    }\n+\n+    static class Basic extends UnixFileAttributeViews.Basic {\n+        Basic(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static class Posix extends UnixFileAttributeViews.Posix {\n+        Posix(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static class Unix extends UnixFileAttributeViews.Unix {\n+        Unix(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static Basic createBasicView(UnixPath file, boolean followLinks) {\n+        return new Basic(file, followLinks);\n+    }\n+\n+    static Posix createPosixView(UnixPath file, boolean followLinks) {\n+        return new Posix(file, followLinks);\n+    }\n+\n+    static Unix createUnixView(UnixPath file, boolean followLinks) {\n+        return new Unix(file, followLinks);\n+    }\n+}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileAttributeViews.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,10 @@\n+        if (type == BasicFileAttributeView.class) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return (V) BsdFileAttributeViews.createBasicView(file, followLinks);\n+        }\n+        if (type == PosixFileAttributeView.class) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return (V) BsdFileAttributeViews.createPosixView(file, followLinks);\n+        }\n@@ -73,0 +83,15 @@\n+        if (name.equals(\"basic\")) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return BsdFileAttributeViews.createBasicView(file, followLinks);\n+        }\n+        if (name.equals(\"posix\")) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return BsdFileAttributeViews.createPosixView(file, followLinks);\n+        }\n+        if (name.equals(\"unix\")) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return BsdFileAttributeViews.createUnixView(file, followLinks);\n+        }\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.misc.Blocker;\n+\n@@ -65,0 +67,23 @@\n+    \/**\n+     * setattrlist(const char* path, struct attrlist* attrList, void* attrBuf,\n+     *             size_t attrBufSize, unsigned long options)\n+     *\/\n+    static void setattrlist(UnixPath path, int commonattr, long modTime,\n+                            long accTime, long createTime, long options)\n+        throws UnixException\n+    {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            long comp = Blocker.begin();\n+            try {\n+                setattrlist0(buffer.address(), commonattr, modTime, accTime,\n+                             createTime, options);\n+            } finally {\n+                Blocker.end(comp);\n+            }\n+        }\n+    }\n+    private static native void setattrlist0(long pathAddress, int commonattr,\n+                                            long modTime, long accTime,\n+                                            long createTime, long options)\n+        throws UnixException;\n+\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include <sys\/attr.h>\n@@ -226,0 +227,41 @@\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_BsdNativeDispatcher_setattrlist0(JNIEnv* env, jclass this,\n+    jlong pathAddress, int commonattr, jlong modTime, jlong accTime,\n+    jlong createTime, jlong options)\n+{\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+    \/\/ attributes must align on 4-byte boundaries per the getattrlist(2) spec\n+    const int attrsize = ((sizeof(struct timespec) + 3)\/4)*4;\n+    char buf[3*attrsize];\n+\n+    int count = 0;\n+    \/\/ attributes are ordered per the getattrlist(2) spec\n+    if ((commonattr & ATTR_CMN_CRTIME) != 0) {\n+        struct timespec* t = (struct timespec*)buf;\n+        t->tv_sec   = createTime \/ 1000000000;\n+        t->tv_nsec  = createTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_MODTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = modTime \/ 1000000000;\n+        t->tv_nsec  = modTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_ACCTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = accTime \/ 1000000000;\n+        t->tv_nsec  = accTime % 1000000000;\n+        count++;\n+    }\n+\n+    struct attrlist attrList;\n+    memset(&attrList, 0, sizeof(struct attrlist));\n+    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;\n+    attrList.commonattr = commonattr;\n+\n+    if (setattrlist(path, &attrList, (void*)buf, count*attrsize, options) != 0) {\n+        throwUnixException(env, errno);\n+    }\n+}\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,3 @@\n+#ifdef _ALLBSD_SOURCE\n+#include <sys\/attr.h>\n+#endif\n@@ -143,0 +146,13 @@\n+    \/\/ flags used with setattrlist\n+#ifdef _ALLBSD_SOURCE\n+    static final int PREFIX_ATTR_CMN_CRTIME = ATTR_CMN_CRTIME;\n+    static final int PREFIX_ATTR_CMN_MODTIME = ATTR_CMN_MODTIME;\n+    static final int PREFIX_ATTR_CMN_ACCTIME = ATTR_CMN_ACCTIME;\n+    static final int PREFIX_FSOPT_NOFOLLOW = FSOPT_NOFOLLOW;\n+#else\n+    \/\/ not supported (dummy values will not be used at runtime).\n+    static final int PREFIX_ATTR_CMN_CRTIME = 00;\n+    static final int PREFIX_ATTR_CMN_MODTIME = 00;\n+    static final int PREFIX_ATTR_CMN_ACCTIME = 00;\n+    static final int PREFIX_FSOPT_NOFOLLOW = 00;\n+#endif\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixConstants.java.template","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-    private static class Posix extends Basic implements PosixFileAttributeView {\n+    static class Posix extends Basic implements PosixFileAttributeView {\n@@ -334,1 +334,1 @@\n-    private static class Unix extends Posix {\n+    static class Unix extends Posix {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8011536\n+ * @bug 8011536 8151430\n@@ -28,1 +28,3 @@\n- * @library ..\/..\n+ * @library  ..\/.. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main CreationTime\n@@ -37,0 +39,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -75,4 +79,7 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (os.contains(\"OS X\") && Files.getFileStore(file).type().equals(\"hfs\")) {\n-            supportsCreationTimeRead = true;\n-        } else if (os.startsWith(\"Windows\")) {\n+        if (Platform.isOSX()) {\n+            String type = Files.getFileStore(file).type();\n+            if (type.equals(\"apfs\") || type.equals(\"hfs\")) {\n+                supportsCreationTimeRead = true;\n+                supportsCreationTimeWrite = true;\n+            }\n+        } else if (Platform.isWindows()) {\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"}]}