{"files":[{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.fs;\n-\n-import java.io.IOException;\n-import java.nio.file.attribute.FileTime;\n-import java.util.concurrent.TimeUnit;\n-import static sun.nio.fs.BsdNativeDispatcher.setattrlist;\n-\n-class BsdBasicFileAttributeView extends UnixFileAttributeViews.Basic\n-{\n-    static void setFileTimes(UnixPath path, FileTime lastModifiedTime,\n-                             FileTime lastAccessTime, FileTime createTime,\n-                             boolean followLinks) throws IOException\n-    {\n-        \/\/ null => don't change\n-        if (lastModifiedTime == null && lastAccessTime == null &&\n-            createTime == null) {\n-            \/\/ no effect\n-            return;\n-        }\n-\n-        \/\/ permission check\n-        path.checkWrite();\n-\n-        int commonattr = 0;\n-        long modValue = 0L;\n-        if (lastModifiedTime != null) {\n-            modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n-        }\n-        long accValue = 0L;\n-        if (lastAccessTime != null) {\n-            accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n-        }\n-        long createValue = 0L;\n-        if (createTime != null) {\n-            createValue = createTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n-        }\n-\n-        try {\n-            setattrlist(path, commonattr, modValue, accValue, createValue,\n-                        followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n-        } catch (UnixException x) {\n-            x.rethrowAsIOException(path);\n-        }\n-    }\n-\n-    BsdBasicFileAttributeView(UnixPath file, boolean followLinks) {\n-        super(file, followLinks);\n-    }\n-\n-    @Override\n-    public void setTimes(FileTime lastModifiedTime,\n-                         FileTime lastAccessTime,\n-                         FileTime createTime) throws IOException\n-    {\n-        setFileTimes(file, lastModifiedTime, lastAccessTime, createTime,\n-                     followLinks);\n-    }\n-}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdBasicFileAttributeView.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import java.nio.file.attribute.FileTime;\n+import java.util.concurrent.TimeUnit;\n+import static sun.nio.fs.BsdNativeDispatcher.setattrlist;\n+\n+class BsdFileAttributeViews {\n+    \/\/\n+    \/\/ Use setattrlist(2) system call which can set creation, modification,\n+    \/\/ and access times.\n+    \/\/\n+    private static void setTimes(UnixPath path, FileTime lastModifiedTime,\n+                                 FileTime lastAccessTime, FileTime createTime,\n+                                 boolean followLinks) throws IOException\n+    {\n+        \/\/ null => don't change\n+        if (lastModifiedTime == null && lastAccessTime == null &&\n+            createTime == null) {\n+            \/\/ no effect\n+            return;\n+        }\n+\n+        \/\/ permission check\n+        path.checkWrite();\n+\n+        int commonattr = 0;\n+        long modValue = 0L;\n+        if (lastModifiedTime != null) {\n+            modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n+        }\n+        long accValue = 0L;\n+        if (lastAccessTime != null) {\n+            accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n+        }\n+        long createValue = 0L;\n+        if (createTime != null) {\n+            createValue = createTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n+        }\n+\n+        try {\n+            setattrlist(path, commonattr, modValue, accValue, createValue,\n+                        followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(path);\n+        }\n+    }\n+\n+    static class Basic extends UnixFileAttributeViews.Basic {\n+        Basic(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static class Posix extends UnixFileAttributeViews.Posix {\n+        Posix(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static class Unix extends UnixFileAttributeViews.Unix {\n+        Unix(UnixPath file, boolean followLinks) {\n+            super(file, followLinks);\n+        }\n+\n+        @Override\n+        public void setTimes(FileTime lastModifiedTime,\n+                             FileTime lastAccessTime,\n+                             FileTime createTime) throws IOException\n+        {\n+            BsdFileAttributeViews.setTimes(file, lastModifiedTime,\n+                                           lastAccessTime, createTime,\n+                                           followLinks);\n+        }\n+    }\n+\n+    static Basic createBasicView(UnixPath file, boolean followLinks) {\n+        return new Basic(file, followLinks);\n+    }\n+\n+    static Posix createPosixView(UnixPath file, boolean followLinks) {\n+        return new Posix(file, followLinks);\n+    }\n+\n+    static Unix createUnixView(UnixPath file, boolean followLinks) {\n+        return new Unix(file, followLinks);\n+    }\n+}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileAttributeViews.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -64,1 +64,1 @@\n-            return (V) new BsdBasicFileAttributeView(file, followLinks);\n+            return (V) BsdFileAttributeViews.createBasicView(file, followLinks);\n@@ -69,1 +69,1 @@\n-            return (V) new BsdPosixFileAttributeView(file, followLinks);\n+            return (V) BsdFileAttributeViews.createPosixView(file, followLinks);\n@@ -86,1 +86,1 @@\n-            return new BsdBasicFileAttributeView(file, followLinks);\n+            return BsdFileAttributeViews.createBasicView(file, followLinks);\n@@ -91,1 +91,6 @@\n-            return new BsdPosixFileAttributeView(file, followLinks);\n+            return BsdFileAttributeViews.createPosixView(file, followLinks);\n+        }\n+        if (name.equals(\"unix\")) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return BsdFileAttributeViews.createUnixView(file, followLinks);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-        throws UnixException {\n+        throws UnixException\n+    {\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.fs;\n-\n-import java.io.IOException;\n-import java.nio.file.attribute.FileTime;\n-\n-class BsdPosixFileAttributeView extends UnixFileAttributeViews.Posix\n-{\n-    BsdPosixFileAttributeView(UnixPath file, boolean followLinks) {\n-        super(file, followLinks);\n-    }\n-\n-    @Override\n-    public void setTimes(FileTime lastModifiedTime,\n-                         FileTime lastAccessTime,\n-                         FileTime createTime) throws IOException\n-    {\n-        BsdBasicFileAttributeView.setFileTimes(file, lastModifiedTime,\n-                                               lastAccessTime, createTime,\n-                                               followLinks);\n-    }\n-}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdPosixFileAttributeView.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -334,1 +334,1 @@\n-    private static class Unix extends Posix {\n+    static class Unix extends Posix {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}