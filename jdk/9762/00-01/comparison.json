{"files":[{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import java.nio.file.attribute.FileTime;\n+import java.util.concurrent.TimeUnit;\n+import static sun.nio.fs.BsdNativeDispatcher.setattrlist;\n+\n+class BsdBasicFileAttributeView extends UnixFileAttributeViews.Basic\n+{\n+    BsdBasicFileAttributeView(UnixPath file, boolean followLinks) {\n+        super(file, followLinks);\n+    }\n+\n+    @Override\n+    public void setTimes(FileTime lastModifiedTime,\n+                         FileTime lastAccessTime,\n+                         FileTime createTime) throws IOException\n+    {\n+        \/\/ null => don't change\n+        if (lastModifiedTime == null && lastAccessTime == null &&\n+            createTime == null) {\n+            \/\/ no effect\n+            return;\n+        }\n+\n+        \/\/ permission check\n+        file.checkWrite();\n+\n+        int commonattr = 0;\n+        long modValue = 0L;\n+        if (lastModifiedTime != null) {\n+            modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n+        }\n+        long accValue = 0L;\n+        if (lastAccessTime != null) {\n+            accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n+        }\n+        long createValue = 0L;\n+        if (createTime != null) {\n+            createValue = createTime.to(TimeUnit.NANOSECONDS);\n+            commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n+        }\n+\n+        try {\n+            long options = followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW;\n+            setattrlist(file, commonattr, modValue, accValue,\n+                        createValue, options);\n+            return;\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdBasicFileAttributeView.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,5 @@\n+        if (type == BasicFileAttributeView.class) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return (V) new BsdBasicFileAttributeView(file, followLinks);\n+        }\n@@ -73,0 +78,5 @@\n+        if (name.equals(\"basic\")) {\n+            UnixPath file = UnixPath.toUnixPath(obj);\n+            boolean followLinks = Util.followLinks(options);\n+            return new BsdBasicFileAttributeView(file, followLinks);\n+        }\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.misc.Blocker;\n+\n@@ -65,0 +67,22 @@\n+    \/**\n+     * setattrlist(const char* path, struct attrlist* attrList, void* attrBuf,\n+     *             size_t attrBufSize, unsigned long options)\n+     *\/\n+    static void setattrlist(UnixPath path, int commonattr, long modTime,\n+                            long accTime, long createTime, long options)\n+        throws UnixException {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            long comp = Blocker.begin();\n+            try {\n+                setattrlist0(buffer.address(), commonattr, modTime, accTime,\n+                             createTime, options);\n+            } finally {\n+                Blocker.end(comp);\n+            }\n+        }\n+    }\n+    private static native void setattrlist0(long pathAddress, int commonattr,\n+                                            long modTime, long accTime,\n+                                            long createTime, long options)\n+        throws UnixException;\n+\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include <sys\/attr.h>\n@@ -226,0 +227,41 @@\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_BsdNativeDispatcher_setattrlist0(JNIEnv* env, jclass this,\n+    jlong pathAddress, int commonattr, jlong modTime, jlong accTime,\n+    jlong createTime, jlong options)\n+{\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+    \/\/ attributes must align on 4-byte boundaries per the getattrlist(2) spec\n+    const int attrsize = ((sizeof(struct timespec) + 3)\/4)*4;\n+    char buf[3*attrsize];\n+\n+    int count = 0;\n+    \/\/ attributes are ordered per the getattrlist(2) spec\n+    if ((commonattr & ATTR_CMN_CRTIME) != 0) {\n+        struct timespec* t = (struct timespec*)buf;\n+        t->tv_sec   = createTime \/ 1000000000;\n+        t->tv_nsec  = createTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_MODTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = modTime \/ 1000000000;\n+        t->tv_nsec  = modTime % 1000000000;\n+        count++;\n+    }\n+    if ((commonattr & ATTR_CMN_ACCTIME) != 0) {\n+        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n+        t->tv_sec   = accTime \/ 1000000000;\n+        t->tv_nsec  = accTime % 1000000000;\n+        count++;\n+    }\n+\n+    struct attrlist attrList;\n+    memset(&attrList, 0, sizeof(struct attrlist));\n+    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;\n+    attrList.commonattr = commonattr;\n+\n+    if (setattrlist(path, &attrList, (void*)buf, count*attrsize, options) != 0) {\n+        throwUnixException(env, errno);\n+    }\n+}\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/.UnixFileSystemProvider.java.swp","binary":true,"status":"added"},{"patch":"@@ -66,2 +66,1 @@\n-            if (lastModifiedTime == null && lastAccessTime == null &&\n-                (createTime == null || !setattrlistSupported())) {\n+            if (lastModifiedTime == null && lastAccessTime == null) {\n@@ -75,28 +74,0 @@\n-            if (setattrlistSupported()) {\n-                int commonattr = 0;\n-                long modValue = 0L;\n-                if (lastModifiedTime != null) {\n-                    modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n-                    commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n-                }\n-                long accValue = 0L;\n-                if (lastAccessTime != null) {\n-                    accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n-                    commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n-                }\n-                long createValue = 0L;\n-                if (createTime != null) {\n-                    createValue = createTime.to(TimeUnit.NANOSECONDS);\n-                    commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n-                }\n-                try {\n-                    long options = followLinks ?\n-                        0 : UnixConstants.FSOPT_NOFOLLOW;\n-                    setattrlist(file, commonattr, modValue, accValue,\n-                                createValue, options);\n-                    return;\n-                } catch (UnixException x) {\n-                    x.rethrowAsIOException(file);\n-                }\n-            }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -530,22 +530,0 @@\n-    \/**\n-     * setattrlist(const char* path, struct attrlist* attrList, void* attrBuf,\n-     *             size_t attrBufSize, unsigned long options)\n-     *\/\n-    static void setattrlist(UnixPath path, int commonattr, long modTime,\n-                            long accTime, long createTime, long options)\n-        throws UnixException {\n-        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n-            long comp = Blocker.begin();\n-            try {\n-                setattrlist0(buffer.address(), commonattr, modTime, accTime,\n-                             createTime, options);\n-            } finally {\n-                Blocker.end(comp);\n-            }\n-        }\n-    }\n-    private static native void setattrlist0(long pathAddress, int commonattr,\n-                                            long modTime, long accTime,\n-                                            long createTime, long options)\n-        throws UnixException;\n-\n@@ -791,1 +769,0 @@\n-    private static final int SUPPORTS_SETATTRLIST   = 1 << 6;\n@@ -830,7 +807,0 @@\n-    \/**\n-     * Supports setting file creation time attribute\n-     *\/\n-    static boolean setattrlistSupported() {\n-        return (capabilities & SUPPORTS_SETATTRLIST) != 0;\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include <sys\/attr.h>\n@@ -295,1 +294,0 @@\n-    capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_SETATTRLIST;\n@@ -753,43 +751,0 @@\n-JNIEXPORT void JNICALL\n-Java_sun_nio_fs_UnixNativeDispatcher_setattrlist0(JNIEnv* env, jclass this,\n-    jlong pathAddress, int commonattr, jlong modTime, jlong accTime,\n-    jlong createTime, jlong options)\n-{\n-#ifdef _ALLBSD_SOURCE\n-    const char* path = (const char*)jlong_to_ptr(pathAddress);\n-    \/\/ attributes must align on 4-byte boundaries per the getattrlist(2) spec\n-    const int attrsize = ((sizeof(struct timespec) + 3)\/4)*4;\n-    char buf[3*attrsize];\n-\n-    int count = 0;\n-    \/\/ attributes are ordered per the getattrlist(2) spec\n-    if ((commonattr & ATTR_CMN_CRTIME) != 0) {\n-        struct timespec* t = (struct timespec*)buf;\n-        t->tv_sec   = createTime \/ 1000000000;\n-        t->tv_nsec  = createTime % 1000000000;\n-        count++;\n-    }\n-    if ((commonattr & ATTR_CMN_MODTIME) != 0) {\n-        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n-        t->tv_sec   = modTime \/ 1000000000;\n-        t->tv_nsec  = modTime % 1000000000;\n-        count++;\n-    }\n-    if ((commonattr & ATTR_CMN_ACCTIME) != 0) {\n-        struct timespec* t = (struct timespec*)(buf + count*attrsize);\n-        t->tv_sec   = accTime \/ 1000000000;\n-        t->tv_nsec  = accTime % 1000000000;\n-        count++;\n-    }\n-\n-    struct attrlist attrList;\n-    memset(&attrList, 0, sizeof(struct attrlist));\n-    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;\n-    attrList.commonattr = commonattr;\n-\n-    if (setattrlist(path, &attrList, (void*)buf, count*attrsize, options) != 0) {\n-        throwUnixException(env, errno);\n-    }\n-#endif\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"}]}