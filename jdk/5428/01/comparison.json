{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.management.GarbageCollectionNotificationInfo;\n@@ -31,0 +32,1 @@\n+import java.lang.management.*;\n@@ -32,0 +34,2 @@\n+import javax.management.*;\n+import javax.management.openmbean.*;\n@@ -92,0 +96,33 @@\n+    private static volatile int gcCount;\n+    private static NotificationListener listener = new NotificationListener() {\n+        @Override\n+        public void handleNotification(Notification n, Object o) {\n+            if (n.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {\n+                GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from((CompositeData) n.getUserData());\n+                \/\/ Shenandoah GC also reports GC pauses, skip them\n+                if (info.getGcName().startsWith(\"Shenandoah\")) {\n+                    if (\"end of GC cycle\".equals(info.getGcAction())) {\n+                        gcCount++;\n+                    }\n+                } else {\n+                    gcCount++;\n+                }\n+            }\n+        }\n+    };\n+\n+    private static void registerGCListener() {\n+        for (GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {\n+            ((NotificationEmitter)bean).addNotificationListener(listener, null, null);\n+        }\n+    }\n+\n+    private static void unregisterGCListener() {\n+        for (GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {\n+            try {\n+                ((NotificationEmitter) bean).removeNotificationListener(listener, null, null);\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n@@ -93,1 +130,0 @@\n-        \/\/ Provoke at least numberOfTimes young GCs\n@@ -95,1 +131,0 @@\n-        final int maxObjectInYoung = (Xmn * MB) \/ objectSize;\n@@ -97,1 +132,6 @@\n-        for (int i = 0; i < numberOfTimes; i++) {\n+\n+        \/\/ Provoke at least numberOfTimes young GCs\n+        gcCount = 0;\n+        registerGCListener();\n+        while (gcCount < numberOfTimes) {\n+            int currentCount = gcCount;\n@@ -101,2 +141,2 @@\n-            System.out.println(\"Begin: Young GC \" + (i + 1) + \"\/\" + numberOfTimes);\n-            for (int j = 0; j < maxObjectInYoung + 1; j++) {\n+            System.out.println(\"Begin: Young GC \" + (currentCount + 1) + \"\/\" + numberOfTimes);\n+            while (currentCount == gcCount) {\n@@ -105,1 +145,1 @@\n-            System.out.println(\"End: Young GC \" + (i + 1) + \"\/\" + numberOfTimes);\n+            System.out.println(\"End: Young GC \" + (currentCount + 1) + \"\/\" + numberOfTimes);\n@@ -107,0 +147,1 @@\n+        unregisterGCListener();\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":47,"deletions":6,"binary":false,"changes":53,"status":"modified"}]}