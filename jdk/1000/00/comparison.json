{"files":[{"patch":"@@ -2317,1 +2317,1 @@\n-                    phi = NULL;\n+                    phi = NodeSentinel;\n@@ -2322,1 +2322,1 @@\n-            if (phi == NULL) {\n+            if (phi == NodeSentinel) {\n@@ -2331,2 +2331,5 @@\n-          assert(phi != NULL, \"\");\n-          regions.map(c->_idx, phi);\n+          if (phi != NULL) {\n+            regions.map(c->_idx, phi);\n+          } else {\n+            assert(c->unique_ctrl_out()->Opcode() == Op_Halt, \"expected memory state\");\n+          }\n@@ -2343,1 +2346,1 @@\n-        assert(m != NULL, \"expect memory state\");\n+        assert(m != NULL || c->Opcode() == Op_Halt, \"expect memory state\");\n@@ -2367,1 +2370,2 @@\n-      if (n->is_Phi() && n->_idx >= last && n->in(0) == c) {\n+      assert(n != NULL || c->unique_ctrl_out()->Opcode() == Op_Halt, \"expected memory state\");\n+      if (n != NULL && n->is_Phi() && n->_idx >= last && n->in(0) == c) {\n@@ -2376,0 +2380,1 @@\n+      assert(n != NULL || c->unique_ctrl_out()->Opcode() == Op_Halt, \"expected memory state\");\n@@ -2380,0 +2385,1 @@\n+          assert(c->unique_ctrl_out()->Opcode() != Op_Halt, \"expected memory state\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8255400\n+ * @summary C2 failures after JDK-8255000\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/jdk.internal.misc:+open\n+ *\n+ * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UseShenandoahGC TestBarrierExpansionDeadMemPhi\n+ *\n+ *\n+ *\/\n+\n+import jdk.internal.misc.Unsafe;\n+import java.util.Arrays;\n+import java.lang.reflect.Field;\n+\n+public class TestBarrierExpansionDeadMemPhi {\n+\n+    static final jdk.internal.misc.Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    static final long F_OFFSET;\n+\n+    static class A {\n+        int f;\n+    }\n+\n+    static {\n+        try {\n+            Field fField = A.class.getDeclaredField(\"f\");\n+            F_OFFSET = UNSAFE.objectFieldOffset(fField);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static int test(Object[] array) {\n+        int f = 0;\n+        for (int i = 0; i < 100; i++) {\n+            f += UNSAFE.getInt(array[i], F_OFFSET);\n+        }\n+        return f;\n+    }\n+\n+    static public void main(String[] args) {\n+        Object[] array = new Object[100];\n+        Arrays.fill(array, new A());\n+\n+        for (int i = 0; i < 20000; i++) {\n+            test(array);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierExpansionDeadMemPhi.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}