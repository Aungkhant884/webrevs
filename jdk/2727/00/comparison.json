{"files":[{"patch":"@@ -40,0 +40,1 @@\n+  virtual bool is_concurrent_mode() const { return true; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+  virtual bool is_concurrent_mode() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  virtual bool is_concurrent_mode() const { return false; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  virtual bool is_concurrent_mode() const { return true; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -47,1 +48,1 @@\n-             new ShenandoahBarrierSetNMethod(heap),\n+             heap->mode()->is_concurrent_mode() ? new ShenandoahBarrierSetNMethod(heap) : NULL,\n@@ -104,3 +105,5 @@\n-    JavaThread* const jt = thread->as_Java_thread();\n-    StackWatermark* const watermark = new ShenandoahStackWatermark(jt);\n-    StackWatermarkSet::add_watermark(jt, watermark);\n+    if (_heap->mode()->is_concurrent_mode()) {\n+      JavaThread* const jt = thread->as_Java_thread();\n+      StackWatermark* const watermark = new ShenandoahStackWatermark(jt);\n+      StackWatermarkSet::add_watermark(jt, watermark);\n+    }\n@@ -120,7 +123,8 @@\n-    ShenandoahHeap* const heap = ShenandoahHeap::heap();\n-    if (heap->is_concurrent_mark_in_progress()) {\n-      ShenandoahKeepAliveClosure oops;\n-      StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n-    } else if (heap->is_concurrent_weak_root_in_progress() && heap->is_evacuation_in_progress()) {\n-      ShenandoahContextEvacuateUpdateRootsClosure oops;\n-      StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n+    if (_heap->mode()->is_concurrent_mode()) {\n+      if (_heap->is_concurrent_mark_in_progress()) {\n+        ShenandoahKeepAliveClosure oops;\n+        StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n+      } else if (_heap->is_concurrent_weak_root_in_progress() && _heap->is_evacuation_in_progress()) {\n+        ShenandoahContextEvacuateUpdateRootsClosure oops;\n+        StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -182,2 +182,5 @@\n-  ShenandoahDisarmNMethodsTask task;\n-  ShenandoahHeap::heap()->workers()->run_task(&task);\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  if (heap->mode()->is_concurrent_mode()) {\n+    ShenandoahDisarmNMethodsTask task;\n+    heap->workers()->run_task(&task);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -404,1 +404,1 @@\n-void ShenandoahHeap::initialize_heuristics() {\n+void ShenandoahHeap::initialize_gc_mode() {\n@@ -429,0 +429,1 @@\n+}\n@@ -430,0 +431,2 @@\n+void ShenandoahHeap::initialize_heuristics() {\n+  assert(_gc_mode != NULL, \"Must be initialized\");\n@@ -464,0 +467,1 @@\n+  _gc_mode(NULL),\n@@ -486,0 +490,2 @@\n+  \/\/ Initialize GC mode early, so we can adjust barrier support\n+  initialize_gc_mode();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+  void initialize_gc_mode();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -81,2 +82,3 @@\n-  assert(bs != NULL, \"Sanity\");\n-  if (bs->is_armed(nm)) {\n+  assert(bs != NULL || !ShenandoahHeap::heap()->mode()->is_concurrent_mode(),\n+        \"Must have nmethod barrier for concurrent GC\");\n+  if (bs != NULL && bs->is_armed(nm)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -295,1 +296,1 @@\n-  CodeBlobToOopClosure* adjust_code_closure = ClassUnloading ?\n+  CodeBlobToOopClosure* adjust_code_closure = (ClassUnloading && ShenandoahHeap::heap()->mode()->is_concurrent_mode()) ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  CodeBlobToOopClosure* codes_cl = ClassUnloading ?\n+  CodeBlobToOopClosure* codes_cl = ClassUnloading && ShenandoahHeap::heap()->mode()->is_concurrent_mode() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}