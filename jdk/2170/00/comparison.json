{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,0 @@\n-\/*\n- * @test\n- * @bug 4992173 4992170\n- *\n- * @run shell make_src.sh\n- * @run shell build.sh\n- * @run main\/othervm -esa -ea EnclosingClassTest\n- *\n- * @summary Check getEnclosingClass and other methods\n- * @author Peter von der Ah\\u00e9\n- *\/\n@@ -62,4 +51,26 @@\n-import java.util.List;\n-import java.util.LinkedList;\n-import java.lang.reflect.Field;\n-import common.TestMe;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\/*\n+* @test\n+* @bug 4992173 4992170\n+* @library \/test\/lib\n+* @build jdk.test.lib.process.* EnclosingClassTest\n+* @run testng\/othervm EnclosingClassTest\n+* @summary Check getEnclosingClass and other methods\n+* @author Peter von der Ah\\u00e9\n+*\/\n+\n@@ -68,10 +79,2 @@\n-    static void info(Class<?> c, Class<?> encClass, String desc) {\n-        if (!\"\".equals(desc))\n-            System.out.println(desc + \":\");\n-        System.out.println(c);\n-        System.out.println(\"\\tis enclosed by:\\t\\t\" + encClass);\n-        System.out.println(\"\\thas simple name:\\t`\" +\n-                           c.getSimpleName() + \"'\");\n-        System.out.println(\"\\thas canonical name:\\t`\" +\n-                           c.getCanonicalName() + \"'\");\n-    }\n+    private static final String SRC_DIR = System.getProperty(\"test.src\");\n+    private static final String ENCLOSING_CLASS_SRC = SRC_DIR + \"\/EnclosingClass.java\";\n@@ -79,5 +82,18 @@\n-    static void match(String actual, String expected) {\n-        assert((actual == null && expected == null) || actual.equals(expected));\n-        System.out.println(\"\\t`\" +\n-                           actual + \"' matches expected `\" +\n-                           expected + \"'\");\n+    @BeforeClass\n+    public void createEnclosingClasses() {\n+        Path enclosingPath = Paths.get(ENCLOSING_CLASS_SRC);\n+        Path pkg1Dir = Paths.get(SRC_DIR + \"\/pkg1\");\n+        Path pkg2Dir = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\");\n+        Path pkg1File = Paths.get(SRC_DIR + \"\/pkg1\/EnclosingClass.java\");\n+        Path pkg2File = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n+        try {\n+            Files.deleteIfExists(pkg2File);\n+            Files.deleteIfExists(pkg2Dir);\n+            Files.deleteIfExists(pkg1File);\n+            Files.deleteIfExists(pkg1Dir);\n+            Files.createDirectories(pkg2Dir);\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        }\n+        createAndWriteEnclosingClasses(enclosingPath, pkg1File, \"pkg1\");\n+        createAndWriteEnclosingClasses(enclosingPath, pkg2File, \"pkg1.pkg2\");\n@@ -86,7 +102,8 @@\n-    static void check(Class<?> c, Class<?> enc,\n-                      String encName, String encNameExpected,\n-                      String simpleName, String simpleNameExpected,\n-                      String canonicalName, String canonicalNameExpected) {\n-        match(encName, encNameExpected);\n-        match(simpleName, simpleNameExpected);\n-        match(canonicalName, canonicalNameExpected);\n+    @Test\n+    public void testEnclosingClasses() throws Throwable {\n+        String javacPath = JDKToolFinder.getJDKTool(\"javac\");\n+        ProcessTools.executeCommand(javacPath, \"-d\", System.getProperty(\"test.classes\", \".\"),\n+                SRC_DIR + \"\/RunEnclosingClassTest.java\");\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\"RunEnclosingClassTest\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -95,20 +112,14 @@\n-    static void testClass(Class<?> c, TestMe annotation, Field f) {\n-        if (Void.class.equals(c))\n-            return;\n-        Class<?> encClass = c.getEnclosingClass();\n-        c.getEnclosingMethod(); \/\/ make sure it does not crash\n-        c.getEnclosingConstructor(); \/\/ make sure it does not crash\n-        info(c, encClass, annotation.desc());\n-        check(c, encClass,\n-              \"\"+encClass, annotation.encl(),\n-              c.getSimpleName(), annotation.simple(),\n-              c.getCanonicalName(),\n-              annotation.hasCanonical() ? annotation.canonical() : null);\n-        if (void.class.equals(c))\n-            return;\n-        Class<?> array = java.lang.reflect.Array.newInstance(c, 0).getClass();\n-        check(array, array.getEnclosingClass(),\n-              \"\", \"\",\n-              array.getSimpleName(), annotation.simple()+\"[]\",\n-              array.getCanonicalName(),\n-              annotation.hasCanonical() ? annotation.canonical()+\"[]\" : null);\n+    @AfterClass\n+    public void deleteEnclosingClasses() {\n+        Path pkg1Dir = Paths.get(SRC_DIR + \"\/pkg1\");\n+        Path pkg2Dir = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\");\n+        Path pkg1File = Paths.get(SRC_DIR + \"\/pkg1\/EnclosingClass.java\");\n+        Path pkg2File = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n+        try {\n+            Files.deleteIfExists(pkg2File);\n+            Files.deleteIfExists(pkg2Dir);\n+            Files.deleteIfExists(pkg1File);\n+            Files.deleteIfExists(pkg1Dir);\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        }\n@@ -117,14 +128,11 @@\n-    static void test(Object tests) {\n-        for (Field f : tests.getClass().getFields()) {\n-            TestMe annotation = f.getAnnotation(TestMe.class);\n-            if (annotation != null) {\n-                try {\n-                    testClass((Class<?>)f.get(tests), annotation, f);\n-                } catch (AssertionError ex) {\n-                    System.err.println(\"Error in \" +\n-                                       tests.getClass().getName() +\n-                                       \".\" + f.getName());\n-                    throw ex;\n-                } catch (IllegalAccessException ex) {\n-                    ex.printStackTrace();\n-                    throw new RuntimeException(ex);\n+    private void createAndWriteEnclosingClasses(final Path source, final Path target, String packagePath) {\n+        try (BufferedReader br = new BufferedReader(new FileReader(source.toFile()));\n+        PrintWriter bw = new PrintWriter(new FileWriter(target.toFile()))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                if (line.contains(\"canonical=\\\"EnclosingClass\")) {\n+                    line = line.replaceAll(\"canonical=\\\"EnclosingClass\", \"canonical=\\\"\" + packagePath + \".EnclosingClass\");\n+                } else if (line.contains(\"\\\"class EnclosingClass\")) {\n+                    line = line.replaceAll(\"\\\"class EnclosingClass\", \"\\\" class \" + packagePath + \".EnclosingClass\");\n+                } else if (line.contains(\"\/\/package\")) {\n+                    line = line.replaceAll(\"\/\/package\", \"package \" + packagePath + \";\");\n@@ -132,0 +140,1 @@\n+                bw.println(line);\n@@ -133,0 +142,2 @@\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n@@ -135,5 +146,0 @@\n-    public static void main(String[] args) {\n-        test(new EnclosingClass());\n-        test(new pkg1.EnclosingClass());\n-        test(new pkg1.pkg2.EnclosingClass());\n-    }\n@@ -141,0 +147,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/EnclosingClassTest.java","additions":84,"deletions":77,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2004, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+\n+import common.TestMe;\n+\n+class RunEnclosingClassTest {\n+    static void info(Class<?> c, Class<?> encClass, String desc) {\n+        if (!\"\".equals(desc))\n+            System.out.println(desc + \":\");\n+        System.out.println(c);\n+        System.out.println(\"\\tis enclosed by:\\t\\t\" + encClass);\n+        System.out.println(\"\\thas simple name:\\t`\" +\n+                c.getSimpleName() + \"'\");\n+        System.out.println(\"\\thas canonical name:\\t`\" +\n+                c.getCanonicalName() + \"'\");\n+    }\n+\n+    static void match(String actual, String expected) {\n+        assert((actual == null && expected == null) || actual.equals(expected));\n+        System.out.println(\"\\t`\" + actual + \"' matches expected `\" + expected + \"'\");\n+    }\n+\n+    static void check(Class<?> c, Class<?> enc,\n+                      String encName, String encNameExpected,\n+                      String simpleName, String simpleNameExpected,\n+                      String canonicalName, String canonicalNameExpected) {\n+        match(encName, encNameExpected);\n+        match(simpleName, simpleNameExpected);\n+        match(canonicalName, canonicalNameExpected);\n+    }\n+\n+    static void testClass(Class<?> c, TestMe annotation, Field f) {\n+        if (Void.class.equals(c))\n+            return;\n+        Class<?> encClass = c.getEnclosingClass();\n+        c.getEnclosingMethod(); \/\/ make sure it does not crash\n+        c.getEnclosingConstructor(); \/\/ make sure it does not crash\n+        info(c, encClass, annotation.desc());\n+        check(c, encClass,\n+                \"\"+encClass, annotation.encl(),\n+                c.getSimpleName(), annotation.simple(),\n+                c.getCanonicalName(),\n+                annotation.hasCanonical() ? annotation.canonical() : null);\n+        if (void.class.equals(c))\n+            return;\n+        Class<?> array = java.lang.reflect.Array.newInstance(c, 0).getClass();\n+        check(array, array.getEnclosingClass(),\n+                \"\", \"\",\n+                array.getSimpleName(), annotation.simple() + \"[]\",\n+                array.getCanonicalName(),\n+                annotation.hasCanonical() ? annotation.canonical() + \"[]\" : null);\n+    }\n+\n+    static void test(final Object tests) {\n+        for (Field f : tests.getClass().getFields()) {\n+            TestMe annotation = f.getAnnotation(TestMe.class);\n+            if (annotation != null) {\n+                try {\n+                    testClass((Class<?>)f.get(tests), annotation, f);\n+                } catch (AssertionError ex) {\n+                    System.err.println(\"Error in \" + tests.getClass().getName() + \".\" + f.getName());\n+                    throw ex;\n+                } catch (IllegalAccessException ex) {\n+                    ex.printStackTrace();\n+                    throw new RuntimeException(ex);\n+                }\n+            }\n+        }\n+    }\n+    public static void main(final String[] args) {\n+        test(new EnclosingClass());\n+        test(new pkg1.EnclosingClass());\n+        test(new pkg1.pkg2.EnclosingClass());\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/RunEnclosingClassTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -1,42 +0,0 @@\n-#\n-# Copyright (c) 2004, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# -*- shell-script -*-\n-#\n-# @summary Check getEnclosingClass and other methods\n-# @author Peter von der Ahé\n-\n-OS=`uname -s`;\n-case \"${OS}\" in\n-        Windows* | CYGWIN* )\n-                SEP=\";\"\n-        ;;\n-\n-        * )\n-        SEP=\":\"\n-        ;;\n-esac\n-\n-JAVAC=${COMPILEJAVA}\/bin\/javac\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES} -sourcepath ${TESTSRC}${SEP}. \\\n-    ${TESTSRC}\/EnclosingClassTest.java\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/build.sh","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-#\n-# Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# -*- shell-script -*-\n-# @summary Check getEnclosingClass and other methods\n-# @author Peter von der Ahé\n-\n-rm -rf   pkg1\n-mkdir    pkg1\n-mkdir -p pkg1\/pkg2\n-\n-sed '\n-s\/canonical=\"EnclosingClass\/canonical=\"pkg1.EnclosingClass\/g;\n-s\/\"class EnclosingClass\/\"class pkg1.EnclosingClass\/g;\n-s\/\\\/\\\/package\/package pkg1;\/g' < ${TESTSRC}\/EnclosingClass.java > pkg1\/EnclosingClass.java\n-\n-sed '\n-s\/canonical=\"EnclosingClass\/canonical=\"pkg1.pkg2.EnclosingClass\/g;\n-s\/\"class EnclosingClass\/\"class pkg1.pkg2.EnclosingClass\/g;\n-s\/\\\/\\\/package\/package pkg1.pkg2;\/g' < ${TESTSRC}\/EnclosingClass.java > pkg1\/pkg2\/EnclosingClass.java\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/make_src.sh","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"}]}