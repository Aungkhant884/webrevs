{"files":[{"patch":"@@ -37,1 +37,0 @@\n- * @build NonJavaNames\n@@ -50,1 +49,1 @@\n-     NonJavaNames.myInterface create(){\n+     NonJavaNames.myInterface create() {\n@@ -54,1 +53,1 @@\n-             public Baz2(){}\n+             public Baz2() { }\n@@ -61,3 +60,2 @@\n-    private static final String TEST_SRC = SRC_DIR + \"\/classes\/\";\n-    private static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n-    Path dhyphenPath, dcommaPath, dperiodPath, dleftsquarePath, drightsquarePath, dplusPath, dsemicolonPath, dzeroPath, dthreePath, dzadePath;\n+    private static final Path TEST_SRC = Paths.get(SRC_DIR,  \"classes\");\n+    private static final Path TEST_CLASSES = Paths.get(System.getProperty(\"test.classes\", \".\"));\n@@ -67,10 +65,10 @@\n-        Path hyphenPath = Paths.get(TEST_SRC + \"hyphen.class\");\n-        Path commaPath = Paths.get(TEST_SRC + \"comma.class\");\n-        Path periodPath = Paths.get(TEST_SRC + \"period.class\");\n-        Path leftsquarePath = Paths.get(TEST_SRC + \"left-square.class\");\n-        Path rightsquarePath = Paths.get(TEST_SRC + \"right-square.class\");\n-        Path plusPath = Paths.get(TEST_SRC + \"plus.class\");\n-        Path semicolonPath = Paths.get(TEST_SRC + \"semicolon.class\");\n-        Path zeroPath = Paths.get(TEST_SRC + \"0.class\");\n-        Path threePath = Paths.get(TEST_SRC + \"3.class\");\n-        Path zadePath = Paths.get(TEST_SRC + \"Z.class\");\n+        Path hyphenPath = TEST_SRC.resolve(\"hyphen.class\");\n+        Path commaPath = TEST_SRC.resolve(\"comma.class\");\n+        Path periodPath = TEST_SRC.resolve(\"period.class\");\n+        Path leftsquarePath = TEST_SRC.resolve(\"left-square.class\");\n+        Path rightsquarePath = TEST_SRC.resolve(\"right-square.class\");\n+        Path plusPath = TEST_SRC.resolve(\"plus.class\");\n+        Path semicolonPath = TEST_SRC.resolve(\"semicolon.class\");\n+        Path zeroPath = TEST_SRC.resolve(\"0.class\");\n+        Path threePath = TEST_SRC.resolve(\"3.class\");\n+        Path zadePath = TEST_SRC.resolve(\"Z.class\");\n@@ -78,10 +76,10 @@\n-        dhyphenPath = Paths.get(TEST_CLASSES + \"\/-.class\");\n-        dcommaPath = Paths.get(TEST_CLASSES + \"\/,.class\");\n-        dperiodPath = Paths.get(TEST_CLASSES + \"\/..class\");\n-        dleftsquarePath = Paths.get(TEST_CLASSES + \"\/[.class\");\n-        drightsquarePath = Paths.get(TEST_CLASSES + \"\/].class\");\n-        dplusPath = Paths.get(TEST_CLASSES + \"\/+.class\");\n-        dsemicolonPath = Paths.get(TEST_CLASSES + \"\/;.class\");\n-        dzeroPath = Paths.get(TEST_CLASSES + \"\/0.class\");\n-        dthreePath = Paths.get(TEST_CLASSES + \"\/3.class\");\n-        dzadePath = Paths.get(TEST_CLASSES + \"\/Z.class\");\n+        Path dhyphenPath = TEST_CLASSES.resolve(\"-.class\");\n+        Path dcommaPath = TEST_CLASSES.resolve(\",.class\");\n+        Path dperiodPath = TEST_CLASSES.resolve(\"..class\");\n+        Path dleftsquarePath = TEST_CLASSES.resolve(\"[.class\");\n+        Path drightsquarePath = TEST_CLASSES.resolve(\"].class\");\n+        Path dplusPath = TEST_CLASSES.resolve(\"+.class\");\n+        Path dsemicolonPath = TEST_CLASSES.resolve(\";.class\");\n+        Path dzeroPath = TEST_CLASSES.resolve(\"0.class\");\n+        Path dthreePath = TEST_CLASSES.resolve(\"3.class\");\n+        Path dzadePath = TEST_CLASSES.resolve(\"Z.class\");\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNames.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -62,3 +63,1 @@\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.compiler.CompilerUtils;\n@@ -75,1 +74,0 @@\n-* @build jdk.test.lib.process.* EnclosingClassTest\n@@ -84,1 +82,1 @@\n-    private static final String ENCLOSING_CLASS_SRC = SRC_DIR + \"\/EnclosingClass.java\";\n+    private static final Path ENCLOSING_CLASS_SRC = Paths.get(SRC_DIR , \"EnclosingClass.java\");\n@@ -87,6 +85,5 @@\n-    public void createEnclosingClasses() throws Throwable {\n-        Path enclosingPath = Paths.get(ENCLOSING_CLASS_SRC);\n-        Path pkg1Dir = Paths.get(SRC_DIR + \"\/pkg1\");\n-        Path pkg2Dir = Paths.get(SRC_DIR+\"\/pkg1\/pkg2\");\n-        Path pkg1File = Paths.get(SRC_DIR + \"\/pkg1\/EnclosingClass.java\");\n-        Path pkg2File = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n+    public void createEnclosingClasses() throws IOException {\n+        Path pkg1Dir = Paths.get(SRC_DIR, \"pkg1\");\n+        Path pkg2Dir = Paths.get(SRC_DIR, \"pkg1\", \"pkg2\");\n+        Path pkg1File = pkg1Dir.resolve(\"EnclosingClass.java\");\n+        Path pkg2File = pkg2Dir.resolve(\"EnclosingClass.java\");\n@@ -98,2 +95,2 @@\n-        createAndWriteEnclosingClasses(enclosingPath, pkg1File, \"pkg1\");\n-        createAndWriteEnclosingClasses(enclosingPath, pkg2File, \"pkg1.pkg2\");\n+        createAndWriteEnclosingClasses(ENCLOSING_CLASS_SRC, pkg1File, \"pkg1\");\n+        createAndWriteEnclosingClasses(ENCLOSING_CLASS_SRC, pkg2File, \"pkg1.pkg2\");\n@@ -101,4 +98,4 @@\n-        String javacPath = JDKToolFinder.getJDKTool(\"javac\");\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(javacPath, \"-d\", System.getProperty(\"test.classes\", \".\"),\n-                SRC_DIR + \"\/EnclosingClass.java\", SRC_DIR + \"\/pkg1\/EnclosingClass.java\", SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n-        outputAnalyzer.shouldHaveExitValue(0);\n+        CompilerUtils.compile(ENCLOSING_CLASS_SRC, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\",\n+                SRC_DIR);\n+        CompilerUtils.compile(pkg1File, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\", SRC_DIR);\n+        CompilerUtils.compile(pkg2File, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\", SRC_DIR);\n@@ -108,1 +105,2 @@\n-    public void testEnclosingClasses() throws Throwable {\n+    public void testEnclosingClasses() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,\n+            InvocationTargetException, InstantiationException {\n@@ -113,1 +111,2 @@\n-    public void testEnclosingClassesInPackage() throws Throwable {\n+    public void testEnclosingClassesInPackage() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,\n+            InvocationTargetException, InstantiationException {\n@@ -118,1 +117,2 @@\n-    public void testEnclosingClassesInNestedPackage() throws Throwable {\n+    public void testEnclosingClassesInNestedPackage() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,\n+            InvocationTargetException, InstantiationException {\n@@ -158,1 +158,1 @@\n-        assert ((actual == null && expected == null) || actual.trim().equals(expected.trim()));\n+        assert ((actual == null && expected == null) || actual.equals(expected.trim()));\n@@ -162,4 +162,4 @@\n-    private void check(final Class<?> c, final Class<?> enc,\n-               final String encName, final String encNameExpected,\n-               final String simpleName, final String simpleNameExpected,\n-               final String canonicalName, final String canonicalNameExpected) {\n+    private void check(Class<?> c, Class<?> enc,\n+                       String encName, String encNameExpected,\n+                       String simpleName, String simpleNameExpected,\n+                       String canonicalName, String canonicalNameExpected) {\n@@ -197,1 +197,3 @@\n-                    System.err.println(\"Error in \" + tests.getClass().getName() + \".\" + f.getName());\n+                    System.err.println(\"Error in \" +\n+                                       tests.getClass().getName() +\n+                                       \".\" + f.getName());\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/EnclosingClassTest.java","additions":28,"deletions":26,"binary":false,"changes":54,"status":"modified"}]}