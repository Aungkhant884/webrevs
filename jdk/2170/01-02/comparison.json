{"files":[{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2021 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @bug 4952558\n- * @library \/test\/lib\n- * @build NonJavaNames\n- * @run testng\/othervm NonJavaNameTest\n- * @summary Verify names that aren't legal Java names are accepted by forName.\n- * @author Joseph D. Darcy\n- *\/\n-\n-public class NonJavaNameTest {\n-    private static final String SRC_DIR = System.getProperty(\"test.src\");\n-    private static final String NONJAVA_NAMES_SRC = SRC_DIR + \"\/classes\/\";\n-    private static final String NONJAVA_NAMES_CLASSES = System.getProperty(\"test.classes\", \".\");\n-    Path dhyphenPath, dcommaPath, dperiodPath, dleftsquarePath, drightsquarePath, dplusPath, dsemicolonPath, dzeroPath, dthreePath, dzadePath;\n-\n-    @BeforeClass\n-    public void createInvalidNameClasses() throws IOException {\n-        Path hyphenPath = Paths.get(NONJAVA_NAMES_SRC + \"hyphen.class\");\n-        Path commaPath = Paths.get(NONJAVA_NAMES_SRC + \"comma.class\");\n-        Path periodPath = Paths.get(NONJAVA_NAMES_SRC + \"period.class\");\n-        Path leftsquarePath = Paths.get(NONJAVA_NAMES_SRC + \"left-square.class\");\n-        Path rightsquarePath = Paths.get(NONJAVA_NAMES_SRC + \"right-square.class\");\n-        Path plusPath = Paths.get(NONJAVA_NAMES_SRC + \"plus.class\");\n-        Path semicolonPath = Paths.get(NONJAVA_NAMES_SRC + \"semicolon.class\");\n-        Path zeroPath = Paths.get(NONJAVA_NAMES_SRC + \"0.class\");\n-        Path threePath = Paths.get(NONJAVA_NAMES_SRC + \"3.class\");\n-        Path zadePath = Paths.get(NONJAVA_NAMES_SRC + \"Z.class\");\n-\n-        dhyphenPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/-.class\");\n-        dcommaPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/,.class\");\n-        dperiodPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/..class\");\n-        dleftsquarePath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/[.class\");\n-        drightsquarePath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/].class\");\n-        dplusPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/+.class\");\n-        dsemicolonPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/;.class\");\n-        dzeroPath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/0.class\");\n-        dthreePath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/3.class\");\n-        dzadePath = Paths.get(NONJAVA_NAMES_CLASSES + \"\/Z.class\");\n-\n-        Files.copy(hyphenPath, dhyphenPath, REPLACE_EXISTING);\n-        Files.copy(commaPath, dcommaPath, REPLACE_EXISTING);\n-        Files.copy(periodPath, dperiodPath, REPLACE_EXISTING);\n-        Files.copy(leftsquarePath, dleftsquarePath, REPLACE_EXISTING);\n-        Files.copy(rightsquarePath, drightsquarePath, REPLACE_EXISTING);\n-        Files.copy(plusPath, dplusPath, REPLACE_EXISTING);\n-        Files.copy(semicolonPath, dsemicolonPath, REPLACE_EXISTING);\n-        Files.copy(zeroPath, dzeroPath, REPLACE_EXISTING);\n-        Files.copy(threePath, dthreePath, REPLACE_EXISTING);\n-        Files.copy(zadePath, dzadePath, REPLACE_EXISTING);\n-    }\n-\n-    @Test\n-    public void NonJavaNamestest() throws Throwable {\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder( \"NonJavaNames\");\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n-        outputAnalyzer.shouldHaveExitValue(0);\n-    }\n-\n-    @AfterClass\n-    public void deleteInvalidNameClasses() throws IOException {\n-        Files.deleteIfExists(dhyphenPath);\n-        Files.deleteIfExists(dcommaPath);\n-        Files.deleteIfExists(dperiodPath);\n-        Files.deleteIfExists(dleftsquarePath);\n-        Files.deleteIfExists(drightsquarePath);\n-        Files.deleteIfExists(dplusPath);\n-        Files.deleteIfExists(dzeroPath);\n-        Files.deleteIfExists(dthreePath);\n-        Files.deleteIfExists(dzadePath);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNameTest.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -24,0 +24,18 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 4952558\n+ * @library \/test\/lib\n+ * @build NonJavaNames\n+ * @run testng\/othervm NonJavaNames\n+ * @summary Verify names that aren't legal Java names are accepted by forName.\n+ *\/\n+\n@@ -42,2 +60,17 @@\n-    public static void main(String[] args) throws Exception {\n-        NonJavaNames.Baz bz = new NonJavaNames.Baz();\n+    private static final String SRC_DIR = System.getProperty(\"test.src\");\n+    private static final String TEST_SRC = SRC_DIR + \"\/classes\/\";\n+    private static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n+    Path dhyphenPath, dcommaPath, dperiodPath, dleftsquarePath, drightsquarePath, dplusPath, dsemicolonPath, dzeroPath, dthreePath, dzadePath;\n+\n+    @BeforeClass\n+    public void createInvalidNameClasses() throws IOException {\n+        Path hyphenPath = Paths.get(TEST_SRC + \"hyphen.class\");\n+        Path commaPath = Paths.get(TEST_SRC + \"comma.class\");\n+        Path periodPath = Paths.get(TEST_SRC + \"period.class\");\n+        Path leftsquarePath = Paths.get(TEST_SRC + \"left-square.class\");\n+        Path rightsquarePath = Paths.get(TEST_SRC + \"right-square.class\");\n+        Path plusPath = Paths.get(TEST_SRC + \"plus.class\");\n+        Path semicolonPath = Paths.get(TEST_SRC + \"semicolon.class\");\n+        Path zeroPath = Paths.get(TEST_SRC + \"0.class\");\n+        Path threePath = Paths.get(TEST_SRC + \"3.class\");\n+        Path zadePath = Paths.get(TEST_SRC + \"Z.class\");\n@@ -45,0 +78,26 @@\n+        dhyphenPath = Paths.get(TEST_CLASSES + \"\/-.class\");\n+        dcommaPath = Paths.get(TEST_CLASSES + \"\/,.class\");\n+        dperiodPath = Paths.get(TEST_CLASSES + \"\/..class\");\n+        dleftsquarePath = Paths.get(TEST_CLASSES + \"\/[.class\");\n+        drightsquarePath = Paths.get(TEST_CLASSES + \"\/].class\");\n+        dplusPath = Paths.get(TEST_CLASSES + \"\/+.class\");\n+        dsemicolonPath = Paths.get(TEST_CLASSES + \"\/;.class\");\n+        dzeroPath = Paths.get(TEST_CLASSES + \"\/0.class\");\n+        dthreePath = Paths.get(TEST_CLASSES + \"\/3.class\");\n+        dzadePath = Paths.get(TEST_CLASSES + \"\/Z.class\");\n+\n+        Files.copy(hyphenPath, dhyphenPath, REPLACE_EXISTING);\n+        Files.copy(commaPath, dcommaPath, REPLACE_EXISTING);\n+        Files.copy(periodPath, dperiodPath, REPLACE_EXISTING);\n+        Files.copy(leftsquarePath, dleftsquarePath, REPLACE_EXISTING);\n+        Files.copy(rightsquarePath, drightsquarePath, REPLACE_EXISTING);\n+        Files.copy(plusPath, dplusPath, REPLACE_EXISTING);\n+        Files.copy(semicolonPath, dsemicolonPath, REPLACE_EXISTING);\n+        Files.copy(zeroPath, dzeroPath, REPLACE_EXISTING);\n+        Files.copy(threePath, dthreePath, REPLACE_EXISTING);\n+        Files.copy(zadePath, dzadePath, REPLACE_EXISTING);\n+    }\n+\n+    @Test\n+    public void testGoodNonJavaClassNames() throws Throwable {\n+        NonJavaNames.Baz bz = new NonJavaNames.Baz();\n@@ -61,10 +120,10 @@\n-            \",\",\n-            \"+\",\n-            \"-\",\n-            \"0\",\n-            \"3\",\n-            \/\/ \":\", These names won't work under windows.\n-            \/\/ \"<\",\n-            \/\/ \">\",\n-            \"Z\",\n-            \"]\"\n+                \",\",\n+                \"+\",\n+                \"-\",\n+                \"0\",\n+                \"3\",\n+                \/\/ \":\", These names won't work under windows.\n+                \/\/ \"<\",\n+                \/\/ \">\",\n+                \"Z\",\n+                \"]\"\n@@ -77,0 +136,1 @@\n+    }\n@@ -78,5 +138,3 @@\n-        String badNonJavaClassNames []  = {\n-            \";\",\n-            \"[\",\n-            \".\"\n-        };\n+    @Test\n+    public void testBadNonJavaClassNames() {\n+        String badNonJavaClassNames [] = {\";\", \"[\", \".\"};\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNames.java","additions":75,"deletions":17,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import jdk.test.lib.util.FileUtils;\n@@ -73,0 +74,1 @@\n+* @modules jdk.compiler\n@@ -88,1 +90,1 @@\n-        Path pkg2Dir = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\");\n+        Path pkg2Dir = Paths.get(SRC_DIR+\"\/pkg1\/pkg2\");\n@@ -91,8 +93,3 @@\n-        try {\n-            Files.deleteIfExists(pkg2File);\n-            Files.deleteIfExists(pkg2Dir);\n-            Files.deleteIfExists(pkg1File);\n-            Files.deleteIfExists(pkg1Dir);\n-            Files.createDirectories(pkg2Dir);\n-        } catch (IOException ex) {\n-            ex.printStackTrace();\n+\n+        if(!Files.notExists(pkg1Dir)) {\n+            FileUtils.deleteFileTreeWithRetry(pkg1Dir);\n@@ -100,0 +97,1 @@\n+        Files.createDirectories(pkg2Dir);\n@@ -106,1 +104,0 @@\n-\n@@ -126,1 +123,1 @@\n-    public void deleteEnclosingClasses() {\n+    public void deleteEnclosingClasses() throws IOException {\n@@ -128,11 +125,1 @@\n-        Path pkg2Dir = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\");\n-        Path pkg1File = Paths.get(SRC_DIR + \"\/pkg1\/EnclosingClass.java\");\n-        Path pkg2File = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n-        try {\n-            Files.deleteIfExists(pkg2File);\n-            Files.deleteIfExists(pkg2Dir);\n-            Files.deleteIfExists(pkg1File);\n-            Files.deleteIfExists(pkg1Dir);\n-        } catch (IOException ex) {\n-            ex.printStackTrace();\n-        }\n+        FileUtils.deleteFileTreeWithRetry(pkg1Dir);\n@@ -141,1 +128,2 @@\n-    private void createAndWriteEnclosingClasses(final Path source, final Path target, final String packagePath) {\n+    private void createAndWriteEnclosingClasses(final Path source, final Path target, final String packageName) throws IOException {\n+        String className = packageName + \".EnclosingClass\";\n@@ -147,1 +135,1 @@\n-                    line = line.replaceAll(\"canonical=\\\"EnclosingClass\", \"canonical=\\\"\" + packagePath + \".EnclosingClass\");\n+                    line = line.replaceAll(\"canonical=\\\"EnclosingClass\", \"canonical=\\\"\" + className);\n@@ -149,1 +137,1 @@\n-                    line = line.replaceAll(\"\\\"class EnclosingClass\", \"\\\" class \" + packagePath + \".EnclosingClass\");\n+                    line = line.replaceAll(\"\\\"class EnclosingClass\", \"\\\" class \" + className);\n@@ -151,1 +139,1 @@\n-                    line = line.replaceAll(\"\/\/package\", \"package \" + packagePath + \";\");\n+                    line = line.replaceAll(\"\/\/package\", \"package \" + packageName + \";\");\n@@ -155,2 +143,0 @@\n-        } catch (IOException ex) {\n-            ex.printStackTrace();\n@@ -193,5 +179,2 @@\n-        check(c, encClass,\n-                \"\" + encClass, annotation.encl(),\n-                c.getSimpleName(), annotation.simple(),\n-                c.getCanonicalName(),\n-                annotation.hasCanonical() ? annotation.canonical() : null);\n+        check(c, encClass, \"\" + encClass, annotation.encl(), c.getSimpleName(), annotation.simple(),\n+                c.getCanonicalName(), annotation.hasCanonical() ? annotation.canonical() : null);\n@@ -202,5 +185,3 @@\n-        check(array, array.getEnclosingClass(),\n-                \"\", \"\",\n-                array.getSimpleName(), annotation.simple() + \"[]\",\n-                array.getCanonicalName(),\n-                annotation.hasCanonical() ? annotation.canonical() + \"[]\" : null);\n+        check(array, array.getEnclosingClass(), \"\", \"\", array.getSimpleName(),\n+                annotation.simple() + \"[]\", array.getCanonicalName(), annotation.hasCanonical()\n+                        ? annotation.canonical() + \"[]\" : null);\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/EnclosingClassTest.java","additions":19,"deletions":38,"binary":false,"changes":57,"status":"modified"}]}