{"files":[{"patch":"@@ -24,0 +24,9 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n@@ -25,2 +34,6 @@\n- * Used by NonJavaNames.sh; needs to be run with a classpath including\n- * test\/java\/lang\/Class\/forName\/classes\n+ * @test\n+ * @bug 4952558\n+ * @library \/test\/lib\n+ * @build NonJavaNames\n+ * @run testng\/othervm NonJavaNames\n+ * @summary Verify names that aren't legal Java names are accepted by forName.\n@@ -47,2 +60,28 @@\n-    public static void main(String[] args) throws Exception {\n-        NonJavaNames.Baz bz = new NonJavaNames.Baz();\n+    private static final String SRC_DIR = System.getProperty(\"test.src\");\n+    private static final String TEST_SRC = SRC_DIR + \"\/classes\/\";\n+    private static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n+    Path dhyphenPath, dcommaPath, dperiodPath, dleftsquarePath, drightsquarePath, dplusPath, dsemicolonPath, dzeroPath, dthreePath, dzadePath;\n+\n+    @BeforeClass\n+    public void createInvalidNameClasses() throws IOException {\n+        Path hyphenPath = Paths.get(TEST_SRC + \"hyphen.class\");\n+        Path commaPath = Paths.get(TEST_SRC + \"comma.class\");\n+        Path periodPath = Paths.get(TEST_SRC + \"period.class\");\n+        Path leftsquarePath = Paths.get(TEST_SRC + \"left-square.class\");\n+        Path rightsquarePath = Paths.get(TEST_SRC + \"right-square.class\");\n+        Path plusPath = Paths.get(TEST_SRC + \"plus.class\");\n+        Path semicolonPath = Paths.get(TEST_SRC + \"semicolon.class\");\n+        Path zeroPath = Paths.get(TEST_SRC + \"0.class\");\n+        Path threePath = Paths.get(TEST_SRC + \"3.class\");\n+        Path zadePath = Paths.get(TEST_SRC + \"Z.class\");\n+\n+        dhyphenPath = Paths.get(TEST_CLASSES + \"\/-.class\");\n+        dcommaPath = Paths.get(TEST_CLASSES + \"\/,.class\");\n+        dperiodPath = Paths.get(TEST_CLASSES + \"\/..class\");\n+        dleftsquarePath = Paths.get(TEST_CLASSES + \"\/[.class\");\n+        drightsquarePath = Paths.get(TEST_CLASSES + \"\/].class\");\n+        dplusPath = Paths.get(TEST_CLASSES + \"\/+.class\");\n+        dsemicolonPath = Paths.get(TEST_CLASSES + \"\/;.class\");\n+        dzeroPath = Paths.get(TEST_CLASSES + \"\/0.class\");\n+        dthreePath = Paths.get(TEST_CLASSES + \"\/3.class\");\n+        dzadePath = Paths.get(TEST_CLASSES + \"\/Z.class\");\n@@ -50,0 +89,15 @@\n+        Files.copy(hyphenPath, dhyphenPath, REPLACE_EXISTING);\n+        Files.copy(commaPath, dcommaPath, REPLACE_EXISTING);\n+        Files.copy(periodPath, dperiodPath, REPLACE_EXISTING);\n+        Files.copy(leftsquarePath, dleftsquarePath, REPLACE_EXISTING);\n+        Files.copy(rightsquarePath, drightsquarePath, REPLACE_EXISTING);\n+        Files.copy(plusPath, dplusPath, REPLACE_EXISTING);\n+        Files.copy(semicolonPath, dsemicolonPath, REPLACE_EXISTING);\n+        Files.copy(zeroPath, dzeroPath, REPLACE_EXISTING);\n+        Files.copy(threePath, dthreePath, REPLACE_EXISTING);\n+        Files.copy(zadePath, dzadePath, REPLACE_EXISTING);\n+    }\n+\n+    @Test\n+    public void testGoodNonJavaClassNames() throws Throwable {\n+        NonJavaNames.Baz bz = new NonJavaNames.Baz();\n@@ -66,10 +120,10 @@\n-            \",\",\n-            \"+\",\n-            \"-\",\n-            \"0\",\n-            \"3\",\n-            \/\/ \":\", These names won't work under windows.\n-            \/\/ \"<\",\n-            \/\/ \">\",\n-            \"Z\",\n-            \"]\"\n+                \",\",\n+                \"+\",\n+                \"-\",\n+                \"0\",\n+                \"3\",\n+                \/\/ \":\", These names won't work under windows.\n+                \/\/ \"<\",\n+                \/\/ \">\",\n+                \"Z\",\n+                \"]\"\n@@ -82,0 +136,1 @@\n+    }\n@@ -83,5 +138,3 @@\n-        String badNonJavaClassNames []  = {\n-            \";\",\n-            \"[\",\n-            \".\"\n-        };\n+    @Test\n+    public void testBadNonJavaClassNames() {\n+        String badNonJavaClassNames [] = {\";\", \"[\", \".\"};\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNames.java","additions":72,"deletions":19,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-#\n-# Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4952558\n-# @summary Verify names that aren't legal Java names are accepted by forName.\n-# @author Joseph D. Darcy\n-# @compile NonJavaNames.java\n-# @run shell NonJavaNames.sh\n-\n-# This test uses hand-generated class files stored in the .\/classes\n-# directory.  After the renaming done below, those class files have\n-# single character names that are legal class names under in the class\n-# file but *not* legal Java language identifiers; e.g. \"3\" and \"+\".\n-# First, Z.java is compiled to Z.class.  Next, to create a test class\n-# file, the appropriate name structures within the class files are\n-# updated, as is the \"Hello world\" string the class's main method\n-# prints out.\n-\n-# Verify directory context variables are set\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-# All preconditions are met; run the tests\n-\n-OS=`uname -s`;\n-# Set classpath separator\n-case \"$OS\" in\n-        Windows* | CYGWIN* )\n-\tSEP=\";\"\n-        ;;\n-\n-\t* )\n-\tSEP=\":\"\n-esac\n-\n-# Copy \"hyphen.class\" to \"-.class\"\n-\n-COPYHYPHEN=\"cp ${TESTSRC}\/classes\/hyphen.class ${TESTCLASSES}\/-.class\"\n-$COPYHYPHEN\n-\n-COPYCOMMA=\"cp ${TESTSRC}\/classes\/comma.class ${TESTCLASSES}\/,.class\"\n-$COPYCOMMA\n-\n-COPYPERIOD=\"cp ${TESTSRC}\/classes\/period.class ${TESTCLASSES}\/..class\"\n-$COPYPERIOD\n-\n-COPYLEFTSQUARE=\"cp ${TESTSRC}\/classes\/left-square.class ${TESTCLASSES}\/[.class\"\n-$COPYLEFTSQUARE\n-\n-COPYRIGHTSQUARE=\"cp ${TESTSRC}\/classes\/right-square.class ${TESTCLASSES}\/].class\"\n-$COPYRIGHTSQUARE\n-\n-COPYPLUS=\"cp ${TESTSRC}\/classes\/plus.class ${TESTCLASSES}\/+.class\"\n-$COPYPLUS\n-\n-COPYSEMICOLON=\"cp ${TESTSRC}\/classes\/semicolon.class ${TESTCLASSES}\/;.class\"\n-$COPYSEMICOLON\n-\n-JAVA=\"$TESTJAVA\/bin\/java ${TESTVMOPTS} -classpath ${TESTSRC}\/classes${SEP}${TESTCLASSES}\"\n-\n-$JAVA NonJavaNames\n-RESULT=$?\n-\n-case \"$RESULT\" in\n-        0 )\n-        exit 0;\n-        ;;\n-\n-        * )\n-        exit 1\n-esac\n-\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNames.sh","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,0 @@\n-\/*\n- * @test\n- * @bug 4992173 4992170\n- *\n- * @run shell make_src.sh\n- * @run shell build.sh\n- * @run main\/othervm -esa -ea EnclosingClassTest\n- *\n- * @summary Check getEnclosingClass and other methods\n- * @author Peter von der Ah\\u00e9\n- *\/\n@@ -62,2 +51,5 @@\n-import java.util.List;\n-import java.util.LinkedList;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n@@ -65,0 +57,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n@@ -66,0 +62,19 @@\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.FileUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\/*\n+* @test\n+* @bug 4992173 4992170\n+* @library \/test\/lib\n+* @modules jdk.compiler\n+* @build jdk.test.lib.process.* EnclosingClassTest\n+* @run testng\/othervm EnclosingClassTest\n+* @summary Check getEnclosingClass and other methods\n+* @author Peter von der Ah\\u00e9\n+*\/\n+\n@@ -68,2 +83,65 @@\n-    static void info(Class<?> c, Class<?> encClass, String desc) {\n-        if (!\"\".equals(desc))\n+    private static final String SRC_DIR = System.getProperty(\"test.src\");\n+    private static final String ENCLOSING_CLASS_SRC = SRC_DIR + \"\/EnclosingClass.java\";\n+\n+    @BeforeClass\n+    public void createEnclosingClasses() throws Throwable {\n+        Path enclosingPath = Paths.get(ENCLOSING_CLASS_SRC);\n+        Path pkg1Dir = Paths.get(SRC_DIR + \"\/pkg1\");\n+        Path pkg2Dir = Paths.get(SRC_DIR+\"\/pkg1\/pkg2\");\n+        Path pkg1File = Paths.get(SRC_DIR + \"\/pkg1\/EnclosingClass.java\");\n+        Path pkg2File = Paths.get(SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n+\n+        if(!Files.notExists(pkg1Dir)) {\n+            FileUtils.deleteFileTreeWithRetry(pkg1Dir);\n+        }\n+        Files.createDirectories(pkg2Dir);\n+        createAndWriteEnclosingClasses(enclosingPath, pkg1File, \"pkg1\");\n+        createAndWriteEnclosingClasses(enclosingPath, pkg2File, \"pkg1.pkg2\");\n+\n+        String javacPath = JDKToolFinder.getJDKTool(\"javac\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(javacPath, \"-d\", System.getProperty(\"test.classes\", \".\"),\n+                SRC_DIR + \"\/EnclosingClass.java\", SRC_DIR + \"\/pkg1\/EnclosingClass.java\", SRC_DIR + \"\/pkg1\/pkg2\/EnclosingClass.java\");\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    @Test\n+    public void testEnclosingClasses() throws Throwable {\n+        test(Class.forName(\"EnclosingClass\").getDeclaredConstructor().newInstance());\n+    }\n+\n+    @Test\n+    public void testEnclosingClassesInPackage() throws Throwable {\n+        test(Class.forName(\"pkg1.EnclosingClass\").getDeclaredConstructor().newInstance());\n+    }\n+\n+    @Test\n+    public void testEnclosingClassesInNestedPackage() throws Throwable {\n+        test(Class.forName(\"pkg1.pkg2.EnclosingClass\").getDeclaredConstructor().newInstance());\n+    }\n+\n+    @AfterClass\n+    public void deleteEnclosingClasses() throws IOException {\n+        Path pkg1Dir = Paths.get(SRC_DIR + \"\/pkg1\");\n+        FileUtils.deleteFileTreeWithRetry(pkg1Dir);\n+    }\n+\n+    private void createAndWriteEnclosingClasses(final Path source, final Path target, final String packageName) throws IOException {\n+        String className = packageName + \".EnclosingClass\";\n+        try (BufferedReader br = new BufferedReader(new FileReader(source.toFile()));\n+        PrintWriter bw = new PrintWriter(new FileWriter(target.toFile()))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                if (line.contains(\"canonical=\\\"EnclosingClass\")) {\n+                    line = line.replaceAll(\"canonical=\\\"EnclosingClass\", \"canonical=\\\"\" + className);\n+                } else if (line.contains(\"\\\"class EnclosingClass\")) {\n+                    line = line.replaceAll(\"\\\"class EnclosingClass\", \"\\\" class \" + className);\n+                } else if (line.contains(\"\/\/package\")) {\n+                    line = line.replaceAll(\"\/\/package\", \"package \" + packageName + \";\");\n+                }\n+                bw.println(line);\n+            }\n+        }\n+    }\n+\n+    private void info(final Class<?> c, final Class<?> encClass, final String desc) {\n+        if (!\"\".equals(desc)) {\n@@ -71,0 +149,1 @@\n+        }\n@@ -73,4 +152,2 @@\n-        System.out.println(\"\\thas simple name:\\t`\" +\n-                           c.getSimpleName() + \"'\");\n-        System.out.println(\"\\thas canonical name:\\t`\" +\n-                           c.getCanonicalName() + \"'\");\n+        System.out.println(\"\\thas simple name:\\t`\" + c.getSimpleName() + \"'\");\n+        System.out.println(\"\\thas canonical name:\\t`\" + c.getCanonicalName() + \"'\");\n@@ -79,5 +156,4 @@\n-    static void match(String actual, String expected) {\n-        assert((actual == null && expected == null) || actual.equals(expected));\n-        System.out.println(\"\\t`\" +\n-                           actual + \"' matches expected `\" +\n-                           expected + \"'\");\n+    private void match(final String actual, final String expected) {\n+        System.out.println(\"actual:\" + actual + \"expected:\" + expected);\n+        assert ((actual == null && expected == null) || actual.trim().equals(expected.trim()));\n+        System.out.println(\"\\t`\" + actual + \"' matches expected `\" + expected + \"'\");\n@@ -86,4 +162,4 @@\n-    static void check(Class<?> c, Class<?> enc,\n-                      String encName, String encNameExpected,\n-                      String simpleName, String simpleNameExpected,\n-                      String canonicalName, String canonicalNameExpected) {\n+    private void check(final Class<?> c, final Class<?> enc,\n+               final String encName, final String encNameExpected,\n+               final String simpleName, final String simpleNameExpected,\n+               final String canonicalName, final String canonicalNameExpected) {\n@@ -95,2 +171,2 @@\n-    static void testClass(Class<?> c, TestMe annotation, Field f) {\n-        if (Void.class.equals(c))\n+    private void testClass(final Class<?> c, final TestMe annotation, final Field f) {\n+        if (Void.class.equals(c)) {\n@@ -98,0 +174,1 @@\n+        }\n@@ -102,6 +179,3 @@\n-        check(c, encClass,\n-              \"\"+encClass, annotation.encl(),\n-              c.getSimpleName(), annotation.simple(),\n-              c.getCanonicalName(),\n-              annotation.hasCanonical() ? annotation.canonical() : null);\n-        if (void.class.equals(c))\n+        check(c, encClass, \"\" + encClass, annotation.encl(), c.getSimpleName(), annotation.simple(),\n+                c.getCanonicalName(), annotation.hasCanonical() ? annotation.canonical() : null);\n+        if (void.class.equals(c)) {\n@@ -109,0 +183,1 @@\n+        }\n@@ -110,5 +185,3 @@\n-        check(array, array.getEnclosingClass(),\n-              \"\", \"\",\n-              array.getSimpleName(), annotation.simple()+\"[]\",\n-              array.getCanonicalName(),\n-              annotation.hasCanonical() ? annotation.canonical()+\"[]\" : null);\n+        check(array, array.getEnclosingClass(), \"\", \"\", array.getSimpleName(),\n+                annotation.simple() + \"[]\", array.getCanonicalName(), annotation.hasCanonical()\n+                        ? annotation.canonical() + \"[]\" : null);\n@@ -117,1 +190,1 @@\n-    static void test(Object tests) {\n+    private void test(final Object tests) {\n@@ -122,1 +195,1 @@\n-                    testClass((Class<?>)f.get(tests), annotation, f);\n+                    testClass((Class<?>) f.get(tests), annotation, f);\n@@ -124,3 +197,1 @@\n-                    System.err.println(\"Error in \" +\n-                                       tests.getClass().getName() +\n-                                       \".\" + f.getName());\n+                    System.err.println(\"Error in \" + tests.getClass().getName() + \".\" + f.getName());\n@@ -135,5 +206,0 @@\n-    public static void main(String[] args) {\n-        test(new EnclosingClass());\n-        test(new pkg1.EnclosingClass());\n-        test(new pkg1.pkg2.EnclosingClass());\n-    }\n@@ -141,0 +207,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/EnclosingClassTest.java","additions":119,"deletions":52,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-#\n-# Copyright (c) 2004, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# -*- shell-script -*-\n-#\n-# @summary Check getEnclosingClass and other methods\n-# @author Peter von der Ahé\n-\n-OS=`uname -s`;\n-case \"${OS}\" in\n-        Windows* | CYGWIN* )\n-                SEP=\";\"\n-        ;;\n-\n-        * )\n-        SEP=\":\"\n-        ;;\n-esac\n-\n-JAVAC=${COMPILEJAVA}\/bin\/javac\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES} -sourcepath ${TESTSRC}${SEP}. \\\n-    ${TESTSRC}\/EnclosingClassTest.java\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/build.sh","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-#\n-# Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# -*- shell-script -*-\n-# @summary Check getEnclosingClass and other methods\n-# @author Peter von der Ahé\n-\n-rm -rf   pkg1\n-mkdir    pkg1\n-mkdir -p pkg1\/pkg2\n-\n-sed '\n-s\/canonical=\"EnclosingClass\/canonical=\"pkg1.EnclosingClass\/g;\n-s\/\"class EnclosingClass\/\"class pkg1.EnclosingClass\/g;\n-s\/\\\/\\\/package\/package pkg1;\/g' < ${TESTSRC}\/EnclosingClass.java > pkg1\/EnclosingClass.java\n-\n-sed '\n-s\/canonical=\"EnclosingClass\/canonical=\"pkg1.pkg2.EnclosingClass\/g;\n-s\/\"class EnclosingClass\/\"class pkg1.pkg2.EnclosingClass\/g;\n-s\/\\\/\\\/package\/package pkg1.pkg2;\/g' < ${TESTSRC}\/EnclosingClass.java > pkg1\/pkg2\/EnclosingClass.java\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/make_src.sh","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"}]}