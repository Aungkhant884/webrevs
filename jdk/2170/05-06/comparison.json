{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.nio.file.Paths;\n@@ -31,0 +30,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -60,2 +60,2 @@\n-    private static final Path TEST_SRC = Paths.get(SRC_DIR,  \"classes\");\n-    private static final Path TEST_CLASSES = Paths.get(System.getProperty(\"test.classes\", \".\"));\n+    private static final Path TEST_SRC = Path.of(SRC_DIR,  \"classes\");\n+    private static final Path TEST_CLASSES = Path.of(System.getProperty(\"test.classes\", \".\"));\n@@ -100,1 +100,1 @@\n-    public void testGoodNonJavaClassNames() throws Throwable {\n+    public void testForNameReturnsSameClass() throws Throwable {\n@@ -116,0 +116,19 @@\n+    }\n+\n+    @Test(dataProvider = \"goodNonJavaClassNames\")\n+    public void testGoodNonJavaClassNames(String name) throws Throwable {\n+        System.out.println(\"Testing good class name ``\" + name + \"''\");\n+        Class.forName(name);\n+    }\n+\n+    @Test(dataProvider = \"badNonJavaClassNames\")\n+    public void testBadNonJavaClassNames(String name) {\n+        System.out.println(\"Testing bad class name ``\" + name + \"''\");\n+        try {\n+            Class.forName(name);\n+        } catch (Exception e) {\n+            \/\/ Expected behavior\n+            return;\n+        }\n+        throw new RuntimeException(\"Bad class name ``\" + name + \"'' accepted.\");\n+    }\n@@ -117,6 +136,8 @@\n-        String goodNonJavaClassNames []  = {\n-                \",\",\n-                \"+\",\n-                \"-\",\n-                \"0\",\n-                \"3\",\n+    @DataProvider(name = \"goodNonJavaClassNames\")\n+    Object[][] getGoodNonJavaClassNames() {\n+        return new Object[][] {\n+                {\",\"},\n+                {\"+\"},\n+                {\"-\"},\n+                {\"0\"},\n+                {\"3\"},\n@@ -126,2 +147,2 @@\n-                \"Z\",\n-                \"]\"\n+                {\"Z\"},\n+                {\"]\"}\n@@ -129,5 +150,0 @@\n-\n-        for(String s : goodNonJavaClassNames) {\n-            System.out.println(\"Testing good class name ``\" + s + \"''\");\n-            Class.forName(s);\n-        }\n@@ -136,14 +152,3 @@\n-    @Test\n-    public void testBadNonJavaClassNames() {\n-        String badNonJavaClassNames [] = {\";\", \"[\", \".\"};\n-\n-        for(String s : badNonJavaClassNames) {\n-            System.out.println(\"Testing bad class name ``\" + s + \"''\");\n-            try {\n-                Class.forName(s);\n-            } catch (Exception e) {\n-                \/\/ Expected behavior\n-                continue;\n-            }\n-            throw new RuntimeException(\"Bad class name ``\" + s + \"'' accepted.\");\n-        }\n+    @DataProvider(name = \"badNonJavaClassNames\")\n+    Object[][] getBadNonJavaClassNames() {\n+        return new Object[][] {{\";\"}, {\"[\"}, {\".\"}};\n@@ -151,0 +156,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/NonJavaNames.java","additions":37,"deletions":31,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -24,0 +24,26 @@\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import common.TestMe;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.util.FileUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 4992173 4992170\n+ * @library \/test\/lib\n+ * @modules jdk.compiler\n+ * @run testng\/othervm EnclosingClassTest\n+ * @summary Check getEnclosingClass and other methods\n+ * @author Peter von der Ah\\u00e9\n+ *\/\n@@ -51,29 +77,0 @@\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import common.TestMe;\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.util.FileUtils;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-\/*\n-* @test\n-* @bug 4992173 4992170\n-* @library \/test\/lib\n-* @modules jdk.compiler\n-* @run testng\/othervm EnclosingClassTest\n-* @summary Check getEnclosingClass and other methods\n-* @author Peter von der Ah\\u00e9\n-*\/\n-\n-\n@@ -82,1 +79,1 @@\n-    private static final Path ENCLOSING_CLASS_SRC = Paths.get(SRC_DIR , \"EnclosingClass.java\");\n+    private static final Path ENCLOSING_CLASS_SRC = Path.of(SRC_DIR, \"EnclosingClass.java\");\n@@ -86,2 +83,2 @@\n-        Path pkg1Dir = Paths.get(SRC_DIR, \"pkg1\");\n-        Path pkg2Dir = Paths.get(SRC_DIR, \"pkg1\", \"pkg2\");\n+        Path pkg1Dir = Path.of(SRC_DIR, \"pkg1\");\n+        Path pkg2Dir = Path.of(SRC_DIR, \"pkg1\", \"pkg2\");\n@@ -91,1 +88,1 @@\n-        if(!Files.notExists(pkg1Dir)) {\n+        if (!Files.notExists(pkg1Dir)) {\n@@ -98,4 +95,6 @@\n-        CompilerUtils.compile(ENCLOSING_CLASS_SRC, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\",\n-                SRC_DIR);\n-        CompilerUtils.compile(pkg1File, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\", SRC_DIR);\n-        CompilerUtils.compile(pkg2File, Paths.get(System.getProperty(\"test.classes\", \".\")), \"--source-path\", SRC_DIR);\n+        CompilerUtils.compile(ENCLOSING_CLASS_SRC, Path.of(System.getProperty(\"test.classes\", \".\")),\n+                \"--source-path\", SRC_DIR);\n+        CompilerUtils.compile(pkg1File, Path.of(System.getProperty(\"test.classes\", \".\")),\n+                \"--source-path\", SRC_DIR);\n+        CompilerUtils.compile(pkg2File, Path.of(System.getProperty(\"test.classes\", \".\")),\n+                \"--source-path\", SRC_DIR);\n@@ -111,2 +110,2 @@\n-    public void testEnclosingClassesInPackage() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n+    public void testEnclosingClassesInPackage() throws ClassNotFoundException, NoSuchMethodException,\n+            IllegalAccessException, InvocationTargetException, InstantiationException {\n@@ -117,2 +116,2 @@\n-    public void testEnclosingClassesInNestedPackage() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n+    public void testEnclosingClassesInNestedPackage() throws ClassNotFoundException, NoSuchMethodException,\n+            IllegalAccessException, InvocationTargetException, InstantiationException {\n@@ -124,1 +123,1 @@\n-        Path pkg1Dir = Paths.get(SRC_DIR, \"\/pkg1\");\n+        Path pkg1Dir = Path.of(SRC_DIR, \"\/pkg1\");\n@@ -128,1 +127,1 @@\n-    private void createAndWriteEnclosingClasses(final Path source, final Path target, final String packageName) throws IOException {\n+    private void createAndWriteEnclosingClasses(Path source, Path target, String packageName) throws IOException {\n@@ -146,1 +145,1 @@\n-    private void info(final Class<?> c, final Class<?> encClass, final String desc) {\n+    private void info(Class<?> c, Class<?> encClass, String desc) {\n@@ -160,2 +159,2 @@\n-                actual + \"' matches expected `\" +\n-                expected + \"'\");\n+                           actual + \"' matches expected `\" +\n+                           expected + \"'\");\n@@ -181,4 +180,4 @@\n-                \"\"+encClass, annotation.encl(),\n-                c.getSimpleName(), annotation.simple(),\n-                c.getCanonicalName(),\n-                annotation.hasCanonical() ? annotation.canonical() : null);\n+              \"\"+encClass, annotation.encl(),\n+              c.getSimpleName(), annotation.simple(),\n+              c.getCanonicalName(),\n+              annotation.hasCanonical() ? annotation.canonical() : null);\n@@ -189,4 +188,4 @@\n-                \"\", \"\",\n-                array.getSimpleName(), annotation.simple()+\"[]\",\n-                array.getCanonicalName(),\n-                annotation.hasCanonical() ? annotation.canonical()+\"[]\" : null);\n+              \"\", \"\",\n+              array.getSimpleName(), annotation.simple()+\"[]\",\n+              array.getCanonicalName(),\n+              annotation.hasCanonical() ? annotation.canonical()+\"[]\" : null);\n@@ -203,2 +202,2 @@\n-                            tests.getClass().getName() +\n-                            \".\" + f.getName());\n+                                       tests.getClass().getName() +\n+                                       \".\" + f.getName());\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingClass\/EnclosingClassTest.java","additions":55,"deletions":56,"binary":false,"changes":111,"status":"modified"}]}