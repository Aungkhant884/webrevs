{"files":[{"patch":"@@ -49,0 +49,1 @@\n+#include \"opto\/vectornode.hpp\"\n@@ -1131,1 +1132,1 @@\n-      if (store_Opcode() != st->Opcode())\n+      if (store_Opcode() != st->Opcode()) {\n@@ -1133,0 +1134,9 @@\n+      }\n+      \/\/ LoadVector\/StoreVector needs additional check to ensure the types match.\n+      if (store_Opcode() == Op_StoreVector) {\n+        const TypeVect*  in_vt = st->as_StoreVector()->vect_type();\n+        const TypeVect* out_vt = as_LoadVector()->vect_type();\n+        if (in_vt != out_vt) {\n+          return NULL;\n+        }\n+      }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.vectorization;\n+\n+\/**\n+ * @test\n+ * @bug 8263972\n+ * @requires vm.compiler2.enabled & vm.compMode != \"Xint\"\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,*TestMemoryVectorMismatched::test compiler.vectorization.TestMemoryVectorMismatched\n+ *\/\n+public class TestMemoryVectorMismatched {\n+    public static void main(String[] g) {\n+        int a = 400;\n+        long expected = -35984L;\n+        for (int i = 0; i < 10; i++) {\n+            long v = test(a);\n+            if (v != expected) {\n+                throw new AssertionError(\"Wrong result: \" + v + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    static long test(int a) {\n+        int i16, d = 5, e = -56973;\n+        long f[] = new long[a];\n+        init(f, 5);\n+        for (i16 = 2; i16 < 92; i16++) {\n+            f[i16 - 1] *= d;\n+            f[i16 + 1] *= d;\n+        }\n+        while (++e < 0) {\n+        }\n+        return checkSum(f);\n+    }\n+\n+    public static void init(long[] a, long seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+\n+\n+    public static long checkSum(long[] a) {\n+        long sum = 0;\n+        for (int j = 0; j < a.length; j++) {\n+            sum += (a[j] \/ (j + 1) + a[j] % (j + 1));\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestMemoryVectorMismatched.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}