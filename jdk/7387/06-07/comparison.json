{"files":[{"patch":"@@ -433,0 +433,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -444,0 +447,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -519,0 +525,2 @@\n+     *\n+     * @since 21\n@@ -526,0 +534,2 @@\n+     *\n+     * @since 21\n@@ -552,0 +562,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -566,0 +579,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-     * reversed-ordered view of a list without mutating it, use the\n+     * reverse-ordered view of a list without mutating it, use the\n@@ -5997,1 +5997,1 @@\n-     * <pre>{@code\n+     * {@snippet :\n@@ -6004,1 +6004,1 @@\n-     * }<\/pre>\n+     * }\n@@ -6070,2 +6070,2 @@\n-     * but it doesn't reverse the encounter order. To obtain a reversed-ordered\n-     * view, use the {@link Deque#reversed Deque::reversed} method.\n+     * but it doesn't reverse the encounter order. To obtain a reverse-ordered\n+     * view, use the {@link Deque#reversed Deque.reversed} method.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -259,0 +259,2 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -267,0 +269,2 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -276,0 +280,1 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -284,0 +289,2 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -791,0 +791,2 @@\n+     * @throws NullPointerException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n@@ -803,0 +805,2 @@\n+     * @throws NullPointerException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n@@ -816,0 +820,1 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -833,0 +838,1 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -850,0 +856,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n@@ -867,0 +875,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -331,0 +331,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n@@ -348,0 +350,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/NavigableSet.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -166,2 +166,1 @@\n-        \/\/ TODO can probably optimize this\n-        return toArray(i -> (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), i));\n+        return ArraysSupport.toArrayReversed(base, a);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderDequeView.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -288,2 +288,1 @@\n-        \/\/ TODO can probably optimize this\n-        return toArray(i -> (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), i));\n+        return ArraysSupport.toArrayReversed(base, a);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderListView.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -175,2 +175,1 @@\n-        \/\/ TODO can probably optimize this\n-        return toArray(i -> (T[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), i));\n+        return ArraysSupport.toArrayReversed(base, a);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ReverseOrderSortedSetView.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n- * This interface provides methods to add elements, to retrieve elements, and to remove\n- * elements at either end of the collection.\n+ * This interface provides methods to add, retrieve, and remove elements at either end\n+ * of the collection.\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedCollection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,4 +46,2 @@\n- * of this map. Even though the return values of the\n- * {@link #keySet keySet},\n- * {@link #values values}, and\n- * {@link #entrySet entrySet} methods are not sequenced <i>types<\/i>, the elements\n+ * of this map. Even though the return values of the {@code keySet}, {@code values}, and\n+ * {@code entrySet} methods are not sequenced <i>types<\/i>, the elements\n@@ -52,1 +50,1 @@\n- * <pre>{@code\n+ * {@snippet :\n@@ -55,1 +53,1 @@\n- * }<\/pre>\n+ * }\n@@ -72,1 +70,1 @@\n- * <pre>{@code\n+ * {@snippet :\n@@ -74,1 +72,1 @@\n- * }<\/pre>\n+ * }\n@@ -104,1 +102,1 @@\n- * <pre>{@code\n+ * {@snippet :\n@@ -106,1 +104,1 @@\n- * }<\/pre>\n+ * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedMap.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,2 +29,3 @@\n- * A collection that is both a {@link SequencedCollection} and a {@link Set}. As such, it can be\n- * thought of as either as a {@code Set} that also has a well-defined encounter order, or as a\n+ * A collection that is both a {@link SequencedCollection} and a {@link Set}. As such,\n+ * it can be thought of either as a {@code Set} that also has a well-defined\n+ * <a href=\"SequencedCollection.html#encounter\">encounter order<\/a>, or as a\n","filename":"src\/java.base\/share\/classes\/java\/util\/SequencedSet.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -303,0 +303,1 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -315,0 +316,1 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n@@ -329,0 +331,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n@@ -345,0 +349,2 @@\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @throws UnsupportedOperationException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/SortedSet.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -408,0 +408,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -419,0 +422,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -496,0 +502,2 @@\n+     *\n+     * @since 21\n@@ -503,0 +511,2 @@\n+     *\n+     * @since 21\n@@ -539,0 +549,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -551,0 +564,3 @@\n+     *\n+     * @throws NoSuchElementException {@inheritDoc}\n+     * @since 21\n@@ -1716,0 +1732,2 @@\n+     *\n+     * @since 21\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.Arrays;\n+import java.util.Collection;\n@@ -775,0 +777,32 @@\n+\n+    \/**\n+     * Dump the contents of the given collection into the given array, in reverse order.\n+     * This mirrors the semantics of Collection.toArray(T[]) in regard to reusing the given\n+     * array, appending null if necessary, or allocating a new array of the same component type.\n+     * <p>\n+     * A constraint is that this method should issue exactly one method call on the collection\n+     * to obtain the elements and the size. Having a separate size() call or using an Iterator\n+     * could result in errors if the collection changes size between calls. This implies that\n+     * the elements need to be obtained via a single call to one of the toArray() methods.\n+     * This further implies allocating memory proportional to the number of elements and\n+     * making an extra copy, but this seems unavoidable.\n+     * <p>\n+     * An obvious approach would be simply to call coll.toArray(array) and then reverse the\n+     * order of the elements. This doesn't work, because if given array is sufficiently long,\n+     * we cannot tell how many elements were copied into it and thus there is no way to reverse\n+     * the right set of elements while leaving the remaining array elements undisturbed.\n+     *\n+     * @throws ArrayStoreException if coll contains elements that can't be stored in the array\n+     *\/\n+    public static <T> T[] toArrayReversed(Collection<?> coll, T[] array) {\n+        T[] newArray = reverse(coll.toArray(Arrays.copyOfRange(array, 0, 0)));\n+        if (newArray.length > array.length) {\n+            return newArray;\n+        } else {\n+            System.arraycopy(newArray, 0, array, 0, newArray.length);\n+            if (array.length > newArray.length) {\n+                array[newArray.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}