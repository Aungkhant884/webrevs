{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-StubQueue* AbstractInterpreter::_code                                       = NULL;\n+StubQueue* AbstractInterpreter::_code                                       = nullptr;\n@@ -88,1 +88,1 @@\n-address    AbstractInterpreter::_rethrow_exception_entry                    = NULL;\n+address    AbstractInterpreter::_rethrow_exception_entry                    = nullptr;\n@@ -90,2 +90,2 @@\n-address    AbstractInterpreter::_native_entry_begin                         = NULL;\n-address    AbstractInterpreter::_native_entry_end                           = NULL;\n+address    AbstractInterpreter::_native_entry_begin                         = nullptr;\n+address    AbstractInterpreter::_native_entry_end                           = nullptr;\n@@ -100,1 +100,1 @@\n-  _masm                      = NULL;\n+  _masm                      = nullptr;\n@@ -234,1 +234,1 @@\n-        return (resolved_method == NULL);\n+        return (resolved_method == nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,2 +171,2 @@\n-  static address deopt_entry(TosState state, int length) { ShouldNotReachHere(); return NULL; }\n-  static address return_entry(TosState state, int length, Bytecodes::Code code) { ShouldNotReachHere(); return NULL; }\n+  static address deopt_entry(TosState state, int length) { ShouldNotReachHere(); return nullptr; }\n+  static address return_entry(TosState state, int length, Bytecodes::Code code) { ShouldNotReachHere(); return nullptr; }\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,1 @@\n-    oop arg_oop = ((_argc == 1) ? args->obj_at(0) : (oop)NULL);\n+    oop arg_oop = ((_argc == 1) ? args->obj_at(0) : (oop)nullptr);\n@@ -193,1 +193,1 @@\n-    if (arg_oop != NULL && !arg_oop->is_array()) {\n+    if (arg_oop != nullptr && !arg_oop->is_array()) {\n@@ -236,1 +236,1 @@\n-  bool have_msg = (msg != NULL && strlen(msg) > 0);\n+  bool have_msg = (msg != nullptr && strlen(msg) > 0);\n@@ -279,1 +279,1 @@\n-        if (x != NULL) {\n+        if (x != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-  void print_msg_on(outputStream* st, const char* msg = NULL);\n+  void print_msg_on(outputStream* st, const char* msg = nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-  assert(cpcache() != NULL, \"do not call this from verifier or rewriter\");\n+  assert(cpcache() != nullptr, \"do not call this from verifier or rewriter\");\n@@ -211,1 +211,1 @@\n-  assert(_method != NULL, \"must supply method to resolve constant\");\n+  assert(_method != nullptr, \"must supply method to resolve constant\");\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-    assert(method != NULL, \"this form requires a valid Method*\");\n+    assert(method != nullptr, \"this form requires a valid Method*\");\n@@ -62,1 +62,1 @@\n-  inline Bytecode(const ciBytecodeStream* stream, address bcp = NULL);\n+  inline Bytecode(const ciBytecodeStream* stream, address bcp = nullptr);\n@@ -326,1 +326,1 @@\n-    assert(_method != NULL, \"must supply method\");\n+    assert(_method != nullptr, \"must supply method\");\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -204,2 +204,2 @@\n-  if (value == NULL) {\n-    st->print_cr(\" NULL\");\n+  if (value == nullptr) {\n+    st->print_cr(\" null\");\n@@ -259,1 +259,1 @@\n-  if (cache == NULL) {\n+  if (cache == nullptr) {\n@@ -506,1 +506,1 @@\n-        if (str == NULL || is_reference_type(atype)) {\n+        if (str == nullptr || is_reference_type(atype)) {\n@@ -652,1 +652,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -654,1 +654,1 @@\n-    if (data != NULL) {\n+    if (data != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -196,1 +196,1 @@\n-                        bool inner_expr = false, const char *prefix = NULL);\n+                        bool inner_expr = false, const char *prefix = nullptr);\n@@ -472,1 +472,1 @@\n-    _stacks->push(NULL);\n+    _stacks->push(nullptr);\n@@ -484,1 +484,1 @@\n-      if (_stacks->at(index) == NULL) {\n+      if (_stacks->at(index) == nullptr) {\n@@ -502,1 +502,1 @@\n-      if ((bci == i) && (_stacks->at(i) != NULL)) {\n+      if ((bci == i) && (_stacks->at(i) != nullptr)) {\n@@ -515,1 +515,1 @@\n-  if (_stacks != NULL) {\n+  if (_stacks != nullptr) {\n@@ -525,1 +525,1 @@\n-  if (_stacks->at(bci) != NULL) {\n+  if (_stacks->at(bci) != nullptr) {\n@@ -545,1 +545,1 @@\n-  if (_stacks->at(bci) == NULL) {\n+  if (_stacks->at(bci) == nullptr) {\n@@ -1069,1 +1069,1 @@\n-    if (_stacks->at(bci + len) == NULL) {\n+    if (_stacks->at(bci + len) == nullptr) {\n@@ -1077,1 +1077,1 @@\n-    if (_stacks->at(dest_bci) == NULL) {\n+    if (_stacks->at(dest_bci) == nullptr) {\n@@ -1085,1 +1085,1 @@\n-    if (_stacks->at(dests.at(i)) == NULL) {\n+    if (_stacks->at(dests.at(i)) == nullptr) {\n@@ -1203,1 +1203,1 @@\n-  if (_stacks->at(bci) == NULL) {\n+  if (_stacks->at(bci) == nullptr) {\n@@ -1231,1 +1231,1 @@\n-      prefix != NULL &&\n+      prefix != nullptr &&\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-  assert(method != NULL, \"must have the method for breakpoint conversion\");\n+  assert(method != nullptr, \"must have the method for breakpoint conversion\");\n@@ -83,1 +83,1 @@\n-    if (end != NULL && bcp + 1 >= end) {\n+    if (end != nullptr && bcp + 1 >= end) {\n@@ -89,1 +89,1 @@\n-      if (end != NULL && aligned_bcp + 3*jintSize >= end) {\n+      if (end != nullptr && aligned_bcp + 3*jintSize >= end) {\n@@ -104,1 +104,1 @@\n-      if (end != NULL && aligned_bcp + 2*jintSize >= end) {\n+      if (end != nullptr && aligned_bcp + 2*jintSize >= end) {\n@@ -148,3 +148,3 @@\n-  assert(wide_format == NULL || format != NULL, \"short form must exist if there's a wide form\");\n-  int len  = (format      != NULL ? (int) strlen(format)      : 0);\n-  int wlen = (wide_format != NULL ? (int) strlen(wide_format) : 0);\n+  assert(wide_format == nullptr || format != nullptr, \"short form must exist if there's a wide form\");\n+  int len  = (format      != nullptr ? (int) strlen(format)      : 0);\n+  int wlen = (wide_format != nullptr ? (int) strlen(wide_format) : 0);\n@@ -161,2 +161,2 @@\n-  assert(is_defined(code)      == (format != NULL),      \"\");\n-  assert(wide_is_defined(code) == (wide_format != NULL), \"\");\n+  assert(is_defined(code)      == (format != nullptr),      \"\");\n+  assert(wide_is_defined(code) == (wide_format != nullptr), \"\");\n@@ -187,1 +187,1 @@\n-  if (format == NULL)  return 0;  \/\/ not even more_flags\n+  if (format == nullptr)  return 0;  \/\/ not even more_flags\n@@ -266,1 +266,1 @@\n-  \/\/ Note 1: NULL for the format string means the bytecode doesn't exist\n+  \/\/ Note 1: nullptr for the format string means the bytecode doesn't exist\n@@ -274,203 +274,203 @@\n-  def(_nop                 , \"nop\"                 , \"b\"    , NULL    , T_VOID   ,  0, false);\n-  def(_aconst_null         , \"aconst_null\"         , \"b\"    , NULL    , T_OBJECT ,  1, false);\n-  def(_iconst_m1           , \"iconst_m1\"           , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_0            , \"iconst_0\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_1            , \"iconst_1\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_2            , \"iconst_2\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_3            , \"iconst_3\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_4            , \"iconst_4\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iconst_5            , \"iconst_5\"            , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_lconst_0            , \"lconst_0\"            , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_lconst_1            , \"lconst_1\"            , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_fconst_0            , \"fconst_0\"            , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_fconst_1            , \"fconst_1\"            , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_fconst_2            , \"fconst_2\"            , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_dconst_0            , \"dconst_0\"            , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_dconst_1            , \"dconst_1\"            , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_bipush              , \"bipush\"              , \"bc\"   , NULL    , T_INT    ,  1, false);\n-  def(_sipush              , \"sipush\"              , \"bcc\"  , NULL    , T_INT    ,  1, false);\n-  def(_ldc                 , \"ldc\"                 , \"bk\"   , NULL    , T_ILLEGAL,  1, true );\n-  def(_ldc_w               , \"ldc_w\"               , \"bkk\"  , NULL    , T_ILLEGAL,  1, true );\n-  def(_ldc2_w              , \"ldc2_w\"              , \"bkk\"  , NULL    , T_ILLEGAL,  2, true );\n-  def(_iload               , \"iload\"               , \"bi\"   , \"wbii\"  , T_INT    ,  1, false);\n-  def(_lload               , \"lload\"               , \"bi\"   , \"wbii\"  , T_LONG   ,  2, false);\n-  def(_fload               , \"fload\"               , \"bi\"   , \"wbii\"  , T_FLOAT  ,  1, false);\n-  def(_dload               , \"dload\"               , \"bi\"   , \"wbii\"  , T_DOUBLE ,  2, false);\n-  def(_aload               , \"aload\"               , \"bi\"   , \"wbii\"  , T_OBJECT ,  1, false);\n-  def(_iload_0             , \"iload_0\"             , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iload_1             , \"iload_1\"             , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iload_2             , \"iload_2\"             , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_iload_3             , \"iload_3\"             , \"b\"    , NULL    , T_INT    ,  1, false);\n-  def(_lload_0             , \"lload_0\"             , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_lload_1             , \"lload_1\"             , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_lload_2             , \"lload_2\"             , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_lload_3             , \"lload_3\"             , \"b\"    , NULL    , T_LONG   ,  2, false);\n-  def(_fload_0             , \"fload_0\"             , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_fload_1             , \"fload_1\"             , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_fload_2             , \"fload_2\"             , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_fload_3             , \"fload_3\"             , \"b\"    , NULL    , T_FLOAT  ,  1, false);\n-  def(_dload_0             , \"dload_0\"             , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_dload_1             , \"dload_1\"             , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_dload_2             , \"dload_2\"             , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_dload_3             , \"dload_3\"             , \"b\"    , NULL    , T_DOUBLE ,  2, false);\n-  def(_aload_0             , \"aload_0\"             , \"b\"    , NULL    , T_OBJECT ,  1, true ); \/\/ rewriting in interpreter\n-  def(_aload_1             , \"aload_1\"             , \"b\"    , NULL    , T_OBJECT ,  1, false);\n-  def(_aload_2             , \"aload_2\"             , \"b\"    , NULL    , T_OBJECT ,  1, false);\n-  def(_aload_3             , \"aload_3\"             , \"b\"    , NULL    , T_OBJECT ,  1, false);\n-  def(_iaload              , \"iaload\"              , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_laload              , \"laload\"              , \"b\"    , NULL    , T_LONG   ,  0, true );\n-  def(_faload              , \"faload\"              , \"b\"    , NULL    , T_FLOAT  , -1, true );\n-  def(_daload              , \"daload\"              , \"b\"    , NULL    , T_DOUBLE ,  0, true );\n-  def(_aaload              , \"aaload\"              , \"b\"    , NULL    , T_OBJECT , -1, true );\n-  def(_baload              , \"baload\"              , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_caload              , \"caload\"              , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_saload              , \"saload\"              , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_istore              , \"istore\"              , \"bi\"   , \"wbii\"  , T_VOID   , -1, false);\n-  def(_lstore              , \"lstore\"              , \"bi\"   , \"wbii\"  , T_VOID   , -2, false);\n-  def(_fstore              , \"fstore\"              , \"bi\"   , \"wbii\"  , T_VOID   , -1, false);\n-  def(_dstore              , \"dstore\"              , \"bi\"   , \"wbii\"  , T_VOID   , -2, false);\n-  def(_astore              , \"astore\"              , \"bi\"   , \"wbii\"  , T_VOID   , -1, false);\n-  def(_istore_0            , \"istore_0\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_istore_1            , \"istore_1\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_istore_2            , \"istore_2\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_istore_3            , \"istore_3\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_lstore_0            , \"lstore_0\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_lstore_1            , \"lstore_1\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_lstore_2            , \"lstore_2\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_lstore_3            , \"lstore_3\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_fstore_0            , \"fstore_0\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_fstore_1            , \"fstore_1\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_fstore_2            , \"fstore_2\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_fstore_3            , \"fstore_3\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_dstore_0            , \"dstore_0\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_dstore_1            , \"dstore_1\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_dstore_2            , \"dstore_2\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_dstore_3            , \"dstore_3\"            , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_astore_0            , \"astore_0\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_astore_1            , \"astore_1\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_astore_2            , \"astore_2\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_astore_3            , \"astore_3\"            , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_iastore             , \"iastore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_lastore             , \"lastore\"             , \"b\"    , NULL    , T_VOID   , -4, true );\n-  def(_fastore             , \"fastore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_dastore             , \"dastore\"             , \"b\"    , NULL    , T_VOID   , -4, true );\n-  def(_aastore             , \"aastore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_bastore             , \"bastore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_castore             , \"castore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_sastore             , \"sastore\"             , \"b\"    , NULL    , T_VOID   , -3, true );\n-  def(_pop                 , \"pop\"                 , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_pop2                , \"pop2\"                , \"b\"    , NULL    , T_VOID   , -2, false);\n-  def(_dup                 , \"dup\"                 , \"b\"    , NULL    , T_VOID   ,  1, false);\n-  def(_dup_x1              , \"dup_x1\"              , \"b\"    , NULL    , T_VOID   ,  1, false);\n-  def(_dup_x2              , \"dup_x2\"              , \"b\"    , NULL    , T_VOID   ,  1, false);\n-  def(_dup2                , \"dup2\"                , \"b\"    , NULL    , T_VOID   ,  2, false);\n-  def(_dup2_x1             , \"dup2_x1\"             , \"b\"    , NULL    , T_VOID   ,  2, false);\n-  def(_dup2_x2             , \"dup2_x2\"             , \"b\"    , NULL    , T_VOID   ,  2, false);\n-  def(_swap                , \"swap\"                , \"b\"    , NULL    , T_VOID   ,  0, false);\n-  def(_iadd                , \"iadd\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_ladd                , \"ladd\"                , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_fadd                , \"fadd\"                , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_dadd                , \"dadd\"                , \"b\"    , NULL    , T_DOUBLE , -2, false);\n-  def(_isub                , \"isub\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lsub                , \"lsub\"                , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_fsub                , \"fsub\"                , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_dsub                , \"dsub\"                , \"b\"    , NULL    , T_DOUBLE , -2, false);\n-  def(_imul                , \"imul\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lmul                , \"lmul\"                , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_fmul                , \"fmul\"                , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_dmul                , \"dmul\"                , \"b\"    , NULL    , T_DOUBLE , -2, false);\n-  def(_idiv                , \"idiv\"                , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_ldiv                , \"ldiv\"                , \"b\"    , NULL    , T_LONG   , -2, true );\n-  def(_fdiv                , \"fdiv\"                , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_ddiv                , \"ddiv\"                , \"b\"    , NULL    , T_DOUBLE , -2, false);\n-  def(_irem                , \"irem\"                , \"b\"    , NULL    , T_INT    , -1, true );\n-  def(_lrem                , \"lrem\"                , \"b\"    , NULL    , T_LONG   , -2, true );\n-  def(_frem                , \"frem\"                , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_drem                , \"drem\"                , \"b\"    , NULL    , T_DOUBLE , -2, false);\n-  def(_ineg                , \"ineg\"                , \"b\"    , NULL    , T_INT    ,  0, false);\n-  def(_lneg                , \"lneg\"                , \"b\"    , NULL    , T_LONG   ,  0, false);\n-  def(_fneg                , \"fneg\"                , \"b\"    , NULL    , T_FLOAT  ,  0, false);\n-  def(_dneg                , \"dneg\"                , \"b\"    , NULL    , T_DOUBLE ,  0, false);\n-  def(_ishl                , \"ishl\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lshl                , \"lshl\"                , \"b\"    , NULL    , T_LONG   , -1, false);\n-  def(_ishr                , \"ishr\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lshr                , \"lshr\"                , \"b\"    , NULL    , T_LONG   , -1, false);\n-  def(_iushr               , \"iushr\"               , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lushr               , \"lushr\"               , \"b\"    , NULL    , T_LONG   , -1, false);\n-  def(_iand                , \"iand\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_land                , \"land\"                , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_ior                 , \"ior\"                 , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lor                 , \"lor\"                 , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_ixor                , \"ixor\"                , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_lxor                , \"lxor\"                , \"b\"    , NULL    , T_LONG   , -2, false);\n-  def(_iinc                , \"iinc\"                , \"bic\"  , \"wbiicc\", T_VOID   ,  0, false);\n-  def(_i2l                 , \"i2l\"                 , \"b\"    , NULL    , T_LONG   ,  1, false);\n-  def(_i2f                 , \"i2f\"                 , \"b\"    , NULL    , T_FLOAT  ,  0, false);\n-  def(_i2d                 , \"i2d\"                 , \"b\"    , NULL    , T_DOUBLE ,  1, false);\n-  def(_l2i                 , \"l2i\"                 , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_l2f                 , \"l2f\"                 , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_l2d                 , \"l2d\"                 , \"b\"    , NULL    , T_DOUBLE ,  0, false);\n-  def(_f2i                 , \"f2i\"                 , \"b\"    , NULL    , T_INT    ,  0, false);\n-  def(_f2l                 , \"f2l\"                 , \"b\"    , NULL    , T_LONG   ,  1, false);\n-  def(_f2d                 , \"f2d\"                 , \"b\"    , NULL    , T_DOUBLE ,  1, false);\n-  def(_d2i                 , \"d2i\"                 , \"b\"    , NULL    , T_INT    , -1, false);\n-  def(_d2l                 , \"d2l\"                 , \"b\"    , NULL    , T_LONG   ,  0, false);\n-  def(_d2f                 , \"d2f\"                 , \"b\"    , NULL    , T_FLOAT  , -1, false);\n-  def(_i2b                 , \"i2b\"                 , \"b\"    , NULL    , T_BYTE   ,  0, false);\n-  def(_i2c                 , \"i2c\"                 , \"b\"    , NULL    , T_CHAR   ,  0, false);\n-  def(_i2s                 , \"i2s\"                 , \"b\"    , NULL    , T_SHORT  ,  0, false);\n-  def(_lcmp                , \"lcmp\"                , \"b\"    , NULL    , T_VOID   , -3, false);\n-  def(_fcmpl               , \"fcmpl\"               , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_fcmpg               , \"fcmpg\"               , \"b\"    , NULL    , T_VOID   , -1, false);\n-  def(_dcmpl               , \"dcmpl\"               , \"b\"    , NULL    , T_VOID   , -3, false);\n-  def(_dcmpg               , \"dcmpg\"               , \"b\"    , NULL    , T_VOID   , -3, false);\n-  def(_ifeq                , \"ifeq\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_ifne                , \"ifne\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_iflt                , \"iflt\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_ifge                , \"ifge\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_ifgt                , \"ifgt\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_ifle                , \"ifle\"                , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_if_icmpeq           , \"if_icmpeq\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_icmpne           , \"if_icmpne\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_icmplt           , \"if_icmplt\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_icmpge           , \"if_icmpge\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_icmpgt           , \"if_icmpgt\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_icmple           , \"if_icmple\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_acmpeq           , \"if_acmpeq\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_if_acmpne           , \"if_acmpne\"           , \"boo\"  , NULL    , T_VOID   , -2, false);\n-  def(_goto                , \"goto\"                , \"boo\"  , NULL    , T_VOID   ,  0, false);\n-  def(_jsr                 , \"jsr\"                 , \"boo\"  , NULL    , T_INT    ,  0, false);\n-  def(_ret                 , \"ret\"                 , \"bi\"   , \"wbii\"  , T_VOID   ,  0, false);\n-  def(_tableswitch         , \"tableswitch\"         , \"\"     , NULL    , T_VOID   , -1, false); \/\/ may have backward branches\n-  def(_lookupswitch        , \"lookupswitch\"        , \"\"     , NULL    , T_VOID   , -1, false); \/\/ rewriting in interpreter\n-  def(_ireturn             , \"ireturn\"             , \"b\"    , NULL    , T_INT    , -1, true);\n-  def(_lreturn             , \"lreturn\"             , \"b\"    , NULL    , T_LONG   , -2, true);\n-  def(_freturn             , \"freturn\"             , \"b\"    , NULL    , T_FLOAT  , -1, true);\n-  def(_dreturn             , \"dreturn\"             , \"b\"    , NULL    , T_DOUBLE , -2, true);\n-  def(_areturn             , \"areturn\"             , \"b\"    , NULL    , T_OBJECT , -1, true);\n-  def(_return              , \"return\"              , \"b\"    , NULL    , T_VOID   ,  0, true);\n-  def(_getstatic           , \"getstatic\"           , \"bJJ\"  , NULL    , T_ILLEGAL,  1, true );\n-  def(_putstatic           , \"putstatic\"           , \"bJJ\"  , NULL    , T_ILLEGAL, -1, true );\n-  def(_getfield            , \"getfield\"            , \"bJJ\"  , NULL    , T_ILLEGAL,  0, true );\n-  def(_putfield            , \"putfield\"            , \"bJJ\"  , NULL    , T_ILLEGAL, -2, true );\n-  def(_invokevirtual       , \"invokevirtual\"       , \"bJJ\"  , NULL    , T_ILLEGAL, -1, true);\n-  def(_invokespecial       , \"invokespecial\"       , \"bJJ\"  , NULL    , T_ILLEGAL, -1, true);\n-  def(_invokestatic        , \"invokestatic\"        , \"bJJ\"  , NULL    , T_ILLEGAL,  0, true);\n-  def(_invokeinterface     , \"invokeinterface\"     , \"bJJ__\", NULL    , T_ILLEGAL, -1, true);\n-  def(_invokedynamic       , \"invokedynamic\"       , \"bJJJJ\", NULL    , T_ILLEGAL,  0, true );\n-  def(_new                 , \"new\"                 , \"bkk\"  , NULL    , T_OBJECT ,  1, true );\n-  def(_newarray            , \"newarray\"            , \"bc\"   , NULL    , T_OBJECT ,  0, true );\n-  def(_anewarray           , \"anewarray\"           , \"bkk\"  , NULL    , T_OBJECT ,  0, true );\n-  def(_arraylength         , \"arraylength\"         , \"b\"    , NULL    , T_INT    ,  0, true );\n-  def(_athrow              , \"athrow\"              , \"b\"    , NULL    , T_VOID   , -1, true );\n-  def(_checkcast           , \"checkcast\"           , \"bkk\"  , NULL    , T_OBJECT ,  0, true );\n-  def(_instanceof          , \"instanceof\"          , \"bkk\"  , NULL    , T_INT    ,  0, true );\n-  def(_monitorenter        , \"monitorenter\"        , \"b\"    , NULL    , T_VOID   , -1, true );\n-  def(_monitorexit         , \"monitorexit\"         , \"b\"    , NULL    , T_VOID   , -1, true );\n-  def(_wide                , \"wide\"                , \"\"     , NULL    , T_VOID   ,  0, false);\n-  def(_multianewarray      , \"multianewarray\"      , \"bkkc\" , NULL    , T_OBJECT ,  1, true );\n-  def(_ifnull              , \"ifnull\"              , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_ifnonnull           , \"ifnonnull\"           , \"boo\"  , NULL    , T_VOID   , -1, false);\n-  def(_goto_w              , \"goto_w\"              , \"boooo\", NULL    , T_VOID   ,  0, false);\n-  def(_jsr_w               , \"jsr_w\"               , \"boooo\", NULL    , T_INT    ,  0, false);\n-  def(_breakpoint          , \"breakpoint\"          , \"\"     , NULL    , T_VOID   ,  0, true);\n+  def(_nop                 , \"nop\"                 , \"b\"    , nullptr    , T_VOID   ,  0, false);\n+  def(_aconst_null         , \"aconst_null\"         , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n+  def(_iconst_m1           , \"iconst_m1\"           , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_0            , \"iconst_0\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_1            , \"iconst_1\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_2            , \"iconst_2\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_3            , \"iconst_3\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_4            , \"iconst_4\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iconst_5            , \"iconst_5\"            , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_lconst_0            , \"lconst_0\"            , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_lconst_1            , \"lconst_1\"            , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_fconst_0            , \"fconst_0\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_fconst_1            , \"fconst_1\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_fconst_2            , \"fconst_2\"            , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_dconst_0            , \"dconst_0\"            , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_dconst_1            , \"dconst_1\"            , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_bipush              , \"bipush\"              , \"bc\"   , nullptr    , T_INT    ,  1, false);\n+  def(_sipush              , \"sipush\"              , \"bcc\"  , nullptr    , T_INT    ,  1, false);\n+  def(_ldc                 , \"ldc\"                 , \"bk\"   , nullptr    , T_ILLEGAL,  1, true );\n+  def(_ldc_w               , \"ldc_w\"               , \"bkk\"  , nullptr    , T_ILLEGAL,  1, true );\n+  def(_ldc2_w              , \"ldc2_w\"              , \"bkk\"  , nullptr    , T_ILLEGAL,  2, true );\n+  def(_iload               , \"iload\"               , \"bi\"   , \"wbii\"     , T_INT    ,  1, false);\n+  def(_lload               , \"lload\"               , \"bi\"   , \"wbii\"     , T_LONG   ,  2, false);\n+  def(_fload               , \"fload\"               , \"bi\"   , \"wbii\"     , T_FLOAT  ,  1, false);\n+  def(_dload               , \"dload\"               , \"bi\"   , \"wbii\"     , T_DOUBLE ,  2, false);\n+  def(_aload               , \"aload\"               , \"bi\"   , \"wbii\"     , T_OBJECT ,  1, false);\n+  def(_iload_0             , \"iload_0\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iload_1             , \"iload_1\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iload_2             , \"iload_2\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_iload_3             , \"iload_3\"             , \"b\"    , nullptr    , T_INT    ,  1, false);\n+  def(_lload_0             , \"lload_0\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_lload_1             , \"lload_1\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_lload_2             , \"lload_2\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_lload_3             , \"lload_3\"             , \"b\"    , nullptr    , T_LONG   ,  2, false);\n+  def(_fload_0             , \"fload_0\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_fload_1             , \"fload_1\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_fload_2             , \"fload_2\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_fload_3             , \"fload_3\"             , \"b\"    , nullptr    , T_FLOAT  ,  1, false);\n+  def(_dload_0             , \"dload_0\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_dload_1             , \"dload_1\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_dload_2             , \"dload_2\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_dload_3             , \"dload_3\"             , \"b\"    , nullptr    , T_DOUBLE ,  2, false);\n+  def(_aload_0             , \"aload_0\"             , \"b\"    , nullptr    , T_OBJECT ,  1, true ); \/\/ rewriting in interpreter\n+  def(_aload_1             , \"aload_1\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n+  def(_aload_2             , \"aload_2\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n+  def(_aload_3             , \"aload_3\"             , \"b\"    , nullptr    , T_OBJECT ,  1, false);\n+  def(_iaload              , \"iaload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_laload              , \"laload\"              , \"b\"    , nullptr    , T_LONG   ,  0, true );\n+  def(_faload              , \"faload\"              , \"b\"    , nullptr    , T_FLOAT  , -1, true );\n+  def(_daload              , \"daload\"              , \"b\"    , nullptr    , T_DOUBLE ,  0, true );\n+  def(_aaload              , \"aaload\"              , \"b\"    , nullptr    , T_OBJECT , -1, true );\n+  def(_baload              , \"baload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_caload              , \"caload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_saload              , \"saload\"              , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_istore              , \"istore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n+  def(_lstore              , \"lstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -2, false);\n+  def(_fstore              , \"fstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n+  def(_dstore              , \"dstore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -2, false);\n+  def(_astore              , \"astore\"              , \"bi\"   , \"wbii\"     , T_VOID   , -1, false);\n+  def(_istore_0            , \"istore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_istore_1            , \"istore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_istore_2            , \"istore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_istore_3            , \"istore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_lstore_0            , \"lstore_0\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_lstore_1            , \"lstore_1\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_lstore_2            , \"lstore_2\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_lstore_3            , \"lstore_3\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_fstore_0            , \"fstore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_fstore_1            , \"fstore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_fstore_2            , \"fstore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_fstore_3            , \"fstore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_dstore_0            , \"dstore_0\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_dstore_1            , \"dstore_1\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_dstore_2            , \"dstore_2\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_dstore_3            , \"dstore_3\"            , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_astore_0            , \"astore_0\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_astore_1            , \"astore_1\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_astore_2            , \"astore_2\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_astore_3            , \"astore_3\"            , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_iastore             , \"iastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_lastore             , \"lastore\"             , \"b\"    , nullptr    , T_VOID   , -4, true );\n+  def(_fastore             , \"fastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_dastore             , \"dastore\"             , \"b\"    , nullptr    , T_VOID   , -4, true );\n+  def(_aastore             , \"aastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_bastore             , \"bastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_castore             , \"castore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_sastore             , \"sastore\"             , \"b\"    , nullptr    , T_VOID   , -3, true );\n+  def(_pop                 , \"pop\"                 , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_pop2                , \"pop2\"                , \"b\"    , nullptr    , T_VOID   , -2, false);\n+  def(_dup                 , \"dup\"                 , \"b\"    , nullptr    , T_VOID   ,  1, false);\n+  def(_dup_x1              , \"dup_x1\"              , \"b\"    , nullptr    , T_VOID   ,  1, false);\n+  def(_dup_x2              , \"dup_x2\"              , \"b\"    , nullptr    , T_VOID   ,  1, false);\n+  def(_dup2                , \"dup2\"                , \"b\"    , nullptr    , T_VOID   ,  2, false);\n+  def(_dup2_x1             , \"dup2_x1\"             , \"b\"    , nullptr    , T_VOID   ,  2, false);\n+  def(_dup2_x2             , \"dup2_x2\"             , \"b\"    , nullptr    , T_VOID   ,  2, false);\n+  def(_swap                , \"swap\"                , \"b\"    , nullptr    , T_VOID   ,  0, false);\n+  def(_iadd                , \"iadd\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_ladd                , \"ladd\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_fadd                , \"fadd\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_dadd                , \"dadd\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n+  def(_isub                , \"isub\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lsub                , \"lsub\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_fsub                , \"fsub\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_dsub                , \"dsub\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n+  def(_imul                , \"imul\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lmul                , \"lmul\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_fmul                , \"fmul\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_dmul                , \"dmul\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n+  def(_idiv                , \"idiv\"                , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_ldiv                , \"ldiv\"                , \"b\"    , nullptr    , T_LONG   , -2, true );\n+  def(_fdiv                , \"fdiv\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_ddiv                , \"ddiv\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n+  def(_irem                , \"irem\"                , \"b\"    , nullptr    , T_INT    , -1, true );\n+  def(_lrem                , \"lrem\"                , \"b\"    , nullptr    , T_LONG   , -2, true );\n+  def(_frem                , \"frem\"                , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_drem                , \"drem\"                , \"b\"    , nullptr    , T_DOUBLE , -2, false);\n+  def(_ineg                , \"ineg\"                , \"b\"    , nullptr    , T_INT    ,  0, false);\n+  def(_lneg                , \"lneg\"                , \"b\"    , nullptr    , T_LONG   ,  0, false);\n+  def(_fneg                , \"fneg\"                , \"b\"    , nullptr    , T_FLOAT  ,  0, false);\n+  def(_dneg                , \"dneg\"                , \"b\"    , nullptr    , T_DOUBLE ,  0, false);\n+  def(_ishl                , \"ishl\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lshl                , \"lshl\"                , \"b\"    , nullptr    , T_LONG   , -1, false);\n+  def(_ishr                , \"ishr\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lshr                , \"lshr\"                , \"b\"    , nullptr    , T_LONG   , -1, false);\n+  def(_iushr               , \"iushr\"               , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lushr               , \"lushr\"               , \"b\"    , nullptr    , T_LONG   , -1, false);\n+  def(_iand                , \"iand\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_land                , \"land\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_ior                 , \"ior\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lor                 , \"lor\"                 , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_ixor                , \"ixor\"                , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_lxor                , \"lxor\"                , \"b\"    , nullptr    , T_LONG   , -2, false);\n+  def(_iinc                , \"iinc\"                , \"bic\"  , \"wbiicc\",    T_VOID   ,  0, false);\n+  def(_i2l                 , \"i2l\"                 , \"b\"    , nullptr    , T_LONG   ,  1, false);\n+  def(_i2f                 , \"i2f\"                 , \"b\"    , nullptr    , T_FLOAT  ,  0, false);\n+  def(_i2d                 , \"i2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  1, false);\n+  def(_l2i                 , \"l2i\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_l2f                 , \"l2f\"                 , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_l2d                 , \"l2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  0, false);\n+  def(_f2i                 , \"f2i\"                 , \"b\"    , nullptr    , T_INT    ,  0, false);\n+  def(_f2l                 , \"f2l\"                 , \"b\"    , nullptr    , T_LONG   ,  1, false);\n+  def(_f2d                 , \"f2d\"                 , \"b\"    , nullptr    , T_DOUBLE ,  1, false);\n+  def(_d2i                 , \"d2i\"                 , \"b\"    , nullptr    , T_INT    , -1, false);\n+  def(_d2l                 , \"d2l\"                 , \"b\"    , nullptr    , T_LONG   ,  0, false);\n+  def(_d2f                 , \"d2f\"                 , \"b\"    , nullptr    , T_FLOAT  , -1, false);\n+  def(_i2b                 , \"i2b\"                 , \"b\"    , nullptr    , T_BYTE   ,  0, false);\n+  def(_i2c                 , \"i2c\"                 , \"b\"    , nullptr    , T_CHAR   ,  0, false);\n+  def(_i2s                 , \"i2s\"                 , \"b\"    , nullptr    , T_SHORT  ,  0, false);\n+  def(_lcmp                , \"lcmp\"                , \"b\"    , nullptr    , T_VOID   , -3, false);\n+  def(_fcmpl               , \"fcmpl\"               , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_fcmpg               , \"fcmpg\"               , \"b\"    , nullptr    , T_VOID   , -1, false);\n+  def(_dcmpl               , \"dcmpl\"               , \"b\"    , nullptr    , T_VOID   , -3, false);\n+  def(_dcmpg               , \"dcmpg\"               , \"b\"    , nullptr    , T_VOID   , -3, false);\n+  def(_ifeq                , \"ifeq\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_ifne                , \"ifne\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_iflt                , \"iflt\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_ifge                , \"ifge\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_ifgt                , \"ifgt\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_ifle                , \"ifle\"                , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_if_icmpeq           , \"if_icmpeq\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_icmpne           , \"if_icmpne\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_icmplt           , \"if_icmplt\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_icmpge           , \"if_icmpge\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_icmpgt           , \"if_icmpgt\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_icmple           , \"if_icmple\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_acmpeq           , \"if_acmpeq\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_if_acmpne           , \"if_acmpne\"           , \"boo\"  , nullptr    , T_VOID   , -2, false);\n+  def(_goto                , \"goto\"                , \"boo\"  , nullptr    , T_VOID   ,  0, false);\n+  def(_jsr                 , \"jsr\"                 , \"boo\"  , nullptr    , T_INT    ,  0, false);\n+  def(_ret                 , \"ret\"                 , \"bi\"   , \"wbii\"     , T_VOID   ,  0, false);\n+  def(_tableswitch         , \"tableswitch\"         , \"\"     , nullptr    , T_VOID   , -1, false); \/\/ may have backward branches\n+  def(_lookupswitch        , \"lookupswitch\"        , \"\"     , nullptr    , T_VOID   , -1, false); \/\/ rewriting in interpreter\n+  def(_ireturn             , \"ireturn\"             , \"b\"    , nullptr    , T_INT    , -1, true);\n+  def(_lreturn             , \"lreturn\"             , \"b\"    , nullptr    , T_LONG   , -2, true);\n+  def(_freturn             , \"freturn\"             , \"b\"    , nullptr    , T_FLOAT  , -1, true);\n+  def(_dreturn             , \"dreturn\"             , \"b\"    , nullptr    , T_DOUBLE , -2, true);\n+  def(_areturn             , \"areturn\"             , \"b\"    , nullptr    , T_OBJECT , -1, true);\n+  def(_return              , \"return\"              , \"b\"    , nullptr    , T_VOID   ,  0, true);\n+  def(_getstatic           , \"getstatic\"           , \"bJJ\"  , nullptr    , T_ILLEGAL,  1, true );\n+  def(_putstatic           , \"putstatic\"           , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true );\n+  def(_getfield            , \"getfield\"            , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true );\n+  def(_putfield            , \"putfield\"            , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true );\n+  def(_invokevirtual       , \"invokevirtual\"       , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true);\n+  def(_invokespecial       , \"invokespecial\"       , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true);\n+  def(_invokestatic        , \"invokestatic\"        , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true);\n+  def(_invokeinterface     , \"invokeinterface\"     , \"bJJ__\", nullptr    , T_ILLEGAL, -1, true);\n+  def(_invokedynamic       , \"invokedynamic\"       , \"bJJJJ\", nullptr    , T_ILLEGAL,  0, true );\n+  def(_new                 , \"new\"                 , \"bkk\"  , nullptr    , T_OBJECT ,  1, true );\n+  def(_newarray            , \"newarray\"            , \"bc\"   , nullptr    , T_OBJECT ,  0, true );\n+  def(_anewarray           , \"anewarray\"           , \"bkk\"  , nullptr    , T_OBJECT ,  0, true );\n+  def(_arraylength         , \"arraylength\"         , \"b\"    , nullptr    , T_INT    ,  0, true );\n+  def(_athrow              , \"athrow\"              , \"b\"    , nullptr    , T_VOID   , -1, true );\n+  def(_checkcast           , \"checkcast\"           , \"bkk\"  , nullptr    , T_OBJECT ,  0, true );\n+  def(_instanceof          , \"instanceof\"          , \"bkk\"  , nullptr    , T_INT    ,  0, true );\n+  def(_monitorenter        , \"monitorenter\"        , \"b\"    , nullptr    , T_VOID   , -1, true );\n+  def(_monitorexit         , \"monitorexit\"         , \"b\"    , nullptr    , T_VOID   , -1, true );\n+  def(_wide                , \"wide\"                , \"\"     , nullptr    , T_VOID   ,  0, false);\n+  def(_multianewarray      , \"multianewarray\"      , \"bkkc\" , nullptr    , T_OBJECT ,  1, true );\n+  def(_ifnull              , \"ifnull\"              , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_ifnonnull           , \"ifnonnull\"           , \"boo\"  , nullptr    , T_VOID   , -1, false);\n+  def(_goto_w              , \"goto_w\"              , \"boooo\", nullptr    , T_VOID   ,  0, false);\n+  def(_jsr_w               , \"jsr_w\"               , \"boooo\", nullptr    , T_INT    ,  0, false);\n+  def(_breakpoint          , \"breakpoint\"          , \"\"     , nullptr    , T_VOID   ,  0, true);\n@@ -481,27 +481,27 @@\n-  def(_fast_agetfield      , \"fast_agetfield\"      , \"bJJ\"  , NULL    , T_OBJECT ,  0, true , _getfield       );\n-  def(_fast_bgetfield      , \"fast_bgetfield\"      , \"bJJ\"  , NULL    , T_INT    ,  0, true , _getfield       );\n-  def(_fast_cgetfield      , \"fast_cgetfield\"      , \"bJJ\"  , NULL    , T_CHAR   ,  0, true , _getfield       );\n-  def(_fast_dgetfield      , \"fast_dgetfield\"      , \"bJJ\"  , NULL    , T_DOUBLE ,  0, true , _getfield       );\n-  def(_fast_fgetfield      , \"fast_fgetfield\"      , \"bJJ\"  , NULL    , T_FLOAT  ,  0, true , _getfield       );\n-  def(_fast_igetfield      , \"fast_igetfield\"      , \"bJJ\"  , NULL    , T_INT    ,  0, true , _getfield       );\n-  def(_fast_lgetfield      , \"fast_lgetfield\"      , \"bJJ\"  , NULL    , T_LONG   ,  0, true , _getfield       );\n-  def(_fast_sgetfield      , \"fast_sgetfield\"      , \"bJJ\"  , NULL    , T_SHORT  ,  0, true , _getfield       );\n-\n-  def(_fast_aputfield      , \"fast_aputfield\"      , \"bJJ\"  , NULL    , T_OBJECT ,  0, true , _putfield       );\n-  def(_fast_bputfield      , \"fast_bputfield\"      , \"bJJ\"  , NULL    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_zputfield      , \"fast_zputfield\"      , \"bJJ\"  , NULL    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_cputfield      , \"fast_cputfield\"      , \"bJJ\"  , NULL    , T_CHAR   ,  0, true , _putfield       );\n-  def(_fast_dputfield      , \"fast_dputfield\"      , \"bJJ\"  , NULL    , T_DOUBLE ,  0, true , _putfield       );\n-  def(_fast_fputfield      , \"fast_fputfield\"      , \"bJJ\"  , NULL    , T_FLOAT  ,  0, true , _putfield       );\n-  def(_fast_iputfield      , \"fast_iputfield\"      , \"bJJ\"  , NULL    , T_INT    ,  0, true , _putfield       );\n-  def(_fast_lputfield      , \"fast_lputfield\"      , \"bJJ\"  , NULL    , T_LONG   ,  0, true , _putfield       );\n-  def(_fast_sputfield      , \"fast_sputfield\"      , \"bJJ\"  , NULL    , T_SHORT  ,  0, true , _putfield       );\n-\n-  def(_fast_aload_0        , \"fast_aload_0\"        , \"b\"    , NULL    , T_OBJECT ,  1, true , _aload_0        );\n-  def(_fast_iaccess_0      , \"fast_iaccess_0\"      , \"b_JJ\" , NULL    , T_INT    ,  1, true , _aload_0        );\n-  def(_fast_aaccess_0      , \"fast_aaccess_0\"      , \"b_JJ\" , NULL    , T_OBJECT ,  1, true , _aload_0        );\n-  def(_fast_faccess_0      , \"fast_faccess_0\"      , \"b_JJ\" , NULL    , T_OBJECT ,  1, true , _aload_0        );\n-\n-  def(_fast_iload          , \"fast_iload\"          , \"bi\"   , NULL    , T_INT    ,  1, false, _iload);\n-  def(_fast_iload2         , \"fast_iload2\"         , \"bi_i\" , NULL    , T_INT    ,  2, false, _iload);\n-  def(_fast_icaload        , \"fast_icaload\"        , \"bi_\"  , NULL    , T_INT    ,  0, false, _iload);\n+  def(_fast_agetfield      , \"fast_agetfield\"      , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _getfield       );\n+  def(_fast_bgetfield      , \"fast_bgetfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield       );\n+  def(_fast_cgetfield      , \"fast_cgetfield\"      , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _getfield       );\n+  def(_fast_dgetfield      , \"fast_dgetfield\"      , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _getfield       );\n+  def(_fast_fgetfield      , \"fast_fgetfield\"      , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _getfield       );\n+  def(_fast_igetfield      , \"fast_igetfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _getfield       );\n+  def(_fast_lgetfield      , \"fast_lgetfield\"      , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _getfield       );\n+  def(_fast_sgetfield      , \"fast_sgetfield\"      , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _getfield       );\n+\n+  def(_fast_aputfield      , \"fast_aputfield\"      , \"bJJ\"  , nullptr    , T_OBJECT ,  0, true , _putfield       );\n+  def(_fast_bputfield      , \"fast_bputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n+  def(_fast_zputfield      , \"fast_zputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n+  def(_fast_cputfield      , \"fast_cputfield\"      , \"bJJ\"  , nullptr    , T_CHAR   ,  0, true , _putfield       );\n+  def(_fast_dputfield      , \"fast_dputfield\"      , \"bJJ\"  , nullptr    , T_DOUBLE ,  0, true , _putfield       );\n+  def(_fast_fputfield      , \"fast_fputfield\"      , \"bJJ\"  , nullptr    , T_FLOAT  ,  0, true , _putfield       );\n+  def(_fast_iputfield      , \"fast_iputfield\"      , \"bJJ\"  , nullptr    , T_INT    ,  0, true , _putfield       );\n+  def(_fast_lputfield      , \"fast_lputfield\"      , \"bJJ\"  , nullptr    , T_LONG   ,  0, true , _putfield       );\n+  def(_fast_sputfield      , \"fast_sputfield\"      , \"bJJ\"  , nullptr    , T_SHORT  ,  0, true , _putfield       );\n+\n+  def(_fast_aload_0        , \"fast_aload_0\"        , \"b\"    , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n+  def(_fast_iaccess_0      , \"fast_iaccess_0\"      , \"b_JJ\" , nullptr    , T_INT    ,  1, true , _aload_0        );\n+  def(_fast_aaccess_0      , \"fast_aaccess_0\"      , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n+  def(_fast_faccess_0      , \"fast_faccess_0\"      , \"b_JJ\" , nullptr    , T_OBJECT ,  1, true , _aload_0        );\n+\n+  def(_fast_iload          , \"fast_iload\"          , \"bi\"   , nullptr    , T_INT    ,  1, false, _iload);\n+  def(_fast_iload2         , \"fast_iload2\"         , \"bi_i\" , nullptr    , T_INT    ,  2, false, _iload);\n+  def(_fast_icaload        , \"fast_icaload\"        , \"bi_\"  , nullptr    , T_INT    ,  0, false, _iload);\n@@ -510,1 +510,1 @@\n-  def(_fast_invokevfinal   , \"fast_invokevfinal\"   , \"bJJ\"  , NULL    , T_ILLEGAL, -1, true, _invokevirtual   );\n+  def(_fast_invokevfinal   , \"fast_invokevfinal\"   , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true, _invokevirtual   );\n@@ -512,2 +512,2 @@\n-  def(_fast_linearswitch   , \"fast_linearswitch\"   , \"\"     , NULL    , T_VOID   , -1, false, _lookupswitch   );\n-  def(_fast_binaryswitch   , \"fast_binaryswitch\"   , \"\"     , NULL    , T_VOID   , -1, false, _lookupswitch   );\n+  def(_fast_linearswitch   , \"fast_linearswitch\"   , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch   );\n+  def(_fast_binaryswitch   , \"fast_binaryswitch\"   , \"\"     , nullptr    , T_VOID   , -1, false, _lookupswitch   );\n@@ -515,1 +515,1 @@\n-  def(_return_register_finalizer , \"return_register_finalizer\" , \"b\"    , NULL    , T_VOID   ,  0, true, _return);\n+  def(_return_register_finalizer , \"return_register_finalizer\" , \"b\"     , nullptr    , T_VOID   ,  0, true, _return);\n@@ -517,1 +517,1 @@\n-  def(_invokehandle        , \"invokehandle\"        , \"bJJ\"  , NULL    , T_ILLEGAL, -1, true, _invokevirtual   );\n+  def(_invokehandle        , \"invokehandle\"        , \"bJJ\"  , nullptr    , T_ILLEGAL, -1, true, _invokevirtual   );\n@@ -519,2 +519,2 @@\n-  def(_fast_aldc           , \"fast_aldc\"           , \"bj\"   , NULL    , T_OBJECT,   1, true,  _ldc   );\n-  def(_fast_aldc_w         , \"fast_aldc_w\"         , \"bJJ\"  , NULL    , T_OBJECT,   1, true,  _ldc_w );\n+  def(_fast_aldc           , \"fast_aldc\"           , \"bj\"   , nullptr    , T_OBJECT,   1, true,  _ldc   );\n+  def(_fast_aldc_w         , \"fast_aldc_w\"         , \"bJJ\"  , nullptr    , T_OBJECT,   1, true,  _ldc_w );\n@@ -522,2 +522,2 @@\n-  def(_nofast_getfield     , \"nofast_getfield\"     , \"bJJ\"  , NULL    , T_ILLEGAL,  0, true,  _getfield       );\n-  def(_nofast_putfield     , \"nofast_putfield\"     , \"bJJ\"  , NULL    , T_ILLEGAL, -2, true , _putfield       );\n+  def(_nofast_getfield     , \"nofast_getfield\"     , \"bJJ\"  , nullptr    , T_ILLEGAL,  0, true,  _getfield       );\n+  def(_nofast_putfield     , \"nofast_putfield\"     , \"bJJ\"  , nullptr    , T_ILLEGAL, -2, true , _putfield       );\n@@ -525,2 +525,2 @@\n-  def(_nofast_aload_0      , \"nofast_aload_0\"      , \"b\"    , NULL    , T_OBJECT,   1, true , _aload_0        );\n-  def(_nofast_iload        , \"nofast_iload\"        , \"bi\"   , NULL    , T_INT,      1, false, _iload          );\n+  def(_nofast_aload_0      , \"nofast_aload_0\"      , \"b\"    , nullptr    , T_OBJECT,   1, true , _aload_0        );\n+  def(_nofast_iload        , \"nofast_iload\"        , \"bi\"   , nullptr    , T_INT,      1, false, _iload          );\n@@ -528,1 +528,1 @@\n-  def(_shouldnotreachhere  , \"_shouldnotreachhere\" , \"b\"    , NULL    , T_VOID   ,  0, false);\n+  def(_shouldnotreachhere  , \"_shouldnotreachhere\" , \"b\"    , nullptr    , T_VOID   ,  0, false);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":254,"deletions":254,"binary":false,"changes":508,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -368,1 +368,1 @@\n-  \/\/ NULL since in that case the bcp and Method* are unrelated\n+  \/\/ null since in that case the bcp and Method* are unrelated\n@@ -371,1 +371,1 @@\n-    assert(method == NULL || check_method(method, bcp), \"bcp must point into method\");\n+    assert(method == nullptr || check_method(method, bcp), \"bcp must point into method\");\n@@ -373,1 +373,1 @@\n-    assert(code != _breakpoint || method != NULL, \"need Method* to decode breakpoint\");\n+    assert(code != _breakpoint || method != nullptr, \"need Method* to decode breakpoint\");\n@@ -407,2 +407,2 @@\n-  static int         special_length_at(Bytecodes::Code code, address bcp, address end = NULL);\n-  static int         raw_special_length_at(address bcp, address end = NULL);\n+  static int         special_length_at(Bytecodes::Code code, address bcp, address end = nullptr);\n+  static int         raw_special_length_at(address bcp, address end = nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-  if (description() != NULL) st->print(\"%s  \", description());\n+  if (description() != nullptr) st->print(\"%s  \", description());\n@@ -93,1 +93,1 @@\n-  assert(_clet != NULL, \"we checked not enough space already\");\n+  assert(_clet != nullptr, \"we checked not enough space already\");\n@@ -119,1 +119,1 @@\n-  *_masm = NULL;\n+  *_masm = nullptr;\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    \/\/ That is why we must check both ProfileInterpreter and mdo != NULL.\n+    \/\/ That is why we must check both ProfileInterpreter and mdo != nullptr.\n@@ -139,1 +139,1 @@\n-    if (mdo != NULL) {\n+    if (mdo != nullptr) {\n@@ -187,1 +187,1 @@\n-  assert(result != NULL || is_fast_aldc, \"null result only valid for fast_aldc\");\n+  assert(result != nullptr || is_fast_aldc, \"null result only valid for fast_aldc\");\n@@ -198,1 +198,1 @@\n-      oop roop = (result == NULL ? Universe::the_null_sentinel() : result);\n+      oop roop = (result == nullptr ? Universe::the_null_sentinel() : result);\n@@ -318,1 +318,1 @@\n-    if (trap_mdo == NULL) {\n+    if (trap_mdo == nullptr) {\n@@ -331,1 +331,1 @@\n-    if (trap_mdo != NULL) {\n+    if (trap_mdo != nullptr) {\n@@ -507,1 +507,1 @@\n-    assert(h_exception.not_null(), \"NULL exceptions should be handled by athrow\");\n+    assert(h_exception.not_null(), \"null exceptions should be handled by athrow\");\n@@ -550,1 +550,1 @@\n-  if (EnableJVMCI && h_method->method_data() != NULL) {\n+  if (EnableJVMCI && h_method->method_data() != nullptr) {\n@@ -552,2 +552,2 @@\n-    ProfileData* pdata = h_method->method_data()->allocate_bci_to_data(current_bci, NULL);\n-    if (pdata != NULL && pdata->is_BitData()) {\n+    ProfileData* pdata = h_method->method_data()->allocate_bci_to_data(current_bci, nullptr);\n+    if (pdata != nullptr && pdata->is_BitData()) {\n@@ -566,2 +566,2 @@\n-  address continuation = NULL;\n-  address handler_pc = NULL;\n+  address continuation = nullptr;\n+  address handler_pc = nullptr;\n@@ -591,1 +591,1 @@\n-    JvmtiExport::notice_unwind_due_to_exception(current, h_method(), handler_pc, h_exception(), (handler_pc != NULL));\n+    JvmtiExport::notice_unwind_due_to_exception(current, h_method(), handler_pc, h_exception(), (handler_pc != nullptr));\n@@ -618,1 +618,1 @@\n-  assert(missingMethod != NULL, \"sanity\");\n+  assert(missingMethod != nullptr, \"sanity\");\n@@ -644,2 +644,2 @@\n-               recvKlass ? recvKlass->external_name() : \"NULL\",\n-               interfaceKlass ? interfaceKlass->external_name() : \"NULL\");\n+               recvKlass ? recvKlass->external_name() : \"nullptr\",\n+               interfaceKlass ? interfaceKlass->external_name() : \"nullptr\");\n@@ -743,1 +743,1 @@\n-         \"must be NULL or an object\");\n+         \"must be null or an object\");\n@@ -746,1 +746,1 @@\n-         \"must be NULL or an object\");\n+         \"must be null or an object\");\n@@ -767,1 +767,1 @@\n-  elem->set_obj(NULL);\n+  elem->set_obj(nullptr);\n@@ -784,2 +784,2 @@\n-  assert(exception() != NULL, \"vm result should be set\");\n-  current->set_vm_result(NULL); \/\/ clear vm result before continuing (may cause memory leaks and assert failures)\n+  assert(exception() != nullptr, \"vm result should be set\");\n+  current->set_vm_result(nullptr); \/\/ clear vm result before continuing (may cause memory leaks and assert failures)\n@@ -809,1 +809,1 @@\n-  Handle receiver(current, NULL);\n+  Handle receiver(current, nullptr);\n@@ -994,2 +994,2 @@\n-  assert(branch_bcp != NULL || nm == NULL, \"always returns null for non OSR requests\");\n-  if (branch_bcp != NULL && nm != NULL) {\n+  assert(branch_bcp != nullptr || nm == nullptr, \"always returns null for non OSR requests\");\n+  if (branch_bcp != nullptr && nm != nullptr) {\n@@ -1006,1 +1006,1 @@\n-    if (nm != NULL && bs_nm != NULL) {\n+    if (nm != nullptr && bs_nm != nullptr) {\n@@ -1009,1 +1009,1 @@\n-        nm = NULL;\n+        nm = nullptr;\n@@ -1013,1 +1013,1 @@\n-  if (nm != NULL && current->is_interp_only_mode()) {\n+  if (nm != nullptr && current->is_interp_only_mode()) {\n@@ -1019,1 +1019,1 @@\n-    nm = NULL;\n+    nm = nullptr;\n@@ -1023,1 +1023,1 @@\n-    if (nm != NULL) {\n+    if (nm != nullptr) {\n@@ -1041,2 +1041,2 @@\n-  const int branch_bci = branch_bcp != NULL ? method->bci_from(branch_bcp) : InvocationEntryBci;\n-  const int bci = branch_bcp != NULL ? method->bci_from(last_frame.bcp()) : InvocationEntryBci;\n+  const int branch_bci = branch_bcp != nullptr ? method->bci_from(branch_bcp) : InvocationEntryBci;\n+  const int bci = branch_bcp != nullptr ? method->bci_from(last_frame.bcp()) : InvocationEntryBci;\n@@ -1044,1 +1044,1 @@\n-  nmethod* osr_nm = CompilationPolicy::event(method, method, branch_bci, bci, CompLevel_none, NULL, CHECK_NULL);\n+  nmethod* osr_nm = CompilationPolicy::event(method, method, branch_bci, bci, CompLevel_none, nullptr, CHECK_NULL);\n@@ -1047,1 +1047,1 @@\n-  if (osr_nm != NULL && bs_nm != NULL) {\n+  if (osr_nm != nullptr && bs_nm != nullptr) {\n@@ -1049,1 +1049,1 @@\n-      osr_nm = NULL;\n+      osr_nm = nullptr;\n@@ -1059,1 +1059,1 @@\n-  if (mdo == NULL)  return 0;\n+  if (mdo == nullptr)  return 0;\n@@ -1068,1 +1068,1 @@\n-  assert(mdo != NULL, \"must not be null\");\n+  assert(mdo != nullptr, \"must not be null\");\n@@ -1106,1 +1106,1 @@\n-  guarantee(data != NULL, \"profile data must be valid\");\n+  guarantee(data != nullptr, \"profile data must be valid\");\n@@ -1164,1 +1164,1 @@\n-  bool is_static = (obj == NULL);\n+  bool is_static = (obj == nullptr);\n@@ -1203,1 +1203,1 @@\n-  bool is_static = (obj == NULL);\n+  bool is_static = (obj == nullptr);\n@@ -1268,2 +1268,2 @@\n-  if (handler_blob == NULL) {\n-    return NULL;\n+  if (handler_blob == nullptr) {\n+    return nullptr;\n@@ -1278,1 +1278,1 @@\n-  if (_fingerprints != NULL) {\n+  if (_fingerprints != nullptr) {\n@@ -1281,1 +1281,1 @@\n-  if (set_handler_blob() == NULL) {\n+  if (set_handler_blob() == nullptr) {\n@@ -1300,1 +1300,1 @@\n-  if (handler != NULL) {\n+  if (handler != nullptr) {\n@@ -1310,1 +1310,1 @@\n-  if (method->signature_handler() == NULL) {\n+  if (method->signature_handler() == nullptr) {\n@@ -1333,1 +1333,1 @@\n-        if (handler == NULL) {\n+        if (handler == nullptr) {\n@@ -1396,1 +1396,1 @@\n-    if (_handlers != NULL) {\n+    if (_handlers != nullptr) {\n@@ -1440,5 +1440,5 @@\n-BufferBlob*              SignatureHandlerLibrary::_handler_blob = NULL;\n-address                  SignatureHandlerLibrary::_handler      = NULL;\n-GrowableArray<uint64_t>* SignatureHandlerLibrary::_fingerprints = NULL;\n-GrowableArray<address>*  SignatureHandlerLibrary::_handlers     = NULL;\n-address                  SignatureHandlerLibrary::_buffer       = NULL;\n+BufferBlob*              SignatureHandlerLibrary::_handler_blob = nullptr;\n+address                  SignatureHandlerLibrary::_handler      = nullptr;\n+GrowableArray<uint64_t>* SignatureHandlerLibrary::_fingerprints = nullptr;\n+GrowableArray<address>*  SignatureHandlerLibrary::_handlers     = nullptr;\n+address                  SignatureHandlerLibrary::_buffer       = nullptr;\n@@ -1507,1 +1507,1 @@\n-    current->set_vm_result(NULL);\n+    current->set_vm_result(nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":53,"deletions":53,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  if (resolved_klass == NULL) { \/\/ 2nd argument defaults to holder of 1st\n+  if (resolved_klass == nullptr) { \/\/ 2nd argument defaults to holder of 1st\n@@ -187,1 +187,1 @@\n-  assert(_resolved_method() != NULL, \"Should already have a Method*\");\n+  assert(_resolved_method() != nullptr, \"Should already have a Method*\");\n@@ -270,1 +270,1 @@\n-                _current_klass == NULL ? \"(none)\" : _current_klass->name()->as_C_string(),\n+                _current_klass == nullptr ? \"(none)\" : _current_klass->name()->as_C_string(),\n@@ -298,1 +298,1 @@\n-    if (msg == NULL) {\n+    if (msg == nullptr) {\n@@ -348,1 +348,1 @@\n-      result != NULL &&\n+      result != nullptr &&\n@@ -352,1 +352,1 @@\n-    result = NULL;\n+    result = nullptr;\n@@ -357,1 +357,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -361,1 +361,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -363,1 +363,1 @@\n-    if (default_methods != NULL) {\n+    if (default_methods != nullptr) {\n@@ -368,1 +368,1 @@\n-  if (checkpolymorphism && result != NULL) {\n+  if (checkpolymorphism && result != nullptr) {\n@@ -372,1 +372,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -386,1 +386,1 @@\n-  while (result != NULL && result->is_static() && result->method_holder()->super() != NULL) {\n+  while (result != nullptr && result->is_static() && result->method_holder()->super() != nullptr) {\n@@ -396,1 +396,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -398,1 +398,1 @@\n-    if (default_methods != NULL) {\n+    if (default_methods != nullptr) {\n@@ -400,1 +400,1 @@\n-      assert(result == NULL || !result->is_static(), \"static defaults not allowed\");\n+      assert(result == nullptr || !result->is_static(), \"static defaults not allowed\");\n@@ -449,1 +449,1 @@\n-      if (result != NULL) {\n+      if (result != nullptr) {\n@@ -462,1 +462,1 @@\n-               && appendix_result_or_null != NULL) {\n+               && appendix_result_or_null != nullptr) {\n@@ -468,1 +468,1 @@\n-        if (natives == NULL || InstanceKlass::cast(natives)->is_not_initialized()) {\n+        if (natives == nullptr || InstanceKlass::cast(natives)->is_not_initialized()) {\n@@ -491,1 +491,1 @@\n-      if (result != NULL) {\n+      if (result != nullptr) {\n@@ -511,1 +511,1 @@\n-        assert(appendix_result_or_null != NULL, \"\");\n+        assert(appendix_result_or_null != nullptr, \"\");\n@@ -517,1 +517,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -527,1 +527,1 @@\n-  if (nest_host_error_1 != NULL || nest_host_error_2 != NULL) {\n+  if (nest_host_error_1 != nullptr || nest_host_error_2 != nullptr) {\n@@ -529,3 +529,3 @@\n-              (nest_host_error_1 != NULL) ? nest_host_error_1 : \"\",\n-              (nest_host_error_1 != NULL && nest_host_error_2 != NULL) ? \", \" : \"\",\n-              (nest_host_error_2 != NULL) ? nest_host_error_2 : \"\");\n+              (nest_host_error_1 != nullptr) ? nest_host_error_1 : \"\",\n+              (nest_host_error_1 != nullptr && nest_host_error_2 != nullptr) ? \", \" : \"\",\n+              (nest_host_error_2 != nullptr) ? nest_host_error_2 : \"\");\n@@ -560,1 +560,1 @@\n-\/\/  assert(extra_arg_result_or_null != NULL, \"must be able to return extra argument\");\n+\/\/  assert(extra_arg_result_or_null != nullptr, \"must be able to return extra argument\");\n@@ -634,1 +634,1 @@\n-    if (result != NULL) {\n+    if (result != nullptr) {\n@@ -660,1 +660,1 @@\n-                                              \/*klass_being_linked*\/ NULL, \/\/ We are not linking class\n+                                              \/*klass_being_linked*\/ nullptr, \/\/ We are not linking class\n@@ -663,1 +663,1 @@\n-  if (failed_type_symbol != NULL) {\n+  if (failed_type_symbol != nullptr) {\n@@ -666,1 +666,1 @@\n-    assert(current_loader_data != NULL, \"current class has no class loader data\");\n+    assert(current_loader_data != nullptr, \"current class has no class loader data\");\n@@ -669,1 +669,1 @@\n-    assert(target_loader_data != NULL, \"resolved method's class has no class loader data\");\n+    assert(target_loader_data != nullptr, \"resolved method's class has no class loader data\");\n@@ -697,1 +697,1 @@\n-                                              \/*klass_being_linked*\/ NULL, \/\/ We are not linking class\n+                                              \/*klass_being_linked*\/ nullptr, \/\/ We are not linking class\n@@ -700,1 +700,1 @@\n-  if (failed_type_symbol != NULL) {\n+  if (failed_type_symbol != nullptr) {\n@@ -756,1 +756,1 @@\n-      Method* method = lookup_polymorphic_method(link_info, (Handle*)NULL, THREAD);\n+      Method* method = lookup_polymorphic_method(link_info, (Handle*)nullptr, THREAD);\n@@ -773,1 +773,1 @@\n-                     ss.as_string(), nested_exception, NULL);\n+                     ss.as_string(), nested_exception, nullptr);\n@@ -779,1 +779,1 @@\n-    assert(current_klass != NULL , \"current_klass should not be null\");\n+    assert(current_klass != nullptr , \"current_klass should not be null\");\n@@ -816,1 +816,1 @@\n-            (klass == NULL ? \"<NULL>\" : klass->internal_name()),\n+            (klass == nullptr ? \"<nullptr>\" : klass->internal_name()),\n@@ -876,1 +876,1 @@\n-    assert(current_klass != NULL , \"current_klass should not be null\");\n+    assert(current_klass != nullptr , \"current_klass should not be null\");\n@@ -976,1 +976,1 @@\n-  if (sel_klass == NULL) {\n+  if (sel_klass == nullptr) {\n@@ -1017,1 +1017,1 @@\n-        assert(m != NULL, \"information about the current method must be available for 'put' bytecodes\");\n+        assert(m != nullptr, \"information about the current method must be available for 'put' bytecodes\");\n@@ -1048,1 +1048,1 @@\n-  if (link_info.check_loader_constraints() && (sel_klass != current_klass) && (current_klass != NULL)) {\n+  if (link_info.check_loader_constraints() && (sel_klass != current_klass) && (current_klass != nullptr)) {\n@@ -1088,1 +1088,1 @@\n-      && resolved_method->from_interpreted_entry() == NULL) { \/\/ does a load_acquire\n+      && resolved_method->from_interpreted_entry() == nullptr) { \/\/ does a load_acquire\n@@ -1142,1 +1142,1 @@\n-  Method* resolved_method = NULL;\n+  Method* resolved_method = nullptr;\n@@ -1164,1 +1164,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1170,1 +1170,1 @@\n-  if (current_klass != NULL && resolved_klass->is_interface()) {\n+  if (current_klass != nullptr && resolved_klass->is_interface()) {\n@@ -1335,1 +1335,1 @@\n-             (current_klass == NULL ? \"<null>\" : current_klass->internal_name()));\n+             (current_klass == nullptr ? \"<null>\" : current_klass->internal_name()));\n@@ -1545,1 +1545,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1557,1 +1557,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1571,1 +1571,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1584,1 +1584,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1608,1 +1608,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1619,1 +1619,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1688,1 +1688,1 @@\n-  Klass* recvrKlass = recv.is_null() ? (Klass*)NULL : recv->klass();\n+  Klass* recvrKlass = recv.is_null() ? (Klass*)nullptr : recv->klass();\n@@ -1695,1 +1695,1 @@\n-  Klass* recvrKlass = recv.is_null() ? (Klass*)NULL : recv->klass();\n+  Klass* recvrKlass = recv.is_null() ? (Klass*)nullptr : recv->klass();\n@@ -1749,1 +1749,1 @@\n-      assert(current_klass != NULL , \"current_klass should not be null\");\n+      assert(current_klass != nullptr , \"current_klass should not be null\");\n@@ -1855,1 +1855,1 @@\n-  if (recv_klass != NULL) {\n+  if (recv_klass != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-    throw_abstract_method_error(resolved_method, methodHandle(), NULL, CHECK);\n+    throw_abstract_method_error(resolved_method, methodHandle(), nullptr, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    _next = NULL;\n+    _next = nullptr;\n@@ -193,2 +193,2 @@\n-  bool result = _method == NULL;\n-  assert(_method != NULL || (_bci == 0 &&\n+  bool result = _method == nullptr;\n+  assert(_method != nullptr || (_bci == 0 &&\n@@ -201,1 +201,1 @@\n-  _method    = NULL;\n+  _method    = nullptr;\n@@ -446,1 +446,1 @@\n-OopMapCacheEntry* volatile OopMapCache::_old_entries = NULL;\n+OopMapCacheEntry* volatile OopMapCache::_old_entries = nullptr;\n@@ -450,1 +450,1 @@\n-  for(int i = 0; i < _size; i++) _array[i] = NULL;\n+  for(int i = 0; i < _size; i++) _array[i] = nullptr;\n@@ -455,1 +455,1 @@\n-  assert(_array != NULL, \"sanity check\");\n+  assert(_array != nullptr, \"sanity check\");\n@@ -473,2 +473,2 @@\n-    if (entry != NULL) {\n-      _array[i] = NULL;  \/\/ no barrier, only called in OopMapCache destructor\n+    if (entry != nullptr) {\n+      _array[i] = nullptr;  \/\/ no barrier, only called in OopMapCache destructor\n@@ -485,1 +485,1 @@\n-    if (entry != NULL && !entry->is_empty() && entry->method()->is_old()) {\n+    if (entry != nullptr && !entry->is_empty() && entry->method()->is_old()) {\n@@ -494,1 +494,1 @@\n-      _array[i] = NULL;\n+      _array[i] = nullptr;\n@@ -509,1 +509,1 @@\n-  OopMapCacheEntry* entry = NULL;\n+  OopMapCacheEntry* entry = nullptr;\n@@ -522,1 +522,1 @@\n-    if (entry != NULL && !entry->is_empty() && entry->match(method, bci)) {\n+    if (entry != nullptr && !entry->is_empty() && entry->match(method, bci)) {\n@@ -550,2 +550,2 @@\n-    if (entry == NULL) {\n-      if (put_at(probe + i, tmp, NULL)) {\n+    if (entry == nullptr) {\n+      if (put_at(probe + i, tmp, nullptr)) {\n@@ -593,2 +593,2 @@\n-  _old_entries = NULL;\n-  while (entry != NULL) {\n+  _old_entries = nullptr;\n+  while (entry != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-    _pool->set_cache(NULL);  \/\/ so the verifier isn't confused\n+    _pool->set_cache(nullptr);  \/\/ so the verifier isn't confused\n@@ -460,1 +460,1 @@\n-            if (klass->find_field(field_name, field_sig, &fd) != NULL) {\n+            if (klass->find_field(field_name, field_sig, &fd) != nullptr) {\n@@ -533,1 +533,1 @@\n-  assert(_pool->cache() == NULL, \"constant pool cache must not be set yet\");\n+  assert(_pool->cache() == nullptr, \"constant pool cache must not be set yet\");\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  assert(_code == NULL, \"must only initialize once\");\n+  assert(_code == nullptr, \"must only initialize once\");\n@@ -54,1 +54,1 @@\n-  _code = new StubQueue(new InterpreterCodeletInterface, code_size + max_aligned_bytes, NULL,\n+  _code = new StubQueue(new InterpreterCodeletInterface, code_size + max_aligned_bytes, nullptr,\n@@ -85,10 +85,10 @@\n-  _entry[btos] = NULL;\n-  _entry[ztos] = NULL;\n-  _entry[ctos] = NULL;\n-  _entry[stos] = NULL;\n-  _entry[atos] = NULL;\n-  _entry[itos] = NULL;\n-  _entry[ltos] = NULL;\n-  _entry[ftos] = NULL;\n-  _entry[dtos] = NULL;\n-  _entry[vtos] = NULL;\n+  _entry[btos] = nullptr;\n+  _entry[ztos] = nullptr;\n+  _entry[ctos] = nullptr;\n+  _entry[stos] = nullptr;\n+  _entry[atos] = nullptr;\n+  _entry[itos] = nullptr;\n+  _entry[ltos] = nullptr;\n+  _entry[ftos] = nullptr;\n+  _entry[dtos] = nullptr;\n+  _entry[vtos] = nullptr;\n@@ -203,2 +203,2 @@\n-address    TemplateInterpreter::_remove_activation_entry                    = NULL;\n-address    TemplateInterpreter::_remove_activation_preserving_args_entry    = NULL;\n+address    TemplateInterpreter::_remove_activation_entry                    = nullptr;\n+address    TemplateInterpreter::_remove_activation_preserving_args_entry    = nullptr;\n@@ -207,7 +207,7 @@\n-address    TemplateInterpreter::_throw_ArrayIndexOutOfBoundsException_entry = NULL;\n-address    TemplateInterpreter::_throw_ArrayStoreException_entry            = NULL;\n-address    TemplateInterpreter::_throw_ArithmeticException_entry            = NULL;\n-address    TemplateInterpreter::_throw_ClassCastException_entry             = NULL;\n-address    TemplateInterpreter::_throw_NullPointerException_entry           = NULL;\n-address    TemplateInterpreter::_throw_StackOverflowError_entry             = NULL;\n-address    TemplateInterpreter::_throw_exception_entry                      = NULL;\n+address    TemplateInterpreter::_throw_ArrayIndexOutOfBoundsException_entry = nullptr;\n+address    TemplateInterpreter::_throw_ArrayStoreException_entry            = nullptr;\n+address    TemplateInterpreter::_throw_ArithmeticException_entry            = nullptr;\n+address    TemplateInterpreter::_throw_ClassCastException_entry             = nullptr;\n+address    TemplateInterpreter::_throw_NullPointerException_entry           = nullptr;\n+address    TemplateInterpreter::_throw_StackOverflowError_entry             = nullptr;\n+address    TemplateInterpreter::_throw_exception_entry                      = nullptr;\n@@ -253,1 +253,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -276,1 +276,1 @@\n-    vmassert(entry != NULL, \"unsupported return entry requested, length=%d state=%d\", length, index);\n+    vmassert(entry != nullptr, \"unsupported return entry requested, length=%d state=%d\", length, index);\n@@ -285,1 +285,1 @@\n-  vmassert(entry != NULL, \"unsupported deopt entry requested, length=%d state=%d\", length, TosState_as_index(state));\n+  vmassert(entry != nullptr, \"unsupported deopt entry requested, length=%d state=%d\", length, TosState_as_index(state));\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-  static bool       contains(address pc)                        { return _code != NULL && _code->contains(pc); }\n+  static bool       contains(address pc)                        { return _code != nullptr && _code->contains(pc); }\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n-  _unimplemented_bytecode    = NULL;\n-  _illegal_bytecode_sequence = NULL;\n+  _unimplemented_bytecode    = nullptr;\n+  _illegal_bytecode_sequence = nullptr;\n@@ -174,1 +174,1 @@\n-    Interpreter::_throw_NullPointerException_entry           = generate_exception_handler(\"java\/lang\/NullPointerException\", NULL);\n+    Interpreter::_throw_NullPointerException_entry           = generate_exception_handler(\"java\/lang\/NullPointerException\", nullptr);\n@@ -250,1 +250,1 @@\n-    vmassert(return_continuation != NULL, \"return entry not generated yet\");\n+    vmassert(return_continuation != nullptr, \"return entry not generated yet\");\n@@ -298,2 +298,2 @@\n-  assert(_unimplemented_bytecode    != NULL, \"should have been generated before\");\n-  assert(_illegal_bytecode_sequence != NULL, \"should have been generated before\");\n+  assert(_unimplemented_bytecode    != nullptr, \"should have been generated before\");\n+  assert(_illegal_bytecode_sequence != nullptr, \"should have been generated before\");\n@@ -401,1 +401,1 @@\n-  address entry_point = NULL;\n+  address entry_point = nullptr;\n@@ -472,1 +472,1 @@\n-    if (entry_point == NULL) {\n+    if (entry_point == nullptr) {\n@@ -477,1 +477,1 @@\n-    if (entry_point == NULL) {\n+    if (entry_point == nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    return generate_exception_handler_common(name, NULL, true);\n+    return generate_exception_handler_common(name, nullptr, true);\n@@ -57,1 +57,1 @@\n-  address generate_deopt_entry_for(TosState state, int step, address continuation = NULL);\n+  address generate_deopt_entry_for(TosState state, int step, address continuation = nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-  bool      is_valid() const                     { return _gen != NULL; }\n+  bool      is_valid() const                     { return _gen != nullptr; }\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -343,2 +343,2 @@\n-        if ((obj_) == NULL) {                                                                    \\\n-          VM_JAVA_ERROR(vmSymbols::java_lang_NullPointerException(), NULL);                      \\\n+        if ((obj_) == nullptr) {                                                                    \\\n+          VM_JAVA_ERROR(vmSymbols::java_lang_NullPointerException(), nullptr);                      \\\n@@ -403,1 +403,1 @@\n-        target = NULL;                                              \\\n+        target = nullptr;                                              \\\n@@ -423,1 +423,1 @@\n-        target = NULL;                                              \\\n+        target = nullptr;                                              \\\n@@ -509,1 +509,1 @@\n-  } while (l != NULL);\n+  } while (l != nullptr);\n@@ -632,1 +632,1 @@\n-            mon->lock()->set_displaced_header(markWord::from_pointer(NULL));\n+            mon->lock()->set_displaced_header(markWord::from_pointer(nullptr));\n@@ -720,1 +720,1 @@\n-      assert(entry->obj() == NULL, \"Frame manager didn't allocate the monitor\");\n+      assert(entry->obj() == nullptr, \"Frame manager didn't allocate the monitor\");\n@@ -731,1 +731,1 @@\n-          entry->lock()->set_displaced_header(markWord::from_pointer(NULL));\n+          entry->lock()->set_displaced_header(markWord::from_pointer(nullptr));\n@@ -787,1 +787,1 @@\n-          SET_STACK_OBJECT(NULL, 0);\n+          SET_STACK_OBJECT(nullptr, 0);\n@@ -1368,1 +1368,1 @@\n-#define NULL_COMPARISON_NOT_OP(name)                                         \\\n+#define nullptr_COMPARISON_NOT_OP(name)                                         \\\n@@ -1370,1 +1370,1 @@\n-          int skip = (!(STACK_OBJECT(-1) == NULL))                           \\\n+          int skip = (!(STACK_OBJECT(-1) == nullptr))                           \\\n@@ -1378,1 +1378,1 @@\n-#define NULL_COMPARISON_OP(name)                                             \\\n+#define nullptr_COMPARISON_OP(name)                                             \\\n@@ -1380,1 +1380,1 @@\n-          int skip = ((STACK_OBJECT(-1) == NULL))                            \\\n+          int skip = ((STACK_OBJECT(-1) == nullptr))                            \\\n@@ -1393,2 +1393,2 @@\n-      NULL_COMPARISON_OP(null);\n-      NULL_COMPARISON_NOT_OP(nonnull);\n+      nullptr_COMPARISON_OP(null);\n+      nullptr_COMPARISON_NOT_OP(nonnull);\n@@ -1588,1 +1588,1 @@\n-          if (rhsObject != NULL) {\n+          if (rhsObject != nullptr) {\n@@ -1644,1 +1644,1 @@\n-        BasicObjectLock* entry = NULL;\n+        BasicObjectLock* entry = nullptr;\n@@ -1646,1 +1646,1 @@\n-          if (most_recent->obj() == NULL) entry = most_recent;\n+          if (most_recent->obj() == nullptr) entry = most_recent;\n@@ -1650,1 +1650,1 @@\n-        if (entry != NULL) {\n+        if (entry != nullptr) {\n@@ -1661,1 +1661,1 @@\n-              entry->lock()->set_displaced_header(markWord::from_pointer(NULL));\n+              entry->lock()->set_displaced_header(markWord::from_pointer(nullptr));\n@@ -1688,1 +1688,1 @@\n-            most_recent->set_obj(NULL);\n+            most_recent->set_obj(nullptr);\n@@ -1693,1 +1693,1 @@\n-            if (header.to_pointer() != NULL || call_vm) {\n+            if (header.to_pointer() != nullptr || call_vm) {\n@@ -1991,1 +1991,1 @@\n-            if (result != NULL) {\n+            if (result != nullptr) {\n@@ -2023,1 +2023,1 @@\n-        THREAD->set_vm_result(NULL);\n+        THREAD->set_vm_result(nullptr);\n@@ -2035,1 +2035,1 @@\n-        THREAD->set_vm_result(NULL);\n+        THREAD->set_vm_result(nullptr);\n@@ -2052,1 +2052,1 @@\n-        THREAD->set_vm_result(NULL);\n+        THREAD->set_vm_result(nullptr);\n@@ -2056,1 +2056,1 @@\n-          if (STACK_OBJECT(-1) != NULL) {\n+          if (STACK_OBJECT(-1) != nullptr) {\n@@ -2080,1 +2080,1 @@\n-          if (STACK_OBJECT(-1) == NULL) {\n+          if (STACK_OBJECT(-1) == nullptr) {\n@@ -2131,1 +2131,1 @@\n-              if (result == NULL) {\n+              if (result == nullptr) {\n@@ -2134,1 +2134,1 @@\n-                THREAD->set_vm_result(NULL);\n+                THREAD->set_vm_result(nullptr);\n@@ -2151,1 +2151,1 @@\n-            THREAD->set_vm_result(NULL);\n+            THREAD->set_vm_result(nullptr);\n@@ -2236,1 +2236,1 @@\n-        if (result == NULL) {\n+        if (result == nullptr) {\n@@ -2242,1 +2242,1 @@\n-          result = NULL;\n+          result = nullptr;\n@@ -2325,1 +2325,1 @@\n-        Method* callee = NULL;\n+        Method* callee = nullptr;\n@@ -2361,1 +2361,1 @@\n-        if (callee != NULL) {\n+        if (callee != nullptr) {\n@@ -2386,1 +2386,1 @@\n-               scan->interface_klass() != NULL;\n+               scan->interface_klass() != nullptr;\n@@ -2396,1 +2396,1 @@\n-          if (scan->interface_klass() == NULL) {\n+          if (scan->interface_klass() == nullptr) {\n@@ -2417,1 +2417,1 @@\n-        if (callee == NULL) {\n+        if (callee == nullptr) {\n@@ -2515,1 +2515,1 @@\n-        THREAD->set_vm_result(NULL);\n+        THREAD->set_vm_result(nullptr);\n@@ -2526,1 +2526,1 @@\n-          THREAD->set_pending_exception(except_oop, NULL, 0);\n+          THREAD->set_pending_exception(except_oop, nullptr, 0);\n@@ -2948,1 +2948,1 @@\n-    assert(except_oop() != NULL, \"No exception to process\");\n+    assert(except_oop() != nullptr, \"No exception to process\");\n@@ -2956,1 +2956,1 @@\n-    THREAD->set_vm_result(NULL);\n+    THREAD->set_vm_result(nullptr);\n@@ -2990,1 +2990,1 @@\n-    THREAD->set_pending_exception(except_oop(), NULL, 0);\n+    THREAD->set_pending_exception(except_oop(), nullptr, 0);\n@@ -3057,1 +3057,1 @@\n-    ts->set_earlyret_oop(NULL);\n+    ts->set_earlyret_oop(nullptr);\n@@ -3076,1 +3076,1 @@\n-    Handle illegal_state_oop(THREAD, NULL);\n+    Handle illegal_state_oop(THREAD, nullptr);\n@@ -3083,1 +3083,1 @@\n-    \/\/ a NULL oop in it and then overwrite the oop later as needed. This isn't\n+    \/\/ a null oop in it and then overwrite the oop later as needed. This isn't\n@@ -3133,1 +3133,1 @@\n-        if (lockee != NULL) {\n+        if (lockee != nullptr) {\n@@ -3136,1 +3136,1 @@\n-          end->set_obj(NULL);\n+          end->set_obj(nullptr);\n@@ -3140,1 +3140,1 @@\n-          if (header.to_pointer() != NULL) {\n+          if (header.to_pointer() != nullptr) {\n@@ -3154,1 +3154,1 @@\n-          if (illegal_state_oop() == NULL && !suppress_error) {\n+          if (illegal_state_oop() == nullptr && !suppress_error) {\n@@ -3169,1 +3169,1 @@\n-        if (base->obj() == NULL) {\n+        if (base->obj() == nullptr) {\n@@ -3171,1 +3171,1 @@\n-          if (illegal_state_oop() == NULL && !suppress_error) {\n+          if (illegal_state_oop() == nullptr && !suppress_error) {\n@@ -3192,1 +3192,1 @@\n-          if (rcvr == NULL) {\n+          if (rcvr == nullptr) {\n@@ -3207,1 +3207,1 @@\n-            base->set_obj(NULL);\n+            base->set_obj(nullptr);\n@@ -3211,1 +3211,1 @@\n-            if (header.to_pointer() != NULL) {\n+            if (header.to_pointer() != nullptr) {\n@@ -3252,1 +3252,1 @@\n-    suppress_exit_event = suppress_exit_event || illegal_state_oop() != NULL;\n+    suppress_exit_event = suppress_exit_event || illegal_state_oop() != nullptr;\n@@ -3268,2 +3268,2 @@\n-    assert(!suppress_error || (suppress_error && illegal_state_oop() == NULL), \"Error was not suppressed\");\n-    if (illegal_state_oop() != NULL || original_exception() != NULL) {\n+    assert(!suppress_error || (suppress_error && illegal_state_oop() == nullptr), \"Error was not suppressed\");\n+    if (illegal_state_oop() != nullptr || original_exception() != nullptr) {\n@@ -3272,2 +3272,2 @@\n-      if (illegal_state_oop() != NULL)\n-        THREAD->set_pending_exception(illegal_state_oop(), NULL, 0);\n+      if (illegal_state_oop() != nullptr)\n+        THREAD->set_pending_exception(illegal_state_oop(), nullptr, 0);\n@@ -3275,1 +3275,1 @@\n-        THREAD->set_pending_exception(original_exception(), NULL, 0);\n+        THREAD->set_pending_exception(original_exception(), nullptr, 0);\n@@ -3282,1 +3282,1 @@\n-      if (istate->prev() == NULL) {\n+      if (istate->prev() == nullptr) {\n@@ -3319,1 +3319,1 @@\n-  _prev_link = NULL;\n+  _prev_link = nullptr;\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        assert(oopDesc::is_oop_or_null(oop(o_)), \"Expected an oop or NULL at \" PTR_FORMAT, p2i(oop(o_))); \\\n+        assert(oopDesc::is_oop_or_null(oop(o_)), \"Expected an oop or null at \" PTR_FORMAT, p2i(oop(o_))); \\\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,3 +71,3 @@\n-  static address throw_NullPointerException_entry() { return NULL; }\n-  static address throw_ArithmeticException_entry()  { return NULL; }\n-  static address throw_StackOverflowError_entry()   { return NULL; }\n+  static address throw_NullPointerException_entry() { return nullptr; }\n+  static address throw_ArithmeticException_entry()  { return nullptr; }\n+  static address throw_StackOverflowError_entry()   { return nullptr; }\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreter.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-  address entry_point = NULL;\n+  address entry_point = nullptr;\n@@ -121,1 +121,1 @@\n-    if (entry_point == NULL) {\n+    if (entry_point == nullptr) {\n@@ -126,1 +126,1 @@\n-    if (entry_point == NULL) {\n+    if (entry_point == nullptr) {\n@@ -142,1 +142,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -145,1 +145,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -154,1 +154,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -161,1 +161,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -168,1 +168,1 @@\n-    return NULL;\n+    return nullptr;\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}