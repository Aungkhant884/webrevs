{"files":[{"patch":"@@ -231,0 +231,18 @@\n+    } else if (y->type()->as_IntConstant() && y->type()->as_IntConstant()->value() != 0) {\n+      \/\/ The binary % operator is said to yield the remainder of its operands from an implied division; the\n+      \/\/ left-hand operand is the dividend and the right-hand operand is the divisor.\n+      \/\/\n+      \/\/ % operator follows from this rule that the result of the remainder operation can be negative only\n+      \/\/ if the dividend is negative, and can be positive only if the dividend is positive. Moreover, the\n+      \/\/ magnitude of the result is always less than the magnitude of the divisor(See JLS 15.17.3).\n+      \/\/\n+      \/\/ So if y is a constant integer and not equal to 0, then we can deduce the bound of remainder operation:\n+      \/\/ x % -y  ==> [0, y - 1] Apply RCE\n+      \/\/ x % y   ==> [0, y - 1] Apply RCE\n+      \/\/ -x % y  ==> [-y + 1, 0]\n+      \/\/ -x % -y ==> [-y + 1, 0]\n+      if (x_bound->has_lower() && x_bound->lower() >= 0) {\n+        _bound = new Bound(0, NULL, y->type()->as_IntConstant()->value() - 1, NULL);\n+      } else {\n+        _bound = new Bound();\n+      }\n@@ -808,0 +826,9 @@\n+    TRACE_RANGE_CHECK_ELIMINATION(\n+      tty->fill_to(block->dominator_depth()*2);\n+      tty->print(\"Index bound: \");\n+      index_bound->print();\n+      tty->print(\", Array bound: \");\n+      array_bound->print();\n+      tty->cr();\n+    );\n+\n@@ -1253,1 +1280,0 @@\n-  init();\n@@ -1262,1 +1288,0 @@\n-  init();\n@@ -1276,1 +1301,0 @@\n-  init();\n@@ -1330,4 +1354,0 @@\n-\/\/ Init\n-void RangeCheckEliminator::Bound::init() {\n-}\n-\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -107,3 +107,0 @@\n-\n-  private:\n-    void init();\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267239\n+ * @author Yi Yang\n+ * @summary apply RCE for % operations\n+ * @requires vm.compiler1.enabled\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,*ArithmeticRemRCE.test*\n+ *                   compiler.c1.ArithmeticRemRCE\n+ *\/\n+\n+package compiler.c1;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class ArithmeticRemRCE {\n+    static int field = 1000;\n+\n+    static void test1() {\n+        \/\/ seq should be loop invariant, so we can not put it into static fields\n+        int[] seq = new int[1000];\n+        for (int i = 0; i < seq.length; i++) {\n+            seq[i] = i;\n+        }\n+\n+        for (int i = 0; i < 1024; i++) {\n+            int constVal = 10;\n+            Asserts.assertTrue(0 <= seq[i % 5] && seq[i % 5] <= 4);\n+            Asserts.assertTrue(0 <= seq[i % -5] && seq[i % -5] <= 4);\n+\n+            Asserts.assertTrue(0 <= seq[i % constVal] && seq[i % constVal] <= 9);\n+            Asserts.assertTrue(0 <= seq[i % -constVal] && seq[i % -constVal] <= 9);\n+\n+            Asserts.assertTrue(seq[i % 1] == 0);\n+\n+            \/\/ will not apply RCE\n+            Asserts.assertTrue(0 <= seq[i % field] && seq[i % field] <= 999);\n+            Asserts.assertTrue(0 <= seq[i % -field] && seq[i % -field] <= 999);\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        for (int i = 0; i < 10_000; i++) {\n+            test1();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/ArithmeticRemRCE.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}