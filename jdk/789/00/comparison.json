{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,2 +115,2 @@\n-            log(\"cleaning...\");\n-            \/\/ Attach to server debuggee and resume it so it can exit\n+            log(\"final attach...\");\n+            \/\/ Attach to server debuggee to ensure it's still available to attach and resume it so it can exit\n@@ -118,5 +118,28 @@\n-            Map<String, Argument> conn_args = conn.defaultArguments();\n-            Connector.IntegerArgument port_arg =\n-                    (Connector.IntegerArgument)conn_args.get(\"port\");\n-            port_arg.setValue(port);\n-            VirtualMachine vm = conn.attach(conn_args);\n+            retryDelay = 20;\n+            for (int retry = 0; retry < 5; retry++) {\n+                if (error != null) {\n+                    try {\n+                        Thread.sleep(retryDelay);\n+                    } catch (InterruptedException ex) {\n+                        \/\/ ignore\n+                    }\n+                    retryDelay *= 2;\n+                    error = null;\n+                }\n+                try {\n+                    log(\"retry: \" + retry);\n+                    Map<String, Argument> conn_args = conn.defaultArguments();\n+                    Connector.IntegerArgument port_arg =\n+                            (Connector.IntegerArgument)conn_args.get(\"port\");\n+                    port_arg.setValue(port);\n+                    VirtualMachine vm = conn.attach(conn_args);\n+\n+                    \/\/ The first event is always a VMStartEvent, and it is always in\n+                    \/\/ an EventSet by itself.  Wait for it.\n+                    EventSet evtSet = vm.eventQueue().remove();\n+                    for (Event event : evtSet) {\n+                        if (event instanceof VMStartEvent) {\n+                            break;\n+                        }\n+                        throw new RuntimeException(\"Test failed - debuggee did not start properly\");\n+                    }\n@@ -124,5 +147,2 @@\n-            \/\/ The first event is always a VMStartEvent, and it is always in\n-            \/\/ an EventSet by itself.  Wait for it.\n-            EventSet evtSet = vm.eventQueue().remove();\n-            for (Event event : evtSet) {\n-                if (event instanceof VMStartEvent) {\n+                    vm.eventRequestManager().deleteAllBreakpoints();\n+                    vm.resume();\n@@ -130,0 +150,3 @@\n+                } catch (ConnectException ex) {\n+                    log(\"got exception: \" + ex.toString());\n+                    error = ex;\n@@ -131,1 +154,3 @@\n-                throw new RuntimeException(\"Test failed - debuggee did not start properly\");\n+            }\n+            if (error != null) {\n+                throw error;\n@@ -134,3 +159,1 @@\n-            vm.eventRequestManager().deleteAllBreakpoints();\n-            vm.resume();\n-\n+            \/\/ get the debuggee some time to exit before forcibly terminate it\n","filename":"test\/jdk\/com\/sun\/jdi\/BadHandshakeTest.java","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"}]}