{"files":[{"patch":"@@ -44,1 +44,0 @@\n-compiler\/codecache\/jmx\/PoolsIndependenceTest.java 8167015 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,2 @@\n+import jtreg.SkippedException;\n+\n@@ -65,0 +67,3 @@\n+    private volatile long maxUsageRegistered;\n+    private final long TEST_TIMEOUT_LIMIT = System.currentTimeMillis() +\n+        Utils.adjustTimeout(Utils.DEFAULT_TEST_TIMEOUT) - 5_000; \/\/ 5 seconds allowance is arbitrary\n@@ -73,0 +78,1 @@\n+        maxUsageRegistered = 0;\n@@ -84,0 +90,1 @@\n+        System.out.printf(\"INFO: Starting scenario with %s%n\", bean.getName());\n@@ -86,1 +93,3 @@\n-        bean.setUsageThreshold(bean.getUsage().getUsed() + 1);\n+        final long usageThresholdLimit = bean.getUsage().getUsed() + 1;\n+        bean.setUsageThreshold(usageThresholdLimit);\n+\n@@ -88,0 +97,3 @@\n+        final long phaseTimeout = Math.min(TEST_TIMEOUT_LIMIT,\n+                beginTimestamp + 20_000); \/\/ 20 seconds is enought for everybody.\n+\n@@ -91,0 +103,1 @@\n+\n@@ -95,0 +108,1 @@\n+            maxUsageRegistered = Math.max(bean.getUsage().getUsed(), maxUsageRegistered);\n@@ -103,2 +117,3 @@\n-                        = beginTimestamp - lastEventTimestamp;\n-                long timeoutValue\n+                        = lastEventTimestamp - beginTimestamp;\n+\n+                long awaitForUnexpectedTimeout\n@@ -106,1 +121,15 @@\n-                return currentTimestamp > timeoutValue;\n+\n+                return currentTimestamp > Math.min(phaseTimeout, awaitForUnexpectedTimeout);\n+            };\n+\n+            if (currentTimestamp > phaseTimeout) {\n+                if (maxUsageRegistered < usageThresholdLimit) {\n+                    throw new SkippedException(\"The code cache usage hasn't exceeded\" +\n+                            \" the limit of \" + usageThresholdLimit +\n+                            \" (max usage reached is \" + maxUsageRegistered + \")\" +\n+                            \" within test timeouts, can't test notifications\");\n+                } else {\n+                    Asserts.fail(\"UsageThresholdLimit was set to \" + usageThresholdLimit +\n+                            \", max usage of \" + maxUsageRegistered + \" have been registered\" +\n+                            \", but no notifications issued\");\n+                }\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/jmx\/PoolsIndependenceTest.java","additions":34,"deletions":5,"binary":false,"changes":39,"status":"modified"}]}