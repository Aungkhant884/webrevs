{"files":[{"patch":"@@ -40,3 +40,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import jdk.test.lib.Platform;\n@@ -121,36 +118,0 @@\n-                        if (Platform.isDebugBuild()) {\n-                            \/\/ In debug builds, we try to thoroughly test unmapping: if ArchiveRelocationMode\n-                            \/\/ is 1, we always map all the regions at the requested address first, and then unmap\n-                            \/\/ them, and then map them again at an alternative. Let's check that\n-                            \/\/ this logic is indeed performed. We expect output like this:\n-                            \/\/\n-                            \/\/ ArchiveRelocationMode == 1: always map archive(s) at an alternative address\n-                            \/\/ Unmapping region #0 at base 0x0000000800000000 (ReadWrite)\n-                            \/\/ Unmapping region #1 at base 0x0000000800492000 (ReadOnly)\n-                            \/\/ Unmapping region #0 at base 0x0000000800c2b000 (ReadWrite)\n-                            \/\/ Unmapping region #1 at base 0x0000000800c2c000 (ReadOnly)\n-                            \/\/ Released shared space (archive + class) 0x0000000800000000\n-                            \/\/ Try to map archive(s) at an alternative address\n-                            \/\/ Reserved archive_space_rs [0x00007f63cb000000 - 0x00007f63cc000000] (16777216) bytes\n-                            \/\/ Reserved class_space_rs   [0x00007f63cc000000 - 0x00007f640c000000] (1073741824) bytes\n-                            \/\/ Mapped static  region #0 at base 0x00007f63cb000000 top 0x00007f63cb492000 (ReadWrite)\n-                            \/\/ Mapped static  region #1 at base 0x00007f63cb492000 top 0x00007f63cbc2b000 (ReadOnly)\n-                            \/\/ runtime archive relocation start\n-\n-                            String archiveRelocPattern = \"ArchiveRelocationMode == 1.*\";\n-                            String unmapRgn1Pattern    = \"Unmapping region #1 at base 0x.*\";\n-                            String unmapRgn0Pattern    = \"Unmapping region #0 at base 0x.*\";\n-                            String runtimeRelocMsg     = \"runtime archive relocation start\";\n-                            String regexp = archiveRelocPattern +\n-                                            unmapRgn0Pattern + \/\/ unmap static #0\n-                                            unmapRgn1Pattern + \/\/ unmap static #1\n-                                            unmapRgn0Pattern + \/\/ unmap dynamic #0\n-                                            unmapRgn1Pattern + \/\/ unmap dynamic #1\n-                                            runtimeRelocMsg;\n-                            Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL);\n-                            Matcher stdoutMatcher = pattern.matcher(output.getStdout());\n-                            if (!stdoutMatcher.find()) {\n-                                throw new RuntimeException(\"'\" + regexp\n-                                                           + \"' missing from stdout\\n\");\n-                            }\n-                        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"}]}