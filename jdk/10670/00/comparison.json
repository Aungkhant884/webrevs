{"files":[{"patch":"@@ -5,2 +5,2 @@\n-openjdk.java.net (\"OpenJDK Code\") is distributed under the terms of the GNU\n-General Public License <http:\/\/www.gnu.org\/copyleft\/gpl.html> version 2\n+openjdk.org (\"OpenJDK Code\") is distributed under the terms of the GNU\n+General Public License <https:\/\/www.gnu.org\/copyleft\/gpl.html> version 2\n@@ -15,1 +15,1 @@\n-    http:\/\/openjdk.java.net\/legal\/exception-modules-2007-05-08.html\n+    https:\/\/openjdk.org\/legal\/exception-modules-2007-05-08.html\n","filename":"ASSEMBLY_EXCEPTION","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-Please see <https:\/\/openjdk.java.net\/contribute\/> for how to contribute.\n+Please see <https:\/\/openjdk.org\/contribute> for how to contribute.\n","filename":"CONTRIBUTING.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-<p>Too verbose tests which print all information even if they pass are very bad practice. They just pollute output, so it becomes harder to find useful information. In order not print information till it is really needed, one should consider saving it to a temporary buffer and pass to an assert. <a href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\" class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a> has a good example how to do that.<\/p>\n+<p>Too verbose tests which print all information even if they pass are very bad practice. They just pollute output, so it becomes harder to find useful information. In order not print information till it is really needed, one should consider saving it to a temporary buffer and pass to an assert. <a href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\" class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a> has a good example how to do that.<\/p>\n@@ -174,1 +174,1 @@\n-<p>For now, if a test depends on flags values, it should have <code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning and <code>@requires<\/code> comment similar to jtreg <code>@requires<\/code> directive right before test macros. <a href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\" class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a> ha an example of this temporary workaround. It is important to follow that pattern as it allows us to easily find all such tests and update them as soon as there is an implementation of flag passing facility.<\/p>\n+<p>For now, if a test depends on flags values, it should have <code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning and <code>@requires<\/code> comment similar to jtreg <code>@requires<\/code> directive right before test macros. <a href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\" class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a> ha an example of this temporary workaround. It is important to follow that pattern as it allows us to easily find all such tests and update them as soon as there is an implementation of flag passing facility.<\/p>\n","filename":"doc\/hotspot-unit-tests.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-### Nearness \n+### Nearness\n@@ -159,1 +159,1 @@\n-### C string comparison \n+### C string comparison\n@@ -197,1 +197,1 @@\n-<https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp>\n+<https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp>\n@@ -232,1 +232,1 @@\n-### Filename \n+### Filename\n@@ -286,1 +286,1 @@\n-### Friend classes \n+### Friend classes\n@@ -306,1 +306,1 @@\n-### Hotspot style \n+### Hotspot style\n@@ -386,1 +386,1 @@\n-<https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp>\n+<https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp>\n@@ -395,1 +395,1 @@\n-### Flag restoring \n+### Flag restoring\n@@ -407,1 +407,1 @@\n-Caveats: \n+Caveats:\n","filename":"doc\/hotspot-unit-tests.md","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    ifneq ($$(findstring http:\/, $$($1_CSS)), )\n+    ifneq ($$(findstring https:\/, $$($1_CSS)), )\n","filename":"make\/common\/ProcessMarkdown.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-[http:\/\/openjdk.java.net\/jeps\/330] for complete details.\n+[https:\/\/openjdk.org\/jeps\/330] for complete details.\n@@ -4114,2 +4114,1 @@\n-261\\f[R]\n-[https:\/\/openjdk.java.net\/jeps\/261#Relaxed\\-strong\\-encapsulation].\n+261\\f[R] [https:\/\/openjdk.org\/jeps\/261#Relaxed\\-strong\\-encapsulation].\n@@ -4117,2 +4116,2 @@\n-[https:\/\/openjdk.java.net\/jeps\/396] and made obsolete in JDK 17 by\n-\\f[B]JEP 403\\f[R] [https:\/\/openjdk.java.net\/jeps\/403].\n+[https:\/\/openjdk.org\/jeps\/396] and made obsolete in JDK 17 by \\f[B]JEP\n+403\\f[R] [https:\/\/openjdk.org\/jeps\/403].\n@@ -4395,1 +4394,1 @@\n-[https:\/\/bugs.openjdk.java.net\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf]\n+[https:\/\/bugs.openjdk.org\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf]\n","filename":"src\/java.base\/share\/man\/java.1","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}