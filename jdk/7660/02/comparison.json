{"files":[{"patch":"@@ -1530,2 +1530,1 @@\n-there is an ongoing effort. There are some things you can do to minimize\n-non-determinism and make a larger part of the build reproducible:\n+there is an ongoing effort.\n@@ -1533,1 +1532,6 @@\n-  * Turn on build system support for reproducible builds\n+An absolute prerequisite for building reproducible is to speficy a fixed build\n+time, since time stamps are embedded in many file formats. This is done by\n+setting the `SOURCE_DATE_EPOCH` environment variable, which is an [industry\n+standard]( https:\/\/reproducible-builds.org\/docs\/source-date-epoch\/), that many\n+tools, such as gcc, recognize, and use in place of the current time when\n+generating output.\n@@ -1535,3 +1539,4 @@\n-Add the flag `--enable-reproducible-build` to your `configure` command line.\n-This will turn on support for reproducible builds where it could otherwise be\n-lacking.\n+To generate reproducible builds, you must set `SOURCE_DATE_EPOCH` before running\n+`configure`. The value in `SOURCE_DATE_EPOCH` will be stored in the\n+configuration, and used by `make`. Setting `SOURCE_DATE_EPOCH` before running\n+`make` will have no effect on the build.\n@@ -1539,1 +1544,5 @@\n-  * Do not rely on `configure`'s default adhoc version strings\n+You must also make sure your build does not rely on `configure`'s default adhoc\n+version strings. Default adhoc version strings `OPT` segment include user name,\n+source directory and timestamp. You can either override just the `OPT` segment\n+using `--with-version-opt=<any fixed string>`, or you can specify the entire\n+version string using `--with-version-string=<your version>`.\n@@ -1541,4 +1550,1 @@\n-Default adhoc version strings OPT segment include user name, source directory\n-and timestamp. You can either override just the OPT segment using\n-`--with-version-opt=<any fixed string>`, or you can specify the entire version\n-string using `--with-version-string=<your version>`.\n+This is a typical example of how to build the JDK in a reproducible way:\n@@ -1546,31 +1552,5 @@\n-  * Specify how the build sets `SOURCE_DATE_EPOCH`\n-\n-The JDK build system will set the `SOURCE_DATE_EPOCH` environment variable\n-during building, depending on the value of the `--with-source-date` option for\n-`configure`. The default value is `updated`, which means that\n-`SOURCE_DATE_EPOCH` will be set to the current time each time you are running\n-`make`.\n-\n-The [`SOURCE_DATE_EPOCH` environment variable](\n-https:\/\/reproducible-builds.org\/docs\/source-date-epoch\/) is an industry\n-standard, that many tools, such as gcc, recognize, and use in place of the\n-current time when generating output.\n-\n-For reproducible builds, you need to set this to a fixed value. You can use the\n-special value `version` which will use the nominal release date for the current\n-JDK version, or a value describing a date, either an epoch based timestamp as an\n-integer, or a valid ISO-8601 date.\n-\n-**Hint:** If your build environment already sets `SOURCE_DATE_EPOCH`, you can\n-propagate this using `--with-source-date=$SOURCE_DATE_EPOCH`.\n-\n-  * Specify a hotspot build time\n-\n-Set a fixed hotspot build time. This will be included in the hotspot library\n-(`libjvm.so` or `jvm.dll`) and defaults to the current time when building\n-hotspot. Use `--with-hotspot-build-time=<any fixed string>` for reproducible\n-builds. It's a string so you don't need to format it specifically, so e.g. `n\/a`\n-will do. Another solution is to use the `SOURCE_DATE_EPOCH` variable, e.g.\n-`--with-hotspot-build-time=$(date --date=@$SOURCE_DATE_EPOCH)`.\n-\n-  * Copyright year\n+```\n+export SOURCE_DATE_EPOCH=946684800\n+bash configure --with-version-opt=adhoc\n+make\n+```\n@@ -1578,3 +1558,51 @@\n-The copyright year in some generated text files are normally set to the current\n-year. This can be overridden by `--with-copyright-year=<year>`. For fully\n-reproducible builds, this needs to be set to a fixed value.\n+Note that regardless if you specify a source date for `configure` or not, the\n+JDK build system will set `SOURCE_DATE_EPOCH` for all build tools when building.\n+If `--with-source-date` has the value `updated` (which is the default unless\n+`SOURCE_DATE_EPOCH` is found by in the environment by `configure`), the source\n+date value will be determined at build time.\n+\n+There are several aspects of reproducible builds that can be individually\n+adjusted by `configure` arguments. If any of these are given, they will override\n+the value derived from `SOURCE_DATE_EPOCH`. These arguments are:\n+\n+ * `--with-source-date`\n+\n+    This option controls how the JDK build sets SOURCE_DATE_ EPOCH when\n+    building. It can be set to a value describing a date, either an epoch based\n+    timestamp as an integer, or a valid ISO-8601 date.\n+\n+    It can also be set to one of the special values `current`, `updated` or\n+    `version`. `current` means that the time of running `configure` will be\n+    used. `version` will use the nominal release date for the current JDK\n+    version. `updated`, which means that `SOURCE_DATE_EPOCH` will be set to the\n+    current time each time you are running `make`. All choices, except for\n+    `updated`, will set a fixed value for the source date timestamp.\n+\n+    When `SOURCE_DATE_EPOCH` is set, the default value for `--with-source-date`\n+    will be the value given by `SOURCE_DATE_EPOCH`. Otherwise, the default value\n+    is `updated`.\n+\n+ * `--with-hotspot-build-time`\n+\n+    This option controls the build time string that will be included in the\n+    hotspot library (`libjvm.so` or `jvm.dll`). When the source date is fixed\n+    (e.g. by setting `SOURCE_DATE_EPOCH`), the default value for\n+    `--with-hotspot-build-time` will be an ISO 8601 representation of that time\n+    stamp. Otherwise the default value will be the current time when building\n+    hotspot.\n+\n+ * `--with-copyright-year`\n+\n+    This option controls the copyright year in some generated text files. When\n+    the source date is fixed (e.g. by setting `SOURCE_DATE_EPOCH`), the default\n+    value for `--with-copyright-year` will be the year of that time stamp.\n+    Otherwise the default is the current year at the time of running configure.\n+    This can be overridden by `--with-copyright-year=<year>`.\n+\n+ * `--enable-reproducible-build`\n+\n+    This option controls some additional behavior needed to make the build\n+    reproducible. When the source date is fixed (e.g. by setting\n+    `SOURCE_DATE_EPOCH`), this flag will be turned on by default. Otherwise, the\n+    value is determined by heuristics. If it is explicitly turned off, the build\n+    might not be reproducible.\n","filename":"doc\/building.md","additions":73,"deletions":45,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -313,11 +313,10 @@\n-      SOURCE_DATE := $$(shell $$(DATE) +\"%s\")\n-    endif\n-    export SOURCE_DATE_EPOCH := $$(SOURCE_DATE)\n-    ifeq ($$(IS_GNU_DATE), yes)\n-      export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) --utc \\\n-                                                       --date=\"@$$(SOURCE_DATE_EPOCH)\" \\\n-                                                       +\"%Y-%m-%dT%H:%M:%SZ\" 2> \/dev\/null)\n-    else\n-      export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) -u \\\n-                                                       -j -f \"%s\" \"$$(SOURCE_DATE_EPOCH)\" \\\n-                                                       +\"%Y-%m-%dT%H:%M:%SZ\" 2> \/dev\/null)\n+      # For static values of SOURCE_DATE (not \"updated\"), these are set in spec.gmk\n+      export SOURCE_DATE_EPOCH := $$(shell $$(DATE) +\"%s\")\n+      ifeq ($$(IS_GNU_DATE), yes)\n+        export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) --utc \\\n+            --date=\"@$$(SOURCE_DATE_EPOCH)\" +\"$$(ISO_8601_FORMAT_STRING)\" \\\n+            2> \/dev\/null)\n+      else\n+        export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) -u -j -f \"%s\" \\\n+            \"$$(SOURCE_DATE_EPOCH)\" +\"$$(ISO_8601_FORMAT_STRING)\" 2> \/dev\/null)\n+      endif\n","filename":"make\/InitSupport.gmk","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -155,0 +155,1 @@\n+JDKOPT_SETUP_REPRODUCIBLE_BUILD\n@@ -210,1 +211,0 @@\n-JDKOPT_SETUP_REPRODUCIBLE_BUILD\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -299,0 +299,7 @@\n+  if test \"x$SOURCE_DATE\" != xupdated; then\n+    source_date_info=\"$SOURCE_DATE ($SOURCE_DATE_ISO_8601)\"\n+  else\n+    source_date_info=\"Determined at build time\"\n+  fi\n+  printf \"* Source date:    $source_date_info\\n\"\n+\n","filename":"make\/autoconf\/help.m4","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,1 @@\n+\n@@ -118,1 +119,3 @@\n-  [timestamp to use in hotspot version string, empty for on-the-fly @<:@empty@:>@])])\n+  [timestamp to use in hotspot version string, empty means determined at build time @<:@source-date\/empty@:>@])])\n+\n+  AC_MSG_CHECKING([what hotspot build time to use])\n@@ -122,0 +125,10 @@\n+    AC_MSG_RESULT([$HOTSPOT_BUILD_TIME (from --with-hotspot-build-time)])\n+  else\n+    if test \"x$SOURCE_DATE\" = xupdated; then\n+      HOTSPOT_BUILD_TIME=\"\"\n+      AC_MSG_RESULT([determined at build time (default)])\n+    else\n+      # If we have a fixed value for SOURCE_DATE, use it as default\n+      HOTSPOT_BUILD_TIME=\"$SOURCE_DATE_ISO_8601\"\n+      AC_MSG_RESULT([$HOTSPOT_BUILD_TIME (from --with-source-date)])\n+    fi\n@@ -123,0 +136,1 @@\n+\n","filename":"make\/autoconf\/hotspot.m4","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-      [Set copyright year value for build @<:@current year@:>@])])\n+      [Set copyright year value for build @<:@current year\/source-date@:>@])])\n@@ -219,1 +219,1 @@\n-  elif test \"x$SOURCE_DATE_EPOCH\" != x; then\n+  elif test \"x$SOURCE_DATE\" != xcurrent; then\n@@ -221,1 +221,1 @@\n-      COPYRIGHT_YEAR=`date --date=@$SOURCE_DATE_EPOCH +%Y`\n+      COPYRIGHT_YEAR=`$DATE --date=@$SOURCE_DATE +%Y`\n@@ -223,1 +223,1 @@\n-      COPYRIGHT_YEAR=`date -j -f %s $SOURCE_DATE_EPOCH +%Y`\n+      COPYRIGHT_YEAR=`$DATE -j -f %s $SOURCE_DATE +%Y`\n@@ -665,1 +665,1 @@\n-      [how to set SOURCE_DATE_EPOCH ('updated', 'current', 'version' a timestamp or an ISO-8601 date) @<:@updated@:>@])],\n+      [how to set SOURCE_DATE_EPOCH ('updated', 'current', 'version' a timestamp or an ISO-8601 date) @<:@updated\/value of SOURCE_DATE_EPOCH@:>@])],\n@@ -668,0 +668,4 @@\n+  if test \"x$SOURCE_DATE_EPOCH\" != x && test \"x$with_source_date\" != x; then\n+    AC_MSG_WARN([--with-source-date will override SOURCE_DATE_EPOCH])\n+  fi\n+\n@@ -672,2 +676,11 @@\n-  elif test \"x$with_source_date\" = xupdated || test \"x$with_source_date\" = x; then\n-    # Tell the makefiles to update at each build\n+  elif test \"x$with_source_date\" = x; then\n+    if test \"x$SOURCE_DATE_EPOCH\" != x; then\n+      SOURCE_DATE=$SOURCE_DATE_EPOCH\n+      with_source_date_present=true\n+      AC_MSG_RESULT([$SOURCE_DATE, from SOURCE_DATE_EPOCH])\n+    else\n+      # Tell the makefiles to update at each build\n+      SOURCE_DATE=updated\n+      AC_MSG_RESULT([determined at build time (default)])\n+    fi\n+  elif test \"x$with_source_date\" = xupdated; then\n@@ -705,0 +718,12 @@\n+  ISO_8601_FORMAT_STRING=\"%Y-%m-%dT%H:%M:%SZ\"\n+  if test \"x$SOURCE_DATE\" != xupdated; then\n+    # If we have a fixed value for SOURCE_DATE, we need to set SOURCE_DATE_EPOCH\n+    # for the rest of configure.\n+    SOURCE_DATE_EPOCH=\"$SOURCE_DATE\"\n+    if test \"x$IS_GNU_DATE\" = xyes; then\n+      SOURCE_DATE_ISO_8601=`$DATE --utc --date=\"@$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n+    else\n+      SOURCE_DATE_ISO_8601=`$DATE -u -j -f \"%s\" \"$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n+    fi\n+  fi\n+\n@@ -729,0 +754,2 @@\n+  AC_SUBST(ISO_8601_FORMAT_STRING)\n+  AC_SUBST(SOURCE_DATE_ISO_8601)\n","filename":"make\/autoconf\/jdk-options.m4","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -133,0 +133,7 @@\n+ISO_8601_FORMAT_STRING := @ISO_8601_FORMAT_STRING@\n+\n+ifneq ($(SOURCE_DATE), updated)\n+  # For \"updated\" source date value, these are set in InitSupport.gmk\n+  export SOURCE_DATE_EPOCH := $(SOURCE_DATE)\n+  SOURCE_DATE_ISO_8601 := @SOURCE_DATE_ISO_8601@\n+endif\n","filename":"make\/autoconf\/spec.gmk.in","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}