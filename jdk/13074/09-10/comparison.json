{"files":[{"patch":"@@ -863,0 +863,9 @@\n+            if (mods.annotations.nonEmpty()) {\n+                log.error(mods.annotations.head.pos(), Errors.RecordPatternsAnnotationsNotAllowed);\n+            }\n+            new TreeScanner() {\n+                @Override\n+                public void visitAnnotatedType(JCAnnotatedType tree) {\n+                    log.error(tree.pos(), Errors.RecordPatternsAnnotationsNotAllowed);\n+                }\n+            }.scan(e);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3856,0 +3856,3 @@\n+compiler.err.record.patterns.annotations.not.allowed=\\\n+    annotations not allowed on record patterns\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDrawDiagnostics T8297602.java\n+ * @compile\/fail\/ref=T8297602.out -XDrawDiagnostics T8297602.java\n","filename":"test\/langtools\/tools\/javac\/T8297602.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,3 @@\n+T8297602.java:37:22: compiler.err.record.patterns.annotations.not.allowed\n+T8297602.java:40:30: compiler.err.record.patterns.annotations.not.allowed\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/T8297602.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.record.patterns.annotations.not.allowed\n+\n+class RecordPatternsAnnotationsNotAllowed {\n+\n+    public boolean test(Object o) {\n+        return o instanceof @Deprecated R(String s);\n+    }\n+\n+    record R(String s) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordPatternsAnnotationsNotAllowed.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8300543\n+ * @summary Verify error related to annotations and patterns\n+ * @compile\/fail\/ref=AnnotationErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW AnnotationErrors.java\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+public class AnnotationErrors {\n+\n+    private void test(Object o, G<String> g) {\n+        boolean b1 = o instanceof @DA R(var s);\n+        boolean b2 = o instanceof @DTA R(var s);\n+        boolean b3 = o instanceof @TA R(var s);\n+        boolean b5 = g instanceof G<@DTA String>(var s);\n+        boolean b6 = g instanceof G<@TA String>(var s);\n+        switch (o) {\n+            case @DA R(var s) when b1 -> {}\n+            case @DTA R(var s) when b1 -> {}\n+            case @TA R(var s) when b1 -> {}\n+            default -> {}\n+        }\n+        switch (g) {\n+            case G<@DTA String>(var s) when b1 -> {}\n+            case G<@TA String>(var s) when b1 -> {}\n+            default -> {}\n+        }\n+    }\n+\n+    record R(String s) {}\n+    record G<T>(T t) {}\n+\n+    @Target(ElementType.LOCAL_VARIABLE)\n+    @interface DA {}\n+    @Target({ElementType.TYPE_USE, ElementType.LOCAL_VARIABLE})\n+    @interface DTA {}\n+    @Target(ElementType.TYPE_USE)\n+    @interface TA {}\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/AnnotationErrors.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+AnnotationErrors.java:14:35: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:15:35: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:16:35: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:17:37: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:18:37: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:20:18: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:21:18: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:22:18: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:26:20: compiler.err.record.patterns.annotations.not.allowed\n+AnnotationErrors.java:27:20: compiler.err.record.patterns.annotations.not.allowed\n+10 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/AnnotationErrors.out","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"}]}