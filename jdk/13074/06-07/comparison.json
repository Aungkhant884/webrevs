{"files":[{"patch":"@@ -100,3 +100,3 @@\n-     * The value of the {@code restart} index must be between {@code 0} and\n-     * the length of the {@code labels} array, of an {@link IndexOutOfBoundsException}\n-     * is thrown.\n+     * The value of the {@code restart} index must be between {@code 0} (inclusive) and\n+     * the length of the {@code labels} array (inclusive),\n+     * both  or an {@link IndexOutOfBoundsException} is thrown.\n@@ -219,3 +219,3 @@\n-     * The value of the {@code restart} index must be between {@code 0} and\n-     * the length of the {@code labels} array, of an {@link IndexOutOfBoundsException}\n-     * is thrown.\n+     * The value of the {@code restart} index must be between {@code 0} (inclusive) and\n+     * the length of the {@code labels} array (inclusive),\n+     * both  or an {@link IndexOutOfBoundsException} is thrown.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3210,5 +3210,0 @@\n-        @Override\n-        public void visitCase(JCCase tree) {\n-            super.visitCase(tree); \/\/ Generated from nbfs:\/\/nbhost\/SystemFileSystem\/Templates\/Classes\/Code\/OverriddenMethodBody\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -862,1 +862,0 @@\n-        \/\/ConstantBootstrap.invoke(..., EnumDesc.of(ConstantBootstrap.invoke(..., ClassDesc.of(enumClass)), constant))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -409,30 +409,1 @@\n-    public void testExhaustiveStatement3(Path base) throws Exception {\n-        doTest(base,\n-               new String[]{\"\"\"\n-                            package lib;\n-                            public sealed interface S permits A, B {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class A implements S {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class B implements S {}\n-                            \"\"\"},\n-               \"\"\"\n-               package test;\n-               import lib.*;\n-               public class Test {\n-                   private int test(S obj) {\n-                       return switch (obj) {\n-                           case A a -> 0;\n-                           case S s -> 1;\n-                       };\n-                   }\n-               }\n-               \"\"\");\n-    }\n-\n-    @Test\n-    public void testExhaustiveStatement4(Path base) throws Exception {\n+    public void testExhaustiveExpression1(Path base) throws Exception {\n@@ -468,1 +439,1 @@\n-    public void testExhaustiveStatement5(Path base) throws Exception {\n+    public void testExhaustiveExpression2(Path base) throws Exception {\n@@ -576,87 +547,58 @@\n-    public void testExhaustiveIntersection(Path base) throws Exception {\n-        doTest(base,\n-               new String[]{\"\"\"\n-                            package lib;\n-                            public sealed interface S permits A, B {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public abstract class Base {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public interface Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class A extends Base implements S, Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public abstract sealed class B extends Base implements S permits C, D {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class C extends B implements Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class D extends B implements Marker {}\n-                            \"\"\"},\n-               \"\"\"\n-               package test;\n-               import lib.*;\n-               public class Test {\n-                   private <T extends Base & S & Marker> int test(T obj, boolean b) {\n-                       return switch (obj) {\n-                           case A a -> 0;\n-                           case C c when b -> 0;\n-                           case C c -> 0;\n-                           case D d -> 0;\n-                       };\n-                   }\n-               }\n-               \"\"\");\n-    }\n-\n-    @Test\n-    public void testNotExhaustiveIntersection(Path base) throws Exception {\n-        doTest(base,\n-               new String[]{\"\"\"\n-                            package lib;\n-                            public sealed interface S permits A, B {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public abstract class Base {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public interface Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class A extends Base implements S, Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public abstract sealed class B extends Base implements S permits C, D {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class C extends B implements Marker {}\n-                            \"\"\",\n-                            \"\"\"\n-                            package lib;\n-                            public final class D extends B implements Marker {}\n-                            \"\"\"},\n-               \"\"\"\n-               package test;\n-               import lib.*;\n-               public class Test {\n-                   private <T extends Base & S & Marker> int test(T obj, boolean b) {\n-                       return switch (obj) {\n-                           case A a -> 0;\n-                           case C c -> 0;\n-                           case D d when b -> 0;\n-                       };\n+    public void testIntersection(Path base) throws Exception {\n+        record TestCase(String snippet, String... expected){}\n+        TestCase[] testCases = new TestCase[] {\n+            new TestCase(\"\"\"\n+                         return switch (obj) {\n+                             case A a -> 0;\n+                             case C c when b -> 0;\n+                             case C c -> 0;\n+                             case D d -> 0;\n+                         };\n+                         \"\"\"),\n+            new TestCase(\"\"\"\n+                         return switch (obj) {\n+                             case A a -> 0;\n+                             case C c -> 0;\n+                             case D d when b -> 0;\n+                         };\n+                         \"\"\",\n+                         \"Test.java:5:16: compiler.err.not.exhaustive\",\n+                         \"1 error\")\n+        };\n+        for (TestCase tc : testCases) {\n+            doTest(base,\n+                   new String[]{\"\"\"\n+                                package lib;\n+                                public sealed interface S permits A, B {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public abstract class Base {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public interface Marker {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public final class A extends Base implements S, Marker {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public abstract sealed class B extends Base implements S permits C, D {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public final class C extends B implements Marker {}\n+                                \"\"\",\n+                                \"\"\"\n+                                package lib;\n+                                public final class D extends B implements Marker {}\n+                                \"\"\"},\n+                   \"\"\"\n+                   package test;\n+                   import lib.*;\n+                   public class Test {\n+                       private <T extends Base & S & Marker> int test(T obj, boolean b) {\n+                           ${tc.snippet()}\n+                       }\n@@ -664,4 +606,3 @@\n-               }\n-               \"\"\",\n-               \"Test.java:5:16: compiler.err.not.exhaustive\",\n-               \"1 error\");\n+                   \"\"\".replace(\"${tc.snippet()}\", tc.snippet()),\n+                   tc.expected());\n+        }\n@@ -671,1 +612,1 @@\n-    public void testX(Path base) throws Exception {\n+    public void testRecordPatterns(Path base) throws Exception {\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":64,"deletions":123,"binary":false,"changes":187,"status":"modified"}]}