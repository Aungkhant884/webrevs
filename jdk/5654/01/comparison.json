{"files":[{"patch":"@@ -51,1 +51,5 @@\n-    private static boolean allowWeakCrypto;\n+\n+    \/\/ etypes supported by JDK, including weak ones\n+    private static int[] supportedETypes;\n+    \/\/ common default etypes if not defined in krb5.conf\n+    private static int[] defaultETypes;\n@@ -58,1 +62,19 @@\n-        boolean allowed = false;\n+\n+        int maxKeyLength = 0;\n+        try {\n+            maxKeyLength = Cipher.getMaxAllowedKeyLength(\"AES\");\n+        } catch (Exception e) {\n+            \/\/ should not happen\n+        }\n+\n+        defaultETypes = maxKeyLength >= 256\n+                ? new int[] {\n+                        EncryptedData.ETYPE_AES256_CTS_HMAC_SHA1_96,\n+                        EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96,\n+                        EncryptedData.ETYPE_AES256_CTS_HMAC_SHA384_192,\n+                        EncryptedData.ETYPE_AES128_CTS_HMAC_SHA256_128, }\n+                : new int[] {\n+                        EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96,\n+                        EncryptedData.ETYPE_AES128_CTS_HMAC_SHA256_128, };\n+\n+        boolean allowWeakCrypto = false;\n@@ -61,1 +83,1 @@\n-            allowed = cfg.getBooleanObject(\"libdefaults\", \"allow_weak_crypto\")\n+            allowWeakCrypto = cfg.getBooleanObject(\"libdefaults\", \"allow_weak_crypto\")\n@@ -70,1 +92,11 @@\n-        allowWeakCrypto = allowed;\n+\n+        if (allowWeakCrypto) {\n+            int[] result = Arrays.copyOf(defaultETypes, defaultETypes.length + 4);\n+            result[defaultETypes.length] = EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD;\n+            result[defaultETypes.length + 1] = EncryptedData.ETYPE_ARCFOUR_HMAC;\n+            result[defaultETypes.length + 2] = EncryptedData.ETYPE_DES_CBC_CRC;\n+            result[defaultETypes.length + 3] = EncryptedData.ETYPE_DES_CBC_MD5;\n+            supportedETypes = result;\n+        } else {\n+            supportedETypes = defaultETypes;\n+        }\n@@ -199,25 +231,0 @@\n-    \/\/ Note: the first 2 entries of BUILTIN_ETYPES and BUILTIN_ETYPES_NOAES256\n-    \/\/ should be kept DES-related. They will be removed when allow_weak_crypto\n-    \/\/ is set to false.\n-\n-    private static final int[] BUILTIN_ETYPES = new int[] {\n-            EncryptedData.ETYPE_AES256_CTS_HMAC_SHA1_96,\n-            EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96,\n-            EncryptedData.ETYPE_AES256_CTS_HMAC_SHA384_192,\n-            EncryptedData.ETYPE_AES128_CTS_HMAC_SHA256_128,\n-            EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD,\n-            EncryptedData.ETYPE_ARCFOUR_HMAC,\n-            EncryptedData.ETYPE_DES_CBC_CRC,\n-            EncryptedData.ETYPE_DES_CBC_MD5,\n-    };\n-\n-    private static final int[] BUILTIN_ETYPES_NOAES256 = new int[] {\n-            EncryptedData.ETYPE_AES128_CTS_HMAC_SHA1_96,\n-            EncryptedData.ETYPE_AES128_CTS_HMAC_SHA256_128,\n-            EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD,\n-            EncryptedData.ETYPE_ARCFOUR_HMAC,\n-            EncryptedData.ETYPE_DES_CBC_CRC,\n-            EncryptedData.ETYPE_DES_CBC_MD5,\n-    };\n-\n-\n@@ -226,17 +233,1 @@\n-        int allowed = 0;\n-        try {\n-            allowed = Cipher.getMaxAllowedKeyLength(\"AES\");\n-        } catch (Exception e) {\n-            \/\/ should not happen\n-        }\n-        int[] result;\n-        if (allowed < 256) {\n-            result = BUILTIN_ETYPES_NOAES256;\n-        } else {\n-            result = BUILTIN_ETYPES;\n-        }\n-        if (!allowWeakCrypto) {\n-            \/\/ The last 4 etypes are now weak ones\n-            return Arrays.copyOfRange(result, 0, result.length - 4);\n-        }\n-        return result;\n+        return defaultETypes.clone();\n@@ -315,2 +306,1 @@\n-        int[] enabledETypes = getBuiltInDefaults();\n-        return isSupported(eTypeConst, enabledETypes);\n+        return isSupported(eTypeConst, supportedETypes);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/crypto\/EType.java","additions":38,"deletions":48,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n-                \"allow_weak_crypto = true\");\n+                \"allow_weak_crypto = true\",\n+                \"permitted_enctypes = aes256-cts arcfour-hmac des-cbc-crc des-cbc-md5\");\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/DupEtypes.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,5 +75,2 @@\n-            extraConfig += \"default_tkt_enctypes=\" + etype\n-                    + \"\\ndefault_tgs_enctypes=\" + etype;\n-            if (etype.startsWith(\"des\")) {\n-                extraConfig += \"\\nallow_weak_crypto = true\";\n-            }\n+            extraConfig += \"permitted_enctypes=\" + etype\n+                    + \"\\nallow_weak_crypto = true\";\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/OneKDC.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-                \"allow_weak_crypto = true\");\n+                \"allow_weak_crypto = true\",\n+                \"permitted_enctypes = aes256-cts arcfour-hmac\");\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/W83.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-        if (!Arrays.stream(EType.getBuiltInDefaults())\n-                .anyMatch(n -> n < 4)) {\n+        if (!Arrays.stream(EType.getDefaults(\"default_tkt_enctypes\"))\n+                .anyMatch(n -> n == 23)) {\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/YesNo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+default_tkt_enctypes = rc4-hmac\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/yesno.conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 6844909 8012679 8139348\n+ * @bug 6844909 8012679 8139348 8273670\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -29,3 +30,0 @@\n- * @run main\/othervm WeakCrypto true\n- * @run main\/othervm WeakCrypto false\n- * @summary support allow_weak_crypto in krb5.conf\n@@ -34,6 +32,2 @@\n-import java.lang.Exception;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n-\n+import jdk.test.lib.Asserts;\n+import sun.security.krb5.Config;\n@@ -42,1 +36,5 @@\n-import sun.security.krb5.EncryptedData;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n@@ -45,0 +43,1 @@\n+    public static void main(String[] args) throws Exception {\n@@ -46,6 +45,1 @@\n-    static List<Integer> weakOnes = List.of(\n-            EncryptedData.ETYPE_DES_CBC_CRC,\n-            EncryptedData.ETYPE_DES_CBC_MD5,\n-            EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD,\n-            EncryptedData.ETYPE_ARCFOUR_HMAC\n-    );\n+        System.setProperty(\"java.security.krb5.conf\", \"tmp.conf\");\n@@ -53,1 +47,6 @@\n-    public static void main(String[] args) throws Exception {\n+        test(null, null,\n+                18, 17, 20, 19);    \/\/ the defaults\n+        test(false, null,\n+                18, 17, 20, 19);    \/\/ the defaults\n+        test(true, null,\n+                18, 17, 20, 19);    \/\/ the defaults\n@@ -55,4 +54,5 @@\n-        String conf = \"[libdefaults]\\n\" +\n-                (args.length > 0 ? (\"allow_weak_crypto = \" + args[0]) : \"\");\n-        Files.write(Paths.get(\"krb5.conf\"), conf.getBytes());\n-        System.setProperty(\"java.security.krb5.conf\", \"krb5.conf\");\n+        String strongAndWeak = \"aes256-cts aes128-cts aes256-sha2 aes128-sha2\" +\n+                \" des3-hmac-sha1 arcfour-hmac des-cbc-crc des-cbc-md5\";\n+        test(null, strongAndWeak, 18, 17, 20, 19);\n+        test(false, strongAndWeak, 18, 17, 20, 19);\n+        test(true, strongAndWeak, 18, 17, 20, 19, 16, 23, 1, 3);\n@@ -60,5 +60,5 @@\n-        \/\/ expected number of supported weak etypes\n-        int expected = 0;\n-        if (args.length != 0 && args[0].equals(\"true\")) {\n-            expected = weakOnes.size();\n-        }\n+        String anotherOrder = \"aes256-cts aes256-sha2 aes128-cts aes128-sha2\" +\n+                \" des3-hmac-sha1 arcfour-hmac des-cbc-crc des-cbc-md5\";\n+        test(null, anotherOrder, 18, 20, 17, 19);\n+        test(false, anotherOrder, 18, 20, 17, 19);\n+        test(true, anotherOrder, 18, 20, 17, 19, 16, 23, 1, 3);\n@@ -66,6 +66,14 @@\n-        \/\/ Ensure EType.getBuiltInDefaults() has the correct etypes\n-        if (Arrays.stream(EType.getBuiltInDefaults())\n-                .filter(weakOnes::contains)\n-                .count() != expected) {\n-            throw new Exception(\"getBuiltInDefaults fails\");\n-        }\n+        String two = \"aes256-cts arcfour-hmac\";\n+        test(null, two, 18);\n+        test(false, two, 18);\n+        test(true, two, 18, 23);\n+    }\n+\n+    \/**\n+     * Writes a krb5.conf and makes sure it's correctly parsed.\n+     *\n+     * @param allowWeak if \"allow_weak_crypto = true\" should be written\n+     * @param etypes redefined \"default_tkt_enctypes\"\n+     * @param expected expected etypes\n+     *\/\n+    static void test(Boolean allowWeak, String etypes, int... expected) throws Exception {\n@@ -73,7 +81,3 @@\n-        \/\/ Ensure keys generated have the correct etypes\n-        if (Arrays.stream(EncryptionKey.acquireSecretKeys(\n-                    \"password\".toCharArray(), \"salt\"))\n-                .map(EncryptionKey::getEType)\n-                .filter(weakOnes::contains)\n-                .count() != expected) {\n-            throw new Exception(\"acquireSecretKeys fails\");\n+        String s = \"[libdefaults]\\n\";\n+        if (allowWeak != null) {\n+            s += \"allow_weak_crypto = \" + allowWeak + \"\\n\";\n@@ -81,0 +85,18 @@\n+        if (etypes != null) {\n+            s += \"default_tkt_enctypes = \" + etypes;\n+        }\n+        Files.write(Path.of(\"tmp.conf\"), s.getBytes(StandardCharsets.UTF_8));\n+        Config.refresh();\n+\n+        \/\/ Check internal config read\n+        int[] config = EType.getDefaults(\"default_tkt_enctypes\");\n+        Asserts.assertTrue(Arrays.equals(config, expected),\n+                \"config: \" + Arrays.toString(config));\n+\n+        \/\/ Check actual etypes used\n+        int[] generated = Arrays.stream(EncryptionKey.acquireSecretKeys(\n+                        \"password\".toCharArray(), \"salt\"))\n+                .mapToInt(EncryptionKey::getEType)\n+                .toArray();\n+        Asserts.assertTrue(Arrays.equals(generated, expected),\n+                \"generated: \" + Arrays.toString(generated));\n","filename":"test\/jdk\/sun\/security\/krb5\/etype\/WeakCrypto.java","additions":62,"deletions":40,"binary":false,"changes":102,"status":"modified"}]}