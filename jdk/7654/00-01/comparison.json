{"files":[{"patch":"@@ -1858,1 +1858,0 @@\n-            ByteVector bits = this.viewAsIntegralLanes();\n@@ -1861,1 +1860,1 @@\n-                m = bits.compare(EQ, (byte) 0);\n+                m = compare(EQ, (byte) 0);\n@@ -1863,1 +1862,1 @@\n-                m = bits.compare(LT, (byte) 0);\n+                m = compare(LT, (byte) 0);\n@@ -1888,0 +1887,1 @@\n+        mask.check(maskType, this);\n@@ -1889,2 +1889,1 @@\n-            ByteVector bits = this.viewAsIntegralLanes();\n-            VectorMask<Byte> m;\n+            VectorMask<Byte> m = mask;\n@@ -1892,1 +1891,1 @@\n-                m = bits.compare(EQ, (byte) 0, mask);\n+                m = compare(EQ, (byte) 0, m);\n@@ -1894,1 +1893,1 @@\n-                m = bits.compare(LT, (byte) 0, mask);\n+                m = compare(LT, (byte) 0, m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Long128Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Double128Mask.class, op, (Long128Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Double128Mask.class, op, (Double128Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Long256Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Double256Mask.class, op, (Long256Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Double256Mask.class, op, (Double256Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Long512Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Double512Mask.class, op, (Long512Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Double512Mask.class, op, (Double512Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Long64Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Double64Mask.class, op, (Long64Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Double64Mask.class, op, (Double64Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.LongMaxVector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(DoubleMaxMask.class, op, (LongMaxMask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(DoubleMaxMask.class, op, (DoubleMaxMask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1718,1 +1718,1 @@\n-            return maskType.cast(m.cast(this.vspecies()));\n+            return maskType.cast(m.cast(vsp));\n@@ -1735,3 +1735,2 @@\n-    <M1 extends VectorMask<Double>,\n-     M2 extends VectorMask<Long>>\n-    M1 testTemplate(Class<M1> maskType, Test op, M2 mask) {\n+    <M extends VectorMask<Double>>\n+    M testTemplate(Class<M> maskType, Test op, M mask) {\n@@ -1739,0 +1738,1 @@\n+        mask.check(maskType, this);\n@@ -1741,1 +1741,1 @@\n-            VectorMask<Long> m;\n+            VectorMask<Long> m = mask.cast(LongVector.species(shape()));\n@@ -1743,1 +1743,1 @@\n-                m = bits.compare(EQ, (long) 0, mask);\n+                m = bits.compare(EQ, (long) 0, m);\n@@ -1745,1 +1745,1 @@\n-                m = bits.compare(LT, (long) 0, mask);\n+                m = bits.compare(LT, (long) 0, m);\n@@ -1756,1 +1756,1 @@\n-                    m = bits.compare(LT, infbits, mask);\n+                    m = bits.compare(LT, infbits, m);\n@@ -1758,1 +1758,1 @@\n-                    m = bits.compare(GT, infbits, mask);\n+                    m = bits.compare(GT, infbits, m);\n@@ -1760,1 +1760,1 @@\n-                    m = bits.compare(EQ, infbits, mask);\n+                    m = bits.compare(EQ, infbits, m);\n@@ -1766,1 +1766,1 @@\n-            return maskType.cast(m.cast(this.vspecies()));\n+            return maskType.cast(m.cast(vsp));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Int128Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Float128Mask.class, op, (Int128Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Float128Mask.class, op, (Float128Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Int256Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Float256Mask.class, op, (Int256Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Float256Mask.class, op, (Float256Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Int512Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Float512Mask.class, op, (Int512Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Float512Mask.class, op, (Float512Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.Int64Vector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(Float64Mask.class, op, (Int64Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(Float64Mask.class, op, (Float64Mask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static jdk.incubator.vector.IntMaxVector.*;\n@@ -364,1 +363,1 @@\n-        return super.testTemplate(FloatMaxMask.class, op, (IntMaxMask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n+        return super.testTemplate(FloatMaxMask.class, op, (FloatMaxMask) m);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1730,1 +1730,1 @@\n-            return maskType.cast(m.cast(this.vspecies()));\n+            return maskType.cast(m.cast(vsp));\n@@ -1747,3 +1747,2 @@\n-    <M1 extends VectorMask<Float>,\n-     M2 extends VectorMask<Integer>>\n-    M1 testTemplate(Class<M1> maskType, Test op, M2 mask) {\n+    <M extends VectorMask<Float>>\n+    M testTemplate(Class<M> maskType, Test op, M mask) {\n@@ -1751,0 +1750,1 @@\n+        mask.check(maskType, this);\n@@ -1753,1 +1753,1 @@\n-            VectorMask<Integer> m;\n+            VectorMask<Integer> m = mask.cast(IntVector.species(shape()));\n@@ -1755,1 +1755,1 @@\n-                m = bits.compare(EQ, (int) 0, mask);\n+                m = bits.compare(EQ, (int) 0, m);\n@@ -1757,1 +1757,1 @@\n-                m = bits.compare(LT, (int) 0, mask);\n+                m = bits.compare(LT, (int) 0, m);\n@@ -1768,1 +1768,1 @@\n-                    m = bits.compare(LT, infbits, mask);\n+                    m = bits.compare(LT, infbits, m);\n@@ -1770,1 +1770,1 @@\n-                    m = bits.compare(GT, infbits, mask);\n+                    m = bits.compare(GT, infbits, m);\n@@ -1772,1 +1772,1 @@\n-                    m = bits.compare(EQ, infbits, mask);\n+                    m = bits.compare(EQ, infbits, m);\n@@ -1778,1 +1778,1 @@\n-            return maskType.cast(m.cast(this.vspecies()));\n+            return maskType.cast(m.cast(vsp));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1857,1 +1857,0 @@\n-            IntVector bits = this.viewAsIntegralLanes();\n@@ -1860,1 +1859,1 @@\n-                m = bits.compare(EQ, (int) 0);\n+                m = compare(EQ, (int) 0);\n@@ -1862,1 +1861,1 @@\n-                m = bits.compare(LT, (int) 0);\n+                m = compare(LT, (int) 0);\n@@ -1887,0 +1886,1 @@\n+        mask.check(maskType, this);\n@@ -1888,2 +1888,1 @@\n-            IntVector bits = this.viewAsIntegralLanes();\n-            VectorMask<Integer> m;\n+            VectorMask<Integer> m = mask;\n@@ -1891,1 +1890,1 @@\n-                m = bits.compare(EQ, (int) 0, mask);\n+                m = compare(EQ, (int) 0, m);\n@@ -1893,1 +1892,1 @@\n-                m = bits.compare(LT, (int) 0, mask);\n+                m = compare(LT, (int) 0, m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1770,1 +1770,0 @@\n-            LongVector bits = this.viewAsIntegralLanes();\n@@ -1773,1 +1772,1 @@\n-                m = bits.compare(EQ, (long) 0);\n+                m = compare(EQ, (long) 0);\n@@ -1775,1 +1774,1 @@\n-                m = bits.compare(LT, (long) 0);\n+                m = compare(LT, (long) 0);\n@@ -1800,0 +1799,1 @@\n+        mask.check(maskType, this);\n@@ -1801,2 +1801,1 @@\n-            LongVector bits = this.viewAsIntegralLanes();\n-            VectorMask<Long> m;\n+            VectorMask<Long> m = mask;\n@@ -1804,1 +1803,1 @@\n-                m = bits.compare(EQ, (long) 0, mask);\n+                m = compare(EQ, (long) 0, m);\n@@ -1806,1 +1805,1 @@\n-                m = bits.compare(LT, (long) 0, mask);\n+                m = compare(LT, (long) 0, m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1858,1 +1858,0 @@\n-            ShortVector bits = this.viewAsIntegralLanes();\n@@ -1861,1 +1860,1 @@\n-                m = bits.compare(EQ, (short) 0);\n+                m = compare(EQ, (short) 0);\n@@ -1863,1 +1862,1 @@\n-                m = bits.compare(LT, (short) 0);\n+                m = compare(LT, (short) 0);\n@@ -1888,0 +1887,1 @@\n+        mask.check(maskType, this);\n@@ -1889,2 +1889,1 @@\n-            ShortVector bits = this.viewAsIntegralLanes();\n-            VectorMask<Short> m;\n+            VectorMask<Short> m = mask;\n@@ -1892,1 +1891,1 @@\n-                m = bits.compare(EQ, (short) 0, mask);\n+                m = compare(EQ, (short) 0, m);\n@@ -1894,1 +1893,1 @@\n-                m = bits.compare(LT, (short) 0, mask);\n+                m = compare(LT, (short) 0, m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2131,0 +2131,1 @@\n+#if[FP]\n@@ -2132,0 +2133,1 @@\n+#end[FP]\n@@ -2134,1 +2136,1 @@\n-                m = bits.compare(EQ, ($bitstype$) 0);\n+                m = {#if[FP]?bits.}compare(EQ, ($bitstype$) 0);\n@@ -2136,1 +2138,1 @@\n-                m = bits.compare(LT, ($bitstype$) 0);\n+                m = {#if[FP]?bits.}compare(LT, ($bitstype$) 0);\n@@ -2159,1 +2161,1 @@\n-            return maskType.cast(m{#if[FP]?.cast(this.vspecies())});\n+            return maskType.cast(m{#if[FP]?.cast(vsp)});\n@@ -2176,5 +2178,0 @@\n-#if[FP]\n-    <M1 extends VectorMask<$Boxtype$>,\n-     M2 extends VectorMask<$Boxbitstype$>>\n-    M1 testTemplate(Class<M1> maskType, Test op, M2 mask) {\n-#else[FP]\n@@ -2183,1 +2180,0 @@\n-#end[FP]\n@@ -2185,0 +2181,1 @@\n+        mask.check(maskType, this);\n@@ -2186,0 +2183,1 @@\n+#if[FP]\n@@ -2187,1 +2185,4 @@\n-            VectorMask<$Boxbitstype$> m;\n+            VectorMask<$Boxbitstype$> m = mask.cast($Bitstype$Vector.species(shape()));\n+#else[FP]\n+            VectorMask<$Boxbitstype$> m = mask;\n+#end[FP]\n@@ -2189,1 +2190,1 @@\n-                m = bits.compare(EQ, ($bitstype$) 0, mask);\n+                m = {#if[FP]?bits.}compare(EQ, ($bitstype$) 0, m);\n@@ -2191,1 +2192,1 @@\n-                m = bits.compare(LT, ($bitstype$) 0, mask);\n+                m = {#if[FP]?bits.}compare(LT, ($bitstype$) 0, m);\n@@ -2203,1 +2204,1 @@\n-                    m = bits.compare(LT, infbits, mask);\n+                    m = bits.compare(LT, infbits, m);\n@@ -2205,1 +2206,1 @@\n-                    m = bits.compare(GT, infbits, mask);\n+                    m = bits.compare(GT, infbits, m);\n@@ -2207,1 +2208,1 @@\n-                    m = bits.compare(EQ, infbits, mask);\n+                    m = bits.compare(EQ, infbits, m);\n@@ -2214,1 +2215,1 @@\n-            return maskType.cast(m{#if[FP]?.cast(this.vspecies())});\n+            return maskType.cast(m{#if[FP]?.cast(vsp)});\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -37,3 +37,0 @@\n-#if[FP]\n-import static jdk.incubator.vector.$Bitstype$$bits$Vector.*;\n-#end[FP]\n@@ -383,3 +380,0 @@\n-#if[FP]\n-        return super.testTemplate($masktype$.class, op, ($Bitstype$$bits$Mask) m.cast(vspecies().asIntegral()));  \/\/ specialize\n-#else[FP]\n@@ -387,1 +381,0 @@\n-#end[FP]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3567,1 +3567,1 @@\n-    static void IS_DEFAULTMaskedByte128VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_DEFAULTMaskedByte128VectorTests(IntFunction<byte[]> fa,\n@@ -3607,1 +3607,1 @@\n-    static void IS_NEGATIVEMaskedByte128VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_NEGATIVEMaskedByte128VectorTests(IntFunction<byte[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3567,1 +3567,1 @@\n-    static void IS_DEFAULTMaskedByte256VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_DEFAULTMaskedByte256VectorTests(IntFunction<byte[]> fa,\n@@ -3607,1 +3607,1 @@\n-    static void IS_NEGATIVEMaskedByte256VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_NEGATIVEMaskedByte256VectorTests(IntFunction<byte[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3567,1 +3567,1 @@\n-    static void IS_DEFAULTMaskedByte512VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_DEFAULTMaskedByte512VectorTests(IntFunction<byte[]> fa,\n@@ -3607,1 +3607,1 @@\n-    static void IS_NEGATIVEMaskedByte512VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_NEGATIVEMaskedByte512VectorTests(IntFunction<byte[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3567,1 +3567,1 @@\n-    static void IS_DEFAULTMaskedByte64VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_DEFAULTMaskedByte64VectorTests(IntFunction<byte[]> fa,\n@@ -3607,1 +3607,1 @@\n-    static void IS_NEGATIVEMaskedByte64VectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_NEGATIVEMaskedByte64VectorTests(IntFunction<byte[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3572,1 +3572,1 @@\n-    static void IS_DEFAULTMaskedByteMaxVectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_DEFAULTMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n@@ -3612,1 +3612,1 @@\n-    static void IS_NEGATIVEMaskedByteMaxVectorTestsSmokeTest(IntFunction<byte[]> fa,\n+    static void IS_NEGATIVEMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2580,1 +2580,1 @@\n-    static void IS_DEFAULTMaskedDouble128VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_DEFAULTMaskedDouble128VectorTests(IntFunction<double[]> fa,\n@@ -2620,1 +2620,1 @@\n-    static void IS_NEGATIVEMaskedDouble128VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NEGATIVEMaskedDouble128VectorTests(IntFunction<double[]> fa,\n@@ -2661,1 +2661,1 @@\n-    static void IS_FINITEMaskedDouble128VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_FINITEMaskedDouble128VectorTests(IntFunction<double[]> fa,\n@@ -2703,1 +2703,1 @@\n-    static void IS_NANMaskedDouble128VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NANMaskedDouble128VectorTests(IntFunction<double[]> fa,\n@@ -2745,1 +2745,1 @@\n-    static void IS_INFINITEMaskedDouble128VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_INFINITEMaskedDouble128VectorTests(IntFunction<double[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2580,1 +2580,1 @@\n-    static void IS_DEFAULTMaskedDouble256VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_DEFAULTMaskedDouble256VectorTests(IntFunction<double[]> fa,\n@@ -2620,1 +2620,1 @@\n-    static void IS_NEGATIVEMaskedDouble256VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NEGATIVEMaskedDouble256VectorTests(IntFunction<double[]> fa,\n@@ -2661,1 +2661,1 @@\n-    static void IS_FINITEMaskedDouble256VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_FINITEMaskedDouble256VectorTests(IntFunction<double[]> fa,\n@@ -2703,1 +2703,1 @@\n-    static void IS_NANMaskedDouble256VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NANMaskedDouble256VectorTests(IntFunction<double[]> fa,\n@@ -2745,1 +2745,1 @@\n-    static void IS_INFINITEMaskedDouble256VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_INFINITEMaskedDouble256VectorTests(IntFunction<double[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2580,1 +2580,1 @@\n-    static void IS_DEFAULTMaskedDouble512VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_DEFAULTMaskedDouble512VectorTests(IntFunction<double[]> fa,\n@@ -2620,1 +2620,1 @@\n-    static void IS_NEGATIVEMaskedDouble512VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NEGATIVEMaskedDouble512VectorTests(IntFunction<double[]> fa,\n@@ -2661,1 +2661,1 @@\n-    static void IS_FINITEMaskedDouble512VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_FINITEMaskedDouble512VectorTests(IntFunction<double[]> fa,\n@@ -2703,1 +2703,1 @@\n-    static void IS_NANMaskedDouble512VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NANMaskedDouble512VectorTests(IntFunction<double[]> fa,\n@@ -2745,1 +2745,1 @@\n-    static void IS_INFINITEMaskedDouble512VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_INFINITEMaskedDouble512VectorTests(IntFunction<double[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2580,1 +2580,1 @@\n-    static void IS_DEFAULTMaskedDouble64VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_DEFAULTMaskedDouble64VectorTests(IntFunction<double[]> fa,\n@@ -2620,1 +2620,1 @@\n-    static void IS_NEGATIVEMaskedDouble64VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NEGATIVEMaskedDouble64VectorTests(IntFunction<double[]> fa,\n@@ -2661,1 +2661,1 @@\n-    static void IS_FINITEMaskedDouble64VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_FINITEMaskedDouble64VectorTests(IntFunction<double[]> fa,\n@@ -2703,1 +2703,1 @@\n-    static void IS_NANMaskedDouble64VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NANMaskedDouble64VectorTests(IntFunction<double[]> fa,\n@@ -2745,1 +2745,1 @@\n-    static void IS_INFINITEMaskedDouble64VectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_INFINITEMaskedDouble64VectorTests(IntFunction<double[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2585,1 +2585,1 @@\n-    static void IS_DEFAULTMaskedDoubleMaxVectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_DEFAULTMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -2625,1 +2625,1 @@\n-    static void IS_NEGATIVEMaskedDoubleMaxVectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NEGATIVEMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -2666,1 +2666,1 @@\n-    static void IS_FINITEMaskedDoubleMaxVectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_FINITEMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -2708,1 +2708,1 @@\n-    static void IS_NANMaskedDoubleMaxVectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_NANMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -2750,1 +2750,1 @@\n-    static void IS_INFINITEMaskedDoubleMaxVectorTestsSmokeTest(IntFunction<double[]> fa,\n+    static void IS_INFINITEMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2590,1 +2590,1 @@\n-    static void IS_DEFAULTMaskedFloat128VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_DEFAULTMaskedFloat128VectorTests(IntFunction<float[]> fa,\n@@ -2630,1 +2630,1 @@\n-    static void IS_NEGATIVEMaskedFloat128VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NEGATIVEMaskedFloat128VectorTests(IntFunction<float[]> fa,\n@@ -2671,1 +2671,1 @@\n-    static void IS_FINITEMaskedFloat128VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_FINITEMaskedFloat128VectorTests(IntFunction<float[]> fa,\n@@ -2713,1 +2713,1 @@\n-    static void IS_NANMaskedFloat128VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NANMaskedFloat128VectorTests(IntFunction<float[]> fa,\n@@ -2755,1 +2755,1 @@\n-    static void IS_INFINITEMaskedFloat128VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_INFINITEMaskedFloat128VectorTests(IntFunction<float[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2590,1 +2590,1 @@\n-    static void IS_DEFAULTMaskedFloat256VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_DEFAULTMaskedFloat256VectorTests(IntFunction<float[]> fa,\n@@ -2630,1 +2630,1 @@\n-    static void IS_NEGATIVEMaskedFloat256VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NEGATIVEMaskedFloat256VectorTests(IntFunction<float[]> fa,\n@@ -2671,1 +2671,1 @@\n-    static void IS_FINITEMaskedFloat256VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_FINITEMaskedFloat256VectorTests(IntFunction<float[]> fa,\n@@ -2713,1 +2713,1 @@\n-    static void IS_NANMaskedFloat256VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NANMaskedFloat256VectorTests(IntFunction<float[]> fa,\n@@ -2755,1 +2755,1 @@\n-    static void IS_INFINITEMaskedFloat256VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_INFINITEMaskedFloat256VectorTests(IntFunction<float[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2590,1 +2590,1 @@\n-    static void IS_DEFAULTMaskedFloat512VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_DEFAULTMaskedFloat512VectorTests(IntFunction<float[]> fa,\n@@ -2630,1 +2630,1 @@\n-    static void IS_NEGATIVEMaskedFloat512VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NEGATIVEMaskedFloat512VectorTests(IntFunction<float[]> fa,\n@@ -2671,1 +2671,1 @@\n-    static void IS_FINITEMaskedFloat512VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_FINITEMaskedFloat512VectorTests(IntFunction<float[]> fa,\n@@ -2713,1 +2713,1 @@\n-    static void IS_NANMaskedFloat512VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NANMaskedFloat512VectorTests(IntFunction<float[]> fa,\n@@ -2755,1 +2755,1 @@\n-    static void IS_INFINITEMaskedFloat512VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_INFINITEMaskedFloat512VectorTests(IntFunction<float[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2590,1 +2590,1 @@\n-    static void IS_DEFAULTMaskedFloat64VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_DEFAULTMaskedFloat64VectorTests(IntFunction<float[]> fa,\n@@ -2630,1 +2630,1 @@\n-    static void IS_NEGATIVEMaskedFloat64VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NEGATIVEMaskedFloat64VectorTests(IntFunction<float[]> fa,\n@@ -2671,1 +2671,1 @@\n-    static void IS_FINITEMaskedFloat64VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_FINITEMaskedFloat64VectorTests(IntFunction<float[]> fa,\n@@ -2713,1 +2713,1 @@\n-    static void IS_NANMaskedFloat64VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NANMaskedFloat64VectorTests(IntFunction<float[]> fa,\n@@ -2755,1 +2755,1 @@\n-    static void IS_INFINITEMaskedFloat64VectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_INFINITEMaskedFloat64VectorTests(IntFunction<float[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2595,1 +2595,1 @@\n-    static void IS_DEFAULTMaskedFloatMaxVectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_DEFAULTMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -2635,1 +2635,1 @@\n-    static void IS_NEGATIVEMaskedFloatMaxVectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NEGATIVEMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -2676,1 +2676,1 @@\n-    static void IS_FINITEMaskedFloatMaxVectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_FINITEMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -2718,1 +2718,1 @@\n-    static void IS_NANMaskedFloatMaxVectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_NANMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -2760,1 +2760,1 @@\n-    static void IS_INFINITEMaskedFloatMaxVectorTestsSmokeTest(IntFunction<float[]> fa,\n+    static void IS_INFINITEMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3532,1 +3532,1 @@\n-    static void IS_DEFAULTMaskedInt128VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_DEFAULTMaskedInt128VectorTests(IntFunction<int[]> fa,\n@@ -3572,1 +3572,1 @@\n-    static void IS_NEGATIVEMaskedInt128VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_NEGATIVEMaskedInt128VectorTests(IntFunction<int[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3532,1 +3532,1 @@\n-    static void IS_DEFAULTMaskedInt256VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_DEFAULTMaskedInt256VectorTests(IntFunction<int[]> fa,\n@@ -3572,1 +3572,1 @@\n-    static void IS_NEGATIVEMaskedInt256VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_NEGATIVEMaskedInt256VectorTests(IntFunction<int[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3532,1 +3532,1 @@\n-    static void IS_DEFAULTMaskedInt512VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_DEFAULTMaskedInt512VectorTests(IntFunction<int[]> fa,\n@@ -3572,1 +3572,1 @@\n-    static void IS_NEGATIVEMaskedInt512VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_NEGATIVEMaskedInt512VectorTests(IntFunction<int[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3532,1 +3532,1 @@\n-    static void IS_DEFAULTMaskedInt64VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_DEFAULTMaskedInt64VectorTests(IntFunction<int[]> fa,\n@@ -3572,1 +3572,1 @@\n-    static void IS_NEGATIVEMaskedInt64VectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_NEGATIVEMaskedInt64VectorTests(IntFunction<int[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3537,1 +3537,1 @@\n-    static void IS_DEFAULTMaskedIntMaxVectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_DEFAULTMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n@@ -3577,1 +3577,1 @@\n-    static void IS_NEGATIVEMaskedIntMaxVectorTestsSmokeTest(IntFunction<int[]> fa,\n+    static void IS_NEGATIVEMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3554,1 +3554,1 @@\n-    static void IS_DEFAULTMaskedLong128VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_DEFAULTMaskedLong128VectorTests(IntFunction<long[]> fa,\n@@ -3594,1 +3594,1 @@\n-    static void IS_NEGATIVEMaskedLong128VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_NEGATIVEMaskedLong128VectorTests(IntFunction<long[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3554,1 +3554,1 @@\n-    static void IS_DEFAULTMaskedLong256VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_DEFAULTMaskedLong256VectorTests(IntFunction<long[]> fa,\n@@ -3594,1 +3594,1 @@\n-    static void IS_NEGATIVEMaskedLong256VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_NEGATIVEMaskedLong256VectorTests(IntFunction<long[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3554,1 +3554,1 @@\n-    static void IS_DEFAULTMaskedLong512VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_DEFAULTMaskedLong512VectorTests(IntFunction<long[]> fa,\n@@ -3594,1 +3594,1 @@\n-    static void IS_NEGATIVEMaskedLong512VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_NEGATIVEMaskedLong512VectorTests(IntFunction<long[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3554,1 +3554,1 @@\n-    static void IS_DEFAULTMaskedLong64VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_DEFAULTMaskedLong64VectorTests(IntFunction<long[]> fa,\n@@ -3594,1 +3594,1 @@\n-    static void IS_NEGATIVEMaskedLong64VectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_NEGATIVEMaskedLong64VectorTests(IntFunction<long[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3559,1 +3559,1 @@\n-    static void IS_DEFAULTMaskedLongMaxVectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_DEFAULTMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n@@ -3599,1 +3599,1 @@\n-    static void IS_NEGATIVEMaskedLongMaxVectorTestsSmokeTest(IntFunction<long[]> fa,\n+    static void IS_NEGATIVEMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3557,1 +3557,1 @@\n-    static void IS_DEFAULTMaskedShort128VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_DEFAULTMaskedShort128VectorTests(IntFunction<short[]> fa,\n@@ -3597,1 +3597,1 @@\n-    static void IS_NEGATIVEMaskedShort128VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_NEGATIVEMaskedShort128VectorTests(IntFunction<short[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3557,1 +3557,1 @@\n-    static void IS_DEFAULTMaskedShort256VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_DEFAULTMaskedShort256VectorTests(IntFunction<short[]> fa,\n@@ -3597,1 +3597,1 @@\n-    static void IS_NEGATIVEMaskedShort256VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_NEGATIVEMaskedShort256VectorTests(IntFunction<short[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3557,1 +3557,1 @@\n-    static void IS_DEFAULTMaskedShort512VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_DEFAULTMaskedShort512VectorTests(IntFunction<short[]> fa,\n@@ -3597,1 +3597,1 @@\n-    static void IS_NEGATIVEMaskedShort512VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_NEGATIVEMaskedShort512VectorTests(IntFunction<short[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3557,1 +3557,1 @@\n-    static void IS_DEFAULTMaskedShort64VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_DEFAULTMaskedShort64VectorTests(IntFunction<short[]> fa,\n@@ -3597,1 +3597,1 @@\n-    static void IS_NEGATIVEMaskedShort64VectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_NEGATIVEMaskedShort64VectorTests(IntFunction<short[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3562,1 +3562,1 @@\n-    static void IS_DEFAULTMaskedShortMaxVectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_DEFAULTMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n@@ -3602,1 +3602,1 @@\n-    static void IS_NEGATIVEMaskedShortMaxVectorTestsSmokeTest(IntFunction<short[]> fa,\n+    static void IS_NEGATIVEMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-    static void [[TEST]]Masked$vectorteststype$SmokeTest(IntFunction<$type$[]> fa,\n+    static void [[TEST]]Masked$vectorteststype$(IntFunction<$type$[]> fa,\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Test.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}