{"files":[{"patch":"@@ -162,0 +162,25 @@\n+      \/\/ Vector API specific\n+      case Op_AndReductionV:\n+      case Op_OrReductionV:\n+      case Op_XorReductionV:\n+      case Op_MaxReductionV:\n+      case Op_MinReductionV:\n+      case Op_LoadVectorGather:\n+      case Op_StoreVectorScatter:\n+      case Op_VectorBlend:\n+      case Op_VectorCast:\n+      case Op_VectorCastB2X:\n+      case Op_VectorCastD2X:\n+      case Op_VectorCastF2X:\n+      case Op_VectorCastI2X:\n+      case Op_VectorCastL2X:\n+      case Op_VectorCastS2X:\n+      case Op_VectorInsert:\n+      case Op_VectorLoadConst:\n+      case Op_VectorLoadMask:\n+      case Op_VectorLoadShuffle:\n+      case Op_VectorMaskCmp:\n+      case Op_VectorRearrange:\n+      case Op_VectorReinterpret:\n+      case Op_VectorStoreMask:\n+      case Op_VectorTest:\n@@ -849,0 +874,41 @@\n+instruct reduce_addB(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD tmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            (n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_BYTE));\n+  match(Set dst (AddReductionVI src1 src2));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_uaddv $tmp, $src2\\t# vector (sve) (B)\\n\\t\"\n+            \"smov  $dst, $tmp, B, 0\\n\\t\"\n+            \"addw  $dst, $dst, $src1\\n\\t\"\n+            \"sxtb  $dst, $dst\\t # add reduction B\" %}\n+  ins_encode %{\n+    __ sve_uaddv(as_FloatRegister($tmp$$reg), __ B,\n+         ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($tmp$$reg), __ B, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    __ sxtb($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_addS(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD tmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            (n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_SHORT ||\n+            (n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_CHAR)));\n+  match(Set dst (AddReductionVI src1 src2));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_uaddv $tmp, $src2\\t# vector (sve) (H)\\n\\t\"\n+            \"smov  $dst, $tmp, H, 0\\n\\t\"\n+            \"addw  $dst, $dst, $src1\\n\\t\"\n+            \"sxth  $dst, $dst\\t # add reduction H\" %}\n+  ins_encode %{\n+    __ sve_uaddv(as_FloatRegister($tmp$$reg), __ H,\n+         ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($tmp$$reg), __ H, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    __ sxth($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -149,0 +149,25 @@\n+      \/\/ Vector API specific\n+      case Op_AndReductionV:\n+      case Op_OrReductionV:\n+      case Op_XorReductionV:\n+      case Op_MaxReductionV:\n+      case Op_MinReductionV:\n+      case Op_LoadVectorGather:\n+      case Op_StoreVectorScatter:\n+      case Op_VectorBlend:\n+      case Op_VectorCast:\n+      case Op_VectorCastB2X:\n+      case Op_VectorCastD2X:\n+      case Op_VectorCastF2X:\n+      case Op_VectorCastI2X:\n+      case Op_VectorCastL2X:\n+      case Op_VectorCastS2X:\n+      case Op_VectorInsert:\n+      case Op_VectorLoadConst:\n+      case Op_VectorLoadMask:\n+      case Op_VectorLoadShuffle:\n+      case Op_VectorMaskCmp:\n+      case Op_VectorRearrange:\n+      case Op_VectorReinterpret:\n+      case Op_VectorStoreMask:\n+      case Op_VectorTest:\n@@ -510,1 +535,1 @@\n-%}\n+%}dnl\n@@ -512,0 +537,23 @@\n+dnl\n+dnl REDUCE_ADD_EXT($1,        $2,      $3,      $4,      $5,   $6,        $7   )\n+dnl REDUCE_ADD_EXT(insn_name, op_name, reg_dst, reg_src, size, elem_type, insn1)\n+define(`REDUCE_ADD_EXT', `\n+instruct $1($3 dst, $4 src1, vReg src2, vRegD tmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            ELEMENT_SHORT_CHAR($6, n->in(2)));\n+  match(Set dst ($2 src1 src2));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_uaddv $tmp, $src2\\t# vector (sve) ($5)\\n\\t\"\n+            \"smov  $dst, $tmp, $5, 0\\n\\t\"\n+            \"addw  $dst, $dst, $src1\\n\\t\"\n+            \"$7  $dst, $dst\\t # add reduction $5\" %}\n+  ins_encode %{\n+    __ sve_uaddv(as_FloatRegister($tmp$$reg), __ $5,\n+         ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($tmp$$reg), __ $5, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    __ $7($dst$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n@@ -548,1 +596,1 @@\n-dnl\n+\n@@ -550,0 +598,2 @@\n+REDUCE_ADD_EXT(reduce_addB, AddReductionVI, iRegINoSp, iRegIorL2I, B, T_BYTE,  sxtb)\n+REDUCE_ADD_EXT(reduce_addS, AddReductionVI, iRegINoSp, iRegIorL2I, H, T_SHORT, sxth)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -895,3 +895,3 @@\n-    } else if ( t->base() == Type::VectorS || t->base() == Type::VectorD ||\n-                t->base() == Type::VectorX || t->base() == Type::VectorY ||\n-                t->base() == Type::VectorZ) {\n+    } else if (t->base() == Type::VectorA || t->base() == Type::VectorS ||\n+               t->base() == Type::VectorD || t->base() == Type::VectorX ||\n+               t->base() == Type::VectorY || t->base() == Type::VectorZ) {\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -600,1 +600,2 @@\n-    if (!arch_supports_vector(is_store ? Op_StoreVector : Op_LoadVector, byte_num_elem, T_BYTE, VecMaskNotUsed)) {\n+    if (!arch_supports_vector(is_store ? Op_StoreVector : Op_LoadVector, byte_num_elem, T_BYTE, VecMaskNotUsed)\n+        || !arch_supports_vector(Op_VectorReinterpret, byte_num_elem, T_BYTE, VecMaskNotUsed)) {\n@@ -623,3 +624,3 @@\n-         if (!arch_supports_vector(Op_StoreVector, num_elem, elem_bt, VecMaskUseStore)) {\n-           return false; \/\/ not supported\n-         }\n+      if (!arch_supports_vector(Op_StoreVector, num_elem, elem_bt, VecMaskUseStore)) {\n+        return false; \/\/ not supported\n+      }\n@@ -663,3 +664,3 @@\n-          vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, num_elem, T_BOOLEAN));\n-          const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem);\n-          vload = gvn().transform(new VectorLoadMaskNode(vload, to_vect_type));\n+        vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, num_elem, T_BOOLEAN));\n+        const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem);\n+        vload = gvn().transform(new VectorLoadMaskNode(vload, to_vect_type));\n@@ -667,1 +668,1 @@\n-          vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, num_elem, elem_bt));\n+        vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, num_elem, elem_bt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}