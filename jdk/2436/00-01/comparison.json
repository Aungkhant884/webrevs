{"files":[{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef GTEST_CONCURRENT_TEST_RUNNER_INLINE_HPP\n-#define GTEST_CONCURRENT_TEST_RUNNER_INLINE_HPP\n-\n-#include \"threadHelper.inline.hpp\"\n-\n-\/\/ This file contains helper classes to run unit tests concurrently in multiple threads.\n-\n-\/\/ Base class for test runnable. Override runUnitTest() to specify what to run.\n-class TestRunnable {\n-public:\n-  virtual void runUnitTest() {\n-  };\n-};\n-\n-\/\/ This class represents a thread for a unit test.\n-class UnitTestThread : public JavaTestThread {\n-public:\n-  \/\/ runnableArg - what to run\n-  \/\/ doneArg - a semaphore to notify when the thread is done running\n-  \/\/ testDurationArg - how long to run (in milliseconds)\n-  UnitTestThread(TestRunnable* runnableArg, Semaphore* doneArg, long testDurationArg) : JavaTestThread(doneArg) {\n-    runnable = runnableArg;\n-    testDuration = testDurationArg;\n-  }\n-\n-  virtual ~UnitTestThread() {}\n-\n-  \/\/ from JavaTestThread\n-  void main_run() {\n-    long stopTime = os::javaTimeMillis() + testDuration;\n-    while (os::javaTimeMillis() < stopTime) {\n-      runnable->runUnitTest();\n-    }\n-  }\n-private:\n-  long testDuration;\n-  TestRunnable* runnable;\n-};\n-\n-\/\/ Helper class for running a given unit test concurrently in multiple threads.\n-class ConcurrentTestRunner {\n-public:\n-  \/\/ runnableArg - what to run\n-  \/\/ nrOfThreadsArg - how many threads to use concurrently\n-  \/\/ testDurationMillisArg - duration for each test run\n-  ConcurrentTestRunner(TestRunnable* runnableArg, int nrOfThreadsArg, long testDurationMillisArg) {\n-    unitTestRunnable = runnableArg;\n-    nrOfThreads = nrOfThreadsArg;\n-    testDurationMillis = testDurationMillisArg;\n-  }\n-\n-  virtual ~ConcurrentTestRunner() {}\n-\n-  void run() {\n-    Semaphore done(0);\n-\n-    std::vector<UnitTestThread*> t;\n-    for (int i = 0; i < nrOfThreads; i++) {\n-      t.push_back(new UnitTestThread(unitTestRunnable, &done, testDurationMillis));\n-    }\n-\n-    for (int i = 0; i < nrOfThreads; i++) {\n-      t[i]->doit();\n-    }\n-\n-    for (int i = 0; i < nrOfThreads; i++) {\n-      done.wait();\n-    }\n-  }\n-\n-private:\n-  long testDurationMillis;\n-  int nrOfThreads;\n-  TestRunnable* unitTestRunnable;\n-};\n-\n-#endif \/\/ include guard\n","filename":"test\/hotspot\/gtest\/concurrentTestRunner.inline.hpp","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef GTEST_CONCURRENT_TEST_RUNNER_INLINE_HPP\n+#define GTEST_CONCURRENT_TEST_RUNNER_INLINE_HPP\n+\n+#include \"threadHelper.inline.hpp\"\n+\n+\/\/ This file contains helper classes to run unit tests concurrently in multiple threads.\n+\n+\/\/ Base class for test runnable. Override runUnitTest() to specify what to run.\n+class TestRunnable {\n+public:\n+  virtual void runUnitTest() const = 0;\n+};\n+\n+\/\/ This class represents a thread for a unit test.\n+class UnitTestThread : public JavaTestThread {\n+public:\n+  \/\/ runnableArg - what to run\n+  \/\/ doneArg - a semaphore to notify when the thread is done running\n+  \/\/ testDurationArg - how long to run (in milliseconds)\n+  UnitTestThread(const TestRunnable* runnableArg, Semaphore* doneArg, const long testDurationArg) :\n+    JavaTestThread(doneArg), runnable(runnableArg), testDuration(testDurationArg) {}\n+\n+  virtual ~UnitTestThread() {}\n+\n+  \/\/ from JavaTestThread\n+  void main_run() {\n+    long stopTime = os::javaTimeMillis() + testDuration;\n+    while (os::javaTimeMillis() < stopTime) {\n+      runnable->runUnitTest();\n+    }\n+  }\n+private:\n+  const TestRunnable* runnable;\n+  const long testDuration;\n+};\n+\n+\/\/ Helper class for running a given unit test concurrently in multiple threads.\n+class ConcurrentTestRunner {\n+public:\n+  \/\/ runnableArg - what to run\n+  \/\/ nrOfThreadsArg - how many threads to use concurrently\n+  \/\/ testDurationMillisArg - duration for each test run\n+  ConcurrentTestRunner(const TestRunnable* runnableArg, int nrOfThreadsArg, long testDurationMillisArg) :\n+    unitTestRunnable(runnableArg),\n+    nrOfThreads{nrOfThreadsArg},\n+    testDurationMillis{testDurationMillisArg} {}\n+\n+  virtual ~ConcurrentTestRunner() {}\n+\n+  void run() {\n+    Semaphore done(0);\n+\n+    std::vector<UnitTestThread*> t;\n+    for (int i = 0; i < nrOfThreads; i++) {\n+      t.push_back(new UnitTestThread(unitTestRunnable, &done, testDurationMillis));\n+    }\n+\n+    for (int i = 0; i < nrOfThreads; i++) {\n+      t[i]->doit();\n+    }\n+\n+    for (int i = 0; i < nrOfThreads; i++) {\n+      done.wait();\n+    }\n+  }\n+\n+private:\n+  const TestRunnable* unitTestRunnable;\n+  const int nrOfThreads;\n+  const long testDurationMillis;\n+};\n+\n+#endif \/\/ include guard\n","filename":"test\/hotspot\/gtest\/concurrent_test_runner.inline.hpp","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"concurrentTestRunner.inline.hpp\"\n+#include \"concurrent_test_runner.inline.hpp\"\n@@ -658,1 +658,1 @@\n-  void runUnitTest() {\n+  void runUnitTest() const {\n@@ -670,1 +670,1 @@\n-  void runUnitTest() {\n+  void runUnitTest() const {\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"concurrentTestRunner.inline.hpp\"\n+#include \"concurrent_test_runner.inline.hpp\"\n@@ -411,1 +411,1 @@\n-  void runUnitTest() {\n+  void runUnitTest() const {\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"concurrentTestRunner.inline.hpp\"\n+#include \"concurrent_test_runner.inline.hpp\"\n@@ -698,1 +698,1 @@\n-  void runUnitTest() {\n+  void runUnitTest() const {\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}