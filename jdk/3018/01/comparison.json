{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -312,1 +312,1 @@\n-        paramGenSpi.engineInit(size, JCAUtil.getSecureRandom());\n+        paramGenSpi.engineInit(size, JCAUtil.getDefSecureRandom());\n@@ -343,1 +343,1 @@\n-            paramGenSpi.engineInit(genParamSpec, JCAUtil.getSecureRandom());\n+            paramGenSpi.engineInit(genParamSpec, JCAUtil.getDefSecureRandom());\n","filename":"src\/java.base\/share\/classes\/java\/security\/AlgorithmParameterGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -376,1 +376,1 @@\n-        initialize(keysize, JCAUtil.getSecureRandom());\n+        initialize(keysize, JCAUtil.getDefSecureRandom());\n@@ -436,1 +436,1 @@\n-        initialize(params, JCAUtil.getSecureRandom());\n+        initialize(params, JCAUtil.getDefSecureRandom());\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPairGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1236,1 +1236,1 @@\n-        init(opmode, key, JCAUtil.getSecureRandom());\n+        init(opmode, key, JCAUtil.getDefSecureRandom());\n@@ -1375,1 +1375,1 @@\n-        init(opmode, key, params, JCAUtil.getSecureRandom());\n+        init(opmode, key, params, JCAUtil.getDefSecureRandom());\n@@ -1516,1 +1516,1 @@\n-        init(opmode, key, params, JCAUtil.getSecureRandom());\n+        init(opmode, key, params, JCAUtil.getDefSecureRandom());\n@@ -1662,1 +1662,1 @@\n-        init(opmode, certificate, JCAUtil.getSecureRandom());\n+        init(opmode, certificate, JCAUtil.getDefSecureRandom());\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-        init(key, JCAUtil.getSecureRandom());\n+        init(key, JCAUtil.getDefSecureRandom());\n@@ -519,1 +519,1 @@\n-        init(key, params, JCAUtil.getSecureRandom());\n+        init(key, params, JCAUtil.getDefSecureRandom());\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -452,1 +452,1 @@\n-        init(params, JCAUtil.getSecureRandom());\n+        init(params, JCAUtil.getDefSecureRandom());\n@@ -516,1 +516,1 @@\n-        init(keysize, JCAUtil.getSecureRandom());\n+        init(keysize, JCAUtil.getDefSecureRandom());\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-\n+import java.util.Arrays;\n@@ -62,0 +62,2 @@\n+    private static volatile SecureRandom def = null;\n+\n@@ -72,0 +74,21 @@\n+    \/\/ called by sun.security.jca.Providers class when provider list is changed\n+    static void clearDefSecureRandom() {\n+        def = null;\n+    }\n+\n+    \/**\n+     * Get the default SecureRandom instance. This method is the\n+     * optimized version of \"new SecureRandom()\" which re-uses the default\n+     * SecureRandom impl if the provider table is the same.\n+     *\/\n+    public static SecureRandom getDefSecureRandom() {\n+        if (def == null) {\n+            synchronized (JCAUtil.class) {\n+                if (def == null) {\n+                    def = new SecureRandom();\n+                }\n+            }\n+        }\n+        return def;\n+\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/JCAUtil.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,0 +153,1 @@\n+        JCAUtil.clearDefSecureRandom();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/Providers.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8260274\n+ * @run main\/othervm TestDefaultRandom APG 1\n+ * @run main\/othervm TestDefaultRandom APG 2\n+ * @run main\/othervm TestDefaultRandom KPG 1\n+ * @run main\/othervm TestDefaultRandom KPG 2\n+ * @run main\/othervm TestDefaultRandom CIP 1\n+ * @run main\/othervm TestDefaultRandom CIP 2\n+ * @run main\/othervm TestDefaultRandom CIP 3\n+ * @run main\/othervm TestDefaultRandom CIP 4\n+ * @run main\/othervm TestDefaultRandom KA 1\n+ * @run main\/othervm TestDefaultRandom KA 2\n+ * @run main\/othervm TestDefaultRandom KG 1\n+ * @run main\/othervm TestDefaultRandom KG 2\n+ * @summary Ensure the default SecureRandom impl is used as the javadoc\n+ * spec stated when none supplied.\n+ *\/\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.List;\n+import java.util.Map;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.DSAGenParameterSpec;\n+import java.security.spec.RSAKeyGenParameterSpec;\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+public class TestDefaultRandom {\n+\n+    public static void main(String[] argv) throws Exception {\n+        if (argv.length != 2) {\n+            throw new RuntimeException(\"Error: missing test parameters\");\n+        }\n+\n+        switch (argv[0]) {\n+            case \"APG\" ->\n+                check(AlgorithmParameterGenerator.getInstance(\"DSA\"), argv[1]);\n+            case \"KPG\" ->\n+                check(KeyPairGenerator.getInstance(\"RSA\"), argv[1]);\n+            case \"CIP\" ->\n+                check(Cipher.getInstance(\"AES\/CBC\/NoPadding\"), argv[1]);\n+            case \"KA\" -> check(KeyAgreement.getInstance(\"DH\"), argv[1]);\n+            case \"KG\" -> check(KeyGenerator.getInstance(\"AES\"), argv[1]);\n+            default -> throw new RuntimeException\n+                    (\"Error: unsupported test type\");\n+        }\n+    }\n+\n+    private static void check(Object obj, String testNum) {\n+        if (obj == null) throw new NullPointerException();\n+\n+        SampleProvider prov = new SampleProvider();\n+        Security.insertProviderAt(prov, 1);\n+\n+        int b4Cnt = SampleProvider.count;\n+\n+        System.out.println(\"before, count = \" + b4Cnt);\n+        \/\/ Note that the arguments may not be valid, they just need to be\n+        \/\/ non-null to trigger the call for checking if the default\n+        \/\/ SecureRandom impl is used\n+        try {\n+            if (obj instanceof AlgorithmParameterGenerator) {\n+                AlgorithmParameterGenerator apg =\n+                        (AlgorithmParameterGenerator) obj;\n+                switch (testNum) {\n+                    case \"1\" -> apg.init(123);\n+                    case \"2\" -> apg.init((AlgorithmParameterSpec) null);\n+                    default -> throw new RuntimeException\n+                            (\"Error: invalid test#\");\n+                }\n+            } else if (obj instanceof KeyPairGenerator) {\n+                KeyPairGenerator kpg = (KeyPairGenerator) obj;\n+                switch (testNum) {\n+                    case \"1\" -> kpg.initialize(123);\n+                    case \"2\" -> kpg.initialize((AlgorithmParameterSpec) null);\n+                    default -> throw new RuntimeException\n+                            (\"Error: invalid test#\");\n+                }\n+            } else if (obj instanceof Cipher) {\n+                Cipher c = (Cipher) obj;\n+                switch (testNum) {\n+                    case \"1\" -> c.init(Cipher.ENCRYPT_MODE, (Key) null);\n+                    case \"2\" -> c.init(Cipher.ENCRYPT_MODE, (Key) null,\n+                        (AlgorithmParameterSpec) null);\n+                    case \"3\" -> c.init(Cipher.ENCRYPT_MODE, (Key) null,\n+                        (AlgorithmParameters) null);\n+                    case \"4\" -> c.init(Cipher.ENCRYPT_MODE, (Certificate)null);\n+                    default -> throw new RuntimeException\n+                            (\"Error: invalid test#\");\n+                }\n+            } else if (obj instanceof KeyAgreement) {\n+                KeyAgreement ka = (KeyAgreement) obj;\n+                switch (testNum) {\n+                    case \"1\" -> ka.init((Key) null);\n+                    case \"2\" -> ka.init((Key) null, (AlgorithmParameterSpec)\n+                            null);\n+                    default -> throw new RuntimeException\n+                            (\"Error: invalid test#\");\n+                }\n+            } else if (obj instanceof KeyGenerator) {\n+                KeyGenerator kg = (KeyGenerator) obj;\n+                switch (testNum) {\n+                    case \"1\" -> kg.init(123);\n+                    case \"2\" -> kg.init((AlgorithmParameterSpec) null);\n+                    default -> throw new RuntimeException\n+                            (\"Error: invalid test#\");\n+                }\n+            } else {\n+                throw new RuntimeException(\"Error: Unsupported type\");\n+            }\n+        } catch (GeneralSecurityException | InvalidParameterException e) {\n+            \/\/ expected; ignore\n+        }\n+        System.out.println(\"after, count = \" + SampleProvider.count);\n+        if (SampleProvider.count == b4Cnt) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+\n+    private static class SampleProvider extends Provider {\n+\n+        static int count = 0;\n+        static String SR_ALGO = \"Custom\";\n+\n+        SampleProvider() {\n+            super(\"Sample\", \"1.0\", \"test provider with custom SR impl\");\n+            putService(new SampleService(this, \"SecureRandom\", SR_ALGO,\n+                    \"SampleSecureRandom.class\" \/* stub class name *\/,\n+                    null, null));\n+        }\n+\n+        private static class SampleService extends Service {\n+\n+            SampleService(Provider p, String type, String alg, String cn,\n+                    List<String> aliases, Map<String,String> attrs) {\n+                super(p, type, alg, cn, aliases, attrs);\n+            }\n+\n+            @Override\n+            public Object newInstance(Object param)\n+                    throws NoSuchAlgorithmException {\n+                String alg = getAlgorithm();\n+                String type = getType();\n+\n+                if (type.equals(\"SecureRandom\") && alg.equals(SR_ALGO)) {\n+                    SampleProvider.count++;\n+                    return new CustomSR();\n+                } else {\n+                    \/\/ should never happen\n+                    throw new NoSuchAlgorithmException(\"No support for \" + alg);\n+                }\n+            }\n+        }\n+\n+        private static class CustomSR extends SecureRandomSpi {\n+            @Override\n+            protected void engineSetSeed(byte[] seed) {\n+            }\n+\n+            @Override\n+            protected void engineNextBytes(byte[] bytes) {\n+            }\n+\n+            @Override\n+            protected byte[] engineGenerateSeed(int numBytes) {\n+                return new byte[numBytes];\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/misc\/TestDefaultRandom.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"}]}