{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1996,2 +1996,8 @@\n-                                if (i >= 0xffff) {\n-                                    panic(FAULT);\n+                                \/\/          Restore the buffer offset\n+                                mBuffIdx = idx - 1;\n+                                for(char character : Character.toChars(i)) {\n+                                    if (character == ' ' || mInp.next != null) {\n+                                        bappend(character, flag);\n+                                    } else {\n+                                        bappend(character);\n+                                    }\n@@ -1999,1 +2005,0 @@\n-                                ch = (char) i;\n@@ -2003,7 +2008,0 @@\n-                            \/\/          Restore the buffer offset\n-                            mBuffIdx = idx - 1;\n-                            if (ch == ' ' || mInp.next != null) {\n-                                bappend(ch, flag);\n-                            } else {\n-                                bappend(ch);\n-                            }\n@@ -2037,2 +2035,8 @@\n-                                if (i >= 0xffff) {\n-                                    panic(FAULT);\n+                                \/\/          Restore the buffer offset\n+                                mBuffIdx = idx - 1;\n+                                for(char character : Character.toChars(i)) {\n+                                    if (character == ' ' || mInp.next != null) {\n+                                        bappend(character, flag);\n+                                    } else {\n+                                        bappend(character);\n+                                    }\n@@ -2040,1 +2044,0 @@\n-                                ch = (char) i;\n@@ -2044,7 +2047,0 @@\n-                            \/\/          Restore the buffer offset\n-                            mBuffIdx = idx - 1;\n-                            if (ch == ' ' || mInp.next != null) {\n-                                bappend(ch, flag);\n-                            } else {\n-                                bappend(ch);\n-                            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/impl\/Parser.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -363,0 +363,9 @@\n+    \/**\n+     * Writes character reference in hex format.\n+     *\/\n+    private void writeCharRef(int codePoint) throws XMLStreamException {\n+        _writer.write(ENCODING_PREFIX);\n+        _writer.write(Integer.toHexString(codePoint));\n+        _writer.write(SEMICOLON);\n+    }\n+\n@@ -386,4 +395,9 @@\n-                \/\/ Escape this char as underlying encoder cannot handle it\n-                _writer.write(ENCODING_PREFIX);\n-                _writer.write(Integer.toHexString(ch));\n-                _writer.write(SEMICOLON);\n+                \/\/ Check if current and next characters forms a surrogate pair\n+                \/\/ and escape it to avoid generation of invalid xml content\n+                if ( index != end - 1 && Character.isSurrogatePair(ch, content[index+1])) {\n+                    writeCharRef(Character.toCodePoint(ch, content[index+1]));\n+                    index++;\n+                } else {\n+                    writeCharRef(ch);\n+                }\n+\n@@ -458,4 +472,9 @@\n-                \/\/ Escape this char as underlying encoder cannot handle it\n-                _writer.write(ENCODING_PREFIX);\n-                _writer.write(Integer.toHexString(ch));\n-                _writer.write(SEMICOLON);\n+                \/\/ Check if current and next characters forms a surrogate pair\n+                \/\/ and escape it to avoid generation of invalid xml content\n+                if ( index != end - 1 && Character.isSurrogatePair(ch, content.charAt(index+1))) {\n+                    writeCharRef(Character.toCodePoint(ch, content.charAt(index+1)));\n+                    index++;\n+                } else {\n+                    writeCharRef(ch);\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/xml\/impl\/XMLStreamWriterImpl.java","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8000354 8000685 8004371 8043119\n+ * @bug 8000354 8000685 8004371 8043119 8276207\n@@ -141,0 +141,1 @@\n+        props.put(\"k6\", \"\\uD834\\uDD1E\");\n@@ -246,0 +247,25 @@\n+    \/**\n+     * Test loadFromXML with supplementary characters\n+     *\/\n+    static void testLoadWithSupplementaryCharacters() throws IOException {\n+        System.out.println(\"testLoadWithSupplementaryCharacters\");\n+\n+        Properties expected = new Properties();\n+        expected.put(\"\\uD834\\uDD1E\", \"\\uD834\\uDD1E\");\n+\n+        String s = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +\n+                   \"<!DOCTYPE properties SYSTEM \\\"http:\/\/java.sun.com\/dtd\/properties.dtd\\\">\" +\n+                   \"<properties>\" +\n+                   \"<entry key=\\\"&#119070;\\\">&#x1d11e;<\/entry>\" +\n+                   \"<\/properties>\";\n+\n+        ByteArrayInputStream in = new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n+        Properties props = new Properties();\n+        props.loadFromXML(in);\n+\n+        if (!props.equals(expected)) {\n+            System.err.println(\"loaded: \" + props + \", expected: \" + expected);\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+\n@@ -257,0 +283,1 @@\n+        testLoadWithSupplementaryCharacters();\n","filename":"test\/jdk\/java\/util\/Properties\/LoadAndStoreXML.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"}]}