{"files":[{"patch":"@@ -952,1 +952,1 @@\n-  product(bool, EnableThreadSMRExtraValidityChecks, true, DIAGNOSTIC,       \\\n+  product(bool, EnableThreadSMRExtraValidityChecks, trueInDebug, DIAGNOSTIC, \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -827,1 +827,1 @@\n-    \/\/ jthread is not for the current JavaThread so have to verify\n+    \/\/ jthread is not for the current JavaThread so we could verify\n@@ -829,3 +829,14 @@\n-    if (EnableThreadSMRExtraValidityChecks && !includes(java_thread)) {\n-      \/\/ Not on the JavaThreads list so it is not alive.\n-      return false;\n+    if (EnableThreadSMRExtraValidityChecks) {\n+      \/\/ The java.lang.Thread's JavaThread* value is cleared by ensure_join()\n+      \/\/ in the middle of the JavaThread's exit() call. The JavaThread removes\n+      \/\/ itself from the ThreadsList at the end of the JavaThread's exit()\n+      \/\/ call. Since we have a non-nullptr java_thread value here, we know\n+      \/\/ that this ThreadsListHandle is protecting the JavaThread so this\n+      \/\/ is optional verification against future changes.\n+      bool is_on_list = includes(java_thread);\n+      assert(is_on_list, \"java_thread=\" INTPTR_FORMAT \" is not on ThreadsList(\"\n+             INTPTR_FORMAT \")\", p2i(java_thread), p2i(this->list()));\n+      \/\/ Robustness check for non-ASSERT bits:\n+      if (!is_on_list) {\n+        return false;\n+      }\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}