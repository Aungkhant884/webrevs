{"files":[{"patch":"@@ -177,1 +177,1 @@\n-                    Status.CLOSED, getHandshakeStatus(), 0, 0);\n+                    Status.CLOSED, conContext.getHandshakeStatus(), 0, 0);\n@@ -187,1 +187,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n@@ -205,1 +205,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n@@ -229,1 +229,1 @@\n-                Status.BUFFER_OVERFLOW, getHandshakeStatus(), 0, 0);\n+                Status.BUFFER_OVERFLOW, conContext.getHandshakeStatus(), 0, 0);\n@@ -269,1 +269,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n@@ -539,1 +539,1 @@\n-                    Status.CLOSED, getHandshakeStatus(), 0, 0);\n+                    Status.CLOSED, conContext.getHandshakeStatus(), 0, 0);\n@@ -552,1 +552,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n@@ -559,1 +559,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n@@ -589,1 +589,1 @@\n-                hsStatus = getHandshakeStatus();\n+                hsStatus = conContext.getHandshakeStatus();\n@@ -628,1 +628,1 @@\n-                    hsStatus = getHandshakeStatus();\n+                    hsStatus = conContext.getHandshakeStatus();\n@@ -715,1 +715,1 @@\n-            hsStatus = getHandshakeStatus();\n+            hsStatus = conContext.getHandshakeStatus();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineImpl.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                if (fragmenter != null && fragmenter.hasAlert()) {\n+                if (fragmenter != null && !fragmenter.isEmpty()) {\n@@ -177,0 +177,1 @@\n+\n@@ -536,6 +537,10 @@\n-            if (hsMemo != null) {\n-                return new Ciphertext(hsMemo.contentType,\n-                        hsMemo.handshakeType, recordSN);\n-            } else {\n-                if (isCloseWaiting &&\n-                        memo.contentType == ContentType.ALERT.id) {\n+            try {\n+                if (hsMemo != null) {\n+                    return new Ciphertext(hsMemo.contentType,\n+                            hsMemo.handshakeType, recordSN);\n+                } else {\n+                    return new Ciphertext(memo.contentType,\n+                            SSLHandshake.NOT_APPLICABLE.id, recordSN);\n+                }\n+            } finally {\n+                if (isCloseWaiting && isEmpty()) {\n@@ -544,3 +549,0 @@\n-\n-                return new Ciphertext(memo.contentType,\n-                        SSLHandshake.NOT_APPLICABLE.id, recordSN);\n@@ -553,10 +555,0 @@\n-\n-        boolean hasAlert() {\n-            for (RecordMemo memo : handshakeMemos) {\n-                if (memo.contentType == ContentType.ALERT.id) {\n-                    return true;\n-                }\n-            }\n-\n-            return false;\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1420,2 +1420,4 @@\n-            } catch (SSLException | InterruptedIOException | SocketException se) {\n-                \/\/ don't change exception in case of timeouts or interrupts or SocketException\n+            } catch (SSLException |\n+                    InterruptedIOException | SocketException se) {\n+                \/\/ Don't change exception in case of timeouts or interrupts\n+                \/\/ or SocketException.\n@@ -1477,2 +1479,4 @@\n-            } catch (SSLException | InterruptedIOException | SocketException se) {\n-                \/\/ don't change exception in case of timeouts or interrupts or SocketException.\n+            } catch (SSLException |\n+                    InterruptedIOException | SocketException se) {\n+                \/\/ Don't change exception in case of timeouts or interrupts\n+                \/\/ or SocketException.\n@@ -1486,1 +1490,2 @@\n-        \/\/ couldn't read, due to some kind of error\n+        \/\/ Couldn't read, due to some kind of error or inbound\n+        \/\/ has been closed.\n@@ -1689,1 +1694,1 @@\n-                conContext.fatal(alert, cause);\n+                throw conContext.fatal(alert, cause);\n@@ -1751,1 +1756,2 @@\n-                closeSocket(!conContext.isInputCloseNotified);\n+                closeSocket(conContext.isNegotiated &&\n+                        !conContext.isInputCloseNotified);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -587,1 +587,1 @@\n-    \/\/ Note; HandshakeStatus.FINISHED status is retrieved in other places.\n+    \/\/ Note: HandshakeStatus.FINISHED status is retrieved in other places.\n@@ -590,1 +590,1 @@\n-            \/\/ If no handshaking, special case to wrap alters or\n+            \/\/ If not handshaking, special case to wrap alerts or\n@@ -599,2 +599,1 @@\n-                if (sslContext.isDTLS() &&\n-                        !inputRecord.isEmpty()) {\n+                if (sslContext.isDTLS() && !inputRecord.isEmpty()) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}