{"files":[{"patch":"@@ -118,1 +118,1 @@\n-  if (!r->is_Region() || r->is_Loop() || phi->region() != r) {\n+  if (!r->is_Region() || r->is_Loop() || phi->region() != r || r->as_Region()->is_copy()) {\n@@ -128,16 +128,0 @@\n-  uint non_top_inputs = 0;\n-  for (uint i = 1; i < r->req(); i++) {\n-    Node* in = r->in(i);\n-    if (in != NULL && !in->is_top() && \/\/ Input is not top?\n-        !(in->in(0) != NULL && in->in(0)->req() == 1 && in->in(0)->is_top())) {\n-      \/\/ Also check the control input of the region's input to catch the rare case of a dying loop header region\n-      \/\/ (that is not yet a LoopNode before loop opts) whose last predicate If was already replaced by top but\n-      \/\/ not its IfProj. The projection with a top input is an input into the region.\n-      non_top_inputs++;\n-    }\n-  }\n-  if (non_top_inputs <= 1) {\n-    \/\/ Bail out as Region will be removed anyways.\n-    return NULL;\n-  }\n-\n@@ -271,1 +255,9 @@\n-  if((r->req() - req_c) == 1) {\n+  if ((r->req() - req_c) == 1) {\n+    return NULL;\n+  }\n+\n+  \/\/ At this point we know that we can apply the split if optimization. If the region is still on the worklist,\n+  \/\/ we should wait until it is processed. The region might be removed which makes this optimization redundant.\n+  \/\/ This also avoids the creation of dead data loops when rewiring data nodes below when a region is dying.\n+  if (igvn->_worklist.member(r)) {\n+    igvn->_worklist.push(iff); \/\/ retry split if later again\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"}]}