{"files":[{"patch":"@@ -40,0 +40,35 @@\n+    \/**\n+     * Attribute stability indicator\n+     *\/\n+    enum AttributeStability {\n+\n+        \/**\n+         * The attribute contains only pure data, such as timestamps, and can always be bulk-copied.\n+         *\/\n+        STATELESS,\n+\n+        \/**\n+         * The attribute contains only pure data and CP refs, so can be bulk-copied when CP sharing is in effect,\n+         * and need to be exploded and rewritten when CP sharing is not in effect.\n+         *\/\n+        CP_REFS,\n+\n+        \/**\n+         * The attribute may contain labels, so need to be exploded and rewritten when the Code array is perturbed.\n+         *\/\n+        LABELS,\n+\n+        \/**\n+         * The attribute may contain indexes into structured not managed by the library (type variable lists, etc)\n+         * and so we consult the {@link Classfile.AttributesProcessingOption} option to determine whether to preserve\n+         * or drop it during transformation.\n+         *\/\n+        UNSTABLE,\n+\n+        \/**\n+         * The attribute is completely unknown and so we consult the {@link Classfile.AttributesProcessingOption} option\n+         * to determine whether to preserve or drop it during transformation.\n+         *\/\n+        UNKNOWN\n+    }\n+\n@@ -78,0 +113,5 @@\n+\n+    \/**\n+     * {@return attribute stability indicator}\n+     *\/\n+    AttributeStability stability();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -218,0 +218,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -232,0 +237,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -254,0 +264,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -268,0 +283,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -283,0 +303,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -297,0 +322,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -311,0 +341,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -326,0 +361,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -340,0 +380,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -361,0 +406,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -380,0 +430,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -402,0 +457,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -424,0 +484,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -443,0 +508,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -448,36 +518,41 @@\n-        @Override\n-        public ModuleAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n-            return new BoundAttribute.BoundModuleAttribute(cf, this, p);\n-        }\n-\n-        @Override\n-        protected void writeBody(BufWriter buf, ModuleAttribute attr) {\n-            buf.writeIndex(attr.moduleName());\n-            buf.writeU2(attr.moduleFlagsMask());\n-            buf.writeIndexOrZero(attr.moduleVersion().orElse(null));\n-            buf.writeU2(attr.requires().size());\n-            for (ModuleRequireInfo require : attr.requires()) {\n-                buf.writeIndex(require.requires());\n-                buf.writeU2(require.requiresFlagsMask());\n-                buf.writeIndexOrZero(require.requiresVersion().orElse(null));\n-            }\n-            buf.writeU2(attr.exports().size());\n-            for (ModuleExportInfo export : attr.exports()) {\n-                buf.writeIndex(export.exportedPackage());\n-                buf.writeU2(export.exportsFlagsMask());\n-                buf.writeListIndices(export.exportsTo());\n-            }\n-            buf.writeU2(attr.opens().size());\n-            for (ModuleOpenInfo open : attr.opens()) {\n-                buf.writeIndex(open.openedPackage());\n-                buf.writeU2(open.opensFlagsMask());\n-                buf.writeListIndices(open.opensTo());\n-            }\n-            buf.writeListIndices(attr.uses());\n-            buf.writeU2(attr.provides().size());\n-            for (ModuleProvideInfo provide : attr.provides()) {\n-                buf.writeIndex(provide.provides());\n-                buf.writeListIndices(provide.providesWith());\n-            }\n-        }\n-    };\n+                @Override\n+                public ModuleAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n+                    return new BoundAttribute.BoundModuleAttribute(cf, this, p);\n+                }\n+\n+                @Override\n+                protected void writeBody(BufWriter buf, ModuleAttribute attr) {\n+                    buf.writeIndex(attr.moduleName());\n+                    buf.writeU2(attr.moduleFlagsMask());\n+                    buf.writeIndexOrZero(attr.moduleVersion().orElse(null));\n+                    buf.writeU2(attr.requires().size());\n+                    for (ModuleRequireInfo require : attr.requires()) {\n+                        buf.writeIndex(require.requires());\n+                        buf.writeU2(require.requiresFlagsMask());\n+                        buf.writeIndexOrZero(require.requiresVersion().orElse(null));\n+                    }\n+                    buf.writeU2(attr.exports().size());\n+                    for (ModuleExportInfo export : attr.exports()) {\n+                        buf.writeIndex(export.exportedPackage());\n+                        buf.writeU2(export.exportsFlagsMask());\n+                        buf.writeListIndices(export.exportsTo());\n+                    }\n+                    buf.writeU2(attr.opens().size());\n+                    for (ModuleOpenInfo open : attr.opens()) {\n+                        buf.writeIndex(open.openedPackage());\n+                        buf.writeU2(open.opensFlagsMask());\n+                        buf.writeListIndices(open.opensTo());\n+                    }\n+                    buf.writeListIndices(attr.uses());\n+                    buf.writeU2(attr.provides().size());\n+                    for (ModuleProvideInfo provide : attr.provides()) {\n+                        buf.writeIndex(provide.provides());\n+                        buf.writeListIndices(provide.providesWith());\n+                    }\n+                }\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -504,0 +579,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -518,0 +598,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -532,0 +617,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -546,0 +636,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -560,0 +655,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -574,0 +674,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -588,0 +693,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -602,0 +712,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -622,0 +737,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -636,1 +756,6 @@\n-    };\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -653,0 +778,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -667,0 +797,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.UNSTABLE;\n+                }\n@@ -672,4 +807,4 @@\n-        @Override\n-        public RuntimeVisibleAnnotationsAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n-            return new BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute(cf, pos);\n-        }\n+                @Override\n+                public RuntimeVisibleAnnotationsAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+                    return new BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute(cf, pos);\n+                }\n@@ -677,5 +812,10 @@\n-        @Override\n-        protected void writeBody(BufWriter buf, RuntimeVisibleAnnotationsAttribute attr) {\n-            buf.writeList(attr.annotations());\n-        }\n-    };\n+                @Override\n+                protected void writeBody(BufWriter buf, RuntimeVisibleAnnotationsAttribute attr) {\n+                    buf.writeList(attr.annotations());\n+                }\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -698,0 +838,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -712,0 +857,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.UNSTABLE;\n+                }\n@@ -726,0 +876,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -740,0 +895,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -754,0 +914,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -768,0 +933,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -782,0 +952,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -797,0 +972,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability stability() {\n+                    return AttributeStability.STATELESS;\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":226,"deletions":46,"binary":false,"changes":272,"status":"modified"},{"patch":"@@ -244,3 +244,5 @@\n-     * Option describing whether to process or discard unrecognized attributes.\n-     * Default is {@code PASS_UNKNOWN_ATTRIBUTES} to process unrecognized\n-     * attributes, and deliver as instances of {@link UnknownAttribute}.\n+     * Option describing whether to process or discard unrecognized or problematic\n+     * original attributes when a class, record component, field, method or code is\n+     * transformed in its exploded form.\n+     * Default is {@code PASS_ALL_ATTRIBUTES} to process all original attributes.\n+     * @see AttributeMapper.AttributeStability\n@@ -248,1 +250,1 @@\n-    enum UnknownAttributesOption implements Option {\n+    enum AttributesProcessingOption implements Option {\n@@ -250,2 +252,2 @@\n-        \/** Process unknown attributes *\/\n-        PASS_UNKNOWN_ATTRIBUTES,\n+        \/** Process all original attributes during transformation *\/\n+        PASS_ALL_ATTRIBUTES,\n@@ -253,2 +255,5 @@\n-        \/** Drop unknown attributes *\/\n-        DROP_UNKNOWN_ATTRIBUTES\n+        \/** Drop unknown attributes during transformation *\/\n+        DROP_UNKNOWN_ATTRIBUTES,\n+\n+        \/** Drop unknown and unstable original attributes during transformation *\/\n+        DROP_UNSTABLE_ATRIBUTES;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n-        attributes.withAttribute(a);\n+        if (Util.isAttributeAllowed(a, context.attributesProcessingOption())) {\n+            attributes.withAttribute(a);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annos);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annos);\n@@ -81,1 +81,1 @@\n-                yield new AnnotationImpl.OfArrayImpl(SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(values));\n+                yield new AnnotationImpl.OfArrayImpl(SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(values));\n@@ -96,1 +96,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annotations);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annotations);\n@@ -106,1 +106,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(pas);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(pas);\n@@ -159,1 +159,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annotationElements);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annotationElements);\n@@ -260,1 +260,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(entries);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(entries);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Collections;\n@@ -124,1 +125,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(entries);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(entries);\n@@ -130,1 +131,1 @@\n-        var filled = new Object[size];\n+        var filled = new ArrayList<Attribute<?>>(size);\n@@ -133,0 +134,1 @@\n+        var apo = ((ClassReaderImpl)reader).context().attributesProcessingOption();\n@@ -146,2 +148,2 @@\n-                filled[i] = mapper.readAttribute(enclosing, reader, p);\n-            } else if (((ClassReaderImpl)reader).context().unknownAttributesOption() == Classfile.UnknownAttributesOption.PASS_UNKNOWN_ATTRIBUTES) {\n+                filled.add((Attribute)mapper.readAttribute(enclosing, reader, p));\n+            } else {\n@@ -162,1 +164,4 @@\n-                        throw new UnsupportedOperationException(\"Write of unknown attribute \" + name() + \" not supported\");\n+                        buf.writeIndex(name);\n+                        var cont = attr.contents();\n+                        buf.writeInt(cont.length);\n+                        buf.writeBytes(cont);\n@@ -169,0 +174,5 @@\n+\n+                    @Override\n+                    public AttributeMapper.AttributeStability stability() {\n+                        return AttributeStability.UNKNOWN;\n+                    }\n@@ -170,1 +180,1 @@\n-                filled[i] = new BoundUnknownAttribute(reader, fakeMapper, p);\n+                filled.add(new BoundUnknownAttribute(reader, fakeMapper, p));\n@@ -174,1 +184,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(filled);\n+        return Collections.unmodifiableList(filled);\n@@ -182,29 +192,0 @@\n-\n-        @Override\n-        public void writeTo(DirectClassBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(DirectMethodBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(DirectFieldBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(BufWriter buf) {\n-            checkWriteSupported(buf::canWriteDirect);\n-            super.writeTo(buf);\n-        }\n-\n-        private void checkWriteSupported(Function<ConstantPool, Boolean> condition) {\n-            if (!condition.apply(classReader))\n-                throw new UnsupportedOperationException(\"Write of unknown attribute \" + attributeName() + \" not supported to alien constant pool\");\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":17,"deletions":36,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(arr);\n+            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(arr);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                            UnknownAttributesOption unknownAttributesOption,\n+                            AttributesProcessingOption attributesProcessingOption,\n@@ -58,1 +58,1 @@\n-            UnknownAttributesOption.PASS_UNKNOWN_ATTRIBUTES,\n+            AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n@@ -77,1 +77,1 @@\n-        var uao = unknownAttributesOption;\n+        var apo = attributesProcessingOption;\n@@ -89,1 +89,1 @@\n-                case UnknownAttributesOption oo -> uao = oo;\n+                case AttributesProcessingOption oo -> apo = oo;\n@@ -98,1 +98,1 @@\n-        return new ClassfileImpl(smo, deo, lno, uao, cpso, sjo, dco, dlo, chro, amo);\n+        return new ClassfileImpl(smo, deo, lno, apo, cpso, sjo, dco, dlo, chro, amo);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassfileImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.BitSet;\n@@ -32,1 +31,0 @@\n-import java.util.Iterator;\n@@ -41,1 +39,0 @@\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -46,0 +43,3 @@\n+import jdk.internal.classfile.Attribute;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.Classfile;\n@@ -57,0 +57,9 @@\n+    private static final int ATTRIBUTE_STABILITY_COUNT = AttributeMapper.AttributeStability.values().length;\n+\n+    public static boolean isAttributeAllowed(final Attribute<?> attr,\n+                                             final Classfile.AttributesProcessingOption processingOption) {\n+        return attr instanceof BoundAttribute\n+                ? ATTRIBUTE_STABILITY_COUNT - attr.attributeMapper().stability().ordinal() > processingOption.ordinal()\n+                : true;\n+    }\n+\n@@ -124,1 +133,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(result);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(result);\n@@ -132,1 +141,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(result);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(result);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Testing Classfile options on small Corpus.\n+ * @run junit\/othervm -Djunit.jupiter.execution.parallel.enabled=true OptionsTest\n+ *\/\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+import java.io.IOException;\n+import java.lang.constant.ClassDesc;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.AttributedElement;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassfileElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.CompoundElement;\n+import jdk.internal.classfile.CustomAttribute;\n+\n+\/**\n+ * OptionsTest\n+ *\/\n+@Execution(ExecutionMode.CONCURRENT)\n+class OptionsTest {\n+\n+    protected static final FileSystem JRT = FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n+\n+    static Path[] corpus() throws IOException, URISyntaxException {\n+        return Files.walk(JRT.getPath(\"modules\/java.base\/java\/util\"))\n+                .filter(p -> Files.isRegularFile(p) && p.toString().endsWith(\".class\"))\n+                .toArray(Path[]::new);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"corpus\")\n+    void testAttributesProcessingOptionOnTransform(Path path) throws Exception {\n+        testNoUnstable(path, Classfile.of().parse(\n+                Classfile.of(Classfile.AttributesProcessingOption.DROP_UNSTABLE_ATRIBUTES).transform(\n+                            Classfile.of().parse(path),\n+                            ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL))));\n+    }\n+\n+    static class StrangeAttribute extends CustomAttribute<StrangeAttribute> {\n+        public StrangeAttribute() {\n+            super(STRANGE_ATTRIBUTE_MAPPER);\n+        }\n+    }\n+\n+    static final AttributeMapper<StrangeAttribute> STRANGE_ATTRIBUTE_MAPPER = new AttributeMapper<>() {\n+\n+        @Override\n+        public String name() {\n+            return \"StrangeAttribute\";\n+        }\n+\n+        @Override\n+        public StrangeAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+            return new StrangeAttribute();\n+        }\n+\n+        @Override\n+        public void writeAttribute(BufWriter buf, StrangeAttribute attr) {\n+            buf.writeIndex(buf.constantPool().utf8Entry(name()));\n+            buf.writeInt(0);\n+        }\n+\n+        @Override\n+        public AttributeMapper.AttributeStability stability() {\n+            return AttributeMapper.AttributeStability.STATELESS;\n+        }\n+    };\n+\n+    @Test\n+    void testUnknownAttribute() throws Exception {\n+        var classBytes = Classfile.of(Classfile.AttributeMapperOption.of(e -> {\n+            return e.equalsString(STRANGE_ATTRIBUTE_MAPPER.name()) ? STRANGE_ATTRIBUTE_MAPPER : null;\n+        })).build(ClassDesc.of(\"StrangeClass\"), clb -> clb.with(new StrangeAttribute()));\n+\n+        \/\/test default\n+        assertFalse(Classfile.of().parse(classBytes).attributes().isEmpty());\n+\n+        \/\/test drop unknown at transform\n+        assertTrue(Classfile.of().parse(\n+                Classfile.of(Classfile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transform(\n+                        Classfile.of().parse(classBytes),\n+                        ClassTransform.ACCEPT_ALL)).attributes().isEmpty());\n+    }\n+\n+    void testNoUnstable(Path path, ClassfileElement e) {\n+        if (e instanceof AttributedElement ae) ae.attributes().forEach(a ->\n+                assertTrue(AttributeMapper.AttributeStability.UNSTABLE.ordinal() >= a.attributeMapper().stability().ordinal(),\n+                           () -> \"class \" + path + \" contains unexpected \" + a));\n+        if (e instanceof CompoundElement ce) ce.forEachElement(ee -> testNoUnstable(path, (ClassfileElement)ee));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/OptionsTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}