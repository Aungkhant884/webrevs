{"files":[{"patch":"@@ -75,0 +75,1 @@\n+ * @param <A> attribute type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @param <A> attribute type\n@@ -39,0 +40,34 @@\n+    \/**\n+     * Attribute stability indicator\n+     *\/\n+    enum AttributeStability {\n+\n+        \/**\n+         * The attribute contains only pure data, such as timestamps, and can always be bulk-copied.\n+         *\/\n+        STATELESS,\n+\n+        \/**\n+         * The attribute contains only pure data and CP refs, so can be bulk-copied when CP sharing is in effect,\n+         * and exploded\/rewritten when CP sharing is not in effect.\n+         *\/\n+        CP_REFS,\n+\n+        \/**\n+         * The attribute may contain labels, so should always be exploded\/rewritten.\n+         *\/\n+        LABELS,\n+\n+        \/**\n+         * The attribute may contain indexes into structured not managed by the library (type variable lists, etc)\n+         * and so we consult the {@link Classfile.AttributesProcessingOption} option to determine whether to preserve or drop it.\n+         *\/\n+        HAZMAT,\n+\n+        \/**\n+         * The attribute is completely unknown and so we consult the {@link Classfile.AttributesProcessingOption} option\n+         * to determine whether to preserve or drop it.\n+         *\/\n+        UNKNOWN\n+    }\n+\n@@ -77,0 +112,5 @@\n+\n+    \/**\n+     * {@return attribute stability indicator}\n+     *\/\n+    AttributeStability attributeStability();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+\n+    \/** AnnotationDefault *\/\n@@ -95,0 +97,2 @@\n+\n+    \/** BootstrapMethods *\/\n@@ -96,0 +100,2 @@\n+\n+    \/** CharacterRangeTable *\/\n@@ -97,0 +103,2 @@\n+\n+    \/** Code *\/\n@@ -98,0 +106,2 @@\n+\n+    \/** CompilationID *\/\n@@ -99,0 +109,2 @@\n+\n+    \/** ConstantValue *\/\n@@ -100,0 +112,2 @@\n+\n+    \/** Deprecated *\/\n@@ -101,0 +115,2 @@\n+\n+    \/** EnclosingMethod *\/\n@@ -102,0 +118,2 @@\n+\n+    \/** Exceptions *\/\n@@ -103,0 +121,2 @@\n+\n+    \/** InnerClasses *\/\n@@ -104,0 +124,2 @@\n+\n+    \/** LineNumberTable *\/\n@@ -105,0 +127,2 @@\n+\n+    \/** LocalVariableTable *\/\n@@ -106,0 +130,2 @@\n+\n+    \/** LocalVariableTypeTable *\/\n@@ -107,0 +133,2 @@\n+\n+    \/** MethodParameters *\/\n@@ -108,0 +136,2 @@\n+\n+    \/** Module *\/\n@@ -109,0 +139,2 @@\n+\n+    \/** ModuleHashes *\/\n@@ -110,0 +142,2 @@\n+\n+    \/** ModuleMainClass *\/\n@@ -111,0 +145,2 @@\n+\n+    \/** ModulePackages *\/\n@@ -112,0 +148,2 @@\n+\n+    \/** ModuleResolution *\/\n@@ -113,0 +151,2 @@\n+\n+    \/** ModuleTarget *\/\n@@ -114,0 +154,2 @@\n+\n+    \/** NestHost *\/\n@@ -115,0 +157,2 @@\n+\n+    \/** NestMembers *\/\n@@ -116,0 +160,2 @@\n+\n+    \/** PermittedSubclasses *\/\n@@ -117,0 +163,2 @@\n+\n+    \/** Record *\/\n@@ -118,0 +166,2 @@\n+\n+    \/** RuntimeInvisibleAnnotations *\/\n@@ -119,0 +169,2 @@\n+\n+    \/** RuntimeInvisibleTypeAnnotations *\/\n@@ -120,0 +172,2 @@\n+\n+    \/**  *\/\n@@ -121,0 +175,2 @@\n+\n+    \/** RuntimeVisibleAnnotations *\/\n@@ -122,0 +178,2 @@\n+\n+    \/** RuntimeVisibleParameterAnnotations *\/\n@@ -123,0 +181,2 @@\n+\n+    \/** RuntimeVisibleTypeAnnotations *\/\n@@ -124,0 +184,2 @@\n+\n+    \/** Signature *\/\n@@ -125,0 +187,2 @@\n+\n+    \/** SourceDebugExtension *\/\n@@ -126,0 +190,2 @@\n+\n+    \/** SourceFile *\/\n@@ -127,0 +193,2 @@\n+\n+    \/** SourceID *\/\n@@ -128,0 +196,2 @@\n+\n+    \/** StackMapTable *\/\n@@ -129,0 +199,2 @@\n+\n+    \/** Synthetic *\/\n@@ -146,0 +218,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -160,0 +237,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -182,0 +264,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -196,0 +283,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -211,0 +303,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -225,0 +322,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -239,0 +341,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -254,0 +361,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -268,0 +380,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -289,0 +406,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -308,0 +430,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -330,0 +457,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -352,0 +484,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -371,0 +508,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -376,36 +518,41 @@\n-        @Override\n-        public ModuleAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n-            return new BoundAttribute.BoundModuleAttribute(cf, this, p);\n-        }\n-\n-        @Override\n-        protected void writeBody(BufWriter buf, ModuleAttribute attr) {\n-            buf.writeIndex(attr.moduleName());\n-            buf.writeU2(attr.moduleFlagsMask());\n-            buf.writeIndexOrZero(attr.moduleVersion().orElse(null));\n-            buf.writeU2(attr.requires().size());\n-            for (ModuleRequireInfo require : attr.requires()) {\n-                buf.writeIndex(require.requires());\n-                buf.writeU2(require.requiresFlagsMask());\n-                buf.writeIndexOrZero(require.requiresVersion().orElse(null));\n-            }\n-            buf.writeU2(attr.exports().size());\n-            for (ModuleExportInfo export : attr.exports()) {\n-                buf.writeIndex(export.exportedPackage());\n-                buf.writeU2(export.exportsFlagsMask());\n-                buf.writeListIndices(export.exportsTo());\n-            }\n-            buf.writeU2(attr.opens().size());\n-            for (ModuleOpenInfo open : attr.opens()) {\n-                buf.writeIndex(open.openedPackage());\n-                buf.writeU2(open.opensFlagsMask());\n-                buf.writeListIndices(open.opensTo());\n-            }\n-            buf.writeListIndices(attr.uses());\n-            buf.writeU2(attr.provides().size());\n-            for (ModuleProvideInfo provide : attr.provides()) {\n-                buf.writeIndex(provide.provides());\n-                buf.writeListIndices(provide.providesWith());\n-            }\n-        }\n-    };\n+                @Override\n+                public ModuleAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n+                    return new BoundAttribute.BoundModuleAttribute(cf, this, p);\n+                }\n+\n+                @Override\n+                protected void writeBody(BufWriter buf, ModuleAttribute attr) {\n+                    buf.writeIndex(attr.moduleName());\n+                    buf.writeU2(attr.moduleFlagsMask());\n+                    buf.writeIndexOrZero(attr.moduleVersion().orElse(null));\n+                    buf.writeU2(attr.requires().size());\n+                    for (ModuleRequireInfo require : attr.requires()) {\n+                        buf.writeIndex(require.requires());\n+                        buf.writeU2(require.requiresFlagsMask());\n+                        buf.writeIndexOrZero(require.requiresVersion().orElse(null));\n+                    }\n+                    buf.writeU2(attr.exports().size());\n+                    for (ModuleExportInfo export : attr.exports()) {\n+                        buf.writeIndex(export.exportedPackage());\n+                        buf.writeU2(export.exportsFlagsMask());\n+                        buf.writeListIndices(export.exportsTo());\n+                    }\n+                    buf.writeU2(attr.opens().size());\n+                    for (ModuleOpenInfo open : attr.opens()) {\n+                        buf.writeIndex(open.openedPackage());\n+                        buf.writeU2(open.opensFlagsMask());\n+                        buf.writeListIndices(open.opensTo());\n+                    }\n+                    buf.writeListIndices(attr.uses());\n+                    buf.writeU2(attr.provides().size());\n+                    for (ModuleProvideInfo provide : attr.provides()) {\n+                        buf.writeIndex(provide.provides());\n+                        buf.writeListIndices(provide.providesWith());\n+                    }\n+                }\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -432,0 +579,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -446,0 +598,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -460,0 +617,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -474,0 +636,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -488,0 +655,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -502,0 +674,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -516,0 +693,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -530,0 +712,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -550,0 +737,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -564,1 +756,6 @@\n-    };\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -581,0 +778,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -595,0 +797,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.HAZMAT;\n+                }\n@@ -600,4 +807,9 @@\n-        @Override\n-        public RuntimeVisibleAnnotationsAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n-            return new BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute(cf, pos);\n-        }\n+                @Override\n+                public RuntimeVisibleAnnotationsAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+                    return new BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute(cf, pos);\n+                }\n+\n+                @Override\n+                protected void writeBody(BufWriter buf, RuntimeVisibleAnnotationsAttribute attr) {\n+                    buf.writeList(attr.annotations());\n+                }\n@@ -605,5 +817,5 @@\n-        @Override\n-        protected void writeBody(BufWriter buf, RuntimeVisibleAnnotationsAttribute attr) {\n-            buf.writeList(attr.annotations());\n-        }\n-    };\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n+            };\n@@ -626,0 +838,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -640,0 +857,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.HAZMAT;\n+                }\n@@ -654,0 +876,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -668,0 +895,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.STATELESS;\n+                }\n@@ -682,0 +914,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -696,0 +933,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.CP_REFS;\n+                }\n@@ -710,0 +952,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.LABELS;\n+                }\n@@ -725,0 +972,5 @@\n+\n+                @Override\n+                public AttributeMapper.AttributeStability attributeStability() {\n+                    return AttributeStability.STATELESS;\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":298,"deletions":46,"binary":false,"changes":344,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-     * Returns a default instance of {@linkplain ClassHierarchyResolver} that\n-     * gets {@link ClassHierarchyInfo} from system class loader with reflection.\n+     * {@return the default instance of {@linkplain ClassHierarchyResolver} that\n+     * gets {@link ClassHierarchyInfo} from system class loader with reflection}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,0 +99,3 @@\n+        \/**\n+         * {@return function mapping attribute names to attribute mappers}\n+         *\/\n@@ -119,0 +122,3 @@\n+        \/**\n+         * {@return the class hierarchy resolver}\n+         *\/\n@@ -132,0 +138,2 @@\n+\n+        \/** Preserves the original constant pool when transforming classfile *\/\n@@ -133,0 +141,2 @@\n+\n+        \/** Creates a new constant pool when transforming classfile *\/\n@@ -142,0 +152,2 @@\n+\n+        \/** Patch unreachable code *\/\n@@ -143,0 +155,2 @@\n+\n+        \/** Keep the unreachable code *\/\n@@ -156,0 +170,2 @@\n+\n+        \/** Fail on unresolved labels *\/\n@@ -157,0 +173,2 @@\n+\n+        \/** Filter unresolved labels *\/\n@@ -168,0 +186,2 @@\n+\n+        \/** Process debug elements *\/\n@@ -169,0 +189,2 @@\n+\n+        \/** Drop debug elements *\/\n@@ -179,0 +201,2 @@\n+\n+        \/** Process line numbers *\/\n@@ -180,0 +204,2 @@\n+\n+        \/** Drop line numbers *\/\n@@ -190,0 +216,2 @@\n+\n+        \/** Automatically convert short jumps to long when necessary *\/\n@@ -191,0 +219,2 @@\n+\n+        \/** Fail if short jump overflows *\/\n@@ -202,0 +232,2 @@\n+\n+        \/** Generate stack maps when required *\/\n@@ -203,0 +235,2 @@\n+\n+        \/** Always generate stack maps *\/\n@@ -204,0 +238,2 @@\n+\n+        \/** Drop stack maps from code *\/\n@@ -208,3 +244,4 @@\n-     * Option describing whether to process or discard unrecognized attributes.\n-     * Default is {@code PASS_UNKNOWN_ATTRIBUTES} to process unrecognized\n-     * attributes, and deliver as instances of {@link UnknownAttribute}.\n+     * Option describing whether to process or discard unrecognized or problematic attributes.\n+     * Default is {@code PASS_ALL_ATTRIBUTES} to process all attributes present\n+     * in the classfile. Unrecognized attributes are deliver as instances of\n+     * {@link UnknownAttribute}.\n@@ -212,3 +249,18 @@\n-    enum UnknownAttributesOption implements Option {\n-        PASS_UNKNOWN_ATTRIBUTES,\n-        DROP_UNKNOWN_ATTRIBUTES\n+    enum AttributesProcessingOption implements Option {\n+\n+        \/** Process all attributes *\/\n+        PASS_ALL_ATTRIBUTES,\n+\n+        \/** Drop unknown attributes *\/\n+        DROP_UNKNOWN_ATTRIBUTES,\n+\n+        \/** Drop unknown and hazmat attributes, @see AttributeMapper.AttributeStability#HAZMAT *\/\n+        DROP_HAZMAT_ATRIBUTES;\n+\n+        \/**\n+         * {@return true if attributes of given stability are allowed to process}\n+         * @param stability stability of the attribute\n+         *\/\n+        public boolean isAllowed(AttributeMapper.AttributeStability stability) {\n+            return 5 - stability.ordinal() > ordinal();\n+        }\n@@ -228,0 +280,1 @@\n+     * @throws java.io.IOException\n@@ -263,0 +316,1 @@\n+     * @throws java.io.IOException\n@@ -278,0 +332,1 @@\n+     * @throws java.io.IOException\n@@ -314,0 +369,1 @@\n+     * @throws java.io.IOException\n@@ -325,0 +381,1 @@\n+     * @throws java.io.IOException\n@@ -354,0 +411,12 @@\n+    \/**\n+     * Transform one classfile into a new classfile with the aid of a\n+     * {@link ClassTransform}.  The transform will receive each element of\n+     * this class, as well as a {@link ClassBuilder} for building the new class.\n+     * The transform is free to preserve, remove, or replace elements as it\n+     * sees fit.\n+     *\n+     * @param model class model to transform\n+     * @param newClassName new class name\n+     * @param transform the transform\n+     * @return the bytes of the new class\n+     *\/\n@@ -358,0 +427,19 @@\n+    \/**\n+     * Transform one classfile into a new classfile with the aid of a\n+     * {@link ClassTransform}.  The transform will receive each element of\n+     * this class, as well as a {@link ClassBuilder} for building the new class.\n+     * The transform is free to preserve, remove, or replace elements as it\n+     * sees fit.\n+     *\n+     * @implNote\n+     * This method behaves as if:\n+     * {@snippet lang=java :\n+     *     this.build(newClassName, ConstantPoolBuilder.of(model),\n+     *                     b -> b.transform(model, transform));\n+     * }\n+     *\n+     * @param model class model to transform\n+     * @param newClassName new class name\n+     * @param transform the transform\n+     * @return the bytes of the new class\n+     *\/\n@@ -360,0 +448,1 @@\n+    \/** 0xCAFEBABE *\/\n@@ -362,0 +451,1 @@\n+    \/** 0 *\/\n@@ -363,0 +453,2 @@\n+\n+    \/** 1 *\/\n@@ -364,0 +456,2 @@\n+\n+    \/** 2 *\/\n@@ -365,0 +459,2 @@\n+\n+    \/** 3 *\/\n@@ -366,0 +462,2 @@\n+\n+    \/** 4 *\/\n@@ -367,0 +465,2 @@\n+\n+    \/** 5 *\/\n@@ -368,0 +468,2 @@\n+\n+    \/** 6 *\/\n@@ -369,0 +471,2 @@\n+\n+    \/** 7 *\/\n@@ -370,0 +474,2 @@\n+\n+    \/** 8 *\/\n@@ -371,0 +477,2 @@\n+\n+    \/** 9 *\/\n@@ -372,0 +480,2 @@\n+\n+    \/** 10 *\/\n@@ -373,0 +483,2 @@\n+\n+    \/** 11 *\/\n@@ -374,0 +486,2 @@\n+\n+    \/** 12 *\/\n@@ -375,0 +489,2 @@\n+\n+    \/** 13 *\/\n@@ -376,0 +492,2 @@\n+\n+    \/** 14 *\/\n@@ -377,0 +495,2 @@\n+\n+    \/** 15 *\/\n@@ -378,0 +498,2 @@\n+\n+    \/** 16 *\/\n@@ -379,0 +501,2 @@\n+\n+    \/** 17 *\/\n@@ -380,0 +504,2 @@\n+\n+    \/** 18 *\/\n@@ -381,0 +507,2 @@\n+\n+    \/** 19 *\/\n@@ -382,0 +510,2 @@\n+\n+    \/** 20 *\/\n@@ -383,0 +513,2 @@\n+\n+    \/** 21 *\/\n@@ -384,0 +516,2 @@\n+\n+    \/** 22 *\/\n@@ -385,0 +519,2 @@\n+\n+    \/** 23 *\/\n@@ -386,0 +522,2 @@\n+\n+    \/** 24 *\/\n@@ -387,0 +525,2 @@\n+\n+    \/** 25 *\/\n@@ -388,0 +528,2 @@\n+\n+    \/** 26 *\/\n@@ -389,0 +531,2 @@\n+\n+    \/** 27 *\/\n@@ -390,0 +534,2 @@\n+\n+    \/** 28 *\/\n@@ -391,0 +537,2 @@\n+\n+    \/** 29 *\/\n@@ -392,0 +540,2 @@\n+\n+    \/** 30 *\/\n@@ -393,0 +543,2 @@\n+\n+    \/** 31 *\/\n@@ -394,0 +546,2 @@\n+\n+    \/** 32 *\/\n@@ -395,0 +549,2 @@\n+\n+    \/** 33 *\/\n@@ -396,0 +552,2 @@\n+\n+    \/** 34 *\/\n@@ -397,0 +555,2 @@\n+\n+    \/** 35 *\/\n@@ -398,0 +558,2 @@\n+\n+    \/** 36 *\/\n@@ -399,0 +561,2 @@\n+\n+    \/** 37 *\/\n@@ -400,0 +564,2 @@\n+\n+    \/** 38 *\/\n@@ -401,0 +567,2 @@\n+\n+    \/** 39 *\/\n@@ -402,0 +570,2 @@\n+\n+    \/** 40 *\/\n@@ -403,0 +573,2 @@\n+\n+    \/** 41 *\/\n@@ -404,0 +576,2 @@\n+\n+    \/** 42 *\/\n@@ -405,0 +579,2 @@\n+\n+    \/** 43 *\/\n@@ -406,0 +582,2 @@\n+\n+    \/** 44 *\/\n@@ -407,0 +585,2 @@\n+\n+    \/** 45 *\/\n@@ -408,0 +588,2 @@\n+\n+    \/** 46 *\/\n@@ -409,0 +591,2 @@\n+\n+    \/** 47 *\/\n@@ -410,0 +594,2 @@\n+\n+    \/** 48 *\/\n@@ -411,0 +597,2 @@\n+\n+    \/** 49 *\/\n@@ -412,0 +600,2 @@\n+\n+    \/** 50 *\/\n@@ -413,0 +603,2 @@\n+\n+    \/** 51 *\/\n@@ -414,0 +606,2 @@\n+\n+    \/** 52 *\/\n@@ -415,0 +609,2 @@\n+\n+    \/** 53 *\/\n@@ -416,0 +612,2 @@\n+\n+    \/** 54 *\/\n@@ -417,0 +615,2 @@\n+\n+    \/** 55 *\/\n@@ -418,0 +618,2 @@\n+\n+    \/** 56 *\/\n@@ -419,0 +621,2 @@\n+\n+    \/** 57 *\/\n@@ -420,0 +624,2 @@\n+\n+    \/** 58 *\/\n@@ -421,0 +627,2 @@\n+\n+    \/** 59 *\/\n@@ -422,0 +630,2 @@\n+\n+    \/** 60 *\/\n@@ -423,0 +633,2 @@\n+\n+    \/** 61 *\/\n@@ -424,0 +636,2 @@\n+\n+    \/** 62 *\/\n@@ -425,0 +639,2 @@\n+\n+    \/** 63 *\/\n@@ -426,0 +642,2 @@\n+\n+    \/** 64 *\/\n@@ -427,0 +645,2 @@\n+\n+    \/** 65 *\/\n@@ -428,0 +648,2 @@\n+\n+    \/** 66 *\/\n@@ -429,0 +651,2 @@\n+\n+    \/** 67 *\/\n@@ -430,0 +654,2 @@\n+\n+    \/** 68 *\/\n@@ -431,0 +657,2 @@\n+\n+    \/** 69 *\/\n@@ -432,0 +660,2 @@\n+\n+    \/** 70 *\/\n@@ -433,0 +663,2 @@\n+\n+    \/** 71 *\/\n@@ -434,0 +666,2 @@\n+\n+    \/** 72 *\/\n@@ -435,0 +669,2 @@\n+\n+    \/** 73 *\/\n@@ -436,0 +672,2 @@\n+\n+    \/** 74 *\/\n@@ -437,0 +675,2 @@\n+\n+    \/** 75 *\/\n@@ -438,0 +678,2 @@\n+\n+    \/** 76 *\/\n@@ -439,0 +681,2 @@\n+\n+    \/** 77 *\/\n@@ -440,0 +684,2 @@\n+\n+    \/** 78 *\/\n@@ -441,0 +687,2 @@\n+\n+    \/** 79 *\/\n@@ -442,0 +690,2 @@\n+\n+    \/** 80 *\/\n@@ -443,0 +693,2 @@\n+\n+    \/** 81 *\/\n@@ -444,0 +696,2 @@\n+\n+    \/** 82 *\/\n@@ -445,0 +699,2 @@\n+\n+    \/** 83 *\/\n@@ -446,0 +702,2 @@\n+\n+    \/** 84 *\/\n@@ -447,0 +705,2 @@\n+\n+    \/** 85 *\/\n@@ -448,0 +708,2 @@\n+\n+    \/** 86 *\/\n@@ -449,0 +711,2 @@\n+\n+    \/** 87 *\/\n@@ -450,0 +714,2 @@\n+\n+    \/** 88 *\/\n@@ -451,0 +717,2 @@\n+\n+    \/** 89 *\/\n@@ -452,0 +720,2 @@\n+\n+    \/** 90 *\/\n@@ -453,0 +723,2 @@\n+\n+    \/** 91 *\/\n@@ -454,0 +726,2 @@\n+\n+    \/** 92 *\/\n@@ -455,0 +729,2 @@\n+\n+    \/** 93 *\/\n@@ -456,0 +732,2 @@\n+\n+    \/** 94 *\/\n@@ -457,0 +735,2 @@\n+\n+    \/** 95 *\/\n@@ -458,0 +738,2 @@\n+\n+    \/** 96 *\/\n@@ -459,0 +741,2 @@\n+\n+    \/** 97 *\/\n@@ -460,0 +744,2 @@\n+\n+    \/** 98 *\/\n@@ -461,0 +747,2 @@\n+\n+    \/** 99 *\/\n@@ -462,0 +750,2 @@\n+\n+    \/** 100 *\/\n@@ -463,0 +753,2 @@\n+\n+    \/** 101 *\/\n@@ -464,0 +756,2 @@\n+\n+    \/** 102 *\/\n@@ -465,0 +759,2 @@\n+\n+    \/** 103 *\/\n@@ -466,0 +762,2 @@\n+\n+    \/** 104 *\/\n@@ -467,0 +765,2 @@\n+\n+    \/** 105 *\/\n@@ -468,0 +768,2 @@\n+\n+    \/** 106 *\/\n@@ -469,0 +771,2 @@\n+\n+    \/** 107 *\/\n@@ -470,0 +774,2 @@\n+\n+    \/** 108 *\/\n@@ -471,0 +777,2 @@\n+\n+    \/** 109 *\/\n@@ -472,0 +780,2 @@\n+\n+    \/** 110 *\/\n@@ -473,0 +783,2 @@\n+\n+    \/** 111 *\/\n@@ -474,0 +786,2 @@\n+\n+    \/** 112 *\/\n@@ -475,0 +789,2 @@\n+\n+    \/** 113 *\/\n@@ -476,0 +792,2 @@\n+\n+    \/** 114 *\/\n@@ -477,0 +795,2 @@\n+\n+    \/** 115 *\/\n@@ -478,0 +798,2 @@\n+\n+    \/** 116 *\/\n@@ -479,0 +801,2 @@\n+\n+    \/** 117 *\/\n@@ -480,0 +804,2 @@\n+\n+    \/** 118 *\/\n@@ -481,0 +807,2 @@\n+\n+    \/** 119 *\/\n@@ -482,0 +810,2 @@\n+\n+    \/** 120 *\/\n@@ -483,0 +813,2 @@\n+\n+    \/** 121 *\/\n@@ -484,0 +816,2 @@\n+\n+    \/** 122 *\/\n@@ -485,0 +819,2 @@\n+\n+    \/** 123 *\/\n@@ -486,0 +822,2 @@\n+\n+    \/** 124 *\/\n@@ -487,0 +825,2 @@\n+\n+    \/** 125 *\/\n@@ -488,0 +828,2 @@\n+\n+    \/** 126 *\/\n@@ -489,0 +831,2 @@\n+\n+    \/** 127 *\/\n@@ -490,0 +834,2 @@\n+\n+    \/** 128 *\/\n@@ -491,0 +837,2 @@\n+\n+    \/** 129 *\/\n@@ -492,0 +840,2 @@\n+\n+    \/** 130 *\/\n@@ -493,0 +843,2 @@\n+\n+    \/** 131 *\/\n@@ -494,0 +846,2 @@\n+\n+    \/** 132 *\/\n@@ -495,0 +849,2 @@\n+\n+    \/** 133 *\/\n@@ -496,0 +852,2 @@\n+\n+    \/** 134 *\/\n@@ -497,0 +855,2 @@\n+\n+    \/** 135 *\/\n@@ -498,0 +858,2 @@\n+\n+    \/** 136 *\/\n@@ -499,0 +861,2 @@\n+\n+    \/** 137 *\/\n@@ -500,0 +864,2 @@\n+\n+    \/** 138 *\/\n@@ -501,0 +867,2 @@\n+\n+    \/** 139 *\/\n@@ -502,0 +870,2 @@\n+\n+    \/** 140 *\/\n@@ -503,0 +873,2 @@\n+\n+    \/** 141 *\/\n@@ -504,0 +876,2 @@\n+\n+    \/** 142 *\/\n@@ -505,0 +879,2 @@\n+\n+    \/** 143 *\/\n@@ -506,0 +882,2 @@\n+\n+    \/** 144 *\/\n@@ -507,0 +885,2 @@\n+\n+    \/** 145 *\/\n@@ -508,0 +888,2 @@\n+\n+    \/** 146 *\/\n@@ -509,0 +891,2 @@\n+\n+    \/** 147 *\/\n@@ -510,0 +894,2 @@\n+\n+    \/** 148 *\/\n@@ -511,0 +897,2 @@\n+\n+    \/** 149 *\/\n@@ -512,0 +900,2 @@\n+\n+    \/** 150 *\/\n@@ -513,0 +903,2 @@\n+\n+    \/** 151 *\/\n@@ -514,0 +906,2 @@\n+\n+    \/** 152 *\/\n@@ -515,0 +909,2 @@\n+\n+    \/** 153 *\/\n@@ -516,0 +912,2 @@\n+\n+    \/** 154 *\/\n@@ -517,0 +915,2 @@\n+\n+    \/** 155 *\/\n@@ -518,0 +918,2 @@\n+\n+    \/** 156 *\/\n@@ -519,0 +921,2 @@\n+\n+    \/** 157 *\/\n@@ -520,0 +924,2 @@\n+\n+    \/** 158 *\/\n@@ -521,0 +927,2 @@\n+\n+    \/** 159 *\/\n@@ -522,0 +930,2 @@\n+\n+    \/** 160 *\/\n@@ -523,0 +933,2 @@\n+\n+    \/** 161 *\/\n@@ -524,0 +936,2 @@\n+\n+    \/** 162 *\/\n@@ -525,0 +939,2 @@\n+\n+    \/** 163 *\/\n@@ -526,0 +942,2 @@\n+\n+    \/** 164 *\/\n@@ -527,0 +945,2 @@\n+\n+    \/** 165 *\/\n@@ -528,0 +948,2 @@\n+\n+    \/** 166 *\/\n@@ -529,0 +951,2 @@\n+\n+    \/** 167 *\/\n@@ -530,0 +954,2 @@\n+\n+    \/** 168 *\/\n@@ -531,0 +957,2 @@\n+\n+    \/** 169 *\/\n@@ -532,0 +960,2 @@\n+\n+    \/** 170 *\/\n@@ -533,0 +963,2 @@\n+\n+    \/** 171 *\/\n@@ -534,0 +966,2 @@\n+\n+    \/** 172 *\/\n@@ -535,0 +969,2 @@\n+\n+    \/** 173 *\/\n@@ -536,0 +972,2 @@\n+\n+    \/** 174 *\/\n@@ -537,0 +975,2 @@\n+\n+    \/** 175 *\/\n@@ -538,0 +978,2 @@\n+\n+    \/** 176 *\/\n@@ -539,0 +981,2 @@\n+\n+    \/** 177 *\/\n@@ -540,0 +984,2 @@\n+\n+    \/** 178 *\/\n@@ -541,0 +987,2 @@\n+\n+    \/** 179 *\/\n@@ -542,0 +990,2 @@\n+\n+    \/** 180 *\/\n@@ -543,0 +993,2 @@\n+\n+    \/** 181 *\/\n@@ -544,0 +996,2 @@\n+\n+    \/** 182 *\/\n@@ -545,0 +999,2 @@\n+\n+    \/** 183 *\/\n@@ -546,0 +1002,2 @@\n+\n+    \/** 184 *\/\n@@ -547,0 +1005,2 @@\n+\n+    \/** 185 *\/\n@@ -548,0 +1008,2 @@\n+\n+    \/** 186 *\/\n@@ -549,0 +1011,2 @@\n+\n+    \/** 187 *\/\n@@ -550,0 +1014,2 @@\n+\n+    \/** 188 *\/\n@@ -551,0 +1017,2 @@\n+\n+    \/** 189 *\/\n@@ -552,0 +1020,2 @@\n+\n+    \/** 190 *\/\n@@ -553,0 +1023,2 @@\n+\n+    \/** 191 *\/\n@@ -554,0 +1026,2 @@\n+\n+    \/** 192 *\/\n@@ -555,0 +1029,2 @@\n+\n+    \/** 193 *\/\n@@ -556,0 +1032,2 @@\n+\n+    \/** 194 *\/\n@@ -557,0 +1035,2 @@\n+\n+    \/** 195 *\/\n@@ -558,0 +1038,2 @@\n+\n+    \/** 196 *\/\n@@ -559,0 +1041,2 @@\n+\n+    \/** 197 *\/\n@@ -560,0 +1044,2 @@\n+\n+    \/** 198 *\/\n@@ -561,0 +1047,2 @@\n+\n+    \/** 199 *\/\n@@ -562,0 +1050,2 @@\n+\n+    \/** 200 *\/\n@@ -563,0 +1053,2 @@\n+\n+    \/** 201 *\/\n@@ -565,0 +1057,1 @@\n+    \/** 0x0001 *\/\n@@ -566,0 +1059,2 @@\n+\n+    \/** 0x0004 *\/\n@@ -567,0 +1062,2 @@\n+\n+    \/** 0x0002 *\/\n@@ -568,0 +1065,2 @@\n+\n+    \/** 0x0200 *\/\n@@ -569,0 +1068,2 @@\n+\n+    \/** 0x4000 *\/\n@@ -570,0 +1071,2 @@\n+\n+    \/** 0x2000 *\/\n@@ -571,0 +1074,2 @@\n+\n+    \/** 0x0020 *\/\n@@ -572,0 +1077,2 @@\n+\n+    \/** 0x0400 *\/\n@@ -573,0 +1080,2 @@\n+\n+    \/** 0x0040 *\/\n@@ -574,0 +1083,2 @@\n+\n+    \/** 0x0080 *\/\n@@ -575,0 +1086,2 @@\n+\n+    \/** 0x1000 *\/\n@@ -576,0 +1089,2 @@\n+\n+    \/** 0x0008 *\/\n@@ -577,0 +1092,2 @@\n+\n+    \/** 0x0010 *\/\n@@ -578,0 +1095,2 @@\n+\n+    \/** 0x0020 *\/\n@@ -579,0 +1098,2 @@\n+\n+    \/** 0x0040 *\/\n@@ -580,0 +1101,2 @@\n+\n+    \/** 0x0080 *\/\n@@ -581,0 +1104,2 @@\n+\n+    \/** 0x0100 *\/\n@@ -582,0 +1107,2 @@\n+\n+    \/** 0x0800 *\/\n@@ -583,0 +1110,2 @@\n+\n+    \/** 0x8000 *\/\n@@ -584,0 +1113,2 @@\n+\n+    \/** 0x20 *\/\n@@ -585,0 +1116,2 @@\n+\n+    \/** 0x8000 *\/\n@@ -586,0 +1119,2 @@\n+\n+    \/** 0x20 *\/\n@@ -587,0 +1122,2 @@\n+\n+    \/** 0x40 *\/\n@@ -589,0 +1126,1 @@\n+    \/** 0x0001 *\/\n@@ -590,0 +1128,2 @@\n+\n+    \/** 0x0002 *\/\n@@ -591,0 +1131,2 @@\n+\n+    \/** 0x0004 *\/\n@@ -592,0 +1134,2 @@\n+\n+    \/** 0x0008 *\/\n@@ -593,0 +1137,2 @@\n+\n+    \/** 0x0010 *\/\n@@ -594,0 +1140,2 @@\n+\n+    \/** 0x0020 *\/\n@@ -595,0 +1143,2 @@\n+\n+    \/** 0x0040 *\/\n@@ -596,0 +1146,2 @@\n+\n+    \/** 0x0080 *\/\n@@ -597,0 +1149,2 @@\n+\n+    \/** 0x0100 *\/\n@@ -599,0 +1153,1 @@\n+    \/** 7 *\/\n@@ -600,0 +1155,2 @@\n+\n+    \/** 17 *\/\n@@ -601,0 +1158,2 @@\n+\n+    \/** 6 *\/\n@@ -602,0 +1161,2 @@\n+\n+    \/** 9 *\/\n@@ -603,0 +1164,2 @@\n+\n+    \/** 4 *\/\n@@ -604,0 +1167,2 @@\n+\n+    \/** 3 *\/\n@@ -605,0 +1170,2 @@\n+\n+    \/** 11 *\/\n@@ -606,0 +1173,2 @@\n+\n+    \/** 18 *\/\n@@ -607,0 +1176,2 @@\n+\n+    \/** 5 *\/\n@@ -608,0 +1179,2 @@\n+\n+    \/** 15 *\/\n@@ -609,0 +1182,2 @@\n+\n+    \/** 10 *\/\n@@ -610,0 +1185,2 @@\n+\n+    \/** 16 *\/\n@@ -611,0 +1188,2 @@\n+\n+    \/** 19 *\/\n@@ -612,0 +1191,2 @@\n+\n+    \/** 12 *\/\n@@ -613,0 +1194,2 @@\n+\n+    \/** 20 *\/\n@@ -614,0 +1197,2 @@\n+\n+    \/** 8 *\/\n@@ -615,0 +1200,2 @@\n+\n+    \/** 2 *\/\n@@ -616,0 +1203,2 @@\n+\n+    \/** 1 *\/\n@@ -619,0 +1208,2 @@\n+\n+    \/** 'B' *\/\n@@ -620,0 +1211,2 @@\n+\n+    \/** 'C' *\/\n@@ -621,0 +1214,2 @@\n+\n+    \/** 'D' *\/\n@@ -622,0 +1217,2 @@\n+\n+    \/** 'F' *\/\n@@ -623,0 +1220,2 @@\n+\n+    \/** 'I' *\/\n@@ -624,0 +1223,2 @@\n+\n+    \/** 'J' *\/\n@@ -625,0 +1226,2 @@\n+\n+    \/** 'S' *\/\n@@ -626,0 +1229,2 @@\n+\n+    \/** 'Z' *\/\n@@ -627,0 +1232,2 @@\n+\n+    \/** 's' *\/\n@@ -628,0 +1235,2 @@\n+\n+    \/** 'e' *\/\n@@ -629,0 +1238,2 @@\n+\n+    \/** 'c' *\/\n@@ -630,0 +1241,2 @@\n+\n+    \/** '@' *\/\n@@ -631,0 +1244,2 @@\n+\n+    \/** '[' *\/\n@@ -634,0 +1249,2 @@\n+\n+    \/** 0x00 *\/\n@@ -635,0 +1252,2 @@\n+\n+    \/** 0x01 *\/\n@@ -636,0 +1255,2 @@\n+\n+    \/** 0x10 *\/\n@@ -637,0 +1258,2 @@\n+\n+    \/** 0x11 *\/\n@@ -638,0 +1261,2 @@\n+\n+    \/** 0x12 *\/\n@@ -639,0 +1264,2 @@\n+\n+    \/** 0x13 *\/\n@@ -640,0 +1267,2 @@\n+\n+    \/** 0x14 *\/\n@@ -641,0 +1270,2 @@\n+\n+    \/** 0x15 *\/\n@@ -642,0 +1273,2 @@\n+\n+    \/** 0x16 *\/\n@@ -643,0 +1276,2 @@\n+\n+    \/** 0x17 *\/\n@@ -644,0 +1279,2 @@\n+\n+    \/** 0x40 *\/\n@@ -645,0 +1282,2 @@\n+\n+    \/** 0x41 *\/\n@@ -646,0 +1285,2 @@\n+\n+    \/** 0x42 *\/\n@@ -647,0 +1288,2 @@\n+\n+    \/** 0x43 *\/\n@@ -648,0 +1291,2 @@\n+\n+    \/** 0x44 *\/\n@@ -649,0 +1294,2 @@\n+\n+    \/** 0x45 *\/\n@@ -650,0 +1297,2 @@\n+\n+    \/** 0x46 *\/\n@@ -651,0 +1300,2 @@\n+\n+    \/** 0x47 *\/\n@@ -652,0 +1303,2 @@\n+\n+    \/** 0x48 *\/\n@@ -653,0 +1306,2 @@\n+\n+    \/** 0x49 *\/\n@@ -654,0 +1309,2 @@\n+\n+    \/** 0x4A *\/\n@@ -655,0 +1312,2 @@\n+\n+    \/** 0x4B *\/\n@@ -658,0 +1317,2 @@\n+\n+    \/** 0 *\/\n@@ -659,0 +1320,2 @@\n+\n+    \/** 1 *\/\n@@ -660,0 +1323,2 @@\n+\n+    \/** 2 *\/\n@@ -661,0 +1326,2 @@\n+\n+    \/** 3 *\/\n@@ -662,0 +1329,2 @@\n+\n+    \/** 4 *\/\n@@ -663,0 +1332,2 @@\n+\n+    \/** 5 *\/\n@@ -664,0 +1335,2 @@\n+\n+    \/** 6 *\/\n@@ -665,0 +1338,2 @@\n+\n+    \/** 7 *\/\n@@ -666,0 +1341,2 @@\n+\n+    \/** 8 *\/\n@@ -668,0 +1345,1 @@\n+    \/** ACC_PUBLIC *\/\n@@ -670,0 +1348,1 @@\n+    \/** 45 *\/\n@@ -671,0 +1350,2 @@\n+\n+    \/** 46 *\/\n@@ -672,0 +1353,2 @@\n+\n+    \/** 47 *\/\n@@ -673,0 +1356,2 @@\n+\n+    \/** 48 *\/\n@@ -674,0 +1359,2 @@\n+\n+    \/** 49 *\/\n@@ -675,0 +1362,2 @@\n+\n+    \/** 50 *\/\n@@ -676,0 +1365,2 @@\n+\n+    \/** 51 *\/\n@@ -677,0 +1368,2 @@\n+\n+    \/** 52 *\/\n@@ -678,0 +1371,2 @@\n+\n+    \/** 53 *\/\n@@ -679,0 +1374,2 @@\n+\n+    \/** 54 *\/\n@@ -680,0 +1377,2 @@\n+\n+    \/** 55 *\/\n@@ -681,0 +1380,2 @@\n+\n+    \/** 56 *\/\n@@ -682,0 +1383,2 @@\n+\n+    \/** 57 *\/\n@@ -683,0 +1386,2 @@\n+\n+    \/** 58 *\/\n@@ -684,0 +1389,2 @@\n+\n+    \/** 59 *\/\n@@ -685,0 +1392,2 @@\n+\n+    \/** 60 *\/\n@@ -686,0 +1395,2 @@\n+\n+    \/** 61 *\/\n@@ -687,0 +1398,2 @@\n+\n+    \/** 62 *\/\n@@ -688,0 +1401,2 @@\n+\n+    \/** 63 *\/\n@@ -689,0 +1404,2 @@\n+\n+    \/** 64 *\/\n@@ -690,0 +1407,2 @@\n+\n+    \/** 65 *\/\n@@ -691,0 +1410,2 @@\n+\n+    \/** 66 *\/\n@@ -700,0 +1421,3 @@\n+    \/**\n+     * {@return the latest major Java version}\n+     *\/\n@@ -704,0 +1428,3 @@\n+    \/**\n+     * {@return the latest minor Java version}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":733,"deletions":6,"binary":false,"changes":739,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+ * @param <E> element type\n+ * @param <B> builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,3 @@\n+ * @param <C> transform type\n+ * @param <E> element type\n+ * @param <B> builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileTransform.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -200,0 +200,1 @@\n+     * @return this builder\n@@ -402,0 +403,7 @@\n+    \/**\n+     * Load instruction\n+     * @param tk load type\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n+\n@@ -407,0 +415,6 @@\n+    \/**\n+     * Store instruction\n+     * @param tk store type\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -412,0 +426,6 @@\n+    \/**\n+     * Increment local variable by constant\n+     * @param slot local variable slot\n+     * @param val increment value\n+     * @return this builder\n+     *\/\n@@ -417,0 +437,7 @@\n+    \/**\n+     * Branch instruction\n+     * @see Opcode.Kind#BRANCH\n+     * @param op branch opcode\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -422,0 +449,6 @@\n+    \/**\n+     * Access jump table by key match and jump\n+     * @param defaultTarget default jump target\n+     * @param cases switch cases\n+     * @return this builder\n+     *\/\n@@ -427,0 +460,8 @@\n+    \/**\n+     * Access jump table by index and jump\n+     * @param lowValue low key value\n+     * @param highValue high key value\n+     * @param defaultTarget default jump target\n+     * @param cases switch cases\n+     * @return this builder\n+     *\/\n@@ -432,0 +473,5 @@\n+    \/**\n+     * Return instruction\n+     * @param tk return type\n+     * @return this builder\n+     *\/\n@@ -437,0 +483,4 @@\n+    \/**\n+     * Throw exception or error\n+     * @return this builder\n+     *\/\n@@ -442,0 +492,7 @@\n+    \/**\n+     * Field access instruction\n+     * @see Opcode.Kind#FIELD_ACCESS\n+     * @param opcode field access opcode\n+     * @param ref field reference\n+     * @return this builder\n+     *\/\n@@ -447,0 +504,9 @@\n+    \/**\n+     * Field access instruction\n+     * @see Opcode.Kind#FIELD_ACCESS\n+     * @param opcode field access opcode\n+     * @param owner class\n+     * @param name field name\n+     * @param type field type\n+     * @return this builder\n+     *\/\n@@ -451,0 +517,7 @@\n+    \/**\n+     * Invoke a method or constructor\n+     * @see Opcode.Kind#INVOKE\n+     * @param opcode invoke opcode\n+     * @param ref interface method or method reference\n+     * @return this builder\n+     *\/\n@@ -455,0 +528,10 @@\n+    \/**\n+     * Invoke a method or constructor\n+     * @see Opcode.Kind#INVOKE\n+     * @param opcode invoke opcode\n+     * @param owner class\n+     * @param name method name\n+     * @param desc method type\n+     * @param isInterface interface method invocation indication\n+     * @return this builder\n+     *\/\n@@ -461,0 +544,5 @@\n+    \/**\n+     * Invoke a dynamically-computed call site\n+     * @param ref dynamic call site\n+     * @return this builder\n+     *\/\n@@ -466,0 +554,5 @@\n+    \/**\n+     *\n+     * @param desc\n+     * @return this builder\n+     *\/\n@@ -479,0 +572,5 @@\n+    \/**\n+     * Create new object\n+     * @param type class\n+     * @return this builder\n+     *\/\n@@ -484,0 +582,5 @@\n+    \/**\n+     * Create new object\n+     * @param type class\n+     * @return this builder\n+     *\/\n@@ -488,0 +591,5 @@\n+    \/**\n+     * Create new array\n+     * @param typeKind primitive component type\n+     * @return this builder\n+     *\/\n@@ -493,0 +601,5 @@\n+    \/**\n+     * Create new array of reference\n+     * @param type component type\n+     * @return this builder\n+     *\/\n@@ -498,0 +611,5 @@\n+    \/**\n+     * Create new array of reference\n+     * @param type component type\n+     * @return this builder\n+     *\/\n@@ -502,0 +620,6 @@\n+    \/**\n+     * Create new multidimensional array\n+     * @param dimensions number of dimensions\n+     * @param type array type\n+     * @return this builder\n+     *\/\n@@ -508,0 +632,6 @@\n+    \/**\n+     * Create new multidimensional array\n+     * @param dimensions number of dimensions\n+     * @param type array type\n+     * @return this builder\n+     *\/\n@@ -513,0 +643,5 @@\n+    \/**\n+     * Array load instruction\n+     * @param tk array element type\n+     * @return this builder\n+     *\/\n@@ -519,0 +654,5 @@\n+    \/**\n+     * Array store instruction\n+     * @param tk array element type\n+     * @return this builder\n+     *\/\n@@ -525,0 +665,7 @@\n+    \/**\n+     * Type check instruction\n+     * @see Opcode.Kind#TYPE_CHECK\n+     * @param opcode type check instruction opcode\n+     * @param type type\n+     * @return this builder\n+     *\/\n@@ -531,0 +678,7 @@\n+    \/**\n+     * Type check instruction\n+     * @see Opcode.Kind#TYPE_CHECK\n+     * @param opcode type check instruction opcode\n+     * @param type type\n+     * @return this builder\n+     *\/\n@@ -535,0 +689,6 @@\n+    \/**\n+     * Convert instruction\n+     * @param fromType source type\n+     * @param toType target type\n+     * @return this builder\n+     *\/\n@@ -540,0 +700,6 @@\n+    \/**\n+     * Stack instruction\n+     * @param opcode stack instruction opcode\n+     * @see Opcode.Kind#STACK\n+     * @return this builder\n+     *\/\n@@ -545,0 +711,6 @@\n+    \/**\n+     * Operator instruction\n+     * @see Opcode.Kind#OPERATOR\n+     * @param opcode operator instruction opcode\n+     * @return this builder\n+     *\/\n@@ -550,0 +722,7 @@\n+    \/**\n+     * Constant instruction\n+     * @see Opcode.Kind#CONSTANT\n+     * @param opcode constant instruction opcode\n+     * @param value constant value\n+     * @return this builder\n+     *\/\n@@ -559,0 +738,5 @@\n+    \/**\n+     * Constant instruction\n+     * @param value constant value\n+     * @return this builder\n+     *\/\n@@ -589,1 +773,1 @@\n-        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+        return ldc(value);\n@@ -592,0 +776,6 @@\n+    \/**\n+     * Monitor instruction\n+     * @see Opcode.Kind#MONITOR\n+     * @param opcode monitor instruction opcode\n+     * @return this builder\n+     *\/\n@@ -597,0 +787,4 @@\n+    \/**\n+     * Do nothing instruction\n+     * @return this builder\n+     *\/\n@@ -602,1 +796,4 @@\n-\n+    \/**\n+     * Do nothing instruction\n+     * @return this builder\n+     *\/\n@@ -609,0 +806,5 @@\n+    \/**\n+     * Create new label bound with current position\n+     * @return this builder\n+     *\/\n+\n@@ -615,0 +817,5 @@\n+    \/**\n+     * Bind label with current position\n+     * @param label label\n+     * @return this builder\n+     *\/\n@@ -620,0 +827,5 @@\n+    \/**\n+     * Declare source line number of current position\n+     * @param line line number\n+     * @return this builder\n+     *\/\n@@ -625,0 +837,8 @@\n+    \/**\n+     * Exception table entry\n+     * @param start try block start\n+     * @param end try block end\n+     * @param handler exception handler start\n+     * @param catchType catch type or null to catch all exceptions and errors\n+     * @return this builder\n+     *\/\n@@ -630,0 +850,8 @@\n+    \/**\n+     * Exception table entry\n+     * @param start try block start\n+     * @param end try block end\n+     * @param handler exception handler start\n+     * @param catchType optional catch type, empty to catch all exceptions and errors\n+     * @return this builder\n+     *\/\n@@ -635,0 +863,8 @@\n+    \/**\n+     * Exception table entry\n+     * @param start try block start\n+     * @param end try block end\n+     * @param handler exception handler start\n+     * @param catchType catch type\n+     * @return this builder\n+     *\/\n@@ -640,0 +876,7 @@\n+    \/**\n+     * Exception table entry catching all exceptions and errors\n+     * @param start try block start\n+     * @param end try block end\n+     * @param handler exception handler start\n+     * @return this builder\n+     *\/\n@@ -645,0 +888,9 @@\n+    \/**\n+     * Character range entry\n+     * @param startScope start scope of the character range\n+     * @param endScope end scope of the character range\n+     * @param characterRangeStart the encoded start of the character range region (inclusive)\n+     * @param characterRangeEnd the encoded end of the character range region (exclusive)\n+     * @param flags flags word, indicating the kind of range\n+     * @return this builder\n+     *\/\n@@ -650,0 +902,9 @@\n+    \/**\n+     * Local variable entry\n+     * @param slot local variable slot\n+     * @param nameEntry variable name\n+     * @param descriptorEntry variable descriptor\n+     * @param startScope start scope of the variable\n+     * @param endScope end scope of the variable\n+     * @return this builder\n+     *\/\n@@ -655,0 +916,9 @@\n+    \/**\n+     * Local variable entry\n+     * @param slot local variable slot\n+     * @param name variable name\n+     * @param descriptor variable descriptor\n+     * @param startScope start scope of the variable\n+     * @param endScope end scope of the variable\n+     * @return this builder\n+     *\/\n@@ -662,0 +932,9 @@\n+    \/**\n+     * Local variable type entry\n+     * @param slot local variable slot\n+     * @param nameEntry variable name\n+     * @param signatureEntry variable signature\n+     * @param startScope start scope of the variable\n+     * @param endScope end scope of the variable\n+     * @return this builder\n+     *\/\n@@ -667,0 +946,9 @@\n+    \/**\n+     * Local variable type entry\n+     * @param slot local variable slot\n+     * @param name variable name\n+     * @param signature variable signature\n+     * @param startScope start scope of the variable\n+     * @param endScope end scope of the variable\n+     * @return this builder\n+     *\/\n@@ -676,0 +964,5 @@\n+    \/**\n+     * Push null\n+     * @return this builder\n+     *\/\n+\n@@ -680,0 +973,4 @@\n+    \/**\n+     * Load reference from array\n+     * @return this builder\n+     *\/\n@@ -684,0 +981,4 @@\n+    \/**\n+     * Store into reference array\n+     * @return this builder\n+     *\/\n@@ -688,0 +989,5 @@\n+    \/**\n+     * Load reference from local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -692,0 +998,5 @@\n+    \/**\n+     * Create new array of reference\n+     * @param classEntry component type\n+     * @return this builder\n+     *\/\n@@ -696,0 +1007,5 @@\n+    \/**\n+     * Create new array of reference\n+     * @param className component type\n+     * @return this builder\n+     *\/\n@@ -700,0 +1016,4 @@\n+    \/**\n+     * Return reference from method\n+     * @return this builder\n+     *\/\n@@ -704,0 +1024,4 @@\n+    \/**\n+     * Get length of array\n+     * @return this builder\n+     *\/\n@@ -708,0 +1032,5 @@\n+    \/**\n+     * Store reference into local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -712,0 +1041,4 @@\n+    \/**\n+     * Throw exception or error\n+     * @return this builder\n+     *\/\n@@ -716,0 +1049,4 @@\n+    \/**\n+     * Load byte from array\n+     * @return this builder\n+     *\/\n@@ -720,0 +1057,4 @@\n+    \/**\n+     * Store into byte array\n+     * @return this builder\n+     *\/\n@@ -724,0 +1065,5 @@\n+    \/**\n+     * Push byte\n+     * @param b byte\n+     * @return this builder\n+     *\/\n@@ -728,0 +1074,4 @@\n+    \/**\n+     * Load char from array\n+     * @return this builder\n+     *\/\n@@ -732,0 +1082,4 @@\n+    \/**\n+     * Store into char array\n+     * @return this builder\n+     *\/\n@@ -736,0 +1090,5 @@\n+    \/**\n+     * Check whether object is of given type\n+     * @param type object type\n+     * @return this builder\n+     *\/\n@@ -740,0 +1099,5 @@\n+    \/**\n+     * Check whether object is of given type\n+     * @param type object type\n+     * @return this builder\n+     *\/\n@@ -744,0 +1108,4 @@\n+    \/**\n+     * Convert double to float\n+     * @return this builder\n+     *\/\n@@ -748,0 +1116,4 @@\n+    \/**\n+     * Convert double to int\n+     * @return this builder\n+     *\/\n@@ -752,0 +1124,4 @@\n+    \/**\n+     * Convert double to long\n+     * @return this builder\n+     *\/\n@@ -756,0 +1132,4 @@\n+    \/**\n+     * Add double\n+     * @return this builder\n+     *\/\n@@ -760,0 +1140,4 @@\n+    \/**\n+     * Load double from array\n+     * @return this builder\n+     *\/\n@@ -764,0 +1148,4 @@\n+    \/**\n+     * Store into double array\n+     * @return this builder\n+     *\/\n@@ -768,0 +1156,4 @@\n+    \/**\n+     * Compare double\n+     * @return this builder\n+     *\/\n@@ -772,0 +1164,4 @@\n+    \/**\n+     * Compare double\n+     * @return this builder\n+     *\/\n@@ -776,0 +1172,4 @@\n+    \/**\n+     * Push double constant 0\n+     * @return this builder\n+     *\/\n@@ -780,0 +1180,4 @@\n+    \/**\n+     * Push double constant 1\n+     * @return this builder\n+     *\/\n@@ -784,0 +1188,4 @@\n+    \/**\n+     * Divide double\n+     * @return this builder\n+     *\/\n@@ -788,0 +1196,5 @@\n+    \/**\n+     * Load double from local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -792,0 +1205,4 @@\n+    \/**\n+     * Multiply double\n+     * @return this builder\n+     *\/\n@@ -796,0 +1213,4 @@\n+    \/**\n+     * Negate double\n+     * @return this builder\n+     *\/\n@@ -800,0 +1221,4 @@\n+    \/**\n+     * Remainder double\n+     * @return this builder\n+     *\/\n@@ -804,0 +1229,4 @@\n+    \/**\n+     * Return double from method\n+     * @return this builder\n+     *\/\n@@ -808,0 +1237,5 @@\n+    \/**\n+     * Store double into local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -812,0 +1246,4 @@\n+    \/**\n+     * Subtract double\n+     * @return this builder\n+     *\/\n@@ -816,0 +1254,4 @@\n+    \/**\n+     * Duplicate the top operand stack value\n+     * @return this builder\n+     *\/\n@@ -820,0 +1262,4 @@\n+    \/**\n+     * Duplicate the top one or two operand stack value\n+     * @return this builder\n+     *\/\n@@ -824,0 +1270,5 @@\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two or three\n+     * values down\n+     * @return this builder\n+     *\/\n@@ -828,0 +1279,5 @@\n+    \/**\n+     * Duplicate the top one or two operand stack values and insert two, three,\n+     * or four values down\n+     * @return this builder\n+     *\/\n@@ -832,0 +1288,4 @@\n+    \/**\n+     * Duplicate the top operand stack value and insert two values down\n+     * @return this builder\n+     *\/\n@@ -836,0 +1296,4 @@\n+    \/**\n+     * Duplicate the top operand stack value and insert two or three values down\n+     * @return this builder\n+     *\/\n@@ -840,0 +1304,4 @@\n+    \/**\n+     * Convert float to double\n+     * @return this builder\n+     *\/\n@@ -844,0 +1312,4 @@\n+    \/**\n+     * Convert float to int\n+     * @return this builder\n+     *\/\n@@ -848,0 +1320,4 @@\n+    \/**\n+     * Convert float to long\n+     * @return this builder\n+     *\/\n@@ -852,0 +1328,4 @@\n+    \/**\n+     * Add float\n+     * @return this builder\n+     *\/\n@@ -856,0 +1336,4 @@\n+    \/**\n+     * Load float from array\n+     * @return this builder\n+     *\/\n@@ -860,0 +1344,4 @@\n+    \/**\n+     * Store into float array\n+     * @return this builder\n+     *\/\n@@ -864,0 +1352,4 @@\n+    \/**\n+     * Compare float\n+     * @return this builder\n+     *\/\n@@ -868,0 +1360,4 @@\n+    \/**\n+     * Compare float\n+     * @return this builder\n+     *\/\n@@ -872,0 +1368,4 @@\n+    \/**\n+     * Push float constant 0\n+     * @return this builder\n+     *\/\n@@ -876,0 +1376,4 @@\n+    \/**\n+     * Push float constant 1\n+     * @return this builder\n+     *\/\n@@ -880,0 +1384,4 @@\n+    \/**\n+     * Push float constant 2\n+     * @return this builder\n+     *\/\n@@ -884,0 +1392,4 @@\n+    \/**\n+     * Divide float\n+     * @return this builder\n+     *\/\n@@ -888,0 +1400,5 @@\n+    \/**\n+     * Load float from local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -892,0 +1409,4 @@\n+    \/**\n+     * Multiply float\n+     * @return this builder\n+     *\/\n@@ -896,0 +1417,4 @@\n+    \/**\n+     * Negate float\n+     * @return this builder\n+     *\/\n@@ -900,0 +1425,4 @@\n+    \/**\n+     * Remainder float\n+     * @return this builder\n+     *\/\n@@ -904,0 +1433,4 @@\n+    \/**\n+     * Return float from method\n+     * @return this builder\n+     *\/\n@@ -908,0 +1441,5 @@\n+    \/**\n+     * Store float into local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -912,0 +1450,4 @@\n+    \/**\n+     * Subtract float\n+     * @return this builder\n+     *\/\n@@ -916,0 +1458,5 @@\n+    \/**\n+     * Fetch field from object\n+     * @param ref field reference\n+     * @return this builder\n+     *\/\n@@ -920,0 +1467,7 @@\n+    \/**\n+     * Fetch field from object\n+     * @param owner class\n+     * @param name field name\n+     * @param type field type\n+     * @return this builder\n+     *\/\n@@ -924,0 +1478,5 @@\n+    \/**\n+     * Get static field from class\n+     * @param ref field reference\n+     * @return this builder\n+     *\/\n@@ -928,0 +1487,7 @@\n+    \/**\n+     * Get static field from class\n+     * @param owner class\n+     * @param name field name\n+     * @param type field type\n+     * @return this builder\n+     *\/\n@@ -932,0 +1498,5 @@\n+    \/**\n+     * Branch always\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -936,0 +1507,5 @@\n+    \/**\n+     * Branch always (wide index)\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -940,0 +1516,4 @@\n+    \/**\n+     * Convert int to byte\n+     * @return this builder\n+     *\/\n@@ -944,0 +1524,4 @@\n+    \/**\n+     * Convert int to char\n+     * @return this builder\n+     *\/\n@@ -948,0 +1532,4 @@\n+    \/**\n+     * Convert int to double\n+     * @return this builder\n+     *\/\n@@ -952,0 +1540,4 @@\n+    \/**\n+     * Convert int to float\n+     * @return this builder\n+     *\/\n@@ -956,0 +1548,4 @@\n+    \/**\n+     * Convert int to long\n+     * @return this builder\n+     *\/\n@@ -960,0 +1556,4 @@\n+    \/**\n+     * Convert int to short\n+     * @return this builder\n+     *\/\n@@ -964,0 +1564,4 @@\n+    \/**\n+     * Add int\n+     * @return this builder\n+     *\/\n@@ -968,0 +1572,4 @@\n+    \/**\n+     * Load int from array\n+     * @return this builder\n+     *\/\n@@ -972,0 +1580,4 @@\n+    \/**\n+     * Boolean AND int\n+     * @return this builder\n+     *\/\n@@ -976,0 +1588,4 @@\n+    \/**\n+     * Store into int array\n+     * @return this builder\n+     *\/\n@@ -980,0 +1596,4 @@\n+    \/**\n+     * Push int constant 0\n+     * @return this builder\n+     *\/\n@@ -984,0 +1604,4 @@\n+    \/**\n+     * Push int constant 1\n+     * @return this builder\n+     *\/\n@@ -988,0 +1612,4 @@\n+    \/**\n+     * Push int constant 2\n+     * @return this builder\n+     *\/\n@@ -992,0 +1620,4 @@\n+    \/**\n+     * Push int constant 3\n+     * @return this builder\n+     *\/\n@@ -996,0 +1628,4 @@\n+    \/**\n+     * Push int constant 4\n+     * @return this builder\n+     *\/\n@@ -1000,0 +1636,4 @@\n+    \/**\n+     * Push int constant 5\n+     * @return this builder\n+     *\/\n@@ -1004,0 +1644,4 @@\n+    \/**\n+     * Push int constant -1\n+     * @return this builder\n+     *\/\n@@ -1008,0 +1652,4 @@\n+    \/**\n+     * Divide int\n+     * @return this builder\n+     *\/\n@@ -1012,0 +1660,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1016,0 +1669,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1020,0 +1678,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1024,0 +1687,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1028,0 +1696,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1032,0 +1705,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1036,0 +1714,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1040,0 +1723,5 @@\n+    \/**\n+     * Branch if int comparison succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1044,0 +1732,5 @@\n+    \/**\n+     * Branch if reference is not null\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1048,0 +1741,5 @@\n+    \/**\n+     * Branch if reference is null\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1052,0 +1750,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1056,0 +1759,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1060,0 +1768,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1064,0 +1777,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1068,0 +1786,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1072,0 +1795,5 @@\n+    \/**\n+     * Branch if int comparison with zero succeeds\n+     * @param target branch target\n+     * @return this builder\n+     *\/\n@@ -1076,0 +1804,6 @@\n+    \/**\n+     * Increment local variable by constant\n+     * @param slot local variable slot\n+     * @param val increment value\n+     * @return this builder\n+     *\/\n@@ -1080,0 +1814,5 @@\n+    \/**\n+     * Load int from local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -1084,0 +1823,4 @@\n+    \/**\n+     * Multiply int\n+     * @return this builder\n+     *\/\n@@ -1088,0 +1831,4 @@\n+    \/**\n+     * Negate int\n+     * @return this builder\n+     *\/\n@@ -1092,0 +1839,5 @@\n+    \/**\n+     * Determine if object is of given type\n+     * @param target target type\n+     * @return this builder\n+     *\/\n@@ -1096,0 +1848,5 @@\n+    \/**\n+     * Determine if object is of given type\n+     * @param target target type\n+     * @return this builder\n+     *\/\n@@ -1100,0 +1857,5 @@\n+    \/**\n+     * Invoke a dynamically-computed call site\n+     * @param ref dynamic call site\n+     * @return this builder\n+     *\/\n@@ -1104,0 +1866,5 @@\n+    \/**\n+     * Invoke a dynamically-computed call site\n+     * @param ref dynamic call site\n+     * @return this builder\n+     *\/\n@@ -1108,0 +1875,5 @@\n+    \/**\n+     * Invoke interface method\n+     * @param ref interface method reference\n+     * @return this builder\n+     *\/\n@@ -1112,0 +1884,7 @@\n+    \/**\n+     * Invoke interface method\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @return this builder\n+     *\/\n@@ -1116,0 +1895,6 @@\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     * @param ref interface method reference\n+     * @return this builder\n+     *\/\n@@ -1120,0 +1905,6 @@\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     * @param ref method reference\n+     * @return this builder\n+     *\/\n@@ -1124,0 +1915,8 @@\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @return this builder\n+     *\/\n@@ -1128,0 +1927,9 @@\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @param isInterface interface method invocation indication\n+     * @return this builder\n+     *\/\n@@ -1132,0 +1940,5 @@\n+    \/**\n+     * Invoke a class (static) method\n+     * @param ref interface method reference\n+     * @return this builder\n+     *\/\n@@ -1136,0 +1949,5 @@\n+    \/**\n+     * Invoke a class (static) method\n+     * @param ref method reference\n+     * @return this builder\n+     *\/\n@@ -1140,0 +1958,7 @@\n+    \/**\n+     * Invoke a class (static) method\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @return this builder\n+     *\/\n@@ -1144,0 +1969,8 @@\n+    \/**\n+     * Invoke a class (static) method\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @param isInterface\n+     * @return this builder\n+     *\/\n@@ -1148,0 +1981,5 @@\n+    \/**\n+     * Invoke instance method; dispatch based on class\n+     * @param ref method reference\n+     * @return this builder\n+     *\/\n@@ -1152,0 +1990,7 @@\n+    \/**\n+     * Invoke instance method; dispatch based on class\n+     * @param owner class\n+     * @param name method name\n+     * @param type method type\n+     * @return this builder\n+     *\/\n@@ -1156,0 +2001,4 @@\n+    \/**\n+     * Boolean OR int\n+     * @return this builder\n+     *\/\n@@ -1160,0 +2009,4 @@\n+    \/**\n+     * Remainder int\n+     * @return this builder\n+     *\/\n@@ -1164,0 +2017,4 @@\n+    \/**\n+     * Return int from method\n+     * @return this builder\n+     *\/\n@@ -1168,0 +2025,4 @@\n+    \/**\n+     * Shift left int\n+     * @return this builder\n+     *\/\n@@ -1172,0 +2033,4 @@\n+    \/**\n+     * Shift right int\n+     * @return this builder\n+     *\/\n@@ -1176,0 +2041,5 @@\n+    \/**\n+     * Store int into local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -1180,0 +2050,4 @@\n+    \/**\n+     * Subtract int\n+     * @return this builder\n+     *\/\n@@ -1184,0 +2058,4 @@\n+    \/**\n+     * Logical shift right int\n+     * @return this builder\n+     *\/\n@@ -1188,0 +2066,4 @@\n+    \/**\n+     * Boolean XOR int\n+     * @return this builder\n+     *\/\n@@ -1192,0 +2074,6 @@\n+    \/**\n+     * Access jump table by key match and jump\n+     * @param defaultTarget default jump target\n+     * @param cases switch cases\n+     * @return this builder\n+     *\/\n@@ -1196,0 +2084,4 @@\n+    \/**\n+     * Convert long to double\n+     * @return this builder\n+     *\/\n@@ -1200,0 +2092,4 @@\n+    \/**\n+     * Convert long to float\n+     * @return this builder\n+     *\/\n@@ -1204,0 +2100,4 @@\n+    \/**\n+     * Convert long to int\n+     * @return this builder\n+     *\/\n@@ -1208,0 +2108,4 @@\n+    \/**\n+     * Add long\n+     * @return this builder\n+     *\/\n@@ -1212,0 +2116,4 @@\n+    \/**\n+     * Load long from array\n+     * @return this builder\n+     *\/\n@@ -1216,0 +2124,4 @@\n+    \/**\n+     * Boolean AND long\n+     * @return this builder\n+     *\/\n@@ -1220,0 +2132,4 @@\n+    \/**\n+     * Store into long array\n+     * @return this builder\n+     *\/\n@@ -1224,0 +2140,4 @@\n+    \/**\n+     * Compare long\n+     * @return this builder\n+     *\/\n@@ -1228,0 +2148,4 @@\n+    \/**\n+     * Push long constant 0\n+     * @return this builder\n+     *\/\n@@ -1232,0 +2156,4 @@\n+    \/**\n+     * Push long constant 1\n+     * @return this builder\n+     *\/\n@@ -1236,0 +2164,14 @@\n+    \/**\n+     * Push item from run-time constant pool\n+     * @param value\n+     * @return this builder\n+     *\/\n+    default CodeBuilder ldc(ConstantDesc value) {\n+        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+    }\n+\n+    \/**\n+     * Push item from run-time constant pool\n+     * @param entry\n+     * @return this builder\n+     *\/\n@@ -1243,0 +2185,4 @@\n+    \/**\n+     * Divide long\n+     * @return this builder\n+     *\/\n@@ -1247,0 +2193,5 @@\n+    \/**\n+     * Load long from local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -1251,0 +2202,4 @@\n+    \/**\n+     * Multiply long\n+     * @return this builder\n+     *\/\n@@ -1255,0 +2210,4 @@\n+    \/**\n+     * Negate long\n+     * @return this builder\n+     *\/\n@@ -1259,0 +2218,4 @@\n+    \/**\n+     * Boolean OR long\n+     * @return this builder\n+     *\/\n@@ -1263,0 +2226,4 @@\n+    \/**\n+     * Remainder long\n+     * @return this builder\n+     *\/\n@@ -1267,0 +2234,4 @@\n+    \/**\n+     * Return long from method\n+     * @return this builder\n+     *\/\n@@ -1271,0 +2242,4 @@\n+    \/**\n+     * Shift left long\n+     * @return this builder\n+     *\/\n@@ -1275,0 +2250,4 @@\n+    \/**\n+     * Shift right long\n+     * @return this builder\n+     *\/\n@@ -1279,0 +2258,5 @@\n+    \/**\n+     * Store long into local variable\n+     * @param slot local variable slot\n+     * @return this builder\n+     *\/\n@@ -1283,0 +2267,4 @@\n+    \/**\n+     * Subtract long\n+     * @return this builder\n+     *\/\n@@ -1287,0 +2275,4 @@\n+    \/**\n+     * Logical shift right long\n+     * @return this builder\n+     *\/\n@@ -1291,0 +2283,4 @@\n+    \/**\n+     * Boolean XOR long\n+     * @return this builder\n+     *\/\n@@ -1295,0 +2291,4 @@\n+    \/**\n+     * Enter monitor for object\n+     * @return this builder\n+     *\/\n@@ -1299,0 +2299,4 @@\n+    \/**\n+     * Exit monitor for object\n+     * @return this builder\n+     *\/\n@@ -1303,0 +2307,6 @@\n+    \/**\n+     * Create new multidimensional array\n+     * @param array array type\n+     * @param dims number of dimensions\n+     * @return this builder\n+     *\/\n@@ -1307,0 +2317,6 @@\n+    \/**\n+     * Create new multidimensional array\n+     * @param array array type\n+     * @param dims number of dimensions\n+     * @return this builder\n+     *\/\n@@ -1311,0 +2327,5 @@\n+    \/**\n+     * Create new object\n+     * @param clazz class\n+     * @return this builder\n+     *\/\n@@ -1315,0 +2336,5 @@\n+    \/**\n+     * Create new object\n+     * @param clazz class\n+     * @return this builder\n+     *\/\n@@ -1319,0 +2345,5 @@\n+    \/**\n+     * Create new array\n+     * @param typeKind primitive array type\n+     * @return this builder\n+     *\/\n@@ -1323,0 +2354,4 @@\n+    \/**\n+     * Pop the top operand stack value\n+     * @return this builder\n+     *\/\n@@ -1327,0 +2362,4 @@\n+    \/**\n+     * Pop the top one or two operand stack values\n+     * @return this builder\n+     *\/\n@@ -1331,0 +2370,5 @@\n+    \/**\n+     * Set field in object\n+     * @param ref field reference\n+     * @return this builder\n+     *\/\n@@ -1335,0 +2379,7 @@\n+    \/**\n+     * Set field in object\n+     * @param owner class\n+     * @param name field name\n+     * @param type field type\n+     * @return this builder\n+     *\/\n@@ -1339,0 +2390,5 @@\n+    \/**\n+     * Set static field in class\n+     * @param ref field reference\n+     * @return this builder\n+     *\/\n@@ -1343,0 +2399,7 @@\n+    \/**\n+     * Set static field in class\n+     * @param owner class\n+     * @param name field name\n+     * @param type field type\n+     * @return this builder\n+     *\/\n@@ -1347,0 +2410,4 @@\n+    \/**\n+     * Return void from method\n+     * @return this builder\n+     *\/\n@@ -1351,0 +2418,4 @@\n+    \/**\n+     * Load short from array\n+     * @return this builder\n+     *\/\n@@ -1355,0 +2426,4 @@\n+    \/**\n+     * Store into short array\n+     * @return this builder\n+     *\/\n@@ -1359,0 +2434,5 @@\n+    \/**\n+     * Push short\n+     * @param s short\n+     * @return this builder\n+     *\/\n@@ -1363,0 +2443,4 @@\n+    \/**\n+     * Swap the top two operand stack values\n+     * @return this builder\n+     *\/\n@@ -1367,0 +2451,8 @@\n+    \/**\n+     * Access jump table by index and jump\n+     * @param low low key value\n+     * @param high high key value\n+     * @param defaultTarget default jump target\n+     * @param cases switch cases\n+     * @return this builder\n+     *\/\n@@ -1371,0 +2463,6 @@\n+    \/**\n+     * Access jump table by index and jump\n+     * @param defaultTarget default jump target\n+     * @param cases switch cases\n+     * @return this builder\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":1100,"deletions":2,"binary":false,"changes":1102,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @param <E> element type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CompoundElement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @param <T> custom attribute type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CustomAttribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n- * Describes the opcodes of the JVM instruction set, as well as a number of\n- * pseudo-instructions that may be encountered when traversing the instructions\n- * of a method.\n+ * Describes the opcodes of the JVM instruction set, as described in {@jvms 6.5}.\n+ * As well as a number of pseudo-instructions that may be encountered when\n+ * traversing the instructions of a method.\n@@ -39,0 +39,2 @@\n+\n+    \/** Do nothing *\/\n@@ -40,0 +42,2 @@\n+\n+    \/** Push null *\/\n@@ -41,0 +45,2 @@\n+\n+    \/** Push int constant -1 *\/\n@@ -42,0 +48,2 @@\n+\n+    \/** Push int constant 0 *\/\n@@ -43,0 +51,2 @@\n+\n+    \/** Push int constant 1 *\/\n@@ -44,0 +54,2 @@\n+\n+    \/** Push int constant 2 *\/\n@@ -45,0 +57,2 @@\n+\n+    \/** Push int constant 3 *\/\n@@ -46,0 +60,2 @@\n+\n+    \/** Push int constant 4 *\/\n@@ -47,0 +63,2 @@\n+\n+    \/** Push int constant 5 *\/\n@@ -48,0 +66,2 @@\n+\n+    \/** Push long constant 0 *\/\n@@ -49,0 +69,2 @@\n+\n+    \/** Push long constant  1 *\/\n@@ -50,0 +72,2 @@\n+\n+    \/** Push float constant 0 *\/\n@@ -51,0 +75,2 @@\n+\n+    \/** Push float constant 1 *\/\n@@ -52,0 +78,2 @@\n+\n+    \/** Push float constant 2 *\/\n@@ -53,0 +81,2 @@\n+\n+    \/** Push double constant 0 *\/\n@@ -54,0 +84,2 @@\n+\n+    \/** Push double constant 1 *\/\n@@ -55,0 +87,2 @@\n+\n+    \/** Push byte *\/\n@@ -56,0 +90,2 @@\n+\n+    \/** Push short *\/\n@@ -57,0 +93,2 @@\n+\n+    \/** Push item from run-time constant pool *\/\n@@ -58,0 +96,2 @@\n+\n+    \/** Push item from run-time constant pool (wide index) *\/\n@@ -59,0 +99,2 @@\n+\n+    \/** Push long or double from run-time constant pool (wide index) *\/\n@@ -60,0 +102,2 @@\n+\n+    \/** Load int from local variable *\/\n@@ -61,0 +105,2 @@\n+\n+    \/** Load long from local variable *\/\n@@ -62,0 +108,2 @@\n+\n+    \/** Load float from local variable *\/\n@@ -63,0 +111,2 @@\n+\n+    \/** Load double from local variable *\/\n@@ -64,0 +114,2 @@\n+\n+    \/** Load reference from local variable *\/\n@@ -65,0 +117,2 @@\n+\n+    \/** Load int from local variable 0 *\/\n@@ -66,0 +120,2 @@\n+\n+    \/** Load int from local variable 1 *\/\n@@ -67,0 +123,2 @@\n+\n+    \/** Load int from local variable 2 *\/\n@@ -68,0 +126,2 @@\n+\n+    \/** Load int from local variable3  *\/\n@@ -69,0 +129,2 @@\n+\n+    \/** Load long from local variable 0 *\/\n@@ -70,0 +132,2 @@\n+\n+    \/** Load long from local variable 1 *\/\n@@ -71,0 +135,2 @@\n+\n+    \/** Load long from local variable 2 *\/\n@@ -72,0 +138,2 @@\n+\n+    \/** Load long from local variable 3 *\/\n@@ -73,0 +141,2 @@\n+\n+    \/** Load float from local variable 0 *\/\n@@ -74,0 +144,2 @@\n+\n+    \/** Load float from local variable 1 *\/\n@@ -75,0 +147,2 @@\n+\n+    \/** Load float from local variable 2 *\/\n@@ -76,0 +150,2 @@\n+\n+    \/** Load float from local variable 3 *\/\n@@ -77,0 +153,2 @@\n+\n+    \/** Load double from local variable 0 *\/\n@@ -78,0 +156,2 @@\n+\n+    \/** Load double from local variable 1 *\/\n@@ -79,0 +159,2 @@\n+\n+    \/** Load double from local variable 2 *\/\n@@ -80,0 +162,2 @@\n+\n+    \/** Load double from local variable 3 *\/\n@@ -81,0 +165,2 @@\n+\n+    \/**  Load reference from local variable 0 *\/\n@@ -82,0 +168,2 @@\n+\n+    \/** Load reference from local variable 1 *\/\n@@ -83,0 +171,2 @@\n+\n+    \/** Load reference from local variable 2 *\/\n@@ -84,0 +174,2 @@\n+\n+    \/** Load reference from local variable 3 *\/\n@@ -85,0 +177,2 @@\n+\n+    \/** Load int from array *\/\n@@ -86,0 +180,2 @@\n+\n+    \/** Load long from array *\/\n@@ -87,0 +183,2 @@\n+\n+    \/** Load float from array *\/\n@@ -88,0 +186,2 @@\n+\n+    \/** Load double from array *\/\n@@ -89,0 +189,2 @@\n+\n+    \/** Load reference from array *\/\n@@ -90,0 +192,2 @@\n+\n+    \/** Load byte from array *\/\n@@ -91,0 +195,2 @@\n+\n+    \/** Load char from array *\/\n@@ -92,0 +198,2 @@\n+\n+    \/** Load short from array *\/\n@@ -93,0 +201,2 @@\n+\n+    \/** Store int into local variable *\/\n@@ -94,0 +204,2 @@\n+\n+    \/** Store long into local variable *\/\n@@ -95,0 +207,2 @@\n+\n+    \/** Store float into local variable *\/\n@@ -96,0 +210,2 @@\n+\n+    \/** Store double into local variable *\/\n@@ -97,0 +213,2 @@\n+\n+    \/** Store reference into local variable *\/\n@@ -98,0 +216,2 @@\n+\n+    \/** Store int into local variable 0 *\/\n@@ -99,0 +219,2 @@\n+\n+    \/** Store int into local variable 1 *\/\n@@ -100,0 +222,2 @@\n+\n+    \/** Store int into local variable 2 *\/\n@@ -101,0 +225,2 @@\n+\n+    \/** Store int into local variable 3 *\/\n@@ -102,0 +228,2 @@\n+\n+    \/** Store long into local variable 0 *\/\n@@ -103,0 +231,2 @@\n+\n+    \/** Store long into local variable 1 *\/\n@@ -104,0 +234,2 @@\n+\n+    \/** Store long into local variable 2 *\/\n@@ -105,0 +237,2 @@\n+\n+    \/** Store long into local variable 3 *\/\n@@ -106,0 +240,2 @@\n+\n+    \/** Store float into local variable 0 *\/\n@@ -107,0 +243,2 @@\n+\n+    \/** Store float into local variable 1 *\/\n@@ -108,0 +246,2 @@\n+\n+    \/** Store float into local variable 2 *\/\n@@ -109,0 +249,2 @@\n+\n+    \/** Store float into local variable 3 *\/\n@@ -110,0 +252,2 @@\n+\n+    \/** Store double into local variable 0 *\/\n@@ -111,0 +255,2 @@\n+\n+    \/** Store double into local variable 1 *\/\n@@ -112,0 +258,2 @@\n+\n+    \/** Store double into local variable 2 *\/\n@@ -113,0 +261,2 @@\n+\n+    \/** Store double into local variable 3 *\/\n@@ -114,0 +264,2 @@\n+\n+    \/** Store reference into local variable 0 *\/\n@@ -115,0 +267,2 @@\n+\n+    \/** Store reference into local variable 1 *\/\n@@ -116,0 +270,2 @@\n+\n+    \/** Store reference into local variable 2 *\/\n@@ -117,0 +273,2 @@\n+\n+    \/** Store reference into local variable 3 *\/\n@@ -118,0 +276,2 @@\n+\n+    \/** Store into int array *\/\n@@ -119,0 +279,2 @@\n+\n+    \/** Store into long array *\/\n@@ -120,0 +282,2 @@\n+\n+    \/** Store into float array *\/\n@@ -121,0 +285,2 @@\n+\n+    \/** Store into double array *\/\n@@ -122,0 +288,2 @@\n+\n+    \/** Store into reference array *\/\n@@ -123,0 +291,2 @@\n+\n+    \/** Store into byte array *\/\n@@ -124,0 +294,2 @@\n+\n+    \/** Store into char array *\/\n@@ -125,0 +297,2 @@\n+\n+    \/** Store into short array *\/\n@@ -126,0 +300,2 @@\n+\n+    \/** Pop the top operand stack value *\/\n@@ -127,0 +303,2 @@\n+\n+    \/** Pop the top one or two operand stack values *\/\n@@ -128,0 +306,2 @@\n+\n+    \/** Duplicate the top operand stack value *\/\n@@ -129,0 +309,2 @@\n+\n+    \/** Duplicate the top operand stack value and insert two values down *\/\n@@ -130,0 +312,2 @@\n+\n+    \/** Duplicate the top operand stack value and insert two or three values down *\/\n@@ -131,0 +315,2 @@\n+\n+    \/** Duplicate the top one or two operand stack values *\/\n@@ -132,0 +318,2 @@\n+\n+    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n@@ -133,0 +321,2 @@\n+\n+    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n@@ -134,0 +324,2 @@\n+\n+    \/** Swap the top two operand stack values *\/\n@@ -135,0 +327,2 @@\n+\n+    \/** Add int *\/\n@@ -136,0 +330,2 @@\n+\n+    \/** Add long *\/\n@@ -137,0 +333,2 @@\n+\n+    \/** Add float *\/\n@@ -138,0 +336,2 @@\n+\n+    \/** Add double *\/\n@@ -139,0 +339,2 @@\n+\n+    \/** Subtract int *\/\n@@ -140,0 +342,2 @@\n+\n+    \/** Subtract long *\/\n@@ -141,0 +345,2 @@\n+\n+    \/** Subtract float *\/\n@@ -142,0 +348,2 @@\n+\n+    \/** Subtract double *\/\n@@ -143,0 +351,2 @@\n+\n+    \/** Multiply int *\/\n@@ -144,0 +354,2 @@\n+\n+    \/** Multiply long *\/\n@@ -145,0 +357,2 @@\n+\n+    \/** Multiply float *\/\n@@ -146,0 +360,2 @@\n+\n+    \/** Multiply double *\/\n@@ -147,0 +363,2 @@\n+\n+    \/** Divide int *\/\n@@ -148,0 +366,2 @@\n+\n+    \/** Divide long *\/\n@@ -149,0 +369,2 @@\n+\n+    \/** Divide float *\/\n@@ -150,0 +372,2 @@\n+\n+    \/** Divide double *\/\n@@ -151,0 +375,2 @@\n+\n+    \/** Remainder int *\/\n@@ -152,0 +378,2 @@\n+\n+    \/** Remainder long *\/\n@@ -153,0 +381,2 @@\n+\n+    \/** Remainder float *\/\n@@ -154,0 +384,2 @@\n+\n+    \/** Remainder double *\/\n@@ -155,0 +387,2 @@\n+\n+    \/** Negate int *\/\n@@ -156,0 +390,2 @@\n+\n+    \/** Negate long *\/\n@@ -157,0 +393,2 @@\n+\n+    \/** Negate float *\/\n@@ -158,0 +396,2 @@\n+\n+    \/** Negate double *\/\n@@ -159,0 +399,2 @@\n+\n+    \/** Shift left int *\/\n@@ -160,0 +402,2 @@\n+\n+    \/** Shift left long *\/\n@@ -161,0 +405,2 @@\n+\n+    \/** Shift right int *\/\n@@ -162,0 +408,2 @@\n+\n+    \/** Shift right long *\/\n@@ -163,0 +411,2 @@\n+\n+    \/** Logical shift right int *\/\n@@ -164,0 +414,2 @@\n+\n+    \/** Logical shift right long *\/\n@@ -165,0 +417,2 @@\n+\n+    \/** Boolean AND int *\/\n@@ -166,0 +420,2 @@\n+\n+    \/** Boolean AND long *\/\n@@ -167,0 +423,2 @@\n+\n+    \/** Boolean OR int *\/\n@@ -168,0 +426,2 @@\n+\n+    \/** Boolean OR long *\/\n@@ -169,0 +429,2 @@\n+\n+    \/** Boolean XOR int *\/\n@@ -170,0 +432,2 @@\n+\n+    \/** Boolean XOR long *\/\n@@ -171,0 +435,2 @@\n+\n+    \/** Increment local variable by constant *\/\n@@ -172,0 +438,2 @@\n+\n+    \/** Convert int to long *\/\n@@ -173,0 +441,2 @@\n+\n+    \/** Convert int to float *\/\n@@ -174,0 +444,2 @@\n+\n+    \/** Convert int to double *\/\n@@ -175,0 +447,2 @@\n+\n+    \/** Convert long to int *\/\n@@ -176,0 +450,2 @@\n+\n+    \/** Convert long to float *\/\n@@ -177,0 +453,2 @@\n+\n+    \/** Convert long to double *\/\n@@ -178,0 +456,2 @@\n+\n+    \/** Convert float to int *\/\n@@ -179,0 +459,2 @@\n+\n+    \/** Convert float to long *\/\n@@ -180,0 +462,2 @@\n+\n+    \/** Convert float to double *\/\n@@ -181,0 +465,2 @@\n+\n+    \/** Convert double to int *\/\n@@ -182,0 +468,2 @@\n+\n+    \/** Convert double to long *\/\n@@ -183,0 +471,2 @@\n+\n+    \/** Convert double to float *\/\n@@ -184,0 +474,2 @@\n+\n+    \/** Convert int to byte *\/\n@@ -185,0 +477,2 @@\n+\n+    \/** Convert int to char *\/\n@@ -186,0 +480,2 @@\n+\n+    \/** Convert int to short *\/\n@@ -187,0 +483,2 @@\n+\n+    \/** Compare long *\/\n@@ -188,0 +486,2 @@\n+\n+    \/** Compare float *\/\n@@ -189,0 +489,2 @@\n+\n+    \/** Compare float *\/\n@@ -190,0 +492,2 @@\n+\n+    \/** Compare double *\/\n@@ -191,0 +495,2 @@\n+\n+    \/** Compare double *\/\n@@ -192,0 +498,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -193,0 +501,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -194,0 +504,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -195,0 +507,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -196,0 +510,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -197,0 +513,2 @@\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n@@ -198,0 +516,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -199,0 +519,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -200,0 +522,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -201,0 +525,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -202,0 +528,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -203,0 +531,2 @@\n+\n+    \/** Branch if int comparison succeeds *\/\n@@ -204,0 +534,2 @@\n+\n+    \/** Branch if reference comparison succeeds *\/\n@@ -205,0 +537,2 @@\n+\n+    \/** Branch if reference comparison succeeds *\/\n@@ -206,0 +540,2 @@\n+\n+    \/** Branch always *\/\n@@ -207,0 +543,2 @@\n+\n+    \/** Jump subroutine *\/\n@@ -208,0 +546,2 @@\n+\n+    \/** Return from subroutine *\/\n@@ -209,0 +549,2 @@\n+\n+    \/** Access jump table by index and jump *\/\n@@ -210,0 +552,2 @@\n+\n+    \/** Access jump table by key match and jump *\/\n@@ -211,0 +555,2 @@\n+\n+    \/** Return int from method *\/\n@@ -212,0 +558,2 @@\n+\n+    \/** Return long from method *\/\n@@ -213,0 +561,2 @@\n+\n+    \/** Return float from method *\/\n@@ -214,0 +564,2 @@\n+\n+    \/** Return double from method *\/\n@@ -215,0 +567,2 @@\n+\n+    \/** Return reference from method *\/\n@@ -216,0 +570,2 @@\n+\n+    \/** Return void from method *\/\n@@ -217,0 +573,2 @@\n+\n+    \/** Get static field from class *\/\n@@ -218,0 +576,2 @@\n+\n+    \/** Set static field in class *\/\n@@ -219,0 +579,2 @@\n+\n+    \/** Fetch field from object *\/\n@@ -220,0 +582,2 @@\n+\n+    \/** Set field in object *\/\n@@ -221,0 +585,2 @@\n+\n+    \/** Invoke instance method; dispatch based on class *\/\n@@ -222,0 +588,5 @@\n+\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     *\/\n@@ -223,0 +594,2 @@\n+\n+    \/** Invoke a class (static) method *\/\n@@ -224,0 +597,2 @@\n+\n+    \/** Invoke interface method *\/\n@@ -225,0 +600,2 @@\n+\n+    \/** Invoke a dynamically-computed call site *\/\n@@ -226,0 +603,2 @@\n+\n+    \/** Create new object *\/\n@@ -227,0 +606,2 @@\n+\n+    \/** Create new array *\/\n@@ -228,0 +609,2 @@\n+\n+    \/** Create new array of reference *\/\n@@ -229,0 +612,2 @@\n+\n+    \/** Get length of array *\/\n@@ -230,0 +615,2 @@\n+\n+    \/** Throw exception or error *\/\n@@ -231,0 +618,2 @@\n+\n+    \/** Check whether object is of given type *\/\n@@ -232,0 +621,2 @@\n+\n+    \/** Determine if object is of given type *\/\n@@ -233,0 +624,2 @@\n+\n+    \/** Enter monitor for object *\/\n@@ -234,0 +627,2 @@\n+\n+    \/** Exit monitor for object *\/\n@@ -235,0 +630,2 @@\n+\n+    \/** Create new multidimensional array *\/\n@@ -236,0 +633,2 @@\n+\n+    \/** Branch if reference is null *\/\n@@ -237,0 +636,2 @@\n+\n+    \/** Branch if reference not null *\/\n@@ -238,0 +639,2 @@\n+\n+    \/** Branch always (wide index) *\/\n@@ -239,0 +642,2 @@\n+\n+    \/** Jump subroutine (wide index) *\/\n@@ -240,0 +645,2 @@\n+\n+    \/** Load int from local variable (wide index) *\/\n@@ -241,0 +648,2 @@\n+\n+    \/** Load long from local variable (wide index) *\/\n@@ -242,0 +651,2 @@\n+\n+    \/** Load float from local variable (wide index) *\/\n@@ -243,0 +654,2 @@\n+\n+    \/** Load double from local variable (wide index) *\/\n@@ -244,0 +657,2 @@\n+\n+    \/** Load reference from local variable (wide index) *\/\n@@ -245,0 +660,2 @@\n+\n+    \/** Store int into local variable (wide index) *\/\n@@ -246,0 +663,2 @@\n+\n+    \/** Store long into local variable (wide index) *\/\n@@ -247,0 +666,2 @@\n+\n+    \/** Store float into local variable (wide index) *\/\n@@ -248,0 +669,2 @@\n+\n+    \/** Store double into local variable (wide index) *\/\n@@ -249,0 +672,2 @@\n+\n+    \/** Store reference into local variable (wide index) *\/\n@@ -250,0 +675,2 @@\n+\n+    \/** Return from subroutine (wide index) *\/\n@@ -251,0 +678,2 @@\n+\n+    \/** Increment local variable by constant (wide index) *\/\n@@ -257,5 +686,369 @@\n-        LOAD, STORE, INCREMENT, BRANCH, LOOKUP_SWITCH, TABLE_SWITCH, RETURN, THROW_EXCEPTION,\n-        FIELD_ACCESS, INVOKE, INVOKE_DYNAMIC,\n-        NEW_OBJECT, NEW_PRIMITIVE_ARRAY, NEW_REF_ARRAY, NEW_MULTI_ARRAY,\n-        TYPE_CHECK, ARRAY_LOAD, ARRAY_STORE, STACK, CONVERT, OPERATOR, CONSTANT,\n-        MONITOR, NOP, DISCONTINUED_JSR, DISCONTINUED_RET;\n+\n+        \/**\n+         * Load from local variable\n+         *\n+         * @see Opcode#ILOAD\n+         * @see Opcode#LLOAD\n+         * @see Opcode#FLOAD\n+         * @see Opcode#DLOAD\n+         * @see Opcode#ALOAD\n+         * @see Opcode#ILOAD_0\n+         * @see Opcode#ILOAD_1\n+         * @see Opcode#ILOAD_2\n+         * @see Opcode#ILOAD_3\n+         * @see Opcode#LLOAD_0\n+         * @see Opcode#LLOAD_1\n+         * @see Opcode#LLOAD_2\n+         * @see Opcode#LLOAD_3\n+         * @see Opcode#FLOAD_0\n+         * @see Opcode#FLOAD_1\n+         * @see Opcode#FLOAD_2\n+         * @see Opcode#FLOAD_3\n+         * @see Opcode#DLOAD_0\n+         * @see Opcode#DLOAD_1\n+         * @see Opcode#DLOAD_2\n+         * @see Opcode#DLOAD_3\n+         * @see Opcode#ALOAD_0\n+         * @see Opcode#ALOAD_1\n+         * @see Opcode#ALOAD_2\n+         * @see Opcode#ALOAD_3\n+         * @see Opcode#ILOAD_W\n+         * @see Opcode#LLOAD_W\n+         * @see Opcode#FLOAD_W\n+         * @see Opcode#DLOAD_W\n+         * @see Opcode#ALOAD_W\n+         *\/\n+        LOAD,\n+\n+        \/**\n+         * Store into local variable\n+         *\n+         * @see Opcode#ISTORE\n+         * @see Opcode#LSTORE\n+         * @see Opcode#FSTORE\n+         * @see Opcode#DSTORE\n+         * @see Opcode#ASTORE\n+         * @see Opcode#ISTORE_0\n+         * @see Opcode#ISTORE_1\n+         * @see Opcode#ISTORE_2\n+         * @see Opcode#ISTORE_3\n+         * @see Opcode#LSTORE_0\n+         * @see Opcode#LSTORE_1\n+         * @see Opcode#LSTORE_2\n+         * @see Opcode#LSTORE_3\n+         * @see Opcode#FSTORE_0\n+         * @see Opcode#FSTORE_1\n+         * @see Opcode#FSTORE_2\n+         * @see Opcode#FSTORE_3\n+         * @see Opcode#DSTORE_0\n+         * @see Opcode#DSTORE_1\n+         * @see Opcode#DSTORE_2\n+         * @see Opcode#DSTORE_3\n+         * @see Opcode#ASTORE_0\n+         * @see Opcode#ASTORE_1\n+         * @see Opcode#ASTORE_2\n+         * @see Opcode#ASTORE_3\n+         * @see Opcode#ISTORE_W\n+         * @see Opcode#LSTORE_W\n+         * @see Opcode#FSTORE_W\n+         * @see Opcode#DSTORE_W\n+         * @see Opcode#ASTORE_W\n+         *\/\n+        STORE,\n+\n+        \/**\n+         * Increment local variable\n+         *\n+         * @see Opcode#IINC\n+         * @see Opcode#IINC_W\n+         *\/\n+        INCREMENT,\n+\n+        \/**\n+         * Branch\n+         *\n+         * @see Opcode#IFEQ\n+         * @see Opcode#IFNE\n+         * @see Opcode#IFLT\n+         * @see Opcode#IFGE\n+         * @see Opcode#IFGT\n+         * @see Opcode#IFLE\n+         * @see Opcode#IF_ICMPEQ\n+         * @see Opcode#IF_ICMPNE\n+         * @see Opcode#IF_ICMPLT\n+         * @see Opcode#IF_ICMPGE\n+         * @see Opcode#IF_ICMPGT\n+         * @see Opcode#IF_ICMPLE\n+         * @see Opcode#IF_ACMPEQ\n+         * @see Opcode#IF_ACMPNE\n+         * @see Opcode#GOTO\n+         * @see Opcode#IFNULL\n+         * @see Opcode#IFNONNULL\n+         * @see Opcode#GOTO_W\n+         *\/\n+        BRANCH,\n+\n+        \/**\n+         * Access jump table by key match and jump\n+         *\n+         * @see Opcode#LOOKUPSWITCH\n+         *\/\n+        LOOKUP_SWITCH,\n+\n+        \/**\n+         * Access jump table by index and jump\n+         *\n+         * @see Opcode#TABLESWITCH\n+         *\/\n+        TABLE_SWITCH,\n+\n+        \/**\n+         * Return from method\n+         *\n+         * @see Opcode#IRETURN\n+         * @see Opcode#LRETURN\n+         * @see Opcode#FRETURN\n+         * @see Opcode#DRETURN\n+         * @see Opcode#ARETURN\n+         * @see Opcode#RETURN\n+         *\/\n+        RETURN,\n+\n+        \/**\n+         * Throw exception or error\n+         *\n+         * @see Opcode#ATHROW\n+         *\/\n+        THROW_EXCEPTION,\n+\n+        \/**\n+         * Access field\n+         *\n+         * @see Opcode#GETSTATIC\n+         * @see Opcode#PUTSTATIC\n+         * @see Opcode#GETFIELD\n+         * @see Opcode#PUTFIELD\n+         *\/\n+        FIELD_ACCESS,\n+\n+        \/**\n+         * Invoke method or constructor\n+         *\n+         * @see Opcode#INVOKEVIRTUAL\n+         * @see Opcode#INVOKESPECIAL\n+         * @see Opcode#INVOKESTATIC\n+         * @see Opcode#INVOKEINTERFACE\n+         *\/\n+        INVOKE,\n+\n+        \/**\n+         * Invoke a dynamically-computed call site\n+         *\n+         * @see Opcode#INVOKEDYNAMIC\n+         *\/\n+        INVOKE_DYNAMIC,\n+\n+        \/**\n+         * Create new object\n+         *\n+         * @see Opcode#NEW\n+         *\/\n+        NEW_OBJECT,\n+\n+        \/**\n+         * Create new array\n+         *\n+         * @see Opcode#NEWARRAY\n+         *\/\n+        NEW_PRIMITIVE_ARRAY,\n+\n+        \/**\n+         * Create new reference array\n+         *\n+         * @see Opcode#ANEWARRAY\n+         *\/\n+        NEW_REF_ARRAY,\n+\n+        \/**\n+         * Create new multidimensional array\n+         *\n+         * @see Opcode#MULTIANEWARRAY\n+         *\/\n+        NEW_MULTI_ARRAY,\n+\n+        \/**\n+         * Check whether object is of given type\n+         *\n+         * @see Opcode#CHECKCAST\n+         * @see Opcode#INSTANCEOF\n+         *\/\n+        TYPE_CHECK,\n+\n+        \/**\n+         * Load from array\n+         *\n+         * @see Opcode#IALOAD\n+         * @see Opcode#LALOAD\n+         * @see Opcode#FALOAD\n+         * @see Opcode#DALOAD\n+         * @see Opcode#AALOAD\n+         * @see Opcode#BALOAD\n+         * @see Opcode#CALOAD\n+         * @see Opcode#SALOAD\n+         *\/\n+        ARRAY_LOAD,\n+\n+        \/**\n+         * Store into array\n+         *\n+         * @see Opcode#IASTORE\n+         * @see Opcode#LASTORE\n+         * @see Opcode#FASTORE\n+         * @see Opcode#DASTORE\n+         * @see Opcode#AASTORE\n+         * @see Opcode#BASTORE\n+         * @see Opcode#CASTORE\n+         * @see Opcode#SASTORE\n+         *\/\n+        ARRAY_STORE,\n+\n+        \/**\n+         * Stack operations\n+         *\n+         * @see Opcode#POP\n+         * @see Opcode#POP2\n+         * @see Opcode#DUP\n+         * @see Opcode#DUP_X1\n+         * @see Opcode#DUP_X2\n+         * @see Opcode#DUP2\n+         * @see Opcode#DUP2_X1\n+         * @see Opcode#DUP2_X2\n+         * @see Opcode#SWAP\n+         *\/\n+        STACK,\n+\n+        \/**\n+         * Type conversions\n+         *\n+         * @see Opcode#I2L\n+         * @see Opcode#I2F\n+         * @see Opcode#I2D\n+         * @see Opcode#L2I\n+         * @see Opcode#L2F\n+         * @see Opcode#L2D\n+         * @see Opcode#F2I\n+         * @see Opcode#F2L\n+         * @see Opcode#F2D\n+         * @see Opcode#D2I\n+         * @see Opcode#D2L\n+         * @see Opcode#D2F\n+         * @see Opcode#I2B\n+         * @see Opcode#I2C\n+         * @see Opcode#I2S\n+         *\/\n+        CONVERT,\n+\n+        \/**\n+         * Operators\n+         *\n+         * @see Opcode#IADD\n+         * @see Opcode#LADD\n+         * @see Opcode#FADD\n+         * @see Opcode#DADD\n+         * @see Opcode#ISUB\n+         * @see Opcode#LSUB\n+         * @see Opcode#FSUB\n+         * @see Opcode#DSUB\n+         * @see Opcode#IMUL\n+         * @see Opcode#LMUL\n+         * @see Opcode#FMUL\n+         * @see Opcode#DMUL\n+         * @see Opcode#IDIV\n+         * @see Opcode#LDIV\n+         * @see Opcode#FDIV\n+         * @see Opcode#DDIV\n+         * @see Opcode#IREM\n+         * @see Opcode#LREM\n+         * @see Opcode#FREM\n+         * @see Opcode#DREM\n+         * @see Opcode#INEG\n+         * @see Opcode#LNEG\n+         * @see Opcode#FNEG\n+         * @see Opcode#DNEG\n+         * @see Opcode#ISHL\n+         * @see Opcode#LSHL\n+         * @see Opcode#ISHR\n+         * @see Opcode#LSHR\n+         * @see Opcode#IUSHR\n+         * @see Opcode#LUSHR\n+         * @see Opcode#IAND\n+         * @see Opcode#LAND\n+         * @see Opcode#IOR\n+         * @see Opcode#LOR\n+         * @see Opcode#IXOR\n+         * @see Opcode#LXOR\n+         * @see Opcode#LCMP\n+         * @see Opcode#FCMPL\n+         * @see Opcode#FCMPG\n+         * @see Opcode#DCMPL\n+         * @see Opcode#DCMPG\n+         * @see Opcode#ARRAYLENGTH\n+         *\/\n+        OPERATOR,\n+\n+        \/**\n+         * Constants\n+         *\n+         * @see Opcode#ACONST_NULL\n+         * @see Opcode#ICONST_M1\n+         * @see Opcode#ICONST_0\n+         * @see Opcode#ICONST_1\n+         * @see Opcode#ICONST_2\n+         * @see Opcode#ICONST_3\n+         * @see Opcode#ICONST_4\n+         * @see Opcode#ICONST_5\n+         * @see Opcode#LCONST_0\n+         * @see Opcode#LCONST_1\n+         * @see Opcode#FCONST_0\n+         * @see Opcode#FCONST_1\n+         * @see Opcode#FCONST_2\n+         * @see Opcode#DCONST_0\n+         * @see Opcode#DCONST_1\n+         * @see Opcode#BIPUSH\n+         * @see Opcode#SIPUSH\n+         * @see Opcode#LDC\n+         * @see Opcode#LDC_W\n+         * @see Opcode#LDC2_W\n+         *\/\n+        CONSTANT,\n+\n+        \/**\n+         * Monitor\n+         *\n+         * @see Opcode#MONITORENTER\n+         * @see Opcode#MONITOREXIT\n+         *\/\n+        MONITOR,\n+\n+        \/**\n+         * Do nothing\n+         *\n+         * @see Opcode#NOP\n+         *\/\n+        NOP,\n+\n+        \/**\n+         * Discontinued jump subroutine\n+         *\n+         * @see Opcode#JSR\n+         * @see Opcode#JSR_W\n+         *\/\n+        DISCONTINUED_JSR,\n+\n+        \/**\n+         * Discontinued return from subroutine\n+         *\n+         * @see Opcode#RET\n+         * @see Opcode#RET_W\n+         *\/\n+        DISCONTINUED_RET;\n@@ -273,1 +1066,1 @@\n-        this(bytecode, sizeIfFixed, kind, null, null, 0, null);\n+        this(bytecode, sizeIfFixed, kind, null, null, -1, null);\n@@ -277,1 +1070,1 @@\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, 0, null);\n+        this(bytecode, sizeIfFixed, kind, typeKind, null, -1, null);\n@@ -308,0 +1101,3 @@\n+    \/**\n+     * {@return bytecode}\n+     *\/\n@@ -310,0 +1106,3 @@\n+    \/**\n+     * {@return true if the instruction has extended local variable index by additional bytes}\n+     *\/\n@@ -312,0 +1111,3 @@\n+    \/**\n+     * {@return size of the instruction if fixed, or -1 otherwise}\n+     *\/\n@@ -314,0 +1116,3 @@\n+    \/**\n+     * {@return instruction kind}\n+     *\/\n@@ -316,0 +1121,3 @@\n+    \/**\n+     * {@return primary type kind for instructions operating with at least one type, or null otherwise}\n+     *\/\n@@ -320,0 +1128,3 @@\n+    \/**\n+     * {@return secondary type kind for instructions operating with two types, or null otherwise}\n+     *\/\n@@ -324,0 +1135,3 @@\n+    \/**\n+     * {@return local variable slot for instructions operating with local variable, or -1 otherwise}\n+     *\/\n@@ -328,0 +1142,3 @@\n+    \/**\n+     * {@return constant value for constant instructions, or null otherwise}\n+     *\/\n@@ -332,0 +1149,3 @@\n+    \/**\n+     * {@return true if the instruction represents an unconditional branch}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Opcode.java","additions":830,"deletions":10,"binary":false,"changes":840,"status":"modified"},{"patch":"@@ -179,1 +179,20 @@\n-            DEFAULT, UNBOUNDED, EXTENDS, SUPER;\n+\n+            \/**\n+             * default bound wildcard (empty)\n+             *\/\n+            DEFAULT,\n+\n+            \/**\n+             * unbounded indicator {@code *}\n+             *\/\n+            UNBOUNDED,\n+\n+            \/**\n+             * upper-bounded indicator {@code +}\n+             *\/\n+            EXTENDS,\n+\n+            \/**\n+             * lower-bounded indicator {@code -}\n+             *\/\n+            SUPER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Signature.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * Models an annotation on a type use.\n+ * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n@@ -72,1 +72,1 @@\n-     * The kind of target on which the annotation appears.\n+     * The kind of target on which the annotation appears, as defined in {@jvms 4.7.20.1}.\n@@ -149,0 +149,3 @@\n+        \/**\n+         * {@return target type value}\n+         *\/\n@@ -153,0 +156,3 @@\n+        \/**\n+         * {@return size of the target type if fixed or -1 if variable}\n+         *\/\n@@ -228,0 +234,3 @@\n+        \/**\n+         * {@return type of the target}\n+         *\/\n@@ -230,0 +239,3 @@\n+        \/**\n+         * {@return size of the target info}\n+         *\/\n@@ -234,0 +246,5 @@\n+        \/**\n+         * {@return target for annotations on a class or method type parameter declaration}\n+         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER} or {@link TargetType#METHOD_TYPE_PARAMETER}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -238,0 +255,4 @@\n+        \/**\n+         * {@return target for annotations on a class type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -242,0 +263,4 @@\n+        \/**\n+         * {@return target for annotations on a method type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -246,0 +271,4 @@\n+        \/**\n+         * {@return target for annotations on the type of an \"extends\" or \"implements\" clause}\n+         * @param supertypeIndex the index into the interfaces array or 65535 to indicate it is the superclass\n+         *\/\n@@ -250,0 +279,7 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, interface, method, or constructor}\n+         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER_BOUND} or {@link TargetType#METHOD_TYPE_PARAMETER_BOUND}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -254,0 +290,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, or interface}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -258,0 +300,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic method, or constructor}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -262,0 +310,4 @@\n+        \/**\n+         * {@return target for annotations on }\n+         * @param targetType {@link TargetType#FIELD}, {@link TargetType#METHOD_RETURN} or {@link TargetType#METHOD_RECEIVER}\n+         *\/\n@@ -266,0 +318,3 @@\n+        \/**\n+         * {@return target for annotations on the type in a field or record declaration}\n+         *\/\n@@ -270,0 +325,3 @@\n+        \/**\n+         * {@return target for annotations on the return type of a method or a newly constructed object}\n+         *\/\n@@ -274,0 +332,3 @@\n+        \/**\n+         * {@return target for annotations on the receiver type of a method or constructor}\n+         *\/\n@@ -278,0 +339,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a formal parameter declaration of a method,\n+         * constructor, or lambda expression}\n+         * @param formalParameterIndex specifies which formal parameter declaration has an annotated type\n+         *\/\n@@ -282,0 +348,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in the throws clause of a method or\n+         * constructor declaration}\n+         * @param throwsTargetIndex an index into the exception table of the Exceptions attribute of the method\n+         *\/\n@@ -286,0 +357,6 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration,\n+         * including a variable declared as a resource in a try-with-resources statement}\n+         * @param targetType {@link TargetType#LOCAL_VARIABLE} or {@link TargetType#RESOURCE_VARIABLE}\n+         * @param table list of local variable targets\n+         *\/\n@@ -290,0 +367,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration}\n+         * @param table list of local variable targets\n+         *\/\n@@ -294,0 +375,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declared\n+         * as a resource in a try-with-resources statement}\n+         * @param table list of local variable targets\n+         *\/\n@@ -298,0 +384,4 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in an exception parameter declaration}\n+         * @param exceptionTableIndex an index into the exception table of the Code attribute\n+         *\/\n@@ -302,0 +392,8 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression or a new expression,\n+         * or the type before the :: in a method reference expression}\n+         * {@param targetType {@link TargetType#INSTANCEOF}, {@link TargetType#NEW},\n+         *                    {@link TargetType#CONSTRUCTOR_REFERENCE},\n+         *                    or {@link TargetType#METHOD_REFERENCE}}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -306,0 +404,4 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -310,0 +412,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a new expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -314,0 +420,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a constructor reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -318,0 +428,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -322,0 +436,12 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression,\n+         * or on the i'th type argument in the explicit type argument list for any of the following:\n+         * a new expression, an explicit constructor invocation statement, a method invocation expression,\n+         * or a method reference expression}\n+         * {@param targetType {@link TargetType#CAST}, {@link TargetType#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType#METHOD_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT},\n+         *                    or {@link TargetType#METHOD_REFERENCE_TYPE_ARGUMENT}}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator or argument is annotated\n+         *\/\n@@ -326,0 +452,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator is annotated\n+         *\/\n@@ -330,0 +461,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * an explicit constructor invocation statement}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -334,0 +471,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method invocation expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -338,0 +481,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a new expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -342,0 +491,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -496,0 +651,6 @@\n+        \/**\n+         * {@return local variable target info}\n+         * @param startLabel code label indicating start of an interval where variable has value\n+         * @param endLabel code label indicating start of an interval where variable has value\n+         * @param index index into the local variables\n+         *\/\n@@ -570,17 +731,2 @@\n-     * JVMS: Wherever a type is used in a declaration or expression, the type_path structure identifies which part of\n-     * the type is annotated. An annotation may appear on the type itself, but if the type is a reference type, then\n-     * there are additional locations where an annotation may appear:\n-     *\n-     * If an array type T[] is used in a declaration or expression, then an annotation may appear on any component type\n-     * of the array type, including the element type.\n-     *\n-     * If a nested type T1.T2 is used in a declaration or expression, then an annotation may appear on the name of the\n-     * innermost member type and any enclosing type for which a type annotation is admissible {@jls 9.7.4}.\n-     *\n-     * If a parameterized type {@literal T<A> or T<? extends A> or T<? super A>} is used in a declaration or expression, then an\n-     * annotation may appear on any type argument or on the bound of any wildcard type argument.\n-     *\n-     * JVMS: ...  each entry in the path array represents an iterative, left-to-right step towards the precise location\n-     * of the annotation in an array type, nested type, or parameterized type. (In an array type, the iteration visits\n-     * the array type itself, then its component type, then the component type of that component type, and so on,\n-     * until the element type is reached.)\n+     * JVMS: Type_path structure identifies which part of the type is annotated,\n+     * as defined in {@jvms 4.7.20.2}\n@@ -591,0 +737,3 @@\n+        \/**\n+         * Type path kind, as defined in {@jvms 4.7.20.2}\n+         *\/\n@@ -592,0 +741,2 @@\n+\n+            \/** Annotation is deeper in an array type *\/\n@@ -593,0 +744,2 @@\n+\n+            \/** Annotation is deeper in a nested type *\/\n@@ -594,0 +747,2 @@\n+\n+            \/** Annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -595,0 +750,2 @@\n+\n+            \/** Annotation is on a type argument of a parameterized type *\/\n@@ -603,0 +760,3 @@\n+            \/**\n+             * {@return type path kind value}\n+             *\/\n@@ -608,0 +768,1 @@\n+        \/** static instance for annotation is deeper in an array type *\/\n@@ -609,0 +770,2 @@\n+\n+        \/** static instance for annotation is deeper in a nested type *\/\n@@ -610,0 +773,2 @@\n+\n+        \/** static instance for annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -632,0 +797,5 @@\n+        \/**\n+         * {@return type path component of an annotation}\n+         * @param typePathKind the kind of path element\n+         * @param typeArgumentIndex type argument index\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":189,"deletions":19,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -75,0 +75,5 @@\n+    \/**\n+     * Tests presence of module flag\n+     * @param flag module flag\n+     * @return true if the flag is set\n+     *\/\n@@ -158,0 +163,3 @@\n+    \/**\n+     * A builder for module attributes.\n+     *\/\n@@ -161,0 +169,5 @@\n+        \/**\n+         * Sets the module name\n+         * @param moduleName module name\n+         * @return this builder\n+         *\/\n@@ -162,0 +175,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param flagsMask module flags\n+         * @return this builder\n+         *\/\n@@ -163,0 +182,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param moduleFlags module flags\n+         * @return this builder\n+         *\/\n@@ -166,0 +191,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param version module version\n+         * @return this builder\n+         *\/\n@@ -168,0 +199,7 @@\n+        \/**\n+         * Adds module requirement\n+         * @param module required module\n+         * @param requiresFlagsMask flags of the requirement\n+         * @param version required module version\n+         * @return this builder\n+         *\/\n@@ -169,0 +207,8 @@\n+\n+        \/**\n+         * Adds module requirement\n+         * @param module required module\n+         * @param requiresFlags flags of the requirement\n+         * @param version required module version\n+         * @return this builder\n+         *\/\n@@ -172,0 +218,6 @@\n+\n+        \/**\n+         * Adds module requirement\n+         * @param requires module require info\n+         * @return this builder\n+         *\/\n@@ -174,0 +226,7 @@\n+        \/**\n+         * Adds exported package\n+         * @param pkge exported package\n+         * @param exportsFlagsMask export flags\n+         * @param exportsToModules specific modules to export to\n+         * @return this builder\n+         *\/\n@@ -175,0 +234,8 @@\n+\n+        \/**\n+         * Adds exported package\n+         * @param pkge exported package\n+         * @param exportsFlags export flags\n+         * @param exportsToModules specific modules to export to\n+         * @return this builder\n+         *\/\n@@ -178,0 +245,6 @@\n+\n+        \/**\n+         * Adds exported package\n+         * @param exports module export info\n+         * @return this builder\n+         *\/\n@@ -180,0 +253,7 @@\n+        \/**\n+         *\n+         * @param pkge Opens package\n+         * @param opensFlagsMask open package flags\n+         * @param opensToModules specific modules to open to\n+         * @return this builder\n+         *\/\n@@ -181,0 +261,8 @@\n+\n+        \/**\n+         *\n+         * @param pkge Opens package\n+         * @param opensFlags open package flags\n+         * @param opensToModules specific modules to open to\n+         * @return this builder\n+         *\/\n@@ -184,0 +272,6 @@\n+\n+        \/**\n+         * Opens package\n+         * @param opens module open info\n+         * @return this builder\n+         *\/\n@@ -186,0 +280,5 @@\n+        \/**\n+         * Declares use of a service\n+         * @param service service class used\n+         * @return this builder\n+         *\/\n@@ -187,0 +286,6 @@\n+\n+        \/**\n+         * Declares use of a service\n+         * @param uses service class used\n+         * @return this builder\n+         *\/\n@@ -189,0 +294,6 @@\n+        \/**\n+         * Declares provision of a service\n+         * @param service service class provided\n+         * @param implClasses specific implementation classes\n+         * @return this builder\n+         *\/\n@@ -190,0 +301,6 @@\n+\n+        \/**\n+         * Declares provision of a service\n+         * @param provides module provides info\n+         * @return this builder\n+         *\/\n@@ -192,0 +309,4 @@\n+        \/**\n+         * Builds module attribute.\n+         * @return module attribute\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleAttribute.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+    \/**\n+     * {@return the access flags}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+    \/**\n+     * {@return the access flags}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+     * @return module resolution flags\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,4 @@\n+    \/**\n+     * {@return source file attribute}\n+     * @param sourceFile source file name\n+     *\/\n@@ -54,0 +58,4 @@\n+    \/**\n+     * {@return source file attribute}\n+     * @param sourceFile source file name\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceFileAttribute.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,3 @@\n+    \/**\n+     * {@return frame compact form type}\n+     *\/\n@@ -44,0 +47,4 @@\n+\n+    \/**\n+     * {@return frame target label}\n+     *\/\n@@ -45,0 +52,4 @@\n+\n+    \/**\n+     * {@return expanded local variable types}\n+     *\/\n@@ -46,0 +57,4 @@\n+\n+    \/**\n+     * {@return expanded stack types}\n+     *\/\n@@ -48,0 +63,6 @@\n+    \/**\n+     * {@return new stack map frame}\n+     * @param target location of the frame\n+     * @param locals complete list of frame locals\n+     * @param stack complete frame stack\n+     *\/\n@@ -59,0 +80,4 @@\n+\n+        \/**\n+         * {@return tag of the type info}\n+         *\/\n@@ -66,0 +91,2 @@\n+\n+        \/** verification type top *\/\n@@ -67,0 +94,2 @@\n+\n+        \/** verification type int *\/\n@@ -68,0 +97,2 @@\n+\n+        \/** verification type float *\/\n@@ -69,0 +100,2 @@\n+\n+        \/** verification type double *\/\n@@ -70,0 +103,2 @@\n+\n+        \/** verification type long *\/\n@@ -71,0 +106,2 @@\n+\n+        \/** verification type null *\/\n@@ -72,0 +109,2 @@\n+\n+        \/** verification type uninitializedThis *\/\n@@ -93,0 +132,4 @@\n+        \/**\n+         * {@return new object verification type info}\n+         * @param className class of the object\n+         *\/\n@@ -97,0 +140,4 @@\n+        \/**\n+         * {@return new object verification type info}\n+         * @param classDesc class of the object\n+         *\/\n@@ -102,1 +149,1 @@\n-         * {@return the class of the value}\n+         * {@return the class of the object}\n@@ -106,0 +153,3 @@\n+        \/**\n+         * {@return the class of the object}\n+         *\/\n@@ -116,0 +166,4 @@\n+\n+        \/**\n+         * {@return {@code new} instruction position that creates this unitialized object}\n+         *\/\n@@ -118,0 +172,4 @@\n+        \/**\n+         * {@return unitialized verification type info}\n+         * @param newTarget {@code new} instruction position that creates this unitialized object\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapFrameInfo.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -48,0 +48,4 @@\n+    \/**\n+     * {@return stack map table attribute}\n+     * @param entries stack map frames\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.Classfile;\n@@ -55,1 +57,3 @@\n-        attributes.withAttribute(a);\n+        if (context.attributesProcessingOption().isAllowed(a.attributeMapper().attributeStability())) {\n+            attributes.withAttribute(a);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annos);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annos);\n@@ -81,1 +81,1 @@\n-                yield new AnnotationImpl.OfArrayImpl(SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(values));\n+                yield new AnnotationImpl.OfArrayImpl(SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(values));\n@@ -96,1 +96,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annotations);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annotations);\n@@ -106,1 +106,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(pas);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(pas);\n@@ -159,1 +159,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(annotationElements);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(annotationElements);\n@@ -260,1 +260,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(entries);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(entries);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Collections;\n@@ -124,1 +125,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(entries);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(entries);\n@@ -130,1 +131,1 @@\n-        var filled = new Object[size];\n+        var filled = new ArrayList<Attribute<?>>(size);\n@@ -133,0 +134,1 @@\n+        var apo = ((ClassReaderImpl)reader).context().attributesProcessingOption();\n@@ -146,2 +148,4 @@\n-                filled[i] = mapper.readAttribute(enclosing, reader, p);\n-            } else if (((ClassReaderImpl)reader).context().unknownAttributesOption() == Classfile.UnknownAttributesOption.PASS_UNKNOWN_ATTRIBUTES) {\n+                if (apo.isAllowed(mapper.attributeStability())) {\n+                    filled.add((Attribute)mapper.readAttribute(enclosing, reader, p));\n+                }\n+            } else if (apo.isAllowed(AttributeMapper.AttributeStability.UNKNOWN)) {\n@@ -162,1 +166,4 @@\n-                        throw new UnsupportedOperationException(\"Write of unknown attribute \" + name() + \" not supported\");\n+                        buf.writeIndex(name);\n+                        var cont = attr.contents();\n+                        buf.writeInt(cont.length);\n+                        buf.writeBytes(cont);\n@@ -169,0 +176,5 @@\n+\n+                    @Override\n+                    public AttributeMapper.AttributeStability attributeStability() {\n+                        return AttributeStability.UNKNOWN;\n+                    }\n@@ -170,1 +182,1 @@\n-                filled[i] = new BoundUnknownAttribute(reader, fakeMapper, p);\n+                filled.add(new BoundUnknownAttribute(reader, fakeMapper, p));\n@@ -174,1 +186,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(filled);\n+        return Collections.unmodifiableList(filled);\n@@ -182,29 +194,0 @@\n-\n-        @Override\n-        public void writeTo(DirectClassBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(DirectMethodBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(DirectFieldBuilder builder) {\n-            checkWriteSupported(builder::canWriteDirect);\n-            super.writeTo(builder);\n-        }\n-\n-        @Override\n-        public void writeTo(BufWriter buf) {\n-            checkWriteSupported(buf::canWriteDirect);\n-            super.writeTo(buf);\n-        }\n-\n-        private void checkWriteSupported(Function<ConstantPool, Boolean> condition) {\n-            if (!condition.apply(classReader))\n-                throw new UnsupportedOperationException(\"Write of unknown attribute \" + attributeName() + \" not supported to alien constant pool\");\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":19,"deletions":36,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(arr);\n+            this.interfaces = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(arr);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                            UnknownAttributesOption unknownAttributesOption,\n+                            AttributesProcessingOption attributesProcessingOption,\n@@ -58,1 +58,1 @@\n-            UnknownAttributesOption.PASS_UNKNOWN_ATTRIBUTES,\n+            AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n@@ -77,1 +77,1 @@\n-        var uao = unknownAttributesOption;\n+        var apo = attributesProcessingOption;\n@@ -89,1 +89,1 @@\n-                case UnknownAttributesOption oo -> uao = oo;\n+                case AttributesProcessingOption oo -> apo = oo;\n@@ -98,1 +98,1 @@\n-        return new ClassfileImpl(smo, deo, lno, uao, cpso, sjo, dco, dlo, chro, amo);\n+        return new ClassfileImpl(smo, deo, lno, apo, cpso, sjo, dco, dlo, chro, amo);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassfileImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(result);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(result);\n@@ -132,1 +132,1 @@\n-        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArrayNullsAllowed(result);\n+        return SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(result);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+     * @param target\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/BranchInstruction.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,5 @@\n+\n+    \/**\n+     *\n+     * {@return label corresponding to this target}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LabelTarget.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+\n+    \/**\n+     * {@return the local variable slot to load from}\n+     *\/\n@@ -47,0 +51,3 @@\n+    \/**\n+     * {@return the type of the value to be loaded}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LoadInstruction.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,0 +83,6 @@\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,0 +80,6 @@\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+\n+    \/**\n+     * {@return the type of the return instruction}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ReturnInstruction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+\n+    \/**\n+     * {@return the local variable slot to store to}\n+     *\/\n@@ -45,0 +49,4 @@\n+\n+    \/**\n+     * {@return the type of the value to be stored}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StoreInstruction.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+\n+    \/**\n+     * {@return the type against which the instruction checks or casts}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TypeCheckInstruction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,1 +214,6 @@\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld\"}\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld1\"}\n+ * <p>\n+ * The convenience methods {@code ClassBuilder.buildMethodBody} allows us to ask\n+ * {@link ClassBuilder} to create code builders to build method bodies directly,\n+ * skipping the method builder custom lambda:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld2\"}\n@@ -279,0 +284,4 @@\n+ * <p>\n+ * {@code ClassTransform.dropping} convenience method allow us to simplify the same\n+ * transformation construction and express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods3\"}\n@@ -281,1 +290,1 @@\n- * While the second example is only slightly shorter than the first, the\n+ * While the example using transformations are only slightly shorter, the\n@@ -304,0 +313,5 @@\n+ * or lift the code transform into the class transform directly:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethodBodiess(fooToBar);\n+ * }\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -135,22 +135,35 @@\n-    void writeHelloWorld() {\n-        \/\/ @start region=\"helloWorld\"\n-        byte[] bytes = Classfile.of().build(CD_Hello, cb -> {\n-            cb.withFlags(AccessFlag.PUBLIC);\n-            cb.withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n-                          mb -> mb.withCode(\n-                                  b -> b.aload(0)\n-                                        .invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME,\n-                                                       ConstantDescs.MTD_void)\n-                                        .returnInstruction(TypeKind.VoidType)\n-                          )\n-              )\n-              .withMethod(\"main\", MTD_void_StringArray,\n-                          Classfile.ACC_PUBLIC,\n-                          mb -> mb.withFlags(AccessFlag.STATIC, AccessFlag.PUBLIC)\n-                                  .withCode(\n-                                  b -> b.getstatic(CD_System, \"out\", CD_PrintStream)\n-                                        .constantInstruction(Opcode.LDC, \"Hello World\")\n-                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n-                                        .returnInstruction(TypeKind.VoidType)\n-            ));\n-        });\n+    void writeHelloWorld1() {\n+        \/\/ @start region=\"helloWorld1\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                      Classfile.ACC_PUBLIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.aload(0)\n+                                                        .invokespecial(ConstantDescs.CD_Object,\n+                                                                       ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                        .return_()))\n+                          .withMethod(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                        .ldc(\"Hello World\")\n+                                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                        .return_())));\n+        \/\/ @end\n+    }\n+\n+    void writeHelloWorld2() {\n+        \/\/ @start region=\"helloWorld2\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                          Classfile.ACC_PUBLIC,\n+                                          cob -> cob.aload(0)\n+                                                    .invokespecial(ConstantDescs.CD_Object,\n+                                                                   ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                    .return_())\n+                          .withMethodBody(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                          cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                    .ldc(\"Hello World\")\n+                                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                    .return_()));\n@@ -164,7 +177,8 @@\n-                                          classBuilder -> {\n-                                              for (ClassElement ce : classModel) {\n-                                                  if (!(ce instanceof MethodModel mm\n-                                                        && mm.methodName().stringValue().startsWith(\"debug\")))\n-                                                      classBuilder.with(ce);\n-                                              }\n-                                          });\n+                classBuilder -> {\n+                    for (ClassElement ce : classModel) {\n+                        if (!(ce instanceof MethodModel mm\n+                                && mm.methodName().stringValue().startsWith(\"debug\"))) {\n+                            classBuilder.with(ce);\n+                        }\n+                    }\n+                });\n@@ -185,0 +199,8 @@\n+    void stripDebugMethods3(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods3\"\n+        ClassTransform ct = ClassTransform.dropping(\n+                                    element -> element instanceof MethodModel mm\n+                                            && mm.methodName().stringValue().startsWith(\"debug\"));\n+        \/\/ @end\n+    }\n+\n@@ -202,1 +224,1 @@\n-                 .constantInstruction(Opcode.LDC, i.name().stringValue())\n+                 .ldc(i.name().stringValue())\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Testing Classfile options on small Corpus.\n+ * @run junit\/othervm -Djunit.jupiter.execution.parallel.enabled=true OptionsTest\n+ *\/\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+import java.io.IOException;\n+import java.lang.constant.ClassDesc;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.internal.classfile.AttributeMapper;\n+import jdk.internal.classfile.AttributedElement;\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.ClassReader;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.ClassfileElement;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.CompoundElement;\n+import jdk.internal.classfile.CustomAttribute;\n+\n+\/**\n+ * OptionsTest\n+ *\/\n+@Execution(ExecutionMode.CONCURRENT)\n+class OptionsTest {\n+\n+    protected static final FileSystem JRT = FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n+\n+    static Path[] corpus() throws IOException, URISyntaxException {\n+        return Files.walk(JRT.getPath(\"modules\/java.base\/java\/util\"))\n+                .filter(p -> Files.isRegularFile(p) && p.toString().endsWith(\".class\"))\n+                .toArray(Path[]::new);\n+    }\n+\n+\n+    @ParameterizedTest\n+    @MethodSource(\"corpus\")\n+    void testAttributesProcessingOptionOnParse(Path path) throws Exception {\n+        testNoHazmat(path, Classfile.of(Classfile.AttributesProcessingOption.DROP_HAZMAT_ATRIBUTES).parse(path));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"corpus\")\n+    void testAttributesProcessingOptionOnTransform(Path path) throws Exception {\n+        testNoHazmat(path, Classfile.of().parse(\n+                Classfile.of(Classfile.AttributesProcessingOption.DROP_HAZMAT_ATRIBUTES).transform(\n+                            Classfile.of().parse(path),\n+                            ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL))));\n+    }\n+\n+    static class StrangeAttribute extends CustomAttribute<StrangeAttribute> {\n+        public StrangeAttribute() {\n+            super(STRANGE_ATTRIBUTE_MAPPER);\n+        }\n+    }\n+\n+    static final AttributeMapper<StrangeAttribute> STRANGE_ATTRIBUTE_MAPPER = new AttributeMapper<>() {\n+\n+        @Override\n+        public String name() {\n+            return \"StrangeAttribute\";\n+        }\n+\n+        @Override\n+        public StrangeAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+            return new StrangeAttribute();\n+        }\n+\n+        @Override\n+        public void writeAttribute(BufWriter buf, StrangeAttribute attr) {\n+            buf.writeIndex(buf.constantPool().utf8Entry(name()));\n+            buf.writeInt(0);\n+        }\n+\n+        @Override\n+        public AttributeMapper.AttributeStability attributeStability() {\n+            return AttributeMapper.AttributeStability.STATELESS;\n+        }\n+    };\n+\n+    @Test\n+    void testUnknownAttribute() throws Exception {\n+        var classBytes = Classfile.of(Classfile.AttributeMapperOption.of(e -> {\n+            return e.equalsString(STRANGE_ATTRIBUTE_MAPPER.name()) ? STRANGE_ATTRIBUTE_MAPPER : null;\n+        })).build(ClassDesc.of(\"StrangeClass\"), clb -> clb.with(new StrangeAttribute()));\n+\n+        \/\/test default\n+        assertFalse(Classfile.of().parse(classBytes).attributes().isEmpty());\n+\n+        \/\/test drop unknown at parse\n+        assertTrue(Classfile.of(Classfile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).parse(classBytes).attributes().isEmpty());\n+\n+        \/\/test drop unknown at transform\n+        assertTrue(Classfile.of().parse(\n+                Classfile.of(Classfile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transform(\n+                        Classfile.of().parse(classBytes),\n+                        ClassTransform.ACCEPT_ALL)).attributes().isEmpty());\n+    }\n+\n+    void testNoHazmat(Path path, ClassfileElement e) {\n+        if (e instanceof AttributedElement ae) ae.attributes().forEach(a ->\n+                assertTrue(AttributeMapper.AttributeStability.HAZMAT.ordinal() >= a.attributeMapper().attributeStability().ordinal(),\n+                           () -> \"class \" + path + \" contains unexpected \" + a));\n+        if (e instanceof CompoundElement ce) ce.forEachElement(ee -> testNoHazmat(path, (ClassfileElement)ee));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/OptionsTest.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}