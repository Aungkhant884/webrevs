{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -28,0 +29,1 @@\n+import java.awt.image.ColorModel;\n@@ -30,1 +32,0 @@\n-import java.awt.image.ColorModel;\n@@ -32,1 +33,1 @@\n-import java.awt.image.SampleModel;\n+\n@@ -34,1 +35,0 @@\n-import sun.awt.image.ShortComponentRaster;\n@@ -36,0 +36,1 @@\n+import sun.awt.image.ShortComponentRaster;\n@@ -37,1 +38,1 @@\n-class LCMSImageLayout {\n+final class LCMSImageLayout {\n@@ -198,1 +199,6 @@\n-                if (cm instanceof ComponentColorModel) {\n+                \/* todo\n+                 * Our generic code for rasters does not support alpha channels,\n+                 * but it would be good to improve it when it is used from here.\n+                 * See \"createImageLayout(image.getRaster())\" below.\n+                 *\/\n+                if (!cm.hasAlpha() && cm instanceof ComponentColorModel) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-public class LCMSTransform implements ColorTransform {\n+final class LCMSTransform implements ColorTransform {\n@@ -152,0 +152,16 @@\n+    \/**\n+     * Returns {@code true} if lcms may supports this format directly.\n+     *\/\n+    private static boolean isLCMSSupport(BufferedImage src, BufferedImage dst) {\n+        if (!dst.getColorModel().hasAlpha()) {\n+            return true;\n+        }\n+        \/\/ lcms as of now does not support pre-alpha\n+        if (src.isAlphaPremultiplied() || dst.isAlphaPremultiplied()) {\n+            return false;\n+        }\n+        \/\/ lcms does not set correct alpha for transparent dst if src is opaque\n+        \/\/ is it feature or bug?\n+        return dst.getColorModel().hasAlpha() == src.getColorModel().hasAlpha();\n+    }\n+\n@@ -155,1 +171,1 @@\n-            if (!dst.getColorModel().hasAlpha()) {\n+            if (isLCMSSupport(src, dst)) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSTransform.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-        inFormatter, outFormatter, renderType, 0);\n+        inFormatter, outFormatter, renderType, cmsFLAGS_COPY_ALPHA);\n","filename":"src\/java.desktop\/share\/native\/liblcms\/LCMS.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4405224\n+ * @bug 4405224 8012229\n@@ -79,1 +79,2 @@\n-            if (((dst.getRGB(0, i) >> 24) & 0xff) != 128) {\n+            int rgb = (dst.getRGB(0, i) >> 24) & 0xff;\n+            if (rgb != 128) {\n@@ -81,1 +82,1 @@\n-                    \"Incorrect destination alpha value.\");\n+                    \"Incorrect destination alpha value: \" + rgb);\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/ColCvtAlpha.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.Graphics2D;\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+\n+import static java.awt.image.BufferedImage.TYPE_3BYTE_BGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_BINARY;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_GRAY;\n+import static java.awt.image.BufferedImage.TYPE_BYTE_INDEXED;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE;\n+import static java.awt.image.BufferedImage.TYPE_INT_BGR;\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_555_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_565_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_GRAY;\n+\n+\/*\n+ * @test\n+ * @bug 8012229\n+ * @summary one more test to check the alpha channel\n+ *\/\n+public final class ColCvtAlphaDifferentSrcDst {\n+\n+    private static int WIDTH = 256;\n+    private static int HEIGHT = 256;\n+\n+    public static void main(String[] args) throws Exception {\n+        differentToOpaqueDst();\n+        differentToTransparentDst(TYPE_INT_ARGB);\n+        differentToTransparentDst(TYPE_4BYTE_ABGR);\n+        differentToTransparentDst(TYPE_INT_ARGB_PRE);\n+    }\n+\n+    \/**\n+     * Various types of source images transform to the opaque destination, the\n+     * result should be the same.\n+     *\/\n+    private static void differentToOpaqueDst() {\n+        opaqueDst(TYPE_INT_ARGB, TYPE_INT_RGB);\n+        opaqueDst(TYPE_INT_ARGB, TYPE_INT_BGR);\n+        opaqueDst(TYPE_4BYTE_ABGR, TYPE_INT_BGR);\n+\n+        \/\/ It is unclear how to hangle pre colors in the opaque DST\n+        \/\/opaqueDst(TYPE_INT_ARGB_PRE, TYPE_4BYTE_ABGR_PRE);\n+        \/\/opaqueDst(TYPE_4BYTE_ABGR_PRE, TYPE_INT_BGR);\n+    }\n+\n+    \/**\n+     * Transparent types of source images transform to the transparent\n+     * destination, the alpha channel should be the same in src\/dst.\n+     *\/\n+    private static void differentToTransparentDst(int typeDst) {\n+        transparentDst(TYPE_INT_RGB, typeDst);\n+        transparentDst(TYPE_INT_ARGB, typeDst);\n+        transparentDst(TYPE_INT_ARGB_PRE, typeDst);\n+        transparentDst(TYPE_INT_BGR, typeDst);\n+        transparentDst(TYPE_3BYTE_BGR, typeDst);\n+        transparentDst(TYPE_4BYTE_ABGR, typeDst);\n+        transparentDst(TYPE_4BYTE_ABGR_PRE, typeDst);\n+        transparentDst(TYPE_USHORT_565_RGB, typeDst);\n+        transparentDst(TYPE_USHORT_555_RGB, typeDst);\n+        transparentDst(TYPE_BYTE_GRAY, typeDst);\n+        transparentDst(TYPE_USHORT_GRAY, typeDst);\n+        transparentDst(TYPE_BYTE_BINARY, typeDst);\n+        transparentDst(TYPE_BYTE_INDEXED, typeDst);\n+    }\n+\n+    private static void opaqueDst(int transparent, int opaque) {\n+        ColorSpace to = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);\n+        ColorSpace from = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+        ColorConvertOp op = new ColorConvertOp(from, to, null);\n+        \/\/ Source data\n+        BufferedImage timgSrc = createSrc(transparent);\n+        BufferedImage oimgSrc = createSrc(opaque);\n+\n+        \/\/ Destination data\n+        BufferedImage timgDst = createDst(TYPE_INT_RGB);\n+        BufferedImage oimgDst = createDst(TYPE_INT_RGB);\n+\n+        op.filter(timgSrc, timgDst);\n+        op.filter(oimgSrc, oimgDst);\n+\n+        validate(timgDst, oimgDst, false);\n+    }\n+\n+    private static void transparentDst(int typeSrc, int typeDst) {\n+        ColorSpace to = ColorSpace.getInstance(ColorSpace.CS_CIEXYZ);\n+        ColorSpace from = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+        ColorConvertOp op = new ColorConvertOp(from, to, null);\n+\n+        BufferedImage src = createSrc(typeSrc);\n+        BufferedImage dst = createDst(typeDst);\n+\n+        op.filter(src, dst);\n+\n+        validate(src, dst, true);\n+    }\n+\n+    private static void validate(BufferedImage img1, BufferedImage img2,\n+                                 boolean alphaOnly) {\n+        for (int i = 0; i < WIDTH; i++) {\n+            for (int j = 0; j < HEIGHT; j++) {\n+                int rgb1 = img1.getRGB(i, j);\n+                int rgb2 = img2.getRGB(i, j);\n+                if (alphaOnly) {\n+                    rgb1 |= 0x00FFFFFF;\n+                    rgb2 |= 0x00FFFFFF;\n+                }\n+                if (rgb1 != rgb2) {\n+                    System.out.println(\"rgb1 = \" + Integer.toHexString(rgb1));\n+                    System.out.println(\"rgb2 = \" + Integer.toHexString(rgb2));\n+                    throw new RuntimeException();\n+                }\n+            }\n+        }\n+    }\n+\n+    private static BufferedImage createSrc(int type) {\n+        BufferedImage img = new BufferedImage(WIDTH, HEIGHT, type);\n+        fill(img);\n+        return img;\n+    }\n+\n+    private static BufferedImage createDst(int type) {\n+        BufferedImage img = new BufferedImage(WIDTH, HEIGHT, type);\n+\n+        Graphics2D g = img.createGraphics();\n+        g.setComposite(AlphaComposite.Clear);\n+        g.fillRect(0, 0, WIDTH, HEIGHT);\n+        g.dispose();\n+\n+        return img;\n+    }\n+\n+    private static void fill(BufferedImage image) {\n+        for (int i = 0; i < WIDTH; i++) {\n+            for (int j = 0; j < HEIGHT; j++) {\n+                image.setRGB(i, j,\n+                             (i << 24) | (i << 16) | (j << 8) | ((i + j) >> 1));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/ColCvtAlphaDifferentSrcDst.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}