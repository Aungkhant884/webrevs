{"files":[{"patch":"@@ -75,0 +75,1 @@\n+ * @param <A> attribute type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @param <A> attribute type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-     * Returns a default instance of {@linkplain ClassHierarchyResolver} that\n-     * gets {@link ClassHierarchyInfo} from system class loader with reflection.\n+     * {@return the default instance of {@linkplain ClassHierarchyResolver} that\n+     * gets {@link ClassHierarchyInfo} from system class loader with reflection}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+ * @param <E> element type\n+ * @param <B> builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,3 @@\n+ * @param <C> transform type\n+ * @param <E> element type\n+ * @param <B> builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileTransform.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -589,1 +589,1 @@\n-        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+        return ldc(value);\n@@ -1236,0 +1236,4 @@\n+    default CodeBuilder ldc(ConstantDesc value) {\n+        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @param <E> element type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CompoundElement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @param <T> custom attribute type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CustomAttribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,1 +179,20 @@\n-            DEFAULT, UNBOUNDED, EXTENDS, SUPER;\n+\n+            \/**\n+             * default bound wildcard (empty)\n+             *\/\n+            DEFAULT,\n+\n+            \/**\n+             * unbounded indicator {@code *}\n+             *\/\n+            UNBOUNDED,\n+\n+            \/**\n+             * upper-bounded indicator {@code +}\n+             *\/\n+            EXTENDS,\n+\n+            \/**\n+             * lower-bounded indicator {@code -}\n+             *\/\n+            SUPER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Signature.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * Models an annotation on a type use.\n+ * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n@@ -72,1 +72,1 @@\n-     * The kind of target on which the annotation appears.\n+     * The kind of target on which the annotation appears, as defined in {@jvms 4.7.20.1}.\n@@ -149,0 +149,3 @@\n+        \/**\n+         * {@return target type value}\n+         *\/\n@@ -153,0 +156,3 @@\n+        \/**\n+         * {@return size of the target type if fixed or -1 if variable}\n+         *\/\n@@ -228,0 +234,3 @@\n+        \/**\n+         * {@return type of the target}\n+         *\/\n@@ -230,0 +239,3 @@\n+        \/**\n+         * {@return size of the target info}\n+         *\/\n@@ -234,0 +246,5 @@\n+        \/**\n+         * {@return target for annotations on a class or method type parameter declaration}\n+         * @param targetType {@link TargetType.CLASS_TYPE_PARAMETER} or {@link TargetType.METHOD_TYPE_PARAMETER}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -238,0 +255,4 @@\n+        \/**\n+         * {@return target for annotations on a class type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -242,0 +263,4 @@\n+        \/**\n+         * {@return target for annotations on a method type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -246,0 +271,4 @@\n+        \/**\n+         * {@return target for annotations on the type of an \"extends\" or \"implements\" clause}\n+         * @param supertypeIndex the index into the interfaces array or 65535 to indicate it is the superclass\n+         *\/\n@@ -250,0 +279,7 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, interface, method, or constructor}\n+         * @param targetType {@link TargetType.CLASS_TYPE_PARAMETER_BOUND} or {@link TargetType.METHOD_TYPE_PARAMETER_BOUND}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -254,0 +290,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, or interface}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -258,0 +300,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic method, or constructor}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -262,0 +310,4 @@\n+        \/**\n+         * {@return target for annotations on }\n+         * @param targetType {@link TargetType.FIELD}, {@link TargetType.METHOD_RETURN} or {@link TargetType.METHOD_RECEIVER}\n+         *\/\n@@ -266,0 +318,3 @@\n+        \/**\n+         * {@return target for annotations on the type in a field or record declaration}\n+         *\/\n@@ -270,0 +325,3 @@\n+        \/**\n+         * {@return target for annotations on the return type of a method or a newly constructed object}\n+         *\/\n@@ -274,0 +332,3 @@\n+        \/**\n+         * {@return target for annotations on the receiver type of a method or constructor}\n+         *\/\n@@ -278,0 +339,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a formal parameter declaration of a method,\n+         * constructor, or lambda expression}\n+         * @param formalParameterIndex specifies which formal parameter declaration has an annotated type\n+         *\/\n@@ -282,0 +348,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in the throws clause of a method or\n+         * constructor declaration}\n+         * @param throwsTargetIndex an index into the exception table of the Exceptions attribute of the method\n+         *\/\n@@ -286,0 +357,6 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration,\n+         * including a variable declared as a resource in a try-with-resources statement}\n+         * @param targetType {@link TargetType.LOCAL_VARIABLE} or {@link TargetType.RESOURCE_VARIABLE}\n+         * @param table list of local variable targets\n+         *\/\n@@ -290,0 +367,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration}\n+         * @param table list of local variable targets\n+         *\/\n@@ -294,0 +375,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declared\n+         * as a resource in a try-with-resources statement}\n+         * @param table list of local variable targets\n+         *\/\n@@ -298,0 +384,4 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in an exception parameter declaration}\n+         * @param exceptionTableIndex an index into the exception table of the Code attribute\n+         *\/\n@@ -302,0 +392,8 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression or a new expression,\n+         * or the type before the :: in a method reference expression}\n+         * {@param targetType {@link TargetType.INSTANCEOF}, {@link TargetType.NEW},\n+         *                    {@link TargetType.CONSTRUCTOR_REFERENCE},\n+         *                    or {@link TargetType.METHOD_REFERENCE}}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -306,0 +404,4 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -310,0 +412,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a new expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -314,0 +420,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a constructor reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -318,0 +428,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -322,0 +436,12 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression,\n+         * or on the i'th type argument in the explicit type argument list for any of the following:\n+         * a new expression, an explicit constructor invocation statement, a method invocation expression,\n+         * or a method reference expression}\n+         * {@param targetType {@link TargetType.CAST}, {@link TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType.METHOD_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT},\n+         *                    or {@link TargetType.METHOD_REFERENCE_TYPE_ARGUMENT}}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator or argument is annotated\n+         *\/\n@@ -326,0 +452,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator is annotated\n+         *\/\n@@ -330,0 +461,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * an explicit constructor invocation statement}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -334,0 +471,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method invocation expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -338,0 +481,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a new expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -342,0 +491,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -496,0 +651,6 @@\n+        \/**\n+         * {@return local variable target info}\n+         * @param startLabel code label indicating start of an interval where variable has value\n+         * @param endLabel code label indicating start of an interval where variable has value\n+         * @param index index into the local variables\n+         *\/\n@@ -570,17 +731,2 @@\n-     * JVMS: Wherever a type is used in a declaration or expression, the type_path structure identifies which part of\n-     * the type is annotated. An annotation may appear on the type itself, but if the type is a reference type, then\n-     * there are additional locations where an annotation may appear:\n-     *\n-     * If an array type T[] is used in a declaration or expression, then an annotation may appear on any component type\n-     * of the array type, including the element type.\n-     *\n-     * If a nested type T1.T2 is used in a declaration or expression, then an annotation may appear on the name of the\n-     * innermost member type and any enclosing type for which a type annotation is admissible {@jls 9.7.4}.\n-     *\n-     * If a parameterized type {@literal T<A> or T<? extends A> or T<? super A>} is used in a declaration or expression, then an\n-     * annotation may appear on any type argument or on the bound of any wildcard type argument.\n-     *\n-     * JVMS: ...  each entry in the path array represents an iterative, left-to-right step towards the precise location\n-     * of the annotation in an array type, nested type, or parameterized type. (In an array type, the iteration visits\n-     * the array type itself, then its component type, then the component type of that component type, and so on,\n-     * until the element type is reached.)\n+     * JVMS: Type_path structure identifies which part of the type is annotated,\n+     * as defined in {@jvms 4.7.20.2}\n@@ -591,0 +737,3 @@\n+        \/**\n+         * Type path kind, as defined in {@jvms 4.7.20.2}\n+         *\/\n@@ -592,0 +741,2 @@\n+\n+            \/** Annotation is deeper in an array type *\/\n@@ -593,0 +744,2 @@\n+\n+            \/** Annotation is deeper in a nested type *\/\n@@ -594,0 +747,2 @@\n+\n+            \/** Annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -595,0 +750,2 @@\n+\n+            \/** Annotation is on a type argument of a parameterized type *\/\n@@ -603,0 +760,3 @@\n+            \/**\n+             * {@return type path kind value}\n+             *\/\n@@ -608,0 +768,1 @@\n+        \/** static instance for annotation is deeper in an array type *\/\n@@ -609,0 +770,2 @@\n+\n+        \/** static instance for annotation is deeper in a nested type *\/\n@@ -610,0 +773,2 @@\n+\n+        \/** static instance for annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -632,0 +797,5 @@\n+        \/**\n+         * {@return type path component of an annotation}\n+         * @param typePathKind the kind of path element\n+         * @param typeArgumentIndex type argument index\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":189,"deletions":19,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -75,0 +75,5 @@\n+    \/**\n+     * Tests presence of module flag\n+     * @param flag module flag\n+     * @return true if the flag is set\n+     *\/\n@@ -158,0 +163,3 @@\n+    \/**\n+     * A builder for module attributes.\n+     *\/\n@@ -161,0 +169,5 @@\n+        \/**\n+         * Sets the module name\n+         * @param moduleName module name\n+         * @return this builder\n+         *\/\n@@ -162,0 +175,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param flagsMask module flags\n+         * @return this builder\n+         *\/\n@@ -163,0 +182,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param moduleFlags module flags\n+         * @return this builder\n+         *\/\n@@ -166,0 +191,6 @@\n+\n+        \/**\n+         * Sets the module flags\n+         * @param version module version\n+         * @return this builder\n+         *\/\n@@ -168,0 +199,7 @@\n+        \/**\n+         * Adds module requirement\n+         * @param module required module\n+         * @param requiresFlagsMask flags of the requirement\n+         * @param version required module version\n+         * @return this builder\n+         *\/\n@@ -169,0 +207,8 @@\n+\n+        \/**\n+         * Adds module requirement\n+         * @param module required module\n+         * @param requiresFlags flags of the requirement\n+         * @param version required module version\n+         * @return this builder\n+         *\/\n@@ -172,0 +218,6 @@\n+\n+        \/**\n+         * Adds module requirement\n+         * @param requires module require info\n+         * @return this builder\n+         *\/\n@@ -174,0 +226,7 @@\n+        \/**\n+         * Adds exported package\n+         * @param pkge exported package\n+         * @param exportsFlagsMask export flags\n+         * @param exportsToModules specific modules to export to\n+         * @return this builder\n+         *\/\n@@ -175,0 +234,8 @@\n+\n+        \/**\n+         * Adds exported package\n+         * @param pkge exported package\n+         * @param exportsFlags export flags\n+         * @param exportsToModules specific modules to export to\n+         * @return this builder\n+         *\/\n@@ -178,0 +245,6 @@\n+\n+        \/**\n+         * Adds exported package\n+         * @param exports module export info\n+         * @return this builder\n+         *\/\n@@ -180,0 +253,7 @@\n+        \/**\n+         *\n+         * @param pkge Opens package\n+         * @param opensFlagsMask open package flags\n+         * @param opensToModules specific modules to open to\n+         * @return this builder\n+         *\/\n@@ -181,0 +261,8 @@\n+\n+        \/**\n+         *\n+         * @param pkge Opens package\n+         * @param opensFlags open package flags\n+         * @param opensToModules specific modules to open to\n+         * @return this builder\n+         *\/\n@@ -184,0 +272,6 @@\n+\n+        \/**\n+         * Opens package\n+         * @param opens module open info\n+         * @return this builder\n+         *\/\n@@ -186,0 +280,5 @@\n+        \/**\n+         * Declares use of a service\n+         * @param service service class used\n+         * @return this builder\n+         *\/\n@@ -187,0 +286,6 @@\n+\n+        \/**\n+         * Declares use of a service\n+         * @param uses service class used\n+         * @return this builder\n+         *\/\n@@ -189,0 +294,6 @@\n+        \/**\n+         * Declares provision of a service\n+         * @param service service class provided\n+         * @param implClasses specific implementation classes\n+         * @return this builder\n+         *\/\n@@ -190,0 +301,6 @@\n+\n+        \/**\n+         * Declares provision of a service\n+         * @param provides module provides info\n+         * @return this builder\n+         *\/\n@@ -192,0 +309,4 @@\n+        \/**\n+         * Builds module attribute.\n+         * @return module attribute\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleAttribute.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+    \/**\n+     * {@return the access flags}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+    \/**\n+     * {@return the access flags}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+     * @return module resolution flags\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,4 @@\n+    \/**\n+     * {@return source file attribute}\n+     * @param sourceFile source file name\n+     *\/\n@@ -54,0 +58,4 @@\n+    \/**\n+     * {@return source file attribute}\n+     * @param sourceFile source file name\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceFileAttribute.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,3 @@\n+    \/**\n+     * {@return frame compact form type}\n+     *\/\n@@ -44,0 +47,4 @@\n+\n+    \/**\n+     * {@return frame target label}\n+     *\/\n@@ -45,0 +52,4 @@\n+\n+    \/**\n+     * {@return expanded local variable types}\n+     *\/\n@@ -46,0 +57,4 @@\n+\n+    \/**\n+     * {@return expanded stack types}\n+     *\/\n@@ -48,0 +63,6 @@\n+    \/**\n+     * {@return new stack map frame}\n+     * @param target location of the frame\n+     * @param locals complete list of frame locals\n+     * @param stack complete frame stack\n+     *\/\n@@ -59,0 +80,4 @@\n+\n+        \/**\n+         * {@return tag of the type info}\n+         *\/\n@@ -66,0 +91,2 @@\n+\n+        \/** verification type top *\/\n@@ -67,0 +94,2 @@\n+\n+        \/** verification type int *\/\n@@ -68,0 +97,2 @@\n+\n+        \/** verification type float *\/\n@@ -69,0 +100,2 @@\n+\n+        \/** verification type double *\/\n@@ -70,0 +103,2 @@\n+\n+        \/** verification type long *\/\n@@ -71,0 +106,2 @@\n+\n+        \/** verification type null *\/\n@@ -72,0 +109,2 @@\n+\n+        \/** verification type uninitializedThis *\/\n@@ -93,0 +132,4 @@\n+        \/**\n+         * {@return new object verification type info}\n+         * @param className class of the object\n+         *\/\n@@ -97,0 +140,4 @@\n+        \/**\n+         * {@return new object verification type info}\n+         * @param classDesc class of the object\n+         *\/\n@@ -102,1 +149,1 @@\n-         * {@return the class of the value}\n+         * {@return the class of the object}\n@@ -106,0 +153,3 @@\n+        \/**\n+         * {@return the class of the object}\n+         *\/\n@@ -116,0 +166,4 @@\n+\n+        \/**\n+         * {@return {@code new} instruction position that creates this unitialized object}\n+         *\/\n@@ -118,0 +172,4 @@\n+        \/**\n+         * {@return unitialized verification type info}\n+         * @param newTarget {@code new} instruction position that creates this unitialized object\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapFrameInfo.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -48,0 +48,4 @@\n+    \/**\n+     * {@return stack map table attribute}\n+     * @param entries stack map frames\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+     * @param target\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/BranchInstruction.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,5 @@\n+\n+    \/**\n+     *\n+     * {@return label corresponding to this target}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LabelTarget.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+\n+    \/**\n+     * {@return the local variable slot to load from}\n+     *\/\n@@ -47,0 +51,3 @@\n+    \/**\n+     * {@return the type of the value to be loaded}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LoadInstruction.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,0 +83,6 @@\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,0 +80,6 @@\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+\n+    \/**\n+     * {@return the type of the return instruction}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ReturnInstruction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+\n+    \/**\n+     * {@return the local variable slot to store to}\n+     *\/\n@@ -45,0 +49,4 @@\n+\n+    \/**\n+     * {@return the type of the value to be stored}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StoreInstruction.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+\n+    \/**\n+     * {@return the type against which the instruction checks or casts}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TypeCheckInstruction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,1 +214,6 @@\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld\"}\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld1\"}\n+ * <p>\n+ * The convenience methods {@code ClassBuilder.buildMethodBody} allows us to ask\n+ * {@link ClassBuilder} to create code builders to build method bodies directly,\n+ * skipping the method builder custom lambda:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld2\"}\n@@ -279,0 +284,4 @@\n+ * <p>\n+ * {@code ClassTransform.dropping} convenience method allow us to simplify the same\n+ * transformation construction and express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods3\"}\n@@ -281,1 +290,1 @@\n- * While the second example is only slightly shorter than the first, the\n+ * While the example using transformations are only slightly shorter, the\n@@ -304,0 +313,5 @@\n+ * or lift the code transform into the class transform directly:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethodBodiess(fooToBar);\n+ * }\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -135,22 +135,35 @@\n-    void writeHelloWorld() {\n-        \/\/ @start region=\"helloWorld\"\n-        byte[] bytes = Classfile.of().build(CD_Hello, cb -> {\n-            cb.withFlags(AccessFlag.PUBLIC);\n-            cb.withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n-                          mb -> mb.withCode(\n-                                  b -> b.aload(0)\n-                                        .invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME,\n-                                                       ConstantDescs.MTD_void)\n-                                        .returnInstruction(TypeKind.VoidType)\n-                          )\n-              )\n-              .withMethod(\"main\", MTD_void_StringArray,\n-                          Classfile.ACC_PUBLIC,\n-                          mb -> mb.withFlags(AccessFlag.STATIC, AccessFlag.PUBLIC)\n-                                  .withCode(\n-                                  b -> b.getstatic(CD_System, \"out\", CD_PrintStream)\n-                                        .constantInstruction(Opcode.LDC, \"Hello World\")\n-                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n-                                        .returnInstruction(TypeKind.VoidType)\n-            ));\n-        });\n+    void writeHelloWorld1() {\n+        \/\/ @start region=\"helloWorld1\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                      Classfile.ACC_PUBLIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.aload(0)\n+                                                        .invokespecial(ConstantDescs.CD_Object,\n+                                                                       ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                        .return_()))\n+                          .withMethod(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                        .ldc(\"Hello World\")\n+                                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                        .return_())));\n+        \/\/ @end\n+    }\n+\n+    void writeHelloWorld2() {\n+        \/\/ @start region=\"helloWorld2\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                          Classfile.ACC_PUBLIC,\n+                                          cob -> cob.aload(0)\n+                                                    .invokespecial(ConstantDescs.CD_Object,\n+                                                                   ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                    .return_())\n+                          .withMethodBody(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                          cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                    .ldc(\"Hello World\")\n+                                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                    .return_()));\n@@ -164,7 +177,8 @@\n-                                          classBuilder -> {\n-                                              for (ClassElement ce : classModel) {\n-                                                  if (!(ce instanceof MethodModel mm\n-                                                        && mm.methodName().stringValue().startsWith(\"debug\")))\n-                                                      classBuilder.with(ce);\n-                                              }\n-                                          });\n+                classBuilder -> {\n+                    for (ClassElement ce : classModel) {\n+                        if (!(ce instanceof MethodModel mm\n+                                && mm.methodName().stringValue().startsWith(\"debug\"))) {\n+                            classBuilder.with(ce);\n+                        }\n+                    }\n+                });\n@@ -185,0 +199,8 @@\n+    void stripDebugMethods3(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods3\"\n+        ClassTransform ct = ClassTransform.dropping(\n+                                    element -> element instanceof MethodModel mm\n+                                            && mm.methodName().stringValue().startsWith(\"debug\"));\n+        \/\/ @end\n+    }\n+\n@@ -202,1 +224,1 @@\n-                 .constantInstruction(Opcode.LDC, i.name().stringValue())\n+                 .ldc(i.name().stringValue())\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"}]}