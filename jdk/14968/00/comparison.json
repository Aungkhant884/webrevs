{"files":[{"patch":"@@ -589,1 +589,1 @@\n-        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+        return ldc(value);\n@@ -1236,0 +1236,4 @@\n+    default CodeBuilder ldc(ConstantDesc value) {\n+        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,1 +214,6 @@\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld\"}\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld1\"}\n+ * <p>\n+ * The convenience methods {@code ClassBuilder.buildMethodBody} allows us to ask\n+ * {@link ClassBuilder} to create code builders to build method bodies directly,\n+ * skipping the method builder custom lambda:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld2\"}\n@@ -279,0 +284,4 @@\n+ * <p>\n+ * {@code ClassTransform.dropping} convenience method allow us to simplify the same\n+ * transformation construction and express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods3\"}\n@@ -281,1 +290,1 @@\n- * While the second example is only slightly shorter than the first, the\n+ * While the example using transformations are only slightly shorter, the\n@@ -304,0 +313,5 @@\n+ * or lift the code transform into the class transform directly:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethodBodiess(fooToBar);\n+ * }\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -135,22 +135,35 @@\n-    void writeHelloWorld() {\n-        \/\/ @start region=\"helloWorld\"\n-        byte[] bytes = Classfile.of().build(CD_Hello, cb -> {\n-            cb.withFlags(AccessFlag.PUBLIC);\n-            cb.withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n-                          mb -> mb.withCode(\n-                                  b -> b.aload(0)\n-                                        .invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME,\n-                                                       ConstantDescs.MTD_void)\n-                                        .returnInstruction(TypeKind.VoidType)\n-                          )\n-              )\n-              .withMethod(\"main\", MTD_void_StringArray,\n-                          Classfile.ACC_PUBLIC,\n-                          mb -> mb.withFlags(AccessFlag.STATIC, AccessFlag.PUBLIC)\n-                                  .withCode(\n-                                  b -> b.getstatic(CD_System, \"out\", CD_PrintStream)\n-                                        .constantInstruction(Opcode.LDC, \"Hello World\")\n-                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n-                                        .returnInstruction(TypeKind.VoidType)\n-            ));\n-        });\n+    void writeHelloWorld1() {\n+        \/\/ @start region=\"helloWorld1\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                      Classfile.ACC_PUBLIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.aload(0)\n+                                                        .invokespecial(ConstantDescs.CD_Object,\n+                                                                       ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                        .return_()))\n+                          .withMethod(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                        .ldc(\"Hello World\")\n+                                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                        .return_())));\n+        \/\/ @end\n+    }\n+\n+    void writeHelloWorld2() {\n+        \/\/ @start region=\"helloWorld2\"\n+        byte[] bytes = Classfile.of().build(CD_Hello,\n+                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n+                          .withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                          Classfile.ACC_PUBLIC,\n+                                          cob -> cob.aload(0)\n+                                                    .invokespecial(ConstantDescs.CD_Object,\n+                                                                   ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                    .return_())\n+                          .withMethodBody(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n+                                          cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                    .ldc(\"Hello World\")\n+                                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                    .return_()));\n@@ -164,7 +177,8 @@\n-                                          classBuilder -> {\n-                                              for (ClassElement ce : classModel) {\n-                                                  if (!(ce instanceof MethodModel mm\n-                                                        && mm.methodName().stringValue().startsWith(\"debug\")))\n-                                                      classBuilder.with(ce);\n-                                              }\n-                                          });\n+                classBuilder -> {\n+                    for (ClassElement ce : classModel) {\n+                        if (!(ce instanceof MethodModel mm\n+                                && mm.methodName().stringValue().startsWith(\"debug\"))) {\n+                            classBuilder.with(ce);\n+                        }\n+                    }\n+                });\n@@ -185,0 +199,8 @@\n+    void stripDebugMethods3(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods3\"\n+        ClassTransform ct = ClassTransform.dropping(\n+                                    element -> element instanceof MethodModel mm\n+                                            && mm.methodName().stringValue().startsWith(\"debug\"));\n+        \/\/ @end\n+    }\n+\n@@ -202,1 +224,1 @@\n-                 .constantInstruction(Opcode.LDC, i.name().stringValue())\n+                 .ldc(i.name().stringValue())\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"}]}