{"files":[{"patch":"@@ -62,1 +62,1 @@\n- * Models an annotation on a type use.\n+ * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n@@ -72,1 +72,1 @@\n-     * The kind of target on which the annotation appears.\n+     * The kind of target on which the annotation appears, as defined in {@jvms 4.7.20.1}.\n@@ -149,0 +149,3 @@\n+        \/**\n+         * {@return target type value}\n+         *\/\n@@ -153,0 +156,3 @@\n+        \/**\n+         * {@return size of the target type if fixed or -1 if variable}\n+         *\/\n@@ -228,0 +234,3 @@\n+        \/**\n+         * {@return type of the target}\n+         *\/\n@@ -230,0 +239,3 @@\n+        \/**\n+         * {@return size of the target info}\n+         *\/\n@@ -234,0 +246,5 @@\n+        \/**\n+         * {@return target for annotations on a class or method type parameter declaration}\n+         * @param targetType {@link TargetType.CLASS_TYPE_PARAMETER} or {@link TargetType.METHOD_TYPE_PARAMETER}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -238,0 +255,4 @@\n+        \/**\n+         * {@return target for annotations on a class type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -242,0 +263,4 @@\n+        \/**\n+         * {@return target for annotations on a method type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n@@ -246,0 +271,4 @@\n+        \/**\n+         * {@return target for annotations on the type of an \"extends\" or \"implements\" clause}\n+         * @param supertypeIndex the index into the interfaces array or 65535 to indicate it is the superclass\n+         *\/\n@@ -250,0 +279,7 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, interface, method, or constructor}\n+         * @param targetType {@link TargetType.CLASS_TYPE_PARAMETER_BOUND} or {@link TargetType.METHOD_TYPE_PARAMETER_BOUND}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -254,0 +290,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, or interface}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -258,0 +300,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic method, or constructor}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n@@ -262,0 +310,4 @@\n+        \/**\n+         * {@return target for annotations on }\n+         * @param targetType {@link TargetType.FIELD}, {@link TargetType.METHOD_RETURN} or {@link TargetType.METHOD_RECEIVER}\n+         *\/\n@@ -266,0 +318,3 @@\n+        \/**\n+         * {@return target for annotations on the type in a field or record declaration}\n+         *\/\n@@ -270,0 +325,3 @@\n+        \/**\n+         * {@return target for annotations on the return type of a method or a newly constructed object}\n+         *\/\n@@ -274,0 +332,3 @@\n+        \/**\n+         * {@return target for annotations on the receiver type of a method or constructor}\n+         *\/\n@@ -278,0 +339,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a formal parameter declaration of a method,\n+         * constructor, or lambda expression}\n+         * @param formalParameterIndex specifies which formal parameter declaration has an annotated type\n+         *\/\n@@ -282,0 +348,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in the throws clause of a method or\n+         * constructor declaration}\n+         * @param throwsTargetIndex an index into the exception table of the Exceptions attribute of the method\n+         *\/\n@@ -286,0 +357,6 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration,\n+         * including a variable declared as a resource in a try-with-resources statement}\n+         * @param targetType {@link TargetType.LOCAL_VARIABLE} or {@link TargetType.RESOURCE_VARIABLE}\n+         * @param table list of local variable targets\n+         *\/\n@@ -290,0 +367,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declaration}\n+         * @param table list of local variable targets\n+         *\/\n@@ -294,0 +375,5 @@\n+        \/**\n+         * {@return target for annotations on the type in a local variable declared\n+         * as a resource in a try-with-resources statement}\n+         * @param table list of local variable targets\n+         *\/\n@@ -298,0 +384,4 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in an exception parameter declaration}\n+         * @param exceptionTableIndex an index into the exception table of the Code attribute\n+         *\/\n@@ -302,0 +392,8 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression or a new expression,\n+         * or the type before the :: in a method reference expression}\n+         * {@param targetType {@link TargetType.INSTANCEOF}, {@link TargetType.NEW},\n+         *                    {@link TargetType.CONSTRUCTOR_REFERENCE},\n+         *                    or {@link TargetType.METHOD_REFERENCE}}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -306,0 +404,4 @@\n+        \/**\n+         * {@return target for annotations on the type in an instanceof expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -310,0 +412,4 @@\n+        \/**\n+         * {@return target for annotations on the type in a new expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -314,0 +420,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a constructor reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -318,0 +428,4 @@\n+        \/**\n+         * {@return target for annotations on the type before the :: in a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         *\/\n@@ -322,0 +436,12 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression,\n+         * or on the i'th type argument in the explicit type argument list for any of the following:\n+         * a new expression, an explicit constructor invocation statement, a method invocation expression,\n+         * or a method reference expression}\n+         * {@param targetType {@link TargetType.CAST}, {@link TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType.METHOD_INVOCATION_TYPE_ARGUMENT},\n+         *                    {@link TargetType.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT},\n+         *                    or {@link TargetType.METHOD_REFERENCE_TYPE_ARGUMENT}}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator or argument is annotated\n+         *\/\n@@ -326,0 +452,5 @@\n+        \/**\n+         * {@return target for annotations on the i'th type in a cast expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator is annotated\n+         *\/\n@@ -330,0 +461,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * an explicit constructor invocation statement}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -334,0 +471,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method invocation expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -338,0 +481,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a new expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -342,0 +491,6 @@\n+        \/**\n+         * {@return target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method reference expression}\n+         * @param target code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n@@ -496,0 +651,6 @@\n+        \/**\n+         * {@return local variable target info}\n+         * @param startLabel code label indicating start of an interval where variable has value\n+         * @param endLabel code label indicating start of an interval where variable has value\n+         * @param index index into the local variables\n+         *\/\n@@ -570,17 +731,2 @@\n-     * JVMS: Wherever a type is used in a declaration or expression, the type_path structure identifies which part of\n-     * the type is annotated. An annotation may appear on the type itself, but if the type is a reference type, then\n-     * there are additional locations where an annotation may appear:\n-     *\n-     * If an array type T[] is used in a declaration or expression, then an annotation may appear on any component type\n-     * of the array type, including the element type.\n-     *\n-     * If a nested type T1.T2 is used in a declaration or expression, then an annotation may appear on the name of the\n-     * innermost member type and any enclosing type for which a type annotation is admissible {@jls 9.7.4}.\n-     *\n-     * If a parameterized type {@literal T<A> or T<? extends A> or T<? super A>} is used in a declaration or expression, then an\n-     * annotation may appear on any type argument or on the bound of any wildcard type argument.\n-     *\n-     * JVMS: ...  each entry in the path array represents an iterative, left-to-right step towards the precise location\n-     * of the annotation in an array type, nested type, or parameterized type. (In an array type, the iteration visits\n-     * the array type itself, then its component type, then the component type of that component type, and so on,\n-     * until the element type is reached.)\n+     * JVMS: Type_path structure identifies which part of the type is annotated,\n+     * as defined in {@jvms 4.7.20.2}\n@@ -591,0 +737,3 @@\n+        \/**\n+         * Type path kind, as defined in {@jvms 4.7.20.2}\n+         *\/\n@@ -592,0 +741,2 @@\n+\n+            \/** Annotation is deeper in an array type *\/\n@@ -593,0 +744,2 @@\n+\n+            \/** Annotation is deeper in a nested type *\/\n@@ -594,0 +747,2 @@\n+\n+            \/** Annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -595,0 +750,2 @@\n+\n+            \/** Annotation is on a type argument of a parameterized type *\/\n@@ -603,0 +760,3 @@\n+            \/**\n+             * {@return type path kind value}\n+             *\/\n@@ -608,0 +768,1 @@\n+        \/** static instance for annotation is deeper in an array type *\/\n@@ -609,0 +770,2 @@\n+\n+        \/** static instance for annotation is deeper in a nested type *\/\n@@ -610,0 +773,2 @@\n+\n+        \/** static instance for annotation is on the bound of a wildcard type argument of a parameterized type *\/\n@@ -632,0 +797,5 @@\n+        \/**\n+         * {@return type path component of an annotation}\n+         * @param typePathKind the kind of path element\n+         * @param typeArgumentIndex type argument index\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":189,"deletions":19,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -92,3 +92,1 @@\n-        \/**\n-         * verification type top\n-         *\/\n+        \/** verification type top *\/\n@@ -97,3 +95,1 @@\n-        \/**\n-         * verification type int\n-         *\/\n+        \/** verification type int *\/\n@@ -102,3 +98,1 @@\n-        \/**\n-         * verification type float\n-         *\/\n+        \/** verification type float *\/\n@@ -107,3 +101,1 @@\n-        \/**\n-         * verification type double\n-         *\/\n+        \/** verification type double *\/\n@@ -112,3 +104,1 @@\n-        \/**\n-         * verification type long\n-         *\/\n+        \/** verification type long *\/\n@@ -117,3 +107,1 @@\n-        \/**\n-         * verification type null\n-         *\/\n+        \/** verification type null *\/\n@@ -122,3 +110,1 @@\n-        \/**\n-         * verification type uninitializedThis\n-         *\/\n+        \/** verification type uninitializedThis *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapFrameInfo.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"}]}