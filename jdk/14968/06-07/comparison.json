{"files":[{"patch":"@@ -100,1 +100,1 @@\n-         * {@return function mapping attribute names to attribute mappers}\n+         * {@return the function mapping attribute names to attribute mappers}\n@@ -391,1 +391,1 @@\n-     * @param model class model to transform\n+     * @param model the class model to transform\n@@ -406,1 +406,1 @@\n-     * @param model class model to transform\n+     * @param model the class model to transform\n@@ -429,1 +429,1 @@\n-     * @param model class model to transform\n+     * @param model the class model to transform\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n- * @param <E> element type\n- * @param <B> builder type\n+ * @param <E> the element type\n+ * @param <B> the builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,3 +71,3 @@\n- * @param <C> transform type\n- * @param <E> element type\n- * @param <B> builder type\n+ * @param <C> the transform type\n+ * @param <E> the element type\n+ * @param <B> the builder type\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -404,3 +404,3 @@\n-     * Load instruction\n-     * @param tk load type\n-     * @param slot local variable slot\n+     * Generate an instruction to load a value from a local variable\n+     * @param tk the load type\n+     * @param slot the local variable slot\n@@ -415,3 +415,3 @@\n-     * Store instruction\n-     * @param tk store type\n-     * @param slot local variable slot\n+     * Generate an instruction to store a value to a local variable\n+     * @param tk the store type\n+     * @param slot the local variable slot\n@@ -426,3 +426,3 @@\n-     * Increment local variable by constant\n-     * @param slot local variable slot\n-     * @param val increment value\n+     * Generate an instruction to increment a local variable by a constant\n+     * @param slot the local variable slot\n+     * @param val the increment value\n@@ -437,1 +437,1 @@\n-     * Branch instruction\n+     * Generate a branch instruction\n@@ -439,2 +439,2 @@\n-     * @param op branch opcode\n-     * @param target branch target\n+     * @param op the branch opcode\n+     * @param target the branch target\n@@ -449,3 +449,3 @@\n-     * Access jump table by key match and jump\n-     * @param defaultTarget default jump target\n-     * @param cases switch cases\n+     * Generate an instruction to access a jump table by key match and jump\n+     * @param defaultTarget the default jump target\n+     * @param cases the switch cases\n@@ -460,5 +460,5 @@\n-     * Access jump table by index and jump\n-     * @param lowValue low key value\n-     * @param highValue high key value\n-     * @param defaultTarget default jump target\n-     * @param cases switch cases\n+     * Generate an instruction to access a jump table by index and jump\n+     * @param lowValue the low key value\n+     * @param highValue the high key value\n+     * @param defaultTarget the default jump target\n+     * @param cases the switch cases\n@@ -473,2 +473,2 @@\n-     * Return instruction\n-     * @param tk return type\n+     * Generate return instruction\n+     * @param tk the return type\n@@ -483,1 +483,1 @@\n-     * Throw exception or error\n+     * Generate an instruction to throw an exception or error\n@@ -492,1 +492,1 @@\n-     * Field access instruction\n+     * Generate an instruction to access a field\n@@ -494,2 +494,2 @@\n-     * @param opcode field access opcode\n-     * @param ref field reference\n+     * @param opcode the field access opcode\n+     * @param ref the field reference\n@@ -504,1 +504,1 @@\n-     * Field access instruction\n+     * Generate an instruction to access a field\n@@ -506,4 +506,4 @@\n-     * @param opcode field access opcode\n-     * @param owner class\n-     * @param name field name\n-     * @param type field type\n+     * @param opcode the field access opcode\n+     * @param owner the class\n+     * @param name the field name\n+     * @param type the field type\n@@ -517,1 +517,1 @@\n-     * Invoke a method or constructor\n+     * Generate an instruction to invoke a method or constructor\n@@ -519,2 +519,2 @@\n-     * @param opcode invoke opcode\n-     * @param ref interface method or method reference\n+     * @param opcode the invoke opcode\n+     * @param ref the interface method or method reference\n@@ -528,1 +528,1 @@\n-     * Invoke a method or constructor\n+     * Generate an instruction to invoke a method or constructor\n@@ -530,5 +530,5 @@\n-     * @param opcode invoke opcode\n-     * @param owner class\n-     * @param name method name\n-     * @param desc method type\n-     * @param isInterface interface method invocation indication\n+     * @param opcode the invoke opcode\n+     * @param owner the class\n+     * @param name the method name\n+     * @param desc the method type\n+     * @param isInterface the interface method invocation indication\n@@ -544,2 +544,2 @@\n-     * Invoke a dynamically-computed call site\n-     * @param ref dynamic call site\n+     * Generate an instruction to invoke a dynamically-computed call site\n+     * @param ref the dynamic call site\n@@ -554,2 +554,2 @@\n-     *\n-     * @param desc\n+     * Generate an instruction to invoke a dynamically-computed call site\n+     * @param desc the dynamic call site\n@@ -572,2 +572,2 @@\n-     * Create new object\n-     * @param type class\n+     * Generate an instruction to create a new object\n+     * @param type the object type\n@@ -582,2 +582,2 @@\n-     * Create new object\n-     * @param type class\n+     * Generate an instruction to create a new object\n+     * @param type the object type\n@@ -591,2 +591,2 @@\n-     * Create new array\n-     * @param typeKind primitive component type\n+     * Generate an instruction to create a new array of a primitive type\n+     * @param typeKind the primitive component type\n@@ -601,2 +601,2 @@\n-     * Create new array of reference\n-     * @param type component type\n+     * Generate an instruction to create a new array of reference\n+     * @param type the component type\n@@ -611,2 +611,2 @@\n-     * Create new array of reference\n-     * @param type component type\n+     * Generate an instruction to create a new array of reference\n+     * @param type the component type\n@@ -620,3 +620,3 @@\n-     * Create new multidimensional array\n-     * @param dimensions number of dimensions\n-     * @param type array type\n+     * Generate an instruction to create a new multidimensional array\n+     * @param dimensions the number of dimensions\n+     * @param type the array type\n@@ -632,3 +632,3 @@\n-     * Create new multidimensional array\n-     * @param dimensions number of dimensions\n-     * @param type array type\n+     * Generate an instruction to create a new multidimensional array\n+     * @param dimensions the number of dimensions\n+     * @param type the array type\n@@ -643,2 +643,2 @@\n-     * Array load instruction\n-     * @param tk array element type\n+     * Generate an instruction to load from an array\n+     * @param tk the array element type\n@@ -654,2 +654,2 @@\n-     * Array store instruction\n-     * @param tk array element type\n+     * Generate an instruction to store into an array\n+     * @param tk the array element type\n@@ -665,1 +665,1 @@\n-     * Type check instruction\n+     * Generate a type checking instruction\n@@ -667,2 +667,2 @@\n-     * @param opcode type check instruction opcode\n-     * @param type type\n+     * @param opcode the type check instruction opcode\n+     * @param type the type\n@@ -678,1 +678,1 @@\n-     * Type check instruction\n+     * Generate a type checking instruction\n@@ -680,2 +680,2 @@\n-     * @param opcode type check instruction opcode\n-     * @param type type\n+     * @param opcode the type check instruction opcode\n+     * @param type the type\n@@ -689,3 +689,3 @@\n-     * Convert instruction\n-     * @param fromType source type\n-     * @param toType target type\n+     * Generate a type converting instruction\n+     * @param fromType the source type\n+     * @param toType the target type\n@@ -700,2 +700,2 @@\n-     * Stack instruction\n-     * @param opcode stack instruction opcode\n+     * Generate a stack manipulating instruction\n+     * @param opcode the stack instruction opcode\n@@ -711,1 +711,1 @@\n-     * Operator instruction\n+     * Generate an operator instruction\n@@ -713,1 +713,1 @@\n-     * @param opcode operator instruction opcode\n+     * @param opcode the operator instruction opcode\n@@ -722,1 +722,1 @@\n-     * Constant instruction\n+     * Generate an instruction pushing a constant onto the operand stack\n@@ -724,2 +724,2 @@\n-     * @param opcode constant instruction opcode\n-     * @param value constant value\n+     * @param opcode the constant instruction opcode\n+     * @param value the constant value\n@@ -738,2 +738,2 @@\n-     * Constant instruction\n-     * @param value constant value\n+     * Generate an instruction pushing a constant onto the operand stack\n+     * @param value the constant value\n@@ -776,1 +776,1 @@\n-     * Monitor instruction\n+     * Generate a monitor instruction\n@@ -778,1 +778,1 @@\n-     * @param opcode monitor instruction opcode\n+     * @param opcode the monitor instruction opcode\n@@ -787,1 +787,1 @@\n-     * Do nothing instruction\n+     * Generate a do nothing instruction\n@@ -796,1 +796,1 @@\n-     * Do nothing instruction\n+     * Generate a do nothing instruction\n@@ -817,1 +817,1 @@\n-     * @param label label\n+     * @param label the label\n@@ -826,2 +826,2 @@\n-     * Declare source line number of current position\n-     * @param line line number\n+     * Declare a source line number of the current builder position\n+     * @param line the line number\n@@ -836,5 +836,5 @@\n-     * Exception table entry\n-     * @param start try block start\n-     * @param end try block end\n-     * @param handler exception handler start\n-     * @param catchType catch type or null to catch all exceptions and errors\n+     * Declare an exception table entry\n+     * @param start the try block start\n+     * @param end the try block end\n+     * @param handler the exception handler start\n+     * @param catchType the catch type or null to catch all exceptions and errors\n@@ -849,5 +849,5 @@\n-     * Exception table entry\n-     * @param start try block start\n-     * @param end try block end\n-     * @param handler exception handler start\n-     * @param catchType optional catch type, empty to catch all exceptions and errors\n+     * Declare an exception table entry\n+     * @param start the try block start\n+     * @param end the try block end\n+     * @param handler the exception handler start\n+     * @param catchType the optional catch type, empty to catch all exceptions and errors\n@@ -862,5 +862,5 @@\n-     * Exception table entry\n-     * @param start try block start\n-     * @param end try block end\n-     * @param handler exception handler start\n-     * @param catchType catch type\n+     * Declare an exception table entry\n+     * @param start the try block start\n+     * @param end the try block end\n+     * @param handler the exception handler start\n+     * @param catchType the catch type\n@@ -875,4 +875,4 @@\n-     * Exception table entry catching all exceptions and errors\n-     * @param start try block start\n-     * @param end try block end\n-     * @param handler exception handler start\n+     * Declare an exception table entry catching all exceptions and errors\n+     * @param start the try block start\n+     * @param end the try block end\n+     * @param handler the exception handler start\n@@ -887,3 +887,3 @@\n-     * Character range entry\n-     * @param startScope start scope of the character range\n-     * @param endScope end scope of the character range\n+     * Declare a character range entry\n+     * @param startScope the start scope of the character range\n+     * @param endScope the end scope of the character range\n@@ -892,1 +892,1 @@\n-     * @param flags flags word, indicating the kind of range\n+     * @param flags the flags word, indicating the kind of range\n@@ -901,6 +901,6 @@\n-     * Local variable entry\n-     * @param slot local variable slot\n-     * @param nameEntry variable name\n-     * @param descriptorEntry variable descriptor\n-     * @param startScope start scope of the variable\n-     * @param endScope end scope of the variable\n+     * Declare a local variable entry\n+     * @param slot the local variable slot\n+     * @param nameEntry the variable name\n+     * @param descriptorEntry the variable descriptor\n+     * @param startScope the start scope of the variable\n+     * @param endScope the end scope of the variable\n@@ -915,6 +915,6 @@\n-     * Local variable entry\n-     * @param slot local variable slot\n-     * @param name variable name\n-     * @param descriptor variable descriptor\n-     * @param startScope start scope of the variable\n-     * @param endScope end scope of the variable\n+     * Declare a local variable entry\n+     * @param slot the local variable slot\n+     * @param name the variable name\n+     * @param descriptor the variable descriptor\n+     * @param startScope the start scope of the variable\n+     * @param endScope the end scope of the variable\n@@ -931,6 +931,6 @@\n-     * Local variable type entry\n-     * @param slot local variable slot\n-     * @param nameEntry variable name\n-     * @param signatureEntry variable signature\n-     * @param startScope start scope of the variable\n-     * @param endScope end scope of the variable\n+     * Declare a local variable type entry\n+     * @param slot the local variable slot\n+     * @param nameEntry the variable name\n+     * @param signatureEntry the variable signature\n+     * @param startScope the start scope of the variable\n+     * @param endScope the end scope of the variable\n@@ -945,6 +945,6 @@\n-     * Local variable type entry\n-     * @param slot local variable slot\n-     * @param name variable name\n-     * @param signature variable signature\n-     * @param startScope start scope of the variable\n-     * @param endScope end scope of the variable\n+     * Declare a local variable type entry\n+     * @param slot the local variable slot\n+     * @param name the variable name\n+     * @param signature the variable signature\n+     * @param startScope the start scope of the variable\n+     * @param endScope the end scope of the variable\n@@ -963,1 +963,1 @@\n-     * Push null\n+     * Generate an instruction pushing the null object reference onto the operand stack\n@@ -971,1 +971,1 @@\n-     * Load reference from array\n+     * Generate an instruction to load a reference from an array\n@@ -979,1 +979,1 @@\n-     * Store into reference array\n+     * Generate an instruction to store into a reference array\n@@ -987,2 +987,2 @@\n-     * Load reference from local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to load a reference from a local variable\n+     * @param slot the local variable slot\n@@ -996,2 +996,2 @@\n-     * Create new array of reference\n-     * @param classEntry component type\n+     * Generate an instruction to create a new array of reference\n+     * @param classEntry the component type\n@@ -1005,2 +1005,2 @@\n-     * Create new array of reference\n-     * @param className component type\n+     * Generate an instruction to create a new array of reference\n+     * @param className the component type\n@@ -1014,1 +1014,1 @@\n-     * Return reference from method\n+     * Generate an instruction to return a reference from the method\n@@ -1022,1 +1022,1 @@\n-     * Get length of array\n+     * Generate an instruction to get length of an array\n@@ -1030,2 +1030,2 @@\n-     * Store reference into local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to store a reference into a local variable\n+     * @param slot the local variable slot\n@@ -1039,1 +1039,1 @@\n-     * Throw exception or error\n+     * Generate an instruction to throw an exception or error\n@@ -1047,1 +1047,1 @@\n-     * Load byte from array\n+     * Generate an instruction to load a byte from a array\n@@ -1055,1 +1055,1 @@\n-     * Store into byte array\n+     * Generate an instruction to store into a byte array\n@@ -1063,2 +1063,2 @@\n-     * Push byte\n-     * @param b byte\n+     * Generate an instruction pushing a byte onto the operand stack\n+     * @param b the byte\n@@ -1072,1 +1072,1 @@\n-     * Load char from array\n+     * Generate an instruction to load a char from an array\n@@ -1080,1 +1080,1 @@\n-     * Store into char array\n+     * Generate an instruction to store into a char array\n@@ -1088,2 +1088,2 @@\n-     * Check whether object is of given type\n-     * @param type object type\n+     * Generate an instruction to check whether an object is of the given type\n+     * @param type the object type\n@@ -1097,2 +1097,2 @@\n-     * Check whether object is of given type\n-     * @param type object type\n+     * Generate an instruction to check whether an object is of the given type\n+     * @param type the object type\n@@ -1106,1 +1106,1 @@\n-     * Convert double to float\n+     * Generate an instruction to convert a double into a float\n@@ -1114,1 +1114,1 @@\n-     * Convert double to int\n+     * Generate an instruction to convert a double into an int\n@@ -1122,1 +1122,1 @@\n-     * Convert double to long\n+     * Generate an instruction to convert a double into a long\n@@ -1130,1 +1130,1 @@\n-     * Add double\n+     * Generate an instruction to add a double\n@@ -1138,1 +1138,1 @@\n-     * Load double from array\n+     * Generate an instruction to load a double from an array\n@@ -1146,1 +1146,1 @@\n-     * Store into double array\n+     * Generate an instruction to store into a double array\n@@ -1154,1 +1154,1 @@\n-     * Compare double\n+     * Generate an instruction to add a double\n@@ -1162,1 +1162,1 @@\n-     * Compare double\n+     * Generate an instruction to compare doubles\n@@ -1170,1 +1170,1 @@\n-     * Push double constant 0\n+     * Generate an instruction pushing double constant 0 onto the operand stack\n@@ -1178,1 +1178,1 @@\n-     * Push double constant 1\n+     * Generate an instruction pushing double constant 1 onto the operand stack\n@@ -1186,1 +1186,1 @@\n-     * Divide double\n+     * Generate an instruction to divide doubles\n@@ -1194,2 +1194,2 @@\n-     * Load double from local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to load a double from a local variable\n+     * @param slot the local variable slot\n@@ -1203,1 +1203,1 @@\n-     * Multiply double\n+     * Generate an instruction to multiply doubles\n@@ -1211,1 +1211,1 @@\n-     * Negate double\n+     * Generate an instruction to negate a double\n@@ -1219,1 +1219,1 @@\n-     * Remainder double\n+     * Generate an instruction to calculate double remainder\n@@ -1227,1 +1227,1 @@\n-     * Return double from method\n+     * Generate an instruction to return a double from the method\n@@ -1235,2 +1235,2 @@\n-     * Store double into local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to store a double into a local variable\n+     * @param slot the local variable slot\n@@ -1244,1 +1244,1 @@\n-     * Subtract double\n+     * Generate an instruction to subtract doubles\n@@ -1252,1 +1252,1 @@\n-     * Duplicate the top operand stack value\n+     * Generate an instruction to duplicate the top operand stack value\n@@ -1260,1 +1260,1 @@\n-     * Duplicate the top one or two operand stack value\n+     * Generate an instruction to duplicate the top one or two operand stack value\n@@ -1268,1 +1268,1 @@\n-     * Duplicate the top one or two operand stack values and insert two or three\n+     * Generate an instruction to duplicate the top one or two operand stack values and insert two or three\n@@ -1277,1 +1277,1 @@\n-     * Duplicate the top one or two operand stack values and insert two, three,\n+     * Generate an instruction to duplicate the top one or two operand stack values and insert two, three,\n@@ -1286,1 +1286,1 @@\n-     * Duplicate the top operand stack value and insert two values down\n+     * Generate an instruction to duplicate the top operand stack value and insert two values down\n@@ -1294,1 +1294,1 @@\n-     * Duplicate the top operand stack value and insert two or three values down\n+     * Generate an instruction to duplicate the top operand stack value and insert two or three values down\n@@ -1302,1 +1302,1 @@\n-     * Convert float to double\n+     * Generate an instruction to convert a float into a double\n@@ -1310,1 +1310,1 @@\n-     * Convert float to int\n+     * Generate an instruction to convert a float into an int\n@@ -1318,1 +1318,1 @@\n-     * Convert float to long\n+     * Generate an instruction to convert a float into a long\n@@ -1326,1 +1326,1 @@\n-     * Add float\n+     * Generate an instruction to add a float\n@@ -1334,1 +1334,1 @@\n-     * Load float from array\n+     * Generate an instruction to load a float from an array\n@@ -1342,1 +1342,1 @@\n-     * Store into float array\n+     * Generate an instruction to store into a float array\n@@ -1350,1 +1350,1 @@\n-     * Compare float\n+     * Generate an instruction to compare floats\n@@ -1358,1 +1358,1 @@\n-     * Compare float\n+     * Generate an instruction to compare floats\n@@ -1366,1 +1366,1 @@\n-     * Push float constant 0\n+     * Generate an instruction pushing float constant 0 onto the operand stack\n@@ -1374,1 +1374,1 @@\n-     * Push float constant 1\n+     * Generate an instruction pushing float constant 1 onto the operand stack\n@@ -1382,1 +1382,1 @@\n-     * Push float constant 2\n+     * Generate an instruction pushing float constant 2 onto the operand stack\n@@ -1390,1 +1390,1 @@\n-     * Divide float\n+     * Generate an instruction to divide floats\n@@ -1398,2 +1398,2 @@\n-     * Load float from local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to load a float from a local variable\n+     * @param slot the local variable slot\n@@ -1407,1 +1407,1 @@\n-     * Multiply float\n+     * Generate an instruction to multiply floats\n@@ -1415,1 +1415,1 @@\n-     * Negate float\n+     * Generate an instruction to negate a float\n@@ -1423,1 +1423,1 @@\n-     * Remainder float\n+     * Generate an instruction to calculate floats remainder\n@@ -1431,1 +1431,1 @@\n-     * Return float from method\n+     * Generate an instruction to return a float from the method\n@@ -1439,2 +1439,2 @@\n-     * Store float into local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to store a float into a local variable\n+     * @param slot the local variable slot\n@@ -1448,1 +1448,1 @@\n-     * Subtract float\n+     * Generate an instruction to subtract floats\n@@ -1456,2 +1456,2 @@\n-     * Fetch field from object\n-     * @param ref field reference\n+     * Generate an instruction to fetch field from an object\n+     * @param ref the field reference\n@@ -1465,4 +1465,4 @@\n-     * Fetch field from object\n-     * @param owner class\n-     * @param name field name\n-     * @param type field type\n+     * Generate an instruction to fetch field from an object\n+     * @param owner the owner class\n+     * @param name the field name\n+     * @param type the field type\n@@ -1476,2 +1476,2 @@\n-     * Get static field from class\n-     * @param ref field reference\n+     * Generate an instruction to get static field from a class\n+     * @param ref the field reference\n@@ -1485,4 +1485,4 @@\n-     * Get static field from class\n-     * @param owner class\n-     * @param name field name\n-     * @param type field type\n+     * Generate an instruction to get static field from a class\n+     * @param owner the owner class\n+     * @param name the field name\n+     * @param type the field type\n@@ -1496,2 +1496,2 @@\n-     * Branch always\n-     * @param target branch target\n+     * Generate an instruction to branch always\n+     * @param target the branch target\n@@ -1505,2 +1505,2 @@\n-     * Branch always (wide index)\n-     * @param target branch target\n+     * Generate an instruction to branch always with wide index\n+     * @param target the branch target\n@@ -1514,1 +1514,1 @@\n-     * Convert int to byte\n+     * Generate an instruction to convert an int into a byte\n@@ -1522,1 +1522,1 @@\n-     * Convert int to char\n+     * Generate an instruction to convert an int into a char\n@@ -1530,1 +1530,1 @@\n-     * Convert int to double\n+     * Generate an instruction to convert an int into a double\n@@ -1538,1 +1538,1 @@\n-     * Convert int to float\n+     * Generate an instruction to convert an int into a float\n@@ -1546,1 +1546,1 @@\n-     * Convert int to long\n+     * Generate an instruction to convert an int into a long\n@@ -1554,1 +1554,1 @@\n-     * Convert int to short\n+     * Generate an instruction to convert an int into a short\n@@ -1562,1 +1562,1 @@\n-     * Add int\n+     * Generate an instruction to add an int\n@@ -1570,1 +1570,1 @@\n-     * Load int from array\n+     * Generate an instruction to load a int from an array\n@@ -1578,1 +1578,1 @@\n-     * Boolean AND int\n+     * Generate an instruction to calculate boolean AND of ints\n@@ -1586,1 +1586,1 @@\n-     * Store into int array\n+     * Generate an instruction to store into an int array\n@@ -1594,1 +1594,1 @@\n-     * Push int constant 0\n+     * Generate an instruction pushing int constant 0 onto the operand stack\n@@ -1602,1 +1602,1 @@\n-     * Push int constant 1\n+     * Generate an instruction pushing int constant 1 onto the operand stack\n@@ -1610,1 +1610,1 @@\n-     * Push int constant 2\n+     * Generate an instruction pushing int constant 2 onto the operand stack\n@@ -1618,1 +1618,1 @@\n-     * Push int constant 3\n+     * Generate an instruction pushing int constant 3 onto the operand stack\n@@ -1626,1 +1626,1 @@\n-     * Push int constant 4\n+     * Generate an instruction pushing int constant 4 onto the operand stack\n@@ -1634,1 +1634,1 @@\n-     * Push int constant 5\n+     * Generate an instruction pushing int constant 5 onto the operand stack\n@@ -1642,1 +1642,1 @@\n-     * Push int constant -1\n+     * Generate an instruction pushing int constant -1 onto the operand stack\n@@ -1650,1 +1650,1 @@\n-     * Divide int\n+     * Generate an instruction to divide ints\n@@ -1658,2 +1658,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1667,2 +1667,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1676,2 +1676,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1685,2 +1685,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1694,2 +1694,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1703,2 +1703,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1712,2 +1712,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1721,2 +1721,2 @@\n-     * Branch if int comparison succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison succeeds\n+     * @param target the branch target\n@@ -1730,2 +1730,2 @@\n-     * Branch if reference is not null\n-     * @param target branch target\n+     * Generate an instruction to branch if reference is not null\n+     * @param target the branch target\n@@ -1739,2 +1739,2 @@\n-     * Branch if reference is null\n-     * @param target branch target\n+     * Generate an instruction to branch if reference is null\n+     * @param target the branch target\n@@ -1748,2 +1748,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1757,2 +1757,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1766,2 +1766,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1775,2 +1775,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1784,2 +1784,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1793,2 +1793,2 @@\n-     * Branch if int comparison with zero succeeds\n-     * @param target branch target\n+     * Generate an instruction to branch if int comparison with zero succeeds\n+     * @param target the branch target\n@@ -1802,3 +1802,3 @@\n-     * Increment local variable by constant\n-     * @param slot local variable slot\n-     * @param val increment value\n+     * Generate an instruction to increment a local variable by a constant\n+     * @param slot the local variable slot\n+     * @param val the increment value\n@@ -1812,2 +1812,2 @@\n-     * Load int from local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to load an int from a local variable\n+     * @param slot the local variable slot\n@@ -1821,1 +1821,1 @@\n-     * Multiply int\n+     * Generate an instruction to multiply ints\n@@ -1829,1 +1829,1 @@\n-     * Negate int\n+     * Generate an instruction to negate an int\n@@ -1837,2 +1837,2 @@\n-     * Determine if object is of given type\n-     * @param target target type\n+     * Generate an instruction to determine if an object is of the given type\n+     * @param target the target type\n@@ -1846,2 +1846,2 @@\n-     * Determine if object is of given type\n-     * @param target target type\n+     * Generate an instruction to determine if an object is of the given type\n+     * @param target the target type\n@@ -1855,2 +1855,2 @@\n-     * Invoke a dynamically-computed call site\n-     * @param ref dynamic call site\n+     * Generate an instruction to invoke a dynamically-computed call site\n+     * @param ref the dynamic call site\n@@ -1864,2 +1864,2 @@\n-     * Invoke a dynamically-computed call site\n-     * @param ref dynamic call site\n+     * Generate an instruction to invoke a dynamically-computed call site\n+     * @param ref the dynamic call site\n@@ -1873,2 +1873,2 @@\n-     * Invoke interface method\n-     * @param ref interface method reference\n+     * Generate an instruction to invoke an interface method\n+     * @param ref the interface method reference\n@@ -1882,4 +1882,4 @@\n-     * Invoke interface method\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n+     * Generate an instruction to invoke an interface method\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n@@ -1893,1 +1893,1 @@\n-     * Invoke instance method; direct invocation of instance initialization\n+     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n@@ -1895,1 +1895,1 @@\n-     * @param ref interface method reference\n+     * @param ref the interface method reference\n@@ -1903,1 +1903,1 @@\n-     * Invoke instance method; direct invocation of instance initialization\n+     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n@@ -1905,1 +1905,1 @@\n-     * @param ref method reference\n+     * @param ref the method reference\n@@ -1913,1 +1913,1 @@\n-     * Invoke instance method; direct invocation of instance initialization\n+     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n@@ -1915,3 +1915,3 @@\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n@@ -1925,1 +1925,1 @@\n-     * Invoke instance method; direct invocation of instance initialization\n+     * Generate an instruction to invoke an instance method; direct invocation of instance initialization\n@@ -1927,4 +1927,4 @@\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n-     * @param isInterface interface method invocation indication\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n+     * @param isInterface the interface method invocation indication\n@@ -1938,2 +1938,2 @@\n-     * Invoke a class (static) method\n-     * @param ref interface method reference\n+     * Generate an instruction to invoke a class (static) method\n+     * @param ref the interface method reference\n@@ -1947,2 +1947,2 @@\n-     * Invoke a class (static) method\n-     * @param ref method reference\n+     * Generate an instruction to invoke a class (static) method\n+     * @param ref the method reference\n@@ -1956,4 +1956,4 @@\n-     * Invoke a class (static) method\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n+     * Generate an instruction to invoke a class (static) method\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n@@ -1967,5 +1967,5 @@\n-     * Invoke a class (static) method\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n-     * @param isInterface\n+     * Generate an instruction to invoke a class (static) method\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n+     * @param isInterface the interface method invocation indication\n@@ -1979,2 +1979,2 @@\n-     * Invoke instance method; dispatch based on class\n-     * @param ref method reference\n+     * Generate an instruction to invoke an instance method; dispatch based on class\n+     * @param ref the method reference\n@@ -1988,4 +1988,4 @@\n-     * Invoke instance method; dispatch based on class\n-     * @param owner class\n-     * @param name method name\n-     * @param type method type\n+     * Generate an instruction to invoke an instance method; dispatch based on class\n+     * @param owner the owner class\n+     * @param name the method name\n+     * @param type the method type\n@@ -1999,1 +1999,1 @@\n-     * Boolean OR int\n+     * Generate an instruction to calculate boolean OR of ints\n@@ -2007,1 +2007,1 @@\n-     * Remainder int\n+     * Generate an instruction to calculate ints remainder\n@@ -2015,1 +2015,1 @@\n-     * Return int from method\n+     * Generate an instruction to return an int from the method\n@@ -2023,1 +2023,1 @@\n-     * Shift left int\n+     * Generate an instruction to shift an int left\n@@ -2031,1 +2031,1 @@\n-     * Shift right int\n+     * Generate an instruction to shift an int right\n@@ -2039,2 +2039,2 @@\n-     * Store int into local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to store an int into a local variable\n+     * @param slot the local variable slot\n@@ -2048,1 +2048,1 @@\n-     * Subtract int\n+     * Generate an instruction to subtract ints\n@@ -2056,1 +2056,1 @@\n-     * Logical shift right int\n+     * Generate an instruction to logical shift an int right\n@@ -2064,1 +2064,1 @@\n-     * Boolean XOR int\n+     * Generate an instruction to calculate boolean XOR of ints\n@@ -2072,3 +2072,3 @@\n-     * Access jump table by key match and jump\n-     * @param defaultTarget default jump target\n-     * @param cases switch cases\n+     * Generate an instruction to access a jump table by key match and jump\n+     * @param defaultTarget the default jump target\n+     * @param cases the switch cases\n@@ -2082,1 +2082,1 @@\n-     * Convert long to double\n+     * Generate an instruction to convert a long into a double\n@@ -2090,1 +2090,1 @@\n-     * Convert long to float\n+     * Generate an instruction to convert a long into a float\n@@ -2098,1 +2098,1 @@\n-     * Convert long to int\n+     * Generate an instruction to convert a long into an int\n@@ -2106,1 +2106,1 @@\n-     * Add long\n+     * Generate an instruction to add a long\n@@ -2114,1 +2114,1 @@\n-     * Load long from array\n+     * Generate an instruction to load a long from an array\n@@ -2122,1 +2122,1 @@\n-     * Boolean AND long\n+     * Generate an instruction to calculate boolean AND of longs\n@@ -2130,1 +2130,1 @@\n-     * Store into long array\n+     * Generate an instruction to store into a long array\n@@ -2138,1 +2138,1 @@\n-     * Compare long\n+     * Generate an instruction to compare longs\n@@ -2146,1 +2146,1 @@\n-     * Push long constant 0\n+     * Generate an instruction pushing long constant 0 onto the operand stack\n@@ -2154,1 +2154,1 @@\n-     * Push long constant 1\n+     * Generate an instruction pushing long constant 1 onto the operand stack\n@@ -2162,2 +2162,2 @@\n-     * Push item from run-time constant pool\n-     * @param value\n+     * Generate an instruction pushing an item from the run-time constant pool onto the operand stack\n+     * @param value the constant value\n@@ -2171,2 +2171,2 @@\n-     * Push item from run-time constant pool\n-     * @param entry\n+     * Generate an instruction pushing an item from the run-time constant pool onto the operand stack\n+     * @param entry the constant value\n@@ -2183,1 +2183,1 @@\n-     * Divide long\n+     * Generate an instruction to divide longs\n@@ -2191,2 +2191,2 @@\n-     * Load long from local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to load a long from a local variable\n+     * @param slot the local variable slot\n@@ -2200,1 +2200,1 @@\n-     * Multiply long\n+     * Generate an instruction to multiply longs\n@@ -2208,1 +2208,1 @@\n-     * Negate long\n+     * Generate an instruction to negate a long\n@@ -2216,1 +2216,1 @@\n-     * Boolean OR long\n+     * Generate an instruction to calculate boolean OR of longs\n@@ -2224,1 +2224,1 @@\n-     * Remainder long\n+     * Generate an instruction to calculate longs remainder\n@@ -2232,1 +2232,1 @@\n-     * Return long from method\n+     * Generate an instruction to return a long from the method\n@@ -2240,1 +2240,1 @@\n-     * Shift left long\n+     * Generate an instruction to shift a long left\n@@ -2248,1 +2248,1 @@\n-     * Shift right long\n+     * Generate an instruction to shift a long right\n@@ -2256,2 +2256,2 @@\n-     * Store long into local variable\n-     * @param slot local variable slot\n+     * Generate an instruction to store a long into a local variable\n+     * @param slot the local variable slot\n@@ -2265,1 +2265,1 @@\n-     * Subtract long\n+     * Generate an instruction to subtract longs\n@@ -2273,1 +2273,1 @@\n-     * Logical shift right long\n+     * Generate an instruction to logical shift a long left\n@@ -2281,1 +2281,1 @@\n-     * Boolean XOR long\n+     * Generate an instruction to calculate boolean XOR of longs\n@@ -2289,1 +2289,1 @@\n-     * Enter monitor for object\n+     * Generate an instruction to enter monitor for an object\n@@ -2297,1 +2297,1 @@\n-     * Exit monitor for object\n+     * Generate an instruction to exit monitor for an object\n@@ -2305,3 +2305,3 @@\n-     * Create new multidimensional array\n-     * @param array array type\n-     * @param dims number of dimensions\n+     * Generate an instruction to create a new multidimensional array\n+     * @param array the array type\n+     * @param dims the number of dimensions\n@@ -2315,3 +2315,3 @@\n-     * Create new multidimensional array\n-     * @param array array type\n-     * @param dims number of dimensions\n+     * Generate an instruction to create a new multidimensional array\n+     * @param array the array type\n+     * @param dims the number of dimensions\n@@ -2325,2 +2325,2 @@\n-     * Create new object\n-     * @param clazz class\n+     * Generate an instruction to create a new object\n+     * @param clazz the new class type\n@@ -2334,2 +2334,2 @@\n-     * Create new object\n-     * @param clazz class\n+     * Generate an instruction to create a new object\n+     * @param clazz the new class type\n@@ -2343,2 +2343,2 @@\n-     * Create new array\n-     * @param typeKind primitive array type\n+     * Generate an instruction to create a new array of a primitive type\n+     * @param typeKind the primitive array type\n@@ -2352,1 +2352,1 @@\n-     * Pop the top operand stack value\n+     * Generate an instruction to pop the top operand stack value\n@@ -2360,1 +2360,1 @@\n-     * Pop the top one or two operand stack values\n+     * Generate an instruction to pop the top one or two operand stack values\n@@ -2368,2 +2368,2 @@\n-     * Set field in object\n-     * @param ref field reference\n+     * Generate an instruction to set field in an object\n+     * @param ref the field reference\n@@ -2377,4 +2377,4 @@\n-     * Set field in object\n-     * @param owner class\n-     * @param name field name\n-     * @param type field type\n+     * Generate an instruction to set field in an object\n+     * @param owner the owner class\n+     * @param name the field name\n+     * @param type the field type\n@@ -2388,2 +2388,2 @@\n-     * Set static field in class\n-     * @param ref field reference\n+     * Generate an instruction to set static field in a class\n+     * @param ref the field reference\n@@ -2397,4 +2397,4 @@\n-     * Set static field in class\n-     * @param owner class\n-     * @param name field name\n-     * @param type field type\n+     * Generate an instruction to set static field in a class\n+     * @param owner the owner class\n+     * @param name the field name\n+     * @param type the field type\n@@ -2408,1 +2408,1 @@\n-     * Return void from method\n+     * Generate an instruction to return void from the method\n@@ -2416,1 +2416,1 @@\n-     * Load short from array\n+     * Generate an instruction to load a short from an array\n@@ -2424,1 +2424,1 @@\n-     * Store into short array\n+     * Generate an instruction to store into a short array\n@@ -2432,2 +2432,2 @@\n-     * Push short\n-     * @param s short\n+     * Generate an instruction pushing a short onto the operand stack\n+     * @param s the short\n@@ -2441,1 +2441,1 @@\n-     * Swap the top two operand stack values\n+     * Generate an instruction to swap the top two operand stack values\n@@ -2449,5 +2449,5 @@\n-     * Access jump table by index and jump\n-     * @param low low key value\n-     * @param high high key value\n-     * @param defaultTarget default jump target\n-     * @param cases switch cases\n+     * Generate an instruction to access a jump table by index and jump\n+     * @param low the low key value\n+     * @param high the high key value\n+     * @param defaultTarget the default jump target\n+     * @param cases the switch cases\n@@ -2461,3 +2461,3 @@\n-     * Access jump table by index and jump\n-     * @param defaultTarget default jump target\n-     * @param cases switch cases\n+     * Generate an instruction to access a jump table by index and jump\n+     * @param defaultTarget the default jump target\n+     * @param cases the switch cases\n@@ -2476,5 +2476,0 @@\n-\n-    \/\/ Structured conveniences:\n-\n-    \/\/   allocLocal(type)\n-    \/\/   returnFromMethod(inferred)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":410,"deletions":415,"binary":false,"changes":825,"status":"modified"}]}