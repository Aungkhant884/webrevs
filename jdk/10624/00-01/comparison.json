{"files":[{"patch":"@@ -38,1 +38,1 @@\n-            \"IntegerPolynomial25519\", 26, 10, 255,\n+            \"IntegerPolynomial25519\", 26, 10, 1, 255,\n@@ -68,1 +68,1 @@\n-            \"IntegerPolynomial448\", 28, 16, 448,\n+            \"IntegerPolynomial448\", 28, 16, 1, 448,\n@@ -104,1 +104,1 @@\n-            \"IntegerPolynomialP256\", 26, 10, 256,\n+            \"IntegerPolynomialP256\", 26, 10, 2, 256,\n@@ -122,1 +122,1 @@\n-            \"IntegerPolynomialP384\", 28, 14, 384,\n+            \"IntegerPolynomialP384\", 28, 14, 2, 384,\n@@ -140,1 +140,1 @@\n-            \"IntegerPolynomialP521\", 28, 19, 521,\n+            \"IntegerPolynomialP521\", 28, 19, 2, 521,\n@@ -155,1 +155,1 @@\n-            \"P256OrderField\", 26, 10, 256,\n+            \"P256OrderField\", 26, 10, 1, 256,\n@@ -161,1 +161,1 @@\n-            \"P384OrderField\", 28, 14, 384,\n+            \"P384OrderField\", 28, 14, 1, 384,\n@@ -167,1 +167,1 @@\n-            \"P521OrderField\", 28, 19, 521,\n+            \"P521OrderField\", 28, 19, 1, 521,\n@@ -173,1 +173,1 @@\n-            \"Curve25519OrderField\", 26, 10, 252,\n+            \"Curve25519OrderField\", 26, 10, 1, 252,\n@@ -179,1 +179,1 @@\n-            \"Curve448OrderField\", 28, 16, 446,\n+            \"Curve448OrderField\", 28, 16, 1, 446,\n@@ -299,0 +299,1 @@\n+        private final int maxAdds;\n@@ -305,1 +306,2 @@\n-                int power, Iterable<Term> terms, List<CarryReduce> crSequence,\n+                int maxAdds, int power,\n+                Iterable<Term> terms, List<CarryReduce> crSequence,\n@@ -310,0 +312,1 @@\n+            this.maxAdds = maxAdds;\n@@ -317,1 +320,2 @@\n-                int power, String term, List<CarryReduce> crSequence,\n+                int maxAdds, int power,\n+                String term, List<CarryReduce> crSequence,\n@@ -322,0 +326,1 @@\n+            this.maxAdds = maxAdds;\n@@ -376,0 +381,4 @@\n+        public int getMaxAdds() {\n+            return maxAdds;\n+        }\n+\n@@ -616,0 +625,2 @@\n+        result.appendLine(\"private static final int MAX_ADDS = \"\n+                + params.getMaxAdds() + \";\");\n@@ -631,1 +642,1 @@\n-        result.appendLine(\"    super(BITS_PER_LIMB, NUM_LIMBS, MODULUS);\");\n+        result.appendLine(\"    super(BITS_PER_LIMB, NUM_LIMBS, MAX_ADDS, MODULUS);\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/intpoly\/FieldGen.java","additions":24,"deletions":13,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+    private final int maxAdds;\n@@ -114,0 +115,1 @@\n+                      int maxAdds,\n@@ -120,0 +122,1 @@\n+        this.maxAdds = maxAdds;\n@@ -134,0 +137,4 @@\n+    public int getMaxAdds() {\n+        return maxAdds;\n+    }\n+\n@@ -274,1 +281,1 @@\n-        return new ImmutableElement(result);\n+        return new ImmutableElement(result, 0);\n@@ -508,0 +515,1 @@\n+        protected int numAdds;\n@@ -517,0 +525,1 @@\n+            this.numAdds = 0;\n@@ -519,1 +528,1 @@\n-        private Element(long[] limbs) {\n+        private Element(long[] limbs, int numAdds) {\n@@ -521,0 +530,1 @@\n+            this.numAdds = numAdds;\n@@ -525,0 +535,1 @@\n+            this.numAdds = 0;\n@@ -539,1 +550,1 @@\n-            return new MutableElement(limbs.clone());\n+            return new MutableElement(limbs.clone(), numAdds);\n@@ -545,1 +556,14 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n@@ -551,1 +575,0 @@\n-            reduce(newLimbs);\n@@ -553,1 +576,2 @@\n-            return new ImmutableElement(newLimbs);\n+            int newNumAdds = Math.max(numAdds, b.numAdds) + 1;\n+            return new ImmutableElement(newLimbs, newNumAdds);\n@@ -564,1 +588,1 @@\n-            return new ImmutableElement(newLimbs);\n+            return new ImmutableElement(newLimbs, numAdds);\n@@ -579,1 +603,12 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            if (b.numAdds > maxAdds) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n@@ -583,1 +618,1 @@\n-            return new ImmutableElement(newLimbs);\n+            return new ImmutableElement(newLimbs, 0);\n@@ -588,0 +623,6 @@\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n@@ -590,1 +631,1 @@\n-            return new ImmutableElement(newLimbs);\n+            return new ImmutableElement(newLimbs, 0);\n@@ -593,1 +634,1 @@\n-        public void addModPowerTwo(IntegerModuloP arg, byte[] result) {\n+\tpublic void addModPowerTwo(IntegerModuloP arg, byte[] result) {\n@@ -600,0 +641,6 @@\n+            \/\/ Reduce if required.\n+            if (numAdds != 0) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n@@ -607,2 +654,2 @@\n-        protected MutableElement(long[] limbs) {\n-            super(limbs);\n+        protected MutableElement(long[] limbs, int numAdds) {\n+            super(limbs, numAdds);\n@@ -613,1 +660,1 @@\n-            return new ImmutableElement(limbs.clone());\n+            return new ImmutableElement(limbs.clone(), numAdds);\n@@ -622,0 +669,1 @@\n+            numAdds = other.numAdds;\n@@ -630,0 +678,3 @@\n+            int numAddsTemp = numAdds;\n+            numAdds = other.numAdds;\n+            other.numAdds = numAddsTemp;\n@@ -639,0 +690,1 @@\n+            numAdds = other.numAdds;\n@@ -647,0 +699,1 @@\n+            this.numAdds = 0;\n@@ -656,0 +709,1 @@\n+            numAdds = 0;\n@@ -663,1 +717,13 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            if (b.numAdds > maxAdds) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n+\n@@ -665,0 +731,1 @@\n+            numAdds = 0;\n@@ -670,1 +737,7 @@\n-            int value = ((Limb) v).value;\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            int value = ((Limb)v).value;\n@@ -672,0 +745,1 @@\n+            numAdds = 0;\n@@ -678,1 +752,14 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n@@ -683,1 +770,0 @@\n-            reduce(limbs);\n@@ -685,0 +771,1 @@\n+            numAdds = Math.max(numAdds, b.numAdds) + 1;\n@@ -691,1 +778,14 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n@@ -696,1 +796,0 @@\n-            reduce(limbs);\n@@ -698,0 +797,1 @@\n+            numAdds = Math.max(numAdds, b.numAdds) + 1;\n@@ -703,0 +803,6 @@\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n@@ -704,0 +810,1 @@\n+            numAdds = 0;\n@@ -726,2 +833,2 @@\n-        protected ImmutableElement(long[] limbs) {\n-            super(limbs);\n+        protected ImmutableElement(long[] limbs, int numAdds) {\n+            super(limbs, numAdds);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial.java","additions":129,"deletions":22,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        super(BITS_PER_LIMB, NUM_LIMBS, MODULUS);\n+        super(BITS_PER_LIMB, NUM_LIMBS, 1, MODULUS);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial1305.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        super(bitsPerLimb, numLimbs,\n+        super(bitsPerLimb, numLimbs, 1,\n@@ -117,1 +117,1 @@\n-        return new ImmutableElement(result);\n+        return new ImmutableElement(result, 0);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomialModBinP.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-\n@@ -30,0 +29,1 @@\n+import java.security.spec.NamedParameterSpec;\n@@ -44,0 +44,4 @@\n+\n+    @Param({\"secp256r1\", \"secp384r1\", \"secp521r1\", \"Ed25519\", \"Ed448\"})\n+    private String curveName;\n+\n@@ -46,0 +50,4 @@\n+    record CurveSpec(String curveName, String signName) {\n+        \/\/ blank\n+    }\n+\n@@ -51,0 +59,8 @@\n+        String signName = switch (curveName) {\n+            case \"secp256r1\" -> \"Sha256WithECDSA\";\n+            case \"secp384r1\" -> \"Sha384WithECDSA\";\n+            case \"secp521r1\" -> \"Sha512WithECDSA\";\n+            case \"Ed25519\" -> \"Ed25519\";\n+            case \"Ed448\" -> \"Ed448\";\n+            default -> throw new RuntimeException();\n+        };\n@@ -52,5 +68,7 @@\n-        AlgorithmParameters params =\n-                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n-        params.init(new ECGenParameterSpec(\"secp256r1\"));\n-        ECGenParameterSpec ecParams =\n-                params.getParameterSpec(ECGenParameterSpec.class);\n+        KeyPair kp;\n+        if (curveName.startsWith(\"secp\")) {\n+            AlgorithmParameters params =\n+                    AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+            params.init(new ECGenParameterSpec(curveName));\n+            ECGenParameterSpec ecParams =\n+                    params.getParameterSpec(ECGenParameterSpec.class);\n@@ -58,4 +76,11 @@\n-        KeyPairGenerator kpg =\n-                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n-        kpg.initialize(ecParams);\n-        KeyPair kp = kpg.generateKeyPair();\n+            KeyPairGenerator kpg =\n+                    KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n+            kpg.initialize(ecParams);\n+            kp = kpg.generateKeyPair();\n+        } else {\n+            KeyPairGenerator kpg =\n+                    KeyPairGenerator.getInstance(curveName, \"SunEC\");\n+            NamedParameterSpec spec = new NamedParameterSpec(curveName);\n+            kpg.initialize(spec);\n+            kp = kpg.generateKeyPair();\n+        }\n@@ -63,1 +88,1 @@\n-        signer = Signature.getInstance(\"Sha256WithECDSA\", \"SunEC\");\n+        signer = Signature.getInstance(signName, \"SunEC\");\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":36,"deletions":11,"binary":false,"changes":47,"status":"modified"}]}