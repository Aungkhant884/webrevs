{"files":[{"patch":"@@ -38,1 +38,1 @@\n-            \"IntegerPolynomial25519\", 26, 10, 1, 255,\n+            \"IntegerPolynomial25519\", 26, 10, 255,\n@@ -68,1 +68,1 @@\n-            \"IntegerPolynomial448\", 28, 16, 1, 448,\n+            \"IntegerPolynomial448\", 28, 16, 448,\n@@ -104,1 +104,1 @@\n-            \"IntegerPolynomialP256\", 26, 10, 2, 256,\n+            \"IntegerPolynomialP256\", 26, 10, 256,\n@@ -122,1 +122,1 @@\n-            \"IntegerPolynomialP384\", 28, 14, 2, 384,\n+            \"IntegerPolynomialP384\", 28, 14, 384,\n@@ -140,1 +140,1 @@\n-            \"IntegerPolynomialP521\", 28, 19, 2, 521,\n+            \"IntegerPolynomialP521\", 28, 19, 521,\n@@ -155,1 +155,1 @@\n-            \"P256OrderField\", 26, 10, 1, 256,\n+            \"P256OrderField\", 26, 10, 256,\n@@ -161,1 +161,1 @@\n-            \"P384OrderField\", 28, 14, 1, 384,\n+            \"P384OrderField\", 28, 14, 384,\n@@ -167,1 +167,1 @@\n-            \"P521OrderField\", 28, 19, 1, 521,\n+            \"P521OrderField\", 28, 19, 521,\n@@ -173,1 +173,1 @@\n-            \"Curve25519OrderField\", 26, 10, 1, 252,\n+            \"Curve25519OrderField\", 26, 10, 252,\n@@ -179,1 +179,1 @@\n-            \"Curve448OrderField\", 28, 16, 1, 446,\n+            \"Curve448OrderField\", 28, 16, 446,\n@@ -299,1 +299,0 @@\n-        private final int maxAdds;\n@@ -306,2 +305,1 @@\n-                int maxAdds, int power,\n-                Iterable<Term> terms, List<CarryReduce> crSequence,\n+                int power, Iterable<Term> terms, List<CarryReduce> crSequence,\n@@ -312,1 +310,0 @@\n-            this.maxAdds = maxAdds;\n@@ -320,2 +317,1 @@\n-                int maxAdds, int power,\n-                String term, List<CarryReduce> crSequence,\n+                int power, String term, List<CarryReduce> crSequence,\n@@ -326,1 +322,0 @@\n-            this.maxAdds = maxAdds;\n@@ -381,4 +376,0 @@\n-        public int getMaxAdds() {\n-            return maxAdds;\n-        }\n-\n@@ -625,2 +616,0 @@\n-        result.appendLine(\"private static final int MAX_ADDS = \"\n-                + params.getMaxAdds() + \";\");\n@@ -642,1 +631,1 @@\n-        result.appendLine(\"    super(BITS_PER_LIMB, NUM_LIMBS, MAX_ADDS, MODULUS);\");\n+        result.appendLine(\"    super(BITS_PER_LIMB, NUM_LIMBS, MODULUS);\");\n","filename":"make\/jdk\/src\/classes\/build\/tools\/intpoly\/FieldGen.java","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -153,8 +153,0 @@\n-\n-    \/**\n-     * Some implementations required reduction operations to be requested\n-     * by the client at certain times. This method reduces the representation.\n-     *\n-     * @return this\n-     *\/\n-    MutableIntegerModuloP setReduced();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/MutableIntegerModuloP.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,3 +38,1 @@\n- * to multiplication must be less than 32 bits. All IntegerPolynomial\n- * implementations allow at most one addition before multiplication. Additions\n- * after that will result in an ArithmeticException.\n+ * to multiplication must be less than 32 bits.\n@@ -79,1 +77,0 @@\n-    private final int maxAdds;\n@@ -117,1 +114,0 @@\n-                      int maxAdds,\n@@ -124,1 +120,0 @@\n-        this.maxAdds = maxAdds;\n@@ -139,4 +134,0 @@\n-    public int getMaxAdds() {\n-        return maxAdds;\n-    }\n-\n@@ -283,1 +274,1 @@\n-        return new ImmutableElement(result, 0);\n+        return new ImmutableElement(result);\n@@ -517,1 +508,0 @@\n-        protected int numAdds;\n@@ -527,1 +517,0 @@\n-            this.numAdds = 0;\n@@ -530,1 +519,1 @@\n-        private Element(long[] limbs, int numAdds) {\n+        private Element(long[] limbs) {\n@@ -532,1 +521,0 @@\n-            this.numAdds = numAdds;\n@@ -537,1 +525,0 @@\n-            this.numAdds = 0;\n@@ -552,5 +539,1 @@\n-            return new MutableElement(limbs.clone(), numAdds);\n-        }\n-\n-        protected boolean isSummand() {\n-            return numAdds < maxAdds;\n+            return new MutableElement(limbs.clone());\n@@ -563,3 +546,0 @@\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n-            }\n@@ -571,0 +551,1 @@\n+            reduce(newLimbs);\n@@ -572,2 +553,1 @@\n-            int newNumAdds = Math.max(numAdds, b.numAdds) + 1;\n-            return new ImmutableElement(newLimbs, newNumAdds);\n+            return new ImmutableElement(newLimbs);\n@@ -584,1 +564,1 @@\n-            return new ImmutableElement(newLimbs, numAdds);\n+            return new ImmutableElement(newLimbs);\n@@ -603,1 +583,1 @@\n-            return new ImmutableElement(newLimbs, 0);\n+            return new ImmutableElement(newLimbs);\n@@ -610,1 +590,1 @@\n-            return new ImmutableElement(newLimbs, 0);\n+            return new ImmutableElement(newLimbs);\n@@ -616,3 +596,0 @@\n-            if (!(isSummand() && other.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n-            }\n@@ -623,3 +600,0 @@\n-            if (!isSummand()) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n-            }\n@@ -633,2 +607,2 @@\n-        protected MutableElement(long[] limbs, int numAdds) {\n-            super(limbs, numAdds);\n+        protected MutableElement(long[] limbs) {\n+            super(limbs);\n@@ -639,1 +613,1 @@\n-            return new ImmutableElement(limbs.clone(), numAdds);\n+            return new ImmutableElement(limbs.clone());\n@@ -648,1 +622,0 @@\n-            numAdds = other.numAdds;\n@@ -657,3 +630,0 @@\n-            int numAddsTemp = numAdds;\n-            numAdds = other.numAdds;\n-            other.numAdds = numAddsTemp;\n@@ -669,1 +639,0 @@\n-            numAdds = other.numAdds;\n@@ -678,1 +647,0 @@\n-            this.numAdds = 0;\n@@ -688,1 +656,0 @@\n-            numAdds = 0;\n@@ -698,1 +665,0 @@\n-            numAdds = 0;\n@@ -706,1 +672,0 @@\n-            numAdds = 0;\n@@ -714,3 +679,0 @@\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n-            }\n@@ -721,0 +683,1 @@\n+            reduce(limbs);\n@@ -722,1 +685,0 @@\n-            numAdds = Math.max(numAdds, b.numAdds) + 1;\n@@ -730,3 +692,0 @@\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n-            }\n@@ -737,0 +696,1 @@\n+            reduce(limbs);\n@@ -738,1 +698,0 @@\n-            numAdds = Math.max(numAdds, b.numAdds) + 1;\n@@ -745,1 +704,0 @@\n-            numAdds = 0;\n@@ -756,7 +714,0 @@\n-\n-        @Override\n-        public MutableElement setReduced() {\n-            reduce(limbs);\n-            numAdds = 0;\n-            return this;\n-        }\n@@ -775,2 +726,2 @@\n-        protected ImmutableElement(long[] limbs, int numAdds) {\n-            super(limbs, numAdds);\n+        protected ImmutableElement(long[] limbs) {\n+            super(limbs);\n@@ -793,2 +744,0 @@\n-\n-\n@@ -796,0 +745,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial.java","additions":17,"deletions":67,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        super(BITS_PER_LIMB, NUM_LIMBS, 1, MODULUS);\n+        super(BITS_PER_LIMB, NUM_LIMBS, MODULUS);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial1305.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        super(bitsPerLimb, numLimbs, 1,\n+        super(bitsPerLimb, numLimbs,\n@@ -117,1 +117,1 @@\n-        return new ImmutableElement(result, 0);\n+        return new ImmutableElement(result);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomialModBinP.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -309,1 +309,0 @@\n-        p.getY().setReduced();\n@@ -320,1 +319,0 @@\n-        t2.setReduced();\n@@ -324,1 +322,0 @@\n-        p.getZ().setReduced();\n@@ -371,1 +368,0 @@\n-        p.getX().setReduced();\n@@ -385,1 +381,0 @@\n-        p.getX().setReduced();\n@@ -395,1 +390,0 @@\n-        t2.setReduced();\n@@ -399,1 +393,0 @@\n-        p.getY().setReduced();\n@@ -452,1 +445,0 @@\n-        p.getY().setReduced();\n@@ -459,1 +451,0 @@\n-        p.getX().setReduced();\n@@ -466,1 +457,0 @@\n-        t2.setReduced();\n@@ -470,1 +460,0 @@\n-        p.getY().setReduced();\n@@ -490,1 +479,0 @@\n-\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECOperations.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        t2.setValue(p.getX()).setSum(p.getY()).setReduced();\n+        t2.setValue(p.getX()).setSum(p.getY());\n@@ -201,1 +201,1 @@\n-        t1.setValue(p.getX()).setDifference(p.getY()).setReduced();\n+        t1.setValue(p.getX()).setDifference(p.getY());\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed25519Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        p1.getX().setDifference(t1).setReduced().setDifference(p1.getY());\n+        p1.getX().setDifference(t1).setDifference(p1.getY());\n@@ -188,1 +188,1 @@\n-        t1.setValue(t2).setSum(p.getY()).setReduced();\n+        t1.setValue(t2).setSum(p.getY());\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed448Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,2 +119,0 @@\n-        \/\/ need to be reduced before output conversion\n-        S.setReduced();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAOperations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,7 +261,0 @@\n-\n-        @Override\n-        public MutableElement setReduced() {\n-            \/\/ do nothing\n-            return this;\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/util\/math\/BigIntegerModuloP.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-                int numAdds = field.getMaxAdds();\n+                int numAdds = 10;   \/\/ check for addition overflow\n","filename":"test\/jdk\/sun\/security\/util\/math\/TestIntegerModuloP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(jvmArgsAppend = {\"-Xms1024m\", \"-Xmx1024m\", \"-Xmn768m\", \"-XX:+UseParallelGC\"}, value = 3)\n+public class KeyPairGenerators {\n+    private KeyPairGenerator kpg;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        kpg = KeyPairGenerator.getInstance(\"EC\");\n+        kpg.initialize(256);\n+    }\n+\n+    @Benchmark\n+    public KeyPair keyPairGen() {\n+        return kpg.generateKeyPair();\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/KeyPairGenerators.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.security.*;\n+import java.security.spec.ECGenParameterSpec;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(jvmArgsAppend = {\"-Xms1024m\", \"-Xmx1024m\", \"-Xmn768m\", \"-XX:+UseParallelGC\"}, value = 3)\n+public class Signatures {\n+    private Signature signer;\n+\n+    @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+    private int messageLength;\n+    private byte[] message;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        message = new byte[messageLength];\n+        (new Random(System.nanoTime())).nextBytes(message);\n+\n+\n+        AlgorithmParameters params =\n+                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+        params.init(new ECGenParameterSpec(\"secp256r1\"));\n+        ECGenParameterSpec ecParams =\n+                params.getParameterSpec(ECGenParameterSpec.class);\n+\n+        KeyPairGenerator kpg =\n+                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n+        kpg.initialize(ecParams);\n+        KeyPair kp = kpg.generateKeyPair();\n+\n+        signer = Signature.getInstance(\"Sha256WithECDSA\", \"SunEC\");\n+        signer.initSign(kp.getPrivate());\n+    }\n+\n+    @Benchmark\n+    public byte[] sign() throws SignatureException {\n+        signer.update(message);\n+        return signer.sign();\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}