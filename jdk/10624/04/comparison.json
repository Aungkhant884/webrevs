{"files":[{"patch":"@@ -153,8 +153,0 @@\n-\n-    \/**\n-     * Some implementations required reduction operations to be requested\n-     * by the client at certain times. This method reduces the representation.\n-     *\n-     * @return this\n-     *\/\n-    MutableIntegerModuloP setReduced();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/MutableIntegerModuloP.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,3 +38,1 @@\n- * to multiplication must be less than 32 bits. All IntegerPolynomial\n- * implementations allow at most one addition before multiplication. Additions\n- * after that will result in an ArithmeticException.\n+ * to multiplication must be less than 32 bits.\n@@ -556,4 +554,0 @@\n-        protected boolean isSummand() {\n-            return numAdds < maxAdds;\n-        }\n-\n@@ -563,3 +557,13 @@\n-            Element b = (Element) genB;\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n@@ -600,1 +604,12 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            if (b.numAdds > maxAdds) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n@@ -609,0 +624,6 @@\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n@@ -616,3 +637,6 @@\n-            Element other = (Element) arg;\n-            if (!(isSummand() && other.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n+            Element other = (Element)arg;\n+\n+            \/\/ Reduce if required.\n+            if (numAdds > 32 - bitsPerLimb) {\n+                reduce(limbs);\n+                numAdds = 0;\n@@ -620,0 +644,6 @@\n+\n+            if (other.numAdds > 32 - bitsPerLimb) {\n+                reduce(other.limbs);\n+                other.numAdds = 0;\n+            }\n+\n@@ -624,2 +654,4 @@\n-            if (!isSummand()) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n+            \/\/ Reduce if required.\n+            if (numAdds != 0) {\n+                reduce(limbs);\n+                numAdds = 0;\n@@ -627,0 +659,1 @@\n+\n@@ -697,1 +730,13 @@\n-            Element b = (Element) genB;\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            if (b.numAdds > maxAdds) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n+            }\n+\n@@ -705,1 +750,7 @@\n-            int value = ((Limb) v).value;\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n+            int value = ((Limb)v).value;\n@@ -714,3 +765,13 @@\n-            Element b = (Element) genB;\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n@@ -730,3 +791,13 @@\n-            Element b = (Element) genB;\n-            if (!(isSummand() && b.isSummand())) {\n-                throw new ArithmeticException(\"Not a valid summand\");\n+            Element b = (Element)genB;\n+\n+            \/\/ Reduce if required.\n+            \/\/ if (numAdds >= maxAdds) {\n+            if (numAdds > 32 - bitsPerLimb) {\n+               reduce(limbs);\n+               numAdds = 0;\n+            }\n+\n+            \/\/ if (b.numAdds >= maxAdds) {\n+            if (b.numAdds > 32 - bitsPerLimb) {\n+                reduce(b.limbs);\n+                b.numAdds = 0;\n@@ -745,0 +816,6 @@\n+            \/\/ Reduce if required.\n+            if (numAdds > maxAdds) {\n+                reduce(limbs);\n+                numAdds = 0;\n+            }\n+\n@@ -757,7 +834,0 @@\n-\n-        @Override\n-        public MutableElement setReduced() {\n-            reduce(limbs);\n-            numAdds = 0;\n-            return this;\n-        }\n@@ -794,2 +864,0 @@\n-\n-\n@@ -797,0 +865,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/IntegerPolynomial.java","additions":102,"deletions":33,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -365,1 +365,0 @@\n-        p.getX().setReduced();\n@@ -439,1 +438,0 @@\n-        p.getY().setReduced();\n@@ -471,1 +469,0 @@\n-\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECOperations.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        t2.setValue(p.getX()).setSum(p.getY()).setReduced();\n+        t2.setValue(p.getX()).setSum(p.getY());\n@@ -201,1 +201,1 @@\n-        t1.setValue(p.getX()).setDifference(p.getY()).setReduced();\n+        t1.setValue(p.getX()).setDifference(p.getY());\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed25519Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        p1.getX().setDifference(t1).setReduced().setDifference(p1.getY());\n+        p1.getX().setDifference(t1).setDifference(p1.getY());\n@@ -188,1 +188,1 @@\n-        t1.setValue(t2).setSum(p.getY()).setReduced();\n+        t1.setValue(t2).setSum(p.getY());\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/Ed448Operations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,2 +119,0 @@\n-        \/\/ need to be reduced before output conversion\n-        S.setReduced();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAOperations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,7 +261,0 @@\n-\n-        @Override\n-        public MutableElement setReduced() {\n-            \/\/ do nothing\n-            return this;\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/util\/math\/BigIntegerModuloP.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-                int numAdds = field.getMaxAdds();\n+                int numAdds = 10;   \/\/ check for addition overflow\n","filename":"test\/jdk\/sun\/security\/util\/math\/TestIntegerModuloP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}