{"files":[{"patch":"@@ -126,0 +126,26 @@\n+void CgroupSubsystemFactory::set_controller_pathes(CgroupInfo* cg_infos,\n+                                                   int controller,\n+                                                   char* name,\n+                                                   char* mount_path,\n+                                                   char* root_path) {\n+  if (cg_infos[controller]._mount_path != NULL) {\n+    \/\/ On some systems duplicate controllers get mounted in addition to\n+    \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+    \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n+    if (strstr(cg_infos[controller]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[controller]._mount_path) {\n+      log_debug(os, container)(\"Duplicate %s controllers detected. Picking %s, skipping %s.\",\n+                               name, mount_path, cg_infos[controller]._mount_path);\n+      os::free(cg_infos[controller]._mount_path);\n+      os::free(cg_infos[controller]._root_mount_path);\n+      cg_infos[controller]._mount_path = os::strdup(mount_path);\n+      cg_infos[controller]._root_mount_path = os::strdup(root_path);\n+    } else {\n+      log_debug(os, container)(\"Duplicate %s controllers detected. Picking %s, skipping %s.\",\n+                               name, cg_infos[controller]._mount_path, mount_path);\n+    }\n+  } else {\n+    cg_infos[controller]._mount_path = os::strdup(mount_path);\n+    cg_infos[controller]._root_mount_path = os::strdup(root_path);\n+  }\n+}\n+\n@@ -304,0 +330,17 @@\n+      \/\/ On some systems duplicate controllers get mounted in addition to\n+      \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+      \/\/ case pick the first one under \/sys\/fs\/cgroup and discard others.\n+      if (cgroupv2_mount_point_found && strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n+        if (strstr(cg_infos[0]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[0]._mount_path &&\n+            strstr(tmp_mount_point, \"\/sys\/fs\/cgroup\") == tmp_mount_point) {\n+          log_debug(os, container)(\"Duplicate cgroupv2 controllers detected. Picking %s, skipping %s.\",\n+                                   tmp_mount_point, cg_infos[0]._mount_path);\n+          for (int i = 0; i < CG_INFO_LENGTH; i++) {\n+            os::free(cg_infos[i]._mount_path);\n+            cg_infos[i]._mount_path = os::strdup(tmp_mount_point);\n+          }\n+        } else {\n+          log_debug(os, container)(\"Duplicate cgroupv2 controllers detected. Picking %s, skipping %s.\",\n+                                   cg_infos[0]._mount_path, tmp_mount_point);\n+        }\n+      }\n@@ -335,3 +378,1 @@\n-          assert(cg_infos[MEMORY_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[MEMORY_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[MEMORY_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_pathes(cg_infos, MEMORY_IDX, token, tmpmount, tmproot);\n@@ -341,17 +382,1 @@\n-          if (cg_infos[CPUSET_IDX]._mount_path != NULL) {\n-            \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n-            \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-            \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n-            if (strstr(cg_infos[CPUSET_IDX]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[CPUSET_IDX]._mount_path) {\n-              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n-                                         tmpmount, cg_infos[CPUSET_IDX]._mount_path);\n-              os::free(cg_infos[CPUSET_IDX]._mount_path);\n-              cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n-            } else {\n-              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n-                                         cg_infos[CPUSET_IDX]._mount_path, tmpmount);\n-            }\n-          } else {\n-            cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n-          }\n-          cg_infos[CPUSET_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_pathes(cg_infos, CPUSET_IDX, token, tmpmount, tmproot);\n@@ -361,3 +386,1 @@\n-          assert(cg_infos[CPU_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPU_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[CPU_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_pathes(cg_infos, CPU_IDX, token, tmpmount, tmproot);\n@@ -367,3 +390,1 @@\n-          assert(cg_infos[CPUACCT_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPUACCT_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[CPUACCT_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_pathes(cg_infos, CPUACCT_IDX, token, tmpmount, tmproot);\n@@ -373,3 +394,1 @@\n-          assert(cg_infos[PIDS_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[PIDS_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[PIDS_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_pathes(cg_infos, PIDS_IDX, token, tmpmount, tmproot);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":48,"deletions":29,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -314,0 +314,5 @@\n+    static void set_controller_pathes(CgroupInfo* cg_infos,\n+                                      int controller,\n+                                      char* name,\n+                                      char* mount_path,\n+                                      char* root_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+    private Path cgroupv2MntInfoDouble;\n+    private Path cgroupv2MntInfoDouble2;\n@@ -70,0 +72,6 @@\n+    private Path cgroupv1MntInfoDoubleMemory;\n+    private Path cgroupv1MntInfoDoubleMemory2;\n+    private Path cgroupv1MntInfoDoubleCpu;\n+    private Path cgroupv1MntInfoDoubleCpu2;\n+    private Path cgroupv1MntInfoDoublePids;\n+    private Path cgroupv1MntInfoDoublePids2;\n@@ -163,0 +171,9 @@\n+    private String mntInfoCgroupv1MoreMemoryLine = \"1100 1098 0:28 \/ \/memory rw,nosuid,nodev,noexec,relatime master:6 - cgroup cgroup rw,memory\\n\";\n+    private String mntInfoCgroupv1DoubleMemory = mntInfoCgroupv1MoreMemoryLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleMemory2 = mntInfoHybrid + mntInfoCgroupv1MoreMemoryLine;\n+    private String mntInfoCgroupv1DoubleCpuLine = \"1101 1098 0:29 \/ \/cpu,cpuacct rw,nosuid,nodev,noexec,relatime master:7 - cgroup cgroup rw,cpu,cpuacct\\n\";\n+    private String mntInfoCgroupv1DoubleCpu = mntInfoCgroupv1DoubleCpuLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleCpu2 = mntInfoHybrid + mntInfoCgroupv1DoubleCpuLine;\n+    private String mntInfoCgroupv1DoublePidsLine = \"1107 1098 0:35 \/ \/pids rw,nosuid,nodev,noexec,relatime master:13 - cgroup cgroup rw,pids\\n\";\n+    private String mntInfoCgroupv1DoublePids = mntInfoCgroupv1DoublePidsLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoublePids2 = mntInfoHybrid + mntInfoCgroupv1DoublePidsLine;\n@@ -178,1 +195,5 @@\n-            \"28 21 0:25 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:4 - cgroup2 none rw,seclabel,nsdelegate\";\n+            \"28 21 0:25 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:4 - cgroup2 none rw,seclabel,nsdelegate\\n\";\n+    private String mntInfoCgroupsV2MoreLine =\n+            \"240 232 0:24 \/..\/.. \/cgroup-in ro,relatime - cgroup2 cgroup2 rw,nsdelegate\\n\";\n+    private String mntInfoCgroupsV2Double = mntInfoCgroupsV2MoreLine + mntInfoCgroupsV2Only;\n+    private String mntInfoCgroupsV2Double2 = mntInfoCgroupsV2Only + mntInfoCgroupsV2MoreLine;\n@@ -220,0 +241,6 @@\n+            cgroupv2MntInfoDouble = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv2_double\");\n+            Files.writeString(cgroupv2MntInfoDouble, mntInfoCgroupsV2Double);\n+\n+            cgroupv2MntInfoDouble2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv2_double2\");\n+            Files.writeString(cgroupv2MntInfoDouble2, mntInfoCgroupsV2Double2);\n+\n@@ -247,0 +274,18 @@\n+            cgroupv1MntInfoDoubleMemory = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_memory\");\n+            Files.writeString(cgroupv1MntInfoDoubleMemory, mntInfoCgroupv1DoubleMemory);\n+\n+            cgroupv1MntInfoDoubleMemory2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_memory2\");\n+            Files.writeString(cgroupv1MntInfoDoubleMemory2, mntInfoCgroupv1DoubleMemory2);\n+\n+            cgroupv1MntInfoDoubleCpu = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpu\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpu, mntInfoCgroupv1DoubleCpu);\n+\n+            cgroupv1MntInfoDoubleCpu2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpu2\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpu2, mntInfoCgroupv1DoubleCpu2);\n+\n+            cgroupv1MntInfoDoublePids = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_pids\");\n+            Files.writeString(cgroupv1MntInfoDoublePids, mntInfoCgroupv1DoublePids);\n+\n+            cgroupv1MntInfoDoublePids2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_pids2\");\n+            Files.writeString(cgroupv1MntInfoDoublePids2, mntInfoCgroupv1DoublePids2);\n+\n@@ -294,1 +339,1 @@\n-    public void testCgroupv1MultipleCpusetMounts(WhiteBox wb, Path mountInfo) {\n+    public void testCgroupv1MultipleControllerMounts(WhiteBox wb, Path mountInfo) {\n@@ -299,1 +344,1 @@\n-        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple cpuset controllers, but only one in \/sys\/fs\/cgroup\");\n+        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple controllers, but only one in \/sys\/fs\/cgroup\");\n@@ -301,1 +346,1 @@\n-        System.out.println(\"testCgroupv1MultipleCpusetMounts PASSED!\");\n+        System.out.println(\"testCgroupv1MultipleControllerMounts PASSED!\");\n@@ -344,1 +389,1 @@\n-    public void testCgroupv2(WhiteBox wb) {\n+    public void testCgroupv2(WhiteBox wb, Path mountInfo) {\n@@ -347,1 +392,1 @@\n-        String procSelfMountinfo = cgroupv2MntInfoZeroHierarchy.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n@@ -391,1 +436,3 @@\n-            test.testCgroupv2(wb);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoDouble);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoDouble2);\n@@ -396,2 +443,8 @@\n-            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n-            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleMemory);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleMemory2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpu);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpu2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoublePids);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoublePids2);\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+            testJavaVersionWithCgMounts();\n@@ -84,0 +85,11 @@\n+\n+\n+    private static void testJavaVersionWithCgMounts() throws Exception {\n+        DockerRunOptions opts =\n+            new DockerRunOptions(imageNameAndTag, \"\/jdk\/bin\/java\", \"-version\")\n+            .addDockerOpts(\"-v\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+\n+        DockerTestUtils.dockerRunJava(opts)\n+            .shouldHaveExitValue(0)\n+            .shouldNotContain(\"[os,container]\");\n+    }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/DockerBasicTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,4 +73,8 @@\n-            testCpuQuotaAndPeriod(50*1000, 100*1000);\n-            testCpuQuotaAndPeriod(100*1000, 100*1000);\n-            testCpuQuotaAndPeriod(150*1000, 100*1000);\n-            testCpuQuotaAndPeriod(400*1000, 100*1000);\n+            testCpuQuotaAndPeriod(50*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(100*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(150*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(400*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(50*1000, 100*1000, true);\n+            testCpuQuotaAndPeriod(100*1000, 100*1000, true);\n+            testCpuQuotaAndPeriod(150*1000, 100*1000, true);\n+            testCpuQuotaAndPeriod(400*1000, 100*1000, true);\n@@ -156,1 +160,1 @@\n-    private static void testCpuQuotaAndPeriod(int quota, int period)\n+    private static void testCpuQuotaAndPeriod(int quota, int period, boolean addCgmounts)\n@@ -170,0 +174,4 @@\n+        if (addCgmounts) {\n+            opts = opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+        }\n+\n@@ -176,1 +184,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -66,4 +66,9 @@\n-            testMemoryLimit(\"100m\", \"104857600\");\n-            testMemoryLimit(\"500m\", \"524288000\");\n-            testMemoryLimit(\"1g\", \"1073741824\");\n-            testMemoryLimit(\"4g\", \"4294967296\");\n+            testMemoryLimit(\"100m\", \"104857600\", false);\n+            testMemoryLimit(\"500m\", \"524288000\", false);\n+            testMemoryLimit(\"1g\", \"1073741824\", false);\n+            testMemoryLimit(\"4g\", \"4294967296\", false);\n+            testMemoryLimit(\"100m\", \"104857600\", true);\n+            testMemoryLimit(\"500m\", \"524288000\", true);\n+            testMemoryLimit(\"1g\", \"1073741824\", true);\n+            testMemoryLimit(\"4g\", \"4294967296\", true);\n+\n@@ -101,1 +106,1 @@\n-    private static void testMemoryLimit(String valueToSet, String expectedTraceValue)\n+    private static void testMemoryLimit(String valueToSet, String expectedTraceValue, boolean addCgmounts)\n@@ -109,0 +114,4 @@\n+        if (addCgmounts) {\n+            opts = opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}