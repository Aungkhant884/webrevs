{"files":[{"patch":"@@ -126,5 +126,5 @@\n-void CgroupSubsystemFactory::set_controller_pathes(CgroupInfo* cg_infos,\n-                                                   int controller,\n-                                                   char* name,\n-                                                   char* mount_path,\n-                                                   char* root_path) {\n+void CgroupSubsystemFactory::set_controller_paths(CgroupInfo* cg_infos,\n+                                                  int controller,\n+                                                  const char* name,\n+                                                  char* mount_path,\n+                                                  char* root_path) {\n@@ -317,1 +317,0 @@\n-    char tmp_mount_point[MAXPATHLEN+1];\n@@ -328,21 +327,2 @@\n-    \/\/\n-    if (is_cgroupsV2 && sscanf(p, \"%*d %*d %*d:%*d %*s %s %*[^-]- %s %*s %*s\", tmp_mount_point, tmp_fs_type) == 2) {\n-      \/\/ On some systems duplicate controllers get mounted in addition to\n-      \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-      \/\/ case pick the first one under \/sys\/fs\/cgroup and discard others.\n-      if (cgroupv2_mount_point_found && strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n-        if (strstr(cg_infos[0]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[0]._mount_path &&\n-            strstr(tmp_mount_point, \"\/sys\/fs\/cgroup\") == tmp_mount_point) {\n-          log_debug(os, container)(\"Duplicate cgroupv2 controllers detected. Picking %s, skipping %s.\",\n-                                   tmp_mount_point, cg_infos[0]._mount_path);\n-          for (int i = 0; i < CG_INFO_LENGTH; i++) {\n-            os::free(cg_infos[i]._mount_path);\n-            cg_infos[i]._mount_path = os::strdup(tmp_mount_point);\n-          }\n-        } else {\n-          log_debug(os, container)(\"Duplicate cgroupv2 controllers detected. Picking %s, skipping %s.\",\n-                                   cg_infos[0]._mount_path, tmp_mount_point);\n-        }\n-      }\n-      \/\/ we likely have an early match return (e.g. cgroup fs match), be sure we have cgroup2 as fstype\n-      if (!cgroupv2_mount_point_found && strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n+    if (is_cgroupsV2 && sscanf(p, \"%*d %*d %*d:%*d %s %s %*[^-]- %s %*s %*s\", tmproot, tmpmount, tmp_fs_type) == 3) {\n+      if (strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n@@ -352,2 +332,1 @@\n-          assert(cg_infos[i]._mount_path == NULL, \"_mount_path memory stomping\");\n-          cg_infos[i]._mount_path = os::strdup(tmp_mount_point);\n+          set_controller_paths(cg_infos, i, \"(cg2, unified)\", tmpmount, tmproot);\n@@ -378,1 +357,1 @@\n-          set_controller_pathes(cg_infos, MEMORY_IDX, token, tmpmount, tmproot);\n+          set_controller_paths(cg_infos, MEMORY_IDX, token, tmpmount, tmproot);\n@@ -382,1 +361,1 @@\n-          set_controller_pathes(cg_infos, CPUSET_IDX, token, tmpmount, tmproot);\n+          set_controller_paths(cg_infos, CPUSET_IDX, token, tmpmount, tmproot);\n@@ -386,1 +365,1 @@\n-          set_controller_pathes(cg_infos, CPU_IDX, token, tmpmount, tmproot);\n+          set_controller_paths(cg_infos, CPU_IDX, token, tmpmount, tmproot);\n@@ -390,1 +369,1 @@\n-          set_controller_pathes(cg_infos, CPUACCT_IDX, token, tmpmount, tmproot);\n+          set_controller_paths(cg_infos, CPUACCT_IDX, token, tmpmount, tmproot);\n@@ -394,1 +373,1 @@\n-          set_controller_pathes(cg_infos, PIDS_IDX, token, tmpmount, tmproot);\n+          set_controller_paths(cg_infos, PIDS_IDX, token, tmpmount, tmproot);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":13,"deletions":34,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -314,5 +314,5 @@\n-    static void set_controller_pathes(CgroupInfo* cg_infos,\n-                                      int controller,\n-                                      char* name,\n-                                      char* mount_path,\n-                                      char* root_path);\n+    static void set_controller_paths(CgroupInfo* cg_infos,\n+                                     int controller,\n+                                     const char* name,\n+                                     char* mount_path,\n+                                     char* root_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,4 +77,1 @@\n-            testCpuQuotaAndPeriod(50*1000, 100*1000, true);\n-            testCpuQuotaAndPeriod(100*1000, 100*1000, true);\n-            testCpuQuotaAndPeriod(150*1000, 100*1000, true);\n-            testCpuQuotaAndPeriod(400*1000, 100*1000, true);\n+            testCpuQuotaAndPeriod(50*1000, 100*1000, true \/* additional cgroup mount *\/);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -70,5 +70,1 @@\n-            testMemoryLimit(\"100m\", \"104857600\", true);\n-            testMemoryLimit(\"500m\", \"524288000\", true);\n-            testMemoryLimit(\"1g\", \"1073741824\", true);\n-            testMemoryLimit(\"4g\", \"4294967296\", true);\n-\n+            testMemoryLimit(\"100m\", \"104857600\", true \/* additional cgroup mount *\/);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}