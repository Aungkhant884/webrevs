{"files":[{"patch":"@@ -717,1 +717,1 @@\n-            p.waitFor(5, java.util.concurrent.TimeUnit.SECONDS);\n+            p.waitFor();\n@@ -721,9 +721,5 @@\n-        if (p.isAlive()) {\n-            throw new RuntimeException(\"Debuggee is still alive after disconnecting.\");\n-        } else {\n-            int res = p.exitValue();\n-            \/\/ Some tests purposefully exit with an exception, which produces exitValue\n-            \/\/ 1, so we have to allow it also.\n-            if (res != 0 && res != 1) {\n-                throw new RuntimeException(\"Non-zero debuggee exitValue: \" + res);\n-            }\n+        int res = p.exitValue();\n+        \/\/ Some tests purposefully exit with an exception, which produces exitValue\n+        \/\/ 1, so we have to allow it also.\n+        if (res != 0 && res != 1) {\n+            throw new RuntimeException(\"Non-zero debuggee exitValue: \" + res);\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -69,9 +69,6 @@\n-                        if (\"Virtual\".equals(mainWrapper)) {\n-                            \/\/ Virtual thread creation tends to overwhelm the debugger,\n-                            \/\/ leading to high memory use for all the unprocessed events\n-                            \/\/ that get queued up, so we need to slow it down a bit more\n-                            \/\/ than we do for platform threads to avoid getting OOME.\n-                            Thread.sleep(100);\n-                        } else {\n-                            Thread.sleep(50);\n-                        }\n+                        \/\/ Virtual thread creation tends to overwhelm the debugger,\n+                        \/\/ leading to high memory use for all the unprocessed events\n+                        \/\/ that get queued up, so we need to slow it down a bit more\n+                        \/\/ than we do for platform threads to avoid getting OOME.\n+                        long timeToSleep = \"Virtual\".equals(mainWrapper) ? 100 : 50;\n+                        Thread.sleep(timeToSleep);\n","filename":"test\/jdk\/com\/sun\/jdi\/ThreadMemoryLeakTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}