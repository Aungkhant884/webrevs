{"files":[{"patch":"@@ -1262,0 +1262,40 @@\n+  \/\/ Closure to clear the prev bitmap for any old region in the collection set.\n+  \/\/ This is needed to be able to use the bitmap for evacuation failure handling.\n+  class G1ClearBitmapClosure : public HeapRegionClosure {\n+    G1CollectedHeap* _g1h;\n+    void assert_bitmap_clear(HeapRegion* hr, const G1CMBitMap* bitmap) {\n+      assert(bitmap->get_next_marked_addr(hr->bottom(), hr->end()) == hr->end(),\n+             \"Bitmap should have no mark for young regions\");\n+    }\n+  public:\n+    G1ClearBitmapClosure(G1CollectedHeap* g1h) : _g1h(g1h) { }\n+\n+    bool do_heap_region(HeapRegion* hr) {\n+      assert(_g1h->is_in_cset(hr), \"Should only be used iterating the collection set\");\n+      \/\/ Young regions should always have cleared bitmaps, so only clear old.\n+      if (hr->is_old()) {\n+        _g1h->clear_prev_bitmap_for_region(hr);\n+      } else {\n+        assert(hr->is_young(), \"Should only be young and old regions in collection set\");\n+        assert_bitmap_clear(hr, _g1h->concurrent_mark()->prev_mark_bitmap());\n+      }\n+      return false;\n+    }\n+  };\n+\n+  \/\/ Helper to allow two closure to be applied when\n+  \/\/ iterating through the collection set.\n+  class G1CombinedClosure : public HeapRegionClosure {\n+    HeapRegionClosure* _closure1;\n+    HeapRegionClosure* _closure2;\n+  public:\n+    G1CombinedClosure(HeapRegionClosure* cl1, HeapRegionClosure* cl2) :\n+      _closure1(cl1),\n+      _closure2(cl2) { }\n+\n+    bool do_heap_region(HeapRegion* hr) {\n+      return _closure1->do_heap_region(hr) ||\n+             _closure2->do_heap_region(hr);\n+    }\n+  };\n+\n@@ -1429,3 +1469,6 @@\n-        G1MergeCardSetClosure cl(_scan_state);\n-        g1h->collection_set_iterate_increment_from(&cl, &_hr_claimer, worker_id);\n-        stats = cl.stats();\n+        G1MergeCardSetClosure merge(_scan_state);\n+        G1ClearBitmapClosure clear(g1h);\n+        G1CombinedClosure combined(&merge, &clear);\n+\n+        g1h->collection_set_iterate_increment_from(&combined, &_hr_claimer, worker_id);\n+        stats = merge.stats();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"}]}