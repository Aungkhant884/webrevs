{"files":[{"patch":"@@ -129,0 +129,2 @@\n+    private static final Pattern PARSE_TWO = Pattern.compile(\"(.*?)\\\\{0}(.*?)\\\\{1}(.*?)\");\n+    private static final Pattern PARSE_THREE = Pattern.compile(\"(.*?)\\\\{0}(.*?)\\\\{1}(.*?)\\\\{2}(.*?)\");\n@@ -166,2 +168,7 @@\n-        \/\/ generate two\/three patterns, if empty\n-        if (patterns[TWO] == null || patterns[TWO].isEmpty()) {\n+        \/\/ Validate two\/three patterns, if given. Otherwise, generate them\n+        if (patterns[TWO] != null && !patterns[TWO].isEmpty()) {\n+            m = PARSE_TWO.matcher(patterns[TWO]);\n+            if (!m.matches()) {\n+                throw new IllegalArgumentException(\"pattern for two is incorrect: \" + patterns[TWO]);\n+            }\n+        } else {\n@@ -170,1 +177,6 @@\n-        if (patterns[THREE] == null || patterns[THREE].isEmpty()) {\n+        if (patterns[THREE] != null && !patterns[THREE].isEmpty()) {\n+            m = PARSE_THREE.matcher(patterns[THREE]);\n+            if (!m.matches()) {\n+                throw new IllegalArgumentException(\"pattern for three is incorrect: \" + patterns[THREE]);\n+            }\n+        } else {\n@@ -173,0 +185,1 @@\n+\n@@ -187,2 +200,2 @@\n-     * {@link Locale.Category#FORMAT FORMAT Locale}, {@code STANDARD} type,\n-     * and {@code FULL} style}\n+     * {@link Locale.Category#FORMAT FORMAT Locale}, {@link Type#STANDARD STANDARD} type,\n+     * and {@link Style#FULL FULL} style}\n@@ -195,5 +208,7 @@\n-     * {@return the list format object for the specified {@code Locale}, {@code Type},\n-     * and {@code Style}}\n-     * @param locale Locale to be used, not null\n-     * @param type type of the list format. One of STANDARD\/OR\/UNIT, not null\n-     * @param style style of the list format. One of FULL\/SHORT\/NARROW, not null\n+     * {@return the list format object for the specified {@link Locale}, {@link Type Type},\n+     * and {@link Style Style}}\n+     * @param locale {@code Locale} to be used, not null\n+     * @param type type of the list format. One of {@code STANDARD}, {@code OR},\n+     *             or {@code UNIT}, not null\n+     * @param style style of the list format. One of {@code FULL}, {@code SHORT},\n+     *              or {@code NARROW}, not null\n@@ -215,1 +230,2 @@\n-     * instead of letting the runtime provide appropriate patterns for the Locale\/Type\/Style.\n+     * instead of letting the runtime provide appropriate patterns for the {@code Locale},\n+     * {@code Type}, or {@code Style}.\n@@ -342,1 +358,1 @@\n-     * {@return the parsed list of Strings from the {@code source} String}\n+     * {@return the parsed list of strings from the {@code source} string}\n@@ -350,1 +366,1 @@\n-     * @param source the String to parse, not null.\n+     * @param source the string to parse, not null.\n@@ -365,1 +381,1 @@\n-     * Parses text from a string to produce a list of {@code String}s.\n+     * Parses text from a string to produce a list of strings.\n@@ -380,1 +396,1 @@\n-     * @param source A {@code String}, part of which should be parsed.\n+     * @param source A string, part of which should be parsed.\n@@ -383,2 +399,2 @@\n-     * @return A {@code List} of {@code String} parsed from the string. In case of\n-     *         error, returns null.\n+     * @return A list of string parsed from the {@code source}.\n+     *            In case of error, returns null.\n@@ -427,0 +443,3 @@\n+        } else {\n+            \/\/ MessageFormat.parseObject() failed\n+            return null;\n@@ -428,1 +447,0 @@\n-        throw new InternalError(\"MessageFormat.parseObject() should return Object[]\");\n@@ -442,1 +460,5 @@\n-     * {@inheritDoc}\n+     * Checks if this {@code ListFormat} is equal to another {@code ListFormat}.\n+     * The comparison is based on the {@code Locale} and formatting patterns, given or\n+     * generated with {@code Locale}, {@code Type}, and {@code Style}.\n+     * @param obj the object to check, {@code null} returns {@code false}\n+     * @return {@code true} if this is equals to the other {@code ListFormat}\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -89,0 +89,15 @@\n+    private static final String[] CUSTOM_PATTERNS_IAE_TWO = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"{1}error{0}\",\n+            \"\",\n+    };\n+    private static final String[] CUSTOM_PATTERNS_IAE_THREE = {\n+            \"sbef {0} sbet {1}\",\n+            \"{0} mid {1}\",\n+            \"{0} ebet {1} eaft\",\n+            \"\",\n+            \"{0}error{1}\",\n+    };\n+\n@@ -120,0 +135,2 @@\n+                arguments(CUSTOM_PATTERNS_IAE_TWO, \"pattern for two is incorrect: {1}error{0}\"),\n+                arguments(CUSTOM_PATTERNS_IAE_THREE, \"pattern for three is incorrect: {0}error{1}\"),\n","filename":"test\/jdk\/java\/text\/Format\/ListFormat\/TestListFormat.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}