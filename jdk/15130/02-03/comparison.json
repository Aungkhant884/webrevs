{"files":[{"patch":"@@ -418,1 +418,1 @@\n-        \/\/ return the entire source if still no match\n+        \/\/ return the entire source from parsePos if still no match\n@@ -420,0 +420,1 @@\n+            parsed = new String[]{source.substring(parsePos.index)};\n@@ -421,1 +422,0 @@\n-            parsed = new String[]{source};\n@@ -425,0 +425,1 @@\n+            parsePos.setErrorIndex(-1);\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.text.ParsePosition;\n@@ -44,0 +45,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -163,0 +165,13 @@\n+    static Arguments[] parseObject_parsePos() {\n+        return new Arguments[] {\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE1),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE2),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE3),\n+                arguments(CUSTOM_PATTERNS_FULL, SAMPLE4),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE1),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE2),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE3),\n+                arguments(CUSTOM_PATTERNS_MINIMAL, SAMPLE4),\n+        };\n+    }\n+\n@@ -200,0 +215,23 @@\n+    @ParameterizedTest\n+    @MethodSource\n+    void parseObject_parsePos(String[] patterns, List<String> input) {\n+        var prefix = \"prefix\";\n+        var f = ListFormat.getInstance(patterns);\n+        var testStr = prefix + f.format(input);\n+\n+        var pp = new ParsePosition(prefix.length());\n+        var parsed = f.parseObject(testStr, pp);\n+        assertEquals(input, parsed, pp.toString());\n+        assertEquals(new ParsePosition(testStr.length()), pp);\n+\n+        pp.setIndex(0);\n+        parsed = f.parseObject(testStr, pp);\n+        assertNotEquals(input, parsed);\n+        assertEquals(-1, pp.getErrorIndex());\n+\n+        pp.setIndex(prefix.length() + 1);\n+        parsed = f.parseObject(testStr, pp);\n+        assertNotEquals(input, parsed);\n+        assertEquals(-1, pp.getErrorIndex());\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/ListFormat\/TestListFormat.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}