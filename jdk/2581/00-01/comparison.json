{"files":[{"patch":"@@ -4485,2 +4485,12 @@\n-  HANDLE handle1 = create_read_only_file_handle(file1);\n-  HANDLE handle2 = create_read_only_file_handle(file2);\n+  char* native_file1 = os::strdup(file1);\n+  native_file1 = os::native_path(native_file1);\n+  char* native_file2 = os::strdup(file2);\n+  native_file2 = os::native_path(native_file2);\n+  if (strcmp(native_file1, native_file2) == 0) {\n+    os::free(native_file1);\n+    os::free(native_file2);\n+    return true;\n+  }\n+\n+  HANDLE handle1 = create_read_only_file_handle(native_file1);\n+  HANDLE handle2 = create_read_only_file_handle(native_file2);\n@@ -4513,0 +4523,3 @@\n+  os::free(native_file1);\n+  os::free(native_file2);\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1289,6 +1289,0 @@\n-char* ClassLoader::get_native_path(char* path) {\n-  char* native_path = os::strdup(path);\n-  assert(native_path != NULL, \"sanity\");\n-  return os::native_path(native_path);\n-}\n-\n@@ -1343,2 +1337,3 @@\n-    \/\/ save the path from the file: protocol or the module name from the jrt: protocol\n-    \/\/ if no protocol prefix is found, path is the same as stream->source()\n+    \/\/ Save the path from the file: protocol or the module name from the jrt: protocol\n+    \/\/ if no protocol prefix is found, path is the same as stream->source(). This path\n+    \/\/ must be valid since the class has been successfully parsed.\n@@ -1346,4 +1341,1 @@\n-    char* native_path = get_native_path(path);\n-    \/\/ The path is from the ClassFileStream. Since a ClassFileStream has been created successfully in functions\n-    \/\/ such as ClassLoader::load_class(), its source path must be valid.\n-    assert(native_path != NULL, \"sanity\");\n+    assert(path != NULL, \"sanity\");\n@@ -1352,1 +1344,0 @@\n-      char* native_path_table_entry = get_native_path((char*)ent->name());\n@@ -1355,1 +1346,1 @@\n-      assert(native_path_table_entry != NULL, \"sanity\");\n+      assert(ent->name() != NULL, \"sanity\");\n@@ -1358,1 +1349,4 @@\n-      if (os::same_files(native_path_table_entry, native_path)) {\n+      \/\/ src may come from the App\/Platform class loaders, which would canonicalize\n+      \/\/ the file name. We cannot use strcmp to check for equality against ent->name().\n+      \/\/ We must use os::same_files (which is faster than canonicalizing ent->name()).\n+      if (os::same_files(ent->name(), path)) {\n@@ -1392,1 +1386,0 @@\n-      os::free(native_path_table_entry);\n@@ -1401,2 +1394,0 @@\n-    os::free(native_path);\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -369,1 +369,0 @@\n-  static char* get_native_path(char* path);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}