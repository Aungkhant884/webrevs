{"files":[{"patch":"@@ -178,1 +178,24 @@\n-class LocPusher {\n+\/\/ Record components of a location descriptor string.  Components are appended by the constructor and\n+\/\/ removed by the destructor, like a stack, so scope matters.  These location descriptors are used to\n+\/\/ locate dynamic classes, and terminate at a Method* or oop field associated with dynamic\/hidden class.\n+\/\/\n+\/\/ Example use:\n+\/\/\n+\/\/ {\n+\/\/   RecordLocation fp(this, \"field1\");\n+\/\/   \/\/ location: \"field1\"\n+\/\/   { RecordLocation fp(this, \" field2\"); \/\/ location: \"field1 field2\" }\n+\/\/   \/\/ location: \"field1\"\n+\/\/   { RecordLocation fp(this, \" field3\"); \/\/ location: \"field1 field3\" }\n+\/\/   \/\/ location: \"field1\"\n+\/\/ }\n+\/\/ \/\/ location: \"\"\n+\/\/\n+\/\/ Examples of actual locations\n+\/\/ @bci compiler\/ciReplay\/CiReplayBase$TestMain test (I)V 1 <appendix> argL0 ;\n+\/\/ \/\/ resolve invokedynamic at bci 1 of TestMain.test, then read field \"argL0\" from appendix\n+\/\/ @bci compiler\/ciReplay\/CiReplayBase$TestMain main ([Ljava\/lang\/String;)V 0 <appendix> form vmentry <vmtarget> ;\n+\/\/ \/\/ resolve invokedynamic at bci 0 of TestMain.main, then read field \"form.vmentry.method.vmtarget\" from appendix\n+\/\/ @cpi compiler\/ciReplay\/CiReplayBase$TestMain 56 form vmentry <vmtarget> ;\n+\/\/ \/\/ resolve MethodHandle at cpi 56 of TestMain, then read field \"vmentry.method.vmtarget\" from resolved MethodHandle\n+class RecordLocation {\n@@ -199,0 +222,1 @@\n+  \/\/ append a new component\n@@ -200,1 +224,1 @@\n-  LocPusher(ciEnv* ci, const char* fmt, ...) {\n+  RecordLocation(ciEnv* ci, const char* fmt, ...) {\n@@ -209,1 +233,2 @@\n-  ~LocPusher() {\n+  \/\/ reset to previous state\n+  ~RecordLocation() {\n@@ -1242,0 +1267,2 @@\n+\/\/ Lookup location descriptor for the class, if any.\n+\/\/ Returns false if not found.\n@@ -1252,0 +1279,1 @@\n+\/\/ Associate the current location descriptor with the given class and record for later lookup.\n@@ -1264,0 +1292,3 @@\n+\/\/ Associate the current location descriptor with the given class and record for later lookup.\n+\/\/ If it turns out that there are multiple locations for the given class, that conflict should\n+\/\/ be handled here.  Currently we choose the first location found.\n@@ -1280,0 +1311,1 @@\n+\/\/ Look up the location descriptor for the given class and print it to the output stream.\n@@ -1290,0 +1322,2 @@\n+\/\/ Look up the location descriptor for the given class and return it as a string.\n+\/\/ Returns NULL if no location is found.\n@@ -1302,0 +1336,2 @@\n+\/\/ Look up the location descriptor for the given class and return it as a string.\n+\/\/ Returns the class name as a fallback if no location is found.\n@@ -1309,0 +1345,2 @@\n+\/\/ Look up the location descriptor for the given class and return it as a string.\n+\/\/ Returns the class name as a fallback if no location is found.\n@@ -1317,0 +1355,1 @@\n+\/\/ Process a java.lang.invoke.MemberName object and record any dynamic locations.\n@@ -1319,0 +1358,1 @@\n+  \/\/ Check MemberName.clazz field\n@@ -1321,1 +1361,1 @@\n-    LocPusher fp(this, \"clazz\");\n+    RecordLocation fp(this, \"clazz\");\n@@ -1325,0 +1365,1 @@\n+  \/\/ Check MemberName.method.vmtarget field\n@@ -1327,1 +1368,1 @@\n-    LocPusher fp2(this, \"<vmtarget>\");\n+    RecordLocation fp2(this, \"<vmtarget>\");\n@@ -1333,0 +1374,1 @@\n+\/\/ Read an object field.  Lookup is done by name only.\n@@ -1337,0 +1379,1 @@\n+\/\/ Process a java.lang.invoke.LambdaForm object and record any dynamic locations.\n@@ -1341,0 +1384,1 @@\n+    \/\/ Check LambdaForm.vmentry field\n@@ -1342,1 +1386,1 @@\n-    LocPusher fp0(this, \"vmentry\");\n+    RecordLocation fp0(this, \"vmentry\");\n@@ -1346,0 +1390,1 @@\n+  \/\/ Check LambdaForm.names array\n@@ -1348,1 +1393,1 @@\n-    LocPusher lp0(this, \"names\");\n+    RecordLocation lp0(this, \"names\");\n@@ -1352,2 +1397,3 @@\n-      LocPusher lp1(this, \"%d\", i);\n-      LocPusher lp2(this, \"function\");\n+      RecordLocation lp1(this, \"%d\", i);\n+     \/\/ Check LambdaForm.names[i].function field\n+      RecordLocation lp2(this, \"function\");\n@@ -1356,0 +1402,1 @@\n+        \/\/ Check LambdaForm.names[i].function.member field\n@@ -1358,1 +1405,1 @@\n-          LocPusher lp3(this, \"member\");\n+          RecordLocation lp3(this, \"member\");\n@@ -1361,0 +1408,1 @@\n+        \/\/ Check LambdaForm.names[i].function.resolvedHandle field\n@@ -1363,1 +1411,1 @@\n-          LocPusher lp3(this, \"resolvedHandle\");\n+          RecordLocation lp3(this, \"resolvedHandle\");\n@@ -1366,0 +1414,1 @@\n+        \/\/ Check LambdaForm.names[i].function.invoker field\n@@ -1368,1 +1417,1 @@\n-          LocPusher lp3(this, \"invoker\");\n+          RecordLocation lp3(this, \"invoker\");\n@@ -1376,0 +1425,1 @@\n+\/\/ Process a java.lang.invoke.MethodHandle object and record any dynamic locations.\n@@ -1378,0 +1428,1 @@\n+    \/\/ Check MethodHandle.form field\n@@ -1379,1 +1430,1 @@\n-    LocPusher fp(this, \"form\");\n+    RecordLocation fp(this, \"form\");\n@@ -1382,0 +1433,1 @@\n+  \/\/ Check DirectMethodHandle.member field\n@@ -1384,1 +1436,1 @@\n-    LocPusher fp(this, \"member\");\n+    RecordLocation fp(this, \"member\");\n@@ -1387,0 +1439,1 @@\n+    \/\/ Check <MethodHandle subclass>.argL0 field\n@@ -1390,1 +1443,1 @@\n-      LocPusher fp(this, \"argL0\");\n+      RecordLocation fp(this, \"argL0\");\n@@ -1399,0 +1452,3 @@\n+\/\/ Process an object found at an invokedynamic\/invokehandle call site and record any dynamic locations.\n+\/\/ Types currently supported are MethodHandle and CallSite.\n+\/\/ The object is typically the \"appendix\" object, or Bootstrap Method (BSM) object.\n@@ -1407,1 +1463,1 @@\n-        LocPusher fp(this, \"target\");\n+        RecordLocation fp(this, \"target\");\n@@ -1415,0 +1471,1 @@\n+\/\/ Process an adapter Method* found at an invokedynamic\/invokehandle call site and record any dynamic locations.\n@@ -1420,1 +1477,1 @@\n-  LocPusher fp(this, \"<adapter>\");\n+  RecordLocation fp(this, \"<adapter>\");\n@@ -1424,0 +1481,1 @@\n+\/\/ Process an invokedynamic call site and record any dynamic locations.\n@@ -1427,0 +1485,1 @@\n+    \/\/ process the adapter\n@@ -1429,0 +1488,1 @@\n+    \/\/ process the appendix\n@@ -1431,1 +1491,1 @@\n-      LocPusher fp(this, \"<appendix>\");\n+      RecordLocation fp(this, \"<appendix>\");\n@@ -1434,1 +1494,1 @@\n-    \/\/ BSM\n+    \/\/ process the BSM\n@@ -1440,1 +1500,1 @@\n-      LocPusher fp(this, \"<bsm>\");\n+      RecordLocation fp(this, \"<bsm>\");\n@@ -1446,0 +1506,1 @@\n+\/\/ Process an invokehandle call site and record any dynamic locations.\n@@ -1456,0 +1517,1 @@\n+      \/\/ process the adapter\n@@ -1459,0 +1521,1 @@\n+      \/\/ process the appendix\n@@ -1460,1 +1523,1 @@\n-        LocPusher fp(this, \"<appendix>\");\n+        RecordLocation fp(this, \"<appendix>\");\n@@ -1467,0 +1530,2 @@\n+\/\/ Search the class hierarchy for dynamic classes reachable through dynamic call sites or\n+\/\/ constant pool entries and record for future lookup.\n@@ -1471,0 +1536,1 @@\n+  \/\/ Iterate over the class hierarchy\n@@ -1485,0 +1551,1 @@\n+      \/\/ Look for invokedynamic\/invokehandle call sites\n@@ -1495,1 +1562,1 @@\n-            LocPusher fp(this, \"@bci %s %s %s %d\",\n+            RecordLocation fp(this, \"@bci %s %s %s %d\",\n@@ -1515,1 +1582,2 @@\n-      LocPusher fp(this, \"@cpi %s\", ik->name()->as_quoted_ascii());\n+      \/\/ Look for MethodHandle contant pool entries\n+      RecordLocation fp(this, \"@cpi %s\", ik->name()->as_quoted_ascii());\n@@ -1522,1 +1590,1 @@\n-            LocPusher fp(this, \"%d\", i);\n+            RecordLocation fp(this, \"%d\", i);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":92,"deletions":24,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-  friend class LocPusher;\n-  friend class FieldPusher;\n+  friend class RecordLocation;\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}