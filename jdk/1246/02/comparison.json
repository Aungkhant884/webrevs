{"files":[{"patch":"@@ -127,9 +127,2 @@\n-  if ((size_t)ret >= sizeof(buf)) {\n-    size_t newbuf_len = prefix_len + ret + 1;\n-    char* newbuf = NEW_C_HEAP_ARRAY(char, newbuf_len, mtLogging);\n-    prefix_len = _write_prefix(newbuf, newbuf_len);\n-    ret = os::vsnprintf(newbuf + prefix_len, newbuf_len - prefix_len, fmt, saved_args);\n-    assert(ret >= 0, \"Log message buffer issue\");\n-    log(level, newbuf);\n-    FREE_C_HEAP_ARRAY(char, newbuf);\n-  } else {\n+  size_t newbuf_len = (size_t)ret + prefix_len + 1; \/\/ total bytes needed including prefix.\n+  if (newbuf_len <= sizeof(buf)) {\n@@ -137,0 +130,22 @@\n+  } else {\n+    \/\/ Buffer too small, allocate a large enough buffer by using of malloc\/free to avoid circularity.\n+    char* newbuf = (char*)::calloc(newbuf_len, sizeof(char));\n+    if (newbuf != nullptr) {\n+      prefix_len = _write_prefix(newbuf, newbuf_len);\n+      ret = os::vsnprintf(newbuf + prefix_len, newbuf_len - prefix_len, fmt, saved_args);\n+      assert(ret >= 0, \"Log message buffer issue\");\n+      log(level, newbuf);\n+      ::free(newbuf);\n+    } else {\n+      \/\/ native OOM, use buf to output the least message, first we fill buffer full\n+      \/\/ then put trunc_msg at the end of buf\n+      const char* trunc_msg = \"..(truncated), native OOM\";\n+      const size_t ltr = strlen(trunc_msg);\n+      prefix_len = _write_prefix(buf, sizeof(buf));\n+      if (prefix_len < sizeof(buf)) {\n+        ret = os::vsnprintf(buf + prefix_len, sizeof(buf) - prefix_len, fmt, args);\n+        assert(ret >= 0, \"Log message buffer issue\");\n+      }\n+      os::snprintf(buf + sizeof(buf) - ltr - 1, ltr, \"%s\", trunc_msg);\n+      log(level, buf);\n+    }\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"}]}