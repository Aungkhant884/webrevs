{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-    ret = os::vsnprintf(buf, sizeof(buf), fmt, args);\n+    ret = os::vsnprintf(nullptr, 0, fmt, args);\n@@ -126,0 +126,1 @@\n+\n@@ -127,9 +128,11 @@\n-  if ((size_t)ret >= sizeof(buf)) {\n-    size_t newbuf_len = prefix_len + ret + 1;\n-    char* newbuf = NEW_C_HEAP_ARRAY(char, newbuf_len, mtLogging);\n-    prefix_len = _write_prefix(newbuf, newbuf_len);\n-    ret = os::vsnprintf(newbuf + prefix_len, newbuf_len - prefix_len, fmt, saved_args);\n-    assert(ret >= 0, \"Log message buffer issue\");\n-    log(level, newbuf);\n-    FREE_C_HEAP_ARRAY(char, newbuf);\n-  } else {\n+  if (ret < 0) {\n+    \/\/ Error, just log contents in buf.\n+    log(level, buf);\n+    log(level, \"Log message buffer issue\");\n+    va_end(saved_args);\n+    return;\n+  }\n+\n+\n+  size_t newbuf_len = (size_t)ret + prefix_len + 1; \/\/ total bytes needed including prefix.\n+  if (newbuf_len <= sizeof(buf)) {\n@@ -137,0 +140,26 @@\n+  } else {\n+    \/\/ Buffer too small, allocate a large enough buffer using malloc\/free to avoid circularity.\n+    char* newbuf = (char*)::malloc(newbuf_len * sizeof(char));\n+    if (newbuf != nullptr) {\n+      prefix_len = _write_prefix(newbuf, newbuf_len);\n+      ret = os::vsnprintf(newbuf + prefix_len, newbuf_len - prefix_len, fmt, saved_args);\n+      assert(ret >= 0, \"Log message newbuf issue\");\n+      \/\/ log the contents in newbuf even with error happened.\n+      log(level, newbuf);\n+      if (ret < 0) {\n+        log(level, \"Log message newbuf issue\");\n+      }\n+      ::free(newbuf);\n+    } else {\n+      \/\/ Native OOM, use buf to output the least message. At this moment buf is full of either\n+      \/\/ truncated prefix or truncated prefix + string. Put trunc_msg at the end of buf.\n+      const char* trunc_msg = \"..(truncated), native OOM\";\n+      const size_t ltr = strlen(trunc_msg) + 1;\n+      ret = os::snprintf(buf + sizeof(buf) - ltr, ltr, \"%s\", trunc_msg);\n+      assert(ret >= 0, \"Log message buffer issue\");\n+      \/\/ log the contents in newbuf even with error happened.\n+      log(level, buf);\n+      if (ret < 0) {\n+        log(level, \"Log message buffer issue under OOM\");\n+      }\n+    }\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":40,"deletions":11,"binary":false,"changes":51,"status":"modified"}]}