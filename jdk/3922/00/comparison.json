{"files":[{"patch":"@@ -155,2 +155,1 @@\n-  _num_regions = ShenandoahHeapRegion::region_count();\n-  assert(_num_regions == (max_byte_size \/ reg_size_bytes), \"Must match\");\n+  _num_regions = ShenandoahHeapRegion::setup_region_count(max_byte_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -577,4 +577,0 @@\n-  guarantee(RegionCount == 0, \"we should only set it once\");\n-  RegionCount = align_up(max_heap_size, RegionSizeBytes) \/ RegionSizeBytes;\n-  guarantee(RegionCount >= MIN_NUM_REGIONS, \"Should have at least minimum regions\");\n-\n@@ -617,0 +613,8 @@\n+size_t ShenandoahHeapRegion::setup_region_count(size_t max_heap_size) {\n+  assert(is_aligned(max_heap_size, RegionSizeBytes), \"Must align\");\n+  guarantee(RegionCount == 0, \"we should only set it once\");\n+  RegionCount = max_heap_size \/ RegionSizeBytes;\n+  guarantee(RegionCount >= MIN_NUM_REGIONS, \"Should have at least minimum regions\");\n+  return RegionCount;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -255,0 +255,1 @@\n+  static size_t setup_region_count(size_t max_heap_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}