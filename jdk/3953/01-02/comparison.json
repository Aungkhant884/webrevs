{"files":[{"patch":"@@ -333,0 +333,14 @@\n+void DynamicArchive::prepare_for_dynamic_dumping_at_exit() {\n+  EXCEPTION_MARK;\n+  ResourceMark rm(THREAD);\n+  MetaspaceShared::link_and_cleanup_shared_classes(THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    log_error(cds)(\"ArchiveClassesAtExit has failed\");\n+    log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n+                   java_lang_String::as_utf8_string(java_lang_Throwable::message(PENDING_EXCEPTION)));\n+    \/\/ We cannot continue to dump the archive anymore.\n+    DynamicDumpSharedSpaces = false;\n+    CLEAR_PENDING_EXCEPTION;\n+  }\n+}\n+\n@@ -348,1 +362,1 @@\n-      dump(CHECK);\n+      dump();\n@@ -363,1 +377,1 @@\n-void DynamicArchive::dump(TRAPS) {\n+void DynamicArchive::dump() {\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+  static void prepare_for_dynamic_dumping_at_exit();\n@@ -64,1 +65,1 @@\n-  static void dump(TRAPS);\n+  static void dump();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -84,0 +84,11 @@\n+\/\/ convenient output\n+class PrintLambdaFormMessage {\n+ public:\n+  PrintLambdaFormMessage() {\n+    log_info(cds)(\"Regenerate MethodHandle Holder classes...\");\n+  }\n+  ~PrintLambdaFormMessage() {\n+    log_info(cds)(\"Regenerate MethodHandle Holder classes...done\");\n+  }\n+};\n+\n@@ -85,0 +96,1 @@\n+  PrintLambdaFormMessage plm;\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -622,13 +622,0 @@\n-void MetaspaceShared::regenerate_lambdaforminvokers_holders(TRAPS) {\n-  log_info(cds)(\"Regenerate lambdaform holder classes ...\");\n-  LambdaFormInvokers::regenerate_holder_classes(THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    log_info(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n-                 java_lang_String::as_utf8_string(java_lang_Throwable::message(PENDING_EXCEPTION)));\n-    log_info(cds)(\"Regenerate lambdaform holder classes ...failed\");\n-    CLEAR_PENDING_EXCEPTION; \/\/ Exceptions are ignored.\n-  } else {\n-    log_info(cds)(\"Regenerate lambdaform holder classes ...done\");\n-  }\n-}\n-\n@@ -638,1 +625,0 @@\n-  regenerate_lambdaforminvokers_holders(THREAD);\n@@ -640,0 +626,1 @@\n+  LambdaFormInvokers::regenerate_holder_classes(CHECK);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-  static void regenerate_lambdaforminvokers_holders(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-    MetaspaceShared::link_and_cleanup_shared_classes(THREAD);\n+    DynamicArchive::prepare_for_dynamic_dumping_at_exit();\n@@ -3689,2 +3689,1 @@\n-  MetaspaceShared::regenerate_lambdaforminvokers_holders(THREAD);\n-  DynamicArchive::dump(archive_name, THREAD);\n+  DynamicArchive::dump(archive_name, CHECK);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-    DynamicArchive::dump(thread);\n+    DynamicArchive::dump();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/dynamicArchive.hpp\"\n@@ -3301,1 +3302,1 @@\n-    MetaspaceShared::link_and_cleanup_shared_classes(this);\n+    DynamicArchive::prepare_for_dynamic_dumping_at_exit();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266764\n+ * @summary test dynamic dump with OOM\n+ * @requires vm.cds\n+ * @requires vm.gc.Serial & vm.gc == null\n+ * @comment Test dynamic dump at OOM, currently only works with SerialGC\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @compile .\/test-classes\/MiniStoreOom.java\n+ * @build LambHello sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar ministore.jar MiniStoreOom\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. TestDynamicDumpAtOom \n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.cds.CDSTestUtils.Result;\n+\n+public class TestDynamicDumpAtOom extends DynamicArchiveTestBase {\n+    private static final String mainClass = \"MiniStoreOom\";\n+    private static final String jarFile   = \"ministore.jar\";\n+    private static void doTest(String topArchiveName) throws Exception {\n+        dump(topArchiveName,\n+             \"-Xmx64M\",\n+             \"-XX:+UseSerialGC\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\",\n+             jarFile,\n+             mainClass,\n+             \"1024\").assertAbnormalExit(output -> {\n+                 output.shouldContain(\"ArchiveClassesAtExit has failed\")\n+                        .shouldContain(\"java.lang.OutOfMemoryError: Java heap space\");\n+             });\n+    }\n+\n+    static void testDefaultBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTest(topArchiveName);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(TestDynamicDumpAtOom::testDefaultBase);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestDynamicDumpAtOom.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+import java.util.HashMap;\n+public class MiniStoreOom {\n+    private static HashMap<Integer, Byte[]>  store = new HashMap<Integer, Byte[]>();\n+    public static void main(String... args) throws Exception {\n+        int size = Integer.valueOf(args[0]);\n+        int i = 0;\n+        while (i++ < Integer.MAX_VALUE) {\n+            store.put(i, new Byte[size]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/MiniStoreOom.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}