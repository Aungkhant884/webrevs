{"files":[{"patch":"@@ -172,1 +172,6 @@\n-  }\n+  } else {\n+    long delta_nanos = active_processor_count * (total_cpu_nanos - _total_cpu_nanos);\n+    if (delta_nanos == 0) {\n+      \/\/ Avoid division by zero\n+      return OS_ERR;\n+    }\n@@ -174,4 +179,2 @@\n-  long delta_nanos = active_processor_count * (total_cpu_nanos - _total_cpu_nanos);\n-  if (delta_nanos == 0) {\n-    \/\/ Avoid division by zero\n-    return OS_ERR;\n+    *pjvmUserLoad = normalize((double)(jvm_user_nanos - _jvm_user_nanos)\/delta_nanos);\n+    *pjvmKernelLoad = normalize((double)(jvm_system_nanos - _jvm_system_nanos)\/delta_nanos);\n@@ -180,3 +183,0 @@\n-  *pjvmUserLoad = normalize((double)(jvm_user_nanos - _jvm_user_nanos)\/delta_nanos);\n-  *pjvmKernelLoad = normalize((double)(jvm_system_nanos - _jvm_system_nanos)\/delta_nanos);\n-\n","filename":"src\/hotspot\/os\/bsd\/os_perf_bsd.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -126,3 +126,3 @@\n-            case Bytecodes::_ladd: set_constant(a + b); return;\n-            case Bytecodes::_lsub: set_constant(a - b); return;\n-            case Bytecodes::_lmul: set_constant(a * b); return;\n+            case Bytecodes::_ladd: set_constant(java_add(a, b)); return;\n+            case Bytecodes::_lsub: set_constant(java_subtract(a, b)); return;\n+            case Bytecodes::_lmul: set_constant(java_multiply(a, b)); return;\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2248,1 +2248,1 @@\n-    int key = x->lo_key();\n+    int low = x->lo_key();\n@@ -2250,2 +2250,3 @@\n-    C1SwitchRange* range = new C1SwitchRange(key, sux);\n-    for (int i = 0; i < len; i++, key++) {\n+    C1SwitchRange* range = new C1SwitchRange(low, sux);\n+    for (int i = 0; i < len; i++) {\n+      int key = low + i;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  int hash() { return ident() * 31; } \/\/ ???\n+  uint hash() { return ident() * 31; } \/\/ ???\n","filename":"src\/hotspot\/share\/ci\/ciMetadata.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-int ciObject::hash() {\n+uint ciObject::hash() {\n","filename":"src\/hotspot\/share\/ci\/ciObject.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  int hash();\n+  uint hash();\n","filename":"src\/hotspot\/share\/ci\/ciObject.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-    return new AddLNode(in1, phase->longcon(-i->get_con()));\n+    return new AddLNode(in1, phase->longcon(java_negate(i->get_con())));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-  return t->hash();\n+  return (int)t->hash();\n@@ -773,1 +773,1 @@\n-int Type::hash(void) const {\n+uint Type::hash(void) const {\n@@ -1363,2 +1363,2 @@\n-int TypeF::hash(void) const {\n-  return *(int*)(&_f);\n+uint TypeF::hash(void) const {\n+  return *(uint*)(&_f);\n@@ -1473,2 +1473,2 @@\n-int TypeD::hash(void) const {\n-  return *(int*)(&_d);\n+uint TypeD::hash(void) const {\n+  return *(uint*)(&_d);\n@@ -1767,2 +1767,2 @@\n-int TypeInt::hash(void) const {\n-  return java_add(java_add(_lo, _hi), java_add((jint)_widen, (jint)Type::Int));\n+uint TypeInt::hash(void) const {\n+  return (uint)_lo + (uint)_hi + (uint)_widen + (uint)Type::Int;\n@@ -2033,2 +2033,2 @@\n-int TypeLong::hash(void) const {\n-  return (int)(_lo+_hi+_widen+(int)Type::Long);\n+uint TypeLong::hash(void) const {\n+  return (uint)_lo + (uint)_hi + (uint)_widen + (uint)Type::Long;\n@@ -2275,2 +2275,2 @@\n-int TypeTuple::hash(void) const {\n-  intptr_t sum = _cnt;\n+uint TypeTuple::hash(void) const {\n+  uintptr_t sum = _cnt;\n@@ -2278,1 +2278,1 @@\n-    sum += (intptr_t)_fields[i];     \/\/ Hash on pointers directly\n+    sum += (uintptr_t)_fields[i];     \/\/ Hash on pointers directly\n@@ -2390,2 +2390,2 @@\n-int TypeAry::hash(void) const {\n-  return (intptr_t)_elem + (intptr_t)_size + (_stable ? 43 : 0);\n+uint TypeAry::hash(void) const {\n+  return (uint)(uintptr_t)_elem + (uint)(uintptr_t)_size + (uint)(_stable ? 43 : 0);\n@@ -2578,2 +2578,2 @@\n-int TypeVect::hash(void) const {\n-  return (intptr_t)_elem + (intptr_t)_length;\n+uint TypeVect::hash(void) const {\n+  return (uint)(uintptr_t)_elem + (uint)(uintptr_t)_length;\n@@ -2804,3 +2804,2 @@\n-int TypePtr::hash(void) const {\n-  return java_add(java_add((jint)_ptr, (jint)_offset), java_add((jint)hash_speculative(), (jint)_inline_depth));\n-;\n+uint TypePtr::hash(void) const {\n+  return (uint)_ptr + (uint)_offset + (uint)hash_speculative() + (uint)_inline_depth;\n@@ -3238,2 +3237,2 @@\n-int TypeRawPtr::hash(void) const {\n-  return (intptr_t)_bits + TypePtr::hash();\n+uint TypeRawPtr::hash(void) const {\n+  return (uint)(uintptr_t)_bits + (uint)TypePtr::hash();\n@@ -3328,1 +3327,1 @@\n-int TypePtr::InterfaceSet::hash() const {\n+uint TypePtr::InterfaceSet::hash() const {\n@@ -3334,1 +3333,1 @@\n-  int hash = 0;\n+  uint hash = 0;\n@@ -3337,1 +3336,1 @@\n-    hash += (jint)k->hash();\n+    hash += k->hash();\n@@ -3849,1 +3848,1 @@\n-int TypeOopPtr::hash(void) const {\n+uint TypeOopPtr::hash(void) const {\n@@ -3851,2 +3850,3 @@\n-    java_add(java_add((jint)(const_oop() ? const_oop()->hash() : 0), (jint)_klass_is_exact),\n-             java_add((jint)_instance_id, (jint)TypePtr::hash()));\n+    (uint)(const_oop() ? const_oop()->hash() : 0) +\n+    (uint)_klass_is_exact +\n+    (uint)_instance_id + TypePtr::hash();\n@@ -4486,3 +4486,2 @@\n-int TypeInstPtr::hash(void) const {\n-  int hash = java_add(java_add((jint)klass()->hash(), (jint)TypeOopPtr::hash()), _interfaces.hash());\n-  return hash;\n+uint TypeInstPtr::hash(void) const {\n+  return klass()->hash() + TypeOopPtr::hash() + _interfaces.hash();\n@@ -4837,2 +4836,2 @@\n-int TypeAryPtr::hash(void) const {\n-  return (intptr_t)_ary + TypeOopPtr::hash();\n+uint TypeAryPtr::hash(void) const {\n+  return (uint)(uintptr_t)_ary + TypeOopPtr::hash();\n@@ -5222,1 +5221,1 @@\n-int TypeNarrowPtr::hash(void) const {\n+uint TypeNarrowPtr::hash(void) const {\n@@ -5382,1 +5381,1 @@\n-int TypeMetadataPtr::hash(void) const {\n+uint TypeMetadataPtr::hash(void) const {\n@@ -5622,2 +5621,2 @@\n-int TypeKlassPtr::hash(void) const {\n-  return java_add((jint)TypePtr::hash(), _interfaces.hash());\n+uint TypeKlassPtr::hash(void) const {\n+  return TypePtr::hash() + _interfaces.hash();\n@@ -5735,2 +5734,2 @@\n-int TypeInstKlassPtr::hash(void) const {\n-  return java_add((jint)klass()->hash(), TypeKlassPtr::hash());\n+uint TypeInstKlassPtr::hash(void) const {\n+  return klass()->hash() + TypeKlassPtr::hash();\n@@ -6095,2 +6094,2 @@\n-int TypeAryKlassPtr::hash(void) const {\n-  return (intptr_t)_elem + TypeKlassPtr::hash();\n+uint TypeAryKlassPtr::hash(void) const {\n+  return (uint)(uintptr_t)_elem + TypeKlassPtr::hash();\n@@ -6643,2 +6642,2 @@\n-int TypeFunc::hash(void) const {\n-  return (intptr_t)_domain + (intptr_t)_range;\n+uint TypeFunc::hash(void) const {\n+  return (uint)(uintptr_t)_domain + (uint)(uintptr_t)_range;\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":42,"deletions":43,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-  virtual int hash() const;\n+  virtual uint hash() const;\n@@ -494,1 +494,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -525,1 +525,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -584,1 +584,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -650,1 +650,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -709,1 +709,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -759,1 +759,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -801,1 +801,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -887,1 +887,1 @@\n-    int _hash;\n+    uint _hash;\n@@ -902,1 +902,1 @@\n-    int hash() const;\n+    uint hash() const;\n@@ -1018,1 +1018,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint  hash() const;            \/\/ Type specific hashing\n@@ -1073,1 +1073,1 @@\n-  virtual int  hash() const;     \/\/ Type specific hashing\n+  virtual uint hash() const;    \/\/ Type specific hashing\n@@ -1110,1 +1110,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n@@ -1279,1 +1279,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n@@ -1408,1 +1408,1 @@\n-  virtual int hash() const;     \/\/ Type specific hashing\n+  virtual uint hash() const;    \/\/ Type specific hashing\n@@ -1516,1 +1516,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n@@ -1560,1 +1560,1 @@\n-  virtual int hash() const;\n+  virtual uint hash() const;\n@@ -1681,1 +1681,1 @@\n-  virtual int hash() const;\n+  virtual uint hash() const;\n@@ -1737,1 +1737,1 @@\n-  virtual int hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n@@ -1782,1 +1782,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n@@ -1893,1 +1893,1 @@\n-  virtual int  hash() const;             \/\/ Type specific hashing\n+  virtual uint hash() const;             \/\/ Type specific hashing\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"}]}