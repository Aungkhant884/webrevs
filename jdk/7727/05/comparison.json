{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n@@ -78,1 +78,1 @@\n-  ThreadWXEnable wx(WXExec, thread);\n+  os::ThreadWX::Enable wx(os::ThreadWX::Exec);\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -208,1 +208,1 @@\n-  ThreadWXEnable wx(WXWrite, thread);\n+  os::ThreadWX::Enable wx(os::ThreadWX::Write);\n@@ -537,0 +537,4 @@\n+#ifdef __APPLE__\n+\n+static THREAD_LOCAL os::ThreadWX::WXMode _wx_state = os::ThreadWX::Write;\n+\n@@ -542,2 +546,13 @@\n-void os::current_thread_enable_wx(WXMode mode) {\n-  pthread_jit_write_protect_np(mode == WXExec);\n+os::ThreadWX::WXMode os::ThreadWX::change(WXMode new_state) {\n+  WXMode old = _wx_state;\n+  _wx_state = new_state;\n+  pthread_jit_write_protect_np(_wx_state == os::ThreadWX::Exec);\n+  return old;\n+}\n+\n+void os::ThreadWX::init() {\n+  change(os::ThreadWX::Write);\n+}\n+\n+void os::ThreadWX::assert_wx(WXMode expected) {\n+  assert(_wx_state == expected, \"wrong state\");\n@@ -545,0 +560,1 @@\n+#endif\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,0 +43,33 @@\n+  #ifdef __APPLE__\n+\n+  class ThreadWX {\n+  public:\n+\n+    enum WXMode {\n+      Write,\n+      Exec\n+    };\n+\n+    \/\/ Enables write or execute access to writeable and executable pages.\n+    \/\/ returns the previous state\n+    static WXMode change(WXMode new_state);\n+\n+    \/\/ initializes the WXMode to WXWrite, as writeable pages are the default here\n+    static void init();\n+\n+    static void assert_wx(WXMode expected);\n+\n+    \/\/ RAII object to set a specific WXMode and reset it to the previous mode\n+    \/\/ on destruction\n+    class Enable  {\n+      WXMode _old_mode;\n+    public:\n+      Enable(WXMode new_mode) :\n+        _old_mode(change(new_mode))\n+      { }\n+      ~Enable() {\n+        change(_old_mode);\n+      }\n+    };\n+  };\n+  #endif \/\/ __APPLE__\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.hpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1270,1 +1270,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -2884,1 +2883,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, Thread::current());)\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write);)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -55,1 +55,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, Thread::current()));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -36,1 +36,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -49,1 +49,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, Thread::current());)\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write);)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetNMethod.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -44,1 +44,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, Thread::current()));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -986,1 +986,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));       \\\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));               \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -75,1 +76,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -1466,1 +1466,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3659,1 +3659,1 @@\n-    MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));\n+    MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n@@ -3752,1 +3752,1 @@\n-  MACOS_AARCH64_ONLY(WXMode oldmode = thread->enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n@@ -3809,1 +3809,1 @@\n-  MACOS_AARCH64_ONLY(thread->init_wx());\n+  MACOS_AARCH64_ONLY(os::ThreadWX::init());\n@@ -3880,1 +3880,1 @@\n-  MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n@@ -3933,1 +3933,1 @@\n-  MACOS_AARCH64_ONLY(thread->enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n@@ -3952,2 +3952,1 @@\n-  \/\/ Use os interface as the thread is not a JavaThread anymore.\n-  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thr));         \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));                    \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -438,1 +438,1 @@\n-    <xsl:text>MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));<\/xsl:text>\n+    <xsl:text>MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,1 +179,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));\n@@ -3140,1 +3140,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));\n@@ -3174,1 +3174,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-  \/\/ We need WXExec because we are about to call a generated stub. Like in VM\n-  \/\/ entries, the thread state should be changed while we are still in WXWrite.\n+  \/\/ We need os::ThreadWX::Exec because we are about to call a generated stub. Like in VM\n+  \/\/ entries, the thread state should be changed while we are still in os::ThreadWX::Write.\n@@ -38,1 +38,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec));\n","filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-  MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n@@ -116,1 +116,1 @@\n-  MACOS_AARCH64_ONLY(thread->enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n@@ -146,1 +146,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -385,1 +385,1 @@\n-      MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));\n+      MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec));\n@@ -437,1 +437,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, Thread::current()));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec));\n@@ -444,1 +444,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, Thread::current()));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec));\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable _wx(WXWrite, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable _wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/prims\/whitebox.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -78,1 +79,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -2371,1 +2371,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -258,2 +257,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite,                    \\\n-                                         JavaThread::current()));    \\\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));          \\\n@@ -283,1 +281,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current));       \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));        \\\n@@ -311,1 +309,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current));       \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));        \\\n@@ -321,1 +319,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current));       \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));        \\\n@@ -358,1 +356,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));        \\\n@@ -383,1 +381,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write));        \\\n@@ -393,1 +391,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n+    MACOS_AARCH64_ONLY(os::ThreadWX::Enable __wx(os::ThreadWX::Write);)        \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-  MACOS_AARCH64_ONLY(_thread->enable_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n@@ -106,1 +106,1 @@\n-  MACOS_AARCH64_ONLY(_thread->enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,4 +80,0 @@\n-enum WXMode {\n-  WXWrite,\n-  WXExec\n-};\n@@ -936,5 +932,0 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n-  \/\/ Enables write or execute access to writeable and executable pages.\n-  static void current_thread_enable_wx(WXMode mode);\n-#endif \/\/ __APPLE__ && AARCH64\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -37,5 +37,1 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n-  Thread* thread = Thread::current_or_null_safe();\n-  assert(thread != NULL, \"required for W^X management\");\n-  ThreadWXEnable wx(WXExec, thread);\n-#endif \/\/ __APPLE__ && AARCH64\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec);)\n@@ -47,5 +43,1 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n-  Thread* thread = Thread::current_or_null_safe();\n-  assert(thread != NULL, \"required for W^X management\");\n-  ThreadWXEnable wx(WXExec, thread);\n-#endif \/\/ __APPLE__ && AARCH64\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Exec);)\n","filename":"src\/hotspot\/share\/runtime\/safefetch.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -760,1 +759,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Exec));\n@@ -360,1 +360,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -279,1 +278,1 @@\n-  MACOS_AARCH64_ONLY(DEBUG_ONLY(_wx_init = false));\n+  MACOS_AARCH64_ONLY(DEBUG_ONLY(os::ThreadWX::init();))\n@@ -341,1 +340,1 @@\n-  MACOS_AARCH64_ONLY(this->init_wx());\n+  MACOS_AARCH64_ONLY(os::ThreadWX::init());\n@@ -968,1 +967,1 @@\n-    assert_wx_state(WXWrite);\n+    os::ThreadWX::assert_wx(os::ThreadWX::Write);\n@@ -1815,1 +1814,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n@@ -2682,1 +2681,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n@@ -2790,1 +2789,1 @@\n-  MACOS_AARCH64_ONLY(main_thread->init_wx());\n+  MACOS_AARCH64_ONLY(os::ThreadWX::init());\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -631,12 +631,0 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n- private:\n-  DEBUG_ONLY(bool _wx_init);\n-  WXMode _wx_state;\n- public:\n-  void init_wx();\n-  WXMode enable_wx(WXMode new_state);\n-\n-  void assert_wx_state(WXMode expected) {\n-    assert(_wx_state == expected, \"wrong state\");\n-  }\n-#endif \/\/ __APPLE__ && AARCH64\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -76,21 +76,0 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n-inline void Thread::init_wx() {\n-  assert(this == Thread::current(), \"should only be called for current thread\");\n-  assert(!_wx_init, \"second init\");\n-  _wx_state = WXWrite;\n-  os::current_thread_enable_wx(_wx_state);\n-  DEBUG_ONLY(_wx_init = true);\n-}\n-\n-inline WXMode Thread::enable_wx(WXMode new_state) {\n-  assert(this == Thread::current(), \"should only be called for current thread\");\n-  assert(_wx_init, \"should be inited\");\n-  WXMode old = _wx_state;\n-  if (_wx_state != new_state) {\n-    _wx_state = new_state;\n-    os::current_thread_enable_wx(new_state);\n-  }\n-  return old;\n-}\n-#endif \/\/ __APPLE__ && AARCH64\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-#define SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-\n-\/\/ No threadWXSetters.hpp\n-\n-#if defined(__APPLE__) && defined(AARCH64)\n-\n-#include \"runtime\/thread.inline.hpp\"\n-\n-class ThreadWXEnable  {\n-  Thread* _thread;\n-  WXMode _old_mode;\n-public:\n-  ThreadWXEnable(WXMode new_mode, Thread* thread) :\n-    _thread(thread),\n-    _old_mode(_thread ? _thread->enable_wx(new_mode) : WXWrite)\n-  { }\n-  ~ThreadWXEnable() {\n-    if (_thread) {\n-      _thread->enable_wx(_old_mode);\n-    }\n-  }\n-};\n-#endif \/\/ __APPLE__ && AARCH64\n-\n-#endif \/\/ SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -97,1 +97,1 @@\n-    \/\/ calls internal functions assuming running in WXWwrite.\n+    \/\/ calls internal functions assuming running in WXWrite.\n@@ -99,1 +99,1 @@\n-    MACOS_AARCH64_ONLY(Thread::current()->enable_wx(WXWrite));\n+    MACOS_AARCH64_ONLY(os::ThreadWX::change(os::ThreadWX::Write));\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,1 +183,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, current));\n+  MACOS_AARCH64_ONLY(os::ThreadWX::Enable wx(os::ThreadWX::Write));\n","filename":"test\/hotspot\/gtest\/runtime\/test_threads.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}