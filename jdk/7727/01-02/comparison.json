{"files":[{"patch":"@@ -35,1 +35,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n@@ -78,1 +78,1 @@\n-  ThreadWXEnable wx(WXExec);\n+  os::ThreadWXEnable wx(os::WXExec);\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-  ThreadWXEnable wx(WXWrite);\n+  os::ThreadWXEnable wx(os::WXWrite);\n@@ -538,1 +538,1 @@\n-static THREAD_LOCAL WXMode _wx_state = WXUnknown;\n+static THREAD_LOCAL os::WXMode _wx_state = os::WXUnknown;\n@@ -544,1 +544,1 @@\n-WXMode os::current_thread_change_wx(WXMode new_state) {\n+os::WXMode os::current_thread_change_wx(WXMode new_state) {\n@@ -546,1 +546,1 @@\n-    _wx_state = WXWrite; \/\/ No way to know but we assume the original state is \"writable, not executable\"\n+    _wx_state = os::WXWrite; \/\/ No way to know but we assume the original state is \"writable, not executable\"\n@@ -550,1 +550,1 @@\n-  pthread_jit_write_protect_np(_wx_state == WXExec);\n+  pthread_jit_write_protect_np(_wx_state == os::WXExec);\n@@ -555,1 +555,1 @@\n-  current_thread_change_wx(WXWrite);\n+  current_thread_change_wx(os::WXWrite);\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,27 @@\n+  #ifdef __APPLE__\n+  enum WXMode {\n+    WXUnknown,\n+    WXWrite,\n+    WXExec\n+  };\n+\n+  \/\/ Enables write or execute access to writeable and executable pages.\n+  \/\/ returns the previous state\n+  static WXMode current_thread_change_wx(WXMode new_state);\n+\n+  \/\/ initializes the WXMode to WXWrite, as writeable pages are the default here\n+  static void current_thread_init_wx();\n+\n+  static void current_thread_assert_wx_state(WXMode expected);\n+\n+  class ThreadWXEnable  {\n+    WXMode _old_mode;\n+  public:\n+    ThreadWXEnable(WXMode new_mode) :\n+      _old_mode(os::current_thread_change_wx(new_mode))\n+    { }\n+    ~ThreadWXEnable() {\n+      os::current_thread_change_wx(_old_mode);\n+    }\n+  };\n+  #endif \/\/ __APPLE__\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1270,1 +1270,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -2884,1 +2883,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite);)\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite);)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -55,1 +55,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -49,1 +49,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite);)\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite);)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -44,1 +44,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -986,1 +986,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));               \\\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));               \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -75,1 +76,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -1466,1 +1466,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n@@ -3659,1 +3660,1 @@\n-    MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+    MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n@@ -3752,1 +3753,1 @@\n-  MACOS_AARCH64_ONLY(WXMode oldmode = os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n@@ -3880,1 +3881,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n@@ -3933,1 +3934,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n@@ -3952,1 +3953,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                    \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));                    \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -438,1 +438,1 @@\n-    <xsl:text>MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));<\/xsl:text>\n+    <xsl:text>MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));\n@@ -3140,1 +3140,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));\n@@ -3174,1 +3174,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-  \/\/ We need WXExec because we are about to call a generated stub. Like in VM\n-  \/\/ entries, the thread state should be changed while we are still in WXWrite.\n+  \/\/ We need os::WXExec because we are about to call a generated stub. Like in VM\n+  \/\/ entries, the thread state should be changed while we are still in os::WXWrite.\n@@ -38,1 +38,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec));\n","filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n@@ -116,1 +116,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n@@ -146,1 +146,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-      MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n+      MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec));\n@@ -437,1 +437,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec));\n@@ -444,1 +444,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec));\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable _wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable _wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/prims\/whitebox.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -78,1 +79,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -2371,1 +2371,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -258,1 +257,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                  \\\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));          \\\n@@ -282,1 +281,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));        \\\n@@ -310,1 +309,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));        \\\n@@ -320,1 +319,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));        \\\n@@ -357,1 +356,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));        \\\n@@ -382,1 +381,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite));        \\\n@@ -392,1 +391,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                \\\n+    MACOS_AARCH64_ONLY(os::ThreadWXEnable __wx(os::WXWrite))         \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n@@ -106,1 +106,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,5 +80,0 @@\n-enum WXMode {\n-  WXUnknown,\n-  WXWrite,\n-  WXExec\n-};\n@@ -937,13 +932,0 @@\n-#if defined(__APPLE__) && defined(AARCH64)\n-\n-  \/\/ Enables write or execute access to writeable and executable pages.\n-  \/\/ returns the previous state\n-  static WXMode current_thread_change_wx(WXMode new_state);\n-\n-  \/\/ initializes the WXMode to WXWrite, as writeable pages are the default here\n-  static void current_thread_init_wx();\n-\n-  static void current_thread_assert_wx_state(WXMode expected);\n-\n-#endif \/\/ __APPLE__ && AARCH64\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -37,1 +37,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec);)\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec);)\n@@ -43,1 +43,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec);)\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXExec);)\n","filename":"src\/hotspot\/share\/runtime\/safefetch.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -760,1 +759,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXExec));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXExec));\n@@ -360,1 +360,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n@@ -968,1 +967,1 @@\n-    os::current_thread_assert_wx_state(WXWrite);\n+    os::current_thread_assert_wx_state(os::WXWrite);\n@@ -1815,1 +1814,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n@@ -2682,1 +2681,1 @@\n-  MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-#define SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-\n-\/\/ No threadWXSetters.hpp\n-\n-#if defined(__APPLE__) && defined(AARCH64)\n-\n-#include \"runtime\/thread.inline.hpp\" \/\/ dependencies require this include\n-\n-class ThreadWXEnable  {\n-  WXMode _old_mode;\n-public:\n-  ThreadWXEnable(WXMode new_mode) :\n-    _old_mode(os::current_thread_change_wx(new_mode))\n-  { }\n-  ~ThreadWXEnable() {\n-    os::current_thread_change_wx(_old_mode);\n-  }\n-};\n-#endif \/\/ __APPLE__ && AARCH64\n-\n-#endif \/\/ SHARE_RUNTIME_THREADWXSETTERS_INLINE_HPP\n-\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -97,1 +97,1 @@\n-    \/\/ calls internal functions assuming running in WXWwrite.\n+    \/\/ calls internal functions assuming running in WXWrite.\n@@ -99,1 +99,1 @@\n-    MACOS_AARCH64_ONLY(os::current_thread_change_wx(WXWrite));\n+    MACOS_AARCH64_ONLY(os::current_thread_change_wx(os::WXWrite));\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n+  MACOS_AARCH64_ONLY(os::ThreadWXEnable wx(os::WXWrite));\n","filename":"test\/hotspot\/gtest\/runtime\/test_threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}