{"files":[{"patch":"@@ -1046,1 +1046,2 @@\n-  set_control(_gvn.transform(new IfTrueNode(rc)));\n+  Node* true_path = _gvn.transform( new IfTrueNode(rc));\n+  Node* false_path = _gvn.transform( new IfFalseNode(rc) );\n@@ -1049,1 +1050,1 @@\n-    set_control(_gvn.transform(new IfFalseNode(rc)));\n+    set_control(false_path);\n@@ -1058,0 +1059,2 @@\n+  set_control(true_path);\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte128Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte128Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte256Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte256Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte512Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte512Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte64Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Byte64Shuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Byte64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         ByteMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (ByteMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         ByteMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (ByteMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1984,8 +1984,5 @@\n-        byte[] a0 = this.vec();\n-        byte[] a1 = that.vec();\n-        byte[] res = new byte[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Byte> iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((ByteVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -2013,0 +2010,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Byte> iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -2027,15 +2035,6 @@\n-        byte[] slice = this.vec();\n-        byte[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Byte> iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((byte)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((ByteVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -2071,0 +2070,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Byte> iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((byte)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double128Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double128Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double256Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double256Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double512Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double512Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double64Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Double64Shuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Double64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         DoubleMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (DoubleMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         DoubleMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (DoubleMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1897,8 +1897,5 @@\n-        double[] a0 = this.vec();\n-        double[] a1 = that.vec();\n-        double[] res = new double[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Double> iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((DoubleVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -1926,0 +1923,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Double> iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -1940,15 +1948,6 @@\n-        double[] slice = this.vec();\n-        double[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Double> iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((double)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((DoubleVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -1984,0 +1983,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Double> iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((double)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float128Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float128Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float256Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float256Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float512Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float512Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float64Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Float64Shuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Float64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -384,8 +384,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         FloatMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (FloatMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -412,8 +405,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         FloatMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (FloatMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1909,8 +1909,5 @@\n-        float[] a0 = this.vec();\n-        float[] a1 = that.vec();\n-        float[] res = new float[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Float> iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((FloatVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -1938,0 +1935,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Float> iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -1952,15 +1960,6 @@\n-        float[] slice = this.vec();\n-        float[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Float> iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((float)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((FloatVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -1996,0 +1995,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Float> iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((float)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int128Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int128Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int256Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int256Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int512Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int512Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int64Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Int64Shuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Int64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         IntMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (IntMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         IntMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (IntMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1983,8 +1983,5 @@\n-        int[] a0 = this.vec();\n-        int[] a1 = that.vec();\n-        int[] res = new int[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Integer> iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((IntVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -2012,0 +2009,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Integer> iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -2026,15 +2034,6 @@\n-        int[] slice = this.vec();\n-        int[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Integer> iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((int)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((IntVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -2070,0 +2069,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Integer> iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((int)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,8 +380,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long128Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -408,8 +401,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long128Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,8 +380,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long256Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -408,8 +401,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long256Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,8 +380,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long512Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -408,8 +401,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long512Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,8 +380,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long64Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -408,8 +401,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Long64Shuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Long64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -380,8 +380,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         LongMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (LongMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -408,8 +401,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         LongMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (LongMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1854,8 +1854,5 @@\n-        long[] a0 = this.vec();\n-        long[] a1 = that.vec();\n-        long[] res = new long[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Long> iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((LongVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -1883,0 +1880,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Long> iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -1897,15 +1905,6 @@\n-        long[] slice = this.vec();\n-        long[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Long> iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((long)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((LongVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -1941,0 +1940,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Long> iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((long)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short128Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short128Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short256Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short256Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short512Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short512Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short64Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         Short64Shuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (Short64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,8 +390,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         ShortMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (ShortMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -418,8 +411,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         ShortMaxShuffle Iota = iotaShuffle();\n-         VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return (ShortMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1984,8 +1984,5 @@\n-        short[] a0 = this.vec();\n-        short[] a1 = that.vec();\n-        short[] res = new short[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Short> iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return ((ShortVector)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -2013,0 +2010,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Short> iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -2027,15 +2035,6 @@\n-        short[] slice = this.vec();\n-        short[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Short> iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((short)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return ((ShortVector)w).blend(this.rearrange(iota), BlendMask);\n@@ -2071,0 +2070,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<Short> iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((short)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2253,8 +2253,5 @@\n-        $type$[] a0 = this.vec();\n-        $type$[] a1 = that.vec();\n-        $type$[] res = new $type$[a0.length];\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        System.arraycopy(a0, origin, res, 0, firstPart);\n-        System.arraycopy(a1, 0, res, firstPart, origin);\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return (($abstractvectortype$)v1).rearrange(iota).blend(this.rearrange(iota), BlendMask);\n@@ -2282,0 +2279,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$ sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n+        iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n@@ -2296,15 +2304,6 @@\n-        $type$[] slice = this.vec();\n-        $type$[] res = that.vec().clone();\n-        int vlen = res.length;\n-        int firstPart = vlen - origin;\n-        switch (part) {\n-        case 0:\n-            System.arraycopy(slice, 0, res, origin, firstPart);\n-            break;\n-        case 1:\n-            System.arraycopy(slice, firstPart, res, 0, origin);\n-            break;\n-        default:\n-            throw wrongPartForSlice(part);\n-        }\n-        return vectorFactory(res);\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast(($type$)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return (($abstractvectortype$)w).blend(this.rearrange(iota), BlendMask);\n@@ -2340,0 +2339,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length() + 1);\n+        VectorShuffle<$Boxtype$> iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast(($type$)(origin))));\n+        iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,8 +396,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         $shuffletype$ Iota = iotaShuffle();\n-         VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(VLENGTH-origin))));\n-         Iota = iotaShuffle(origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return ($vectortype$) super.sliceTemplate(origin);  \/\/ specialize\n@@ -424,8 +417,1 @@\n-       if ((origin < 0) || (origin >= VLENGTH)) {\n-         throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-       } else {\n-         $shuffletype$ Iota = iotaShuffle();\n-         VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast(($type$)(origin))));\n-         Iota = iotaShuffle(-origin, 1, true);\n-         return ZERO.blend(this.rearrange(Iota), BlendMask);\n-       }\n+        return ($vectortype$) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 1000);\n+    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 100);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    static final int BUFFER_SIZE = Integer.getInteger(\"jdk.incubator.vector.test.buffer-size\", 1024);\n@@ -56,1 +57,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -62,1 +63,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -68,1 +69,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -74,1 +75,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector128ConversionTests.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    static final int BUFFER_SIZE = Integer.getInteger(\"jdk.incubator.vector.test.buffer-size\", 1024);\n@@ -56,1 +57,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -62,1 +63,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -68,1 +69,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -74,1 +75,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector256ConversionTests.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    static final int BUFFER_SIZE = Integer.getInteger(\"jdk.incubator.vector.test.buffer-size\", 1024);\n@@ -56,1 +57,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -62,1 +63,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -68,1 +69,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -74,1 +75,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector512ConversionTests.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+    static final int BUFFER_SIZE = Integer.getInteger(\"jdk.incubator.vector.test.buffer-size\", 1024);\n@@ -78,1 +79,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -84,1 +85,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -90,1 +91,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n@@ -96,1 +97,1 @@\n-        Object a = fa.apply(1024);\n+        Object a = fa.apply(BUFFER_SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}