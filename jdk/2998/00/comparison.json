{"files":[{"patch":"@@ -1049,48 +1049,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ runtime exit support\n-\n-\/\/ Note: os::shutdown() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::shutdown(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::shutdown() {\n-\n-  \/\/ allow PerfMemory to attempt cleanup of any persistent resources\n-  perfMemory_exit();\n-\n-  \/\/ needs to remove object in file system\n-  AttachListener::abort();\n-\n-  \/\/ flush buffered output, finish log files\n-  ostream_abort();\n-\n-  \/\/ Check for abort hook\n-  abort_hook_t abort_hook = Arguments::abort_hook();\n-  if (abort_hook != NULL) {\n-    abort_hook();\n-  }\n-}\n-\n-\/\/ Note: os::abort() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::abort(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::abort(bool dump_core, void* siginfo, const void* context) {\n-  os::shutdown();\n-  if (dump_core) {\n-    ::abort(); \/\/ dump core\n-  }\n-\n-  ::exit(1);\n-}\n-\n-\/\/ Die immediately, no exit hook, no abort hook, no cleanup.\n-\/\/ Dump a core file, if possible, for debugging.\n-void os::die() {\n-  if (TestUnresponsiveErrorHandler && !CreateCoredumpOnCrash) {\n-    \/\/ For TimeoutInErrorHandlingTest.java, we just kill the VM\n-    \/\/ and don't take the time to generate a core file.\n-    os::signal_raise(SIGKILL);\n-  } else {\n-    ::abort();\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -870,50 +870,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ runtime exit support\n-\n-\/\/ Note: os::shutdown() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::shutdown(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::shutdown() {\n-\n-  \/\/ allow PerfMemory to attempt cleanup of any persistent resources\n-  perfMemory_exit();\n-\n-  \/\/ needs to remove object in file system\n-  AttachListener::abort();\n-\n-  \/\/ flush buffered output, finish log files\n-  ostream_abort();\n-\n-  \/\/ Check for abort hook\n-  abort_hook_t abort_hook = Arguments::abort_hook();\n-  if (abort_hook != NULL) {\n-    abort_hook();\n-  }\n-\n-}\n-\n-\/\/ Note: os::abort() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::abort(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::abort(bool dump_core, void* siginfo, const void* context) {\n-  os::shutdown();\n-  if (dump_core) {\n-    ::abort(); \/\/ dump core\n-  }\n-\n-  ::exit(1);\n-}\n-\n-\/\/ Die immediately, no exit hook, no abort hook, no cleanup.\n-\/\/ Dump a core file, if possible, for debugging.\n-void os::die() {\n-  if (TestUnresponsiveErrorHandler && !CreateCoredumpOnCrash) {\n-    \/\/ For TimeoutInErrorHandlingTest.java, we just kill the VM\n-    \/\/ and don't take the time to generate a core file.\n-    os::signal_raise(SIGKILL);\n-  } else {\n-    \/\/ _exit() on BsdThreads only kills current thread\n-    ::abort();\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/classLoader.hpp\"\n@@ -68,1 +67,0 @@\n-#include \"services\/attachListener.hpp\"\n@@ -1359,52 +1357,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ runtime exit support\n-\n-\/\/ Note: os::shutdown() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::shutdown(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::shutdown() {\n-\n-  \/\/ allow PerfMemory to attempt cleanup of any persistent resources\n-  perfMemory_exit();\n-\n-  \/\/ needs to remove object in file system\n-  AttachListener::abort();\n-\n-  \/\/ flush buffered output, finish log files\n-  ostream_abort();\n-\n-  \/\/ Check for abort hook\n-  abort_hook_t abort_hook = Arguments::abort_hook();\n-  if (abort_hook != NULL) {\n-    abort_hook();\n-  }\n-\n-}\n-\n-\/\/ Note: os::abort() might be called very early during initialization, or\n-\/\/ called from signal handler. Before adding something to os::abort(), make\n-\/\/ sure it is async-safe and can handle partially initialized VM.\n-void os::abort(bool dump_core, void* siginfo, const void* context) {\n-  os::shutdown();\n-  if (dump_core) {\n-    if (DumpPrivateMappingsInCore) {\n-      ClassLoader::close_jrt_image();\n-    }\n-    ::abort(); \/\/ dump core\n-  }\n-\n-  ::exit(1);\n-}\n-\n-\/\/ Die immediately, no exit hook, no abort hook, no cleanup.\n-\/\/ Dump a core file, if possible, for debugging.\n-void os::die() {\n-  if (TestUnresponsiveErrorHandler && !CreateCoredumpOnCrash) {\n-    \/\/ For TimeoutInErrorHandlingTest.java, we just kill the VM\n-    \/\/ and don't take the time to generate a core file.\n-    os::signal_raise(SIGKILL);\n-  } else {\n-    ::abort();\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n@@ -26,0 +27,3 @@\n+#ifdef LINUX\n+#include \"classfile\/classLoader.hpp\"\n+#endif\n@@ -36,0 +40,1 @@\n+#include \"services\/attachListener.hpp\"\n@@ -40,0 +45,1 @@\n+#include \"runtime\/perfMemory.hpp\"\n@@ -1846,0 +1852,49 @@\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/ runtime exit support\n+\n+\/\/ Note: os::shutdown() might be called very early during initialization, or\n+\/\/ called from signal handler. Before adding something to os::shutdown(), make\n+\/\/ sure it is async-safe and can handle partially initialized VM.\n+void os::shutdown() {\n+\n+  \/\/ allow PerfMemory to attempt cleanup of any persistent resources\n+  perfMemory_exit();\n+\n+  \/\/ needs to remove object in file system\n+  AttachListener::abort();\n+\n+  \/\/ flush buffered output, finish log files\n+  ostream_abort();\n+\n+  \/\/ Check for abort hook\n+  abort_hook_t abort_hook = Arguments::abort_hook();\n+  if (abort_hook != NULL) {\n+    abort_hook();\n+  }\n+\n+}\n+\n+\/\/ Note: os::abort() might be called very early during initialization, or\n+\/\/ called from signal handler. Before adding something to os::abort(), make\n+\/\/ sure it is async-safe and can handle partially initialized VM.\n+void os::abort(bool dump_core, void* siginfo, const void* context) {\n+  os::shutdown();\n+  if (dump_core) {\n+    LINUX_ONLY(if (DumpPrivateMappingsInCore) ClassLoader::close_jrt_image();)\n+    ::abort(); \/\/ dump core\n+  }\n+  ::exit(1);\n+}\n+\n+\/\/ Die immediately, no exit hook, no abort hook, no cleanup.\n+\/\/ Dump a core file, if possible, for debugging.\n+void os::die() {\n+  if (TestUnresponsiveErrorHandler && !CreateCoredumpOnCrash) {\n+    \/\/ For TimeoutInErrorHandlingTest.java, we just kill the VM\n+    \/\/ and don't take the time to generate a core file.\n+    os::signal_raise(SIGKILL);\n+  } else {\n+    ::abort();\n+  }\n+}\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"}]}