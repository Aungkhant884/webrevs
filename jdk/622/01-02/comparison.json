{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747\n+ * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747 8254023\n@@ -523,0 +523,60 @@\n+    @Test\n+    public void testAnnotationsWithoutTargetInModuleInfo(Path base) throws Exception {\n+        Path moduleSrc = base.resolve(\"module-src\");\n+        Path m1 = moduleSrc.resolve(\"m1\");\n+\n+        tb.writeJavaFiles(m1,\n+                          \"@test.A module m1x { exports test; }\",\n+                          \"package test; public @interface A { }\",\n+                          \"package test; public @interface B { }\");\n+\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+\n+        List<String> expectedLog = List.of(\"Note: m1x\/test.A AP Invoked\",\n+                                           \"Note: m1x\/test.A AP Invoked\");\n+\n+        List<String> actualLog = new JavacTask(tb)\n+                .options(\"-processor\", AnnotationsWithoutTargetInModuleInfo.class.getName()\n+                         + \",\" + AnnotationsWithoutTargetNotInModuleInfo.class.getName())\n+                .outdir(classes)\n+                .files(findJavaFiles(m1))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        tb.checkEqual(expectedLog, actualLog);\n+    }\n+\n+    @SupportedAnnotationTypes(\"m1x\/test.A\")\n+    public static final class AnnotationsWithoutTargetInModuleInfo extends AbstractProcessor {\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            processingEnv.getMessager().printMessage(Kind.NOTE, \"m1x\/test.A AP Invoked\");\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+\n+    }\n+\n+    @SupportedAnnotationTypes(\"m1x\/test.B\")\n+    public static final class AnnotationsWithoutTargetNotInModuleInfo extends AbstractProcessor {\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            processingEnv.getMessager().printMessage(Kind.NOTE, \"m1x\/test.B AP Invoked\");\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessing.java","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8159602 8170549 8171255 8171322\n+ * @bug 8159602 8170549 8171255 8171322 8254023\n@@ -54,0 +54,1 @@\n+import com.sun.tools.classfile.Annotation;\n@@ -413,0 +414,36 @@\n+    @Test\n+    public void testAnnotationWithoutTarget(Path base) throws Exception {\n+        Path moduleSrc = base.resolve(\"module-src\");\n+        Path m1 = moduleSrc.resolve(\"m1x\");\n+\n+        tb.writeJavaFiles(m1,\n+                          \"@test.A module m1x { exports test; }\",\n+                          \"package test; public @interface A { }\");\n+\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+                .options(\"--module-source-path\", moduleSrc.toString())\n+                .outdir(classes)\n+                .files(findJavaFiles(m1))\n+                .run()\n+                .writeAll();\n+\n+        ClassFile cf = ClassFile.read(classes.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        var invisibleAnnotations = (RuntimeInvisibleAnnotations_attribute) cf.attributes.map.get(Attribute.RuntimeInvisibleAnnotations);\n+\n+        if (invisibleAnnotations == null) {\n+            throw new AssertionError(\"Annotations not found!\");\n+        }\n+        int length = invisibleAnnotations.annotations.length;\n+        if (length != 1) {\n+            throw new AssertionError(\"Incorrect number of annotations: \" + length);\n+        }\n+        Annotation annotation = invisibleAnnotations.annotations[0];\n+        String annotationName = cf.constant_pool.getUTF8Value(annotation.type_index).toString();\n+        if (!\"Ltest\/A;\".equals(annotationName)) {\n+            throw new AssertionError(\"Incorrect annotation name: \" + annotationName);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}