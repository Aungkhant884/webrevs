{"files":[{"patch":"@@ -93,1 +93,1 @@\n-         (callee_locals - callee_params) +\n+         (callee_locals - callee_params) * Interpreter::stackElementWords +\n@@ -138,1 +138,1 @@\n-  \/\/ sender_sp is fp+8\/16 (32bit\/64bit) XXX\n+  \/\/ sender_sp is fp+16\n@@ -168,0 +168,13 @@\n+  \/\/ We have to add extra reserved slots to max_stack. There are 3 users of the extra slots,\n+  \/\/ none of which are at the same time, so we just need to make sure there is enough room\n+  \/\/ for the biggest user:\n+  \/\/   -reserved slot for exception handler\n+  \/\/   -reserved slots for JSR292. Method::extra_stack_entries() is the size.\n+  \/\/   -reserved slots for TraceBytecodes\n+  int max_stack = method->constMethod()->max_stack() + MAX2(3, Method::extra_stack_entries());\n+  intptr_t* extended_sp = (intptr_t*) monbot  -\n+    (max_stack * Interpreter::stackElementWords) -\n+    popframe_extra_args;\n+  extended_sp = align_down(extended_sp, StackAlignmentInBytes);\n+  interpreter_frame->interpreter_frame_set_extended_sp(extended_sp);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/abstractInterpreter_aarch64.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-const uintptr_t Assembler::asm_bp = 0x00007fffee09ac88;\n+const uintptr_t Assembler::asm_bp = 0x0000ffffac221240;\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,2 +145,2 @@\n-\/\/ monitors allocated on stack\n-REGISTER_DECLARATION(Register, rmonitors, r25);\n+\/\/ r25 is a callee-saved temp\n+\/\/ REGISTER_DECLARATION(Register, unused, r25);\n@@ -153,1 +153,1 @@\n-\/\/ Java stack pointer\n+\/\/ Java interpreter stack pointer\n@@ -155,0 +155,2 @@\n+\/\/ Sender's SP while in interpreter\n+REGISTER_DECLARATION(Register, r19_sender_sp, r19);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -357,0 +357,5 @@\n+\/\/ Used by template based interpreter deoptimization\n+void frame::interpreter_frame_set_extended_sp(intptr_t* sp) {\n+  *((intptr_t**)addr_at(interpreter_frame_extended_sp_offset)) = sp;\n+}\n+\n@@ -602,0 +607,1 @@\n+    DESCRIBE_FP_OFFSET(interpreter_frame_extended_sp);\n@@ -673,0 +679,2 @@\n+  DESCRIBE_FP_OFFSET(interpreter_frame_extended_sp);\n+  DESCRIBE_FP_OFFSET(interpreter_frame_mirror);\n@@ -775,1 +783,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\/\/    [padding               ]\n+\/\/    [extended SP           ]                                          extended_sp offset\n@@ -56,1 +56,1 @@\n-\/\/    [old stack pointer     ]                     (sender_sp)          sender_sp_offset\n+\/\/    [sender's SP           ]                     (sender_sp)          sender_sp_offset\n@@ -85,2 +85,2 @@\n-    interpreter_frame_padding_offset                 = interpreter_frame_mdp_offset - 1,\n-    interpreter_frame_mirror_offset                  = interpreter_frame_padding_offset - 1,\n+    interpreter_frame_extended_sp_offset             = interpreter_frame_mdp_offset - 1,\n+    interpreter_frame_mirror_offset                  = interpreter_frame_extended_sp_offset - 1,\n@@ -185,0 +185,2 @@\n+  void interpreter_frame_set_extended_sp(intptr_t* sp);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-  mov(r13, sp);\n+  mov(r19_sender_sp, sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,25 @@\n+  void restore_sp_after_call() {\n+    Label L;\n+    ldr(rscratch1, Address(rfp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+#ifdef ASSERT\n+    cbnz(rscratch1, L);\n+    stop(\"SP is null\");\n+#endif\n+    bind(L);\n+    mov(sp, rscratch1);\n+  }\n+\n+  void check_extended_sp(const char* msg = \"check extended SP\") {\n+#ifdef ASSERT\n+    Label L;\n+    ldr(rscratch1, Address(rfp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+    cmp(sp, rscratch1);\n+    br(EQ, L);\n+    stop(msg);\n+    bind(L);\n+#endif\n+  }\n+\n+#define check_extended_sp()                                             \\\n+  check_extended_sp(\"SP does not match extended SP in frame at \" __FILE__ \":\" XSTR(__LINE__))\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  \/\/ r13: sender SP (must preserve; see prepare_to_jump_from_interpreted)\n+  \/\/ r19_sender_sp: sender SP (must preserve; see prepare_to_jump_from_interpreted)\n@@ -286,1 +286,1 @@\n-  Register temp3 = r14;  \/\/ r13 is live by this point: it contains the sender SP\n+  Register temp3 = r14;\n@@ -359,1 +359,1 @@\n-    \/\/  r13 - interpreter linkage (if interpreted)  ??? FIXME\n+    \/\/  r19 - interpreter linkage (if interpreted)\n@@ -446,1 +446,1 @@\n-    \/\/ live at this point:  rmethod, r13 (if interpreted)\n+    \/\/ live at this point:  rmethod, r19_sender_sp (if interpreted)\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,5 +47,3 @@\n-    \"rscratch1\", \"rscratch2\",\n-    \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\", \"r16\",\n-    \"r17\", \"r18_tls\", \"r19\",\n-    \"resp\", \"rdispatch\", \"rbcp\", \"r23\", \"rlocals\", \"rmonitors\", \"rcpool\", \"rheapbase\",\n-    \"rthread\", \"rfp\", \"lr\", \"sp\"\n+    \"rscratch1\", \"rscratch2\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\n+    \"r16\", \"r17\", \"r18_tls\", \"r19\", \"resp\", \"rdispatch\", \"rbcp\", \"r23\",\n+    \"rlocals\", \"r25\", \"rcpool\", \"rheapbase\", \"rthread\", \"rfp\", \"lr\", \"sp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -438,1 +438,1 @@\n-  __ mov(r13, sp);\n+  __ mov(r19_sender_sp, sp);\n@@ -555,6 +555,4 @@\n-  \/\/ Note: r13 contains the senderSP on entry. We must preserve it since\n-  \/\/ we may do a i2c -> c2i transition if we lose a race where compiled\n-  \/\/ code goes non-entrant while we get args ready.\n-\n-  \/\/ In addition we use r13 to locate all the interpreter args because\n-  \/\/ we must align the stack to 16 bytes.\n+  \/\/ Note: r19_sender_sp contains the senderSP on entry. We must\n+  \/\/ preserve it since we may do a i2c -> c2i transition if we lose a\n+  \/\/ race where compiled code goes non-entrant while we get args\n+  \/\/ ready.\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-    \/\/      r13: sender sp\n+    \/\/      r19_sender_sp: sender sp\n@@ -303,1 +303,1 @@\n-    __ mov(r13, sp);\n+    __ mov(r19_sender_sp, sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  \/\/ r13: sender sp\n+  \/\/ r19_sender_sp: sender sp\n@@ -177,1 +177,1 @@\n-    __ mov(sp, r13); \/\/ Restore caller's SP\n+    __ mov(sp, r19_sender_sp); \/\/ Restore caller's SP\n@@ -183,1 +183,1 @@\n-    __ mov(sp, r13);\n+    __ mov(sp, r19_sender_sp);\n@@ -193,3 +193,3 @@\n-    __ mov(sp, r13);\n-    __ mov(r19, lr);\n-    continuation = r19;  \/\/ The first callee-saved register\n+    __ mov(sp, r19_sender_sp);\n+    __ mov(r23, lr);\n+    continuation = r23;  \/\/ The first free callee-saved register\n@@ -200,2 +200,2 @@\n-    __ mov(r19, lr);\n-    continuation = r19;\n+    __ mov(r23, lr);\n+    continuation = r23;\n@@ -204,1 +204,1 @@\n-    __ mov(sp, r13);\n+    __ mov(sp, r19_sender_sp);\n@@ -214,1 +214,1 @@\n-      __ mov(sp, r13); \/\/ Restore caller's SP\n+      __ mov(sp, r19_sender_sp); \/\/ Restore caller's SP\n@@ -224,1 +224,1 @@\n-      __ mov(sp, r13); \/\/ Restore caller's SP\n+      __ mov(sp, r19_sender_sp); \/\/ Restore caller's SP\n@@ -310,1 +310,1 @@\n-  \/\/ r13: sender SP\n+  \/\/ r19_sender_sp: sender SP\n@@ -461,7 +461,1 @@\n-  __ ldr(rscratch1, Address(rmethod, Method::const_offset()));\n-  __ ldrh(rscratch1, Address(rscratch1, ConstMethod::max_stack_offset()));\n-  __ add(rscratch1, rscratch1, frame::interpreter_frame_monitor_size() + 2);\n-  __ ldr(rscratch2,\n-         Address(rfp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ sub(rscratch1, rscratch2, rscratch1, ext::uxtw, 3);\n-  __ andr(sp, rscratch1, -16);\n+  __ restore_sp_after_call();\n@@ -488,8 +482,1 @@\n-  \/\/ Calculate stack limit\n-  __ ldr(rscratch1, Address(rmethod, Method::const_offset()));\n-  __ ldrh(rscratch1, Address(rscratch1, ConstMethod::max_stack_offset()));\n-  __ add(rscratch1, rscratch1, frame::interpreter_frame_monitor_size() + 2);\n-  __ ldr(rscratch2,\n-         Address(rfp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ sub(rscratch1, rscratch2, rscratch1, ext::uxtx, 3);\n-  __ andr(sp, rscratch1, -16);\n+  __ restore_sp_after_call();  \/\/ Restore SP to extended SP\n@@ -720,1 +707,1 @@\n-  __ andr(sp, r13, -16);\n+  __ andr(sp, r19_sender_sp, -16);\n@@ -783,0 +770,1 @@\n+  __ check_extended_sp();\n@@ -785,2 +773,3 @@\n-  __ mov(rscratch1, esp);\n-  __ str(rscratch1, monitor_block_top);  \/\/ set new monitor block top\n+  __ mov(rscratch1, sp);\n+  __ str(rscratch1, Address(rfp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+  __ str(esp, monitor_block_top);  \/\/ set new monitor block top\n@@ -813,1 +802,1 @@\n-    __ ldr(rscratch1, Address(rmethod, Method::const_offset()));      \/\/ get ConstMethod\n+    __ ldr(rscratch1, Address(rmethod, Method::const_offset()));    \/\/ get ConstMethod\n@@ -826,1 +815,1 @@\n-    __ stp(zr, rmethod, Address(sp, 6 * wordSize));        \/\/ save Method* (no mdp)\n+    __ stp(zr, rmethod, Address(sp, 6 * wordSize));         \/\/ save Method* (no mdp)\n@@ -829,4 +818,0 @@\n-  \/\/ Get mirror and store it in the frame as GC root for this Method*\n-  __ load_mirror(r10, rmethod);\n-  __ stp(r10, zr, Address(sp, 4 * wordSize));\n-\n@@ -844,1 +829,1 @@\n-  __ stp(zr, r13, Address(sp, 8 * wordSize));\n+  __ stp(zr, r19_sender_sp, Address(sp, 8 * wordSize));\n@@ -846,1 +831,2 @@\n-  \/\/ Move SP out of the way\n+  \/\/ Get mirror\n+  __ load_mirror(r10, rmethod);\n@@ -850,1 +836,1 @@\n-    __ add(rscratch1, rscratch1, frame::interpreter_frame_monitor_size() + 2);\n+    __ add(rscratch1, rscratch1, MAX2(3, Method::extra_stack_entries()));\n@@ -852,1 +838,8 @@\n-    __ andr(sp, rscratch1, -16);\n+    __ andr(rscratch1, rscratch1, -16);\n+    \/\/ Store extended SP and mirror\n+    __ stp(r10, rscratch1, Address(sp, 4 * wordSize));\n+    \/\/ Move SP out of the way\n+    __ mov(sp, rscratch1);\n+    } else {\n+    __ mov(rscratch1, sp);\n+    __ stp(zr, rscratch1, Address(sp, 4 * wordSize));\n@@ -903,1 +896,1 @@\n-  \/\/ r13: senderSP must preserve for slow path, set SP to it on fast path\n+  \/\/ r19_sender_sp: senderSP must preserve for slow path, set SP to it on fast path\n@@ -918,3 +911,1 @@\n-  __ mov(r19, r13);   \/\/ Move senderSP to a callee-saved register\n-\n-  \/\/ Load the value of the referent field.\n+    \/\/ Load the value of the referent field.\n@@ -926,1 +917,1 @@\n-  __ andr(sp, r19, -16);  \/\/ done with stack\n+  __ andr(sp, r19_sender_sp, -16);  \/\/ done with stack\n@@ -945,1 +936,1 @@\n-    \/\/ r13: senderSP must preserved for slow path\n+    \/\/ r19_sender_sp: senderSP must preserved for slow path\n@@ -974,1 +965,1 @@\n-    __ andr(sp, r13, -16);\n+    __ andr(sp, r19_sender_sp, -16);\n@@ -995,1 +986,1 @@\n-    \/\/ r13: senderSP must preserved for slow path\n+    \/\/ r19_sender_sp: senderSP must preserved for slow path\n@@ -1027,1 +1018,1 @@\n-    __ andr(sp, r13, -16); \/\/ Restore the caller's SP\n+    __ andr(sp, r19_sender_sp, -16); \/\/ Restore the caller's SP\n@@ -1071,1 +1062,1 @@\n-    __ andr(sp, r13, -16); \/\/ Restore the caller's SP\n+    __ andr(sp, r19_sender_sp, -16); \/\/ Restore the caller's SP\n@@ -1237,1 +1228,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 1\");\n@@ -1535,1 +1526,1 @@\n-  \/\/ resture sender sp\n+  \/\/ restore sender sp\n@@ -1688,1 +1679,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 2\");\n@@ -1746,8 +1737,2 @@\n-  \/\/ Calculate stack limit\n-  __ ldr(rscratch1, Address(rmethod, Method::const_offset()));\n-  __ ldrh(rscratch1, Address(rscratch1, ConstMethod::max_stack_offset()));\n-  __ add(rscratch1, rscratch1, frame::interpreter_frame_monitor_size() + 4);\n-  __ ldr(rscratch2,\n-         Address(rfp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ sub(rscratch1, rscratch2, rscratch1, ext::uxtx, 3);\n-  __ andr(sp, rscratch1, -16);\n+  \/\/ Restore machine SP\n+  __ restore_sp_after_call();\n@@ -1882,7 +1867,1 @@\n-  __ ldr(rscratch1, Address(rmethod, Method::const_offset()));\n-  __ ldrh(rscratch1, Address(rscratch1, ConstMethod::max_stack_offset()));\n-  __ add(rscratch1, rscratch1, frame::interpreter_frame_monitor_size() + 4);\n-  __ ldr(rscratch2,\n-         Address(rfp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ sub(rscratch1, rscratch2, rscratch1, ext::uxtw, 3);\n-  __ andr(sp, rscratch1, -16);\n+  __ restore_sp_after_call();\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":47,"deletions":68,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -3830,0 +3830,6 @@\n+\n+    __ check_extended_sp();\n+    __ sub(sp, sp, entry_size);           \/\/ make room for the monitor\n+    __ mov(rscratch1, sp);\n+    __ str(rscratch1, Address(rfp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+\n@@ -3836,2 +3842,0 @@\n-    __ sub(sp, sp, entry_size);           \/\/ make room for the monitor\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -896,1 +896,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 3\");\n@@ -1250,1 +1250,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 4\");\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -910,1 +910,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 5\");\n@@ -1464,1 +1464,1 @@\n-    __ stop(\"broken stack frame setup in interpreter\");\n+    __ stop(\"broken stack frame setup in interpreter 6\");\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}