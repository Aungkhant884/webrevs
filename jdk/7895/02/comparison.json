{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"cds\/heapShared.hpp\"\n@@ -43,0 +44,1 @@\n+#include \"oops\/objArrayOop.inline.hpp\"\n@@ -932,1 +934,2 @@\n-  static void write_dump_region(const char* name, DumpRegion* region) {\n+  static void log_metaspace_region(const char* name, DumpRegion* region,\n+                                   const ArchiveBuilder::SourceObjList* src_objs) {\n@@ -935,1 +938,2 @@\n-    write_region(name, region_base, region_top, region_base + buffer_to_runtime_delta());\n+    log_region(name, region_base, region_top, region_base + buffer_to_runtime_delta());\n+    log_metaspace_objects(region, src_objs);\n@@ -940,1 +944,1 @@\n-  static void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n+  static void log_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n@@ -945,1 +949,1 @@\n-  static void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n+  static void log_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* current) {\n@@ -952,1 +956,1 @@\n-  static void write_objects(DumpRegion* region, const ArchiveBuilder::SourceObjList* src_objs) {\n+  static void log_metaspace_objects(DumpRegion* region, const ArchiveBuilder::SourceObjList* src_objs) {\n@@ -961,1 +965,1 @@\n-      write_data(last_obj_base, dest, last_obj_base + buffer_to_runtime_delta());\n+      log_data(last_obj_base, dest, last_obj_base + buffer_to_runtime_delta());\n@@ -970,1 +974,1 @@\n-        write_klass((Klass*)src, runtime_dest, type_name, bytes, current);\n+        log_klass((Klass*)src, runtime_dest, type_name, bytes, current);\n@@ -973,1 +977,1 @@\n-        write_klass(((ConstantPool*)src)->pool_holder(),\n+        log_klass(((ConstantPool*)src)->pool_holder(),\n@@ -977,1 +981,1 @@\n-        write_klass(((ConstantPoolCache*)src)->constant_pool()->pool_holder(),\n+        log_klass(((ConstantPoolCache*)src)->constant_pool()->pool_holder(),\n@@ -981,1 +985,1 @@\n-        write_method((Method*)src, runtime_dest, type_name, bytes, current);\n+        log_method((Method*)src, runtime_dest, type_name, bytes, current);\n@@ -984,1 +988,1 @@\n-        write_method(((ConstMethod*)src)->method(), runtime_dest, type_name, bytes, current);\n+        log_method(((ConstMethod*)src)->method(), runtime_dest, type_name, bytes, current);\n@@ -1003,1 +1007,1 @@\n-    write_data(last_obj_base, last_obj_end, last_obj_base + buffer_to_runtime_delta());\n+    log_data(last_obj_base, last_obj_end, last_obj_base + buffer_to_runtime_delta());\n@@ -1008,1 +1012,1 @@\n-      write_data(last_obj_end, region_end, last_obj_end + buffer_to_runtime_delta());\n+      log_data(last_obj_end, region_end, last_obj_end + buffer_to_runtime_delta());\n@@ -1014,1 +1018,1 @@\n-  \/\/ Write information about a region, whose address at dump time is [base .. top). At\n+  \/\/ Log information about a region, whose address at dump time is [base .. top). At\n@@ -1018,1 +1022,1 @@\n-  static void write_region(const char* name, address base, address top, address runtime_base) {\n+  static void log_region(const char* name, address base, address top, address runtime_base) {\n@@ -1027,1 +1031,2 @@\n-  static void write_heap_region(const char* which, GrowableArray<MemRegion> *regions) {\n+  static void log_heap_regions(const char* which, GrowableArray<MemRegion> *regions) {\n+#if INCLUDE_CDS_JAVA_HEAP\n@@ -1031,2 +1036,30 @@\n-      write_region(which, start, end, start);\n-      write_data(start, end, start);\n+      log_region(which, start, end, start);\n+\n+      while (start < end) {\n+        size_t byte_size;\n+        oop archived_oop = cast_to_oop(start);\n+        oop original_oop = HeapShared::get_original_object(archived_oop);\n+        if (original_oop != NULL) {\n+          ResourceMark rm;\n+          log_info(cds, map)(PTR_FORMAT \": @@ Object %s\",\n+                             p2i(start), original_oop->klass()->external_name());\n+          byte_size = original_oop->size() * BytesPerWord;\n+        } else if (archived_oop == HeapShared::roots()) {\n+          \/\/ HeapShared::roots() is copied specially so it doesn't exist in\n+          \/\/ HeapShared::OriginalObjectTable. See HeapShared::copy_roots().\n+          log_info(cds, map)(PTR_FORMAT \": @@ Object HeapShared:roots (ObjArray)\",\n+                             p2i(start));\n+          byte_size = objArrayOopDesc::object_size(HeapShared::roots()->length()) * BytesPerWord;\n+        } else {\n+          \/\/ We have reached the end of the region\n+          break;\n+        }\n+        address oop_end = start + byte_size;\n+        log_data(start, oop_end, start, \/*is_heap=*\/true);\n+        start = oop_end;\n+      }\n+      if (start < end) {\n+        log_info(cds, map)(PTR_FORMAT \": @@ Unused heap space \" SIZE_FORMAT \" bytes\",\n+                           p2i(start), size_t(end - start));\n+        log_data(start, end, start, \/*is_heap=*\/true);\n+      }\n@@ -1034,0 +1067,1 @@\n+#endif\n@@ -1036,1 +1070,1 @@\n-  \/\/ Dump all the data [base...top). Pretend that the base address\n+  \/\/ Log all the data [base...top). Pretend that the base address\n@@ -1038,1 +1072,1 @@\n-  static void write_data(address base, address top, address runtime_base) {\n+  static void log_data(address base, address top, address runtime_base, bool is_heap = false) {\n@@ -1043,1 +1077,7 @@\n-      os::print_hex_dump(&lsh, base, top, sizeof(address), 32, runtime_base);\n+      int unitsize = sizeof(address);\n+      if (is_heap && UseCompressedOops) {\n+        \/\/ This makes the compressed oop pointers easier to read, but\n+        \/\/ longs and doubles will be split into two words.\n+        unitsize = sizeof(narrowOop);\n+      }\n+      os::print_hex_dump(&lsh, base, top, unitsize, 32, runtime_base);\n@@ -1047,1 +1087,1 @@\n-  static void write_header(FileMapInfo* mapinfo) {\n+  static void log_header(FileMapInfo* mapinfo) {\n@@ -1055,4 +1095,4 @@\n-  static void write(ArchiveBuilder* builder, FileMapInfo* mapinfo,\n-             GrowableArray<MemRegion> *closed_heap_regions,\n-             GrowableArray<MemRegion> *open_heap_regions,\n-             char* bitmap, size_t bitmap_size_in_bytes) {\n+  static void log(ArchiveBuilder* builder, FileMapInfo* mapinfo,\n+                  GrowableArray<MemRegion> *closed_heap_regions,\n+                  GrowableArray<MemRegion> *open_heap_regions,\n+                  char* bitmap, size_t bitmap_size_in_bytes) {\n@@ -1063,3 +1103,3 @@\n-    write_region(\"header\", header, header_end, 0);\n-    write_header(mapinfo);\n-    write_data(header, header_end, 0);\n+    log_region(\"header\", header, header_end, 0);\n+    log_header(mapinfo);\n+    log_data(header, header_end, 0);\n@@ -1070,5 +1110,2 @@\n-    write_dump_region(\"rw region\", rw_region);\n-    write_objects(rw_region, &builder->_rw_src_objs);\n-\n-    write_dump_region(\"ro region\", ro_region);\n-    write_objects(ro_region, &builder->_ro_src_objs);\n+    log_metaspace_region(\"rw region\", rw_region, &builder->_rw_src_objs);\n+    log_metaspace_region(\"ro region\", ro_region, &builder->_ro_src_objs);\n@@ -1077,2 +1114,2 @@\n-    write_region(\"bitmap\", address(bitmap), bitmap_end, 0);\n-    write_data(header, header_end, 0);\n+    log_region(\"bitmap\", address(bitmap), bitmap_end, 0);\n+    log_data((address)bitmap, bitmap_end, 0);\n@@ -1081,1 +1118,1 @@\n-      write_heap_region(\"closed heap region\", closed_heap_regions);\n+      log_heap_regions(\"closed heap region\", closed_heap_regions);\n@@ -1084,1 +1121,1 @@\n-      write_heap_region(\"open heap region\", open_heap_regions);\n+      log_heap_regions(\"open heap region\", open_heap_regions);\n@@ -1089,1 +1126,1 @@\n-};\n+}; \/\/ end ArchiveBuilder::CDSMapLogger\n@@ -1143,2 +1180,2 @@\n-    CDSMapLogger::write(this, mapinfo, closed_heap_regions, open_heap_regions,\n-                        bitmap, bitmap_size_in_bytes);\n+    CDSMapLogger::log(this, mapinfo, closed_heap_regions, open_heap_regions,\n+                      bitmap, bitmap_size_in_bytes);\n@@ -1146,0 +1183,1 @@\n+  CDS_JAVA_HEAP_ONLY(HeapShared::destroy_archived_object_cache());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":79,"deletions":41,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-#include \"oops\/objArrayOop.hpp\"\n+#include \"oops\/objArrayOop.inline.hpp\"\n@@ -56,0 +56,1 @@\n+#include \"oops\/typeArrayOop.inline.hpp\"\n@@ -216,0 +217,1 @@\n+HeapShared::OriginalObjectTable* HeapShared::_original_object_table = NULL;\n@@ -320,0 +322,3 @@\n+    if (_original_object_table != NULL) {\n+      _original_object_table->put(archived_oop, obj);\n+    }\n@@ -469,1 +474,1 @@\n-    create_archived_object_cache();\n+    create_archived_object_cache(log_is_enabled(Info, cds, map));\n@@ -483,1 +488,0 @@\n-    destroy_archived_object_cache();\n@@ -535,0 +539,6 @@\n+  \/\/ HeapShared::roots() points into an ObjArray in the open archive region. A portion of the\n+  \/\/ objects in this array are discovered during HeapShared::archive_objects(). For example,\n+  \/\/ in HeapShared::archive_reachable_objects_from() ->  HeapShared::check_enum_obj().\n+  \/\/ However, HeapShared::archive_objects() happens inside a safepoint, so we can't\n+  \/\/ allocate a \"regular\" ObjArray and pass the result to HeapShared::archive_object().\n+  \/\/ Instead, we have to roll our own alloc\/copy routine here.\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-      15889, \/\/ prime number\n+      36137, \/\/ prime number\n@@ -256,0 +256,7 @@\n+  typedef ResourceHashtable<oop, oop,\n+      36137, \/\/ prime number\n+      ResourceObj::C_HEAP,\n+      mtClassShared,\n+      HeapShared::oop_hash> OriginalObjectTable;\n+  static OriginalObjectTable* _original_object_table;\n+\n@@ -378,1 +385,1 @@\n-  static void create_archived_object_cache() {\n+  static void create_archived_object_cache(bool create_orig_table) {\n@@ -381,0 +388,6 @@\n+    if (create_orig_table) {\n+      _original_object_table =\n+        new (ResourceObj::C_HEAP, mtClass)OriginalObjectTable();\n+    } else {\n+      _original_object_table = NULL;\n+    }\n@@ -385,0 +398,4 @@\n+    if (_original_object_table != NULL) {\n+      delete _original_object_table;\n+      _original_object_table = NULL;\n+    }\n@@ -389,0 +406,9 @@\n+  static oop get_original_object(oop archived_object) {\n+    assert(_original_object_table != NULL, \"sanity\");\n+    oop* r = _original_object_table->get(archived_object);\n+    if (r == NULL) {\n+      return NULL;\n+    } else {\n+      return *r;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}