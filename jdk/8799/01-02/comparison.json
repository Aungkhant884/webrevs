{"files":[{"patch":"@@ -235,1 +235,1 @@\n-        CDSArchiveUtils.insertBytesRandomlyAfterHeader(orgJsaFile, insertBytes, new byte[4096]);\n+        CDSArchiveUtils.insertBytesRandomlyAfterHeader(orgJsaFile, insertBytes);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,3 +431,4 @@\n-    \/\/ dstFile will keep original size so will remove corresponding bytes.length bytes at end of file\n-    public static File insertBytesRandomlyAfterHeader(File orgFile, String newFileName, byte[] bytes) throws Exception {\n-        long offset = fileHeaderSize(orgFile) + getRandomBetween(0L, 4096L);\n+    \/\/ dstFile will keep original size\n+    public static File insertBytesRandomlyAfterHeader(File orgFile, String newFileName) throws Exception {\n+        long headerSize = fileHeaderSize(orgFile);\n+        long dupSize = getRandomBetween(0L, headerSize);\n@@ -438,5 +439,8 @@\n-            transferFrom(inputChannel, outputChannel, 0, offset);\n-            outputChannel.position(offset);\n-            outputChannel.write(ByteBuffer.wrap(bytes));\n-            transferFrom(inputChannel, outputChannel, offset + bytes.length, orgSize - bytes.length);\n-        }\n+            \/\/ Copy the header\n+            transferFrom(inputChannel, outputChannel, 0, headerSize);\n+            \/\/ Copy dupSize bytes from the end of the header. Then, copy the rest\n+            \/\/ of the input such that the new file will have the same size as\n+            \/\/ the old file.\n+            inputChannel.position(headerSize - dupSize);\n+            transferFrom(inputChannel, outputChannel, headerSize, orgSize - headerSize);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}