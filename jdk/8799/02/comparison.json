{"files":[{"patch":"@@ -235,1 +235,1 @@\n-        CDSArchiveUtils.insertBytesRandomlyAfterHeader(orgJsaFile, insertBytes, new byte[4096]);\n+        CDSArchiveUtils.insertBytesRandomlyAfterHeader(orgJsaFile, insertBytes);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,3 +412,23 @@\n-    \/\/ dstFile will keep original size so will remove corresponding bytes.length bytes at end of file\n-    public static File insertBytesRandomlyAfterHeader(File orgFile, String newFileName, byte[] bytes) throws Exception {\n-        long offset = fileHeaderSize(orgFile) + getRandomBetween(0L, 4096L);\n+    \/\/ Helper method for calling FileChannel.transferFrom and checking the\n+    \/\/ return value.\n+    private static void transferFrom(FileChannel inputChannel,\n+                                     FileChannel outputChannel,\n+                                     long offset,\n+                                     long length) throws Exception {\n+        long position = offset;\n+        long count = length;\n+        while (count > 0 && inputChannel.position() < inputChannel.size()) {\n+            long n = outputChannel.transferFrom(inputChannel, position, count);\n+            if (n < 0 || n > count) {\n+                throw new RuntimeException(\"Incorrect transfer length n = \" + n\n+                                           + \" (expected 0 <= n <= \" + length + \")\");\n+            }\n+            position += n;\n+            count -= n;\n+        }\n+    }\n+\n+    \/\/ dstFile will keep original size\n+    public static File insertBytesRandomlyAfterHeader(File orgFile, String newFileName) throws Exception {\n+        long headerSize = fileHeaderSize(orgFile);\n+        long dupSize = getRandomBetween(0L, headerSize);\n@@ -419,5 +439,8 @@\n-            outputChannel.transferFrom(inputChannel, 0, offset);\n-            outputChannel.position(offset);\n-            outputChannel.write(ByteBuffer.wrap(bytes));\n-            outputChannel.transferFrom(inputChannel, offset + bytes.length, orgSize - bytes.length);\n-        }\n+            \/\/ Copy the header\n+            transferFrom(inputChannel, outputChannel, 0, headerSize);\n+            \/\/ Copy dupSize bytes from the end of the header. Then, copy the rest\n+            \/\/ of the input such that the new file will have the same size as\n+            \/\/ the old file.\n+            inputChannel.position(headerSize - dupSize);\n+            transferFrom(inputChannel, outputChannel, headerSize, orgSize - headerSize);\n+            }\n@@ -434,1 +457,1 @@\n-            outputChannel.transferFrom(inputChannel, 0, offset);\n+            transferFrom(inputChannel, outputChannel, 0, offset);\n@@ -436,1 +459,1 @@\n-            outputChannel.transferFrom(inputChannel, offset, orgSize - nBytes);\n+            transferFrom(inputChannel, outputChannel, offset, orgSize - nBytes);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"}]}