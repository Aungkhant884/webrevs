{"files":[{"patch":"@@ -707,1 +707,1 @@\n-    if (size > old_size && MemTracker::check_exceeds_limit(size - old_size, memflags)) {\n+    if ((size > old_size) && MemTracker::check_exceeds_limit(size - old_size, memflags)) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,12 @@\n+static const char* const MODE_OOM = \"oom\";\n+static const char* const MODE_FATAL = \"fatal\";\n+\n+static const char* mode_to_name(MallocLimitMode m) {\n+  switch (m) {\n+  case MallocLimitMode::trigger_fatal: return MODE_FATAL;\n+  case MallocLimitMode::trigger_oom: return MODE_OOM;\n+  default: ShouldNotReachHere();\n+  };\n+  return nullptr;\n+}\n+\n@@ -58,1 +70,1 @@\n-    if (strncasecmp(_p, \"oom\", 3) == 0) {\n+    if (strncasecmp(_p, MODE_OOM, strlen(MODE_OOM)) == 0) {\n@@ -62,1 +74,1 @@\n-    } else if (strncasecmp(_p, \"fatal\", 5) == 0) {\n+    } else if (strncasecmp(_p, MODE_FATAL, strlen(MODE_FATAL)) == 0) {\n@@ -137,1 +149,1 @@\n-  static const char* flagnames[] = { \"fatal\", \"oom\" };\n+  static const char* flagnames[] = { MODE_FATAL, MODE_OOM };\n@@ -140,1 +152,1 @@\n-              flagnames[(int)_glob.mode]);\n+                 mode_to_name(_glob.mode));\n@@ -145,2 +157,2 @@\n-          NMTUtil::flag_to_enum_name(NMTUtil::index_to_flag(i)),\n-          PROPERFMTARGS(_cat[i].sz), flagnames[(int)_cat[i].mode]);\n+                     NMTUtil::flag_to_enum_name(NMTUtil::index_to_flag(i)),\n+                     PROPERFMTARGS(_cat[i].sz), mode_to_name(_cat[i].mode));\n","filename":"src\/hotspot\/share\/services\/mallocLimit.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"utilities\/vmError.hpp\"\n@@ -86,1 +87,6 @@\n-void MallocMemorySummary::total_limit_reached(size_t s, size_t so_far, const malloclimit* limit) {\n+bool MallocMemorySummary::total_limit_reached(size_t s, size_t so_far, const malloclimit* limit) {\n+\n+  \/\/ Ignore the limit break during error reporting to prevent secondary errors.\n+  if (VMError::is_error_reported()) {\n+    return false;\n+  }\n@@ -97,1 +103,0 @@\n-\n@@ -99,0 +104,2 @@\n+\n+  return true;\n@@ -101,1 +108,6 @@\n-void MallocMemorySummary::category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit) {\n+bool MallocMemorySummary::category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit) {\n+\n+  \/\/ Ignore the limit break during error reporting to prevent secondary errors.\n+  if (VMError::is_error_reported()) {\n+    return false;\n+  }\n@@ -112,1 +124,0 @@\n-\n@@ -114,0 +125,2 @@\n+\n+  return true;\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -214,2 +214,7 @@\n-  static void total_limit_reached(size_t s, size_t so_far, const malloclimit* limit);\n-  static void category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit);\n+  \/\/ Called when a total limit break was detected.\n+  \/\/ Will return true if the limit was handled, false if it was ignored.\n+  static bool total_limit_reached(size_t s, size_t so_far, const malloclimit* limit);\n+\n+  \/\/ Called when a total limit break was detected.\n+  \/\/ Will return true if the limit was handled, false if it was ignored.\n+  static bool category_limit_reached(MEMFLAGS f, size_t s, size_t so_far, const malloclimit* limit);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,7 +33,0 @@\n-#include \"utilities\/vmError.hpp\"\n-\n-static inline bool suppress_limit_handling() {\n-  \/\/ We suppress limit reporting once error handling started to not\n-  \/\/ disturb error reporting.\n-  return VMError::is_error_reported();\n-}\n@@ -56,4 +49,1 @@\n-        if (!suppress_limit_handling()) {\n-          total_limit_reached(s, so_far, l);\n-          return true;\n-        }\n+        return total_limit_reached(s, so_far, l);\n@@ -68,4 +58,1 @@\n-          if (!suppress_limit_handling()) {\n-            category_limit_reached(f, s, so_far, l);\n-            return true;\n-          }\n+          return category_limit_reached(f, s, so_far, l);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.inline.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"}]}