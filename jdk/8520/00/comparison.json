{"files":[{"patch":"@@ -1849,2 +1849,1 @@\n-                Object[] source =\n-                    {useDefaultPBEAlgorithm ? \"PBE\" : secKey.getAlgorithm()};\n+                Object[] source = { \"PBE\" };\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286069\n+ * @summary keytool prints out wrong key algorithm for -importpass command\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.security.DerUtils;\n+import sun.security.util.KnownOIDs;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class ImportPassKeyAlg {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Default or \"PBE\" uses default algorithms defined in java.security\n+        importpass(\"def\", null, KnownOIDs.PBES2,\n+                KnownOIDs.HmacSHA256, KnownOIDs.AES_256$CBC$NoPadding);\n+        importpass(\"pbe\", \"PBE\", KnownOIDs.PBES2,\n+                KnownOIDs.HmacSHA256, KnownOIDs.AES_256$CBC$NoPadding);\n+        \/\/ You can use other algorithms as well\n+        importpass(\"pbes2\", \"PBEWithHmacSHA1AndAES_128\",\n+                KnownOIDs.PBES2, KnownOIDs.HmacSHA1, KnownOIDs.AES_128$CBC$NoPadding);\n+        importpass(\"des\", \"PBEwithMD5andDES\", KnownOIDs.PBEWithMD5AndDES);\n+        importpass(\"3des\", \"PBEWithSHA1AndDESede\", KnownOIDs.PBEWithSHA1AndDESede);\n+    }\n+\n+    \/**\n+     * Run `keytool -importpass`.\n+     *\n+     * @param name keystore name\n+     * @param algorithm -keyalg option value, null if not provided\n+     * @param oids expected OIDs inside keystore, if PBES2, plus prf and enc OIDs\n+     * @throws Exception\n+     *\/\n+    static void importpass(String name, String algorithm, KnownOIDs... oids) throws Exception {\n+\n+        Files.deleteIfExists(Path.of(name));\n+\n+        var cmd = \"-keystore \" + name + \" -storepass changeit -importpass -v -alias a\";\n+        if (algorithm != null) {\n+            cmd += \" -keyalg \" + algorithm;\n+        }\n+\n+        SecurityTools.setResponse(\"changeit\\nchangeit\\n\");\n+        SecurityTools.keytool(cmd)\n+                .shouldHaveExitValue(0)\n+                .shouldContain(\"Generated PBE secret key\");\n+\n+        \/\/ The aid of a protected entry (at 110c010c01010c0 inside p12) is:\n+        \/\/\n+        \/\/ 0000:002A  [] SEQUENCE\n+        \/\/ 0002:000C  [0]     OID 1.2.840.113549.1.12.1.3 (PBEWithSHA1AndDESede)\n+        \/\/ 000E:001C  [1]     SEQUENCE\n+        \/\/ 0010:0016  [10]         OCTET STRING\n+        \/\/ 0026:0004  [11]         INTEGER 10000\n+        \/\/\n+        \/\/ or\n+        \/\/\n+        \/\/ 0000:0068  [] SEQUENCE\n+        \/\/ 0002:000B  [0]     OID 1.2.840.113549.1.5.13 (PBES2)\n+        \/\/ 000D:005B  [1]     SEQUENCE\n+        \/\/ 000F:003A  [10]         SEQUENCE\n+        \/\/ 0011:000B  [100]             OID 1.2.840.113549.1.5.12 (PBKDF2WithHmacSHA1)\n+        \/\/ 001C:002D  [101]             SEQUENCE\n+        \/\/ 001E:0016  [1010]                 OCTET STRING\n+        \/\/ 0034:0004  [1011]                 INTEGER 10000\n+        \/\/ 0038:0003  [1012]                 INTEGER 16\n+        \/\/ 003B:000E  [1013]                 SEQUENCE\n+        \/\/ 003D:000A  [10130]                     OID 1.2.840.113549.2.7 (HmacSHA1)\n+        \/\/ 0047:0002  [10131]                     NULL\n+        \/\/ 0049:001F  [11]         SEQUENCE\n+        \/\/ 004B:000B  [110]             OID 2.16.840.1.101.3.4.1.2 (AES_128\/CBC\/NoPadding)\n+        \/\/ 0056:0012  [111]             OCTET STRING\n+        var data = Files.readAllBytes(Path.of(name));\n+        DerUtils.checkAlg(data, \"110c010c01010c00\", oids[0]);\n+        if (oids[0] == KnownOIDs.PBES2) {\n+            DerUtils.checkAlg(data, \"110c010c01010c010130\", oids[1]);\n+            DerUtils.checkAlg(data, \"110c010c01010c0110\", oids[2]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ImportPassKeyAlg.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}