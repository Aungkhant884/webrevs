{"files":[{"patch":"@@ -31,1 +31,0 @@\n-java\/lang\/Thread\/virtual\/HoldsLock.java 8305919 generic-all\n","filename":"test\/jdk\/ProblemList-Xcomp.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8284161 8286788\n+ * @summary Test that a carrier thread waits on a virtual thread\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @run junit CarrierThreadWaits\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.continuations & vm.debug\n+ * @modules java.base\/java.lang:+open\n+ * @run junit\/othervm -XX:+UseHeavyMonitors CarrierThreadWaits\n+ *\/\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CarrierThreadWaits {\n+\n+    @Test\n+    void testCarrierThreadWaiting() throws Exception {\n+        try (ForkJoinPool pool = new ForkJoinPool(1)) {\n+            var carrierRef = new AtomicReference<Thread>();\n+            Executor scheduler = task -> {\n+                pool.submit(() -> {\n+                    carrierRef.set(Thread.currentThread());\n+                    task.run();\n+                });\n+            };\n+\n+            \/\/ start a virtual thread that spins and remains mounted until \"done\"\n+            var latch = new CountDownLatch(1);\n+            var done = new AtomicBoolean();\n+            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n+            Thread vthread = builder.start(() -> {\n+                latch.countDown();\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+\n+            \/\/ wait for virtual thread to execute\n+            latch.await();\n+\n+            try {\n+                long carrierId = carrierRef.get().threadId();\n+                long vthreadId = vthread.threadId();\n+\n+                \/\/ carrier thread should be on WAITING on virtual thread\n+                ThreadInfo ti = ManagementFactory.getThreadMXBean().getThreadInfo(carrierId);\n+                assertTrue(ti.getThreadState() == Thread.State.WAITING);\n+                assertEquals(vthread.getClass().getName(), ti.getLockInfo().getClassName());\n+                assertTrue(ti.getLockInfo().getIdentityHashCode() == System.identityHashCode(vthread));\n+                assertTrue(ti.getLockOwnerId() == vthreadId);\n+\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CarrierThreadWaits.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test Thread.holdsLock when lock held by carrier thread\n- * @requires vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @run junit HoldsLock\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test Thread.holdsLock when lock held by carrier thread\n- * @requires vm.continuations & vm.debug\n- * @modules java.base\/java.lang:+open\n- * @run junit\/othervm -XX:+UseHeavyMonitors HoldsLock\n- *\/\n-\n-import java.lang.management.LockInfo;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.ThreadInfo;\n-import java.lang.management.ThreadMXBean;\n-import java.util.Arrays;\n-import java.util.concurrent.ArrayBlockingQueue;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.Disabled;\n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.junit.jupiter.api.Assumptions.*;\n-\n-class HoldsLock {\n-    static final Object LOCK1 = new Object();\n-    static final Object LOCK2 = new Object();\n-\n-    @Disabled(\"JDK-8281642\")\n-    @Test\n-    void testHoldsLock() throws Exception {\n-        var q = new ArrayBlockingQueue<Runnable>(5);\n-\n-        Thread carrier = Thread.ofPlatform().start(() -> {\n-            synchronized (LOCK1) {\n-                eventLoop(q);\n-            }\n-        });\n-\n-        var ex = new AtomicReference<Throwable>();\n-        Thread vthread = spawnVirtual(ex, executor(q), () -> {\n-            assertTrue(Thread.currentThread().isVirtual());\n-            assertFalse(carrier.isVirtual());\n-\n-            synchronized (LOCK2) {\n-                assertTrue(Thread.holdsLock(LOCK2)); \/\/ virtual thread holds lock2\n-                assertFalse(Thread.holdsLock(LOCK1)); \/\/ carrier thread holds lock1\n-            }\n-        });\n-\n-        join(vthread, ex);\n-        stop(carrier);\n-    }\n-\n-    @Test\n-    void testThreadInfo() throws Exception {\n-        assumeFalse(Thread.currentThread().isVirtual(), \"Main thread must be platform thread\");\n-\n-        var q = new ArrayBlockingQueue<Runnable>(5);\n-\n-        Thread carrier = spawnCarrier(q);\n-        Thread vthread = spawnVirtual(executor(q), () -> {\n-            synchronized (LOCK1) {\n-                try {\n-                    LOCK1.wait();\n-                } catch (InterruptedException e) {}\n-            }\n-        });\n-\n-        while (vthread.getState() != Thread.State.WAITING) {\n-            Thread.sleep(10);\n-        }\n-        System.out.format(\"%s is waiting on %s%n\", vthread, LOCK1);\n-        long vthreadId = vthread.getId();\n-        long carrierId = carrier.getId();\n-\n-        System.out.format(\"\\t\\t%s%n\", LOCK1);\n-        String lockAsString = LOCK1.toString();\n-\n-        ThreadMXBean bean = ManagementFactory.getThreadMXBean();\n-        long[] tids = bean.getAllThreadIds();\n-        boolean foundCarrier = false;\n-        for (long tid : tids) {\n-            ThreadInfo info = bean.getThreadInfo(tid);\n-            System.out.println(info); \/\/ System.out.format(\"%d\\t%s%n\", tid, info.getThreadName());\n-\n-            LockInfo lock = info.getLockInfo();\n-            if (lock != null && lockAsString.equals(lock.toString())) {\n-                assert false; \/\/ should never get here\n-                assert tid == vthreadId : \"Actual waiter is: \" + info.getThreadName()\n-                        + \" vthread: \" + vthread + \" carrier: \" + carrier;\n-            }\n-\n-            if (tid == carrierId) {\n-                \/\/ Carrier is WAITING on vthread\n-                assertTrue(info.getThreadState() == Thread.State.WAITING);\n-                assertEquals(vthread.getClass().getName(), info.getLockInfo().getClassName());\n-                assertTrue(info.getLockInfo().getIdentityHashCode() == System.identityHashCode(vthread));\n-                assertTrue(info.getLockOwnerId() == vthreadId);\n-                foundCarrier = true;\n-            }\n-        }\n-        assertTrue(foundCarrier);\n-\n-        stop(vthread);\n-        stop(carrier);\n-    }\n-\n-    static Thread spawnCarrier(BlockingQueue<Runnable> q) {\n-        return Thread.ofPlatform().start(() -> { eventLoop(q); });\n-    }\n-\n-    static Executor executor(BlockingQueue<Runnable> q) {\n-        return r -> {\n-            if (!q.offer(r)) throw new RejectedExecutionException();\n-        };\n-    }\n-\n-    static void eventLoop(BlockingQueue<Runnable> q) {\n-        try {\n-            while (!Thread.interrupted())\n-                q.take().run();\n-        } catch (InterruptedException e) {}\n-    }\n-\n-    static Thread spawnVirtual(Executor scheduler, Runnable task) {\n-        var t = newThread(scheduler, task);\n-        t.start();\n-        return t;\n-    }\n-\n-    static Thread spawnVirtual(AtomicReference<Throwable> ex, Executor scheduler, Runnable task) {\n-       var t = newThread(scheduler, () -> {\n-            try {\n-                task.run();\n-            } catch (Throwable x) {\n-                ex.set(x);\n-            }\n-        });\n-        t.start();\n-        return t;\n-    }\n-\n-    static void stop(Thread t) throws InterruptedException {\n-        t.interrupt();\n-        t.join();\n-    }\n-\n-    static void join(Thread t, AtomicReference<Throwable> ex) throws Exception {\n-        t.join();\n-        var ex0 = ex.get();\n-        if (ex0 != null)\n-            throw new ExecutionException(\"Thread \" + t + \" threw an uncaught exception.\", ex0);\n-    }\n-\n-    static Thread newThread(Executor scheduler, Runnable task) {\n-        ThreadFactory factory = ThreadBuilders.virtualThreadBuilder(scheduler).factory();\n-        return factory.newThread(task);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/HoldsLock.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -1805,1 +1805,1 @@\n-     * Test Thread.holdLock when lock not held.\n+     * Test Thread.holdsLock when lock not held.\n@@ -1816,1 +1816,1 @@\n-     * Test Thread.holdLock when lock held.\n+     * Test Thread.holdsLock when lock held.\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}