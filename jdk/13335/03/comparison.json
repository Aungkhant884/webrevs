{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,1 +286,6 @@\n-        java.desktop;\n+        java.desktop,\n+        java.prefs,\n+        java.security.jgss,\n+        java.smartcardio,\n+        jdk.charsets,\n+        jdk.net;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+    permission java.lang.RuntimePermission\n+                   \"accessClassInPackage.jdk.internal.util\";\n@@ -121,0 +123,2 @@\n+    permission java.lang.RuntimePermission\n+                   \"accessClassInPackage.jdk.internal.util\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.util.OperatingSystem;\n+\n@@ -295,9 +297,5 @@\n-        String osName = System.getProperty(\"os.name\");\n-        String platformFactory;\n-        if (osName.startsWith(\"Windows\")) {\n-            platformFactory = \"java.util.prefs.WindowsPreferencesFactory\";\n-        } else if (osName.contains(\"OS X\")) {\n-            platformFactory = \"java.util.prefs.MacOSXPreferencesFactory\";\n-        } else {\n-            platformFactory = \"java.util.prefs.FileSystemPreferencesFactory\";\n-        }\n+        String platformFactory = switch (OperatingSystem.current()) {\n+            case WINDOWS -> \"java.util.prefs.WindowsPreferencesFactory\";\n+            case MACOS -> \"java.util.prefs.MacOSXPreferencesFactory\";\n+            default -> \"java.util.prefs.FileSystemPreferencesFactory\";\n+        };\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/Preferences.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+\n+import jdk.internal.util.OperatingSystem;\n+import jdk.internal.util.StaticProperty;\n@@ -90,6 +93,5 @@\n-                            String osname = System.getProperty(\"os.name\");\n-                            if (osname.startsWith(\"Linux\")) {\n-                                gssLibs = new String[]{\n-                                    \"libgssapi.so\",\n-                                    \"libgssapi_krb5.so\",\n-                                    \"libgssapi_krb5.so.2\",\n+                            gssLibs = switch (OperatingSystem.current()) {\n+                                case LINUX -> new String[]{\n+                                        \"libgssapi.so\",\n+                                        \"libgssapi_krb5.so\",\n+                                        \"libgssapi_krb5.so.2\",\n@@ -97,12 +99,10 @@\n-                            } else if (osname.contains(\"OS X\")) {\n-                                gssLibs = new String[]{\n-                                    \"libgssapi_krb5.dylib\",\n-                                    \"\/usr\/lib\/sasl2\/libgssapiv2.2.so\",\n-                               };\n-                            } else if (osname.contains(\"Windows\")) {\n-                                \/\/ Full path needed, DLL is in jre\/bin\n-                                gssLibs = new String[]{ System.getProperty(\"java.home\")\n-                                        + \"\\\\bin\\\\sspi_bridge.dll\" };\n-                            } else {\n-                                gssLibs = new String[0];\n-                            }\n+                                case MACOS -> new String[]{\n+                                        \"libgssapi_krb5.dylib\",\n+                                        \"\/usr\/lib\/sasl2\/libgssapiv2.2.so\",\n+                                };\n+                                case WINDOWS -> new String[]{\n+                                        \/\/ Full path needed, DLL is in jre\/bin\n+                                        StaticProperty.javaHome() + \"\\\\bin\\\\sspi_bridge.dll\",\n+                                };\n+                                default -> new String[0];\n+                            };\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/SunNativeProvider.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -162,2 +163,1 @@\n-        String osname = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-        if (!osname.contains(\"OS X\")) {\n+        if (!OperatingSystem.isMacOS()) {\n@@ -895,2 +895,1 @@\n-        String osname = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-        if (osname.startsWith(\"Windows\")) {\n+        if (OperatingSystem.isWindows()) {\n@@ -929,1 +928,1 @@\n-        } else if (osname.contains(\"OS X\")) {\n+        } else if (OperatingSystem.isMacOS()) {\n@@ -1196,2 +1195,1 @@\n-                    String osname = System.getProperty(\"os.name\");\n-                    if (osname.startsWith(\"Windows\")) {\n+                    if (OperatingSystem.isWindows()) {\n@@ -1244,2 +1242,1 @@\n-                    String osname = System.getProperty(\"os.name\");\n-                    if (osname.startsWith(\"Windows\")) {\n+                    if (OperatingSystem.isWindows()) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import sun.security.action.GetPropertyAction;\n+import jdk.internal.util.OperatingSystem;\n@@ -42,1 +42,0 @@\n-import java.util.Locale;\n@@ -330,3 +329,2 @@\n-            String os = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-            if (os.toUpperCase(Locale.ENGLISH).startsWith(\"WINDOWS\") ||\n-                    os.toUpperCase(Locale.ENGLISH).contains(\"OS X\")) {\n+            if (OperatingSystem.isWindows() ||\n+                    OperatingSystem.isMacOS()) {\n@@ -533,1 +531,1 @@\n-                                if (System.getProperty(\"os.name\").contains(\"OS X\")) {\n+                                if (OperatingSystem.isMacOS()) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Credentials.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.util.OperatingSystem;\n+\n@@ -50,2 +52,1 @@\n-                    String osname = System.getProperty(\"os.name\");\n-                    if (osname.contains(\"OS X\")) {\n+                    if (OperatingSystem.isMacOS()) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/SCDynamicStoreConfig.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -468,3 +469,0 @@\n-        \/\/ get cache name from system.property\n-        String osname = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-\n@@ -482,1 +480,1 @@\n-        if (osname != null && !osname.startsWith(\"Windows\")) {\n+        if (!OperatingSystem.isWindows()) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ccache\/FileCredentialsCache.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import java.nio.ByteBuffer;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+import jdk.internal.util.OperatingSystem;\n+\n@@ -65,10 +64,0 @@\n-    \/\/ used for platform specific logic\n-    private static final boolean isWindows;\n-\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        final String osName = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"os.name\"));\n-        isWindows = osName.startsWith(\"Windows\");\n-    }\n-\n@@ -91,1 +80,1 @@\n-            connectProtocol = isWindows ? 0 : SCARD_PROTOCOL_RAW;\n+            connectProtocol = OperatingSystem.isWindows() ? 0 : SCARD_PROTOCOL_RAW;\n","filename":"src\/java.smartcardio\/share\/classes\/sun\/security\/smartcardio\/CardImpl.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -43,0 +41,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -96,3 +95,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private static final String osName = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"os.name\"));\n@@ -229,1 +225,1 @@\n-            if (osName.startsWith(\"Windows\"))\n+            if (OperatingSystem.isWindows())\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/JISAutoDetect.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -39,0 +37,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -403,16 +402,6 @@\n-            @SuppressWarnings(\"removal\")\n-            String osname = AccessController.doPrivileged(\n-                    new PrivilegedAction<String>() {\n-                        public String run() {\n-                            return System.getProperty(\"os.name\");\n-                        }\n-                    });\n-            if (\"Linux\".equals(osname)) {\n-                return newInstance(\"jdk.net.LinuxSocketOptions\");\n-            } else if (osname.startsWith(\"Mac\")) {\n-                return newInstance(\"jdk.net.MacOSXSocketOptions\");\n-            } else if (osname.startsWith(\"Windows\")) {\n-                return newInstance(\"jdk.net.WindowsSocketOptions\");\n-            } else {\n-                return new PlatformSocketOptions();\n-            }\n+            return switch (OperatingSystem.current()) {\n+                case LINUX -> newInstance(\"jdk.net.LinuxSocketOptions\");\n+                case MACOS -> newInstance(\"jdk.net.MacOSXSocketOptions\");\n+                case WINDOWS -> newInstance(\"jdk.net.WindowsSocketOptions\");\n+                default -> new PlatformSocketOptions();\n+            };\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/ExtendedSocketOptions.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,4 +44,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final String osName = AccessController.doPrivileged(\n-        (PrivilegedAction<String>) () -> System.getProperty(\"os.name\"));\n-\n@@ -353,1 +349,0 @@\n-\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNet.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}