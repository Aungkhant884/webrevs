{"files":[{"patch":"@@ -1893,0 +1893,6 @@\n+      \/\/ If the catch type is Throwable pre-resolve it now as the assignable check won't\n+      \/\/ do that, and we need to avoid a runtime resolution in case we are trying to\n+      \/\/ catch OutOfMemoryError.\n+      if (cp->klass_name_at(catch_type_index) == vmSymbols::java_lang_Throwable()) {\n+        cp->klass_at(catch_type_index, CHECK);\n+      }\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,0 +229,6 @@\n+  bool do_logging = log_is_enabled(Info, exceptions);\n+  if (do_logging) {\n+    ResourceMark rm(THREAD);\n+    log_info(exceptions)(\"Looking for catch handler for exception of type \\\"%s\\\" in method \\\"%s\\\"\",\n+                          ex_klass->external_name(), mh()->name()->as_C_string());\n+  }\n@@ -241,0 +247,3 @@\n+    log_info(exceptions)(\"  - checking exception table entry for BCI %d to %d\",\n+                         beg_bci, end_bci);\n+\n@@ -243,0 +252,2 @@\n+      log_info(exceptions)(\"    - entry covers throw point BCI %d\", throw_bci);\n+\n@@ -246,0 +257,1 @@\n+        log_info(exceptions)(\"    - found catch-all handler at BCI: %d\", handler_bci);\n@@ -250,0 +262,5 @@\n+        if (do_logging) {\n+          ResourceMark rm(THREAD);\n+          log_info(exceptions)(\"     - resolving catch type \\\"%s\\\"\",\n+                               pool->klass_name_at(klass_index)->as_C_string());\n+        }\n@@ -253,1 +270,9 @@\n-        Klass* k = pool->klass_at(klass_index, CHECK_(handler_bci));\n+        Klass* k = pool->klass_at(klass_index, THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          if (do_logging) {\n+            ResourceMark rm(THREAD);\n+            log_info(exceptions)(\"    - exception \\\"%s\\\" occurred resolving catch type\",\n+                                 PENDING_EXCEPTION->klass()->external_name());\n+          }\n+          return handler_bci;\n+        }\n@@ -256,0 +281,1 @@\n+          log_info(exceptions)(\"    - found matching handler at BCI: %d\", handler_bci);\n@@ -262,0 +288,6 @@\n+  if (do_logging) {\n+    ResourceMark rm(THREAD);\n+    log_info(exceptions)(\"No catch handler found for exception of type \\\"%s\\\" in method \\\"%s\\\"\",\n+                          ex_klass->external_name(), mh()->name()->as_C_string());\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267118\n+ * @summary Test catching Throwable doesn't trigger OOME\n+ * @library \/test\/lib\n+ * @run driver TestCatchThrowableOOM\n+ *\/\n+\n+import java.util.HashMap;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestCatchThrowableOOM {\n+\n+    private static String[] expected = new String[] {\n+        \"Test starting ...\",\n+        \"Test complete\",\n+        \"Exception <a 'java\/lang\/OutOfMemoryError'\", \/\/ from logging\n+    };\n+\n+    public static void main(String[] args) throws Throwable {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xmx64m\",\n+                                                                  \"-Xlog:exceptions=trace\",\n+\n+                                                                  \"TestCatchThrowableOOM$OOM\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        for (String msg : expected) {\n+            output.shouldContain(msg);\n+        }\n+    }\n+\n+    static class OOM {\n+        private static HashMap<Object, Object> store = new HashMap<>();\n+        public static void main(String[] args) {\n+            System.out.println(expected[0]);\n+            try {\n+                \/\/ Keep adding entries until we throw OOME\n+                while (true) {\n+                    Object o = new Byte[100 * 1024];\n+                    store.put(o, o);\n+                }\n+            } catch (Throwable oome) {\n+                store = null;\n+                System.gc(); \/\/ Just for good measure\n+                System.out.println(expected[1]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Throwable\/TestCatchThrowableOOM.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}