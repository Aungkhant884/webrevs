{"files":[{"patch":"@@ -78,11 +78,3 @@\n-    private static final class Deallocator implements Runnable {\n-        private final long address;\n-        private final long size;\n-        private final int capacity;\n-        private volatile boolean deallocated;\n-\n-        private Deallocator(long address, long size, int capacity) {\n-            assert (address != 0);\n-            this.address = address;\n-            this.size = size;\n-            this.capacity = capacity;\n+    private record Deallocator(long address, long size, int capacity) implements Runnable {\n+        private Deallocator {\n+            assert address != 0;\n@@ -92,5 +84,0 @@\n-            if (address == 0 || deallocated) {\n-                \/\/ Paranoia\n-                return;\n-            }\n-            deallocated = true;\n@@ -100,1 +87,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -121,30 +121,25 @@\n-                : new BufferUnmapperProxy();\n-    }\n-\n-    private final class BufferUnmapperProxy implements UnmapperProxy {\n-        \/\/ Ensure safe publication as MappedByteBuffer.this.address is not final\n-        private final long addr;\n-\n-        BufferUnmapperProxy() {\n-            this.addr = address;\n-        }\n-\n-        @Override\n-        public long address() {\n-            return addr;\n-        }\n-\n-        @Override\n-        public FileDescriptor fileDescriptor() {\n-            return fd;\n-        }\n-\n-        @Override\n-        public boolean isSync() {\n-            return isSync;\n-        }\n-\n-        @Override\n-        public void unmap() {\n-            Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n-        }\n+                : new UnmapperProxy() {\n+\n+            \/\/ Ensure safe publication as MappedByteBuffer.this.address is not final\n+            private final long addr = address;\n+\n+            @Override\n+            public long address() {\n+                return addr;\n+            }\n+\n+            @Override\n+            public FileDescriptor fileDescriptor() {\n+                return fd;\n+            }\n+\n+            @Override\n+            public boolean isSync() {\n+                return isSync;\n+            }\n+\n+            @Override\n+            public void unmap() {\n+                Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n+            }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":25,"deletions":30,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1165,1 +1165,0 @@\n-        private volatile boolean unmapped;\n@@ -1198,3 +1197,0 @@\n-            if (address == 0 || unmapped)\n-                return;\n-            unmapped = true;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}