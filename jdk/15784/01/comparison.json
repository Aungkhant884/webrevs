{"files":[{"patch":"@@ -78,1 +78,1 @@\n-    private static class Deallocator\n+    private static final class Deallocator\n@@ -82,3 +82,4 @@\n-        private long address;\n-        private long size;\n-        private int capacity;\n+        private final long address;\n+        private final long size;\n+        private final int capacity;\n+        private volatile boolean completed;\n@@ -94,1 +95,1 @@\n-            if (address == 0) {\n+            if (address == 0 || completed) {\n@@ -98,0 +99,1 @@\n+            completed = true;\n@@ -99,1 +101,0 @@\n-            address = 0;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -119,22 +119,33 @@\n-        return fd != null ?\n-                new UnmapperProxy() {\n-                    @Override\n-                    public long address() {\n-                        return address;\n-                    }\n-\n-                    @Override\n-                    public FileDescriptor fileDescriptor() {\n-                        return fd;\n-                    }\n-\n-                    @Override\n-                    public boolean isSync() {\n-                        return isSync;\n-                    }\n-\n-                    @Override\n-                    public void unmap() {\n-                        Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n-                    }\n-                } : null;\n+        return fd == null\n+                ? null\n+                : new BufferUnmapperProxy();\n+    }\n+\n+    private final class BufferUnmapperProxy implements UnmapperProxy {\n+\n+        \/\/ Ensure safe publication as MappedByteBuffer.this.address is not final\n+        private final long addr;\n+\n+        BufferUnmapperProxy() {\n+            this.addr = address;\n+        }\n+\n+        @Override\n+        public long address() {\n+            return addr;\n+        }\n+\n+        @Override\n+        public FileDescriptor fileDescriptor() {\n+            return fd;\n+        }\n+\n+        @Override\n+        public boolean isSync() {\n+            return isSync;\n+        }\n+\n+        @Override\n+        public void unmap() {\n+            Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":33,"deletions":22,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1157,1 +1157,1 @@\n-    private abstract static class Unmapper\n+    private sealed abstract static class Unmapper\n@@ -1160,1 +1160,1 @@\n-        private volatile long address;\n+        private final long address;\n@@ -1165,0 +1165,1 @@\n+        private volatile boolean completed;\n@@ -1197,1 +1198,1 @@\n-            if (address == 0)\n+            if (address == 0 || completed)\n@@ -1199,0 +1200,1 @@\n+            completed = true;\n@@ -1200,1 +1202,0 @@\n-            address = 0;\n@@ -1217,1 +1218,1 @@\n-    private static class DefaultUnmapper extends Unmapper {\n+    private static final class DefaultUnmapper extends Unmapper {\n@@ -1250,1 +1251,1 @@\n-    private static class SyncUnmapper extends Unmapper {\n+    private static final class SyncUnmapper extends Unmapper {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}