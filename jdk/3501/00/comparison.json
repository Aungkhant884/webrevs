{"files":[{"patch":"@@ -3221,6 +3221,4 @@\n-        Objects.requireNonNull(delimiter);\n-        Objects.requireNonNull(elements);\n-        \/\/ Number of elements not likely worth Arrays.stream overhead.\n-        StringJoiner joiner = new StringJoiner(delimiter);\n-        for (CharSequence cs: elements) {\n-            joiner.add(cs);\n+        var delim = delimiter.toString();\n+        var elems = new String[elements.length];\n+        for (int i = 0; i < elements.length; i++) {\n+            elems[i] = String.valueOf(elements[i]);\n@@ -3228,1 +3226,41 @@\n-        return joiner.toString();\n+        return join(\"\", \"\", delim, elems, elems.length);\n+    }\n+\n+    \/**\n+     * Designated join routine.\n+     *\n+     * @param prefix the non-null prefix\n+     * @param suffix the non-null suffix\n+     * @param delimiter the non-null delimiter\n+     * @param elements the non-null array of non-null elements\n+     * @param size the number of elements in the array (<= elements.length)\n+     * @return the joined string\n+     *\/\n+    static String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n+        int icoder = prefix.coder() | suffix.coder() | delimiter.coder();\n+        long llen = (long) prefix.length() + suffix.length() + (long) Math.max(0, size - 1) * delimiter.length();\n+        for (int i = 0; i < size; i++) {\n+            var el = elements[i];\n+            llen += el.length();\n+            icoder |= el.coder();\n+        }\n+        byte coder = (byte) icoder;\n+        int len = (int) llen;\n+        if (llen != len) {\n+            throw new OutOfMemoryError(\"Requested string length exceeds VM limit\");\n+        }\n+\n+        byte[] value = StringConcatHelper.newArray(((long) icoder << 32) | llen);\n+        int off = 0;\n+        prefix.getBytes(value, off, coder); off += prefix.length();\n+        for (int i = 0; i < size; i++) {\n+            if (i > 0) {\n+                delimiter.getBytes(value, off, coder); off += delimiter.length();\n+            }\n+            var el = elements[i];\n+            el.getBytes(value, off, coder); off += el.length();\n+        }\n+        suffix.getBytes(value, off, coder); off += suffix.length();\n+        \/\/assert off == value.length >> coder;\n+\n+        return new String(value, coder);\n@@ -3269,1 +3307,3 @@\n-        StringJoiner joiner = new StringJoiner(delimiter);\n+        var delim = delimiter.toString();\n+        var elems = new String[8];\n+        int size = 0;\n@@ -3271,1 +3311,4 @@\n-            joiner.add(cs);\n+            if (size >= elems.length) {\n+                elems = Arrays.copyOf(elems, elems.length << 1);\n+            }\n+            elems[size++] = String.valueOf(cs);\n@@ -3273,1 +3316,1 @@\n-        return joiner.toString();\n+        return join(\"\", \"\", delim, elems, size);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":53,"deletions":10,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2311,0 +2311,4 @@\n+            public String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n+                return String.join(prefix, suffix, delimiter, elements, size);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -66,0 +69,2 @@\n+    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+\n@@ -161,4 +166,0 @@\n-        final String[] elts = this.elts;\n-        if (elts == null && emptyValue != null) {\n-            return emptyValue;\n-        }\n@@ -166,1 +167,1 @@\n-        final int addLen = prefix.length() + suffix.length();\n+        var elts = this.elts;\n@@ -168,2 +169,2 @@\n-            if (addLen == 0) {\n-                return \"\";\n+            if (emptyValue != null) {\n+                return emptyValue;\n@@ -171,1 +172,1 @@\n-            return prefix + suffix;\n+            elts = EMPTY_STRING_ARRAY;\n@@ -173,9 +174,1 @@\n-        final String delimiter = this.delimiter;\n-        StringBuilder sb = new StringBuilder(len + addLen).append(prefix);\n-        if (size > 0) {\n-            sb.append(elts[0]);\n-            for (int i = 1; i < size; i++) {\n-                sb.append(delimiter).append(elts[i]);\n-            }\n-        }\n-        return sb.append(suffix).toString();\n+        return JLA.join(prefix, suffix, delimiter, elts, size);\n@@ -236,1 +229,1 @@\n-        if (other.elts == null) {\n+        if (other.size == 0) {\n@@ -244,7 +237,4 @@\n-        if (size > 1) {\n-            StringBuilder sb = new StringBuilder(len).append(elts[0]);\n-            int i = 1;\n-            do {\n-                sb.append(delimiter).append(elts[i]);\n-                elts[i] = null;\n-            } while (++i < size);\n+        int sz = size;\n+        if (sz > 1) {\n+            elts[0] = JLA.join(\"\", \"\", delimiter, elts, sz);\n+            Arrays.fill(elts, 1, sz, null);\n@@ -252,1 +242,0 @@\n-            elts[0] = sb.toString();\n@@ -270,0 +259,2 @@\n+\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n","filename":"src\/java.base\/share\/classes\/java\/util\/StringJoiner.java","additions":17,"deletions":26,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -370,0 +370,5 @@\n+    \/**\n+     * Join strings\n+     *\/\n+    String join(String prefix, String suffix, String delimiter, String[] elements, int size);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}