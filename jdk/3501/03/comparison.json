{"files":[{"patch":"@@ -46,1 +46,0 @@\n-import java.util.StringJoiner;\n@@ -54,0 +53,2 @@\n+\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -3221,6 +3222,47 @@\n-        Objects.requireNonNull(delimiter);\n-        Objects.requireNonNull(elements);\n-        \/\/ Number of elements not likely worth Arrays.stream overhead.\n-        StringJoiner joiner = new StringJoiner(delimiter);\n-        for (CharSequence cs: elements) {\n-            joiner.add(cs);\n+        var delim = delimiter.toString();\n+        var elems = new String[elements.length];\n+        for (int i = 0; i < elements.length; i++) {\n+            elems[i] = String.valueOf(elements[i]);\n+        }\n+        return join(\"\", \"\", delim, elems, elems.length);\n+    }\n+\n+    \/**\n+     * Designated join routine.\n+     *\n+     * @param prefix the non-null prefix\n+     * @param suffix the non-null suffix\n+     * @param delimiter the non-null delimiter\n+     * @param elements the non-null array of non-null elements\n+     * @param size the number of elements in the array (<= elements.length)\n+     * @return the joined string\n+     *\/\n+    @ForceInline\n+    static String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n+        int icoder = prefix.coder() | suffix.coder() | delimiter.coder();\n+        long len = (long) prefix.length() + suffix.length() + (long) Math.max(0, size - 1) * delimiter.length();\n+        \/\/ assert len > 0L; \/\/ max: (long) Integer.MAX_VALUE << 32\n+        \/\/ following loop wil add max: (long) Integer.MAX_VALUE * Integer.MAX_VALUE to len\n+        \/\/ so len can overflow at most once\n+        for (int i = 0; i < size; i++) {\n+            var el = elements[i];\n+            len += el.length();\n+            icoder |= el.coder();\n+        }\n+        byte coder = (byte) icoder;\n+        \/\/ long len overflow check, char -> byte length, int len overflow check\n+        if (len < 0L || (len <<= coder) != (int) len) {\n+            throw new OutOfMemoryError(\"Requested string length exceeds VM limit\");\n+        }\n+        byte[] value = StringConcatHelper.newArray(len);\n+\n+        int off = 0;\n+        prefix.getBytes(value, off, coder); off += prefix.length();\n+        if (size > 0) {\n+            var el = elements[0];\n+            el.getBytes(value, off, coder); off += el.length();\n+            for (int i = 1; i < size; i++) {\n+                delimiter.getBytes(value, off, coder); off += delimiter.length();\n+                el = elements[i];\n+                el.getBytes(value, off, coder); off += el.length();\n+            }\n@@ -3228,1 +3270,4 @@\n-        return joiner.toString();\n+        suffix.getBytes(value, off, coder);\n+        \/\/ assert off + suffix.length() == value.length >> coder;\n+\n+        return new String(value, coder);\n@@ -3269,1 +3314,3 @@\n-        StringJoiner joiner = new StringJoiner(delimiter);\n+        var delim = delimiter.toString();\n+        var elems = new String[8];\n+        int size = 0;\n@@ -3271,1 +3318,4 @@\n-            joiner.add(cs);\n+            if (size >= elems.length) {\n+                elems = Arrays.copyOf(elems, elems.length << 1);\n+            }\n+            elems[size++] = String.valueOf(cs);\n@@ -3273,1 +3323,1 @@\n-        return joiner.toString();\n+        return join(\"\", \"\", delim, elems, size);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":61,"deletions":11,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2311,0 +2311,4 @@\n+            public String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n+                return String.join(prefix, suffix, delimiter, elements, size);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -66,0 +69,2 @@\n+    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+\n@@ -161,4 +166,0 @@\n-        final String[] elts = this.elts;\n-        if (elts == null && emptyValue != null) {\n-            return emptyValue;\n-        }\n@@ -166,1 +167,1 @@\n-        final int addLen = prefix.length() + suffix.length();\n+        var elts = this.elts;\n@@ -168,2 +169,2 @@\n-            if (addLen == 0) {\n-                return \"\";\n+            if (emptyValue != null) {\n+                return emptyValue;\n@@ -171,1 +172,1 @@\n-            return prefix + suffix;\n+            elts = EMPTY_STRING_ARRAY;\n@@ -173,9 +174,1 @@\n-        final String delimiter = this.delimiter;\n-        StringBuilder sb = new StringBuilder(len + addLen).append(prefix);\n-        if (size > 0) {\n-            sb.append(elts[0]);\n-            for (int i = 1; i < size; i++) {\n-                sb.append(delimiter).append(elts[i]);\n-            }\n-        }\n-        return sb.append(suffix).toString();\n+        return JLA.join(prefix, suffix, delimiter, elts, size);\n@@ -236,1 +229,1 @@\n-        if (other.elts == null) {\n+        if (other.size == 0) {\n@@ -244,7 +237,4 @@\n-        if (size > 1) {\n-            StringBuilder sb = new StringBuilder(len).append(elts[0]);\n-            int i = 1;\n-            do {\n-                sb.append(delimiter).append(elts[i]);\n-                elts[i] = null;\n-            } while (++i < size);\n+        int sz = size;\n+        if (sz > 1) {\n+            elts[0] = JLA.join(\"\", \"\", delimiter, elts, sz);\n+            Arrays.fill(elts, 1, sz, null);\n@@ -252,1 +242,0 @@\n-            elts[0] = sb.toString();\n@@ -270,0 +259,2 @@\n+\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n","filename":"src\/java.base\/share\/classes\/java\/util\/StringJoiner.java","additions":17,"deletions":26,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -370,0 +370,5 @@\n+    \/**\n+     * Join strings\n+     *\/\n+    String join(String prefix, String suffix, String delimiter, String[] elements, int size);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8265237\n+ * @summary tests StringJoiner OOME when joining sub-max-length Strings\n+ * @modules java.base\/jdk.internal.util\n+ * @requires vm.bits == \"64\" & os.maxMemory > 4G\n+ * @run testng\/othervm -Xmx4g -XX:+CompactStrings StringJoinerOomUtf16Test\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static jdk.internal.util.ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n+import static org.testng.Assert.fail;\n+\n+import java.util.StringJoiner;\n+\n+\n+@Test(groups = {\"unit\",\"string\",\"util\",\"libs\"})\n+public class StringJoinerOomUtf16Test {\n+\n+    \/\/ the sum of lengths of the following two strings is way less than\n+    \/\/ SOFT_MAX_ARRAY_LENGTH, but the byte[] array holding the UTF16 representation\n+    \/\/ would need to be bigger than Integer.MAX_VALUE...\n+    private static final String HALF_MAX_LATIN1_STRING =\n+        \"*\".repeat(SOFT_MAX_ARRAY_LENGTH >> 1);\n+    private static final String OVERFLOW_UTF16_STRING =\n+        \"\\u017D\".repeat(((Integer.MAX_VALUE - SOFT_MAX_ARRAY_LENGTH) >> 1) + 1);\n+\n+    public void OOM1() {\n+        try {\n+            new StringJoiner(\"\")\n+                .add(HALF_MAX_LATIN1_STRING)\n+                .add(OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM2() {\n+        try {\n+            new StringJoiner(HALF_MAX_LATIN1_STRING)\n+                .add(\"\")\n+                .add(OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM3() {\n+        try {\n+            new StringJoiner(OVERFLOW_UTF16_STRING)\n+                .add(\"\")\n+                .add(HALF_MAX_LATIN1_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM4() {\n+        try {\n+            new StringJoiner(\"\", HALF_MAX_LATIN1_STRING, OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/util\/StringJoiner\/StringJoinerOomUtf16Test.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,1 +46,3 @@\n-@Fork(jvmArgsAppend = {\"-Xms2g\", \"-Xmx2g\"})\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-Xms1g\", \"-Xmx1g\"})\n@@ -47,0 +51,6 @@\n+    @Benchmark\n+    public String join(Data data) {\n+        String[] stringArray = data.stringArray;\n+        return String.join(\",\", stringArray);\n+    }\n+\n@@ -59,1 +69,1 @@\n-        @Param({\"8\", \"32\"})\n+        @Param({\"1\", \"8\", \"32\", \"128\"})\n@@ -62,1 +72,1 @@\n-        @Param({\"5\", \"10\"})\n+        @Param({\"5\", \"20\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/StringJoinerBenchmark.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}