{"files":[{"patch":"@@ -46,1 +46,0 @@\n-import java.util.StringJoiner;\n@@ -54,0 +53,2 @@\n+\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -3239,0 +3240,1 @@\n+    @ForceInline\n@@ -3241,1 +3243,4 @@\n-        long llen = (long) prefix.length() + suffix.length() + (long) Math.max(0, size - 1) * delimiter.length();\n+        long len = (long) prefix.length() + suffix.length() + (long) Math.max(0, size - 1) * delimiter.length();\n+        \/\/ assert len > 0L; \/\/ max: (long) Integer.MAX_VALUE << 32\n+        \/\/ following loop wil add max: (long) Integer.MAX_VALUE * Integer.MAX_VALUE to len\n+        \/\/ so len can overflow at most once\n@@ -3244,1 +3249,1 @@\n-            llen += el.length();\n+            len += el.length();\n@@ -3248,2 +3253,2 @@\n-        int len = (int) llen;\n-        if (llen != len) {\n+        \/\/ long len overflow check, char -> byte length, int len overflow check\n+        if (len < 0L || (len <<= coder) != (int) len) {\n@@ -3252,0 +3257,1 @@\n+        byte[] value = StringConcatHelper.newArray(len);\n@@ -3253,1 +3259,0 @@\n-        byte[] value = StringConcatHelper.newArray(((long) icoder << 32) | llen);\n@@ -3256,2 +3261,4 @@\n-        for (int i = 0; i < size; i++) {\n-            if (i > 0) {\n+        if (size > 0) {\n+            var el = elements[0];\n+            el.getBytes(value, off, coder); off += el.length();\n+            for (int i = 1; i < size; i++) {\n@@ -3259,0 +3266,2 @@\n+                el = elements[i];\n+                el.getBytes(value, off, coder); off += el.length();\n@@ -3260,2 +3269,0 @@\n-            var el = elements[i];\n-            el.getBytes(value, off, coder); off += el.length();\n@@ -3263,2 +3270,2 @@\n-        suffix.getBytes(value, off, coder); off += suffix.length();\n-        \/\/assert off == value.length >> coder;\n+        suffix.getBytes(value, off, coder);\n+        \/\/ assert off + suffix.length() == value.length >> coder;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8265237\n+ * @summary tests StringJoiner OOME when joining sub-max-length Strings\n+ * @modules java.base\/jdk.internal.util\n+ * @requires vm.bits == \"64\" & os.maxMemory > 4G\n+ * @run testng\/othervm -Xmx4g -XX:+CompactStrings StringJoinerOomUtf16Test\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static jdk.internal.util.ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n+import static org.testng.Assert.fail;\n+\n+import java.util.StringJoiner;\n+\n+\n+@Test(groups = {\"unit\",\"string\",\"util\",\"libs\"})\n+public class StringJoinerOomUtf16Test {\n+\n+    \/\/ the sum of lengths of the following two strings is way less than\n+    \/\/ SOFT_MAX_ARRAY_LENGTH, but the byte[] array holding the UTF16 representation\n+    \/\/ would need to be bigger than Integer.MAX_VALUE...\n+    private static final String HALF_MAX_LATIN1_STRING =\n+        \"*\".repeat(SOFT_MAX_ARRAY_LENGTH >> 1);\n+    private static final String OVERFLOW_UTF16_STRING =\n+        \"\\u017D\".repeat(((Integer.MAX_VALUE - SOFT_MAX_ARRAY_LENGTH) >> 1) + 1);\n+\n+    public void OOM1() {\n+        try {\n+            new StringJoiner(\"\")\n+                .add(HALF_MAX_LATIN1_STRING)\n+                .add(OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM2() {\n+        try {\n+            new StringJoiner(HALF_MAX_LATIN1_STRING)\n+                .add(\"\")\n+                .add(OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM3() {\n+        try {\n+            new StringJoiner(OVERFLOW_UTF16_STRING)\n+                .add(\"\")\n+                .add(HALF_MAX_LATIN1_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+\n+    public void OOM4() {\n+        try {\n+            new StringJoiner(\"\", HALF_MAX_LATIN1_STRING, OVERFLOW_UTF16_STRING)\n+                .toString();\n+            fail(\"Should have thrown OutOfMemoryError\");\n+        } catch (OutOfMemoryError ex) {\n+            System.out.println(\"Expected: \" + ex);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/util\/StringJoiner\/StringJoinerOomUtf16Test.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -67,1 +69,1 @@\n-        @Param({\"8\", \"32\", \"128\"})\n+        @Param({\"1\", \"8\", \"32\", \"128\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/StringJoinerBenchmark.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}