{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2067,1 +2067,1 @@\n-template<class T>\n+template<bool CONCURRENT>\n@@ -2070,1 +2070,0 @@\n-  T cl;\n@@ -2073,1 +2072,0 @@\n-  bool _concurrent;\n@@ -2075,1 +2073,1 @@\n-  ShenandoahUpdateHeapRefsTask(ShenandoahRegionIterator* regions, bool concurrent) :\n+  ShenandoahUpdateHeapRefsTask(ShenandoahRegionIterator* regions) :\n@@ -2077,1 +2075,0 @@\n-    cl(T()),\n@@ -2079,2 +2076,1 @@\n-    _regions(regions),\n-    _concurrent(concurrent) {\n+    _regions(regions) {\n@@ -2084,1 +2080,1 @@\n-    if (_concurrent) {\n+    if (CONCURRENT) {\n@@ -2087,1 +2083,1 @@\n-      do_work();\n+      do_work<ShenandoahUpdateRefsConcClosure>();\n@@ -2090,1 +2086,1 @@\n-      do_work();\n+      do_work<ShenandoahUpdateRefsSTWClosure>();\n@@ -2095,0 +2091,1 @@\n+  template<class T>\n@@ -2096,0 +2093,1 @@\n+    T cl;\n@@ -2107,1 +2105,1 @@\n-      if (_heap->check_cancelled_gc_and_yield(_concurrent)) {\n+      if (_heap->check_cancelled_gc_and_yield(CONCURRENT)) {\n@@ -2118,2 +2116,7 @@\n-  ShenandoahUpdateHeapRefsTask<ShenandoahUpdateHeapRefsClosure> task(&_update_refs_iterator, concurrent);\n-  workers()->run_task(&task);\n+  if (concurrent) {\n+    ShenandoahUpdateHeapRefsTask<true> task(&_update_refs_iterator);\n+    workers()->run_task(&task);\n+  } else {\n+    ShenandoahUpdateHeapRefsTask<false> task(&_update_refs_iterator);\n+    workers()->run_task(&task);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -622,1 +622,4 @@\n-  inline void atomic_update_with_forwarded(T* p);\n+  inline void conc_update_with_forwarded(T* p);\n+\n+  template <class T>\n+  inline void update_with_forwarded(T* p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -96,0 +96,9 @@\n+template <class T>\n+inline void ShenandoahHeap::update_with_forwarded(T* p) {\n+  T o = RawAccess<>::oop_load(p);\n+  if (!CompressedOops::is_null(o)) {\n+    oop obj = CompressedOops::decode_not_null(o);\n+    update_with_forwarded_not_null(p, obj);\n+  }\n+}\n+\n@@ -108,1 +117,1 @@\n-inline void ShenandoahHeap::atomic_update_with_forwarded(T* p) {\n+inline void ShenandoahHeap::conc_update_with_forwarded(T* p) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -256,0 +256,2 @@\n+      case CONC_UPDATE:\n+        fatal(\"Concurrent update is not supported for marking\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkCompact.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahUtils.hpp\"\n@@ -36,2 +37,3 @@\n-  NO_UPDATE, \/\/ Skip reference updates\n-  STW_UPDATE \/\/ Update references, assuming STW mode (no concurrent mutator updates)\n+  NO_UPDATE,   \/\/ Skip reference updates\n+  STW_UPDATE,  \/\/ Update references, assuming STW mode (no concurrent mutator updates)\n+  CONC_UPDATE, \/\/ Update references, assuming concurrent mutator updates\n@@ -188,1 +190,1 @@\n-class ShenandoahUpdateHeapRefsClosure : public BasicOopIterateClosure {\n+class ShenandoahUpdateRefsSuperClosure : public BasicOopIterateClosure {\n@@ -192,2 +194,26 @@\n-  template <class T>\n-  void do_oop_work(T* p);\n+protected:\n+  template <class T, UpdateRefsMode UPDATE_MODE>\n+  inline void work(T *p);\n+\n+public:\n+  ShenandoahUpdateRefsSuperClosure() :  _heap(ShenandoahHeap::heap()) {}\n+};\n+\n+class ShenandoahUpdateRefsSTWClosure : public ShenandoahUpdateRefsSuperClosure {\n+private:\n+  template<class T>\n+  inline void do_oop_work(T* p)     { work<T, STW_UPDATE>(p); }\n+\n+public:\n+  ShenandoahUpdateRefsSTWClosure() : ShenandoahUpdateRefsSuperClosure() {\n+    assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must only be used at safepoints\");\n+  }\n+\n+  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n+  virtual void do_oop(oop* p)       { do_oop_work(p); }\n+};\n+\n+class ShenandoahUpdateRefsConcClosure : public ShenandoahUpdateRefsSuperClosure {\n+private:\n+  template<class T>\n+  inline void do_oop_work(T* p)     { work<T, CONC_UPDATE>(p); }\n@@ -196,2 +222,1 @@\n-  ShenandoahUpdateHeapRefsClosure() :\n-    _heap(ShenandoahHeap::heap()) {}\n+  ShenandoahUpdateRefsConcClosure() : ShenandoahUpdateRefsSuperClosure() {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":32,"deletions":7,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -36,3 +36,15 @@\n-template <class T>\n-inline void ShenandoahUpdateHeapRefsClosure::do_oop_work(T* p) {\n-  _heap->atomic_update_with_forwarded(p);\n+template<class T, UpdateRefsMode UPDATE_REFS>\n+inline void ShenandoahUpdateRefsSuperClosure::work(T* p) {\n+  switch (UPDATE_REFS) {\n+    case NO_UPDATE:\n+      fatal(\"Not supported\");\n+      break;\n+    case STW_UPDATE:\n+      _heap->update_with_forwarded(p);\n+      break;\n+    case CONC_UPDATE:\n+      _heap->conc_update_with_forwarded(p);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.hpp\"\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}