{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import java.util.HashMap;\n@@ -299,11 +298,37 @@\n-        return CANONICAL_LAYOUTS;\n-    }\n-\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS;\n-\n-    static {\n-        int wchar_size = LibFallback.wcharSize();\n-        MemoryLayout wchartLayout = switch(wchar_size) {\n-            case 2 -> JAVA_CHAR; \/\/ prefer JAVA_CHAR\n-            default -> FFIType.layoutFor(wchar_size);\n-        };\n+        \/\/ Avoid eager dependency on LibFallback, so we can safely check LibFallback.SUPPORTED\n+        class Holder {\n+            static final Map<String, MemoryLayout> CANONICAL_LAYOUTS;\n+\n+            static {\n+                int wchar_size = LibFallback.wcharSize();\n+                MemoryLayout wchartLayout = switch(wchar_size) {\n+                    case 2 -> JAVA_CHAR; \/\/ prefer JAVA_CHAR\n+                    default -> FFIType.layoutFor(wchar_size);\n+                };\n+\n+                CANONICAL_LAYOUTS = Map.ofEntries(\n+                    \/\/ specified canonical layouts\n+                    Map.entry(\"bool\", JAVA_BOOLEAN),\n+                    Map.entry(\"char\", JAVA_BYTE),\n+                    Map.entry(\"float\", JAVA_FLOAT),\n+                    Map.entry(\"long long\", JAVA_LONG),\n+                    Map.entry(\"double\", JAVA_DOUBLE),\n+                    Map.entry(\"void*\", ADDRESS),\n+                    \/\/ platform-dependent sizes\n+                    Map.entry(\"size_t\", FFIType.SIZE_T),\n+                    Map.entry(\"short\", FFIType.layoutFor(LibFallback.shortSize())),\n+                    Map.entry(\"int\", FFIType.layoutFor(LibFallback.intSize())),\n+                    Map.entry(\"long\", FFIType.layoutFor(LibFallback.longSize())),\n+                    Map.entry(\"wchar_t\", wchartLayout),\n+                    \/\/ JNI types\n+                    Map.entry(\"jboolean\", JAVA_BOOLEAN),\n+                    Map.entry(\"jchar\", JAVA_CHAR),\n+                    Map.entry(\"jbyte\", JAVA_BYTE),\n+                    Map.entry(\"jshort\", JAVA_SHORT),\n+                    Map.entry(\"jint\", JAVA_INT),\n+                    Map.entry(\"jlong\", JAVA_LONG),\n+                    Map.entry(\"jfloat\", JAVA_FLOAT),\n+                    Map.entry(\"jdouble\", JAVA_DOUBLE)\n+                );\n+            }\n+        }\n@@ -311,24 +336,1 @@\n-        CANONICAL_LAYOUTS = Map.ofEntries(\n-                \/\/ specified canonical layouts\n-                Map.entry(\"bool\", JAVA_BOOLEAN),\n-                Map.entry(\"char\", JAVA_BYTE),\n-                Map.entry(\"float\", JAVA_FLOAT),\n-                Map.entry(\"long long\", JAVA_LONG),\n-                Map.entry(\"double\", JAVA_DOUBLE),\n-                Map.entry(\"void*\", ADDRESS),\n-                \/\/ platform-dependent sizes\n-                Map.entry(\"size_t\", FFIType.SIZE_T),\n-                Map.entry(\"short\", FFIType.layoutFor(LibFallback.shortSize())),\n-                Map.entry(\"int\", FFIType.layoutFor(LibFallback.intSize())),\n-                Map.entry(\"long\", FFIType.layoutFor(LibFallback.longSize())),\n-                Map.entry(\"wchar_t\", wchartLayout),\n-                \/\/ JNI types\n-                Map.entry(\"jboolean\", JAVA_BOOLEAN),\n-                Map.entry(\"jchar\", JAVA_CHAR),\n-                Map.entry(\"jbyte\", JAVA_BYTE),\n-                Map.entry(\"jshort\", JAVA_SHORT),\n-                Map.entry(\"jint\", JAVA_INT),\n-                Map.entry(\"jlong\", JAVA_LONG),\n-                Map.entry(\"jfloat\", JAVA_FLOAT),\n-                Map.entry(\"jdouble\", JAVA_DOUBLE)\n-        );\n+        return Holder.CANONICAL_LAYOUTS;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":38,"deletions":36,"binary":false,"changes":74,"status":"modified"}]}