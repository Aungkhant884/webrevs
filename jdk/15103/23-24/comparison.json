{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.ByteOrder;\n@@ -138,2 +137,5 @@\n-     * {@return a new memory segment initialized with the provided {@code byte} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided byte value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -159,2 +161,5 @@\n-     * {@return a new memory segment initialized with the provided {@code char} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided char value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -180,2 +185,5 @@\n-     * {@return a new memory segment initialized with the provided {@code short} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided short value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -201,2 +209,5 @@\n-     * {@return a new memory segment initialized with the provided {@code int} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided int value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -222,2 +233,5 @@\n-     * {@return a new memory segment initialized with the provided {@code float} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided float value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -243,2 +257,5 @@\n-     * {@return a new memory segment initialized with the provided {@code long} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided long value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -264,2 +281,5 @@\n-     * {@return a new memory segment initialized with the provided {@code double} {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the provided double value.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -285,2 +305,1 @@\n-     * {@return a new memory segment initialized with the address of the provided {@code value} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the {@linkplain MemorySegment#address() address} of the provided memory segment.}\n@@ -289,0 +308,4 @@\n+     * <p>\n+     * The size of the allocated memory segment is the {@linkplain MemoryLayout#byteSize() size} of the given layout.\n+     * The given value is written into the segment according to the byte order and alignment constraint of the\n+     * given layout.\n@@ -300,0 +323,1 @@\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain MemorySegment#isNative() native} segment.\n@@ -310,3 +334,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code elementCount*elementLayout.byteSize()} initialized with the contents of the provided {@code source} segment\n-     * as specified by the provided {@code elementLayout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the contents of the provided segment.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elementCount}.\n+     * The contents of the source segment is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -350,3 +376,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code byte} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided byte array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -370,3 +398,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code short} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided short array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -390,3 +420,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code char} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided char array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -410,3 +442,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code int} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided int array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -430,3 +464,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code float} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided float array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -450,3 +486,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code long} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided long array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n@@ -470,3 +508,5 @@\n-     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code double} {@code elements} as\n-     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * {@return a new memory segment initialized with the elements in the provided double array.}\n+     * <p>\n+     * The size of the allocated memory segment is the {@code elementLayout.byteSize() * elements.length}.\n+     * The contents of the source array is copied into the result segment element by element, according to the byte\n+     * order and alignment constraint of the given element layout.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":81,"deletions":41,"binary":false,"changes":122,"status":"modified"}]}