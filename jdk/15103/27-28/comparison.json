{"files":[{"patch":"@@ -1099,5 +1099,5 @@\n-     * @throws IllegalStateException         if the {@linkplain #scope() scope} associated with this segment is not\n-     *                                       {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException          if this method is called from a thread {@code T},\n-     *                                       such that {@code isAccessibleBy(T) == false}.\n-     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IllegalStateException    if the {@linkplain #scope() scope} associated with this segment is not\n+     *                                  {@linkplain Scope#isAlive() alive}.\n+     * @throws WrongThreadException     if this method is called from a thread {@code T},\n+     *                                  such that {@code isAccessibleBy(T) == false}.\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n@@ -1160,5 +1160,5 @@\n-     * @throws IllegalStateException         if the {@linkplain #scope() scope} associated with this segment is not\n-     *                                       {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException          if this method is called from a thread {@code T},\n-     *                                       such that {@code isAccessibleBy(T) == false}.\n-     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IllegalStateException    if the {@linkplain #scope() scope} associated with this segment is not\n+     *                                  {@linkplain Scope#isAlive() alive}.\n+     * @throws WrongThreadException     if this method is called from a thread {@code T},\n+     *                                  such that {@code isAccessibleBy(T) == false}.\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @throws IllegalArgumentException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                throw new UnsupportedOperationException(\"Unsupported charset: \" + charset);\n+                throw new IllegalArgumentException(\"Unsupported charset: \" + charset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -639,1 +639,1 @@\n-                    throw new IllegalArgumentException(\"Only ALL-UNNAMED allowed as value for \" + ENABLE_NATIVE_ACCESS);\n+                    abort(null, \"java.launcher.jar.error.illegal.ena.value\", enableNativeAccess);\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,0 +271,2 @@\n+java.launcher.jar.error.illegal.ena.value=\\\n+    Error: illegal value \\\"{0}\\\" for Enable-Native-Access manifest attribute. Only 'ALL-UNNAMED' is allowed\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                assertThrows(UnsupportedOperationException.class, () -> Arena.global().allocateFrom(testString, charset));\n+                assertThrows(IllegalArgumentException.class, () -> Arena.global().allocateFrom(testString, charset));\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-            { \"panama_unnamed_module_native_access_invalid\", UNNAMED, failWithError(\"Only ALL-UNNAMED allowed as value for Enable-Native-Access\"),\n+            { \"panama_unnamed_module_native_access_invalid\", UNNAMED,\n+                    failWithError(\"Error: illegal value \\\"asdf\\\" for Enable-Native-Access manifest attribute. Only ALL-UNNAMED is allowed\"),\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}