{"files":[{"patch":"@@ -62,6 +62,0 @@\n-#ifdef ASSERT\n-  \/\/ only for verification purpose\n-  \/\/ already processed in java roots.\n-  _process_strong_tasks.try_claim_task(G1RP_PS_CodeCache_oops_do);\n-#endif\n-\n@@ -82,1 +76,2 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ CodeCache is already processed in java roots\n+  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_CodeCache_oops_do);\n@@ -111,9 +106,4 @@\n-#ifdef ASSERT\n-  \/\/ only for verification purpose\n-  \/\/ already processed in java roots.\n-  _process_strong_tasks.try_claim_task(G1RP_PS_CodeCache_oops_do);\n-  \/\/ inside safe point\n-  _process_strong_tasks.try_claim_task(G1RP_PS_refProcessor_oops_do);\n-#endif\n-\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ CodeCache is already processed in java roots\n+  \/\/ refProcessor is not needed since we are inside a safe point\n+  _process_strong_tasks.all_tasks_completed(n_workers(),\n+      G1RP_PS_CodeCache_oops_do, G1RP_PS_refProcessor_oops_do);\n@@ -154,7 +144,2 @@\n-#ifdef ASSERT\n-  \/\/ only for verification purpose\n-  \/\/ inside safe point\n-  _process_strong_tasks.try_claim_task(G1RP_PS_refProcessor_oops_do);\n-#endif\n-\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ refProcessor is not needed since we are inside a safe point\n+  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_refProcessor_oops_do);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":8,"deletions":23,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -371,11 +371,2 @@\n-bool SubTasksDone::try_claim_task(uint t) {\n-  assert(t < _n_tasks, \"bad task id.\");\n-  uint old = _tasks[t];\n-  if (old == 0) {\n-    old = Atomic::cmpxchg(&_tasks[t], 0u, 1u);\n-  }\n-  bool res = old == 0;\n-  return res;\n-}\n-\n-void SubTasksDone::all_tasks_completed(uint n_threads) {\n+void SubTasksDone::all_tasks_completed_impl(uint n_threads,\n+      uint skipped[], size_t skipped_size) {\n@@ -384,1 +375,10 @@\n-    assert(_tasks[i] != 0, \"%d not claimed\", i);\n+    if (_tasks[i] == 0) {\n+      auto is_skipped = false;\n+      for (auto j = 0; j < skipped_size; ++j) {\n+        if (i == skipped[j]) {\n+          is_skipped = true;\n+          break;\n+        }\n+      }\n+      assert(is_skipped, \"%d not claimed.\", i);\n+    }\n@@ -400,0 +400,10 @@\n+bool SubTasksDone::try_claim_task(uint t) {\n+  assert(t < _n_tasks, \"bad task id.\");\n+  uint old = _tasks[t];\n+  if (old == 0) {\n+    old = Atomic::cmpxchg(&_tasks[t], 0u, 1u);\n+  }\n+  bool res = old == 0;\n+  return res;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"metaprogramming\/logical.hpp\"\n@@ -310,0 +311,3 @@\n+  void all_tasks_completed_impl(uint n_threads,\n+        uint skipped[], size_t skipped_size);\n+\n@@ -332,1 +336,12 @@\n-  void all_tasks_completed(uint n_threads);\n+  \/\/ followed by vararg skipped tasks\n+  void all_tasks_completed(uint n_threads) {\n+    all_tasks_completed_impl(n_threads, nullptr, 0);\n+  }\n+\n+  template<typename T0, typename... Ts,\n+          ENABLE_IF(Conjunction<std::is_same<T0, Ts>...>::value)>\n+  void all_tasks_completed(uint n_threads, T0 first_skipped, Ts... more_skipped) {\n+    static_assert(std::is_convertible<T0, uint>::value, \"not convertible\");\n+    uint skipped[] = { static_cast<uint>(first_skipped), static_cast<uint>(more_skipped)... };\n+    all_tasks_completed_impl(n_threads, skipped, ARRAY_SIZE(skipped));\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}