{"files":[{"patch":"@@ -62,0 +62,6 @@\n+#ifdef ASSERT\n+  \/\/ only for verification purpose\n+  \/\/ already processed in java roots.\n+  _process_strong_tasks.try_claim_task(G1RP_PS_CodeCache_oops_do);\n+#endif\n+\n@@ -105,0 +111,8 @@\n+#ifdef ASSERT\n+  \/\/ only for verification purpose\n+  \/\/ already processed in java roots.\n+  _process_strong_tasks.try_claim_task(G1RP_PS_CodeCache_oops_do);\n+  \/\/ inside safe point\n+  _process_strong_tasks.try_claim_task(G1RP_PS_refProcessor_oops_do);\n+#endif\n+\n@@ -140,0 +154,6 @@\n+#ifdef ASSERT\n+  \/\/ only for verification purpose\n+  \/\/ inside safe point\n+  _process_strong_tasks.try_claim_task(G1RP_PS_refProcessor_oops_do);\n+#endif\n+\n@@ -184,4 +204,4 @@\n-  if (UseAOT) {\n-    G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::AOTCodeRoots, worker_id);\n-    if (_process_strong_tasks.try_claim_task(G1RP_PS_aot_oops_do)) {\n-        AOTLoader::oops_do(strong_roots);\n+  if (_process_strong_tasks.try_claim_task(G1RP_PS_aot_oops_do)) {\n+    if (UseAOT) {\n+      G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::AOTCodeRoots, worker_id);\n+      AOTLoader::oops_do(strong_roots);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-    G1RP_PS_Universe_oops_do,\n-    G1RP_PS_Management_oops_do,\n@@ -59,1 +57,0 @@\n-    G1RP_PS_jvmti_oops_do,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,4 +101,0 @@\n-  if (_process_strong_tasks->try_claim_task(GCH_PS_younger_gens)) {\n-\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -822,2 +822,4 @@\n-  if (UseAOT && _process_strong_tasks->try_claim_task(GCH_PS_aot_oops_do)) {\n-    AOTLoader::oops_do(strong_roots);\n+  if (_process_strong_tasks->try_claim_task(GCH_PS_aot_oops_do)) {\n+    if (UseAOT) {\n+      AOTLoader::oops_do(strong_roots);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-    GCH_PS_younger_gens,\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -369,3 +369,0 @@\n-#ifdef ASSERT\n-  _claimed = 0;\n-#endif\n@@ -381,6 +378,0 @@\n-#ifdef ASSERT\n-  if (res) {\n-    assert(_claimed < _n_tasks, \"Too many tasks claimed; missing clear?\");\n-    Atomic::inc(&_claimed);\n-  }\n-#endif\n@@ -391,0 +382,5 @@\n+#ifdef ASSERT\n+  for (uint i = 0; i < _n_tasks; ++i) {\n+    assert(_tasks[i] != 0, \"%d not claimed\", i);\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -306,3 +306,0 @@\n-#ifdef ASSERT\n-  volatile uint _claimed;\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -549,4 +549,6 @@\n-    if (_do_lazy_roots && _subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n-      Tracer t(\"lazy partial thread root processing\");\n-      ParallelSPCleanupThreadClosure cl;\n-      Threads::threads_do(&cl);\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n+      if (_do_lazy_roots) {\n+        Tracer t(\"lazy partial thread root processing\");\n+        ParallelSPCleanupThreadClosure cl;\n+        Threads::threads_do(&cl);\n+      }\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}