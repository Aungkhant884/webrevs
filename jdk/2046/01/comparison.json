{"files":[{"patch":"@@ -76,1 +76,2 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ CodeCache is already processed in java roots\n+  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_CodeCache_oops_do);\n@@ -105,1 +106,4 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ CodeCache is already processed in java roots\n+  \/\/ refProcessor is not needed since we are inside a safe point\n+  _process_strong_tasks.all_tasks_completed(n_workers(),\n+      G1RP_PS_CodeCache_oops_do, G1RP_PS_refProcessor_oops_do);\n@@ -140,1 +144,2 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers());\n+  \/\/ refProcessor is not needed since we are inside a safe point\n+  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_refProcessor_oops_do);\n@@ -184,4 +189,4 @@\n-  if (UseAOT) {\n-    G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::AOTCodeRoots, worker_id);\n-    if (_process_strong_tasks.try_claim_task(G1RP_PS_aot_oops_do)) {\n-        AOTLoader::oops_do(strong_roots);\n+  if (_process_strong_tasks.try_claim_task(G1RP_PS_aot_oops_do)) {\n+    if (UseAOT) {\n+      G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::AOTCodeRoots, worker_id);\n+      AOTLoader::oops_do(strong_roots);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-    G1RP_PS_Universe_oops_do,\n-    G1RP_PS_Management_oops_do,\n@@ -59,1 +57,0 @@\n-    G1RP_PS_jvmti_oops_do,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,4 +101,0 @@\n-  if (_process_strong_tasks->try_claim_task(GCH_PS_younger_gens)) {\n-\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -822,2 +822,4 @@\n-  if (UseAOT && _process_strong_tasks->try_claim_task(GCH_PS_aot_oops_do)) {\n-    AOTLoader::oops_do(strong_roots);\n+  if (_process_strong_tasks->try_claim_task(GCH_PS_aot_oops_do)) {\n+    if (UseAOT) {\n+      AOTLoader::oops_do(strong_roots);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-    GCH_PS_younger_gens,\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -369,3 +369,0 @@\n-#ifdef ASSERT\n-  _claimed = 0;\n-#endif\n@@ -374,7 +371,2 @@\n-bool SubTasksDone::try_claim_task(uint t) {\n-  assert(t < _n_tasks, \"bad task id.\");\n-  uint old = _tasks[t];\n-  if (old == 0) {\n-    old = Atomic::cmpxchg(&_tasks[t], 0u, 1u);\n-  }\n-  bool res = old == 0;\n+void SubTasksDone::all_tasks_completed_impl(uint n_threads,\n+      uint skipped[], size_t skipped_size) {\n@@ -382,3 +374,11 @@\n-  if (res) {\n-    assert(_claimed < _n_tasks, \"Too many tasks claimed; missing clear?\");\n-    Atomic::inc(&_claimed);\n+  for (uint i = 0; i < _n_tasks; ++i) {\n+    if (_tasks[i] == 0) {\n+      auto is_skipped = false;\n+      for (auto j = 0; j < skipped_size; ++j) {\n+        if (i == skipped[j]) {\n+          is_skipped = true;\n+          break;\n+        }\n+      }\n+      assert(is_skipped, \"%d not claimed.\", i);\n+    }\n@@ -387,4 +387,0 @@\n-  return res;\n-}\n-\n-void SubTasksDone::all_tasks_completed(uint n_threads) {\n@@ -404,0 +400,10 @@\n+bool SubTasksDone::try_claim_task(uint t) {\n+  assert(t < _n_tasks, \"bad task id.\");\n+  uint old = _tasks[t];\n+  if (old == 0) {\n+    old = Atomic::cmpxchg(&_tasks[t], 0u, 1u);\n+  }\n+  bool res = old == 0;\n+  return res;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"metaprogramming\/logical.hpp\"\n@@ -306,3 +307,0 @@\n-#ifdef ASSERT\n-  volatile uint _claimed;\n-#endif\n@@ -313,0 +311,3 @@\n+  void all_tasks_completed_impl(uint n_threads,\n+        uint skipped[], size_t skipped_size);\n+\n@@ -335,1 +336,12 @@\n-  void all_tasks_completed(uint n_threads);\n+  \/\/ followed by vararg skipped tasks\n+  void all_tasks_completed(uint n_threads) {\n+    all_tasks_completed_impl(n_threads, nullptr, 0);\n+  }\n+\n+  template<typename T0, typename... Ts,\n+          ENABLE_IF(Conjunction<std::is_same<T0, Ts>...>::value)>\n+  void all_tasks_completed(uint n_threads, T0 first_skipped, Ts... more_skipped) {\n+    static_assert(std::is_convertible<T0, uint>::value, \"not convertible\");\n+    uint skipped[] = { static_cast<uint>(first_skipped), static_cast<uint>(more_skipped)... };\n+    all_tasks_completed_impl(n_threads, skipped, ARRAY_SIZE(skipped));\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -549,4 +549,6 @@\n-    if (_do_lazy_roots && _subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n-      Tracer t(\"lazy partial thread root processing\");\n-      ParallelSPCleanupThreadClosure cl;\n-      Threads::threads_do(&cl);\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n+      if (_do_lazy_roots) {\n+        Tracer t(\"lazy partial thread root processing\");\n+        ParallelSPCleanupThreadClosure cl;\n+        Threads::threads_do(&cl);\n+      }\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}