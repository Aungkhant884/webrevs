{"files":[{"patch":"@@ -537,1 +537,1 @@\n-  int reg_enc = (intptr_t)reg;\n+  int reg_enc = reg->raw_encoding();\n@@ -544,1 +544,1 @@\n-  int xmmreg_enc = (intptr_t)xmmreg;\n+  int xmmreg_enc = xmmreg->raw_encoding();\n@@ -549,0 +549,7 @@\n+static int raw_encode(KRegister kreg) {\n+  assert(kreg == knoreg || kreg->is_valid(), \"sanity\");\n+  int kreg_enc = kreg->raw_encoding();\n+  assert(kreg_enc == -1 || is_valid_encoding(kreg_enc), \"sanity\");\n+  return kreg_enc;\n+}\n+\n@@ -722,0 +729,16 @@\n+void Assembler::emit_operand(KRegister kreg, Address adr,\n+                             int rip_relative_correction) {\n+  emit_operand(kreg, adr._base, adr._index, adr._scale, adr._disp,\n+               adr._rspec,\n+               rip_relative_correction);\n+}\n+\n+void Assembler::emit_operand(KRegister kreg, Register base, Register index,\n+                             Address::ScaleFactor scale, int disp,\n+                             RelocationHolder const& rspec,\n+                             int rip_relative_correction) {\n+  assert(!index->is_valid() || index != rsp, \"illegal addressing mode\");\n+  emit_operand_helper(raw_encode(kreg), raw_encode(base), raw_encode(index),\n+                      scale, disp, rspec, rip_relative_correction);\n+}\n+\n@@ -2592,1 +2615,1 @@\n-  emit_operand((Register)dst, src);\n+  emit_operand(dst, src);\n@@ -2601,1 +2624,1 @@\n-  emit_operand((Register)src, dst);\n+  emit_operand(src, dst);\n@@ -2638,1 +2661,1 @@\n-  emit_operand((Register)dst, src);\n+  emit_operand(dst, src);\n@@ -2647,1 +2670,1 @@\n-  emit_operand((Register)src, dst);\n+  emit_operand(src, dst);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -784,0 +784,15 @@\n+  void emit_operand_helper(KRegister kreg,\n+                           int base_enc, int index_enc, Address::ScaleFactor scale,\n+                           int disp,\n+                           RelocationHolder const& rspec,\n+                           int rip_relative_correction = 0);\n+\n+  void emit_operand(KRegister kreg, Address adr,\n+                    int rip_relative_correction = 0);\n+\n+  void emit_operand(KRegister kreg,\n+                    Register base, Register index, Address::ScaleFactor scale,\n+                    int disp,\n+                    RelocationHolder const& rspec,\n+                    int rip_relative_correction = 0);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+#define USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n","filename":"src\/hotspot\/cpu\/x86\/globalDefinitions_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+REGISTER_IMPL_DEFINITION(Register, RegisterImpl, RegisterImpl::number_of_registers);\n+REGISTER_IMPL_DEFINITION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+REGISTER_IMPL_DEFINITION(XMMRegister, XMMRegisterImpl, XMMRegisterImpl::number_of_registers);\n+REGISTER_IMPL_DEFINITION(KRegister, KRegisterImpl, KRegisterImpl::number_of_registers);\n+\n@@ -43,1 +48,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -55,1 +60,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -62,1 +67,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-\n@@ -42,3 +41,2 @@\n-inline Register as_Register(int encoding) {\n-  return (Register)(intptr_t) encoding;\n-}\n+\n+inline constexpr Register as_Register(int encoding);\n@@ -47,1 +45,3 @@\n- public:\n+  static constexpr Register first();\n+\n+public:\n@@ -64,1 +64,1 @@\n-  inline friend Register as_Register(int encoding);\n+  inline constexpr friend Register as_Register(int encoding);\n@@ -66,1 +66,1 @@\n-  inline VMReg as_VMReg();\n+  inline VMReg as_VMReg() const;\n@@ -69,4 +69,5 @@\n-  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }\n-  const char* name() const;\n+  int   raw_encoding() const                     { return this - first(); }\n+  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+  bool  is_valid() const                         { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n+  bool  has_byte_register() const                { return 0 <= raw_encoding() && raw_encoding() < number_of_byte_registers; }\n+  const char *name() const;\n@@ -75,0 +76,2 @@\n+REGISTER_IMPL_DECLARATION(Register, RegisterImpl, RegisterImpl::number_of_registers);\n+\n@@ -101,1 +104,1 @@\n-typedef FloatRegisterImpl* FloatRegister;\n+typedef const FloatRegisterImpl* FloatRegister;\n@@ -103,3 +106,1 @@\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  return (FloatRegister)(intptr_t) encoding;\n-}\n+inline constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -109,1 +110,3 @@\n- public:\n+  static constexpr FloatRegister first();\n+\n+public:\n@@ -115,1 +118,1 @@\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -117,1 +120,1 @@\n-  inline VMReg as_VMReg();\n+  inline VMReg as_VMReg() const;\n@@ -124,2 +127,3 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  int   raw_encoding() const                      { return this - first(); }\n+  int   encoding() const                          { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+  bool  is_valid() const                          { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -130,0 +134,2 @@\n+REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+\n@@ -136,4 +142,1 @@\n-inline XMMRegister as_XMMRegister(int encoding) {\n-  return (XMMRegister)(intptr_t)encoding;\n-}\n-\n+inline constexpr XMMRegister as_XMMRegister(int encoding);\n@@ -143,0 +146,2 @@\n+  static constexpr XMMRegister first();\n+\n@@ -155,1 +160,1 @@\n-  friend XMMRegister as_XMMRegister(int encoding);\n+  friend constexpr XMMRegister as_XMMRegister(int encoding);\n@@ -157,1 +162,1 @@\n-  inline VMReg as_VMReg();\n+  inline VMReg as_VMReg() const;\n@@ -163,2 +168,3 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register (%d)\", (int)(intptr_t)this ); return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  int raw_encoding() const                       { return this - first(); }\n+  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+  bool  is_valid() const                         { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -182,0 +188,2 @@\n+REGISTER_IMPL_DECLARATION(XMMRegister, XMMRegisterImpl, XMMRegisterImpl::number_of_registers);\n+\n@@ -223,3 +231,1 @@\n-inline KRegister as_KRegister(int encoding) {\n-  return (KRegister)(intptr_t)encoding;\n-}\n+inline constexpr KRegister as_KRegister(int encoding);\n@@ -229,0 +235,2 @@\n+  static constexpr KRegister first();\n+\n@@ -238,1 +246,1 @@\n-  friend KRegister as_KRegister(int encoding);\n+  friend constexpr KRegister as_KRegister(int encoding);\n@@ -240,1 +248,1 @@\n-  inline VMReg as_VMReg();\n+  inline VMReg as_VMReg() const;\n@@ -246,2 +254,3 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register (%d)\", (int)(intptr_t)this); return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  int   raw_encoding() const                      { return this - first(); }\n+  int   encoding() const                          { assert(is_valid(), \"invalid register (%d)\", (int)raw_encoding()); return raw_encoding(); }\n+  bool  is_valid() const                          { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -251,0 +260,2 @@\n+REGISTER_IMPL_DECLARATION(KRegister, KRegisterImpl, KRegisterImpl::number_of_registers);\n+\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":46,"deletions":35,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-inline VMReg RegisterImpl::as_VMReg() {\n+inline VMReg RegisterImpl::as_VMReg() const {\n@@ -37,1 +37,1 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() {\n+inline VMReg FloatRegisterImpl::as_VMReg() const {\n@@ -41,1 +41,1 @@\n-inline VMReg XMMRegisterImpl::as_VMReg() {\n+inline VMReg XMMRegisterImpl::as_VMReg() const {\n@@ -45,1 +45,1 @@\n-inline VMReg KRegisterImpl::as_VMReg() {\n+inline VMReg KRegisterImpl::as_VMReg() const {\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}