{"files":[{"patch":"@@ -29,2 +29,0 @@\n-VMRegImpl all_VMRegs[ConcreteRegisterImpl::number_of_registers + 1];\n-\n@@ -32,1 +30,1 @@\n-VMReg VMRegImpl::stack0 = VMRegImpl::stack_0();\n+VMReg VMRegImpl::stack0 = (VMReg)(intptr_t)((ConcreteRegisterImpl::number_of_registers + 7) & ~7);\n","filename":"src\/hotspot\/share\/code\/vmreg.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-  \/\/ Despite being private, this field is exported to the\n-  \/\/ serviceability agent and our friends.\n-  static VMReg stack0;\n@@ -63,1 +60,2 @@\n-  static constexpr VMReg first();\n+\n+  static VMReg stack0;\n@@ -68,3 +66,0 @@\n-  static constexpr VMReg stack_0() {\n-    return first() + ((ConcreteRegisterImpl::number_of_registers + 7) & ~7);\n-  }\n@@ -74,4 +69,1 @@\n-  static VMReg  as_VMReg(int val, bool bad_ok = false) {\n-    assert(val > BAD_REG || bad_ok, \"invalid\");\n-    return val + first();\n-  }\n+  static VMReg  as_VMReg(int val, bool bad_ok = false) { assert(val > BAD_REG || bad_ok, \"invalid\"); return (VMReg) (intptr_t) val; }\n@@ -89,4 +81,3 @@\n-  intptr_t value() const { return this - first(); }\n-  static VMReg Bad() { return BAD_REG+first(); }\n-  bool is_valid() const { return value() != BAD_REG; }\n-  bool is_stack() const { return this >= stack_0(); }\n+  static VMReg Bad() { return (VMReg) (intptr_t) BAD_REG; }\n+  bool is_valid() const { return ((intptr_t) this) != BAD_REG; }\n+  bool is_stack() const { return (intptr_t) this >= (intptr_t) stack0; }\n@@ -111,1 +102,1 @@\n-    return this + 1;\n+    return (VMReg)(intptr_t)(value() + 1);\n@@ -115,1 +106,1 @@\n-    return this + i;\n+    return (VMReg)(intptr_t)(value() + i);\n@@ -119,1 +110,1 @@\n-    return this - 1;\n+    return (VMReg)(intptr_t)(value() - 1);\n@@ -123,0 +114,2 @@\n+  intptr_t value() const         {return (intptr_t) this; }\n+\n@@ -141,1 +134,1 @@\n-    return stack_0() + idx;\n+    return (VMReg) (intptr_t) (stack0->value() + idx);\n@@ -146,1 +139,1 @@\n-    return this - stack_0();\n+    return value() - stack0->value();\n@@ -155,3 +148,0 @@\n-extern VMRegImpl all_VMRegs[ConcreteRegisterImpl::number_of_registers + 1] INTERNAL_VISIBILITY;\n-inline constexpr VMReg VMRegImpl::first() { return all_VMRegs + 1; }\n-\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"}]}