{"files":[{"patch":"@@ -41,1 +41,1 @@\n- * @bug 8285295\n+ * @bug 8285295 8178355\n@@ -52,2 +52,0 @@\n-\/\/ TODO remove(k, v)\n-\/\/ TODO replace(k, v1, v2)\n@@ -487,0 +485,91 @@\n+    \/\/ remove(Object, Object) absent key, absent value\n+    @Test\n+    public void testRemoveAA() {\n+        Box k1c = new Box(k1a);\n+        Box v1c = new Box(v1a);\n+        assertFalse(map.remove(k1c, v1c));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, v1a),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ remove(Object, Object) absent key, present value\n+    @Test\n+    public void testRemoveAV() {\n+        Box k1c = new Box(k1a);\n+        assertFalse(map.remove(k1c, v1a));\n+        checkEntries(map.entrySet(),\n+                     entry(k1a, v1a),\n+                     entry(k1b, v1b),\n+                     entry(k2, v2));\n+    }\n+\n+    \/\/ remove(Object, Object) present key, absent value\n+    @Test\n+    public void testRemoveKA() {\n+        Box v1c = new Box(v1a);\n+        assertFalse(map.remove(k1a, v1c));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, v1a),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ remove(Object, Object) present key, present value\n+    @Test\n+    public void testRemoveKV() {\n+        assertTrue(map.remove(k1a, v1a));\n+        checkEntries(map.entrySet(),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ replace(K, V, V) absent key, absent oldValue\n+    @Test\n+    public void testReplaceAA() {\n+        Box k1c = new Box(k1a);\n+        Box v1c = new Box(v1a);\n+        Box newVal = new Box(v2);\n+        assertFalse(map.replace(k1c, v1c, newVal));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, v1a),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ replace(K, V, V) absent key, present oldValue\n+    @Test\n+    public void testReplaceAV() {\n+        Box k1c = new Box(k1a);\n+        Box newVal = new Box(v2);\n+        assertFalse(map.replace(k1c, v1a, newVal));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, v1a),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ replace(K, V, V) present key, absent oldValue\n+    @Test\n+    public void testReplaceKA() {\n+        Box v1c = new Box(v1a);\n+        Box newVal = new Box(v2);\n+        assertFalse(map.replace(k1a, v1c, newVal));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, v1a),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n+    \/\/ replace(K, V, V) present key, present oldValue\n+    @Test\n+    public void testReplaceKV() {\n+        Box newVal = new Box(v2);\n+        assertTrue(map.replace(k1a, v1a, newVal));\n+        checkEntries(map.entrySet(),\n+                entry(k1a, newVal),\n+                entry(k1b, v1b),\n+                entry(k2, v2));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/IdentityHashMap\/Basic.java","additions":92,"deletions":3,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.util.IdentityHashMap;\n-\n-\/*\n- * @test\n- * @bug 8178355\n- * @summary Use identity-based comparison for IdentityHashMap#remove and #replace\n- * @run testng DefaultRemoveReplaceTest\n- *\/\n-public class DefaultRemoveReplaceTest {\n-    \/** A minimal record that can represent difference in equality and identity. *\/\n-    record Box(int i) { }\n-\n-    private static final Box ONE = new Box(1);\n-    private static final Box ANOTHER_ONE = new Box(1);\n-    private static final Box SIX = new Box(6);\n-    private static final Box THREE = new Box(3);\n-\n-    static {\n-        Assert.assertEquals(ANOTHER_ONE, ONE);\n-        Assert.assertNotSame(ANOTHER_ONE, ONE);\n-    }\n-\n-    @DataProvider\n-    public Object[][] makeMap() {\n-        var map = new IdentityHashMap<Box, Box>();\n-        map.put(null, THREE);\n-        map.put(THREE, ONE);\n-        map.put(ONE, SIX);\n-        map.put(ANOTHER_ONE, null);\n-\n-        Assert.assertEquals(map.size(), 4);\n-\n-        return new Object[][] {\n-                { map }\n-        };\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testReplaceUnequal(IdentityHashMap<Box, Box> map) {\n-        var seven = new Box(7);\n-        var fakeThree = new Box(3);\n-        Assert.assertFalse(map.replace(seven, ONE, fakeThree));\n-\n-        \/\/ Make sure false return has no side effects\n-        Assert.assertFalse(map.containsKey(seven));\n-        Assert.assertTrue(map.containsValue(ONE));\n-        Assert.assertFalse(map.containsValue(fakeThree));\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testReplaceEqualKey(IdentityHashMap<Box, Box> map) {\n-        var seven = new Box(7);\n-        var fakeThree = new Box(3);\n-        Assert.assertFalse(map.replace(fakeThree, ONE, seven));\n-\n-        \/\/ Make sure false return has no side effects\n-        Assert.assertTrue(map.containsKey(THREE));\n-        Assert.assertFalse(map.containsKey(fakeThree));\n-        Assert.assertTrue(map.containsValue(ONE));\n-        Assert.assertFalse(map.containsValue(seven));\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testReplaceEqualValue(IdentityHashMap<Box, Box> map) {\n-        var seven = new Box(7);\n-        var fakeOne = new Box(1);\n-        Assert.assertFalse(map.replace(THREE, fakeOne, seven));\n-\n-        \/\/ Make sure false return has no side effects\n-        Assert.assertTrue(map.containsKey(THREE));\n-        Assert.assertSame(map.get(THREE), ONE);\n-        Assert.assertTrue(map.containsValue(ONE));\n-        Assert.assertFalse(map.containsValue(seven));\n-        Assert.assertFalse(map.containsValue(fakeOne));\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testReplaceSuccess(IdentityHashMap<Box, Box> map) {\n-        var seven = new Box(7);\n-        Assert.assertTrue(map.replace(ANOTHER_ONE, null, seven));\n-\n-        \/\/ Check aftereffects\n-        Assert.assertTrue(map.containsKey(ANOTHER_ONE));\n-        Assert.assertSame(map.get(ANOTHER_ONE), seven);\n-        Assert.assertTrue(map.containsValue(seven));\n-        Assert.assertFalse(map.containsValue(null));\n-        Assert.assertTrue(map.containsValue(seven));\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testRemoveUnequal(IdentityHashMap<Box, Box> map) {\n-        Assert.assertFalse(map.remove(THREE, SIX));\n-\n-        \/\/ Make sure false return has no side effects\n-        Assert.assertTrue(map.containsKey(THREE));\n-        Assert.assertTrue(map.containsValue(SIX));\n-        Assert.assertSame(map.get(ONE), SIX);\n-        Assert.assertSame(map.get(THREE), ONE);\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testRemoveEqualKey(IdentityHashMap<Box, Box> map) {\n-        var fakeThree = new Box(3);\n-        Assert.assertFalse(map.remove(null, fakeThree));\n-\n-        \/\/ Make sure false return has no side effects\n-        Assert.assertTrue(map.containsKey(null));\n-        Assert.assertSame(map.get(null), THREE);\n-        Assert.assertTrue(map.containsValue(THREE));\n-        Assert.assertFalse(map.containsValue(fakeThree));\n-        Assert.assertEquals(map.size(), 4);\n-    }\n-\n-    @Test(dataProvider = \"makeMap\")\n-    public void testRemoveSuccess(IdentityHashMap<Box, Box> map) {\n-        Assert.assertTrue(map.remove(ONE, SIX));\n-\n-        \/\/ Check aftereffects\n-        Assert.assertFalse(map.containsKey(ONE));\n-        Assert.assertFalse(map.containsValue(SIX));\n-        Assert.assertTrue(map.containsKey(ANOTHER_ONE));\n-        Assert.assertTrue(map.containsValue(null));\n-        Assert.assertNull(map.get(ONE));\n-        Assert.assertNull(map.get(ANOTHER_ONE));\n-        Assert.assertEquals(map.size(), 3);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/IdentityHashMap\/DefaultRemoveReplaceTest.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"}]}