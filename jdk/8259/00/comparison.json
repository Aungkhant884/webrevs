{"files":[{"patch":"@@ -547,32 +547,0 @@\n-    \/**\n-     * Removes the specified key-value mapping from the map if it is present.\n-     *\n-     * @param   key   possible key\n-     * @param   value possible value\n-     * @return  {@code true} if and only if the specified key-value\n-     *          mapping was in the map\n-     *\/\n-    private boolean removeMapping(Object key, Object value) {\n-        Object k = maskNull(key);\n-        Object[] tab = table;\n-        int len = tab.length;\n-        int i = hash(k, len);\n-\n-        while (true) {\n-            Object item = tab[i];\n-            if (item == k) {\n-                if (tab[i + 1] != value)\n-                    return false;\n-                modCount++;\n-                size--;\n-                tab[i] = null;\n-                tab[i + 1] = null;\n-                closeDeletion(i);\n-                return true;\n-            }\n-            if (item == null)\n-                return false;\n-            i = nextKeyIndex(i, len);\n-        }\n-    }\n-\n@@ -1195,1 +1163,1 @@\n-                    && removeMapping(entry.getKey(), entry.getValue());\n+                    && IdentityHashMap.this.remove(entry.getKey(), entry.getValue());\n@@ -1382,0 +1350,64 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * <p>More formally, if this map contains a mapping from a key\n+     * {@code k} to a value {@code v} such that {@code key == k}\n+     * and {@code value == v}, then this method removes the mapping\n+     * for this key and returns {@code true}; otherwise it returns\n+     * {@code false}.\n+     *\/\n+    @Override\n+    public boolean remove(Object key, Object value) {\n+        Object k = maskNull(key);\n+        Object[] tab = table;\n+        int len = tab.length;\n+        int i = hash(k, len);\n+\n+        while (true) {\n+            Object item = tab[i];\n+            if (item == k) {\n+                if (tab[i + 1] != value)\n+                    return false;\n+                modCount++;\n+                size--;\n+                tab[i] = null;\n+                tab[i + 1] = null;\n+                closeDeletion(i);\n+                return true;\n+            }\n+            if (item == null)\n+                return false;\n+            i = nextKeyIndex(i, len);\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * <p>More formally, if this map contains a mapping from a key\n+     * {@code k} to a value {@code v} such that {@code key == k}\n+     * and {@code oldValue == v}, then this method associates\n+     * {@code k} to {@code newValue} and returns {@code true};\n+     * otherwise it returns {@code false}.\n+     *\/\n+    @Override\n+    public boolean replace(K key, V oldValue, V newValue) {\n+        Object k = maskNull(key);\n+        Object[] tab = table;\n+        int len = tab.length;\n+        int i = hash(k, len);\n+\n+        while (true) {\n+            Object item = tab[i];\n+            if (item == k) {\n+                if (tab[i + 1] != oldValue)\n+                    return false;\n+                tab[i + 1] = newValue;\n+                return true;\n+            }\n+            if (item == null)\n+                return false;\n+            i = nextKeyIndex(i, len);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/IdentityHashMap.java","additions":65,"deletions":33,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.IdentityHashMap;\n+import java.util.Objects;\n+\n+\/*\n+ * @test\n+ * @bug 8178355\n+ * @summary Use identity-based comparison for IdentityHashMap#remove and #replace\n+ *\/\n+public class DefaultRemoveReplace {\n+    public static void main(String[] args) {\n+        final String key = \"key\";\n+        final String internedValue = \"value\";\n+        final String constructedValue = new String(new char[]{'v', 'a', 'l', 'u', 'e'});\n+\n+        if (!Objects.equals(internedValue, constructedValue)) {\n+            throw new AssertionError(\"Bad test data: equality should hold\");\n+        }\n+\n+        if (internedValue == constructedValue) {\n+            throw new AssertionError(\"Bad test data: identity should be different\");\n+        }\n+\n+        final IdentityHashMap<String, String> map = new IdentityHashMap<>();\n+        map.put(key, internedValue);\n+\n+        if (map.replace(key, constructedValue, \"dummy\")) {\n+            throw new AssertionError(\"Erroneously replacd value by equality\");\n+        }\n+\n+        if (!map.replace(key, internedValue, \"dummy\")) {\n+            throw new AssertionError(\"Failed to replace value by identity\");\n+        }\n+\n+        map.clear();\n+        map.put(key, constructedValue);\n+\n+        if (map.remove(key, internedValue)) {\n+            throw new AssertionError(\"Erroneously removed value by equality\");\n+        }\n+\n+        if (!map.remove(key, constructedValue)) {\n+            throw new AssertionError(\"Failed to remove value by identity\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/IdentityHashMap\/DefaultRemoveReplace.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}