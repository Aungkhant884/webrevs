{"files":[{"patch":"@@ -467,1 +467,1 @@\n-            storeFunc.store(storage(), type(), stack.pop());\n+            storeFunc.store(storage(), stack.pop());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        void store(VMStorage storage, Class<?> type, Object o);\n+        void store(VMStorage storage, Object o);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingInterpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -37,0 +38,1 @@\n+import java.util.ArrayList;\n@@ -38,0 +40,1 @@\n+import java.util.List;\n@@ -41,0 +44,3 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n+\n@@ -96,1 +102,0 @@\n-            Map<VMStorage, Integer> retIndexMap = SharedUtils.indexMap(retMoves);\n@@ -98,1 +103,1 @@\n-            InvocationData invData = new InvocationData(handle, argIndexMap, retIndexMap);\n+            InvocationData invData = new InvocationData(handle, callingSequence, argIndexMap);\n@@ -149,1 +154,1 @@\n-    private record InvocationData(MethodHandle leaf, Map<VMStorage, Integer> argIndexMap, Map<VMStorage, Integer> retIndexMap) {}\n+    private record InvocationData(MethodHandle leaf, CallingSequence callingSequence, Map<VMStorage, Integer> argIndexMap) {}\n@@ -155,0 +160,1 @@\n+        List<MemorySessionImpl> acquiredScopes = new ArrayList<>();\n@@ -159,1 +165,0 @@\n-            Object[] leafArgs = new Object[invData.leaf.type().parameterCount()];\n@@ -168,0 +173,2 @@\n+\n+            Object[] leafArgs = new Object[invData.leaf.type().parameterCount()];\n@@ -170,0 +177,9 @@\n+                if (callingSequence.functionDesc().argumentLayouts().get(i) instanceof AddressLayout) {\n+                    MemorySessionImpl sessionImpl = ((AbstractMemorySegmentImpl) arg).sessionImpl();\n+                    if (!(callingSequence.needsReturnBuffer() && i == 0)) { \/\/ don't acquire unboxArena's scope\n+                        sessionImpl.acquire0();\n+                        \/\/ add this scope _after_ we acquire, so we only release scopes we actually acquired\n+                        \/\/ in case an exception occurs\n+                        acquiredScopes.add(sessionImpl);\n+                    }\n+                }\n@@ -171,1 +187,1 @@\n-                        (storage, type, value) -> leafArgs[invData.argIndexMap.get(storage)] = value, unboxArena);\n+                    (storage, value) -> leafArgs[invData.argIndexMap.get(storage)] = value, unboxArena);\n@@ -197,0 +213,4 @@\n+        } finally {\n+            for (MemorySessionImpl sessionImpl : acquiredScopes) {\n+                sessionImpl.release0();\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-                        (storage, type, value) -> returnValues[invData.retIndexMap.get(storage)] = value, null);\n+                        (storage, value) -> returnValues[invData.retIndexMap.get(storage)] = value, null);\n@@ -190,6 +190,1 @@\n-                Binding.VMStore[] retMoves = invData.callingSequence.returnBindings().stream()\n-                        .filter(Binding.VMStore.class::isInstance)\n-                        .map(Binding.VMStore.class::cast)\n-                        .toArray(Binding.VMStore[]::new);\n-\n-                assert returnValues.length == retMoves.length;\n+                assert returnValues.length == invData.retMoves().length;\n@@ -197,2 +192,2 @@\n-                for (int i = 0; i < retMoves.length; i++) {\n-                    Binding.VMStore store = retMoves[i];\n+                for (int i = 0; i < invData.retMoves().length; i++) {\n+                    Binding.VMStore store = invData.retMoves()[i];\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,2 +37,13 @@\n- * @test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibraryLookupTest\n+ * @test id=specialized\n+ * @run testng\/othervm\n+ *  -Djdk.internal.foreign.DowncallLinker.USE_SPEC=true\n+ *  --enable-native-access=ALL-UNNAMED\n+ *  LibraryLookupTest\n+ *\/\n+\n+\/*\n+ * @test id=interpreted\n+ * @run testng\/othervm\n+ *   -Djdk.internal.foreign.DowncallLinker.USE_SPEC=false\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   LibraryLookupTest\n","filename":"test\/jdk\/java\/foreign\/LibraryLookupTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,2 +25,13 @@\n- * @test\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED SafeFunctionAccessTest\n+ * @test id=specialized\n+ * @run testng\/othervm\n+ *  -Djdk.internal.foreign.DowncallLinker.USE_SPEC=true\n+ *  --enable-native-access=ALL-UNNAMED\n+ *  SafeFunctionAccessTest\n+ *\/\n+\n+\/*\n+ * @test id=interpreted\n+ * @run testng\/othervm\n+ *   -Djdk.internal.foreign.DowncallLinker.USE_SPEC=false\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   SafeFunctionAccessTest\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}