{"files":[{"patch":"@@ -571,1 +571,1 @@\n-    assert(r->is_empty() && !r->is_pinned(), \"Region already in use (%u)\", r->hrm_index());\n+    assert(r->is_empty(), \"Region already in use (%u)\", r->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,4 +86,4 @@\n-    \/\/ The first disjunction filters out regions with objects that were explicitly\n-    \/\/ pinned after being added to the collection set candidates.\n-    guarantee(cur->is_pinned() ||\n-              G1CollectionSetChooser::should_add(cur),\n+    \/\/ Currently the decision whether young gc moves region is determined at region\n+    \/\/ allocation time. It is not possible that a region becomes non-movable at a\n+    \/\/ later point, which means below condition always holds true.\n+    guarantee(G1CollectionSetChooser::should_add(cur),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-         !hr->is_pinned() &&\n+         hr->is_young_gc_movable() &&\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-  \/\/ not. Currently, we skip pinned regions and regions whose live\n-  \/\/ bytes are over the threshold. Humongous regions may be reclaimed during cleanup.\n+  \/\/ not. Currently, we skip non-movable regions and regions whose live\n+  \/\/ bytes are below the occupancy threshold.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -260,1 +260,3 @@\n-  } else if (hr->is_pinned()) {\n+  } else if (!hr->is_young_gc_movable()) {\n+    \/\/ In the first attempt to do a full gc we do not move anything that young gc\n+    \/\/ won't move either.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  assert(!hr->is_pinned(), \"Should be no pinned region in compaction queue\");\n+  assert(hr->is_young_gc_movable(), \"Should only be movable region in compaction queue\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-\/\/ (1) the HeapRegion itself has been pinned at the start of Full GC.\n+\/\/ (1) the HeapRegion itself is non-movable (like for young gcs) at the start of Full GC.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  assert(!hr->is_pinned(), \"must be\");\n+  assert(hr->is_young_gc_movable(), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  \/\/ There is no need to iterate and forward objects in pinned regions ie.\n+  \/\/ There is no need to iterate and forward objects in non-movable regions ie.\n@@ -45,1 +45,1 @@\n-  if (hr->is_pinned()) {\n+  if (!hr->is_young_gc_movable()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -413,2 +413,2 @@\n-      \/\/ one we can identify: pinned without old or humongous set.\n-      assert(!hr->is_pinned(), \"Heap region %u is pinned but not old or humongous.\", hr->hrm_index());\n+      \/\/ one we can identify before crashing: non-movable.\n+      assert(hr->is_young_gc_movable(), \"Heap region %u is non-movable.\", hr->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1553,0 +1553,4 @@\n+\n+bool G1Policy::is_young_gc_movable(const HeapRegion* r) const {\n+  return !r->is_humongous();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -453,0 +453,4 @@\n+\n+  \/\/ Indicates whether the (live) contents of the given region may be moved during\n+  \/\/ young collection. The region contents may still be reclaimed.\n+  bool is_young_gc_movable(const HeapRegion* r) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -560,2 +560,2 @@\n-    assert(!r->is_pinned(), \"Unexpected pinned region at index %u\", r->hrm_index());\n-    assert(r->in_collection_set(), \"bad CS\");\n+    assert(r->is_young_gc_movable(), \"Unexpected non-movable region at index %u\", r->hrm_index());\n+    assert(r->in_collection_set(), \"Bad collection set\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -405,3 +405,3 @@\n-  \/\/ A pinned region contains objects which are not moved by garbage collections.\n-  \/\/ Humongous regions are pinned.\n-  bool is_pinned() const { return _type.is_pinned(); }\n+  \/\/ A movable region contains objects which contents can be moved by young garbage collections.\n+  \/\/ We move everything but humongous regions during young gc.\n+  bool is_young_gc_movable() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/g1\/g1Policy.hpp\"\n@@ -180,1 +181,1 @@\n-  \/\/ After a compaction the mark bitmap in a non-pinned regions is invalid.\n+  \/\/ After a compaction the mark bitmap in a movable region is invalid.\n@@ -551,0 +552,4 @@\n+inline bool HeapRegion::is_young_gc_movable() const {\n+  return G1CollectedHeap::heap()->policy()->is_young_gc_movable(this);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,3 +55,2 @@\n-  \/\/ 00100 0 [ 8] Pinned Mask\n-  \/\/ 00110 0 [12] Starts Humongous\n-  \/\/ 00110 1 [13] Continues Humongous\n+  \/\/ 00010 0 [ 4] Starts Humongous\n+  \/\/ 00010 1 [ 5] Continues Humongous\n@@ -59,1 +58,2 @@\n-  \/\/ 01000 0 [16] Old Mask\n+  \/\/ 00100 0 [ 8] Old Mask\n+  \/\/ 00100 0 [ 8] Old\n@@ -69,3 +69,2 @@\n-    PinnedMask            = 8,\n-    StartsHumongousTag    = HumongousMask | PinnedMask,\n-    ContinuesHumongousTag = HumongousMask | PinnedMask + 1,\n+    StartsHumongousTag    = HumongousMask,\n+    ContinuesHumongousTag = HumongousMask + 1,\n@@ -73,1 +72,1 @@\n-    OldMask               = 16,\n+    OldMask               = 8,\n@@ -120,1 +119,0 @@\n-  \/\/ is_old regions may or may not also be pinned\n@@ -125,2 +123,0 @@\n-  bool is_pinned() const { return (get() & PinnedMask) != 0; }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionType.hpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-  declare_constant(HeapRegionType::PinnedMask)                                \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1107,3 +1107,0 @@\n-                          } else if (region.isPinned()) {\n-                            anno = \"Pinned \";\n-                            bad = false;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -127,4 +127,0 @@\n-    public boolean isPinned() {\n-        return type.isPinned();\n-    }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-    private static int pinnedMask;\n@@ -73,1 +72,0 @@\n-        pinnedMask = db.lookupIntConstant(\"HeapRegionType::PinnedMask\");\n@@ -105,4 +103,0 @@\n-    public boolean isPinned() {\n-        return (tagField.getValue(addr) & pinnedMask) != 0;\n-    }\n-\n@@ -133,3 +127,0 @@\n-        if (isPinned()) {\n-            return \"Pinned\";\n-        }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionType.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}