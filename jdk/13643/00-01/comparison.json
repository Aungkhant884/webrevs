{"files":[{"patch":"@@ -255,1 +255,1 @@\n-         hr->is_young_gc_movable() &&\n+         G1CollectedHeap::heap()->policy()->is_young_gc_movable(hr) &&\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-  \/\/ not. Currently, we skip non-movable regions and regions whose live\n-  \/\/ bytes are below the occupancy threshold.\n+  \/\/ not. Currently, we skip regions that we will never move during young gc, and\n+  \/\/ regions which liveness is below the occupancy threshold.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -260,3 +260,3 @@\n-  } else if (!hr->is_young_gc_movable()) {\n-    \/\/ In the first attempt to do a full gc we do not move anything that young gc\n-    \/\/ won't move either.\n+  } else if (hr->is_humongous()) {\n+    \/\/ Humongous objects will never be moved in the \"main\" compaction phase, but\n+    \/\/ afterwards in a special phase if needed.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  assert(hr->is_young_gc_movable(), \"Should only be movable region in compaction queue\");\n+  assert(_g1h->policy()->is_young_gc_movable(hr), \"Should only be movable region in compaction queue\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  assert(hr->is_young_gc_movable(), \"must be\");\n+  assert(_g1h->policy()->is_young_gc_movable(hr), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  if (!hr->is_young_gc_movable()) {\n+  if (!_g1h->policy()->is_young_gc_movable(hr)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,4 +412,1 @@\n-      \/\/ There are no other valid region types. Check for one invalid\n-      \/\/ one we can identify before crashing: non-movable.\n-      assert(hr->is_young_gc_movable(), \"Heap region %u is non-movable.\", hr->hrm_index());\n-      ShouldNotReachHere();\n+      fatal(\"Invalid region type for region %u (%s)\", hr->hrm_index(), hr->get_short_type_str());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1554,1 +1554,1 @@\n-bool G1Policy::is_young_gc_movable(const HeapRegion* r) const {\n+bool G1Policy::is_young_gc_movable(HeapRegion* r) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-  bool is_young_gc_movable(const HeapRegion* r) const;\n+  bool is_young_gc_movable(HeapRegion* r) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-    assert(r->is_young_gc_movable(), \"Unexpected non-movable region at index %u\", r->hrm_index());\n+    assert(_g1h->policy()->is_young_gc_movable(r), \"Unexpected non-movable region at index %u\", r->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -405,4 +405,0 @@\n-  \/\/ A movable region contains objects which contents can be moved by young garbage collections.\n-  \/\/ We move everything but humongous regions during young gc.\n-  bool is_young_gc_movable() const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -552,4 +552,0 @@\n-inline bool HeapRegion::is_young_gc_movable() const {\n-  return G1CollectedHeap::heap()->policy()->is_young_gc_movable(this);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}