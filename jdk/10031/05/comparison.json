{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,4 @@\n+    static int getUnsignedShort(byte[] b, int off) {\n+        return ((b[off] & 0xFF) << 8) + (b[off + 1] & 0xFF);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Bits.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private FileDescriptor fd;\n+    private final FileDescriptor fd;\n@@ -78,0 +78,2 @@\n+    private final byte[] readBuffer = new byte[8];\n+\n@@ -737,4 +739,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (ch != 0);\n+        return readUnsignedByte() != 0;\n@@ -762,4 +761,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (byte)(ch);\n+        return (byte) readUnsignedByte();\n@@ -809,5 +805,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (short)((ch1 << 8) + (ch2 << 0));\n+        return (short) readUnsignedShort();\n@@ -837,5 +829,2 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (ch1 << 8) + (ch2 << 0);\n+        readFully(readBuffer, 0, 2);\n+        return Bits.getUnsignedShort(readBuffer, 0);\n@@ -865,5 +854,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (char)((ch1 << 8) + (ch2 << 0));\n+        return (char) readUnsignedShort();\n@@ -893,7 +878,2 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        int ch3 = this.read();\n-        int ch4 = this.read();\n-        if ((ch1 | ch2 | ch3 | ch4) < 0)\n-            throw new EOFException();\n-        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n+        readFully(readBuffer, 0, 4);\n+        return Bits.getInt(readBuffer, 0);\n@@ -931,1 +911,2 @@\n-        return ((long)(readInt()) << 32) + (readInt() & 0xFFFFFFFFL);\n+        readFully(readBuffer, 0, 8);\n+        return Bits.getLong(readBuffer, 0);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":13,"deletions":32,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package micro.org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(2)\n+@State(Scope.Thread)\n+@Warmup(iterations=5, time = 1)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Measurement(iterations = 5, time = 2)\n+public class RandomAccessFileReadBenchmark {\n+\n+    @Param({\"1\", \"5\"})\n+    private int kiloBytes;\n+\n+    private File file;\n+\n+    @Setup(Level.Iteration)\n+    public void beforeRun() throws IOException {\n+        var bytes = new byte[kiloBytes * 1024];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        file = File.createTempFile(getClass().getName(), \".txt\");\n+        Files.write(file.toPath(), bytes);\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void afterRun() {\n+        file.delete();\n+    }\n+\n+    @Benchmark\n+    public void readShort(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 2; i++) {\n+            bh.consume(raf.readShort());\n+        }\n+        raf.close();\n+    }\n+\n+    @Benchmark\n+    public void readInt(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 4; i++) {\n+            bh.consume(raf.readInt());\n+        }\n+        raf.close();\n+    }\n+\n+    @Benchmark\n+    public void readLong(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 8; i++) {\n+            bh.consume(raf.readLong());\n+        }\n+        raf.close();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/RandomAccessFileReadBenchmark.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}