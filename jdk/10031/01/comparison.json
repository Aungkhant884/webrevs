{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,4 @@\n+    static int getUnsignedShort(byte[] b, int off) {\n+        return ((b[off] & 0xFF) << 8) + (b[off + 1] & 0xFF);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Bits.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private FileDescriptor fd;\n+    private final FileDescriptor fd;\n@@ -370,0 +370,4 @@\n+        return (int) read(1);\n+    }\n+\n+   private long read(int length) throws IOException {\n@@ -372,1 +376,1 @@\n-            return read0();\n+            return read0(length);\n@@ -378,1 +382,1 @@\n-    private native int read0() throws IOException;\n+    private native long read0(int length) throws IOException;\n@@ -737,4 +741,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (ch != 0);\n+        return readUnsignedByte() != 0;\n@@ -762,4 +763,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (byte)(ch);\n+        return (byte) readUnsignedByte();\n@@ -809,5 +807,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (short)((ch1 << 8) + (ch2 << 0));\n+        return (short) read(2);\n@@ -837,5 +831,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (ch1 << 8) + (ch2 << 0);\n+        return (int) read(2);\n@@ -865,5 +855,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (char)((ch1 << 8) + (ch2 << 0));\n+        return (char) read(2);\n@@ -893,7 +879,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        int ch3 = this.read();\n-        int ch4 = this.read();\n-        if ((ch1 | ch2 | ch3 | ch4) < 0)\n-            throw new EOFException();\n-        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n+        return (int) read(4);\n@@ -931,1 +911,1 @@\n-        return ((long)(readInt()) << 32) + (readInt() & 0xFFFFFFFFL);\n+        return read(8);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":14,"deletions":34,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -70,3 +70,3 @@\n-JNIEXPORT jint JNICALL\n-Java_java_io_RandomAccessFile_read0(JNIEnv *env, jobject this) {\n-    return readSingle(env, this, raf_fd);\n+JNIEXPORT jlong JNICALL\n+Java_java_io_RandomAccessFile_read0(JNIEnv *env, jobject this, jint length) {\n+    return readN(env, this, raf_fd, length);\n","filename":"src\/java.base\/share\/native\/libjava\/RandomAccessFile.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,42 @@\n+jlong\n+readN(JNIEnv *env, jobject this, jfieldID fid, jint len) {\n+    if (len == 1) {\n+        return readSingle(env, this, fid);\n+    }\n+    char stackBuf[len];\n+    char *buf = stackBuf;\n+\n+    FD fd = getFD(env, this, fid);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return -1;\n+    }\n+    jint nread = IO_Read(fd, buf, len);\n+    if (nread == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Read error\");\n+        return -1;\n+    }\n+\n+    if (len == 2) {\n+        return ((*buf) << 8) + (*(buf + 1) & 0xFF);\n+    }\n+    if (len == 4) {\n+        return ((*buf) << 24) +\n+               ((*(buf + 1) & 0xFF) << 16) +\n+               ((*(buf + 2) & 0xFF) << 8) +\n+               ((*(buf + 3) & 0xFF));\n+    }\n+    if (len == 8) {\n+        return (((long) *(buf) << 56) +\n+                ((long) (*(buf + 1) & 0xFF) << 48) +\n+                ((long) (*(buf + 2) & 0xFF) << 40) +\n+                ((long) (*(buf + 3) & 0xFF) << 32) +\n+                ((long) (*(buf + 4) & 0xFF) << 24) +\n+                ((*(buf + 5) & 0xFF) << 16) +\n+                ((*(buf + 6) & 0xFF) << 8) +\n+                ((*(buf + 7) & 0xFF)));\n+    }\n+    JNU_ThrowByName(env, \"java\/lang\/IllegalArgumentException\", NULL);\n+    return -1;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+jlong readN(JNIEnv *env, jobject this, jfieldID fid, jint length);\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package micro.org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(2)\n+@State(Scope.Thread)\n+@Warmup(iterations=5, time = 1)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Measurement(iterations = 5, time = 2)\n+public class RandomAccessFileReadBenchmark {\n+\n+    @Param({\"1\", \"5\"})\n+    private int kiloBytes;\n+\n+    private File file;\n+\n+    @Setup(Level.Iteration)\n+    public void beforeRun() throws IOException {\n+        var bytes = new byte[kiloBytes * 1024];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        file = File.createTempFile(getClass().getName(), \".txt\");\n+        Files.write(file.toPath(), bytes);\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void afterRun() {\n+        file.delete();\n+    }\n+\n+    @Benchmark\n+    public void readShort(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 2; i++) {\n+            bh.consume(raf.readShort());\n+        }\n+        raf.close();\n+    }\n+\n+    @Benchmark\n+    public void readInt(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 4; i++) {\n+            bh.consume(raf.readInt());\n+        }\n+        raf.close();\n+    }\n+\n+    @Benchmark\n+    public void readLong(Blackhole bh) throws IOException {\n+        RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n+        int size = kiloBytes * 1024;\n+        for (int i = 0; i < size \/ 8; i++) {\n+            bh.consume(raf.readLong());\n+        }\n+        raf.close();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/RandomAccessFileReadBenchmark.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}