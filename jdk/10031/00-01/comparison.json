{"files":[{"patch":"@@ -78,2 +78,0 @@\n-    private final byte[] readBuffer = new byte[8];\n-\n@@ -372,0 +370,4 @@\n+        return (int) read(1);\n+    }\n+\n+   private long read(int length) throws IOException {\n@@ -374,1 +376,1 @@\n-            return read0();\n+            return read0(length);\n@@ -380,1 +382,1 @@\n-    private native int read0() throws IOException;\n+    private native long read0(int length) throws IOException;\n@@ -805,1 +807,1 @@\n-        return (short) readUnsignedShort();\n+        return (short) read(2);\n@@ -829,2 +831,1 @@\n-        readFully(readBuffer, 0, 2);\n-        return Bits.getUnsignedShort(readBuffer, 0);\n+        return (int) read(2);\n@@ -854,1 +855,1 @@\n-        return (char) readUnsignedShort();\n+        return (char) read(2);\n@@ -878,2 +879,1 @@\n-        readFully(readBuffer, 0, 4);\n-        return Bits.getInt(readBuffer, 0);\n+        return (int) read(4);\n@@ -911,2 +911,1 @@\n-        readFully(readBuffer, 0, 8);\n-        return Bits.getLong(readBuffer, 0);\n+        return read(8);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -70,3 +70,3 @@\n-JNIEXPORT jint JNICALL\n-Java_java_io_RandomAccessFile_read0(JNIEnv *env, jobject this) {\n-    return readSingle(env, this, raf_fd);\n+JNIEXPORT jlong JNICALL\n+Java_java_io_RandomAccessFile_read0(JNIEnv *env, jobject this, jint length) {\n+    return readN(env, this, raf_fd, length);\n","filename":"src\/java.base\/share\/native\/libjava\/RandomAccessFile.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,42 @@\n+jlong\n+readN(JNIEnv *env, jobject this, jfieldID fid, jint len) {\n+    if (len == 1) {\n+        return readSingle(env, this, fid);\n+    }\n+    char stackBuf[len];\n+    char *buf = stackBuf;\n+\n+    FD fd = getFD(env, this, fid);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return -1;\n+    }\n+    jint nread = IO_Read(fd, buf, len);\n+    if (nread == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Read error\");\n+        return -1;\n+    }\n+\n+    if (len == 2) {\n+        return ((*buf) << 8) + (*(buf + 1) & 0xFF);\n+    }\n+    if (len == 4) {\n+        return ((*buf) << 24) +\n+               ((*(buf + 1) & 0xFF) << 16) +\n+               ((*(buf + 2) & 0xFF) << 8) +\n+               ((*(buf + 3) & 0xFF));\n+    }\n+    if (len == 8) {\n+        return (((long) *(buf) << 56) +\n+                ((long) (*(buf + 1) & 0xFF) << 48) +\n+                ((long) (*(buf + 2) & 0xFF) << 40) +\n+                ((long) (*(buf + 3) & 0xFF) << 32) +\n+                ((long) (*(buf + 4) & 0xFF) << 24) +\n+                ((*(buf + 5) & 0xFF) << 16) +\n+                ((*(buf + 6) & 0xFF) << 8) +\n+                ((*(buf + 7) & 0xFF)));\n+    }\n+    JNU_ThrowByName(env, \"java\/lang\/IllegalArgumentException\", NULL);\n+    return -1;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+jlong readN(JNIEnv *env, jobject this, jfieldID fid, jint length);\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}