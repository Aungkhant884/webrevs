{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import static sun.net.util.IPAddressUtil.isIPv6LiteralAddress;\n+\n@@ -300,1 +302,0 @@\n-            \/\/ IPv6 literal?\n@@ -302,1 +303,2 @@\n-                (!host.startsWith(\"[\")) && (host.indexOf(':') >= 0)) {\n+                    (host.indexOf(':') >= 0) &&\n+                    isIPv6LiteralAddress(host)) {\n@@ -304,0 +306,2 @@\n+            } else {\n+                host = ParseUtil.encodePath(host);\n@@ -305,0 +309,1 @@\n+            \/\/ IPv6 literal?\n@@ -306,1 +311,1 @@\n-                uri = new URI(\"socket:\/\/\" + ParseUtil.encodePath(host) + \":\"+ epoint.getPort());\n+                uri = new URI(\"socket:\/\/\" + host + \":\"+ epoint.getPort());\n@@ -308,3 +313,1 @@\n-                \/\/ This shouldn't happen\n-                assert false : e;\n-                uri = null;\n+                throw new IOException(\"Failed to select a proxy\", e);\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocksSocketImpl.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.SocketException;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8318130\n+ * @summary Tests that java.net.SocksSocketImpl produces correct arguments\n+ *      for proxy selector\n+ * @run junit SocksSocketProxySelectorTest\n+ *\/\n+public class SocksSocketProxySelectorTest {\n+\n+    public static final String SHORTEN_IPV6 = \"((?<=\\\\[)0)?:(0:)+\";\n+    private static ProxySelector previousDefault;\n+\n+    @BeforeAll\n+    public static void beforeTest() {\n+        previousDefault = ProxySelector.getDefault();\n+        ProxySelector.setDefault(new LoggingProxySelector());\n+    }\n+\n+    @AfterAll\n+    public static void afterTest() {\n+        ProxySelector.setDefault(previousDefault);\n+    }\n+\n+    \/\/ should match the host name\n+    public static Stream<String> ipLiterals() {\n+        return Stream.of(\"127.0.0.1\",\n+                \"[::1]\",\n+                \"[fe80::1%1234567890]\");\n+    }\n+\n+    \/\/ should be wrapped in [ ]\n+    public static Stream<String> shortIpv6Literals() {\n+        return Stream.of(\"::1\",\n+                \"fe80::1%1234567890\");\n+    }\n+\n+    \/\/ with real interface names in scope\n+    \/\/ should be wrapped in [ ], repeated 0's not trimmed\n+    public static Stream<String> linkLocalIpv6Literals() throws SocketException {\n+        return NetworkInterface.networkInterfaces()\n+                        .flatMap(NetworkInterface::inetAddresses)\n+                        .filter(InetAddress::isLinkLocalAddress)\n+                        .map(InetAddress::getHostAddress);\n+    }\n+\n+    public static Stream<InetAddress> hostNames() throws UnknownHostException {\n+        return Stream.of(\n+                InetAddress.getByAddress(\"localhost\", new byte[] {127,0,0,1}),\n+                InetAddress.getByAddress(\"bugs.openjdk.org\", new byte[] {127,0,0,1}),\n+                InetAddress.getByAddress(\"xn--kda4b0koi.com\", new byte[] {127,0,0,1})\n+                );\n+    }\n+\n+    \/**\n+     * Creates a socket connection, which internally triggers proxy selection for the target\n+     * address. The test has been configured to use a {@link LoggingProxySelector ProxySelector}\n+     * which throws an {@link IllegalArgumentException} with hostname in exception message.\n+     * The test then verifies that the hostname matches the expected one.\n+     *\n+     * @throws Exception\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ipLiterals\")\n+    public void testIpLiterals(String host) throws Exception {\n+        try (Socket s1 = new Socket(host, 80)) {\n+            fail(\"IOException was expected to be thrown, but wasn't\");\n+        } catch (IOException ioe) {\n+            \/\/ expected\n+            \/\/ now verify the IOE was thrown for the correct expected reason\n+            if (!(ioe.getCause() instanceof IllegalArgumentException iae)) {\n+                \/\/ rethrow this so that the test output failure will capture the entire\/real\n+                \/\/ cause in its stacktrace\n+                throw ioe;\n+            }\n+            assertNotNull(iae.getMessage(), \"Host not found\");\n+            assertEquals(host,\n+                    iae.getMessage().replaceFirst(SHORTEN_IPV6, \"::\"),\n+                    \"Found unexpected host\");\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"shortIpv6Literals\")\n+    public void testShortIpv6Literals(String host) throws Exception {\n+        try (Socket s1 = new Socket(host, 80)) {\n+            fail(\"IOException was expected to be thrown, but wasn't\");\n+        } catch (IOException ioe) {\n+            \/\/ expected\n+            \/\/ now verify the IOE was thrown for the correct expected reason\n+            if (!(ioe.getCause() instanceof IllegalArgumentException iae)) {\n+                \/\/ rethrow this so that the test output failure will capture the entire\/real\n+                \/\/ cause in its stacktrace\n+                throw ioe;\n+            }\n+            assertNotNull(iae.getMessage(), \"Host not found\");\n+            assertEquals('[' + host + ']',\n+                    iae.getMessage().replaceFirst(SHORTEN_IPV6, \"::\"),\n+                    \"Found unexpected host\");\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"linkLocalIpv6Literals\")\n+    public void testLinkLocalIpv6Literals(String host) throws Exception {\n+        try (Socket s1 = new Socket(host, 80)) {\n+            fail(\"IOException was expected to be thrown, but wasn't\");\n+        } catch (IOException ioe) {\n+            \/\/ expected\n+            \/\/ now verify the IOE was thrown for the correct expected reason\n+            if (!(ioe.getCause() instanceof IllegalArgumentException iae)) {\n+                \/\/ rethrow this so that the test output failure will capture the entire\/real\n+                \/\/ cause in its stacktrace\n+                throw ioe;\n+            }\n+            assertNotNull(iae.getMessage(), \"Host not found\");\n+            assertEquals('[' + host + ']',\n+                    iae.getMessage(),\n+                    \"Found unexpected host\");\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"hostNames\")\n+    public void testHostNames(InetAddress host) throws Exception {\n+        try (Socket s1 = new Socket(host, 80)) {\n+            fail(\"IOException was expected to be thrown, but wasn't\");\n+        } catch (IOException ioe) {\n+            \/\/ expected\n+            \/\/ now verify the IOE was thrown for the correct expected reason\n+            if (!(ioe.getCause() instanceof IllegalArgumentException iae)) {\n+                \/\/ rethrow this so that the test output failure will capture the entire\/real\n+                \/\/ cause in its stacktrace\n+                throw ioe;\n+            }\n+            assertNotNull(iae.getMessage(), \"Host not found\");\n+            assertEquals(host.getHostName(),\n+                    iae.getMessage(),\n+                    \"Found unexpected host\");\n+        }\n+    }\n+\n+    \/**\n+     * A {@link ProxySelector} which throws an IllegalArgumentException\n+     * with the given hostname in exception message\n+     *\/\n+    private static final class LoggingProxySelector extends\n+            ProxySelector {\n+\n+        @Override\n+        public List<Proxy> select(final URI uri) {\n+            throw new IllegalArgumentException(uri.getHost());\n+        }\n+\n+        @Override\n+        public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {\n+\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socks\/SocksSocketProxySelectorTest.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"}]}