{"files":[{"patch":"@@ -12369,0 +12369,1 @@\n+#ifdef _LP64\n@@ -12373,0 +12374,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4560,1 +4560,1 @@\n-  jmp(done);\n+  jmpb(done);\n@@ -4567,1 +4567,5 @@\n-  andnl(rax, rdx, rax);\n+  if (VM_Version::supports_bmi1()) andnl(rax, rdx, rax);\n+  else {\n+    notl(rdx);\n+    andl(rax, rdx);\n+  }\n@@ -4579,1 +4583,1 @@\n-  jmp(done);\n+  jmpb(done);\n@@ -4586,1 +4590,5 @@\n-  andnl(rax, rax, rdx);\n+  if (VM_Version::supports_bmi1()) andnl(rax, rax, rdx);\n+  else {\n+    notl(rax);\n+    andl(rax, rdx);\n+  }\n@@ -4601,1 +4609,1 @@\n-  jmp(done);\n+  jmpb(done);\n@@ -4610,1 +4618,5 @@\n-  andnl(rax, rax, rdx);\n+  if (VM_Version::supports_bmi1()) andnl(rax, rax, rdx);\n+  else {\n+    notl(rax);\n+    andl(rax, rdx);\n+  }\n@@ -4627,1 +4639,1 @@\n-  jmp(done);\n+  jmpb(done);\n@@ -4634,1 +4646,5 @@\n-  andnq(rax, rdx, rax);\n+  if (VM_Version::supports_bmi1()) andnq(rax, rdx, rax);\n+  else {\n+    notq(rdx);\n+    andq(rax, rdx);\n+  }\n@@ -4653,1 +4669,5 @@\n-  andnq(rax, rax, rdx);\n+  if (VM_Version::supports_bmi1()) andnq(rax, rax, rdx);\n+  else {\n+    notq(rax);\n+    andq(rax, rdx);\n+  }\n@@ -4676,1 +4696,5 @@\n-  andnq(rax, rax, rdx);\n+  if (VM_Version::supports_bmi1()) andnq(rax, rax, rdx);\n+  else {\n+    notq(rax);\n+    andq(rax, rdx);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":34,"deletions":10,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test x86 intrinsic for divideUnsigned() and remainderUnsigned() methods for Integer\n+* @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\"\n+* @library \/test\/lib \/\n+* @run driver compiler.intrinsics.TestIntegerDivMod\n+*\/\n+\n+package compiler.intrinsics;\n+import compiler.lib.ir_framework.*;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+\n+\n+public class TestIntegerDivMod {\n+    private final int BUFFER_SIZE = 1024;\n+    private int[] dividends = new int[BUFFER_SIZE];\n+    private int[] divisors = new int[BUFFER_SIZE];\n+    private int[] quotients =  new int[BUFFER_SIZE];\n+    private int[] remainders =  new int[BUFFER_SIZE];\n+    private RandomGenerator rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestIntegerDivMod.class);\n+    }\n+\n+    public TestIntegerDivMod() {\n+        rng = RandomGeneratorFactory.getDefault().create(0);\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            dividends[i] = rng.nextInt();\n+            divisors[i] = rng.nextInt();\n+        }\n+    }\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UDivI\", \">= 1\"}) \/\/ Atleast one UDivI node is generated if intrinsic is used\n+    public void testDivideUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = Integer.divideUnsigned(dividends[i], divisors[i]);\n+        }\n+        checkResult(\"divideUnsigned\");\n+    }\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UModI\", \">= 1\"}) \/\/ Atleast one UModI node is generated if intrinsic is used\n+    public void testRemainderUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            remainders[i] = Integer.remainderUnsigned(dividends[i], divisors[i]);\n+        }\n+        checkResult(\"remainderUnsigned\");\n+    }\n+\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UDivModI\", \">= 1\"}) \/\/ Atleast one UDivModI node is generated if intrinsic is used\n+    public void testDivModUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++)  divmod(dividends[i], divisors[i], i);\n+        checkResult(\"divmodUnsigned\");\n+    }\n+\n+    private void divmod(int dividend, int divisor, int i) {\n+        quotients[i] = Integer.divideUnsigned(dividend, divisor);\n+        remainders[i] = Integer.remainderUnsigned(dividend, divisor);\n+    }\n+\n+    public void checkResult(String mode) {\n+        for (int i=0; i < BUFFER_SIZE; i++) {\n+            long dividend = Integer.toUnsignedLong(dividends[i]);\n+            long divisor = Integer.toUnsignedLong(divisors[i]);\n+\n+            int quo =  (int) (dividend \/ divisor);\n+            int rem = (int) (dividend % divisor);\n+            boolean mismatch;\n+            switch (mode) {\n+                case \"divideUnsigned\": mismatch = (quotients[i] != quo); break;\n+                case \"remainderUnsigned\": mismatch = (remainders[i] != rem); break;\n+                case \"divmodUnsigned\": mismatch = (quotients[i] != quo || remainders[i] != rem); break;\n+                default: throw new IllegalArgumentException(\"incorrect mode\");\n+            }\n+            if (mismatch) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestIntegerDivMod.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test x86 intrinsic for divideUnsigned() and remainderUnsigned() methods for Long\n+* @requires os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\"\n+* @library \/test\/lib \/\n+* @run driver compiler.intrinsics.TestLongDivMod\n+*\/\n+\n+package compiler.intrinsics;\n+import compiler.lib.ir_framework.*;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+\n+\n+public class TestLongDivMod {\n+    private final int BUFFER_SIZE = 1024;\n+    private long[] dividends = new long[BUFFER_SIZE];\n+    private long[] divisors = new long[BUFFER_SIZE];\n+    private long[] quotients =  new long[BUFFER_SIZE];\n+    private long[] remainders =  new long[BUFFER_SIZE];\n+    private RandomGenerator rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestLongDivMod.class);\n+    }\n+\n+    public TestLongDivMod() {\n+        rng = RandomGeneratorFactory.getDefault().create(0);\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            dividends[i] = rng.nextLong();\n+            divisors[i] = rng.nextLong();\n+        }\n+    }\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UDivL\", \">= 1\"}) \/\/ Atleast one UDivL node is generated if intrinsic is used\n+    public void testDivideUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = Long.divideUnsigned(dividends[i], divisors[i]);\n+        }\n+        checkResult(\"divideUnsigned\");\n+    }\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UModL\", \">= 1\"}) \/\/ Atleast one UModL node is generated if intrinsic is used\n+    public void testRemainderUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            remainders[i] = Long.remainderUnsigned(dividends[i], divisors[i]);\n+        }\n+        checkResult(\"remainderUnsigned\");\n+    }\n+\n+\n+    @Test \/\/ needs to be run in (fast) debug mode\n+    @Warmup(10000)\n+    @IR(counts = {\"UDivModL\", \">= 1\"}) \/\/ Atleast one UDivModL node is generated if intrinsic is used\n+    public void testDivModUnsigned() {\n+        for (int i = 0; i < BUFFER_SIZE; i++)  divmod(dividends[i], divisors[i], i);\n+        checkResult(\"divmodUnsigned\");\n+    }\n+\n+    private void divmod(long dividend, long divisor, int i) {\n+        quotients[i] = Long.divideUnsigned(dividend, divisor);\n+        remainders[i] = Long.remainderUnsigned(dividend, divisor);\n+    }\n+\n+    public void checkResult(String mode) {\n+        for (int i=0; i < BUFFER_SIZE; i++) {\n+            long quo =  divideUnsigned(dividends[i], divisors[i]);\n+            long rem = remainderUnsigned(dividends[i], divisors[i]);\n+            boolean mismatch;\n+            switch (mode) {\n+                case \"divideUnsigned\": mismatch = (quotients[i] != quo); break;\n+                case \"remainderUnsigned\": mismatch = (remainders[i] != rem); break;\n+                case \"divmodUnsigned\": mismatch = (quotients[i] != quo || remainders[i] != rem); break;\n+                default: throw new IllegalArgumentException(\"incorrect mode\");\n+            }\n+            if (mismatch) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    private long divideUnsigned(long dividend, long divisor) {\n+        if (divisor >= 0) {\n+            final long q = (dividend >>> 1) \/ divisor << 1;\n+            final long r = dividend - q * divisor;\n+            return q + ((r | ~(r - divisor)) >>> (Long.SIZE - 1));\n+        }\n+        return (dividend & ~(dividend - divisor)) >>> (Long.SIZE - 1);\n+    }\n+\n+    private long remainderUnsigned(long dividend, long divisor) {\n+        if (divisor >= 0) {\n+            final long q = (dividend >>> 1) \/ divisor << 1;\n+            final long r = dividend - q * divisor;\n+            return r - ((~(r - divisor) >> (Long.SIZE - 1)) & divisor);\n+        }\n+        return dividend - (((dividend & ~(dividend - divisor)) >> (Long.SIZE - 1)) & divisor);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestLongDivMod.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}