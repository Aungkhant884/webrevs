{"files":[{"patch":"@@ -26,1 +26,1 @@\n-package javacserver.options;\n+package jdk.internal.opt;\n@@ -29,0 +29,2 @@\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -36,0 +38,7 @@\n+\/*\n+ * This file was originally a copy of CommandLine.java in\n+ * com.sun.tools.javac.main -- and it will be the last.\n+ *\n+ * Find details at https:\/\/bugs.openjdk.org\/browse\/JDK-8236919\n+ *\/\n+\n@@ -38,5 +47,0 @@\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n@@ -44,1 +48,10 @@\n-public class CommandLine {\n+public final class CommandLine {\n+    \/**\n+     * Convenient wrapper for the {@code List}-based parse method.\n+     *\n+     * @see #parse(List)\n+     *\/\n+    public static String[] parse(String... args) throws IOException {\n+        return parse(List.of(args)).toArray(String[]::new);\n+    }\n+\n@@ -93,1 +106,1 @@\n-     * @throws UnmatchedQuote\n+     * @throws CommandLine.UnmatchedQuote\n@@ -106,0 +119,5 @@\n+    public static void loadCmdFile(InputStream in, List<String> args) throws IOException {\n+        Reader reader = new InputStreamReader(in);\n+        loadCmdFileAndCloseReader(reader, args);\n+    }\n+\n@@ -107,1 +125,6 @@\n-        try (Reader r = Files.newBufferedReader(Paths.get(name), Charset.defaultCharset())) {\n+        Reader reader = Files.newBufferedReader(Paths.get(name), Charset.defaultCharset());\n+        loadCmdFileAndCloseReader(reader, args);\n+    }\n+\n+    private static void loadCmdFileAndCloseReader(Reader r, List<String> args) throws IOException {\n+        try (r) {\n","filename":"src\/jdk.internal.opt\/share\/classes\/jdk\/internal\/opt\/CommandLine.java","additions":32,"deletions":9,"binary":false,"changes":41,"previous_filename":"make\/langtools\/tools\/javacserver\/options\/CommandLine.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    exports jdk.internal.opt to jdk.jartool, jdk.jlink, jdk.jpackage;\n","filename":"src\/jdk.internal.opt\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    requires jdk.internal.opt;\n+\n","filename":"src\/jdk.jartool\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.tools.jar;\n-\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.FileReader;\n-import java.io.BufferedReader;\n-import java.io.StreamTokenizer;\n-import java.util.List;\n-import java.util.ArrayList;\n-\n-\/**\n- * Various utility methods for processing Java tool command line arguments.\n- *\n- *  <p><b>This is NOT part of any API supported by Oracle.  If\n- *  you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class CommandLine {\n-    \/**\n-     * Process Win32-style command files for the specified command line\n-     * arguments and return the resulting arguments. A command file argument\n-     * is of the form '@file' where 'file' is the name of the file whose\n-     * contents are to be parsed for additional arguments. The contents of\n-     * the command file are parsed using StreamTokenizer and the original\n-     * '@file' argument replaced with the resulting tokens. Recursive command\n-     * files are not supported. The '@' character itself can be quoted with\n-     * the sequence '@@'.\n-     *\/\n-    public static String[] parse(String[] args)\n-        throws IOException\n-    {\n-        List<String> newArgs = new ArrayList<>(args.length);\n-        for (int i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.length() > 1 && arg.charAt(0) == '@') {\n-                arg = arg.substring(1);\n-                if (arg.charAt(0) == '@') {\n-                    newArgs.add(arg);\n-                } else {\n-                    loadCmdFile(arg, newArgs);\n-                }\n-            } else {\n-                newArgs.add(arg);\n-            }\n-        }\n-        return newArgs.toArray(new String[newArgs.size()]);\n-    }\n-\n-    private static void loadCmdFile(String name, List<String> args)\n-        throws IOException\n-    {\n-        Reader r = new BufferedReader(new FileReader(name));\n-        StreamTokenizer st = new StreamTokenizer(r);\n-        st.resetSyntax();\n-        st.wordChars(' ', 255);\n-        st.whitespaceChars(0, ' ');\n-        st.commentChar('#');\n-        st.quoteChar('\"');\n-        st.quoteChar('\\'');\n-        while (st.nextToken() != StreamTokenizer.TT_EOF) {\n-            args.add(st.sval);\n-        }\n-        r.close();\n-    }\n-}\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/CommandLine.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -71,0 +71,1 @@\n+import jdk.internal.opt.CommandLine;\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.tools.jlink.internal;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n-import java.util.List;\n-\n-\/**\n- * This file was originally a copy of CommandLine.java in\n- * com.sun.tools.javac.main.\n- * It should track changes made to that file.\n- *\/\n-\n-\/**\n- * Various utility methods for processing Java tool command line arguments.\n- *\/\n-public class CommandLine {\n-\n-    static void loadCmdFile(InputStream in, List<String> args)\n-            throws IOException {\n-        try (Reader r = new InputStreamReader(in)) {\n-            Tokenizer t = new Tokenizer(r);\n-            String s;\n-            while ((s = t.nextToken()) != null) {\n-                args.add(s);\n-            }\n-        }\n-    }\n-    public static class Tokenizer {\n-        private final Reader in;\n-        private int ch;\n-\n-        public Tokenizer(Reader in) throws IOException {\n-            this.in = in;\n-            ch = in.read();\n-        }\n-\n-        public String nextToken() throws IOException {\n-            skipWhite();\n-            if (ch == -1) {\n-                return null;\n-            }\n-\n-            StringBuilder sb = new StringBuilder();\n-            char quoteChar = 0;\n-\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\f':\n-                        if (quoteChar == 0) {\n-                            return sb.toString();\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    case '\\n':\n-                    case '\\r':\n-                        return sb.toString();\n-\n-                    case '\\'':\n-                    case '\"':\n-                        if (quoteChar == 0) {\n-                            quoteChar = (char) ch;\n-                        } else if (quoteChar == ch) {\n-                            quoteChar = 0;\n-                        } else {\n-                            sb.append((char) ch);\n-                        }\n-                        break;\n-\n-                    case '\\\\':\n-                        if (quoteChar != 0) {\n-                            ch = in.read();\n-                            switch (ch) {\n-                                case '\\n':\n-                                case '\\r':\n-                                    while (ch == ' ' || ch == '\\n'\n-                                            || ch == '\\r' || ch == '\\t'\n-                                            || ch == '\\f') {\n-                                        ch = in.read();\n-                                    }\n-                                    continue;\n-\n-                                case 'n':\n-                                    ch = '\\n';\n-                                    break;\n-                                case 'r':\n-                                    ch = '\\r';\n-                                    break;\n-                                case 't':\n-                                    ch = '\\t';\n-                                    break;\n-                                case 'f':\n-                                    ch = '\\f';\n-                                    break;\n-                                default:\n-                                    break;\n-                            }\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    default:\n-                        sb.append((char) ch);\n-                }\n-\n-                ch = in.read();\n-            }\n-\n-            return sb.toString();\n-        }\n-\n-        void skipWhite() throws IOException {\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                        break;\n-\n-                    case '#':\n-                        ch = in.read();\n-                        while (ch != '\\n' && ch != '\\r' && ch != -1) {\n-                            ch = in.read();\n-                        }\n-                        break;\n-\n-                    default:\n-                        return;\n-                }\n-\n-                ch = in.read();\n-            }\n-        }\n-    }\n-}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/CommandLine.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,1 @@\n+import jdk.internal.opt.CommandLine;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,215 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.main;\n-\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.nio.charset.Charset;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * This file was originally a copy of CommandLine.java in\n- * com.sun.tools.javac.main.\n- * It should track changes made to that file.\n- *\/\n-\n-\/**\n- * Various utility methods for processing Java tool command line arguments.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-class CommandLine {\n-    \/**\n-     * Process Win32-style command files for the specified command line\n-     * arguments and return the resulting arguments. A command file argument\n-     * is of the form '@file' where 'file' is the name of the file whose\n-     * contents are to be parsed for additional arguments. The contents of\n-     * the command file are parsed using StreamTokenizer and the original\n-     * '@file' argument replaced with the resulting tokens. Recursive command\n-     * files are not supported. The '@' character itself can be quoted with\n-     * the sequence '@@'.\n-     * @param args the arguments that may contain @files\n-     * @return the arguments, with @files expanded\n-     * @throws IOException if there is a problem reading any of the @files\n-     *\/\n-    public static String[] parse(String[] args) throws IOException {\n-        List<String> newArgs = new ArrayList<>();\n-        appendParsedCommandArgs(newArgs, Arrays.asList(args));\n-        return newArgs.toArray(new String[newArgs.size()]);\n-    }\n-\n-    private static void appendParsedCommandArgs(List<String> newArgs,\n-            List<String> args) throws IOException {\n-        for (String arg : args) {\n-            if (arg.length() > 1 && arg.charAt(0) == '@') {\n-                arg = arg.substring(1);\n-                if (arg.charAt(0) == '@') {\n-                    newArgs.add(arg);\n-                } else {\n-                    loadCmdFile(arg, newArgs);\n-                }\n-            } else {\n-                newArgs.add(arg);\n-            }\n-        }\n-    }\n-\n-    private static void loadCmdFile(String name, List<String> args)\n-            throws IOException {\n-        if (!Files.isReadable(Path.of(name))) {\n-            throw new FileNotFoundException(name);\n-        }\n-        try (Reader r = Files.newBufferedReader(Paths.get(name),\n-                Charset.defaultCharset())) {\n-            Tokenizer t = new Tokenizer(r);\n-            String s;\n-            while ((s = t.nextToken()) != null) {\n-                args.add(s);\n-            }\n-        }\n-    }\n-\n-    public static class Tokenizer {\n-        private final Reader in;\n-        private int ch;\n-\n-        public Tokenizer(Reader in) throws IOException {\n-            this.in = in;\n-            ch = in.read();\n-        }\n-\n-        public String nextToken() throws IOException {\n-            skipWhite();\n-            if (ch == -1) {\n-                return null;\n-            }\n-\n-            StringBuilder sb = new StringBuilder();\n-            char quoteChar = 0;\n-\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\f':\n-                        if (quoteChar == 0) {\n-                            return sb.toString();\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    case '\\n':\n-                    case '\\r':\n-                        return sb.toString();\n-\n-                    case '\\'':\n-                    case '\"':\n-                        if (quoteChar == 0) {\n-                            quoteChar = (char) ch;\n-                        } else if (quoteChar == ch) {\n-                            quoteChar = 0;\n-                        } else {\n-                            sb.append((char) ch);\n-                        }\n-                        break;\n-\n-                    case '\\\\':\n-                        if (quoteChar != 0) {\n-                            ch = in.read();\n-                            switch (ch) {\n-                                case '\\n':\n-                                case '\\r':\n-                                    while (ch == ' ' || ch == '\\n'\n-                                            || ch == '\\r' || ch == '\\t'\n-                                            || ch == '\\f') {\n-                                        ch = in.read();\n-                                    }\n-                                    continue;\n-\n-                                case 'n':\n-                                    ch = '\\n';\n-                                    break;\n-                                case 'r':\n-                                    ch = '\\r';\n-                                    break;\n-                                case 't':\n-                                    ch = '\\t';\n-                                    break;\n-                                case 'f':\n-                                    ch = '\\f';\n-                                    break;\n-                                default:\n-                                    break;\n-                            }\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    default:\n-                        sb.append((char) ch);\n-                }\n-\n-                ch = in.read();\n-            }\n-\n-            return sb.toString();\n-        }\n-\n-        void skipWhite() throws IOException {\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                        break;\n-\n-                    case '#':\n-                        ch = in.read();\n-                        while (ch != '\\n' && ch != '\\r' && ch != -1) {\n-                            ch = in.read();\n-                        }\n-                        break;\n-\n-                    default:\n-                        return;\n-                }\n-\n-                ch = in.read();\n-            }\n-        }\n-    }\n-}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/main\/CommandLine.java","additions":0,"deletions":215,"binary":false,"changes":215,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.opt.CommandLine;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/main\/Main.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    requires jdk.internal.opt;\n","filename":"src\/jdk.jpackage\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}