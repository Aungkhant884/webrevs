{"files":[{"patch":"@@ -42,0 +42,3 @@\n+#define DECLARE_INT_CPU_FEATURE_CONSTANT(id, name, bit) GENERATE_VM_INT_CONSTANT_ENTRY(VM_Version::CPU_##id)\n+#define VM_INT_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_INT_CPU_FEATURE_CONSTANT)\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vmStructs_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -198,10 +198,3 @@\n-  if (_features & CPU_ASIMD) strcat(buf, \", simd\");\n-  if (_features & CPU_CRC32) strcat(buf, \", crc\");\n-  if (_features & CPU_AES)   strcat(buf, \", aes\");\n-  if (_features & CPU_SHA1)  strcat(buf, \", sha1\");\n-  if (_features & CPU_SHA2)  strcat(buf, \", sha256\");\n-  if (_features & CPU_SHA3) strcat(buf, \", sha3\");\n-  if (_features & CPU_SHA512) strcat(buf, \", sha512\");\n-  if (_features & CPU_LSE) strcat(buf, \", lse\");\n-  if (_features & CPU_SVE) strcat(buf, \", sve\");\n-  if (_features & CPU_SVE2) strcat(buf, \", sve2\");\n+#define ADD_FEATURE_IF_SUPPORTED(id, name, bit) if (_features & CPU_##id) strcat(buf, \", \" name);\n+  CPU_FEATURE_FLAGS(ADD_FEATURE_IF_SUPPORTED)\n+#undef ADD_FEATURE_IF_SUPPORTED\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -100,17 +100,21 @@\n-    CPU_FP           = (1<<0),\n-    CPU_ASIMD        = (1<<1),\n-    CPU_EVTSTRM      = (1<<2),\n-    CPU_AES          = (1<<3),\n-    CPU_PMULL        = (1<<4),\n-    CPU_SHA1         = (1<<5),\n-    CPU_SHA2         = (1<<6),\n-    CPU_CRC32        = (1<<7),\n-    CPU_LSE          = (1<<8),\n-    CPU_DCPOP        = (1<<16),\n-    CPU_SHA3         = (1<<17),\n-    CPU_SHA512       = (1<<21),\n-    CPU_SVE          = (1<<22),\n-    \/\/ flags above must follow Linux HWCAP\n-    CPU_SVE2         = (1<<28),\n-    CPU_STXR_PREFETCH= (1<<29),\n-    CPU_A53MAC       = (1<<30),\n+#define CPU_FEATURE_FLAGS(decl)               \\\n+    decl(FP,            \"fp\",            0)   \\\n+    decl(ASIMD,         \"simd\",          1)   \\\n+    decl(EVTSTRM,       \"evtstrm\",       2)   \\\n+    decl(AES,           \"aes\",           3)   \\\n+    decl(PMULL,         \"pmull\",         4)   \\\n+    decl(SHA1,          \"sha1\",          5)   \\\n+    decl(SHA2,          \"sha256\",        6)   \\\n+    decl(CRC32,         \"crc\",           7)   \\\n+    decl(LSE,           \"lse\",           8)   \\\n+    decl(DCPOP,         \"dcpop\",         16)  \\\n+    decl(SHA3,          \"sha3\",          17)  \\\n+    decl(SHA512,        \"sha512\",        21)  \\\n+    decl(SVE,           \"sve\",           22)  \\\n+    \/* flags above must follow Linux HWCAP *\/ \\\n+    decl(SVE2,          \"sve2\",          28)  \\\n+    decl(STXR_PREFETCH, \"stxr_prefetch\", 29)  \\\n+    decl(A53MAC,        \"a53mac\",        30)\n+#define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1 << bit),\n+    CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_FLAG)\n+#undef DECLARE_CPU_FEATURE_FLAG\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -42,47 +42,4 @@\n-#define VM_LONG_CONSTANTS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant) \\\n-  declare_constant(VM_Version::CPU_CX8)                             \\\n-  declare_constant(VM_Version::CPU_CMOV)                            \\\n-  declare_constant(VM_Version::CPU_FXSR)                            \\\n-  declare_constant(VM_Version::CPU_HT)                              \\\n-  declare_constant(VM_Version::CPU_MMX)                             \\\n-  declare_constant(VM_Version::CPU_3DNOW_PREFETCH)                  \\\n-  declare_constant(VM_Version::CPU_SSE)                             \\\n-  declare_constant(VM_Version::CPU_SSE2)                            \\\n-  declare_constant(VM_Version::CPU_SSE3)                            \\\n-  declare_constant(VM_Version::CPU_SSSE3)                           \\\n-  declare_constant(VM_Version::CPU_SSE4A)                           \\\n-  declare_constant(VM_Version::CPU_SSE4_1)                          \\\n-  declare_constant(VM_Version::CPU_SSE4_2)                          \\\n-  declare_constant(VM_Version::CPU_POPCNT)                          \\\n-  declare_constant(VM_Version::CPU_LZCNT)                           \\\n-  declare_constant(VM_Version::CPU_TSC)                             \\\n-  declare_constant(VM_Version::CPU_TSCINV)                          \\\n-  declare_constant(VM_Version::CPU_AVX)                             \\\n-  declare_constant(VM_Version::CPU_AVX2)                            \\\n-  declare_constant(VM_Version::CPU_AES)                             \\\n-  declare_constant(VM_Version::CPU_ERMS)                            \\\n-  declare_constant(VM_Version::CPU_CLMUL)                           \\\n-  declare_constant(VM_Version::CPU_BMI1)                            \\\n-  declare_constant(VM_Version::CPU_BMI2)                            \\\n-  declare_constant(VM_Version::CPU_RTM)                             \\\n-  declare_constant(VM_Version::CPU_ADX)                             \\\n-  declare_constant(VM_Version::CPU_AVX512F)                         \\\n-  declare_constant(VM_Version::CPU_AVX512DQ)                        \\\n-  declare_constant(VM_Version::CPU_AVX512PF)                        \\\n-  declare_constant(VM_Version::CPU_AVX512ER)                        \\\n-  declare_constant(VM_Version::CPU_AVX512CD)                        \\\n-  declare_constant(VM_Version::CPU_AVX512BW)                        \\\n-  declare_constant(VM_Version::CPU_AVX512VL)                        \\\n-  declare_constant(VM_Version::CPU_SHA)                             \\\n-  declare_constant(VM_Version::CPU_FMA)                             \\\n-  declare_constant(VM_Version::CPU_VZEROUPPER)                      \\\n-  declare_constant(VM_Version::CPU_AVX512_VPOPCNTDQ)                \\\n-  declare_constant(VM_Version::CPU_AVX512_VPCLMULQDQ)               \\\n-  declare_constant(VM_Version::CPU_AVX512_VAES)                     \\\n-  declare_constant(VM_Version::CPU_AVX512_VNNI)                     \\\n-  declare_constant(VM_Version::CPU_FLUSH)                           \\\n-  declare_constant(VM_Version::CPU_FLUSHOPT)                        \\\n-  declare_constant(VM_Version::CPU_CLWB)                            \\\n-  declare_constant(VM_Version::CPU_AVX512_VBMI2)                    \\\n-  declare_constant(VM_Version::CPU_AVX512_VBMI)                     \\\n-  declare_constant(VM_Version::CPU_HV)\n+#define VM_LONG_CONSTANTS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant)\n+\n+#define DECLARE_LONG_CPU_FEATURE_CONSTANT(id, name, bit) GENERATE_VM_LONG_CONSTANT_ENTRY(VM_Version::CPU_##id)\n+#define VM_LONG_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n","filename":"src\/hotspot\/cpu\/x86\/vmStructs_x86.hpp","additions":4,"deletions":47,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -48,1 +48,4 @@\n-const char* VM_Version::_features_names[] = { FEATURES_NAMES };\n+\n+#define DECLARE_CPU_FEATURE_NAME(id, name, bit) name,\n+const char* VM_Version::_features_names[] = { CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_NAME)};\n+#undef DECLARE_CPU_FEATURE_FLAG\n@@ -785,1 +788,0 @@\n-  assert(log2i_exact((uint64_t)CPU_MAX_FEATURE) + 1 == sizeof(_features_names) \/ sizeof(char*), \"wrong size features_names\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -303,61 +303,63 @@\n-    CPU_CX8               = (1ULL << 0), \/\/ next bits are from cpuid 1 (EDX)\n-    CPU_CMOV              = (1ULL << 1),\n-    CPU_FXSR              = (1ULL << 2),\n-    CPU_HT                = (1ULL << 3),\n-\n-    CPU_MMX               = (1ULL << 4),\n-    CPU_3DNOW_PREFETCH    = (1ULL << 5), \/\/ Processor supports 3dnow prefetch and prefetchw instructions\n-                                         \/\/ may not necessarily support other 3dnow instructions\n-    CPU_SSE               = (1ULL << 6),\n-    CPU_SSE2              = (1ULL << 7),\n-\n-    CPU_SSE3              = (1ULL << 8),  \/\/ SSE3 comes from cpuid 1 (ECX)\n-    CPU_SSSE3             = (1ULL << 9),\n-    CPU_SSE4A             = (1ULL << 10),\n-    CPU_SSE4_1            = (1ULL << 11),\n-\n-    CPU_SSE4_2            = (1ULL << 12),\n-    CPU_POPCNT            = (1ULL << 13),\n-    CPU_LZCNT             = (1ULL << 14),\n-    CPU_TSC               = (1ULL << 15),\n-\n-    CPU_TSCINV_BIT        = (1ULL << 16),\n-    CPU_TSCINV            = (1ULL << 17),\n-    CPU_AVX               = (1ULL << 18),\n-    CPU_AVX2              = (1ULL << 19),\n-\n-    CPU_AES               = (1ULL << 20),\n-    CPU_ERMS              = (1ULL << 21), \/\/ enhanced 'rep movsb\/stosb' instructions\n-    CPU_CLMUL             = (1ULL << 22), \/\/ carryless multiply for CRC\n-    CPU_BMI1              = (1ULL << 23),\n-\n-    CPU_BMI2              = (1ULL << 24),\n-    CPU_RTM               = (1ULL << 25), \/\/ Restricted Transactional Memory instructions\n-    CPU_ADX               = (1ULL << 26),\n-    CPU_AVX512F           = (1ULL << 27), \/\/ AVX 512bit foundation instructions\n-\n-    CPU_AVX512DQ          = (1ULL << 28),\n-    CPU_AVX512PF          = (1ULL << 29),\n-    CPU_AVX512ER          = (1ULL << 30),\n-    CPU_AVX512CD          = (1ULL << 31),\n-\n-    CPU_AVX512BW          = (1ULL << 32), \/\/ Byte and word vector instructions\n-    CPU_AVX512VL          = (1ULL << 33), \/\/ EVEX instructions with smaller vector length\n-    CPU_SHA               = (1ULL << 34), \/\/ SHA instructions\n-    CPU_FMA               = (1ULL << 35), \/\/ FMA instructions\n-\n-    CPU_VZEROUPPER        = (1ULL << 36), \/\/ Vzeroupper instruction\n-    CPU_AVX512_VPOPCNTDQ  = (1ULL << 37), \/\/ Vector popcount\n-    CPU_AVX512_VPCLMULQDQ = (1ULL << 38), \/\/ Vector carryless multiplication\n-    CPU_AVX512_VAES       = (1ULL << 39), \/\/ Vector AES instruction\n-\n-    CPU_AVX512_VNNI       = (1ULL << 40), \/\/ Vector Neural Network Instructions\n-    CPU_FLUSH             = (1ULL << 41), \/\/ flush instruction\n-    CPU_FLUSHOPT          = (1ULL << 42), \/\/ flusopth instruction\n-    CPU_CLWB              = (1ULL << 43), \/\/ clwb instruction\n-\n-    CPU_AVX512_VBMI2      = (1ULL << 44), \/\/ VBMI2 shift left double instructions\n-    CPU_AVX512_VBMI       = (1ULL << 45), \/\/ Vector BMI instructions\n-    CPU_HV                = (1ULL << 46), \/\/ Hypervisor instructions\n-\n-    CPU_MAX_FEATURE       = CPU_HV\n+#define CPU_FEATURE_FLAGS(decl) \\\n+    decl(CX8,               \"cx8\",               0)  \/*  next bits are from cpuid 1 (EDX) *\/ \\\n+    decl(CMOV,              \"cmov\",              1)  \\\n+    decl(FXSR,              \"fxsr\",              2)  \\\n+    decl(HT,                \"ht\",                3)  \\\n+                                                     \\\n+    decl(MMX,               \"mmx\",               4)  \\\n+    decl(3DNOW_PREFETCH,    \"3dnowpref\",         5)  \/* Processor supports 3dnow prefetch and prefetchw instructions *\/ \\\n+                                                     \/* may not necessarily support other 3dnow instructions *\/ \\\n+    decl(SSE,               \"sse\",               6)  \\\n+    decl(SSE2,              \"sse2\",              7)  \\\n+                                                     \\\n+    decl(SSE3,              \"sse3\",              8 ) \/* SSE3 comes from cpuid 1 (ECX) *\/ \\\n+    decl(SSSE3,             \"ssse3\",             9 ) \\\n+    decl(SSE4A,             \"sse4a\",             10) \\\n+    decl(SSE4_1,            \"sse4.1\",            11) \\\n+                                                     \\\n+    decl(SSE4_2,            \"sse4.2\",            12) \\\n+    decl(POPCNT,            \"popcnt\",            13) \\\n+    decl(LZCNT,             \"lzcnt\",             14) \\\n+    decl(TSC,               \"tsc\",               15) \\\n+                                                     \\\n+    decl(TSCINV_BIT,        \"tscinvbit\",         16) \\\n+    decl(TSCINV,            \"tscinv\",            17) \\\n+    decl(AVX,               \"avx\",               18) \\\n+    decl(AVX2,              \"avx2\",              19) \\\n+                                                     \\\n+    decl(AES,               \"aes\",               20) \\\n+    decl(ERMS,              \"erms\",              21) \/* enhanced 'rep movsb\/stosb' instructions *\/ \\\n+    decl(CLMUL,             \"clmul\",             22) \/* carryless multiply for CRC *\/ \\\n+    decl(BMI1,              \"bmi1\",              23) \\\n+                                                     \\\n+    decl(BMI2,              \"bmi2\",              24) \\\n+    decl(RTM,               \"rtm\",               25) \/* Restricted Transactional Memory instructions *\/ \\\n+    decl(ADX,               \"adx\",               26) \\\n+    decl(AVX512F,           \"avx512f\",           27) \/* AVX 512bit foundation instructions *\/ \\\n+                                                     \\\n+    decl(AVX512DQ,          \"avx512dq\",          28) \\\n+    decl(AVX512PF,          \"avx512pf\",          29) \\\n+    decl(AVX512ER,          \"avx512er\",          30) \\\n+    decl(AVX512CD,          \"avx512cd\",          31) \\\n+                                                     \\\n+    decl(AVX512BW,          \"avx512bw\",          32) \/* Byte and word vector instructions *\/ \\\n+    decl(AVX512VL,          \"avx512vl\",          33) \/* EVEX instructions with smaller vector length *\/ \\\n+    decl(SHA,               \"sha\",               34) \/* SHA instructions *\/ \\\n+    decl(FMA,               \"fma\",               35) \/* FMA instructions *\/ \\\n+                                                     \\\n+    decl(VZEROUPPER,        \"vzeroupper\",        36) \/* Vzeroupper instruction *\/ \\\n+    decl(AVX512_VPOPCNTDQ,  \"avx512_vpopcntdq\",  37) \/* Vector popcount *\/ \\\n+    decl(AVX512_VPCLMULQDQ, \"avx512_vpclmulqdq\", 38) \/* Vector carryless multiplication *\/ \\\n+    decl(AVX512_VAES,       \"avx512_vaes\",       39) \/* Vector AES instruction *\/ \\\n+                                                     \\\n+    decl(AVX512_VNNI,       \"avx512_vnni\",       40) \/* Vector Neural Network Instructions *\/ \\\n+    decl(FLUSH,             \"clflush\",           41) \/* flush instruction *\/ \\\n+    decl(FLUSHOPT,          \"clflushopt\",        42) \/* flusopth instruction *\/ \\\n+    decl(CLWB,              \"clwb\",              43) \/* clwb instruction *\/ \\\n+                                                     \\\n+    decl(AVX512_VBMI2,      \"avx512_vbmi2\",      44) \/* VBMI2 shift left double instructions *\/ \\\n+    decl(AVX512_VBMI,       \"avx512_vbmi\",       45) \/* Vector BMI instructions *\/ \\\n+    decl(HV,                \"hv\",                46) \/* Hypervisor instructions *\/\n+#define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1ULL << bit),\n+    CPU_FEATURE_FLAGS(DECLARE_CPU_FEATURE_FLAG)\n+#undef DECLARE_CPU_FEATURE_FLAG\n@@ -366,14 +368,0 @@\n-#define FEATURES_NAMES \\\n-    \"cx8\",          \"cmov\",             \"fxsr\",              \"ht\",          \\\n-    \"mmx\",          \"3dnowpref\",        \"sse\",               \"sse2\",        \\\n-    \"sse3\",         \"ssse3\",            \"sse4a\",             \"sse4.1\",      \\\n-    \"sse4.2\",       \"popcnt\",           \"lzcnt\",             \"tsc\",         \\\n-    \"tscinvbit\",    \"tscinv\",           \"avx\",               \"avx2\",        \\\n-    \"aes\",          \"erms\",             \"clmul\",             \"bmi1\",        \\\n-    \"bmi2\",         \"rtm\",              \"adx\",               \"avx512f\",     \\\n-    \"avx512dq\",     \"avx512pf\",         \"avx512er\",          \"avx512cd\",    \\\n-    \"avx512bw\",     \"avx512vl\",         \"sha\",               \"fma\",         \\\n-    \"vzeroupper\",   \"avx512_vpopcntdq\", \"avx512_vpclmulqdq\", \"avx512_vaes\", \\\n-    \"avx512_vnni\",  \"clflush\",          \"clflushopt\",        \"clwb\",        \\\n-    \"avx512_vmbi2\", \"avx512_vmbi\",      \"hv\"\n-\n@@ -382,2 +370,0 @@\n-  \/\/ NB! When adding new CPU feature detection consider updating vmStructs_x86.hpp, vmStructs_jvmci.hpp, and VM_Version::get_processor_features().\n-\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":63,"deletions":77,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -752,12 +752,2 @@\n-#define VM_INT_CONSTANTS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant) \\\n-  declare_constant(VM_Version::CPU_FP)                  \\\n-  declare_constant(VM_Version::CPU_ASIMD)               \\\n-  declare_constant(VM_Version::CPU_EVTSTRM)             \\\n-  declare_constant(VM_Version::CPU_AES)                 \\\n-  declare_constant(VM_Version::CPU_PMULL)               \\\n-  declare_constant(VM_Version::CPU_SHA1)                \\\n-  declare_constant(VM_Version::CPU_SHA2)                \\\n-  declare_constant(VM_Version::CPU_CRC32)               \\\n-  declare_constant(VM_Version::CPU_LSE)                 \\\n-  declare_constant(VM_Version::CPU_STXR_PREFETCH)       \\\n-  declare_constant(VM_Version::CPU_A53MAC)\n+#define DECLARE_INT_CPU_FEATURE_CONSTANT(id, name, bit) GENERATE_VM_INT_CONSTANT_ENTRY(VM_Version::CPU_##id)\n+#define VM_INT_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_INT_CPU_FEATURE_CONSTANT)\n@@ -767,1 +757,0 @@\n-\n@@ -779,47 +768,2 @@\n-#define VM_LONG_CONSTANTS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant) \\\n-  declare_constant(VM_Version::CPU_CX8)                             \\\n-  declare_constant(VM_Version::CPU_CMOV)                            \\\n-  declare_constant(VM_Version::CPU_FXSR)                            \\\n-  declare_constant(VM_Version::CPU_HT)                              \\\n-  declare_constant(VM_Version::CPU_MMX)                             \\\n-  declare_constant(VM_Version::CPU_3DNOW_PREFETCH)                  \\\n-  declare_constant(VM_Version::CPU_SSE)                             \\\n-  declare_constant(VM_Version::CPU_SSE2)                            \\\n-  declare_constant(VM_Version::CPU_SSE3)                            \\\n-  declare_constant(VM_Version::CPU_SSSE3)                           \\\n-  declare_constant(VM_Version::CPU_SSE4A)                           \\\n-  declare_constant(VM_Version::CPU_SSE4_1)                          \\\n-  declare_constant(VM_Version::CPU_SSE4_2)                          \\\n-  declare_constant(VM_Version::CPU_POPCNT)                          \\\n-  declare_constant(VM_Version::CPU_LZCNT)                           \\\n-  declare_constant(VM_Version::CPU_TSC)                             \\\n-  declare_constant(VM_Version::CPU_TSCINV)                          \\\n-  declare_constant(VM_Version::CPU_AVX)                             \\\n-  declare_constant(VM_Version::CPU_AVX2)                            \\\n-  declare_constant(VM_Version::CPU_AES)                             \\\n-  declare_constant(VM_Version::CPU_ERMS)                            \\\n-  declare_constant(VM_Version::CPU_CLMUL)                           \\\n-  declare_constant(VM_Version::CPU_BMI1)                            \\\n-  declare_constant(VM_Version::CPU_BMI2)                            \\\n-  declare_constant(VM_Version::CPU_RTM)                             \\\n-  declare_constant(VM_Version::CPU_ADX)                             \\\n-  declare_constant(VM_Version::CPU_AVX512F)                         \\\n-  declare_constant(VM_Version::CPU_AVX512DQ)                        \\\n-  declare_constant(VM_Version::CPU_AVX512PF)                        \\\n-  declare_constant(VM_Version::CPU_AVX512ER)                        \\\n-  declare_constant(VM_Version::CPU_AVX512CD)                        \\\n-  declare_constant(VM_Version::CPU_AVX512BW)                        \\\n-  declare_constant(VM_Version::CPU_AVX512VL)                        \\\n-  declare_constant(VM_Version::CPU_SHA)                             \\\n-  declare_constant(VM_Version::CPU_FMA)                             \\\n-  declare_constant(VM_Version::CPU_VZEROUPPER)                      \\\n-  declare_constant(VM_Version::CPU_AVX512_VPOPCNTDQ)                \\\n-  declare_constant(VM_Version::CPU_AVX512_VPCLMULQDQ)               \\\n-  declare_constant(VM_Version::CPU_AVX512_VAES)                     \\\n-  declare_constant(VM_Version::CPU_AVX512_VNNI)                     \\\n-  declare_constant(VM_Version::CPU_FLUSH)                           \\\n-  declare_constant(VM_Version::CPU_FLUSHOPT)                        \\\n-  declare_constant(VM_Version::CPU_CLWB)                            \\\n-  declare_constant(VM_Version::CPU_AVX512_VBMI2)                    \\\n-  declare_constant(VM_Version::CPU_AVX512_VBMI)                     \\\n-  declare_constant(VM_Version::CPU_HV)\n+#define DECLARE_LONG_CPU_FEATURE_CONSTANT(id, name, bit) GENERATE_VM_LONG_CONSTANT_ENTRY(VM_Version::CPU_##id)\n+#define VM_LONG_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n@@ -902,1 +846,3 @@\n-\n+#ifdef VM_INT_CPU_FEATURE_CONSTANTS\n+  VM_INT_CPU_FEATURE_CONSTANTS\n+#endif\n@@ -915,1 +861,3 @@\n-\n+#ifdef VM_LONG_CPU_FEATURE_CONSTANTS\n+  VM_LONG_CPU_FEATURE_CONSTANTS\n+#endif\n@@ -918,0 +866,1 @@\n+#undef DECLARE_CPU_FEATURE_FLAG\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":11,"deletions":62,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2916,0 +2916,3 @@\n+#ifdef VM_INT_CPU_FEATURE_CONSTANTS\n+  VM_INT_CPU_FEATURE_CONSTANTS\n+#endif\n@@ -2949,0 +2952,3 @@\n+#ifdef VM_LONG_CPU_FEATURE_CONSTANTS\n+  VM_LONG_CPU_FEATURE_CONSTANTS\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.vm.ci.code.CPUFeatureName;\n@@ -165,1 +166,1 @@\n-    public enum CPUFeature {\n+    public enum CPUFeature implements CPUFeatureName {\n@@ -175,0 +176,5 @@\n+        DCPOP,\n+        SHA3,\n+        SHA512,\n+        SVE,\n+        SVE2,\n@@ -176,1 +182,1 @@\n-        A53MAC\n+        A53MAC,\n@@ -201,0 +207,1 @@\n+    @Override\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.aarch64\/src\/jdk\/vm\/ci\/aarch64\/AArch64.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.vm.ci.code.CPUFeatureName;\n@@ -174,1 +175,1 @@\n-    public enum CPUFeature {\n+    public enum CPUFeature implements CPUFeatureName {\n@@ -192,0 +193,1 @@\n+        TSCINV_BIT,\n@@ -209,1 +211,12 @@\n-        FMA\n+        FMA,\n+        VZEROUPPER,\n+        AVX512_VPOPCNTDQ,\n+        AVX512_VPCLMULQDQ,\n+        AVX512_VAES,\n+        AVX512_VNNI,\n+        FLUSH,\n+        FLUSHOPT,\n+        CLWB,\n+        AVX512_VBMI2,\n+        AVX512_VBMI,\n+        HV,\n@@ -241,0 +254,1 @@\n+    @Override\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.amd64\/src\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Set;\n@@ -93,0 +94,5 @@\n+    \/**\n+     * Gets the set of CPU features supported by the current platform.\n+     *\/\n+    public abstract Set<? extends CPUFeatureName> getFeatures();\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/Architecture.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.code;\n+\n+\/**\n+ * A CPU feature identified by a name.\n+ *\/\n+public interface CPUFeatureName {\n+    \/**\n+     * Gets the name of this feature.\n+     *\/\n+    String name();\n+\n+    \/**\n+     * Determines if {@code other} equals {@link #name()}.\n+     *\/\n+    default boolean nameEquals(String other) {\n+        return name().equals(other);\n+    }\n+}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/CPUFeatureName.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Map;\n@@ -30,0 +31,1 @@\n+import jdk.vm.ci.aarch64.AArch64.CPUFeature;\n@@ -46,1 +48,1 @@\n-    private static EnumSet<AArch64.CPUFeature> computeFeatures(@SuppressWarnings(\"unused\") AArch64HotSpotVMConfig config) {\n+    private static EnumSet<AArch64.CPUFeature> computeFeatures(AArch64HotSpotVMConfig config) {\n@@ -48,36 +50,3 @@\n-        EnumSet<AArch64.CPUFeature> features = EnumSet.noneOf(AArch64.CPUFeature.class);\n-\n-        if ((config.vmVersionFeatures & config.aarch64FP) != 0) {\n-            features.add(AArch64.CPUFeature.FP);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64ASIMD) != 0) {\n-            features.add(AArch64.CPUFeature.ASIMD);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64EVTSTRM) != 0) {\n-            features.add(AArch64.CPUFeature.EVTSTRM);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64AES) != 0) {\n-            features.add(AArch64.CPUFeature.AES);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64PMULL) != 0) {\n-            features.add(AArch64.CPUFeature.PMULL);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64SHA1) != 0) {\n-            features.add(AArch64.CPUFeature.SHA1);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64SHA2) != 0) {\n-            features.add(AArch64.CPUFeature.SHA2);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64CRC32) != 0) {\n-            features.add(AArch64.CPUFeature.CRC32);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64LSE) != 0) {\n-            features.add(AArch64.CPUFeature.LSE);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64STXR_PREFETCH) != 0) {\n-            features.add(AArch64.CPUFeature.STXR_PREFETCH);\n-        }\n-        if ((config.vmVersionFeatures & config.aarch64A53MAC) != 0) {\n-            features.add(AArch64.CPUFeature.A53MAC);\n-        }\n-\n+        EnumSet<CPUFeature> features = EnumSet.noneOf(CPUFeature.class);\n+        Map<String, Long> constants = config.getStore().getConstants();\n+        HotSpotJVMCIBackendFactory.convertFeatures(features, constants, config.vmVersionFeatures, CPUFeature::valueOf);\n@@ -87,1 +56,1 @@\n-    private static EnumSet<AArch64.Flag> computeFlags(@SuppressWarnings(\"unused\") AArch64HotSpotVMConfig config) {\n+    private static EnumSet<AArch64.Flag> computeFlags(AArch64HotSpotVMConfig config) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotJVMCIBackendFactory.java","additions":7,"deletions":38,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Map;\n+import java.util.function.Function;\n@@ -30,0 +32,1 @@\n+import jdk.vm.ci.amd64.AMD64.CPUFeature;\n@@ -46,1 +49,1 @@\n-    private static EnumSet<AMD64.CPUFeature> computeFeatures(AMD64HotSpotVMConfig config) {\n+    private static EnumSet<CPUFeature> computeFeatures(AMD64HotSpotVMConfig config) {\n@@ -48,4 +51,1 @@\n-        EnumSet<AMD64.CPUFeature> features = EnumSet.noneOf(AMD64.CPUFeature.class);\n-        if ((config.vmVersionFeatures & config.amd643DNOWPREFETCH) != 0) {\n-            features.add(AMD64.CPUFeature.AMD_3DNOW_PREFETCH);\n-        }\n+        EnumSet<CPUFeature> features = EnumSet.noneOf(CPUFeature.class);\n@@ -55,75 +55,4 @@\n-        if ((config.vmVersionFeatures & config.amd64SSE3) != 0) {\n-            features.add(AMD64.CPUFeature.SSE3);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64SSSE3) != 0) {\n-            features.add(AMD64.CPUFeature.SSSE3);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64SSE4A) != 0) {\n-            features.add(AMD64.CPUFeature.SSE4A);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64SSE41) != 0) {\n-            features.add(AMD64.CPUFeature.SSE4_1);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64SSE42) != 0) {\n-            features.add(AMD64.CPUFeature.SSE4_2);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64POPCNT) != 0) {\n-            features.add(AMD64.CPUFeature.POPCNT);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64LZCNT) != 0) {\n-            features.add(AMD64.CPUFeature.LZCNT);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64ERMS) != 0) {\n-            features.add(AMD64.CPUFeature.ERMS);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX) != 0) {\n-            features.add(AMD64.CPUFeature.AVX);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX2) != 0) {\n-            features.add(AMD64.CPUFeature.AVX2);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AES) != 0) {\n-            features.add(AMD64.CPUFeature.AES);\n-        }\n-        if ((config.vmVersionFeatures & config.amd643DNOWPREFETCH) != 0) {\n-            features.add(AMD64.CPUFeature.AMD_3DNOW_PREFETCH);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64BMI1) != 0) {\n-            features.add(AMD64.CPUFeature.BMI1);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64BMI2) != 0) {\n-            features.add(AMD64.CPUFeature.BMI2);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64RTM) != 0) {\n-            features.add(AMD64.CPUFeature.RTM);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64ADX) != 0) {\n-            features.add(AMD64.CPUFeature.ADX);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512F) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512F);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512DQ) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512DQ);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512PF) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512PF);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512ER) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512ER);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512CD) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512CD);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512BW) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512BW);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64AVX512VL) != 0) {\n-            features.add(AMD64.CPUFeature.AVX512VL);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64SHA) != 0) {\n-            features.add(AMD64.CPUFeature.SHA);\n-        }\n-        if ((config.vmVersionFeatures & config.amd64FMA) != 0) {\n-            features.add(AMD64.CPUFeature.FMA);\n-        }\n+\n+        Map<String, Long> constants = config.getStore().getConstants();\n+        Function<String, CPUFeature> nameToFeature = name -> name.equals(\"3DNOW_PREFETCH\") ? CPUFeature.AMD_3DNOW_PREFETCH : CPUFeature.valueOf(name);\n+        HotSpotJVMCIBackendFactory.convertFeatures(features, constants, config.vmVersionFeatures, nameToFeature);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.amd64\/src\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotJVMCIBackendFactory.java","additions":9,"deletions":80,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -25,0 +25,8 @@\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+import jdk.vm.ci.common.JVMCIError;\n@@ -35,0 +43,41 @@\n+\n+    \/**\n+     * Converts a bit mask of CPU features to enum constants.\n+     *\n+     * @param <CPUFeatureType> CPU feature enum type\n+     * @param outFeatures the set to which the converted values are added\n+     * @param constants VM constants. Each entry whose key starts with {@code \"VM_Version::CPU_\"}\n+     *            specifies a CPU feature and its value is a mask for the bit in\n+     *            {@code supportedFeatures} representing the feature\n+     * @param features bits specifying CPU features\n+     * @param nameToFeature maps a feature name to a feature enum constant or throws\n+     *            {@link IllegalArgumentException}\n+     * @throws IllegalArgumentException if any VM CPU feature constant cannot be converted to an\n+     *             enum value\n+     *\/\n+    static <CPUFeatureType extends Enum<CPUFeatureType>> void convertFeatures(\n+                    EnumSet<CPUFeatureType> outFeatures,\n+                    Map<String, Long> constants,\n+                    long features,\n+                    Function<String, CPUFeatureType> nameToFeature) {\n+\n+        List<String> missing = new ArrayList<>();\n+        for (Entry<String, Long> e : constants.entrySet()) {\n+            long bitMask = e.getValue();\n+            String key = e.getKey();\n+            if (key.startsWith(\"VM_Version::CPU_\")) {\n+                String name = key.substring(\"VM_Version::CPU_\".length());\n+                try {\n+                    CPUFeatureType feature = nameToFeature.apply(name);\n+                    if ((features & bitMask) != 0) {\n+                        outFeatures.add(feature);\n+                    }\n+                } catch (IllegalArgumentException iae) {\n+                    missing.add(name);\n+                }\n+            }\n+        }\n+        if (!missing.isEmpty()) {\n+            throw new JVMCIError(\"Missing CPU feature constants: %s\", missing);\n+        }\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}