{"files":[{"patch":"@@ -1500,1 +1500,0 @@\n-                                          preferred_page_size,\n@@ -1502,0 +1501,1 @@\n+                                          preferred_page_size,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-  os::trace_page_sizes(\"Mark Bitmap\", raw_bytes, raw_bytes, page_sz,\n+  const size_t used_page_sz = ReservedSpace::actual_reserved_page_size(rs);\n+  os::trace_page_sizes(\"Mark Bitmap\", raw_bytes, raw_bytes, used_page_sz,\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+  size_t used_page_size = ReservedSpace::actual_reserved_page_size(heap_rs);\n@@ -179,1 +180,1 @@\n-                       alignment,\n+                       used_page_size,\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,21 @@\n+    static boolean largePagesEnabled(OutputAnalyzer output) {\n+        \/\/ The gc+init logging includes information about large pages.\n+        String lp = output.firstMatch(\"Large Page Support: (\\\\w*)\", 1);\n+        return lp != null && lp.equals(\"Enabled\");\n+    }\n+\n+    static boolean largePagesAllocationFailure(OutputAnalyzer output, String pattern) {\n+        \/\/ Check if there is a large page failure associated with the data  structure\n+        \/\/ being checked. In case of a large page allocation failure the output will\n+        \/\/ include logs like this for the affected data structure:\n+        \/\/ [0.048s][debug][gc,heap,coops] Reserve regular memory without large pages\n+        \/\/ [0.048s][info ][pagesize     ] Next Bitmap: ... page_size=4K ...\n+        \/\/\n+        \/\/ The pattern passed in should match the second line.\n+        String failureMatch = output.firstMatch(\"Reserve regular memory without large pages\\\\n.*\" + pattern, 1);\n+        if (failureMatch != null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n@@ -53,1 +74,9 @@\n-        String pageSizeStr = output.firstMatch(pattern, 1);\n+        \/\/ First check the output for any large page allocation failure associated with\n+        \/\/ the checked data structure. If we detect a failure then expect small pages.\n+        if (largePagesAllocationFailure(output, pattern)) {\n+            \/\/ This should only happen when we are expecting large pages\n+            if (expectedSize == smallPageSize) {\n+                throw new RuntimeException(\"Expected small page size when large page failure was detected\");\n+            }\n+            expectedSize = smallPageSize;\n+        }\n@@ -55,0 +84,2 @@\n+        \/\/ Now check what page size is traced.\n+        String pageSizeStr = output.firstMatch(pattern, 1);\n@@ -85,1 +116,1 @@\n-                                                   \"-Xlog:pagesize\",\n+                                                   \"-Xlog:pagesize,gc+init,gc+heap+coops=debug\",\n@@ -92,2 +123,8 @@\n-        checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : smallPageSize));\n-        checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : smallPageSize));\n+        \/\/ Only expect large page size if large pages are enabled.\n+        if (largePagesEnabled(output)) {\n+            checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : smallPageSize));\n+            checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : smallPageSize));\n+        } else {\n+            checkSmallTables(output, smallPageSize);\n+            checkBitmaps(output, smallPageSize);\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"}]}