{"files":[{"patch":"@@ -52,1 +52,2 @@\n-    static boolean checkLargePagesEnabled(OutputAnalyzer output) {\n+    static boolean largePagesEnabled(OutputAnalyzer output) {\n+        \/\/ The gc+init logging includes information about large pages.\n@@ -57,3 +58,8 @@\n-    static void checkSize(OutputAnalyzer output, long expectedSize, String pattern) {\n-        \/\/ First check if there is a large page failure associated with\n-        \/\/ the data structure being checked.\n+    static boolean largePagesAllocationFailure(OutputAnalyzer output, String pattern) {\n+        \/\/ Check if there is a large page failure associated with the data  structure\n+        \/\/ being checked. In case of a large page allocation failure the output will\n+        \/\/ include logs like this for the affected data structure:\n+        \/\/ [0.048s][debug][gc,heap,coops] Reserve regular memory without large pages\n+        \/\/ [0.048s][info ][pagesize     ] Next Bitmap: ... page_size=4K ...\n+        \/\/\n+        \/\/ The pattern passed in should match the second line.\n@@ -62,0 +68,9 @@\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    static void checkSize(OutputAnalyzer output, long expectedSize, String pattern) {\n+        \/\/ First check the output for any large page allocation failure associated with\n+        \/\/ the checked data structure. If we detect a failure then expect small pages.\n+        if (largePagesAllocationFailure(output, pattern)) {\n@@ -108,3 +123,2 @@\n-        \/\/ Only expect large page size if no large page allocation failures\n-        \/\/ are present in the log.\n-        if (checkLargePagesEnabled(output)) {\n+        \/\/ Only expect large page size if large pages are enabled.\n+        if (largePagesEnabled(output)) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"}]}