{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,2 @@\n-    FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/PreviewFeature.java, \\\n-    DEST := $(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim\/jdk\/internal\/, \\\n+    FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java, \\\n+    DEST := $(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim\/jdk\/internal\/javac\/, \\\n@@ -84,2 +84,2 @@\n-          --add-exports java.base\/jdk.internal=java.compiler.interim \\\n-          --add-exports java.base\/jdk.internal=jdk.compiler.interim, \\\n+          --add-exports java.base\/jdk.internal.javac=java.compiler.interim \\\n+          --add-exports java.base\/jdk.internal.javac=jdk.compiler.interim, \\\n","filename":"make\/CompileInterimLangtools.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-    -taglet build.tools.taglet.Preview \\\n","filename":"make\/Docs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -661,0 +661,2 @@\n+    --add-exports java.base\/jdk.internal.javac=java.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.javac=jdk.compiler.interim \\\n@@ -668,0 +670,1 @@\n+    --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim \\\n","filename":"make\/autoconf\/spec.gmk.in","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package build.tools.taglet;\n-\n-import java.util.Arrays;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.function.Predicate;\n-import javax.lang.model.element.Element;\n-import com.sun.source.doctree.DocTree;\n-import com.sun.source.doctree.TextTree;\n-import com.sun.source.doctree.UnknownInlineTagTree;\n-import jdk.javadoc.doclet.Taglet;\n-import static jdk.javadoc.doclet.Taglet.Location.*;\n-\n-\/**\n- * An block tag to insert a standard warning about a preview API.\n- *\/\n-public class Preview implements Taglet {\n-\n-    \/** Returns the set of locations in which a taglet may be used. *\/\n-    @Override\n-    public Set<Location> getAllowedLocations() {\n-        return EnumSet.of(MODULE, PACKAGE, TYPE, CONSTRUCTOR, METHOD, FIELD);\n-    }\n-\n-    @Override\n-    public boolean isInlineTag() {\n-        return true;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"preview\";\n-    }\n-\n-    @Override\n-    public String toString(List<? extends DocTree> tags, Element elem) {\n-        UnknownInlineTagTree previewTag = (UnknownInlineTagTree) tags.get(0);\n-        List<? extends DocTree> previewContent = previewTag.getContent();\n-        String previewText = ((TextTree) previewContent.get(0)).getBody();\n-        String[] summaryAndDetails = previewText.split(\"\\n\\r?\\n\\r?\");\n-        String summary = summaryAndDetails[0];\n-        String details = summaryAndDetails.length > 1 ? summaryAndDetails[1] : summaryAndDetails[0];\n-        StackTraceElement[] stackTrace = new Exception().getStackTrace();\n-        Predicate<StackTraceElement> isSummary =\n-                el -> el.getClassName().endsWith(\"HtmlDocletWriter\") &&\n-                      el.getMethodName().equals(\"addSummaryComment\");\n-        if (Arrays.stream(stackTrace).anyMatch(isSummary)) {\n-            return \"<div style=\\\"display:inline-block; font-weight:bold\\\">\" + summary + \"<\/div><br>\";\n-        }\n-        return \"<div style=\\\"border: 1px solid red; border-radius: 5px; padding: 5px; display:inline-block; font-size: larger\\\">\" + details + \"<\/div><br>\";\n-    }\n-}\n-\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/Preview.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1115,0 +1115,1 @@\n+        Map<String, Object> values = desc.values;\n@@ -1116,1 +1117,1 @@\n-        if (PREVIEW_FEATURE_ANNOTATION.equals(annotationType)) {\n+        if (PREVIEW_FEATURE_ANNOTATION_NEW.equals(annotationType)) {\n@@ -1122,0 +1123,9 @@\n+        if (PREVIEW_FEATURE_ANNOTATION_OLD.equals(annotationType)) {\n+            \/\/the non-public PreviewFeature annotation will not be available in ct.sym,\n+            \/\/replace with purely synthetic javac-internal annotation:\n+            annotationType = PREVIEW_FEATURE_ANNOTATION_INTERNAL;\n+            values = new HashMap<>(values);\n+            Boolean essentialAPI = (Boolean) values.remove(\"essentialAPI\");\n+            values.put(\"reflective\", essentialAPI != null && !essentialAPI);\n+        }\n+\n@@ -1124,1 +1134,1 @@\n-                              createElementPairs(constantPool, desc.values));\n+                              createElementPairs(constantPool, values));\n@@ -1127,1 +1137,1 @@\n-        private static final String PREVIEW_FEATURE_ANNOTATION =\n+        private static final String PREVIEW_FEATURE_ANNOTATION_OLD =\n@@ -1129,0 +1139,2 @@\n+        private static final String PREVIEW_FEATURE_ANNOTATION_NEW =\n+                \"Ljdk\/internal\/javac\/PreviewFeature;\";\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    --add-exports java.base\/jdk.internal=java.compiler.interim,jdk.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.javac=java.compiler.interim,jdk.compiler.interim \\\n@@ -63,1 +63,0 @@\n-        --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim \\\n","filename":"make\/modules\/jdk.compiler\/Gendata.gmk","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-        --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim \\\n","filename":"make\/modules\/jdk.javadoc\/Gendata.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -4390,7 +4390,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -4432,1 +4425,1 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES, reflective=true)\n@@ -4472,7 +4465,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -4492,1 +4478,1 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES, reflective=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal;\n+package jdk.internal.javac;\n@@ -54,1 +54,1 @@\n-    public boolean essentialAPI() default false;\n+    public boolean reflective() default false;\n@@ -71,0 +71,4 @@\n+        \/**\n+         * A key for testing.\n+         *\/\n+        TEST,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/PreviewFeature.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-    exports jdk.internal to \/\/ for @HotSpotIntrinsicCandidate\n+    exports jdk.internal.javac to\n@@ -144,1 +144,0 @@\n-        jdk.incubator.vector,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,7 +69,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This enum constant is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -79,2 +72,2 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES,\n-                                             essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,\n+                                             reflective=true)\n@@ -84,7 +77,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This enum constant is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -94,2 +80,2 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES,\n-            essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,\n+            reflective=true)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Modifier.java","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,6 +202,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n@@ -218,2 +212,2 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES,\n-                                 essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,\n+                                 reflective=true)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,7 +90,0 @@\n-     * {@preview Associated with sealed classes, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>sealed classes<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -105,2 +98,2 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES,\n-                                             essentialAPI=false)\n+    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,\n+                                       reflective=true)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/ClassTree.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import javax.tools.StandardLocation;\n@@ -254,0 +255,3 @@\n+            \/\/when patching modules (esp. java.base), it may be impossible to\n+            \/\/clear the symbols read from the patch path:\n+            polluted |= get(JavaFileManager.class).hasLocation(StandardLocation.PATCH_MODULE_PATH);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTaskPool.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -340,1 +340,1 @@\n-    public static final long PREVIEW_ESSENTIAL_API = 1L<<58; \/\/any Symbol kind\n+    public static final long PREVIEW_REFLECTIVE = 1L<<58; \/\/any Symbol kind\n@@ -512,1 +512,1 @@\n-        PREVIEW_ESSENTIAL_API(Flags.PREVIEW_ESSENTIAL_API),\n+        PREVIEW_REFLECTIVE(Flags.PREVIEW_REFLECTIVE),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import java.util.HashSet;\n@@ -46,0 +47,1 @@\n+import java.util.Set;\n@@ -47,0 +49,3 @@\n+import static com.sun.tools.javac.code.Flags.RECORD;\n+import static com.sun.tools.javac.code.Flags.SEALED;\n+import static com.sun.tools.javac.code.Flags.NON_SEALED;\n@@ -73,0 +78,1 @@\n+    private final Set<JavaFileObject> sourcesWithPreviewFeatures = new HashSet<>();\n@@ -93,0 +99,1 @@\n+        Source source = Source.instance(context);\n@@ -94,1 +101,1 @@\n-                new MandatoryWarningHandler(log, lint.isEnabled(LintCategory.PREVIEW), true, \"preview\", LintCategory.PREVIEW);\n+                new MandatoryWarningHandler(log, source, lint.isEnabled(LintCategory.PREVIEW), true, \"preview\", LintCategory.PREVIEW);\n@@ -131,0 +138,1 @@\n+            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n@@ -144,2 +152,3 @@\n-        if (!lint.isSuppressed(LintCategory.PREVIEW)) {\n-            previewHandler.report(null,\n+        if (lint.isEnabled(LintCategory.PREVIEW)) {\n+            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n+            log.mandatoryWarning(LintCategory.PREVIEW, null,\n@@ -150,0 +159,4 @@\n+    public void markUsesPreview(DiagnosticPosition pos) {\n+        sourcesWithPreviewFeatures.add(log.currentSourceFile());\n+    }\n+\n@@ -154,0 +167,4 @@\n+    public boolean usesPreview(JavaFileObject file) {\n+        return sourcesWithPreviewFeatures.contains(file);\n+    }\n+\n@@ -168,6 +185,8 @@\n-        if (feature == Feature.SEALED_CLASSES)\n-            return true;\n-        \/\/Note: this is a backdoor which allows to optionally treat all features as 'preview' (for testing).\n-        \/\/When real preview features will be added, this method can be implemented to return 'true'\n-        \/\/for those selected features, and 'false' for all the others.\n-        return forcePreview;\n+        return switch (feature) {\n+            case SEALED_CLASSES -> true;\n+\n+            \/\/Note: this is a backdoor which allows to optionally treat all features as 'preview' (for testing).\n+            \/\/When real preview features will be added, this method can be implemented to return 'true'\n+            \/\/for those selected features, and 'false' for all the others.\n+            default -> forcePreview;\n+        };\n@@ -200,0 +219,13 @@\n+    \/**\n+     * Check whether the given symbol has been declared using\n+     * a preview language feature.\n+     *\n+     * @param sym Symbol to check\n+     * @return true iff sym has been declared using a preview language feature\n+     *\/\n+    public boolean declaredUsingPreviewFeature(Symbol sym) {\n+        return ((sym.flags() & RECORD) != 0 && isPreview(Feature.RECORDS)) ||\n+               ((sym.flags() & SEALED) != 0 && isPreview(Feature.SEALED_CLASSES)) ||\n+               ((sym.flags() & NON_SEALED) != 0 && isPreview(Feature.SEALED_CLASSES));\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -584,1 +584,1 @@\n-        previewFeatureType = enterClass(\"jdk.internal.PreviewFeature\");\n+        previewFeatureType = enterClass(\"jdk.internal.javac.PreviewFeature\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -376,2 +376,2 @@\n-                if (isAttributeTrue(c.member(names.essentialAPI))) {\n-                    toAnnotate.flags_field |= Flags.PREVIEW_ESSENTIAL_API;\n+                if (isAttributeTrue(c.member(names.reflective))) {\n+                    toAnnotate.flags_field |= Flags.PREVIEW_REFLECTIVE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -4485,1 +4485,1 @@\n-                chk.checkPreview(tree.pos(), sym);\n+                chk.checkPreview(tree.pos(), env.info.scope.owner, sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-        deprecationHandler = new MandatoryWarningHandler(log, verboseDeprecated,\n+        deprecationHandler = new MandatoryWarningHandler(log, null, verboseDeprecated,\n@@ -153,1 +153,1 @@\n-        removalHandler = new MandatoryWarningHandler(log, verboseRemoval,\n+        removalHandler = new MandatoryWarningHandler(log, null, verboseRemoval,\n@@ -155,1 +155,1 @@\n-        uncheckedHandler = new MandatoryWarningHandler(log, verboseUnchecked,\n+        uncheckedHandler = new MandatoryWarningHandler(log, null, verboseUnchecked,\n@@ -157,1 +157,1 @@\n-        sunApiHandler = new MandatoryWarningHandler(log, false,\n+        sunApiHandler = new MandatoryWarningHandler(log, null, false,\n@@ -242,1 +242,1 @@\n-    \/** Warn about deprecated symbol.\n+    \/** Log a preview warning.\n@@ -244,1 +244,1 @@\n-     *  @param sym        The deprecated symbol.\n+     *  @param msg        A Warning describing the problem.\n@@ -246,2 +246,3 @@\n-    void warnPreview(DiagnosticPosition pos, Symbol sym) {\n-        warnPreview(pos, Warnings.IsPreview(sym));\n+    public void warnPreviewAPI(DiagnosticPosition pos, Warning warnKey) {\n+        if (!lint.isSuppressed(LintCategory.PREVIEW))\n+            preview.reportPreviewWarning(pos, warnKey);\n@@ -254,1 +255,1 @@\n-    public void warnPreview(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnDeclaredUsingPreview(DiagnosticPosition pos, Symbol sym) {\n@@ -256,1 +257,1 @@\n-            preview.reportPreviewWarning(pos, warnKey);\n+            preview.reportPreviewWarning(pos, Warnings.DeclaredUsingPreview(kindName(sym), sym));\n@@ -3548,4 +3549,9 @@\n-    void checkPreview(DiagnosticPosition pos, Symbol s) {\n-        if ((s.flags() & PREVIEW_API) != 0) {\n-            if ((s.flags() & PREVIEW_ESSENTIAL_API) != 0 && !preview.isEnabled()) {\n-                log.error(pos, Errors.IsPreview(s));\n+    void checkPreview(DiagnosticPosition pos, Symbol other, Symbol s) {\n+        if ((s.flags() & PREVIEW_API) != 0 && s.packge().modle != other.packge().modle) {\n+            if ((s.flags() & PREVIEW_REFLECTIVE) == 0) {\n+                if (!preview.isEnabled()) {\n+                    log.error(pos, Errors.IsPreview(s));\n+                } else {\n+                    preview.markUsesPreview(pos);\n+                    deferredLintHandler.report(() -> warnPreviewAPI(pos, Warnings.IsPreview(s)));\n+                }\n@@ -3553,1 +3559,10 @@\n-                deferredLintHandler.report(() -> warnPreview(pos, s));\n+                    deferredLintHandler.report(() -> warnPreviewAPI(pos, Warnings.IsPreviewReflective(s)));\n+            }\n+        }\n+        if (preview.declaredUsingPreviewFeature(s)) {\n+            if (preview.isEnabled()) {\n+                \/\/for preview disabled do presumably so not need to do anything?\n+                \/\/If \"s\" is compiled from source, then there was an error for it already;\n+                \/\/if \"s\" is from classfile, there already was an error for the classfile.\n+                preview.markUsesPreview(pos);\n+                deferredLintHandler.report(() -> warnDeclaredUsingPreview(pos, s));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":31,"deletions":16,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1141,0 +1141,1 @@\n+                chk.checkPreview(tree.moduleName.pos(), msym, tree.directive.module);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2899,1 +2899,1 @@\n-        chk.checkPreview(pos, sym);\n+        chk.checkPreview(pos, env.info.scope.owner, sym);\n@@ -2964,1 +2964,1 @@\n-        chk.checkPreview(pos, sym);\n+        chk.checkPreview(pos, env.info.scope.owner, sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,1 @@\n+    private final Preview preview;\n@@ -144,0 +145,1 @@\n+        preview = Preview.instance(context);\n@@ -1465,1 +1467,1 @@\n-                setFlagIfAttributeTrue(a, sym, names.essentialAPI, PREVIEW_ESSENTIAL_API);\n+                setFlagIfAttributeTrue(a, sym, names.reflective, Flags.PREVIEW_REFLECTIVE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1442,1 +1442,1 @@\n-                setFlagIfAttributeTrue(proxy, sym, names.essentialAPI, PREVIEW_ESSENTIAL_API);\n+                setFlagIfAttributeTrue(proxy, sym, names.reflective, PREVIEW_REFLECTIVE);\n@@ -1453,1 +1453,1 @@\n-                    setFlagIfAttributeTrue(proxy, sym, names.essentialAPI, PREVIEW_ESSENTIAL_API);\n+                    setFlagIfAttributeTrue(proxy, sym, names.reflective, PREVIEW_REFLECTIVE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1635,1 +1635,1 @@\n-        if (preview.isEnabled()) {\n+        if (preview.isEnabled() && preview.usesPreview(c.sourcefile)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1635,1 +1635,1 @@\n-# 0: file name\n+# 0: file name, 1: source\n@@ -1637,1 +1637,1 @@\n-    {0} uses preview language features.\n+    {0} uses preview features of Java SE {1}.\n@@ -1639,0 +1639,1 @@\n+# 0: source\n@@ -1640,1 +1641,1 @@\n-    Some input files use preview language features.\n+    Some input files use preview features of Java SE {0}.\n@@ -1647,1 +1648,1 @@\n-# 0: file name\n+# 0: file name, 1: source\n@@ -1649,1 +1650,1 @@\n-    {0} has additional uses of preview language features.\n+    {0} has additional uses of preview features of Java SE {1}.\n@@ -1651,0 +1652,1 @@\n+# 0: source\n@@ -1652,1 +1654,1 @@\n-    Some input files additionally use preview language features.\n+    Some input files additionally use preview features of Java SE {0}.\n@@ -1786,1 +1788,1 @@\n-    {0} is an API that is part of a preview feature\n+    {0} is a preview API and may be removed in a future release.\n@@ -1790,1 +1792,6 @@\n-    {0} is an API that is part of a preview feature\n+    {0} is a preview API and is disabled by default.\\n\\\n+    (use --enable-preview to enable preview APIs)\n+\n+# 0: symbol\n+compiler.warn.is.preview.reflective=\\\n+    {0} is a reflective preview API and may be removed in a future release.\n@@ -2866,2 +2873,2 @@\n-   classfile for {0} uses preview features of Java SE {1}.\\n\\\n-   (use --enable-preview to allow loading of classfiles which contain preview features)\n+   class file for {0} uses preview features of Java SE {1}.\\n\\\n+   (use --enable-preview to allow loading of class files which contain preview features)\n@@ -2879,1 +2886,1 @@\n-   classfile for {0} uses preview features of Java SE {1}.\n+   class file for {0} uses preview features of Java SE {1}.\n@@ -3744,0 +3751,4 @@\n+# 0: kind name, 1: symbol\n+compiler.warn.declared.using.preview=\\\n+    {0} {1} is declared using a preview feature, which may be removed in a future release.\n+\n@@ -3746,1 +3757,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import com.sun.tools.javac.code.Source;\n@@ -114,1 +115,1 @@\n-    public MandatoryWarningHandler(Log log, boolean verbose,\n+    public MandatoryWarningHandler(Log log, Source source, boolean verbose,\n@@ -118,0 +119,1 @@\n+        this.source = source;\n@@ -176,4 +178,13 @@\n-            if (deferredDiagnosticArg == null)\n-                logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix));\n-            else\n-                logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix), deferredDiagnosticArg);\n+            if (deferredDiagnosticArg == null) {\n+                if (source != null) {\n+                    logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix), source);\n+                } else {\n+                    logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix));\n+                }\n+            } else {\n+                if (source != null) {\n+                    logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix), deferredDiagnosticArg, source);\n+                } else {\n+                    logMandatoryNote(deferredDiagnosticSource, deferredDiagnosticKind.getKey(prefix), deferredDiagnosticArg);\n+                }\n+            }\n@@ -190,0 +201,1 @@\n+    private final Source source;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningHandler.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-    public final Name essentialAPI;\n+    public final Name reflective;\n@@ -262,1 +262,1 @@\n-        essentialAPI = fromString(\"essentialAPI\");\n+        reflective = fromString(\"reflective\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Set;\n@@ -35,0 +36,1 @@\n+import com.sun.tools.javac.code.Source;\n@@ -163,0 +165,3 @@\n+        } else if (arg instanceof Source && arg == Source.DEFAULT &&\n+                CODES_NEEDING_SOURCE_NORMALIZATION.contains(diag.getCode())) {\n+            s = \"DEFAULT\";\n@@ -168,0 +173,3 @@\n+    \/\/where:\n+        private static final Set<String> CODES_NEEDING_SOURCE_NORMALIZATION = Set.of(\n+                \"compiler.note.preview.filename\", \"compiler.note.preview.plural\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/RawDiagnosticFormatter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW;\n@@ -87,3 +88,3 @@\n-    protected Content getDeprecatedLink(Element member) {\n-        Content deprecatedLinkContent = new ContentBuilder();\n-        deprecatedLinkContent.add(utils.getFullyQualifiedName(member));\n+    protected Content getSummaryLink(Element member) {\n+        Content content = new ContentBuilder();\n+        content.add(utils.getFullyQualifiedName(member));\n@@ -91,2 +92,2 @@\n-            deprecatedLinkContent.add(\".\");\n-            deprecatedLinkContent.add(member.getSimpleName());\n+            content.add(\".\");\n+            content.add(member.getSimpleName());\n@@ -96,1 +97,1 @@\n-            deprecatedLinkContent.add(Entity.ZERO_WIDTH_SPACE);\n+            content.add(Entity.ZERO_WIDTH_SPACE);\n@@ -98,1 +99,1 @@\n-        deprecatedLinkContent.add(signature);\n+        content.add(signature);\n@@ -100,1 +101,1 @@\n-        return writer.getDocLink(MEMBER, utils.getEnclosingTypeElement(member), member, deprecatedLinkContent);\n+        return writer.getDocLink(MEMBER_DEPRECATED_PREVIEW, utils.getEnclosingTypeElement(member), member, content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-     * Returns the deprecated link.\n+     * Returns a link for summary (deprecated, preview) pages.\n@@ -181,1 +181,1 @@\n-    protected abstract Content getDeprecatedLink(Element member);\n+    protected abstract Content getSummaryLink(Element member);\n@@ -274,0 +274,10 @@\n+    \/**\n+     * Add the preview information for the given member.\n+     *\n+     * @param member the member being documented.\n+     * @param contentTree the content tree to which the preview information will be added.\n+     *\/\n+    protected void addPreviewInfo(Element member, Content contentTree) {\n+        writer.addPreviewInfo(member, contentTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Set;\n@@ -33,0 +34,1 @@\n+import com.sun.source.doctree.DocTree;\n@@ -47,0 +49,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.ElementFlag;\n@@ -157,1 +160,5 @@\n-        if (utils.isDeprecated(klass)) {\n+        Set<ElementFlag> flags = utils.elementFlags(klass);\n+        if (flags.contains(ElementFlag.PREVIEW)) {\n+            description.add(contents.previewPhrase);\n+            addSummaryComment(klass, description);\n+        } else if (flags.contains(ElementFlag.DEPRECATED)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,0 +133,5 @@\n+    @Override\n+    public void addPreview(Element member, Content contentTree) {\n+        addPreviewInfo(member, contentTree);\n+    }\n+\n@@ -204,1 +209,1 @@\n-    protected Content getDeprecatedLink(Element member) {\n+    protected Content getSummaryLink(Element member) {\n@@ -206,1 +211,1 @@\n-        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER, member, name);\n+        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW, member, name);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -443,1 +443,2 @@\n-                .label(resources.getText(\"doclet.Class\")));\n+                .label(resources.getText(\"doclet.Class\"))\n+                .skipPreview(true));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -89,0 +90,3 @@\n+    private static final Set<String> previewModifiers\n+            = Set.of(\"sealed\", \"non-sealed\");\n+\n@@ -191,0 +195,18 @@\n+        ContentBuilder mods = new ContentBuilder();\n+        String sep = null;\n+        for (String modifiersPart : modifiers.split(\" \")) {\n+            if (sep != null) {\n+                mods.add(sep);\n+            }\n+            if (previewModifiers.contains(modifiersPart)) {\n+                mods.add(modifiersPart);\n+                mods.add(HtmlTree.SUP(links.createLink(getPreviewSectionAnchor(typeElement),\n+                                                       contents.previewMark)));\n+            } else {\n+                mods.add(modifiersPart);\n+            }\n+            sep = \" \";\n+        }\n+        if (modifiers.endsWith(\" \")) {\n+            mods.add(\" \");\n+        }\n@@ -193,1 +215,1 @@\n-                .setModifiers(new StringContent(modifiers))\n+                .setModifiers(mods)\n@@ -200,0 +222,1 @@\n+        addPreviewInfo(classInfoTree);\n@@ -208,0 +231,4 @@\n+    private void addPreviewInfo(Content classInfoTree) {\n+        addPreviewInfo(typeElement, classInfoTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -145,0 +145,5 @@\n+    @Override\n+    public void addPreview(ExecutableElement constructor, Content constructorDocTree) {\n+        addPreviewInfo(constructor, constructorDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriterImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,0 +154,4 @@\n+    public final Content previewAPI;\n+    public final Content previewLabel;\n+    public final Content previewMark;\n+    public final Content previewPhrase;\n@@ -297,0 +301,4 @@\n+        previewAPI = getContent(\"doclet.Preview_API\");\n+        previewLabel = getContent(\"doclet.Preview_Label\");\n+        previewMark = getContent(\"doclet.Preview_Mark\");\n+        previewPhrase = getContent(\"doclet.Preview\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.EnumMap;\n@@ -34,1 +30,0 @@\n-import java.util.SortedSet;\n@@ -37,7 +32,0 @@\n-import javax.lang.model.element.ModuleElement;\n-import javax.lang.model.element.PackageElement;\n-\n-import com.sun.source.doctree.DocTree;\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -46,1 +34,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n@@ -49,1 +36,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DeprecatedAPIListBuilder.DeprElementKind;\n@@ -53,1 +39,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexItem;\n@@ -66,151 +51,1 @@\n-public class DeprecatedListWriter extends SubWriterHolderWriter {\n-\n-    private String getAnchorName(DeprElementKind kind) {\n-        switch (kind) {\n-            case REMOVAL:\n-                return \"forRemoval\";\n-            case MODULE:\n-                return \"module\";\n-            case PACKAGE:\n-                return \"package\";\n-            case INTERFACE:\n-                return \"interface\";\n-            case CLASS:\n-                return \"class\";\n-            case ENUM:\n-                return \"enum.class\";\n-            case EXCEPTION:\n-                return \"exception\";\n-            case ERROR:\n-                return \"error\";\n-            case ANNOTATION_TYPE:\n-                return \"annotation.interface\";\n-            case FIELD:\n-                return \"field\";\n-            case METHOD:\n-                return \"method\";\n-            case CONSTRUCTOR:\n-                return \"constructor\";\n-            case ENUM_CONSTANT:\n-                return \"enum.constant\";\n-            case ANNOTATION_TYPE_MEMBER:\n-                return \"annotation.interface.member\";\n-            case RECORD_CLASS:\n-                return \"record.class\";\n-            default:\n-                throw new AssertionError(\"unknown kind: \" + kind);\n-        }\n-    }\n-\n-    private String getHeadingKey(DeprElementKind kind) {\n-        switch (kind) {\n-            case REMOVAL:\n-                return \"doclet.For_Removal\";\n-            case MODULE:\n-                return \"doclet.Modules\";\n-            case PACKAGE:\n-                return \"doclet.Packages\";\n-            case INTERFACE:\n-                return \"doclet.Interfaces\";\n-            case CLASS:\n-                return \"doclet.Classes\";\n-            case ENUM:\n-                return \"doclet.Enums\";\n-            case EXCEPTION:\n-                return \"doclet.Exceptions\";\n-            case ERROR:\n-                return \"doclet.Errors\";\n-            case ANNOTATION_TYPE:\n-                return \"doclet.Annotation_Types\";\n-            case RECORD_CLASS:\n-                return \"doclet.RecordClasses\";\n-            case FIELD:\n-                return \"doclet.Fields\";\n-            case METHOD:\n-                return \"doclet.Methods\";\n-            case CONSTRUCTOR:\n-                return \"doclet.Constructors\";\n-            case ENUM_CONSTANT:\n-                return \"doclet.Enum_Constants\";\n-            case ANNOTATION_TYPE_MEMBER:\n-                return \"doclet.Annotation_Type_Members\";\n-            default:\n-                throw new AssertionError(\"unknown kind: \" + kind);\n-        }\n-    }\n-\n-    private String getSummaryKey(DeprElementKind kind) {\n-        switch (kind) {\n-            case REMOVAL:\n-                return \"doclet.for_removal\";\n-            case MODULE:\n-                return \"doclet.modules\";\n-            case PACKAGE:\n-                return \"doclet.packages\";\n-            case INTERFACE:\n-                return \"doclet.interfaces\";\n-            case CLASS:\n-                return \"doclet.classes\";\n-            case ENUM:\n-                return \"doclet.enums\";\n-            case EXCEPTION:\n-                return \"doclet.exceptions\";\n-            case ERROR:\n-                return \"doclet.errors\";\n-            case ANNOTATION_TYPE:\n-                return \"doclet.annotation_types\";\n-            case RECORD_CLASS:\n-                return \"doclet.record_classes\";\n-            case FIELD:\n-                return \"doclet.fields\";\n-            case METHOD:\n-                return \"doclet.methods\";\n-            case CONSTRUCTOR:\n-                return \"doclet.constructors\";\n-            case ENUM_CONSTANT:\n-                return \"doclet.enum_constants\";\n-            case ANNOTATION_TYPE_MEMBER:\n-                return \"doclet.annotation_type_members\";\n-            default:\n-                throw new AssertionError(\"unknown kind: \" + kind);\n-        }\n-    }\n-\n-    private String getHeaderKey(DeprElementKind kind) {\n-        switch (kind) {\n-            case REMOVAL:\n-                return \"doclet.Element\";\n-            case MODULE:\n-                return \"doclet.Module\";\n-            case PACKAGE:\n-                return \"doclet.Package\";\n-            case INTERFACE:\n-                return \"doclet.Interface\";\n-            case CLASS:\n-                return \"doclet.Class\";\n-            case ENUM:\n-                return \"doclet.Enum\";\n-            case EXCEPTION:\n-                return \"doclet.Exceptions\";\n-            case ERROR:\n-                return \"doclet.Errors\";\n-            case ANNOTATION_TYPE:\n-                return \"doclet.AnnotationType\";\n-            case RECORD_CLASS:\n-                return \"doclet.RecordClass\";\n-            case FIELD:\n-                return \"doclet.Field\";\n-            case METHOD:\n-                return \"doclet.Method\";\n-            case CONSTRUCTOR:\n-                return \"doclet.Constructor\";\n-            case ENUM_CONSTANT:\n-                return \"doclet.Enum_Constant\";\n-            case ANNOTATION_TYPE_MEMBER:\n-                return \"doclet.Annotation_Type_Member\";\n-            default:\n-                throw new AssertionError(\"unknown kind: \" + kind);\n-        }\n-    }\n-\n-    private EnumMap<DeprElementKind, AbstractMemberWriter> writerMap;\n+public class DeprecatedListWriter extends SummaryListWriter<DeprecatedAPIListBuilder> {\n@@ -226,36 +61,2 @@\n-        super(configuration, filename);\n-        NestedClassWriterImpl classW = new NestedClassWriterImpl(this);\n-        writerMap = new EnumMap<>(DeprElementKind.class);\n-        for (DeprElementKind kind : DeprElementKind.values()) {\n-            switch (kind) {\n-                case REMOVAL:\n-                case MODULE:\n-                case PACKAGE:\n-                case INTERFACE:\n-                case CLASS:\n-                case ENUM:\n-                case EXCEPTION:\n-                case ERROR:\n-                case ANNOTATION_TYPE:\n-                case RECORD_CLASS:\n-                    writerMap.put(kind, classW);\n-                    break;\n-                case FIELD:\n-                    writerMap.put(kind, new FieldWriterImpl(this));\n-                    break;\n-                case METHOD:\n-                    writerMap.put(kind, new MethodWriterImpl(this));\n-                    break;\n-                case CONSTRUCTOR:\n-                    writerMap.put(kind, new ConstructorWriterImpl(this));\n-                    break;\n-                case ENUM_CONSTANT:\n-                    writerMap.put(kind, new EnumConstantWriterImpl(this));\n-                    break;\n-                case ANNOTATION_TYPE_MEMBER:\n-                    writerMap.put(kind, new AnnotationTypeOptionalMemberWriterImpl(this, null));\n-                    break;\n-                default:\n-                   throw new AssertionError(\"unknown kind: \" + kind);\n-            }\n-        }\n+        super(configuration, filename, PageMode.DEPRECATED, \"deprecated elements\",\n+              configuration.contents.deprecatedAPI, \"doclet.Window_Deprecated_List\");\n@@ -276,32 +77,1 @@\n-            depr.generateDeprecatedListFile(configuration.deprecatedAPIListBuilder);\n-        }\n-    }\n-\n-    \/**\n-     * Generate the deprecated API list.\n-     *\n-     * @param deprAPI list of deprecated API built already.\n-     * @throws DocFileIOException if there is a problem writing the deprecated list\n-     *\/\n-    protected void generateDeprecatedListFile(DeprecatedAPIListBuilder deprAPI)\n-            throws DocFileIOException {\n-        HtmlTree body = getHeader();\n-        bodyContents.addMainContent(getContentsList(deprAPI));\n-        Content content = new ContentBuilder();\n-        for (DeprElementKind kind : DeprElementKind.values()) {\n-            if (deprAPI.hasDocumentation(kind)) {\n-                TableHeader memberTableHeader = new TableHeader(\n-                        contents.getContent(getHeaderKey(kind)), contents.descriptionLabel);\n-                addDeprecatedAPI(deprAPI.getSet(kind), getAnchorName(kind),\n-                            getHeadingKey(kind), memberTableHeader, content);\n-            }\n-        }\n-        bodyContents.addMainContent(content);\n-        bodyContents.setFooter(getFooter());\n-        String description = \"deprecated elements\";\n-        body.add(bodyContents);\n-        printHtmlDocument(null, description, body);\n-\n-        if (!deprAPI.isEmpty() && configuration.mainIndex != null) {\n-            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS,\n-                    resources.getText(\"doclet.Deprecated_API\"), path));\n+            depr.generateSummaryListFile(configuration.deprecatedAPIListBuilder);\n@@ -311,14 +81,4 @@\n-    \/**\n-     * Add the index link.\n-     *\n-     * @param builder the deprecated list builder\n-     * @param kind the kind of list being documented\n-     * @param contentTree the content tree to which the index link will be added\n-     *\/\n-    private void addIndexLink(DeprecatedAPIListBuilder builder,\n-            DeprElementKind kind, Content contentTree) {\n-        if (builder.hasDocumentation(kind)) {\n-            Content li = HtmlTree.LI(links.createLink(getAnchorName(kind),\n-                    contents.getContent(getHeadingKey(kind))));\n-            contentTree.add(li);\n-        }\n+    @Override\n+    protected void addExtraSection(DeprecatedAPIListBuilder list, Content content) {\n+        addSummaryAPI(list.getForRemoval(), \"forRemoval\",\n+                    \"doclet.For_Removal\", \"doclet.Element\", content);\n@@ -327,17 +87,4 @@\n-    \/**\n-     * Get the contents list.\n-     *\n-     * @param deprapi the deprecated list builder\n-     * @return a content tree for the contents list\n-     *\/\n-    public Content getContentsList(DeprecatedAPIListBuilder deprapi) {\n-        Content headContent = contents.deprecatedAPI;\n-        Content heading = HtmlTree.HEADING_TITLE(Headings.PAGE_TITLE_HEADING,\n-                HtmlStyle.title, headContent);\n-        Content div = HtmlTree.DIV(HtmlStyle.header, heading);\n-        Content headingContent = contents.contentsHeading;\n-        div.add(HtmlTree.HEADING_TITLE(Headings.CONTENT_HEADING,\n-                headingContent));\n-        Content ul = new HtmlTree(TagName.UL);\n-        for (DeprElementKind kind : DeprElementKind.values()) {\n-            addIndexLink(deprapi, kind, ul);\n+    @Override\n+    protected void addExtraIndexLink(DeprecatedAPIListBuilder list, Content target) {\n+        if (!list.getForRemoval().isEmpty()) {\n+            addIndexLink(\"forRemoval\", \"doclet.For_Removal\", target);\n@@ -345,2 +92,0 @@\n-        div.add(ul);\n-        return div;\n@@ -349,55 +94,6 @@\n-    \/**\n-     * Get the header for the deprecated API Listing.\n-     *\n-     * @return a content tree for the header\n-     *\/\n-    public HtmlTree getHeader() {\n-        String title = resources.getText(\"doclet.Window_Deprecated_List\");\n-        HtmlTree bodyTree = getBody(getWindowTitle(title));\n-        bodyContents.setHeader(getHeader(PageMode.DEPRECATED));\n-        return bodyTree;\n-    }\n-\n-    \/**\n-     * Add deprecated information to the documentation tree\n-     *\n-     * @param deprList list of deprecated API elements\n-     * @param id the id attribute of the table\n-     * @param headingKey the caption for the deprecated table\n-     * @param tableHeader table headers for the deprecated table\n-     * @param contentTree the content tree to which the deprecated table will be added\n-     *\/\n-    protected void addDeprecatedAPI(SortedSet<Element> deprList, String id, String headingKey,\n-            TableHeader tableHeader, Content contentTree) {\n-        if (deprList.size() > 0) {\n-            Content caption = contents.getContent(headingKey);\n-            Table table = new Table(HtmlStyle.summaryTable)\n-                    .setCaption(caption)\n-                    .setHeader(tableHeader)\n-                    .setId(id)\n-                    .setColumnStyles(HtmlStyle.colDeprecatedItemName, HtmlStyle.colLast);\n-            for (Element e : deprList) {\n-                Content link;\n-                switch (e.getKind()) {\n-                    case MODULE:\n-                        ModuleElement m = (ModuleElement) e;\n-                        link = getModuleLink(m, new StringContent(m.getQualifiedName()));\n-                        break;\n-                    case PACKAGE:\n-                        PackageElement pkg = (PackageElement) e;\n-                        link = getPackageLink(pkg, getPackageName(pkg));\n-                        break;\n-                    default:\n-                        link = getDeprecatedLink(e);\n-                }\n-                Content desc = new ContentBuilder();\n-                List<? extends DeprecatedTree> tags = utils.getDeprecatedTrees(e);\n-                if (!tags.isEmpty()) {\n-                    addInlineDeprecatedComment(e, tags.get(0), desc);\n-                } else {\n-                    desc.add(HtmlTree.EMPTY);\n-                }\n-                table.addRow(link, desc);\n-            }\n-            \/\/ note: singleton list\n-            contentTree.add(HtmlTree.UL(HtmlStyle.blockList, HtmlTree.LI(table)));\n+    protected void addComments(Element e, Content desc) {\n+        List<? extends DeprecatedTree> tags = utils.getDeprecatedTrees(e);\n+        if (!tags.isEmpty()) {\n+            addInlineDeprecatedComment(e, tags.get(0), desc);\n+        } else {\n+            desc.add(HtmlTree.EMPTY);\n@@ -407,27 +103,0 @@\n-    protected Content getDeprecatedLink(Element e) {\n-        AbstractMemberWriter writer;\n-        switch (e.getKind()) {\n-            case INTERFACE:\n-            case CLASS:\n-            case ENUM:\n-            case ANNOTATION_TYPE:\n-            case RECORD:\n-                writer = new NestedClassWriterImpl(this);\n-                break;\n-            case FIELD:\n-                writer = new FieldWriterImpl(this);\n-                break;\n-            case METHOD:\n-                writer = new MethodWriterImpl(this);\n-                break;\n-            case CONSTRUCTOR:\n-                writer = new ConstructorWriterImpl(this);\n-                break;\n-            case ENUM_CONSTANT:\n-                writer = new EnumConstantWriterImpl(this);\n-                break;\n-            default:\n-                writer = new AnnotationTypeOptionalMemberWriterImpl(this, null);\n-        }\n-        return writer.getDeprecatedLink(e);\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DeprecatedListWriter.java","additions":19,"deletions":350,"binary":false,"changes":369,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,5 @@\n+    @Override\n+    public void addPreview(VariableElement enumConstant, Content enumConstantsTree) {\n+        addPreviewInfo(enumConstant, enumConstantsTree);\n+    }\n+\n@@ -175,1 +180,1 @@\n-    protected Content getDeprecatedLink(Element member) {\n+    protected Content getSummaryLink(Element member) {\n@@ -177,1 +182,1 @@\n-        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER, member, name);\n+        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW, member, name);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriterImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,5 @@\n+    @Override\n+    public void addPreview(VariableElement field, Content fieldTree) {\n+        addPreviewInfo(field, fieldTree);\n+    }\n+\n@@ -202,1 +207,1 @@\n-    protected Content getDeprecatedLink(Element member) {\n+    protected Content getSummaryLink(Element member) {\n@@ -204,1 +209,1 @@\n-        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER, member, name);\n+        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW, member, name);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,0 +235,9 @@\n+        \/\/ Preview\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.PREVIEW)) {\n+            section = newHelpSection(contents.previewAPI);\n+            Content previewBody = getContent(\"doclet.help.preview.body\",\n+                    links.createLink(DocPaths.PREVIEW_LIST, contents.previewAPI));\n+            section.add(HtmlTree.P(previewBody));\n+            contentTree.add(section);\n+        }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.PreviewAPIListBuilder;\n@@ -123,1 +124,8 @@\n-    private Contents contents;\n+    \/**\n+     * The collection of preview items, if any, to be displayed on the preview-list page,\n+     * or null if the page should not be generated.\n+     * The page will not be generated if there are no preview elements being documented.\n+     *\/\n+    protected PreviewAPIListBuilder previewAPIListBuilder;\n+\n+    public Contents contents;\n@@ -139,1 +147,1 @@\n-        CONSTANT_VALUES, DEPRECATED, SERIALIZED_FORM, SYSTEM_PROPERTIES\n+        CONSTANT_VALUES, DEPRECATED, PREVIEW, SERIALIZED_FORM, SYSTEM_PROPERTIES\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.PreviewAPIListBuilder;\n@@ -178,0 +179,5 @@\n+        PreviewAPIListBuilder builder = new PreviewAPIListBuilder(configuration);\n+        if (!builder.isEmpty()) {\n+            configuration.previewAPIListBuilder = builder;\n+            configuration.conditionalPages.add(HtmlConfiguration.ConditionalPage.PREVIEW);\n+        }\n@@ -226,0 +232,4 @@\n+        if (configuration.conditionalPages.contains((HtmlConfiguration.ConditionalPage.PREVIEW))) {\n+            PreviewListWriter.generate(configuration);\n+        }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.EnumSet;\n@@ -31,0 +32,1 @@\n+import java.util.HashSet;\n@@ -108,1 +110,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -110,0 +111,4 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.DeclarationPreviewLanguageFeatures;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.ElementFlag;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.PreviewSummary;\n@@ -651,0 +656,7 @@\n+        Set<ElementFlag> flags;\n+        if (packageElement != null) {\n+            flags = utils.elementFlags(packageElement);\n+        } else {\n+            flags = EnumSet.noneOf(ElementFlag.class);\n+        }\n+        DocLink targetLink = null;\n@@ -652,2 +664,1 @@\n-            return links.createLink(pathString(packageElement, DocPaths.PACKAGE_SUMMARY),\n-                    label);\n+            targetLink = new DocLink(pathString(packageElement, DocPaths.PACKAGE_SUMMARY));\n@@ -655,5 +666,9 @@\n-            DocLink crossPkgLink = getCrossPackageLink(packageElement);\n-            if (crossPkgLink != null) {\n-                return links.createLink(crossPkgLink, label);\n-            } else {\n-                return label;\n+            targetLink = getCrossPackageLink(packageElement);\n+        }\n+        if (targetLink != null) {\n+            if (flags.contains(ElementFlag.PREVIEW)) {\n+                return new ContentBuilder(\n+                    links.createLink(targetLink, label),\n+                    HtmlTree.SUP(links.createLink(targetLink.withFragment(getPreviewSectionAnchor(packageElement)),\n+                                                  contents.previewMark))\n+                );\n@@ -661,0 +676,9 @@\n+            return links.createLink(targetLink, label);\n+        } else {\n+            if (flags.contains(ElementFlag.PREVIEW)) {\n+                return new ContentBuilder(\n+                    label,\n+                    HtmlTree.SUP(contents.previewMark)\n+                );\n+            }\n+            return label;\n@@ -672,0 +696,2 @@\n+        Set<ElementFlag> flags = mdle != null ? utils.elementFlags(mdle)\n+                                              : EnumSet.noneOf(ElementFlag.class);\n@@ -673,3 +699,19 @@\n-        return (included)\n-                ? links.createLink(pathToRoot.resolve(docPaths.moduleSummary(mdle)), label, \"\", \"\")\n-                : label;\n+        if (included) {\n+            DocLink targetLink = new DocLink(pathToRoot.resolve(docPaths.moduleSummary(mdle)));\n+            Content link = links.createLink(targetLink, label, \"\", \"\");\n+            if (flags.contains(ElementFlag.PREVIEW) && label != contents.moduleLabel) {\n+                link = new ContentBuilder(\n+                        link,\n+                        HtmlTree.SUP(links.createLink(targetLink.withFragment(getPreviewSectionAnchor(mdle)),\n+                                                      contents.previewMark))\n+                );\n+            }\n+            return link;\n+        }\n+        if (flags.contains(ElementFlag.PREVIEW)) {\n+            return new ContentBuilder(\n+                label,\n+                HtmlTree.SUP(contents.previewMark)\n+            );\n+        }\n+        return label;\n@@ -972,0 +1014,1 @@\n+                .targetMember(element)\n@@ -979,0 +1022,1 @@\n+                .targetMember(element)\n@@ -1004,1 +1048,2 @@\n-                .where(links.getAnchor(emd)));\n+                .where(links.getAnchor(emd))\n+                .targetMember(element));\n@@ -1007,1 +1052,1 @@\n-                .label(label).where(links.getName(element.getSimpleName().toString())));\n+                .label(label).where(links.getName(element.getSimpleName().toString())).targetMember(element));\n@@ -1201,0 +1246,11 @@\n+    \/**\n+     * Adds the preview content.\n+     *\n+     * @param element the Element for which the summary will be generated\n+     * @param firstSentenceTags the first sentence tags for the doc\n+     * @param htmltree the documentation tree to which the summary will be added\n+     *\/\n+    public void addPreviewComment(Element element, List<? extends DocTree> firstSentenceTags, Content htmltree) {\n+        addCommentTags(element, firstSentenceTags, false, true, true, htmltree);\n+    }\n+\n@@ -1264,2 +1320,1 @@\n-        }\n-        else {\n+        } else {\n@@ -2123,0 +2178,155 @@\n+\n+    public void addPreviewSummary(Element forWhat, Content target) {\n+        if (utils.isPreviewAPI(forWhat)) {\n+            Content div = HtmlTree.DIV(HtmlStyle.block);\n+            div.add(HtmlTree.SPAN(HtmlStyle.previewLabel, contents.previewPhrase));\n+            target.add(div);\n+        }\n+    }\n+\n+    public void addPreviewInfo(Element forWhat, Content target) {\n+        if (utils.isPreviewAPI(forWhat)) {\n+            \/\/in Java platform:\n+            HtmlTree previewDiv = HtmlTree.DIV(HtmlStyle.previewBlock);\n+            previewDiv.setId(getPreviewSectionAnchor(forWhat));\n+            String name = (switch (forWhat.getKind()) {\n+                case PACKAGE, MODULE ->\n+                        ((QualifiedNameable) forWhat).getQualifiedName();\n+                case CONSTRUCTOR ->\n+                        ((TypeElement) forWhat.getEnclosingElement()).getSimpleName();\n+                default -> forWhat.getSimpleName();\n+            }).toString();\n+            Content nameCode = HtmlTree.CODE(new StringContent(name));\n+            boolean isReflectivePreview = utils.isReflectivePreviewAPI(forWhat);\n+            String leadingNoteKey =\n+                    !isReflectivePreview ? \"doclet.PreviewPlatformLeadingNote\"\n+                                         : \"doclet.ReflectivePreviewPlatformLeadingNote\";\n+            Content leadingNote =\n+                    contents.getContent(leadingNoteKey, nameCode);\n+            previewDiv.add(HtmlTree.SPAN(HtmlStyle.previewLabel,\n+                                         leadingNote));\n+            if (!isReflectivePreview) {\n+                Content note1 = contents.getContent(\"doclet.PreviewTrailingNote1\", nameCode);\n+                previewDiv.add(HtmlTree.DIV(HtmlStyle.previewComment, note1));\n+            }\n+            Content note2 = contents.getContent(\"doclet.PreviewTrailingNote2\", nameCode);\n+            previewDiv.add(HtmlTree.DIV(HtmlStyle.previewComment, note2));\n+            target.add(previewDiv);\n+        } else if (forWhat.getKind().isClass() || forWhat.getKind().isInterface()) {\n+            \/\/in custom code:\n+            List<Content> previewNotes = getPreviewNotes((TypeElement) forWhat);\n+            if (!previewNotes.isEmpty()) {\n+                Name name = forWhat.getSimpleName();\n+                Content nameCode = HtmlTree.CODE(new StringContent(name));\n+                HtmlTree previewDiv = HtmlTree.DIV(HtmlStyle.previewBlock);\n+                previewDiv.setId(getPreviewSectionAnchor(forWhat));\n+                Content leadingNote = contents.getContent(\"doclet.PreviewLeadingNote\", nameCode);\n+                previewDiv.add(HtmlTree.SPAN(HtmlStyle.previewLabel,\n+                                             leadingNote));\n+                HtmlTree ul = new HtmlTree(TagName.UL);\n+                ul.setStyle(HtmlStyle.previewComment);\n+                for (Content note : previewNotes) {\n+                    ul.add(HtmlTree.LI(note));\n+                }\n+                previewDiv.add(ul);\n+                Content note1 =\n+                        contents.getContent(\"doclet.PreviewTrailingNote1\",\n+                                            nameCode);\n+                previewDiv.add(HtmlTree.DIV(HtmlStyle.previewComment, note1));\n+                Content note2 =\n+                        contents.getContent(\"doclet.PreviewTrailingNote2\",\n+                                            name);\n+                previewDiv.add(HtmlTree.DIV(HtmlStyle.previewComment, note2));\n+                target.add(previewDiv);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"preview\")\n+    private List<Content> getPreviewNotes(TypeElement el) {\n+        String className = el.getSimpleName().toString();\n+        List<Content> result = new ArrayList<>();\n+        PreviewSummary previewAPITypes = utils.declaredUsingPreviewAPIs(el);\n+        Set<TypeElement> previewAPI = new HashSet<>(previewAPITypes.previewAPI);\n+        Set<TypeElement> reflectivePreviewAPI = new HashSet<>(previewAPITypes.reflectivePreviewAPI);\n+        Set<TypeElement> declaredUsingPreviewFeature = new HashSet<>(previewAPITypes.declaredUsingPreviewFeature);\n+        Set<DeclarationPreviewLanguageFeatures> previewLanguageFeatures = new HashSet<>();\n+        for (Element enclosed : el.getEnclosedElements()) {\n+            if (!utils.isIncluded(enclosed)) {\n+                continue;\n+            }\n+            if (!enclosed.getKind().isClass() && !enclosed.getKind().isInterface()) {\n+                PreviewSummary memberAPITypes = utils.declaredUsingPreviewAPIs(enclosed);\n+                declaredUsingPreviewFeature.addAll(memberAPITypes.declaredUsingPreviewFeature);\n+                previewAPI.addAll(memberAPITypes.previewAPI);\n+                reflectivePreviewAPI.addAll(memberAPITypes.reflectivePreviewAPI);\n+                previewLanguageFeatures.addAll(utils.previewLanguageFeaturesUsed(enclosed));\n+            } else if (!utils.previewLanguageFeaturesUsed(enclosed).isEmpty()) {\n+                declaredUsingPreviewFeature.add((TypeElement) enclosed);\n+            }\n+        }\n+        previewLanguageFeatures.addAll(utils.previewLanguageFeaturesUsed(el));\n+        if (!previewLanguageFeatures.isEmpty()) {\n+            if (previewLanguageFeatures.contains(DeclarationPreviewLanguageFeatures.SEALED_PERMITS)) {\n+                previewLanguageFeatures.remove(DeclarationPreviewLanguageFeatures.SEALED);\n+            }\n+            for (DeclarationPreviewLanguageFeatures feature : previewLanguageFeatures) {\n+                String featureDisplayName =\n+                        resources.getText(\"doclet.Declared_Using_Preview.\" + feature.name());\n+                result.add(withPreviewFeatures(\"doclet.Declared_Using_Preview\", className,\n+                                               featureDisplayName, feature.features));\n+            }\n+        }\n+        if (!declaredUsingPreviewFeature.isEmpty()) {\n+            result.add(withLinks(\"doclet.UsesDeclaredUsingPreview\", className, declaredUsingPreviewFeature));\n+        }\n+        if (!previewAPI.isEmpty()) {\n+            result.add(withLinks(\"doclet.PreviewAPI\", className, previewAPI));\n+        }\n+        if (!reflectivePreviewAPI.isEmpty()) {\n+            result.add(withLinks(\"doclet.ReflectivePreviewAPI\", className, reflectivePreviewAPI));\n+        }\n+        return result;\n+    }\n+\n+    private Content withPreviewFeatures(String key, String className, String featureName, List<String> features) {\n+        String[] sep = new String[] {\"\"};\n+        ContentBuilder featureCodes = new ContentBuilder();\n+        features.stream()\n+                .forEach(c -> {\n+                    featureCodes.add(sep[0]);\n+                    featureCodes.add(HtmlTree.CODE(new ContentBuilder().add(c)));\n+                    sep[0] = \", \";\n+                });\n+        return contents.getContent(key,\n+                                   HtmlTree.CODE(new StringContent(className)),\n+                                   new HtmlTree(TagName.EM).add(featureName),\n+                                   featureCodes);\n+    }\n+\n+    private Content withLinks(String key, String className, Set<TypeElement> elements) {\n+        String[] sep = new String[] {\"\"};\n+        ContentBuilder links = new ContentBuilder();\n+        elements.stream()\n+                .sorted((te1, te2) -> te1.getSimpleName().toString().compareTo(te2.getSimpleName().toString()))\n+                .distinct()\n+                .map(te -> getLink(new LinkInfoImpl(configuration, LinkInfoImpl.Kind.CLASS, te).label(HtmlTree.CODE(new StringContent(te.getSimpleName()))).skipPreview(true)))\n+                .forEach(c -> {\n+                    links.add(sep[0]);\n+                    links.add(c);\n+                    sep[0] = \", \";\n+                });\n+        return contents.getContent(key,\n+                                   HtmlTree.CODE(new StringContent(className)),\n+                                   links);\n+    }\n+\n+    public String getPreviewSectionAnchor(Element el) {\n+        return \"preview-\" + switch (el.getKind()) {\n+            case CONSTRUCTOR, METHOD ->\n+                links.getAnchor((ExecutableElement) el);\n+            case PACKAGE -> getPackageAnchorName((PackageElement) el);\n+            default -> utils.getFullyQualifiedName(el, false);\n+        };\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":226,"deletions":16,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.EnumSet;\n@@ -30,0 +31,1 @@\n+import java.util.Set;\n@@ -39,0 +41,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -45,0 +49,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.ElementFlag;\n@@ -81,1 +86,2 @@\n-        if (classLinkInfo.where == null || classLinkInfo.where.length() == 0) {\n+        boolean hasWhere = classLinkInfo.where != null && classLinkInfo.where.length() != 0;\n+        if (!hasWhere) {\n@@ -87,0 +93,14 @@\n+        Set<ElementFlag> flags;\n+        Element target;\n+        boolean showPreview = !classLinkInfo.skipPreview;\n+        if (!hasWhere && showPreview) {\n+            flags = utils.elementFlags(typeElement);\n+            target = typeElement;\n+        } else if ((classLinkInfo.context == LinkInfoImpl.Kind.SEE_TAG || classLinkInfo.context == LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW) &&\n+                   classLinkInfo.targetMember != null && showPreview) {\n+            flags = utils.elementFlags(classLinkInfo.targetMember);\n+            target = classLinkInfo.targetMember;\n+        } else {\n+            flags = EnumSet.noneOf(ElementFlag.class);\n+            target = null;\n+        }\n@@ -100,0 +120,5 @@\n+                        if (flags.contains(ElementFlag.PREVIEW)) {\n+                            link.add(HtmlTree.SUP(m_writer.links.createLink(\n+                                    filename.fragment(m_writer.getPreviewSectionAnchor(target)),\n+                                    m_writer.contents.previewMark)));\n+                        }\n@@ -112,0 +137,7 @@\n+                if (flags.contains(ElementFlag.PREVIEW)) {\n+                    link.add(HtmlTree.SUP(m_writer.getCrossClassLink(\n+                        typeElement,\n+                        m_writer.getPreviewSectionAnchor(target),\n+                        m_writer.contents.previewMark,\n+                        false, false)));\n+                }\n@@ -120,0 +152,3 @@\n+        if (flags.contains(ElementFlag.PREVIEW)) {\n+            link.add(HtmlTree.SUP(m_writer.contents.previewMark));\n+        }\n@@ -174,1 +209,1 @@\n-                ((LinkInfoImpl) linkInfo).getContext(), typeParam);\n+                ((LinkInfoImpl) linkInfo).getContext(), typeParam).skipPreview(true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkFactoryImpl.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import javax.lang.model.element.Element;\n@@ -60,0 +61,5 @@\n+        \/**\n+         * Indicate that the link appears in member documentation on the Deprecated or Preview page.\n+         *\/\n+        MEMBER_DEPRECATED_PREVIEW,\n+\n@@ -238,0 +244,5 @@\n+    \/**\n+     * The member this link points to (if any).\n+     *\/\n+    public Element targetMember;\n+\n@@ -338,1 +349,17 @@\n-     }\n+    }\n+\n+    \/**\n+     * Set the member this link points to (if any).\n+     *\/\n+    public LinkInfoImpl targetMember(Element el) {\n+        this.targetMember = el;\n+        return this;\n+    }\n+\n+    \/**\n+     * Set whether or not the preview flags should be skipped for this link.\n+     *\/\n+    public LinkInfoImpl skipPreview(boolean skipPreview) {\n+        this.skipPreview = skipPreview;\n+        return this;\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkInfoImpl.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -34,0 +35,1 @@\n+import javax.lang.model.type.DeclaredType;\n@@ -139,0 +141,5 @@\n+    @Override\n+    public void addPreview(ExecutableElement method, Content methodDocTree) {\n+        addPreviewInfo(method, methodDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,1 @@\n+                        addPreviewSummary(mdle, summaryContent);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleIndexWriter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -620,0 +620,1 @@\n+            addPreviewSummary(pkg, summary);\n@@ -814,0 +815,1 @@\n+        addPreviewInfo(mdle, moduleContentTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriterImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,1 @@\n+        PREVIEW,\n@@ -188,0 +189,1 @@\n+                addPreviewLink(tree);\n@@ -199,0 +201,1 @@\n+                addPreviewLink(tree);\n@@ -216,0 +219,1 @@\n+                addPreviewLink(tree);\n@@ -233,0 +237,1 @@\n+                addPreviewLink(tree);\n@@ -255,0 +260,1 @@\n+                addPreviewLink(tree);\n@@ -271,0 +277,1 @@\n+                addPreviewLink(tree);\n@@ -277,0 +284,1 @@\n+            case PREVIEW:\n@@ -289,0 +297,6 @@\n+                if (documentedPage == PageMode.PREVIEW) {\n+                    addActivePageLink(tree, contents.previewLabel,\n+                            configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.PREVIEW));\n+                } else {\n+                    addPreviewLink(tree);\n+                }\n@@ -312,0 +326,1 @@\n+                addPreviewLink(tree);\n@@ -323,0 +338,1 @@\n+                addPreviewLink(tree);\n@@ -845,0 +861,7 @@\n+    private void addPreviewLink(Content tree) {\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.PREVIEW)) {\n+            tree.add(HtmlTree.LI(links.createLink(pathToRoot.resolve(DocPaths.PREVIEW_LIST),\n+                    contents.previewLabel, \"\", \"\")));\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,2 +148,2 @@\n-    protected Content getDeprecatedLink(Element member) {\n-        return writer.getQualifiedClassLink(LinkInfoImpl.Kind.MEMBER, member);\n+    protected Content getSummaryLink(Element member) {\n+        return writer.getQualifiedClassLink(LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW, member);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,1 @@\n+                addPreviewSummary(klass, description);\n@@ -238,0 +239,1 @@\n+        addPreviewInfo(packageElement, packageContentTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import java.util.List;\n+\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;\n+import jdk.javadoc.internal.doclets.toolkit.util.PreviewAPIListBuilder;\n+\n+\/**\n+ * Generate File to list all the preview elements with the\n+ * appropriate links.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\n+ * @see java.util.List\n+ *\/\n+public class PreviewListWriter extends SummaryListWriter<PreviewAPIListBuilder> {\n+\n+    \/**\n+     * Constructor.\n+     *\n+     * @param configuration the configuration for this doclet\n+     * @param filename the file to be generated\n+     *\/\n+\n+    public PreviewListWriter(HtmlConfiguration configuration, DocPath filename) {\n+        super(configuration, filename, PageMode.PREVIEW, \"preview elements\",\n+              configuration.contents.previewAPI, \"doclet.Window_Preview_List\");\n+    }\n+\n+    \/**\n+     * Get list of all the preview elements.\n+     * Then instantiate PreviewListWriter and generate File.\n+     *\n+     * @param configuration the current configuration of the doclet.\n+     * @throws DocFileIOException if there is a problem writing the preview list\n+     *\/\n+    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.PREVIEW)) {\n+            DocPath filename = DocPaths.PREVIEW_LIST;\n+            PreviewListWriter depr = new PreviewListWriter(configuration, filename);\n+            depr.generateSummaryListFile(\n+                   new PreviewAPIListBuilder(configuration));\n+        }\n+    }\n+\n+    @Override\n+    protected void addComments(Element e, Content desc) {\n+        List<? extends DocTree> tags = utils.getFirstSentenceTrees(e);\n+        if (!tags.isEmpty()) {\n+            addPreviewComment(e, tags, desc);\n+        } else {\n+            desc.add(HtmlTree.EMPTY);\n+        }\n+    }\n+\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PreviewListWriter.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,4 @@\n+    @Override\n+    public void addPreview(ExecutableElement property, Content propertyDocTree) {\n+    }\n+\n@@ -218,2 +222,2 @@\n-    protected Content getDeprecatedLink(Element member) {\n-        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER, member,\n+    protected Content getSummaryLink(Element member) {\n+        return writer.getDocLink(LinkInfoImpl.Kind.MEMBER_DEPRECATED_PREVIEW, member,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -159,1 +159,6 @@\n-                        permitsSpan.add(\"permits \");\n+                        permitsSpan.add(\"permits\");\n+                        Content link =\n+                                classWriter.links.createLink(classWriter.getPreviewSectionAnchor(typeElement),\n+                                                             classWriter.contents.previewMark);\n+                        permitsSpan.add(HtmlTree.SUP(link));\n+                        permitsSpan.add(\" \");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;\n@@ -112,0 +113,1 @@\n+        addPreviewSummary(member, tdSummary);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SubWriterHolderWriter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,303 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import java.util.SortedSet;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.PackageElement;\n+\n+import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n+import jdk.javadoc.internal.doclets.toolkit.util.SummaryAPIListBuilder;\n+import jdk.javadoc.internal.doclets.toolkit.util.SummaryAPIListBuilder.SummaryElementKind;\n+\n+\/**\n+ * Generate File to list all the summary elements with the\n+ * appropriate links.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\n+ * @see java.util.List\n+ *\/\n+public abstract class SummaryListWriter<L extends SummaryAPIListBuilder> extends SubWriterHolderWriter {\n+\n+    private String getAnchorName(SummaryElementKind kind) {\n+        return switch (kind) {\n+            case MODULE -> \"module\";\n+            case PACKAGE -> \"package\";\n+            case INTERFACE -> \"interface\";\n+            case CLASS -> \"class\";\n+            case ENUM -> \"enum.class\";\n+            case EXCEPTION -> \"exception\";\n+            case ERROR -> \"error\";\n+            case ANNOTATION_TYPE -> \"annotation.interface\";\n+            case FIELD -> \"field\";\n+            case METHOD -> \"method\";\n+            case CONSTRUCTOR -> \"constructor\";\n+            case ENUM_CONSTANT -> \"enum.constant\";\n+            case ANNOTATION_TYPE_MEMBER -> \"annotation.interface.member\";\n+            case RECORD_CLASS -> \"record.class\";\n+        };\n+    }\n+\n+    private String getHeadingKey(SummaryElementKind kind) {\n+        return switch (kind) {\n+            case MODULE -> \"doclet.Modules\";\n+            case PACKAGE -> \"doclet.Packages\";\n+            case INTERFACE -> \"doclet.Interfaces\";\n+            case CLASS -> \"doclet.Classes\";\n+            case ENUM -> \"doclet.Enums\";\n+            case EXCEPTION -> \"doclet.Exceptions\";\n+            case ERROR -> \"doclet.Errors\";\n+            case ANNOTATION_TYPE -> \"doclet.Annotation_Types\";\n+            case FIELD -> \"doclet.Fields\";\n+            case METHOD -> \"doclet.Methods\";\n+            case CONSTRUCTOR -> \"doclet.Constructors\";\n+            case ENUM_CONSTANT -> \"doclet.Enum_Constants\";\n+            case ANNOTATION_TYPE_MEMBER -> \"doclet.Annotation_Type_Members\";\n+            case RECORD_CLASS -> \"doclet.RecordClasses\";\n+        };\n+    }\n+\n+    private String getHeaderKey(SummaryElementKind kind) {\n+        return switch (kind) {\n+            case MODULE -> \"doclet.Module\";\n+            case PACKAGE -> \"doclet.Package\";\n+            case INTERFACE -> \"doclet.Interface\";\n+            case CLASS -> \"doclet.Class\";\n+            case ENUM -> \"doclet.Enum\";\n+            case EXCEPTION -> \"doclet.Exceptions\";\n+            case ERROR -> \"doclet.Errors\";\n+            case ANNOTATION_TYPE -> \"doclet.AnnotationType\";\n+            case FIELD -> \"doclet.Field\";\n+            case METHOD -> \"doclet.Method\";\n+            case CONSTRUCTOR -> \"doclet.Constructor\";\n+            case ENUM_CONSTANT -> \"doclet.Enum_Constant\";\n+            case ANNOTATION_TYPE_MEMBER -> \"doclet.Annotation_Type_Member\";\n+            case RECORD_CLASS -> \"doclet.RecordClass\";\n+        };\n+    }\n+\n+    private final PageMode pageMode;\n+    private final String description;\n+    private final Content headContent;\n+    private final String titleKey;\n+\n+    \/**\n+     * Constructor.\n+     *\n+     * @param configuration the configuration for this doclet\n+     * @param filename the file to be generated\n+     * @param pageMode page mode to use\n+     * @param description page description\n+     * @param headContent page heading content\n+     * @param titleKey page title resource key\n+     *\/\n+\n+    public SummaryListWriter(HtmlConfiguration configuration, DocPath filename,\n+                             PageMode pageMode, String description,\n+                             Content headContent, String titleKey) {\n+        super(configuration, filename);\n+        this.pageMode = pageMode;\n+        this.description = description;\n+        this.headContent = headContent;\n+        this.titleKey = titleKey;\n+    }\n+\n+    \/**\n+     * Generate the API summary.\n+     *\n+     * @param summaryapi list of API summary built already.\n+     * @throws DocFileIOException if there is a problem writing the summary list\n+     *\/\n+    protected void generateSummaryListFile(L summaryapi)\n+            throws DocFileIOException {\n+        HtmlTree body = getHeader();\n+        bodyContents.addMainContent(getContentsList(summaryapi));\n+        Content content = new ContentBuilder();\n+        addExtraSection(summaryapi, content);\n+        for (SummaryElementKind kind : SummaryElementKind.values()) {\n+            if (summaryapi.hasDocumentation(kind)) {\n+                addSummaryAPI(summaryapi.getSet(kind), getAnchorName(kind),\n+                            getHeadingKey(kind), getHeaderKey(kind), content);\n+            }\n+        }\n+        bodyContents.addMainContent(content);\n+        bodyContents.setFooter(getFooter());\n+        body.add(bodyContents);\n+        printHtmlDocument(null, description, body);\n+    }\n+\n+    \/**\n+     * Add the index link.\n+     *\n+     * @param builder the summary list builder\n+     * @param kind the kind of list being documented\n+     * @param contentTree the content tree to which the index link will be added\n+     *\/\n+    protected void addIndexLink(String anchorName, String headingKey,\n+                                Content contentTree) {\n+        Content li = HtmlTree.LI(links.createLink(anchorName,\n+                contents.getContent(headingKey)));\n+        contentTree.add(li);\n+    }\n+\n+    \/**\n+     * Get the contents list.\n+     *\n+     * @param apisummary the summary list builder\n+     * @return a content tree for the contents list\n+     *\/\n+    public Content getContentsList(L apisummary) {\n+        Content heading = HtmlTree.HEADING_TITLE(Headings.PAGE_TITLE_HEADING,\n+                HtmlStyle.title, headContent);\n+        Content div = HtmlTree.DIV(HtmlStyle.header, heading);\n+        Content headingContent = contents.contentsHeading;\n+        div.add(HtmlTree.HEADING_TITLE(Headings.CONTENT_HEADING,\n+                headingContent));\n+        Content ul = new HtmlTree(TagName.UL);\n+        addExtraIndexLink(apisummary, ul);\n+        for (SummaryElementKind kind : SummaryElementKind.values()) {\n+            if (apisummary.hasDocumentation(kind)) {\n+                addIndexLink(getAnchorName(kind), getHeadingKey(kind), ul);\n+            }\n+        }\n+        div.add(ul);\n+        return div;\n+    }\n+\n+    \/**\n+     * Get the header for the API Summary Listing.\n+     *\n+     * @return a content tree for the header\n+     *\/\n+    public HtmlTree getHeader() {\n+        String title = resources.getText(titleKey);\n+        HtmlTree bodyTree = getBody(getWindowTitle(title));\n+        bodyContents.setHeader(getHeader(pageMode));\n+        return bodyTree;\n+    }\n+\n+    \/**\n+     * Add summary information to the documentation tree\n+     *\n+     * @param apiList list of API summary elements\n+     * @param id the id attribute of the table\n+     * @param headingKey the caption for the summary table\n+     * @param headerKey table header key for the summary table\n+     * @param contentTree the content tree to which the summary table will be added\n+     *\/\n+    protected void addSummaryAPI(SortedSet<Element> apiList, String id,\n+                                 String headingKey, String headerKey,\n+                                 Content contentTree) {\n+        if (apiList.size() > 0) {\n+            TableHeader tableHeader = new TableHeader(\n+                    contents.getContent(headerKey), contents.descriptionLabel);\n+\n+            Content caption = contents.getContent(headingKey);\n+            Table table = new Table(HtmlStyle.summaryTable)\n+                    .setCaption(caption)\n+                    .setHeader(tableHeader)\n+                    .setId(id)\n+                    .setColumnStyles(HtmlStyle.colSummaryItemName, HtmlStyle.colLast);\n+            for (Element e : apiList) {\n+                Content link;\n+                switch (e.getKind()) {\n+                    case MODULE:\n+                        ModuleElement m = (ModuleElement) e;\n+                        link = getModuleLink(m, new StringContent(m.getQualifiedName()));\n+                        break;\n+                    case PACKAGE:\n+                        PackageElement pkg = (PackageElement) e;\n+                        link = getPackageLink(pkg, getPackageName(pkg));\n+                        break;\n+                    default:\n+                        link = getSummaryLink(e);\n+                }\n+                Content desc = new ContentBuilder();\n+                addComments(e, desc);\n+                table.addRow(link, desc);\n+            }\n+            \/\/ note: singleton list\n+            contentTree.add(HtmlTree.UL(HtmlStyle.blockList, HtmlTree.LI(table)));\n+        }\n+    }\n+\n+    \/**\n+     * Add summary text for the given element.\n+     *\n+     * @param e the element for which the summary text should be added\n+     * @param desc the target to which the text should be added\n+     *\/\n+    protected abstract void addComments(Element e, Content desc);\n+\n+    protected Content getSummaryLink(Element e) {\n+        AbstractMemberWriter writer = switch (e.getKind()) {\n+            case INTERFACE, CLASS, ENUM,\n+                 ANNOTATION_TYPE, RECORD -> new NestedClassWriterImpl(this);\n+            case FIELD -> new FieldWriterImpl(this);\n+            case METHOD -> new MethodWriterImpl(this);\n+            case CONSTRUCTOR -> new ConstructorWriterImpl(this);\n+            case ENUM_CONSTANT -> new EnumConstantWriterImpl(this);\n+            case RECORD_COMPONENT ->\n+                throw new AssertionError(\"Record components are not supported by SummaryListWriter!\");\n+            default -> new AnnotationTypeOptionalMemberWriterImpl(this, null);\n+        };\n+        return writer.getSummaryLink(e);\n+    }\n+\n+    \/**\n+     * Add an extra optional section to the content.\n+     *\n+     * @param list the element list\n+     * @param target the target content to which the section should be added\n+     *\/\n+    protected void addExtraSection(L list, Content target) {\n+    }\n+\n+    \/**\n+     * Add an extra optional index link.\n+     *\n+     * @param list the element list\n+     * @param target the target content to which the link should be added\n+     *\/\n+    protected void addExtraIndexLink(L list, Content target) {\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":303,"deletions":0,"binary":false,"changes":303,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,3 @@\n+    previewBlock,\n+    previewComment,\n+    previewLabel,\n@@ -421,6 +424,0 @@\n-    \/**\n-     * The class of the cells in a table column used to display the name\n-     * of a deprecated item.\n-     *\/\n-    colDeprecatedItemName,\n-\n@@ -441,0 +438,6 @@\n+    \/**\n+     * The class of the cells in a table column used to display the name\n+     * of a summary item.\n+     *\/\n+    colSummaryItemName,\n+\n@@ -693,0 +696,5 @@\n+    \/**\n+     * The class of the {@code body} element for the page listing any deprecated items.\n+     *\/\n+    previewListPage,\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyle.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -786,0 +786,11 @@\n+    \/**\n+     * Creates an HTML {@code SUP} element with the given content.\n+     *\n+     * @param body  the content\n+     * @return the element\n+     *\/\n+    public static HtmlTree SUP(Content body) {\n+        return new HtmlTree(TagName.SUP)\n+                .add(body);\n+    }\n+\n@@ -932,1 +943,1 @@\n-            case LABEL: case SMALL: case SPAN: case STRONG: case SUB:\n+            case LABEL: case SMALL: case SPAN: case STRONG: case SUB: case SUP:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,1 @@\n+    SUP,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/TagName.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+doclet.Window_Preview_List=Preview List\n@@ -99,0 +100,3 @@\n+doclet.Preview_API=Preview API\n+doclet.Preview_Label=Preview\n+doclet.Preview_Mark=PREVIEW\n@@ -104,1 +108,0 @@\n-doclet.for_removal=for removal\n@@ -109,1 +112,0 @@\n-doclet.record_classes=record classes\n@@ -203,0 +205,3 @@\n+doclet.help.preview.body=\\\n+    The {0} page lists all of the Preview APIs. \\\n+    Preview APIs may be removed in future implementations.\n@@ -289,0 +294,11 @@\n+doclet.PreviewLeadingNote={0} relies on preview features of the Java platform:\n+doclet.Declared_Using_Preview={0} is declared using {1}, a preview feature of the Java language ({2}).\n+doclet.PreviewAPI={0} refers to one or more preview APIs:  {1}.\n+doclet.ReflectivePreviewAPI={0} refers to one or more reflective preview APIs:  {1}.\n+doclet.UsesDeclaredUsingPreview={0} refers to one or more types which are declared using a preview feature of the Java language: {1}.\n+doclet.PreviewTrailingNote1=Programs can only use {0} when preview features are enabled.\n+doclet.PreviewTrailingNote2=Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.\n+doclet.Declared_Using_Preview.SEALED=Sealed Classes\n+doclet.Declared_Using_Preview.SEALED_PERMITS=Sealed Classes\n+doclet.PreviewPlatformLeadingNote={0} is a preview API of the Java platform.\n+doclet.ReflectivePreviewPlatformLeadingNote={0} is a reflective preview API of the Java platform.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,0 +95,8 @@\n+    \/**\n+     * Add the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(Element member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AnnotationTypeRequiredMemberWriter.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,8 @@\n+    \/**\n+     * Add the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(ExecutableElement member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/ConstructorWriter.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,0 +78,8 @@\n+    \/**\n+     * Add the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(VariableElement member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/EnumConstantWriter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,8 @@\n+    \/**\n+     * Adds the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(VariableElement member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/FieldWriter.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,0 +74,8 @@\n+    \/**\n+     * Adds the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(ExecutableElement member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/MethodWriter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,8 @@\n+    \/**\n+     * Add the preview output for the given member.\n+     *\n+     * @param member the member being documented\n+     * @param annotationDocTree content tree to which the preview information will be added\n+     *\/\n+    void addPreview(ExecutableElement member, Content contentTree);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/PropertyWriter.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -516,0 +516,11 @@\n+\n+    public boolean isPreviewAPI(Element el) {\n+        Symbol sym = (Symbol) el;\n+        return (sym.flags() & Flags.PREVIEW_API) != 0;\n+    }\n+\n+    public boolean isReflectivePreviewAPI(Element el) {\n+        Symbol sym = (Symbol) el;\n+        return (sym.flags() & Flags.PREVIEW_REFLECTIVE) != 0;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.AbstractMemberWriter;\n@@ -155,0 +156,1 @@\n+        buildPreviewInfo(annotationDocTree);\n@@ -177,0 +179,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param annotationDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content annotationDocTree) {\n+        writer.addPreview(currentMember, annotationDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/AnnotationTypeRequiredMemberBuilder.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,0 +135,1 @@\n+                buildPreviewInfo(constructorDocTree);\n@@ -163,0 +164,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param constructorDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content constructorDocTree) {\n+        writer.addPreview(currentConstructor, constructorDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ConstructorBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,1 @@\n+                buildPreviewInfo(enumConstantsTree);\n@@ -157,0 +158,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param enumConstantsTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content enumConstantsTree) {\n+        writer.addPreview(currentElement, enumConstantsTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/EnumConstantBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,1 @@\n+                buildPreviewInfo(fieldDocTree);\n@@ -156,0 +157,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param fieldDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content fieldDocTree) {\n+        writer.addPreview(currentElement, fieldDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/FieldBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,1 @@\n+                buildPreviewInfo(methodDocTree);\n@@ -154,0 +155,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param methodDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content methodDocTree) {\n+        writer.addPreview(currentMethod, methodDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MethodBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,0 +155,9 @@\n+    \/**\n+     * Build the preview information.\n+     *\n+     * @param propertyDocTree the content tree to which the documentation will be added\n+     *\/\n+    protected void buildPreviewInfo(Content propertyDocTree) {\n+        writer.addPreview(currentProperty, propertyDocTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/PropertyBuilder.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,2 +154,0 @@\n-doclet.packages=packages\n-doclet.modules=modules\n@@ -174,1 +172,0 @@\n-doclet.interfaces=interfaces\n@@ -176,1 +173,0 @@\n-doclet.classes=classes\n@@ -181,1 +177,0 @@\n-doclet.errors=errors\n@@ -184,1 +179,0 @@\n-doclet.exceptions=exceptions\n@@ -219,1 +213,0 @@\n-doclet.fields=fields\n@@ -221,0 +214,1 @@\n+doclet.Preview=Preview.\n@@ -222,1 +216,0 @@\n-doclet.constructors=constructors\n@@ -224,1 +217,0 @@\n-doclet.methods=methods\n@@ -235,1 +227,0 @@\n-doclet.enum_constants=enum constants\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-.col-first, .col-second, .col-last, .col-constructor-name, .col-deprecated-item-name {\n+.col-first, .col-second, .col-last, .col-constructor-name, .col-summary-item-name {\n@@ -447,1 +447,1 @@\n-.col-second, .col-second, .col-last, .col-constructor-name, .col-deprecated-item-name, .col-last {\n+.col-second, .col-second, .col-last, .col-constructor-name, .col-summary-item-name, .col-last {\n@@ -462,1 +462,1 @@\n-.col-deprecated-item-name a:link, .col-deprecated-item-name a:visited,\n+.col-summary-item-name a:link, .col-summary-item-name a:visited,\n@@ -537,1 +537,1 @@\n-.package-hierarchy-label, .type-name-label, .type-name-link, .search-tag-link {\n+.package-hierarchy-label, .type-name-label, .type-name-link, .search-tag-link, .preview-label {\n@@ -540,1 +540,1 @@\n-.deprecation-comment, .help-footnote, .interface-name {\n+.deprecation-comment, .help-footnote, .interface-name, .preview-comment {\n@@ -554,0 +554,11 @@\n+.preview-block {\n+    font-size:14px;\n+    font-family:'DejaVu Serif', Georgia, \"Times New Roman\", Times, serif;\n+    border-style:solid;\n+    border-width:thin;\n+    border-radius:10px;\n+    padding:10px;\n+    margin-bottom:10px;\n+    margin-right:10px;\n+    display:inline-block;\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/stylesheet.css","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,1 @@\n-    private Comparator<Element> deprecatedComparator = null;\n+    private Comparator<Element> summaryComparator = null;\n@@ -130,1 +130,2 @@\n-     * Returns a Comparator for deprecated items listed on deprecated list page, by comparing the\n+     * Returns a Comparator for items listed on summary list pages\n+     * (like deprecated or preview summary pages), by comparing the\n@@ -135,3 +136,3 @@\n-    public Comparator<Element> makeDeprecatedComparator() {\n-        if (deprecatedComparator == null) {\n-            deprecatedComparator = new ElementComparator() {\n+    public Comparator<Element> makeSummaryComparator() {\n+        if (summaryComparator == null) {\n+            summaryComparator = new ElementComparator() {\n@@ -153,1 +154,1 @@\n-        return deprecatedComparator;\n+        return summaryComparator;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Comparators.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import javax.lang.model.element.ModuleElement;\n-import javax.lang.model.element.PackageElement;\n-import javax.lang.model.element.TypeElement;\n@@ -45,25 +42,2 @@\n-public class DeprecatedAPIListBuilder {\n-    \/**\n-     * List of deprecated type Lists.\n-     *\/\n-    private final Map<DeprElementKind, SortedSet<Element>> deprecatedMap;\n-    private final BaseConfiguration configuration;\n-    private final Utils utils;\n-\n-    public enum DeprElementKind {\n-        REMOVAL,\n-        MODULE,\n-        PACKAGE,\n-        INTERFACE,\n-        CLASS,\n-        ENUM,\n-        EXCEPTION,              \/\/ no ElementKind mapping\n-        ERROR,                  \/\/ no ElementKind mapping\n-        RECORD_CLASS,\n-        ANNOTATION_TYPE,\n-        FIELD,\n-        METHOD,\n-        CONSTRUCTOR,\n-        ENUM_CONSTANT,\n-        ANNOTATION_TYPE_MEMBER \/\/ no ElementKind mapping\n-    };\n+public class DeprecatedAPIListBuilder extends SummaryAPIListBuilder {\n+    private SortedSet<Element> forRemoval;\n@@ -77,12 +51,1 @@\n-        this.configuration = configuration;\n-        this.utils = configuration.utils;\n-        deprecatedMap = new EnumMap<>(DeprElementKind.class);\n-        for (DeprElementKind kind : DeprElementKind.values()) {\n-            deprecatedMap.put(kind,\n-                    new TreeSet<>(utils.comparators.makeDeprecatedComparator()));\n-        }\n-        buildDeprecatedAPIInfo();\n-    }\n-\n-    public boolean isEmpty() {\n-        return deprecatedMap.values().stream().allMatch(Set::isEmpty);\n+        super(configuration, configuration.utils::isDeprecated);\n@@ -91,78 +54,3 @@\n-    \/**\n-     * Build the sorted list of all the deprecated APIs in this run.\n-     * Build separate lists for deprecated modules, packages, classes, constructors,\n-     * methods and fields.\n-     *\/\n-    private void buildDeprecatedAPIInfo() {\n-        SortedSet<Element> rset = deprecatedMap.get(DeprElementKind.REMOVAL);\n-        SortedSet<ModuleElement> modules = configuration.modules;\n-        SortedSet<Element> mset = deprecatedMap.get(DeprElementKind.MODULE);\n-        for (Element me : modules) {\n-            if (utils.isDeprecatedForRemoval(me)) {\n-                rset.add(me);\n-            }\n-            if (utils.isDeprecated(me)) {\n-                mset.add(me);\n-            }\n-        }\n-        SortedSet<PackageElement> packages = configuration.packages;\n-        SortedSet<Element> pset = deprecatedMap.get(DeprElementKind.PACKAGE);\n-        for (Element pe : packages) {\n-            if (utils.isDeprecatedForRemoval(pe)) {\n-                rset.add(pe);\n-            }\n-            if (utils.isDeprecated(pe)) {\n-                pset.add(pe);\n-            }\n-        }\n-        for (Element e : configuration.getIncludedTypeElements()) {\n-            TypeElement te = (TypeElement)e;\n-            SortedSet<Element> eset;\n-            if (utils.isDeprecatedForRemoval(e)) {\n-                rset.add(e);\n-            }\n-            if (utils.isDeprecated(e)) {\n-                switch (e.getKind()) {\n-                    case ANNOTATION_TYPE:\n-                        eset = deprecatedMap.get(DeprElementKind.ANNOTATION_TYPE);\n-                        eset.add(e);\n-                        break;\n-                    case CLASS:\n-                        if (utils.isError(te)) {\n-                            eset = deprecatedMap.get(DeprElementKind.ERROR);\n-                        } else if (utils.isException(te)) {\n-                            eset = deprecatedMap.get(DeprElementKind.EXCEPTION);\n-                        } else {\n-                            eset = deprecatedMap.get(DeprElementKind.CLASS);\n-                        }\n-                        eset.add(e);\n-                        break;\n-                    case INTERFACE:\n-                        eset = deprecatedMap.get(DeprElementKind.INTERFACE);\n-                        eset.add(e);\n-                        break;\n-                    case ENUM:\n-                        eset = deprecatedMap.get(DeprElementKind.ENUM);\n-                        eset.add(e);\n-                        break;\n-                    case RECORD:\n-                        eset = deprecatedMap.get(DeprElementKind.RECORD_CLASS);\n-                        eset.add(e);\n-                        break;\n-                }\n-            }\n-            composeDeprecatedList(rset, deprecatedMap.get(DeprElementKind.FIELD),\n-                    utils.getFields(te));\n-            composeDeprecatedList(rset, deprecatedMap.get(DeprElementKind.METHOD),\n-                    utils.getMethods(te));\n-            composeDeprecatedList(rset, deprecatedMap.get(DeprElementKind.CONSTRUCTOR),\n-                    utils.getConstructors(te));\n-            if (utils.isEnum(e)) {\n-                composeDeprecatedList(rset, deprecatedMap.get(DeprElementKind.ENUM_CONSTANT),\n-                        utils.getEnumConstants(te));\n-            }\n-            if (utils.isAnnotationType(e)) {\n-                composeDeprecatedList(rset, deprecatedMap.get(DeprElementKind.ANNOTATION_TYPE_MEMBER),\n-                        utils.getAnnotationMembers(te));\n-\n-            }\n+    public SortedSet<Element> getForRemoval() {\n+        if (forRemoval == null) {\n+            forRemoval = createSummarySet();\n@@ -170,0 +58,1 @@\n+        return forRemoval;\n@@ -172,15 +61,4 @@\n-    \/**\n-     * Add the members into a single list of deprecated members.\n-     *\n-     * @param rset set of elements deprecated for removal.\n-     * @param sset set of deprecated elements.\n-     * @param members members to be added in the list.\n-     *\/\n-    private void composeDeprecatedList(SortedSet<Element> rset, SortedSet<Element> sset, List<? extends Element> members) {\n-        for (Element member : members) {\n-            if (utils.isDeprecatedForRemoval(member)) {\n-                rset.add(member);\n-            }\n-            if (utils.isDeprecated(member)) {\n-                sset.add(member);\n-            }\n+    @Override\n+    protected void handleElement(Element e) {\n+        if (utils.isDeprecatedForRemoval(e)) {\n+            getForRemoval().add(e);\n@@ -190,18 +68,0 @@\n-    \/**\n-     * Return the list of deprecated elements of a given type.\n-     *\n-     * @param kind the DeprElementKind\n-     * @return\n-     *\/\n-    public SortedSet<Element> getSet(DeprElementKind kind) {\n-        return deprecatedMap.get(kind);\n-    }\n-\n-    \/**\n-     * Return true if the list of a given type has size greater than 0.\n-     *\n-     * @param kind the type of list being checked.\n-     *\/\n-    public boolean hasDocumentation(DeprElementKind kind) {\n-        return !deprecatedMap.get(kind).isEmpty();\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DeprecatedAPIListBuilder.java","additions":12,"deletions":152,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,4 @@\n+    public DocLink withFragment(String fragment) {\n+        return new DocLink(path, fragment);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocLink.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,0 +142,3 @@\n+    \/** The name of the fie for preview elements. *\/\n+    public static final DocPath PREVIEW_LIST = DocPath.create(\"preview-list.html\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit.util;\n+\n+import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;\n+\n+\/**\n+ * Build list of all the preview packages, classes, constructors, fields and methods.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class PreviewAPIListBuilder extends SummaryAPIListBuilder {\n+\n+    \/**\n+     * Constructor.\n+     *\n+     * @param configuration the current configuration of the doclet\n+     *\/\n+    public PreviewAPIListBuilder(BaseConfiguration configuration) {\n+        super(configuration, e -> configuration.utils.isPreviewAPI(e));\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/PreviewAPIListBuilder.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit.util;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.PackageElement;\n+import javax.lang.model.element.RecordComponentElement;\n+import javax.lang.model.element.TypeElement;\n+\n+import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;\n+\n+\/**\n+ * Build list of all the summary packages, classes, constructors, fields and methods.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class SummaryAPIListBuilder {\n+    \/**\n+     * List of summary type Lists.\n+     *\/\n+    private final Map<SummaryElementKind, SortedSet<Element>> summaryMap;\n+    private final BaseConfiguration configuration;\n+    protected final Utils utils;\n+    private final Predicate<Element> belongsToSummary;\n+    public enum SummaryElementKind {\n+        MODULE,\n+        PACKAGE,\n+        INTERFACE,\n+        CLASS,\n+        ENUM,\n+        EXCEPTION,              \/\/ no ElementKind mapping\n+        ERROR,                  \/\/ no ElementKind mapping\n+        RECORD_CLASS,\n+        ANNOTATION_TYPE,\n+        FIELD,\n+        METHOD,\n+        CONSTRUCTOR,\n+        ENUM_CONSTANT,\n+        ANNOTATION_TYPE_MEMBER \/\/ no ElementKind mapping\n+    };\n+    \/**\n+     * Constructor.\n+     *\n+     * @param configuration the current configuration of the doclet\n+     *\/\n+    public SummaryAPIListBuilder(BaseConfiguration configuration,\n+                                 Predicate<Element> belongsToSummary) {\n+        this.configuration = configuration;\n+        this.utils = configuration.utils;\n+        this.belongsToSummary = belongsToSummary;\n+        summaryMap = new EnumMap<>(SummaryElementKind.class);\n+        for (SummaryElementKind kind : SummaryElementKind.values()) {\n+            summaryMap.put(kind, createSummarySet());\n+        }\n+        buildSummaryAPIInfo();\n+    }\n+\n+    public boolean isEmpty() {\n+        return summaryMap.values().stream().allMatch(Set::isEmpty);\n+    }\n+\n+    \/**\n+     * Build the sorted list of all the summary APIs in this run.\n+     * Build separate lists for summary modules, packages, classes, constructors,\n+     * methods and fields.\n+     *\/\n+    private void buildSummaryAPIInfo() {\n+        SortedSet<ModuleElement> modules = configuration.modules;\n+        SortedSet<Element> mset = summaryMap.get(SummaryElementKind.MODULE);\n+        for (Element me : modules) {\n+            if (belongsToSummary.test(me)) {\n+                mset.add(me);\n+            }\n+            handleElement(me);\n+        }\n+        SortedSet<PackageElement> packages = configuration.packages;\n+        SortedSet<Element> pset = summaryMap.get(SummaryElementKind.PACKAGE);\n+        for (Element pe : packages) {\n+            if (belongsToSummary.test(pe)) {\n+                pset.add(pe);\n+            }\n+            handleElement(pe);\n+        }\n+        for (Element e : configuration.getIncludedTypeElements()) {\n+            TypeElement te = (TypeElement)e;\n+            SortedSet<Element> eset;\n+            if (belongsToSummary.test(e)) {\n+                switch (e.getKind()) {\n+                    case ANNOTATION_TYPE -> {\n+                        eset = summaryMap.get(SummaryElementKind.ANNOTATION_TYPE);\n+                        eset.add(e);\n+                    }\n+                    case CLASS -> {\n+                        if (utils.isError(te)) {\n+                            eset = summaryMap.get(SummaryElementKind.ERROR);\n+                        } else if (utils.isException(te)) {\n+                            eset = summaryMap.get(SummaryElementKind.EXCEPTION);\n+                        } else {\n+                            eset = summaryMap.get(SummaryElementKind.CLASS);\n+                        }\n+                        eset.add(e);\n+                    }\n+                    case INTERFACE -> {\n+                        eset = summaryMap.get(SummaryElementKind.INTERFACE);\n+                        eset.add(e);\n+                    }\n+                    case ENUM -> {\n+                        eset = summaryMap.get(SummaryElementKind.ENUM);\n+                        eset.add(e);\n+                    }\n+                    case RECORD -> {\n+                        eset = summaryMap.get(SummaryElementKind.RECORD_CLASS);\n+                        eset.add(e);\n+                    }\n+                }\n+            }\n+            handleElement(te);\n+            composeSummaryList(summaryMap.get(SummaryElementKind.FIELD),\n+                    utils.getFields(te));\n+            composeSummaryList(summaryMap.get(SummaryElementKind.METHOD),\n+                    utils.getMethods(te));\n+            composeSummaryList(summaryMap.get(SummaryElementKind.CONSTRUCTOR),\n+                    utils.getConstructors(te));\n+            if (utils.isEnum(e)) {\n+                composeSummaryList(summaryMap.get(SummaryElementKind.ENUM_CONSTANT),\n+                        utils.getEnumConstants(te));\n+            }\n+            if (utils.isRecord(te)) {\n+                for (RecordComponentElement component : te.getRecordComponents()) {\n+                    if (belongsToSummary.test(component)) {\n+                        throw new AssertionError(\"record components not supported in summary builders: \" +\n+                                                 \"component: \" + component.getSimpleName() +\n+                                                 \" of record: \" + te.getQualifiedName());\n+                    }\n+                }\n+            }\n+            if (utils.isAnnotationType(e)) {\n+                composeSummaryList(summaryMap.get(SummaryElementKind.ANNOTATION_TYPE_MEMBER),\n+                        utils.getAnnotationMembers(te));\n+\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Add the members into a single list of summary members.\n+     *\n+     * @param rset set of elements summary for removal.\n+     * @param sset set of summary elements.\n+     * @param members members to be added in the list.\n+     *\/\n+    private void composeSummaryList(SortedSet<Element> sset, List<? extends Element> members) {\n+        for (Element member : members) {\n+            if (belongsToSummary.test(member)) {\n+                sset.add(member);\n+            }\n+            handleElement(member);\n+        }\n+    }\n+\n+    \/**\n+     * Return the list of summary elements of a given type.\n+     *\n+     * @param kind the SummaryElementKind\n+     * @return\n+     *\/\n+    public SortedSet<Element> getSet(SummaryElementKind kind) {\n+        return summaryMap.get(kind);\n+    }\n+\n+    \/**\n+     * Return true if the list of a given type has size greater than 0.\n+     *\n+     * @param kind the type of list being checked.\n+     *\/\n+    public boolean hasDocumentation(SummaryElementKind kind) {\n+        return !summaryMap.get(kind).isEmpty();\n+    }\n+\n+    \/**\n+     * Additional extra processing of an analyzed element.\n+     *\n+     * @param e element to process\n+     *\/\n+    protected void handleElement(Element e) {}\n+\n+    \/**\n+     * Create a summary set of elements.\n+     *\n+     * @return a summary set\n+     *\/\n+    protected final SortedSet<Element> createSummarySet() {\n+        return new TreeSet<>(utils.comparators.makeSummaryComparator());\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+import javax.lang.model.AnnotatedConstruct;\n@@ -85,0 +86,1 @@\n+import javax.lang.model.util.SimpleAnnotationValueVisitor14;\n@@ -2963,0 +2965,252 @@\n+\n+    \/**\n+     * Return the set of preview language features used to declare the given element.\n+     *\n+     * @param e the Element to check.\n+     * @return the set of preview language features used to declare the given element\n+     *\/\n+    @SuppressWarnings(\"preview\")\n+    public Set<DeclarationPreviewLanguageFeatures> previewLanguageFeaturesUsed(Element e) {\n+        Set<DeclarationPreviewLanguageFeatures> result = new HashSet<>();\n+\n+        if ((e.getKind().isClass() || e.getKind().isInterface()) &&\n+            e.getModifiers().contains(Modifier.SEALED)) {\n+            List<? extends TypeMirror> permits = ((TypeElement) e).getPermittedSubclasses();\n+            boolean hasLinkablePermits = permits.stream()\n+                                                .anyMatch(t -> isLinkable(asTypeElement(t)));\n+            if (hasLinkablePermits) {\n+                result.add(DeclarationPreviewLanguageFeatures.SEALED_PERMITS);\n+            } else {\n+                result.add(DeclarationPreviewLanguageFeatures.SEALED);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public enum DeclarationPreviewLanguageFeatures {\n+\n+        SEALED(List.of(\"sealed\")),\n+        SEALED_PERMITS(List.of(\"sealed\", \"permits\"));\n+        public final List<String> features;\n+\n+        private DeclarationPreviewLanguageFeatures(List<String> features) {\n+            this.features = features;\n+        }\n+\n+    }\n+\n+    @SuppressWarnings(\"preview\")\n+    public PreviewSummary declaredUsingPreviewAPIs(Element el) {\n+        List<TypeElement> usedInDeclaration = new ArrayList<>();\n+        usedInDeclaration.addAll(annotations2Classes(el));\n+        switch (el.getKind()) {\n+            case ANNOTATION_TYPE, CLASS, ENUM, INTERFACE, RECORD -> {\n+                TypeElement te = (TypeElement) el;\n+                for (TypeParameterElement tpe : te.getTypeParameters()) {\n+                    usedInDeclaration.addAll(types2Classes(tpe.getBounds()));\n+                }\n+                usedInDeclaration.addAll(types2Classes(List.of(te.getSuperclass())));\n+                usedInDeclaration.addAll(types2Classes(te.getInterfaces()));\n+                usedInDeclaration.addAll(types2Classes(te.getPermittedSubclasses()));\n+                usedInDeclaration.addAll(types2Classes(te.getRecordComponents().stream().map(c -> c.asType()).collect(Collectors.toList()))); \/\/TODO: annotations on record components???\n+            }\n+            case CONSTRUCTOR, METHOD -> {\n+                ExecutableElement ee = (ExecutableElement) el;\n+                for (TypeParameterElement tpe : ee.getTypeParameters()) {\n+                    usedInDeclaration.addAll(types2Classes(tpe.getBounds()));\n+                }\n+                usedInDeclaration.addAll(types2Classes(List.of(ee.getReturnType())));\n+                usedInDeclaration.addAll(types2Classes(List.of(ee.getReceiverType())));\n+                usedInDeclaration.addAll(types2Classes(ee.getThrownTypes()));\n+                usedInDeclaration.addAll(types2Classes(ee.getParameters().stream().map(p -> p.asType()).collect(Collectors.toList())));\n+                usedInDeclaration.addAll(annotationValue2Classes(ee.getDefaultValue()));\n+            }\n+            case FIELD, ENUM_CONSTANT, RECORD_COMPONENT -> {\n+                VariableElement ve = (VariableElement) el;\n+                usedInDeclaration.addAll(types2Classes(List.of(ve.asType())));\n+            }\n+            case MODULE, PACKAGE -> {\n+            }\n+            default -> throw new IllegalArgumentException(\"Unexpected: \" + el.getKind());\n+        }\n+\n+        Set<TypeElement> previewAPI = new HashSet<>();\n+        Set<TypeElement> reflectivePreviewAPI = new HashSet<>();\n+        Set<TypeElement> declaredUsingPreviewFeature = new HashSet<>();\n+\n+        for (TypeElement type : usedInDeclaration) {\n+            if (!isIncluded(type) && !configuration.extern.isExternal(type)) {\n+                continue;\n+            }\n+            if (isPreviewAPI(type)) {\n+                if (isReflectivePreviewAPI(type)) {\n+                    reflectivePreviewAPI.add(type);\n+                } else {\n+                    previewAPI.add(type);\n+                }\n+            }\n+            if (!previewLanguageFeaturesUsed(type).isEmpty()) {\n+                declaredUsingPreviewFeature.add(type);\n+            }\n+        }\n+\n+        return new PreviewSummary(previewAPI, reflectivePreviewAPI, declaredUsingPreviewFeature);\n+    }\n+\n+    private Collection<TypeElement> types2Classes(List<? extends TypeMirror> types) {\n+        List<TypeElement> result = new ArrayList<>();\n+        List<TypeMirror> todo = new ArrayList<>(types);\n+\n+        while (!todo.isEmpty()) {\n+            TypeMirror type = todo.remove(todo.size() - 1);\n+\n+            result.addAll(annotations2Classes(type));\n+\n+            if (type.getKind() == DECLARED) {\n+                DeclaredType dt = (DeclaredType) type;\n+                result.add((TypeElement) dt.asElement());\n+                todo.addAll(dt.getTypeArguments());\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private Collection<TypeElement> annotations2Classes(AnnotatedConstruct annotated) {\n+        List<TypeElement> result = new ArrayList<>();\n+\n+        for (AnnotationMirror am : annotated.getAnnotationMirrors()) {\n+            result.addAll(annotation2Classes(am));\n+        }\n+\n+        return result;\n+    }\n+\n+    private Collection<TypeElement> annotation2Classes(AnnotationMirror am) {\n+        List<TypeElement> result = new ArrayList<>();\n+\n+        result.addAll(types2Classes(List.of(am.getAnnotationType())));\n+        am.getElementValues()\n+          .values()\n+          .stream()\n+          .flatMap(av -> annotationValue2Classes(av).stream())\n+          .forEach(result::add);\n+\n+        return result;\n+    }\n+\n+    private Collection<TypeElement> annotationValue2Classes(AnnotationValue value) {\n+        if (value == null) {\n+            return List.of();\n+        }\n+\n+        List<TypeElement> result = new ArrayList<>();\n+\n+        value.accept(new SimpleAnnotationValueVisitor14<>() {\n+            @Override\n+            public Object visitArray(List<? extends AnnotationValue> vals, Object p) {\n+                vals.stream()\n+                    .forEach(v -> v.accept(this, null));\n+                return super.visitArray(vals, p);\n+            }\n+            @Override\n+            public Object visitAnnotation(AnnotationMirror a, Object p) {\n+                result.addAll(annotation2Classes(a));\n+                return super.visitAnnotation(a, p);\n+            }\n+\n+            @Override\n+            public Object visitType(TypeMirror t, Object p) {\n+                result.addAll(types2Classes(List.of(t)));\n+                return super.visitType(t, p);\n+            }\n+\n+        }, null);\n+\n+        return result;\n+    }\n+\n+    public static final class PreviewSummary {\n+        public final Set<TypeElement> previewAPI;\n+        public final Set<TypeElement> reflectivePreviewAPI;\n+        public final Set<TypeElement> declaredUsingPreviewFeature;\n+\n+        public PreviewSummary(Set<TypeElement> previewAPI, Set<TypeElement> reflectivePreviewAPI, Set<TypeElement> declaredUsingPreviewFeature) {\n+            this.previewAPI = previewAPI;\n+            this.reflectivePreviewAPI = reflectivePreviewAPI;\n+            this.declaredUsingPreviewFeature = declaredUsingPreviewFeature;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"PreviewSummary{\" + \"previewAPI=\" + previewAPI + \", reflectivePreviewAPI=\" + reflectivePreviewAPI + \", declaredUsingPreviewFeature=\" + declaredUsingPreviewFeature + '}';\n+        }\n+\n+    }\n+\n+    \/**\n+     * Checks whether the given Element should be marked as a preview API.\n+     *\n+     * Note that if a type is marked as a preview, its members are not.\n+     *\n+     * @param el the element to check\n+     * @return true if and only if the given element should be marked as a preview API\n+     *\/\n+    public boolean isPreviewAPI(Element el) {\n+        boolean parentPreviewAPI = false;\n+        Element enclosing = el.getEnclosingElement();\n+        if (enclosing != null && (enclosing.getKind().isClass() || enclosing.getKind().isInterface())) {\n+            parentPreviewAPI = configuration.workArounds.isPreviewAPI(el.getEnclosingElement());\n+        }\n+        boolean previewAPI = configuration.workArounds.isPreviewAPI(el);\n+        return !parentPreviewAPI && previewAPI;\n+    }\n+\n+    \/**\n+     * Checks whether the given Element should be marked as a reflective preview API.\n+     *\n+     * Note that if a type is marked as a preview, its members are not.\n+     *\n+     * @param el the element to check\n+     * @return true if and only if the given element should be marked\n+     *              as a reflective preview API\n+     *\/\n+    public boolean isReflectivePreviewAPI(Element el) {\n+        return isPreviewAPI(el) && configuration.workArounds.isReflectivePreviewAPI(el);\n+    }\n+\n+    \/**\n+     * Return all flags for the given Element.\n+     *\n+     * @param el the element to test\n+     * @return the set of all the element's flags.\n+     *\/\n+    public Set<ElementFlag> elementFlags(Element el) {\n+        Set<ElementFlag> flags = EnumSet.noneOf(ElementFlag.class);\n+        PreviewSummary previewAPIs = declaredUsingPreviewAPIs(el);\n+\n+        if (isDeprecated(el)) {\n+            flags.add(ElementFlag.DEPRECATED);\n+        }\n+\n+        if (!previewLanguageFeaturesUsed(el).isEmpty() ||\n+            configuration.workArounds.isPreviewAPI(el) ||\n+            !previewAPIs.previewAPI.isEmpty() ||\n+            !previewAPIs.reflectivePreviewAPI.isEmpty() ||\n+            !previewAPIs.declaredUsingPreviewFeature.isEmpty())  {\n+            flags.add(ElementFlag.PREVIEW);\n+        }\n+\n+        return flags;\n+    }\n+\n+    \/**\n+     * An element can have flags that place it into some sub-categories, like\n+     * being a preview or a deprecated element.\n+     *\/\n+    public enum ElementFlag {\n+        DEPRECATED,\n+        PREVIEW;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":255,"deletions":1,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl;\n@@ -142,0 +143,1 @@\n+                        linkInfo.skipPreview = true;\n@@ -207,0 +209,1 @@\n+        linkInfo.skipPreview = false;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkFactory.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -113,0 +113,5 @@\n+    \/**\n+     * True iff the preview flags should be skipped for this link.\n+     *\/\n+    public boolean skipPreview;\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkInfo.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1288,0 +1288,1 @@\n+                case RECORD_COMPONENT:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -239,7 +239,0 @@\n-         * {@preview Associated with records, a preview feature of the Java language.\n-         *\n-         *           This enum constant is associated with <i>records<\/i>, a preview\n-         *           feature of the Java language. Preview features\n-         *           may be removed in a future release, or upgraded to permanent\n-         *           features of the Java language.}\n-         *\n@@ -252,1 +245,0 @@\n-        @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS)\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Snippet.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-                \"--enable-preview\", \"-source\", String.valueOf(Runtime.version().feature()) };\n+                \"--enable-preview\", \"-source\", String.valueOf(Runtime.version().feature()), \"-XDforcePreview\" };\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/PreviewHiddenClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,2 +58,1 @@\n- * @modules java.base\/jdk.internal\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/jdk\/java\/lang\/ref\/CleanerTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- *          java.base\/jdk.internal\n","filename":"test\/jdk\/java\/util\/Arrays\/TimSortStackSize2.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-               \"java.base\/jdk.internal\");\n+               \"java.base\/jdk.internal.javac\");\n","filename":"test\/jdk\/jdk\/modules\/etc\/JdkQualifiedExportTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,1 +294,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestEnum.html\" title=\"enum class in pkg\">pkg.TestEnum<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestEnum.html\" title=\"enum class in pkg\">pkg.TestEnum<\/a><\/div>\n@@ -304,1 +304,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestException.html\" title=\"class in pkg\">pkg.TestException<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestException.html\" title=\"class in pkg\">pkg.TestException<\/a><\/div>\n@@ -314,1 +314,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#field\">pkg.DeprecatedClassByAnnotation.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#field\">pkg.DeprecatedClassByAnnotation.field<\/a><\/div>\n@@ -316,1 +316,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestAnnotationType.html#field\">pkg.TestAnnotationType.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestAnnotationType.html#field\">pkg.TestAnnotationType.field<\/a><\/div>\n@@ -320,1 +320,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestClass.html#field\">pkg.TestClass.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestClass.html#field\">pkg.TestClass.field<\/a><\/div>\n@@ -324,1 +324,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestError.html#field\">pkg.TestError.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestError.html#field\">pkg.TestError.field<\/a><\/div>\n@@ -328,1 +328,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestException.html#field\">pkg.TestException.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestException.html#field\">pkg.TestException.field<\/a><\/div>\n@@ -332,1 +332,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestInterface.html#field\">pkg.TestInterface.field<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestInterface.html#field\">pkg.TestInterface.field<\/a><\/div>\n@@ -344,1 +344,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#method()\">pkg.DeprecatedClassByAnnotation.method()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#method()\">pkg.DeprecatedClassByAnnotation.method()<\/a><\/div>\n@@ -346,1 +346,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestAnnotationType.html#optional()\">pkg.TestAnnotationType.optional()<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestAnnotationType.html#optional()\">pkg.TestAnnotationType.optional()<\/a><\/div>\n@@ -350,1 +350,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestAnnotationType.html#required()\">pkg.TestAnnotationType.required()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestAnnotationType.html#required()\">pkg.TestAnnotationType.required()<\/a><\/div>\n@@ -354,1 +354,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#method()\">pkg.TestClass.method()<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#method()\">pkg.TestClass.method()<\/a><\/div>\n@@ -358,1 +358,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestClass.html#overloadedMethod(int)\">pkg.TestClass.overloadedMethod&#8203;(int)<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestClass.html#overloadedMethod(int)\">pkg.TestClass.overloadedMethod&#8203;(int)<\/a><\/div>\n@@ -362,1 +362,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#overloadedMethod(java.lang.String)\">pkg.TestClass.overloadedMethod&#8203;(String)<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#overloadedMethod(java.lang.String)\">pkg.TestClass.overloadedMethod&#8203;(String)<\/a><\/div>\n@@ -372,1 +372,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#%3Cinit%3E()\">pkg.DeprecatedClassByAnnotation()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/DeprecatedClassByAnnotation.html#%3Cinit%3E()\">pkg.DeprecatedClassByAnnotation()<\/a><\/div>\n@@ -374,1 +374,1 @@\n-                    <div class=\"col-deprecated-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#%3Cinit%3E()\">pkg.TestClass()<\/a><\/div>\n+                    <div class=\"col-summary-item-name odd-row-color\"><a href=\"pkg\/TestClass.html#%3Cinit%3E()\">pkg.TestClass()<\/a><\/div>\n@@ -378,1 +378,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg\/TestClass.html#%3Cinit%3E(java.lang.String)\">pkg.TestClass&#8203;(String)<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg\/TestClass.html#%3Cinit%3E(java.lang.String)\">pkg.TestClass&#8203;(String)<\/a><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDeprecatedDocs\/TestDeprecatedDocs.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -675,1 +675,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg2\/C2.html#dep_field\">pkg2.C2.dep_field<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg2\/C2.html#dep_field\">pkg2.C2.dep_field<\/a><\/div>\n@@ -680,1 +680,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg1\/C1.html#deprecatedMethod()\">pkg1.C1.deprecatedMethod()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg1\/C1.html#deprecatedMethod()\">pkg1.C1.deprecatedMethod()<\/a><\/div>\n@@ -806,1 +806,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg2\/C2.html#dep_field\">pkg2.C2.dep_field<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg2\/C2.html#dep_field\">pkg2.C2.dep_field<\/a><\/div>\n@@ -809,1 +809,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"pkg1\/C1.html#deprecatedMethod()\">pkg1.C1.deprecatedMethod()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"pkg1\/C1.html#deprecatedMethod()\">pkg1.C1.deprecatedMethod()<\/a><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlTableTags\/TestHtmlTableTags.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -292,0 +292,1 @@\n+                \"--add-modules\", \"moduleC\",\n@@ -1094,1 +1095,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"moduleA\/module-summary.html\">moduleA<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"moduleA\/module-summary.html\">moduleA<\/a><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModules\/TestModules.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8250768\n+ * @summary  test generated docs for items declared using preview\n+ * @library  ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ *          jdk.javadoc\/jdk.javadoc.internal.doclets.formats.html.resources:+open\n+ * @build    javadoc.tester.*\n+ * @run main TestPreview\n+ *\/\n+\n+import java.nio.file.Paths;\n+import java.text.MessageFormat;\n+import java.util.ResourceBundle;\n+import javadoc.tester.JavadocTester;\n+\n+public class TestPreview extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestPreview tester = new TestPreview();\n+        tester.runTests();\n+    }\n+\n+    @Test\n+    public void testUserJavadoc() {\n+        String doc = Paths.get(testSrc, \"doc\").toUri().toString();\n+        javadoc(\"-d\", \"out-user-javadoc\",\n+                \"-XDforcePreview\", \"--enable-preview\", \"-source\", System.getProperty(\"java.specification.version\"),\n+                \"--patch-module\", \"java.base=\" + Paths.get(testSrc, \"api\").toAbsolutePath().toString(),\n+                \"--add-exports\", \"java.base\/preview=m\",\n+                \"--module-source-path\", testSrc,\n+                \"-linkoffline\", doc, doc,\n+                \"m\/pkg\");\n+        checkExit(Exit.OK);\n+\n+        ResourceBundle bundle = ResourceBundle.getBundle(\"jdk.javadoc.internal.doclets.formats.html.resources.standard\", ModuleLayer.boot().findModule(\"jdk.javadoc\").get());\n+\n+        {\n+            String zero = MessageFormat.format(bundle.getString(\"doclet.PreviewLeadingNote\"), \"<code>TestPreviewDeclaration<\/code>\");\n+            String one = MessageFormat.format(bundle.getString(\"doclet.Declared_Using_Preview\"), \"<code>TestPreviewDeclaration<\/code>\", \"<em>Sealed Classes<\/em>\", \"<code>sealed<\/code>\");\n+            String two = MessageFormat.format(bundle.getString(\"doclet.PreviewTrailingNote1\"), \"<code>TestPreviewDeclaration<\/code>\");\n+            String three = MessageFormat.format(bundle.getString(\"doclet.PreviewTrailingNote2\"), new Object[0]);\n+            String expectedTemplate = \"\"\"\n+                                      <div class=\"preview-block\" id=\"preview-pkg.TestPreviewDeclaration\"><span class=\"preview-label\">{0}<\/span>\n+                                      <ul class=\"preview-comment\">\n+                                      <li>{1}<\/li>\n+                                      <\/ul>\n+                                      <div class=\"preview-comment\">{2}<\/div>\n+                                      <div class=\"preview-comment\">{3}<\/div>\n+                                      <\/div>\"\"\";\n+            String expected = MessageFormat.format(expectedTemplate, zero, one, two, three);\n+            checkOutput(\"m\/pkg\/TestPreviewDeclaration.html\", true, expected);\n+        }\n+\n+        checkOutput(\"m\/pkg\/TestPreviewDeclarationUse.html\", true,\n+                    \"<code><a href=\\\"TestPreviewDeclaration.html\\\" title=\\\"interface in pkg\\\">TestPreviewDeclaration<\/a><sup><a href=\\\"TestPreviewDeclaration.html#preview-pkg.TestPreviewDeclaration\\\">PREVIEW<\/a><\/sup><\/code>\");\n+        checkOutput(\"m\/pkg\/TestPreviewAPIUse.html\", true,\n+                \"<a href=\\\"\" + doc + \"java.base\/preview\/Core.html\\\" title=\\\"class or interface in preview\\\" class=\\\"external-link\\\">Core<\/a><sup><a href=\\\"\" + doc + \"java.base\/preview\/Core.html#preview-preview.Core\\\" title=\\\"class or interface in preview\\\" class=\\\"external-link\\\">PREVIEW<\/a>\");\n+        checkOutput(\"m\/pkg\/DocAnnotation.html\", true,\n+                \"<div class=\\\"preview-block\\\" id=\\\"preview-pkg.DocAnnotation\\\"><span class=\\\"preview-label\\\">\");\n+        checkOutput(\"m\/pkg\/DocAnnotationUse1.html\", true,\n+                \"<div class=\\\"preview-block\\\" id=\\\"preview-pkg.DocAnnotationUse1\\\"><span class=\\\"preview-label\\\">\");\n+        checkOutput(\"m\/pkg\/DocAnnotationUse2.html\", true,\n+                \"<div class=\\\"preview-block\\\" id=\\\"preview-pkg.DocAnnotationUse2\\\"><span class=\\\"preview-label\\\">\");\n+    }\n+\n+    @Test\n+    public void testPreviewAPIJavadoc() {\n+        javadoc(\"-d\", \"out-preview-api\",\n+                \"--patch-module\", \"java.base=\" + Paths.get(testSrc, \"api\").toAbsolutePath().toString(),\n+                \"--add-exports\", \"java.base\/preview=m\",\n+                \"--source-path\", Paths.get(testSrc, \"api\").toAbsolutePath().toString(),\n+                \"--show-packages=all\",\n+                \"preview\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"preview-list.html\", true,\n+                    \"\"\"\n+                    <div id=\"record.class\">\n+                    <div class=\"caption\"><span>Record Classes<\/span><\/div>\n+                    <div class=\"summary-table two-column-summary\">\n+                    <div class=\"table-header col-first\">Record Class<\/div>\n+                    <div class=\"table-header col-last\">Description<\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"java.base\/preview\/CoreRecord.html\" title=\"class in preview\">preview.CoreRecord<\/a><sup><a href=\"java.base\/preview\/CoreRecord.html#preview-preview.CoreRecord\">PREVIEW<\/a><\/sup><\/div>\n+                    <div class=\"col-last even-row-color\"><\/div>\n+                    <\/div>\n+                    \"\"\",\n+                    \"\"\"\n+                    <div id=\"method\">\n+                    <div class=\"caption\"><span>Methods<\/span><\/div>\n+                    <div class=\"summary-table two-column-summary\">\n+                    <div class=\"table-header col-first\">Method<\/div>\n+                    <div class=\"table-header col-last\">Description<\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"java.base\/preview\/CoreRecordComponent.html#i()\">preview.CoreRecordComponent.i()<\/a><sup><a href=\"java.base\/preview\/CoreRecordComponent.html#preview-i()\">PREVIEW<\/a><\/sup><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\">Returns the value of the <code>i<\/code> record component.<\/div>\n+                    <\/div>\n+                    \"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package preview;\n+\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.javac.PreviewFeature.Feature;\n+\n+@PreviewFeature(feature=Feature.TEST)\n+public class Core {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api\/preview\/Core.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package preview;\n+\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.javac.PreviewFeature.Feature;\n+\n+@PreviewFeature(feature=Feature.TEST)\n+public record CoreRecord(int i) {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api\/preview\/CoreRecord.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package preview;\n+\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.javac.PreviewFeature.Feature;\n+\n+public record CoreRecordComponent(@PreviewFeature(feature=Feature.TEST) int i) {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api\/preview\/CoreRecordComponent.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package preview;\n+\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.javac.PreviewFeature.Feature;\n+\n+@PreviewFeature(feature=Feature.TEST, reflective=true)\n+public class Reflective {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api\/preview\/Reflective.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+module:java.base\n+preview\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/doc\/element-list","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/doc\/java.base\/preview\/Core.html","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/doc\/java.base\/preview\/Reflective.html","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+module m {\n+    exports pkg;\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/module-info.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+import java.lang.annotation.Documented;\n+\n+@Documented\n+public @interface DocAnnotation {\n+\n+    public Class<?> a1() default Object.class;\n+    public Class<?>[] a2() default {};\n+    public Class<?> a3() default TestPreviewDeclaration.class;\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/DocAnnotation.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+@DocAnnotation(a1=TestPreviewDeclaration.class)\n+public class DocAnnotationUse1 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/DocAnnotationUse1.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+@DocAnnotation(a2={TestPreviewDeclaration.class})\n+public class DocAnnotationUse2 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/DocAnnotationUse2.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+import preview.*;\n+\n+public class TestPreviewAPIUse {\n+\n+    public Core fieldCore;\n+    public Reflective fieldReflective;\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/TestPreviewAPIUse.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+public sealed interface TestPreviewDeclaration permits Impl {\n+}\n+class Impl implements TestPreviewDeclaration {}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/TestPreviewDeclaration.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg;\n+\n+public class TestPreviewDeclarationUse {\n+\n+    public TestPreviewDeclaration field;\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/m\/pkg\/TestPreviewDeclarationUse.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -527,1 +527,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"p\/R.html\" title=\"class in p\">p.R<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"p\/R.html\" title=\"class in p\">p.R<\/a><\/div>\n@@ -559,1 +559,1 @@\n-                    <div class=\"col-deprecated-item-name even-row-color\"><a href=\"p\/R.html#r1()\">p.R.r1()<\/a><\/div>\n+                    <div class=\"col-summary-item-name even-row-color\"><a href=\"p\/R.html#r1()\">p.R.r1()<\/a><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\"\"\");\n@@ -81,2 +82,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed interface <\/sp\\\n-                    an><span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> interface <\/span><span class=\"element-name type-n\\\n+                    ame-label\">A<\/span>\"\"\");\n@@ -100,2 +102,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\"\"\");\n@@ -105,2 +108,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">B<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed<sup><a hre\\\n+                    f=\"#preview-p.B\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-n\\\n+                    ame-label\">B<\/span>\"\"\");\n@@ -124,2 +128,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed interface <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> interface <\/span><span class=\"element-name type-n\\\n+                    ame-label\">A<\/span>\"\"\");\n@@ -129,2 +134,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed interface <\/span><\\\n-                    span class=\"element-name type-name-label\">B<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed<sup><a hre\\\n+                    f=\"#preview-p.B\">PREVIEW<\/a><\/sup> interface <\/span><span class=\"element-name ty\\\n+                    pe-name-label\">B<\/span>\"\"\");\n@@ -148,2 +154,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\"\"\");\n@@ -153,2 +160,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract sealed class\\\n-                     <\/span><span class=\"element-name type-name-label\">B<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract sealed<sup><\\\n+                    a href=\"#preview-p.B\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name t\\\n+                    ype-name-label\">B<\/span>\"\"\");\n@@ -172,2 +180,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed interface <\/sp\\\n-                    an><span class=\"element-name type-name-label\">A<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> interface <\/span><span class=\"element-name type-n\\\n+                    ame-label\">A<\/span>\"\"\");\n@@ -177,2 +186,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed interface <\/sp\\\n-                    an><span class=\"element-name type-name-label\">B<\/span>\"\"\");\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.B\">PREVIEW<\/a><\/sup> interface <\/span><span class=\"element-name type-n\\\n+                    ame-label\">B<\/span>\"\"\");\n@@ -197,2 +207,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\n@@ -200,1 +211,3 @@\n-                    <span class=\"permits\">permits <a href=\"B.html\" title=\"class in p\">B<\/a><\/span><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a hr\\\n+                    ef=\"B.html\" title=\"class in p\">B<\/a><sup><a href=\"B.html#preview-p.B\">PREVIEW<\/a\\\n+                    ><\/sup><\/span><\/div>\"\"\");\n@@ -221,2 +234,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\n@@ -224,3 +238,5 @@\n-                    <span class=\"permits\">permits <a href=\"B.html\" title=\"class in p\">B<\/a>, <a href\\\n-                    =\"C.html\" title=\"class in p\">C<\/a>, <a href=\"D.html\" title=\"class in p\">D<\/a><\/s\\\n-                    pan><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a hr\\\n+                    ef=\"B.html\" title=\"class in p\">B<\/a><sup><a href=\"B.html#preview-p.B\">PREVIEW<\/a\\\n+                    ><\/sup>, <a href=\"C.html\" title=\"class in p\">C<\/a><sup><a href=\"C.html#preview-p\\\n+                    .C\">PREVIEW<\/a><\/sup>, <a href=\"D.html\" title=\"class in p\">D<\/a><sup><a href=\"D.\\\n+                    html#preview-p.D\">PREVIEW<\/a><\/sup><\/span><\/div>\"\"\");\n@@ -247,2 +263,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\n@@ -250,3 +267,5 @@\n-                    <span class=\"permits\">permits <a href=\"B.html\" title=\"class in p\">B<\/a>, <a href\\\n-                    =\"C.html\" title=\"class in p\">C<\/a> <span class=\"permits-note\">(not exhaustive)<\/\\\n-                    span><\/span><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a hr\\\n+                    ef=\"B.html\" title=\"class in p\">B<\/a><sup><a href=\"B.html#preview-p.B\">PREVIEW<\/a\\\n+                    ><\/sup>, <a href=\"C.html\" title=\"class in p\">C<\/a><sup><a href=\"C.html#preview-p\\\n+                    .C\">PREVIEW<\/a><\/sup> <span class=\"permits-note\">(not exhaustive)<\/span><\/span><\\\n+                    \/div>\"\"\");\n@@ -274,2 +293,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-labe\\\n+                    l\">A<\/span>\n@@ -277,3 +297,4 @@\n-                    <span class=\"permits\">permits <a href=\"A.B.html\" title=\"class in p\">A.B<\/a>, <a \\\n-                    href=\"A.C.html\" title=\"class in p\">A.C<\/a>, <a href=\"A.D.html\" title=\"class in p\\\n-                    \">A.D<\/a><\/span><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview\">PREVIEW<\/a><\/sup> <a href=\"\\\n+                    A.B.html\" title=\"class in p\">A.B<\/a><sup><a href=\"B.html#preview\">PREVIEW<\/a><\/s\\\n+                    up>, <a href=\"A.C.html\" title=\"class in p\">A.C<\/a><sup><a href=\"C.html#preview\">\\\n+                    PREVIEW<\/a><\/sup>, <a href=\"A.D.html\" title=\"class in p\">A.D<\/a><\/span><\/div>\"\"\");\n@@ -302,2 +323,3 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span\\\n-                 class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#prev\\\n+                iew-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-label\">A\\\n+                <\/span>\n@@ -305,3 +327,4 @@\n-                <span class=\"permits\">permits <a href=\"B.html\" title=\"class in p\">B<\/a>, <a href=\"C.\\\n-                html\" title=\"class in p\">C<\/a> <span class=\"permits-note\">(not exhaustive)<\/span><\/s\\\n-                pan><\/div>\"\"\");\n+                <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a href=\"\\\n+                B.html\" title=\"class in p\">B<\/a><sup><a href=\"B.html#preview-p.B\">PREVIEW<\/a><\/sup>,\\\n+                 <a href=\"C.html\" title=\"class in p\">C<\/a><sup><a href=\"C.html#preview-p.C\">PREVIEW<\\\n+                \/a><\/sup> <span class=\"permits-note\">(not exhaustive)<\/span><\/span><\/div>\"\"\");\n@@ -329,2 +352,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\n@@ -332,3 +356,5 @@\n-                    <span class=\"permits\">permits <a href=\"B.html\" title=\"class in p\">B<\/a>, <a href\\\n-                    =\"C.html\" title=\"class in p\">C<\/a>, <a href=\"D.html\" title=\"class in p\">D<\/a><\/s\\\n-                    pan><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a hr\\\n+                    ef=\"B.html\" title=\"class in p\">B<\/a><sup><a href=\"B.html#preview-p.B\">PREVIEW<\/a\\\n+                    ><\/sup>, <a href=\"C.html\" title=\"class in p\">C<\/a><sup><a href=\"C.html#preview-p\\\n+                    .C\">PREVIEW<\/a><\/sup>, <a href=\"D.html\" title=\"class in p\">D<\/a><sup><a href=\"D.\\\n+                    html#preview-p.D\">PREVIEW<\/a><\/sup><\/span><\/div>\"\"\");\n@@ -356,2 +382,3 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><\\\n-                    span class=\"element-name type-name-label\">A<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public sealed<sup><a href=\"#\\\n+                    preview-p.A\">PREVIEW<\/a><\/sup> class <\/span><span class=\"element-name type-name-\\\n+                    label\">A<\/span>\n@@ -359,3 +386,5 @@\n-                    <span class=\"permits\">permits <a href=\"A.B.html\" title=\"class in p\">A.B<\/a>, <a \\\n-                    href=\"A.C.html\" title=\"class in p\">A.C<\/a>, <a href=\"A.D.html\" title=\"class in p\\\n-                    \">A.D<\/a><\/span><\/div>\"\"\");\n+                    <span class=\"permits\">permits<sup><a href=\"#preview-p.A\">PREVIEW<\/a><\/sup> <a hr\\\n+                    ef=\"A.B.html\" title=\"class in p\">A.B<\/a><sup><a href=\"A.B.html#preview-p.A.B\">PR\\\n+                    EVIEW<\/a><\/sup>, <a href=\"A.C.html\" title=\"class in p\">A.C<\/a><sup><a href=\"A.C.\\\n+                    html#preview-p.A.C\">PREVIEW<\/a><\/sup>, <a href=\"A.D.html\" title=\"class in p\">A.D\\\n+                    <\/a><sup><a href=\"A.D.html#preview-p.A.D\">PREVIEW<\/a><\/sup><\/span><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSealedTypes\/TestSealedTypes.java","additions":83,"deletions":54,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,1 @@\n-                    .col-deprecated-item-name a:link, .col-deprecated-item-name a:visited,\n+                    .col-summary-item-name a:link, .col-summary-item-name a:visited,\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testStylesheet\/TestStylesheet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,0 +154,3 @@\n+            \/\/ ignore this partial key\n+            if (rk.startsWith(\"doclet.Declared_Using_Preview.\"))\n+                continue;\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckResourceKeys.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+compiler.warn.is.preview.reflective                     # difficult to produce reliably despite future changes to java.base\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.plural\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantExtendSealedInAnotherModule\/CantExtendSealedInAnotherModule.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.plural\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantExtendSealedInAnotherPkg\/CantExtendSealedInAnotherPkg.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\/\/ key: compiler.warn.declared.using.preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SealedTypes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+FauxEnum3.java:11:14: compiler.err.enum.types.not.extensible\n+- compiler.note.preview.filename: FauxEnum3.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/enum\/FauxEnum3-preview.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -216,0 +216,4 @@\n+    public List<JavaFileObject> getSources() {\n+        return sources;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/lib\/combo\/ComboTask.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-            for (String pack : new String[] {\"\", \"java.lang\", \"java.lang.annotation\", \"jdk.internal\"}) {\n+            for (String pack : new String[] {\"\", \"java.lang\", \"java.lang.annotation\", \"jdk.internal.javac\"}) {\n","filename":"test\/langtools\/tools\/javac\/options\/BCPOrSystemNotSpecified.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- *      java.base\/jdk.internal\n","filename":"test\/langtools\/tools\/javac\/patterns\/BreakAndLoops.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- *      java.base\/jdk.internal\n","filename":"test\/langtools\/tools\/javac\/patterns\/ConditionalTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-- compiler.note.proc.messager: java\n\\ No newline at end of file\n+- compiler.note.proc.messager: java\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternMatchPosTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-PreviewAPIsWithRelease.java:13:22: compiler.warn.is.preview: RECORD\n+PreviewAPIsWithRelease.java:13:22: compiler.warn.is.preview.reflective: RECORD\n","filename":"test\/langtools\/tools\/javac\/platform\/PreviewAPIsWithRelease.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,5 @@\n+- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations.class, 17\n+- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations$C.class, 17\n+- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations$C2.class, 17\n+DeclaredUsingPreview.java:9:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n+4 warnings\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview-class.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+DeclaredUsingPreviewDeclarations.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n+DeclaredUsingPreviewDeclarations.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n+DeclaredUsingPreviewDeclarations.java:4:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n+DeclaredUsingPreview.java:9:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n+DeclaredUsingPreview.java:10:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C2\n+DeclaredUsingPreviewDeclarations.java:4:33: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n+6 warnings\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview-source.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8250768\n+ * @summary Verify javac correctly reports errors for uses of classes declared using preview features.\n+ * @compile\/ref=DeclaredUsingPreview-source.out -XDrawDiagnostics --enable-preview -source ${jdk.version} -Xlint:preview DeclaredUsingPreview.java DeclaredUsingPreviewDeclarations.java\n+ * @compile\/ref=DeclaredUsingPreview-class.out -XDrawDiagnostics --enable-preview -source ${jdk.version} -Xlint:preview DeclaredUsingPreview.java\n+ *\/\n+public class DeclaredUsingPreview {\n+    DeclaredUsingPreviewDeclarations.C c;\n+    DeclaredUsingPreviewDeclarations.C2 c2; \/\/TODO: should cause warning?\n+}\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+\/\/\/nodynamiccopyright\/\n+public class DeclaredUsingPreviewDeclarations {\n+    sealed class C {}\n+    non-sealed class C2 extends C {}\n+}\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreviewDeclarations.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8250768\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main PreviewAutoSuppress\n+ *\/\n+import com.sun.tools.classfile.ClassFile;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+public class PreviewAutoSuppress extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    PreviewAutoSuppress() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        PreviewAutoSuppress t = new PreviewAutoSuppress();\n+        t.runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void declarationWarning(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          package test;\n+                          public class Outer {\n+                              record R(int i) {}\n+                              R r;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class Use {\n+                            Outer.R r;\n+                          }\n+                          \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(classes)\n+                .options(\"--enable-preview\",\n+                         \"-source\", String.valueOf(Runtime.version().feature()),\n+                         \"-Xlint:preview\",\n+                         \"-XDforcePreview\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(src))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Outer.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.records)\",\n+                        \"Outer.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.records)\",\n+                        \"Outer.java:4:5: compiler.warn.declared.using.preview: kindname.record, test.Outer.R\",\n+                        \"Use.java:3:8: compiler.warn.declared.using.preview: kindname.record, test.Outer.R\",\n+                        \"4 warnings\");\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer.class\"),\n+                              true); \/\/TODO: correct?\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer$R.class\"),\n+                              true);\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Use.class\"),\n+                              true);\n+    }\n+\n+    @Test\n+    public void previewAPI(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public class Outer {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.impl;\n+                          import preview.api.Outer;\n+                          public class Impl {\n+                              public void run() {\n+                                  new Outer().test();\n+                              }\n+                              public static class C extends Outer {}\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"-XDforcePreview\",\n+                         \"-XDrawDiagnostics\",\n+                         \"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        checkPreviewClassfile(apiClasses.resolve(\"preview\").resolve(\"api\").resolve(\"Outer.class\"),\n+                              false);\n+        checkPreviewClassfile(apiClasses.resolve(\"preview\").resolve(\"impl\").resolve(\"Impl.class\"),\n+                              false);\n+        checkPreviewClassfile(apiClasses.resolve(\"preview\").resolve(\"impl\").resolve(\"Impl$C.class\"),\n+                              false);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.Outer;\n+                          public class Use {\n+                              public void run() {\n+                                  new Outer().test();\n+                              }\n+                              public static class C extends Outer {}\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Use.java:2:19: compiler.err.is.preview: preview.api.Outer\",\n+                        \"Use.java:7:35: compiler.err.is.preview: preview.api.Outer\",\n+                        \"Use.java:5:13: compiler.err.is.preview: preview.api.Outer\",\n+                        \"3 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"--enable-preview\",\n+                         \"-Xlint:preview\",\n+                         \"-source\", String.valueOf(Runtime.version().feature()),\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        expected =\n+                List.of(\"Use.java:5:13: compiler.warn.is.preview: preview.api.Outer\",\n+                        \"Use.java:7:35: compiler.warn.is.preview: preview.api.Outer\",\n+                        \"2 warnings\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"Use.class\"),\n+                              true);\n+        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"Use$C.class\"),\n+                              true);\n+    }\n+\n+    private void checkPreviewClassfile(Path p, boolean preview) throws Exception {\n+        try (InputStream in = Files.newInputStream(p)) {\n+            ClassFile cf = ClassFile.read(in);\n+            if (preview && cf.minor_version != 65535) {\n+                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version);\n+            } else if (!preview && cf.minor_version != 0) {\n+                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8226585\n+ * @bug 8226585 8250768\n@@ -30,1 +30,1 @@\n- *      java.base\/jdk.internal\n+ *      java.base\/jdk.internal.javac\n@@ -35,0 +35,1 @@\n+ *      jdk.jdeps\/com.sun.tools.classfile\n@@ -37,2 +38,1 @@\n- * @compile --enable-preview -source ${jdk.version} PreviewErrors.java\n- * @run main\/othervm --enable-preview PreviewErrors\n+ * @run main PreviewErrors\n@@ -51,0 +51,1 @@\n+import java.util.Map;\n@@ -52,0 +53,1 @@\n+import java.util.TreeMap;\n@@ -55,1 +57,7 @@\n-import jdk.internal.PreviewFeature;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import java.io.FileWriter;\n+import java.io.UncheckedIOException;\n+import java.io.Writer;\n+import java.util.Map.Entry;\n+import javax.tools.JavaFileObject;\n@@ -69,0 +77,23 @@\n+    private static String previewAPI(PreviewElementType elementType) {\n+        return \"\"\"\n+               package preview.api;\n+               public class ${name} {\n+                   @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.${preview}\n+                                                ${reflective})\n+                   public static void test() { }\n+                   @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.${preview}\n+                                                ${reflective})\n+                   public static class Clazz {}\n+               }\n+               \"\"\".replace(\"${name}\", elementType.className)\n+                  .replace(\"${preview}\", \"TEST\")\n+                  .replace(\"${reflective}\", elementType.reflective);\n+    }\n+\n+    private static final String SEALED_DECLARATION = \"\"\"\n+                                                     package user;\n+                                                     public sealed interface R {}\n+                                                     final class C implements R {}\n+                                                     \"\"\";\n+\n+    static Map<PreviewElementType, Map<Preview, Map<Suppress, Map<Lint, StringBuilder>>>> parts = new TreeMap<>();\n@@ -71,1 +102,0 @@\n-                .withDimension(\"ESSENTIAL\", (x, essential) -> x.essential = essential, EssentialAPI.values())\n@@ -75,1 +105,1 @@\n-                .withDimension(\"FROM\", (x, from) -> x.from = from, PreviewFrom.values())\n+                .withDimension(\"ELEMENT_TYPE\", (x, elementType) -> x.elementType = elementType, PreviewElementType.values())\n@@ -77,0 +107,73 @@\n+        if (args.length == 1) {\n+            try (Writer out = new FileWriter(args[0])) {\n+                int petCount = 0;\n+                for (Entry<PreviewElementType, Map<Preview, Map<Suppress, Map<Lint, StringBuilder>>>> pet : parts.entrySet()) {\n+                    petCount++;\n+                    switch (pet.getKey()) {\n+                        case API_REFLECTIVE_CLASS, API_CLASS -> {\n+                            if (pet.getKey() == PreviewElementType.API_REFLECTIVE_CLASS) {\n+                                out.write(\"<h2>\" + petCount + \". Reflective Preview API<\/h2>\\n\");\n+                            } else {\n+                                out.write(\"<h2>\" + petCount + \". Preview API<\/h2>\\n\");\n+                            }\n+                            out.write(\"API source (part of java.base):\\n\");\n+                            out.write(\"<pre>\\n\");\n+                            String previewAPI = previewAPI(pet.getKey());\n+                            out.write(previewAPI);\n+                            out.write(\"\\n<\/pre>\\n\");\n+                        }\n+                        case REFER_TO_DECLARATION_CLASS -> {\n+                            out.write(\"<h2>\" + petCount + \". Using an element declared using a preview feature<\/h2>\\n\");\n+                            out.write(\"Element declaration:\\n\");\n+                            out.write(\"<pre>\\n\");\n+                            out.write(SEALED_DECLARATION);\n+                            out.write(\"\\n<\/pre>\\n\");\n+                        }\n+                        case LANGUAGE -> {\n+                            out.write(\"<h2>\" + petCount + \". Using preview language feature<\/h2>\\n\");\n+                        }\n+                    }\n+                    int prevCount = 0;\n+                    for (Entry<Preview, Map<Suppress, Map<Lint, StringBuilder>>> prev : pet.getValue().entrySet()) {\n+                        prevCount++;\n+                        switch (prev.getKey()) {\n+                            case YES -> {\n+                                out.write(\"<h3>\" + petCount + \".\" + prevCount + \". With --enable-preview<\/h3>\\n\");\n+                            }\n+                            case NO -> {\n+                                out.write(\"<h3>\" + petCount + \".\" + prevCount + \". Without --enable-preview<\/h3>\\n\");\n+                            }\n+                        }\n+                        int supCount = 0;\n+                        for (Entry<Suppress, Map<Lint, StringBuilder>> sup : prev.getValue().entrySet()) {\n+                            supCount++;\n+                            switch (sup.getKey()) {\n+                                case YES -> {\n+                                    out.write(\"<h4>\" + petCount + \".\" + prevCount + \".\" + supCount + \". Usages suppressed with @SuppressWarnings<\/h4>\\n\");\n+                                }\n+                                case NO -> {\n+                                    out.write(\"<h4>\" + petCount + \".\" + prevCount + \".\" + supCount + \". Usages not suppressed with @SuppressWarnings<\/h4>\\n\");\n+                                }\n+                            }\n+                            int lintCount = 0;\n+                            for (Entry<Lint, StringBuilder> lint : sup.getValue().entrySet()) {\n+                                lintCount++;\n+                                switch (lint.getKey()) {\n+                                    case NONE -> {\n+                                        out.write(\"<h5>\" + petCount + \".\" + prevCount + \".\" + supCount + \".\" + lintCount + \". Neither -Xlint:preview nor -Xlint:-preview<\/h5>\\n\");\n+                                    }\n+                                    case ENABLE_PREVIEW -> {\n+                                        out.write(\"<h5>\" + petCount + \".\" + prevCount + \".\" + supCount + \".\" + lintCount + \". With -Xlint:preview<\/h5>\\n\");\n+                                    }\n+                                    case DISABLE_PREVIEW -> {\n+                                        out.write(\"<h5>\" + petCount + \".\" + prevCount + \".\" + supCount + \".\" + lintCount + \". With -Xlint:-preview<\/h5>\\n\");\n+                                    }\n+                                }\n+                                out.write(lint.getValue().toString());\n+                                out.write(\"\\n\");\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n@@ -79,1 +182,0 @@\n-    private EssentialAPI essential;\n@@ -83,1 +185,1 @@\n-    private PreviewFrom from;\n+    private PreviewElementType elementType;\n@@ -88,0 +190,1 @@\n+        tb.cleanDirectory(base);\n@@ -95,23 +198,1 @@\n-        String previewAPI = \"\"\"\n-                            package preview.api;\n-                            public class Extra {\n-                                @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.${preview}\n-                                                             ${essential})\n-                                public static void test() { }\n-                                @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.${preview}\n-                                                             ${essential})\n-                                public static class Clazz {}\n-                            }\n-                            \"\"\".replace(\"${preview}\", PreviewFeature.Feature.values()[0].name())\n-                               .replace(\"${essential}\", essential.expand(null));\n-\n-         if (from == PreviewFrom.CLASS) {\n-            tb.writeJavaFiles(srcJavaBase, previewAPI);\n-\n-            new JavacTask(tb)\n-                    .outdir(classesJavaBase)\n-                    .options(\"--patch-module\", \"java.base=\" + srcJavaBase.toString())\n-                    .files(tb.findJavaFiles(srcJavaBase))\n-                    .run()\n-                    .writeAll();\n-         }\n+        String previewAPI = previewAPI(elementType);\n@@ -120,10 +201,0 @@\n-                .withSourceFromTemplate(\"\"\"\n-                                        package test;\n-                                        public class Test {\n-                                            #{SUPPRESS}\n-                                            public void test() {\n-                                                preview.api.Extra.test();\n-                                                preview.api.Extra.Clazz c;\n-                                            }\n-                                        }\n-                                        \"\"\")\n@@ -134,9 +205,52 @@\n-        if (from == PreviewFrom.CLASS) {\n-            task.withOption(\"--patch-module\")\n-                .withOption(\"java.base=\" + classesJavaBase.toString())\n-                .withOption(\"--add-exports\")\n-                .withOption(\"java.base\/preview.api=ALL-UNNAMED\");\n-        } else {\n-            task.withSourceFromTemplate(\"Extra\", previewAPI)\n-                .withOption(\"--add-exports\")\n-                .withOption(\"java.base\/jdk.internal=ALL-UNNAMED\");\n+        switch (elementType) {\n+            case API_CLASS, API_REFLECTIVE_CLASS -> {\n+                tb.writeJavaFiles(srcJavaBase, previewAPI);\n+\n+                new JavacTask(tb)\n+                        .outdir(classesJavaBase)\n+                        .options(\"--patch-module\", \"java.base=\" + srcJavaBase.toString())\n+                        .files(tb.findJavaFiles(srcJavaBase))\n+                        .run()\n+                        .writeAll();\n+\n+                task.withOption(\"--patch-module\")\n+                    .withOption(\"java.base=\" + classesJavaBase.toString())\n+                    .withOption(\"--add-exports\")\n+                    .withOption(\"java.base\/preview.api=ALL-UNNAMED\");\n+            }\n+            case API_SOURCE, API_REFLECTIVE_SOURCE -> {\n+                tb.writeJavaFiles(srcJavaBase, previewAPI);\n+\n+                task.withOption(\"--patch-module\")\n+                    .withOption(\"java.base=\" + srcJavaBase.toString())\n+                    .withOption(\"--add-exports\")\n+                    .withOption(\"java.base\/preview.api=ALL-UNNAMED\");\n+            }\n+            case LANGUAGE -> {\n+                task.withOption(\"-XDforcePreview=true\");\n+            }\n+            case REFER_TO_DECLARATION_CLASS -> {\n+                tb.writeJavaFiles(srcJavaBase, SEALED_DECLARATION);\n+\n+                new JavacTask(tb)\n+                        .outdir(classesJavaBase)\n+                        .options(\"--patch-module\", \"java.base=\" + srcJavaBase.toString(),\n+                                 \"--enable-preview\",\n+                                 \"-source\", String.valueOf(Runtime.version().feature()))\n+                        .files(tb.findJavaFiles(srcJavaBase))\n+                        .run()\n+                        .writeAll();\n+\n+                task.withOption(\"--patch-module\")\n+                    .withOption(\"java.base=\" + classesJavaBase.toString())\n+                    .withOption(\"--add-exports\")\n+                    .withOption(\"java.base\/user=ALL-UNNAMED\");\n+            }\n+            case REFER_TO_DECLARATION_SOURCE -> {\n+                tb.writeJavaFiles(srcJavaBase, SEALED_DECLARATION);\n+\n+                task.withOption(\"--patch-module\")\n+                    .withOption(\"java.base=\" + srcJavaBase.toString())\n+                    .withOption(\"--add-exports\")\n+                    .withOption(\"java.base\/user=ALL-UNNAMED\");\n+            }\n@@ -145,0 +259,10 @@\n+        task.withSourceFromTemplate(\"\"\"\n+                                    package test;\n+                                    public class Test {\n+                                        #{SUPPRESS}\n+                                        public void test(Object o) {\n+                                            #{ELEMENT_TYPE}\n+                                        }\n+                                    }\n+                                    \"\"\");\n+\n@@ -146,1 +270,1 @@\n-            task = task.withOption(preview.expand(null));\n+            task.withOption(preview.expand(null));\n@@ -150,1 +274,1 @@\n-            task = task.withOption(lint.expand(null));\n+            task.withOption(lint.expand(null));\n@@ -158,1 +282,0 @@\n-                Set<String> expected;\n@@ -160,9 +283,36 @@\n-                if (essential == EssentialAPI.YES) {\n-                    if (preview == Preview.YES) {\n-                        if (suppress == Suppress.YES) {\n-                            expected = Set.of();\n-                        } else if (lint == Lint.ENABLE_PREVIEW) {\n-                            expected = Set.of(\"5:26:compiler.warn.is.preview\", \"6:26:compiler.warn.is.preview\");\n-                        } else {\n-                            expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n-                                              \"-1:-1:compiler.note.preview.recompile\");\n+                boolean previewClass = true;\n+                Set<String> expected = null;\n+                if (preview == Preview.NO) {\n+                    switch (elementType) {\n+                        case LANGUAGE -> {\n+                            ok = false;\n+                            expected = Set.of(\"5:41:compiler.err.preview.feature.disabled\");\n+                        }\n+                        case REFER_TO_DECLARATION_CLASS -> {\n+                            ok = false;\n+                            expected = Set.of(\"-1:-1:compiler.err.preview.feature.disabled.classfile\");\n+                        }\n+                        case REFER_TO_DECLARATION_SOURCE -> {\n+                            ok = false;\n+                            expected = Set.of(\"2:8:compiler.err.preview.feature.disabled.plural\");\n+                        }\n+                        case API_CLASS, API_SOURCE -> {\n+                            ok = false;\n+                            expected = Set.of(\"6:17:compiler.err.is.preview\",\n+                                              \"5:25:compiler.err.is.preview\");\n+                        }\n+                        case API_REFLECTIVE_CLASS, API_REFLECTIVE_SOURCE -> {\n+                            ok = true;\n+                            previewClass = false;\n+                            if (suppress == Suppress.YES) {\n+                                expected = Set.of();\n+                            } else if (lint == Lint.NONE || lint == Lint.ENABLE_PREVIEW) {\n+                                expected = Set.of(\"6:20:compiler.warn.is.preview.reflective\",\n+                                                  \"5:28:compiler.warn.is.preview.reflective\");\n+                            } else {\/\/-Xlint:-preview\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n+                            }\n+                        }\n+                        default -> {\n+                            throw new IllegalStateException(elementType.name());\n@@ -170,4 +320,0 @@\n-                        ok = true;\n-                    } else {\n-                        expected = Set.of(\"5:26:compiler.err.is.preview\", \"6:26:compiler.err.is.preview\");\n-                        ok = false;\n@@ -176,9 +322,0 @@\n-                    if (suppress == Suppress.YES) {\n-                        expected = Set.of();\n-                    } else if ((preview == Preview.YES && (lint == Lint.NONE || lint == Lint.DISABLE_PREVIEW)) ||\n-                               (preview == Preview.NO && lint == Lint.DISABLE_PREVIEW)) {\n-                        expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n-                                          \"-1:-1:compiler.note.preview.recompile\");\n-                    } else {\n-                        expected = Set.of(\"5:26:compiler.warn.is.preview\", \"6:26:compiler.warn.is.preview\");\n-                    }\n@@ -186,0 +323,91 @@\n+                    switch (elementType) {\n+                        case LANGUAGE -> {\n+                            if (lint == Lint.ENABLE_PREVIEW) {\n+                                expected = Set.of(\"5:41:compiler.warn.preview.feature.use\");\n+                            } else {\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n+                            }\n+                        }\n+                        case REFER_TO_DECLARATION_CLASS -> {\n+                            if (suppress == Suppress.YES) {\n+                                if (lint == Lint.ENABLE_PREVIEW) {\n+                                    expected = Set.of(\"-1:-1:compiler.warn.preview.feature.use.classfile\");\n+                                } else {\n+                                    expected = Set.of(\/*\"-1:-1:compiler.note.preview.filename\",\n+                                                      \"-1:-1:compiler.note.preview.recompile\"*\/);\n+                                }\n+                            } else if (lint == Lint.ENABLE_PREVIEW) {\n+                                expected = Set.of(\"5:13:compiler.warn.declared.using.preview\",\n+                                                  \"5:24:compiler.warn.declared.using.preview\",\n+                                                  \"-1:-1:compiler.warn.preview.feature.use.classfile\");\n+                            } else {\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n+                            }\n+                        }\n+                        case REFER_TO_DECLARATION_SOURCE -> {\n+                            if (lint == Lint.ENABLE_PREVIEW) {\n+                                if (suppress == Suppress.YES) {\n+                                    expected = Set.of(\"2:8:compiler.warn.preview.feature.use.plural\",\n+                                                      \"3:26:compiler.warn.declared.using.preview\");\n+                                } else {\n+                                    expected = Set.of(\"5:13:compiler.warn.declared.using.preview\",\n+                                                      \"5:24:compiler.warn.declared.using.preview\",\n+                                                      \"2:8:compiler.warn.preview.feature.use.plural\",\n+                                                      \"3:26:compiler.warn.declared.using.preview\");\n+                                }\n+                            } else {\n+                                if (suppress == Suppress.YES) {\n+                                    expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                      \"-1:-1:compiler.note.preview.recompile\");\n+                                } else {\n+                                    expected = Set.of(\"-1:-1:compiler.note.preview.plural\",\n+                                                      \"-1:-1:compiler.note.preview.recompile\");\n+                                }\n+                            }\n+                        }\n+                        case API_CLASS, API_SOURCE -> {\n+                            if (suppress == Suppress.YES) {\n+                                expected = Set.of();\n+                            } else if (lint == Lint.ENABLE_PREVIEW) {\n+                                expected = Set.of(\"6:17:compiler.warn.is.preview\",\n+                                                  \"5:25:compiler.warn.is.preview\");\n+                            } else {\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n+                            }\n+                        }\n+                        case API_REFLECTIVE_CLASS, API_REFLECTIVE_SOURCE -> {\n+                            previewClass = false;\n+                            if (suppress == Suppress.YES) {\n+                                expected = Set.of();\n+                            } else if (lint == Lint.ENABLE_PREVIEW) {\n+                                expected = Set.of(\"6:20:compiler.warn.is.preview.reflective\",\n+                                                  \"5:28:compiler.warn.is.preview.reflective\");\n+                            } else {\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n+                            }\n+                        }\n+                    }\n+                }\n+                if (!elementType.isSource) {\n+                    try {\n+                        parts.computeIfAbsent(elementType, x -> new TreeMap<>())\n+                                .computeIfAbsent(preview, x -> new TreeMap<>())\n+                                .computeIfAbsent(suppress, x -> new TreeMap<>())\n+                                .computeIfAbsent(lint, x -> new StringBuilder())\n+                                .append(\"<pre>\\n\")\n+                                .append(task.getSources().head.getCharContent(false))\n+                                .append(\"\\n<\/pre>\\n\")\n+                                .append(\"<pre>\\n\")\n+                                .append(Arrays.stream(Diagnostic.Kind.values())\n+                                              .flatMap(kind -> result.diagnosticsForKind(kind).reverse().stream())\n+                                              .filter(d -> d.getSource() == null || !d.getSource().getName().contains(\"R.java\"))\n+                                              .map(d -> (d.getSource() != null ? d.getSource().getName() + \":\" + d.getLineNumber() + \":\" : \"\") + d.getKind()+ \": \" + d.getMessage(null)).collect(Collectors.joining(\"\\n\")))\n+                                .append(\"\\n<\/pre>\\n\")\n+                                .append(ok ? previewClass ? \"Test.class is marked as a preview class file.\" : \"Test.class is <b>NOT<\/b> marked as a preview class file.\" : \"Does not compile.\");\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n@@ -189,1 +417,21 @@\n-                        throw new IllegalStateException(\"Did not succeed as expected.\" + actual);\n+                        throw new IllegalStateException(\"Did not succeed as expected for preview=\" + preview + \", lint=\" + lint + \", suppress=\" + suppress + \", elementType=\" + elementType + \": actual:\\\"\" + actual + \"\\\"\");\n+                    }\n+                    ClassFile cf;\n+                    try {\n+                        JavaFileObject testClass = null;\n+                        for (JavaFileObject classfile : result.get()) {\n+                            if (classfile.isNameCompatible(\"Test\", JavaFileObject.Kind.CLASS)){\n+                                testClass = classfile;\n+                            }\n+                        }\n+                        if (testClass == null) {\n+                            throw new IllegalStateException(\"Cannot find Test.class\");\n+                        }\n+                        cf = ClassFile.read(testClass.openInputStream());\n+                    } catch (IOException | ConstantPoolException ex) {\n+                        throw new IllegalStateException(ex);\n+                    }\n+                    if (previewClass && cf.minor_version != 65535) {\n+                        throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version);\n+                    } else if (!previewClass && cf.minor_version != 0) {\n+                        throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version);\n@@ -193,1 +441,1 @@\n-                        throw new IllegalStateException(\"Succeed unexpectedly.\");\n+                        throw new IllegalStateException(\"Succeed unexpectedly for preview=\" + preview + \", lint=\" + lint + \", suppress=\" + suppress + \", elementType=\" + elementType);\n@@ -196,2 +444,2 @@\n-                if (!expected.equals(actual)) {\n-                    throw new IllegalStateException(\"Unexpected output for \" + essential + \", \" + preview + \", \" + lint + \", \" + suppress + \", \" + from + \": actual: \\\"\" + actual + \"\\\", expected: \\\"\" + expected + \"\\\"\");\n+                if (expected != null && !expected.equals(actual)) {\n+                    throw new IllegalStateException(\"Unexpected output for preview=\" + preview + \", lint=\" + lint + \", suppress=\" + suppress + \", elementType=\" + elementType + \": actual: \\\"\" + actual + \"\\\", expected: \\\"\" + expected + \"\\\"\");\n@@ -202,15 +450,0 @@\n-    public enum EssentialAPI implements ComboParameter {\n-        YES(\", essentialAPI=true\"),\n-        NO(\", essentialAPI=false\");\n-\n-        private final String code;\n-\n-        private EssentialAPI(String code) {\n-            this.code = code;\n-        }\n-\n-        public String expand(String optParameter) {\n-            return code;\n-        }\n-    }\n-\n@@ -263,5 +496,43 @@\n-    public enum PreviewFrom implements ComboParameter {\n-        CLASS,\n-        SOURCE;\n-\n-        private PreviewFrom() {\n+    public enum PreviewElementType implements ComboParameter {\n+        LANGUAGE(\"boolean b = o instanceof String s;\", \", reflective=false\", \"\", false),\n+        REFER_TO_DECLARATION_SOURCE(\"user.R d1; user.R d2;\", \", reflective=false\", \"\", true),\n+        REFER_TO_DECLARATION_CLASS(\"user.R d1; user.R d2;\", \", reflective=false\", \"\", false),\n+        API_CLASS(\"\"\"\n+                  preview.api.Core.test();\n+                  preview.api.Core.Clazz c;\n+                  \"\"\",\n+                  \", reflective=false\",\n+                  \"Core\",\n+                false),\n+        API_REFLECTIVE_CLASS(\"\"\"\n+                  preview.api.Reflect.test();\n+                  preview.api.Reflect.Clazz c;\n+                  \"\"\",\n+                  \", reflective=true\",\n+                  \"Reflect\",\n+                false),\n+        API_SOURCE(\"\"\"\n+                   preview.api.Core.test();\n+                   preview.api.Core.Clazz c;\n+                   \"\"\",\n+                   \", reflective=false\",\n+                   \"Core\",\n+                   true),\n+        API_REFLECTIVE_SOURCE(\"\"\"\n+                   preview.api.Reflect.test();\n+                   preview.api.Reflect.Clazz c;\n+                   \"\"\",\n+                   \", reflective=true\",\n+                   \"Reflect\",\n+                   true);\n+\n+        String code;\n+        String reflective;\n+        String className;\n+        boolean isSource;\n+\n+        private PreviewElementType(String code, String reflective, String className, boolean isSource) {\n+            this.code = code;\n+            this.reflective = reflective;\n+            this.className = className;\n+            this.isSource = isSource;\n@@ -271,1 +542,1 @@\n-            throw new IllegalStateException();\n+            return code;\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewErrors.java","additions":372,"deletions":101,"binary":false,"changes":473,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,19 +118,18 @@\n-                \"Note: visiting: SealedInterface Modifiers: [abstract, sealed]\",\n-                \"Note:     this class has: 2, permitted subclasses\",\n-                \"Note:     permitted subclass: NonSealedClass1\",\n-                \"Note:     permitted subclass: SealedClass\",\n-                \"Note: visiting: NonSealedClass1 Modifiers: [non-sealed]\",\n-                \"Note:     this class has: 0, permitted subclasses\",\n-                \"Note: visiting: SealedClass Modifiers: [sealed]\",\n-                \"Note:     this class has: 2, permitted subclasses\",\n-                \"Note:     permitted subclass: FinalClass\",\n-                \"Note:     permitted subclass: NonSealedClass2\",\n-                \"Note: visiting: FinalClass Modifiers: [final]\",\n-                \"Note:     this class has: 0, permitted subclasses\",\n-                \"Note: visiting: NonSealedClass2 Modifiers: [non-sealed]\",\n-                \"Note:     this class has: 0, permitted subclasses\",\n-                \"Note: visiting: ClassOutOfSealedHierarchy Modifiers: []\",\n-                \"Note:     this class has: 0, permitted subclasses\",\n-                \"Note: testSealedClassesProcessor\" + File.separator + \"src\" + File.separator\n-                        + \"Test\" + File.separator + \"SealedInterface.java uses preview language features.\",\n-                \"Note: Recompile with -Xlint:preview for details.\"\n+                \"- compiler.note.proc.messager: visiting: SealedInterface Modifiers: [abstract, sealed]\",\n+                \"- compiler.note.proc.messager:     this class has: 2, permitted subclasses\",\n+                \"- compiler.note.proc.messager:     permitted subclass: NonSealedClass1\",\n+                \"- compiler.note.proc.messager:     permitted subclass: SealedClass\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass1 Modifiers: [non-sealed]\",\n+                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\",\n+                \"- compiler.note.proc.messager: visiting: SealedClass Modifiers: [sealed]\",\n+                \"- compiler.note.proc.messager:     this class has: 2, permitted subclasses\",\n+                \"- compiler.note.proc.messager:     permitted subclass: FinalClass\",\n+                \"- compiler.note.proc.messager:     permitted subclass: NonSealedClass2\",\n+                \"- compiler.note.proc.messager: visiting: FinalClass Modifiers: [final]\",\n+                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass2 Modifiers: [non-sealed]\",\n+                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\",\n+                \"- compiler.note.proc.messager: visiting: ClassOutOfSealedHierarchy Modifiers: []\",\n+                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\",\n+                \"- compiler.note.preview.filename: SealedInterface.java, DEFAULT\",\n+                \"- compiler.note.preview.recompile\"\n@@ -143,1 +142,2 @@\n-                            \"-source\", Integer.toString(Runtime.version().feature()))\n+                            \"-source\", Integer.toString(Runtime.version().feature()),\n+                            \"-XDrawDiagnostics\")\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestSealed.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -604,0 +604,2 @@\n+            \"- compiler.note.preview.plural: DEFAULT\",\n+            \"- compiler.note.preview.recompile\",\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-                                \"java.base\/jdk.internal\",\n+                                \"java.base\/jdk.internal.javac\",\n","filename":"test\/langtools\/tools\/jdeps\/listdeps\/ListModuleDeps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}