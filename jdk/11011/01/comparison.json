{"files":[{"patch":"@@ -35,1 +35,1 @@\n- *     waits for a monitor. Then the test calls java.lang.Thread.getStackTrace()\n+ *     wait on a monitor. Then the test calls java.lang.Thread.getStackTrace()\n@@ -37,6 +37,1 @@\n- *     The test fails if:\n- *     - amount of stack trace elements and stack trace elements themselves are\n- *       the same for both methods;\n- *     - there is at least one element corresponding to invocation of unexpected\n- *       method. Expected methods are Thread.sleep(), Thread.run() and the\n- *       recursive method.\n+ *     The test fails if the stacks for each thread do not match.\n@@ -58,1 +53,1 @@\n- * The test runs <code>THRD_COUNT<\/code> instances of <code>strace010Thread<\/code>,\n+ * The test runs <code>THRD_COUNT<\/code> instances of <code>strace013Thread<\/code>,\n@@ -60,1 +55,1 @@\n- * <code>DEPTH<\/code> of recursion, each thread is switched to wait a monitor.\n+ * <code>DEPTH<\/code> of recursion, each thread is switched to wait on a monitor.\n@@ -65,1 +60,1 @@\n- * for both stack traces must be corresponded to invocation of one of the methods\n+ * for both stack traces correspond to invocation of one of the methods\n@@ -84,0 +79,1 @@\n+    static int waitingCount = 0; \/\/ accessed while holding lockedObject\n@@ -85,1 +81,7 @@\n-    volatile int achivedCount = 0;\n+    \/\/ Must synchronize on the lockedObject so the right count guarantees\n+    \/\/ the wait() call has been entered.\n+    static int waitingCount() {\n+        synchronized(strace013.lockedObject) {\n+            return waitingCount;\n+        }\n+    }\n@@ -120,1 +122,0 @@\n-        achivedCount = 0;\n@@ -126,1 +127,1 @@\n-            threads[i] = new strace013Thread(this, tmp_name);\n+            threads[i] = new strace013Thread(tmp_name);\n@@ -137,1 +138,1 @@\n-        while (achivedCount < THRD_COUNT) {\n+        while (strace013.waitingCount() < THRD_COUNT) {\n@@ -144,1 +145,0 @@\n-        achivedCount = 0;\n@@ -175,1 +175,1 @@\n-            if (count - k > 2) {\n+            if (count != k) {\n@@ -257,1 +257,0 @@\n-    strace013 test;\n@@ -259,2 +258,1 @@\n-    strace013Thread(strace013 test, String name) {\n-        this.test = test;\n+    strace013Thread(String name) {\n@@ -284,4 +282,0 @@\n-            synchronized (test) {\n-                test.achivedCount++;\n-            }\n-\n@@ -289,0 +283,1 @@\n+                strace013.waitingCount++;\n@@ -290,0 +285,2 @@\n+                    \/\/ If we get a spurious wakeup then the test may break,\n+                    \/\/ but there is nothing we can do to prevent that.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace013.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"}]}