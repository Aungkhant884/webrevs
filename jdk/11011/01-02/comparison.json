{"files":[{"patch":"@@ -62,0 +62,4 @@\n+ *\n+ * There is some leeway in the expected stack depth as a thread may not have\n+ * reached the native wait0() call when the stacktrace is taken. So we allow\n+ * a difference of 3 for the methods: wait(), wait(0), and wait0(0)\n@@ -68,1 +72,1 @@\n-            \"java.lang.Object.wait\",\n+            \"java.lang.Object.wait\", \/\/ two variants\n@@ -79,1 +83,0 @@\n-    static int waitingCount = 0; \/\/ accessed while holding lockedObject\n@@ -81,7 +84,1 @@\n-    \/\/ Must synchronize on the lockedObject so the right count guarantees\n-    \/\/ the wait() call has been entered.\n-    static int waitingCount() {\n-        synchronized(strace013.lockedObject) {\n-            return waitingCount;\n-        }\n-    }\n+    volatile int achivedCount = 0;\n@@ -122,0 +119,1 @@\n+        achivedCount = 0;\n@@ -127,1 +125,1 @@\n-            threads[i] = new strace013Thread(tmp_name);\n+            threads[i] = new strace013Thread(this, tmp_name);\n@@ -138,1 +136,1 @@\n-        while (strace013.waitingCount() < THRD_COUNT) {\n+        while (achivedCount < THRD_COUNT) {\n@@ -145,0 +143,1 @@\n+        achivedCount = 0;\n@@ -175,1 +174,1 @@\n-            if (count != k) {\n+            if (count - k > 3) {\n@@ -257,0 +256,1 @@\n+    strace013 test;\n@@ -258,1 +258,2 @@\n-    strace013Thread(String name) {\n+    strace013Thread(strace013 test, String name) {\n+        this.test = test;\n@@ -282,0 +283,4 @@\n+            synchronized (test) {\n+                test.achivedCount++;\n+            }\n+\n@@ -283,1 +288,0 @@\n-                strace013.waitingCount++;\n@@ -285,2 +289,0 @@\n-                    \/\/ If we get a spurious wakeup then the test may break,\n-                    \/\/ but there is nothing we can do to prevent that.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace013.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"}]}