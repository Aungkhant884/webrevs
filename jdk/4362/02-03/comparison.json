{"files":[{"patch":"@@ -2348,7 +2348,7 @@\n-  \/\/ Inner MINL\/MAXL with CmovL to keep a long value for the outer MINL\/MAXL comparison:\n-  Node* cmp = new CmpLNode(limit, _igvn.longcon(is_positive_stride ? min_jint : max_jint));\n-  register_new_node(cmp, pre_ctrl);\n-  Node* bol = new BoolNode(cmp, is_positive_stride ? BoolTest::lt : BoolTest::gt);\n-  register_new_node(bol, pre_ctrl);\n-  Node* inner_result_long = new CMoveLNode(bol, limit, _igvn.longcon(is_positive_stride ? min_jint : max_jint), TypeLong::LONG);\n-  register_new_node(inner_result_long, pre_ctrl);\n+  \/\/ We use helper methods for inner MINL\/MAXL which return CMoveL nodes to keep a long value for the outer MINL\/MAXL comparison:\n+  Node* inner_result_long;\n+  if (is_positive_stride) {\n+    inner_result_long = MaxNode::signed_max(limit, _igvn.longcon(min_jint), TypeLong::LONG, _igvn);\n+  } else {\n+    inner_result_long = MaxNode::signed_min(limit, _igvn.longcon(max_jint), TypeLong::LONG, _igvn);\n+  }\n@@ -2360,1 +2360,1 @@\n-  cmp = new CmpLNode(old_limit_long, limit);\n+  Node* cmp = new CmpLNode(old_limit_long, limit);\n@@ -2362,1 +2362,1 @@\n-  bol = new BoolNode(cmp, is_positive_stride ? BoolTest::gt : BoolTest::lt);\n+  Node* bol = new BoolNode(cmp, is_positive_stride ? BoolTest::gt : BoolTest::lt);\n@@ -2368,1 +2368,0 @@\n-  C->print_method(PHASE_ADD_UNSAFE_BARRIER, 3);\n@@ -2417,1 +2416,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \n+\n@@ -67,1 +67,0 @@\n-            \n@@ -75,1 +74,1 @@\n-    \n+\n@@ -100,1 +99,1 @@\n-    \n+\n@@ -125,2 +124,2 @@\n-    \n-    \n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckLimits.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}