{"files":[{"patch":"@@ -2399,0 +2399,20 @@\n+\n+    if (low_limit->get_long() == -max_jint) {\n+      \/\/ If offset > 0, then low_limit - offset will either\n+      \/\/ underflow or if offset = 1, a division by -1 will still be\n+      \/\/ min_int. To avoid these problems, we replace the positive\n+      \/\/ offset with 0. This is done with an AND:\n+      \/\/ offset = offset & offset >> 63\n+      Node* shift = _igvn.intcon(63);\n+      set_ctrl(shift, C->root());\n+      Node* sign = new RShiftLNode(offset, shift);\n+      register_new_node(sign, pre_ctrl);\n+      offset = new AndLNode(offset, sign);\n+      register_new_node(offset, pre_ctrl);\n+    } else {\n+      assert(low_limit->get_long() == 0, \"wrong low limit for range check\");\n+      \/\/ The only problem here is when offset == min_int:\n+      \/\/ 0-min_int == min_int. It may be fine for stride > 0\n+      \/\/ but for stride < 0, limit will be < original_limit. To avoid it\n+      \/\/ max(pre_limit, original_limit) is used in do_range_check().\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+        test2();\n@@ -54,0 +55,1 @@\n+            \/\/ In RC: flipped to negative stride*scale\n@@ -65,0 +67,23 @@\n+\n+    public static void test2() {\n+        int e, f, g, h[] = new int[a];\n+        double i[] = new double[a];\n+        long j = 9;\n+        Helper.init(h, 3);\n+        for (e = 5; e < 154; e++) {\n+            for (f = 1; f < 169; f += 2) {\n+                b = e;\n+            }\n+            i[1] = b;\n+            \/\/ In RC: flipped to positive stride*scale\n+            for (g = 168; 8 < g; g -= 2) {\n+                j = g - 1;\n+                if (j < 3) {\n+                    switch (3) {\n+                        case 3:\n+                    }\n+                }\n+            }\n+        }\n+        lFld = j;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckLimits.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}