{"files":[{"patch":"@@ -2399,0 +2399,20 @@\n+\n+    if (low_limit->get_long() == -max_jint) {\n+      \/\/ If offset > 0, then low_limit - offset will either\n+      \/\/ underflow or if offset = 1, a division by -1 will still be\n+      \/\/ min_int. To avoid these problems, we replace the positive\n+      \/\/ offset with 0. This is done with an AND:\n+      \/\/ offset = offset & offset >> 63\n+      Node* shift = _igvn.intcon(63);\n+      set_ctrl(shift, C->root());\n+      Node* sign = new RShiftLNode(offset, shift);\n+      register_new_node(sign, pre_ctrl);\n+      offset = new AndLNode(offset, sign);\n+      register_new_node(offset, pre_ctrl);\n+    } else {\n+      assert(low_limit->get_long() == 0, \"wrong low limit for range check\");\n+      \/\/ The only problem here is when offset == min_int:\n+      \/\/ 0-min_int == min_int. It may be fine for stride > 0\n+      \/\/ but for stride < 0, limit will be < original_limit. To avoid it\n+      \/\/ max(pre_limit, original_limit) is used in do_range_check().\n+    }\n@@ -2428,0 +2448,19 @@\n+    if (low_limit->get_long() == -max_jint) {\n+      \/\/ If offset+1 > 0, then low_limit - (offset+1) will either\n+      \/\/ underflow or if offset = 0, a division by -1 will still be\n+      \/\/ min_int. To avoid these problems, we replace the positive\n+      \/\/ \"offset+1\" (plus_one) with 0. This is done with an AND:\n+      \/\/ plus_one = \"offset+1\" & \"offset+1\" >> 63\n+      Node* shift = _igvn.intcon(63);\n+      set_ctrl(shift, C->root());\n+      Node* sign = new RShiftLNode(plus_one, shift);\n+      register_new_node(sign, pre_ctrl);\n+      plus_one = new AndLNode(plus_one, sign);\n+      register_new_node(plus_one, pre_ctrl);\n+    } else {\n+      assert(low_limit->get_long() == 0, \"wrong low limit for range check\");\n+      \/\/ The only problem here is when offset == max_int:\n+      \/\/ low_limit - max_int+1 = 0 - min_int = min_int.\n+      \/\/ But this is fine since the main-loop will either\n+      \/\/ have less iterations or will be skipped.\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262017\n+ * @summary Dominator failure because ConvL2I node becomes TOP due to missing case in overflow\/underflow handling in range check elimination.\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckLimits::*\n+ *                   compiler.rangechecks.TestRangeCheckLimits\n+ *\/\n+\n+ package compiler.rangechecks;\n+\n+ public class TestRangeCheckLimits {\n+    static int a = 400;\n+    static volatile int b;\n+    static long lFld;\n+    static int iFld;\n+\n+    public static void main(String[] k) {\n+        test();\n+        test2();\n+    }\n+\n+    public static void test() {\n+        int e, f, g, h[] = new int[a];\n+        double i[] = new double[a];\n+        long j = 9;\n+        Helper.init(h, 3);\n+        for (e = 5; e < 154; e++) {\n+            for (f = 1; f < 169; f += 2) {\n+                b = e;\n+            }\n+            i[1] = b;\n+            \/\/ In RC: flipped to negative stride*scale\n+            for (g = 8; 168 > g; g += 2) {\n+                j = g;\n+                if (j < 3) {\n+                    switch (3) {\n+                        case 3:\n+                    }\n+                }\n+            }\n+        }\n+        lFld = j;\n+    }\n+\n+    public static void test2() {\n+        int e, f, g, h[] = new int[a];\n+        double i[] = new double[a];\n+        long j = 9;\n+        Helper.init(h, 3);\n+        for (e = 5; e < 154; e++) {\n+            for (f = 1; f < 169; f += 2) {\n+                b = e;\n+            }\n+            i[1] = b;\n+            \/\/ In RC: flipped to positive stride*scale\n+            for (g = 168; 8 < g; g -= 2) {\n+                j = g - 1;\n+                if (j < 3) {\n+                    switch (3) {\n+                        case 3:\n+                    }\n+                }\n+            }\n+        }\n+        lFld = j;\n+    }\n+}\n+\n+class Helper {\n+    public static void init(int[] a, int seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckLimits.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}