{"files":[{"patch":"@@ -66,0 +66,4 @@\n+static CGEventFlags initFlags;\n+static int allModifiersMask = kCGEventFlagMaskShift | kCGEventFlagMaskControl\n+                              | kCGEventFlagMaskAlternate | kCGEventFlagMaskCommand\n+                              | kCGEventFlagMaskAlphaShift;\n@@ -68,0 +72,1 @@\n+static inline int GetCGKeyMask(int cgKeyCode);\n@@ -124,0 +129,7 @@\n+            \/\/ initialize CGEventFlags here - which is used in keyEvent\n+            initFlags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n+\n+            \/\/ Clear Function flag bits if they are set\n+            if ((initFlags & kCGEventFlagMaskSecondaryFn) != 0) {\n+                initFlags ^= kCGEventFlagMaskSecondaryFn;\n+            }\n@@ -294,0 +306,1 @@\n+\n@@ -295,4 +308,11 @@\n-            CGEventFlags flags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n-            if ((flags & kCGEventFlagMaskSecondaryFn) != 0) {\n-                flags ^= kCGEventFlagMaskSecondaryFn;\n-                CGEventSetFlags(event, flags);\n+            int flagMaskValue = GetCGKeyMask(keyCode);\n+            if (OSX_Undefined != flagMaskValue) {\n+                if (keyCode == OSX_CapsLock) {\n+                    if (keyPressed) {\n+                     initFlags ^= flagMaskValue;\n+                    }\n+                } else {\n+                    initFlags = keyPressed\n+                                ? (initFlags | flagMaskValue)    \/\/ add flag bits if modifier key pressed\n+                                : (initFlags & ~flagMaskValue);  \/\/ clear flag bits if modifier key released\n+                }\n@@ -300,0 +320,5 @@\n+\n+            CGEventFlags flags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n+            flags  = (initFlags & allModifiersMask) | (flags & (!allModifiersMask));\n+            CGEventSetFlags(event, flags);\n+\n@@ -401,0 +426,6 @@\n+static inline int GetCGKeyMask(int cgKeyCode)\n+{\n+    CRobotKeyCodeMapping *keyCodeMapping = [CRobotKeyCodeMapping sharedInstance];\n+    return [keyCodeMapping getFlagMaskForCGKey:cgKeyCode];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobot.m","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+@property (readwrite, retain) NSDictionary *modifierKeyToMaskMap;\n@@ -154,0 +155,1 @@\n+- (int)getFlagMaskForCGKey:(int) cgKeyCode;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobotKeyCode.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+@synthesize modifierKeyToMaskMap;\n@@ -163,0 +164,9 @@\n+            nil];\n+\n+        self.modifierKeyToMaskMap = [NSDictionary dictionaryWithObjectsAndKeys:\n+            [NSNumber numberWithInt : kCGEventFlagMaskShift], [NSNumber numberWithInt : OSX_Shift],\n+            [NSNumber numberWithInt : kCGEventFlagMaskControl], [NSNumber numberWithInt : OSX_Control],\n+            [NSNumber numberWithInt : kCGEventFlagMaskAlternate], [NSNumber numberWithInt : OSX_Option],\n+            [NSNumber numberWithInt : kCGEventFlagMaskCommand], [NSNumber numberWithInt : OSX_Command],\n+            [NSNumber numberWithInt : kCGEventFlagMaskAlphaShift], [NSNumber numberWithInt : OSX_CapsLock],\n+\n@@ -179,0 +189,10 @@\n+-(int) getFlagMaskForCGKey : (int) cgKeyCode {\n+    id val = [modifierKeyToMaskMap objectForKey : [NSNumber numberWithInt : cgKeyCode]];\n+\n+    if (nil != val) {\n+        return [val intValue];\n+    } else {\n+        return OSX_Undefined;\n+    }\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobotKeyCode.m","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import sun.awt.OSInfo;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @bug 8302618\n+ * @key headful\n+ * @modules java.desktop\/sun.awt\n+ * @requires (os.family == \"mac\")\n+ * @summary To test if modifier keys work properly,\n+ *          when manual mouse move and Robot's Key Event occur simultaneously.\n+ *\/\n+public class RobotModifierMaskTest {\n+\n+    private static Robot robot;\n+    private static JFrame jFrame;\n+    private static JTextArea jTextArea;\n+\n+    private static StringBuffer errorLog = new StringBuffer();\n+    private static final String EXPECTED_RESULT_SHIFT = \"AAAAA\";\n+    private static final String EXPECTED_RESULT_CAPS = \"AaAaAa\";\n+    private static final String EXPECTED_RESULT_META = \"AAA\";\n+    private static final String EXPECTED_RESULT_ALT = \"\\u00e5\\u00e5\\u00e5\";\n+    private static final int EXPECTED_CARET_POS_CTRL = 0;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test is a semi-automatic test which checks the effect of typing modifier keys\n+            through a Robot.\\n\n+            It tests the following key modifiers - Shift, Caps, Control, Option and Command.\n+            It needs to be checked for following two scenarios \\n\n+\n+            CASE 1 : Run the test as an automated test and let the Robot go through all the test cases.\\n\n+            CASE 2 : Run the test in semi-automated mode. While the Robot in typing,\n+                     manually move the mouse (without clicking\/dragging). Check if the test Passes or Fails.\\n\\n\n+\n+            NOTE: User doesn't need to compare the actual vs expected result in Case 2.\n+            The test compares it.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+            System.out.println(\"This test is for MacOS platform only\");\n+            return;\n+        }\n+\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(200);\n+\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            jTextArea.setText(INSTRUCTIONS);\n+            robot.delay(8000);\n+\n+            testShiftKey();\n+            robot.delay(100);\n+            testCapsKey();\n+            robot.delay(100);\n+            testCmdKey();\n+            robot.delay(100);\n+            testCtrlKey();\n+            robot.delay(100);\n+            testAltKey();\n+\n+            if (!errorLog.isEmpty()) {\n+                throw new RuntimeException(\"Test failed for following case(s): \\n\" + errorLog);\n+            }\n+\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (jFrame != null) {\n+                    jFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void testShiftKey() {\n+        jTextArea.setText(\"\");\n+\n+        for (int i = 0; i < 5; ++i) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.delay(100);\n+        }\n+\n+        robot.delay(500);\n+\n+        if (!jTextArea.getText().equals(EXPECTED_RESULT_SHIFT)) {\n+            errorLog.append(\"For Shift key, Actual and Expected results differ \\n\"+\n+                    \"Expected Text : \" + EXPECTED_RESULT_SHIFT + \" Actual Text : \" + jTextArea.getText() + \"\\n\");\n+        }\n+    }\n+\n+    private static void testCapsKey() {\n+        \/\/ clear contents of JTextArea\n+        jTextArea.setText(\"\");\n+\n+        for (int i = 0; i < 6; ++i) {\n+            robot.keyPress(KeyEvent.VK_CAPS_LOCK);\n+            robot.keyRelease(KeyEvent.VK_CAPS_LOCK);\n+\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+\n+            robot.delay(100);\n+        }\n+\n+        robot.delay(500);\n+\n+        if (!jTextArea.getText().equals(EXPECTED_RESULT_CAPS)) {\n+            errorLog.append(\"For Caps key, Actual and Expected results differ. \\n\"+\n+                    \"Expected Text : \" + EXPECTED_RESULT_CAPS + \" Actual Text : \" + jTextArea.getText() + \"\\n\");\n+        }\n+    }\n+\n+    private static void testCmdKey() {\n+        \/\/ clear contents of JTextArea\n+        jTextArea.setText(\"\");\n+\n+        StringSelection stringSelection = new StringSelection(\"AAA\");\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        clipboard.setContents(stringSelection, stringSelection);\n+\n+        robot.keyPress(KeyEvent.VK_META);\n+        robot.keyPress(KeyEvent.VK_V);\n+        robot.keyRelease(KeyEvent.VK_V);\n+        robot.keyRelease(KeyEvent.VK_META);\n+\n+        robot.delay(500);\n+\n+        if (!jTextArea.getText().equals(EXPECTED_RESULT_META)) {\n+            errorLog.append(\"For Command key, Actual and Expected results differ \\n\"+\n+                    \"Expected Text : \" + EXPECTED_RESULT_META + \" Actual Text : \" + jTextArea.getText() + \"\\n\");\n+        }\n+    }\n+\n+    private static void testAltKey() {\n+        jTextArea.setText(\"\");\n+\n+        for (int i = 0; i < 3; ++i) {\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+\n+            robot.delay(100);\n+        }\n+\n+        robot.delay(500);\n+\n+        if (!jTextArea.getText().equals(EXPECTED_RESULT_ALT)) {\n+            errorLog.append(\"For Alt key, Actual and Expected results differ \\n\"+\n+                    \"Expected Text : \" + EXPECTED_RESULT_ALT + \" Actual Text : \" + jTextArea.getText() + \"\\n\");\n+        }\n+    }\n+\n+    private static void testCtrlKey() {\n+        jTextArea.setText(\"\");\n+\n+        for (int i = 0; i < 5; ++i) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+\n+            robot.delay(100);\n+        }\n+\n+        robot.delay(200);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        robot.delay(500);\n+\n+        if (jTextArea.getCaretPosition() != EXPECTED_CARET_POS_CTRL) {\n+            errorLog.append(\"For Control key, Actual and Expected caret position differ \\n\" +\n+                    \"Expected Position : \" + EXPECTED_CARET_POS_CTRL + \" Actual Position : \" + jTextArea.getCaretPosition() + \"\\n\");\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        jFrame = new JFrame(\"RobotModifierMaskTest\");\n+        jTextArea = new JTextArea(\"\");\n+        JScrollPane pane = new JScrollPane(jTextArea);\n+        jFrame.getContentPane().add(pane);\n+        jFrame.setSize(600,300);\n+        jFrame.setLocation(200, 200);\n+        jFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        jFrame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/RobotModifierMaskTest.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"}]}