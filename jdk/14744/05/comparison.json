{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,4 @@\n+static CGEventFlags initFlags;\n+static int allModifiersMask = kCGEventFlagMaskShift | kCGEventFlagMaskControl\n+                              | kCGEventFlagMaskAlternate | kCGEventFlagMaskCommand\n+                              | kCGEventFlagMaskAlphaShift | kCGEventFlagMaskSecondaryFn;\n@@ -68,0 +72,1 @@\n+static inline int GetCGKeyMask(int cgKeyCode);\n@@ -124,0 +129,7 @@\n+            \/\/ initialize CGEventFlags here - which is used in keyEvent\n+            initFlags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n+\n+            \/\/ Clear Function flag bits if they are set\n+            if ((initFlags & kCGEventFlagMaskSecondaryFn) != 0) {\n+                initFlags ^= kCGEventFlagMaskSecondaryFn;\n+            }\n@@ -294,0 +306,1 @@\n+\n@@ -295,4 +308,11 @@\n-            CGEventFlags flags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n-            if ((flags & kCGEventFlagMaskSecondaryFn) != 0) {\n-                flags ^= kCGEventFlagMaskSecondaryFn;\n-                CGEventSetFlags(event, flags);\n+            int flagMaskValue = GetCGKeyMask(keyCode);\n+            if (OSX_Undefined != flagMaskValue) {\n+                if (keyCode == OSX_CapsLock) {\n+                    if (keyPressed) {\n+                        initFlags ^= flagMaskValue;\n+                    }\n+                } else {\n+                    initFlags = keyPressed\n+                                ? (initFlags | flagMaskValue)    \/\/ add flag bits if modifier key pressed\n+                                : (initFlags & ~flagMaskValue);  \/\/ clear flag bits if modifier key released\n+                }\n@@ -300,0 +320,5 @@\n+\n+            CGEventFlags flags = CGEventSourceFlagsState(kCGEventSourceStateHIDSystemState);\n+            flags  = (initFlags & allModifiersMask) | (flags & (~allModifiersMask));\n+            CGEventSetFlags(event, flags);\n+\n@@ -401,0 +426,6 @@\n+static inline int GetCGKeyMask(int cgKeyCode)\n+{\n+    CRobotKeyCodeMapping *keyCodeMapping = [CRobotKeyCodeMapping sharedInstance];\n+    return [keyCodeMapping getFlagMaskForCGKey:cgKeyCode];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobot.m","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,0 +151,1 @@\n+@property (readwrite, retain) NSDictionary *modifierKeyToMaskMap;\n@@ -154,0 +155,1 @@\n+- (int)getFlagMaskForCGKey:(int) cgKeyCode;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobotKeyCode.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+@synthesize modifierKeyToMaskMap;\n@@ -163,0 +164,9 @@\n+            nil];\n+\n+        self.modifierKeyToMaskMap = [NSDictionary dictionaryWithObjectsAndKeys:\n+            [NSNumber numberWithInt : kCGEventFlagMaskShift], [NSNumber numberWithInt : OSX_Shift],\n+            [NSNumber numberWithInt : kCGEventFlagMaskControl], [NSNumber numberWithInt : OSX_Control],\n+            [NSNumber numberWithInt : kCGEventFlagMaskAlternate], [NSNumber numberWithInt : OSX_Option],\n+            [NSNumber numberWithInt : kCGEventFlagMaskCommand], [NSNumber numberWithInt : OSX_Command],\n+            [NSNumber numberWithInt : kCGEventFlagMaskAlphaShift], [NSNumber numberWithInt : OSX_CapsLock],\n+\n@@ -179,0 +189,10 @@\n+-(int) getFlagMaskForCGKey : (int) cgKeyCode {\n+    id val = [modifierKeyToMaskMap objectForKey : [NSNumber numberWithInt : cgKeyCode]];\n+\n+    if (nil != val) {\n+        return [val intValue];\n+    } else {\n+        return OSX_Undefined;\n+    }\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CRobotKeyCode.m","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,275 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.WindowConstants;\n+\n+import jtreg.SkippedException;\n+import sun.awt.OSInfo;\n+\n+import static javax.swing.SwingUtilities.invokeAndWait;\n+\n+\/*\n+ * @test\n+ * @bug 8302618\n+ * @key headful\n+ * @modules java.desktop\/sun.awt\n+ * @library \/test\/lib\n+ * @requires (os.family == \"mac\")\n+ * @summary To test if modifier keys work properly, during Robot's Key Event\n+ *          with and without manual mouse move.\n+ *\n+ * @run main RobotModifierMaskTest\n+ * @run main\/manual RobotModifierMaskTest manual\n+ *\/\n+\n+public class RobotModifierMaskTest {\n+\n+    private static Robot robot;\n+    private static JFrame jFrame;\n+    private static JTextArea jTextArea;\n+    private static boolean startTest = false;\n+    private static boolean isManual = false;\n+\n+    private static StringBuffer errorLog = new StringBuffer();\n+    private static final String EXPECTED_RESULT_SHIFT = \"AAAAA\";\n+    private static final String EXPECTED_RESULT_CAPS = \"AaAaAa\";\n+    private static final String EXPECTED_RESULT_META = \"AAA\";\n+    private static final String EXPECTED_RESULT_ALT = \"\\u00e5\\u00e5\\u00e5\";\n+    private static final String EXPECTED_RESULT_CTRL = \"0\";\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test is running in manual mode to check the effect of typing modifier keys\n+            through Robot combined with concurrent external manual mouse movement.\n+            It tests the following key modifiers - Shift, Caps, Control, Option and Command.\n+\n+            In this mode when the Robot starts to type, the user is required to concurrently\n+            move the mouse (without clicking\/dragging).\n+            When ready click on the \"Start\" button to run the test and start moving the mouse.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+            throw new SkippedException(\"macOS test only\");\n+        }\n+\n+        try {\n+            isManual = args.length != 0;\n+\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(100);\n+\n+            \/\/ create instruction frame when running in manual mode\n+            if (isManual) {\n+                try {\n+                    invokeAndWait(RobotModifierMaskTest::createInstructionsUI);\n+                    robot.waitForIdle();\n+                    while (!startTest) {\n+                        robot.delay(200);\n+                        if (!jFrame.isVisible()) {\n+                            throw new RuntimeException(\"Test instruction frame closed\");\n+                        }\n+                    }\n+                } finally {\n+                    invokeAndWait(() -> {\n+                        if (jFrame != null) {\n+                            jFrame.dispose();\n+                        }\n+                    });\n+                }\n+            }\n+\n+            invokeAndWait(RobotModifierMaskTest::createTestUI);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            runTests();\n+\n+            if (!errorLog.isEmpty()) {\n+                throw new RuntimeException(\"Test failed for following case(s): \\n\"\n+                                           + errorLog);\n+            }\n+        } finally {\n+            invokeAndWait(() -> {\n+                if (jFrame != null) {\n+                    jFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void runTests() throws Exception {\n+        testShiftKey();\n+        robot.delay(100);\n+        testCapsKey();\n+        robot.delay(100);\n+        testCmdKey();\n+        robot.delay(100);\n+        testCtrlKey();\n+        robot.delay(100);\n+        testAltKey();\n+    }\n+\n+    private static void testShiftKey() throws Exception {\n+        invokeAndWait(() -> jTextArea.setText(\"\"));\n+\n+        for (int i = 0; i < 5; ++i) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.delay(50);\n+        }\n+\n+        robot.delay(100);\n+        checkResult(EXPECTED_RESULT_SHIFT, \"For Shift key: \");\n+    }\n+\n+    private static void testCapsKey() throws Exception {\n+        invokeAndWait(() -> jTextArea.setText(\"\"));\n+\n+        for (int i = 0; i < 6; ++i) {\n+            robot.keyPress(KeyEvent.VK_CAPS_LOCK);\n+            robot.keyRelease(KeyEvent.VK_CAPS_LOCK);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.delay(50);\n+        }\n+\n+        robot.delay(100);\n+        checkResult(EXPECTED_RESULT_CAPS, \"For Caps key: \");\n+    }\n+\n+    private static void testCmdKey() throws Exception {\n+        invokeAndWait(() -> jTextArea.setText(\"\"));\n+\n+        StringSelection stringSelection = new StringSelection(\"AAA\");\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        clipboard.setContents(stringSelection, stringSelection);\n+\n+        robot.keyPress(KeyEvent.VK_META);\n+        robot.keyPress(KeyEvent.VK_V);\n+        robot.keyRelease(KeyEvent.VK_V);\n+        robot.keyRelease(KeyEvent.VK_META);\n+\n+        robot.delay(100);\n+        checkResult(EXPECTED_RESULT_META, \"For Command key: \");\n+    }\n+\n+    private static void testAltKey() throws Exception {\n+        invokeAndWait(() -> jTextArea.setText(\"\"));\n+\n+        for (int i = 0; i < 3; ++i) {\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.delay(50);\n+        }\n+\n+        robot.delay(100);\n+        checkResult(EXPECTED_RESULT_ALT, \"For Alt key: \");\n+    }\n+\n+    private static void testCtrlKey() throws Exception {\n+        invokeAndWait(() -> jTextArea.setText(\"\"));\n+\n+        for (int i = 0; i < 5; ++i) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.delay(50);\n+        }\n+\n+        robot.delay(50);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.keyPress(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_A);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        robot.delay(100);\n+\n+        checkResult(EXPECTED_RESULT_CTRL, \"For Control key: \");\n+    }\n+\n+    private static void createInstructionsUI() {\n+        jFrame = new JFrame(\"Manual Test Instructions\");\n+        jTextArea = new JTextArea(INSTRUCTIONS);\n+\n+        JScrollPane pane = new JScrollPane(jTextArea);\n+        jFrame.getContentPane().add(pane, BorderLayout.CENTER);\n+\n+        JButton jButton = new JButton(\"Start\");\n+        jButton.addActionListener(e -> startTest = true);\n+        jFrame.getContentPane().add(jButton, BorderLayout.PAGE_END);\n+\n+        jFrame.setSize(560, 200);\n+        jFrame.setLocation(200, 200);\n+        jFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        jFrame.setVisible(true);\n+    }\n+\n+    private static void createTestUI() {\n+        String mode = isManual ? \"MANUAL\" : \"AUTOMATED\";\n+        jFrame = new JFrame(\"RobotModifierMaskTest - Mode: \" + mode);\n+        jTextArea = new JTextArea(\"\");\n+        JScrollPane pane = new JScrollPane(jTextArea);\n+        jFrame.getContentPane().add(pane, BorderLayout.CENTER);\n+\n+        jFrame.setSize(450, 100);\n+        jFrame.setLocation(200, 200);\n+        jFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        jFrame.setVisible(true);\n+    }\n+\n+    private static void checkResult(String expectedResult, String prefixText)\n+                                                                throws Exception {\n+        invokeAndWait(() -> {\n+            boolean condition = expectedResult.equals(EXPECTED_RESULT_CTRL)\n+                                ? (jTextArea.getCaretPosition()\n+                                     != Integer.parseInt(EXPECTED_RESULT_CTRL))\n+                                : !jTextArea.getText().equals(expectedResult);\n+\n+            String actualResult = expectedResult.equals(EXPECTED_RESULT_CTRL)\n+                                  ? String.valueOf(jTextArea.getCaretPosition())\n+                                  : jTextArea.getText();\n+\n+            if (condition) {\n+                errorLog.append(prefixText + \"Actual and Expected results differ\"\n+                        + \" Expected : \" + expectedResult\n+                        + \" Actual : \" + actualResult + \"\\n\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/RobotModifierMaskTest.java","additions":275,"deletions":0,"binary":false,"changes":275,"status":"added"}]}