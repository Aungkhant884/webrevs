{"files":[{"patch":"@@ -909,2 +909,10 @@\n-void G1RemSet::prepare_region_for_scan(HeapRegion* region) {\n-  uint hrm_index = region->hrm_index();\n+#ifdef ASSERT\n+void G1RemSet::assert_scan_top_is_null(uint hrm_index) {\n+  assert(_scan_state->scan_top(hrm_index) == NULL,\n+         \"scan_top of region %u is unexpectedly \" PTR_FORMAT,\n+         hrm_index, p2i(_scan_state->scan_top(hrm_index)));\n+}\n+#endif\n+\n+void G1RemSet::prepare_region_for_scan(HeapRegion* r) {\n+  uint hrm_index = r->hrm_index();\n@@ -912,2 +920,6 @@\n-  if (region->is_old_or_humongous_or_archive()) {\n-    _scan_state->set_scan_top(hrm_index, region->top());\n+  \/\/ Only update non-collection set old regions, others must have already been set\n+  \/\/ to NULL (don't scan) in the initialization.\n+  if (r->in_collection_set()) {\n+    assert_scan_top_is_null(hrm_index);\n+  } else if (r->is_old_or_humongous_or_archive()) {\n+    _scan_state->set_scan_top(hrm_index, r->top());\n@@ -915,2 +927,3 @@\n-    assert(region->in_collection_set() || region->is_free(),\n-           \"Should only be free or in the collection set at this point %s\", region->get_type_str());\n+    assert_scan_top_is_null(hrm_index);\n+    assert(r->is_free(),\n+           \"Region %u should be free region but is %s\", hrm_index, r->get_type_str());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+\n+  void assert_scan_top_is_null(uint hrm_index) PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}