{"files":[{"patch":"@@ -189,1 +189,2 @@\n-        jdk.jlink;\n+        jdk.jlink,\n+        jdk.jshell;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,7 @@\n+import java.util.stream.Stream;\n+import jdk.internal.org.objectweb.asm.ClassReader;\n+import jdk.internal.org.objectweb.asm.ClassVisitor;\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+import jdk.internal.org.objectweb.asm.Label;\n+import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -40,0 +47,6 @@\n+    private static volatile boolean allStop = false;\n+\n+    public static void stopCheck() {\n+        if (allStop) throw new ThreadDeath();\n+    }\n+\n@@ -60,0 +73,26 @@\n+    @Override\n+    public void load(ClassBytecodes[] cbcs)\n+            throws ClassInstallException, NotImplementedException, EngineTerminationException {\n+        super.load(Stream.of(cbcs)\n+                .map(cbc -> new ClassBytecodes(cbc.name(), instrument(cbc.bytecodes())))\n+                .toArray(ClassBytecodes[]::new));\n+    }\n+\n+    private static byte[] instrument(byte[] classFile) {\n+        var reader  = new ClassReader(classFile);\n+        var writer = new ClassWriter(reader, 0);\n+        reader.accept(new ClassVisitor(Opcodes.ASM9, writer) {\n+            @Override\n+            public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n+                return new MethodVisitor(Opcodes.ASM9, super.visitMethod(access, name, descriptor, signature, exceptions)) {\n+                    @Override\n+                    public void visitJumpInsn(int opcode, Label label) {\n+                        visitMethodInsn(Opcodes.INVOKESTATIC, \"jdk\/jshell\/execution\/LocalExecutionControl\", \"stopCheck\", \"()V\", false);\n+                        super.visitJumpInsn(opcode, label);\n+                    }\n+                };\n+            }\n+        }, 0);\n+        return writer.toByteArray();\n+    }\n+\n@@ -127,1 +166,0 @@\n-    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -136,11 +174,1 @@\n-\n-            Thread[] threads;\n-            int len, threadCount;\n-            do {\n-                len = execThreadGroup.activeCount() + 4;\n-                threads = new Thread[len];\n-                threadCount = execThreadGroup.enumerate(threads);\n-            } while (threadCount == len);\n-            for (int i = 0; i < threadCount; i++) {\n-                threads[i].stop();\n-            }\n+            allStop = true;\n@@ -154,0 +182,1 @@\n+            allStop = false;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":41,"deletions":12,"binary":false,"changes":53,"status":"modified"}]}