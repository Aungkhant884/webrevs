{"files":[{"patch":"@@ -27,1 +27,0 @@\n-#include \"cds\/filemap.hpp\"\n@@ -117,1 +116,1 @@\n-    oop o = ArchiveHeapLoader::decode_from_archive(v);\n+    oop o = ArchiveHeapLoader::decode_from_mapped_archive(v);\n@@ -123,0 +122,23 @@\n+class PatchCompressedEmbeddedPointersQuick: public BitMapClosure {\n+  narrowOop* _start;\n+  uint32_t _delta;\n+\n+ public:\n+  PatchCompressedEmbeddedPointersQuick(narrowOop* start, uint32_t delta) : _start(start), _delta(delta) {}\n+\n+  bool do_bit(size_t offset) {\n+    narrowOop* p = _start + offset;\n+    narrowOop v = *p;\n+    assert(!CompressedOops::is_null(v), \"null oops should have been filtered out at dump time\");\n+    narrowOop new_v = CompressedOops::narrow_oop_cast(CompressedOops::narrow_oop_value(v) + _delta);\n+    assert(!CompressedOops::is_null(new_v), \"should never relocate to narrowOop(0)\");\n+#ifdef ASSERT\n+    oop o1 = ArchiveHeapLoader::decode_from_mapped_archive(v);\n+    oop o2 = CompressedOops::decode_not_null(new_v);\n+    assert(o1 == o2, \"quick delta must work\");\n+#endif\n+    RawAccess<IS_NOT_NULL>::oop_store(p, new_v);\n+    return true;\n+  }\n+};\n+\n@@ -139,0 +161,27 @@\n+void ArchiveHeapLoader::patch_compressed_embedded_pointers(BitMapView bm,\n+                                                  FileMapInfo* info,\n+                                                  FileMapRegion* map_region,\n+                                                  MemRegion region) {\n+  narrowOop dt_encoded_bottom = info->encoded_heap_region_dumptime_address(map_region);\n+  narrowOop rt_encoded_bottom = CompressedOops::encode_not_null(cast_to_oop(region.start()));\n+  log_info(cds)(\"patching heap embedded pointers: narrowOop 0x%8x -> 0x%8x\",\n+                  (uint)dt_encoded_bottom, (uint)rt_encoded_bottom);\n+\n+  \/\/ Optimization: if dumptime shift is the same as runtime shift, we can perform a\n+  \/\/ quick conversion from \"dumptime narrowOop\" -> \"runtime narrowOop\".\n+  if (_narrow_oop_shift == CompressedOops::shift()) {\n+    uint32_t quick_delta = (uint32_t)rt_encoded_bottom - (uint32_t)dt_encoded_bottom;\n+    log_info(cds)(\"CDS heap data relocation quick delta = 0x%x\", quick_delta);\n+    if (quick_delta == 0) {\n+      log_info(cds)(\"CDS heap data relocation unnecessary, quick_delta = 0\");\n+    } else {\n+      PatchCompressedEmbeddedPointersQuick patcher((narrowOop*)region.start(), quick_delta);\n+      bm.iterate(&patcher);\n+    }\n+  } else {\n+    log_info(cds)(\"CDS heap data quick relocation not possible\");\n+    PatchCompressedEmbeddedPointers patcher((narrowOop*)region.start());\n+    bm.iterate(&patcher);\n+  }\n+}\n+\n@@ -141,1 +190,3 @@\n-void ArchiveHeapLoader::patch_embedded_pointers(MemRegion region, address oopmap,\n+void ArchiveHeapLoader::patch_embedded_pointers(FileMapInfo* info,\n+                                                FileMapRegion* map_region,\n+                                                MemRegion region, address oopmap,\n@@ -152,2 +203,1 @@\n-    PatchCompressedEmbeddedPointers patcher((narrowOop*)region.start());\n-    bm.iterate(&patcher);\n+    patch_compressed_embedded_pointers(bm, info, map_region, region);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":55,"deletions":5,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -34,0 +35,1 @@\n+#include \"utilities\/bitMap.hpp\"\n@@ -106,2 +108,12 @@\n-  static void patch_embedded_pointers(MemRegion region, address oopmap,\n-                                      size_t oopmap_in_bits) NOT_CDS_JAVA_HEAP_RETURN;\n+  \/\/ More efficient version, but works only when ArchiveHeap is mapped.\n+  inline static oop decode_from_mapped_archive(narrowOop v) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+\n+  static void patch_compressed_embedded_pointers(BitMapView bm,\n+                                                 FileMapInfo* info,\n+                                                 FileMapRegion* map_region,\n+                                                 MemRegion region) NOT_CDS_JAVA_HEAP_RETURN;\n+\n+  static void patch_embedded_pointers(FileMapInfo* info,\n+                                      FileMapRegion* map_region,\n+                                      MemRegion region, address oopmap,\n+                                      size_t oopmap_size_in_bits) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -162,0 +174,3 @@\n+  template<bool IS_MAPPED>\n+  inline static oop decode_from_archive_impl(narrowOop v) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.hpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-inline oop ArchiveHeapLoader::decode_from_archive(narrowOop v) {\n+template<bool IS_MAPPED>\n+inline oop ArchiveHeapLoader::decode_from_archive_impl(narrowOop v) {\n@@ -39,1 +40,3 @@\n-  if (p >= _dumptime_base_0) {\n+  if (IS_MAPPED) {\n+    assert(_dumptime_base_0 == UINTPTR_MAX, \"must be\");\n+  } else if (p >= _dumptime_base_0) {\n@@ -57,0 +60,8 @@\n+inline oop ArchiveHeapLoader::decode_from_archive(narrowOop v) {\n+  return decode_from_archive_impl<false>(v);\n+}\n+\n+inline oop ArchiveHeapLoader::decode_from_mapped_archive(narrowOop v) {\n+  return decode_from_archive_impl<true>(v);\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.inline.hpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2450,0 +2450,7 @@\n+narrowOop FileMapInfo::encoded_heap_region_dumptime_address(FileMapRegion* r) {\n+  assert(UseSharedSpaces, \"runtime only\");\n+  assert(UseCompressedOops, \"sanity\");\n+  r->assert_is_heap_region();\n+  return CompressedOops::narrow_oop_cast(r->mapping_offset() >> narrow_oop_shift());\n+}\n+\n@@ -2457,16 +2464,1 @@\n-    if (UseCompressedOops) {\n-      \/\/ These are the encoded values for the bottom of this region at dump-time vs run-time:\n-      narrowOop dt_encoded_bottom = CompressedOops::narrow_oop_cast(r->mapping_offset() >> narrow_oop_shift());\n-      narrowOop rt_encoded_bottom = CompressedOops::encode_not_null(cast_to_oop(regions[i].start()));\n-      log_info(cds)(\"patching heap embedded pointers for %s: narrowOop 0x%8x -> 0x%8x\",\n-                    region_name(region_idx), (uint)dt_encoded_bottom, (uint)rt_encoded_bottom);\n-      \/\/ TODO JDK-8269736: if we have the same narrow_oop_shift between dumptime and runtime,\n-      \/\/ Each embedded pointer P can be updated by:\n-      \/\/     P += (rt_encoded_bottom - dt_encoded_bottom)\n-      \/\/\n-      \/\/ TODO:\n-      \/\/ if (dt_encoded_bottom == rt_encoded_bottom && narrow_oop_shift() == CompressedOops::shift()) {\n-      \/\/   \/\/nothing to do\n-      \/\/   return;\n-      \/\/ }\n-    }\n+\n@@ -2474,1 +2466,1 @@\n-      regions[i],\n+      this, r, regions[i],\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -596,0 +596,1 @@\n+  narrowOop encoded_heap_region_dumptime_address(FileMapRegion* r);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,2 @@\n+            16 * M * 1024,   6 * M * 1024,   default_base,               0x90000000,\n+            128 * M,         128 * M,        0xf0000000,                 0xe0000000\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/DifferentHeapSizes.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}