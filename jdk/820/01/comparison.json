{"files":[{"patch":"@@ -12602,0 +12602,1 @@\n+  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U);\n@@ -12604,1 +12605,1 @@\n-  format %{ \"String IndexOfChar $haystack[0..$haycnt], $ch\"\n+  format %{ \"StringUTF16 IndexOfChar $haystack[0..$haycnt], $ch\"\n@@ -12615,0 +12616,19 @@\n+instruct indexOfChar_L(iRegIdst result, iRegPsrc haystack, iRegIsrc haycnt,\n+                       iRegIsrc ch, iRegIdst tmp1, iRegIdst tmp2,\n+                       flagsRegCR0 cr0, flagsRegCR1 cr1, regCTR ctr) %{\n+  match(Set result (StrIndexOfChar (Binary haystack haycnt) ch));\n+  effect(TEMP tmp1, TEMP tmp2, KILL cr0, KILL cr1, KILL ctr);\n+  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L);\n+  ins_cost(180);\n+\n+  format %{ \"StringLatin1 IndexOfChar $haystack[0..$haycnt], $ch\"\n+            \" -> $result \\t\/\/ KILL $haycnt, $tmp1, $tmp2, $cr0, $cr1\" %}\n+  ins_encode %{\n+    __ string_indexof_char($result$$Register,\n+                           $haystack$$Register, $haycnt$$Register,\n+                           $ch$$Register, 0 \/* this is not used if the character is already in a register *\/,\n+                           $tmp1$$Register, $tmp2$$Register, true \/*is_byte*\/);\n+  %}\n+  ins_pipe(pipe_class_compare);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -10157,0 +10157,1 @@\n+  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U);\n@@ -10158,1 +10159,1 @@\n-  format %{ \"String IndexOfChar [0..$haycnt]($haystack), $ch -> $result\" %}\n+  format %{ \"StringUTF16 IndexOfChar [0..$haycnt]($haystack), $ch -> $result\" %}\n@@ -10168,0 +10169,15 @@\n+instruct indexOfChar_L(iRegP haystack, iRegI haycnt, iRegI ch, iRegI result, roddRegL oddReg, revenRegL evenReg, flagsReg cr) %{\n+  match(Set result (StrIndexOfChar (Binary haystack haycnt) ch));\n+  effect(TEMP_DEF result, TEMP evenReg, TEMP oddReg, KILL cr); \/\/ R0, R1 are killed, too.\n+  predicate(((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L);\n+  ins_cost(200);\n+  format %{ \"StringLatin1 IndexOfChar [0..$haycnt]($haystack), $ch -> $result\" %}\n+  ins_encode %{\n+    __ string_indexof_char($result$$Register,\n+                           $haystack$$Register, $haycnt$$Register,\n+                           $ch$$Register, 0 \/* unused, ch is in register *\/,\n+                           $oddReg$$Register, $evenReg$$Register, true \/*is_byte*\/);\n+  %}\n+  ins_pipe(pipe_class_dummy);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}