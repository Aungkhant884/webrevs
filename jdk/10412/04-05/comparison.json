{"files":[{"patch":"@@ -177,1 +177,1 @@\n-class CHeapObjImpl : public AllStatic {\n+class CHeapObjBase {\n@@ -179,1 +179,1 @@\n-   static ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n@@ -183,2 +183,3 @@\n-  static ALWAYSINLINE void* operator new(size_t size,\n-                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const NativeCallStack& stack) throw() {\n@@ -188,2 +189,4 @@\n-  static ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&,\n-                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const std::nothrow_t&,\n+                                  const NativeCallStack& stack) throw() {\n@@ -193,1 +196,3 @@\n-  static ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const std::nothrow_t&) throw() {\n@@ -197,1 +202,1 @@\n-  static ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n@@ -201,2 +206,3 @@\n-  static ALWAYSINLINE void* operator new[](size_t size,\n-                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const NativeCallStack& stack) throw() {\n@@ -206,2 +212,4 @@\n-  static ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&,\n-                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const std::nothrow_t&,\n+                                    const NativeCallStack& stack) throw() {\n@@ -211,1 +219,3 @@\n-  static ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const std::nothrow_t&) throw() {\n@@ -215,2 +225,2 @@\n-  static void  operator delete(void* p)     { FreeHeap(p); }\n-  static void  operator delete [] (void* p) { FreeHeap(p); }\n+  void operator delete(void* p)     { FreeHeap(p); }\n+  void operator delete [] (void* p) { FreeHeap(p); }\n@@ -219,0 +229,1 @@\n+\/\/ Uses the implicitly static new and delete operators of CHeapObjBase\n@@ -223,1 +234,1 @@\n-    return CHeapObjImpl::operator new(size, F);\n+    return CHeapObjBase::operator new(size, F);\n@@ -228,1 +239,1 @@\n-    return CHeapObjImpl::operator new(size, stack, F);\n+    return CHeapObjBase::operator new(size, F, stack);\n@@ -233,1 +244,1 @@\n-    return CHeapObjImpl::operator new(size, nt, stack, F);\n+    return CHeapObjBase::operator new(size, F, nt, stack);\n@@ -237,1 +248,1 @@\n-    return CHeapObjImpl::operator new(size, nt, F);\n+    return CHeapObjBase::operator new(size, F, nt);\n@@ -241,1 +252,1 @@\n-    return CHeapObjImpl::operator new[](size, F);\n+    return CHeapObjBase::operator new[](size, F);\n@@ -246,1 +257,1 @@\n-    return CHeapObjImpl::operator new[](size, stack, F);\n+    return CHeapObjBase::operator new[](size, F, stack);\n@@ -251,1 +262,1 @@\n-    return CHeapObjImpl::operator new[](size, nt, stack, F);\n+    return CHeapObjBase::operator new[](size, F, nt, stack);\n@@ -255,28 +266,1 @@\n-    return CHeapObjImpl::operator new[](size, nt, F);\n-  }\n-\n-  void  operator delete(void* p)     { CHeapObjImpl::operator delete(p); }\n-  void  operator delete [] (void* p) { CHeapObjImpl::operator delete[](p); }\n-\n-};\n-\n-\/\/ Dynamically pick the memory flags at allocation\n-class CHeapObjDynamic {\n- public:\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new(size, f);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size,\n-                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new(size, stack, f);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt,\n-                                  const NativeCallStack& stack\n-                                  , MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new(size, nt, stack, f);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new(size, nt, f);\n+    return CHeapObjBase::operator new[](size, F, nt);\n@@ -285,2 +269,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new[](size, f);\n+  void operator delete(void* p)     {\n+    CHeapObjBase::operator delete(p);\n@@ -289,8 +273,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size,\n-                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new[](size, stack, f);\n-  }\n-\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt,\n-                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new[](size, nt, stack, f);\n+  void operator delete [] (void* p) {\n+    CHeapObjBase::operator delete[](p);\n@@ -298,7 +276,0 @@\n-\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt, MEMFLAGS f) throw() {\n-    return CHeapObjImpl::operator new[](size, nt, f);\n-  }\n-\n-  void  operator delete(void* p)     { CHeapObjImpl::operator delete(p); }\n-  void  operator delete [] (void* p) { CHeapObjImpl::operator delete[](p); }\n@@ -307,1 +278,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":38,"deletions":68,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class outputStream : public CHeapObjDyn {\n+class outputStream : public CHeapObjBase {\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}