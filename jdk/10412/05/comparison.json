{"files":[{"patch":"@@ -68,1 +68,1 @@\n-  _output = new(ResourceObj::C_HEAP, mtCompiler) fileStream(file_name, \"at\");\n+  _output = new(mtCompiler) fileStream(file_name, \"at\");\n","filename":"src\/hotspot\/share\/c1\/c1_CFGPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    _classlist_file = new(ResourceObj::C_HEAP, mtInternal)\n+    _classlist_file = new(mtInternal)\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1963,1 +1963,1 @@\n-        CompileLog* log = new(ResourceObj::C_HEAP, mtCompiler) CompileLog(file_name, fp, thread_id);\n+        CompileLog* log = new(mtCompiler) CompileLog(file_name, fp, thread_id);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  initialize(new(ResourceObj::C_HEAP, mtCompiler) fileStream(fp, true));\n+  initialize(new(mtCompiler) fileStream(fp, true));\n","filename":"src\/hotspot\/share\/compiler\/compileLog.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-  _lines = new (ResourceObj::C_HEAP, mtGC) stringStream();\n-  _temp = new (ResourceObj::C_HEAP, mtGC) stringStream();\n+  _lines = new (mtGC) stringStream();\n+  _temp = new (mtGC) stringStream();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    _jni_config_file = new(ResourceObj::C_HEAP, mtJVMCI) fileStream(JVMCILibDumpJNIConfig);\n+    _jni_config_file = new(mtJVMCI) fileStream(JVMCILibDumpJNIConfig);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,55 @@\n-template <MEMFLAGS F> class CHeapObj {\n+class CHeapObjBase {\n+ public:\n+  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n+    return (void*)AllocateHeap(size, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const NativeCallStack& stack) throw() {\n+    return (void*)AllocateHeap(size, f, stack);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const std::nothrow_t&,\n+                                  const NativeCallStack& stack) throw() {\n+    return (void*)AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  MEMFLAGS f,\n+                                  const std::nothrow_t&) throw() {\n+    return (void*)AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n+    return (void*)AllocateHeap(size, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const NativeCallStack& stack) throw() {\n+    return (void*)AllocateHeap(size, f, stack);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const std::nothrow_t&,\n+                                    const NativeCallStack& stack) throw() {\n+    return (void*)AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    MEMFLAGS f,\n+                                    const std::nothrow_t&) throw() {\n+    return (void*)AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n+  }\n+\n+  void operator delete(void* p)     { FreeHeap(p); }\n+  void operator delete [] (void* p) { FreeHeap(p); }\n+};\n+\n+\/\/ Uses the implicitly static new and delete operators of CHeapObjBase\n+template<MEMFLAGS F>\n+class CHeapObj {\n@@ -180,1 +234,1 @@\n-    return (void*)AllocateHeap(size, F);\n+    return CHeapObjBase::operator new(size, F);\n@@ -185,1 +239,1 @@\n-    return (void*)AllocateHeap(size, F, stack);\n+    return CHeapObjBase::operator new(size, F, stack);\n@@ -188,1 +242,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&,\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt,\n@@ -190,1 +244,1 @@\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n+    return CHeapObjBase::operator new(size, F, nt, stack);\n@@ -193,2 +247,2 @@\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt) throw() {\n+    return CHeapObjBase::operator new(size, F, nt);\n@@ -198,1 +252,1 @@\n-    return (void*)AllocateHeap(size, F);\n+    return CHeapObjBase::operator new[](size, F);\n@@ -202,2 +256,2 @@\n-                                  const NativeCallStack& stack) throw() {\n-    return (void*)AllocateHeap(size, F, stack);\n+                                    const NativeCallStack& stack) throw() {\n+    return CHeapObjBase::operator new[](size, F, stack);\n@@ -206,1 +260,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&,\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt,\n@@ -208,1 +262,5 @@\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n+    return CHeapObjBase::operator new[](size, F, nt, stack);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt) throw() {\n+    return CHeapObjBase::operator new[](size, F, nt);\n@@ -211,2 +269,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n+  void operator delete(void* p)     {\n+    CHeapObjBase::operator delete(p);\n@@ -215,2 +273,3 @@\n-  void  operator delete(void* p)     { FreeHeap(p); }\n-  void  operator delete [] (void* p) { FreeHeap(p); }\n+  void operator delete [] (void* p) {\n+    CHeapObjBase::operator delete[](p);\n+  }\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":75,"deletions":16,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -638,1 +639,1 @@\n-                  _print_inlining_stream(new stringStream()),\n+                  _print_inlining_stream(new (mtCompiler) stringStream()),\n@@ -911,1 +912,1 @@\n-    _print_inlining_stream(new stringStream()),\n+    _print_inlining_stream(new (mtCompiler) stringStream()),\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1061,0 +1061,4 @@\n+  ~Compile() {\n+    delete _print_inlining_stream;\n+  };\n+\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  _xml = new (ResourceObj::C_HEAP, mtCompiler) xmlStream(_output);\n+  _xml = new (mtCompiler) xmlStream(_output);\n@@ -854,1 +854,1 @@\n-    _output = new (ResourceObj::C_HEAP, mtCompiler) fileStream(st.as_string(), \"w\");\n+    _output = new (mtCompiler) fileStream(st.as_string(), \"w\");\n@@ -856,1 +856,1 @@\n-    _output = new (ResourceObj::C_HEAP, mtCompiler) fileStream(file_name, append ? \"a\" : \"w\");\n+    _output = new (mtCompiler) fileStream(file_name, append ? \"a\" : \"w\");\n@@ -865,1 +865,1 @@\n-  _network_stream = new (ResourceObj::C_HEAP, mtCompiler) networkStream();\n+  _network_stream = new (mtCompiler) networkStream();\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -861,1 +862,1 @@\n-    predString = new stringStream();\n+    predString = new (mtCompiler) stringStream();\n@@ -986,1 +987,1 @@\n-    predString->~stringStream();\n+    delete predString;\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-    fs = new (ResourceObj::C_HEAP, mtInternal) fileStream(path);\n+    fs = new (mtInternal) fileStream(path);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-  fileStream* file = new(ResourceObj::C_HEAP, mtInternal) fileStream(try_name);\n+  fileStream* file = new (mtInternal) fileStream(try_name);\n@@ -692,1 +692,1 @@\n-  file = new(ResourceObj::C_HEAP, mtInternal) fileStream(try_name);\n+  file = new (mtInternal) fileStream(try_name);\n@@ -709,1 +709,1 @@\n-    _outer_xmlStream = new(ResourceObj::C_HEAP, mtInternal) xmlStream(file);\n+    _outer_xmlStream = new(mtInternal) xmlStream(file);\n@@ -951,1 +951,1 @@\n-    defaultStream::instance = new(ResourceObj::C_HEAP, mtInternal) defaultStream();\n+    defaultStream::instance = new(mtInternal) defaultStream();\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class outputStream : public ResourceObj {\n+class outputStream : public CHeapObjBase {\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}