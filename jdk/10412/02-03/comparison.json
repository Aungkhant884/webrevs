{"files":[{"patch":"@@ -52,1 +52,0 @@\n-  assert(flags != mtInvalid, \"Illegal memory flag used\");\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -133,1 +133,0 @@\n-  f(mtInvalid,        \"Invalid memory type\")                                         \\\n@@ -178,2 +177,1 @@\n-template<MEMFLAGS F = mtInvalid>\n-class CHeapObj {\n+class CHeapObjImpl : public AllStatic {\n@@ -181,1 +179,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f = F) throw() {\n+   static ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n@@ -185,2 +183,2 @@\n-  ALWAYSINLINE void* operator new(size_t size,\n-                                  const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new(size_t size,\n+                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n@@ -190,2 +188,2 @@\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&,\n-                                  const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&,\n+                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n@@ -195,1 +193,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&, MEMFLAGS f) throw() {\n@@ -199,1 +197,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n@@ -203,2 +201,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size,\n-                                    const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new[](size_t size,\n+                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n@@ -208,2 +206,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&,\n-                                    const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&,\n+                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n@@ -213,1 +211,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&, MEMFLAGS f = F) throw() {\n+  static ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&, MEMFLAGS f) throw() {\n@@ -217,2 +215,89 @@\n-  void  operator delete(void* p)     { FreeHeap(p); }\n-  void  operator delete [] (void* p) { FreeHeap(p); }\n+  static void  operator delete(void* p)     { FreeHeap(p); }\n+  static void  operator delete [] (void* p) { FreeHeap(p); }\n+};\n+\n+template<MEMFLAGS F>\n+class CHeapObj {\n+ public:\n+  ALWAYSINLINE void* operator new(size_t size) throw() {\n+    return CHeapObjImpl::operator new(size, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  const NativeCallStack& stack) throw() {\n+    return CHeapObjImpl::operator new(size, stack, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt,\n+                                  const NativeCallStack& stack) throw() {\n+    return CHeapObjImpl::operator new(size, nt, stack, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt) throw() {\n+    return CHeapObjImpl::operator new(size, nt, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size) throw() {\n+    return CHeapObjImpl::operator new[](size, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    const NativeCallStack& stack) throw() {\n+    return CHeapObjImpl::operator new[](size, stack, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt,\n+                                    const NativeCallStack& stack) throw() {\n+    return CHeapObjImpl::operator new[](size, nt, stack, F);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt) throw() {\n+    return CHeapObjImpl::operator new[](size, nt, F);\n+  }\n+\n+  void  operator delete(void* p)     { CHeapObjImpl::operator delete(p); }\n+  void  operator delete [] (void* p) { CHeapObjImpl::operator delete[](p); }\n+\n+};\n+\n+class CHeapObjDyn {\n+ public:\n+  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new(size, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size,\n+                                  const NativeCallStack& stack, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new(size, stack, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt,\n+                                  const NativeCallStack& stack\n+                                  , MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new(size, nt, stack, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t& nt, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new(size, nt, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new[](size, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size,\n+                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new[](size, stack, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt,\n+                                    const NativeCallStack& stack, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new[](size, nt, stack, f);\n+  }\n+\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t& nt, MEMFLAGS f) throw() {\n+    return CHeapObjImpl::operator new[](size, nt, f);\n+  }\n+\n+  void  operator delete(void* p)     { CHeapObjImpl::operator delete(p); }\n+  void  operator delete [] (void* p) { CHeapObjImpl::operator delete[](p); }\n@@ -221,0 +306,1 @@\n+\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":103,"deletions":17,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class outputStream : public CHeapObj<mtInternal> {\n+class outputStream : public CHeapObjDyn {\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}