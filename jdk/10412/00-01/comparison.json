{"files":[{"patch":"@@ -177,1 +177,2 @@\n-template <MEMFLAGS F> class CHeapObj {\n+template<MEMFLAGS F>\n+class CHeapObj {\n@@ -179,2 +180,2 @@\n-  ALWAYSINLINE void* operator new(size_t size) throw() {\n-    return (void*)AllocateHeap(size, F);\n+  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f);\n@@ -184,2 +185,2 @@\n-                                  const NativeCallStack& stack) throw() {\n-    return (void*)AllocateHeap(size, F, stack);\n+                                  const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, stack);\n@@ -189,2 +190,2 @@\n-                                  const NativeCallStack& stack) throw() {\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n+                                  const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n@@ -193,2 +194,2 @@\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n+  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n@@ -197,2 +198,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size) throw() {\n-    return (void*)AllocateHeap(size, F);\n+  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f);\n@@ -202,2 +203,2 @@\n-                                  const NativeCallStack& stack) throw() {\n-    return (void*)AllocateHeap(size, F, stack);\n+                                    const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, stack);\n@@ -207,2 +208,2 @@\n-                                    const NativeCallStack& stack) throw() {\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n+                                    const NativeCallStack& stack, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n@@ -211,44 +212,2 @@\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n-  }\n-\n-  void  operator delete(void* p)     { FreeHeap(p); }\n-  void  operator delete [] (void* p) { FreeHeap(p); }\n-};\n-\n-class DynCHeapObj {\n- public:\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size,\n-                                  const NativeCallStack& stack, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, stack);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&,\n-                                  const NativeCallStack& stack, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n-  }\n-\n-  ALWAYSINLINE void* operator new(size_t size, const std::nothrow_t&, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n-  }\n-\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F);\n-  }\n-\n-  ALWAYSINLINE void* operator new[](size_t size,\n-                                    const NativeCallStack& stack, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, stack);\n-  }\n-\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&,\n-                                    const NativeCallStack& stack, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, stack, AllocFailStrategy::RETURN_NULL);\n-  }\n-\n-  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&, MEMFLAGS F) throw() {\n-    return (void*)AllocateHeap(size, F, AllocFailStrategy::RETURN_NULL);\n+  ALWAYSINLINE void* operator new[](size_t size, const std::nothrow_t&, MEMFLAGS f = F) throw() {\n+    return (void*)AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":18,"deletions":59,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class outputStream : public DynCHeapObj {\n+class outputStream : public CHeapObj<mtInternal> {\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}