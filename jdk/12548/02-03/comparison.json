{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 2\n+};\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Defs_aarch64.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 2\n+};\n+\n","filename":"src\/hotspot\/cpu\/arm\/c1_Defs_arm.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 2\n+};\n+\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Defs_ppc.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 2\n+};\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Defs_riscv.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 2\n+};\n+\n","filename":"src\/hotspot\/cpu\/s390\/c1_Defs_s390.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  pd_arraycopystub_reserved_argument_area_size = 5\n+};\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_Defs_x86.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -563,5 +563,1 @@\n-#if defined(X86)\n-    f->update_reserved_argument_area_size(5 * BytesPerWord);\n-#else\n-    f->update_reserved_argument_area_size(2 * BytesPerWord);\n-#endif\n+    f->update_reserved_argument_area_size(arraycopystub_reserved_argument_area_size * BytesPerWord);\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,5 @@\n+\/\/ the number of stack required by ArrayCopyStub\n+enum {\n+  arraycopystub_reserved_argument_area_size = pd_arraycopystub_reserved_argument_area_size\n+};\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Defs.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -165,0 +165,4 @@\n+\n+  \/\/ reserved_argument_area_size does not include stack space that needs to be occupied in the stub\n+  \/\/ and the stub will modify the value through update_reserved_argument_area_size(int size) if needed.\n+  \/\/ see the constructor of class CounterOverflowStub for example.\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}