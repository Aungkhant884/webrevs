{"files":[{"patch":"@@ -66,12 +66,0 @@\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -211,8 +199,0 @@\n-\/\/ Implementation of MonitorAccessStubs\n-\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-: MonitorAccessStub(obj_reg, lock_reg)\n-{\n-  _info = new CodeEmitInfo(info);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2189,1 +2189,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -2197,1 +2197,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -2207,1 +2207,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,16 +56,0 @@\n-\n-\/\/ TODO: ARM - is it possible to inline these stubs into the main code stream?\n-\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -195,10 +179,0 @@\n-\n-\/\/ Implementation of MonitorAccessStubs\n-\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-: MonitorAccessStub(obj_reg, lock_reg)\n-{\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -67,12 +67,0 @@\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -285,7 +273,0 @@\n-\n-\/\/ Implementation of MonitorAccessStubs\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-  : MonitorAccessStub(obj_reg, lock_reg) {\n-  _info = new CodeEmitInfo(info);\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -71,12 +71,0 @@\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -208,6 +196,0 @@\n-\/\/ Implementation of MonitorAccessStubs\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-: MonitorAccessStub(obj_reg, lock_reg) {\n-  _info = new CodeEmitInfo(info);\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2244,1 +2244,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -2251,1 +2251,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,12 +48,0 @@\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -230,5 +218,0 @@\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-  : MonitorAccessStub(obj_reg, lock_reg) {\n-  _info = new CodeEmitInfo(info);\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -119,12 +119,0 @@\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n-  : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-RangeCheckStub::RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n-  : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n-  assert(info != NULL, \"must have info\");\n-  _info = new CodeEmitInfo(info);\n-}\n-\n@@ -257,10 +245,0 @@\n-\n-\/\/ Implementation of MonitorAccessStubs\n-\n-MonitorEnterStub::MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n-: MonitorAccessStub(obj_reg, lock_reg)\n-{\n-  _info = new CodeEmitInfo(info);\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -3028,1 +3028,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -3036,1 +3036,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -3044,1 +3044,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n@@ -3052,1 +3052,1 @@\n-  assert(offset_from_rsp_in_bytes <= frame_map()->reserved_argument_area_size(), \"invalid offset\");\n+  assert(offset_from_rsp_in_bytes < frame_map()->reserved_argument_area_size(), \"invalid offset\");\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,0 +113,2 @@\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n@@ -169,1 +171,7 @@\n-  RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array);\n+  RangeCheckStub(CodeEmitInfo* info, LIR_Opr index, LIR_Opr array)\n+    : _index(index), _array(array), _throw_index_out_of_bounds_exception(false) {\n+    assert(info != NULL, \"must have info\");\n+    _info = new CodeEmitInfo(info);\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+  }\n@@ -171,1 +179,7 @@\n-  RangeCheckStub(CodeEmitInfo* info, LIR_Opr index);\n+  RangeCheckStub(CodeEmitInfo* info, LIR_Opr index)\n+    : _index(index), _array(), _throw_index_out_of_bounds_exception(true) {\n+    assert(info != NULL, \"must have info\");\n+    _info = new CodeEmitInfo(info);\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+  }\n@@ -338,1 +352,6 @@\n-  MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info);\n+  MonitorEnterStub(LIR_Opr obj_reg, LIR_Opr lock_reg, CodeEmitInfo* info)\n+    : MonitorAccessStub(obj_reg, lock_reg) {\n+    _info = new CodeEmitInfo(info);\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+  }\n@@ -479,1 +498,4 @@\n-    _info(new CodeEmitInfo(info)), _trap_request(Deoptimization::make_trap_request(reason, action)) {}\n+    _info(new CodeEmitInfo(info)), _trap_request(Deoptimization::make_trap_request(reason, action)) {\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+  }\n@@ -502,0 +524,2 @@\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n@@ -537,1 +561,8 @@\n-  ArrayCopyStub(LIR_OpArrayCopy* op): _op(op) { }\n+  ArrayCopyStub(LIR_OpArrayCopy* op): _op(op) {\n+    FrameMap* f = Compilation::current()->frame_map();\n+#if defined(X86)\n+    f->update_reserved_argument_area_size(5 * BytesPerWord);\n+#else\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+#endif\n+  }\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -80,0 +80,5 @@\n+  void update_reserved_argument_area_size (int size) {\n+    assert(size >= 0, \"check\");\n+    _reserved_argument_area_size = MAX2(_reserved_argument_area_size, size);\n+  }\n+\n@@ -125,5 +130,0 @@\n-  void update_reserved_argument_area_size (int size) {\n-    assert(size >= 0, \"check\");\n-    _reserved_argument_area_size = MAX2(_reserved_argument_area_size, size);\n-  }\n-\n@@ -136,1 +136,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"c1\/c1_Compilation.hpp\"\n@@ -50,0 +51,2 @@\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n@@ -59,0 +62,2 @@\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n@@ -97,1 +102,4 @@\n-  G1PostBarrierStub(LIR_Opr addr, LIR_Opr new_val): _addr(addr), _new_val(new_val) { }\n+  G1PostBarrierStub(LIR_Opr addr, LIR_Opr new_val): _addr(addr), _new_val(new_val) {\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n@@ -107,0 +109,3 @@\n+\n+    FrameMap* f = Compilation::current()->frame_map();\n+    f->update_reserved_argument_area_size(2 * BytesPerWord);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,3 @@\n+\n+  FrameMap* f = Compilation::current()->frame_map();\n+  f->update_reserved_argument_area_size(2 * BytesPerWord);\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}