{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1FromCardCache.hpp\"\n@@ -31,0 +30,2 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n+#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n@@ -34,1 +35,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,6 +38,0 @@\n-#include \"utilities\/lockFreeStack.hpp\"\n-#include \"utilities\/spinYield.hpp\"\n-\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n-#include \"gc\/shared\/gcTraceTime.inline.hpp\"\n-#include \"runtime\/java.hpp\"\n@@ -45,1 +39,1 @@\n-G1CardSet::CardSetPtr G1CardSet::FullCardSet = (G1CardSet::CardSetPtr)-1;\n+G1CardSet::ContainerPtr G1CardSet::FullCardSet = (G1CardSet::ContainerPtr)-1;\n@@ -47,1 +41,1 @@\n-static uint default_log2_card_region_per_region() {\n+static uint default_log2_card_regions_per_region() {\n@@ -65,1 +59,1 @@\n-                         default_log2_card_region_per_region())                     \/* log2_card_region_per_region *\/\n+                         default_log2_card_regions_per_region())                    \/* log2_card_regions_per_region *\/\n@@ -76,1 +70,1 @@\n-                                               uint log2_card_region_per_region) :\n+                                               uint log2_card_regions_per_region) :\n@@ -85,1 +79,1 @@\n-                         log2_card_region_per_region)\n+                         log2_card_regions_per_region)\n@@ -200,1 +194,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -234,1 +228,1 @@\n-    G1CardSet::CardSetPtrClosure* _scan_f;\n+    G1CardSet::ContainerPtrClosure* _scan_f;\n@@ -236,1 +230,1 @@\n-    explicit G1CardSetHashTableScan(G1CardSet::CardSetPtrClosure* f) : _scan_f(f) { }\n+    explicit G1CardSetHashTableScan(G1CardSet::ContainerPtrClosure* f) : _scan_f(f) { }\n@@ -239,1 +233,1 @@\n-      _scan_f->do_cardsetptr(value->_region_idx, value->_num_occupied, value->_card_set);\n+      _scan_f->do_containerptr(value->_region_idx, value->_num_occupied, value->_container);\n@@ -287,1 +281,1 @@\n-  void iterate_safepoint(G1CardSet::CardSetPtrClosure* cl2) {\n+  void iterate_safepoint(G1CardSet::ContainerPtrClosure* cl2) {\n@@ -292,1 +286,1 @@\n-  void iterate(G1CardSet::CardSetPtrClosure* cl2) {\n+  void iterate(G1CardSet::ContainerPtrClosure* cl2) {\n@@ -299,1 +293,1 @@\n-       _table.unsafe_reset(InitialLogTableSize);\n+      _table.unsafe_reset(InitialLogTableSize);\n@@ -346,1 +340,1 @@\n-uint G1CardSet::card_set_type_to_mem_object_type(uintptr_t type) const {\n+uint G1CardSet::container_type_to_mem_object_type(uintptr_t type) const {\n@@ -349,1 +343,1 @@\n-         type == G1CardSet::CardSetHowl, \"should not allocate card set type %zu\", type);\n+         type == G1CardSet::CardSetHowl, \"should not allocate container type %zu\", type);\n@@ -355,1 +349,1 @@\n-  return _mm->allocate(card_set_type_to_mem_object_type(type));\n+  return _mm->allocate(container_type_to_mem_object_type(type));\n@@ -358,3 +352,3 @@\n-void G1CardSet::free_mem_object(CardSetPtr card_set) {\n-  assert(card_set != G1CardSet::FreeCardSet, \"should not free Free card set\");\n-  assert(card_set != G1CardSet::FullCardSet, \"should not free Full card set\");\n+void G1CardSet::free_mem_object(ContainerPtr container) {\n+  assert(container != G1CardSet::FreeCardSet, \"should not free container FreeCardSet\");\n+  assert(container != G1CardSet::FullCardSet, \"should not free container FullCardSet\");\n@@ -362,2 +356,2 @@\n-  uintptr_t type = card_set_type(card_set);\n-  void* value = strip_card_set_type(card_set);\n+  uintptr_t type = container_type(container);\n+  void* value = strip_container_type(container);\n@@ -370,1 +364,1 @@\n-  _mm->free(card_set_type_to_mem_object_type(type), value);\n+  _mm->free(container_type_to_mem_object_type(type), value);\n@@ -373,1 +367,1 @@\n-G1CardSet::CardSetPtr G1CardSet::acquire_card_set(CardSetPtr volatile* card_set_addr) {\n+G1CardSet::ContainerPtr G1CardSet::acquire_container(ContainerPtr volatile* container_addr) {\n@@ -379,5 +373,5 @@\n-    \/\/ Get cardsetptr and increment refcount atomically wrt to memory reuse.\n-    CardSetPtr card_set = Atomic::load_acquire(card_set_addr);\n-    uint cs_type = card_set_type(card_set);\n-    if (card_set == FullCardSet || cs_type == CardSetInlinePtr) {\n-      return card_set;\n+    \/\/ Get ContainerPtr and increment refcount atomically wrt to memory reuse.\n+    ContainerPtr container = Atomic::load_acquire(container_addr);\n+    uint cs_type = container_type(container);\n+    if (container == FullCardSet || cs_type == CardSetInlinePtr) {\n+      return container;\n@@ -386,1 +380,1 @@\n-    G1CardSetContainer* card_set_on_heap = (G1CardSetContainer*)strip_card_set_type(card_set);\n+    G1CardSetContainer* container_on_heap = (G1CardSetContainer*)strip_container_type(container);\n@@ -388,3 +382,3 @@\n-    if (card_set_on_heap->try_increment_refcount()) {\n-      assert(card_set_on_heap->refcount() >= 3, \"Smallest value is 3\");\n-      return card_set;\n+    if (container_on_heap->try_increment_refcount()) {\n+      assert(container_on_heap->refcount() >= 3, \"Smallest value is 3\");\n+      return container;\n@@ -395,3 +389,3 @@\n-bool G1CardSet::release_card_set(CardSetPtr card_set) {\n-  uint cs_type = card_set_type(card_set);\n-  if (card_set == FullCardSet || cs_type == CardSetInlinePtr) {\n+bool G1CardSet::release_container(ContainerPtr container) {\n+  uint cs_type = container_type(container);\n+  if (container == FullCardSet || cs_type == CardSetInlinePtr) {\n@@ -401,2 +395,2 @@\n-  G1CardSetContainer* card_set_on_heap = (G1CardSetContainer*)strip_card_set_type(card_set);\n-  return card_set_on_heap->decrement_refcount() == 1;\n+  G1CardSetContainer* container_on_heap = (G1CardSetContainer*)strip_container_type(container);\n+  return container_on_heap->decrement_refcount() == 1;\n@@ -405,3 +399,3 @@\n-void G1CardSet::release_and_maybe_free_card_set(CardSetPtr card_set) {\n-  if (release_card_set(card_set)) {\n-    free_mem_object(card_set);\n+void G1CardSet::release_and_maybe_free_container(ContainerPtr container) {\n+  if (release_container(container)) {\n+    free_mem_object(container);\n@@ -411,2 +405,2 @@\n-void G1CardSet::release_and_must_free_card_set(CardSetPtr card_set) {\n-  bool should_free = release_card_set(card_set);\n+void G1CardSet::release_and_must_free_container(ContainerPtr container) {\n+  bool should_free = release_container(container);\n@@ -414,1 +408,1 @@\n-  free_mem_object(card_set);\n+  free_mem_object(container);\n@@ -419,1 +413,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -421,1 +415,1 @@\n-  void coarsen_to_full(CardSetPtr* card_set_addr) {\n+  void coarsen_to_full(ContainerPtr* container_addr) {\n@@ -423,3 +417,3 @@\n-      CardSetPtr cur_card_set = Atomic::load_acquire(card_set_addr);\n-      uint cs_type = G1CardSet::card_set_type(cur_card_set);\n-      if (cur_card_set == G1CardSet::FullCardSet) {\n+      ContainerPtr cur_container = Atomic::load_acquire(container_addr);\n+      uint cs_type = G1CardSet::container_type(cur_container);\n+      if (cur_container == G1CardSet::FullCardSet) {\n@@ -429,1 +423,1 @@\n-      CardSetPtr old_value = Atomic::cmpxchg(card_set_addr, cur_card_set, G1CardSet::FullCardSet);\n+      ContainerPtr old_value = Atomic::cmpxchg(container_addr, cur_container, G1CardSet::FullCardSet);\n@@ -431,2 +425,2 @@\n-      if (old_value == cur_card_set) {\n-        _card_set->release_and_maybe_free_card_set(cur_card_set);\n+      if (old_value == cur_container) {\n+        _card_set->release_and_maybe_free_container(cur_container);\n@@ -441,2 +435,2 @@\n-  void operator ()(CardSetPtr* card_set_addr) {\n-    coarsen_to_full(card_set_addr);\n+  void operator ()(ContainerPtr* container_addr) {\n+    coarsen_to_full(container_addr);\n@@ -446,2 +440,2 @@\n-G1AddCardResult G1CardSet::add_to_array(CardSetPtr card_set, uint card_in_region) {\n-  G1CardSetArray* array = card_set_ptr<G1CardSetArray>(card_set);\n+G1AddCardResult G1CardSet::add_to_array(ContainerPtr container, uint card_in_region) {\n+  G1CardSetArray* array = container_ptr<G1CardSetArray>(container);\n@@ -451,5 +445,5 @@\n-G1AddCardResult G1CardSet::add_to_howl(CardSetPtr parent_card_set,\n-                                                uint card_region,\n-                                                uint card_in_region,\n-                                                bool increment_total) {\n-  G1CardSetHowl* howl = card_set_ptr<G1CardSetHowl>(parent_card_set);\n+G1AddCardResult G1CardSet::add_to_howl(ContainerPtr parent_container,\n+                                       uint card_region,\n+                                       uint card_in_region,\n+                                       bool increment_total) {\n+  G1CardSetHowl* howl = container_ptr<G1CardSetHowl>(parent_container);\n@@ -458,2 +452,2 @@\n-  CardSetPtr to_transfer = nullptr;\n-  CardSetPtr card_set;\n+  ContainerPtr to_transfer = nullptr;\n+  ContainerPtr container;\n@@ -462,1 +456,1 @@\n-  volatile CardSetPtr* bucket_entry = howl->get_card_set_addr(bucket);\n+  ContainerPtr volatile* bucket_entry = howl->get_container_addr(bucket);\n@@ -469,2 +463,2 @@\n-    card_set = acquire_card_set(bucket_entry);\n-    add_result = add_to_card_set(bucket_entry, card_set, card_region, card_in_region);\n+    container = acquire_container(bucket_entry);\n+    add_result = add_to_container(bucket_entry, container, card_region, card_in_region);\n@@ -475,3 +469,3 @@\n-    \/\/ Card set has overflown. Coarsen or retry.\n-    bool coarsened = coarsen_card_set(bucket_entry, card_set, card_in_region, true \/* within_howl *\/);\n-    _coarsen_stats.record_coarsening(card_set_type(card_set) + G1CardSetCoarsenStats::CoarsenHowlOffset, !coarsened);\n+    \/\/ Card set container has overflown. Coarsen or retry.\n+    bool coarsened = coarsen_container(bucket_entry, container, card_in_region, true \/* within_howl *\/);\n+    _coarsen_stats.record_coarsening(container_type(container) + G1CardSetCoarsenStats::CoarsenHowlOffset, !coarsened);\n@@ -479,1 +473,1 @@\n-      \/\/ We have been the one coarsening this card set (and in the process added that card).\n+      \/\/ We successful coarsened this card set container (and in the process added the card).\n@@ -481,1 +475,1 @@\n-      to_transfer = card_set;\n+      to_transfer = container;\n@@ -485,1 +479,1 @@\n-    release_and_maybe_free_card_set(card_set);\n+    release_and_maybe_free_container(container);\n@@ -493,1 +487,1 @@\n-    transfer_cards_in_howl(parent_card_set, to_transfer, card_region);\n+    transfer_cards_in_howl(parent_container, to_transfer, card_region);\n@@ -496,1 +490,1 @@\n-  release_and_maybe_free_card_set(card_set);\n+  release_and_maybe_free_container(container);\n@@ -500,2 +494,2 @@\n-G1AddCardResult G1CardSet::add_to_bitmap(CardSetPtr card_set, uint card_in_region) {\n-  G1CardSetBitMap* bitmap = card_set_ptr<G1CardSetBitMap>(card_set);\n+G1AddCardResult G1CardSet::add_to_bitmap(ContainerPtr container, uint card_in_region) {\n+  G1CardSetBitMap* bitmap = container_ptr<G1CardSetBitMap>(container);\n@@ -506,2 +500,2 @@\n-G1AddCardResult G1CardSet::add_to_inline_ptr(CardSetPtr volatile* card_set_addr, CardSetPtr card_set, uint card_in_region) {\n-  G1CardSetInlinePtr value(card_set_addr, card_set);\n+G1AddCardResult G1CardSet::add_to_inline_ptr(ContainerPtr volatile* container_addr, ContainerPtr container, uint card_in_region) {\n+  G1CardSetInlinePtr value(container_addr, container);\n@@ -511,1 +505,1 @@\n-G1CardSet::CardSetPtr G1CardSet::create_coarsened_array_of_cards(uint card_in_region, bool within_howl) {\n+G1CardSet::ContainerPtr G1CardSet::create_coarsened_array_of_cards(uint card_in_region, bool within_howl) {\n@@ -513,1 +507,1 @@\n-  CardSetPtr new_card_set;\n+  ContainerPtr new_container;\n@@ -516,1 +510,1 @@\n-    uint card_offset = _config->howl_bitmap_offset(card_in_region);\n+    uint container_offset = _config->howl_bitmap_offset(card_in_region);\n@@ -518,2 +512,2 @@\n-    new (data) G1CardSetBitMap(card_offset, size_in_bits);\n-    new_card_set = make_card_set_ptr(data, CardSetBitMap);\n+    new (data) G1CardSetBitMap(container_offset, size_in_bits);\n+    new_container = make_container_ptr(data, CardSetBitMap);\n@@ -523,1 +517,1 @@\n-    new_card_set = make_card_set_ptr(data, CardSetHowl);\n+    new_container = make_container_ptr(data, CardSetHowl);\n@@ -525,1 +519,1 @@\n-  return new_card_set;\n+  return new_container;\n@@ -528,5 +522,5 @@\n-bool G1CardSet::coarsen_card_set(volatile CardSetPtr* card_set_addr,\n-                                 CardSetPtr cur_card_set,\n-                                 uint card_in_region,\n-                                 bool within_howl) {\n-  CardSetPtr new_card_set = nullptr;\n+bool G1CardSet::coarsen_container(ContainerPtr volatile* container_addr,\n+                                  ContainerPtr cur_container,\n+                                  uint card_in_region,\n+                                  bool within_howl) {\n+  ContainerPtr new_container = nullptr;\n@@ -534,1 +528,1 @@\n-  switch (card_set_type(cur_card_set)) {\n+  switch (container_type(cur_container)) {\n@@ -536,1 +530,1 @@\n-      new_card_set = create_coarsened_array_of_cards(card_in_region, within_howl);\n+      new_container = create_coarsened_array_of_cards(card_in_region, within_howl);\n@@ -540,1 +534,1 @@\n-      new_card_set = FullCardSet;\n+      new_container = FullCardSet;\n@@ -547,1 +541,1 @@\n-      new_card_set = make_card_set_ptr(data, CardSetArrayOfCards);\n+      new_container = make_container_ptr(data, CardSetArrayOfCards);\n@@ -551,1 +545,1 @@\n-      new_card_set = FullCardSet; \/\/ anything will do at this point.\n+      new_container = FullCardSet; \/\/ anything will do at this point.\n@@ -558,2 +552,2 @@\n-  CardSetPtr old_value = Atomic::cmpxchg(card_set_addr, cur_card_set, new_card_set); \/\/ Memory order?\n-  if (old_value == cur_card_set) {\n+  ContainerPtr old_value = Atomic::cmpxchg(container_addr, cur_container, new_container); \/\/ Memory order?\n+  if (old_value == cur_container) {\n@@ -565,1 +559,1 @@\n-    bool should_free = release_card_set(cur_card_set);\n+    bool should_free = release_container(cur_container);\n@@ -567,2 +561,2 @@\n-    \/\/ Free containers if cur_card_set is CardSetHowl\n-    if (card_set_type(cur_card_set) == CardSetHowl) {\n+    \/\/ Free containers if cur_container is CardSetHowl\n+    if (container_type(cur_container) == CardSetHowl) {\n@@ -570,1 +564,1 @@\n-      card_set_ptr<G1CardSetHowl>(cur_card_set)->iterate(rel, _config->num_buckets_in_howl());\n+      container_ptr<G1CardSetHowl>(cur_container)->iterate(rel, _config->num_buckets_in_howl());\n@@ -575,3 +569,3 @@\n-    if (new_card_set != FullCardSet) {\n-      assert(new_card_set != nullptr, \"must not be\");\n-      release_and_must_free_card_set(new_card_set);\n+    if (new_container != FullCardSet) {\n+      assert(new_container != nullptr, \"must not be\");\n+      release_and_must_free_container(new_container);\n@@ -594,3 +588,3 @@\n-void G1CardSet::transfer_cards(G1CardSetHashTableValue* table_entry, CardSetPtr source_card_set, uint card_region) {\n-  assert(source_card_set != FullCardSet, \"Should not need to transfer from full\");\n-  \/\/ Need to transfer old entries unless there is a Full card set in place now, i.e.\n+void G1CardSet::transfer_cards(G1CardSetHashTableValue* table_entry, ContainerPtr source_container, uint card_region) {\n+  assert(source_container != FullCardSet, \"Should not need to transfer from FullCardSet\");\n+  \/\/ Need to transfer old entries unless there is a Full card set container in place now, i.e.\n@@ -598,1 +592,1 @@\n-  if (card_set_type(source_card_set) != CardSetHowl) {\n+  if (container_type(source_container) != CardSetHowl) {\n@@ -600,1 +594,1 @@\n-    iterate_cards_during_transfer(source_card_set, iter);\n+    iterate_cards_during_transfer(source_container, iter);\n@@ -602,1 +596,1 @@\n-    assert(card_set_type(source_card_set) == CardSetHowl, \"must be\");\n+    assert(container_type(source_container) == CardSetHowl, \"must be\");\n@@ -609,5 +603,5 @@\n-void G1CardSet::transfer_cards_in_howl(CardSetPtr parent_card_set,\n-                                                     CardSetPtr source_card_set,\n-                                                     uint card_region) {\n-  assert(card_set_type(parent_card_set) == CardSetHowl, \"must be\");\n-  assert(source_card_set != FullCardSet, \"Should not need to transfer from full\");\n+void G1CardSet::transfer_cards_in_howl(ContainerPtr parent_container,\n+                                       ContainerPtr source_container,\n+                                       uint card_region) {\n+  assert(container_type(parent_container) == CardSetHowl, \"must be\");\n+  assert(source_container != FullCardSet, \"Should not need to transfer from full\");\n@@ -616,1 +610,1 @@\n-  if (card_set_type(source_card_set) != CardSetBitMap) {\n+  if (container_type(source_container) != CardSetBitMap) {\n@@ -619,1 +613,1 @@\n-    iterate_cards_during_transfer(source_card_set, iter);\n+    iterate_cards_during_transfer(source_container, iter);\n@@ -621,1 +615,1 @@\n-    uint diff = _config->max_cards_in_howl_bitmap() - card_set_ptr<G1CardSetBitMap>(source_card_set)->num_bits_set();\n+    uint diff = _config->max_cards_in_howl_bitmap() - container_ptr<G1CardSetBitMap>(source_container)->num_bits_set();\n@@ -630,1 +624,1 @@\n-    G1CardSetHowl* howling_array = card_set_ptr<G1CardSetHowl>(parent_card_set);\n+    G1CardSetHowl* howling_array = container_ptr<G1CardSetHowl>(parent_container);\n@@ -633,1 +627,1 @@\n-    G1CardSetHashTableValue* table_entry = get_card_set(card_region);\n+    G1CardSetHashTableValue* table_entry = get_container(card_region);\n@@ -642,2 +636,6 @@\n-G1AddCardResult G1CardSet::add_to_card_set(volatile CardSetPtr* card_set_addr, CardSetPtr card_set,  uint card_region, uint card_in_region, bool increment_total) {\n-  assert(card_set_addr != nullptr, \"Cannot add to empty cardset\");\n+G1AddCardResult G1CardSet::add_to_container(ContainerPtr volatile* container_addr,\n+                                            ContainerPtr container,\n+                                            uint card_region,\n+                                            uint card_in_region,\n+                                            bool increment_total) {\n+  assert(container_addr != nullptr, \"must be\");\n@@ -647,1 +645,1 @@\n-  switch (card_set_type(card_set)) {\n+  switch (container_type(container)) {\n@@ -649,1 +647,1 @@\n-      add_result = add_to_inline_ptr(card_set_addr, card_set, card_in_region);\n+      add_result = add_to_inline_ptr(container_addr, container, card_in_region);\n@@ -653,1 +651,1 @@\n-      add_result = add_to_array(card_set, card_in_region);\n+      add_result = add_to_array(container, card_in_region);\n@@ -657,1 +655,1 @@\n-      add_result = add_to_bitmap(card_set, card_in_region);\n+      add_result = add_to_bitmap(container, card_in_region);\n@@ -661,2 +659,2 @@\n-      assert(CardSetHowl == card_set_type(FullCardSet), \"must be\");\n-      if (card_set == FullCardSet) {\n+      assert(CardSetHowl == container_type(FullCardSet), \"must be\");\n+      if (container == FullCardSet) {\n@@ -665,1 +663,1 @@\n-      add_result = add_to_howl(card_set, card_region, card_in_region, increment_total);\n+      add_result = add_to_howl(container, card_region, card_in_region, increment_total);\n@@ -671,1 +669,0 @@\n-\n@@ -675,1 +672,1 @@\n-G1CardSetHashTableValue* G1CardSet::get_or_add_card_set(uint card_region, bool* should_grow_table) {\n+G1CardSetHashTableValue* G1CardSet::get_or_add_container(uint card_region, bool* should_grow_table) {\n@@ -679,1 +676,1 @@\n-G1CardSetHashTableValue* G1CardSet::get_card_set(uint card_region) {\n+G1CardSetHashTableValue* G1CardSet::get_container(uint card_region) {\n@@ -685,2 +682,2 @@\n-  CardSetPtr to_transfer = nullptr;\n-  CardSetPtr card_set;\n+  ContainerPtr to_transfer = nullptr;\n+  ContainerPtr container;\n@@ -689,1 +686,1 @@\n-  G1CardSetHashTableValue* table_entry = get_or_add_card_set(card_region, &should_grow_table);\n+  G1CardSetHashTableValue* table_entry = get_or_add_container(card_region, &should_grow_table);\n@@ -691,2 +688,2 @@\n-    card_set = acquire_card_set(&table_entry->_card_set);\n-    add_result = add_to_card_set(&table_entry->_card_set, card_set, card_region, card_in_region, increment_total);\n+    container = acquire_container(&table_entry->_container);\n+    add_result = add_to_container(&table_entry->_container, container, card_region, card_in_region, increment_total);\n@@ -698,2 +695,2 @@\n-    bool coarsened = coarsen_card_set(&table_entry->_card_set, card_set, card_in_region);\n-    _coarsen_stats.record_coarsening(card_set_type(card_set), !coarsened);\n+    bool coarsened = coarsen_container(&table_entry->_container, container, card_in_region);\n+    _coarsen_stats.record_coarsening(container_type(container), !coarsened);\n@@ -701,1 +698,1 @@\n-      \/\/ We have been the one coarsening this card set (and in the process added that card).\n+      \/\/ We successful coarsened this card set container (and in the process added the card).\n@@ -703,1 +700,1 @@\n-      to_transfer = card_set;\n+      to_transfer = container;\n@@ -707,1 +704,1 @@\n-    release_and_maybe_free_card_set(card_set);\n+    release_and_maybe_free_container(container);\n@@ -721,1 +718,1 @@\n-  release_and_maybe_free_card_set(card_set);\n+  release_and_maybe_free_container(container);\n@@ -730,1 +727,1 @@\n-  \/\/ Protect the card set from reclamation.\n+  \/\/ Protect the card set container from reclamation.\n@@ -732,1 +729,1 @@\n-  G1CardSetHashTableValue* table_entry = get_card_set(card_region);\n+  G1CardSetHashTableValue* table_entry = get_container(card_region);\n@@ -737,2 +734,2 @@\n-  CardSetPtr card_set = table_entry->_card_set;\n-  if (card_set == FullCardSet) {\n+  ContainerPtr container = table_entry->_container;\n+  if (container == FullCardSet) {\n@@ -744,1 +741,1 @@\n-  switch (card_set_type(card_set)) {\n+  switch (container_type(container)) {\n@@ -746,1 +743,1 @@\n-      G1CardSetInlinePtr ptr(card_set);\n+      G1CardSetInlinePtr ptr(container);\n@@ -749,2 +746,2 @@\n-    case CardSetArrayOfCards :  return card_set_ptr<G1CardSetArray>(card_set)->contains(card_in_region);\n-    case CardSetBitMap: return card_set_ptr<G1CardSetBitMap>(card_set)->contains(card_in_region, _config->max_cards_in_howl_bitmap());\n+    case CardSetArrayOfCards : return container_ptr<G1CardSetArray>(container)->contains(card_in_region);\n+    case CardSetBitMap: return container_ptr<G1CardSetBitMap>(container)->contains(card_in_region, _config->max_cards_in_howl_bitmap());\n@@ -752,1 +749,1 @@\n-      G1CardSetHowl* howling_array = card_set_ptr<G1CardSetHowl>(card_set);\n+      G1CardSetHowl* howling_array = container_ptr<G1CardSetHowl>(container);\n@@ -762,1 +759,1 @@\n-  G1CardSetHashTableValue* table_entry = get_card_set(card_region);\n+  G1CardSetHashTableValue* table_entry = get_container(card_region);\n@@ -768,2 +765,2 @@\n-  CardSetPtr card_set = table_entry->_card_set;\n-  if (card_set == FullCardSet) {\n+  ContainerPtr container = table_entry->_container;\n+  if (container == FullCardSet) {\n@@ -773,1 +770,1 @@\n-  switch (card_set_type(card_set)) {\n+  switch (container_type(container)) {\n@@ -778,1 +775,1 @@\n-    case CardSetArrayOfCards :  {\n+    case CardSetArrayOfCards : {\n@@ -790,1 +787,1 @@\n-    default: st->print(\"Unknown card set type %u\", card_set_type(card_set)); ShouldNotReachHere(); break;\n+    default: st->print(\"Unknown card set container type %u\", container_type(container)); ShouldNotReachHere(); break;\n@@ -795,2 +792,2 @@\n-void G1CardSet::iterate_cards_during_transfer(CardSetPtr const card_set, CardVisitor& cl) {\n-  uint type = card_set_type(card_set);\n+void G1CardSet::iterate_cards_during_transfer(ContainerPtr const container, CardVisitor& cl) {\n+  uint type = container_type(container);\n@@ -799,1 +796,1 @@\n-         card_set_type(card_set));\n+         container_type(container));\n@@ -803,1 +800,1 @@\n-      G1CardSetInlinePtr ptr(card_set);\n+      G1CardSetInlinePtr ptr(container);\n@@ -808,1 +805,1 @@\n-      card_set_ptr<G1CardSetArray>(card_set)->iterate(cl);\n+      container_ptr<G1CardSetArray>(container)->iterate(cl);\n@@ -816,1 +813,1 @@\n-void G1CardSet::iterate_containers(CardSetPtrClosure* cl, bool at_safepoint) {\n+void G1CardSet::iterate_containers(ContainerPtrClosure* cl, bool at_safepoint) {\n@@ -847,1 +844,1 @@\n-class G1CardSetContainersClosure : public G1CardSet::CardSetPtrClosure {\n+class G1CardSetContainersClosure : public G1CardSet::ContainerPtrClosure {\n@@ -858,1 +855,1 @@\n-  void do_cardsetptr(uint region_idx, size_t num_occupied, G1CardSet::CardSetPtr card_set) override {\n+  void do_containerptr(uint region_idx, size_t num_occupied, G1CardSet::ContainerPtr container) override {\n@@ -860,1 +857,1 @@\n-    _card_set->iterate_cards_or_ranges_in_container(card_set, cl);\n+    _card_set->iterate_cards_or_ranges_in_container(container, cl);\n@@ -882,1 +879,1 @@\n-  class GetNumberOfContainers : public CardSetPtrClosure {\n+  class GetNumberOfContainers : public ContainerPtrClosure {\n@@ -886,1 +883,1 @@\n-    GetNumberOfContainers() : CardSetPtrClosure(), _count(0) { }\n+    GetNumberOfContainers() : ContainerPtrClosure(), _count(0) { }\n@@ -888,1 +885,1 @@\n-    void do_cardsetptr(uint region_idx, size_t num_occupied, CardSetPtr card_set) override {\n+    void do_containerptr(uint region_idx, size_t num_occupied, ContainerPtr container) override {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":173,"deletions":176,"binary":false,"changes":349,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-#include \"memory\/padded.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n@@ -32,1 +30,0 @@\n-#include \"utilities\/lockFreeStack.hpp\"\n@@ -150,2 +147,2 @@\n-  \/\/ cardset of the coarsening, this is the total number of combinations of\n-  \/\/ card sets - 1.\n+  \/\/ container of the coarsening, this is the total number of combinations of\n+  \/\/ card set containers - 1.\n@@ -153,1 +150,1 @@\n-  \/\/ Coarsening statistics for the possible CardSetPtr in the Howl card set\n+  \/\/ Coarsening statistics for the possible ContainerPtr in the Howl card set\n@@ -176,1 +173,1 @@\n-\/\/ Sparse set of card indexes comprising a remembered set on the Java heap. Card\n+\/\/ Set of card indexes comprising a remembered set on the Java heap. Card\n@@ -183,1 +180,1 @@\n-\/\/ node as CardSetPtr. A CardSetPtr may cover the whole region or just a part of\n+\/\/ node as ContainerPtr. A ContainerPtr may cover the whole region or just a part of\n@@ -197,2 +194,2 @@\n-  \/\/ Two lower bits are used to encode the card storage types\n-  static const uintptr_t CardSetPtrHeaderSize = 2;\n+  \/\/ Two lower bits are used to encode the card set container types\n+  static const uintptr_t ContainerPtrHeaderSize = 2;\n@@ -200,2 +197,2 @@\n-  \/\/ CardSetPtr represents the card storage type of a given covered area. It encodes\n-  \/\/ a type in the LSBs, in addition to having a few significant values.\n+  \/\/ ContainerPtr represents the card set container  type of a given covered area.\n+  \/\/ It encodes a type in the LSBs, in addition to having a few significant values.\n@@ -206,2 +203,2 @@\n-  \/\/ 1...11111 full               All card indexes in the whole area this CardSetPtr covers are part of this container.\n-  \/\/ X...XXX00 inline-ptr-cards   A handful of card indexes covered by this CardSetPtr are encoded within the CardSetPtr.\n+  \/\/ 1...11111 full               All card indexes in the whole area this ContainerPtr covers are part of this container.\n+  \/\/ X...XXX00 inline-ptr-cards   A handful of card indexes covered by this ContainerPtr are encoded within the ContainerPtr.\n@@ -210,1 +207,1 @@\n-  \/\/ X...XXX11 howl               This is a card set container containing an array of CardSetPtr, with each CardSetPtr\n+  \/\/ X...XXX11 howl               This is a card set container containing an array of ContainerPtr, with each ContainerPtr\n@@ -213,1 +210,1 @@\n-  typedef void* CardSetPtr;\n+  using ContainerPtr = void*;\n@@ -224,2 +221,2 @@\n-  static constexpr CardSetPtr FreeCardSet = nullptr;\n-  \/\/ Unfortunately we can't make (G1CardSet::CardSetPtr)-1 constexpr because\n+  static constexpr ContainerPtr FreeCardSet = nullptr;\n+  \/\/ Unfortunately we can't make (G1CardSet::ContainerPtr)-1 constexpr because\n@@ -227,1 +224,1 @@\n-  static CardSetPtr FullCardSet;\n+  static ContainerPtr FullCardSet;\n@@ -229,1 +226,1 @@\n-  static const uintptr_t CardSetPtrTypeMask    = ((uintptr_t)1 << CardSetPtrHeaderSize) - 1;\n+  static const uintptr_t ContainerPtrTypeMask = ((uintptr_t)1 << ContainerPtrHeaderSize) - 1;\n@@ -231,1 +228,1 @@\n-  static CardSetPtr strip_card_set_type(CardSetPtr ptr) { return (CardSetPtr)((uintptr_t)ptr & ~CardSetPtrTypeMask); }\n+  static ContainerPtr strip_container_type(ContainerPtr ptr) { return (ContainerPtr)((uintptr_t)ptr & ~ContainerPtrTypeMask); }\n@@ -233,1 +230,1 @@\n-  static uint card_set_type(CardSetPtr ptr) { return (uintptr_t)ptr & CardSetPtrTypeMask; }\n+  static uint container_type(ContainerPtr ptr) { return (uintptr_t)ptr & ContainerPtrTypeMask; }\n@@ -236,1 +233,1 @@\n-  static T* card_set_ptr(CardSetPtr ptr);\n+  static T* container_ptr(ContainerPtr ptr);\n@@ -248,1 +245,1 @@\n-  CardSetPtr make_card_set_ptr(void* value, uintptr_t type);\n+  ContainerPtr make_container_ptr(void* value, uintptr_t type);\n@@ -250,3 +247,3 @@\n-  CardSetPtr acquire_card_set(CardSetPtr volatile* card_set_addr);\n-  \/\/ Returns true if the card set should be released\n-  bool release_card_set(CardSetPtr card_set);\n+  ContainerPtr acquire_container(ContainerPtr volatile* container_addr);\n+  \/\/ Returns true if the card set container should be released\n+  bool release_container(ContainerPtr container);\n@@ -254,1 +251,1 @@\n-  void release_and_maybe_free_card_set(CardSetPtr card_set);\n+  void release_and_maybe_free_container(ContainerPtr container);\n@@ -256,1 +253,1 @@\n-  void release_and_must_free_card_set(CardSetPtr card_set);\n+  void release_and_must_free_container(ContainerPtr container);\n@@ -258,8 +255,8 @@\n-  \/\/ Coarsens the CardSet cur_card_set to the next level; tries to replace the\n-  \/\/ previous CardSet with a new one which includes the given card_in_region.\n-  \/\/ coarsen_card_set does not transfer cards from cur_card_set\n-  \/\/ to the new card_set. Transfer is achieved by transfer_cards.\n-  \/\/ Returns true if this was the thread that coarsened the CardSet (and added the card).\n-  bool coarsen_card_set(CardSetPtr volatile* card_set_addr,\n-                        CardSetPtr cur_card_set,\n-                        uint card_in_region, bool within_howl = false);\n+  \/\/ Coarsens the card set container cur_container to the next level; tries to replace the\n+  \/\/ previous ContainerPtr with a new one which includes the given card_in_region.\n+  \/\/ coarsen_container does not transfer cards from cur_container\n+  \/\/ to the new container. Transfer is achieved by transfer_cards.\n+  \/\/ Returns true if this was the thread that coarsened the container (and added the card).\n+  bool coarsen_container(ContainerPtr volatile* container_addr,\n+                         ContainerPtr cur_container,\n+                         uint card_in_region, bool within_howl = false);\n@@ -267,1 +264,1 @@\n-  CardSetPtr create_coarsened_array_of_cards(uint card_in_region, bool within_howl);\n+  ContainerPtr create_coarsened_array_of_cards(uint card_in_region, bool within_howl);\n@@ -272,2 +269,2 @@\n-  void transfer_cards(G1CardSetHashTableValue* table_entry, CardSetPtr source_card_set, uint card_region);\n-  void transfer_cards_in_howl(CardSetPtr parent_card_set, CardSetPtr source_card_set, uint card_region);\n+  void transfer_cards(G1CardSetHashTableValue* table_entry, ContainerPtr source_container, uint card_region);\n+  void transfer_cards_in_howl(ContainerPtr parent_container, ContainerPtr source_container, uint card_region);\n@@ -275,1 +272,1 @@\n-  G1AddCardResult add_to_card_set(CardSetPtr volatile* card_set_addr, CardSetPtr card_set, uint card_region, uint card, bool increment_total = true);\n+  G1AddCardResult add_to_container(ContainerPtr volatile* container_addr, ContainerPtr container, uint card_region, uint card, bool increment_total = true);\n@@ -277,4 +274,4 @@\n-  G1AddCardResult add_to_inline_ptr(CardSetPtr volatile* card_set_addr, CardSetPtr card_set, uint card_in_region);\n-  G1AddCardResult add_to_array(CardSetPtr card_set, uint card_in_region);\n-  G1AddCardResult add_to_bitmap(CardSetPtr card_set, uint card_in_region);\n-  G1AddCardResult add_to_howl(CardSetPtr parent_card_set, uint card_region, uint card_in_region, bool increment_total = true);\n+  G1AddCardResult add_to_inline_ptr(ContainerPtr volatile* container_addr, ContainerPtr container, uint card_in_region);\n+  G1AddCardResult add_to_array(ContainerPtr container, uint card_in_region);\n+  G1AddCardResult add_to_bitmap(ContainerPtr container, uint card_in_region);\n+  G1AddCardResult add_to_howl(ContainerPtr parent_container, uint card_region, uint card_in_region, bool increment_total = true);\n@@ -282,2 +279,2 @@\n-  G1CardSetHashTableValue* get_or_add_card_set(uint card_region, bool* should_grow_table);\n-  G1CardSetHashTableValue* get_card_set(uint card_region);\n+  G1CardSetHashTableValue* get_or_add_container(uint card_region, bool* should_grow_table);\n+  G1CardSetHashTableValue* get_container(uint card_region);\n@@ -292,1 +289,1 @@\n-  void iterate_cards_during_transfer(CardSetPtr const card_set, CardVisitor& vl);\n+  void iterate_cards_during_transfer(ContainerPtr const container, CardVisitor& vl);\n@@ -294,1 +291,1 @@\n-  uint card_set_type_to_mem_object_type(uintptr_t type) const;\n+  uint container_type_to_mem_object_type(uintptr_t type) const;\n@@ -296,1 +293,1 @@\n-  void free_mem_object(CardSetPtr card_set);\n+  void free_mem_object(ContainerPtr container);\n@@ -305,2 +302,2 @@\n-  \/\/ Adds the given card to this set, returning an appropriate result. If added,\n-  \/\/ updates the total count.\n+  \/\/ Adds the given card to this set, returning an appropriate result.\n+  \/\/ If incremental_count is true and the card has been added, updates the total count.\n@@ -354,1 +351,1 @@\n-  void iterate_cards_or_ranges_in_container(CardSetPtr const card_set, CardOrRangeVisitor& cl);\n+  void iterate_cards_or_ranges_in_container(ContainerPtr const container, CardOrRangeVisitor& cl);\n@@ -356,1 +353,1 @@\n-  class CardSetPtrClosure {\n+  class ContainerPtrClosure {\n@@ -358,1 +355,1 @@\n-    virtual void do_cardsetptr(uint region_idx, size_t num_occupied, CardSetPtr card_set) = 0;\n+    virtual void do_containerptr(uint region_idx, size_t num_occupied, ContainerPtr container) = 0;\n@@ -361,1 +358,1 @@\n-  void iterate_containers(CardSetPtrClosure* cl, bool safepoint = false);\n+  void iterate_containers(ContainerPtrClosure* cl, bool safepoint = false);\n@@ -373,1 +370,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -377,1 +374,1 @@\n-  CardSetPtr volatile _card_set;\n+  ContainerPtr volatile _container;\n@@ -379,1 +376,1 @@\n-  G1CardSetHashTableValue(uint region_idx, CardSetPtr card_set) : _region_idx(region_idx), _num_occupied(0), _card_set(card_set) { }\n+  G1CardSetHashTableValue(uint region_idx, ContainerPtr container) : _region_idx(region_idx), _num_occupied(0), _container(container) { }\n@@ -394,1 +391,1 @@\n-typedef ConcurrentHashTable<G1CardSetHashTableConfig, mtGCCardSet> CardSetHash;\n+using CardSetHash = ConcurrentHashTable<G1CardSetHashTableConfig, mtGCCardSet>;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":57,"deletions":60,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -35,2 +34,2 @@\n-inline T* G1CardSet::card_set_ptr(CardSetPtr ptr) {\n-  return (T*)strip_card_set_type(ptr);\n+inline T* G1CardSet::container_ptr(ContainerPtr ptr) {\n+  return (T*)strip_container_type(ptr);\n@@ -39,3 +38,3 @@\n-inline G1CardSet::CardSetPtr G1CardSet::make_card_set_ptr(void* value, uintptr_t type) {\n-  assert(card_set_type(value) == 0, \"Given ptr \" PTR_FORMAT \" already has type bits set\", p2i(value));\n-  return (CardSetPtr)((uintptr_t)value | type);\n+inline G1CardSet::ContainerPtr G1CardSet::make_container_ptr(void* value, uintptr_t type) {\n+  assert(container_type(value) == 0, \"Given ptr \" PTR_FORMAT \" already has type bits set\", p2i(value));\n+  return (ContainerPtr)((uintptr_t)value | type);\n@@ -45,2 +44,2 @@\n-inline void G1CardSet::iterate_cards_or_ranges_in_container(CardSetPtr const card_set, CardOrRangeVisitor& cl) {\n-  switch (card_set_type(card_set)) {\n+inline void G1CardSet::iterate_cards_or_ranges_in_container(ContainerPtr const container, CardOrRangeVisitor& cl) {\n+  switch (container_type(container)) {\n@@ -49,1 +48,1 @@\n-        G1CardSetInlinePtr ptr(card_set);\n+        G1CardSetInlinePtr ptr(container);\n@@ -56,1 +55,1 @@\n-        card_set_ptr<G1CardSetArray>(card_set)->iterate(cl);\n+        container_ptr<G1CardSetArray>(container)->iterate(cl);\n@@ -66,2 +65,2 @@\n-      assert(card_set_type(FullCardSet) == CardSetHowl, \"Must be\");\n-      if (card_set == FullCardSet) {\n+      assert(container_type(FullCardSet) == CardSetHowl, \"Must be\");\n+      if (container == FullCardSet) {\n@@ -74,1 +73,1 @@\n-        card_set_ptr<G1CardSetHowl>(card_set)->iterate(cl, _config);\n+        container_ptr<G1CardSetHowl>(container)->iterate(cl, _config);\n@@ -79,1 +78,1 @@\n-  log_error(gc)(\"Unkown card set type %u\", card_set_type(card_set));\n+  log_error(gc)(\"Unkown card set container type %u\", container_type(container));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.inline.hpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/\/ A helper class to encode a few card indexes within a CardSetPtr.\n+\/\/ A helper class to encode a few card indexes within a ContainerPtr.\n@@ -68,1 +68,1 @@\n-  typedef G1CardSet::CardSetPtr CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -70,2 +70,2 @@\n-  CardSetPtr volatile * _value_addr;\n-  CardSetPtr _value;\n+  ContainerPtr volatile * _value_addr;\n+  ContainerPtr _value;\n@@ -75,1 +75,1 @@\n-  static const uint HeaderSize = G1CardSet::CardSetPtrHeaderSize + SizeFieldLen;\n+  static const uint HeaderSize = G1CardSet::ContainerPtrHeaderSize + SizeFieldLen;\n@@ -77,1 +77,1 @@\n-  static const uint BitsInValue = sizeof(CardSetPtr) * BitsPerByte;\n+  static const uint BitsInValue = sizeof(ContainerPtr) * BitsPerByte;\n@@ -85,1 +85,1 @@\n-  static CardSetPtr merge(CardSetPtr orig_value, uint card_in_region, uint idx, uint bits_per_card);\n+  static ContainerPtr merge(ContainerPtr orig_value, uint card_in_region, uint idx, uint bits_per_card);\n@@ -87,1 +87,1 @@\n-  static uint card_at(CardSetPtr value, uint const idx, uint const bits_per_card) {\n+  static uint card_at(ContainerPtr value, uint const idx, uint const bits_per_card) {\n@@ -96,1 +96,1 @@\n-  G1CardSetInlinePtr() : _value_addr(nullptr), _value((CardSetPtr)G1CardSet::CardSetInlinePtr) { }\n+  G1CardSetInlinePtr() : _value_addr(nullptr), _value((ContainerPtr)G1CardSet::CardSetInlinePtr) { }\n@@ -98,2 +98,2 @@\n-  G1CardSetInlinePtr(CardSetPtr value) : _value_addr(nullptr), _value(value) {\n-    assert(G1CardSet::card_set_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n+  G1CardSetInlinePtr(ContainerPtr value) : _value_addr(nullptr), _value(value) {\n+    assert(G1CardSet::container_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n@@ -102,2 +102,2 @@\n-  G1CardSetInlinePtr(CardSetPtr volatile* value_addr, CardSetPtr value) : _value_addr(value_addr), _value(value) {\n-    assert(G1CardSet::card_set_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n+  G1CardSetInlinePtr(ContainerPtr volatile* value_addr, ContainerPtr value) : _value_addr(value_addr), _value(value) {\n+    assert(G1CardSet::container_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n@@ -113,1 +113,1 @@\n-  operator CardSetPtr () { return _value; }\n+  operator ContainerPtr () { return _value; }\n@@ -119,1 +119,1 @@\n-  static uint num_cards_in(CardSetPtr value) {\n+  static uint num_cards_in(ContainerPtr value) {\n@@ -142,1 +142,1 @@\n-\/\/ directly in the CardSetPtr of the ConcurrentHashTable node.\n+\/\/ directly in the ContainerPtr of the ConcurrentHashTable node.\n@@ -166,1 +166,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -220,1 +220,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -255,1 +255,1 @@\n-  using CardSetPtr = G1CardSet::CardSetPtr;\n+  using ContainerPtr = G1CardSet::ContainerPtr;\n@@ -258,1 +258,1 @@\n-  CardSetPtr _buckets[2];\n+  ContainerPtr _buckets[2];\n@@ -266,1 +266,1 @@\n-  \/\/ Iterates over the given CardSetPtr with at index in this Howl card set,\n+  \/\/ Iterates over the given ContainerPtr with at index in this Howl card set,\n@@ -269,1 +269,1 @@\n-  void iterate_cardset(CardSetPtr const card_set, uint index, CardOrRangeVisitor& found, G1CardSetConfiguration* config);\n+  void iterate_cardset(ContainerPtr const container, uint index, CardOrRangeVisitor& found, G1CardSetConfiguration* config);\n@@ -274,1 +274,1 @@\n-  CardSetPtr* get_card_set_addr(EntryCountType index) {\n+  ContainerPtr* get_container_addr(EntryCountType index) {\n@@ -280,1 +280,1 @@\n-  \/\/ Iterates over all CardSetPtrs in this Howl card set, applying a CardOrRangeVisitor\n+  \/\/ Iterates over all ContainerPtrs in this Howl card set, applying a CardOrRangeVisitor\n@@ -285,1 +285,1 @@\n-  \/\/ Iterates over all CardSetPtrs in this Howl card set. Calls\n+  \/\/ Iterates over all ContainerPtrs in this Howl card set. Calls\n@@ -287,1 +287,1 @@\n-  \/\/   void operator ()(CardSetPtr* card_set_addr);\n+  \/\/   void operator ()(ContainerPtr* card_set_addr);\n@@ -290,2 +290,2 @@\n-  template <class CardSetPtrVisitor>\n-  void iterate(CardSetPtrVisitor& found, uint num_card_sets);\n+  template <class ContainerPtrVisitor>\n+  void iterate(ContainerPtrVisitor& found, uint num_card_sets);\n@@ -303,1 +303,1 @@\n-    return header_size_in_bytes() + sizeof(CardSetPtr) * num_arrays;\n+    return header_size_in_bytes() + sizeof(ContainerPtr) * num_arrays;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-inline G1CardSetInlinePtr::CardSetPtr G1CardSetInlinePtr::merge(CardSetPtr orig_value, uint card_in_region, uint idx, uint bits_per_card) {\n+inline G1CardSetInlinePtr::ContainerPtr G1CardSetInlinePtr::merge(ContainerPtr orig_value, uint card_in_region, uint idx, uint bits_per_card) {\n@@ -47,1 +47,1 @@\n-  return (CardSetPtr)res;\n+  return (ContainerPtr)res;\n@@ -67,2 +67,2 @@\n-    CardSetPtr new_value = merge(_value, card_idx, num_cards, bits_per_card);\n-    CardSetPtr old_value = Atomic::cmpxchg(_value_addr, _value, new_value, memory_order_relaxed);\n+    ContainerPtr new_value = merge(_value, card_idx, num_cards, bits_per_card);\n+    ContainerPtr old_value = Atomic::cmpxchg(_value_addr, _value, new_value, memory_order_relaxed);\n@@ -76,1 +76,1 @@\n-    if (G1CardSet::card_set_type(_value) != G1CardSet::CardSetInlinePtr) {\n+    if (G1CardSet::container_type(_value) != G1CardSet::CardSetInlinePtr) {\n@@ -271,2 +271,2 @@\n-  CardSetPtr* array_entry = get_card_set_addr(bucket);\n-  CardSetPtr card_set = Atomic::load_acquire(array_entry);\n+  ContainerPtr* array_entry = get_container_addr(bucket);\n+  ContainerPtr container = Atomic::load_acquire(array_entry);\n@@ -274,1 +274,1 @@\n-  switch (G1CardSet::card_set_type(card_set)) {\n+  switch (G1CardSet::container_type(container)) {\n@@ -276,1 +276,1 @@\n-      return G1CardSet::card_set_ptr<G1CardSetArray>(card_set)->contains(card_idx);\n+      return G1CardSet::container_ptr<G1CardSetArray>(container)->contains(card_idx);\n@@ -280,1 +280,1 @@\n-      return G1CardSet::card_set_ptr<G1CardSetBitMap>(card_set)->contains(card_offset, config->max_cards_in_howl_bitmap());\n+      return G1CardSet::container_ptr<G1CardSetBitMap>(container)->contains(card_offset, config->max_cards_in_howl_bitmap());\n@@ -283,1 +283,1 @@\n-      G1CardSetInlinePtr ptr(card_set);\n+      G1CardSetInlinePtr ptr(container);\n@@ -287,1 +287,1 @@\n-      assert(card_set == G1CardSet::FullCardSet, \"Must be\");\n+      assert(container == G1CardSet::FullCardSet, \"Must be\");\n@@ -301,2 +301,2 @@\n-template <class CardSetPtrVisitor>\n-inline void G1CardSetHowl::iterate(CardSetPtrVisitor& found, uint num_card_sets) {\n+template <class ContainerPtrVisitor>\n+inline void G1CardSetHowl::iterate(ContainerPtrVisitor& found, uint num_card_sets) {\n@@ -309,2 +309,2 @@\n-inline void G1CardSetHowl::iterate_cardset(CardSetPtr const card_set, uint index, CardOrRangeVisitor& found, G1CardSetConfiguration* config) {\n-  switch (G1CardSet::card_set_type(card_set)) {\n+inline void G1CardSetHowl::iterate_cardset(ContainerPtr const container, uint index, CardOrRangeVisitor& found, G1CardSetConfiguration* config) {\n+  switch (G1CardSet::container_type(container)) {\n@@ -313,1 +313,1 @@\n-        G1CardSetInlinePtr ptr(card_set);\n+        G1CardSetInlinePtr ptr(container);\n@@ -320,1 +320,1 @@\n-        G1CardSet::card_set_ptr<G1CardSetArray>(card_set)->iterate(found);\n+        G1CardSet::container_ptr<G1CardSetArray>(container)->iterate(found);\n@@ -327,1 +327,1 @@\n-        G1CardSet::card_set_ptr<G1CardSetBitMap>(card_set)->iterate(found, config->max_cards_in_howl_bitmap(), offset);\n+        G1CardSet::container_ptr<G1CardSetBitMap>(container)->iterate(found, config->max_cards_in_howl_bitmap(), offset);\n@@ -332,1 +332,1 @@\n-      assert(card_set == G1CardSet::FullCardSet, \"Must be\");\n+      assert(container == G1CardSet::FullCardSet, \"Must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-class G1HeapRegionRemSetMergeCardClosure : public G1CardSet::CardSetPtrClosure {\n+class G1HeapRegionRemSetMergeCardClosure : public G1CardSet::ContainerPtrClosure {\n@@ -101,1 +101,1 @@\n-  void do_cardsetptr(uint card_region_idx, size_t num_occupied, G1CardSet::CardSetPtr card_set) override {\n+  void do_containerptr(uint card_region_idx, size_t num_occupied, G1CardSet::ContainerPtr container) override {\n@@ -105,1 +105,1 @@\n-    _card_set->iterate_cards_or_ranges_in_container(card_set, cl);\n+    _card_set->iterate_cards_or_ranges_in_container(container, cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-class G1CountCardsOccupied : public G1CardSet::CardSetPtrClosure {\n+class G1CountCardsOccupied : public G1CardSet::ContainerPtrClosure {\n@@ -174,1 +174,1 @@\n-  void do_cardsetptr(uint region_idx, size_t num_occupied, G1CardSet::CardSetPtr card_set) override {\n+  void do_containerptr(uint region_idx, size_t num_occupied, G1CardSet::ContainerPtr container) override {\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  G1CardSet::CardSetPtr value = G1CardSetInlinePtr();\n+  G1CardSet::ContainerPtr value = G1CardSetInlinePtr();\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSetContainers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}