{"files":[{"patch":"@@ -341,3 +341,3 @@\n-  assert(type == G1CardSet::CardSetArrayOfCards ||\n-         type == G1CardSet::CardSetBitMap ||\n-         type == G1CardSet::CardSetHowl, \"should not allocate container type %zu\", type);\n+  assert(type == G1CardSet::ContainerArrayOfCards ||\n+         type == G1CardSet::ContainerBitMap ||\n+         type == G1CardSet::ContainerHowl, \"should not allocate container type %zu\", type);\n@@ -359,3 +359,3 @@\n-  assert(type == G1CardSet::CardSetArrayOfCards ||\n-         type == G1CardSet::CardSetBitMap ||\n-         type == G1CardSet::CardSetHowl, \"should not free card set type %zu\", type);\n+  assert(type == G1CardSet::ContainerArrayOfCards ||\n+         type == G1CardSet::ContainerBitMap ||\n+         type == G1CardSet::ContainerHowl, \"should not free card set type %zu\", type);\n@@ -376,1 +376,1 @@\n-    if (container == FullCardSet || cs_type == CardSetInlinePtr) {\n+    if (container == FullCardSet || cs_type == ContainerInlinePtr) {\n@@ -391,1 +391,1 @@\n-  if (container == FullCardSet || cs_type == CardSetInlinePtr) {\n+  if (container == FullCardSet || cs_type == ContainerInlinePtr) {\n@@ -511,1 +511,1 @@\n-    data = allocate_mem_object(CardSetBitMap);\n+    data = allocate_mem_object(ContainerBitMap);\n@@ -513,1 +513,1 @@\n-    new_container = make_container_ptr(data, CardSetBitMap);\n+    new_container = make_container_ptr(data, ContainerBitMap);\n@@ -515,1 +515,1 @@\n-    data = allocate_mem_object(CardSetHowl);\n+    data = allocate_mem_object(ContainerHowl);\n@@ -517,1 +517,1 @@\n-    new_container = make_container_ptr(data, CardSetHowl);\n+    new_container = make_container_ptr(data, ContainerHowl);\n@@ -529,1 +529,1 @@\n-    case CardSetArrayOfCards : {\n+    case ContainerArrayOfCards: {\n@@ -533,1 +533,1 @@\n-    case CardSetBitMap: {\n+    case ContainerBitMap: {\n@@ -537,1 +537,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -539,1 +539,1 @@\n-      uint8_t* data = allocate_mem_object(CardSetArrayOfCards);\n+      uint8_t* data = allocate_mem_object(ContainerArrayOfCards);\n@@ -541,1 +541,1 @@\n-      new_container = make_container_ptr(data, CardSetArrayOfCards);\n+      new_container = make_container_ptr(data, ContainerArrayOfCards);\n@@ -544,1 +544,1 @@\n-    case CardSetHowl: {\n+    case ContainerHowl: {\n@@ -561,2 +561,2 @@\n-    \/\/ Free containers if cur_container is CardSetHowl\n-    if (container_type(cur_container) == CardSetHowl) {\n+    \/\/ Free containers if cur_container is ContainerHowl\n+    if (container_type(cur_container) == ContainerHowl) {\n@@ -591,2 +591,2 @@\n-  \/\/ the old type has been CardSetBitMap. \"Full\" contains all elements anyway.\n-  if (container_type(source_container) != CardSetHowl) {\n+  \/\/ the old type has been ContainerBitMap. \"Full\" contains all elements anyway.\n+  if (container_type(source_container) != ContainerHowl) {\n@@ -596,1 +596,1 @@\n-    assert(container_type(source_container) == CardSetHowl, \"must be\");\n+    assert(container_type(source_container) == ContainerHowl, \"must be\");\n@@ -606,1 +606,1 @@\n-  assert(container_type(parent_container) == CardSetHowl, \"must be\");\n+  assert(container_type(parent_container) == ContainerHowl, \"must be\");\n@@ -609,3 +609,3 @@\n-  \/\/ the old type has been CardSetBitMap.\n-  if (container_type(source_container) != CardSetBitMap) {\n-    \/\/ We only need to transfer from anything below CardSetBitMap.\n+  \/\/ the old type has been ContainerBitMap.\n+  if (container_type(source_container) != ContainerBitMap) {\n+    \/\/ We only need to transfer from anything below ContainerBitMap.\n@@ -646,1 +646,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -650,1 +650,1 @@\n-    case CardSetArrayOfCards : {\n+    case ContainerArrayOfCards: {\n@@ -654,1 +654,1 @@\n-    case CardSetBitMap: {\n+    case ContainerBitMap: {\n@@ -658,2 +658,2 @@\n-    case CardSetHowl: {\n-      assert(CardSetHowl == container_type(FullCardSet), \"must be\");\n+    case ContainerHowl: {\n+      assert(ContainerHowl == container_type(FullCardSet), \"must be\");\n@@ -742,1 +742,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -746,3 +746,3 @@\n-    case CardSetArrayOfCards : return container_ptr<G1CardSetArray>(container)->contains(card_in_region);\n-    case CardSetBitMap: return container_ptr<G1CardSetBitMap>(container)->contains(card_in_region, _config->max_cards_in_howl_bitmap());\n-    case CardSetHowl: {\n+    case ContainerArrayOfCards: return container_ptr<G1CardSetArray>(container)->contains(card_in_region);\n+    case ContainerBitMap: return container_ptr<G1CardSetBitMap>(container)->contains(card_in_region, _config->max_cards_in_howl_bitmap());\n+    case ContainerHowl: {\n@@ -771,1 +771,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -775,1 +775,1 @@\n-    case CardSetArrayOfCards : {\n+    case ContainerArrayOfCards: {\n@@ -779,1 +779,1 @@\n-    case CardSetBitMap: {\n+    case ContainerBitMap: {\n@@ -783,2 +783,2 @@\n-    case CardSetHowl: {\n-      st->print(\"CardSetHowl not containing %u\", card_in_region);\n+    case ContainerHowl: {\n+      st->print(\"ContainerHowl not containing %u\", card_in_region);\n@@ -794,1 +794,1 @@\n-  assert(type == CardSetInlinePtr || type == CardSetArrayOfCards,\n+  assert(type == ContainerInlinePtr || type == ContainerArrayOfCards,\n@@ -799,1 +799,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -804,1 +804,1 @@\n-    case CardSetArrayOfCards : {\n+    case ContainerArrayOfCards: {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -212,7 +212,7 @@\n-  \/\/ CardSetInlinePtr -> CardSetArrayOfCards -> CardSetHowl -> Full\n-  \/\/ Corsening of containers inside the CardSetHowl happens in the order:\n-  \/\/ CardSetInlinePtr -> CardSetArrayOfCards -> CardSetBitMap -> Full\n-  static const uintptr_t CardSetInlinePtr      = 0x0;\n-  static const uintptr_t CardSetArrayOfCards   = 0x1;\n-  static const uintptr_t CardSetBitMap         = 0x2;\n-  static const uintptr_t CardSetHowl           = 0x3;\n+  \/\/ ContainerInlinePtr -> ContainerArrayOfCards -> ContainerHowl -> Full\n+  \/\/ Corsening of containers inside the ContainerHowl happens in the order:\n+  \/\/ ContainerInlinePtr -> ContainerArrayOfCards -> ContainerBitMap -> Full\n+  static const uintptr_t ContainerInlinePtr      = 0x0;\n+  static const uintptr_t ContainerArrayOfCards   = 0x1;\n+  static const uintptr_t ContainerBitMap         = 0x2;\n+  static const uintptr_t ContainerHowl           = 0x3;\n@@ -267,1 +267,1 @@\n-  \/\/ We only need to transfer anything finer than CardSetBitMap. \"Full\" contains\n+  \/\/ We only need to transfer anything finer than ContainerBitMap. \"Full\" contains\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    case CardSetInlinePtr: {\n+    case ContainerInlinePtr: {\n@@ -53,1 +53,1 @@\n-    case CardSetArrayOfCards : {\n+    case ContainerArrayOfCards: {\n@@ -59,1 +59,1 @@\n-    case CardSetBitMap: {\n+    case ContainerBitMap: {\n@@ -64,2 +64,2 @@\n-    case CardSetHowl: {\n-      assert(container_type(FullCardSet) == CardSetHowl, \"Must be\");\n+    case ContainerHowl: {\n+      assert(container_type(FullCardSet) == ContainerHowl, \"Must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  G1CardSetInlinePtr() : _value_addr(nullptr), _value((ContainerPtr)G1CardSet::CardSetInlinePtr) { }\n+  G1CardSetInlinePtr() : _value_addr(nullptr), _value((ContainerPtr)G1CardSet::ContainerInlinePtr) { }\n@@ -99,1 +99,1 @@\n-    assert(G1CardSet::container_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n+    assert(G1CardSet::container_type(_value) == G1CardSet::ContainerInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInlinePtr.\", p2i(_value));\n@@ -103,1 +103,1 @@\n-    assert(G1CardSet::container_type(_value) == G1CardSet::CardSetInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInPtr.\", p2i(_value));\n+    assert(G1CardSet::container_type(_value) == G1CardSet::ContainerInlinePtr, \"Value \" PTR_FORMAT \" is not a valid G1CardSetInlinePtr.\", p2i(_value));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    if (G1CardSet::container_type(_value) != G1CardSet::CardSetInlinePtr) {\n+    if (G1CardSet::container_type(_value) != G1CardSet::ContainerInlinePtr) {\n@@ -275,1 +275,1 @@\n-    case G1CardSet::CardSetArrayOfCards : {\n+    case G1CardSet::ContainerArrayOfCards : {\n@@ -278,1 +278,1 @@\n-    case G1CardSet::CardSetBitMap: {\n+    case G1CardSet::ContainerBitMap: {\n@@ -282,1 +282,1 @@\n-    case G1CardSet::CardSetInlinePtr: {\n+    case G1CardSet::ContainerInlinePtr: {\n@@ -286,1 +286,1 @@\n-    case G1CardSet::CardSetHowl: {\/\/ Fullcard set entry\n+    case G1CardSet::ContainerHowl: {\/\/ Fullcard set entry\n@@ -311,1 +311,1 @@\n-    case G1CardSet::CardSetInlinePtr: {\n+    case G1CardSet::ContainerInlinePtr: {\n@@ -318,1 +318,1 @@\n-    case G1CardSet::CardSetArrayOfCards : {\n+    case G1CardSet::ContainerArrayOfCards: {\n@@ -324,1 +324,1 @@\n-    case G1CardSet::CardSetBitMap: {\n+    case G1CardSet::ContainerBitMap: {\n@@ -331,1 +331,1 @@\n-    case G1CardSet::CardSetHowl: { \/\/ actually FullCardSet\n+    case G1CardSet::ContainerHowl: { \/\/ actually FullCardSet\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}