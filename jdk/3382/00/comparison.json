{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -659,0 +659,16 @@\n+    \/**\n+     * {@return {@code true} if the module element is an automatic\n+     * module, {@code false} otherwise}\n+     *\n+     * @implSpec\n+     * The default implementation of this method returns {@code\n+     * false}.\n+     *\n+     * @param module the module element being examined\n+     * @jls 7.7.1 Dependences\n+     * @since 17\n+     *\/\n+    default boolean isAutomaticModule(ModuleElement module) {\n+        return false;\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -718,0 +718,6 @@\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public boolean isAutomaticModule(ModuleElement module) {\n+        ModuleSymbol msym = (ModuleSymbol) module;\n+        return (msym.flags() & Flags.AUTOMATIC_MODULE) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8155026 8178011 8220702\n+ * @bug 8155026 8178011 8220702 8261625\n@@ -668,1 +668,25 @@\n-                .run(Task.Expect.SUCCESS)\n+                .run(Task.Expect.SUCCESS,\n+                     \/\/ Processor verifies api.Api is enclosed by an automatic module.\n+                     new javax.annotation.processing.AbstractProcessor() {\n+                         @Override\n+                         public java.util.Set<String> getSupportedAnnotationTypes() {\n+                             return java.util.Set.of(\"*\");\n+                         }\n+\n+                         @Override\n+                         public  javax.lang.model.SourceVersion getSupportedSourceVersion() {\n+                             return javax.lang.model.SourceVersion.latestSupported();\n+                         }\n+\n+                         @Override\n+                         public boolean process(java.util.Set<? extends javax.lang.model.element.TypeElement> annotations,\n+                                                    javax.annotation.processing.RoundEnvironment roundEnv) {\n+                             if (!roundEnv.processingOver()) {\n+                                 javax.lang.model.util.Elements elts = processingEnv.getElementUtils();\n+                                 if (!elts.isAutomaticModule(elts.getModuleOf(elts.getTypeElement(\"api.Api\")))) {\n+                                     throw new RuntimeException(\"module of class Api is not automatic\");\n+                                 }\n+                             }\n+                             return true;\n+                         }\n+                     })\n","filename":"test\/langtools\/tools\/javac\/modules\/AutomaticModules.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261625\n+ * @summary Test Elements.isAutomaticModule\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestIsAutomaticMod\n+ * @compile -processor TestIsAutomaticMod -proc:only TestIsAutomaticMod.java\n+ *\/\n+\n+import java.io.Writer;\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+\n+\/**\n+ * Test basic workings of Elements.isAutomaticModule\n+ *\/\n+public class TestIsAutomaticMod extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            \/\/ Named module java.base\n+            checkMod(eltUtils.getModuleElement(\"java.base\"), false);\n+\n+            \/\/ Unnamed module for TestIsAutomaticMod\n+            for (Element e : roundEnv.getRootElements() ) {\n+                ModuleElement enclosing = elements.getModuleOf(e);\n+                checkMod(enclosing, false);\n+                System.out.println(enclosing.toString());\n+            }\n+\n+            if ((new TestElements()).isAutomaticModule(null) != false) {\n+                throw new RuntimeException(\"Bad behavior from default isAutomaticModule method\");\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void checkMod(ModuleElement mod, boolean expectedIsAuto) {\n+        boolean actualIsAuto = elements.isAutomaticModule(mod);\n+        if (actualIsAuto != expectedIsAuto) {\n+            throw new RuntimeException(String.format(\"Unexpected isAutomatic ``%s''' for %s, expected ``%s''%n\",\n+                                                     actualIsAuto,\n+                                                     mod,\n+                                                     expectedIsAuto));\n+        }\n+    }\n+\n+    \/\/ Use default methods of javax.lang.model.util.Elements; define\n+    \/\/ vacuous methods to override the abstract methods.\n+    private static class TestElements implements Elements {\n+        public TestElements() {}\n+\n+        @Override\n+        public PackageElement getPackageElement(CharSequence name) {return null;}\n+\n+        @Override\n+        public TypeElement getTypeElement(CharSequence name) {return null;}\n+\n+        @Override\n+        public Map<? extends ExecutableElement, ? extends AnnotationValue>\n+                                                          getElementValuesWithDefaults(AnnotationMirror a) {return null;}\n+        @Override\n+        public String getDocComment(Element e) {return null;}\n+\n+        @Override\n+        public boolean isDeprecated(Element e) {return false;}\n+\n+        @Override\n+        public  Name getBinaryName(TypeElement type) {return null;}\n+\n+        @Override\n+        public PackageElement getPackageOf(Element e) {return null;}\n+\n+        @Override\n+        public List<? extends Element> getAllMembers(TypeElement type) {return null;}\n+\n+        @Override\n+        public List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e) {return null;}\n+\n+        @Override\n+        public boolean hides(Element hider, Element hidden) {return false;}\n+\n+        @Override\n+        public boolean overrides(ExecutableElement overrider,\n+                             ExecutableElement overridden,\n+                             TypeElement type) {return false;}\n+\n+        @Override\n+        public String getConstantExpression(Object value) {return null;}\n+\n+        @Override\n+        public void printElements(Writer w, Element... elements) {}\n+\n+        @Override\n+        public Name getName(CharSequence cs)  {return null;}\n+\n+        @Override\n+        public boolean isFunctionalInterface(TypeElement type) {return false;}\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestIsAutomaticMod.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import javax.annotation.processing.Processor;\n@@ -63,0 +64,1 @@\n+    private List<Processor> procs;\n@@ -334,0 +336,23 @@\n+    \/**\n+     * Sets the expected outcome of the task and calls {@code run(procs)}.\n+     * @param expect the expected outcome\n+     * @return the result of calling {@code run}\n+     *\/\n+    public Result run(Expect expect, Processor... procs) {\n+        expect(expect, Integer.MIN_VALUE);\n+        return run(procs);\n+    }\n+\n+    \/**\n+     * Calls the compiler with the arguments as currently configured,\n+     * after adding annotation processors.\n+     * @return a Result object indicating the outcome of the compilation\n+     * and the content of any output written to stdout, stderr, or the\n+     * main stream by the compiler.\n+     * @throws TaskError if the outcome of the task is not as expected.\n+     *\/\n+    public Task.Result run(Processor... procs) {\n+        this.procs = List.of(procs);\n+        return run();\n+    }\n+\n@@ -361,0 +386,3 @@\n+            if (procs != null) {\n+                task.setProcessors(procs);\n+            }\n","filename":"test\/langtools\/tools\/lib\/toolbox\/JavacTask.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"}]}