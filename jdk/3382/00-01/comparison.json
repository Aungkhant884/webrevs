{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Set;\n@@ -44,0 +45,4 @@\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n@@ -668,3 +673,2 @@\n-                .run(Task.Expect.SUCCESS,\n-                     \/\/ Processor verifies api.Api is enclosed by an automatic module.\n-                     new javax.annotation.processing.AbstractProcessor() {\n+                .processors(new AbstractProcessor() {\n+                         \/\/ Processor verifies api.Api is enclosed by an automatic module.\n@@ -672,2 +676,2 @@\n-                         public java.util.Set<String> getSupportedAnnotationTypes() {\n-                             return java.util.Set.of(\"*\");\n+                         public Set<String> getSupportedAnnotationTypes() {\n+                             return Set.of(\"*\");\n@@ -677,2 +681,2 @@\n-                         public  javax.lang.model.SourceVersion getSupportedSourceVersion() {\n-                             return javax.lang.model.SourceVersion.latestSupported();\n+                         public SourceVersion getSupportedSourceVersion() {\n+                             return SourceVersion.latestSupported();\n@@ -682,2 +686,2 @@\n-                         public boolean process(java.util.Set<? extends javax.lang.model.element.TypeElement> annotations,\n-                                                    javax.annotation.processing.RoundEnvironment roundEnv) {\n+                         public boolean process(Set<? extends TypeElement> annotations,\n+                                                RoundEnvironment roundEnv) {\n@@ -685,1 +689,1 @@\n-                                 javax.lang.model.util.Elements elts = processingEnv.getElementUtils();\n+                                 var elts = processingEnv.getElementUtils();\n@@ -687,1 +691,1 @@\n-                                     throw new RuntimeException(\"module of class Api is not automatic\");\n+                                     throw new RuntimeException(\"module of class api.Api is not automatic\");\n@@ -692,3 +696,2 @@\n-                     })\n-                .writeAll()\n-                .getOutputLines(Task.OutputKind.DIRECT);\n+                    })\n+                .run(Task.Expect.SUCCESS);\n","filename":"test\/langtools\/tools\/javac\/modules\/AutomaticModules.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -260,0 +260,8 @@\n+    \/**\n+     * Sets the the annotation processors to be used.\n+     *\/\n+    public JavacTask processors(Processor... procs) {\n+        this.procs = List.of(procs);\n+        return this;\n+    }\n+\n@@ -336,23 +344,0 @@\n-    \/**\n-     * Sets the expected outcome of the task and calls {@code run(procs)}.\n-     * @param expect the expected outcome\n-     * @return the result of calling {@code run}\n-     *\/\n-    public Result run(Expect expect, Processor... procs) {\n-        expect(expect, Integer.MIN_VALUE);\n-        return run(procs);\n-    }\n-\n-    \/**\n-     * Calls the compiler with the arguments as currently configured,\n-     * after adding annotation processors.\n-     * @return a Result object indicating the outcome of the compilation\n-     * and the content of any output written to stdout, stderr, or the\n-     * main stream by the compiler.\n-     * @throws TaskError if the outcome of the task is not as expected.\n-     *\/\n-    public Task.Result run(Processor... procs) {\n-        this.procs = List.of(procs);\n-        return run();\n-    }\n-\n","filename":"test\/langtools\/tools\/lib\/toolbox\/JavacTask.java","additions":8,"deletions":23,"binary":false,"changes":31,"status":"modified"}]}