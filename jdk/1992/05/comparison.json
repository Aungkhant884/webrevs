{"files":[{"patch":"@@ -718,3 +718,1 @@\n-  \/* notice: the max range value here is max_jint, not max_intx  *\/         \\\n-  \/* because of overflow issue                                   *\/         \\\n-  product(intx, AvgMonitorsPerThreadEstimate, 1024, DIAGNOSTIC,             \\\n+  product(size_t, AvgMonitorsPerThreadEstimate, 1024, DIAGNOSTIC,           \\\n@@ -723,1 +721,1 @@\n-          range(0, max_jint)                                                \\\n+          range(0, max_uintx)                                               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -238,0 +238,2 @@\n+  \/\/ Start the ceiling with the estimate for one thread.\n+  set_in_use_list_ceiling(AvgMonitorsPerThreadEstimate);\n@@ -252,4 +254,3 @@\n-\/\/ Start the ceiling with the estimate for one thread.\n-\/\/ This is a 'jint' because the range of AvgMonitorsPerThreadEstimate\n-\/\/ is 0..max_jint:\n-static jint _in_use_list_ceiling = AvgMonitorsPerThreadEstimate;\n+\/\/ Start the ceiling with the estimate for one thread in initialize()\n+\/\/ which is called after cmd line options are processed.\n+static size_t _in_use_list_ceiling = 0;\n@@ -1162,3 +1163,1 @@\n-  \/\/ _in_use_list_ceiling is a jint so this cast could lose precision,\n-  \/\/ but in reality the ceiling should never get that high.\n-  return (size_t)_in_use_list_ceiling;\n+  return _in_use_list_ceiling;\n@@ -1168,6 +1167,1 @@\n-  Atomic::add(&_in_use_list_ceiling, (jint)-AvgMonitorsPerThreadEstimate);\n-#ifdef ASSERT\n-  size_t l_in_use_list_ceiling = in_use_list_ceiling();\n-#endif\n-  assert(l_in_use_list_ceiling > 0, \"in_use_list_ceiling=\" SIZE_FORMAT\n-         \": must be > 0\", l_in_use_list_ceiling);\n+  Atomic::add(&_in_use_list_ceiling, -AvgMonitorsPerThreadEstimate);\n@@ -1177,1 +1171,5 @@\n-  Atomic::add(&_in_use_list_ceiling, (jint)AvgMonitorsPerThreadEstimate);\n+  Atomic::add(&_in_use_list_ceiling, AvgMonitorsPerThreadEstimate);\n+}\n+\n+void ObjectSynchronizer::set_in_use_list_ceiling(size_t new_value) {\n+  _in_use_list_ceiling = new_value;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,1 @@\n+  static void set_in_use_list_ceiling(size_t new_value);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}