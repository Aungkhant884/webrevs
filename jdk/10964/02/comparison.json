{"files":[{"patch":"@@ -620,0 +620,3 @@\n+                if (table.isEditing()) {\n+                    table.getCellEditor().cancelCellEditing();\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 6788481\n+ *  @key headful\n+ * @summary  Verifies if CellEditorListener.editingCanceled is called\n+ * @run main BugCellEditorListener\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.event.CellEditorListener;\n+import javax.swing.event.ChangeEvent;\n+\n+public class BugCellEditorListener {\n+    static Robot robot;\n+    static JFrame frame;\n+    static JTable table;\n+    static volatile Point pt;\n+    static volatile boolean cancelled;\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String [] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing l&f : \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            test();\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                table = new JTable(5, 5);\n+                table.setPreferredScrollableViewportSize(table.getPreferredSize());\n+                JScrollPane scrollpane = new JScrollPane(table);\n+                frame.getContentPane().add(scrollpane);\n+\n+                DefaultCellEditor dce = (DefaultCellEditor) table.getDefaultEditor(Object.class);\n+                dce.addCellEditorListener(new CellEditorListener() {\n+                    public void editingStopped(ChangeEvent e) {\n+                        System.out.println(\"stopped\");\n+                    }\n+\n+                    public void editingCanceled(ChangeEvent e) {\n+                        System.out.println(\"canceled\");\n+                        cancelled = true;\n+                    }\n+                });\n+\n+\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                Rectangle rect = table.getCellRect(2, 0, false);\n+                pt = new Point(rect.x + rect.width \/ 2, rect.y + rect.height \/ 2);\n+                SwingUtilities.convertPointToScreen(pt, table);\n+            });\n+            robot.mouseMove(pt.x, pt.y);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ESCAPE);\n+            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            if (!cancelled) {\n+                throw new RuntimeException(\"Cell editing cancel listener not called\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/BugCellEditorListener.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}