{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -565,0 +565,4 @@\n+     *\n+     * OtherName ::= SEQUENCE {\n+     *      type-id    OBJECT IDENTIFIER,\n+     *      value      [0] EXPLICIT ANY DEFINED BY type-id }\n@@ -574,1 +578,1 @@\n-     * respectively).\n+     * respectively). More entries can exist depending on the name type.\n@@ -584,1 +588,1 @@\n-     * integers separated by periods. And directory names (distinguished names)\n+     * integers separated by periods. Directory names (distinguished names)\n@@ -586,1 +590,6 @@\n-     * RFC 2253<\/a> string format. No standard string format is\n+     * RFC 2253<\/a> string format. Othernames are returned as a byte array\n+     * containing the ASN.1 DER encoded form of the name, with a\n+     * third entry in the list containing its {@code type-id} in string\n+     * format, and a fourth entry containing the ASN.1 DER encoding of\n+     * its {@code value} without the context-specific constructed tag\n+     * with number 0. No standard string format is\n@@ -630,1 +639,2 @@\n-     * respectively). For more details about the formats used for each\n+     * respectively).  More entries can exist depending on the name type.\n+     * For more details about the formats used for each\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Certificate.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,4 +51,4 @@\n-    private String name;\n-    private ObjectIdentifier oid;\n-    private byte[] nameValue = null;\n-    private GeneralNameInterface gni = null;\n+    private final ObjectIdentifier oid;\n+    private final String name;\n+    private final byte[] nameValue; \/\/ value inside [0]\n+    private final GeneralNameInterface gni;\n@@ -92,2 +92,5 @@\n-        DerValue val = in.getDerValue();\n-        nameValue = val.toByteArray();\n+        DerValue derValue1 = in.getDerValue();\n+        if (!derValue1.isContextSpecific((byte)0)) {\n+            throw new IOException(\"value is not [0]\");\n+        }\n+        nameValue = derValue1.data.toByteArray();\n@@ -128,6 +131,7 @@\n-            Constructor<?> cons = extClass.getConstructor(params);\n-\n-            Object[] passed = new Object[] { nameValue };\n-            GeneralNameInterface gni =\n-                       (GeneralNameInterface)cons.newInstance(passed);\n-            return gni;\n+            Constructor<?> cons;\n+            try {\n+                cons = extClass.getConstructor(Object.class);\n+            } catch (NoSuchMethodException e) {\n+                cons = extClass.getConstructor(byte[].class);\n+            }\n+            return (GeneralNameInterface)cons.newInstance(nameValue);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/OtherName.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1587,0 +1587,5 @@\n+                if (name.getType() == GeneralNameInterface.NAME_ANY\n+                        && name instanceof OtherName oname) {\n+                    nameEntry.add(oname.getOID().toString());\n+                    nameEntry.add(oname.getNameValue());\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277976\n+ * @summary Break up SEQUENCE in X509Certiticate#getSubjectAlternativeNames() in otherName\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ *          java.base\/sun.security.tools.keytool\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.CertificateExtensions;\n+import sun.security.x509.DNSName;\n+import sun.security.x509.GeneralName;\n+import sun.security.x509.GeneralNames;\n+import sun.security.x509.OIDMap;\n+import sun.security.x509.OtherName;\n+import sun.security.x509.SubjectAlternativeNameExtension;\n+import sun.security.x509.X500Name;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.Date;\n+\n+public class Parse {\n+\n+    public static class MyDNSName extends DNSName {\n+        public MyDNSName(byte[] in) throws IOException {\n+            super(new String(Arrays.copyOfRange(in, 2, in.length),\n+                    StandardCharsets.US_ASCII));\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        OIDMap.addAttribute(\"n1\", \"1.2.3.6\", MyDNSName.class);\n+\n+        CertificateExtensions exts = new CertificateExtensions();\n+        GeneralNames names = new GeneralNames();\n+\n+        byte[] d1 = new byte[] { 5, 0 };\n+        names.add(new GeneralName(\n+                new OtherName(ObjectIdentifier.of(\"1.2.3.5\"), d1)));\n+\n+        byte[] d2 = new byte[] { 4, 5, 'a', '.', 'c', 'o', 'm' };\n+        names.add(new GeneralName(\n+                new OtherName(ObjectIdentifier.of(\"1.2.3.6\"), d2)));\n+\n+        exts.set(\"x\", new SubjectAlternativeNameExtension(names));\n+        CertAndKeyGen g = new CertAndKeyGen(\"Ed25519\", \"Ed25519\");\n+        g.generate(-1);\n+        X509Certificate x = g.getSelfCertificate(new X500Name(\"CN=ME\"),\n+                new Date(),\n+                100000,\n+                exts);\n+\n+        int found = 0;\n+        for (var san : x.getSubjectAlternativeNames()) {\n+            if (san.get(2).equals(\"1.2.3.5\")\n+                    && Arrays.equals((byte[])san.get(3), d1)) {\n+                found++;\n+            }\n+            if (san.get(2).equals(\"1.2.3.6\")\n+                    && Arrays.equals((byte[])san.get(3), d2)) {\n+                found++;\n+            }\n+        }\n+\n+        Asserts.assertEQ(found, 2);\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/x509\/OtherName\/Parse.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}