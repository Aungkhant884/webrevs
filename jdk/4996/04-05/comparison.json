{"files":[{"patch":"@@ -2694,1 +2694,1 @@\n-  \/\/ Now create a the same exception with this stacktrace and thread name.\n+  \/\/ Now create the same exception with this stacktrace and thread name.\n@@ -2712,0 +2712,2 @@\n+    log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n+                          h_cause->klass()->external_name());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1036,0 +1036,2 @@\n+  ResourceMark rm(THREAD);\n+  log_trace(class, init)(\"Initialization error added for class %s\", external_name());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *          and doesn't cause the classes in the stacktrace to be unloaded.\n+ *          and doesn't prevent the classes in the stacktrace to be unloaded.\n@@ -34,1 +34,0 @@\n- * @compile ThrowsSpecialException.jasm\n@@ -47,1 +46,1 @@\n-    static public class SpecialException extends Throwable {\n+    static public class SpecialException extends RuntimeException {\n@@ -52,0 +51,8 @@\n+    static public class ThrowsSpecialException {\n+        static {\n+            if (true) foo();\n+        }\n+        static private void foo() throws SpecialException {\n+            if (true) throw new SpecialException(3, \"Very Special \");\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionUnloadTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n-    static public class ThrowsSpecialException {\n-        static {\n-            \/\/ Can't trick javac, have to use jasm.\n-            \/\/ if (true) foo();\n-        }\n-        static private void foo() throws SpecialException {\n-            if (true) throw new SpecialException(3, \"Very Special \");\n-        }\n-    }\n-*\/\n-\n-super public class InitExceptionUnloadTest$ThrowsSpecialException\n-\tversion 62:0\n-{\n-\n-\n-public Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-{\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-}\n-\n-private static Method foo:\"()V\"\n-\tthrows InitExceptionUnloadTest$SpecialException\n-\tstack 4 locals 0\n-{\n-\t\tnew\tclass InitExceptionUnloadTest$SpecialException;\n-\t\tdup;\n-\t\ticonst_3;\n-\t\tldc\tString \"Very Special \";\n-\t\tinvokespecial\tMethod InitExceptionUnloadTest$SpecialException.\"<init>\":\"(ILjava\/lang\/String;)V\";\n-\t\tathrow;\n-}\n-\n-static Method \"<clinit>\":\"()V\"\n-\tstack 0 locals 0\n-{\n-                invokestatic  Method \"foo\":\"()V\";\n-\t\treturn;\n-}\n-\n-NestHost InitExceptionUnloadTest;\n-public static InnerClass SpecialException=class InitExceptionUnloadTest$SpecialException of class InitExceptionUnloadTest;\n-public static InnerClass ThrowsSpecialException=class InitExceptionUnloadTest$ThrowsSpecialException of class InitExceptionUnloadTest;\n-\n-} \/\/ end Class InitExceptionUnloadTest$ThrowsSpecialException\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/ThrowsSpecialException.jasm","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"}]}