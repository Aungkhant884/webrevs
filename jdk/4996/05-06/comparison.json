{"files":[{"patch":"@@ -2685,8 +2685,2 @@\n-  \/\/ If the original exception was in the bootstrap class loader, then use that\n-  \/\/ otherwise use ExceptionInInitializerError as the cause with this stack trace,\n-  \/\/ which might be a little wierd but still helpful.\n-  Klass* tk = throwable->klass();\n-  bool null_classloader = tk->class_loader() == nullptr;\n-\n-  Symbol* exception_name = null_classloader ?  tk->name() :\n-                             vmSymbols::java_lang_ExceptionInInitializerError();\n+  \/\/ Throw ExceptionInInitializerError as the cause with this exception in\n+  \/\/ the message and stack trace.\n@@ -2698,2 +2692,1 @@\n-  if (!null_classloader) {\n-    st.print(\"Exception %s%s \", tk->name()->as_klass_external_name(),\n+  st.print(\"Exception %s%s \", throwable()->klass()->name()->as_klass_external_name(),\n@@ -2701,1 +2694,0 @@\n-  }\n@@ -2708,0 +2700,1 @@\n+  Symbol* exception_name = vmSymbols::java_lang_ExceptionInInitializerError();\n@@ -2710,1 +2703,1 @@\n-  \/\/ If new exception returns a different exception while creating the exception, return null.\n+  \/\/ If new_exception returns a different exception while creating the exception, return null.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8048190\n- * @summary Test that the NCDFE saves original exception during class initialization.\n- * @run main InitExceptionTest\n- *\/\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.util.ArrayList;\n-\n-class InitNPE {\n-    static {\n-        if (true) throw new NullPointerException();\n-    }\n-}\n-\n-class InitOOM {\n-    static {\n-        if (true) foo();\n-    }\n-    static void foo() {\n-        ArrayList<byte[]> l = new ArrayList<>();\n-        while (true) {\n-            l.add(new byte[16*1024]);\n-        }\n-    }\n-}\n-\n-public class InitExceptionTest {\n-\n-  private static void verify_stack(Throwable e, String expected, String cause) throws Exception {\n-    ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n-    PrintStream printStream = new PrintStream(byteOS);\n-    e.printStackTrace(printStream);\n-    printStream.close();\n-    String stackTrace = byteOS.toString(\"ASCII\");\n-    if (!stackTrace.contains(expected) || (cause != null && !stackTrace.contains(cause))) {\n-      throw new RuntimeException(expected + \" and \" + cause + \" missing from stacktrace: \" + stackTrace);\n-    }\n-  }\n-\n-  public static void main(java.lang.String[] unused) throws Exception {\n-    try {\n-      InitNPE c = new InitNPE();\n-    } catch (Error err) {\n-      System.out.println(\"Error thrown: \" + err);\n-      verify_stack(err, \"java.lang.ExceptionInInitializerError\", \"Caused by: java.lang.NullPointerException\");\n-      err.printStackTrace();\n-    }\n-    try {\n-      InitNPE c = new InitNPE();\n-    } catch (Error err) {\n-      System.out.println(\"Error thrown: \" + err);\n-      verify_stack(err, \"java.lang.NoClassDefFoundError\", \"Caused by: java.lang.NullPointerException\");\n-      err.printStackTrace();\n-    }\n-    try {\n-      InitOOM e = new InitOOM();\n-    } catch (Error err) {\n-      System.out.println(\"Error thrown: \" + err);\n-      verify_stack(err, \"java.lang.OutOfMemoryError\", \"Java heap space\");\n-      err.printStackTrace();\n-    }\n-    try {\n-      InitOOM e = new InitOOM();\n-    } catch (Error err) {\n-      System.out.println(\"Error thrown: \" + err);\n-      verify_stack(err, \"java.lang.NoClassDefFoundError\", \"Caused by: java.lang.OutOfMemoryError\");\n-      err.printStackTrace();\n-    }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionTest.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -59,2 +59,10 @@\n-    \/\/ Has to be in jasm to throw special exception in class initializer.\n-    \/\/ static public class ThrowsSpecialException\n+\n+    static public class InitOOM {\n+        static {\n+            if (true) foo();\n+        }\n+        static private void foo() {\n+            \/\/ Actually getting an OOM might be fragile but it was tested.\n+            throw new OutOfMemoryError(\"Java heap space\");\n+        }\n+    }\n@@ -77,1 +85,1 @@\n-        \"Caused by: java.lang.ArithmeticException: \/ by zero\",\n+        \"Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.ArithmeticException: \/ by zero [in thread\",\n@@ -81,1 +89,1 @@\n-        \"Caused by: java.lang.Error\",\n+        \"Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.Error [in thread\",\n@@ -85,1 +93,6 @@\n-        \"Caused by: java.lang.ExceptionInInitializerError: Exception InitExceptionUnloadTest$SpecialException: Very Special 3\" };\n+        \"Caused by: java.lang.ExceptionInInitializerError: Exception InitExceptionUnloadTest$SpecialException: Very Special 3\",\n+        \"java.lang.OutOfMemoryError\",\n+        \"Java heap space\",\n+        \"java.lang.NoClassDefFoundError: Cound not initialize class InitExceptionUnloadTest$InitOOM\",\n+        \"Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.OutOfMemoryError: Java heap space [in thread\"\n+    };\n@@ -90,1 +103,2 @@\n-        \"InitExceptionUnloadTest$ThrowsSpecialException\" };\n+        \"InitExceptionUnloadTest$ThrowsSpecialException\",\n+        \"InitExceptionUnloadTest$InitOOM\" };\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionUnloadTest.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"}]}