{"files":[{"patch":"@@ -2671,2 +2671,2 @@\n-  \/\/ Call to JVM to fill in the stack trace and clear declaringObject to not keep classes alive\n-  \/\/ in the stack trace.\n+  \/\/ Call to JVM to fill in the stack trace and clear declaringClassObject to\n+  \/\/ not keep classes alive in the stack trace.\n@@ -2676,3 +2676,0 @@\n-  TempNewSymbol sym = SymbolTable::new_symbol(\"getStackTrace\");\n-  TempNewSymbol sig = SymbolTable::new_symbol(\"()[Ljava\/lang\/StackTraceElement;\");\n-\n@@ -2682,1 +2679,2 @@\n-                          sym, sig,\n+                          vmSymbols::getStackTrace_name(),\n+                          vmSymbols::getStackTrace_signature(),\n@@ -2694,1 +2692,1 @@\n-    st.print(\"in thread %s\", thread_name);\n+    st.print(\"[in thread \\\"%s\\\"]\", thread_name);\n@@ -2696,1 +2694,1 @@\n-    st.print(\"%s in thread %s\", message->as_C_string(), thread_name);\n+    st.print(\"%s [in thread \\\"%s\\\"]\", message->as_C_string(), thread_name);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -372,0 +372,1 @@\n+  template(getStackTrace_name,                        \"getStackTrace\")                            \\\n@@ -598,1 +599,3 @@\n-  template(reflect_method_signature,                  \"Ljava\/lang\/reflect\/Method;\")                                                    \\\n+  template(reflect_method_signature,                  \"Ljava\/lang\/reflect\/Method;\")                               \\\n+  template(getStackTrace_signature,                    \"()[Ljava\/lang\/StackTraceElement;\")                        \\\n+                                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1068,3 +1068,1 @@\n-  if (!created) {\n-    elem.clean();\n-  }\n+  assert(created, \"Initialization is single threaded\");\n@@ -1076,1 +1074,1 @@\n-    MutexLocker ml(ClassInitError_lock);\n+    MutexLocker ml(THREAD, ClassInitError_lock);\n@@ -1080,2 +1078,3 @@\n-    return java_lang_Throwable::recreate_cause(h->exception(), h->message(), h->thread_name(),\n-                                               Handle(THREAD, h->stack_trace()), CHECK_NULL);\n+    oop cause = java_lang_Throwable::recreate_cause(h->exception(), h->message(), h->thread_name(),\n+                                                    Handle(THREAD, h->stack_trace()), CHECK_NULL);\n+    return cause;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n- * @summary Test that the CNFE saves original exception during class initialization.\n- * @compile InitNPE.jasm InitOOM.jasm\n+ * @summary Test that the NCDFE saves original exception during class initialization.\n@@ -34,0 +33,19 @@\n+import java.util.ArrayList;\n+\n+class InitNPE {\n+    static {\n+        if (true) throw new NullPointerException();\n+    }\n+}\n+\n+class InitOOM {\n+    static {\n+        if (true) foo();\n+    }\n+    static void foo() {\n+        ArrayList<byte[]> l = new ArrayList<>();\n+        while (true) {\n+            l.add(new byte[16*1024]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionTest.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @summary Test that the CNFE saves original exception during class initialization.\n- *          And is unloaded\n+ * @summary Test that the NCDFE saves original exception during class initialization,\n+ *          and doesn't cause the classes in the stacktrace to be unloaded.\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionUnloadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-super class InitNPE\n-\tversion 62:0\n-{\n-\n-\n-Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-{\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-}\n-\n-\/\/ Initialization calls NPE.\n-static Method \"<clinit>\":\"()V\"\n-\tstack 2 locals 1\n-{\n-\t\tgetstatic\tField java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n-\t\tldc\tString \"Init\";\n-\t\tinvokevirtual\tMethod java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n-\t\tnew\tclass java\/lang\/NullPointerException;\n-\t\tdup;\n-\t\tinvokespecial\tMethod java\/lang\/NullPointerException.\"<init>\":\"()V\";\n-\t\tathrow;\n-}\n-\n-} \/\/ end Class InitNPE\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitNPE.jasm","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-super class InitOOM\n-\tversion 62:0\n-{\n-\n-Method \"<init>\":\"()V\"\n-\tstack 1 locals 1\n-{\n-\t\taload_0;\n-\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n-\t\treturn;\n-}\n-\n-\/\/ Throw OOM from class initializer.\n-static Method \"<clinit>\":\"()V\"\n-\tstack 1 locals 0\n-{\n-                invokestatic    Method \"foo\":\"()V\";\n-\t\treturn;\n-}\n-\n-static Method foo:\"()V\"\n-\tthrows java\/lang\/Exception\n-\tstack 2 locals 2\n-{\n-\t\tnew\tclass java\/util\/ArrayList;\n-\t\tdup;\n-\t\tinvokespecial\tMethod java\/util\/ArrayList.\"<init>\":\"()V\";\n-\t\tastore_0;\n-\tL8:\tstack_frame_type append;\n-\t\tlocals_map class java\/util\/ArrayList;\n-\t\tsipush\t16384;\n-\t\tistore_1;\n-\tL12:\tstack_frame_type append;\n-\t\tlocals_map int;\n-\t\tiload_1;\n-\t\tifle\tL32;\n-\t\taload_0;\n-\t\tsipush\t1024;\n-\t\tnewarray byte;\n-\t\tinvokevirtual\tMethod java\/util\/ArrayList.add:\"(Ljava\/lang\/Object;)Z\";\n-\t\tpop;\n-\t\tiinc\t1, -1;\n-\t\tgoto\tL12;\n-\tL32:\tstack_frame_type chop1;\n-\t\tgoto\tL8;\n-}\n-\n-} \/\/ end Class InitOOM\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitOOM.jasm","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"}]}