{"files":[{"patch":"@@ -2130,1 +2130,1 @@\n-    int length = subclasses == NULL ? 0 : subclasses->length();\n+    int length = subclasses->length();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4393,2 +4393,3 @@\n-     * implement this class or interface if it is sealed. The order of such elements\n-     * is unspecified. If this {@code Class} object represents a primitive type,\n+     * implement this class or interface if it is sealed.  The order of such elements\n+     * is unspecified. The array is empty if this sealed class or interface has no\n+     * permitted subclass. If this {@code Class} object represents a primitive type,\n@@ -4396,1 +4397,3 @@\n-     * then null is returned.\n+     * that is {@link #isSealed()} returns {@code false}, then this method returns {@code null}.\n+     * Conversely, if {@link #isSealed()} returns {@code true}, then this method\n+     * returns a non-null value.\"\n@@ -4409,1 +4412,2 @@\n-     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n+     *         or {@code null} if this class or interface is not sealed.\n@@ -4472,1 +4476,3 @@\n-     * {@code false}.\n+     * {@code false}. A sealed class or interface has (possibly zero) permitted\n+     * subclasses; {@link #getPermittedSubclasses()} returns a non-null but\n+     * possibly empty value for a sealed class or interface.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}