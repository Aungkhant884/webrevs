{"files":[{"patch":"@@ -3351,4 +3351,0 @@\n-  if (length < 1) {\n-    classfile_parse_error(\"PermittedSubclasses attribute is empty in class file %s\", THREAD);\n-    return 0;\n-  }\n@@ -3359,9 +3355,12 @@\n-  int index = 0;\n-  cfs->guarantee_more(2 * length, CHECK_0);\n-  for (int n = 0; n < length; n++) {\n-    const u2 class_info_index = cfs->get_u2_fast();\n-    check_property(\n-      valid_klass_reference_at(class_info_index),\n-      \"Permitted subclass class_info_index %u has bad constant type in class file %s\",\n-      class_info_index, CHECK_0);\n-    permitted_subclasses->at_put(index++, class_info_index);\n+  if (length > 0) {\n+    int index = 0;\n+    cfs->guarantee_more(2 * length, CHECK_0);\n+    for (int n = 0; n < length; n++) {\n+      const u2 class_info_index = cfs->get_u2_fast();\n+      check_property(\n+        valid_klass_reference_at(class_info_index),\n+        \"Permitted subclass class_info_index %u has bad constant type in class file %s\",\n+        class_info_index, CHECK_0);\n+      permitted_subclasses->at_put(index++, class_info_index);\n+    }\n+    assert(index == size, \"wrong size\");\n@@ -3369,1 +3368,0 @@\n-  assert(index == size, \"wrong size\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -744,2 +744,1 @@\n-         _permitted_subclasses != Universe::the_empty_short_array() &&\n-         _permitted_subclasses->length() > 0;\n+         _permitted_subclasses != Universe::the_empty_short_array();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2127,1 +2127,1 @@\n-  {\n+  if (ik->is_sealed()) {\n@@ -2130,1 +2130,1 @@\n-    int length = subclasses == NULL ? 0 : subclasses->length();\n+    int length = subclasses->length();\n@@ -2159,0 +2159,2 @@\n+  } else {\n+    return NULL;\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4393,2 +4393,3 @@\n-     * implement this class or interface if it is sealed. The order of such elements\n-     * is unspecified. If this {@code Class} object represents a primitive type,\n+     * implement this class or interface if it is sealed.  The order of such elements\n+     * is unspecified. The array is empty if this sealed class or interface has no\n+     * permitted subclass. If this {@code Class} object represents a primitive type,\n@@ -4396,1 +4397,3 @@\n-     * an empty array is returned.\n+     * that is {@link #isSealed()} returns {@code false}, then this method returns {@code null}.\n+     * Conversely, if {@link #isSealed()} returns {@code true}, then this method\n+     * returns a non-null value.\"\n@@ -4409,1 +4412,2 @@\n-     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n+     *         or {@code null} if this class or interface is not sealed.\n@@ -4426,2 +4430,2 @@\n-        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()).length == 0) {\n-            return EMPTY_CLASS_ARRAY;\n+        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()) == null) {\n+            return null;\n@@ -4472,1 +4476,3 @@\n-     * {@code false}.\n+     * {@code false}. A sealed class or interface has (possibly zero) permitted\n+     * subclasses; {@link #getPermittedSubclasses()} returns a non-null but\n+     * possibly empty value for a sealed class or interface.\n@@ -4486,1 +4492,1 @@\n-        return getPermittedSubclasses().length != 0;\n+        return getPermittedSubclasses() != null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-\/\/ this causes an exception to get thrown.\n+\/\/ this does not cause an exception to get thrown.\n@@ -226,4 +226,0 @@\n-    Attr(#11, 2) { \/\/ SourceFile at 0xD8\n-      #12;\n-    } \/\/ end SourceFile\n-    ;\n@@ -233,0 +229,4 @@\n+    ;\n+    Attr(#11, 2) { \/\/ SourceFile at 0xD8\n+      #12;\n+    } \/\/ end SourceFile\n@@ -237,0 +237,66 @@\n+\/\/ This class extends NoSubClasses to show that a class with an empty\n+\/\/ PermittedSubtypes attribute cannot be subclass-ed.\n+class SubClass {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  60; \/\/ version\n+  [13] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"NoSubclasses\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x26\n+    Utf8 \"()V\"; \/\/ #6     at 0x2F\n+    class #8; \/\/ #7     at 0x35\n+    Utf8 \"SubClass\"; \/\/ #8     at 0x38\n+    Utf8 \"Code\"; \/\/ #9     at 0x43\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4A\n+    Utf8 \"SourceFile\"; \/\/ #11     at 0x5C\n+    Utf8 \"SubClass.java\"; \/\/ #12     at 0x69\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [1] { \/\/ Methods\n+    {  \/\/ method at 0x85\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x8D\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xA4\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xB0\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#11, 2) { \/\/ SourceFile at 0xB2\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class SubClass\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclasses.jcod","additions":71,"deletions":5,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    public static void testSealedInfo(Class<?> c, String[] expected) {\n+    public static void testSealedInfo(Class<?> c, String[] expected, boolean isSealed) {\n@@ -56,4 +56,6 @@\n-        if (permitted.length != expected.length) {\n-            throw new RuntimeException(\n-                \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n-        }\n+        if (isSealed) {\n+            if (permitted.length != expected.length) {\n+                throw new RuntimeException(\n+                    \"Unexpected number of permitted subclasses for: \" + c.toString() +\n+                    \"(\" + java.util.Arrays.asList(permitted));\n+            }\n@@ -61,1 +63,0 @@\n-        if (permitted.length > 0) {\n@@ -86,2 +87,2 @@\n-            \/\/ Must not be sealed if no permitted subclasses.\n-            if (c.isSealed()) {\n+            \/\/ Must not be sealed.\n+            if (c.isSealed() || permitted != null) {\n@@ -93,1 +94,3 @@\n-    public static void testBadSealedClass(String className, String expectedCFEMessage) throws Throwable {\n+    public static void testBadSealedClass(String className,\n+                                          Class<?> expectedException,\n+                                          String expectedCFEMessage) throws Throwable {\n@@ -98,0 +101,4 @@\n+            if (ClassFormatError.class != expectedException) {\n+                throw new RuntimeException(\n+                    \"Class \" + className + \" got unexpected exception: \" + cfe.getMessage());\n+            }\n@@ -102,0 +109,9 @@\n+        } catch (IncompatibleClassChangeError icce) {\n+            if (IncompatibleClassChangeError.class != expectedException) {\n+                throw new RuntimeException(\n+                    \"Class \" + className + \" got unexpected exception: \" + icce.getMessage());\n+            }\n+            if (!icce.getMessage().contains(expectedCFEMessage)) {\n+                throw new RuntimeException(\n+                    \"Class \" + className + \" got unexpected IncompatibleClassChangeError exception: \" + icce.getMessage());\n+            }\n@@ -108,1 +124,2 @@\n-                                                     \"GetPermittedSubclassesTest$Extender\"});\n+                                                     \"GetPermittedSubclassesTest$Extender\"},\n+                                                     true);\n@@ -110,3 +127,3 @@\n-        testSealedInfo(Sealed1.class, new String[] {\"GetPermittedSubclassesTest$Sub1\"});\n-        testSealedInfo(Final4.class, new String[] { });\n-        testSealedInfo(NotSealed.class, new String[] { });\n+        testSealedInfo(Sealed1.class, new String[] {\"GetPermittedSubclassesTest$Sub1\"}, true);\n+        testSealedInfo(Final4.class, null, false);\n+        testSealedInfo(NotSealed.class, null, false);\n@@ -115,1 +132,1 @@\n-        testSealedInfo(OldClassFile.class, new String[] { });\n+        testSealedInfo(OldClassFile.class, null, false);\n@@ -118,1 +135,5 @@\n-        testBadSealedClass(\"NoSubclasses\", \"PermittedSubclasses attribute is empty\");\n+        testSealedInfo(NoSubclasses.class, new String[]{}, true);\n+\n+        \/\/ Test that a class with an empty PermittedSubclasses attribute cannot be subclass-ed.\n+        testBadSealedClass(\"SubClass\", IncompatibleClassChangeError.class,\n+                           \"SubClass cannot inherit from sealed class NoSubclasses\");\n@@ -121,1 +142,1 @@\n-        testSealedInfo(NoLoadSubclasses.class, new String[]{\"ExistingClassFile\" });\n+        testSealedInfo(NoLoadSubclasses.class, new String[]{\"ExistingClassFile\" }, true);\n@@ -125,2 +146,2 @@\n-        testBadSealedClass(\"BadPermittedAttr\",\n-                          \"Permitted subclass class_info_index 15 has bad constant type\");\n+        testBadSealedClass(\"BadPermittedAttr\", ClassFormatError.class,\n+                           \"Permitted subclass class_info_index 15 has bad constant type\");\n@@ -130,1 +151,2 @@\n-        testBadSealedClass(\"SealedButFinal\", \"PermittedSubclasses attribute in final class\");\n+        testBadSealedClass(\"SealedButFinal\", ClassFormatError.class,\n+                           \"PermittedSubclasses attribute in final class\");\n@@ -132,3 +154,4 @@\n-        \/\/ Test that loading a sealed class with a bad class name in its PermittedSubclasses\n-        \/\/ attribute causes a ClassFormatError.\n-        testBadSealedClass(\"BadPermittedSubclassEntry\", \"Illegal class name \\\"iDont;;Exist\\\" in class file\");\n+        \/\/ Test that loading a sealed class with an ill-formed class name in its\n+        \/\/ PermittedSubclasses attribute causes a ClassFormatError.\n+        testBadSealedClass(\"BadPermittedSubclassEntry\", ClassFormatError.class,\n+                           \"Illegal class name \\\"iDont;;Exist\\\" in class file\");\n@@ -138,1 +161,2 @@\n-        testBadSealedClass(\"EmptyPermittedSubclassEntry\", \"Illegal class name \\\"\\\" in class file\");\n+        testBadSealedClass(\"EmptyPermittedSubclassEntry\", ClassFormatError.class,\n+                           \"Illegal class name \\\"\\\" in class file\");\n@@ -142,2 +166,2 @@\n-        testSealedInfo(noSubclass.BaseC.class, new String[] {\"noSubclass.ImplCIntermediate\"});\n-        testSealedInfo(noSubclass.BaseI.class, new String[] {\"noSubclass.ImplIIntermediateI\", \"noSubclass.ImplIIntermediateC\"});\n+        testSealedInfo(noSubclass.BaseC.class, new String[] {\"noSubclass.ImplCIntermediate\"}, true);\n+        testSealedInfo(noSubclass.BaseI.class, new String[] {\"noSubclass.ImplIIntermediateI\", \"noSubclass.ImplIIntermediateC\"}, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":49,"deletions":25,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -113,2 +113,1 @@\n-        assertTrue(cls.getPermittedSubclasses() != null);\n-        assertTrue(cls.getPermittedSubclasses().length == 0);\n+        assertTrue(cls.getPermittedSubclasses() == null);\n@@ -131,2 +130,1 @@\n-        assertTrue(cls.getPermittedSubclasses() != null);\n-        assertTrue(cls.getPermittedSubclasses().length == 0);\n+        assertTrue(cls.getPermittedSubclasses() == null);\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/SealedClassesReflectionTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-            Assert.check(c.getPermittedSubclasses().length == 0);\n+            Assert.check(c.getPermittedSubclasses() == null);\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}