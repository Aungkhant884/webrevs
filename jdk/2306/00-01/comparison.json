{"files":[{"patch":"@@ -103,1 +103,1 @@\n-    int normalizedHash(byte[] a, int off, int len) throws ZipException {\n+    int checkedHash(byte[] a, int off, int len) throws ZipException {\n@@ -127,2 +127,3 @@\n-    \/\/ Matching normalized hash code function for Strings\n-    static int normalizedHash(String name) {\n+    \/\/ Hash code function for Strings matching the result of checkedHash\n+    \/\/ for byte array\n+    static int hash(String name) {\n@@ -209,1 +210,1 @@\n-        int normalizedHash(byte[] a, int off, int len) throws ZipException {\n+        int checkedHash(byte[] a, int off, int len) throws ZipException {\n@@ -225,1 +226,1 @@\n-                        return normalizedHash(JLA.newStringUTF8NoRepl(a, end - len, len));\n+                        return hash(JLA.newStringUTF8NoRepl(a, end - len, len));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1118,1 +1118,1 @@\n-        private static final int META_INF_LENGTH = 9;\n+        private static final int META_INF_LEN = 9;\n@@ -1151,1 +1151,1 @@\n-        \/\/ {@code hash}, {@code next and {@code \"pos for each entry. The entry can then be\n+        \/\/ {@code hash}, {@code next} and {@code pos} for each entry. The entry can then be\n@@ -1155,1 +1155,19 @@\n-        private int addEntry(int index, int[] table, int nlen, int pos, int entryPos) throws ZipException {\n+\n+        \/\/ Checks the entry at offset pos in the CEN, calculates the Entry values as per above,\n+        \/\/ then returns the length of the entry name.\n+        private int checkAndAddEntry(int pos, int index)\n+            throws ZipException\n+        {\n+            if (CENSIG(cen, pos) != CENSIG)\n+                zerror(\"invalid CEN header (bad signature)\");\n+            int method = CENHOW(cen, pos);\n+            int flag   = CENFLG(cen, pos);\n+            if ((flag & 1) != 0)\n+                zerror(\"invalid CEN header (encrypted entry)\");\n+            if (method != STORED && method != DEFLATED)\n+                zerror(\"invalid CEN header (bad compression method: \" + method + \")\");\n+\n+            int entryPos = pos + CENHDR;\n+            int nlen = CENNAM(cen, pos);\n+            if (entryPos + nlen > cen.length - ENDHDR)\n+                zerror(\"invalid CEN header (bad header size)\");\n@@ -1157,2 +1175,1 @@\n-            \/\/ Record the CEN offset and the name hash in our hash cell.\n-            int hash = zcp.normalizedHash(cen, entryPos, nlen);\n+            int hash = zcp.checkedHash(cen, entryPos, nlen);\n@@ -1162,0 +1179,1 @@\n+            \/\/ Record the CEN offset and the name hash in our hash cell.\n@@ -1165,1 +1183,1 @@\n-            return index;\n+            return nlen;\n@@ -1167,0 +1185,1 @@\n+\n@@ -1422,2 +1441,1 @@\n-            zerror(\"zip END header not found\");\n-            return null; \/\/make compiler happy\n+            throw new ZipException(\"zip END header not found\");\n@@ -1476,1 +1494,1 @@\n-            int idx = 0;\n+            int idx = 0; \/\/ Index into the entries array\n@@ -1488,14 +1506,5 @@\n-                if (CENSIG(cen, pos) != CENSIG)\n-                    zerror(\"invalid CEN header (bad signature)\");\n-                int method = CENHOW(cen, pos);\n-                int nlen   = CENNAM(cen, pos);\n-                int elen   = CENEXT(cen, pos);\n-                int clen   = CENCOM(cen, pos);\n-                int flag   = CENFLG(cen, pos);\n-                if ((flag & 1) != 0)\n-                    zerror(\"invalid CEN header (encrypted entry)\");\n-                if (method != STORED && method != DEFLATED)\n-                    zerror(\"invalid CEN header (bad compression method: \" + method + \")\");\n-                if (entryPos + nlen > limit)\n-                    zerror(\"invalid CEN header (bad header size)\");\n-                idx = addEntry(idx, table, nlen, pos, entryPos);\n+\n+                \/\/ Checks the entry and adds values to entries[idx ... idx+2]\n+                int nlen = checkAndAddEntry(pos, idx);\n+                idx += 3;\n+\n@@ -1505,2 +1514,1 @@\n-                    if (isManifestName(cen, entryPos + META_INF_LENGTH,\n-                            nlen - META_INF_LENGTH)) {\n+                    if (isManifestName(entryPos + META_INF_LEN, nlen - META_INF_LEN)) {\n@@ -1509,1 +1517,1 @@\n-                        if (isSignatureRelated(cen, entryPos, nlen)) {\n+                        if (isSignatureRelated(entryPos, nlen)) {\n@@ -1518,2 +1526,1 @@\n-                        int version = getMetaVersion(cen,\n-                            entryPos + META_INF_LENGTH, nlen - META_INF_LENGTH);\n+                        int version = getMetaVersion(entryPos + META_INF_LEN, nlen - META_INF_LEN);\n@@ -1527,2 +1534,2 @@\n-                \/\/ skip ext and comment\n-                pos = entryPos + nlen + elen + clen;\n+                \/\/ skip to the start of the next entry\n+                pos = nextEntryPos(pos, entryPos, nlen);\n@@ -1531,0 +1538,2 @@\n+\n+            \/\/ Adjust the total entries\n@@ -1532,0 +1541,1 @@\n+\n@@ -1553,0 +1563,4 @@\n+        private int nextEntryPos(int pos, int entryPos, int nlen) {\n+            return entryPos + nlen + CENCOM(cen, pos) + CENEXT(cen, pos);\n+        }\n+\n@@ -1566,1 +1580,1 @@\n-            int hsh = ZipCoder.normalizedHash(name);\n+            int hsh = ZipCoder.hash(name);\n@@ -1618,1 +1632,1 @@\n-            return len > META_INF_LENGTH       \/\/ \"META-INF\/\".length()\n+            return len > META_INF_LEN       \/\/ \"META-INF\/\".length()\n@@ -1634,1 +1648,2 @@\n-        private static boolean isManifestName(byte[] name, int off, int len) {\n+        private boolean isManifestName(int off, int len) {\n+            byte[] name = cen;\n@@ -1649,1 +1664,1 @@\n-        private static boolean isSignatureRelated(byte[] name, int off, int len) {\n+        private boolean isSignatureRelated(int off, int len) {\n@@ -1654,0 +1669,1 @@\n+            byte[] name = cen;\n@@ -1683,1 +1699,2 @@\n-        private static int getMetaVersion(byte[] name, int off, int len) {\n+        private int getMetaVersion(int off, int len) {\n+            byte[] name = cen;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":52,"deletions":35,"binary":false,"changes":87,"status":"modified"}]}