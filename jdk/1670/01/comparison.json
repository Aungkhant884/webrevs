{"files":[{"patch":"@@ -43,1 +43,1 @@\n- * This is the common base class of all Java language enumeration types.\n+ * This is the common base class of all Java language enumeration classes.\n@@ -50,1 +50,1 @@\n- * Enumeration types are all serializable and receive special handling\n+ * Enumeration classes are all serializable and receive special handling\n@@ -62,1 +62,1 @@\n- * @param <E> The enum type subclass\n+ * @param <E> The type of the enum subclass\n@@ -74,1 +74,1 @@\n-                            \/\/ special-casing of enum types.\n+                            \/\/ special-casing of enum classes.\n@@ -129,1 +129,1 @@\n-     * enum type declarations.\n+     * enum class declarations.\n@@ -145,1 +145,1 @@\n-     * isn't necessary or desirable.  An enum type should override this\n+     * isn't necessary or desirable.  An enum class should override this\n@@ -239,1 +239,1 @@\n-     * Returns the enum constant of the specified enum type with the\n+     * Returns the enum constant of the specified enum class with the\n@@ -241,1 +241,1 @@\n-     * to declare an enum constant in this type.  (Extraneous whitespace\n+     * to declare an enum constant in this class.  (Extraneous whitespace\n@@ -244,1 +244,1 @@\n-     * <p>Note that for a particular enum type {@code T}, the\n+     * <p>Note that for a particular enum class {@code T}, the\n@@ -248,1 +248,1 @@\n-     * constants of an enum type can be obtained by calling the\n+     * constants of an enum class can be obtained by calling the\n@@ -250,1 +250,1 @@\n-     * type.\n+     * class.\n@@ -252,2 +252,2 @@\n-     * @param <T> The enum type whose constant is to be returned\n-     * @param enumType the {@code Class} object of the enum type from which\n+     * @param <T> The enum class whose constant is to be returned\n+     * @param enumClass the {@code Class} object of the enum class from which\n@@ -256,1 +256,1 @@\n-     * @return the enum constant of the specified enum type with the\n+     * @return the enum constant of the specified enum class with the\n@@ -258,1 +258,1 @@\n-     * @throws IllegalArgumentException if the specified enum type has\n+     * @throws IllegalArgumentException if the specified enum class has\n@@ -260,2 +260,2 @@\n-     *         class object does not represent an enum type\n-     * @throws NullPointerException if {@code enumType} or {@code name}\n+     *         class object does not represent an enum class\n+     * @throws NullPointerException if {@code enumClass} or {@code name}\n@@ -265,1 +265,1 @@\n-    public static <T extends Enum<T>> T valueOf(Class<T> enumType,\n+    public static <T extends Enum<T>> T valueOf(Class<T> enumClass,\n@@ -267,1 +267,1 @@\n-        T result = enumType.enumConstantDirectory().get(name);\n+        T result = enumClass.enumConstantDirectory().get(name);\n@@ -273,1 +273,1 @@\n-            \"No enum constant \" + enumType.getCanonicalName() + \".\" + name);\n+            \"No enum constant \" + enumClass.getCanonicalName() + \".\" + name);\n@@ -310,1 +310,1 @@\n-         * @param constantType a {@link ClassDesc} describing the {@code enum} class\n+         * @param constantClass a {@link ClassDesc} describing the {@code enum} class\n@@ -315,2 +315,2 @@\n-        private EnumDesc(ClassDesc constantType, String constantName) {\n-            super(ConstantDescs.BSM_ENUM_CONSTANT, requireNonNull(constantName), requireNonNull(constantType));\n+        private EnumDesc(ClassDesc constantClass, String constantName) {\n+            super(ConstantDescs.BSM_ENUM_CONSTANT, requireNonNull(constantName), requireNonNull(constantClass));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Enum.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-     * and only if the argument is an instance of the same record type\n+     * and only if the argument is an instance of the same record class\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Record.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}