{"files":[{"patch":"@@ -126,12 +126,1 @@\n-\n-    \/*\n-     * If fd 0 is a socket it means we may have been launched from inetd or\n-     * xinetd. If it's a socket then check the family - if it's an\n-     * IPv4 socket then we need to disable IPv6.\n-     *\/\n-    if (getsockname(0, &sa.sa, &sa_len) == 0) {\n-        if (sa.sa.sa_family == AF_INET) {\n-            close(fd);\n-            return JNI_FALSE;\n-        }\n-    }\n+    close(fd);\n@@ -150,1 +139,0 @@\n-            close(fd);\n@@ -156,1 +144,0 @@\n-            close(fd);\n@@ -167,1 +154,0 @@\n-    close(fd);\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,0 @@\n-static int toInetFamily(SOCKETADDRESS *sa) {\n-    return (sa->sa.sa_family == (ipv6_available() ? AF_INET6 : AF_INET));\n-}\n-\n@@ -61,3 +57,1 @@\n-        if (toInetFamily(&sa)) {\n-            remote_ia = NET_SockaddrToInetAddress(env, &sa, (int *)&remote_port);\n-        }\n+        remote_ia = NET_SockaddrToInetAddress(env, &sa, (int *)&remote_port);\n@@ -92,3 +86,1 @@\n-        if (toInetFamily(&sa)) {\n-            NET_SockaddrToInetAddress(env, &sa, (int *)&remote_port);\n-        }\n+        NET_SockaddrToInetAddress(env, &sa, (int *)&remote_port);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/InheritedChannel.c","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channel;\n+import java.nio.channels.SocketChannel;\n+\n+public class CheckIPv6Service {\n+\n+    static boolean isIPv6Available() {\n+        try {\n+            new ServerSocket(0,0, InetAddress.getByAddress(new byte[16])).close();\n+            return true;\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    private static void doIt(SocketChannel sc, int closeAfter, int delay) throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate(1024);\n+        int total = 0;\n+        for (;;) {\n+            bb.clear();\n+            int n = sc.read(bb);\n+            if (n < 0) {\n+                break;\n+            }\n+            total += n;\n+\n+            \/\/ echo\n+            bb.flip();\n+            sc.write(bb);\n+\n+            \/\/ close after X bytes?\n+            if (closeAfter > 0 && total >= closeAfter) {\n+                break;\n+            }\n+        }\n+\n+        sc.close();\n+        if (delay > 0) {\n+            try {\n+                Thread.currentThread().sleep(delay);\n+            } catch (InterruptedException x) { }\n+        }\n+    }\n+\n+    public static void main(String args[]) throws IOException {\n+        \/\/ check if IPv6 is available; if it is, behave like EchoService.\n+        if (!isIPv6Available()) {\n+            return;\n+        }\n+\n+        Channel c = System.inheritedChannel();\n+        if (c == null) {\n+            return;\n+        }\n+\n+        if (c instanceof SocketChannel) {\n+            int closeAfter = 0;\n+            int delay = 0;\n+            if (args.length > 0) {\n+                closeAfter = Integer.parseInt(args[0]);\n+            }\n+            if (args.length > 1) {\n+                delay = Integer.parseInt(args[1]);\n+            }\n+            doIt((SocketChannel)c, closeAfter, delay);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/CheckIPv6Service.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+\n+\/**\n+ * This test verifies that a service launched with IPv4 inherited channel\n+ * can use IPv6 networking; this used to be impossible, see JDK-6914801\n+ *\/\n+public class CheckIPv6Test {\n+\n+    private static int failures = 0;\n+\n+    private static final String SERVICE = \"CheckIPv6Service\";\n+\n+    public static void main(String args[]) throws IOException {\n+\n+        if (!CheckIPv6Service.isIPv6Available()) {\n+            System.out.println(\"IPv6 not available. Test skipped.\");\n+            return;\n+        }\n+\n+        try {\n+            EchoTest.TCPEchoTest(SERVICE);\n+            System.out.println(\"IPv6 test passed.\");\n+        } catch (Exception x) {\n+            System.err.println(x);\n+            failures++;\n+        }\n+\n+        if (failures > 0) {\n+            throw new RuntimeException(\"Test failed - see log for details\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/CheckIPv6Test.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,2 @@\n-    private static void TCPEchoTest() throws IOException {\n-        SocketChannel sc = Launcher.launchWithInetSocketChannel(ECHO_SERVICE, null);\n+    static void TCPEchoTest(String echoService) throws IOException {\n+        SocketChannel sc = Launcher.launchWithInetSocketChannel(echoService, null);\n@@ -163,1 +163,1 @@\n-            TCPEchoTest();\n+            TCPEchoTest(ECHO_SERVICE);\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/EchoTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4673940 4930794 8211842\n+ * @bug 4673940 4930794 8211842 6914801\n@@ -38,0 +38,1 @@\n+ *        CheckIPv6Test CheckIPv6Service\n@@ -82,0 +83,1 @@\n+            { \"CheckIPv6Test\",  List.of(CheckIPv6Test.class.getName())  },\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/InheritedChannelTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import static java.net.StandardProtocolFamily.INET;\n@@ -103,5 +104,12 @@\n-        try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n-            ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n-            InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(),\n-                                                      ssc.socket().getLocalPort());\n-            SocketChannel sc1 = SocketChannel.open(isa);\n+        ServerSocketChannel ch;\n+        try {\n+            ch = ServerSocketChannel.open(INET);\n+            System.out.println(\"Using INET (IPv4) channel\");\n+        } catch (Exception e) {\n+            ch = ServerSocketChannel.open();\n+            System.out.println(\"Using default channel (probably IPv6)\");\n+        }\n+        try (ServerSocketChannel ssc = ch) {\n+            ssc.socket().bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            System.out.println(\"Socket bound to \" + ssc.getLocalAddress());\n+            SocketChannel sc1 = SocketChannel.open(ssc.getLocalAddress());\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/Launcher.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}