{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.function.Function;\n@@ -100,9 +101,6 @@\n-           Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n-                  Location.INNER_CLASS)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n-                Location.SET_CLASS_FIELD_METHOD:\n-                locations();\n-        }\n-    },\n+           Location.SET_PUBLIC_1,\n+           cffv -> {\n+               return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n+                   Location.SET_CLASS_FIELD_METHOD:\n+                   Location.SET_PUBLIC_1;\n+           }),\n@@ -115,8 +113,6 @@\n-    PRIVATE(Modifier.PRIVATE, true, Location.SET_FIELD_METHOD_INNER_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n-                Location.SET_FIELD_METHOD:\n-                locations();\n-       }\n-    },\n+    PRIVATE(Modifier.PRIVATE, true, Location.SET_FIELD_METHOD_INNER_CLASS,\n+            cffv -> {\n+                return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n+                    Location.SET_FIELD_METHOD:\n+                    Location.SET_FIELD_METHOD_INNER_CLASS;\n+            }),\n@@ -129,8 +125,4 @@\n-    PROTECTED(Modifier.PROTECTED, true, Location.SET_FIELD_METHOD_INNER_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n-                Location.SET_FIELD_METHOD:\n-                locations();\n-        }\n-    },\n+    PROTECTED(Modifier.PROTECTED, true, Location.SET_FIELD_METHOD_INNER_CLASS,\n+              cffv -> {return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n+                      Location.SET_FIELD_METHOD:\n+                      Location.SET_FIELD_METHOD_INNER_CLASS;}),\n@@ -143,4 +135,2 @@\n-    STATIC(Modifier.STATIC, true, Location.SET_FIELD_METHOD_INNER_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n+    STATIC(Modifier.STATIC, true, Location.SET_FIELD_METHOD_INNER_CLASS,\n+           cffv -> {return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n@@ -148,3 +138,1 @@\n-                locations();\n-        }\n-    },\n+                Location.SET_FIELD_METHOD_INNER_CLASS;}),\n@@ -158,16 +146,10 @@\n-          Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n-                 Location.INNER_CLASS,     \/* added in 1.1 *\/\n-                 Location.METHOD_PARAMETER \/* added in 8 *\/ )) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            if (cffv.compareTo(ClassFileFormatVersion.RELEASE_8) >= 0) {\n-                return locations();\n-            } else {\n-                if (cffv == ClassFileFormatVersion.RELEASE_0) {\n-                    return Location.SET_CLASS_FIELD_METHOD;\n-                } else {\n-                    return Location.SET_CLASS_FIELD_METHOD_INNER_CLASS;\n-                }\n-            }\n-        }\n-    },\n+          Location.SET_FINAL_8,\n+          cffv -> {\n+              if (cffv.compareTo(ClassFileFormatVersion.RELEASE_8) >= 0) {\n+                  return Location.SET_FINAL_8;\n+              } else {\n+                  return (cffv == ClassFileFormatVersion.RELEASE_0) ?\n+                      Location.SET_CLASS_FIELD_METHOD :\n+                      Location.SET_CLASS_FIELD_METHOD_INNER_CLASS;\n+              }\n+          }),\n@@ -183,1 +165,1 @@\n-    SUPER(0x0000_0020, false, Location.SET_CLASS),\n+    SUPER(0x0000_0020, false, Location.SET_CLASS, null),\n@@ -190,8 +172,4 @@\n-    OPEN(0x0000_0020, false, Set.of(Location.MODULE)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+        OPEN(0x0000_0020, false, Location.SET_MODULE,\n+        cffv -> { return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n+            Location.SET_MODULE:\n+            Location.EMPTY_SET;}),\n@@ -204,8 +182,4 @@\n-    TRANSITIVE(0x0000_0020, false, Location.SET_MODULE_REQUIRES) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    TRANSITIVE(0x0000_0020, false, Location.SET_MODULE_REQUIRES,\n+               cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n+                       Location.SET_MODULE_REQUIRES:\n+                       Location.EMPTY_SET;}),\n@@ -218,1 +192,1 @@\n-    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Location.SET_METHOD),\n+    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Location.SET_METHOD, null),\n@@ -225,8 +199,4 @@\n-    STATIC_PHASE(0x0000_0040, false, Location.SET_MODULE_REQUIRES) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    STATIC_PHASE(0x0000_0040, false, Location.SET_MODULE_REQUIRES,\n+                 cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n+                         Location.SET_MODULE_REQUIRES:\n+                         Location.EMPTY_SET;}),\n@@ -239,1 +209,1 @@\n-    VOLATILE(Modifier.VOLATILE, true, Location.SET_FIELD),\n+    VOLATILE(Modifier.VOLATILE, true, Location.SET_FIELD, null),\n@@ -246,8 +216,4 @@\n-    BRIDGE(Modifier.BRIDGE, false, Location.SET_METHOD) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    BRIDGE(Modifier.BRIDGE, false, Location.SET_METHOD,\n+           cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n+                Location.SET_METHOD:\n+                Location.EMPTY_SET;}),\n@@ -260,1 +226,1 @@\n-    TRANSIENT(Modifier.TRANSIENT, true, Location.SET_FIELD),\n+    TRANSIENT(Modifier.TRANSIENT, true, Location.SET_FIELD, null),\n@@ -267,8 +233,5 @@\n-    VARARGS(Modifier.VARARGS, false, Location.SET_METHOD) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    VARARGS(Modifier.VARARGS, false, Location.SET_METHOD,\n+            cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n+                    Location.SET_METHOD:\n+                    Location.EMPTY_SET;}),\n+\n@@ -281,1 +244,1 @@\n-    NATIVE(Modifier.NATIVE, true, Location.SET_METHOD),\n+    NATIVE(Modifier.NATIVE, true, Location.SET_METHOD, null),\n@@ -288,8 +251,4 @@\n-    INTERFACE(Modifier.INTERFACE, false, Location.SET_CLASS_INNER_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_0) == 0 ) ?\n-                Location.SET_CLASS:\n-                locations();\n-        }\n-    },\n+    INTERFACE(Modifier.INTERFACE, false, Location.SET_CLASS_INNER_CLASS,\n+              cffv -> { return (cffv.compareTo(ClassFileFormatVersion.RELEASE_0) == 0 ) ?\n+                      Location.SET_CLASS:\n+                      Location.SET_CLASS_INNER_CLASS;}),\n@@ -303,8 +262,4 @@\n-             Set.of(Location.CLASS, Location.METHOD, Location.INNER_CLASS)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_0) == 0 ) ?\n-                Location.SET_CLASS_METHOD:\n-                locations();\n-        }\n-    },\n+             Location.SET_CLASS_METHOD_INNER_CLASS,\n+             cffv -> { return (cffv.compareTo(ClassFileFormatVersion.RELEASE_0) == 0 ) ?\n+                     Location.SET_CLASS_METHOD:\n+                     Location.SET_CLASS_METHOD_INNER_CLASS;}),\n@@ -322,9 +277,6 @@\n-    STRICT(Modifier.STRICT, true, Location.SET_METHOD) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2)  >= 0 &&\n-                    cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    STRICT(Modifier.STRICT, true, Location.SET_METHOD,\n+           cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_2)  >= 0 &&\n+                            cffv.compareTo(ClassFileFormatVersion.RELEASE_16) <= 0) ?\n+                   Location.SET_METHOD:\n+                   Location.EMPTY_SET;}),\n+\n@@ -339,22 +291,13 @@\n-    SYNTHETIC(Modifier.SYNTHETIC, false,\n-              \/\/ Added as an access flag in 7\n-              Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n-                     Location.INNER_CLASS,\n-                     Location.METHOD_PARAMETER, \/\/ Added in 8\n-                     \/\/ Module-related items added in 9\n-                     Location.MODULE, Location.MODULE_REQUIRES,\n-                     Location.MODULE_EXPORTS, Location.MODULE_OPENS)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            if (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 )\n-                return locations();\n-            else {\n-                return\n-                    switch(cffv) {\n-                    case RELEASE_7 -> Location.SET_SYNTHETIC_7;\n-                    case RELEASE_8 -> Location.SET_SYNTHETIC_8;\n-                    default        -> Location.EMPTY_SET;\n-                    };\n-            }\n-        }\n-    },\n+    SYNTHETIC(Modifier.SYNTHETIC, false, Location.SET_SYNTHETIC_9,\n+              cffv -> {\n+                  if (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 )\n+                      return Location.SET_SYNTHETIC_9;\n+                  else {\n+                      return\n+                          switch(cffv) {\n+                          case RELEASE_7 -> Location.SET_SYNTHETIC_7;\n+                          case RELEASE_8 -> Location.SET_SYNTHETIC_8;\n+                          default        -> Location.EMPTY_SET;\n+                          };\n+                  }\n+              }),\n@@ -367,8 +310,4 @@\n-    ANNOTATION(Modifier.ANNOTATION, false, Location.SET_CLASS_INNER_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    ANNOTATION(Modifier.ANNOTATION, false, Location.SET_CLASS_INNER_CLASS,\n+               cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n+                Location.SET_CLASS_INNER_CLASS:\n+                Location.EMPTY_SET;}),\n@@ -381,9 +320,4 @@\n-    ENUM(Modifier.ENUM, false,\n-         Set.of(Location.CLASS, Location.FIELD, Location.INNER_CLASS)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    },\n+    ENUM(Modifier.ENUM, false, Location.SET_CLASS_FIELD_INNER_CLASS,\n+         cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_5) >= 0 ) ?\n+                 Location.SET_CLASS_FIELD_INNER_CLASS:\n+                 Location.EMPTY_SET;}),\n@@ -395,16 +329,10 @@\n-    MANDATED(Modifier.MANDATED, false,\n-             Set.of(Location.METHOD_PARAMETER, \/\/ From 8\n-                    \/\/ Starting in 9\n-                    Location.MODULE, Location.MODULE_REQUIRES,\n-                    Location.MODULE_EXPORTS, Location.MODULE_OPENS)) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            if (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) {\n-                return locations();\n-            } else if (cffv == ClassFileFormatVersion.RELEASE_8) {\n-                return Location.SET_METHOD_PARAM;\n-            } else { \/\/ Less than or equal to RELEASE_7\n-                return Location.EMPTY_SET;\n-            }\n-        }\n-    },\n+    MANDATED(Modifier.MANDATED, false, Location.SET_MANDATED_9,\n+             cffv -> {\n+                 if (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) {\n+                     return Location.SET_MANDATED_9;\n+                 } else {\n+                     return (cffv == ClassFileFormatVersion.RELEASE_8) ?\n+                         Location.SET_METHOD_PARAM:\n+                         Location.EMPTY_SET;\n+                 }\n+             }),\n@@ -416,8 +344,4 @@\n-    MODULE(0x0000_8000, false, Location.SET_CLASS) {\n-        @Override\n-        public Set<Location> locations(ClassFileFormatVersion cffv) {\n-            return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n-                locations():\n-                Location.EMPTY_SET;\n-        }\n-    }\n+    MODULE(0x0000_8000, false, Location.SET_CLASS,\n+           cffv -> {return (cffv.compareTo(ClassFileFormatVersion.RELEASE_9) >= 0 ) ?\n+                   Location.SET_CLASS:\n+                   Location.EMPTY_SET;})\n@@ -435,0 +359,2 @@\n+    \/\/ Lambda to implement locations(ClassFileFormatVersion cffv)\n+    private final Function<ClassFileFormatVersion, Set<Location>> cffvToLocations;\n@@ -436,1 +362,4 @@\n-    private AccessFlag(int mask, boolean sourceModifier, Set<Location> locations) {\n+    private AccessFlag(int mask,\n+                       boolean sourceModifier,\n+                       Set<Location> locations,\n+                       Function<ClassFileFormatVersion, Set<Location>> cffvToLocations) {\n@@ -440,0 +369,1 @@\n+        this.cffvToLocations = cffvToLocations;\n@@ -472,1 +402,5 @@\n-        return locations; \/\/ Default to supported unchanging locations\n+        if (cffvToLocations == null) {\n+            return locations;\n+        } else {\n+            return cffvToLocations.apply(cffv);\n+        }\n@@ -566,0 +500,3 @@\n+        private static final Set<Location> SET_MODULE = Set.of(MODULE);\n+        private static final Set<Location> SET_CLASS_METHOD_INNER_CLASS =\n+            Set.of(CLASS, METHOD, INNER_CLASS);\n@@ -567,1 +504,3 @@\n-            Set.of(Location.CLASS, Location.FIELD, Location.METHOD);\n+            Set.of(CLASS, FIELD, METHOD);\n+        private static final Set<Location> SET_CLASS_FIELD_INNER_CLASS =\n+            Set.of(CLASS, FIELD, INNER_CLASS);\n@@ -569,1 +508,1 @@\n-            Set.of(Location.CLASS, Location.FIELD, Location.METHOD, Location.INNER_CLASS);\n+            Set.of(CLASS, FIELD, METHOD, INNER_CLASS);\n@@ -571,1 +510,1 @@\n-            Set.of(Location.CLASS, Location.METHOD);\n+            Set.of(CLASS, METHOD);\n@@ -573,1 +512,1 @@\n-            Set.of(Location.FIELD, Location.METHOD);\n+            Set.of(FIELD, METHOD);\n@@ -584,0 +523,6 @@\n+        private static final Set<Location> SET_PUBLIC_1 =\n+            Set.of(CLASS, FIELD, METHOD, INNER_CLASS);\n+        private static final Set<Location> SET_FINAL_8 =\n+            Set.of(CLASS, FIELD, METHOD,\n+                   INNER_CLASS,     \/* added in 1.1 *\/\n+                   METHOD_PARAMETER); \/* added in 8 *\/\n@@ -585,2 +530,2 @@\n-              Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n-                     Location.INNER_CLASS);\n+              Set.of(CLASS, FIELD, METHOD,\n+                     INNER_CLASS);\n@@ -588,2 +533,15 @@\n-              Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n-                     Location.INNER_CLASS, Location.METHOD_PARAMETER);\n+              Set.of(CLASS, FIELD, METHOD,\n+                     INNER_CLASS, METHOD_PARAMETER);\n+        private static final Set<Location> SET_SYNTHETIC_9 =\n+              \/\/ Added as an access flag in 7\n+              Set.of(CLASS, FIELD, METHOD,\n+                     INNER_CLASS,\n+                     METHOD_PARAMETER, \/\/ Added in 8\n+                     \/\/ Module-related items added in 9\n+                     MODULE, MODULE_REQUIRES,\n+                     MODULE_EXPORTS, MODULE_OPENS);\n+        private static final Set<Location> SET_MANDATED_9 =\n+            Set.of(METHOD_PARAMETER, \/\/ From 8\n+                   \/\/ Starting in 9\n+                   MODULE, MODULE_REQUIRES,\n+                   MODULE_EXPORTS, MODULE_OPENS);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":149,"deletions":191,"binary":false,"changes":340,"status":"modified"},{"patch":"@@ -69,2 +69,1 @@\n-        \/\/ Class file version is stored like \"64.0\".\n-        int latestMajor = (int)Double.parseDouble(System.getProperty(\"java.class.version\"));\n+        int latestMajor = ClassFileFormatVersion.latest().major();\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassFileVersionTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}