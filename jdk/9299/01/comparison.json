{"files":[{"patch":"@@ -73,1 +73,1 @@\n- * The JVM class file format has a new version defined for each new\n+ * The JVM class file format has a {@linkplain ClassFileFormatVersion new version} defined for each new\n@@ -309,1 +309,2 @@\n-     * {@return kinds of constructs the flag can be applied to}\n+     * {@return kinds of constructs the flag can be applied to in the\n+     * latest class file format version}\n@@ -315,0 +316,13 @@\n+    \/**\n+     * {@return kinds of constructs the flag can be applied to in the\n+     * given class file format version}\n+     * @param cffv the class file format version to use\n+     *\/\n+    public Set<Location> locations(ClassFileFormatVersion cffv) {\n+        if (cffv == ClassFileFormatVersion.latest()) {\n+            return locations();\n+        } else {\n+            throw new UnsupportedOperationException(); \/\/ TOOD\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,349 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect;\n+\n+\/**\n+ * Class file format versions of the Java virtual machine.\n+ *\n+ * See the appropriate edition of <cite>The Java Virtual Machine\n+ * Specification<\/cite> for information about a particular class file\n+ * format version.\n+ *\n+ * <p>Note that additional class file format version constants will be\n+ * added to model future releases of the Java Virtual Machine\n+ * Specification.\n+ *\n+ * @since 20\n+ * @see java.compiler\/javax.lang.model.SourceVersion\n+ *\/\n+@SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n+public enum ClassFileFormatVersion {\n+\n+    \/**\n+     * The original version.\n+     *\n+     * The format described in <cite>The Java Virtual Specification,\n+     * First Edition<\/cite>.\n+     *\/\n+    RELEASE_0(45),\n+\n+    \/**\n+     * The version recognized by the Java Platform 1.1.\n+     *\n+     * @apiNote\n+     * While {@code RELEASE_0} and {@code RELEASE_1} have the same\n+     * {@linkplain #major() major version}, several additional\n+     * attributes were defined for {@code RELEASE_1} (JVMS {@jvms\n+     * 4.7}).\n+     *\n+     *\/\n+    RELEASE_1(45),\n+\n+    \/**\n+     * The version recognized by the Java 2 Platform, Standard Edition,\n+     * v 1.2.\n+     *\n+     * The format described in <cite>The Java Virtual Machine\n+     * Specification, Second Edition<\/cite>, which includes the {@link\n+     * AccessFlag#STRICT ACC_STRICT} access flag.\n+     *\/\n+    RELEASE_2(46),\n+\n+    \/**\n+     * The version recognized by the Java 2 Platform, Standard Edition,\n+     * v 1.3.\n+     *\/\n+    RELEASE_3(47),\n+\n+    \/**\n+     * The version recognized by the Java 2 Platform, Standard Edition,\n+     * v 1.4.\n+     *\/\n+    RELEASE_4(48),\n+\n+    \/**\n+     * The version recognized by the Java 2 Platform, Standard\n+     * Edition 5.0.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/maintenance\/jsr924\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Second Edition updated for Java SE 5.0<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=14\">\n+     * JSR 14: Add Generic Types To The Java&trade; Programming Language<\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=175\">\n+     * JSR 175: A Metadata Facility for the Java&trade; Programming Language<\/a>\n+     *\/\n+    RELEASE_5(49),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 6.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/jcp.org\/aboutJava\/communityprocess\/maintenance\/jsr924\/index2.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE, Second Edition updated for Java SE 6<\/cite><\/a>\n+     *\/\n+    RELEASE_6(50),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 7.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se7\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 7 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_7(51),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 8.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 8 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=335\">\n+     * JSR 335: Lambda Expressions for the Java&trade; Programming Language<\/a>\n+     *\/\n+    RELEASE_8(52),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 9.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 9 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/jcp.org\/en\/jsr\/detail?id=376\">\n+     * JSR 376: Java&trade; Platform Module System<\/a>\n+     *\/\n+     RELEASE_9(53),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 10.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se10\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 10 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_10(54),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 11.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se11\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 11 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.java.net\/jeps\/181\">\n+     * JEP 181: Nest-Based Access Control<\/a>\n+     *\/\n+    RELEASE_11(55),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 12.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se12\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 12 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_12(56),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 13.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se13\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 13 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_13(57),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 14.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se14\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 14 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_14(58),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 15.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se15\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 15 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.java.net\/jeps\/371\">\n+     * JEP 371: Hidden Classes<\/a>\n+     *\/\n+    RELEASE_15(59),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 16.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se16\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 16 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_16(60),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 17.\n+     *\n+     * Additions in this release include sealed classes and\n+     * restoration of always-strict floating-point semantics.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 17 Edition<\/cite><\/a>\n+     * @see <a href=\"https:\/\/openjdk.java.net\/jeps\/306\">\n+     * JEP 306: Restore Always-Strict Floating-Point Semantics<\/a>\n+     * @see <a href=\"https:\/\/openjdk.java.net\/jeps\/409\">\n+     * JEP 409: Sealed Classes<\/a>\n+     *\/\n+    RELEASE_17(61),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 18.\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se18\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 18 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_18(62),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 19.\n+     *\/\n+    RELEASE_19(63),\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 20.\n+     *\/\n+    RELEASE_20(64);\n+\n+    private int major;\n+\n+    private ClassFileFormatVersion(int major) {\n+        this.major = major;\n+    }\n+\n+    \/**\n+     * {@return the latest class file format version}\n+     *\/\n+    public static ClassFileFormatVersion latest() {\n+        return RELEASE_20;\n+    }\n+\n+    \/**\n+     * {@return the major class file version as an integer}\n+     * @jvms 4.1 The {@code ClassFile} Structure\n+     *\/\n+    public int major() {\n+        return major;\n+    }\n+\n+    \/**\n+     * {@return the latest class file format version that is usable\n+     * under the runtime version argument} If the runtime version's\n+     * {@linkplain Runtime.Version#feature() feature} is greater than\n+     * the feature of the {@linkplain #runtimeVersion() runtime\n+     * version} of the {@linkplain #latest() latest class file format\n+     * version}, an {@code IllegalArgumentException} is thrown.\n+     *\n+     * <p>Because the class file format versions of the Java platform\n+     * have so far followed a linear progression, only the feature\n+     * component of a runtime version is queried to determine the\n+     * mapping to a class file format version. If that linearity\n+     * changes in the future, other components of the runtime version\n+     * may influence the result.\n+     *\n+     * @apiNote\n+     * An expression to convert from a string value, for example\n+     * {@code \"17\"}, to the corresponding class file format version,\n+     * {@code RELEASE_17}, is:\n+     *\n+     * {@snippet lang=\"java\" :\n+     * ClassFileFormatVersion.valueOf(Runtime.Version.parse(\"17\"))}\n+     *\n+     * @param rv runtime version to map to a class file format version\n+     * @throws IllegalArgumentException if the feature of version\n+     * argument is greater than the feature of the platform version.\n+     *\/\n+    public static ClassFileFormatVersion valueOf(Runtime.Version rv) {\n+        \/\/ Could also implement this as a switch where a case was\n+        \/\/ added with each new release.\n+        return valueOf(\"RELEASE_\" + rv.feature());\n+    }\n+\n+    \/**\n+     * {@return the least runtime version that supports this class\n+     * file format version; otherwise {@code null}} The returned\n+     * runtime version has a {@linkplain Runtime.Version#feature()\n+     * feature} large enough to support this class file format version\n+     * and has no other elements set.\n+     *\n+     * Class file format versions greater than or equal to {@link\n+     * RELEASE_6} have non-{@code null} results.\n+     *\/\n+    public Runtime.Version runtimeVersion() {\n+        \/\/ Starting with Java SE 6, the leading digit was the primary\n+        \/\/ way of identifying the platform version.\n+        if (this.compareTo(RELEASE_6) >= 0) {\n+            return Runtime.Version.parse(Integer.toString(ordinal()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    \/**\n+     * {@return the latest class file format version whose major class\n+     * file version matches the argument}\n+     * @param major the major class file version as an integer\n+     * @throws IllegalArgumentException if the argument is outside of\n+     * the range of major class file versions\n+     *\/\n+    public static ClassFileFormatVersion fromMajor(int major) {\n+        if (major < 45  \/\/ RELEASE_0.major()\n+            || major > latest().major()) {\n+            throw new IllegalArgumentException(\"Out of range major class file vesion \"\n+                                               + major);\n+        }\n+        \/\/ RELEASE_0 and RELEASE_1 both have a major version of 45;\n+        \/\/ return RELEASE_1 for an argument of 45.\n+        return values()[major-44];\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":349,"deletions":0,"binary":false,"changes":349,"status":"added"},{"patch":"@@ -43,0 +43,1 @@\n+ * @see java.lang.reflect.ClassFileFormatVersion\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}