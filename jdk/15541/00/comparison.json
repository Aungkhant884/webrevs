{"files":[{"patch":"@@ -2219,1 +2219,1 @@\n-    const int* node_ids = _numa->node_ids();\n+    const uint* node_ids = _numa->node_ids();\n@@ -2222,1 +2222,1 @@\n-      st->print(\"%d=%u \", node_ids[node_index], num_free_regions);\n+      st->print(\"%u=%u \", node_ids[node_index], num_free_regions);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-      const int* node_ids = numa->node_ids();\n+      const uint* node_ids = numa->node_ids();\n@@ -121,1 +121,1 @@\n-        ls.print(\"%d: %u->%u\", node_ids[i], before_per_node_length[i], after_per_node_length[i]);\n+        ls.print(\"%u: %u->%u\", node_ids[i], before_per_node_length[i], after_per_node_length[i]);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-const int* G1NUMA::node_ids() const {\n+const uint* G1NUMA::node_ids() const {\n@@ -65,2 +65,1 @@\n-uint G1NUMA::index_of_node_id(int node_id) const {\n-  assert(node_id >= 0, \"invalid node id %d\", node_id);\n+uint G1NUMA::index_of_node_id(uint node_id) const {\n@@ -83,1 +82,1 @@\n-  _node_ids = NEW_C_HEAP_ARRAY(int, _num_active_node_ids, mtGC);\n+  _node_ids = NEW_C_HEAP_ARRAY(uint, _num_active_node_ids, mtGC);\n@@ -101,2 +100,2 @@\n-  _node_ids = NEW_C_HEAP_ARRAY(int, num_node_ids, mtGC);\n-  _num_active_node_ids = (uint)os::numa_get_leaf_groups(_node_ids, num_node_ids);\n+  _node_ids = NEW_C_HEAP_ARRAY(uint, num_node_ids, mtGC);\n+  _num_active_node_ids = checked_cast<uint>(os::numa_get_leaf_groups(reinterpret_cast<int*>(_node_ids), num_node_ids));\n@@ -104,1 +103,1 @@\n-  int max_node_id = 0;\n+  uint max_node_id = 0;\n@@ -114,1 +113,1 @@\n-  for (int i = 0; i < _len_node_id_to_index_map; i++) {\n+  for (uint i = 0; i < _len_node_id_to_index_map; i++) {\n@@ -128,2 +127,2 @@\n-  FREE_C_HEAP_ARRAY(int, _node_id_to_index_map);\n-  FREE_C_HEAP_ARRAY(int, _node_ids);\n+  FREE_C_HEAP_ARRAY(uint, _node_id_to_index_map);\n+  FREE_C_HEAP_ARRAY(uint, _node_ids);\n@@ -162,1 +161,1 @@\n-int G1NUMA::numa_id(int index) const {\n+uint G1NUMA::numa_id(uint index) const {\n@@ -173,1 +172,1 @@\n-    return index_of_node_id(numa_id);\n+    return index_of_node_id(checked_cast<uint>(numa_id));\n@@ -221,1 +220,1 @@\n-  log_trace(gc, heap, numa)(\"Request memory [\" PTR_FORMAT \", \" PTR_FORMAT \") to be NUMA id (%d)\",\n+  log_trace(gc, heap, numa)(\"Request memory [\" PTR_FORMAT \", \" PTR_FORMAT \") to be NUMA id (%u)\",\n@@ -223,1 +222,1 @@\n-  os::numa_make_local((char*)aligned_address, size_in_bytes, _node_ids[node_index]);\n+  os::numa_make_local((char*)aligned_address, size_in_bytes, checked_cast<int>(_node_ids[node_index]));\n@@ -282,1 +281,1 @@\n-  const int* numa_ids = _numa->node_ids();\n+  const uint* numa_ids = _numa->node_ids();\n@@ -284,1 +283,1 @@\n-    _ls->print(\"%d: %u\/%u\/%u \", numa_ids[i], _matched[i], _mismatched[i], _total[i]);\n+    _ls->print(\"%u: %u\/%u\/%u \", numa_ids[i], _matched[i], _mismatched[i], _total[i]);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  int _len_node_id_to_index_map;\n+  uint _len_node_id_to_index_map;\n@@ -45,1 +45,1 @@\n-  int* _node_ids;\n+  uint* _node_ids;\n@@ -62,1 +62,1 @@\n-  inline uint index_of_node_id(int node_id) const;\n+  inline uint index_of_node_id(uint node_id) const;\n@@ -89,1 +89,1 @@\n-  int numa_id(int index) const;\n+  uint numa_id(uint index) const;\n@@ -92,1 +92,1 @@\n-  const int* node_ids() const;\n+  const uint* node_ids() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-G1NUMAStats::G1NUMAStats(const int* node_ids, uint num_node_ids) :\n+G1NUMAStats::G1NUMAStats(const uint* node_ids, uint num_node_ids) :\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  const int* _node_ids;\n+  const uint* _node_ids;\n@@ -104,1 +104,1 @@\n-  G1NUMAStats(const int* node_ids, uint num_node_ids);\n+  G1NUMAStats(const uint* node_ids, uint num_node_ids);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-      st->print(\"|%d\", numa->numa_id(node_index()));\n+      st->print(\"|%u\", numa->numa_id(node_index()));\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -588,2 +588,2 @@\n-    int num_node_ids = (int)numa->num_active_nodes();\n-    const int* node_ids = numa->node_ids();\n+    int num_node_ids = checked_cast<int>(numa->num_active_nodes());\n+    const uint* node_ids = numa->node_ids();\n@@ -593,1 +593,1 @@\n-      result->int_at_put(i, (jint)node_ids[i]);\n+      result->int_at_put(i, checked_cast<jint>(node_ids[i]));\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}