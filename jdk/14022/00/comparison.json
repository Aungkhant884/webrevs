{"files":[{"patch":"@@ -2695,4 +2695,3 @@\n-        \"The target VM may not support, or may only provide limited support, for this \"\n-        \"command when the thread is a virtual thread. It may, for example, only support \"\n-        \"this command when the virtual thread is suspended at a breakpoint or singlestep \"\n-        \"event.\"\n+        \"This command may be used to pop frames of a virtual thread when \"\n+        \"it is suspended at an event. An implementation may support popping \"\n+        \"the frames of a suspended virtual thread in other cases.\"\n@@ -2716,2 +2715,2 @@\n-                                     \"thread is a virtual thread and the implementation \"\n-                                     \"is unable to pop the frames.\")\n+                                     \"thread is a suspended virtual thread and the implementation \"\n+                                     \"was unable to pop the frames.\")\n","filename":"src\/java.se\/share\/data\/jdwp\/jdwp.spec","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -378,4 +378,3 @@\n-     * The target VM may not support, or may only provide limited support,\n-     * for popping stack frames when the thread is a virtual thread.\n-     * It may, for example, only support this operation when the virtual\n-     * thread is suspended at a breakpoint or singlestep event.\n+     * This method may be used to pop frames of a virtual thread when\n+     * it is suspended at an event. An implementation may support popping\n+     * the frames of a suspended virtual thread in other cases.\n@@ -406,2 +405,2 @@\n-     * @throws OpaqueFrameException if this thread is a virtual thread and the\n-     * target VM is unable to pop the frames.\n+     * @throws OpaqueFrameException if this thread is a suspended virtual thread and the\n+     * target VM was unable to pop the frames.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/ThreadReference.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -399,1 +399,14 @@\n-                    throw new OpaqueFrameException();  \/\/ can only happen with virtual threads\n+                    \/\/ We first need to find out if the current frame is native.\n+                    StackFrameImpl sf;\n+                    try {\n+                        sf = (StackFrameImpl)thread.frame(0);\n+                    } catch (IndexOutOfBoundsException e) {\n+                        throw new InvalidStackFrameException(\"No more frames on the stack\");\n+                    }\n+                    sf.validateStackFrame();\n+                    MethodImpl meth = (MethodImpl)sf.location().method();\n+                    if (meth.isNative()) {\n+                        throw new NativeMethodException();\n+                    } else {\n+                        throw new OpaqueFrameException();\n+                    }\n@@ -401,1 +414,1 @@\n-                    throw new NativeMethodException(); \/\/ can only happen with platform threads\n+                    throw new NativeMethodException();\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/StackFrameImpl.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -98,24 +98,0 @@\n-####\n-## JVMTI PopFrame() is returning OPAQUE_FRAME because vthreads are not supported.\n-## Note: vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes001 was converted\n-## to support vthreads and expect the OPAQUE_FRAME error. The others were\n-## not because they don't add any additional value.\n-\n-vmTestbase\/nsk\/jdb\/pop_exception\/pop_exception001\/pop_exception001.java 8285414 generic-all\n-\n-vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses002\/TestDescription.java 8285414 generic-all\n-\n-vmTestbase\/nsk\/jdi\/Scenarios\/invokeMethod\/popframes001\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc01x002\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc02x001\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc02x002\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc04x001\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc04x002\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc06x001\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc08x001\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/BScenarios\/hotswap\/tc10x002\/TestDescription.java 8285414 generic-all\n-\n-vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes002\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes003\/TestDescription.java 8285414 generic-all\n-vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes004\/TestDescription.java 8285414 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -96,2 +96,0 @@\n-    static boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n-\n@@ -224,4 +222,0 @@\n-            if (vthreadMode) {\n-                return 0; \/\/ just exit. we already got the expected OpaqueFrameException\n-            }\n-\n@@ -359,18 +353,4 @@\n-                if (vthreadMode) {\n-                    log3(\"ERROR: Expected OpaqueFrameException\");\n-                    testExitCode = FAILED;\n-                }\n-            } catch ( Exception e ) {\n-                if (vthreadMode && (e instanceof OpaqueFrameException)) {\n-                    \/\/ pass. resume thread and exit\n-                    log2(\"......got expected OpaqueFrameException\");\n-                    log2(\"......thread2Ref.resume();\");\n-                    thread2Ref.resume();\n-                    breakpointForCommunication();\n-                    vm.resume();\n-                    break;\n-                } else {\n-                    log3(\"ERROR: \" + e.getClass().getSimpleName());\n-                    testExitCode = FAILED;\n-                    throw e;\n-                }\n+            } catch ( IncompatibleThreadStateException e ) {\n+                log3(\"ERROR: IncompatibleThreadStateException\");\n+                testExitCode = FAILED;\n+                break;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/popFrames\/popframes001.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-com\/sun\/jdi\/PopAndStepTest.java 8285422 generic-all\n-com\/sun\/jdi\/PopAsynchronousTest.java 8285422 generic-all\n-com\/sun\/jdi\/PopSynchronousTest.java 8285422 generic-all\n@@ -49,1 +46,0 @@\n-com\/sun\/jdi\/PopAndInvokeTest.java 8305632 generic-all\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}