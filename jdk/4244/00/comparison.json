{"files":[{"patch":"@@ -1157,0 +1157,5 @@\n+            if ((this == HELP || this == X || this == HELP_LINT || this == VERSION || this == FULLVERSION)\n+                    && (helper.get(this) != null)) {\n+                \/\/ avoid processing the info options repeatedly\n+                return;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8044859 8230623\n+ * @bug 8044859 8230623 8266239\n@@ -69,0 +69,18 @@\n+\n+    @Test\n+    void testUniqueInfoOpts() throws IOException {\n+        testUniqueInfoOpt(new String[] {\"--help\", \"--help\"}, \"possible options\");\n+        testUniqueInfoOpt(new String[] {\"-X\", \"-X\"}, \"extra options\");\n+        testUniqueInfoOpt(new String[] {\"--help-lint\", \"--help-lint\"}, \"supported keys\");\n+\n+        String specVersion = System.getProperty(\"java.specification.version\");\n+        testUniqueInfoOpt(new String[] {\"-version\", \"-version\"}, \"javac\", specVersion);\n+        testUniqueInfoOpt(new String[] {\"-fullversion\", \"-fullversion\"}, \"javac\", specVersion);\n+    }\n+\n+    void testUniqueInfoOpt(String[] opts, String... expect) {\n+        String[] files = { };\n+        runMain(opts, files)\n+                .checkOK()\n+                .checkUniqueLog(expect);\n+    }\n","filename":"test\/langtools\/tools\/javac\/options\/modes\/InfoOptsTest.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,0 +272,16 @@\n+        TestResult checkUniqueLog(String... uniqueExpects) {\n+            return checkUniqueLog(Log.DIRECT, uniqueExpects);\n+        }\n+\n+        TestResult checkUniqueLog(Log l, String... uniqueExpects) {\n+            String log = logs.get(l);\n+            for (String e : uniqueExpects) {\n+                if (!log.contains(e)) {\n+                    error(\"Expected string not found: \" + e);\n+                } else if (log.indexOf(e) != log.lastIndexOf(e)) {\n+                    error(\"Expected string appears more than once: \" + e);\n+                }\n+            }\n+            return this;\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/options\/modes\/OptionModesTester.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}