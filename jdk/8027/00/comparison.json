{"files":[{"patch":"@@ -0,0 +1,148 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+\n+# Hook to include the corresponding custom file, if present.\n+$(eval $(call IncludeCustomExtension, Doctor.gmk))\n+\n+################################################################################\n+#\n+# Help user diagnose possible errors and problems with the build environment.\n+#\n+\n+prologue:\n+\t$(ECHO)\n+\t$(ECHO) '\"make doctor\" will help you analyze your build environment. It can highlight'\n+\t$(ECHO) 'certain well-known problems, but it can never find all possible errors.'\n+\n+TARGETS += prologue\n+\n+check-git: prologue\n+\t$(ECHO)\n+\t$(ECHO) '* Verifying that configure has picked up git...'\n+        ifeq ($(GIT), )\n+\t  $(ECHO) 'WARNING: \"git\" is not present. This will disable several checks.'\n+\t  $(ECHO) '! Correct by installing git and verifying that it is in the PATH'\n+        endif\n+\n+TARGETS += check-git\n+\n+ifneq ($(GIT), )\n+  AUTOCRLF := $(shell $(GIT) config core.autocrlf)\n+endif\n+\n+check-autocrlf: check-git\n+        ifneq ($(GIT), )\n+          ifeq ($(call isBuildOs, windows), true)\n+\t    $(ECHO)\n+\t    $(ECHO) '* Verifying git core.autocrlf value...'\n+            ifneq ($(AUTOCRLF), false)\n+\t      $(ECHO) 'WARNING: core.autocrlf is not \"false\".  HIGH RISK of build failure!'\n+\t      $(ECHO) '! Correct by running 'git config --global core.autocrlf false' and re-cloning the repo'\n+            endif\n+          endif\n+        endif\n+\n+TARGETS += check-autocrlf\n+\n+check-configure-warnings: check-autocrlf\n+\t$(ECHO)\n+\t$(ECHO) '* Checking for warnings from configure...'\n+\twarning_output=`$(GREP) -e \"^\\* Memory limit:\" -A 300 $(OUTPUTDIR)\/configure.log | $(TAIL) -n +3 | $(SED) -e '$(DOLLAR){\/^$(DOLLAR)\/d;}'` && \\\n+\tif test -n \"$$warning_output\" ; then \\\n+\t  $(ECHO) ' ---' ; \\\n+\t  $(GREP) -e \"^\\* Memory limit:\" -A 300 $(OUTPUTDIR)\/configure.log | $(TAIL) -n +3 | $(SED) -e '$(DOLLAR){\/^$(DOLLAR)\/d;}' ; \\\n+\t  $(ECHO) ' ---' ; \\\n+\t  $(ECHO) '! Inspect the warnings, fix any problems, and re-run configure' ; \\\n+\tfi\n+\n+TARGETS += check-configure-warnings\n+\n+ifneq ($(GIT), )\n+  # This might have been set by custom component\n+  UNTRACKED_FILES ?= $(shell $(GIT) status --porcelain --ignored | $(CUT) -c 4-)\n+endif\n+\n+check-core-files: check-configure-warnings\n+        ifneq ($(GIT), )\n+\t  $(ECHO)\n+\t  $(ECHO) '* Checking for left-over core files...'\n+\t  core_files_found=`echo \"$(UNTRACKED_FILES)\" | $(TR) ' ' '\\n' | $(GREP) core` && \\\n+\t  if test -n \"$$core_files_found\" ; then \\\n+\t    $(ECHO) 'Found these potential core files. They might interfere with the build process:' ; \\\n+\t    $(ECHO) ' ---' ; \\\n+\t    $(ECHO) $$core_files_found | $(TR) ' ' '\\n'; \\\n+\t    $(ECHO) ' ---' ; \\\n+\t    $(ECHO) '! Remove left-over core files' ; \\\n+\t  fi || : # do nothing if grep returns non-0 value\n+        endif\n+\n+TARGETS += check-core-files\n+\n+check-bad-file-names: check-core-files\n+        ifneq ($(GIT), )\n+\t  $(ECHO)\n+\t  $(ECHO) '* Checking for untracked files with illegal names...'\n+\t  core_files_found=`echo \"$(UNTRACKED_FILES)\" | $(TR) ' ' '\\n' | $(GREP) '#'` && \\\n+\t  if test -n \"$$core_files_found\" ; then \\\n+\t    $(ECHO) 'Found these files with illegal names. They *will* cause build failures:' ; \\\n+\t    $(ECHO) ' ---' ; \\\n+\t    $(ECHO) $$core_files_found | $(TR) ' ' '\\n'; \\\n+\t    $(ECHO) ' ---' ; \\\n+\t    $(ECHO) '! Remove all files with '#' in their name from the JDK source tree' ; \\\n+\t  fi || : # do nothing if grep returns non-0 value\n+        endif\n+\n+TARGETS += check-bad-file-names\n+\n+epilogue: check-bad-file-names\n+\t$(ECHO)\n+\t$(ECHO) '* If all else fails, try removing the entire build directory and re-creating'\n+\t$(ECHO) 'the same configuration using:'\n+\t$(ECHO) ' ---' ; \\\n+\t$(ECHO) configure_command_line=\\$$\\(make print-configuration\\)\n+\t$(ECHO) make dist-clean\n+\t$(ECHO) bash configure \\$$configure_command_line\n+\t$(ECHO) ' ---' ; \\\n+\t$(ECHO)\n+\t$(ECHO) '* The build README (doc\/building.md) is a great source of information,'\n+\t$(ECHO) 'especially the chapter \"Fixing Unexpected Build Failures\". Check it out!'\n+\t$(ECHO)\n+\t$(ECHO) '* If you still need assistance please contact build-dev@openjdk.java.net.'\n+\t$(ECHO)\n+\n+TARGETS += epilogue\n+\n+################################################################################\n+\n+doctor: $(TARGETS)\n+\n+all: doctor\n+\n+.PHONY: default all doctor $(TARGETS)\n","filename":"make\/Doctor.gmk","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -355,1 +355,1 @@\n-\t$(PRINTF) \"Hint: See doc\/building.html#troubleshooting for assistance.\\n\\n\"\n+\t$(PRINTF) \"HELP: Run 'make doctor' to diagnose build problems.\\n\\n\"\n","filename":"make\/Init.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -315,8 +315,1 @@\n-      ifeq ($$(IS_GNU_DATE), yes)\n-        export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) --utc \\\n-            --date=\"@$$(SOURCE_DATE_EPOCH)\" +\"$$(ISO_8601_FORMAT_STRING)\" \\\n-            2> \/dev\/null)\n-      else\n-        export SOURCE_DATE_ISO_8601 := $$(shell $$(DATE) -u -j -f \"%s\" \\\n-            \"$$(SOURCE_DATE_EPOCH)\" +\"$$(ISO_8601_FORMAT_STRING)\" 2> \/dev\/null)\n-      endif\n+      export SOURCE_DATE_ISO_8601 := $$(call EpochToISO8601, $$(SOURCE_DATE_EPOCH))\n@@ -471,1 +464,1 @@\n-\t    $(PRINTF) \"\\nHint: Try searching the build log for the name of the first failed target.\\n\" ; \\\n+\t    $(PRINTF) \"\\nHELP: Try searching the build log for the name of the first failed target.\\n\" ; \\\n@@ -474,1 +467,1 @@\n-\t    $(PRINTF) \"Hint: Try searching the build log for '] Error'.\\n\" ; \\\n+\t    $(PRINTF) \"HELP: Try searching the build log for '] Error'.\\n\" ; \\\n","filename":"make\/InitSupport.gmk","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,0 +263,7 @@\n+################################################################################\n+# Help and user support\n+\n+$(eval $(call SetupTarget, doctor, \\\n+    MAKEFILE := Doctor, \\\n+))\n+\n","filename":"make\/Main.gmk","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+\n+################################################################################\n+# Convert an UNIX epoch based timestamp (as an integer) to an ISO 8601 date\n+# string.\n+# Param 1 - timestamp\n+ifeq ($(IS_GNU_DATE), yes)\n+  EpochToISO8601 = \\\n+    $(shell $(DATE) --utc --date=\"@$(strip $1)\" \\\n+         +\"$(ISO_8601_FORMAT_STRING)\" 2> \/dev\/null)\n+else\n+  EpochToISO8601 = \\\n+    $(shell $(DATE) -u -j -f \"%s\" \"$(strip $1)\" \\\n+         +\"$(ISO_8601_FORMAT_STRING)\" 2> \/dev\/null)\n+endif\n+\n","filename":"make\/common\/Utils.gmk","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}