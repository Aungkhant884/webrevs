{"files":[{"patch":"@@ -290,1 +290,1 @@\n-  template(jdk_internal_misc_Scoped_signature,    \"Ljdk\/internal\/misc\/ScopedMemoryAccess$Scoped;\") \\\n+  template(jdk_internal_misc_Scoped_signature,               \"Ljdk\/internal\/misc\/ScopedMemoryAccess$Scoped;\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * This class provides tools to manages races when multiple threads are accessing and\/or releasing the same memory\n+ * This class provides tools to manage races when multiple threads are accessing and\/or releasing the same memory\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -175,10 +177,5 @@\n-        RegisterKind[] kinds = RegisterKind.values();\n-\n-        SegmentFunction[] segmentFunctions = SegmentFunction.values();\n-        Object[][] data = new Object[cleaners.length * kinds.length * segmentFunctions.length][3];\n-\n-        for (int kind = 0 ; kind < kinds.length ; kind++) {\n-            for (int cleaner = 0 ; cleaner < cleaners.length ; cleaner++) {\n-                for (int segmentFunction = 0 ; segmentFunction < segmentFunctions.length ; segmentFunction++) {\n-                    data[kind + kinds.length * cleaner + (cleaners.length * kinds.length * segmentFunction)] =\n-                            new Object[] { kinds[kind], cleaners[cleaner], segmentFunctions[segmentFunction] };\n+        List<Object[]> data = new ArrayList<>();\n+        for (RegisterKind kind : RegisterKind.values()) {\n+            for (Object cleaner : cleaners) {\n+                for (SegmentFunction segmentFunction : SegmentFunction.values()) {\n+                    data.add(new Object[] {kind, cleaner, segmentFunction});\n@@ -188,2 +185,1 @@\n-\n-        return data;\n+        return data.toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestCleaner.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"}]}