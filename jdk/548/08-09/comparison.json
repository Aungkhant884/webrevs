{"files":[{"patch":"@@ -116,1 +116,1 @@\n-    MemoryScope confineTo(Thread newOwner) {\n+    final MemoryScope confineTo(Thread newOwner) {\n@@ -136,1 +136,1 @@\n-    MemoryScope share() {\n+    final MemoryScope share() {\n@@ -149,1 +149,1 @@\n-    MemoryScope cleanable(Cleaner cleaner) {\n+    final MemoryScope cleanable(Cleaner cleaner) {\n@@ -223,8 +223,0 @@\n-        @Override\n-        MemoryScope confineTo(Thread newOwner) {\n-            if (newOwner == owner) {\n-                throw new IllegalArgumentException(\"Segment already owned by thread: \" + newOwner);\n-            }\n-            return super.confineTo(newOwner);\n-        }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -143,0 +143,16 @@\n+    @Test\n+    public void testHandoffToSelf() {\n+        MemorySegment s1 = MemorySegment.ofArray(new int[4]);\n+        MemorySegment s2 = s1.handoff(Thread.currentThread());\n+        assertFalse(s1.isAlive());\n+        assertTrue(s2.isAlive());\n+    }\n+\n+    @Test\n+    public void testShareTwice() {\n+        MemorySegment s1 = MemorySegment.ofArray(new int[4]).share();\n+        MemorySegment s2 = s1.share();\n+        assertFalse(s1.isAlive());\n+        assertTrue(s2.isAlive());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}