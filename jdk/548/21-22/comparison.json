{"files":[{"patch":"@@ -59,1 +59,1 @@\n-    private static final VarHandle byte_LE_handle = unalignedHandle(MemoryLayouts.BITS_8_LE, byte.class);\n+    private static final VarHandle byte_handle = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());\n@@ -66,1 +66,0 @@\n-    private static final VarHandle byte_BE_handle = unalignedHandle(MemoryLayouts.BITS_8_BE, byte.class);\n@@ -96,1 +95,1 @@\n-        return getByteAtOffset(segment, offset, ByteOrder.nativeOrder());\n+        return (byte)byte_handle.get(segment, offset);\n@@ -107,1 +106,1 @@\n-        setByteAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n+        byte_handle.set(segment, offset, value);\n@@ -322,35 +321,0 @@\n-    \/**\n-     * Reads a byte from given segment and offset with given byte order.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.varHandle(byte.class, 1, order);\n-    byte value = (byte)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param order the specified byte order.\n-     * @return a byte value read from {@code segment}.\n-     *\/\n-    public static byte getByteAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n-        return (byte)((order == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment and offset with given byte order.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.varHandle(byte.class, 1, order);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param order the specified byte order.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByteAtOffset(MemorySegment segment, long offset, ByteOrder order, byte value) {\n-        ((order == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(segment, offset, value);\n-    }\n-\n@@ -562,1 +526,1 @@\n-     * Reads a byte from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a byte from given segment.\n@@ -577,1 +541,1 @@\n-     * Writes a byte at given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a byte at given segment.\n@@ -786,31 +750,0 @@\n-    \/**\n-     * Reads a byte from given segment, with given byte order.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    byte value = getByteAtOffset(segment, 0L, order);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param order the specified byte order.\n-     * @return a byte value read from {@code segment}.\n-     *\/\n-    public static byte getByte(MemorySegment segment, ByteOrder order) {\n-        return getByteAtOffset(segment, 0L, order);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment, with given byte order.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    setByteAtOffset(segment, 0L, order, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param order the specified byte order.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByte(MemorySegment segment, ByteOrder order, byte value) {\n-        setByteAtOffset(segment, 0L, order, value);\n-    }\n-\n@@ -997,31 +930,0 @@\n-    \/**\n-     * Reads a byte from given segment and element index.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    byte value = getByteAtOffset(segment, index);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index)}.\n-     * @return a byte value read from {@code segment} at the element index specified by {@code index}.\n-     *\/\n-    public static byte getByteAtIndex(MemorySegment segment, long index) {\n-        return getByteAtOffset(segment, index);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment and element index.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    setByteAtOffset(segment, index, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index)}.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByteAtIndex(MemorySegment segment, long index, byte value) {\n-        setByteAtOffset(segment, index, value);\n-    }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":5,"deletions":103,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-                MemoryAccess.setByteAtIndex(segment, i, (byte) i);\n+                MemoryAccess.setByteAtOffset(segment, i, (byte) i);\n@@ -583,1 +583,1 @@\n-                MemoryAccess.setByteAtIndex(segment, i, (byte) i);\n+                MemoryAccess.setByteAtOffset(segment, i, (byte) i);\n@@ -597,1 +597,1 @@\n-                MemoryAccess.setByteAtIndex(segment, i, (byte) i);\n+                MemoryAccess.setByteAtOffset(segment, i, (byte) i);\n@@ -662,1 +662,1 @@\n-                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByteAtIndex(addr, pos, (byte)(long)pos));\n+                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByteAtOffset(addr, pos, (byte)(long)pos));\n@@ -677,1 +677,1 @@\n-                (base) -> checkBytes(base, bytes, Function.identity(), (addr, pos) -> MemoryAccess.getByteAtIndex(addr, pos), ByteBuffer::get);\n+                (base) -> checkBytes(base, bytes, Function.identity(), (addr, pos) -> MemoryAccess.getByteAtOffset(addr, pos), ByteBuffer::get);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                sum += MemoryAccess.getByteAtIndex(segment, i);\n+                sum += MemoryAccess.getByteAtOffset(segment, i);\n@@ -168,1 +168,1 @@\n-            MemoryAccess.setByteAtIndex(copy, ThreadLocalRandom.current().nextInt(SEGMENT_SIZE), (byte)42);\n+            MemoryAccess.setByteAtOffset(copy, ThreadLocalRandom.current().nextInt(SEGMENT_SIZE), (byte)42);\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}