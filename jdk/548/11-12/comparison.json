{"files":[{"patch":"@@ -37,3 +37,3 @@\n- * The most primitive accessors (see {@link #getIntAtOffset(MemorySegment, long)}) take a segment and an offset (expressed in bytes).\n- * The final address at which the dereference will occur will be computed by offsetting the base address by\n- * the specified offset, as if by calling {@link MemoryAddress#addOffset(long)} on the specified base address.\n+ * The most primitive accessors (see {@link #getIntAtOffset(MemorySegment, long, ByteOrder)}) take a segment, an offset\n+ * (expressed in bytes) and a byte order. The final address at which the dereference will occur will be computed by offsetting\n+ * the base address by the specified offset, as if by calling {@link MemoryAddress#addOffset(long)} on the specified base address.\n@@ -41,1 +41,1 @@\n- * In cases where no offset is required, overloads are provided (see {@link #getInt(MemorySegment)}) so that\n+ * In cases where no offset is required, overloads are provided (see {@link #getInt(MemorySegment, ByteOrder)}) so that\n@@ -45,1 +45,1 @@\n- * layout of given size an element count), higher-level overloads are also provided (see {@link #getIntAtIndex(MemorySegment, long)}),\n+ * layout of given size an element count), higher-level overloads are also provided (see {@link #getIntAtIndex(MemorySegment, long, ByteOrder)}),\n@@ -49,0 +49,3 @@\n+ * <p>\n+ * In cases where native byte order is preferred, overloads are provided (see {@link #getIntAtOffset(MemorySegment, long)})\n+ * so that clients can omit the byte order parameter.\n@@ -56,730 +59,23 @@\n-    private static final VarHandle byte_LE_handle = indexedHandle(MemoryLayouts.BITS_8_LE, byte.class);\n-    private static final VarHandle char_LE_handle = indexedHandle(MemoryLayouts.BITS_16_LE, char.class);\n-    private static final VarHandle short_LE_handle = indexedHandle(MemoryLayouts.BITS_16_LE, short.class);\n-    private static final VarHandle int_LE_handle = indexedHandle(MemoryLayouts.BITS_32_LE, int.class);\n-    private static final VarHandle float_LE_handle = indexedHandle(MemoryLayouts.BITS_32_LE, float.class);\n-    private static final VarHandle long_LE_handle = indexedHandle(MemoryLayouts.BITS_64_LE, long.class);\n-    private static final VarHandle double_LE_handle = indexedHandle(MemoryLayouts.BITS_64_LE, double.class);\n-    private static final VarHandle byte_BE_handle = indexedHandle(MemoryLayouts.BITS_8_BE, byte.class);\n-    private static final VarHandle char_BE_handle = indexedHandle(MemoryLayouts.BITS_16_BE, char.class);\n-    private static final VarHandle short_BE_handle = indexedHandle(MemoryLayouts.BITS_16_BE, short.class);\n-    private static final VarHandle int_BE_handle = indexedHandle(MemoryLayouts.BITS_32_BE, int.class);\n-    private static final VarHandle float_BE_handle = indexedHandle(MemoryLayouts.BITS_32_BE, float.class);\n-    private static final VarHandle long_BE_handle = indexedHandle(MemoryLayouts.BITS_64_BE, long.class);\n-    private static final VarHandle double_BE_handle = indexedHandle(MemoryLayouts.BITS_64_BE, double.class);\n-    private static final VarHandle address_handle;\n-\n-    static {\n-        Class<?> carrier = switch ((int) MemoryLayouts.ADDRESS.byteSize()) {\n-            case 4 -> int.class;\n-            case 8 -> long.class;\n-            default -> throw new ExceptionInInitializerError(\"Unsupported pointer size: \" + MemoryLayouts.ADDRESS.byteSize());\n-        };\n-        address_handle = MemoryHandles.asAddressVarHandle(indexedHandle(MemoryLayouts.ADDRESS, carrier));\n-    }\n-\n-    \/**\n-     * Read a byte from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    byte value = (byte)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a byte value read from {@code segment}.\n-     *\/\n-    public static byte getByteAtOffset_LE(MemorySegment segment, long offset) {\n-        return (byte)byte_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByteAtOffset_LE(MemorySegment segment, long offset, byte value) {\n-        byte_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a char from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);\n-    char value = (char)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a char value read from {@code segment}.\n-     *\/\n-    public static char getCharAtOffset_LE(MemorySegment segment, long offset) {\n-        return (char)char_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a char at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the char value to be written.\n-     *\/\n-    public static void setCharAtOffset_LE(MemorySegment segment, long offset, char value) {\n-        char_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a short from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);\n-    short value = (short)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a short value read from {@code segment}.\n-     *\/\n-    public static short getShortAtOffset_LE(MemorySegment segment, long offset) {\n-        return (short)short_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a short at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the short value to be written.\n-     *\/\n-    public static void setShortAtOffset_LE(MemorySegment segment, long offset, short value) {\n-        short_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read an int from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);\n-    int value = (int)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return an int value read from {@code segment}.\n-     *\/\n-    public static int getIntAtOffset_LE(MemorySegment segment, long offset) {\n-        return (int)int_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes an int at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the int value to be written.\n-     *\/\n-    public static void setIntAtOffset_LE(MemorySegment segment, long offset, int value) {\n-        int_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a float from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);\n-    float value = (float)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a float value read from {@code segment}.\n-     *\/\n-    public static float getFloatAtOffset_LE(MemorySegment segment, long offset) {\n-        return (float)float_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a float at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the float value to be written.\n-     *\/\n-    public static void setFloatAtOffset_LE(MemorySegment segment, long offset, float value) {\n-        float_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a long from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);\n-    long value = (long)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a long value read from {@code segment}.\n-     *\/\n-    public static long getLongAtOffset_LE(MemorySegment segment, long offset) {\n-        return (long)long_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a long at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the long value to be written.\n-     *\/\n-    public static void setLongAtOffset_LE(MemorySegment segment, long offset, long value) {\n-        long_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a double from given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(double.class), 1L);\n-    double value = (double)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a double value read from {@code segment}.\n-     *\/\n-    public static double getDoubleAtOffset_LE(MemorySegment segment, long offset) {\n-        return (double)double_LE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a double at given segment and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(double.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the double value to be written.\n-     *\/\n-    public static void setDoubleAtOffset_LE(MemorySegment segment, long offset, double value) {\n-        double_LE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a byte from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    byte value = (byte)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a byte value read from {@code segment}.\n-     *\/\n-    public static byte getByteAtOffset_BE(MemorySegment segment, long offset) {\n-        return (byte)byte_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByteAtOffset_BE(MemorySegment segment, long offset, byte value) {\n-        byte_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a char from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);\n-    char value = (char)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a char value read from {@code segment}.\n-     *\/\n-    public static char getCharAtOffset_BE(MemorySegment segment, long offset) {\n-        return (char)char_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a char at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the char value to be written.\n-     *\/\n-    public static void setCharAtOffset_BE(MemorySegment segment, long offset, char value) {\n-        char_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a short from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);\n-    short value = (short)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a short value read from {@code segment}.\n-     *\/\n-    public static short getShortAtOffset_BE(MemorySegment segment, long offset) {\n-        return (short)short_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a short at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the short value to be written.\n-     *\/\n-    public static void setShortAtOffset_BE(MemorySegment segment, long offset, short value) {\n-        short_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read an int from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);\n-    int value = (int)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return an int value read from {@code segment}.\n-     *\/\n-    public static int getIntAtOffset_BE(MemorySegment segment, long offset) {\n-        return (int)int_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes an int at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the int value to be written.\n-     *\/\n-    public static void setIntAtOffset_BE(MemorySegment segment, long offset, int value) {\n-        int_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a float from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);\n-    float value = (float)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a float value read from {@code segment}.\n-     *\/\n-    public static float getFloatAtOffset_BE(MemorySegment segment, long offset) {\n-        return (float)float_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a float at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the float value to be written.\n-     *\/\n-    public static void setFloatAtOffset_BE(MemorySegment segment, long offset, float value) {\n-        float_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a long from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);\n-    long value = (long)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a long value read from {@code segment}.\n-     *\/\n-    public static long getLongAtOffset_BE(MemorySegment segment, long offset) {\n-        return (long)long_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a long at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the long value to be written.\n-     *\/\n-    public static void setLongAtOffset_BE(MemorySegment segment, long offset, long value) {\n-        long_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a double from given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(double.class), 1L);\n-    double value = (double)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a double value read from {@code segment}.\n-     *\/\n-    public static double getDoubleAtOffset_BE(MemorySegment segment, long offset) {\n-        return (double)double_BE_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a double at given segment and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(double.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the double value to be written.\n-     *\/\n-    public static void setDoubleAtOffset_BE(MemorySegment segment, long offset, double value) {\n-        double_BE_handle.set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a byte from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    byte value = (byte)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a byte value read from {@code segment}.\n-     *\/\n-    public static byte getByteAtOffset(MemorySegment segment, long offset) {\n-        return (byte)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a byte at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the byte value to be written.\n-     *\/\n-    public static void setByteAtOffset(MemorySegment segment, long offset, byte value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a char from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);\n-    char value = (char)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a char value read from {@code segment}.\n-     *\/\n-    public static char getCharAtOffset(MemorySegment segment, long offset) {\n-        return (char)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a char at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the char value to be written.\n-     *\/\n-    public static void setCharAtOffset(MemorySegment segment, long offset, char value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a short from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);\n-    short value = (short)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a short value read from {@code segment}.\n-     *\/\n-    public static short getShortAtOffset(MemorySegment segment, long offset) {\n-        return (short)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a short at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the short value to be written.\n-     *\/\n-    public static void setShortAtOffset(MemorySegment segment, long offset, short value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read an int from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);\n-    int value = (int)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return an int value read from {@code segment}.\n-     *\/\n-    public static int getIntAtOffset(MemorySegment segment, long offset) {\n-        return (int)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes an int at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the int value to be written.\n-     *\/\n-    public static void setIntAtOffset(MemorySegment segment, long offset, int value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a float from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);\n-    float value = (float)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a float value read from {@code segment}.\n-     *\/\n-    public static float getFloatAtOffset(MemorySegment segment, long offset) {\n-        return (float)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a float at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the float value to be written.\n-     *\/\n-    public static void setFloatAtOffset(MemorySegment segment, long offset, float value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a long from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);\n-    long value = (long)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a long value read from {@code segment}.\n-     *\/\n-    public static long getLongAtOffset(MemorySegment segment, long offset) {\n-        return (long)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a long at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the long value to be written.\n-     *\/\n-    public static void setLongAtOffset(MemorySegment segment, long offset, long value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a double from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);\n-    double value = (double)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a double value read from {@code segment}.\n-     *\/\n-    public static double getDoubleAtOffset(MemorySegment segment, long offset) {\n-        return (double)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a double at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);\n-    handle.set(segment, offset, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the double value to be written.\n-     *\/\n-    public static void setDoubleAtOffset(MemorySegment segment, long offset, double value) {\n-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).set(segment, offset, value);\n-    }\n-\n-    \/**\n-     * Read a memory address from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L));\n-    MemoryAddress value = (MemoryAddress)handle.get(segment, offset);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @return a memory address read from {@code segment}.\n-     *\/\n-    public static MemoryAddress getAddressAtOffset(MemorySegment segment, long offset) {\n-        return (MemoryAddress)address_handle.get(segment, offset);\n-    }\n-\n-    \/**\n-     * Writes a memory address at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L));\n-    handle.set(segment, offset, value.address());\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param offset offset (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n-     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n-     *\/\n-    public static void setAddressAtOffset(MemorySegment segment, long offset, Addressable value) {\n-        address_handle.set(segment, offset, value.address());\n+    private static final VarHandle byte_LE_handle = unalignedHandle(MemoryLayouts.BITS_8_LE, byte.class);\n+    private static final VarHandle char_LE_handle = unalignedHandle(MemoryLayouts.BITS_16_LE, char.class);\n+    private static final VarHandle short_LE_handle = unalignedHandle(MemoryLayouts.BITS_16_LE, short.class);\n+    private static final VarHandle int_LE_handle = unalignedHandle(MemoryLayouts.BITS_32_LE, int.class);\n+    private static final VarHandle float_LE_handle = unalignedHandle(MemoryLayouts.BITS_32_LE, float.class);\n+    private static final VarHandle long_LE_handle = unalignedHandle(MemoryLayouts.BITS_64_LE, long.class);\n+    private static final VarHandle double_LE_handle = unalignedHandle(MemoryLayouts.BITS_64_LE, double.class);\n+    private static final VarHandle byte_BE_handle = unalignedHandle(MemoryLayouts.BITS_8_BE, byte.class);\n+    private static final VarHandle char_BE_handle = unalignedHandle(MemoryLayouts.BITS_16_BE, char.class);\n+    private static final VarHandle short_BE_handle = unalignedHandle(MemoryLayouts.BITS_16_BE, short.class);\n+    private static final VarHandle int_BE_handle = unalignedHandle(MemoryLayouts.BITS_32_BE, int.class);\n+    private static final VarHandle float_BE_handle = unalignedHandle(MemoryLayouts.BITS_32_BE, float.class);\n+    private static final VarHandle long_BE_handle = unalignedHandle(MemoryLayouts.BITS_64_BE, long.class);\n+    private static final VarHandle double_BE_handle = unalignedHandle(MemoryLayouts.BITS_64_BE, double.class);\n+    private static final VarHandle address_handle;\n+\n+    static {\n+        Class<?> carrier = switch ((int) MemoryLayouts.ADDRESS.byteSize()) {\n+            case 4 -> int.class;\n+            case 8 -> long.class;\n+            default -> throw new ExceptionInInitializerError(\"Unsupported pointer size: \" + MemoryLayouts.ADDRESS.byteSize());\n+        };\n+        address_handle = MemoryHandles.asAddressVarHandle(unalignedHandle(MemoryLayouts.ADDRESS, carrier));\n@@ -788,1 +84,1 @@\n-    private static VarHandle indexedHandle(ValueLayout elementLayout, Class<?> carrier) {\n+    private static VarHandle unalignedHandle(ValueLayout elementLayout, Class<?> carrier) {\n@@ -793,1 +89,1 @@\n-     * Read a byte from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a byte from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -797,1 +93,1 @@\n-    byte value = getByteAtOffset_LE(segment, 0L);\n+    getByteAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -801,0 +97,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -803,2 +100,2 @@\n-    public static byte getByte_LE(MemorySegment segment) {\n-        return getByteAtOffset_LE(segment, 0L);\n+    public static byte getByteAtOffset(MemorySegment segment, long offset) {\n+        return getByteAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -808,1 +105,1 @@\n-     * Writes a byte at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a byte at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -812,1 +109,1 @@\n-    setByteAtOffset_LE(segment, 0L, value);\n+    setByteAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -815,0 +112,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -817,2 +115,2 @@\n-    public static void setByte_LE(MemorySegment segment, byte value) {\n-        setByteAtOffset_LE(segment, 0L, value);\n+    public static void setByteAtOffset(MemorySegment segment, long offset, byte value) {\n+        setByteAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -822,1 +120,1 @@\n-     * Read a char from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a char from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -826,1 +124,1 @@\n-    char value = getCharAtOffset_LE(segment, 0L);\n+    getCharAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -829,0 +127,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -831,2 +130,2 @@\n-    public static char getChar_LE(MemorySegment segment) {\n-        return getCharAtOffset_LE(segment, 0L);\n+    public static char getCharAtOffset(MemorySegment segment, long offset) {\n+        return getCharAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -836,1 +135,1 @@\n-     * Writes a char at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a char at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -840,1 +139,1 @@\n-    setCharAtOffset_LE(segment, 0L, value);\n+    setCharAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -843,0 +142,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -845,2 +145,2 @@\n-    public static void setChar_LE(MemorySegment segment, char value) {\n-        setCharAtOffset_LE(segment, 0L, value);\n+    public static void setCharAtOffset(MemorySegment segment, long offset, char value) {\n+        setCharAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -850,1 +150,1 @@\n-     * Read a short from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a short from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -854,1 +154,1 @@\n-    short value = getShortAtOffset_LE(segment, 0L);\n+    getShortAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -857,0 +157,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -859,2 +160,2 @@\n-    public static short getShort_LE(MemorySegment segment) {\n-        return getShortAtOffset_LE(segment, 0L);\n+    public static short getShortAtOffset(MemorySegment segment, long offset) {\n+        return getShortAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -864,1 +165,1 @@\n-     * Writes a short at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a short at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -868,1 +169,1 @@\n-    setShortAtOffset_LE(segment, 0L, value);\n+    setShortAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -871,0 +172,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -873,2 +175,2 @@\n-    public static void setShort_LE(MemorySegment segment, short value) {\n-        setShortAtOffset_LE(segment, 0L, value);\n+    public static void setShortAtOffset(MemorySegment segment, long offset, short value) {\n+        setShortAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -878,1 +180,1 @@\n-     * Read an int from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads an int from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -882,1 +184,1 @@\n-    int value = getIntAtOffset_LE(segment, 0L);\n+    getIntAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -885,0 +187,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -887,2 +190,2 @@\n-    public static int getInt_LE(MemorySegment segment) {\n-        return getIntAtOffset_LE(segment, 0L);\n+    public static int getIntAtOffset(MemorySegment segment, long offset) {\n+        return getIntAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -892,1 +195,1 @@\n-     * Writes an int at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes an int at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -896,1 +199,1 @@\n-    setIntAtOffset_LE(segment, 0L, value);\n+    setIntAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -899,0 +202,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -901,2 +205,2 @@\n-    public static void setInt_LE(MemorySegment segment, int value) {\n-        setIntAtOffset_LE(segment, 0L, value);\n+    public static void setIntAtOffset(MemorySegment segment, long offset, int value) {\n+        setIntAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -906,1 +210,1 @@\n-     * Read a float from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a float from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -910,1 +214,1 @@\n-    float value = getFloatAtOffset_LE(segment, 0L);\n+    getFloatAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -913,0 +217,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -915,2 +220,2 @@\n-    public static float getFloat_LE(MemorySegment segment) {\n-        return getFloatAtOffset_LE(segment, 0L);\n+    public static float getFloatAtOffset(MemorySegment segment, long offset) {\n+        return getFloatAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -920,1 +225,1 @@\n-     * Writes a float at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a float at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -924,1 +229,1 @@\n-    setFloatAtOffset_LE(segment, 0L, value);\n+    setFloatAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -927,0 +232,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -929,2 +235,2 @@\n-    public static void setFloat_LE(MemorySegment segment, float value) {\n-        setFloatAtOffset_LE(segment, 0L, value);\n+    public static void setFloatAtOffset(MemorySegment segment, long offset, float value) {\n+        setFloatAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -934,1 +240,1 @@\n-     * Read a long from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a long from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -938,1 +244,1 @@\n-    long value = getLongAtOffset_LE(segment, 0L);\n+    getLongAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -941,0 +247,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -943,2 +250,2 @@\n-    public static long getLong_LE(MemorySegment segment) {\n-        return getLongAtOffset_LE(segment, 0L);\n+    public static long getLongAtOffset(MemorySegment segment, long offset) {\n+        return getLongAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -948,1 +255,1 @@\n-     * Writes a long at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a long at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -952,1 +259,1 @@\n-    setLongAtOffset_LE(segment, 0L, value);\n+    setLongAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -955,0 +262,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -957,2 +265,2 @@\n-    public static void setLong_LE(MemorySegment segment, long value) {\n-        setLongAtOffset_LE(segment, 0L, value);\n+    public static void setLongAtOffset(MemorySegment segment, long offset, long value) {\n+        setLongAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -962,1 +270,1 @@\n-     * Read a double from given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a double from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -966,1 +274,1 @@\n-    double value = getDoubleAtOffset_LE(segment, 0L);\n+    getDoubleAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -969,0 +277,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -971,2 +280,2 @@\n-    public static double getDouble_LE(MemorySegment segment) {\n-        return getDoubleAtOffset_LE(segment, 0L);\n+    public static double getDoubleAtOffset(MemorySegment segment, long offset) {\n+        return getDoubleAtOffset(segment, offset, ByteOrder.nativeOrder());\n@@ -976,1 +285,1 @@\n-     * Writes a double at given segment, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a double at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -980,1 +289,1 @@\n-    setDoubleAtOffset_LE(segment, 0L, value);\n+    setDoubleAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -983,0 +292,1 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n@@ -985,2 +295,34 @@\n-    public static void setDouble_LE(MemorySegment segment, double value) {\n-        setDoubleAtOffset_LE(segment, 0L, value);\n+    public static void setDoubleAtOffset(MemorySegment segment, long offset, double value) {\n+        setDoubleAtOffset(segment, offset, ByteOrder.nativeOrder(), value);\n+    }\n+\n+    \/**\n+     * Reads a memory address from given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * <p>\n+     * This is equivalent (e.g. on a 64-bit platform) to the following code:\n+     * <blockquote><pre>{@code\n+    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder()));\n+    MemoryAddress value = (MemoryAddress)handle.get(segment, offset);\n+     * }<\/pre><\/blockquote>\n+     * @param segment the segment to be dereferenced.\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @return a memory address read from {@code segment}.\n+     *\/\n+    public static MemoryAddress getAddressAtOffset(MemorySegment segment, long offset) {\n+        return (MemoryAddress)address_handle.get(segment, offset);\n+    }\n+\n+    \/**\n+     * Writes a memory address at given segment and offset, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * <p>\n+     * This is equivalent (e.g. on a 64-bit platform) to the following code:\n+     * <blockquote><pre>{@code\n+    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder()));\n+    handle.set(segment, offset, value.address());\n+     * }<\/pre><\/blockquote>\n+     * @param segment the segment to be dereferenced.\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n+     *\/\n+    public static void setAddressAtOffset(MemorySegment segment, long offset, Addressable value) {\n+        address_handle.set(segment, offset, value.address());\n@@ -990,1 +332,1 @@\n-     * Read a byte from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a byte from given segment and offset with given byte order.\n@@ -994,1 +336,2 @@\n-    byte value = getByteAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(byte.class, 1, order);\n+    byte value = (byte)handle.get(segment, offset);\n@@ -998,0 +341,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1000,2 +345,2 @@\n-    public static byte getByte_BE(MemorySegment segment) {\n-        return getByteAtOffset_BE(segment, 0L);\n+    public static byte getByteAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (byte)((order == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(segment, offset);\n@@ -1005,1 +350,1 @@\n-     * Writes a byte at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a byte at given segment and offset with given byte order.\n@@ -1009,1 +354,2 @@\n-    setByteAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(byte.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1012,0 +358,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1014,2 +362,2 @@\n-    public static void setByte_BE(MemorySegment segment, byte value) {\n-        setByteAtOffset_BE(segment, 0L, value);\n+    public static void setByteAtOffset(MemorySegment segment, long offset, ByteOrder order, byte value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(segment, offset, value);\n@@ -1019,1 +367,1 @@\n-     * Read a char from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a char from given segment and offset with given byte order.\n@@ -1023,1 +371,2 @@\n-    char value = getCharAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(char.class, 1, order);\n+    char value = (char)handle.get(segment, offset);\n@@ -1026,0 +375,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1028,2 +379,2 @@\n-    public static char getChar_BE(MemorySegment segment) {\n-        return getCharAtOffset_BE(segment, 0L);\n+    public static char getCharAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (char)((order == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(segment, offset);\n@@ -1033,1 +384,1 @@\n-     * Writes a char at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a char at given segment and offset with given byte order.\n@@ -1037,1 +388,2 @@\n-    setCharAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(char.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1040,0 +392,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1042,2 +396,2 @@\n-    public static void setChar_BE(MemorySegment segment, char value) {\n-        setCharAtOffset_BE(segment, 0L, value);\n+    public static void setCharAtOffset(MemorySegment segment, long offset, ByteOrder order, char value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).set(segment, offset, value);\n@@ -1047,1 +401,1 @@\n-     * Read a short from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a short from given segment and offset with given byte order.\n@@ -1051,1 +405,2 @@\n-    short value = getShortAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(short.class, 1, order);\n+    short value = (short)handle.get(segment, offset);\n@@ -1054,0 +409,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1056,2 +413,2 @@\n-    public static short getShort_BE(MemorySegment segment) {\n-        return getShortAtOffset_BE(segment, 0L);\n+    public static short getShortAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (short)((order == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(segment, offset);\n@@ -1061,1 +418,1 @@\n-     * Writes a short at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a short at given segment and offset with given byte order.\n@@ -1065,1 +422,2 @@\n-    setShortAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(short.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1068,0 +426,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1070,2 +430,2 @@\n-    public static void setShort_BE(MemorySegment segment, short value) {\n-        setShortAtOffset_BE(segment, 0L, value);\n+    public static void setShortAtOffset(MemorySegment segment, long offset, ByteOrder order, short value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).set(segment, offset, value);\n@@ -1075,1 +435,1 @@\n-     * Read an int from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads an int from given segment and offset with given byte order.\n@@ -1079,1 +439,2 @@\n-    int value = getIntAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(int.class, 1, order);\n+    int value = (int)handle.get(segment, offset);\n@@ -1082,0 +443,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1084,2 +447,2 @@\n-    public static int getInt_BE(MemorySegment segment) {\n-        return getIntAtOffset_BE(segment, 0L);\n+    public static int getIntAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (int)((order == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(segment, offset);\n@@ -1089,1 +452,1 @@\n-     * Writes an int at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes an int at given segment and offset with given byte order.\n@@ -1093,1 +456,2 @@\n-    setIntAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(int.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1096,0 +460,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1098,2 +464,2 @@\n-    public static void setInt_BE(MemorySegment segment, int value) {\n-        setIntAtOffset_BE(segment, 0L, value);\n+    public static void setIntAtOffset(MemorySegment segment, long offset, ByteOrder order, int value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).set(segment, offset, value);\n@@ -1103,1 +469,1 @@\n-     * Read a float from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a float from given segment and offset with given byte order.\n@@ -1107,1 +473,2 @@\n-    float value = getFloatAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(float.class, 1, order);\n+    float value = (float)handle.get(segment, offset);\n@@ -1110,0 +477,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1112,2 +481,2 @@\n-    public static float getFloat_BE(MemorySegment segment) {\n-        return getFloatAtOffset_BE(segment, 0L);\n+    public static float getFloatAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (float)((order == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(segment, offset);\n@@ -1117,1 +486,1 @@\n-     * Writes a float at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a float at given segment and offset with given byte order.\n@@ -1121,1 +490,2 @@\n-    setFloatAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(float.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1124,0 +494,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1126,2 +498,2 @@\n-    public static void setFloat_BE(MemorySegment segment, float value) {\n-        setFloatAtOffset_BE(segment, 0L, value);\n+    public static void setFloatAtOffset(MemorySegment segment, long offset, ByteOrder order, float value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).set(segment, offset, value);\n@@ -1131,1 +503,1 @@\n-     * Read a long from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a long from given segment and offset with given byte order.\n@@ -1135,1 +507,2 @@\n-    long value = getLongAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(long.class, 1, order);\n+    long value = (long)handle.get(segment, offset);\n@@ -1138,0 +511,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1140,2 +515,2 @@\n-    public static long getLong_BE(MemorySegment segment) {\n-        return getLongAtOffset_BE(segment, 0L);\n+    public static long getLongAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (long)((order == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(segment, offset);\n@@ -1145,1 +520,1 @@\n-     * Writes a long at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a long at given segment and offset with given byte order.\n@@ -1149,1 +524,2 @@\n-    setLongAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(long.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1152,0 +528,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1154,2 +532,2 @@\n-    public static void setLong_BE(MemorySegment segment, long value) {\n-        setLongAtOffset_BE(segment, 0L, value);\n+    public static void setLongAtOffset(MemorySegment segment, long offset, ByteOrder order, long value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).set(segment, offset, value);\n@@ -1159,1 +537,1 @@\n-     * Read a double from given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a double from given segment and offset with given byte order.\n@@ -1163,1 +541,2 @@\n-    double value = getDoubleAtOffset_BE(segment, 0L);\n+    VarHandle handle = MemoryHandles.varHandle(double.class, 1, order);\n+    double value = (double)handle.get(segment, offset);\n@@ -1166,0 +545,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1168,2 +549,2 @@\n-    public static double getDouble_BE(MemorySegment segment) {\n-        return getDoubleAtOffset_BE(segment, 0L);\n+    public static double getDoubleAtOffset(MemorySegment segment, long offset, ByteOrder order) {\n+        return (double)((order == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(segment, offset);\n@@ -1173,1 +554,1 @@\n-     * Writes a double at given segment, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a double at given segment and offset with given byte order.\n@@ -1177,1 +558,2 @@\n-    setDoubleAtOffset_BE(segment, 0L, value);\n+    VarHandle handle = MemoryHandles.varHandle(double.class, 1, order);\n+    handle.set(segment, offset, value);\n@@ -1180,0 +562,2 @@\n+     * @param offset offset in bytes (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(offset)}.\n+     * @param order the specified byte order.\n@@ -1182,2 +566,2 @@\n-    public static void setDouble_BE(MemorySegment segment, double value) {\n-        setDoubleAtOffset_BE(segment, 0L, value);\n+    public static void setDoubleAtOffset(MemorySegment segment, long offset, ByteOrder order, double value) {\n+        ((order == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).set(segment, offset, value);\n@@ -1187,1 +571,1 @@\n-     * Read a byte from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a byte from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1216,1 +600,1 @@\n-     * Read a char from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a char from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1244,1 +628,1 @@\n-     * Read a short from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a short from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1272,1 +656,1 @@\n-     * Read an int from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads an int from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1300,1 +684,1 @@\n-     * Read a float from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a float from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1328,1 +712,1 @@\n-     * Read a long from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a long from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1356,1 +740,1 @@\n-     * Read a double from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a double from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1384,1 +768,1 @@\n-     * Read a memory address from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a memory address from given segment, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1412,1 +796,1 @@\n-     * Read a byte from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a byte from given segment, with given byte order.\n@@ -1416,1 +800,1 @@\n-    byte value = getByteAtOffset_LE(segment, index);\n+    byte value = getByteAtOffset(segment, 0L, order);\n@@ -1420,2 +804,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index)}.\n-     * @return a byte value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a byte value read from {@code segment}.\n@@ -1423,2 +807,2 @@\n-    public static byte getByteAtIndex_LE(MemorySegment segment, long index) {\n-        return getByteAtOffset_LE(segment, index);\n+    public static byte getByte(MemorySegment segment, ByteOrder order) {\n+        return getByteAtOffset(segment, 0L, order);\n@@ -1428,1 +812,1 @@\n-     * Writes a byte at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a byte at given segment, with given byte order.\n@@ -1432,1 +816,1 @@\n-    setByteAtOffset_LE(segment, index, value);\n+    setByteAtOffset(segment, 0L, order, value);\n@@ -1435,1 +819,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index)}.\n+     * @param order the specified byte order.\n@@ -1438,2 +822,2 @@\n-    public static void setByteAtIndex_LE(MemorySegment segment, long index, byte value) {\n-        setByteAtOffset_LE(segment, index, value);\n+    public static void setByte(MemorySegment segment, ByteOrder order, byte value) {\n+        setByteAtOffset(segment, 0L, order, value);\n@@ -1443,1 +827,1 @@\n-     * Read a char from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a char from given segment, with given byte order.\n@@ -1447,1 +831,1 @@\n-    char value = getCharAtOffset_LE(segment, 2 * index);\n+    char value = getCharAtOffset(segment, 0L, order);\n@@ -1450,2 +834,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 2)}.\n-     * @return a char value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a char value read from {@code segment}.\n@@ -1453,2 +837,2 @@\n-    public static char getCharAtIndex_LE(MemorySegment segment, long index) {\n-        return getCharAtOffset_LE(segment, scale(segment, index, 2));\n+    public static char getChar(MemorySegment segment, ByteOrder order) {\n+        return getCharAtOffset(segment, 0L, order);\n@@ -1458,1 +842,1 @@\n-     * Writes a char at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a char at given segment, with given byte order.\n@@ -1462,1 +846,1 @@\n-    setCharAtOffset_LE(segment, 2 * index, value);\n+    setCharAtOffset(segment, 0L, order, value);\n@@ -1465,1 +849,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 2)}.\n+     * @param order the specified byte order.\n@@ -1468,2 +852,2 @@\n-    public static void setCharAtIndex_LE(MemorySegment segment, long index, char value) {\n-        setCharAtOffset_LE(segment, scale(segment, index, 2), value);\n+    public static void setChar(MemorySegment segment, ByteOrder order, char value) {\n+        setCharAtOffset(segment, 0L, order, value);\n@@ -1473,1 +857,1 @@\n-     * Read a short from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a short from given segment, with given byte order.\n@@ -1477,1 +861,1 @@\n-    short value = getShortAtOffset_LE(segment, 2 * index);\n+    short value = getShortAtOffset(segment, 0L, order);\n@@ -1480,2 +864,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 2)}.\n-     * @return a short value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a short value read from {@code segment}.\n@@ -1483,2 +867,2 @@\n-    public static short getShortAtIndex_LE(MemorySegment segment, long index) {\n-        return getShortAtOffset_LE(segment, scale(segment, index, 2));\n+    public static short getShort(MemorySegment segment, ByteOrder order) {\n+        return getShortAtOffset(segment, 0L, order);\n@@ -1488,1 +872,1 @@\n-     * Writes a short at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a short at given segment, with given byte order.\n@@ -1492,1 +876,1 @@\n-    setShortAtOffset_LE(segment, 2 * index, value);\n+    setShortAtOffset(segment, 0L, order, value);\n@@ -1495,1 +879,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 2)}.\n+     * @param order the specified byte order.\n@@ -1498,2 +882,2 @@\n-    public static void setShortAtIndex_LE(MemorySegment segment, long index, short value) {\n-        setShortAtOffset_LE(segment, scale(segment, index, 2), value);\n+    public static void setShort(MemorySegment segment, ByteOrder order, short value) {\n+        setShortAtOffset(segment, 0L, order, value);\n@@ -1503,1 +887,1 @@\n-     * Read an int from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads an int from given segment, with given byte order.\n@@ -1507,1 +891,1 @@\n-    int value = getIntAtOffset_LE(segment, 4 * index);\n+    int value = getIntAtOffset(segment, 0L, order);\n@@ -1510,2 +894,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 4)}.\n-     * @return an int value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return an int value read from {@code segment}.\n@@ -1513,2 +897,2 @@\n-    public static int getIntAtIndex_LE(MemorySegment segment, long index) {\n-        return getIntAtOffset_LE(segment, scale(segment, index, 4));\n+    public static int getInt(MemorySegment segment, ByteOrder order) {\n+        return getIntAtOffset(segment, 0L, order);\n@@ -1518,1 +902,1 @@\n-     * Writes an int at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes an int at given segment, with given byte order.\n@@ -1522,1 +906,1 @@\n-    setIntAtOffset_LE(segment, 4 * index, value);\n+    setIntAtOffset(segment, 0L, order, value);\n@@ -1525,1 +909,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 4)}.\n+     * @param order the specified byte order.\n@@ -1528,2 +912,2 @@\n-    public static void setIntAtIndex_LE(MemorySegment segment, long index, int value) {\n-        setIntAtOffset_LE(segment, scale(segment, index, 4), value);\n+    public static void setInt(MemorySegment segment, ByteOrder order, int value) {\n+        setIntAtOffset(segment, 0L, order, value);\n@@ -1533,1 +917,1 @@\n-     * Read a float from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a float from given segment, with given byte order.\n@@ -1537,1 +921,1 @@\n-    float value = getFloatAtOffset_LE(segment, 4 * index);\n+    float value = getFloatAtOffset(segment, 0L, order);\n@@ -1540,2 +924,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 4)}.\n-     * @return a float value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a float value read from {@code segment}.\n@@ -1543,2 +927,2 @@\n-    public static float getFloatAtIndex_LE(MemorySegment segment, long index) {\n-        return getFloatAtOffset_LE(segment, scale(segment, index, 4));\n+    public static float getFloat(MemorySegment segment, ByteOrder order) {\n+        return getFloatAtOffset(segment, 0L, order);\n@@ -1548,1 +932,1 @@\n-     * Writes a float at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a float at given segment, with given byte order.\n@@ -1552,1 +936,1 @@\n-    setFloatAtOffset_LE(segment, 4 * index, value);\n+    setFloatAtOffset(segment, 0L, order, value);\n@@ -1555,1 +939,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 4)}.\n+     * @param order the specified byte order.\n@@ -1558,2 +942,2 @@\n-    public static void setFloatAtIndex_LE(MemorySegment segment, long index, float value) {\n-        setFloatAtOffset_LE(segment, scale(segment, index, 4), value);\n+    public static void setFloat(MemorySegment segment, ByteOrder order, float value) {\n+        setFloatAtOffset(segment, 0L, order, value);\n@@ -1563,1 +947,1 @@\n-     * Read a long from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a long from given segment, with given byte order.\n@@ -1567,1 +951,1 @@\n-    return getLongAtOffset_LE(segment, 8 * index);\n+    long value = getLongAtOffset(segment, 0L, order);\n@@ -1570,2 +954,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n-     * @return a long value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a long value read from {@code segment}.\n@@ -1573,2 +957,2 @@\n-    public static long getLongAtIndex_LE(MemorySegment segment, long index) {\n-        return getLongAtOffset_LE(segment, scale(segment, index, 8));\n+    public static long getLong(MemorySegment segment, ByteOrder order) {\n+        return getLongAtOffset(segment, 0L, order);\n@@ -1578,1 +962,1 @@\n-     * Writes a long at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a long at given segment, with given byte order.\n@@ -1582,1 +966,1 @@\n-    setLongAtOffset_LE(segment, 8 * index, value);\n+    setLongAtOffset(segment, 0L, order, value);\n@@ -1585,1 +969,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n+     * @param order the specified byte order.\n@@ -1588,2 +972,2 @@\n-    public static void setLongAtIndex_LE(MemorySegment segment, long index, long value) {\n-        setLongAtOffset_LE(segment, scale(segment, index, 8), value);\n+    public static void setLong(MemorySegment segment, ByteOrder order, long value) {\n+        setLongAtOffset(segment, 0L, order, value);\n@@ -1593,1 +977,1 @@\n-     * Read a double from given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Reads a double from given segment, with given byte order.\n@@ -1597,1 +981,1 @@\n-    return getDoubleAtOffset_LE(segment, 8 * index);\n+    double value = getDoubleAtOffset(segment, 0L, order);\n@@ -1600,2 +984,2 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n-     * @return a double value read from {@code segment} at the element index specified by {@code index}.\n+     * @param order the specified byte order.\n+     * @return a double value read from {@code segment}.\n@@ -1603,2 +987,2 @@\n-    public static double getDoubleAtIndex_LE(MemorySegment segment, long index) {\n-        return getDoubleAtOffset_LE(segment, scale(segment, index, 8));\n+    public static double getDouble(MemorySegment segment, ByteOrder order) {\n+        return getDoubleAtOffset(segment, 0L, order);\n@@ -1608,1 +992,1 @@\n-     * Writes a double at given segment and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.\n+     * Writes a double at given segment, with given byte order.\n@@ -1612,1 +996,1 @@\n-    setDoubleAtOffset_LE(segment, 8 * index, value);\n+    setDoubleAtOffset(segment, 0L, order, value);\n@@ -1615,1 +999,1 @@\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n+     * @param order the specified byte order.\n@@ -1618,2 +1002,2 @@\n-    public static void setDoubleAtIndex_LE(MemorySegment segment, long index, double value) {\n-        setDoubleAtOffset_LE(segment, scale(segment, index, 8), value);\n+    public static void setDouble(MemorySegment segment, ByteOrder order, double value) {\n+        setDoubleAtOffset(segment, 0L, order, value);\n@@ -1623,1 +1007,1 @@\n-     * Read a byte from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a byte from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1627,1 +1011,1 @@\n-    byte value = getByteAtOffset_BE(segment, index);\n+    byte value = getByteAtOffset(segment, index);\n@@ -1634,2 +1018,2 @@\n-    public static byte getByteAtIndex_BE(MemorySegment segment, long index) {\n-        return getByteAtOffset_BE(segment, index);\n+    public static byte getByteAtIndex(MemorySegment segment, long index) {\n+        return getByteAtOffset(segment, index);\n@@ -1639,1 +1023,1 @@\n-     * Writes a byte at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a byte at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1643,1 +1027,1 @@\n-    setByteAtOffset_BE(segment, index, value);\n+    setByteAtOffset(segment, index, value);\n@@ -1649,2 +1033,2 @@\n-    public static void setByteAtIndex_BE(MemorySegment segment, long index, byte value) {\n-        setByteAtOffset_BE(segment, index, value);\n+    public static void setByteAtIndex(MemorySegment segment, long index, byte value) {\n+        setByteAtOffset(segment, index, value);\n@@ -1654,1 +1038,1 @@\n-     * Read a char from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a char from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1658,1 +1042,1 @@\n-    char value = getCharAtOffset_BE(segment, 2 * index);\n+    char value = getCharAtOffset(segment, 2 * index);\n@@ -1664,2 +1048,2 @@\n-    public static char getCharAtIndex_BE(MemorySegment segment, long index) {\n-        return getCharAtOffset_BE(segment, scale(segment, index, 2));\n+    public static char getCharAtIndex(MemorySegment segment, long index) {\n+        return getCharAtOffset(segment, scale(segment, index, 2));\n@@ -1669,1 +1053,1 @@\n-     * Writes a char at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a char at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1673,1 +1057,1 @@\n-    setCharAtOffset_BE(segment, 2 * index, value);\n+    setCharAtOffset(segment, 2 * index, value);\n@@ -1679,2 +1063,2 @@\n-    public static void setCharAtIndex_BE(MemorySegment segment, long index, char value) {\n-        setCharAtOffset_BE(segment, scale(segment, index, 2), value);\n+    public static void setCharAtIndex(MemorySegment segment, long index, char value) {\n+        setCharAtOffset(segment, scale(segment, index, 2), value);\n@@ -1684,1 +1068,1 @@\n-     * Read a short from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a short from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1688,1 +1072,1 @@\n-    short value = getShortAtOffset_BE(segment, 2 * index);\n+    short value = getShortAtOffset(segment, 2 * index);\n@@ -1694,2 +1078,2 @@\n-    public static short getShortAtIndex_BE(MemorySegment segment, long index) {\n-        return getShortAtOffset_BE(segment, scale(segment, index, 2));\n+    public static short getShortAtIndex(MemorySegment segment, long index) {\n+        return getShortAtOffset(segment, scale(segment, index, 2));\n@@ -1699,1 +1083,1 @@\n-     * Writes a short at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a short at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1703,1 +1087,1 @@\n-    setShortAtOffset_BE(segment, 2 * index, value);\n+    setShortAtOffset(segment, 2 * index, value);\n@@ -1709,2 +1093,2 @@\n-    public static void setShortAtIndex_BE(MemorySegment segment, long index, short value) {\n-        setShortAtOffset_BE(segment, scale(segment, index, 2), value);\n+    public static void setShortAtIndex(MemorySegment segment, long index, short value) {\n+        setShortAtOffset(segment, scale(segment, index, 2), value);\n@@ -1714,1 +1098,1 @@\n-     * Read an int from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads an int from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1718,1 +1102,1 @@\n-    int value = getIntAtOffset_BE(segment, 4 * index);\n+    int value = getIntAtOffset(segment, 4 * index);\n@@ -1724,2 +1108,2 @@\n-    public static int getIntAtIndex_BE(MemorySegment segment, long index) {\n-        return getIntAtOffset_BE(segment, scale(segment, index, 4));\n+    public static int getIntAtIndex(MemorySegment segment, long index) {\n+        return getIntAtOffset(segment, scale(segment, index, 4));\n@@ -1729,1 +1113,1 @@\n-     * Writes an int at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes an int at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1733,1 +1117,1 @@\n-    setIntAtOffset_BE(segment, 4 * index, value);\n+    setIntAtOffset(segment, 4 * index, value);\n@@ -1739,2 +1123,2 @@\n-    public static void setIntAtIndex_BE(MemorySegment segment, long index, int value) {\n-        setIntAtOffset_BE(segment, scale(segment, index, 4), value);\n+    public static void setIntAtIndex(MemorySegment segment, long index, int value) {\n+        setIntAtOffset(segment, scale(segment, index, 4), value);\n@@ -1744,1 +1128,1 @@\n-     * Read a float from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a float from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1748,1 +1132,1 @@\n-    float value = getFloatAtOffset_BE(segment, 4 * index);\n+    float value = getFloatAtOffset(segment, 4 * index);\n@@ -1754,2 +1138,2 @@\n-    public static float getFloatAtIndex_BE(MemorySegment segment, long index) {\n-        return getFloatAtOffset_BE(segment, scale(segment, index, 4));\n+    public static float getFloatAtIndex(MemorySegment segment, long index) {\n+        return getFloatAtOffset(segment, scale(segment, index, 4));\n@@ -1759,1 +1143,1 @@\n-     * Writes a float at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a float at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1763,1 +1147,1 @@\n-    setFloatAtOffset_BE(segment, 4 * index, value);\n+    setFloatAtOffset(segment, 4 * index, value);\n@@ -1769,2 +1153,2 @@\n-    public static void setFloatAtIndex_BE(MemorySegment segment, long index, float value) {\n-        setFloatAtOffset_BE(segment, scale(segment, index, 4), value);\n+    public static void setFloatAtIndex(MemorySegment segment, long index, float value) {\n+        setFloatAtOffset(segment, scale(segment, index, 4), value);\n@@ -1774,1 +1158,1 @@\n-     * Read a long from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a long from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1778,1 +1162,1 @@\n-    return getLongAtOffset_BE(segment, 8 * index);\n+    return getLongAtOffset(segment, 8 * index);\n@@ -1784,2 +1168,2 @@\n-    public static long getLongAtIndex_BE(MemorySegment segment, long index) {\n-        return getLongAtOffset_BE(segment, scale(segment, index, 8));\n+    public static long getLongAtIndex(MemorySegment segment, long index) {\n+        return getLongAtOffset(segment, scale(segment, index, 8));\n@@ -1789,1 +1173,1 @@\n-     * Writes a long at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a long at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1793,1 +1177,1 @@\n-    setLongAtOffset_BE(segment, 8 * index, value);\n+    setLongAtOffset(segment, 8 * index, value);\n@@ -1799,2 +1183,2 @@\n-    public static void setLongAtIndex_BE(MemorySegment segment, long index, long value) {\n-        setLongAtOffset_BE(segment, scale(segment, index, 8), value);\n+    public static void setLongAtIndex(MemorySegment segment, long index, long value) {\n+        setLongAtOffset(segment, scale(segment, index, 8), value);\n@@ -1804,1 +1188,1 @@\n-     * Read a double from given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Reads a double from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1808,1 +1192,1 @@\n-    return getDoubleAtOffset_BE(segment, 8 * index);\n+    return getDoubleAtOffset(segment, 8 * index);\n@@ -1814,2 +1198,32 @@\n-    public static double getDoubleAtIndex_BE(MemorySegment segment, long index) {\n-        return getDoubleAtOffset_BE(segment, scale(segment, index, 8));\n+    public static double getDoubleAtIndex(MemorySegment segment, long index) {\n+        return getDoubleAtOffset(segment, scale(segment, index, 8));\n+    }\n+\n+    \/**\n+     * Reads a memory address from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * <p>\n+     * This is equivalent to the following code:\n+     * <blockquote><pre>{@code\n+    return getAddressAtOffset(segment, index * MemoryLayouts.ADDRESS.byteSize());\n+     * }<\/pre><\/blockquote>\n+     * @param segment the segment to be dereferenced.\n+     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n+     * @return a memory address read from {@code segment} at the element index specified by {@code index}.\n+     *\/\n+    public static MemoryAddress getAddressAtIndex(MemorySegment segment, long index) {\n+        return getAddressAtOffset(segment, scale(segment, index, (int)MemoryLayouts.ADDRESS.byteSize()));\n+    }\n+\n+    \/**\n+     * Writes a memory address at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * <p>\n+     * This is equivalent to the following code:\n+     * <blockquote><pre>{@code\n+    setAddressAtOffset(segment, index * MemoryLayouts.ADDRESS.byteSize(), value);\n+     * }<\/pre><\/blockquote>\n+     * @param segment the segment to be dereferenced.\n+     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n+     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n+     *\/\n+    public static void setAddressAtIndex(MemorySegment segment, long index, Addressable value) {\n+        setAddressAtOffset(segment, scale(segment, index, (int)MemoryLayouts.ADDRESS.byteSize()), value);\n@@ -1819,1 +1233,1 @@\n-     * Writes a double at given segment and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.\n+     * Writes a double at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -1823,1 +1237,1 @@\n-    setDoubleAtOffset_BE(segment, 8 * index, value);\n+    setDoubleAtOffset(segment, 8 * index, value);\n@@ -1829,2 +1243,2 @@\n-    public static void setDoubleAtIndex_BE(MemorySegment segment, long index, double value) {\n-        setDoubleAtOffset_BE(segment, scale(segment, index, 8), value);\n+    public static void setDoubleAtIndex(MemorySegment segment, long index, double value) {\n+        setDoubleAtOffset(segment, scale(segment, index, 8), value);\n@@ -1834,1 +1248,1 @@\n-     * Read a byte from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a byte from given segment and element index, with given byte order.\n@@ -1838,1 +1252,1 @@\n-    byte value = getByteAtOffset(segment, index);\n+    byte value = getByteAtOffset(segment, index, order);\n@@ -1843,0 +1257,1 @@\n+     * @param order the specified byte order.\n@@ -1845,2 +1260,2 @@\n-    public static byte getByteAtIndex(MemorySegment segment, long index) {\n-        return getByteAtOffset(segment, index);\n+    public static byte getByteAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getByteAtOffset(segment, index, order);\n@@ -1850,1 +1265,1 @@\n-     * Writes a byte at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a byte at given segment and element index, with given byte order.\n@@ -1854,1 +1269,1 @@\n-    setByteAtOffset(segment, index, value);\n+    setByteAtOffset(segment, index, order, value);\n@@ -1858,0 +1273,1 @@\n+     * @param order the specified byte order.\n@@ -1860,2 +1276,2 @@\n-    public static void setByteAtIndex(MemorySegment segment, long index, byte value) {\n-        setByteAtOffset(segment, index, value);\n+    public static void setByteAtIndex(MemorySegment segment, long index, ByteOrder order, byte value) {\n+        setByteAtOffset(segment, index, order, value);\n@@ -1865,1 +1281,1 @@\n-     * Read a char from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a char from given segment and element index, with given byte order.\n@@ -1869,1 +1285,1 @@\n-    char value = getCharAtOffset(segment, 2 * index);\n+    char value = getCharAtOffset(segment, 2 * index, order);\n@@ -1873,0 +1289,1 @@\n+     * @param order the specified byte order.\n@@ -1875,2 +1292,2 @@\n-    public static char getCharAtIndex(MemorySegment segment, long index) {\n-        return getCharAtOffset(segment, scale(segment, index, 2));\n+    public static char getCharAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getCharAtOffset(segment, scale(segment, index, 2), order);\n@@ -1880,1 +1297,1 @@\n-     * Writes a char at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a char at given segment and element index, with given byte order.\n@@ -1884,1 +1301,1 @@\n-    setCharAtOffset(segment, 2 * index, value);\n+    setCharAtOffset(segment, 2 * index, order, value);\n@@ -1888,0 +1305,1 @@\n+     * @param order the specified byte order.\n@@ -1890,2 +1308,2 @@\n-    public static void setCharAtIndex(MemorySegment segment, long index, char value) {\n-        setCharAtOffset(segment, scale(segment, index, 2), value);\n+    public static void setCharAtIndex(MemorySegment segment, long index, ByteOrder order, char value) {\n+        setCharAtOffset(segment, scale(segment, index, 2), order, value);\n@@ -1895,1 +1313,1 @@\n-     * Read a short from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a short from given segment and element index, with given byte order.\n@@ -1899,1 +1317,1 @@\n-    short value = getShortAtOffset(segment, 2 * index);\n+    short value = getShortAtOffset(segment, 2 * index, order);\n@@ -1903,0 +1321,1 @@\n+     * @param order the specified byte order.\n@@ -1905,2 +1324,2 @@\n-    public static short getShortAtIndex(MemorySegment segment, long index) {\n-        return getShortAtOffset(segment, scale(segment, index, 2));\n+    public static short getShortAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getShortAtOffset(segment, scale(segment, index, 2), order);\n@@ -1910,1 +1329,1 @@\n-     * Writes a short at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a short at given segment and element index, with given byte order.\n@@ -1914,1 +1333,1 @@\n-    setShortAtOffset(segment, 2 * index, value);\n+    setShortAtOffset(segment, 2 * index, order, value);\n@@ -1918,0 +1337,1 @@\n+     * @param order the specified byte order.\n@@ -1920,2 +1340,2 @@\n-    public static void setShortAtIndex(MemorySegment segment, long index, short value) {\n-        setShortAtOffset(segment, scale(segment, index, 2), value);\n+    public static void setShortAtIndex(MemorySegment segment, long index, ByteOrder order, short value) {\n+        setShortAtOffset(segment, scale(segment, index, 2), order, value);\n@@ -1925,1 +1345,1 @@\n-     * Read an int from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads an int from given segment and element index, with given byte order.\n@@ -1929,1 +1349,1 @@\n-    int value = getIntAtOffset(segment, 4 * index);\n+    int value = getIntAtOffset(segment, 4 * index, order);\n@@ -1933,0 +1353,1 @@\n+     * @param order the specified byte order.\n@@ -1935,2 +1356,2 @@\n-    public static int getIntAtIndex(MemorySegment segment, long index) {\n-        return getIntAtOffset(segment, scale(segment, index, 4));\n+    public static int getIntAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getIntAtOffset(segment, scale(segment, index, 4), order);\n@@ -1940,1 +1361,1 @@\n-     * Writes an int at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes an int at given segment and element index, with given byte order.\n@@ -1944,1 +1365,1 @@\n-    setIntAtOffset(segment, 4 * index, value);\n+    setIntAtOffset(segment, 4 * index, order, value);\n@@ -1948,0 +1369,1 @@\n+     * @param order the specified byte order.\n@@ -1950,2 +1372,2 @@\n-    public static void setIntAtIndex(MemorySegment segment, long index, int value) {\n-        setIntAtOffset(segment, scale(segment, index, 4), value);\n+    public static void setIntAtIndex(MemorySegment segment, long index, ByteOrder order, int value) {\n+        setIntAtOffset(segment, scale(segment, index, 4), order, value);\n@@ -1955,1 +1377,1 @@\n-     * Read a float from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a float from given segment and element index, with given byte order.\n@@ -1959,1 +1381,1 @@\n-    float value = getFloatAtOffset(segment, 4 * index);\n+    float value = getFloatAtOffset(segment, 4 * index, order);\n@@ -1963,0 +1385,1 @@\n+     * @param order the specified byte order.\n@@ -1965,2 +1388,2 @@\n-    public static float getFloatAtIndex(MemorySegment segment, long index) {\n-        return getFloatAtOffset(segment, scale(segment, index, 4));\n+    public static float getFloatAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getFloatAtOffset(segment, scale(segment, index, 4), order);\n@@ -1970,1 +1393,1 @@\n-     * Writes a float at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a float at given segment and element index, with given byte order.\n@@ -1974,1 +1397,1 @@\n-    setFloatAtOffset(segment, 4 * index, value);\n+    setFloatAtOffset(segment, 4 * index, order, value);\n@@ -1978,0 +1401,1 @@\n+     * @param order the specified byte order.\n@@ -1980,2 +1404,2 @@\n-    public static void setFloatAtIndex(MemorySegment segment, long index, float value) {\n-        setFloatAtOffset(segment, scale(segment, index, 4), value);\n+    public static void setFloatAtIndex(MemorySegment segment, long index, ByteOrder order, float value) {\n+        setFloatAtOffset(segment, scale(segment, index, 4), order, value);\n@@ -1985,1 +1409,1 @@\n-     * Read a long from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a long from given segment and element index, with given byte order.\n@@ -1989,1 +1413,1 @@\n-    return getLongAtOffset(segment, 8 * index);\n+    return getLongAtOffset(segment, 8 * index, order);\n@@ -1993,0 +1417,1 @@\n+     * @param order the specified byte order.\n@@ -1995,2 +1420,2 @@\n-    public static long getLongAtIndex(MemorySegment segment, long index) {\n-        return getLongAtOffset(segment, scale(segment, index, 8));\n+    public static long getLongAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getLongAtOffset(segment, scale(segment, index, 8), order);\n@@ -2000,1 +1425,1 @@\n-     * Writes a long at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a long at given segment and element index, with given byte order.\n@@ -2004,1 +1429,1 @@\n-    setLongAtOffset(segment, 8 * index, value);\n+    setLongAtOffset(segment, 8 * index, order, value);\n@@ -2008,0 +1433,1 @@\n+     * @param order the specified byte order.\n@@ -2010,2 +1436,2 @@\n-    public static void setLongAtIndex(MemorySegment segment, long index, long value) {\n-        setLongAtOffset(segment, scale(segment, index, 8), value);\n+    public static void setLongAtIndex(MemorySegment segment, long index, ByteOrder order, long value) {\n+        setLongAtOffset(segment, scale(segment, index, 8), order, value);\n@@ -2015,1 +1441,1 @@\n-     * Read a double from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Reads a double from given segment and element index, with given byte order.\n@@ -2019,1 +1445,1 @@\n-    return getDoubleAtOffset(segment, 8 * index);\n+    return getDoubleAtOffset(segment, 8 * index, order);\n@@ -2023,0 +1449,1 @@\n+     * @param order the specified byte order.\n@@ -2025,2 +1452,2 @@\n-    public static double getDoubleAtIndex(MemorySegment segment, long index) {\n-        return getDoubleAtOffset(segment, scale(segment, index, 8));\n+    public static double getDoubleAtIndex(MemorySegment segment, long index, ByteOrder order) {\n+        return getDoubleAtOffset(segment, scale(segment, index, 8), order);\n@@ -2030,1 +1457,1 @@\n-     * Writes a double at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n+     * Writes a double at given segment and element index, with given byte order.\n@@ -2034,1 +1461,1 @@\n-    setDoubleAtOffset(segment, 8 * index, value);\n+    setDoubleAtOffset(segment, 8 * index, order, value);\n@@ -2038,0 +1465,1 @@\n+     * @param order the specified byte order.\n@@ -2040,32 +1468,2 @@\n-    public static void setDoubleAtIndex(MemorySegment segment, long index, double value) {\n-        setDoubleAtOffset(segment, scale(segment, index, 8), value);\n-    }\n-\n-    \/**\n-     * Read a memory address from given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    return getAddressAtOffset(segment, index * 8);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n-     * @return a memory address read from {@code segment} at the element index specified by {@code index}.\n-     *\/\n-    public static MemoryAddress getAddressAtIndex(MemorySegment segment, long index) {\n-        return getAddressAtOffset(segment, scale(segment, index, 8));\n-    }\n-\n-    \/**\n-     * Writes a memory address at given segment and element index, with byte order set to {@link ByteOrder#nativeOrder()}.\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    setAddressAtOffset(segment, index * 8, value);\n-     * }<\/pre><\/blockquote>\n-     * @param segment the segment to be dereferenced.\n-     * @param index element index (relative to {@code segment}). The final address of this read operation can be expressed as {@code segment.address().addOffset(index * 8)}.\n-     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n-     *\/\n-    public static void setAddressAtIndex(MemorySegment segment, long index, Addressable value) {\n-        setAddressAtOffset(segment, scale(segment, index, 8), value);\n+    public static void setDoubleAtIndex(MemorySegment segment, long index, ByteOrder order, double value) {\n+        setDoubleAtOffset(segment, scale(segment, index, 8), order, value);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":473,"deletions":1075,"binary":false,"changes":1548,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByteAtIndex_BE(addr, pos, (byte)(long)pos));\n+                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByteAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (byte)(long)pos));\n@@ -611,1 +611,1 @@\n-                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setCharAtIndex_BE(addr, pos, (char)(long)pos));\n+                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setCharAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (char)(long)pos));\n@@ -613,1 +613,1 @@\n-                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShortAtIndex_BE(addr, pos, (short)(long)pos));\n+                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShortAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (short)(long)pos));\n@@ -615,1 +615,1 @@\n-                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setIntAtIndex_BE(addr, pos, (int)(long)pos));\n+                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setIntAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (int)(long)pos));\n@@ -617,1 +617,1 @@\n-                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloatAtIndex_BE(addr, pos, (float)(long)pos));\n+                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloatAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (float)(long)pos));\n@@ -619,1 +619,1 @@\n-                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLongAtIndex_BE(addr, pos, (long)pos));\n+                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLongAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (long)pos));\n@@ -621,1 +621,1 @@\n-                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDoubleAtIndex_BE(addr, pos, (double)(long)pos));\n+                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDoubleAtIndex(addr, pos, ByteOrder.BIG_ENDIAN, (double)(long)pos));\n@@ -624,1 +624,1 @@\n-                (base) -> checkBytes(base, bytes, Function.identity(), MemoryAccess::getByteAtIndex_BE, ByteBuffer::get);\n+                (base) -> checkBytes(base, bytes, Function.identity(), (addr, pos) -> MemoryAccess.getByteAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), ByteBuffer::get);\n@@ -626,1 +626,1 @@\n-                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, MemoryAccess::getCharAtIndex_BE, CharBuffer::get);\n+                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryAccess.getCharAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), CharBuffer::get);\n@@ -628,1 +628,1 @@\n-                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, MemoryAccess::getShortAtIndex_BE, ShortBuffer::get);\n+                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryAccess.getShortAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), ShortBuffer::get);\n@@ -630,1 +630,1 @@\n-                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, MemoryAccess::getIntAtIndex_BE, IntBuffer::get);\n+                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryAccess.getIntAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), IntBuffer::get);\n@@ -632,1 +632,1 @@\n-                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, MemoryAccess::getFloatAtIndex_BE, FloatBuffer::get);\n+                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryAccess.getFloatAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), FloatBuffer::get);\n@@ -634,1 +634,1 @@\n-                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, MemoryAccess::getLongAtIndex_BE, LongBuffer::get);\n+                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryAccess.getLongAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), LongBuffer::get);\n@@ -636,1 +636,1 @@\n-                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, MemoryAccess::getDoubleAtIndex_BE, DoubleBuffer::get);\n+                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryAccess.getDoubleAtIndex(addr, pos, ByteOrder.BIG_ENDIAN), DoubleBuffer::get);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}