{"files":[{"patch":"@@ -4022,2 +4022,0 @@\n-            \/\/ Since array have access hacks, need to guard against array clone() before\n-            \/\/ calling this method\n@@ -4110,2 +4108,5 @@\n-                            !isArrayClone(refKind, refc, method) &&\n-                            restrictProtectedReceiver(method))) {\n+                            restrictProtectedReceiver(method) &&\n+                            \/\/ All arrays simply inherit the protected Object.clone method.\n+                            \/\/ The leading argument is already restricted to the requested\n+                            \/\/ array type (not the lookup class).\n+                            !isArrayClone(refKind, refc, method))) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Ensures Arrays' clone doesn't have incorrect receiver type bound\n+ * @summary Test invocation of Object.clone for arrays\n@@ -39,0 +39,1 @@\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -62,0 +63,11 @@\n+\n+    @Test\n+    public void checkArrayClone() throws Throwable {\n+        var array = new String[] {\"apple\", \"pear\", \"banana\"};\n+        var regularClone = array.clone();\n+        var cloneMh = MethodHandles.lookup()\n+                .findVirtual(String[].class, \"clone\", MethodType.methodType(Object.class));\n+        var mhClone = (String[]) (Object) cloneMh.invokeExact((String[]) array);\n+        assertArrayEquals(array, mhClone);\n+        assertArrayEquals(regularClone, mhClone);\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/findVirtual\/FindVirtualArrayCloneTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}