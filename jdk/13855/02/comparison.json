{"files":[{"patch":"@@ -3931,0 +3931,8 @@\n+        private boolean isArrayClone(byte refKind, Class<?> refc, MemberName m) {\n+            return Modifier.isProtected(m.getModifiers()) &&\n+                    refKind == REF_invokeVirtual &&\n+                    m.getDeclaringClass() == Object.class &&\n+                    m.getName().equals(\"clone\") &&\n+                    refc.isArray();\n+        }\n+\n@@ -3939,5 +3947,1 @@\n-            if (Modifier.isProtected(mods) &&\n-                    refKind == REF_invokeVirtual &&\n-                    m.getDeclaringClass() == Object.class &&\n-                    m.getName().equals(\"clone\") &&\n-                    refc.isArray()) {\n+            if (isArrayClone(refKind, refc, m)) {\n@@ -4103,1 +4107,6 @@\n-                    (MethodHandleNatives.refKindHasReceiver(refKind) && restrictProtectedReceiver(method))) {\n+                    (MethodHandleNatives.refKindHasReceiver(refKind) &&\n+                            restrictProtectedReceiver(method) &&\n+                            \/\/ All arrays simply inherit the protected Object.clone method.\n+                            \/\/ The leading argument is already restricted to the requested\n+                            \/\/ array type (not the lookup class).\n+                            !isArrayClone(refKind, refc, method))) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,6 +190,1 @@\n-        \/\/ ##### FIXME - disable tests for clone until we figure out how they should work with modules\n-\n-        \/*\n-        testFindVirtual(true, PUBLIC, Object[].class, Object.class, \"clone\");\n-        testFindVirtual(true, PUBLIC, int[].class, Object.class, \"clone\");\n-        for (Class<?> cls : new Class<?>[]{ boolean[].class, long[].class, float[].class, char[].class })\n+        for (Class<?> cls : new Class<?>[]{ Object[].class, int[].class, boolean[].class, long[].class, float[].class, char[].class }) {\n@@ -197,1 +192,1 @@\n-         *\/\n+        }\n@@ -267,2 +262,2 @@\n-            if (res instanceof Object[])\n-                assertArrayEquals((Object[])res, (Object[])argsWithSelf[0]);\n+            if (res instanceof Object[] arr)\n+                assertArrayEquals(arr, (Object[])argsWithSelf[0]);\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandlesGeneralTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8299505\n+ * @run junit FindVirtualArrayCloneTest\n+ * @summary Test invocation of Object.clone for arrays\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+\n+public class FindVirtualArrayCloneTest {\n+\n+    \/**\n+     * array clone should be bound to the array class (public)\n+     *\/\n+    @ValueSource(classes = {Object[].class, int[].class, long[].class, byte[].class, double[].class})\n+    @ParameterizedTest\n+    public void checkArrayCloneReceiver(Class<?> arrayClass) throws Throwable {\n+        var lookup = MethodHandles.lookup();\n+        var cloneMh = lookup.findVirtual(arrayClass, \"clone\", MethodType.methodType(Object.class));\n+        assertSame(arrayClass, cloneMh.type().parameterType(0));\n+    }\n+\n+    \/**\n+     * Object.clone should be bound to the lookup class (protected)\n+     *\/\n+    @Test\n+    public void checkProtectedCloneReceiver() throws Throwable {\n+        var lookup = MethodHandles.lookup();\n+        var cloneMh = lookup.findVirtual(Object.class, \"clone\", MethodType.methodType(Object.class));\n+        assertSame(lookup.lookupClass(), cloneMh.type().parameterType(0));\n+    }\n+\n+    @Test\n+    public void checkArrayClone() throws Throwable {\n+        var array = new String[] {\"apple\", \"pear\", \"banana\"};\n+        var regularClone = array.clone();\n+        var cloneMh = MethodHandles.lookup()\n+                .findVirtual(String[].class, \"clone\", MethodType.methodType(Object.class))\n+                .asType(MethodType.methodType(String[].class, String[].class));\n+        var mhClone = (String[]) cloneMh.invokeExact((String[]) array);\n+        assertArrayEquals(array, mhClone);\n+        assertArrayEquals(regularClone, mhClone);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/findVirtual\/FindVirtualArrayCloneTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}