{"files":[{"patch":"@@ -560,0 +560,1 @@\n+        this.rdrCtx.doRender = true;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Renderer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,0 +81,2 @@\n+    \/\/ flag indicating to render the shape\n+    boolean doRender = false;\n@@ -172,0 +174,1 @@\n+        doRender   = false;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/RendererContext.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,5 +173,4 @@\n-            final double limitMin = ((this.rdrCtx.clipInvScale == 0.0d) ? JOIN_ERROR\n-                    : (JOIN_ERROR * this.rdrCtx.clipInvScale))\n-                    + lineWidth2;\n-\n-            this.joinLimitMinSq = limitMin * limitMin;\n+            if (rdrCtx.doRender) {\n+                final double limitMin = ((this.rdrCtx.clipInvScale == 0.0d) ? JOIN_ERROR\n+                        : (JOIN_ERROR * this.rdrCtx.clipInvScale))\n+                        + lineWidth2;\n@@ -179,0 +178,5 @@\n+                this.joinLimitMinSq = limitMin * limitMin;\n+            } else {\n+                \/\/ createStrokedShape(): disable limit checks:\n+                this.joinLimitMinSq = 0.0;\n+            }\n@@ -180,12 +184,17 @@\n-            \/\/ chord:  s = 2 r * sin( phi \/ 2)\n-            \/\/ height: h = 2 r * sin( phi \/ 4)^2\n-            \/\/ small angles (phi < 90):\n-            \/\/ h = s^2 \/ (8 r)\n-            \/\/ so s^2 = (8 h * r)\n-\n-            \/\/ height max (note ROUND_JOIN_ERROR = 8 * JOIN_ERROR)\n-            final double limitMin = ((this.rdrCtx.clipInvScale == 0.0d) ? ROUND_JOIN_ERROR\n-                    : (ROUND_JOIN_ERROR * this.rdrCtx.clipInvScale));\n-\n-            \/\/ chord limit (s^2):\n-            this.joinLimitMinSq = limitMin * this.lineWidth2;\n+            if (rdrCtx.doRender) {\n+                \/\/ chord:  s = 2 r * sin( phi \/ 2)\n+                \/\/ height: h = 2 r * sin( phi \/ 4)^2\n+                \/\/ small angles (phi < 90):\n+                \/\/ h = s^2 \/ (8 r)\n+                \/\/ so s^2 = (8 h * r)\n+\n+                \/\/ height max (note ROUND_JOIN_ERROR = 8 * JOIN_ERROR)\n+                final double limitMin = ((this.rdrCtx.clipInvScale == 0.0d) ? ROUND_JOIN_ERROR\n+                        : (ROUND_JOIN_ERROR * this.rdrCtx.clipInvScale));\n+\n+                \/\/ chord limit (s^2):\n+                this.joinLimitMinSq = limitMin * this.lineWidth2;\n+            } else {\n+                \/\/ createStrokedShape(): disable limit checks:\n+                this.joinLimitMinSq = 0.0;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Stroker.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    private static final String VERSION = \"marlin-0.9.4.6-Unsafe-OpenJDK\";\n+    private static final String VERSION = \"marlin-0.9.4.6.1-Unsafe-OpenJDK\";\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Version.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.awt.*;\n+import java.awt.image.*;\n+import java.awt.geom.*;\n+import java.util.Arrays;\n+import javax.imageio.*;\n+\n+\/**\n+ * @test\n+ * @bug 8316741\n+ * @summary Verifies that Marlin renderer's Stroker generates properly joins\n+ * in createStrokedShape()\n+ * @run main TestCreateStrokedShapeJoins\n+ *\/\n+public class TestCreateStrokedShapeJoins {\n+\n+    static final boolean SAVE_IMAGE = false;\n+\n+    private final static int W = 200;\n+\n+    private final static int[] REF_COUNTS = new int[]{4561, 4790, 5499};\n+\n+    public static void main(String[] args) throws Exception {\n+        final int[] test = new int[]{\n+            test(BasicStroke.JOIN_BEVEL),\n+            test(BasicStroke.JOIN_ROUND),\n+            test(BasicStroke.JOIN_MITER)\n+        };\n+\n+        System.out.println(\"test: \" + Arrays.toString(test));\n+        System.out.println(\"ref:  \" + Arrays.toString(REF_COUNTS));\n+\n+        \/\/ check results:\n+        for (int i = 0; i < REF_COUNTS.length; i++) {\n+            if (test[i] != REF_COUNTS[i]) {\n+                throw new RuntimeException(\"Invalid test[\" + i + \"]: \" + test[i] + \" != \" + REF_COUNTS[i]);\n+            }\n+        }\n+    }\n+\n+    private static int test(int join) throws Exception {\n+        final BufferedImage image = new BufferedImage(W, W, BufferedImage.TYPE_INT_ARGB);\n+        final Graphics2D g = image.createGraphics();\n+        try {\n+            g.setPaint(Color.BLACK);\n+            g.fillRect(0, 0, W, W);\n+            g.setPaint(Color.WHITE);\n+            g.setTransform(new AffineTransform(W, 0, 0, W, 0, 0));\n+\n+            final BasicStroke stroke = new BasicStroke(0.15f, 0, join, 10);\n+\n+            final Path2D p = new Path2D.Float();\n+            p.moveTo(0.95f, 0.6f);\n+            p.lineTo(0.5f, 0.5f);\n+            p.lineTo(0.95f, 0.4f);\n+\n+            final Shape outline = stroke.createStrokedShape(p);\n+            g.fill(outline);\n+        } finally {\n+            g.dispose();\n+        }\n+        if (SAVE_IMAGE) {\n+            final File file = new File(\"TestCreateStrokedShapeJoins-\" + join + \".png\");\n+            System.out.println(\"Writing \" + file.getAbsolutePath());\n+            ImageIO.write(image, \"png\", file);\n+        }\n+        int count = 0;\n+\n+        for (int y = 0; y < W; y++) {\n+            for (int x = 0; x < W; x++) {\n+                final int rgb = image.getRGB(x, y);\n+                final int b = rgb & 0xFF;\n+\n+                if (b != 0) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/TestCreateStrokedShapeJoins.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}