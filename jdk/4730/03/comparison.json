{"files":[{"patch":"@@ -59,0 +59,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SHORTCUT_HINT;;\n@@ -85,1 +86,1 @@\n-        boolean withDesktopFile = !associations.isEmpty() || SHORTCUT_HINT.fetchFrom(params);\n+        boolean withDesktopFile = !associations.isEmpty() || LINUX_SHORTCUT_HINT.fetchFrom(params);\n@@ -141,1 +142,2 @@\n-            List<String> launcherPaths = AppImageFile.getLauncherNames(\n+            List<AppImageFile.LauncherInfo> launcherInfos =\n+                    AppImageFile.getLaunchers(\n@@ -143,2 +145,2 @@\n-            if (!launcherPaths.isEmpty()) {\n-                launcherPaths.remove(0); \/\/ Remove main launcher\n+            if (!launcherInfos.isEmpty()) {\n+                launcherInfos.remove(0); \/\/ Remove main launcher\n@@ -146,1 +148,1 @@\n-            for (var launcherPath : launcherPaths) {\n+            for (var launcherInfo : launcherInfos) {\n@@ -149,6 +151,9 @@\n-                        launcherPath);\n-                launcherParams = AddLauncherArguments.merge(params, launcherParams,\n-                    ICON.getID(), ICON_PNG.getID(), ADD_LAUNCHERS.getID(),\n-                    FILE_ASSOCIATIONS.getID(), PREDEFINED_APP_IMAGE.getID());\n-                nestedIntegrations.add(new DesktopIntegration(thePackage,\n-                        launcherParams, params));\n+                        launcherInfo.getName());\n+                launcherParams = AddLauncherArguments.merge(params,\n+                        launcherParams, ICON.getID(), ICON_PNG.getID(),\n+                        ADD_LAUNCHERS.getID(), FILE_ASSOCIATIONS.getID(),\n+                        PREDEFINED_APP_IMAGE.getID());\n+                if (launcherInfo.isShortcut()) {\n+                    nestedIntegrations.add(new DesktopIntegration(thePackage,\n+                            launcherParams, params));\n+                }\n@@ -158,5 +163,7 @@\n-                launcherParams = AddLauncherArguments.merge(params, launcherParams,\n-                        ICON.getID(), ICON_PNG.getID(), ADD_LAUNCHERS.getID(),\n-                        FILE_ASSOCIATIONS.getID());\n-                nestedIntegrations.add(new DesktopIntegration(thePackage,\n-                        launcherParams, params));\n+                launcherParams = AddLauncherArguments.merge(params,\n+                        launcherParams, ICON.getID(), ICON_PNG.getID(),\n+                        ADD_LAUNCHERS.getID(), FILE_ASSOCIATIONS.getID());\n+                if (SHORTCUT_HINT.fetchFrom(launcherParams)) {\n+                    nestedIntegrations.add(new DesktopIntegration(thePackage,\n+                            launcherParams, params));\n+                }\n@@ -570,1 +577,1 @@\n-    private static final StandardBundlerParam<Boolean> SHORTCUT_HINT =\n+    private static final StandardBundlerParam<Boolean> LINUX_SHORTCUT_HINT =\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/DesktopIntegration.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.MENU_HINT;\n+import static jdk.jpackage.internal.StandardBundlerParam.SHORTCUT_HINT;\n@@ -62,0 +64,2 @@\n+ * win-shortcut\n+ * win-menu\n@@ -63,0 +67,1 @@\n+ * linux-shortcut\n@@ -112,7 +117,0 @@\n-        Arguments.putUnlessNull(bundleParams, CLIOptions.LINUX_CATEGORY.getId(),\n-                getOptionValue(CLIOptions.LINUX_CATEGORY));\n-\n-        Arguments.putUnlessNull(bundleParams,\n-                CLIOptions.WIN_CONSOLE_HINT.getId(),\n-                getOptionValue(CLIOptions.WIN_CONSOLE_HINT));\n-\n@@ -123,0 +121,17 @@\n+        if (Platform.isWindows())  {\n+            Arguments.putUnlessNull(bundleParams,\n+                    CLIOptions.WIN_CONSOLE_HINT.getId(),\n+                    getOptionValue(CLIOptions.WIN_CONSOLE_HINT));\n+            Arguments.putUnlessNull(bundleParams, SHORTCUT_HINT.getID(),\n+                    getOptionValue(CLIOptions.WIN_SHORTCUT_HINT));\n+            Arguments.putUnlessNull(bundleParams, MENU_HINT.getID(),\n+                    getOptionValue(CLIOptions.WIN_MENU_HINT));\n+        }\n+\n+        if (Platform.isLinux())  {\n+            Arguments.putUnlessNull(bundleParams, CLIOptions.LINUX_CATEGORY.getId(),\n+                    getOptionValue(CLIOptions.LINUX_CATEGORY));\n+            Arguments.putUnlessNull(bundleParams, SHORTCUT_HINT.getID(),\n+                    getOptionValue(CLIOptions.LINUX_SHORTCUT_HINT));\n+        }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AddLauncherArguments.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import org.w3c.dom.Node;\n@@ -44,0 +45,1 @@\n+import org.w3c.dom.NamedNodeMap;\n@@ -49,0 +51,2 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SHORTCUT_HINT;\n+import static jdk.jpackage.internal.StandardBundlerParam.MENU_HINT;\n@@ -56,1 +60,1 @@\n-    private final List<String> addLauncherNames;\n+    private final List<LauncherInfo> addLauncherInfos;\n@@ -69,1 +73,1 @@\n-    private AppImageFile(String launcherName, List<String> addLauncherNames,\n+    private AppImageFile(String launcherName, List<LauncherInfo> launcherInfos,\n@@ -72,1 +76,1 @@\n-        this.addLauncherNames = addLauncherNames;\n+        this.addLauncherInfos = launcherInfos;\n@@ -82,2 +86,2 @@\n-    List<String> getAddLauncherNames() {\n-        return addLauncherNames;\n+    List<LauncherInfo> getAddLaunchers() {\n+        return addLauncherInfos;\n@@ -134,1 +138,4 @@\n-                xml.writeCharacters(APP_NAME.fetchFrom(sl));\n+                xml.writeAttribute(\"name\", APP_NAME.fetchFrom(sl));\n+                xml.writeAttribute(\"shortcut\",\n+                        SHORTCUT_HINT.fetchFrom(sl).toString());\n+                xml.writeAttribute(\"menu\", MENU_HINT.fetchFrom(sl).toString());\n@@ -159,1 +166,1 @@\n-            List<String> addLaunchers = new ArrayList<>();\n+            List<LauncherInfo> launcherInfos = new ArrayList<>();\n@@ -167,2 +174,2 @@\n-            NodeList launcherNameNodes = (NodeList) xPath.evaluate(\n-                    \"\/jpackage-state\/add-launcher\/text()\", doc,\n+            NodeList launcherNodes = (NodeList) xPath.evaluate(\n+                    \"\/jpackage-state\/add-launcher\", doc,\n@@ -171,2 +178,9 @@\n-            for (int i = 0; i != launcherNameNodes.getLength(); i++) {\n-                addLaunchers.add(launcherNameNodes.item(i).getNodeValue());\n+            for (int i = 0; i != launcherNodes.getLength(); i++) {\n+                 Node item = launcherNodes.item(i);\n+                 String name = getAttribute(item, \"name\");\n+                 String shortcut = getAttribute(item, \"shortcut\");\n+                 String menu = getAttribute(item, \"menu\");\n+\n+                 launcherInfos.add(new LauncherInfo(name,\n+                         !(\"false\".equals(shortcut)),\n+                         !(\"false\".equals(menu))));\n@@ -176,1 +190,1 @@\n-                    mainLauncher, addLaunchers, version, platform);\n+                    mainLauncher, launcherInfos, version, platform);\n@@ -187,0 +201,6 @@\n+    private static String getAttribute(Node item, String attr) {\n+        NamedNodeMap attrs = item.getAttributes();\n+        Node attrNode = attrs.getNamedItem(attr);\n+        return ((attrNode == null) ? null : attrNode.getNodeValue());\n+    }\n+\n@@ -205,2 +225,2 @@\n-     * Returns list of launcher names configured for the application.\n-     * The first item in the returned list is main launcher name.\n+     * Returns list of LauncherInfo objects configured for the application.\n+     * The first item in the returned list is main launcher.\n@@ -209,1 +229,1 @@\n-    static List<String> getLauncherNames(Path appImageDir,\n+    static List<LauncherInfo> getLaunchers(Path appImageDir,\n@@ -211,1 +231,1 @@\n-        List<String> launchers = new ArrayList<>();\n+        List<LauncherInfo> launchers = new ArrayList<>();\n@@ -215,2 +235,3 @@\n-                launchers.add(appImageInfo.getLauncherName());\n-                launchers.addAll(appImageInfo.getAddLauncherNames());\n+                launchers.add(new LauncherInfo(\n+                        appImageInfo.getLauncherName(), true, true));\n+                launchers.addAll(appImageInfo.getAddLaunchers());\n@@ -229,0 +250,2 @@\n+        \/\/ this should never be the case, but maintaining behavior of\n+        \/\/ creating default launchers without AppImageFile present\n@@ -230,3 +253,2 @@\n-        launchers.add(APP_NAME.fetchFrom(params));\n-        ADD_LAUNCHERS.fetchFrom(params).stream().map(APP_NAME::fetchFrom).forEach(\n-                launchers::add);\n+        ADD_LAUNCHERS.fetchFrom(params).stream().map(APP_NAME::fetchFrom).map(\n+                name -> new LauncherInfo(name, true, true)).forEach(launchers::add);\n@@ -265,3 +287,1 @@\n-        if (launcherName == null || launcherName.length() == 0 ||\n-            addLauncherNames.indexOf(\"\") != -1) {\n-            \/\/ Some launchers have empty names. This is invalid.\n+        if (launcherName == null || launcherName.length() == 0) {\n@@ -270,2 +290,5 @@\n-\n-        \/\/ Add more validation.\n+        for (var launcher : addLauncherInfos) {\n+            if (\"\".equals(launcher.getName())) {\n+                return false;\n+            }\n+        }\n@@ -276,0 +299,21 @@\n+    static class LauncherInfo {\n+        private String name;\n+        private boolean shortcut;\n+        private boolean menu;\n+\n+        public LauncherInfo(String name, boolean shortcut, boolean menu) {\n+            this.name = name;\n+            this.shortcut = shortcut;\n+            this.menu = menu;\n+        }\n+        public String getName() {\n+            return name;\n+        }\n+        public boolean isShortcut() {\n+            return shortcut;\n+        }\n+        public boolean isMenu() {\n+            return menu;\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":71,"deletions":27,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -314,0 +314,18 @@\n+    static final StandardBundlerParam<Boolean> SHORTCUT_HINT  =\n+            new StandardBundlerParam<>(\n+                    \"shortcut-hint\", \/\/ not directly related to a CLI option\n+                    Boolean.class,\n+                    params -> true,  \/\/ defaults to true\n+                    (s, p) -> (s == null || \"null\".equalsIgnoreCase(s)) ?\n+                            true : Boolean.valueOf(s)\n+            );\n+\n+    static final StandardBundlerParam<Boolean> MENU_HINT  =\n+            new StandardBundlerParam<>(\n+                    \"menu-hint\", \/\/ not directly related to a CLI option\n+                    Boolean.class,\n+                    params -> true,  \/\/ defaults to true\n+                    (s, p) -> (s == null || \"null\".equalsIgnoreCase(s)) ?\n+                            true : Boolean.valueOf(s)\n+            );\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -138,2 +138,3 @@\n-\\          \"arguments\", \"java-options\", \"app-version\", \"icon\", and\\n\\\n-\\          \"win-console\" can be used.\\n\\\n+\\          \"arguments\", \"java-options\", \"app-version\", \"icon\",\\n\\\n+\\          \"win-console\", \"win-shortcut\", \"win-menu\",\\n\\\n+\\          \"linux-app-category\", and \"linux-shortcut\" can be used.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -138,2 +138,3 @@\n-\\          \"arguments\", \"java-options\", \"app-version\", \"icon\", and\\n\\\n-\\          \"win-console\" can be used.\\n\\\n+\\          \"arguments\", \"java-options\", \"app-version\", \"icon\",\\n\\\n+\\          \"win-console\", \"win-shortcut\", \"win-menu\",\\n\\\n+\\          \"linux-app-category\", and \"linux-shortcut\" can be used.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_ja.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -138,2 +138,3 @@\n-\\          \"arguments\", \"java-options\", \"app-version\", \"icon\", and\\n\\\n-\\          \"win-console\" can be used.\\n\\\n+\\          \"arguments\", \"java-options\", \"app-version\", \"icon\",\\n\\\n+\\          \"win-console\", \"win-shortcut\", \"win-menu\",\\n\\\n+\\          \"linux-app-category\", and \"linux-shortcut\" can be used.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_zh_CN.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-            launcherPaths = Collections.emptyList();\n+            launchers = Collections.emptyList();\n@@ -112,4 +112,1 @@\n-            launcherPaths = AppImageFile.getLauncherNames(appImageRoot, params).stream()\n-                    .map(name -> installedAppImage.launchersDirectory().resolve(name))\n-                    .map(WixAppImageFragmentBuilder::addExeSuffixToPath)\n-                    .toList();\n+            launchers = AppImageFile.getLaunchers(appImageRoot, params);\n@@ -414,1 +411,1 @@\n-        for (var launcherPath : launcherPaths) {\n+        for (var launcher : launchers) {\n@@ -416,5 +413,15 @@\n-                String componentId = addShortcutComponent(xml, launcherPath,\n-                        folder);\n-                if (componentId != null) {\n-                    defineShortcutFolders.add(folder);\n-                    componentIds.add(componentId);\n+                Path launcherPath = addExeSuffixToPath(installedAppImage\n+                        .launchersDirectory().resolve(launcher.getName()));\n+\n+                if ((launcher.isMenu() &&\n+                        (folder.equals(ShortcutsFolder.ProgramMenu))) ||\n+                    (launcher.isShortcut() &&\n+                        (folder.equals(ShortcutsFolder.Desktop)))) {\n+\n+                    String componentId = addShortcutComponent(xml, launcherPath,\n+                            folder);\n+\n+                    if (componentId != null) {\n+                        defineShortcutFolders.add(folder);\n+                        componentIds.add(componentId);\n+                    }\n@@ -827,1 +834,1 @@\n-    private List<Path> launcherPaths;\n+    private List<AppImageFile.LauncherInfo> launchers;\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,6 @@\n+    public AdditionalLauncher setShortcuts(boolean menu, boolean shortcut) {\n+        withMenuShortcut = menu;\n+        withShortcut = shortcut;\n+        return this;\n+    }\n+\n@@ -146,0 +152,12 @@\n+        if (withShortcut != null) {\n+            if (TKit.isLinux()) {\n+                properties.add(Map.entry(\"linux-shortcut\", withShortcut.toString()));\n+            } else if (TKit.isWindows()) {\n+                properties.add(Map.entry(\"win-shortcut\", withShortcut.toString()));\n+            }\n+        }\n+\n+        if (TKit.isWindows() && withMenuShortcut != null)  {\n+            properties.add(Map.entry(\"win-menu\", withMenuShortcut.toString()));\n+        }\n+\n@@ -181,1 +199,1 @@\n-                withLinuxDesktopFile = true;\n+                withLinuxDesktopFile = Boolean.FALSE != withShortcut;\n@@ -189,1 +207,1 @@\n-                withLinuxDesktopFile = true;\n+                withLinuxDesktopFile = Boolean.FALSE != withShortcut;\n@@ -200,2 +218,2 @@\n-                withLinuxDesktopFile = Stream.of(\"--linux-shortcut\").anyMatch(\n-                        cmd::hasArgument);\n+                withLinuxDesktopFile = (Boolean.FALSE != withShortcut) &&\n+                        Stream.of(\"--linux-shortcut\").anyMatch(cmd::hasArgument);\n@@ -215,0 +233,12 @@\n+    private void verifyShortcuts(JPackageCommand cmd) throws IOException {\n+        if (TKit.isLinux() && !cmd.isImagePackageType()\n+                && withShortcut != null) {\n+            Path desktopFile = LinuxHelper.getDesktopFile(cmd, name);\n+            if (withShortcut) {\n+                TKit.assertFileExists(desktopFile);\n+            } else {\n+                TKit.assertPathExists(desktopFile, false);\n+            }\n+        }\n+    }\n+\n@@ -217,0 +247,1 @@\n+        verifyShortcuts(cmd);\n@@ -243,0 +274,2 @@\n+    private Boolean withMenuShortcut;\n+    private Boolean withShortcut;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":38,"deletions":5,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -107,2 +107,2 @@\n-        Assert.assertArrayEquals(new String[0],\n-                file.getAddLauncherNames().toArray(String[]::new));\n+\n+        Assert.assertEquals(0, file.getAddLaunchers().size());\n@@ -122,1 +122,1 @@\n-    public void testAddLauncherNames() throws IOException {\n+    public void testAddLaunchers() throws IOException {\n@@ -139,4 +139,8 @@\n-        List<String> addLauncherNames = aif.getAddLauncherNames();\n-        Assert.assertEquals(2, addLauncherNames.size());\n-        Assert.assertTrue(addLauncherNames.contains(\"Launcher2Name\"));\n-        Assert.assertTrue(addLauncherNames.contains(\"Launcher3Name\"));\n+        List<AppImageFile.LauncherInfo> addLaunchers = aif.getAddLaunchers();\n+        Assert.assertEquals(2, addLaunchers.size());\n+        List<String> names = new ArrayList<String>();\n+        names.add(addLaunchers.get(0).getName());\n+        names.add(addLaunchers.get(1).getName());\n+\n+        Assert.assertTrue(names.contains(\"Launcher2Name\"));\n+        Assert.assertTrue(names.contains(\"Launcher3Name\"));\n@@ -153,1 +157,1 @@\n-        Assert.assertNull(file.getAddLauncherNames());\n+        Assert.assertNull(file.getAddLaunchers());\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.io.File;\n+import java.util.Map;\n+import java.lang.invoke.MethodHandles;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.FileAssociations;\n+import jdk.jpackage.test.AdditionalLauncher;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n+\n+\/**\n+ * Test --add-launcher parameter with shortcuts (platform permitting).\n+ * Output of the test should be AddLShortcutTest*.* installer.\n+ * The output installer should provide the same functionality as the\n+ * default installer (see description of the default installer in\n+ * SimplePackageTest.java) plus install extra application launchers with and\n+ * without various shortcuts to be tested manually.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --add-launcher\n+ * @key jpackagePlatformPackage\n+ * @library ..\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile AddLShortcutTest.java\n+ * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=AddLShortcutTest\n+ *\/\n+\n+public class AddLShortcutTest {\n+\n+    @Test\n+    public void test() {\n+        \/\/ Configure several additional launchers with each combination of\n+        \/\/ possible shortcut hints in add-launcher property file.\n+        \/\/ default is true so Foo (no property), and Bar (properties set to \"true\")\n+        \/\/ will have shortcuts while other launchers with some properties set\n+        \/\/ to \"false\" will have none.\n+\n+        PackageTest packageTest = new PackageTest().configureHelloApp();\n+        packageTest.addInitializer(cmd -> {\n+            cmd.addArguments(\"--arguments\", \"Duke\", \"--arguments\", \"is\",\n+                    \"--arguments\", \"the\", \"--arguments\", \"King\");\n+            if (TKit.isWindows()) {\n+                cmd.addArguments(\"--win-shortcut\", \"--win-menu\");\n+            } else if (TKit.isLinux()) {\n+                cmd.addArguments(\"--linux-shortcut\");\n+            }\n+        });\n+\n+        new FileAssociations(\n+                MethodHandles.lookup().lookupClass().getSimpleName()).applyTo(\n+                packageTest);\n+\n+        new AdditionalLauncher(\"Foo\")\n+                .setDefaultArguments(\"yep!\")\n+                .setIcon(GOLDEN_ICON)\n+                .applyTo(packageTest);\n+\n+        new AdditionalLauncher(\"Bar\")\n+                .setDefaultArguments(\"one\", \"two\", \"three\")\n+                .setIcon(GOLDEN_ICON)\n+                .setShortcuts(true, true)\n+                .applyTo(packageTest);\n+\n+        new AdditionalLauncher(\"Launcher3\")\n+                .setDefaultArguments()\n+                .setIcon(GOLDEN_ICON)\n+                .setShortcuts(false, false)\n+                .applyTo(packageTest);\n+\n+        new AdditionalLauncher(\"Launcher4\")\n+                .setDefaultArguments()\n+                .setIcon(GOLDEN_ICON)\n+                .setShortcuts(true, false)\n+                .applyTo(packageTest);\n+\n+        new AdditionalLauncher(\"Launcher5\")\n+                .setDefaultArguments()\n+                .setIcon(GOLDEN_ICON)\n+                .setShortcuts(false, true)\n+                .applyTo(packageTest);\n+\n+        packageTest.run();\n+    }\n+\n+    private final static Path GOLDEN_ICON = TKit.TEST_SRC_ROOT.resolve(Path.of(\n+            \"resources\", \"icon\" + TKit.ICON_SUFFIX));\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/AddLShortcutTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}