{"files":[{"patch":"@@ -36,2 +36,1 @@\n-void MallocHeader::print_block_on_error(outputStream* st, address bad_address) const {\n-  assert(bad_address >= (address)this, \"sanity\");\n+void MallocHeader::print_block_on_error(outputStream* st, address bad_address) {\n@@ -47,1 +46,1 @@\n-               p2i(this), p2i(bad_address));\n+               p2i(bad_address), p2i(bad_address));\n@@ -49,1 +48,1 @@\n-  address from1 = align_down((address)this, sizeof(void*)) - (min_dump_length \/ 2);\n+  address from1 = align_down((address)bad_address, sizeof(void*)) - (min_dump_length \/ 2);\n","filename":"src\/hotspot\/share\/services\/mallocHeader.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  void print_block_on_error(outputStream* st, address bad_address) const;\n+  static void print_block_on_error(outputStream* st, address bad_address);\n@@ -132,0 +132,4 @@\n+  \/\/ Check correct alignment and placement of pointer, fill in short descriptive text and return false\n+  \/\/ if this is not the case.\n+  \/\/ Returns true if the memblock looks OK.\n+  inline static bool check_pointer_integrity(uintptr_t header, char* msg, size_t msglen, address* p_corruption);\n@@ -135,1 +139,1 @@\n-  inline void assert_block_integrity() const;\n+  inline static MallocHeader* assert_block_integrity(const void* memblock);\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,15 +54,1 @@\n-inline void MallocHeader::assert_block_integrity() const {\n-  char msg[256];\n-  address corruption = NULL;\n-  if (!check_block_integrity(msg, sizeof(msg), &corruption)) {\n-    if (corruption != NULL) {\n-      print_block_on_error(tty, (address)this);\n-    }\n-    fatal(\"NMT corruption: Block at \" PTR_FORMAT \": %s\", p2i(this), msg);\n-  }\n-}\n-\n-inline bool MallocHeader::check_block_integrity(char* msg, size_t msglen, address* p_corruption) const {\n-  \/\/ Note: if you modify the error messages here, make sure you\n-  \/\/ adapt the associated gtests too.\n-\n+inline bool MallocHeader::check_pointer_integrity(uintptr_t header, char* msg, size_t msglen, address* p_corruption) {\n@@ -72,1 +58,1 @@\n-  if (((size_t)p2i(this)) < K) {\n+  if (header < K) {\n@@ -92,2 +78,2 @@\n-  if (!is_aligned(this, sizeof(uint64_t))) {\n-    *p_corruption = (address)this;\n+  if (!is_aligned(header, sizeof(uint64_t))) {\n+    *p_corruption = (address)header;\n@@ -97,0 +83,26 @@\n+  return true;\n+}\n+\n+inline MallocHeader* MallocHeader::assert_block_integrity(const void* memblock) {\n+  char msg[256];\n+  address corruption = NULL;\n+  uintptr_t header = reinterpret_cast<uintptr_t>(memblock) - sizeof(MallocHeader);\n+  if (!check_pointer_integrity(header, msg, sizeof(msg), &corruption)) {\n+    if (corruption != NULL) {\n+      MallocHeader::print_block_on_error(tty, (address)header);\n+    }\n+    fatal(\"NMT corruption: Block at \" PTR_FORMAT \": %s\", header, msg);\n+  }\n+  MallocHeader* header_pointer = &(((MallocHeader*)memblock)[-1]);\n+  if (!header_pointer->check_block_integrity( msg, sizeof(msg), &corruption)) {\n+    if (corruption != NULL) {\n+      MallocHeader::print_block_on_error(tty, (address)header);\n+    }\n+    fatal(\"NMT corruption: Block at \" PTR_FORMAT \": %s\", header, msg);\n+  }\n+  return header_pointer;\n+}\n+\n+inline bool MallocHeader::check_block_integrity(char* msg, size_t msglen, address* p_corruption) const {\n+  \/\/ Note: if you modify the error messages here, make sure you\n+  \/\/ adapt the associated gtests too.\n","filename":"src\/hotspot\/share\/services\/mallocHeader.inline.hpp","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    MallocHeader* const header2 = malloc_header(memblock);\n+    MallocHeader* header2 = MallocHeader::assert_block_integrity(memblock);\n@@ -189,1 +189,0 @@\n-    header2->assert_block_integrity();\n@@ -200,2 +199,1 @@\n-  MallocHeader* const header = malloc_header(memblock);\n-  header->assert_block_integrity();\n+  MallocHeader* header = MallocHeader::assert_block_integrity(memblock);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-    return (MallocHeader*)((char*)memblock - sizeof(MallocHeader));\n+    return &(((MallocHeader*)memblock)[-1]);\n@@ -322,1 +322,1 @@\n-    return (const MallocHeader*)((const char*)memblock - sizeof(MallocHeader));\n+    return &(((const MallocHeader*)memblock)[-1]);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-  const MallocHeader* hdr = MallocTracker::malloc_header(payload);\n-  hdr->assert_block_integrity();\n+  MallocHeader* hdr = MallocHeader::assert_block_integrity(payload);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}