{"files":[{"patch":"@@ -729,2 +729,1 @@\n-    MallocHeader* header = MallocTracker::malloc_header(memblock);\n-    header->assert_block_integrity(); \/\/ Assert block hasn't been tampered with.\n+    MallocHeader* header = MallocHeader::resolve_checked(memblock);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -117,1 +117,4 @@\n- public:\n+  template<typename InTypeParam, typename OutTypeParam>\n+  inline static OutTypeParam resolve_checked_impl(InTypeParam memblock);\n+\n+public:\n@@ -143,0 +146,4 @@\n+  \/\/ Check correct alignment and placement of pointer, fill in short descriptive text and return false\n+  \/\/ if this is not the case.\n+  \/\/ Returns true if the memblock looks OK.\n+  inline static bool is_valid_malloced_pointer(const void* payload, char* msg, size_t msglen);\n@@ -146,1 +153,2 @@\n-  inline void assert_block_integrity() const;\n+  inline static const MallocHeader* resolve_checked(const void* memblock);\n+  inline static MallocHeader* resolve_checked(void* memblock);\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,13 +64,3 @@\n-inline void MallocHeader::assert_block_integrity() const {\n-  char msg[256];\n-  address corruption = nullptr;\n-  if (!check_block_integrity(msg, sizeof(msg), &corruption)) {\n-    print_block_on_error(tty, corruption != nullptr ? corruption : (address)this);\n-    fatal(\"NMT corruption: Block at \" PTR_FORMAT \": %s\", p2i(this), msg);\n-  }\n-}\n-\n-inline bool MallocHeader::check_block_integrity(char* msg, size_t msglen, address* p_corruption) const {\n-  \/\/ Note: if you modify the error messages here, make sure you\n-  \/\/ adapt the associated gtests too.\n-\n+inline bool MallocHeader::is_valid_malloced_pointer(const void* payload, char* msg, size_t msglen) {\n+  \/\/ Handle the pointer as an integral type\n+  uintptr_t ptr = reinterpret_cast<uintptr_t>(payload);\n@@ -78,1 +68,1 @@\n-  \/\/ values. Note that we should not call this for ::free(null),\n+  \/\/ values. Note that we should not call this for ::free(nullptr),\n@@ -80,1 +70,1 @@\n-  if (((size_t)p2i(this)) < K) {\n+  if (ptr < K) {\n@@ -100,2 +90,1 @@\n-  if (!is_aligned(this, sizeof(uint64_t))) {\n-    *p_corruption = (address)this;\n+  if (!is_aligned(ptr, sizeof(uint64_t))) {\n@@ -105,0 +94,28 @@\n+  return true;\n+}\n+\n+template<typename InTypeParam, typename OutTypeParam>\n+inline OutTypeParam MallocHeader::resolve_checked_impl(InTypeParam memblock) {\n+  char msg[256];\n+  address corruption = nullptr;\n+  if (!is_valid_malloced_pointer(memblock, msg, sizeof(msg))) {\n+    fatal(\"Not a valid malloc pointer: \" PTR_FORMAT \": %s\", p2i(memblock), msg);\n+  }\n+  OutTypeParam header_pointer = (OutTypeParam)memblock - 1;\n+  if (!header_pointer->check_block_integrity(msg, sizeof(msg), &corruption)) {\n+    header_pointer->print_block_on_error(tty, corruption != nullptr ? corruption : (address)header_pointer);\n+    fatal(\"NMT corruption: Block at \" PTR_FORMAT \": %s\", p2i(memblock), msg);\n+  }\n+  return header_pointer;\n+}\n+\n+inline MallocHeader* MallocHeader::resolve_checked(void* memblock) {\n+  return MallocHeader::resolve_checked_impl<void*, MallocHeader*>(memblock);\n+}\n+inline const MallocHeader* MallocHeader::resolve_checked(const void* memblock) {\n+  return MallocHeader::resolve_checked_impl<const void*, const MallocHeader*>(memblock);\n+}\n+\n+inline bool MallocHeader::check_block_integrity(char* msg, size_t msglen, address* p_corruption) const {\n+  \/\/ Note: if you modify the error messages here, make sure you\n+  \/\/ adapt the associated gtests too.\n@@ -133,1 +150,1 @@\n-                p2i(footer_address()));\n+                 p2i(footer_address()));\n","filename":"src\/hotspot\/share\/services\/mallocHeader.inline.hpp","additions":35,"deletions":18,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-    MallocHeader* const header2 = malloc_header(memblock);\n+    const MallocHeader* header2 = MallocHeader::resolve_checked(memblock);\n@@ -176,1 +176,0 @@\n-    header2->assert_block_integrity();\n@@ -187,2 +186,1 @@\n-  MallocHeader* const header = malloc_header(memblock);\n-  header->assert_block_integrity();\n+  MallocHeader* header = MallocHeader::resolve_checked(memblock);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-    return (MallocHeader*)((char*)memblock - sizeof(MallocHeader));\n+    return (MallocHeader*)memblock -1;\n@@ -337,1 +337,1 @@\n-    return (const MallocHeader*)((const char*)memblock - sizeof(MallocHeader));\n+    return (const MallocHeader*)memblock -1;\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-  const MallocHeader* hdr = MallocTracker::malloc_header(payload);\n-  hdr->assert_block_integrity();\n+  const MallocHeader* hdr = MallocHeader::resolve_checked(payload);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}