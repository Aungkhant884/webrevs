{"files":[{"patch":"@@ -46,1 +46,3 @@\n-                 \"test17\", \"test18\", \"test19\"})\n+                 \"test17\", \"test18\", \"test19\",\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\", \"test24\"})\n@@ -85,0 +87,5 @@\n+        Asserts.assertEQ(b - a            , test20(a, b));\n+        Asserts.assertEQ(a - b            , test21(a, b));\n+        Asserts.assertEQ(b - a            , test22(a, b));\n+        Asserts.assertEQ(a - b            , test23(a, b));\n+        Asserts.assertEQ(2021 - a         , test24(a));\n@@ -250,0 +257,40 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public int test20(int x, int y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public int test21(int x, int y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public int test22(int x, int y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public int test23(int x, int y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + c => (c - 1) - x\n+    public int test24(int x) {\n+        return ~x + 2022;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test17\", \"test18\"})\n+                 \"test17\", \"test18\", \"test19\",\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\"})\n@@ -84,0 +86,5 @@\n+        Asserts.assertEQ(b - a            , test19(a, b));\n+        Asserts.assertEQ(a - b            , test20(a, b));\n+        Asserts.assertEQ(b - a            , test21(a, b));\n+        Asserts.assertEQ(a - b            , test22(a, b));\n+        Asserts.assertEQ(2021 - a         , test23(a));\n@@ -241,0 +248,40 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public long test19(long x, long y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public long test20(long x, long y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public long test21(long x, long y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public long test22(long x, long y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + c => (c - 1) - x\n+    public long test23(long x) {\n+        return ~x + 2022;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test19\", \"test20\", \"test21\"})\n+                 \"test19\", \"test20\", \"test21\",\n+                 \"test22\", \"test23\", \"test24\",\n+                 \"test25\"})\n@@ -84,0 +86,4 @@\n+        Asserts.assertEQ(b - a            , test22(a, b));\n+        Asserts.assertEQ(a + 2023         , test23(a));\n+        Asserts.assertEQ(a + 1            , test24(a));\n+        Asserts.assertEQ(a                , test25(a));\n@@ -252,0 +258,31 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test22(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks c - ~x => x + (c + 1)\n+    public int test23(int x) {\n+        return 2022 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test24(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test25(int x) {\n+        return -1 - ~x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubINodeIdealizationTests.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test19\", \"test20\", \"test21\"})\n+                 \"test19\", \"test20\", \"test21\",\n+                 \"test22\", \"test23\", \"test24\",\n+                 \"test25\"})\n@@ -84,0 +86,4 @@\n+        Asserts.assertEQ(b - a            , test22(a, b));\n+        Asserts.assertEQ(a + 2023         , test23(a));\n+        Asserts.assertEQ(a + 1            , test24(a));\n+        Asserts.assertEQ(a                , test25(a));\n@@ -252,0 +258,31 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test22(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks c - ~x => x + (c + 1)\n+    public long test23(long x) {\n+        return 2022 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test24(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test25(long x) {\n+        return -1 - ~x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubLNodeIdealizationTests.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,530 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import jdk.test.lib.Asserts;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @bug 8281453\n- * @summary Test that transformation from ~x to -1-x in different situations works as intended.\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.irTests.TestIRSubIdealCMinusNotX\n- *\/\n-public class TestIRSubIdealCMinusNotX {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testInt_NotYPlusX_PlusOne(int x, int y) {\n-        return (~y + x) + 1; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testInt_NotYPlusX_PlusOne\")\n-    public void checkTestInt_NotYPlusX_PlusOne(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testInt_NotYPlusX_PlusOne(10, 9));\n-        Asserts.assertEquals(0, testInt_NotYPlusX_PlusOne(100, 100));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLong_NotYPlusX_PlusOne(long x, long y) {\n-        return (~y + x) + 1; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testLong_NotYPlusX_PlusOne\")\n-    public void checkTestLong_NotYPlusX_PlusOne(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1L, testLong_NotYPlusX_PlusOne(123_456_789_123L, 123_456_789_122L));\n-        Asserts.assertEquals(0L, testLong_NotYPlusX_PlusOne(123_456_789_123L, 123_456_789_123L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testInt_XPlusNotY_PlusOne(int x, int y) {\n-        return (x + ~y) + 1; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testInt_XPlusNotY_PlusOne\")\n-    public void checkTestInt_XPlusNotY_PlusOne(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testInt_XPlusNotY_PlusOne(10, 9));\n-        Asserts.assertEquals(0, testInt_XPlusNotY_PlusOne(100, 100));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLong_XPlusNotY_PlusOne(long x, long y) {\n-        return (x + ~y) + 1; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testLong_XPlusNotY_PlusOne\")\n-    public void checkTestLong_XPlusNotY_PlusOne(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1L, testLong_XPlusNotY_PlusOne(123_456_789_123L, 123_456_789_122L));\n-        Asserts.assertEquals(0L, testLong_XPlusNotY_PlusOne(123_456_789_123L, 123_456_789_123L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntNotYPlus_XPlusOne_(int x, int y) {\n-        return ~y + (x + 1); \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testIntNotYPlus_XPlusOne_\")\n-    public void checkTestIntNotYPlus_XPlusOne_(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testIntNotYPlus_XPlusOne_(10, 9));\n-        Asserts.assertEquals(0, testIntNotYPlus_XPlusOne_(100, 100));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongNotYPlus_XPlusOne_(long x, long y) {\n-        return ~y + (x + 1); \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testLongNotYPlus_XPlusOne_\")\n-    public void checkTestLongNotYPlus_XPlusOne_(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1L, testLongNotYPlus_XPlusOne_(123_456_789_123L, 123_456_789_122L));\n-        Asserts.assertEquals(0L, testLongNotYPlus_XPlusOne_(123_456_789_123L, 123_456_789_123L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testInt_XPlusOne_PlusNotY(int x, int y) {\n-        return (x + 1) + ~y; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testInt_XPlusOne_PlusNotY\")\n-    public void checkTestInt_XPlusOne_PlusNotY(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testInt_XPlusOne_PlusNotY(10, 9));\n-        Asserts.assertEquals(0, testInt_XPlusOne_PlusNotY(100, 100));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLong_XPlusOne_PlusNotY(long x, long y) {\n-        return (x + 1) + ~y; \/\/ transformed to x - y;\n-    }\n-\n-    @Run(test = \"testLong_XPlusOne_PlusNotY\")\n-    public void checkTestLong_XPlusOne_PlusNotY(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1L, testLong_XPlusOne_PlusNotY(123_456_789_123L, 123_456_789_122L));\n-        Asserts.assertEquals(0L, testLong_XPlusOne_PlusNotY(123_456_789_123L, 123_456_789_123L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntNotXPlusC(int x) {\n-        return ~x + 1234; \/\/ transformed to 1233 - x\n-    }\n-\n-    @Run(test = \"testIntNotXPlusC\")\n-    public void checkTestIntNotXPlusC(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1223, testIntNotXPlusC(10));\n-        Asserts.assertEquals(1233, testIntNotXPlusC(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongNotXPlusC(long x) {\n-        return ~x + 123_456_789_123L; \/\/ transformed to 123_456_789_122L - x\n-    }\n-\n-    @Run(test = \"testLongNotXPlusC\")\n-    public void checkTestLongNotXPlusC(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(113_456_789_122L, testLongNotXPlusC(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongNotXPlusC(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntNotXMinusNotY(int x, int y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-    @Run(test = \"testIntNotXMinusNotY\")\n-    public void checkTestIntNotXMinusNotY(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-1, testIntNotXMinusNotY(10, 9));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongNotXMinusNotY(long x, long y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-\n-    @Run(test = \"testLongNotXMinusNotY\")\n-    public void checkTestLongNotXMinusNotY(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-100_000_000_000L, testLongNotXMinusNotY(123_456_789_122L, 23_456_789_122L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntConIsNormal1(int x) {\n-        return 1234 - ~x; \/\/ transformed to x + 1235\n-    }\n-\n-    @Run(test = \"testIntConIsNormal1\")\n-    public void checkTestIntConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1245, testIntConIsNormal1(10));\n-        Asserts.assertEquals(1235, testIntConIsNormal1(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntConIsNormal2(int x) {\n-        return ~(-1234 - x); \/\/ transformed to x + 1233\n-    }\n-\n-    @Run(test = \"testIntConIsNormal2\")\n-    public void checkTestIntConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1243, testIntConIsNormal2(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal2(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongConIsNormal1(long x) {\n-        return 123_456_789_123L - ~x; \/\/ transformed to x + 123_456_789_124L\n-    }\n-\n-    @Run(test = \"testLongConIsNormal1\")\n-    public void checkTestLongConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(133_456_789_124L, testLongConIsNormal1(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_124L, testLongConIsNormal1(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongConIsNormal2(long x) {\n-        return ~(-123_456_789_123L - x); \/\/ transformed to x + 123_456_789_122L\n-    }\n-\n-    @Run(test = \"testLongConIsNormal2\")\n-    public void checkTestLongConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(133_456_789_122L, testLongConIsNormal2(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal2(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntConIsZero1(int x) {\n-        return 0 - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Run(test = \"testIntConIsZero1\")\n-    public void checkTestIntConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(11, testIntConIsZero1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntConIsZero2(int x) {\n-        return ~(0 - x); \/\/ transformed to x + -1\n-    }\n-\n-    @Run(test = \"testIntConIsZero2\")\n-    public void checkTestIntConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9, testIntConIsZero2(10));\n-    }\n-\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongConIsZero1(long x) {\n-        return 0L - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Run(test = \"testLongConIsZero1\")\n-    public void checkTestLongConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(10_000_000_001L, testLongConIsZero1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongConIsZero2(long x) {\n-        return ~(0L - x); \/\/ transformed to x + -1\n-    }\n-\n-    @Run(test = \"testLongConIsZero2\")\n-    public void checkTestLongConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9_999_999_999L, testLongConIsZero2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I, IRNode.ADD_I})\n-    public int testIntConIsNegOne1(int x) {\n-        return -1 - ~x; \/\/ transformed to x\n-    }\n-\n-    @Run(test = \"testIntConIsNegOne1\")\n-    public void checkTestIntConIsNegOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(10, testIntConIsNegOne1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I, IRNode.ADD_I})\n-    public int testIntConIsNegOne2(int x) {\n-        return ~(-1 - x); \/\/ transformed to x\n-    }\n-\n-    @Run(test = \"testIntConIsNegOne2\")\n-    public void checkTestIntConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(10, testIntConIsNegOne2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L, IRNode.ADD_L})\n-    public long testLongConIsNegOne1(long x) {\n-        return -1L - ~x; \/\/ transformed to x\n-    }\n-\n-    @Run(test = \"testLongConIsNegOne1\")\n-    public void checkTestLongConIsNegOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(10_000_000_000L, testLongConIsNegOne1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L, IRNode.ADD_L})\n-    public long testLongConIsNegOne2(long x) {\n-        return ~(-1L - x); \/\/ transformed to x\n-    }\n-\n-    @Run(test = \"testLongConIsNegOne2\")\n-    public void checkTestLongConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(10_000_000_000L, testLongConIsNegOne2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntConPlusOneIsOverflow1(int x) {\n-        return Integer.MAX_VALUE - ~x; \/\/ transformed to x + Integer.MIN_VALUE\n-    }\n-\n-    @Run(test = \"testIntConPlusOneIsOverflow1\")\n-    public void checkTestIntConPlusOneIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-2147483638, testIntConPlusOneIsOverflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntNegConMinusOneIsUnderflow2(int x) {\n-        return ~(Integer.MIN_VALUE - x); \/\/ transformed to x + Integer.MAX_VALUE\n-    }\n-\n-    @Run(test = \"testIntNegConMinusOneIsUnderflow2\")\n-    public void checkTestIntNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-2147483639, testIntNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongConPlusOneIsOverflow1(long x) {\n-        return Long.MAX_VALUE - ~x; \/\/ transformed to x + Long.MIN_VALUE\n-    }\n-\n-    @Run(test = \"testLongConPlusOneIsOverflow1\")\n-    public void checkTestLongConPlusOneIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-9_223_372_036_854_775_798L, testLongConPlusOneIsOverflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongNegConMinusOneIsUnderflow2(long x) {\n-        return ~(Long.MIN_VALUE - x); \/\/ transformed to x + Long.MAX_VALUE\n-    }\n-\n-    @Run(test = \"testLongNegConMinusOneIsUnderflow2\")\n-    public void checkTestLongNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-9_223_372_036_854_775_799L, testLongNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntResultIsUnderflow1(int x) {\n-        return -2147483640 - ~x; \/\/ transformed to x + -2147483639\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow1\")\n-    public void checkTestIntResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow1(-10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntResultIsUnderflow2(int x) {\n-        return ~(2147483638 - x); \/\/ transformed to x + -2147483639\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow2\")\n-    public void checkTestIntResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow2(-10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongResultIsUnderflow1(long x) {\n-        return -9_223_372_036_854_775_800L - ~x; \/\/ transformed to x + -9_223_372_036_854_775_799L\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow1\")\n-    public void checkTestLongResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow1(-10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongResultIsUnderflow2(long x) {\n-        return ~(9223372036854775798L - x); \/\/ transformed to x + -9223372036854775799L\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow2\")\n-    public void checkTestLongResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow2(-10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntResultIsOverflow1(int x) {\n-        return 2147483636 - ~x; \/\/ transformed to x + 2147483637\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow1\")\n-    public void checkTestIntResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow1(11));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.ADD_I, \"1\"})\n-    public int testIntResultIsOverflow2(int x) {\n-        return ~(-2147483637 - x); \/\/ transformed to x + 2147483636\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow2\")\n-    public void checkTestIntResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow2(12));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongResultIsOverflow1(long x) {\n-        return 9_223_372_036_854_775_796L - ~x; \/\/ transformed to x + 9_223_372_036_854_775_797L\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow1\")\n-    public void checkTestLongResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow1(11));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.ADD_L, \"1\"})\n-    public long testLongResultIsOverflow2(long x) {\n-        return ~(-9_223_372_036_854_775_797L - x); \/\/ transformed to x + 9_223_372_036_854_775_796L\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow2\")\n-    public void checkTestLongResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow2(12));\n-    }\n-\n-    private void assertC2Compiled(RunInfo info) {\n-        \/\/ Test VM allows C2 to work\n-        Asserts.assertTrue(info.isC2CompilationEnabled());\n-        if (!info.isWarmUp()) {\n-            \/\/ C2 compilation happens\n-            Asserts.assertTrue(info.isTestC2Compiled());\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRSubIdealCMinusNotX.java","additions":0,"deletions":530,"binary":false,"changes":530,"status":"deleted"},{"patch":"@@ -149,0 +149,1 @@\n+    public static final String XOR = START + \"Xor(I|L)\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.vm.compiler;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.CompilerControl;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * Tests transformation that converts \"c-(~x)\" into \"x+(c+1)\" in\n- * SubINode::Ideal\/SubLNode::Ideal and converts \"~(c-x)\" into\n- * \"x+(-c-1)\" in XorINode:Ideal\/XorLNode::Ideal.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Fork(value = 3)\n-public class SubIdealCMinusNotX {\n-\n-    private static final int I_C = 1234567;\n-\n-    private static final long L_C = 123_456_789_123_456L;\n-\n-    private int iFld = 4711;\n-\n-    private long lFld = 4711 * 4711 * 4711;\n-\n-    @Benchmark\n-    public void baselineInt(Blackhole bh) {\n-        bh.consume(iFld);\n-    }\n-\n-    @Benchmark\n-    public void baselineLong(Blackhole bh) {\n-        bh.consume(lFld);\n-    }\n-\n-    \/\/ Convert \"c-(~x)\" into \"x+(c+1)\" for int.\n-    \/\/ x+(c+1)-x is then converted into c+1.\n-    @Benchmark\n-    public void testInt1(Blackhole bh) {\n-        bh.consume(I_C - (~iFld) - iFld);\n-    }\n-\n-    \/\/ Convert \"~(c-x)\" into \"x+(-c-1)\" for int.\n-    \/\/ x+(-c-1)-x is then converted into -c-1.\n-    @Benchmark\n-    public void testInt2(Blackhole bh) {\n-        bh.consume(~(I_C - iFld) - iFld);\n-    }\n-\n-    \/\/ Convert \"c-(~x)\" into \"x+(c+1)\" for long.\n-    \/\/ x+(c+1)-x is then converted into c+1.\n-    @Benchmark\n-    public void testLong1(Blackhole bh) {\n-        bh.consume(L_C - (~lFld) - lFld);\n-    }\n-\n-    \/\/ Convert \"~(c-x)\" into \"x+(-c-1)\" for long.\n-    \/\/ x+(-c-1)-x is then converted into -c-1.\n-    @Benchmark\n-    public void testLong2(Blackhole bh) {\n-        bh.consume(~(L_C - lFld) - lFld);\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubIdealCMinusNotX.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"}]}