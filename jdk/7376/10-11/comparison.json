{"files":[{"patch":"@@ -1,367 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import jdk.test.lib.Asserts;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @bug 8279607\n- * @summary Test that transformation from ~x + c to (c - 1) - x and\n- *          from ~(x + c) to (-c - 1) - x works as intended.\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.irTests.TestIRAddIdealNotXPlusC\n- *\/\n-public class TestIRAddIdealNotXPlusC {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNormal1(int x) {\n-        return ~x + 1234; \/\/ transformed to 1233 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNormal1\")\n-    public void checkTestIntConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1223, testIntConIsNormal1(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal1(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNormal2(int x) {\n-        return ~(x + -1234); \/\/ transformed to 1233 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNormal2\")\n-    public void checkTestIntConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1223, testIntConIsNormal2(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal2(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNormal1(long x) {\n-        return ~x + 123_456_789_123L; \/\/ transformed to 123_456_789_122L - x\n-    }\n-\n-    @Run(test = \"testLongConIsNormal1\")\n-    public void checkTestLongConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal1(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal1(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNormal2(long x) {\n-        return ~(x + -123_456_789_123L); \/\/ transformed to 123_456_789_122L - x\n-    }\n-\n-    @Run(test = \"testLongConIsNormal2\")\n-    public void checkTestLongConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal2(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal2(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsZero1(int x) {\n-        return ~x + 0; \/\/ transformed to -1 - x\n-    }\n-\n-    @Run(test = \"testIntConIsZero1\")\n-    public void checkTestIntConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-11, testIntConIsZero1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.SUB_I})\n-    @IR(counts = {IRNode.XOR_I, \"1\"})\n-    public int testIntConIsZero2(int x) {\n-        return ~(x + 0); \/\/ should not happen, transformed to ~x\n-    }\n-\n-    @Run(test = \"testIntConIsZero2\")\n-    public void checkTestIntConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-11, testIntConIsZero2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsZero1(long x) {\n-        return ~x + 0L; \/\/ transformed to -1 - x\n-    }\n-\n-    @Run(test = \"testLongConIsZero1\")\n-    public void checkTestLongConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.SUB_L})\n-    @IR(counts = {IRNode.XOR_L, \"1\"})\n-    public long testLongConIsZero2(long x) {\n-        return ~(x + 0L); \/\/ should not happen, transformed to ~x\n-    }\n-\n-    @Run(test = \"testLongConIsZero2\")\n-    public void checkTestLongConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsOne1(int x) {\n-        return ~x + 1; \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testIntConIsOne1\")\n-    public void checkTestIntConIsOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10, testIntConIsOne1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNegOne2(int x) {\n-        return ~(x + -1); \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNegOne2\")\n-    public void checkTestIntConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10, testIntConIsNegOne2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsOne1(long x) {\n-        return ~x + 1L; \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testLongConIsOne1\")\n-    public void checkTestLongConIsOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_000L, testLongConIsOne1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNegOne2(long x) {\n-        return ~(x + -1L); \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testLongConIsNegOne2\")\n-    public void checkTestLongConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_000L, testLongConIsNegOne2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConMinusOneIsUnderflow1(int x) {\n-        return ~x + Integer.MIN_VALUE; \/\/ transformed to Integer.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testIntConMinusOneIsUnderflow1\")\n-    public void checkTestIntConMinusOneIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(2147483637, testIntConMinusOneIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntNegConMinusOneIsUnderflow2(int x) {\n-        return ~(x + Integer.MIN_VALUE); \/\/ transformed to Integer.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testIntNegConMinusOneIsUnderflow2\")\n-    public void checkTestIntNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(2147483637, testIntNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConMinusOneIsUnderflow1(long x) {\n-        return ~x + Long.MIN_VALUE; \/\/ transformed to Long.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testLongConMinusOneIsUnderflow1\")\n-    public void checkTestLongConMinusOneIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9223372036854775797L, testLongConMinusOneIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongNegConMinusOneIsUnderflow2(long x) {\n-        return ~(x + Long.MIN_VALUE); \/\/ transformed to Long.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testLongNegConMinusOneIsUnderflow2\")\n-    public void checkTestLongNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9223372036854775797L, testLongNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsUnderflow1(int x) {\n-        return ~x + -2147483638; \/\/ transformed to -2147483639 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow1\")\n-    public void checkTestIntResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsUnderflow2(int x) {\n-        return ~(x + 2147483638); \/\/ transformed to -2147483639 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow2\")\n-    public void checkTestIntResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsUnderflow1(long x) {\n-        return ~x + -9223372036854775798L; \/\/ transformed to -9223372036854775799L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow1\")\n-    public void checkTestLongResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsUnderflow2(long x) {\n-        return ~(x + 9223372036854775798L); \/\/ transformed to -9223372036854775799L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow2\")\n-    public void checkTestLongResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsOverflow1(int x) {\n-        return ~x + 2147483637; \/\/ transformed to 2147483646 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow1\")\n-    public void checkTestIntResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow1(-12));\n-    }\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsOverflow2(int x) {\n-        return ~(x + -2147483637); \/\/ transformed to 2147483646 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow2\")\n-    public void checkTestIntResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow2(-12));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsOverflow1(long x) {\n-        return ~x + 9223372036854775797L; \/\/ transformed to 9223372036854775798L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow1\")\n-    public void checkTestLongResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow1(-12));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsOverflow2(long x) {\n-        return ~(x + -9223372036854775797L); \/\/ transformed to 9223372036854775798L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow2\")\n-    public void checkTestLongResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow2(-12));\n-    }\n-\n-    private void assertC2Compiled(RunInfo info) {\n-        \/\/ Test VM allows C2 to work\n-        Asserts.assertTrue(info.isC2CompilationEnabled());\n-        if (!info.isWarmUp()) {\n-            \/\/ C2 compilation happens\n-            Asserts.assertTrue(info.isTestC2Compiled());\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealNotXPlusC.java","additions":0,"deletions":367,"binary":false,"changes":367,"status":"deleted"}]}