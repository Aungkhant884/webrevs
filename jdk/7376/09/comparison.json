{"files":[{"patch":"@@ -372,9 +372,0 @@\n-  \/\/ Convert (~x+c) into (c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so (~x+c)\n-  \/\/ will be (x^(-1))+c.\n-  if (op1 == Op_Xor(bt) &&\n-      (in2->Opcode() == Op_ConI || in2->Opcode() == Op_ConL) &&\n-      phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n-    Node* c_minus_one = phase->makecon(add_ring(phase->type(in(2)), TypeInteger::minus_1(bt)));\n-    return SubNode::make(c_minus_one, in1->in(1), bt);\n-  }\n@@ -875,0 +866,13 @@\n+\/\/---------------------------Helper -------------------------------------------\n+\/* Decide if the given node is used only in arithmetic expressions(add or sub).\n+ *\/\n+static bool is_used_in_only_arithmetic(Node* n, BasicType bt) {\n+  for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+    Node* u = n->fast_out(i);\n+    if (u->Opcode() != Op_Add(bt) && u->Opcode() != Op_Sub(bt)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -880,9 +884,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddI && phase->type(in2) == TypeInt::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConI) {\n-    jint c = phase->type(in1->in(2))->isa_int()->get_con();\n-    Node* neg_c_minus_one = phase->intcon(java_add(-c, -1));\n-    return new SubINode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an expression.\n+  if (phase->type(in2) == TypeInt::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_INT)\n+          \/\/ used only once and contains arithmetic\n+          || (outcnt() == 1 && (in1->Opcode() == Op_AddI || in1->Opcode() == Op_SubI))) {\n+        return new SubINode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n@@ -960,9 +969,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddL && phase->type(in2) == TypeLong::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConL) {\n-    jlong c = phase->type(in1->in(2))->isa_long()->get_con();\n-    Node* neg_c_minus_one = phase->longcon(java_add(-c, (jlong)-1));\n-    return new SubLNode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an arithmetic expression.\n+  if (phase->type(in2) == TypeLong::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_LONG)\n+          \/\/ used only once and contains arithmetic\n+          || (outcnt() == 1 && (in1->Opcode() == Op_AddL || in1->Opcode() == Op_SubL))) {\n+        return new SubLNode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -48,1 +48,6 @@\n-                 \"test23\"})\n+                 \"test23\", \"test24\", \"test25\",\n+                 \"test26\", \"test27\", \"test28\",\n+                 \"test29\", \"test30\", \"test31\",\n+                 \"test32\", \"test33\", \"test34\",\n+                 \"test35\", \"test36\", \"test37\",\n+                 \"test38\", \"test39\"})\n@@ -66,25 +71,41 @@\n-        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n-        Asserts.assertEQ(0                , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2        , test1(a));\n-        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2      , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (b - c), test8(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a), test9(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)      , test10(a, b));\n-        Asserts.assertEQ((0 - b) + a      , test11(a, b));\n-        Asserts.assertEQ((a - b) + b      , test12(a, b));\n-        Asserts.assertEQ(b + (a - b)      , test13(a, b));\n-        Asserts.assertEQ(a + 0            , test14(a));\n-        Asserts.assertEQ(0 + a            , test15(a));\n-        Asserts.assertEQ(a*b + a*c        , test16(a, b, c));\n-        Asserts.assertEQ(a*b + b*c        , test17(a, b, c));\n-        Asserts.assertEQ(a*c + b*c        , test18(a, b, c));\n-        Asserts.assertEQ(a*b + c*a        , test19(a, b, c));\n-        Asserts.assertEQ((a - b) + 210    , test20(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test21(a, b));\n-        Asserts.assertEQ((a - b) + 210    , test22(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test23(a, b));\n+        Asserts.assertEQ(((a+a) + (a+a))    , additions(a));\n+        Asserts.assertEQ(0                  , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2          , test1(a));\n+        Asserts.assertEQ((a + 2021) + b     , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)     , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2        , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)  , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)  , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)  , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (b - c)  , test8(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)  , test9(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)        , test10(a, b));\n+        Asserts.assertEQ((0 - b) + a        , test11(a, b));\n+        Asserts.assertEQ((a - b) + b        , test12(a, b));\n+        Asserts.assertEQ(b + (a - b)        , test13(a, b));\n+        Asserts.assertEQ(a + 0              , test14(a));\n+        Asserts.assertEQ(0 + a              , test15(a));\n+        Asserts.assertEQ(a*b + a*c          , test16(a, b, c));\n+        Asserts.assertEQ(a*b + b*c          , test17(a, b, c));\n+        Asserts.assertEQ(a*c + b*c          , test18(a, b, c));\n+        Asserts.assertEQ(a*b + c*a          , test19(a, b, c));\n+        Asserts.assertEQ((a - b) + 210      , test20(a, b));\n+        Asserts.assertEQ((a - b) + 190      , test21(a, b));\n+        Asserts.assertEQ((a - b) + 210      , test22(a, b));\n+        Asserts.assertEQ((a - b) + 190      , test23(a, b));\n+        Asserts.assertEQ(b - a              , test24(a, b));\n+        Asserts.assertEQ(a - b              , test25(a, b));\n+        Asserts.assertEQ(b - a              , test26(a, b));\n+        Asserts.assertEQ(a - b              , test27(a, b));\n+        Asserts.assertEQ(b - a              , test28(a, b));\n+        Asserts.assertEQ(a + 1              , test29(a));\n+        Asserts.assertEQ(a                  , test30(a));\n+        Asserts.assertEQ((b + a) + 1        , test31(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test32(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test33(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test34(a, b));\n+        Asserts.assertEQ(~a                 , test35(a));\n+        Asserts.assertEQ(~a                 , test36(a));\n+        Asserts.assertEQ(~a                 , test37(a));\n+        Asserts.assertEQ(~a                 , test38(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test39(a, b, c));\n@@ -296,0 +317,131 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public int test24(int x, int y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public int test25(int x, int y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public int test26(int x, int y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public int test27(int x, int y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test28(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test29(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test30(int x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public int test31(int x, int y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public int test32(int x, int y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public int test33(int x, int y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public int test34(int x, int y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public int test35(int x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public int test36(int x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public int test37(int x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public int test38(int x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public int test39(int x, int y, int z) {\n+        int u = ~x + y;\n+        int v = ~x | z;\n+        return u + v;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":178,"deletions":26,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -47,1 +47,6 @@\n-                 \"test20\",\"test21\", \"test22\"})\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\", \"test24\", \"test25\",\n+                 \"test26\", \"test27\", \"test28\",\n+                 \"test29\", \"test30\", \"test31\",\n+                 \"test32\", \"test33\", \"test34\",\n+                 \"test35\", \"test36\", \"test37\"})\n@@ -89,0 +94,15 @@\n+        Asserts.assertEQ(b - a                       , test23(a, b));\n+        Asserts.assertEQ(a - b                       , test24(a, b));\n+        Asserts.assertEQ(b - a                       , test25(a, b));\n+        Asserts.assertEQ(a - b                       , test26(a, b));\n+        Asserts.assertEQ(b - a                       , test27(a, b));\n+        Asserts.assertEQ(a + 1                       , test28(a));\n+        Asserts.assertEQ(a                           , test29(a));\n+        Asserts.assertEQ((-1 - a) - b                , test30(a, b));\n+        Asserts.assertEQ((b - a) + (-1)              , test31(a, b));\n+        Asserts.assertEQ((b - a) + (-1)              , test32(a, b));\n+        Asserts.assertEQ(~a                          , test33(a));\n+        Asserts.assertEQ(~a                          , test34(a));\n+        Asserts.assertEQ(~a                          , test35(a));\n+        Asserts.assertEQ(~a                          , test36(a));\n+        Asserts.assertEQ((~a + b) + (~a | c)         , test37(a, b, c));\n@@ -290,0 +310,123 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public long test23(long x, long y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public long test24(long x, long y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public long test25(long x, long y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public long test26(long x, long y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test27(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test28(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test29(long x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public long test30(long x, long y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public long test31(long x, long y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public long test32(long x, long y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public long test33(long x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public long test34(long x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public long test35(long x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public long test36(long x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public long test37(long x, long y, long z) {\n+        long u = ~x + y;\n+        long v = ~x | z;\n+        return u + v;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":144,"deletions":1,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+    public static final String XOR = START + \"Xor(I|L)\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts `~x` into `-1-x` when `~x` is\n+ * used in an arithmetic expression.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class NotOpTransformation {\n+\n+    private static final int I_C = 1234567;\n+\n+    private static final long L_C = 123_456_789_123_456L;\n+\n+    private int iFld = 4711;\n+\n+    private long lFld = 4711 * 4711 * 4711;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        bh.consume(iFld);\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        bh.consume(lFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testInt1(Blackhole bh) {\n+        bh.consume(I_C - (~iFld) - iFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testInt2(Blackhole bh) {\n+        bh.consume(~(I_C - iFld) - iFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testLong1(Blackhole bh) {\n+        bh.consume(L_C - (~lFld) - lFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testLong2(Blackhole bh) {\n+        bh.consume(~(L_C - lFld) - lFld);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/NotOpTransformation.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}