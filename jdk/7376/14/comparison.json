{"files":[{"patch":"@@ -367,9 +367,0 @@\n-  \/\/ Convert (~x+c) into (c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so (~x+c)\n-  \/\/ will be (x^(-1))+c.\n-  if (op1 == Op_Xor(bt) &&\n-      (in2->Opcode() == Op_ConI || in2->Opcode() == Op_ConL) &&\n-      phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n-    Node* c_minus_one = phase->makecon(add_ring(phase->type(in(2)), TypeInteger::minus_1(bt)));\n-    return SubNode::make(c_minus_one, in1->in(1), bt);\n-  }\n@@ -865,0 +856,13 @@\n+\/\/---------------------------Helper -------------------------------------------\n+\/* Decide if the given node is used only in arithmetic expressions(add or sub).\n+ *\/\n+static bool is_used_in_only_arithmetic(Node* n, BasicType bt) {\n+  for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+    Node* u = n->fast_out(i);\n+    if (u->Opcode() != Op_Add(bt) && u->Opcode() != Op_Sub(bt)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -870,9 +874,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddI && phase->type(in2) == TypeInt::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConI) {\n-    jint c = phase->type(in1->in(2))->isa_int()->get_con();\n-    Node* neg_c_minus_one = phase->intcon(java_add(-c, -1));\n-    return new SubINode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an expression.\n+  if (phase->type(in2) == TypeInt::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_INT)\n+          \/\/ LHS is arithmetic\n+          || (in1->Opcode() == Op_AddI || in1->Opcode() == Op_SubI)) {\n+        return new SubINode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n@@ -950,9 +959,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddL && phase->type(in2) == TypeLong::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConL) {\n-    jlong c = phase->type(in1->in(2))->isa_long()->get_con();\n-    Node* neg_c_minus_one = phase->longcon(java_add(-c, (jlong)-1));\n-    return new SubLNode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an arithmetic expression.\n+  if (phase->type(in2) == TypeLong::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_LONG)\n+          \/\/ LHS is arithmetic\n+          || (in1->Opcode() == Op_AddL || in1->Opcode() == Op_SubL)) {\n+        return new SubLNode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                 \"test20\",\"test21\", \"test22\"})\n+                 \"test20\", \"test21\", \"test22\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,367 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import jdk.test.lib.Asserts;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @bug 8279607\n- * @summary Test that transformation from ~x + c to (c - 1) - x and\n- *          from ~(x + c) to (-c - 1) - x works as intended.\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.irTests.TestIRAddIdealNotXPlusC\n- *\/\n-public class TestIRAddIdealNotXPlusC {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNormal1(int x) {\n-        return ~x + 1234; \/\/ transformed to 1233 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNormal1\")\n-    public void checkTestIntConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1223, testIntConIsNormal1(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal1(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNormal2(int x) {\n-        return ~(x + -1234); \/\/ transformed to 1233 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNormal2\")\n-    public void checkTestIntConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1223, testIntConIsNormal2(10));\n-        Asserts.assertEquals(1233, testIntConIsNormal2(0));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNormal1(long x) {\n-        return ~x + 123_456_789_123L; \/\/ transformed to 123_456_789_122L - x\n-    }\n-\n-    @Run(test = \"testLongConIsNormal1\")\n-    public void checkTestLongConIsNormal1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal1(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal1(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNormal2(long x) {\n-        return ~(x + -123_456_789_123L); \/\/ transformed to 123_456_789_122L - x\n-    }\n-\n-    @Run(test = \"testLongConIsNormal2\")\n-    public void checkTestLongConIsNormal2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(113_456_789_122L, testLongConIsNormal2(10_000_000_000L));\n-        Asserts.assertEquals(123_456_789_122L, testLongConIsNormal2(0L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsZero1(int x) {\n-        return ~x + 0; \/\/ transformed to -1 - x\n-    }\n-\n-    @Run(test = \"testIntConIsZero1\")\n-    public void checkTestIntConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-11, testIntConIsZero1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.SUB_I})\n-    @IR(counts = {IRNode.XOR_I, \"1\"})\n-    public int testIntConIsZero2(int x) {\n-        return ~(x + 0); \/\/ should not happen, transformed to ~x\n-    }\n-\n-    @Run(test = \"testIntConIsZero2\")\n-    public void checkTestIntConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-11, testIntConIsZero2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsZero1(long x) {\n-        return ~x + 0L; \/\/ transformed to -1 - x\n-    }\n-\n-    @Run(test = \"testLongConIsZero1\")\n-    public void checkTestLongConIsZero1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.SUB_L})\n-    @IR(counts = {IRNode.XOR_L, \"1\"})\n-    public long testLongConIsZero2(long x) {\n-        return ~(x + 0L); \/\/ should not happen, transformed to ~x\n-    }\n-\n-    @Run(test = \"testLongConIsZero2\")\n-    public void checkTestLongConIsZero2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_001L, testLongConIsZero2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsOne1(int x) {\n-        return ~x + 1; \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testIntConIsOne1\")\n-    public void checkTestIntConIsOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10, testIntConIsOne1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConIsNegOne2(int x) {\n-        return ~(x + -1); \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testIntConIsNegOne2\")\n-    public void checkTestIntConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10, testIntConIsNegOne2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsOne1(long x) {\n-        return ~x + 1L; \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testLongConIsOne1\")\n-    public void checkTestLongConIsOne1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_000L, testLongConIsOne1(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConIsNegOne2(long x) {\n-        return ~(x + -1L); \/\/ transformed to 0 - x\n-    }\n-\n-    @Run(test = \"testLongConIsNegOne2\")\n-    public void checkTestLongConIsNegOne2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(-10_000_000_000L, testLongConIsNegOne2(10_000_000_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntConMinusOneIsUnderflow1(int x) {\n-        return ~x + Integer.MIN_VALUE; \/\/ transformed to Integer.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testIntConMinusOneIsUnderflow1\")\n-    public void checkTestIntConMinusOneIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(2147483637, testIntConMinusOneIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntNegConMinusOneIsUnderflow2(int x) {\n-        return ~(x + Integer.MIN_VALUE); \/\/ transformed to Integer.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testIntNegConMinusOneIsUnderflow2\")\n-    public void checkTestIntNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(2147483637, testIntNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongConMinusOneIsUnderflow1(long x) {\n-        return ~x + Long.MIN_VALUE; \/\/ transformed to Long.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testLongConMinusOneIsUnderflow1\")\n-    public void checkTestLongConMinusOneIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9223372036854775797L, testLongConMinusOneIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongNegConMinusOneIsUnderflow2(long x) {\n-        return ~(x + Long.MIN_VALUE); \/\/ transformed to Long.MAX_VALUE - x\n-    }\n-\n-    @Run(test = \"testLongNegConMinusOneIsUnderflow2\")\n-    public void checkTestLongNegConMinusOneIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(9223372036854775797L, testLongNegConMinusOneIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsUnderflow1(int x) {\n-        return ~x + -2147483638; \/\/ transformed to -2147483639 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow1\")\n-    public void checkTestIntResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsUnderflow2(int x) {\n-        return ~(x + 2147483638); \/\/ transformed to -2147483639 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsUnderflow2\")\n-    public void checkTestIntResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MAX_VALUE, testIntResultIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsUnderflow1(long x) {\n-        return ~x + -9223372036854775798L; \/\/ transformed to -9223372036854775799L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow1\")\n-    public void checkTestLongResultIsUnderflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow1(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsUnderflow2(long x) {\n-        return ~(x + 9223372036854775798L); \/\/ transformed to -9223372036854775799L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsUnderflow2\")\n-    public void checkTestLongResultIsUnderflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MAX_VALUE, testLongResultIsUnderflow2(10));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsOverflow1(int x) {\n-        return ~x + 2147483637; \/\/ transformed to 2147483646 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow1\")\n-    public void checkTestIntResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow1(-12));\n-    }\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntResultIsOverflow2(int x) {\n-        return ~(x + -2147483637); \/\/ transformed to 2147483646 - x\n-    }\n-\n-    @Run(test = \"testIntResultIsOverflow2\")\n-    public void checkTestIntResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Integer.MIN_VALUE, testIntResultIsOverflow2(-12));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsOverflow1(long x) {\n-        return ~x + 9223372036854775797L; \/\/ transformed to 9223372036854775798L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow1\")\n-    public void checkTestLongResultIsOverflow1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow1(-12));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongResultIsOverflow2(long x) {\n-        return ~(x + -9223372036854775797L); \/\/ transformed to 9223372036854775798L - x\n-    }\n-\n-    @Run(test = \"testLongResultIsOverflow2\")\n-    public void checkTestLongResultIsOverflow2(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(Long.MIN_VALUE, testLongResultIsOverflow2(-12));\n-    }\n-\n-    private void assertC2Compiled(RunInfo info) {\n-        \/\/ Test VM allows C2 to work\n-        Asserts.assertTrue(info.isC2CompilationEnabled());\n-        if (!info.isWarmUp()) {\n-            \/\/ C2 compilation happens\n-            Asserts.assertTrue(info.isTestC2Compiled());\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealNotXPlusC.java","additions":0,"deletions":367,"binary":false,"changes":367,"status":"deleted"},{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281453\n+ * @summary Convert ~x into -1-x when ~x is used in an arithmetic expression\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.XorINodeIdealizationTests\n+ *\/\n+public class XorINodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\", \"test15\",\n+                 \"test16\", \"test17\"})\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int b = RunInfo.getRandom().nextInt();\n+        int c = RunInfo.getRandom().nextInt();\n+        int d = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, int c, int d) {\n+        Asserts.assertEQ(b - a              , test1(a, b));\n+        Asserts.assertEQ(a - b              , test2(a, b));\n+        Asserts.assertEQ(b - a              , test3(a, b));\n+        Asserts.assertEQ(a - b              , test4(a, b));\n+        Asserts.assertEQ(b - a              , test5(a, b));\n+        Asserts.assertEQ(a + 1              , test6(a));\n+        Asserts.assertEQ(a                  , test7(a));\n+        Asserts.assertEQ((b + a) + 1        , test8(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test9(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test10(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test11(a, b));\n+        Asserts.assertEQ(~a                 , test12(a));\n+        Asserts.assertEQ(~a                 , test13(a));\n+        Asserts.assertEQ(~a                 , test14(a));\n+        Asserts.assertEQ(~a                 , test15(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test16(a, b, c));\n+        Asserts.assertEQ(-2023 - a          , test17(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public int test1(int x, int y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public int test2(int x, int y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public int test3(int x, int y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public int test4(int x, int y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test5(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test6(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test7(int x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public int test8(int x, int y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public int test9(int x, int y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public int test10(int x, int y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public int test11(int x, int y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public int test12(int x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public int test13(int x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public int test14(int x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public int test15(int x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public int test16(int x, int y, int z) {\n+        int u = ~x + y;\n+        int v = ~x | z;\n+        return u + v;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~(x + c) => (-c-1) - x\n+    public int test17(int x) {\n+        return ~(x + 2022);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"},{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281453\n+ * @summary Convert ~x into -1-x when ~x is used in an arithmetic expression\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.XorLNodeIdealizationTests\n+ *\/\n+public class XorLNodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\", \"test15\",\n+                 \"test16\", \"test17\"})\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+        long c = RunInfo.getRandom().nextLong();\n+        long d = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, long c, long d) {\n+        Asserts.assertEQ(b - a              , test1(a, b));\n+        Asserts.assertEQ(a - b              , test2(a, b));\n+        Asserts.assertEQ(b - a              , test3(a, b));\n+        Asserts.assertEQ(a - b              , test4(a, b));\n+        Asserts.assertEQ(b - a              , test5(a, b));\n+        Asserts.assertEQ(a + 1              , test6(a));\n+        Asserts.assertEQ(a                  , test7(a));\n+        Asserts.assertEQ((b + a) + 1        , test8(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test9(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test10(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test11(a, b));\n+        Asserts.assertEQ(~a                 , test12(a));\n+        Asserts.assertEQ(~a                 , test13(a));\n+        Asserts.assertEQ(~a                 , test14(a));\n+        Asserts.assertEQ(~a                 , test15(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test16(a, b, c));\n+        Asserts.assertEQ(-2023 - a          , test17(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public long test1(long x, long y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public long test2(long x, long y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public long test3(long x, long y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public long test4(long x, long y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test5(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test6(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test7(long x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public long test8(long x, long y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public long test9(long x, long y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public long test10(long x, long y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public long test11(long x, long y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public long test12(long x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public long test13(long x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public long test14(long x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public long test15(long x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public long test16(long x, long y, long z) {\n+        long u = ~x + y;\n+        long v = ~x | z;\n+        return u + v;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~(x + c) => (-c-1) - x\n+    public long test17(long x) {\n+        return ~(x + 2022);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"},{"patch":"@@ -154,0 +154,1 @@\n+    public static final String XOR = START + \"Xor(I|L)\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts `~x` into `-1-x` when `~x` is\n+ * used in an arithmetic expression.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class NotOpTransformation {\n+\n+    private static final int I_C = 1234567;\n+\n+    private static final long L_C = 123_456_789_123_456L;\n+\n+    private int iFld = 4711;\n+\n+    private long lFld = 4711 * 4711 * 4711;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        bh.consume(iFld);\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        bh.consume(lFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testInt1(Blackhole bh) {\n+        bh.consume(I_C - (~iFld) - iFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testInt2(Blackhole bh) {\n+        bh.consume(~(I_C - iFld) - iFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testLong1(Blackhole bh) {\n+        bh.consume(L_C - (~lFld) - lFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testLong2(Blackhole bh) {\n+        bh.consume(~(L_C - lFld) - lFld);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/NotOpTransformation.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}