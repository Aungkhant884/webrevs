{"files":[{"patch":"@@ -370,8 +370,3 @@\n-  \/\/ Convert (~x+c) into (c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so (~x+c)\n-  \/\/ will be (x^(-1))+c.\n-  if (op1 == Op_Xor(bt) &&\n-      (in2->Opcode() == Op_ConI || in2->Opcode() == Op_ConL) &&\n-      phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n-    Node* c_minus_one = phase->makecon(add_ring(phase->type(in(2)), TypeInteger::minus_1(bt)));\n-    return SubNode::make(c_minus_one, in1->in(1), bt);\n+  \/\/ Convert (con - x) + y into \"(y - x) + con\"\n+  if (op1 == Op_Sub(bt) && in1->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in2, in1->in(2), bt)), in1->in(1), bt);\n@@ -379,0 +374,16 @@\n+\n+  \/\/ Convert y + (con - x) into \"(y - x) + con\"\n+  if (op2 == Op_Sub(bt) && in2->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in1, in2->in(2), bt)), in2->in(1), bt);\n+  }\n+\n+  \/\/ Convert ~x + rhs, which is (x ^ (-1)) + rhs, into (-1 - x) + rhs.\n+  if (op1 == Op_Xor(bt) && phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(phase->integercon(-1, bt), in1->in(1), bt)), in2, bt);\n+  }\n+\n+  \/\/ Convert lhs + ~x, which is lhs + (x ^ (-1)), into lhs + (-1 - x).\n+  if (op2 == Op_Xor(bt) && phase->type(in2->in(2)) == TypeInteger::minus_1(bt)) {\n+    return AddNode::make(in1, phase->transform(SubNode::make(phase->integercon(-1, bt), in2->in(1), bt)), bt);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1851,0 +1851,8 @@\n+inline int Op_ConIL(BasicType bt) {\n+  assert(bt == T_INT || bt == T_LONG, \"only for int or longs\");\n+  if (bt == T_INT) {\n+    return Op_ConI;\n+  }\n+  return Op_ConL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -325,8 +325,8 @@\n-  \/\/ Convert \"c - (~x)\" into \"x + (c + 1)\". Note there isn't a bitwise\n-  \/\/ not bytecode, \"~x\" would typically represented as \"x^(-1)\", so\n-  \/\/ c-(~x) will eventually be c-x^(-1).\n-  if (in(2)->Opcode() == Op_XorI\n-      && phase->type(in(2)->in(2)) == TypeInt::MINUS_1\n-      && in(1)->Opcode() == Op_ConI) {\n-    jint c = phase->type(in(1))->isa_int()->get_con();\n-    return new AddINode(in(2)->in(1), phase->intcon(java_add(c, 1)));\n+  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n+  if (op1 == Op_XorI && phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(phase->transform(new SubINode(phase->intcon(-1), in1->in(1))), in2);\n+  }\n+\n+  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n+  if (op2 == Op_XorI && phase->type(in2->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(in1, phase->transform(new SubINode(phase->intcon(-1), in2->in(1))));\n@@ -508,8 +508,8 @@\n-  \/\/ Convert \"c - (~x)\" into \"x + (c + 1)\". Note there isn't a bitwise\n-  \/\/ not bytecode, \"~x\" would typically represented as \"x^(-1)\", so\n-  \/\/ c-(~x) will eventually be c-x^(-1).\n-  if (in(2)->Opcode() == Op_XorL\n-      && phase->type(in(2)->in(2)) == TypeLong::MINUS_1\n-      && in(1)->Opcode() == Op_ConL) {\n-    jlong c = phase->type(in(1))->isa_long()->get_con();\n-    return new AddLNode(in(2)->in(1), phase->longcon(java_add(c, (jlong)1)));\n+  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n+  if (op1 == Op_XorL && phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(phase->transform(new SubLNode(phase->longcon(-1), in1->in(1))), in2);\n+  }\n+\n+  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n+  if (op2 == Op_XorL && phase->type(in2->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(in1, phase->transform(new SubLNode(phase->longcon(-1), in2->in(1))));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n- * @summary Test that transformation from c - (~x) to x + (c + 1) and\n- *          from ~(c - x) to x + (-c - 1) works as intended.\n+ * @summary Test that transformation from ~x to -1-x in different situations works as intended.\n@@ -43,0 +42,167 @@\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testInt_NotYPlusX_PlusOne(int x, int y) {\n+        return (~y + x) + 1; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testInt_NotYPlusX_PlusOne\")\n+    public void checkTestInt_NotYPlusX_PlusOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testInt_NotYPlusX_PlusOne(10, 9));\n+        Asserts.assertEquals(0, testInt_NotYPlusX_PlusOne(100, 100));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLong_NotYPlusX_PlusOne(long x, long y) {\n+        return (~y + x) + 1; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testLong_NotYPlusX_PlusOne\")\n+    public void checkTestLong_NotYPlusX_PlusOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1L, testLong_NotYPlusX_PlusOne(123_456_789_123L, 123_456_789_122L));\n+        Asserts.assertEquals(0L, testLong_NotYPlusX_PlusOne(123_456_789_123L, 123_456_789_123L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testInt_XPlusNotY_PlusOne(int x, int y) {\n+        return (x + ~y) + 1; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testInt_XPlusNotY_PlusOne\")\n+    public void checkTestInt_XPlusNotY_PlusOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testInt_XPlusNotY_PlusOne(10, 9));\n+        Asserts.assertEquals(0, testInt_XPlusNotY_PlusOne(100, 100));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLong_XPlusNotY_PlusOne(long x, long y) {\n+        return (x + ~y) + 1; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testLong_XPlusNotY_PlusOne\")\n+    public void checkTestLong_XPlusNotY_PlusOne(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1L, testLong_XPlusNotY_PlusOne(123_456_789_123L, 123_456_789_122L));\n+        Asserts.assertEquals(0L, testLong_XPlusNotY_PlusOne(123_456_789_123L, 123_456_789_123L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntNotYPlus_XPlusOne_(int x, int y) {\n+        return ~y + (x + 1); \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testIntNotYPlus_XPlusOne_\")\n+    public void checkTestIntNotYPlus_XPlusOne_(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testIntNotYPlus_XPlusOne_(10, 9));\n+        Asserts.assertEquals(0, testIntNotYPlus_XPlusOne_(100, 100));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongNotYPlus_XPlusOne_(long x, long y) {\n+        return ~y + (x + 1); \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testLongNotYPlus_XPlusOne_\")\n+    public void checkTestLongNotYPlus_XPlusOne_(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1L, testLongNotYPlus_XPlusOne_(123_456_789_123L, 123_456_789_122L));\n+        Asserts.assertEquals(0L, testLongNotYPlus_XPlusOne_(123_456_789_123L, 123_456_789_123L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testInt_XPlusOne_PlusNotY(int x, int y) {\n+        return (x + 1) + ~y; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testInt_XPlusOne_PlusNotY\")\n+    public void checkTestInt_XPlusOne_PlusNotY(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testInt_XPlusOne_PlusNotY(10, 9));\n+        Asserts.assertEquals(0, testInt_XPlusOne_PlusNotY(100, 100));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLong_XPlusOne_PlusNotY(long x, long y) {\n+        return (x + 1) + ~y; \/\/ transformed to x - y;\n+    }\n+\n+    @Run(test = \"testLong_XPlusOne_PlusNotY\")\n+    public void checkTestLong_XPlusOne_PlusNotY(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1L, testLong_XPlusOne_PlusNotY(123_456_789_123L, 123_456_789_122L));\n+        Asserts.assertEquals(0L, testLong_XPlusOne_PlusNotY(123_456_789_123L, 123_456_789_123L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntNotXPlusC(int x) {\n+        return ~x + 1234; \/\/ transformed to 1233 - x\n+    }\n+\n+    @Run(test = \"testIntNotXPlusC\")\n+    public void checkTestIntNotXPlusC(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1223, testIntNotXPlusC(10));\n+        Asserts.assertEquals(1233, testIntNotXPlusC(0));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongNotXPlusC(long x) {\n+        return ~x + 123_456_789_123L; \/\/ transformed to 123_456_789_122L - x\n+    }\n+\n+    @Run(test = \"testLongNotXPlusC\")\n+    public void checkTestLongNotXPlusC(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(113_456_789_122L, testLongNotXPlusC(10_000_000_000L));\n+        Asserts.assertEquals(123_456_789_122L, testLongNotXPlusC(0L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntNotXMinusNotY(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Run(test = \"testIntNotXMinusNotY\")\n+    public void checkTestIntNotXMinusNotY(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-1, testIntNotXMinusNotY(10, 9));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongNotXMinusNotY(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+\n+    @Run(test = \"testLongNotXMinusNotY\")\n+    public void checkTestLongNotXMinusNotY(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(-100_000_000_000L, testLongNotXMinusNotY(123_456_789_122L, 23_456_789_122L));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRSubIdealCMinusNotX.java","additions":168,"deletions":2,"binary":false,"changes":170,"status":"modified"}]}