{"files":[{"patch":"@@ -48,6 +48,1 @@\n-                 \"test23\", \"test24\", \"test25\",\n-                 \"test26\", \"test27\", \"test28\",\n-                 \"test29\", \"test30\", \"test31\",\n-                 \"test32\", \"test33\", \"test34\",\n-                 \"test35\", \"test36\", \"test37\",\n-                 \"test38\", \"test39\"})\n+                 \"test23\"})\n@@ -71,41 +66,25 @@\n-        Asserts.assertEQ(((a+a) + (a+a))    , additions(a));\n-        Asserts.assertEQ(0                  , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2          , test1(a));\n-        Asserts.assertEQ((a + 2021) + b     , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)     , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2        , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d)  , test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c)  , test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b)  , test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (b - c)  , test8(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a)  , test9(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)        , test10(a, b));\n-        Asserts.assertEQ((0 - b) + a        , test11(a, b));\n-        Asserts.assertEQ((a - b) + b        , test12(a, b));\n-        Asserts.assertEQ(b + (a - b)        , test13(a, b));\n-        Asserts.assertEQ(a + 0              , test14(a));\n-        Asserts.assertEQ(0 + a              , test15(a));\n-        Asserts.assertEQ(a*b + a*c          , test16(a, b, c));\n-        Asserts.assertEQ(a*b + b*c          , test17(a, b, c));\n-        Asserts.assertEQ(a*c + b*c          , test18(a, b, c));\n-        Asserts.assertEQ(a*b + c*a          , test19(a, b, c));\n-        Asserts.assertEQ((a - b) + 210      , test20(a, b));\n-        Asserts.assertEQ((a - b) + 190      , test21(a, b));\n-        Asserts.assertEQ((a - b) + 210      , test22(a, b));\n-        Asserts.assertEQ((a - b) + 190      , test23(a, b));\n-        Asserts.assertEQ(b - a              , test24(a, b));\n-        Asserts.assertEQ(a - b              , test25(a, b));\n-        Asserts.assertEQ(b - a              , test26(a, b));\n-        Asserts.assertEQ(a - b              , test27(a, b));\n-        Asserts.assertEQ(b - a              , test28(a, b));\n-        Asserts.assertEQ(a + 1              , test29(a));\n-        Asserts.assertEQ(a                  , test30(a));\n-        Asserts.assertEQ((b + a) + 1        , test31(a, b));\n-        Asserts.assertEQ((-1 - a) - b       , test32(a, b));\n-        Asserts.assertEQ((b - a) + (-1)     , test33(a, b));\n-        Asserts.assertEQ((b - a) + (-1)     , test34(a, b));\n-        Asserts.assertEQ(~a                 , test35(a));\n-        Asserts.assertEQ(~a                 , test36(a));\n-        Asserts.assertEQ(~a                 , test37(a));\n-        Asserts.assertEQ(~a                 , test38(a));\n-        Asserts.assertEQ((~a + b) + (~a | c), test39(a, b, c));\n+        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n+        Asserts.assertEQ(0                , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2        , test1(a));\n+        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2      , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (b - c), test8(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a), test9(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)      , test10(a, b));\n+        Asserts.assertEQ((0 - b) + a      , test11(a, b));\n+        Asserts.assertEQ((a - b) + b      , test12(a, b));\n+        Asserts.assertEQ(b + (a - b)      , test13(a, b));\n+        Asserts.assertEQ(a + 0            , test14(a));\n+        Asserts.assertEQ(0 + a            , test15(a));\n+        Asserts.assertEQ(a*b + a*c        , test16(a, b, c));\n+        Asserts.assertEQ(a*b + b*c        , test17(a, b, c));\n+        Asserts.assertEQ(a*c + b*c        , test18(a, b, c));\n+        Asserts.assertEQ(a*b + c*a        , test19(a, b, c));\n+        Asserts.assertEQ((a - b) + 210    , test20(a, b));\n+        Asserts.assertEQ((a - b) + 190    , test21(a, b));\n+        Asserts.assertEQ((a - b) + 210    , test22(a, b));\n+        Asserts.assertEQ((a - b) + 190    , test23(a, b));\n@@ -317,131 +296,0 @@\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (~x + y) + 1 => y - x\n-    public int test24(int x, int y) {\n-        return (~x + y) + 1;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (x + ~y) + 1 => x - y\n-    public int test25(int x, int y) {\n-        return (x + ~y) + 1;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x + (y + 1) => y - x\n-    public int test26(int x, int y) {\n-        return ~x + (y + 1);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (x + 1) + ~y => x - y\n-    public int test27(int x, int y) {\n-        return (x + 1) + ~y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x - ~y => y - x\n-    public int test28(int x, int y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks 0 - ~x => x + 1\n-    public int test29(int x) {\n-        return 0 - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n-    \/\/ Checks -1 - ~x => x\n-    public int test30(int x) {\n-        return -1 - ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"2\"})\n-    \/\/ Checks y - ~x => (y + x) + 1\n-    public int test31(int x, int y) {\n-        return y - ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"2\"})\n-    \/\/ Checks ~x - y => (-1 - x) -y\n-    public int test32(int x, int y) {\n-        return ~x - y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\",\n-                  IRNode.ADD, \"1\"})\n-    \/\/ Checks ~x + y => (y - x) + (-1)\n-    public int test33(int x, int y) {\n-        return ~x + y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\",\n-                  IRNode.ADD, \"1\"})\n-    \/\/ Checks y + ~x => (y - x) + (-1)\n-    public int test34(int x, int y) {\n-        return y + ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n-    public int test35(int x) {\n-        return ~(x + 0);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n-    public int test36(int x) {\n-        return ~(x - 0);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n-    public int test37(int x) {\n-        return ~x + 0;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n-    public int test38(int x) {\n-        return ~x - 0;\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n-    \/\/ because ~x has one non-arithmetic user.\n-    public int test39(int x, int y, int z) {\n-        int u = ~x + y;\n-        int v = ~x | z;\n-        return u + v;\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":26,"deletions":178,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -47,6 +47,1 @@\n-                 \"test20\", \"test21\", \"test22\",\n-                 \"test23\", \"test24\", \"test25\",\n-                 \"test26\", \"test27\", \"test28\",\n-                 \"test29\", \"test30\", \"test31\",\n-                 \"test32\", \"test33\", \"test34\",\n-                 \"test35\", \"test36\", \"test37\"})\n+                 \"test20\", \"test21\", \"test22\"})\n@@ -94,15 +89,0 @@\n-        Asserts.assertEQ(b - a                       , test23(a, b));\n-        Asserts.assertEQ(a - b                       , test24(a, b));\n-        Asserts.assertEQ(b - a                       , test25(a, b));\n-        Asserts.assertEQ(a - b                       , test26(a, b));\n-        Asserts.assertEQ(b - a                       , test27(a, b));\n-        Asserts.assertEQ(a + 1                       , test28(a));\n-        Asserts.assertEQ(a                           , test29(a));\n-        Asserts.assertEQ((-1 - a) - b                , test30(a, b));\n-        Asserts.assertEQ((b - a) + (-1)              , test31(a, b));\n-        Asserts.assertEQ((b - a) + (-1)              , test32(a, b));\n-        Asserts.assertEQ(~a                          , test33(a));\n-        Asserts.assertEQ(~a                          , test34(a));\n-        Asserts.assertEQ(~a                          , test35(a));\n-        Asserts.assertEQ(~a                          , test36(a));\n-        Asserts.assertEQ((~a + b) + (~a | c)         , test37(a, b, c));\n@@ -310,123 +290,0 @@\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (~x + y) + 1 => y - x\n-    public long test23(long x, long y) {\n-        return (~x + y) + 1;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (x + ~y) + 1 => x - y\n-    public long test24(long x, long y) {\n-        return (x + ~y) + 1;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x + (y + 1) => y - x\n-    public long test25(long x, long y) {\n-        return ~x + (y + 1);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (x + 1) + ~y => x - y\n-    public long test26(long x, long y) {\n-        return (x + 1) + ~y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x - ~y => y - x\n-    public long test27(long x, long y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks 0 - ~x => x + 1\n-    public long test28(long x) {\n-        return 0 - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n-    \/\/ Checks -1 - ~x => x\n-    public long test29(long x) {\n-        return -1 - ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"2\"})\n-    \/\/ Checks ~x - y => (-1 - x) -y\n-    public long test30(long x, long y) {\n-        return ~x - y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\",\n-                  IRNode.ADD, \"1\"})\n-    \/\/ Checks ~x + y => (y - x) + (-1)\n-    public long test31(long x, long y) {\n-        return ~x + y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\",\n-                  IRNode.ADD, \"1\"})\n-    \/\/ Checks y + ~x => (y - x) + (-1)\n-    public long test32(long x, long y) {\n-        return y + ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n-    public long test33(long x) {\n-        return ~(x + 0);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n-    public long test34(long x) {\n-        return ~(x - 0);\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n-    public long test35(long x) {\n-        return ~x + 0;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n-    public long test36(long x) {\n-        return ~x - 0;\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.XOR, \"1\"})\n-    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n-    \/\/ because ~x has one non-arithmetic user.\n-    public long test37(long x, long y, long z) {\n-        long u = ~x + y;\n-        long v = ~x | z;\n-        return u + v;\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":1,"deletions":144,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281453\n+ * @summary Convert ~x into -1-x when ~x is used in an arithmetic expression\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.XorINodeIdealizationTests\n+ *\/\n+public class XorINodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\", \"test15\",\n+                 \"test16\"})\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int b = RunInfo.getRandom().nextInt();\n+        int c = RunInfo.getRandom().nextInt();\n+        int d = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, int c, int d) {\n+        Asserts.assertEQ(b - a              , test1(a, b));\n+        Asserts.assertEQ(a - b              , test2(a, b));\n+        Asserts.assertEQ(b - a              , test3(a, b));\n+        Asserts.assertEQ(a - b              , test4(a, b));\n+        Asserts.assertEQ(b - a              , test5(a, b));\n+        Asserts.assertEQ(a + 1              , test6(a));\n+        Asserts.assertEQ(a                  , test7(a));\n+        Asserts.assertEQ((b + a) + 1        , test8(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test9(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test10(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test11(a, b));\n+        Asserts.assertEQ(~a                 , test12(a));\n+        Asserts.assertEQ(~a                 , test13(a));\n+        Asserts.assertEQ(~a                 , test14(a));\n+        Asserts.assertEQ(~a                 , test15(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test16(a, b, c));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public int test1(int x, int y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public int test2(int x, int y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public int test3(int x, int y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public int test4(int x, int y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test5(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test6(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test7(int x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public int test8(int x, int y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public int test9(int x, int y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public int test10(int x, int y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public int test11(int x, int y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public int test12(int x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public int test13(int x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public int test14(int x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public int test15(int x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public int test16(int x, int y, int z) {\n+        int u = ~x + y;\n+        int v = ~x | z;\n+        return u + v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281453\n+ * @summary Convert ~x into -1-x when ~x is used in an arithmetic expression\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.XorLNodeIdealizationTests\n+ *\/\n+public class XorLNodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\", \"test15\",\n+                 \"test16\"})\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+        long c = RunInfo.getRandom().nextLong();\n+        long d = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, long c, long d) {\n+        Asserts.assertEQ(b - a              , test1(a, b));\n+        Asserts.assertEQ(a - b              , test2(a, b));\n+        Asserts.assertEQ(b - a              , test3(a, b));\n+        Asserts.assertEQ(a - b              , test4(a, b));\n+        Asserts.assertEQ(b - a              , test5(a, b));\n+        Asserts.assertEQ(a + 1              , test6(a));\n+        Asserts.assertEQ(a                  , test7(a));\n+        Asserts.assertEQ((b + a) + 1        , test8(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test9(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test10(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test11(a, b));\n+        Asserts.assertEQ(~a                 , test12(a));\n+        Asserts.assertEQ(~a                 , test13(a));\n+        Asserts.assertEQ(~a                 , test14(a));\n+        Asserts.assertEQ(~a                 , test15(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test16(a, b, c));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public long test1(long x, long y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public long test2(long x, long y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public long test3(long x, long y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public long test4(long x, long y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test5(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test6(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test7(long x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public long test8(long x, long y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public long test9(long x, long y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public long test10(long x, long y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public long test11(long x, long y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public long test12(long x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public long test13(long x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public long test14(long x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public long test15(long x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public long test16(long x, long y, long z) {\n+        long u = ~x + y;\n+        long v = ~x | z;\n+        return u + v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"}]}