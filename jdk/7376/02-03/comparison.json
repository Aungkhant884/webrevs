{"files":[{"patch":"@@ -307,10 +307,0 @@\n-  \/\/ Convert \"x+(0-y)\" into \"(x-y)\"\n-  if (op2 == Op_Sub(bt) && phase->type(in2->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in1, in2->in(2), bt);\n-  }\n-\n-  \/\/ Convert \"(0-y)+x\" into \"(x-y)\"\n-  if (op1 == Op_Sub(bt) && phase->type(in1->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in2, in1->in(2), bt);\n-  }\n-\n@@ -899,9 +889,0 @@\n-  \/\/ Convert ~(c-x) into x+(-c-1). Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(c-x)\n-  \/\/ will eventually be (c-x)^-1.\n-  if (op1 == Op_SubI && phase->type(in2) == TypeInt::MINUS_1 &&\n-      in1->in(1)->Opcode() == Op_ConI) {\n-    jint c = phase->type(in1->in(1))->isa_int()->get_con();\n-    Node* neg_c_minus_one = phase->intcon(java_add(-c, -1));\n-    return new AddINode(in1->in(2), neg_c_minus_one);\n-  }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"}]}