{"files":[{"patch":"@@ -372,8 +372,3 @@\n-  \/\/ Convert (~x+c) into (c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so (~x+c)\n-  \/\/ will be (x^(-1))+c.\n-  if (op1 == Op_Xor(bt) &&\n-      (in2->Opcode() == Op_ConI || in2->Opcode() == Op_ConL) &&\n-      phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n-    Node* c_minus_one = phase->makecon(add_ring(phase->type(in(2)), TypeInteger::minus_1(bt)));\n-    return SubNode::make(c_minus_one, in1->in(1), bt);\n+  \/\/ Convert ~x + rhs, which is (x ^ (-1)) + rhs, into (-1 - x) + rhs.\n+  if (op1 == Op_Xor(bt) && phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(phase->integercon(-1, bt), in1->in(1), bt)), in2, bt);\n@@ -381,0 +376,6 @@\n+\n+  \/\/ Convert lhs + ~x, which is lhs + (x ^ (-1)), into lhs + (-1 - x).\n+  if (op2 == Op_Xor(bt) && phase->type(in2->in(2)) == TypeInteger::minus_1(bt)) {\n+    return AddNode::make(in1, phase->transform(SubNode::make(phase->integercon(-1, bt), in2->in(1), bt)), bt);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -326,0 +326,10 @@\n+  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n+  if (op1 == Op_XorI && phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(phase->transform(new SubINode(phase->intcon(-1), in1->in(1))), in2);\n+  }\n+\n+  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n+  if (op2 == Op_XorI && phase->type(in2->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(in1, phase->transform(new SubINode(phase->intcon(-1), in2->in(1))));\n+  }\n+\n@@ -503,0 +513,10 @@\n+  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n+  if (op1 == Op_XorL && phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(phase->transform(new SubLNode(phase->longcon(-1), in1->in(1))), in2);\n+  }\n+\n+  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n+  if (op2 == Op_XorL && phase->type(in2->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(in1, phase->transform(new SubLNode(phase->longcon(-1), in2->in(1))));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-                 \"test23\"})\n+                 \"test23\", \"test24\", \"test25\",\n+                 \"test26\", \"test27\", \"test28\"})\n@@ -91,0 +92,5 @@\n+        Asserts.assertEQ(b - a            , test24(a, b));\n+        Asserts.assertEQ(a - b            , test25(a, b));\n+        Asserts.assertEQ(b - a            , test26(a, b));\n+        Asserts.assertEQ(a - b            , test27(a, b));\n+        Asserts.assertEQ(2021 - a         , test28(a));\n@@ -296,0 +302,40 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public int test24(int x, int y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public int test25(int x, int y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public int test26(int x, int y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public int test27(int x, int y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + c => (c - 1) - x\n+    public int test28(int x) {\n+        return ~x + 2022;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -47,1 +47,3 @@\n-                 \"test20\",\"test21\", \"test22\"})\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\", \"test24\", \"test25\",\n+                 \"test26\", \"test27\"})\n@@ -89,0 +91,5 @@\n+        Asserts.assertEQ(b - a                       , test23(a, b));\n+        Asserts.assertEQ(a - b                       , test24(a, b));\n+        Asserts.assertEQ(b - a                       , test25(a, b));\n+        Asserts.assertEQ(a - b                       , test26(a, b));\n+        Asserts.assertEQ(2021 - a                    , test27(a));\n@@ -290,0 +297,40 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (~x + y) + 1 => y - x\n+    public long test23(long x, long y) {\n+        return (~x + y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + ~y) + 1 => x - y\n+    public long test24(long x, long y) {\n+        return (x + ~y) + 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + (y + 1) => y - x\n+    public long test25(long x, long y) {\n+        return ~x + (y + 1);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR, IRNode.ADD})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks (x + 1) + ~y => x - y\n+    public long test26(long x, long y) {\n+        return (x + 1) + ~y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x + c => (c - 1) - x\n+    public long test27(long x) {\n+        return ~x + 2022;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test19\", \"test20\", \"test21\"})\n+                 \"test19\", \"test20\", \"test21\",\n+                 \"test22\", \"test23\", \"test24\",\n+                 \"test25\"})\n@@ -84,0 +86,4 @@\n+        Asserts.assertEQ(b - a            , test22(a, b));\n+        Asserts.assertEQ(a + 2023         , test23(a));\n+        Asserts.assertEQ(a + 1            , test24(a));\n+        Asserts.assertEQ(a                , test25(a));\n@@ -252,0 +258,31 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test22(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks c - ~x => x + (c + 1)\n+    public int test23(int x) {\n+        return 2022 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test24(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test25(int x) {\n+        return -1 - ~x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubINodeIdealizationTests.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test19\", \"test20\", \"test21\"})\n+                 \"test19\", \"test20\", \"test21\",\n+                 \"test22\", \"test23\", \"test24\",\n+                 \"test25\"})\n@@ -84,0 +86,4 @@\n+        Asserts.assertEQ(b - a            , test22(a, b));\n+        Asserts.assertEQ(a + 2023         , test23(a));\n+        Asserts.assertEQ(a + 1            , test24(a));\n+        Asserts.assertEQ(a                , test25(a));\n@@ -252,0 +258,31 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\"})\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test22(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks c - ~x => x + (c + 1)\n+    public long test23(long x) {\n+        return 2022 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test24(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test25(long x) {\n+        return -1 - ~x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubLNodeIdealizationTests.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+    public static final String XOR = START + \"Xor(I|L)\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts `~x` into `-1-x` when `~x` is\n+ * used in an arithmetic expression.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class NotOpTransformation {\n+\n+    private static final int I_C = 1234567;\n+\n+    private static final long L_C = 123_456_789_123_456L;\n+\n+    private int iFld = 4711;\n+\n+    private long lFld = 4711 * 4711 * 4711;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        bh.consume(iFld);\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        bh.consume(lFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testInt1(Blackhole bh) {\n+        bh.consume(I_C - (~iFld) - iFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testInt2(Blackhole bh) {\n+        bh.consume(~(I_C - iFld) - iFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testLong1(Blackhole bh) {\n+        bh.consume(L_C - (~lFld) - lFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testLong2(Blackhole bh) {\n+        bh.consume(~(L_C - lFld) - lFld);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/NotOpTransformation.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}