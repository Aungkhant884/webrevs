{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts `~x` into `-1-x` when `~x` is\n+ * used in an arithmetic expression.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class NotOpTransformation {\n+\n+    private static final int I_C = 1234567;\n+\n+    private static final long L_C = 123_456_789_123_456L;\n+\n+    private int iFld = 4711;\n+\n+    private long lFld = 4711 * 4711 * 4711;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        bh.consume(iFld);\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        bh.consume(lFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testInt1(Blackhole bh) {\n+        bh.consume(I_C - (~iFld) - iFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testInt2(Blackhole bh) {\n+        bh.consume(~(I_C - iFld) - iFld);\n+    }\n+\n+    \/\/ Convert c-(~x)-x into c-(-1-x)-x, which is finally converted\n+    \/\/ into c+1.\n+    @Benchmark\n+    public void testLong1(Blackhole bh) {\n+        bh.consume(L_C - (~lFld) - lFld);\n+    }\n+\n+    \/\/ Convert ~(c-x)-x into -1-(c-x)-x, which is finally converted\n+    \/\/ into -1-c.\n+    @Benchmark\n+    public void testLong2(Blackhole bh) {\n+        bh.consume(~(L_C - lFld) - lFld);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/NotOpTransformation.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}