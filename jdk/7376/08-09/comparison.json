{"files":[{"patch":"@@ -372,10 +372,0 @@\n-  \/\/ Convert ~x + rhs, which is (x ^ (-1)) + rhs, into (-1 - x) + rhs.\n-  if (op1 == Op_Xor(bt) && phase->type(in1->in(2)) == TypeInteger::minus_1(bt)) {\n-    return AddNode::make(phase->transform(SubNode::make(phase->integercon(-1, bt), in1->in(1), bt)), in2, bt);\n-  }\n-\n-  \/\/ Convert lhs + ~x, which is lhs + (x ^ (-1)), into lhs + (-1 - x).\n-  if (op2 == Op_Xor(bt) && phase->type(in2->in(2)) == TypeInteger::minus_1(bt)) {\n-    return AddNode::make(in1, phase->transform(SubNode::make(phase->integercon(-1, bt), in2->in(1), bt)), bt);\n-  }\n-\n@@ -876,0 +866,13 @@\n+\/\/---------------------------Helper -------------------------------------------\n+\/* Decide if the given node is used only in arithmetic expressions(add or sub).\n+ *\/\n+static bool is_used_in_only_arithmetic(Node* n, BasicType bt) {\n+  for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+    Node* u = n->fast_out(i);\n+    if (u->Opcode() != Op_Add(bt) && u->Opcode() != Op_Sub(bt)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -881,9 +884,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddI && phase->type(in2) == TypeInt::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConI) {\n-    jint c = phase->type(in1->in(2))->isa_int()->get_con();\n-    Node* neg_c_minus_one = phase->intcon(java_add(-c, -1));\n-    return new SubINode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an expression.\n+  if (phase->type(in2) == TypeInt::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_INT)\n+          \/\/ used only once and contains arithmetic\n+          || (outcnt() == 1 && (in1->Opcode() == Op_AddI || in1->Opcode() == Op_SubI))) {\n+        return new SubINode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n@@ -961,9 +969,14 @@\n-  int op1 = in1->Opcode();\n-  \/\/ Convert ~(x+c) into (-c-1)-x. Note there isn't a bitwise not\n-  \/\/ bytecode, \"~x\" would typically represented as \"x^(-1)\", so ~(x+c)\n-  \/\/ will eventually be (x+c)^-1.\n-  if (op1 == Op_AddL && phase->type(in2) == TypeLong::MINUS_1 &&\n-      in1->in(2)->Opcode() == Op_ConL) {\n-    jlong c = phase->type(in1->in(2))->isa_long()->get_con();\n-    Node* neg_c_minus_one = phase->longcon(java_add(-c, (jlong)-1));\n-    return new SubLNode(neg_c_minus_one, in1->in(1));\n+\n+  \/\/ Convert ~x into -1-x when ~x is used in an arithmetic expression\n+  \/\/ or x itself is an arithmetic expression.\n+  if (phase->type(in2) == TypeLong::MINUS_1) { \/\/ follows LHS^(-1), i.e., ~LHS\n+    if (phase->is_IterGVN()) {\n+      if (is_used_in_only_arithmetic(this, T_LONG)\n+          \/\/ used only once and contains arithmetic\n+          || (outcnt() == 1 && (in1->Opcode() == Op_AddL || in1->Opcode() == Op_SubL))) {\n+        return new SubLNode(in2, in1);\n+      }\n+    } else {\n+      \/\/ graph could be incomplete in GVN so we postpone to IGVN\n+      phase->record_for_igvn(this);\n+    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":41,"deletions":28,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -326,10 +326,0 @@\n-  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n-  if (op1 == Op_XorI && phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n-    return new SubINode(phase->transform(new SubINode(phase->intcon(-1), in1->in(1))), in2);\n-  }\n-\n-  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n-  if (op2 == Op_XorI && phase->type(in2->in(2)) == TypeInt::MINUS_1) {\n-    return new SubINode(in1, phase->transform(new SubINode(phase->intcon(-1), in2->in(1))));\n-  }\n-\n@@ -513,10 +503,0 @@\n-  \/\/ Convert ~x - rhs, which is (x ^ (-1)) - rhs, into (-1 - x) - rhs.\n-  if (op1 == Op_XorL && phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n-    return new SubLNode(phase->transform(new SubLNode(phase->longcon(-1), in1->in(1))), in2);\n-  }\n-\n-  \/\/ Convert lhs - ~x, which is lhs - (x ^ (-1)), into lhs - (-1 - x).\n-  if (op2 == Op_XorL && phase->type(in2->in(2)) == TypeLong::MINUS_1) {\n-    return new SubLNode(in1, phase->transform(new SubLNode(phase->longcon(-1), in2->in(1))));\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -49,1 +49,5 @@\n-                 \"test26\", \"test27\", \"test28\"})\n+                 \"test26\", \"test27\", \"test28\",\n+                 \"test29\", \"test30\", \"test31\",\n+                 \"test32\", \"test33\", \"test34\",\n+                 \"test35\", \"test36\", \"test37\",\n+                 \"test38\", \"test39\"})\n@@ -67,30 +71,41 @@\n-        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n-        Asserts.assertEQ(0                , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2        , test1(a));\n-        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2      , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (b - c), test8(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a), test9(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)      , test10(a, b));\n-        Asserts.assertEQ((0 - b) + a      , test11(a, b));\n-        Asserts.assertEQ((a - b) + b      , test12(a, b));\n-        Asserts.assertEQ(b + (a - b)      , test13(a, b));\n-        Asserts.assertEQ(a + 0            , test14(a));\n-        Asserts.assertEQ(0 + a            , test15(a));\n-        Asserts.assertEQ(a*b + a*c        , test16(a, b, c));\n-        Asserts.assertEQ(a*b + b*c        , test17(a, b, c));\n-        Asserts.assertEQ(a*c + b*c        , test18(a, b, c));\n-        Asserts.assertEQ(a*b + c*a        , test19(a, b, c));\n-        Asserts.assertEQ((a - b) + 210    , test20(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test21(a, b));\n-        Asserts.assertEQ((a - b) + 210    , test22(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test23(a, b));\n-        Asserts.assertEQ(b - a            , test24(a, b));\n-        Asserts.assertEQ(a - b            , test25(a, b));\n-        Asserts.assertEQ(b - a            , test26(a, b));\n-        Asserts.assertEQ(a - b            , test27(a, b));\n-        Asserts.assertEQ(2021 - a         , test28(a));\n+        Asserts.assertEQ(((a+a) + (a+a))    , additions(a));\n+        Asserts.assertEQ(0                  , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2          , test1(a));\n+        Asserts.assertEQ((a + 2021) + b     , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)     , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2        , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)  , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)  , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)  , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (b - c)  , test8(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)  , test9(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)        , test10(a, b));\n+        Asserts.assertEQ((0 - b) + a        , test11(a, b));\n+        Asserts.assertEQ((a - b) + b        , test12(a, b));\n+        Asserts.assertEQ(b + (a - b)        , test13(a, b));\n+        Asserts.assertEQ(a + 0              , test14(a));\n+        Asserts.assertEQ(0 + a              , test15(a));\n+        Asserts.assertEQ(a*b + a*c          , test16(a, b, c));\n+        Asserts.assertEQ(a*b + b*c          , test17(a, b, c));\n+        Asserts.assertEQ(a*c + b*c          , test18(a, b, c));\n+        Asserts.assertEQ(a*b + c*a          , test19(a, b, c));\n+        Asserts.assertEQ((a - b) + 210      , test20(a, b));\n+        Asserts.assertEQ((a - b) + 190      , test21(a, b));\n+        Asserts.assertEQ((a - b) + 210      , test22(a, b));\n+        Asserts.assertEQ((a - b) + 190      , test23(a, b));\n+        Asserts.assertEQ(b - a              , test24(a, b));\n+        Asserts.assertEQ(a - b              , test25(a, b));\n+        Asserts.assertEQ(b - a              , test26(a, b));\n+        Asserts.assertEQ(a - b              , test27(a, b));\n+        Asserts.assertEQ(b - a              , test28(a, b));\n+        Asserts.assertEQ(a + 1              , test29(a));\n+        Asserts.assertEQ(a                  , test30(a));\n+        Asserts.assertEQ((b + a) + 1        , test31(a, b));\n+        Asserts.assertEQ((-1 - a) - b       , test32(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test33(a, b));\n+        Asserts.assertEQ((b - a) + (-1)     , test34(a, b));\n+        Asserts.assertEQ(~a                 , test35(a));\n+        Asserts.assertEQ(~a                 , test36(a));\n+        Asserts.assertEQ(~a                 , test37(a));\n+        Asserts.assertEQ(~a                 , test38(a));\n+        Asserts.assertEQ((~a + b) + (~a | c), test39(a, b, c));\n@@ -336,1 +351,1 @@\n-    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(failOn = {IRNode.XOR})\n@@ -338,3 +353,94 @@\n-    \/\/ Checks ~x + c => (c - 1) - x\n-    public int test28(int x) {\n-        return ~x + 2022;\n+    \/\/ Checks ~x - ~y => y - x\n+    public int test28(int x, int y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public int test29(int x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public int test30(int x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"2\"})\n+    \/\/ Checks y - ~x => (y + x) + 1\n+    public int test31(int x, int y) {\n+        return y - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public int test32(int x, int y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public int test33(int x, int y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public int test34(int x, int y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public int test35(int x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public int test36(int x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public int test37(int x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public int test38(int x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public int test39(int x, int y, int z) {\n+        int u = ~x + y;\n+        int v = ~x | z;\n+        return u + v;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":141,"deletions":35,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -49,1 +49,4 @@\n-                 \"test26\", \"test27\"})\n+                 \"test26\", \"test27\", \"test28\",\n+                 \"test29\", \"test30\", \"test31\",\n+                 \"test32\", \"test33\", \"test34\",\n+                 \"test35\", \"test36\", \"test37\"})\n@@ -95,1 +98,11 @@\n-        Asserts.assertEQ(2021 - a                    , test27(a));\n+        Asserts.assertEQ(b - a                       , test27(a, b));\n+        Asserts.assertEQ(a + 1                       , test28(a));\n+        Asserts.assertEQ(a                           , test29(a));\n+        Asserts.assertEQ((-1 - a) - b                , test30(a, b));\n+        Asserts.assertEQ((b - a) + (-1)              , test31(a, b));\n+        Asserts.assertEQ((b - a) + (-1)              , test32(a, b));\n+        Asserts.assertEQ(~a                          , test33(a));\n+        Asserts.assertEQ(~a                          , test34(a));\n+        Asserts.assertEQ(~a                          , test35(a));\n+        Asserts.assertEQ(~a                          , test36(a));\n+        Asserts.assertEQ((~a + b) + (~a | c)         , test37(a, b, c));\n@@ -331,1 +344,1 @@\n-    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(failOn = {IRNode.XOR})\n@@ -333,3 +346,86 @@\n-    \/\/ Checks ~x + c => (c - 1) - x\n-    public long test27(long x) {\n-        return ~x + 2022;\n+    \/\/ Checks ~x - ~y => y - x\n+    public long test27(long x, long y) {\n+        return ~x - ~y; \/\/ transformed to y - x\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n+    @IR(counts = {IRNode.ADD, \"1\"})\n+    \/\/ Checks 0 - ~x => x + 1\n+    public long test28(long x) {\n+        return 0 - ~x; \/\/ transformed to x + 1\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n+    \/\/ Checks -1 - ~x => x\n+    public long test29(long x) {\n+        return -1 - ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD, IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"2\"})\n+    \/\/ Checks ~x - y => (-1 - x) -y\n+    public long test30(long x, long y) {\n+        return ~x - y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks ~x + y => (y - x) + (-1)\n+    public long test31(long x, long y) {\n+        return ~x + y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.SUB, \"1\",\n+                  IRNode.ADD, \"1\"})\n+    \/\/ Checks y + ~x => (y - x) + (-1)\n+    public long test32(long x, long y) {\n+        return y + ~x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x + 0) => ~x, should not be transformed into -1-x\n+    public long test33(long x) {\n+        return ~(x + 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~(x - 0) => ~x, should not be transformed into -1-x\n+    public long test34(long x) {\n+        return ~(x - 0);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + 0 => ~x, should not be transformed into -1-x\n+    public long test35(long x) {\n+        return ~x + 0;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.SUB, IRNode.ADD})\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x - 0 => ~x, should not be transformed into -1-x\n+    public long test36(long x) {\n+        return ~x - 0;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})\n+    \/\/ Checks ~x + y should NOT be transformed into (y - x) + (-1)\n+    \/\/ because ~x has one non-arithmetic user.\n+    public long test37(long x, long y, long z) {\n+        long u = ~x + y;\n+        long v = ~x | z;\n+        return u + v;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":102,"deletions":6,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -46,3 +46,1 @@\n-                 \"test19\", \"test20\", \"test21\",\n-                 \"test22\", \"test23\", \"test24\",\n-                 \"test25\"})\n+                 \"test19\", \"test20\", \"test21\"})\n@@ -86,4 +84,0 @@\n-        Asserts.assertEQ(b - a            , test22(a, b));\n-        Asserts.assertEQ(a + 2023         , test23(a));\n-        Asserts.assertEQ(a + 1            , test24(a));\n-        Asserts.assertEQ(a                , test25(a));\n@@ -258,31 +252,0 @@\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x - ~y => y - x\n-    public int test22(int x, int y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks c - ~x => x + (c + 1)\n-    public int test23(int x) {\n-        return 2022 - ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks 0 - ~x => x + 1\n-    public int test24(int x) {\n-        return 0 - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n-    \/\/ Checks -1 - ~x => x\n-    public int test25(int x) {\n-        return -1 - ~x;\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubINodeIdealizationTests.java","additions":1,"deletions":38,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -46,3 +46,1 @@\n-                 \"test19\", \"test20\", \"test21\",\n-                 \"test22\", \"test23\", \"test24\",\n-                 \"test25\"})\n+                 \"test19\", \"test20\", \"test21\"})\n@@ -86,4 +84,0 @@\n-        Asserts.assertEQ(b - a            , test22(a, b));\n-        Asserts.assertEQ(a + 2023         , test23(a));\n-        Asserts.assertEQ(a + 1            , test24(a));\n-        Asserts.assertEQ(a                , test25(a));\n@@ -258,31 +252,0 @@\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks ~x - ~y => y - x\n-    public long test22(long x, long y) {\n-        return ~x - ~y; \/\/ transformed to y - x\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks c - ~x => x + (c + 1)\n-    public long test23(long x) {\n-        return 2022 - ~x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR})\n-    @IR(counts = {IRNode.ADD, \"1\"})\n-    \/\/ Checks 0 - ~x => x + 1\n-    public long test24(long x) {\n-        return 0 - ~x; \/\/ transformed to x + 1\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.SUB, IRNode.XOR, IRNode.ADD})\n-    \/\/ Checks -1 - ~x => x\n-    public long test25(long x) {\n-        return -1 - ~x;\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/SubLNodeIdealizationTests.java","additions":1,"deletions":38,"binary":false,"changes":39,"status":"modified"}]}