{"files":[{"patch":"@@ -4871,1 +4871,1 @@\n-    int largeLoopExitCondition = MAX(64, SoftwarePrefetchHintDistance)\/(isLL ? 1 : 2);\n+    int largeLoopExitCondition = MAX2(64, SoftwarePrefetchHintDistance)\/(isLL ? 1 : 2);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang;\n-\n-import org.openjdk.jmh.annotations.*;\n-import java.util.concurrent.TimeUnit;\n-\n-\/*\n- * This benchmark naively explores String::compare performance\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Benchmark)\n-public class StringCompare {\n-    @Param({\"256\"})\n-    int size;\n-\n-    @Param({\"7\", \"15\", \"31\", \"47\", \"63\", \"127\", \"255\"})\n-    int diff_pos;\n-\n-\n-    private String str1;\n-    private String str2;\n-\n-    @Setup(Level.Trial)\n-    public void init() {\n-        str1 = newString(size, 'c', diff_pos, '1');\n-        str2 = newString(size, 'c', diff_pos, '2');\n-    }\n-\n-    public String newString(int length, char charToFill, int diff_pos, char diff_char) {\n-        if (length > 0) {\n-            char[] array = new char[length];\n-            for (int i = 0; i < length; i++) {\n-                array[i] = charToFill;\n-            }\n-            array[diff_pos] = diff_char;\n-            return new String(array);\n-        }\n-        return \"\";\n-    }\n-\n-    @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareLLDiffStrings() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n-    @Benchmark\n-    @Fork(jvmArgsAppend = {\"-XX:-CompactStrings\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareUUDiffStrings() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n-    @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    @Fork(jvmArgsAppend = {\"-XX:-CompactStrings\", \"-XX:-UseCompressedClassPointers\"})\n-    public int compareUUDiffStringsTurnOffCCP() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n-}\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringCompare.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"}]}