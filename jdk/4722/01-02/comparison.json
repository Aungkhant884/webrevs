{"files":[{"patch":"@@ -98,2 +98,0 @@\n-  product(bool, UseStringCompareRefactor, false,                         \\\n-          \"refactor string compare intrinsic's function compare_string_16_bytes_same_refactor() use ldp\")                   \\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5005,112 +5005,0 @@\n-  \/\/ code for comparing 16 bytes of strings with same encoding\n-  void compare_string_16_bytes_same_refactor(Label &DIFF) {\n-    Register str1 = r1, str2 = r3, tmp1 = r10, tmp2 = r11, tmp1h = rscratch1, tmp2h = rscratch2;\n-    __ ldp(tmp1, tmp1h, Address(__ post(str1, 16)));\n-    __ ldp(tmp2, tmp2h, Address(__ post(str2, 16)));\n-    __ cmp(tmp1, tmp2);\n-    __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n-    __ br(__ NE, DIFF);\n-  }\n-\n-  \/\/ r0  = result\n-  \/\/ r1  = str1\n-  \/\/ r2  = cnt1\n-  \/\/ r3  = str2\n-  \/\/ r4  = cnt2\n-  \/\/ r10 = tmp1\n-  \/\/ r11 = tmp2\n-  address generate_compare_long_string_same_encoding_refactor(bool isLL) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", isLL\n-        ? \"compare_long_string_same_encoding LL\"\n-        : \"compare_long_string_same_encoding UU\");\n-    address entry = __ pc();\n-    Register result = r0, str1 = r1, cnt1 = r2, str2 = r3, cnt2 = r4,\n-        tmp1 = r10, tmp2 = r11, tmp1h = rscratch1, tmp2h = rscratch2;\n-    Label SMALL_LOOP, LARGE_LOOP_PREFETCH, CHECK_LAST, TAIL,\n-        LENGTH_DIFF, DIFF, CALCULATE_DIFFERENCE;\n-    \/\/ exit from large loop when less than 64 bytes left to read or we're about\n-    \/\/ to prefetch memory behind array border\n-    int largeLoopExitCondition = MAX2(64, SoftwarePrefetchHintDistance)\/(isLL ? 1 : 2);\n-\n-    \/\/ before jumping to stub, pre-load 8 bytes already, so do comparison directly\n-    __ eor(rscratch2, tmp1, tmp2);\n-    __ cbnz(rscratch2, CALCULATE_DIFFERENCE);\n-\n-    __ sub(cnt2, cnt2, wordSize\/(isLL ? 1 : 2));\n-    \/\/ update pointers, because of previous read\n-    __ add(str1, str1, wordSize);\n-    __ add(str2, str2, wordSize);\n-    if (SoftwarePrefetchHintDistance >= 0) {\n-      __ bind(LARGE_LOOP_PREFETCH);\n-        __ prfm(Address(str1, SoftwarePrefetchHintDistance));\n-        __ prfm(Address(str2, SoftwarePrefetchHintDistance));\n-        compare_string_16_bytes_same_refactor(DIFF);\n-        compare_string_16_bytes_same_refactor(DIFF);\n-        __ sub(cnt2, cnt2, isLL ? 64 : 32);\n-        compare_string_16_bytes_same_refactor(DIFF);\n-        __ subs(rscratch2, cnt2, largeLoopExitCondition);\n-        compare_string_16_bytes_same_refactor(DIFF);\n-        __ br(__ GT, LARGE_LOOP_PREFETCH);\n-        __ cbz(cnt2, LENGTH_DIFF); \/\/ no more chars left?\n-    }\n-    \/\/ less than 16 bytes left?\n-    __ subs(cnt2, cnt2, isLL ? 16 : 8);\n-    __ br(__ LT, TAIL);\n-    __ align(OptoLoopAlignment);\n-    __ bind(SMALL_LOOP);\n-      compare_string_16_bytes_same_refactor(DIFF);\n-      __ subs(cnt2, cnt2, isLL ? 16 : 8);\n-      __ br(__ GE, SMALL_LOOP);\n-    __ bind(TAIL);\n-      __ adds(cnt2, cnt2, isLL ? 16 : 8);\n-      __ br(__ EQ, LENGTH_DIFF);\n-      __ subs(cnt2, cnt2, isLL ? 8 : 4);\n-      __ br(__ LE, CHECK_LAST);\n-\n-      __ ldr(tmp1, Address(__ post(str1, 8)));\n-      __ ldr(tmp2, Address(__ post(str2, 8)));\n-      __ eor(rscratch2, tmp1, tmp2);\n-      __ cbnz(rscratch2, CALCULATE_DIFFERENCE);\n-      __ sub(cnt2, cnt2, isLL ? 8 : 4);\n-    __ bind(CHECK_LAST);\n-      if (!isLL) {\n-        __ add(cnt2, cnt2, cnt2); \/\/ now in bytes\n-      }\n-\n-      __ ldr(tmp1, Address(str1, cnt2));\n-      __ ldr(tmp2, Address(str2, cnt2));\n-      __ eor(rscratch2, tmp1, tmp2);\n-      __ cbz(rscratch2, LENGTH_DIFF);\n-      __ b(CALCULATE_DIFFERENCE);\n-\n-    __ bind(DIFF);\n-      __ cmp(tmp1, tmp2);\n-      __ csel(tmp1, tmp1, tmp1h, Assembler::NE);\n-      __ csel(tmp2, tmp2, tmp2h, Assembler::NE);\n-      \/\/ reuse rscratch2 register for the result of eor instruction\n-      __ eor(rscratch2, tmp1, tmp2);\n-\n-    \/\/ Find the first different characters in the longwords and\n-    \/\/ compute their difference.\n-    __ bind(CALCULATE_DIFFERENCE);\n-      __ rev(rscratch2, rscratch2);\n-      __ clz(rscratch2, rscratch2);\n-      __ andr(rscratch2, rscratch2, isLL ? -8 : -16);\n-      \/\/ reuse tmp1 and tmp2 register, which are the chars to be compared and loaded from str1 and str2 respectively\n-      __ lsrv(tmp1, tmp1, rscratch2);\n-      __ lsrv(tmp2, tmp2, rscratch2);\n-      if (isLL) {\n-        __ uxtbw(tmp1, tmp1);\n-        __ uxtbw(tmp2, tmp2);\n-      } else {\n-        __ uxthw(tmp1, tmp1);\n-        __ uxthw(tmp2, tmp2);\n-      }\n-      __ subw(result, tmp1, tmp2);\n-\n-    __ bind(LENGTH_DIFF);\n-      __ ret(lr);\n-    return entry;\n-  }\n-\n@@ -5232,3 +5120,0 @@\n-      } else if (UseStringCompareRefactor) {\n-          StubRoutines::aarch64::_compare_long_string_LL = generate_compare_long_string_same_encoding_refactor(true);\n-          StubRoutines::aarch64::_compare_long_string_UU = generate_compare_long_string_same_encoding_refactor(false);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":0,"deletions":115,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n@@ -35,1 +35,0 @@\n-    \/\/@Param({\"64\", \"72\", \"80\", \"91\", \"101\", \"121\", \"181\", \"256\"})\n@@ -39,3 +38,2 @@\n-    \/\/@Param({\"8\", \"16\", \"24\", \"32\", \"40\", \"48\", \"56\", \"64\", \"72\", \"80\", \"88\", \"96\", \"104\", \"112\", \"120\"})\n-    @Param({\"7\", \"15\", \"31\", \"47\", \"63\"})\n-    int diff_pos = 0;\n+    @Param({\"7\", \"15\", \"31\", \"47\", \"63\", \"127\"})\n+    int diff_pos;\n@@ -44,2 +42,1 @@\n-    private String str;\n-    private String strDup;\n+    private String str1;\n@@ -50,2 +47,1 @@\n-        str = newString(size, 'c', diff_pos, '1');\n-        strDup = new String(str.toCharArray());\n+        str1 = newString(size, 'c', diff_pos, '1');\n@@ -67,1 +63,1 @@\n-    \/*\n+\n@@ -70,1 +66,1 @@\n-    public int compareLL() {\n+    public int compareLLDiffStrings() {\n@@ -73,1 +69,1 @@\n-            result ^= str.compareTo(strDup);\n+            result ^= str1.compareTo(str2);\n@@ -81,1 +77,1 @@\n-    public int compareLLWithLdp() {\n+    public int compareLLDiffStringsWithLdp() {\n@@ -84,1 +80,1 @@\n-            result ^= str.compareTo(strDup);\n+            result ^= str1.compareTo(str2);\n@@ -92,1 +88,1 @@\n-    public int compareUU() {\n+    public int compareUUDiffStrings() {\n@@ -95,1 +91,1 @@\n-            result ^= str.compareTo(strDup);\n+            result ^= str1.compareTo(str2);\n@@ -103,33 +99,1 @@\n-    public int compareUUWithLdp() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str.compareTo(strDup);\n-        }\n-        return result;\n-    }\n-    *\/\n-    @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareLLDiffStrings() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n-    @Benchmark\n-    @Fork(jvmArgsAppend = { \"-XX:+UseStringCompareWithLdp\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareLLDiffStringsWithLdp() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n-    @Benchmark\n-    @Fork(jvmArgsAppend = { \"-XX:+UseStringCompareRefactor\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareLLDiffStringsWithRefactor() {\n+    public int compareUUDiffStringsWithLdp() {\n@@ -138,1 +102,1 @@\n-            result ^= str.compareTo(str2);\n+            result ^= str1.compareTo(str2);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringCompare.java","additions":14,"deletions":50,"binary":false,"changes":64,"status":"modified"}]}