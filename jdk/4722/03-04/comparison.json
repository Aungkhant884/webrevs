{"files":[{"patch":"@@ -96,2 +96,0 @@\n-  product(bool, UseStringCompareWithLdp, false,                         \\\n-          \"Use ldp enhance string compare intrinsic\")                   \\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4659,12 +4659,0 @@\n-  \/\/ code for comparing 16 bytes of strings with same encoding\n-  void compare_string_16_bytes_same(Label &DIFF1, Label &DIFF2) {\n-    Register result = r0, str1 = r1, cnt1 = r2, str2 = r3, tmp1 = r10, tmp2 = r11;\n-    __ ldr(rscratch1, Address(__ post(str1, 8)));\n-    __ eor(rscratch2, tmp1, tmp2);\n-    __ ldr(cnt1, Address(__ post(str2, 8)));\n-    __ cbnz(rscratch2, DIFF1);\n-    __ ldr(tmp1, Address(__ post(str1, 8)));\n-    __ eor(rscratch2, rscratch1, cnt1);\n-    __ ldr(tmp2, Address(__ post(str2, 8)));\n-    __ cbnz(rscratch2, DIFF2);\n-  }\n@@ -4870,1 +4858,1 @@\n-  address generate_compare_long_string_same_encoding_withLdp(bool isLL) {\n+  address generate_compare_long_string_same_encoding(bool isLL) {\n@@ -4873,4 +4861,3 @@\n-                                            ? \"compare_long_string_same_encoding LL\"\n-                                            : \"compare_long_string_same_encoding UU\");\n-\n-    address  entry  = __ pc();\n+        ? \"compare_long_string_same_encoding LL\"\n+        : \"compare_long_string_same_encoding UU\");\n+    address entry = __ pc();\n@@ -4878,2 +4865,1 @@\n-             tmp1   = r10, tmp2 = r11, tmp1h = rscratch1, tmp2h = rscratch2;\n-\n+        tmp1 = r10, tmp2 = r11, tmp1h = rscratch1, tmp2h = rscratch2;\n@@ -4881,1 +4867,1 @@\n-    Label LOOP_COMPARE64, LOOP_COMPARE16, DIFF, LESS16, LESS8, CAL_DIFFERENCE, LENGTH_DIFF;\n+    Label LARGE_LOOP_PREFETCH, LOOP_COMPARE16, DIFF, LESS16, LESS8, CAL_DIFFERENCE, LENGTH_DIFF;\n@@ -4883,1 +4869,3 @@\n-    int largeLoopSize = 64\/(isLL ? 1 : 2);\n+    \/\/ exit from large loop when less than 64 bytes left to read or we're about\n+    \/\/ to prefetch memory behind array border\n+    int largeLoopExitCondition = MAX(64, SoftwarePrefetchHintDistance)\/(isLL ? 1 : 2);\n@@ -4893,0 +4881,4 @@\n+    if (SoftwarePrefetchHintDistance >= 0) {\n+      __ bind(LARGE_LOOP_PREFETCH);\n+        __ prfm(Address(str1, SoftwarePrefetchHintDistance));\n+        __ prfm(Address(str2, SoftwarePrefetchHintDistance));\n@@ -4894,33 +4886,15 @@\n-    __ align(OptoLoopAlignment);\n-    __ bind(LOOP_COMPARE64);\n-      __ ldp(tmp1, tmp1h, Address(str1));\n-      __ ldp(tmp2, tmp2h, Address(str2));\n-      __ cmp(tmp1, tmp2);\n-      __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n-      __ br(__ NE, DIFF);\n-\n-      __ ldp(tmp1, tmp1h, Address(str1,16));\n-      __ ldp(tmp2, tmp2h, Address(str2,16));\n-      __ cmp(tmp1, tmp2);\n-      __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n-      __ br(__ NE, DIFF);\n-\n-      __ ldp(tmp1, tmp1h, Address(str1, 32));\n-      __ ldp(tmp2, tmp2h, Address(str2, 32));\n-      __ cmp(tmp1, tmp2);\n-      __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n-      __ br(__ NE, DIFF);\n-\n-      __ ldp(tmp1, tmp1h, Address(str1,48));\n-      __ ldp(tmp2, tmp2h, Address(str2,48));\n-      __ cmp(tmp1, tmp2);\n-      __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n-      __ br(__ NE, DIFF);\n-\n-      __ sub(cnt2, cnt2, isLL ? 64 : 32);\n-      __ add(str1, str1, 64);\n-      __ add(str2, str2, 64);\n-      __ subs(rscratch2, cnt2, largeLoopSize);\n-      __ br(__ GE, LOOP_COMPARE64);\n-      __ cbz(cnt2, LENGTH_DIFF); \/\/ no more chars left?\n-\n+        __ align(OptoLoopAlignment);\n+        for (int i = 0; i < 4; i++) {\n+          __ ldp(tmp1, tmp1h, Address(str1, i * 16));\n+          __ ldp(tmp2, tmp2h, Address(str2, i * 16));\n+          __ cmp(tmp1, tmp2);\n+          __ ccmp(tmp1h, tmp2h, 0, Assembler::EQ);\n+          __ br(__ NE, DIFF);\n+        }\n+        __ sub(cnt2, cnt2, isLL ? 64 : 32);\n+        __ add(str1, str1, 64);\n+        __ add(str2, str2, 64);\n+        __ subs(rscratch2, cnt2, largeLoopExitCondition);\n+        __ br(__ GE, LARGE_LOOP_PREFETCH);\n+        __ cbz(cnt2, LENGTH_DIFF); \/\/ no more chars left?\n+    }\n@@ -4931,1 +4905,0 @@\n-\n@@ -4935,1 +4908,0 @@\n-\n@@ -4945,1 +4917,0 @@\n-\n@@ -4950,1 +4921,0 @@\n-\n@@ -4965,1 +4935,1 @@\n-    __ bind(LESS8);                          \/\/ directly load last 8 bytes\n+    __ bind(LESS8); \/\/ directly load last 8 bytes\n@@ -4975,1 +4945,0 @@\n-\n@@ -4996,1 +4965,0 @@\n-\n@@ -5005,111 +4973,0 @@\n-\n-  \/\/ r0  = result\n-  \/\/ r1  = str1\n-  \/\/ r2  = cnt1\n-  \/\/ r3  = str2\n-  \/\/ r4  = cnt2\n-  \/\/ r10 = tmp1\n-  \/\/ r11 = tmp2\n-  address generate_compare_long_string_same_encoding(bool isLL) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", isLL\n-        ? \"compare_long_string_same_encoding LL\"\n-        : \"compare_long_string_same_encoding UU\");\n-    address entry = __ pc();\n-    Register result = r0, str1 = r1, cnt1 = r2, str2 = r3, cnt2 = r4,\n-        tmp1 = r10, tmp2 = r11;\n-    Label SMALL_LOOP, LARGE_LOOP_PREFETCH, CHECK_LAST, DIFF2, TAIL,\n-        LENGTH_DIFF, DIFF, LAST_CHECK_AND_LENGTH_DIFF,\n-        DIFF_LAST_POSITION, DIFF_LAST_POSITION2;\n-    \/\/ exit from large loop when less than 64 bytes left to read or we're about\n-    \/\/ to prefetch memory behind array border\n-    int largeLoopExitCondition = MAX2(64, SoftwarePrefetchHintDistance)\/(isLL ? 1 : 2);\n-    \/\/ cnt1\/cnt2 contains amount of characters to compare. cnt1 can be re-used\n-    \/\/ update cnt2 counter with already loaded 8 bytes\n-    __ sub(cnt2, cnt2, wordSize\/(isLL ? 1 : 2));\n-    \/\/ update pointers, because of previous read\n-    __ add(str1, str1, wordSize);\n-    __ add(str2, str2, wordSize);\n-    if (SoftwarePrefetchHintDistance >= 0) {\n-      __ bind(LARGE_LOOP_PREFETCH);\n-        __ prfm(Address(str1, SoftwarePrefetchHintDistance));\n-        __ prfm(Address(str2, SoftwarePrefetchHintDistance));\n-        compare_string_16_bytes_same(DIFF, DIFF2);\n-        compare_string_16_bytes_same(DIFF, DIFF2);\n-        __ sub(cnt2, cnt2, isLL ? 64 : 32);\n-        compare_string_16_bytes_same(DIFF, DIFF2);\n-        __ subs(rscratch2, cnt2, largeLoopExitCondition);\n-        compare_string_16_bytes_same(DIFF, DIFF2);\n-        __ br(__ GT, LARGE_LOOP_PREFETCH);\n-        __ cbz(cnt2, LAST_CHECK_AND_LENGTH_DIFF); \/\/ no more chars left?\n-    }\n-    \/\/ less than 16 bytes left?\n-    __ subs(cnt2, cnt2, isLL ? 16 : 8);\n-    __ br(__ LT, TAIL);\n-    __ align(OptoLoopAlignment);\n-    __ bind(SMALL_LOOP);\n-      compare_string_16_bytes_same(DIFF, DIFF2);\n-      __ subs(cnt2, cnt2, isLL ? 16 : 8);\n-      __ br(__ GE, SMALL_LOOP);\n-    __ bind(TAIL);\n-      __ adds(cnt2, cnt2, isLL ? 16 : 8);\n-      __ br(__ EQ, LAST_CHECK_AND_LENGTH_DIFF);\n-      __ subs(cnt2, cnt2, isLL ? 8 : 4);\n-      __ br(__ LE, CHECK_LAST);\n-      __ eor(rscratch2, tmp1, tmp2);\n-      __ cbnz(rscratch2, DIFF);\n-      __ ldr(tmp1, Address(__ post(str1, 8)));\n-      __ ldr(tmp2, Address(__ post(str2, 8)));\n-      __ sub(cnt2, cnt2, isLL ? 8 : 4);\n-    __ bind(CHECK_LAST);\n-      if (!isLL) {\n-        __ add(cnt2, cnt2, cnt2); \/\/ now in bytes\n-      }\n-      __ eor(rscratch2, tmp1, tmp2);\n-      __ cbnz(rscratch2, DIFF);\n-      __ ldr(rscratch1, Address(str1, cnt2));\n-      __ ldr(cnt1, Address(str2, cnt2));\n-      __ eor(rscratch2, rscratch1, cnt1);\n-      __ cbz(rscratch2, LENGTH_DIFF);\n-      \/\/ Find the first different characters in the longwords and\n-      \/\/ compute their difference.\n-    __ bind(DIFF2);\n-      __ rev(rscratch2, rscratch2);\n-      __ clz(rscratch2, rscratch2);\n-      __ andr(rscratch2, rscratch2, isLL ? -8 : -16);\n-      __ lsrv(rscratch1, rscratch1, rscratch2);\n-      if (isLL) {\n-        __ lsrv(cnt1, cnt1, rscratch2);\n-        __ uxtbw(rscratch1, rscratch1);\n-        __ uxtbw(cnt1, cnt1);\n-      } else {\n-        __ lsrv(cnt1, cnt1, rscratch2);\n-        __ uxthw(rscratch1, rscratch1);\n-        __ uxthw(cnt1, cnt1);\n-      }\n-      __ subw(result, rscratch1, cnt1);\n-      __ b(LENGTH_DIFF);\n-    __ bind(DIFF);\n-      __ rev(rscratch2, rscratch2);\n-      __ clz(rscratch2, rscratch2);\n-      __ andr(rscratch2, rscratch2, isLL ? -8 : -16);\n-      __ lsrv(tmp1, tmp1, rscratch2);\n-      if (isLL) {\n-        __ lsrv(tmp2, tmp2, rscratch2);\n-        __ uxtbw(tmp1, tmp1);\n-        __ uxtbw(tmp2, tmp2);\n-      } else {\n-        __ lsrv(tmp2, tmp2, rscratch2);\n-        __ uxthw(tmp1, tmp1);\n-        __ uxthw(tmp2, tmp2);\n-      }\n-      __ subw(result, tmp1, tmp2);\n-      __ b(LENGTH_DIFF);\n-    __ bind(LAST_CHECK_AND_LENGTH_DIFF);\n-      __ eor(rscratch2, tmp1, tmp2);\n-      __ cbnz(rscratch2, DIFF);\n-    __ bind(LENGTH_DIFF);\n-      __ ret(lr);\n-    return entry;\n-  }\n-\n@@ -5117,7 +4974,4 @@\n-      if (UseStringCompareWithLdp) {\n-          StubRoutines::aarch64::_compare_long_string_LL = generate_compare_long_string_same_encoding_withLdp(true);\n-          StubRoutines::aarch64::_compare_long_string_UU = generate_compare_long_string_same_encoding_withLdp(false);\n-      } else {\n-          StubRoutines::aarch64::_compare_long_string_LL = generate_compare_long_string_same_encoding(true);\n-          StubRoutines::aarch64::_compare_long_string_UU = generate_compare_long_string_same_encoding(false);\n-      }\n+      StubRoutines::aarch64::_compare_long_string_LL\n+          = generate_compare_long_string_same_encoding(true);\n+      StubRoutines::aarch64::_compare_long_string_UU\n+          = generate_compare_long_string_same_encoding(false);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":33,"deletions":179,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    @Param({\"77\", \"128\"})\n+    @Param({\"256\"})\n@@ -38,1 +38,1 @@\n-    @Param({\"7\", \"15\", \"31\", \"47\", \"63\", \"71\"})\n+    @Param({\"7\", \"15\", \"31\", \"47\", \"63\", \"127\", \"255\"})\n@@ -73,11 +73,0 @@\n-    @Benchmark\n-    @Fork(jvmArgsAppend = { \"-XX:+UseStringCompareWithLdp\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareLLDiffStringsWithLdp() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n@@ -95,11 +84,0 @@\n-    @Benchmark\n-    @Fork(jvmArgsAppend = {\"-XX:-CompactStrings\", \"-XX:+UseStringCompareWithLdp\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareUUDiffStringsWithLdp() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n-\n@@ -117,10 +95,0 @@\n-    @Benchmark\n-    @Fork(jvmArgsAppend = {\"-XX:-CompactStrings\", \"-XX:-UseCompressedClassPointers\", \"-XX:+UseStringCompareWithLdp\"})\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int compareUUDiffStringsTurnOffCCPWithLdp() {\n-        int result = 0;\n-        for (int i = 0; i < 1000; i++) {\n-            result ^= str1.compareTo(str2);\n-        }\n-        return result;\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringCompare.java","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"}]}