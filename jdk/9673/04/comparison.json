{"files":[{"patch":"@@ -75,0 +75,3 @@\n+     * NOTE: This constructor should not be called by\n+     * Apllications, it is for Internal use only. When called directly\n+     * it will create an un-usable instance.\n@@ -80,0 +83,8 @@\n+\n+        \/\/  Creates a Graphics context when Application calls the constructor\n+        \/\/  directly.\n+        StackWalker walker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+        if ((graphics == null) && (walker.getCallerClass() != this.getClass())) {\n+            BufferedImage bi = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n+            graphics = bi.createGraphics();\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/DebugGraphics.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Robot;\n+import javax.swing.DebugGraphics;\n+import javax.swing.SwingUtilities;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/* @test\n+ * @bug 6521141\n+ * @key headful\n+ * @summary Test to check if NPE does not occur when graphics is not\n+ *  initialized and DebugGraphics instance is created with default\n+ *  Constructor and used.\n+ * @run main DebugGraphicsNPETest\n+ *\/\n+\n+public class DebugGraphicsNPETest {\n+    private static final AtomicReference<Throwable> exception =\n+            new AtomicReference<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                Thread.currentThread().setUncaughtExceptionHandler(\n+                        new DebugGraphicsNPETest.ExceptionCheck());\n+                runTest();\n+            }\n+        });\n+\n+        robot.delay(2000);\n+        robot.waitForIdle();\n+\n+        if (exception.get() != null) {\n+            throw new RuntimeException(\"Test Case Failed. NPE raised!\",\n+                    exception.get());\n+        }\n+        System.out.println(\"Test Pass!\");\n+    }\n+\n+    static void runTest() {\n+        DebugGraphics dg = new DebugGraphics();\n+        Font font = new Font(\"Currier\", Font.PLAIN, 10);\n+        dg.setFont(font);\n+    }\n+\n+    static class ExceptionCheck implements Thread.UncaughtExceptionHandler {\n+        public void uncaughtException(Thread t, Throwable e)\n+        {\n+            exception.set(e);\n+            System.err.println(\"Uncaught Exception Handled : \" + e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DebugGraphics\/DebugGraphicsNPETest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}