{"files":[{"patch":"@@ -33,4 +33,11 @@\n- * The multicast datagram socket class is useful for sending\n- * and receiving IP multicast packets. A MulticastSocket is\n- * a (UDP) DatagramSocket, with additional capabilities for\n- * joining \"groups\" of other multicast hosts on the internet.\n+ * A {@code MulticastSocket} is a datagram socket that is\n+ * convenient for sending and receiving IP multicast datagrams.\n+ * The {@code MulticastSocket} constructors create a socket\n+ * with appropriate socket options enabled that make\n+ * it suitable for receiving multicast datagrams.\n+ * The {@code MulticastSocket} class additionally defines\n+ * convenient setter and getter methods for socket options\n+ * that are commonly used by multicasting applications.\n+ * <P>\n+ * Joining one or more multicast groups makes it possible to\n+ * receive multicast datagrams sent to these groups.\n@@ -45,2 +52,3 @@\n- * <CODE>joinGroup(InetAddress groupAddr)<\/CODE>\n- * method:\n+ * <CODE>joinGroup<\/CODE> method, specifying the group address and\n+ * the network interface through which multicast datagrams will be\n+ * received:\n@@ -52,1 +60,1 @@\n- * InetSocketAddress group = new InetSocketAddress(mcastaddr, port);\n+ * InetSocketAddress group = new InetSocketAddress(mcastaddr, 6789);\n@@ -56,1 +64,1 @@\n- * s.joinGroup(group, netIf);\n+ * s.joinGroup(new InetSocketAddress(mcastaddr, 0), netIf);\n@@ -58,2 +66,1 @@\n- * DatagramPacket hi = new DatagramPacket(msgBytes, msgBytes.length,\n- *                                        group, 6789);\n+ * DatagramPacket hi = new DatagramPacket(msgBytes, msgBytes.length, group);\n","filename":"src\/java.base\/share\/classes\/java\/net\/MulticastSocket.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"}]}