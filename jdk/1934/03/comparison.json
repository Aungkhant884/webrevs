{"files":[{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8241187\n+ * @summary ToolBox::grep should allow for negative filtering\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox\n+ * @run main TestGrepOfToolBox\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.ToolBox;\n+\n+public class TestGrepOfToolBox {\n+    public static void main(String[] args) {\n+        ToolBox tb = new ToolBox();\n+        List<String> input = Arrays.asList(\"apple\", \"banana\", \"cat\", \"dog\", \"end\", \"ending\");\n+\n+        String regex1 = \".*ana.*\";\n+        List<String> expected1 = Arrays.asList(\"apple\", \"cat\", \"dog\", \"end\", \"ending\");\n+        List<String> output1 = tb.grep(regex1, input, false);\n+        tb.checkEqual(expected1, output1);\n+\n+        String regex2 = \".*nd.*\";\n+        List<String> expected2 = Arrays.asList(\"apple\", \"banana\", \"cat\", \"dog\");\n+        List<String> output2 = tb.grep(regex2, input, false);\n+        tb.checkEqual(expected2, output2);\n+\n+        String regex3 = \"apple\";\n+        List<String> expected3 = Arrays.asList(\"banana\", \"cat\", \"dog\", \"end\", \"ending\");\n+        List<String> output3 = tb.grep(regex3, input, false);\n+        tb.checkEqual(expected3, output3);\n+\n+        String regex4 = \".*ana.*\";\n+        List<String> expected4 = Arrays.asList(\"banana\");\n+        List<String> output4 = tb.grep(regex4, input, true);\n+        tb.checkEqual(expected4, output4);\n+\n+        String regex5 = \".*nd.*\";\n+        List<String> expected5 = Arrays.asList(\"end\", \"ending\");\n+        List<String> output5 = tb.grep(regex5, input, true);\n+        tb.checkEqual(expected5, output5);\n+\n+        String regex6 = \"apple\";\n+        List<String> expected6 = Arrays.asList(\"apple\");\n+        List<String> output6 = tb.grep(regex6, input, true);\n+        tb.checkEqual(expected6, output6);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/toolbox\/TestGrepOfToolBox.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,2 @@\n-     * Filters a list of strings according to the given regular expression.\n+     * Filters a list of strings according to the given regular expression,\n+     * returning the strings that match the regular expression.\n@@ -173,1 +174,1 @@\n-        return grep(Pattern.compile(regex), lines);\n+        return grep(Pattern.compile(regex), lines, true);\n@@ -177,1 +178,2 @@\n-     * Filters a list of strings according to the given regular expression.\n+     * Filters a list of strings according to the given regular expression,\n+     * returning the strings that match the regular expression.\n@@ -183,0 +185,24 @@\n+        return grep(pattern, lines, true);\n+    }\n+\n+    \/**\n+     * Filters a list of strings according to the given regular expression,\n+     * returning either the strings that match or the strings that do not match.\n+     * @param regex the regular expression\n+     * @param lines the strings to be filtered\n+     * @param match if true, return the lines that match; otherwise if false, return the lines that do not match.\n+     * @return the strings matching(or not matching) the regular expression\n+     *\/\n+    public List<String> grep(String regex, List<String> lines, boolean match) {\n+        return grep(Pattern.compile(regex), lines, match);\n+    }\n+\n+    \/**\n+     * Filters a list of strings according to the given regular expression,\n+     * returning either the strings that match or the strings that do not match.\n+     * @param pattern the regular expression\n+     * @param lines the strings to be filtered\n+     * @param match if true, return the lines that match; otherwise if false, return the lines that do not match.\n+     * @return the strings matching(or not matching) the regular expression\n+     *\/\n+    public List<String> grep(Pattern pattern, List<String> lines, boolean match) {\n@@ -184,1 +210,1 @@\n-                .filter(s -> pattern.matcher(s).find())\n+                .filter(s -> match ? pattern.matcher(s).find() : !pattern.matcher(s).find())\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"}]}