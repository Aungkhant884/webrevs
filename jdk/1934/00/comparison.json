{"files":[{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8241187\n+ * @summary ToolBox::grep should allow for negative filtering\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox\n+ * @run main T8241187\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.ToolBox;\n+\n+public class T8241187 {\n+    public static void main(String[] args) {\n+        ToolBox tb = new ToolBox();\n+        List<String> input = Arrays.asList(\"apple\", \"banana\", \"cat\", \"dog\", \"end\", \"ending\");\n+\n+        String regex1 = \".*ana.*\";\n+        List<String> expected1 = Arrays.asList(\"apple\", \"cat\", \"dog\", \"end\", \"ending\");\n+        List<String> output1 = tb.grepNotMatch(regex1, input);\n+        tb.checkEqual(expected1, output1);\n+\n+        String regex2 = \".*nd.*\";\n+        List<String> expected2 = Arrays.asList(\"apple\", \"banana\", \"cat\", \"dog\");\n+        List<String> output2 = tb.grepNotMatch(regex2, input);\n+        tb.checkEqual(expected2, output2);\n+\n+        String regex3 = \"apple\";\n+        List<String> expected3 = Arrays.asList(\"banana\", \"cat\", \"dog\", \"end\", \"ending\");\n+        List<String> output3 = tb.grepNotMatch(regex3, input);\n+        tb.checkEqual(expected3, output3);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8241187\/T8241187.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -186,0 +186,22 @@\n+    }\n+\n+    \/**\n+     * Filters a list of strings which don't match the given regular expression.\n+     * @param regex the regular expression\n+     * @param lines the strings to be filtered\n+     * @return the strings not matching the regular expression\n+     *\/\n+    public List<String> grepNotMatch(String regex, List<String> lines) {\n+        return grepNotMatch(Pattern.compile(regex), lines);\n+    }\n+\n+    \/**\n+     * Filters a list of strings which don't match the given regular expression.\n+     * @param pattern the regular expression\n+     * @param lines the strings to be filtered\n+     * @return the strings not matching the regular expression\n+     *\/\n+    public List<String> grepNotMatch(Pattern pattern, List<String> lines) {\n+        return lines.stream()\n+                .filter(s -> !pattern.matcher(s).find())\n+                .collect(Collectors.toList());\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}