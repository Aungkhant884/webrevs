{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -540,1 +540,10 @@\n-                return digAlg + \"with\" + keyAlg;\n+                String sigAlg = digAlg + \"with\" + keyAlg;\n+                try {\n+                    Signature.getInstance(sigAlg);\n+                    return sigAlg;\n+                } catch (NoSuchAlgorithmException e) {\n+                    \/\/ Possibly an unknown modern signature algorithm,\n+                    \/\/ in this case, encAlg should already be a signature\n+                    \/\/ algorithm.\n+                    return encAlg;\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8299746\n+ * @summary Accept unknown signatureAlgorithm in PKCS7 SignerInfo\n+ * @modules java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.x509\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.pkcs.SignerInfo;\n+import sun.security.x509.AlgorithmId;\n+\n+public class NewSigAlg {\n+    public static void main(String[] args) throws Exception {\n+        test(\"SHA-1\", \"RSA\", \"SHA1withRSA\");\n+        test(\"SHA-1\", \"SHA1withRSA\", \"SHA1withRSA\");\n+        test(\"SHA-1\", \"SHA256withRSA\", \"SHA1withRSA\");\n+        \/\/ Sorry I have to use something that has an OID but not known\n+        \/\/ as a signature algorithm.\n+        test(\"SHA-1\", \"PBES2\", \"PBES2\");\n+    }\n+\n+    static void test(String d, String e, String s) throws Exception {\n+        Asserts.assertEQ(s, SignerInfo.makeSigAlg(\n+                AlgorithmId.get(d), AlgorithmId.get(s), false));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs7\/NewSigAlg.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}