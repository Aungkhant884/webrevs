{"files":[{"patch":"@@ -56,0 +56,2 @@\n+import jdk.test.lib.util.ForceGC;\n+\n@@ -113,1 +115,1 @@\n-        WeakReference<Object> wCanary[] = new WeakReference[LOADER_COUNT];\n+        final WeakReference<Object> wCanary[] = new WeakReference[LOADER_COUNT];\n@@ -163,8 +165,7 @@\n-        \/\/ Wait for the canary for each of the libraries to be GC'd\n-        \/\/ before exiting the test.\n-        for (int i = 0; i < LOADER_COUNT; i++) {\n-            System.gc();\n-            var res = refQueue.remove(Utils.adjustTimeout(30 * 1000L));\n-            System.out.println(i + \" dequeued: \" + res);\n-            if (res == null) {\n-                Asserts.fail(\"Too few cleared WeakReferences\");\n+\n+        \/\/ Wait for the canary for each of the libraries to be GC'd (cleared)\n+        boolean allClear = ForceGC.wait(() -> {\n+            for (int i = 0; i < wCanary.length; i++) {\n+                if (!wCanary[i].refersTo(null)) {\n+                    return false;\n+                }\n@@ -172,1 +173,4 @@\n-        }\n+            return true;\n+        });\n+        Asserts.assertTrue(allClear, \"Not all WeakReferences cleared\");\n+\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/LoadLibraryUnload.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @bug 8266310 8289919\n+ * @bug 8266310 8289919 8293282\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/native -Xcheck:jni LoadLibraryUnloadTest\n+ * @run main\/othervm\/native LoadLibraryUnloadTest\n@@ -42,1 +42,1 @@\n-import jdk.test.lib.process.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -53,1 +53,0 @@\n-    private static String classPathSeparator = System.getProperty(\"path.separator\");\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/LoadLibraryUnloadTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}