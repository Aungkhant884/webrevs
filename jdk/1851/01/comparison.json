{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,2 +161,10 @@\n-  G1ThreadLocalData::satb_mark_queue(thread).flush();\n-  G1ThreadLocalData::dirty_card_queue(thread).on_thread_detach();\n+  {\n+    SATBMarkQueue& queue = G1ThreadLocalData::satb_mark_queue(thread);\n+    G1BarrierSet::satb_mark_queue_set().flush_queue(queue);\n+  }\n+  {\n+    G1DirtyCardQueue& queue = G1ThreadLocalData::dirty_card_queue(thread);\n+    G1DirtyCardQueueSet& qset = G1BarrierSet::dirty_card_queue_set();\n+    qset.flush_queue(queue);\n+    qset.record_detached_refinement_stats(queue.refinement_stats());\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-  flush();\n+  G1BarrierSet::dirty_card_queue_set().flush_queue(*this);\n@@ -62,11 +62,0 @@\n-void G1DirtyCardQueue::flush() {\n-  _refinement_stats->inc_dirtied_cards(size());\n-  flush_impl();\n-}\n-\n-void G1DirtyCardQueue::on_thread_detach() {\n-  assert(this == &G1ThreadLocalData::dirty_card_queue(Thread::current()), \"precondition\");\n-  flush();\n-  dirty_card_qset()->record_detached_refinement_stats(_refinement_stats);\n-}\n-\n@@ -98,0 +87,8 @@\n+void G1DirtyCardQueueSet::flush_queue(G1DirtyCardQueue& queue) {\n+  if (queue.buffer() != nullptr) {\n+    G1ConcurrentRefineStats* stats = queue.refinement_stats();\n+    stats->inc_dirtied_cards(buffer_size() - queue.index());\n+  }\n+  PtrQueueSet::flush_queue(queue);\n+}\n+\n@@ -648,0 +645,2 @@\n+    G1DirtyCardQueueSet& _qset;\n+    ConcatenateThreadLogClosure(G1DirtyCardQueueSet& qset) : _qset(qset) {}\n@@ -649,3 +648,4 @@\n-      G1DirtyCardQueue& dcq = G1ThreadLocalData::dirty_card_queue(t);\n-      if (!dcq.is_empty()) {\n-        dcq.flush();\n+      G1DirtyCardQueue& queue = G1ThreadLocalData::dirty_card_queue(t);\n+      if ((queue.buffer() != nullptr) &&\n+          (queue.index() != _qset.buffer_size())) {\n+        _qset.flush_queue(queue);\n@@ -654,1 +654,1 @@\n-  } closure;\n+  } closure(*this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,3 +52,0 @@\n-  \/\/ Process queue entries and release resources.\n-  void flush();\n-\n@@ -61,4 +58,0 @@\n-  \/\/ To be called by the barrier set's on_thread_detach, to notify this\n-  \/\/ object of the corresponding state change of its owning thread.\n-  void on_thread_detach();\n-\n@@ -316,0 +309,2 @@\n+  void flush_queue(G1DirtyCardQueue& queue);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,1 +222,1 @@\n-    _rdcq.flush();\n+    _rdc_local_qset.flush_queue(_rdcq);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-  _rdcq.flush();\n+  _rdc_local_qset.flush_queue(_rdcq);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,4 @@\n+void G1RedirtyCardsLocalQueueSet::flush_queue(G1RedirtyCardsQueue& queue) {\n+  PtrQueueSet::flush_queue(queue);\n+}\n+\n@@ -79,1 +83,1 @@\n-  assert(is_empty(), \"unflushed queue\");\n+  assert(buffer() == nullptr, \"unflushed queue\");\n@@ -83,4 +87,0 @@\n-void G1RedirtyCardsQueue::flush() {\n-  flush_impl();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+\n+  void flush_queue(G1RedirtyCardsQueue& queue);\n@@ -60,3 +62,0 @@\n-\n-  \/\/ Flushes all enqueued cards to qset.\n-  void flush();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,26 +49,0 @@\n-void PtrQueue::flush_impl() {\n-  if (_buf != NULL) {\n-    BufferNode* node = BufferNode::make_node_from_buffer(_buf, index());\n-    if (is_empty()) {\n-      \/\/ No work to do.\n-      qset()->deallocate_buffer(node);\n-    } else {\n-      qset()->enqueue_completed_buffer(node);\n-    }\n-    _buf = NULL;\n-    set_index(0);\n-  }\n-}\n-\n-void PtrQueue::allocate_buffer() {\n-  _buf = qset()->allocate_buffer();\n-  reset();\n-}\n-\n-void PtrQueue::enqueue_completed_buffer() {\n-  assert(_buf != NULL, \"precondition\");\n-  BufferNode* node = BufferNode::make_node_from_buffer(_buf, index());\n-  qset()->enqueue_completed_buffer(node);\n-  allocate_buffer();\n-}\n-\n@@ -228,0 +202,15 @@\n+void PtrQueueSet::flush_queue(PtrQueue& queue) {\n+  void** buffer = queue.buffer();\n+  if (buffer != nullptr) {\n+    size_t index = queue.index();\n+    queue.set_buffer(nullptr);\n+    queue.set_index(0);\n+    BufferNode* node = BufferNode::make_node_from_buffer(buffer, index);\n+    if (index == buffer_size()) {\n+      deallocate_buffer(node);\n+    } else {\n+      enqueue_completed_buffer(node);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":16,"deletions":27,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,8 +82,0 @@\n-  \/\/ Process queue entries and release resources.\n-  void flush_impl();\n-\n-  void allocate_buffer();\n-\n-  \/\/ Enqueue the current buffer in the qset and allocate a new buffer.\n-  void enqueue_completed_buffer();\n-\n@@ -271,0 +263,4 @@\n+  \/\/ If queue has any buffered enqueued data, transfer it to this qset.\n+  \/\/ Otherwise, deallocate queue's buffer.\n+  void flush_queue(PtrQueue& queue);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,7 +50,0 @@\n-void SATBMarkQueue::flush() {\n-  \/\/ Filter now to possibly save work later.  If filtering empties the\n-  \/\/ buffer then flush_impl can deallocate the buffer.\n-  filter();\n-  flush_impl();\n-}\n-\n@@ -238,0 +231,7 @@\n+void SATBMarkQueueSet::flush_queue(SATBMarkQueue& queue) {\n+  \/\/ Filter now to possibly save work later.  If filtering empties the\n+  \/\/ buffer then flush_queue can deallocate the buffer.\n+  filter(queue);\n+  PtrQueueSet::flush_queue(queue);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,3 +66,0 @@\n-  \/\/ Process queue entries and free resources.\n-  void flush();\n-\n@@ -153,0 +150,2 @@\n+  void flush_queue(SATBMarkQueue& queue);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n@@ -119,1 +119,1 @@\n-  queue.flush();\n+  _satb_mark_queue_set.flush_queue(queue);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}