{"files":[{"patch":"@@ -419,1 +419,1 @@\n-  oop shared_strings_array = JavaClassFile::StringTable::init_shared_table(_dumped_interned_strings);\n+  oop shared_strings_array = StringTable::init_shared_table(_dumped_interned_strings);\n@@ -425,1 +425,1 @@\n-  JavaClassFile::StringTable::set_shared_strings_array_index(append_root(shared_strings_array));\n+  StringTable::set_shared_strings_array_index(append_root(shared_strings_array));\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-      oop str = JavaClassFile::StringTable::intern(utf8_buffer, THREAD);\n+      oop str = StringTable::intern(utf8_buffer, THREAD);\n@@ -378,1 +378,1 @@\n-  JavaClassFile::StringTable::serialize_shared_table_header(soc);\n+  StringTable::serialize_shared_table_header(soc);\n@@ -781,1 +781,1 @@\n-  JavaClassFile::StringTable::allocate_shared_strings_array(CHECK);\n+  StringTable::allocate_shared_strings_array(CHECK);\n@@ -1503,2 +1503,1 @@\n-    tty->print_cr(\"Number of shared strings: %zu\",\n-                  JavaClassFile::StringTable::shared_entry_count());\n+    tty->print_cr(\"Number of shared strings: %zu\", StringTable::shared_entry_count());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1241,2 +1241,1 @@\n-    o = JavaClassFile::StringTable::intern(as_external_name(java_class()),\n-                                           THREAD);\n+    o = StringTable::intern(as_external_name(java_class()), THREAD);\n@@ -2878,1 +2877,1 @@\n-  oop methodname = JavaClassFile::StringTable::intern(name, CHECK);\n+  oop methodname = StringTable::intern(name, CHECK);\n@@ -2884,1 +2883,1 @@\n-    oop module_name = JavaClassFile::StringTable::intern(module->name(), CHECK);\n+    oop module_name = StringTable::intern(module->name(), CHECK);\n@@ -2888,1 +2887,1 @@\n-      module_version = JavaClassFile::StringTable::intern(module->version(), CHECK);\n+      module_version = StringTable::intern(module->version(), CHECK);\n@@ -2925,1 +2924,1 @@\n-      source_file = JavaClassFile::StringTable::intern(source, CHECK);\n+      source_file = StringTable::intern(source, CHECK);\n@@ -3396,1 +3395,1 @@\n-  oop component_name = JavaClassFile::StringTable::intern(name, CHECK_NULL);\n+  oop component_name = StringTable::intern(name, CHECK_NULL);\n@@ -3426,1 +3425,1 @@\n-    oop component_sig = JavaClassFile::StringTable::intern(sig, CHECK_NULL);\n+    oop component_sig = StringTable::intern(sig, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-namespace JavaClassFile {\n+namespace hotspot_jvm {\n@@ -769,1 +769,1 @@\n-} \/\/ namespace JavaClassFile\n+} \/\/ namespace hotspot_jvm\n@@ -785,1 +785,1 @@\n-namespace JavaClassFile {\n+namespace hotspot_jvm {\n@@ -945,1 +945,1 @@\n-} \/\/ namespace JavaClassFile\n+} \/\/ namespace hotspot_jvm\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-namespace JavaClassFile {\n+namespace hotspot_jvm {\n@@ -163,1 +163,1 @@\n-} \/\/ namespace JavaClassFile\n+} \/\/ namespace hotspot_jvm\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2061,1 +2061,1 @@\n-  oop name_oop = JavaClassFile::StringTable::intern(name, CHECK_NULL);\n+  oop name_oop = StringTable::intern(name, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-    oop found = JavaClassFile::StringTable::lookup_shared(chars, length >> 1);\n+    oop found = StringTable::lookup_shared(chars, length >> 1);\n@@ -556,1 +556,1 @@\n-  oop found = JavaClassFile::StringTable::lookup_shared(chars, length);\n+  oop found = StringTable::lookup_shared(chars, length);\n@@ -613,1 +613,1 @@\n-  if ((JavaClassFile::StringTable::shared_entry_count() > 0) &&\n+  if ((StringTable::shared_entry_count() > 0) &&\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -641,1 +641,1 @@\n-  TableStatistics statistics = JavaClassFile::StringTable::get_table_statistics();\n+  TableStatistics statistics = StringTable::get_table_statistics();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1979,1 +1979,1 @@\n-  return (JavaClassFile::StringTable::lookup(name, len) != nullptr);\n+  return (StringTable::lookup(name, len) != nullptr);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1091,1 +1091,1 @@\n-    oop declaring_class = JavaClassFile::StringTable::intern((char*) declaring_class_str, CHECK_(JVMCIObject()));\n+    oop declaring_class = StringTable::intern((char*) declaring_class_str, CHECK_(JVMCIObject()));\n@@ -1094,1 +1094,1 @@\n-    oop method_name = JavaClassFile::StringTable::intern(method_name_sym, CHECK_(JVMCIObject()));\n+    oop method_name = StringTable::intern(method_name_sym, CHECK_(JVMCIObject()));\n@@ -1098,1 +1098,1 @@\n-      oop file_name = JavaClassFile::StringTable::intern(file_name_sym, CHECK_(JVMCIObject()));\n+      oop file_name = StringTable::intern(file_name_sym, CHECK_(JVMCIObject()));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-    oop s = JavaClassFile::StringTable::intern(\"null\", CHECK);\n+    oop s = StringTable::intern(\"null\", CHECK);\n@@ -361,1 +361,1 @@\n-    s = JavaClassFile::StringTable::intern(\"-2147483648\", CHECK);\n+    s = StringTable::intern(\"-2147483648\", CHECK);\n@@ -831,1 +831,1 @@\n-  JavaClassFile::StringTable::create_table();\n+  StringTable::create_table();\n@@ -1158,1 +1158,1 @@\n-    JavaClassFile::StringTable::verify();\n+    StringTable::verify();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1204,1 +1204,1 @@\n-  oop str = JavaClassFile::StringTable::intern(sym, CHECK_(nullptr));\n+  oop str = StringTable::intern(sym, CHECK_(nullptr));\n@@ -1252,1 +1252,1 @@\n-  str = JavaClassFile::StringTable::intern(sym, CHECK_(nullptr));\n+  str = StringTable::intern(sym, CHECK_(nullptr));\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,6 @@\n+\/\/ The hotspot_jvm namespace using directive must be placed outside\n+\/\/ #ifndef DONT_USE_PRECOMPILED_HEADER. That ensures it works with and\n+\/\/ without precompiled headers.\n+namespace hotspot_jvm {}\n+using namespace hotspot_jvm;\n+\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3474,1 +3474,1 @@\n-  oop result = JavaClassFile::StringTable::intern(string, CHECK_NULL);\n+  oop result = StringTable::intern(string, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -662,1 +662,1 @@\n-  return JavaClassFile::StringTable::lookup(s);\n+  return StringTable::lookup(s);\n@@ -893,1 +893,1 @@\n-        oop name = JavaClassFile::StringTable::intern(m->name(), CHECK);\n+        oop name = StringTable::intern(m->name(), CHECK);\n@@ -917,1 +917,1 @@\n-        oop name = JavaClassFile::StringTable::intern(fd.name(), CHECK);\n+        oop name = StringTable::intern(fd.name(), CHECK);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1448,1 +1448,1 @@\n-  return (JavaClassFile::StringTable::lookup(name, len) != nullptr);\n+  return (StringTable::lookup(name, len) != nullptr);\n@@ -2057,1 +2057,1 @@\n-  return JavaClassFile::StringTable::lookup_shared(chars, length) == str_oop;\n+  return StringTable::lookup_shared(chars, length) == str_oop;\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-      JavaClassFile::StringTable::dump(tty);\n+      StringTable::dump(tty);\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-    size_t fail_cnt = JavaClassFile::StringTable::verify_and_compare_entries();\n+    size_t fail_cnt = StringTable::verify_and_compare_entries();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -794,1 +794,1 @@\n-  oop name_oop = JavaClassFile::StringTable::intern(method_name, CHECK_NULL);\n+  oop name_oop = StringTable::intern(method_name, CHECK_NULL);\n@@ -864,1 +864,1 @@\n-  oop name_oop = JavaClassFile::StringTable::intern(field_name, CHECK_NULL);\n+  oop name_oop = StringTable::intern(field_name, CHECK_NULL);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -517,1 +517,1 @@\n-  if (JavaClassFile::StringTable::needs_rehashing()) return true;\n+  if (StringTable::needs_rehashing()) return true;\n@@ -557,1 +557,1 @@\n-    if (JavaClassFile::StringTable::rehash_table_expects_safepoint_rehashing()) {\n+    if (StringTable::rehash_table_expects_safepoint_rehashing()) {\n@@ -582,1 +582,1 @@\n-      if (JavaClassFile::StringTable::needs_rehashing()) {\n+      if (StringTable::needs_rehashing()) {\n@@ -584,1 +584,1 @@\n-        JavaClassFile::StringTable::rehash_table();\n+        StringTable::rehash_table();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-              (stringtable_work = JavaClassFile::StringTable::has_work()) |\n+              (stringtable_work = StringTable::has_work()) |\n@@ -141,1 +141,1 @@\n-      JavaClassFile::StringTable::do_concurrent_work(jt);\n+      StringTable::do_concurrent_work(jt);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -782,1 +782,1 @@\n-      JavaClassFile::StringTable::dump(_out, _verbose);\n+      StringTable::dump(_out, _verbose);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}