{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include <assert.h>\n@@ -28,1 +29,1 @@\n-#include <assert.h>\n+#include <string.h>\n@@ -30,0 +31,3 @@\n+#include \"check_classname.h\"\n+#include \"java_lang_ClassLoader.h\"\n+#include \"jlong.h\"\n@@ -32,1 +36,0 @@\n-#include \"jlong.h\"\n@@ -34,3 +37,0 @@\n-#include \"check_classname.h\"\n-#include \"java_lang_ClassLoader.h\"\n-#include <string.h>\n@@ -49,14 +49,0 @@\n-\/*\n- *\n- *\/\n-static void\n-set_classloader_malloc_error(JNIEnv *env)\n-{\n-    if (errno == ENOMEM) {\n-        JNU_ThrowOutOfMemoryError(env, 0);\n-    } else {\n-        JNU_ThrowByName(env, \"java\/lang\/ClassFormatError\", \"ClassLoader internal allocation failure\");\n-    }\n-}\n-\n-\n@@ -75,1 +61,1 @@\n-            set_classloader_malloc_error(env);\n+            JNU_ThrowOutOfMemoryError(env, NULL);\n@@ -117,1 +103,4 @@\n-    body = (jbyte *)malloc(length);\n+    \/\/ On malloc(0), implementators of malloc(3) have the choice to return either\n+    \/\/ NULL or a unique non-NULL pointer. To unify libc behavior across our platforms\n+    \/\/ we chose the latter. (see 8283225)\n+    body = (jbyte *)malloc(length < 1 ? 1 : length);\n@@ -120,1 +109,1 @@\n-        set_classloader_malloc_error(env);\n+        JNU_ThrowOutOfMemoryError(env, 0);\n@@ -197,1 +186,1 @@\n-            set_classloader_malloc_error(env);\n+            JNU_ThrowOutOfMemoryError(env, NULL);\n@@ -208,1 +197,1 @@\n-            set_classloader_malloc_error(env);\n+            JNU_ThrowOutOfMemoryError(env, NULL);\n@@ -258,1 +247,4 @@\n-    body = (jbyte *)malloc(length);\n+    \/\/ On malloc(0), implementators of malloc(3) have the choice to return either\n+    \/\/ NULL or a unique non-NULL pointer. To unify libc behavior across our platforms\n+    \/\/ we chose the latter. (see 8283225)\n+    body = (jbyte *)malloc(length < 1 ? 1 : length);\n@@ -261,1 +253,1 @@\n-        set_classloader_malloc_error(env);\n+        JNU_ThrowOutOfMemoryError(env, 0);\n@@ -307,1 +299,1 @@\n-        set_classloader_malloc_error(env);\n+        JNU_ThrowOutOfMemoryError(env, NULL);\n","filename":"src\/java.base\/share\/native\/libjava\/ClassLoader.c","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -83,4 +83,1 @@\n-            String emsg = cfe.getMessage();\n-            if (!emsg.contains(\"Truncated class file\") &&\n-                !emsg.contains(\"ClassLoader internal allocation failure\"))\n-            {\n+            if (!cfe.getMessage().contains(\"Truncated class file\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/DefineClass\/NullClassBytesTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}