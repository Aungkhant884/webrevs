{"files":[{"patch":"@@ -241,1 +241,2 @@\n-                fail(\"either referent is cleared and we got notified, or neither of this happened\");\n+                fail(\"either referent is cleared and we got notified, or neither of this happened: referent: \"\n+                     + obj4 + \", notified: \" + (testWeak == null));\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersTo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires vm.gc != \"Epsilon\"\n@@ -39,1 +38,0 @@\n-import java.lang.ref.PhantomReference;\n@@ -41,1 +39,0 @@\n-import java.lang.ref.ReferenceQueue;\n@@ -48,2 +45,1 @@\n-    private static final class TestObject {\n-        public final int value;\n+    private static volatile Object testObject = null;\n@@ -51,11 +47,1 @@\n-        public TestObject(int value) {\n-            this.value = value;\n-        }\n-    }\n-\n-    private static volatile TestObject testObjectNone = null;\n-    private static volatile TestObject testObject = null;\n-\n-    private static ReferenceQueue<TestObject> queue = null;\n-\n-    private static WeakReference<TestObject> testWeak = null;\n+    private static WeakReference<Object> testWeak = null;\n@@ -64,6 +50,2 @@\n-        testObjectNone = new TestObject(0);\n-        testObject = new TestObject(4);\n-\n-        queue = new ReferenceQueue<TestObject>();\n-\n-        testWeak = new WeakReference<TestObject>(testObject, queue);\n+        testObject = new Object();\n+        testWeak = new WeakReference<Object>(testObject);\n@@ -82,1 +64,0 @@\n-        gcUntilOld(testObjectNone);\n@@ -84,1 +65,0 @@\n-\n@@ -88,4 +68,0 @@\n-    private static void progress(String msg) {\n-        System.out.println(msg);\n-    }\n-\n@@ -96,9 +72,1 @@\n-    private static void expectCleared(Reference<TestObject> ref,\n-                                      String which) throws Exception {\n-        expectNotValue(ref, testObjectNone, which);\n-        if (!ref.refersTo(null)) {\n-            fail(\"expected \" + which + \" to be cleared\");\n-        }\n-    }\n-\n-    private static void expectNotCleared(Reference<TestObject> ref,\n+    private static void expectNotCleared(Reference<Object> ref,\n@@ -106,1 +74,0 @@\n-        expectNotValue(ref, testObjectNone, which);\n@@ -112,2 +79,2 @@\n-    private static void expectValue(Reference<TestObject> ref,\n-                                    TestObject value,\n+    private static void expectValue(Reference<Object> ref,\n+                                    Object value,\n@@ -115,1 +82,0 @@\n-        expectNotValue(ref, testObjectNone, which);\n@@ -122,8 +88,0 @@\n-    private static void expectNotValue(Reference<TestObject> ref,\n-                                       TestObject value,\n-                                       String which) throws Exception {\n-        if (ref.refersTo(value)) {\n-            fail(which + \" refers to unexpected value\");\n-        }\n-    }\n-\n@@ -139,1 +97,0 @@\n-        progress(\"setup concurrent collection test\");\n@@ -141,1 +98,0 @@\n-        progress(\"gcUntilOld\");\n@@ -144,1 +100,0 @@\n-        progress(\"acquire control of concurrent cycles\");\n@@ -147,1 +102,0 @@\n-            progress(\"check initial states\");\n@@ -150,1 +104,0 @@\n-            progress(\"discard strong references\");\n@@ -153,1 +106,0 @@\n-            progress(\"run GC to before marking completed\");\n@@ -156,2 +108,2 @@\n-            progress(\"fetch test objects, possibly keeping some alive\");\n-            \/\/ For some collectors, calling get() will keep testObject alive.\n+            \/\/ For most collectors - the configurations tested here -,\n+            \/\/ calling get() will keep testObject alive.\n@@ -162,1 +114,0 @@\n-            progress(\"finish collection\");\n@@ -165,1 +116,0 @@\n-            progress(\"verify expected clears\");\n@@ -167,27 +117,0 @@\n-\n-            progress(\"verify get returns expected values\");\n-            TestObject obj = testWeak.get();\n-            if (obj == null) {\n-                fail(\"testWeak.get() returned null\");\n-            } else if (obj.value != 4) {\n-                fail(\"testWeak.get().value is \" + obj.value);\n-            }\n-\n-            progress(\"verify queue entries\");\n-            long timeout = 60000; \/\/ 1 minute of milliseconds.\n-            while (true) {\n-                Reference<? extends TestObject> ref = queue.remove(timeout);\n-                if (ref == null) {\n-                    break;\n-                } else if (ref == testWeak) {\n-                    testWeak = null;\n-                } else {\n-                    fail(\"unexpected reference in queue\");\n-                }\n-            }\n-            if (testWeak == null) {\n-                if (obj != null) {\n-                    fail(\"testWeak notified\");\n-                }\n-            }\n-\n@@ -195,1 +118,0 @@\n-            progress(\"release control of concurrent cycles\");\n@@ -198,1 +120,0 @@\n-        progress(\"finished concurrent collection test\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersToDuringConcMark.java","additions":9,"deletions":88,"binary":false,"changes":97,"status":"modified"}]}