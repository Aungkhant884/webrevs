{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -200,2 +200,0 @@\n-            \/\/ This is true for all currently supported concurrent collectors.\n-            expectNotCleared(testWeak4, \"testWeak4\");\n@@ -216,5 +214,0 @@\n-            if (obj4 == null) {\n-                fail(\"testWeak4.get() returned null\");\n-            } else if (obj4.value != 4) {\n-                fail(\"testWeak4.get().value is \" + obj4.value);\n-            }\n@@ -246,4 +239,4 @@\n-            } else if (testWeak4 == null) {\n-                if (obj4 != null) {\n-                    fail(\"testWeak4 notified\");\n-                }\n+            }\n+            if ((testWeak4 == null) != (obj4 == null)) {\n+                fail(\"either referent is cleared and we got notified, or neither of this happened: referent: \"\n+                     + obj4 + \", notified: \" + (testWeak4 == null));\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersTo.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc;\n+\n+\/* @test\n+ * @requires vm.gc != \"Shenandoah\" | vm.opt.ShenandoahGCMode != \"iu\"\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @modules java.base\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      gc.TestReferenceRefersToDuringConcMark\n+ *\/\n+\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import sun.hotspot.WhiteBox;\n+\n+public class TestReferenceRefersToDuringConcMark {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private static volatile Object testObject = null;\n+\n+    private static WeakReference<Object> testWeak = null;\n+\n+    private static void setup() {\n+        testObject = new Object();\n+        testWeak = new WeakReference<Object>(testObject);\n+    }\n+\n+    private static void gcUntilOld(Object o) throws Exception {\n+        if (!WB.isObjectInOldGen(o)) {\n+            WB.fullGC();\n+            if (!WB.isObjectInOldGen(o)) {\n+                fail(\"object not promoted by full gc\");\n+            }\n+        }\n+    }\n+\n+    private static void gcUntilOld() throws Exception {\n+        gcUntilOld(testObject);\n+        gcUntilOld(testWeak);\n+    }\n+\n+    private static void fail(String msg) throws Exception {\n+        throw new RuntimeException(msg);\n+    }\n+\n+    private static void expectNotCleared(Reference<Object> ref,\n+                                         String which) throws Exception {\n+        if (ref.refersTo(null)) {\n+            fail(\"expected \" + which + \" to not be cleared\");\n+        }\n+    }\n+\n+    private static void expectValue(Reference<Object> ref,\n+                                    Object value,\n+                                    String which) throws Exception {\n+        expectNotCleared(ref, which);\n+        if (!ref.refersTo(value)) {\n+            fail(which + \" doesn't refer to expected value\");\n+        }\n+    }\n+\n+    private static void checkInitialStates() throws Exception {\n+        expectValue(testWeak, testObject, \"testWeak\");\n+    }\n+\n+    private static void discardStrongReferences() {\n+        testObject = null;\n+    }\n+\n+    private static void testConcurrentCollection() throws Exception {\n+        setup();\n+        gcUntilOld();\n+\n+        WB.concurrentGCAcquireControl();\n+        try {\n+            checkInitialStates();\n+\n+            discardStrongReferences();\n+\n+            WB.concurrentGCRunTo(WB.BEFORE_MARKING_COMPLETED);\n+\n+            \/\/ For most collectors - the configurations tested here -,\n+            \/\/ calling get() will keep testObject alive.\n+            if (testWeak.get() == null) {\n+                fail(\"testWeak unexpectedly == null\");\n+            }\n+\n+            WB.concurrentGCRunToIdle();\n+\n+            expectNotCleared(testWeak, \"testWeak\");\n+        } finally {\n+            WB.concurrentGCReleaseControl();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (WB.supportsConcurrentGCBreakpoints()) {\n+            testConcurrentCollection();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersToDuringConcMark.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}