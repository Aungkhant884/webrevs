{"files":[{"patch":"@@ -165,0 +165,4 @@\n+    private static boolean isShenandoahIUMode() {\n+        return WB.getBooleanVMFlag(\"UseShenandoahGC\") && \"iu\".equals(WB.getStringVMFlag(\"ShenandoahGCMode\"));\n+    }\n+\n@@ -200,2 +204,8 @@\n-            \/\/ This is true for all currently supported concurrent collectors.\n-            expectNotCleared(testWeak4, \"testWeak4\");\n+            \/\/ This is true for all currently supported concurrent collectors,\n+            \/\/ except Shenandoah+IU, which allows clearing refs even when\n+            \/\/ accessed during concurrent marking.\n+            if (isShenandoahIUMode()) {\n+              expectCleared(testWeak4, \"testWeak4\");\n+            } else {\n+              expectNotCleared(testWeak4, \"testWeak4\");\n+            }\n@@ -216,4 +226,6 @@\n-            if (obj4 == null) {\n-                fail(\"testWeak4.get() returned null\");\n-            } else if (obj4.value != 4) {\n-                fail(\"testWeak4.get().value is \" + obj4.value);\n+            if (!isShenandoahIUMode()) {\n+                if (obj4 == null) {\n+                    fail(\"testWeak4.get() returned null\");\n+                } else if (obj4.value != 4) {\n+                    fail(\"testWeak4.get().value is \" + obj4.value);\n+                }\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceRefersTo.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}