{"files":[{"patch":"@@ -203,1 +203,11 @@\n-address AbstractInterpreter::get_trampoline_code_buffer(AbstractInterpreter::MethodKind kind) {\n+\/\/ For a shared Method m, to improve sharing across processes, we avoid writing to m->_i2i_entry\n+\/\/ at runtime. Instead, m->_i2i_entry points to a fixed location inside the CDS archive.\n+\/\/ This location contains a trampoline (generated by generate_entry_for_cds_method)\n+\/\/ which jumps to _entry_table[kind].\n+address AbstractInterpreter::entry_for_cds_method(const methodHandle& m) {\n+  MethodKind kind = method_kind(m);\n+  assert(0 <= kind && kind < number_of_method_entries, \"illegal kind\");\n+  return entry_for_cds_method(kind);\n+}\n+\n+address AbstractInterpreter::entry_for_cds_method(AbstractInterpreter::MethodKind kind) {\n@@ -205,1 +215,1 @@\n-  address addr = MetaspaceShared::i2i_entry_code_buffers((size_t)(AbstractInterpreter::number_of_method_entries) * trampoline_size);\n+  address addr = MetaspaceShared::i2i_entry_code_buffers();\n@@ -211,5 +221,3 @@\n-void AbstractInterpreter::update_cds_entry_table(AbstractInterpreter::MethodKind kind) {\n-  if (DumpSharedSpaces || UseSharedSpaces) {\n-    address trampoline = get_trampoline_code_buffer(kind);\n-    _cds_entry_table[kind] = trampoline;\n-\n+void AbstractInterpreter::generate_entry_for_cds_method(AbstractInterpreter::MethodKind kind) {\n+  if (UseSharedSpaces) {\n+    address trampoline = entry_for_cds_method(kind);\n@@ -235,1 +243,1 @@\n-  update_cds_entry_table(kind);\n+  generate_entry_for_cds_method(kind);\n@@ -471,1 +479,1 @@\n-    Interpreter::update_cds_entry_table(kind);\n+    Interpreter::generate_entry_for_cds_method(kind);\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -136,6 +136,0 @@\n-  static address entry_for_cds_method(const methodHandle& m) {\n-    MethodKind k = method_kind(m);\n-    assert(0 <= k && k < number_of_method_entries, \"illegal kind\");\n-    return _cds_entry_table[k];\n-  }\n-\n@@ -143,3 +137,3 @@\n-  static void       update_cds_entry_table(MethodKind kind) NOT_CDS_RETURN;\n-\n-  static address    get_trampoline_code_buffer(AbstractInterpreter::MethodKind kind) NOT_CDS_RETURN_(0);\n+  static address    entry_for_cds_method(const methodHandle& m) NOT_CDS_RETURN_(NULL);\n+  static address    entry_for_cds_method(AbstractInterpreter::MethodKind kind) NOT_CDS_RETURN_(NULL);\n+  static void       generate_entry_for_cds_method(MethodKind kind) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    Interpreter::update_cds_entry_table(Interpreter::kind); \\\n+    Interpreter::generate_entry_for_cds_method(Interpreter::kind); \\\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -284,2 +284,0 @@\n-    allocate_method_trampoline_info();\n-    allocate_method_trampolines();\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -280,1 +280,0 @@\n-  st->print_cr(\"- i2i_entry_code_buffers_size:    \" SIZE_FORMAT, _i2i_entry_code_buffers_size);\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -205,1 +205,0 @@\n-  size_t  _i2i_entry_code_buffers_size;\n@@ -273,1 +272,0 @@\n-  size_t i2i_entry_code_buffers_size()     const { return _i2i_entry_code_buffers_size; }\n@@ -298,1 +296,1 @@\n-  void set_i2i_entry_code_buffers(address p, size_t s) {\n+  void set_i2i_entry_code_buffers(address p) {\n@@ -300,1 +298,0 @@\n-    _i2i_entry_code_buffers_size = s;\n@@ -417,3 +414,2 @@\n-  size_t i2i_entry_code_buffers_size()        const { return header()->i2i_entry_code_buffers_size(); }\n-  void set_i2i_entry_code_buffers(address addr, size_t s) const {\n-    header()->set_i2i_entry_code_buffers(addr, s);\n+  void set_i2i_entry_code_buffers(address addr) const {\n+    header()->set_i2i_entry_code_buffers(addr);\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"interpreter\/abstractInterpreter.hpp\"\n@@ -64,0 +65,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -85,1 +87,0 @@\n-size_t MetaspaceShared::_i2i_entry_code_buffers_size = 0;\n@@ -342,4 +343,0 @@\n-  \/\/ We don't want any valid object to be at the very bottom of the archive.\n-  \/\/ See ArchivePtrMarker::mark_pointer().\n-  MetaspaceShared::misc_code_space_alloc(16);\n-\n@@ -513,11 +510,4 @@\n-address MetaspaceShared::i2i_entry_code_buffers(size_t total_size) {\n-  if (DumpSharedSpaces) {\n-    if (_i2i_entry_code_buffers == NULL) {\n-      _i2i_entry_code_buffers = (address)misc_code_space_alloc(total_size);\n-      _i2i_entry_code_buffers_size = total_size;\n-    }\n-  } else if (UseSharedSpaces) {\n-    assert(_i2i_entry_code_buffers != NULL, \"must already been initialized\");\n-  } else {\n-    return NULL;\n-  }\n+void MetaspaceShared::init_misc_code_space() {\n+  \/\/ We don't want any valid object to be at the very bottom of the archive.\n+  \/\/ See ArchivePtrMarker::mark_pointer().\n+  MetaspaceShared::misc_code_space_alloc(16);\n@@ -525,1 +515,8 @@\n-  assert(_i2i_entry_code_buffers_size == total_size, \"must not change\");\n+  size_t trampoline_size = SharedRuntime::trampoline_size();\n+  size_t buf_size = (size_t)AbstractInterpreter::number_of_method_entries * trampoline_size;\n+  _i2i_entry_code_buffers = (address)misc_code_space_alloc(buf_size);\n+}\n+\n+address MetaspaceShared::i2i_entry_code_buffers() {\n+  assert(DumpSharedSpaces || UseSharedSpaces, \"must be\");\n+  assert(_i2i_entry_code_buffers != NULL, \"must already been initialized\");\n@@ -736,0 +733,4 @@\n+  MetaspaceShared::init_misc_code_space();\n+  builder.allocate_method_trampoline_info();\n+  builder.allocate_method_trampolines();\n+\n@@ -788,2 +789,0 @@\n-  memset(MetaspaceShared::i2i_entry_code_buffers(), 0,\n-         MetaspaceShared::i2i_entry_code_buffers_size());\n@@ -801,2 +800,1 @@\n-  mapinfo->set_i2i_entry_code_buffers(MetaspaceShared::i2i_entry_code_buffers(),\n-                                      MetaspaceShared::i2i_entry_code_buffers_size());\n+  mapinfo->set_i2i_entry_code_buffers(MetaspaceShared::i2i_entry_code_buffers());\n@@ -1725,1 +1723,0 @@\n-  _i2i_entry_code_buffers_size = static_mapinfo->i2i_entry_code_buffers_size();\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -79,1 +79,0 @@\n-  static size_t  _i2i_entry_code_buffers_size;\n@@ -240,1 +239,2 @@\n-  static address i2i_entry_code_buffers(size_t total_size);\n+  static void init_misc_code_space();\n+  static address i2i_entry_code_buffers();\n@@ -242,6 +242,0 @@\n-  static address i2i_entry_code_buffers() {\n-    return _i2i_entry_code_buffers;\n-  }\n-  static size_t i2i_entry_code_buffers_size() {\n-    return _i2i_entry_code_buffers_size;\n-  }\n@@ -249,1 +243,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"}]}