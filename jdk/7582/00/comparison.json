{"files":[{"patch":"@@ -205,1 +205,1 @@\n-    private void permits(AlgorithmParameters ap, ConstraintsParameters cp)\n+    public void permits(AlgorithmParameters ap, ConstraintsParameters cp)\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.security.spec.PSSParameterSpec;\n@@ -1024,0 +1025,2 @@\n+                            AlgorithmId encAlgId = si.getDigestEncryptionAlgorithmId();\n+                            AlgorithmParameters sigAlgParams = encAlgId.getParameters();\n@@ -1038,0 +1041,2 @@\n+                                AlgorithmId tsEncAlgId = tsSi.getDigestEncryptionAlgorithmId();\n+                                AlgorithmParameters tsSigAlgParams = tsEncAlgId.getParameters();\n@@ -1052,2 +1057,2 @@\n-                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp),\n-                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp, null),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp, sigAlgParams),\n@@ -1057,2 +1062,2 @@\n-                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcpts),\n-                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcpts),\n+                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcpts, null),\n+                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcpts, tsSigAlgParams),\n@@ -1066,2 +1071,2 @@\n-                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp),\n-                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp, null),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp, sigAlgParams),\n@@ -1396,1 +1401,1 @@\n-        boolean tsa, JarConstraintsParameters jcp) {\n+        boolean tsa, JarConstraintsParameters jcp, AlgorithmParameters algParams) {\n@@ -1404,0 +1409,9 @@\n+        if (algParams != null) {\n+            try {\n+                JAR_DISABLED_CHECK.permits(algParams, jcp);\n+            } catch (CertPathValidatorException e) {\n+                disabledAlgFound = true;\n+                return String.format(rb.getString(\"with.disabled\"), algParams);\n+            }\n+        }\n+\n@@ -1406,1 +1420,0 @@\n-            return alg;\n@@ -1422,0 +1435,11 @@\n+        if (algParams != null) {\n+            try {\n+                LEGACY_CHECK.permits(algParams, jcp);\n+                return alg;\n+            } catch (CertPathValidatorException e) {\n+                legacyAlg |= 2;\n+                legacySigAlg = alg;\n+                return String.format(rb.getString(\"with.weak\"), algParams);\n+            }\n+        }\n+        return alg;\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277474\n+ * @summary jarsigner -verify should check if the algorithm parameters of\n+ *          its signature algorithm use disabled or legacy algorithms\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.JarUtils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class CheckAlgParams {\n+    private static final String JAVA_SECURITY_FILE = \"java.security\";\n+\n+    public static void main(String[] args) throws Exception{\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg RSASSA-PSS -alias ca -dname CN=CA \" +\n+                \"-ext bc:c\")\n+                .shouldHaveExitValue(0);\n+\n+        JarUtils.createJarFile(Path.of(\"a.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \"-signedjar signeda.jar \" +\n+                \"-verbose\" +\n+                \" a.jar ca\")\n+                .shouldHaveExitValue(0);\n+\n+        Files.writeString(Files.createFile(Paths.get(JAVA_SECURITY_FILE)),\n+                \"jdk.jar.disabledAlgorithms=SHA256\\n\" +\n+                \"jdk.security.legacyAlgorithms=\\n\");\n+\n+        SecurityTools.jarsigner(\"-verify signeda.jar \" +\n+                \"-J-Djava.security.properties=\" +\n+                JAVA_SECURITY_FILE +\n+                \" -keystore ks -storepass changeit -verbose -debug\")\n+                .shouldMatch(\"Digest algorithm: SHA-256.*(disabled)\")\n+                .shouldMatch(\"Signature algorithm: PSSParameterSpec.*hashAlgorithm=SHA-256.*(disabled)\")\n+                .shouldContain(\"The jar will be treated as unsigned\")\n+                .shouldHaveExitValue(0);\n+\n+        Files.deleteIfExists(Paths.get(JAVA_SECURITY_FILE));\n+        Files.writeString(Files.createFile(Paths.get(JAVA_SECURITY_FILE)),\n+                \"jdk.jar.disabledAlgorithms=\\n\" +\n+                \"jdk.security.legacyAlgorithms=SHA256\\n\");\n+\n+        SecurityTools.jarsigner(\"-verify signeda.jar \" +\n+                \"-J-Djava.security.properties=\" +\n+                JAVA_SECURITY_FILE +\n+                \" -keystore ks -storepass changeit -verbose -debug\")\n+                .shouldMatch(\"Digest algorithm: SHA-256.*(weak)\")\n+                .shouldMatch(\"Signature algorithm: PSSParameterSpec.*hashAlgorithm=SHA-256.*(weak)\")\n+                .shouldNotContain(\"The jar will be treated as unsigned\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckAlgParams.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}