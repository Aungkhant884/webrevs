{"files":[{"patch":"@@ -206,1 +206,7 @@\n-                    || algid.equals(ed25519_oid)) {\n+                    || algid.equals(ed25519_oid)\n+                    || algid.equals(x448_oid)\n+                    || algid.equals(x25519_oid)\n+                    || algid.equals(SHA224withECDSA_oid)\n+                    || algid.equals(SHA256withECDSA_oid)\n+                    || algid.equals(SHA384withECDSA_oid)\n+                    || algid.equals(SHA512withECDSA_oid)) {\n@@ -631,0 +637,14 @@\n+    public static final ObjectIdentifier x25519_oid =\n+            ObjectIdentifier.of(KnownOIDs.X25519);\n+    public static final ObjectIdentifier x448_oid =\n+            ObjectIdentifier.of(KnownOIDs.X448);\n+\n+    public static final ObjectIdentifier SHA224withECDSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA224withECDSA);\n+    public static final ObjectIdentifier SHA256withECDSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA256withECDSA);\n+    public static final ObjectIdentifier SHA384withECDSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA384withECDSA);\n+    public static final ObjectIdentifier SHA512withECDSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA512withECDSA);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8252377\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ * @summary The AlgorithmIdentifier for ECDSA should omit the parameters field\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.security.DerUtils.*;\n+\n+import java.io.File;\n+import java.security.KeyStore;\n+import java.security.cert.X509Certificate;\n+import sun.security.util.*;\n+\n+public class OmitAlgIdParam {\n+\n+    public static void main(String[] args) throws Exception {\n+        keytool(\"-genkeypair -keyalg ec -dname CN=EC1 -alias ecsha224 \"\n+                + \"-sigalg SHA224withECDSA -keystore ks -storepass changeit\");\n+\n+        keytool(\"-genkeypair -keyalg ec -dname CN=EC2 -alias ecsha256 \"\n+                + \"-sigalg SHA256withECDSA -keystore ks -storepass changeit\");\n+\n+        keytool(\"-genkeypair -keyalg ec -dname CN=EC3 -alias ecsha384 \"\n+                + \"-sigalg SHA384withECDSA -keystore ks -storepass changeit\");\n+\n+        keytool(\"-genkeypair -keyalg ec -dname CN=EC4 -alias ecsha512 \"\n+                + \"-sigalg SHA512withECDSA -keystore ks -storepass changeit\");\n+\n+        KeyStore kstore = KeyStore.getInstance(\n+                new File(\"ks\"), \"changeit\".toCharArray());\n+\n+        \/\/ SHA224withECDSA\n+        checkAlgId(kstore, \"ecsha224\", \"SHA224withECDSA\",\n+                ObjectIdentifier.of(KnownOIDs.SHA224withECDSA));\n+\n+        \/\/ SHA256withECDSA\n+        checkAlgId(kstore, \"ecsha256\", \"SHA256withECDSA\",\n+                ObjectIdentifier.of(KnownOIDs.SHA256withECDSA));\n+\n+        \/\/ SHA384withECDSA\n+        checkAlgId(kstore, \"ecsha384\", \"SHA384withECDSA\",\n+                ObjectIdentifier.of(KnownOIDs.SHA384withECDSA));\n+\n+        \/\/ SHA512withECDSA\n+        checkAlgId(kstore, \"ecsha512\", \"SHA512withECDSA\",\n+                ObjectIdentifier.of(KnownOIDs.SHA512withECDSA));\n+    }\n+\n+    private static void checkAlgId(KeyStore ks, String alias, String alg,\n+            ObjectIdentifier oid) throws Exception {\n+        X509Certificate cert = (X509Certificate)ks.getCertificate(alias);\n+        System.out.println(\"SigAlgName = \" + cert.getSigAlgName());\n+\n+        Asserts.assertEQ(cert.getPublicKey().getAlgorithm(), \"EC\");\n+        Asserts.assertEQ(cert.getSigAlgName(), alg);\n+\n+        byte[] data = cert.getEncoded();\n+        \/\/ Parameters field in the specified AlgorithmIdentifier should be omitted\n+        \/\/ Checking the first signature AlgorithmIdentifier in the cert\n+        checkAlg(data, \"020\", oid);\n+        shouldNotExist(data, \"021\");\n+        \/\/ Checking the second signature AlgorithmIdentifier in the cert\n+        checkAlg(data, \"10\", oid);\n+        shouldNotExist(data, \"11\");\n+    }\n+\n+    static OutputAnalyzer keytool(String cmd) throws Exception {\n+        return SecurityTools.keytool(cmd).shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/OmitAlgIdParam.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}