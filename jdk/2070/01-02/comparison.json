{"files":[{"patch":"@@ -161,0 +161,1 @@\n+                        spec.clearPassword();\n@@ -163,1 +164,0 @@\n-                    spec.clearPassword();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2Core.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+                        spec.clearPassword();\n@@ -163,1 +164,0 @@\n-                    spec.clearPassword();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2HmacSHA1Factory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,0 @@\n-                DerOutputStream out = new DerOutputStream ();\n@@ -225,7 +224,2 @@\n-                \/\/ Write zeroes of correct length into intermediate\n-                \/\/ DerOutputStream so that the real content will not\n-                \/\/ appear everywhere. The actual bytes will be copied\n-                \/\/ into the final encoding so they can be cleared\n-                \/\/ effectively once required.\n-                tmp.putOctetString(new byte[key.length]);\n-                out.write(DerValue.tag_Sequence, tmp);\n+                tmp.putOctetString(key);\n+                DerValue out = DerValue.wrap(DerValue.tag_Sequence, tmp);\n@@ -233,2 +227,1 @@\n-                \/\/ Copy the actual bytes\n-                System.arraycopy(key, 0, encodedKey, encodedKey.length - key.length, key.length);\n+                out.clear();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -664,1 +664,0 @@\n-                DerOutputStream pkcs8 = new DerOutputStream();\n@@ -669,0 +668,1 @@\n+\n@@ -670,7 +670,2 @@\n-                \/\/ Write zeroes of correct length into intermediate\n-                \/\/ DerOutputStream so that the real content will not\n-                \/\/ appear everywhere. The actual bytes will be copied\n-                \/\/ into the final encoding so they can be cleared\n-                \/\/ effectively once required.\n-                secretKeyInfo.putOctetString(new byte[encoded.length]);\n-                pkcs8.write(DerValue.tag_Sequence, secretKeyInfo);\n+                secretKeyInfo.putOctetString(encoded);\n+                Arrays.fill(encoded, (byte)0);\n@@ -678,0 +673,1 @@\n+                DerValue pkcs8 = DerValue.wrap(DerValue.tag_Sequence, secretKeyInfo);\n@@ -679,3 +675,1 @@\n-                \/\/ Copy the actual bytes\n-                System.arraycopy(encoded, 0, p8Array,\n-                        p8Array.length - encoded.length, encoded.length);\n+                pkcs8.clear();\n@@ -687,1 +681,0 @@\n-                    Arrays.fill(encoded, (byte)0);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -93,1 +94,5 @@\n-            DerOutputStream out = new DerOutputStream();\n+            byte[] nbytes = n.toByteArray();\n+            byte[] dbytes = d.toByteArray();\n+            DerOutputStream out = new DerOutputStream(\n+                    nbytes.length + dbytes.length + 50);\n+                    \/\/ Enough for 7 zeroes (21) and 2 tag+length(4)\n@@ -95,1 +100,2 @@\n-            out.putInteger(n);\n+            out.putInteger(nbytes);\n+            Arrays.fill(nbytes, (byte)0);\n@@ -97,1 +103,2 @@\n-            out.putInteger(d);\n+            out.putInteger(dbytes);\n+            Arrays.fill(dbytes, (byte)0);\n@@ -103,2 +110,1 @@\n-            DerValue val =\n-                new DerValue(DerValue.tag_Sequence, out.toByteArray());\n+            DerValue val = DerValue.wrap(DerValue.tag_Sequence, out);\n@@ -106,0 +112,1 @@\n+            val.clear();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateKeyImpl.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -101,2 +101,1 @@\n-                \/\/ skip cloning for testing key.\n-                return encodedPriv;\n+                return encodedPriv.clone();\n@@ -117,2 +116,1 @@\n-                \/\/ skip cloning for testing key.\n-                return encodedPub;\n+                return encodedPub.clone();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestKeyFactory.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,2 +100,1 @@\n-                \/\/ skip cloning for testing key.\n-                return encodedPriv;\n+                return encodedPriv.clone();\n@@ -116,2 +115,1 @@\n-                \/\/ skip cloning for testing key.\n-                return encodedPub;\n+                return encodedPub.clone();\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyFactory.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}