{"files":[{"patch":"@@ -679,1 +679,7 @@\n-\n+        Arrays.fill(tk, 0);\n+        for (int[] ia: Ke) {\n+            Arrays.fill(ia, 0);\n+        }\n+        for (int[] ia: Kd) {\n+            Arrays.fill(ia, 0);\n+        }\n@@ -685,0 +691,4 @@\n+        if (sessionK != null) {\n+            Arrays.fill(sessionK[0], 0);\n+            Arrays.fill(sessionK[1], 0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESCrypt.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.Arrays;\n@@ -115,0 +116,1 @@\n+        Arrays.fill(keyBytes, (byte)0);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESKeyGenerator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Arrays;\n@@ -113,1 +114,5 @@\n-        return new SecretKeySpec(keyBytes, \"Blowfish\");\n+        try {\n+            return new SecretKeySpec(keyBytes, \"Blowfish\");\n+        } finally {\n+            Arrays.fill(keyBytes, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/BlowfishKeyGenerator.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.Arrays;\n@@ -115,0 +116,1 @@\n+            Arrays.fill(key, (byte)0);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESKeyGenerator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeKeyGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Arrays;\n@@ -107,1 +108,5 @@\n-        return new SecretKeySpec(keyBytes, \"HmacMD5\");\n+        try {\n+            return new SecretKeySpec(keyBytes, \"HmacMD5\");\n+        } finally {\n+            Arrays.fill(keyBytes, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacMD5KeyGenerator.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.Arrays;\n@@ -106,2 +107,5 @@\n-\n-        return new SecretKeySpec(keyBytes, \"HmacSHA1\");\n+        try {\n+            return new SecretKeySpec(keyBytes, \"HmacSHA1\");\n+        } finally {\n+            Arrays.fill(keyBytes, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HmacSHA1KeyGenerator.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Arrays;\n@@ -105,1 +106,5 @@\n-        return new SecretKeySpec(b, name);\n+        try {\n+            return new SecretKeySpec(b, name);\n+        } finally {\n+            Arrays.fill(b, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyGeneratorCore.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.math.BigInteger;\n@@ -112,1 +111,0 @@\n-            byte[] tmp = new byte[v];\n@@ -123,1 +121,0 @@\n-                    Arrays.fill(I, (byte)0);\n@@ -126,3 +123,2 @@\n-                concat(Ai, B, 0, B.length);\n-                BigInteger B1;\n-                B1 = new BigInteger(1, B).add(BigInteger.ONE);\n+                concat(Ai, B, 0, v);\n+                addOne(v, B);   \/\/ add 1 into B\n@@ -131,19 +127,1 @@\n-                    BigInteger Ij;\n-                    int trunc;\n-\n-                    if (tmp.length != v) {\n-                        Arrays.fill(tmp, (byte)0);\n-                        tmp = new byte[v];\n-                    }\n-                    System.arraycopy(I, j, tmp, 0, v);\n-                    Ij = new BigInteger(1, tmp);\n-                    Arrays.fill(tmp, (byte)0);\n-                    Ij = Ij.add(B1);\n-                    tmp = Ij.toByteArray();\n-                    trunc = tmp.length - v;\n-                    if (trunc >= 0) {\n-                        System.arraycopy(tmp, trunc, I, j, v);\n-                    } else if (trunc < 0) {\n-                        Arrays.fill(I, j, j + (-trunc), (byte)0);\n-                        System.arraycopy(tmp, 0, I, j + (-trunc), tmp.length);\n-                    }\n+                    addTwo(v, B, I, j); \/\/ add B into I from j\n@@ -151,1 +129,0 @@\n-                Arrays.fill(tmp, (byte)0);\n@@ -153,0 +130,1 @@\n+            Arrays.fill(I, (byte)0);\n@@ -159,0 +137,22 @@\n+    \/\/ Add 1 to b (as integer)\n+    private static void addOne(int len, byte[] b) {\n+        for (int i = len - 1; i >= 0; i--) {\n+            if ((b[i] & 0xff) != 255) {\n+                b[i]++;\n+                break;\n+            } else {\n+                b[i] = 0;\n+            }\n+        }\n+    }\n+\n+    \/\/ Add src (as integer) to dst from offset (as integer)\n+    private static void addTwo(int len, byte[] src, byte[] dst, int offset) {\n+        int carry = 0;\n+        for (int i = len - 1; i >= 0; i--) {\n+            int sum = (src[i] & 0xff) + (dst[i + offset] & 0xff) + carry;\n+            carry = sum >> 8;\n+            dst[i + offset] = (byte)sum;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PKCS12PBECipherCore.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -691,1 +691,17 @@\n-        this(1, randomBits(numBits, rnd));\n+        byte[] magnitude = randomBits(numBits, rnd);\n+\n+        try {\n+            \/\/ stripLeadingZeroBytes() returns a zero length array if len == 0\n+            this.mag = stripLeadingZeroBytes(magnitude, 0, magnitude.length);\n+\n+            if (this.mag.length == 0) {\n+                this.signum = 0;\n+            } else {\n+                this.signum = 1;\n+            }\n+            if (mag.length >= MAX_MAG_LENGTH) {\n+                checkRange();\n+            }\n+        } finally {\n+            Arrays.fill(magnitude, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -162,2 +162,8 @@\n-        if (offset > 0 || value.length != intLen)\n-            return Arrays.copyOfRange(value, offset, offset + intLen);\n+        if (offset > 0 || value.length != intLen) {\n+            \/\/ Shrink value to be the total magnitude\n+            int[] tmp = Arrays.copyOfRange(value, offset, offset + intLen);\n+            Arrays.fill(value, 0);\n+            offset = 0;\n+            intLen = tmp.length;\n+            value = tmp;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,4 @@\n+\n+    public void reset() {\n+        engineReset();\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE256.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Arrays;\n@@ -203,0 +204,1 @@\n+        Arrays.fill(privArr, (byte)0);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECKeyPairGenerator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,2 +107,2 @@\n-            DerValue val =\n-                new DerValue(DerValue.tag_Sequence, out.toByteArray());\n+            Arrays.fill(privBytes, (byte)0);\n+            DerValue val = DerValue.wrap(DerValue.tag_Sequence, out);\n@@ -110,0 +110,1 @@\n+            val.clear();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECPrivateKeyImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Arrays;\n@@ -107,1 +108,3 @@\n-        BigInteger publicKey = ops.computePublic(privateKey.clone());\n+        byte[] cloned = privateKey.clone();\n+        BigInteger publicKey = ops.computePublic(cloned);\n+        Arrays.fill(cloned, (byte)0);\n@@ -116,0 +119,2 @@\n+        } finally {\n+            Arrays.fill(privateKey, (byte)0);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XDHKeyPairGenerator.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XDHPrivateKeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.Arrays;\n@@ -123,0 +124,2 @@\n+        } finally {\n+            Arrays.fill(privateKey, (byte)0);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAKeyPairGenerator.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,5 @@\n-            return md.digest();\n+            try {\n+                return md.digest();\n+            } finally {\n+                md.reset();\n+            }\n@@ -138,1 +142,5 @@\n-            return md.digest();\n+            try {\n+                return md.digest();\n+            } finally {\n+                md.reset();\n+            }\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAParameters.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAPrivateKeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}