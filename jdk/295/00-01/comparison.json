{"files":[{"patch":"@@ -114,0 +114,17 @@\n+\/\/ If (*mountpath == NULL) extract the path component from the mount point\n+\/\/ 'tmpmount' and assign it to '*mountpath'.\n+\/\/ E.g.: \"\/sys\/fs\/cgroup\/memory\" -> \"\/sys\/fs\/cgroup\".\n+\/\/ If (*mountpath != NULL) check that it's the same path like 'tmpmount'.\n+\/\/ It's the callers responsibility to free the memory allocated for '*mount_path'.\n+static void check_mount_path(char **mount_path, const char *tmpmount) {\n+  if (*mount_path == NULL) {\n+    *mount_path = os::strdup(tmpmount);\n+    if (strrchr(*mount_path, '\/')) {\n+      *(strrchr(*mount_path, '\/')) = '\\0';\n+    }\n+  }\n+  else {\n+    assert(strstr(tmpmount, *mount_path) == tmpmount, \"Controllers mounted to different roots\");\n+  }\n+}\n+\n@@ -257,0 +274,1 @@\n+  char *mount_path = NULL;\n@@ -263,1 +281,0 @@\n-    char tmpsource[MAXPATHLEN+1];\n@@ -293,1 +310,1 @@\n-    if (sscanf(p, \"%*d %*d %*d:%*d %s %s %*[^-]- %s %s %s\", tmproot, tmpmount, tmp_fs_type, tmpsource, tmpcgroups) == 5) {\n+    if (sscanf(p, \"%*d %*d %*d:%*d %s %s %*[^-]- %s %*s %s\", tmproot, tmpmount, tmp_fs_type, tmpcgroups) == 4) {\n@@ -298,4 +315,6 @@\n-      if (strcmp(\"none\", tmpsource) == 0) {\n-        \/\/ Skip cpusets created manually or by cset\/cpuset (https:\/\/github.com\/lpechacek\/cpuset)\n-        \/\/ The \"mount source\" for these mounts is usually \"none\" while the source of \"true\" Cgroup\n-        \/\/ controllers is usually \"cgroup\". But this is just another heuristic...\n+      if (strstr(tmpmount, mount_path == NULL ? \"\/sys\/fs\/cgroup\" : mount_path) != tmpmount) {\n+        \/\/ Skip controllers created manually or by cset\/cpuset (https:\/\/github.com\/lpechacek\/cpuset). E.g.:\n+        \/\/ 121 32 0:37 \/ \/cpusets rw,relatime shared:69 - cgroup none rw,cpuset\n+        \/\/ Controllers beloning to a Cgroup are usually mounted under \"\/sys\/fs\/cgroup\" while\n+        \/\/ manually mounted controllers are under \"\/cpusets\" or \"\/dev\/cpuset\".\n+        log_info(os, container)(\"%s not mounted at %s, skipping!\", tmpmount, mount_path == NULL ? \"\/sys\/fs\/cgroup\" : mount_path);\n@@ -308,0 +327,1 @@\n+          check_mount_path(&mount_path, tmpmount);\n@@ -318,0 +338,1 @@\n+          check_mount_path(&mount_path, tmpmount);\n@@ -323,0 +344,1 @@\n+          check_mount_path(&mount_path, tmpmount);\n@@ -330,0 +352,1 @@\n+  os::free(mount_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    private Path cgroupv1MntInfoDoubleCpuset;\n+    private Path cgroupv1MntInfoDoubleCpuset2;\n@@ -110,0 +112,3 @@\n+    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpusets rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n+    private String mntInfoCgroupv1DoubleCpuset = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleCpuset2 =  mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n@@ -160,0 +165,6 @@\n+\n+            cgroupv1MntInfoDoubleCpuset = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpuset, mntInfoCgroupv1DoubleCpuset);\n+\n+            cgroupv1MntInfoDoubleCpuset2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset2\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpuset2, mntInfoCgroupv1DoubleCpuset2);\n@@ -177,0 +188,10 @@\n+    public void testCgroupv1MultipleCpusetMounts(WhiteBox wb, Path mountInfo) {\n+        String procCgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n+        String procSelfCgroup = cgroupV1SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple cpuset controllers, but only one in \/sys\/fs\/cgroup\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv1MultipleCpusetMounts PASSED!\");\n+    }\n+\n@@ -249,0 +270,2 @@\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}