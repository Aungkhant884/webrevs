{"files":[{"patch":"@@ -114,18 +114,0 @@\n-\/\/ If (*mountpath == NULL) extract the path component from the mount point\n-\/\/ 'tmpmount' and assign it to '*mountpath'.\n-\/\/ E.g.: \"\/sys\/fs\/cgroup\/memory\" -> \"\/sys\/fs\/cgroup\".\n-\/\/ If (*mountpath != NULL) check that it's the same path like 'tmpmount'.\n-\/\/ It's the callers responsibility to free the memory allocated for '*mount_path'.\n-static void check_mount_path(char **mount_path, const char *tmpmount) {\n-  if (*mount_path == NULL) {\n-    *mount_path = os::strdup(tmpmount);\n-    char* last_slash = strrchr(*mount_path, '\/');\n-    if (last_slash != NULL) {\n-      *last_slash = '\\0'; \/\/ truncate controller\n-    }\n-  }\n-  else {\n-    assert(strstr(tmpmount, *mount_path) == tmpmount, \"Controllers mounted to different roots\");\n-  }\n-}\n-\n@@ -275,1 +257,0 @@\n-  char *mount_path = NULL;\n@@ -320,1 +301,0 @@\n-          check_mount_path(&mount_path, tmpmount);\n@@ -325,7 +305,15 @@\n-          if (strstr(tmpmount, mount_path == NULL ? \"\/sys\/fs\/cgroup\" : mount_path) != tmpmount) {\n-            \/\/ Skip controllers created manually or by cset\/cpuset (https:\/\/github.com\/lpechacek\/cpuset). E.g.:\n-            \/\/ 121 32 0:37 \/ \/cpusets rw,relatime shared:69 - cgroup none rw,cpuset\n-            \/\/ Controllers belonging to a Cgroup are usually mounted under \"\/sys\/fs\/cgroup\" while\n-            \/\/ manually mounted controllers are under \"\/cpusets\" or \"\/dev\/cpuset\".\n-            log_info(os, container)(\"%s not mounted at %s, skipping!\", tmpmount, mount_path == NULL ? \"\/sys\/fs\/cgroup\" : mount_path);\n-            break;\n+          if (cg_infos[CPUSET_IDX]._mount_path != NULL) {\n+            \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n+            \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+            \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n+            if (strstr(cg_infos[CPUSET_IDX]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[CPUSET_IDX]._mount_path) {\n+              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                                         tmpmount, cg_infos[CPUSET_IDX]._mount_path);\n+              os::free(cg_infos[CPUSET_IDX]._mount_path);\n+              cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+            } else {\n+              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                                         cg_infos[CPUSET_IDX]._mount_path, tmpmount);\n+            }\n+          } else {\n+            cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n@@ -333,2 +321,0 @@\n-          assert(cg_infos[CPUSET_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n@@ -339,1 +325,0 @@\n-          check_mount_path(&mount_path, tmpmount);\n@@ -345,1 +330,0 @@\n-          check_mount_path(&mount_path, tmpmount);\n@@ -353,1 +337,0 @@\n-  os::free(mount_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":15,"deletions":32,"binary":false,"changes":47,"status":"modified"}]}