{"files":[{"patch":"@@ -384,1 +384,1 @@\n-  archived_entry->copy_from(this);\n+  memcpy((void*)archived_entry, (void*)this, sizeof(ModuleEntry));\n@@ -457,1 +457,0 @@\n-  JFR_ONLY(memset(trace_id_addr(), 0, sizeof(traceid)));\n@@ -476,1 +475,0 @@\n-  _shared_pd = null_handle;\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,21 +85,0 @@\n-  \/\/ Use this instead of memcpy to avoid copying garbage in structure padding\n-  \/\/ (such as the bytes after _is_patched).\n-  void copy_from(const ModuleEntry* other) {\n-    HashtableEntry<Symbol*, mtModule>::copy_from(other);\n-    _module                     = other->_module;\n-    _shared_pd                  = other->_shared_pd;\n-    _loader_data                = other->_loader_data;\n-    _reads                      = other->_reads;\n-    _version                    = other->_version;\n-    _location                   = other->_location;\n-    CDS_ONLY(_shared_path_index = other->_shared_path_index);\n-    _can_read_all_unnamed       = other->_can_read_all_unnamed;\n-    _has_default_read_edges     = other->_has_default_read_edges;\n-    _has_default_read_edges     = other->_has_default_read_edges;\n-    _must_walk_reads            = other-> _must_walk_reads;\n-    _is_open                    = other->_is_open;\n-    _is_patched                 = other->_is_patched;\n-    CDS_JAVA_HEAP_ONLY(_archived_module_narrow_oop= other->_archived_module_narrow_oop);\n-    JFR_ONLY(set_trace_id(other->trace_id()));\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  archived_entry->copy_from(this);\n+  memcpy((void*)archived_entry, (void*)this, sizeof(PackageEntry));\n@@ -241,1 +241,0 @@\n-  JFR_ONLY(memset(trace_id_addr(), 0, sizeof(traceid)));\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -122,14 +122,0 @@\n-\n-  \/\/ Use this instead of memcpy to avoid copying garbage in structure padding\n-  \/\/ (such as the 1 byte after _must_walk_exports).\n-  void copy_from(const PackageEntry* other) {\n-    HashtableEntry<Symbol*, mtModule>::copy_from(other);\n-    _module = other->_module;\n-    _export_flags = other->_export_flags;\n-    _classpath_index= other->_classpath_index;\n-    _must_walk_exports = other->_must_walk_exports;\n-    _qualified_exports = other->_qualified_exports;\n-    _defined_by_cds_in_class_path= other->_defined_by_cds_in_class_path;\n-    JFR_ONLY(set_trace_id(other->trace_id()));\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,4 @@\n+  if (DumpSharedSpaces) {\n+    \/\/ Avoid random bits in structure padding so we can have deterministic content in CDS archive\n+    memset((void*)entry, 0, this->entry_size());\n+  }\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,7 +68,0 @@\n-  \/\/ Use this instead of memcpy to avoid copying garbage in structure padding\n-  \/\/ (such as the 4 bytes after _hash in 64-bit builds).\n-  void copy_from(const BasicHashtableEntry<F>* other) {\n-    _hash = other->_hash;\n-    \/\/ don't copy _next as that doesn't make sense.\n-  }\n-\n@@ -113,6 +106,0 @@\n-protected:\n-  void copy_from(const HashtableEntry<T, F>* other) {\n-    BasicHashtableEntry<F>::copy_from(other);\n-    _literal = other->_literal;\n-  }\n-\n","filename":"src\/hotspot\/share\/utilities\/hashtable.hpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}