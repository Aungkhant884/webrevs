{"files":[{"patch":"@@ -217,0 +217,6 @@\n+\n+        \/\/ See https:\/\/reproducible-builds.org\/docs\/source-date-epoch\/\n+        String sourceDateEpoch = System.getenv((\"SOURCE_DATE_EPOCH\"));\n+        buildDate = sourceDateEpoch == null ? new Date() :\n+                new Date(1000 * Long.parseLong(System.getenv(\"SOURCE_DATE_EPOCH\")));\n+\n@@ -226,1 +232,1 @@\n-    public final Date startTime = new Date();\n+    public final Date buildDate;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.buildDate)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.buildDate)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexRedirectWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.buildDate)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SourceToHTMLConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8272984\n+ * @summary  javadoc support for SOURCE_DATE_EPOCH\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSourceDateEpoch\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.nio.file.Path;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestSourceDateEpoch extends JavadocTester {\n+\n+    \/**\n+     * The entry point of the test.\n+     *\n+     * @param args the array of command line arguments\n+     * @throws Exception if the test fails\n+     *\/\n+    public static void main(String... args) throws Exception {\n+        TestSourceDateEpoch tester = new TestSourceDateEpoch();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testSourceDateEpoch(Path base) throws Exception {\n+        Calendar c = Calendar.getInstance(); \/\/ uses current date, time, timezone etc\n+        \/\/ adjust the calendar to some date before the default used by javadoc (i.e. today)\n+        c.add(Calendar.DAY_OF_MONTH, -100);\n+        \/\/ set a specific time, such as 10 to 3. (Rupert Brooke, Grantchester)\n+        c.set(Calendar.HOUR, 2);\n+        c.set(Calendar.MINUTE, 50);\n+        c.set(Calendar.SECOND, 0);\n+        c.set(Calendar.AM_PM, Calendar.PM);\n+        Date testDate = c.getTime();\n+        out.println(\"Test Date: '\" + testDate + \"'\");\n+\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir, \"\"\"\n+                package p;\n+                \/** Comment. *\/\n+                public interface I { }\n+                \"\"\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        \/\/ execute javadoc in a separate VM so that we can set the SOURCE_DATE_EPOCH environment variable.\n+        Path javaHome = Path.of(System.getProperty(\"java.home\"));\n+        Path javadocBin = javaHome.resolve(\"bin\").resolve(\"javadoc\" + (ToolBox.isWindows() ? \".exe\" : \"\"));\n+\n+        List<String> cmdArgs = List.of(javadocBin.toString(),\n+                \"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"p\");\n+\n+        ProcessBuilder pb = new ProcessBuilder(cmdArgs)\n+                .redirectErrorStream(true);\n+        pb.environment().put(\"SOURCE_DATE_EPOCH\", Long.toString(c.getTimeInMillis() \/ 1000));\n+        Process p = pb.start();\n+        try (BufferedReader in = p.inputReader()) {\n+            in.lines().forEach(out::println);\n+        }\n+        int rc = p.waitFor();\n+        if (rc != 0) {\n+            throw new Exception(\"javadoc failed: rc=\" + rc);\n+        }\n+\n+        \/\/ set the outputDir used by JavadocTester\n+        outputDir = outDir;\n+\n+        int featureVersion = Runtime.version().feature();\n+        String generatedByStamp = testDate.toString(); \/\/ matches what javadoc will use internally\n+        String generatedBy = String.format(\"<!-- Generated by javadoc (%d) on %s -->\",\n+                featureVersion, generatedByStamp);\n+\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        String dcCreatedStamp = dateFormat.format(testDate);\n+        String dcCreated = String.format(\"\"\"\n+                        <meta name=\"dc.created\" content=\"%s\">\"\"\",\n+                dcCreatedStamp);\n+\n+        \/\/ check the timestamps in all generated HTML files\n+        for (Path file : tb.findFiles(\".html\", outputDir)) {\n+            checkOutput(outputDir.relativize(file).toString(), true,\n+                    generatedBy,\n+                    dcCreated);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSourceDateEpoch\/TestSourceDateEpoch.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}