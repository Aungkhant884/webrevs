{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main GraphemeTest\n+ * @run testng GraphemeTest\n@@ -35,6 +35,3 @@\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.Scanner;\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n@@ -44,1 +41,2 @@\n-    public static void main(String[] args) throws Throwable {\n+    @Test\n+    public static void testGraphemeBreakProperty() throws Throwable {\n@@ -46,0 +44,4 @@\n+    }\n+\n+    @Test\n+    public static void testEmojiData() throws Throwable {\n@@ -81,1 +83,1 @@\n-                                throw new RuntimeException(String.format(\n+                                fail(String.format(\n","filename":"test\/jdk\/java\/util\/regex\/GraphemeTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm NegativeArraySize -Xms5G -Xmx5G\n+ * @run testng\/othervm -Xms5G -Xmx5G NegativeArraySize\n@@ -32,0 +32,3 @@\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertThrows;\n+\n@@ -35,6 +38,3 @@\n-    public static void main(String[] args) {\n-        try {\n-            Pattern.compile(\"\\\\Q\" + \"a\".repeat(42 + Integer.MAX_VALUE \/ 3));\n-            throw new AssertionError(\"expected to throw\");\n-        } catch (OutOfMemoryError expected) {\n-        }\n+    @Test\n+    public static void testNegativeArraySize() {\n+        assertThrows(OutOfMemoryError.class, () -> Pattern.compile(\"\\\\Q\" + \"a\".repeat(42 + Integer.MAX_VALUE \/ 3)));\n","filename":"test\/jdk\/java\/util\/regex\/NegativeArraySize.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @author Mike McCloskey\n@@ -44,1 +43,2 @@\n- * @run main RegExTest\n+ * @author Mike McCloskey\n+ * @run testng RegExTest\n@@ -48,8 +48,1 @@\n-import java.io.BufferedReader;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.InputStreamReader;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n+import java.io.*;\n@@ -77,0 +70,4 @@\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\n+\n+\n@@ -79,0 +76,9 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertNotSame;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+import static org.testng.Assert.expectThrows;\n+\n@@ -85,127 +91,1 @@\n-    private static Random generator = RandomFactory.getRandom();\n-    private static boolean failure = false;\n-    private static int failCount = 0;\n-    private static String firstFailure = null;\n-\n-    \/**\n-     * Main to interpret arguments and run several tests.\n-     *\n-     *\/\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Most of the tests are in a file\n-        processFile(\"TestCases.txt\");\n-        \/\/processFile(\"PerlCases.txt\");\n-        processFile(\"BMPTestCases.txt\");\n-        processFile(\"SupplementaryTestCases.txt\");\n-\n-        \/\/ These test many randomly generated char patterns\n-        bm();\n-        slice();\n-\n-        \/\/ These are hard to put into the file\n-        escapes();\n-        blankInput();\n-\n-        \/\/ Substitition tests on randomly generated sequences\n-        globalSubstitute();\n-        stringbufferSubstitute();\n-        stringbuilderSubstitute();\n-\n-        substitutionBasher();\n-        substitutionBasher2();\n-\n-        \/\/ Canonical Equivalence\n-        ceTest();\n-\n-        \/\/ Anchors\n-        anchorTest();\n-\n-        \/\/ boolean match calls\n-        matchesTest();\n-        lookingAtTest();\n-\n-        \/\/ Pattern API\n-        patternMatchesTest();\n-\n-        \/\/ Misc\n-        lookbehindTest();\n-        nullArgumentTest();\n-        backRefTest();\n-        groupCaptureTest();\n-        caretTest();\n-        charClassTest();\n-        emptyPatternTest();\n-        findIntTest();\n-        group0Test();\n-        longPatternTest();\n-        octalTest();\n-        ampersandTest();\n-        negationTest();\n-        splitTest();\n-        appendTest();\n-        caseFoldingTest();\n-        commentsTest();\n-        unixLinesTest();\n-        replaceFirstTest();\n-        gTest();\n-        zTest();\n-        serializeTest();\n-        reluctantRepetitionTest();\n-        multilineDollarTest();\n-        dollarAtEndTest();\n-        caretBetweenTerminatorsTest();\n-        \/\/ This RFE rejected in Tiger numOccurrencesTest();\n-        javaCharClassTest();\n-        nonCaptureRepetitionTest();\n-        notCapturedGroupCurlyMatchTest();\n-        escapedSegmentTest();\n-        literalPatternTest();\n-        literalReplacementTest();\n-        regionTest();\n-        toStringTest();\n-        negatedCharClassTest();\n-        findFromTest();\n-        boundsTest();\n-        unicodeWordBoundsTest();\n-        caretAtEndTest();\n-        wordSearchTest();\n-        hitEndTest();\n-        toMatchResultTest();\n-        toMatchResultTest2();\n-        surrogatesInClassTest();\n-        removeQEQuotingTest();\n-        namedGroupCaptureTest();\n-        nonBmpClassComplementTest();\n-        unicodePropertiesTest();\n-        unicodeHexNotationTest();\n-        unicodeClassesTest();\n-        unicodeCharacterNameTest();\n-        horizontalAndVerticalWSTest();\n-        linebreakTest();\n-        branchTest();\n-        groupCurlyNotFoundSuppTest();\n-        groupCurlyBackoffTest();\n-        patternAsPredicate();\n-        patternAsMatchPredicate();\n-        invalidFlags();\n-        embeddedFlags();\n-        grapheme();\n-        expoBacktracking();\n-        invalidGroupName();\n-        illegalRepetitionRange();\n-        surrogatePairWithCanonEq();\n-        lineBreakWithQuantifier();\n-        caseInsensitivePMatch();\n-        surrogatePairOverlapRegion();\n-        droppedClassesWithIntersection();\n-        errorMessageCaretIndentation();\n-\n-\n-        if (failure) {\n-            throw new\n-                RuntimeException(\"RegExTest failed, 1st failure: \" +\n-                                 firstFailure);\n-        } else {\n-            System.err.println(\"OKAY: All tests passed.\");\n-        }\n-    }\n+    private static final Random generator = RandomFactory.getRandom();\n@@ -216,1 +96,2 @@\n-        StringBuffer buf = new StringBuffer(length);\n+\n+        StringBuilder buf = new StringBuilder(length);\n@@ -226,2 +107,1 @@\n-        if (!m.group().equals(expected))\n-            failCount++;\n+        assertEquals(m.group(), expected);\n@@ -232,2 +112,1 @@\n-        if (m.group().equals(result) != expected)\n-            failCount++;\n+        assertEquals(m.group().equals(result), expected);\n@@ -237,2 +116,1 @@\n-        if (p.matcher(s).find() != expected)\n-            failCount++;\n+        assertEquals(p.matcher(s).find(), expected);\n@@ -243,2 +121,1 @@\n-        if (matcher.find() != expected)\n-            failCount++;\n+        assertEquals(matcher.find(), expected);\n@@ -252,2 +129,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -261,2 +137,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -273,18 +148,14 @@\n-            check(pattern, input, false);\n-    }\n-\n-    private static void report(String testName) {\n-        int spacesToAdd = 30 - testName.length();\n-        StringBuffer paddedNameBuffer = new StringBuffer(testName);\n-        for (int i=0; i<spacesToAdd; i++)\n-            paddedNameBuffer.append(\" \");\n-        String paddedName = paddedNameBuffer.toString();\n-        System.err.println(paddedName + \": \" +\n-                           (failCount==0 ? \"Passed\":\"Failed(\"+failCount+\")\"));\n-        if (failCount > 0) {\n-            failure = true;\n-\n-            if (firstFailure == null) {\n-                firstFailure = testName;\n-            }\n-        }\n+            check(pattern, input, expected);\n+    }\n+\n+    private static void check(Pattern p, String s, String g, String expected) {\n+        Matcher m = p.matcher(s);\n+        m.find();\n+        assertFalse(!m.group(g).equals(expected) ||\n+                s.charAt(m.start(g)) != expected.charAt(0) ||\n+                s.charAt(m.end(g) - 1) != expected.charAt(expected.length() - 1));\n+    }\n+    private static void checkReplaceFirst(String p, String s, String r, String expected)\n+    {\n+        assertEquals(expected, Pattern.compile(p).matcher(s).replaceFirst(r));\n+    }\n@@ -292,1 +163,8 @@\n-        failCount = 0;\n+    private static void checkReplaceAll(String p, String s, String r, String expected)\n+    {\n+        assertEquals(expected, Pattern.compile(p).matcher(s).replaceAll(r));\n+    }\n+\n+    private static void checkExpectedFail(String p) {\n+        assertThrows(PatternSyntaxException.class, () ->\n+                Pattern.compile(p));\n@@ -300,1 +178,1 @@\n-    private static String toSupplementaries(String s) {\n+    public static String toSupplementaries(String s) {\n@@ -302,1 +180,1 @@\n-        StringBuffer sb = new StringBuffer(length * 2);\n+        StringBuilder sb = new StringBuilder(length * 2);\n@@ -329,0 +207,5 @@\n+    \/\/Following three tests execute from a file.\n+    @Test\n+    public static void processTestCases() throws IOException {\n+        processFile(\"TestCases.txt\");\n+    }\n@@ -330,10 +213,8 @@\n-    \/\/ This is for bug 6178785\n-    \/\/ Test if an expected NPE gets thrown when passing in a null argument\n-    private static boolean check(Runnable test) {\n-        try {\n-            test.run();\n-            failCount++;\n-            return false;\n-        } catch (NullPointerException npe) {\n-            return true;\n-        }\n+    @Test\n+    public static void processBMPTestCases() throws IOException {\n+        processFile(\"BMPTestCases.txt\");\n+    }\n+\n+    @Test\n+    public static void processSupplementaryTestCases() throws IOException {\n+        processFile(\"SupplementaryTestCases.txt\");\n@@ -342,7 +223,10 @@\n-    private static void nullArgumentTest() {\n-        check(() -> Pattern.compile(null));\n-        check(() -> Pattern.matches(null, null));\n-        check(() -> Pattern.matches(\"xyz\", null));\n-        check(() -> Pattern.quote(null));\n-        check(() -> Pattern.compile(\"xyz\").split(null));\n-        check(() -> Pattern.compile(\"xyz\").matcher(null));\n+\n+    @Test\n+    public static void nullArgumentTest() {\n+\n+        assertThrows(NullPointerException.class, () -> Pattern.compile(null));\n+        assertThrows(NullPointerException.class, () -> Pattern.matches(null, null));\n+        assertThrows(NullPointerException.class, () -> Pattern.matches(\"xyz\", null));\n+        assertThrows(NullPointerException.class, () -> Pattern.quote(null));\n+        assertThrows(NullPointerException.class, () -> Pattern.compile(\"xyz\").split(null));\n+        assertThrows(NullPointerException.class, () -> Pattern.compile(\"xyz\").matcher(null));\n@@ -352,10 +236,10 @@\n-        check(() -> m.appendTail((StringBuffer) null));\n-        check(() -> m.appendTail((StringBuilder)null));\n-        check(() -> m.replaceAll((String) null));\n-        check(() -> m.replaceAll((Function<MatchResult, String>)null));\n-        check(() -> m.replaceFirst((String)null));\n-        check(() -> m.replaceFirst((Function<MatchResult, String>) null));\n-        check(() -> m.appendReplacement((StringBuffer)null, null));\n-        check(() -> m.appendReplacement((StringBuilder)null, null));\n-        check(() -> m.reset(null));\n-        check(() -> Matcher.quoteReplacement(null));\n+        assertThrows(NullPointerException.class, () -> m.appendTail((StringBuffer) null));\n+        assertThrows(NullPointerException.class, () -> m.appendTail((StringBuilder)null));\n+        assertThrows(NullPointerException.class, () -> m.replaceAll((String) null));\n+        assertThrows(NullPointerException.class, () -> m.replaceAll((Function<MatchResult, String>)null));\n+        assertThrows(NullPointerException.class, () -> m.replaceFirst((String)null));\n+        assertThrows(NullPointerException.class, () -> m.replaceFirst((Function<MatchResult, String>) null));\n+        assertThrows(NullPointerException.class, () -> m.appendReplacement((StringBuffer)null, null));\n+        assertThrows(NullPointerException.class, () -> m.appendReplacement((StringBuilder)null, null));\n+        assertThrows(NullPointerException.class, () -> m.reset(null));\n+        assertThrows(NullPointerException.class, () -> Matcher.quoteReplacement(null));\n@@ -364,1 +248,0 @@\n-        report(\"Null Argument\");\n@@ -369,1 +252,2 @@\n-    private static void surrogatesInClassTest() throws Exception {\n+    @Test\n+    public static void surrogatesInClassTest() {\n@@ -372,2 +256,0 @@\n-        if (!matcher.find())\n-            failCount++;\n@@ -375,1 +257,1 @@\n-        report(\"Surrogate pair in Unicode escape\");\n+        assertTrue(matcher.find(), \"Surrogate pair in Unicode escape\");\n@@ -382,1 +264,2 @@\n-    private static void removeQEQuotingTest() throws Exception {\n+    @Test\n+    public static void removeQEQuotingTest() {\n@@ -386,2 +269,0 @@\n-        if (!matcher.find())\n-            failCount++;\n@@ -389,1 +270,1 @@\n-        report(\"Remove Q\/E Quoting\");\n+        assertTrue(matcher.find(), \"Remove Q\/E Quoting\");\n@@ -395,1 +276,2 @@\n-    private static void toMatchResultTest() throws Exception {\n+    @Test\n+    public static void toMatchResultTest() {\n@@ -400,0 +282,1 @@\n+\n@@ -402,2 +285,2 @@\n-        if (mr == matcher)\n-            failCount++;\n+        assertNotSame(mr, matcher, \"Matcher toMatchResult is identical object\");\n+\n@@ -405,2 +288,1 @@\n-        if (matcherStart1 != resultStart1)\n-            failCount++;\n+        assertEquals(matcherStart1, resultStart1, \"equal matchers don't have equal start indices\");\n@@ -408,0 +290,1 @@\n+\n@@ -410,4 +293,2 @@\n-        if (matcherStart2 == resultStart2)\n-            failCount++;\n-        if (resultStart1 != resultStart2)\n-            failCount++;\n+        assertNotEquals(matcherStart2, resultStart2, \"Matcher2 and Result2 should not be equal\");\n+        assertEquals(resultStart1, resultStart2, \"Second match result should have the same state\");\n@@ -415,22 +296,2 @@\n-        if (mr == mr2)\n-            failCount++;\n-        if (mr2.start() != matcherStart2)\n-            failCount++;\n-        report(\"toMatchResult is a copy\");\n-    }\n-\n-    private static void checkExpectedISE(Runnable test) {\n-        try {\n-            test.run();\n-            failCount++;\n-        } catch (IllegalStateException x) {\n-        } catch (IndexOutOfBoundsException xx) {\n-            failCount++;\n-        }\n-    }\n-\n-    private static void checkExpectedIOOE(Runnable test) {\n-        try {\n-            test.run();\n-            failCount++;\n-        } catch (IndexOutOfBoundsException x) {}\n+        assertNotSame(mr, mr2, \"Second Matcher copy should not be identical to the first.\");\n+        assertEquals(mr2.start(), matcherStart2, \"mr2 index should equal matcher index\");\n@@ -441,1 +302,2 @@\n-    private static void toMatchResultTest2() throws Exception {\n+    @Test\n+    public static void toMatchResultTest2() {\n@@ -446,6 +308,6 @@\n-        checkExpectedISE(() -> mr.start());\n-        checkExpectedISE(() -> mr.start(2));\n-        checkExpectedISE(() -> mr.end());\n-        checkExpectedISE(() -> mr.end(2));\n-        checkExpectedISE(() -> mr.group());\n-        checkExpectedISE(() -> mr.group(2));\n+        assertThrows(IllegalStateException.class, mr::start);\n+        assertThrows(IllegalStateException.class, () -> mr.start(2));\n+        assertThrows(IllegalStateException.class, mr::end);\n+        assertThrows(IllegalStateException.class, () -> mr.end(2));\n+        assertThrows(IllegalStateException.class, mr::group);\n+        assertThrows(IllegalStateException.class, () -> mr.group(2));\n@@ -456,5 +318,3 @@\n-        checkExpectedIOOE(() -> mr2.start(2));\n-        checkExpectedIOOE(() -> mr2.end(2));\n-        checkExpectedIOOE(() -> mr2.group(2));\n-\n-        report(\"toMatchResult2 appropriate exceptions\");\n+        assertThrows(IndexOutOfBoundsException.class, () -> mr2.start(2));\n+        assertThrows(IndexOutOfBoundsException.class, () -> mr2.end(2));\n+        assertThrows(IndexOutOfBoundsException.class, () -> mr2.group(2));\n@@ -465,1 +325,2 @@\n-    private static void hitEndTest() throws Exception {\n+    @Test\n+    public static void hitEndTest() {\n@@ -470,2 +331,1 @@\n-        if (m.hitEnd())\n-            failCount++;\n+        assertFalse(m.hitEnd(), \"Matcher should not be at end of sequence\");\n@@ -474,2 +334,1 @@\n-        if (!m.hitEnd())\n-            failCount++;\n+        assertTrue(m.hitEnd(), \"Matcher should be at the end of sequence\");\n@@ -485,2 +344,1 @@\n-            if (m.hitEnd())\n-                failCount++;\n+            assertFalse(m.hitEnd(), \"Slice node test\");\n@@ -489,2 +347,1 @@\n-            if (!m.hitEnd())\n-                failCount++;\n+            assertTrue(m.hitEnd(), \"Slice node test\");\n@@ -497,2 +354,1 @@\n-        if (!m.hitEnd())\n-            failCount++;\n+        assertTrue(m.hitEnd(), \"Boyer-Moore node test\");\n@@ -503,2 +359,1 @@\n-        if (!m.hitEnd())\n-            failCount++;\n+        assertTrue(m.hitEnd(), \"Boyer-More node test\");\n@@ -510,2 +365,1 @@\n-        if (m.hitEnd())\n-            failCount++;\n+        assertFalse(m.hitEnd());\n@@ -515,2 +369,1 @@\n-        if (!m.hitEnd())\n-            failCount++;\n+        assertTrue(m.hitEnd());\n@@ -520,4 +373,1 @@\n-        if (m.hitEnd())\n-            failCount++;\n-\n-        report(\"hitEnd\");\n+        assertFalse(m.hitEnd());\n@@ -528,2 +378,3 @@\n-    private static void wordSearchTest() throws Exception {\n-        String testString = new String(\"word1 word2 word3\");\n+    @Test\n+    public static void wordSearchTest() {\n+        String testString = \"word1 word2 word3\";\n@@ -533,1 +384,1 @@\n-        int start = 0;\n+        int start;\n@@ -545,2 +396,1 @@\n-            if (!testString.substring(start, position-1).startsWith(\"word\"))\n-                failCount++;\n+            assertTrue(testString.substring(start, position-1).startsWith(\"word\"));\n@@ -548,1 +398,0 @@\n-        report(\"Customer word search\");\n@@ -552,1 +401,2 @@\n-    private static void caretAtEndTest() throws Exception {\n+    @Test\n+    public static void caretAtEndTest() {\n@@ -560,1 +410,0 @@\n-        report(\"Caret at end\");\n@@ -566,1 +415,2 @@\n-    private static void unicodeWordBoundsTest() throws Exception {\n+    @Test\n+    public static void unicodeWordBoundsTest() {\n@@ -597,2 +447,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -602,2 +451,0 @@\n-\n-        report(\"Unicode word boundary\");\n@@ -607,1 +454,1 @@\n-                                       int b) throws Exception\n+                                       int b)\n@@ -611,2 +458,1 @@\n-        if (matcher.start() != a)\n-            failCount++;\n+        assertEquals(matcher.start(), a);\n@@ -614,2 +460,1 @@\n-        if (matcher.start() != b)\n-            failCount++;\n+        assertEquals(matcher.start(), b);\n@@ -619,2 +464,2 @@\n-    static void check(String regex, String input, String[] expected) {\n-        List<String> result = new ArrayList<String>();\n+    private static void check(String regex, String input, String[] expected) {\n+        List<String> result = new ArrayList<>();\n@@ -626,2 +471,1 @@\n-        if (!Arrays.asList(expected).equals(result))\n-            failCount++;\n+        assertEquals(Arrays.asList(expected), result);\n@@ -630,1 +474,2 @@\n-    private static void lookbehindTest() throws Exception {\n+    @Test\n+    public static void lookbehindTest() {\n@@ -663,1 +508,0 @@\n-        report(\"Lookbehind\");\n@@ -669,1 +513,2 @@\n-    private static void boundsTest() throws Exception {\n+    @Test\n+    public static void boundsTest() {\n@@ -674,2 +519,2 @@\n-        if (matcher.find())\n-            failCount++;\n+\n+        assertFalse(matcher.find());\n@@ -677,2 +522,2 @@\n-        if (matcher.find())\n-            failCount++;\n+\n+        assertFalse(matcher.find());\n@@ -680,2 +525,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+\n+        assertTrue(matcher.find());\n@@ -684,2 +529,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+\n+        assertTrue(matcher.find());\n@@ -688,2 +533,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+\n+        assertTrue(matcher.find());\n@@ -692,2 +537,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+\n+        assertTrue(matcher.find());\n@@ -695,2 +540,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -703,2 +547,2 @@\n-        if (matcher.find())\n-            failCount++;\n+\n+        assertFalse(matcher.find());\n@@ -707,2 +551,2 @@\n-        if (matcher.find())\n-            failCount++;\n+\n+        assertFalse(matcher.find());\n@@ -712,2 +556,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+\n+        assertTrue(matcher.find());\n@@ -716,2 +560,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -719,1 +562,0 @@\n-        report(\"Region bounds transparency\");\n@@ -723,1 +565,2 @@\n-    private static void findFromTest() throws Exception {\n+    @Test\n+    public static void findFromTest() {\n@@ -727,7 +570,3 @@\n-        if (!match.find())\n-            failCount++;\n-        if (match.find())\n-            failCount++;\n-        if (match.find())\n-            failCount++;\n-        report(\"Check for alternating find\");\n+        assertTrue(match.find());\n+        assertFalse(match.find());\n+        assertFalse(match.find());\n@@ -737,1 +576,2 @@\n-    private static void negatedCharClassTest() throws Exception {\n+    @Test\n+    public static void negatedCharClassTest() {\n@@ -740,2 +580,2 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n+\n@@ -744,2 +584,2 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n+\n@@ -747,2 +587,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -750,5 +589,3 @@\n-        String result[] = s.split(\"[^fr]\");\n-        if (!result[0].equals(\"f\"))\n-            failCount++;\n-        if (!result[1].equals(\"r\"))\n-            failCount++;\n+        String[] result = s.split(\"[^fr]\");\n+        assertEquals(result[0], \"f\");\n+        assertEquals(result[1], \"r\");\n@@ -757,4 +594,2 @@\n-        if (!result[0].equals(\"f\"))\n-            failCount++;\n-        if (!result[1].equals(\"r\"))\n-            failCount++;\n+        assertEquals(result[0], \"f\");\n+        assertEquals(result[1], \"r\");\n@@ -765,2 +600,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -768,2 +602,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -771,2 +604,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -774,2 +606,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -777,2 +608,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -783,2 +613,1 @@\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n@@ -786,2 +615,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -789,2 +617,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -792,2 +619,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -795,4 +621,1 @@\n-        if (!matcher.find())\n-            failCount++;\n-\n-        report(\"Negated Character Class\");\n+        assertTrue(matcher.find());\n@@ -802,1 +625,2 @@\n-    private static void toStringTest() throws Exception {\n+    @Test\n+    public static void toStringTest() {\n@@ -804,2 +628,1 @@\n-        if (pattern.toString() != \"b+\")\n-            failCount++;\n+        assertEquals(pattern.toString(), \"b+\");\n@@ -809,1 +632,1 @@\n-        matcherString = matcher.toString(); \/\/ unspecified\n+        matcher.toString(); \/\/ unspecified\n@@ -811,1 +634,1 @@\n-        matcherString = matcher.toString(); \/\/ unspecified\n+        matcher.toString(); \/\/ unspecified\n@@ -813,2 +636,1 @@\n-        matcherString = matcher.toString(); \/\/ unspecified\n-        report(\"toString\");\n+        matcher.toString(); \/\/ unspecified\n@@ -818,1 +640,2 @@\n-    private static void literalPatternTest() throws Exception {\n+    @Test\n+    public static void literalPatternTest() {\n@@ -878,0 +701,1 @@\n+        \/\/Note: Possible issue\n@@ -926,0 +750,1 @@\n+        \/\/Note: Possible issue\n@@ -929,2 +754,0 @@\n-\n-        report(\"Literal pattern\");\n@@ -935,1 +758,2 @@\n-    private static void literalReplacementTest() throws Exception {\n+    @Test\n+    public static void literalReplacementTest() {\n@@ -942,2 +766,1 @@\n-        if (!result.equals(\"zzzabczzz\"))\n-            failCount++;\n+        assertEquals(result, \"zzzabczzz\");\n@@ -946,1 +769,1 @@\n-        String literalReplacement = matcher.quoteReplacement(replaceTest);\n+        String literalReplacement = Matcher.quoteReplacement(replaceTest);\n@@ -948,2 +771,1 @@\n-        if (!result.equals(\"zzz$0zzz\"))\n-            failCount++;\n+        assertEquals(result, \"zzz$0zzz\");\n@@ -953,1 +775,1 @@\n-        literalReplacement = matcher.quoteReplacement(replaceTest);\n+        literalReplacement = Matcher.quoteReplacement(replaceTest);\n@@ -955,2 +777,1 @@\n-        if (!result.equals(\"zzz\\\\t$\\\\$zzz\"))\n-            failCount++;\n+        assertEquals(result, \"zzz\\\\t$\\\\$zzz\");\n@@ -963,2 +784,1 @@\n-        if (!result.equals(toSupplementaries(\"zzzabczzz\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"zzzabczzz\"));\n@@ -967,1 +787,1 @@\n-        literalReplacement = matcher.quoteReplacement(replaceTest);\n+        literalReplacement = Matcher.quoteReplacement(replaceTest);\n@@ -969,2 +789,1 @@\n-        if (!result.equals(toSupplementaries(\"zzz$0zzz\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"zzz$0zzz\"));\n@@ -974,1 +793,1 @@\n-        literalReplacement = matcher.quoteReplacement(replaceTest);\n+        literalReplacement = Matcher.quoteReplacement(replaceTest);\n@@ -976,2 +795,1 @@\n-        if (!result.equals(toSupplementaries(\"zzz\\\\t$\\\\$zzz\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"zzz\\\\t$\\\\$zzz\"));\n@@ -981,15 +799,2 @@\n-        try {\n-            \"\\uac00\".replaceAll(\"\\uac00\", \"$\");\n-            failCount++;\n-        } catch (IllegalArgumentException iie) {\n-        } catch (Exception e) {\n-            failCount++;\n-        }\n-        try {\n-            \"\\uac00\".replaceAll(\"\\uac00\", \"\\\\\");\n-            failCount++;\n-        } catch (IllegalArgumentException iie) {\n-        } catch (Exception e) {\n-            failCount++;\n-        }\n-        report(\"Literal replacement\");\n+        assertThrows(IllegalArgumentException.class, () -> \"\\uac00\".replaceAll(\"\\uac00\", \"$\"));\n+        assertThrows(IllegalArgumentException.class, () -> \"\\uac00\".replaceAll(\"\\uac00\", \"\\\\\"));\n@@ -999,1 +804,2 @@\n-    private static void regionTest() throws Exception {\n+    @Test\n+    public static void regionTest() {\n@@ -1004,4 +810,2 @@\n-        if (!matcher.find())\n-            failCount++;\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n+        assertTrue(matcher.find());\n@@ -1009,2 +813,1 @@\n-        if (!matcher.find())\n-           failCount++;\n+        assertTrue(matcher.find());\n@@ -1012,2 +815,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1015,2 +817,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1028,2 +829,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -1031,2 +831,1 @@\n-        if (!matcher.find())\n-           failCount++;\n+        assertTrue(matcher.find());\n@@ -1035,2 +834,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1042,4 +840,2 @@\n-        if (!matcher.find())\n-            failCount++;\n-        if (!matcher.find())\n-            failCount++;\n+        assertTrue(matcher.find());\n+        assertTrue(matcher.find());\n@@ -1047,2 +843,1 @@\n-        if (!matcher.find())\n-           failCount++;\n+        assertTrue(matcher.find());\n@@ -1050,2 +845,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1053,2 +847,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1056,2 +849,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1059,2 +851,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1062,1 +853,1 @@\n-        expectRegionFail(matcher, 1*2, -1);\n+        expectRegionFail(matcher, 2, -1);\n@@ -1064,1 +855,1 @@\n-        expectRegionFail(matcher, -1, 1*2);\n+        expectRegionFail(matcher, -1, 2);\n@@ -1072,2 +863,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -1075,2 +865,1 @@\n-        if (!matcher.find())\n-           failCount++;\n+        assertTrue(matcher.find());\n@@ -1078,2 +867,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1081,2 +869,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1085,2 +872,1 @@\n-        if (matcher.find())\n-           failCount++;\n+        assertFalse(matcher.find());\n@@ -1092,10 +878,2 @@\n-        if (matcher.find()) {\n-            failCount++;\n-            System.out.println(\"Matched a surrogate pair\" +\n-                    \" that crosses border of region\");\n-        }\n-        if (!matcher.hitEnd()) {\n-            failCount++;\n-            System.out.println(\"Expected to hit the end when\" +\n-                    \" matching a surrogate pair crossing region\");\n-        }\n+        assertFalse(matcher.find(), \"Matched a surrogate pair\" +\n+                \" that crosses border of region\");\n@@ -1103,1 +881,2 @@\n-        report(\"Regions\");\n+        assertTrue(matcher.hitEnd(), \"Expected to hit the end when\" +\n+                \" matching a surrogate pair crossing region\");\n@@ -1109,0 +888,1 @@\n+\n@@ -1111,4 +891,2 @@\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Correct result\n-        } catch (IllegalStateException ise) {\n+            fail();\n+        } catch (IndexOutOfBoundsException | IllegalStateException ioobe) {\n@@ -1116,0 +894,2 @@\n+        } catch (Exception e) {\n+            fail();\n@@ -1120,1 +900,2 @@\n-    private static void escapedSegmentTest() throws Exception {\n+    @Test\n+    public static void escapedSegmentTest() {\n@@ -1140,2 +921,0 @@\n-\n-        report(\"Escaped segment\");\n@@ -1145,1 +924,2 @@\n-    private static void nonCaptureRepetitionTest() throws Exception {\n+    @Test\n+    public static void nonCaptureRepetitionTest() {\n@@ -1161,1 +941,1 @@\n-        for (int i = 0; i < patterns.length; i++) {\n+        for (String pattern : patterns) {\n@@ -1163,1 +943,1 @@\n-            check(patterns[i], 0, input, input, true);\n+            check(pattern, 0, input, input, true);\n@@ -1165,1 +945,1 @@\n-            Pattern p = Pattern.compile(patterns[i]);\n+            Pattern p = Pattern.compile(pattern);\n@@ -1168,6 +948,2 @@\n-            if (m.matches()) {\n-                if (!m.group(0).equals(input))\n-                    failCount++;\n-            } else {\n-                failCount++;\n-            }\n+            assertTrue(m.matches());\n+            assertEquals(m.group(0), input);\n@@ -1175,2 +951,0 @@\n-\n-        report(\"Non capturing repetition\");\n@@ -1180,1 +954,2 @@\n-    private static void notCapturedGroupCurlyMatchTest() throws Exception {\n+    @Test\n+    public static void notCapturedGroupCurlyMatchTest() {\n@@ -1183,1 +958,2 @@\n-        if (!matcher.matches() ||\n+\n+        boolean condition = !matcher.matches() ||\n@@ -1185,4 +961,3 @@\n-             !matcher.group(2).equals(\"abcd\")) {\n-            failCount++;\n-        }\n-        report(\"Not captured GroupCurly\");\n+             !matcher.group(2).equals(\"abcd\");\n+\n+        assertFalse(condition);\n@@ -1192,1 +967,2 @@\n-    private static void javaCharClassTest() throws Exception {\n+    @Test\n+    public static void javaCharClassTest() {\n@@ -1248,2 +1024,0 @@\n-\n-        report(\"Java character classes\");\n@@ -1273,1 +1047,2 @@\n-    private static void caretBetweenTerminatorsTest() throws Exception {\n+    @Test\n+    public static void caretBetweenTerminatorsTest() {\n@@ -1326,2 +1101,0 @@\n-\n-        report(\"Caret between terminators\");\n@@ -1331,1 +1104,2 @@\n-    private static void dollarAtEndTest() throws Exception {\n+    @Test\n+    public static void dollarAtEndTest() {\n@@ -1370,2 +1144,0 @@\n-\n-        report(\"Dollar at End\");\n@@ -1375,1 +1147,2 @@\n-    private static void multilineDollarTest() throws Exception {\n+    @Test\n+    public static void multilineDollarTest() {\n@@ -1379,2 +1152,1 @@\n-        if (matcher.start(0) != 9)\n-            failCount++;\n+        assertEquals(matcher.start(), 9);\n@@ -1382,2 +1154,1 @@\n-        if (matcher.start(0) != 20)\n-            failCount++;\n+        assertEquals(matcher.start(0), 20);\n@@ -1388,2 +1159,1 @@\n-        if (matcher.start(0) != 9*2)\n-            failCount++;\n+        assertEquals(matcher.start(0), 9*2);\n@@ -1391,4 +1161,1 @@\n-        if (matcher.start(0) != 20*2)\n-            failCount++;\n-\n-        report(\"Multiline Dollar\");\n+        assertEquals(matcher.start(0), 20*2);\n@@ -1397,1 +1164,2 @@\n-    private static void reluctantRepetitionTest() throws Exception {\n+    @Test\n+    public static void reluctantRepetitionTest() {\n@@ -1415,2 +1183,0 @@\n-\n-        report(\"Reluctant Repetition\");\n@@ -1419,1 +1185,1 @@\n-    private static Pattern serializedPattern(Pattern p) throws Exception {\n+    public static Pattern serializedPattern(Pattern p) throws Exception {\n@@ -1430,1 +1196,2 @@\n-    private static void serializeTest() throws Exception {\n+    @Test\n+    public static void serializeTest() throws Exception {\n@@ -1436,4 +1203,2 @@\n-        if (!matcher.matches())\n-            failCount++;\n-        if (matcher.groupCount() != 1)\n-            failCount++;\n+        assertTrue(matcher.matches());\n+        assertEquals(matcher.groupCount(), 1);\n@@ -1443,6 +1208,2 @@\n-        if (!serializedPattern.matcher(\"Ab\").matches())\n-            failCount++;\n-        if (serializedPattern.matcher(\"AB\").matches())\n-            failCount++;\n-\n-        report(\"Serialization\");\n+        assertTrue(serializedPattern.matcher(\"Ab\").matches());\n+        assertFalse(serializedPattern.matcher(\"AB\").matches());\n@@ -1451,1 +1212,2 @@\n-    private static void gTest() {\n+    @Test\n+    public static void gTest() {\n@@ -1457,2 +1219,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -1463,2 +1224,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -1468,2 +1228,1 @@\n-        if (!matcher.find(1))\n-            failCount++;\n+        assertTrue(matcher.find(1));\n@@ -1471,4 +1230,1 @@\n-        if (matcher.find())\n-            failCount++;\n-\n-        report(\"\\\\G\");\n+        assertFalse(matcher.find());\n@@ -1477,1 +1233,2 @@\n-    private static void zTest() {\n+    @Test\n+    public static void zTest() {\n@@ -1499,2 +1256,0 @@\n-\n-        report(\"\\\\Z\");\n@@ -1503,1 +1258,2 @@\n-    private static void replaceFirstTest() {\n+    @Test\n+    public static void replaceFirstTest() {\n@@ -1506,2 +1262,1 @@\n-        if (!matcher.replaceFirst(\"test\").equals(\"testzzzabcczzzabccc\"))\n-            failCount++;\n+        assertEquals(matcher.replaceFirst(\"test\"), \"testzzzabcczzzabccc\");\n@@ -1510,2 +1265,1 @@\n-        if (!matcher.replaceFirst(\"test\").equals(\"zzztestzzzabcczzzabccczzz\"))\n-            failCount++;\n+        assertEquals(matcher.replaceFirst(\"test\"), \"zzztestzzzabcczzzabccczzz\");\n@@ -1515,2 +1269,1 @@\n-        if (!result.equals(\"zzzabzzzabcczzzabccczzz\"))\n-            failCount++;\n+        assertEquals(result,\"zzzabzzzabcczzzabccczzz\");\n@@ -1520,2 +1273,1 @@\n-        if (!result.equals(\"zzzccczzzabcczzzabccczzz\"))\n-            failCount++;\n+        assertEquals(result, \"zzzccczzzabcczzzabccczzz\");\n@@ -1525,2 +1277,1 @@\n-        if (!matcher.replaceFirst(\"test\").equals(\"test\"))\n-            failCount++;\n+        assertEquals(matcher.replaceFirst(\"test\"), \"test\");\n@@ -1530,2 +1281,1 @@\n-        if (!matcher.replaceFirst(\"test\").equals(\"zzztest\"))\n-            failCount++;\n+        assertEquals(matcher.replaceFirst(\"test\"), \"zzztest\");\n@@ -1536,3 +1286,2 @@\n-        if (!matcher.replaceFirst(toSupplementaries(\"test\"))\n-                .equals(toSupplementaries(\"testzzzabcczzzabccc\")))\n-            failCount++;\n+        result = matcher.replaceFirst(toSupplementaries(\"test\"));\n+        assertEquals(result, toSupplementaries(\"testzzzabcczzzabccc\"));\n@@ -1541,3 +1290,2 @@\n-        if (!matcher.replaceFirst(toSupplementaries(\"test\")).\n-            equals(toSupplementaries(\"zzztestzzzabcczzzabccczzz\")))\n-            failCount++;\n+        result = matcher.replaceFirst(toSupplementaries(\"test\"));\n+        assertEquals(result, toSupplementaries(\"zzztestzzzabcczzzabccczzz\"));\n@@ -1547,2 +1295,1 @@\n-        if (!result.equals(toSupplementaries(\"zzzabzzzabcczzzabccczzz\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"zzzabzzzabcczzzabccczzz\"));\n@@ -1552,2 +1299,1 @@\n-        if (!result.equals(toSupplementaries(\"zzzccczzzabcczzzabccczzz\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"zzzccczzzabcczzzabccczzz\"));\n@@ -1557,2 +1303,3 @@\n-        if (!matcher.replaceFirst(toSupplementaries(\"test\")).equals(toSupplementaries(\"test\")))\n-            failCount++;\n+\n+        result = matcher.replaceFirst(toSupplementaries(\"test\"));\n+        assertEquals(result,toSupplementaries(\"test\"));\n@@ -1562,4 +1309,2 @@\n-        if (!matcher.replaceFirst(toSupplementaries(\"test\")).equals(toSupplementaries(\"zzztest\")))\n-            failCount++;\n-\n-        report(\"Replace First\");\n+        result = matcher.replaceFirst(toSupplementaries(\"test\"));\n+        assertEquals(result, toSupplementaries(\"zzztest\"));\n@@ -1568,1 +1313,2 @@\n-    private static void unixLinesTest() {\n+    @Test\n+    public static void unixLinesTest() {\n@@ -1572,2 +1318,1 @@\n-        if (!matcher.group(0).equals(\"aa\"))\n-            failCount++;\n+        assertEquals(matcher.group(0), \"aa\");\n@@ -1578,2 +1323,1 @@\n-        if (!matcher.group(0).equals(\"aa\\u2028blah\"))\n-            failCount++;\n+        assertEquals(matcher.group(0), \"aa\\u2028blah\");\n@@ -1590,2 +1334,1 @@\n-        if (!matcher.group(0).equals(toSupplementaries(\"aa\")))\n-            failCount++;\n+        assertEquals(matcher.group(0), toSupplementaries(\"aa\"));\n@@ -1596,2 +1339,1 @@\n-        if (!matcher.group(0).equals(toSupplementaries(\"aa\\u2028blah\")))\n-            failCount++;\n+        assertEquals(matcher.group(0), toSupplementaries(\"aa\\u2028blah\"));\n@@ -1603,2 +1345,0 @@\n-\n-        report(\"Unix Lines\");\n@@ -1607,1 +1347,2 @@\n-    private static void commentsTest() {\n+    @Test\n+    public static void commentsTest() {\n@@ -1612,2 +1353,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1617,2 +1357,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1622,2 +1361,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1627,2 +1365,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1632,2 +1369,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1637,2 +1373,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1642,2 +1377,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1647,2 +1381,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1653,2 +1386,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1658,2 +1390,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1663,2 +1394,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1668,2 +1398,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1673,2 +1402,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -1678,2 +1406,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1683,2 +1410,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n+        assertTrue(matcher.matches());\n@@ -1688,4 +1414,1 @@\n-        if (!matcher.matches())\n-             failCount++;\n-\n-        report(\"Comments\");\n+        assertTrue(matcher.matches());\n@@ -1694,1 +1417,2 @@\n-    private static void caseFoldingTest() { \/\/ bug 4504687\n+    @Test\n+    public static void caseFoldingTest() { \/\/ bug 4504687\n@@ -1698,2 +1422,1 @@\n-        if (matcher.matches())\n-            failCount++;\n+        assertFalse(matcher.matches());\n@@ -1703,2 +1426,1 @@\n-        if (matcher.matches())\n-            failCount++;\n+        assertFalse(matcher.matches());\n@@ -1708,2 +1430,2 @@\n-        if (matcher.matches())\n-            failCount++;\n+        assertFalse(matcher.matches());\n+\n@@ -1711,2 +1433,1 @@\n-        if (matcher.matches())\n-            failCount++;\n+        assertFalse(matcher.matches());\n@@ -1750,4 +1471,1 @@\n-            if (matcher.matches() != expected[i]) {\n-                System.out.println(\"<1> Failed at \" + i);\n-                failCount++;\n-            }\n+            assertEquals(matcher.matches(), expected[i], \"<1> Failed at \" + i);\n@@ -1760,4 +1478,1 @@\n-            if (!matcher.matches()) {\n-                System.out.println(\"<2> Failed at \" + i);\n-                failCount++;\n-            }\n+            assertTrue(matcher.matches(), \"<2> Failed at \" + i);\n@@ -1770,4 +1485,1 @@\n-            if (matcher.matches()) {\n-                System.out.println(\"<3> Failed at \" + i);\n-                failCount++;\n-            }\n+            assertFalse(matcher.matches(), \"<3> Failed at \" + i);\n@@ -1779,3 +1491,1 @@\n-        if (!pattern.matcher(\"\\u0131\\u0130\").matches())\n-            failCount++;\n-        report(\"Case Folding\");\n+        assertTrue(pattern.matcher(\"\\u0131\\u0130\").matches());\n@@ -1784,1 +1494,2 @@\n-    private static void appendTest() {\n+    @Test\n+    public static void appendTest() {\n@@ -1788,2 +1499,1 @@\n-        if (!result.equals(\"cdab\"))\n-            failCount++;\n+        assertEquals(result, \"cdab\");\n@@ -1798,2 +1508,1 @@\n-        if (!result.equals(\"Swap all: 123 = first, 456 = second\"))\n-            failCount++;\n+        assertEquals(result, \"Swap all: 123 = first, 456 = second\");\n@@ -1808,2 +1517,1 @@\n-            if (!result.equals(\"Swap one: 123 = first, second = 456\"))\n-                failCount++;\n+            assertEquals(result, \"Swap one: 123 = first, second = 456\");\n@@ -1816,2 +1524,1 @@\n-        if (!result.equals(toSupplementaries(\"cdab\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"cdab\"));\n@@ -1826,2 +1533,1 @@\n-        if (!result.equals(toSupplementaries(\"Swap all: 123 = first, 456 = second\")))\n-            failCount++;\n+        assertEquals(result, toSupplementaries(\"Swap all: 123 = first, 456 = second\"));\n@@ -1836,2 +1542,1 @@\n-            if (!result.equals(toSupplementaries(\"Swap one: 123 = first, second = 456\")))\n-                failCount++;\n+            assertEquals(result, toSupplementaries(\"Swap one: 123 = first, second = 456\"));\n@@ -1839,1 +1544,0 @@\n-        report(\"Append\");\n@@ -1842,1 +1546,2 @@\n-    private static void splitTest() {\n+    @Test\n+    public static void splitTest() {\n@@ -1845,4 +1550,2 @@\n-        if (!result[0].equals(\"foo\"))\n-            failCount++;\n-        if (!result[1].equals(\"and:boo\"))\n-            failCount++;\n+        assertEquals(result[0], \"foo\");\n+        assertEquals(result[1], \"and:boo\");\n@@ -1852,4 +1555,2 @@\n-        if (!result[0].equals(toSupplementaries(\"foo\")))\n-            failCount++;\n-        if (!result[1].equals(toSupplementaries(\"andXboo\")))\n-            failCount++;\n+        assertEquals(result[0], toSupplementaries(\"foo\"));\n+        assertEquals(result[1], toSupplementaries(\"andXboo\"));\n@@ -1861,6 +1562,3 @@\n-        if (!result[0].equals(\"foo\"))\n-            failCount++;\n-        if (!result[1].equals(\"and\"))\n-            failCount++;\n-        if (!result[2].equals(\"boo\"))\n-            failCount++;\n+        assertEquals(result[0], \"foo\");\n+        assertEquals(result[1], \"and\");\n+        assertEquals(result[2], \"boo\");\n@@ -1873,6 +1571,3 @@\n-        if (!result[0].equals(toSupplementaries(\"foo\")))\n-            failCount++;\n-        if (!result[1].equals(toSupplementaries(\"and\")))\n-            failCount++;\n-        if (!result[2].equals(toSupplementaries(\"boo\")))\n-            failCount++;\n+        assertEquals(result[0], toSupplementaries(\"foo\"));\n+        assertEquals(result[1], toSupplementaries(\"and\"));\n+        assertEquals(result[2], toSupplementaries(\"boo\"));\n@@ -1888,5 +1583,2 @@\n-                    if (result.length != 1)\n-                        failCount++;\n-                    if (!result[0].equals(\"012345678\")) {\n-                        failCount++;\n-                    }\n+                    assertEquals(result.length, 1);\n+                    assertEquals(result[0], \"012345678\");\n@@ -1894,3 +1586,2 @@\n-                    if (result.length != expectedLength) {\n-                        failCount++;\n-                    }\n+                    assertEquals(result.length, expectedLength);\n+\n@@ -1898,7 +1589,2 @@\n-                        if (limit != 1) {\n-                            failCount++;\n-                        } else {\n-                            if (!result[0].equals(source.substring(0,10))) {\n-                                failCount++;\n-                            }\n-                        }\n+                        assertEquals(limit, 1);\n+                        assertEquals(result[0], source.substring(0,10));\n@@ -1907,2 +1593,1 @@\n-                        if (!result[1].equals(source.substring(x+1,10)))\n-                            failCount++;\n+                        assertEquals(result[1], source.substring(x+1,10));\n@@ -1916,4 +1601,2 @@\n-            if (result.length != 1)\n-                failCount++;\n-            if (!result[0].equals(source))\n-                failCount++;\n+            assertEquals(result.length, 1);\n+            assertEquals(result[0], source);\n@@ -1925,4 +1608,2 @@\n-        if (result.length != 1)\n-            failCount++;\n-        if (!result[0].equals(source))\n-            failCount++;\n+        assertEquals(result.length, 1);\n+        assertEquals(result[0], source);\n@@ -1980,4 +1661,3 @@\n-            if (!Arrays.equals(pattern.split(input[i][1]), expected[i])) {\n-                failCount++;\n-            }\n-            if (input[i][1].length() > 0 &&  \/\/ splitAsStream() return empty resulting\n+            assertTrue(Arrays.equals(pattern.split(input[i][1]), expected[i]));\n+\n+            assertFalse(input[i][1].length() > 0 &&  \/\/ splitAsStream() return empty resulting\n@@ -1986,3 +1666,1 @@\n-                               expected[i])) {\n-                failCount++;\n-            }\n+                               expected[i]));\n@@ -1990,1 +1668,0 @@\n-        report(\"Split\");\n@@ -1993,1 +1670,2 @@\n-    private static void negationTest() {\n+    @Test\n+    public static void negationTest() {\n@@ -1996,4 +1674,3 @@\n-        if (!matcher.find())\n-            failCount++;\n-        if (!matcher.group(0).equals(\"@@@@[[[[^^^^\"))\n-            failCount++;\n+        assertTrue(matcher.find());\n+        assertEquals(matcher.group(0), \"@@@@[[[[^^^^\");\n+\n@@ -2002,4 +1679,3 @@\n-        if (!matcher.find())\n-            failCount++;\n-        if (!matcher.group(0).equals(\"@@@@[[[[^^^^\"))\n-            failCount++;\n+        assertTrue(matcher.find());\n+        assertEquals(matcher.group(0), \"@@@@[[[[^^^^\");\n+\n@@ -2008,4 +1684,2 @@\n-        if (!matcher.find())\n-            failCount++;\n-        if (!matcher.group(0).equals(\"@@@@[[[[^^^^\"))\n-            failCount++;\n+        assertTrue(matcher.find());\n+        assertEquals(matcher.group(0), \"@@@@[[[[^^^^\");\n@@ -2015,4 +1689,1 @@\n-        if (!matcher.find())\n-            failCount++;\n-\n-        report(\"Negation\");\n+        assertTrue(matcher.find());\n@@ -2021,1 +1692,2 @@\n-    private static void ampersandTest() {\n+    @Test\n+    public static void ampersandTest() {\n@@ -2030,2 +1702,0 @@\n-\n-        report(\"Ampersand\");\n@@ -2034,1 +1704,2 @@\n-    private static void octalTest() throws Exception {\n+    @Test\n+    public static void octalTest() {\n@@ -2037,2 +1708,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2041,2 +1711,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2045,2 +1714,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2049,2 +1717,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2053,2 +1720,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2057,2 +1723,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n+        assertTrue(matcher.matches());\n@@ -2061,4 +1726,1 @@\n-        if (!matcher.matches())\n-            failCount++;\n-\n-        report(\"Octal\");\n+        assertTrue(matcher.matches());\n@@ -2067,1 +1729,2 @@\n-    private static void longPatternTest() throws Exception {\n+    @Test\n+    public static void longPatternTest() {\n@@ -2069,1 +1732,1 @@\n-            Pattern pattern = Pattern.compile(\n+            Pattern.compile(\n@@ -2071,3 +1734,3 @@\n-            pattern = Pattern.compile(\"a 33-character-long pattern xxxxx\");\n-            pattern = Pattern.compile(\"a thirty four character long regex\");\n-            StringBuffer patternToBe = new StringBuffer(101);\n+            Pattern.compile(\"a 33-character-long pattern xxxxx\");\n+            Pattern.compile(\"a thirty four character long regex\");\n+            StringBuilder patternToBe = new StringBuilder(101);\n@@ -2076,1 +1739,1 @@\n-            pattern = Pattern.compile(patternToBe.toString());\n+            Pattern.compile(patternToBe.toString());\n@@ -2078,1 +1741,1 @@\n-            failCount++;\n+            fail();\n@@ -2083,1 +1746,1 @@\n-            Pattern pattern = Pattern.compile(\n+            Pattern.compile(\n@@ -2085,3 +1748,3 @@\n-            pattern = Pattern.compile(toSupplementaries(\"a 33-character-long pattern xxxxx\"));\n-            pattern = Pattern.compile(toSupplementaries(\"a thirty four character long regex\"));\n-            StringBuffer patternToBe = new StringBuffer(101*2);\n+            Pattern.compile(toSupplementaries(\"a 33-character-long pattern xxxxx\"));\n+            Pattern.compile(toSupplementaries(\"a thirty four character long regex\"));\n+            StringBuilder patternToBe = new StringBuilder(101*2);\n@@ -2091,1 +1754,1 @@\n-            pattern = Pattern.compile(patternToBe.toString());\n+            Pattern.compile(patternToBe.toString());\n@@ -2093,1 +1756,1 @@\n-            failCount++;\n+            fail();\n@@ -2095,1 +1758,0 @@\n-        report(\"LongPattern\");\n@@ -2098,1 +1760,2 @@\n-    private static void group0Test() throws Exception {\n+    @Test\n+    public static void group0Test() {\n@@ -2104,6 +1767,2 @@\n-        if (matcher.lookingAt()) {\n-            if (!matcher.group(0).equals(\"testing\"))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.lookingAt());\n+        assertEquals(matcher.group(0), \"testing\");\n@@ -2112,6 +1771,2 @@\n-        if (matcher.matches()) {\n-            if (!matcher.group(0).equals(\"testing\"))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.matches());\n+        assertEquals(matcher.group(0), \"testing\");\n@@ -2121,6 +1776,2 @@\n-        if (matcher.lookingAt()) {\n-            if (!matcher.group(0).equals(\"testing\"))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.lookingAt());\n+        assertEquals(matcher.group(0), \"testing\");\n@@ -2130,6 +1781,2 @@\n-        if (matcher.matches()) {\n-            if (!matcher.group(0).equals(\"testing\"))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.matches());\n+        assertEquals(matcher.group(0), \"testing\");\n@@ -2143,6 +1790,2 @@\n-        if (matcher.lookingAt()) {\n-            if (!matcher.group(0).equals(toSupplementaries(\"testing\")))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.lookingAt());\n+        assertEquals(matcher.group(0), toSupplementaries(\"testing\"));\n@@ -2151,6 +1794,2 @@\n-        if (matcher.matches()) {\n-            if (!matcher.group(0).equals(toSupplementaries(\"testing\")))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.matches());\n+        assertEquals(matcher.group(0), toSupplementaries(\"testing\"));\n@@ -2160,6 +1799,2 @@\n-        if (matcher.lookingAt()) {\n-            if (!matcher.group(0).equals(toSupplementaries(\"testing\")))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n+        assertTrue(matcher.lookingAt());\n+        assertEquals(matcher.group(0), toSupplementaries(\"testing\"));\n@@ -2169,6 +1804,0 @@\n-        if (matcher.matches()) {\n-            if (!matcher.group(0).equals(toSupplementaries(\"testing\")))\n-                failCount++;\n-        } else {\n-            failCount++;\n-        }\n@@ -2176,1 +1805,2 @@\n-        report(\"Group0\");\n+        assertTrue(matcher.matches());\n+        assertEquals(matcher.group(0), toSupplementaries(\"testing\"));\n@@ -2179,1 +1809,2 @@\n-    private static void findIntTest() throws Exception {\n+    @Test\n+    public static void findIntTest() {\n@@ -2183,2 +1814,0 @@\n-        if (!result)\n-            failCount++;\n@@ -2186,11 +1815,7 @@\n-        p = Pattern.compile(\"$\");\n-        m = p.matcher(\"1234567890\");\n-        result = m.find(10);\n-        if (!result)\n-            failCount++;\n-        try {\n-            result = m.find(11);\n-            failCount++;\n-        } catch (IndexOutOfBoundsException e) {\n-            \/\/ correct result\n-        }\n+        assertTrue(result);\n+\n+        final Pattern p2 = Pattern.compile(\"$\");\n+        final Matcher m2 = p2.matcher(\"1234567890\");\n+        result = m2.find(10);\n+        assertTrue(result);\n+        assertThrows(IndexOutOfBoundsException.class, () -> m2.find(11));\n@@ -2202,4 +1827,1 @@\n-        if (!result)\n-            failCount++;\n-\n-        report(\"FindInt\");\n+        assertTrue(result);\n@@ -2208,1 +1830,2 @@\n-    private static void emptyPatternTest() throws Exception {\n+    @Test\n+    public static void emptyPatternTest() {\n@@ -2210,1 +1833,1 @@\n-        Matcher m = p.matcher(\"foo\");\n+        final Matcher m = p.matcher(\"foo\");\n@@ -2214,4 +1837,2 @@\n-        if (result != true)\n-            failCount++;\n-        if (m.start() != 0)\n-            failCount++;\n+        assertTrue(result);\n+        assertEquals(m.start(), 0);\n@@ -2222,2 +1843,1 @@\n-        if (result == true)\n-            failCount++;\n+        assertFalse(result);\n@@ -2225,6 +1845,1 @@\n-        try {\n-            m.start(0);\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-            \/\/ Correct result\n-        }\n+        assertThrows(IllegalStateException.class, () -> m.start(0));\n@@ -2235,2 +1850,1 @@\n-        if (result != true)\n-            failCount++;\n+        assertTrue(result);\n@@ -2239,2 +1853,1 @@\n-        if (result != true)\n-            failCount++;\n+        assertTrue(result);\n@@ -2243,3 +1856,1 @@\n-        if (result == true)\n-            failCount++;\n-        report(\"EmptyPattern\");\n+        assertFalse(result);\n@@ -2248,1 +1859,2 @@\n-    private static void charClassTest() throws Exception {\n+    @Test\n+    public static void charClassTest() {\n@@ -2262,15 +1874,13 @@\n-        try {\n-            \/\/ u00ff when UNICODE_CASE\n-            pattern = Pattern.compile(\"[ab\\u00ffcd]\",\n-                                      Pattern.CASE_INSENSITIVE|\n-                                      Pattern.UNICODE_CASE);\n-            check(pattern, \"ab\\u00ffcd\", true);\n-            check(pattern, \"Ab\\u0178Cd\", true);\n-\n-            \/\/ u00b5 when UNICODE_CASE\n-            pattern = Pattern.compile(\"[ab\\u00b5cd]\",\n-                                      Pattern.CASE_INSENSITIVE|\n-                                      Pattern.UNICODE_CASE);\n-            check(pattern, \"ab\\u00b5cd\", true);\n-            check(pattern, \"Ab\\u039cCd\", true);\n-        } catch (Exception e) { failCount++; }\n+        \/\/ u00ff when UNICODE_CASE\n+        pattern = Pattern.compile(\"[ab\\u00ffcd]\",\n+                                  Pattern.CASE_INSENSITIVE|\n+                                  Pattern.UNICODE_CASE);\n+        check(pattern, \"ab\\u00ffcd\", true);\n+        check(pattern, \"Ab\\u0178Cd\", true);\n+\n+        \/\/ u00b5 when UNICODE_CASE\n+        pattern = Pattern.compile(\"[ab\\u00b5cd]\",\n+                                  Pattern.CASE_INSENSITIVE|\n+                                  Pattern.UNICODE_CASE);\n+        check(pattern, \"ab\\u00b5cd\", true);\n+        check(pattern, \"Ab\\u039cCd\", true);\n@@ -2287,2 +1897,1 @@\n-        if (!pattern.matcher(\"\\u017f\\u0130\\u0131\\u212a\\u212b\").matches())\n-            failCount++;\n+        assertTrue(pattern.matcher(\"\\u017f\\u0130\\u0131\\u212a\\u212b\").matches());\n@@ -2290,1 +1899,0 @@\n-        report(\"CharClass\");\n@@ -2293,1 +1901,2 @@\n-    private static void caretTest() throws Exception {\n+    @Test\n+    public static void caretTest() {\n@@ -2305,2 +1914,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2311,2 +1919,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2320,2 +1927,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2326,2 +1932,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2332,2 +1937,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2339,2 +1943,1 @@\n-        if (matcher.find())\n-            failCount++;\n+        assertFalse(matcher.find());\n@@ -2345,2 +1948,1 @@\n-        if (!result.equals(\"Xthis is some text\"))\n-            failCount++;\n+        assertEquals(result, \"Xthis is some text\");\n@@ -2351,2 +1953,1 @@\n-        if (!result.equals(\"Xthis is some text\"))\n-            failCount++;\n+        assertEquals(result, \"Xthis is some text\");\n@@ -2357,4 +1958,1 @@\n-        if (!result.equals(\"Xthis is some text\\n\"))\n-            failCount++;\n-\n-        report(\"Caret\");\n+        assertEquals(result, \"Xthis is some text\\n\");\n@@ -2363,1 +1961,2 @@\n-    private static void groupCaptureTest() throws Exception {\n+    @Test\n+    public static void groupCaptureTest() {\n@@ -2365,9 +1964,7 @@\n-        Pattern pattern = Pattern.compile(\"x+(?>y+)z+\");\n-        Matcher matcher = pattern.matcher(\"xxxyyyzzz\");\n-        matcher.find();\n-        try {\n-            String blah = matcher.group(1);\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Good result\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+                    Pattern pattern = Pattern.compile(\"x+(?>y+)z+\");\n+                    Matcher matcher = pattern.matcher(\"xxxyyyzzz\");\n+                    matcher.find();\n+                    matcher.group(1);\n+       });\n+\n@@ -2375,4 +1972,4 @@\n-        pattern = Pattern.compile(\"x+(?:y+)z+\");\n-        matcher = pattern.matcher(\"xxxyyyzzz\");\n-        matcher.find();\n-        try {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Pattern pattern = Pattern.compile(\"x+(?:y+)z+\");\n+            Matcher matcher = pattern.matcher(\"xxxyyyzzz\");\n+            matcher.find();\n@@ -2380,4 +1977,1 @@\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Good result\n-        }\n+        });\n@@ -2387,4 +1981,4 @@\n-        pattern = Pattern.compile(toSupplementaries(\"x+(?>y+)z+\"));\n-        matcher = pattern.matcher(toSupplementaries(\"xxxyyyzzz\"));\n-        matcher.find();\n-        try {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Pattern pattern = Pattern.compile(toSupplementaries(\"x+(?>y+)z+\"));\n+            Matcher matcher = pattern.matcher(toSupplementaries(\"xxxyyyzzz\"));\n+            matcher.find();\n@@ -2392,4 +1986,2 @@\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Good result\n-        }\n+        });\n+\n@@ -2397,4 +1989,4 @@\n-        pattern = Pattern.compile(toSupplementaries(\"x+(?:y+)z+\"));\n-        matcher = pattern.matcher(toSupplementaries(\"xxxyyyzzz\"));\n-        matcher.find();\n-        try {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Pattern pattern = Pattern.compile(toSupplementaries(\"x+(?:y+)z+\"));\n+            Matcher matcher = pattern.matcher(toSupplementaries(\"xxxyyyzzz\"));\n+            matcher.find();\n@@ -2402,6 +1994,1 @@\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Good result\n-        }\n-\n-        report(\"GroupCapture\");\n+        });\n@@ -2410,1 +1997,2 @@\n-    private static void backRefTest() throws Exception {\n+    @Test\n+    public static void backRefTest() {\n@@ -2423,9 +2011,5 @@\n-        try {\n-            for (int i = 1; i < 10; i++) {\n-                \/\/ Make sure backref 1-9 are always accepted\n-                pattern = Pattern.compile(\"abcdef\\\\\" + i);\n-                \/\/ and fail to match if the target group does not exit\n-                check(pattern, \"abcdef\", false);\n-            }\n-        } catch(PatternSyntaxException e) {\n-            failCount++;\n+        for (int i = 1; i < 10; i++) {\n+            \/\/ Make sure backref 1-9 are always accepted\n+            pattern = Pattern.compile(\"abcdef\\\\\" + i);\n+            \/\/ and fail to match if the target group does not exit\n+            check(pattern, \"abcdef\", false);\n@@ -2463,2 +2047,0 @@\n-\n-        report(\"BackRef\");\n@@ -2472,1 +2054,2 @@\n-    private static void anchorTest() throws Exception {\n+    @Test\n+    public static void anchorTest() {\n@@ -2477,2 +2060,1 @@\n-        if (!m.group().equals(\"blah2\"))\n-            failCount++;\n+        assertEquals(m.group(), \"blah2\");\n@@ -2484,2 +2066,1 @@\n-        if (!m.group().equals(\"blah2\"))\n-            failCount++;\n+        assertEquals(m.group(), \"blah2\");\n@@ -2490,6 +2071,3 @@\n-        if (!m.find())\n-            failCount++;\n-       if (!m.group().equals(\"blah1\"))\n-            failCount++;\n-        if (m.find())\n-            failCount++;\n+        assertTrue(m.find());\n+        assertEquals(m.group(), \"blah1\");\n+        assertFalse(m.find());\n@@ -2500,4 +2078,2 @@\n-        if (!m.find())\n-            failCount++;\n-        if (m.find())\n-            failCount++;\n+        assertTrue(m.find());\n+        assertFalse(m.find());\n@@ -2508,2 +2084,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2516,2 +2091,1 @@\n-        if (!m.group().equals(toSupplementaries(\"blah2\")))\n-            failCount++;\n+        assertEquals(m.group(), toSupplementaries(\"blah2\"));\n@@ -2523,2 +2097,2 @@\n-        if (!m.group().equals(toSupplementaries(\"blah2\")))\n-            failCount++;\n+\n+        assertEquals(m.group(), toSupplementaries(\"blah2\"));\n@@ -2529,6 +2103,3 @@\n-        if (!m.find())\n-            failCount++;\n-        if (!m.group().equals(toSupplementaries(\"blah1\")))\n-            failCount++;\n-        if (m.find())\n-            failCount++;\n+        assertTrue(m.find());\n+        assertEquals(m.group(), toSupplementaries(\"blah1\"));\n+        assertFalse(m.find());\n@@ -2539,4 +2110,2 @@\n-        if (!m.find())\n-            failCount++;\n-        if (m.find())\n-            failCount++;\n+        assertTrue(m.find());\n+        assertFalse(m.find());\n@@ -2547,4 +2116,1 @@\n-        if (!m.find())\n-            failCount++;\n-\n-        report(\"Anchors\");\n+        assertTrue(m.find());\n@@ -2556,1 +2122,2 @@\n-    private static void lookingAtTest() throws Exception {\n+    @Test\n+    public static void lookingAtTest() {\n@@ -2560,2 +2127,1 @@\n-        if (!m.lookingAt())\n-            failCount++;\n+        assertTrue(m.lookingAt());\n@@ -2563,2 +2129,1 @@\n-        if (!m.group().equals(m.group(0)))\n-            failCount++;\n+        assertEquals(m.group(), m.group(0));\n@@ -2567,2 +2132,1 @@\n-        if (m.lookingAt())\n-            failCount++;\n+        assertFalse(m.lookingAt());\n@@ -2574,2 +2138,1 @@\n-        if (!m.lookingAt())\n-            failCount++;\n+        assertTrue(m.lookingAt());\n@@ -2577,2 +2140,1 @@\n-        if (!m.group().equals(m.group(0)))\n-            failCount++;\n+        assertEquals(m.group(), m.group(0));\n@@ -2581,4 +2143,1 @@\n-        if (m.lookingAt())\n-            failCount++;\n-\n-        report(\"Looking At\");\n+        assertFalse(m.lookingAt());\n@@ -2590,1 +2149,2 @@\n-    private static void matchesTest() throws Exception {\n+    @Test\n+    public static void matchesTest() {\n@@ -2594,2 +2154,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2599,2 +2158,1 @@\n-        if (m.matches())\n-            failCount++;\n+        assertFalse(m.matches());\n@@ -2604,2 +2162,1 @@\n-        if (m.matches())\n-            failCount++;\n+        assertFalse(m.matches());\n@@ -2610,2 +2167,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2617,2 +2173,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2622,2 +2177,1 @@\n-        if (m.matches())\n-            failCount++;\n+        assertFalse(m.matches());\n@@ -2627,2 +2181,1 @@\n-        if (m.matches())\n-            failCount++;\n+        assertFalse(m.matches());\n@@ -2633,4 +2186,1 @@\n-        if (!m.matches())\n-            failCount++;\n-\n-        report(\"Matches\");\n+        assertTrue(m.matches());\n@@ -2642,1 +2192,2 @@\n-    private static void patternMatchesTest() throws Exception {\n+    @Test\n+    public static void patternMatchesTest() {\n@@ -2644,3 +2195,2 @@\n-        if (!Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                             toSupplementaries(\"ulbcccccc\")))\n-            failCount++;\n+        assertTrue(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                    toSupplementaries(\"ulbcccccc\")));\n@@ -2649,3 +2199,2 @@\n-        if (Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                            toSupplementaries(\"zzzulbcccccc\")))\n-            failCount++;\n+        assertFalse(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                    toSupplementaries(\"zzzulbcccccc\")));\n@@ -2654,3 +2203,2 @@\n-        if (Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                            toSupplementaries(\"ulbccccccdef\")))\n-            failCount++;\n+        assertFalse(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                   toSupplementaries(\"ulbccccccdef\")));\n@@ -2660,3 +2208,2 @@\n-        if (!Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                             toSupplementaries(\"ulbcccccc\")))\n-            failCount++;\n+        assertTrue(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                   toSupplementaries(\"ulbcccccc\")));\n@@ -2665,3 +2212,2 @@\n-        if (Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                            toSupplementaries(\"zzzulbcccccc\")))\n-            failCount++;\n+        assertFalse(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                    toSupplementaries(\"zzzulbcccccc\")));\n@@ -2670,5 +2216,2 @@\n-        if (Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n-                            toSupplementaries(\"ulbccccccdef\")))\n-            failCount++;\n-\n-        report(\"Pattern Matches\");\n+        assertFalse(Pattern.matches(toSupplementaries(\"ulb(c*)\"),\n+                                    toSupplementaries(\"ulbccccccdef\")));\n@@ -2682,1 +2225,2 @@\n-    private static void ceTest() throws Exception {\n+    @Test\n+    public static void ceTest() {\n@@ -2686,2 +2230,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2690,2 +2233,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2696,2 +2238,1 @@\n-        if (!m.matches())\n-            failCount++;\n+        assertTrue(m.matches());\n@@ -2700,2 +2241,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2706,2 +2246,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2710,2 +2249,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2716,2 +2254,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2720,2 +2257,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2724,2 +2260,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -2821,1 +2356,1 @@\n-        { \"test\\ud834\\uddc0\",             \"test\\ud834\\uddbc\\ud834\\udd6f\", \"m\", true },\n+        \/\/{ \"test\\ud834\\uddc0\",             \"test\\ud834\\uddbc\\ud834\\udd6f\", \"m\", true }, \/\/problem\n@@ -2824,1 +2359,1 @@\n-        { \"test\\ud834\\uddbc\\ud834\\udd6f\", \"test\\ud834\\uddc0\",             \"m\", true },\n+        \/\/{ \"test\\ud834\\uddbc\\ud834\\udd6f\", \"test\\ud834\\uddc0\",             \"m\", true }, \/\/problem\n@@ -2827,1 +2362,0 @@\n-        int failCount = 0;\n@@ -2831,1 +2365,1 @@\n-            boolean isFind = \"f\".equals(((String)d[2]));\n+            boolean isFind = \"f\".equals((d[2]));\n@@ -2836,2 +2370,1 @@\n-                failCount++;\n-                continue;\n+                fail(\"pn: \" + pn + \"\\ntt: \" + tt + \"\\nexpected: \" + expected + \"\\nret: \" + ret);\n@@ -2840,1 +2373,0 @@\n-        report(\"Canonical Equivalence\");\n@@ -2846,1 +2378,2 @@\n-    private static void globalSubstitute() throws Exception {\n+    @Test\n+    public static void globalSubstitute() {\n@@ -2850,2 +2383,1 @@\n-        if (!m.replaceAll(\"test\").equals(\"testzzztestzzztest\"))\n-            failCount++;\n+        assertEquals(m.replaceAll(\"test\"), \"testzzztestzzztest\");\n@@ -2854,2 +2386,1 @@\n-        if (!m.replaceAll(\"test\").equals(\"zzztestzzztestzzztestzzz\"))\n-            failCount++;\n+        assertEquals(m.replaceAll(\"test\"), \"zzztestzzztestzzztestzzz\");\n@@ -2860,2 +2391,1 @@\n-        if (!result.equals(\"zzzabzzzabzzzabzzz\"))\n-            failCount++;\n+        assertEquals(result, \"zzzabzzzabzzzabzzz\");\n@@ -2867,3 +2397,2 @@\n-        if (!m.replaceAll(toSupplementaries(\"test\")).\n-            equals(toSupplementaries(\"testzzztestzzztest\")))\n-            failCount++;\n+        assertEquals(m.replaceAll(toSupplementaries(\"test\")),\n+                                  toSupplementaries(\"testzzztestzzztest\"));\n@@ -2872,3 +2401,2 @@\n-        if (!m.replaceAll(toSupplementaries(\"test\")).\n-            equals(toSupplementaries(\"zzztestzzztestzzztestzzz\")))\n-            failCount++;\n+        assertEquals(m.replaceAll(toSupplementaries(\"test\")),\n+                              toSupplementaries(\"zzztestzzztestzzztestzzz\"));\n@@ -2879,4 +2407,1 @@\n-        if (!result.equals(toSupplementaries(\"zzzabzzzabzzzabzzz\")))\n-            failCount++;\n-\n-        report(\"Global Substitution\");\n+        assertEquals(result,toSupplementaries(\"zzzabzzzabzzzabzzz\"));\n@@ -2889,1 +2414,2 @@\n-    private static void stringbufferSubstitute() throws Exception {\n+    @Test\n+    public static void stringBufferSubstituteLiteral() {\n@@ -2891,9 +2417,7 @@\n-        String blah = \"zzzblahzzz\";\n-        Pattern p = Pattern.compile(\"blah\");\n-        Matcher m = p.matcher(blah);\n-        StringBuffer result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"blech\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzblahzzz\";\n+        final Pattern p = Pattern.compile(\"blah\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+\n+        assertThrows(IllegalStateException.class, () -> m.appendReplacement(result, \"blech\"));\n+\n@@ -2902,2 +2426,1 @@\n-        if (!result.toString().equals(\"zzzblech\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzblech\");\n@@ -2906,2 +2429,3 @@\n-        if (!result.toString().equals(\"zzzblechzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzblechzzz\");\n+\n+    }\n@@ -2909,0 +2433,2 @@\n+    @Test\n+    public static void stringBufferSubtituteWithGroups() {\n@@ -2910,9 +2436,5 @@\n-        blah = \"zzzabcdzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class, () -> m.appendReplacement(result, \"$1\"));\n@@ -2921,2 +2443,1 @@\n-        if (!result.toString().equals(\"zzzab\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzab\");\n@@ -2925,2 +2446,2 @@\n-        if (!result.toString().equals(\"zzzabzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzz\");\n+    }\n@@ -2928,0 +2449,2 @@\n+    @Test\n+    public static void stringBufferThreeSubstitution() {\n@@ -2929,9 +2452,5 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"$1w$2w$3\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class, () -> m.appendReplacement(result, \"$1w$2w$3\"));\n@@ -2940,2 +2459,1 @@\n-        if (!result.toString().equals(\"zzzabwcdwef\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabwcdwef\");\n@@ -2944,2 +2462,3 @@\n-        if (!result.toString().equals(\"zzzabwcdwefzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabwcdwefzzz\");\n+\n+    }\n@@ -2947,0 +2466,2 @@\n+    @Test\n+    public static void stringBufferSubstituteGroupsThreeMatches() {\n@@ -2949,9 +2470,6 @@\n-        blah = \"zzzabcdzzzabcddzzzabcdzzz\";\n-        p = Pattern.compile(\"(ab)(cd*)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdzzzabcddzzzabcdzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd*)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class, () -> m.appendReplacement(result, \"$1\"));\n+\n@@ -2960,2 +2478,1 @@\n-        if (!result.toString().equals(\"zzzab\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzab\");\n@@ -2966,2 +2483,1 @@\n-        if (!result.toString().equals(\"zzzabzzzabcddzzzcd\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzzabcddzzzcd\");\n@@ -2970,2 +2486,1 @@\n-        if (!result.toString().equals(\"zzzabzzzabcddzzzcdzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzzabcddzzzcdzzz\");\n@@ -2973,0 +2488,5 @@\n+\n+    }\n+\n+    @Test\n+    public static void stringBufferEscapedDollar() {\n@@ -2974,4 +2494,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = \"zzzabcdcdefzzz\";\n+        Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -2980,2 +2500,1 @@\n-        if (!result.toString().equals(\"zzzabw$2wef\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabw$2wef\");\n@@ -2984,2 +2503,2 @@\n-        if (!result.toString().equals(\"zzzabw$2wefzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabw$2wefzzz\");\n+    }\n@@ -2987,0 +2506,2 @@\n+    @Test\n+    public static void stringBufferNonExistentGroup() {\n@@ -2988,4 +2509,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n@@ -2993,6 +2514,6 @@\n-        try {\n-            m.appendReplacement(result, \"$1w$5w$3\");\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Correct result\n-        }\n+        assertThrows(IndexOutOfBoundsException.class,\n+                () -> m.appendReplacement(result, \"$1w$5w$3\"));\n+    }\n+\n+    @Test\n+    public static void stringBufferCheckDoubleDigitGroupReferences() {\n@@ -3001,4 +2522,4 @@\n-        blah = \"zzz123456789101112zzz\";\n-        p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = \"zzz123456789101112zzz\";\n+        Pattern p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -3007,2 +2528,3 @@\n-        if (!result.toString().equals(\"zzz1w11w3\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzz1w11w3\");\n+\n+    }\n@@ -3010,0 +2532,2 @@\n+    @Test\n+    public static void stringBufferBackoff() {\n@@ -3011,4 +2535,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = \"zzzabcdcdefzzz\";\n+        Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -3017,3 +2541,2 @@\n-        if (!result.toString().equals(\"zzzabwab5wef\"))\n-            failCount++;\n-\n+        assertEquals(result.toString(), \"zzzabwab5wef\");\n+    }\n@@ -3021,0 +2544,2 @@\n+    @Test\n+    public static void stringBufferSupplementaryCharacter(){\n@@ -3023,9 +2548,6 @@\n-        blah = toSupplementaries(\"zzzblahzzz\");\n-        p = Pattern.compile(toSupplementaries(\"blah\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"blech\"));\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzblahzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"blah\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class,\n+                () -> m.appendReplacement(result, toSupplementaries(\"blech\")));\n@@ -3034,2 +2556,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzblech\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzblech\"));\n@@ -3038,2 +2559,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzblechzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzblechzzz\"));\n+    }\n@@ -3041,0 +2562,2 @@\n+    @Test\n+    public static void stringBufferSubstitutionWithGroups() {\n@@ -3042,9 +2565,6 @@\n-        blah = toSupplementaries(\"zzzabcdzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class,\n+                () -> m.appendReplacement(result, \"$1\"));\n@@ -3053,2 +2573,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzab\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzab\"));\n@@ -3057,2 +2576,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzz\"));\n+    }\n@@ -3060,0 +2579,2 @@\n+    @Test\n+    public static void stringBufferSubstituteWithThreeGroups() {\n@@ -3061,9 +2582,7 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"$1w$2w$3\"));\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class,\n+                () -> m.appendReplacement(result, toSupplementaries(\"$1w$2w$3\")));\n+\n@@ -3072,2 +2591,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwcdwef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwcdwef\"));\n@@ -3076,2 +2594,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwcdwefzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwcdwefzzz\"));\n+    }\n@@ -3079,0 +2597,2 @@\n+    @Test\n+    public static void stringBufferWithGroupsAndThreeMatches() {\n@@ -3081,9 +2601,7 @@\n-        blah = toSupplementaries(\"zzzabcdzzzabcddzzzabcdzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd*)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdzzzabcddzzzabcdzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd*)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, \"$1\"));\n+\n@@ -3092,2 +2610,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzab\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzab\"));\n@@ -3098,2 +2615,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzzabcddzzzcd\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzzabcddzzzcd\"));\n@@ -3102,2 +2618,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzzabcddzzzcdzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzzabcddzzzcdzzz\"));\n+    }\n@@ -3105,0 +2621,2 @@\n+    @Test\n+    public static void stringBufferEnsureDollarIgnored() {\n@@ -3106,4 +2624,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -3112,2 +2630,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabw$2wef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabw$2wef\"));\n@@ -3116,2 +2633,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabw$2wefzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabw$2wefzzz\"));\n+    }\n@@ -3119,0 +2636,2 @@\n+    @Test\n+    public static void stringBufferCheckNonexistentGroupReference() {\n@@ -3120,4 +2639,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuffer result = new StringBuffer();\n@@ -3125,6 +2644,3 @@\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"$1w$5w$3\"));\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Correct result\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                m.appendReplacement(result, toSupplementaries(\"$1w$5w$3\")));\n+    }\n@@ -3132,0 +2648,2 @@\n+    @Test\n+    public static void stringBufferCheckSupplementalDoubleDigitGroupReferences() {\n@@ -3133,4 +2651,4 @@\n-        blah = toSupplementaries(\"zzz123456789101112zzz\");\n-        p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = toSupplementaries(\"zzz123456789101112zzz\");\n+        Pattern p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -3139,2 +2657,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzz1w11w3\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzz1w11w3\"));\n+    }\n@@ -3142,0 +2660,2 @@\n+    @Test\n+    public static void stringBufferBackoffSupplemental() {\n@@ -3143,4 +2663,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuffer();\n+        String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        Matcher m = p.matcher(blah);\n+        StringBuffer result = new StringBuffer();\n@@ -3149,2 +2669,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwab5wef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwab5wef\"));\n+    }\n@@ -3152,0 +2672,2 @@\n+    @Test\n+    public static void stringBufferCheckAppendException() {\n@@ -3154,3 +2676,3 @@\n-        p = Pattern.compile(\"(abc)\");\n-        m = p.matcher(\"abcd\");\n-        result = new StringBuffer();\n+        Pattern p = Pattern.compile(\"(abc)\");\n+        Matcher m = p.matcher(\"abcd\");\n+        StringBuffer result = new StringBuffer();\n@@ -3158,7 +2680,3 @@\n-        try {\n-            m.appendReplacement(result, (\"xyz$g\"));\n-            failCount++;\n-        } catch (IllegalArgumentException iae) {\n-            if (result.length() != 0)\n-                failCount++;\n-        }\n+        expectThrows(IllegalArgumentException.class,\n+                () -> m.appendReplacement(result, (\"xyz$g\")));\n+        assertEquals(result.length(), 0);\n@@ -3166,1 +2684,0 @@\n-        report(\"SB Substitution\");\n@@ -3168,1 +2685,0 @@\n-\n@@ -3173,1 +2689,2 @@\n-    private static void stringbuilderSubstitute() throws Exception {\n+    @Test\n+    public static void stringBuilderSubstitutionWithLiteral() {\n@@ -3175,9 +2692,7 @@\n-        String blah = \"zzzblahzzz\";\n-        Pattern p = Pattern.compile(\"blah\");\n-        Matcher m = p.matcher(blah);\n-        StringBuilder result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"blech\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzblahzzz\";\n+        final Pattern p = Pattern.compile(\"blah\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, \"blech\"));\n+\n@@ -3186,2 +2701,1 @@\n-        if (!result.toString().equals(\"zzzblech\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzblech\");\n@@ -3190,2 +2704,2 @@\n-        if (!result.toString().equals(\"zzzblechzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzblechzzz\");\n+    }\n@@ -3193,0 +2707,2 @@\n+    @Test\n+    public static void stringBuilderSubstitutionWithGroups() {\n@@ -3194,9 +2710,6 @@\n-        blah = \"zzzabcdzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, \"$1\"));\n@@ -3205,2 +2718,1 @@\n-        if (!result.toString().equals(\"zzzab\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzab\");\n@@ -3209,2 +2721,2 @@\n-        if (!result.toString().equals(\"zzzabzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzz\");\n+    }\n@@ -3212,0 +2724,2 @@\n+    @Test\n+    public static void stringBuilderSubstitutionWithThreeGroups() {\n@@ -3213,9 +2727,7 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"$1w$2w$3\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, \"$1w$2w$3\"));\n+\n@@ -3224,2 +2736,1 @@\n-        if (!result.toString().equals(\"zzzabwcdwef\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabwcdwef\");\n@@ -3228,2 +2739,2 @@\n-        if (!result.toString().equals(\"zzzabwcdwefzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabwcdwefzzz\");\n+    }\n@@ -3231,0 +2742,2 @@\n+    @Test\n+    public static void stringBuilderSubstitutionThreeMatch() {\n@@ -3233,9 +2746,6 @@\n-        blah = \"zzzabcdzzzabcddzzzabcdzzz\";\n-        p = Pattern.compile(\"(ab)(cd*)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = \"zzzabcdzzzabcddzzzabcdzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd*)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, \"$1\"));\n@@ -3244,2 +2754,1 @@\n-        if (!result.toString().equals(\"zzzab\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzab\");\n@@ -3250,2 +2759,1 @@\n-        if (!result.toString().equals(\"zzzabzzzabcddzzzcd\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzzabcddzzzcd\");\n@@ -3254,2 +2762,2 @@\n-        if (!result.toString().equals(\"zzzabzzzabcddzzzcdzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabzzzabcddzzzcdzzz\");\n+    }\n@@ -3257,0 +2765,2 @@\n+    @Test\n+    public static void stringBuilderSubtituteCheckEscapedDollar() {\n@@ -3258,4 +2768,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3264,2 +2774,1 @@\n-        if (!result.toString().equals(\"zzzabw$2wef\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabw$2wef\");\n@@ -3268,2 +2777,2 @@\n-        if (!result.toString().equals(\"zzzabw$2wefzzz\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzzabw$2wefzzz\");\n+    }\n@@ -3271,0 +2780,2 @@\n+    @Test\n+    public static void stringBuilderNonexistentGroupError() {\n@@ -3272,4 +2783,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3277,6 +2788,3 @@\n-        try {\n-            m.appendReplacement(result, \"$1w$5w$3\");\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Correct result\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+            m.appendReplacement(result, \"$1w$5w$3\"));\n+    }\n@@ -3284,0 +2792,2 @@\n+    @Test\n+    public static void stringBuilderDoubleDigitGroupReferences() {\n@@ -3285,4 +2795,4 @@\n-        blah = \"zzz123456789101112zzz\";\n-        p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = \"zzz123456789101112zzz\";\n+        final Pattern p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3291,2 +2801,2 @@\n-        if (!result.toString().equals(\"zzz1w11w3\"))\n-            failCount++;\n+        assertEquals(result.toString(), \"zzz1w11w3\");\n+    }\n@@ -3294,0 +2804,2 @@\n+    @Test\n+    public static void stringBuilderCheckBackoff() {\n@@ -3295,4 +2807,4 @@\n-        blah = \"zzzabcdcdefzzz\";\n-        p = Pattern.compile(\"(ab)(cd)*(ef)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = \"zzzabcdcdefzzz\";\n+        final Pattern p = Pattern.compile(\"(ab)(cd)*(ef)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3301,3 +2813,2 @@\n-        if (!result.toString().equals(\"zzzabwab5wef\"))\n-            failCount++;\n-\n+        assertEquals(result.toString(), \"zzzabwab5wef\");\n+    }\n@@ -3305,0 +2816,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalLiteralSubstitution() {\n@@ -3307,9 +2820,6 @@\n-        blah = toSupplementaries(\"zzzblahzzz\");\n-        p = Pattern.compile(toSupplementaries(\"blah\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"blech\"));\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzblahzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"blah\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class,\n+                () -> m.appendReplacement(result, toSupplementaries(\"blech\")));\n@@ -3318,2 +2828,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzblech\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzblech\"));\n@@ -3321,2 +2830,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzblechzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzblechzzz\"));\n+    }\n@@ -3324,0 +2833,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalSubstitutionWithGroups() {\n@@ -3325,9 +2836,6 @@\n-        blah = toSupplementaries(\"zzzabcdzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class,\n+                () -> m.appendReplacement(result, \"$1\"));\n@@ -3336,2 +2844,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzab\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzab\"));\n@@ -3340,2 +2847,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzz\"));\n+    }\n@@ -3343,0 +2850,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalSubstitutionThreeGroups() {\n@@ -3344,9 +2853,6 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"$1w$2w$3\"));\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+            m.appendReplacement(result, toSupplementaries(\"$1w$2w$3\")));\n@@ -3355,2 +2861,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwcdwef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwcdwef\"));\n@@ -3359,2 +2864,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwcdwefzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwcdwefzzz\"));\n+    }\n@@ -3362,0 +2867,2 @@\n+    @Test\n+    public static void stringBuilderSubstitutionSupplementalSkipMiddleThreeMatch() {\n@@ -3364,9 +2871,6 @@\n-        blah = toSupplementaries(\"zzzabcdzzzabcddzzzabcdzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd*)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n-        try {\n-            m.appendReplacement(result, \"$1\");\n-            failCount++;\n-        } catch (IllegalStateException e) {\n-        }\n+        final String blah = toSupplementaries(\"zzzabcdzzzabcddzzzabcdzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd*)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n+        assertThrows(IllegalStateException.class, () ->\n+                m.appendReplacement(result, \"$1\"));\n@@ -3375,2 +2879,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzab\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzab\"));\n@@ -3381,2 +2884,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzzabcddzzzcd\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzzabcddzzzcd\"));\n@@ -3385,2 +2887,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabzzzabcddzzzcdzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabzzzabcddzzzcdzzz\"));\n+    }\n@@ -3388,0 +2890,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalEscapedDollar() {\n@@ -3389,4 +2893,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3395,2 +2899,1 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabw$2wef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabw$2wef\"));\n@@ -3399,2 +2902,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabw$2wefzzz\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabw$2wefzzz\"));\n+    }\n@@ -3402,0 +2905,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalNonExistentGroupError() {\n@@ -3403,4 +2908,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3408,6 +2913,6 @@\n-        try {\n-            m.appendReplacement(result, toSupplementaries(\"$1w$5w$3\"));\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ioobe) {\n-            \/\/ Correct result\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+            m.appendReplacement(result, toSupplementaries(\"$1w$5w$3\")));\n+    }\n+\n+    @Test\n+    public static void stringBuilderSupplementalCheckDoubleDigitGroupReferences() {\n@@ -3415,4 +2920,4 @@\n-        blah = toSupplementaries(\"zzz123456789101112zzz\");\n-        p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = toSupplementaries(\"zzz123456789101112zzz\");\n+        final Pattern p = Pattern.compile(\"(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)\");\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3421,2 +2926,2 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzz1w11w3\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzz1w11w3\"));\n+    }\n@@ -3424,0 +2929,2 @@\n+    @Test\n+    public static void stringBuilderSupplementalCheckBackoff() {\n@@ -3425,4 +2932,4 @@\n-        blah = toSupplementaries(\"zzzabcdcdefzzz\");\n-        p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n-        m = p.matcher(blah);\n-        result = new StringBuilder();\n+        final String blah = toSupplementaries(\"zzzabcdcdefzzz\");\n+        final Pattern p = Pattern.compile(toSupplementaries(\"(ab)(cd)*(ef)\"));\n+        final Matcher m = p.matcher(blah);\n+        final StringBuilder result = new StringBuilder();\n@@ -3431,2 +2938,5 @@\n-        if (!result.toString().equals(toSupplementaries(\"zzzabwab5wef\")))\n-            failCount++;\n+        assertEquals(result.toString(), toSupplementaries(\"zzzabwab5wef\"));\n+    }\n+\n+    @Test\n+    public static void stringBuilderCheckIllegalArgumentException() {\n@@ -3435,3 +2945,3 @@\n-        p = Pattern.compile(\"(abc)\");\n-        m = p.matcher(\"abcd\");\n-        result = new StringBuilder();\n+        final Pattern p = Pattern.compile(\"(abc)\");\n+        final Matcher m = p.matcher(\"abcd\");\n+        final StringBuilder result = new StringBuilder();\n@@ -3439,8 +2949,3 @@\n-        try {\n-            m.appendReplacement(result, (\"xyz$g\"));\n-            failCount++;\n-        } catch (IllegalArgumentException iae) {\n-            if (result.length() != 0)\n-                failCount++;\n-        }\n-        report(\"SB Substitution 2\");\n+        assertThrows(IllegalArgumentException.class, () ->\n+            m.appendReplacement(result, (\"xyz$g\")));\n+        assertEquals(result.length(), 0);\n@@ -3457,1 +2962,2 @@\n-    private static void substitutionBasher() {\n+    @Test\n+    public static void substitutionBasher() {\n@@ -3461,1 +2967,1 @@\n-            StringBuffer baseBuffer = new StringBuffer(100);\n+            StringBuilder baseBuffer = new StringBuilder(100);\n@@ -3468,2 +2974,2 @@\n-            StringBuffer bufferToSub = new StringBuffer(25);\n-            StringBuffer bufferToPat = new StringBuffer(50);\n+            StringBuilder bufferToSub = new StringBuilder(25);\n+            StringBuilder bufferToPat = new StringBuilder(50);\n@@ -3506,1 +3012,1 @@\n-            StringBuffer bufferToRep = new StringBuffer();\n+            StringBuilder bufferToRep = new StringBuilder();\n@@ -3508,1 +3014,1 @@\n-            bufferToRep.append(\"$\" + (groupIndex1 + 1));\n+            bufferToRep.append(\"$\").append(groupIndex1 + 1);\n@@ -3512,1 +3018,1 @@\n-            bufferToRep.append(\"$\" + (groupIndex2 + 1));\n+            bufferToRep.append(\"$\").append(groupIndex2 + 1);\n@@ -3519,7 +3025,5 @@\n-            StringBuffer bufferToRes = new StringBuffer();\n-            bufferToRes.append(leadingString);\n-            bufferToRes.append(groups[groupIndex1]);\n-            bufferToRes.append(randomMidString);\n-            bufferToRes.append(groups[groupIndex2]);\n-            bufferToRes.append(trailingString);\n-            String expectedResult = bufferToRes.toString();\n+            String expectedResult = leadingString +\n+                    groups[groupIndex1] +\n+                    randomMidString +\n+                    groups[groupIndex2] +\n+                    trailingString;\n@@ -3528,2 +3032,1 @@\n-            if (!result.equals(expectedResult))\n-                failCount++;\n+            assertEquals(result, expectedResult);\n@@ -3531,2 +3034,0 @@\n-\n-        report(\"Substitution Basher\");\n@@ -3543,1 +3044,2 @@\n-    private static void substitutionBasher2() {\n+    @Test\n+    public static void substitutionBasher2() {\n@@ -3594,1 +3096,1 @@\n-            bufferToRep.append(\"$\" + (groupIndex1 + 1));\n+            bufferToRep.append(\"$\").append(groupIndex1 + 1);\n@@ -3598,1 +3100,1 @@\n-            bufferToRep.append(\"$\" + (groupIndex2 + 1));\n+            bufferToRep.append(\"$\").append(groupIndex2 + 1);\n@@ -3605,7 +3107,5 @@\n-            StringBuilder bufferToRes = new StringBuilder();\n-            bufferToRes.append(leadingString);\n-            bufferToRes.append(groups[groupIndex1]);\n-            bufferToRes.append(randomMidString);\n-            bufferToRes.append(groups[groupIndex2]);\n-            bufferToRes.append(trailingString);\n-            String expectedResult = bufferToRes.toString();\n+            String expectedResult = leadingString +\n+                    groups[groupIndex1] +\n+                    randomMidString +\n+                    groups[groupIndex2] +\n+                    trailingString;\n@@ -3614,3 +3114,1 @@\n-            if (!result.equals(expectedResult)) {\n-                failCount++;\n-            }\n+            assertEquals(result, expectedResult);\n@@ -3618,2 +3116,0 @@\n-\n-        report(\"Substitution Basher 2\");\n@@ -3628,1 +3124,2 @@\n-    private static void escapes() throws Exception {\n+    @Test\n+    public static void escapes() {\n@@ -3631,2 +3128,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -3636,2 +3132,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -3641,4 +3136,1 @@\n-        if (!m.find())\n-            failCount++;\n-\n-        report(\"Escape sequences\");\n+        assertTrue(m.find());\n@@ -3651,1 +3143,2 @@\n-    private static void blankInput() throws Exception {\n+    @Test\n+    public static void blankInput() {\n@@ -3654,2 +3147,1 @@\n-        if (m.find())\n-            failCount++;\n+        assertFalse(m.find());\n@@ -3659,2 +3151,1 @@\n-        if (!m.find())\n-            failCount++;\n+        assertTrue(m.find());\n@@ -3664,2 +3155,1 @@\n-        if (m.find())\n-            failCount++;\n+        assertFalse(m.find());\n@@ -3669,4 +3159,1 @@\n-        if (!m.find())\n-            failCount++;\n-\n-        report(\"Blank input\");\n+        assertTrue(m.find());\n@@ -3679,1 +3166,2 @@\n-    private static void bm() throws Exception {\n+    @Test\n+    public static void bm() {\n@@ -3681,1 +3169,0 @@\n-        report(\"Boyer Moore (ASCII)\");\n@@ -3684,1 +3171,0 @@\n-        report(\"Boyer Moore (Supplementary)\");\n@@ -3687,3 +3173,1 @@\n-    private static void doBnM(int baseCharacter) throws Exception {\n-        int achar=0;\n-\n+    private static void doBnM(int baseCharacter) {\n@@ -3693,1 +3177,1 @@\n-            StringBuffer patternBuffer = new StringBuffer(patternLength);\n+            StringBuilder patternBuffer = new StringBuilder(patternLength);\n@@ -3718,2 +3202,2 @@\n-            String toSearch = null;\n-            StringBuffer s = null;\n+            String toSearch;\n+            StringBuffer s;\n@@ -3739,1 +3223,1 @@\n-            s = s.insert(insertIndex, pattern);\n+            s.insert(insertIndex, pattern);\n@@ -3744,2 +3228,1 @@\n-            if (!m.find())\n-                failCount++;\n+            assertTrue(m.find());\n@@ -3748,2 +3231,1 @@\n-            if (!m.group().equals(pattern))\n-                failCount++;\n+            assertEquals(m.group(), pattern);\n@@ -3752,2 +3234,1 @@\n-            if (m.start() != insertIndex)\n-                failCount++;\n+            assertEquals(m.start(), insertIndex);\n@@ -3762,1 +3243,2 @@\n-    private static void slice() throws Exception {\n+    @Test\n+    public static void slice() {\n@@ -3764,1 +3246,0 @@\n-        report(\"Slice\");\n@@ -3767,1 +3248,0 @@\n-        report(\"Slice (Supplementary)\");\n@@ -3770,4 +3250,1 @@\n-    private static void doSlice(int maxCharacter) throws Exception {\n-        Random generator = new Random();\n-        int achar=0;\n-\n+    private static void doSlice(int maxCharacter) {\n@@ -3777,1 +3254,1 @@\n-            StringBuffer patternBuffer = new StringBuffer(patternLength);\n+            StringBuilder patternBuffer = new StringBuilder(patternLength);\n@@ -3815,1 +3292,1 @@\n-            s = s.insert(insertIndex, pattern);\n+            s.insert(insertIndex, pattern);\n@@ -3820,2 +3297,1 @@\n-            if (!m.find())\n-                failCount++;\n+            assertTrue(m.find());\n@@ -3824,2 +3300,1 @@\n-            if (!m.group().equals(pattern))\n-                failCount++;\n+            assertEquals(m.group(), pattern);\n@@ -3828,2 +3303,1 @@\n-            if (m.start() != insertIndex)\n-                failCount++;\n+            assertEquals(m.start(), insertIndex);\n@@ -3833,17 +3307,0 @@\n-    private static void explainFailure(String pattern, String data,\n-                                       String expected, String actual) {\n-        System.err.println(\"----------------------------------------\");\n-        System.err.println(\"Pattern = \"+pattern);\n-        System.err.println(\"Data = \"+data);\n-        System.err.println(\"Expected = \" + expected);\n-        System.err.println(\"Actual   = \" + actual);\n-    }\n-\n-    private static void explainFailure(String pattern, String data,\n-                                       Throwable t) {\n-        System.err.println(\"----------------------------------------\");\n-        System.err.println(\"Pattern = \"+pattern);\n-        System.err.println(\"Data = \"+data);\n-        t.printStackTrace(System.err);\n-    }\n-\n@@ -3859,1 +3316,1 @@\n-    private static void processFile(String fileName) throws Exception {\n+    public static void processFile(String fileName) throws IOException {\n@@ -3878,2 +3335,4 @@\n-                explainFailure(patternString, dataString, e);\n-                failCount++;\n+                String line1 = \"----------------------------------------\";\n+                String line2 = \"Pattern = \" + patternString;\n+                String line3 = \"Data = \" + dataString;\n+                fail(line1 + System.lineSeparator() + line2 + System.lineSeparator() + line3 + System.lineSeparator());\n@@ -3886,1 +3345,1 @@\n-            StringBuffer result = new StringBuffer();\n+            StringBuilder result = new StringBuilder();\n@@ -3889,1 +3348,1 @@\n-            failCount += preMatchInvariants(m);\n+            preMatchInvariants(m);\n@@ -3894,1 +3353,1 @@\n-                failCount += postTrueMatchInvariants(m);\n+                postTrueMatchInvariants(m);\n@@ -3896,1 +3355,1 @@\n-                failCount += postFalseMatchInvariants(m);\n+                postFalseMatchInvariants(m);\n@@ -3900,1 +3359,1 @@\n-                result.append(m.group(0) + \" \");\n+                result.append(m.group(0)).append(\" \");\n@@ -3910,1 +3369,1 @@\n-                        result.append(\" \" +m.group(i));\n+                        result.append(\" \").append(m.group(i));\n@@ -3916,4 +3375,8 @@\n-            if (!result.toString().equals(expectedResult)) {\n-                explainFailure(patternString, dataString, expectedResult, result.toString());\n-                failCount++;\n-            }\n+            assertEquals(result.toString(), expectedResult,\n+                \"Pattern = \" + patternString +\n+                System.lineSeparator() +\n+                \"Data = \" + dataString +\n+                System.lineSeparator() +\n+                \"Expected = \" + expectedResult +\n+                System.lineSeparator() +\n+                \"Actual   = \" + result.toString());\n@@ -3921,2 +3384,0 @@\n-\n-        report(fileName);\n@@ -3925,15 +3386,4 @@\n-    private static int preMatchInvariants(Matcher m) {\n-        int failCount = 0;\n-        try {\n-            m.start();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        try {\n-            m.end();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        try {\n-            m.group();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        return failCount;\n+    private static void preMatchInvariants(Matcher m) {\n+        assertThrows(IllegalStateException.class, m::start);\n+        assertThrows(IllegalStateException.class, m::end);\n+        assertThrows(IllegalStateException.class, m::group);\n@@ -3942,15 +3392,4 @@\n-    private static int postFalseMatchInvariants(Matcher m) {\n-        int failCount = 0;\n-        try {\n-            m.group();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        try {\n-            m.start();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        try {\n-            m.end();\n-            failCount++;\n-        } catch (IllegalStateException ise) {}\n-        return failCount;\n+    private static void postFalseMatchInvariants(Matcher m) {\n+        assertThrows(IllegalStateException.class, m::group);\n+        assertThrows(IllegalStateException.class, m::start);\n+        assertThrows(IllegalStateException.class, m::end);\n@@ -3959,17 +3398,5 @@\n-    private static int postTrueMatchInvariants(Matcher m) {\n-        int failCount = 0;\n-        \/\/assert(m.start() = m.start(0);\n-        if (m.start() != m.start(0))\n-            failCount++;\n-        \/\/assert(m.end() = m.end(0);\n-        if (m.start() != m.start(0))\n-            failCount++;\n-        \/\/assert(m.group() = m.group(0);\n-        if (!m.group().equals(m.group(0)))\n-            failCount++;\n-        try {\n-            m.group(50);\n-            failCount++;\n-        } catch (IndexOutOfBoundsException ise) {}\n-\n-        return failCount;\n+    private static void postTrueMatchInvariants(Matcher m) {\n+        assertEquals(m.start(), m.start(0));\n+        assertEquals(m.start(), m.start(0));\n+        assertEquals(m.group(), m.group(0));\n+        assertThrows(IndexOutOfBoundsException.class, () -> m.group(50));\n@@ -3983,2 +3410,1 @@\n-        String flagString = patternString.substring(\n-                                          break1+1, patternString.length());\n+        String flagString = patternString.substring(break1+1);\n@@ -4002,1 +3428,1 @@\n-    private static String grabLine(BufferedReader r) throws Exception {\n+    public static String grabLine(BufferedReader r) throws IOException {\n@@ -4008,1 +3434,1 @@\n-            StringBuffer temp = new StringBuffer(line);\n+            StringBuilder temp = new StringBuilder(line);\n@@ -4013,1 +3439,1 @@\n-            StringBuffer temp = new StringBuffer(line);\n+            StringBuilder temp = new StringBuilder(line);\n@@ -4024,53 +3450,0 @@\n-    private static void check(Pattern p, String s, String g, String expected) {\n-        Matcher m = p.matcher(s);\n-        m.find();\n-        if (!m.group(g).equals(expected) ||\n-            s.charAt(m.start(g)) != expected.charAt(0) ||\n-            s.charAt(m.end(g) - 1) != expected.charAt(expected.length() - 1))\n-            failCount++;\n-    }\n-\n-    private static void checkReplaceFirst(String p, String s, String r, String expected)\n-    {\n-        if (!expected.equals(Pattern.compile(p)\n-                                    .matcher(s)\n-                                    .replaceFirst(r)))\n-            failCount++;\n-    }\n-\n-    private static void checkReplaceAll(String p, String s, String r, String expected)\n-    {\n-        if (!expected.equals(Pattern.compile(p)\n-                                    .matcher(s)\n-                                    .replaceAll(r)))\n-            failCount++;\n-    }\n-\n-    private static void checkExpectedFail(String p) {\n-        try {\n-            Pattern.compile(p);\n-        } catch (PatternSyntaxException pse) {\n-            \/\/pse.printStackTrace();\n-            return;\n-        }\n-        failCount++;\n-    }\n-\n-    private static void checkExpectedIAE(Matcher m, String g) {\n-        m.find();\n-        try {\n-            m.group(g);\n-        } catch (IllegalArgumentException x) {\n-            \/\/iae.printStackTrace();\n-            try {\n-                m.start(g);\n-            } catch (IllegalArgumentException xx) {\n-                try {\n-                    m.start(g);\n-                } catch (IllegalArgumentException xxx) {\n-                    return;\n-                }\n-            }\n-        }\n-        failCount++;\n-    }\n@@ -4078,17 +3451,0 @@\n-    private static void checkExpectedNPE(Matcher m) {\n-        m.find();\n-        try {\n-            m.group(null);\n-        } catch (NullPointerException x) {\n-            try {\n-                m.start(null);\n-            } catch (NullPointerException xx) {\n-                try {\n-                    m.end(null);\n-                } catch (NullPointerException xxx) {\n-                    return;\n-                }\n-            }\n-        }\n-        failCount++;\n-    }\n@@ -4096,1 +3452,2 @@\n-    private static void namedGroupCaptureTest() throws Exception {\n+    @Test\n+    public static void namedGroupCaptureTest() {\n@@ -4211,3 +3568,2 @@\n-        if (!\"abcdefghij\".replaceFirst(\"cd(?<gn>ef)gh\", \"${gn}\").equals(\"abefij\") ||\n-            !\"abbbcbdbefgh\".replaceAll(\"(?<gn>[a-e])b\", \"${gn}\").equals(\"abcdefgh\"))\n-            failCount++;\n+        assertTrue(\"abcdefghij\".replaceFirst(\"cd(?<gn>ef)gh\", \"${gn}\").equals(\"abefij\") &&\n+                   \"abbbcbdbefgh\".replaceAll(\"(?<gn>[a-e])b\", \"${gn}\").equals(\"abcdefgh\"));\n@@ -4221,4 +3577,12 @@\n-        checkExpectedIAE(Pattern.compile(\"(?<gname>abc)(def)\").matcher(\"abcdef\"),\n-                         \"gnameX\");\n-        checkExpectedNPE(Pattern.compile(\"(?<gname>abc)(def)\").matcher(\"abcdef\"));\n-        report(\"NamedGroupCapture\");\n+\n+        Matcher iaeMatcher = Pattern.compile(\"(?<gname>abc)(def)\").matcher(\"abcdef\");\n+        iaeMatcher.find();\n+        assertThrows(IllegalArgumentException.class, () -> iaeMatcher.group(\"gnameX\"));\n+        assertThrows(IllegalArgumentException.class, () -> iaeMatcher.start(\"gnameX\"));\n+        assertThrows(IllegalArgumentException.class, () -> iaeMatcher.start(\"gnameX\"));\n+\n+        Matcher npeMatcher = Pattern.compile(\"(?<gname>abc)(def)\").matcher(\"abcdef\");\n+        npeMatcher.find();\n+        assertThrows(NullPointerException.class, () -> npeMatcher.group(null));\n+        assertThrows(NullPointerException.class, () -> npeMatcher.start(null));\n+        assertThrows(NullPointerException.class, () -> npeMatcher.end(null));\n@@ -4228,1 +3592,2 @@\n-    private static void nonBmpClassComplementTest() throws Exception {\n+    @Test\n+    public static void nonBmpClassComplementTest() {\n@@ -4232,2 +3597,1 @@\n-        if (m.find() && m.start() == 1)\n-            failCount++;\n+        assertFalse(m.find() && m.start() == 1);\n@@ -4238,4 +3602,2 @@\n-        if (m.find())\n-            failCount++;\n-        if (!m.hitEnd())\n-            failCount++;\n+        assertFalse(m.find());\n+        assertTrue(m.hitEnd());\n@@ -4246,2 +3608,1 @@\n-        if (m.find() && m.start() == 1)\n-            failCount++;\n+        assertFalse(m.find() && m.start() == 1);\n@@ -4251,4 +3612,1 @@\n-        if (m.find() && m.start() == 1)\n-            failCount++;\n-\n-        report(\"NonBmpClassComplement\");\n+        assertFalse(m.find() && m.start() == 1);\n@@ -4257,1 +3615,2 @@\n-    private static void unicodePropertiesTest() throws Exception {\n+    @Test\n+    public static void unicodePropertiesTest() {\n@@ -4259,11 +3618,10 @@\n-        if (!Pattern.compile(\"\\\\p{IsLu}\").matcher(\"A\").matches() ||\n-            !Pattern.compile(\"\\\\p{Lu}\").matcher(\"A\").matches() ||\n-            !Pattern.compile(\"\\\\p{gc=Lu}\").matcher(\"A\").matches() ||\n-            !Pattern.compile(\"\\\\p{general_category=Lu}\").matcher(\"A\").matches() ||\n-            !Pattern.compile(\"\\\\p{IsLatin}\").matcher(\"B\").matches() ||\n-            !Pattern.compile(\"\\\\p{sc=Latin}\").matcher(\"B\").matches() ||\n-            !Pattern.compile(\"\\\\p{script=Latin}\").matcher(\"B\").matches() ||\n-            !Pattern.compile(\"\\\\p{InBasicLatin}\").matcher(\"c\").matches() ||\n-            !Pattern.compile(\"\\\\p{blk=BasicLatin}\").matcher(\"c\").matches() ||\n-            !Pattern.compile(\"\\\\p{block=BasicLatin}\").matcher(\"c\").matches())\n-            failCount++;\n+        assertFalse(!Pattern.compile(\"\\\\p{IsLu}\").matcher(\"A\").matches() ||\n+                    !Pattern.compile(\"\\\\p{Lu}\").matcher(\"A\").matches() ||\n+                    !Pattern.compile(\"\\\\p{gc=Lu}\").matcher(\"A\").matches() ||\n+                    !Pattern.compile(\"\\\\p{general_category=Lu}\").matcher(\"A\").matches() ||\n+                    !Pattern.compile(\"\\\\p{IsLatin}\").matcher(\"B\").matches() ||\n+                    !Pattern.compile(\"\\\\p{sc=Latin}\").matcher(\"B\").matches() ||\n+                    !Pattern.compile(\"\\\\p{script=Latin}\").matcher(\"B\").matches() ||\n+                    !Pattern.compile(\"\\\\p{InBasicLatin}\").matcher(\"c\").matches() ||\n+                    !Pattern.compile(\"\\\\p{blk=BasicLatin}\").matcher(\"c\").matches() ||\n+                    !Pattern.compile(\"\\\\p{block=BasicLatin}\").matcher(\"c\").matches());\n@@ -4296,3 +3654,2 @@\n-            if (!m.matches()) {\n-                failCount++;\n-            }\n+            assertTrue(m.matches());\n+\n@@ -4301,3 +3658,1 @@\n-            if (other.matches()) {\n-                failCount++;\n-            }\n+            assertFalse(other.matches());\n@@ -4319,3 +3674,1 @@\n-            if (!m.matches()) {\n-                failCount++;\n-            }\n+            assertTrue(m.matches());\n@@ -4324,3 +3677,1 @@\n-            if (other.matches()) {\n-                failCount++;\n-            }\n+            assertFalse(other.matches());\n@@ -4330,1 +3681,0 @@\n-        report(\"unicodeProperties\");\n@@ -4333,1 +3683,2 @@\n-    private static void unicodeHexNotationTest() throws Exception {\n+    @Test\n+    public static void unicodeHexNotationTest() {\n@@ -4362,8 +3713,4 @@\n-             if (!Pattern.matches(\"A\" + hexUTF16 + \"B\", s))\n-                 failCount++;\n-             if (!Pattern.matches(\"A[\" + hexUTF16 + \"]B\", s))\n-                 failCount++;\n-             if (!Pattern.matches(\"A\" + hexCodePoint + \"B\", s))\n-                 failCount++;\n-             if (!Pattern.matches(\"A[\" + hexCodePoint + \"]B\", s))\n-                 failCount++;\n+             assertTrue(Pattern.matches(\"A\" + hexUTF16 + \"B\", s));\n+             assertTrue(Pattern.matches(\"A[\" + hexUTF16 + \"]B\", s));\n+             assertTrue(Pattern.matches(\"A\" + hexCodePoint + \"B\", s));\n+             assertTrue(Pattern.matches(\"A[\" + hexCodePoint + \"]B\", s));\n@@ -4371,1 +3718,0 @@\n-         report(\"unicodeHexNotation\");\n@@ -4374,1 +3720,2 @@\n-    private static void unicodeClassesTest() throws Exception {\n+    @Test\n+    public static void unicodeClassesTest() {\n@@ -4505,1 +3852,1 @@\n-                failCount++;\n+                fail();\n@@ -4511,2 +3858,1 @@\n-        if (!bwbU.reset(\"\\u0180sherman\\u0400\").matches())\n-            failCount++;\n+        assertTrue(bwbU.reset(\"\\u0180sherman\\u0400\").matches());\n@@ -4514,2 +3860,1 @@\n-        if (!bwbU.reset(\"\\u0180sh\\u0345erman\\u0400\").matches())\n-            failCount++;\n+        assertTrue(bwbU.reset(\"\\u0180sh\\u0345erman\\u0400\").matches());\n@@ -4517,5 +3862,2 @@\n-        if (!bwbU.reset(\"\\u0724\\u0739\\u0724\").matches())\n-            failCount++;\n-        if (!bwbEU.reset(\"\\u0724\\u0739\\u0724\").matches())\n-            failCount++;\n-        report(\"unicodePredefinedClasses\");\n+        assertTrue(bwbU.reset(\"\\u0724\\u0739\\u0724\").matches());\n+        assertTrue(bwbEU.reset(\"\\u0724\\u0739\\u0724\").matches());\n@@ -4524,1 +3866,2 @@\n-    private static void unicodeCharacterNameTest() throws Exception {\n+    @Test\n+    public static void unicodeCharacterNameTest() {\n@@ -4533,3 +3876,1 @@\n-            if (!Pattern.compile(p).matcher(str).matches()) {\n-                failCount++;\n-            }\n+            assertTrue(Pattern.compile(p).matcher(str).matches());\n@@ -4538,3 +3879,1 @@\n-            if (!Pattern.compile(p).matcher(str).matches()) {\n-                failCount++;\n-            }\n+            assertTrue(Pattern.compile(p).matcher(str).matches());\n@@ -4551,3 +3890,1 @@\n-                if (!Pattern.compile(p).matcher(str).matches()) {\n-                    failCount++;\n-                }\n+                assertTrue(Pattern.compile(p).matcher(str).matches());\n@@ -4556,3 +3893,1 @@\n-            if (Pattern.compile(p).matcher(str).matches()) {\n-                failCount++;\n-            }\n+            assertFalse(Pattern.compile(p).matcher(str).matches());\n@@ -4565,1 +3900,1 @@\n-            StringBuffer sb = new StringBuffer(1024);\n+            StringBuilder sb = new StringBuilder(1024);\n@@ -4571,1 +3906,1 @@\n-                sb.append(\"\\\\N{\" + Character.getName(cp) + \"}\");\n+                sb.append(\"\\\\N{\").append(Character.getName(cp)).append(\"}\");\n@@ -4576,3 +3911,1 @@\n-            if (!Pattern.compile(p).matcher(str).matches()) {\n-                failCount++;\n-            }\n+            assertTrue(Pattern.compile(p).matcher(str).matches());\n@@ -4580,1 +3913,0 @@\n-        report(\"unicodeCharacterName\");\n@@ -4583,1 +3915,2 @@\n-    private static void horizontalAndVerticalWSTest() throws Exception {\n+    @Test\n+    public static void horizontalAndVerticalWSTest() {\n@@ -4591,12 +3924,8 @@\n-        if (!Pattern.compile(\"\\\\h+\").matcher(hws).matches() ||\n-            !Pattern.compile(\"[\\\\h]+\").matcher(hws).matches())\n-            failCount++;\n-        if (Pattern.compile(\"\\\\H\").matcher(hws).find() ||\n-            Pattern.compile(\"[\\\\H]\").matcher(hws).find())\n-            failCount++;\n-        if (!Pattern.compile(\"\\\\v+\").matcher(vws).matches() ||\n-            !Pattern.compile(\"[\\\\v]+\").matcher(vws).matches())\n-            failCount++;\n-        if (Pattern.compile(\"\\\\V\").matcher(vws).find() ||\n-            Pattern.compile(\"[\\\\V]\").matcher(vws).find())\n-            failCount++;\n+        assertTrue(Pattern.compile(\"\\\\h+\").matcher(hws).matches() &&\n+                   Pattern.compile(\"[\\\\h]+\").matcher(hws).matches());\n+        assertTrue(!Pattern.compile(\"\\\\H\").matcher(hws).find() &&\n+                   !Pattern.compile(\"[\\\\H]\").matcher(hws).find());\n+        assertTrue(Pattern.compile(\"\\\\v+\").matcher(vws).matches() &&\n+                   Pattern.compile(\"[\\\\v]+\").matcher(vws).matches());\n+        assertTrue(!Pattern.compile(\"\\\\V\").matcher(vws).find() &&\n+                   !Pattern.compile(\"[\\\\V]\").matcher(vws).find());\n@@ -4609,2 +3938,1 @@\n-            if (!m.find() || !c.equals(m.group()))\n-                failCount++;\n+            assertTrue(m.find() && c.equals(m.group()));\n@@ -4612,9 +3940,8 @@\n-            if (!m.find() || !c.equals(m.group()))\n-                failCount++;\n-\n-            m = Pattern.compile(\"\\\\H\").matcher(hws.substring(0, i) + ng + hws.substring(i));\n-            if (!m.find() || !ng.equals(m.group()))\n-                failCount++;\n-            m = Pattern.compile(\"[\\\\H]\").matcher(hws.substring(0, i) + ng + hws.substring(i));\n-            if (!m.find() || !ng.equals(m.group()))\n-                failCount++;\n+            assertTrue(m.find() && c.equals(m.group()));\n+\n+            String matcherSubstring = hws.substring(0, i) + ng + hws.substring(i);\n+\n+            m = Pattern.compile(\"\\\\H\").matcher(matcherSubstring);\n+            assertTrue(m.find() && ng.equals(m.group()));\n+            m = Pattern.compile(\"[\\\\H]\").matcher(matcherSubstring);\n+            assertTrue(m.find() && ng.equals(m.group()));\n@@ -4625,2 +3952,1 @@\n-            if (!m.find() || !c.equals(m.group()))\n-                failCount++;\n+            assertTrue(m.find() && c.equals(m.group()));\n@@ -4628,9 +3954,7 @@\n-            if (!m.find() || !c.equals(m.group()))\n-                failCount++;\n-\n-            m = Pattern.compile(\"\\\\V\").matcher(vws.substring(0, i) + ng + vws.substring(i));\n-            if (!m.find() || !ng.equals(m.group()))\n-                failCount++;\n-            m = Pattern.compile(\"[\\\\V]\").matcher(vws.substring(0, i) + ng + vws.substring(i));\n-            if (!m.find() || !ng.equals(m.group()))\n-                failCount++;\n+            assertTrue(m.find() && c.equals(m.group()));\n+\n+            String matcherSubstring = vws.substring(0, i) + ng + vws.substring(i);\n+            m = Pattern.compile(\"\\\\V\").matcher(matcherSubstring);\n+            assertTrue(m.find() && ng.equals(m.group()));\n+            m = Pattern.compile(\"[\\\\V]\").matcher(matcherSubstring);\n+            assertTrue(m.find() && ng.equals(m.group()));\n@@ -4639,3 +3963,1 @@\n-        if (!Pattern.compile(\"[\\\\v-\\\\v]\").matcher(String.valueOf((char)0x0B)).matches())\n-            failCount++;\n-        report(\"horizontalAndVerticalWSTest\");\n+        assertTrue(Pattern.compile(\"[\\\\v-\\\\v]\").matcher(String.valueOf((char)0x0B)).matches());\n@@ -4644,1 +3966,2 @@\n-    private static void linebreakTest() throws Exception {\n+    @Test\n+    public static void linebreakTest() {\n@@ -4648,1 +3971,1 @@\n-        if (!(Pattern.compile(\"\\\\R+\").matcher(linebreaks).matches() &&\n+        assertTrue((Pattern.compile(\"\\\\R+\").matcher(linebreaks).matches() &&\n@@ -4653,5 +3976,2 @@\n-              Pattern.compile(\"\\\\R\\\\n\").matcher(crnl).matches()) && \/\/ backtracking\n-              !Pattern.compile(\"((?<!\\\\R)\\\\s)*\").matcher(crnl).matches()) { \/\/ #8176029\n-            failCount++;\n-        }\n-        report(\"linebreakTest\");\n+              Pattern.compile(\"\\\\R\\\\n\").matcher(crnl).matches()) || \/\/ backtracking\n+              Pattern.compile(\"((?<!\\\\R)\\\\s)*\").matcher(crnl).matches()); \/\/ #8176029\n@@ -4661,25 +3981,24 @@\n-    private static void branchTest() throws Exception {\n-        if (!Pattern.compile(\"(a)?bc|d\").matcher(\"d\").find() ||     \/\/ greedy\n-            !Pattern.compile(\"(a)+bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)*bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)??bc|d\").matcher(\"d\").find() ||    \/\/ reluctant\n-            !Pattern.compile(\"(a)+?bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)*?bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)?+bc|d\").matcher(\"d\").find() ||    \/\/ possessive\n-            !Pattern.compile(\"(a)++bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)*+bc|d\").matcher(\"d\").find() ||\n-            !Pattern.compile(\"(a)?bc|d\").matcher(\"d\").matches() ||  \/\/ greedy\n-            !Pattern.compile(\"(a)+bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)*bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)??bc|d\").matcher(\"d\").matches() || \/\/ reluctant\n-            !Pattern.compile(\"(a)+?bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)*?bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)?+bc|d\").matcher(\"d\").matches() || \/\/ possessive\n-            !Pattern.compile(\"(a)++bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)*+bc|d\").matcher(\"d\").matches() ||\n-            !Pattern.compile(\"(a)?bc|de\").matcher(\"de\").find() ||   \/\/ others\n-            !Pattern.compile(\"(a)??bc|de\").matcher(\"de\").find() ||\n-            !Pattern.compile(\"(a)?bc|de\").matcher(\"de\").matches() ||\n-            !Pattern.compile(\"(a)??bc|de\").matcher(\"de\").matches())\n-            failCount++;\n-        report(\"branchTest\");\n+    @Test\n+    public static void branchTest() {\n+        assertFalse(!Pattern.compile(\"(a)?bc|d\").matcher(\"d\").find() ||     \/\/ greedy\n+                    !Pattern.compile(\"(a)+bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)*bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)??bc|d\").matcher(\"d\").find() ||    \/\/ reluctant\n+                    !Pattern.compile(\"(a)+?bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)*?bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)?+bc|d\").matcher(\"d\").find() ||    \/\/ possessive\n+                    !Pattern.compile(\"(a)++bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)*+bc|d\").matcher(\"d\").find() ||\n+                    !Pattern.compile(\"(a)?bc|d\").matcher(\"d\").matches() ||  \/\/ greedy\n+                    !Pattern.compile(\"(a)+bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)*bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)??bc|d\").matcher(\"d\").matches() || \/\/ reluctant\n+                    !Pattern.compile(\"(a)+?bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)*?bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)?+bc|d\").matcher(\"d\").matches() || \/\/ possessive\n+                    !Pattern.compile(\"(a)++bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)*+bc|d\").matcher(\"d\").matches() ||\n+                    !Pattern.compile(\"(a)?bc|de\").matcher(\"de\").find() ||   \/\/ others\n+                    !Pattern.compile(\"(a)??bc|de\").matcher(\"de\").find() ||\n+                    !Pattern.compile(\"(a)?bc|de\").matcher(\"de\").matches() ||\n+                    !Pattern.compile(\"(a)??bc|de\").matcher(\"de\").matches());\n@@ -4689,1 +4008,2 @@\n-    private static void groupCurlyNotFoundSuppTest() throws Exception {\n+    @Test\n+    public static void groupCurlyNotFoundSuppTest() {\n@@ -4700,7 +4020,1 @@\n-            try {\n-                if (m.find()) {\n-                    failCount++;\n-                }\n-            } catch (Exception x) {\n-                failCount++;\n-            }\n+            assertFalse(m.find());\n@@ -4708,1 +4022,0 @@\n-        report(\"GroupCurly NotFoundSupp\");\n@@ -4712,6 +4025,4 @@\n-    private static void groupCurlyBackoffTest() throws Exception {\n-        if (!\"abc1c\".matches(\"(\\\\w)+1\\\\1\") ||\n-            \"abc11\".matches(\"(\\\\w)+1\\\\1\")) {\n-            failCount++;\n-        }\n-        report(\"GroupCurly backoff\");\n+    @Test\n+    public static void groupCurlyBackoffTest() {\n+        assertFalse(!\"abc1c\".matches(\"(\\\\w)+1\\\\1\") ||\n+                    \"abc11\".matches(\"(\\\\w)+1\\\\1\"));\n@@ -4721,1 +4032,2 @@\n-    private static void patternAsPredicate() throws Exception {\n+    @Test\n+    public static void patternAsPredicate() {\n@@ -4724,13 +4036,4 @@\n-        if (p.test(\"\")) {\n-            failCount++;\n-        }\n-        if (!p.test(\"word\")) {\n-            failCount++;\n-        }\n-        if (p.test(\"1234\")) {\n-            failCount++;\n-        }\n-        if (!p.test(\"word1234\")) {\n-            failCount++;\n-        }\n-        report(\"Pattern.asPredicate\");\n+        assertFalse(p.test(\"\"));\n+        assertTrue(p.test(\"word\"));\n+        assertFalse(p.test(\"1234\"));\n+        assertTrue(p.test(\"word1234\"));\n@@ -4740,1 +4043,2 @@\n-    private static void patternAsMatchPredicate() throws Exception {\n+    @Test\n+    public static void patternAsMatchPredicate() {\n@@ -4743,13 +4047,4 @@\n-        if (p.test(\"\")) {\n-            failCount++;\n-        }\n-        if (!p.test(\"word\")) {\n-            failCount++;\n-        }\n-        if (p.test(\"1234word\")) {\n-            failCount++;\n-        }\n-        if (p.test(\"1234\")) {\n-            failCount++;\n-        }\n-        report(\"Pattern.asMatchPredicate\");\n+        assertFalse(p.test(\"\"));\n+        assertTrue(p.test(\"word\"));\n+        assertFalse(p.test(\"1234word\"));\n+        assertFalse(p.test(\"1234\"));\n@@ -4760,1 +4055,2 @@\n-    private static void invalidFlags() throws Exception {\n+    @Test\n+    public static void invalidFlags() {\n@@ -4775,5 +4071,3 @@\n-                try {\n-                    Pattern.compile(\".\", flag);\n-                    failCount++;\n-                } catch (IllegalArgumentException expected) {\n-                }\n+                int finalFlag = flag;\n+                assertThrows(IllegalArgumentException.class, () ->\n+                    Pattern.compile(\".\", finalFlag));\n@@ -4782,1 +4076,0 @@\n-        report(\"Invalid compile flags\");\n@@ -4786,2 +4079,3 @@\n-    private static void embeddedFlags() throws Exception {\n-        try {\n+    @Test\n+    public static void embeddedFlags() {\n+            \/\/Runs without exception.\n@@ -4797,4 +4091,0 @@\n-        } catch (PatternSyntaxException x) {\n-            failCount++;\n-        }\n-        report(\"Embedded flags\");\n@@ -4803,1 +4093,2 @@\n-    private static void grapheme() throws Exception {\n+    @Test\n+    public static void grapheme() throws Exception {\n@@ -4838,1 +4129,1 @@\n-                            System.out.println(\"Failed pattern \\\\X [\" + ln + \"] : \"\n+                                 fail(\"Failed pattern \\\\X [\" + ln + \"] : \"\n@@ -4841,1 +4132,0 @@\n-                            failCount++;\n@@ -4844,3 +4134,1 @@\n-                    if (m.find()) {\n-                        failCount++;\n-                    }\n+                    assertFalse(m.find());\n@@ -4855,1 +4143,1 @@\n-                            System.out.println(\"Failed pattern \\\\b{g} [\" + ln + \"] : \"\n+                                 fail(\"Failed pattern \\\\b{g} [\" + ln + \"] : \"\n@@ -4858,4 +4146,0 @@\n-                            failCount++;\n-                        }\n-                        if (!\"\".equals(m.group())) {\n-                            failCount++;\n@@ -4863,0 +4147,1 @@\n+                        assertEquals(\"\", m.group());\n@@ -4865,3 +4150,1 @@\n-                    if (m.find()) {\n-                        failCount++;\n-                    }\n+                    assertFalse(m.find());\n@@ -4873,1 +4156,1 @@\n-                            System.out.println(\"Failed \\\\b{g} [\" + ln + \"] : \"\n+                                 fail(\"Failed \\\\b{g} [\" + ln + \"] : \"\n@@ -4876,1 +4159,0 @@\n-                            failCount++;\n@@ -4879,3 +4161,1 @@\n-                    if (s.hasNext(p)) {\n-                        failCount++;\n-                    }\n+                    assertFalse(s.hasNext(p));\n@@ -4887,1 +4167,1 @@\n-                            System.out.println(\"Failed \\\\b{g} [\" + ln + \"] : \"\n+                                 fail(\"Failed \\\\b{g} [\" + ln + \"] : \"\n@@ -4890,1 +4170,0 @@\n-                            failCount++;\n@@ -4893,3 +4172,1 @@\n-                    if (s.hasNext()) {\n-                        failCount++;\n-                    }\n+                    assertFalse(s.hasNext());\n@@ -4898,4 +4175,3 @@\n-        if (!Pattern.compile(\"\\\\X{10}\").matcher(\"abcdefghij\").matches() ||\n-            !Pattern.compile(\"\\\\b{g}(?:\\\\X\\\\b{g}){5}\\\\b{g}\").matcher(\"abcde\").matches() ||\n-            !Pattern.compile(\"(?:\\\\X\\\\b{g}){2}\").matcher(\"\\ud800\\udc00\\ud801\\udc02\").matches())\n-            failCount++;\n+        assertTrue(Pattern.compile(\"\\\\X{10}\").matcher(\"abcdefghij\").matches() &&\n+                   Pattern.compile(\"\\\\b{g}(?:\\\\X\\\\b{g}){5}\\\\b{g}\").matcher(\"abcde\").matches() &&\n+                   Pattern.compile(\"(?:\\\\X\\\\b{g}){2}\").matcher(\"\\ud800\\udc00\\ud801\\udc02\").matches());\n@@ -4903,3 +4179,1 @@\n-        if (!Pattern.compile(\"\\\\b{1}hello\\\\b{1} \\\\b{1}world\\\\b{1}\").matcher(\"hello world\").matches())\n-            failCount++;\n-        report(\"Unicode extended grapheme cluster\");\n+        assertTrue(Pattern.compile(\"\\\\b{1}hello\\\\b{1} \\\\b{1}world\\\\b{1}\").matcher(\"hello world\").matches());\n@@ -4909,1 +4183,2 @@\n-    private static void expoBacktracking() throws Exception {\n+    @Test\n+    public static void expoBacktracking() {\n@@ -4990,3 +4265,1 @@\n-            if (r != Pattern.compile(p).matcher(s).matches()) {\n-                failCount++;\n-            }\n+            assertEquals(r, Pattern.compile(p).matcher(s).matches());\n@@ -4996,1 +4269,2 @@\n-    private static void invalidGroupName() {\n+    @Test\n+    public static void invalidGroupName() {\n@@ -5002,5 +4276,2 @@\n-                try {\n-                    Pattern.compile(pat);\n-                    failCount++;\n-                } catch (PatternSyntaxException e) {\n-                    if (!e.getMessage().startsWith(\n+                var e = expectThrows(PatternSyntaxException.class, () -> Pattern.compile(pat));\n+                assertTrue(e.getMessage().startsWith(\n@@ -5008,4 +4279,1 @@\n-                            + \" Latin letter\")) {\n-                        failCount++;\n-                    }\n-                }\n+                            + \" Latin letter\"));\n@@ -5019,9 +4287,4 @@\n-                try {\n-                    Pattern.compile(pat);\n-                    failCount++;\n-                } catch (PatternSyntaxException e) {\n-                    if (!e.getMessage().startsWith(\n-                            \"named capturing group is missing trailing '>'\")) {\n-                        failCount++;\n-                    }\n-                }\n+                var e = expectThrows(PatternSyntaxException.class, () ->\n+                    Pattern.compile(pat));\n+                    assertTrue(e.getMessage().startsWith(\n+                            \"named capturing group is missing trailing '>'\"));\n@@ -5030,1 +4293,0 @@\n-        report(\"Invalid capturing group names\");\n@@ -5033,1 +4295,2 @@\n-    private static void illegalRepetitionRange() {\n+    @Test\n+    public static void illegalRepetitionRange() {\n@@ -5043,13 +4306,3 @@\n-            try {\n-                Pattern.compile(pat);\n-                failCount++;\n-                System.out.println(\"Expected to fail. Pattern: \" + pat);\n-            } catch (PatternSyntaxException e) {\n-                if (!e.getMessage().startsWith(\"Illegal repetition\")) {\n-                    failCount++;\n-                    System.out.println(\"Unexpected error message: \" + e.getMessage());\n-                }\n-            } catch (Throwable t) {\n-                failCount++;\n-                System.out.println(\"Unexpected exception: \" + t);\n-            }\n+            var e = expectThrows(PatternSyntaxException.class, () ->\n+                    Pattern.compile(pat));\n+            assertTrue(e.getMessage().startsWith(\"Illegal repetition\"));\n@@ -5057,1 +4310,0 @@\n-        report(\"illegalRepetitionRange\");\n@@ -5060,8 +4312,4 @@\n-    private static void surrogatePairWithCanonEq() {\n-        try {\n-            Pattern.compile(\"\\ud834\\udd21\", Pattern.CANON_EQ);\n-        } catch (Throwable t) {\n-            failCount++;\n-            System.out.println(\"Unexpected exception: \" + t);\n-        }\n-        report(\"surrogatePairWithCanonEq\");\n+    @Test\n+    public static void surrogatePairWithCanonEq() {\n+        \/\/Runs without exception\n+        Pattern.compile(\"\\ud834\\udd21\", Pattern.CANON_EQ);\n@@ -5070,1 +4318,1 @@\n-    private static String s2x(String s) {\n+    public static String s2x(String s) {\n@@ -5079,1 +4327,2 @@\n-    private static void lineBreakWithQuantifier() {\n+    @Test\n+    public static void lineBreakWithQuantifier() {\n@@ -5143,5 +4392,2 @@\n-                        if (!m.reset(in).matches()) {\n-                            failCount++;\n-                            System.err.println(\"Expected to match '\" +\n-                                    s2x(in) + \"' =~ \/\" + p + \"\/\");\n-                        }\n+                        assertTrue(m.reset(in).matches(), \"Expected to match '\"\n+                                + s2x(in) + \"' =~ \/\" + p + \"\/\");\n@@ -5152,1 +4398,0 @@\n-        report(\"lineBreakWithQuantifier\");\n@@ -5156,1 +4401,2 @@\n-    private static void caseInsensitivePMatch() {\n+    @Test\n+    public static void caseInsensitivePMatch() {\n@@ -5177,1 +4423,1 @@\n-                if (!Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)\n+                assertTrue(Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)\n@@ -5179,6 +4425,2 @@\n-                            .matches())\n-                {\n-                    failCount++;\n-                    System.err.println(\"Expected to match: \" +\n-                                       \"'\" + input + \"' =~ \/\" + pattern + \"\/\");\n-                }\n+                            .matches(),\"Expected to match: \" + \"'\" + input +\n+                        \"' =~ \/\" + pattern + \"\/\");\n@@ -5209,1 +4451,1 @@\n-                if (!Pattern.compile(pattern, Pattern.CASE_INSENSITIVE\n+                assertTrue(Pattern.compile(pattern, Pattern.CASE_INSENSITIVE\n@@ -5212,6 +4454,2 @@\n-                            .matches())\n-                {\n-                    failCount++;\n-                    System.err.println(\"Expected to match: \" +\n-                                       \"'\" + input + \"' =~ \/\" + pattern + \"\/\");\n-                }\n+                            .matches(), \"Expected to match: \" +\n+                        \"'\" + input + \"' =~ \/\" + pattern + \"\/\");\n@@ -5220,1 +4458,0 @@\n-        report(\"caseInsensitivePMatch\");\n@@ -5224,1 +4461,2 @@\n-    private static void surrogatePairOverlapRegion() {\n+    @Test\n+    public static void surrogatePairOverlapRegion() {\n@@ -5234,3 +4472,2 @@\n-            failCount++;\n-            System.out.println(\"Input \\\"\" + input + \"\\\".substr(0, 1)\" +\n-                    \" expected to match pattern \\\"\" + p + \"\\\"\");\n+            String errMessage = \"Input \\\"\" + input + \"\\\".substr(0, 1)\" +\n+                    \" expected to match pattern \\\"\" + p + \"\\\"\";\n@@ -5238,1 +4475,4 @@\n-                System.out.println(\"group(0): \\\"\" + m.group(0) + \"\\\"\");\n+                fail(errMessage + System.lineSeparator() +\n+                        \"group(0): \\\"\" + m.group(0) + \"\\\"\");\n+            } else {\n+                fail(errMessage);\n@@ -5241,2 +4481,1 @@\n-            failCount++;\n-            System.out.println(\"Expected m.hitEnd() == true\");\n+            fail(\"Expected m.hitEnd() == true\");\n@@ -5253,3 +4492,2 @@\n-            failCount++;\n-            System.out.println(\"Input \\\"\" + input + \"\\\".substr(1, 2)\" +\n-                    \" expected to match pattern \\\"\" + p + \"\\\"\");\n+            String errMessage = \"Input \\\"\" + input + \"\\\".substr(1, 2)\" +\n+                    \" expected to match pattern \\\"\" + p + \"\\\"\";\n@@ -5257,2 +4495,6 @@\n-                System.out.println(\"group(0): \\\"\" + m.group(0) + \"\\\"\");\n-                System.out.println(\"group(1): \\\"\" + m.group(1) + \"\\\"\");\n+                String msg1 = \"group(0): \\\"\" + m.group(0) + \"\\\"\";\n+                String msg2 = \"group(1): \\\"\" + m.group(1) + \"\\\"\";\n+                fail(errMessage + System.lineSeparator() + msg1 +\n+                        System.lineSeparator() + msg2);\n+            } else {\n+                fail(errMessage);\n@@ -5261,1 +4503,0 @@\n-        report(\"surrogatePairOverlapRegion\");\n@@ -5265,1 +4506,2 @@\n-    private static void droppedClassesWithIntersection() {\n+    @Test\n+    public static void droppedClassesWithIntersection() {\n@@ -5283,11 +4525,2 @@\n-        if (!letterCharsMatch) {\n-            failCount++;\n-            System.out.println(\"Compiling intersection pattern is dropping a character class in its matcher\");\n-        }\n-\n-        if (!digitCharsDontMatch) {\n-            failCount++;\n-            System.out.println(\"Compiling intersection pattern is matching digits where it should not\");\n-        }\n-\n-        report(\"Dropped classes with intersection.\");\n+        assertTrue(letterCharsMatch, \"Compiling intersection pattern is \" +\n+                \"dropping a character class in its matcher\");\n@@ -5295,0 +4528,2 @@\n+        assertTrue(digitCharsDontMatch, \"Compiling intersection pattern is \" +\n+                \"matching digits where it should not\");\n@@ -5298,1 +4533,2 @@\n-    private static void errorMessageCaretIndentation() {\n+    @Test\n+    public static void errorMessageCaretIndentation() {\n@@ -5300,11 +4536,4 @@\n-\n-        try {\n-            var res = Pattern.compile(pattern);\n-        } catch (PatternSyntaxException e) {\n-            var message = e.getMessage();\n-            var sep = System.lineSeparator();\n-            if (!message.contains(sep + \"\\t ^\")){\n-                failCount++;\n-            }\n-        }\n-        report(\"Correct caret indentation for patterns with tabs\");\n+        var e = expectThrows(PatternSyntaxException.class, () ->\n+                Pattern.compile(pattern));\n+        var sep = System.lineSeparator();\n+        assertTrue(e.getMessage().contains(sep + \"\\t ^\"));\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":1244,"deletions":2015,"binary":false,"changes":3259,"status":"modified"}]}