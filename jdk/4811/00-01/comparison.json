{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8201533\n+ * @bug 8270836\n@@ -34,0 +34,5 @@\n+import toolbox.ToolBox;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n@@ -37,0 +42,4 @@\n+\/*\n+ * ATTENTION: this test is run using @org.testng.annotations.Test,\n+ *            not javadoc.tester.JavadocTester.Test\n+ *\/\n@@ -42,14 +51,45 @@\n-    public void testCheckOutput() {\n-        javadoc(\"--version\"); \/\/ generate one of the smallest possible outputs for resource's sake\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, true, \"abcde\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, true, \"abcde\", \"a\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, true, \"abc\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, true, \"\", \"abcd\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, false, \"abcde\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, false, \"abcde\", \"a\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, false, \"abc\", \"abc\"));\n-        expectThrows(IllegalArgumentException.class, () -> checkOutput(Output.OUT, false, \"\", \"abcd\"));\n-\n-        \/\/ for consistency make sure these won't throw anything\n-        checkOutput(Output.OUT, false, \"abcd\");\n-        checkOutput(Output.OUT, true, \"abcd\");\n+    public void testCheckOutput() throws IOException {\n+        List<List<String>> listOfStringArguments = List.of(\n+                List.of(\"abcd\", \"abc\"),\n+                List.of(\"abcde\", \"a\", \"abc\"),\n+                List.of(\"abc\", \"abc\"),\n+                List.of(\"\", \"abcd\")\n+        );\n+        new ToolBox().writeJavaFiles(Path.of(\".\"), \"\/** First sentence. *\/ public class MyClass { }\");\n+        javadoc(\"-d\", \"out\", \"MyClass.java\");\n+        \/\/ (1) these checks must throw\n+        for (Output out : Output.values()) {\n+            for (boolean expect : new boolean[]{false, true}) {\n+                for (List<String> args : listOfStringArguments) {\n+                    String[] strs = args.toArray(new String[0]);\n+                    expectThrows(IllegalArgumentException.class, () -> checkOutput(out, expect, strs));\n+                }\n+            }\n+        }\n+        \/\/ these must throw too\n+        for (boolean expect : new boolean[]{false, true}) {\n+            for (List<String> args : listOfStringArguments) {\n+                String[] strings = args.toArray(new String[0]);\n+                expectThrows(IllegalArgumentException.class, () -> checkOutput(\"MyClass.html\", expect, strings));\n+            }\n+        }\n+        \/\/ (2) sanity check: these won't throw anything\n+        for (Output out : Output.values()) {\n+            for (boolean expect : new boolean[]{false, true}) {\n+                checkOutput(out, expect, \"abcd\");\n+                checkOutput(out, expect, \"a\", \"b\");\n+                checkOutput(out, expect, \"\");\n+            }\n+        }\n+        \/\/ neither will these:\n+        for (boolean expect : new boolean[]{false, true}) {\n+            checkOutput(\"MyClass.html\", expect, \"abcd\");\n+            checkOutput(\"MyClass.html\", expect, \"a\", \"b\");\n+            checkOutput(\"MyClass.html\", expect, \"\");\n+        }\n+        \/\/ checkOrder won't throw when used as a substitute for the above\n+        \/\/ cases of checkOutput that threw\n+        for (List<String> args : listOfStringArguments) {\n+            String[] strings = args.toArray(new String[0]);\n+            checkOrder(\"MyClass.html\", strings);\n+        }\n@@ -57,1 +97,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/TestJavadocTester.java","additions":56,"deletions":16,"binary":false,"changes":72,"status":"modified"}]}