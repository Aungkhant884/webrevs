{"files":[{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270836\n+ * @library \/tools\/lib ..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build javadoc.tester.* toolbox.ToolBox\n+ * @run testng TestJavadocTester\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import static org.testng.Assert.expectThrows;\n+\n+\/*\n+ * ATTENTION: this test is run using @org.testng.annotations.Test,\n+ *            not javadoc.tester.JavadocTester.Test\n+ *\/\n+public class TestJavadocTester extends JavadocTester {\n+\n+    private TestJavadocTester() { }\n+\n+    @org.testng.annotations.Test\n+    public void testCheckOutput() throws IOException {\n+        List<List<String>> listOfStringArguments = List.of(\n+                List.of(\"abcd\", \"abc\"),\n+                List.of(\"abcde\", \"a\", \"abc\"),\n+                List.of(\"abc\", \"abc\"),\n+                List.of(\"\", \"abcd\")\n+        );\n+        new ToolBox().writeJavaFiles(Path.of(\".\"), \"\/** First sentence. *\/ public class MyClass { }\");\n+        javadoc(\"-d\", \"out\", \"MyClass.java\");\n+        \/\/ (1) these checks must throw\n+        for (Output out : Output.values()) {\n+            for (boolean expect : new boolean[]{false, true}) {\n+                for (List<String> args : listOfStringArguments) {\n+                    String[] strs = args.toArray(new String[0]);\n+                    expectThrows(IllegalArgumentException.class, () -> checkOutput(out, expect, strs));\n+                }\n+            }\n+        }\n+        \/\/ these must throw too\n+        for (boolean expect : new boolean[]{false, true}) {\n+            for (List<String> args : listOfStringArguments) {\n+                String[] strings = args.toArray(new String[0]);\n+                expectThrows(IllegalArgumentException.class, () -> checkOutput(\"MyClass.html\", expect, strings));\n+            }\n+        }\n+        \/\/ (2) sanity check: these won't throw anything\n+        for (Output out : Output.values()) {\n+            for (boolean expect : new boolean[]{false, true}) {\n+                checkOutput(out, expect, \"abcd\");\n+                checkOutput(out, expect, \"a\", \"b\");\n+                checkOutput(out, expect, \"\");\n+            }\n+        }\n+        \/\/ neither will these:\n+        for (boolean expect : new boolean[]{false, true}) {\n+            checkOutput(\"MyClass.html\", expect, \"abcd\");\n+            checkOutput(\"MyClass.html\", expect, \"a\", \"b\");\n+            checkOutput(\"MyClass.html\", expect, \"\");\n+        }\n+        \/\/ checkOrder won't throw when used as a substitute for the above\n+        \/\/ cases of checkOutput that threw\n+        for (List<String> args : listOfStringArguments) {\n+            String[] strings = args.toArray(new String[0]);\n+            checkOrder(\"MyClass.html\", strings);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/TestJavadocTester.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -501,0 +501,6 @@\n+     *\n+     * @throws IllegalArgumentException as a protective measure against a\n+     * situation where the provided array of strings contains a pair of strings\n+     * s1 and s2 such that s1.startsWith(s2). Such a situation is problematic\n+     * because in order to match s1 and s2, it suffices for the output to\n+     * contain only s1.\n@@ -522,0 +528,6 @@\n+     *\n+     * @throws IllegalArgumentException as a protective measure against a\n+     * situation where the provided array of strings contains a pair of strings\n+     * s1 and s2 such that s1.startsWith(s2). Such a situation is problematic\n+     * because in order to match s1 and s2, it suffices for the output to\n+     * contain only s1.\n@@ -529,0 +541,2 @@\n+        if (checkIfPrefixes(strings))\n+            throw new IllegalArgumentException(\"Prefix strings detected; use checkOrder instead or fix the strings.\");\n@@ -546,0 +560,20 @@\n+    private static boolean checkIfPrefixes(String... strings) {\n+        String[] copy = Arrays.copyOf(strings, strings.length);\n+        Arrays.sort(copy);\n+        for (int i = 0; i < copy.length - 1; i++) {\n+            if (isFirstPrefixOfSecond(copy[i], copy[i + 1]))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    static boolean isFirstPrefixOfSecond(String a, String b) {\n+        int i = 0;\n+        int j = 0;\n+        while (i < a.length() && j < b.length() && a.charAt(i) == b.charAt(j)) {\n+            i++;\n+            j++;\n+        }\n+        return i == a.length();\n+    }\n+\n@@ -555,1 +589,1 @@\n-     * Checks that there are no duplicate lines that either match or don't match a given patter,\n+     * Checks that there are no duplicate lines that either match or don't match a given pattern,\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}