{"files":[{"patch":"@@ -204,0 +204,1 @@\n+  const JfrStackTrace* resolve(const ObjectSample* sample) const;\n@@ -227,0 +228,4 @@\n+inline const JfrStackTrace* StackTraceBlobInstaller::resolve(const ObjectSample* sample) const {\n+  return JfrStackTraceRepository::lookup_for_leak_profiler(sample->stack_trace_hash(), sample->stack_trace_id());\n+}\n+\n@@ -233,1 +238,1 @@\n-  const JfrStackTrace* const stack_trace = JfrStackTraceRepository::lookup(sample->stack_trace_hash(), sample->stack_trace_id());\n+  const JfrStackTrace* const stack_trace = resolve(sample);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-const JfrStackTrace* JfrStackTraceRepository::lookup(unsigned int hash, traceid id) {\n+const JfrStackTrace* JfrStackTraceRepository::lookup_for_leak_profiler(unsigned int hash, traceid id) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  static const JfrStackTrace* lookup(unsigned int hash, traceid id);\n+  static const JfrStackTrace* lookup_for_leak_profiler(unsigned int hash, traceid id);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"jfr\/support\/jfrThreadLocal.hpp\"\n@@ -32,1 +31,1 @@\n-JfrAllocationTracer::JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, Thread* thread) : _tl(NULL) {\n+JfrAllocationTracer::JfrAllocationTracer(const Klass* klass, HeapWord* obj, size_t alloc_size, bool outside_tlab, Thread* thread) {\n@@ -34,1 +33,0 @@\n-    _tl = thread->jfr_thread_local();\n@@ -37,1 +35,0 @@\n-  \/\/ Let this happen after LeakProfiler::sample, to possibly reuse a cached stacktrace.\n@@ -40,6 +37,0 @@\n-\n-JfrAllocationTracer::~JfrAllocationTracer() {\n-  if (_tl != NULL) {\n-    _tl->clear_cached_stack_trace();\n-  }\n-}\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-class JfrThreadLocal;\n@@ -35,2 +34,0 @@\n- private:\n-  JfrThreadLocal* _tl;\n@@ -39,1 +36,0 @@\n-  ~JfrAllocationTracer();\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}