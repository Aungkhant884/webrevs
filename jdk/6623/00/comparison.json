{"files":[{"patch":"@@ -404,0 +404,1 @@\n+                boolean markupEncountered = false;\n@@ -417,0 +418,2 @@\n+                        markupEncountered = true;\n+                        break;\n@@ -426,1 +429,3 @@\n-                if (linkEncountered) {\n+                if (markupEncountered) {\n+                    return;\n+                } else if (linkEncountered) {\n@@ -441,1 +446,1 @@\n-                    c = HtmlTree.SPAN(Text.of(utils.normalizeNewlines(sequence)));\n+                    c = HtmlTree.SPAN(Text.of(text));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+            boolean hasMarkup = false;\n@@ -171,0 +172,1 @@\n+                    hasMarkup = true;\n@@ -188,1 +190,1 @@\n-            append(text, Set.of(), line);\n+            append(text, line.isBlank() && hasMarkup ? Set.of(new Style.Markup()) : Set.of(), line);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/snippet\/Parser.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-     * processed by wrapping into an HTML {@code A} element pointing to the\n+     * processed by being wrapped into an HTML {@code A} element pointing to the\n@@ -47,1 +47,1 @@\n-     * wrapping into an HTML {@code SPAN} element with the {@code class}\n+     * being wrapped into an HTML {@code SPAN} element with the {@code class}\n@@ -54,1 +54,1 @@\n-     * processed by omitting from the output.\n+     * processed by being omitted from the output.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/snippet\/Style.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,2 +77,2 @@\n-     * For each character of this text adds the provided objects to a set of\n-     * objects associated with that character.\n+     * For each character of this text adds the provided styles to a set of\n+     * styles associated with that character.\n@@ -90,1 +90,1 @@\n-     * characters, each of which is associated with all the provided objects.\n+     * characters, each of which is associated with all the provided styles.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/snippet\/StyledText.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestLangProperties.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -373,0 +373,233 @@\n+    \/*\n+     * These are corner cases. As such they are expected to rarely happen in\n+     * practise. These tests merely capture what the results looked when\n+     * the feature was integrated. This might help when refactoring\n+     * and refreshing the feature, to better understand the impact of\n+     * the proposed changes.\n+     *\/\n+    @Test\n+    public void testPositiveInlineTagMarkup_ReplaceOnBlankLine(Path base) throws Exception {\n+        var testCases = List.of(\n+                \/\/ the complete line is being replaced\n+                new TestCase(\"one\",\n+                        \"\"\"\n+                                \/\/ @start region=one @replace regex=\".*\" replacement=\"-----\"\n+                                one\n+                                \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                -----one\n+                                \"\"\"\n+                ),\n+                \/\/ the contents of the line, but not the line terminator is being replaced\n+                new TestCase(\"two\",\n+                        \"\"\"\n+                                    \/\/ @start region=two @replace regex=\".+\" replacement=\"*****\"\n+                                two\n+                                \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                *****two\n+                                \"\"\"\n+                ),\n+                new TestCase(\n+                        \"\"\"\n+                                \/\/ @replace regex=\"duke\" replacement=\"duchess\"\n+                                \"\"\",\n+                        \"\"\"\n+                                \"\"\"\n+                )\n+        );\n+        testPositive(base, testCases);\n+    }\n+\n+    @Test\n+    public void testPositiveInlineTagMarkup_BlankLinesRegionEquivalence(Path base) throws Exception {\n+        var testCases = List.of(\n+                new TestCase(\"example1\",\n+                        \"\"\"\n+                                \/\/ @start region=\"example1\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                } \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\"\"\"),\n+                new TestCase(\"example2\",\n+                        \"\"\"\n+                                if (v.isPresent()) { \/\/ @start region=\"example2\"\n+                                    System.out.println(\"v: \" + v.get());\n+                                } \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\"\"\"),\n+                new TestCase(\"example3\",\n+                        \"\"\"\n+                                \/\/ @start region=\"example3\" :\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                \/\/ @end :\n+                                }\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\"\"\")\n+        );\n+        testPositive(base, testCases);\n+    }\n+\n+    @Test\n+    public void testPositiveInlineTagMarkup_BlankLinesEquivalence(Path base) throws Exception {\n+        var testCases = List.of(\n+                new TestCase(\n+                        \"\"\"\n+                                \/\/ @start region=\"example\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\n+                                \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\n+                                \"\"\"),\n+                new TestCase(\n+                        \"\"\"\n+                                if (v.isPresent()) { \/\/ @start region=\"example\"\n+                                    System.out.println(\"v: \" + v.get());\n+                                } \/\/ @end\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\n+                                \"\"\"),\n+                new TestCase(\n+                        \"\"\"\n+                                 \/\/ @start region=\"example\" :\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                \/\/ @end :\n+                                }\n+                                \"\"\",\n+                        \"\"\"\n+                                if (v.isPresent()) {\n+                                    System.out.println(\"v: \" + v.get());\n+                                }\n+                                \"\"\")\n+        );\n+        testPositive(base, testCases);\n+    }\n+\n+    @Test\n+    public void testPositiveInlineTagMarkup_BlankLinesFromStartEnd(Path base) throws Exception {\n+        \/\/ A markup line that contains either @start or @end is removed.\n+        var testCases = List.of(\n+                new TestCase(\"\"\"\n+                        First line\n+                          \/\/ @start region=\"a\"\n+                         Third line\n+                          \/\/ @end\n+                        Fifth line\n+                        \"\"\",\n+                        \"\"\"\n+                                First line\n+                                 Third line\n+                                Fifth line\n+                                \"\"\"),\n+                new TestCase(\"\"\"\n+                        First line\n+                          \/\/ @start region=\"a\"\n+                          \/\/ @start region=\"b\"\n+                         Third line\n+                          \/\/ @end\n+                        Fifth line\n+                          \/\/ @end\n+                        \"\"\",\n+                        \"\"\"\n+                                First line\n+                                 Third line\n+                                Fifth line\n+                                \"\"\"),\n+                \/\/ note incidental whitespace removal in test cases below\n+                new TestCase(\"a\", \"\"\"\n+                        First line\n+                          \/\/ @start region=\"a\"\n+                         Third line\n+                          \/\/ @end\n+                        Fifth line\n+                        \"\"\",\n+\n+                        \"\"\"\n+                                Third line\n+                                \"\"\"),\n+                new TestCase(\"b\", \"\"\"\n+                        First line\n+                          \/\/ @start region=\"a\"\n+                          \/\/ @start region=\"b\"\n+                         Third line\n+                          \/\/ @end\n+                        Fifth line\n+                          \/\/ @end\n+                        \"\"\",\n+                        \"\"\"\n+                                Third line\n+                                \"\"\")\n+        );\n+        testPositive(base, testCases);\n+    }\n+\n+    @Test\n+    public void testPositiveInlineTagMarkup_BlankLinesFromNextLineMarkup(Path base) throws Exception {\n+        \/\/ A markup line that refers to the next line is removed.\n+        var testCases = List.of(\n+                new TestCase(\"\"\"\n+                        First line\n+                             \/\/ @highlight:\n+                         Third line\n+                        \"\"\",\n+                        \"\"\"\n+                                First line\n+                                <span class=\"bold\"> Third line\n+                                <\/span>\"\"\"),\n+                new TestCase(\"\"\"\n+                        First line\n+                             \/\/ @link target=\"Object#equals(Object)\":\n+                         Third line\n+                        \"\"\",\n+                        replace(\"\"\"\n+                                First line\n+                                 link(Third line)\n+                                \"\"\", \"link\\\\((.+?)\\\\)\", r -> link(true, \"java.lang.Object#equals(Object)\", r.group(1)))\n+                ),\n+                new TestCase(\"\"\"\n+                        First line\n+                             \/\/ @replace regex=.+ replacement=\"x\":\n+                         Third line\n+                        \"\"\",\n+                        \"\"\"\n+                                First line\n+                                x\n+                                \"\"\"),\n+                new TestCase(\"\"\"\n+                        First line\n+                             \/\/ @start region=a:\n+                         Third line\n+                             \/\/ @end:\n+                           Fifth line\n+                        \"\"\",\n+                        \"\"\"\n+                                First line\n+                                 Third line\n+                                   Fifth line\n+                                \"\"\")\n+        );\n+        testPositive(base, testCases);\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetMarkup.java","additions":233,"deletions":0,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -281,1 +281,0 @@\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetTag.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}