{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.nio.file.Files;\n@@ -135,1 +136,1 @@\n-        ensureFileDoesNotExist(output);\n+        ensureValidOutput(input, output);\n@@ -194,0 +195,21 @@\n+\n+    private void ensureValidOutput(Path input, Path output) throws UserSyntaxException, UserDataException {\n+        if (!Files.exists(output)) {\n+            return;\n+        }\n+        if (!Files.exists(input)) {\n+            return; \/\/ Will fail later when reading file\n+        }\n+        try {\n+            if (Files.isSameFile(input, output)) {\n+                throw new UserSyntaxException(\"output file can't be same as input file \" + input.toAbsolutePath());\n+            }\n+        } catch (IOException e) {\n+            throw new UserDataException(\"could not access \" + input.toAbsolutePath() + \" or \" + output.toAbsolutePath() + \". \" + e.getMessage());\n+        }\n+        try {\n+            Files.delete(output);\n+        } catch (IOException e) {\n+            throw new UserDataException(\"could not delete existing output file \" + output.toAbsolutePath() + \". \" + e.getMessage());\n+        }\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Scrub.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+        testInputOutput(file);\n@@ -95,0 +96,11 @@\n+    private static void testInputOutput(Path file) throws Throwable {\n+        List<String> arguments = new ArrayList<>();\n+        arguments.add(\"scrub\");\n+        arguments.add(file.toAbsolutePath().toString());\n+        arguments.add(file.toAbsolutePath().toString());\n+\n+        OutputAnalyzer oa = ExecuteHelper.jfr(arguments.toArray(String[]::new));\n+        oa.shouldContain(\"output file can't be same as input file\");\n+        oa.shouldNotHaveExitValue(0);\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestScrub.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}