{"files":[{"patch":"@@ -1300,1 +1300,1 @@\n-  Node* tgt         = argument(1); \/\/ tgt is int ch\n+  Node* int_ch      = argument(1);\n@@ -1312,0 +1312,9 @@\n+\n+  \/\/ Check for int_ch >= 0\n+  Node* int_ch_cmp = _gvn.transform(new CmpINode(int_ch, intcon(0)));\n+  Node* int_ch_bol = _gvn.transform(new BoolNode(int_ch_cmp, BoolTest::ge));\n+  {\n+    BuildCutout unless(this, int_ch_bol, PROB_MAX);\n+    uncommon_trap(Deoptimization::Reason_intrinsic,\n+                  Deoptimization::Action_maybe_recompile);\n+  }\n@@ -1319,1 +1328,1 @@\n-  Node* result = new StrIndexOfCharNode(control(), memory(TypeAryPtr::BYTES), src_start, src_count, tgt, ae);\n+  Node* result = new StrIndexOfCharNode(control(), memory(TypeAryPtr::BYTES), src_start, src_count, int_ch, ae);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8301491\n+ * @summary Check for correct return value when calling indexOfChar intrinsics with negative value.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:CompileCommand=quiet\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.intrinsics.string.TestStringIndexOfCharIntrinsics::testIndexOfChar*\n+ *                   -XX:CompileCommand=inline,java.lang.String*::indexOf*\n+ *                   -XX:PerBytecodeTrapLimit=20000\n+ *                   -XX:PerMethodTrapLimit=20000\n+ *                   compiler.intrinsics.string.TestStringIndexOfCharIntrinsics\n+ *\/\n+\n+package compiler.intrinsics.string;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestStringIndexOfCharIntrinsics {\n+\n+    static byte byArr[] = new byte[500];\n+\n+    public static void main(String[] args) {\n+        for (int j = 0; j < byArr.length; j++) {\n+            byArr[j] = (byte)j;\n+        }\n+        \/\/ Test value for aarch64\n+        byArr[24] = 0x7;\n+        byArr[23] = -0x80;\n+        \/\/ Warmup\n+        for (int i = 0; i < 10000; i++) {\n+            testIndexOfCharArg(i);\n+            testIndexOfCharConst();\n+        }\n+        Asserts.assertEquals(testIndexOfCharConst() , -1, \"must be -1 (character not found)\");\n+        Asserts.assertEquals(testIndexOfCharArg(-2147483641) , -1, \"must be -1 (character not found)\");\n+    }\n+\n+    static int testIndexOfCharConst() {\n+        String s = new String(byArr);\n+        return s.indexOf(-2147483641);\n+    }\n+\n+    static int testIndexOfCharArg(int ch) {\n+        String s = new String(byArr);\n+        return s.indexOf(ch);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringIndexOfCharIntrinsics.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}