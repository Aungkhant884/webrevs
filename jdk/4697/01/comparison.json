{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    return (decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF | ON_UNKNOWN_OOP_REF)) == 0;\n+    return (decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF)) == 0;\n@@ -61,1 +61,1 @@\n-    return (decorators & (ON_WEAK_OOP_REF | ON_UNKNOWN_OOP_REF)) != 0;\n+    return (decorators & ON_WEAK_OOP_REF) != 0;\n@@ -93,2 +93,0 @@\n-  template <DecoratorSet decorators>\n-  inline void keep_alive_if_weak(oop value);\n@@ -104,2 +102,11 @@\n-  template <DecoratorSet decorators, class T>\n-  inline oop load_reference_barrier(oop obj, T* load_addr);\n+  template <class T>\n+  inline oop load_reference_barrier(DecoratorSet decorators, oop obj, T* load_addr);\n+\n+  template <typename T>\n+  inline oop oop_load(DecoratorSet decorators, T* addr);\n+\n+  template <typename T>\n+  inline oop oop_cmpxchg(DecoratorSet decorators, T* addr, oop compare_value, oop new_value);\n+\n+  template <typename T>\n+  inline oop oop_xchg(DecoratorSet decorators, T* addr, oop new_value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -102,2 +102,2 @@\n-template <DecoratorSet decorators, class T>\n-inline oop ShenandoahBarrierSet::load_reference_barrier(oop obj, T* load_addr) {\n+template <class T>\n+inline oop ShenandoahBarrierSet::load_reference_barrier(DecoratorSet decorators, oop obj, T* load_addr) {\n@@ -109,1 +109,1 @@\n-  if (HasDecorator<decorators, ON_PHANTOM_OOP_REF>::value &&\n+  if ((decorators & ON_PHANTOM_OOP_REF) != 0 &&\n@@ -116,1 +116,1 @@\n-  if ((HasDecorator<decorators, ON_WEAK_OOP_REF>::value || HasDecorator<decorators, ON_UNKNOWN_OOP_REF>::value) &&\n+  if ((decorators & ON_WEAK_OOP_REF) != 0 &&\n@@ -124,1 +124,1 @@\n-  if (HasDecorator<decorators, AS_NO_KEEPALIVE>::value &&\n+  if ((decorators & AS_NO_KEEPALIVE) != 0 &&\n@@ -187,7 +187,35 @@\n-template <DecoratorSet decorators>\n-inline void ShenandoahBarrierSet::keep_alive_if_weak(oop value) {\n-  assert((decorators & ON_UNKNOWN_OOP_REF) == 0, \"Reference strength must be known\");\n-  if (!HasDecorator<decorators, ON_STRONG_OOP_REF>::value &&\n-      !HasDecorator<decorators, AS_NO_KEEPALIVE>::value) {\n-    satb_enqueue(value);\n-  }\n+template <typename T>\n+inline oop ShenandoahBarrierSet::oop_load(DecoratorSet decorators, T* addr) {\n+  oop value = RawAccess<>::oop_load(addr);\n+  value = load_reference_barrier(decorators, value, addr);\n+  keep_alive_if_weak(decorators, value);\n+  return value;\n+}\n+\n+template <typename T>\n+inline oop ShenandoahBarrierSet::oop_cmpxchg(DecoratorSet decorators, T* addr, oop compare_value, oop new_value) {\n+  iu_barrier(new_value);\n+  oop res;\n+  oop expected = compare_value;\n+  do {\n+    compare_value = expected;\n+    res = RawAccess<>::oop_atomic_cmpxchg(addr, compare_value, new_value);\n+    expected = res;\n+  } while ((compare_value != expected) && (resolve_forwarded(compare_value) == resolve_forwarded(expected)));\n+\n+  \/\/ Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,\n+  \/\/ because it must be the previous value.\n+  res = load_reference_barrier(decorators, res, reinterpret_cast<T*>(NULL));\n+  satb_enqueue(res);\n+  return res;\n+}\n+\n+template <typename T>\n+inline oop ShenandoahBarrierSet::oop_xchg(DecoratorSet decorators, T* addr, oop new_value) {\n+  iu_barrier(new_value);\n+  oop previous = RawAccess<>::oop_atomic_xchg(addr, new_value);\n+  \/\/ Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,\n+  \/\/ because it must be the previous value.\n+  previous = load_reference_barrier<T>(decorators, previous, reinterpret_cast<T*>(NULL));\n+  satb_enqueue(previous);\n+  return previous;\n@@ -199,7 +227,2 @@\n-  oop value = Raw::oop_load_not_in_heap(addr);\n-  if (value != NULL) {\n-    ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n-    value = bs->load_reference_barrier<decorators, T>(value, addr);\n-    bs->keep_alive_if_weak<decorators>(value);\n-  }\n-  return value;\n+  ShenandoahBarrierSet* const bs = ShenandoahBarrierSet::barrier_set();\n+  return bs->oop_load(decorators, addr);\n@@ -211,5 +234,2 @@\n-  oop value = Raw::oop_load_in_heap(addr);\n-  ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n-  value = bs->load_reference_barrier<decorators, T>(value, addr);\n-  bs->keep_alive_if_weak<decorators>(value);\n-  return value;\n+  ShenandoahBarrierSet* const bs = ShenandoahBarrierSet::barrier_set();\n+  return bs->oop_load(decorators, addr);\n@@ -220,2 +240,1 @@\n-  oop value = Raw::oop_load_in_heap_at(base, offset);\n-  ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n+  ShenandoahBarrierSet* const bs = ShenandoahBarrierSet::barrier_set();\n@@ -223,3 +242,1 @@\n-  value = bs->load_reference_barrier<decorators>(value, AccessInternal::oop_field_addr<decorators>(base, offset));\n-  bs->keep_alive_if_weak(resolved_decorators, value);\n-  return value;\n+  return bs->oop_load(resolved_decorators, AccessInternal::oop_field_addr<decorators>(base, offset));\n@@ -258,15 +275,1 @@\n-  bs->iu_barrier(new_value);\n-\n-  oop res;\n-  oop expected = compare_value;\n-  do {\n-    compare_value = expected;\n-    res = Raw::oop_atomic_cmpxchg(addr, compare_value, new_value);\n-    expected = res;\n-  } while ((compare_value != expected) && (resolve_forwarded(compare_value) == resolve_forwarded(expected)));\n-\n-  \/\/ Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,\n-  \/\/ because it must be the previous value.\n-  res = ShenandoahBarrierSet::barrier_set()->load_reference_barrier<decorators, T>(res, NULL);\n-  bs->satb_enqueue(res);\n-  return res;\n+  return bs->oop_cmpxchg(decorators, addr, compare_value, new_value);\n@@ -278,1 +281,2 @@\n-  return oop_atomic_cmpxchg_not_in_heap(addr, compare_value, new_value);\n+  ShenandoahBarrierSet* bs = ShenandoahBarrierSet::barrier_set();\n+  return bs->oop_cmpxchg(decorators, addr, compare_value, new_value);\n@@ -283,1 +287,3 @@\n-  return oop_atomic_cmpxchg_in_heap(AccessInternal::oop_field_addr<decorators>(base, offset), compare_value, new_value);\n+  ShenandoahBarrierSet* bs = ShenandoahBarrierSet::barrier_set();\n+  DecoratorSet resolved_decorators = AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset);\n+  return bs->oop_cmpxchg(resolved_decorators, AccessInternal::oop_field_addr<decorators>(base, offset), compare_value, new_value);\n@@ -290,9 +296,1 @@\n-  bs->iu_barrier(new_value);\n-\n-  oop previous = Raw::oop_atomic_xchg(addr, new_value);\n-\n-  \/\/ Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,\n-  \/\/ because it must be the previous value.\n-  previous = ShenandoahBarrierSet::barrier_set()->load_reference_barrier<decorators, T>(previous, NULL);\n-  bs->satb_enqueue(previous);\n-  return previous;\n+  return bs->oop_xchg(decorators, addr, new_value);\n@@ -304,1 +302,2 @@\n-  return oop_atomic_xchg_not_in_heap(addr, new_value);\n+  ShenandoahBarrierSet* bs = ShenandoahBarrierSet::barrier_set();\n+  return bs->oop_xchg(decorators, addr, new_value);\n@@ -309,1 +308,3 @@\n-  return oop_atomic_xchg_in_heap(AccessInternal::oop_field_addr<decorators>(base, offset), new_value);\n+  ShenandoahBarrierSet* bs = ShenandoahBarrierSet::barrier_set();\n+  DecoratorSet resolved_decorators = AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset);\n+  return bs->oop_xchg(resolved_decorators, AccessInternal::oop_field_addr<decorators>(base, offset), new_value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":58,"deletions":57,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_WEAK_OOP_REF, oop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<oop>(ON_WEAK_OOP_REF, oop(src), load_addr);\n@@ -75,1 +75,1 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_WEAK_OOP_REF, narrowOop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<narrowOop>(ON_WEAK_OOP_REF, oop(src), load_addr);\n@@ -79,1 +79,1 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_PHANTOM_OOP_REF, oop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<oop>(ON_PHANTOM_OOP_REF, oop(src), load_addr);\n@@ -83,1 +83,1 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_PHANTOM_OOP_REF, narrowOop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<narrowOop>(ON_PHANTOM_OOP_REF, oop(src), load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}