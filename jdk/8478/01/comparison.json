{"files":[{"patch":"@@ -327,1 +327,1 @@\n-        ! -name \"*.tar.gz\" ! -name \"classes_nocoops.jsa\" ! -name \"gtestLauncher\" \\\n+        ! -name \"*.tar.gz\" ! -name \"gtestLauncher\" \\\n","filename":"make\/scripts\/compare.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1019,1 +1019,1 @@\n-  \/\/ runtime, this region will be mapped to runtime_base.  runtime_base is 0 if this\n+  \/\/ runtime, this region will be mapped to requested_base. requested_base is 0 if this\n@@ -1022,1 +1022,4 @@\n-  static void log_region(const char* name, address base, address top, address runtime_base) {\n+  \/\/\n+  \/\/ Note: across -Xshare:dump runs, base may be different, but requested_base should\n+  \/\/ be the same as the archive contents should be deterministic.\n+  static void log_region(const char* name, address base, address top, address requested_base) {\n@@ -1024,2 +1027,2 @@\n-    base = runtime_base;\n-    top = runtime_base + size;\n+    base = requested_base;\n+    top = requested_base + size;\n@@ -1030,0 +1033,1 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n@@ -1032,1 +1036,0 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n@@ -1036,1 +1039,1 @@\n-      log_region(which, start, end, start);\n+      log_region(which, start, end, to_requested(start));\n@@ -1045,1 +1048,1 @@\n-                             p2i(start), original_oop->klass()->external_name());\n+                             p2i(to_requested(start)), original_oop->klass()->external_name());\n@@ -1050,2 +1053,2 @@\n-          log_info(cds, map)(PTR_FORMAT \": @@ Object HeapShared:roots (ObjArray)\",\n-                             p2i(start));\n+          log_info(cds, map)(PTR_FORMAT \": @@ Object HeapShared::roots (ObjArray)\",\n+                             p2i(to_requested(start)));\n@@ -1058,1 +1061,1 @@\n-        log_data(start, oop_end, start, \/*is_heap=*\/true);\n+        log_data(start, oop_end, to_requested(start), \/*is_heap=*\/true);\n@@ -1063,2 +1066,2 @@\n-                           p2i(start), size_t(end - start));\n-        log_data(start, end, start, \/*is_heap=*\/true);\n+                           p2i(to_requested(start)), size_t(end - start));\n+        log_data(start, end, to_requested(start), \/*is_heap=*\/true);\n@@ -1067,1 +1070,0 @@\n-#endif\n@@ -1069,0 +1071,4 @@\n+  static address to_requested(address p) {\n+    return HeapShared::to_requested_address(p);\n+  }\n+#endif\n@@ -1071,2 +1077,2 @@\n-  \/\/ will be mapped to runtime_base at run-time.\n-  static void log_data(address base, address top, address runtime_base, bool is_heap = false) {\n+  \/\/ will be mapped to requested_base at run-time.\n+  static void log_data(address base, address top, address requested_base, bool is_heap = false) {\n@@ -1083,1 +1089,1 @@\n-      os::print_hex_dump(&lsh, base, top, unitsize, 32, runtime_base);\n+      os::print_hex_dump(&lsh, base, top, unitsize, 32, requested_base);\n@@ -1117,0 +1123,1 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n@@ -1123,0 +1130,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -268,2 +268,7 @@\n-    _dump_region->append_intptr_t(\n-      UseCompressedOops ? (intptr_t)CompressedOops::encode_not_null(*o) : (intptr_t)((void*)(*o)));\n+    intptr_t p;\n+    if (UseCompressedOops) {\n+      p = (intptr_t)CompressedOops::encode_not_null(*o);\n+    } else {\n+      p = cast_from_oop<intptr_t>(HeapShared::to_requested_address(*o));\n+    }\n+    _dump_region->append_intptr_t(p);\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -254,2 +254,4 @@\n-      _heap_begin = (address)G1CollectedHeap::heap()->reserved().start();\n-      _heap_end = (address)G1CollectedHeap::heap()->reserved().end();\n+      address start = (address)G1CollectedHeap::heap()->reserved().start();\n+      address end = (address)G1CollectedHeap::heap()->reserved().end();\n+      _heap_begin = HeapShared::to_requested_address(start);\n+      _heap_end = HeapShared::to_requested_address(end);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -182,2 +182,3 @@\n-  unsigned hash = (unsigned)p->identity_hash();\n-  return hash;\n+  \/\/ Do not call p->identity_hash() as that will update the\n+  \/\/ object header.\n+  return primitive_hash(cast_from_oop<intptr_t>(p));\n@@ -1580,0 +1581,1 @@\n+    assert(UseCompressedOops, \"sanity\");\n@@ -1583,0 +1585,2 @@\n+      \/\/ Note: HeapShared::to_requested_address() is not necessary because\n+      \/\/ the heap always starts at a deterministic address with UseCompressedOops==true.\n@@ -1590,0 +1594,1 @@\n+    assert(!UseCompressedOops, \"sanity\");\n@@ -1594,0 +1599,4 @@\n+      if (DumpSharedSpaces) {\n+        \/\/ Make heap content deterministic.\n+        *p = HeapShared::to_requested_address(*p);\n+      }\n@@ -1602,0 +1611,28 @@\n+\n+address HeapShared::to_requested_address(address dumptime_addr) {\n+  assert(DumpSharedSpaces, \"static dump time only\");\n+  if (dumptime_addr == NULL || UseCompressedOops) {\n+    return dumptime_addr;\n+  }\n+\n+  \/\/ With UseCompressedOops==false, actual_base is selected by the OS so\n+  \/\/ it's different across -Xshare:dump runs.\n+  address actual_base = (address)G1CollectedHeap::heap()->reserved().start();\n+  address actual_end  = (address)G1CollectedHeap::heap()->reserved().end();\n+  assert(actual_base <= dumptime_addr && dumptime_addr <= actual_end, \"must be an address in the heap\");\n+\n+  \/\/ We always write the objects as if the heap started at this address. This\n+  \/\/ makes the heap content deterministic.\n+  \/\/\n+  \/\/ Note that at runtime, the heap address is also selected by the OS, so\n+  \/\/ the archive heap will not be mapped at 0x10000000. Instead, we will call\n+  \/\/ HeapShared::patch_embedded_pointers() to relocate the heap contents\n+  \/\/ accordingly.\n+  const address REQUESTED_BASE = (address)0x10000000;\n+  intx delta = REQUESTED_BASE - actual_base;\n+\n+  address requested_addr = dumptime_addr + delta;\n+  assert(REQUESTED_BASE != 0 && requested_addr != NULL, \"sanity\");\n+  return requested_addr;\n+}\n+\n@@ -1622,1 +1659,1 @@\n-  log_info(cds, heap)(\"calculate_oopmap: objects = %6d, embedded oops = %7d, nulls = %7d\",\n+  log_info(cds, heap)(\"calculate_oopmap: objects = %6d, oop fields = %7d (nulls = %7d)\",\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/oopsHierarchy.hpp\"\n@@ -520,0 +521,7 @@\n+\n+  \/\/ Returns the address of a heap object when it's mapped at the\n+  \/\/ runtime requested address. See comments in archiveBuilder.hpp.\n+  static address to_requested_address(address dumptime_addr) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop to_requested_address(oop dumptime_oop) {\n+    return cast_to_oop(to_requested_address(cast_from_oop<address>(dumptime_oop)));\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}