{"files":[{"patch":"@@ -2831,3 +2831,2 @@\n-            FormatSpecifier formatSpecifier = Conversion.of(c);\n-            if (formatSpecifier != null) {\n-                al.add(formatSpecifier);\n+            if (Conversion.isValid(c)) {\n+                al.add(new FormatSpecifier(c));\n@@ -2926,8 +2925,7 @@\n-            if (argSize + flagSize + widthSize + precisionSize + t + conversion == 0) {\n-                return 0;\n-            }\n-\n-            if (al != null) {\n-                FormatSpecifier formatSpecifier\n-                        = new FormatSpecifier(s, start, argSize, flagSize, widthSize, precisionSize, t, conversion);\n-                al.add(formatSpecifier);\n+            if (argSize + flagSize + widthSize + precisionSize + t + conversion != 0) {\n+                if (al != null) {\n+                    FormatSpecifier formatSpecifier\n+                            = new FormatSpecifier(s, start, argSize, flagSize, widthSize, precisionSize, t, conversion);\n+                    al.add(formatSpecifier);\n+                }\n+                return off - start;\n@@ -2935,1 +2933,1 @@\n-            return off - start;\n+            return 0;\n@@ -2940,25 +2938,9 @@\n-            for (int size = 0; off < max; c = s.charAt(++off), size++) {\n-                if (isDigit(c)) {\n-                    continue;\n-                }\n-\n-                if (size != 0) {\n-                    if (c == '$') {\n-                        ++off;\n-                        argSize = size + 1;\n-                        size = 0;\n-                        if (off < max) {\n-                            c = s.charAt(off);\n-                        }\n-                    } else {\n-                        if (first == '0') {\n-                            boolean nextFlag = off < max && Flags.isFlag(s.charAt(off));\n-                            if (nextFlag) {\n-                                off = start;\n-                                c = first;\n-                            } else {\n-                                flagSize = 1;\n-                                off = start + 1;\n-                                if (off < max) {\n-                                    c = s.charAt(off);\n-                                }\n+            for (int size = 0; off < max; ++off, c = s.charAt(off), size++) {\n+                if (!isDigit(c)) {\n+                    if (size > 0) {\n+                        if (c == '$') {\n+                            ++off;\n+                            argSize = size + 1;\n+                            size = 0;\n+                            if (off < max) {\n+                                c = s.charAt(off);\n@@ -2967,1 +2949,16 @@\n-                            widthSize = size;\n+                            if (first == '0') {\n+                                boolean nextFlag = off < max && Flags.isFlag(s.charAt(off));\n+                                if (!nextFlag) {\n+                                    flagSize = 1;\n+                                    off = start + 1;\n+                                    if (off < max) {\n+                                        c = s.charAt(off);\n+                                    }\n+                                } else {\n+                                    off = start;\n+                                    c = first;\n+                                }\n+                            } else {\n+                                widthSize = size;\n+                            }\n+                            size = 0;\n@@ -2969,1 +2966,0 @@\n-                        size = 0;\n@@ -2971,0 +2967,1 @@\n+                    break;\n@@ -2972,1 +2969,0 @@\n-                break;\n@@ -2978,1 +2974,1 @@\n-            for (int size = 0; off < max; c = s.charAt(++off), size++) {\n+            for (int size = 0; off < max; ++off, c = s.charAt(off), size++) {\n@@ -2989,1 +2985,1 @@\n-            for (int size = 0; off < max; c = s.charAt(++off), size++) {\n+            for (int size = 0; off < max; ++off, c = s.charAt(off), size++) {\n@@ -3000,8 +2996,7 @@\n-            for (int size = 0; off < max; c = s.charAt(++off), size++) {\n-                if (isDigit(c)) {\n-                    continue;\n-                }\n-                if (size != 0) {\n-                    return size + 1;\n-                } else {\n-                    break;\n+            for (int size = 0; off < max; ++off, c = s.charAt(off), size++) {\n+                if (!isDigit(c)) {\n+                    if (size > 0) {\n+                        return size + 1;\n+                    } else {\n+                        break;\n+                    }\n@@ -4983,27 +4978,0 @@\n-        static FormatSpecifier of(char c) {\n-            return switch (c) {\n-                case BOOLEAN -> SPEC_BOOLEAN;\n-                case BOOLEAN_UPPER -> SPEC_BOOLEAN_UPPER;\n-                case STRING -> SPEC_STRING;\n-                case STRING_UPPER -> SPEC_STRING_UPPER;\n-                case HASHCODE -> SPEC_HASHCODE;\n-                case HASHCODE_UPPER -> SPEC_HASHCODE_UPPER;\n-                case CHARACTER -> SPEC_CHARACTER;\n-                case CHARACTER_UPPER -> SPEC_CHARACTER_UPPER;\n-                case DECIMAL_INTEGER -> SPEC_DECIMAL_INTEGER;\n-                case OCTAL_INTEGER -> SPEC_OCTAL_INTEGER;\n-                case HEXADECIMAL_INTEGER -> SPEC_HEXADECIMAL_INTEGER;\n-                case HEXADECIMAL_INTEGER_UPPER -> SPEC_HEXADECIMAL_INTEGER_UPPER;\n-                case SCIENTIFIC -> SPEC_SCIENTIFIC;\n-                case SCIENTIFIC_UPPER -> SPEC_SCIENTIFIC_UPPER;\n-                case GENERAL -> SPEC_GENERAL;\n-                case GENERAL_UPPER -> SPEC_GENERAL_UPPER;\n-                case DECIMAL_FLOAT -> SPEC_DECIMAL_FLOAT;\n-                case HEXADECIMAL_FLOAT -> SPEC_HEXADECIMAL_FLOAT;\n-                case HEXADECIMAL_FLOAT_UPPER -> SPEC_HEXADECIMAL_FLOAT_UPPER;\n-                case LINE_SEPARATOR -> SPEC_LINE_SEPARATOR;\n-                case PERCENT_SIGN -> SPEC_PERCENT_SIGN;\n-                default -> null;\n-            };\n-        }\n-\n@@ -5064,22 +5032,0 @@\n-\n-        static final FormatSpecifier SPEC_BOOLEAN = new FormatSpecifier(Conversion.BOOLEAN);\n-        static final FormatSpecifier SPEC_BOOLEAN_UPPER = new FormatSpecifier(Conversion.BOOLEAN_UPPER);\n-        static final FormatSpecifier SPEC_STRING = new FormatSpecifier(Conversion.STRING);\n-        static final FormatSpecifier SPEC_STRING_UPPER = new FormatSpecifier(Conversion.STRING_UPPER);\n-        static final FormatSpecifier SPEC_HASHCODE = new FormatSpecifier(Conversion.HASHCODE);\n-        static final FormatSpecifier SPEC_HASHCODE_UPPER = new FormatSpecifier(Conversion.HASHCODE_UPPER);\n-        static final FormatSpecifier SPEC_CHARACTER = new FormatSpecifier(Conversion.CHARACTER);\n-        static final FormatSpecifier SPEC_CHARACTER_UPPER = new FormatSpecifier(Conversion.CHARACTER_UPPER);\n-        static final FormatSpecifier SPEC_DECIMAL_INTEGER = new FormatSpecifier(Conversion.DECIMAL_INTEGER);\n-        static final FormatSpecifier SPEC_OCTAL_INTEGER = new FormatSpecifier(Conversion.OCTAL_INTEGER);\n-        static final FormatSpecifier SPEC_HEXADECIMAL_INTEGER = new FormatSpecifier(Conversion.HEXADECIMAL_INTEGER);\n-        static final FormatSpecifier SPEC_HEXADECIMAL_INTEGER_UPPER = new FormatSpecifier(Conversion.HEXADECIMAL_INTEGER_UPPER);\n-        static final FormatSpecifier SPEC_SCIENTIFIC = new FormatSpecifier(Conversion.SCIENTIFIC);\n-        static final FormatSpecifier SPEC_SCIENTIFIC_UPPER = new FormatSpecifier(Conversion.SCIENTIFIC_UPPER);\n-        static final FormatSpecifier SPEC_GENERAL = new FormatSpecifier(Conversion.GENERAL);\n-        static final FormatSpecifier SPEC_GENERAL_UPPER = new FormatSpecifier(Conversion.GENERAL_UPPER);\n-        static final FormatSpecifier SPEC_DECIMAL_FLOAT = new FormatSpecifier(Conversion.DECIMAL_FLOAT);\n-        static final FormatSpecifier SPEC_HEXADECIMAL_FLOAT = new FormatSpecifier(Conversion.HEXADECIMAL_FLOAT);\n-        static final FormatSpecifier SPEC_HEXADECIMAL_FLOAT_UPPER = new FormatSpecifier(Conversion.HEXADECIMAL_FLOAT_UPPER);\n-        static final FormatSpecifier SPEC_LINE_SEPARATOR = new FormatSpecifier(Conversion.LINE_SEPARATOR);\n-        static final FormatSpecifier SPEC_PERCENT_SIGN = new FormatSpecifier(Conversion.PERCENT_SIGN);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":45,"deletions":99,"binary":false,"changes":144,"status":"modified"}]}