{"files":[{"patch":"@@ -221,1 +221,0 @@\n-        Formatter.FormatSpecifierParser parser = null;\n@@ -235,14 +234,3 @@\n-            if (parser == null) {\n-                parser = new Formatter.FormatSpecifierParser(null, c, i, fragment, max);\n-            } else {\n-                parser.reset(c, i);\n-            }\n-\n-            String group;\n-            int off = parser.parse();\n-\n-            if (off == 1) {\n-                char c1 = fragment.charAt(off);\n-                if (c1 == '%' || c1 == 'n') {\n-                    continue;\n-                }\n+            if (c == '%' || c == 'n') {\n+                i++;\n+                continue;\n@@ -250,1 +238,2 @@\n-\n+            int off = new Formatter.FormatSpecifierParser(null, c, i, fragment, max)\n+                    .parse();\n@@ -255,1 +244,2 @@\n-                group = fragment.substring(i - 1, i + off + 1);\n+                String group = fragment.substring(i - 1, i + off);\n+                throw new MissingFormatArgumentException(group + \" is not immediately followed by an embedded expression\");\n@@ -257,1 +247,1 @@\n-                group = String.valueOf(c);\n+                throw new UnknownFormatConversionException(String.valueOf(c));\n@@ -259,1 +249,0 @@\n-            throw new MissingFormatArgumentException(group + \" is not immediately followed by an embedded expression\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatProcessor.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2918,0 +2918,2 @@\n+            } else {\n+                return 0;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.MissingFormatArgumentException;\n+import java.util.UnknownFormatConversionException;\n@@ -53,0 +55,22 @@\n+    public interface Executable {\n+        void execute() throws Throwable;\n+    }\n+\n+    static <T extends Throwable> void assertThrows(Class<T> expectedType, Executable executable, String message) {\n+        Throwable actualException = null;\n+        try {\n+            executable.execute();\n+        } catch (Throwable e) {\n+            actualException = e;\n+        }\n+        if (actualException == null) {\n+            throw new RuntimeException(\"Expected \" + expectedType + \" to be thrown, but nothing was thrown.\");\n+        }\n+        if (!expectedType.isInstance(actualException)) {\n+            throw new RuntimeException(\"Expected \" + expectedType + \" to be thrown, but was thrown \" + actualException.getClass());\n+        }\n+        if (message != null && !message.equals(actualException.getMessage())) {\n+            throw new RuntimeException(\"Expected \" + message + \" to be thrown, but was thrown \" + actualException.getMessage());\n+        }\n+    }\n+\n@@ -914,0 +938,22 @@\n+\n+        test(\"aaa%false\", fmt.\"aaa%%%b\\{false}\");\n+        test(\"aaa\\nfalse\", fmt.\"aaa%n%b\\{false}\");\n+\n+        assertThrows(\n+                MissingFormatArgumentException.class,\n+                () -> fmt. \"%10ba\\{ false }\",\n+                \"Format specifier '%10b is not immediately followed by an embedded expression'\");\n+\n+        assertThrows(\n+                MissingFormatArgumentException.class,\n+                () ->fmt. \"%ba\\{ false }\",\n+                \"Format specifier '%b is not immediately followed by an embedded expression'\");\n+\n+        assertThrows(\n+                MissingFormatArgumentException.class,\n+                () ->fmt. \"%b\",\n+                \"Format specifier '%b is not immediately followed by an embedded expression'\");\n+        assertThrows(\n+                UnknownFormatConversionException.class,\n+                () ->fmt. \"%0\",\n+                \"Conversion = '0'\");\n","filename":"test\/jdk\/java\/lang\/template\/FormatterBuilder.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"}]}