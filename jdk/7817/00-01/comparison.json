{"files":[{"patch":"@@ -43,1 +43,1 @@\n-    public InputBlockEdge(InputBlock from, InputBlock to) {\n+    public InputBlockEdge(InputBlock from, InputBlock to, String label) {\n@@ -48,0 +48,1 @@\n+        this.label = label;\n@@ -70,4 +71,0 @@\n-    public void setLabel(String label) {\n-        this.label = label;\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputBlockEdge.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-        InputBlockEdge edge = new InputBlockEdge(left, right);\n-        edge.setLabel(label);\n+        InputBlockEdge edge = new InputBlockEdge(left, right, label);\n@@ -177,1 +176,1 @@\n-                    noBlock = this.addArtificialBlock();\n+                    noBlock = addArtificialBlock();\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputGraph.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-    private List<RemoveBlockRule> rules;\n-    private String name;\n+    private final List<RemoveBlockRule> rules;\n+    private final String name;\n@@ -64,1 +64,1 @@\n-        private BlockSelector selector;\n+        private final BlockSelector selector;\n","filename":"src\/utils\/IdealGraphVisualizer\/Filter\/src\/main\/java\/com\/sun\/hotspot\/igv\/filter\/RemoveBlockFilter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import com.sun.hotspot.igv.data.Properties;\n@@ -28,2 +27,0 @@\n-import com.sun.hotspot.igv.graph.FigureConnection;\n-import com.sun.hotspot.igv.graph.Connection.ConnectionStyle;\n@@ -31,2 +28,0 @@\n-import com.sun.hotspot.igv.graph.Figure;\n-import com.sun.hotspot.igv.graph.InputSlot;\n@@ -35,1 +30,0 @@\n-import java.util.List;\n@@ -57,20 +51,0 @@\n-        List<Figure> figures = d.getFigures();\n-        for (Figure f : figures) {\n-            for (InputSlot is : f.getInputSlots()) {\n-                for (FigureConnection c : is.getConnections()) {\n-                    String type = null;\n-\n-                    if (type != null) {\n-                        Color typeColor = usageColor.get(type);\n-                        if (typeColor == null) {\n-                            c.setColor(otherUsageColor);\n-                        } else {\n-                            c.setColor(typeColor);\n-                        }\n-                        if (c.getStyle() != ConnectionStyle.DASHED && type == \"Successor\") {\n-                            c.setStyle(ConnectionStyle.BOLD);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n","filename":"src\/utils\/IdealGraphVisualizer\/Graal\/src\/main\/java\/com\/sun\/hotspot\/igv\/graal\/filters\/GraalEdgeColorFilter.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    private Selector selector;\n+    private final Selector selector;\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/AnySelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,9 +33,3 @@\n-    @Override\n-    public boolean isVIP() {\n-        return style == ConnectionStyle.BOLD;\n-    }\n-\n-    private Block sourceBlock;\n-    private Block destinationBlock;\n-    private Color color;\n-    private ConnectionStyle style;\n+    private final Block sourceBlock;\n+    private final Block destinationBlock;\n+    private final String label;\n@@ -43,1 +37,0 @@\n-    private String label;\n@@ -49,2 +42,0 @@\n-        this.color = Color.BLACK;\n-        this.style = ConnectionStyle.NORMAL;\n@@ -54,1 +45,1 @@\n-        return color;\n+        return Color.BLUE;\n@@ -58,13 +49,1 @@\n-        return style;\n-    }\n-\n-    public void setColor(Color c) {\n-        color = c;\n-    }\n-\n-    public void setStyle(ConnectionStyle s) {\n-        style = s;\n-    }\n-\n-    public String getLabel() {\n-        return label;\n+        return ConnectionStyle.BOLD;\n@@ -76,2 +55,2 @@\n-        builder.append(\"B\" + sourceBlock.getInputBlock().getName() + \" → \" +\n-                       \"B\" + destinationBlock.getInputBlock().getName());\n+        builder.append(\"B\").append(sourceBlock.getInputBlock().getName())\n+               .append(\" → B\").append(destinationBlock.getInputBlock().getName());\n@@ -109,0 +88,5 @@\n+    @Override\n+    public boolean isVIP() {\n+        return true;\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/BlockConnection.java","additions":12,"deletions":28,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-    private boolean cfg = false;\n-    private Set<BlockConnection> blockConnections;\n+    private boolean cfg;\n+    private final Set<BlockConnection> blockConnections;\n@@ -78,1 +78,2 @@\n-    private Diagram() {\n+    private Diagram(InputGraph graph, String nodeText, String shortNodeText,\n+                    String tinyNodeText) {\n@@ -88,0 +89,4 @@\n+        this.graph = graph;\n+        this.nodeText = nodeText;\n+        this.shortNodeText = shortNodeText;\n+        this.tinyNodeText = tinyNodeText;\n@@ -119,4 +124,0 @@\n-    public Diagram getNext() {\n-        return Diagram.createDiagram(graph.getNext(), nodeText, shortNodeText, tinyNodeText);\n-    }\n-\n@@ -127,4 +128,0 @@\n-    public Diagram getPrev() {\n-        return Diagram.createDiagram(graph.getPrev(), nodeText, shortNodeText, tinyNodeText);\n-    }\n-\n@@ -171,6 +168,1 @@\n-        Diagram d = new Diagram();\n-        d.graph = graph;\n-        d.nodeText = nodeText;\n-        d.shortNodeText = shortNodeText;\n-        d.tinyNodeText = tinyNodeText;\n-\n+        Diagram d = new Diagram(graph, nodeText, shortNodeText, tinyNodeText);\n@@ -224,4 +216,1 @@\n-            BlockConnection c = new BlockConnection(p, s, e.getLabel());\n-            c.setStyle(Connection.ConnectionStyle.BOLD);\n-            c.setColor(Color.BLUE);\n-            d.blockConnections.add(c);\n+            d.blockConnections.add(new BlockConnection(p, s, e.getLabel()));\n@@ -296,1 +285,0 @@\n-\n@@ -299,1 +287,0 @@\n-\n@@ -304,1 +291,0 @@\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/Diagram.java","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.awt.image.BufferedImage;\n@@ -62,0 +61,1 @@\n+    private FontMetrics metrics;\n@@ -71,4 +71,0 @@\n-        BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n-        Graphics g = image.getGraphics();\n-        g.setFont(diagram.getFont().deriveFont(Font.BOLD));\n-        FontMetrics metrics = g.getFontMetrics();\n@@ -123,4 +119,0 @@\n-            BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n-            Graphics g = image.getGraphics();\n-            g.setFont(diagram.getFont().deriveFont(Font.BOLD));\n-            FontMetrics metrics = g.getFontMetrics();\n@@ -150,0 +142,2 @@\n+        Canvas canvas = new Canvas();\n+        metrics = canvas.getFontMetrics(diagram.getFont().deriveFont(Font.BOLD));\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/Figure.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,6 +39,2 @@\n-    @Override\n-    public boolean isVIP() {\n-        return style == ConnectionStyle.BOLD;\n-    }\n-    private InputSlot inputSlot;\n-    private OutputSlot outputSlot;\n+    private final InputSlot inputSlot;\n+    private final OutputSlot outputSlot;\n@@ -140,0 +136,5 @@\n+    @Override\n+    public boolean isVIP() {\n+        return style == ConnectionStyle.BOLD;\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Graph\/src\/main\/java\/com\/sun\/hotspot\/igv\/graph\/FigureConnection.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,6 +54,8 @@\n-    private int border;\n-    private Dimension nodeOffset;\n-    private int headerVerticalSpace;\n-    private Dimension emptySize;\n-\n-    public ClusterNode(Cluster cluster, String name) {\n+    private final int border;\n+    private final Dimension nodeOffset;\n+    private final int headerVerticalSpace;\n+    private final Dimension emptySize;\n+\n+    public ClusterNode(Cluster cluster, String name, int border,\n+                       Dimension nodeOffset, int headerVerticalSpace,\n+                       Dimension emptySize) {\n@@ -65,4 +67,11 @@\n-        this.border = 20;\n-        this.nodeOffset = new Dimension(0, 0);\n-        this.headerVerticalSpace = 0;\n-        this.emptySize = new Dimension(0, 0);\n+        this.border = border;\n+        this.nodeOffset = nodeOffset;\n+        this.headerVerticalSpace = headerVerticalSpace;\n+        this.emptySize = emptySize;\n+        if (emptySize.width > 0 || emptySize.height > 0) {\n+            updateSize();\n+        }\n+    }\n+\n+    public ClusterNode(Cluster cluster, String name) {\n+        this(cluster, name, 20, new Dimension(0, 0), 0, new Dimension(0, 0));\n@@ -244,4 +253,0 @@\n-    public void setBorder(int border) {\n-        this.border = border;\n-    }\n-\n@@ -252,13 +257,0 @@\n-    public void setNodeOffset(Dimension nodeOffset) {\n-        this.nodeOffset = nodeOffset;\n-    }\n-\n-    public void setHeaderVerticalSpace(int headerVerticalSpace) {\n-        this.headerVerticalSpace = headerVerticalSpace;\n-    }\n-\n-    public void setEmptySize(Dimension emptySize) {\n-        this.emptySize = emptySize;\n-        updateSize();\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/ClusterNode.java","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    \/\/ Lays out nodes within a single cluster (basic block).\n@@ -43,0 +44,1 @@\n+    \/\/ Lays out clusters in the CFG.\n@@ -71,5 +73,10 @@\n-        \/\/ Map from \"primitive\" cluster edges to their corresponding input\n-        \/\/ links. Used when writing back edge coordinates into the input links.\n-        Map<AbstractMap.SimpleEntry<Cluster, Cluster>, Link> inputLink = new HashMap<>();\n-        for (Link l : graph.getLinks()) {\n-            inputLink.put(new AbstractMap.SimpleEntry<Cluster, Cluster>(l.getFromCluster(), l.getToCluster()), l);\n+        \/\/ Create cluster-level nodes and edges.\n+        Map<Cluster, ClusterNode> clusterNode = createClusterNodes(graph);\n+        Set<ClusterEdge> clusterEdges = createClusterEdges(clusterNode);\n+        markRootClusters(clusterEdges);\n+\n+        \/\/ Compute layout for each cluster.\n+        for (Cluster c : clusters) {\n+            ClusterNode n = clusterNode.get(c);\n+            subManager.doLayout(new LayoutGraph(n.getSubEdges(), n.getSubNodes()), new HashSet<Link>());\n+            n.updateSize();\n@@ -78,2 +85,10 @@\n-        \/\/ Create cluster nodes.\n-        Set<ClusterNode> clusterNodeSet = new HashSet<>();\n+        \/\/ Compute inter-cluster layout.\n+        manager.doLayout(new LayoutGraph(clusterEdges, new HashSet<>(clusterNode.values())),\n+                         new HashSet<Link>());\n+\n+        \/\/ Write back results.\n+        writeBackClusterBounds(clusterNode);\n+        writeBackClusterEdgePoints(graph, clusterEdges);\n+    }\n+\n+    private Map<Cluster, ClusterNode> createClusterNodes(LayoutGraph graph) {\n@@ -82,5 +97,1 @@\n-            ClusterNode cn = new ClusterNode(c, c.toString());\n-            cn.setBorder(BLOCK_BORDER);\n-            cn.setHeaderVerticalSpace(fontMetrics.getHeight());\n-            cn.setNodeOffset(c.getNodeOffset());\n-            String blockLabel = \"B\" + c.toString();\n+            String blockLabel = \"B\" + c;\n@@ -89,1 +100,2 @@\n-            cn.setEmptySize(emptySize);\n+            ClusterNode cn = new ClusterNode(c, c.toString(), BLOCK_BORDER, c.getNodeOffset(),\n+                                             fontMetrics.getHeight(), emptySize);\n@@ -91,1 +103,0 @@\n-            clusterNodeSet.add(cn);\n@@ -94,1 +105,9 @@\n-        \/\/ Create cluster edges.\n+        for (Vertex v : graph.getVertices()) {\n+            Cluster c = v.getCluster();\n+            assert c != null : \"Cluster of vertex \" + v + \" is null!\";\n+            clusterNode.get(c).addSubNode(v);\n+        }\n+        return clusterNode;\n+    }\n+\n+    private Set<ClusterEdge> createClusterEdges(Map<Cluster, ClusterNode> clusterNode) {\n@@ -106,0 +125,2 @@\n+        return clusterEdges;\n+    }\n@@ -107,15 +128,1 @@\n-        \/\/ Add subnodes to cluster nodes.\n-        for (Vertex v : graph.getVertices()) {\n-            Cluster c = v.getCluster();\n-            assert c != null : \"Cluster of vertex \" + v + \" is null!\";\n-            clusterNode.get(c).addSubNode(v);\n-        }\n-\n-        \/\/ Compute layout for each cluster.\n-        for (Cluster c : clusters) {\n-            ClusterNode n = clusterNode.get(c);\n-            subManager.doLayout(new LayoutGraph(n.getSubEdges(), n.getSubNodes()), new HashSet<Link>());\n-            n.updateSize();\n-        }\n-\n-        \/\/ Compute root clusters.\n+    private void markRootClusters(Set<ClusterEdge> clusterEdges) {\n@@ -127,2 +134,1 @@\n-        \/\/ Compute cluster layout.\n-        manager.doLayout(new LayoutGraph(clusterEdges, clusterNodeSet), new HashSet<Link>());\n+    }\n@@ -130,1 +136,1 @@\n-        \/\/ Write results back into input clusters and links.\n+    private void writeBackClusterBounds(Map<Cluster, ClusterNode> clusterNode) {\n@@ -135,0 +141,8 @@\n+    }\n+\n+    private void writeBackClusterEdgePoints(LayoutGraph graph, Set<ClusterEdge> clusterEdges) {\n+        \/\/ Map from \"primitive\" cluster edges to their input links.\n+        Map<AbstractMap.SimpleEntry<Cluster, Cluster>, Link> inputLink = new HashMap<>();\n+        for (Link l : graph.getLinks()) {\n+            inputLink.put(new AbstractMap.SimpleEntry<Cluster, Cluster>(l.getFromCluster(), l.getToCluster()), l);\n+        }\n@@ -141,3 +155,0 @@\n-\n-    public void doRouting(LayoutGraph graph) {\n-    }\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalCFGLayoutManager.java","additions":47,"deletions":36,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -248,3 +248,0 @@\n-\n-    public void doRouting(LayoutGraph graph) {\n-    }\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalClusterLayoutManager.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -202,0 +202,15 @@\n+    \/\/ Remove self-edges, possibly saving them into the selfEdges set.\n+    private void removeSelfEdges(boolean save) {\n+        for (LayoutNode node : nodes) {\n+            for (LayoutEdge e : new ArrayList<>(node.succs)) {\n+                if (e.to == node) {\n+                    if (save) {\n+                        selfEdges.add(e);\n+                    }\n+                    node.succs.remove(e);\n+                    node.preds.remove(e);\n+                }\n+            }\n+        }\n+    }\n+\n@@ -230,9 +245,1 @@\n-            for (LayoutNode node : nodes) {\n-                for (LayoutEdge e : new ArrayList<>(node.succs)) {\n-                    assert e.from == node;\n-                    if (e.to == node) {\n-                        node.succs.remove(e);\n-                        node.preds.remove(e);\n-                    }\n-                }\n-            }\n+            removeSelfEdges(false);\n@@ -259,10 +266,2 @@\n-        \/\/ Hide self-edges from the core layout algorithm.\n-        for (LayoutNode node : nodes) {\n-            for (LayoutEdge e : new ArrayList<>(node.succs)) {\n-                if (e.to == node) {\n-                    selfEdges.add(e);\n-                    node.succs.remove(e);\n-                    node.preds.remove(e);\n-                }\n-            }\n-        }\n+        \/\/ Hide self-edges from the layout algorithm and save them for later.\n+        removeSelfEdges(true);\n@@ -290,1 +289,1 @@\n-        \/\/ Put self-edges back so that they are assigned points.\n+        \/\/ Put saved self-edges back so that they are assigned points.\n@@ -1871,5 +1870,0 @@\n-\n-    @Override\n-    public void doRouting(LayoutGraph graph) {\n-        \/\/ Do nothing for now\n-    }\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalLayoutManager.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private Map<? extends Vertex, Integer> vertexRank;\n+    private final Map<? extends Vertex, Integer> vertexRank;\n@@ -54,3 +54,1 @@\n-        vertices.sort((Vertex a, Vertex b) ->\n-                      Integer.compare(vertexRank.getOrDefault(a, Integer.MAX_VALUE),\n-                                      vertexRank.getOrDefault(b, Integer.MAX_VALUE)));\n+        vertices.sort(Comparator.comparingInt((Vertex v) -> vertexRank.getOrDefault(v, Integer.MAX_VALUE)));\n@@ -59,0 +57,4 @@\n+        assignVerticalCoordinates(vertices);\n+    }\n+\n+    private void assignVerticalCoordinates(List<Vertex> vertices) {\n@@ -64,1 +66,0 @@\n-\n@@ -66,3 +67,0 @@\n-\n-    @Override\n-    public void doRouting(LayoutGraph graph) {}\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/LinearLayoutManager.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            if (l.getFrom() == null || l.getTo() == null)\n+            if (l.getFrom() == null || l.getTo() == null) {\n@@ -56,0 +56,1 @@\n+            }\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/src\/main\/java\/com\/sun\/hotspot\/igv\/layout\/LayoutGraph.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-\n-    public void doRouting(LayoutGraph graph);\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/src\/main\/java\/com\/sun\/hotspot\/igv\/layout\/LayoutManager.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-                Collections.sort(nControlSuccs, (Node a, Node b) ->\n-                                 Integer.compare(a.inputNode.getId(), b.inputNode.getId()));\n+                nControlSuccs.sort(Comparator.comparingInt((Node a) -> a.inputNode.getId()));\n@@ -570,4 +569,0 @@\n-    private static boolean isRegion(Node n) {\n-        return n.inputNode.getProperties().get(\"name\").equals(\"Region\");\n-    }\n-\n@@ -575,1 +570,1 @@\n-        return n.inputNode.getProperties().get(\"name\").equals(\"CountedLoopEnd\");\n+        return hasName(n, \"CountedLoopEnd\");\n@@ -579,1 +574,1 @@\n-        return n.inputNode.getProperties().get(\"name\").equals(\"Phi\");\n+        return hasName(n, \"Phi\");\n@@ -583,2 +578,1 @@\n-        return n.inputNode.getProperties().get(\"name\").equals(\"Proj\") ||\n-               n.inputNode.getProperties().get(\"name\").equals(\"MachProj\");\n+        return hasName(n, \"Proj\") || hasName(n, \"MachProj\");\n@@ -588,1 +582,9 @@\n-        return n.inputNode.getProperties().get(\"name\").equals(\"Parm\");\n+        return hasName(n, \"Parm\");\n+    }\n+\n+    private static boolean hasName(Node n, String name) {\n+        String nodeName = n.inputNode.getProperties().get(\"name\");\n+        if (nodeName == null) {\n+            return false;\n+        }\n+        return nodeName.equals(name);\n@@ -600,3 +602,1 @@\n-            InputNode inputNode = node.inputNode;\n-            String s = inputNode.getProperties().get(\"name\");\n-            if (s != null && s.equals(\"Root\")) {\n+            if (hasName(node, \"Root\")) {\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/Util\/src\/main\/java\/com\/sun\/hotspot\/igv\/util\/StringUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,3 +89,1 @@\n-                if (!response.addResult(new Runnable() {\n-                        @Override\n-                        public void run() {\n+                if (!response.addResult(() -> {\n@@ -99,2 +97,1 @@\n-                        }\n-                    },\n+                        },\n@@ -120,3 +117,1 @@\n-            response.addResult(new Runnable() {\n-                @Override\n-                public void run() {\n+            response.addResult(() -> {\n@@ -127,3 +122,2 @@\n-                }\n-            },\n-                    \"(Error during search)\"\n+                },\n+                \"(Error during search)\"\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/BlockQuickSearch.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -641,8 +641,4 @@\n-        if (getModel().getShowBlocks()) {\n-            HierarchicalClusterLayoutManager m = new HierarchicalClusterLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n-            HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n-            manager.setMaxLayerLength(9);\n-            manager.setMinLayerDifference(3);\n-            m.setManager(manager);\n-            m.setSubManager(new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS));\n-            m.doLayout(new LayoutGraph(edges, figures));\n+        if (getModel().getShowSea()) {\n+            doSeaLayout(figures, edges);\n+        } else if (getModel().getShowBlocks()) {\n+            doClusteredLayout(figures, edges);\n@@ -650,14 +646,37 @@\n-            HierarchicalCFGLayoutManager m = new HierarchicalCFGLayoutManager();\n-            HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n-            manager.setMaxLayerLength(9);\n-            manager.setMinLayerDifference(1);\n-            manager.setLayoutSelfEdges(true);\n-            manager.setXOffset(25);\n-            manager.setLayerOffset(25);\n-            m.setManager(manager);\n-            Map<InputNode, Figure> nodeFig = new HashMap<InputNode, Figure>();\n-            for (Figure f : figures) {\n-                InputNode n = f.getFirstSourceNode();\n-                if (n != null) {\n-                    nodeFig.put(n, f);\n-                }\n+            doCFGLayout(figures, edges);\n+        }\n+\n+        relayoutWithoutLayout(oldVisibleWidgets);\n+    }\n+\n+    private void doSeaLayout(HashSet<Figure> figures, HashSet<Connection> edges) {\n+        HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n+        manager.setMaxLayerLength(10);\n+        manager.doLayout(new LayoutGraph(edges, figures));\n+    }\n+\n+    private void doClusteredLayout(HashSet<Figure> figures, HashSet<Connection> edges) {\n+        HierarchicalClusterLayoutManager m = new HierarchicalClusterLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n+        HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n+        manager.setMaxLayerLength(9);\n+        manager.setMinLayerDifference(3);\n+        m.setManager(manager);\n+        m.setSubManager(new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS));\n+        m.doLayout(new LayoutGraph(edges, figures));\n+    }\n+\n+    private void doCFGLayout(HashSet<Figure> figures, HashSet<Connection> edges) {\n+        Diagram diagram = getModel().getDiagramToView();\n+        HierarchicalCFGLayoutManager m = new HierarchicalCFGLayoutManager();\n+        HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n+        manager.setMaxLayerLength(9);\n+        manager.setMinLayerDifference(1);\n+        manager.setLayoutSelfEdges(true);\n+        manager.setXOffset(25);\n+        manager.setLayerOffset(25);\n+        m.setManager(manager);\n+        Map<InputNode, Figure> nodeFig = new HashMap<InputNode, Figure>();\n+        for (Figure f : figures) {\n+            InputNode n = f.getFirstSourceNode();\n+            if (n != null) {\n+                nodeFig.put(n, f);\n@@ -665,13 +684,13 @@\n-            \/\/ Compute global ranking among figures given by in-block order. If\n-            \/\/ needed, this could be cached as long as it is computed for all\n-            \/\/ the figures in the model, not just the visible ones.\n-            Map<Figure, Integer> figureRank =\n-                new HashMap<Figure, Integer>(figures.size());\n-            int r = 0;\n-            for (InputBlock b : getModel().getGraphToView().getBlocks()) {\n-                for (InputNode n : b.getNodes()) {\n-                    Figure f = nodeFig.get(n);\n-                    if (f != null) {\n-                        figureRank.put(f, r);\n-                        r++;\n-                    }\n+        }\n+        \/\/ Compute global ranking among figures given by in-block order. If\n+        \/\/ needed, this could be cached as long as it is computed for all the\n+        \/\/ figures in the model, not just the visible ones.\n+        Map<Figure, Integer> figureRank =\n+            new HashMap<Figure, Integer>(figures.size());\n+        int r = 0;\n+        for (InputBlock b : getModel().getGraphToView().getBlocks()) {\n+            for (InputNode n : b.getNodes()) {\n+                Figure f = nodeFig.get(n);\n+                if (f != null) {\n+                    figureRank.put(f, r);\n+                    r++;\n@@ -680,9 +699,0 @@\n-            \/\/ Add connections for CFG edges.\n-            edges.addAll(diagram.getBlockConnections());\n-            m.setSubManager(new LinearLayoutManager(figureRank));\n-            m.setClusters(new HashSet<>(diagram.getBlocks()));\n-            m.doLayout(new LayoutGraph(edges, figures));\n-        } else if (getModel().getShowSea()) {\n-            HierarchicalLayoutManager manager = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.SAME_OUTPUTS);\n-            manager.setMaxLayerLength(10);\n-            manager.doLayout(new LayoutGraph(edges, figures));\n@@ -690,2 +700,5 @@\n-\n-        relayoutWithoutLayout(oldVisibleWidgets);\n+        \/\/ Add connections for CFG edges.\n+        edges.addAll(diagram.getBlockConnections());\n+        m.setSubManager(new LinearLayoutManager(figureRank));\n+        m.setClusters(new HashSet<>(diagram.getBlocks()));\n+        m.doLayout(new LayoutGraph(edges, figures));\n@@ -693,0 +706,1 @@\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":60,"deletions":46,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/NodeQuickSearch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-    private boolean state;\n-\n@@ -50,6 +48,0 @@\n-    public void setSelected(boolean b) {\n-        if (isSelected() != b) {\n-            this.putValue(SELECTED_KEY, b);\n-        }\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableBlockLayoutAction.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-    private boolean state;\n-\n@@ -46,6 +44,0 @@\n-    public void setSelected(boolean b) {\n-        if (isSelected() != b) {\n-            this.putValue(SELECTED_KEY, b);\n-        }\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableCFGLayoutAction.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-    private boolean state;\n-\n@@ -46,6 +44,0 @@\n-    public void setSelected(boolean b) {\n-        if (isSelected() != b) {\n-            this.putValue(SELECTED_KEY, b);\n-        }\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/EnableSeaLayoutAction.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private static final Font titleFont = new Font(\"Arial\", Font.BOLD, 14);\n+    private static final Font TITLE_FONT = new Font(\"Arial\", Font.BOLD, 14);\n@@ -75,1 +75,1 @@\n-        g.setFont(titleFont);\n+        g.setFont(TITLE_FONT);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/BlockWidget.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-        \/\/init();\n-        \/\/getFigureWidget().getLeftWidget().addChild(this);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/InputSlotWidget.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,2 +71,0 @@\n-\n-        \/\/this.setPreferredBounds(this.calculateClientArea());\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/SlotWidget.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}