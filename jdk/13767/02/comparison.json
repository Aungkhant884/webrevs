{"files":[{"patch":"@@ -3238,1 +3238,1 @@\n-            && is_power_of_2(n->get_int() + 1));\n+            && is_power_of_2((juint)n->get_int() + 1));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,3 +92,3 @@\n-            case Bytecodes::_iadd: set_constant(a + b); return;\n-            case Bytecodes::_isub: set_constant(a - b); return;\n-            case Bytecodes::_imul: set_constant(a * b); return;\n+            case Bytecodes::_iadd: set_constant(java_add(a, b)); return;\n+            case Bytecodes::_isub: set_constant(java_subtract(a, b)); return;\n+            case Bytecodes::_imul: set_constant(java_multiply(a, b)); return;\n@@ -338,3 +338,3 @@\n-      case intTag   : set_constant(-t->as_IntConstant   ()->value()); return;\n-      case longTag  : set_constant(-t->as_LongConstant  ()->value()); return;\n-      case floatTag : set_constant(-t->as_FloatConstant ()->value()); return;\n+      case intTag   : set_constant(java_negate(t->as_IntConstant()->value())); return;\n+      case longTag  : set_constant(java_negate(t->as_LongConstant()->value())); return;\n+      case floatTag : set_constant(-t->as_FloatConstant()->value()); return;\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -846,2 +846,2 @@\n-      if (((arrayOopDesc::base_offset_in_bytes(t) + s_offs * element_size) % HeapWordSize == 0) &&\n-          ((arrayOopDesc::base_offset_in_bytes(t) + d_offs * element_size) % HeapWordSize == 0)) {\n+      if (((arrayOopDesc::base_offset_in_bytes(t) + (uint)s_offs * element_size) % HeapWordSize == 0) &&\n+          ((arrayOopDesc::base_offset_in_bytes(t) + (uint)d_offs * element_size) % HeapWordSize == 0)) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-          int new_lower = bound->lower() + const_value;\n+          \/\/ TODO: consider using __builtin_add_overflow\n@@ -275,1 +275,1 @@\n-          int new_upper = bound->upper() + const_value;\n+          jint new_lower = low(new_lowerl);\n@@ -277,0 +277,1 @@\n+          jint new_upper = low(new_upperl);\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    int h = 0;\n+    unsigned h = 0;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-volatile int test_access = 0;\n+volatile uint test_access = 0;\n@@ -439,1 +439,1 @@\n-        test_access += *(int*)p;\n+        test_access += *(uint*)p;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  notproduct(intx, BreakAtNode, 0,                                          \\\n+  notproduct(uint64_t, BreakAtNode, 0,                                      \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -581,1 +581,0 @@\n-debug_only( int Compile::_debug_idx = 100000; )\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -376,1 +376,0 @@\n-  debug_only(static int _debug_idx;)            \/\/ Monotonic counter (not reset), use -XX:BreakAtNode=<idx>\n@@ -783,2 +782,0 @@\n-  static int   debug_idx()                 { return debug_only(_debug_idx)+0; }\n-  static void  set_debug_idx(int i)        { debug_only(_debug_idx = i); }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -380,3 +380,0 @@\n-#ifdef ASSERT\n-    print_prop(\"debug_idx\", node->_debug_idx);\n-#endif\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-      \/\/ and lays them out contiguously at desitination bit poistions starting from\n+      \/\/ and lays them out contiguously at destination bit positions starting from\n@@ -249,1 +249,1 @@\n-      \/\/ Thus, it will always generates a +ve value i.e. sign bit set to 0 if\n+      \/\/ Thus, it will always generate a +ve value i.e. sign bit set to 0 if\n@@ -252,1 +252,1 @@\n-      hi = (1L << bitcount) - 1;\n+      hi = (1UL << bitcount) - 1;\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -864,1 +864,1 @@\n-  julong orig_iters = hi->hi_as_long() - lo->lo_as_long();\n+  julong orig_iters = (julong)hi->hi_as_long() - lo->lo_as_long();\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -327,2 +327,2 @@\n-    aligned = ((arrayOopDesc::base_offset_in_bytes(t) + s_offs * element_size) % HeapWordSize == 0) &&\n-              ((arrayOopDesc::base_offset_in_bytes(t) + d_offs * element_size) % HeapWordSize == 0);\n+    aligned = ((arrayOopDesc::base_offset_in_bytes(t) + (uint)s_offs * element_size) % HeapWordSize == 0) &&\n+              ((arrayOopDesc::base_offset_in_bytes(t) + (uint)d_offs * element_size) % HeapWordSize == 0);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    NativeType result = value1 + value2;\n+    NativeType result = java_add(value1, value2);\n@@ -64,1 +64,1 @@\n-    NativeType result = value1 - value2;\n+    NativeType result = java_subtract(value1, value2);\n","filename":"src\/hotspot\/share\/opto\/mathexactnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -778,1 +778,1 @@\n-      const jlong sign_bits_mask = ~(((jlong)CONST64(1) << (jlong)(BitsPerJavaLong - shift)) -1);\n+      const julong sign_bits_mask = ~(((julong)CONST64(1) << (julong)(BitsPerJavaLong - shift)) -1);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,16 +71,1 @@\n-  int old_debug_idx = Compile::debug_idx();\n-  int new_debug_idx = old_debug_idx + 1;\n-  if (new_debug_idx > 0) {\n-    \/\/ Arrange that the lowest five decimal digits of _debug_idx\n-    \/\/ will repeat those of _idx. In case this is somehow pathological,\n-    \/\/ we continue to assign negative numbers (!) consecutively.\n-    const int mod = 100000;\n-    int bump = (int)(_idx - new_debug_idx) % mod;\n-    if (bump < 0) {\n-      bump += mod;\n-    }\n-    assert(bump >= 0 && bump < mod, \"\");\n-    new_debug_idx += bump;\n-  }\n-  Compile::set_debug_idx(new_debug_idx);\n-  set_debug_idx(new_debug_idx);\n+  \/\/ The decimal digits of _debug_idx are <compile_id> followed by 10 digits of <_idx>\n@@ -89,0 +74,2 @@\n+  uint64_t new_debug_idx = (uint64_t)C->compile_id() * 10000000000 + _idx;\n+  set_debug_idx(new_debug_idx);\n@@ -93,2 +80,2 @@\n-  if (BreakAtNode != 0 && (_debug_idx == BreakAtNode || (int)_idx == BreakAtNode)) {\n-    tty->print_cr(\"BreakAtNode: _idx=%d _debug_idx=%d\", _idx, _debug_idx);\n+  if (BreakAtNode != 0 && (_debug_idx == BreakAtNode || (uint64_t)_idx == BreakAtNode)) {\n+    tty->print_cr(\"BreakAtNode: _idx=%d _debug_idx=\" UINT64_FORMAT, _idx, _debug_idx);\n@@ -2500,2 +2487,2 @@\n-    if (orig->debug_idx() == BreakAtNode || (int)orig->_idx == BreakAtNode) {\n-      tty->print_cr(\"BreakAtNode: _idx=%d _debug_idx=%d orig._idx=%d orig._debug_idx=%d\",\n+    if (orig->debug_idx() == BreakAtNode || (uintx)orig->_idx == BreakAtNode) {\n+      tty->print_cr(\"BreakAtNode: _idx=%d _debug_idx=\" UINT64_FORMAT \" orig._idx=%d orig._debug_idx=\" UINT64_FORMAT,\n@@ -2533,1 +2520,1 @@\n-    st->print(\"  [%d]\",debug_idx());\n+    st->print(\"  [\" UINT64_FORMAT \"]\", debug_idx());\n@@ -2549,1 +2536,1 @@\n-    st->print(\"  [%d]\",debug_idx());\n+    st->print(\"  [\" UINT64_FORMAT \"]\", debug_idx());\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1243,3 +1243,3 @@\n-  int  _debug_idx;                     \/\/ Unique value assigned to every node.\n-  int   debug_idx() const              { return _debug_idx; }\n-  void  set_debug_idx( int debug_idx ) { _debug_idx = debug_idx; }\n+  uint64_t _debug_idx;                 \/\/ Unique value assigned to every node.\n+  uint64_t debug_idx() const           { return _debug_idx; }\n+  void set_debug_idx(uint64_t debug_idx) { _debug_idx = debug_idx; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -737,1 +737,1 @@\n-    Node* cmp = _gvn.transform(new CmpUNode(val, _gvn.intcon(most_freq.hi() - most_freq.lo())));\n+    Node* cmp = _gvn.transform(new CmpUNode(val, _gvn.intcon(java_subtract(most_freq.hi(), most_freq.lo()))));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1178,1 +1178,1 @@\n-      p = 10 * p;\n+      p = java_multiply(10, p);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-      return new AddINode(in1, phase->intcon(-i->get_con()));\n+      return new AddINode(in1, phase->intcon(java_negate(i->get_con())));\n@@ -208,1 +208,1 @@\n-      Node* neg_c0 = phase->intcon(-c0);\n+      Node* neg_c0 = phase->intcon(java_negate(c0));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1690,1 +1690,1 @@\n-            (juint)(_lo - min) >= (juint)(max - _hi)) {\n+            ((juint)_lo - min) >= ((juint)max - _hi)) {\n@@ -2000,2 +2000,2 @@\n-  julong nrange = _hi - _lo;\n-  julong orange = ohi - olo;\n+  julong nrange = (julong)_hi - _lo;\n+  julong orange = (julong)ohi - olo;\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1219,0 +1219,3 @@\n+inline jint  java_negate(jint  v) { return java_subtract((jint) 0, v); }\n+inline jlong java_negate(jlong v) { return java_subtract((jlong)0, v); }\n+\n@@ -1308,1 +1311,1 @@\n-  const uint64_t z2 = x2 * y2;\n+  const uint64_t z2 = (uint64_t)x2 * y2;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}