{"files":[{"patch":"@@ -2391,1 +2391,0 @@\n-    if (AvoidUnalignedAccesses) {\n@@ -2393,1 +2392,0 @@\n-      Label LOAD_LAST, WORD_CMP, TAIL01, TAIL02;\n@@ -2403,38 +2401,20 @@\n-      \/\/ load four bytes if (cnt2 & 4) is not 0\n-      __ test_bit(t0, cnt2, 2);\n-      __ beqz(t0, TAIL02);\n-      {\n-        __ lwu(tmpL, Address(strL));\n-        __ addi(strL, strL, wordSize \/ 2);\n-        __ ld(tmpU, Address(strU));\n-        __ addi(strU, strU, wordSize);\n-        __ inflate_lo32(tmp3, tmpL);\n-        __ mv(tmpL, tmp3);\n-        __ xorr(tmp3, tmpU, tmpL);\n-        __ bnez(tmp3, CALCULATE_DIFFERENCE);\n-        __ addi(cnt2, cnt2, -wordSize \/ 2);\n-      }\n-      __ bind(TAIL02);\n-      \/\/ load two bytes if (cnt2 & 2) is not 0\n-      __ test_bit(t0, cnt2, 1);\n-      __ beqz(t0, TAIL01);\n-      {\n-        __ lhu(tmpL, Address(strL));\n-        __ addi(strL, strL, wordSize \/ 4);\n-        __ lwu(tmpU, Address(strU));\n-        __ addi(strU, strU, wordSize \/ 2);\n-        __ inflate_lo32(tmp3, tmpL);\n-        __ mv(tmpL, tmp3);\n-        __ xorr(tmp3, tmpU, tmpL);\n-        __ bnez(tmp3, CALCULATE_DIFFERENCE);\n-        __ addi(cnt2, cnt2, -wordSize \/ 4);\n-      }\n-      __ bind(TAIL01);\n-      \/\/ load one byte if anything left in cnt2\n-      __ beqz(cnt2, DONE);\n-      {\n-        __ lbu(tmpL, Address(strL)); \/\/ when only one byte left - no need to inflate\n-        __ lhu(tmpU, Address(strU));\n-        __ xorr(tmp3, tmpU, tmpL);\n-        __ bnez(tmp3, CALCULATE_DIFFERENCE);\n-      }\n+\n+      __ addi(cnt2, cnt2, -wordSize); \/\/cnt2 is now an offset in strL which points to last 8 bytes\n+      __ slli(t0, cnt2, 1);     \/\/ t0 is now an offset in strU which points to last 16 bytes\n+      __ add(strL, strL, cnt2); \/\/ Address of last 8 bytes in Latin1 string\n+      __ add(strU, strU, t0);   \/\/ Address of last 16 bytes in UTF-16 string\n+      __ load_int_misaligned(tmpL, Address(strL), t0, false);\n+      __ load_long_misaligned(tmpU, Address(strU), t0, 2);\n+      __ inflate_lo32(tmp3, tmpL);\n+      __ mv(tmpL, tmp3);\n+      __ xorr(tmp3, tmpU, tmpL);\n+      __ bnez(tmp3, CALCULATE_DIFFERENCE);\n+\n+      __ addi(strL, strL, wordSize\/2); \/\/ Address of last 4 bytes in Latin1 string\n+      __ addi(strU, strU, wordSize);   \/\/ Address of last 8 bytes in UTF-16 string\n+      __ load_int_misaligned(tmpL, Address(strL), t0, false);\n+      __ load_long_misaligned(tmpU, Address(strU), t0, 2);\n+      __ inflate_lo32(tmp3, tmpL);\n+      __ mv(tmpL, tmp3);\n+      __ xorr(tmp3, tmpU, tmpL);\n+      __ bnez(tmp3, CALCULATE_DIFFERENCE);\n@@ -2442,10 +2422,0 @@\n-    } else {\n-      \/\/ Unaligned accesses. Load from non-byte aligned address.\n-      __ slli(t0, cnt2, 1);     \/\/ now in bytes\n-      __ add(strU, strU, t0);   \/\/ Address of last 8 bytes in UTF-16 string\n-      __ add(strL, strL, cnt2); \/\/ Address of last 16 bytes in Latin1 string\n-      \/\/ last 16 characters\n-      compare_string_8_x_LU(tmpL, tmpU, strL, strU, DIFF);\n-      compare_string_8_x_LU(tmpL, tmpU, strL, strU, DIFF);\n-      __ j(DONE);\n-    }\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":20,"deletions":50,"binary":false,"changes":70,"status":"modified"}]}