{"files":[{"patch":"@@ -871,0 +871,2 @@\n+      \/\/ check if str1 and str2 is same pointer\n+      beq(str1, str2, DONE);\n@@ -873,1 +875,0 @@\n-      beq(str1, str2, DONE);\n@@ -916,0 +917,1 @@\n+    bne(tmp1, tmp2, DIFFERENCE);\n@@ -917,2 +919,0 @@\n-    xorr(tmp3, tmp1, tmp2);\n-    bnez(tmp3, DIFFERENCE);\n@@ -947,5 +947,2 @@\n-    bgez(cnt2, TAIL);\n-\n-    xorr(tmp3, tmp1, tmp2);\n-    beqz(tmp3, NEXT_WORD);\n-    j(DIFFERENCE);\n+    bne(tmp1, tmp2, DIFFERENCE);\n+    bltz(cnt2, NEXT_WORD);\n@@ -953,5 +950,0 @@\n-    xorr(tmp3, tmp1, tmp2);\n-    bnez(tmp3, DIFFERENCE);\n-    \/\/ Last longword.  In the case where length == 4 we compare the\n-    \/\/ same longword twice, but that's still faster than another\n-    \/\/ conditional branch.\n@@ -959,2 +951,2 @@\n-      ld(tmp1, Address(str1));\n-      ld(tmp2, Address(str2));\n+      load_long_misaligned(tmp1, Address(str1), tmp3, isLL ? 1 : 2);\n+      load_long_misaligned(tmp2, Address(str2), tmp3, isLL ? 1 : 2);\n@@ -962,2 +954,2 @@\n-      lwu(tmp1, Address(str1));\n-      ld(tmp2, Address(str2));\n+      load_int_misaligned(tmp1, Address(str1), tmp3, false);\n+      load_long_misaligned(tmp2, Address(str2), tmp3, 2);\n@@ -967,2 +959,2 @@\n-      lwu(tmp2, Address(str2));\n-      ld(tmp1, Address(str1));\n+      load_int_misaligned(tmp2, Address(str2), tmp3, false);\n+      load_long_misaligned(tmp1, Address(str1), tmp3, 2);\n@@ -973,2 +965,1 @@\n-    xorr(tmp3, tmp1, tmp2);\n-    beqz(tmp3, DONE);\n+    beq(tmp1, tmp2, DONE);\n@@ -979,0 +970,1 @@\n+    xorr(tmp3, tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3971,3 +3971,5 @@\n-  mv(tmp1, 0xFF);\n-  mv(Rd, zr);\n-  for (int i = 0; i <= 3; i++) {\n+  mv(tmp1, 0xFF000000); \/\/ first byte mask at lower word\n+  andr(Rd, Rs, tmp1);\n+  for (int i = 0; i < 2; i++) {\n+    slli(Rd, Rd, wordSize);\n+    srli(tmp1, tmp1, wordSize);\n@@ -3975,3 +3977,0 @@\n-    if (i) {\n-      slli(tmp2, tmp2, i * 8);\n-    }\n@@ -3979,3 +3978,0 @@\n-    if (i != 3) {\n-      slli(tmp1, tmp1, 8);\n-    }\n@@ -3983,0 +3979,3 @@\n+  slli(Rd, Rd, wordSize);\n+  andi(tmp2, Rs, 0xFF); \/\/ last byte mask at lower word\n+  orr(Rd, Rd, tmp2);\n@@ -3991,11 +3990,2 @@\n-\n-  mv(tmp1, 0xFF00000000);\n-  mv(Rd, zr);\n-  for (int i = 0; i <= 3; i++) {\n-    andr(tmp2, Rs, tmp1);\n-    orr(Rd, Rd, tmp2);\n-    srli(Rd, Rd, 8);\n-    if (i != 3) {\n-      slli(tmp1, tmp1, 8);\n-    }\n-  }\n+  srli(Rs, Rs, 32);   \/\/ only upper 32 bits are needed\n+  inflate_lo32(Rd, Rs, tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2313,5 +2313,4 @@\n-  void compare_string_8_x_LU(Register tmpL, Register tmpU, Label &DIFF1,\n-                              Label &DIFF2) {\n-    const Register strU = x12, curU = x7, strL = x29, tmp = x30;\n-    __ ld(tmpL, Address(strL));\n-    __ addi(strL, strL, 8);\n+  void compare_string_8_x_LU(Register tmpL, Register tmpU, Register strL, Register strU, Label& DIFF) {\n+    const Register tmp = x30;\n+    __ ld(t0, Address(strL));\n+    __ addi(strL, strL, wordSize);\n@@ -2319,12 +2318,10 @@\n-    __ addi(strU, strU, 8);\n-    __ inflate_lo32(tmp, tmpL);\n-    __ mv(t0, tmp);\n-    __ xorr(tmp, curU, t0);\n-    __ bnez(tmp, DIFF2);\n-\n-    __ ld(curU, Address(strU));\n-    __ addi(strU, strU, 8);\n-    __ inflate_hi32(tmp, tmpL);\n-    __ mv(t0, tmp);\n-    __ xorr(tmp, tmpU, t0);\n-    __ bnez(tmp, DIFF1);\n+    __ addi(strU, strU, wordSize);\n+    __ inflate_lo32(tmpL, t0, tmp);\n+    __ xorr(tmp, tmpU, tmpL);\n+    __ bnez(tmp, DIFF);\n+\n+    __ ld(tmpU, Address(strU));\n+    __ addi(strU, strU, wordSize);\n+    __ inflate_hi32(tmpL, t0, tmp);\n+    __ xorr(tmp, tmpU, tmpL);\n+    __ bnez(tmp, DIFF);\n@@ -2345,2 +2342,1 @@\n-    Label SMALL_LOOP, TAIL, TAIL_LOAD_16, LOAD_LAST, DIFF1, DIFF2,\n-          DONE, CALCULATE_DIFFERENCE;\n+    Label SMALL_LOOP, TAIL, LOAD_LAST, DONE, CALCULATE_DIFFERENCE;\n@@ -2357,1 +2353,1 @@\n-    __ sub(cnt2, cnt2, 8); \/\/ Already loaded 4 symbols. Last 4 is special case.\n+    __ sub(cnt2, cnt2, wordSize \/ 2); \/\/ Already loaded 4 symbols\n@@ -2360,7 +2356,0 @@\n-    if (isLU) {\n-      __ add(str1, str1, cnt2);\n-      __ shadd(str2, cnt2, str2, t0, 1);\n-    } else {\n-      __ shadd(str1, cnt2, str1, t0, 1);\n-      __ add(str2, str2, cnt2);\n-    }\n@@ -2376,3 +2365,11 @@\n-    __ sub(tmp2, strL, cnt2); \/\/ strL pointer to load from\n-    __ slli(t0, cnt2, 1);\n-    __ sub(cnt1, strU, t0); \/\/ strU pointer to load from\n+    \/\/ make sure main loop is 8 byte-aligned, we should load another 4 bytes from strL\n+    \/\/ cnt2 is >= 68 here, no need to check it for >= 0\n+    __ lwu(tmpL, Address(strL));\n+    __ addi(strL, strL, wordSize \/ 2);\n+    __ ld(tmpU, Address(strU));\n+    __ addi(strU, strU, wordSize);\n+    __ inflate_lo32(tmp3, tmpL);\n+    __ mv(tmpL, tmp3);\n+    __ xorr(tmp3, tmpU, tmpL);\n+    __ bnez(tmp3, CALCULATE_DIFFERENCE);\n+    __ addi(cnt2, cnt2, -wordSize \/ 2);\n@@ -2380,4 +2377,2 @@\n-    __ ld(tmp4, Address(cnt1));\n-    __ addi(cnt1, cnt1, 8);\n-    __ beqz(cnt2, LOAD_LAST); \/\/ no characters left except last load\n-    __ sub(cnt2, cnt2, 16);\n+    \/\/ we are now 8-bytes aligned on strL\n+    __ sub(cnt2, cnt2, wordSize * 2);\n@@ -2386,3 +2381,3 @@\n-      __ sub(cnt2, cnt2, 16);\n-      compare_string_8_x_LU(tmpL, tmpU, DIFF1, DIFF2);\n-      compare_string_8_x_LU(tmpL, tmpU, DIFF1, DIFF2);\n+      __ sub(cnt2, cnt2, wordSize * 2);\n+      compare_string_8_x_LU(tmpL, tmpU, strL, strU, CALCULATE_DIFFERENCE);\n+      compare_string_8_x_LU(tmpL, tmpU, strL, strU, CALCULATE_DIFFERENCE);\n@@ -2390,22 +2385,20 @@\n-      __ addi(t0, cnt2, 16);\n-      __ beqz(t0, LOAD_LAST);\n-    __ bind(TAIL); \/\/ 1..15 characters left until last load (last 4 characters)\n-      \/\/ Address of 8 bytes before last 4 characters in UTF-16 string\n-      __ shadd(cnt1, cnt2, cnt1, t0, 1);\n-      \/\/ Address of 16 bytes before last 4 characters in Latin1 string\n-      __ add(tmp2, tmp2, cnt2);\n-      __ ld(tmp4, Address(cnt1, -8));\n-      \/\/ last 16 characters before last load\n-      compare_string_8_x_LU(tmpL, tmpU, DIFF1, DIFF2);\n-      compare_string_8_x_LU(tmpL, tmpU, DIFF1, DIFF2);\n-      __ j(LOAD_LAST);\n-    __ bind(DIFF2);\n-      __ mv(tmpU, tmp4);\n-    __ bind(DIFF1);\n-      __ mv(tmpL, t0);\n-      __ j(CALCULATE_DIFFERENCE);\n-    __ bind(LOAD_LAST);\n-      \/\/ Last 4 UTF-16 characters are already pre-loaded into tmp4 by compare_string_8_x_LU.\n-      \/\/ No need to load it again\n-      __ mv(tmpU, tmp4);\n-      __ ld(tmpL, Address(strL));\n+      __ addi(t0, cnt2, wordSize * 2);\n+      __ beqz(t0, DONE);\n+    __ bind(TAIL);  \/\/ 1..15 characters left\n+      \/\/ Aligned access. Load bytes in portions - 4, 2, 1.\n+\n+      __ addi(t0, cnt2, wordSize);\n+      __ addi(cnt2, cnt2, wordSize*2); \/\/ amount of characters left to process\n+      __ bltz(t0, LOAD_LAST);\n+      \/\/ remaining characters are greater than or equals to 8, we can do one compare_string_8_x_LU\n+      compare_string_8_x_LU(tmpL, tmpU, strL, strU, CALCULATE_DIFFERENCE);\n+      __ addi(cnt2, cnt2, -wordSize);\n+      __ beqz(cnt2, DONE);  \/\/ no character left\n+      __ bind(LOAD_LAST);   \/\/ cnt2 = 1..7 characters left\n+\n+      __ addi(cnt2, cnt2, -wordSize); \/\/cnt2 is now an offset in strL which points to last 8 bytes\n+      __ slli(t0, cnt2, 1);     \/\/ t0 is now an offset in strU which points to last 16 bytes\n+      __ add(strL, strL, cnt2); \/\/ Address of last 8 bytes in Latin1 string\n+      __ add(strU, strU, t0);   \/\/ Address of last 16 bytes in UTF-16 string\n+      __ load_int_misaligned(tmpL, Address(strL), t0, false);\n+      __ load_long_misaligned(tmpU, Address(strU), t0, 2);\n@@ -2415,1 +2408,11 @@\n-      __ beqz(tmp3, DONE);\n+      __ bnez(tmp3, CALCULATE_DIFFERENCE);\n+\n+      __ addi(strL, strL, wordSize\/2); \/\/ Address of last 4 bytes in Latin1 string\n+      __ addi(strU, strU, wordSize);   \/\/ Address of last 8 bytes in UTF-16 string\n+      __ load_int_misaligned(tmpL, Address(strL), t0, false);\n+      __ load_long_misaligned(tmpU, Address(strU), t0, 2);\n+      __ inflate_lo32(tmp3, tmpL);\n+      __ mv(tmpL, tmp3);\n+      __ xorr(tmp3, tmpU, tmpL);\n+      __ bnez(tmp3, CALCULATE_DIFFERENCE);\n+      __ j(DONE); \/\/ no character left\n@@ -2532,0 +2535,1 @@\n+      __ beqz(cnt2, LAST_CHECK_AND_LENGTH_DIFF);\n@@ -2540,1 +2544,1 @@\n-      __ ld(tmp5, Address(str1));\n+      __ load_long_misaligned(tmp5, Address(str1), tmp3, isLL ? 1 : 2);\n@@ -2542,1 +2546,1 @@\n-      __ ld(cnt1, Address(str2));\n+      __ load_long_misaligned(cnt1, Address(str2), tmp3, isLL ? 1 : 2);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":66,"deletions":62,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires os.arch==\"aarch64\"\n+ * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n@@ -33,1 +33,1 @@\n- *          Input parameters for this test are set according to Aarch64\n+ *          Input parameters for this test are set according to Aarch64\/RISC-V\n@@ -36,1 +36,1 @@\n- *          16, 32, 64 -characters loops for length >= 72. Code is also affected\n+ *          16, 32, 64 -characters loops for length >= 72. Aarch64 Code is also affected\n@@ -38,3 +38,3 @@\n- * @run main\/othervm -XX:SoftwarePrefetchHintDistance=192 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90 192 193 208 209\n- * @run main\/othervm -XX:SoftwarePrefetchHintDistance=16 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90\n- * @run main\/othervm -XX:SoftwarePrefetchHintDistance=-1 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:SoftwarePrefetchHintDistance=192 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90 192 193 208 209\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:SoftwarePrefetchHintDistance=16 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:SoftwarePrefetchHintDistance=-1 compiler.intrinsics.string.TestStringCompareToDifferentLength 4 2 5 10 13 17 20 23 24 25 71 72 73 88 90\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringCompareToDifferentLength.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}