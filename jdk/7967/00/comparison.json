{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1308,1 +1308,1 @@\n-            TaskEvent e = newAnalyzeTaskEvent(env);\n+            TaskEvent e = new TaskEvent(TaskEvent.Kind.ANALYZE, env.toplevel, env.enclClass.sym);\n@@ -1393,1 +1393,1 @@\n-                TaskEvent e = newAnalyzeTaskEvent(env);\n+                TaskEvent e = new TaskEvent(TaskEvent.Kind.ANALYZE, env.toplevel, env.enclClass.sym);\n@@ -1399,18 +1399,0 @@\n-    private TaskEvent newAnalyzeTaskEvent(Env<AttrContext> env) {\n-        JCCompilationUnit toplevel = env.toplevel;\n-        ClassSymbol sym;\n-        if (env.enclClass.sym == syms.predefClass) {\n-            if (TreeInfo.isModuleInfo(toplevel)) {\n-                sym = toplevel.modle.module_info;\n-            } else if (TreeInfo.isPackageInfo(toplevel)) {\n-                sym = toplevel.packge.package_info;\n-            } else {\n-                throw new IllegalStateException(\"unknown env.toplevel\");\n-            }\n-        } else {\n-            sym = env.enclClass.sym;\n-        }\n-\n-        return new TaskEvent(TaskEvent.Kind.ANALYZE, toplevel, sym);\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -448,2 +448,4 @@\n-        Symbol sym = cast(Symbol.class, e);\n-        return (sym.kind == MDL || sym.owner.kind == MDL) ? null : sym.packge();\n+        if (e.getKind() == ElementKind.MODULE)\n+            return null;\n+        else\n+            return cast(Symbol.class, e).packge();\n@@ -457,3 +459,1 @@\n-        return (sym.kind == MDL) ? ((ModuleElement) e)\n-                : (sym.owner.kind == MDL) ? (ModuleElement) sym.owner\n-                : sym.packge().modle;\n+        return (sym.kind == MDL) ? ((ModuleElement) e) : sym.packge().modle;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,168 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8283661\n- * @summary Unexpected TypeElement in ANALYZE TaskEvent\n- * @modules jdk.compiler\n- * @run main TestTypeElement\n- *\/\n-\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.List;\n-\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.util.Elements;\n-import javax.tools.JavaCompiler;\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n-import javax.tools.ToolProvider;\n-\n-import com.sun.source.util.JavacTask;\n-import com.sun.source.util.TaskEvent;\n-import com.sun.source.util.TaskListener;\n-\n-public class TestTypeElement {\n-    public static void main(String... args) throws Exception {\n-        new TestTypeElement().run();\n-    }\n-\n-    private PrintStream log;\n-    private Elements elements;\n-    private int errors;\n-\n-    void run() throws Exception {\n-        log = System.err;\n-\n-        List<JavaFileObject> files = List.of(\n-                createFileObject(\"module-info.java\", \"module m { }\"),\n-                createFileObject(\"p\/package-info.java\", \"\/** Comment. *\/ package p;\"),\n-                createFileObject(\"p\/C.java\", \"package p; public class C { }\")\n-        );\n-\n-        JavaCompiler c = ToolProvider.getSystemJavaCompiler();\n-        JavacTask t = (JavacTask) c.getTask(null, null, null,  List.of(\"-d\", \"classes\"), null, files);\n-        t.addTaskListener(new TaskListener() {\n-            @Override\n-            public void started(TaskEvent e) {\n-                log.println(\"started: \" + e);\n-                checkTypeElement(e);\n-            }\n-            @Override\n-            public void finished(TaskEvent e) {\n-                log.println(\"finished: \" + e);\n-                checkTypeElement(e);\n-            }\n-        });\n-        elements = t.getElements();\n-        t.call();\n-\n-        if (errors > 0) {\n-            log.println(errors + \" errors occurred\");\n-            throw new Exception(errors + \" errors occurred\");\n-        }\n-    }\n-\n-    private void checkTypeElement(TaskEvent e) {\n-        TypeElement te = e.getTypeElement();\n-\n-        if (te != null) {\n-            showTypeElement(e.getTypeElement());\n-        }\n-\n-        switch (e.getKind()) {\n-            case COMPILATION, PARSE, ENTER -> {\n-                checkEqual(te, null);\n-            }\n-\n-            case ANALYZE, GENERATE -> {\n-                if (te == null) {\n-                    error(\"type element is null\");\n-                    return;\n-                }\n-\n-\n-                switch (te.getQualifiedName().toString()) {\n-                    case \"m.module-info\" -> {\n-                        checkEqual(elements.getModuleOf(te), elements.getModuleElement(\"m\"));\n-                        checkEqual(elements.getPackageOf(te), null);\n-                    }\n-                    case \"p.package-info\", \"p.C\" -> {\n-                        checkEqual(elements.getModuleOf(te), elements.getModuleElement(\"m\"));\n-                        checkEqual(elements.getPackageOf(te), elements.getPackageElement(\"p\"));\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private void showTypeElement(TypeElement e) {\n-        log.println(\"type element: \" + e);\n-\n-        try {\n-            log.println(\"    module element: \" + elements.getModuleOf(e));\n-        } catch (Throwable t) {\n-            log.println(\"    module element: \" + t);\n-        }\n-\n-        try {\n-            log.println(\"    package element: \" + elements.getPackageOf(e));\n-        } catch (Throwable t) {\n-            log.println(\"    package element: \" + t);\n-        }\n-    }\n-\n-    private <T> void checkEqual(T found, T expected) {\n-        if (found != expected) {\n-            error(\"mismatch\");\n-            log.println(\"   found: \" + found);\n-            log.println(\"expected: \" + expected);\n-        }\n-    }\n-\n-    private void error(String message) {\n-        log.println(\"Error: \" + message);\n-        errors++;\n-    }\n-\n-    private JavaFileObject createFileObject(String name, String body) {\n-        return createFileObject(name, JavaFileObject.Kind.SOURCE, body);\n-    }\n-\n-    private JavaFileObject createFileObject(String name, JavaFileObject.Kind kind, String body) {\n-        try {\n-            return new SimpleJavaFileObject(new URI(\"myfo:\/\/\/\" + name), kind) {\n-                @Override\n-                public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n-                    return body;\n-                }\n-            };\n-        } catch (URISyntaxException e) {\n-            throw new IllegalArgumentException(name, e);\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/api\/taskListeners\/TestTypeElement.java","additions":0,"deletions":168,"binary":false,"changes":168,"status":"deleted"}]}