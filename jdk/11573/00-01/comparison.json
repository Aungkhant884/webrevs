{"files":[{"patch":"@@ -161,1 +161,1 @@\n-#define SCOPE PKG_FOREIGN \"MemoryScopeImpl;\"\n+#define SCOPE PKG_FOREIGN \"MemorySessionImpl;\"\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -157,1 +157,1 @@\n-        return MemoryScopeImpl.createConfined(Thread.currentThread()).asArena();\n+        return MemorySessionImpl.createConfined(Thread.currentThread()).asArena();\n@@ -164,1 +164,1 @@\n-        return MemoryScopeImpl.createShared().asArena();\n+        return MemorySessionImpl.createShared().asArena();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -412,1 +412,1 @@\n-        return (MemoryScopeImpl)scope;\n+        return (MemorySessionImpl)scope;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -89,1 +89,1 @@\n-sealed public interface SegmentScope permits MemoryScopeImpl {\n+sealed public interface SegmentScope permits MemorySessionImpl {\n@@ -99,1 +99,1 @@\n-        return MemoryScopeImpl.createImplicit(CleanerFactory.cleaner());\n+        return MemorySessionImpl.createImplicit(CleanerFactory.cleaner());\n@@ -109,1 +109,1 @@\n-        return MemoryScopeImpl.GLOBAL;\n+        return MemorySessionImpl.GLOBAL;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentScope.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -163,1 +163,1 @@\n-                MemoryScopeImpl.heapScope(loader);\n+                MemorySessionImpl.heapScope(loader);\n@@ -238,1 +238,1 @@\n-        ((MemoryScopeImpl) libScope).addOrCleanupIfFail(new MemoryScopeImpl.ResourceList.ResourceCleanup() {\n+        ((MemorySessionImpl) libScope).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -616,1 +616,1 @@\n-        static MemoryScopeImpl scope(ByteBuffer bb) {\n+        static MemorySessionImpl scope(ByteBuffer bb) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -764,1 +764,1 @@\n-    final MemoryScopeImpl scope() {\n+    final MemorySessionImpl scope() {\n@@ -773,1 +773,1 @@\n-        MemoryScopeImpl scope = scope();\n+        MemorySessionImpl scope = scope();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -317,1 +317,1 @@\n-        MemoryScopeImpl scope = scope();\n+        MemorySessionImpl scope = scope();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n- * than the owner thread. See {@link MemoryScopeImpl} for more details on management of temporal bounds. Subclasses\n+ * than the owner thread. See {@link MemorySessionImpl} for more details on management of temporal bounds. Subclasses\n@@ -157,1 +157,1 @@\n-    public static long vectorizedMismatchLargeForBytes(MemoryScopeImpl aScope, MemoryScopeImpl bScope,\n+    public static long vectorizedMismatchLargeForBytes(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -366,2 +366,2 @@\n-    public final MemoryScopeImpl scopeImpl() {\n-        return (MemoryScopeImpl) scope;\n+    public final MemorySessionImpl scopeImpl() {\n+        return (MemorySessionImpl) scope;\n@@ -488,1 +488,1 @@\n-            bufferScope = MemoryScopeImpl.heapScope(bb);\n+            bufferScope = MemorySessionImpl.heapScope(bb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-final class ConfinedScope extends MemoryScopeImpl {\n+final class ConfinedScope extends MemorySessionImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-final class GlobalScope extends MemoryScopeImpl {\n+final class GlobalScope extends MemorySessionImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                scope == MemoryScopeImpl.GLOBAL ? null : this);\n+                scope == MemorySessionImpl.GLOBAL ? null : this);\n@@ -98,1 +98,1 @@\n-        public EmptyMappedMemorySegmentImpl(boolean readOnly, MemoryScopeImpl scope) {\n+        public EmptyMappedMemorySegmentImpl(boolean readOnly, MemorySessionImpl scope) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * (this operation is triggered by {@link MemoryScopeImpl#close()}). This bit is consulted prior\n+ * (this operation is triggered by {@link MemorySessionImpl#close()}). This bit is consulted prior\n@@ -53,1 +53,1 @@\n-public abstract sealed class MemoryScopeImpl\n+public abstract sealed class MemorySessionImpl\n@@ -63,1 +63,1 @@\n-    public static final MemoryScopeImpl GLOBAL = new GlobalScope(null);\n+    public static final MemorySessionImpl GLOBAL = new GlobalScope(null);\n@@ -65,2 +65,2 @@\n-    static final ScopedMemoryAccess.ScopedAccessError ALREADY_CLOSED = new ScopedMemoryAccess.ScopedAccessError(MemoryScopeImpl::alreadyClosed);\n-    static final ScopedMemoryAccess.ScopedAccessError WRONG_THREAD = new ScopedMemoryAccess.ScopedAccessError(MemoryScopeImpl::wrongThread);\n+    static final ScopedMemoryAccess.ScopedAccessError ALREADY_CLOSED = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::alreadyClosed);\n+    static final ScopedMemoryAccess.ScopedAccessError WRONG_THREAD = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::wrongThread);\n@@ -74,1 +74,1 @@\n-            STATE = MethodHandles.lookup().findVarHandle(MemoryScopeImpl.class, \"state\", int.class);\n+            STATE = MethodHandles.lookup().findVarHandle(MemorySessionImpl.class, \"state\", int.class);\n@@ -84,1 +84,1 @@\n-                return MemoryScopeImpl.this;\n+                return MemorySessionImpl.this;\n@@ -89,1 +89,1 @@\n-                MemoryScopeImpl.this.close();\n+                MemorySessionImpl.this.close();\n@@ -136,1 +136,1 @@\n-    protected MemoryScopeImpl(Thread owner, ResourceList resourceList) {\n+    protected MemorySessionImpl(Thread owner, ResourceList resourceList) {\n@@ -141,1 +141,1 @@\n-    public static MemoryScopeImpl createConfined(Thread thread) {\n+    public static MemorySessionImpl createConfined(Thread thread) {\n@@ -145,1 +145,1 @@\n-    public static MemoryScopeImpl createShared() {\n+    public static MemorySessionImpl createShared() {\n@@ -149,1 +149,1 @@\n-    public static MemoryScopeImpl createImplicit(Cleaner cleaner) {\n+    public static MemorySessionImpl createImplicit(Cleaner cleaner) {\n@@ -179,2 +179,2 @@\n-        return ((MemoryScopeImpl) scope1).ownerThread() ==\n-                ((MemoryScopeImpl) scope2).ownerThread();\n+        return ((MemorySessionImpl) scope1).ownerThread() ==\n+                ((MemorySessionImpl) scope2).ownerThread();\n@@ -249,1 +249,1 @@\n-    public static MemoryScopeImpl heapScope(Object ref) {\n+    public static MemorySessionImpl heapScope(Object ref) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":15,"deletions":15,"binary":false,"changes":30,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryScopeImpl.java","status":"renamed"},{"patch":"@@ -79,1 +79,1 @@\n-                scope == MemoryScopeImpl.GLOBAL ? null : this);\n+                scope == MemorySessionImpl.GLOBAL ? null : this);\n@@ -105,1 +105,1 @@\n-        MemoryScopeImpl scopeImpl = (MemoryScopeImpl) scope;\n+        MemorySessionImpl scopeImpl = (MemorySessionImpl) scope;\n@@ -123,1 +123,1 @@\n-        scopeImpl.addOrCleanupIfFail(new MemoryScopeImpl.ResourceList.ResourceCleanup() {\n+        scopeImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -142,1 +142,1 @@\n-        MemoryScopeImpl scopeImpl = (MemoryScopeImpl) scope;\n+        MemorySessionImpl scopeImpl = (MemorySessionImpl) scope;\n@@ -153,1 +153,1 @@\n-        MemoryScopeImpl scopeImpl = (MemoryScopeImpl) scope;\n+        MemorySessionImpl scopeImpl = (MemorySessionImpl) scope;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-sealed class SharedScope extends MemoryScopeImpl permits ImplicitScope {\n+sealed class SharedScope extends MemorySessionImpl permits ImplicitScope {\n@@ -127,1 +127,1 @@\n-            \/\/ (because MemoryScopeImpl::justClose ensured that this thread won the race to close the scope).\n+            \/\/ (because MemorySessionImpl::justClose ensured that this thread won the race to close the scope).\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -86,1 +86,1 @@\n-    private static final String SCOPE_IMPL_DESC = methodType(MemoryScopeImpl.class).descriptorString();\n+    private static final String SCOPE_IMPL_DESC = methodType(MemorySessionImpl.class).descriptorString();\n@@ -519,1 +519,1 @@\n-        emitInvokeVirtual(MemoryScopeImpl.class, \"acquire0\", ACQUIRE0_DESC); \/\/ call acquire on the other\n+        emitInvokeVirtual(MemorySessionImpl.class, \"acquire0\", ACQUIRE0_DESC); \/\/ call acquire on the other\n@@ -539,1 +539,1 @@\n-            emitInvokeVirtual(MemoryScopeImpl.class, \"release0\", RELEASE0_DESC);\n+            emitInvokeVirtual(MemorySessionImpl.class, \"release0\", RELEASE0_DESC);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -54,1 +54,1 @@\n-        ((MemoryScopeImpl) scope).addOrCleanupIfFail(new MemoryScopeImpl.ResourceList.ResourceCleanup() {\n+        ((MemorySessionImpl) scope).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -364,1 +364,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -563,2 +563,2 @@\n-            assert MemoryScopeImpl.sameOwnerThread(gpRegs.scope(), vaListSegment.scope());\n-            assert MemoryScopeImpl.sameOwnerThread(fpRegs.scope(), vaListSegment.scope());\n+            assert MemorySessionImpl.sameOwnerThread(gpRegs.scope(), vaListSegment.scope());\n+            assert MemorySessionImpl.sameOwnerThread(fpRegs.scope(), vaListSegment.scope());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -144,1 +144,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -171,1 +171,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -187,1 +187,1 @@\n-            ((MemoryScopeImpl) scope).checkValidState();\n+            ((MemorySessionImpl) scope).checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -309,1 +309,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -475,1 +475,1 @@\n-            assert MemoryScopeImpl.sameOwnerThread(reg_save_area.scope(), vaListSegment.scope());\n+            assert MemorySessionImpl.sameOwnerThread(reg_save_area.scope(), vaListSegment.scope());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -144,1 +144,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -162,1 +162,1 @@\n-        ((MemoryScopeImpl) segment.scope()).checkValidState();\n+        ((MemorySessionImpl) segment.scope()).checkValidState();\n@@ -178,1 +178,1 @@\n-            ((MemoryScopeImpl) scope).checkValidState();\n+            ((MemorySessionImpl) scope).checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    public $type$ get$Type$(MemoryScopeImpl scope, Object base, long offset) {\n+    public $type$ get$Type$(MemorySessionImpl scope, Object base, long offset) {\n@@ -11,1 +11,1 @@\n-    private $type$ get$Type$Internal(MemoryScopeImpl scope, Object base, long offset) {\n+    private $type$ get$Type$Internal(MemorySessionImpl scope, Object base, long offset) {\n@@ -23,1 +23,1 @@\n-    public void put$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public void put$Type$(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -32,1 +32,1 @@\n-    private void put$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private void put$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -45,1 +45,1 @@\n-    public $type$ get$Type$Unaligned(MemoryScopeImpl scope, Object base, long offset, boolean be) {\n+    public $type$ get$Type$Unaligned(MemorySessionImpl scope, Object base, long offset, boolean be) {\n@@ -54,1 +54,1 @@\n-    private $type$ get$Type$UnalignedInternal(MemoryScopeImpl scope, Object base, long offset, boolean be) {\n+    private $type$ get$Type$UnalignedInternal(MemorySessionImpl scope, Object base, long offset, boolean be) {\n@@ -66,1 +66,1 @@\n-    public void put$Type$Unaligned(MemoryScopeImpl scope, Object base, long offset, $type$ value, boolean be) {\n+    public void put$Type$Unaligned(MemorySessionImpl scope, Object base, long offset, $type$ value, boolean be) {\n@@ -75,1 +75,1 @@\n-    private void put$Type$UnalignedInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value, boolean be) {\n+    private void put$Type$UnalignedInternal(MemorySessionImpl scope, Object base, long offset, $type$ value, boolean be) {\n@@ -88,1 +88,1 @@\n-    public $type$ get$Type$Volatile(MemoryScopeImpl scope, Object base, long offset) {\n+    public $type$ get$Type$Volatile(MemorySessionImpl scope, Object base, long offset) {\n@@ -97,1 +97,1 @@\n-    private $type$ get$Type$VolatileInternal(MemoryScopeImpl scope, Object base, long offset) {\n+    private $type$ get$Type$VolatileInternal(MemorySessionImpl scope, Object base, long offset) {\n@@ -109,1 +109,1 @@\n-    public void put$Type$Volatile(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public void put$Type$Volatile(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -118,1 +118,1 @@\n-    private void put$Type$VolatileInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private void put$Type$VolatileInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -130,1 +130,1 @@\n-    public $type$ get$Type$Acquire(MemoryScopeImpl scope, Object base, long offset) {\n+    public $type$ get$Type$Acquire(MemorySessionImpl scope, Object base, long offset) {\n@@ -139,1 +139,1 @@\n-    private $type$ get$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset) {\n+    private $type$ get$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset) {\n@@ -151,1 +151,1 @@\n-    public void put$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public void put$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -160,1 +160,1 @@\n-    private void put$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private void put$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -172,1 +172,1 @@\n-    public $type$ get$Type$Opaque(MemoryScopeImpl scope, Object base, long offset) {\n+    public $type$ get$Type$Opaque(MemorySessionImpl scope, Object base, long offset) {\n@@ -181,1 +181,1 @@\n-    private $type$ get$Type$OpaqueInternal(MemoryScopeImpl scope, Object base, long offset) {\n+    private $type$ get$Type$OpaqueInternal(MemorySessionImpl scope, Object base, long offset) {\n@@ -192,1 +192,1 @@\n-    public void put$Type$Opaque(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public void put$Type$Opaque(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -201,1 +201,1 @@\n-    private void put$Type$OpaqueInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private void put$Type$OpaqueInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -213,1 +213,1 @@\n-    public boolean compareAndSet$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean compareAndSet$Type$(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -222,1 +222,1 @@\n-    private boolean compareAndSet$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean compareAndSet$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -234,1 +234,1 @@\n-    public $type$ compareAndExchange$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -243,1 +243,1 @@\n-    private $type$ compareAndExchange$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -255,1 +255,1 @@\n-    public $type$ compareAndExchange$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -264,1 +264,1 @@\n-    private $type$ compareAndExchange$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -276,1 +276,1 @@\n-    public $type$ compareAndExchange$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -285,1 +285,1 @@\n-    private $type$ compareAndExchange$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -297,1 +297,1 @@\n-    public boolean weakCompareAndSet$Type$Plain(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Plain(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -306,1 +306,1 @@\n-    private boolean weakCompareAndSet$Type$PlainInternal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$PlainInternal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -318,1 +318,1 @@\n-    public boolean weakCompareAndSet$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -327,1 +327,1 @@\n-    private boolean weakCompareAndSet$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -339,1 +339,1 @@\n-    public boolean weakCompareAndSet$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -348,1 +348,1 @@\n-    private boolean weakCompareAndSet$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -360,1 +360,1 @@\n-    public boolean weakCompareAndSet$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -369,1 +369,1 @@\n-    private boolean weakCompareAndSet$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ expected, $type$ value) {\n@@ -381,1 +381,1 @@\n-    public $type$ getAndSet$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -390,1 +390,1 @@\n-    private $type$ getAndSet$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -402,1 +402,1 @@\n-    public $type$ getAndSet$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -411,1 +411,1 @@\n-    private $type$ getAndSet$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -423,1 +423,1 @@\n-    public $type$ getAndSet$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -432,1 +432,1 @@\n-    private $type$ getAndSet$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -446,1 +446,1 @@\n-    public $type$ getAndAdd$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -455,1 +455,1 @@\n-    private $type$ getAndAdd$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -467,1 +467,1 @@\n-    public $type$ getAndAdd$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -476,1 +476,1 @@\n-    private $type$ getAndAdd$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -488,1 +488,1 @@\n-    public $type$ getAndAdd$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -497,1 +497,1 @@\n-    private $type$ getAndAdd$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ delta) {\n@@ -511,1 +511,1 @@\n-    public $type$ getAndBitwiseOr$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -520,1 +520,1 @@\n-    private $type$ getAndBitwiseOr$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -532,1 +532,1 @@\n-    public $type$ getAndBitwiseOr$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -541,1 +541,1 @@\n-    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -553,1 +553,1 @@\n-    public $type$ getAndBitwiseOr$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -562,1 +562,1 @@\n-    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -574,1 +574,1 @@\n-    public $type$ getAndBitwiseAnd$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -583,1 +583,1 @@\n-    private $type$ getAndBitwiseAnd$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -595,1 +595,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -604,1 +604,1 @@\n-    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -616,1 +616,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -625,1 +625,1 @@\n-    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -637,1 +637,1 @@\n-    public $type$ getAndBitwiseXor$Type$(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -646,1 +646,1 @@\n-    private $type$ getAndBitwiseXor$Type$Internal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$Internal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -658,1 +658,1 @@\n-    public $type$ getAndBitwiseXor$Type$Acquire(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Acquire(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -667,1 +667,1 @@\n-    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -679,1 +679,1 @@\n-    public $type$ getAndBitwiseXor$Type$Release(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Release(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n@@ -688,1 +688,1 @@\n-    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemoryScopeImpl scope, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemorySessionImpl scope, Object base, long offset, $type$ value) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -49,1 +49,1 @@\n- * class accept one or more {@link MemoryScopeImpl} parameter, which is used to validate as to whether access to memory\n+ * class accept one or more {@link MemorySessionImpl} parameter, which is used to validate as to whether access to memory\n@@ -60,1 +60,1 @@\n- * {@link ScopedMemoryAccess#closeScope(MemoryScopeImpl)} method. This method initiates thread-local handshakes with all the other VM threads,\n+ * {@link ScopedMemoryAccess#closeScope(MemorySessionImpl)} method. This method initiates thread-local handshakes with all the other VM threads,\n@@ -86,1 +86,1 @@\n-    public boolean closeScope(MemoryScopeImpl scope) {\n+    public boolean closeScope(MemorySessionImpl scope) {\n@@ -90,1 +90,1 @@\n-    native boolean closeScope0(MemoryScopeImpl scope);\n+    native boolean closeScope0(MemorySessionImpl scope);\n@@ -124,1 +124,1 @@\n-    public void copyMemory(MemoryScopeImpl srcScope, MemoryScopeImpl dstScope,\n+    public void copyMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -136,1 +136,1 @@\n-    private void copyMemoryInternal(MemoryScopeImpl srcScope, MemoryScopeImpl dstScope,\n+    private void copyMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -155,1 +155,1 @@\n-    public void copySwapMemory(MemoryScopeImpl srcScope, MemoryScopeImpl dstScope,\n+    public void copySwapMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -167,1 +167,1 @@\n-    private void copySwapMemoryInternal(MemoryScopeImpl srcScope, MemoryScopeImpl dstScope,\n+    private void copySwapMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -186,1 +186,1 @@\n-    public void setMemory(MemoryScopeImpl scope, Object o, long offset, long bytes, byte value) {\n+    public void setMemory(MemorySessionImpl scope, Object o, long offset, long bytes, byte value) {\n@@ -195,1 +195,1 @@\n-    private void setMemoryInternal(MemoryScopeImpl scope, Object o, long offset, long bytes, byte value) {\n+    private void setMemoryInternal(MemorySessionImpl scope, Object o, long offset, long bytes, byte value) {\n@@ -207,1 +207,1 @@\n-    public int vectorizedMismatch(MemoryScopeImpl aScope, MemoryScopeImpl bScope,\n+    public int vectorizedMismatch(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -220,1 +220,1 @@\n-    private int vectorizedMismatchInternal(MemoryScopeImpl aScope, MemoryScopeImpl bScope,\n+    private int vectorizedMismatchInternal(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -240,1 +240,1 @@\n-    public boolean isLoaded(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public boolean isLoaded(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -249,1 +249,1 @@\n-    public boolean isLoadedInternal(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public boolean isLoadedInternal(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -261,1 +261,1 @@\n-    public void load(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public void load(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -270,1 +270,1 @@\n-    public void loadInternal(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public void loadInternal(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -282,1 +282,1 @@\n-    public void unload(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public void unload(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -291,1 +291,1 @@\n-    public void unloadInternal(MemoryScopeImpl scope, long address, boolean isSync, long size) {\n+    public void unloadInternal(MemorySessionImpl scope, long address, boolean isSync, long size) {\n@@ -303,1 +303,1 @@\n-    public void force(MemoryScopeImpl scope, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void force(MemorySessionImpl scope, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -312,1 +312,1 @@\n-    public void forceInternal(MemoryScopeImpl scope, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void forceInternal(MemorySessionImpl scope, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -353,1 +353,1 @@\n-    V loadFromMemorySegmentScopedInternal(MemoryScopeImpl scope,\n+    V loadFromMemorySegmentScopedInternal(MemorySessionImpl scope,\n@@ -399,1 +399,1 @@\n-    V loadFromMemorySegmentMaskedScopedInternal(MemoryScopeImpl scope, Class<? extends V> vmClass,\n+    V loadFromMemorySegmentMaskedScopedInternal(MemorySessionImpl scope, Class<? extends V> vmClass,\n@@ -444,1 +444,1 @@\n-    void storeIntoMemorySegmentScopedInternal(MemoryScopeImpl scope,\n+    void storeIntoMemorySegmentScopedInternal(MemorySessionImpl scope,\n@@ -490,1 +490,1 @@\n-    void storeIntoMemorySegmentMaskedScopedInternal(MemoryScopeImpl scope,\n+    void storeIntoMemorySegmentMaskedScopedInternal(MemorySessionImpl scope,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -1216,1 +1216,1 @@\n-        MemoryScopeImpl scopeImpl = (MemoryScopeImpl) scope;\n+        MemorySessionImpl scopeImpl = (MemorySessionImpl) scope;\n@@ -1234,2 +1234,2 @@\n-            MemoryScopeImpl.ResourceList.ResourceCleanup resource =\n-                new MemoryScopeImpl.ResourceList.ResourceCleanup() {\n+            MemorySessionImpl.ResourceList.ResourceCleanup resource =\n+                new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.foreign.MemoryScopeImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -330,1 +330,1 @@\n-        MemoryScopeImpl parentImpl = (MemoryScopeImpl) parent;\n+        MemorySessionImpl parentImpl = (MemorySessionImpl) parent;\n@@ -336,1 +336,1 @@\n-        MemoryScopeImpl scopeImpl = (MemoryScopeImpl) scope;\n+        MemorySessionImpl scopeImpl = (MemorySessionImpl) scope;\n@@ -343,1 +343,1 @@\n-            ((MemoryScopeImpl)scope).close();\n+            ((MemorySessionImpl)scope).close();\n@@ -347,1 +347,1 @@\n-            return !((MemoryScopeImpl)scope).isCloseable();\n+            return !((MemorySessionImpl)scope).isCloseable();\n","filename":"test\/jdk\/java\/foreign\/TestMemoryScope.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}