{"files":[{"patch":"@@ -35,8 +35,0 @@\n-#include <sys\/socket.h>\n-#include <poll.h>\n-#include <sys\/ioctl.h>\n-#include <netdb.h>\n-\n-inline bool os::uses_stack_guard_pages() {\n-  return true;\n-}\n@@ -52,16 +44,0 @@\n-\/\/ Bang the shadow pages if they need to be touched to be mapped.\n-inline void os::map_stack_shadow_pages(address sp) {\n-}\n-\n-inline void os::dll_unload(void *lib) {\n-  ::dlclose(lib);\n-}\n-\n-inline jlong os::lseek(int fd, jlong offset, int whence) {\n-  return (jlong) ::lseek64(fd, offset, whence);\n-}\n-\n-inline int os::fsync(int fd) {\n-  return ::fsync(fd);\n-}\n-\n@@ -76,38 +52,0 @@\n-inline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n-  size_t res;\n-  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n-  return res;\n-}\n-\n-inline int os::socket_close(int fd) {\n-  return ::close(fd);\n-}\n-\n-inline int os::socket(int domain, int type, int protocol) {\n-  return ::socket(domain, type, protocol);\n-}\n-\n-inline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::raw_send(int fd, char *buf, size_t nBytes, uint flags) {\n-  return os::send(fd, buf, nBytes, flags);\n-}\n-\n-inline int os::connect(int fd, struct sockaddr *him, socklen_t len) {\n-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n-}\n-\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n-inline void os::exit(int num) {\n-  ::exit(num);\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.inline.hpp","additions":0,"deletions":62,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -34,7 +34,0 @@\n-#include <sys\/socket.h>\n-#include <poll.h>\n-#include <netdb.h>\n-\n-inline bool os::uses_stack_guard_pages() {\n-  return true;\n-}\n@@ -55,16 +48,0 @@\n-\/\/ Bang the shadow pages if they need to be touched to be mapped.\n-inline void os::map_stack_shadow_pages(address sp) {\n-}\n-\n-inline void os::dll_unload(void *lib) {\n-  ::dlclose(lib);\n-}\n-\n-inline jlong os::lseek(int fd, jlong offset, int whence) {\n-  return (jlong) ::lseek(fd, offset, whence);\n-}\n-\n-inline int os::fsync(int fd) {\n-  return ::fsync(fd);\n-}\n-\n@@ -78,38 +55,0 @@\n-inline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n-  size_t res;\n-  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n-  return res;\n-}\n-\n-inline int os::socket_close(int fd) {\n-  return ::close(fd);\n-}\n-\n-inline int os::socket(int domain, int type, int protocol) {\n-  return ::socket(domain, type, protocol);\n-}\n-\n-inline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n-  return os::send(fd, buf, nBytes, flags);\n-}\n-\n-inline int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n-}\n-\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n-inline void os::exit(int num) {\n-  ::exit(num);\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.inline.hpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -34,7 +34,0 @@\n-#include <sys\/socket.h>\n-#include <poll.h>\n-#include <netdb.h>\n-\n-inline bool os::uses_stack_guard_pages() {\n-  return true;\n-}\n@@ -47,16 +40,0 @@\n-\/\/ Bang the shadow pages if they need to be touched to be mapped.\n-inline void os::map_stack_shadow_pages(address sp) {\n-}\n-\n-inline void os::dll_unload(void *lib) {\n-  ::dlclose(lib);\n-}\n-\n-inline jlong os::lseek(int fd, jlong offset, int whence) {\n-  return (jlong) ::lseek64(fd, offset, whence);\n-}\n-\n-inline int os::fsync(int fd) {\n-  return ::fsync(fd);\n-}\n-\n@@ -70,38 +47,0 @@\n-inline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n-  size_t res;\n-  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n-  return res;\n-}\n-\n-inline int os::socket_close(int fd) {\n-  return ::close(fd);\n-}\n-\n-inline int os::socket(int domain, int type, int protocol) {\n-  return ::socket(domain, type, protocol);\n-}\n-\n-inline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n-}\n-\n-inline int os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n-  return os::send(fd, buf, nBytes, flags);\n-}\n-\n-inline int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n-}\n-\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n-inline void os::exit(int num) {\n-  ::exit(num);\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.inline.hpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include <sys\/socket.h>\n+#include <netdb.h>\n@@ -45,0 +47,26 @@\n+inline bool os::uses_stack_guard_pages() {\n+  return true;\n+}\n+\n+\/\/ Bang the shadow pages if they need to be touched to be mapped.\n+inline void os::map_stack_shadow_pages(address sp) {\n+}\n+\n+inline void os::dll_unload(void *lib) {\n+  ::dlclose(lib);\n+}\n+\n+inline jlong os::lseek(int fd, jlong offset, int whence) {\n+  return (jlong) ::lseek(fd, offset, whence);\n+}\n+\n+inline int os::fsync(int fd) {\n+  return ::fsync(fd);\n+}\n+\n+inline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n+  size_t res;\n+  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n+  return res;\n+}\n+\n@@ -49,0 +77,32 @@\n+inline int os::socket_close(int fd) {\n+  return ::close(fd);\n+}\n+\n+inline int os::socket(int domain, int type, int protocol) {\n+  return ::socket(domain, type, protocol);\n+}\n+\n+inline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n+  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n+}\n+\n+inline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n+  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n+}\n+\n+inline int os::raw_send(int fd, char* buf, size_t nBytes, uint flags) {\n+  return os::send(fd, buf, nBytes, flags);\n+}\n+\n+inline int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n+  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n+}\n+\n+inline struct hostent* os::get_host_by_name(char* name) {\n+  return ::gethostbyname(name);\n+}\n+\n+inline void os::exit(int num) {\n+  ::exit(num);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.inline.hpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}