{"files":[{"patch":"@@ -3235,1 +3235,3 @@\n-instruct sqrtF_reg(regF dst, regF src) %{\n+\/\/ sqrtss instruction needs destination register to be pre initialized for best performance\n+\/\/ Therefore only the instruct rule where the input is pre-loaded into dst register is defined below\n+instruct sqrtF_reg(regF dst) %{\n@@ -3237,28 +3239,2 @@\n-  match(Set dst (SqrtF src));\n-\n-  format %{ \"sqrtss  $dst, $src\" %}\n-  ins_cost(150);\n-  ins_encode %{\n-    __ sqrtss($dst$$XMMRegister, $src$$XMMRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct sqrtF_mem(regF dst, memory src) %{\n-  predicate(UseSSE>=1);\n-  match(Set dst (SqrtF (LoadF src)));\n-\n-  format %{ \"sqrtss  $dst, $src\" %}\n-  ins_cost(150);\n-  ins_encode %{\n-    __ sqrtss($dst$$XMMRegister, $src$$Address);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct sqrtF_imm(regF dst, immF con) %{\n-  predicate(UseSSE>=1);\n-  match(Set dst (SqrtF con));\n-\n-  format %{ \"sqrtss  $dst, [$constantaddress]\\t# load from constant table: float=$con\" %}\n-  ins_cost(150);\n+  match(Set dst (SqrtF dst));\n+  format %{ \"sqrtss  $dst, $dst\" %}\n@@ -3266,1 +3242,1 @@\n-    __ sqrtss($dst$$XMMRegister, $constantaddress($con));\n+    __ sqrtss($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -3271,1 +3247,3 @@\n-instruct sqrtD_reg(regD dst, regD src) %{\n+\/\/ sqrtsd instruction needs destination register to be pre initialized for best performance\n+\/\/ Therefore only the instruct rule where the input is pre-loaded into dst register is defined below\n+instruct sqrtD_reg(regD dst) %{\n@@ -3273,27 +3251,2 @@\n-  match(Set dst (SqrtD src));\n-\n-  format %{ \"sqrtsd  $dst, $src\" %}\n-  ins_cost(150);\n-  ins_encode %{\n-    __ sqrtsd($dst$$XMMRegister, $src$$XMMRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct sqrtD_mem(regD dst, memory src) %{\n-  predicate(UseSSE>=2);\n-  match(Set dst (SqrtD (LoadD src)));\n-\n-  format %{ \"sqrtsd  $dst, $src\" %}\n-  ins_cost(150);\n-  ins_encode %{\n-    __ sqrtsd($dst$$XMMRegister, $src$$Address);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct sqrtD_imm(regD dst, immD con) %{\n-  predicate(UseSSE>=2);\n-  match(Set dst (SqrtD con));\n-  format %{ \"sqrtsd  $dst, [$constantaddress]\\t# load from constant table: double=$con\" %}\n-  ins_cost(150);\n+  match(Set dst (SqrtD dst));\n+  format %{ \"sqrtsd  $dst, $dst\" %}\n@@ -3301,1 +3254,1 @@\n-    __ sqrtsd($dst$$XMMRegister, $constantaddress($con));\n+    __ sqrtsd($dst$$XMMRegister, $dst$$XMMRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":12,"deletions":59,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -28,0 +29,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -35,0 +38,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -39,2 +43,5 @@\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n@@ -53,0 +60,5 @@\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n@@ -63,3 +75,132 @@\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int floorModIntIntPositive() {\n-        return Math.floorMod(dividend, divisor);\n+    public double  absDouble() {\n+        return  Math.abs(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  absFloat() {\n+        return  Math.abs(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public int  absExactInt() {\n+        return  Math.absExact(int2);\n+    }\n+\n+    @Benchmark\n+    public long  absExactLong() {\n+        return  Math.absExact(long2);\n+    }\n+\n+    @Benchmark\n+    public int  absInt() {\n+        return  Math.abs(int42);\n+    }\n+\n+    @Benchmark\n+    public long  absLong() {\n+        return  Math.abs(long13);\n+    }\n+\n+    @Benchmark\n+    public double  acosDouble() {\n+        return  Math.acos(double1);\n+    }\n+\n+    @Benchmark\n+    public int  addExactInt() {\n+        return  Math.addExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  addExactLong() {\n+        return  Math.addExact(long2, long13);\n+    }\n+\n+    @Benchmark\n+    public double  asinDouble() {\n+        return  Math.asin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atanDouble() {\n+        return  Math.atan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atan2Double() {\n+        return  Math.atan2(double1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  cbrt() {\n+        return  Math.cbrt(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ceilDouble() {\n+        return  Math.ceil(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  copySignDouble() {\n+        return  Math.copySign(double81, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  copySignFloat() {\n+        return  Math.copySign(floatNegative99, float1);\n+    }\n+\n+    @Benchmark\n+    public double  cosDouble() {\n+        return  Math.cos(double1);\n+    }\n+\n+    @Benchmark\n+    public double  coshDouble() {\n+        return  Math.cosh(double2);\n+    }\n+\n+    @Benchmark\n+    public int  decrementExactInt() {\n+        return  Math.decrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  decrementExactLong() {\n+        return  Math.decrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  expDouble() {\n+        return  Math.exp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  expm1() {\n+        return  Math.expm1(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  floorDouble() {\n+        return  Math.floor(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  floorDivIntInt() {\n+        return  Math.floorDiv(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongInt() {\n+        return  Math.floorDiv(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongLong() {\n+        return  Math.floorDiv(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  floorModIntInt() {\n+        return  Math.floorMod(int42, int5);\n@@ -70,1 +211,1 @@\n-    public int floorModIntInt() {\n+    public int floorModIntIntMultiple() {\n@@ -77,0 +218,5 @@\n+    @Benchmark\n+    public int  floorModLongInt() {\n+        return  Math.floorMod(long747, int5);\n+    }\n+\n@@ -79,1 +225,1 @@\n-    public int floorModLongInt() {\n+    public int floorModLongIntMultiple() {\n@@ -86,0 +232,5 @@\n+    @Benchmark\n+    public long  floorModLongLong() {\n+        return  Math.floorMod(long747, long13);\n+    }\n+\n@@ -88,1 +239,1 @@\n-    public long floorModLongLong() {\n+    public long floorModLongLongMultiple() {\n@@ -95,0 +246,265 @@\n+    @Benchmark\n+    public double  fmaDouble() {\n+        return  Math.fma(double2, double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  fmaFloat() {\n+        return  Math.fma(float2, floatNegative99, float7);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentDouble() {\n+        return  Math.getExponent(double81);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentFloat() {\n+        return  Math.getExponent(float7);\n+    }\n+\n+    @Benchmark\n+    public double  hypotDouble() {\n+        return  Math.hypot(double2, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  IEEERemainderDouble() {\n+        return  Math.IEEEremainder(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public int  incrementExactInt() {\n+        return  Math.incrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  incrementExactLong() {\n+        return  Math.incrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  logDouble() {\n+        return  Math.log(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log10Double() {\n+        return  Math.log10(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log1pDouble() {\n+        return  Math.log1p(double81);\n+    }\n+\n+    @Benchmark\n+    public int  maxInt() {\n+        return  Math.max(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  maxLong() {\n+        return  Math.max(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  maxFloat() {\n+        return  Math.max(float1, float2);\n+    }\n+\n+    @Benchmark\n+    public double  maxDouble() {\n+        return  Math.max(double1, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  minInt() {\n+        return  Math.min(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  minLong() {\n+        return  Math.min(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  minFloat() {\n+        return  Math.min(float1, floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  minDouble() {\n+        return  Math.min(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public int  multiplyExactInt() {\n+        return  Math.multiplyExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongInt() {\n+        return  Math.multiplyExact(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongLong() {\n+        return  Math.multiplyExact(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyFullIntInt() {\n+        return  Math.multiplyFull(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyHighLongLog() {\n+        return  Math.multiplyHigh(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  negateExactInt() {\n+        return  Math.negateExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  negateExactLong() {\n+        return  Math.negateExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  nextAfterDoubleDouble() {\n+        return  Math.nextAfter(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  nextAfterFloatDouble() {\n+        return  Math.nextAfter(float7, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  nextDownDouble() {\n+        return  Math.nextDown(float7);\n+    }\n+\n+    @Benchmark\n+    public float  nextDownFloat() {\n+        return  Math.nextDown(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  nextUpDouble() {\n+        return  Math.nextUp(double81);\n+    }\n+\n+    @Benchmark\n+    public float  nextUpFloat() {\n+        return  Math.nextUp(float7);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble() {\n+        return  Math.pow(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  random() {\n+        return  Math.random();\n+    }\n+\n+    @Benchmark\n+    public double  rintDouble() {\n+        return  Math.rint(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public long  roundDouble() {\n+        return  Math.round( Math.PI);\n+    }\n+\n+    @Benchmark\n+    public int  roundFloat() {\n+        return  Math.round(eFloat);\n+    }\n+\n+    @Benchmark\n+    public double  scalbDoubleInt() {\n+        return  Math.scalb(double81, int2);\n+    }\n+\n+    @Benchmark\n+    public float  scalbFloatInt() {\n+        return  Math.scalb(float7, int2);\n+    }\n+\n+    @Benchmark\n+    public double  sigNumDouble() {\n+        return  Math.signum(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  signumFloat() {\n+        return  Math.signum(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  sinDouble() {\n+        return  Math.sin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  sinhDouble() {\n+        return  Math.sinh(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  sqrtDouble() {\n+        return  Math.sqrt(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactIntInt() {\n+        return  Math.subtractExact(int42,int5);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactLongLong() {\n+        return  Math.subtractExact(long747,long13);\n+    }\n+\n+    @Benchmark\n+    public double  tanDouble() {\n+        return  Math.tan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhDouble() {\n+        return  Math.tanh(double1);\n+    }\n+\n+    @Benchmark\n+    public double  toDegreesDouble() {\n+        return  Math.toDegrees(double81);\n+    }\n+\n+    @Benchmark\n+    public double  toIntExactLong() {\n+        return  Math.toIntExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  toRadiansDouble() {\n+        return  Math.toRadians(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ulpDouble() {\n+        return  Math.ulp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  ulpFloat() {\n+        return  Math.ulp(float7);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":425,"deletions":9,"binary":false,"changes":434,"status":"modified"},{"patch":"@@ -0,0 +1,459 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class StrictMathBench {\n+\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public double  absDouble() {\n+        return  StrictMath.abs(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  absExactInt() {\n+        return  StrictMath.absExact(int2);\n+    }\n+\n+    @Benchmark\n+    public long  absExactLong() {\n+        return  StrictMath.absExact(long2);\n+    }\n+\n+    @Benchmark\n+    public float  absFloat() {\n+        return  StrictMath.abs(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public int  absInt() {\n+        return  StrictMath.abs(int42);\n+    }\n+\n+    @Benchmark\n+    public long  absLong() {\n+        return  StrictMath.abs(long13);\n+    }\n+\n+    @Benchmark\n+    public double  acosDouble() {\n+        return  StrictMath.acos(double1);\n+    }\n+\n+    @Benchmark\n+    public int  addExactInt() {\n+        return  StrictMath.addExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  addExactLong() {\n+        return  StrictMath.addExact(long2, long13);\n+    }\n+\n+    @Benchmark\n+    public double  asinDouble() {\n+        return  StrictMath.asin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atanDouble() {\n+        return  StrictMath.atan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atan2Double() {\n+        return  StrictMath.atan2(double1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  cbrt() {\n+        return  StrictMath.cbrt(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ceilDouble() {\n+        return  StrictMath.ceil(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  copySignDouble() {\n+        return  StrictMath.copySign(double81, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  copySignFloat() {\n+        return  StrictMath.copySign(floatNegative99, float1);\n+    }\n+\n+    @Benchmark\n+    public double  cosDouble() {\n+        return  StrictMath.cos(double1);\n+    }\n+\n+    @Benchmark\n+    public double  coshDouble() {\n+        return  StrictMath.cosh(double2);\n+    }\n+\n+    @Benchmark\n+    public int  decrementExactInt() {\n+        return  StrictMath.decrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  decrementExactLong() {\n+        return  StrictMath.decrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  expDouble() {\n+        return  StrictMath.exp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  expm1() {\n+        return  StrictMath.expm1(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  floorDouble() {\n+        return  StrictMath.floor(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  floorDivIntInt() {\n+        return  StrictMath.floorDiv(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongInt() {\n+        return  StrictMath.floorDiv(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongLong() {\n+        return  StrictMath.floorDiv(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  floorModIntInt() {\n+        return  StrictMath.floorMod(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public int  floorModLongInt() {\n+        return  StrictMath.floorMod(long747, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorModLongLong() {\n+        return  StrictMath.floorMod(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  fmaDouble() {\n+        return  StrictMath.fma(double2, double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  fmaFloat() {\n+        return  StrictMath.fma(float2, floatNegative99, float7);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentDouble() {\n+        return  StrictMath.getExponent(double81);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentFloat() {\n+        return  StrictMath.getExponent(float7);\n+    }\n+\n+    @Benchmark\n+    public double  hypotDouble() {\n+        return  StrictMath.hypot(double2, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  IEEERemainderDouble() {\n+        return  StrictMath.IEEEremainder(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public int  IncrementExactInt() {\n+        return  StrictMath.incrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  IncrementExactLong() {\n+        return  StrictMath.incrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  logDouble() {\n+        return  StrictMath.log(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log10Double() {\n+        return  StrictMath.log10(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log1pDouble() {\n+        return  StrictMath.log1p(double81);\n+    }\n+\n+    @Benchmark\n+    public int  maxInt() {\n+        return  StrictMath.max(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  maxLong() {\n+        return  StrictMath.max(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  maxFloat() {\n+        return  StrictMath.max(float1, float2);\n+    }\n+\n+    @Benchmark\n+    public double  maxDouble() {\n+        return  StrictMath.max(double1, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  minInt() {\n+        return  StrictMath.min(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  minLong() {\n+        return  StrictMath.min(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  minFloat() {\n+        return  StrictMath.min(float1, floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  minDouble() {\n+        return  StrictMath.min(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public int  multiplyExactInt() {\n+        return  StrictMath.multiplyExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongInt() {\n+        return  StrictMath.multiplyExact(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongLong() {\n+        return  StrictMath.multiplyExact(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyFullIntInt() {\n+        return  StrictMath.multiplyFull(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyHighLongLog() {\n+        return  StrictMath.multiplyHigh(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  negateExactInt() {\n+        return  StrictMath.negateExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  negateExactLong() {\n+        return  StrictMath.negateExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  nextAfterDoubleDouble() {\n+        return  StrictMath.nextAfter(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  nextAfterFloatDouble() {\n+        return  StrictMath.nextAfter(float7, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  nextDownDouble() {\n+        return  StrictMath.nextDown(float7);\n+    }\n+\n+    @Benchmark\n+    public float  nextDownFloat() {\n+        return  StrictMath.nextDown(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  nextUpDouble() {\n+        return  StrictMath.nextUp(double81);\n+    }\n+\n+    @Benchmark\n+    public float  nextUpFloat() {\n+        return  StrictMath.nextUp(float7);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble() {\n+        return  StrictMath.pow(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  random() {\n+        return  StrictMath.random();\n+    }\n+\n+    @Benchmark\n+    public double  rintDouble() {\n+        return  StrictMath.rint(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public long  roundDouble() {\n+        return  StrictMath.round( StrictMath.PI);\n+    }\n+\n+    @Benchmark\n+    public int  roundFloat() {\n+        return  StrictMath.round(eFloat);\n+    }\n+\n+    @Benchmark\n+    public double  scalbDoubleInt() {\n+        return  StrictMath.scalb(double81, int2);\n+    }\n+\n+    @Benchmark\n+    public float  scalbFloatInt() {\n+        return  StrictMath.scalb(float7, int2);\n+    }\n+\n+    @Benchmark\n+    public double  sigNumDouble() {\n+        return  StrictMath.signum(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  signumFloat() {\n+        return  StrictMath.signum(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  sinDouble() {\n+        return  StrictMath.sin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  sinhDouble() {\n+        return  StrictMath.sinh(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  sqrtDouble() {\n+        return  StrictMath.sqrt(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactIntInt() {\n+        return  StrictMath.subtractExact(int42,int5);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactLongLong() {\n+        return  StrictMath.subtractExact(long747,long13);\n+    }\n+\n+    @Benchmark\n+    public double  tanDouble() {\n+        return  StrictMath.tan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhDouble() {\n+        return  StrictMath.tanh(double1);\n+    }\n+\n+    @Benchmark\n+    public double  toDegreesDouble() {\n+        return  StrictMath.toDegrees(double81);\n+    }\n+\n+    @Benchmark\n+    public double  toIntExactLong() {\n+        return  StrictMath.toIntExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  toRadiansDouble() {\n+        return  StrictMath.toRadians(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ulpDouble() {\n+        return  StrictMath.ulp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  ulpFloat() {\n+        return  StrictMath.ulp(float7);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StrictMathBench.java","additions":459,"deletions":0,"binary":false,"changes":459,"status":"added"}]}