{"files":[{"patch":"@@ -415,1 +415,1 @@\n-  } else {\n+  } else if (!check_can_be_skipped) {\n@@ -423,1 +423,1 @@\n-    if (least != NULL && least->rank() <= this->rank() && !check_can_be_skipped) {\n+    if (least != NULL && least->rank() <= this->rank()) {\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-TEST_OTHER_VM(MutexRank, mutex_trylock_rank_out_of_order) {\n+TEST_OTHER_VM(MutexRank, mutex_trylock_rank_out_of_orderA) {\n@@ -83,1 +83,16 @@\n-  mutex_rankA_plus_two->lock();\n+  mutex_rankA_plus_one->lock();\n+  mutex_rankA_plus_two->try_lock_without_rank_check();\n+  mutex_rankA->lock();\n+  mutex_rankA->unlock();\n+  mutex_rankA_plus_two->unlock();\n+  mutex_rankA_plus_one->unlock();\n+}\n+\n+TEST_VM_ASSERT_MSG(MutexRank, mutex_trylock_rank_out_of_orderB,\n+                   \"Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+\n@@ -87,0 +102,2 @@\n+  mutex_rankA_plus_one->try_lock();\n+  mutex_rankA_plus_one->unlock();\n@@ -88,1 +105,0 @@\n-  mutex_rankA_plus_two->unlock();\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex_rank.cpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}