{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,1 +405,1 @@\n-            this.value = copyBytes(ascii, offset, count);\n+            this.value = Arrays.copyOfRange(ascii, offset, offset + count);\n@@ -539,1 +539,1 @@\n-                    this.value = copyBytes(bytes, offset, length);\n+                    this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n@@ -596,1 +596,1 @@\n-                this.value = copyBytes(bytes, offset, length);\n+                this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n@@ -604,1 +604,1 @@\n-                this.value = copyBytes(bytes, offset, length);\n+                this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n@@ -631,1 +631,1 @@\n-                        this.value = copyBytes(bytes, offset, length);\n+                        this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n@@ -674,1 +674,1 @@\n-                bytes = copyBytes(bytes, offset, length);\n+                bytes = Arrays.copyOfRange(bytes, offset, offset + length);\n@@ -698,6 +698,0 @@\n-    static byte[] copyBytes(byte[] bytes, int offset, int length) {\n-        byte[] dst = new byte[length];\n-        System.arraycopy(bytes, offset, dst, 0, length);\n-        return dst;\n-    }\n-\n@@ -718,1 +712,1 @@\n-                return new String(copyBytes(bytes, offset, length), LATIN1);\n+                return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n@@ -4543,3 +4537,1 @@\n-        \/\/ To avoid surprises due to data races we limit length to the smallest\n-        \/\/ of asb.length() and val.length\n-        int length = Math.min(asb.length(), val.length);\n+        int length = asb.length();\n@@ -4548,1 +4540,1 @@\n-            this.value = copyBytes(val, 0, length);\n+            this.value = Arrays.copyOfRange(val, 0, length);\n@@ -4560,1 +4552,1 @@\n-            this.value = copyBytes(val, 0, length << 1);\n+            this.value = Arrays.copyOfRange(val, 0, length << 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -582,4 +582,4 @@\n-        int end = value.length;\n-        int start = 0;\n-        while ((start < end) && ((value[start] & 0xff) <= ' ')) {\n-            start++;\n+        int len = value.length;\n+        int st = 0;\n+        while ((st < len) && ((value[st] & 0xff) <= ' ')) {\n+            st++;\n@@ -587,2 +587,2 @@\n-        while ((start < end) && ((value[end - 1] & 0xff) <= ' ')) {\n-            end--;\n+        while ((st < len) && ((value[len - 1] & 0xff) <= ' ')) {\n+            len--;\n@@ -590,2 +590,2 @@\n-        return ((start > 0) || (end < value.length)) ?\n-            newString(value, start, end - start) : null;\n+        return ((st > 0) || (len < value.length)) ?\n+            newString(value, st, len - st) : null;\n@@ -763,1 +763,2 @@\n-        return new String(String.copyBytes(val, index, len), LATIN1);\n+        return new String(Arrays.copyOfRange(val, index, index + len),\n+                          LATIN1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1005,4 +1005,4 @@\n-        int end = length;\n-        int start = 0;\n-        while (start < end && getChar(value, start) <= ' ') {\n-            start++;\n+        int len = length;\n+        int st = 0;\n+        while (st < len && getChar(value, st) <= ' ') {\n+            st++;\n@@ -1010,2 +1010,2 @@\n-        while (start < end && getChar(value, end - 1) <= ' ') {\n-            end--;\n+        while (st < len && getChar(value, len - 1) <= ' ') {\n+            len--;\n@@ -1013,2 +1013,2 @@\n-        return ((start > 0) || (end < length)) ?\n-            new String(String.copyBytes(value, start << 1, (end - start) << 1), UTF16) :\n+        return ((st > 0) || (len < length )) ?\n+            new String(Arrays.copyOfRange(value, st << 1, len << 1), UTF16) :\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -3819,2 +3820,18 @@\n-        int newLength = to - from;\n-        if (newLength < 0)\n+        if (from == 0) {\n+            if (original.length == to) {\n+                byte[] copy = new byte[original.length];\n+                System.arraycopy(original, 0, copy, 0,\n+                        original.length);\n+                return copy;\n+            }\n+            byte[] copy = new byte[to];\n+            System.arraycopy(original, 0, copy, 0,\n+                    copy.length);\n+            return copy;\n+        }\n+        return copyOfRangeGeneric(original, from, to);\n+    }\n+\n+    private static int checkLength(int from, int to) {\n+        int len = to - from;\n+        if (len < 0) {\n@@ -3822,0 +3839,6 @@\n+        }\n+        return len;\n+    }\n+\n+    private static byte[] copyOfRangeGeneric(byte[] original, int from, int to) {\n+        int newLength = checkLength(from, to);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"}]}