{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import jdk.internal.util.Preconditions;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -3537,0 +3539,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3543,0 +3548,7 @@\n+    @ForceInline\n+    private static byte[] copyOf(byte[] original) {\n+        byte[] copy = new byte[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3561,0 +3573,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3585,0 +3600,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3591,0 +3609,7 @@\n+    @ForceInline\n+    private static int[] copyOf(int[] original) {\n+        int[] copy = new int[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3609,0 +3634,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3615,0 +3643,7 @@\n+    @ForceInline\n+    private static long[] copyOf(long[] original) {\n+        long[] copy = new long[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3633,0 +3668,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3639,0 +3677,7 @@\n+    @ForceInline\n+    private static char[] copyOf(char[] original) {\n+        char[] copy = new char[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3657,0 +3702,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3663,0 +3711,7 @@\n+    @ForceInline\n+    private static float[] copyOf(float[] original) {\n+        float[] copy = new float[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3681,0 +3736,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3687,0 +3745,7 @@\n+    @ForceInline\n+    private static double[] copyOf(double[] original) {\n+        double[] copy = new double[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3705,0 +3770,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3711,0 +3779,7 @@\n+    @ForceInline\n+    private static boolean[] copyOf(boolean[] original) {\n+        boolean[] copy = new boolean[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n@@ -3792,0 +3867,7 @@\n+    @ForceInline\n+    private static void checkLength(int from, int to) {\n+        if (to < from) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n+    }\n+\n@@ -3819,0 +3901,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static byte[] copyOfRangeGeneric(byte[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3820,2 +3912,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3855,0 +3945,17 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static short[] copyOf(short[] original) {\n+        short[] copy = new short[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n+    @ForceInline\n+    private static short[] copyOfRangeGeneric(short[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3856,2 +3963,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3891,0 +3996,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static int[] copyOfRangeGeneric(int[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3892,2 +4007,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3927,0 +4040,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static long[] copyOfRangeGeneric(long[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3928,2 +4051,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3963,0 +4084,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static char[] copyOfRangeGeneric(char[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3964,2 +4095,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3999,0 +4128,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static float[] copyOfRangeGeneric(float[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4000,2 +4139,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -4035,0 +4172,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static double[] copyOfRangeGeneric(double[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4036,2 +4183,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -4071,0 +4216,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static boolean[] copyOfRangeGeneric(boolean[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4072,2 +4227,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":169,"deletions":16,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-@Fork(5)\n@@ -35,2 +34,3 @@\n-@Warmup(iterations = 5, time = 5)\n-@Measurement(iterations = 10, time = 5)\n+@Warmup(iterations = 5, time = 3)\n+@Measurement(iterations = 5, time = 3)\n+@Fork(3)\n@@ -38,0 +38,4 @@\n+\n+  @Param({\"0\", \"7\", \"64\"})\n+  public int size;\n+\n@@ -42,1 +46,1 @@\n-    array = \"\".getBytes(StandardCharsets.UTF_8);\n+      array = \"a\".repeat(size).getBytes(StandardCharsets.UTF_8);\n@@ -47,1 +51,1 @@\n-    return new String(array);\n+      return new String(array);\n@@ -52,1 +56,1 @@\n-    return new String(array, StandardCharsets.UTF_8);\n+      return new String(array, StandardCharsets.UTF_8);\n@@ -57,1 +61,1 @@\n-    return new String(array, StandardCharsets.UTF_8.name());\n+      return new String(array, StandardCharsets.UTF_8.name());\n@@ -62,1 +66,1 @@\n-    return new String(array, 0, 0);\n+    return new String(array, 0, array.length);\n@@ -67,1 +71,1 @@\n-    return new String(array, 0, 0, StandardCharsets.UTF_8);\n+      return new String(array, 0, array.length, StandardCharsets.UTF_8);\n@@ -72,1 +76,1 @@\n-    return new String(array, 0, 0, StandardCharsets.UTF_8.name());\n+      return new String(array, 0, array.length, StandardCharsets.UTF_8.name());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConstructor.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"}]}