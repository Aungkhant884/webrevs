{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -3538,0 +3539,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3562,0 +3566,3 @@\n+        if (newLength == original.length) {\n+            return original.clone();\n+        }\n@@ -3586,0 +3593,3 @@\n+        if (newLength == original.length) {\n+            return original.clone();\n+        }\n@@ -3610,0 +3620,3 @@\n+        if (newLength == original.length) {\n+            return original.clone();\n+        }\n@@ -3634,0 +3647,3 @@\n+        if (newLength == original.length) {\n+            return original.clone();\n+        }\n@@ -3658,0 +3674,3 @@\n+        if (newLength == original.length) {\n+            return original.clone();\n+        }\n@@ -3682,0 +3701,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3706,0 +3728,3 @@\n+        if (newLength == original.length) {\n+            return copyOf(original);\n+        }\n@@ -3793,0 +3818,8 @@\n+\n+    @ForceInline\n+    private static void checkLength(int from, int to) {\n+        if (to - from < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n+    }\n+\n@@ -3820,13 +3853,5 @@\n-        if (from == 0) {\n-            if (original.length == to) {\n-                byte[] copy = new byte[original.length];\n-                System.arraycopy(original, 0, copy, 0,\n-                        original.length);\n-                return copy;\n-            }\n-            byte[] copy = new byte[to];\n-            System.arraycopy(original, 0, copy, 0,\n-                    copy.length);\n-            return copy;\n-        }\n-        return copyOfRangeGeneric(original, from, to);\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n@@ -3835,6 +3860,5 @@\n-    private static int checkLength(int from, int to) {\n-        int len = to - from;\n-        if (len < 0) {\n-            throw new IllegalArgumentException(from + \" > \" + to);\n-        }\n-        return len;\n+    @ForceInline\n+    private static byte[] copyOf(byte[] original) {\n+        byte[] copy = new byte[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n@@ -3843,0 +3867,1 @@\n+    @ForceInline\n@@ -3844,1 +3869,2 @@\n-        int newLength = checkLength(from, to);\n+        checkLength(from, to);\n+        int newLength = to - from;\n@@ -3878,0 +3904,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return original.clone();\n+    }\n+\n+    @ForceInline\n+    private static short[] copyOfRangeGeneric(short[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3879,2 +3915,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3914,0 +3948,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return original.clone();\n+    }\n+\n+    @ForceInline\n+    private static int[] copyOfRangeGeneric(int[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3915,2 +3959,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3950,0 +3992,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return original.clone();\n+    }\n+\n+    @ForceInline\n+    private static long[] copyOfRangeGeneric(long[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3951,2 +4003,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -3986,0 +4036,10 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return original.clone();\n+    }\n+\n+    @ForceInline\n+    private static char[] copyOfRangeGeneric(char[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -3987,2 +4047,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -4022,0 +4080,11 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return original.clone();\n+    }\n+\n+\n+    @ForceInline\n+    private static float[] copyOfRangeGeneric(float[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4023,2 +4092,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -4058,0 +4125,17 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static double[] copyOf(double[] original) {\n+        double[] copy = new double[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n+    @ForceInline\n+    private static double[] copyOfRangeGeneric(double[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4059,2 +4143,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n@@ -4094,0 +4176,17 @@\n+        \/\/ Tickle the JIT to fold special cases optimally\n+        if (from != 0 || to != original.length)\n+            return copyOfRangeGeneric(original, from, to);\n+        else \/\/ from == 0 && to == original.length\n+            return copyOf(original);\n+    }\n+\n+    @ForceInline\n+    private static boolean[] copyOf(boolean[] original) {\n+        boolean[] copy = new boolean[original.length];\n+        System.arraycopy(original, 0, copy, 0, original.length);\n+        return copy;\n+    }\n+\n+    @ForceInline\n+    private static boolean[] copyOfRangeGeneric(boolean[] original, int from, int to) {\n+        checkLength(from, to);\n@@ -4095,2 +4194,0 @@\n-        if (newLength < 0)\n-            throw new IllegalArgumentException(from + \" > \" + to);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":131,"deletions":34,"binary":false,"changes":165,"status":"modified"}]}