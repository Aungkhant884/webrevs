{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,1 +405,1 @@\n-            this.value = Arrays.copyOfRange(ascii, offset, offset + count);\n+            this.value = copyBytes(ascii, offset, count);\n@@ -539,1 +539,1 @@\n-                    this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n+                    this.value = copyBytes(bytes, offset, length);\n@@ -596,1 +596,1 @@\n-                this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n+                this.value = copyBytes(bytes, offset, length);\n@@ -604,1 +604,1 @@\n-                this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n+                this.value = copyBytes(bytes, offset, length);\n@@ -631,1 +631,1 @@\n-                        this.value = Arrays.copyOfRange(bytes, offset, offset + length);\n+                        this.value = copyBytes(bytes, offset, length);\n@@ -674,1 +674,1 @@\n-                bytes = Arrays.copyOfRange(bytes, offset, offset + length);\n+                bytes = copyBytes(bytes, offset, length);\n@@ -698,0 +698,6 @@\n+    static byte[] copyBytes(byte[] bytes, int offset, int length) {\n+        byte[] dst = new byte[length];\n+        System.arraycopy(bytes, offset, dst, 0, length);\n+        return dst;\n+    }\n+\n@@ -712,1 +718,1 @@\n-                return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n+                return new String(copyBytes(bytes, offset, length), LATIN1);\n@@ -4537,1 +4543,3 @@\n-        int length = asb.length();\n+        \/\/ To avoid surprises due to data races we limit length to the smallest\n+        \/\/ of asb.length() and val.length\n+        int length = Math.min(asb.length(), val.length);\n@@ -4540,1 +4548,1 @@\n-            this.value = Arrays.copyOfRange(val, 0, length);\n+            this.value = copyBytes(val, 0, length);\n@@ -4552,1 +4560,1 @@\n-            this.value = Arrays.copyOfRange(val, 0, length << 1);\n+            this.value = copyBytes(val, 0, length << 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -582,4 +582,4 @@\n-        int len = value.length;\n-        int st = 0;\n-        while ((st < len) && ((value[st] & 0xff) <= ' ')) {\n-            st++;\n+        int end = value.length;\n+        int start = 0;\n+        while ((start < end) && ((value[start] & 0xff) <= ' ')) {\n+            start++;\n@@ -587,2 +587,2 @@\n-        while ((st < len) && ((value[len - 1] & 0xff) <= ' ')) {\n-            len--;\n+        while ((start < end) && ((value[end - 1] & 0xff) <= ' ')) {\n+            end--;\n@@ -590,2 +590,2 @@\n-        return ((st > 0) || (len < value.length)) ?\n-            newString(value, st, len - st) : null;\n+        return ((start > 0) || (end < value.length)) ?\n+            newString(value, start, end - start) : null;\n@@ -763,2 +763,1 @@\n-        return new String(Arrays.copyOfRange(val, index, index + len),\n-                          LATIN1);\n+        return new String(String.copyBytes(val, index, len), LATIN1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1005,4 +1005,4 @@\n-        int len = length;\n-        int st = 0;\n-        while (st < len && getChar(value, st) <= ' ') {\n-            st++;\n+        int end = length;\n+        int start = 0;\n+        while (start < end && getChar(value, start) <= ' ') {\n+            start++;\n@@ -1010,2 +1010,2 @@\n-        while (st < len && getChar(value, len - 1) <= ' ') {\n-            len--;\n+        while (start < end && getChar(value, end - 1) <= ' ') {\n+            end--;\n@@ -1013,2 +1013,2 @@\n-        return ((st > 0) || (len < length )) ?\n-            new String(Arrays.copyOfRange(value, st << 1, len << 1), UTF16) :\n+        return ((start > 0) || (end < length)) ?\n+            new String(String.copyBytes(value, start << 1, (end - start) << 1), UTF16) :\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-@Fork(5)\n@@ -35,2 +34,3 @@\n-@Warmup(iterations = 5, time = 5)\n-@Measurement(iterations = 10, time = 5)\n+@Warmup(iterations = 5, time = 3)\n+@Measurement(iterations = 5, time = 3)\n+@Fork(3)\n@@ -38,0 +38,4 @@\n+\n+  @Param({\"0\", \"7\", \"64\"})\n+  public int size;\n+\n@@ -42,1 +46,1 @@\n-    array = \"\".getBytes(StandardCharsets.UTF_8);\n+      array = \"a\".repeat(size).getBytes(StandardCharsets.UTF_8);\n@@ -47,1 +51,1 @@\n-    return new String(array);\n+      return new String(array);\n@@ -52,1 +56,1 @@\n-    return new String(array, StandardCharsets.UTF_8);\n+      return new String(array, StandardCharsets.UTF_8);\n@@ -57,1 +61,1 @@\n-    return new String(array, StandardCharsets.UTF_8.name());\n+      return new String(array, StandardCharsets.UTF_8.name());\n@@ -62,1 +66,1 @@\n-    return new String(array, 0, 0);\n+    return new String(array, 0, array.length);\n@@ -67,1 +71,1 @@\n-    return new String(array, 0, 0, StandardCharsets.UTF_8);\n+      return new String(array, 0, array.length, StandardCharsets.UTF_8);\n@@ -72,1 +76,1 @@\n-    return new String(array, 0, 0, StandardCharsets.UTF_8.name());\n+      return new String(array, 0, array.length, StandardCharsets.UTF_8.name());\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConstructor.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"}]}