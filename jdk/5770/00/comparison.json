{"files":[{"patch":"@@ -45,27 +45,0 @@\n-class ShenandoahUpdateRootsTask : public AbstractGangTask {\n-private:\n-  ShenandoahRootUpdater*  _root_updater;\n-  bool                    _check_alive;\n-public:\n-  ShenandoahUpdateRootsTask(ShenandoahRootUpdater* root_updater, bool check_alive) :\n-    AbstractGangTask(\"Shenandoah Update Roots\"),\n-    _root_updater(root_updater),\n-    _check_alive(check_alive){\n-  }\n-\n-  void work(uint worker_id) {\n-    assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must be at a safepoint\");\n-    ShenandoahParallelWorkerSession worker_session(worker_id);\n-\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n-    ShenandoahUpdateRefsClosure cl;\n-    if (_check_alive) {\n-      ShenandoahForwardedIsAliveClosure is_alive;\n-      _root_updater->roots_do<ShenandoahForwardedIsAliveClosure, ShenandoahUpdateRefsClosure>(worker_id, &is_alive, &cl);\n-    } else {\n-      AlwaysTrueClosure always_true;;\n-      _root_updater->roots_do<AlwaysTrueClosure, ShenandoahUpdateRefsClosure>(worker_id, &always_true, &cl);\n-    }\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"}]}