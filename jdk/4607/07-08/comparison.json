{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.io.UncheckedIOException;\n@@ -1979,5 +1978,1 @@\n-            try {\n-                out.write(b);\n-            } catch (UncheckedIOException uioe) {\n-                throw uioe.getCause();\n-            }\n+            out.write(b);\n@@ -1990,5 +1985,1 @@\n-            try {\n-                out.write(b, off, len);\n-            } catch (UncheckedIOException uioe) {\n-                throw uioe.getCause();\n-            }\n+            out.write(b, off, len);\n@@ -2029,5 +2020,1 @@\n-            try {\n-                super.write(b, off, len);\n-            } catch (UncheckedIOException uioe) {\n-                throw uioe.getCause();\n-            }\n+            super.write(b, off, len);\n@@ -2140,1 +2127,2 @@\n-    private class FileRolloverOutputStream extends ByteArrayOutputStream {\n+    private class FileRolloverOutputStream extends OutputStream {\n+        private ByteArrayOutputStream baos = new ByteArrayOutputStream(8192);\n@@ -2142,1 +2130,0 @@\n-        private long totalWritten = 0;\n@@ -2144,0 +2131,1 @@\n+        private long totalWritten = 0;\n@@ -2145,2 +2133,1 @@\n-        FileRolloverOutputStream(final Entry e) {\n-            super(8192);\n+        private FileRolloverOutputStream(final Entry e) {\n@@ -2151,1 +2138,1 @@\n-        public synchronized void write(int b) throws UncheckedIOException {\n+        public synchronized void write(final int b) throws IOException {\n@@ -2159,1 +2146,1 @@\n-                super.write(b);\n+                baos.write(b);\n@@ -2164,5 +2151,1 @@\n-            try {\n-                transferToFile();\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+            transferToFile();\n@@ -2173,1 +2156,6 @@\n-        public synchronized void write(byte[] b, int off, int len) throws UncheckedIOException {\n+        public void write(final byte[] b) throws IOException {\n+            write(b, 0, b.length);\n+        }\n+\n+        @Override\n+        public synchronized void write(final byte[] b, final int off, final int len) throws IOException {\n@@ -2181,1 +2169,1 @@\n-                super.write(b, off, len);\n+                baos.write(b, off, len);\n@@ -2186,5 +2174,1 @@\n-            try {\n-                transferToFile();\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+            transferToFile();\n@@ -2194,0 +2178,7 @@\n+        @Override\n+        public void flush() throws IOException {\n+            if (tmpFileOS != null) {\n+                tmpFileOS.flush();\n+            }\n+        }\n+\n@@ -2196,0 +2187,1 @@\n+            baos = null;\n@@ -2201,6 +2193,2 @@\n-        private void writeToFile(int b) throws UncheckedIOException {\n-            try {\n-                tmpFileOS.write(b);\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+        private void writeToFile(int b) throws IOException {\n+            tmpFileOS.write(b);\n@@ -2210,6 +2198,2 @@\n-        private void writeToFile(byte[] b, int off, int len) throws UncheckedIOException {\n-            try {\n-                tmpFileOS.write(b, off, len);\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+        private void writeToFile(byte[] b, int off, int len) throws IOException {\n+            tmpFileOS.write(b, off, len);\n@@ -2224,1 +2208,1 @@\n-                new ByteArrayInputStream(buf, 0, count).transferTo(os);\n+                baos.writeTo(os);\n@@ -2226,3 +2210,2 @@\n-            \/\/ clear the in-memory buffer and shrink the buffer\n-            reset();\n-            buf = new byte[0];\n+            \/\/ release the underlying byte array\n+            baos = null;\n@@ -2232,0 +2215,4 @@\n+\n+        private byte[] toByteArray() {\n+            return baos == null ? null : baos.toByteArray();\n+        }\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":37,"deletions":50,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -40,3 +40,0 @@\n- * This is intentionally a manual test. The (jtreg) configurations below are here only\n- * for reference about runtime expectations of this test.\n- *\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/LargeCompressedEntrySizeTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}