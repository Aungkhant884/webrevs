{"files":[{"patch":"@@ -2127,0 +2127,4 @@\n+    \/\/ Implementation note: the \"write\" and the \"close\" methods of this implementation\n+    \/\/ aren't \"synchronized\" because this FileRolloverOutputStream gets called\n+    \/\/ only from either DeflatingEntryOutputStream or EntryOutputStream, both of which\n+    \/\/ already have the necessary \"synchronized\" before calling these methods.\n@@ -2138,1 +2142,1 @@\n-        public synchronized void write(final int b) throws IOException {\n+        public void write(final int b) throws IOException {\n@@ -2161,1 +2165,1 @@\n-        public synchronized void write(final byte[] b, final int off, final int len) throws IOException {\n+        public void write(final byte[] b, final int off, final int len) throws IOException {\n@@ -2206,0 +2210,1 @@\n+            tmpFileOS = new BufferedOutputStream(Files.newOutputStream(entry.file));\n@@ -2207,3 +2212,1 @@\n-            try (OutputStream os = new BufferedOutputStream(Files.newOutputStream(entry.file))) {\n-                baos.writeTo(os);\n-            }\n+            baos.writeTo(tmpFileOS);\n@@ -2212,2 +2215,0 @@\n-            \/\/ append any further data to the file with buffering enabled\n-            tmpFileOS = new BufferedOutputStream(Files.newOutputStream(entry.file, APPEND));\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"}]}