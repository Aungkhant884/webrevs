{"files":[{"patch":"@@ -108,0 +108,2 @@\n+    \/\/ The maximum size of array to allocate. Some VMs reserve some header words in an array.\n+    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n@@ -1951,1 +1953,1 @@\n-            os = new ByteArrayOutputStream((e.size > 0)? (int)e.size : 8192);\n+            os = new ByteArrayOutputStream((e.size > 0 && e.size <= MAX_ARRAY_SIZE)? (int)e.size : 8192);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+\/**\n+ * @test\n+ * @bug 8190753\n+ * @summary Verify that opening an outputstream for a large zip entry doesn't run into \"Negative initial size\" exception\n+ * @run testng LargeEntrySizeTest\n+ *\/\n+public class LargeEntrySizeTest {\n+\n+    \/\/ a value which when cast to an integer, becomes a negative value\n+    private static final long LARGE_FILE_SIZE = Integer.MAX_VALUE + 1L;\n+    private static final long SMALL_FILE_SIZE = 0x100000L; \/\/ 1024L x 1024L;\n+    private static final String LARGE_FILE_NAME = \"LargeZipEntry.txt\";\n+    \/\/ File that will be created with a size less than 0xFFFFFFFF\n+    private static final String SMALL_FILE_NAME = \"SmallZipEntry.txt\";\n+    \/\/ List of files to be added to the ZIP file\n+    private static final List<String> ZIP_ENTRIES = List.of(LARGE_FILE_NAME, SMALL_FILE_NAME);\n+    private static final String ZIP_FILE_NAME = \"8190753-test.zip\";\n+\n+    @BeforeMethod\n+    public void setUp() throws IOException {\n+        deleteFiles();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws IOException {\n+        deleteFiles();\n+    }\n+\n+    \/**\n+     * Delete the files created for use by the test\n+     *\n+     * @throws IOException if an error occurs deleting the files\n+     *\/\n+    private static void deleteFiles() throws IOException {\n+        Files.deleteIfExists(Path.of(ZIP_FILE_NAME));\n+        Files.deleteIfExists(Path.of(LARGE_FILE_NAME));\n+        Files.deleteIfExists(Path.of(SMALL_FILE_NAME));\n+    }\n+\n+\n+    \/**\n+     * Verifies that large entry (whose size is greater than {@link Integer#MAX_VALUE}) in a zip file\n+     * can be opened as an {@link OutputStream} using the zip filesystem\n+     *\/\n+    @Test\n+    public void testLargeEntryZipFSOutputStream() throws Exception {\n+        final Path zipFile = Path.of(ZIP_FILE_NAME);\n+        createZipFile(zipFile);\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile)) {\n+            for (String entryName : ZIP_ENTRIES) {\n+                try (OutputStream os = Files.newOutputStream(fs.getPath(entryName), StandardOpenOption.WRITE)) {\n+                    \/\/ just a dummy write\n+                    os.write(0x01);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Creates a zip file with an entry whose size is larger than {@link Integer#MAX_VALUE}\n+     *\/\n+    private static void createZipFile(final Path zipFile) throws IOException {\n+        createFiles();\n+        try (OutputStream os = Files.newOutputStream(zipFile);\n+             ZipOutputStream zos = new ZipOutputStream(os)) {\n+            System.out.println(\"Creating Zip file: \" + zipFile.getFileName());\n+            for (String srcFile : ZIP_ENTRIES) {\n+                File fileToZip = new File(srcFile);\n+                long fileSize = fileToZip.length();\n+                System.out.println(\"Adding entry \" + srcFile + \" of size \" + fileSize + \" bytes\");\n+                try (FileInputStream fis = new FileInputStream(fileToZip)) {\n+                    ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\n+                    zipEntry.setSize(fileSize);\n+                    zos.putNextEntry(zipEntry);\n+                    fis.transferTo(zos);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Create the files that will be added to the ZIP file\n+     *\/\n+    private static void createFiles() throws IOException {\n+        try (RandomAccessFile largeFile = new RandomAccessFile(LARGE_FILE_NAME, \"rw\");\n+             RandomAccessFile smallFile = new RandomAccessFile(SMALL_FILE_NAME, \"rw\")) {\n+            System.out.printf(\"Creating %s%n\", LARGE_FILE_NAME);\n+            largeFile.setLength(LARGE_FILE_SIZE);\n+            System.out.printf(\"Creating %s%n\", SMALL_FILE_NAME);\n+            smallFile.setLength(SMALL_FILE_SIZE);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/LargeEntrySizeTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}