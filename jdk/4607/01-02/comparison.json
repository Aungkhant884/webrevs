{"files":[{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.zip.CRC32;\n+import java.util.zip.DeflaterOutputStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import java.util.zip.ZipOutputStream;\n+\n+\/**\n+ * This is intentionally a manual test. The (jtreg) configurations below are here only\n+ * for reference about runtime expectations of this test.\n+ *\n+ * @bug 8190753\n+ * @summary Verify that using zip filesystem for opening an outputstream for a zip entry whose\n+ * compressed size is large, doesn't run into \"Negative initial size\" exception\n+ * @requires (sun.arch.data.model == \"64\" & os.maxMemory >= 8g)\n+ * @run testng\/othervm -Xmx6g LargeCompressedEntrySizeTest\n+ *\/\n+public class LargeCompressedEntrySizeTest {\n+\n+    private static final String LARGE_FILE_NAME = \"LargeZipEntry.txt\";\n+    private static final String ZIP_FILE_NAME = \"8190753-test-compressed-size.zip\";\n+\n+    @BeforeMethod\n+    public void setUp() throws IOException {\n+        deleteFiles();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws IOException {\n+        deleteFiles();\n+    }\n+\n+    \/**\n+     * Delete the files created for use by the test\n+     *\n+     * @throws IOException if an error occurs deleting the files\n+     *\/\n+    private static void deleteFiles() throws IOException {\n+        Files.deleteIfExists(Path.of(ZIP_FILE_NAME));\n+        Files.deleteIfExists(Path.of(LARGE_FILE_NAME));\n+    }\n+\n+\n+    \/**\n+     * Using zip filesystem, creates a zip file and writes out a zip entry whose compressed size is\n+     * expected to be greater than 2gb.\n+     *\/\n+    @Test\n+    public void testLargeCompressedSizeWithZipFS() throws Exception {\n+        final Path zipFile = Path.of(ZIP_FILE_NAME);\n+        final long largeFileSize = (2L * 1024L * 1024L * 1024L) + 1L;\n+        final Random random = new Random();\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, Collections.singletonMap(\"create\", \"true\"))) {\n+            try (OutputStream os = Files.newOutputStream(fs.getPath(LARGE_FILE_NAME))) {\n+                long remaining = largeFileSize;\n+                final int chunkSize = 102400;\n+                for (long l = 0; l < largeFileSize; l+=chunkSize) {\n+                    final int numToWrite = (int) Math.min(remaining, chunkSize);\n+                    final byte[] b = new byte[numToWrite];\n+                    \/\/ fill with random bytes\n+                    random.nextBytes(b);\n+                    os.write(b);\n+                    remaining -= b.length;\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/LargeCompressedEntrySizeTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -46,1 +46,2 @@\n- * @summary Verify that opening an outputstream for a large zip entry doesn't run into \"Negative initial size\" exception\n+ * @summary Verify that using zip filesystem for opening an outputstream for a large zip entry doesn't\n+ * run into \"Negative initial size\" exception\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/LargeEntrySizeTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}