{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import javax.tools.JavaCompiler;\n+import javax.tools.StandardLocation;\n+\n@@ -62,0 +65,72 @@\n+ * <h3>Options and Environment Variables<\/h3>\n+ *\n+ * The full set of options and environment variables supported by <em>javac<\/em>\n+ * is given in the <a href=\"..\/specs\/man\/javac.html\"><em>javac Tool Guide<\/em><\/a>.\n+ * However, there are some restrictions when the compiler is invoked through\n+ * its API.\n+ *\n+ * <ul>\n+ *     <li><p>The {@code -J} option is not supported.\n+ *          Any necessary VM options must be set in the VM used to invoke the API.\n+ *          {@code IllegalArgumentException} will be thrown if the option\n+ *          is used when invoking the tool through the {@code JavaCompiler} API;\n+ *          an error will be reported if the option is used when invoking\n+ *          <em>javac<\/em> through the {@link java.util.spi.ToolProvider ToolProvider}\n+ *          or legacy {@link com.sun.tools.javac.Main Main} API.\n+ *\n+ *     <li><p>The \"classpath wildcard\" feature is not supported.\n+ *          The feature is only supported by the native launcher.\n+ *          When invoking the tool through its API, all necessary jar\n+ *          files should be included directly in the {@code --class-path}\n+ *          option, or the {@code CLASSPATH} environment variable.\n+ *          When invoking the tool through its API, all components of the\n+ *          class path will be taken literally, and will be ignored if there\n+ *          is no matching directory or file. The {@code -Xlint:paths}\n+ *          option can be used to generate warnings about missing components.\n+ *\n+ * <\/ul>\n+ *\n+ * The following restrictions apply when invoking the compiler through\n+ * the {@link JavaCompiler} interface.\n+ *\n+ * <ul>\n+ *     <li><p>Argument files (so-called @-files) are not supported.\n+ *          The content of any such files should be included directly\n+ *          in the list of options provided when invoking the tool\n+ *          though this API.\n+ *          {@code IllegalArgumentException} will be thrown if\n+ *          the option is used when invoking the tool through this API.\n+ *\n+ *     <li><p>The environment variable {@code JDK_JAVAC_OPTIONS} is not supported.\n+ *          Any options defined in the environment variable should be included\n+ *          directly in the list of options provided when invoking the\n+ *          API; any values in the environment variable will be ignored.\n+ *\n+ *     <li><p>Options that are just used to obtain information (such as\n+ *          {@code --help}, {@code --help-extended}, {@code --version} and\n+ *          {@code --full-version}) are not supported.\n+ *          {@link IllegalArgumentException} will be thrown if any of\n+ *          these options are used when invoking the tool through this API.\n+ *\n+ *      <li>Path-related options depend on the file manager being used\n+ *          when calling {@link JavaCompiler#getTask}. The \"standard\"\n+ *          options, such as {@code --class-path}, {@code --module-path},\n+ *          and so on are available when using the default file manager,\n+ *          or one derived from it. These options may not be available\n+ *          and different options may be available, when using a different\n+ *          file manager.\n+ *          {@link IllegalArgumentException} will be thrown if any option\n+ *          that is unknown to the tool or the file manager is used when\n+ *          invoking the tool through this API.\n+ * <\/ul>\n+ *\n+ * Note that the {@code CLASSPATH} environment variable <em>is<\/em> honored\n+ * when invoking the compiler through its API, although such use is discouraged.\n+ * An environment variable cannot be unset once a VM has been started,\n+ * and so it is recommended to ensure that the environment variable is not set\n+ * when starting a VM that will be used to invoke the compiler.\n+ * However, if a value has been set, any such value can be overridden by\n+ * using the {@code --class-path} option when invoking the compiler,\n+ * or setting {@link StandardLocation#CLASS_PATH} in the file manager\n+ * when invoking the compiler through the {@link JavaCompiler} interface.\n+ *\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"modified"}]}