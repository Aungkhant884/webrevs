{"files":[{"patch":"@@ -281,0 +281,4 @@\n+  <Event name=\"SystemGC\" category=\"Java Virtual Machine, GC, Collector\" label=\"System GC\" stackTrace=\"true\" startTime=\"true\" thread=\"true\">\n+    <Field type=\"boolean\" name=\"invokedConcurrent\" label=\"Invoked Concurrent\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -446,0 +446,2 @@\n+    EventSystemGC event;\n+    event.set_invokedConcurrent(ExplicitGCInvokesConcurrent);\n@@ -447,0 +449,1 @@\n+    event.commit();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -349,0 +349,6 @@\n+    <event name=\"jdk.SystemGC\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -349,0 +349,6 @@\n+    <event name=\"jdk.SystemGC\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting> \n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.gc.collection;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -XX:+ExplicitGCInvokesConcurrent jdk.jfr.event.gc.collection.TestSystemGC true\n+ * @run main\/othervm -XX:-ExplicitGCInvokesConcurrent jdk.jfr.event.gc.collection.TestSystemGC false\n+ *\/\n+public class TestSystemGC {\n+    public static void main(String[] args) throws Exception {\n+        boolean concurrent = Boolean.valueOf(args[0]);\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.SystemGC);\n+            recording.start();\n+\n+            \/\/ Trigger 3 System GC\n+            System.gc();\n+            ManagementFactory.getMemoryMXBean().gc();\n+            Runtime.getRuntime().gc();\n+\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            System.out.println(events);\n+\n+            Asserts.assertEquals(3, events.size(), \"Expected 3 SystemGC events\");\n+\n+            RecordedEvent event1 = events.get(0);\n+            Events.assertFrame(event1, System.class, \"gc\");\n+            Events.assertEventThread(event1, Thread.currentThread());\n+            Events.assertField(event1, \"invokedConcurrent\").isEqual(concurrent);\n+\n+            RecordedEvent event2 = events.get(1);\n+            Events.assertFrame(event2, Runtime.class, \"gc\");\n+            Events.assertEventThread(event2, Thread.currentThread());\n+            Events.assertField(event1, \"invokedConcurrent\").isEqual(concurrent);\n+\n+            RecordedEvent event3 = events.get(2);\n+            \/\/ MemoryMXBean.class is an interface so can't assertFrame on it\n+            Events.assertEventThread(event3, Thread.currentThread());\n+            Events.assertField(event1, \"invokedConcurrent\").isEqual(concurrent);\n+        }\n+     }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestSystemGc.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -153,0 +153,1 @@\n+    public static final String SystemGC = PREFIX + \"SystemGC\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}