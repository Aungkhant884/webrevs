{"files":[{"patch":"@@ -7233,0 +7233,26 @@\n+\/\/ Float.isInfinite\n+instruct isIniniteF_reg_reg(iRegINoSp dst, fRegF src)\n+%{\n+  match(Set dst (IsInfiniteF src));\n+  format %{ \"isInfinite $dst, $src\" %}\n+  ins_encode %{\n+    __ fclass_s(as_Register($dst$$reg), as_FloatRegister($src$$reg));\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), 0b10000001);\n+    __ slt(as_Register($dst$$reg), zr, as_Register($dst$$reg));\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n+\n+\/\/ Double.isInfinite\n+instruct isInfiniteD_reg_reg(iRegINoSp dst, fRegD src)\n+%{\n+  match(Set dst (IsInfiniteD src));\n+  format %{ \"isInfinite $dst, $src\" %}\n+  ins_encode %{\n+    __ fclass_d(as_Register($dst$$reg), as_FloatRegister($src$$reg));\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), 0b10000001);\n+    __ slt(as_Register($dst$$reg), zr, as_Register($dst$$reg));\n+  %}\n+  ins_pipe(fp_dop_reg_reg_d);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-* @summary Test x86_64 intrinsics for Double methods isNaN, isFinite, isInfinite.\n-* @requires vm.cpu.features ~= \".*avx512dq.*\"\n+* @summary Test intrinsics for Double methods isNaN, isFinite, isInfinite.\n+* @requires vm.cpu.features ~= \".*avx512dq.*\" | os.arch == \"riscv64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestDoubleClassCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-* @summary Test x86_64 intrinsics for Float methods isNaN, isFinite, isInfinite.\n-* @requires vm.cpu.features ~= \".*avx512dq.*\"\n+* @summary Test intrinsics for Float methods isNaN, isFinite, isInfinite.\n+* @requires vm.cpu.features ~= \".*avx512dq.*\" | os.arch == \"riscv64\"\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestFloatClassCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}