{"files":[{"patch":"@@ -992,1 +992,2 @@\n-        st->print_cr(\"%s\", envvar);\n+        st->print(\"%s\", envvar);\n+        st->cr();\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,14 +134,0 @@\n-const char* outputStream::handle_simple_format(const char* format, va_list ap, size_t& len) {\n-  const char* str = nullptr;\n-  if (strchr(format, '%') == nullptr) {\n-      \/\/ constant format string\n-      str = format;\n-      len = strlen(str);\n-  } else if (format[0] == '%' && format[1] == 's' && format[2] == '\\0') {\n-      \/\/ trivial copy-through format string\n-      str = va_arg(ap, const char*);\n-      len = strlen(str);\n-  }\n-  return str;\n-}\n-\n@@ -150,7 +136,1 @@\n-  const char* str = nullptr;\n-  bool simple_format = true;\n-  str = handle_simple_format(format, ap, len);\n-  if (str == nullptr) {\n-    str = do_vsnprintf(_scratch, _scratch_len, format, ap, add_cr, len);\n-    simple_format = false;\n-  }\n+  const char* str = do_vsnprintf(_scratch, _scratch_len, format, ap, add_cr, len);\n@@ -158,3 +138,0 @@\n-  if (simple_format && add_cr) {\n-    cr();\n-  }\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-   const char* handle_simple_format(const char* format, va_list ap, size_t& len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,4 +29,0 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.compiler\n- *          java.management\n- *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n@@ -35,1 +31,0 @@\n-import java.io.BufferedReader;\n@@ -37,2 +32,0 @@\n-import java.io.FileInputStream;\n-import java.io.InputStreamReader;\n@@ -40,1 +33,0 @@\n-import java.util.Set;\n@@ -44,2 +36,0 @@\n-import jdk.test.lib.Platform;\n-import jdk.internal.misc.Unsafe;\n@@ -50,8 +40,2 @@\n-    private static final String cp_env = \"CLASSPATH\";\n-    private static final String end_path = \"end-path\";\n-\n-    private static class Crasher {\n-        public static void main(String[] args) {\n-            Unsafe.getUnsafe().putInt(0L, 0);\n-        }\n-    }\n+    private static final String classPathEnv = \"CLASSPATH\";\n+    private static final String endPath = \"end-path\";\n@@ -60,1 +44,1 @@\n-        OutputAnalyzer output = runCrasher(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+        OutputAnalyzer output = runCrasher().shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n@@ -66,1 +50,1 @@\n-    private static OutputAnalyzer runCrasher(String option) throws Exception {\n+    private static OutputAnalyzer runCrasher() throws Exception {\n@@ -68,2 +52,3 @@\n-            ProcessTools.createJavaProcessBuilder(\n-            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", option, Crasher.class.getName());\n+            ProcessTools.createJavaProcessBuilder(\"-XX:-CreateCoredumpOnCrash\",\n+                                                  \"-XX:ErrorHandlerTest=14\",\n+                                                  \"-XX:+ErrorFileToStdout\");\n@@ -73,2 +58,1 @@\n-        Set<String> keys = envMap.keySet();\n-        String cp = envMap.get(cp_env);\n+        String cp = envMap.get(classPathEnv);\n@@ -81,2 +65,2 @@\n-        cp += pathSep + end_path;\n-        envMap.put(cp_env, cp);\n+        cp += pathSep + endPath;\n+        envMap.put(classPathEnv, cp);\n@@ -88,21 +72,1 @@\n-        String hs_err_file = output.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-        System.out.println(\"    hs_err_file \" + hs_err_file);\n-        File f = new File(hs_err_file);\n-        String absPath = f.getAbsolutePath();\n-        if (!f.exists()) {\n-            throw new RuntimeException(\"hs err log missing at \" + absPath);\n-        }\n-\n-        String cp_line = null;\n-        try (\n-            \/\/ Locate the line begins with \"CLASSPATH\".\n-            FileInputStream fis = new FileInputStream(f);\n-            BufferedReader br = new BufferedReader(new InputStreamReader(fis))) {\n-            String line = null;\n-            while ((line = br.readLine()) != null) {\n-                if (line.startsWith(cp_env)) {\n-                    cp_line = line;\n-                    break;\n-                }\n-            }\n-        }\n+        String classPathLine = output.firstMatch(\"CLASSPATH=.*\");\n@@ -110,2 +74,2 @@\n-        if (cp_line == null) {\n-            throw new RuntimeException(\"CLASSPATH setting not found in hs err log: \" + absPath);\n+        if (classPathLine == null) {\n+            throw new RuntimeException(\"CLASSPATH setting not found in hs err log.\");\n@@ -115,2 +79,2 @@\n-        if (!cp_line.endsWith(end_path)) {\n-            throw new RuntimeException(\"CLASSPATH was truncated in the hs err log: \" + absPath);\n+        if (!classPathLine.endsWith(endPath)) {\n+            throw new RuntimeException(\"CLASSPATH was truncated in the hs err log.\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ClassPathEnvVar.java","additions":15,"deletions":51,"binary":false,"changes":66,"status":"modified"}]}