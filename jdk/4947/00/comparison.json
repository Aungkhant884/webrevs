{"files":[{"patch":"@@ -134,0 +134,14 @@\n+const char* outputStream::handle_simple_format(const char* format, va_list ap, size_t& len) {\n+  const char* str = nullptr;\n+  if (strchr(format, '%') == nullptr) {\n+      \/\/ constant format string\n+      str = format;\n+      len = strlen(str);\n+  } else if (format[0] == '%' && format[1] == 's' && format[2] == '\\0') {\n+      \/\/ trivial copy-through format string\n+      str = va_arg(ap, const char*);\n+      len = strlen(str);\n+  }\n+  return str;\n+}\n+\n@@ -136,1 +150,7 @@\n-  const char* str = do_vsnprintf(_scratch, _scratch_len, format, ap, add_cr, len);\n+  const char* str = nullptr;\n+  bool simple_format = true;\n+  str = handle_simple_format(format, ap, len);\n+  if (str == nullptr) {\n+    str = do_vsnprintf(_scratch, _scratch_len, format, ap, add_cr, len);\n+    simple_format = false;\n+  }\n@@ -138,0 +158,3 @@\n+  if (simple_format && add_cr) {\n+    cr();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+   const char* handle_simple_format(const char* format, va_list ap, size_t& len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271003\n+ * @summary CLASSPATH env variable setting should not be truncated in a hs err log.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run driver ClassPathEnvVar\n+ *\/\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.internal.misc.Unsafe;\n+\n+public class ClassPathEnvVar {\n+    private static final String pathSep = File.pathSeparator;\n+    private static final String sep = File.separator;\n+    private static final String cp_env = \"CLASSPATH\";\n+    private static final String end_path = \"end-path\";\n+\n+    private static class Crasher {\n+        public static void main(String[] args) {\n+            Unsafe.getUnsafe().putInt(0L, 0);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        OutputAnalyzer output = runCrasher(\"-XX:-CreateCoredumpOnCrash\").shouldContain(\"CreateCoredumpOnCrash turned off, no core file dumped\")\n+                                             .shouldNotHaveExitValue(0);\n+\n+        checkErrorLog(output);\n+\n+    }\n+    private static OutputAnalyzer runCrasher(String option) throws Exception {\n+        ProcessBuilder pb =\n+            ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx128m\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\", option, Crasher.class.getName());\n+\n+        \/\/ Obtain the CLASSPATH setting and expand it to more than 2000 chars.\n+        Map<String, String> envMap = pb.environment();\n+        Set<String> keys = envMap.keySet();\n+        String cp = envMap.get(cp_env);\n+        if (cp == null) {\n+            cp = \"this\" + sep + \"is\" + sep + \"dummy\" + sep + \"path\";\n+        }\n+        while (cp.length() < 2000) {\n+            cp += pathSep + cp;\n+        }\n+        cp += pathSep + end_path;\n+        envMap.put(cp_env, cp);\n+\n+        return new OutputAnalyzer(pb.start());\n+    }\n+\n+    private static void checkErrorLog(OutputAnalyzer output) throws Exception {\n+        String hs_err_file = output.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n+        System.out.println(\"    hs_err_file \" + hs_err_file);\n+        File f = new File(hs_err_file);\n+        String absPath = f.getAbsolutePath();\n+        if (!f.exists()) {\n+            throw new RuntimeException(\"hs err log missing at \" + absPath);\n+        }\n+\n+        String cp_line = null;\n+        try (\n+            \/\/ Locate the line begins with \"CLASSPATH\".\n+            FileInputStream fis = new FileInputStream(f);\n+            BufferedReader br = new BufferedReader(new InputStreamReader(fis))) {\n+            String line = null;\n+            while ((line = br.readLine()) != null) {\n+                if (line.startsWith(cp_env)) {\n+                    cp_line = line;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (cp_line == null) {\n+            throw new RuntimeException(\"CLASSPATH setting not found in hs err log: \" + absPath);\n+        }\n+\n+        \/\/ Check if the CLASSPATH line has been truncated.\n+        if (!cp_line.endsWith(end_path)) {\n+            throw new RuntimeException(\"CLASSPATH was truncated in the hs err log: \" + absPath);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ClassPathEnvVar.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}