{"files":[{"patch":"@@ -67,26 +67,0 @@\n-static void test_for_dead_c_heap_block(size_t sz, ssize_t offset) {\n-  if (!MemTracker::enabled()) {\n-    return;\n-  }\n-  char* c = NEW_C_HEAP_ARRAY(char, sz, mtTest);\n-  LOG_HERE(\"C-block starts \" PTR_FORMAT \", size \" SIZE_FORMAT \".\", p2i(c), sz);\n-  memset(c, 0, sz);\n-  \/\/ We cannot just free the allocation to try dead block printing, since the memory\n-  \/\/ may be immediately reused by concurrent code. Instead, we mark the block as dead\n-  \/\/ manually, and revert that before freeing it.\n-  MallocHeader* const hdr = MallocHeader::resolve_checked(c);\n-  hdr->mark_block_as_dead();\n-\n-  const char* expected_string = \"into dead malloced block\";\n-  if (offset < 0) {\n-    expected_string = \"into header of dead malloced block\";\n-  } else if ((size_t)offset >= sz) {\n-    expected_string = \"just outside of dead malloced block\";\n-  }\n-\n-  test_pointer(c + offset, true, expected_string);\n-\n-  hdr->revive();\n-  FREE_C_HEAP_ARRAY(char, c);\n-}\n-\n@@ -101,10 +75,0 @@\n-#ifdef LINUX\n-TEST_VM(NMT, location_printing_cheap_dead_1) { test_for_dead_c_heap_block(2 * K, 0); }              \/\/ start of payload\n-TEST_VM(NMT, location_printing_cheap_dead_2) { test_for_dead_c_heap_block(2 * K, -7); }             \/\/ into header\n-TEST_VM(NMT, location_printing_cheap_dead_3) { test_for_dead_c_heap_block(2 * K, K + 1); }          \/\/ into payload\n-TEST_VM(NMT, location_printing_cheap_dead_4) { test_for_dead_c_heap_block(2 * K, K + 2); }          \/\/ into payload (check for even\/odd errors)\n-TEST_VM(NMT, location_printing_cheap_dead_5) { test_for_dead_c_heap_block(2 * K + 1, 2 * K + 2); }  \/\/ just outside payload\n-TEST_VM(NMT, location_printing_cheap_dead_6) { test_for_dead_c_heap_block(4, 0); }                  \/\/ into a very small block\n-TEST_VM(NMT, location_printing_cheap_dead_7) { test_for_dead_c_heap_block(4, 4); }                  \/\/ just outside a very small block\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"}]}