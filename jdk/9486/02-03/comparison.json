{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import sun.nio.ch.IOStatus;\n+\n+\/**\n+ * Implements a {@code clone) method for use by {@code UnixCopyFile} on AIX.\n+ *\/\n+final class CloneFile {\n+    private CloneFile() { }\n+\n+    \/**\n+     * Clones the file whose path name is {@code src} to that whose path\n+     * name is {@code dst} using a platform-specific system call.\n+     *\n+     * @implSpec\n+     * The implementation in this class always returns\n+     * {@code IOStatus.UNSUPPORTED}.\n+     *\n+     * @param src the path of the source file\n+     * @param dst the path of the desintation file (clone)\n+     * @param followLinks whether to follow links\n+     *\n+     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n+     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n+     *         not supported on this platform\n+     *\/\n+    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+        throws IOException {\n+        return IOStatus.UNSUPPORTED;\n+    }\n+}\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/CloneFile.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import sun.nio.ch.IOStatus;\n+import static sun.nio.fs.UnixConstants.*;\n+import static sun.nio.fs.UnixNativeDispatcher.*;\n+\n+\/**\n+ * Implements a {@code clone) method for use by {@code UnixCopyFile} on Linux.\n+ *\/\n+final class CloneFile {\n+    private CloneFile() { }\n+\n+    private static UnixException catEx(UnixException x, UnixException y) {\n+        assert x != null || y != null;\n+        UnixException ue = y;\n+        if (x != null) {\n+            ue = x;\n+            if (y != null) {\n+                ue.addSuppressed(y);\n+            }\n+        }\n+        return ue;\n+    }\n+\n+    \/**\n+     * Clones the file whose path name is {@code src} to that whose path\n+     * name is {@code dst} using the {@code ioctl} system call with the\n+     * {@code FICLONE} request code.\n+     *\n+     * @param src the path of the source file\n+     * @param dst the path of the desintation file (clone)\n+     * @param followLinks whether to follow links\n+     *\n+     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n+     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n+     *         not supported on this platform\n+     *\/\n+    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+        throws IOException {\n+        int srcFD = 0;\n+        try {\n+            srcFD = open(src, O_RDONLY, 0);\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(src);\n+            return IOStatus.THROWN;\n+        }\n+\n+        int dstFD = 0;\n+        try {\n+            dstFD = open(dst, O_CREAT | O_WRONLY, 0666);\n+        } catch (UnixException x) {\n+            try {\n+                close(srcFD);\n+            } catch (UnixException y) {\n+                catEx(x, y).rethrowAsIOException(src, dst);\n+                return IOStatus.THROWN;\n+            }\n+            x.rethrowAsIOException(dst);\n+            return IOStatus.THROWN;\n+        }\n+\n+        UnixException ioctlEx = null;\n+        int result;\n+        try {\n+            result = LinuxNativeDispatcher.ioctl_ficlone(dstFD, srcFD);\n+        } catch (UnixException x) {\n+            switch (x.errno()) {\n+                case EINVAL:\n+                    result = IOStatus.UNSUPPORTED;\n+                    break;\n+                case EPERM:\n+                    ioctlEx = x;\n+                    result = IOStatus.THROWN;\n+                    break;\n+                default:\n+                    result = IOStatus.UNSUPPORTED_CASE;\n+                    break;\n+            }\n+        }\n+\n+        UnixException ue = ioctlEx;\n+        UnixPath s = null;\n+        UnixPath d = null;\n+\n+        try {\n+            close(dstFD);\n+        } catch (UnixException x) {\n+            ue = catEx(ue, x);\n+            d = dst;\n+        }\n+\n+        \/\/ delete dst to avoid later exception in Java layer\n+        if (result != 0) {\n+            try {\n+                unlink(dst);\n+            } catch (UnixException x) {\n+                ue = catEx(ue, x);\n+                d = dst;\n+            }\n+        }\n+\n+        try {\n+            close(srcFD);\n+        } catch (UnixException x) {\n+            ue = catEx(ue, x);\n+            s = src;\n+        }\n+\n+        if (ue != null) {\n+            if (ioctlEx != null)\n+                throw new IOException(ioctlEx.errorString(), ioctlEx);\n+            else if (s != null && d != null)\n+                ue.rethrowAsIOException(s, d);\n+            else\n+                ue.rethrowAsIOException(s != null ? s : d);\n+            return IOStatus.THROWN;\n+        }\n+\n+        return result;\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/CloneFile.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -32,3 +31,1 @@\n-import jdk.internal.misc.Blocker;\n-import jdk.internal.util.StaticProperty;\n-import sun.nio.ch.IOStatus;\n+import java.io.IOException;\n@@ -36,2 +33,1 @@\n-import static sun.nio.fs.LinuxNativeDispatcher.*;\n-import static sun.nio.fs.UnixConstants.*;\n+import jdk.internal.util.StaticProperty;\n@@ -116,84 +112,0 @@\n-\n-    @Override\n-    public int clone(Path source, Path target, boolean noFollowLinks)\n-        throws IOException {\n-        UnixPath src = UnixPath.toUnixPath(source);\n-        int srcFD = 0;\n-        try {\n-            srcFD = open(src, O_RDONLY, 0);\n-        } catch (UnixException x) {\n-            x.rethrowAsIOException(src);\n-            return IOStatus.THROWN;\n-        }\n-\n-        UnixPath dst = UnixPath.toUnixPath(target);\n-        int dstFD = 0;\n-        try {\n-            dstFD = open(dst, O_CREAT | O_WRONLY, 0666);\n-        } catch (UnixException x) {\n-            try {\n-                close(srcFD);\n-            } catch (UnixException y) {\n-                x.addSuppressed(y);\n-                x.rethrowAsIOException(src, dst);\n-                return IOStatus.THROWN;\n-            }\n-            x.rethrowAsIOException(dst);\n-            return IOStatus.THROWN;\n-        }\n-\n-        try {\n-            return ioctl_ficlone(dstFD, srcFD);\n-        } catch (UnixException x) {\n-            try {\n-                close(dstFD);\n-                dstFD = 0;\n-            } catch (UnixException y) {\n-                x.rethrowAsIOException(dst);\n-                return IOStatus.THROWN;\n-            }\n-            \/\/ delete dst to avoid later exception in Java layer\n-            try {\n-                unlink(dst);\n-            } catch (UnixException y) {\n-                x.rethrowAsIOException(dst);\n-                return IOStatus.THROWN;\n-            }\n-            switch (x.errno()) {\n-                case EINVAL:\n-                    return IOStatus.UNSUPPORTED;\n-                case EPERM:\n-                    x.rethrowAsIOException(src, dst);\n-                    return IOStatus.THROWN;\n-                default:\n-                    return IOStatus.UNSUPPORTED_CASE;\n-            }\n-        } finally {\n-            UnixException ue = null;\n-            UnixPath s = null;\n-            UnixPath d = null;\n-            if (dstFD != 0) {\n-                try {\n-                    close(dstFD);\n-                } catch (UnixException x) {\n-                    ue = x;\n-                    d = dst;\n-                }\n-            }\n-            try {\n-                close(srcFD);\n-            } catch (UnixException x) {\n-                if (ue != null)\n-                    ue.addSuppressed(x);\n-                else\n-                    ue = x;\n-                s = src;\n-            }\n-            if (ue != null) {\n-                if (s != null && d != null)\n-                    ue.rethrowAsIOException(s, d);\n-                else\n-                    ue.rethrowAsIOException(s != null ? s : d);\n-            }\n-        }\n-    }\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystemProvider.java","additions":3,"deletions":91,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import sun.nio.ch.IOStatus;\n-import static sun.nio.fs.UnixConstants.*;\n@@ -77,22 +75,0 @@\n-\n-    @Override\n-    public int clone(Path source, Path target, boolean followLinks)\n-        throws IOException {\n-        UnixPath src = UnixPath.toUnixPath(source);\n-        UnixPath dst = UnixPath.toUnixPath(target);\n-        int flags = followLinks ? 0 : CLONE_NOFOLLOW;\n-        try {\n-            return BsdNativeDispatcher.clonefile(src, dst, flags);\n-        } catch (UnixException x) {\n-            switch (x.errno()) {\n-                case ENOTSUP: \/\/ cloning not supported by filesystem\n-                    return IOStatus.UNSUPPORTED;\n-                case EXDEV:   \/\/ src and dst on different filesystems\n-                case ENOTDIR: \/\/ problematic path parameter(s)\n-                    return IOStatus.UNSUPPORTED_CASE;\n-                default:\n-                    x.rethrowAsIOException(src, dst);\n-                    return IOStatus.THROWN;\n-            }\n-        }\n-    }\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import sun.nio.ch.IOStatus;\n+import static sun.nio.fs.UnixConstants.*;\n+\n+\/**\n+ * Implements a {@code clone) method for use by {@code UnixCopyFile} on macOS.\n+ *\/\n+final class CloneFile {\n+    private CloneFile() { }\n+\n+    \/**\n+     * Clones the file whose path name is {@code src} to that whose path\n+     * name is {@code dst} using the {@code clonefile} system call.\n+     *\n+     * @param src the path of the source file\n+     * @param dst the path of the desintation file (clone)\n+     * @param followLinks whether to follow links\n+     *\n+     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n+     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n+     *         not supported on this platform\n+     *\/\n+    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+        throws IOException {\n+        int flags = followLinks ? 0 : CLONE_NOFOLLOW;\n+        try {\n+            return BsdNativeDispatcher.clonefile(src, dst, flags);\n+        } catch (UnixException x) {\n+            switch (x.errno()) {\n+                case ENOTSUP: \/\/ cloning not supported by filesystem\n+                    return IOStatus.UNSUPPORTED;\n+                case EXDEV:   \/\/ src and dst on different filesystems\n+                case ENOTDIR: \/\/ problematic path parameter(s)\n+                    return IOStatus.UNSUPPORTED_CASE;\n+                default:\n+                    x.rethrowAsIOException(src, dst);\n+                    return IOStatus.THROWN;\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/CloneFile.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -281,3 +281,1 @@\n-            UnixFileSystemProvider provider =\n-               (UnixFileSystemProvider)source.getFileSystem().provider();\n-            int res = provider.clone(source, target, flags.followLinks);\n+            int res = CloneFile.clone(source, target, flags.followLinks);\n@@ -732,4 +730,4 @@\n-     * @return 0 on success, UNAVAILABLE if the platform function would block,\n-     *         UNSUPPORTED_CASE if the call does not work with the given\n-     *         parameters, or UNSUPPORTED if direct copying is not supported\n-     *         on this platform\n+     * @return 0 on success, IOStatus.UNAVAILABLE if the platform function\n+     *         would block, IOStatus.UNSUPPORTED_CASE if the call does not\n+     *         work with the given parameters, or IOStatus.UNSUPPORTED if\n+     *         direct copying is not supported on this platform\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixCopyFile.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import sun.nio.ch.IOStatus;\n@@ -292,18 +291,0 @@\n-    \/**\n-     * Clones the file whose path name is {@code src} to that whose path\n-     * name is {@code dst} using a platform-specific system call. The\n-     * implementation in this class always returns IOStatus.UNSUPPORTED.\n-     *\n-     * @param src the path of the source file\n-     * @param dst the path of the desintation file (clone)\n-     * @param followLinks whether to follow links\n-     *\n-     * @return 0 on success, IOStatus.UNSUPPORTED if the call does not work with\n-     *         the given parameters, or IOStatus.UNSUPPORTED if cloning is not\n-     *         supported on this platform\n-     *\/\n-    public int clone(Path source, Path target, boolean followLinks)\n-        throws IOException {\n-        return IOStatus.UNSUPPORTED;\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"}]}