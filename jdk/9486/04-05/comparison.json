{"files":[{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.fs;\n-\n-import java.io.IOException;\n-import sun.nio.ch.IOStatus;\n-\n-\/**\n- * Implements a {@code clone) method for use by {@code UnixCopyFile} on AIX.\n- *\/\n-final class CloneFile {\n-    private CloneFile() { }\n-\n-    \/**\n-     * Clones the file whose path name is {@code src} to that whose path\n-     * name is {@code dst} using a platform-specific system call.\n-     *\n-     * @implSpec\n-     * The implementation in this class always returns\n-     * {@code IOStatus.UNSUPPORTED}.\n-     *\n-     * @param src the path of the source file\n-     * @param dst the path of the destination file (clone)\n-     * @param followLinks whether to follow links\n-     *\n-     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n-     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n-     *         not supported on this platform\n-     *\/\n-    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n-        throws IOException {\n-        return IOStatus.UNSUPPORTED;\n-    }\n-}\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/CloneFile.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -33,5 +33,4 @@\n-\/**\n- * Implements a {@code clone) method for use by {@code UnixCopyFile} on Linux.\n- *\/\n-final class CloneFile {\n-    private CloneFile() { }\n+final class LinuxCopyFile extends UnixCopyFile {\n+    LinuxCopyFile() {\n+        super();\n+    }\n@@ -64,1 +63,1 @@\n-    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+    protected int clone(UnixPath src, UnixPath dst, boolean followLinks)\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxCopyFile.java","additions":5,"deletions":6,"binary":false,"changes":11,"previous_filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/CloneFile.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,11 @@\n+    @Override\n+    protected UnixCopyFile fileCopier() {\n+        UnixCopyFile copier = unixCopyFile;\n+        if (copier == null) {\n+            \/\/ OK if two or more threads create a LinuxCopyFile instance\n+            copier = new LinuxCopyFile();\n+            unixCopyFile = copier;\n+        }\n+        return copier;\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystemProvider.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,5 +32,4 @@\n-\/**\n- * Implements a {@code clone) method for use by {@code UnixCopyFile} on macOS.\n- *\/\n-final class CloneFile {\n-    private CloneFile() { }\n+final class BsdCopyFile extends UnixCopyFile {\n+    BsdCopyFile() {\n+        super();\n+    }\n@@ -50,1 +49,2 @@\n-    static int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+    @Override\n+    protected int clone(UnixPath src, UnixPath dst, boolean followLinks)\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdCopyFile.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/CloneFile.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,11 @@\n+    @Override\n+    protected UnixCopyFile fileCopier() {\n+        UnixCopyFile copier = unixCopyFile;\n+        if (copier == null) {\n+            \/\/ OK if two or more threads create a BsdCopyFile instance\n+            copier = new BsdCopyFile();\n+            unixCopyFile = copier;\n+        }\n+        return copier;\n+    }\n+\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    private UnixCopyFile() {  }\n+    UnixCopyFile() {  }\n@@ -272,5 +272,5 @@\n-    private static void copyFile(UnixPath source,\n-                                 UnixFileAttributes attrs,\n-                                 UnixPath  target,\n-                                 Flags flags,\n-                                 long addressToPollForCancel)\n+    private void copyFile(UnixPath source,\n+                          UnixFileAttributes attrs,\n+                          UnixPath  target,\n+                          Flags flags,\n+                          long addressToPollForCancel)\n@@ -281,1 +281,1 @@\n-            int res = CloneFile.clone(source, target, flags.followLinks);\n+            int res = clone(source, target, flags.followLinks);\n@@ -484,1 +484,1 @@\n-    static void move(UnixPath source, UnixPath target, CopyOption... options)\n+    void move(UnixPath source, UnixPath target, CopyOption... options)\n@@ -618,0 +618,23 @@\n+\n+    \/**\n+     * Clones the file whose path name is {@code src} to that whose path\n+     * name is {@code dst} using a platform-specific system call.\n+     *\n+     * @implSpec\n+     * The implementation in this class always returns\n+     * {@code IOStatus.UNSUPPORTED}. This method should be overridden\n+     * on platforms which support file cloning.\n+     *\n+     * @param src the path of the source file\n+     * @param dst the path of the destination file (clone)\n+     * @param followLinks whether to follow links\n+     *\n+     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n+     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n+     *         not supported on this platform\n+     *\/\n+    protected int clone(UnixPath src, UnixPath dst, boolean followLinks)\n+        throws IOException {\n+        return IOStatus.UNSUPPORTED;\n+    }\n+\n@@ -619,3 +642,3 @@\n-    static void copy(final UnixPath source,\n-                     final UnixPath target,\n-                     CopyOption... options) throws IOException\n+    void copy(final UnixPath source,\n+              final UnixPath target,\n+              CopyOption... options) throws IOException\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixCopyFile.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -51,0 +51,14 @@\n+    protected static volatile UnixCopyFile unixCopyFile;\n+\n+    \/\/ this method should be overriden if the subclass requires a\n+    \/\/ subclass of UnixCopyFile which overrides any method(s)\n+    protected UnixCopyFile fileCopier() {\n+        UnixCopyFile copier = unixCopyFile;\n+        if (copier == null) {\n+            \/\/ OK if two or more threads create a UnixCopyFile instance\n+            copier = new UnixCopyFile();\n+            unixCopyFile = copier;\n+        }\n+        return copier;\n+    }\n+\n@@ -277,1 +291,1 @@\n-        UnixCopyFile.copy(UnixPath.toUnixPath(source),\n+        fileCopier().copy(UnixPath.toUnixPath(source),\n@@ -286,1 +300,1 @@\n-        UnixCopyFile.move(UnixPath.toUnixPath(source),\n+        fileCopier().move(UnixPath.toUnixPath(source),\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}