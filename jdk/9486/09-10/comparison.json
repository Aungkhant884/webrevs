{"files":[{"patch":"@@ -164,0 +164,2 @@\n+    private static native void init();\n+\n@@ -182,0 +184,5 @@\n+\n+    static {\n+        jdk.internal.loader.BootLoader.loadLibrary(\"nio\");\n+        init();\n+    }\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystem.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include <dlfcn.h>\n@@ -41,0 +42,4 @@\n+typedef ssize_t copy_file_range_func(int, loff_t*, int, loff_t*, size_t,\n+                                     unsigned int);\n+static copy_file_range_func* my_copy_file_range_func = NULL;\n+\n@@ -55,0 +60,8 @@\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_LinuxFileSystem_init\n+    (JNIEnv* env, jclass this)\n+{\n+    my_copy_file_range_func =\n+        (copy_file_range_func*) dlsym(RTLD_DEFAULT, \"copy_file_range\");\n+}\n+\n@@ -75,0 +88,1 @@\n+\n@@ -76,0 +90,25 @@\n+    if (my_copy_file_range_func != NULL) {\n+        do {\n+            RESTARTABLE(my_copy_file_range_func(src, NULL, dst, NULL, count, 0),\n+                                                bytes_sent);\n+            if (bytes_sent < 0) {\n+                switch (errno) {\n+                    case EINVAL:\n+                    case ENOSYS:\n+                    case EXDEV:\n+                        \/\/ ignore and try sendfile()\n+                        break;\n+                    default:\n+                        JNU_ThrowIOExceptionWithLastError(env, \"Copy failed\");\n+                        return IOS_THROWN;\n+                }\n+            }\n+            if (cancel != NULL && *cancel != 0) {\n+                throwUnixException(env, ECANCELED);\n+                return IOS_THROWN;\n+            }\n+        } while (bytes_sent > 0);\n+\n+        if (bytes_sent == 0)\n+            return 0;\n+    }\n","filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxFileSystem.c","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import jdk.internal.misc.Blocker;\n@@ -34,1 +33,0 @@\n-import static sun.nio.fs.UnixNativeDispatcher.copyToNativeBuffer;\n@@ -119,14 +117,0 @@\n-    boolean supportsCloning() throws IOException {\n-        try (NativeBuffer fileBuffer = copyToNativeBuffer(file())) {\n-            long comp = Blocker.begin();\n-            try {\n-                return supportsCloning0(fileBuffer.address());\n-            } finally {\n-                Blocker.end(comp);\n-            }\n-        }\n-\n-    }\n-\n-    private static native boolean supportsCloning0(long fileAddress);\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileStore.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import sun.nio.ch.IOStatus;\n@@ -39,3 +38,0 @@\n-import static sun.nio.fs.UnixConstants.*;\n-import static sun.nio.fs.UnixNativeDispatcher.*;\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,20 +64,0 @@\n-    \/**\n-     * int clonefile(const char * src, const char * dst, int flags);\n-     *\/\n-    static int clonefile(UnixPath src, UnixPath dst, int flags)\n-        throws UnixException\n-    {\n-        try (NativeBuffer srcBuffer = copyToNativeBuffer(src);\n-            NativeBuffer dstBuffer = copyToNativeBuffer(dst)) {\n-            long comp = Blocker.begin();\n-            try {\n-                return clonefile0(srcBuffer.address(), dstBuffer.address(),\n-                                  flags);\n-            } finally {\n-                Blocker.end(comp);\n-            }\n-        }\n-    }\n-    private static native int clonefile0(long srcAddress, long dstAddress,\n-                                         int flags);\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jlong.h\"\n-\n-#include \"nio.h\"\n-\n-#include <stdlib.h>\n-#include <strings.h>\n-#include <unistd.h>\n-#include <errno.h>\n-#include <sys\/attr.h>\n-\n-#include \"sun_nio_fs_BsdFileStore.h\"\n-\n-#define CAPABILITY(vinfo, cap) \\\n-        (((vinfo).valid[VOL_CAPABILITIES_INTERFACES]        & (cap)) && \\\n-         ((vinfo).capabilities[VOL_CAPABILITIES_INTERFACES] & (cap)))\n-\n-static void throwUnixException(JNIEnv* env, int errnum) {\n-    jobject x = JNU_NewObjectByName(env, \"sun\/nio\/fs\/UnixException\",\n-        \"(I)V\", errnum);\n-    if (x != NULL) {\n-        (*env)->Throw(env, x);\n-    }\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_sun_nio_fs_BsdFileStore_supportsCloning0(JNIEnv* env, jclass this,\n-    jlong fileAddress)\n-{\n-    const char* file = (const char*)jlong_to_ptr(fileAddress);\n-\n-    struct attrlist alist;\n-    bzero(&alist, sizeof(alist));\n-    alist.bitmapcount = ATTR_BIT_MAP_COUNT;\n-    alist.volattr     = ATTR_VOL_INFO | ATTR_VOL_CAPABILITIES;\n-\n-    struct volAttrsBuf {\n-        u_int32_t length;\n-        vol_capabilities_attr_t capabilities;\n-    } __attribute__((aligned(4), packed));\n-    struct volAttrsBuf volAttrs;\n-    bzero(&volAttrs, sizeof(volAttrs));\n-\n-    \/\/ ignore any error in getattrlist\n-    if (getattrlist(file, &alist, &volAttrs, sizeof(volAttrs), 0) == 0) {\n-        vol_capabilities_attr_t volCaps = volAttrs.capabilities;\n-        int supportsAttrList = CAPABILITY(volCaps, VOL_CAP_INT_ATTRLIST);\n-        if (supportsAttrList) {\n-            return CAPABILITY(volCaps, VOL_CAP_INT_CLONE) != 0 ?\n-                JNI_TRUE : JNI_FALSE;\n-        }\n-    }\n-\n-    \/\/ return false if getattrlist fails\n-    return JNI_FALSE;\n-}\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdFileStore.c","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -45,2 +45,0 @@\n-#include <sys\/attr.h>\n-#include <sys\/clonefile.h>\n@@ -230,16 +228,0 @@\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_fs_BsdNativeDispatcher_clonefile0(JNIEnv* env, jclass this,\n-    jlong srcAddress, jlong dstAddress, jint flags)\n-{\n-    const char* src = (const char*)jlong_to_ptr(srcAddress);\n-    const char* dst = (const char*)jlong_to_ptr(dstAddress);\n-\n-    int ret = clonefile(src, dst, flags);\n-    if (ret != 0) {\n-        throwUnixException(env, errno);\n-        return ret;\n-    }\n-\n-    return 0;\n-}\n-\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include <sys\/clonefile.h>\n@@ -137,4 +136,0 @@\n-#ifdef _ALLBSD_SOURCE\n-    static final int PREFIX_ENOTSUP = ENOTSUP;\n-#endif\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixConstants.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}