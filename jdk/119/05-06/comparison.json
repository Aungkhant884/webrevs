{"files":[{"patch":"@@ -83,1 +83,1 @@\n-      \/\/ (Note the 'list' of local variable updates is embedded in 'updates')\n+      \/\/ Note, the 'list' of local variable updates is embedded in 'updates'.\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,23 @@\n+class jvmtiDeferredLocalVariable : public CHeapObj<mtCompiler> {\n+\n+  private:\n+\n+    BasicType _type;\n+    jvalue    _value;\n+    int       _index;\n+\n+  public:\n+\n+    jvmtiDeferredLocalVariable(int index, BasicType type, jvalue value);\n+\n+    BasicType type(void)         { return _type; }\n+    int index(void)              { return _index; }\n+    jvalue value(void)           { return _value; }\n+\n+    \/\/ Only mutator is for value as only it can change\n+    void set_value(jvalue value) { _value = value; }\n+\n+    \/\/ For gc\n+    oop* oop_addr(void)          { return (oop*) &_value.l; }\n+};\n+\n@@ -38,1 +61,0 @@\n-class jvmtiDeferredLocalVariable;\n@@ -40,0 +62,1 @@\n+\n@@ -45,1 +68,1 @@\n-  Method* _method;\n+  Method*   _method;\n@@ -48,1 +71,1 @@\n-  int _vframe_id;\n+  int       _vframe_id;\n@@ -50,1 +73,1 @@\n-  bool _objects_are_deoptimized;\n+  bool      _objects_are_deoptimized;\n@@ -52,1 +75,1 @@\n-  void                              update_value(StackValueCollection* locals, BasicType type, int index, jvalue value);\n+  void      update_value(StackValueCollection* locals, BasicType type, int index, jvalue value);\n@@ -54,1 +77,1 @@\n-  void                              set_value_at(int idx, BasicType typ, jvalue val);\n+  void      set_value_at(int idx, BasicType typ, jvalue val);\n@@ -58,5 +81,5 @@\n-  Method*                           method()         const  { return _method; }\n-  int                               bci()            const  { return _bci; }\n-  intptr_t*                         id()             const  { return _id; }\n-  int                               vframe_id()      const  { return _vframe_id; }\n-  bool                              objects_are_deoptimized() const { return _objects_are_deoptimized; }\n+  Method*   method()                  const { return _method; }\n+  int       bci()                     const { return _bci; }\n+  intptr_t* id()                      const { return _id; }\n+  int       vframe_id()               const { return _vframe_id; }\n+  bool      objects_are_deoptimized() const { return _objects_are_deoptimized; }\n@@ -64,4 +87,4 @@\n-  void                              update_locals(StackValueCollection* locals);\n-  void                              update_stack(StackValueCollection* locals);\n-  void                              update_monitors(GrowableArray<MonitorInfo*>* monitors);\n-  void                              set_objs_are_deoptimized() { _objects_are_deoptimized = true; }\n+  void      update_locals(StackValueCollection* locals);\n+  void      update_stack(StackValueCollection* locals);\n+  void      update_monitors(GrowableArray<MonitorInfo*>* monitors);\n+  void      set_objs_are_deoptimized()      { _objects_are_deoptimized = true; }\n@@ -70,1 +93,2 @@\n-  bool                              matches(const vframe* vf);\n+  bool      matches(const vframe* vf);\n+\n@@ -72,1 +96,2 @@\n-  bool                              matches(intptr_t* fr_id) { return id() == fr_id; }\n+  bool      matches(intptr_t* fr_id)        { return id() == fr_id; }\n+\n@@ -74,1 +99,1 @@\n-  void                              oops_do(OopClosure* f);\n+  void      oops_do(OopClosure* f);\n@@ -81,2 +106,0 @@\n-\n-\n@@ -85,22 +108,0 @@\n-class jvmtiDeferredLocalVariable : public CHeapObj<mtCompiler> {\n-  public:\n-\n-    jvmtiDeferredLocalVariable(int index, BasicType type, jvalue value);\n-\n-    BasicType type(void)                   { return _type; }\n-    int index(void)                        { return _index; }\n-    jvalue value(void)                     { return _value; }\n-    \/\/ Only mutator is for value as only it can change\n-    void set_value(jvalue value)           { _value = value; }\n-    \/\/ For gc\n-    oop* oop_addr(void)                    { return (oop*) &_value.l; }\n-\n-  private:\n-\n-    BasicType         _type;\n-    jvalue            _value;\n-    int               _index;\n-\n-};\n-\n-\n@@ -108,1 +109,1 @@\n-class jvmtiDeferredLocalVariableSet;\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.hpp","additions":44,"deletions":43,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-  , _eb(type == T_OBJECT, NULL, NULL)\n+  , _eb(false, NULL, NULL)\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,2 +49,0 @@\n-class jvmtiDeferredLocalVariableSet;\n-\n@@ -343,40 +341,1 @@\n-\n-        \/\/ locals\n-        GrowableArray<ScopeValue*>* scopeLocals = cvf->scope()->locals();\n-        StackValueCollection* locals = cvf->locals();\n-        if (locals != NULL) {\n-          for (int i2 = 0; i2 < locals->size(); i2++) {\n-            StackValue* var = locals->at(i2);\n-            if (var->type() == T_OBJECT && scopeLocals->at(i2)->is_object()) {\n-              jvalue val;\n-              val.l = cast_from_oop<jobject>(locals->at(i2)->get_obj()());\n-              cvf->update_local(T_OBJECT, i2, val);\n-            }\n-          }\n-        }\n-\n-        \/\/ expressions\n-        GrowableArray<ScopeValue*>* scopeExpressions = cvf->scope()->expressions();\n-        StackValueCollection* expressions = cvf->expressions();\n-        if (expressions != NULL) {\n-          for (int i2 = 0; i2 < expressions->size(); i2++) {\n-            StackValue* var = expressions->at(i2);\n-            if (var->type() == T_OBJECT && scopeExpressions->at(i2)->is_object()) {\n-              jvalue val;\n-              val.l = cast_from_oop<jobject>(expressions->at(i2)->get_obj()());\n-              cvf->update_stack(T_OBJECT, i2, val);\n-            }\n-          }\n-        }\n-\n-        \/\/ monitors\n-        GrowableArray<MonitorInfo*>* monitors = cvf->monitors();\n-        if (monitors != NULL) {\n-          for (int i2 = 0; i2 < monitors->length(); i2++) {\n-            if (monitors->at(i2)->eliminated()) {\n-              assert(!monitors->at(i2)->owner_is_scalar_replaced(),\n-                     \"reallocation failure, should not update\");\n-              cvf->update_monitor(i2, monitors->at(i2));\n-            }\n-          }\n-        }\n+        cvf->create_deferred_updates_after_object_deoptimization();\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.cpp","additions":1,"deletions":42,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+\n@@ -40,0 +41,1 @@\n+\n@@ -80,0 +82,1 @@\n+\n@@ -81,0 +84,1 @@\n+\n@@ -93,0 +97,1 @@\n+\n@@ -94,0 +99,1 @@\n+\n@@ -97,1 +103,1 @@\n-  \/\/ A java thread was added to the list of threads\n+  \/\/ A java thread was added to the list of threads.\n@@ -99,1 +105,2 @@\n-  \/\/ A java thread was removed from the list of threads\n+\n+  \/\/ A java thread was removed from the list of threads.\n@@ -103,1 +110,1 @@\n-  \/\/ Returns true iff objects were reallocated and relocked because of access through JVMTI\n+  \/\/ Returns true iff objects were reallocated and relocked because of access through JVMTI.\n@@ -119,0 +126,1 @@\n+\n@@ -121,0 +129,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -132,0 +132,50 @@\n+\/\/ After object deoptimization, that is object reallocation and relocking, we\n+\/\/ create deferred updates for all objects in scope. No new update will be\n+\/\/ created if a deferred update already exists. It is not easy to see how this\n+\/\/ is achieved: the deoptimized objects are in the arrays returned by locals(),\n+\/\/ expressions(), and monitors(). For each object in these arrays we create a\n+\/\/ deferred updated. If an update already exists, then it will override the\n+\/\/ corresponding deoptimized object returned in one of the arrays. So the\n+\/\/ original update is kept.\n+void compiledVFrame::create_deferred_updates_after_object_deoptimization() {\n+  \/\/ locals\n+  GrowableArray<ScopeValue*>* scopeLocals = scope()->locals();\n+  StackValueCollection* lcls = locals();\n+  if (lcls != NULL) {\n+    for (int i2 = 0; i2 < lcls->size(); i2++) {\n+      StackValue* var = lcls->at(i2);\n+      if (var->type() == T_OBJECT && scopeLocals->at(i2)->is_object()) {\n+        jvalue val;\n+        val.l = cast_from_oop<jobject>(lcls->at(i2)->get_obj()());\n+        update_local(T_OBJECT, i2, val);\n+      }\n+    }\n+  }\n+\n+  \/\/ expressions\n+  GrowableArray<ScopeValue*>* scopeExpressions = scope()->expressions();\n+  StackValueCollection* exprs = expressions();\n+  if (exprs != NULL) {\n+    for (int i2 = 0; i2 < exprs->size(); i2++) {\n+      StackValue* var = exprs->at(i2);\n+      if (var->type() == T_OBJECT && scopeExpressions->at(i2)->is_object()) {\n+        jvalue val;\n+        val.l = cast_from_oop<jobject>(exprs->at(i2)->get_obj()());\n+        update_stack(T_OBJECT, i2, val);\n+      }\n+    }\n+  }\n+\n+  \/\/ monitors\n+  GrowableArray<MonitorInfo*>* mtrs = monitors();\n+  if (mtrs != NULL) {\n+    for (int i2 = 0; i2 < mtrs->length(); i2++) {\n+      if (mtrs->at(i2)->eliminated()) {\n+        assert(!mtrs->at(i2)->owner_is_scalar_replaced(),\n+               \"reallocation failure, should not update\");\n+        update_monitor(i2, mtrs->at(i2));\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/vframe_hp.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+\n+  friend class EscapeBarrier;\n+\n@@ -58,0 +61,5 @@\n+  \/\/ After object deoptimization, that is object reallocation and relocking, we\n+  \/\/ create deferred updates for all objects in scope. No new update will be\n+  \/\/ created if a deferred update already exists.\n+  void create_deferred_updates_after_object_deoptimization();\n+\n","filename":"src\/hotspot\/share\/runtime\/vframe_hp.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}