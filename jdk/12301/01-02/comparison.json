{"files":[{"patch":"@@ -911,1 +911,1 @@\n-                if (ax >= 0x3ff0_0000)               \/* x <= -1.0 *\/\n+                if (ax >= 0x3ff0_0000) {             \/* x <= -1.0 *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/FdLibm.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,5 +238,4 @@\n-        \/\/ ... and near 1.0 ...\n-        x = 1.0;\n-        failures += testRange(x, Math.ulp(x), 1000);\n-        x = Math.nextDown(1.0);\n-        failures += testRange(x, -Math.ulp(x), 1000);\n+         double[] conditionalPoints = {\n+              1.0,\n+             -0x1.0p-29,\n+              0x1.0p-29,\n@@ -244,5 +243,15 @@\n-        \/\/ ... and near 2^-29 ...\n-        x = 0x1.0p-29;\n-        failures += testRange(x, Math.ulp(x), 1000);\n-        x = Math.nextDown(1.0);\n-        failures += testRange(x, -Math.ulp(x), 1000);\n+             -0x1.0p-54,\n+              0x1.0p-54,\n+\n+              -0.2930,\n+              -0.2929,\n+              -0.2928,\n+\n+               0.41421,\n+               0.41422,\n+               0.41423,\n+         };\n+\n+         for (double testPoint : conditionalPoints) {\n+             failures += testRangeMidpoint(testPoint, Math.ulp(testPoint), 1000);\n+         }\n@@ -269,0 +278,9 @@\n+\n+    private static int testRangeMidpoint(double midpoint, double increment, int count) {\n+        int failures = 0;\n+        double x = midpoint - increment*(count \/ 2) ;\n+        for (int i = 0; i < count; i++, x += increment) {\n+            failures += testLog1pCase(x, FdlibmTranslit.log1p(x));\n+        }\n+        return failures;\n+    }\n","filename":"test\/jdk\/java\/lang\/StrictMath\/Log1pTests.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"}]}