{"files":[{"patch":"@@ -29,0 +29,3 @@\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -31,0 +34,1 @@\n+import java.util.stream.Stream;\n@@ -32,1 +36,0 @@\n-import java.net.URL;\n@@ -99,0 +102,1 @@\n+        String extraPropDir, extraPropFile = null;\n@@ -107,0 +111,1 @@\n+        extraPropDir = props.getProperty(\"security.propertiesDir\");\n@@ -111,2 +116,9 @@\n-            String extraPropFile = System.getProperty\n-                    (\"java.security.properties\");\n+            String propDir = System.getProperty(\"java.security.propertiesDir\");\n+            \/\/ Command-line property directories take precedence over\n+            \/\/ those in java.security. This can also be used to disable\n+            \/\/ the property directory if set to the empty string.\n+            if (propDir != null) {\n+                extraPropDir = propDir;\n+            }\n+\n+            extraPropFile = System.getProperty(\"java.security.properties\");\n@@ -117,0 +129,26 @@\n+        }\n+\n+        if (extraPropDir != null && !extraPropDir.isBlank()) {\n+            if (sdebug != null ) {\n+                sdebug.println(\"searching for property files in \" + extraPropDir);\n+            }\n+            Stream<Path> stream = null;\n+            try {\n+                extraPropDir = PropertyExpander.expand(extraPropDir);\n+                stream = Files.find(Path.of(extraPropDir), Integer.MAX_VALUE,\n+                                    ((path, attrs) -> attrs.isRegularFile()));\n+                stream.forEach((file) -> loadProps(null, file.toString(), false));\n+            } catch (IOException | PropertyExpander.ExpandException e) {\n+                if (sdebug != null) {\n+                    sdebug.println(\"unable to load security properties from \" +\n+                                   extraPropDir);\n+                    e.printStackTrace();\n+                }\n+            } finally {\n+                if (stream != null) {\n+                    stream.close();\n+                }\n+            }\n+        }\n+\n+        if (extraPropFile != null) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -14,0 +14,17 @@\n+# A directory tree of such property files may also be specified from\n+# the command line via the system property\n+#\n+#    -Djava.security.propertiesDir=<PATH>\n+#\n+# Each file found within this tree is appended, as with the single file\n+# above. If both properties are specified, all properties found in\n+# the directory, plus those in the single file, will be appended. The\n+# overall effect is thus as if the single file was present in the\n+# directory.\n+#\n+# A directory may also be specified permanently in this file using\n+# the security.propertiesDir property. Any directory specified on\n+# the command line takes precedence over the directory listed in this\n+# file. Using an empty value on the command line allows a directory\n+# specified in this file to be disabled.\n+#\n@@ -19,1 +36,1 @@\n-# properties file.\n+# properties file and any properties in a specified directory.\n@@ -21,1 +38,1 @@\n-# To disable the ability to specify an additional properties file from\n+# To disable the ability to specify additional properties from\n@@ -335,0 +352,6 @@\n+#\n+# Determines whether this properties file will be supplemented\n+# by additional property files found in the given directory\n+#\n+security.propertiesDir=\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n- * @summary Throw error if default java.security file is missing\n- * @bug 8155246 8292297 8292177\n+ * @summary Exercise use, absence and extension of java.security\n+ * @bug 8155246 8292297 8292177 8309330\n@@ -55,0 +55,1 @@\n+        Path secPropDir = Path.of(\".\/jdk-8309330-tmpdir\");\n@@ -59,0 +60,2 @@\n+        Path javaSecurity = Path.of(copyJdkDir.toString(), \"conf\",\n+                                    \"security\",\"java.security\");\n@@ -65,0 +68,9 @@\n+            if (\"propDir\".equals(args[0])) {\n+                System.out.println(\"testProp3=\" + Security.getProperty(\"testProp3\"));\n+            }\n+            if (\"propDirDisabled\".equals(args[0])) {\n+                \/\/ In this configuration, the directory properties should not be present\n+                if (Security.getProperty(\"testProp3\") != null) {\n+                    System.exit(1);\n+                }\n+            }\n@@ -67,0 +79,1 @@\n+            Files.createDirectory(secPropDir);\n@@ -72,0 +85,1 @@\n+            populateSecPropDir(secPropDir);\n@@ -95,0 +109,39 @@\n+            \/\/ test JDK launch with customized properties dir on the command line\n+            exerciseSecurity(0, \"testProp3=cherry\",\n+                    copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"-Djava.security.propertiesDir=\" + secPropDir.toString(),\n+                    \"ConfigFileTest\", \"propDir\");\n+\n+            \/\/ enable properties directory in java.security\n+            Files.writeString(javaSecurity,\n+                              \"security.propertiesDir=\" + secPropDir.toAbsolutePath().toString(),\n+                              StandardOpenOption.APPEND);\n+\n+            \/\/ test JDK launch with customized properties dir in java.security\n+            exerciseSecurity(0, \"testProp3=cherry\",\n+                    copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"ConfigFileTest\", \"propDir\");\n+\n+            \/\/ test JDK launch with customized properties dir in java.security disabled\n+            exerciseSecurity(0, \"SUN version\",\n+                    copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"-Djava.security.propertiesDir=\",\n+                    \"ConfigFileTest\", \"propDirDisabled\");\n+\n+            \/\/ test JDK launch with customized properties file overriding properties dir\n+            exerciseSecurity(0, \"NumProviders: 6\",\n+                    copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"-Djava.security.properties==file:\/\/\/\" + extraPropsFile,\n+                    \"ConfigFileTest\", \"propDirDisabled\");\n+\n+            \/\/ test JDK launch with customized properties file appended to properties dir\n+            exerciseSecurity(0, \"testProp3=cherry\",\n+                    copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"-Djava.security.properties=file:\/\/\/\" + extraPropsFile,\n+                    \"ConfigFileTest\", \"propDir\");\n+\n@@ -96,2 +149,1 @@\n-            Files.delete(Path.of(copyJdkDir.toString(), \"conf\",\n-                    \"security\",\"java.security\"));\n+            Files.delete(javaSecurity);\n@@ -150,0 +202,8 @@\n+\n+    private static void populateSecPropDir(Path dir) throws Exception {\n+        Files.writeString(dir.resolve(\"testFile1\"), \"testProp1=apple\");\n+        Files.writeString(dir.resolve(\"testFile2\"), \"testProp2=banana\");\n+        Path extraDir = dir.resolve(\"extra\");\n+        Files.createDirectory(extraDir);\n+        Files.writeString(extraDir.resolve(\"testFile3\"), \"testProp3=cherry\");\n+    }\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":64,"deletions":4,"binary":false,"changes":68,"status":"modified"}]}