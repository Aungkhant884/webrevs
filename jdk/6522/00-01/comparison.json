{"files":[{"patch":"@@ -340,0 +340,1 @@\n+    assert(!is_bottom_frame || !(caller->is_compiled_caller() && addr >= caller->unextended_sp()), \"overwriting caller frame!\");\n@@ -378,0 +379,1 @@\n+    assert(!is_bottom_frame || !(caller->is_compiled_caller() && addr >= caller->unextended_sp()), \"overwriting caller frame!\");\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=default_gc\n+ * @bug 8277602\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @library \/test\/lib\n+ * @library ..\/\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   -Xbatch\n+ *   TestUpcallDeopt\n+ *\/\n+\n+import jdk.incubator.foreign.Addressable;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.NativeSymbol;\n+import jdk.incubator.foreign.SymbolLookup;\n+import jdk.incubator.foreign.MemoryAddress;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.lang.ref.Reference;\n+\n+import jdk.incubator.foreign.ResourceScope;\n+import sun.hotspot.WhiteBox;\n+\n+import static java.lang.invoke.MethodHandles.lookup;\n+\n+public class TestUpcallDeopt extends NativeTestHelper {\n+    static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static final CLinker linker = CLinker.systemCLinker();\n+\n+    static final MethodHandle MH_foo;\n+    static final MethodHandle MH_m;\n+\n+    static {\n+        try {\n+            System.loadLibrary(\"UpcallDeopt\");\n+            SymbolLookup lookup = SymbolLookup.loaderLookup();\n+            MH_foo = linker.downcallHandle(\n+                    lookup.lookup(\"foo\").orElseThrow(),\n+                    FunctionDescriptor.ofVoid(C_POINTER, C_INT, C_INT, C_INT, C_INT));\n+            MH_m = lookup().findStatic(TestUpcallDeopt.class, \"m\",\n+                    MethodType.methodType(void.class, int.class, int.class, int.class, int.class));\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static boolean armed;\n+\n+    \/\/ we need to deoptimize through an uncommon trap in the callee of the optimized upcall stub\n+    \/\/ that is created when calling upcallStub below\n+    public static void main(String[] args) throws Throwable {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            NativeSymbol stub = linker.upcallStub(MH_m, FunctionDescriptor.ofVoid(C_INT, C_INT, C_INT, C_INT), scope);\n+            armed = false;\n+            for (int i = 0; i < 20_000; i++) {\n+                payload(stub); \/\/ warmup\n+            }\n+\n+            armed = true;\n+            payload(stub); \/\/ test\n+        }\n+    }\n+\n+    static void payload(NativeSymbol cb) throws Throwable {\n+        MH_foo.invokeExact((Addressable) cb, 0, 1, 2, 3);\n+        Reference.reachabilityFence(cb); \/\/ keep oop alive across call\n+    }\n+\n+    \/\/ Takes a bunch of arguments, even though unused, to test\n+    \/\/ if the caller's frame is extended enough to spill these arguments.\n+    static void m(int a0, int a1, int a2, int a3) {\n+        if (armed) {\n+            \/\/ Trigger uncommon trap from this frame\n+            WB.verifyFrames(\/*log=*\/true, \/*updateRegisterMap=*\/true);\n+            WB.verifyFrames(\/*log=*\/true, \/*updateRegisterMap=*\/false); \/\/ triggers different code paths\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/upcalldeopt\/TestUpcallDeopt.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -24,2 +24,0 @@\n-#include <stdio.h>\n-\n@@ -32,2 +30,2 @@\n-EXPORT void foo(void) {\n-    \/\/ do nothing\n+EXPORT void foo(void (*cb)(int, int, int, int), int a0, int a1, int a2, int a3) {\n+    cb(a0, a1, a2, a3);\n","filename":"test\/jdk\/java\/foreign\/upcalldeopt\/libUpcallDeopt.c","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/foreign\/loaderLookup\/lookup\/libFoo.c","status":"copied"}]}