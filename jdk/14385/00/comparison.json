{"files":[{"patch":"@@ -40,1 +40,1 @@\n-    return cp.getNameRefAt(index());\n+    return cp.getNameRefAt(index(), javaCode());\n@@ -46,1 +46,1 @@\n-    return cp.getSignatureRefAt(index());\n+    return cp.getSignatureRefAt(index(), javaCode());\n@@ -50,1 +50,1 @@\n-    return method().getConstants().getFieldRefAt(index());\n+    return method().getConstants().getFieldRefAt(index(), javaCode());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeGetPut.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    return cp.getNameRefAt(index());\n+    return cp.getNameRefAt(index(), adjustedInvokeCode());\n@@ -69,1 +69,1 @@\n-    return cp.getSignatureRefAt(index());\n+    return cp.getSignatureRefAt(index(), adjustedInvokeCode());\n@@ -73,1 +73,1 @@\n-    return method().getConstants().getMethodRefAt(index());\n+    return method().getConstants().getMethodRefAt(index(), adjustedInvokeCode());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeInvoke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import sun.jvm.hotspot.interpreter.Bytecodes;\n@@ -255,0 +256,25 @@\n+  \/\/ Translate index, which could be CPCache index or Indy index, to a constant pool index\n+  public int to_cp_index(int index, int code) {\n+    Assert.that(getCache() != null, \"'index' is a rewritten index so this class must have been rewritten\");\n+    switch(code) {\n+      case Bytecodes._invokedynamic:\n+        int poolIndex = getCache().getIndyEntryAt(index).getConstantPoolIndex();\n+        return poolIndex = invokeDynamicNameAndTypeRefIndexAt(poolIndex);\n+      case Bytecodes._getfield:\n+      case Bytecodes._getstatic:\n+      case Bytecodes._putfield:\n+      case Bytecodes._putstatic:\n+        \/\/ TODO: handle resolved field entries with new structure\n+        \/\/ i = ....\n+      case Bytecodes._invokeinterface:\n+      case Bytecodes._invokehandle:\n+      case Bytecodes._invokespecial:\n+      case Bytecodes._invokestatic:\n+      case Bytecodes._invokevirtual:\n+        \/\/ TODO: handle resolved method entries with new structure\n+      default:\n+        \/\/ change byte-ordering and go via cache\n+        return remapInstructionOperandFromCache(index);\n+    }\n+  }\n+\n@@ -266,2 +292,3 @@\n-  public Symbol getNameRefAt(int which) {\n-    return implGetNameRefAt(which, false);\n+  public Symbol getNameRefAt(int which, int code) {\n+    int name_index = getNameRefIndexAt(getNameAndTypeRefIndexAt(which, code));\n+    return getSymbolAt(name_index);\n@@ -270,2 +297,3 @@\n-  public Symbol uncachedGetNameRefAt(int which) {\n-    return implGetNameRefAt(which, true);\n+  public Symbol uncachedGetNameRefAt(int cp_index) {\n+    int name_index = getNameRefIndexAt(uncachedGetNameAndTypeRefIndexAt(cp_index));\n+    return getSymbolAt(name_index);\n@@ -274,2 +302,2 @@\n-  private Symbol implGetNameRefAt(int which, boolean uncached) {\n-    int signatureIndex = getNameRefIndexAt(implNameAndTypeRefIndexAt(which, uncached));\n+  public Symbol getSignatureRefAt(int which, int code) {\n+    int signatureIndex = getSignatureRefIndexAt(getNameAndTypeRefIndexAt(which, code));\n@@ -279,10 +307,2 @@\n-  public Symbol getSignatureRefAt(int which) {\n-    return implGetSignatureRefAt(which, false);\n-  }\n-\n-  public Symbol uncachedGetSignatureRefAt(int which) {\n-    return implGetSignatureRefAt(which, true);\n-  }\n-\n-  private Symbol implGetSignatureRefAt(int which, boolean uncached) {\n-    int signatureIndex = getSignatureRefIndexAt(implNameAndTypeRefIndexAt(which, uncached));\n+  public Symbol uncachedGetSignatureRefAt(int cp_index) {\n+    int signatureIndex = getSignatureRefIndexAt(uncachedGetNameAndTypeRefIndexAt(cp_index));\n@@ -310,18 +330,5 @@\n-  private int implNameAndTypeRefIndexAt(int which, boolean uncached) {\n-    int i = which;\n-    if (!uncached && getCache() != null) {\n-      if (isInvokedynamicIndex(which)) {\n-        \/\/ Invokedynamic index is index into resolved_references\n-        int poolIndex = getCache().getIndyEntryAt(which).getConstantPoolIndex();\n-        poolIndex = invokeDynamicNameAndTypeRefIndexAt(poolIndex);\n-        Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n-        return poolIndex;\n-      }\n-      \/\/ change byte-ordering and go via cache\n-      i = remapInstructionOperandFromCache(which);\n-    } else {\n-      if (getTagAt(which).isInvokeDynamic() || getTagAt(which).isDynamicConstant()) {\n-        int poolIndex = invokeDynamicNameAndTypeRefIndexAt(which);\n-        Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n-        return poolIndex;\n-      }\n+  public int uncachedGetNameAndTypeRefIndexAt(int cp_index) {\n+    if (getTagAt(cp_index).isInvokeDynamic() || getTagAt(cp_index).isDynamicConstant()) {\n+      int poolIndex = invokeDynamicNameAndTypeRefIndexAt(cp_index);\n+      Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n+      return poolIndex;\n@@ -331,1 +338,1 @@\n-    int refIndex = getIntAt(i);\n+    int refIndex = getIntAt(cp_index);\n@@ -335,0 +342,4 @@\n+  public int getNameAndTypeRefIndexAt(int index, int code) {\n+    return uncachedGetNameAndTypeRefIndexAt(to_cp_index(index, code));\n+  }\n+\n@@ -373,1 +384,1 @@\n-  public Method getMethodRefAt(int which) {\n+  public Method getMethodRefAt(int which, int code) {\n@@ -376,2 +387,2 @@\n-    Symbol name = getNameRefAt(which);\n-    Symbol sig  = getSignatureRefAt(which);\n+    Symbol name = getNameRefAt(which, code);\n+    Symbol sig  = getSignatureRefAt(which, code);\n@@ -386,1 +397,1 @@\n-  public Field getFieldRefAt(int which) {\n+  public Field getFieldRefAt(int which, int code) {\n@@ -389,2 +400,2 @@\n-    Symbol name = getNameRefAt(which);\n-    Symbol sig  = getSignatureRefAt(which);\n+    Symbol name = getNameRefAt(which, code);\n+    Symbol sig  = getSignatureRefAt(which, code);\n@@ -394,4 +405,0 @@\n-  public int getNameAndTypeRefIndexAt(int index) {\n-    return implNameAndTypeRefIndexAt(index, false);\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":52,"deletions":45,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -1377,4 +1377,4 @@\n-    case Bytecodes._getstatic:         doField(true,  true,  itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._putstatic:         doField(false, true,  itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._getfield:          doField(true,  false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._putfield:          doField(false, false, itr.getIndexU2Cpcache(), itr.bci()); break;\n+    case Bytecodes._getstatic:         doField(true,  true,  itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._putstatic:         doField(false, true,  itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._getfield:          doField(true,  false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._putfield:          doField(false, false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n@@ -1383,4 +1383,4 @@\n-    case Bytecodes._invokespecial:     doMethod(false, false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._invokestatic:      doMethod(true,  false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._invokedynamic:     doMethod(true,  false, itr.getIndexU4(),        itr.bci()); break;\n-    case Bytecodes._invokeinterface:   doMethod(false,  true, itr.getIndexU2Cpcache(), itr.bci()); break;\n+    case Bytecodes._invokespecial:     doMethod(false, false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._invokestatic:      doMethod(true,  false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._invokedynamic:     doMethod(true,  false, itr.getIndexU4(),        itr.bci(), itr.code()); break;\n+    case Bytecodes._invokeinterface:   doMethod(false,  true, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n@@ -1691,1 +1691,1 @@\n-  void  doField                             (boolean is_get, boolean is_static, int idx, int bci) {\n+  void  doField                             (boolean is_get, boolean is_static, int idx, int bci, int bc) {\n@@ -1694,1 +1694,1 @@\n-    int nameAndTypeIdx     = cp.getNameAndTypeRefIndexAt(idx);\n+    int nameAndTypeIdx     = cp.getNameAndTypeRefIndexAt(idx, bc);\n@@ -1727,1 +1727,1 @@\n-  void  doMethod                            (boolean is_static, boolean is_interface, int idx, int bci) {\n+  void  doMethod                            (boolean is_static, boolean is_interface, int idx, int bci, int bc) {\n@@ -1730,1 +1730,1 @@\n-    Symbol signature      = cp.getSignatureRefAt(idx);\n+    Symbol signature      = cp.getSignatureRefAt(idx, bc);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/GenerateOopMap.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}