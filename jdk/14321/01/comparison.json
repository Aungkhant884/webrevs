{"files":[{"patch":"@@ -32,1 +32,2 @@\n- * @compile -processor TestUnnamedClass -proc:only --enable-preview --release ${jdk.version} Anonymous.java\n+ * @compile         -processor TestUnnamedClass -proc:only --enable-preview --release ${jdk.version}             Anonymous.java\n+ * @compile\/process -processor TestUnnamedClass -proc:only --enable-preview --release ${jdk.version} -AclassOnly Anonymous\n@@ -35,1 +36,0 @@\n-\n@@ -46,10 +46,3 @@\n-\/*\n- * Ideally, this processor would test both the compile-time\n- * representation of an unnamed class starting from a source file as\n- * well as the representation starting from a class file. Currently,\n- * only the source file based view will be tested.\n- *\n- * For future work to test the class file based view, an additional jtreg directive like the following could\n- * be used:\n- *\n- * @compile\/process -processor TestUnnamedClass -proc:only Anonymous Nameless\n+\/**\n+ * Test annotation processing representation of unnamed classes\n+ * constructed from either a source file or a class file.\n@@ -58,0 +51,1 @@\n+@SupportedOptions(\"classOnly\")\n@@ -61,0 +55,1 @@\n+    private static int checkedClassesCount = 0;\n@@ -64,4 +59,2 @@\n-        if (round == 0) { \/\/ Check file from comamnd line\n-            checkRoots(roundEnv);\n-            generateUnnamed();\n-        }\n+        if (round == 0) {\n+            checkRoots(roundEnv); \/\/ Check any files from the comamnd line\n@@ -69,2 +62,12 @@\n-        if (!roundEnv.processingOver()) { \/\/ Test generated file(s)\n-            checkRoots(roundEnv);\n+            \/\/ Don't generate a file if testing already generated class\n+            if (!options.containsKey(\"classOnly\")) {\n+                generateUnnamed();\n+            }\n+        } else {\n+            if (!roundEnv.processingOver()) { \/\/ Test generated file(s)\n+                checkRoots(roundEnv);\n+            } else { \/\/ Should have checked at least one class before processing is over\n+                if (checkedClassesCount == 0) {\n+                    messager.printError(\"No unnamed classes checked.\");\n+                }\n+            }\n@@ -80,1 +83,0 @@\n-            System.out.println(\"Checking \" + type.getQualifiedName());\n@@ -132,0 +134,5 @@\n+        checkedClassesCount++;\n+        Name expectedName = unnamedClass.getSimpleName();\n+\n+        System.out.println(\"Checking \" + expectedName);\n+\n@@ -148,0 +155,5 @@\n+        Name binaryName = elements.getBinaryName(unnamedClass);\n+        if (!expectedName.equals(binaryName)) {\n+            messager.printError(\"Unnamed has unexpected binary name\" + binaryName + \".\", unnamedClass);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedClass.java","additions":31,"deletions":19,"binary":false,"changes":50,"status":"modified"}]}