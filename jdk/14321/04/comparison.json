{"files":[{"patch":"@@ -2734,3 +2734,6 @@\n-            if ((c.flags_field & SYNTHETIC) != 0 && c.isSubClass(syms.objectType.tsym, types)) {\n-                c.flags_field |= UNNAMED_CLASS;\n-            }\n+           if ((c.flags_field & SYNTHETIC) != 0 &&\n+               c.owner.kind == PCK &&\n+               (c.flags_field & AUXILIARY) == 0 &&\n+               (c.flags_field & FINAL) != 0) {\n+               c.flags_field |= UNNAMED_CLASS;\n+           }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8306112\n+ * @bug 8306112 8309568\n@@ -32,1 +32,3 @@\n- * @compile -processor TestUnnamedClass -proc:only --enable-preview --release ${jdk.version} Anonymous.java\n+ * @compile         -processor TestUnnamedClass            --enable-preview --release ${jdk.version}                            Anonymous.java\n+ * @clean Nameless.java\n+ * @compile\/process -processor TestUnnamedClass -proc:only --enable-preview --release ${jdk.version} -Xprefer:newer -AclassOnly Anonymous Nameless\n@@ -35,0 +37,6 @@\n+\/\/ The first @compile line processes Anonymous.java and a\n+\/\/ Nameless.java class generated using the Filer. Both of those\n+\/\/ unnamed classes are then compiled down to class files.  The second\n+\/\/ @compile line, as directed by -Xprefer:newer, builds and checks the\n+\/\/ language model objects constructed from those class files, ignoring\n+\/\/ any source files for those types.\n@@ -46,10 +54,3 @@\n-\/*\n- * Ideally, this processor would test both the compile-time\n- * representation of an unnamed class starting from a source file as\n- * well as the representation starting from a class file. Currently,\n- * only the source file based view will be tested.\n- *\n- * For future work to test the class file based view, an additional jtreg directive like the following could\n- * be used:\n- *\n- * @compile\/process -processor TestUnnamedClass -proc:only Anonymous Nameless\n+\/**\n+ * Test annotation processing representation of unnamed classes\n+ * constructed from either a source file or a class file.\n@@ -58,0 +59,1 @@\n+@SupportedOptions(\"classOnly\")\n@@ -61,0 +63,2 @@\n+    private static int checkedClassesCount = 0;\n+    private static boolean classOnly = false;\n@@ -64,4 +68,4 @@\n-        if (round == 0) { \/\/ Check file from comamnd line\n-            checkRoots(roundEnv);\n-            generateUnnamed();\n-        }\n+        if (round == 0) {\n+            classOnly = options.containsKey(\"classOnly\");\n+\n+            checkRoots(roundEnv); \/\/ Check any files from the comamnd line\n@@ -69,2 +73,12 @@\n-        if (!roundEnv.processingOver()) { \/\/ Test generated file(s)\n-            checkRoots(roundEnv);\n+            \/\/ Don't generate any files if testing pre-existing class files\n+            if (!classOnly) {\n+                generateUnnamed();\n+            }\n+        } else {\n+            if (!roundEnv.processingOver()) { \/\/ Test generated file(s)\n+                checkRoots(roundEnv);\n+            } else { \/\/ Should have checked at least one class before processing is over\n+                if (checkedClassesCount == 0) {\n+                    messager.printError(\"No unnamed classes checked.\");\n+                }\n+            }\n@@ -80,1 +94,0 @@\n-            System.out.println(\"Checking \" + type.getQualifiedName());\n@@ -132,0 +145,5 @@\n+        checkedClassesCount++;\n+        Name expectedName = unnamedClass.getSimpleName();\n+\n+        System.out.println(\"Checking \" + expectedName);\n+\n@@ -141,1 +159,1 @@\n-            messager.printError(\"Unnamed class does have an empty simple name.\", unnamedClass);\n+            messager.printError(\"Unnamed class has an empty simple name.\", unnamedClass);\n@@ -148,0 +166,5 @@\n+        Name binaryName = elements.getBinaryName(unnamedClass);\n+        if (!expectedName.equals(binaryName)) {\n+            messager.printError(\"Unnamed has unexpected binary name\" + binaryName + \".\", unnamedClass);\n+        }\n+\n@@ -180,3 +203,6 @@\n-        ExecutableElement ctor = ctors.getFirst();\n-        if (elements.getOrigin(ctor) != Elements.Origin.MANDATED) {\n-            messager.printError(\"Constructor was not marked as mandated\", ctor);\n+        if (!classOnly) {\n+            \/\/ Mandated-ness of default constructors not preserved in class files\n+            ExecutableElement ctor = ctors.getFirst();\n+            if (elements.getOrigin(ctor) != Elements.Origin.MANDATED) {\n+                messager.printError(\"Constructor was not marked as mandated\", ctor);\n+            }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedClass.java","additions":49,"deletions":23,"binary":false,"changes":72,"status":"modified"}]}