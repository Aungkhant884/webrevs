{"files":[{"patch":"@@ -709,0 +709,4 @@\n+    if (call->is_CallStaticJava() && call->as_CallStaticJava()->is_boxing_method()) {\n+      result = kit.must_be_not_null(result, false);\n+    }\n+\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -827,1 +827,3 @@\n-    extypes->append(TypeOopPtr::make_from_klass(env()->Throwable_klass())->is_instptr());\n+    const Type* extype = TypeOopPtr::make_from_klass(env()->Throwable_klass())->is_instptr();\n+    extype = extype->join(TypeInstPtr::NOTNULL);\n+    extypes->append(extype);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,2 @@\n-  for( i4 = 1; i4 < phi->req(); i4++ ) {\n+  RegionNode* phi_region = phi->region();\n+  for (i4 = 1; i4 < phi->req(); i4++ ) {\n@@ -96,1 +97,5 @@\n-    if( !con1 ) return nullptr;    \/\/ Do not optimize partially collapsed merges\n+    \/\/ Do not optimize partially collapsed merges\n+    if (con1 == nullptr || phi_region->in(i4) == nullptr || igvn->type(phi_region->in(i4)) == Type::TOP) {\n+      igvn->_worklist.push(iff);\n+      return nullptr;\n+    }\n@@ -118,1 +123,1 @@\n-  if (!r->is_Region() || r->is_Loop() || phi->region() != r || r->as_Region()->is_copy()) {\n+  if (!r->is_Region() || r->is_Loop() || phi_region != r || r->as_Region()->is_copy()) {\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4015,1 +4015,1 @@\n-      slow_call = generate_method_call(vmIntrinsics::_allocateUninitializedArray, false, false);\n+      slow_call = generate_method_call(vmIntrinsics::_allocateUninitializedArray, false, false, true);\n@@ -4017,1 +4017,1 @@\n-      slow_call = generate_method_call_static(vmIntrinsics::_newArray);\n+      slow_call = generate_method_call_static(vmIntrinsics::_newArray, true);\n@@ -4262,1 +4262,1 @@\n-LibraryCallKit::generate_method_call(vmIntrinsics::ID method_id, bool is_virtual, bool is_static) {\n+LibraryCallKit::generate_method_call(vmIntrinsicID method_id, bool is_virtual, bool is_static, bool res_not_null) {\n@@ -4271,0 +4271,8 @@\n+  if (res_not_null) {\n+    assert(tf->return_type() == T_OBJECT, \"\");\n+    const TypeTuple* range = tf->range();\n+    const Type** fields = TypeTuple::fields(range->cnt());\n+    fields[TypeFunc::Parms] = range->field_at(TypeFunc::Parms)->filter_speculative(TypePtr::NOTNULL);\n+    const TypeTuple* new_range = TypeTuple::make(range->cnt(), fields);\n+    tf = TypeFunc::make(tf->domain(), new_range);\n+  }\n@@ -4420,1 +4428,1 @@\n-    CallJavaNode* slow_call = generate_method_call(hashCode_id, is_virtual, is_static);\n+    CallJavaNode* slow_call = generate_method_call(hashCode_id, is_virtual, is_static, false);\n@@ -4946,1 +4954,1 @@\n-      CallJavaNode* slow_call = generate_method_call(vmIntrinsics::_clone, is_virtual);\n+      CallJavaNode* slow_call = generate_method_call(vmIntrinsics::_clone, is_virtual, false, true);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -179,7 +179,3 @@\n-  CallJavaNode* generate_method_call(vmIntrinsics::ID method_id,\n-                                     bool is_virtual = false, bool is_static = false);\n-  CallJavaNode* generate_method_call_static(vmIntrinsics::ID method_id) {\n-    return generate_method_call(method_id, false, true);\n-  }\n-  CallJavaNode* generate_method_call_virtual(vmIntrinsics::ID method_id) {\n-    return generate_method_call(method_id, true, false);\n+  CallJavaNode* generate_method_call(vmIntrinsicID method_id, bool is_virtual, bool is_static, bool res_not_null);\n+  CallJavaNode* generate_method_call_static(vmIntrinsicID method_id, bool res_not_null) {\n+    return generate_method_call(method_id, false, true, res_not_null);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+  assert(sub_t != Type::TOP && !TypePtr::NULL_PTR->higher_equal(sub_t), \"should be not null\");\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303279\n+ * @summary C2: crash in SubTypeCheckNode::sub() at IGVN split if\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=598200189 TestCrashAtIGVNSplitIfSubType\n+ *\/\n+\n+public class TestCrashAtIGVNSplitIfSubType {\n+    private static volatile int barrier;\n+\n+    public static void main(String[] args) {\n+        A a = new A();\n+        B b = new B();\n+        for (int i = 0; i < 20_000; i++) {\n+            test(a);\n+            test(b);\n+            testHelper1(null, 0);\n+        }\n+    }\n+\n+    private static void test(Object o) {\n+        int i = 2;\n+        for (; i < 4; i *= 2) {\n+\n+        }\n+        o = testHelper1(o, i);\n+        if (o instanceof A) {\n+            barrier = 0x42;\n+        }\n+    }\n+\n+    private static Object testHelper1(Object o, int i) {\n+        if (i < 3) {\n+            o = null;\n+        } else {\n+            if (o == null) {\n+            }\n+        }\n+        if (i < 2) {\n+            barrier = 42;\n+        }\n+        return o;\n+    }\n+\n+    private static class A {\n+    }\n+\n+    private static class B {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/splitif\/TestCrashAtIGVNSplitIfSubType.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}