{"files":[{"patch":"@@ -71,11 +71,0 @@\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @param value       value to mix in\n-     * @return            new length and coder\n-     *\/\n-    static long mix(long lengthCoder, byte value) {\n-        return mix(lengthCoder, (int)value);\n-    }\n-\n@@ -93,11 +82,0 @@\n-    \/**\n-     * Mix value length and coder into current length and coder.\n-     * @param lengthCoder String length with coder packed into higher bits\n-     *                    the upper word.\n-     * @param value       value to mix in\n-     * @return            new length and coder\n-     *\/\n-    static long mix(long lengthCoder, short value) {\n-        return mix(lengthCoder, (int)value);\n-    }\n-\n@@ -201,17 +179,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, byte value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, (int)value);\n-        if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n@@ -254,17 +215,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, short value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, (int)value);\n-        if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -499,1 +499,13 @@\n-            MethodHandle filter = stringifierFor(ptypes[i]);\n+            Class<?> cl = ptypes[i];\n+            MethodHandle filter = null;\n+            if (cl == byte.class || cl == short.class) {\n+                \/\/ use int for subword integral types; still need special mixers\n+                \/\/ and prependers for char, boolean\n+                ptypes[i] = int.class;\n+            } else if (cl == Object.class) {\n+                filter = objectStringifier();\n+            } else if (cl == float.class) {\n+                filter = floatStringifier();\n+            } else if (cl == double.class) {\n+                filter = doubleStringifier();\n+            }\n@@ -828,18 +840,0 @@\n-    \/**\n-     * Returns a stringifier for references and floats\/doubles only.\n-     * Always returns null for other primitives.\n-     *\n-     * @param t class to stringify\n-     * @return stringifier; null, if not available\n-     *\/\n-    private static MethodHandle stringifierFor(Class<?> t) {\n-        if (t == Object.class) {\n-            return objectStringifier();\n-        } else if (t == float.class) {\n-            return floatStringifier();\n-        } else if (t == double.class) {\n-            return doubleStringifier();\n-        }\n-        return null;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"}]}