{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -60,1 +61,2 @@\n-  if (G1StringDedup::is_enabled()) {\n+  if (G1StringDedup::is_enabled() &&\n+      java_lang_String::is_instance_inlined(obj)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -521,0 +521,3 @@\n+    \/\/ StringDedup::is_enabled() and java_lang_String::is_instance_inline\n+    \/\/ test of the obj, combined into a single comparison, using the klass\n+    \/\/ already in hand and avoiding the null check in is_instance.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,12 +44,5 @@\n-  if (java_lang_String::is_instance_inlined(obj)) {\n-    bool from_young = G1CollectedHeap::heap()->heap_region_containing(obj)->is_young();\n-    if (from_young && obj->age() < StringDeduplicationAgeThreshold) {\n-      \/\/ Candidate found. String is being evacuated from young to old but has not\n-      \/\/ reached the deduplication age threshold, i.e. has not previously been a\n-      \/\/ candidate during its life in the young generation.\n-      return true;\n-    }\n-  }\n-\n-  \/\/ Not a candidate\n-  return false;\n+  bool from_young = G1CollectedHeap::heap()->heap_region_containing(obj)->is_young();\n+  \/\/ Candidate if string is being evacuated from young to old but has not\n+  \/\/ reached the deduplication age threshold, i.e. has not previously been a\n+  \/\/ candidate during its life in the young generation.\n+  return from_young && (obj->age() < StringDeduplicationAgeThreshold);\n@@ -60,0 +53,1 @@\n+  assert(java_lang_String::is_instance(java_string), \"not a String\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1StringDedup.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-  static bool is_candidate_from_mark(oop obj);\n-  static bool is_candidate_from_evacuation(bool from_young, bool to_young, oop obj);\n+  static bool is_candidate_from_mark(oop java_string);\n+  static bool is_candidate_from_evacuation(bool from_young, bool to_young, oop java_string);\n@@ -78,2 +78,2 @@\n-  static void enqueue_from_mark(oop obj, uint worker_id);\n-  \/\/ precondition: java_string is a String.\n+  \/\/ Precondition for both is that java_string is a String.\n+  static void enqueue_from_mark(oop java_string, uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1StringDedup.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}