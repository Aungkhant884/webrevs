{"files":[{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.jdi.Bootstrap;\n+import com.sun.jdi.VirtualMachine;\n+import com.sun.jdi.connect.AttachingConnector;\n+import com.sun.jdi.connect.Connector;\n+import com.sun.jdi.connect.IllegalConnectorArgumentsException;\n+import com.sun.jdi.connect.ListeningConnector;\n+import com.sun.jdi.event.EventIterator;\n+import com.sun.jdi.event.EventQueue;\n+import com.sun.jdi.event.EventSet;\n+import com.sun.jdi.event.Event;\n+import com.sun.jdi.event.ExceptionEvent;\n+import com.sun.jdi.request.EventRequestManager;\n+import jdk.test.lib.Utils;\n+import lib.jdb.Debuggee;\n+\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+\/*\n+ * @test\n+ * @bug 8317920\n+ * @summary Tests for JDWP agent to send valid exception event with onthrow option\n+ * @library \/test\/lib\n+ *\n+ * @build ThrowCaughtException JdwpOnThrowTest\n+ * @run main\/othervm JdwpOnThrowTest\n+ *\/\n+public class JdwpOnThrowTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        int port = findFreePort();\n+        try (Debuggee debuggee = Debuggee.launcher(\"ThrowCaughtException\").setAddress(\"localhost:\" + port)\n+                                         .enableOnThrow(\"Ex\", \"Start\").setSuspended(true).launch()) {\n+            VirtualMachine vm = null;\n+            try {\n+                vm = attach(\"localhost\", \"\" + port);\n+                EventQueue queue = vm.eventQueue();\n+                log(\"Waiting for exception event\");\n+                long start = System.currentTimeMillis();\n+                while (start + 1000 > System.currentTimeMillis()) {\n+                    EventSet eventSet = queue.remove(1000);\n+                    EventIterator eventIterator = eventSet.eventIterator();\n+                    while(eventIterator.hasNext() && start + 1000 > System.currentTimeMillis()) {\n+                        Event event = eventIterator.next();\n+                        if (event instanceof ExceptionEvent ex) {\n+                            if (ex.exception() == null) {\n+                                throw new RuntimeException(\"Exception is null\");\n+                            }\n+                            if (ex.exception().type() == null) {\n+                                throw new RuntimeException(\"Exception type is null\");\n+                            }\n+                            if (ex.exception().referenceType() == null) {\n+                                throw new RuntimeException(\"Exception reference type is null\");\n+                            }\n+                            if (ex.catchLocation() == null) {\n+                                throw new RuntimeException(\"Exception catch location is null\");\n+                            }\n+                            if (!ex.exception().type().name().equals(\"Ex\")) {\n+                                throw new RuntimeException(\"Exception has wrong type: \" + ex.exception().type().name());\n+                            }\n+                            vm.dispose();\n+                            return;\n+                        }\n+                    }\n+                }\n+                throw new RuntimeException(\"ERROR: failed to receive exception event\");\n+            } catch (IOException ex) {\n+                throw new RuntimeException(\"ERROR: failed to attach\", ex);\n+            }\n+        }\n+    }\n+\n+    private static int findFreePort() {\n+        try (ServerSocket socket = new ServerSocket(0)) {\n+            return socket.getLocalPort();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static String ATTACH_CONNECTOR = \"com.sun.jdi.SocketAttach\";\n+    \/\/ cache socket attaching connector\n+    private static AttachingConnector attachingConnector;\n+\n+    private static VirtualMachine attach(String address, String port) throws IOException {\n+        if (attachingConnector == null) {\n+            attachingConnector = (AttachingConnector)getConnector(ATTACH_CONNECTOR);\n+        }\n+        Map<String, Connector.Argument> args = attachingConnector.defaultArguments();\n+        setConnectorArg(args, \"hostname\", address);\n+        setConnectorArg(args, \"port\", port);\n+        try {\n+            return attachingConnector.attach(args);\n+        } catch (IllegalConnectorArgumentsException e) {\n+            \/\/ unexpected.. wrap in RuntimeException\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static Connector getConnector(String name) {\n+        List<Connector> connectors = Bootstrap.virtualMachineManager().allConnectors();\n+        for (Iterator<Connector> iter = connectors.iterator(); iter.hasNext(); ) {\n+            Connector connector = iter.next();\n+            if (connector.name().equalsIgnoreCase(name)) {\n+                return connector;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Connector \" + name + \" not found\");\n+    }\n+\n+    private static void setConnectorArg(Map<String, Connector.Argument> args, String name, String value) {\n+        Connector.Argument arg = args.get(name);\n+        if (arg == null) {\n+            throw new IllegalArgumentException(\"Argument \" + name + \" is not defined\");\n+        }\n+        arg.setValue(value);\n+    }\n+\n+    private static void log(Object o) {\n+        System.out.println(String.valueOf(o));\n+    }\n+\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdwpOnThrowTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+\/* \/nodynamiccopyright\/ *\/ public class ThrowCaughtException {  \/\/ hard coded linenumbers - DO NOT CHANGE\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            System.out.println(\"Start\");\n+            throw new Ex();\n+        } catch (Exception e) {\n+            System.out.println(e);\n+        }\n+    }\n+}\n+\n+class Ex extends RuntimeException {\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/jdi\/ThrowCaughtException.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -71,0 +71,3 @@\n+        private String onthrow = \"\";\n+        private boolean waitForPortPrint = true;\n+        private String expectedOutputBeforeThrow = \"\";\n@@ -103,0 +106,8 @@\n+        \/\/ required to pass non null port with address and emit string before the throw\n+        public Launcher enableOnThrow(String value, String expectedOutputBeforeThrow) {\n+            this.onthrow = value;\n+            this.waitForPortPrint = false;\n+            this.expectedOutputBeforeThrow = expectedOutputBeforeThrow;\n+            return this;\n+        }\n+\n@@ -108,0 +119,1 @@\n+            String onthrowArgs = onthrow.isEmpty() ? \"\" : \",onthrow=\" + onthrow + \",launch=exit\";\n@@ -110,1 +122,2 @@\n-                    + \",server=y,suspend=\" + (suspended ? \"y\" : \"n\"));\n+                    + \",server=y,suspend=\" + (suspended ? \"y\" : \"n\")\n+                    + onthrowArgs);\n@@ -117,1 +130,1 @@\n-            return new Debuggee(prepare(), name);\n+            return new Debuggee(prepare(), name, waitForPortPrint, expectedOutputBeforeThrow);\n@@ -125,1 +138,1 @@\n-    private Debuggee(ProcessBuilder pb, String name) {\n+    private Debuggee(ProcessBuilder pb, String name, boolean waitForPortPrint, String expectedOutputBeforeThrow) {\n@@ -127,0 +140,12 @@\n+        if (!waitForPortPrint) {\n+            try {\n+                p = ProcessTools.startProcess(name, pb, s -> {output.add(s);}, s -> {\n+                    return s.equals(expectedOutputBeforeThrow);\n+                }, 3, TimeUnit.SECONDS);\n+            } catch (IOException | InterruptedException | TimeoutException ex) {\n+                throw new RuntimeException(\"failed to launch debuggee\", ex);\n+            }\n+            transport = null;\n+            address = null;\n+            return;\n+        }\n@@ -170,0 +195,3 @@\n+        if (address == null) {\n+            throw new IllegalStateException(\"address is not available\");\n+        }\n@@ -174,0 +202,3 @@\n+        if (address == null) {\n+            throw new IllegalStateException(\"address is not available\");\n+        }\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"}]}