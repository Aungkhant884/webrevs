{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,7 @@\n+    \/**\n+     * This is a method does not override superclass error\n+     *\/\n+    boolean isOverrideError() {\n+        return getCode().equals(\"compiler.err.method.does.not.override.superclass\");\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Diag.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    private int cntOverride = 0;\n@@ -67,0 +68,2 @@\n+            } else if (d.isOverrideError()) {\n+                ++cntOverride;\n@@ -117,1 +120,1 @@\n-        return (cntNotStmt + cntResolve + cntUnreach + cntOther) > 0;\n+        return (cntNotStmt + cntResolve + cntUnreach + cntOverride + cntOther) > 0;\n@@ -133,1 +136,1 @@\n-        return (cntResolve + cntUnreach + cntOther) > 0;\n+        return (cntResolve + cntUnreach + cntOverride + cntOther) > 0;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/DiagList.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8145239 8129559 8080354 8189248 8010319 8246353 8247456\n+ * @bug 8145239 8129559 8080354 8189248 8010319 8246353 8247456 8282160\n@@ -345,0 +345,18 @@\n+    public void testCircular8282160() {\n+        TypeDeclSnippet classKey = classKey(assertEval(\"\"\"\n+                                                       class B {\n+                                                           C c;\n+                                                           public void run() {}\n+                                                       }\n+                                                       \"\"\",\n+                                                       added(RECOVERABLE_NOT_DEFINED)));\n+        assertEval(\"\"\"\n+                   class C extends B {\n+                       @Override\n+                       public void run() {}\n+                   }\n+                   \"\"\",\n+                   added(VALID),\n+                   ste(classKey, Status.RECOVERABLE_NOT_DEFINED, Status.VALID, true, null));\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ClassesTest.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}