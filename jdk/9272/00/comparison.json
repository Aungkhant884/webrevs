{"files":[{"patch":"@@ -584,2 +584,2 @@\n-                    if (cb != null && (cb instanceof NMethod)) {\n-                        ((NMethod)cb).dumpReplayData(out);\n+                    if (cb instanceof NMethod nMethod) {\n+                        nMethod.dumpReplayData(out);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        if ((obj == null) || !(obj instanceof BsdThread)) {\n+        if (!(obj instanceof BsdThread other)) {\n@@ -56,1 +56,1 @@\n-        return (((BsdThread) obj).unique_thread_id == unique_thread_id);\n+        return (other.unique_thread_id == unique_thread_id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/bsd\/BsdThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,1 @@\n-      if (o == null || !(o instanceof LoadObjectComparator)) {\n-         return false;\n-      }\n-      return true;\n+      return o instanceof LoadObjectComparator;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/cdbg\/LoadObjectComparator.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        if ((obj == null) || !(obj instanceof LinuxThread)) {\n+        if (!(obj instanceof LinuxThread other)) {\n@@ -62,1 +62,1 @@\n-        return (((LinuxThread) obj).lwp_id == lwp_id);\n+        return (other.lwp_id == lwp_id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.jvm.hotspot.utilities.memo.*;\n@@ -72,1 +71,1 @@\n-        if (o == null || !(o instanceof DSO)) {\n+        if (!(o instanceof DSO other)) {\n@@ -75,1 +74,0 @@\n-        DSO other = (DSO)o;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/posix\/DSO.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-        if ((obj == null) || !(obj instanceof ProcAARCH64Thread)) {\n+        if (!(obj instanceof ProcAARCH64Thread other)) {\n@@ -81,1 +81,1 @@\n-        return (((ProcAARCH64Thread) obj).id == id);\n+        return (other.id == id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/aarch64\/ProcAARCH64Thread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-        if ((obj == null) || !(obj instanceof ProcAMD64Thread)) {\n+        if (!(obj instanceof ProcAMD64Thread other)) {\n@@ -80,1 +80,1 @@\n-        return (((ProcAMD64Thread) obj).id == id);\n+        return (other.id == id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/amd64\/ProcAMD64Thread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    if ((obj == null) || !(obj instanceof ProcPPC64Thread)) {\n+    if (!(obj instanceof ProcPPC64Thread other)) {\n@@ -80,1 +80,1 @@\n-    return (((ProcPPC64Thread) obj).id == id);\n+    return (other.id == id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ppc64\/ProcPPC64Thread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        if ((obj == null) || !(obj instanceof ProcRISCV64Thread)) {\n+        if (!(obj instanceof ProcRISCV64Thread other)) {\n@@ -82,1 +82,1 @@\n-        return (((ProcRISCV64Thread) obj).id == id);\n+        return (other.id == id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/riscv64\/ProcRISCV64Thread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-    if ((obj == null) || !(obj instanceof ProcX86Thread)) {\n+    if (!(obj instanceof ProcX86Thread other)) {\n@@ -85,1 +85,1 @@\n-    return (((ProcX86Thread) obj).id == id);\n+    return (other.id == id);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/x86\/ProcX86Thread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import sun.jvm.hotspot.debugger.aarch64.*;\n@@ -70,1 +69,1 @@\n-    if ((obj == null) || !(obj instanceof WindbgAARCH64Thread)) {\n+    if (!(obj instanceof WindbgAARCH64Thread other)) {\n@@ -74,1 +73,1 @@\n-    return (((WindbgAARCH64Thread) obj).getThreadID() == getThreadID());\n+    return (other.getThreadID() == getThreadID());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/aarch64\/WindbgAARCH64Thread.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.jvm.hotspot.debugger.amd64.*;\n@@ -73,1 +72,1 @@\n-    if ((obj == null) || !(obj instanceof WindbgAMD64Thread)) {\n+    if (!(obj instanceof WindbgAMD64Thread other)) {\n@@ -77,1 +76,1 @@\n-    return (((WindbgAMD64Thread) obj).getThreadID() == getThreadID());\n+    return (other.getThreadID() == getThreadID());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/amd64\/WindbgAMD64Thread.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.jvm.hotspot.debugger.x86.*;\n@@ -69,1 +68,1 @@\n-    if ((obj == null) || !(obj instanceof WindbgX86Thread)) {\n+    if (!(obj instanceof WindbgX86Thread other)) {\n@@ -73,1 +72,1 @@\n-    return (((WindbgX86Thread) obj).getThreadID() == getThreadID());\n+    return (other.getThreadID() == getThreadID());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/x86\/WindbgX86Thread.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.util.*;\n-import sun.jvm.hotspot.utilities.*;\n@@ -118,2 +116,2 @@\n-    if (obj != null && (obj instanceof Oop)) {\n-      return getHandle().equals(((Oop) obj).getHandle());\n+    if (obj instanceof Oop other) {\n+      return getHandle().equals(other.getHandle());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,1 +201,1 @@\n-      if (o == null || !(o instanceof JavaVFrame)) {\n+      if (!(o instanceof JavaVFrame other)) {\n@@ -205,3 +205,1 @@\n-      JavaVFrame other = (JavaVFrame) o;\n-\n-      \/\/ Check static part\n+    \/\/ Check static part\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaVFrame.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -274,2 +274,2 @@\n-              if (node != null && node instanceof SimpleTreeNode) {\n-                showInspector((SimpleTreeNode)node);\n+              if (node instanceof SimpleTreeNode simpleNode) {\n+                showInspector(simpleNode);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ui\/Inspector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import sun.jvm.hotspot.memory.*;\n@@ -440,2 +439,2 @@\n-        if (cause != null && cause instanceof IOException) {\n-            throw (IOException) cause;\n+        if (cause instanceof IOException io) {\n+            throw io;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/AbstractHeapGraphWriter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-      if (klass != null && klass instanceof InstanceKlass) {\n-         return (InstanceKlass) klass;\n+      if (klass instanceof InstanceKlass ik) {\n+         return ik;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/SystemDictionaryHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}