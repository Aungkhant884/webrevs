{"files":[{"patch":"@@ -48,1 +48,4 @@\n-\/\/ that a map's entrySet contains exactly the expected mappings.\n+\/\/ that a map's entrySet contains exactly the expected mappings. In most cases, keys and\n+\/\/ values should be compared by identity, not equality. However, the identities of Map.Entry\n+\/\/ instances from an IdentityHashSet are not guaranteed; the keys and values they contain\n+\/\/ should be compared for identity though.\n@@ -53,1 +56,1 @@\n-\/\/ TODO view collections iterators\n+\/\/ TODO deeper testing of view collections including iterators, equals, contains, etc.\n@@ -72,0 +75,2 @@\n+    \/\/ TODO: read out the elements using iterator and stream and check them too\n+\n@@ -222,0 +227,1 @@\n+\n@@ -230,0 +236,10 @@\n+\n+        assertFalse(map.equals(map2));\n+        assertFalse(map2.equals(map));\n+    }\n+\n+    \/\/ equals\n+    @Test\n+    public void testEqualsNewMapping() {\n+        map.put(new Box(k1a), new Box(v1a));\n+\n@@ -234,0 +250,11 @@\n+    \/\/ equals\n+    @Test\n+    public void testEqualsMissingMapping() {\n+        var tmp = new IdentityHashMap<Box, Box>();\n+        tmp.put(k1a, v1a);\n+        tmp.put(k1b, v1b);\n+\n+        assertFalse(map.equals(tmp));\n+        assertFalse(tmp.equals(map));\n+    }\n+\n@@ -237,0 +264,1 @@\n+\n@@ -239,0 +267,2 @@\n+        assertTrue(map.keySet().equals(map2.keySet()));\n+        assertTrue(map2.keySet().equals(map.keySet()));\n@@ -244,1 +274,3 @@\n-        keySet.remove(new Box(k1a));\n+        boolean r = keySet.remove(new Box(k1a));\n+\n+        assertFalse(r);\n@@ -246,2 +278,5 @@\n-        assertTrue(keySet.equals(map2.keySet()));\n-        assertTrue(map.equals(map2));\n+        checkEntries(map.entrySet(), entry(k1a, v1a),\n+                                     entry(k1b, v1b),\n+                                     entry(k2, v2));\n+        assertTrue(map.keySet().equals(map2.keySet()));\n+        assertTrue(map2.keySet().equals(map.keySet()));\n@@ -253,1 +288,3 @@\n-        keySet.remove(k1a);\n+        boolean r = keySet.remove(k1a);\n+\n+        assertTrue(r);\n@@ -257,0 +294,2 @@\n+        assertFalse(map.keySet().equals(map2.keySet()));\n+        assertFalse(map2.keySet().equals(map.keySet()));\n@@ -269,1 +308,3 @@\n-        values.remove(new Box(v1a));\n+        boolean r = values.remove(new Box(v1a));\n+\n+        assertFalse(r);\n@@ -271,1 +312,3 @@\n-        assertTrue(map.equals(map2));\n+        checkEntries(map.entrySet(), entry(k1a, v1a),\n+                                     entry(k1b, v1b),\n+                                     entry(k2, v2));\n@@ -277,1 +320,3 @@\n-        values.remove(v1a);\n+        boolean r = values.remove(v1a);\n+\n+        assertTrue(r);\n@@ -290,1 +335,1 @@\n-\n+        assertTrue(map.entrySet().equals(map2.entrySet()));\n@@ -299,2 +344,5 @@\n-        entrySet.remove(entry(new Box(k1a), v1a));\n-        entrySet.remove(entry(k1a, new Box(v1a)));\n+        boolean r1 = entrySet.remove(entry(new Box(k1a), v1a));\n+        boolean r2 = entrySet.remove(entry(k1a, new Box(v1a)));\n+\n+        assertFalse(r1);\n+        assertFalse(r2);\n@@ -302,1 +350,0 @@\n-        assertTrue(map.equals(map2));\n@@ -311,1 +358,1 @@\n-        entrySet.remove(Map.entry(k1a, v1a));\n+        boolean r = entrySet.remove(Map.entry(k1a, v1a));\n@@ -313,0 +360,3 @@\n+        assertTrue(r);\n+        assertFalse(entrySet.equals(map2.entrySet()));\n+        assertFalse(map.entrySet().equals(map2.entrySet()));\n@@ -315,1 +365,0 @@\n-\n@@ -325,1 +374,1 @@\n-        map.put(newKey, newVal);\n+        Box r = map.put(newKey, newVal);\n@@ -327,0 +376,1 @@\n+        assertNull(r);\n@@ -337,1 +387,1 @@\n-        map.put(k1a, newVal);\n+        Box r = map.put(k1a, newVal);\n@@ -339,0 +389,1 @@\n+        assertSame(r, v1a);\n@@ -363,2 +414,2 @@\n-    public void testPutIfAbsent() {\n-        map.putIfAbsent(k1a, new Box(v1a)); \/\/ no-op\n+    public void testPutIfAbsentNoop() {\n+        Box r = map.putIfAbsent(k1a, new Box(v1a)); \/\/ no-op\n@@ -366,0 +417,1 @@\n+        assertSame(r, v1a);\n@@ -369,0 +421,1 @@\n+    }\n@@ -370,0 +423,3 @@\n+    \/\/ putIfAbsent\n+    @Test\n+    public void testPutIfAbsentAddsNew() {\n@@ -372,1 +428,1 @@\n-        map.putIfAbsent(newKey, newVal); \/\/ adds new entry\n+        Box r = map.putIfAbsent(newKey, newVal); \/\/ adds new entry\n@@ -374,0 +430,1 @@\n+        assertNull(r);\n@@ -383,1 +440,3 @@\n-        map.remove(k1b);\n+        Box r = map.remove(k1b);\n+\n+        assertSame(r, v1b);\n@@ -392,1 +451,3 @@\n-        map.compute(newKey, (k, v) -> null);\n+        Box r = map.compute(newKey, (k, v) -> null);\n+\n+        assertNull(r);\n@@ -403,1 +464,3 @@\n-        map.compute(newKey, (k, v) -> newVal);\n+        Box r = map.compute(newKey, (k, v) -> newVal);\n+\n+        assertSame(r, newVal);\n@@ -413,1 +476,3 @@\n-        map.compute(k1a, (k, v) -> null);\n+        Box r = map.compute(k1a, (k, v) -> null);\n+\n+        assertNull(r);\n@@ -422,1 +487,3 @@\n-        map.compute(k1a, (k, v) -> newVal);\n+        Box r = map.compute(k1a, (k, v) -> newVal);\n+\n+        assertSame(r, newVal);\n@@ -433,1 +500,3 @@\n-        map.computeIfAbsent(newKey, k -> { called[0] = true; return newVal; });\n+        Box r = map.computeIfAbsent(newKey, k -> { called[0] = true; return newVal; });\n+\n+        assertSame(r, newVal);\n@@ -444,1 +513,3 @@\n-        map.computeIfAbsent(k1a, k -> { called[0] = true; return null; });\n+        Box r = map.computeIfAbsent(k1a, k -> { called[0] = true; return null; });\n+\n+        assertSame(r, v1a);\n@@ -455,1 +526,3 @@\n-        map.computeIfAbsent(newKey, k -> { called[0] = true; return null; });\n+        Box r = map.computeIfAbsent(newKey, k -> { called[0] = true; return null; });\n+\n+        assertNull(r);\n@@ -466,1 +539,3 @@\n-        map.computeIfPresent(k1a, (k, v) -> { called[0] = true; return newVal; });\n+        Box r = map.computeIfPresent(k1a, (k, v) -> { called[0] = true; return newVal; });\n+\n+        assertSame(r, newVal);\n@@ -476,1 +551,3 @@\n-        map.computeIfPresent(new Box(k1a), (k, v) -> { called[0] = true; return null; });\n+        Box r = map.computeIfPresent(new Box(k1a), (k, v) -> { called[0] = true; return null; });\n+\n+        assertNull(r);\n@@ -486,1 +563,3 @@\n-        map.computeIfPresent(k1a, (k, v) -> { called[0] = true; return null; });\n+        Box r = map.computeIfPresent(k1a, (k, v) -> { called[0] = true; return null; });\n+\n+        assertNull(r);\n@@ -497,1 +576,3 @@\n-        map.merge(newKey, newVal, (v1, v2) -> { called[0] = true; return newVal; });\n+        Box r = map.merge(newKey, newVal, (v1, v2) -> { called[0] = true; return newVal; });\n+\n+        assertSame(r, newVal);\n@@ -510,1 +591,1 @@\n-        map.merge(k1a, val2, (v1, v2) -> {\n+        Box r = map.merge(k1a, val2, (v1, v2) -> {\n@@ -516,0 +597,1 @@\n+        assertSame(r, mergedVal[0]);\n","filename":"test\/jdk\/java\/util\/IdentityHashMap\/Basic.java","additions":115,"deletions":33,"binary":false,"changes":148,"status":"modified"}]}