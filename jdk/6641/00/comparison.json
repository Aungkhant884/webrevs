{"files":[{"patch":"@@ -97,1 +97,1 @@\n-        return new AArch64HotSpotRegisterConfig(target, config.useCompressedOops, canUsePlatformRegister);\n+        return new AArch64HotSpotRegisterConfig(target, config.useCompressedOops, canUsePlatformRegister, config.macOs);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,0 +119,2 @@\n+    private final boolean macOS;\n+\n@@ -165,2 +167,2 @@\n-    public AArch64HotSpotRegisterConfig(TargetDescription target, boolean useCompressedOops, boolean canUsePlatformRegister) {\n-        this(target, initAllocatable(target.arch, useCompressedOops, canUsePlatformRegister));\n+    public AArch64HotSpotRegisterConfig(TargetDescription target, boolean useCompressedOops, boolean canUsePlatformRegister, boolean macOs) {\n+        this(target, initAllocatable(target.arch, useCompressedOops, canUsePlatformRegister), macOs);\n@@ -170,1 +172,1 @@\n-    public AArch64HotSpotRegisterConfig(TargetDescription target, RegisterArray allocatable) {\n+    public AArch64HotSpotRegisterConfig(TargetDescription target, RegisterArray allocatable, boolean macOs) {\n@@ -172,0 +174,1 @@\n+        this.macOS = macOs;\n@@ -268,0 +271,6 @@\n+                int kindSize = valueKind.getPlatformKind().getSizeInBytes();\n+                if (macOS && currentStackOffset % kindSize != 0) {\n+                    \/\/ In MacOS natural alignment is used\n+                    \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+                    currentStackOffset += kindSize - currentStackOffset % kindSize;\n+                }\n@@ -269,1 +278,7 @@\n-                currentStackOffset += Math.max(valueKind.getPlatformKind().getSizeInBytes(), target.wordSize);\n+                if (macOS) {\n+                    \/\/ In MacOS \"Function arguments may consume slots on the stack that are not multiples of 8 bytes\"\n+                    \/\/ See https:\/\/developer.apple.com\/documentation\/xcode\/writing-arm64-code-for-apple-platforms\n+                    currentStackOffset += kindSize;\n+                } else {\n+                    currentStackOffset += Math.max(kindSize, target.wordSize);\n+                }\n@@ -272,1 +287,3 @@\n-\n+        if (currentStackOffset % target.stackAlignment != 0) {\n+            currentStackOffset += target.stackAlignment - currentStackOffset % target.stackAlignment;\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotRegisterConfig.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    final boolean macOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Mac\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotVMConfig.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/NativeCallTest.java 8262901 macosx-aarch64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}