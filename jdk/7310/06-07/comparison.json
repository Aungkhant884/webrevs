{"files":[{"patch":"@@ -26,1 +26,0 @@\n- * @key headful\n@@ -29,1 +28,1 @@\n- * @summary Tests HTML image as JButton text for unwanted padding on Aqua LAF on MacOS\n+ * @summary Tests HTML image as JButton text for unwanted padding on macOS Aqua LAF\n@@ -33,2 +32,0 @@\n-import java.awt.Point;\n-import java.awt.Robot;\n@@ -36,1 +33,0 @@\n-import java.awt.FlowLayout;\n@@ -38,1 +34,0 @@\n-import java.awt.Rectangle;\n@@ -40,2 +35,1 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.nio.file.Path;\n+import java.awt.image.BufferedImage;\n@@ -43,2 +37,0 @@\n-import javax.swing.JFrame;\n-import javax.swing.SwingUtilities;\n@@ -46,0 +38,2 @@\n+import javax.swing.SwingUtilities;\n+import java.nio.file.Path;\n@@ -47,1 +41,0 @@\n-import javax.imageio.ImageIO;\n@@ -49,1 +42,3 @@\n-import java.awt.image.BufferedImage;\n+import javax.imageio.ImageIO;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n@@ -52,2 +47,0 @@\n-    private static JFrame frame;\n-    private static Point point;\n@@ -56,7 +49,12 @@\n-    private static Robot robot;\n-\n-    public static final int BUTTON_HEIGHT = 37;\n-    public static final int BUTTON_WIDTH = 37;\n-    public static final int SQUARE_HEIGHT = 19;\n-    public static final int SQUARE_WIDTH = 19;\n-    public static final int PIXEL_BUFFER = 1;\n+    private static BufferedImage image;\n+\n+    private static final int BUTTON_HEIGHT = 37;\n+    private static final int BUTTON_WIDTH = 37;\n+    private static final int SQUARE_HEIGHT = 19;\n+    private static final int SQUARE_WIDTH = 19;\n+    private static final int centerX = BUTTON_WIDTH \/ 2;\n+    private static final int centerY = BUTTON_HEIGHT \/ 2;\n+    private static final int minX = centerX - (SQUARE_WIDTH \/ 2);\n+    private static final int minY = centerY - (SQUARE_HEIGHT \/ 2);\n+    private static final int maxX = centerX + (SQUARE_WIDTH \/ 2);\n+    private static final int maxY = centerY + (SQUARE_HEIGHT \/ 2);\n@@ -65,35 +63,12 @@\n-        robot = new Robot();\n-        robot.setAutoDelay(100);\n-        robot.setAutoWaitForIdle(true);\n-\n-        try {\n-            UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n-\n-            \/\/ store path to source directory to locate image\n-            testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n-\n-            \/\/ generate red_square.png image to use as JButton text\n-            generateImage();\n-\n-            SwingUtilities.invokeAndWait(() -> createAndShowGUI());\n-\n-            robot.waitForIdle();\n-\n-            \/\/ retrieve color of pixels at each edge of square image by starting at the center of the button\n-            setupCenterCoord();\n-            robot.mouseMove(point.x, point.y);\n-\n-            \/\/ store each pixel color on the edge of each side of the red square\n-            Color leftClr = robot.getPixelColor(point.x - (SQUARE_WIDTH\/2) + PIXEL_BUFFER, point.y);\n-            Color rightClr = robot.getPixelColor(point.x + (SQUARE_WIDTH\/2) - PIXEL_BUFFER, point.y);\n-            Color topClr = robot.getPixelColor(point.x, point.y - (SQUARE_HEIGHT\/2) + PIXEL_BUFFER);\n-            Color botClr = robot.getPixelColor(point.x, point.y + (SQUARE_HEIGHT\/2) - PIXEL_BUFFER);\n-\n-            testImageCentering(leftClr, rightClr, topClr, botClr);\n-        } finally {\n-            SwingUtilities.invokeAndWait(() -> {\n-                if(frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n-        }\n+        UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        generateRedSquare();\n+\n+        SwingUtilities.invokeAndWait(HtmlButtonImageTest::createButton);\n+        SwingUtilities.invokeAndWait(HtmlButtonImageTest::createImage);\n+\n+        testImageCentering(image.getRGB(centerX, centerY),\n+                image.getRGB(minX, minY),\n+                image.getRGB(minX, maxY),\n+                image.getRGB(maxX, minY),\n+                image.getRGB(maxX, maxY));\n@@ -102,4 +77,8 @@\n-    private static void createAndShowGUI() {\n-        frame = new JFrame();\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setLayout(new FlowLayout());\n+    private static void generateRedSquare() throws IOException {\n+        BufferedImage bImg = new BufferedImage(SQUARE_WIDTH, SQUARE_HEIGHT,\n+                TYPE_INT_ARGB);\n+        Graphics2D cg = bImg.createGraphics();\n+        cg.setColor(Color.RED);\n+        cg.fillRect(0, 0, SQUARE_WIDTH, SQUARE_HEIGHT);\n+        ImageIO.write(bImg, \"png\", new File(testDir + \"\/red_square.png\"));\n+    }\n@@ -107,1 +86,1 @@\n-        \/\/ create JButton of size 37x37 text set to a 19x19 image of a red square loaded through html tags\n+    private static void createButton() {\n@@ -109,8 +88,3 @@\n-        button.setFocusPainted(false);\n-        button.setPreferredSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));\n-        button.setText(\"<html><img src='\" + testDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n-\n-        frame.add(button);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n+        button.setSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));\n+        button.setText(\"<html><img src='\"\n+                + testDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n@@ -119,7 +93,5 @@\n-    private static void setupCenterCoord() throws InterruptedException, InvocationTargetException {\n-        \/\/ adjust coordinates to be the center of the button\n-        SwingUtilities.invokeAndWait(() -> {\n-            point = button.getLocationOnScreen();\n-        });\n-        point.x += BUTTON_WIDTH \/ 2;\n-        point.y += BUTTON_HEIGHT \/ 2;\n+    private static void createImage() {\n+        image = new BufferedImage(BUTTON_HEIGHT, BUTTON_WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = image.createGraphics();\n+        button.paint(graphics2D);\n+        graphics2D.dispose();\n@@ -128,6 +100,2 @@\n-    private static boolean checkRedness(Color c) {\n-        \/\/ checks for redness since anti-aliasing causes edges to be not exactly 255,0,0 rgb values\n-        if (c.getRed() > 250 && c.getBlue() < 10 && c.getGreen() < 10) {\n-            return true;\n-        }\n-        return false;\n+    private static boolean checkRedness(int rgb) {\n+        return (rgb == Color.RED.getRGB());\n@@ -136,8 +104,5 @@\n-    private static void testImageCentering(Color... colors) throws IOException {\n-        \/\/ check if all colors at each edge of square are red\n-        for (Color c : colors) {\n-            if (!checkRedness(c)) {\n-                \/\/ capture image of button when test fails for troubleshooting\n-                BufferedImage failImg = robot.createScreenCapture(new Rectangle(point.x - BUTTON_WIDTH \/ 2,\n-                        point.y - BUTTON_HEIGHT \/ 2, BUTTON_WIDTH, BUTTON_HEIGHT));\n-                ImageIO.write(failImg, \"png\", new File(testDir + \"\/fail_square.png\"));\n+    private static void testImageCentering(int... colors) throws IOException {\n+        for (int c : colors) {\n+            if(!checkRedness(c)) {\n+                ImageIO.write(image, \"png\",\n+                        new File(testDir + \"\/fail_image.png\"));\n@@ -147,10 +112,1 @@\n-        System.out.println(\"-- Passed\");\n-    }\n-\n-    private static void generateImage() throws IOException {\n-        BufferedImage bImg = new BufferedImage(SQUARE_WIDTH, SQUARE_HEIGHT, BufferedImage.TYPE_INT_RGB);\n-        Graphics2D cg = bImg.createGraphics();\n-        \/\/ paint a red square onto cg\n-        cg.setColor(Color.RED);\n-        cg.fillRect(0, 0, SQUARE_WIDTH, SQUARE_HEIGHT);\n-        ImageIO.write(bImg, \"png\", new File(testDir + \"\/red_square.png\"));\n+        System.out.println(\"Passed\");\n","filename":"test\/jdk\/javax\/swing\/JButton\/HtmlButtonImageTest\/HtmlButtonImageTest.java","additions":56,"deletions":100,"binary":false,"changes":156,"status":"modified"}]}