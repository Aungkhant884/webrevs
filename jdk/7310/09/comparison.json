{"files":[{"patch":"@@ -308,1 +308,9 @@\n-        final String text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        final String text;\n+        final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n+        if (v != null) {\n+            \/\/ use zero insets for view since layout only handles text calculations\n+            text = layoutAndGetText(g, b, aquaBorder, new Insets(0,0,0,0),\n+                    viewRect, iconRect, textRect);\n+        } else {\n+            text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        }\n@@ -320,1 +328,0 @@\n-            final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+*\/\n+\n+\/*\n+ * @test\n+ * @bug 8015854\n+ * @requires (os.family == \"mac\")\n+ * @summary Tests HTML image as JButton text for unwanted padding on macOS Aqua LAF\n+ * @run main HtmlButtonImageTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public final class HtmlButtonImageTest {\n+    private static JButton button;\n+    private static Path testDir;\n+    private static BufferedImage image;\n+\n+    private static final int BUTTON_HEIGHT = 37;\n+    private static final int BUTTON_WIDTH = 37;\n+    private static final int SQUARE_HEIGHT = 19;\n+    private static final int SQUARE_WIDTH = 19;\n+    private static final int centerX = BUTTON_WIDTH \/ 2;\n+    private static final int centerY = BUTTON_HEIGHT \/ 2;\n+    private static final int minX = centerX - (SQUARE_WIDTH \/ 2);\n+    private static final int minY = centerY - (SQUARE_HEIGHT \/ 2);\n+    private static final int maxX = centerX + (SQUARE_WIDTH \/ 2);\n+    private static final int maxY = centerY + (SQUARE_HEIGHT \/ 2);\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        generateRedSquare();\n+\n+        SwingUtilities.invokeAndWait(HtmlButtonImageTest::createButton);\n+        SwingUtilities.invokeAndWait(HtmlButtonImageTest::paintButton);\n+\n+        testImageCentering(image.getRGB(centerX, centerY),\n+                image.getRGB(minX, minY),\n+                image.getRGB(minX, maxY),\n+                image.getRGB(maxX, minY),\n+                image.getRGB(maxX, maxY));\n+    }\n+\n+    private static void generateRedSquare() throws IOException {\n+        BufferedImage bImg = new BufferedImage(SQUARE_WIDTH, SQUARE_HEIGHT,\n+                TYPE_INT_ARGB);\n+        Graphics2D cg = bImg.createGraphics();\n+        cg.setColor(Color.RED);\n+        cg.fillRect(0, 0, SQUARE_WIDTH, SQUARE_HEIGHT);\n+        ImageIO.write(bImg, \"png\", new File(testDir + \"\/red_square.png\"));\n+    }\n+\n+    private static void createButton() {\n+        button = new JButton();\n+        button.setSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));\n+        button.setText(\"<html><img src='\"\n+                + testDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n+    }\n+\n+    private static void paintButton() {\n+        image = new BufferedImage(BUTTON_HEIGHT, BUTTON_WIDTH, TYPE_INT_ARGB);\n+        Graphics2D graphics2D = image.createGraphics();\n+        button.paint(graphics2D);\n+        graphics2D.dispose();\n+    }\n+\n+    private static boolean checkRedColor(int rgb) {\n+        return (rgb == Color.RED.getRGB());\n+    }\n+\n+    private static void testImageCentering(int... colors) throws IOException {\n+        for (int c : colors) {\n+            if (!checkRedColor(c)) {\n+                ImageIO.write(image, \"png\",\n+                        new File(testDir + \"\/fail_image.png\"));\n+                throw new RuntimeException(\"HTML image not centered in button\");\n+            }\n+        }\n+        System.out.println(\"Passed\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/HtmlButtonImageTest\/HtmlButtonImageTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}