{"files":[{"patch":"@@ -308,1 +308,10 @@\n-        final String text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        final String text;\n+        final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n+\n+        \/\/ use zero insets for view since\n+        if (v != null) {\n+            text = layoutAndGetText(g, b, aquaBorder, new\n+                    Insets(0,0,0,0), viewRect, iconRect, textRect);\n+        } else {\n+            text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        }\n@@ -320,1 +329,0 @@\n-            final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+*\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8015854\n+ * @requires (os.family == \"mac\")\n+ * @summary Tests HTML image as JButton text for unwanted padding on Aqua LAF on MacOS\n+ * @run main HtmlButtonImageTest\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.nio.file.Path;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import java.awt.Color;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import java.io.File;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+public final class HtmlButtonImageTest {\n+    private static JFrame frame;\n+    private static Point point;\n+    private static JButton button;\n+    private static Path testDir;\n+\n+    public static final int BUTTON_HEIGHT = 37;\n+    public static final int BUTTON_WIDTH = 37;\n+    public static final int SQUARE_HEIGHT = 19;\n+    public static final int SQUARE_WIDTH = 19;\n+    public static final int PIXEL_BUFFER = 1;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+            throw new RuntimeException(\"Unsupported LookAndFeel: \" + e);\n+        }\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(2000);\n+        robot.setAutoWaitForIdle(true);\n+\n+        \/\/ store path to source directory to locate image\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n+\n+        \/\/ generate red_square.png image to use as JButton text\n+        generateImage();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            createAndShowGUI();\n+        });\n+\n+        \/\/ retrieve color of pixels at each edge of square image by starting at the center of the button\n+        robot.mouseMove(frame.getLocationOnScreen().x, frame.getLocationOnScreen().y);\n+        robot.mouseMove(button.getLocationOnScreen().x, button.getLocationOnScreen().y);\n+\n+        setupCenterCoord();\n+        robot.mouseMove(point.x, point.y);\n+\n+        \/\/ store each pixel color on the edge of each side of the red square\n+        Color leftClr = robot.getPixelColor(point.x - (SQUARE_WIDTH\/2) + PIXEL_BUFFER, point.y);\n+        Color rightClr = robot.getPixelColor(point.x + (SQUARE_WIDTH\/2) - PIXEL_BUFFER, point.y);\n+        Color topClr = robot.getPixelColor(point.x, point.y - (SQUARE_HEIGHT\/2) + PIXEL_BUFFER);\n+        Color botClr = robot.getPixelColor(point.x, point.y + (SQUARE_HEIGHT\/2) - PIXEL_BUFFER);\n+\n+        \/\/ dispose frame when done testing for a LAF before continuing\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame.dispose();\n+        });\n+\n+        testImageCentering(leftClr, rightClr, topClr, botClr);\n+    }\n+\n+    private static void createAndShowGUI()\n+    {\n+        frame = new JFrame();\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLayout(new FlowLayout());\n+\n+        \/\/ create JButton of size 37x37 text set to a 19x19 image of a red square loaded through html tags\n+        button = new JButton();\n+        button.setFocusPainted(false);\n+        button.setPreferredSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));\n+        button.setText(\"<html><img src='\" + testDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n+\n+        frame.add(button);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void setupCenterCoord() {\n+        \/\/ adjust coordinates to be the center of the button\n+        point = button.getLocationOnScreen();\n+        point.x += BUTTON_WIDTH \/ 2;\n+        point.y += BUTTON_HEIGHT \/ 2;\n+    }\n+\n+    private static boolean checkRedness(Color c) {\n+        \/\/ checks for redness since anti-aliasing causes edges to be not exactly 255,0,0 rgb values\n+        if(c.getRed() > 250 && c.getBlue() < 10 && c.getGreen() < 10) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static void testImageCentering(Color left, Color right, Color top, Color bottom) {\n+        \/\/ check if all colors at each edge of square are red\n+        if(!checkRedness(left) || !checkRedness(right) || !checkRedness(top) || !checkRedness(bottom)) {\n+            throw new RuntimeException(\"HTML image not centered in button\");\n+        }\n+        else {\n+            System.out.println(\"-- Passed\");\n+        }\n+    }\n+\n+    private static void generateImage() {\n+        BufferedImage bImg = new BufferedImage(SQUARE_WIDTH, SQUARE_HEIGHT, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D cg = bImg.createGraphics();\n+        \/\/ paint a red square onto cg\n+        cg.setColor(Color.RED);\n+        cg.fillRect(0, 0, SQUARE_WIDTH, SQUARE_HEIGHT);\n+        try {\n+            ImageIO.write(bImg, \"png\", new File(testDir + \"\/red_square.png\"));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed image generation: \" + e);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JButton\/HtmlButtonImageTest\/HtmlButtonImageTest.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}