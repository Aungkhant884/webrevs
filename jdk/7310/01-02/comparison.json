{"files":[{"patch":"@@ -308,1 +308,10 @@\n-        final String text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        final String text;\n+        final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n+\n+        \/\/ use zero insets for view since\n+        if (v != null) {\n+            text = layoutAndGetText(g, b, aquaBorder, new\n+                    Insets(0,0,0,0), viewRect, iconRect, textRect);\n+        } else {\n+            text = layoutAndGetText(g, b, aquaBorder, i, viewRect, iconRect, textRect);\n+        }\n@@ -320,1 +329,0 @@\n-            final View v = (View)c.getClientProperty(BasicHTML.propertyKey);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1129,7 +1129,2 @@\n-                if(availTextWidth < (int) v.getPreferredSpan(View.X_AXIS)){\n-                    text = SwingUtilities2.clipString(c, fm, text, availTextWidth);\n-                    textR.width = SwingUtilities2.stringWidth(c, fm, text);\n-                }\n-                else{\n-                    textR.width = Math.min(availTextWidth, (int) v.getPreferredSpan(View.X_AXIS));\n-                }\n+                textR.width = Math.min(availTextWidth,\n+                                       (int) v.getPreferredSpan(View.X_AXIS));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright 2022 JetBrains s.r.o.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n- *\/\n+*\/\n@@ -28,1 +28,2 @@\n- * @summary JButton text set as html image had additional unwanted padding\n+ * @requires (os.family == \"mac\")\n+ * @summary Tests HTML image as JButton text for unwanted padding on Aqua LAF on MacOS\n@@ -35,5 +36,0 @@\n-import java.awt.Insets;\n-import java.awt.Color;\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.image.BufferedImage;\n@@ -41,1 +37,0 @@\n-import java.net.URL;\n@@ -47,3 +42,1 @@\n-import javax.swing.SwingConstants;\n-import javax.swing.UnsupportedLookAndFeelException;\n-import javax.imageio.ImageIO;\n+import java.awt.Color;\n@@ -51,0 +44,1 @@\n+import javax.imageio.ImageIO;\n@@ -52,1 +46,2 @@\n-\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n@@ -57,1 +52,0 @@\n-    private static URL urlImage;\n@@ -59,2 +53,1 @@\n-\n-    private static Path srcDir;\n+    private static Path testDir;\n@@ -66,1 +59,1 @@\n-    public static final int PIXEL_BUFFER = 3;\n+    public static final int PIXEL_BUFFER = 1;\n@@ -69,0 +62,6 @@\n+        try {\n+            UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+            throw new RuntimeException(\"Unsupported LookAndFeel: \" + e);\n+        }\n+\n@@ -74,1 +73,1 @@\n-        srcDir = Path.of(System.getProperty(\"test.src\", \".\"));\n+        testDir = Path.of(System.getProperty(\"test.classes\", \".\"));\n@@ -77,0 +76,2 @@\n+        generateImage();\n+\n@@ -78,1 +79,1 @@\n-            generateImage();\n+            createAndShowGUI();\n@@ -81,6 +82,3 @@\n-        \/\/ cycle test through all available LAFs\n-        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n-            SwingUtilities.invokeAndWait(() -> {\n-                setLookAndFeel(laf);\n-                createAndShowGUI();\n-            });\n+        \/\/ retrieve color of pixels at each edge of square image by starting at the center of the button\n+        robot.mouseMove(frame.getLocationOnScreen().x, frame.getLocationOnScreen().y);\n+        robot.mouseMove(button.getLocationOnScreen().x, button.getLocationOnScreen().y);\n@@ -88,3 +86,2 @@\n-            \/\/ retrieve color of pixels at each edge of square image by starting at the center of the button\n-            robot.mouseMove(frame.getLocationOnScreen().x, frame.getLocationOnScreen().y);\n-            robot.mouseMove(button.getLocationOnScreen().x, button.getLocationOnScreen().y);\n+        setupCenterCoord();\n+        robot.mouseMove(point.x, point.y);\n@@ -92,2 +89,5 @@\n-            setupCenterCoord();\n-            robot.mouseMove(point.x, point.y);\n+        \/\/ store each pixel color on the edge of each side of the red square\n+        Color leftClr = robot.getPixelColor(point.x - (SQUARE_WIDTH\/2) + PIXEL_BUFFER, point.y);\n+        Color rightClr = robot.getPixelColor(point.x + (SQUARE_WIDTH\/2) - PIXEL_BUFFER, point.y);\n+        Color topClr = robot.getPixelColor(point.x, point.y - (SQUARE_HEIGHT\/2) + PIXEL_BUFFER);\n+        Color botClr = robot.getPixelColor(point.x, point.y + (SQUARE_HEIGHT\/2) - PIXEL_BUFFER);\n@@ -95,13 +95,4 @@\n-            \/\/ store each pixel color on the edge of each side of the red square\n-            Color leftClr = robot.getPixelColor(point.x - (SQUARE_WIDTH\/2) + PIXEL_BUFFER, point.y);\n-            Color rightClr = robot.getPixelColor(point.x + (SQUARE_WIDTH\/2) - PIXEL_BUFFER, point.y);\n-            Color topClr = robot.getPixelColor(point.x, point.y - (SQUARE_HEIGHT\/2) + PIXEL_BUFFER);\n-            Color botClr = robot.getPixelColor(point.x, point.y + (SQUARE_HEIGHT\/2) - PIXEL_BUFFER);\n-\n-            \/\/ close frame when complete\n-            SwingUtilities.invokeAndWait(() -> {\n-                frame.dispose();\n-            });\n-\n-            testImageCentering(leftClr, rightClr, topClr, botClr);\n-        }\n+        \/\/ dispose frame when done testing for a LAF before continuing\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame.dispose();\n+        });\n@@ -109,0 +100,1 @@\n+        testImageCentering(leftClr, rightClr, topClr, botClr);\n@@ -121,1 +113,1 @@\n-        button.setText(\"<html><img src='\" + srcDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n+        button.setText(\"<html><img src='\" + testDir.resolve(\"red_square.png\").toUri() + \"'><\/html>\");\n@@ -147,2 +139,1 @@\n-            System.out.println(\"-- Failed\");\n-\/\/            throw new RuntimeException(\"HTML image not centered in button\" + left + right + top + bottom);\n+            throw new RuntimeException(\"HTML image not centered in button\");\n@@ -155,12 +146,0 @@\n-    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n-        try {\n-            UIManager.setLookAndFeel(laf.getClassName());\n-            System.out.println(\"-- \" + laf.getName());\n-        } catch (UnsupportedLookAndFeelException ignored){\n-            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n-        } catch (ClassNotFoundException | InstantiationException |\n-                IllegalAccessException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n@@ -174,4 +153,1 @@\n-            if (ImageIO.write(bImg, \"png\", new File(srcDir + \"\/red_square.png\")))\n-            {\n-                System.out.println(\"-- Saved Image\");\n-            }\n+            ImageIO.write(bImg, \"png\", new File(testDir + \"\/red_square.png\"));\n@@ -179,1 +155,1 @@\n-            e.printStackTrace();\n+            throw new RuntimeException(\"Failed image generation: \" + e);\n","filename":"test\/jdk\/javax\/swing\/JButton\/HtmlButtonImageTest\/HtmlButtonImageTest.java","additions":39,"deletions":63,"binary":false,"changes":102,"status":"modified"}]}