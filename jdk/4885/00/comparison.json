{"files":[{"patch":"@@ -198,1 +198,10 @@\n-    if (strcmp(FileCountOptionKey, key) == 0) {\n+    if (strcmp(NewLineOptionKey, key) == 0) {\n+      \/\/ We need to pass <key>=<value> style option to LogFileStreamOutput::initialize().\n+      \/\/ Thus we restore '=' temporally.\n+      *equals_pos = '=';\n+      success = LogFileStreamOutput::initialize(pos, errstream);\n+      *equals_pos = '\\0';\n+      if (!success) {\n+        break;\n+      }\n+    } else if (strcmp(FileCountOptionKey, key) == 0) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+const char* const LogFileStreamOutput::NewLineOptionKey = \"newline\";\n+\n@@ -54,0 +56,27 @@\n+bool LogFileStreamOutput::initialize(const char* options, outputStream* errstream) {\n+  if (options == NULL || strlen(options) == 0) {\n+    return true;\n+  }\n+\n+  char* opts = os::strdup_check_oom(options, mtLogging);\n+  char* equals_pos = strchr(opts, '=');\n+  bool success = false;\n+  if (equals_pos == NULL) {\n+    errstream->print_cr(\"Invalid option '%s' for log file stream output.\", opts);\n+  } else {\n+    char* key = opts;\n+    char* value_str = equals_pos + 1;\n+    *equals_pos = '\\0';\n+\n+    if (strcmp(NewLineOptionKey, key) == 0) {\n+      _new_line = os::strdup_check_oom(value_str, mtLogging);\n+      success = true;\n+    } else {\n+      errstream->print_cr(\"Invalid option '%s' for log file stream output.\", options);\n+    }\n+  }\n+\n+  os::free(opts);\n+  return success;\n+}\n+\n@@ -120,0 +149,23 @@\n+int LogFileStreamOutput::write_internal(const char* msg) {\n+  int written = 0;\n+  if (_new_line == NULL) {\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+  } else {\n+    char *dupstr = os::strdup_check_oom(msg, mtLogging);\n+    char *cur = dupstr;\n+    char *next;\n+    do {\n+      next = strchr(cur, '\\n');\n+      if (next == NULL) {\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", cur), written);\n+      } else {\n+        *next = '\\0';\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s%s\", cur, _new_line), written);\n+        cur = next + 1;\n+      }\n+    } while (next != NULL);\n+    os::free(dupstr);\n+  }\n+  return written;\n+}\n+\n@@ -129,1 +181,1 @@\n-  WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+  written += write_internal(msg);\n@@ -144,1 +196,1 @@\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg_iterator.message()), written);\n+    written += write_internal(msg_iterator.message());\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":55,"deletions":3,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -44,0 +45,1 @@\n+  char*               _new_line;\n@@ -45,0 +47,2 @@\n+\n+  int write_internal(const char* msg);\n@@ -46,0 +50,1 @@\n+  static const char* const NewLineOptionKey;\n@@ -49,1 +54,1 @@\n-  LogFileStreamOutput(FILE *stream) : _write_error_is_shown(false), _stream(stream) {\n+  LogFileStreamOutput(FILE *stream) : _new_line(NULL), _write_error_is_shown(false), _stream(stream) {\n@@ -59,0 +64,8 @@\n+\n+  virtual ~LogFileStreamOutput() {\n+    if (_new_line != NULL) {\n+      os::free(_new_line);\n+    }\n+  }\n+\n+  virtual bool initialize(const char* options, outputStream* errstream);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4394,2 +4394,2 @@\n-\\f[CB]filecount=\\f[R]\\f[I]file\\-count\\f[R] \\f[CB]filesize=\\f[R]\\f[I]file size\n-with optional K, M or G suffix\\f[R]\n+\\f[CB]filecount=\\f[R]\\f[I]file\\-count\\f[R] \\f[CB]filesize=\\f[R]\\f[I]<file size\n+with optional K, M or G suffix>\\f[R] \\f[CB]newline=\\f[R]\\f[I]<chars to replace newline char (\\\\n)>\\f[R]\n","filename":"src\/java.base\/share\/man\/java.1","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}