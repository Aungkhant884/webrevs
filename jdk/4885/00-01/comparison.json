{"files":[{"patch":"@@ -198,1 +198,1 @@\n-    if (strcmp(NewLineOptionKey, key) == 0) {\n+    if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-const char* const LogFileStreamOutput::NewLineOptionKey = \"newline\";\n+const char* const LogFileStreamOutput::FoldMultilinesOptionKey = \"foldmultilines\";\n@@ -71,3 +71,10 @@\n-    if (strcmp(NewLineOptionKey, key) == 0) {\n-      _new_line = os::strdup_check_oom(value_str, mtLogging);\n-      success = true;\n+    if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n+      if (strcmp(value_str, \"true\") == 0) {\n+        _fold_multilines = true;\n+        success = true;\n+      } else if (strcmp(value_str, \"false\") == 0) {\n+        _fold_multilines = false;\n+        success = true;\n+      } else {\n+        errstream->print_cr(\"Invalid option '%s' for %s.\", value_str, FoldMultilinesOptionKey);\n+      }\n@@ -151,1 +158,1 @@\n-  if (_new_line == NULL) {\n+  if (!_fold_multilines) {\n@@ -158,1 +165,1 @@\n-      next = strchr(cur, '\\n');\n+      next = strpbrk(cur, \"\\n\\\\\");\n@@ -162,0 +169,1 @@\n+        const char *found = (*next == '\\n') ? \"\\\\n\" : \"\\\\\\\\\";\n@@ -163,1 +171,1 @@\n-        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s%s\", cur, _new_line), written);\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s%s\", cur, found), written);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  char*               _new_line;\n+  bool                _fold_multilines;\n@@ -50,1 +50,1 @@\n-  static const char* const NewLineOptionKey;\n+  static const char* const FoldMultilinesOptionKey;\n@@ -54,1 +54,1 @@\n-  LogFileStreamOutput(FILE *stream) : _new_line(NULL), _write_error_is_shown(false), _stream(stream) {\n+  LogFileStreamOutput(FILE *stream) : _fold_multilines(false), _write_error_is_shown(false), _stream(stream) {\n@@ -64,7 +64,0 @@\n-\n-  virtual ~LogFileStreamOutput() {\n-    if (_new_line != NULL) {\n-      os::free(_new_line);\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4395,1 +4395,1 @@\n-with optional K, M or G suffix>\\f[R] \\f[CB]newline=\\f[R]\\f[I]<chars to replace newline char (\\\\n)>\\f[R]\n+with optional K, M or G suffix>\\f[R] \\f[CB]foldmultilines=\\f[R]\\f[I]<true|false>\\f[R]\n","filename":"src\/java.base\/share\/man\/java.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271186\n+ * @library \/test\/lib\n+ * @run driver FoldMultilinesTest\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class FoldMultilinesTest {\n+\n+    private static Path EXCEPTION_LOG_FILE = Path.of(\"exceptions.log\");\n+    private static String XLOG_BASE = \"-Xlog:exceptions=info:file=\" + EXCEPTION_LOG_FILE.toString();\n+\n+    private static void analyzeFoldMultilinesOn(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        String logs = Files.readString(EXCEPTION_LOG_FILE);\n+        if (!logs.contains(\"line 1\\\\nline 2\\\\\\\\nstring\")) {\n+            throw new RuntimeException(\"foldmultilines=true did not work.\");\n+        }\n+    }\n+\n+    private static void analyzeFoldMultilinesOff(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        String logs = Files.readString(EXCEPTION_LOG_FILE);\n+        if (!logs.contains(\"line 1\\nline 2\\\\nstring\")) {\n+            throw new RuntimeException(\"foldmultilines=false did not work.\");\n+        }\n+    }\n+\n+    private static void analyzeFoldMultilinesInvalid(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Invalid option 'invalid' for foldmultilines.\");\n+        output.shouldNotHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String Xlog;\n+        ProcessBuilder pb;\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=true\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesOn(pb);\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=false\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesOff(pb);\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=invalid\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesInvalid(pb);\n+    }\n+\n+    public static class InternalClass {\n+        public static void main(String[] args) {\n+            try {\n+                throw new RuntimeException(\"line 1\\nline 2\\\\nstring\");\n+            } catch (Exception e) {\n+                \/\/ Do nothing to return exit code 0\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}