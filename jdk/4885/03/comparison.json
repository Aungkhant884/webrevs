{"files":[{"patch":"@@ -567,6 +567,12 @@\n-  out->print_cr(\"   filesize=..  - Target byte size for log rotation (supports K\/M\/G suffix).\"\n-                                    \" If set to 0, log rotation will not trigger automatically,\"\n-                                    \" but can be performed manually (see the VM.log DCMD).\");\n-  out->print_cr(\"   filecount=.. - Number of files to keep in rotation (not counting the active file).\"\n-                                    \" If set to 0, log rotation is disabled.\"\n-                                    \" This will cause existing log files to be overwritten.\");\n+  out->print_cr(\"   filesize=..       - Target byte size for log rotation (supports K\/M\/G suffix).\"\n+                                         \" If set to 0, log rotation will not trigger automatically,\"\n+                                         \" but can be performed manually (see the VM.log DCMD).\");\n+  out->print_cr(\"   filecount=..      - Number of files to keep in rotation (not counting the active file).\"\n+                                         \" If set to 0, log rotation is disabled.\"\n+                                         \" This will cause existing log files to be overwritten.\");\n+  out->print_cr(\"   foldmultilines=.. - The switch to replace newline characters with multiline log event\"\n+                                         \" with the character sequence.\"\n+                                         \" Escape newline (\\\\n) and backslash (\\\\) characters in the UL output\"\n+                                         \" if it is set to true.\"\n+                                         \" Note that it works on file output only.\");\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -198,1 +198,10 @@\n-    if (strcmp(FileCountOptionKey, key) == 0) {\n+    if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n+      \/\/ We need to pass <key>=<value> style option to LogFileStreamOutput::initialize().\n+      \/\/ Thus we restore '=' temporally.\n+      *equals_pos = '=';\n+      success = LogFileStreamOutput::initialize(pos, errstream);\n+      *equals_pos = '\\0';\n+      if (!success) {\n+        break;\n+      }\n+    } else if (strcmp(FileCountOptionKey, key) == 0) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+const char* const LogFileStreamOutput::FoldMultilinesOptionKey = \"foldmultilines\";\n+\n@@ -54,0 +56,34 @@\n+bool LogFileStreamOutput::initialize(const char* options, outputStream* errstream) {\n+  if (options == NULL || strlen(options) == 0) {\n+    return true;\n+  }\n+\n+  char* opts = os::strdup_check_oom(options, mtLogging);\n+  char* equals_pos = strchr(opts, '=');\n+  bool success = false;\n+  if (equals_pos == NULL) {\n+    errstream->print_cr(\"Invalid option '%s' for log file stream output.\", opts);\n+  } else {\n+    char* key = opts;\n+    char* value_str = equals_pos + 1;\n+    *equals_pos = '\\0';\n+\n+    if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n+      if (strcmp(value_str, \"true\") == 0) {\n+        _fold_multilines = true;\n+        success = true;\n+      } else if (strcmp(value_str, \"false\") == 0) {\n+        _fold_multilines = false;\n+        success = true;\n+      } else {\n+        errstream->print_cr(\"Invalid option '%s' for %s.\", value_str, FoldMultilinesOptionKey);\n+      }\n+    } else {\n+      errstream->print_cr(\"Invalid option '%s' for log file stream output.\", options);\n+    }\n+  }\n+\n+  os::free(opts);\n+  return success;\n+}\n+\n@@ -120,0 +156,24 @@\n+int LogFileStreamOutput::write_internal(const char* msg) {\n+  int written = 0;\n+  if (!_fold_multilines) {\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+  } else {\n+    char *dupstr = os::strdup_check_oom(msg, mtLogging);\n+    char *cur = dupstr;\n+    char *next;\n+    do {\n+      next = strpbrk(cur, \"\\n\\\\\");\n+      if (next == NULL) {\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", cur), written);\n+      } else {\n+        const char *found = (*next == '\\n') ? \"\\\\n\" : \"\\\\\\\\\";\n+        *next = '\\0';\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s%s\", cur, found), written);\n+        cur = next + 1;\n+      }\n+    } while (next != NULL);\n+    os::free(dupstr);\n+  }\n+  return written;\n+}\n+\n@@ -129,1 +189,1 @@\n-  WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+  written += write_internal(msg);\n@@ -144,1 +204,1 @@\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg_iterator.message()), written);\n+    written += write_internal(msg_iterator.message());\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -44,0 +45,1 @@\n+  bool                _fold_multilines;\n@@ -45,0 +47,2 @@\n+\n+  int write_internal(const char* msg);\n@@ -46,0 +50,1 @@\n+  static const char* const FoldMultilinesOptionKey;\n@@ -49,1 +54,1 @@\n-  LogFileStreamOutput(FILE *stream) : _write_error_is_shown(false), _stream(stream) {\n+  LogFileStreamOutput(FILE *stream) : _fold_multilines(false), _write_error_is_shown(false), _stream(stream) {\n@@ -59,0 +64,1 @@\n+  virtual bool initialize(const char* options, outputStream* errstream);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4421,2 +4421,7 @@\n-\\f[CB]filecount=\\f[R]\\f[I]file\\-count\\f[R] \\f[CB]filesize=\\f[R]\\f[I]file size\n-with optional K, M or G suffix\\f[R]\n+\\f[CB]filecount=\\f[R]\\f[I]file\\-count\\f[R] \\f[CB]filesize=\\f[R]\\f[I]<file size\n+with optional K, M or G suffix>\\f[R] \\f[CB]foldmultilines=\\f[R]\\f[I]<true|false>\\f[R]\n+.RE\n+.PP\n+\\f[I]foldmultilines\\f[R] enables to replace newline characters within\n+a multiline log event with the character sequence '\\\\' and 'n'.\n+Note that it works on file output only.\n","filename":"src\/java.base\/share\/man\/java.1","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271186\n+ * @library \/test\/lib\n+ * @run driver FoldMultilinesTest\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class FoldMultilinesTest {\n+\n+    private static Path EXCEPTION_LOG_FILE = Path.of(\"exceptions.log\");\n+    private static String XLOG_BASE = \"-Xlog:exceptions=info:file=\" + EXCEPTION_LOG_FILE.toString();\n+\n+    private static void analyzeFoldMultilinesOn(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        String logs = Files.readString(EXCEPTION_LOG_FILE);\n+        if (!logs.contains(\"line 1\\\\nline 2\\\\\\\\nstring\")) {\n+            throw new RuntimeException(\"foldmultilines=true did not work.\");\n+        }\n+    }\n+\n+    private static void analyzeFoldMultilinesOff(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        String logs = Files.readString(EXCEPTION_LOG_FILE);\n+        if (!logs.contains(\"line 1\" + System.lineSeparator() + \"line 2\\\\nstring\")) {\n+            throw new RuntimeException(\"foldmultilines=false did not work.\");\n+        }\n+    }\n+\n+    private static void analyzeFoldMultilinesInvalid(ProcessBuilder pb) throws Exception {\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Invalid option 'invalid' for foldmultilines.\");\n+        output.shouldNotHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String Xlog;\n+        ProcessBuilder pb;\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=true\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesOn(pb);\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=false\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesOff(pb);\n+\n+        Xlog = XLOG_BASE + \"::foldmultilines=invalid\";\n+        pb = ProcessTools.createJavaProcessBuilder(Xlog, InternalClass.class.getName());\n+        analyzeFoldMultilinesInvalid(pb);\n+    }\n+\n+    public static class InternalClass {\n+        public static void main(String[] args) {\n+            try {\n+                throw new RuntimeException(\"line 1\\nline 2\\\\nstring\");\n+            } catch (Exception e) {\n+                \/\/ Do nothing to return exit code 0\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}