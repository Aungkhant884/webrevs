{"files":[{"patch":"@@ -147,1 +147,1 @@\n-  guarantee_mt_safty_active();\n+  guarantee_mt_safety_active();\n@@ -154,1 +154,1 @@\n-  guarantee_mt_safty_active();\n+  guarantee_mt_safety_active();\n@@ -161,1 +161,1 @@\n-  guarantee_mt_safty_inactive();\n+  guarantee_mt_safety_inactive();\n@@ -168,1 +168,1 @@\n-  guarantee_mt_safty_inactive();\n+  guarantee_mt_safety_inactive();\n@@ -174,1 +174,1 @@\n-void G1CommittedRegionMap::guarantee_mt_safty_active() const {\n+void G1CommittedRegionMap::guarantee_mt_safety_active() const {\n@@ -195,1 +195,1 @@\n-void G1CommittedRegionMap::guarantee_mt_safty_inactive() const {\n+void G1CommittedRegionMap::guarantee_mt_safety_inactive() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  \/\/ these helpers require to own different locks. See guarantee_mt_safty_* for\n+  \/\/ these helpers require to own different locks. See guarantee_mt_safety_* for\n@@ -85,1 +85,1 @@\n-  \/\/ Mark a range of regions as inactive and ready to be uncommited.\n+  \/\/ Mark a range of regions as inactive and ready to be uncommitted.\n@@ -102,2 +102,2 @@\n-  virtual void guarantee_mt_safty_active() const;\n-  virtual void guarantee_mt_safty_inactive() const;\n+  virtual void guarantee_mt_safety_active() const;\n+  virtual void guarantee_mt_safety_inactive() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,4 @@\n-  \/\/ an underlying OS page.\n+  \/\/ an underlying OS page. So we need to make sure that both\n+  \/\/ those resources are in sync:\n+  \/\/ - G1RegionToSpaceMapper::_region_commit_map;\n+  \/\/ - G1PageBasedVirtualSpace::_committed (_storage.commit())\n@@ -189,1 +192,0 @@\n-    MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n@@ -191,0 +193,1 @@\n+      MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n@@ -212,2 +215,3 @@\n-      \/\/ Update the commit map for the given range.\n-      _region_commit_map.par_set_range(start_idx, region_limit, BitMap::unknown_range);\n+      \/\/ Update the commit map for the given range. Not using the par_set_range\n+      \/\/ since updates to _region_commit_map for this mapper is protected by _lock.\n+      _region_commit_map.set_range(start_idx, region_limit, BitMap::unknown_range);\n@@ -235,2 +239,3 @@\n-    \/\/ Clear commit map for the given range.\n-    _region_commit_map.par_clear_range(start_idx, region_limit, BitMap::unknown_range);\n+    \/\/ Clear commit map for the given range. Not using the par_clear_range since\n+    \/\/ updates to _region_commit_map for this mapper is protected by _lock.\n+    _region_commit_map.clear_range(start_idx, region_limit, BitMap::unknown_range);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -134,0 +134,6 @@\n+\n+  \/\/ G1RegionCommittedMap helpers. These functions do the work that comes with\n+  \/\/ the state changes tracked by G1CommittedRegionMap. To make sure this is\n+  \/\/ safe from a multi-threading point of view there are two lock protocols in\n+  \/\/ G1RegionCommittedMap::guarantee_mt_safety_* that are enforced. The lock\n+  \/\/ needed should have been acquired before calling these functions.\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-  void guarantee_mt_safty_active() const {  }\n-  void guarantee_mt_safty_inactive() const { }\n+  void guarantee_mt_safety_active() const { }\n+  void guarantee_mt_safety_inactive() const { }\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1RegionMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}