{"files":[{"patch":"@@ -179,4 +179,0 @@\n-    \/**\n-     * The layout for the {@code long double} C type.\n-     *\/\n-    ValueLayout C_LONG_DOUBLE = pick(SysV.C_LONG_DOUBLE, Win64.C_LONG_DOUBLE, AArch64.C_LONG_DOUBLE);\n@@ -297,1 +293,1 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n@@ -319,1 +315,1 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n@@ -338,1 +334,1 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n@@ -358,1 +354,1 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n@@ -730,1 +726,1 @@\n-         * A kind corresponding to the C {@code char} type\n+         * A kind corresponding to the <em>integral<\/em> C {@code char} type\n@@ -734,1 +730,1 @@\n-         * A kind corresponding to the C {@code short} type\n+         * A kind corresponding to the <em>integral<\/em> C {@code short} type\n@@ -738,1 +734,1 @@\n-         * A kind corresponding to the C {@code int} type\n+         * A kind corresponding to the <em>integral<\/em> C {@code int} type\n@@ -742,1 +738,1 @@\n-         * A kind corresponding to the C {@code long} type\n+         * A kind corresponding to the <em>integral<\/em> C {@code long} type\n@@ -746,1 +742,1 @@\n-         * A kind corresponding to the C {@code long long} type\n+         * A kind corresponding to the <em>integral<\/em> C {@code long long} type\n@@ -748,1 +744,1 @@\n-        LONGLONG(true),\n+        LONG_LONG(true),\n@@ -750,1 +746,1 @@\n-         * A kind corresponding to the C {@code float} type\n+         * A kind corresponding to the <em>floating-point<\/em> C {@code float} type\n@@ -754,1 +750,1 @@\n-         * A kind corresponding to the C {@code double} type\n+         * A kind corresponding to the <em>floating-point<\/em> C {@code double} type\n@@ -758,5 +754,1 @@\n-         * A kind corresponding to the C {@code long double} type\n-         *\/\n-        LONGDOUBLE(false),\n-        \/**\n-         * A kind corresponding to the a C pointer type\n+         * A kind corresponding to the an <em>integral<\/em> C pointer type\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                .withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.LONGLONG);\n+                .withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.LONG_LONG);\n@@ -88,5 +88,0 @@\n-    private static ValueLayout ofLongDouble(ByteOrder order, long bitSize) {\n-        return MemoryLayout.ofValueBits(bitSize, order)\n-                .withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.LONGDOUBLE);\n-    }\n-\n@@ -146,5 +141,0 @@\n-        \/**\n-         * The {@code long double} native type.\n-         *\/\n-        public static final ValueLayout C_LONG_DOUBLE = ofLongDouble(LITTLE_ENDIAN, 128);\n-\n@@ -211,5 +201,0 @@\n-        \/**\n-         * The {@code long double} native type.\n-         *\/\n-        public static final ValueLayout C_LONG_DOUBLE = ofLongDouble(LITTLE_ENDIAN, 64);\n-\n@@ -281,5 +266,0 @@\n-        \/**\n-         * The {@code long double} native type.\n-         *\/\n-        public static final ValueLayout C_LONG_DOUBLE = ofLongDouble(LITTLE_ENDIAN, 128);\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            case CHAR, SHORT, INT, LONG, LONGLONG -> INTEGER;\n+            case CHAR, SHORT, INT, LONG, LONG_LONG -> INTEGER;\n@@ -48,1 +48,1 @@\n-            case FLOAT, DOUBLE, LONGDOUBLE -> FLOAT;\n+            case FLOAT, DOUBLE -> FLOAT;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/TypeClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            case CHAR, SHORT, INT, LONG, LONGLONG -> ArgumentClassImpl.INTEGER;\n+            case CHAR, SHORT, INT, LONG, LONG_LONG -> ArgumentClassImpl.INTEGER;\n@@ -113,1 +113,0 @@\n-            case LONGDOUBLE -> ArgumentClassImpl.X87;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            case CHAR, SHORT, INT, LONG, LONGLONG -> INTEGER;\n+            case CHAR, SHORT, INT, LONG, LONG_LONG -> INTEGER;\n@@ -55,1 +55,1 @@\n-            case FLOAT, DOUBLE, LONGDOUBLE -> {\n+            case FLOAT, DOUBLE -> {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            C_LONG_LONG,\n+        C_LONG_LONG,\n@@ -63,1 +63,0 @@\n-            C_LONG_DOUBLE,\n","filename":"test\/jdk\/java\/foreign\/TestCondy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}