[{"commit":{"message":"Don't use JNI when generating native wrappers\n"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp"},{"filename":"src\/hotspot\/share\/prims\/foreign_globals.cpp"},{"filename":"src\/hotspot\/share\/prims\/foreign_globals.hpp"},{"filename":"src\/hotspot\/share\/prims\/foreign_globals.inline.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.hpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp"},{"filename":"src\/hotspot\/share\/prims\/upcallStubs.cpp"}],"sha":"7cef16f41e22fe1332b7c263aae5a6339a833f32"},{"commit":{"message":"Merge branch 'master' into 8254231_linker"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/c1\/c1_IR.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.cpp"},{"filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp"},{"filename":"src\/hotspot\/share\/code\/debugInfoRec.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/pcDesc.hpp"},{"filename":"src\/hotspot\/share\/code\/scopeDesc.hpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/hotspot\/share\/utilities\/growableArray.hpp"},{"filename":"test\/lib\/sun\/hotspot\/WhiteBox.java"}],"sha":"502bd980911fb6a502494739562550b68e17eab4"},{"commit":{"message":"Fix incorrect capitalization in one copyright header"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractNativeScope.java"}],"sha":"7d6eadc7bb4be1b23484c14059015dbe7610fec5"},{"commit":{"message":"Update copyright years, and add classpath exception to files that were missing it"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_IR.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.cpp"},{"filename":"src\/hotspot\/share\/code\/debugInfoRec.hpp"},{"filename":"src\/hotspot\/share\/code\/pcDesc.hpp"},{"filename":"src\/hotspot\/share\/code\/scopeDesc.hpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.hpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp"},{"filename":"src\/hotspot\/share\/prims\/upcallStubs.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/NativeLibraryProxy.java"},{"filename":"src\/java.base\/share\/native\/libjava\/jni_util.h"},{"filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractNativeScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LibrariesHelper.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ABIDescriptor.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingInterpreter.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/BufferLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableUpcallHandler.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallHandler.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java"},{"filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayoutConstants.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java"},{"filename":"test\/jdk\/java\/foreign\/libTestDowncall.c"},{"filename":"test\/jdk\/java\/foreign\/libTestDowncall.h"},{"filename":"test\/jdk\/java\/foreign\/libTestUpcall.c"},{"filename":"test\/jdk\/java\/foreign\/libTestUpcall.h"},{"filename":"test\/jdk\/java\/foreign\/libVarArgs.c"}],"sha":"aee22456ab4168e21931dbd186d9dfc386ff94d8"},{"commit":{"message":"Use separate constants for native invoker code size"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp"}],"sha":"c595a8dd7686e51284aa105fc163e63a5037242e"},{"commit":{"message":"Re-add file erroneously deleted (detected as rename)"},"files":[],"sha":"830c5cea306718352cc1b35b28693c9b576b0279"},{"commit":{"message":"Re-add erroneously removed files"},"files":[],"sha":"2184831e0f35be00b09b58cdc07a8a55979727ec"},{"commit":{"message":"Merge branch 'master' into 8254231_linker\n\n- Fix tests"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp"},{"filename":"src\/hotspot\/share\/oops\/method.cpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/hotspot\/share\/opto\/callGenerator.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"},{"filename":"src\/hotspot\/share\/opto\/type.cpp"},{"filename":"src\/hotspot\/share\/opto\/type.hpp"},{"filename":"src\/hotspot\/share\/prims\/methodHandles.cpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"ad8bee129f7f4a9506d99d564b3521b6a8b86d54"},{"commit":{"message":"Fix more whitespaces"},"files":[{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.hpp"}],"sha":"7cf0ef09f17c5b5d94f692fae27265962ce68457"},{"commit":{"message":"Fix whitespaces"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java"}],"sha":"7cc344cc3686208c7cd75009b5b095e83712546a"},{"commit":{"message":"Remove rejected file"},"files":[],"sha":"8ce0357404159a705a8bdc217c90a3d7bfce09e1"},{"commit":{"message":"More updates"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/NativeEntryPoint.java"}],"sha":"4f2ed7ca0abae8558e6ce1fe984b69e42d4feff2"},{"commit":{"message":"Add new files"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciNativeEntryPoint.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciNativeEntryPoint.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.hpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp"},{"filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp"},{"filename":"src\/hotspot\/share\/prims\/upcallStubs.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/NativeMethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/NativeLibraryProxy.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/ABIDescriptorProxy.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/NativeEntryPoint.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/VMStorageProxy.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/NativeScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractNativeScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LibrariesHelper.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ABIDescriptor.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingInterpreter.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/BufferLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableUpcallHandler.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallHandler.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Linker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/TypeClass.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/ArgumentClassImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java"},{"filename":"test\/jdk\/java\/foreign\/CallGeneratorHelper.java"},{"filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java"},{"filename":"test\/jdk\/java\/foreign\/StdLibTest.java"},{"filename":"test\/jdk\/java\/foreign\/TestCircularInit1.java"},{"filename":"test\/jdk\/java\/foreign\/TestCircularInit2.java"},{"filename":"test\/jdk\/java\/foreign\/TestCondy.java"},{"filename":"test\/jdk\/java\/foreign\/TestDowncall.java"},{"filename":"test\/jdk\/java\/foreign\/TestFree.java"},{"filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java"},{"filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java"},{"filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java"},{"filename":"test\/jdk\/java\/foreign\/TestLibraryLookup.java"},{"filename":"test\/jdk\/java\/foreign\/TestNativeScope.java"},{"filename":"test\/jdk\/java\/foreign\/TestUpcall.java"},{"filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java"},{"filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarArgs.java"},{"filename":"test\/jdk\/java\/foreign\/callarranger\/CallArrangerTestBase.java"},{"filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java"},{"filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java"},{"filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java"},{"filename":"test\/jdk\/java\/foreign\/libIntrinsics.c"},{"filename":"test\/jdk\/java\/foreign\/libLookupTest.c"},{"filename":"test\/jdk\/java\/foreign\/libTestDowncall.c"},{"filename":"test\/jdk\/java\/foreign\/libTestDowncall.h"},{"filename":"test\/jdk\/java\/foreign\/libTestUpcall.c"},{"filename":"test\/jdk\/java\/foreign\/libTestUpcall.h"},{"filename":"test\/jdk\/java\/foreign\/libTestUpcallHighArity.c"},{"filename":"test\/jdk\/java\/foreign\/libVarArgs.c"},{"filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java"},{"filename":"test\/jdk\/java\/foreign\/stackwalk\/libStackWalk.c"},{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"},{"filename":"test\/jdk\/java\/foreign\/valist\/libVaList.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverhead.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libCallOverhead.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libCallOverheadJNI.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libUpcalls.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libUpcallsJNI.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libVaList.c"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsDistance.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/libPoint.c"}],"sha":"adcef6a7d17cb36528b24f58dbe5dd6a30c84ea6"},{"commit":{"message":"Merge with master"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/javaFrameAnchor_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_IR.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciClassList.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciObjArray.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciObject.hpp"},{"filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp"},{"filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp"},{"filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/code\/codeCache.cpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.cpp"},{"filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp"},{"filename":"src\/hotspot\/share\/code\/debugInfoRec.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.hpp"},{"filename":"src\/hotspot\/share\/code\/pcDesc.hpp"},{"filename":"src\/hotspot\/share\/code\/scopeDesc.hpp"},{"filename":"src\/hotspot\/share\/code\/vmreg.hpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp"},{"filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp"},{"filename":"src\/hotspot\/share\/oops\/method.cpp"},{"filename":"src\/hotspot\/share\/opto\/callGenerator.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.hpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.cpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"},{"filename":"src\/hotspot\/share\/opto\/type.cpp"},{"filename":"src\/hotspot\/share\/opto\/type.hpp"},{"filename":"src\/hotspot\/share\/prims\/methodHandles.cpp"},{"filename":"src\/hotspot\/share\/prims\/methodHandles.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/frame.cpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/hotspot\/share\/utilities\/growableArray.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/System.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodTypeForm.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/java.base\/share\/native\/libjava\/NativeLibraries.c"},{"filename":"src\/java.base\/share\/native\/libjava\/jni_util.h"},{"filename":"src\/java.base\/unix\/native\/libjava\/jni_util_md.c"},{"filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/Addressable.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayoutConstants.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java"},{"filename":"test\/jdk\/java\/foreign\/libNativeAccess.c"},{"filename":"test\/lib\/sun\/hotspot\/WhiteBox.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/BulkOps.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsAccess.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsAlloc.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsFree.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/BBPoint.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/JNIPoint.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/libJNIPoint.c"}],"sha":"4506d75c15a46b873e180670259f0f52a2e61fb6"},{"commit":{"message":"Merge branch 'master' into 8254162"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"test\/lib\/sun\/hotspot\/WhiteBox.java"}],"sha":"e866bb23b0d9d0017d195673ec3fc44dbf15222d"},{"commit":{"message":"Remove spurious check on MemoryScope::confineTo\nAdded tests to make sure no spurious exception is thrown when:\n* handing off a segment from A to A\n* sharing an already shared segment"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"8fb8ff2ff977a4fc7296163d0f9db4169fdea2e2"},{"commit":{"message":"Merge branch 'master' into 8254162"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"8815d941e0231a655703e55796bfe38996256830"},{"commit":{"message":"Simplify example in the toplevel javadoc"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"}],"sha":"d14d06a4bdf54be3a6fe900f11010fa5aa5d5836"},{"commit":{"message":"Tweak support for mapped memory segments"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegments.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"75e406c0b46380b5ed0aeffaaa523794fca69e3f"},{"commit":{"message":"Tweak referenced to MemoryAddressProxy in Utils.java"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"}],"sha":"770b1e9c6550f628cb2b8378a9fa272ce27ec277"},{"commit":{"message":"Fix performance issue with \"small\" segment mismatch"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"}],"sha":"9b3fc2271e89fbea8d5381244826d05f800a4b74"},{"commit":{"message":"Address review comments"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"test\/jdk\/java\/foreign\/TestCleaner.java"}],"sha":"d96c32ac4a57f6d0fdd0e551659bd2106bd18db5"},{"commit":{"message":"Fix indent in GensrcScopedMemoryAccess.gmk"},"files":[{"filename":"make\/modules\/java.base\/gensrc\/GensrcScopedMemoryAccess.gmk"}],"sha":"b941c4a2ae1f4a99744e2e3787df76612f90b4d0"},{"commit":{"message":"Address review comments"},"files":[{"filename":"make\/modules\/java.base\/gensrc\/GensrcScopedMemoryAccess.gmk"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"fa051abf895d113674851b73084114afa03f6843"},{"commit":{"message":"Add modified files"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/BufferMismatch.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/ByteBufferAs-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer-bin.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayouts.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayouts.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryHandleAsUnsigned.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSlices.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"}],"sha":"e4eb2c7432f35e35ab88322d58658802be57b1d7"},{"commit":{"message":"RFR 8254162: Implementation of Foreign-Memory Access API (Third Incubator)\n\nThis patch contains the changes associated with the third incubation round of the foreign memory access API incubation  (see JEP 393 [1]). This iteration focus on improving the usability of the API in 3 main ways:\n\n* first, by providing a way to obtain truly *shared* segments, which can be accessed and closed concurrently from multiple threads\n* second, by providing a way to register a memory segment against a `Cleaner`, so as to have some (optional) guarantee that the memory will be deallocated, eventually\n* third, by not requiring users to dive deep into var handles when they first pick up the API; a new `MemoryAccess` class has been added, which defines several useful dereference routines; these are really just thin wrappers around memory access var handles, but they make the barrier of entry for using this API somewhat lower.\n\nA big conceptual shift that comes with this API refresh is that the role of `MemorySegment` and `MemoryAddress` is not the same as it used to be; it used to be the case that a memory address could (sometimes, not always) have a back link to the memory segment which originated it; additionally, memory access var handles used `MemoryAddress` as a basic unit of dereference.\n\nThis has all changed as per this API refresh;  now a `MemoryAddress` is just a dumb carrier which wraps a pair of object\/long addressing coordinates; `MemorySegment` has become the star of the show, as far as dereferencing memory is concerned. You cannot dereference memory if you don't have a segment. This improves usability in a number of ways - first, it is a lot easier to wrap native addresses (`long`, essentially) into a `MemoryAddress`; secondly, it is crystal clear what a client has to do in order to dereference memory: if a client has a segment, it can use that; otherwise, if the client only has an address, it will have to create a segment *unsafely* (this can be done by calling `MemoryAddress::asSegmentRestricted`).\n\nA list of the API, implementation and test changes is provided below. If  you have any questions, or need more detailed explanations, I (and the  rest of the Panama team) will be happy to point at existing discussions,  and\/or to provide the feedback required.\n\nA big thank to Erik Osterlund, Vladimir Ivanov and David Holmes, without whom the work on shared memory segment would not have been possible.\n\nThanks\nMaurizio\n\nJavadoc:\n\nhttp:\/\/cr.openjdk.java.net\/~mcimadamore\/8254162_v1\/javadoc\/jdk\/incubator\/foreign\/package-summary.html\n\nSpecdiff:\n\nhttp:\/\/cr.openjdk.java.net\/~mcimadamore\/8254162_v1\/specdiff\/jdk\/incubator\/foreign\/package-summary.html\n\nCSR:\n\nhttps:\/\/bugs.openjdk.java.net\/browse\/JDK-8254163\n\n* `MemorySegment`\n  * drop factory for restricted segment (this has been moved to `MemoryAddress`, see below)\n  * added a no-arg factory for a native restricted segment representing entire native heap\n  * rename `withOwnerThread` to `handoff`\n  * add new `share` method, to create shared segments\n  * add new `registerCleaner` method, to register a segment against a cleaner\n  * add more helpers to create arrays from a segment e.g. `toIntArray`\n  * add some `asSlice` overloads (to make up for the fact that now segments are more frequently used as cursors)\n  * rename `baseAddress` to `address` (so that `MemorySegment` can implement `Addressable`)\n* `MemoryAddress`\n  * drop `segment` accessor\n  * drop `rebase` method and replace it with `segmentOffset` which returns the offset (a `long`) of this address relative to a given segment\n* `MemoryAccess`\n  * New class supporting several static dereference helpers; the helpers are organized by carrier and access mode, where a carrier is one of the usual suspect (a Java primitive, minus `boolean`); the access mode can be simple (e.g. access base address of given segment), or indexed, in which case the accessor takes a segment and either a low-level byte offset,or a high level logical index. The classification is reflected in the naming scheme (e.g. `getByte` vs. `getByteAtOffset` vs `getByteAtIndex`).\n* `MemoryHandles`\n  * drop `withOffset` combinator\n  * drop `withStride` combinator\n  * the basic memory access handle factory now returns a var handle which takes a `MemorySegment` and a `long` - from which it is easy to derive all the other handles using plain var handle combinators.\n* `Addressable`\n  * This is a new interface which is attached to entities which can be projected to a `MemoryAddress`. For now, both `MemoryAddress` and `MemorySegment` implement it; we have plans, with JEP 389 [2] to add more implementations. Clients can largely ignore this interface, which comes in really handy when defining native bindings with tools like `jextract`.\n* `MemoryLayouts`\n  * A new layout, for machine addresses, has been added to the mix.\n\nThere are two main things to discuss here: support for shared segments, and the general simplification of the memory access var handle support.\n\nThe support for shared segments cuts in pretty deep in the VM. Support for shared segments is notoriously hard to achieve, at least in a way that guarantees optimal access performances. This is caused by the fact that, if a segment is shared, it would be possible for a thread to close it while another is accessing it.\n\nAfter considering several options (see [3]), we zeroed onto an approach which is inspired by an happy idea that Andrew Haley had (and that he reminded me of at this year OpenJDK committer workshop - thanks!). The idea is that if we could *freeze* the world (e.g. with a GC pause), while a segment is closed, we could then prevent segments from being accessed concurrently to a close operation. For this to work, it  is crucial that no GC safepoints can occur between a segment liveness check and the access itself (otherwise it would be possible for the accessing thread to stop just right before an unsafe call). It also relies on the fact that hotspot\/C2 should not be able to propagate loads across safepoints.\n\nSadly, none of these conditions seems to be valid in the current implementation, so we needed to resort to a bit of creativity. First, we noted that, if we could mark so called *scoped* method with an annotation, it would be very simply to check as to whether a thread was in the middle of a scoped method when we stopped the world for a close operation (btw, instead of stopping the world, we do a much more efficient, thread-local polling, thanks to JEP 312 [4]).\n\nThe question is, then, once we detect that a thread is accessing the very segment we're about to close, what should happen? We first experimented with a solution which would install an *asynchronous* exception on the accessing thread, thus making it fail. This solution has some desirable properties, in that a `close` operation always succeeds. Unfortunately the machinery for async exceptions is a bit fragile (e.g. not all the code in hotspot checks for async exceptions); to minimize risks, we decided to revert to a simpler strategy, where `close` might fail when it finds that another thread is accessing the segment being closed.\n\nAs written in the javadoc, this doesn't mean that clients should just catch and try again; an exception on `close` is a bug in the user code, likely arising from lack of synchronization, and should be treated as such.\n\nIn terms of gritty implementation, we needed to centralize memory access routines in a single place, so that we could have a set of routines closely mimicking the primitives exposed by `Unsafe` but which, in addition, also provided a liveness check. This way we could mark all these routines with the special `@Scoped` annotation, which tells the VM that something important is going on.\n\nTo achieve this, we created a new (autogenerated) class, called `ScopedMemoryAccess`. This class contains all the main memory access primitives (including bulk access, like `copyMemory`, or `setMemory`), and accepts, in addition to the access coordinates, also a scope object, which is tested before access. A reachability fence is also thrown in the mix to make sure that the scope is kept alive during access (which is important when registering segments against cleaners).\n\nOf course, to make memory access safe, memory access var handles, byte buffer var handles, and byte buffer API should use the new `ScopedMemoryAccess` class instead of unsafe, so that a liveness check can be triggered (in case a scope is present).\n\n`ScopedMemoryAccess` has a `closeScope` method, which initiates the thread-local handshakes, and returns `true` if the handshake completed successfully.\n\nThe implementation of `MemoryScope` (now significantly simplified from what we had before), has two implementations, one for confined segments and one for shared segments; the main difference between the two is what happens when the scope is closed; a confined segment sets a boolean flag to false, and returns, whereas a shared segment goes into a `CLOSING` state, then starts the handshake, and then updates the state again, to either `CLOSED` or `ALIVE` depending on whether the handshake was successful or not. Note that when a shared segment is in the `CLOSING` state, `MemorySegment::isAlive` will still return `true`, while the liveness check upon memory access will fail.\n\nThe key realization here was that if all memory access var handles took a coordinate pair of `MemorySegment` and `long`, all other access types could be derived from this basic var handle form.\n\nThis allowed us to remove the on-the-fly var handle generation, and to simply derive structural access var handles (such as those obtained by calling `MemoryLayout::varHandle`) using *plain* var handle combinators, so that e.g. additional offset is injected into a base memory access var handle.\n\nThis also helped in simplifying the implementation by removing the special `withStride` and `withOffset` combinators, which previously needed low-level access on the innards of the memory access var handle. All that code is now gone.\n\nNot much to see here - most of the tests needed to be updated because of the API changes. Some were beefed up (like the array test, since now segments can be projected into many different kinds of arrays). A test has been added to test the `Cleaner` functionality, and another stress test has been added for shared segments (`TestHandshake`). Some of the microbenchmarks also needed some tweaks - and some of them were also updated to also test performance in the shared segment case.\n\n[1] - https:\/\/openjdk.java.net\/jeps\/393\n[2] - https:\/\/openjdk.java.net\/jeps\/389\n[3] - https:\/\/mail.openjdk.java.net\/pipermail\/panama-dev\/2020-May\/009004.html\n[4] - https:\/\/openjdk.java.net\/jeps\/312"},"files":[{"filename":"make\/modules\/java.base\/gensrc\/GensrcScopedMemoryAccess.gmk"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/Addressable.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestCleaner.java"},{"filename":"test\/jdk\/java\/foreign\/TestHandshake.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantShared.java"}],"sha":"dc186e33525da12eb2c83924090c12444ed4c017"}]