{"files":[{"patch":"@@ -502,4 +502,4 @@\n-     * @apiNote\n-     * When this stream has an associated channel, this method may invoke\n-     * itself reentrantly. Therefore, subclasses that override this method\n-     * should be prepared to handle possible reentrant invocation.\n+     * <p>\n+     * If this stream has an associated channel then this method will close the\n+     * channel, which in turn will close this stream. Subclasses that override\n+     * this method should be prepared to handle possible reentrant invocation.\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -395,4 +395,4 @@\n-     * @apiNote\n-     * When this stream has an associated channel, this method may invoke\n-     * itself reentrantly. Therefore, subclasses that override this method\n-     * should be prepared to handle possible reentrant invocation.\n+     * <p>\n+     * If this stream has an associated channel then this method will close the\n+     * channel, which in turn will close this stream. Subclasses that override\n+     * this method should be prepared to handle possible reentrant invocation.\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -701,3 +701,3 @@\n-     * When this file has an associated channel, this method may invoke\n-     * itself reentrantly. Therefore, subclasses that override this method\n-     * should be prepared to handle possible reentrant invocation.\n+     * If this stream has an associated channel then this method will close the\n+     * channel, which in turn will close this stream. Subclasses that override\n+     * this method should be prepared to handle possible reentrant invocation.\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}