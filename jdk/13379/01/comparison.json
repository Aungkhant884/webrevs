{"files":[{"patch":"@@ -502,0 +502,5 @@\n+     * @apiNote\n+     * When this stream has an associated channel, this method may invoke\n+     * itself reentrantly. Therefore, subclasses that override this method\n+     * should be prepared to handle possible reentrant invocation.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -395,0 +395,5 @@\n+     * @apiNote\n+     * When this stream has an associated channel, this method may invoke\n+     * itself reentrantly. Therefore, subclasses that override this method\n+     * should be prepared to handle possible reentrant invocation.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -700,0 +700,5 @@\n+     * @apiNote\n+     * When this file has an associated channel, this method may invoke\n+     * itself reentrantly. Therefore, subclasses that override this method\n+     * should be prepared to handle possible reentrant invocation.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -125,1 +125,2 @@\n- * seen by the originating object, and vice versa.\n+ * seen by the originating object, and vice versa. Closing the channel will\n+ * close the originating object.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}