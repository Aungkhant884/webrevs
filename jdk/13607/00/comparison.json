{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedupThread.hpp\"\n@@ -46,1 +47,0 @@\n-#include \"runtime\/javaThread.hpp\"\n@@ -60,3 +60,6 @@\n-const Klass* StringDedup::_string_klass_or_null = nullptr;\n-uint StringDedup::_enabled_age_threshold = 0;\n-uint StringDedup::_enabled_age_limit = 0;\n+\/\/ Configuration for predicates used to decide whether to deduplicate.\n+\/\/ The initial values are suitable for deduplication being disabled.\n+const Klass* StringDedup::_string_klass_or_null = nullptr; \/\/ No klass will match.\n+static_assert(markWord::max_age < UINT_MAX, \"assumption\");\n+uint StringDedup::_enabled_age_threshold = UINT_MAX;       \/\/ Age never equals max.\n+uint StringDedup::_enabled_age_limit = 0;                  \/\/ Age is never less than zero.\n@@ -85,0 +88,1 @@\n+    \/\/ Don't create the thread yet.  JavaThreads need to be created later.\n@@ -87,8 +91,0 @@\n-  } else {\n-    \/\/ No klass will ever match.\n-    _string_klass_or_null = nullptr;\n-    \/\/ Age can never equal UINT_MAX.\n-    static_assert(markWord::max_age < UINT_MAX, \"assumption\");\n-    _enabled_age_threshold = UINT_MAX;\n-    \/\/ Age can never be less than zero.\n-    _enabled_age_limit = 0;\n@@ -99,7 +95,1 @@\n-void StringDedup::stop() {\n-  assert(is_enabled(), \"precondition\");\n-  assert(_processor != nullptr, \"invariant\");\n-  _processor->stop();\n-}\n-\n-void StringDedup::threads_do(ThreadClosure* tc) {\n+void StringDedup::start() {\n@@ -107,2 +97,1 @@\n-  assert(_processor != nullptr, \"invariant\");\n-  tc->do_thread(_processor);\n+  StringDedupThread::initialize();\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,4 @@\n+\/\/ The deduplication thread is a daemon JavaThread.  No thread visitor is\n+\/\/ needed, as it is handled via the normal JavaThread visiting mechanism.\n+\/\/ Similarly, there is no need for a stop() function.\n+\/\/\n@@ -105,0 +109,1 @@\n+class StringDedupThread;\n@@ -113,0 +118,2 @@\n+  friend class StringDedupThread;\n+\n@@ -143,5 +150,1 @@\n-  \/\/ Stop the deduplication processor thread.\n-  \/\/ precondition: is_enabled()\n-  static void stop();\n-\n-  \/\/ Visit the deduplication processor thread.\n+  \/\/ Create and start the deduplication processor thread.\n@@ -149,1 +152,1 @@\n-  static void threads_do(ThreadClosure* tc);\n+  static void start();\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-#include \"gc\/shared\/suspendibleThreadSet.hpp\"\n@@ -42,0 +41,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -47,4 +47,0 @@\n-StringDedup::Processor::Processor() : ConcurrentGCThread() {\n-  set_name(\"StringDedupProcessor\");\n-}\n-\n@@ -67,0 +63,2 @@\n+StringDedup::Processor::Processor() : _thread(nullptr) {}\n+\n@@ -69,1 +67,0 @@\n-  _processor->create_and_start();\n@@ -72,4 +69,7 @@\n-bool StringDedup::Processor::wait_for_requests() const {\n-  \/\/ Wait for the current request storage object to be non-empty.  The\n-  \/\/ num-dead notification from the Table notifies the monitor.\n-  if (!should_terminate()) {\n+void StringDedup::Processor::wait_for_requests() const {\n+  assert(Thread::current() == _thread, \"precondition\");\n+  \/\/ Wait for the current request storage object to be non-empty, or for the\n+  \/\/ table to need cleanup.  The num-dead notification from the Table notifies\n+  \/\/ the monitor.\n+  {\n+    ThreadBlockInVM tbivm(_thread);\n@@ -78,2 +78,1 @@\n-    while (!should_terminate() &&\n-           (storage->allocation_count() == 0) &&\n+    while ((storage->allocation_count() == 0) &&\n@@ -85,5 +84,3 @@\n-  if (!should_terminate()) {\n-    log_trace(stringdedup)(\"swapping request storages\");\n-    _storage_for_processing = Atomic::xchg(&_storage_for_requests, _storage_for_processing);\n-    GlobalCounter::write_synchronize();\n-  }\n+  log_trace(stringdedup)(\"swapping request storages\");\n+  _storage_for_processing = Atomic::xchg(&_storage_for_requests, _storage_for_processing);\n+  GlobalCounter::write_synchronize();\n@@ -93,1 +90,1 @@\n-  if (!should_terminate()) {\n+  {\n@@ -95,0 +92,1 @@\n+    ThreadBlockInVM tbivm(_thread);\n@@ -96,1 +94,1 @@\n-    while (_storage_for_processing->is_used_acquire() && !should_terminate()) {\n+    while (_storage_for_processing->is_used_acquire()) {\n@@ -100,1 +98,0 @@\n-  return !should_terminate();\n@@ -107,8 +104,3 @@\n-bool StringDedup::Processor::yield_or_continue(SuspendibleThreadSetJoiner* joiner,\n-                                               Stat::Phase phase) const {\n-  if (joiner->should_yield()) {\n-    _cur_stat.block_phase(phase);\n-    joiner->yield();\n-    _cur_stat.unblock_phase();\n-  }\n-  return !should_terminate();\n+void StringDedup::Processor::yield() const {\n+  assert(Thread::current() == _thread, \"precondition\");\n+  ThreadBlockInVM tbivm(_thread);\n@@ -117,3 +109,1 @@\n-void StringDedup::Processor::cleanup_table(SuspendibleThreadSetJoiner* joiner,\n-                                           bool grow_only,\n-                                           bool force) const {\n+void StringDedup::Processor::cleanup_table(bool grow_only, bool force) const {\n@@ -121,4 +111,3 @@\n-    Stat::Phase phase = Table::cleanup_phase();\n-    while (yield_or_continue(joiner, phase)) {\n-      if (!Table::cleanup_step()) break;\n-    }\n+    do {\n+      yield();\n+    } while (Table::cleanup_step());\n@@ -131,1 +120,0 @@\n-  SuspendibleThreadSetJoiner* _joiner;\n@@ -146,1 +134,1 @@\n-  ProcessRequest(OopStorage* storage, SuspendibleThreadSetJoiner* joiner) :\n+  ProcessRequest(OopStorage* storage) :\n@@ -148,1 +136,0 @@\n-    _joiner(joiner),\n@@ -160,18 +147,17 @@\n-    if (_processor->yield_or_continue(_joiner, Stat::Phase::process)) {\n-      oop java_string = NativeAccess<ON_PHANTOM_OOP_REF>::oop_load(ref);\n-      release_ref(ref);\n-      \/\/ Dedup java_string, after checking for various reasons to skip it.\n-      if (java_string == nullptr) {\n-        \/\/ String became unreachable before we got a chance to process it.\n-        _cur_stat.inc_skipped_dead();\n-      } else if (java_lang_String::value(java_string) == nullptr) {\n-        \/\/ Request during String construction, before its value array has\n-        \/\/ been initialized.\n-        _cur_stat.inc_skipped_incomplete();\n-      } else {\n-        Table::deduplicate(java_string);\n-        if (Table::is_grow_needed()) {\n-          _cur_stat.report_process_pause();\n-          _processor->cleanup_table(_joiner, true \/* grow_only *\/, false \/* force *\/);\n-          _cur_stat.report_process_resume();\n-        }\n+    _processor->yield();\n+    oop java_string = NativeAccess<ON_PHANTOM_OOP_REF>::oop_load(ref);\n+    release_ref(ref);\n+    \/\/ Dedup java_string, after checking for various reasons to skip it.\n+    if (java_string == nullptr) {\n+      \/\/ String became unreachable before we got a chance to process it.\n+      _cur_stat.inc_skipped_dead();\n+    } else if (java_lang_String::value(java_string) == nullptr) {\n+      \/\/ Request during String construction, before its value array has\n+      \/\/ been initialized.\n+      _cur_stat.inc_skipped_incomplete();\n+    } else {\n+      Table::deduplicate(java_string);\n+      if (Table::is_grow_needed()) {\n+        _cur_stat.report_process_pause();\n+        _processor->cleanup_table(true \/* grow_only *\/, false \/* force *\/);\n+        _cur_stat.report_process_resume();\n@@ -183,1 +169,2 @@\n-void StringDedup::Processor::process_requests(SuspendibleThreadSetJoiner* joiner) const {\n+void StringDedup::Processor::process_requests() const {\n+  _cur_stat.report_process_start();\n@@ -185,1 +172,1 @@\n-  ProcessRequest processor{_storage_for_processing->storage(), joiner};\n+  ProcessRequest processor{_storage_for_processing->storage()};\n@@ -187,0 +174,1 @@\n+  _cur_stat.report_process_end();\n@@ -189,2 +177,5 @@\n-void StringDedup::Processor::run_service() {\n-  while (!should_terminate()) {\n+void StringDedup::Processor::run(JavaThread* thread) {\n+  assert(thread == Thread::current(), \"precondition\");\n+  _thread = thread;\n+  log_debug(stringdedup)(\"Starting string deduplication thread\");\n+  while (true) {\n@@ -192,6 +183,1 @@\n-    if (!wait_for_requests()) {\n-      assert(should_terminate(), \"invariant\");\n-      break;\n-    }\n-    SuspendibleThreadSetJoiner sts_joiner{};\n-    if (should_terminate()) break;\n+    wait_for_requests();\n@@ -199,10 +185,4 @@\n-    _cur_stat.report_concurrent_start();\n-    _cur_stat.report_process_start();\n-    process_requests(&sts_joiner);\n-    if (should_terminate()) break;\n-    _cur_stat.report_process_end();\n-    cleanup_table(&sts_joiner,\n-                  false \/* grow_only *\/,\n-                  StringDeduplicationResizeALot \/* force *\/);\n-    if (should_terminate()) break;\n-    _cur_stat.report_concurrent_end();\n+    _cur_stat.report_active_start();\n+    process_requests();\n+    cleanup_table(false \/* grow_only *\/, StringDeduplicationResizeALot \/* force *\/);\n+    _cur_stat.report_active_end();\n@@ -213,5 +193,0 @@\n-void StringDedup::Processor::stop_service() {\n-  MonitorLocker ml(StringDedup_lock, Mutex::_no_safepoint_check_flag);\n-  ml.notify_all();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":57,"deletions":82,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"gc\/shared\/concurrentGCThread.hpp\"\n+#include \"memory\/allocation.hpp\"\n@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/stringdedup\/stringDedupStat.hpp\"\n@@ -33,0 +32,1 @@\n+class JavaThread;\n@@ -34,1 +34,0 @@\n-class SuspendibleThreadSetJoiner;\n@@ -36,5 +35,4 @@\n-\/\/ Thread class for string deduplication.  There is only one instance of\n-\/\/ this class.  This thread processes deduplication requests.  It also\n-\/\/ manages the deduplication table, performing resize and cleanup operations\n-\/\/ as needed.  This includes managing the OopStorage objects used to hold\n-\/\/ requests.\n+\/\/ This class performs string deduplication.  There is only one instance of\n+\/\/ this class.  It processes deduplication requests.  It also manages the\n+\/\/ deduplication table, performing resize and cleanup operations as needed.\n+\/\/ This includes managing the OopStorage objects used to hold requests.\n@@ -42,6 +40,5 @@\n-\/\/ This thread uses the SuspendibleThreadSet mechanism to take part in the\n-\/\/ safepoint protocol.  It checks for safepoints between processing requests\n-\/\/ in order to minimize safepoint latency.  The Table provides incremental\n-\/\/ operations for resizing and for removing dead entries, so this thread can\n-\/\/ perform safepoint checks between steps in those operations.\n-class StringDedup::Processor : public ConcurrentGCThread {\n+\/\/ Processing periodically checks for and yields at safepoints.  Processing of\n+\/\/ requests is performed in incremental chunks.  The Table provides\n+\/\/ incremental operations for resizing and for removing dead entries, so\n+\/\/ safepoint checks can be performed between steps in those operations.\n+class StringDedup::Processor : public CHeapObj<mtGC> {\n@@ -57,2 +54,1 @@\n-  \/\/ Returns !should_terminate();\n-  bool wait_for_requests() const;\n+  JavaThread* _thread;\n@@ -60,2 +56,8 @@\n-  \/\/ Yield if requested.  Returns !should_terminate() after possible yield.\n-  bool yield_or_continue(SuspendibleThreadSetJoiner* joiner, Stat::Phase phase) const;\n+  \/\/ Wait until there are requests to be processed.  The storage for requests\n+  \/\/ and storage for processing are swapped; the former requests storage\n+  \/\/ becomes the current processing storage, and vice versa.\n+  \/\/ precondition: the processing storage is empty.\n+  void wait_for_requests() const;\n+\n+  \/\/ Yield if requested.\n+  void yield() const;\n@@ -64,2 +66,2 @@\n-  void process_requests(SuspendibleThreadSetJoiner* joiner) const;\n-  void cleanup_table(SuspendibleThreadSetJoiner* joiner, bool grow_only, bool force) const;\n+  void process_requests() const;\n+  void cleanup_table(bool grow_only, bool force) const;\n@@ -69,4 +71,0 @@\n-protected:\n-  virtual void run_service();\n-  virtual void stop_service();\n-\n@@ -78,0 +76,4 @@\n+\n+  \/\/ Use thread as the deduplication thread.\n+  \/\/ precondition: thread == Thread::current()\n+  void run(JavaThread* thread);\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  _concurrent(0),\n+  _active(0),\n@@ -48,3 +48,2 @@\n-  _block(0),\n-  _concurrent_start(),\n-  _concurrent_elapsed(),\n+  _active_start(),\n+  _active_elapsed(),\n@@ -55,3 +54,2 @@\n-  _cleanup_table_elapsed(),\n-  _block_elapsed() {\n-}\n+  _cleanup_table_elapsed()\n+{}\n@@ -72,1 +70,1 @@\n-  _concurrent          += stat->_concurrent;\n+  _active              += stat->_active;\n@@ -77,2 +75,1 @@\n-  _block               += stat->_block;\n-  _concurrent_elapsed  += stat->_concurrent_elapsed;\n+  _active_elapsed      += stat->_active_elapsed;\n@@ -83,1 +80,0 @@\n-  _block_elapsed       += stat->_block_elapsed;\n@@ -116,1 +112,1 @@\n-    strdedup_elapsed_param_ms(last_stat->_concurrent_elapsed));\n+    strdedup_elapsed_param_ms(last_stat->_active_elapsed));\n@@ -119,4 +115,4 @@\n-void StringDedup::Stat::report_concurrent_start() {\n-  log_debug(stringdedup, phases, start)(\"Concurrent start\");\n-  _concurrent_start = Ticks::now();\n-  _concurrent++;\n+void StringDedup::Stat::report_active_start() {\n+  log_debug(stringdedup, phases, start)(\"Active start\");\n+  _active_start = Ticks::now();\n+  _active++;\n@@ -125,4 +121,4 @@\n-void StringDedup::Stat::report_concurrent_end() {\n-  _concurrent_elapsed += (Ticks::now() - _concurrent_start);\n-  log_debug(stringdedup, phases)(\"Concurrent end: \" STRDEDUP_ELAPSED_FORMAT_MS,\n-                                 strdedup_elapsed_param_ms(_concurrent_elapsed));\n+void StringDedup::Stat::report_active_end() {\n+  _active_elapsed += (Ticks::now() - _active_start);\n+  log_debug(stringdedup, phases)(\"Active end: \" STRDEDUP_ELAPSED_FORMAT_MS,\n+                                 strdedup_elapsed_param_ms(_active_elapsed));\n@@ -197,23 +193,0 @@\n-Tickspan* StringDedup::Stat::elapsed_for_phase(Phase phase) {\n-  switch (phase) {\n-  case Phase::process: return &_process_elapsed;\n-  case Phase::resize_table: return &_resize_table_elapsed;\n-  case Phase::cleanup_table: return &_cleanup_table_elapsed;\n-  }\n-  ShouldNotReachHere();\n-  return nullptr;\n-}\n-\n-void StringDedup::Stat::block_phase(Phase phase) {\n-  Ticks now = Ticks::now();\n-  *elapsed_for_phase(phase) += now - _phase_start;\n-  _phase_start = now;\n-  _block++;\n-}\n-\n-void StringDedup::Stat::unblock_phase() {\n-  Ticks now = Ticks::now();\n-  _block_elapsed += now - _phase_start;\n-  _phase_start = now;\n-}\n-\n@@ -223,2 +196,1 @@\n-    \", Idle: %zu\/\" STRDEDUP_ELAPSED_FORMAT_MS\n-    \", Blocked: %zu\/\" STRDEDUP_ELAPSED_FORMAT_MS,\n+    \", Idle: %zu\/\" STRDEDUP_ELAPSED_FORMAT_MS,\n@@ -227,2 +199,1 @@\n-    _idle, strdedup_elapsed_param_ms(_idle_elapsed),\n-    _block, strdedup_elapsed_param_ms(_block_elapsed));\n+    _idle, strdedup_elapsed_param_ms(_idle_elapsed));\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStat.cpp","additions":19,"deletions":48,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,8 +37,0 @@\n-public:\n-  \/\/ Only phases that can be blocked, so excluding \"idle\".\n-  enum class Phase {\n-    process,\n-    resize_table,\n-    cleanup_table\n-  };\n-\n@@ -61,1 +53,1 @@\n-  size_t _concurrent;\n+  size_t _active;\n@@ -66,1 +58,0 @@\n-  size_t _block;\n@@ -69,2 +60,2 @@\n-  Ticks _concurrent_start;\n-  Tickspan _concurrent_elapsed;\n+  Ticks _active_start;\n+  Tickspan _active_elapsed;\n@@ -72,0 +63,2 @@\n+  \/\/ These phases are disjoint, so share _phase_start.\n+  \/\/ Some of these overlap with active, hence need _active_start.\n@@ -76,1 +69,0 @@\n-  Tickspan _block_elapsed;\n@@ -80,1 +72,0 @@\n-  Tickspan* elapsed_for_phase(Phase phase);\n@@ -156,5 +147,2 @@\n-  void report_concurrent_start();\n-  void report_concurrent_end();\n-\n-  void block_phase(Phase phase);\n-  void unblock_phase();\n+  void report_active_start();\n+  void report_active_end();\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStat.hpp","additions":8,"deletions":20,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,1 +286,0 @@\n-  virtual Stat::Phase phase() const = 0;\n@@ -324,4 +323,0 @@\n-  virtual Stat::Phase phase() const {\n-    return Stat::Phase::resize_table;\n-  }\n-\n@@ -392,4 +387,0 @@\n-  virtual Stat::Phase phase() const {\n-    return Stat::Phase::cleanup_table;\n-  }\n-\n@@ -721,5 +712,0 @@\n-StringDedup::Stat::Phase StringDedup::Table::cleanup_phase() {\n-  assert(_cleanup_state != nullptr, \"precondition\");\n-  return _cleanup_state->phase();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,4 +141,0 @@\n-  \/\/ Return the phase kind for the cleanup being performed.\n-  \/\/ precondition: a cleanup is in progress.\n-  static Stat::Phase cleanup_phase();\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedupProcessor.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedupThread.hpp\"\n+#include \"runtime\/handles.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/exceptions.hpp\"\n+\n+StringDedupThread::StringDedupThread() : JavaThread(thread_entry) {}\n+\n+void StringDedupThread::initialize() {\n+  EXCEPTION_MARK;\n+\n+  const char* name = \"StringDedupThread\";\n+  Handle thread_oop = JavaThread::create_system_thread_object(name, CHECK);\n+  StringDedupThread* thread = new StringDedupThread();\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n+  JavaThread::start_internal_daemon(THREAD, thread, thread_oop, NormPriority);\n+}\n+\n+void StringDedupThread::thread_entry(JavaThread* thread, TRAPS) {\n+  StringDedup::_processor->run(thread);\n+}\n+\n+bool StringDedupThread::is_hidden_from_external_view() const {\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.cpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_STRINGDEDUP_STRINGDEDUPTHREAD_HPP\n+#define SHARE_GC_SHARED_STRINGDEDUP_STRINGDEDUPTHREAD_HPP\n+\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"utilities\/exceptions.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ Thread class for string deduplication.  There is only one instance of this\n+\/\/ class.  This class provides thread management.  It uses the Processor\n+\/\/ to perform most of the work.\n+\/\/\n+\/\/ Unlike most of the classes in the stringdedup implementation, this class is\n+\/\/ not an inner class of StringDedup.  This is because we need a simple public\n+\/\/ identifier for use by VMStructs.\n+class StringDedupThread : public JavaThread {\n+  friend class VMStructs;\n+\n+  StringDedupThread();\n+  ~StringDedupThread() = default;\n+\n+  NONCOPYABLE(StringDedupThread);\n+\n+  static void thread_entry(JavaThread* thread, TRAPS);\n+\n+public:\n+  static void initialize();\n+\n+  bool is_hidden_from_external_view() const override;\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_STRINGDEDUP_STRINGDEDUPTHREAD_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.hpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -61,1 +61,0 @@\n-#include \"gc\/shenandoah\/shenandoahStringDedup.hpp\"\n@@ -1189,3 +1188,0 @@\n-  if (ShenandoahStringDedup::is_enabled()) {\n-    ShenandoahStringDedup::threads_do(tcl);\n-  }\n@@ -2196,1 +2192,1 @@\n-  if (ShenandoahSuspendibleWorkers || UseStringDeduplication) {\n+  if (ShenandoahSuspendibleWorkers) {\n@@ -2202,1 +2198,1 @@\n-  if (ShenandoahSuspendibleWorkers || UseStringDeduplication) {\n+  if (ShenandoahSuspendibleWorkers) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -482,5 +482,0 @@\n-  \/\/ Shut down string deduplication if running.\n-  if (StringDedup::is_enabled()) {\n-    StringDedup::stop();\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -515,3 +515,1 @@\n-  virtual bool is_active_Java_thread() const {\n-    return on_thread_list() && !is_terminated();\n-  }\n+  virtual bool is_active_Java_thread() const;\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -226,0 +226,4 @@\n+inline bool JavaThread::is_active_Java_thread() const {\n+  return on_thread_list() && !is_terminated();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -694,0 +694,5 @@\n+  \/\/ Start string deduplication thread if requested.\n+  if (StringDedup::is_enabled()) {\n+    StringDedup::start();\n+  }\n+\n@@ -1270,3 +1275,0 @@\n-  if (StringDedup::is_enabled()) {\n-    StringDedup::threads_do(&cl);\n-  }\n@@ -1335,5 +1337,0 @@\n-  if (StringDedup::is_enabled()) {\n-    PrintOnErrorClosure print_closure(st, current, buf, buflen, &found_current);\n-    StringDedup::threads_do(&print_closure);\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedupThread.hpp\"\n@@ -1314,0 +1315,1 @@\n+        declare_type(StringDedupThread, JavaThread)                       \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.runtime;\n+\n+import sun.jvm.hotspot.debugger.Address;\n+\n+public class StringDedupThread extends JavaThread {\n+    public StringDedupThread(Address addr) {\n+        super(addr);\n+    }\n+\n+    public boolean isJavaThread() { return false; }\n+    public boolean isHiddenFromExternalView() { return true; }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/StringDedupThread.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,0 +159,1 @@\n+        virtualConstructor.addMapping(\"StringDedupThread\", StringDedupThread.class);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Threads.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}