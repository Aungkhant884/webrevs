{"files":[{"patch":"@@ -288,1 +288,1 @@\n-          event.set_origin(flag->get_origin());                   \\\n+          event.set_origin(static_cast<u8>(flag->get_origin()));  \\\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-static const char* flag_value_origin_to_string(JVMFlag::Flags origin) {\n+static const char* flag_value_origin_to_string(JVMFlagOrigin origin) {\n@@ -127,9 +127,9 @@\n-    case JVMFlag::DEFAULT: return \"Default\";\n-    case JVMFlag::COMMAND_LINE: return \"Command line\";\n-    case JVMFlag::ENVIRON_VAR: return \"Environment variable\";\n-    case JVMFlag::CONFIG_FILE: return \"Config file\";\n-    case JVMFlag::MANAGEMENT: return \"Management\";\n-    case JVMFlag::ERGONOMIC: return \"Ergonomic\";\n-    case JVMFlag::ATTACH_ON_DEMAND: return \"Attach on demand\";\n-    case JVMFlag::INTERNAL: return \"Internal\";\n-    case JVMFlag::JIMAGE_RESOURCE: return \"JImage resource\";\n+    case JVMFlagOrigin::DEFAULT: return \"Default\";\n+    case JVMFlagOrigin::COMMAND_LINE: return \"Command line\";\n+    case JVMFlagOrigin::ENVIRON_VAR: return \"Environment variable\";\n+    case JVMFlagOrigin::CONFIG_FILE: return \"Config file\";\n+    case JVMFlagOrigin::MANAGEMENT: return \"Management\";\n+    case JVMFlagOrigin::ERGONOMIC: return \"Ergonomic\";\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND: return \"Attach on demand\";\n+    case JVMFlagOrigin::INTERNAL: return \"Internal\";\n+    case JVMFlagOrigin::JIMAGE_RESOURCE: return \"JImage resource\";\n@@ -141,5 +141,7 @@\n-  static const u4 nof_entries = JVMFlag::LAST_VALUE_ORIGIN + 1;\n-  writer.write_count(nof_entries);\n-  for (u4 i = 0; i < nof_entries; ++i) {\n-    writer.write_key(i);\n-    writer.write(flag_value_origin_to_string((JVMFlag::Flags)i));\n+  constexpr EnumRange<JVMFlagOrigin> range;\n+  writer.write_count(static_cast<u4>(range.size()));\n+\n+  for (EnumIterator<JVMFlagOrigin> it = range.begin(); it != range.end(); ++it) {\n+    JVMFlagOrigin origin = *it;\n+    writer.write_key(static_cast<u4>(origin));\n+    writer.write(flag_value_origin_to_string(origin));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/flags\/jvmFlag.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-bool JVMCIGlobals::enable_jvmci_product_mode(JVMFlag::Flags origin) {\n+bool JVMCIGlobals::enable_jvmci_product_mode(JVMFlagOrigin origin) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/flags\/jvmFlag.hpp\"\n+#include \"utilities\/vmEnums.hpp\"\n@@ -156,1 +156,1 @@\n-  static bool enable_jvmci_product_mode(JVMFlag::Flags);\n+  static bool enable_jvmci_product_mode(JVMFlagOrigin);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/flags\/jvmFlag.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1248,1 +1248,1 @@\n-  JVMFlag::Error result = JVMFlagAccess::set<T, type_enum>(flag, value, JVMFlag::INTERNAL);\n+  JVMFlag::Error result = JVMFlagAccess::set<T, type_enum>(flag, value, JVMFlagOrigin::INTERNAL);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -880,1 +880,1 @@\n-static bool set_bool_flag(JVMFlag* flag, bool value, JVMFlag::Flags origin) {\n+static bool set_bool_flag(JVMFlag* flag, bool value, JVMFlagOrigin origin) {\n@@ -888,1 +888,1 @@\n-static bool set_fp_numeric_flag(JVMFlag* flag, char* value, JVMFlag::Flags origin) {\n+static bool set_fp_numeric_flag(JVMFlag* flag, char* value, JVMFlagOrigin origin) {\n@@ -902,1 +902,1 @@\n-static bool set_numeric_flag(JVMFlag* flag, char* value, JVMFlag::Flags origin) {\n+static bool set_numeric_flag(JVMFlag* flag, char* value, JVMFlagOrigin origin) {\n@@ -955,1 +955,1 @@\n-static bool set_string_flag(JVMFlag* flag, const char* value, JVMFlag::Flags origin) {\n+static bool set_string_flag(JVMFlag* flag, const char* value, JVMFlagOrigin origin) {\n@@ -962,1 +962,1 @@\n-static bool append_to_string_flag(JVMFlag* flag, const char* new_value, JVMFlag::Flags origin) {\n+static bool append_to_string_flag(JVMFlag* flag, const char* new_value, JVMFlagOrigin origin) {\n@@ -1063,1 +1063,1 @@\n-bool Arguments::parse_argument(const char* arg, JVMFlag::Flags origin) {\n+bool Arguments::parse_argument(const char* arg, JVMFlagOrigin origin) {\n@@ -1278,1 +1278,1 @@\n-                                 JVMFlag::Flags origin) {\n+                                 JVMFlagOrigin origin) {\n@@ -1407,1 +1407,1 @@\n-        result &= process_argument(token, ignore_unrecognized, JVMFlag::CONFIG_FILE);\n+        result &= process_argument(token, ignore_unrecognized, JVMFlagOrigin::CONFIG_FILE);\n@@ -1425,1 +1425,1 @@\n-    result &= process_argument(token, ignore_unrecognized, JVMFlag::CONFIG_FILE);\n+    result &= process_argument(token, ignore_unrecognized, JVMFlagOrigin::CONFIG_FILE);\n@@ -2291,1 +2291,1 @@\n-  jint result = parse_each_vm_init_arg(vm_options_args, &patch_mod_javabase, JVMFlag::JIMAGE_RESOURCE);\n+  jint result = parse_each_vm_init_arg(vm_options_args, &patch_mod_javabase, JVMFlagOrigin::JIMAGE_RESOURCE);\n@@ -2298,1 +2298,1 @@\n-  result = parse_each_vm_init_arg(java_tool_options_args, &patch_mod_javabase, JVMFlag::ENVIRON_VAR);\n+  result = parse_each_vm_init_arg(java_tool_options_args, &patch_mod_javabase, JVMFlagOrigin::ENVIRON_VAR);\n@@ -2304,1 +2304,1 @@\n-  result = parse_each_vm_init_arg(cmd_line_args, &patch_mod_javabase, JVMFlag::COMMAND_LINE);\n+  result = parse_each_vm_init_arg(cmd_line_args, &patch_mod_javabase, JVMFlagOrigin::COMMAND_LINE);\n@@ -2311,1 +2311,1 @@\n-  result = parse_each_vm_init_arg(java_options_args, &patch_mod_javabase, JVMFlag::ENVIRON_VAR);\n+  result = parse_each_vm_init_arg(java_options_args, &patch_mod_javabase, JVMFlagOrigin::ENVIRON_VAR);\n@@ -2455,1 +2455,1 @@\n-jint Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, JVMFlag::Flags origin) {\n+jint Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, JVMFlagOrigin origin) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/flags\/jvmFlag.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"utilities\/vmEnums.hpp\"\n@@ -411,2 +411,2 @@\n-  static bool parse_argument(const char* arg, JVMFlag::Flags origin);\n-  static bool process_argument(const char* arg, jboolean ignore_unrecognized, JVMFlag::Flags origin);\n+  static bool parse_argument(const char* arg, JVMFlagOrigin origin);\n+  static bool process_argument(const char* arg, jboolean ignore_unrecognized, JVMFlagOrigin origin);\n@@ -439,1 +439,1 @@\n-  static jint parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, JVMFlag::Flags origin);\n+  static jint parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, JVMFlagOrigin origin);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,3 @@\n-void JVMFlag::set_origin(Flags origin) {\n+void JVMFlag::set_origin(JVMFlagOrigin new_origin) {\n+  int old_flags = _flags;\n+  int origin = static_cast<int>(new_origin);\n@@ -46,2 +48,5 @@\n-  Flags new_origin = Flags((origin == COMMAND_LINE) ? Flags(origin | ORIG_COMMAND_LINE) : origin);\n-  _flags = Flags((_flags & ~VALUE_ORIGIN_MASK) | new_origin);\n+  int was_in_cmdline = (new_origin == JVMFlagOrigin::COMMAND_LINE) ? WAS_SET_ON_COMMAND_LINE : 0;\n+  _flags = Flags((_flags & ~VALUE_ORIGIN_MASK) | origin | was_in_cmdline);\n+  if ((old_flags & WAS_SET_ON_COMMAND_LINE) != 0) {\n+    assert((_flags & WAS_SET_ON_COMMAND_LINE) != 0, \"once initialized, should never change\");\n+  }\n@@ -379,1 +384,0 @@\n-  int origin = _flags & VALUE_ORIGIN_MASK;\n@@ -381,2 +385,2 @@\n-  switch(origin) {\n-    case DEFAULT:\n+  switch(get_origin()) {\n+    case JVMFlagOrigin::DEFAULT:\n@@ -384,1 +388,1 @@\n-    case COMMAND_LINE:\n+    case JVMFlagOrigin::COMMAND_LINE:\n@@ -386,1 +390,1 @@\n-    case ENVIRON_VAR:\n+    case JVMFlagOrigin::ENVIRON_VAR:\n@@ -388,1 +392,1 @@\n-    case CONFIG_FILE:\n+    case JVMFlagOrigin::CONFIG_FILE:\n@@ -390,1 +394,1 @@\n-    case MANAGEMENT:\n+    case JVMFlagOrigin::MANAGEMENT:\n@@ -392,2 +396,2 @@\n-    case ERGONOMIC:\n-      if (_flags & ORIG_COMMAND_LINE) {\n+    case JVMFlagOrigin::ERGONOMIC:\n+      if (_flags & WAS_SET_ON_COMMAND_LINE) {\n@@ -397,1 +401,1 @@\n-    case ATTACH_ON_DEMAND:\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND:\n@@ -399,1 +403,1 @@\n-    case INTERNAL:\n+    case JVMFlagOrigin::INTERNAL:\n@@ -401,1 +405,1 @@\n-    case JIMAGE_RESOURCE:\n+    case JVMFlagOrigin::JIMAGE_RESOURCE:\n@@ -498,1 +502,1 @@\n-  flags = flags | extra_flags | JVMFlag::DEFAULT | flag_group(flag_enum);\n+  flags = flags | extra_flags | static_cast<int>(JVMFlagOrigin::DEFAULT) | flag_group(flag_enum);\n@@ -656,1 +660,1 @@\n-    if (array[i]->get_origin() \/* naked field! *\/) {\n+    if (array[i]->get_origin() != JVMFlagOrigin::DEFAULT) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/enumIterator.hpp\"\n@@ -34,0 +35,17 @@\n+enum class JVMFlagOrigin : int {\n+  \/\/ This is the value returned by JVMFlag::get_origin(). It records who\n+  \/\/ has most recently changed the value of a JVMFlag. DEFAULT means that the\n+  \/\/ flag was never changed, or was most recently changed by FLAG_SET_DEFAULT.\n+  DEFAULT          = 0,\n+  COMMAND_LINE     = 1,\n+  ENVIRON_VAR      = 2,\n+  CONFIG_FILE      = 3,\n+  MANAGEMENT       = 4,\n+  ERGONOMIC        = 5,\n+  ATTACH_ON_DEMAND = 6,\n+  INTERNAL         = 7,\n+  JIMAGE_RESOURCE  = 8,\n+};\n+\n+ENUMERATOR_RANGE(JVMFlagOrigin, JVMFlagOrigin::DEFAULT, JVMFlagOrigin::JIMAGE_RESOURCE)\n+\n@@ -36,0 +54,1 @@\n+\n@@ -38,12 +57,0 @@\n-    \/\/ latest value origin\n-    DEFAULT          = 0,\n-    COMMAND_LINE     = 1,\n-    ENVIRON_VAR      = 2,\n-    CONFIG_FILE      = 3,\n-    MANAGEMENT       = 4,\n-    ERGONOMIC        = 5,\n-    ATTACH_ON_DEMAND = 6,\n-    INTERNAL         = 7,\n-    JIMAGE_RESOURCE  = 8,\n-\n-    LAST_VALUE_ORIGIN = JIMAGE_RESOURCE,\n@@ -67,2 +74,7 @@\n-    \/\/ set this bit if the flag was set on the command line\n-    ORIG_COMMAND_LINE       = 1 << 17,\n+    \/\/ Note the difference:\n+    \/\/ f->get_origin() == COMMAND_LINE\n+    \/\/    f was mostly recently set by the command-line\n+    \/\/ f->_flags & WAS_SET_ON_COMMAND_LINE\n+    \/\/    f was specified on the command-line (but may have since been updated by\n+    \/\/    someone else like FLAG_SET_ERGO)\n+    WAS_SET_ON_COMMAND_LINE = 1 << 17,\n@@ -70,1 +82,1 @@\n-    KIND_MASK = ~(VALUE_ORIGIN_MASK | ORIG_COMMAND_LINE)\n+    KIND_MASK = ~(VALUE_ORIGIN_MASK | WAS_SET_ON_COMMAND_LINE)\n@@ -235,14 +247,14 @@\n-  Flags get_origin() const        {  return Flags(_flags & VALUE_ORIGIN_MASK);   }\n-  void set_origin(Flags origin);\n-\n-  bool is_default() const         { return (get_origin() == DEFAULT);            }\n-  bool is_ergonomic() const       { return (get_origin() == ERGONOMIC);          }\n-  bool is_command_line() const    { return (_flags & ORIG_COMMAND_LINE) != 0;    }\n-  void set_command_line()         {  _flags = Flags(_flags | ORIG_COMMAND_LINE); }\n-  bool is_jimage_resource() const { return (get_origin() == JIMAGE_RESOURCE);    }\n-  bool is_product() const         { return (_flags & KIND_PRODUCT) != 0;         }\n-  bool is_manageable() const      { return (_flags & KIND_MANAGEABLE) != 0;      }\n-  bool is_diagnostic() const      { return (_flags & KIND_DIAGNOSTIC) != 0;      }\n-  bool is_experimental() const    { return (_flags & KIND_EXPERIMENTAL) != 0;    }\n-  bool is_notproduct() const      { return (_flags & KIND_NOT_PRODUCT) != 0;     }\n-  bool is_develop() const         { return (_flags & KIND_DEVELOP) != 0;         }\n+  JVMFlagOrigin get_origin() const {  return JVMFlagOrigin(_flags & VALUE_ORIGIN_MASK);   }\n+  void set_origin(JVMFlagOrigin origin);\n+\n+  bool is_default() const         { return (get_origin() == JVMFlagOrigin::DEFAULT);          }\n+  bool is_ergonomic() const       { return (get_origin() == JVMFlagOrigin::ERGONOMIC);        }\n+  bool is_command_line() const    { return (_flags & WAS_SET_ON_COMMAND_LINE) != 0;           }\n+  void set_command_line()         { _flags = Flags(_flags | WAS_SET_ON_COMMAND_LINE);         }\n+  bool is_jimage_resource() const { return (get_origin() == JVMFlagOrigin::JIMAGE_RESOURCE);  }\n+  bool is_product() const         { return (_flags & KIND_PRODUCT) != 0;                      }\n+  bool is_manageable() const      { return (_flags & KIND_MANAGEABLE) != 0;                   }\n+  bool is_diagnostic() const      { return (_flags & KIND_DIAGNOSTIC) != 0;                   }\n+  bool is_experimental() const    { return (_flags & KIND_EXPERIMENTAL) != 0;                 }\n+  bool is_notproduct() const      { return (_flags & KIND_NOT_PRODUCT) != 0;                  }\n+  bool is_develop() const         { return (_flags & KIND_DEVELOP) != 0;                      }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":41,"deletions":29,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void trace_flag_changed(JVMFlag* flag, const T old_value, const T new_value, const JVMFlag::Flags origin) {\n+static void trace_flag_changed(JVMFlag* flag, const T old_value, const T new_value, const JVMFlagOrigin origin) {\n@@ -41,1 +41,1 @@\n-  e.set_origin(origin);\n+  e.set_origin(static_cast<u8>(origin));\n@@ -47,1 +47,1 @@\n-  JVMFlag::Error set(JVMFlag* flag, void* value, JVMFlag::Flags origin) const {\n+  JVMFlag::Error set(JVMFlag* flag, void* value, JVMFlagOrigin origin) const {\n@@ -51,1 +51,1 @@\n-  virtual JVMFlag::Error set_impl(JVMFlag* flag, void* value, JVMFlag::Flags origin) const = 0;\n+  virtual JVMFlag::Error set_impl(JVMFlag* flag, void* value, JVMFlagOrigin origin) const = 0;\n@@ -62,1 +62,1 @@\n-  JVMFlag::Error check_constraint_and_set(JVMFlag* flag, void* value_addr, JVMFlag::Flags origin, bool verbose) const {\n+  JVMFlag::Error check_constraint_and_set(JVMFlag* flag, void* value_addr, JVMFlagOrigin origin, bool verbose) const {\n@@ -90,1 +90,1 @@\n-  JVMFlag::Error set_impl(JVMFlag* flag, void* value_addr, JVMFlag::Flags origin) const {\n+  JVMFlag::Error set_impl(JVMFlag* flag, void* value_addr, JVMFlagOrigin origin) const {\n@@ -104,1 +104,1 @@\n-  virtual JVMFlag::Error set_impl(JVMFlag* flag, void* value_addr, JVMFlag::Flags origin) const {\n+  virtual JVMFlag::Error set_impl(JVMFlag* flag, void* value_addr, JVMFlagOrigin origin) const {\n@@ -295,1 +295,1 @@\n-JVMFlag::Error JVMFlagAccess::set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlag::Flags origin) {\n+JVMFlag::Error JVMFlagAccess::set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlagOrigin origin) {\n@@ -309,1 +309,1 @@\n-JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlag::Flags origin) {\n+JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin) {\n@@ -329,1 +329,1 @@\n-JVMFlag::Error JVMFlagAccess::set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlag::Flags origin) {\n+JVMFlag::Error JVMFlagAccess::set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin) {\n@@ -340,1 +340,1 @@\n-JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlag::Flags origin) {\n+JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -55,3 +55,3 @@\n-  static JVMFlag::Error set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlag::Flags origin);\n-  static JVMFlag::Error set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlag::Flags origin);\n-  static JVMFlag::Error ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlag::Flags origin);\n+  static JVMFlag::Error set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin);\n+  static JVMFlag::Error set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlagOrigin origin);\n+  static JVMFlag::Error ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin);\n@@ -88,1 +88,1 @@\n-  static JVMFlag::Error set(JVMFlagsEnum flag_enum, T value, JVMFlag::Flags origin) {\n+  static JVMFlag::Error set(JVMFlagsEnum flag_enum, T value, JVMFlagOrigin origin) {\n@@ -98,1 +98,1 @@\n-  static JVMFlag::Error set(JVMFlag* flag, T* value, JVMFlag::Flags origin) {\n+  static JVMFlag::Error set(JVMFlag* flag, T* value, JVMFlagOrigin origin) {\n@@ -102,8 +102,8 @@\n-  static JVMFlag::Error boolAtPut    (JVMFlag* f, bool*     v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(bool)>    (f, v, origin); }\n-  static JVMFlag::Error intAtPut     (JVMFlag* f, int*      v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(int)>     (f, v, origin); }\n-  static JVMFlag::Error uintAtPut    (JVMFlag* f, uint*     v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(uint)>    (f, v, origin); }\n-  static JVMFlag::Error intxAtPut    (JVMFlag* f, intx*     v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(intx)>    (f, v, origin); }\n-  static JVMFlag::Error uintxAtPut   (JVMFlag* f, uintx*    v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(uintx)>   (f, v, origin); }\n-  static JVMFlag::Error uint64_tAtPut(JVMFlag* f, uint64_t* v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(uint64_t)>(f, v, origin); }\n-  static JVMFlag::Error size_tAtPut  (JVMFlag* f, size_t*   v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(size_t)>  (f, v, origin); }\n-  static JVMFlag::Error doubleAtPut  (JVMFlag* f, double*   v, JVMFlag::Flags origin) { return set<JVM_FLAG_TYPE(double)>  (f, v, origin); }\n+  static JVMFlag::Error boolAtPut    (JVMFlag* f, bool*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(bool)>    (f, v, origin); }\n+  static JVMFlag::Error intAtPut     (JVMFlag* f, int*      v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(int)>     (f, v, origin); }\n+  static JVMFlag::Error uintAtPut    (JVMFlag* f, uint*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint)>    (f, v, origin); }\n+  static JVMFlag::Error intxAtPut    (JVMFlag* f, intx*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(intx)>    (f, v, origin); }\n+  static JVMFlag::Error uintxAtPut   (JVMFlag* f, uintx*    v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uintx)>   (f, v, origin); }\n+  static JVMFlag::Error uint64_tAtPut(JVMFlag* f, uint64_t* v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint64_t)>(f, v, origin); }\n+  static JVMFlag::Error size_tAtPut  (JVMFlag* f, size_t*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(size_t)>  (f, v, origin); }\n+  static JVMFlag::Error doubleAtPut  (JVMFlag* f, double*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(double)>  (f, v, origin); }\n@@ -114,1 +114,1 @@\n-  static JVMFlag::Error ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlag::Flags origin);\n+  static JVMFlag::Error ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  inline JVMFlag::Error FLAG_MEMBER_SETTER(name)(type value, JVMFlag::Flags origin) { \\\n+  inline JVMFlag::Error FLAG_MEMBER_SETTER(name)(type value, JVMFlagOrigin origin) { \\\n@@ -78,3 +78,3 @@\n-                                       FLAG_MEMBER_SETTER(name)((value), JVMFlag::COMMAND_LINE))\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::ERGONOMIC))\n-#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::MANAGEMENT))\n+                                       FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::COMMAND_LINE))\n+#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n+#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::MANAGEMENT))\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2603,9 +2603,9 @@\n-  declare_constant(JVMFlag::DEFAULT)                                      \\\n-  declare_constant(JVMFlag::COMMAND_LINE)                                 \\\n-  declare_constant(JVMFlag::ENVIRON_VAR)                                  \\\n-  declare_constant(JVMFlag::CONFIG_FILE)                                  \\\n-  declare_constant(JVMFlag::MANAGEMENT)                                   \\\n-  declare_constant(JVMFlag::ERGONOMIC)                                    \\\n-  declare_constant(JVMFlag::ATTACH_ON_DEMAND)                             \\\n-  declare_constant(JVMFlag::INTERNAL)                                     \\\n-  declare_constant(JVMFlag::JIMAGE_RESOURCE)                              \\\n+  declare_constant(JVMFlagOrigin::DEFAULT)                                \\\n+  declare_constant(JVMFlagOrigin::COMMAND_LINE)                           \\\n+  declare_constant(JVMFlagOrigin::ENVIRON_VAR)                            \\\n+  declare_constant(JVMFlagOrigin::CONFIG_FILE)                            \\\n+  declare_constant(JVMFlagOrigin::MANAGEMENT)                             \\\n+  declare_constant(JVMFlagOrigin::ERGONOMIC)                              \\\n+  declare_constant(JVMFlagOrigin::ATTACH_ON_DEMAND)                       \\\n+  declare_constant(JVMFlagOrigin::INTERNAL)                               \\\n+  declare_constant(JVMFlagOrigin::JIMAGE_RESOURCE)                        \\\n@@ -2613,1 +2613,1 @@\n-  declare_constant(JVMFlag::ORIG_COMMAND_LINE)\n+  declare_constant(JVMFlag::WAS_SET_ON_COMMAND_LINE)\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-  int ret = WriteableFlags::set_flag(op->arg(0), op->arg(1), JVMFlag::ATTACH_ON_DEMAND, err_msg);\n+  int ret = WriteableFlags::set_flag(op->arg(0), op->arg(1), JVMFlagOrigin::ATTACH_ON_DEMAND, err_msg);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  int ret = WriteableFlags::set_flag(_flag.value(), val, JVMFlag::MANAGEMENT, err_msg);\n+  int ret = WriteableFlags::set_flag(_flag.value(), val, JVMFlagOrigin::MANAGEMENT, err_msg);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1477,1 +1477,1 @@\n-    case JVMFlag::DEFAULT:\n+    case JVMFlagOrigin::DEFAULT:\n@@ -1480,1 +1480,1 @@\n-    case JVMFlag::COMMAND_LINE:\n+    case JVMFlagOrigin::COMMAND_LINE:\n@@ -1483,1 +1483,1 @@\n-    case JVMFlag::ENVIRON_VAR:\n+    case JVMFlagOrigin::ENVIRON_VAR:\n@@ -1486,1 +1486,1 @@\n-    case JVMFlag::CONFIG_FILE:\n+    case JVMFlagOrigin::CONFIG_FILE:\n@@ -1489,1 +1489,1 @@\n-    case JVMFlag::MANAGEMENT:\n+    case JVMFlagOrigin::MANAGEMENT:\n@@ -1492,1 +1492,1 @@\n-    case JVMFlag::ERGONOMIC:\n+    case JVMFlagOrigin::ERGONOMIC:\n@@ -1495,1 +1495,1 @@\n-    case JVMFlag::ATTACH_ON_DEMAND:\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND:\n@@ -1587,1 +1587,1 @@\n-  int succeed = WriteableFlags::set_flag(name, new_value, JVMFlag::MANAGEMENT, error_msg);\n+  int succeed = WriteableFlags::set_flag(name, new_value, JVMFlagOrigin::MANAGEMENT, error_msg);\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-JVMFlag::Error WriteableFlags::set_bool_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_bool_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -110,1 +110,1 @@\n-JVMFlag::Error WriteableFlags::set_bool_flag(const char* name, bool value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_bool_flag(const char* name, bool value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -118,1 +118,1 @@\n-JVMFlag::Error WriteableFlags::set_int_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_int_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -128,1 +128,1 @@\n-JVMFlag::Error WriteableFlags::set_int_flag(const char* name, int value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_int_flag(const char* name, int value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -136,1 +136,1 @@\n-JVMFlag::Error WriteableFlags::set_uint_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uint_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -146,1 +146,1 @@\n-JVMFlag::Error WriteableFlags::set_uint_flag(const char* name, uint value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uint_flag(const char* name, uint value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -154,1 +154,1 @@\n-JVMFlag::Error WriteableFlags::set_intx_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_intx_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -164,1 +164,1 @@\n-JVMFlag::Error WriteableFlags::set_intx_flag(const char* name, intx value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_intx_flag(const char* name, intx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -172,1 +172,1 @@\n-JVMFlag::Error WriteableFlags::set_uintx_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uintx_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -182,1 +182,1 @@\n-JVMFlag::Error WriteableFlags::set_uintx_flag(const char* name, uintx value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uintx_flag(const char* name, uintx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -190,1 +190,1 @@\n-JVMFlag::Error WriteableFlags::set_uint64_t_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uint64_t_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -200,1 +200,1 @@\n-JVMFlag::Error WriteableFlags::set_uint64_t_flag(const char* name, uint64_t value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_uint64_t_flag(const char* name, uint64_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -208,1 +208,1 @@\n-JVMFlag::Error WriteableFlags::set_size_t_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_size_t_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -218,1 +218,1 @@\n-JVMFlag::Error WriteableFlags::set_size_t_flag(const char* name, size_t value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_size_t_flag(const char* name, size_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -226,1 +226,1 @@\n-JVMFlag::Error WriteableFlags::set_double_flag(const char* name, const char* arg, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_double_flag(const char* name, const char* arg, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -236,1 +236,1 @@\n-JVMFlag::Error WriteableFlags::set_double_flag(const char* name, double value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_double_flag(const char* name, double value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -244,1 +244,1 @@\n-JVMFlag::Error WriteableFlags::set_ccstr_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_ccstr_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -256,1 +256,1 @@\n-JVMFlag::Error WriteableFlags::set_flag(const char* flag_name, const char* flag_value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_flag(const char* flag_name, const char* flag_value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -265,1 +265,1 @@\n-JVMFlag::Error WriteableFlags::set_flag(const char* flag_name, jvalue flag_value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_flag(const char* flag_name, jvalue flag_value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -270,1 +270,1 @@\n-JVMFlag::Error WriteableFlags::set_flag(const char* name, const void* value, JVMFlag::Error(*setter)(JVMFlag*,const void*,JVMFlag::Flags,FormatBuffer<80>&), JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_flag(const char* name, const void* value, JVMFlag::Error(*setter)(JVMFlag*,const void*,JVMFlagOrigin,FormatBuffer<80>&), JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -296,1 +296,1 @@\n-JVMFlag::Error WriteableFlags::set_flag_from_char(JVMFlag* f, const void* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg) {\n+JVMFlag::Error WriteableFlags::set_flag_from_char(JVMFlag* f, const void* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n@@ -327,1 +327,1 @@\n-JVMFlag::Error WriteableFlags::set_flag_from_jvalue(JVMFlag* f, const void* value, JVMFlag::Flags origin,\n+JVMFlag::Error WriteableFlags::set_flag_from_jvalue(JVMFlag* f, const void* value, JVMFlagOrigin origin,\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-  static JVMFlag::Error set_flag(const char* name, const void* value, JVMFlag::Error(*setter)(JVMFlag*, const void*, JVMFlag::Flags, FormatBuffer<80>&), JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_flag(const char* name, const void* value, JVMFlag::Error(*setter)(JVMFlag*, const void*, JVMFlagOrigin, FormatBuffer<80>&), JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -37,1 +37,1 @@\n-  static JVMFlag::Error set_flag_from_char(JVMFlag* f, const void* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_flag_from_char(JVMFlag* f, const void* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -39,1 +39,1 @@\n-  static JVMFlag::Error set_flag_from_jvalue(JVMFlag* f, const void* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_flag_from_jvalue(JVMFlag* f, const void* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -42,1 +42,1 @@\n-  static JVMFlag::Error set_bool_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_bool_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -44,1 +44,1 @@\n-  static JVMFlag::Error set_int_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_int_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -46,1 +46,1 @@\n-  static JVMFlag::Error set_uint_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uint_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -48,1 +48,1 @@\n-  static JVMFlag::Error set_intx_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_intx_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -50,1 +50,1 @@\n-  static JVMFlag::Error set_uintx_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uintx_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -52,1 +52,1 @@\n-  static JVMFlag::Error set_uint64_t_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uint64_t_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -54,1 +54,1 @@\n-  static JVMFlag::Error set_size_t_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_size_t_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -56,1 +56,1 @@\n-  static JVMFlag::Error set_double_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_double_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -58,1 +58,1 @@\n-  static JVMFlag::Error set_bool_flag(const char* name, bool value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_bool_flag(const char* name, bool value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -60,1 +60,1 @@\n-  static JVMFlag::Error set_int_flag(const char* name, int value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_int_flag(const char* name, int value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -62,1 +62,1 @@\n-  static JVMFlag::Error set_uint_flag(const char* name, uint value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uint_flag(const char* name, uint value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -64,1 +64,1 @@\n-  static JVMFlag::Error set_intx_flag(const char* name, intx value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_intx_flag(const char* name, intx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -66,1 +66,1 @@\n-  static JVMFlag::Error set_uintx_flag(const char* name, uintx value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uintx_flag(const char* name, uintx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -68,1 +68,1 @@\n-  static JVMFlag::Error set_uint64_t_flag(const char* name, uint64_t value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_uint64_t_flag(const char* name, uint64_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -70,1 +70,1 @@\n-  static JVMFlag::Error set_size_t_flag(const char* name, size_t value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_size_t_flag(const char* name, size_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -72,1 +72,1 @@\n-  static JVMFlag::Error set_double_flag(const char* name, double value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_double_flag(const char* name, double value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -74,1 +74,1 @@\n-  static JVMFlag::Error set_ccstr_flag(const char* name, const char* value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_ccstr_flag(const char* name, const char* value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -82,1 +82,1 @@\n-  static JVMFlag::Error set_flag(const char* flag_name, const char* flag_value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_flag(const char* flag_name, const char* flag_value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n@@ -89,1 +89,1 @@\n-  static JVMFlag::Error set_flag(const char* flag_name, jvalue flag_value, JVMFlag::Flags origin, FormatBuffer<80>& err_msg);\n+  static JVMFlag::Error set_flag(const char* flag_name, jvalue flag_value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n","filename":"src\/hotspot\/share\/services\/writeableFlags.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -213,0 +213,4 @@\n+\n+  constexpr size_t size() const {\n+    return static_cast<size_t>(_end - _start); \/\/ _end is exclusive\n+  }\n","filename":"src\/hotspot\/share\/utilities\/enumIterator.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+enum class JVMFlagOrigin : int;\n","filename":"src\/hotspot\/share\/utilities\/vmEnums.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  private static int   Flags_ORIG_COMMAND_LINE;\n+  private static int   Flags_WAS_SET_ON_COMMAND_LINE;\n@@ -198,1 +198,1 @@\n-            if ((flags & Flags_ORIG_COMMAND_LINE) == Flags_ORIG_COMMAND_LINE) {\n+            if ((flags & Flags_WAS_SET_ON_COMMAND_LINE) == Flags_WAS_SET_ON_COMMAND_LINE) {\n@@ -493,9 +493,9 @@\n-    Flags_DEFAULT = db.lookupIntConstant(\"JVMFlag::DEFAULT\").intValue();\n-    Flags_COMMAND_LINE = db.lookupIntConstant(\"JVMFlag::COMMAND_LINE\").intValue();\n-    Flags_ENVIRON_VAR = db.lookupIntConstant(\"JVMFlag::ENVIRON_VAR\").intValue();\n-    Flags_CONFIG_FILE = db.lookupIntConstant(\"JVMFlag::CONFIG_FILE\").intValue();\n-    Flags_MANAGEMENT = db.lookupIntConstant(\"JVMFlag::MANAGEMENT\").intValue();\n-    Flags_ERGONOMIC = db.lookupIntConstant(\"JVMFlag::ERGONOMIC\").intValue();\n-    Flags_ATTACH_ON_DEMAND = db.lookupIntConstant(\"JVMFlag::ATTACH_ON_DEMAND\").intValue();\n-    Flags_INTERNAL = db.lookupIntConstant(\"JVMFlag::INTERNAL\").intValue();\n-    Flags_JIMAGE_RESOURCE = db.lookupIntConstant(\"JVMFlag::JIMAGE_RESOURCE\").intValue();\n+    Flags_DEFAULT = db.lookupIntConstant(\"JVMFlagOrigin::DEFAULT\").intValue();\n+    Flags_COMMAND_LINE = db.lookupIntConstant(\"JVMFlagOrigin::COMMAND_LINE\").intValue();\n+    Flags_ENVIRON_VAR = db.lookupIntConstant(\"JVMFlagOrigin::ENVIRON_VAR\").intValue();\n+    Flags_CONFIG_FILE = db.lookupIntConstant(\"JVMFlagOrigin::CONFIG_FILE\").intValue();\n+    Flags_MANAGEMENT = db.lookupIntConstant(\"JVMFlagOrigin::MANAGEMENT\").intValue();\n+    Flags_ERGONOMIC = db.lookupIntConstant(\"JVMFlagOrigin::ERGONOMIC\").intValue();\n+    Flags_ATTACH_ON_DEMAND = db.lookupIntConstant(\"JVMFlagOrigin::ATTACH_ON_DEMAND\").intValue();\n+    Flags_INTERNAL = db.lookupIntConstant(\"JVMFlagOrigin::INTERNAL\").intValue();\n+    Flags_JIMAGE_RESOURCE = db.lookupIntConstant(\"JVMFlagOrigin::JIMAGE_RESOURCE\").intValue();\n@@ -503,1 +503,1 @@\n-    Flags_ORIG_COMMAND_LINE = db.lookupIntConstant(\"JVMFlag::ORIG_COMMAND_LINE\").intValue();\n+    Flags_WAS_SET_ON_COMMAND_LINE = db.lookupIntConstant(\"JVMFlag::WAS_SET_ON_COMMAND_LINE\").intValue();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}