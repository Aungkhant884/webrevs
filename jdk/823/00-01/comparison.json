{"files":[{"patch":"@@ -127,9 +127,9 @@\n-    case JVMFlag::DEFAULT: return \"Default\";\n-    case JVMFlag::COMMAND_LINE: return \"Command line\";\n-    case JVMFlag::ENVIRON_VAR: return \"Environment variable\";\n-    case JVMFlag::CONFIG_FILE: return \"Config file\";\n-    case JVMFlag::MANAGEMENT: return \"Management\";\n-    case JVMFlag::ERGONOMIC: return \"Ergonomic\";\n-    case JVMFlag::ATTACH_ON_DEMAND: return \"Attach on demand\";\n-    case JVMFlag::INTERNAL: return \"Internal\";\n-    case JVMFlag::JIMAGE_RESOURCE: return \"JImage resource\";\n+    case JVMFlagOrigin::DEFAULT: return \"Default\";\n+    case JVMFlagOrigin::COMMAND_LINE: return \"Command line\";\n+    case JVMFlagOrigin::ENVIRON_VAR: return \"Environment variable\";\n+    case JVMFlagOrigin::CONFIG_FILE: return \"Config file\";\n+    case JVMFlagOrigin::MANAGEMENT: return \"Management\";\n+    case JVMFlagOrigin::ERGONOMIC: return \"Ergonomic\";\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND: return \"Attach on demand\";\n+    case JVMFlagOrigin::INTERNAL: return \"Internal\";\n+    case JVMFlagOrigin::JIMAGE_RESOURCE: return \"JImage resource\";\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1232,1 +1232,1 @@\n-  JVMFlag::Error result = JVMFlagAccess::set<T, type_enum>(flag, value, JVMFlag::INTERNAL);\n+  JVMFlag::Error result = JVMFlagAccess::set<T, type_enum>(flag, value, JVMFlagOrigin::INTERNAL);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1406,1 +1406,1 @@\n-        result &= process_argument(token, ignore_unrecognized, JVMFlag::CONFIG_FILE);\n+        result &= process_argument(token, ignore_unrecognized, JVMFlagOrigin::CONFIG_FILE);\n@@ -1424,1 +1424,1 @@\n-    result &= process_argument(token, ignore_unrecognized, JVMFlag::CONFIG_FILE);\n+    result &= process_argument(token, ignore_unrecognized, JVMFlagOrigin::CONFIG_FILE);\n@@ -2294,1 +2294,1 @@\n-  jint result = parse_each_vm_init_arg(vm_options_args, &patch_mod_javabase, JVMFlag::JIMAGE_RESOURCE);\n+  jint result = parse_each_vm_init_arg(vm_options_args, &patch_mod_javabase, JVMFlagOrigin::JIMAGE_RESOURCE);\n@@ -2301,1 +2301,1 @@\n-  result = parse_each_vm_init_arg(java_tool_options_args, &patch_mod_javabase, JVMFlag::ENVIRON_VAR);\n+  result = parse_each_vm_init_arg(java_tool_options_args, &patch_mod_javabase, JVMFlagOrigin::ENVIRON_VAR);\n@@ -2307,1 +2307,1 @@\n-  result = parse_each_vm_init_arg(cmd_line_args, &patch_mod_javabase, JVMFlag::COMMAND_LINE);\n+  result = parse_each_vm_init_arg(cmd_line_args, &patch_mod_javabase, JVMFlagOrigin::COMMAND_LINE);\n@@ -2314,1 +2314,1 @@\n-  result = parse_each_vm_init_arg(java_options_args, &patch_mod_javabase, JVMFlag::ENVIRON_VAR);\n+  result = parse_each_vm_init_arg(java_options_args, &patch_mod_javabase, JVMFlagOrigin::ENVIRON_VAR);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  int was_in_cmdline = (new_origin == COMMAND_LINE) ? WAS_SET_IN_COMMAND_LINE : 0;\n+  int was_in_cmdline = (new_origin == JVMFlagOrigin::COMMAND_LINE) ? WAS_SET_IN_COMMAND_LINE : 0;\n@@ -386,1 +386,1 @@\n-    case DEFAULT:\n+    case JVMFlagOrigin::DEFAULT:\n@@ -388,1 +388,1 @@\n-    case COMMAND_LINE:\n+    case JVMFlagOrigin::COMMAND_LINE:\n@@ -390,1 +390,1 @@\n-    case ENVIRON_VAR:\n+    case JVMFlagOrigin::ENVIRON_VAR:\n@@ -392,1 +392,1 @@\n-    case CONFIG_FILE:\n+    case JVMFlagOrigin::CONFIG_FILE:\n@@ -394,1 +394,1 @@\n-    case MANAGEMENT:\n+    case JVMFlagOrigin::MANAGEMENT:\n@@ -396,1 +396,1 @@\n-    case ERGONOMIC:\n+    case JVMFlagOrigin::ERGONOMIC:\n@@ -401,1 +401,1 @@\n-    case ATTACH_ON_DEMAND:\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND:\n@@ -403,1 +403,1 @@\n-    case INTERNAL:\n+    case JVMFlagOrigin::INTERNAL:\n@@ -405,1 +405,1 @@\n-    case JIMAGE_RESOURCE:\n+    case JVMFlagOrigin::JIMAGE_RESOURCE:\n@@ -502,1 +502,1 @@\n-  flags = flags | extra_flags | static_cast<int>(JVMFlag::DEFAULT) | flag_group(flag_enum);\n+  flags = flags | extra_flags | static_cast<int>(JVMFlagOrigin::DEFAULT) | flag_group(flag_enum);\n@@ -660,1 +660,1 @@\n-    if (array[i]->get_origin() != DEFAULT) {\n+    if (array[i]->get_origin() != JVMFlagOrigin::DEFAULT) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -56,10 +56,0 @@\n-  static const JVMFlagOrigin DEFAULT          = JVMFlagOrigin::DEFAULT;\n-  static const JVMFlagOrigin COMMAND_LINE     = JVMFlagOrigin::COMMAND_LINE;\n-  static const JVMFlagOrigin ENVIRON_VAR      = JVMFlagOrigin::ENVIRON_VAR;\n-  static const JVMFlagOrigin CONFIG_FILE      = JVMFlagOrigin::CONFIG_FILE;\n-  static const JVMFlagOrigin MANAGEMENT       = JVMFlagOrigin::MANAGEMENT;\n-  static const JVMFlagOrigin ERGONOMIC        = JVMFlagOrigin::ERGONOMIC;\n-  static const JVMFlagOrigin ATTACH_ON_DEMAND = JVMFlagOrigin::ATTACH_ON_DEMAND;\n-  static const JVMFlagOrigin INTERNAL         = JVMFlagOrigin::INTERNAL;\n-  static const JVMFlagOrigin JIMAGE_RESOURCE  = JVMFlagOrigin::JIMAGE_RESOURCE;\n-\n@@ -260,11 +250,11 @@\n-  bool is_default() const         { return (get_origin() == DEFAULT);            }\n-  bool is_ergonomic() const       { return (get_origin() == ERGONOMIC);          }\n-  bool is_command_line() const    { return (_flags & WAS_SET_IN_COMMAND_LINE) != 0;   }\n-  void set_command_line()         { _flags = Flags(_flags | WAS_SET_IN_COMMAND_LINE); }\n-  bool is_jimage_resource() const { return (get_origin() == JIMAGE_RESOURCE);    }\n-  bool is_product() const         { return (_flags & KIND_PRODUCT) != 0;         }\n-  bool is_manageable() const      { return (_flags & KIND_MANAGEABLE) != 0;      }\n-  bool is_diagnostic() const      { return (_flags & KIND_DIAGNOSTIC) != 0;      }\n-  bool is_experimental() const    { return (_flags & KIND_EXPERIMENTAL) != 0;    }\n-  bool is_notproduct() const      { return (_flags & KIND_NOT_PRODUCT) != 0;     }\n-  bool is_develop() const         { return (_flags & KIND_DEVELOP) != 0;         }\n+  bool is_default() const         { return (get_origin() == JVMFlagOrigin::DEFAULT);          }\n+  bool is_ergonomic() const       { return (get_origin() == JVMFlagOrigin::ERGONOMIC);        }\n+  bool is_command_line() const    { return (_flags & WAS_SET_IN_COMMAND_LINE) != 0;           }\n+  void set_command_line()         { _flags = Flags(_flags | WAS_SET_IN_COMMAND_LINE);         }\n+  bool is_jimage_resource() const { return (get_origin() == JVMFlagOrigin::JIMAGE_RESOURCE);  }\n+  bool is_product() const         { return (_flags & KIND_PRODUCT) != 0;                      }\n+  bool is_manageable() const      { return (_flags & KIND_MANAGEABLE) != 0;                   }\n+  bool is_diagnostic() const      { return (_flags & KIND_DIAGNOSTIC) != 0;                   }\n+  bool is_experimental() const    { return (_flags & KIND_EXPERIMENTAL) != 0;                 }\n+  bool is_notproduct() const      { return (_flags & KIND_NOT_PRODUCT) != 0;                  }\n+  bool is_develop() const         { return (_flags & KIND_DEVELOP) != 0;                      }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -78,3 +78,3 @@\n-                                       FLAG_MEMBER_SETTER(name)((value), JVMFlag::COMMAND_LINE))\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::ERGONOMIC))\n-#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlag::MANAGEMENT))\n+                                       FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::COMMAND_LINE))\n+#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n+#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::MANAGEMENT))\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2604,9 +2604,9 @@\n-  declare_constant(JVMFlag::DEFAULT)                                      \\\n-  declare_constant(JVMFlag::COMMAND_LINE)                                 \\\n-  declare_constant(JVMFlag::ENVIRON_VAR)                                  \\\n-  declare_constant(JVMFlag::CONFIG_FILE)                                  \\\n-  declare_constant(JVMFlag::MANAGEMENT)                                   \\\n-  declare_constant(JVMFlag::ERGONOMIC)                                    \\\n-  declare_constant(JVMFlag::ATTACH_ON_DEMAND)                             \\\n-  declare_constant(JVMFlag::INTERNAL)                                     \\\n-  declare_constant(JVMFlag::JIMAGE_RESOURCE)                              \\\n+  declare_constant(JVMFlagOrigin::DEFAULT)                                \\\n+  declare_constant(JVMFlagOrigin::COMMAND_LINE)                           \\\n+  declare_constant(JVMFlagOrigin::ENVIRON_VAR)                            \\\n+  declare_constant(JVMFlagOrigin::CONFIG_FILE)                            \\\n+  declare_constant(JVMFlagOrigin::MANAGEMENT)                             \\\n+  declare_constant(JVMFlagOrigin::ERGONOMIC)                              \\\n+  declare_constant(JVMFlagOrigin::ATTACH_ON_DEMAND)                       \\\n+  declare_constant(JVMFlagOrigin::INTERNAL)                               \\\n+  declare_constant(JVMFlagOrigin::JIMAGE_RESOURCE)                        \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-  int ret = WriteableFlags::set_flag(op->arg(0), op->arg(1), JVMFlag::ATTACH_ON_DEMAND, err_msg);\n+  int ret = WriteableFlags::set_flag(op->arg(0), op->arg(1), JVMFlagOrigin::ATTACH_ON_DEMAND, err_msg);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  int ret = WriteableFlags::set_flag(_flag.value(), val, JVMFlag::MANAGEMENT, err_msg);\n+  int ret = WriteableFlags::set_flag(_flag.value(), val, JVMFlagOrigin::MANAGEMENT, err_msg);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1477,1 +1477,1 @@\n-    case JVMFlag::DEFAULT:\n+    case JVMFlagOrigin::DEFAULT:\n@@ -1480,1 +1480,1 @@\n-    case JVMFlag::COMMAND_LINE:\n+    case JVMFlagOrigin::COMMAND_LINE:\n@@ -1483,1 +1483,1 @@\n-    case JVMFlag::ENVIRON_VAR:\n+    case JVMFlagOrigin::ENVIRON_VAR:\n@@ -1486,1 +1486,1 @@\n-    case JVMFlag::CONFIG_FILE:\n+    case JVMFlagOrigin::CONFIG_FILE:\n@@ -1489,1 +1489,1 @@\n-    case JVMFlag::MANAGEMENT:\n+    case JVMFlagOrigin::MANAGEMENT:\n@@ -1492,1 +1492,1 @@\n-    case JVMFlag::ERGONOMIC:\n+    case JVMFlagOrigin::ERGONOMIC:\n@@ -1495,1 +1495,1 @@\n-    case JVMFlag::ATTACH_ON_DEMAND:\n+    case JVMFlagOrigin::ATTACH_ON_DEMAND:\n@@ -1587,1 +1587,1 @@\n-  int succeed = WriteableFlags::set_flag(name, new_value, JVMFlag::MANAGEMENT, error_msg);\n+  int succeed = WriteableFlags::set_flag(name, new_value, JVMFlagOrigin::MANAGEMENT, error_msg);\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -493,9 +493,9 @@\n-    Flags_DEFAULT = db.lookupIntConstant(\"JVMFlag::DEFAULT\").intValue();\n-    Flags_COMMAND_LINE = db.lookupIntConstant(\"JVMFlag::COMMAND_LINE\").intValue();\n-    Flags_ENVIRON_VAR = db.lookupIntConstant(\"JVMFlag::ENVIRON_VAR\").intValue();\n-    Flags_CONFIG_FILE = db.lookupIntConstant(\"JVMFlag::CONFIG_FILE\").intValue();\n-    Flags_MANAGEMENT = db.lookupIntConstant(\"JVMFlag::MANAGEMENT\").intValue();\n-    Flags_ERGONOMIC = db.lookupIntConstant(\"JVMFlag::ERGONOMIC\").intValue();\n-    Flags_ATTACH_ON_DEMAND = db.lookupIntConstant(\"JVMFlag::ATTACH_ON_DEMAND\").intValue();\n-    Flags_INTERNAL = db.lookupIntConstant(\"JVMFlag::INTERNAL\").intValue();\n-    Flags_JIMAGE_RESOURCE = db.lookupIntConstant(\"JVMFlag::JIMAGE_RESOURCE\").intValue();\n+    Flags_DEFAULT = db.lookupIntConstant(\"JVMFlagOrigin::DEFAULT\").intValue();\n+    Flags_COMMAND_LINE = db.lookupIntConstant(\"JVMFlagOrigin::COMMAND_LINE\").intValue();\n+    Flags_ENVIRON_VAR = db.lookupIntConstant(\"JVMFlagOrigin::ENVIRON_VAR\").intValue();\n+    Flags_CONFIG_FILE = db.lookupIntConstant(\"JVMFlagOrigin::CONFIG_FILE\").intValue();\n+    Flags_MANAGEMENT = db.lookupIntConstant(\"JVMFlagOrigin::MANAGEMENT\").intValue();\n+    Flags_ERGONOMIC = db.lookupIntConstant(\"JVMFlagOrigin::ERGONOMIC\").intValue();\n+    Flags_ATTACH_ON_DEMAND = db.lookupIntConstant(\"JVMFlagOrigin::ATTACH_ON_DEMAND\").intValue();\n+    Flags_INTERNAL = db.lookupIntConstant(\"JVMFlagOrigin::INTERNAL\").intValue();\n+    Flags_JIMAGE_RESOURCE = db.lookupIntConstant(\"JVMFlagOrigin::JIMAGE_RESOURCE\").intValue();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}