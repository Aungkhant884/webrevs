{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1386,18 +1386,11 @@\n-        \/\/ permission if applicable. NOTE: cannot use lambda for\n-        \/\/ remappingFunction parameter until JDK-8076596 is fixed.\n-        perms.merge(sp.getName(), sp,\n-            new java.util.function.BiFunction<>() {\n-                @Override\n-                public SocketPermission apply(SocketPermission existingVal,\n-                                              SocketPermission newVal) {\n-                    int oldMask = existingVal.getMask();\n-                    int newMask = newVal.getMask();\n-                    if (oldMask != newMask) {\n-                        int effective = oldMask | newMask;\n-                        if (effective == newMask) {\n-                            return newVal;\n-                        }\n-                        if (effective != oldMask) {\n-                            return new SocketPermission(sp.getName(),\n-                                                        effective);\n-                        }\n+        \/\/ permission if applicable.\n+        perms.merge(sp.getName(), sp, (existingVal, newVal) -> {\n+                int oldMask = existingVal.getMask();\n+                int newMask = newVal.getMask();\n+                if (oldMask != newMask) {\n+                    int effective = oldMask | newMask;\n+                    if (effective == newMask) {\n+                        return newVal;\n+                    }\n+                    if (effective != oldMask) {\n+                        return new SocketPermission(sp.getName(), effective);\n@@ -1405,1 +1398,0 @@\n-                    return existingVal;\n@@ -1407,0 +1399,1 @@\n+                return existingVal;\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,16 +82,9 @@\n-        \/\/ Add permission to map. NOTE: cannot use lambda for\n-        \/\/ remappingFunction parameter until JDK-8076596 is fixed.\n-        perms.compute(unresolvedPermission.getName(),\n-            new java.util.function.BiFunction<>() {\n-                @Override\n-                public List<UnresolvedPermission> apply(String key,\n-                                        List<UnresolvedPermission> oldValue) {\n-                    if (oldValue == null) {\n-                        List<UnresolvedPermission> v =\n-                            new CopyOnWriteArrayList<>();\n-                        v.add(unresolvedPermission);\n-                        return v;\n-                    } else {\n-                        oldValue.add(unresolvedPermission);\n-                        return oldValue;\n-                    }\n+        \/\/ Add permission to map.\n+        perms.compute(unresolvedPermission.getName(), (key, oldValue) -> {\n+                if (oldValue == null) {\n+                    List<UnresolvedPermission> v = new CopyOnWriteArrayList<>();\n+                    v.add(unresolvedPermission);\n+                    return v;\n+                } else {\n+                    oldValue.add(unresolvedPermission);\n+                    return oldValue;\n","filename":"src\/java.base\/share\/classes\/java\/security\/UnresolvedPermissionCollection.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -472,18 +472,11 @@\n-        \/\/ permission if applicable. NOTE: cannot use lambda for\n-        \/\/ remappingFunction parameter until JDK-8076596 is fixed.\n-        perms.merge(propName, pp,\n-            new java.util.function.BiFunction<>() {\n-                @Override\n-                public PropertyPermission apply(PropertyPermission existingVal,\n-                                                PropertyPermission newVal) {\n-\n-                    int oldMask = existingVal.getMask();\n-                    int newMask = newVal.getMask();\n-                    if (oldMask != newMask) {\n-                        int effective = oldMask | newMask;\n-                        if (effective == newMask) {\n-                            return newVal;\n-                        }\n-                        if (effective != oldMask) {\n-                            return new PropertyPermission(propName, effective);\n-                        }\n+        \/\/ permission if applicable.\n+        perms.merge(propName, pp, (existingVal, newVal) -> {\n+                int oldMask = existingVal.getMask();\n+                int newMask = newVal.getMask();\n+                if (oldMask != newMask) {\n+                    int effective = oldMask | newMask;\n+                    if (effective == newMask) {\n+                        return newVal;\n+                    }\n+                    if (effective != oldMask) {\n+                        return new PropertyPermission(propName, effective);\n@@ -491,1 +484,0 @@\n-                    return existingVal;\n@@ -493,0 +485,1 @@\n+                return existingVal;\n","filename":"src\/java.base\/share\/classes\/java\/util\/PropertyPermission.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -570,17 +570,11 @@\n-        \/\/ permission if applicable. NOTE: cannot use lambda for\n-        \/\/ remappingFunction parameter until JDK-8076596 is fixed.\n-        perms.merge(princName, sp,\n-            new java.util.function.BiFunction<>() {\n-                @Override\n-                public Permission apply(Permission existingVal,\n-                                        Permission newVal) {\n-                    int oldMask = ((ServicePermission) existingVal).getMask();\n-                    int newMask = ((ServicePermission) newVal).getMask();\n-                    if (oldMask != newMask) {\n-                        int effective = oldMask | newMask;\n-                        if (effective == newMask) {\n-                            return newVal;\n-                        }\n-                        if (effective != oldMask) {\n-                            return new ServicePermission(princName, effective);\n-                        }\n+        \/\/ permission if applicable.\n+        perms.merge(princName, sp, (existingVal, newVal) -> {\n+                int oldMask = ((ServicePermission) existingVal).getMask();\n+                int newMask = ((ServicePermission) newVal).getMask();\n+                if (oldMask != newMask) {\n+                    int effective = oldMask | newMask;\n+                    if (effective == newMask) {\n+                        return newVal;\n+                    }\n+                    if (effective != oldMask) {\n+                        return new ServicePermission(princName, effective);\n@@ -588,1 +582,0 @@\n-                    return existingVal;\n@@ -590,0 +583,1 @@\n+                return existingVal;\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/ServicePermission.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"}]}