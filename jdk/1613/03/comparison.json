{"files":[{"patch":"@@ -58,1 +58,0 @@\n-import sun.java2d.cmm.ProfileActivator;\n@@ -61,1 +60,0 @@\n-import sun.java2d.cmm.ProfileDeferralMgr;\n@@ -96,4 +94,2 @@\n-    private transient Profile cmmProfile;\n-\n-    private transient ProfileDeferralInfo deferralInfo;\n-    private transient ProfileActivator profileActivator;\n+    private transient volatile Profile cmmProfile;\n+    private transient volatile ProfileDeferralInfo deferralInfo;\n@@ -734,1 +730,1 @@\n-        this.cmmProfile = p;\n+        cmmProfile = p;\n@@ -742,7 +738,1 @@\n-        this.deferralInfo = pdi;\n-        this.profileActivator = new ProfileActivator() {\n-            public void activate() throws ProfileDataException {\n-                activateDeferredProfile();\n-            }\n-        };\n-        ProfileDeferralMgr.registerDeferral(this.profileActivator);\n+        deferralInfo = pdi;\n@@ -783,4 +773,0 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-\n@@ -845,1 +831,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -849,1 +835,1 @@\n-                    sRGBprofile = getDeferredInstance(pInfo);\n+                    sRGBprofile = new ICC_ProfileRGB(pdi);\n@@ -859,1 +845,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -863,1 +849,1 @@\n-                    XYZprofile = getDeferredInstance(pInfo);\n+                    XYZprofile = new ICC_Profile(pdi);\n@@ -873,1 +859,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -877,1 +863,1 @@\n-                    PYCCprofile = getDeferredInstance(pInfo);\n+                    PYCCprofile = new ICC_Profile(pdi);\n@@ -887,1 +873,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -891,1 +877,1 @@\n-                    GRAYprofile = getDeferredInstance(pInfo);\n+                    GRAYprofile = new ICC_ProfileGray(pdi);\n@@ -901,1 +887,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -905,1 +891,1 @@\n-                    LINEAR_RGBprofile = getDeferredInstance(pInfo);\n+                    LINEAR_RGBprofile = new ICC_ProfileRGB(pdi);\n@@ -919,20 +905,0 @@\n-    \/**\n-     * This method asserts system privileges, so is used only for the standard\n-     * profiles.\n-     *\/\n-    private static ICC_Profile getStandardProfile(final String name) {\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<ICC_Profile>() {\n-                    public ICC_Profile run() {\n-                        ICC_Profile p = null;\n-                        try {\n-                            p = getInstance(name);\n-                        } catch (IOException ex) {\n-                            throw new IllegalArgumentException(\n-                                    \"Can't load standard profile: \" + name);\n-                        }\n-                        return p;\n-                    }\n-                });\n-    }\n-\n@@ -1000,7 +966,1 @@\n-    byte[] profileData;\n-\n-        if (s instanceof ProfileDeferralInfo) {\n-            \/* hack to detect profiles whose loading can be deferred *\/\n-            return getDeferredInstance((ProfileDeferralInfo) s);\n-        }\n-\n+        byte[] profileData;\n@@ -1038,9 +998,4 @@\n-     * Constructs an {@code ICC_Profile} for which the actual loading of the\n-     * profile data from a file and the initialization of the CMM should be\n-     * deferred as long as possible. Deferral is only used for standard\n-     * profiles. If deferring is disabled, then getStandardProfile() ensures\n-     * that all of the appropriate access privileges are granted when loading\n-     * this profile. If deferring is enabled, then the deferred activation code\n-     * will take care of access privileges.\n-     *\n-     * @see #activateDeferredProfile()\n+     * Activates the deferred standard profiles. Implementation of this method\n+     * mimics the old behaviour when the CMMException and IOException were\n+     * wrapped by the ProfileDataException, and the ProfileDataException itself\n+     * was ignored during activation.\n@@ -1048,45 +1003,21 @@\n-    static ICC_Profile getDeferredInstance(ProfileDeferralInfo pdi) {\n-        if (!ProfileDeferralMgr.deferring) {\n-            return getStandardProfile(pdi.filename);\n-        }\n-        if (pdi.colorSpaceType == ColorSpace.TYPE_RGB) {\n-            return new ICC_ProfileRGB(pdi);\n-        } else if (pdi.colorSpaceType == ColorSpace.TYPE_GRAY) {\n-            return new ICC_ProfileGray(pdi);\n-        } else {\n-            return new ICC_Profile(pdi);\n-        }\n-    }\n-\n-\n-    void activateDeferredProfile() throws ProfileDataException {\n-        byte[] profileData;\n-        final String fileName = deferralInfo.filename;\n-\n-        profileActivator = null;\n-        deferralInfo = null;\n-        InputStream is = getStandardProfileInputStream(fileName);\n-        if (is == null) {\n-            throw new ProfileDataException(\"Cannot open file \" + fileName);\n-        }\n-        try {\n-            profileData = getProfileDataFromStream(is);\n-            is.close();    \/* close the file *\/\n-        }\n-        catch (IOException e) {\n-            ProfileDataException pde = new\n-                ProfileDataException(\"Invalid ICC Profile Data\" + fileName);\n-            pde.initCause(e);\n-            throw pde;\n-        }\n-        if (profileData == null) {\n-            throw new ProfileDataException(\"Invalid ICC Profile Data\" +\n-                fileName);\n-        }\n-        try {\n-            cmmProfile = CMSManager.getModule().loadProfile(profileData);\n-        } catch (CMMException c) {\n-            ProfileDataException pde = new\n-                ProfileDataException(\"Invalid ICC Profile Data\" + fileName);\n-            pde.initCause(c);\n-            throw pde;\n+    private void activate() {\n+        if (cmmProfile == null) {\n+            synchronized (this) {\n+                if (cmmProfile != null) {\n+                    return;\n+                }\n+                var is = getStandardProfileInputStream(deferralInfo.filename);\n+                if (is == null) {\n+                    return;\n+                }\n+                try {\n+                    byte[] data = getProfileDataFromStream(is);\n+                    if (data != null) {\n+                        cmmProfile = CMSManager.getModule().loadProfile(data);\n+                        \/\/ from now we cannot use the deferred value, drop it\n+                        deferralInfo = null;\n+                    }\n+                    is.close();    \/* close the stream *\/\n+                } catch (CMMException | IOException ignore) {\n+                }\n+            }\n@@ -1133,5 +1064,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.profileClass; \/* Need to have this info for\n-                                                 ICC_ColorSpace without\n-                                                 causing a deferred profile\n-                                                 to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.profileClass;\n@@ -1193,5 +1122,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.colorSpaceType; \/* Need to have this info for\n-                                                   ICC_ColorSpace without\n-                                                   causing a deferred profile\n-                                                   to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.colorSpaceType;\n@@ -1199,0 +1126,1 @@\n+        activate();\n@@ -1226,3 +1154,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1286,3 +1212,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1318,3 +1242,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1366,3 +1288,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1420,5 +1340,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.numComponents; \/* Need to have this info for\n-                                                  ICC_ColorSpace without\n-                                                  causing a deferred profile\n-                                                  to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.numComponents;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":54,"deletions":136,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.awt.Point;\n@@ -41,2 +40,8 @@\n-import java.awt.color.*;\n-import sun.java2d.cmm.ColorTransform;\n+import java.awt.Point;\n+import java.awt.RenderingHints;\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+\n@@ -44,1 +49,1 @@\n-import sun.java2d.cmm.ProfileDeferralMgr;\n+import sun.java2d.cmm.ColorTransform;\n@@ -46,3 +51,0 @@\n-import java.awt.geom.Rectangle2D;\n-import java.awt.geom.Point2D;\n-import java.awt.RenderingHints;\n@@ -80,7 +82,0 @@\n-    \/* the class initializer *\/\n-    static {\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorConvertOp.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2006, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d.cmm;\n-\n-import java.awt.color.ProfileDataException;\n-\n-\/**\n- * An interface to allow the ProfileDeferralMgr to activate a\n- * deferred profile.\n- *\/\n-public interface ProfileActivator {\n-\n-    \/**\n-     * Activate a previously deferred ICC_Profile object.\n-     *\/\n-    public void activate() throws ProfileDataException;\n-\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/ProfileActivator.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.io.InputStream;\n-import java.io.IOException;\n-\n-\n@@ -33,4 +29,3 @@\n- * A class to pass information about a profile to be loaded from\n- * a file to the static getInstance(InputStream) method of\n- * ICC_Profile.  Loading of the profile data and initialization\n- * of the CMM is to be deferred as long as possible.\n+ * A class to pass information about a profile to be loaded from a file to the\n+ * static getInstance(int cspace) method of ICC_Profile. Loading of the profile\n+ * data and initialization of the CMM is to be deferred as long as possible.\n@@ -38,1 +33,7 @@\n-public class ProfileDeferralInfo extends InputStream {\n+public final class ProfileDeferralInfo {\n+\n+    \/**\n+     * Need to have this info for ICC_ColorSpace without causing a deferred\n+     * profile to be loaded.\n+     *\/\n+    public final int colorSpaceType, numComponents, profileClass;\n@@ -40,2 +41,4 @@\n-    public int colorSpaceType, numComponents, profileClass;\n-    public String filename;\n+    \/**\n+     * The profile file name, such as \"CIEXYZ.pf\", \"sRGB.pf\", etc.\n+     *\/\n+    public final String filename;\n@@ -44,2 +47,0 @@\n-\n-        super();\n@@ -51,10 +52,0 @@\n-\n-\n-    \/**\n-     * Implements the abstract read() method of InputStream.\n-     *\/\n-    public int read() throws IOException {\n-\n-        return 0;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/ProfileDeferralInfo.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d.cmm;\n-\n-import java.awt.color.ProfileDataException;\n-import java.util.Vector;\n-\n-\n-\/**\n- * A class to manage the deferral of CMM initialization of profile\n- * data for internal ICC_Profile objects - i.e. when we \"trust\" that\n- * the profile data is valid and we think it may not be needed.  An\n- * example is the sRGB profile which gets loaded by any program doing\n- * graphics, but which may not be needed if the program does not need\n- * high quality color conversion.\n- *\/\n-public class ProfileDeferralMgr {\n-\n-    public static boolean deferring = true;\n-    private static Vector<ProfileActivator> aVector;\n-\n-    \/**\n-     * Records a ProfileActivator object whose activate method will\n-     * be called if the CMM needs to be activated.\n-     *\/\n-    public static void registerDeferral(ProfileActivator pa) {\n-\n-        if (!deferring) {\n-            return;\n-        }\n-        if (aVector == null) {\n-            aVector = new Vector<ProfileActivator>(3, 3);\n-        }\n-        aVector.addElement(pa);\n-        return;\n-    }\n-\n-\n-    \/**\n-     * Removes a ProfileActivator object from the vector of ProfileActivator\n-     * objects whose activate method will be called if the CMM needs to be\n-     * activated.\n-     *\/\n-    public static void activateProfiles() {\n-\n-        int i, n;\n-\n-        deferring = false;\n-        if (aVector == null) {\n-            return;\n-        }\n-        n = aVector.size();\n-        for (ProfileActivator pa : aVector) {\n-            try {\n-                pa.activate();\n-            } catch (ProfileDataException e) {\n-                \/*\n-                 * Ignore profile activation error for now:\n-                 * such exception is pssible due to absence\n-                 * or corruption of standard color profile.\n-                 * As for now we expect all profiles should\n-                 * be shiped with jre and presence of this\n-                 * exception is indication of some configuration\n-                 * problem in jre installation.\n-                 *\n-                 * NB: we still are greedy loading deferred profiles\n-                 * and load them all if any of them is needed.\n-                 * Therefore broken profile (if any) might be never used.\n-                 * If there will be attempt to use broken profile then\n-                 * it will result in CMMException.\n-                 *\/\n-            }\n-        }\n-        aVector.removeAllElements();\n-        aVector = null;\n-        return;\n-    }\n-\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/ProfileDeferralMgr.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.awt.color.ICC_Profile;\n@@ -41,0 +40,1 @@\n+import java.awt.color.ICC_Profile;\n@@ -42,2 +42,0 @@\n-import java.awt.image.Raster;\n-import java.awt.image.WritableRaster;\n@@ -45,1 +43,0 @@\n-import java.awt.image.SampleModel;\n@@ -47,3 +44,3 @@\n-import sun.java2d.cmm.*;\n-import sun.java2d.cmm.lcms.*;\n-import static sun.java2d.cmm.lcms.LCMSImageLayout.ImageLayoutException;\n+import java.awt.image.Raster;\n+import java.awt.image.SampleModel;\n+import java.awt.image.WritableRaster;\n@@ -51,0 +48,3 @@\n+import sun.java2d.cmm.ColorTransform;\n+\n+import static sun.java2d.cmm.lcms.LCMSImageLayout.ImageLayoutException;\n@@ -69,7 +69,0 @@\n-    \/* the class initializer *\/\n-    static {\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSTransform.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -652,3 +652,16 @@\n-    fid = (*env)->GetFieldID (env,\n-        (*env)->GetObjectClass(env, pf),\n-        \"cmmProfile\", \"Lsun\/java2d\/cmm\/Profile;\");\n+\n+    jclass pcls = (*env)->GetObjectClass(env, pf);\n+    if (pcls == NULL) {\n+        return NULL;\n+    }\n+    jmethodID mid = (*env)->GetMethodID(env, pcls, \"activate\", \"()V\");\n+    if (mid == NULL) {\n+        return NULL;\n+    }\n+    (*env)->CallVoidMethod(env, pf, mid);\n+    if ((*env)->ExceptionOccurred(env)) {\n+        return NULL;\n+    }\n+\n+    fid = (*env)->GetFieldID(env, pcls, \"cmmProfile\",\n+                             \"Lsun\/java2d\/cmm\/Profile;\");\n","filename":"src\/java.desktop\/share\/native\/liblcms\/LCMS.c","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.color.ICC_ProfileRGB;\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * @test\n+ * @bug 6986863\n+ * @summary Verifies MT safety of ICC_ProfileRGB#getMatrix method\n+ *\/\n+public final class MTMatrixAccess {\n+\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        test((ICC_ProfileRGB) ICC_Profile.getInstance(ColorSpace.CS_sRGB));\n+        test((ICC_ProfileRGB) ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));\n+    }\n+\n+    private static void test(ICC_ProfileRGB rgb) throws InterruptedException {\n+        Thread[] threads = new Thread[100];\n+        CountDownLatch go = new CountDownLatch(1);\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(() -> {\n+                try {\n+                    go.await();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                try {\n+                    rgb.getMatrix();\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    failed = true;\n+                }\n+            });\n+        }\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+        go.countDown();\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ProfileRGB\/MTMatrixAccess.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * @test\n+ * @bug 6986863\n+ * @summary Verifies MT safety of profile activation while a profile is accessed\n+ *\/\n+public final class ProfileActivationDuringPropertyAccess {\n+\n+    private static volatile boolean failed;\n+    private static volatile boolean end;\n+\n+    public static void main(String[] args) throws Exception {\n+        test(ICC_Profile.getInstance(ColorSpace.CS_sRGB));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_GRAY));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_PYCC));\n+    }\n+\n+    private static void test(ICC_Profile profile) throws Exception {\n+        Thread[] ts = new Thread[100];\n+        CountDownLatch latch = new CountDownLatch(ts.length);\n+        for (int i = 0; i < ts.length; i++) {\n+            ts[i] = new Thread(() -> {\n+                latch.countDown();\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException ex) {\n+                }\n+                try {\n+                    while (!end) {\n+                        profile.getColorSpaceType(); \/\/ try use deferred info\n+                    }\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    failed = true;\n+                }\n+            });\n+        }\n+        for (Thread t : ts) {\n+            t.start();\n+        }\n+        Thread.sleep(1500);\n+        profile.getPCSType(); \/\/ activate profile\n+        end = true;\n+        for (Thread t : ts) {\n+            t.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ProfileActivationDuringPropertyAccess.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}