{"files":[{"patch":"@@ -1195,0 +1195,19 @@\n+\n+\/\/ Give up if too few (or too many, in which case the sum will overflow) counts to be meaningful.\n+\/\/ We also check that individual counters are positive first, otherwise the sum can become positive.\n+\/\/ (check for saturation, integer overflow, and immature counts)\n+static bool counters_are_meaningful(int counter1, int counter2, int min) {\n+  \/\/ check for saturation, including \"uint\" values too big to fit in \"int\"\n+  if (counter1 < 0 || counter2 < 0) {\n+    return false;\n+  }\n+  \/\/ check for integer overflow of the sum\n+  int64_t sum = (int64_t)counter1 + (int64_t)counter2;\n+  STATIC_ASSERT(sizeof(counter1) < sizeof(sum));\n+  if (sum > INT_MAX) {\n+    return false;\n+  }\n+  \/\/ check if mature\n+  return (counter1 + counter2) >= min;\n+}\n+\n@@ -1221,0 +1240,2 @@\n+    \/\/ NOTE: saturated UINT_MAX values become negative,\n+    \/\/ as do counts above INT_MAX.\n@@ -1228,0 +1249,1 @@\n+    \/\/ NOTE: overflow for positive values is clamped at INT_MAX\n@@ -1231,0 +1253,2 @@\n+  \/\/ At this point, saturation or overflow is indicated by INT_MAX\n+  \/\/ or a negative value.\n@@ -1234,1 +1258,1 @@\n-  if (taken < 0 || not_taken < 0 || taken + not_taken < 40) {\n+  if (!counters_are_meaningful(taken, not_taken, 40)) {\n@@ -1263,1 +1287,1 @@\n-         \"Bad frequency assignment in if\");\n+         \"Bad frequency assignment in if cnt=%g prob=%g taken=%d not_taken=%d\", cnt, prob, taken, not_taken);\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}