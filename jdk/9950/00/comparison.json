{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.security;\n+\n+import java.security.*;\n+import java.net.*;\n+import java.io.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import org.openjdk.bench.util.InMemoryJavaCompiler;\n+\n+@State(Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 15)\n+@Measurement(iterations = 15)\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value = 3, jvmArgsAppend={\"-Djava.security.manager=allow\"})\n+public class ProtectionDomainBench {\n+\n+    @Param({\"10\", \"100\"})\n+    public int numberOfClasses = 50;\n+\n+    URL u;\n+\n+    static byte[][] compiledClasses;\n+    static Class[] loadedClasses;\n+    static ProtectionDomain[] pd;\n+    static String[] classNames;\n+    static int index = 0;\n+    CodeSource cs;\n+    Permissions p;\n+\n+    static String B(int count) {\n+        return new String(\"public class B\" + count + \" {\"\n+                + \"   static int intField;\"\n+                + \"   public static void compiledMethod() { \"\n+                + \"       intField++;\"\n+                + \"   }\"\n+                + \"}\");\n+    }\n+\n+    @Setup(Level.Iteration)\n+    public void setupClasses() throws Exception {\n+        compiledClasses = new byte[numberOfClasses][];\n+        loadedClasses = new Class[numberOfClasses];\n+        pd = new ProtectionDomain[numberOfClasses];\n+        classNames = new String[numberOfClasses];\n+\n+        u = new URL(\"file:\/tmp\/duke\");\n+        cs = new CodeSource(u, (java.security.cert.Certificate[]) null);\n+        p = new Permissions();\n+        p.add(new SocketPermission(\"localhost\", \"connect\"));\n+\n+        for (int i = 0; i < numberOfClasses; i++) {\n+            classNames[i] = \"B\" + i;\n+            compiledClasses[i] = InMemoryJavaCompiler.compile(classNames[i], B(i));\n+            pd[i] = new ProtectionDomain(cs, p);\n+        }\n+\n+    }\n+\n+    static class ProtectionDomainBenchLoader extends ClassLoader {\n+\n+        ProtectionDomainBenchLoader() {\n+            super();\n+        }\n+\n+        ProtectionDomainBenchLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.equals(classNames[index] \/* \"B\" + index *\/)) {\n+                assert compiledClasses[index]  != null;\n+                return defineClass(name, compiledClasses[index] , 0, (compiledClasses[index]).length, pd[index] );\n+            } else {\n+                return super.findClass(name);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bench()  throws ClassNotFoundException {\n+\n+        ProtectionDomainBench.ProtectionDomainBenchLoader loader1 = new\n+                ProtectionDomainBench.ProtectionDomainBenchLoader();\n+\n+        for (index = 0; index < compiledClasses.length; index++) {\n+            Class c = loader1.findClass(classNames[index]);\n+            loadedClasses[index] = c;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/ProtectionDomainBench.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package jdk.test.lib.compiler;\n+package org.openjdk.bench.util;\n","filename":"test\/micro\/org\/openjdk\/bench\/util\/InMemoryJavaCompiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","status":"copied"}]}