{"files":[{"patch":"@@ -289,1 +289,3 @@\n-      if (psStringDedup::is_candidate_from_evacuation(new_obj, new_obj_is_tenured)) {\n+      if (StringDedup::is_enabled() &&\n+          java_lang_String::is_instance_inlined(new_obj) &&\n+          psStringDedup::is_candidate_from_evacuation(new_obj, new_obj_is_tenured)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/parallel\/psParallelCompact.inline.hpp\"\n-#include \"gc\/parallel\/psScavenge.hpp\"\n-#include \"gc\/parallel\/psStringDedup.hpp\"\n-\n-bool psStringDedup::is_candidate_from_mark(oop java_string) {\n-  \/\/ Candidate if string is being evacuated from young to old but has not\n-  \/\/ reached the deduplication age threshold, i.e. has not previously been a\n-  \/\/ candidate during its life in the young generation.\n-  return PSScavenge::is_obj_in_young(java_string) &&\n-         StringDedup::is_below_threshold_age(java_string->age());\n-}\n","filename":"src\/hotspot\/share\/gc\/parallel\/psStringDedup.cpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/javaClasses.hpp\"\n+#include \"gc\/parallel\/psScavenge.hpp\"\n@@ -35,1 +35,7 @@\n-  static bool is_candidate_from_mark(oop java_string);\n+  static bool is_candidate_from_mark(oop java_string) {\n+    \/\/ Candidate if string is being evacuated from young to old but has not\n+    \/\/ reached the deduplication age threshold, i.e. has not previously been a\n+    \/\/ candidate during its life in the young generation.\n+    return PSScavenge::is_obj_in_young(java_string) &&\n+           StringDedup::is_below_threshold_age(java_string->age());\n+  }\n@@ -39,5 +45,3 @@\n-    return StringDedup::is_enabled() &&\n-           java_lang_String::is_instance(obj) &&\n-           (obj_is_tenured ?\n-            StringDedup::is_below_threshold_age(obj->age()) :\n-            StringDedup::is_threshold_age(obj->age()));\n+    return obj_is_tenured ?\n+           StringDedup::is_below_threshold_age(obj->age()) :\n+           StringDedup::is_threshold_age(obj->age());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psStringDedup.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}