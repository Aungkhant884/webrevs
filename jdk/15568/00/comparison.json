{"files":[{"patch":"@@ -1762,0 +1762,6 @@\n+void Assembler::cmpb(Register dst, int imm8) {\n+  NOT_LP64(assert(dst->has_byte_register(), \"must have byte register\"));\n+  (void) prefix_and_encode(dst->encoding(), true);\n+  emit_arith_b(0x80, 0xF8, dst, imm8);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1111,0 +1111,1 @@\n+  void cmpb(Register dst, int imm8);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-\n+  static_assert(sizeof(BasicType) == 1, \"Unexpected BasicType size\");\n@@ -227,1 +227,1 @@\n-  __ movl(result_type,  c_rarg2);   \/\/ result type\n+  __ movb(result_type,  c_rarg2);   \/\/ result type\n@@ -320,2 +320,2 @@\n-  __ movl(c_rarg1, result_type);\n-  __ cmpl(c_rarg1, T_OBJECT);\n+  __ movb(c_rarg1, result_type);\n+  __ cmpb(c_rarg1, T_OBJECT);\n@@ -323,1 +323,1 @@\n-  __ cmpl(c_rarg1, T_LONG);\n+  __ cmpb(c_rarg1, T_LONG);\n@@ -325,1 +325,1 @@\n-  __ cmpl(c_rarg1, T_FLOAT);\n+  __ cmpb(c_rarg1, T_FLOAT);\n@@ -327,1 +327,1 @@\n-  __ cmpl(c_rarg1, T_DOUBLE);\n+  __ cmpb(c_rarg1, T_DOUBLE);\n@@ -329,0 +329,10 @@\n+#ifdef ASSERT\n+  \/\/ make sure the type is INT\n+  {\n+    Label L;\n+    __ cmpb(c_rarg1, T_INT);\n+    __ jcc(Assembler::equal, L);\n+    __ stop(\"StubRoutines::call_stub: unexpected result type\");\n+    __ bind(L);\n+  }\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"}]}