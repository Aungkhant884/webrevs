{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-    static volatile long count = 0;\n-    static volatile long number = 0;\n+    static volatile long notificationReceivedCount = 0;\n+    static volatile long numberOfGCMBeans = 0;\n@@ -67,6 +67,6 @@\n-                    if(listenerInvoked.get(source) == null) {\n-                            listenerInvoked.put(((ObjectName)notif.getSource()).getCanonicalName(),gcNotif);\n-                            count++;\n-                            if(count >= number) {\n-                                synchronizer.notify();\n-                            }\n+                    if (listenerInvoked.get(source) == null) {\n+                        listenerInvoked.put(((ObjectName)notif.getSource()).getCanonicalName(), gcNotif);\n+                        notificationReceivedCount++;\n+                        if (notificationReceivedCount >= numberOfGCMBeans) {\n+                            synchronizer.notify();\n+                        }\n@@ -88,4 +88,2 @@\n-        final ObjectName gcMXBeanPattern =\n-                new ObjectName(\"java.lang:type=GarbageCollector,*\");\n-        Set<ObjectName> names =\n-                mbs.queryNames(gcMXBeanPattern, null);\n+        final ObjectName gcMXBeanPattern = new ObjectName(\"java.lang:type=GarbageCollector,*\");\n+        Set<ObjectName> names = mbs.queryNames(gcMXBeanPattern, null);\n@@ -94,1 +92,1 @@\n-        number = names.size();\n+        numberOfGCMBeans = names.size();\n@@ -96,2 +94,2 @@\n-            if(mbs.isInstanceOf(n,\"javax.management.NotificationEmitter\")) {\n-                listenerInvoked.put(n.getCanonicalName(),null);\n+            if(mbs.isInstanceOf(n, \"javax.management.NotificationEmitter\")) {\n+                listenerInvoked.put(n.getCanonicalName(), null);\n@@ -115,1 +113,1 @@\n-            while(count != number) {\n+            while(notificationReceivedCount != numberOfGCMBeans) {\n@@ -129,3 +127,3 @@\n-        System.out.println(\"GC notification for \"+notif.getGcName());\n-        System.out.print(\"Action: \"+notif.getGcAction());\n-        System.out.println(\" Cause: \"+notif.getGcCause());\n+        System.out.println(\"GC notification for \" + notif.getGcName());\n+        System.out.print(\"Action: \" + notif.getGcAction());\n+        System.out.println(\" Cause: \" + notif.getGcCause());\n@@ -139,0 +137,6 @@\n+        \/\/ Check MemoryUsage is present. For all but No GC events, check Eden usage decreases:\n+        boolean doCheckMemoryUsage = true;\n+        if (notif.getGcCause().equals(\"No GC\")) {\n+            System.out.println(\"(skip memory usage check for event with 'No GC' cause)\");\n+            doCheckMemoryUsage = false;\n+        }\n@@ -146,2 +150,1 @@\n-                throw new RuntimeException(\"After Gc Memory does not exist\" +\n-                    \" for \" + poolname);\n+                throw new RuntimeException(\"After Gc Memory does not exist for \" + poolname);\n@@ -153,1 +156,3 @@\n-            checkMemoryUsage(poolname, busage, ausage);\n+            if (doCheckMemoryUsage) {\n+                checkMemoryUsage(poolname, busage, ausage);\n+            }\n@@ -160,2 +165,1 @@\n-                throw new RuntimeException(\"GcInfo does not contain \" +\n-                    \"memory usage for pool \" + p.getName());\n+                throw new RuntimeException(\"GcInfo does not contain memory usage for pool \" + p.getName());\n","filename":"test\/jdk\/com\/sun\/management\/GarbageCollectorMXBean\/GarbageCollectionNotificationContentTest.java","additions":29,"deletions":25,"binary":false,"changes":54,"status":"modified"}]}