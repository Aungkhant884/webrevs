{"files":[{"patch":"@@ -118,1 +118,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -138,1 +138,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -160,2 +160,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -168,0 +166,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -178,2 +178,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -187,0 +185,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -203,2 +203,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -209,0 +207,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -367,1 +367,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -394,1 +394,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -468,1 +468,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -494,1 +494,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -650,1 +650,1 @@\n-         * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+         * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -671,1 +671,1 @@\n-         * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+         * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -156,1 +156,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-        static final MethodHandle MH_MALLOC = linker.downcallHandle(CLinker.systemLookup().lookup(\"malloc\").get(),\n+        static final MethodHandle MH_MALLOC = SYS_LINKER.downcallHandle(CLinker.systemLookup().lookup(\"malloc\").get(),\n@@ -424,1 +424,1 @@\n-        static final MethodHandle MH_FREE = linker.downcallHandle(CLinker.systemLookup().lookup(\"free\").get(),\n+        static final MethodHandle MH_FREE = SYS_LINKER.downcallHandle(CLinker.systemLookup().lookup(\"free\").get(),\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                lookup.lookup(\"struct_func\").get(),\n+                LOOKUP.lookup(\"struct_func\").get(),\n@@ -78,1 +78,1 @@\n-                lookup.lookup(\"addr_func\").get(),\n+                LOOKUP.lookup(\"addr_func\").get(),\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n@@ -92,1 +92,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            ABI.downcallHandle(dummyTarget, mt, desc);\n+            ABI.downcallHandle(DUMMY_TARGET, mt, desc);\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            MemoryAddress ma = lookup.lookup(name).get();\n+            MemoryAddress ma = LOOKUP.lookup(name).get();\n@@ -101,1 +101,1 @@\n-            MemoryAddress ma = lookup.lookup(\"empty\").get();\n+            MemoryAddress ma = LOOKUP.lookup(\"empty\").get();\n@@ -116,1 +116,1 @@\n-            MemoryAddress ma = lookup.lookup(\"identity_va\").get();\n+            MemoryAddress ma = LOOKUP.lookup(\"identity_va\").get();\n@@ -131,1 +131,1 @@\n-                MemoryAddress ma = lookup.lookup(\"invoke_high_arity\" + i).get();\n+                MemoryAddress ma = LOOKUP.lookup(\"invoke_high_arity\" + i).get();\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        assertFalse(lookup.lookup(\"f\").isEmpty());\n+        assertFalse(LOOKUP.lookup(\"f\").isEmpty());\n@@ -59,1 +59,1 @@\n-        assertTrue(lookup.lookup(\"nonExistent\").isEmpty());\n+        assertTrue(LOOKUP.lookup(\"nonExistent\").isEmpty());\n@@ -64,1 +64,1 @@\n-        MemorySegment segment = lookup.lookup(\"c\").get().asSegment(MemoryLayouts.JAVA_INT.byteSize(), ResourceScope.globalScope());\n+        MemorySegment segment = LOOKUP.lookup(\"c\").get().asSegment(MemoryLayouts.JAVA_INT.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestSymbolLookup.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n@@ -113,1 +113,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            MethodHandle downcallHandle = abi.downcallHandle(varargsAddr, mt, desc);\n+            MethodHandle downcallHandle = abi.downcallHandle(VARARGS_ADDR, mt, desc);\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-        return abi.downcallHandle(lookup.lookup(symbol).get(), mt, fd);\n+        return abi.downcallHandle(LOOKUP.lookup(symbol).get(), mt, fd);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}