{"files":[{"patch":"@@ -57,1 +57,1 @@\n-          _memory_manager(\"Epsilon Heap\", \"\"),\n+          _memory_manager(\"Epsilon Heap\"),\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,3 +91,3 @@\n-  _young_gc_memory_manager(\"G1 Young Generation\", \"end of minor GC\"),\n-  _full_gc_memory_manager(\"G1 Old Generation\", \"end of major GC\"),\n-  _conc_gc_memory_manager(\"G1 Concurrent GC\", \"end of concurrent GC pause\"),\n+  _young_gc_memory_manager(\"G1 Young Generation\"),\n+  _full_gc_memory_manager(\"G1 Old Generation\"),\n+  _conc_gc_memory_manager(\"G1 Concurrent GC\"),\n@@ -354,0 +354,1 @@\n+                                     const char* end_message,\n@@ -358,1 +359,3 @@\n-       G1CollectedHeap::heap()->gc_cause(), all_memory_pools_affected) {\n+       G1CollectedHeap::heap()->gc_cause(),\n+       end_message,\n+       all_memory_pools_affected) {\n@@ -372,0 +375,1 @@\n+                    \"end of minor GC\",\n@@ -378,1 +382,2 @@\n-                    &monitoring_support->_full_gc_memory_manager) {\n+                    &monitoring_support->_full_gc_memory_manager,\n+                    \"end of major GC\") {\n@@ -384,1 +389,2 @@\n-                    &monitoring_support->_conc_gc_memory_manager) {\n+                    &monitoring_support->_conc_gc_memory_manager,\n+                    \"end of concurrent GC pause\") {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -247,0 +247,1 @@\n+                    const char* end_message,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -150,2 +150,2 @@\n-  _young_manager = new GCMemoryManager(\"PS Scavenge\", \"end of minor GC\");\n-  _old_manager = new GCMemoryManager(\"PS MarkSweep\", \"end of major GC\");\n+  _young_manager = new GCMemoryManager(\"PS Scavenge\");\n+  _old_manager = new GCMemoryManager(\"PS MarkSweep\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1752,1 +1752,1 @@\n-    TraceMemoryManagerStats tms(heap->old_gc_manager(), gc_cause);\n+    TraceMemoryManagerStats tms(heap->old_gc_manager(), gc_cause, \"end of major GC\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-    TraceMemoryManagerStats tms(heap->young_gc_manager(), gc_cause);\n+    TraceMemoryManagerStats tms(heap->young_gc_manager(), gc_cause, \"end of minor GC\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  _young_manager = new GCMemoryManager(\"Copy\", \"end of minor GC\");\n-  _old_manager = new GCMemoryManager(\"MarkSweepCompact\", \"end of major GC\");\n+  _young_manager = new GCMemoryManager(\"Copy\");\n+  _old_manager = new GCMemoryManager(\"MarkSweepCompact\");\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  TraceMemoryManagerStats tmms(gen->gc_manager(), gc_cause());\n+  TraceMemoryManagerStats tmms(gen->gc_manager(), gc_cause(), heap()->is_young_gen(gen) ? \"end of minor GC\" : \"end of major GC\");\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,2 +480,2 @@\n-  _stw_memory_manager(\"Shenandoah Pauses\", \"end of GC pause\"),\n-  _cycle_memory_manager(\"Shenandoah Cycles\", \"end of GC cycle\"),\n+  _stw_memory_manager(\"Shenandoah Pauses\"),\n+  _cycle_memory_manager(\"Shenandoah Cycles\"),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+          \"end of GC cycle\",\n@@ -76,1 +77,1 @@\n-ShenandoahGCPauseMark::ShenandoahGCPauseMark(uint gc_id, SvcGCMarker::reason_type type) :\n+ShenandoahGCPauseMark::ShenandoahGCPauseMark(uint gc_id, const char* notification_message, SvcGCMarker::reason_type type) :\n@@ -79,0 +80,1 @@\n+          notification_message,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  ShenandoahGCPauseMark(uint gc_id, SvcGCMarker::reason_type type);\n+  ShenandoahGCPauseMark(uint gc_id, const char* notification_action, SvcGCMarker::reason_type type);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Init Mark\", SvcGCMarker::CONCURRENT);\n@@ -55,1 +55,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Final Mark\", SvcGCMarker::CONCURRENT);\n@@ -60,1 +60,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::FULL);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Full GC\", SvcGCMarker::FULL);\n@@ -65,1 +65,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Degenerated GC\", SvcGCMarker::CONCURRENT);\n@@ -70,1 +70,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Init Update Refs\", SvcGCMarker::CONCURRENT);\n@@ -75,1 +75,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Final Update Refs\", SvcGCMarker::CONCURRENT);\n@@ -80,1 +80,1 @@\n-  ShenandoahGCPauseMark mark(_gc_id, SvcGCMarker::CONCURRENT);\n+  ShenandoahGCPauseMark mark(_gc_id, \"Final Roots\", SvcGCMarker::CONCURRENT);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n-                                                           const char* end_message,\n@@ -115,1 +114,1 @@\n-    GCMemoryManager(name, end_message) {\n+    GCMemoryManager(name) {\n@@ -123,2 +122,2 @@\n-    _cycle_memory_manager(\"ZGC Cycles\", \"end of GC cycle\", &_memory_pool),\n-    _pause_memory_manager(\"ZGC Pauses\", \"end of GC pause\", &_memory_pool),\n+    _cycle_memory_manager(\"ZGC Cycles\", &_memory_pool),\n+    _pause_memory_manager(\"ZGC Pauses\", &_memory_pool),\n@@ -150,0 +149,1 @@\n+                          \"end of GC cycle\",\n@@ -164,0 +164,1 @@\n+                          \"end of GC pause\",\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-                               const char* end_message,\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,2 +179,2 @@\n-GCMemoryManager::GCMemoryManager(const char* name, const char* gc_end_message) :\n-  MemoryManager(name), _gc_end_message(gc_end_message) {\n+GCMemoryManager::GCMemoryManager(const char* name) :\n+  MemoryManager(name) {\n@@ -244,1 +244,2 @@\n-                             bool recordGCEndTime, bool countCollection,\n+                             bool recordGCEndTime,\n+                             bool countCollection,\n@@ -246,1 +247,2 @@\n-                             bool allMemoryPoolsAffected) {\n+                             bool allMemoryPoolsAffected,\n+                             const char* message) {\n@@ -296,1 +298,1 @@\n-      GCNotifier::pushNotification(this, _gc_end_message, GCCause::to_string(cause));\n+      GCNotifier::pushNotification(this, message, GCCause::to_string(cause));\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -143,1 +143,0 @@\n-  const char*  _gc_end_message;\n@@ -147,1 +146,1 @@\n-  GCMemoryManager(const char* name, const char* gc_end_message);\n+  GCMemoryManager(const char* name);\n@@ -170,1 +169,1 @@\n-                bool allMemoryPoolsAffected);\n+                bool allMemoryPoolsAffected, const char* message);\n","filename":"src\/hotspot\/share\/services\/memoryManager.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-                           bool allMemoryPoolsAffected) {\n+                           bool allMemoryPoolsAffected, const char* message) {\n@@ -189,1 +189,1 @@\n-                  countCollection, cause, allMemoryPoolsAffected);\n+                  countCollection, cause, allMemoryPoolsAffected, message);\n@@ -223,0 +223,1 @@\n+                                                 const char* end_message,\n@@ -231,4 +232,4 @@\n-  initialize(gc_memory_manager, cause, allMemoryPoolsAffected,\n-             recordGCBeginTime, recordPreGCUsage, recordPeakUsage,\n-             recordPostGCUsage, recordAccumulatedGCTime, recordGCEndTime,\n-             countCollection);\n+  initialize(gc_memory_manager, cause, end_message,\n+             allMemoryPoolsAffected, recordGCBeginTime, recordPreGCUsage,\n+             recordPeakUsage, recordPostGCUsage, recordAccumulatedGCTime,\n+             recordGCEndTime, countCollection);\n@@ -241,0 +242,1 @@\n+                                         const char* end_message,\n@@ -250,0 +252,2 @@\n+  _cause = cause;\n+  _end_message = end_message;\n@@ -258,1 +262,0 @@\n-  _cause = cause;\n@@ -266,1 +269,2 @@\n-                        _recordGCEndTime, _countCollection, _cause, _allMemoryPoolsAffected);\n+                        _recordGCEndTime, _countCollection, _cause, _allMemoryPoolsAffected,\n+                        _end_message);\n","filename":"src\/hotspot\/share\/services\/memoryService.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                     bool allMemoryPoolsAffected);\n+                     bool allMemoryPoolsAffected, const char* notificationMessage = nullptr);\n@@ -119,9 +119,10 @@\n-  bool         _allMemoryPoolsAffected;\n-  bool         _recordGCBeginTime;\n-  bool         _recordPreGCUsage;\n-  bool         _recordPeakUsage;\n-  bool         _recordPostGCUsage;\n-  bool         _recordAccumulatedGCTime;\n-  bool         _recordGCEndTime;\n-  bool         _countCollection;\n-  GCCause::Cause _cause;\n+  GCCause::Cause   _cause;\n+  const char*      _end_message;\n+  bool             _allMemoryPoolsAffected;\n+  bool             _recordGCBeginTime;\n+  bool             _recordPreGCUsage;\n+  bool             _recordPeakUsage;\n+  bool             _recordPostGCUsage;\n+  bool             _recordAccumulatedGCTime;\n+  bool             _recordGCEndTime;\n+  bool             _countCollection;\n@@ -132,0 +133,1 @@\n+                          const char* end_message,\n@@ -143,0 +145,1 @@\n+                  const char* end_message,\n","filename":"src\/hotspot\/share\/services\/memoryService.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -118,0 +118,6 @@\n+    private static boolean isExpectedPauseAction(String action) {\n+        return \"Init Mark\".equals(action) || \"Final Mark\".equals(action) || \"Full GC\".equals(action)\n+            || \"Degenerated GC\".equals(action) || \"Init Update Refs\".equals(action)\n+            || \"Final Update Refs\".equals(action) || \"Final Roots\".equals(action);\n+    }\n+\n@@ -132,1 +138,2 @@\n-                    System.out.println(\"Received: \" + info.getGcName());\n+                    System.out.println(\"Received: \" + info.getGcName() + \"\/\" + info.getGcAction());\n+\n@@ -141,0 +148,3 @@\n+                            if (!isExpectedPauseAction(info.getGcAction())) {\n+                                throw new IllegalStateException(\"Unknown action: \" + info.getGcAction());\n+                            }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}