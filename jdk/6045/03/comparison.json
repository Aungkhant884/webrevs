{"files":[{"patch":"@@ -585,3 +585,1 @@\n-                try {\n-                    cs = Charset.forName(csname);\n-                } catch (Exception ignored) { }\n+                cs = Charset.forName(csname, null);\n@@ -591,5 +589,2 @@\n-            try {\n-                cs = Charset.forName(StaticProperty.nativeEncoding());\n-            } catch (Exception ignored) {\n-                cs = Charset.defaultCharset();\n-            }\n+            cs = Charset.forName(StaticProperty.nativeEncoding(),\n+                    Charset.defaultCharset());\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -530,0 +530,33 @@\n+    \/**\n+     * Returns a charset object for the named charset. If the charset object\n+     * for the named charset is not available or {@code charsetName} is not a\n+     * legal charset name, then {@code fallback} is returned.\n+     *\n+     * @param  charsetName\n+     *         The name of the requested charset; may be either\n+     *         a canonical name or an alias\n+     *\n+     * @param  fallback\n+     *         fallback charset in case the charset object for the named\n+     *         charset is not available or {@code charsetName} is not a legal\n+     *         charset name. May be {@code null}\n+     *\n+     * @return  A charset object for the named charset, or {@code fallback}\n+     *          in case the charset object for the named charset is not\n+     *          available or {@code charsetName} is not a legal charset name\n+     *\n+     * @throws  IllegalArgumentException\n+     *          If the given {@code charsetName} is {@code null}\n+     *\n+     * @since 18\n+     *\/\n+    public static Charset forName(String charsetName,\n+                                  Charset fallback) {\n+        try {\n+            Charset cs = lookup(charsetName);\n+            return cs != null ? cs : fallback;\n+        } catch (IllegalCharsetNameException icne) {\n+            return fallback;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Unit test for forName(String, Charset)\n+ * @bug 8270490\n+ * @modules jdk.charsets\n+ * @run testng ForName\n+ *\/\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test\n+public class ForName {\n+\n+    @DataProvider\n+    Object[][] params() {\n+        return new Object[][] {\n+                {\"UTF-8\", null, StandardCharsets.UTF_8},\n+                {\"UTF-8\", StandardCharsets.US_ASCII, StandardCharsets.UTF_8},\n+                {\"windows-31j\", StandardCharsets.US_ASCII, Charset.forName(\"windows-31j\")},\n+                {\"foo\", StandardCharsets.US_ASCII, StandardCharsets.US_ASCII},\n+                {\"foo\", null, null},\n+                {\"\\u3042\", null, null},\n+                {\"\\u3042\", StandardCharsets.UTF_8, StandardCharsets.UTF_8},\n+        };\n+    }\n+\n+    @DataProvider\n+    Object[][] paramsIAE() {\n+        return new Object[][] {\n+                {null, null},\n+                {null, StandardCharsets.UTF_8},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"params\")\n+    public void testForName_2arg(String name, Charset fallback, Charset expected) throws Exception {\n+        var cs = Charset.forName(name, fallback);\n+        assertEquals(cs, expected);\n+    }\n+\n+    @Test(dataProvider=\"paramsIAE\", expectedExceptions=IllegalArgumentException.class)\n+    public void testForName_2arg_IAE(String name, Charset fallback) throws Exception {\n+        Charset.forName(name, fallback);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/ForName.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}