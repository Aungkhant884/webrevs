[{"commit":{"message":"Fix jit\/t\/t105\/t105.java to also use -XX:-OptimizeImplicitExceptions in addition to -XX:-OmitStacktracesInFastThrow"},"files":[{"filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/t\/t105\/t105.java"}],"sha":"2dc5b6d32860756bd080b42eee0f9be0fba79924"},{"commit":{"message":"Fix IR Framework test Traps::classCheck() which now behaves differently with -XX:+OptimizeImplicitExceptions"},"files":[{"filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java"}],"sha":"7a8cdb60f9d3b3ce21a422b275098fd492c51e45"},{"commit":{"message":"Fix build issue for minimal\/zero build one more time"},"files":[{"filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp"}],"sha":"be3ce592d055d2305ef9924dbfea1f926f5bfaa3"},{"commit":{"message":"Minor enhancements and fixes requested by Martin"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp"},{"filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/OptimizeImplicitExceptions.java"}],"sha":"5f0343ba559be0fd051e36c1be2279ce29a82296"},{"commit":{"message":"Add new WhiteBox functionality to sun\/hotspot\/WhiteBox.java as well to avoid warnings in the tests which are still using it."},"files":[{"filename":"test\/lib\/sun\/hotspot\/WhiteBox.java"}],"sha":"97f194447ab0ecdbfd73a74fd5041197fd907540"},{"commit":{"message":"Fix build issue for minimal\/zero build"},"files":[{"filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp"}],"sha":"f8f5f4273b4e4a9b9e534007cdee0eaff03b8161"},{"commit":{"message":"Added jtreg test and extended the Whitebox API to export decompile, deopt and trap counters"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp"},{"filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/OptimizeImplicitExceptions.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"acf8bd5e89d38a81ed13e159cd4774f80902940c"},{"commit":{"message":"Fix special case where we're creating an implicit exception for a regular invoke* bytecode"},"files":[{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"}],"sha":"7c934363794a05e862cd117b22d6f12ac2bc57e9"},{"commit":{"message":"Minor updates as requested by @TheRealMDoerr"},"files":[{"filename":"src\/hotspot\/share\/ci\/ciEnv.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.hpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"}],"sha":"51cdc0c54d3ad2fda943b96a14eac11a636919bd"},{"commit":{"message":"8273563: Improve performance of implicit exceptions with -XX:-OmitStackTraceInFastThrow"},"files":[{"filename":"src\/hotspot\/share\/ci\/ciEnv.cpp"},{"filename":"src\/hotspot\/share\/ci\/ciEnv.hpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/lang\/ImplicitExceptions.java"}],"sha":"7f5e267e0e5efb5323f5b4cc139f1c0c19e3c649"}]