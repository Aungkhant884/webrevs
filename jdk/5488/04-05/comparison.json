{"files":[{"patch":"@@ -321,0 +321,30 @@\n+  public         int     getMethodDecompileCount(Executable method) {\n+    Objects.requireNonNull(method);\n+    return getMethodDecompileCount0(method);\n+  }\n+  private native int     getMethodDecompileCount0(Executable method);\n+  \/\/ Get the total trap count of a method. If the trap count for a specific reason\n+  \/\/ did overflow, this includes the overflow trap count of the method.\n+  public         int     getMethodTrapCount(Executable method) {\n+    Objects.requireNonNull(method);\n+    return getMethodTrapCount0(method, null);\n+  }\n+  \/\/ Get the trap count of a method for a specific reason. If the trap count for\n+  \/\/ that reason did overflow, this includes the overflow trap count of the method.\n+  public         int     getMethodTrapCount(Executable method, String reason) {\n+    Objects.requireNonNull(method);\n+    return getMethodTrapCount0(method, reason);\n+  }\n+  private native int     getMethodTrapCount0(Executable method, String reason);\n+  \/\/ Get the total deopt count.\n+  public         int     getDeoptCount() {\n+    return getDeoptCount0(null, null);\n+  }\n+  \/\/ Get the deopt count for a specific reason and a specific action. If either\n+  \/\/ one of 'reason' or 'action' is null, the method returns the sum of all\n+  \/\/ deoptimizations with the specific 'action' or 'reason' respectively.\n+  \/\/ If both arguments are null, the method returns the total deopt count.\n+  public         int     getDeoptCount(String reason, String action) {\n+    return getDeoptCount0(reason, action);\n+  }\n+  private native int     getDeoptCount0(String reason, String action);\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}