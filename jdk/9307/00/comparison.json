{"files":[{"patch":"@@ -2996,1 +2996,1 @@\n-        if (n == 0) return this;\n+        if (n == 0 && scale >= 0) return this;\n@@ -3020,1 +3020,1 @@\n-        if (n == 0) return this;\n+        if (n == 0 && scale >= 0) return this;\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289260\n+ *\/\n+\n+import java.math.BigDecimal;\n+\n+public class MovePointTests {\n+\n+    public static void main(String argv[]) {\n+        BigDecimal bd;\n+\n+        bd = BigDecimal.valueOf(1, -3);\n+        checkNotIdentical(bd, bd.movePointLeft(0));\n+        checkNotIdentical(bd, bd.movePointRight(0));\n+\n+        bd = BigDecimal.valueOf(1, 3);\n+        checkIdentical(bd, bd.movePointLeft(0));\n+        checkIdentical(bd, bd.movePointRight(0));\n+\n+        bd = BigDecimal.valueOf(1, -3);\n+        checkNotEquals(bd, bd.movePointLeft(1));\n+        checkNotEquals(bd, bd.movePointRight(1));\n+\n+        bd = BigDecimal.valueOf(1, -3);\n+        checkNotEquals(bd, bd.movePointLeft(-1));\n+        checkNotEquals(bd, bd.movePointRight(-1));\n+    }\n+\n+    private static void checkIdentical(BigDecimal bd, BigDecimal res) {\n+        if (res != bd) {  \/\/ intentionally !=\n+            throw new RuntimeException(\"Unexpected result \" +\n+                    bd + \" != \" + res);\n+        }\n+    }\n+\n+    private static void checkNotIdentical(BigDecimal bd, BigDecimal res) {\n+        if (res == bd) {  \/\/ intentionally ==\n+            throw new RuntimeException(\"Unexpected result \" +\n+                    bd + \" == \" + res);\n+        }\n+    }\n+\n+    private static void checkNotEquals(BigDecimal bd, BigDecimal res) {\n+        if (res.equals(bd)) {\n+            throw new RuntimeException(\"Unexpected result \" +\n+                    bd + \".equals(\" + res + \")\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/math\/BigDecimal\/MovePointTests.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}