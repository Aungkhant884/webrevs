{"files":[{"patch":"@@ -244,1 +244,1 @@\n-                    .mapToInt(x -> x.hashCode())\n+                    .mapToInt(Certificate::hashCode)\n@@ -246,2 +246,9 @@\n-            int anchorCertId =\n-                    anchor.getTrustedCert().hashCode();\n+            int anchorCertId = 0;\n+            X509Certificate trustedCert = anchor.getTrustedCert();\n+            if (trustedCert != null) {\n+                anchorCertId = trustedCert.hashCode();\n+            } else {\n+                if (anchor.getCAPublicKey() != null) {\n+                    anchorCertId = anchor.getCAPublicKey().hashCode();\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PKIXCertPathValidator.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,3 +51,2 @@\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            TestCertificate.ONE.generate(cf);\n-            TestCertificate.TWO.generate(cf);\n+            TestCertificate.ONE.certificate();\n+            TestCertificate.TWO.certificate();\n@@ -55,2 +54,2 @@\n-            TestCertificate.ONE.generate(cf);\n-            TestCertificate.TWO.generate(cf);\n+            TestCertificate.ONE.certificate();\n+            TestCertificate.TWO.certificate();\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestX509CertificateEvent.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-            \/\/ intermeditate certificate test\n-            TestCertificate.generateChain(false);\n+            \/\/ intermediate certificate test\n+            TestCertificate.generateChain(false, true);\n@@ -62,1 +62,1 @@\n-            TestCertificate.generateChain(true);\n+            TestCertificate.generateChain(true, true);\n@@ -68,0 +68,11 @@\n+\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.X509Validation);\n+            recording.start();\n+            \/\/ intermediate certificate test, with no Cert for trust anchor\n+            TestCertificate.generateChain(true, false);\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Asserts.assertEquals(events.size(), 2, \"Incorrect number of events\");\n+            assertEvent3(events);\n+        }\n@@ -111,0 +122,22 @@\n+    \/*\n+     * Self signed certificate test\n+     *\/\n+    private static void assertEvent3(List<RecordedEvent> events) throws Exception {\n+        for (RecordedEvent e : events) {\n+            int pos = e.getInt(\"certificatePosition\");\n+            switch (pos) {\n+                \/\/ use public key of cert provided in TrustAnchor\n+                case 1:\n+                    Asserts.assertEquals(e.getLong(\"certificateId\"),\n+                        Long.valueOf(TestCertificate.ROOT_CA.certificate().getPublicKey().hashCode()));\n+                    break;\n+                case 2:\n+                    Events.assertField(e, \"certificateId\")\n+                            .equal(TestCertificate.ROOT_CA.certId);\n+                    break;\n+                default:\n+                    System.out.println(events);\n+                    throw new Exception(\"Unexpected position:\" + pos);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestX509ValidationEvent.java","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -61,3 +61,2 @@\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            TestCertificate.ONE.generate(cf);\n-            TestCertificate.TWO.generate(cf);\n+            TestCertificate.ONE.certificate();\n+            TestCertificate.TWO.certificate();\n","filename":"test\/jdk\/jdk\/security\/logging\/TestX509CertificateLog.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,3 @@\n+        l.addExpected(\"FINE: ValidationChain: \" +\n+                TestCertificate.ROOT_CA.certificate().getPublicKey().hashCode() +\n+                \", \" + TestCertificate.ROOT_CA.certId);\n@@ -51,1 +54,1 @@\n-            TestCertificate.generateChain(false);\n+            TestCertificate.generateChain(false, true);\n@@ -53,1 +56,3 @@\n-            TestCertificate.generateChain(true);\n+            TestCertificate.generateChain(true, true);\n+            \/\/ no cert for trust anchor\n+            TestCertificate.generateChain(true, false);\n","filename":"test\/jdk\/jdk\/security\/logging\/TestX509ValidationLog.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+    private static final CertificateFactory CERTIFICATE_FACTORY = getCertificateFactory();\n+\n@@ -146,1 +148,9 @@\n-    public X509Certificate generate(CertificateFactory cf) throws CertificateException {\n+    private static CertificateFactory getCertificateFactory() {\n+        try {\n+            return CertificateFactory.getInstance(\"X.509\");\n+        } catch (CertificateException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public X509Certificate certificate() throws CertificateException {\n@@ -148,1 +158,1 @@\n-        return (X509Certificate) cf.generateCertificate(is);\n+        return (X509Certificate) CERTIFICATE_FACTORY.generateCertificate(is);\n@@ -151,1 +161,1 @@\n-    public static void generateChain(boolean selfSignedTest) throws Exception {\n+    public static void generateChain(boolean selfSignedTest, boolean trustAnchorCert) throws Exception {\n@@ -157,3 +167,3 @@\n-        X509Certificate c1 = TestCertificate.ONE.generate(cf);\n-        X509Certificate c2 = TestCertificate.TWO.generate(cf);\n-        X509Certificate ca = TestCertificate.ROOT_CA.generate(cf);\n+        X509Certificate c1 = TestCertificate.ONE.certificate();\n+        X509Certificate c2 = TestCertificate.TWO.certificate();\n+        X509Certificate ca = TestCertificate.ROOT_CA.certificate();\n@@ -161,1 +171,6 @@\n-        TrustAnchor ta = new TrustAnchor(ca, null);\n+        TrustAnchor ta;\n+        if (trustAnchorCert) {\n+            ta = new TrustAnchor(ca, null);\n+        } else {\n+            ta = new TrustAnchor(ca.getIssuerX500Principal(), ca.getPublicKey(), null);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/security\/TestCertificate.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"}]}