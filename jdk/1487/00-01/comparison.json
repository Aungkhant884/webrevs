{"files":[{"patch":"@@ -410,1 +410,1 @@\n-                        compilerToVm.callSystemExit(-1);\n+                        compilerToVm.callSystemExit(1);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,3 +45,11 @@\n-        output.shouldMatch(\"Error parsing JVMCI options: Could not find option jvmci.XXXXXXXXX\" + System.lineSeparator() +\n-                           \"Error: A fatal exception has occurred. Program will exit.\" + System.lineSeparator());\n-        output.shouldHaveExitValue(255);\n+        String expectStdout = String.format(\n+            \"Error parsing JVMCI options: Could not find option jvmci.XXXXXXXXX%n\" +\n+            \"Error: A fatal exception has occurred. Program will exit.%n\");\n+        String actualStdout = output.getStdout();\n+        if (!actualStdout.equals(expectStdout)) {\n+            throw new RuntimeException(String.format(\"Invalid STDOUT:%nExpect:%n%s%nActual:%n%s\", expectStdout, actualStdout));\n+        }\n+        if (!output.getStderr().isEmpty()) {\n+            throw new RuntimeException(\"STDERR was not empty: \" + output.getStderr());\n+        }\n+        output.shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestInvalidJVMCIOption.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}