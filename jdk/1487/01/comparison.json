{"files":[{"patch":"@@ -382,0 +382,2 @@\n+         *\n+         * @param compilerToVm\n@@ -383,1 +385,1 @@\n-        static void parse() {\n+        static void parse(CompilerToVM compilerToVm) {\n@@ -398,1 +400,1 @@\n-                        msg.format(\"Could not find option %s\", name);\n+                        msg.format(\"Error parsing JVMCI options: Could not find option %s\", name);\n@@ -405,1 +407,4 @@\n-                        throw new IllegalArgumentException(msg.toString());\n+                        msg.format(\"%nError: A fatal exception has occurred. Program will exit.%n\");\n+                        byte[] msgBytes = msg.toString().getBytes();\n+                        compilerToVm.writeDebugOutput(msgBytes, 0, msgBytes.length, true, true);\n+                        compilerToVm.callSystemExit(1);\n@@ -534,1 +539,1 @@\n-        Option.parse();\n+        Option.parse(compilerToVm);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestInvalidJVMCIOption\n+ * @bug 8257220\n+ * @summary Ensures invalid JVMCI options do not crash the VM with a hs-err log.\n+ * @requires vm.jvmci & vm.compMode == \"Xmixed\"\n+ * @library \/test\/lib\n+ * @run driver TestInvalidJVMCIOption\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestInvalidJVMCIOption {\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+EagerJVMCI\",\n+            \"-XX:+UseJVMCICompiler\",\n+            \"-Djvmci.XXXXXXXXX=true\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        String expectStdout = String.format(\n+            \"Error parsing JVMCI options: Could not find option jvmci.XXXXXXXXX%n\" +\n+            \"Error: A fatal exception has occurred. Program will exit.%n\");\n+        String actualStdout = output.getStdout();\n+        if (!actualStdout.equals(expectStdout)) {\n+            throw new RuntimeException(String.format(\"Invalid STDOUT:%nExpect:%n%s%nActual:%n%s\", expectStdout, actualStdout));\n+        }\n+        if (!output.getStderr().isEmpty()) {\n+            throw new RuntimeException(\"STDERR was not empty: \" + output.getStderr());\n+        }\n+        output.shouldHaveExitValue(1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestInvalidJVMCIOption.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}