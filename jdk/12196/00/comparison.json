{"files":[{"patch":"@@ -175,1 +175,0 @@\n-\n@@ -196,141 +195,0 @@\n-    \/\/ At-zero methods\n-\n-    @Test\n-    void testGetShortAtZero() {\n-        longs().forEach(l -> {\n-            short expected = (short) l;\n-            RefImpl.putShort(BUFF, 0, expected);\n-            short actual = ByteArray.getShort(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutShortAtZero() {\n-        longs().forEach(l -> {\n-            short expected = (short) l;\n-            ByteArray.setShort(BUFF, expected);\n-            short actual = RefImpl.getShort(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testGetCharAtZero() {\n-        longs().forEach(l -> {\n-            char expected = (char) l;\n-            RefImpl.putChar(BUFF, 0, expected);\n-            char actual = ByteArray.getChar(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutCharAtZero() {\n-        longs().forEach(l -> {\n-            char expected = (char) l;\n-            ByteArray.setChar(BUFF, expected);\n-            char actual = RefImpl.getChar(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testGetIntAtZero() {\n-        longs().forEach(l -> {\n-            int expected = (int) l;\n-            RefImpl.putInt(BUFF, 0, expected);\n-            int actual = ByteArray.getInt(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutIntAtZero() {\n-        longs().forEach(l -> {\n-            int expected = (int) l;\n-            ByteArray.setInt(BUFF, expected);\n-            int actual = RefImpl.getInt(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testGetLongAtZero() {\n-        longs().forEach(expected -> {\n-            RefImpl.putLong(BUFF, 0, expected);\n-            long actual = ByteArray.getLong(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutLongAtZero() {\n-        longs().forEach(expected -> {\n-            ByteArray.setLong(BUFF, expected);\n-            long actual = RefImpl.getLong(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testGetFloatAtZero() {\n-        floats().forEach(expected -> {\n-            RefImpl.putFloat(BUFF, 0, expected);\n-            float actual = ByteArray.getFloat(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutFloatAtZero() {\n-        floats().forEach(expected -> {\n-            ByteArray.setFloat(BUFF, expected);\n-            float actual = RefImpl.getFloat(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testGetDoubleAtZero() {\n-        doubles().forEach(expected -> {\n-            RefImpl.putDouble(BUFF, 0, expected);\n-            double actual = ByteArray.getDouble(BUFF);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutDoubleAtZero() {\n-        doubles().forEach(expected -> {\n-            ByteArray.setDouble(BUFF, expected);\n-            double actual = RefImpl.getDouble(BUFF, 0);\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    @Test\n-    void testPutUnsignedShortAtZero() {\n-        longs().forEach(l -> {\n-            int expected = Short.toUnsignedInt((short) l);\n-            ByteArray.setUnsignedShort(BUFF, expected);\n-            int actual = Short.toUnsignedInt(RefImpl.getShort(BUFF, 0));\n-            assertEquals(expected, actual);\n-        });\n-    }\n-\n-    \/\/ Unusual cases\n-\n-    @Test\n-    void testNullArrayAtZero() {\n-        assertThrowsOriginal(NullPointerException.class, () -> ByteArray.getInt(null));\n-        assertThrowsOriginal(NullPointerException.class, () -> ByteArray.setInt(null, 1));\n-    }\n-\n-    @Test\n-    void testOutOfBoundsAtZero() {\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> ByteArray.getInt(new byte[1]));\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> ByteArray.setInt(new byte[1],1));\n-    }\n-\n-\n","filename":"test\/jdk\/jdk\/internal\/util\/ByteArray\/ReadWriteValues.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"modified"}]}