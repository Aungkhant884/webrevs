{"files":[{"patch":"@@ -168,1 +168,1 @@\n-    hr->handle_evac_failure_objs_iteration(&rspc);\n+    hr->process_and_drop_evac_failure_objs(&rspc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,14 +58,0 @@\n-void G1EvacFailureObjectsSet::pre_iteration() {\n-  _helper.pre_iteration();\n-}\n-\n-void G1EvacFailureObjectsSet::iterate(ObjectClosure* closure) const {\n-  assert_at_safepoint();\n-  _helper.iterate(closure);\n-}\n-\n-void G1EvacFailureObjectsSet::post_iteration() {\n-  _helper.post_iteration();\n-  _offsets.drop_all();\n-}\n-\n@@ -75,2 +61,1 @@\n-  _offsets(&_alloc_options, &_free_buffer_list),\n-  _helper(this) {\n+  _offsets(&_alloc_options, &_free_buffer_list)  {\n@@ -87,5 +72,4 @@\n-void G1EvacFailureObjectsSet::handle_iteration(ObjectClosure* closure) {\n-  pre_iteration();\n-  iterate(closure);\n-  post_iteration();\n-}\n+\/\/ Helper class to join, sort and iterate over the previously collected segmented\n+\/\/ array of objects that failed evacuation.\n+class G1EvacFailureObjectsIterationHelper {\n+  typedef G1EvacFailureObjectsSet::OffsetInRegion OffsetInRegion;\n@@ -93,3 +77,4 @@\n-int G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::order_oop(OffsetInRegion a, OffsetInRegion b) {\n-  return static_cast<int>(a-b);\n-}\n+  G1EvacFailureObjectsSet* _objects_set;\n+  const G1SegmentedArray<OffsetInRegion, mtGC>* _segments;\n+  OffsetInRegion* _offset_array;\n+  uint _array_length;\n@@ -97,2 +82,3 @@\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::join_and_sort() {\n-  _segments->iterate_nodes(*this);\n+  static int order_oop(OffsetInRegion a, OffsetInRegion b) {\n+    return static_cast<int>(a-b);\n+  }\n@@ -100,2 +86,2 @@\n-  QuickSort::sort(_offset_array, _array_length, order_oop, true);\n-}\n+  void join_and_sort() {\n+    _segments->iterate_nodes(*this);\n@@ -103,4 +89,1 @@\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::iterate_internal(ObjectClosure* closure) const {\n-  for (uint i = 0; i < _array_length; i++) {\n-    oop cur = _objects_set->from_offset(_offset_array[i]);\n-    closure->do_object(cur);\n+    QuickSort::sort(_offset_array, _array_length, order_oop, true);\n@@ -108,1 +91,0 @@\n-}\n@@ -110,6 +92,6 @@\n-G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector) :\n-  _objects_set(collector),\n-  _segments(&_objects_set->_offsets),\n-  _offset_array(nullptr),\n-  _array_length(0),\n-  _num_allocated_nodes(0) { }\n+  void iterate(ObjectClosure* closure) {\n+    for (uint i = 0; i < _array_length; i++) {\n+      oop cur = _objects_set->from_offset(_offset_array[i]);\n+      closure->do_object(cur);\n+    }\n+  }\n@@ -117,5 +99,6 @@\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::pre_iteration() {\n-  assert(_offset_array == nullptr, \"must be\");\n-  assert(_array_length == 0, \"must be\");\n-  _num_allocated_nodes = _segments->num_allocated_nodes();\n-  _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, _num_allocated_nodes, mtGC);\n+public:\n+  G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector) :\n+    _objects_set(collector),\n+    _segments(&_objects_set->_offsets),\n+    _offset_array(nullptr),\n+    _array_length(0) { }\n@@ -123,2 +106,3 @@\n-  join_and_sort();\n-}\n+  void process_and_drop(ObjectClosure* closure) {\n+    uint num = _segments->num_allocated_nodes();\n+    _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, num, mtGC);\n@@ -126,5 +110,3 @@\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::iterate(ObjectClosure* closure) const {\n-  assert(_array_length == _num_allocated_nodes, \"must be %u, %u\",\n-         _array_length, _num_allocated_nodes);\n-  iterate_internal(closure);\n-}\n+    join_and_sort();\n+    assert(_array_length == num, \"must be %u, %u\", _array_length, num);\n+    iterate(closure);\n@@ -132,8 +114,2 @@\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::post_iteration() {\n-  assert(_offset_array != nullptr, \"must be\");\n-  assert(_array_length != 0, \"must be\");\n-  FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n-  _offset_array = nullptr;\n-  _array_length = 0;\n-  _num_allocated_nodes = 0;\n-}\n+    FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n+  }\n@@ -141,4 +117,14 @@\n-\/\/ Callback of G1SegmentedArray::iterate_nodes\n-void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n-  node->copy_to(&_offset_array[_array_length]);\n-  _array_length += length;\n+  \/\/ Callback of G1SegmentedArray::iterate_nodes\n+  void do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n+    node->copy_to(&_offset_array[_array_length]);\n+    _array_length += length;\n+  }\n+};\n+\n+void G1EvacFailureObjectsSet::process_and_drop(ObjectClosure* closure) {\n+  assert_at_safepoint();\n+\n+  G1EvacFailureObjectsIterationHelper helper(this);\n+  helper.process_and_drop(closure);\n+\n+  _offsets.drop_all();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.cpp","additions":49,"deletions":63,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -33,0 +32,2 @@\n+class G1EvacFailureObjectsIterationHelper;\n+\n@@ -38,0 +39,3 @@\n+  friend class G1EvacFailureObjectsIterationHelper;\n+\n+public:\n@@ -43,28 +47,1 @@\n-  \/\/ Helper class to join, sort and iterate over the previously collected segmented\n-  \/\/ array of objects that failed evacuation.\n-  class G1EvacFailureObjectsIterationHelper {\n-    typedef G1EvacFailureObjectsSet::OffsetInRegion OffsetInRegion;\n-\n-    G1EvacFailureObjectsSet* _objects_set;\n-    const G1SegmentedArray<OffsetInRegion, mtGC>* _segments;\n-    OffsetInRegion* _offset_array;\n-    uint _array_length;\n-    uint _num_allocated_nodes;\n-\n-    static int order_oop(OffsetInRegion a, OffsetInRegion b);\n-\n-    void join_and_sort();\n-\n-    void iterate_internal(ObjectClosure* closure) const;\n-\n-  public:\n-    G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector);\n-\n-    void pre_iteration();\n-    void iterate(ObjectClosure* closure) const;\n-    void post_iteration();\n-\n-    \/\/ Callback of G1SegmentedArray::iterate_nodes\n-    void do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length);\n-  };\n-\n+private:\n@@ -87,2 +64,0 @@\n-  G1EvacFailureObjectsIterationHelper _helper;\n-\n@@ -94,6 +69,0 @@\n-  void pre_iteration();\n-  \/\/ Apply the given ObjectClosure to all objects that failed evacuation. Objects\n-  \/\/ are passed in increasing address order.\n-  void iterate(ObjectClosure* closure) const;\n-  void post_iteration();\n-\n@@ -106,1 +75,3 @@\n-  void handle_iteration(ObjectClosure* closure);\n+  \/\/ Apply the given ObjectClosure to all objects that failed evacuation. Objects\n+  \/\/ are passed in increasing address order.\n+  void process_and_drop(ObjectClosure* closure);\n@@ -109,0 +80,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.hpp","additions":10,"deletions":38,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-void HeapRegion::handle_evac_failure_objs_iteration(ObjectClosure* closure) {\n-  _evac_failure_objs.handle_iteration(closure);\n+void HeapRegion::process_and_drop_evac_failure_objs(ObjectClosure* closure) {\n+  _evac_failure_objs.process_and_drop(closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-  void handle_evac_failure_objs_iteration(ObjectClosure* closure);\n+  void process_and_drop_evac_failure_objs(ObjectClosure* closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}