{"files":[{"patch":"@@ -168,1 +168,1 @@\n-    hr->iterate_evac_failure_objs(&rspc);\n+    hr->handle_evac_failure_objs_iteration(&rspc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,14 @@\n+void G1EvacFailureObjectsSet::pre_iteration() {\n+  _helper.pre_iteration();\n+}\n+\n+void G1EvacFailureObjectsSet::iterate(ObjectClosure* closure) const {\n+  assert_at_safepoint();\n+  _helper.iterate(closure);\n+}\n+\n+void G1EvacFailureObjectsSet::post_iteration() {\n+  _helper.post_iteration();\n+  _offsets.drop_all();\n+}\n+\n@@ -61,1 +75,2 @@\n-  _offsets(&_alloc_options, &_free_buffer_list)  {\n+  _offsets(&_alloc_options, &_free_buffer_list),\n+  _helper(this) {\n@@ -72,9 +87,5 @@\n-\/\/ Helper class to join, sort and iterate over the previously collected segmented\n-\/\/ array of objects that failed evacuation.\n-class G1EvacFailureObjectsIterationHelper {\n-  typedef G1EvacFailureObjectsSet::OffsetInRegion OffsetInRegion;\n-\n-  G1EvacFailureObjectsSet* _objects_set;\n-  const G1SegmentedArray<OffsetInRegion, mtGC>* _segments;\n-  OffsetInRegion* _offset_array;\n-  uint _array_length;\n+void G1EvacFailureObjectsSet::handle_iteration(ObjectClosure* closure) {\n+  pre_iteration();\n+  iterate(closure);\n+  post_iteration();\n+}\n@@ -82,3 +93,3 @@\n-  static int order_oop(OffsetInRegion a, OffsetInRegion b) {\n-    return static_cast<int>(a-b);\n-  }\n+int G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::order_oop(OffsetInRegion a, OffsetInRegion b) {\n+  return static_cast<int>(a-b);\n+}\n@@ -86,2 +97,2 @@\n-  void join_and_sort() {\n-    _segments->iterate_nodes(*this);\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::join_and_sort() {\n+  _segments->iterate_nodes(*this);\n@@ -89,2 +100,2 @@\n-    QuickSort::sort(_offset_array, _array_length, order_oop, true);\n-  }\n+  QuickSort::sort(_offset_array, _array_length, order_oop, true);\n+}\n@@ -92,5 +103,4 @@\n-  void iterate_internal(ObjectClosure* closure) {\n-    for (uint i = 0; i < _array_length; i++) {\n-      oop cur = _objects_set->from_offset(_offset_array[i]);\n-      closure->do_object(cur);\n-    }\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::iterate_internal(ObjectClosure* closure) const {\n+  for (uint i = 0; i < _array_length; i++) {\n+    oop cur = _objects_set->from_offset(_offset_array[i]);\n+    closure->do_object(cur);\n@@ -98,0 +108,1 @@\n+}\n@@ -99,14 +110,6 @@\n-public:\n-  G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector) :\n-    _objects_set(collector),\n-    _segments(&_objects_set->_offsets),\n-    _offset_array(nullptr),\n-    _array_length(0) { }\n-\n-  void iterate(ObjectClosure* closure) {\n-    uint num = _segments->num_allocated_nodes();\n-    _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, num, mtGC);\n-\n-    join_and_sort();\n-    assert(_array_length == num, \"must be %u, %u\", _array_length, num);\n-    iterate_internal(closure);\n+G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector) :\n+  _objects_set(collector),\n+  _segments(&_objects_set->_offsets),\n+  _offset_array(nullptr),\n+  _array_length(0),\n+  _num_allocated_nodes(0) { }\n@@ -114,2 +117,5 @@\n-    FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n-  }\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::pre_iteration() {\n+  assert(_offset_array == nullptr, \"must be\");\n+  assert(_array_length == 0, \"must be\");\n+  _num_allocated_nodes = _segments->num_allocated_nodes();\n+  _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, _num_allocated_nodes, mtGC);\n@@ -117,6 +123,2 @@\n-  \/\/ Callback of G1SegmentedArray::iterate_nodes\n-  void do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n-    node->copy_to(&_offset_array[_array_length]);\n-    _array_length += length;\n-  }\n-};\n+  join_and_sort();\n+}\n@@ -124,2 +126,5 @@\n-void G1EvacFailureObjectsSet::iterate(ObjectClosure* closure) {\n-  assert_at_safepoint();\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::iterate(ObjectClosure* closure) const {\n+  assert(_array_length == _num_allocated_nodes, \"must be %u, %u\",\n+         _array_length, _num_allocated_nodes);\n+  iterate_internal(closure);\n+}\n@@ -127,2 +132,8 @@\n-  G1EvacFailureObjectsIterationHelper helper(this);\n-  helper.iterate(closure);\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::post_iteration() {\n+  assert(_offset_array != nullptr, \"must be\");\n+  assert(_array_length != 0, \"must be\");\n+  FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n+  _offset_array = nullptr;\n+  _array_length = 0;\n+  _num_allocated_nodes = 0;\n+}\n@@ -130,1 +141,4 @@\n-  _offsets.drop_all();\n+\/\/ Callback of G1SegmentedArray::iterate_nodes\n+void G1EvacFailureObjectsSet::G1EvacFailureObjectsIterationHelper::do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n+  node->copy_to(&_offset_array[_array_length]);\n+  _array_length += length;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.cpp","additions":63,"deletions":49,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -32,2 +33,0 @@\n-class G1EvacFailureObjectsIterationHelper;\n-\n@@ -39,3 +38,0 @@\n-  friend class G1EvacFailureObjectsIterationHelper;\n-\n-public:\n@@ -47,1 +43,28 @@\n-private:\n+  \/\/ Helper class to join, sort and iterate over the previously collected segmented\n+  \/\/ array of objects that failed evacuation.\n+  class G1EvacFailureObjectsIterationHelper {\n+    typedef G1EvacFailureObjectsSet::OffsetInRegion OffsetInRegion;\n+\n+    G1EvacFailureObjectsSet* _objects_set;\n+    const G1SegmentedArray<OffsetInRegion, mtGC>* _segments;\n+    OffsetInRegion* _offset_array;\n+    uint _array_length;\n+    uint _num_allocated_nodes;\n+\n+    static int order_oop(OffsetInRegion a, OffsetInRegion b);\n+\n+    void join_and_sort();\n+\n+    void iterate_internal(ObjectClosure* closure) const;\n+\n+  public:\n+    G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector);\n+\n+    void pre_iteration();\n+    void iterate(ObjectClosure* closure) const;\n+    void post_iteration();\n+\n+    \/\/ Callback of G1SegmentedArray::iterate_nodes\n+    void do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length);\n+  };\n+\n@@ -64,0 +87,2 @@\n+  G1EvacFailureObjectsIterationHelper _helper;\n+\n@@ -69,0 +94,6 @@\n+  void pre_iteration();\n+  \/\/ Apply the given ObjectClosure to all objects that failed evacuation. Objects\n+  \/\/ are passed in increasing address order.\n+  void iterate(ObjectClosure* closure) const;\n+  void post_iteration();\n+\n@@ -75,3 +106,1 @@\n-  \/\/ Apply the given ObjectClosure to all objects that failed evacuation. Objects\n-  \/\/ are passed in increasing address order.\n-  void iterate(ObjectClosure* closure);\n+  void handle_iteration(ObjectClosure* closure);\n@@ -80,1 +109,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.hpp","additions":38,"deletions":10,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-void HeapRegion::iterate_evac_failure_objs(ObjectClosure* closure) {\n-  _evac_failure_objs.iterate(closure);\n+void HeapRegion::handle_evac_failure_objs_iteration(ObjectClosure* closure) {\n+  _evac_failure_objs.handle_iteration(closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-  void iterate_evac_failure_objs(ObjectClosure* closure);\n+  void handle_evac_failure_objs_iteration(ObjectClosure* closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}