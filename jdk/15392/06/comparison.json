{"files":[{"patch":"@@ -47,2 +47,3 @@\n- * A {@code ChoiceFormat} allows you to attach a format to a range of numbers.\n- * It is generally used in a {@code MessageFormat} for handling plurals.\n+ * {@code ChoiceFormat} is a concrete subclass of {@code NumberFormat} that\n+ * allows you to attach a format to a range of numbers.\n+ * It is generally used in a {@link MessageFormat} for handling plurals.\n@@ -71,2 +72,4 @@\n- * When creating a {@code ChoiceFormat}, you must specify an array of formats\n- * and an array of limits. The length of these arrays must be the same.\n+ * A {@code ChoiceFormat} can be constructed using either an array of formats\n+ * and an array of limits or a string pattern. When constructing with\n+ * format and limit arrays, the length of these arrays must be the same.\n+ *\n@@ -86,1 +89,2 @@\n- * Here is a simple example that shows formatting and parsing:\n+ * Below is an example of constructing a ChoiceFormat with arrays to format\n+ * and parse values:\n@@ -100,1 +104,2 @@\n- * Here is a more complex example, with a pattern format:\n+ * For more sophisticated patterns, {@code ChoiceFormat} can be used with\n+ * {@link MessageFormat} to produce accurate forms for singular and plural:\n@@ -117,3 +122,69 @@\n- * <p>\n- * Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n- * For example:\n+ * Would output the following:\n+ * <blockquote>\n+ * <pre>{@code\n+ * There are no files on ADisk\n+ * There is one file on ADisk\n+ * There are 2 files on ADisk\n+ * There are 3 files on ADisk\n+ * }<\/pre>\n+ * <\/blockquote>\n+ *\n+ * <h2><a id=\"patterns\">Patterns<\/a><\/h2>\n+ * A {@code ChoiceFormat} pattern has the following syntax:\n+ * <blockquote>\n+ * <dl>\n+ * <dt><i>Pattern:<\/i>\n+ * <dd>SubPattern *(\"|\" SubPattern)\n+ * <dd><i>Note: Each additional SubPattern must have a Limit greater than the previous SubPattern's Limit<\/i>\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>SubPattern:<\/i>\n+ * <dd>Limit Relation Format\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Limit:<\/i>\n+ * <dd>Number \/ \"&infin;\" \/ \"-&infin;\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Number:<\/i>\n+ * <dd>[\"-\"] *(Digit) 1*(Decimal \/ Digit) *(Digit) [Exponent]\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Decimal:<\/i>\n+ * <dd>1*(Digit \".\") \/ 1*(\".\" Digit)\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Digit:<\/i>\n+ * <dd>0 - 9\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Exponent:<\/i>\n+ * <dd>*(Digit) Digit ExponentSymbol Digit *(Digit)\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>ExponentSymbol:<\/i>\n+ * <dd>\"e\" \/ \"E\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Relation:<\/i>\n+ * <dd>\"#\" \/ \"&lt;\" \/ \"&le;\"\n+ * <\/dl>\n+ *\n+ * <dl>\n+ * <dt><i>Format:<\/i>\n+ * <dd>Any characters except the <i>Relation<\/i> symbols\n+ * <\/dl>\n+ *\n+ * <\/blockquote>\n+ *\n+ * <i>Note:The relation &le; is not equivalent to &lt;&equals;<\/i>\n+ *\n+ * <p>Below is an example of constructing a ChoiceFormat with a pattern:\n@@ -124,1 +195,0 @@\n- * System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n@@ -126,10 +196,10 @@\n- * System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n- * System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n- * System.out.println(\"Format with 0 : \" + fmt.format(0));\n- * System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n- * System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n- * System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n- * System.out.println(\"Format with 2 : \" + fmt.format(2));\n- * System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n- * System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));\n- * System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n+ * System.out.println(fmt.format(Double.NEGATIVE_INFINITY)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(-1.0)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(0)); \/\/ outputs \"is zero or fraction\"\n+ * System.out.println(fmt.format(0.9)); \/\/ outputs \"is zero or fraction\"\n+ * System.out.println(fmt.format(1)); \/\/ outputs \"is one\"\n+ * System.out.println(fmt.format(1.5)); \/\/ outputs \"is 1+\"\n+ * System.out.println(fmt.format(2)); \/\/ outputs \"is two\"\n+ * System.out.println(fmt.format(2.1)); \/\/ outputs \"is more than 2.\"\n+ * System.out.println(fmt.format(Double.NaN)); \/\/ outputs \"is negative\"\n+ * System.out.println(fmt.format(Double.POSITIVE_INFINITY)); \/\/ outputs \"is more than 2.\"\n@@ -138,15 +208,0 @@\n- * And the output result would be like the following:\n- * <blockquote>\n- * <pre>{@code\n- * Format with -INF : is negative\n- * Format with -1.0 : is negative\n- * Format with 0 : is zero or fraction\n- * Format with 0.9 : is zero or fraction\n- * Format with 1.0 : is one\n- * Format with 1.5 : is 1+\n- * Format with 2 : is two\n- * Format with 2.1 : is more than 2.\n- * Format with NaN : is negative\n- * Format with +INF : is more than 2.\n- * }<\/pre>\n- * <\/blockquote>\n@@ -175,2 +230,5 @@\n-     * Sets the pattern.\n-     * @param newPattern See the class description.\n+     * Apply the given pattern to this ChoiceFormat object. The syntax\n+     * for the ChoiceFormat pattern can be seen in the {@linkplain ##patterns\n+     * Patterns} section.\n+     *\n+     * @param newPattern a pattern string\n@@ -180,1 +238,2 @@\n-     *            is invalid\n+     *            violates the pattern syntax\n+     * @see #ChoiceFormat(String)\n@@ -263,1 +322,2 @@\n-     * Gets the pattern.\n+     * {@return a pattern {@code string} that represents the the limits and formats\n+     * of this ChoiceFormat object}\n@@ -265,1 +325,5 @@\n-     * @return the pattern string\n+     * The {@code string} returned is not guaranteed to be the same input\n+     * {@code string} passed to either {@link #applyPattern(String)} or\n+     * {@link #ChoiceFormat(String)}.\n+     *\n+     * @see #applyPattern(String)\n@@ -315,1 +379,4 @@\n-     * Constructs with limits and corresponding formats based on the pattern.\n+     * Constructs a ChoiceFormat with limits and corresponding formats\n+     * based on the pattern.\n+     * The syntax for the ChoiceFormat pattern can be seen in the {@linkplain\n+     * ##patterns Patterns} section.\n@@ -321,1 +388,1 @@\n-     *            is invalid\n+     *            violates the pattern syntax\n@@ -367,2 +434,1 @@\n-     * Get the limits passed in the constructor.\n-     * @return the limits.\n+     * {@return the limits of this ChoiceFormat}\n@@ -376,2 +442,1 @@\n-     * Get the formats passed in the constructor.\n-     * @return the formats.\n+     * {@return the formats of this ChoiceFormat}\n@@ -393,0 +458,1 @@\n+    @Override\n@@ -406,1 +472,2 @@\n-   public StringBuffer format(double number, StringBuffer toAppendTo,\n+    @Override\n+    public StringBuffer format(double number, StringBuffer toAppendTo,\n@@ -437,0 +504,1 @@\n+    @Override\n@@ -496,0 +564,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":116,"deletions":47,"binary":false,"changes":163,"status":"modified"}]}