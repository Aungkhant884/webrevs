{"files":[{"patch":"@@ -48,1 +48,1 @@\n- * It is generally used in a {@code MessageFormat} for handling plurals.\n+ * It is generally used in a {@link MessageFormat} for handling plurals.\n@@ -100,1 +100,2 @@\n- * Here is a more complex example, with a pattern format:\n+ * For more sophisticated patterns, {@code ChoiceFormat} can be used with\n+ * {@link MessageFormat} to produce accurate forms for singular and plural:\n@@ -117,3 +118,28 @@\n- * <p>\n- * Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n- * For example:\n+ * Would output the following:\n+ * <blockquote>\n+ * <pre>{@code\n+ * There are no files on ADisk\n+ * There is one file on ADisk\n+ * There are 2 files on ADisk\n+ * There are 3 files on ADisk\n+ * }<\/pre>\n+ * <\/blockquote>\n+ *\n+ * <h2><a id=\"patterns\">Patterns<\/a><\/h2>\n+ * A {@code ChoiceFormat} pattern has the following syntax:\n+ * <blockquote><pre>\n+ * <i>Pattern:<\/i>\n+ *         SubPattern *(\"|\" SubPattern)\n+ * <i>SubPattern:<\/i>\n+ *         Limit Relation Format\n+ * <i>Limit:<\/i>\n+ *         {@code String} that can be parsed as a {@code double} \/ \"&infin;\" ({@code U+221E}) \/ \"-&infin;\" (-{@code U+221E}).\n+ * <i>Relation:<\/i>\n+ *         \"#\" \/ \"&lt;\" \/ \"&le;\" ({@code U+2264})\n+ * <i>Format:<\/i>\n+ *         {@code String}\n+ * <\/pre><\/blockquote>\n+ *\n+ * <i>Note:The relation &le; is not equivalent to &lt;&equals;<\/i>\n+ *\n+ * <p>Below is an example of constructing a ChoiceFormat with a pattern:\n@@ -124,1 +150,0 @@\n- * System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n@@ -127,7 +152,1 @@\n- * System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n- * System.out.println(\"Format with 0 : \" + fmt.format(0));\n- * System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n- * System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n- * System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n- * System.out.println(\"Format with 2 : \" + fmt.format(2));\n- * System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n+ * \/\/ ...\n@@ -138,1 +157,1 @@\n- * And the output result would be like the following:\n+ * Would output the following:\n@@ -175,2 +194,5 @@\n-     * Sets the pattern.\n-     * @param newPattern See the class description.\n+     * Apply the given pattern to this ChoiceFormat object. The syntax\n+     * for the ChoiceFormat pattern can be seen in the {@linkplain ##patterns\n+     * Patterns} section.\n+     *\n+     * @param newPattern a pattern string\n@@ -181,0 +203,1 @@\n+     * @see #ChoiceFormat(String)\n@@ -263,1 +286,2 @@\n-     * Gets the pattern.\n+     * {@return a pattern {@code string} that represents the the limits and formats\n+     * of this ChoiceFormat object}\n@@ -265,1 +289,5 @@\n-     * @return the pattern string\n+     * The {@code string} returned is not guaranteed to be the same input\n+     * {@code string} passed to either {@link #applyPattern(String)} or\n+     * {@link #ChoiceFormat(String)}.\n+     *\n+     * @see #applyPattern(String)\n@@ -315,1 +343,4 @@\n-     * Constructs with limits and corresponding formats based on the pattern.\n+     * Constructs this ChoiceFormat with limits and corresponding formats\n+     * based on the pattern.\n+     * The syntax for the ChoiceFormat pattern can be seen in the {@linkplain\n+     * ##patterns Patterns} section.\n@@ -367,1 +398,1 @@\n-     * Get the limits passed in the constructor.\n+     * Get the limits of this ChoiceFormat.\n@@ -376,1 +407,1 @@\n-     * Get the formats passed in the constructor.\n+     * Get the formats of this ChoiceFormat.\n@@ -393,0 +424,1 @@\n+    @Override\n@@ -406,1 +438,2 @@\n-   public StringBuffer format(double number, StringBuffer toAppendTo,\n+    @Override\n+    public StringBuffer format(double number, StringBuffer toAppendTo,\n@@ -437,0 +470,1 @@\n+    @Override\n@@ -496,0 +530,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":57,"deletions":22,"binary":false,"changes":79,"status":"modified"}]}