{"files":[{"patch":"@@ -236,0 +236,1 @@\n+HOTSPOT_VARIANT_STATIC_LIBS_TARGETS := $(addsuffix -static-libs, $(HOTSPOT_VARIANT_TARGETS))\n@@ -249,1 +250,1 @@\n-\t    JVM_VARIANT=$1)\n+\t    JVM_VARIANT=$1 $$($1_EXTRA_ARGS))\n@@ -254,0 +255,8 @@\n+define DeclareHotspotStaticLibsRecipe\n+  hotspot-$1-static-libs:\n+\t+($(CD) $(TOPDIR)\/make\/hotspot && $(MAKE) $(MAKE_ARGS) -f lib\/CompileLibraries.gmk \\\n+\t    JVM_VARIANT=$1 STATIC_LIBS=true)\n+endef\n+\n+$(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotStaticLibsRecipe,$v)))\n+\n@@ -301,1 +310,1 @@\n-    $(HOTSPOT_VARIANT_LIBS_TARGETS)\n+    $(HOTSPOT_VARIANT_LIBS_TARGETS) $(HOTSPOT_VARIANT_STATIC_LIBS_TARGETS)\n@@ -467,0 +476,5 @@\n+$(eval $(call SetupTarget, static-java-image, \\\n+    MAKEFILE := StaticLink, \\\n+    DEPS := jdk-image hotspot-server-static-libs static-libs-image, \\\n+))\n+\n@@ -892,0 +906,1 @@\n+      $(eval hotspot-$v-static-libs: hotspot-$v-gensrc java.base-copy) \\\n@@ -1052,0 +1067,2 @@\n+  static-java-image: jdk-image hotspot-server-static-libs static-libs-image\n+\n@@ -1099,0 +1116,1 @@\n+  $(eval hotspot-static-libs: hotspot-$v-static-libs) \\\n@@ -1262,1 +1280,1 @@\n-ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-gensrc gensrc gendata \\\n+ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-static-libs hotspot-gensrc gensrc gendata \\\n","filename":"make\/Main.gmk","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+#\n+# Copyright (c) 2021, 2023, Google Inc. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include $(TOPDIR)\/make\/common\/MakeBase.gmk\n+include $(TOPDIR)\/make\/common\/Modules.gmk\n+\n+$(eval $(call IncludeCustomExtension, StaticLink.gmk))\n+\n+################################################################################\n+\n+JAVASTATIC := javastatic$(EXE_SUFFIX)\n+\n+ORIGIN_ARG := $(call SET_EXECUTABLE_ORIGIN,\/.)\n+\n+JAVASTATIC_OUTPUT_DIR := $(JDK_OUTPUTDIR)\/bin\n+JAVASTATIC_OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/java.base\/java\n+STATIC_LIBS_DIR := $(STATIC_LIBS_IMAGE_DIR)\/lib\n+\n+JDK_STATIC_LIBS := $(call FindFiles, $(STATIC_LIBS_IMAGE_DIR)\/lib)\n+# Currently we are supporting headless only.\n+EXCLUDED_STATIC_LIBS := \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)jsound$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)saproc$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)jawt$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)awt_xawt$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)splashscreen$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)jpackageapplauncher$(STATIC_LIBRARY_SUFFIX) \\\n+  $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)jpackageapplauncheraux$(STATIC_LIBRARY_SUFFIX)\n+\n+JVM_STATIC_LIB := $(STATIC_LIBS_IMAGE_DIR)\/lib\/$(LIBRARY_PREFIX)jvm$(STATIC_LIBRARY_SUFFIX)\n+\n+JAVASTATIC_LINK_LIBS := $(filter-out $(EXCLUDED_STATIC_LIBS), $(JDK_STATIC_LIBS)) $(JVM_STATIC_LIB)\n+\n+JAVASTATIC_LOG_PREFIX := $(JAVASTATIC_OBJECT_DIR)\/BUILD_LAUNCHER_javastatic$(EXE_SUFFIX)_static_link\n+\n+JAVASTATIC_TARGET := $(JAVASTATIC_OUTPUT_DIR)\/$(JAVASTATIC)\n+JAVASTATIC_TARGET_IMAGE := $(JDK_IMAGE_DIR)\/bin\/$(JAVASTATIC)\n+\n+JAVASTATIC_LDFLAGS := $(JVM_LDFLAGS) $(ORIGIN_ARG) -Wl$(COMMA)--export-dynamic\n+JAVASTATIC_LD_OBJ_ARG := $(JAVASTATIC_OBJECT_DIR)\/main.o\n+\n+# Link with headless native only for now.\n+JAVASTATIC_LIBS := -Wl$(COMMA)--whole-archive $(JAVASTATIC_LINK_LIBS)\n+JAVASTATIC_EXTRA_LIBS := -Wl$(COMMA)--no-whole-archive -lpthread $(LIBDL) $(LIBM) $(LDFLAGS_CXX_STATIC_JDK)\n+\n+$(JVM_STATIC_LIB) : $(HOTSPOT_OUTPUTDIR)\/variant-server\/libjvm\/objs\/static\/$(LIBRARY_PREFIX)jvm$(STATIC_LIBRARY_SUFFIX)\n+\t$(CP) $< $@\n+\n+$(JAVASTATIC_TARGET_IMAGE): $(JAVASTATIC_LINK_LIBS)\n+        ifeq ($(call isTargetOs, linux), true)\n+\t  $(ECHO) \"Creating '$(JAVASTATIC_TARGET_IMAGE)'\"\n+\t  $(call ExecuteWithLog, $(JAVASTATIC_LOG_PREFIX), \\\n+\t      $(LD) $(JAVASTATIC_LDFLAGS) $(LD_OUT_OPTION)$(JAVASTATIC_TARGET) \\\n+\t          $(JAVASTATIC_LD_OBJ_ARG) $(JAVASTATIC_LIBS) $(JAVASTATIC_EXTRA_LIBS))\n+\t  $(CP) -f $(JAVASTATIC_TARGET) $@\n+        else\n+\t  $(error Not supported on non-linux platform currently)\n+        endif\n+\n+TARGETS += $(JVM_STATIC_LIB) $(JAVASTATIC_TARGET_IMAGE)\n+\n+all: $(TARGETS)\n+\n+.PHONY: all\n","filename":"make\/StaticLink.gmk","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -57,0 +57,1 @@\n+m4_include([static-java.m4])\n@@ -95,0 +96,2 @@\n+STATIC_JAVA_SETUP\n+\n","filename":"make\/autoconf\/configure.ac","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,0 +151,10 @@\n+\n+  # Setup static linking flags.\n+  if test \"x$OPENJDK_TARGET_OS\" = xlinux; then\n+    if test \"x$TOOLCHAIN_TYPE\" = xgcc; then\n+      LDFLAGS_CXX_STATIC_JDK=\"-l:libstdc++.a\"\n+    elif test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+      LDFLAGS_CXX_STATIC_JDK=\"-l:libc++.a\"\n+    fi\n+  fi\n+  AC_SUBST(LDFLAGS_CXX_STATIC_JDK)\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,0 +175,6 @@\n+  # Always bundle the library if we are building static java.\n+  if test \"x${STATIC_JAVA}\" = \"xtrue\"; then\n+    DEFAULT_ZLIB=bundled\n+    ZLIB_FOUND=no\n+  fi\n+\n@@ -189,0 +195,3 @@\n+    if test \"x${STATIC_JAVA}\" = \"xtrue\"; then\n+      AC_MSG_ERROR([--with-zlib=system does not work with --with-static-java=yes])\n+    fi\n","filename":"make\/autoconf\/lib-bundled.m4","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,4 @@\n+  if test \"x${STATIC_JAVA}\" = \"xtrue\"; then\n+    FOUND_FREETYPE=no\n+  fi\n+\n@@ -106,1 +110,2 @@\n-      test \"x$OPENJDK_TARGET_OS\" != \"xaix\"; then\n+      test \"x$OPENJDK_TARGET_OS\" != \"xaix\" && \\\n+      test \"x${STATIC_JAVA}\" != \"xtrue\"; then\n@@ -111,0 +116,3 @@\n+      if test \"x${STATIC_JAVA}\" = \"xtrue\"; then\n+        AC_MSG_ERROR([--with-freetype=system does not work with --with-static-java=yes])\n+      fi\n","filename":"make\/autoconf\/lib-freetype.m4","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -575,0 +575,3 @@\n+# LDFLAGS specific to C++ static linking.\n+LDFLAGS_CXX_STATIC_JDK=@LDFLAGS_CXX_STATIC_JDK@\n+\n","filename":"make\/autoconf\/spec.gmk.in","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+#\n+# Copyright (c) 2023, Google Inc. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# Fully statically linked Java.\n+################################################################################\n+AC_DEFUN_ONCE([STATIC_JAVA_SETUP],\n+[\n+  AC_ARG_WITH(static-java, [AS_HELP_STRING([--with-static-java],\n+      [fully statically link java executable])],\n+      [STATIC_JAVA=true])\n+])\n","filename":"make\/autoconf\/static-java.m4","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,0 +551,1 @@\n+#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n@@ -729,0 +730,6 @@\n+  ifeq ($(STATIC_LIBS), true)\n+    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n+    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n+      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n+    endif\n+  endif\n@@ -1133,0 +1140,34 @@\n+  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n+\n+  # If there are many object files, use an @-file...\n+  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n+    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n+    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n+      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n+    else\n+      # ...except for toolchains which don't support them.\n+      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+    endif\n+  endif\n+\n+  # Unfortunately the @-file trick does not work reliably when using clang.\n+  # Clang does not propagate the @-file parameter to the ld sub process, but\n+  # instead puts the full content on the command line. At least the llvm ld\n+  # does not even support an @-file.\n+  #\n+  # When linking a large amount of object files, we risk hitting the limit\n+  # of the command line length even on posix systems if the path length of\n+  # the output dir is very long due to our use of absolute paths. To\n+  # mitigate this, use paths relative to the output dir when linking over\n+  # 500 files with clang and the output dir path is deep.\n+  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n+    ifeq ($$(TOOLCHAIN_TYPE), clang)\n+      # There is no strlen function in make, but checking path depth is a\n+      # reasonable approximation.\n+      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n+        $1_LINK_OBJS_RELATIVE := true\n+        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+      endif\n+    endif\n+  endif\n+\n@@ -1149,0 +1190,7 @@\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n@@ -1152,1 +1200,1 @@\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_ALL_OBJS) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) \\\n@@ -1204,34 +1252,0 @@\n-    $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n-\n-    # If there are many object files, use an @-file...\n-    ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n-      $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n-      ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-        $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-      else\n-        # ...except for toolchains which don't support them.\n-        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-      endif\n-    endif\n-\n-    # Unfortunately the @-file trick does not work reliably when using clang.\n-    # Clang does not propagate the @-file parameter to the ld sub process, but\n-    # instead puts the full content on the command line. At least the llvm ld\n-    # does not even support an @-file.\n-    #\n-    # When linking a large amount of object files, we risk hitting the limit\n-    # of the command line length even on posix systems if the path length of\n-    # the output dir is very long due to our use of absolute paths. To\n-    # mitigate this, use paths relative to the output dir when linking over\n-    # 500 files with clang and the output dir path is deep.\n-    ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n-      ifeq ($$(TOOLCHAIN_TYPE), clang)\n-        # There is no strlen function in make, but checking path depth is a\n-        # reasonable approximation.\n-        ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n-          $1_LINK_OBJS_RELATIVE := true\n-          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n-        endif\n-      endif\n-    endif\n-\n","filename":"make\/common\/NativeCompilation.gmk","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -142,0 +142,7 @@\n+# The global operator new functions defined in operator_new.cpp are intended\n+# to detect and prevent the VM code from calling them. See more details in\n+# operator_new.cpp. Exclude operator_new.o when statically linking the VM\n+# code with JDK natives, as the JDK natives might need to call the global\n+# operator new.\n+LIBJVM_STATIC_EXCLUDE_OBJS := operator_new.o\n+\n@@ -189,0 +196,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJVM_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -165,0 +165,8 @@\n+\n+  # Do not include these libz objects in the static libjli library.\n+  # When statically linking the java launcher with all JDK and VM\n+  # static libraries, we use the --whole-archive linker option.\n+  # The duplicate objects in different static libraries cause linking\n+  # errors due to duplicate symbols.\n+  LIBJLI_STATIC_EXCLUDE_OBJS := \\\n+      inflate.o inftrees.o inffast.o zadler32.o zcrc32.o zutil.o\n@@ -183,0 +191,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJLI_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -221,0 +221,9 @@\n+    # These are the object files provided by the awt native\n+    # library. Do not include these external (non-awt_xawt library)\n+    # objects in the static library. When statically linking the java\n+    # launcher with all JDK and VM static libraries, we use the\n+    # --whole-archive linker option. The duplicate objects in different\n+    # static libraries cause linking errors due to duplicate symbols.\n+    LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := \\\n+      debug_assert.o debug_util.o debug_trace.o debug_mem.o systemScale.o\n+\n@@ -247,0 +256,1 @@\n+        STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n@@ -370,0 +380,8 @@\n+  # These are the object files provided by the awt native\n+  # library. Do not include these external (non-awt_headless library)\n+  # objects in the static library. When statically linking the java\n+  # launcher with all JDK and VM static libraries, we use the\n+  # --whole-archive linker option. The duplicate objects in different\n+  # static libraries cause linking errors due to duplicate symbols.\n+  LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -385,0 +403,1 @@\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}