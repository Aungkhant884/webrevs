{"files":[{"patch":"@@ -91,1 +91,0 @@\n-            Hashtable<String,Object> ri = new Hashtable<>();\n@@ -101,0 +100,1 @@\n+                Hashtable<String,Object> ri = new Hashtable<>();\n@@ -102,0 +102,1 @@\n+                realms.put(nextRealm, ri);\n@@ -103,1 +104,0 @@\n-            realms.put(nextRealm, ri);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/SCDynamicStoreConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7184246\n- * @summary Simplify Config.get() of krb5\n- * @modules java.security.jgss\/sun.security.krb5:+open\n- *\/\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.util.Hashtable;\n-import java.util.Vector;\n-import sun.security.krb5.Config;\n-import sun.security.krb5.SCDynamicStoreConfig;\n-\n-public class SCDynamicConfigTest {\n-\n-    static Vector<Hashtable<String,String>>hosts() {\n-        Vector <Hashtable<String,String>> result = new Vector<>();\n-        Hashtable<String,String> pair = new Hashtable<>();\n-        pair.put(\"host\", \"127.0.0.1\");\n-        result.add(pair);\n-        pair = new Hashtable<>();\n-        pair.put(\"host\", \"127.0.0.2\");\n-        result.add(pair);\n-        return result;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Reconstruct a typical SCDynamicConfig.getKerberosConfig() output\n-        Hashtable<String, Object> conf = new Hashtable<>();\n-\n-        Hashtable<String, Object> libdefaults = new Hashtable<>();\n-        libdefaults.put(\"default_realm\", \"REALM.COM\");\n-        conf.put(\"libdefaults\", libdefaults);\n-\n-        Hashtable<String, Object> realms = new Hashtable<>();\n-        Hashtable<String, Object> thisRealm = new Hashtable<>();\n-        realms.put(\"REALM.COM\", thisRealm);\n-        thisRealm.put(\"kpasswd\", hosts());\n-        thisRealm.put(\"kadmin\", hosts());\n-        thisRealm.put(\"kdc\", hosts());\n-        conf.put(\"realms\", realms);\n-\n-        Hashtable<String, Object> domain_realm = new Hashtable<>();\n-        domain_realm.put(\".realm.com\", \"REALM.COM\");\n-        domain_realm.put(\"realm.com\", \"REALM.COM\");\n-        conf.put(\"domain_realm\", domain_realm);\n-\n-        System.out.println(\"SCDynamicConfig:\\n\");\n-        System.out.println(conf);\n-\n-        \/\/ Simulate SCDynamicConfig.getConfig() output\n-        Method m = SCDynamicStoreConfig.class.getDeclaredMethod(\n-                \"convertNativeConfig\", Hashtable.class);\n-        m.setAccessible(true);\n-        conf = (Hashtable)m.invoke(null, conf);\n-\n-        System.out.println(\"\\nkrb5.conf:\\n\");\n-        System.out.println(conf);\n-\n-        \/\/ Feed it into a Config object\n-        System.setProperty(\"java.security.krb5.conf\", \"not-a-file\");\n-        Config cf = Config.getInstance();\n-        Field f = Config.class.getDeclaredField(\"stanzaTable\");\n-        f.setAccessible(true);\n-        f.set(cf, conf);\n-\n-        System.out.println(\"\\nConfig:\\n\");\n-        System.out.println(cf);\n-\n-        if (!cf.getDefaultRealm().equals(\"REALM.COM\")) {\n-            throw new Exception();\n-        }\n-        if (!cf.getKDCList(\"REALM.COM\").equals(\"127.0.0.1 127.0.0.2\")) {\n-            throw new Exception();\n-        }\n-        if (!cf.get(\"domain_realm\", \".realm.com\").equals(\"REALM.COM\")) {\n-            throw new Exception();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/SCDynamicConfigTest.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"}]}