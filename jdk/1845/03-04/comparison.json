{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,2 @@\n+  BUILD_JDK_JTREG_LIBRARIES_CFLAGS_libTestDynamicStore := -ObjC\n+  BUILD_JDK_JTREG_LIBRARIES_LIBS_libTestDynamicStore := -framework Cocoa -framework SystemConfiguration\n@@ -87,0 +89,1 @@\n+  BUILD_JDK_JTREG_EXCLUDE += libTestDynamicStore.c\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257860\n+ * @summary SCDynamicStoreConfig works\n+ * @modules java.security.jgss\/sun.security.krb5\n+ * @library \/test\/lib\n+ * @run main\/manual\/native TestDynamicStore\n+ * @requires (os.family == \"mac\")\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.krb5.Config;\n+\n+public class TestDynamicStore {\n+\n+    native static int actionInternal(char what, char whom);\n+\n+    \/\/ what: 'a' for add, 'r' for remove\n+    \/\/ whom: 'a' for all, 'r' for realm, 'm' for mapping\n+    static int action(char what, char whom) throws Exception {\n+        int out = actionInternal(what, whom);\n+        System.out.println(\"Run \" + what + whom + \" \" + out);\n+        Thread.sleep(1000);   \/\/ wait for callback called\n+        return out;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        System.loadLibrary(\"TestDynamicStore\");\n+\n+        Config cfg = Config.getInstance();\n+        if (cfg.exists(\"libdefaults\") || cfg.exists(\"realms\")) {\n+            System.out.println(\"Already have krb5 config. Will not touch\");\n+            return;\n+        }\n+\n+        try {\n+            System.out.println(\"Fill in dynamic store\");\n+            action('a', 'a');\n+            Asserts.assertTrue(Config.getInstance().get(\"libdefaults\", \"default_realm\").equals(\"A.COM\"));\n+            Asserts.assertTrue(Config.getInstance().exists(\"domain_realm\"));\n+\n+            System.out.println(\"Remove mapping\");\n+            action('r', 'm');\n+            Asserts.assertTrue(!Config.getInstance().exists(\"domain_realm\"));\n+\n+            System.out.println(\"Re-add mapping\");\n+            action('a', 'm');\n+            Asserts.assertTrue(Config.getInstance().exists(\"domain_realm\"));\n+\n+            System.out.println(\"Remove realm info\");\n+            action('r', 'r');\n+            \/\/ Realm info is not watched, so no change detected\n+            Asserts.assertTrue(Config.getInstance().get(\"libdefaults\", \"default_realm\").equals(\"A.COM\"));\n+\n+            System.out.println(\"Remove mapping\");\n+            action('r', 'm');\n+            \/\/ But mapping is watched, so realm info is not re-read\n+            Asserts.assertTrue(Config.getInstance().get(\"libdefaults\", \"default_realm\").equals(\"B.COM\"));\n+        } finally {\n+            System.out.println(\"Remove everything\");\n+            action('r', 'a');\n+            Asserts.assertTrue(!Config.getInstance().exists(\"libdefault\"));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/native\/TestDynamicStore.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import <Cocoa\/Cocoa.h>\n+#import <SystemConfiguration\/SystemConfiguration.h>\n+#import <jni.h>\n+\n+#define KERBEROS_DEFAULT_REALMS @\"Kerberos-Default-Realms\"\n+#define KERBEROS_DEFAULT_REALM_MAPPINGS @\"Kerberos-Domain-Realm-Mappings\"\n+#define KERBEROS_REALM_INFO @\"Kerberos:%@\"\n+\n+int removeAll(SCDynamicStoreRef store) {\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) KERBEROS_DEFAULT_REALMS));\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) [NSString stringWithFormat:KERBEROS_REALM_INFO, @\"A.COM\"]));\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) [NSString stringWithFormat:KERBEROS_REALM_INFO, @\"B.COM\"]));\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) KERBEROS_DEFAULT_REALM_MAPPINGS));\n+    return 1;\n+}\n+\n+int removeRealm(SCDynamicStoreRef store) {\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) [NSString stringWithFormat:KERBEROS_REALM_INFO, @\"A.COM\"]));\n+    return 1;\n+}\n+\n+int removeMapping(SCDynamicStoreRef store) {\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreRemoveValue(store, (CFStringRef) KERBEROS_DEFAULT_REALM_MAPPINGS));\n+    return 1;\n+}\n+\n+int addMapping(SCDynamicStoreRef store) {\n+    NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        @\"a\", @\"A\",\n+        @\"b\", @\"B\",\n+        @\"c\", @\"C\",\n+        @\"d\", @\"D\",\n+        nil];\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreSetValue(store, (CFStringRef) KERBEROS_DEFAULT_REALM_MAPPINGS, [NSArray arrayWithObjects: dict, nil]));\n+    return 1;\n+}\n+\n+int addAll(SCDynamicStoreRef store) {\n+    NSArray *keys = [NSArray arrayWithObjects:@\"A.COM\", @\"B.COM\", nil];\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreSetValue(store, (CFStringRef) KERBEROS_DEFAULT_REALMS, keys));\n+\n+    NSDictionary *k1 = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        @\"kdc1.a.com\", @\"host\", nil];\n+    NSDictionary *k2 = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        @\"kdc2.a.com\", @\"host\", nil];\n+    NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        [NSArray arrayWithObjects: k1, k2, nil], @\"kdc\",\n+        nil];\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreSetValue(store, (CFStringRef) [NSString stringWithFormat:KERBEROS_REALM_INFO, @\"A.COM\"], dict));\n+\n+    k1 = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        @\"kdc1.b.com\", @\"host\", nil];\n+    k2 = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        @\"kdc2.b.com\", @\"host\", nil];\n+    dict = [[NSDictionary alloc] initWithObjectsAndKeys:\n+        [NSArray arrayWithObjects: k1, k2, nil], @\"kdc\",\n+        nil];\n+    fprintf(stderr, \"%d\\n\", SCDynamicStoreSetValue(store, (CFStringRef) [NSString stringWithFormat:KERBEROS_REALM_INFO, @\"B.COM\"], dict));\n+    addMapping(store);\n+    return 1;\n+}\n+\n+JNIEXPORT jint JNICALL Java_TestDynamicStore_actionInternal(JNIEnv *env, jclass clazz, jchar what, jchar whom) {\n+    SCDynamicStoreRef store = SCDynamicStoreCreate(NULL, CFSTR(\"java-kerberos\"), NULL, NULL);\n+    fprintf(stderr, \">>> action: %c %c\\n\", what, whom);\n+    switch (what) {\n+        case 'a':\n+            switch (whom) {\n+                case 'a': return addAll(store);\n+                case 'm': return addMapping(store);\n+            }\n+            break;\n+        case 'r':\n+            switch (whom) {\n+                case 'a': return removeAll(store);\n+                case 'r': return removeRealm(store);\n+                case 'm': return removeMapping(store);\n+            }\n+            break;\n+    }\n+    return 0;\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/native\/libTestDynamicStore.c","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}