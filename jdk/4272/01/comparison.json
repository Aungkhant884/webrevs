{"files":[{"patch":"@@ -117,6 +117,0 @@\n-    @Override\n-    public VectorMask<E> eq(VectorMask<E> m) {\n-        \/\/ FIXME: Generate good code here.\n-        return bOp(m, (i, a, b) -> a == b);\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -641,0 +641,8 @@\n+        @Override\n+        @ForceInline\n+        public Byte128Mask eq(VectorMask<Byte> mask) {\n+            Objects.requireNonNull(mask);\n+            Byte128Mask m = (Byte128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -673,0 +673,8 @@\n+        @Override\n+        @ForceInline\n+        public Byte256Mask eq(VectorMask<Byte> mask) {\n+            Objects.requireNonNull(mask);\n+            Byte256Mask m = (Byte256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -737,0 +737,8 @@\n+        @Override\n+        @ForceInline\n+        public Byte512Mask eq(VectorMask<Byte> mask) {\n+            Objects.requireNonNull(mask);\n+            Byte512Mask m = (Byte512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -625,0 +625,8 @@\n+        @Override\n+        @ForceInline\n+        public Byte64Mask eq(VectorMask<Byte> mask) {\n+            Objects.requireNonNull(mask);\n+            Byte64Mask m = (Byte64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -611,0 +611,8 @@\n+        @Override\n+        @ForceInline\n+        public ByteMaxMask eq(VectorMask<Byte> mask) {\n+            Objects.requireNonNull(mask);\n+            ByteMaxMask m = (ByteMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -609,0 +609,8 @@\n+        @Override\n+        @ForceInline\n+        public Double128Mask eq(VectorMask<Double> mask) {\n+            Objects.requireNonNull(mask);\n+            Double128Mask m = (Double128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -613,0 +613,8 @@\n+        @Override\n+        @ForceInline\n+        public Double256Mask eq(VectorMask<Double> mask) {\n+            Objects.requireNonNull(mask);\n+            Double256Mask m = (Double256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -621,0 +621,8 @@\n+        @Override\n+        @ForceInline\n+        public Double512Mask eq(VectorMask<Double> mask) {\n+            Objects.requireNonNull(mask);\n+            Double512Mask m = (Double512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -607,0 +607,8 @@\n+        @Override\n+        @ForceInline\n+        public Double64Mask eq(VectorMask<Double> mask) {\n+            Objects.requireNonNull(mask);\n+            Double64Mask m = (Double64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -606,0 +606,8 @@\n+        @Override\n+        @ForceInline\n+        public DoubleMaxMask eq(VectorMask<Double> mask) {\n+            Objects.requireNonNull(mask);\n+            DoubleMaxMask m = (DoubleMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -613,0 +613,8 @@\n+        @Override\n+        @ForceInline\n+        public Float128Mask eq(VectorMask<Float> mask) {\n+            Objects.requireNonNull(mask);\n+            Float128Mask m = (Float128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -621,0 +621,8 @@\n+        @Override\n+        @ForceInline\n+        public Float256Mask eq(VectorMask<Float> mask) {\n+            Objects.requireNonNull(mask);\n+            Float256Mask m = (Float256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -637,0 +637,8 @@\n+        @Override\n+        @ForceInline\n+        public Float512Mask eq(VectorMask<Float> mask) {\n+            Objects.requireNonNull(mask);\n+            Float512Mask m = (Float512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -609,0 +609,8 @@\n+        @Override\n+        @ForceInline\n+        public Float64Mask eq(VectorMask<Float> mask) {\n+            Objects.requireNonNull(mask);\n+            Float64Mask m = (Float64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -606,0 +606,8 @@\n+        @Override\n+        @ForceInline\n+        public FloatMaxMask eq(VectorMask<Float> mask) {\n+            Objects.requireNonNull(mask);\n+            FloatMaxMask m = (FloatMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -617,0 +617,8 @@\n+        @Override\n+        @ForceInline\n+        public Int128Mask eq(VectorMask<Integer> mask) {\n+            Objects.requireNonNull(mask);\n+            Int128Mask m = (Int128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -625,0 +625,8 @@\n+        @Override\n+        @ForceInline\n+        public Int256Mask eq(VectorMask<Integer> mask) {\n+            Objects.requireNonNull(mask);\n+            Int256Mask m = (Int256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -641,0 +641,8 @@\n+        @Override\n+        @ForceInline\n+        public Int512Mask eq(VectorMask<Integer> mask) {\n+            Objects.requireNonNull(mask);\n+            Int512Mask m = (Int512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -613,0 +613,8 @@\n+        @Override\n+        @ForceInline\n+        public Int64Mask eq(VectorMask<Integer> mask) {\n+            Objects.requireNonNull(mask);\n+            Int64Mask m = (Int64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -611,0 +611,8 @@\n+        @Override\n+        @ForceInline\n+        public IntMaxMask eq(VectorMask<Integer> mask) {\n+            Objects.requireNonNull(mask);\n+            IntMaxMask m = (IntMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -603,0 +603,8 @@\n+        @Override\n+        @ForceInline\n+        public Long128Mask eq(VectorMask<Long> mask) {\n+            Objects.requireNonNull(mask);\n+            Long128Mask m = (Long128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -607,0 +607,8 @@\n+        @Override\n+        @ForceInline\n+        public Long256Mask eq(VectorMask<Long> mask) {\n+            Objects.requireNonNull(mask);\n+            Long256Mask m = (Long256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -615,0 +615,8 @@\n+        @Override\n+        @ForceInline\n+        public Long512Mask eq(VectorMask<Long> mask) {\n+            Objects.requireNonNull(mask);\n+            Long512Mask m = (Long512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -601,0 +601,8 @@\n+        @Override\n+        @ForceInline\n+        public Long64Mask eq(VectorMask<Long> mask) {\n+            Objects.requireNonNull(mask);\n+            Long64Mask m = (Long64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -601,0 +601,8 @@\n+        @Override\n+        @ForceInline\n+        public LongMaxMask eq(VectorMask<Long> mask) {\n+            Objects.requireNonNull(mask);\n+            LongMaxMask m = (LongMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -625,0 +625,8 @@\n+        @Override\n+        @ForceInline\n+        public Short128Mask eq(VectorMask<Short> mask) {\n+            Objects.requireNonNull(mask);\n+            Short128Mask m = (Short128Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -641,0 +641,8 @@\n+        @Override\n+        @ForceInline\n+        public Short256Mask eq(VectorMask<Short> mask) {\n+            Objects.requireNonNull(mask);\n+            Short256Mask m = (Short256Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -673,0 +673,8 @@\n+        @Override\n+        @ForceInline\n+        public Short512Mask eq(VectorMask<Short> mask) {\n+            Objects.requireNonNull(mask);\n+            Short512Mask m = (Short512Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -617,0 +617,8 @@\n+        @Override\n+        @ForceInline\n+        public Short64Mask eq(VectorMask<Short> mask) {\n+            Objects.requireNonNull(mask);\n+            Short64Mask m = (Short64Mask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -611,0 +611,8 @@\n+        @Override\n+        @ForceInline\n+        public ShortMaxMask eq(VectorMask<Short> mask) {\n+            Objects.requireNonNull(mask);\n+            ShortMaxMask m = (ShortMaxMask)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -884,0 +884,8 @@\n+        @Override\n+        @ForceInline\n+        public $masktype$ eq(VectorMask<$Boxtype$> mask) {\n+            Objects.requireNonNull(mask);\n+            $masktype$ m = ($masktype$)mask;\n+            return xor(m.not());\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}