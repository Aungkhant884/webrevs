{"files":[{"patch":"@@ -34,3 +34,0 @@\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-import java.util.stream.Stream;\n@@ -310,21 +307,1 @@\n-        String callerName = caller.getName();\n-        String[] callerInfo = new String[] {callerName};\n-        StackWalker.getInstance().walk(new Function<Stream<StackWalker.StackFrame>, Object>() {\n-            \/\/ We use inner classes (instead of stream\/lambda) to avoid triggering\n-            \/\/ further invokedynamic resolution, which would cause infinite recursion.\n-            \/\/ It's OK to use + for string concat, because java.base is compiled without\n-            \/\/ the use of indy string concat.\n-            @Override\n-            public Object apply(Stream<StackWalker.StackFrame> s) {\n-                s.forEach(new Consumer<StackWalker.StackFrame>() {\n-                    @Override\n-                    public void accept(StackWalker.StackFrame f) {\n-                        if (!\"java.lang.invoke.MethodHandleNatives\".equals(f.getClassName()) && callerInfo[0] == callerName) {\n-                            callerInfo[0] = f.toStackTraceElement().toString();\n-                        }\n-                    }\n-                });\n-                return null;\n-            }\n-        });\n-        System.out.println(\"linkCallSite \"+callerInfo[0]+\" \"+\n+        System.out.println(\"linkCallSite \"+getCallerInfo(caller)+\" \"+\n@@ -345,0 +322,14 @@\n+    \/**\n+     * Return a human-readable description of the caller. Something like\n+     * \"java.base\/java.security.Security.<clinit>(Security.java:82)\"\n+     *\/\n+    private static String getCallerInfo(Class<?> caller) {\n+        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n+            if (e.getClassName().equals(caller.getName())) {\n+                return e.toString();\n+            }\n+        }\n+        \/\/ fallback if the caller is somehow missing from the stack.\n+        return caller.getName();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"}]}