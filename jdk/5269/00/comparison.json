{"files":[{"patch":"@@ -25,3 +25,4 @@\n- * @bug 8266510 8271315\n- * @summary  Verifies Nimbus JTree default tree cell renderer use selected text color\n- * @run main\/manual NimbusJTreeSelTextColor\n+ * @bug 8266510 8271315 8273043\n+ * @key headful\n+ * @summary  Verifies Nimbus JTree default tree cell renderer uses selected text color\n+ * @run main\/othervm -Dawt.useSystemAAFontSettings=off -Dsun.java2d.uiScale=1.0 NimbusJTreeSelTextColor\n@@ -29,2 +30,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+\n@@ -32,8 +32,6 @@\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.awt.GridBagConstraints;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import javax.swing.JButton;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n@@ -42,2 +40,0 @@\n-import javax.swing.JPanel;\n-import javax.swing.JTextArea;\n@@ -46,1 +42,0 @@\n-import javax.swing.tree.DefaultTreeCellRenderer;\n@@ -48,0 +43,1 @@\n+import javax.swing.tree.DefaultTreeCellRenderer;\n@@ -53,3 +49,0 @@\n-    private static DefaultTreeCellRenderer treeCellRenderer;\n-    private static volatile CountDownLatch countDownLatch;\n-    private static volatile boolean testResult;\n@@ -57,4 +50,4 @@\n-    private static final String INSTRUCTIONS = \"INSTRUCTIONS:\\n\\n\"\n-            + \"Verify selected text color is same as selected tree leaf icon color.\\n \"\n-            + \"If the color is same ie, white\\n\"\n-            + \"then press Pass otherwise press Fail.\";\n+    private static volatile Rectangle treeBounds;\n+    private static volatile int iconOffset;\n+    private static volatile Color foregroundColor;\n+    private static volatile Color backgroundColor;\n@@ -62,2 +55,1 @@\n-    public static void main(String args[]) throws Exception{\n-        countDownLatch = new CountDownLatch(1);\n+    private static final String FILENAME = \"image.png\";\n@@ -65,5 +57,17 @@\n-        SwingUtilities.invokeAndWait(NimbusJTreeSelTextColor::createUI);\n-        countDownLatch.await(5, TimeUnit.MINUTES);\n-\n-        if (!testResult) {\n-            throw new RuntimeException(\"Selected text color not same as selected tree leaf icon color!\");\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(NimbusJTreeSelTextColor::createUI);\n+\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(NimbusJTreeSelTextColor::getTreeBounds);\n+            treeBounds.height \/= 4; \/\/ height of one row\n+            treeBounds.x += iconOffset;\n+            treeBounds.width -= iconOffset;\n+            treeBounds.width -= 2; \/\/ crop selection border on the right\n+            BufferedImage image = robot.createScreenCapture(treeBounds);\n+            checkColors(image);\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n@@ -80,49 +84,2 @@\n-        JFrame mainFrame = new JFrame();\n-        GridBagLayout layout = new GridBagLayout();\n-        JPanel mainControlPanel = new JPanel(layout);\n-        JPanel resultButtonPanel = new JPanel(layout);\n-\n-        GridBagConstraints gbc = new GridBagConstraints();\n-\n-        gbc.gridx = 0;\n-        gbc.gridy = 0;\n-        gbc.insets = new Insets(5, 15, 5, 15);\n-        gbc.fill = GridBagConstraints.HORIZONTAL;\n-        mainControlPanel.add(createComponent(), gbc);\n-\n-        JTextArea instructionTextArea = new JTextArea();\n-        instructionTextArea.setText(INSTRUCTIONS);\n-        instructionTextArea.setEditable(false);\n-        instructionTextArea.setBackground(Color.white);\n-\n-        gbc.gridx = 0;\n-        gbc.gridy = 1;\n-        gbc.fill = GridBagConstraints.HORIZONTAL;\n-        mainControlPanel.add(instructionTextArea, gbc);\n-\n-        JButton passButton = new JButton(\"Pass\");\n-        passButton.setActionCommand(\"Pass\");\n-        passButton.addActionListener((ActionEvent e) -> {\n-            testResult = true;\n-            mainFrame.dispose();\n-            countDownLatch.countDown();\n-\n-        });\n-\n-        JButton failButton = new JButton(\"Fail\");\n-        failButton.setActionCommand(\"Fail\");\n-        failButton.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                mainFrame.dispose();\n-                countDownLatch.countDown();\n-            }\n-        });\n-\n-        gbc.gridx = 0;\n-        gbc.gridy = 0;\n-\n-        resultButtonPanel.add(passButton, gbc);\n-        gbc.gridx = 1;\n-        gbc.gridy = 0;\n-        resultButtonPanel.add(failButton, gbc);\n+        frame = new JFrame(\"Nimbus Tree selected color\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n@@ -130,3 +87,1 @@\n-        gbc.gridx = 0;\n-        gbc.gridy = 2;\n-        mainControlPanel.add(resultButtonPanel, gbc);\n+        frame.getContentPane().add(createTree());\n@@ -134,4 +89,4 @@\n-        mainFrame.add(mainControlPanel);\n-        mainFrame.pack();\n-\n-        mainFrame.addWindowListener(new WindowAdapter() {\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n@@ -139,4 +94,15 @@\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                mainFrame.dispose();\n-                countDownLatch.countDown();\n+    private static void checkColors(final BufferedImage image) throws IOException {\n+        final int y = treeBounds.height \/ 2;\n+        final int foreground = foregroundColor.getRGB();\n+        final int background = backgroundColor.getRGB();\n+\n+        for (int x = 0; x < treeBounds.width; x++) {\n+            int rgb = image.getRGB(x, y);\n+            if (rgb != foreground && rgb != background) {\n+                save(image);\n+                throw new RuntimeException(\n+                        \"Unexpected color found: \" + Integer.toHexString(rgb)\n+                        + \" at (\" + x + \", \" + y + \");\"\n+                        + \" foreground: \" + Integer.toHexString(foreground) + \";\"\n+                        + \" background: \" + Integer.toHexString(background)\n+                        + \" - check \" + FILENAME);\n@@ -144,3 +110,6 @@\n-        });\n-        mainFrame.setLocationRelativeTo(null);\n-        mainFrame.setVisible(true);\n+        }\n+    }\n+\n+    private static void getTreeBounds() {\n+        treeBounds = new Rectangle(tree.getLocationOnScreen(),\n+                                   tree.getSize());\n@@ -149,1 +118,1 @@\n-    private static JComponent createComponent() {\n+    private static JComponent createTree() {\n@@ -152,3 +121,5 @@\n-        treeCellRenderer =  new DefaultTreeCellRenderer();\n-        tree.setRootVisible(true);\n-        tree.setShowsRootHandles(true);\n+        DefaultTreeCellRenderer cellRenderer = new DefaultTreeCellRenderer();\n+        iconOffset = cellRenderer.getOpenIcon().getIconWidth()\n+                     + cellRenderer.getIconTextGap();\n+        foregroundColor = (Color) UIManager.get(\"Tree.selectionForeground\");\n+        backgroundColor = (Color) UIManager.get(\"Tree.selectionBackground\");\n@@ -156,2 +127,4 @@\n-        tree.setCellRenderer(treeCellRenderer);\n-        tree.setSelectionRow(1);\n+        tree.setRootVisible(true);\n+        tree.setShowsRootHandles(false);\n+        tree.setCellRenderer(cellRenderer);\n+        tree.setSelectionRow(0);\n@@ -160,1 +133,0 @@\n-}\n@@ -162,0 +134,5 @@\n+    private static void save(final BufferedImage img) throws IOException {\n+        ImageIO.write(img, \"png\", new File(FILENAME));\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/nimbus\/NimbusJTreeSelTextColor.java","additions":77,"deletions":100,"binary":false,"changes":177,"status":"modified"}]}