{"files":[{"patch":"@@ -34,0 +34,10 @@\n+\/\/ The StackWatermark state is a tuple comprising the last epoch in which\n+\/\/ the watermark has been processed, and a boolean denoting whether the whole\n+\/\/ processing of the lazy snapshot has been processed or not. It is written\n+\/\/ in a way that can be used outside of locks, so that fast path checks can\n+\/\/ be performed without the need for any locking. The boolean can only be\n+\/\/ trusted if the epoch of the state is the same as the epoch_id() of the\n+\/\/ watermark. Incrementing the epoch_id() will implicitly initiate a new lazy\n+\/\/ stack snapshot, and trigger processing on it as needed, due to the cached\n+\/\/ epoch of the state being outdated. When the snapshot is_done for the current\n+\/\/ epoch_id(), there is no need to do anything further.\n@@ -49,0 +59,24 @@\n+\/\/ The StackWatermark allows lazy incremental concurrent processing of a\n+\/\/ snapshot of a stack. The lazy and incremental nature is implemented by\n+\/\/ marking a frame (the watermark) from which returns (or other forms of\n+\/\/ unwinding) will take a slow path to perform additional processing\n+\/\/ required when exposing more frames that were part of the snapshot to\n+\/\/ the system. The watermark pointer always denotes the SP of the watermark.\n+\/\/ However, active frames can grow and shrink arbitrarily compared to the\n+\/\/ snapshot view that is being processed, due to things like c2i adapters,\n+\/\/ and various register saving techniques to get into the runtime. Therefore,\n+\/\/ in order to cope with the frames growing and shrinking, comparisons\n+\/\/ against the watermark are performed with the frame pointer of a given\n+\/\/ frame against the watermark (denoting the SP).\n+\/\/\n+\/\/  ----------\n+\/\/ |          |\n+\/\/ |  caller  |\n+\/\/ |          |\n+\/\/  ----------\n+\/\/ |          | <-- frame fp  (always above the watermark of the same frame,\n+\/\/ |  callee  |                regardless of frame resizing)\n+\/\/ |          |\n+\/\/  ----------  <-- watermark (callee SP from the snapshot, SP at the\n+\/\/                             point of unwinding, might be above or below\n+\/\/                             due to frame resizing)\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -75,1 +75,2 @@\n-  \/\/ The lowest watermark among the watermarks in the set\n+  \/\/ The lowest watermark among the watermarks in the set (the first encountered\n+  \/\/ watermark in the set as you unwind frames)\n","filename":"src\/hotspot\/share\/runtime\/stackWatermarkSet.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}