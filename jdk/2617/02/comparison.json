{"files":[{"patch":"@@ -824,2 +824,0 @@\n-jdk\/dynalink\/TypeConverterFactoryMemoryLeakTest.java            8261483 generic-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+ * @run main\/othervm -XX:+UseG1GC TypeConverterFactoryMemoryLeakTest\n+ * @run main\/othervm -XX:+UseSerialGC TypeConverterFactoryMemoryLeakTest\n+ * @run main\/othervm -XX:+UseParallelGC TypeConverterFactoryMemoryLeakTest\n+ * @run main\/othervm -XX:+UseZGC TypeConverterFactoryMemoryLeakTest\n+ * @run main\/othervm -XX:+UseShenandoahGC TypeConverterFactoryMemoryLeakTest\n@@ -37,1 +42,0 @@\n-import java.time.Duration;\n@@ -55,2 +59,3 @@\n-    \/\/ Usually succeeds in less than a second, but give it time\n-    private static final Duration MAX_DURATION = Duration.ofSeconds(15);\n+    \/\/ With explicit GC calls succeeds in 11-12 iterations depending on GC used.\n+    \/\/ 1000 should be a safe upper limit after which we can consider it failed.\n+    private static final int MAX_ITERATIONS = 1000;\n@@ -77,3 +82,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -82,0 +85,1 @@\n+            System.gc();\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryMemoryLeakTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+ * @run main\/othervm -XX:+UseG1GC TypeConverterFactoryRetentionTests\n+ * @run main\/othervm -XX:+UseSerialGC TypeConverterFactoryRetentionTests\n+ * @run main\/othervm -XX:+UseParallelGC TypeConverterFactoryRetentionTests\n+ * @run main\/othervm -XX:+UseZGC TypeConverterFactoryRetentionTests\n+ * @run main\/othervm -XX:+UseShenandoahGC TypeConverterFactoryRetentionTests\n@@ -36,1 +41,0 @@\n-import java.time.Duration;\n@@ -53,2 +57,3 @@\n-    \/\/ Usually succeeds in less than a second, but give it time\n-    private static final Duration MAX_DURATION = Duration.ofSeconds(15);\n+    \/\/ With explicit GC calls succeeds in 1-2 iterations depending on GC used.\n+    \/\/ 1000 should be a safe upper limit after which we can consider it failed.\n+    private static final int MAX_ITERATIONS = 1000;\n@@ -137,3 +142,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -146,0 +149,1 @@\n+            System.gc();\n@@ -168,3 +172,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -181,0 +183,1 @@\n+            System.gc();\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryRetentionTests.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}