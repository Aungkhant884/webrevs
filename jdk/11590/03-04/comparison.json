{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Random;\n@@ -95,1 +96,1 @@\n-            currentKeyID = this.hashCode();\n+            currentKeyID = new Random(System.nanoTime()).nextInt();\n@@ -97,1 +98,1 @@\n-            keyHashMap = null;\n+            keyHashMap = Map.of();\n@@ -207,1 +208,1 @@\n-    SessionTicketExtension.StatelessKey getKey() {\n+    SessionTicketExtension.StatelessKey getKey(HandshakeContext hc) {\n@@ -220,1 +221,1 @@\n-            ssk = new SessionTicketExtension.StatelessKey(newID);\n+            ssk = new SessionTicketExtension.StatelessKey(hc, newID);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionContextImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        StatelessKey(int num) {\n+        StatelessKey(HandshakeContext hc, int num) {\n@@ -123,1 +123,1 @@\n-                kg.init(KEYLEN);\n+                kg.init(KEYLEN, hc.sslContext.getSecureRandom());\n@@ -163,1 +163,1 @@\n-            return serverCache.getKey();\n+            return serverCache.getKey(hc);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}