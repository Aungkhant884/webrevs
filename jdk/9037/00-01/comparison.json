{"files":[{"patch":"@@ -2474,0 +2474,1 @@\n+    case Op_VectorMaskGen:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5380,1 +5380,1 @@\n-instruct vmaskAll_immI(pRegGov dst, immI src) %{\n+instruct vmaskAll_immI(pRegGov dst, immI src, rFlagsReg cr) %{\n@@ -5383,0 +5383,1 @@\n+  effect(KILL cr);\n@@ -5391,1 +5392,0 @@\n-      assert(Matcher::vector_length_in_bytes(this) == MaxVectorSize, \"invalid vector length\");\n@@ -5393,1 +5393,1 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_gen_mask_imm(as_PRegister($dst$$reg), bt, Matcher::vector_length(this));\n@@ -5396,1 +5396,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n@@ -5416,1 +5416,1 @@\n-instruct vmaskAll_immL(pRegGov dst, immL src) %{\n+instruct vmaskAll_immL(pRegGov dst, immL src, rFlagsReg cr) %{\n@@ -5419,0 +5419,1 @@\n+  effect(KILL cr);\n@@ -5427,1 +5428,0 @@\n-      assert(Matcher::vector_length_in_bytes(this) == MaxVectorSize, \"invalid vector length\");\n@@ -5429,1 +5429,1 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_gen_mask_imm(as_PRegister($dst$$reg), bt, Matcher::vector_length(this));\n@@ -5432,1 +5432,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3045,1 +3045,1 @@\n-instruct vmaskAll_imm$1(pRegGov dst, imm$1 src) %{\n+instruct vmaskAll_imm$1(pRegGov dst, imm$1 src, rFlagsReg cr) %{\n@@ -3048,0 +3048,1 @@\n+  effect(KILL cr);\n@@ -3056,1 +3057,0 @@\n-      assert(Matcher::vector_length_in_bytes(this) == MaxVectorSize, \"invalid vector length\");\n@@ -3058,1 +3058,1 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_gen_mask_imm(as_PRegister($dst$$reg), bt, Matcher::vector_length(this));\n@@ -3061,1 +3061,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -834,1 +834,2 @@\n-      !Matcher::match_rule_supported_vector_masked(vopc, vlen, bt)) {\n+      !Matcher::match_rule_supported_vector_masked(vopc, vlen, bt) ||\n+      !Matcher::match_rule_supported_vector(Op_VectorMaskGen, vlen, bt)) {\n@@ -951,1 +952,1 @@\n-  const TypeVect* vt = as_LoadVector()->vect_type();\n+  const TypeVect* vt = vect_type();\n@@ -965,1 +966,1 @@\n-  const TypeVect* vt = as_StoreVector()->vect_type();\n+  const TypeVect* vt = vect_type();\n@@ -988,1 +989,1 @@\n-  return LoadNode::Ideal(phase, can_reshape);\n+  return LoadVectorNode::Ideal(phase, can_reshape);\n@@ -1008,1 +1009,1 @@\n-  return StoreNode::Ideal(phase, can_reshape);\n+  return StoreVectorNode::Ideal(phase, can_reshape);\n@@ -1818,12 +1819,0 @@\n-Node* MaskAllNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  \/\/ Transform (MaskAll m1 (VectorMaskGen len)) ==> (VectorMaskGen len)\n-  \/\/ if the vector length in bytes is lower than the MaxVectorSize.\n-  if (is_con_M1(in(1)) && length_in_bytes() < MaxVectorSize) {\n-    uint vlen = vect_type()->length();\n-    BasicType bt = vect_type()->element_basic_type();\n-    Node* length = phase->transform(new ConvI2LNode(phase->makecon(TypeInt::make(vlen))));\n-    return VectorMaskGenNode::make(length, bt, vlen);\n-  }\n-  return VectorNode::Ideal(phase, can_reshape);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1075,1 +1075,0 @@\n-  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}