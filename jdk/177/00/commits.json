[{"commit":{"message":"Remove test that only accidentally worked: G1 never sent the AllocationRequiringGC\nevent for GCs caused by going over the IHOP threshold for humongous allocations.\n\nThat test previously only worked because G1 could not reclaim the humongous objects\nfast enough so crossing the IHOP threshold causes a full concurrent mark. Allocations\nduring that concurrent mark do not cause a GC that can reclaim these objects, so\nultimately some young GC that sends the AllocationRequiringGC event will be sent.\n\nWith concurrent undo this is not guaranteed any more, i.e. only in environments where\nconcurrent undo is slow (and we'll improve it soon) this test works.\n\nThe test is too timing dependent, so removing it."},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithG1.java"}],"sha":"6ea4a1f529c582a0b6d6d2c70976c4b463b495d5"},{"commit":{"message":"Fixed test"},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java"}],"sha":"598bcbbde8c89333427c7a55dce5dfe9bae27e80"},{"commit":{"message":"Initial import"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1HeterogeneousHeapPolicy.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1HeterogeneousHeapPolicy.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java"}],"sha":"d273318226845e5f9ccd972b30c5e3a0e1313cae"}]