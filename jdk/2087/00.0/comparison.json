{"files":[{"patch":"@@ -1834,7 +1834,14 @@\n-  if (_for_post_loop_igvn.length() == 0) {\n-    return; \/\/ no work to do\n-  }\n-  while (_for_post_loop_igvn.length() > 0) {\n-    Node* n = _for_post_loop_igvn.pop();\n-    n->remove_flag(Node::NodeFlags::Flag_for_post_loop_opts_igvn);\n-    igvn._worklist.push(n);\n+  \/\/ Verify that all previous optimizations produced a valid graph\n+  \/\/ at least to this point, even if no loop optimizations were done.\n+  PhaseIdealLoop::verify(igvn);\n+\n+  C->set_post_loop_opts_phase(); \/\/ no more loop opts allowed\n+\n+  if (_for_post_loop_igvn.length() > 0) {\n+    while (_for_post_loop_igvn.length() > 0) {\n+      Node* n = _for_post_loop_igvn.pop();\n+      n->remove_flag(Node::NodeFlags::Flag_for_post_loop_opts_igvn);\n+      igvn._worklist.push(n);\n+    }\n+    igvn.optimize();\n+    assert(_for_post_loop_igvn.length() == 0, \"no more delayed nodes allowed\");\n@@ -1842,2 +1849,0 @@\n-  igvn.optimize();\n-  assert(_for_post_loop_igvn.length() == 0, \"no more delayed nodes allowed\");\n@@ -2252,1 +2257,0 @@\n-      TracePhase tp(\"idealLoopVerify\", &timers[_t_idealLoopVerify]);\n@@ -2287,2 +2291,1 @@\n-  \/\/ Ensure that major progress is now clear\n-  C->clear_major_progress();\n+  C->clear_major_progress(); \/\/ ensure that major progress is now clear\n@@ -2290,6 +2293,1 @@\n-  {\n-    \/\/ Verify that all previous optimizations produced a valid graph\n-    \/\/ at least to this point, even if no loop optimizations were done.\n-    TracePhase tp(\"idealLoopVerify\", &timers[_t_idealLoopVerify]);\n-    PhaseIdealLoop::verify(igvn);\n-  }\n+  process_for_post_loop_opts_igvn(igvn);\n@@ -2320,4 +2318,0 @@\n-  C->set_post_loop_opts_phase(); \/\/ no more loop opts allowed\n-\n-  process_for_post_loop_opts_igvn(igvn);\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -693,2 +693,3 @@\n-  bool     post_loop_opts_phase() { return _post_loop_opts_phase; }\n-  void set_post_loop_opts_phase() { _post_loop_opts_phase = true; }\n+  bool       post_loop_opts_phase() { return _post_loop_opts_phase;  }\n+  void   set_post_loop_opts_phase() { _post_loop_opts_phase = true;  }\n+  void reset_post_loop_opts_phase() { _post_loop_opts_phase = false; }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,0 +236,8 @@\n+\n+    final protected void onFlush() {\n+       Runnable r = getFlushOperation();\n+       if (r != null) {\n+           r.run();\n+       }\n+    }\n+\n@@ -293,1 +301,1 @@\n-    protected final void emitMetadataEvent(ChunkParser parser) {\n+    protected final void onMetadata(ChunkParser parser) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/AbstractEventStream.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,2 +67,0 @@\n-compiler\/loopstripmining\/BackedgeNodeWithOutOfLoopControl.java 8255120 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}