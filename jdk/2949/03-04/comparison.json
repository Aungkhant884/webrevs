{"files":[{"patch":"@@ -408,20 +408,0 @@\n-            } else if (keySpec.isAssignableFrom(RSA_PRIVCRT_KEYSPEC_CLS) && key instanceof RSAPrivateCrtKey) {\n-                RSAPrivateCrtKey crtKey = (RSAPrivateCrtKey)key;\n-                return keySpec.cast(new RSAPrivateCrtKeySpec(\n-                    crtKey.getModulus(),\n-                    crtKey.getPublicExponent(),\n-                    crtKey.getPrivateExponent(),\n-                    crtKey.getPrimeP(),\n-                    crtKey.getPrimeQ(),\n-                    crtKey.getPrimeExponentP(),\n-                    crtKey.getPrimeExponentQ(),\n-                    crtKey.getCrtCoefficient(),\n-                    crtKey.getParams()\n-                ));\n-            } else if (keySpec.isAssignableFrom(RSA_PRIV_KEYSPEC_CLS)) {\n-                RSAPrivateKey rsaKey = (RSAPrivateKey)key;\n-                return keySpec.cast(new RSAPrivateKeySpec(\n-                    rsaKey.getModulus(),\n-                    rsaKey.getPrivateExponent(),\n-                    rsaKey.getParams()\n-                ));\n@@ -429,2 +409,28 @@\n-                throw new InvalidKeySpecException\n-                        (\"RSAPrivateCrtKeySpec can only be used with CRT keys\");\n+                \/\/ All supported keyspecs (other than PKCS8_KEYSPEC_CLS) descend from RSA_PRIVCRT_KEYSPEC_CLS\n+                if (key instanceof RSAPrivateCrtKey) {\n+                    RSAPrivateCrtKey crtKey = (RSAPrivateCrtKey)key;\n+                    return keySpec.cast(new RSAPrivateCrtKeySpec(\n+                        crtKey.getModulus(),\n+                        crtKey.getPublicExponent(),\n+                        crtKey.getPrivateExponent(),\n+                        crtKey.getPrimeP(),\n+                        crtKey.getPrimeQ(),\n+                        crtKey.getPrimeExponentP(),\n+                        crtKey.getPrimeExponentQ(),\n+                        crtKey.getCrtCoefficient(),\n+                        crtKey.getParams()\n+                    ));\n+                } else { \/\/ RSAPrivateKey (non-CRT)\n+                    if (!keySpec.isAssignableFrom(RSA_PRIV_KEYSPEC_CLS)) {\n+                        throw new InvalidKeySpecException\n+                            (\"RSAPrivateCrtKeySpec can only be used with CRT keys\");\n+                    }\n+\n+                    \/\/ fall through to RSAPrivateKey (non-CRT)\n+                    RSAPrivateKey rsaKey = (RSAPrivateKey) key;\n+                    return keySpec.cast(new RSAPrivateKeySpec(\n+                        rsaKey.getModulus(),\n+                        rsaKey.getPrivateExponent(),\n+                        rsaKey.getParams()\n+                    ));\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -280,22 +280,16 @@\n-        \/\/ If a PKCS11Exception is thrown, then that implies that we cannot retrieve some attributes\n-        \/\/ First, if we can retrieve the CRT parameters, we do so for better efficiency\n-        try {\n-            if (keySpec.isAssignableFrom(RSAPrivateCrtKeySpec.class)) {\n-                session[0] = token.getObjSession();\n-                CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n-                    new CK_ATTRIBUTE(CKA_MODULUS),\n-                    new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                    new CK_ATTRIBUTE(CKA_PRIME_1),\n-                    new CK_ATTRIBUTE(CKA_PRIME_2),\n-                    new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                    new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                    new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-                };\n-                long keyID = key.getKeyID();\n-                try {\n-                    token.p11.C_GetAttributeValue(session[0].id(), keyID, attributes);\n-                } finally {\n-                    key.releaseKeyID();\n-                }\n-\n+        \/\/ must be either RSAPrivateKeySpec or RSAPrivateCrtKeySpec\n+        if (keySpec.isAssignableFrom(RSAPrivateCrtKeySpec.class)) {\n+            session[0] = token.getObjSession();\n+            CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n+                new CK_ATTRIBUTE(CKA_MODULUS),\n+                new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n+                new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n+                new CK_ATTRIBUTE(CKA_PRIME_1),\n+                new CK_ATTRIBUTE(CKA_PRIME_2),\n+                new CK_ATTRIBUTE(CKA_EXPONENT_1),\n+                new CK_ATTRIBUTE(CKA_EXPONENT_2),\n+                new CK_ATTRIBUTE(CKA_COEFFICIENT),\n+            };\n+            long keyID = key.getKeyID();\n+            try {\n+                token.p11.C_GetAttributeValue(session[0].id(), keyID, attributes);\n@@ -313,0 +307,8 @@\n+            } catch (final PKCS11Exception ex) {\n+                \/\/ bubble this up if RSAPrivateCrtKeySpec is specified\n+                \/\/ otherwise fall through to RSAPrivateKeySpec\n+                if (!keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n+                    throw ex;\n+                }\n+            }  finally {\n+                key.releaseKeyID();\n@@ -314,6 +316,0 @@\n-        } catch (final PKCS11Exception ex) {\n-            \/\/ Fall through to RSAPrivateKeySpec if possible, else, bubble this exception up\n-            if (!keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n-                throw ex;\n-            }\n-        }\n@@ -321,4 +317,1 @@\n-        \/\/ Fall back to RSAPrivateKeySpec if this was requested and all the available attributes\n-        if (keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n-            session[0] = token.getObjSession();\n-            CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n+            attributes = new CK_ATTRIBUTE[] {\n@@ -328,1 +321,1 @@\n-            long keyID = key.getKeyID();\n+            keyID = key.getKeyID();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSAKeyFactory.java","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"}]}