{"files":[{"patch":"@@ -280,17 +280,38 @@\n-        if (keySpec.isAssignableFrom(RSAPrivateCrtKeySpec.class)) {\n-            session[0] = token.getObjSession();\n-            CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n-                new CK_ATTRIBUTE(CKA_MODULUS),\n-                new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                new CK_ATTRIBUTE(CKA_PRIME_1),\n-                new CK_ATTRIBUTE(CKA_PRIME_2),\n-                new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-            };\n-            long keyID = key.getKeyID();\n-            try {\n-                token.p11.C_GetAttributeValue(session[0].id(), keyID, attributes);\n-            } finally {\n-                key.releaseKeyID();\n+        \/\/ If a PKCS11Exception is thrown, then that implies that we cannot retrieve some attributes\n+        \/\/ First, if we can retrieve the CRT parameters, we do so for better efficiency\n+        try {\n+            if (keySpec.isAssignableFrom(RSAPrivateCrtKeySpec.class)) {\n+                session[0] = token.getObjSession();\n+                CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n+                    new CK_ATTRIBUTE(CKA_MODULUS),\n+                    new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n+                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n+                    new CK_ATTRIBUTE(CKA_PRIME_1),\n+                    new CK_ATTRIBUTE(CKA_PRIME_2),\n+                    new CK_ATTRIBUTE(CKA_EXPONENT_1),\n+                    new CK_ATTRIBUTE(CKA_EXPONENT_2),\n+                    new CK_ATTRIBUTE(CKA_COEFFICIENT),\n+                };\n+                long keyID = key.getKeyID();\n+                try {\n+                    token.p11.C_GetAttributeValue(session[0].id(), keyID, attributes);\n+                } finally {\n+                    key.releaseKeyID();\n+                }\n+\n+                KeySpec spec = new RSAPrivateCrtKeySpec(\n+                    attributes[0].getBigInteger(),\n+                    attributes[1].getBigInteger(),\n+                    attributes[2].getBigInteger(),\n+                    attributes[3].getBigInteger(),\n+                    attributes[4].getBigInteger(),\n+                    attributes[5].getBigInteger(),\n+                    attributes[6].getBigInteger(),\n+                    attributes[7].getBigInteger()\n+                );\n+                return keySpec.cast(spec);\n+            }\n+        } catch (final PKCS11Exception ex) {\n+            \/\/ Fall through to RSAPrivateKeySpec if possible, else, bubble this exception up\n+            if (!keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n+                throw ex;\n@@ -298,0 +319,1 @@\n+        }\n@@ -299,12 +321,2 @@\n-            KeySpec spec = new RSAPrivateCrtKeySpec(\n-                attributes[0].getBigInteger(),\n-                attributes[1].getBigInteger(),\n-                attributes[2].getBigInteger(),\n-                attributes[3].getBigInteger(),\n-                attributes[4].getBigInteger(),\n-                attributes[5].getBigInteger(),\n-                attributes[6].getBigInteger(),\n-                attributes[7].getBigInteger()\n-            );\n-            return keySpec.cast(spec);\n-        } else if (keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n+        \/\/ Fall back to RSAPrivateKeySpec if this was requested and all the available attributes\n+        if (keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSAKeyFactory.java","additions":41,"deletions":29,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\");\n+        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n@@ -78,1 +78,1 @@\n-        \/\/ === Case 1: private key is RSAPrivateCrtKey, expected spec is RSAPrivateKeySpec\n+        \/\/ === Case 1: private key is RSAPrivateCrtKey, keySpec is RSAPrivateKeySpec\n@@ -87,1 +87,1 @@\n-        \/\/ === Case 2: private key is RSAPrivateCrtKey, expected spec is RSAPrivateCrtKeySpec\n+        \/\/ === Case 2: private key is RSAPrivateCrtKey, keySpec is RSAPrivateCrtKeySpec\n@@ -94,1 +94,1 @@\n-        \/\/ === Case 3: private key is RSAPrivateKey, expected spec is RSAPrivateKeySpec\n+        \/\/ === Case 3: private key is RSAPrivateKey, keySpec is RSAPrivateKeySpec\n@@ -102,0 +102,3 @@\n+        if (!(notCrtSpec instanceof RSAPrivateKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateKeySpec\");\n+        }\n@@ -103,1 +106,1 @@\n-        \/\/ === Case 4: private key is RSAPrivateKey, expected spec is RSAPrivateCrtKeySpec\n+        \/\/ === Case 4: private key is RSAPrivateKey, keySpec is RSAPrivateCrtKeySpec\n","filename":"test\/jdk\/java\/security\/KeyFactory\/KeyFactoryGetKeySpecForInvalidSpec.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.math.BigInteger;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.interfaces.RSAPrivateCrtKey;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.*;\n+\n+\/**\n+ * @test\n+ * @bug 8263404\n+ * @summary RsaPrivateKeySpec is always recognized as RSAPrivateCrtKeySpec in RSAKeyFactory.engineGetKeySpec\n+ * @author Greg Rubin, Ziyi Luo\n+ * @library \/test\/lib ..\n+ * @run main\/othervm TestP11KeyFactoryGetRSAKeySpec\n+ * @run main\/othervm TestP11KeyFactoryGetRSAKeySpec sm rsakeys.ks.policy\n+ * @modules jdk.crypto.cryptoki\n+ *\/\n+\n+public class TestP11KeyFactoryGetRSAKeySpec extends PKCS11Test {\n+    public static void main(String[] args) throws Exception {\n+        main(new TestP11KeyFactoryGetRSAKeySpec(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\", p);\n+        kg.initialize(2048);\n+        KeyPair pair = kg.generateKeyPair();\n+\n+        KeyFactory factory = KeyFactory.getInstance(\"RSA\", p);\n+\n+        \/\/ === Case 1: private key is RSAPrivateCrtKey, keySpec is RSAPrivateKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n+        \/\/ Since RSAPrivateCrtKeySpec inherits from RSAPrivateKeySpec, we'd expect this next line to return an instance of RSAPrivateKeySpec\n+        \/\/ (because the private key has CRT parts).\n+        KeySpec spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+\n+        \/\/ === Case 2: private key is RSAPrivateCrtKey, keySpec is RSAPrivateCrtKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n+        spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateCrtKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestP11KeyFactoryGetRSAKeySpec.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}