{"files":[{"patch":"@@ -409,0 +409,1 @@\n+                \/\/ All supported keyspecs (other than PKCS8_KEYSPEC_CLS) descend from RSA_PRIVCRT_KEYSPEC_CLS\n@@ -422,3 +423,13 @@\n-                } else {\n-                    throw new InvalidKeySpecException\n-                    (\"RSAPrivateCrtKeySpec can only be used with CRT keys\");\n+                } else { \/\/ RSAPrivateKey (non-CRT)\n+                    if (!keySpec.isAssignableFrom(RSA_PRIV_KEYSPEC_CLS)) {\n+                        throw new InvalidKeySpecException\n+                            (\"RSAPrivateCrtKeySpec can only be used with CRT keys\");\n+                    }\n+\n+                    \/\/ fall through to RSAPrivateKey (non-CRT)\n+                    RSAPrivateKey rsaKey = (RSAPrivateKey) key;\n+                    return keySpec.cast(new RSAPrivateKeySpec(\n+                        rsaKey.getModulus(),\n+                        rsaKey.getPrivateExponent(),\n+                        rsaKey.getParams()\n+                    ));\n@@ -426,7 +437,0 @@\n-            } else if (keySpec.isAssignableFrom(RSA_PRIV_KEYSPEC_CLS)) {\n-                RSAPrivateKey rsaKey = (RSAPrivateKey)key;\n-                return keySpec.cast(new RSAPrivateKeySpec(\n-                    rsaKey.getModulus(),\n-                    rsaKey.getPrivateExponent(),\n-                    rsaKey.getParams()\n-                ));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -280,0 +280,1 @@\n+        \/\/ must be either RSAPrivateKeySpec or RSAPrivateCrtKeySpec\n@@ -295,1 +296,18 @@\n-            } finally {\n+                KeySpec spec = new RSAPrivateCrtKeySpec(\n+                    attributes[0].getBigInteger(),\n+                    attributes[1].getBigInteger(),\n+                    attributes[2].getBigInteger(),\n+                    attributes[3].getBigInteger(),\n+                    attributes[4].getBigInteger(),\n+                    attributes[5].getBigInteger(),\n+                    attributes[6].getBigInteger(),\n+                    attributes[7].getBigInteger()\n+                );\n+                return keySpec.cast(spec);\n+            } catch (final PKCS11Exception ex) {\n+                \/\/ bubble this up if RSAPrivateCrtKeySpec is specified\n+                \/\/ otherwise fall through to RSAPrivateKeySpec\n+                if (!keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n+                    throw ex;\n+                }\n+            }  finally {\n@@ -299,14 +317,1 @@\n-            KeySpec spec = new RSAPrivateCrtKeySpec(\n-                attributes[0].getBigInteger(),\n-                attributes[1].getBigInteger(),\n-                attributes[2].getBigInteger(),\n-                attributes[3].getBigInteger(),\n-                attributes[4].getBigInteger(),\n-                attributes[5].getBigInteger(),\n-                attributes[6].getBigInteger(),\n-                attributes[7].getBigInteger()\n-            );\n-            return keySpec.cast(spec);\n-        } else if (keySpec.isAssignableFrom(RSAPrivateKeySpec.class)) {\n-            session[0] = token.getObjSession();\n-            CK_ATTRIBUTE[] attributes = new CK_ATTRIBUTE[] {\n+            attributes = new CK_ATTRIBUTE[] {\n@@ -316,1 +321,1 @@\n-            long keyID = key.getKeyID();\n+            keyID = key.getKeyID();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSAKeyFactory.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8254717\n+ * @bug 8254717 8263404\n@@ -31,0 +31,1 @@\n+import java.math.BigInteger;\n@@ -34,0 +35,2 @@\n+import java.security.interfaces.RSAPrivateCrtKey;\n+import java.security.interfaces.RSAPrivateKey;\n@@ -37,0 +40,31 @@\n+\n+    \/\/ Test for 8263404: This method generates RSAPrivateKey (without Crt info) from a RSAPrivateCrtKey\n+    public static RSAPrivateKey privateCrtToPrivate(RSAPrivateCrtKey crtKey) {\n+        return new RSAPrivateKey() {\n+            @Override\n+            public BigInteger getPrivateExponent() {\n+                return crtKey.getPrivateExponent();\n+            }\n+\n+            @Override\n+            public String getAlgorithm() {\n+                return crtKey.getAlgorithm();\n+            }\n+\n+            @Override\n+            public String getFormat() {\n+                return crtKey.getFormat();\n+            }\n+\n+            @Override\n+            public byte[] getEncoded() {\n+                return crtKey.getEncoded();\n+            }\n+\n+            @Override\n+            public BigInteger getModulus() {\n+                return crtKey.getModulus();\n+            }\n+        };\n+    }\n+\n@@ -38,1 +72,1 @@\n-        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\");\n+        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n@@ -44,0 +78,2 @@\n+        \/\/ === Case 1: private key is RSAPrivateCrtKey, keySpec is RSAPrivateKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n@@ -51,0 +87,28 @@\n+        \/\/ === Case 2: private key is RSAPrivateCrtKey, keySpec is RSAPrivateCrtKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n+        spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateCrtKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+\n+        \/\/ === Case 3: private key is RSAPrivateKey, keySpec is RSAPrivateKeySpec\n+        \/\/ === Expected: return RSAPrivateKeySpec not RSAPrivateCrtKeySpec\n+        RSAPrivateKey notCrtKey = privateCrtToPrivate((RSAPrivateCrtKey)pair.getPrivate());\n+        \/\/ InvalidKeySpecException should not be thrown\n+        KeySpec notCrtSpec = factory.getKeySpec(notCrtKey, RSAPrivateKeySpec.class);\n+        if (notCrtSpec instanceof RSAPrivateCrtKeySpec) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateKeySpec not RSAPrivateCrtKeySpec\");\n+        }\n+        if (!(notCrtSpec instanceof RSAPrivateKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateKeySpec\");\n+        }\n+\n+        \/\/ === Case 4: private key is RSAPrivateKey, keySpec is RSAPrivateCrtKeySpec\n+        \/\/ === Expected: throw InvalidKeySpecException\n+        try {\n+            factory.getKeySpec(notCrtKey, RSAPrivateCrtKeySpec.class);\n+            throw new Exception(\"InvalidKeySpecException is expected but not thrown\");\n+        } catch (InvalidKeySpecException e) {\n+            \/\/ continue;\n+        }\n+\n","filename":"test\/jdk\/java\/security\/KeyFactory\/KeyFactoryGetKeySpecForInvalidSpec.java","additions":66,"deletions":2,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.math.BigInteger;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.interfaces.RSAPrivateCrtKey;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.*;\n+\n+\/**\n+ * @test\n+ * @bug 8263404\n+ * @summary RsaPrivateKeySpec is always recognized as RSAPrivateCrtKeySpec in RSAKeyFactory.engineGetKeySpec\n+ * @author Greg Rubin, Ziyi Luo\n+ * @library \/test\/lib ..\n+ * @run main\/othervm TestP11KeyFactoryGetRSAKeySpec\n+ * @run main\/othervm TestP11KeyFactoryGetRSAKeySpec sm rsakeys.ks.policy\n+ * @modules jdk.crypto.cryptoki\n+ *\/\n+\n+public class TestP11KeyFactoryGetRSAKeySpec extends PKCS11Test {\n+    public static void main(String[] args) throws Exception {\n+        main(new TestP11KeyFactoryGetRSAKeySpec(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        KeyPairGenerator kg = KeyPairGenerator.getInstance(\"RSA\", p);\n+        kg.initialize(2048);\n+        KeyPair pair = kg.generateKeyPair();\n+\n+        KeyFactory factory = KeyFactory.getInstance(\"RSA\", p);\n+\n+        \/\/ === Case 1: private key is RSAPrivateCrtKey, keySpec is RSAPrivateKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n+        \/\/ Since RSAPrivateCrtKeySpec inherits from RSAPrivateKeySpec, we'd expect this next line to return an instance of RSAPrivateKeySpec\n+        \/\/ (because the private key has CRT parts).\n+        KeySpec spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+\n+        \/\/ === Case 2: private key is RSAPrivateCrtKey, keySpec is RSAPrivateCrtKeySpec\n+        \/\/ === Expected: return RSAPrivateCrtKeySpec\n+        spec = factory.getKeySpec(pair.getPrivate(), RSAPrivateCrtKeySpec.class);\n+        if (!(spec instanceof RSAPrivateCrtKeySpec)) {\n+            throw new Exception(\"Spec should be an instance of RSAPrivateCrtKeySpec\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestP11KeyFactoryGetRSAKeySpec.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}