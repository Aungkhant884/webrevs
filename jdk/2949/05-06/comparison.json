{"files":[{"patch":"@@ -285,1 +285,1 @@\n-        \/\/ necessary to retrive the attributes we need. This sub-class will also cache these attributes\n+        \/\/ necessary to retrieve the attributes we need. This sub-class will also cache these attributes\n@@ -290,1 +290,1 @@\n-            \/\/ All supported keyspecs (other than PKCS8_KEYSPEC_CLS) descend from RSA_PRIVCRT_KEYSPEC_CLS\n+            \/\/ All supported keyspecs (other than PKCS8EncodedKeySpec) descend from RSAPrivateCrtKeySpec\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11RSAKeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+# Everything above this line (with the exception of the comment at the top) is copy\/pasted from p11-nss.txt\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/nss\/p11-nss-sensitive.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.security.interfaces.RSAPrivateCrtKey;\n@@ -36,1 +37,1 @@\n- * @summary RsaPrivateKeySpec is always recognized as RSAPrivateCrtKeySpec in RSAKeyFactory.engineGetKeySpec\n+ * @summary RSAPrivateCrtKeySpec is prefered for CRT keys even when a RsaPrivateKeySpec is requested.\n@@ -38,1 +39,0 @@\n- * @author Greg Rubin, Ziyi Luo\n@@ -62,0 +62,14 @@\n+        \/\/ If this is a sensitive key, then it shouldn't implement the RSAPrivateKey interface as that exposes sensitive fields\n+        boolean keyExposesSensitiveFields = privKey instanceof RSAPrivateKey;\n+        if (keyExposesSensitiveFields == testingSensitiveKeys) {\n+            throw new Exception(\"Key of type \" + privKey.getClass() + \" returned when testing sensitive keys is \" + testingSensitiveKeys);\n+        }\n+\n+        if (!testingSensitiveKeys) {\n+            \/\/ The remaining tests require that the PKCS #11 token actually generated a CRT key.\n+            \/\/ This is the normal and expected case, but we add an assertion here to detect a broken test due to bad assumptions.\n+            if (!(privKey instanceof RSAPrivateCrtKey)) {\n+                throw new Exception(\"Test assumption violated: PKCS #11 token did not generate a CRT key.\");\n+            }\n+        }\n+\n@@ -71,6 +85,0 @@\n-\n-        \/\/ If this is a sensitive key, then it shouldn't implement the RSAPrivateKey interface as that exposes sensitive fields\n-        boolean keyExposesSensitiveFields = privKey instanceof RSAPrivateKey;\n-        if (keyExposesSensitiveFields == testingSensitiveKeys) {\n-            throw new Exception(\"Key of type \" + privKey.getClass() + \" returned when testing sensitive keys is \" + testingSensitiveKeys);\n-        }\n@@ -91,0 +99,1 @@\n+                System.err.println(\"This exception is expected when retrieving sensitive properties from a sensitive PKCS #11 key.\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestP11KeyFactoryGetRSAKeySpec.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"}]}