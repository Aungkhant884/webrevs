{"files":[{"patch":"@@ -385,1 +385,7 @@\n-    java_lang_VirtualThread::set_notify_jvmti_events(true);\n+    if (!java_lang_VirtualThread ::notify_jvmti_events()) {\n+      java_lang_VirtualThread::set_notify_jvmti_events(true);\n+      if (Thread::current_or_null() != NULL) { \/\/ need this for attached threads only\n+        ThreadInVMfromNative tiv(JavaThread::current());\n+        java_lang_VirtualThread::init_static_notify_jvmti_events();\n+      }\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Verifies JVMTI GetStackTrace does not truncate virtual thread stack trace with agent attach\n+ * @requires vm.continuations\n+ * @enablePreview\n+ * @run main\/othervm\/native -Djdk.attach.allowAttachSelf=true VirtualStackTraceTest\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class VirtualStackTraceTest {\n+    private static final String AGENT_LIB = \"VirtualStackTraceTest\";\n+\n+    public static native String[] getStackTrace();\n+\n+    public static void main(String[] args) throws Exception {\n+        VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+        vm.loadAgentLibrary(AGENT_LIB);\n+        VirtualStackTraceTest t = new VirtualStackTraceTest();\n+        t.runTest();\n+    }\n+\n+    void runTest() throws Exception {\n+        Thread thr = Thread.ofVirtual().name(\"VT\").start(VirtualStackTraceTest::test);\n+        thr.join();\n+    }\n+\n+    private static void test() {\n+        work();\n+    }\n+\n+    private static void work() {\n+        inner();\n+    }\n+\n+    private static void inner() {\n+        checkCurrentThread();\n+    }\n+\n+    private static void checkCurrentThread() {\n+        System.out.println(\"Stack trace for \" + Thread.currentThread() + \": \");\n+        var javaStackTrace = Arrays.stream(Thread.currentThread().getStackTrace()).map(StackTraceElement::getMethodName).toList();\n+        var jvmtiStackTrace = List.of(getStackTrace());\n+\n+        System.out.println(\"JVMTI: \" + jvmtiStackTrace);\n+        System.out.println(\"Java : \" + javaStackTrace);\n+\n+        if (!Objects.equals(jvmtiStackTrace, javaStackTrace)) {\n+            throw new RuntimeException(\"VirtualStackTraceTest failed: stack traces do not match\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualStackTraceTest\/VirtualStackTraceTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <cstdlib>\n+#include <cstring>\n+#include <jvmti.h>\n+#include \"jvmti_common.h\"\n+\n+extern \"C\" {\n+\n+const int MAX_COUNT = 50;\n+static jvmtiEnv *jvmti;\n+\n+JNIEXPORT jobjectArray JNICALL\n+Java_VirtualStackTraceTest_getStackTrace(JNIEnv* jni, jclass clazz) {\n+  jvmtiError err;\n+  jint count = 0;\n+  jint skipped = 0;\n+\n+  jobject visibleFrames[MAX_COUNT];\n+  jvmtiFrameInfo frameInfo[MAX_COUNT];\n+\n+  err = jvmti->GetStackTrace(NULL, 0, MAX_COUNT, frameInfo, &count);\n+  check_jvmti_status(jni, err, \"event handler: error in JVMTI GetStackTrace call\");\n+\n+  for (int idx = 0; idx < count; idx++) {\n+    jclass declaringClass = NULL;\n+    char *clasSignature = NULL;\n+    char *methodName = NULL;\n+\n+    err = jvmti->GetMethodDeclaringClass(frameInfo[idx].method, &declaringClass);\n+    check_jvmti_status(jni, err, \"event handler: error in JVMTI GetMethodDeclaringClass call\");\n+\n+    err = jvmti->GetClassSignature(declaringClass, &clasSignature, NULL);\n+    check_jvmti_status(jni, err, \"event handler: error in JVMTI GetClassSignature call\");\n+\n+    err = jvmti->GetMethodName(frameInfo[idx].method, &methodName, NULL, NULL);\n+    check_jvmti_status(jni, err, \"event handler: error in JVMTI GetMethodName call\");\n+\n+    if (strchr(clasSignature, '.')) {\n+      skipped++;\n+      continue;\n+    }\n+    visibleFrames[idx - skipped] = jni->NewStringUTF(methodName);\n+\n+    jvmti->Deallocate(reinterpret_cast<unsigned char*>(methodName));\n+    jvmti->Deallocate(reinterpret_cast<unsigned char*>(clasSignature));\n+  }\n+  jobjectArray methodNames = jni->NewObjectArray(count - skipped, jni->FindClass(\"java\/lang\/String\"), NULL);\n+  for (int idx = 0; idx < count - skipped; idx++) {\n+    jni->SetObjectArrayElement(methodNames, idx, visibleFrames[idx]);\n+  }\n+  print_stack_trace(jvmti, jni, NULL);\n+\n+  return methodNames;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnLoad started\\n\");\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnAttach(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"Agent_OnAttach started\\n\");\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n+\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VirtualStackTraceTest\/libVirtualStackTraceTest.cpp","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}