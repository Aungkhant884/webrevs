{"files":[{"patch":"@@ -302,0 +302,1 @@\n+    size_t word_sz = _g1h->desired_plab_sz(state);\n@@ -303,6 +304,4 @@\n-      if (state == G1HeapRegionAttr::Old) {\n-        \/\/ Specialized PLABs for old that handle BOT updates for object allocations.\n-        _alloc_buffers[state][node_index] = new G1BotUpdatingPLAB(_g1h->desired_plab_sz(state));\n-      } else {\n-        _alloc_buffers[state][node_index] = new PLAB(_g1h->desired_plab_sz(state));\n-      }\n+      \/\/ Specialized PLABs for old that handle BOT updates for object allocations.\n+      _alloc_buffers[state][node_index] = (state == G1HeapRegionAttr::Old)\n+                                        ? new G1BotUpdatingPLAB(word_sz)\n+                                        : new PLAB(word_sz);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  virtual void set_buf(HeapWord* buf, size_t word_sz);\n+  void set_buf(HeapWord* buf, size_t word_sz) override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,2 @@\n-  assert(_bot_part.threshold_for_addr(addr) >= addr,\n+  HeapWord* threshold = _bot_part.threshold_for_addr(addr);\n+  assert(threshold >= addr,\n@@ -244,1 +245,1 @@\n-         p2i(_bot_part.threshold_for_addr(addr)), p2i(addr));\n+         p2i(threshold), p2i(addr));\n@@ -248,1 +249,1 @@\n-  return _bot_part.threshold_for_addr(addr);\n+  return threshold;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}