{"files":[{"patch":"@@ -567,6 +567,0 @@\n-  \/\/ To avoid extensive rescheduling if the task is executed a bit early. The task is\n-  \/\/ only rescheduled if the expected time is more than 1ms away.\n-  bool should_reschedule() {\n-    return reschedule_delay_ms() > 1;\n-  }\n-\n@@ -589,3 +583,3 @@\n-    if (should_reschedule()) {\n-      \/\/ Calculate the delay given the last GC and the interval.\n-      schedule(reschedule_delay_ms());\n+    auto delay_ms = reschedule_delay_ms();\n+    if (delay_ms > 0) {\n+      schedule(delay_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-void G1ServiceThread::register_task(G1ServiceTask* task, jlong delay) {\n+void G1ServiceThread::register_task(G1ServiceTask* task, jlong delay_ms) {\n@@ -134,1 +134,1 @@\n-  schedule_task(task, delay);\n+  schedule_task(task, delay_ms);\n@@ -167,2 +167,3 @@\n-  \/\/ Return sleep time in milliseconds.\n-  return (int64_t) TimeHelper::counter_to_millis(time_diff);\n+  \/\/ Return sleep time in milliseconds. Using ceil to make sure we never\n+  \/\/ schedule a task too early.\n+  return (int64_t) ceil(TimeHelper::counter_to_millis(time_diff));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -137,3 +137,0 @@\n-  \/\/ Register a task with the service thread and schedule it. If\n-  \/\/ no delay is specified the task is scheduled to run directly.\n-  void register_task(G1ServiceTask* task, jlong delay = 0);\n@@ -141,3 +138,7 @@\n-  \/\/ Schedule the task and notify the service thread that a new\n-  \/\/ task might be ready to run.\n-  void schedule_task(G1ServiceTask* task, jlong delay);\n+  \/\/ Register a task with the service thread. The task is guaranteed not to run\n+  \/\/ until >= `delay_ms` has passed. If no delay is specified or the delay is\n+  \/\/ 0, the task will run in the earliest time possible.\n+  void register_task(G1ServiceTask* task, jlong delay_ms = 0);\n+\n+  \/\/ Schedule an already-registered task to run in >= `delay_ms` time.\n+  void schedule_task(G1ServiceTask* task, jlong delay_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}