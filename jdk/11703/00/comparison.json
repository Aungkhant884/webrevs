{"files":[{"patch":"@@ -102,0 +102,1 @@\n+#include \"utilities\/vmError.hpp\"\n@@ -1677,2 +1678,2 @@\n-\/\/ This is the external format from above, but selecting the platform\n-\/\/ or vthread as applicable.\n+\/\/ This is the external format, selecting the platform or vthread\n+\/\/ as applicable, and allowing for a native-only stack.\n@@ -1680,2 +1681,11 @@\n-  if (is_vthread_mounted()) {\n-    print_vthread_stack_on(tty);\n+  if (!has_last_Java_frame()) {\n+    assert(this == JavaThread::current(), \"Can't print native stack of other threads\");\n+    ResourceMark rm(this);\n+    char* buf = NEW_RESOURCE_ARRAY_RETURN_NULL(char, O_BUFLEN);\n+    if (buf == nullptr) {\n+      tty->print_cr(\"Unable to print native stack - out of memory\");\n+      return;\n+    }\n+    frame f = os::current_frame();\n+    VMError::print_native_stack(tty, f, this, true \/*print_source_info *\/,\n+                                -1 \/* max stack *\/, buf, O_BUFLEN);\n@@ -1683,1 +1693,1 @@\n-    print_stack_on(tty);\n+    print_active_stack_on(tty);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -106,9 +106,0 @@\n-  \/\/ public for use by the internal non-product debugger.\n-  NOT_PRODUCT(public:)\n-  \/\/ print_source_info: if true, we try to resolve the source information on platforms that support it\n-  \/\/  (useful but may slow down, timeout or misfunction in error situations)\n-  \/\/ max_frames: if not -1, overrides StackPrintLimit\n-  static void print_native_stack(outputStream* st, frame fr, Thread* t, bool print_source_info,\n-                                 int max_frames, char* buf, int buf_size);\n-  NOT_PRODUCT(private:)\n-\n@@ -150,0 +141,6 @@\n+  \/\/ print_source_info: if true, we try to resolve the source information on platforms that support it\n+  \/\/  (useful but may slow down, timeout or misfunction in error situations)\n+  \/\/ max_frames: if not -1, overrides StackPrintLimit\n+  static void print_native_stack(outputStream* st, frame fr, Thread* t, bool print_source_info,\n+                                 int max_frames, char* buf, int buf_size);\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}