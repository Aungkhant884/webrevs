{"files":[{"patch":"@@ -475,0 +475,1 @@\n+  assert(Heap_lock->is_locked(), \"heap must be locked\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,14 @@\n+bool VM_GC_Sync_Operation::doit_prologue() {\n+  Heap_lock->lock();\n+  return true;\n+}\n+\n+void VM_GC_Sync_Operation::doit_epilogue() {\n+  Heap_lock->unlock();\n+}\n+\n+void VM_Verify::doit() {\n+  Universe::heap()->prepare_for_verify();\n+  Universe::verify();\n+}\n+\n@@ -97,2 +111,1 @@\n-  \/\/ If the GC count has changed someone beat us to the collection\n-  Heap_lock->lock();\n+  VM_GC_Sync_Operation::doit_prologue();\n@@ -119,1 +132,1 @@\n-  Heap_lock->unlock();\n+  VM_GC_Sync_Operation::doit_epilogue();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+\/\/    VM_GC_Sync_Operation\n@@ -43,7 +44,15 @@\n-\/\/          VM_GC_HeapInspection\n-\/\/          VM_GenCollectFull\n-\/\/          VM_GenCollectFullConcurrent\n-\/\/          VM_ParallelGCSystemGC\n-\/\/          VM_CollectForAllocation\n-\/\/              VM_GenCollectForAllocation\n-\/\/              VM_ParallelGCFailedAllocation\n+\/\/        VM_GC_HeapInspection\n+\/\/        VM_PopulateDynamicDumpSharedSpace\n+\/\/        VM_GenCollectFull\n+\/\/        VM_GenCollectFullConcurrent\n+\/\/        VM_ParallelGCSystemGC\n+\/\/        VM_CollectForAllocation\n+\/\/          VM_GenCollectForAllocation\n+\/\/          VM_ParallelGCFailedAllocation\n+\/\/      VM_Verify\n+\/\/      VM_PopulateDumpSharedSpace\n+\/\/\n+\/\/  VM_GC_Sync_Operation\n+\/\/   - implements only synchronization with other VM operations of the\n+\/\/     same kind using the Heap_lock, not actually doing a GC.\n+\/\/\n@@ -51,2 +60,3 @@\n-\/\/   - implements methods common to all classes in the hierarchy:\n-\/\/     prevents multiple gc requests and manages lock on heap;\n+\/\/   - implements methods common to all operations that perform garbage collections,\n+\/\/     checking that the VM is in a state to do GC and preventing multiple GC\n+\/\/     requests.\n@@ -71,0 +81,26 @@\n+\/\/  VM_Verify\n+\/\/   - verifies the heap\n+\/\/\n+\/\/  VM_PopulateDynamicDumpSharedSpace\n+\/\/   - populates the CDS archive area with the information from the archive file.\n+\/\/\n+\/\/  VM_PopulateDumpSharedSpace\n+\/\/   - creates the CDS archive\n+\/\/\n+\n+class VM_GC_Sync_Operation : public VM_Operation {\n+public:\n+\n+  VM_GC_Sync_Operation() : VM_Operation() { }\n+\n+  \/\/ Acquires the Heap_lock.\n+  virtual bool doit_prologue();\n+  \/\/ Releases the Heap_lock.\n+  virtual void doit_epilogue();\n+};\n+\n+class VM_Verify : public VM_GC_Sync_Operation {\n+ public:\n+  VMOp_Type type() const { return VMOp_Verify; }\n+  void doit();\n+};\n@@ -72,1 +108,1 @@\n-class VM_GC_Operation: public VM_Operation {\n+class VM_GC_Operation: public VM_GC_Sync_Operation {\n@@ -87,1 +123,1 @@\n-                  bool full = false) {\n+                  bool full = false) : VM_GC_Sync_Operation() {\n@@ -111,1 +147,1 @@\n-  \/\/ Do notifyAll (if needed) and release held lock\n+  \/\/ Do notify_all (if needed) and release held lock\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.hpp","additions":48,"deletions":12,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/gcVMOperations.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/gcVMOperations.hpp\"\n@@ -544,1 +545,1 @@\n-class VM_PopulateDynamicDumpSharedSpace: public VM_Operation {\n+class VM_PopulateDynamicDumpSharedSpace: public VM_GC_Sync_Operation {\n@@ -547,1 +548,1 @@\n-  VM_PopulateDynamicDumpSharedSpace(DynamicArchiveBuilder* builder) : _builder(builder) {}\n+  VM_PopulateDynamicDumpSharedSpace(DynamicArchiveBuilder* builder) : VM_GC_Sync_Operation(), _builder(builder) {}\n","filename":"src\/hotspot\/share\/memory\/dynamicArchive.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shared\/gcVMOperations.hpp\"\n@@ -658,0 +659,1 @@\n+\n@@ -660,0 +662,1 @@\n+\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"gc\/shared\/gcVMOperations.hpp\"\n@@ -580,1 +581,1 @@\n-class VM_PopulateDumpSharedSpace: public VM_Operation {\n+class VM_PopulateDumpSharedSpace : public VM_GC_Operation {\n@@ -605,0 +606,6 @@\n+  VM_PopulateDumpSharedSpace() : VM_GC_Operation(0, \/* total collections, ignored *\/\n+                                                 GCCause::_archive_time_gc)\n+  { }\n+\n+  bool skip_operation() const { return false; }\n+\n@@ -1088,2 +1095,0 @@\n-    MutexLocker ml(THREAD, HeapShared::is_heap_object_archiving_allowed() ?\n-                   Heap_lock : NULL);     \/\/ needed by HeapShared::run_gc()\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"gc\/shared\/gcVMOperations.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -159,5 +159,0 @@\n-void VM_Verify::doit() {\n-  Universe::heap()->prepare_for_verify();\n-  Universe::verify();\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -280,7 +280,0 @@\n-class VM_Verify: public VM_Operation {\n- public:\n-  VMOp_Type type() const { return VMOp_Verify; }\n-  void doit();\n-};\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}