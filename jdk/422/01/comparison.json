{"files":[{"patch":"@@ -821,1 +821,2 @@\n-             cmp2->Opcode() == Op_CmpP || cmp2->Opcode() == Op_CmpN) {\n+             cmp2->Opcode() == Op_CmpP || cmp2->Opcode() == Op_CmpN ||\n+             cmp1->is_SubTypeCheck() || cmp2->is_SubTypeCheck()) {\n@@ -823,0 +824,1 @@\n+    \/\/ SubTypeCheck is not commutative\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8253566\n+ * @summary clazz.isAssignableFrom will return false for interface implementors\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestSubTypeCheckMacroTrichotomy\n+ *\n+ *\/\n+\n+public class TestSubTypeCheckMacroTrichotomy {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            final int res1 = test(A.class, B.class);\n+            final int res2 = test(B.class, A.class);\n+            final int res3 = test(A.class, C.class);\n+            if (res1 != 0 || res2 != 1 || res3 != 0) {\n+                throw new RuntimeException(\"test(A, B) = \" + res1 + \" test(B, A) = \" + res2 + \" test(A, C) = \" + res3);\n+            }\n+        }\n+    }\n+\n+    private static int test(Class<?> c1, Class<?> c2) {\n+        if (c1 == null) {\n+        }\n+        if (c2 == null) {\n+        }\n+        int res = 0;\n+        if (!c1.isAssignableFrom(c2)) {\n+            if (c2.isAssignableFrom(c1)) {\n+                res = 1;\n+            }\n+        }\n+        return res;\n+    }\n+\n+    private static class A {\n+    }\n+\n+    private static class B extends A {\n+    }\n+\n+    private static class C {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestSubTypeCheckMacroTrichotomy.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}