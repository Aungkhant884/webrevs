{"files":[{"patch":"@@ -471,0 +471,6 @@\n+\n+UNSAFE_LEAF (void, Unsafe_ReportJavaOutOfMemory0(JNIEnv *env, jobject unsafe,jstring message)) {\n+        char *utf_message = java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(message));\n+        report_java_out_of_memory(utf_message);\n+} UNSAFE_END\n+\n@@ -907,0 +913,1 @@\n+    {CC \"reportJavaOutOfMemory0\", CC \"(\" LANG \"String;)V\",                  FN_PTR(Unsafe_ReportJavaOutOfMemory0)},\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,0 +72,6 @@\n+    private static boolean reportOomOnDirectMemoryOom = false;\n+\n+    static {\n+        reportOomOnDirectMemoryOom = Boolean.getBoolean(\"jdk.nio.reportOomOnDirectMemoryOom\");\n+    }\n+\n@@ -173,1 +179,7 @@\n-\n+            OutOfMemoryError error = new OutOfMemoryError\n+                    (\"Cannot reserve \"\n+                            + size + \" bytes of direct buffer memory (allocated: \"\n+                            + RESERVED_MEMORY.get() + \", limit: \" + MAX_MEMORY + \")\");\n+            if (reportOomOnDirectMemoryOom) {\n+                UNSAFE.reportJavaOutOfMemory0(error.getMessage());\n+            }\n@@ -175,4 +187,1 @@\n-            throw new OutOfMemoryError\n-                (\"Cannot reserve \"\n-                 + size + \" bytes of direct buffer memory (allocated: \"\n-                 + RESERVED_MEMORY.get() + \", limit: \" + MAX_MEMORY +\")\");\n+            throw error;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3840,0 +3840,1 @@\n+    public native void reportJavaOutOfMemory0(String message);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test TestExitOnDirectOutOfMemoryError\n+ * @summary Test using -XX:ExitOnOutOfMemoryError\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @run driver TestExitOnDirectOutOfMemoryError\n+ * @bug 8138745\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.nio.ByteBuffer;\n+public class TestExitOnDirectOutOfMemoryError {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            \/\/ This should guarantee to throw:\n+            \/\/ java.lang.OutOfMemoryError: Cannot reserve 2147483647 bytes of direct buffer memory (allocated: 0, limit: 20971520)\n+            try {\n+               ByteBuffer byteBuffer = ByteBuffer.allocateDirect(Integer.MAX_VALUE);\n+            } catch (OutOfMemoryError err) {\n+                throw new Error(\"OOME didn't terminate JVM!\");\n+            }\n+        }\n+\n+        \/\/ else this is the main test\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:+ExitOnOutOfMemoryError\",\n+                \"-Xmx20m\",\"-Djdk.nio.reportOomOnDirectMemoryOom=true\", TestExitOnDirectOutOfMemoryError.class.getName(), \"throwOOME\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        \/*\n+         * Actual output should look like this:\n+         * Terminating due to java.lang.OutOfMemoryError: Cannot reserve 2147483647 bytes of direct buffer memory (allocated: 0, limit: 20971520)\n+         *\/\n+        output.shouldHaveExitValue(3);\n+        output.stdoutShouldNotBeEmpty();\n+        output.shouldContain(\"Terminating due to java.lang.OutOfMemoryError: Cannot reserve 2147483647 bytes of direct\" +\n+                \" buffer memory (allocated: 0, limit: 20971520)\");\n+        System.out.println(\"PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestExitOnDirectOutOfMemoryError.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}