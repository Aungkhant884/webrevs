{"files":[{"patch":"@@ -3532,0 +3532,48 @@\n+    \/**\n+     * Unless this is the {@link #commonPool()}, initiates an orderly\n+     * shutdown in which previously submitted tasks are executed, but\n+     * no new tasks will be accepted, and waits until all tasks have\n+     * completed execution and the executor has terminated.\n+     *\n+     * <p> If already terminated, or this is the {@link\n+     * #commonPool()}, this method has no effect on execution, and\n+     * does not wait. Otherwise, if interrupted while waiting, this\n+     * method stops all executing tasks as if by invoking {@link\n+     * #shutdownNow()}. It then continues to wait until all actively\n+     * executing tasks have completed. Tasks that were awaiting\n+     * execution are not executed. The interrupt status will be\n+     * re-asserted before this method returns.\n+     *\n+     * @throws SecurityException if a security manager exists and\n+     *         shutting down this ExecutorService may manipulate\n+     *         threads that the caller is not permitted to modify\n+     *         because it does not hold {@link\n+     *         java.lang.RuntimePermission}{@code (\"modifyThread\")},\n+     *         or the security manager's {@code checkAccess} method\n+     *         denies access.\n+     * @since 19\n+     *\/\n+    @Override\n+    public void close() {\n+        if ((config & ISCOMMON) == 0) {\n+            boolean terminated = tryTerminate(false, false);\n+            if (!terminated) {\n+                shutdown();\n+                boolean interrupted = false;\n+                while (!terminated) {\n+                    try {\n+                        terminated = awaitTermination(1L, TimeUnit.DAYS);\n+                    } catch (InterruptedException e) {\n+                        if (!interrupted) {\n+                            shutdownNow();\n+                            interrupted = true;\n+                        }\n+                    }\n+                }\n+                if (interrupted) {\n+                    Thread.currentThread().interrupt();\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        return new TestSuite(ForkJoinPool8Test.class);\n+        return new TestSuite(ForkJoinPool19Test.class);\n@@ -267,0 +267,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -268,0 +269,11 @@\n+        ForkJoinPool p;\n+        try {\n+            p = new ForkJoinPool();\n+        } catch (java.security.AccessControlException e) {\n+            return;\n+        }\n+        FibAction f = new FibAction(8);\n+        RecursiveAction j = new RecursiveAction() {\n+                protected void compute() {\n+                    f.join();\n+                }};\n@@ -270,2 +282,1 @@\n-                final ForkJoinPool p = mainPool();\n-                FibAction f = new FibAction(8);\n+                p.invoke(new FibAction(8));\n@@ -273,5 +284,2 @@\n-                checkNotDone(f);\n-                FibAction g = new FibAction(8);\n-                p.submit(g);\n-                g.join();\n-                f.join();\n+                p.invoke(new FibAction(8));\n+                p.invoke(j);\n@@ -281,1 +289,1 @@\n-        testInvokeOnPool(mainPool(), a);\n+        testInvokeOnPool(p, a);\n@@ -495,0 +503,27 @@\n+    \/**\n+     * Implicitly closing a new pool using try-with-resources terminates it\n+     *\/\n+    public void testClose() {\n+        ForkJoinTask f = new FibAction(8);\n+        ForkJoinPool pool = null;\n+        try (ForkJoinPool p = new ForkJoinPool()) {\n+            pool = p;\n+            p.execute(f);\n+        }\n+        checkCompletedNormally(f);\n+        assertTrue(pool != null && pool.isTerminated());\n+    }\n+\n+    \/**\n+     * Implicitly closing common pool using try-with-resources does not\n+     * terminate it\n+     *\/\n+    public void testCloseCommonPool() {\n+        ForkJoinTask f = new FibAction(8);\n+        ForkJoinPool pool;\n+        try (ForkJoinPool p = ForkJoinPool.commonPool()) {\n+            pool = p;\n+            p.execute(f);\n+        }\n+        assertFalse(pool.isTerminated());\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool19Test.java","additions":44,"deletions":9,"binary":false,"changes":53,"status":"modified"}]}