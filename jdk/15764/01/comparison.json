{"files":[{"patch":"@@ -80,1 +80,1 @@\n-  if (node->is_IfProj()) {\n+  if (node->is_IfProj() && !node->in(0)->is_ParsePredicate()) {\n@@ -111,0 +111,15 @@\n+#ifdef ASSERT\n+\/\/ Check that the block has at most one Parse Predicate and that we only find Regular Predicate nodes (i.e. IfProj,\n+\/\/ If, or RangeCheck nodes.\n+void PredicateBlock::verify_block() {\n+  Node* next = _parse_predicate.entry(); \/\/ Skip unique Parse Predicate of this block if present\n+  while (next != _entry) {\n+    assert(!next->is_ParsePredicate(), \"can only have one Parse Predicate in a block\");\n+    const int opcode = next->Opcode();\n+    assert(next->is_IfProj() || opcode == Op_If || opcode == Op_RangeCheck,\n+           \"Regular Predicates consist of an IfProj and an If or RangeCheck node\");\n+    next = next->in(0);\n+  }\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -273,0 +273,1 @@\n+  DEBUG_ONLY(void verify_block();)\n@@ -277,1 +278,3 @@\n-        _entry(skip_regular_predicates(_parse_predicate.entry(), deopt_reason)) {}\n+        _entry(skip_regular_predicates(_parse_predicate.entry(), deopt_reason)) {\n+    DEBUG_ONLY(verify_block();)\n+  }\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316105\n+ * @library \/test\/lib\n+ * @summary Test that back to back Parse Predicates with same deopt reason are not grouped together\n+ * @run main\/othervm -Xbatch compiler.predicates.TestBackToBackParsePredicates\n+ *\/\n+\n+package compiler.predicates;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestBackToBackParsePredicates {\n+    static long lFld;\n+\n+    public static void main(String[] strArr2) {\n+        for (int i = -350; i <= 0; i++) {\n+            lFld = 30;\n+            test(i);\n+            check();\n+        }\n+        lFld = 30;\n+        test(1);\n+        check();\n+    }\n+\n+    \/\/ Inlined\n+    static void foo() {\n+        for (int i12 = 1; i12 < 5; i12++) { \/\/ Loop A\n+            lFld += 1; \/\/ StoreL\n+        }\n+    }\n+\n+    static void test(int x) {\n+        foo();\n+\n+        \/\/ After fully unrolling loop A and after next round of IGVN:\n+        \/\/ We wrongly treat two back to back Loop Limit Check Parse Predicates as single Predicate Block. We therefore\n+        \/\/ keep the Loop Parse Predicate of loop A:\n+        \/\/\n+        \/\/ Loop Parse Predicate (of A)\n+        \/\/ Loop Limit Check Parse Predicate (of A)  |\n+        \/\/    -> StoreL of lFld pinned here         | Wrongly treated as single Predicate Block\n+        \/\/ Loop Limit Check Parse Predicate (of B)  |\n+        for (int i = 7; i < 212; i++) { \/\/ Loop B\n+            for (int j = 1; j < 80; j++) {\n+                switch (x % 8) {\n+                    case 0:\n+                    case 2:\n+                        break;\n+                    case 6:\n+                    case 7:\n+                }\n+            }\n+        }\n+    }\n+\n+    static void check() {\n+        Asserts.assertEQ(34L, lFld);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestBackToBackParsePredicates.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}