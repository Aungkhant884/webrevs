{"files":[{"patch":"@@ -111,0 +111,15 @@\n+#ifdef ASSERT\n+\/\/ Check that the block has at most one Parse Predicate and that we only find Regular Predicate nodes (i.e. IfProj,\n+\/\/ If, or RangeCheck nodes.\n+void PredicateBlock::verify_block() {\n+  Node* next = _parse_predicate.entry(); \/\/ Skip unique Parse Predicate of this block if present\n+  while (next != _entry) {\n+    assert(!next->is_ParsePredicate(), \"can only have one Parse Predicate in a block\");\n+    const int opcode = next->Opcode();\n+    assert(next->is_IfProj() || opcode == Op_If || opcode == Op_RangeCheck,\n+           \"Regular Predicates consist of an IfProj and an If or RangeCheck node\");\n+    next = next->in(0);\n+  }\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -273,0 +273,1 @@\n+  DEBUG_ONLY(void verify_block();)\n@@ -277,1 +278,3 @@\n-        _entry(skip_regular_predicates(_parse_predicate.entry(), deopt_reason)) {}\n+        _entry(skip_regular_predicates(_parse_predicate.entry(), deopt_reason)) {\n+    DEBUG_ONLY(verify_block();)\n+  }\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}