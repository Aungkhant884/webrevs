{"files":[{"patch":"@@ -40,10 +40,3 @@\n-ciMethodData::ciMethodData(MethodData* md) : ciMetadata(md), _orig() {\n-  assert(md != NULL, \"no null method data\");\n-  _data = NULL;\n-  _data_size = 0;\n-  _extra_data_size = 0;\n-  _current_mileage = 0;\n-  _invocation_counter = 0;\n-  _backedge_counter = 0;\n-  _state = empty_state;\n-  _saw_free_extra_data = false;\n+ciMethodData::ciMethodData(MethodData* md)\n+: ciMetadata(md),\n+  _data_size(0), _extra_data_size(0), _data(NULL),\n@@ -52,1 +45,3 @@\n-  _hint_di = first_di();\n+  _hint_di(first_di()),\n+  _state(empty_state),\n+  _saw_free_extra_data(false),\n@@ -54,24 +49,6 @@\n-  _eflags = _arg_local = _arg_stack = _arg_returned = 0;\n-  _parameters = NULL;\n-}\n-\n-\/\/ ------------------------------------------------------------------\n-\/\/ ciMethodData::ciMethodData\n-\/\/\n-\/\/ No MethodData*.\n-ciMethodData::ciMethodData() : ciMetadata(NULL), _orig() {\n-  _data = NULL;\n-  _data_size = 0;\n-  _extra_data_size = 0;\n-  _current_mileage = 0;\n-  _invocation_counter = 0;\n-  _backedge_counter = 0;\n-  _state = empty_state;\n-  _saw_free_extra_data = false;\n-  \/\/ Set an initial hint. Don't use set_hint_di() because\n-  \/\/ first_di() may be out of bounds if data_size is 0.\n-  _hint_di = first_di();\n-  \/\/ Initialize the escape information (to \"don't know.\");\n-  _eflags = _arg_local = _arg_stack = _arg_returned = 0;\n-  _parameters = NULL;\n-}\n+  _eflags(0), _arg_local(0), _arg_stack(0), _arg_returned(0),\n+  _current_mileage(0),\n+  _invocation_counter(0),\n+  _backedge_counter(0),\n+  _orig(),\n+  _parameters(NULL) {}\n@@ -227,2 +204,2 @@\n-  assert(sizeof(_orig) % HeapWordSize == 0, \"align\");\n-  Copy::disjoint_words_atomic((HeapWord*) &mdo->_header,\n+  static_assert(sizeof(_orig) % HeapWordSize == 0, \"align\");\n+  Copy::disjoint_words_atomic((HeapWord*) &mdo->_compiler_counters,\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":14,"deletions":37,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -393,4 +393,4 @@\n-  intx              _eflags;          \/\/ flags on escape information\n-  intx              _arg_local;       \/\/ bit set of non-escaping arguments\n-  intx              _arg_stack;       \/\/ bit set of stack-allocatable arguments\n-  intx              _arg_returned;    \/\/ bit set of returned arguments\n+  intx _eflags;       \/\/ flags on escape information\n+  intx _arg_local;    \/\/ bit set of non-escaping arguments\n+  intx _arg_stack;    \/\/ bit set of stack-allocatable arguments\n+  intx _arg_returned; \/\/ bit set of returned arguments\n@@ -408,1 +408,1 @@\n-  MethodData::MDHeader _orig;\n+  MethodData::CompilerCounters _orig;\n@@ -416,2 +416,1 @@\n-  ciMethodData(MethodData* md);\n-  ciMethodData();\n+  ciMethodData(MethodData* md = NULL);\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-    int actual_size = sizeof(MethodData::MDHeader);\n+    int actual_size = sizeof(MethodData::CompilerCounters);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,4 +240,4 @@\n-  nonstatic_field(MethodData,                  _header._nof_decompiles,                       uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._nof_overflow_recompiles,              uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._nof_overflow_traps,                   uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._trap_hist._array[0],                  u1)                                    \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_decompiles,            uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_overflow_recompiles,   uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_overflow_traps,        uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._trap_hist._array[0],       u1)                                    \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1972,1 +1972,2 @@\n-  class MDHeader {\n+  \/\/ Compiler-related counters.\n+  class CompilerCounters {\n@@ -1986,2 +1987,2 @@\n-    MDHeader() : _nof_decompiles(0), _nof_overflow_recompiles(0), _nof_overflow_traps(0) {\n-      assert(sizeof(_trap_hist) % sizeof(HeapWord) == 0, \"align\");\n+    CompilerCounters() : _nof_decompiles(0), _nof_overflow_recompiles(0), _nof_overflow_traps(0) {\n+      static_assert(sizeof(_trap_hist) % HeapWordSize == 0, \"align\");\n@@ -2032,1 +2033,1 @@\n-      return byte_offset_of(MethodData, _header._trap_hist._array);\n+      return byte_offset_of(CompilerCounters, _trap_hist._array);\n@@ -2037,1 +2038,1 @@\n-  MDHeader _header;\n+  CompilerCounters _compiler_counters;\n@@ -2189,2 +2190,2 @@\n-  int      creation_mileage() const { return _header.creation_mileage(); }\n-  void set_creation_mileage(int x)  { _header.set_creation_mileage(x); }\n+  int      creation_mileage() const { return _compiler_counters.creation_mileage(); }\n+  void set_creation_mileage(int x)  { _compiler_counters.set_creation_mileage(x); }\n@@ -2365,1 +2366,1 @@\n-    return _header.trap_count(reason);\n+    return _compiler_counters.trap_count(reason);\n@@ -2371,1 +2372,1 @@\n-    return _header.inc_trap_count(reason);\n+    return _compiler_counters.inc_trap_count(reason);\n@@ -2375,1 +2376,1 @@\n-    return _header.overflow_trap_count();\n+    return _compiler_counters.overflow_trap_count();\n@@ -2378,1 +2379,1 @@\n-    return _header.overflow_recompile_count();\n+    return _compiler_counters.overflow_recompile_count();\n@@ -2381,1 +2382,1 @@\n-    return _header.inc_overflow_recompile_count();\n+    return _compiler_counters.inc_overflow_recompile_count();\n@@ -2384,1 +2385,1 @@\n-    return _header.decompile_count();\n+    return _compiler_counters.decompile_count();\n@@ -2387,1 +2388,1 @@\n-    uint dec_count = _header.inc_decompile_count();\n+    uint dec_count = _compiler_counters.inc_decompile_count();\n@@ -2417,1 +2418,1 @@\n-    return MDHeader::trap_history_offset();\n+    return byte_offset_of(MethodData, _compiler_counters) + CompilerCounters::trap_history_offset();\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -273,4 +273,4 @@\n-  nonstatic_field(MethodData,                  _header._nof_decompiles,                       uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._nof_overflow_recompiles,              uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._nof_overflow_traps,                   uint)                                  \\\n-  nonstatic_field(MethodData,                  _header._trap_hist._array[0],                  u1)                                    \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_decompiles,            uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_overflow_recompiles,   uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._nof_overflow_traps,        uint)                                  \\\n+  nonstatic_field(MethodData,                  _compiler_counters._trap_hist._array[0],       u1)                                    \\\n@@ -859,1 +859,1 @@\n-  nonstatic_field(ciMethodData,                _orig,                                         MethodData::MDHeader)                  \\\n+  nonstatic_field(ciMethodData,                _orig,                                         MethodData::CompilerCounters)          \\\n@@ -1267,1 +1267,1 @@\n-  declare_toplevel_type(MethodData::MDHeader)                             \\\n+  declare_toplevel_type(MethodData::CompilerCounters)                     \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-    final int methodDataOopTrapHistoryOffset = getFieldOffset(\"MethodData::_header._trap_hist._array[0]\", Integer.class, \"u1\");\n+    final int methodDataOopTrapHistoryOffset = getFieldOffset(\"MethodData::_compiler_counters._trap_hist._array[0]\", Integer.class, \"u1\");\n@@ -183,3 +183,3 @@\n-    final int methodDataDecompiles = getFieldOffset(\"MethodData::_header._nof_decompiles\", Integer.class, \"uint\");\n-    final int methodDataOverflowRecompiles = getFieldOffset(\"MethodData::_header._nof_overflow_recompiles\", Integer.class, \"uint\");\n-    final int methodDataOverflowTraps = getFieldOffset(\"MethodData::_header._nof_overflow_traps\", Integer.class, \"uint\");\n+    final int methodDataDecompiles = getFieldOffset(\"MethodData::_compiler_counters._nof_decompiles\", Integer.class, \"uint\");\n+    final int methodDataOverflowRecompiles = getFieldOffset(\"MethodData::_compiler_counters._nof_overflow_recompiles\", Integer.class, \"uint\");\n+    final int methodDataOverflowTraps = getFieldOffset(\"MethodData::_compiler_counters._nof_overflow_traps\", Integer.class, \"uint\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}