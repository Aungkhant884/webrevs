{"files":[{"patch":"@@ -181,0 +181,2 @@\n+  ~G1CardSetContainer() = default;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,3 @@\n-template <class Slot>\n-G1CardSetAllocator<Slot>::G1CardSetAllocator(const char* name,\n-                                             const G1CardSetAllocOptions* alloc_options,\n-                                             G1CardSetFreeList* free_segment_list) :\n+G1CardSetAllocator::G1CardSetAllocator(const char* name,\n+                                       const G1CardSetAllocOptions* alloc_options,\n+                                       G1CardSetFreeList* free_segment_list) :\n@@ -44,2 +43,1 @@\n-template <class Slot>\n-G1CardSetAllocator<Slot>::~G1CardSetAllocator() {\n+G1CardSetAllocator::~G1CardSetAllocator() {\n@@ -49,2 +47,1 @@\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::free(Slot* slot) {\n+void G1CardSetAllocator::free(G1CardSetContainer* slot) {\n@@ -52,1 +49,1 @@\n-  slot->~Slot();\n+  slot->~G1CardSetContainer();\n@@ -56,2 +53,1 @@\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::drop_all() {\n+void G1CardSetAllocator::drop_all() {\n@@ -62,2 +58,1 @@\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::print(outputStream* os) {\n+void G1CardSetAllocator::print(outputStream* os) {\n@@ -85,1 +80,1 @@\n-  _allocators = NEW_C_HEAP_ARRAY(G1CardSetAllocator<G1CardSetContainer>,\n+  _allocators = NEW_C_HEAP_ARRAY(G1CardSetAllocator,\n@@ -89,3 +84,3 @@\n-    new (&_allocators[i]) G1CardSetAllocator<G1CardSetContainer>(_config->mem_object_type_name_str(i),\n-                                                                 _config->mem_object_alloc_options(i),\n-                                                                 free_list_pool->free_list(i));\n+    new (&_allocators[i]) G1CardSetAllocator(_config->mem_object_type_name_str(i),\n+                                             _config->mem_object_alloc_options(i),\n+                                             free_list_pool->free_list(i));\n@@ -130,3 +125,2 @@\n-  return sizeof(*this) -\n-    (sizeof(G1CardSetAllocator<G1CardSetContainer>) * num_mem_object_types()) +\n-    result;\n+  return sizeof(*this) + result -\n+    (sizeof(G1CardSetAllocator) * num_mem_object_types());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,0 @@\n-template <class Slot>\n@@ -89,3 +88,0 @@\n-  \/\/ G1CardSetSegment management.\n-\n-  typedef G1SegmentedArray<Slot, mtGCCardSet> SegmentedArray;\n@@ -94,2 +90,1 @@\n-\n-  SegmentedArray _segmented_array;\n+  G1SegmentedArray<mtGCCardSet> _segmented_array;\n@@ -100,2 +95,2 @@\n-                     const G1CardSetAllocOptions* alloc_options,\n-                     G1CardSetFreeList* free_segment_list);\n+                         const G1CardSetAllocOptions* alloc_options,\n+                         G1CardSetFreeList* free_segment_list);\n@@ -104,2 +99,2 @@\n-  Slot* allocate();\n-  void free(Slot* slot);\n+  G1CardSetContainer* allocate();\n+  void free(G1CardSetContainer* slot);\n@@ -111,5 +106,1 @@\n-  size_t mem_size() const {\n-    return sizeof(*this) +\n-      _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n-      _segmented_array.num_available_slots() * _segmented_array.slot_size();\n-  }\n+  inline size_t mem_size() const;\n@@ -117,6 +108,1 @@\n-  size_t wasted_mem_size() const {\n-    uint num_wasted_slots = _segmented_array.num_available_slots() -\n-                            _segmented_array.num_allocated_slots() -\n-                            (uint)_free_slots_list.pending_count();\n-    return num_wasted_slots * _segmented_array.slot_size();\n-  }\n+  inline size_t wasted_mem_size() const;\n@@ -124,1 +110,1 @@\n-  inline uint num_segments() { return _segmented_array.num_segments(); }\n+  inline uint num_segments() const;\n@@ -134,1 +120,1 @@\n-  G1CardSetAllocator<G1CardSetContainer>* _allocators;\n+  G1CardSetAllocator* _allocators;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1CardSetContainers.hpp\"\n+#include \"gc\/g1\/g1CardSetContainers.inline.hpp\"\n@@ -31,0 +31,1 @@\n+#include \"utilities\/globalCounter.inline.hpp\"\n@@ -33,2 +34,16 @@\n-#include \"gc\/g1\/g1CardSetContainers.inline.hpp\"\n-#include \"utilities\/globalCounter.inline.hpp\"\n+inline size_t G1CardSetAllocator::mem_size() const {\n+  return  sizeof(*this) +\n+          _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n+          _segmented_array.num_available_slots() * _segmented_array.slot_size();\n+}\n+\n+inline size_t G1CardSetAllocator::wasted_mem_size() const {\n+  uint num_wasted_slots = _segmented_array.num_available_slots() -\n+                          _segmented_array.num_allocated_slots() -\n+                          (uint)_free_slots_list.pending_count();\n+  return num_wasted_slots * _segmented_array.slot_size();\n+}\n+\n+inline uint G1CardSetAllocator::num_segments() const {\n+  return _segmented_array.num_segments();\n+}\n@@ -36,3 +51,2 @@\n-template <class Slot>\n-Slot* G1CardSetAllocator<Slot>::allocate() {\n-  Slot* slot = ::new (_free_slots_list.allocate()) Slot();\n+inline G1CardSetContainer* G1CardSetAllocator::allocate() {\n+  G1CardSetContainer* slot = ::new (_free_slots_list.allocate()) G1CardSetContainer();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.inline.hpp","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-template <class Slot, MEMFLAGS flag>\n+template <MEMFLAGS flag>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArraySegment<flag>* G1SegmentedArray<Slot, flag>::create_new_segment(G1SegmentedArraySegment<flag>* const prev) {\n+template <MEMFLAGS flag>\n+G1SegmentedArraySegment<flag>* G1SegmentedArray<flag>::create_new_segment(G1SegmentedArraySegment<flag>* const prev) {\n@@ -128,1 +128,1 @@\n-           \"Mismatch %d != %d Slot %zu\", slot_size(), next->slot_size(), sizeof(Slot));\n+           \"Mismatch %d != %d\", slot_size(), next->slot_size());\n@@ -151,2 +151,2 @@\n-template <class Slot, MEMFLAGS flag>\n-uint G1SegmentedArray<Slot, flag>::slot_size() const {\n+template <MEMFLAGS flag>\n+uint G1SegmentedArray<flag>::slot_size() const {\n@@ -156,2 +156,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArray<Slot, flag>::G1SegmentedArray(const G1SegmentedArrayAllocOptions* alloc_options,\n+template <MEMFLAGS flag>\n+G1SegmentedArray<flag>::G1SegmentedArray(const G1SegmentedArrayAllocOptions* alloc_options,\n@@ -170,2 +170,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArray<Slot, flag>::~G1SegmentedArray() {\n+template <MEMFLAGS flag>\n+G1SegmentedArray<flag>::~G1SegmentedArray() {\n@@ -175,2 +175,2 @@\n-template <class Slot, MEMFLAGS flag>\n-void G1SegmentedArray<Slot, flag>::drop_all() {\n+template <MEMFLAGS flag>\n+void G1SegmentedArray<flag>::drop_all() {\n@@ -212,2 +212,2 @@\n-template <class Slot, MEMFLAGS flag>\n-void* G1SegmentedArray<Slot, flag>::allocate() {\n+template <MEMFLAGS flag>\n+void* G1SegmentedArray<flag>::allocate() {\n@@ -222,1 +222,1 @@\n-    Slot* slot = (Slot*)cur->get_new_slot();\n+    void* slot = cur->get_new_slot();\n@@ -235,2 +235,2 @@\n-template <class Slot, MEMFLAGS flag>\n-inline uint G1SegmentedArray<Slot, flag>::num_segments() const {\n+template <MEMFLAGS flag>\n+inline uint G1SegmentedArray<flag>::num_segments() const {\n@@ -254,2 +254,2 @@\n-template <class Slot, MEMFLAGS flag>\n-uint G1SegmentedArray<Slot, flag>::calculate_length() const {\n+template <MEMFLAGS flag>\n+uint G1SegmentedArray<flag>::calculate_length() const {\n@@ -262,1 +262,1 @@\n-template <class Slot, MEMFLAGS flag>\n+template <MEMFLAGS flag>\n@@ -264,1 +264,1 @@\n-void G1SegmentedArray<Slot, flag>::iterate_segments(SegmentClosure& closure) const {\n+void G1SegmentedArray<flag>::iterate_segments(SegmentClosure& closure) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}