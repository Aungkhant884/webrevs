{"files":[{"patch":"@@ -181,0 +181,2 @@\n+  ~G1CardSetContainer() = default;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-G1CardSetAllocatorImpl::G1CardSetAllocatorImpl(const char* name,\n-                                               const G1CardSetAllocOptions* alloc_options,\n-                                               G1CardSetFreeList* free_segment_list) :\n+G1CardSetAllocator::G1CardSetAllocator(const char* name,\n+                                       const G1CardSetAllocOptions* alloc_options,\n+                                       G1CardSetFreeList* free_segment_list) :\n@@ -43,1 +43,1 @@\n-G1CardSetAllocatorImpl::~G1CardSetAllocatorImpl() {\n+G1CardSetAllocator::~G1CardSetAllocator() {\n@@ -47,1 +47,7 @@\n-void G1CardSetAllocatorImpl::drop_all() {\n+void G1CardSetAllocator::free(G1CardSetContainer* slot) {\n+  assert(slot != nullptr, \"precondition\");\n+  slot->~G1CardSetContainer();\n+  _free_slots_list.release(slot);\n+}\n+\n+void G1CardSetAllocator::drop_all() {\n@@ -52,1 +58,1 @@\n-void G1CardSetAllocatorImpl::print(outputStream* os) {\n+void G1CardSetAllocator::print(outputStream* os) {\n@@ -71,14 +77,0 @@\n-template <class Slot>\n-G1CardSetAllocator<Slot>::G1CardSetAllocator(const char* name,\n-                                             const G1CardSetAllocOptions* alloc_options,\n-                                             G1CardSetFreeList* free_segment_list) :\n-  G1CardSetAllocatorImpl(name, alloc_options, free_segment_list)\n-{}\n-\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::free(Slot* slot) {\n-  assert(slot != nullptr, \"precondition\");\n-  slot->~Slot();\n-  _free_slots_list.release(slot);\n-}\n-\n@@ -88,1 +80,1 @@\n-  _allocators = NEW_C_HEAP_ARRAY(G1CardSetAllocator<G1CardSetContainer>,\n+  _allocators = NEW_C_HEAP_ARRAY(G1CardSetAllocator,\n@@ -92,3 +84,3 @@\n-    new (&_allocators[i]) G1CardSetAllocator<G1CardSetContainer>(_config->mem_object_type_name_str(i),\n-                                                                 _config->mem_object_alloc_options(i),\n-                                                                 free_list_pool->free_list(i));\n+    new (&_allocators[i]) G1CardSetAllocator(_config->mem_object_type_name_str(i),\n+                                             _config->mem_object_alloc_options(i),\n+                                             free_list_pool->free_list(i));\n@@ -133,3 +125,2 @@\n-  return sizeof(*this) -\n-    (sizeof(G1CardSetAllocator<G1CardSetContainer>) * num_mem_object_types()) +\n-    result;\n+  return sizeof(*this) + result -\n+    (sizeof(G1CardSetAllocator) * num_mem_object_types());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":18,"deletions":27,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -87,2 +87,3 @@\n-class G1CardSetAllocatorImpl {\n-  \/\/ G1CardSetSegment management.\n+class G1CardSetAllocator {\n+  \/\/ G1CardSetContainer slot management within the G1CardSetSegments allocated\n+  \/\/ by this allocator.\n@@ -90,1 +91,0 @@\n-protected:\n@@ -92,0 +92,1 @@\n+\n@@ -93,1 +94,1 @@\n-  G1CardSetAllocatorImpl(const char* name,\n+  G1CardSetAllocator(const char* name,\n@@ -96,1 +97,4 @@\n-  ~G1CardSetAllocatorImpl();\n+  ~G1CardSetAllocator();\n+\n+  G1CardSetContainer* allocate();\n+  void free(G1CardSetContainer* slot);\n@@ -111,17 +115,0 @@\n-template <class Slot>\n-class G1CardSetAllocator : public G1CardSetAllocatorImpl {\n-public:\n-  G1CardSetAllocator(const char* name,\n-                     const G1CardSetAllocOptions* alloc_options,\n-                     G1CardSetFreeList* free_segment_list);\n-\n-  ~G1CardSetAllocator() = default;\n-\n-  Slot* allocate();\n-  void free(Slot* slot);\n-\n-  size_t mem_size() const {\n-    return sizeof(*this) + G1CardSetAllocatorImpl::mem_size();\n-  }\n-};\n-\n@@ -133,1 +120,1 @@\n-  G1CardSetAllocator<G1CardSetContainer>* _allocators;\n+  G1CardSetAllocator* _allocators;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n-size_t G1CardSetAllocatorImpl::mem_size() const {\n-  return  _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n+inline size_t G1CardSetAllocator::mem_size() const {\n+  return  sizeof(*this) +\n+          _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n@@ -39,1 +40,1 @@\n-size_t G1CardSetAllocatorImpl::wasted_mem_size() const {\n+inline size_t G1CardSetAllocator::wasted_mem_size() const {\n@@ -46,1 +47,1 @@\n-inline uint G1CardSetAllocatorImpl::num_segments() const {\n+inline uint G1CardSetAllocator::num_segments() const {\n@@ -50,3 +51,2 @@\n-template <class Slot>\n-Slot* G1CardSetAllocator<Slot>::allocate() {\n-  Slot* slot = ::new (_free_slots_list.allocate()) Slot();\n+inline G1CardSetContainer* G1CardSetAllocator::allocate() {\n+  G1CardSetContainer* slot = ::new (_free_slots_list.allocate()) G1CardSetContainer();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}