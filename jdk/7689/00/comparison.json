{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,3 @@\n-template <class Slot>\n-G1CardSetAllocator<Slot>::G1CardSetAllocator(const char* name,\n-                                             const G1CardSetAllocOptions* alloc_options,\n-                                             G1CardSetFreeList* free_segment_list) :\n+G1CardSetAllocatorImpl::G1CardSetAllocatorImpl(const char* name,\n+                                               const G1CardSetAllocOptions* alloc_options,\n+                                               G1CardSetFreeList* free_segment_list) :\n@@ -44,2 +43,1 @@\n-template <class Slot>\n-G1CardSetAllocator<Slot>::~G1CardSetAllocator() {\n+G1CardSetAllocatorImpl::~G1CardSetAllocatorImpl() {\n@@ -49,9 +47,1 @@\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::free(Slot* slot) {\n-  assert(slot != nullptr, \"precondition\");\n-  slot->~Slot();\n-  _free_slots_list.release(slot);\n-}\n-\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::drop_all() {\n+void G1CardSetAllocatorImpl::drop_all() {\n@@ -62,2 +52,1 @@\n-template <class Slot>\n-void G1CardSetAllocator<Slot>::print(outputStream* os) {\n+void G1CardSetAllocatorImpl::print(outputStream* os) {\n@@ -82,0 +71,14 @@\n+template <class Slot>\n+G1CardSetAllocator<Slot>::G1CardSetAllocator(const char* name,\n+                                             const G1CardSetAllocOptions* alloc_options,\n+                                             G1CardSetFreeList* free_segment_list) :\n+  G1CardSetAllocatorImpl(name, alloc_options, free_segment_list)\n+{}\n+\n+template <class Slot>\n+void G1CardSetAllocator<Slot>::free(Slot* slot) {\n+  assert(slot != nullptr, \"precondition\");\n+  slot->~Slot();\n+  _free_slots_list.release(slot);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +87,1 @@\n-template <class Slot>\n-class G1CardSetAllocator {\n+class G1CardSetAllocatorImpl {\n@@ -90,0 +89,12 @@\n+  G1SegmentedArray<mtGCCardSet> _segmented_array;\n+protected:\n+  FreeListAllocator _free_slots_list;\n+public:\n+  G1CardSetAllocatorImpl(const char* name,\n+                         const G1CardSetAllocOptions* alloc_options,\n+                         G1CardSetFreeList* free_segment_list);\n+  ~G1CardSetAllocatorImpl();\n+\n+  \/\/ Deallocate all segments to the free segment list and reset this allocator. Must\n+  \/\/ be called in a globally synchronized area.\n+  void drop_all();\n@@ -91,3 +102,1 @@\n-  typedef G1SegmentedArray<Slot, mtGCCardSet> SegmentedArray;\n-  \/\/ G1CardSetContainer slot management within the G1CardSetSegments allocated\n-  \/\/ by this allocator.\n+  inline size_t mem_size() const;\n@@ -95,2 +104,6 @@\n-  SegmentedArray _segmented_array;\n-  FreeListAllocator _free_slots_list;\n+  inline size_t wasted_mem_size() const;\n+\n+  inline uint num_segments() const;\n+\n+  void print(outputStream* os);\n+};\n@@ -98,0 +111,2 @@\n+template <class Slot>\n+class G1CardSetAllocator : public G1CardSetAllocatorImpl {\n@@ -102,1 +117,2 @@\n-  ~G1CardSetAllocator();\n+\n+  ~G1CardSetAllocator() = default;\n@@ -107,4 +123,0 @@\n-  \/\/ Deallocate all segments to the free segment list and reset this allocator. Must\n-  \/\/ be called in a globally synchronized area.\n-  void drop_all();\n-\n@@ -112,3 +124,1 @@\n-    return sizeof(*this) +\n-      _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n-      _segmented_array.num_available_slots() * _segmented_array.slot_size();\n+    return sizeof(*this) + G1CardSetAllocatorImpl::mem_size();\n@@ -116,11 +126,0 @@\n-\n-  size_t wasted_mem_size() const {\n-    uint num_wasted_slots = _segmented_array.num_available_slots() -\n-                            _segmented_array.num_allocated_slots() -\n-                            (uint)_free_slots_list.pending_count();\n-    return num_wasted_slots * _segmented_array.slot_size();\n-  }\n-\n-  inline uint num_segments() { return _segmented_array.num_segments(); }\n-\n-  void print(outputStream* os);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1CardSetContainers.hpp\"\n+#include \"gc\/g1\/g1CardSetContainers.inline.hpp\"\n@@ -31,0 +31,1 @@\n+#include \"utilities\/globalCounter.inline.hpp\"\n@@ -33,2 +34,15 @@\n-#include \"gc\/g1\/g1CardSetContainers.inline.hpp\"\n-#include \"utilities\/globalCounter.inline.hpp\"\n+size_t G1CardSetAllocatorImpl::mem_size() const {\n+  return  _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n+          _segmented_array.num_available_slots() * _segmented_array.slot_size();\n+}\n+\n+size_t G1CardSetAllocatorImpl::wasted_mem_size() const {\n+  uint num_wasted_slots = _segmented_array.num_available_slots() -\n+                          _segmented_array.num_allocated_slots() -\n+                          (uint)_free_slots_list.pending_count();\n+  return num_wasted_slots * _segmented_array.slot_size();\n+}\n+\n+inline uint G1CardSetAllocatorImpl::num_segments() const {\n+  return _segmented_array.num_segments();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.inline.hpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-template <class Slot, MEMFLAGS flag>\n+template <MEMFLAGS flag>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArraySegment<flag>* G1SegmentedArray<Slot, flag>::create_new_segment(G1SegmentedArraySegment<flag>* const prev) {\n+template <MEMFLAGS flag>\n+G1SegmentedArraySegment<flag>* G1SegmentedArray<flag>::create_new_segment(G1SegmentedArraySegment<flag>* const prev) {\n@@ -128,1 +128,1 @@\n-           \"Mismatch %d != %d Slot %zu\", slot_size(), next->slot_size(), sizeof(Slot));\n+           \"Mismatch %d != %d\", slot_size(), next->slot_size());\n@@ -151,2 +151,2 @@\n-template <class Slot, MEMFLAGS flag>\n-uint G1SegmentedArray<Slot, flag>::slot_size() const {\n+template <MEMFLAGS flag>\n+uint G1SegmentedArray<flag>::slot_size() const {\n@@ -156,2 +156,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArray<Slot, flag>::G1SegmentedArray(const G1SegmentedArrayAllocOptions* alloc_options,\n+template <MEMFLAGS flag>\n+G1SegmentedArray<flag>::G1SegmentedArray(const G1SegmentedArrayAllocOptions* alloc_options,\n@@ -170,2 +170,2 @@\n-template <class Slot, MEMFLAGS flag>\n-G1SegmentedArray<Slot, flag>::~G1SegmentedArray() {\n+template <MEMFLAGS flag>\n+G1SegmentedArray<flag>::~G1SegmentedArray() {\n@@ -175,2 +175,2 @@\n-template <class Slot, MEMFLAGS flag>\n-void G1SegmentedArray<Slot, flag>::drop_all() {\n+template <MEMFLAGS flag>\n+void G1SegmentedArray<flag>::drop_all() {\n@@ -212,2 +212,2 @@\n-template <class Slot, MEMFLAGS flag>\n-void* G1SegmentedArray<Slot, flag>::allocate() {\n+template <MEMFLAGS flag>\n+void* G1SegmentedArray<flag>::allocate() {\n@@ -222,1 +222,1 @@\n-    Slot* slot = (Slot*)cur->get_new_slot();\n+    void* slot = cur->get_new_slot();\n@@ -235,2 +235,2 @@\n-template <class Slot, MEMFLAGS flag>\n-inline uint G1SegmentedArray<Slot, flag>::num_segments() const {\n+template <MEMFLAGS flag>\n+inline uint G1SegmentedArray<flag>::num_segments() const {\n@@ -254,2 +254,2 @@\n-template <class Slot, MEMFLAGS flag>\n-uint G1SegmentedArray<Slot, flag>::calculate_length() const {\n+template <MEMFLAGS flag>\n+uint G1SegmentedArray<flag>::calculate_length() const {\n@@ -262,1 +262,1 @@\n-template <class Slot, MEMFLAGS flag>\n+template <MEMFLAGS flag>\n@@ -264,1 +264,1 @@\n-void G1SegmentedArray<Slot, flag>::iterate_segments(SegmentClosure& closure) const {\n+void G1SegmentedArray<flag>::iterate_segments(SegmentClosure& closure) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}