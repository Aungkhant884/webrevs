{"files":[{"patch":"@@ -57,0 +57,17 @@\n+size_t G1CardSetAllocator::mem_size() const {\n+  return  sizeof(*this) +\n+          _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n+          _segmented_array.num_available_slots() * _segmented_array.slot_size();\n+}\n+\n+size_t G1CardSetAllocator::wasted_mem_size() const {\n+  uint num_wasted_slots = _segmented_array.num_available_slots() -\n+                          _segmented_array.num_allocated_slots() -\n+                          (uint)_free_slots_list.pending_count();\n+  return num_wasted_slots * _segmented_array.slot_size();\n+}\n+\n+uint G1CardSetAllocator::num_segments() const {\n+  return _segmented_array.num_segments();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-\/\/ Arena-like allocator for (card set) heap memory objects (Slot slots).\n+\/\/ Arena-like allocator for (card set) heap memory objects.\n@@ -67,20 +67,2 @@\n-\/\/ Allocation and deallocation in the first phase on G1CardSetContainer basis\n-\/\/ may occur by multiple threads at once.\n-\/\/\n-\/\/ Allocation occurs from an internal free list of G1CardSetContainers first,\n-\/\/ only then trying to bump-allocate from the current G1CardSetSegment. If there is\n-\/\/ none, this class allocates a new G1CardSetSegment (allocated from the C heap,\n-\/\/ asking the G1CardSetAllocOptions instance about sizes etc) and uses that one.\n-\/\/\n-\/\/ The SegmentStack free list is a linked list of G1CardSetContainers\n-\/\/ within all G1CardSetSegment instances allocated so far. It uses a separate\n-\/\/ pending list and global synchronization to avoid the ABA problem when the\n-\/\/ user frees a memory object.\n-\/\/\n-\/\/ The class also manages a few counters for statistics using atomic operations.\n-\/\/ Their values are only consistent within each other with extra global\n-\/\/ synchronization.\n-\/\/\n-\/\/ Since it is expected that every CardSet (and in extension each region) has its\n-\/\/ own set of allocators, there is intentionally no padding between them to save\n-\/\/ memory.\n+\/\/ Allocation occurs from an internal free list of objects first, if the free list is\n+\/\/ empty then tries to bump-allocate from the G1SegmentedArray.\n@@ -88,2 +70,0 @@\n-  \/\/ G1CardSetContainer slot management within the G1CardSetSegments allocated\n-  \/\/ by this allocator.\n@@ -95,2 +75,2 @@\n-                         const G1CardSetAllocOptions* alloc_options,\n-                         G1CardSetFreeList* free_segment_list);\n+                     const G1CardSetAllocOptions* alloc_options,\n+                     G1CardSetFreeList* free_segment_list);\n@@ -106,1 +86,1 @@\n-  inline size_t mem_size() const;\n+  size_t mem_size() const;\n@@ -108,1 +88,1 @@\n-  inline size_t wasted_mem_size() const;\n+  size_t wasted_mem_size() const;\n@@ -110,1 +90,1 @@\n-  inline uint num_segments() const;\n+  uint num_segments() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":8,"deletions":28,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -34,17 +34,0 @@\n-inline size_t G1CardSetAllocator::mem_size() const {\n-  return  sizeof(*this) +\n-          _segmented_array.num_segments() * sizeof(G1CardSetSegment) +\n-          _segmented_array.num_available_slots() * _segmented_array.slot_size();\n-}\n-\n-inline size_t G1CardSetAllocator::wasted_mem_size() const {\n-  uint num_wasted_slots = _segmented_array.num_available_slots() -\n-                          _segmented_array.num_allocated_slots() -\n-                          (uint)_free_slots_list.pending_count();\n-  return num_wasted_slots * _segmented_array.slot_size();\n-}\n-\n-inline uint G1CardSetAllocator::num_segments() const {\n-  return _segmented_array.num_segments();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.inline.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                                               G1SegmentedArrayFreeList<flag>* free_segment_list) :\n+                                         G1SegmentedArrayFreeList<flag>* free_segment_list) :\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}