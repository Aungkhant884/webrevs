{"files":[{"patch":"@@ -488,261 +488,33 @@\n-    public void testStaticDefinitionsInLocalandInner() {\n-        \/\/ local records can also be final\n-        assertOK(\"class R { \\n\" +\n-                \"    void m() { \\n\" +\n-                \"        final record RR(int x) { };\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        \/\/ Can't capture locals\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R { \\n\" +\n-                        \"    void m(int y) { \\n\" +\n-                        \"        record RR(int x) { public int x() { return y; }};\\n\" +\n-                        \"    }\\n\" +\n-                        \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R { \\n\" +\n-                        \"    void m() {\\n\" +\n-                        \"        int y;\\n\" +\n-                        \"        record RR(int x) { public int x() { return y; }};\\n\" +\n-                        \"    }\\n\" +\n-                        \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m() {\\n\" +\n-                \"        String hello = \\\"hello\\\";\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m() {\\n\" +\n-                \"        String hello = \\\"hello\\\";\\n\" +\n-                \"        record R(int i) {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m() {\\n\" +\n-                \"        String hello = \\\"hello\\\";\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m(String param) {\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(param);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m(String param) {\\n\" +\n-                \"        record R(int i) {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(param);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static void m(String param) {\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(param);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String instanceField = \\\"instance\\\";\\n\" +\n-                \"    public static void m() {\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(instanceField);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String instanceField = \\\"instance\\\";\\n\" +\n-                \"    public static void m(String param) {\\n\" +\n-                \"        record R(int i) {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(instanceField);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String instanceField = \\\"instance\\\";\\n\" +\n-                \"    public static void m(String param) {\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(instanceField);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        \/\/ instance fields\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R { \\n\" +\n-                        \"    int z = 0;\\n\" +\n-                        \"    void m() { \\n\" +\n-                        \"        record RR(int x) { public int x() { return z; }};\\n\" +\n-                        \"    }\\n\" +\n-                        \"}\");\n-\n-        \/\/ or type variables\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R<T> { \\n\" +\n-                        \"    void m() { \\n\" +\n-                        \"        record RR(T t) {};\\n\" +\n-                        \"    }\\n\" +\n-                        \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R {\\n\" +\n-                \"    static <U> U make(U u) { \/\/method is static\\n\" +\n-                \"        interface Checker {\\n\" +\n-                \"            void check(U u);\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class LocalEnum {\\n\" +\n-                \"    static <U> U getAndSet(U u) { \/\/method is static\\n\" +\n-                \"        enum X {\\n\" +\n-                \"            A;\\n\" +\n-                \"            U u;\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\\n\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R {\\n\" +\n-                \"    static <U> U make(U u) { \/\/method is static\\n\" +\n-                \"        record Checker() {\\n\" +\n-                \"            void check(U u);\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R {\\n\" +\n-                \"    <U> U make(U u) { \/\/ enclosing method is not static\\n\" +\n-                \"        interface Checker {\\n\" +\n-                \"            void check(U u);\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class LocalEnum {\\n\" +\n-                \"    <U> U getAndSet(U u) { \/\/ enclosing method is not static\\n\" +\n-                \"        enum X {\\n\" +\n-                \"            A;\\n\" +\n-                \"            U u;\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\\n\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class R {\\n\" +\n-                \"    <U> U make(U u) { \/\/ enclosing method is not static\\n\" +\n-                \"        record Checker() {\\n\" +\n-                \"            void check(U u);\\n\" +\n-                \"        }\\n\" +\n-                \"        return null;\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static <T> void main(String[] args) {\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        T t = null;\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+    public void testStaticLocals() {\n+        \/\/ static locals can't capture local variables, instance fields or type variables\n+        for (String s : List.of(\n+                \"record RR(int x) { public int x() { return y; }};\",\n+                \"record RR(int x) { public int x() { return z; }};\",\n+                \"record RR(int x) { public int x() { return instance; }};\",\n+                \"record RR(T t) {};\",\n+                \"record RR(U u) {};\",\n+\n+                \"interface I { default int x() { return y; }};\",\n+                \"interface I { default int x() { return z; }};\",\n+                \"interface I { default int x() { return instance; }};\",\n+                \"interface I { default int x(T t) { return 0; }};\",\n+                \"interface I { default int x(U u) { return 0; }};\",\n+\n+                \"enum E { A; int x() { return y; }};\",\n+                \"enum E { A; int x() { return z; }};\",\n+                \"enum E { A; int x() { return instance; }};\",\n+                \"enum E { A; int x(T t) { return 0; }};\",\n+                \"enum E { A; int x(U u) { return 0; }};\"\n+        )) {\n+            assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"\"\"\n+                class R<T> {\n+                    int instance = 0;\n+                    <U> U m(int y) {\n+                        int z;\n+                        #S\n+                        return null;\n+                    }\n+                }\n+                \"\"\".replaceFirst(\"#S\", s));\n+        }\n@@ -750,14 +522,32 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static <T> void main(String[] args) {\\n\" +\n-                \"        record R(int i) {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        T t = null;\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ a similar example but a bit more complex\n+        for (String s : List.of(\n+                \"record R() { void test1() { class X { void test2() { System.err.println(localVar); } } } }\",\n+                \"record R() { void test1() { class X { void test2() { System.err.println(param); } } } }\",\n+                \"record R() {void test1() { class X { void test2() { System.err.println(instanceField); } } } }\",\n+                \"record R() { void test1() { class X { T t; } } }\",\n+                \"record R() { void test1() { class X { U u; } } }\",\n+\n+                \"interface I { default void test1() { class X { void test2() { System.err.println(localVar); } } } }\",\n+                \"interface I() { default void test1() { class X { void test2() {System.err.println(param);} } } }\",\n+                \"interface I { default void test1() { class X { void test2() { System.err.println(instanceField); } } } }\",\n+                \"interface I { default void test1() { class X { T t; } } }\",\n+                \"interface I() { default void test1() { class X {U u;} } }\",\n+\n+                \"enum E { A; void test1() { class X { void test2() { System.err.println(localVar); } } } }\",\n+                \"enum E { A; void test1() { class X { void test2() {System.err.println(param);} } } }\",\n+                \"enum E { A; void test1() { class X { void test2() { System.err.println(instanceField); } } } }\",\n+                \"enum E { A; void test1() { class X { T t; } } }\",\n+                \"enum E { A; void test1() { class X {U u;} } }\"\n+        )) {\n+            assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                    \"\"\"\n+                    class C<T> {\n+                        String instanceField = \"instance\";\n+                        static <U> U m(String param) {\n+                            String localVar = \"local\";\n+                            #S\n+                            return null;\n+                    }\n+                }\n+                \"\"\".replaceFirst(\"#S\", s));\n+        }\n@@ -765,15 +555,4 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    public static <T> void main(String[] args) {\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        T t = null;\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ can't self-shadow\n+        for (String s : List.of(\"record R() {}\", \"interface R {}\", \"enum R { A }\")) {\n+            assertFail(\"compiler.err.already.defined\", \"class R { void m() { #S } }\".replaceFirst(\"#S\", s));\n+        }\n@@ -781,16 +560,4 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ can't be explicitly static\n+        for (String s : List.of(\"static record RR() { }\", \"static interface I {}\", \"static enum E { A }\")) {\n+            assertFail(\"compiler.err.illegal.start.of.expr\", \"class R { void m() { #S } }\".replaceFirst(\"#S\", s));\n+        }\n@@ -798,12 +565,8 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        enum E {\\n\" +\n-                \"            A;\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                System.err.println(hello);\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ but static fields can be accessed\n+        for (String s : List.of(\n+                \"record RR() { public int x() { return z; } };\",\n+                \"interface I { default int x() { return z; } }\",\n+                \"enum E { A; int x() { return z; } }\"\n+        )) {\n+            assertOK(\"class R { static int z = 0; void m() { #S } }\".replaceFirst(\"#S\", s));\n+        }\n@@ -811,15 +574,3 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        record R() {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ local records can also be final\n+        assertOK(\"class R { void m() { final record RR(int x) { }; } }\");\n+    }\n@@ -827,11 +578,29 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        record R() {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                System.err.println(hello);\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+    public void testStaticDefinitionsInInnerClasses() {\n+        \/\/ static defs in inner classes can't capture instance fields or type variables\n+        for (String s : List.of(\n+                \"\"\"\n+                record R() {\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -839,15 +608,26 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                interface I {\n+                    default void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -855,11 +635,30 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        interface I {\\n\" +\n-                \"            public default void test1() {\\n\" +\n-                \"                System.err.println(hello);\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -867,15 +666,37 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        static class SC {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                class X {\\n\" +\n-                \"                    public void test2() {\\n\" +\n-                \"                        System.err.println(hello);\\n\" +\n-                \"                    }\\n\" +\n-                \"                }\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                static class SC {\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\"\n+        )) {\n+            assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                    \"\"\"\n+                    class C<T> {\n+                        String field = \"field\";\n+                        class Inner {\n+                            #S\n+                        }\n+                    }\n+                    \"\"\".replaceFirst(\"#S\", s));\n+        }\n@@ -883,11 +704,51 @@\n-        assertFail(\"compiler.err.non-static.cant.be.ref\",\n-                \"class C {\\n\" +\n-                \"    String hello = \\\"hello\\\";\\n\" +\n-                \"    class Inner {\\n\" +\n-                \"        static class SC {\\n\" +\n-                \"            public void test1() {\\n\" +\n-                \"                System.err.println(hello);\\n\" +\n-                \"            }\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+        \/\/ another, more complex, example\n+        \/\/ static defs in inner classes can't capture instance locals, fields or type variables\n+        for (String s : List.of(\n+                \"\"\"\n+                record R() {\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2() { System.err.println(field); } }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test() { System.err.println(param); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2() { System.err.println(param); } }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test() { System.err.println(local); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2() { System.err.println(local); } }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                record R() {\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -895,9 +756,0 @@\n-        \/\/ but static fields are OK\n-        assertOK(\"class R { \\n\" +\n-                \"    static int z = 0;\\n\" +\n-                \"    void m() { \\n\" +\n-                \"        record RR(int x) { public int x() { return z; }};\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n-        \/\/ Can't self-shadow\n-        assertFail(\"compiler.err.already.defined\",\n@@ -905,3 +757,10 @@\n-                class R {\n-                    void m() {\n-                        record R(int x) { };\n+                interface I {\n+                    default void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n@@ -910,0 +769,1 @@\n+                \"\"\",\n@@ -911,3 +771,4 @@\n-        );\n-        \/\/ can't be explicitly static\n-        assertFail(\"compiler.err.illegal.start.of.expr\",\n+                interface I {\n+                    default void test() { System.err.println(param); }\n+                }\n+                \"\"\",\n@@ -915,3 +776,5 @@\n-                class R {\n-                    void m() {\n-                        static record RR(int x) { };\n+                interface I {\n+                    default void test1() {\n+                        class X {\n+                            void test2() { System.err.println(param); }\n+                        }\n@@ -920,0 +783,1 @@\n+                \"\"\",\n@@ -921,1 +785,25 @@\n-        );\n+                interface I {\n+                    default void test() { System.err.println(local); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X {\n+                            void test2() { System.err.println(local); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                interface I {\n+                    default void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -923,2 +811,0 @@\n-        \/\/ positive cases\n-        assertOK(\n@@ -926,11 +812,12 @@\n-                import java.security.*;\n-                class Test {\n-                    static Test newInstance(Object provider) {\n-                        return new Test() {\n-                            private final PrivilegedExceptionAction<KeyStore> action = new PrivilegedExceptionAction<KeyStore>() {\n-                                public KeyStore run() throws Exception {\n-                                    if (provider == null) {}\n-                                    return null;\n-                                }\n-                            };\n-                        };\n+                enum E {\n+                    A;\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n@@ -939,0 +826,1 @@\n+                \"\"\",\n@@ -940,1 +828,45 @@\n-        );\n+                enum E {\n+                    A;\n+                    void test() { System.err.println(param); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(param); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test() { System.err.println(local); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(local); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                enum E {\n+                    A;\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\",\n@@ -942,1 +874,0 @@\n-        assertOK(\n@@ -944,16 +875,10 @@\n-                import java.security.*;\n-                class Test {\n-                    static Test newInstance(Object provider) {\n-                        return new Test() {\n-                            int m(PrivilegedExceptionAction<KeyStore> a) { return 0; }\n-                            {\n-                                m(\n-                                    new PrivilegedExceptionAction<KeyStore>() {\n-                                        public KeyStore run() throws Exception {\n-                                            if (provider == null) {}\n-                                            return null;\n-                                        }\n-                                    }\n-                                );\n-                            }\n-                        };\n+                static class SC {\n+                    void test() { System.err.println(field); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(field); }\n+                        }\n@@ -962,0 +887,1 @@\n+                \"\"\",\n@@ -963,1 +889,54 @@\n-        );\n+                static class SC {\n+                    void test() { System.err.println(param); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(param); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test() { System.err.println(local); }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X {\n+                            void test2() { System.err.println(local); }\n+                        }\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test(T t) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                static class SC {\n+                    void test1() {\n+                        class X { void test2(T t) {} }\n+                    }\n+                }\n+                \"\"\"\n+        )) {\n+            assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                    \"\"\"\n+                    class C<T> {\n+                        String field = \"field\";\n+                        <U> U m(String param) {\n+                            String local = \"local\";\n+                            class Local {\n+                                class Inner { #S }\n+                            }\n+                            return null;\n+                        }\n+                    }\n+                    \"\"\".replaceFirst(\"#S\", s));\n+        }\n@@ -1000,0 +979,27 @@\n+    public void staticMethodsInInnerClasses() {\n+        \/\/ inner classes can contain static methods\n+        assertOK(\n+                \"\"\"\n+                class C {\n+                    class Inner {\n+                        \/\/ static method inside inner class\n+                        static void m() {}\n+                    }\n+                }\n+                \"\"\"\n+        );\n+\n+        assertOK(\n+                \"\"\"\n+                class C {\n+                     void m() {\n+                         new Object() {\n+                            \/\/ static method inside inner class\n+                            static void m() {}\n+                         };\n+                     }\n+                }\n+                \"\"\"\n+        );\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":453,"deletions":447,"binary":false,"changes":900,"status":"modified"}]}