{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-template <typename T, bool parallel>\n+template <typename T, bool Parallel>\n@@ -35,2 +35,5 @@\n-  ZArray<T>* const _array;\n-  int              _next;\n+  const T*       _next;\n+  const T* const _end;\n+\n+  bool next_serial(T* elem);\n+  bool next_parallel(T* elem);\n@@ -39,1 +42,2 @@\n-  ZArrayIteratorImpl(ZArray<T>* array);\n+  ZArrayIteratorImpl(const T* array, size_t length);\n+  ZArrayIteratorImpl(const ZArray<T>* array);\n@@ -44,6 +48,2 @@\n-\/\/ Iterator types\n-#define ZARRAY_SERIAL      false\n-#define ZARRAY_PARALLEL    true\n-\n-template <typename T> using ZArrayIterator = ZArrayIteratorImpl<T, ZARRAY_SERIAL>;\n-template <typename T> using ZArrayParallelIterator = ZArrayIteratorImpl<T, ZARRAY_PARALLEL>;\n+template <typename T> using ZArrayIterator = ZArrayIteratorImpl<T, false \/* Parallel *\/>;\n+template <typename T> using ZArrayParallelIterator = ZArrayIteratorImpl<T, true \/* Parallel *\/>;\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,12 +30,19 @@\n-template <typename T, bool parallel>\n-inline ZArrayIteratorImpl<T, parallel>::ZArrayIteratorImpl(ZArray<T>* array) :\n-    _array(array),\n-    _next(0) {}\n-\n-template <typename T, bool parallel>\n-inline bool ZArrayIteratorImpl<T, parallel>::next(T* elem) {\n-  if (parallel) {\n-    const int next = Atomic::fetch_and_add(&_next, 1);\n-    if (next < _array->length()) {\n-      *elem = _array->at(next);\n-      return true;\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next_serial(T* elem) {\n+  if (_next == _end) {\n+    return false;\n+  }\n+\n+  *elem = *_next;\n+  _next++;\n+\n+  return true;\n+}\n+\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next_parallel(T* elem) {\n+  const T* old_next = Atomic::load(&_next);\n+\n+  for (;;) {\n+    if (old_next == _end) {\n+      return false;\n@@ -43,3 +50,5 @@\n-  } else {\n-    if (_next < _array->length()) {\n-      *elem = _array->at(_next++);\n+\n+    const T* const new_next = old_next + 1;\n+    const T* const prev_next = Atomic::cmpxchg(&_next, old_next, new_next);\n+    if (prev_next == old_next) {\n+      *elem = *old_next;\n@@ -48,0 +57,2 @@\n+\n+    old_next = prev_next;\n@@ -49,0 +60,6 @@\n+}\n+\n+template <typename T, bool Parallel>\n+inline ZArrayIteratorImpl<T, Parallel>::ZArrayIteratorImpl(const T* array, size_t length) :\n+    _next(array),\n+    _end(array + length) {}\n@@ -50,2 +67,11 @@\n-  \/\/ No more elements\n-  return false;\n+template <typename T, bool Parallel>\n+inline ZArrayIteratorImpl<T, Parallel>::ZArrayIteratorImpl(const ZArray<T>* array) :\n+    ZArrayIteratorImpl<T, Parallel>(array->is_empty() ? NULL : array->adr_at(0), array->length()) {}\n+\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next(T* elem) {\n+  if (Parallel) {\n+    return next_parallel(elem);\n+  } else {\n+    return next_serial(elem);\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.inline.hpp","additions":44,"deletions":18,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.hpp\"\n@@ -29,3 +30,0 @@\n-template<typename T>\n-class ZGranuleMapIterator;\n-\n@@ -35,1 +33,1 @@\n-  friend class ZGranuleMapIterator<T>;\n+  template <typename> friend class ZGranuleMapIterator;\n@@ -56,5 +54,1 @@\n-class ZGranuleMapIterator : public StackObj {\n-public:\n-  const ZGranuleMap<T>* const _map;\n-  size_t                      _next;\n-\n+class ZGranuleMapIterator : public ZArrayIteratorImpl<T, false \/* Parallel *\/> {\n@@ -62,4 +56,1 @@\n-  ZGranuleMapIterator(const ZGranuleMap<T>* map);\n-\n-  bool next(T* value);\n-  bool next(T** value);\n+  ZGranuleMapIterator(const ZGranuleMap<T>* granule_map);\n","filename":"src\/hotspot\/share\/gc\/z\/zGranuleMap.hpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.inline.hpp\"\n@@ -89,25 +90,2 @@\n-inline ZGranuleMapIterator<T>::ZGranuleMapIterator(const ZGranuleMap<T>* map) :\n-    _map(map),\n-    _next(0) {}\n-\n-template <typename T>\n-inline bool ZGranuleMapIterator<T>::next(T* value) {\n-  if (_next < _map->_size) {\n-    *value = _map->_map[_next++];\n-    return true;\n-  }\n-\n-  \/\/ End of map\n-  return false;\n-}\n-\n-template <typename T>\n-inline bool ZGranuleMapIterator<T>::next(T** value) {\n-  if (_next < _map->_size) {\n-    *value = _map->_map + _next++;\n-    return true;\n-  }\n-\n-  \/\/ End of map\n-  return false;\n-}\n+inline ZGranuleMapIterator<T>::ZGranuleMapIterator(const ZGranuleMap<T>* granule_map) :\n+    ZArrayIteratorImpl<T, false \/* Parallel *\/>(granule_map->_map, granule_map->_size) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zGranuleMap.inline.hpp","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"gc\/z\/zRelocationSet.hpp\"\n+\n@@ -28,2 +30,0 @@\n-class ZRelocationSet;\n-class ZRelocationSetParallelIterator;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.hpp\"\n@@ -47,6 +48,2 @@\n-template <bool parallel>\n-class ZRelocationSetIteratorImpl : public StackObj {\n-private:\n-  ZRelocationSet* const _relocation_set;\n-  size_t                _next;\n-\n+template <bool Parallel>\n+class ZRelocationSetIteratorImpl : public ZArrayIteratorImpl<ZForwarding*, Parallel> {\n@@ -55,2 +52,0 @@\n-\n-  bool next(ZForwarding** forwarding);\n@@ -59,15 +54,2 @@\n-\/\/ Iterator types\n-#define ZRELOCATIONSET_SERIAL      false\n-#define ZRELOCATIONSET_PARALLEL    true\n-\n-class ZRelocationSetIterator : public ZRelocationSetIteratorImpl<ZRELOCATIONSET_SERIAL> {\n-public:\n-  ZRelocationSetIterator(ZRelocationSet* relocation_set) :\n-      ZRelocationSetIteratorImpl<ZRELOCATIONSET_SERIAL>(relocation_set) {}\n-};\n-\n-class ZRelocationSetParallelIterator : public ZRelocationSetIteratorImpl<ZRELOCATIONSET_PARALLEL> {\n-public:\n-  ZRelocationSetParallelIterator(ZRelocationSet* relocation_set) :\n-      ZRelocationSetIteratorImpl<ZRELOCATIONSET_PARALLEL>(relocation_set) {}\n-};\n+using ZRelocationSetIterator = ZRelocationSetIteratorImpl<false \/* Parallel *\/>;\n+using ZRelocationSetParallelIterator = ZRelocationSetIteratorImpl<true \/* Parallel *\/>;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.hpp","additions":6,"deletions":24,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.inline.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -30,26 +30,3 @@\n-template <bool parallel>\n-inline ZRelocationSetIteratorImpl<parallel>::ZRelocationSetIteratorImpl(ZRelocationSet* relocation_set) :\n-    _relocation_set(relocation_set),\n-    _next(0) {}\n-\n-template <bool parallel>\n-inline bool ZRelocationSetIteratorImpl<parallel>::next(ZForwarding** forwarding) {\n-  const size_t nforwardings = _relocation_set->_nforwardings;\n-\n-  if (parallel) {\n-    if (_next < nforwardings) {\n-      const size_t next = Atomic::fetch_and_add(&_next, 1u);\n-      if (next < nforwardings) {\n-        *forwarding = _relocation_set->_forwardings[next];\n-        return true;\n-      }\n-    }\n-  } else {\n-    if (_next < nforwardings) {\n-      *forwarding = _relocation_set->_forwardings[_next++];\n-      return true;\n-    }\n-  }\n-\n-  return false;\n-}\n+template <bool Parallel>\n+inline ZRelocationSetIteratorImpl<Parallel>::ZRelocationSetIteratorImpl(ZRelocationSet* relocation_set) :\n+    ZArrayIteratorImpl<ZForwarding*, Parallel>(relocation_set->_forwardings, relocation_set->_nforwardings) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.inline.hpp","additions":5,"deletions":28,"binary":false,"changes":33,"status":"modified"}]}