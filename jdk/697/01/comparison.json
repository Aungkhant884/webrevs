{"files":[{"patch":"@@ -28,1 +28,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,7 +30,1 @@\n-template <typename T>\n-class ZArray : public GrowableArrayCHeap<T, mtGC> {\n-public:\n-  ZArray();\n-\n-  void transfer(ZArray<T>* from);\n-};\n+template <typename T> using ZArray = GrowableArrayCHeap<T, mtGC>;\n@@ -39,1 +32,1 @@\n-template <typename T, bool parallel>\n+template <typename T, bool Parallel>\n@@ -42,2 +35,5 @@\n-  ZArray<T>* const _array;\n-  int              _next;\n+  const T*       _next;\n+  const T* const _end;\n+\n+  bool next_serial(T* elem);\n+  bool next_parallel(T* elem);\n@@ -46,1 +42,2 @@\n-  ZArrayIteratorImpl(ZArray<T>* array);\n+  ZArrayIteratorImpl(const T* array, size_t length);\n+  ZArrayIteratorImpl(const ZArray<T>* array);\n@@ -51,6 +48,2 @@\n-\/\/ Iterator types\n-#define ZARRAY_SERIAL      false\n-#define ZARRAY_PARALLEL    true\n-\n-template <typename T> using ZArrayIterator = ZArrayIteratorImpl<T, ZARRAY_SERIAL>;\n-template <typename T> using ZArrayParallelIterator = ZArrayIteratorImpl<T, ZARRAY_PARALLEL>;\n+template <typename T> using ZArrayIterator = ZArrayIteratorImpl<T, false \/* Parallel *\/>;\n+template <typename T> using ZArrayParallelIterator = ZArrayIteratorImpl<T, true \/* Parallel *\/>;\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.hpp","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"memory\/allocation.inline.hpp\"\n@@ -31,3 +30,8 @@\n-template <typename T>\n-inline ZArray<T>::ZArray() :\n-    GrowableArrayCHeap<T, mtGC>(0) {}\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next_serial(T* elem) {\n+  if (_next == _end) {\n+    return false;\n+  }\n+\n+  *elem = *_next;\n+  _next++;\n@@ -35,9 +39,1 @@\n-template <typename T>\n-inline void ZArray<T>::transfer(ZArray<T>* from) {\n-  assert(this->_data == NULL, \"Should be empty\");\n-  this->_data = from->_data;\n-  this->_len = from->_len;\n-  this->_max = from->_max;\n-  from->_data = NULL;\n-  from->_len = 0;\n-  from->_max = 0;\n+  return true;\n@@ -46,4 +42,3 @@\n-template <typename T, bool parallel>\n-inline ZArrayIteratorImpl<T, parallel>::ZArrayIteratorImpl(ZArray<T>* array) :\n-    _array(array),\n-    _next(0) {}\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next_parallel(T* elem) {\n+  const T* old_next = Atomic::load(&_next);\n@@ -51,7 +46,3 @@\n-template <typename T, bool parallel>\n-inline bool ZArrayIteratorImpl<T, parallel>::next(T* elem) {\n-  if (parallel) {\n-    const int next = Atomic::fetch_and_add(&_next, 1);\n-    if (next < _array->length()) {\n-      *elem = _array->at(next);\n-      return true;\n+  for (;;) {\n+    if (old_next == _end) {\n+      return false;\n@@ -59,3 +50,5 @@\n-  } else {\n-    if (_next < _array->length()) {\n-      *elem = _array->at(_next++);\n+\n+    const T* const new_next = old_next + 1;\n+    const T* const prev_next = Atomic::cmpxchg(&_next, old_next, new_next);\n+    if (prev_next == old_next) {\n+      *elem = *old_next;\n@@ -64,0 +57,2 @@\n+\n+    old_next = prev_next;\n@@ -65,0 +60,10 @@\n+}\n+\n+template <typename T, bool Parallel>\n+inline ZArrayIteratorImpl<T, Parallel>::ZArrayIteratorImpl(const T* array, size_t length) :\n+    _next(array),\n+    _end(array + length) {}\n+\n+template <typename T, bool Parallel>\n+inline ZArrayIteratorImpl<T, Parallel>::ZArrayIteratorImpl(const ZArray<T>* array) :\n+    ZArrayIteratorImpl<T, Parallel>(array->adr_at(0), (size_t)array->length()) {}\n@@ -66,2 +71,7 @@\n-  \/\/ No more elements\n-  return false;\n+template <typename T, bool Parallel>\n+inline bool ZArrayIteratorImpl<T, Parallel>::next(T* elem) {\n+  if (Parallel) {\n+    return next_parallel(elem);\n+  } else {\n+    return next_serial(elem);\n+  }\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.inline.hpp","additions":39,"deletions":29,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"gc\/z\/zRelocationSet.hpp\"\n+\n@@ -28,2 +30,0 @@\n-class ZRelocationSet;\n-class ZRelocationSetParallelIterator;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.hpp\"\n@@ -47,6 +48,2 @@\n-template <bool parallel>\n-class ZRelocationSetIteratorImpl : public StackObj {\n-private:\n-  ZRelocationSet* const _relocation_set;\n-  size_t                _next;\n-\n+template <bool Parallel>\n+class ZRelocationSetIteratorImpl : public ZArrayIteratorImpl<ZForwarding*, Parallel> {\n@@ -55,2 +52,0 @@\n-\n-  bool next(ZForwarding** forwarding);\n@@ -59,15 +54,2 @@\n-\/\/ Iterator types\n-#define ZRELOCATIONSET_SERIAL      false\n-#define ZRELOCATIONSET_PARALLEL    true\n-\n-class ZRelocationSetIterator : public ZRelocationSetIteratorImpl<ZRELOCATIONSET_SERIAL> {\n-public:\n-  ZRelocationSetIterator(ZRelocationSet* relocation_set) :\n-      ZRelocationSetIteratorImpl<ZRELOCATIONSET_SERIAL>(relocation_set) {}\n-};\n-\n-class ZRelocationSetParallelIterator : public ZRelocationSetIteratorImpl<ZRELOCATIONSET_PARALLEL> {\n-public:\n-  ZRelocationSetParallelIterator(ZRelocationSet* relocation_set) :\n-      ZRelocationSetIteratorImpl<ZRELOCATIONSET_PARALLEL>(relocation_set) {}\n-};\n+using ZRelocationSetIterator = ZRelocationSetIteratorImpl<false \/* Parallel *\/>;\n+using ZRelocationSetParallelIterator = ZRelocationSetIteratorImpl<true \/* Parallel *\/>;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.hpp","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zArray.inline.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -30,26 +30,3 @@\n-template <bool parallel>\n-inline ZRelocationSetIteratorImpl<parallel>::ZRelocationSetIteratorImpl(ZRelocationSet* relocation_set) :\n-    _relocation_set(relocation_set),\n-    _next(0) {}\n-\n-template <bool parallel>\n-inline bool ZRelocationSetIteratorImpl<parallel>::next(ZForwarding** forwarding) {\n-  const size_t nforwardings = _relocation_set->_nforwardings;\n-\n-  if (parallel) {\n-    if (_next < nforwardings) {\n-      const size_t next = Atomic::fetch_and_add(&_next, 1u);\n-      if (next < nforwardings) {\n-        *forwarding = _relocation_set->_forwardings[next];\n-        return true;\n-      }\n-    }\n-  } else {\n-    if (_next < nforwardings) {\n-      *forwarding = _relocation_set->_forwardings[_next++];\n-      return true;\n-    }\n-  }\n-\n-  return false;\n-}\n+template <bool Parallel>\n+inline ZRelocationSetIteratorImpl<Parallel>::ZRelocationSetIteratorImpl(ZRelocationSet* relocation_set) :\n+    ZArrayIteratorImpl<ZForwarding*, Parallel>(relocation_set->_forwardings, relocation_set->_nforwardings) {}\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.inline.hpp","additions":4,"deletions":27,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-      deferred.transfer(&_deferred);\n+      deferred.swap(&_deferred);\n","filename":"src\/hotspot\/share\/gc\/z\/zSafeDelete.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -438,0 +438,6 @@\n+  void swap(GrowableArrayWithAllocator<E, Derived>* other) {\n+    ::swap(this->_data, other->_data);\n+    ::swap(this->_len, other->_len);\n+    ::swap(this->_max, other->_max);\n+  }\n+\n@@ -690,1 +696,1 @@\n-  GrowableArrayCHeap(int initial_max) :\n+  GrowableArrayCHeap(int initial_max = 0) :\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}