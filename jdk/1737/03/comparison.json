{"files":[{"patch":"@@ -220,0 +220,6 @@\n+     * <p> If the length of {@code cbuf} is zero, then no characters are read\n+     * and {@code 0} is returned; otherwise, there is an attempt to read at\n+     * least one character.  If no character is available because the stream is\n+     * at its end, the value {@code -1} is returned; otherwise, at least one\n+     * character is read and stored into {@code cbuf}.\n+     *\n@@ -237,0 +243,6 @@\n+     * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n+     * returned; otherwise, there is an attempt to read at least one character.\n+     * If no character is available because the stream is at its end, the value\n+     * {@code -1} is returned; otherwise, at least one character is read and\n+     * stored into {@code cbuf}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.CharArrayReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.LineNumberReader;\n+import java.io.PushbackReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8248383\n+ * @summary Ensure that zero is returned for read into zero length array\n+ * @run testng ReadIntoZeroLengthArray\n+ *\/\n+public class ReadIntoZeroLengthArray {\n+    private File file;\n+\n+    private char[] cbuf0;\n+    private char[] cbuf1;\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        file = File.createTempFile(\"foo\", \"bar\", new File(\".\"));\n+        cbuf0 = new char[0];\n+        cbuf1 = new char[1];\n+    }\n+\n+    @AfterTest\n+    public void teardown() throws IOException {\n+        file.delete();\n+    }\n+\n+    @DataProvider(name = \"readers\")\n+    public Object[][] getReaders() throws IOException {\n+        Reader fileReader = new FileReader(file);\n+        return new Object[][] {\n+            {new LineNumberReader(fileReader)},\n+            {new CharArrayReader(new char[] {27})},\n+            {new PushbackReader(fileReader)},\n+            {fileReader},\n+            {new StringReader(new String(new byte[] {(byte)42}))}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"readers\")\n+    void test0(Reader r) throws IOException {\n+        Assert.assertEquals(r.read(cbuf0), 0);\n+    }\n+\n+    @Test(dataProvider = \"readers\")\n+    void test1(Reader r) throws IOException {\n+        Assert.assertEquals(r.read(cbuf1, 0, 0), 0);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Reader\/ReadIntoZeroLengthArray.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}