{"files":[{"patch":"@@ -4422,4 +4422,2 @@\n-  void pack_26(Register dest0, Register dest1, Register dest2, Register src) {\n-    const Register t3 = x28;\n-    const Register t4 = x29;\n-    assert_different_registers(dest0, dest1, dest2, src, t3, t4);\n+  void pack_26(Register dest0, Register dest1, Register dest2, Register src, Regster tmp1, Register tmp2) {\n+    assert_different_registers(dest0, dest1, dest2, src, tmp1, tmp2);\n@@ -4430,3 +4428,3 @@\n-    __ ld(t3, Address(src, sizeof(jlong)));\n-    __ slli(t3, t3, 26);\n-    __ add(dest0, dest0, t3);       \/\/ 52 bits in dest0\n+    __ ld(tmp1, Address(src, sizeof(jlong)));\n+    __ slli(tmp1, tmp1, 26);\n+    __ add(dest0, dest0, tmp1);       \/\/ 52 bits in dest0\n@@ -4434,3 +4432,3 @@\n-    __ ld(t4, Address(src, 2 * sizeof(jlong)));\n-    __ slli(t3, t4, 52);\n-    __ add(dest0, dest0, t3);       \/\/ dest0 is full\n+    __ ld(tmp2, Address(src, 2 * sizeof(jlong)));\n+    __ slli(tmp1, tmp2, 52);\n+    __ add(dest0, dest0, tmp1);       \/\/ dest0 is full\n@@ -4438,1 +4436,1 @@\n-    __ srli(dest1, t4, 12);         \/\/ 14-bit in dest1\n+    __ srli(dest1, tmp2, 12);         \/\/ 14-bit in dest1\n@@ -4440,3 +4438,3 @@\n-    __ ld(t3, Address(src, 3 * sizeof(jlong)));\n-    __ slli(t3, t3, 14);\n-    __ add(dest1, dest1, t3);       \/\/ 40-bit in dest1\n+    __ ld(tmp1, Address(src, 3 * sizeof(jlong)));\n+    __ slli(tmp1, tmp1, 14);\n+    __ add(dest1, dest1, tmp1);       \/\/ 40-bit in dest1\n@@ -4444,3 +4442,3 @@\n-    __ ld(t3, Address(src, 4 * sizeof(jlong)));\n-    __ slli(t4, t3, 40);\n-    __ add(dest1, dest1, t4);       \/\/ dest1 is full\n+    __ ld(tmp1, Address(src, 4 * sizeof(jlong)));\n+    __ slli(tmp2, tmp1, 40);\n+    __ add(dest1, dest1, tmp2);       \/\/ dest1 is full\n@@ -4448,1 +4446,0 @@\n-    __ srli(t3, t3, 24);\n@@ -4450,1 +4447,2 @@\n-      __ add(dest2, zr, t3);        \/\/ 2 bits in dest2\n+      __ srli(tmp1, tmp1, 24);\n+      __ add(dest2, zr, tmp1);        \/\/ 2 bits in dest2\n@@ -4454,1 +4452,2 @@\n-      __ beq(zr, t3, OK);           \/\/ 2 bits\n+      __ srli(tmp1, tmp1, 24);\n+      __ beq(zr, tmp1, OK);           \/\/ 2 bits\n@@ -4464,2 +4463,2 @@\n-  void pack_26(Register dest0, Register dest1, Register src) {\n-    pack_26(dest0, dest1, noreg, src);\n+  void pack_26(Register dest0, Register dest1, Register src, Register tmp1, Register tmp2) {\n+    pack_26(dest0, dest1, noreg, src, tmp1, tmp2);\n@@ -4490,0 +4489,1 @@\n+    __ enter();\n@@ -4491,0 +4491,1 @@\n+    const int64_t bits2 = right_n_bits(2);\n@@ -4495,1 +4496,1 @@\n-    RegSetIterator<Register> regs = RegSet::range(x10, x31).begin();\n+    RegSetIterator<Register> regs = RegSet::range(x14, x31).begin();\n@@ -4498,1 +4499,3 @@\n-    const Register input_start = *regs, length = *++regs, acc_start = *++regs, r_start = *++regs;\n+    const Register input_start = c_rarg0, length = c_rarg1, acc_start = c_rarg2, r_start = c_rarg3;\n+    \/\/ Temporal registers\n+    const Register tmp1 = t0, tmp2 = t1, tmp3 = t2;\n@@ -4504,5 +4507,1 @@\n-    pack_26(R_0, R_1, r_start);\n-\n-    const Register tmp1 = t0;\n-    const Register tmp2 = t1;\n-    const Register tmp3 = t2;\n+    pack_26(R_0, R_1, r_start, tmp1, tmp2);\n@@ -4519,1 +4518,1 @@\n-    pack_26(U_0, U_1, U_2, acc_start);\n+    pack_26(U_0, U_1, U_2, acc_start, tmp1, tmp2);\n@@ -4546,2 +4545,8 @@\n-      wide_mul(U_0, U_0HI, S_0, R_0);  wide_madd(U_0, U_0HI, S_1, RR_1, tmp1, tmp2); wide_madd(U_0, U_0HI, S_2, RR_0, tmp1, tmp2);\n-      wide_mul(U_1, U_1HI, S_0, R_1);  wide_madd(U_1, U_1HI, S_1, R_0, tmp1, tmp2);  wide_madd(U_1, U_1HI, S_2, RR_1, tmp1, tmp2);\n+      wide_mul(U_0, U_0HI, S_0, R_0);\n+      wide_madd(U_0, U_0HI, S_1, RR_1, tmp1, tmp2);\n+      wide_madd(U_0, U_0HI, S_2, RR_0, tmp1, tmp2);\n+\n+      wide_mul(U_1, U_1HI, S_0, R_1);\n+      wide_madd(U_1, U_1HI, S_1, R_0, tmp1, tmp2);\n+      wide_madd(U_1, U_1HI, S_2, RR_1, tmp1, tmp2);\n+\n@@ -4563,1 +4568,0 @@\n-      const int64_t bits2 = right_n_bits(2);\n@@ -4585,1 +4589,0 @@\n-    const int64_t bits26 = right_n_bits(26);\n@@ -4587,1 +4590,2 @@\n-    __ andi(tmp1, U_0, bits26); \/\/ Take lowest 26 bits\n+    __ slli(tmp1, U_0, 38); \/\/ Take lowest 26 bits\n+    __ srli(tmp1, tmp1, 38);\n@@ -4591,3 +4595,3 @@\n-    __ srli(tmp2, U_0, 26);\n-    __ andi(tmp2, tmp2, bits26); \/\/ Take next 27-52 bits\n-    __ sd(tmp2, Address(acc_start, sizeof (jlong))); \/\/ Second 26-bit limb\n+    __ slli(tmp1, U_0, 12); \/\/ Take next 27-52 bits\n+    __ srli(tmp1, tmp1, 38);\n+    __ sd(tmp1, Address(acc_start, sizeof (jlong))); \/\/ Second 26-bit limb\n@@ -4597,4 +4601,4 @@\n-    __ slli(tmp2, U_1, 12);\n-    __ addw(tmp1, tmp1, tmp2);\n-    __ andi(tmp3, tmp1, bits26, tmp2); \/\/ Take remaining bits of tmp1\n-    __ sd(tmp3, Address(acc_start, 2 * sizeof (jlong))); \/\/ Third 26-bit limb\n+    __ slli(tmp2, U_1, 50);\n+    __ srli(tmp2, tmp2, 38);\n+    __ add(tmp1, tmp1, tmp2);\n+    __ sd(tmp1, Address(acc_start, 2 * sizeof (jlong))); \/\/ Third 26-bit limb\n@@ -4603,2 +4607,2 @@\n-    __ srli(tmp3, U_1, 14); \/\/ Already used up 14 bits\n-    __ andi(tmp1, tmp3, bits26); \/\/ Clear all other bits from tmp3\n+    __ slli(tmp1, U_1, 24); \/\/ Already used up 14 bits\n+    __ srli(tmp1, tmp1, 38); \/\/ Clear all other bits from tmp3\n@@ -4609,1 +4613,1 @@\n-    __ andi(tmp2, U_2, 3); \/\/ Clear all bits in U_2 except for first 2\n+    __ andi(tmp2, U_2, bits2); \/\/ Clear all bits in U_2 except for first 2\n@@ -4611,1 +4615,1 @@\n-    __ addw(tmp1, tmp1, tmp2);\n+    __ add(tmp1, tmp1, tmp2);\n@@ -4616,0 +4620,1 @@\n+    __ leave(); \/\/ Required for proper stackwalking\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":51,"deletions":46,"binary":false,"changes":97,"status":"modified"}]}