{"files":[{"patch":"@@ -4422,1 +4422,1 @@\n-  void pack_26(Register dest0, Register dest1, Register dest2, Register src, Regster tmp1, Register tmp2) {\n+  void pack_26(Register dest0, Register dest1, Register dest2, Register src, Register tmp1, Register tmp2) {\n@@ -4448,1 +4448,1 @@\n-      __ add(dest2, zr, tmp1);        \/\/ 2 bits in dest2\n+      __ mv(dest2, tmp1);               \/\/ 2 bits in dest2\n@@ -4496,1 +4496,1 @@\n-    RegSetIterator<Register> regs = RegSet::range(x14, x31).begin();\n+    RegSetIterator<Register> regs = RegSet::range(x13, x31).begin();\n@@ -4500,2 +4500,0 @@\n-    \/\/ Temporal registers\n-    const Register tmp1 = t0, tmp2 = t1, tmp3 = t2;\n@@ -4507,1 +4505,1 @@\n-    pack_26(R_0, R_1, r_start, tmp1, tmp2);\n+    pack_26(R_0, R_1, r_start, t1, t2);\n@@ -4511,4 +4509,4 @@\n-    __ srli(tmp1, R_0, 2);\n-    __ shadd(RR_0, tmp1, tmp1, tmp2, 2);\n-    __ srli(tmp1, R_1, 2);\n-    __ shadd(RR_1, tmp1, tmp1, tmp2, 2);\n+    __ srli(t1, R_0, 2);\n+    __ shadd(RR_0, t1, t1, t2, 2);\n+    __ srli(t1, R_1, 2);\n+    __ shadd(RR_1, t1, t1, t2, 2);\n@@ -4518,1 +4516,1 @@\n-    pack_26(U_0, U_1, U_2, acc_start, tmp1, tmp2);\n+    pack_26(U_0, U_1, U_2, acc_start, t1, t2);\n@@ -4523,2 +4521,2 @@\n-    __ addi(tmp1, zr, checked_cast<u1>(BLOCK_LENGTH));\n-    __ blt(length, tmp1, DONE); {\n+    __ mv(t1, checked_cast<u1>(BLOCK_LENGTH));\n+    __ blt(length, t1, DONE); {\n@@ -4532,3 +4530,3 @@\n-      __ cad(S_0, S_0, U_0, tmp1); \/\/ Add U_0 to S_0 with carry output to tmp1\n-      __ cadc(S_1, S_1, U_1, tmp1); \/\/ Add U_1 with carry to S_1 with carry output to tmp1\n-      __ adc(S_2, zr, U_2, tmp1);\n+      __ cad(S_0, S_0, U_0, t1); \/\/ Add U_0 to S_0 with carry output to t1\n+      __ cadc(S_1, S_1, U_1, t1); \/\/ Add U_1 with carry to S_1 with carry output to t1\n+      __ add(S_2, U_2, t1);\n@@ -4546,2 +4544,2 @@\n-      wide_madd(U_0, U_0HI, S_1, RR_1, tmp1, tmp2);\n-      wide_madd(U_0, U_0HI, S_2, RR_0, tmp1, tmp2);\n+      wide_madd(U_0, U_0HI, S_1, RR_1, t1, t2);\n+      wide_madd(U_0, U_0HI, S_2, RR_0, t1, t2);\n@@ -4550,2 +4548,2 @@\n-      wide_madd(U_1, U_1HI, S_1, R_0, tmp1, tmp2);\n-      wide_madd(U_1, U_1HI, S_2, RR_1, tmp1, tmp2);\n+      wide_madd(U_1, U_1HI, S_1, R_0, t1, t2);\n+      wide_madd(U_1, U_1HI, S_2, RR_1, t1, t2);\n@@ -4553,1 +4551,1 @@\n-      __ andi(U_2, R_0, 3);\n+      __ andi(U_2, R_0, bits2);\n@@ -4560,2 +4558,2 @@\n-      __ cad(U_1, U_1, U_0HI, tmp1); \/\/ Add U_0HI to U_1 with carry output to tmp1\n-      __ adc(U_2, U_2, U_1HI, tmp1);\n+      __ cad(U_1, U_1, U_0HI, t1); \/\/ Add U_0HI to U_1 with carry output to t1\n+      __ adc(U_2, U_2, U_1HI, t1);\n@@ -4567,1 +4565,1 @@\n-      __ srli(tmp1, U_2, 2);\n+      __ srli(t1, U_2, 2);\n@@ -4569,4 +4567,4 @@\n-      __ shadd(tmp1, tmp1, tmp1, tmp2, 2); \/\/ tmp1 is impossible to overflow since two leftmost bits are zero'ed in 'srli(tmp1, U_2, 2)'\n-      __ cad(U_0, U_0, tmp1, tmp3); \/\/ Add tmp1 (= (U_2 >> 2) * 5) to U_0 with carry output to tmp3\n-      __ cadc(U_1, U_1, zr, tmp3); \/\/ Add carry to U_1 with carry output to tmp3\n-      __ add(U_2, U_2, tmp3);\n+      __ shadd(t1, t1, t1, t2, 2); \/\/ t1 is impossible to overflow since two leftmost bits are zero'ed in 'srli(t1, U_2, 2)'\n+      __ cad(U_0, U_0, t1, t2); \/\/ Add t1 (= (U_2 >> 2) * 5) to U_0 with carry output to t2\n+      __ cad(U_1, U_1, t2, t2); \/\/ Add carry to U_1 with carry output to t2\n+      __ add(U_2, U_2, t2);\n@@ -4576,2 +4574,2 @@\n-      __ addi(tmp1, zr, checked_cast<u1>(BLOCK_LENGTH));\n-      __ bge(length, tmp1, LOOP);\n+      __ mv(t1, checked_cast<u1>(BLOCK_LENGTH));\n+      __ bge(length, t1, LOOP);\n@@ -4581,6 +4579,6 @@\n-    __ srli(tmp1, U_2, 2);\n-    __ shadd(tmp1, tmp1, tmp1, tmp2, 2); \/\/ tmp1 = U_2 * 5\n-    __ cad(U_0, U_0, tmp1, tmp3); \/\/ U_0 += U_2 * 5 with carry output to tmp3\n-    __ cadc(U_1, U_1, zr, tmp3); \/\/ Add carry to U_1 with carry output to tmp3\n-    __ andi(U_2, U_2, 3);\n-    __ add(U_2, U_2, tmp3); \/\/ Add carry to U_2\n+    __ srli(t1, U_2, 2);\n+    __ shadd(t1, t1, t1, t2, 2); \/\/ t1 = U_2 * 5\n+    __ cad(U_0, U_0, t1, t2); \/\/ U_0 += U_2 * 5 with carry output to t2\n+    __ cad(U_1, U_1, t2, t2); \/\/ Add carry to U_1 with carry output to t2\n+    __ andi(U_2, U_2, bits2);\n+    __ add(U_2, U_2, t2); \/\/ Add carry to U_2\n@@ -4590,3 +4588,3 @@\n-    __ slli(tmp1, U_0, 38); \/\/ Take lowest 26 bits\n-    __ srli(tmp1, tmp1, 38);\n-    __ sd(tmp1, Address(acc_start)); \/\/ First 26-bit limb\n+    __ slli(t1, U_0, 38); \/\/ Take lowest 26 bits\n+    __ srli(t1, t1, 38);\n+    __ sd(t1, Address(acc_start)); \/\/ First 26-bit limb\n@@ -4595,3 +4593,3 @@\n-    __ slli(tmp1, U_0, 12); \/\/ Take next 27-52 bits\n-    __ srli(tmp1, tmp1, 38);\n-    __ sd(tmp1, Address(acc_start, sizeof (jlong))); \/\/ Second 26-bit limb\n+    __ slli(t1, U_0, 12); \/\/ Take next 27-52 bits\n+    __ srli(t1, t1, 38);\n+    __ sd(t1, Address(acc_start, sizeof (jlong))); \/\/ Second 26-bit limb\n@@ -4600,5 +4598,5 @@\n-    __ srli(tmp1, U_0, 52);\n-    __ slli(tmp2, U_1, 50);\n-    __ srli(tmp2, tmp2, 38);\n-    __ add(tmp1, tmp1, tmp2);\n-    __ sd(tmp1, Address(acc_start, 2 * sizeof (jlong))); \/\/ Third 26-bit limb\n+    __ srli(t1, U_0, 52);\n+    __ slli(t2, U_1, 50);\n+    __ srli(t2, t2, 38);\n+    __ add(t1, t1, t2);\n+    __ sd(t1, Address(acc_start, 2 * sizeof (jlong))); \/\/ Third 26-bit limb\n@@ -4607,3 +4605,3 @@\n-    __ slli(tmp1, U_1, 24); \/\/ Already used up 14 bits\n-    __ srli(tmp1, tmp1, 38); \/\/ Clear all other bits from tmp3\n-    __ sd(tmp1, Address(acc_start, 3 * sizeof (jlong))); \/\/ Fourth 26-bit limb\n+    __ slli(t1, U_1, 24); \/\/ Already used up 14 bits\n+    __ srli(t1, t1, 38); \/\/ Clear all other bits from t1\n+    __ sd(t1, Address(acc_start, 3 * sizeof (jlong))); \/\/ Fourth 26-bit limb\n@@ -4612,5 +4610,5 @@\n-    __ srli(tmp1, U_1, 40);\n-    __ andi(tmp2, U_2, bits2); \/\/ Clear all bits in U_2 except for first 2\n-    __ slli(tmp2, tmp2, 24);\n-    __ add(tmp1, tmp1, tmp2);\n-    __ sd(tmp1, Address(acc_start, 4 * sizeof (jlong))); \/\/ Fifth 26-bit limb\n+    __ srli(t1, U_1, 40);\n+    __ andi(t2, U_2, bits2); \/\/ Clear all bits in U_2 except for first 2\n+    __ slli(t2, t2, 24);\n+    __ add(t1, t1, t2);\n+    __ sd(t1, Address(acc_start, 4 * sizeof (jlong))); \/\/ Fifth 26-bit limb\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":53,"deletions":55,"binary":false,"changes":108,"status":"modified"}]}