{"files":[{"patch":"@@ -40,0 +40,1 @@\n+\n@@ -41,1 +42,1 @@\n- * @test TestMaxTLAB\n+ * @test TestAlignment\n@@ -44,1 +45,1 @@\n- * @summary Check EpsilonMaxTLAB options\n+ * @summary Check Epsilon TLAB options with unusual object alignment\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestAlignment.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -113,13 +113,6 @@\n-        ArrayList<String> vmOpts = new ArrayList<>();\n-\n-        Collections.addAll(vmOpts, new String[] {\"-XX:+UseG1GC\",\n-                                                 \"-XX:G1HeapRegionSize=\" + HEAP_REGION_SIZE,\n-                                                 \"-Xmx\" + heapsize,\n-                                                 \"-Xlog:pagesize,gc+init,gc+heap+coops=debug\",\n-                                                 \"-XX:\" + (largePageEnabled ? \"+\" : \"-\") + \"UseLargePages\" });\n-        if (Platform.is64bit()) {\n-            vmOpts.add(\"-XX:ObjectAlignmentInBytes=8\");\n-        }\n-        vmOpts.add(\"-version\");\n-\n-        return vmOpts;\n+        return List.of(\"-XX:+UseG1GC\",\n+                       \"-XX:G1HeapRegionSize=\" + HEAP_REGION_SIZE,\n+                       \"-Xmx\" + heapsize,\n+                       \"-Xlog:pagesize,gc+init,gc+heap+coops=debug\",\n+                       \"-XX:\" + (largePageEnabled ? \"+\" : \"-\") + \"UseLargePages\",\n+                       \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n- * @summary Basic testing of various GC pause verification during the G1 concurrent cycle.\n+ * @summary Basic testing of various GC pause verification during the G1 concurrent cycle. It leaves\n+ *          out G1VerifyBitmaps as this is a debug-only option.\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerificationInConcurrentCycle.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/* @test TestMetaspacePerfCountersSerial\n+\/* @test id=Serial-64\n@@ -55,1 +55,1 @@\n-\/* @test TestMetaspacePerfCountersParallel\n+\/* @test id=Parallel-64\n@@ -70,1 +70,1 @@\n-\/* @test TestMetaspacePerfCountersG1\n+\/* @test id=G1-64\n@@ -85,1 +85,1 @@\n-\/* @test TestMetaspacePerfCountersShenandoah\n+\/* @test id=Shenandoah-64\n@@ -96,2 +96,2 @@\n- * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n@@ -100,1 +100,1 @@\n-\/* @test TestMetaspacePerfCountersSerial\n+\/* @test id=Serial-32\n@@ -114,1 +114,1 @@\n-\/* @test TestMetaspacePerfCountersParallel\n+\/* @test id=Parallel-32\n@@ -128,1 +128,1 @@\n-\/* @test TestMetaspacePerfCountersG1\n+\/* @test id=G1-32\n@@ -142,1 +142,1 @@\n-\/* @test TestMetaspacePerfCountersShenandoah\n+\/* @test id=Shenandoah-32\n@@ -153,1 +153,1 @@\n- * @run main\/othervm -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n+ * @run main\/othervm -XX:+UsePerfData -XX:+UseShenandoahGC gc.metaspace.TestMetaspacePerfCounters\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n- * @run main\/othervm -Xlog:class+load,class+unload=trace -XX:+UseSerialGC -XX:+UsePerfData -Xint gc.metaspace.TestPerfCountersAndMemoryPools\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestPerfCountersAndMemoryPools.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.debug\n@@ -33,1 +32,0 @@\n- * @run driver TestSelectiveBarrierFlags -Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation -XX:+ShenandoahVerifyOptoBarriers\n@@ -40,1 +38,1 @@\n- * @requires !vm.debug\n+ * @requires vm.debug\n@@ -42,2 +40,1 @@\n- * @run driver TestSelectiveBarrierFlags -Xint\n- * @run driver TestSelectiveBarrierFlags -Xbatch -XX:CompileThreshold=100 -XX:TieredStopAtLevel=1\n+ * @run driver TestSelectiveBarrierFlags -Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation -XX:+ShenandoahVerifyOptoBarriers\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}