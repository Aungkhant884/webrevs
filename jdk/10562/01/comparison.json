{"files":[{"patch":"@@ -757,1 +757,1 @@\n-     * and unparking.\n+     * and unparking while pinned.\n@@ -778,1 +778,1 @@\n-     * and unparking.\n+     * and unparking while pinned.\n@@ -782,1 +782,8 @@\n-        VThreadRunner.run(this::testJoin33);\n+        \/\/ need at least two carrier threads due to pinning\n+        int previousParallelism = VThreadRunner.ensureParallelism(2);\n+        try {\n+            VThreadRunner.run(this::testJoin33);\n+        } finally {\n+            \/\/ restore\n+            VThreadRunner.setParallelism(previousParallelism);\n+        }\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -30,1 +30,2 @@\n- * @modules java.management\n+ * @modules java.base\/java.lang:+open java.management\n+ * @library \/test\/lib\n@@ -37,1 +38,1 @@\n- * @test\n+ * @test id=no-vmcontinuations\n@@ -40,1 +41,2 @@\n- * @modules java.management\n+ * @modules java.base\/java.lang:+open java.management\n+ * @library \/test\/lib\n@@ -51,0 +53,1 @@\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -64,0 +67,2 @@\n+        \/\/ need at least two carrier threads due to pinning\n+        VThreadRunner.ensureParallelism(2);\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -34,1 +34,1 @@\n- * @test\n+ * @test id=no-vmcontinuations\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.reflect.Field;\n@@ -27,0 +28,1 @@\n+import java.util.concurrent.ForkJoinPool;\n@@ -30,1 +32,1 @@\n- * Helper class for running tasks in a virtual thread.\n+ * Helper class to support tests running tasks a in virtual thread.\n@@ -143,0 +145,37 @@\n+\n+    \/**\n+     * Returns the virtual thread scheduler.\n+     *\/\n+    private static ForkJoinPool defaultScheduler() {\n+        try {\n+            var clazz = Class.forName(\"java.lang.VirtualThread\");\n+            var field = clazz.getDeclaredField(\"DEFAULT_SCHEDULER\");\n+            field.setAccessible(true);\n+            return (ForkJoinPool) field.get(null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Sets the virtual thread scheduler's target parallelism.\n+     * @return the previous parallelism level\n+     *\/\n+    public static int setParallelism(int size) {\n+        return defaultScheduler().setParallelism(size);\n+    }\n+\n+    \/**\n+     * Ensures that the virtual thread scheduler's target parallelism is at least\n+     * the given size. If the target parallelism is less than the given size then\n+     * it is changed to the given size.\n+     * @return the previous parallelism level\n+     *\/\n+    public static int ensureParallelism(int size) {\n+        ForkJoinPool pool = defaultScheduler();\n+        int parallelism = pool.getParallelism();\n+        if (size > parallelism) {\n+            pool.setParallelism(size);\n+        }\n+        return parallelism;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}