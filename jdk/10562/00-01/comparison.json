{"files":[{"patch":"@@ -783,1 +783,2 @@\n-        try (var restorer = VThreadRunner.ensureParallelism(2)) {\n+        int previousParallelism = VThreadRunner.ensureParallelism(2);\n+        try {\n@@ -785,0 +786,3 @@\n+        } finally {\n+            \/\/ restore\n+            VThreadRunner.setParallelism(previousParallelism);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -38,1 +38,1 @@\n- * @test\n+ * @test id=no-vmcontinuations\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=default\n@@ -34,1 +34,1 @@\n- * @test\n+ * @test id=no-vmcontinuations\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * Helper class for running tests tasks in a virtual thread.\n+ * Helper class to support tests running tasks a in virtual thread.\n@@ -147,6 +147,1 @@\n-     * Ensures that the virtual thread scheduler's target parallelism is at least the\n-     * given size. If the current parallelism is less than size then it is changed to\n-     * size. This method returns an AutoCloseable, its close method restores the\n-     * parallelism.\n-     *\n-     * @return an object to restore the parallelism\n+     * Returns the virtual thread scheduler.\n@@ -154,2 +149,1 @@\n-    public static AutoCloseable ensureParallelism(int size) {\n-        ForkJoinPool pool;\n+    private static ForkJoinPool defaultScheduler() {\n@@ -160,1 +154,1 @@\n-            pool = (ForkJoinPool) field.get(null);\n+            return (ForkJoinPool) field.get(null);\n@@ -164,0 +158,9 @@\n+    }\n+\n+    \/**\n+     * Sets the virtual thread scheduler's target parallelism.\n+     * @return the previous parallelism level\n+     *\/\n+    public static int setParallelism(int size) {\n+        return defaultScheduler().setParallelism(size);\n+    }\n@@ -165,0 +168,8 @@\n+    \/**\n+     * Ensures that the virtual thread scheduler's target parallelism is at least\n+     * the given size. If the target parallelism is less than the given size then\n+     * it is changed to the given size.\n+     * @return the previous parallelism level\n+     *\/\n+    public static int ensureParallelism(int size) {\n+        ForkJoinPool pool = defaultScheduler();\n@@ -166,3 +177,1 @@\n-        if (parallelism >= size) {\n-            return () -> { };\n-        } else {\n+        if (size > parallelism) {\n@@ -170,10 +179,0 @@\n-            return new AutoCloseable() {\n-                boolean closed;\n-                @Override\n-                public void close() {\n-                    if (!closed) {\n-                        closed = true;\n-                        pool.setParallelism(parallelism);\n-                    }\n-                }\n-            };\n@@ -181,0 +180,1 @@\n+        return parallelism;\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}