{"files":[{"patch":"@@ -757,1 +757,1 @@\n-     * and unparking.\n+     * and unparking while pinned.\n@@ -778,1 +778,1 @@\n-     * and unparking.\n+     * and unparking while pinned.\n@@ -782,1 +782,4 @@\n-        VThreadRunner.run(this::testJoin33);\n+        \/\/ need at least two carrier threads due to pinning\n+        try (var restorer = VThreadRunner.ensureParallelism(2)) {\n+            VThreadRunner.run(this::testJoin33);\n+        }\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @modules java.management\n+ * @modules java.base\/java.lang:+open java.management\n+ * @library \/test\/lib\n@@ -40,1 +41,2 @@\n- * @modules java.management\n+ * @modules java.base\/java.lang:+open java.management\n+ * @library \/test\/lib\n@@ -51,0 +53,1 @@\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -64,0 +67,2 @@\n+        \/\/ need at least two carrier threads due to pinning\n+        VThreadRunner.ensureParallelism(2);\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.reflect.Field;\n@@ -27,0 +28,1 @@\n+import java.util.concurrent.ForkJoinPool;\n@@ -30,1 +32,1 @@\n- * Helper class for running tasks in a virtual thread.\n+ * Helper class for running tests tasks in a virtual thread.\n@@ -143,0 +145,37 @@\n+\n+    \/**\n+     * Ensures that the virtual thread scheduler's target parallelism is at least the\n+     * given size. If the current parallelism is less than size then it is changed to\n+     * size. This method returns an AutoCloseable, its close method restores the\n+     * parallelism.\n+     *\n+     * @return an object to restore the parallelism\n+     *\/\n+    public static AutoCloseable ensureParallelism(int size) {\n+        ForkJoinPool pool;\n+        try {\n+            var clazz = Class.forName(\"java.lang.VirtualThread\");\n+            var field = clazz.getDeclaredField(\"DEFAULT_SCHEDULER\");\n+            field.setAccessible(true);\n+            pool = (ForkJoinPool) field.get(null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        int parallelism = pool.getParallelism();\n+        if (parallelism >= size) {\n+            return () -> { };\n+        } else {\n+            pool.setParallelism(size);\n+            return new AutoCloseable() {\n+                boolean closed;\n+                @Override\n+                public void close() {\n+                    if (!closed) {\n+                        closed = true;\n+                        pool.setParallelism(parallelism);\n+                    }\n+                }\n+            };\n+        }\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}