{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/weakProcessorPhases.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/weakProcessorPhases.hpp\"\n+#include \"gc\/shared\/weakProcessorPhase.hpp\"\n@@ -84,4 +84,2 @@\n-  typedef WeakProcessorPhases::Iterator Iterator;\n-\n-  for (Iterator it = WeakProcessorPhases::oopstorage_iterator(); !it.is_end(); ++it) {\n-    WeakProcessorPhase phase = *it;\n+  constexpr EnumRange<WeakProcessorPhase> phase_range{};\n+  for (WeakProcessorPhase phase : phase_range) {\n@@ -90,1 +88,2 @@\n-    StorageState* cur_state = _storage_states.par_state(phase);\n+    int state_index = checked_cast<int>(phase_range.index(phase));\n+    StorageState* cur_state = _storage_states.par_state(state_index);\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.inline.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_WEAKPROCESSORPHASE_HPP\n+#define SHARE_GC_SHARED_WEAKPROCESSORPHASE_HPP\n+\n+#include \"gc\/shared\/oopStorageSet.hpp\"\n+#include \"utilities\/enumIterator.hpp\"\n+\n+enum class WeakProcessorPhase : uint {};\n+\n+ENUMERATOR_VALUE_RANGE(WeakProcessorPhase, 0, OopStorageSet::weak_count);\n+\n+#endif \/\/ SHARE_GC_SHARED_WEAKPROCESSORPHASE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorPhase.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/shared\/weakProcessorPhases.hpp\"\n+#include \"gc\/shared\/weakProcessorPhase.hpp\"\n@@ -103,1 +103,3 @@\n-  return _worker_data[phase];\n+  size_t index = EnumRange<WeakProcessorPhase>().index(phase);\n+  assert(index < ARRAY_SIZE(_worker_data), \"invalid phase\");\n+  return _worker_data[index];\n@@ -206,3 +208,2 @@\n-    typedef WeakProcessorPhases::Iterator Iterator;\n-    for (Iterator it = WeakProcessorPhases::oopstorage_iterator(); !it.is_end(); ++it) {\n-      log_phase_summary(*it, indent);\n+    for (WeakProcessorPhase phase : EnumRange<WeakProcessorPhase>()) {\n+      log_phase_summary(phase, indent);\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorPhaseTimes.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/shared\/weakProcessorPhases.hpp\"\n+#include \"gc\/shared\/weakProcessorPhase.hpp\"\n@@ -47,3 +47,1 @@\n-  static const uint worker_data_count = WeakProcessorPhases::oopstorage_phase_count;\n-  WorkerDataArray<double>* _worker_data[worker_data_count];\n-\n+  WorkerDataArray<double>* _worker_data[EnumRange<WeakProcessorPhase>().size()];\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorPhaseTimes.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shared\/weakProcessorPhases.hpp\"\n-#include \"utilities\/debug.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-#ifdef ASSERT\n-\n-void WeakProcessorPhases::Iterator::verify_nonsingular() const {\n-  assert(_limit != singular_value, \"precondition\");\n-}\n-\n-void WeakProcessorPhases::Iterator::verify_category_match(const Iterator& other) const {\n-  verify_nonsingular();\n-  assert(_limit == other._limit, \"precondition\");\n-}\n-\n-void WeakProcessorPhases::Iterator::verify_dereferenceable() const {\n-  verify_nonsingular();\n-  assert(_index < _limit, \"precondition\");\n-}\n-\n-#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorPhases.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_WEAKPROCESSORPHASES_HPP\n-#define SHARE_GC_SHARED_WEAKPROCESSORPHASES_HPP\n-\n-#include \"gc\/shared\/oopStorageSet.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-class BoolObjectClosure;\n-class OopClosure;\n-class OopStorage;\n-\n-class WeakProcessorPhases : AllStatic {\n-public:\n-  class Iterator;\n-\n-  enum Phase {\n-    \/\/ Implicit phase values for oopstorages.\n-  };\n-\n-  static const uint oopstorage_phase_start = 0;\n-  static const uint oopstorage_phase_count = OopStorageSet::weak_count;\n-  static const uint phase_count = oopstorage_phase_count;\n-\n-  static Iterator oopstorage_iterator();\n-};\n-\n-typedef WeakProcessorPhases::Phase WeakProcessorPhase;\n-\n-class WeakProcessorPhases::Iterator {\n-  friend class WeakProcessorPhases;\n-\n-  uint _index;\n-  uint _limit;\n-\n-  Iterator(uint index, uint limit) : _index(index), _limit(limit) {}\n-\n-  static const uint singular_value = UINT_MAX;\n-  void verify_nonsingular() const NOT_DEBUG_RETURN;\n-  void verify_category_match(const Iterator& other) const NOT_DEBUG_RETURN;\n-  void verify_dereferenceable() const NOT_DEBUG_RETURN;\n-\n-public:\n-  \/\/ Construct a singular iterator for later assignment.  The only valid\n-  \/\/ operations are destruction and assignment.\n-  Iterator() : _index(singular_value), _limit(singular_value) {}\n-\n-  bool is_end() const {\n-    verify_nonsingular();\n-    return _index == _limit;\n-  }\n-\n-  bool operator==(const Iterator& other) const {\n-    verify_category_match(other);\n-    return _index == other._index;\n-  }\n-\n-  bool operator!=(const Iterator& other) const {\n-    return !operator==(other);\n-  }\n-\n-  WeakProcessorPhase operator*() const {\n-    verify_dereferenceable();\n-    return static_cast<WeakProcessorPhase>(_index);\n-  }\n-\n-  \/\/ Phase doesn't have members, so no operator->().\n-  Iterator& operator++() {\n-    verify_dereferenceable();\n-    ++_index;\n-    return *this;\n-  }\n-\n-  Iterator operator++(int) {\n-    verify_dereferenceable();\n-    return Iterator(_index++, _limit);\n-  }\n-\n-  Iterator begin() const {\n-    verify_nonsingular();\n-    return *this;\n-  }\n-\n-  Iterator end() const {\n-    verify_nonsingular();\n-    return Iterator(_limit, _limit);\n-  }\n-};\n-\n-inline WeakProcessorPhases::Iterator WeakProcessorPhases::oopstorage_iterator() {\n-  return Iterator(oopstorage_phase_start, oopstorage_phase_start + oopstorage_phase_count);\n-}\n-\n-#endif \/\/ SHARE_GC_SHARED_WEAKPROCESSORPHASES_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorPhases.hpp","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -43,1 +43,0 @@\n-\/\/ WeakProcessorPhases is an example because of oopstorage.\n","filename":"src\/hotspot\/share\/utilities\/enumIterator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}