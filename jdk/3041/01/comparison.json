{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,0 +245,1 @@\n+    NewMultiArray* nma;\n@@ -249,0 +250,4 @@\n+    } else if ((nma = x->array()->as_NewMultiArray()) != NULL &&\n+               (length = nma->dims()->at(0)->as_Constant()) != NULL) {\n+      assert(length->type()->as_IntConstant() != NULL, \"array length must be integer\");\n+      set_constant(length->type()->as_IntConstant()->value());\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -987,0 +987,1 @@\n+      (array->as_Constant() != NULL) ||\n@@ -988,1 +989,2 @@\n-      (array->as_NewArray() && array->as_NewArray()->length() && array->as_NewArray()->length()->type()->is_constant())) {\n+      (array->as_NewArray() && array->as_NewArray()->length() && array->as_NewArray()->length()->type()->is_constant()) ||\n+      (array->as_NewMultiArray() && array->as_NewMultiArray()->dims()->at(0)->type()->is_constant())) {\n@@ -1004,0 +1006,1 @@\n+      (array->as_Constant() != NULL) ||\n@@ -1005,1 +1008,2 @@\n-      (array->as_NewArray() && array->as_NewArray()->length() && array->as_NewArray()->length()->type()->is_constant())) {\n+      (array->as_NewArray() && array->as_NewArray()->length() && array->as_NewArray()->length()->type()->is_constant()) ||\n+      (array->as_NewMultiArray() && array->as_NewMultiArray()->dims()->at(0)->type()->is_constant())) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8263707\n+ * @summary Test range check for constant array and NewMultiArray is removed properly\n+ * @requires vm.debug == true & vm.compiler1.enabled\n+ *\n+ * @library \/test\/lib\n+ * @run main\/othervm compiler.c1.TestRangeCheckEliminated\n+ *\n+ * @author Hui Shi\n+*\/\n+\n+package compiler.c1;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestRangeCheckEliminated {\n+    static final String eliminated = \"can be fully eliminated\";\n+    public static void main(String[] args) throws Throwable {\n+        boolean error = false;\n+        String[] procArgs = new String[] {\n+            \"-XX:CompileCommand=compileonly,*test_constant_array::constant_array_rc\",\n+            \"-XX:TieredStopAtLevel=1\",\n+            \"-XX:+TraceRangeCheckElimination\",\n+            \"-XX:-BackgroundCompilation\",\n+            \"compiler.c1.TestRangeCheckEliminated$test_constant_array\"\n+            };\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        String output = new OutputAnalyzer(pb.start()).getOutput();\n+        \/\/ should have 2 \"can be fully eliminated\"\n+        System.out.println(output);\n+        if ((output.split(eliminated, -1).length - 1) == 2) {\n+            System.out.println(\"test_constant_array pass\");\n+        } else {\n+            System.out.println(\"test_constant_array fail\");\n+            error = true;\n+        }\n+\n+        procArgs = new String[] {\n+            \"-XX:CompileCommand=compileonly,*test_multi_constant_array::multi_constant_array_rc\",\n+            \"-XX:TieredStopAtLevel=1\",\n+            \"-XX:+TraceRangeCheckElimination\",\n+            \"-XX:-BackgroundCompilation\",\n+            \"compiler.c1.TestRangeCheckEliminated$test_multi_constant_array\"\n+            };\n+\n+        pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        output = new OutputAnalyzer(pb.start()).getOutput();\n+        \/\/ should have 1 \"can be fully eliminated\"\n+        System.out.println(output);\n+        if ((output.split(eliminated, -1).length - 1) == 1) {\n+            System.out.println(\"test_multi_constant_array pass\");\n+        } else {\n+            System.out.println(\"test_multi_constant_array fail\");\n+            error = true;\n+        }\n+\n+        procArgs = new String[] {\n+            \"-XX:CompileCommand=compileonly,*test_multi_new_array::multi_new_array_rc\",\n+            \"-XX:TieredStopAtLevel=1\",\n+            \"-XX:+TraceRangeCheckElimination\",\n+            \"-XX:-BackgroundCompilation\",\n+            \"compiler.c1.TestRangeCheckEliminated$test_multi_new_array\"\n+            };\n+\n+        pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        output = new OutputAnalyzer(pb.start()).getOutput();\n+        \/\/ should have 2 \"can be fully eliminated\"\n+        System.out.println(output);\n+        if ((output.split(eliminated, -1).length - 1) == 2) {\n+            System.out.println(\"test_multi_new_array pass\");\n+        } else {\n+            System.out.println(\"test_multi_new_array fail\");\n+            error = true;\n+        }\n+\n+        if (error) {\n+            throw new InternalError();\n+        }\n+    }\n+\n+    public static class test_constant_array {\n+        static final int constant_array[] =\n+            {50,60,55,67,70,62,65,70,70,81,72,66,77,80,69};\n+        static void constant_array_rc() {\n+            constant_array[1] += 5;\n+        }\n+\n+        public static void main(String[] args) {\n+            for(int i = 0; i < 1_000; i++) {\n+                constant_array_rc();\n+            }\n+        }\n+    }\n+\n+    public static class test_multi_constant_array {\n+        static final int constant_multi_array[][] = {\n+            {50,60,55,67,70}, {62,65,70,70,81}, {72,66,77,80,69}};\n+        static void multi_constant_array_rc() {\n+            constant_multi_array[2][3] += 5;\n+        }\n+\n+        public static void main(String[] args) {\n+            for(int i = 0; i < 1_000; i++) {\n+                multi_constant_array_rc();\n+            }\n+        }\n+    }\n+\n+    public static class test_multi_new_array {\n+        static void foo(int i) {}\n+        static void multi_new_array_rc(int index) {\n+            int na[] = new int[800];\n+            int nma[][] = new int[600][2];\n+            nma[20][1] += 5;   \/\/ optimize rc on NewMultiArray first dimension\n+            nma[index][0] = 0; \/\/ index < 600 after this statement\n+            foo(na[index]);    \/\/ index must < 800, remove rc\n+        }\n+\n+        public static void main(String[] args) {\n+            for(int i = 0; i < 600; i++) {\n+                multi_new_array_rc(i);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestRangeCheckEliminated.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}