{"files":[{"patch":"@@ -104,0 +104,9 @@\n+    \/*\n+     * The string pool uses a generational id scheme to sync the JVM and Java sides.\n+     * The string pool relies on the EventWriter and its implementation, especially\n+     * its ability to restart event write attempts on interleaving epoch shifts.\n+     * Even though a string id is generationally valid during StringPool lookup,\n+     * the JVM can evolve the generation before the event is committed,\n+     * effectively invalidating the fetched string id. The event restart mechanism\n+     * of the EventWriter ensures that committed strings are in the correct generation.\n+     *\/\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-            \/\/ event writer updated after successful commit.\n+            \/\/ Successful commit. Update the writer start position.\n@@ -288,1 +288,2 @@\n-        \/\/ if nextPosition == 0, the event was committed and the underlying buffer lease was returned.\n+        \/\/ If nextPosition == 0, the event was committed, the underlying buffer lease\n+        \/\/ returned and new writer positions updated. Nothing to do.\n@@ -292,3 +293,4 @@\n-        \/\/ If commit aborted due to epoch shift, the start position is returned.\n-        assert(nextPosition == startPosition);\n-        currentPosition = startPosition;\n+        \/\/ The commit was aborted because of an interleaving epoch shift.\n+        \/\/ The nextPosition returned is the current start position.\n+        \/\/ Reset the writer and return false to restart the write attempt.\n+        currentPosition = nextPosition;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/event\/EventWriter.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}