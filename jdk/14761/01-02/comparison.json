{"files":[{"patch":"@@ -180,1 +180,4 @@\n-    if (buffer == nullptr && storage_instance.control().should_discard()) {\n+    if (buffer != nullptr) {\n+      return buffer;\n+    }\n+    if (storage_instance.control().should_discard()) {\n@@ -184,1 +187,1 @@\n-    return buffer != nullptr ? buffer : JfrStorage::acquire_transient(size, thread);\n+    return JfrStorage::acquire_transient(size, thread);\n@@ -284,1 +287,0 @@\n-  assert(buffer->acquired_by(thread), \"invariant\");\n@@ -343,1 +345,0 @@\n-      assert(oldest->identity() != nullptr, \"invariant\");\n@@ -352,0 +353,1 @@\n+      assert(oldest->identity() != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(jt);)\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3016,1 +3016,1 @@\n-  \/\/ TLS\n+  \/\/ TLS.\n@@ -3018,1 +3018,1 @@\n-  \/\/ Java buffer.\n+  \/\/ Jfr java buffer.\n@@ -3049,1 +3049,1 @@\n-  \/\/ Arg is the next position as a long\n+  \/\/ Arg is the next position as a long.\n@@ -3051,1 +3051,1 @@\n-  \/\/ long to machine-word size\n+  \/\/ Convert long to machine-word.\n@@ -3054,1 +3054,1 @@\n-  \/\/ Store the next_position to the underlying java buffer.\n+  \/\/ Store the next_position to the underlying jfr java buffer.\n@@ -3067,1 +3067,1 @@\n-  \/\/ And flags with lease constant\n+  \/\/ And flags with lease constant.\n@@ -3082,1 +3082,1 @@\n-  \/\/ Make a runtime call, which can safepoint, to return the leased buffer. This updates both the JfrThreadLocal and the Java event writer.\n+  \/\/ Make a runtime call, which can safepoint, to return the leased buffer. This updates both the JfrThreadLocal and the Java event writer oop.\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    \/* string pool generation (0-65535) set by the JVM on epoch shift. Not private to avoid being optimied away. *\/\n+    \/* string pool generation (0-65535) set by the JVM on epoch shift. Not private to avoid being optimized away. *\/\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}