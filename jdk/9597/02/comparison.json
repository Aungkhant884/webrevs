{"files":[{"patch":"@@ -40,0 +40,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -717,0 +720,1 @@\n+                                Path path = Paths.get(f.getPath());\n@@ -719,1 +723,1 @@\n-                                        && fsv.isFileSystem(f)\n+                                        && (fsv.isFileSystem(f) || Files.isSymbolicLink(path))\n@@ -741,1 +745,6 @@\n-                            chooser.setSelectedFile(null);\n+                            Path path = Paths.get(file.getPath());\n+                            if (Files.isSymbolicLink(path)) {\n+                                chooser.setSelectedFile(file);\n+                            } else {\n+                                chooser.setSelectedFile(null);\n+                            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicFileChooserUI.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JOptionPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+\/** @test\n+  * @bug 8281966\n+  * @key headful\n+  * @library \/java\/awt\/regtesthelpers\n+  * @build PassFailJFrame\n+  * @summary Test to check if the absolute path of Symbolic Link folder\n+  *          is valid on ValueChanged property listener.\n+  * @run main\/manual FileChooserSymLinkTest\n+*\/\n+\n+public class FileChooserSymLinkTest {\n+    static JFrame frame = null;\n+    static PassFailJFrame passFailJFrame = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                try {\n+                    initialize();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                } catch (InvocationTargetException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        });\n+\n+        robot.delay(2000);\n+        robot.waitForIdle();\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    static void initialize() throws InterruptedException, InvocationTargetException {\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Create a regular directory in any specific path.\n+                    ex: mkdir C:\\\\target\n+                2. Create a Symbolic link targeting the created test directory.\n+                    ex : mklink \/D C:\\\\link C:\\\\target\n+                3. In JFileChooser, navigate to \"link\" created directed.\n+                4. On click of the \"link\" directory, if the Absolute path of\n+                    Symbolic Link is valid then Click PASS, else if it is\n+                    null then Click FAIL.(Including MultiSelection Mode SET)\n+                \"\"\";\n+        frame = new JFrame(\"JFileChooser Symbolic Link test\");\n+        passFailJFrame = new PassFailJFrame(INSTRUCTIONS);\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+        frame.setPreferredSize(new Dimension(600, 600));\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        JFileChooser jfc = new JFileChooser();\n+        jfc.setDialogType(JFileChooser.CUSTOM_DIALOG);\n+        jfc.setControlButtonsAreShown(false);\n+        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n+        jfc.addPropertyChangeListener(new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {\n+                    System.out.println(String.format(\"Absolute Path : %s\",evt.getNewValue()));\n+                    JOptionPane.showMessageDialog(null, evt.getNewValue(),\n+                            \"Absolute path\",\n+                            JOptionPane.INFORMATION_MESSAGE);\n+                }\n+            }\n+        });\n+        frame.add(jfc);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileChooserSymLinkTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}