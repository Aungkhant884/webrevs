{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.concurrent.CyclicBarrier;\n@@ -42,1 +43,1 @@\n-public class TestAlwaysPreTouchStacks extends Thread {\n+public class TestAlwaysPreTouchStacks {\n@@ -44,1 +45,8 @@\n-    static private final Thread createTestThread(int stackSize) {\n+    \/\/ We will create a bunch of large-stacked threads to make a significant imprint on combined thread stack size\n+    final static int MB = 1024*1024;\n+    static int memoryCeilingMB = 128;\n+    static int threadStackSizeMB = 8;\n+    static int numThreads = memoryCeilingMB \/ threadStackSizeMB;\n+    static CyclicBarrier gate = new CyclicBarrier(numThreads + 1);\n+\n+    static private final Thread createTestThread(int num) {\n@@ -46,2 +54,14 @@\n-                () -> System.out.println(\"Alive: \" + stackSize),\n-                \"Thread-\" + stackSize, stackSize);\n+                () -> {\n+                    System.out.println(\"Alive: \" + num);\n+                    try {\n+                        \/\/ report aliveness, then sleep until VM death\n+                        gate.await();\n+                        for(;;) {\n+                            Thread.sleep(1000);\n+                        }\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                },\n+                \"TestThread-\" + num, threadStackSizeMB * MB);\n+        t.setDaemon(true);\n@@ -51,5 +71,1 @@\n-    public static void main(String[] args) throws InterruptedException, IOException {\n-\n-        int[] stackSizes = {\n-          1024 * 256, 1024 * 512, 1024 * 1024 * 3\n-        };\n+    public static void main(String[] args) throws Exception {\n@@ -61,2 +77,3 @@\n-            for (int s: stackSizes) {\n-                threads.add(createTestThread(s));\n+            \/\/ Add a bunch of large-stacked threads to make a significant imprint on combined thread stack size\n+            for (int i = 0; i < numThreads; i ++) {\n+                threads.add(createTestThread(i));\n@@ -65,0 +82,1 @@\n+            \/\/ Start test threads.\n@@ -66,3 +84,5 @@\n-            for (Thread t: threads) {\n-                t.join();\n-            }\n+\n+            gate.await();\n+\n+            \/\/ Stop VM. VM will run PrintNMTStatistics before exiting, and the still-running daemon threads\n+            \/\/ should show up with fully - or almost fully - committed thread stacks.\n@@ -75,1 +95,1 @@\n-                    \"-XX:+AlwaysPreTouchStacks\", \"-Xlog:os+thread=trace\",\n+                    \"-XX:+AlwaysPreTouchStacks\",\n@@ -84,2 +104,2 @@\n-            for (int s: stackSizes) {\n-                output.shouldContain(\"Alive: \" + Integer.toString(s));\n+            for (int i = 0; i < numThreads; i ++) {\n+                output.shouldContain(\"Alive: \" + i);\n@@ -88,2 +108,0 @@\n-            output.shouldContain(\"Pretouching thread stack\");\n-\n@@ -111,1 +129,5 @@\n-                    if (committed < (reserved \/ 2)) {\n+                    \/\/ This is a bit fuzzy: even with PreTouch we don't commit the full range of what NMT counts\n+                    \/\/ as thread stack. But without pre-touching, the thread stacks would be committed to about 1\/5th\n+                    \/\/ of their reserved size. Requiring them to be committed for over 3\/4th shows that pretouch is\n+                    \/\/ really working.\n+                    if ((double)committed < ((double)reserved * 0.75)) {\n@@ -114,0 +136,8 @@\n+                    \/\/ Added sanity tests: we expect our test threads to be still alive when NMT prints its final\n+                    \/\/ report, so their stacks should dominate the NMT-reported total stack size.\n+                    long max_reserved = memoryCeilingMB * 3 * MB;\n+                    long min_reserved = memoryCeilingMB * MB;\n+                    if (reserved >= max_reserved || reserved < min_reserved) {\n+                        throw new RuntimeException(\"Total reserved stack sizes outside of our expectations (\" + reserved +\n+                                                   \", expected \" + min_reserved + \"..\" + max_reserved + \")\");\n+                    }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestAlwaysPreTouchStacks.java","additions":50,"deletions":20,"binary":false,"changes":70,"status":"modified"}]}