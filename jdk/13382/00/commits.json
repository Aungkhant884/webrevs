[{"commit":{"message":"8305524: AArch64: Fix arraycopy issue on SVE caused by matching rule vmask_gen_sub\n\nFrom recent tests, we find that `System.arraycopy()` call with a negated\nvariable as its length argument does not perform the copy. This issue is\nreproducible by below test case on AArch64 platforms with SVE.\n\n```\npublic class Test {\n  static char[] src = {'A', 'A', 'A', 'A', 'A'};\n  static char[] dst = {'B', 'B', 'B', 'B', 'B'};\n\n  static void copy(int nlen) {\n    System.arraycopy(src, 0, dst, 0, -nlen);\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 25000; i++) {\n      copy(0);\n    }\n    copy(-5);\n    for (char c : dst) {\n      if (c != 'A') {\n        throw new RuntimeException(\"Wrong value!\");\n      }\n    }\n    System.out.println(\"PASS\");\n  }\n}\n\n\/*\n$ java -Xint Test\nPASS\n$ java -Xbatch Test\nException in thread \"main\" java.lang.RuntimeException: Wrong value!\n        at Test.main(Test.java:16)\n*\/\n```\n\nCause of this is a new AArch64 matching rule `vmask_gen_sub` introduced\nby JDK-8293198. It matches `VectorMaskGen (SubL src1 src2)` on AArch64\nplatforms with SVE and generates SVE `whilelo` instructions. Current C2\ncompiler uses a technique called \"partial inlining\" to vectorize small\narray copy operations by generating vector masks. In above test case, a\nnegated variable `-nlen` is used as the length argument of the call and\n`-nlen` has a small positive value, so it is a \"partial inlining\" case.\nC2 will transform the ideal graph to `VectorMaskGen (SubL 0 nlen)` and\neventually output an instruction of `whilelo p0, nlen, zr` which always\ngenerates an all-false vector mask. That's why arraycopy does nothing.\n\nThe problem of that matching rule is that it regards inputs `src1` and\n`src2` as unsigned long integers but they can be signed in use cases of\narraycopy. To fix the issue, this patch replaces `whilelo` instruction\nby `whilelt` in that rule as well as some other places.\n\nWe tested tier1~3 on SVE and found no new failure. A jtreg math library\ntest jdk\/internal\/math\/FloatingDecimal\/TestFloatingDecimal.java which\nfails on SVE before can pass now."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyMaskedWithSub.java"}],"sha":"eaba9e9e5e6f93ae95e36f66fa750735d1ae1809"}]