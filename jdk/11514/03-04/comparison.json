{"files":[{"patch":"@@ -74,0 +74,2 @@\n+  \/\/ We use int64_t instead of ssize_t because on 32-bit it allows us to express deltas larger than 2 gb.\n+  \/\/ On 64-bit we never expect memory sizes larger than INT64_MAX.\n@@ -78,0 +80,2 @@\n+    LP64_ONLY(assert(s1 < INT64_MAX && s2 < INT64_MAX, \"size overflow\");)\n+\n@@ -85,1 +89,9 @@\n-    assert(amount <= SIZE_MAX - _scale \/ 2, \"size_t overflow\");\n+    \/\/ We can split amount into p + q, where\n+    \/\/     q = amount % _scale\n+    \/\/ and p = amount - q   (which is also (amount \/ _scale) * _scale).\n+    \/\/ Then use\n+    \/\/   size_t scaled = (p + q + _scale\/2) \/ _scale;\n+    \/\/ =>\n+    \/\/   size_t scaled = (p \/ _scale) + ((q + _scale\/2) \/ _scale);\n+    \/\/ The lefthand side of the addition is exact.\n+    \/\/ The righthand side is 0 if q <= (_scale - 1)\/2, else 1. (The -1 is to account for odd _scale values.)\n@@ -91,4 +103,0 @@\n-    if (scaled == 0) {\n-      return 0;\n-    }\n-    assert(scaled <= INT64_MAX, \"overflow\");\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}