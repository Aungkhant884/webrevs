{"files":[{"patch":"@@ -73,9 +73,4 @@\n-    \/\/ Since size_t is unsigned, the amount >= 0 is always true.\n-    \/\/ Therefore, shifting the amount half the scale down\/up is\n-    \/\/ decided based on the s1 and s2. Thus, s1 >= s2 means amount >= 0.\n-    \/\/ ((a + b) > a) where b != 0, is used to check wrap-around of adding two size_t variables.\n-    \/\/ ((a - b) < a) where b != 0, is used to check wrap-around of subtracting two size_t variables.\n-    int64_t amount = s1 - s2;\n-    int64_t scale = (int64_t)_scale;\n-    if (amount == 0){\n-      return 0L;\n+    bool is_negative = false;\n+    if (s1 < s2) {\n+      is_negative = true;\n+      swap(s1, s2);\n@@ -84,13 +79,6 @@\n-    if (s1 >= s2) {\n-      if ((scale \/ 2) != 0) {\n-        assert((amount + scale \/ 2) > amount, \"difference is greater than the upper limit.\");\n-        amount += scale \/ 2;\n-      }\n-      return (amount \/ scale);\n-    }\n-\n-    if ((scale \/ 2) != 0){\n-      assert((amount - scale \/ 2) < amount, \"difference is less than the lower limit.\");\n-      amount -= scale \/ 2;\n-    }\n-    return amount \/ scale;\n+    size_t amount = s1 - s2;\n+    assert(amount <= SIZE_MAX - _scale \/ 2, \"size_t overflow\");\n+    amount = (amount + _scale \/ 2) \/ _scale;\n+    \/\/ We assume the valid range for deltas [INT64_MIN, INT64_MAX] to simplify the code.\n+    assert((sizeof(size_t) < sizeof(int64_t)) || (sizeof(size_t) == sizeof(int64_t) && amount <= INT64_MAX), \"cannot fit scaled diff into size_t\");\n+    return (is_negative) ? -(int64_t)amount : (int64_t)amount;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":10,"deletions":22,"binary":false,"changes":32,"status":"modified"}]}