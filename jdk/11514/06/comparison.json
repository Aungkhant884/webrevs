{"files":[{"patch":"@@ -477,1 +477,1 @@\n-  long amount_diff = diff_in_current_scale(current_amount, early_amount);\n+  int64_t amount_diff = diff_in_current_scale(current_amount, early_amount);\n@@ -479,1 +479,1 @@\n-    out->print(\" %+ld%s\", amount_diff, scale);\n+    out->print(\" \" INT64_PLUS_FORMAT \"%s\", amount_diff, scale);\n@@ -496,1 +496,1 @@\n-    out->print(\" %+ld\", diff_in_current_scale(current_amount, early_amount));\n+    out->print(\" \" INT64_PLUS_FORMAT \"d\", diff_in_current_scale(current_amount, early_amount));\n@@ -511,1 +511,1 @@\n-  long reserved_diff = diff_in_current_scale(current_reserved, early_reserved);\n+  int64_t reserved_diff = diff_in_current_scale(current_reserved, early_reserved);\n@@ -513,1 +513,1 @@\n-    out->print(\" %+ld%s\", reserved_diff, scale);\n+    out->print(\" \" INT64_PLUS_FORMAT \"%s\", reserved_diff, scale);\n@@ -517,1 +517,1 @@\n-  long committed_diff = diff_in_current_scale(current_committed, early_committed);\n+  int64_t committed_diff = diff_in_current_scale(current_committed, early_committed);\n@@ -519,1 +519,1 @@\n-    out->print(\" %+ld%s\", committed_diff, scale);\n+    out->print(\" \" INT64_PLUS_FORMAT \"%s\", committed_diff, scale);\n@@ -663,2 +663,2 @@\n-      long overhead_diff = diff_in_current_scale(_current_baseline.malloc_tracking_overhead(),\n-           _early_baseline.malloc_tracking_overhead());\n+      int64_t overhead_diff = diff_in_current_scale(_current_baseline.malloc_tracking_overhead(),\n+                                                    _early_baseline.malloc_tracking_overhead());\n@@ -666,1 +666,1 @@\n-        out->print(\" %+ld%s\", overhead_diff, scale);\n+        out->print(\" \" INT64_PLUS_FORMAT \"%s\", overhead_diff, scale);\n@@ -698,2 +698,2 @@\n-  long diff_used = diff_in_current_scale(current_stats.used(),\n-                                         early_stats.used());\n+  int64_t diff_used = diff_in_current_scale(current_stats.used(),\n+                                            early_stats.used());\n@@ -703,1 +703,1 @@\n-  long diff_waste = diff_in_current_scale(current_waste, early_waste);\n+  int64_t diff_waste = diff_in_current_scale(current_waste, early_waste);\n@@ -709,1 +709,1 @@\n-    out->print(\" %+ld%s\", diff_used, scale);\n+    out->print(\" \" INT64_PLUS_FORMAT \"%s\", diff_used, scale);\n@@ -719,1 +719,1 @@\n-    out->print(\" %+ld%s\", diff_waste, scale);\n+    out->print(\" \" INT64_PLUS_FORMAT \"%s\", diff_waste, scale);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,5 +74,31 @@\n-  inline long diff_in_current_scale(size_t s1, size_t s2) const {\n-    long amount = (long)(s1 - s2);\n-    long scale = (long)_scale;\n-    amount = (amount > 0) ? (amount + scale \/ 2) : (amount - scale \/ 2);\n-    return amount \/ scale;\n+  \/\/ We use int64_t instead of ssize_t because on 32-bit it allows us to express deltas larger than 2 gb.\n+  \/\/ On 64-bit we never expect memory sizes larger than INT64_MAX.\n+  int64_t diff_in_current_scale(size_t s1, size_t s2) const {\n+    assert(_scale != 0, \"wrong scale\");\n+\n+    assert(s1 < INT64_MAX, \"exceeded possible memory limits\");\n+    assert(s2 < INT64_MAX, \"exceeded possible memory limits\");\n+\n+    bool is_negative = false;\n+    if (s1 < s2) {\n+      is_negative = true;\n+      swap(s1, s2);\n+    }\n+\n+    size_t amount = s1 - s2;\n+    \/\/ We can split amount into p + q, where\n+    \/\/     q = amount % _scale\n+    \/\/ and p = amount - q   (which is also (amount \/ _scale) * _scale).\n+    \/\/ Then use\n+    \/\/   size_t scaled = (p + q + _scale\/2) \/ _scale;\n+    \/\/ =>\n+    \/\/   size_t scaled = (p \/ _scale) + ((q + _scale\/2) \/ _scale);\n+    \/\/ The lefthand side of the addition is exact.\n+    \/\/ The righthand side is 0 if q <= (_scale - 1)\/2, else 1. (The -1 is to account for odd _scale values.)\n+    size_t scaled = (amount \/ _scale);\n+    if ((amount % _scale) > (_scale - 1)\/2) {\n+      scaled += 1;\n+    }\n+\n+    int64_t result = static_cast<int64_t>(scaled);\n+    return is_negative ? -result : result;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+#define INT64_PLUS_FORMAT        \"%+\"         PRId64\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}