{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -52,1 +53,1 @@\n- * elements.\n+ * elements, and {@link #getExtension() getExtension} to obtain its extension.\n@@ -251,0 +252,57 @@\n+    \/**\n+     * Returns the file extension of this path's file name as a {@code String}.\n+     * The extension is derived from this {@code Path} by obtaining the\n+     * {@linkplain #getFileName file name element}, deriving its {@linkplain\n+     * #toString string representation}, and then extracting a substring\n+     * determined by the position of a period character ('.', U+002E FULL STOP)\n+     * within the file name string. If the file name element is {@code null},\n+     * or if the file name string does not contain a period character, or if\n+     * the only period in the file name string is its first character, then\n+     * the extension is {@code null}. Otherwise, the extension is the substring\n+     * after the last period in the file name string. If this last period is\n+     * also the last character in the file name string, then the  extension is\n+     * {@linkplain String#isEmpty empty}.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this path to:\n+     * <pre>{@code\n+     * int lastPeriod = fileName.lastIndexOf('.');\n+     * if (lastPeriod <= 0)\n+     *     return null;\n+     * return (lastPeriod == fileName.length() - 1)\n+     *     ? \"\"\n+     *     : fileName.substring(lastPeriod + 1);\n+     * }<\/pre>\n+     *\n+     * @return  the file name extension of this path, which might be the\n+     *          empty string, or {@code null} if no extension is found\n+     *\n+     * @since 20\n+     *\/\n+    default String getExtension() {\n+        Path fileName = getFileName();\n+        if (fileName == null)\n+            return null;\n+\n+        String fileNameString = fileName.toString();\n+        int length = fileNameString.length();\n+\n+        \/\/ An empty or unity length file name string has a null extension\n+        if (length > 1) {\n+            int lastPeriodIndex = fileNameString.lastIndexOf('.');\n+\n+            \/\/ Indeterminate if there is no period character or\n+            \/\/ only the first character is a period character\n+            if (lastPeriodIndex > 0) {\n+                if (lastPeriodIndex == length - 1) {\n+                    \/\/ empty string\n+                    return \"\";\n+                } else {\n+                    return fileNameString.substring(lastPeriodIndex + 1);\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":60,"deletions":2,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8057113\n+ * @summary Verify getExtension method\n+ * @run testng Extensions\n+ *\/\n+public class Extensions {\n+    \/**\n+     * Returns path name string and expected extension pairs.\n+     *\n+     * @return {@code {{\"pathname\", \"extension\"},...}}\n+     *\/\n+    @DataProvider\n+    static Object[][] getProvider() {\n+        Object[][] pairs = {\n+            {\"\",               null},\n+            {\".\",              null},\n+            {\"..\",             \"\"},\n+            {\"...\",            \"\"},\n+            {\"....\",           \"\"},\n+            {\".....\",          \"\"},\n+            {\"aa\",             null},\n+            {\"a.\",             \"\"},\n+            {\".a\",             null},\n+            {\"..a\",            \"a\"},\n+            {\"...a\",           \"a\"},\n+            {\"....a\",          \"a\"},\n+            {\".a.b\",           \"b\"},\n+            {\"...a.b\",         \"b\"},\n+            {\"...a.b.\",        \"\"},\n+            {\"..foo\",          \"foo\"},\n+            {\"foo.\",           \"\"},\n+            {\"test.\",          \"\"},\n+            {\"test..\",         \"\"},\n+            {\"test...\",        \"\"},\n+            {\"test.rb\",        \"rb\"},\n+            {\"a\/b\/d\/test.rb\" , \"rb\"},\n+            {\".a\/b\/d\/test.rb\", \"rb\"},\n+            {\"test\",           null},\n+            {\".profile\",       null},\n+            {\".profile.sh\",    \"sh\"},\n+            {\"foo.tar.gz\",     \"gz\"},\n+            {\"foo.bar.\",       \"\"},\n+            {\"archive.zip\",    \"zip\"},\n+            {\"compress.gzip\",  \"gzip\"},\n+            {\"waitwhat.&$!#%\", \"&$!#%\"},\n+            {\"6.283185307\",    \"283185307\"}\n+        };\n+        return pairs;\n+    }\n+\n+    @Test(dataProvider = \"getProvider\")\n+    public static void get(String pathname, String extension) {\n+        Assert.assertEquals(Path.of(pathname).getExtension(), extension);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}