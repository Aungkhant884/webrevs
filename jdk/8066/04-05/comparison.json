{"files":[{"patch":"@@ -254,3 +254,3 @@\n-     * Returns the file name extension of this path as a {@code String},\n-     * or a default value.  The extension is defined to be the portion of\n-     * the {@code String} representation of the file name after the last\n+     * Returns the file name extension of this path as an\n+     * {@code Optional<String>}.  The extension is defined to be the portion\n+     * of the {@code String} representation of the file name after the last\n@@ -258,3 +258,3 @@\n-     * it is ignored.  If the extension cannot be determined, then the\n-     * parameter {@code defaultExtension} is returned.  This will occur if\n-     * the path has zero elements ({@link #getFileName()} returns\n+     * it is ignored.  If the extension cannot be determined, then an\n+     * {@link Optional#empty empty} {@code Optional} is returned. This will\n+     * occur if the path has zero elements ({@link #getFileName()} returns\n@@ -270,1 +270,1 @@\n-     *         name.substring(lastDot + 1) : defaultExtension;\n+     *         Optional.of(name.substring(lastDot + 1)) : Optional.empty();\n@@ -273,6 +273,3 @@\n-     * @param   defaultExtension\n-     *          the value to return if the extension is indeterminate;\n-     *          may be {@code null}\n-     *\n-     * @return  the file name extension of this path, or\n-     *          {@code defaultExtension} if the extension is indeterminate\n+     * @return  an {@code Optional} which either contains the file name of\n+     *          this path, or is {@link Optional#empty empty} if the extension\n+    *           is indeterminate\n@@ -282,1 +279,1 @@\n-    default String getExtension(String defaultExtension) {\n+    default Optional<String> getExtension() {\n@@ -285,1 +282,1 @@\n-            return defaultExtension;\n+            return Optional.empty();\n@@ -296,1 +293,1 @@\n-                return fileNameString.substring(lastDotIndex + 1);\n+                return Optional.of(fileNameString.substring(lastDotIndex + 1));\n@@ -300,1 +297,1 @@\n-        return defaultExtension;\n+        return Optional.empty();\n@@ -316,2 +313,2 @@\n-     *          or is empty if this path either does not have an extension or\n-     *          its extension is not among those given\n+     *          or is {@link Optional#empty empty} if this path either does not\n+     *          have an extension or its extension is not among those given\n@@ -322,1 +319,1 @@\n-        String thisExtension = getExtension(null);\n+        String thisExtension = getExtension().orElse(null);\n@@ -340,1 +337,1 @@\n-     * Returns a new {@code Path} which is equal to this path aside from its\n+     * Returns a {@code Path} which is equal to this path aside from its\n@@ -356,1 +353,1 @@\n-     * @return a new path equal to this path but with extension replaced by\n+     * @return a path equal to this path but with extension replaced by\n@@ -369,2 +366,2 @@\n-            if (extension.indexOf('.') == 0 ||\n-                extension.lastIndexOf('.') == extension.length() - 1)\n+            if (extension.charAt(0) == '.' ||\n+                extension.charAt(extension.length() - 1) == '.')\n@@ -375,1 +372,1 @@\n-        String thisExtension = getExtension(null);\n+        String thisExtension = getExtension().orElse(null);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":22,"deletions":25,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -286,2 +286,2 @@\n-            if (extension.indexOf('.') == 0 ||\n-                extension.lastIndexOf('.') == extension.length() - 1)\n+            if (extension.charAt(0) == '.' ||\n+                extension.charAt(extension.length() - 1) == '.')\n@@ -291,1 +291,1 @@\n-        String thisExtension = getExtension(null);\n+        String thisExtension = getExtension().orElse(null);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-            if (extension.indexOf('.') == 0 ||\n-                extension.lastIndexOf('.') == extension.length() - 1)\n+            if (extension.charAt(0) == '.' ||\n+                extension.charAt(extension.length() - 1) == '.')\n@@ -118,1 +118,1 @@\n-        String thisExtension = getExtension(null);\n+        String thisExtension = getExtension().orElse(null);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}