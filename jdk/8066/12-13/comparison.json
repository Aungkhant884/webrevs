{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Optional;\n@@ -261,9 +260,9 @@\n-     * Returns the file name extension of this path as an\n-     * {@code Optional<String>}. The extension is defined to be the portion\n-     * of the {@code String} representation of the file name after the last\n-     * dot ('.'). All leading dots are ignored. If the extension is missing,\n-     * then an {@link Optional#empty empty} {@code Optional} is returned. This\n-     * will occur if the path has zero elements ({@link #getFileName()} returns\n-     * {@code null}), the file name string does not contain a dot, or only the\n-     * first character is a dot. If the last character is a dot, the extension\n-     * is the empty string.\n+     * Returns the file name extension of this path as a {@code String}. The\n+     * extension is defined to be the portion of the {@code String}\n+     * representation of the file name after the last dot ('.'). All leading\n+     * dots are ignored. If the extension is missing, then an\n+     * {@link String#isEmpty() empty} {@code String} ({@code \"\"}) is returned.\n+     * This will occur if the path has zero elements ({@link #getFileName()}\n+     * returns {@code null}), the file name string does not contain a dot, or\n+     * only the first character is a dot. If the last character is a dot, the\n+     * extension is the empty string.\n@@ -274,0 +273,1 @@\n+     * int lastDot = fileName.lastIndexOf('.');\n@@ -275,4 +275,4 @@\n-     *     return Optional.empty();\n-     * return lastDot == name.length() - 1 ?\n-     *     Optional.of(\"\") :\n-     *     Optional.of(name.substring(lastDot + 1));\n+     *     return null;\n+     * return lastDot == fileName.length() - 1 ?\n+     *     \"\" :\n+     *     fileName.substring(lastDot + 1);\n@@ -281,3 +281,2 @@\n-     * @return  an {@code Optional} which either contains the file name\n-     *          extension of this path, which might be the empty string,\n-     *          or equals {@link Optional#empty} if no extension is found\n+     * @return  the file name extension of this path, which might be the\n+     *          empty string, or {@code null} if no extension is found\n@@ -287,1 +286,1 @@\n-    default Optional<String> getExtension() {\n+    default String getExtension() {\n@@ -289,3 +288,2 @@\n-        if (fileName == null) {\n-            return Optional.empty();\n-        }\n+        if (fileName == null)\n+            return \"\";\n@@ -296,1 +294,1 @@\n-        \/\/ Indeterminate if fileNameString is too short\n+        \/\/ A file name string of length unity has a null extension\n@@ -302,2 +300,2 @@\n-                    Optional.of(\"\") : \/\/ empty string if last dot at last index\n-                    Optional.of(fileNameString.substring(lastDotIndex + 1));\n+                    \"\" : \/\/ empty string if last dot at last index\n+                    fileNameString.substring(lastDotIndex + 1);\n@@ -305,0 +303,5 @@\n+        } else if (length == 2 &&\n+                   !(fileNameString.charAt(0) == '.' ||\n+                     fileNameString.charAt(1) != '.')) {\n+            \/\/ fileNameString is of the form \"x.\" where 'x' != '.'\n+            return \"\";\n@@ -307,1 +310,1 @@\n-        return Optional.empty();\n+        return null;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.util.Optional;\n@@ -39,7 +38,0 @@\n-    private static final Optional EMPTY = Optional.empty();\n-    private static final Optional EMPTY_STRING = of(\"\");\n-\n-    private static Optional<String> of(String s) {\n-        return Optional.of(s);\n-    }\n-\n@@ -54,29 +46,32 @@\n-            {\".\",              EMPTY},\n-            {\"..\",             EMPTY},\n-            {\".a.b\",           of(\"b\")},\n-            {\"......\",         EMPTY_STRING},\n-            {\".....a\",         of(\"a\")},\n-            {\"...a.b\",         of(\"b\")},\n-            {\"..foo\",          of(\"foo\")},\n-            {\"test.rb\",        of(\"rb\")},\n-            {\"a\/b\/d\/test.rb\" , of(\"rb\")},\n-            {\".a\/b\/d\/test.rb\", of(\"rb\")},\n-            {\"foo.\",           EMPTY_STRING},\n-            {\"test\",           EMPTY},\n-            {\".profile\",       EMPTY},\n-            {\".profile.sh\",    of(\"sh\")},\n-            {\"..foo\",          of(\"foo\")},\n-            {\".....foo\",       of(\"foo\")},\n-            {\".vimrc\",         EMPTY},\n-            {\"test.\",          EMPTY_STRING},\n-            {\"test..\",         EMPTY_STRING},\n-            {\"test...\",        EMPTY_STRING},\n-            {\"foo.tar.gz\",     of(\"gz\")},\n-            {\"foo.bar.\",       EMPTY_STRING},\n-            {\"image.jpg\",      of(\"jpg\")},\n-            {\"music.mp3\",      of(\"mp3\")},\n-            {\"video.mp4\",      of(\"mp4\")},\n-            {\"document.txt\",   of(\"txt\")},\n-            {\"x.zip\",          of(\"zip\")},\n-            {\"y.gzip\",         of(\"gzip\")},\n-            {\"z.jar\",          of(\"jar\")},\n+            {\".\",              null},\n+            {\"..\",             null},\n+            {\".a\",             null},\n+            {\"a.\",             \"\"},\n+            {\"aa\",             null},\n+            {\".a.b\",           \"b\"},\n+            {\"......\",         \"\"},\n+            {\".....a\",         \"a\"},\n+            {\"...a.b\",         \"b\"},\n+            {\"..foo\",          \"foo\"},\n+            {\"test.rb\",        \"rb\"},\n+            {\"a\/b\/d\/test.rb\" , \"rb\"},\n+            {\".a\/b\/d\/test.rb\", \"rb\"},\n+            {\"foo.\",           \"\"},\n+            {\"test\",           null},\n+            {\".profile\",       null},\n+            {\".profile.sh\",    \"sh\"},\n+            {\"..foo\",          \"foo\"},\n+            {\".....foo\",       \"foo\"},\n+            {\".vimrc\",         null},\n+            {\"test.\",          \"\"},\n+            {\"test..\",         \"\"},\n+            {\"test...\",        \"\"},\n+            {\"foo.tar.gz\",     \"gz\"},\n+            {\"foo.bar.\",       \"\"},\n+            {\"image.jpg\",      \"jpg\"},\n+            {\"music.mp3\",      \"mp3\"},\n+            {\"video.mp4\",      \"mp4\"},\n+            {\"document.txt\",   \"txt\"},\n+            {\"x.zip\",          \"zip\"},\n+            {\"y.gzip\",         \"gzip\"},\n+            {\"z.jar\",          \"jar\"},\n@@ -88,1 +83,1 @@\n-    public static void get(String pathname, Optional<String> extension) {\n+    public static void get(String pathname, String extension) {\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":33,"deletions":38,"binary":false,"changes":71,"status":"modified"}]}