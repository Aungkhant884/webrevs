{"files":[{"patch":"@@ -397,0 +397,3 @@\n+        if (numElements < 0) {\n+            throw new IllegalArgumentException(\"Negative number of elements: \" + numElements);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,3 @@\n+        if (numElements < 0) {\n+            throw new IllegalArgumentException(\"Negative number of elements: \" + numElements);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashSet.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashSet;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 8285405\n+ * @summary Tests HashSet.newHashSet(int) method\n+ * @run testng NewHashSet\n+ *\/\n+public class NewHashSet {\n+    private static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n+\n+    @DataProvider(name = \"negatives\")\n+    private static Object[][] negatives() {\n+        return new Object[][]{new Object[]{-1},\n+                new Object[]{Integer.MIN_VALUE},\n+                new Object[]{-42}};\n+    }\n+\n+    @DataProvider(name = \"nonNegatives\")\n+    private static Object[][] nonNegatives() {\n+        return new Object[][]{new Object[]{0},\n+                new Object[]{42}};\n+    }\n+\n+    \/**\n+     * Test the {@link HashSet#newHashSet(int)} method with negative values\n+     * passed for the {@code numElements} parameter\n+     *\/\n+    @Test(dataProvider = \"negatives\")\n+    public void testNewHashSetNegative(final int val) {\n+        assertThrows(IAE, () -> HashSet.newHashSet(val));\n+    }\n+\n+    \/**\n+     * Test the {@link HashSet#newHashSet(int)} method with zero and positive values\n+     * passed for the {@code numElements} parameter\n+     *\/\n+    @Test(dataProvider = \"nonNegatives\")\n+    public void testNewHashSetNonNegative(final int val) {\n+        var h = HashSet.newHashSet(val);\n+        assertNotNull(h);\n+        assertEquals(h.size(), 0, \"Unexpected size of HashSet created with numElements: \" + val);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/HashSet\/NewHashSet.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4245809 8029795\n+ * @bug 4245809 8029795 8285405\n","filename":"test\/jdk\/java\/util\/LinkedHashMap\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4245809\n+ * @bug 4245809 8285405\n@@ -103,0 +103,2 @@\n+        \/\/ run tests for LinkedHashSet#newLinkedHashSet\n+        testNewLinkedHashSet();\n@@ -160,0 +162,32 @@\n+\n+    \/**\n+     * Runs basic tests for {@link LinkedHashSet#newLinkedHashSet(int)}\n+     *\/\n+    private static void testNewLinkedHashSet() {\n+        final int[] negatives = new int[] {-1, Integer.MIN_VALUE, -42};\n+        for (var negative : negatives) {\n+            try {\n+                LinkedHashSet.newLinkedHashSet(negative);\n+                \/\/ expected to fail but didn't\n+                throw new RuntimeException(\"LinkedHashSet.newLinkedHashSet was expected to throw\" +\n+                        \" IllegalArgumentException for param \" + negative + \", but didn't\");\n+            } catch (IllegalArgumentException iae) {\n+                \/\/ got the expected exception\n+            }\n+        }\n+        \/\/ verify for 0 and positive values\n+        final int[] nonNegatives = new int[] {0, 42};\n+        for (var numElements : nonNegatives) {\n+            var l = LinkedHashSet.newLinkedHashSet(numElements);\n+            if (l == null) {\n+                throw new RuntimeException(\"LinkedHashSet.newLinkedHashSet unexpectedly returned \" +\n+                        \"null for numElements: \" + numElements);\n+            }\n+            \/\/ some other basic check\n+            final int size = l.size();\n+            if (size != 0) {\n+                throw new RuntimeException(\"Unexpected size: \" + size + \" for LinkedHashSet created\" +\n+                        \" from numElements: \" + numElements);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/LinkedHashSet\/Basic.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"}]}