{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n+     * This method will be invoked by <tt>Finalizer<\/tt> when virtual machine\n@@ -43,0 +43,7 @@\n+    \/*\n+     * This method will register a cleanup method and creates an instance of Finalizer\n+     * to register the object for finalization at VM exit.\n+     * It is implemented in FinalizableObject.\n+     *\/\n+    public void registerCleanup();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Finalizable.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.lang.ref.Cleaner;\n+\n@@ -35,0 +37,11 @@\n+\n+    \/**\n+     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n+     * shuts down.\n+     *\n+     * @throws Throwable if any throwable exception thrown during finalization\n+     *\n+     * @see Finalizer\n+     *\/\n+\n+    public void cleanup() {}\n@@ -44,0 +57,7 @@\n+        cleanup();\n+    }\n+\n+    public void registerCleanup() {\n+       \/\/ install finalizer to print errors summary at exit\n+       Finalizer finalizer = new Finalizer(this);\n+       finalizer.activate();\n@@ -45,0 +65,2 @@\n+       \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+       Cleaner.create().register(this, () -> cleanup());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/FinalizableObject.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n+        registerCleanup();\n@@ -72,2 +71,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n+        registerCleanup();\n@@ -169,1 +167,1 @@\n-     * Finalize mirror by invoking <code>close()<\/code>.\n+     * This method is called at finalization and calls  <code>kill()<\/code>.\n@@ -171,1 +169,0 @@\n-     * @throws Throwable if any throwable exception is thrown during finalization\n@@ -173,1 +170,1 @@\n-    protected void finalize() throws Throwable {\n+    public void cleanup() {\n@@ -175,1 +172,0 @@\n-        super.finalize();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/LocalProcess.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.ref.Cleaner;\n@@ -193,6 +192,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n-\n-        \/\/ register the clenup method to be called when this Log instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n-\n+        registerCleanup();\n@@ -203,0 +197,1 @@\n+\n@@ -617,0 +612,1 @@\n+    @Override\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Log.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,4 +46,2 @@\n-        Finalizer finalizer = new Finalizer(new FinalizableObject());\n-        finalizer.activate();\n-\n-\n+        FinalizableObject finalizableObject = new FinalizableObject();\n+        finalizableObject.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/MainWrapper.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,3 +132,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n-\n+        debugee.registerCleanup();\n@@ -947,2 +945,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n@@ -961,2 +958,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Binder.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,2 +109,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdwp\/Binder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,5 +99,0 @@\n-    public BindServer() {\n-        \/\/ The Cleaner alternative to deprecated finalize() method\n-        \/\/ that is called when the instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n-    }\n@@ -129,0 +124,5 @@\n+    @Override\n+    public void registerCleanup() {\n+        \/\/ install finalizer to print errors summary at exit\n+        Finalizer finalizer = new Finalizer(this);\n+        finalizer.activate();\n@@ -130,0 +130,3 @@\n+        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+        Cleaner.create().register(this, () -> cleanup());\n+     }\n@@ -162,2 +165,2 @@\n-        Finalizer bindFinalizer = new Finalizer(this);\n-        bindFinalizer.activate();\n+        registerCleanup();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/BindServer.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -113,0 +113,5 @@\n+    @Override\n+    public void registerCleanup() {\n+        \/\/ install finalizer to print errors summary at exit\n+        Finalizer finalizer = new Finalizer(this);\n+        finalizer.activate();\n@@ -114,0 +119,3 @@\n+        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+        Cleaner.create().register(this, () -> cleanup());\n+     }\n@@ -122,2 +130,0 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n@@ -125,3 +131,1 @@\n-        \/\/ As an alternative to finalize(), register cleanup() method to\n-        \/\/ be called when this instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n+        registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -86,0 +86,5 @@\n+    @Override\n+    public void registerCleanup() {\n+        \/\/ install finalizer to print errors summary at exit\n+        Finalizer finalizer = new Finalizer(this);\n+        finalizer.activate();\n@@ -87,0 +92,3 @@\n+        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+        Cleaner.create().register(this, () -> cleanup());\n+     }\n@@ -98,3 +106,1 @@\n-        \/\/ As an alternative to finalize() call, register cleanup() method to be called\n-        \/\/ when this instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n+        registerCleanup();\n@@ -113,3 +119,1 @@\n-        \/\/ As an alternative to finalize() call, register cleanup() method to be called\n-        \/\/ when this instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n+        registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/SocketIOPipe.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}