{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.lang.ref.Cleaner;\n@@ -29,1 +30,1 @@\n- * interface and activate a <tt>Finalizer<\/tt> hook.\n+ * interface and call the <tt>registerClenup<\/tt> to activate a <tt>Finalizer<\/tt> hook.\n@@ -36,1 +37,8 @@\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n+     * This method will be implemented by FinalizableObject and is called in <tt>finalizeAtExit<\/tt>.\n+     *\n+     * @see Finalizer\n+     *\/\n+    public void cleanup();\n+\n+    \/**\n+     * This method will be invoked by <tt>Finalizer<\/tt> when virtual machine\n@@ -41,1 +49,15 @@\n-    public void finalizeAtExit() throws Throwable;\n+    default public void finalizeAtExit() throws Throwable {\n+        cleanup();\n+    }\n+\n+    \/**\n+     * This method will register a cleanup method and create an instance of Finalizer\n+     * to register the object for finalization at VM exit.\n+     * It is implemented in FinalizableObject.\n+     *\n+     * @see Finalizer\n+     *\/\n+    default public void registerCleanup() {\n+       \/\/ install finalizer to print errors summary at exit\n+       Finalizer finalizer = new Finalizer(this);\n+       finalizer.activate();\n@@ -43,0 +65,3 @@\n+       \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+       Cleaner.create().register(this, () -> cleanup());\n+    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Finalizable.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\n@@ -28,2 +29,1 @@\n- * <code>Finalizable<\/code> and invokes standard <code>finalize()<\/code> method\n- * as finalization.\n+ * <code>Finalizable<\/code>.\n@@ -35,1 +35,0 @@\n-\n@@ -37,9 +36,2 @@\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n-     * shuts down.\n-     * For <code>FinalizableObject<\/code> this method just invoke\n-     * <code>finalize()<\/code>.\n-     *\n-     * @throws Throwable if any throwable exception thrown during finalization\n-     *\n-     * @see Object#finalize()\n-     * @see Finalizer\n+     * All instances of this class, should implement their own cleanup method\n+     * to clean appropriately the objects they used.\n@@ -47,3 +39,3 @@\n-    public void finalizeAtExit() throws Throwable {\n-        finalize();\n-    }\n+    public void cleanup() {}\n+\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/FinalizableObject.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n+        registerCleanup();\n@@ -72,2 +71,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n+        registerCleanup();\n@@ -169,1 +167,1 @@\n-     * Finalize mirror by invoking <code>close()<\/code>.\n+     * This method is called at finalization and calls <code>kill()<\/code>.\n@@ -171,1 +169,0 @@\n-     * @throws Throwable if any throwable exception is thrown during finalization\n@@ -173,1 +170,1 @@\n-    protected void finalize() throws Throwable {\n+    public void cleanup() {\n@@ -175,1 +172,0 @@\n-        super.finalize();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/LocalProcess.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,3 +192,1 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n-\n+        registerCleanup();\n@@ -199,0 +197,1 @@\n+\n@@ -473,1 +472,1 @@\n-        finalize(); \/\/ flush older log stream\n+        cleanup(); \/\/ flush older log stream\n@@ -608,0 +607,4 @@\n+     *\n+     * This is replacement of the finalize() method and is called when this\n+     * Log instance becomes unreachable.\n+     *\n@@ -609,1 +612,2 @@\n-    protected void finalize() {\n+    @Override\n+    public void cleanup() {\n@@ -622,1 +626,1 @@\n-        finalize();\n+        cleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Log.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,4 +46,2 @@\n-        Finalizer finalizer = new Finalizer(new FinalizableObject());\n-        finalizer.activate();\n-\n-\n+        FinalizableObject finalizableObject = new FinalizableObject();\n+        finalizableObject.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/MainWrapper.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,3 +132,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n-\n+        debugee.registerCleanup();\n@@ -947,2 +945,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n@@ -961,2 +958,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Binder.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,2 +109,1 @@\n-        Finalizer finalizer = new Finalizer(debugee);\n-        finalizer.activate();\n+        debugee.registerCleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdwp\/Binder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.ref.Cleaner;\n@@ -122,1 +123,0 @@\n-\n@@ -155,2 +155,2 @@\n-        Finalizer bindFinalizer = new Finalizer(this);\n-        bindFinalizer.activate();\n+        registerCleanup();\n+\n@@ -220,1 +220,1 @@\n-            finalize();\n+            cleanup();\n@@ -409,0 +409,3 @@\n+     * This is replacement of the deprecated finalize() and is called\n+     * when this instance becomes unreachable.\n+     *\n@@ -411,1 +414,1 @@\n-    protected void finalize() throws Throwable {\n+    public void cleanup() {\n@@ -413,1 +416,0 @@\n-        super.finalize();\n@@ -418,1 +420,1 @@\n-     * by invoking method <code>finalize()<\/code>.\n+     * by invoking method <code>cleanup()<\/code>.\n@@ -420,1 +422,0 @@\n-     * @see #finalize()\n@@ -423,1 +424,1 @@\n-        finalize();\n+        cleanup();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/BindServer.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.ref.Cleaner;\n@@ -112,1 +113,0 @@\n-\n@@ -121,2 +121,2 @@\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n+\n+        registerCleanup();\n@@ -560,9 +560,2 @@\n-     * @throws Throwable if any throwable exception is thrown during finalization\n-     *\/\n-    protected void finalize() throws Throwable {\n-        close();\n-        super.finalize();\n-    }\n-\n-    \/**\n-     * Finalize binder at exit by invoking <code>finalize()<\/code>.\n+     * This is replacement of the finalize() method and is called when this\n+     * instance becomes unreachable.\n@@ -570,1 +563,0 @@\n-     * @throws Throwable if any throwable exception is thrown during finalization\n@@ -572,2 +564,2 @@\n-    public void finalizeAtExit() throws Throwable {\n-        finalize();\n+    public void cleanup() {\n+        close();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.ref.Cleaner;\n@@ -87,0 +88,4 @@\n+\n+        \/\/ As the alternative to finalize(), register the cleanup() method\n+        \/\/ to be called when this instance becomes unreachable.\n+        Cleaner.create().register(this, () -> cleanup());\n@@ -463,1 +468,1 @@\n-    protected void finalize() throws Throwable {\n+    public void cleanup() {\n@@ -465,1 +470,0 @@\n-        super.finalize();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeProcess.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.lang.ref.Cleaner;\n@@ -85,1 +86,0 @@\n-\n@@ -96,0 +96,2 @@\n+\n+        registerCleanup();\n@@ -107,0 +109,2 @@\n+\n+        registerCleanup();\n@@ -311,0 +315,4 @@\n+     *\n+     * This is replacement of finalize() method and is called\n+     * when this instance becomes unreachable.\n+     *\n@@ -312,1 +320,1 @@\n-    protected void finalize() throws Throwable {\n+    public void cleanup() {\n@@ -314,1 +322,0 @@\n-        super.finalize();\n@@ -317,6 +324,0 @@\n-    \/**\n-     * Perform finalization of the object at exit by invoking finalize().\n-     *\/\n-    public void finalizeAtExit() throws Throwable {\n-        finalize();\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/SocketIOPipe.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}