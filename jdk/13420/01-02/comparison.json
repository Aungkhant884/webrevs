{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.ref.Cleaner;\n@@ -29,1 +30,1 @@\n- * interface and activate a <tt>Finalizer<\/tt> hook.\n+ * interface and call the <tt>registerClenup<\/tt> to activate a <tt>Finalizer<\/tt> hook.\n@@ -35,0 +36,7 @@\n+    \/**\n+     * This method will be implemented by FinalizableObject and is called in <tt>finalizeAtExit<\/tt>.\n+     *\n+     * @see Finalizer\n+     *\/\n+    public void cleanup();\n+\n@@ -41,1 +49,3 @@\n-    public void finalizeAtExit() throws Throwable;\n+    default public void finalizeAtExit() throws Throwable {\n+        cleanup();\n+    }\n@@ -43,2 +53,2 @@\n-    \/*\n-     * This method will register a cleanup method and creates an instance of Finalizer\n+    \/**\n+     * This method will register a cleanup method and create an instance of Finalizer\n@@ -47,0 +57,2 @@\n+     *\n+     * @see Finalizer\n@@ -48,1 +60,4 @@\n-    public void registerCleanup();\n+    default public void registerCleanup() {\n+       \/\/ install finalizer to print errors summary at exit\n+       Finalizer finalizer = new Finalizer(this);\n+       finalizer.activate();\n@@ -50,0 +65,3 @@\n+       \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n+       Cleaner.create().register(this, () -> cleanup());\n+    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Finalizable.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.ref.Cleaner;\n@@ -36,2 +35,0 @@\n-\n-\n@@ -39,6 +36,2 @@\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n-     * shuts down.\n-     *\n-     * @throws Throwable if any throwable exception thrown during finalization\n-     *\n-     * @see Finalizer\n+     * All instances of this class, should implement their own cleanup method\n+     * to clean appropriately the objects they used.\n@@ -46,1 +39,0 @@\n-\n@@ -48,11 +40,0 @@\n-    \/**\n-     * This method will be invoked by <tt>Finalizer<\/tt> when virtual mashine\n-     * shuts down.\n-     *\n-     * @throws Throwable if any throwable exception thrown during finalization\n-     *\n-     * @see Finalizer\n-     *\/\n-    public void finalizeAtExit() throws Throwable {\n-        cleanup();\n-    }\n@@ -60,4 +41,0 @@\n-    public void registerCleanup() {\n-       \/\/ install finalizer to print errors summary at exit\n-       Finalizer finalizer = new Finalizer(this);\n-       finalizer.activate();\n@@ -65,3 +42,0 @@\n-       \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n-       Cleaner.create().register(this, () -> cleanup());\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/FinalizableObject.java","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-     * This method is called at finalization and calls  <code>kill()<\/code>.\n+     * This method is called at finalization and calls <code>kill()<\/code>.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/LocalProcess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-\n@@ -124,9 +123,0 @@\n-    @Override\n-    public void registerCleanup() {\n-        \/\/ install finalizer to print errors summary at exit\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n-\n-        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n-     }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/BindServer.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,9 +113,0 @@\n-    @Override\n-    public void registerCleanup() {\n-        \/\/ install finalizer to print errors summary at exit\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n-\n-        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n-     }\n@@ -569,2 +560,0 @@\n-     * @throws Throwable if any throwable exception is thrown during finalization\n-     *\n@@ -579,9 +568,0 @@\n-    \/**\n-     * Finalize binder at exit by invoking <code>cleanup()<\/code>.\n-     *\n-     * @throws Throwable if any throwable exception is thrown during finalization\n-     *\/\n-    public void finalizeAtExit() throws Throwable {\n-        cleanup();\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -86,9 +86,0 @@\n-    @Override\n-    public void registerCleanup() {\n-        \/\/ install finalizer to print errors summary at exit\n-        Finalizer finalizer = new Finalizer(this);\n-        finalizer.activate();\n-\n-        \/\/ register the cleanup method to be called when this Log instance becomes unreachable.\n-        Cleaner.create().register(this, () -> cleanup());\n-     }\n@@ -333,6 +324,0 @@\n-    \/**\n-     * Perform finalization of the object at exit by invoking finalize().\n-     *\/\n-    public void finalizeAtExit() throws Throwable {\n-        cleanup();\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/SocketIOPipe.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}