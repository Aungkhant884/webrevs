{"files":[{"patch":"@@ -87,1 +87,1 @@\n-            EventQueue.invokeLater(() -> {\n+            EventQueue.invokeAndWait(() -> {\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ComponentScrollTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/awt\/ScrollPane\/ComponentScrollTest\/ComponentScrollTest.java","status":"renamed"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @bug 4100671\n-  @summary Tests that after removing\/adding a component can be still access.\n-  @key headful\n-*\/\n-\n-import java.awt.BorderLayout;\n-import java.awt.Button;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.Frame;\n-import java.awt.Point;\n-import java.awt.Robot;\n-import java.awt.ScrollPane;\n-import java.awt.Toolkit;\n-\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.InputEvent;\n-\n-public class ScrollPaneRemoveAdd {\n-    Button button;\n-    ScrollPane pane;\n-    Semaphore actionSema;\n-    Frame frame;\n-    Robot robot;\n-\n-    public static void main(String[] args) throws Exception {\n-        ScrollPaneRemoveAdd scrollTest = new ScrollPaneRemoveAdd();\n-        scrollTest.init();\n-        scrollTest.start();\n-    }\n-\n-    public void init() throws Exception {\n-        EventQueue.invokeAndWait(() -> {\n-            frame = new Frame(\"Scroll pane Add\/Remove\");\n-\n-            pane = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n-            button = new Button(\"press\");\n-            pane.add(button);\n-            frame.add(pane);\n-            actionSema = new Semaphore();\n-            button.addActionListener(new ActionListener() {\n-                public void actionPerformed(ActionEvent e) {\n-                    actionSema.raise();\n-                }\n-            });\n-        });\n-        robot = new Robot();\n-    }\n-\n-    public void start() throws Exception {\n-        try {\n-            EventQueue.invokeAndWait(() -> {\n-                    frame.pack();\n-                    frame.setLocationRelativeTo(null);\n-                    frame.setVisible(true);\n-                    pane.remove(0);\n-                    pane.add(button);\n-            });\n-\n-            Point buttonLoc = button.getLocationOnScreen();\n-            Dimension buttonSize = button.getSize();\n-            robot.mouseMove(buttonLoc.x + buttonSize.width \/ 2, buttonLoc.y + buttonSize.height \/ 2);\n-            robot.delay(50);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.delay(50);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            Toolkit.getDefaultToolkit().sync();\n-            robot.delay(50);\n-            robot.waitForIdle();\n-            try {\n-                actionSema.doWait(1000);\n-            } catch (Exception ie) {\n-                throw new RuntimeException(\"My sleep was interrupted\");\n-            }\n-            robot.delay(50);\n-            robot.waitForIdle();\n-            if (!actionSema.getState()) {\n-                throw new RuntimeException(\"ScrollPane doesn't handle correctly add after remove\");\n-            }\n-        } finally {\n-            EventQueue.invokeLater(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/RemoveChild\/ScrollPaneRemoveAdd.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-public class Semaphore {\n-    volatile boolean state = false;\n-    Object lock = new Object();\n-    volatile int waiting = 0;\n-    public Semaphore() {\n-    }\n-    public void doWait() throws InterruptedException {\n-        synchronized(lock) {\n-            if (state) {\n-                return;\n-            }\n-            waiting++;\n-            synchronized(this) {\n-                wait();\n-            }\n-            waiting--;\n-        }\n-    }\n-    public void doWait(int timeout) throws InterruptedException {\n-        synchronized(lock) {\n-            if (state) {\n-                return;\n-            }\n-            waiting++;\n-            synchronized(this) {\n-                wait(timeout);\n-            }\n-            waiting--;\n-        }\n-    }\n-    public void raise() {\n-        synchronized(lock) {\n-            state = true;\n-            if (waiting > 0) {\n-                synchronized(this) {\n-                    notifyAll();\n-                }\n-            }\n-        }\n-    }\n-    public synchronized boolean getState() {\n-        return state;\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/RemoveChild\/Semaphore.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4152524\n+  @requires os.family==\"windows\"\n+  @summary Test that scroll pane doesn't have scroll bars visible when it is\n+  shown for the first time with SCROLLBARS_AS_NEEDED style\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.InputEvent;\n+\n+public class ScrollPaneExtraScrollBar {\n+    ScrollPane sp;\n+    Frame f;\n+    Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneExtraScrollBar scrollTest = new ScrollPaneExtraScrollBar();\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+\n+    public void init() throws Exception {\n+        robot = new Robot();\n+        EventQueue.invokeAndWait(() -> {\n+            f = new Frame();\n+            sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+            sp.add(new Button(\"TEST\"));\n+            f.add(\"Center\", sp);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            Rectangle r = f.getBounds();\n+            robot.mouseMove(r.x + r.width - 1, r.y + r.height - 1);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseMove(r.x + r.width + 50, r.y + r.height + 50);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            Thread.sleep(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Insets insets = sp.getInsets();\n+                if (insets.left != insets.right || insets.top != insets.bottom) {\n+                    throw new RuntimeException(\"ScrollPane has scroll bars visible\" +\n+                            \" when it shouldn't\");\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneExtraScrollBar.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @bug 4152524\n-  @summary Test that scroll pane doesn't have scroll bars visible when it is shown for the first time with SCROLLBARS_AS_NEEDED style\n-  @key headful\n-*\/\n-\n-import java.awt.Button;\n-import java.awt.EventQueue;\n-import java.awt.Frame;\n-import java.awt.Insets;\n-import java.awt.Rectangle;\n-import java.awt.Robot;\n-import java.awt.ScrollPane;\n-\n-import java.awt.event.InputEvent;\n-\n-public class ScrollPaneExtraScrollBar\n-{\n-    ScrollPane sp;\n-    Frame f;\n-    Robot robot;\n-\n-    public static void main(String[] args) throws Exception {\n-        ScrollPaneExtraScrollBar scrollTest = new ScrollPaneExtraScrollBar();\n-        scrollTest.init();\n-        scrollTest.start();\n-    }\n-    public void init() throws Exception {\n-\n-       robot = new Robot();\n-\n-        EventQueue.invokeAndWait(() -> {\n-                f = new Frame();\n-                sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n-                sp.add(new Button(\"TEST\"));\n-                f.add(\"Center\", sp);\n-                f.pack();\n-                f.setLocationRelativeTo(null);\n-                f.setVisible(true);\n-        });\n-    }\n-\n-    public void start() throws Exception {\n-        try {\n-            if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-                robot.delay(100);\n-                robot.waitForIdle();\n-                Rectangle r = f.getBounds();\n-                robot.mouseMove(r.x + r.width - 1, r.y + r.height - 1);\n-                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-                robot.mouseMove(r.x + r.width + 50, r.y + r.height + 50);\n-                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-                Thread.sleep(1000);\n-\n-                EventQueue.invokeAndWait(() -> {\n-                    Insets insets = sp.getInsets();\n-                    if (insets.left != insets.right || insets.top != insets.bottom) {\n-                        throw new RuntimeException(\"ScrollPane has scroll bars visible\" +\n-                                \" when it shouldn't\");\n-                    }\n-                });\n-            }\n-        } finally {\n-            EventQueue.invokeLater(() -> {\n-                if (f != null) {\n-                    f.dispose();\n-                }\n-            });\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneInsets\/ScrollPaneExtraScrollBar.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -27,1 +27,3 @@\n-  @summary Tests 16-bit limitations of scroll pane, child's position and size and mouse coordinates\n+  @requires os.family==\"windows\"\n+  @summary Tests 16-bit limitations of scroll pane, child's position and size\n+  and mouse coordinates\n@@ -73,1 +75,0 @@\n-\n@@ -78,1 +79,0 @@\n-\n@@ -80,5 +80,1 @@\n-            if (os != null &&\n-                    (os.indexOf(\"98\") == -1) &&\n-                    (os.startsWith(\"Win\") || os.startsWith(\"win\") ||\n-                            os.startsWith(\"WIN\"))) {\n-\n+            if (os != null && (os.indexOf(\"98\") == -1)) {\n@@ -108,0 +104,1 @@\n+                });\n@@ -109,5 +106,4 @@\n-                    try {\n-                        Thread.sleep(1000);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(\"test was interrupted\");\n-                    }\n+                robot.delay(1000);\n+                robot.waitForIdle();\n+\n+                EventQueue.invokeAndWait(() -> {\n@@ -161,1 +157,1 @@\n-            EventQueue.invokeLater(() -> {\n+            EventQueue.invokeAndWait(() -> {\n@@ -169,1 +165,1 @@\n-    class MyPanel extends Component {\n+    private static class MyPanel extends Component {\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneLimitation.java","additions":11,"deletions":15,"binary":false,"changes":26,"previous_filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneLimitation\/ScrollPaneLimitation.java","status":"renamed"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4100671\n+  @summary Tests that after removing\/adding a component can be still access.\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.Toolkit;\n+\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+\n+public class ScrollPaneRemoveAdd {\n+    Button button;\n+    ScrollPane pane;\n+    Semaphore actionSema;\n+    Frame frame;\n+    Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneRemoveAdd scrollTest = new ScrollPaneRemoveAdd();\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+\n+    public void init() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"Scroll pane Add\/Remove\");\n+\n+            pane = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+            button = new Button(\"press\");\n+            pane.add(button);\n+            frame.add(pane);\n+            actionSema = new Semaphore();\n+            button.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    actionSema.raise();\n+                }\n+            });\n+        });\n+        robot = new Robot();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                pane.remove(0);\n+                pane.add(button);\n+            });\n+\n+            Point buttonLoc = button.getLocationOnScreen();\n+            Dimension buttonSize = button.getSize();\n+            robot.mouseMove(buttonLoc.x + buttonSize.width \/ 2,\n+                    buttonLoc.y + buttonSize.height \/ 2);\n+            robot.delay(50);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(50);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+   \/\/         Toolkit.getDefaultToolkit().sync();\n+            robot.delay(50);\n+            robot.waitForIdle();\n+            try {\n+                actionSema.doWait(1000);\n+            } catch (Exception ie) {\n+                throw new RuntimeException(\"My sleep was interrupted\");\n+            }\n+            robot.delay(50);\n+            robot.waitForIdle();\n+            if (!actionSema.getState()) {\n+                throw new RuntimeException(\"ScrollPane doesn't handle \" +\n+                        \"correctly add after remove\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static class Semaphore {\n+        volatile boolean state = false;\n+        Object lock = new Object();\n+        volatile int waiting = 0;\n+\n+        public Semaphore() {\n+        }\n+\n+        public void doWait() throws InterruptedException {\n+            synchronized (lock) {\n+                if (state) {\n+                    return;\n+                }\n+                waiting++;\n+                synchronized (this) {\n+                    wait();\n+                }\n+                waiting--;\n+            }\n+        }\n+\n+        public void doWait(int timeout) throws InterruptedException {\n+            synchronized (lock) {\n+                if (state) {\n+                    return;\n+                }\n+                waiting++;\n+                synchronized (this) {\n+                    wait(timeout);\n+                }\n+                waiting--;\n+            }\n+        }\n+\n+        public void raise() {\n+            synchronized (lock) {\n+                state = true;\n+                if (waiting > 0) {\n+                    synchronized (this) {\n+                        notifyAll();\n+                    }\n+                }\n+            }\n+        }\n+\n+        public synchronized boolean getState() {\n+            return state;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneRemoveAdd.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+  @requires os.family==\"windows\"\n@@ -60,0 +61,8 @@\n+        Properties prop = System.getProperties();\n+        String os = prop.getProperty(\"os.name\", \"\").toUpperCase();\n+        System.out.println(\"OS= \" + os);\n+        if (!os.equals(\"WINDOWS 2000\") && !os.equals(\"WINDOWS 2003\") &&\n+                !os.equals(\"WINDOWS XP\")) {\n+            System.out.println(\"This test is for Windows 2000\/2003\/XP only.\");\n+            return;\n+        }\n@@ -84,9 +93,0 @@\n-        Properties prop = System.getProperties();\n-        String os = prop.getProperty(\"os.name\", \"\").toUpperCase();\n-        System.out.println(\"OS= \" + os);\n-        if (!os.equals(\"WINDOWS 2000\") && !os.equals(\"WINDOWS 2003\") &&\n-                !os.equals(\"WINDOWS XP\")) {\n-            System.out.println(\"This test is for Windows 2000\/2003\/XP only.\");\n-            return;\n-        }\n-\n@@ -117,1 +117,1 @@\n-    public void testOneScrollbar(ScrollPaneAdjustable scroll) {\n+    public void testOneScrollbar(ScrollPaneAdjustable scroll) throws Exception{\n@@ -173,1 +173,1 @@\n-            EventQueue.invokeLater(() -> {\n+            EventQueue.invokeAndWait(() -> {\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneWindowsTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneWindowsTest\/ScrollPaneWindowsTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ @test\n+ @bug 6404832\n+ @summary Tests that scroll position is not changed by validate() for mode SCROLLBARS_NEVER\n+ @key headful\n+ @run main ScrollPositionIntact\n+*\/\n+\n+import java.awt.*;\n+\n+import java.awt.Color;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ScrollPositionIntact {\n+    Frame frame;\n+    ScrollPane sp;\n+    Panel pa;\n+    public static final int X_POS = 100;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPositionIntact test = new ScrollPositionIntact();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                pa = new Panel();\n+                pa.setSize(600, 50);\n+                pa.setPreferredSize(new Dimension(600, 50));\n+                pa.setBackground(Color.red);\n+                sp = new ScrollPane(ScrollPane.SCROLLBARS_NEVER);\n+                sp.setSize(200, 50);\n+                pa.setLayout(new GridLayout(1, 3));\n+                pa.add(\"West\", new Label(\"west\", Label.LEFT));\n+                pa.add(\"West\", new Label());\n+                pa.add(\"East\", new Label(\"East\", Label.RIGHT));\n+                sp.add(pa);\n+                frame = new Frame();\n+                frame.setSize(200, 100);\n+                frame.add(sp);\n+                frame.setVisible(true);\n+            });\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+            EventQueue.invokeAndWait(() -> {\n+                frame.toFront();\n+                frame.requestFocus();\n+\n+                sp.setScrollPosition(X_POS, sp.getScrollPosition().y);\n+                pa.validate();\n+                \/\/ Now, before the fix, in Windows XP, Windows XP theme and on Vista,\n+                \/\/ scrollposition would be reset to zero..\n+                sp.validate();\n+\n+\n+                int i;\n+                i = (int) (sp.getScrollPosition().getX());\n+                if (i == 0) {\n+                    \/\/ actual position MAY be not equal to X_POS; still, it must be > 0.\n+                    throw new RuntimeException(\"Test failure: zero scroll position.\\n\\n\");\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionIntact.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- @test\n- @bug 6404832\n- @summary Tests that scroll position is not changed by validate() for mode SCROLLBARS_NEVER\n- @key headful\n- @run main ScrollPositionIntact\n-*\/\n-\n-import java.awt.Color;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.Frame;\n-import java.awt.GridLayout;\n-import java.awt.Label;\n-import java.awt.Panel;\n-import java.awt.ScrollPane;\n-\n-import java.lang.reflect.InvocationTargetException;\n-\n-public class ScrollPositionIntact {\n-    Frame frame;\n-    ScrollPane sp;\n-    Panel pa;\n-    public static final int X_POS = 100;\n-\n-    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n-        ScrollPositionIntact test = new ScrollPositionIntact();\n-        test.start();\n-    }\n-\n-\n-    public void start() throws InterruptedException, InvocationTargetException {\n-        try {\n-            EventQueue.invokeAndWait(() -> {\n-                pa = new Panel();\n-                pa.setSize(600, 50);\n-                pa.setPreferredSize(new Dimension(600, 50));\n-                pa.setBackground(Color.red);\n-                sp = new ScrollPane(ScrollPane.SCROLLBARS_NEVER);\n-                sp.setSize(200, 50);\n-                pa.setLayout(new GridLayout(1, 3));\n-                pa.add(\"West\", new Label(\"west\", Label.LEFT));\n-                pa.add(\"West\", new Label());\n-                pa.add(\"East\", new Label(\"East\", Label.RIGHT));\n-                sp.add(pa);\n-                frame = new Frame();\n-                frame.setSize(200, 100);\n-                frame.add(sp);\n-                frame.setVisible(true);\n-\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (Exception ex) {\n-                    throw new RuntimeException(\"Test failure: interruption?\\n\\n\");\n-                }\n-                frame.toFront();\n-                frame.requestFocus();\n-\n-                sp.setScrollPosition(X_POS, sp.getScrollPosition().y);\n-                pa.validate();\n-                \/\/ Now, before the fix, in Windows XP, Windows XP theme and on Vista,\n-                \/\/ scrollposition would be reset to zero..\n-                sp.validate();\n-\n-            });\n-            EventQueue.invokeLater(new Runnable() {\n-                public void run() {\n-                    int i;\n-                    i = (int) (sp.getScrollPosition().getX());\n-                    if (i == 0) {\n-                        \/\/ actual position MAY be not equal to X_POS; still, it must be > 0.\n-                        throw new RuntimeException(\"Test failure: zero scroll position.\\n\\n\");\n-                    }\n-                }\n-            });\n-        } finally {\n-            EventQueue.invokeLater(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionIntact\/ScrollPositionIntact.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"}]}