{"files":[{"patch":"@@ -44,1 +44,1 @@\n-public class ComponentScrollTest implements AdjustmentListener {\n+public class ComponentScrollTest {\n@@ -48,1 +48,2 @@\n-    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+\n+    public static void main(String[] args) throws Exception {\n@@ -54,1 +55,1 @@\n-    public void init() throws InterruptedException, InvocationTargetException {\n+    public void init() throws Exception {\n@@ -56,11 +57,19 @@\n-                scrollpane = new ScrollPane();\n-                frame = new Frame(\"Component Scroll Test\");\n-                scrollpane.add(new Component() {\n-                    public Dimension getPreferredSize() {\n-                        return new Dimension(500, 500);\n-                    }\n-                    public void paint(Graphics g) {\n-                        g.drawLine(0, 0, 500, 500);\n-                    }\n-                });\n-                frame.add(scrollpane);\n+            scrollpane = new ScrollPane();\n+            frame = new Frame(\"Component Scroll Test\");\n+            scrollpane.add(new Component() {\n+                public Dimension getPreferredSize() {\n+                    return new Dimension(500, 500);\n+                }\n+\n+                public void paint(Graphics g) {\n+                    g.drawLine(0, 0, 500, 500);\n+                }\n+            });\n+            frame.add(scrollpane);\n+            scrollpane.getVAdjustable().addAdjustmentListener(new AdjustmentListener() {\n+                @Override\n+                public void adjustmentValueChanged(AdjustmentEvent adjustmentEvent) {\n+                    count++;\n+                    scrollpane.getVAdjustable().setValue(20);\n+                }\n+            });\n@@ -68,1 +77,0 @@\n-        scrollpane.getVAdjustable().addAdjustmentListener(this);\n@@ -71,1 +79,1 @@\n-    public void start() throws InterruptedException, InvocationTargetException {\n+    public void start() throws Exception {\n@@ -77,8 +85,0 @@\n-                try {\n-                    Thread.sleep(5000);\n-                } catch (InterruptedException ie) {\n-                }\n-                System.out.println(\"Count = \" + count);\n-                if (count > 50) {\n-                    throw new RuntimeException();\n-                }\n@@ -86,0 +86,7 @@\n+\n+            Thread.sleep(5000);\n+\n+            System.out.println(\"Count = \" + count);\n+            if (count > 50) {\n+                throw new RuntimeException();\n+            }\n@@ -94,5 +101,0 @@\n-\n-    public void adjustmentValueChanged(AdjustmentEvent ae) {\n-        count++;\n-        scrollpane.getVAdjustable().setValue(20);\n-    }\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ComponentScrollTest.java","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    volatile Rectangle r;\n@@ -57,1 +58,1 @@\n-            f = new Frame();\n+            f = new Frame(\"ScrollPaneExtraScrollBar\");\n@@ -71,1 +72,3 @@\n-            Rectangle r = f.getBounds();\n+            EventQueue.invokeAndWait(() -> {\n+                r = f.getBounds();\n+            });\n@@ -77,1 +80,2 @@\n-            Thread.sleep(1000);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneExtraScrollBar.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-\n@@ -75,2 +74,0 @@\n-        \/\/ Check for Win32 environment. This test is only for Win32.\n-        \/\/ Even more: not for Windows 98: it doesn't support scroll children that long.\n@@ -78,16 +75,12 @@\n-            Properties prop = System.getProperties();\n-            String os = prop.getProperty(\"os.name\", \"\");\n-            if (os != null && (os.indexOf(\"98\") == -1)) {\n-                EventQueue.invokeAndWait(() -> {\n-                    pane = new ScrollPane();\n-                    frame.add(pane);\n-                    child = new MyPanel();\n-                    child.addMouseListener(new MouseAdapter() {\n-                        public void mousePressed(MouseEvent e) {\n-                            if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n-                                if (e.getSource() == ScrollPaneLimitation.child\n-                                        && e.getY() > SCROLL_POS) {\n-                                    mouseWasPressed = true;\n-                                    synchronized (lock) {\n-                                        lock.notify();\n-                                    }\n+            EventQueue.invokeAndWait(() -> {\n+                pane = new ScrollPane();\n+                frame.add(pane);\n+                child = new MyPanel();\n+                child.addMouseListener(new MouseAdapter() {\n+                    public void mousePressed(MouseEvent e) {\n+                        if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n+                            if (e.getSource() == ScrollPaneLimitation.child\n+                                    && e.getY() > SCROLL_POS) {\n+                                mouseWasPressed = true;\n+                                synchronized (lock) {\n+                                    lock.notify();\n@@ -97,7 +90,1 @@\n-                    });\n-                    pane.add(child);\n-                    frame.setSize(200, 200);\n-                    frame.pack();\n-                    frame.setLocationRelativeTo(null);\n-                    frame.setVisible(true);\n-                    pane.doLayout();\n+                    }\n@@ -105,0 +92,7 @@\n+                pane.add(child);\n+                frame.setSize(200, 200);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                pane.doLayout();\n+            });\n@@ -106,2 +100,2 @@\n-                robot.delay(1000);\n-                robot.waitForIdle();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n@@ -109,23 +103,20 @@\n-                EventQueue.invokeAndWait(() -> {\n-                    p = child.getLocation();\n-                    System.out.println(\"Child's initial location \" + p);\n-                    System.out.println(\"Pane's insets \" + pane.getInsets());\n-                    pane.setScrollPosition(0, SCROLL_POS);\n-                    p = pane.getScrollPosition();\n-                    System.out.println(\"Scroll pos = \" + p);\n-                    if (p.y != SCROLL_POS) {\n-                        throw new RuntimeException(\"wrong scroll position\");\n-                    }\n-                    p = child.getLocation();\n-                    System.out.println(\"Child pos = \" + p);\n-                    if (p.y != -SCROLL_POS) {\n-                        if (child.isLightweight()) {\n-                            \/\/ If it is lightweight it will always have (0, 0) location.\n-                            \/\/ Check location of its parent - it is Panel and it should\n-                            \/\/ be at (inset left, inset top + position)\n-                            Container cp = child.getParent();\n-                            p = cp.getLocation();\n-                            if (p.y != -SCROLL_POS) {\n-                                throw new RuntimeException(\"wrong child location\");\n-                            }\n-                        } else {\n+            EventQueue.invokeAndWait(() -> {\n+                p = child.getLocation();\n+                System.out.println(\"Child's initial location \" + p);\n+                System.out.println(\"Pane's insets \" + pane.getInsets());\n+                pane.setScrollPosition(0, SCROLL_POS);\n+                p = pane.getScrollPosition();\n+                System.out.println(\"Scroll pos = \" + p);\n+                if (p.y != SCROLL_POS) {\n+                    throw new RuntimeException(\"wrong scroll position\");\n+                }\n+                p = child.getLocation();\n+                System.out.println(\"Child pos = \" + p);\n+                if (p.y != -SCROLL_POS) {\n+                    if (child.isLightweight()) {\n+                        \/\/ If it is lightweight it will always have (0, 0) location.\n+                        \/\/ Check location of its parent - it is Panel and it should\n+                        \/\/ be at (inset left, inset top + position)\n+                        Container cp = child.getParent();\n+                        p = cp.getLocation();\n+                        if (p.y != -SCROLL_POS) {\n@@ -134,16 +125,2 @@\n-                    }\n-\n-                    p = pane.getLocationOnScreen();\n-                    Dimension d = pane.getSize();\n-                    p.x += d.width \/ 2;\n-                    p.y += d.height \/ 2;\n-                });\n-                robot.mouseMove(p.x, p.y);\n-                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-                robot.waitForIdle();\n-                synchronized (lock) {\n-                    try {\n-                        lock.wait(3000);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(\"test was interrupted\");\n+                    } else {\n+                        throw new RuntimeException(\"wrong child location\");\n@@ -152,2 +129,15 @@\n-                if (!mouseWasPressed) {\n-                    throw new RuntimeException(\"mouse was not pressed\");\n+\n+                p = pane.getLocationOnScreen();\n+                Dimension d = pane.getSize();\n+                p.x += d.width \/ 2;\n+                p.y += d.height \/ 2;\n+            });\n+            robot.mouseMove(p.x, p.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            synchronized (lock) {\n+                try {\n+                    lock.wait(3000);\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(\"test was interrupted\");\n@@ -156,0 +146,3 @@\n+            if (!mouseWasPressed) {\n+                throw new RuntimeException(\"mouse was not pressed\");\n+            }\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneLimitation.java","additions":62,"deletions":69,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    volatile Point buttonLoc;\n+    volatile Dimension buttonSize;\n@@ -84,0 +86,2 @@\n+                buttonLoc = button.getLocationOnScreen();\n+                buttonSize = button.getSize();\n@@ -86,2 +90,0 @@\n-            Point buttonLoc = button.getLocationOnScreen();\n-            Dimension buttonSize = button.getSize();\n@@ -95,1 +97,0 @@\n-   \/\/         Toolkit.getDefaultToolkit().sync();\n@@ -120,1 +121,1 @@\n-        Object lock = new Object();\n+        final Object lock = new Object();\n@@ -167,1 +168,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneRemoveAdd.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    public static Object LOCK = new Object();\n+    public static final Object LOCK = new Object();\n@@ -59,4 +59,0 @@\n-        if (Double.valueOf(System.getProperty(\"os.version\")) < 5.0) {\n-            System.out.println(\"This test is for Windows 2000 and above.\");\n-            return;\n-        }\n@@ -70,1 +66,1 @@\n-            frame = new Frame();\n+            frame = new Frame(\"ScrollPaneWindowsTest\");\n@@ -75,0 +71,1 @@\n+            sp = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n@@ -77,1 +74,0 @@\n-        sp = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n@@ -89,1 +85,0 @@\n-\n@@ -94,1 +89,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneWindowsTest.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.awt.*;\n-\n@@ -34,1 +32,8 @@\n-import java.lang.reflect.InvocationTargetException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n@@ -61,1 +66,1 @@\n-                frame = new Frame();\n+                frame = new Frame(\"ScrollPositionIntact\");\n@@ -79,1 +84,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionIntact.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}