{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+  @test\n+  @bug 4342129\n+  @summary Unable to scroll in scrollpane for canvas\n+  @key headful\n+*\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.AdjustmentListener;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ComponentScrollTest implements AdjustmentListener {\n+    public ScrollPane scrollpane;\n+    public Frame frame;\n+    public int count = 0;\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        ComponentScrollTest cst = new ComponentScrollTest();\n+        cst.init();\n+        cst.start();\n+    }\n+\n+    public void init() throws InterruptedException, InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+                scrollpane = new ScrollPane();\n+                frame = new Frame(\"Component Scroll Test\");\n+                scrollpane.add(new Component() {\n+                    public Dimension getPreferredSize() {\n+                        return new Dimension(500, 500);\n+                    }\n+                    public void paint(Graphics g) {\n+                        g.drawLine(0, 0, 500, 500);\n+                    }\n+                });\n+                frame.add(scrollpane);\n+        });\n+        scrollpane.getVAdjustable().addAdjustmentListener(this);\n+    }\n+\n+    public void start() throws InterruptedException, InvocationTargetException {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame.pack();\n+                frame.setVisible(true);\n+                scrollpane.getVAdjustable().setValue(20);\n+                try {\n+                    Thread.sleep(5000);\n+                } catch (InterruptedException ie) {\n+                }\n+                System.out.println(\"Count = \" + count);\n+                if (count > 50) {\n+                    throw new RuntimeException();\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void adjustmentValueChanged(AdjustmentEvent ae) {\n+        count++;\n+        scrollpane.getVAdjustable().setValue(20);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ComponentScrollTest\/ComponentScrollTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4100671\n+  @summary Tests that after removing\/adding a component can be still access.\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.Toolkit;\n+\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+\n+public class ScrollPaneRemoveAdd {\n+    Button button;\n+    ScrollPane pane;\n+    Semaphore actionSema;\n+    Frame frame;\n+    Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneRemoveAdd scrollTest = new ScrollPaneRemoveAdd();\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+\n+    public void init() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"Scroll pane Add\/Remove\");\n+\n+            pane = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+            button = new Button(\"press\");\n+            pane.add(button);\n+            frame.add(pane);\n+            actionSema = new Semaphore();\n+            button.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    actionSema.raise();\n+                }\n+            });\n+        });\n+        robot = new Robot();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                    frame.pack();\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                    pane.remove(0);\n+                    pane.add(button);\n+            });\n+\n+            Point buttonLoc = button.getLocationOnScreen();\n+            Dimension buttonSize = button.getSize();\n+            robot.mouseMove(buttonLoc.x + buttonSize.width \/ 2, buttonLoc.y + buttonSize.height \/ 2);\n+            robot.delay(50);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(50);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            Toolkit.getDefaultToolkit().sync();\n+            robot.delay(50);\n+            robot.waitForIdle();\n+            try {\n+                actionSema.doWait(1000);\n+            } catch (Exception ie) {\n+                throw new RuntimeException(\"My sleep was interrupted\");\n+            }\n+            robot.delay(50);\n+            robot.waitForIdle();\n+            if (!actionSema.getState()) {\n+                throw new RuntimeException(\"ScrollPane doesn't handle correctly add after remove\");\n+            }\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/RemoveChild\/ScrollPaneRemoveAdd.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+public class Semaphore {\n+    volatile boolean state = false;\n+    Object lock = new Object();\n+    volatile int waiting = 0;\n+    public Semaphore() {\n+    }\n+    public void doWait() throws InterruptedException {\n+        synchronized(lock) {\n+            if (state) {\n+                return;\n+            }\n+            waiting++;\n+            synchronized(this) {\n+                wait();\n+            }\n+            waiting--;\n+        }\n+    }\n+    public void doWait(int timeout) throws InterruptedException {\n+        synchronized(lock) {\n+            if (state) {\n+                return;\n+            }\n+            waiting++;\n+            synchronized(this) {\n+                wait(timeout);\n+            }\n+            waiting--;\n+        }\n+    }\n+    public void raise() {\n+        synchronized(lock) {\n+            state = true;\n+            if (waiting > 0) {\n+                synchronized(this) {\n+                    notifyAll();\n+                }\n+            }\n+        }\n+    }\n+    public synchronized boolean getState() {\n+        return state;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/RemoveChild\/Semaphore.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4152524\n+  @summary Test that scroll pane doesn't have scroll bars visible when it is shown for the first time with SCROLLBARS_AS_NEEDED style\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.InputEvent;\n+\n+public class ScrollPaneExtraScrollBar\n+{\n+    ScrollPane sp;\n+    Frame f;\n+    Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneExtraScrollBar scrollTest = new ScrollPaneExtraScrollBar();\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+    public void init() throws Exception {\n+\n+       robot = new Robot();\n+\n+        EventQueue.invokeAndWait(() -> {\n+                f = new Frame();\n+                sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+                sp.add(new Button(\"TEST\"));\n+                f.add(\"Center\", sp);\n+                f.pack();\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+        });\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+                robot.delay(100);\n+                robot.waitForIdle();\n+                Rectangle r = f.getBounds();\n+                robot.mouseMove(r.x + r.width - 1, r.y + r.height - 1);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseMove(r.x + r.width + 50, r.y + r.height + 50);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                Thread.sleep(1000);\n+\n+                EventQueue.invokeAndWait(() -> {\n+                    Insets insets = sp.getInsets();\n+                    if (insets.left != insets.right || insets.top != insets.bottom) {\n+                        throw new RuntimeException(\"ScrollPane has scroll bars visible\" +\n+                                \" when it shouldn't\");\n+                    }\n+                });\n+            }\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneInsets\/ScrollPaneExtraScrollBar.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4046446\n+  @summary Tests 16-bit limitations of scroll pane, child's position and size and mouse coordinates\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseAdapter;\n+\n+import java.util.Properties;\n+\n+public class ScrollPaneLimitation {\n+    final static int SCROLL_POS = 50000;\n+    public static boolean mouseWasPressed = false;\n+    public static Component child = null;\n+    private Object lock = new Object();\n+    public Frame frame;\n+    Robot robot;\n+    Point p;\n+    ScrollPane pane;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneLimitation scrollTest = new ScrollPaneLimitation();\n+\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+\n+    public void init() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"Scroll Pane Limitation\");\n+            frame.setLayout(new BorderLayout());\n+        });\n+        robot = new Robot();\n+    }\n+\n+    public void start() throws Exception {\n+\n+        \/\/ Check for Win32 environment. This test is only for Win32.\n+        \/\/ Even more: not for Windows 98: it doesn't support scroll children that long.\n+        try {\n+            Properties prop = System.getProperties();\n+\n+            String os = prop.getProperty(\"os.name\", \"\");\n+            if (os != null &&\n+                    (os.indexOf(\"98\") == -1) &&\n+                    (os.startsWith(\"Win\") || os.startsWith(\"win\") ||\n+                            os.startsWith(\"WIN\"))) {\n+\n+                EventQueue.invokeAndWait(() -> {\n+                    pane = new ScrollPane();\n+                    frame.add(pane);\n+                    child = new MyPanel();\n+                    child.addMouseListener(new MouseAdapter() {\n+                        public void mousePressed(MouseEvent e) {\n+                            if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n+                                if (e.getSource() == ScrollPaneLimitation.child\n+                                        && e.getY() > SCROLL_POS) {\n+                                    mouseWasPressed = true;\n+                                    synchronized (lock) {\n+                                        lock.notify();\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    });\n+                    pane.add(child);\n+                    frame.setSize(200, 200);\n+                    frame.pack();\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                    pane.doLayout();\n+\n+                    try {\n+                        Thread.sleep(1000);\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(\"test was interrupted\");\n+                    }\n+                    p = child.getLocation();\n+                    System.out.println(\"Child's initial location \" + p);\n+                    System.out.println(\"Pane's insets \" + pane.getInsets());\n+                    pane.setScrollPosition(0, SCROLL_POS);\n+                    p = pane.getScrollPosition();\n+                    System.out.println(\"Scroll pos = \" + p);\n+                    if (p.y != SCROLL_POS) {\n+                        throw new RuntimeException(\"wrong scroll position\");\n+                    }\n+                    p = child.getLocation();\n+                    System.out.println(\"Child pos = \" + p);\n+                    if (p.y != -SCROLL_POS) {\n+                        if (child.isLightweight()) {\n+                            \/\/ If it is lightweight it will always have (0, 0) location.\n+                            \/\/ Check location of its parent - it is Panel and it should\n+                            \/\/ be at (inset left, inset top + position)\n+                            Container cp = child.getParent();\n+                            p = cp.getLocation();\n+                            if (p.y != -SCROLL_POS) {\n+                                throw new RuntimeException(\"wrong child location\");\n+                            }\n+                        } else {\n+                            throw new RuntimeException(\"wrong child location\");\n+                        }\n+                    }\n+\n+                    p = pane.getLocationOnScreen();\n+                    Dimension d = pane.getSize();\n+                    p.x += d.width \/ 2;\n+                    p.y += d.height \/ 2;\n+                });\n+                robot.mouseMove(p.x, p.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.waitForIdle();\n+                synchronized (lock) {\n+                    try {\n+                        lock.wait(3000);\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(\"test was interrupted\");\n+                    }\n+                }\n+                if (!mouseWasPressed) {\n+                    throw new RuntimeException(\"mouse was not pressed\");\n+                }\n+            }\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    class MyPanel extends Component {\n+        public Dimension getPreferredSize() {\n+            return new Dimension(100, 100000);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneLimitation\/ScrollPaneLimitation.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4452612\n+  @summary The popup menu of the scroll bar doesn't work properly in Window2000.\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.ScrollPaneAdjustable;\n+\n+import java.awt.event.AdjustmentListener;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import java.util.Properties;\n+\n+public class ScrollPaneWindowsTest implements AdjustmentListener {\n+    ScrollPane sp;\n+    Panel p;\n+    Robot robot;\n+    Frame frame;\n+    Insets paneInsets;\n+    public static Object LOCK = new Object();\n+    ScrollPaneAdjustable vScroll;\n+    ScrollPaneAdjustable hScroll;\n+    boolean notifyReceived = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        ScrollPaneWindowsTest scrollTest = new ScrollPaneWindowsTest();\n+\n+        scrollTest.init();\n+        scrollTest.start();\n+    }\n+\n+    public void init() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame();\n+            frame.setLayout(new BorderLayout(1, 1));\n+            p = new Panel();\n+            p.setLayout(null);\n+            p.setSize(new Dimension(800, 800));\n+        });\n+        robot = new Robot();\n+        sp = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+        vScroll = (ScrollPaneAdjustable) sp.getVAdjustable();\n+        hScroll = (ScrollPaneAdjustable) sp.getHAdjustable();\n+        vScroll.addAdjustmentListener(this);\n+        hScroll.addAdjustmentListener(this);\n+\n+    }\n+\n+    public void start() throws Exception {\n+        Properties prop = System.getProperties();\n+        String os = prop.getProperty(\"os.name\", \"\").toUpperCase();\n+        System.out.println(\"OS= \" + os);\n+        if (!os.equals(\"WINDOWS 2000\") && !os.equals(\"WINDOWS 2003\") &&\n+                !os.equals(\"WINDOWS XP\")) {\n+            System.out.println(\"This test is for Windows 2000\/2003\/XP only.\");\n+            return;\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            sp.add(p);\n+            frame.add(sp);\n+\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+\n+            paneInsets = sp.getInsets();\n+            System.out.println(\"Insets: right = \" + paneInsets.right + \" bottom =  \" + paneInsets.bottom);\n+        });\n+        robot.wait(100);\n+        robot.waitForIdle();\n+\n+        robot.mouseMove(sp.getLocationOnScreen().x + sp.getWidth() - paneInsets.right \/ 2,\n+                sp.getLocationOnScreen().y + sp.getHeight() \/ 2);\n+        testOneScrollbar(vScroll);\n+        robot.mouseMove(sp.getLocationOnScreen().x + sp.getWidth() \/ 2,\n+                sp.getLocationOnScreen().y + sp.getHeight() - paneInsets.bottom \/ 2);\n+        testOneScrollbar(hScroll);\n+\n+        System.out.println(\"Test passed. \");\n+    }\n+\n+    public void testOneScrollbar(ScrollPaneAdjustable scroll) {\n+        try {\n+            \/\/to Bottom  - right\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.delay(2000);\n+\n+            notifyReceived = false;\n+            synchronized (LOCK) {\n+                for (int i = 0; i < 3; i++) {\n+                    robot.keyPress(KeyEvent.VK_DOWN);\n+                    robot.keyRelease(KeyEvent.VK_DOWN);\n+                }\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+                if (!notifyReceived) {\n+                    System.out.println(\"we are waiting 1\");\n+                    LOCK.wait(2000);\n+                }\n+                if (scroll.getValue() + scroll.getVisibleAmount() != scroll.getMaximum()) {\n+                    System.out.println(\" scroll.getValue() = \" + scroll.getValue());\n+                    System.out.println(\" scroll.getVisibleAmount() =  \" + scroll.getVisibleAmount());\n+                    System.out.println(\" scroll.getMaximum() = \" + scroll.getMaximum());\n+                    throw new RuntimeException(\"Test Failed. Position of scrollbar is incorrect.\");\n+                } else {\n+                    System.out.println(\"Test stage 1 passed.\");\n+                }\n+            }\n+\n+            \/\/top-left\n+            notifyReceived = false;\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.delay(2000);\n+\n+            synchronized (LOCK) {\n+                for (int i = 0; i < 2; i++) {\n+                    robot.keyPress(KeyEvent.VK_DOWN);\n+                    robot.keyRelease(KeyEvent.VK_DOWN);\n+                }\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+                if (!notifyReceived) {\n+                    System.out.println(\"we are waiting 2\");\n+                    LOCK.wait(2000);\n+                }\n+                if (scroll.getValue() != 0) {\n+                    System.out.println(\"scroll.getValue() = \" + scroll.getValue());\n+                    throw new RuntimeException(\"Test Failed. Position of scrollbar is incorrect.\");\n+                } else {\n+                    System.out.println(\"Test stage 2 passed.\");\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test interrupted while keys being pressed.\", e);\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void adjustmentValueChanged(AdjustmentEvent e) {\n+        notifyReceived = true;\n+        synchronized (ScrollPaneWindowsTest.LOCK) {\n+            ScrollPaneWindowsTest.LOCK.notify();\n+        }\n+        System.out.println(\"Adjustment Event called \");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneWindowsTest\/ScrollPaneWindowsTest.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ @test\n+ @bug 6404832\n+ @summary Tests that scroll position is not changed by validate() for mode SCROLLBARS_NEVER\n+ @key headful\n+ @run main ScrollPositionIntact\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ScrollPositionIntact {\n+    Frame frame;\n+    ScrollPane sp;\n+    Panel pa;\n+    public static final int X_POS = 100;\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        ScrollPositionIntact test = new ScrollPositionIntact();\n+        test.start();\n+    }\n+\n+\n+    public void start() throws InterruptedException, InvocationTargetException {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                pa = new Panel();\n+                pa.setSize(600, 50);\n+                pa.setPreferredSize(new Dimension(600, 50));\n+                pa.setBackground(Color.red);\n+                sp = new ScrollPane(ScrollPane.SCROLLBARS_NEVER);\n+                sp.setSize(200, 50);\n+                pa.setLayout(new GridLayout(1, 3));\n+                pa.add(\"West\", new Label(\"west\", Label.LEFT));\n+                pa.add(\"West\", new Label());\n+                pa.add(\"East\", new Label(\"East\", Label.RIGHT));\n+                sp.add(pa);\n+                frame = new Frame();\n+                frame.setSize(200, 100);\n+                frame.add(sp);\n+                frame.setVisible(true);\n+\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (Exception ex) {\n+                    throw new RuntimeException(\"Test failure: interruption?\\n\\n\");\n+                }\n+                frame.toFront();\n+                frame.requestFocus();\n+\n+                sp.setScrollPosition(X_POS, sp.getScrollPosition().y);\n+                pa.validate();\n+                \/\/ Now, before the fix, in Windows XP, Windows XP theme and on Vista,\n+                \/\/ scrollposition would be reset to zero..\n+                sp.validate();\n+\n+            });\n+            EventQueue.invokeLater(new Runnable() {\n+                public void run() {\n+                    int i;\n+                    i = (int) (sp.getScrollPosition().getX());\n+                    if (i == 0) {\n+                        \/\/ actual position MAY be not equal to X_POS; still, it must be > 0.\n+                        throw new RuntimeException(\"Test failure: zero scroll position.\\n\\n\");\n+                    }\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionIntact\/ScrollPositionIntact.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}