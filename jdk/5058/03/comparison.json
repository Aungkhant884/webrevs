{"files":[{"patch":"@@ -1,47 +0,0 @@\n-<!--\n- Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 4959409\n-  @author Naoto Sato\n-  @run applet\/manual=yesno bug4959409.html\n--->\n-  <head>\n-    <title>Test for <\/title>\n-  <\/head>\n-\n-  <body>\n-      <h1>Test for KEY_PRESS event for Shift+1: Bug id 4959409<\/h1>\n-\n-This test is for unix platforms only. Press Pass if you are not\n-testing on those platforms.\n-\n-Confirm the following behavior:\n-\n-    \"KEYPRESS received for Shift+1\" is displayed when you press \"Shift\" and \"1\" (typically \"!\").\n-\n-<APPLET CODE=\"bug4959409.class\" WIDTH=0 HEIGHT=0><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/im\/4959409\/bug4959409.html","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- *\n+ * @test\n@@ -27,1 +27,2 @@\n- * @author Naoto Sato\n+ * @summary Check whether pressing SHIFT + 1 triggers key event\n+ * @key headful\n@@ -30,3 +31,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import javax.swing.*;\n@@ -34,3 +32,117 @@\n-public class bug4959409 extends javax.swing.JApplet {\n-    public void init() {\n-        new TestFrame();\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.InputEvent;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4959409 {\n+\n+    public final static int TIMEOUT = 30;\n+    public final static int DELAY = 300;\n+    private static JFrame frame;\n+    private static JTextField jTextField;\n+    private static JLabel jLabel;\n+\n+    public static void createUIAndTest() throws Exception {\n+        final CountDownLatch frameVisibleLatch = new CountDownLatch(1);\n+        final CountDownLatch componentVisibleLatch = new CountDownLatch(1);\n+        final CountDownLatch keyPressedEventLatch = new CountDownLatch(1);\n+        final Point points[] = new Point[1];\n+        final Rectangle rect[] = new Rectangle[1];\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame(\"Test bug4959409\");\n+            jTextField = new JTextField();\n+            jLabel = new JLabel();\n+            frame.setLayout(new BorderLayout());\n+            frame.addComponentListener(new ComponentAdapter() {\n+                @Override\n+                public void componentShown(ComponentEvent e) {\n+                    super.componentShown(e);\n+                    System.out.println(\"Frame is visible \" + e.toString());\n+                    frameVisibleLatch.countDown();\n+                }\n+            });\n+\n+            jTextField.addComponentListener(new ComponentAdapter() {\n+                @Override\n+                public void componentShown(ComponentEvent e) {\n+                    super.componentShown(e);\n+                    System.out.println(\"Component is visible + \" + e.toString());\n+                    componentVisibleLatch.countDown();\n+                }\n+            });\n+\n+            jTextField.addKeyListener(new KeyAdapter() {\n+\n+                @Override\n+                public void keyPressed(KeyEvent keyEvent) {\n+                    super.keyPressed(keyEvent);\n+                    int code = keyEvent.getKeyCode();\n+                    int mod = keyEvent.getModifiersEx();\n+                    if (code == '1' && mod == KeyEvent.SHIFT_DOWN_MASK) {\n+                        keyPressedEventLatch.countDown();\n+                        jLabel.setText(\"KEYPRESS received for Shift+1\");\n+                        System.out.println(\"KEYPRESS received for Shift+1\");\n+                    } else {\n+                        jLabel.setText(\"Did not received KEY PRESS for Shift+1\");\n+                        System.out.println(\"Did not received KEY PRESS for Shift+1\");\n+                    }\n+                }\n+            });\n+\n+            Container container = frame.getContentPane();\n+            container.add(jTextField, BorderLayout.SOUTH);\n+            container.add(jLabel, BorderLayout.CENTER);\n+            frame.setSize(300, 300);\n+            frame.setLocationRelativeTo(null);\n+            frame.setAlwaysOnTop(true);\n+            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+            frame.setVisible(true);\n+        });\n+\n+        if (!isTopLevelVisible(frame, frameVisibleLatch)) {\n+            throw new RuntimeException(\"Dialog is not visible after \" + TIMEOUT + \"  seconds\");\n+        }\n+        System.out.println(\"frame is visible \" + frame.toString());\n+\n+        if (!isJComponentVisible(jTextField, componentVisibleLatch)) {\n+            throw new RuntimeException(\"Component is not visible after \" + TIMEOUT + \"   seconds\");\n+        }\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(DELAY);\n+        robot.waitForIdle();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            points[0] = jTextField.getLocationOnScreen();\n+            rect[0] = jTextField.getBounds();\n+        });\n+\n+        performMouseAction(robot, points[0].x + rect[0].width \/ 2, points[0].y + rect[0].height \/ 2);\n+\n+        \/\/ Press SHIFT + 1 keys\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_1);\n+        robot.keyRelease(KeyEvent.VK_1);\n+        robot.keyRelease(KeyEvent.VK_SHIFT);\n+        robot.waitForIdle();\n+\n+        if (!keyPressedEventLatch.await(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Did not received KEY PRESS for Shift + 1 , test failed\");\n+        }\n@@ -38,1 +150,0 @@\n-}\n@@ -40,15 +151,9 @@\n-class TestFrame extends JFrame implements KeyListener {\n-    JTextField text;\n-    JLabel label;\n-\n-    TestFrame () {\n-        text = new JTextField();\n-        text.addKeyListener(this);\n-        label = new JLabel(\" \");\n-        Container c = getContentPane();\n-        BorderLayout borderLayout1 = new BorderLayout();\n-        c.setLayout(borderLayout1);\n-        c.add(text, BorderLayout.CENTER);\n-        c.add(label, BorderLayout.SOUTH);\n-        setSize(300, 200);\n-        setVisible(true);\n+    public static void performMouseAction(final Robot robot, final int X, final int Y) {\n+        robot.waitForIdle();\n+        robot.mouseMove(X, Y);\n+        robot.delay(DELAY);\n+        robot.waitForIdle();\n+\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n@@ -57,7 +162,20 @@\n-    public void keyPressed(KeyEvent e) {\n-        int code = e.getKeyCode();\n-        int mods = e.getModifiers();\n-        if (code == '1' && mods == KeyEvent.SHIFT_MASK) {\n-            label.setText(\"KEYPRESS received for Shift+1\");\n-        } else {\n-            label.setText(\" \");\n+    public static void checkSwingTopLevelVisible(javax.swing.JFrame jFrame, CountDownLatch topLevelVisibleLatch) throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (jFrame.isVisible()) {\n+                topLevelVisibleLatch.countDown();\n+            }\n+        });\n+    }\n+\n+    public static boolean isTopLevelVisible(javax.swing.JFrame jFrame, CountDownLatch topLevelVisibleLatch) throws Exception {\n+        checkSwingTopLevelVisible(jFrame, topLevelVisibleLatch);\n+        if (topLevelVisibleLatch.getCount() != 0) {\n+            int count = 1;\n+            while (count <= 5) {\n+                TimeUnit.SECONDS.sleep(1);\n+                checkSwingTopLevelVisible(jFrame, topLevelVisibleLatch);\n+                if (topLevelVisibleLatch.getCount() == 0) {\n+                    break;\n+                }\n+                count++;\n+            }\n@@ -65,0 +183,1 @@\n+        return topLevelVisibleLatch.await(TIMEOUT, TimeUnit.SECONDS);\n@@ -67,1 +186,6 @@\n-    public void keyTyped(KeyEvent e) {\n+    public static void checkJComponentVisible(javax.swing.JComponent jComponent, CountDownLatch componentVisibleLatch) throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (jComponent.isVisible()) {\n+                componentVisibleLatch.countDown();\n+            }\n+        });\n@@ -70,1 +194,24 @@\n-    public void keyReleased(KeyEvent e) {\n+    public static boolean isJComponentVisible(javax.swing.JComponent jComponent, CountDownLatch componentVisibleLatch) throws InterruptedException, InvocationTargetException {\n+        checkJComponentVisible(jComponent, componentVisibleLatch);\n+        if (componentVisibleLatch.getCount() != 0) {\n+            int count = 1;\n+            while (count <= 5) {\n+                TimeUnit.SECONDS.sleep(1);\n+                checkJComponentVisible(jComponent, componentVisibleLatch);\n+                if (componentVisibleLatch.getCount() == 0) {\n+                    break;\n+                }\n+                count++;\n+            }\n+        }\n+        return componentVisibleLatch.await(TIMEOUT, TimeUnit.SECONDS);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createUIAndTest();\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(frame::dispose);\n+            }\n+        }\n@@ -73,0 +220,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/im\/4959409\/bug4959409.java","additions":182,"deletions":34,"binary":false,"changes":216,"status":"modified"}]}