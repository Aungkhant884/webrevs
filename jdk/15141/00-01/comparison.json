{"files":[{"patch":"@@ -523,0 +523,3 @@\n+            if (x.errno() == EEXIST)\n+                throw new FileSystemException(target.toString(), null,\n+                    \"Directory exists\");\n@@ -790,0 +793,3 @@\n+            if (x.errno() == EEXIST)\n+                throw new FileSystemException(target.toString(), null,\n+                    \"Link exists\");\n@@ -804,0 +810,3 @@\n+            if (x.errno() == EEXIST)\n+                throw new FileSystemException(target.toString(), null,\n+                    \"Special file exists\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -28,0 +27,1 @@\n+ * @run junit CopyInterference\n@@ -31,1 +31,1 @@\n-import java.io.UncheckedIOException;\n+import java.nio.file.CopyOption;\n@@ -36,1 +36,3 @@\n-import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -42,1 +44,8 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import static java.nio.file.StandardCopyOption.*;\n+import static java.nio.file.LinkOption.*;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -48,3 +57,0 @@\n-    private static final Path SOURCE;\n-    private static final Path TARGET;\n-\n@@ -53,9 +59,9 @@\n-    static {\n-        try {\n-            Path dir = Path.of(System.getProperty(\"test.dir\", \".\"));\n-            SOURCE = Files.createTempFile(dir, \"foo\", \"baz\");\n-            Files.delete(SOURCE);\n-            TARGET = Files.createTempFile(dir, \"fu\", \"bar\");\n-            Files.delete(TARGET);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n+    private static class CopyTask implements Runnable {\n+        Path source;\n+        Path target;\n+        CopyOption[] options;\n+\n+        CopyTask(Path source, Path target, CopyOption[] options) {\n+            this.source = source;\n+            this.target = target;\n+            this.options = options;\n@@ -63,1 +69,0 @@\n-    }\n@@ -65,1 +70,0 @@\n-    private static final Runnable copyTask = new Runnable() {\n@@ -70,2 +74,1 @@\n-                    Files.copy(SOURCE, TARGET,\n-                               StandardCopyOption.REPLACE_EXISTING);\n+                    Files.copy(source, target, options);\n@@ -85,1 +88,1 @@\n-    };\n+    }\n@@ -87,1 +90,10 @@\n-    public static void main(String[] args) throws Exception {\n+    private static Stream<Arguments> pathAndOptionsProvider()\n+        throws IOException {\n+        Path parent = Path.of(System.getProperty(\"test.dir\", \".\"));\n+        Path dir = Files.createTempDirectory(parent, \"foobargus\");\n+        dir.toFile().deleteOnExit();\n+\n+        List<Arguments> list = new ArrayList<Arguments>();\n+\n+        \/\/ regular file\n+        Path sourceFile = Files.createTempFile(dir, \"foo\", \"baz\");\n@@ -92,18 +104,46 @@\n-            Files.copy(in, SOURCE, StandardCopyOption.REPLACE_EXISTING);\n-            Files.deleteIfExists(TARGET);\n-\n-            ExecutorService es = Executors.newFixedThreadPool(N_THREADS);\n-            Future<?>[] results = new Future<?>[N_THREADS];\n-            for (int i = 0; i < N_THREADS; i++)\n-                results[i] = es.submit(copyTask);\n-\n-            es.shutdown();\n-            es.awaitTermination(5, TimeUnit.SECONDS);\n-\n-            \/\/ Check results\n-            for (Future<?> res : results) {\n-                try {\n-                    res.get();\n-                } catch (ExecutionException e) {\n-                    throw new RuntimeException(res.exceptionNow());\n-                }\n+            Files.copy(in, sourceFile, REPLACE_EXISTING);\n+        }\n+\n+        Arguments args = Arguments.of(sourceFile, dir.resolve(\"targetFile\"),\n+                                      new CopyOption[] {REPLACE_EXISTING});\n+        list.add(args);\n+\n+        \/\/ directory\n+        Path sourceDirectory = Files.createTempDirectory(dir, \"fubar\");\n+        args = Arguments.of(sourceDirectory, dir.resolve(\"targetDir\"),\n+                            new CopyOption[] {REPLACE_EXISTING});\n+        list.add(args);\n+\n+        \/\/ symblic link, followed\n+        Path link = dir.resolve(\"link\");\n+        Files.createSymbolicLink(link, sourceFile);\n+        args = Arguments.of(link, dir.resolve(\"linkFollowed\"),\n+                            new CopyOption[] {REPLACE_EXISTING});\n+        list.add(args);\n+\n+        \/\/ symblic link, not followed\n+        args = Arguments.of(link, dir.resolve(\"linkNotFollowed\"),\n+                            new CopyOption[] {REPLACE_EXISTING, NOFOLLOW_LINKS});\n+        list.add(args);\n+\n+        return list.stream();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"pathAndOptionsProvider\")\n+    void copy(Path source, Path target, CopyOption[] options)\n+        throws InterruptedException, IOException {\n+\n+        ExecutorService es = Executors.newFixedThreadPool(N_THREADS);\n+        CopyTask copyTask = new CopyTask(source, target, options);\n+        Future<?>[] results = new Future<?>[N_THREADS];\n+        for (int i = 0; i < N_THREADS; i++)\n+            results[i] = es.submit(copyTask);\n+\n+        es.close();\n+\n+        for (Future<?> res : results) {\n+            try {\n+                res.get();\n+            } catch (ExecutionException e) {\n+                throw new RuntimeException(res.exceptionNow());\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyInterference.java","additions":80,"deletions":40,"binary":false,"changes":120,"status":"modified"}]}