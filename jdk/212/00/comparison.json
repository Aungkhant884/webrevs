{"files":[{"patch":"@@ -120,0 +120,10 @@\n+###############################################################################\n+# Evaluates platform specific overrides for build devkit variables.\n+# $1: Name of variable\n+AC_DEFUN([BASIC_EVAL_BUILD_DEVKIT_VARIABLE],\n+[\n+  if test \"x[$]$1\" = x; then\n+    eval $1=\"\\${$1_${OPENJDK_BUILD_CPU}}\"\n+  fi\n+])\n+\n","filename":"make\/autoconf\/basic.m4","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -665,1 +665,3 @@\n-    if test \"x$FLAGS_CPU\" = xx86_64; then\n+    if test \"x$FLAGS_CPU\" = xaarch64; then\n+      $1_DEFINES_CPU_JDK=\"${$1_DEFINES_CPU_JDK} -D_ARM64_ -Darm64\"\n+    elif test \"x$FLAGS_CPU\" = xx86_64; then\n","filename":"make\/autoconf\/flags-cflags.m4","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,4 +168,1 @@\n-    if test \"x${OPENJDK_$1_CPU}\" = \"xx86\"; then\n-      $1_CPU_LDFLAGS=\"-safeseh\"\n-      # NOTE: Old build added -machine. Probably not needed.\n-      $1_CPU_LDFLAGS_JVM_ONLY=\"-machine:I386\"\n+    if test \"x${OPENJDK_$1_CPU_BITS}\" = \"x32\"; then\n@@ -173,2 +170,1 @@\n-    else\n-      $1_CPU_LDFLAGS_JVM_ONLY=\"-machine:AMD64\"\n+    elif test \"x${OPENJDK_$1_CPU_BITS}\" = \"x64\"; then\n@@ -177,0 +173,3 @@\n+    if test \"x${OPENJDK_$1_CPU}\" = \"xx86\"; then\n+      $1_CPU_LDFLAGS=\"-safeseh\"\n+    fi\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -240,2 +240,3 @@\n-    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\" || \\\n-        test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\"; then\n+      AC_MSG_RESULT([yes])\n+    elif test \"x$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU\" = \"xlinux-aarch64\"; then\n@@ -306,2 +307,3 @@\n-    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\" || \\\n-        test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\" ; then\n+    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\"; then\n+      AC_MSG_RESULT([yes])\n+    elif test \"x$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU\" = \"xlinux-aarch64\"; then\n@@ -339,2 +341,3 @@\n-    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\" || \\\n-        test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\" ; then\n+    if test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\"; then\n+      AC_MSG_RESULT([yes])\n+    elif test \"x$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU\" = \"xlinux-aarch64\"; then\n@@ -356,2 +359,3 @@\n-    if test \"x$OPENJDK_TARGET_CPU_ARCH\" = \"xx86\" || \\\n-        test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\" ; then\n+    if test \"x$OPENJDK_TARGET_CPU_ARCH\" = \"xx86\"; then\n+      AC_MSG_RESULT([yes])\n+    elif test \"x$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU\" = \"xlinux-aarch64\"; then\n","filename":"make\/autoconf\/jvm-features.m4","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-          BASIC_EVAL_DEVKIT_VARIABLE([BUILD_DEVKIT_NAME])\n+          BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_NAME])\n@@ -877,1 +877,1 @@\n-          BASIC_EVAL_DEVKIT_VARIABLE([BUILD_DEVKIT_EXTRA_PATH])\n+          BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_EXTRA_PATH])\n@@ -879,1 +879,1 @@\n-          BASIC_EVAL_DEVKIT_VARIABLE([BUILD_DEVKIT_TOOLCHAIN_PATH])\n+          BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_TOOLCHAIN_PATH])\n@@ -881,2 +881,6 @@\n-          BASIC_EVAL_DEVKIT_VARIABLE([BUILD_DEVKIT_SYSROOT])\n-          # Skip the Window specific parts\n+          BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_SYSROOT])\n+\n+          if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+            BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_VS_INCLUDE])\n+            BASIC_EVAL_BUILD_DEVKIT_VARIABLE([BUILD_DEVKIT_VS_LIB])\n+          fi\n@@ -892,1 +896,1 @@\n-        BUILD_SYSROOT=\"$BUILD_DEVKIT_SYSROOT\"\n+        UTIL_PREPEND_TO_PATH([PATH],$BUILD_DEVKIT_EXTRA_PATH)\n@@ -894,1 +898,1 @@\n-         # Fallback default of just \/bin if DEVKIT_PATH is not defined\n+        # Fallback default of just \/bin if DEVKIT_PATH is not defined\n@@ -898,1 +902,10 @@\n-        PATH=\"$BUILD_DEVKIT_TOOLCHAIN_PATH:$BUILD_DEVKIT_EXTRA_PATH\"\n+        UTIL_PREPEND_TO_PATH([PATH],$BUILD_DEVKIT_TOOLCHAIN_PATH)\n+\n+        BUILD_SYSROOT=\"$BUILD_DEVKIT_SYSROOT\"\n+\n+        if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+          BUILD_VS_INCLUDE=\"$BUILD_DEVKIT_VS_INCLUDE\"\n+          BUILD_VS_LIB=\"$BUILD_DEVKIT_VS_LIB\"\n+\n+          TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS([BUILD_])\n+        fi\n@@ -924,3 +937,31 @@\n-    # Just like for the target compiler, use the compiler as linker\n-    BUILD_LD=\"$BUILD_CC\"\n-    BUILD_LDCXX=\"$BUILD_CXX\"\n+    if test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+      # In the Microsoft toolchain we have a separate LD command \"link\".\n+      # Make sure we reject \/usr\/bin\/link (as determined in CYGWIN_LINK), which is\n+      # a cygwin program for something completely different.\n+      AC_CHECK_PROG([BUILD_LD], [link$EXE_SUFFIX],[link$EXE_SUFFIX],,, [$CYGWIN_LINK])\n+      UTIL_FIXUP_EXECUTABLE(BUILD_LD)\n+      # Verify that we indeed succeeded with this trick.\n+      AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])\n+\n+      # Reset PATH since it can contain a mix of WSL\/linux paths and Windows paths from VS,\n+      # which, in combination with WSLENV, will make the WSL layer complain\n+      old_path=\"$PATH\"\n+      PATH=\n+\n+      \"$BUILD_LD\" --version > \/dev\/null\n+\n+      if test $? -eq 0 ; then\n+        AC_MSG_RESULT([no])\n+        AC_MSG_ERROR([This is the Cygwin link tool. Please check your PATH and rerun configure.])\n+      else\n+        AC_MSG_RESULT([yes])\n+      fi\n+\n+      PATH=\"$old_path\"\n+\n+      BUILD_LDCXX=\"$BUILD_LD\"\n+    else\n+      # Just like for the target compiler, use the compiler as linker\n+      BUILD_LD=\"$BUILD_CC\"\n+      BUILD_LDCXX=\"$BUILD_CXX\"\n+    fi\n@@ -977,0 +1018,4 @@\n+    elif test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+      if test \"x$COMPILER_CPU_TEST\" != \"xARM64\"; then\n+        AC_MSG_ERROR([Target CPU mismatch. We are building for $OPENJDK_TARGET_CPU but CL is for \"$COMPILER_CPU_TEST\"; expected \"arm64\".])\n+      fi\n","filename":"make\/autoconf\/toolchain.m4","additions":56,"deletions":11,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n@@ -84,1 +84,1 @@\n-      else\n+      elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n@@ -87,0 +87,4 @@\n+      elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+        # for host x86-64, target aarch64\n+        VCVARSFILES=\"vc\/auxiliary\/build\/vcvarsamd64_arm64.bat \\\n+            vc\/auxiliary\/build\/vcvarsx86_arm64.bat\"\n@@ -126,1 +130,1 @@\n-        if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n@@ -128,1 +132,1 @@\n-        else\n+        elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n@@ -130,0 +134,2 @@\n+        elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+          VS_ENV_ARGS=\"\/arm64\"\n@@ -523,35 +529,1 @@\n-      # Convert VS_INCLUDE into SYSROOT_CFLAGS\n-      OLDIFS=\"$IFS\"\n-      IFS=\";\"\n-      for i in $VS_INCLUDE; do\n-        ipath=$i\n-        # Only process non-empty elements\n-        if test \"x$ipath\" != x; then\n-          IFS=\"$OLDIFS\"\n-          # Check that directory exists before calling fixup_path\n-          testpath=$ipath\n-          UTIL_REWRITE_AS_UNIX_PATH([testpath])\n-          if test -d \"$testpath\"; then\n-            UTIL_FIXUP_PATH([ipath])\n-            SYSROOT_CFLAGS=\"$SYSROOT_CFLAGS -I$ipath\"\n-          fi\n-          IFS=\";\"\n-        fi\n-      done\n-      # Convert VS_LIB into SYSROOT_LDFLAGS\n-      for i in $VS_LIB; do\n-        libpath=$i\n-        # Only process non-empty elements\n-        if test \"x$libpath\" != x; then\n-          IFS=\"$OLDIFS\"\n-          # Check that directory exists before calling fixup_path\n-          testpath=$libpath\n-          UTIL_REWRITE_AS_UNIX_PATH([testpath])\n-          if test -d \"$testpath\"; then\n-            UTIL_FIXUP_PATH([libpath])\n-            SYSROOT_LDFLAGS=\"$SYSROOT_LDFLAGS -libpath:$libpath\"\n-          fi\n-          IFS=\";\"\n-        fi\n-      done\n-      IFS=\"$OLDIFS\"\n+      TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS\n@@ -596,1 +568,1 @@\n-      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n@@ -598,1 +570,1 @@\n-      else\n+      elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n@@ -600,0 +572,5 @@\n+      elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+        # The cygwin 'file' command only returns \"PE32+ executable (DLL) (console), for MS Windows\",\n+        # without specifying which architecture it is for specifically. This has been fixed upstream.\n+        # https:\/\/github.com\/file\/file\/commit\/b849b1af098ddd530094bf779b58431395db2e10#diff-ff2eced09e6860de75057dd731d092aeR142\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n@@ -619,0 +596,8 @@\n+  if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n+    vs_target_cpu=x86\n+  elif test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+    vs_target_cpu=x64\n+  elif test \"x$OPENJDK_TARGET_CPU\" = xaarch64; then\n+    vs_target_cpu=arm64\n+  fi\n+\n@@ -625,5 +610,1 @@\n-        if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-          POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/x64\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n-        else\n-          POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/x86\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n-        fi\n+        POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/$vs_target_cpu\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n@@ -634,5 +615,1 @@\n-        if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-          POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_TOOLS_REDIST_DIR\/x64\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n-        else\n-          POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_TOOLS_REDIST_DIR\/x86\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n-        fi\n+        POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_TOOLS_REDIST_DIR\/$vs_target_cpu\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n@@ -670,7 +647,2 @@\n-      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n-        | $GREP -i \/x64\/ | $HEAD --lines 1`\n-      else\n-        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n-        | $GREP -i \/x86\/ | $HEAD --lines 1`\n-      fi\n+      POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n+        | $GREP -i \/$vs_target_cpu\/ | $HEAD --lines 1`\n@@ -686,1 +658,1 @@\n-      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = xx86; then\n@@ -688,4 +660,1 @@\n-        | $GREP x64 | $HEAD --lines 1`\n-      else\n-        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n-        | $GREP x86 | $GREP -v ia64 | $GREP -v x64 | $HEAD --lines 1`\n+        | $GREP x86 | $GREP -v ia64 | $GREP -v x64 | $GREP -v arm64 | $HEAD --lines 1`\n@@ -697,0 +666,3 @@\n+      else\n+        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n+          | $GREP $vs_target_cpu | $HEAD --lines 1`\n@@ -760,1 +732,1 @@\n-      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows only) @<:@probed@:>@])])\n+      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows 64-bits only) @<:@probed@:>@])])\n@@ -762,1 +734,1 @@\n-  if test \"x$VCRUNTIME_1_NAME\" != \"x\"; then\n+  if test \"x$VCRUNTIME_1_NAME\" != \"x\" -a \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n@@ -804,2 +776,3 @@\n-      dll_subdir=$OPENJDK_TARGET_CPU\n-      if test \"x$dll_subdir\" = \"xx86_64\"; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+        dll_subdir=\"arm64\"\n+      elif test \"x$OPENJDK_TARGET_CPU\" = \"xx86_64\"; then\n@@ -807,0 +780,2 @@\n+      elif test \"x$OPENJDK_TARGET_CPU\" = \"xx86\"; then\n+        dll_subdir=\"x86\"\n@@ -829,0 +804,46 @@\n+\n+# Setup the sysroot flags and add them to global CFLAGS and LDFLAGS so\n+# that configure can use them while detecting compilers.\n+# TOOLCHAIN_TYPE is available here.\n+# Param 1 - Optional prefix to all variables. (e.g BUILD_)\n+AC_DEFUN([TOOLCHAIN_SETUP_VISUAL_STUDIO_SYSROOT_FLAGS],\n+[\n+  OLDIFS=\"$IFS\"\n+  IFS=\";\"\n+  # Convert $1VS_INCLUDE into $1SYSROOT_CFLAGS\n+  for i in [$]$1VS_INCLUDE; do\n+    ipath=$i\n+    # Only process non-empty elements\n+    if test \"x$ipath\" != x; then\n+      IFS=\"$OLDIFS\"\n+      # Check that directory exists before calling fixup_path\n+      testpath=$ipath\n+      UTIL_REWRITE_AS_UNIX_PATH([testpath])\n+      if test -d \"$testpath\"; then\n+        UTIL_FIXUP_PATH([ipath])\n+        $1SYSROOT_CFLAGS=\"[$]$1SYSROOT_CFLAGS -I$ipath\"\n+      fi\n+      IFS=\";\"\n+    fi\n+  done\n+  # Convert $1VS_LIB into $1SYSROOT_LDFLAGS\n+  for i in [$]$1VS_LIB; do\n+    libpath=$i\n+    # Only process non-empty elements\n+    if test \"x$libpath\" != x; then\n+      IFS=\"$OLDIFS\"\n+      # Check that directory exists before calling fixup_path\n+      testpath=$libpath\n+      UTIL_REWRITE_AS_UNIX_PATH([testpath])\n+      if test -d \"$testpath\"; then\n+        UTIL_FIXUP_PATH([libpath])\n+        $1SYSROOT_LDFLAGS=\"[$]$1SYSROOT_LDFLAGS -libpath:$libpath\"\n+      fi\n+      IFS=\";\"\n+    fi\n+  done\n+  IFS=\"$OLDIFS\"\n+\n+  AC_SUBST($1SYSROOT_CFLAGS)\n+  AC_SUBST($1SYSROOT_LDFLAGS)\n+])\n","filename":"make\/autoconf\/toolchain_windows.m4","additions":88,"deletions":67,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/bin\/Hostx64\/arm64\" $DEVKIT_ROOT\/VC\/bin\/\n@@ -119,0 +120,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/lib\/arm64\" $DEVKIT_ROOT\/VC\/lib\/\n@@ -123,0 +125,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/atlmfc\/lib\/arm64\" $DEVKIT_ROOT\/VC\/atlmfc\/lib\/\n@@ -129,0 +132,1 @@\n+cp -r \"$VS_INSTALL_DIR\/$REDIST_SUBDIR\/arm64\" $DEVKIT_ROOT\/VC\/redist\/\n@@ -137,1 +141,3 @@\n-cp $DEVKIT_ROOT\/VC\/redist\/x64\/$MSVCP_DLL $DEVKIT_ROOT\/VC\/bin\/x64\n+cp $DEVKIT_ROOT\/VC\/redist\/x64\/$MSVCR_DLL $DEVKIT_ROOT\/VC\/bin\/x64\n+cp $DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCP_DLL $DEVKIT_ROOT\/VC\/bin\/arm64\n+cp $DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCP_DLL $DEVKIT_ROOT\/VC\/bin\/arm64\n@@ -155,0 +161,1 @@\n+cp -r \"$SDK_INSTALL_DIR\/lib\/$SDK_FULL_VERSION\/um\/arm64\" $DEVKIT_ROOT\/$SDK_VERSION\/lib\/\n@@ -157,0 +164,1 @@\n+cp -r \"$SDK_INSTALL_DIR\/lib\/$SDK_FULL_VERSION\/ucrt\/arm64\" $DEVKIT_ROOT\/$SDK_VERSION\/lib\/\n@@ -191,0 +199,7 @@\n+echo-info \"DEVKIT_TOOLCHAIN_PATH_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/bin\/arm64:\\$DEVKIT_ROOT\/$SDK_VERSION\/bin\/x64:\\$DEVKIT_ROOT\/$SDK_VERSION\/bin\/x86\\\"\"\n+echo-info \"DEVKIT_VS_INCLUDE_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/include;\\$DEVKIT_ROOT\/VC\/atlmfc\/include;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/shared;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/ucrt;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/um;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/winrt\\\"\"\n+echo-info \"DEVKIT_VS_LIB_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/lib\/arm64;\\$DEVKIT_ROOT\/VC\/atlmfc\/lib\/arm64;\\$DEVKIT_ROOT\/$SDK_VERSION\/lib\/arm64\\\"\"\n+echo-info \"DEVKIT_MSVCR_DLL_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCR_DLL\\\"\"\n+echo-info \"DEVKIT_MSVCP_DLL_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCP_DLL\\\"\"\n+echo-info \"DEVKIT_UCRT_DLL_DIR_aarch64=\\\"\\$DEVKIT_ROOT\/10\/Redist\/ucrt\/DLLs\/arm64\\\"\"\n+echo-info \"\"\n","filename":"make\/devkit\/createWindowsDevkit2017.sh","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/bin\/Hostx64\/arm64\" $DEVKIT_ROOT\/VC\/bin\/\n@@ -123,0 +124,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/lib\/arm64\" $DEVKIT_ROOT\/VC\/lib\/\n@@ -127,0 +129,1 @@\n+cp -r \"$VS_INSTALL_DIR\/${VC_SUBDIR}\/atlmfc\/lib\/arm64\" $DEVKIT_ROOT\/VC\/atlmfc\/lib\/\n@@ -133,0 +136,1 @@\n+cp -r \"$VS_INSTALL_DIR\/$REDIST_SUBDIR\/arm64\" $DEVKIT_ROOT\/VC\/redist\/\n@@ -142,0 +146,2 @@\n+cp $DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCR_DLL $DEVKIT_ROOT\/VC\/bin\/arm64\n+cp $DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCP_DLL $DEVKIT_ROOT\/VC\/bin\/arm64\n@@ -159,0 +165,1 @@\n+cp -r \"$SDK_INSTALL_DIR\/lib\/$SDK_FULL_VERSION\/um\/arm64\" $DEVKIT_ROOT\/$SDK_VERSION\/lib\/\n@@ -161,0 +168,1 @@\n+cp -r \"$SDK_INSTALL_DIR\/lib\/$SDK_FULL_VERSION\/ucrt\/arm64\" $DEVKIT_ROOT\/$SDK_VERSION\/lib\/\n@@ -196,0 +204,8 @@\n+echo-info \"DEVKIT_TOOLCHAIN_PATH_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/bin\/arm64:\\$DEVKIT_ROOT\/$SDK_VERSION\/bin\/x64:\\$DEVKIT_ROOT\/$SDK_VERSION\/bin\/x86\\\"\"\n+echo-info \"DEVKIT_VS_INCLUDE_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/include;\\$DEVKIT_ROOT\/VC\/atlmfc\/include;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/shared;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/ucrt;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/um;\\$DEVKIT_ROOT\/$SDK_VERSION\/include\/winrt\\\"\"\n+echo-info \"DEVKIT_VS_LIB_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/lib\/arm64;\\$DEVKIT_ROOT\/VC\/atlmfc\/lib\/arm64;\\$DEVKIT_ROOT\/$SDK_VERSION\/lib\/arm64\\\"\"\n+echo-info \"DEVKIT_MSVCR_DLL_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCR_DLL\\\"\"\n+echo-info \"DEVKIT_VCRUNTIME_1_DLL_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/arm64\/$VCRUNTIME_1_DLL\\\"\"\n+echo-info \"DEVKIT_MSVCP_DLL_aarch64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/arm64\/$MSVCP_DLL\\\"\"\n+echo-info \"DEVKIT_UCRT_DLL_DIR_aarch64=\\\"\\$DEVKIT_ROOT\/10\/Redist\/ucrt\/DLLs\/arm64\\\"\"\n+echo-info \"\"\n","filename":"make\/devkit\/createWindowsDevkit2019.sh","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,0 +91,7 @@\n+  else ifeq ($(call isTargetOs, windows), true)\n+    ifeq ($(call isTargetCpuBits, 64), true)\n+      ADLCFLAGS += -D_WIN64=1\n+    endif\n+    ifeq ($(HOTSPOT_TARGET_CPU_ARCH), aarch64)\n+      ADLCFLAGS += -DR18_RESERVED\n+    endif\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,0 +63,6 @@\n+\n+  ifeq ($(OPENJDK_TARGET_CPU),aarch64)\n+    # cl.exe does only recognize few file extensions as valid (ex: .c, .h, .cpp), so\n+    # make sure *.java.template files are recognized as valid input files\n+    CPP_FILEPREFIX = -Tc\n+  endif\n@@ -76,1 +82,1 @@\n-\t      $(CPP) $(CPP_FLAGS) $(SYSROOT_CFLAGS) $(CFLAGS_JDKLIB) $< \\\n+\t      $(CPP) $(CPP_FLAGS) $(SYSROOT_CFLAGS) $(CFLAGS_JDKLIB) $(CPP_FILEPREFIX) $< \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,0 +7,4 @@\n+# r18 is used for TLS on Windows ABI.\n+REGS30 = [reg for reg in range(0,30) if reg != 18]\n+REGS31 = REGS30 + [31]\n+\n@@ -15,1 +19,1 @@\n-        self.number = random.randint(0, 30)\n+        self.number = random.choice(REGS30)\n@@ -39,1 +43,1 @@\n-        self.number = random.randint(0, 31)\n+        self.number = random.choice(REGS31)\n@@ -56,1 +60,1 @@\n-        self.number = random.randint(0, 31)\n+        self.number = random.choice(REGS31)\n@@ -1334,1 +1338,1 @@\n-                        [\"st1d\",   \"__ sve_st1d(z0, __ D, p4, Address(r0, r18));\",       \"st1d\\t{z0.d}, p4, [x0, x18, LSL #3]\"],\n+                        [\"st1d\",   \"__ sve_st1d(z0, __ D, p4, Address(r0, r17));\",       \"st1d\\t{z0.d}, p4, [x0, x17, LSL #3]\"],\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-reg_def R18     ( SOC, SOC, Op_RegI, 18, r18->as_VMReg()        );\n-reg_def R18_H   ( SOC, SOC, Op_RegI, 18, r18->as_VMReg()->next());\n+reg_def R18     ( SOC, SOC, Op_RegI, 18, r18_tls->as_VMReg()        );\n+reg_def R18_H   ( SOC, SOC, Op_RegI, 18, r18_tls->as_VMReg()->next());\n@@ -719,0 +719,4 @@\n+#ifdef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n+    R18,                        \/\/ tls on Windows\n+#endif\n@@ -726,0 +730,4 @@\n+#ifdef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n+    R18, R18_H,                 \/\/ tls on Windows, platform register on macOS\n+#endif\n@@ -6295,1 +6303,1 @@\n-  max_instructions_per_bundle = 2;   \/\/ A53 = 2, A57 = 4\n+  max_instructions_per_bundle = 4;   \/\/ A53 = 2, A57 = 4\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -99,24 +99,24 @@\n-    __ add(r26, r23, r13, Assembler::LSL, 32);         \/\/       add     x26, x23, x13, LSL #32\n-    __ sub(r12, r24, r9, Assembler::LSR, 37);          \/\/       sub     x12, x24, x9, LSR #37\n-    __ adds(r28, r15, r8, Assembler::ASR, 39);         \/\/       adds    x28, x15, x8, ASR #39\n-    __ subs(r7, r28, r30, Assembler::ASR, 57);         \/\/       subs    x7, x28, x30, ASR #57\n-    __ addw(r9, r22, r27, Assembler::ASR, 15);         \/\/       add     w9, w22, w27, ASR #15\n-    __ subw(r3, r13, r18, Assembler::ASR, 30);         \/\/       sub     w3, w13, w18, ASR #30\n-    __ addsw(r14, r26, r8, Assembler::ASR, 17);        \/\/       adds    w14, w26, w8, ASR #17\n-    __ subsw(r0, r22, r12, Assembler::ASR, 21);        \/\/       subs    w0, w22, w12, ASR #21\n-    __ andr(r0, r15, r26, Assembler::LSL, 20);         \/\/       and     x0, x15, x26, LSL #20\n-    __ orr(r26, r5, r17, Assembler::LSL, 61);          \/\/       orr     x26, x5, x17, LSL #61\n-    __ eor(r24, r13, r2, Assembler::LSL, 32);          \/\/       eor     x24, x13, x2, LSL #32\n-    __ ands(r28, r3, r17, Assembler::ASR, 35);         \/\/       ands    x28, x3, x17, ASR #35\n-    __ andw(r25, r16, r29, Assembler::LSR, 18);        \/\/       and     w25, w16, w29, LSR #18\n-    __ orrw(r13, r18, r11, Assembler::LSR, 9);         \/\/       orr     w13, w18, w11, LSR #9\n-    __ eorw(r5, r5, r18, Assembler::LSR, 15);          \/\/       eor     w5, w5, w18, LSR #15\n-    __ andsw(r2, r23, r27, Assembler::ASR, 26);        \/\/       ands    w2, w23, w27, ASR #26\n-    __ bic(r27, r28, r16, Assembler::LSR, 45);         \/\/       bic     x27, x28, x16, LSR #45\n-    __ orn(r8, r25, r26, Assembler::ASR, 37);          \/\/       orn     x8, x25, x26, ASR #37\n-    __ eon(r29, r17, r13, Assembler::LSR, 63);         \/\/       eon     x29, x17, x13, LSR #63\n-    __ bics(r28, r24, r2, Assembler::LSR, 31);         \/\/       bics    x28, x24, x2, LSR #31\n-    __ bicw(r19, r26, r7, Assembler::ASR, 3);          \/\/       bic     w19, w26, w7, ASR #3\n-    __ ornw(r6, r24, r10, Assembler::ASR, 3);          \/\/       orn     w6, w24, w10, ASR #3\n-    __ eonw(r4, r21, r1, Assembler::LSR, 29);          \/\/       eon     w4, w21, w1, LSR #29\n-    __ bicsw(r16, r21, r0, Assembler::LSR, 19);        \/\/       bics    w16, w21, w0, LSR #19\n+    __ add(r25, r22, r12, Assembler::LSL, 32);         \/\/   add x25, x22, x12, LSL #32\n+    __ sub(r11, r23, r8, Assembler::LSR, 37);          \/\/   sub x11, x23, x8, LSR #37\n+    __ adds(r27, r14, r8, Assembler::ASR, 39);         \/\/   adds    x27, x14, x8, ASR #39\n+    __ subs(r7, r27, r29, Assembler::ASR, 57);         \/\/   subs    x7, x27, x29, ASR #57\n+    __ addw(r8, r22, r27, Assembler::ASR, 15);         \/\/   add w8, w22, w27, ASR #15\n+    __ subw(r2, r12, r17, Assembler::ASR, 30);         \/\/   sub w2, w12, w17, ASR #30\n+    __ addsw(r13, r26, r7, Assembler::ASR, 17);        \/\/   adds    w13, w26, w7, ASR #17\n+    __ subsw(r0, r21, r11, Assembler::ASR, 21);        \/\/   subs    w0, w21, w11, ASR #21\n+    __ andr(r0, r14, r26, Assembler::LSL, 20);         \/\/   and x0, x14, x26, LSL #20\n+    __ orr(r26, r5, r16, Assembler::LSL, 61);          \/\/   orr x26, x5, x16, LSL #61\n+    __ eor(r24, r12, r2, Assembler::LSL, 32);          \/\/   eor x24, x12, x2, LSL #32\n+    __ ands(r28, r3, r15, Assembler::ASR, 35);         \/\/   ands    x28, x3, x15, ASR #35\n+    __ andw(r24, r15, r28, Assembler::LSR, 18);        \/\/   and w24, w15, w28, LSR #18\n+    __ orrw(r12, r17, r11, Assembler::LSR, 9);         \/\/   orr w12, w17, w11, LSR #9\n+    __ eorw(r5, r5, r17, Assembler::LSR, 15);          \/\/   eor w5, w5, w17, LSR #15\n+    __ andsw(r2, r22, r26, Assembler::ASR, 26);        \/\/   ands    w2, w22, w26, ASR #26\n+    __ bic(r27, r27, r15, Assembler::LSR, 45);         \/\/   bic x27, x27, x15, LSR #45\n+    __ orn(r7, r24, r25, Assembler::ASR, 37);          \/\/   orn x7, x24, x25, ASR #37\n+    __ eon(r28, r16, r13, Assembler::LSR, 63);         \/\/   eon x28, x16, x13, LSR #63\n+    __ bics(r27, r24, r2, Assembler::LSR, 31);         \/\/   bics    x27, x24, x2, LSR #31\n+    __ bicw(r19, r25, r7, Assembler::ASR, 3);          \/\/   bic w19, w25, w7, ASR #3\n+    __ ornw(r6, r24, r9, Assembler::ASR, 3);           \/\/   orn w6, w24, w9, ASR #3\n+    __ eonw(r4, r21, r1, Assembler::LSR, 29);          \/\/   eon w4, w21, w1, LSR #29\n+    __ bicsw(r15, r20, r0, Assembler::LSR, 19);        \/\/   bics    w15, w20, w0, LSR #19\n@@ -125,8 +125,8 @@\n-    __ addw(r17, r12, 379u);                           \/\/       add     w17, w12, #379\n-    __ addsw(r30, r1, 22u);                            \/\/       adds    w30, w1, #22\n-    __ subw(r29, r5, 126u);                            \/\/       sub     w29, w5, #126\n-    __ subsw(r6, r24, 960u);                           \/\/       subs    w6, w24, #960\n-    __ add(r0, r13, 104u);                             \/\/       add     x0, x13, #104\n-    __ adds(r8, r6, 663u);                             \/\/       adds    x8, x6, #663\n-    __ sub(r10, r5, 516u);                             \/\/       sub     x10, x5, #516\n-    __ subs(r1, r3, 1012u);                            \/\/       subs    x1, x3, #1012\n+    __ addw(r16, r11, 379u);                           \/\/   add w16, w11, #379\n+    __ addsw(r29, r1, 22u);                            \/\/   adds    w29, w1, #22\n+    __ subw(r28, r5, 126u);                            \/\/   sub w28, w5, #126\n+    __ subsw(r6, r24, 960u);                           \/\/   subs    w6, w24, #960\n+    __ add(r0, r12, 104u);                             \/\/   add x0, x12, #104\n+    __ adds(r7, r6, 663u);                             \/\/   adds    x7, x6, #663\n+    __ sub(r10, r5, 516u);                             \/\/   sub x10, x5, #516\n+    __ subs(r1, r2, 1012u);                            \/\/   subs    x1, x2, #1012\n@@ -135,8 +135,8 @@\n-    __ andw(r6, r11, 4294049777ull);                   \/\/       and     w6, w11, #0xfff1fff1\n-    __ orrw(r28, r5, 4294966791ull);                   \/\/       orr     w28, w5, #0xfffffe07\n-    __ eorw(r1, r20, 134217216ull);                    \/\/       eor     w1, w20, #0x7fffe00\n-    __ andsw(r7, r18, 1048576ull);                     \/\/       ands    w7, w18, #0x100000\n-    __ andr(r14, r12, 9223372036854775808ull);         \/\/       and     x14, x12, #0x8000000000000000\n-    __ orr(r9, r11, 562675075514368ull);               \/\/       orr     x9, x11, #0x1ffc000000000\n-    __ eor(r17, r0, 18014398509481728ull);             \/\/       eor     x17, x0, #0x3fffffffffff00\n-    __ ands(r1, r8, 18446744073705357315ull);          \/\/       ands    x1, x8, #0xffffffffffc00003\n+    __ andw(r5, r10, 4294049777ull);                   \/\/   and w5, w10, #0xfff1fff1\n+    __ orrw(r27, r4, 4294966791ull);                   \/\/   orr w27, w4, #0xfffffe07\n+    __ eorw(r1, r20, 134217216ull);                    \/\/   eor w1, w20, #0x7fffe00\n+    __ andsw(r7, r17, 1048576ull);                     \/\/   ands    w7, w17, #0x100000\n+    __ andr(r13, r11, 9223372036854775808ull);         \/\/   and x13, x11, #0x8000000000000000\n+    __ orr(r9, r10, 562675075514368ull);               \/\/   orr x9, x10, #0x1ffc000000000\n+    __ eor(r16, r0, 18014398509481728ull);             \/\/   eor x16, x0, #0x3fffffffffff00\n+    __ ands(r1, r8, 18446744073705357315ull);          \/\/   ands    x1, x8, #0xffffffffffc00003\n@@ -145,6 +145,6 @@\n-    __ b(__ pc());                                     \/\/       b       .\n-    __ b(back);                                        \/\/       b       back\n-    __ b(forth);                                       \/\/       b       forth\n-    __ bl(__ pc());                                    \/\/       bl      .\n-    __ bl(back);                                       \/\/       bl      back\n-    __ bl(forth);                                      \/\/       bl      forth\n+    __ b(__ pc());                                     \/\/   b   .\n+    __ b(back);                                        \/\/   b   back\n+    __ b(forth);                                       \/\/   b   forth\n+    __ bl(__ pc());                                    \/\/   bl  .\n+    __ bl(back);                                       \/\/   bl  back\n+    __ bl(forth);                                      \/\/   bl  forth\n@@ -153,16 +153,16 @@\n-    __ cbzw(r10, __ pc());                             \/\/       cbz     w10, .\n-    __ cbzw(r10, back);                                \/\/       cbz     w10, back\n-    __ cbzw(r10, forth);                               \/\/       cbz     w10, forth\n-    __ cbnzw(r8, __ pc());                             \/\/       cbnz    w8, .\n-    __ cbnzw(r8, back);                                \/\/       cbnz    w8, back\n-    __ cbnzw(r8, forth);                               \/\/       cbnz    w8, forth\n-    __ cbz(r11, __ pc());                              \/\/       cbz     x11, .\n-    __ cbz(r11, back);                                 \/\/       cbz     x11, back\n-    __ cbz(r11, forth);                                \/\/       cbz     x11, forth\n-    __ cbnz(r29, __ pc());                             \/\/       cbnz    x29, .\n-    __ cbnz(r29, back);                                \/\/       cbnz    x29, back\n-    __ cbnz(r29, forth);                               \/\/       cbnz    x29, forth\n-    __ adr(r19, __ pc());                              \/\/       adr     x19, .\n-    __ adr(r19, back);                                 \/\/       adr     x19, back\n-    __ adr(r19, forth);                                \/\/       adr     x19, forth\n-    __ _adrp(r19, __ pc());                            \/\/       adrp    x19, .\n+    __ cbzw(r10, __ pc());                             \/\/   cbz w10, .\n+    __ cbzw(r10, back);                                \/\/   cbz w10, back\n+    __ cbzw(r10, forth);                               \/\/   cbz w10, forth\n+    __ cbnzw(r8, __ pc());                             \/\/   cbnz    w8, .\n+    __ cbnzw(r8, back);                                \/\/   cbnz    w8, back\n+    __ cbnzw(r8, forth);                               \/\/   cbnz    w8, forth\n+    __ cbz(r10, __ pc());                              \/\/   cbz x10, .\n+    __ cbz(r10, back);                                 \/\/   cbz x10, back\n+    __ cbz(r10, forth);                                \/\/   cbz x10, forth\n+    __ cbnz(r28, __ pc());                             \/\/   cbnz    x28, .\n+    __ cbnz(r28, back);                                \/\/   cbnz    x28, back\n+    __ cbnz(r28, forth);                               \/\/   cbnz    x28, forth\n+    __ adr(r19, __ pc());                              \/\/   adr x19, .\n+    __ adr(r19, back);                                 \/\/   adr x19, back\n+    __ adr(r19, forth);                                \/\/   adr x19, forth\n+    __ _adrp(r19, __ pc());                            \/\/   adrp    x19, .\n@@ -171,6 +171,6 @@\n-    __ tbz(r22, 6, __ pc());                           \/\/       tbz     x22, #6, .\n-    __ tbz(r22, 6, back);                              \/\/       tbz     x22, #6, back\n-    __ tbz(r22, 6, forth);                             \/\/       tbz     x22, #6, forth\n-    __ tbnz(r12, 11, __ pc());                         \/\/       tbnz    x12, #11, .\n-    __ tbnz(r12, 11, back);                            \/\/       tbnz    x12, #11, back\n-    __ tbnz(r12, 11, forth);                           \/\/       tbnz    x12, #11, forth\n+    __ tbz(r21, 6, __ pc());                           \/\/   tbz x21, #6, .\n+    __ tbz(r21, 6, back);                              \/\/   tbz x21, #6, back\n+    __ tbz(r21, 6, forth);                             \/\/   tbz x21, #6, forth\n+    __ tbnz(r12, 11, __ pc());                         \/\/   tbnz    x12, #11, .\n+    __ tbnz(r12, 11, back);                            \/\/   tbnz    x12, #11, back\n+    __ tbnz(r12, 11, forth);                           \/\/   tbnz    x12, #11, forth\n@@ -179,6 +179,6 @@\n-    __ movnw(r0, 6301, 0);                             \/\/       movn    w0, #6301, lsl 0\n-    __ movzw(r7, 20886, 0);                            \/\/       movz    w7, #20886, lsl 0\n-    __ movkw(r27, 18617, 0);                           \/\/       movk    w27, #18617, lsl 0\n-    __ movn(r12, 22998, 16);                           \/\/       movn    x12, #22998, lsl 16\n-    __ movz(r20, 1532, 16);                            \/\/       movz    x20, #1532, lsl 16\n-    __ movk(r8, 5167, 32);                             \/\/       movk    x8, #5167, lsl 32\n+    __ movnw(r0, 6301, 0);                             \/\/   movn    w0, #6301, lsl 0\n+    __ movzw(r6, 20886, 0);                            \/\/   movz    w6, #20886, lsl 0\n+    __ movkw(r26, 18617, 0);                           \/\/   movk    w26, #18617, lsl 0\n+    __ movn(r11, 22998, 16);                           \/\/   movn    x11, #22998, lsl 16\n+    __ movz(r20, 1532, 16);                            \/\/   movz    x20, #1532, lsl 16\n+    __ movk(r7, 5167, 32);                             \/\/   movk    x7, #5167, lsl 32\n@@ -187,6 +187,6 @@\n-    __ sbfm(r15, r17, 24, 28);                         \/\/       sbfm    x15, x17, #24, #28\n-    __ bfmw(r15, r9, 14, 25);                          \/\/       bfm     w15, w9, #14, #25\n-    __ ubfmw(r27, r25, 6, 31);                         \/\/       ubfm    w27, w25, #6, #31\n-    __ sbfm(r19, r2, 23, 31);                          \/\/       sbfm    x19, x2, #23, #31\n-    __ bfm(r12, r21, 10, 6);                           \/\/       bfm     x12, x21, #10, #6\n-    __ ubfm(r22, r0, 26, 16);                          \/\/       ubfm    x22, x0, #26, #16\n+    __ sbfm(r14, r16, 24, 28);                         \/\/   sbfm    x14, x16, #24, #28\n+    __ bfmw(r14, r9, 14, 25);                          \/\/   bfm w14, w9, #14, #25\n+    __ ubfmw(r26, r24, 6, 31);                         \/\/   ubfm    w26, w24, #6, #31\n+    __ sbfm(r19, r2, 23, 31);                          \/\/   sbfm    x19, x2, #23, #31\n+    __ bfm(r11, r20, 10, 6);                           \/\/   bfm x11, x20, #10, #6\n+    __ ubfm(r21, r0, 26, 16);                          \/\/   ubfm    x21, x0, #26, #16\n@@ -195,2 +195,2 @@\n-    __ extrw(r3, r3, r20, 27);                         \/\/       extr    w3, w3, w20, #27\n-    __ extr(r8, r30, r3, 54);                          \/\/       extr    x8, x30, x3, #54\n+    __ extrw(r2, r3, r19, 27);                         \/\/   extr    w2, w3, w19, #27\n+    __ extr(r8, r29, r2, 54);                          \/\/   extr    x8, x29, x2, #54\n@@ -199,54 +199,54 @@\n-    __ br(Assembler::EQ, __ pc());                     \/\/       b.EQ    .\n-    __ br(Assembler::EQ, back);                        \/\/       b.EQ    back\n-    __ br(Assembler::EQ, forth);                       \/\/       b.EQ    forth\n-    __ br(Assembler::NE, __ pc());                     \/\/       b.NE    .\n-    __ br(Assembler::NE, back);                        \/\/       b.NE    back\n-    __ br(Assembler::NE, forth);                       \/\/       b.NE    forth\n-    __ br(Assembler::HS, __ pc());                     \/\/       b.HS    .\n-    __ br(Assembler::HS, back);                        \/\/       b.HS    back\n-    __ br(Assembler::HS, forth);                       \/\/       b.HS    forth\n-    __ br(Assembler::CS, __ pc());                     \/\/       b.CS    .\n-    __ br(Assembler::CS, back);                        \/\/       b.CS    back\n-    __ br(Assembler::CS, forth);                       \/\/       b.CS    forth\n-    __ br(Assembler::LO, __ pc());                     \/\/       b.LO    .\n-    __ br(Assembler::LO, back);                        \/\/       b.LO    back\n-    __ br(Assembler::LO, forth);                       \/\/       b.LO    forth\n-    __ br(Assembler::CC, __ pc());                     \/\/       b.CC    .\n-    __ br(Assembler::CC, back);                        \/\/       b.CC    back\n-    __ br(Assembler::CC, forth);                       \/\/       b.CC    forth\n-    __ br(Assembler::MI, __ pc());                     \/\/       b.MI    .\n-    __ br(Assembler::MI, back);                        \/\/       b.MI    back\n-    __ br(Assembler::MI, forth);                       \/\/       b.MI    forth\n-    __ br(Assembler::PL, __ pc());                     \/\/       b.PL    .\n-    __ br(Assembler::PL, back);                        \/\/       b.PL    back\n-    __ br(Assembler::PL, forth);                       \/\/       b.PL    forth\n-    __ br(Assembler::VS, __ pc());                     \/\/       b.VS    .\n-    __ br(Assembler::VS, back);                        \/\/       b.VS    back\n-    __ br(Assembler::VS, forth);                       \/\/       b.VS    forth\n-    __ br(Assembler::VC, __ pc());                     \/\/       b.VC    .\n-    __ br(Assembler::VC, back);                        \/\/       b.VC    back\n-    __ br(Assembler::VC, forth);                       \/\/       b.VC    forth\n-    __ br(Assembler::HI, __ pc());                     \/\/       b.HI    .\n-    __ br(Assembler::HI, back);                        \/\/       b.HI    back\n-    __ br(Assembler::HI, forth);                       \/\/       b.HI    forth\n-    __ br(Assembler::LS, __ pc());                     \/\/       b.LS    .\n-    __ br(Assembler::LS, back);                        \/\/       b.LS    back\n-    __ br(Assembler::LS, forth);                       \/\/       b.LS    forth\n-    __ br(Assembler::GE, __ pc());                     \/\/       b.GE    .\n-    __ br(Assembler::GE, back);                        \/\/       b.GE    back\n-    __ br(Assembler::GE, forth);                       \/\/       b.GE    forth\n-    __ br(Assembler::LT, __ pc());                     \/\/       b.LT    .\n-    __ br(Assembler::LT, back);                        \/\/       b.LT    back\n-    __ br(Assembler::LT, forth);                       \/\/       b.LT    forth\n-    __ br(Assembler::GT, __ pc());                     \/\/       b.GT    .\n-    __ br(Assembler::GT, back);                        \/\/       b.GT    back\n-    __ br(Assembler::GT, forth);                       \/\/       b.GT    forth\n-    __ br(Assembler::LE, __ pc());                     \/\/       b.LE    .\n-    __ br(Assembler::LE, back);                        \/\/       b.LE    back\n-    __ br(Assembler::LE, forth);                       \/\/       b.LE    forth\n-    __ br(Assembler::AL, __ pc());                     \/\/       b.AL    .\n-    __ br(Assembler::AL, back);                        \/\/       b.AL    back\n-    __ br(Assembler::AL, forth);                       \/\/       b.AL    forth\n-    __ br(Assembler::NV, __ pc());                     \/\/       b.NV    .\n-    __ br(Assembler::NV, back);                        \/\/       b.NV    back\n-    __ br(Assembler::NV, forth);                       \/\/       b.NV    forth\n+    __ br(Assembler::EQ, __ pc());                     \/\/   b.EQ    .\n+    __ br(Assembler::EQ, back);                        \/\/   b.EQ    back\n+    __ br(Assembler::EQ, forth);                       \/\/   b.EQ    forth\n+    __ br(Assembler::NE, __ pc());                     \/\/   b.NE    .\n+    __ br(Assembler::NE, back);                        \/\/   b.NE    back\n+    __ br(Assembler::NE, forth);                       \/\/   b.NE    forth\n+    __ br(Assembler::HS, __ pc());                     \/\/   b.HS    .\n+    __ br(Assembler::HS, back);                        \/\/   b.HS    back\n+    __ br(Assembler::HS, forth);                       \/\/   b.HS    forth\n+    __ br(Assembler::CS, __ pc());                     \/\/   b.CS    .\n+    __ br(Assembler::CS, back);                        \/\/   b.CS    back\n+    __ br(Assembler::CS, forth);                       \/\/   b.CS    forth\n+    __ br(Assembler::LO, __ pc());                     \/\/   b.LO    .\n+    __ br(Assembler::LO, back);                        \/\/   b.LO    back\n+    __ br(Assembler::LO, forth);                       \/\/   b.LO    forth\n+    __ br(Assembler::CC, __ pc());                     \/\/   b.CC    .\n+    __ br(Assembler::CC, back);                        \/\/   b.CC    back\n+    __ br(Assembler::CC, forth);                       \/\/   b.CC    forth\n+    __ br(Assembler::MI, __ pc());                     \/\/   b.MI    .\n+    __ br(Assembler::MI, back);                        \/\/   b.MI    back\n+    __ br(Assembler::MI, forth);                       \/\/   b.MI    forth\n+    __ br(Assembler::PL, __ pc());                     \/\/   b.PL    .\n+    __ br(Assembler::PL, back);                        \/\/   b.PL    back\n+    __ br(Assembler::PL, forth);                       \/\/   b.PL    forth\n+    __ br(Assembler::VS, __ pc());                     \/\/   b.VS    .\n+    __ br(Assembler::VS, back);                        \/\/   b.VS    back\n+    __ br(Assembler::VS, forth);                       \/\/   b.VS    forth\n+    __ br(Assembler::VC, __ pc());                     \/\/   b.VC    .\n+    __ br(Assembler::VC, back);                        \/\/   b.VC    back\n+    __ br(Assembler::VC, forth);                       \/\/   b.VC    forth\n+    __ br(Assembler::HI, __ pc());                     \/\/   b.HI    .\n+    __ br(Assembler::HI, back);                        \/\/   b.HI    back\n+    __ br(Assembler::HI, forth);                       \/\/   b.HI    forth\n+    __ br(Assembler::LS, __ pc());                     \/\/   b.LS    .\n+    __ br(Assembler::LS, back);                        \/\/   b.LS    back\n+    __ br(Assembler::LS, forth);                       \/\/   b.LS    forth\n+    __ br(Assembler::GE, __ pc());                     \/\/   b.GE    .\n+    __ br(Assembler::GE, back);                        \/\/   b.GE    back\n+    __ br(Assembler::GE, forth);                       \/\/   b.GE    forth\n+    __ br(Assembler::LT, __ pc());                     \/\/   b.LT    .\n+    __ br(Assembler::LT, back);                        \/\/   b.LT    back\n+    __ br(Assembler::LT, forth);                       \/\/   b.LT    forth\n+    __ br(Assembler::GT, __ pc());                     \/\/   b.GT    .\n+    __ br(Assembler::GT, back);                        \/\/   b.GT    back\n+    __ br(Assembler::GT, forth);                       \/\/   b.GT    forth\n+    __ br(Assembler::LE, __ pc());                     \/\/   b.LE    .\n+    __ br(Assembler::LE, back);                        \/\/   b.LE    back\n+    __ br(Assembler::LE, forth);                       \/\/   b.LE    forth\n+    __ br(Assembler::AL, __ pc());                     \/\/   b.AL    .\n+    __ br(Assembler::AL, back);                        \/\/   b.AL    back\n+    __ br(Assembler::AL, forth);                       \/\/   b.AL    forth\n+    __ br(Assembler::NV, __ pc());                     \/\/   b.NV    .\n+    __ br(Assembler::NV, back);                        \/\/   b.NV    back\n+    __ br(Assembler::NV, forth);                       \/\/   b.NV    forth\n@@ -255,5 +255,5 @@\n-    __ svc(12999);                                     \/\/       svc     #12999\n-    __ hvc(2665);                                      \/\/       hvc     #2665\n-    __ smc(9002);                                      \/\/       smc     #9002\n-    __ brk(14843);                                     \/\/       brk     #14843\n-    __ hlt(25964);                                     \/\/       hlt     #25964\n+    __ svc(12999);                                     \/\/   svc #12999\n+    __ hvc(2665);                                      \/\/   hvc #2665\n+    __ smc(9002);                                      \/\/   smc #9002\n+    __ brk(14843);                                     \/\/   brk #14843\n+    __ hlt(25964);                                     \/\/   hlt #25964\n@@ -262,4 +262,4 @@\n-    __ nop();                                          \/\/       nop\n-    __ eret();                                         \/\/       eret\n-    __ drps();                                         \/\/       drps\n-    __ isb();                                          \/\/       isb\n+    __ nop();                                          \/\/   nop\n+    __ eret();                                         \/\/   eret\n+    __ drps();                                         \/\/   drps\n+    __ isb();                                          \/\/   isb\n@@ -268,2 +268,2 @@\n-    __ dsb(Assembler::ST);                             \/\/       dsb     ST\n-    __ dmb(Assembler::OSHST);                          \/\/       dmb     OSHST\n+    __ dsb(Assembler::ST);                             \/\/   dsb ST\n+    __ dmb(Assembler::OSHST);                          \/\/   dmb OSHST\n@@ -272,2 +272,2 @@\n-    __ br(r16);                                        \/\/       br      x16\n-    __ blr(r20);                                       \/\/       blr     x20\n+    __ br(r15);                                        \/\/   br  x15\n+    __ blr(r19);                                       \/\/   blr x19\n@@ -276,6 +276,6 @@\n-    __ stxr(r10, r27, r8);                             \/\/       stxr    w10, x27, [x8]\n-    __ stlxr(r0, r1, r21);                             \/\/       stlxr   w0, x1, [x21]\n-    __ ldxr(r17, r29);                                 \/\/       ldxr    x17, [x29]\n-    __ ldaxr(r29, r28);                                \/\/       ldaxr   x29, [x28]\n-    __ stlr(r1, r23);                                  \/\/       stlr    x1, [x23]\n-    __ ldar(r21, r20);                                 \/\/       ldar    x21, [x20]\n+    __ stxr(r10, r26, r8);                             \/\/   stxr    w10, x26, [x8]\n+    __ stlxr(r0, r1, r20);                             \/\/   stlxr   w0, x1, [x20]\n+    __ ldxr(r16, r28);                                 \/\/   ldxr    x16, [x28]\n+    __ ldaxr(r28, r27);                                \/\/   ldaxr   x28, [x27]\n+    __ stlr(r1, r22);                                  \/\/   stlr    x1, [x22]\n+    __ ldar(r21, r20);                                 \/\/   ldar    x21, [x20]\n@@ -284,6 +284,6 @@\n-    __ stxrw(r22, r27, r19);                           \/\/       stxr    w22, w27, [x19]\n-    __ stlxrw(r11, r16, r6);                           \/\/       stlxr   w11, w16, [x6]\n-    __ ldxrw(r18, r0);                                 \/\/       ldxr    w18, [x0]\n-    __ ldaxrw(r4, r10);                                \/\/       ldaxr   w4, [x10]\n-    __ stlrw(r24, r22);                                \/\/       stlr    w24, [x22]\n-    __ ldarw(r10, r19);                                \/\/       ldar    w10, [x19]\n+    __ stxrw(r21, r27, r19);                           \/\/   stxr    w21, w27, [x19]\n+    __ stlxrw(r10, r15, r6);                           \/\/   stlxr   w10, w15, [x6]\n+    __ ldxrw(r17, r0);                                 \/\/   ldxr    w17, [x0]\n+    __ ldaxrw(r4, r9);                                 \/\/   ldaxr   w4, [x9]\n+    __ stlrw(r23, r21);                                \/\/   stlr    w23, [x21]\n+    __ ldarw(r9, r17);                                 \/\/   ldar    w9, [x17]\n@@ -292,6 +292,6 @@\n-    __ stxrh(r1, r5, r30);                             \/\/       stxrh   w1, w5, [x30]\n-    __ stlxrh(r8, r12, r17);                           \/\/       stlxrh  w8, w12, [x17]\n-    __ ldxrh(r9, r14);                                 \/\/       ldxrh   w9, [x14]\n-    __ ldaxrh(r7, r1);                                 \/\/       ldaxrh  w7, [x1]\n-    __ stlrh(r5, r16);                                 \/\/       stlrh   w5, [x16]\n-    __ ldarh(r2, r12);                                 \/\/       ldarh   w2, [x12]\n+    __ stxrh(r1, r4, r29);                             \/\/   stxrh   w1, w4, [x29]\n+    __ stlxrh(r8, r11, r15);                           \/\/   stlxrh  w8, w11, [x15]\n+    __ ldxrh(r8, r13);                                 \/\/   ldxrh   w8, [x13]\n+    __ ldaxrh(r6, r1);                                 \/\/   ldaxrh  w6, [x1]\n+    __ stlrh(r5, r15);                                 \/\/   stlrh   w5, [x15]\n+    __ ldarh(r2, r11);                                 \/\/   ldarh   w2, [x11]\n@@ -300,6 +300,6 @@\n-    __ stxrb(r10, r12, r3);                            \/\/       stxrb   w10, w12, [x3]\n-    __ stlxrb(r28, r14, r26);                          \/\/       stlxrb  w28, w14, [x26]\n-    __ ldxrb(r30, r10);                                \/\/       ldxrb   w30, [x10]\n-    __ ldaxrb(r14, r21);                               \/\/       ldaxrb  w14, [x21]\n-    __ stlrb(r13, r9);                                 \/\/       stlrb   w13, [x9]\n-    __ ldarb(r22, r27);                                \/\/       ldarb   w22, [x27]\n+    __ stxrb(r9, r12, r2);                             \/\/   stxrb   w9, w12, [x2]\n+    __ stlxrb(r27, r13, r25);                          \/\/   stlxrb  w27, w13, [x25]\n+    __ ldxrb(r29, r9);                                 \/\/   ldxrb   w29, [x9]\n+    __ ldaxrb(r13, r21);                               \/\/   ldaxrb  w13, [x21]\n+    __ stlrb(r12, r8);                                 \/\/   stlrb   w12, [x8]\n+    __ ldarb(r22, r26);                                \/\/   ldarb   w22, [x26]\n@@ -308,4 +308,4 @@\n-    __ ldxp(r28, r19, r11);                            \/\/       ldxp    x28, x19, [x11]\n-    __ ldaxp(r30, r19, r2);                            \/\/       ldaxp   x30, x19, [x2]\n-    __ stxp(r2, r23, r1, r0);                          \/\/       stxp    w2, x23, x1, [x0]\n-    __ stlxp(r12, r16, r13, r15);                      \/\/       stlxp   w12, x16, x13, [x15]\n+    __ ldxp(r27, r19, r10);                            \/\/   ldxp    x27, x19, [x10]\n+    __ ldaxp(r29, r19, r1);                            \/\/   ldaxp   x29, x19, [x1]\n+    __ stxp(r2, r22, r1, r0);                          \/\/   stxp    w2, x22, x1, [x0]\n+    __ stlxp(r11, r15, r13, r14);                      \/\/   stlxp   w11, x15, x13, [x14]\n@@ -314,4 +314,4 @@\n-    __ ldxpw(r18, r21, r13);                           \/\/       ldxp    w18, w21, [x13]\n-    __ ldaxpw(r11, r30, r8);                           \/\/       ldaxp   w11, w30, [x8]\n-    __ stxpw(r24, r13, r11, r1);                       \/\/       stxp    w24, w13, w11, [x1]\n-    __ stlxpw(r26, r21, r27, r13);                     \/\/       stlxp   w26, w21, w27, [x13]\n+    __ ldxpw(r16, r20, r12);                           \/\/   ldxp    w16, w20, [x12]\n+    __ ldaxpw(r10, r29, r7);                           \/\/   ldaxp   w10, w29, [x7]\n+    __ stxpw(r23, r12, r10, r1);                       \/\/   stxp    w23, w12, w10, [x1]\n+    __ stlxpw(r26, r21, r27, r13);                     \/\/   stlxp   w26, w21, w27, [x13]\n@@ -321,16 +321,16 @@\n-    __ str(r11, Address(r20, -103));                   \/\/       str     x11, [x20, -103]\n-    __ strw(r28, Address(r16, 62));                    \/\/       str     w28, [x16, 62]\n-    __ strb(r27, Address(r9, -9));                     \/\/       strb    w27, [x9, -9]\n-    __ strh(r2, Address(r25, -50));                    \/\/       strh    w2, [x25, -50]\n-    __ ldr(r4, Address(r2, -241));                     \/\/       ldr     x4, [x2, -241]\n-    __ ldrw(r30, Address(r20, -31));                   \/\/       ldr     w30, [x20, -31]\n-    __ ldrb(r18, Address(r23, -23));                   \/\/       ldrb    w18, [x23, -23]\n-    __ ldrh(r29, Address(r26, -1));                    \/\/       ldrh    w29, [x26, -1]\n-    __ ldrsb(r1, Address(r9, 6));                      \/\/       ldrsb   x1, [x9, 6]\n-    __ ldrsh(r11, Address(r12, 19));                   \/\/       ldrsh   x11, [x12, 19]\n-    __ ldrshw(r11, Address(r1, -50));                  \/\/       ldrsh   w11, [x1, -50]\n-    __ ldrsw(r19, Address(r24, 41));                   \/\/       ldrsw   x19, [x24, 41]\n-    __ ldrd(v24, Address(r24, 95));                    \/\/       ldr     d24, [x24, 95]\n-    __ ldrs(v15, Address(r5, -43));                    \/\/       ldr     s15, [x5, -43]\n-    __ strd(v21, Address(r27, 1));                     \/\/       str     d21, [x27, 1]\n-    __ strs(v23, Address(r13, -107));                  \/\/       str     s23, [x13, -107]\n+    __ str(r10, Address(r20, -103));                   \/\/   str x10, [x20, -103]\n+    __ strw(r27, Address(r15, 62));                    \/\/   str w27, [x15, 62]\n+    __ strb(r27, Address(r9, -9));                     \/\/   strb    w27, [x9, -9]\n+    __ strh(r1, Address(r24, -50));                    \/\/   strh    w1, [x24, -50]\n+    __ ldr(r4, Address(r2, -241));                     \/\/   ldr x4, [x2, -241]\n+    __ ldrw(r29, Address(r20, -31));                   \/\/   ldr w29, [x20, -31]\n+    __ ldrb(r17, Address(r22, -23));                   \/\/   ldrb    w17, [x22, -23]\n+    __ ldrh(r28, Address(r25, -1));                    \/\/   ldrh    w28, [x25, -1]\n+    __ ldrsb(r1, Address(r8, 6));                      \/\/   ldrsb   x1, [x8, 6]\n+    __ ldrsh(r11, Address(r12, 19));                   \/\/   ldrsh   x11, [x12, 19]\n+    __ ldrshw(r11, Address(r1, -50));                  \/\/   ldrsh   w11, [x1, -50]\n+    __ ldrsw(r19, Address(r23, 41));                   \/\/   ldrsw   x19, [x23, 41]\n+    __ ldrd(v23, Address(r23, 95));                    \/\/   ldr d23, [x23, 95]\n+    __ ldrs(v14, Address(r5, -43));                    \/\/   ldr s14, [x5, -43]\n+    __ strd(v21, Address(r27, 1));                     \/\/   str d21, [x27, 1]\n+    __ strs(v23, Address(r12, -107));                  \/\/   str s23, [x12, -107]\n@@ -340,16 +340,16 @@\n-    __ str(r11, Address(__ pre(r0, 8)));               \/\/       str     x11, [x0, 8]!\n-    __ strw(r3, Address(__ pre(r0, 29)));              \/\/       str     w3, [x0, 29]!\n-    __ strb(r11, Address(__ pre(r14, 9)));             \/\/       strb    w11, [x14, 9]!\n-    __ strh(r29, Address(__ pre(r24, -3)));            \/\/       strh    w29, [x24, -3]!\n-    __ ldr(r13, Address(__ pre(r17, -144)));           \/\/       ldr     x13, [x17, -144]!\n-    __ ldrw(r12, Address(__ pre(r22, -6)));            \/\/       ldr     w12, [x22, -6]!\n-    __ ldrb(r13, Address(__ pre(r12, -10)));           \/\/       ldrb    w13, [x12, -10]!\n-    __ ldrh(r0, Address(__ pre(r21, -21)));            \/\/       ldrh    w0, [x21, -21]!\n-    __ ldrsb(r23, Address(__ pre(r7, 4)));             \/\/       ldrsb   x23, [x7, 4]!\n-    __ ldrsh(r3, Address(__ pre(r7, -53)));            \/\/       ldrsh   x3, [x7, -53]!\n-    __ ldrshw(r28, Address(__ pre(r5, -7)));           \/\/       ldrsh   w28, [x5, -7]!\n-    __ ldrsw(r24, Address(__ pre(r9, -18)));           \/\/       ldrsw   x24, [x9, -18]!\n-    __ ldrd(v14, Address(__ pre(r11, 12)));            \/\/       ldr     d14, [x11, 12]!\n-    __ ldrs(v19, Address(__ pre(r12, -67)));           \/\/       ldr     s19, [x12, -67]!\n-    __ strd(v20, Address(__ pre(r0, -253)));           \/\/       str     d20, [x0, -253]!\n-    __ strs(v8, Address(__ pre(r0, 64)));              \/\/       str     s8, [x0, 64]!\n+    __ str(r11, Address(__ pre(r0, 8)));               \/\/   str x11, [x0, 8]!\n+    __ strw(r3, Address(__ pre(r0, 29)));              \/\/   str w3, [x0, 29]!\n+    __ strb(r11, Address(__ pre(r14, 9)));             \/\/   strb    w11, [x14, 9]!\n+    __ strh(r29, Address(__ pre(r24, -3)));            \/\/   strh    w29, [x24, -3]!\n+    __ ldr(r13, Address(__ pre(r17, -144)));           \/\/   ldr x13, [x17, -144]!\n+    __ ldrw(r12, Address(__ pre(r22, -6)));            \/\/   ldr w12, [x22, -6]!\n+    __ ldrb(r13, Address(__ pre(r12, -10)));           \/\/   ldrb    w13, [x12, -10]!\n+    __ ldrh(r0, Address(__ pre(r21, -21)));            \/\/   ldrh    w0, [x21, -21]!\n+    __ ldrsb(r23, Address(__ pre(r7, 4)));             \/\/   ldrsb   x23, [x7, 4]!\n+    __ ldrsh(r3, Address(__ pre(r7, -53)));            \/\/   ldrsh   x3, [x7, -53]!\n+    __ ldrshw(r28, Address(__ pre(r5, -7)));           \/\/   ldrsh   w28, [x5, -7]!\n+    __ ldrsw(r24, Address(__ pre(r9, -18)));           \/\/   ldrsw   x24, [x9, -18]!\n+    __ ldrd(v13, Address(__ pre(r10, 12)));            \/\/   ldr d13, [x10, 12]!\n+    __ ldrs(v19, Address(__ pre(r12, -67)));           \/\/   ldr s19, [x12, -67]!\n+    __ strd(v20, Address(__ pre(r0, -253)));           \/\/   str d20, [x0, -253]!\n+    __ strs(v8, Address(__ pre(r0, 64)));              \/\/   str s8, [x0, 64]!\n@@ -359,16 +359,16 @@\n-    __ str(r4, Address(__ post(r28, -94)));            \/\/       str     x4, [x28], -94\n-    __ strw(r12, Address(__ post(r7, -54)));           \/\/       str     w12, [x7], -54\n-    __ strb(r27, Address(__ post(r10, -24)));          \/\/       strb    w27, [x10], -24\n-    __ strh(r6, Address(__ post(r8, 27)));             \/\/       strh    w6, [x8], 27\n-    __ ldr(r14, Address(__ post(r10, -202)));          \/\/       ldr     x14, [x10], -202\n-    __ ldrw(r16, Address(__ post(r5, -41)));           \/\/       ldr     w16, [x5], -41\n-    __ ldrb(r2, Address(__ post(r14, 9)));             \/\/       ldrb    w2, [x14], 9\n-    __ ldrh(r28, Address(__ post(r13, -20)));          \/\/       ldrh    w28, [x13], -20\n-    __ ldrsb(r9, Address(__ post(r13, -31)));          \/\/       ldrsb   x9, [x13], -31\n-    __ ldrsh(r3, Address(__ post(r24, -36)));          \/\/       ldrsh   x3, [x24], -36\n-    __ ldrshw(r20, Address(__ post(r3, 6)));           \/\/       ldrsh   w20, [x3], 6\n-    __ ldrsw(r7, Address(__ post(r19, -1)));           \/\/       ldrsw   x7, [x19], -1\n-    __ ldrd(v30, Address(__ post(r8, -130)));          \/\/       ldr     d30, [x8], -130\n-    __ ldrs(v25, Address(__ post(r15, 21)));           \/\/       ldr     s25, [x15], 21\n-    __ strd(v14, Address(__ post(r23, 90)));           \/\/       str     d14, [x23], 90\n-    __ strs(v8, Address(__ post(r0, -33)));            \/\/       str     s8, [x0], -33\n+    __ str(r4, Address(__ post(r28, -94)));            \/\/   str x4, [x28], -94\n+    __ strw(r12, Address(__ post(r7, -54)));           \/\/   str w12, [x7], -54\n+    __ strb(r27, Address(__ post(r10, -24)));          \/\/   strb    w27, [x10], -24\n+    __ strh(r6, Address(__ post(r8, 27)));             \/\/   strh    w6, [x8], 27\n+    __ ldr(r14, Address(__ post(r10, -202)));          \/\/   ldr x14, [x10], -202\n+    __ ldrw(r16, Address(__ post(r5, -41)));           \/\/   ldr w16, [x5], -41\n+    __ ldrb(r2, Address(__ post(r14, 9)));             \/\/   ldrb    w2, [x14], 9\n+    __ ldrh(r28, Address(__ post(r13, -20)));          \/\/   ldrh    w28, [x13], -20\n+    __ ldrsb(r9, Address(__ post(r13, -31)));          \/\/   ldrsb   x9, [x13], -31\n+    __ ldrsh(r3, Address(__ post(r24, -36)));          \/\/   ldrsh   x3, [x24], -36\n+    __ ldrshw(r20, Address(__ post(r3, 6)));           \/\/   ldrsh   w20, [x3], 6\n+    __ ldrsw(r7, Address(__ post(r19, -1)));           \/\/   ldrsw   x7, [x19], -1\n+    __ ldrd(v29, Address(__ post(r8, -130)));          \/\/   ldr d29, [x8], -130\n+    __ ldrs(v24, Address(__ post(r14, 21)));           \/\/   ldr s24, [x14], 21\n+    __ strd(v13, Address(__ post(r23, 90)));           \/\/   str d13, [x23], 90\n+    __ strs(v7, Address(__ post(r0, -33)));            \/\/   str s7, [x0], -33\n@@ -378,16 +378,16 @@\n-    __ str(r10, Address(r18, r21, Address::sxtw(3)));  \/\/       str     x10, [x18, w21, sxtw #3]\n-    __ strw(r4, Address(r13, r22, Address::sxtw(2)));  \/\/       str     w4, [x13, w22, sxtw #2]\n-    __ strb(r13, Address(r0, r19, Address::uxtw(0)));  \/\/       strb    w13, [x0, w19, uxtw #0]\n-    __ strh(r12, Address(r27, r6, Address::sxtw(0)));  \/\/       strh    w12, [x27, w6, sxtw #0]\n-    __ ldr(r0, Address(r8, r16, Address::lsl(0)));     \/\/       ldr     x0, [x8, x16, lsl #0]\n-    __ ldrw(r0, Address(r4, r26, Address::sxtx(0)));   \/\/       ldr     w0, [x4, x26, sxtx #0]\n-    __ ldrb(r14, Address(r25, r5, Address::sxtw(0)));  \/\/       ldrb    w14, [x25, w5, sxtw #0]\n-    __ ldrh(r9, Address(r4, r18, Address::uxtw(0)));   \/\/       ldrh    w9, [x4, w18, uxtw #0]\n-    __ ldrsb(r27, Address(r4, r7, Address::lsl(0)));   \/\/       ldrsb   x27, [x4, x7, lsl #0]\n-    __ ldrsh(r15, Address(r17, r30, Address::sxtw(0))); \/\/      ldrsh   x15, [x17, w30, sxtw #0]\n-    __ ldrshw(r16, Address(r0, r22, Address::sxtw(0))); \/\/      ldrsh   w16, [x0, w22, sxtw #0]\n-    __ ldrsw(r22, Address(r10, r30, Address::sxtx(2))); \/\/      ldrsw   x22, [x10, x30, sxtx #2]\n-    __ ldrd(v29, Address(r21, r10, Address::sxtx(3))); \/\/       ldr     d29, [x21, x10, sxtx #3]\n-    __ ldrs(v3, Address(r11, r19, Address::uxtw(0)));  \/\/       ldr     s3, [x11, w19, uxtw #0]\n-    __ strd(v13, Address(r28, r29, Address::uxtw(3))); \/\/       str     d13, [x28, w29, uxtw #3]\n-    __ strs(v23, Address(r29, r5, Address::sxtx(2)));  \/\/       str     s23, [x29, x5, sxtx #2]\n+    __ str(r9, Address(r17, r21, Address::sxtw(3)));   \/\/   str x9, [x17, w21, sxtw #3]\n+    __ strw(r4, Address(r12, r22, Address::sxtw(2)));  \/\/   str w4, [x12, w22, sxtw #2]\n+    __ strb(r12, Address(r0, r19, Address::uxtw(0)));  \/\/   strb    w12, [x0, w19, uxtw #0]\n+    __ strh(r11, Address(r26, r6, Address::sxtw(0)));  \/\/   strh    w11, [x26, w6, sxtw #0]\n+    __ ldr(r0, Address(r7, r15, Address::lsl(0)));     \/\/   ldr x0, [x7, x15, lsl #0]\n+    __ ldrw(r0, Address(r4, r26, Address::sxtx(0)));   \/\/   ldr w0, [x4, x26, sxtx #0]\n+    __ ldrb(r13, Address(r24, r4, Address::sxtw(0)));  \/\/   ldrb    w13, [x24, w4, sxtw #0]\n+    __ ldrh(r8, Address(r4, r17, Address::uxtw(0)));   \/\/   ldrh    w8, [x4, w17, uxtw #0]\n+    __ ldrsb(r27, Address(r4, r6, Address::lsl(0)));   \/\/   ldrsb   x27, [x4, x6, lsl #0]\n+    __ ldrsh(r14, Address(r15, r29, Address::sxtw(0))); \/\/  ldrsh   x14, [x15, w29, sxtw #0]\n+    __ ldrshw(r15, Address(r0, r22, Address::sxtw(0))); \/\/  ldrsh   w15, [x0, w22, sxtw #0]\n+    __ ldrsw(r21, Address(r9, r29, Address::sxtx(2))); \/\/   ldrsw   x21, [x9, x29, sxtx #2]\n+    __ ldrd(v28, Address(r20, r10, Address::sxtx(3))); \/\/   ldr d28, [x20, x10, sxtx #3]\n+    __ ldrs(v3, Address(r10, r19, Address::uxtw(0)));  \/\/   ldr s3, [x10, w19, uxtw #0]\n+    __ strd(v12, Address(r27, r28, Address::uxtw(3))); \/\/   str d12, [x27, w28, uxtw #3]\n+    __ strs(v22, Address(r28, r5, Address::sxtx(2)));  \/\/   str s22, [x28, x5, sxtx #2]\n@@ -397,16 +397,16 @@\n-    __ str(r5, Address(r8, 12600));                    \/\/       str     x5, [x8, 12600]\n-    __ strw(r29, Address(r24, 7880));                  \/\/       str     w29, [x24, 7880]\n-    __ strb(r19, Address(r17, 1566));                  \/\/       strb    w19, [x17, 1566]\n-    __ strh(r13, Address(r19, 3984));                  \/\/       strh    w13, [x19, 3984]\n-    __ ldr(r19, Address(r23, 13632));                  \/\/       ldr     x19, [x23, 13632]\n-    __ ldrw(r23, Address(r29, 6264));                  \/\/       ldr     w23, [x29, 6264]\n-    __ ldrb(r22, Address(r11, 2012));                  \/\/       ldrb    w22, [x11, 2012]\n-    __ ldrh(r3, Address(r10, 3784));                   \/\/       ldrh    w3, [x10, 3784]\n-    __ ldrsb(r8, Address(r16, 1951));                  \/\/       ldrsb   x8, [x16, 1951]\n-    __ ldrsh(r23, Address(r20, 3346));                 \/\/       ldrsh   x23, [x20, 3346]\n-    __ ldrshw(r2, Address(r1, 3994));                  \/\/       ldrsh   w2, [x1, 3994]\n-    __ ldrsw(r4, Address(r17, 7204));                  \/\/       ldrsw   x4, [x17, 7204]\n-    __ ldrd(v20, Address(r27, 14400));                 \/\/       ldr     d20, [x27, 14400]\n-    __ ldrs(v25, Address(r14, 8096));                  \/\/       ldr     s25, [x14, 8096]\n-    __ strd(v26, Address(r10, 15024));                 \/\/       str     d26, [x10, 15024]\n-    __ strs(v9, Address(r3, 6936));                    \/\/       str     s9, [x3, 6936]\n+    __ str(r5, Address(r7, 12600));                    \/\/   str x5, [x7, 12600]\n+    __ strw(r28, Address(r23, 7880));                  \/\/   str w28, [x23, 7880]\n+    __ strb(r19, Address(r16, 1566));                  \/\/   strb    w19, [x16, 1566]\n+    __ strh(r12, Address(r19, 3984));                  \/\/   strh    w12, [x19, 3984]\n+    __ ldr(r19, Address(r22, 13632));                  \/\/   ldr x19, [x22, 13632]\n+    __ ldrw(r23, Address(r28, 6264));                  \/\/   ldr w23, [x28, 6264]\n+    __ ldrb(r21, Address(r11, 2012));                  \/\/   ldrb    w21, [x11, 2012]\n+    __ ldrh(r3, Address(r9, 3784));                    \/\/   ldrh    w3, [x9, 3784]\n+    __ ldrsb(r7, Address(r15, 1951));                  \/\/   ldrsb   x7, [x15, 1951]\n+    __ ldrsh(r23, Address(r20, 3346));                 \/\/   ldrsh   x23, [x20, 3346]\n+    __ ldrshw(r2, Address(r1, 3994));                  \/\/   ldrsh   w2, [x1, 3994]\n+    __ ldrsw(r4, Address(r16, 7204));                  \/\/   ldrsw   x4, [x16, 7204]\n+    __ ldrd(v19, Address(r27, 14400));                 \/\/   ldr d19, [x27, 14400]\n+    __ ldrs(v24, Address(r13, 8096));                  \/\/   ldr s24, [x13, 8096]\n+    __ strd(v25, Address(r9, 15024));                  \/\/   str d25, [x9, 15024]\n+    __ strs(v9, Address(r3, 6936));                    \/\/   str s9, [x3, 6936]\n@@ -416,2 +416,2 @@\n-    __ ldr(r27, forth);                                \/\/       ldr     x27, forth\n-    __ ldrw(r11, __ pc());                             \/\/       ldr     w11, .\n+    __ ldr(r27, forth);                                \/\/   ldr x27, forth\n+    __ ldrw(r10, __ pc());                             \/\/   ldr w10, .\n@@ -420,1 +420,1 @@\n-    __ prfm(Address(r3, -187));                        \/\/       prfm    PLDL1KEEP, [x3, -187]\n+    __ prfm(Address(r3, -187));                        \/\/   prfm    PLDL1KEEP, [x3, -187]\n@@ -423,1 +423,1 @@\n-    __ prfm(__ pc());                                  \/\/       prfm    PLDL1KEEP, .\n+    __ prfm(__ pc());                                  \/\/   prfm    PLDL1KEEP, .\n@@ -426,1 +426,1 @@\n-    __ prfm(Address(r29, r14, Address::lsl(0)));       \/\/       prfm    PLDL1KEEP, [x29, x14, lsl #0]\n+    __ prfm(Address(r28, r13, Address::lsl(0)));       \/\/   prfm    PLDL1KEEP, [x28, x13, lsl #0]\n@@ -429,1 +429,1 @@\n-    __ prfm(Address(r4, 13312));                       \/\/       prfm    PLDL1KEEP, [x4, 13312]\n+    __ prfm(Address(r4, 13312));                       \/\/   prfm    PLDL1KEEP, [x4, 13312]\n@@ -432,8 +432,8 @@\n-    __ adcw(r21, r1, r7);                              \/\/       adc     w21, w1, w7\n-    __ adcsw(r8, r5, r7);                              \/\/       adcs    w8, w5, w7\n-    __ sbcw(r7, r27, r14);                             \/\/       sbc     w7, w27, w14\n-    __ sbcsw(r27, r4, r17);                            \/\/       sbcs    w27, w4, w17\n-    __ adc(r0, r28, r0);                               \/\/       adc     x0, x28, x0\n-    __ adcs(r12, r24, r30);                            \/\/       adcs    x12, x24, x30\n-    __ sbc(r0, r25, r15);                              \/\/       sbc     x0, x25, x15\n-    __ sbcs(r1, r24, r3);                              \/\/       sbcs    x1, x24, x3\n+    __ adcw(r20, r1, r6);                              \/\/   adc w20, w1, w6\n+    __ adcsw(r8, r4, r6);                              \/\/   adcs    w8, w4, w6\n+    __ sbcw(r6, r26, r13);                             \/\/   sbc w6, w26, w13\n+    __ sbcsw(r26, r4, r16);                            \/\/   sbcs    w26, w4, w16\n+    __ adc(r0, r27, r0);                               \/\/   adc x0, x27, x0\n+    __ adcs(r11, r24, r29);                            \/\/   adcs    x11, x24, x29\n+    __ sbc(r0, r24, r14);                              \/\/   sbc x0, x24, x14\n+    __ sbcs(r1, r23, r3);                              \/\/   sbcs    x1, x23, x3\n@@ -442,8 +442,8 @@\n-    __ addw(r18, r24, r20, ext::uxtb, 2);              \/\/       add     w18, w24, w20, uxtb #2\n-    __ addsw(r13, r28, r10, ext::uxth, 1);             \/\/       adds    w13, w28, w10, uxth #1\n-    __ sub(r15, r16, r2, ext::sxth, 2);                \/\/       sub     x15, x16, x2, sxth #2\n-    __ subsw(r29, r13, r13, ext::uxth, 2);             \/\/       subs    w29, w13, w13, uxth #2\n-    __ add(r12, r20, r12, ext::sxtw, 3);               \/\/       add     x12, x20, x12, sxtw #3\n-    __ adds(r30, r27, r11, ext::sxtb, 1);              \/\/       adds    x30, x27, x11, sxtb #1\n-    __ sub(r14, r7, r1, ext::sxtw, 2);                 \/\/       sub     x14, x7, x1, sxtw #2\n-    __ subs(r29, r3, r27, ext::sxth, 1);               \/\/       subs    x29, x3, x27, sxth #1\n+    __ addw(r17, r23, r20, ext::uxtb, 2);              \/\/   add w17, w23, w20, uxtb #2\n+    __ addsw(r12, r27, r9, ext::uxth, 1);              \/\/   adds    w12, w27, w9, uxth #1\n+    __ sub(r14, r15, r2, ext::sxth, 2);                \/\/   sub x14, x15, x2, sxth #2\n+    __ subsw(r29, r12, r12, ext::uxth, 2);             \/\/   subs    w29, w12, w12, uxth #2\n+    __ add(r11, r19, r11, ext::sxtw, 3);               \/\/   add x11, x19, x11, sxtw #3\n+    __ adds(r29, r26, r10, ext::sxtb, 1);              \/\/   adds    x29, x26, x10, sxtb #1\n+    __ sub(r13, r6, r1, ext::sxtw, 2);                 \/\/   sub x13, x6, x1, sxtw #2\n+    __ subs(r28, r3, r26, ext::sxth, 1);               \/\/   subs    x28, x3, x26, sxth #1\n@@ -452,4 +452,4 @@\n-    __ ccmnw(r0, r13, 14u, Assembler::MI);             \/\/       ccmn    w0, w13, #14, MI\n-    __ ccmpw(r22, r18, 6u, Assembler::CC);             \/\/       ccmp    w22, w18, #6, CC\n-    __ ccmn(r18, r30, 14u, Assembler::VS);             \/\/       ccmn    x18, x30, #14, VS\n-    __ ccmp(r10, r19, 12u, Assembler::HI);             \/\/       ccmp    x10, x19, #12, HI\n+    __ ccmnw(r0, r12, 14u, Assembler::MI);             \/\/   ccmn    w0, w12, #14, MI\n+    __ ccmpw(r21, r17, 6u, Assembler::CC);             \/\/   ccmp    w21, w17, #6, CC\n+    __ ccmn(r17, r29, 14u, Assembler::VS);             \/\/   ccmn    x17, x29, #14, VS\n+    __ ccmp(r10, r19, 12u, Assembler::HI);             \/\/   ccmp    x10, x19, #12, HI\n@@ -458,4 +458,4 @@\n-    __ ccmnw(r6, 18, 2, Assembler::LE);                \/\/       ccmn    w6, #18, #2, LE\n-    __ ccmpw(r9, 13, 4, Assembler::HI);                \/\/       ccmp    w9, #13, #4, HI\n-    __ ccmn(r21, 11, 11, Assembler::LO);               \/\/       ccmn    x21, #11, #11, LO\n-    __ ccmp(r4, 13, 2, Assembler::VC);                 \/\/       ccmp    x4, #13, #2, VC\n+    __ ccmnw(r5, 18, 2, Assembler::LE);                \/\/   ccmn    w5, #18, #2, LE\n+    __ ccmpw(r8, 13, 4, Assembler::HI);                \/\/   ccmp    w8, #13, #4, HI\n+    __ ccmn(r20, 11, 11, Assembler::LO);               \/\/   ccmn    x20, #11, #11, LO\n+    __ ccmp(r3, 13, 2, Assembler::VC);                 \/\/   ccmp    x3, #13, #2, VC\n@@ -464,8 +464,8 @@\n-    __ cselw(r12, r2, r22, Assembler::HI);             \/\/       csel    w12, w2, w22, HI\n-    __ csincw(r24, r16, r17, Assembler::HS);           \/\/       csinc   w24, w16, w17, HS\n-    __ csinvw(r6, r7, r16, Assembler::LT);             \/\/       csinv   w6, w7, w16, LT\n-    __ csnegw(r11, r27, r22, Assembler::LS);           \/\/       csneg   w11, w27, w22, LS\n-    __ csel(r10, r3, r29, Assembler::LT);              \/\/       csel    x10, x3, x29, LT\n-    __ csinc(r12, r26, r27, Assembler::CC);            \/\/       csinc   x12, x26, x27, CC\n-    __ csinv(r15, r10, r21, Assembler::GT);            \/\/       csinv   x15, x10, x21, GT\n-    __ csneg(r30, r23, r9, Assembler::GT);             \/\/       csneg   x30, x23, x9, GT\n+    __ cselw(r11, r2, r21, Assembler::HI);             \/\/   csel    w11, w2, w21, HI\n+    __ csincw(r23, r15, r16, Assembler::HS);           \/\/   csinc   w23, w15, w16, HS\n+    __ csinvw(r6, r6, r15, Assembler::LT);             \/\/   csinv   w6, w6, w15, LT\n+    __ csnegw(r10, r26, r22, Assembler::LS);           \/\/   csneg   w10, w26, w22, LS\n+    __ csel(r9, r3, r28, Assembler::LT);               \/\/   csel    x9, x3, x28, LT\n+    __ csinc(r11, r26, r27, Assembler::CC);            \/\/   csinc   x11, x26, x27, CC\n+    __ csinv(r14, r9, r21, Assembler::GT);             \/\/   csinv   x14, x9, x21, GT\n+    __ csneg(r29, r22, r8, Assembler::GT);             \/\/   csneg   x29, x22, x8, GT\n@@ -474,11 +474,11 @@\n-    __ rbitw(r30, r10);                                \/\/       rbit    w30, w10\n-    __ rev16w(r29, r15);                               \/\/       rev16   w29, w15\n-    __ revw(r29, r30);                                 \/\/       rev     w29, w30\n-    __ clzw(r25, r21);                                 \/\/       clz     w25, w21\n-    __ clsw(r4, r0);                                   \/\/       cls     w4, w0\n-    __ rbit(r18, r21);                                 \/\/       rbit    x18, x21\n-    __ rev16(r29, r16);                                \/\/       rev16   x29, x16\n-    __ rev32(r21, r20);                                \/\/       rev32   x21, x20\n-    __ rev(r6, r19);                                   \/\/       rev     x6, x19\n-    __ clz(r30, r3);                                   \/\/       clz     x30, x3\n-    __ cls(r21, r19);                                  \/\/       cls     x21, x19\n+    __ rbitw(r29, r10);                                \/\/   rbit    w29, w10\n+    __ rev16w(r28, r14);                               \/\/   rev16   w28, w14\n+    __ revw(r28, r29);                                 \/\/   rev w28, w29\n+    __ clzw(r24, r20);                                 \/\/   clz w24, w20\n+    __ clsw(r4, r0);                                   \/\/   cls w4, w0\n+    __ rbit(r17, r21);                                 \/\/   rbit    x17, x21\n+    __ rev16(r28, r14);                                \/\/   rev16   x28, x14\n+    __ rev32(r21, r19);                                \/\/   rev32   x21, x19\n+    __ rev(r5, r19);                                   \/\/   rev x5, x19\n+    __ clz(r29, r3);                                   \/\/   clz x29, x3\n+    __ cls(r20, r17);                                  \/\/   cls x20, x17\n@@ -487,14 +487,14 @@\n-    __ udivw(r11, r24, r0);                            \/\/       udiv    w11, w24, w0\n-    __ sdivw(r27, r25, r14);                           \/\/       sdiv    w27, w25, w14\n-    __ lslvw(r3, r14, r18);                            \/\/       lslv    w3, w14, w18\n-    __ lsrvw(r7, r15, r24);                            \/\/       lsrv    w7, w15, w24\n-    __ asrvw(r28, r17, r25);                           \/\/       asrv    w28, w17, w25\n-    __ rorvw(r2, r26, r28);                            \/\/       rorv    w2, w26, w28\n-    __ udiv(r5, r25, r26);                             \/\/       udiv    x5, x25, x26\n-    __ sdiv(r27, r16, r18);                            \/\/       sdiv    x27, x16, x18\n-    __ lslv(r6, r21, r12);                             \/\/       lslv    x6, x21, x12\n-    __ lsrv(r0, r4, r12);                              \/\/       lsrv    x0, x4, x12\n-    __ asrv(r27, r17, r28);                            \/\/       asrv    x27, x17, x28\n-    __ rorv(r28, r2, r18);                             \/\/       rorv    x28, x2, x18\n-    __ umulh(r10, r15, r14);                           \/\/       umulh   x10, x15, x14\n-    __ smulh(r14, r3, r25);                            \/\/       smulh   x14, x3, x25\n+    __ udivw(r10, r24, r0);                            \/\/   udiv    w10, w24, w0\n+    __ sdivw(r26, r24, r13);                           \/\/   sdiv    w26, w24, w13\n+    __ lslvw(r3, r13, r16);                            \/\/   lslv    w3, w13, w16\n+    __ lsrvw(r7, r14, r23);                            \/\/   lsrv    w7, w14, w23\n+    __ asrvw(r27, r16, r24);                           \/\/   asrv    w27, w16, w24\n+    __ rorvw(r2, r25, r27);                            \/\/   rorv    w2, w25, w27\n+    __ udiv(r4, r24, r25);                             \/\/   udiv    x4, x24, x25\n+    __ sdiv(r26, r14, r17);                            \/\/   sdiv    x26, x14, x17\n+    __ lslv(r6, r21, r11);                             \/\/   lslv    x6, x21, x11\n+    __ lsrv(r0, r3, r11);                              \/\/   lsrv    x0, x3, x11\n+    __ asrv(r26, r16, r27);                            \/\/   asrv    x26, x16, x27\n+    __ rorv(r27, r2, r17);                             \/\/   rorv    x27, x2, x17\n+    __ umulh(r9, r14, r13);                            \/\/   umulh   x9, x14, x13\n+    __ smulh(r13, r2, r25);                            \/\/   smulh   x13, x2, x25\n@@ -503,8 +503,8 @@\n-    __ maddw(r15, r19, r14, r5);                       \/\/       madd    w15, w19, w14, w5\n-    __ msubw(r16, r4, r26, r25);                       \/\/       msub    w16, w4, w26, w25\n-    __ madd(r4, r2, r2, r12);                          \/\/       madd    x4, x2, x2, x12\n-    __ msub(r29, r17, r8, r7);                         \/\/       msub    x29, x17, x8, x7\n-    __ smaddl(r3, r4, r25, r4);                        \/\/       smaddl  x3, w4, w25, x4\n-    __ smsubl(r26, r25, r4, r17);                      \/\/       smsubl  x26, w25, w4, x17\n-    __ umaddl(r0, r26, r17, r23);                      \/\/       umaddl  x0, w26, w17, x23\n-    __ umsubl(r15, r21, r28, r17);                     \/\/       umsubl  x15, w21, w28, x17\n+    __ maddw(r14, r19, r13, r5);                       \/\/   madd    w14, w19, w13, w5\n+    __ msubw(r15, r4, r25, r25);                       \/\/   msub    w15, w4, w25, w25\n+    __ madd(r4, r1, r1, r11);                          \/\/   madd    x4, x1, x1, x11\n+    __ msub(r28, r16, r7, r6);                         \/\/   msub    x28, x16, x7, x6\n+    __ smaddl(r3, r4, r24, r4);                        \/\/   smaddl  x3, w4, w24, x4\n+    __ smsubl(r26, r24, r3, r16);                      \/\/   smsubl  x26, w24, w3, x16\n+    __ umaddl(r0, r25, r16, r22);                      \/\/   umaddl  x0, w25, w16, x22\n+    __ umsubl(r14, r21, r28, r16);                     \/\/   umsubl  x14, w21, w28, x16\n@@ -513,10 +513,10 @@\n-    __ fmuls(v27, v10, v3);                            \/\/       fmul    s27, s10, s3\n-    __ fdivs(v0, v7, v25);                             \/\/       fdiv    s0, s7, s25\n-    __ fadds(v9, v6, v15);                             \/\/       fadd    s9, s6, s15\n-    __ fsubs(v29, v15, v10);                           \/\/       fsub    s29, s15, s10\n-    __ fmuls(v2, v17, v7);                             \/\/       fmul    s2, s17, s7\n-    __ fmuld(v11, v11, v23);                           \/\/       fmul    d11, d11, d23\n-    __ fdivd(v7, v29, v23);                            \/\/       fdiv    d7, d29, d23\n-    __ faddd(v14, v27, v11);                           \/\/       fadd    d14, d27, d11\n-    __ fsubd(v11, v4, v24);                            \/\/       fsub    d11, d4, d24\n-    __ fmuld(v12, v15, v14);                           \/\/       fmul    d12, d15, d14\n+    __ fmuls(v26, v9, v2);                             \/\/   fmul    s26, s9, s2\n+    __ fdivs(v0, v6, v25);                             \/\/   fdiv    s0, s6, s25\n+    __ fadds(v9, v6, v14);                             \/\/   fadd    s9, s6, s14\n+    __ fsubs(v28, v14, v9);                            \/\/   fsub    s28, s14, s9\n+    __ fmuls(v2, v16, v6);                             \/\/   fmul    s2, s16, s6\n+    __ fmuld(v10, v11, v22);                           \/\/   fmul    d10, d11, d22\n+    __ fdivd(v6, v28, v22);                            \/\/   fdiv    d6, d28, d22\n+    __ faddd(v13, v26, v10);                           \/\/   fadd    d13, d26, d10\n+    __ fsubd(v11, v3, v23);                            \/\/   fsub    d11, d3, d23\n+    __ fmuld(v11, v14, v13);                           \/\/   fmul    d11, d14, d13\n@@ -525,8 +525,8 @@\n-    __ fmadds(v20, v11, v28, v13);                     \/\/       fmadd   s20, s11, s28, s13\n-    __ fmsubs(v11, v12, v23, v30);                     \/\/       fmsub   s11, s12, s23, s30\n-    __ fnmadds(v26, v14, v9, v13);                     \/\/       fnmadd  s26, s14, s9, s13\n-    __ fnmadds(v10, v7, v5, v29);                      \/\/       fnmadd  s10, s7, s5, s29\n-    __ fmaddd(v15, v3, v11, v12);                      \/\/       fmadd   d15, d3, d11, d12\n-    __ fmsubd(v15, v30, v30, v17);                     \/\/       fmsub   d15, d30, d30, d17\n-    __ fnmaddd(v19, v20, v15, v15);                    \/\/       fnmadd  d19, d20, d15, d15\n-    __ fnmaddd(v9, v21, v2, v9);                       \/\/       fnmadd  d9, d21, d2, d9\n+    __ fmadds(v20, v10, v27, v12);                     \/\/   fmadd   s20, s10, s27, s12\n+    __ fmsubs(v10, v11, v23, v29);                     \/\/   fmsub   s10, s11, s23, s29\n+    __ fnmadds(v26, v13, v8, v12);                     \/\/   fnmadd  s26, s13, s8, s12\n+    __ fnmadds(v9, v7, v5, v28);                       \/\/   fnmadd  s9, s7, s5, s28\n+    __ fmaddd(v14, v3, v11, v11);                      \/\/   fmadd   d14, d3, d11, d11\n+    __ fmsubd(v14, v29, v29, v16);                     \/\/   fmsub   d14, d29, d29, d16\n+    __ fnmaddd(v17, v20, v14, v14);                    \/\/   fnmadd  d17, d20, d14, d14\n+    __ fnmaddd(v9, v20, v2, v9);                       \/\/   fnmadd  d9, d20, d2, d9\n@@ -535,10 +535,10 @@\n-    __ fmovs(v27, v7);                                 \/\/       fmov    s27, s7\n-    __ fabss(v29, v30);                                \/\/       fabs    s29, s30\n-    __ fnegs(v17, v1);                                 \/\/       fneg    s17, s1\n-    __ fsqrts(v2, v6);                                 \/\/       fsqrt   s2, s6\n-    __ fcvts(v10, v3);                                 \/\/       fcvt    d10, s3\n-    __ fmovd(v24, v11);                                \/\/       fmov    d24, d11\n-    __ fabsd(v7, v1);                                  \/\/       fabs    d7, d1\n-    __ fnegd(v11, v0);                                 \/\/       fneg    d11, d0\n-    __ fsqrtd(v3, v18);                                \/\/       fsqrt   d3, d18\n-    __ fcvtd(v28, v6);                                 \/\/       fcvt    s28, d6\n+    __ fmovs(v26, v6);                                 \/\/   fmov    s26, s6\n+    __ fabss(v29, v29);                                \/\/   fabs    s29, s29\n+    __ fnegs(v16, v1);                                 \/\/   fneg    s16, s1\n+    __ fsqrts(v2, v5);                                 \/\/   fsqrt   s2, s5\n+    __ fcvts(v9, v3);                                  \/\/   fcvt    d9, s3\n+    __ fmovd(v24, v10);                                \/\/   fmov    d24, d10\n+    __ fabsd(v6, v1);                                  \/\/   fabs    d6, d1\n+    __ fnegd(v11, v0);                                 \/\/   fneg    d11, d0\n+    __ fsqrtd(v3, v17);                                \/\/   fsqrt   d3, d17\n+    __ fcvtd(v28, v5);                                 \/\/   fcvt    s28, d5\n@@ -547,12 +547,12 @@\n-    __ fcvtzsw(r22, v6);                               \/\/       fcvtzs  w22, s6\n-    __ fcvtzs(r0, v27);                                \/\/       fcvtzs  x0, s27\n-    __ fcvtzdw(r26, v2);                               \/\/       fcvtzs  w26, d2\n-    __ fcvtzd(r5, v7);                                 \/\/       fcvtzs  x5, d7\n-    __ scvtfws(v28, r11);                              \/\/       scvtf   s28, w11\n-    __ scvtfs(v25, r13);                               \/\/       scvtf   s25, x13\n-    __ scvtfwd(v11, r23);                              \/\/       scvtf   d11, w23\n-    __ scvtfd(v19, r8);                                \/\/       scvtf   d19, x8\n-    __ fmovs(r18, v21);                                \/\/       fmov    w18, s21\n-    __ fmovd(r25, v20);                                \/\/       fmov    x25, d20\n-    __ fmovs(v19, r18);                                \/\/       fmov    s19, w18\n-    __ fmovd(v2, r29);                                 \/\/       fmov    d2, x29\n+    __ fcvtzsw(r22, v5);                               \/\/   fcvtzs  w22, s5\n+    __ fcvtzs(r0, v26);                                \/\/   fcvtzs  x0, s26\n+    __ fcvtzdw(r25, v1);                               \/\/   fcvtzs  w25, d1\n+    __ fcvtzd(r5, v6);                                 \/\/   fcvtzs  x5, d6\n+    __ scvtfws(v27, r11);                              \/\/   scvtf   s27, w11\n+    __ scvtfs(v24, r12);                               \/\/   scvtf   s24, x12\n+    __ scvtfwd(v11, r23);                              \/\/   scvtf   d11, w23\n+    __ scvtfd(v17, r7);                                \/\/   scvtf   d17, x7\n+    __ fmovs(r16, v21);                                \/\/   fmov    w16, s21\n+    __ fmovd(r24, v20);                                \/\/   fmov    x24, d20\n+    __ fmovs(v19, r17);                                \/\/   fmov    s19, w17\n+    __ fmovd(v2, r28);                                 \/\/   fmov    d2, x28\n@@ -561,4 +561,4 @@\n-    __ fcmps(v22, v8);                                 \/\/       fcmp    s22, s8\n-    __ fcmpd(v21, v19);                                \/\/       fcmp    d21, d19\n-    __ fcmps(v20, 0.0);                                \/\/       fcmp    s20, #0.0\n-    __ fcmpd(v11, 0.0);                                \/\/       fcmp    d11, #0.0\n+    __ fcmps(v21, v7);                                 \/\/   fcmp    s21, s7\n+    __ fcmpd(v21, v19);                                \/\/   fcmp    d21, d19\n+    __ fcmps(v20, 0.0);                                \/\/   fcmp    s20, #0.0\n+    __ fcmpd(v10, 0.0);                                \/\/   fcmp    d10, #0.0\n@@ -567,5 +567,5 @@\n-    __ stpw(r20, r6, Address(r15, -32));               \/\/       stp     w20, w6, [x15, #-32]\n-    __ ldpw(r27, r14, Address(r3, -208));              \/\/       ldp     w27, w14, [x3, #-208]\n-    __ ldpsw(r17, r10, Address(r11, -80));             \/\/       ldpsw   x17, x10, [x11, #-80]\n-    __ stp(r7, r7, Address(r14, 64));                  \/\/       stp     x7, x7, [x14, #64]\n-    __ ldp(r12, r23, Address(r0, 112));                \/\/       ldp     x12, x23, [x0, #112]\n+    __ stpw(r20, r5, Address(r14, -32));               \/\/   stp w20, w5, [x14, #-32]\n+    __ ldpw(r27, r14, Address(r3, -208));              \/\/   ldp w27, w14, [x3, #-208]\n+    __ ldpsw(r17, r10, Address(r10, -80));             \/\/   ldpsw   x17, x10, [x10, #-80]\n+    __ stp(r6, r7, Address(r13, 64));                  \/\/   stp x6, x7, [x13, #64]\n+    __ ldp(r12, r23, Address(r0, 112));                \/\/   ldp x12, x23, [x0, #112]\n@@ -574,5 +574,5 @@\n-    __ stpw(r13, r7, Address(__ pre(r6, -80)));        \/\/       stp     w13, w7, [x6, #-80]!\n-    __ ldpw(r30, r16, Address(__ pre(r2, -144)));      \/\/       ldp     w30, w16, [x2, #-144]!\n-    __ ldpsw(r4, r1, Address(__ pre(r26, -144)));      \/\/       ldpsw   x4, x1, [x26, #-144]!\n-    __ stp(r23, r14, Address(__ pre(r11, 64)));        \/\/       stp     x23, x14, [x11, #64]!\n-    __ ldp(r29, r27, Address(__ pre(r21, -192)));      \/\/       ldp     x29, x27, [x21, #-192]!\n+    __ stpw(r12, r7, Address(__ pre(r6, -80)));        \/\/   stp w12, w7, [x6, #-80]!\n+    __ ldpw(r30, r16, Address(__ pre(r2, -144)));      \/\/   ldp w30, w16, [x2, #-144]!\n+    __ ldpsw(r4, r1, Address(__ pre(r26, -144)));      \/\/   ldpsw   x4, x1, [x26, #-144]!\n+    __ stp(r23, r13, Address(__ pre(r11, 64)));        \/\/   stp x23, x13, [x11, #64]!\n+    __ ldp(r29, r27, Address(__ pre(r21, -192)));      \/\/   ldp x29, x27, [x21, #-192]!\n@@ -581,5 +581,5 @@\n-    __ stpw(r22, r5, Address(__ post(r21, -48)));      \/\/       stp     w22, w5, [x21], #-48\n-    __ ldpw(r27, r17, Address(__ post(r6, -32)));      \/\/       ldp     w27, w17, [x6], #-32\n-    __ ldpsw(r17, r6, Address(__ post(r1, -80)));      \/\/       ldpsw   x17, x6, [x1], #-80\n-    __ stp(r13, r20, Address(__ post(r21, -208)));     \/\/       stp     x13, x20, [x21], #-208\n-    __ ldp(r30, r27, Address(__ post(r10, 80)));       \/\/       ldp     x30, x27, [x10], #80\n+    __ stpw(r21, r5, Address(__ post(r22, -48)));      \/\/   stp w21, w5, [x22], #-48\n+    __ ldpw(r27, r17, Address(__ post(r6, -32)));      \/\/   ldp w27, w17, [x6], #-32\n+    __ ldpsw(r17, r6, Address(__ post(r1, -80)));      \/\/   ldpsw   x17, x6, [x1], #-80\n+    __ stp(r12, r20, Address(__ post(r21, -208)));     \/\/   stp x12, x20, [x21], #-208\n+    __ ldp(r30, r27, Address(__ post(r10, 80)));       \/\/   ldp x30, x27, [x10], #80\n@@ -588,4 +588,4 @@\n-    __ stnpw(r5, r17, Address(r11, 16));               \/\/       stnp    w5, w17, [x11, #16]\n-    __ ldnpw(r14, r4, Address(r26, -96));              \/\/       ldnp    w14, w4, [x26, #-96]\n-    __ stnp(r23, r29, Address(r12, 32));               \/\/       stnp    x23, x29, [x12, #32]\n-    __ ldnp(r0, r6, Address(r21, -80));                \/\/       ldnp    x0, x6, [x21, #-80]\n+    __ stnpw(r4, r16, Address(r10, 16));               \/\/   stnp    w4, w16, [x10, #16]\n+    __ ldnpw(r14, r4, Address(r25, -96));              \/\/   ldnp    w14, w4, [x25, #-96]\n+    __ stnp(r22, r28, Address(r11, 32));               \/\/   stnp    x22, x28, [x11, #32]\n+    __ ldnp(r0, r6, Address(r21, -80));                \/\/   ldnp    x0, x6, [x21, #-80]\n@@ -594,22 +594,22 @@\n-    __ ld1(v15, __ T8B, Address(r26));                 \/\/       ld1     {v15.8B}, [x26]\n-    __ ld1(v23, v24, __ T16B, Address(__ post(r11, 32))); \/\/    ld1     {v23.16B, v24.16B}, [x11], 32\n-    __ ld1(v8, v9, v10, __ T1D, Address(__ post(r23, r7))); \/\/  ld1     {v8.1D, v9.1D, v10.1D}, [x23], x7\n-    __ ld1(v19, v20, v21, v22, __ T8H, Address(__ post(r25, 64))); \/\/   ld1     {v19.8H, v20.8H, v21.8H, v22.8H}, [x25], 64\n-    __ ld1r(v29, __ T8B, Address(r17));                \/\/       ld1r    {v29.8B}, [x17]\n-    __ ld1r(v24, __ T4S, Address(__ post(r23, 4)));    \/\/       ld1r    {v24.4S}, [x23], 4\n-    __ ld1r(v10, __ T1D, Address(__ post(r5, r25)));   \/\/       ld1r    {v10.1D}, [x5], x25\n-    __ ld2(v18, v19, __ T2D, Address(r10));            \/\/       ld2     {v18.2D, v19.2D}, [x10]\n-    __ ld2(v12, v13, __ T4H, Address(__ post(r15, 16))); \/\/     ld2     {v12.4H, v13.4H}, [x15], 16\n-    __ ld2r(v25, v26, __ T16B, Address(r18));          \/\/       ld2r    {v25.16B, v26.16B}, [x18]\n-    __ ld2r(v1, v2, __ T2S, Address(__ post(r30, 8))); \/\/       ld2r    {v1.2S, v2.2S}, [x30], 8\n-    __ ld2r(v16, v17, __ T2D, Address(__ post(r18, r9))); \/\/    ld2r    {v16.2D, v17.2D}, [x18], x9\n-    __ ld3(v25, v26, v27, __ T4S, Address(__ post(r12, r2))); \/\/        ld3     {v25.4S, v26.4S, v27.4S}, [x12], x2\n-    __ ld3(v26, v27, v28, __ T2S, Address(r19));       \/\/       ld3     {v26.2S, v27.2S, v28.2S}, [x19]\n-    __ ld3r(v15, v16, v17, __ T8H, Address(r21));      \/\/       ld3r    {v15.8H, v16.8H, v17.8H}, [x21]\n-    __ ld3r(v25, v26, v27, __ T4S, Address(__ post(r13, 12))); \/\/       ld3r    {v25.4S, v26.4S, v27.4S}, [x13], 12\n-    __ ld3r(v14, v15, v16, __ T1D, Address(__ post(r28, r29))); \/\/      ld3r    {v14.1D, v15.1D, v16.1D}, [x28], x29\n-    __ ld4(v17, v18, v19, v20, __ T8H, Address(__ post(r29, 64))); \/\/   ld4     {v17.8H, v18.8H, v19.8H, v20.8H}, [x29], 64\n-    __ ld4(v27, v28, v29, v30, __ T8B, Address(__ post(r7, r0))); \/\/    ld4     {v27.8B, v28.8B, v29.8B, v30.8B}, [x7], x0\n-    __ ld4r(v24, v25, v26, v27, __ T8B, Address(r18)); \/\/       ld4r    {v24.8B, v25.8B, v26.8B, v27.8B}, [x18]\n-    __ ld4r(v0, v1, v2, v3, __ T4H, Address(__ post(r26, 8))); \/\/       ld4r    {v0.4H, v1.4H, v2.4H, v3.4H}, [x26], 8\n-    __ ld4r(v12, v13, v14, v15, __ T2S, Address(__ post(r25, r2))); \/\/  ld4r    {v12.2S, v13.2S, v14.2S, v15.2S}, [x25], x2\n+    __ ld1(v14, __ T8B, Address(r25));                 \/\/   ld1 {v14.8B}, [x25]\n+    __ ld1(v22, v23, __ T16B, Address(__ post(r11, 32))); \/\/    ld1 {v22.16B, v23.16B}, [x11], 32\n+    __ ld1(v8, v9, v10, __ T1D, Address(__ post(r23, r6))); \/\/  ld1 {v8.1D, v9.1D, v10.1D}, [x23], x6\n+    __ ld1(v19, v20, v21, v22, __ T8H, Address(__ post(r25, 64))); \/\/   ld1 {v19.8H, v20.8H, v21.8H, v22.8H}, [x25], 64\n+    __ ld1r(v28, __ T8B, Address(r16));                \/\/   ld1r    {v28.8B}, [x16]\n+    __ ld1r(v24, __ T4S, Address(__ post(r23, 4)));    \/\/   ld1r    {v24.4S}, [x23], 4\n+    __ ld1r(v9, __ T1D, Address(__ post(r5, r24)));    \/\/   ld1r    {v9.1D}, [x5], x24\n+    __ ld2(v16, v17, __ T2D, Address(r9));             \/\/   ld2 {v16.2D, v17.2D}, [x9]\n+    __ ld2(v11, v12, __ T4H, Address(__ post(r14, 16))); \/\/ ld2 {v11.4H, v12.4H}, [x14], 16\n+    __ ld2r(v25, v26, __ T16B, Address(r17));          \/\/   ld2r    {v25.16B, v26.16B}, [x17]\n+    __ ld2r(v1, v2, __ T2S, Address(__ post(r29, 8))); \/\/   ld2r    {v1.2S, v2.2S}, [x29], 8\n+    __ ld2r(v15, v16, __ T2D, Address(__ post(r17, r8))); \/\/    ld2r    {v15.2D, v16.2D}, [x17], x8\n+    __ ld3(v25, v26, v27, __ T4S, Address(__ post(r11, r2))); \/\/    ld3 {v25.4S, v26.4S, v27.4S}, [x11], x2\n+    __ ld3(v25, v26, v27, __ T2S, Address(r19));       \/\/   ld3 {v25.2S, v26.2S, v27.2S}, [x19]\n+    __ ld3r(v14, v15, v16, __ T8H, Address(r21));      \/\/   ld3r    {v14.8H, v15.8H, v16.8H}, [x21]\n+    __ ld3r(v24, v25, v26, __ T4S, Address(__ post(r13, 12))); \/\/   ld3r    {v24.4S, v25.4S, v26.4S}, [x13], 12\n+    __ ld3r(v13, v14, v15, __ T1D, Address(__ post(r27, r28))); \/\/  ld3r    {v13.1D, v14.1D, v15.1D}, [x27], x28\n+    __ ld4(v15, v16, v17, v18, __ T8H, Address(__ post(r28, 64))); \/\/   ld4 {v15.8H, v16.8H, v17.8H, v18.8H}, [x28], 64\n+    __ ld4(v26, v27, v28, v29, __ T8B, Address(__ post(r7, r0))); \/\/    ld4 {v26.8B, v27.8B, v28.8B, v29.8B}, [x7], x0\n+    __ ld4r(v23, v24, v25, v26, __ T8B, Address(r16)); \/\/   ld4r    {v23.8B, v24.8B, v25.8B, v26.8B}, [x16]\n+    __ ld4r(v0, v1, v2, v3, __ T4H, Address(__ post(r25, 8))); \/\/   ld4r    {v0.4H, v1.4H, v2.4H, v3.4H}, [x25], 8\n+    __ ld4r(v11, v12, v13, v14, __ T2S, Address(__ post(r24, r2))); \/\/  ld4r    {v11.2S, v12.2S, v13.2S, v14.2S}, [x24], x2\n@@ -618,4 +618,4 @@\n-    __ sha512h(v22, __ T2D, v27, v4);                  \/\/       sha512h         q22, q27, v4.2D\n-    __ sha512h2(v7, __ T2D, v6, v1);                   \/\/       sha512h2                q7, q6, v1.2D\n-    __ sha512su0(v26, __ T2D, v15);                    \/\/       sha512su0               v26.2D, v15.2D\n-    __ sha512su1(v2, __ T2D, v13, v13);                \/\/       sha512su1               v2.2D, v13.2D, v13.2D\n+    __ sha512h(v22, __ T2D, v26, v4);                  \/\/   sha512h     q22, q26, v4.2D\n+    __ sha512h2(v7, __ T2D, v6, v1);                   \/\/   sha512h2        q7, q6, v1.2D\n+    __ sha512su0(v25, __ T2D, v14);                    \/\/   sha512su0       v25.2D, v14.2D\n+    __ sha512su1(v1, __ T2D, v12, v13);                \/\/   sha512su1       v1.2D, v12.2D, v13.2D\n@@ -624,48 +624,48 @@\n-    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/       ccmn    xzr, xzr, #3, LE\n-    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/       ccmn    wzr, wzr, #5, EQ\n-    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/       ccmp    xzr, 1, #4, NE\n-    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/       ccmp    wzr, 2, #2, GT\n-    __ extr(zr, zr, zr, 0);                            \/\/       extr    xzr, xzr, xzr, 0\n-    __ stlxp(r0, zr, zr, sp);                          \/\/       stlxp   w0, xzr, xzr, [sp]\n-    __ stlxpw(r2, zr, zr, r3);                         \/\/       stlxp   w2, wzr, wzr, [x3]\n-    __ stxp(r4, zr, zr, r5);                           \/\/       stxp    w4, xzr, xzr, [x5]\n-    __ stxpw(r6, zr, zr, sp);                          \/\/       stxp    w6, wzr, wzr, [sp]\n-    __ dup(v0, __ T16B, zr);                           \/\/       dup     v0.16b, wzr\n-    __ mov(v1, __ T1D, 0, zr);                         \/\/       mov     v1.d[0], xzr\n-    __ mov(v1, __ T2S, 1, zr);                         \/\/       mov     v1.s[1], wzr\n-    __ mov(v1, __ T4H, 2, zr);                         \/\/       mov     v1.h[2], wzr\n-    __ mov(v1, __ T8B, 3, zr);                         \/\/       mov     v1.b[3], wzr\n-    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/       ld1     {v31.2d, v0.2d}, [x1], x0\n-    __ sve_cpy(z0, __ S, p0, v1);                      \/\/       mov     z0.s, p0\/m, s1\n-    __ sve_inc(r0, __ S);                              \/\/       incw    x0\n-    __ sve_dec(r1, __ H);                              \/\/       dech    x1\n-    __ sve_lsl(z0, __ B, z1, 7);                       \/\/       lsl     z0.b, z1.b, #7\n-    __ sve_lsl(z21, __ H, z1, 15);                     \/\/       lsl     z21.h, z1.h, #15\n-    __ sve_lsl(z0, __ S, z1, 31);                      \/\/       lsl     z0.s, z1.s, #31\n-    __ sve_lsl(z0, __ D, z1, 63);                      \/\/       lsl     z0.d, z1.d, #63\n-    __ sve_lsr(z0, __ B, z1, 7);                       \/\/       lsr     z0.b, z1.b, #7\n-    __ sve_asr(z0, __ H, z11, 15);                     \/\/       asr     z0.h, z11.h, #15\n-    __ sve_lsr(z30, __ S, z1, 31);                     \/\/       lsr     z30.s, z1.s, #31\n-    __ sve_asr(z0, __ D, z1, 63);                      \/\/       asr     z0.d, z1.d, #63\n-    __ sve_addvl(sp, r0, 31);                          \/\/       addvl   sp, x0, #31\n-    __ sve_addpl(r1, sp, -32);                         \/\/       addpl   x1, sp, -32\n-    __ sve_cntp(r8, __ B, p0, p1);                     \/\/       cntp    x8, p0, p1.b\n-    __ sve_dup(z0, __ B, 127);                         \/\/       dup     z0.b, 127\n-    __ sve_dup(z1, __ H, -128);                        \/\/       dup     z1.h, -128\n-    __ sve_dup(z2, __ S, 32512);                       \/\/       dup     z2.s, 32512\n-    __ sve_dup(z7, __ D, -32768);                      \/\/       dup     z7.d, -32768\n-    __ sve_ld1b(z0, __ B, p0, Address(sp));            \/\/       ld1b    {z0.b}, p0\/z, [sp]\n-    __ sve_ld1h(z10, __ H, p1, Address(sp, -8));       \/\/       ld1h    {z10.h}, p1\/z, [sp, #-8, MUL VL]\n-    __ sve_ld1w(z20, __ S, p2, Address(r0, 7));        \/\/       ld1w    {z20.s}, p2\/z, [x0, #7, MUL VL]\n-    __ sve_ld1b(z30, __ B, p3, Address(sp, r8));       \/\/       ld1b    {z30.b}, p3\/z, [sp, x8]\n-    __ sve_ld1w(z0, __ S, p4, Address(sp, r28));       \/\/       ld1w    {z0.s}, p4\/z, [sp, x28, LSL #2]\n-    __ sve_ld1d(z11, __ D, p5, Address(r0, r1));       \/\/       ld1d    {z11.d}, p5\/z, [x0, x1, LSL #3]\n-    __ sve_st1b(z22, __ B, p6, Address(sp));           \/\/       st1b    {z22.b}, p6, [sp]\n-    __ sve_st1b(z31, __ B, p7, Address(sp, -8));       \/\/       st1b    {z31.b}, p7, [sp, #-8, MUL VL]\n-    __ sve_st1w(z0, __ S, p1, Address(r0, 7));         \/\/       st1w    {z0.s}, p1, [x0, #7, MUL VL]\n-    __ sve_st1b(z0, __ B, p2, Address(sp, r1));        \/\/       st1b    {z0.b}, p2, [sp, x1]\n-    __ sve_st1h(z0, __ H, p3, Address(sp, r8));        \/\/       st1h    {z0.h}, p3, [sp, x8, LSL #1]\n-    __ sve_st1d(z0, __ D, p4, Address(r0, r18));       \/\/       st1d    {z0.d}, p4, [x0, x18, LSL #3]\n-    __ sve_ldr(z0, Address(sp));                       \/\/       ldr     z0, [sp]\n-    __ sve_ldr(z31, Address(sp, -256));                \/\/       ldr     z31, [sp, #-256, MUL VL]\n-    __ sve_str(z8, Address(r8, 255));                  \/\/       str     z8, [x8, #255, MUL VL]\n+    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/   ccmn    xzr, xzr, #3, LE\n+    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/   ccmn    wzr, wzr, #5, EQ\n+    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/   ccmp    xzr, 1, #4, NE\n+    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/   ccmp    wzr, 2, #2, GT\n+    __ extr(zr, zr, zr, 0);                            \/\/   extr    xzr, xzr, xzr, 0\n+    __ stlxp(r0, zr, zr, sp);                          \/\/   stlxp   w0, xzr, xzr, [sp]\n+    __ stlxpw(r2, zr, zr, r3);                         \/\/   stlxp   w2, wzr, wzr, [x3]\n+    __ stxp(r4, zr, zr, r5);                           \/\/   stxp    w4, xzr, xzr, [x5]\n+    __ stxpw(r6, zr, zr, sp);                          \/\/   stxp    w6, wzr, wzr, [sp]\n+    __ dup(v0, __ T16B, zr);                           \/\/   dup v0.16b, wzr\n+    __ mov(v1, __ T1D, 0, zr);                         \/\/   mov v1.d[0], xzr\n+    __ mov(v1, __ T2S, 1, zr);                         \/\/   mov v1.s[1], wzr\n+    __ mov(v1, __ T4H, 2, zr);                         \/\/   mov v1.h[2], wzr\n+    __ mov(v1, __ T8B, 3, zr);                         \/\/   mov v1.b[3], wzr\n+    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/   ld1 {v31.2d, v0.2d}, [x1], x0\n+    __ sve_cpy(z0, __ S, p0, v1);                      \/\/   mov z0.s, p0\/m, s1\n+    __ sve_inc(r0, __ S);                              \/\/   incw    x0\n+    __ sve_dec(r1, __ H);                              \/\/   dech    x1\n+    __ sve_lsl(z0, __ B, z1, 7);                       \/\/   lsl z0.b, z1.b, #7\n+    __ sve_lsl(z21, __ H, z1, 15);                     \/\/   lsl z21.h, z1.h, #15\n+    __ sve_lsl(z0, __ S, z1, 31);                      \/\/   lsl z0.s, z1.s, #31\n+    __ sve_lsl(z0, __ D, z1, 63);                      \/\/   lsl z0.d, z1.d, #63\n+    __ sve_lsr(z0, __ B, z1, 7);                       \/\/   lsr z0.b, z1.b, #7\n+    __ sve_asr(z0, __ H, z11, 15);                     \/\/   asr z0.h, z11.h, #15\n+    __ sve_lsr(z30, __ S, z1, 31);                     \/\/   lsr z30.s, z1.s, #31\n+    __ sve_asr(z0, __ D, z1, 63);                      \/\/   asr z0.d, z1.d, #63\n+    __ sve_addvl(sp, r0, 31);                          \/\/   addvl   sp, x0, #31\n+    __ sve_addpl(r1, sp, -32);                         \/\/   addpl   x1, sp, -32\n+    __ sve_cntp(r8, __ B, p0, p1);                     \/\/   cntp    x8, p0, p1.b\n+    __ sve_dup(z0, __ B, 127);                         \/\/   dup z0.b, 127\n+    __ sve_dup(z1, __ H, -128);                        \/\/   dup z1.h, -128\n+    __ sve_dup(z2, __ S, 32512);                       \/\/   dup z2.s, 32512\n+    __ sve_dup(z7, __ D, -32768);                      \/\/   dup z7.d, -32768\n+    __ sve_ld1b(z0, __ B, p0, Address(sp));            \/\/   ld1b    {z0.b}, p0\/z, [sp]\n+    __ sve_ld1h(z10, __ H, p1, Address(sp, -8));       \/\/   ld1h    {z10.h}, p1\/z, [sp, #-8, MUL VL]\n+    __ sve_ld1w(z20, __ S, p2, Address(r0, 7));        \/\/   ld1w    {z20.s}, p2\/z, [x0, #7, MUL VL]\n+    __ sve_ld1b(z30, __ B, p3, Address(sp, r8));       \/\/   ld1b    {z30.b}, p3\/z, [sp, x8]\n+    __ sve_ld1w(z0, __ S, p4, Address(sp, r28));       \/\/   ld1w    {z0.s}, p4\/z, [sp, x28, LSL #2]\n+    __ sve_ld1d(z11, __ D, p5, Address(r0, r1));       \/\/   ld1d    {z11.d}, p5\/z, [x0, x1, LSL #3]\n+    __ sve_st1b(z22, __ B, p6, Address(sp));           \/\/   st1b    {z22.b}, p6, [sp]\n+    __ sve_st1b(z31, __ B, p7, Address(sp, -8));       \/\/   st1b    {z31.b}, p7, [sp, #-8, MUL VL]\n+    __ sve_st1w(z0, __ S, p1, Address(r0, 7));         \/\/   st1w    {z0.s}, p1, [x0, #7, MUL VL]\n+    __ sve_st1b(z0, __ B, p2, Address(sp, r1));        \/\/   st1b    {z0.b}, p2, [sp, x1]\n+    __ sve_st1h(z0, __ H, p3, Address(sp, r8));        \/\/   st1h    {z0.h}, p3, [sp, x8, LSL #1]\n+    __ sve_st1d(z0, __ D, p4, Address(r0, r17));       \/\/   st1d    {z0.d}, p4, [x0, x17, LSL #3]\n+    __ sve_ldr(z0, Address(sp));                       \/\/   ldr z0, [sp]\n+    __ sve_ldr(z31, Address(sp, -256));                \/\/   ldr z31, [sp, #-256, MUL VL]\n+    __ sve_str(z8, Address(r8, 255));                  \/\/   str z8, [x8, #255, MUL VL]\n@@ -674,32 +674,32 @@\n-    __ fmovd(v0, 2.0);                                 \/\/       fmov d0, #2.0\n-    __ fmovd(v0, 2.125);                               \/\/       fmov d0, #2.125\n-    __ fmovd(v0, 4.0);                                 \/\/       fmov d0, #4.0\n-    __ fmovd(v0, 4.25);                                \/\/       fmov d0, #4.25\n-    __ fmovd(v0, 8.0);                                 \/\/       fmov d0, #8.0\n-    __ fmovd(v0, 8.5);                                 \/\/       fmov d0, #8.5\n-    __ fmovd(v0, 16.0);                                \/\/       fmov d0, #16.0\n-    __ fmovd(v0, 17.0);                                \/\/       fmov d0, #17.0\n-    __ fmovd(v0, 0.125);                               \/\/       fmov d0, #0.125\n-    __ fmovd(v0, 0.1328125);                           \/\/       fmov d0, #0.1328125\n-    __ fmovd(v0, 0.25);                                \/\/       fmov d0, #0.25\n-    __ fmovd(v0, 0.265625);                            \/\/       fmov d0, #0.265625\n-    __ fmovd(v0, 0.5);                                 \/\/       fmov d0, #0.5\n-    __ fmovd(v0, 0.53125);                             \/\/       fmov d0, #0.53125\n-    __ fmovd(v0, 1.0);                                 \/\/       fmov d0, #1.0\n-    __ fmovd(v0, 1.0625);                              \/\/       fmov d0, #1.0625\n-    __ fmovd(v0, -2.0);                                \/\/       fmov d0, #-2.0\n-    __ fmovd(v0, -2.125);                              \/\/       fmov d0, #-2.125\n-    __ fmovd(v0, -4.0);                                \/\/       fmov d0, #-4.0\n-    __ fmovd(v0, -4.25);                               \/\/       fmov d0, #-4.25\n-    __ fmovd(v0, -8.0);                                \/\/       fmov d0, #-8.0\n-    __ fmovd(v0, -8.5);                                \/\/       fmov d0, #-8.5\n-    __ fmovd(v0, -16.0);                               \/\/       fmov d0, #-16.0\n-    __ fmovd(v0, -17.0);                               \/\/       fmov d0, #-17.0\n-    __ fmovd(v0, -0.125);                              \/\/       fmov d0, #-0.125\n-    __ fmovd(v0, -0.1328125);                          \/\/       fmov d0, #-0.1328125\n-    __ fmovd(v0, -0.25);                               \/\/       fmov d0, #-0.25\n-    __ fmovd(v0, -0.265625);                           \/\/       fmov d0, #-0.265625\n-    __ fmovd(v0, -0.5);                                \/\/       fmov d0, #-0.5\n-    __ fmovd(v0, -0.53125);                            \/\/       fmov d0, #-0.53125\n-    __ fmovd(v0, -1.0);                                \/\/       fmov d0, #-1.0\n-    __ fmovd(v0, -1.0625);                             \/\/       fmov d0, #-1.0625\n+    __ fmovd(v0, 2.0);                                 \/\/   fmov d0, #2.0\n+    __ fmovd(v0, 2.125);                               \/\/   fmov d0, #2.125\n+    __ fmovd(v0, 4.0);                                 \/\/   fmov d0, #4.0\n+    __ fmovd(v0, 4.25);                                \/\/   fmov d0, #4.25\n+    __ fmovd(v0, 8.0);                                 \/\/   fmov d0, #8.0\n+    __ fmovd(v0, 8.5);                                 \/\/   fmov d0, #8.5\n+    __ fmovd(v0, 16.0);                                \/\/   fmov d0, #16.0\n+    __ fmovd(v0, 17.0);                                \/\/   fmov d0, #17.0\n+    __ fmovd(v0, 0.125);                               \/\/   fmov d0, #0.125\n+    __ fmovd(v0, 0.1328125);                           \/\/   fmov d0, #0.1328125\n+    __ fmovd(v0, 0.25);                                \/\/   fmov d0, #0.25\n+    __ fmovd(v0, 0.265625);                            \/\/   fmov d0, #0.265625\n+    __ fmovd(v0, 0.5);                                 \/\/   fmov d0, #0.5\n+    __ fmovd(v0, 0.53125);                             \/\/   fmov d0, #0.53125\n+    __ fmovd(v0, 1.0);                                 \/\/   fmov d0, #1.0\n+    __ fmovd(v0, 1.0625);                              \/\/   fmov d0, #1.0625\n+    __ fmovd(v0, -2.0);                                \/\/   fmov d0, #-2.0\n+    __ fmovd(v0, -2.125);                              \/\/   fmov d0, #-2.125\n+    __ fmovd(v0, -4.0);                                \/\/   fmov d0, #-4.0\n+    __ fmovd(v0, -4.25);                               \/\/   fmov d0, #-4.25\n+    __ fmovd(v0, -8.0);                                \/\/   fmov d0, #-8.0\n+    __ fmovd(v0, -8.5);                                \/\/   fmov d0, #-8.5\n+    __ fmovd(v0, -16.0);                               \/\/   fmov d0, #-16.0\n+    __ fmovd(v0, -17.0);                               \/\/   fmov d0, #-17.0\n+    __ fmovd(v0, -0.125);                              \/\/   fmov d0, #-0.125\n+    __ fmovd(v0, -0.1328125);                          \/\/   fmov d0, #-0.1328125\n+    __ fmovd(v0, -0.25);                               \/\/   fmov d0, #-0.25\n+    __ fmovd(v0, -0.265625);                           \/\/   fmov d0, #-0.265625\n+    __ fmovd(v0, -0.5);                                \/\/   fmov d0, #-0.5\n+    __ fmovd(v0, -0.53125);                            \/\/   fmov d0, #-0.53125\n+    __ fmovd(v0, -1.0);                                \/\/   fmov d0, #-1.0\n+    __ fmovd(v0, -1.0625);                             \/\/   fmov d0, #-1.0625\n@@ -708,9 +708,9 @@\n-    __ swp(Assembler::xword, r24, r24, r4);            \/\/       swp     x24, x24, [x4]\n-    __ ldadd(Assembler::xword, r20, r16, r0);          \/\/       ldadd   x20, x16, [x0]\n-    __ ldbic(Assembler::xword, r4, r21, r11);          \/\/       ldclr   x4, x21, [x11]\n-    __ ldeor(Assembler::xword, r30, r16, r22);         \/\/       ldeor   x30, x16, [x22]\n-    __ ldorr(Assembler::xword, r4, r15, r23);          \/\/       ldset   x4, x15, [x23]\n-    __ ldsmin(Assembler::xword, r26, r6, r12);         \/\/       ldsmin  x26, x6, [x12]\n-    __ ldsmax(Assembler::xword, r15, r14, r15);        \/\/       ldsmax  x15, x14, [x15]\n-    __ ldumin(Assembler::xword, r9, r25, r29);         \/\/       ldumin  x9, x25, [x29]\n-    __ ldumax(Assembler::xword, r11, r20, r12);        \/\/       ldumax  x11, x20, [x12]\n+    __ swp(Assembler::xword, r24, r23, r4);            \/\/   swp x24, x23, [x4]\n+    __ ldadd(Assembler::xword, r19, r15, r0);          \/\/   ldadd   x19, x15, [x0]\n+    __ ldbic(Assembler::xword, r4, r21, r11);          \/\/   ldclr   x4, x21, [x11]\n+    __ ldeor(Assembler::xword, r29, r15, r21);         \/\/   ldeor   x29, x15, [x21]\n+    __ ldorr(Assembler::xword, r4, r14, r23);          \/\/   ldset   x4, x14, [x23]\n+    __ ldsmin(Assembler::xword, r26, r5, r11);         \/\/   ldsmin  x26, x5, [x11]\n+    __ ldsmax(Assembler::xword, r14, r13, r14);        \/\/   ldsmax  x14, x13, [x14]\n+    __ ldumin(Assembler::xword, r8, r25, r28);         \/\/   ldumin  x8, x25, [x28]\n+    __ ldumax(Assembler::xword, r10, r20, r11);        \/\/   ldumax  x10, x20, [x11]\n@@ -719,9 +719,9 @@\n-    __ swpa(Assembler::xword, r18, r22, r16);          \/\/       swpa    x18, x22, [x16]\n-    __ ldadda(Assembler::xword, r21, r24, r26);        \/\/       ldadda  x21, x24, [x26]\n-    __ ldbica(Assembler::xword, r6, r6, r16);          \/\/       ldclra  x6, x6, [x16]\n-    __ ldeora(Assembler::xword, r16, r25, r16);        \/\/       ldeora  x16, x25, [x16]\n-    __ ldorra(Assembler::xword, r28, r24, r16);        \/\/       ldseta  x28, x24, [x16]\n-    __ ldsmina(Assembler::xword, r26, r15, r10);       \/\/       ldsmina x26, x15, [x10]\n-    __ ldsmaxa(Assembler::xword, r13, r14, r20);       \/\/       ldsmaxa x13, x14, [x20]\n-    __ ldumina(Assembler::xword, r1, r23, r30);        \/\/       ldumina x1, x23, [x30]\n-    __ ldumaxa(Assembler::xword, r14, r2, r6);         \/\/       ldumaxa x14, x2, [x6]\n+    __ swpa(Assembler::xword, r17, r21, r15);          \/\/   swpa    x17, x21, [x15]\n+    __ ldadda(Assembler::xword, r21, r23, r26);        \/\/   ldadda  x21, x23, [x26]\n+    __ ldbica(Assembler::xword, r5, r6, r15);          \/\/   ldclra  x5, x6, [x15]\n+    __ ldeora(Assembler::xword, r15, r25, r15);        \/\/   ldeora  x15, x25, [x15]\n+    __ ldorra(Assembler::xword, r28, r24, r15);        \/\/   ldseta  x28, x24, [x15]\n+    __ ldsmina(Assembler::xword, r25, r14, r10);       \/\/   ldsmina x25, x14, [x10]\n+    __ ldsmaxa(Assembler::xword, r13, r13, r20);       \/\/   ldsmaxa x13, x13, [x20]\n+    __ ldumina(Assembler::xword, r1, r22, sp);         \/\/   ldumina x1, x22, [sp]\n+    __ ldumaxa(Assembler::xword, r13, r2, r6);         \/\/   ldumaxa x13, x2, [x6]\n@@ -730,9 +730,9 @@\n-    __ swpal(Assembler::xword, r3, r8, r25);           \/\/       swpal   x3, x8, [x25]\n-    __ ldaddal(Assembler::xword, r0, r27, r30);        \/\/       ldaddal x0, x27, [x30]\n-    __ ldbical(Assembler::xword, r5, r5, r30);         \/\/       ldclral x5, x5, [x30]\n-    __ ldeoral(Assembler::xword, r11, r25, r0);        \/\/       ldeoral x11, x25, [x0]\n-    __ ldorral(Assembler::xword, zr, r0, r19);         \/\/       ldsetal xzr, x0, [x19]\n-    __ ldsminal(Assembler::xword, r29, r26, r9);       \/\/       ldsminal        x29, x26, [x9]\n-    __ ldsmaxal(Assembler::xword, r26, r12, r15);      \/\/       ldsmaxal        x26, x12, [x15]\n-    __ lduminal(Assembler::xword, r11, r11, r18);      \/\/       lduminal        x11, x11, [x18]\n-    __ ldumaxal(Assembler::xword, r25, r22, r24);      \/\/       ldumaxal        x25, x22, [x24]\n+    __ swpal(Assembler::xword, r3, r7, r24);           \/\/   swpal   x3, x7, [x24]\n+    __ ldaddal(Assembler::xword, r0, r27, r29);        \/\/   ldaddal x0, x27, [x29]\n+    __ ldbical(Assembler::xword, r5, r5, r29);         \/\/   ldclral x5, x5, [x29]\n+    __ ldeoral(Assembler::xword, r10, r25, r0);        \/\/   ldeoral x10, x25, [x0]\n+    __ ldorral(Assembler::xword, zr, r0, r19);         \/\/   ldsetal xzr, x0, [x19]\n+    __ ldsminal(Assembler::xword, r28, r25, r9);       \/\/   ldsminal    x28, x25, [x9]\n+    __ ldsmaxal(Assembler::xword, r25, r11, r14);      \/\/   ldsmaxal    x25, x11, [x14]\n+    __ lduminal(Assembler::xword, r10, r10, r17);      \/\/   lduminal    x10, x10, [x17]\n+    __ ldumaxal(Assembler::xword, r24, r21, r24);      \/\/   ldumaxal    x24, x21, [x24]\n@@ -741,9 +741,9 @@\n-    __ swpl(Assembler::xword, r0, r17, r11);           \/\/       swpl    x0, x17, [x11]\n-    __ ldaddl(Assembler::xword, r6, r29, r6);          \/\/       ldaddl  x6, x29, [x6]\n-    __ ldbicl(Assembler::xword, r5, r5, r21);          \/\/       ldclrl  x5, x5, [x21]\n-    __ ldeorl(Assembler::xword, r19, r16, r18);        \/\/       ldeorl  x19, x16, [x18]\n-    __ ldorrl(Assembler::xword, r30, r27, r28);        \/\/       ldsetl  x30, x27, [x28]\n-    __ ldsminl(Assembler::xword, r1, r28, r1);         \/\/       ldsminl x1, x28, [x1]\n-    __ ldsmaxl(Assembler::xword, r20, r29, r16);       \/\/       ldsmaxl x20, x29, [x16]\n-    __ lduminl(Assembler::xword, r13, r10, r29);       \/\/       lduminl x13, x10, [x29]\n-    __ ldumaxl(Assembler::xword, r29, r19, r22);       \/\/       ldumaxl x29, x19, [x22]\n+    __ swpl(Assembler::xword, r0, r15, r10);           \/\/   swpl    x0, x15, [x10]\n+    __ ldaddl(Assembler::xword, r6, r28, r5);          \/\/   ldaddl  x6, x28, [x5]\n+    __ ldbicl(Assembler::xword, r5, r5, r20);          \/\/   ldclrl  x5, x5, [x20]\n+    __ ldeorl(Assembler::xword, r19, r15, r17);        \/\/   ldeorl  x19, x15, [x17]\n+    __ ldorrl(Assembler::xword, r29, r26, r28);        \/\/   ldsetl  x29, x26, [x28]\n+    __ ldsminl(Assembler::xword, r1, r27, r0);         \/\/   ldsminl x1, x27, [x0]\n+    __ ldsmaxl(Assembler::xword, r20, r28, r15);       \/\/   ldsmaxl x20, x28, [x15]\n+    __ lduminl(Assembler::xword, r12, r9, r28);        \/\/   lduminl x12, x9, [x28]\n+    __ ldumaxl(Assembler::xword, r28, r19, r22);       \/\/   ldumaxl x28, x19, [x22]\n@@ -752,9 +752,9 @@\n-    __ swp(Assembler::word, r10, r4, sp);              \/\/       swp     w10, w4, [sp]\n-    __ ldadd(Assembler::word, r21, r8, sp);            \/\/       ldadd   w21, w8, [sp]\n-    __ ldbic(Assembler::word, r19, r10, r28);          \/\/       ldclr   w19, w10, [x28]\n-    __ ldeor(Assembler::word, r2, r25, r5);            \/\/       ldeor   w2, w25, [x5]\n-    __ ldorr(Assembler::word, r3, r8, r22);            \/\/       ldset   w3, w8, [x22]\n-    __ ldsmin(Assembler::word, r19, r13, r5);          \/\/       ldsmin  w19, w13, [x5]\n-    __ ldsmax(Assembler::word, r29, r24, r21);         \/\/       ldsmax  w29, w24, [x21]\n-    __ ldumin(Assembler::word, r26, r24, r3);          \/\/       ldumin  w26, w24, [x3]\n-    __ ldumax(Assembler::word, r24, r26, r23);         \/\/       ldumax  w24, w26, [x23]\n+    __ swp(Assembler::word, r10, r4, sp);              \/\/   swp w10, w4, [sp]\n+    __ ldadd(Assembler::word, r20, r8, sp);            \/\/   ldadd   w20, w8, [sp]\n+    __ ldbic(Assembler::word, r19, r9, r27);           \/\/   ldclr   w19, w9, [x27]\n+    __ ldeor(Assembler::word, r2, r25, r4);            \/\/   ldeor   w2, w25, [x4]\n+    __ ldorr(Assembler::word, r3, r7, r22);            \/\/   ldset   w3, w7, [x22]\n+    __ ldsmin(Assembler::word, r19, r12, r4);          \/\/   ldsmin  w19, w12, [x4]\n+    __ ldsmax(Assembler::word, r28, r23, r21);         \/\/   ldsmax  w28, w23, [x21]\n+    __ ldumin(Assembler::word, r25, r24, r3);          \/\/   ldumin  w25, w24, [x3]\n+    __ ldumax(Assembler::word, r24, r26, r23);         \/\/   ldumax  w24, w26, [x23]\n@@ -763,9 +763,9 @@\n-    __ swpa(Assembler::word, r15, r21, r3);            \/\/       swpa    w15, w21, [x3]\n-    __ ldadda(Assembler::word, r24, r8, r25);          \/\/       ldadda  w24, w8, [x25]\n-    __ ldbica(Assembler::word, r20, r16, r17);         \/\/       ldclra  w20, w16, [x17]\n-    __ ldeora(Assembler::word, r2, r1, r0);            \/\/       ldeora  w2, w1, [x0]\n-    __ ldorra(Assembler::word, r24, r4, r3);           \/\/       ldseta  w24, w4, [x3]\n-    __ ldsmina(Assembler::word, r12, zr, r28);         \/\/       ldsmina w12, wzr, [x28]\n-    __ ldsmaxa(Assembler::word, r10, r26, r2);         \/\/       ldsmaxa w10, w26, [x2]\n-    __ ldumina(Assembler::word, r12, r18, sp);         \/\/       ldumina w12, w18, [sp]\n-    __ ldumaxa(Assembler::word, r1, r13, r29);         \/\/       ldumaxa w1, w13, [x29]\n+    __ swpa(Assembler::word, r14, r21, r3);            \/\/   swpa    w14, w21, [x3]\n+    __ ldadda(Assembler::word, r23, r7, r24);          \/\/   ldadda  w23, w7, [x24]\n+    __ ldbica(Assembler::word, r20, r15, r16);         \/\/   ldclra  w20, w15, [x16]\n+    __ ldeora(Assembler::word, r2, r1, r0);            \/\/   ldeora  w2, w1, [x0]\n+    __ ldorra(Assembler::word, r24, r4, r3);           \/\/   ldseta  w24, w4, [x3]\n+    __ ldsmina(Assembler::word, r11, zr, r27);         \/\/   ldsmina w11, wzr, [x27]\n+    __ ldsmaxa(Assembler::word, r9, r25, r2);          \/\/   ldsmaxa w9, w25, [x2]\n+    __ ldumina(Assembler::word, r11, r17, sp);         \/\/   ldumina w11, w17, [sp]\n+    __ ldumaxa(Assembler::word, r1, r12, r28);         \/\/   ldumaxa w1, w12, [x28]\n@@ -774,9 +774,9 @@\n-    __ swpal(Assembler::word, r0, r19, r12);           \/\/       swpal   w0, w19, [x12]\n-    __ ldaddal(Assembler::word, r17, r22, r13);        \/\/       ldaddal w17, w22, [x13]\n-    __ ldbical(Assembler::word, r28, r30, sp);         \/\/       ldclral w28, w30, [sp]\n-    __ ldeoral(Assembler::word, r1, r26, r28);         \/\/       ldeoral w1, w26, [x28]\n-    __ ldorral(Assembler::word, r4, r30, r4);          \/\/       ldsetal w4, w30, [x4]\n-    __ ldsminal(Assembler::word, r6, r30, r26);        \/\/       ldsminal        w6, w30, [x26]\n-    __ ldsmaxal(Assembler::word, r18, r9, r8);         \/\/       ldsmaxal        w18, w9, [x8]\n-    __ lduminal(Assembler::word, r12, r0, r20);        \/\/       lduminal        w12, w0, [x20]\n-    __ ldumaxal(Assembler::word, r1, r24, r2);         \/\/       ldumaxal        w1, w24, [x2]\n+    __ swpal(Assembler::word, r0, r17, r11);           \/\/   swpal   w0, w17, [x11]\n+    __ ldaddal(Assembler::word, r16, r22, r12);        \/\/   ldaddal w16, w22, [x12]\n+    __ ldbical(Assembler::word, r27, r29, sp);         \/\/   ldclral w27, w29, [sp]\n+    __ ldeoral(Assembler::word, r1, r26, r27);         \/\/   ldeoral w1, w26, [x27]\n+    __ ldorral(Assembler::word, r4, r29, r3);          \/\/   ldsetal w4, w29, [x3]\n+    __ ldsminal(Assembler::word, r6, r29, r25);        \/\/   ldsminal    w6, w29, [x25]\n+    __ ldsmaxal(Assembler::word, r17, r8, r7);         \/\/   ldsmaxal    w17, w8, [x7]\n+    __ lduminal(Assembler::word, r12, r0, r20);        \/\/   lduminal    w12, w0, [x20]\n+    __ ldumaxal(Assembler::word, r1, r24, r2);         \/\/   ldumaxal    w1, w24, [x2]\n@@ -785,9 +785,9 @@\n-    __ swpl(Assembler::word, r0, r9, r24);             \/\/       swpl    w0, w9, [x24]\n-    __ ldaddl(Assembler::word, r26, r16, r30);         \/\/       ldaddl  w26, w16, [x30]\n-    __ ldbicl(Assembler::word, r3, r10, r23);          \/\/       ldclrl  w3, w10, [x23]\n-    __ ldeorl(Assembler::word, r10, r4, r18);          \/\/       ldeorl  w10, w4, [x18]\n-    __ ldorrl(Assembler::word, r2, r11, r8);           \/\/       ldsetl  w2, w11, [x8]\n-    __ ldsminl(Assembler::word, r10, r15, r17);        \/\/       ldsminl w10, w15, [x17]\n-    __ ldsmaxl(Assembler::word, r2, r10, r12);         \/\/       ldsmaxl w2, w10, [x12]\n-    __ lduminl(Assembler::word, r12, r15, r13);        \/\/       lduminl w12, w15, [x13]\n-    __ ldumaxl(Assembler::word, r2, r7, r20);          \/\/       ldumaxl w2, w7, [x20]\n+    __ swpl(Assembler::word, r0, r8, r24);             \/\/   swpl    w0, w8, [x24]\n+    __ ldaddl(Assembler::word, r25, r15, r29);         \/\/   ldaddl  w25, w15, [x29]\n+    __ ldbicl(Assembler::word, r3, r9, r23);           \/\/   ldclrl  w3, w9, [x23]\n+    __ ldeorl(Assembler::word, r9, r4, r17);           \/\/   ldeorl  w9, w4, [x17]\n+    __ ldorrl(Assembler::word, r1, r11, r7);           \/\/   ldsetl  w1, w11, [x7]\n+    __ ldsminl(Assembler::word, r9, r14, r16);         \/\/   ldsminl w9, w14, [x16]\n+    __ ldsmaxl(Assembler::word, r2, r9, r11);          \/\/   ldsmaxl w2, w9, [x11]\n+    __ lduminl(Assembler::word, r12, r14, r12);        \/\/   lduminl w12, w14, [x12]\n+    __ ldumaxl(Assembler::word, r2, r6, r20);          \/\/   ldumaxl w2, w6, [x20]\n@@ -796,38 +796,38 @@\n-    __ sve_add(z25, __ B, z15, z4);                    \/\/       add     z25.b, z15.b, z4.b\n-    __ sve_sub(z4, __ S, z11, z17);                    \/\/       sub     z4.s, z11.s, z17.s\n-    __ sve_fadd(z16, __ D, z17, z10);                  \/\/       fadd    z16.d, z17.d, z10.d\n-    __ sve_fmul(z22, __ D, z12, z25);                  \/\/       fmul    z22.d, z12.d, z25.d\n-    __ sve_fsub(z28, __ D, z14, z10);                  \/\/       fsub    z28.d, z14.d, z10.d\n-    __ sve_abs(z1, __ H, p3, z30);                     \/\/       abs     z1.h, p3\/m, z30.h\n-    __ sve_add(z15, __ B, p1, z2);                     \/\/       add     z15.b, p1\/m, z15.b, z2.b\n-    __ sve_asr(z13, __ S, p4, z16);                    \/\/       asr     z13.s, p4\/m, z13.s, z16.s\n-    __ sve_cnt(z3, __ D, p0, z11);                     \/\/       cnt     z3.d, p0\/m, z11.d\n-    __ sve_lsl(z5, __ D, p2, z14);                     \/\/       lsl     z5.d, p2\/m, z5.d, z14.d\n-    __ sve_lsr(z29, __ B, p0, z20);                    \/\/       lsr     z29.b, p0\/m, z29.b, z20.b\n-    __ sve_mul(z20, __ S, p5, z27);                    \/\/       mul     z20.s, p5\/m, z20.s, z27.s\n-    __ sve_neg(z26, __ B, p6, z4);                     \/\/       neg     z26.b, p6\/m, z4.b\n-    __ sve_not(z22, __ B, p4, z30);                    \/\/       not     z22.b, p4\/m, z30.b\n-    __ sve_smax(z11, __ H, p2, z27);                   \/\/       smax    z11.h, p2\/m, z11.h, z27.h\n-    __ sve_smin(z28, __ S, p5, z30);                   \/\/       smin    z28.s, p5\/m, z28.s, z30.s\n-    __ sve_sub(z30, __ S, p1, z13);                    \/\/       sub     z30.s, p1\/m, z30.s, z13.s\n-    __ sve_fabs(z30, __ D, p4, z26);                   \/\/       fabs    z30.d, p4\/m, z26.d\n-    __ sve_fadd(z15, __ S, p3, z11);                   \/\/       fadd    z15.s, p3\/m, z15.s, z11.s\n-    __ sve_fdiv(z6, __ D, p7, z16);                    \/\/       fdiv    z6.d, p7\/m, z6.d, z16.d\n-    __ sve_fmax(z27, __ S, p7, z7);                    \/\/       fmax    z27.s, p7\/m, z27.s, z7.s\n-    __ sve_fmin(z19, __ D, p2, z4);                    \/\/       fmin    z19.d, p2\/m, z19.d, z4.d\n-    __ sve_fmul(z17, __ S, p4, z22);                   \/\/       fmul    z17.s, p4\/m, z17.s, z22.s\n-    __ sve_fneg(z28, __ D, p3, z21);                   \/\/       fneg    z28.d, p3\/m, z21.d\n-    __ sve_frintm(z18, __ S, p5, z2);                  \/\/       frintm  z18.s, p5\/m, z2.s\n-    __ sve_frintn(z6, __ S, p3, z15);                  \/\/       frintn  z6.s, p3\/m, z15.s\n-    __ sve_frintp(z12, __ D, p5, z1);                  \/\/       frintp  z12.d, p5\/m, z1.d\n-    __ sve_fsqrt(z18, __ S, p1, z17);                  \/\/       fsqrt   z18.s, p1\/m, z17.s\n-    __ sve_fsub(z15, __ S, p5, z13);                   \/\/       fsub    z15.s, p5\/m, z15.s, z13.s\n-    __ sve_fmla(z20, __ D, p7, z27, z11);              \/\/       fmla    z20.d, p7\/m, z27.d, z11.d\n-    __ sve_fmls(z3, __ D, p0, z30, z23);               \/\/       fmls    z3.d, p0\/m, z30.d, z23.d\n-    __ sve_fnmla(z17, __ S, p2, z27, z26);             \/\/       fnmla   z17.s, p2\/m, z27.s, z26.s\n-    __ sve_fnmls(z6, __ D, p5, z22, z30);              \/\/       fnmls   z6.d, p5\/m, z22.d, z30.d\n-    __ sve_mla(z2, __ H, p7, z26, z18);                \/\/       mla     z2.h, p7\/m, z26.h, z18.h\n-    __ sve_mls(z22, __ B, p4, z2, z17);                \/\/       mls     z22.b, p4\/m, z2.b, z17.b\n-    __ sve_and(z24, z25, z22);                         \/\/       and     z24.d, z25.d, z22.d\n-    __ sve_eor(z18, z12, z3);                          \/\/       eor     z18.d, z12.d, z3.d\n-    __ sve_orr(z29, z28, z16);                         \/\/       orr     z29.d, z28.d, z16.d\n+    __ sve_add(z25, __ B, z14, z4);                    \/\/   add z25.b, z14.b, z4.b\n+    __ sve_sub(z4, __ S, z11, z16);                    \/\/   sub z4.s, z11.s, z16.s\n+    __ sve_fadd(z15, __ D, z16, z10);                  \/\/   fadd    z15.d, z16.d, z10.d\n+    __ sve_fmul(z22, __ D, z11, z24);                  \/\/   fmul    z22.d, z11.d, z24.d\n+    __ sve_fsub(z27, __ D, z13, z10);                  \/\/   fsub    z27.d, z13.d, z10.d\n+    __ sve_abs(z1, __ H, p3, z29);                     \/\/   abs z1.h, p3\/m, z29.h\n+    __ sve_add(z14, __ B, p1, z2);                     \/\/   add z14.b, p1\/m, z14.b, z2.b\n+    __ sve_asr(z12, __ S, p4, z15);                    \/\/   asr z12.s, p4\/m, z12.s, z15.s\n+    __ sve_cnt(z3, __ D, p0, z10);                     \/\/   cnt z3.d, p0\/m, z10.d\n+    __ sve_lsl(z5, __ D, p2, z14);                     \/\/   lsl z5.d, p2\/m, z5.d, z14.d\n+    __ sve_lsr(z28, __ B, p0, z19);                    \/\/   lsr z28.b, p0\/m, z28.b, z19.b\n+    __ sve_mul(z19, __ S, p5, z26);                    \/\/   mul z19.s, p5\/m, z19.s, z26.s\n+    __ sve_neg(z25, __ B, p6, z4);                     \/\/   neg z25.b, p6\/m, z4.b\n+    __ sve_not(z22, __ B, p4, z29);                    \/\/   not z22.b, p4\/m, z29.b\n+    __ sve_smax(z11, __ H, p2, z26);                   \/\/   smax    z11.h, p2\/m, z11.h, z26.h\n+    __ sve_smin(z27, __ S, p5, z29);                   \/\/   smin    z27.s, p5\/m, z27.s, z29.s\n+    __ sve_sub(z29, __ S, p1, z12);                    \/\/   sub z29.s, p1\/m, z29.s, z12.s\n+    __ sve_fabs(z29, __ D, p4, z26);                   \/\/   fabs    z29.d, p4\/m, z26.d\n+    __ sve_fadd(z14, __ S, p3, z10);                   \/\/   fadd    z14.s, p3\/m, z14.s, z10.s\n+    __ sve_fdiv(z6, __ D, p7, z15);                    \/\/   fdiv    z6.d, p7\/m, z6.d, z15.d\n+    __ sve_fmax(z26, __ S, p7, z6);                    \/\/   fmax    z26.s, p7\/m, z26.s, z6.s\n+    __ sve_fmin(z19, __ D, p2, z4);                    \/\/   fmin    z19.d, p2\/m, z19.d, z4.d\n+    __ sve_fmul(z15, __ S, p4, z21);                   \/\/   fmul    z15.s, p4\/m, z15.s, z21.s\n+    __ sve_fneg(z27, __ D, p3, z21);                   \/\/   fneg    z27.d, p3\/m, z21.d\n+    __ sve_frintm(z17, __ S, p5, z2);                  \/\/   frintm  z17.s, p5\/m, z2.s\n+    __ sve_frintn(z6, __ S, p3, z14);                  \/\/   frintn  z6.s, p3\/m, z14.s\n+    __ sve_frintp(z11, __ D, p5, z1);                  \/\/   frintp  z11.d, p5\/m, z1.d\n+    __ sve_fsqrt(z17, __ S, p1, z16);                  \/\/   fsqrt   z17.s, p1\/m, z16.s\n+    __ sve_fsub(z14, __ S, p5, z12);                   \/\/   fsub    z14.s, p5\/m, z14.s, z12.s\n+    __ sve_fmla(z20, __ D, p7, z26, z11);              \/\/   fmla    z20.d, p7\/m, z26.d, z11.d\n+    __ sve_fmls(z3, __ D, p0, z29, z23);               \/\/   fmls    z3.d, p0\/m, z29.d, z23.d\n+    __ sve_fnmla(z16, __ S, p2, z27, z25);             \/\/   fnmla   z16.s, p2\/m, z27.s, z25.s\n+    __ sve_fnmls(z6, __ D, p5, z22, z29);              \/\/   fnmls   z6.d, p5\/m, z22.d, z29.d\n+    __ sve_mla(z2, __ H, p7, z25, z16);                \/\/   mla z2.h, p7\/m, z25.h, z16.h\n+    __ sve_mls(z22, __ B, p4, z2, z16);                \/\/   mls z22.b, p4\/m, z2.b, z16.b\n+    __ sve_and(z23, z24, z22);                         \/\/   and z23.d, z24.d, z22.d\n+    __ sve_eor(z17, z11, z3);                          \/\/   eor z17.d, z11.d, z3.d\n+    __ sve_orr(z28, z27, z15);                         \/\/   orr z28.d, z27.d, z15.d\n@@ -836,9 +836,9 @@\n-    __ sve_andv(v6, __ S, p2, z28);                    \/\/       andv s6, p2, z28.s\n-    __ sve_orv(v7, __ H, p1, z7);                      \/\/       orv h7, p1, z7.h\n-    __ sve_eorv(v9, __ B, p5, z8);                     \/\/       eorv b9, p5, z8.b\n-    __ sve_smaxv(v27, __ B, p5, z30);                  \/\/       smaxv b27, p5, z30.b\n-    __ sve_sminv(v26, __ H, p0, z16);                  \/\/       sminv h26, p0, z16.h\n-    __ sve_fminv(v3, __ D, p6, z8);                    \/\/       fminv d3, p6, z8.d\n-    __ sve_fmaxv(v21, __ D, p6, z26);                  \/\/       fmaxv d21, p6, z26.d\n-    __ sve_fadda(v22, __ S, p0, z4);                   \/\/       fadda s22, p0, s22, z4.s\n-    __ sve_uaddv(v17, __ H, p0, z3);                   \/\/       uaddv d17, p0, z3.h\n+    __ sve_andv(v5, __ S, p2, z27);                    \/\/   andv s5, p2, z27.s\n+    __ sve_orv(v6, __ H, p1, z6);                      \/\/   orv h6, p1, z6.h\n+    __ sve_eorv(v8, __ B, p5, z7);                     \/\/   eorv b8, p5, z7.b\n+    __ sve_smaxv(v27, __ B, p5, z29);                  \/\/   smaxv b27, p5, z29.b\n+    __ sve_sminv(v26, __ H, p0, z15);                  \/\/   sminv h26, p0, z15.h\n+    __ sve_fminv(v3, __ D, p6, z7);                    \/\/   fminv d3, p6, z7.d\n+    __ sve_fmaxv(v21, __ D, p6, z26);                  \/\/   fmaxv d21, p6, z26.d\n+    __ sve_fadda(v22, __ S, p0, z4);                   \/\/   fadda s22, p0, s22, z4.s\n+    __ sve_uaddv(v16, __ H, p0, z3);                   \/\/   uaddv d16, p0, z3.h\n@@ -855,620 +855,620 @@\n-   0:   8b0d82fa        add     x26, x23, x13, lsl #32\n-   4:   cb49970c        sub     x12, x24, x9, lsr #37\n-   8:   ab889dfc        adds    x28, x15, x8, asr #39\n-   c:   eb9ee787        subs    x7, x28, x30, asr #57\n-  10:   0b9b3ec9        add     w9, w22, w27, asr #15\n-  14:   4b9279a3        sub     w3, w13, w18, asr #30\n-  18:   2b88474e        adds    w14, w26, w8, asr #17\n-  1c:   6b8c56c0        subs    w0, w22, w12, asr #21\n-  20:   8a1a51e0        and     x0, x15, x26, lsl #20\n-  24:   aa11f4ba        orr     x26, x5, x17, lsl #61\n-  28:   ca0281b8        eor     x24, x13, x2, lsl #32\n-  2c:   ea918c7c        ands    x28, x3, x17, asr #35\n-  30:   0a5d4a19        and     w25, w16, w29, lsr #18\n-  34:   2a4b264d        orr     w13, w18, w11, lsr #9\n-  38:   4a523ca5        eor     w5, w5, w18, lsr #15\n-  3c:   6a9b6ae2        ands    w2, w23, w27, asr #26\n-  40:   8a70b79b        bic     x27, x28, x16, lsr #45\n-  44:   aaba9728        orn     x8, x25, x26, asr #37\n-  48:   ca6dfe3d        eon     x29, x17, x13, lsr #63\n-  4c:   ea627f1c        bics    x28, x24, x2, lsr #31\n-  50:   0aa70f53        bic     w19, w26, w7, asr #3\n-  54:   2aaa0f06        orn     w6, w24, w10, asr #3\n-  58:   4a6176a4        eon     w4, w21, w1, lsr #29\n-  5c:   6a604eb0        bics    w16, w21, w0, lsr #19\n-  60:   1105ed91        add     w17, w12, #0x17b\n-  64:   3100583e        adds    w30, w1, #0x16\n-  68:   5101f8bd        sub     w29, w5, #0x7e\n-  6c:   710f0306        subs    w6, w24, #0x3c0\n-  70:   9101a1a0        add     x0, x13, #0x68\n-  74:   b10a5cc8        adds    x8, x6, #0x297\n-  78:   d10810aa        sub     x10, x5, #0x204\n-  7c:   f10fd061        subs    x1, x3, #0x3f4\n-  80:   120cb166        and     w6, w11, #0xfff1fff1\n-  84:   321764bc        orr     w28, w5, #0xfffffe07\n-  88:   52174681        eor     w1, w20, #0x7fffe00\n-  8c:   720c0247        ands    w7, w18, #0x100000\n-  90:   9241018e        and     x14, x12, #0x8000000000000000\n-  94:   b25a2969        orr     x9, x11, #0x1ffc000000000\n-  98:   d278b411        eor     x17, x0, #0x3fffffffffff00\n-  9c:   f26aad01        ands    x1, x8, #0xffffffffffc00003\n-  a0:   14000000        b       a0 <back+0xa0>\n-  a4:   17ffffd7        b       0 <back>\n-  a8:   14000242        b       9b0 <forth>\n-  ac:   94000000        bl      ac <back+0xac>\n-  b0:   97ffffd4        bl      0 <back>\n-  b4:   9400023f        bl      9b0 <forth>\n-  b8:   3400000a        cbz     w10, b8 <back+0xb8>\n-  bc:   34fffa2a        cbz     w10, 0 <back>\n-  c0:   3400478a        cbz     w10, 9b0 <forth>\n-  c4:   35000008        cbnz    w8, c4 <back+0xc4>\n-  c8:   35fff9c8        cbnz    w8, 0 <back>\n-  cc:   35004728        cbnz    w8, 9b0 <forth>\n-  d0:   b400000b        cbz     x11, d0 <back+0xd0>\n-  d4:   b4fff96b        cbz     x11, 0 <back>\n-  d8:   b40046cb        cbz     x11, 9b0 <forth>\n-  dc:   b500001d        cbnz    x29, dc <back+0xdc>\n-  e0:   b5fff91d        cbnz    x29, 0 <back>\n-  e4:   b500467d        cbnz    x29, 9b0 <forth>\n-  e8:   10000013        adr     x19, e8 <back+0xe8>\n-  ec:   10fff8b3        adr     x19, 0 <back>\n-  f0:   10004613        adr     x19, 9b0 <forth>\n-  f4:   90000013        adrp    x19, 0 <back>\n-  f8:   36300016        tbz     w22, #6, f8 <back+0xf8>\n-  fc:   3637f836        tbz     w22, #6, 0 <back>\n- 100:   36304596        tbz     w22, #6, 9b0 <forth>\n- 104:   3758000c        tbnz    w12, #11, 104 <back+0x104>\n- 108:   375ff7cc        tbnz    w12, #11, 0 <back>\n- 10c:   3758452c        tbnz    w12, #11, 9b0 <forth>\n- 110:   128313a0        mov     w0, #0xffffe762                 \/\/ #-6302\n- 114:   528a32c7        mov     w7, #0x5196                     \/\/ #20886\n- 118:   7289173b        movk    w27, #0x48b9\n- 11c:   92ab3acc        mov     x12, #0xffffffffa629ffff        \/\/ #-1507196929\n- 120:   d2a0bf94        mov     x20, #0x5fc0000                 \/\/ #100401152\n- 124:   f2c285e8        movk    x8, #0x142f, lsl #32\n- 128:   9358722f        sbfx    x15, x17, #24, #5\n- 12c:   330e652f        bfxil   w15, w9, #14, #12\n- 130:   53067f3b        lsr     w27, w25, #6\n- 134:   93577c53        sbfx    x19, x2, #23, #9\n- 138:   b34a1aac        bfi     x12, x21, #54, #7\n- 13c:   d35a4016        ubfiz   x22, x0, #38, #17\n- 140:   13946c63        extr    w3, w3, w20, #27\n- 144:   93c3dbc8        extr    x8, x30, x3, #54\n- 148:   54000000        b.eq    148 <back+0x148>  \/\/ b.none\n- 14c:   54fff5a0        b.eq    0 <back>  \/\/ b.none\n- 150:   54004300        b.eq    9b0 <forth>  \/\/ b.none\n- 154:   54000001        b.ne    154 <back+0x154>  \/\/ b.any\n- 158:   54fff541        b.ne    0 <back>  \/\/ b.any\n- 15c:   540042a1        b.ne    9b0 <forth>  \/\/ b.any\n- 160:   54000002        b.cs    160 <back+0x160>  \/\/ b.hs, b.nlast\n- 164:   54fff4e2        b.cs    0 <back>  \/\/ b.hs, b.nlast\n- 168:   54004242        b.cs    9b0 <forth>  \/\/ b.hs, b.nlast\n- 16c:   54000002        b.cs    16c <back+0x16c>  \/\/ b.hs, b.nlast\n- 170:   54fff482        b.cs    0 <back>  \/\/ b.hs, b.nlast\n- 174:   540041e2        b.cs    9b0 <forth>  \/\/ b.hs, b.nlast\n- 178:   54000003        b.cc    178 <back+0x178>  \/\/ b.lo, b.ul, b.last\n- 17c:   54fff423        b.cc    0 <back>  \/\/ b.lo, b.ul, b.last\n- 180:   54004183        b.cc    9b0 <forth>  \/\/ b.lo, b.ul, b.last\n- 184:   54000003        b.cc    184 <back+0x184>  \/\/ b.lo, b.ul, b.last\n- 188:   54fff3c3        b.cc    0 <back>  \/\/ b.lo, b.ul, b.last\n- 18c:   54004123        b.cc    9b0 <forth>  \/\/ b.lo, b.ul, b.last\n- 190:   54000004        b.mi    190 <back+0x190>  \/\/ b.first\n- 194:   54fff364        b.mi    0 <back>  \/\/ b.first\n- 198:   540040c4        b.mi    9b0 <forth>  \/\/ b.first\n- 19c:   54000005        b.pl    19c <back+0x19c>  \/\/ b.nfrst\n- 1a0:   54fff305        b.pl    0 <back>  \/\/ b.nfrst\n- 1a4:   54004065        b.pl    9b0 <forth>  \/\/ b.nfrst\n- 1a8:   54000006        b.vs    1a8 <back+0x1a8>\n- 1ac:   54fff2a6        b.vs    0 <back>\n- 1b0:   54004006        b.vs    9b0 <forth>\n- 1b4:   54000007        b.vc    1b4 <back+0x1b4>\n- 1b8:   54fff247        b.vc    0 <back>\n- 1bc:   54003fa7        b.vc    9b0 <forth>\n- 1c0:   54000008        b.hi    1c0 <back+0x1c0>  \/\/ b.pmore\n- 1c4:   54fff1e8        b.hi    0 <back>  \/\/ b.pmore\n- 1c8:   54003f48        b.hi    9b0 <forth>  \/\/ b.pmore\n- 1cc:   54000009        b.ls    1cc <back+0x1cc>  \/\/ b.plast\n- 1d0:   54fff189        b.ls    0 <back>  \/\/ b.plast\n- 1d4:   54003ee9        b.ls    9b0 <forth>  \/\/ b.plast\n- 1d8:   5400000a        b.ge    1d8 <back+0x1d8>  \/\/ b.tcont\n- 1dc:   54fff12a        b.ge    0 <back>  \/\/ b.tcont\n- 1e0:   54003e8a        b.ge    9b0 <forth>  \/\/ b.tcont\n- 1e4:   5400000b        b.lt    1e4 <back+0x1e4>  \/\/ b.tstop\n- 1e8:   54fff0cb        b.lt    0 <back>  \/\/ b.tstop\n- 1ec:   54003e2b        b.lt    9b0 <forth>  \/\/ b.tstop\n- 1f0:   5400000c        b.gt    1f0 <back+0x1f0>\n- 1f4:   54fff06c        b.gt    0 <back>\n- 1f8:   54003dcc        b.gt    9b0 <forth>\n- 1fc:   5400000d        b.le    1fc <back+0x1fc>\n- 200:   54fff00d        b.le    0 <back>\n- 204:   54003d6d        b.le    9b0 <forth>\n- 208:   5400000e        b.al    208 <back+0x208>\n- 20c:   54ffefae        b.al    0 <back>\n- 210:   54003d0e        b.al    9b0 <forth>\n- 214:   5400000f        b.nv    214 <back+0x214>\n- 218:   54ffef4f        b.nv    0 <back>\n- 21c:   54003caf        b.nv    9b0 <forth>\n- 220:   d40658e1        svc     #0x32c7\n- 224:   d4014d22        hvc     #0xa69\n- 228:   d4046543        smc     #0x232a\n- 22c:   d4273f60        brk     #0x39fb\n- 230:   d44cad80        hlt     #0x656c\n- 234:   d503201f        nop\n- 238:   d69f03e0        eret\n- 23c:   d6bf03e0        drps\n- 240:   d5033fdf        isb\n- 244:   d5033e9f        dsb     st\n- 248:   d50332bf        dmb     oshst\n- 24c:   d61f0200        br      x16\n- 250:   d63f0280        blr     x20\n- 254:   c80a7d1b        stxr    w10, x27, [x8]\n- 258:   c800fea1        stlxr   w0, x1, [x21]\n- 25c:   c85f7fb1        ldxr    x17, [x29]\n- 260:   c85fff9d        ldaxr   x29, [x28]\n- 264:   c89ffee1        stlr    x1, [x23]\n- 268:   c8dffe95        ldar    x21, [x20]\n- 26c:   88167e7b        stxr    w22, w27, [x19]\n- 270:   880bfcd0        stlxr   w11, w16, [x6]\n- 274:   885f7c12        ldxr    w18, [x0]\n- 278:   885ffd44        ldaxr   w4, [x10]\n- 27c:   889ffed8        stlr    w24, [x22]\n- 280:   88dffe6a        ldar    w10, [x19]\n- 284:   48017fc5        stxrh   w1, w5, [x30]\n- 288:   4808fe2c        stlxrh  w8, w12, [x17]\n- 28c:   485f7dc9        ldxrh   w9, [x14]\n- 290:   485ffc27        ldaxrh  w7, [x1]\n- 294:   489ffe05        stlrh   w5, [x16]\n- 298:   48dffd82        ldarh   w2, [x12]\n- 29c:   080a7c6c        stxrb   w10, w12, [x3]\n- 2a0:   081cff4e        stlxrb  w28, w14, [x26]\n- 2a4:   085f7d5e        ldxrb   w30, [x10]\n- 2a8:   085ffeae        ldaxrb  w14, [x21]\n- 2ac:   089ffd2d        stlrb   w13, [x9]\n- 2b0:   08dfff76        ldarb   w22, [x27]\n- 2b4:   c87f4d7c        ldxp    x28, x19, [x11]\n- 2b8:   c87fcc5e        ldaxp   x30, x19, [x2]\n- 2bc:   c8220417        stxp    w2, x23, x1, [x0]\n- 2c0:   c82cb5f0        stlxp   w12, x16, x13, [x15]\n- 2c4:   887f55b2        ldxp    w18, w21, [x13]\n- 2c8:   887ff90b        ldaxp   w11, w30, [x8]\n- 2cc:   88382c2d        stxp    w24, w13, w11, [x1]\n- 2d0:   883aedb5        stlxp   w26, w21, w27, [x13]\n- 2d4:   f819928b        stur    x11, [x20, #-103]\n- 2d8:   b803e21c        stur    w28, [x16, #62]\n- 2dc:   381f713b        sturb   w27, [x9, #-9]\n- 2e0:   781ce322        sturh   w2, [x25, #-50]\n- 2e4:   f850f044        ldur    x4, [x2, #-241]\n- 2e8:   b85e129e        ldur    w30, [x20, #-31]\n- 2ec:   385e92f2        ldurb   w18, [x23, #-23]\n- 2f0:   785ff35d        ldurh   w29, [x26, #-1]\n- 2f4:   39801921        ldrsb   x1, [x9, #6]\n- 2f8:   7881318b        ldursh  x11, [x12, #19]\n- 2fc:   78dce02b        ldursh  w11, [x1, #-50]\n- 300:   b8829313        ldursw  x19, [x24, #41]\n- 304:   fc45f318        ldur    d24, [x24, #95]\n- 308:   bc5d50af        ldur    s15, [x5, #-43]\n- 30c:   fc001375        stur    d21, [x27, #1]\n- 310:   bc1951b7        stur    s23, [x13, #-107]\n- 314:   f8008c0b        str     x11, [x0, #8]!\n- 318:   b801dc03        str     w3, [x0, #29]!\n- 31c:   38009dcb        strb    w11, [x14, #9]!\n- 320:   781fdf1d        strh    w29, [x24, #-3]!\n- 324:   f8570e2d        ldr     x13, [x17, #-144]!\n- 328:   b85faecc        ldr     w12, [x22, #-6]!\n- 32c:   385f6d8d        ldrb    w13, [x12, #-10]!\n- 330:   785ebea0        ldrh    w0, [x21, #-21]!\n- 334:   38804cf7        ldrsb   x23, [x7, #4]!\n- 338:   789cbce3        ldrsh   x3, [x7, #-53]!\n- 33c:   78df9cbc        ldrsh   w28, [x5, #-7]!\n- 340:   b89eed38        ldrsw   x24, [x9, #-18]!\n- 344:   fc40cd6e        ldr     d14, [x11, #12]!\n- 348:   bc5bdd93        ldr     s19, [x12, #-67]!\n- 34c:   fc103c14        str     d20, [x0, #-253]!\n- 350:   bc040c08        str     s8, [x0, #64]!\n- 354:   f81a2784        str     x4, [x28], #-94\n- 358:   b81ca4ec        str     w12, [x7], #-54\n- 35c:   381e855b        strb    w27, [x10], #-24\n- 360:   7801b506        strh    w6, [x8], #27\n- 364:   f853654e        ldr     x14, [x10], #-202\n- 368:   b85d74b0        ldr     w16, [x5], #-41\n- 36c:   384095c2        ldrb    w2, [x14], #9\n- 370:   785ec5bc        ldrh    w28, [x13], #-20\n- 374:   389e15a9        ldrsb   x9, [x13], #-31\n- 378:   789dc703        ldrsh   x3, [x24], #-36\n- 37c:   78c06474        ldrsh   w20, [x3], #6\n- 380:   b89ff667        ldrsw   x7, [x19], #-1\n- 384:   fc57e51e        ldr     d30, [x8], #-130\n- 388:   bc4155f9        ldr     s25, [x15], #21\n- 38c:   fc05a6ee        str     d14, [x23], #90\n- 390:   bc1df408        str     s8, [x0], #-33\n- 394:   f835da4a        str     x10, [x18, w21, sxtw #3]\n- 398:   b836d9a4        str     w4, [x13, w22, sxtw #2]\n- 39c:   3833580d        strb    w13, [x0, w19, uxtw #0]\n- 3a0:   7826cb6c        strh    w12, [x27, w6, sxtw]\n- 3a4:   f8706900        ldr     x0, [x8, x16]\n- 3a8:   b87ae880        ldr     w0, [x4, x26, sxtx]\n- 3ac:   3865db2e        ldrb    w14, [x25, w5, sxtw #0]\n- 3b0:   78724889        ldrh    w9, [x4, w18, uxtw]\n- 3b4:   38a7789b        ldrsb   x27, [x4, x7, lsl #0]\n- 3b8:   78beca2f        ldrsh   x15, [x17, w30, sxtw]\n- 3bc:   78f6c810        ldrsh   w16, [x0, w22, sxtw]\n- 3c0:   b8bef956        ldrsw   x22, [x10, x30, sxtx #2]\n- 3c4:   fc6afabd        ldr     d29, [x21, x10, sxtx #3]\n- 3c8:   bc734963        ldr     s3, [x11, w19, uxtw]\n- 3cc:   fc3d5b8d        str     d13, [x28, w29, uxtw #3]\n- 3d0:   bc25fbb7        str     s23, [x29, x5, sxtx #2]\n- 3d4:   f9189d05        str     x5, [x8, #12600]\n- 3d8:   b91ecb1d        str     w29, [x24, #7880]\n- 3dc:   39187a33        strb    w19, [x17, #1566]\n- 3e0:   791f226d        strh    w13, [x19, #3984]\n- 3e4:   f95aa2f3        ldr     x19, [x23, #13632]\n- 3e8:   b9587bb7        ldr     w23, [x29, #6264]\n- 3ec:   395f7176        ldrb    w22, [x11, #2012]\n- 3f0:   795d9143        ldrh    w3, [x10, #3784]\n- 3f4:   399e7e08        ldrsb   x8, [x16, #1951]\n- 3f8:   799a2697        ldrsh   x23, [x20, #3346]\n- 3fc:   79df3422        ldrsh   w2, [x1, #3994]\n- 400:   b99c2624        ldrsw   x4, [x17, #7204]\n- 404:   fd5c2374        ldr     d20, [x27, #14400]\n- 408:   bd5fa1d9        ldr     s25, [x14, #8096]\n- 40c:   fd1d595a        str     d26, [x10, #15024]\n- 410:   bd1b1869        str     s9, [x3, #6936]\n- 414:   58002cfb        ldr     x27, 9b0 <forth>\n- 418:   1800000b        ldr     w11, 418 <back+0x418>\n- 41c:   f8945060        prfum   pldl1keep, [x3, #-187]\n- 420:   d8000000        prfm    pldl1keep, 420 <back+0x420>\n- 424:   f8ae6ba0        prfm    pldl1keep, [x29, x14]\n- 428:   f99a0080        prfm    pldl1keep, [x4, #13312]\n- 42c:   1a070035        adc     w21, w1, w7\n- 430:   3a0700a8        adcs    w8, w5, w7\n- 434:   5a0e0367        sbc     w7, w27, w14\n- 438:   7a11009b        sbcs    w27, w4, w17\n- 43c:   9a000380        adc     x0, x28, x0\n- 440:   ba1e030c        adcs    x12, x24, x30\n- 444:   da0f0320        sbc     x0, x25, x15\n- 448:   fa030301        sbcs    x1, x24, x3\n- 44c:   0b340b12        add     w18, w24, w20, uxtb #2\n- 450:   2b2a278d        adds    w13, w28, w10, uxth #1\n- 454:   cb22aa0f        sub     x15, x16, w2, sxth #2\n- 458:   6b2d29bd        subs    w29, w13, w13, uxth #2\n- 45c:   8b2cce8c        add     x12, x20, w12, sxtw #3\n- 460:   ab2b877e        adds    x30, x27, w11, sxtb #1\n- 464:   cb21c8ee        sub     x14, x7, w1, sxtw #2\n- 468:   eb3ba47d        subs    x29, x3, w27, sxth #1\n- 46c:   3a4d400e        ccmn    w0, w13, #0xe, mi  \/\/ mi = first\n- 470:   7a5232c6        ccmp    w22, w18, #0x6, cc  \/\/ cc = lo, ul, last\n- 474:   ba5e624e        ccmn    x18, x30, #0xe, vs\n- 478:   fa53814c        ccmp    x10, x19, #0xc, hi  \/\/ hi = pmore\n- 47c:   3a52d8c2        ccmn    w6, #0x12, #0x2, le\n- 480:   7a4d8924        ccmp    w9, #0xd, #0x4, hi  \/\/ hi = pmore\n- 484:   ba4b3aab        ccmn    x21, #0xb, #0xb, cc  \/\/ cc = lo, ul, last\n- 488:   fa4d7882        ccmp    x4, #0xd, #0x2, vc\n- 48c:   1a96804c        csel    w12, w2, w22, hi  \/\/ hi = pmore\n- 490:   1a912618        csinc   w24, w16, w17, cs  \/\/ cs = hs, nlast\n- 494:   5a90b0e6        csinv   w6, w7, w16, lt  \/\/ lt = tstop\n- 498:   5a96976b        csneg   w11, w27, w22, ls  \/\/ ls = plast\n- 49c:   9a9db06a        csel    x10, x3, x29, lt  \/\/ lt = tstop\n- 4a0:   9a9b374c        csinc   x12, x26, x27, cc  \/\/ cc = lo, ul, last\n- 4a4:   da95c14f        csinv   x15, x10, x21, gt\n- 4a8:   da89c6fe        csneg   x30, x23, x9, gt\n- 4ac:   5ac0015e        rbit    w30, w10\n- 4b0:   5ac005fd        rev16   w29, w15\n- 4b4:   5ac00bdd        rev     w29, w30\n- 4b8:   5ac012b9        clz     w25, w21\n- 4bc:   5ac01404        cls     w4, w0\n- 4c0:   dac002b2        rbit    x18, x21\n- 4c4:   dac0061d        rev16   x29, x16\n- 4c8:   dac00a95        rev32   x21, x20\n- 4cc:   dac00e66        rev     x6, x19\n- 4d0:   dac0107e        clz     x30, x3\n- 4d4:   dac01675        cls     x21, x19\n- 4d8:   1ac00b0b        udiv    w11, w24, w0\n- 4dc:   1ace0f3b        sdiv    w27, w25, w14\n- 4e0:   1ad221c3        lsl     w3, w14, w18\n- 4e4:   1ad825e7        lsr     w7, w15, w24\n- 4e8:   1ad92a3c        asr     w28, w17, w25\n- 4ec:   1adc2f42        ror     w2, w26, w28\n- 4f0:   9ada0b25        udiv    x5, x25, x26\n- 4f4:   9ad20e1b        sdiv    x27, x16, x18\n- 4f8:   9acc22a6        lsl     x6, x21, x12\n- 4fc:   9acc2480        lsr     x0, x4, x12\n- 500:   9adc2a3b        asr     x27, x17, x28\n- 504:   9ad22c5c        ror     x28, x2, x18\n- 508:   9bce7dea        umulh   x10, x15, x14\n- 50c:   9b597c6e        smulh   x14, x3, x25\n- 510:   1b0e166f        madd    w15, w19, w14, w5\n- 514:   1b1ae490        msub    w16, w4, w26, w25\n- 518:   9b023044        madd    x4, x2, x2, x12\n- 51c:   9b089e3d        msub    x29, x17, x8, x7\n- 520:   9b391083        smaddl  x3, w4, w25, x4\n- 524:   9b24c73a        smsubl  x26, w25, w4, x17\n- 528:   9bb15f40        umaddl  x0, w26, w17, x23\n- 52c:   9bbcc6af        umsubl  x15, w21, w28, x17\n- 530:   1e23095b        fmul    s27, s10, s3\n- 534:   1e3918e0        fdiv    s0, s7, s25\n- 538:   1e2f28c9        fadd    s9, s6, s15\n- 53c:   1e2a39fd        fsub    s29, s15, s10\n- 540:   1e270a22        fmul    s2, s17, s7\n- 544:   1e77096b        fmul    d11, d11, d23\n- 548:   1e771ba7        fdiv    d7, d29, d23\n- 54c:   1e6b2b6e        fadd    d14, d27, d11\n- 550:   1e78388b        fsub    d11, d4, d24\n- 554:   1e6e09ec        fmul    d12, d15, d14\n- 558:   1f1c3574        fmadd   s20, s11, s28, s13\n- 55c:   1f17f98b        fmsub   s11, s12, s23, s30\n- 560:   1f2935da        fnmadd  s26, s14, s9, s13\n- 564:   1f2574ea        fnmadd  s10, s7, s5, s29\n- 568:   1f4b306f        fmadd   d15, d3, d11, d12\n- 56c:   1f5ec7cf        fmsub   d15, d30, d30, d17\n- 570:   1f6f3e93        fnmadd  d19, d20, d15, d15\n- 574:   1f6226a9        fnmadd  d9, d21, d2, d9\n- 578:   1e2040fb        fmov    s27, s7\n- 57c:   1e20c3dd        fabs    s29, s30\n- 580:   1e214031        fneg    s17, s1\n- 584:   1e21c0c2        fsqrt   s2, s6\n- 588:   1e22c06a        fcvt    d10, s3\n- 58c:   1e604178        fmov    d24, d11\n- 590:   1e60c027        fabs    d7, d1\n- 594:   1e61400b        fneg    d11, d0\n- 598:   1e61c243        fsqrt   d3, d18\n- 59c:   1e6240dc        fcvt    s28, d6\n- 5a0:   1e3800d6        fcvtzs  w22, s6\n- 5a4:   9e380360        fcvtzs  x0, s27\n- 5a8:   1e78005a        fcvtzs  w26, d2\n- 5ac:   9e7800e5        fcvtzs  x5, d7\n- 5b0:   1e22017c        scvtf   s28, w11\n- 5b4:   9e2201b9        scvtf   s25, x13\n- 5b8:   1e6202eb        scvtf   d11, w23\n- 5bc:   9e620113        scvtf   d19, x8\n- 5c0:   1e2602b2        fmov    w18, s21\n- 5c4:   9e660299        fmov    x25, d20\n- 5c8:   1e270253        fmov    s19, w18\n- 5cc:   9e6703a2        fmov    d2, x29\n- 5d0:   1e2822c0        fcmp    s22, s8\n- 5d4:   1e7322a0        fcmp    d21, d19\n- 5d8:   1e202288        fcmp    s20, #0.0\n- 5dc:   1e602168        fcmp    d11, #0.0\n- 5e0:   293c19f4        stp     w20, w6, [x15, #-32]\n- 5e4:   2966387b        ldp     w27, w14, [x3, #-208]\n- 5e8:   69762971        ldpsw   x17, x10, [x11, #-80]\n- 5ec:   a9041dc7        stp     x7, x7, [x14, #64]\n- 5f0:   a9475c0c        ldp     x12, x23, [x0, #112]\n- 5f4:   29b61ccd        stp     w13, w7, [x6, #-80]!\n- 5f8:   29ee405e        ldp     w30, w16, [x2, #-144]!\n- 5fc:   69ee0744        ldpsw   x4, x1, [x26, #-144]!\n- 600:   a9843977        stp     x23, x14, [x11, #64]!\n- 604:   a9f46ebd        ldp     x29, x27, [x21, #-192]!\n- 608:   28ba16b6        stp     w22, w5, [x21], #-48\n- 60c:   28fc44db        ldp     w27, w17, [x6], #-32\n- 610:   68f61831        ldpsw   x17, x6, [x1], #-80\n- 614:   a8b352ad        stp     x13, x20, [x21], #-208\n- 618:   a8c56d5e        ldp     x30, x27, [x10], #80\n- 61c:   28024565        stnp    w5, w17, [x11, #16]\n- 620:   2874134e        ldnp    w14, w4, [x26, #-96]\n- 624:   a8027597        stnp    x23, x29, [x12, #32]\n- 628:   a87b1aa0        ldnp    x0, x6, [x21, #-80]\n- 62c:   0c40734f        ld1     {v15.8b}, [x26]\n- 630:   4cdfa177        ld1     {v23.16b, v24.16b}, [x11], #32\n- 634:   0cc76ee8        ld1     {v8.1d-v10.1d}, [x23], x7\n- 638:   4cdf2733        ld1     {v19.8h-v22.8h}, [x25], #64\n- 63c:   0d40c23d        ld1r    {v29.8b}, [x17]\n- 640:   4ddfcaf8        ld1r    {v24.4s}, [x23], #4\n- 644:   0dd9ccaa        ld1r    {v10.1d}, [x5], x25\n- 648:   4c408d52        ld2     {v18.2d, v19.2d}, [x10]\n- 64c:   0cdf85ec        ld2     {v12.4h, v13.4h}, [x15], #16\n- 650:   4d60c259        ld2r    {v25.16b, v26.16b}, [x18]\n- 654:   0dffcbc1        ld2r    {v1.2s, v2.2s}, [x30], #8\n- 658:   4de9ce50        ld2r    {v16.2d, v17.2d}, [x18], x9\n- 65c:   4cc24999        ld3     {v25.4s-v27.4s}, [x12], x2\n- 660:   0c404a7a        ld3     {v26.2s-v28.2s}, [x19]\n- 664:   4d40e6af        ld3r    {v15.8h-v17.8h}, [x21]\n- 668:   4ddfe9b9        ld3r    {v25.4s-v27.4s}, [x13], #12\n- 66c:   0dddef8e        ld3r    {v14.1d-v16.1d}, [x28], x29\n- 670:   4cdf07b1        ld4     {v17.8h-v20.8h}, [x29], #64\n- 674:   0cc000fb        ld4     {v27.8b-v30.8b}, [x7], x0\n- 678:   0d60e258        ld4r    {v24.8b-v27.8b}, [x18]\n- 67c:   0dffe740        ld4r    {v0.4h-v3.4h}, [x26], #8\n- 680:   0de2eb2c        ld4r    {v12.2s-v15.2s}, [x25], x2\n- 684:   ce648376        sha512h q22, q27, v4.2d\n- 688:   ce6184c7        sha512h2        q7, q6, v1.2d\n- 68c:   cec081fa        sha512su0       v26.2d, v15.2d\n- 690:   ce6d89a2        sha512su1       v2.2d, v13.2d, v13.2d\n- 694:   ba5fd3e3        ccmn    xzr, xzr, #0x3, le\n- 698:   3a5f03e5        ccmn    wzr, wzr, #0x5, eq  \/\/ eq = none\n- 69c:   fa411be4        ccmp    xzr, #0x1, #0x4, ne  \/\/ ne = any\n- 6a0:   7a42cbe2        ccmp    wzr, #0x2, #0x2, gt\n- 6a4:   93df03ff        ror     xzr, xzr, #0\n- 6a8:   c820ffff        stlxp   w0, xzr, xzr, [sp]\n- 6ac:   8822fc7f        stlxp   w2, wzr, wzr, [x3]\n- 6b0:   c8247cbf        stxp    w4, xzr, xzr, [x5]\n- 6b4:   88267fff        stxp    w6, wzr, wzr, [sp]\n- 6b8:   4e010fe0        dup     v0.16b, wzr\n- 6bc:   4e081fe1        mov     v1.d[0], xzr\n- 6c0:   4e0c1fe1        mov     v1.s[1], wzr\n- 6c4:   4e0a1fe1        mov     v1.h[2], wzr\n- 6c8:   4e071fe1        mov     v1.b[3], wzr\n- 6cc:   4cc0ac3f        ld1     {v31.2d, v0.2d}, [x1], x0\n- 6d0:   05a08020        mov     z0.s, p0\/m, s1\n- 6d4:   04b0e3e0        incw    x0\n- 6d8:   0470e7e1        dech    x1\n- 6dc:   042f9c20        lsl     z0.b, z1.b, #7\n- 6e0:   043f9c35        lsl     z21.h, z1.h, #15\n- 6e4:   047f9c20        lsl     z0.s, z1.s, #31\n- 6e8:   04ff9c20        lsl     z0.d, z1.d, #63\n- 6ec:   04299420        lsr     z0.b, z1.b, #7\n- 6f0:   04319160        asr     z0.h, z11.h, #15\n- 6f4:   0461943e        lsr     z30.s, z1.s, #31\n- 6f8:   04a19020        asr     z0.d, z1.d, #63\n- 6fc:   042053ff        addvl   sp, x0, #31\n- 700:   047f5401        addpl   x1, sp, #-32\n- 704:   25208028        cntp    x8, p0, p1.b\n- 708:   2538cfe0        mov     z0.b, #127\n- 70c:   2578d001        mov     z1.h, #-128\n- 710:   25b8efe2        mov     z2.s, #32512\n- 714:   25f8f007        mov     z7.d, #-32768\n- 718:   a400a3e0        ld1b    {z0.b}, p0\/z, [sp]\n- 71c:   a4a8a7ea        ld1h    {z10.h}, p1\/z, [sp, #-8, mul vl]\n- 720:   a547a814        ld1w    {z20.s}, p2\/z, [x0, #7, mul vl]\n- 724:   a4084ffe        ld1b    {z30.b}, p3\/z, [sp, x8]\n- 728:   a55c53e0        ld1w    {z0.s}, p4\/z, [sp, x28, lsl #2]\n- 72c:   a5e1540b        ld1d    {z11.d}, p5\/z, [x0, x1, lsl #3]\n- 730:   e400fbf6        st1b    {z22.b}, p6, [sp]\n- 734:   e408ffff        st1b    {z31.b}, p7, [sp, #-8, mul vl]\n- 738:   e547e400        st1w    {z0.s}, p1, [x0, #7, mul vl]\n- 73c:   e4014be0        st1b    {z0.b}, p2, [sp, x1]\n- 740:   e4a84fe0        st1h    {z0.h}, p3, [sp, x8, lsl #1]\n- 744:   e5f25000        st1d    {z0.d}, p4, [x0, x18, lsl #3]\n- 748:   858043e0        ldr     z0, [sp]\n- 74c:   85a043ff        ldr     z31, [sp, #-256, mul vl]\n- 750:   e59f5d08        str     z8, [x8, #255, mul vl]\n- 754:   1e601000        fmov    d0, #2.000000000000000000e+00\n- 758:   1e603000        fmov    d0, #2.125000000000000000e+00\n- 75c:   1e621000        fmov    d0, #4.000000000000000000e+00\n- 760:   1e623000        fmov    d0, #4.250000000000000000e+00\n- 764:   1e641000        fmov    d0, #8.000000000000000000e+00\n- 768:   1e643000        fmov    d0, #8.500000000000000000e+00\n- 76c:   1e661000        fmov    d0, #1.600000000000000000e+01\n- 770:   1e663000        fmov    d0, #1.700000000000000000e+01\n- 774:   1e681000        fmov    d0, #1.250000000000000000e-01\n- 778:   1e683000        fmov    d0, #1.328125000000000000e-01\n- 77c:   1e6a1000        fmov    d0, #2.500000000000000000e-01\n- 780:   1e6a3000        fmov    d0, #2.656250000000000000e-01\n- 784:   1e6c1000        fmov    d0, #5.000000000000000000e-01\n- 788:   1e6c3000        fmov    d0, #5.312500000000000000e-01\n- 78c:   1e6e1000        fmov    d0, #1.000000000000000000e+00\n- 790:   1e6e3000        fmov    d0, #1.062500000000000000e+00\n- 794:   1e701000        fmov    d0, #-2.000000000000000000e+00\n- 798:   1e703000        fmov    d0, #-2.125000000000000000e+00\n- 79c:   1e721000        fmov    d0, #-4.000000000000000000e+00\n- 7a0:   1e723000        fmov    d0, #-4.250000000000000000e+00\n- 7a4:   1e741000        fmov    d0, #-8.000000000000000000e+00\n- 7a8:   1e743000        fmov    d0, #-8.500000000000000000e+00\n- 7ac:   1e761000        fmov    d0, #-1.600000000000000000e+01\n- 7b0:   1e763000        fmov    d0, #-1.700000000000000000e+01\n- 7b4:   1e781000        fmov    d0, #-1.250000000000000000e-01\n- 7b8:   1e783000        fmov    d0, #-1.328125000000000000e-01\n- 7bc:   1e7a1000        fmov    d0, #-2.500000000000000000e-01\n- 7c0:   1e7a3000        fmov    d0, #-2.656250000000000000e-01\n- 7c4:   1e7c1000        fmov    d0, #-5.000000000000000000e-01\n- 7c8:   1e7c3000        fmov    d0, #-5.312500000000000000e-01\n- 7cc:   1e7e1000        fmov    d0, #-1.000000000000000000e+00\n- 7d0:   1e7e3000        fmov    d0, #-1.062500000000000000e+00\n- 7d4:   f8388098        swp     x24, x24, [x4]\n- 7d8:   f8340010        ldadd   x20, x16, [x0]\n- 7dc:   f8241175        ldclr   x4, x21, [x11]\n- 7e0:   f83e22d0        ldeor   x30, x16, [x22]\n- 7e4:   f82432ef        ldset   x4, x15, [x23]\n- 7e8:   f83a5186        ldsmin  x26, x6, [x12]\n- 7ec:   f82f41ee        ldsmax  x15, x14, [x15]\n- 7f0:   f82973b9        ldumin  x9, x25, [x29]\n- 7f4:   f82b6194        ldumax  x11, x20, [x12]\n- 7f8:   f8b28216        swpa    x18, x22, [x16]\n- 7fc:   f8b50358        ldadda  x21, x24, [x26]\n- 800:   f8a61206        ldclra  x6, x6, [x16]\n- 804:   f8b02219        ldeora  x16, x25, [x16]\n- 808:   f8bc3218        ldseta  x28, x24, [x16]\n- 80c:   f8ba514f        ldsmina x26, x15, [x10]\n- 810:   f8ad428e        ldsmaxa x13, x14, [x20]\n- 814:   f8a173d7        ldumina x1, x23, [x30]\n- 818:   f8ae60c2        ldumaxa x14, x2, [x6]\n- 81c:   f8e38328        swpal   x3, x8, [x25]\n- 820:   f8e003db        ldaddal x0, x27, [x30]\n- 824:   f8e513c5        ldclral x5, x5, [x30]\n- 828:   f8eb2019        ldeoral x11, x25, [x0]\n- 82c:   f8ff3260        ldsetal xzr, x0, [x19]\n- 830:   f8fd513a        ldsminal        x29, x26, [x9]\n- 834:   f8fa41ec        ldsmaxal        x26, x12, [x15]\n- 838:   f8eb724b        lduminal        x11, x11, [x18]\n- 83c:   f8f96316        ldumaxal        x25, x22, [x24]\n- 840:   f8608171        swpl    x0, x17, [x11]\n- 844:   f86600dd        ldaddl  x6, x29, [x6]\n- 848:   f86512a5        ldclrl  x5, x5, [x21]\n- 84c:   f8732250        ldeorl  x19, x16, [x18]\n- 850:   f87e339b        ldsetl  x30, x27, [x28]\n- 854:   f861503c        ldsminl x1, x28, [x1]\n- 858:   f874421d        ldsmaxl x20, x29, [x16]\n- 85c:   f86d73aa        lduminl x13, x10, [x29]\n- 860:   f87d62d3        ldumaxl x29, x19, [x22]\n- 864:   b82a83e4        swp     w10, w4, [sp]\n- 868:   b83503e8        ldadd   w21, w8, [sp]\n- 86c:   b833138a        ldclr   w19, w10, [x28]\n- 870:   b82220b9        ldeor   w2, w25, [x5]\n- 874:   b82332c8        ldset   w3, w8, [x22]\n- 878:   b83350ad        ldsmin  w19, w13, [x5]\n- 87c:   b83d42b8        ldsmax  w29, w24, [x21]\n- 880:   b83a7078        ldumin  w26, w24, [x3]\n- 884:   b83862fa        ldumax  w24, w26, [x23]\n- 888:   b8af8075        swpa    w15, w21, [x3]\n- 88c:   b8b80328        ldadda  w24, w8, [x25]\n- 890:   b8b41230        ldclra  w20, w16, [x17]\n- 894:   b8a22001        ldeora  w2, w1, [x0]\n- 898:   b8b83064        ldseta  w24, w4, [x3]\n- 89c:   b8ac539f        ldsmina w12, wzr, [x28]\n- 8a0:   b8aa405a        ldsmaxa w10, w26, [x2]\n- 8a4:   b8ac73f2        ldumina w12, w18, [sp]\n- 8a8:   b8a163ad        ldumaxa w1, w13, [x29]\n- 8ac:   b8e08193        swpal   w0, w19, [x12]\n- 8b0:   b8f101b6        ldaddal w17, w22, [x13]\n- 8b4:   b8fc13fe        ldclral w28, w30, [sp]\n- 8b8:   b8e1239a        ldeoral w1, w26, [x28]\n- 8bc:   b8e4309e        ldsetal w4, w30, [x4]\n- 8c0:   b8e6535e        ldsminal        w6, w30, [x26]\n- 8c4:   b8f24109        ldsmaxal        w18, w9, [x8]\n- 8c8:   b8ec7280        lduminal        w12, w0, [x20]\n- 8cc:   b8e16058        ldumaxal        w1, w24, [x2]\n- 8d0:   b8608309        swpl    w0, w9, [x24]\n- 8d4:   b87a03d0        ldaddl  w26, w16, [x30]\n- 8d8:   b86312ea        ldclrl  w3, w10, [x23]\n- 8dc:   b86a2244        ldeorl  w10, w4, [x18]\n- 8e0:   b862310b        ldsetl  w2, w11, [x8]\n- 8e4:   b86a522f        ldsminl w10, w15, [x17]\n- 8e8:   b862418a        ldsmaxl w2, w10, [x12]\n- 8ec:   b86c71af        lduminl w12, w15, [x13]\n- 8f0:   b8626287        ldumaxl w2, w7, [x20]\n- 8f4:   042401f9        add     z25.b, z15.b, z4.b\n- 8f8:   04b10564        sub     z4.s, z11.s, z17.s\n- 8fc:   65ca0230        fadd    z16.d, z17.d, z10.d\n- 900:   65d90996        fmul    z22.d, z12.d, z25.d\n- 904:   65ca05dc        fsub    z28.d, z14.d, z10.d\n- 908:   0456afc1        abs     z1.h, p3\/m, z30.h\n- 90c:   0400044f        add     z15.b, p1\/m, z15.b, z2.b\n- 910:   0490920d        asr     z13.s, p4\/m, z13.s, z16.s\n- 914:   04daa163        cnt     z3.d, p0\/m, z11.d\n- 918:   04d389c5        lsl     z5.d, p2\/m, z5.d, z14.d\n- 91c:   0411829d        lsr     z29.b, p0\/m, z29.b, z20.b\n- 920:   04901774        mul     z20.s, p5\/m, z20.s, z27.s\n- 924:   0417b89a        neg     z26.b, p6\/m, z4.b\n- 928:   041eb3d6        not     z22.b, p4\/m, z30.b\n- 92c:   04480b6b        smax    z11.h, p2\/m, z11.h, z27.h\n- 930:   048a17dc        smin    z28.s, p5\/m, z28.s, z30.s\n- 934:   048105be        sub     z30.s, p1\/m, z30.s, z13.s\n- 938:   04dcb35e        fabs    z30.d, p4\/m, z26.d\n- 93c:   65808d6f        fadd    z15.s, p3\/m, z15.s, z11.s\n- 940:   65cd9e06        fdiv    z6.d, p7\/m, z6.d, z16.d\n- 944:   65869cfb        fmax    z27.s, p7\/m, z27.s, z7.s\n- 948:   65c78893        fmin    z19.d, p2\/m, z19.d, z4.d\n- 94c:   658292d1        fmul    z17.s, p4\/m, z17.s, z22.s\n- 950:   04ddaebc        fneg    z28.d, p3\/m, z21.d\n- 954:   6582b452        frintm  z18.s, p5\/m, z2.s\n- 958:   6580ade6        frintn  z6.s, p3\/m, z15.s\n- 95c:   65c1b42c        frintp  z12.d, p5\/m, z1.d\n- 960:   658da632        fsqrt   z18.s, p1\/m, z17.s\n- 964:   658195af        fsub    z15.s, p5\/m, z15.s, z13.s\n- 968:   65eb1f74        fmla    z20.d, p7\/m, z27.d, z11.d\n- 96c:   65f723c3        fmls    z3.d, p0\/m, z30.d, z23.d\n- 970:   65ba4b71        fnmla   z17.s, p2\/m, z27.s, z26.s\n- 974:   65fe76c6        fnmls   z6.d, p5\/m, z22.d, z30.d\n- 978:   04525f42        mla     z2.h, p7\/m, z26.h, z18.h\n- 97c:   04117056        mls     z22.b, p4\/m, z2.b, z17.b\n- 980:   04363338        and     z24.d, z25.d, z22.d\n- 984:   04a33192        eor     z18.d, z12.d, z3.d\n- 988:   0470339d        orr     z29.d, z28.d, z16.d\n- 98c:   049a2b86        andv    s6, p2, z28.s\n- 990:   045824e7        orv     h7, p1, z7.h\n- 994:   04193509        eorv    b9, p5, z8.b\n- 998:   040837db        smaxv   b27, p5, z30.b\n- 99c:   044a221a        sminv   h26, p0, z16.h\n- 9a0:   65c73903        fminv   d3, p6, z8.d\n- 9a4:   65c63b55        fmaxv   d21, p6, z26.d\n- 9a8:   65982096        fadda   s22, p0, s22, z4.s\n- 9ac:   04412071        uaddv   d17, p0, z3.h\n+   0:   8b0c82d9    add x25, x22, x12, lsl #32\n+   4:   cb4896eb    sub x11, x23, x8, lsr #37\n+   8:   ab889ddb    adds    x27, x14, x8, asr #39\n+   c:   eb9de767    subs    x7, x27, x29, asr #57\n+  10:   0b9b3ec8    add w8, w22, w27, asr #15\n+  14:   4b917982    sub w2, w12, w17, asr #30\n+  18:   2b87474d    adds    w13, w26, w7, asr #17\n+  1c:   6b8b56a0    subs    w0, w21, w11, asr #21\n+  20:   8a1a51c0    and x0, x14, x26, lsl #20\n+  24:   aa10f4ba    orr x26, x5, x16, lsl #61\n+  28:   ca028198    eor x24, x12, x2, lsl #32\n+  2c:   ea8f8c7c    ands    x28, x3, x15, asr #35\n+  30:   0a5c49f8    and w24, w15, w28, lsr #18\n+  34:   2a4b262c    orr w12, w17, w11, lsr #9\n+  38:   4a513ca5    eor w5, w5, w17, lsr #15\n+  3c:   6a9a6ac2    ands    w2, w22, w26, asr #26\n+  40:   8a6fb77b    bic x27, x27, x15, lsr #45\n+  44:   aab99707    orn x7, x24, x25, asr #37\n+  48:   ca6dfe1c    eon x28, x16, x13, lsr #63\n+  4c:   ea627f1b    bics    x27, x24, x2, lsr #31\n+  50:   0aa70f33    bic w19, w25, w7, asr #3\n+  54:   2aa90f06    orn w6, w24, w9, asr #3\n+  58:   4a6176a4    eon w4, w21, w1, lsr #29\n+  5c:   6a604e8f    bics    w15, w20, w0, lsr #19\n+  60:   1105ed70    add w16, w11, #0x17b\n+  64:   3100583d    adds    w29, w1, #0x16\n+  68:   5101f8bc    sub w28, w5, #0x7e\n+  6c:   710f0306    subs    w6, w24, #0x3c0\n+  70:   9101a180    add x0, x12, #0x68\n+  74:   b10a5cc7    adds    x7, x6, #0x297\n+  78:   d10810aa    sub x10, x5, #0x204\n+  7c:   f10fd041    subs    x1, x2, #0x3f4\n+  80:   120cb145    and w5, w10, #0xfff1fff1\n+  84:   3217649b    orr w27, w4, #0xfffffe07\n+  88:   52174681    eor w1, w20, #0x7fffe00\n+  8c:   720c0227    ands    w7, w17, #0x100000\n+  90:   9241016d    and x13, x11, #0x8000000000000000\n+  94:   b25a2949    orr x9, x10, #0x1ffc000000000\n+  98:   d278b410    eor x16, x0, #0x3fffffffffff00\n+  9c:   f26aad01    ands    x1, x8, #0xffffffffffc00003\n+  a0:   14000000    b   a0 <back+0xa0>\n+  a4:   17ffffd7    b   0 <back>\n+  a8:   14000242    b   9b0 <forth>\n+  ac:   94000000    bl  ac <back+0xac>\n+  b0:   97ffffd4    bl  0 <back>\n+  b4:   9400023f    bl  9b0 <forth>\n+  b8:   3400000a    cbz w10, b8 <back+0xb8>\n+  bc:   34fffa2a    cbz w10, 0 <back>\n+  c0:   3400478a    cbz w10, 9b0 <forth>\n+  c4:   35000008    cbnz    w8, c4 <back+0xc4>\n+  c8:   35fff9c8    cbnz    w8, 0 <back>\n+  cc:   35004728    cbnz    w8, 9b0 <forth>\n+  d0:   b400000a    cbz x10, d0 <back+0xd0>\n+  d4:   b4fff96a    cbz x10, 0 <back>\n+  d8:   b40046ca    cbz x10, 9b0 <forth>\n+  dc:   b500001c    cbnz    x28, dc <back+0xdc>\n+  e0:   b5fff91c    cbnz    x28, 0 <back>\n+  e4:   b500467c    cbnz    x28, 9b0 <forth>\n+  e8:   10000013    adr x19, e8 <back+0xe8>\n+  ec:   10fff8b3    adr x19, 0 <back>\n+  f0:   10004613    adr x19, 9b0 <forth>\n+  f4:   90000013    adrp    x19, 0 <back>\n+  f8:   36300015    tbz w21, #6, f8 <back+0xf8>\n+  fc:   3637f835    tbz w21, #6, 0 <back>\n+ 100:   36304595    tbz w21, #6, 9b0 <forth>\n+ 104:   3758000c    tbnz    w12, #11, 104 <back+0x104>\n+ 108:   375ff7cc    tbnz    w12, #11, 0 <back>\n+ 10c:   3758452c    tbnz    w12, #11, 9b0 <forth>\n+ 110:   128313a0    mov w0, #0xffffe762             \/\/ #-6302\n+ 114:   528a32c6    mov w6, #0x5196                 \/\/ #20886\n+ 118:   7289173a    movk    w26, #0x48b9\n+ 11c:   92ab3acb    mov x11, #0xffffffffa629ffff        \/\/ #-1507196929\n+ 120:   d2a0bf94    mov x20, #0x5fc0000                 \/\/ #100401152\n+ 124:   f2c285e7    movk    x7, #0x142f, lsl #32\n+ 128:   9358720e    sbfx    x14, x16, #24, #5\n+ 12c:   330e652e    bfxil   w14, w9, #14, #12\n+ 130:   53067f1a    lsr w26, w24, #6\n+ 134:   93577c53    sbfx    x19, x2, #23, #9\n+ 138:   b34a1a8b    bfi x11, x20, #54, #7\n+ 13c:   d35a4015    ubfiz   x21, x0, #38, #17\n+ 140:   13936c62    extr    w2, w3, w19, #27\n+ 144:   93c2dba8    extr    x8, x29, x2, #54\n+ 148:   54000000    b.eq    148 <back+0x148>\n+ 14c:   54fff5a0    b.eq    0 <back>\n+ 150:   54004300    b.eq    9b0 <forth>\n+ 154:   54000001    b.ne    154 <back+0x154>\n+ 158:   54fff541    b.ne    0 <back>\n+ 15c:   540042a1    b.ne    9b0 <forth>\n+ 160:   54000002    b.cs    160 <back+0x160>\n+ 164:   54fff4e2    b.cs    0 <back>\n+ 168:   54004242    b.cs    9b0 <forth>\n+ 16c:   54000002    b.cs    16c <back+0x16c>\n+ 170:   54fff482    b.cs    0 <back>\n+ 174:   540041e2    b.cs    9b0 <forth>\n+ 178:   54000003    b.cc    178 <back+0x178>\n+ 17c:   54fff423    b.cc    0 <back>\n+ 180:   54004183    b.cc    9b0 <forth>\n+ 184:   54000003    b.cc    184 <back+0x184>\n+ 188:   54fff3c3    b.cc    0 <back>\n+ 18c:   54004123    b.cc    9b0 <forth>\n+ 190:   54000004    b.mi    190 <back+0x190>\n+ 194:   54fff364    b.mi    0 <back>\n+ 198:   540040c4    b.mi    9b0 <forth>\n+ 19c:   54000005    b.pl    19c <back+0x19c>\n+ 1a0:   54fff305    b.pl    0 <back>\n+ 1a4:   54004065    b.pl    9b0 <forth>\n+ 1a8:   54000006    b.vs    1a8 <back+0x1a8>\n+ 1ac:   54fff2a6    b.vs    0 <back>\n+ 1b0:   54004006    b.vs    9b0 <forth>\n+ 1b4:   54000007    b.vc    1b4 <back+0x1b4>\n+ 1b8:   54fff247    b.vc    0 <back>\n+ 1bc:   54003fa7    b.vc    9b0 <forth>\n+ 1c0:   54000008    b.hi    1c0 <back+0x1c0>\n+ 1c4:   54fff1e8    b.hi    0 <back>\n+ 1c8:   54003f48    b.hi    9b0 <forth>\n+ 1cc:   54000009    b.ls    1cc <back+0x1cc>\n+ 1d0:   54fff189    b.ls    0 <back>\n+ 1d4:   54003ee9    b.ls    9b0 <forth>\n+ 1d8:   5400000a    b.ge    1d8 <back+0x1d8>\n+ 1dc:   54fff12a    b.ge    0 <back>\n+ 1e0:   54003e8a    b.ge    9b0 <forth>\n+ 1e4:   5400000b    b.lt    1e4 <back+0x1e4>\n+ 1e8:   54fff0cb    b.lt    0 <back>\n+ 1ec:   54003e2b    b.lt    9b0 <forth>\n+ 1f0:   5400000c    b.gt    1f0 <back+0x1f0>\n+ 1f4:   54fff06c    b.gt    0 <back>\n+ 1f8:   54003dcc    b.gt    9b0 <forth>\n+ 1fc:   5400000d    b.le    1fc <back+0x1fc>\n+ 200:   54fff00d    b.le    0 <back>\n+ 204:   54003d6d    b.le    9b0 <forth>\n+ 208:   5400000e    b.al    208 <back+0x208>\n+ 20c:   54ffefae    b.al    0 <back>\n+ 210:   54003d0e    b.al    9b0 <forth>\n+ 214:   5400000f    b.nv    214 <back+0x214>\n+ 218:   54ffef4f    b.nv    0 <back>\n+ 21c:   54003caf    b.nv    9b0 <forth>\n+ 220:   d40658e1    svc #0x32c7\n+ 224:   d4014d22    hvc #0xa69\n+ 228:   d4046543    smc #0x232a\n+ 22c:   d4273f60    brk #0x39fb\n+ 230:   d44cad80    hlt #0x656c\n+ 234:   d503201f    nop\n+ 238:   d69f03e0    eret\n+ 23c:   d6bf03e0    drps\n+ 240:   d5033fdf    isb\n+ 244:   d5033e9f    dsb st\n+ 248:   d50332bf    dmb oshst\n+ 24c:   d61f01e0    br  x15\n+ 250:   d63f0260    blr x19\n+ 254:   c80a7d1a    stxr    w10, x26, [x8]\n+ 258:   c800fe81    stlxr   w0, x1, [x20]\n+ 25c:   c85f7f90    ldxr    x16, [x28]\n+ 260:   c85fff7c    ldaxr   x28, [x27]\n+ 264:   c89ffec1    stlr    x1, [x22]\n+ 268:   c8dffe95    ldar    x21, [x20]\n+ 26c:   88157e7b    stxr    w21, w27, [x19]\n+ 270:   880afccf    stlxr   w10, w15, [x6]\n+ 274:   885f7c11    ldxr    w17, [x0]\n+ 278:   885ffd24    ldaxr   w4, [x9]\n+ 27c:   889ffeb7    stlr    w23, [x21]\n+ 280:   88dffe29    ldar    w9, [x17]\n+ 284:   48017fa4    stxrh   w1, w4, [x29]\n+ 288:   4808fdeb    stlxrh  w8, w11, [x15]\n+ 28c:   485f7da8    ldxrh   w8, [x13]\n+ 290:   485ffc26    ldaxrh  w6, [x1]\n+ 294:   489ffde5    stlrh   w5, [x15]\n+ 298:   48dffd62    ldarh   w2, [x11]\n+ 29c:   08097c4c    stxrb   w9, w12, [x2]\n+ 2a0:   081bff2d    stlxrb  w27, w13, [x25]\n+ 2a4:   085f7d3d    ldxrb   w29, [x9]\n+ 2a8:   085ffead    ldaxrb  w13, [x21]\n+ 2ac:   089ffd0c    stlrb   w12, [x8]\n+ 2b0:   08dfff56    ldarb   w22, [x26]\n+ 2b4:   c87f4d5b    ldxp    x27, x19, [x10]\n+ 2b8:   c87fcc3d    ldaxp   x29, x19, [x1]\n+ 2bc:   c8220416    stxp    w2, x22, x1, [x0]\n+ 2c0:   c82bb5cf    stlxp   w11, x15, x13, [x14]\n+ 2c4:   887f5190    ldxp    w16, w20, [x12]\n+ 2c8:   887ff4ea    ldaxp   w10, w29, [x7]\n+ 2cc:   8837282c    stxp    w23, w12, w10, [x1]\n+ 2d0:   883aedb5    stlxp   w26, w21, w27, [x13]\n+ 2d4:   f819928a    stur    x10, [x20,#-103]\n+ 2d8:   b803e1fb    stur    w27, [x15,#62]\n+ 2dc:   381f713b    sturb   w27, [x9,#-9]\n+ 2e0:   781ce301    sturh   w1, [x24,#-50]\n+ 2e4:   f850f044    ldur    x4, [x2,#-241]\n+ 2e8:   b85e129d    ldur    w29, [x20,#-31]\n+ 2ec:   385e92d1    ldurb   w17, [x22,#-23]\n+ 2f0:   785ff33c    ldurh   w28, [x25,#-1]\n+ 2f4:   39801901    ldrsb   x1, [x8,#6]\n+ 2f8:   7881318b    ldursh  x11, [x12,#19]\n+ 2fc:   78dce02b    ldursh  w11, [x1,#-50]\n+ 300:   b88292f3    ldursw  x19, [x23,#41]\n+ 304:   fc45f2f7    ldur    d23, [x23,#95]\n+ 308:   bc5d50ae    ldur    s14, [x5,#-43]\n+ 30c:   fc001375    stur    d21, [x27,#1]\n+ 310:   bc195197    stur    s23, [x12,#-107]\n+ 314:   f8008c0b    str x11, [x0,#8]!\n+ 318:   b801dc03    str w3, [x0,#29]!\n+ 31c:   38009dcb    strb    w11, [x14,#9]!\n+ 320:   781fdf1d    strh    w29, [x24,#-3]!\n+ 324:   f8570e2d    ldr x13, [x17,#-144]!\n+ 328:   b85faecc    ldr w12, [x22,#-6]!\n+ 32c:   385f6d8d    ldrb    w13, [x12,#-10]!\n+ 330:   785ebea0    ldrh    w0, [x21,#-21]!\n+ 334:   38804cf7    ldrsb   x23, [x7,#4]!\n+ 338:   789cbce3    ldrsh   x3, [x7,#-53]!\n+ 33c:   78df9cbc    ldrsh   w28, [x5,#-7]!\n+ 340:   b89eed38    ldrsw   x24, [x9,#-18]!\n+ 344:   fc40cd4d    ldr d13, [x10,#12]!\n+ 348:   bc5bdd93    ldr s19, [x12,#-67]!\n+ 34c:   fc103c14    str d20, [x0,#-253]!\n+ 350:   bc040c08    str s8, [x0,#64]!\n+ 354:   f81a2784    str x4, [x28],#-94\n+ 358:   b81ca4ec    str w12, [x7],#-54\n+ 35c:   381e855b    strb    w27, [x10],#-24\n+ 360:   7801b506    strh    w6, [x8],#27\n+ 364:   f853654e    ldr x14, [x10],#-202\n+ 368:   b85d74b0    ldr w16, [x5],#-41\n+ 36c:   384095c2    ldrb    w2, [x14],#9\n+ 370:   785ec5bc    ldrh    w28, [x13],#-20\n+ 374:   389e15a9    ldrsb   x9, [x13],#-31\n+ 378:   789dc703    ldrsh   x3, [x24],#-36\n+ 37c:   78c06474    ldrsh   w20, [x3],#6\n+ 380:   b89ff667    ldrsw   x7, [x19],#-1\n+ 384:   fc57e51d    ldr d29, [x8],#-130\n+ 388:   bc4155d8    ldr s24, [x14],#21\n+ 38c:   fc05a6ed    str d13, [x23],#90\n+ 390:   bc1df407    str s7, [x0],#-33\n+ 394:   f835da29    str x9, [x17,w21,sxtw #3]\n+ 398:   b836d984    str w4, [x12,w22,sxtw #2]\n+ 39c:   3833580c    strb    w12, [x0,w19,uxtw #0]\n+ 3a0:   7826cb4b    strh    w11, [x26,w6,sxtw]\n+ 3a4:   f86f68e0    ldr x0, [x7,x15]\n+ 3a8:   b87ae880    ldr w0, [x4,x26,sxtx]\n+ 3ac:   3864db0d    ldrb    w13, [x24,w4,sxtw #0]\n+ 3b0:   78714888    ldrh    w8, [x4,w17,uxtw]\n+ 3b4:   38a6789b    ldrsb   x27, [x4,x6,lsl #0]\n+ 3b8:   78bdc9ee    ldrsh   x14, [x15,w29,sxtw]\n+ 3bc:   78f6c80f    ldrsh   w15, [x0,w22,sxtw]\n+ 3c0:   b8bdf935    ldrsw   x21, [x9,x29,sxtx #2]\n+ 3c4:   fc6afa9c    ldr d28, [x20,x10,sxtx #3]\n+ 3c8:   bc734943    ldr s3, [x10,w19,uxtw]\n+ 3cc:   fc3c5b6c    str d12, [x27,w28,uxtw #3]\n+ 3d0:   bc25fb96    str s22, [x28,x5,sxtx #2]\n+ 3d4:   f9189ce5    str x5, [x7,#12600]\n+ 3d8:   b91ecafc    str w28, [x23,#7880]\n+ 3dc:   39187a13    strb    w19, [x16,#1566]\n+ 3e0:   791f226c    strh    w12, [x19,#3984]\n+ 3e4:   f95aa2d3    ldr x19, [x22,#13632]\n+ 3e8:   b9587b97    ldr w23, [x28,#6264]\n+ 3ec:   395f7175    ldrb    w21, [x11,#2012]\n+ 3f0:   795d9123    ldrh    w3, [x9,#3784]\n+ 3f4:   399e7de7    ldrsb   x7, [x15,#1951]\n+ 3f8:   799a2697    ldrsh   x23, [x20,#3346]\n+ 3fc:   79df3422    ldrsh   w2, [x1,#3994]\n+ 400:   b99c2604    ldrsw   x4, [x16,#7204]\n+ 404:   fd5c2373    ldr d19, [x27,#14400]\n+ 408:   bd5fa1b8    ldr s24, [x13,#8096]\n+ 40c:   fd1d5939    str d25, [x9,#15024]\n+ 410:   bd1b1869    str s9, [x3,#6936]\n+ 414:   58002cfb    ldr x27, 9b0 <forth>\n+ 418:   1800000a    ldr w10, 418 <back+0x418>\n+ 41c:   f8945060    prfum   pldl1keep, [x3,#-187]\n+ 420:   d8000000    prfm    pldl1keep, 420 <back+0x420>\n+ 424:   f8ad6b80    prfm    pldl1keep, [x28,x13]\n+ 428:   f99a0080    prfm    pldl1keep, [x4,#13312]\n+ 42c:   1a060034    adc w20, w1, w6\n+ 430:   3a060088    adcs    w8, w4, w6\n+ 434:   5a0d0346    sbc w6, w26, w13\n+ 438:   7a10009a    sbcs    w26, w4, w16\n+ 43c:   9a000360    adc x0, x27, x0\n+ 440:   ba1d030b    adcs    x11, x24, x29\n+ 444:   da0e0300    sbc x0, x24, x14\n+ 448:   fa0302e1    sbcs    x1, x23, x3\n+ 44c:   0b340af1    add w17, w23, w20, uxtb #2\n+ 450:   2b29276c    adds    w12, w27, w9, uxth #1\n+ 454:   cb22a9ee    sub x14, x15, w2, sxth #2\n+ 458:   6b2c299d    subs    w29, w12, w12, uxth #2\n+ 45c:   8b2bce6b    add x11, x19, w11, sxtw #3\n+ 460:   ab2a875d    adds    x29, x26, w10, sxtb #1\n+ 464:   cb21c8cd    sub x13, x6, w1, sxtw #2\n+ 468:   eb3aa47c    subs    x28, x3, w26, sxth #1\n+ 46c:   3a4c400e    ccmn    w0, w12, #0xe, mi\n+ 470:   7a5132a6    ccmp    w21, w17, #0x6, cc\n+ 474:   ba5d622e    ccmn    x17, x29, #0xe, vs\n+ 478:   fa53814c    ccmp    x10, x19, #0xc, hi\n+ 47c:   3a52d8a2    ccmn    w5, #0x12, #0x2, le\n+ 480:   7a4d8904    ccmp    w8, #0xd, #0x4, hi\n+ 484:   ba4b3a8b    ccmn    x20, #0xb, #0xb, cc\n+ 488:   fa4d7862    ccmp    x3, #0xd, #0x2, vc\n+ 48c:   1a95804b    csel    w11, w2, w21, hi\n+ 490:   1a9025f7    csinc   w23, w15, w16, cs\n+ 494:   5a8fb0c6    csinv   w6, w6, w15, lt\n+ 498:   5a96974a    csneg   w10, w26, w22, ls\n+ 49c:   9a9cb069    csel    x9, x3, x28, lt\n+ 4a0:   9a9b374b    csinc   x11, x26, x27, cc\n+ 4a4:   da95c12e    csinv   x14, x9, x21, gt\n+ 4a8:   da88c6dd    csneg   x29, x22, x8, gt\n+ 4ac:   5ac0015d    rbit    w29, w10\n+ 4b0:   5ac005dc    rev16   w28, w14\n+ 4b4:   5ac00bbc    rev w28, w29\n+ 4b8:   5ac01298    clz w24, w20\n+ 4bc:   5ac01404    cls w4, w0\n+ 4c0:   dac002b1    rbit    x17, x21\n+ 4c4:   dac005dc    rev16   x28, x14\n+ 4c8:   dac00a75    rev32   x21, x19\n+ 4cc:   dac00e65    rev x5, x19\n+ 4d0:   dac0107d    clz x29, x3\n+ 4d4:   dac01634    cls x20, x17\n+ 4d8:   1ac00b0a    udiv    w10, w24, w0\n+ 4dc:   1acd0f1a    sdiv    w26, w24, w13\n+ 4e0:   1ad021a3    lsl w3, w13, w16\n+ 4e4:   1ad725c7    lsr w7, w14, w23\n+ 4e8:   1ad82a1b    asr w27, w16, w24\n+ 4ec:   1adb2f22    ror w2, w25, w27\n+ 4f0:   9ad90b04    udiv    x4, x24, x25\n+ 4f4:   9ad10dda    sdiv    x26, x14, x17\n+ 4f8:   9acb22a6    lsl x6, x21, x11\n+ 4fc:   9acb2460    lsr x0, x3, x11\n+ 500:   9adb2a1a    asr x26, x16, x27\n+ 504:   9ad12c5b    ror x27, x2, x17\n+ 508:   9bcd7dc9    umulh   x9, x14, x13\n+ 50c:   9b597c4d    smulh   x13, x2, x25\n+ 510:   1b0d166e    madd    w14, w19, w13, w5\n+ 514:   1b19e48f    msub    w15, w4, w25, w25\n+ 518:   9b012c24    madd    x4, x1, x1, x11\n+ 51c:   9b079a1c    msub    x28, x16, x7, x6\n+ 520:   9b381083    smaddl  x3, w4, w24, x4\n+ 524:   9b23c31a    smsubl  x26, w24, w3, x16\n+ 528:   9bb05b20    umaddl  x0, w25, w16, x22\n+ 52c:   9bbcc2ae    umsubl  x14, w21, w28, x16\n+ 530:   1e22093a    fmul    s26, s9, s2\n+ 534:   1e3918c0    fdiv    s0, s6, s25\n+ 538:   1e2e28c9    fadd    s9, s6, s14\n+ 53c:   1e2939dc    fsub    s28, s14, s9\n+ 540:   1e260a02    fmul    s2, s16, s6\n+ 544:   1e76096a    fmul    d10, d11, d22\n+ 548:   1e761b86    fdiv    d6, d28, d22\n+ 54c:   1e6a2b4d    fadd    d13, d26, d10\n+ 550:   1e77386b    fsub    d11, d3, d23\n+ 554:   1e6d09cb    fmul    d11, d14, d13\n+ 558:   1f1b3154    fmadd   s20, s10, s27, s12\n+ 55c:   1f17f56a    fmsub   s10, s11, s23, s29\n+ 560:   1f2831ba    fnmadd  s26, s13, s8, s12\n+ 564:   1f2570e9    fnmadd  s9, s7, s5, s28\n+ 568:   1f4b2c6e    fmadd   d14, d3, d11, d11\n+ 56c:   1f5dc3ae    fmsub   d14, d29, d29, d16\n+ 570:   1f6e3a91    fnmadd  d17, d20, d14, d14\n+ 574:   1f622689    fnmadd  d9, d20, d2, d9\n+ 578:   1e2040da    fmov    s26, s6\n+ 57c:   1e20c3bd    fabs    s29, s29\n+ 580:   1e214030    fneg    s16, s1\n+ 584:   1e21c0a2    fsqrt   s2, s5\n+ 588:   1e22c069    fcvt    d9, s3\n+ 58c:   1e604158    fmov    d24, d10\n+ 590:   1e60c026    fabs    d6, d1\n+ 594:   1e61400b    fneg    d11, d0\n+ 598:   1e61c223    fsqrt   d3, d17\n+ 59c:   1e6240bc    fcvt    s28, d5\n+ 5a0:   1e3800b6    fcvtzs  w22, s5\n+ 5a4:   9e380340    fcvtzs  x0, s26\n+ 5a8:   1e780039    fcvtzs  w25, d1\n+ 5ac:   9e7800c5    fcvtzs  x5, d6\n+ 5b0:   1e22017b    scvtf   s27, w11\n+ 5b4:   9e220198    scvtf   s24, x12\n+ 5b8:   1e6202eb    scvtf   d11, w23\n+ 5bc:   9e6200f1    scvtf   d17, x7\n+ 5c0:   1e2602b0    fmov    w16, s21\n+ 5c4:   9e660298    fmov    x24, d20\n+ 5c8:   1e270233    fmov    s19, w17\n+ 5cc:   9e670382    fmov    d2, x28\n+ 5d0:   1e2722a0    fcmp    s21, s7\n+ 5d4:   1e7322a0    fcmp    d21, d19\n+ 5d8:   1e202288    fcmp    s20, #0.0\n+ 5dc:   1e602148    fcmp    d10, #0.0\n+ 5e0:   293c15d4    stp w20, w5, [x14,#-32]\n+ 5e4:   2966387b    ldp w27, w14, [x3,#-208]\n+ 5e8:   69762951    ldpsw   x17, x10, [x10,#-80]\n+ 5ec:   a9041da6    stp x6, x7, [x13,#64]\n+ 5f0:   a9475c0c    ldp x12, x23, [x0,#112]\n+ 5f4:   29b61ccc    stp w12, w7, [x6,#-80]!\n+ 5f8:   29ee405e    ldp w30, w16, [x2,#-144]!\n+ 5fc:   69ee0744    ldpsw   x4, x1, [x26,#-144]!\n+ 600:   a9843577    stp x23, x13, [x11,#64]!\n+ 604:   a9f46ebd    ldp x29, x27, [x21,#-192]!\n+ 608:   28ba16d5    stp w21, w5, [x22],#-48\n+ 60c:   28fc44db    ldp w27, w17, [x6],#-32\n+ 610:   68f61831    ldpsw   x17, x6, [x1],#-80\n+ 614:   a8b352ac    stp x12, x20, [x21],#-208\n+ 618:   a8c56d5e    ldp x30, x27, [x10],#80\n+ 61c:   28024144    stnp    w4, w16, [x10,#16]\n+ 620:   2874132e    ldnp    w14, w4, [x25,#-96]\n+ 624:   a8027176    stnp    x22, x28, [x11,#32]\n+ 628:   a87b1aa0    ldnp    x0, x6, [x21,#-80]\n+ 62c:   0c40732e    ld1 {v14.8b}, [x25]\n+ 630:   4cdfa176    ld1 {v22.16b, v23.16b}, [x11], #32\n+ 634:   0cc66ee8    ld1 {v8.1d-v10.1d}, [x23], x6\n+ 638:   4cdf2733    ld1 {v19.8h-v22.8h}, [x25], #64\n+ 63c:   0d40c21c    ld1r    {v28.8b}, [x16]\n+ 640:   4ddfcaf8    ld1r    {v24.4s}, [x23], #4\n+ 644:   0dd8cca9    ld1r    {v9.1d}, [x5], x24\n+ 648:   4c408d30    ld2 {v16.2d, v17.2d}, [x9]\n+ 64c:   0cdf85cb    ld2 {v11.4h, v12.4h}, [x14], #16\n+ 650:   4d60c239    ld2r    {v25.16b, v26.16b}, [x17]\n+ 654:   0dffcba1    ld2r    {v1.2s, v2.2s}, [x29], #8\n+ 658:   4de8ce2f    ld2r    {v15.2d, v16.2d}, [x17], x8\n+ 65c:   4cc24979    ld3 {v25.4s-v27.4s}, [x11], x2\n+ 660:   0c404a79    ld3 {v25.2s-v27.2s}, [x19]\n+ 664:   4d40e6ae    ld3r    {v14.8h-v16.8h}, [x21]\n+ 668:   4ddfe9b8    ld3r    {v24.4s-v26.4s}, [x13], #12\n+ 66c:   0ddcef6d    ld3r    {v13.1d-v15.1d}, [x27], x28\n+ 670:   4cdf078f    ld4 {v15.8h-v18.8h}, [x28], #64\n+ 674:   0cc000fa    ld4 {v26.8b-v29.8b}, [x7], x0\n+ 678:   0d60e217    ld4r    {v23.8b-v26.8b}, [x16]\n+ 67c:   0dffe720    ld4r    {v0.4h-v3.4h}, [x25], #8\n+ 680:   0de2eb0b    ld4r    {v11.2s-v14.2s}, [x24], x2\n+ 684:   ce648356    .inst   0xce648356 ; undefined\n+ 688:   ce6184c7    .inst   0xce6184c7 ; undefined\n+ 68c:   cec081d9    .inst   0xcec081d9 ; undefined\n+ 690:   ce6d8981    .inst   0xce6d8981 ; undefined\n+ 694:   ba5fd3e3    ccmn    xzr, xzr, #0x3, le\n+ 698:   3a5f03e5    ccmn    wzr, wzr, #0x5, eq\n+ 69c:   fa411be4    ccmp    xzr, #0x1, #0x4, ne\n+ 6a0:   7a42cbe2    ccmp    wzr, #0x2, #0x2, gt\n+ 6a4:   93df03ff    ror xzr, xzr, #0\n+ 6a8:   c820ffff    stlxp   w0, xzr, xzr, [sp]\n+ 6ac:   8822fc7f    stlxp   w2, wzr, wzr, [x3]\n+ 6b0:   c8247cbf    stxp    w4, xzr, xzr, [x5]\n+ 6b4:   88267fff    stxp    w6, wzr, wzr, [sp]\n+ 6b8:   4e010fe0    dup v0.16b, wzr\n+ 6bc:   4e081fe1    mov v1.d[0], xzr\n+ 6c0:   4e0c1fe1    mov v1.s[1], wzr\n+ 6c4:   4e0a1fe1    mov v1.h[2], wzr\n+ 6c8:   4e071fe1    mov v1.b[3], wzr\n+ 6cc:   4cc0ac3f    ld1 {v31.2d, v0.2d}, [x1], x0\n+ 6d0:   05a08020    .inst   0x05a08020 ; undefined\n+ 6d4:   04b0e3e0    .inst   0x04b0e3e0 ; undefined\n+ 6d8:   0470e7e1    .inst   0x0470e7e1 ; undefined\n+ 6dc:   042f9c20    .inst   0x042f9c20 ; undefined\n+ 6e0:   043f9c35    .inst   0x043f9c35 ; undefined\n+ 6e4:   047f9c20    .inst   0x047f9c20 ; undefined\n+ 6e8:   04ff9c20    .inst   0x04ff9c20 ; undefined\n+ 6ec:   04299420    .inst   0x04299420 ; undefined\n+ 6f0:   04319160    .inst   0x04319160 ; undefined\n+ 6f4:   0461943e    .inst   0x0461943e ; undefined\n+ 6f8:   04a19020    .inst   0x04a19020 ; undefined\n+ 6fc:   042053ff    .inst   0x042053ff ; undefined\n+ 700:   047f5401    .inst   0x047f5401 ; undefined\n+ 704:   25208028    .inst   0x25208028 ; undefined\n+ 708:   2538cfe0    .inst   0x2538cfe0 ; undefined\n+ 70c:   2578d001    .inst   0x2578d001 ; undefined\n+ 710:   25b8efe2    .inst   0x25b8efe2 ; undefined\n+ 714:   25f8f007    .inst   0x25f8f007 ; undefined\n+ 718:   a400a3e0    .inst   0xa400a3e0 ; undefined\n+ 71c:   a4a8a7ea    .inst   0xa4a8a7ea ; undefined\n+ 720:   a547a814    .inst   0xa547a814 ; undefined\n+ 724:   a4084ffe    .inst   0xa4084ffe ; undefined\n+ 728:   a55c53e0    .inst   0xa55c53e0 ; undefined\n+ 72c:   a5e1540b    .inst   0xa5e1540b ; undefined\n+ 730:   e400fbf6    .inst   0xe400fbf6 ; undefined\n+ 734:   e408ffff    .inst   0xe408ffff ; undefined\n+ 738:   e547e400    .inst   0xe547e400 ; undefined\n+ 73c:   e4014be0    .inst   0xe4014be0 ; undefined\n+ 740:   e4a84fe0    .inst   0xe4a84fe0 ; undefined\n+ 744:   e5f15000    .inst   0xe5f15000 ; undefined\n+ 748:   858043e0    .inst   0x858043e0 ; undefined\n+ 74c:   85a043ff    .inst   0x85a043ff ; undefined\n+ 750:   e59f5d08    .inst   0xe59f5d08 ; undefined\n+ 754:   1e601000    fmov    d0, #2.000000000000000000e+00\n+ 758:   1e603000    fmov    d0, #2.125000000000000000e+00\n+ 75c:   1e621000    fmov    d0, #4.000000000000000000e+00\n+ 760:   1e623000    fmov    d0, #4.250000000000000000e+00\n+ 764:   1e641000    fmov    d0, #8.000000000000000000e+00\n+ 768:   1e643000    fmov    d0, #8.500000000000000000e+00\n+ 76c:   1e661000    fmov    d0, #1.600000000000000000e+01\n+ 770:   1e663000    fmov    d0, #1.700000000000000000e+01\n+ 774:   1e681000    fmov    d0, #1.250000000000000000e-01\n+ 778:   1e683000    fmov    d0, #1.328125000000000000e-01\n+ 77c:   1e6a1000    fmov    d0, #2.500000000000000000e-01\n+ 780:   1e6a3000    fmov    d0, #2.656250000000000000e-01\n+ 784:   1e6c1000    fmov    d0, #5.000000000000000000e-01\n+ 788:   1e6c3000    fmov    d0, #5.312500000000000000e-01\n+ 78c:   1e6e1000    fmov    d0, #1.000000000000000000e+00\n+ 790:   1e6e3000    fmov    d0, #1.062500000000000000e+00\n+ 794:   1e701000    fmov    d0, #-2.000000000000000000e+00\n+ 798:   1e703000    fmov    d0, #-2.125000000000000000e+00\n+ 79c:   1e721000    fmov    d0, #-4.000000000000000000e+00\n+ 7a0:   1e723000    fmov    d0, #-4.250000000000000000e+00\n+ 7a4:   1e741000    fmov    d0, #-8.000000000000000000e+00\n+ 7a8:   1e743000    fmov    d0, #-8.500000000000000000e+00\n+ 7ac:   1e761000    fmov    d0, #-1.600000000000000000e+01\n+ 7b0:   1e763000    fmov    d0, #-1.700000000000000000e+01\n+ 7b4:   1e781000    fmov    d0, #-1.250000000000000000e-01\n+ 7b8:   1e783000    fmov    d0, #-1.328125000000000000e-01\n+ 7bc:   1e7a1000    fmov    d0, #-2.500000000000000000e-01\n+ 7c0:   1e7a3000    fmov    d0, #-2.656250000000000000e-01\n+ 7c4:   1e7c1000    fmov    d0, #-5.000000000000000000e-01\n+ 7c8:   1e7c3000    fmov    d0, #-5.312500000000000000e-01\n+ 7cc:   1e7e1000    fmov    d0, #-1.000000000000000000e+00\n+ 7d0:   1e7e3000    fmov    d0, #-1.062500000000000000e+00\n+ 7d4:   f8388097    swp x24, x23, [x4]\n+ 7d8:   f833000f    ldadd   x19, x15, [x0]\n+ 7dc:   f8241175    ldclr   x4, x21, [x11]\n+ 7e0:   f83d22af    ldeor   x29, x15, [x21]\n+ 7e4:   f82432ee    ldset   x4, x14, [x23]\n+ 7e8:   f83a5165    ldsmin  x26, x5, [x11]\n+ 7ec:   f82e41cd    ldsmax  x14, x13, [x14]\n+ 7f0:   f8287399    ldumin  x8, x25, [x28]\n+ 7f4:   f82a6174    ldumax  x10, x20, [x11]\n+ 7f8:   f8b181f5    swpa    x17, x21, [x15]\n+ 7fc:   f8b50357    ldadda  x21, x23, [x26]\n+ 800:   f8a511e6    ldclra  x5, x6, [x15]\n+ 804:   f8af21f9    ldeora  x15, x25, [x15]\n+ 808:   f8bc31f8    ldseta  x28, x24, [x15]\n+ 80c:   f8b9514e    ldsmina x25, x14, [x10]\n+ 810:   f8ad428d    ldsmaxa x13, x13, [x20]\n+ 814:   f8a173f6    ldumina x1, x22, [sp]\n+ 818:   f8ad60c2    ldumaxa x13, x2, [x6]\n+ 81c:   f8e38307    swpal   x3, x7, [x24]\n+ 820:   f8e003bb    ldaddal x0, x27, [x29]\n+ 824:   f8e513a5    ldclral x5, x5, [x29]\n+ 828:   f8ea2019    ldeoral x10, x25, [x0]\n+ 82c:   f8ff3260    ldsetal xzr, x0, [x19]\n+ 830:   f8fc5139    ldsminal    x28, x25, [x9]\n+ 834:   f8f941cb    ldsmaxal    x25, x11, [x14]\n+ 838:   f8ea722a    lduminal    x10, x10, [x17]\n+ 83c:   f8f86315    ldumaxal    x24, x21, [x24]\n+ 840:   f860814f    swpl    x0, x15, [x10]\n+ 844:   f86600bc    ldaddl  x6, x28, [x5]\n+ 848:   f8651285    ldclrl  x5, x5, [x20]\n+ 84c:   f873222f    ldeorl  x19, x15, [x17]\n+ 850:   f87d339a    ldsetl  x29, x26, [x28]\n+ 854:   f861501b    ldsminl x1, x27, [x0]\n+ 858:   f87441fc    ldsmaxl x20, x28, [x15]\n+ 85c:   f86c7389    lduminl x12, x9, [x28]\n+ 860:   f87c62d3    ldumaxl x28, x19, [x22]\n+ 864:   b82a83e4    swp w10, w4, [sp]\n+ 868:   b83403e8    ldadd   w20, w8, [sp]\n+ 86c:   b8331369    ldclr   w19, w9, [x27]\n+ 870:   b8222099    ldeor   w2, w25, [x4]\n+ 874:   b82332c7    ldset   w3, w7, [x22]\n+ 878:   b833508c    ldsmin  w19, w12, [x4]\n+ 87c:   b83c42b7    ldsmax  w28, w23, [x21]\n+ 880:   b8397078    ldumin  w25, w24, [x3]\n+ 884:   b83862fa    ldumax  w24, w26, [x23]\n+ 888:   b8ae8075    swpa    w14, w21, [x3]\n+ 88c:   b8b70307    ldadda  w23, w7, [x24]\n+ 890:   b8b4120f    ldclra  w20, w15, [x16]\n+ 894:   b8a22001    ldeora  w2, w1, [x0]\n+ 898:   b8b83064    ldseta  w24, w4, [x3]\n+ 89c:   b8ab537f    ldsmina w11, wzr, [x27]\n+ 8a0:   b8a94059    ldsmaxa w9, w25, [x2]\n+ 8a4:   b8ab73f1    ldumina w11, w17, [sp]\n+ 8a8:   b8a1638c    ldumaxa w1, w12, [x28]\n+ 8ac:   b8e08171    swpal   w0, w17, [x11]\n+ 8b0:   b8f00196    ldaddal w16, w22, [x12]\n+ 8b4:   b8fb13fd    ldclral w27, w29, [sp]\n+ 8b8:   b8e1237a    ldeoral w1, w26, [x27]\n+ 8bc:   b8e4307d    ldsetal w4, w29, [x3]\n+ 8c0:   b8e6533d    ldsminal    w6, w29, [x25]\n+ 8c4:   b8f140e8    ldsmaxal    w17, w8, [x7]\n+ 8c8:   b8ec7280    lduminal    w12, w0, [x20]\n+ 8cc:   b8e16058    ldumaxal    w1, w24, [x2]\n+ 8d0:   b8608308    swpl    w0, w8, [x24]\n+ 8d4:   b87903af    ldaddl  w25, w15, [x29]\n+ 8d8:   b86312e9    ldclrl  w3, w9, [x23]\n+ 8dc:   b8692224    ldeorl  w9, w4, [x17]\n+ 8e0:   b86130eb    ldsetl  w1, w11, [x7]\n+ 8e4:   b869520e    ldsminl w9, w14, [x16]\n+ 8e8:   b8624169    ldsmaxl w2, w9, [x11]\n+ 8ec:   b86c718e    lduminl w12, w14, [x12]\n+ 8f0:   b8626286    ldumaxl w2, w6, [x20]\n+ 8f4:   042401d9    .inst   0x042401d9 ; undefined\n+ 8f8:   04b00564    .inst   0x04b00564 ; undefined\n+ 8fc:   65ca020f    .inst   0x65ca020f ; undefined\n+ 900:   65d80976    .inst   0x65d80976 ; undefined\n+ 904:   65ca05bb    .inst   0x65ca05bb ; undefined\n+ 908:   0456afa1    .inst   0x0456afa1 ; undefined\n+ 90c:   0400044e    .inst   0x0400044e ; undefined\n+ 910:   049091ec    .inst   0x049091ec ; undefined\n+ 914:   04daa143    .inst   0x04daa143 ; undefined\n+ 918:   04d389c5    .inst   0x04d389c5 ; undefined\n+ 91c:   0411827c    .inst   0x0411827c ; undefined\n+ 920:   04901753    .inst   0x04901753 ; undefined\n+ 924:   0417b899    .inst   0x0417b899 ; undefined\n+ 928:   041eb3b6    .inst   0x041eb3b6 ; undefined\n+ 92c:   04480b4b    .inst   0x04480b4b ; undefined\n+ 930:   048a17bb    .inst   0x048a17bb ; undefined\n+ 934:   0481059d    .inst   0x0481059d ; undefined\n+ 938:   04dcb35d    .inst   0x04dcb35d ; undefined\n+ 93c:   65808d4e    .inst   0x65808d4e ; undefined\n+ 940:   65cd9de6    .inst   0x65cd9de6 ; undefined\n+ 944:   65869cda    .inst   0x65869cda ; undefined\n+ 948:   65c78893    .inst   0x65c78893 ; undefined\n+ 94c:   658292af    .inst   0x658292af ; undefined\n+ 950:   04ddaebb    .inst   0x04ddaebb ; undefined\n+ 954:   6582b451    .inst   0x6582b451 ; undefined\n+ 958:   6580adc6    .inst   0x6580adc6 ; undefined\n+ 95c:   65c1b42b    .inst   0x65c1b42b ; undefined\n+ 960:   658da611    .inst   0x658da611 ; undefined\n+ 964:   6581958e    .inst   0x6581958e ; undefined\n+ 968:   65eb1f54    .inst   0x65eb1f54 ; undefined\n+ 96c:   65f723a3    .inst   0x65f723a3 ; undefined\n+ 970:   65b94b70    .inst   0x65b94b70 ; undefined\n+ 974:   65fd76c6    .inst   0x65fd76c6 ; undefined\n+ 978:   04505f22    .inst   0x04505f22 ; undefined\n+ 97c:   04107056    .inst   0x04107056 ; undefined\n+ 980:   04363317    .inst   0x04363317 ; undefined\n+ 984:   04a33171    .inst   0x04a33171 ; undefined\n+ 988:   046f337c    .inst   0x046f337c ; undefined\n+ 98c:   049a2b65    .inst   0x049a2b65 ; undefined\n+ 990:   045824c6    .inst   0x045824c6 ; undefined\n+ 994:   041934e8    .inst   0x041934e8 ; undefined\n+ 998:   040837bb    .inst   0x040837bb ; undefined\n+ 99c:   044a21fa    .inst   0x044a21fa ; undefined\n+ 9a0:   65c738e3    .inst   0x65c738e3 ; undefined\n+ 9a4:   65c63b55    .inst   0x65c63b55 ; undefined\n+ 9a8:   65982096    .inst   0x65982096 ; undefined\n+ 9ac:   04412070    .inst   0x04412070 ; undefined\n@@ -1479,10 +1479,10 @@\n-    0x8b0d82fa,     0xcb49970c,     0xab889dfc,     0xeb9ee787,\n-    0x0b9b3ec9,     0x4b9279a3,     0x2b88474e,     0x6b8c56c0,\n-    0x8a1a51e0,     0xaa11f4ba,     0xca0281b8,     0xea918c7c,\n-    0x0a5d4a19,     0x2a4b264d,     0x4a523ca5,     0x6a9b6ae2,\n-    0x8a70b79b,     0xaaba9728,     0xca6dfe3d,     0xea627f1c,\n-    0x0aa70f53,     0x2aaa0f06,     0x4a6176a4,     0x6a604eb0,\n-    0x1105ed91,     0x3100583e,     0x5101f8bd,     0x710f0306,\n-    0x9101a1a0,     0xb10a5cc8,     0xd10810aa,     0xf10fd061,\n-    0x120cb166,     0x321764bc,     0x52174681,     0x720c0247,\n-    0x9241018e,     0xb25a2969,     0xd278b411,     0xf26aad01,\n+    0x8b0c82d9,     0xcb4896eb,     0xab889ddb,     0xeb9de767,\n+    0x0b9b3ec8,     0x4b917982,     0x2b87474d,     0x6b8b56a0,\n+    0x8a1a51c0,     0xaa10f4ba,     0xca028198,     0xea8f8c7c,\n+    0x0a5c49f8,     0x2a4b262c,     0x4a513ca5,     0x6a9a6ac2,\n+    0x8a6fb77b,     0xaab99707,     0xca6dfe1c,     0xea627f1b,\n+    0x0aa70f33,     0x2aa90f06,     0x4a6176a4,     0x6a604e8f,\n+    0x1105ed70,     0x3100583d,     0x5101f8bc,     0x710f0306,\n+    0x9101a180,     0xb10a5cc7,     0xd10810aa,     0xf10fd041,\n+    0x120cb145,     0x3217649b,     0x52174681,     0x720c0227,\n+    0x9241016d,     0xb25a2949,     0xd278b410,     0xf26aad01,\n@@ -1492,8 +1492,8 @@\n-    0xb400000b,     0xb4fff96b,     0xb40046cb,     0xb500001d,\n-    0xb5fff91d,     0xb500467d,     0x10000013,     0x10fff8b3,\n-    0x10004613,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36304596,     0x3758000c,     0x375ff7cc,     0x3758452c,\n-    0x128313a0,     0x528a32c7,     0x7289173b,     0x92ab3acc,\n-    0xd2a0bf94,     0xf2c285e8,     0x9358722f,     0x330e652f,\n-    0x53067f3b,     0x93577c53,     0xb34a1aac,     0xd35a4016,\n-    0x13946c63,     0x93c3dbc8,     0x54000000,     0x54fff5a0,\n+    0xb400000a,     0xb4fff96a,     0xb40046ca,     0xb500001c,\n+    0xb5fff91c,     0xb500467c,     0x10000013,     0x10fff8b3,\n+    0x10004613,     0x90000013,     0x36300015,     0x3637f835,\n+    0x36304595,     0x3758000c,     0x375ff7cc,     0x3758452c,\n+    0x128313a0,     0x528a32c6,     0x7289173a,     0x92ab3acb,\n+    0xd2a0bf94,     0xf2c285e7,     0x9358720e,     0x330e652e,\n+    0x53067f1a,     0x93577c53,     0xb34a1a8b,     0xd35a4015,\n+    0x13936c62,     0x93c2dba8,     0x54000000,     0x54fff5a0,\n@@ -1515,14 +1515,14 @@\n-    0xd5033fdf,     0xd5033e9f,     0xd50332bf,     0xd61f0200,\n-    0xd63f0280,     0xc80a7d1b,     0xc800fea1,     0xc85f7fb1,\n-    0xc85fff9d,     0xc89ffee1,     0xc8dffe95,     0x88167e7b,\n-    0x880bfcd0,     0x885f7c12,     0x885ffd44,     0x889ffed8,\n-    0x88dffe6a,     0x48017fc5,     0x4808fe2c,     0x485f7dc9,\n-    0x485ffc27,     0x489ffe05,     0x48dffd82,     0x080a7c6c,\n-    0x081cff4e,     0x085f7d5e,     0x085ffeae,     0x089ffd2d,\n-    0x08dfff76,     0xc87f4d7c,     0xc87fcc5e,     0xc8220417,\n-    0xc82cb5f0,     0x887f55b2,     0x887ff90b,     0x88382c2d,\n-    0x883aedb5,     0xf819928b,     0xb803e21c,     0x381f713b,\n-    0x781ce322,     0xf850f044,     0xb85e129e,     0x385e92f2,\n-    0x785ff35d,     0x39801921,     0x7881318b,     0x78dce02b,\n-    0xb8829313,     0xfc45f318,     0xbc5d50af,     0xfc001375,\n-    0xbc1951b7,     0xf8008c0b,     0xb801dc03,     0x38009dcb,\n+    0xd5033fdf,     0xd5033e9f,     0xd50332bf,     0xd61f01e0,\n+    0xd63f0260,     0xc80a7d1a,     0xc800fe81,     0xc85f7f90,\n+    0xc85fff7c,     0xc89ffec1,     0xc8dffe95,     0x88157e7b,\n+    0x880afccf,     0x885f7c11,     0x885ffd24,     0x889ffeb7,\n+    0x88dffe29,     0x48017fa4,     0x4808fdeb,     0x485f7da8,\n+    0x485ffc26,     0x489ffde5,     0x48dffd62,     0x08097c4c,\n+    0x081bff2d,     0x085f7d3d,     0x085ffead,     0x089ffd0c,\n+    0x08dfff56,     0xc87f4d5b,     0xc87fcc3d,     0xc8220416,\n+    0xc82bb5cf,     0x887f5190,     0x887ff4ea,     0x8837282c,\n+    0x883aedb5,     0xf819928a,     0xb803e1fb,     0x381f713b,\n+    0x781ce301,     0xf850f044,     0xb85e129d,     0x385e92d1,\n+    0x785ff33c,     0x39801901,     0x7881318b,     0x78dce02b,\n+    0xb88292f3,     0xfc45f2f7,     0xbc5d50ae,     0xfc001375,\n+    0xbc195197,     0xf8008c0b,     0xb801dc03,     0x38009dcb,\n@@ -1531,1 +1531,1 @@\n-    0xb89eed38,     0xfc40cd6e,     0xbc5bdd93,     0xfc103c14,\n+    0xb89eed38,     0xfc40cd4d,     0xbc5bdd93,     0xfc103c14,\n@@ -1535,50 +1535,50 @@\n-    0xb89ff667,     0xfc57e51e,     0xbc4155f9,     0xfc05a6ee,\n-    0xbc1df408,     0xf835da4a,     0xb836d9a4,     0x3833580d,\n-    0x7826cb6c,     0xf8706900,     0xb87ae880,     0x3865db2e,\n-    0x78724889,     0x38a7789b,     0x78beca2f,     0x78f6c810,\n-    0xb8bef956,     0xfc6afabd,     0xbc734963,     0xfc3d5b8d,\n-    0xbc25fbb7,     0xf9189d05,     0xb91ecb1d,     0x39187a33,\n-    0x791f226d,     0xf95aa2f3,     0xb9587bb7,     0x395f7176,\n-    0x795d9143,     0x399e7e08,     0x799a2697,     0x79df3422,\n-    0xb99c2624,     0xfd5c2374,     0xbd5fa1d9,     0xfd1d595a,\n-    0xbd1b1869,     0x58002cfb,     0x1800000b,     0xf8945060,\n-    0xd8000000,     0xf8ae6ba0,     0xf99a0080,     0x1a070035,\n-    0x3a0700a8,     0x5a0e0367,     0x7a11009b,     0x9a000380,\n-    0xba1e030c,     0xda0f0320,     0xfa030301,     0x0b340b12,\n-    0x2b2a278d,     0xcb22aa0f,     0x6b2d29bd,     0x8b2cce8c,\n-    0xab2b877e,     0xcb21c8ee,     0xeb3ba47d,     0x3a4d400e,\n-    0x7a5232c6,     0xba5e624e,     0xfa53814c,     0x3a52d8c2,\n-    0x7a4d8924,     0xba4b3aab,     0xfa4d7882,     0x1a96804c,\n-    0x1a912618,     0x5a90b0e6,     0x5a96976b,     0x9a9db06a,\n-    0x9a9b374c,     0xda95c14f,     0xda89c6fe,     0x5ac0015e,\n-    0x5ac005fd,     0x5ac00bdd,     0x5ac012b9,     0x5ac01404,\n-    0xdac002b2,     0xdac0061d,     0xdac00a95,     0xdac00e66,\n-    0xdac0107e,     0xdac01675,     0x1ac00b0b,     0x1ace0f3b,\n-    0x1ad221c3,     0x1ad825e7,     0x1ad92a3c,     0x1adc2f42,\n-    0x9ada0b25,     0x9ad20e1b,     0x9acc22a6,     0x9acc2480,\n-    0x9adc2a3b,     0x9ad22c5c,     0x9bce7dea,     0x9b597c6e,\n-    0x1b0e166f,     0x1b1ae490,     0x9b023044,     0x9b089e3d,\n-    0x9b391083,     0x9b24c73a,     0x9bb15f40,     0x9bbcc6af,\n-    0x1e23095b,     0x1e3918e0,     0x1e2f28c9,     0x1e2a39fd,\n-    0x1e270a22,     0x1e77096b,     0x1e771ba7,     0x1e6b2b6e,\n-    0x1e78388b,     0x1e6e09ec,     0x1f1c3574,     0x1f17f98b,\n-    0x1f2935da,     0x1f2574ea,     0x1f4b306f,     0x1f5ec7cf,\n-    0x1f6f3e93,     0x1f6226a9,     0x1e2040fb,     0x1e20c3dd,\n-    0x1e214031,     0x1e21c0c2,     0x1e22c06a,     0x1e604178,\n-    0x1e60c027,     0x1e61400b,     0x1e61c243,     0x1e6240dc,\n-    0x1e3800d6,     0x9e380360,     0x1e78005a,     0x9e7800e5,\n-    0x1e22017c,     0x9e2201b9,     0x1e6202eb,     0x9e620113,\n-    0x1e2602b2,     0x9e660299,     0x1e270253,     0x9e6703a2,\n-    0x1e2822c0,     0x1e7322a0,     0x1e202288,     0x1e602168,\n-    0x293c19f4,     0x2966387b,     0x69762971,     0xa9041dc7,\n-    0xa9475c0c,     0x29b61ccd,     0x29ee405e,     0x69ee0744,\n-    0xa9843977,     0xa9f46ebd,     0x28ba16b6,     0x28fc44db,\n-    0x68f61831,     0xa8b352ad,     0xa8c56d5e,     0x28024565,\n-    0x2874134e,     0xa8027597,     0xa87b1aa0,     0x0c40734f,\n-    0x4cdfa177,     0x0cc76ee8,     0x4cdf2733,     0x0d40c23d,\n-    0x4ddfcaf8,     0x0dd9ccaa,     0x4c408d52,     0x0cdf85ec,\n-    0x4d60c259,     0x0dffcbc1,     0x4de9ce50,     0x4cc24999,\n-    0x0c404a7a,     0x4d40e6af,     0x4ddfe9b9,     0x0dddef8e,\n-    0x4cdf07b1,     0x0cc000fb,     0x0d60e258,     0x0dffe740,\n-    0x0de2eb2c,     0xce648376,     0xce6184c7,     0xcec081fa,\n-    0xce6d89a2,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n+    0xb89ff667,     0xfc57e51d,     0xbc4155d8,     0xfc05a6ed,\n+    0xbc1df407,     0xf835da29,     0xb836d984,     0x3833580c,\n+    0x7826cb4b,     0xf86f68e0,     0xb87ae880,     0x3864db0d,\n+    0x78714888,     0x38a6789b,     0x78bdc9ee,     0x78f6c80f,\n+    0xb8bdf935,     0xfc6afa9c,     0xbc734943,     0xfc3c5b6c,\n+    0xbc25fb96,     0xf9189ce5,     0xb91ecafc,     0x39187a13,\n+    0x791f226c,     0xf95aa2d3,     0xb9587b97,     0x395f7175,\n+    0x795d9123,     0x399e7de7,     0x799a2697,     0x79df3422,\n+    0xb99c2604,     0xfd5c2373,     0xbd5fa1b8,     0xfd1d5939,\n+    0xbd1b1869,     0x58002cfb,     0x1800000a,     0xf8945060,\n+    0xd8000000,     0xf8ad6b80,     0xf99a0080,     0x1a060034,\n+    0x3a060088,     0x5a0d0346,     0x7a10009a,     0x9a000360,\n+    0xba1d030b,     0xda0e0300,     0xfa0302e1,     0x0b340af1,\n+    0x2b29276c,     0xcb22a9ee,     0x6b2c299d,     0x8b2bce6b,\n+    0xab2a875d,     0xcb21c8cd,     0xeb3aa47c,     0x3a4c400e,\n+    0x7a5132a6,     0xba5d622e,     0xfa53814c,     0x3a52d8a2,\n+    0x7a4d8904,     0xba4b3a8b,     0xfa4d7862,     0x1a95804b,\n+    0x1a9025f7,     0x5a8fb0c6,     0x5a96974a,     0x9a9cb069,\n+    0x9a9b374b,     0xda95c12e,     0xda88c6dd,     0x5ac0015d,\n+    0x5ac005dc,     0x5ac00bbc,     0x5ac01298,     0x5ac01404,\n+    0xdac002b1,     0xdac005dc,     0xdac00a75,     0xdac00e65,\n+    0xdac0107d,     0xdac01634,     0x1ac00b0a,     0x1acd0f1a,\n+    0x1ad021a3,     0x1ad725c7,     0x1ad82a1b,     0x1adb2f22,\n+    0x9ad90b04,     0x9ad10dda,     0x9acb22a6,     0x9acb2460,\n+    0x9adb2a1a,     0x9ad12c5b,     0x9bcd7dc9,     0x9b597c4d,\n+    0x1b0d166e,     0x1b19e48f,     0x9b012c24,     0x9b079a1c,\n+    0x9b381083,     0x9b23c31a,     0x9bb05b20,     0x9bbcc2ae,\n+    0x1e22093a,     0x1e3918c0,     0x1e2e28c9,     0x1e2939dc,\n+    0x1e260a02,     0x1e76096a,     0x1e761b86,     0x1e6a2b4d,\n+    0x1e77386b,     0x1e6d09cb,     0x1f1b3154,     0x1f17f56a,\n+    0x1f2831ba,     0x1f2570e9,     0x1f4b2c6e,     0x1f5dc3ae,\n+    0x1f6e3a91,     0x1f622689,     0x1e2040da,     0x1e20c3bd,\n+    0x1e214030,     0x1e21c0a2,     0x1e22c069,     0x1e604158,\n+    0x1e60c026,     0x1e61400b,     0x1e61c223,     0x1e6240bc,\n+    0x1e3800b6,     0x9e380340,     0x1e780039,     0x9e7800c5,\n+    0x1e22017b,     0x9e220198,     0x1e6202eb,     0x9e6200f1,\n+    0x1e2602b0,     0x9e660298,     0x1e270233,     0x9e670382,\n+    0x1e2722a0,     0x1e7322a0,     0x1e202288,     0x1e602148,\n+    0x293c15d4,     0x2966387b,     0x69762951,     0xa9041da6,\n+    0xa9475c0c,     0x29b61ccc,     0x29ee405e,     0x69ee0744,\n+    0xa9843577,     0xa9f46ebd,     0x28ba16d5,     0x28fc44db,\n+    0x68f61831,     0xa8b352ac,     0xa8c56d5e,     0x28024144,\n+    0x2874132e,     0xa8027176,     0xa87b1aa0,     0x0c40732e,\n+    0x4cdfa176,     0x0cc66ee8,     0x4cdf2733,     0x0d40c21c,\n+    0x4ddfcaf8,     0x0dd8cca9,     0x4c408d30,     0x0cdf85cb,\n+    0x4d60c239,     0x0dffcba1,     0x4de8ce2f,     0x4cc24979,\n+    0x0c404a79,     0x4d40e6ae,     0x4ddfe9b8,     0x0ddcef6d,\n+    0x4cdf078f,     0x0cc000fa,     0x0d60e217,     0x0dffe720,\n+    0x0de2eb0b,     0xce648356,     0xce6184c7,     0xcec081d9,\n+    0xce6d8981,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n@@ -1595,1 +1595,1 @@\n-    0xe4a84fe0,     0xe5f25000,     0x858043e0,     0x85a043ff,\n+    0xe4a84fe0,     0xe5f15000,     0x858043e0,     0x85a043ff,\n@@ -1604,30 +1604,30 @@\n-    0x1e7e3000,     0xf8388098,     0xf8340010,     0xf8241175,\n-    0xf83e22d0,     0xf82432ef,     0xf83a5186,     0xf82f41ee,\n-    0xf82973b9,     0xf82b6194,     0xf8b28216,     0xf8b50358,\n-    0xf8a61206,     0xf8b02219,     0xf8bc3218,     0xf8ba514f,\n-    0xf8ad428e,     0xf8a173d7,     0xf8ae60c2,     0xf8e38328,\n-    0xf8e003db,     0xf8e513c5,     0xf8eb2019,     0xf8ff3260,\n-    0xf8fd513a,     0xf8fa41ec,     0xf8eb724b,     0xf8f96316,\n-    0xf8608171,     0xf86600dd,     0xf86512a5,     0xf8732250,\n-    0xf87e339b,     0xf861503c,     0xf874421d,     0xf86d73aa,\n-    0xf87d62d3,     0xb82a83e4,     0xb83503e8,     0xb833138a,\n-    0xb82220b9,     0xb82332c8,     0xb83350ad,     0xb83d42b8,\n-    0xb83a7078,     0xb83862fa,     0xb8af8075,     0xb8b80328,\n-    0xb8b41230,     0xb8a22001,     0xb8b83064,     0xb8ac539f,\n-    0xb8aa405a,     0xb8ac73f2,     0xb8a163ad,     0xb8e08193,\n-    0xb8f101b6,     0xb8fc13fe,     0xb8e1239a,     0xb8e4309e,\n-    0xb8e6535e,     0xb8f24109,     0xb8ec7280,     0xb8e16058,\n-    0xb8608309,     0xb87a03d0,     0xb86312ea,     0xb86a2244,\n-    0xb862310b,     0xb86a522f,     0xb862418a,     0xb86c71af,\n-    0xb8626287,     0x042401f9,     0x04b10564,     0x65ca0230,\n-    0x65d90996,     0x65ca05dc,     0x0456afc1,     0x0400044f,\n-    0x0490920d,     0x04daa163,     0x04d389c5,     0x0411829d,\n-    0x04901774,     0x0417b89a,     0x041eb3d6,     0x04480b6b,\n-    0x048a17dc,     0x048105be,     0x04dcb35e,     0x65808d6f,\n-    0x65cd9e06,     0x65869cfb,     0x65c78893,     0x658292d1,\n-    0x04ddaebc,     0x6582b452,     0x6580ade6,     0x65c1b42c,\n-    0x658da632,     0x658195af,     0x65eb1f74,     0x65f723c3,\n-    0x65ba4b71,     0x65fe76c6,     0x04525f42,     0x04117056,\n-    0x04363338,     0x04a33192,     0x0470339d,     0x049a2b86,\n-    0x045824e7,     0x04193509,     0x040837db,     0x044a221a,\n-    0x65c73903,     0x65c63b55,     0x65982096,     0x04412071,\n+    0x1e7e3000,     0xf8388097,     0xf833000f,     0xf8241175,\n+    0xf83d22af,     0xf82432ee,     0xf83a5165,     0xf82e41cd,\n+    0xf8287399,     0xf82a6174,     0xf8b181f5,     0xf8b50357,\n+    0xf8a511e6,     0xf8af21f9,     0xf8bc31f8,     0xf8b9514e,\n+    0xf8ad428d,     0xf8a173f6,     0xf8ad60c2,     0xf8e38307,\n+    0xf8e003bb,     0xf8e513a5,     0xf8ea2019,     0xf8ff3260,\n+    0xf8fc5139,     0xf8f941cb,     0xf8ea722a,     0xf8f86315,\n+    0xf860814f,     0xf86600bc,     0xf8651285,     0xf873222f,\n+    0xf87d339a,     0xf861501b,     0xf87441fc,     0xf86c7389,\n+    0xf87c62d3,     0xb82a83e4,     0xb83403e8,     0xb8331369,\n+    0xb8222099,     0xb82332c7,     0xb833508c,     0xb83c42b7,\n+    0xb8397078,     0xb83862fa,     0xb8ae8075,     0xb8b70307,\n+    0xb8b4120f,     0xb8a22001,     0xb8b83064,     0xb8ab537f,\n+    0xb8a94059,     0xb8ab73f1,     0xb8a1638c,     0xb8e08171,\n+    0xb8f00196,     0xb8fb13fd,     0xb8e1237a,     0xb8e4307d,\n+    0xb8e6533d,     0xb8f140e8,     0xb8ec7280,     0xb8e16058,\n+    0xb8608308,     0xb87903af,     0xb86312e9,     0xb8692224,\n+    0xb86130eb,     0xb869520e,     0xb8624169,     0xb86c718e,\n+    0xb8626286,     0x042401d9,     0x04b00564,     0x65ca020f,\n+    0x65d80976,     0x65ca05bb,     0x0456afa1,     0x0400044e,\n+    0x049091ec,     0x04daa143,     0x04d389c5,     0x0411827c,\n+    0x04901753,     0x0417b899,     0x041eb3b6,     0x04480b4b,\n+    0x048a17bb,     0x0481059d,     0x04dcb35d,     0x65808d4e,\n+    0x65cd9de6,     0x65869cda,     0x65c78893,     0x658292af,\n+    0x04ddaebb,     0x6582b451,     0x6580adc6,     0x65c1b42b,\n+    0x658da611,     0x6581958e,     0x65eb1f54,     0x65f723a3,\n+    0x65b94b70,     0x65fd76c6,     0x04505f22,     0x04107056,\n+    0x04363317,     0x04a33171,     0x046f337c,     0x049a2b65,\n+    0x045824c6,     0x041934e8,     0x040837bb,     0x044a21fa,\n+    0x65c738e3,     0x65c63b55,     0x65982096,     0x04412070,\n@@ -1982,0 +1982,4 @@\n+\n+address Assembler::locate_next_instruction(address inst) {\n+  return inst + Assembler::instruction_size;\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":1358,"deletions":1354,"binary":false,"changes":2712,"status":"modified"},{"patch":"@@ -31,0 +31,13 @@\n+#ifdef __GNUC__\n+\n+\/\/ __nop needs volatile so that compiler doesn't optimize it away\n+#define NOP() asm volatile (\"nop\");\n+\n+#elif defined(_MSC_VER)\n+\n+\/\/ Use MSVC instrinsic: https:\/\/docs.microsoft.com\/en-us\/cpp\/intrinsics\/arm64-intrinsics?view=vs-2019#I\n+#define NOP() __nop();\n+\n+#endif\n+\n+\n@@ -645,1 +658,1 @@\n-      asm volatile (\"nop\");\n+      NOP();\n@@ -685,0 +698,2 @@\n+  static address locate_next_instruction(address inst);\n+\n@@ -1560,0 +1575,5 @@\n+#ifdef _WIN64\n+\/\/ In MSVC, `mvn` is defined as a macro and it affects compilation\n+#undef mvn\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  pd_nof_caller_save_cpu_regs_frame_map = 19 - 2,  \/\/ number of registers killed by calls\n+  pd_nof_caller_save_cpu_regs_frame_map = 19 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),  \/\/ number of registers killed by calls\n@@ -50,2 +50,2 @@\n-  pd_first_callee_saved_reg = 19 - 2,\n-  pd_last_callee_saved_reg = 26 - 2,\n+  pd_first_callee_saved_reg = 19 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),\n+  pd_last_callee_saved_reg = 26 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),\n@@ -53,1 +53,1 @@\n-  pd_last_allocatable_cpu_reg = 16,\n+  pd_last_allocatable_cpu_reg = 16 R18_RESERVED_ONLY(- 1),\n@@ -63,1 +63,1 @@\n-  pd_last_cpu_reg = 16,\n+  pd_last_cpu_reg = 16 R18_RESERVED_ONLY(- 1),\n@@ -65,1 +65,1 @@\n-  pd_last_byte_reg = 16,\n+  pd_last_byte_reg = 16 R18_RESERVED_ONLY(- 1),\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Defs_aarch64.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FpuStackSim_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -184,1 +184,4 @@\n-  map_register(i, r18); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#ifndef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n+  map_register(i, r18_tls); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#endif\n@@ -202,0 +205,5 @@\n+#ifdef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n+  map_register(i, r18_tls); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#endif\n+\n@@ -230,0 +238,2 @@\n+#ifndef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n@@ -231,0 +241,1 @@\n+#endif\n@@ -256,1 +267,1 @@\n-  r18_oop_opr = as_oop_opr(r18);\n+  r18_oop_opr = as_oop_opr(r18_tls);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FrameMap_aarch64.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -546,1 +546,1 @@\n-      DIFFERENCE, NEXT_WORD, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT,\n+      DIFF, NEXT_WORD, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT,\n@@ -637,1 +637,1 @@\n-    cbnz(rscratch2, DIFFERENCE);\n+    cbnz(rscratch2, DIFF);\n@@ -663,1 +663,1 @@\n-    b(DIFFERENCE);\n+    b(DIFF);\n@@ -666,1 +666,1 @@\n-    cbnz(rscratch2, DIFFERENCE);\n+    cbnz(rscratch2, DIFF);\n@@ -690,1 +690,1 @@\n-    bind(DIFFERENCE);\n+    bind(DIFF);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shenandoah\/shenandoahBarrierSet.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoah_aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,9 @@\n+#if defined(_WIN64)\n+#define R18_RESERVED\n+#define R18_RESERVED_ONLY(code) code\n+#define NOT_R18_RESERVED(code)\n+#else\n+#define R18_RESERVED_ONLY(code)\n+#define NOT_R18_RESERVED(code) code\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/globalDefinitions_aarch64.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,14 +29,1 @@\n-\/\/ Interface for updating the instruction cache.  Whenever the VM\n-\/\/ modifies code, part of the processor instruction cache potentially\n-\/\/ has to be flushed.\n-\n-class ICache : public AbstractICache {\n- public:\n-  static void initialize();\n-  static void invalidate_word(address addr) {\n-    __builtin___clear_cache((char *)addr, (char *)(addr + 3));\n-  }\n-  static void invalidate_range(address start, int nbytes) {\n-    __builtin___clear_cache((char *)start, (char *)(start + nbytes));\n-  }\n-};\n+#include OS_CPU_HEADER(icache)\n","filename":"src\/hotspot\/cpu\/aarch64\/icache_aarch64.hpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+\n+#include \"precompiled.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -247,1 +250,4 @@\n-static void initLITables() __attribute__ ((constructor));\n+static void initLITables();\n+\/\/ Use an empty struct with a construtor as MSVC doesn't support `__attribute__ ((constructor))`\n+\/\/ See https:\/\/stackoverflow.com\/questions\/1113409\/attribute-constructor-equivalent-in-vc\n+static struct initLITables_t { initLITables_t(void) { initLITables(); } } _initLITables;\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2659,0 +2659,8 @@\n+RegSet MacroAssembler::call_clobbered_registers() {\n+  RegSet regs = RegSet::range(r0, r17) - RegSet::of(rscratch1, rscratch2);\n+#ifndef R18_RESERVED\n+  regs += r18_tls;\n+#endif\n+  return regs;\n+}\n+\n@@ -2661,1 +2669,1 @@\n-  push(RegSet::range(r0, r18) - RegSet::of(rscratch1, rscratch2) - exclude, sp);\n+  push(call_clobbered_registers() - exclude, sp);\n@@ -2681,1 +2689,1 @@\n-  pop(RegSet::range(r0, r18) - RegSet::of(rscratch1, rscratch2) - exclude, sp);\n+  pop(call_clobbered_registers() - exclude, sp);\n@@ -5274,1 +5282,1 @@\n-  if (VM_Version::supports_dcpop()) {\n+  if (VM_Version::features() & VM_Version::CPU_DCPOP) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -191,0 +191,7 @@\n+\/\/ Microsoft's MSVC team thinks that the __FUNCSIG__ is approximately (sympathy for calling conventions) equivalent to __PRETTY_FUNCTION__\n+\/\/ Also, from Clang patch: \"It is very similar to GCC's PRETTY_FUNCTION, except it prints the calling convention.\"\n+\/\/ https:\/\/reviews.llvm.org\/D3311\n+\n+#ifdef _WIN64\n+#define call_Unimplemented() _call_Unimplemented((address)__FUNCSIG__)\n+#else\n@@ -192,0 +199,1 @@\n+#endif\n@@ -199,1 +207,1 @@\n-  inline void cmp(Register Rd, unsigned imm) __attribute__ ((deprecated));\n+  inline void cmp(Register Rd, unsigned imm) = delete;\n@@ -473,0 +481,2 @@\n+  static RegSet call_clobbered_registers();\n+\n@@ -525,1 +535,1 @@\n-  void tbr(Condition cond, Register Rt, int bitpos, Label &dest, bool far = false) {\n+  void tbr(Condition cond, Register Rt, int bitpos, Label &dest, bool isfar = false) {\n@@ -528,1 +538,1 @@\n-    if (far)\n+    if (isfar)\n@@ -537,1 +547,1 @@\n-    if (far) {\n+    if (isfar) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-      jz = r14, j = r15, twoOverPiBase = r16, i = r17, qBase = r18;\n+      jz = r14, j = r15, twoOverPiBase = r16, i = r17, qBase = r19;\n@@ -1424,0 +1424,6 @@\n+\n+  enter();\n+  \/\/ r19 is used in TemplateInterpreterGenerator::generate_math_entry\n+  RegSet saved_regs = RegSet::of(r19);\n+  push (saved_regs, sp);\n+\n@@ -1441,1 +1447,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1448,1 +1454,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1468,1 +1474,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1477,1 +1483,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1487,0 +1493,2 @@\n+    pop(saved_regs, sp);\n+    leave();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_trig.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    \"r17\", \"r18\", \"r19\",\n+    \"r17\", NOT_R18_RESERVED(\"r18\") WIN64_ONLY(\"rtls\"), \"r19\",\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -94,1 +95,12 @@\n-CONSTANT_REGISTER_DECLARATION(Register, r18,  (18));\n+\n+\/\/ In the ABI for Windows+AArch64 the register r18 is used to store the pointer\n+\/\/ to the current thread's TEB (where TLS variables are stored). We could\n+\/\/ carefully save and restore r18 at key places, however Win32 Structured\n+\/\/ Exception Handling (SEH) is using TLS to unwind the stack. If r18 is used\n+\/\/ for any other purpose at the time of an exception happening, SEH would not\n+\/\/ be able to unwind the stack properly and most likely crash.\n+\/\/\n+\/\/ It's easier to avoid allocating r18 altogether.\n+\/\/\n+\/\/ See https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/arm64-windows-abi-conventions?view=vs-2019#integer-registers\n+CONSTANT_REGISTER_DECLARATION(Register, r18_tls,  (18));\n@@ -295,0 +307,2 @@\n+class RegSetIterator;\n+\n@@ -353,0 +367,13 @@\n+\n+private:\n+\n+  Register first() {\n+    uint32_t first = _bitset & -_bitset;\n+    return first ? as_Register(exact_log2(first)) : noreg;\n+  }\n+\n+public:\n+\n+  friend class RegSetIterator;\n+\n+  RegSetIterator begin();\n@@ -355,0 +382,30 @@\n+class RegSetIterator {\n+  RegSet _regs;\n+\n+public:\n+  RegSetIterator(RegSet x): _regs(x) {}\n+  RegSetIterator(const RegSetIterator& mit) : _regs(mit._regs) {}\n+\n+  RegSetIterator& operator++() {\n+    Register r = _regs.first();\n+    if (r != noreg)\n+      _regs -= r;\n+    return *this;\n+  }\n+\n+  bool operator==(const RegSetIterator& rhs) const {\n+    return _regs.bits() == rhs._regs.bits();\n+  }\n+  bool operator!=(const RegSetIterator& rhs) const {\n+    return ! (rhs == *this);\n+  }\n+\n+  Register operator*() {\n+    return _regs.first();\n+  }\n+};\n+\n+inline RegSetIterator RegSet::begin() {\n+  return RegSetIterator(*this);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-REGISTER_DEFINITION(Register, r18);\n+REGISTER_DEFINITION(Register, r18_tls); \/\/ see comment in register_aarch64.hpp\n","filename":"src\/hotspot\/cpu\/aarch64\/register_definitions_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1095,1 +1095,1 @@\n-    const Register send = r17, dend = r18;\n+    const Register send = r17, dend = r16;\n@@ -1285,0 +1285,2 @@\n+    RegSet clobbered\n+      = MacroAssembler::call_clobbered_registers() - rscratch1;\n@@ -1287,2 +1289,3 @@\n-    for (Register r = r3; r <= r18; r++)\n-      if (r != rscratch1) __ mov(r, rscratch1);\n+    for (RegSetIterator it = clobbered.begin(); *it != noreg; ++it) {\n+      __ mov(*it, rscratch1);\n+    }\n@@ -1290,0 +1293,1 @@\n+\n@@ -1722,1 +1726,2 @@\n-    \/\/ Registers used as temps (r18, r19, r20 are save-on-entry)\n+    \/\/ Registers used as temps (r19, r20, r21, r22 are save-on-entry)\n+    const Register copied_oop  = r22;       \/\/ actual oop copied\n@@ -1725,1 +1730,0 @@\n-    const Register copied_oop  = r18;       \/\/ actual oop copied\n@@ -1762,2 +1766,1 @@\n-\n-    __ push(RegSet::of(r18, r19, r20, r21), sp);\n+    __ push(RegSet::of(r19, r20, r21, r22), sp);\n@@ -1832,1 +1835,1 @@\n-    __ pop(RegSet::of(r18, r19, r20, r21), sp);\n+    __ pop(RegSet::of(r19, r20, r21, r22), sp);\n@@ -2009,1 +2012,1 @@\n-    const Register lh                = r18; \/\/ layout helper\n+    const Register lh                = r15; \/\/ layout helper\n@@ -2080,1 +2083,1 @@\n-    const Register r18_elsize = lh; \/\/ element size\n+    const Register r15_elsize = lh; \/\/ element size\n@@ -2101,2 +2104,2 @@\n-    __ tbnz(r18_elsize, 1, L_copy_ints);\n-    __ tbnz(r18_elsize, 0, L_copy_shorts);\n+    __ tbnz(r15_elsize, 1, L_copy_ints);\n+    __ tbnz(r15_elsize, 0, L_copy_shorts);\n@@ -2115,1 +2118,1 @@\n-    __ tbnz(r18_elsize, 0, L_copy_longs);\n+    __ tbnz(r15_elsize, 0, L_copy_longs);\n@@ -2126,2 +2129,2 @@\n-      __ andw(lh, lh, Klass::_lh_log2_element_size_mask); \/\/ lh -> r18_elsize\n-      __ cmpw(r18_elsize, LogBytesPerLong);\n+      __ andw(lh, lh, Klass::_lh_log2_element_size_mask); \/\/ lh -> r15_elsize\n+      __ cmpw(r15_elsize, LogBytesPerLong);\n@@ -2145,2 +2148,2 @@\n-    __ load_klass(r18, dst);\n-    __ cmp(scratch_src_klass, r18); \/\/ usual case is exact equality\n+    __ load_klass(r15, dst);\n+    __ cmp(scratch_src_klass, r15); \/\/ usual case is exact equality\n@@ -2162,1 +2165,1 @@\n-    \/\/ live at this point:  scratch_src_klass, scratch_length, r18 (dst_klass)\n+    \/\/ live at this point:  scratch_src_klass, scratch_length, r15 (dst_klass)\n@@ -2165,1 +2168,1 @@\n-      __ ldrw(rscratch1, Address(r18, lh_offset));\n+      __ ldrw(rscratch1, Address(r15, lh_offset));\n@@ -2172,1 +2175,1 @@\n-                             r18, L_failed);\n+                             r15, L_failed);\n@@ -5069,2 +5072,2 @@\n-      Register reg = c_rarg0;\n-      Pa_base = reg;       \/\/ Argument registers\n+      RegSetIterator regs = (RegSet::range(r0, r26) - r18_tls).begin();\n+      Pa_base = *regs;       \/\/ Argument registers\n@@ -5074,5 +5077,5 @@\n-        Pb_base = ++reg;\n-      Pn_base = ++reg;\n-      Rlen= ++reg;\n-      inv = ++reg;\n-      Pm_base = ++reg;\n+        Pb_base = *++regs;\n+      Pn_base = *++regs;\n+      Rlen= *++regs;\n+      inv = *++regs;\n+      Pm_base = *++regs;\n@@ -5081,4 +5084,4 @@\n-      Ra =  ++reg;        \/\/ The current digit of a, b, n, and m.\n-      Rb =  ++reg;\n-      Rm =  ++reg;\n-      Rn =  ++reg;\n+      Ra =  *++regs;        \/\/ The current digit of a, b, n, and m.\n+      Rb =  *++regs;\n+      Rm =  *++regs;\n+      Rn =  *++regs;\n@@ -5086,4 +5089,4 @@\n-      Pa =  ++reg;        \/\/ Pointers to the current\/next digit of a, b, n, and m.\n-      Pb =  ++reg;\n-      Pm =  ++reg;\n-      Pn =  ++reg;\n+      Pa =  *++regs;        \/\/ Pointers to the current\/next digit of a, b, n, and m.\n+      Pb =  *++regs;\n+      Pm =  *++regs;\n+      Pn =  *++regs;\n@@ -5091,3 +5094,3 @@\n-      t0 =  ++reg;        \/\/ Three registers which form a\n-      t1 =  ++reg;        \/\/ triple-precision accumuator.\n-      t2 =  ++reg;\n+      t0 =  *++regs;        \/\/ Three registers which form a\n+      t1 =  *++regs;        \/\/ triple-precision accumuator.\n+      t2 =  *++regs;\n@@ -5095,2 +5098,2 @@\n-      Ri =  ++reg;        \/\/ Inner and outer loop indexes.\n-      Rj =  ++reg;\n+      Ri =  *++regs;        \/\/ Inner and outer loop indexes.\n+      Rj =  *++regs;\n@@ -5098,4 +5101,4 @@\n-      Rhi_ab = ++reg;     \/\/ Product registers: low and high parts\n-      Rlo_ab = ++reg;     \/\/ of a*b and m*n.\n-      Rhi_mn = ++reg;\n-      Rlo_mn = ++reg;\n+      Rhi_ab = *++regs;     \/\/ Product registers: low and high parts\n+      Rlo_ab = *++regs;     \/\/ of a*b and m*n.\n+      Rhi_mn = *++regs;\n+      Rlo_mn = *++regs;\n@@ -5104,1 +5107,1 @@\n-      _toSave = RegSet::range(r19, reg) + Pm_base;\n+      _toSave = RegSet::range(r19, *regs) + Pm_base;\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":48,"deletions":45,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -40,46 +40,0 @@\n-#include <asm\/hwcap.h>\n-#include <sys\/auxv.h>\n-#include <sys\/prctl.h>\n-\n-#ifndef HWCAP_AES\n-#define HWCAP_AES   (1<<3)\n-#endif\n-\n-#ifndef HWCAP_PMULL\n-#define HWCAP_PMULL (1<<4)\n-#endif\n-\n-#ifndef HWCAP_SHA1\n-#define HWCAP_SHA1  (1<<5)\n-#endif\n-\n-#ifndef HWCAP_SHA2\n-#define HWCAP_SHA2  (1<<6)\n-#endif\n-\n-#ifndef HWCAP_CRC32\n-#define HWCAP_CRC32 (1<<7)\n-#endif\n-\n-#ifndef HWCAP_ATOMICS\n-#define HWCAP_ATOMICS (1<<8)\n-#endif\n-\n-#ifndef HWCAP_SHA512\n-#define HWCAP_SHA512 (1 << 21)\n-#endif\n-\n-#ifndef HWCAP_SVE\n-#define HWCAP_SVE (1 << 22)\n-#endif\n-\n-#ifndef HWCAP2_SVE2\n-#define HWCAP2_SVE2 (1 << 1)\n-#endif\n-\n-#ifndef PR_SVE_GET_VL\n-\/\/ For old toolchains which do not have SVE related macros defined.\n-#define PR_SVE_SET_VL   50\n-#define PR_SVE_GET_VL   51\n-#endif\n-\n@@ -92,15 +46,0 @@\n-bool VM_Version::_dcpop;\n-int VM_Version::_initial_sve_vector_length;\n-VM_Version::PsrInfo VM_Version::_psr_info   = { 0, };\n-\n-static BufferBlob* stub_blob;\n-static const int stub_size = 550;\n-\n-extern \"C\" {\n-  typedef void (*getPsrInfo_stub_t)(void*);\n-}\n-static getPsrInfo_stub_t getPsrInfo_stub = NULL;\n-\n-\n-class VM_Version_StubGenerator: public StubCodeGenerator {\n- public:\n@@ -108,27 +47,4 @@\n-  VM_Version_StubGenerator(CodeBuffer *c) : StubCodeGenerator(c) {}\n-\n-  address generate_getPsrInfo() {\n-    StubCodeMark mark(this, \"VM_Version\", \"getPsrInfo_stub\");\n-#   define __ _masm->\n-    address start = __ pc();\n-\n-    \/\/ void getPsrInfo(VM_Version::PsrInfo* psr_info);\n-\n-    address entry = __ pc();\n-\n-    __ enter();\n-\n-    __ get_dczid_el0(rscratch1);\n-    __ strw(rscratch1, Address(c_rarg0, in_bytes(VM_Version::dczid_el0_offset())));\n-\n-    __ get_ctr_el0(rscratch1);\n-    __ strw(rscratch1, Address(c_rarg0, in_bytes(VM_Version::ctr_el0_offset())));\n-\n-    __ leave();\n-    __ ret(lr);\n-\n-#   undef __\n-\n-    return start;\n-  }\n-};\n+int VM_Version::_zva_length;\n+int VM_Version::_dcache_line_size;\n+int VM_Version::_icache_line_size;\n+int VM_Version::_initial_sve_vector_length;\n@@ -136,1 +52,1 @@\n-void VM_Version::get_processor_features() {\n+void VM_Version::initialize() {\n@@ -143,1 +59,1 @@\n-  getPsrInfo_stub(&_psr_info);\n+  get_os_cpu_info();\n@@ -185,33 +101,0 @@\n-  uint64_t auxv = getauxval(AT_HWCAP);\n-  uint64_t auxv2 = getauxval(AT_HWCAP2);\n-\n-  char buf[512];\n-\n-  _features = auxv;\n-\n-  int cpu_lines = 0;\n-  if (FILE *f = fopen(\"\/proc\/cpuinfo\", \"r\")) {\n-    \/\/ need a large buffer as the flags line may include lots of text\n-    char buf[1024], *p;\n-    while (fgets(buf, sizeof (buf), f) != NULL) {\n-      if ((p = strchr(buf, ':')) != NULL) {\n-        long v = strtol(p+1, NULL, 0);\n-        if (strncmp(buf, \"CPU implementer\", sizeof \"CPU implementer\" - 1) == 0) {\n-          _cpu = v;\n-          cpu_lines++;\n-        } else if (strncmp(buf, \"CPU variant\", sizeof \"CPU variant\" - 1) == 0) {\n-          _variant = v;\n-        } else if (strncmp(buf, \"CPU part\", sizeof \"CPU part\" - 1) == 0) {\n-          if (_model != v)  _model2 = _model;\n-          _model = v;\n-        } else if (strncmp(buf, \"CPU revision\", sizeof \"CPU revision\" - 1) == 0) {\n-          _revision = v;\n-        } else if (strncmp(buf, \"flags\", sizeof(\"flags\") - 1) == 0) {\n-          if (strstr(p+1, \"dcpop\")) {\n-            _dcpop = true;\n-          }\n-        }\n-      }\n-    }\n-    fclose(f);\n-  }\n@@ -223,1 +106,1 @@\n-    if (_dcpop) {\n+    if (_features & CPU_DCPOP) {\n@@ -304,1 +187,1 @@\n-  \/\/ If an olde style \/proc\/cpuinfo (cpu_lines == 1) then if _model is an A57 (0xd07)\n+  \/\/ If an olde style \/proc\/cpuinfo (cores == 1) then if _model is an A57 (0xd07)\n@@ -307,1 +190,1 @@\n-  if (_cpu == CPU_ARM && cpu_lines == 1 && _model == 0xd07) _features |= CPU_A53MAC;\n+  if (_cpu == CPU_ARM && os::processor_count() == 1 && _model == 0xd07) _features |= CPU_A53MAC;\n@@ -309,0 +192,1 @@\n+  char buf[512];\n@@ -311,9 +195,9 @@\n-  if (auxv & HWCAP_ASIMD) strcat(buf, \", simd\");\n-  if (auxv & HWCAP_CRC32) strcat(buf, \", crc\");\n-  if (auxv & HWCAP_AES)   strcat(buf, \", aes\");\n-  if (auxv & HWCAP_SHA1)  strcat(buf, \", sha1\");\n-  if (auxv & HWCAP_SHA2)  strcat(buf, \", sha256\");\n-  if (auxv & HWCAP_SHA512) strcat(buf, \", sha512\");\n-  if (auxv & HWCAP_ATOMICS) strcat(buf, \", lse\");\n-  if (auxv & HWCAP_SVE) strcat(buf, \", sve\");\n-  if (auxv2 & HWCAP2_SVE2) strcat(buf, \", sve2\");\n+  if (_features & CPU_ASIMD) strcat(buf, \", simd\");\n+  if (_features & CPU_CRC32) strcat(buf, \", crc\");\n+  if (_features & CPU_AES)   strcat(buf, \", aes\");\n+  if (_features & CPU_SHA1)  strcat(buf, \", sha1\");\n+  if (_features & CPU_SHA2)  strcat(buf, \", sha256\");\n+  if (_features & CPU_SHA512) strcat(buf, \", sha512\");\n+  if (_features & CPU_LSE) strcat(buf, \", lse\");\n+  if (_features & CPU_SVE) strcat(buf, \", sve\");\n+  if (_features & CPU_SVE2) strcat(buf, \", sve2\");\n@@ -324,1 +208,1 @@\n-    UseCRC32 = (auxv & HWCAP_CRC32) != 0;\n+    UseCRC32 = (_features & CPU_CRC32) != 0;\n@@ -327,1 +211,1 @@\n-  if (UseCRC32 && (auxv & HWCAP_CRC32) == 0) {\n+  if (UseCRC32 && (_features & CPU_CRC32) == 0) {\n@@ -341,1 +225,1 @@\n-  if (auxv & HWCAP_ATOMICS) {\n+  if (_features & CPU_LSE) {\n@@ -351,1 +235,1 @@\n-  if (auxv & HWCAP_AES) {\n+  if (_features & CPU_AES) {\n@@ -379,1 +263,1 @@\n-  if (auxv & HWCAP_CRC32) {\n+  if (_features & CPU_CRC32) {\n@@ -397,1 +281,1 @@\n-  if (auxv & (HWCAP_SHA1 | HWCAP_SHA2)) {\n+  if (_features & (CPU_SHA1 | CPU_SHA2)) {\n@@ -406,1 +290,1 @@\n-  if (UseSHA && (auxv & HWCAP_SHA1)) {\n+  if (UseSHA && (_features & CPU_SHA1)) {\n@@ -415,1 +299,1 @@\n-  if (UseSHA && (auxv & HWCAP_SHA2)) {\n+  if (UseSHA && (_features & CPU_SHA2)) {\n@@ -424,1 +308,1 @@\n-  if (UseSHA && (auxv & HWCAP_SHA512)) {\n+  if (UseSHA && (_features & CPU_SHA512)) {\n@@ -438,1 +322,1 @@\n-  if (auxv & HWCAP_PMULL) {\n+  if (_features & CPU_PMULL) {\n@@ -459,1 +343,1 @@\n-  if (auxv & HWCAP_SVE) {\n+  if (_features & CPU_SVE) {\n@@ -461,1 +345,1 @@\n-      FLAG_SET_DEFAULT(UseSVE, (auxv2 & HWCAP2_SVE2) ? 2 : 1);\n+      FLAG_SET_DEFAULT(UseSVE, (_features & CPU_SVE2) ? 2 : 1);\n@@ -464,1 +348,1 @@\n-      _initial_sve_vector_length = prctl(PR_SVE_GET_VL);\n+      _initial_sve_vector_length = get_current_sve_vector_length();\n@@ -512,1 +396,1 @@\n-      int new_vl = prctl(PR_SVE_SET_VL, MaxVectorSize);\n+      int new_vl = set_and_get_current_sve_vector_lenght(MaxVectorSize);\n@@ -514,3 +398,1 @@\n-      \/\/ If MaxVectorSize is larger than system largest supported SVE vector length, above prctl()\n-      \/\/ call will set task vector length to the system largest supported value. So, we also update\n-      \/\/ MaxVectorSize to that largest supported value.\n+      \/\/ Update MaxVectorSize to the largest supported value.\n@@ -557,16 +439,0 @@\n-}\n-\n-void VM_Version::initialize() {\n-  ResourceMark rm;\n-\n-  stub_blob = BufferBlob::create(\"getPsrInfo_stub\", stub_size);\n-  if (stub_blob == NULL) {\n-    vm_exit_during_initialization(\"Unable to allocate getPsrInfo_stub\");\n-  }\n-\n-  CodeBuffer c(stub_blob);\n-  VM_Version_StubGenerator g(&c);\n-  getPsrInfo_stub = CAST_TO_FN_PTR(getPsrInfo_stub_t,\n-                                   g.generate_getPsrInfo());\n-\n-  get_processor_features();\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":34,"deletions":168,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -43,1 +43,4 @@\n-  static bool _dcpop;\n+\n+  static int _zva_length;\n+  static int _dcache_line_size;\n+  static int _icache_line_size;\n@@ -46,6 +49,8 @@\n-  struct PsrInfo {\n-    uint32_t dczid_el0;\n-    uint32_t ctr_el0;\n-  };\n-  static PsrInfo _psr_info;\n-  static void get_processor_features();\n+  \/\/ Read additional info using OS-specific interfaces\n+  static void get_os_cpu_info();\n+\n+  \/\/ Sets the SVE length and returns a new actual value or negative on error.\n+  \/\/ If the len is larger than the system largest supported SVE vector length,\n+  \/\/ the function sets the largest supported value.\n+  static int set_and_get_current_sve_vector_lenght(int len);\n+  static int get_current_sve_vector_length();\n@@ -101,2 +106,7 @@\n-    CPU_STXR_PREFETCH= (1 << 29),\n-    CPU_A53MAC       = (1 << 30),\n+    CPU_DCPOP        = (1<<16),\n+    CPU_SHA512       = (1<<21),\n+    CPU_SVE          = (1<<22),\n+    \/\/ flags above must follow Linux HWCAP\n+    CPU_SVE2         = (1<<28),\n+    CPU_STXR_PREFETCH= (1<<29),\n+    CPU_A53MAC       = (1<<30),\n@@ -110,10 +120,2 @@\n-  static bool supports_dcpop()                { return _dcpop; }\n-  static int get_initial_sve_vector_length()  { return _initial_sve_vector_length; };\n-  static ByteSize dczid_el0_offset() { return byte_offset_of(PsrInfo, dczid_el0); }\n-  static ByteSize ctr_el0_offset()   { return byte_offset_of(PsrInfo, ctr_el0); }\n-  static bool is_zva_enabled() {\n-    \/\/ Check the DZP bit (bit 4) of dczid_el0 is zero\n-    \/\/ and block size (bit 0~3) is not zero.\n-    return ((_psr_info.dczid_el0 & 0x10) == 0 &&\n-            (_psr_info.dczid_el0 & 0xf) != 0);\n-  }\n+\n+  static bool is_zva_enabled() { return 0 <= _zva_length; }\n@@ -122,7 +124,1 @@\n-    return 4 << (_psr_info.dczid_el0 & 0xf);\n-  }\n-  static int icache_line_size() {\n-    return (1 << (_psr_info.ctr_el0 & 0x0f)) * 4;\n-  }\n-  static int dcache_line_size() {\n-    return (1 << ((_psr_info.ctr_el0 >> 16) & 0x0f)) * 4;\n+    return _zva_length;\n@@ -130,0 +126,5 @@\n+\n+  static int icache_line_size() { return _icache_line_size; }\n+  static int dcache_line_size() { return _dcache_line_size; }\n+  static int get_initial_sve_vector_length()  { return _initial_sve_vector_length; };\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":27,"deletions":26,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_ext_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"code\/nativeInst.hpp\"\n@@ -121,1 +122,3 @@\n-#ifdef _M_AMD64\n+#if defined(_M_ARM64)\n+  #define __CPU__ aarch64\n+#elif defined(_M_AMD64)\n@@ -127,1 +130,4 @@\n-#if INCLUDE_AOT\n+#if defined(USE_VECTORED_EXCEPTION_HANDLING)\n+PVOID  topLevelVectoredExceptionHandler = NULL;\n+LPTOP_LEVEL_EXCEPTION_FILTER previousUnhandledExceptionFilter = NULL;\n+#elif INCLUDE_AOT\n@@ -150,1 +156,1 @@\n-#if INCLUDE_AOT\n+#if defined(USE_VECTORED_EXCEPTION_HANDLING) || INCLUDE_AOT\n@@ -459,0 +465,6 @@\n+#ifdef USE_VECTORED_EXCEPTION_HANDLING\n+  \/\/ Any exception is caught by the Vectored Exception Handler, so VM can\n+  \/\/ generate error dump when an exception occurred in non-Java thread\n+  \/\/ (e.g. VM thread).\n+  thread->call_run();\n+#else\n@@ -468,0 +480,1 @@\n+#endif\n@@ -1430,1 +1443,2 @@\n-    {IMAGE_FILE_MACHINE_AMD64,     (char*)\"AMD 64\"}\n+    {IMAGE_FILE_MACHINE_AMD64,     (char*)\"AMD 64\"},\n+    {IMAGE_FILE_MACHINE_ARM64,     (char*)\"ARM 64\"}\n@@ -1432,1 +1446,3 @@\n-#if (defined _M_AMD64)\n+#if (defined _M_ARM64)\n+  static const uint16_t running_arch = IMAGE_FILE_MACHINE_ARM64;\n+#elif (defined _M_AMD64)\n@@ -1438,1 +1454,1 @@\n-         is defined :_M_AMD64 or _M_IX86\n+         is defined :_M_AMD64 or _M_IX86 or _M_ARM64\n@@ -1733,1 +1749,2 @@\n-  if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64) {\n+  if ((si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64) ||\n+      (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_ARM64)) {\n@@ -2141,1 +2158,8 @@\n-#ifdef _M_AMD64\n+#if defined(_M_ARM64)\n+  \/\/ Do not blow up if no thread info available.\n+  if (thread) {\n+    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->Pc);\n+  }\n+  \/\/ Set pc to handler\n+  exceptionInfo->ContextRecord->Pc = (DWORD64)handler;\n+#elif defined(_M_AMD64)\n@@ -2239,1 +2263,11 @@\n-#ifdef  _M_AMD64\n+#if defined(_M_ARM64)\n+  PCONTEXT ctx = exceptionInfo->ContextRecord;\n+  address pc = (address)ctx->Sp;\n+  assert(pc[0] == 0x83, \"not an sdiv opcode\"); \/\/Fixme did i get the right opcode?\n+  assert(ctx->X4 == min_jint, \"unexpected idiv exception\");\n+  \/\/ set correct result values and continue after idiv instruction\n+  ctx->Pc = (uint64_t)pc + 4;        \/\/ idiv reg, reg, reg  is 4 bytes\n+  ctx->X4 = (uint64_t)min_jint;      \/\/ result\n+  ctx->X5 = (uint64_t)0;             \/\/ remainder\n+  \/\/ Continue the execution\n+#elif defined(_M_AMD64)\n@@ -2270,0 +2304,1 @@\n+#if defined(_M_AMD64) || defined(_M_IX86)\n@@ -2315,0 +2350,1 @@\n+#endif\n@@ -2324,54 +2360,0 @@\n-bool os::win32::get_frame_at_stack_banging_point(JavaThread* thread,\n-        struct _EXCEPTION_POINTERS* exceptionInfo, address pc, frame* fr) {\n-  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;\n-  address addr = (address) exceptionRecord->ExceptionInformation[1];\n-  if (Interpreter::contains(pc)) {\n-    *fr = os::fetch_frame_from_context((void*)exceptionInfo->ContextRecord);\n-    if (!fr->is_first_java_frame()) {\n-      \/\/ get_frame_at_stack_banging_point() is only called when we\n-      \/\/ have well defined stacks so java_sender() calls do not need\n-      \/\/ to assert safe_for_sender() first.\n-      *fr = fr->java_sender();\n-    }\n-  } else {\n-    \/\/ more complex code with compiled code\n-    assert(!Interpreter::contains(pc), \"Interpreted methods should have been handled above\");\n-    CodeBlob* cb = CodeCache::find_blob(pc);\n-    if (cb == NULL || !cb->is_nmethod() || cb->is_frame_complete_at(pc)) {\n-      \/\/ Not sure where the pc points to, fallback to default\n-      \/\/ stack overflow handling\n-      return false;\n-    } else {\n-      *fr = os::fetch_frame_from_context((void*)exceptionInfo->ContextRecord);\n-      \/\/ in compiled code, the stack banging is performed just after the return pc\n-      \/\/ has been pushed on the stack\n-      *fr = frame(fr->sp() + 1, fr->fp(), (address)*(fr->sp()));\n-      if (!fr->is_java_frame()) {\n-        \/\/ See java_sender() comment above.\n-        *fr = fr->java_sender();\n-      }\n-    }\n-  }\n-  assert(fr->is_java_frame(), \"Safety check\");\n-  return true;\n-}\n-\n-#if INCLUDE_AOT\n-LONG WINAPI topLevelVectoredExceptionFilter(struct _EXCEPTION_POINTERS* exceptionInfo) {\n-  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;\n-  address addr = (address) exceptionRecord->ExceptionInformation[1];\n-  address pc = (address) exceptionInfo->ContextRecord->Rip;\n-\n-  \/\/ Handle the case where we get an implicit exception in AOT generated\n-  \/\/ code.  AOT DLL's loaded are not registered for structured exceptions.\n-  \/\/ If the exception occurred in the codeCache or AOT code, pass control\n-  \/\/ to our normal exception handler.\n-  CodeBlob* cb = CodeCache::find_blob(pc);\n-  if (cb != NULL) {\n-    return topLevelExceptionFilter(exceptionInfo);\n-  }\n-\n-  return EXCEPTION_CONTINUE_SEARCH;\n-}\n-#endif\n-\n@@ -2383,1 +2365,3 @@\n-#ifdef _M_AMD64\n+#if defined(_M_ARM64)\n+  address pc = (address) exceptionInfo->ContextRecord->Pc;\n+#elif defined(_M_AMD64)\n@@ -2466,0 +2450,1 @@\n+#if !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -2468,0 +2453,1 @@\n+#endif\n@@ -2473,0 +2459,1 @@\n+#if defined(_M_AMD64) || defined(_M_IX86)\n@@ -2478,0 +2465,1 @@\n+#endif\n@@ -2508,0 +2496,1 @@\n+#if !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -2510,0 +2499,1 @@\n+#endif\n@@ -2554,0 +2544,21 @@\n+#ifdef _M_ARM64\n+      \/\/ Unsafe memory access\n+      CompiledMethod* nm = NULL;\n+      JavaThread* thread = (JavaThread*)t;\n+      if (in_java) {\n+        CodeBlob* cb = CodeCache::find_blob_unsafe(pc);\n+        nm = (cb != NULL) ? cb->as_compiled_method_or_null() : NULL;\n+      }\n+\n+      bool is_unsafe_arraycopy = (in_native || in_java) && UnsafeCopyMemory::contains_pc(pc);\n+      if (is_unsafe_arraycopy ||\n+          ((in_vm || in_native) && thread->doing_unsafe_access()) ||\n+          (nm != NULL && nm->has_unsafe_access())) {\n+        address next_pc =  Assembler::locate_next_instruction(pc);\n+        if (is_unsafe_arraycopy) {\n+          next_pc = UnsafeCopyMemory::page_error_continue_pc(pc);\n+        }\n+        return Handle_Exception(exceptionInfo, SharedRuntime::handle_unsafe_access(thread, next_pc));\n+      }\n+#endif\n+\n@@ -2565,0 +2576,1 @@\n+#if !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -2567,0 +2579,1 @@\n+#endif\n@@ -2589,0 +2602,13 @@\n+#ifdef _M_ARM64\n+    if (in_java &&\n+        (exception_code == EXCEPTION_ILLEGAL_INSTRUCTION ||\n+          exception_code == EXCEPTION_ILLEGAL_INSTRUCTION_2)) {\n+      if (nativeInstruction_at(pc)->is_sigill_zombie_not_entrant()) {\n+        if (TraceTraps) {\n+          tty->print_cr(\"trap: zombie_not_entrant\");\n+        }\n+        return Handle_Exception(exceptionInfo, SharedRuntime::get_handle_wrong_method_stub());\n+      }\n+    }\n+#endif\n+\n@@ -2599,0 +2625,2 @@\n+\n+#if defined(_M_AMD64) || defined(_M_IX86)\n@@ -2603,0 +2631,1 @@\n+#endif\n@@ -2605,0 +2634,1 @@\n+#if !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -2609,0 +2639,1 @@\n+#endif\n@@ -2612,0 +2643,51 @@\n+#if defined(USE_VECTORED_EXCEPTION_HANDLING) || INCLUDE_AOT\n+LONG WINAPI topLevelVectoredExceptionFilter(struct _EXCEPTION_POINTERS* exceptionInfo) {\n+  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;\n+#if defined(_M_ARM64)\n+  address pc = (address) exceptionInfo->ContextRecord->Pc;\n+#elif defined(_M_AMD64)\n+  address pc = (address) exceptionInfo->ContextRecord->Rip;\n+#else\n+  address pc = (address) exceptionInfo->ContextRecord->Eip;\n+#endif\n+\n+  \/\/ Fast path for code part of the code cache\n+  if (CodeCache::low_bound() <= pc && pc < CodeCache::high_bound()) {\n+    return topLevelExceptionFilter(exceptionInfo);\n+  }\n+\n+  \/\/ Handle the case where we get an implicit exception in AOT generated\n+  \/\/ code.  AOT DLL's loaded are not registered for structured exceptions.\n+  \/\/ If the exception occurred in the codeCache or AOT code, pass control\n+  \/\/ to our normal exception handler.\n+  CodeBlob* cb = CodeCache::find_blob(pc);\n+  if (cb != NULL) {\n+    return topLevelExceptionFilter(exceptionInfo);\n+  }\n+\n+  return EXCEPTION_CONTINUE_SEARCH;\n+}\n+#endif\n+\n+#if defined(USE_VECTORED_EXCEPTION_HANDLING)\n+LONG WINAPI topLevelUnhandledExceptionFilter(struct _EXCEPTION_POINTERS* exceptionInfo) {\n+  if (InterceptOSException) goto exit;\n+  DWORD exception_code = exceptionInfo->ExceptionRecord->ExceptionCode;\n+#if defined(_M_ARM64)\n+  address pc = (address)exceptionInfo->ContextRecord->Pc;\n+#elif defined(_M_AMD64)\n+  address pc = (address) exceptionInfo->ContextRecord->Rip;\n+#else\n+  address pc = (address) exceptionInfo->ContextRecord->Eip;\n+#endif\n+  Thread* t = Thread::current_or_null_safe();\n+\n+  if (exception_code != EXCEPTION_BREAKPOINT) {\n+    report_error(t, exception_code, pc, exceptionInfo->ExceptionRecord,\n+                exceptionInfo->ContextRecord);\n+  }\n+exit:\n+  return previousUnhandledExceptionFilter ? previousUnhandledExceptionFilter(exceptionInfo) : EXCEPTION_CONTINUE_SEARCH;\n+}\n+#endif\n+\n@@ -3459,0 +3541,4 @@\n+#ifdef _M_ARM64\n+  \/\/ AArch64 has a maximum addressable space of 48-bits\n+  return (char*)((1ull << 48) - 1);\n+#else\n@@ -3460,0 +3546,1 @@\n+#endif\n@@ -3983,1 +4070,4 @@\n-#if INCLUDE_AOT\n+#if defined(USE_VECTORED_EXCEPTION_HANDLING)\n+  topLevelVectoredExceptionHandler = AddVectoredExceptionHandler(1, topLevelVectoredExceptionFilter);\n+  previousUnhandledExceptionFilter = SetUnhandledExceptionFilter(topLevelUnhandledExceptionFilter);\n+#elif INCLUDE_AOT\n@@ -5440,1 +5530,1 @@\n-#elif defined (AMD64)\n+#elif defined(AMD64) || defined(_M_ARM64)\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":156,"deletions":66,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_AARCH64_ICACHE_AARCH64_HPP\n+#define OS_CPU_LINUX_AARCH64_ICACHE_AARCH64_HPP\n+\n+\/\/ Interface for updating the instruction cache.  Whenever the VM\n+\/\/ modifies code, part of the processor instruction cache potentially\n+\/\/ has to be flushed.\n+\n+class ICache : public AbstractICache {\n+ public:\n+  static void initialize();\n+  static void invalidate_word(address addr) {\n+    __builtin___clear_cache((char *)addr, (char *)(addr + 4));\n+  }\n+  static void invalidate_range(address start, int nbytes) {\n+    __builtin___clear_cache((char *)start, (char *)(start + nbytes));\n+  }\n+};\n+\n+#endif \/\/ OS_CPU_LINUX_AARCH64_ICACHE_AARCH64_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/icache_linux_aarch64.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -30,0 +30,137 @@\n+#include <asm\/hwcap.h>\n+#include <sys\/auxv.h>\n+#include <sys\/prctl.h>\n+\n+#ifndef HWCAP_AES\n+#define HWCAP_AES   (1<<3)\n+#endif\n+\n+#ifndef HWCAP_PMULL\n+#define HWCAP_PMULL (1<<4)\n+#endif\n+\n+#ifndef HWCAP_SHA1\n+#define HWCAP_SHA1  (1<<5)\n+#endif\n+\n+#ifndef HWCAP_SHA2\n+#define HWCAP_SHA2  (1<<6)\n+#endif\n+\n+#ifndef HWCAP_CRC32\n+#define HWCAP_CRC32 (1<<7)\n+#endif\n+\n+#ifndef HWCAP_ATOMICS\n+#define HWCAP_ATOMICS (1<<8)\n+#endif\n+\n+#ifndef HWCAP_DCPOP\n+#define HWCAP_DCPOP (1<<16)\n+#endif\n+\n+#ifndef HWCAP_SHA512\n+#define HWCAP_SHA512 (1 << 21)\n+#endif\n+\n+#ifndef HWCAP_SVE\n+#define HWCAP_SVE (1 << 22)\n+#endif\n+\n+#ifndef HWCAP2_SVE2\n+#define HWCAP2_SVE2 (1 << 1)\n+#endif\n+\n+#ifndef PR_SVE_GET_VL\n+\/\/ For old toolchains which do not have SVE related macros defined.\n+#define PR_SVE_SET_VL   50\n+#define PR_SVE_GET_VL   51\n+#endif\n+\n+int VM_Version::get_current_sve_vector_length() {\n+  assert(_features & CPU_SVE, \"should not call this\");\n+  return prctl(PR_SVE_GET_VL);\n+}\n+\n+int VM_Version::set_and_get_current_sve_vector_lenght(int length) {\n+  assert(_features & CPU_SVE, \"should not call this\");\n+  int new_length = prctl(PR_SVE_SET_VL, length);\n+  return new_length;\n+}\n+\n+void VM_Version::get_os_cpu_info() {\n+\n+  uint64_t auxv = getauxval(AT_HWCAP);\n+  uint64_t auxv2 = getauxval(AT_HWCAP2);\n+\n+  static_assert(CPU_FP      == HWCAP_FP);\n+  static_assert(CPU_ASIMD   == HWCAP_ASIMD);\n+  static_assert(CPU_EVTSTRM == HWCAP_EVTSTRM);\n+  static_assert(CPU_AES     == HWCAP_AES);\n+  static_assert(CPU_PMULL   == HWCAP_PMULL);\n+  static_assert(CPU_SHA1    == HWCAP_SHA1);\n+  static_assert(CPU_SHA2    == HWCAP_SHA2);\n+  static_assert(CPU_CRC32   == HWCAP_CRC32);\n+  static_assert(CPU_LSE     == HWCAP_ATOMICS);\n+  static_assert(CPU_DCPOP   == HWCAP_DCPOP);\n+  static_assert(CPU_SHA512  == HWCAP_SHA512);\n+  static_assert(CPU_SVE     == HWCAP_SVE);\n+  _features = auxv & (\n+      HWCAP_FP      |\n+      HWCAP_ASIMD   |\n+      HWCAP_EVTSTRM |\n+      HWCAP_AES     |\n+      HWCAP_PMULL   |\n+      HWCAP_SHA1    |\n+      HWCAP_SHA2    |\n+      HWCAP_CRC32   |\n+      HWCAP_ATOMICS |\n+      HWCAP_DCPOP   |\n+      HWCAP_SHA512  |\n+      HWCAP_SVE);\n+\n+  if (auxv2 & HWCAP2_SVE2) _features |= CPU_SVE2;\n+\n+  uint64_t ctr_el0;\n+  uint64_t dczid_el0;\n+  __asm__ (\n+    \"mrs %0, CTR_EL0\\n\"\n+    \"mrs %1, DCZID_EL0\\n\"\n+    : \"=r\"(ctr_el0), \"=r\"(dczid_el0)\n+  );\n+\n+  _icache_line_size = (1 << (ctr_el0 & 0x0f)) * 4;\n+  _dcache_line_size = (1 << ((ctr_el0 >> 16) & 0x0f)) * 4;\n+\n+  if (!(dczid_el0 & 0x10)) {\n+    _zva_length = 4 << (dczid_el0 & 0xf);\n+  }\n+\n+  int cpu_lines = 0;\n+  if (FILE *f = fopen(\"\/proc\/cpuinfo\", \"r\")) {\n+    \/\/ need a large buffer as the flags line may include lots of text\n+    char buf[1024], *p;\n+    while (fgets(buf, sizeof (buf), f) != NULL) {\n+      if ((p = strchr(buf, ':')) != NULL) {\n+        long v = strtol(p+1, NULL, 0);\n+        if (strncmp(buf, \"CPU implementer\", sizeof \"CPU implementer\" - 1) == 0) {\n+          _cpu = v;\n+          cpu_lines++;\n+        } else if (strncmp(buf, \"CPU variant\", sizeof \"CPU variant\" - 1) == 0) {\n+          _variant = v;\n+        } else if (strncmp(buf, \"CPU part\", sizeof \"CPU part\" - 1) == 0) {\n+          if (_model != v)  _model2 = _model;\n+          _model = v;\n+        } else if (strncmp(buf, \"CPU revision\", sizeof \"CPU revision\" - 1) == 0) {\n+          _revision = v;\n+        } else if (strncmp(buf, \"flags\", sizeof(\"flags\") - 1) == 0) {\n+          if (strstr(p+1, \"dcpop\")) {\n+            guarantee(_features & CPU_DCPOP, \"dcpop availability should be consistent\");\n+          }\n+        }\n+      }\n+    }\n+    fclose(f);\n+  }\n+  guarantee(cpu_lines == os::processor_count(), \"core count should be consistent\");\n+}\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vm_version_linux_aarch64.cpp","additions":137,"deletions":0,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ nothing required here\n+#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/assembler_windows_aarch64.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_ATOMIC_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_ATOMIC_WINDOWS_AARCH64_HPP\n+\n+#include <intrin.h>\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+\n+\n+\/\/ As per atomic.hpp all read-modify-write operations have to provide two-way\n+\/\/ barriers semantics. The memory_order parameter is ignored - we always provide\n+\/\/ the strongest\/most-conservative ordering\n+\/\/\n+\/\/ For AARCH64 we add explicit barriers in the stubs.\n+\n+template<size_t byte_size>\n+struct Atomic::PlatformAdd {\n+  template<typename D, typename I>\n+  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+\n+  template<typename D, typename I>\n+  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_and_fetch(dest, add_value, order) - add_value;\n+  }\n+};\n+\n+\/\/ The Interlocked* APIs only take long and will not accept __int32. That is\n+\/\/ acceptable on Windows, since long is a 32-bits integer type.\n+\n+#define DEFINE_INTRINSIC_ADD(IntrinsicName, IntrinsicType)                \\\n+  template<>                                                              \\\n+  template<typename D, typename I>                                        \\\n+  inline D Atomic::PlatformAdd<sizeof(IntrinsicType)>::add_and_fetch(D volatile* dest, \\\n+                                                                     I add_value, \\\n+                                                                     atomic_memory_order order) const { \\\n+    STATIC_ASSERT(sizeof(IntrinsicType) == sizeof(D));                    \\\n+    return PrimitiveConversions::cast<D>(                                 \\\n+      IntrinsicName(reinterpret_cast<IntrinsicType volatile *>(dest),     \\\n+                    PrimitiveConversions::cast<IntrinsicType>(add_value))); \\\n+  }\n+\n+DEFINE_INTRINSIC_ADD(InterlockedAdd,   long)\n+DEFINE_INTRINSIC_ADD(InterlockedAdd64, __int64)\n+\n+#undef DEFINE_INTRINSIC_ADD\n+\n+#define DEFINE_INTRINSIC_XCHG(IntrinsicName, IntrinsicType)               \\\n+  template<>                                                              \\\n+  template<typename T>                                                    \\\n+  inline T Atomic::PlatformXchg<sizeof(IntrinsicType)>::operator()(T volatile* dest, \\\n+                                                                   T exchange_value, \\\n+                                                                   atomic_memory_order order) const { \\\n+    STATIC_ASSERT(sizeof(IntrinsicType) == sizeof(T));                    \\\n+    return PrimitiveConversions::cast<T>(                                 \\\n+      IntrinsicName(reinterpret_cast<IntrinsicType volatile *>(dest),     \\\n+                    PrimitiveConversions::cast<IntrinsicType>(exchange_value))); \\\n+  }\n+\n+DEFINE_INTRINSIC_XCHG(InterlockedExchange,   long)\n+DEFINE_INTRINSIC_XCHG(InterlockedExchange64, __int64)\n+\n+#undef DEFINE_INTRINSIC_XCHG\n+\n+\/\/ Note: the order of the parameters is different between\n+\/\/ Atomic::PlatformCmpxchg<*>::operator() and the\n+\/\/ InterlockedCompareExchange* API.\n+\n+#define DEFINE_INTRINSIC_CMPXCHG(IntrinsicName, IntrinsicType)            \\\n+  template<>                                                              \\\n+  template<typename T>                                                    \\\n+  inline T Atomic::PlatformCmpxchg<sizeof(IntrinsicType)>::operator()(T volatile* dest, \\\n+                                                                      T compare_value, \\\n+                                                                      T exchange_value, \\\n+                                                                      atomic_memory_order order) const { \\\n+    STATIC_ASSERT(sizeof(IntrinsicType) == sizeof(T));                    \\\n+    return PrimitiveConversions::cast<T>(                                 \\\n+      IntrinsicName(reinterpret_cast<IntrinsicType volatile *>(dest),     \\\n+                    PrimitiveConversions::cast<IntrinsicType>(exchange_value), \\\n+                    PrimitiveConversions::cast<IntrinsicType>(compare_value))); \\\n+  }\n+\n+DEFINE_INTRINSIC_CMPXCHG(_InterlockedCompareExchange8, char) \/\/ Use the intrinsic as InterlockedCompareExchange8 does not exist\n+DEFINE_INTRINSIC_CMPXCHG(InterlockedCompareExchange,   long)\n+DEFINE_INTRINSIC_CMPXCHG(InterlockedCompareExchange64, __int64)\n+\n+#undef DEFINE_INTRINSIC_CMPXCHG\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_ATOMIC_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/atomic_windows_aarch64.hpp","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_INLINE_HPP\n+#define OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_INLINE_HPP\n+\n+#include <stdlib.h>\n+\n+\/\/ Efficient swapping of data bytes from Java byte\n+\/\/ ordering to native byte ordering and vice versa.\n+inline u2   Bytes::swap_u2(u2 x) {\n+  return _byteswap_ushort(x);\n+}\n+\n+inline u4   Bytes::swap_u4(u4 x) {\n+  return _byteswap_ulong(x);\n+}\n+\n+inline u8 Bytes::swap_u8(u8 x) {\n+  return _byteswap_uint64(x);\n+}\n+\n+#pragma warning(default: 4035) \/\/ Enable warning 4035: no return value\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_BYTES_WINDOWS_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/bytes_windows_aarch64.inline.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_COPY_WINDOWS_AARCH64_INLINE_HPP\n+#define OS_CPU_WINDOWS_AARCH64_COPY_WINDOWS_AARCH64_INLINE_HPP\n+\n+#include <string.h>\n+\n+static void pd_conjoint_words(const HeapWord* from, HeapWord* to, size_t count) {\n+  (void)memmove(to, from, count * HeapWordSize);\n+}\n+\n+static void pd_disjoint_words(const HeapWord* from, HeapWord* to, size_t count) {\n+  switch (count) {\n+  case 8:  to[7] = from[7];\n+  case 7:  to[6] = from[6];\n+  case 6:  to[5] = from[5];\n+  case 5:  to[4] = from[4];\n+  case 4:  to[3] = from[3];\n+  case 3:  to[2] = from[2];\n+  case 2:  to[1] = from[1];\n+  case 1:  to[0] = from[0];\n+  case 0:  break;\n+  default:\n+    (void)memcpy(to, from, count * HeapWordSize);\n+    break;\n+  }\n+}\n+\n+static void pd_disjoint_words_atomic(const HeapWord* from, HeapWord* to, size_t count) {\n+  switch (count) {\n+  case 8:  to[7] = from[7];\n+  case 7:  to[6] = from[6];\n+  case 6:  to[5] = from[5];\n+  case 5:  to[4] = from[4];\n+  case 4:  to[3] = from[3];\n+  case 3:  to[2] = from[2];\n+  case 2:  to[1] = from[1];\n+  case 1:  to[0] = from[0];\n+  case 0:  break;\n+  default: while (count-- > 0) {\n+             *to++ = *from++;\n+           }\n+           break;\n+  }\n+}\n+\n+static void pd_aligned_conjoint_words(const HeapWord* from, HeapWord* to, size_t count) {\n+ \/\/ pd_conjoint_words(from, to, count);\n+  (void)memmove(to, from, count * HeapWordSize);\n+}\n+\n+static void pd_aligned_disjoint_words(const HeapWord* from, HeapWord* to, size_t count) {\n+  pd_disjoint_words(from, to, count);\n+}\n+\n+static void pd_conjoint_bytes(const void* from, void* to, size_t count) {\n+  (void)memmove(to, from, count);\n+}\n+\n+static void pd_conjoint_bytes_atomic(const void* from, void* to, size_t count) {\n+  pd_conjoint_bytes(from, to, count);\n+}\n+\n+static void pd_conjoint_jshorts_atomic(const jshort* from, jshort* to, size_t count) {\n+  if (from > to) {\n+    while (count-- > 0) {\n+      \/\/ Copy forwards\n+      *to++ = *from++;\n+    }\n+  } else {\n+    from += count - 1;\n+    to   += count - 1;\n+    while (count-- > 0) {\n+      \/\/ Copy backwards\n+      *to-- = *from--;\n+    }\n+  }\n+}\n+\n+static void pd_conjoint_jints_atomic(const jint* from, jint* to, size_t count) {\n+  if (from > to) {\n+    while (count-- > 0) {\n+      \/\/ Copy forwards\n+      *to++ = *from++;\n+    }\n+  } else {\n+    from += count - 1;\n+    to   += count - 1;\n+    while (count-- > 0) {\n+      \/\/ Copy backwards\n+      *to-- = *from--;\n+    }\n+  }\n+}\n+\n+static void pd_conjoint_jlongs_atomic(const jlong* from, jlong* to, size_t count) {\n+  pd_conjoint_oops_atomic((const oop*)from, (oop*)to, count);\n+}\n+\n+static void pd_conjoint_oops_atomic(const oop* from, oop* to, size_t count) {\n+ if (from > to) {\n+    while (count-- > 0) {\n+      \/\/ Copy forwards\n+      *to++ = *from++;\n+    }\n+  } else {\n+    from += count - 1;\n+    to   += count - 1;\n+    while (count-- > 0) {\n+      \/\/ Copy backwards\n+      *to-- = *from--;\n+    }\n+  }\n+}\n+\n+static void pd_arrayof_conjoint_bytes(const HeapWord* from, HeapWord* to, size_t count) {\n+  pd_conjoint_bytes_atomic(from, to, count);\n+}\n+\n+static void pd_arrayof_conjoint_jshorts(const HeapWord* from, HeapWord* to, size_t count) {\n+  pd_conjoint_jshorts_atomic((const jshort*)from, (jshort*)to, count);\n+}\n+\n+static void pd_arrayof_conjoint_jints(const HeapWord* from, HeapWord* to, size_t count) {\n+  pd_conjoint_jints_atomic((const jint*)from, (jint*)to, count);\n+}\n+\n+static void pd_arrayof_conjoint_jlongs(const HeapWord* from, HeapWord* to, size_t count) {\n+  pd_conjoint_jlongs_atomic((const jlong*)from, (jlong*)to, count);\n+}\n+\n+static void pd_arrayof_conjoint_oops(const HeapWord* from, HeapWord* to, size_t count) {\n+ pd_conjoint_oops_atomic((const oop*)from, (oop*)to, count);\n+}\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_COPY_WINDOWS_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/copy_windows_aarch64.inline.hpp","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_GLOBALS_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_GLOBALS_WINDOWS_AARCH64_HPP\n+\n+\/\/ Sets the default values for platform dependent flags used by the runtime system.\n+\/\/ (see globals.hpp)\n+\n+define_pd_global(bool, DontYieldALot,            false);\n+\n+\/\/ Default stack size on Windows is determined by the executable (java.exe\n+\/\/ has a default value of 320K\/1MB [32bit\/64bit]). Depending on Windows version, changing\n+\/\/ ThreadStackSize to non-zero may have significant impact on memory usage.\n+\/\/ See comments in os_windows.cpp.\n+define_pd_global(intx, ThreadStackSize,          0); \/\/ 0 => use system default\n+define_pd_global(intx, VMThreadStackSize,        0);\n+\n+#ifdef ASSERT\n+define_pd_global(intx, CompilerThreadStackSize,  1024);\n+#else\n+define_pd_global(intx, CompilerThreadStackSize,  0);\n+#endif\n+\n+define_pd_global(uintx,JVMInvokeMethodSlack,     8192);\n+\n+\/\/ Used on 64 bit platforms for UseCompressedOops base address\n+define_pd_global(uintx,HeapBaseMinAddress,       2*G);\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_GLOBALS_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/globals_windows_aarch64.hpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_ICACHE_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_ICACHE_AARCH64_HPP\n+\n+\/\/ Interface for updating the instruction cache.  Whenever the VM\n+\/\/ modifies code, part of the processor instruction cache potentially\n+\/\/ has to be flushed.\n+\n+class ICache : public AbstractICache {\n+ public:\n+  static void initialize();\n+  static void invalidate_word(address addr) {\n+    invalidate_range(addr, 4);\n+  }\n+  static void invalidate_range(address start, int nbytes) {\n+    FlushInstructionCache((HANDLE)GetCurrentProcess(), start, (SIZE_T)(nbytes));\n+  }\n+};\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_ICACHE_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/icache_windows_aarch64.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_ORDERACCESS_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_ORDERACCESS_WINDOWS_AARCH64_HPP\n+\n+\/\/ Included in orderAccess.hpp header file.\n+#include <atomic>\n+using std::atomic_thread_fence;\n+#include <intrin.h>\n+#include \"vm_version_aarch64.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+\n+\/\/ Implementation of class OrderAccess.\n+\n+inline void OrderAccess::loadload()   { acquire(); }\n+inline void OrderAccess::storestore() { release(); }\n+inline void OrderAccess::loadstore()  { acquire(); }\n+inline void OrderAccess::storeload()  { fence(); }\n+\n+#define READ_MEM_BARRIER atomic_thread_fence(std::memory_order_acquire);\n+#define WRITE_MEM_BARRIER atomic_thread_fence(std::memory_order_release);\n+#define FULL_MEM_BARRIER atomic_thread_fence(std::memory_order_acq_rel);\n+\n+inline void OrderAccess::acquire() {\n+  READ_MEM_BARRIER;\n+}\n+\n+inline void OrderAccess::release() {\n+  WRITE_MEM_BARRIER;\n+}\n+\n+inline void OrderAccess::fence() {\n+  FULL_MEM_BARRIER;\n+}\n+\n+inline void OrderAccess::cross_modify_fence() { }\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_ORDERACCESS_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/orderAccess_windows_aarch64.hpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,311 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"jvm.h\"\n+#include \"asm\/macroAssembler.hpp\"\n+#include \"classfile\/classLoader.hpp\"\n+#include \"classfile\/systemDictionary.hpp\"\n+#include \"classfile\/vmSymbols.hpp\"\n+#include \"code\/codeCache.hpp\"\n+#include \"code\/icBuffer.hpp\"\n+#include \"code\/vtableStubs.hpp\"\n+#include \"code\/nativeInst.hpp\"\n+#include \"interpreter\/interpreter.hpp\"\n+#include \"memory\/allocation.inline.hpp\"\n+#include \"prims\/jniFastGetField.hpp\"\n+#include \"prims\/jvm_misc.hpp\"\n+#include \"runtime\/arguments.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+#include \"runtime\/java.hpp\"\n+#include \"runtime\/javaCalls.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/osThread.hpp\"\n+#include \"runtime\/sharedRuntime.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n+#include \"runtime\/timer.hpp\"\n+#include \"unwind_windows_aarch64.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/events.hpp\"\n+#include \"utilities\/vmError.hpp\"\n+\n+\n+\/\/ put OS-includes here\n+# include <sys\/types.h>\n+# include <signal.h>\n+# include <errno.h>\n+# include <stdlib.h>\n+# include <stdio.h>\n+# include <intrin.h>\n+\n+void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread) {\n+  f(value, method, args, thread);\n+}\n+\n+PRAGMA_DISABLE_MSVC_WARNING(4172)\n+\/\/ Returns an estimate of the current stack pointer. Result must be guaranteed\n+\/\/ to point into the calling threads stack, and be no lower than the current\n+\/\/ stack pointer.\n+address os::current_stack_pointer() {\n+  int dummy;\n+  address sp = (address)&dummy;\n+  return sp;\n+}\n+\n+address os::fetch_frame_from_context(const void* ucVoid,\n+                    intptr_t** ret_sp, intptr_t** ret_fp) {\n+  address  epc;\n+  CONTEXT* uc = (CONTEXT*)ucVoid;\n+\n+  if (uc != NULL) {\n+    epc = (address)uc->Pc;\n+    if (ret_sp) *ret_sp = (intptr_t*)uc->Sp;\n+    if (ret_fp) *ret_fp = (intptr_t*)uc->Fp;\n+  } else {\n+    \/\/ construct empty ExtendedPC for return value checking\n+    epc = NULL;\n+    if (ret_sp) *ret_sp = (intptr_t *)NULL;\n+    if (ret_fp) *ret_fp = (intptr_t *)NULL;\n+  }\n+  return epc;\n+}\n+\n+frame os::fetch_frame_from_context(const void* ucVoid) {\n+  intptr_t* sp;\n+  intptr_t* fp;\n+  address epc = fetch_frame_from_context(ucVoid, &sp, &fp);\n+  return frame(sp, fp, epc);\n+}\n+\n+bool os::win32::get_frame_at_stack_banging_point(JavaThread* thread,\n+        struct _EXCEPTION_POINTERS* exceptionInfo, address pc, frame* fr) {\n+  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;\n+  address addr = (address) exceptionRecord->ExceptionInformation[1];\n+  if (Interpreter::contains(pc)) {\n+    \/\/ interpreter performs stack banging after the fixed frame header has\n+    \/\/ been generated while the compilers perform it before. To maintain\n+    \/\/ semantic consistency between interpreted and compiled frames, the\n+    \/\/ method returns the Java sender of the current frame.\n+    *fr = os::fetch_frame_from_context((void*)exceptionInfo->ContextRecord);\n+    if (!fr->is_first_java_frame()) {\n+      assert(fr->safe_for_sender(thread), \"Safety check\");\n+      *fr = fr->java_sender();\n+    }\n+  } else {\n+    \/\/ more complex code with compiled code\n+    assert(!Interpreter::contains(pc), \"Interpreted methods should have been handled above\");\n+    CodeBlob* cb = CodeCache::find_blob(pc);\n+    if (cb == NULL || !cb->is_nmethod() || cb->is_frame_complete_at(pc)) {\n+      \/\/ Not sure where the pc points to, fallback to default\n+      \/\/ stack overflow handling\n+      return false;\n+    } else {\n+      \/\/ In compiled code, the stack banging is performed before LR\n+      \/\/ has been saved in the frame.  LR is live, and SP and FP\n+      \/\/ belong to the caller.\n+      intptr_t* fp = (intptr_t*)exceptionInfo->ContextRecord->Fp;\n+      intptr_t* sp = (intptr_t*)exceptionInfo->ContextRecord->Sp;\n+      address pc = (address)(exceptionInfo->ContextRecord->Lr\n+                         - NativeInstruction::instruction_size);\n+      *fr = frame(sp, fp, pc);\n+      if (!fr->is_java_frame()) {\n+        assert(fr->safe_for_sender(thread), \"Safety check\");\n+        assert(!fr->is_first_frame(), \"Safety check\");\n+        *fr = fr->java_sender();\n+      }\n+    }\n+  }\n+  assert(fr->is_java_frame(), \"Safety check\");\n+  return true;\n+}\n+\n+\/\/ By default, gcc always saves frame pointer rfp on this stack. This\n+\/\/ may get turned off by -fomit-frame-pointer.\n+frame os::get_sender_for_C_frame(frame* fr) {\n+  return frame(fr->link(), fr->link(), fr->sender_pc());\n+}\n+\n+frame os::current_frame() {\n+  typedef intptr_t*      get_fp_func           ();\n+  get_fp_func* func = CAST_TO_FN_PTR(get_fp_func*,\n+                                     StubRoutines::aarch64::get_previous_fp_entry());\n+  if (func == NULL) return frame();\n+  intptr_t* fp = (*func)();\n+  if (fp == NULL) {\n+    return frame();\n+  }\n+\n+  frame myframe((intptr_t*)os::current_stack_pointer(),\n+                (intptr_t*)fp,\n+                CAST_FROM_FN_PTR(address, os::current_frame));\n+  if (os::is_first_C_frame(&myframe)) {\n+\n+    \/\/ stack is not walkable\n+    return frame();\n+  } else {\n+    return os::get_sender_for_C_frame(&myframe);\n+  }\n+}\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/ thread stack\n+\n+\/\/ Minimum usable stack sizes required to get to user code. Space for\n+\/\/ HotSpot guard pages is added later.\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/ helper functions for fatal error handler\n+\n+void os::print_context(outputStream *st, const void *context) {\n+  if (context == NULL) return;\n+\n+  const CONTEXT* uc = (const CONTEXT*)context;\n+\n+  st->print_cr(\"Registers:\");\n+\n+  st->print(  \"X0 =\" INTPTR_FORMAT, uc->X0);\n+  st->print(\", X1 =\" INTPTR_FORMAT, uc->X1);\n+  st->print(\", X2 =\" INTPTR_FORMAT, uc->X2);\n+  st->print(\", X3 =\" INTPTR_FORMAT, uc->X3);\n+  st->cr();\n+  st->print(  \"X4 =\" INTPTR_FORMAT, uc->X4);\n+  st->print(\", X5 =\" INTPTR_FORMAT, uc->X5);\n+  st->print(\", X6 =\" INTPTR_FORMAT, uc->X6);\n+  st->print(\", X7 =\" INTPTR_FORMAT, uc->X7);\n+  st->cr();\n+  st->print(  \"X8 =\" INTPTR_FORMAT, uc->X8);\n+  st->print(\", X9 =\" INTPTR_FORMAT, uc->X9);\n+  st->print(\", X10=\" INTPTR_FORMAT, uc->X10);\n+  st->print(\", X11=\" INTPTR_FORMAT, uc->X11);\n+  st->cr();\n+  st->print(  \"X12=\" INTPTR_FORMAT, uc->X12);\n+  st->print(\", X13=\" INTPTR_FORMAT, uc->X13);\n+  st->print(\", X14=\" INTPTR_FORMAT, uc->X14);\n+  st->print(\", X15=\" INTPTR_FORMAT, uc->X15);\n+  st->cr();\n+  st->print(  \"X16=\" INTPTR_FORMAT, uc->X16);\n+  st->print(\", X17=\" INTPTR_FORMAT, uc->X17);\n+  st->print(\", X18=\" INTPTR_FORMAT, uc->X18);\n+  st->print(\", X19=\" INTPTR_FORMAT, uc->X19);\n+  st->cr();\n+  st->print(\", X20=\" INTPTR_FORMAT, uc->X20);\n+  st->print(\", X21=\" INTPTR_FORMAT, uc->X21);\n+  st->print(\", X22=\" INTPTR_FORMAT, uc->X22);\n+  st->print(\", X23=\" INTPTR_FORMAT, uc->X23);\n+  st->cr();\n+  st->print(\", X24=\" INTPTR_FORMAT, uc->X24);\n+  st->print(\", X25=\" INTPTR_FORMAT, uc->X25);\n+  st->print(\", X26=\" INTPTR_FORMAT, uc->X26);\n+  st->print(\", X27=\" INTPTR_FORMAT, uc->X27);\n+  st->print(\", X28=\" INTPTR_FORMAT, uc->X28);\n+  st->cr();\n+  st->cr();\n+\n+  intptr_t *sp = (intptr_t *)uc->Sp;\n+  st->print_cr(\"Top of Stack: (sp=\" PTR_FORMAT \")\", sp);\n+  print_hex_dump(st, (address)sp, (address)(sp + 32), sizeof(intptr_t));\n+  st->cr();\n+\n+  \/\/ Note: it may be unsafe to inspect memory near pc. For example, pc may\n+  \/\/ point to garbage if entry point in an nmethod is corrupted. Leave\n+  \/\/ this at the end, and hope for the best.\n+  address pc = (address)uc->Pc;\n+  st->print_cr(\"Instructions: (pc=\" PTR_FORMAT \")\", pc);\n+  print_hex_dump(st, pc - 32, pc + 32, sizeof(char));\n+  st->cr();\n+\n+}\n+\n+void os::print_register_info(outputStream *st, const void *context) {\n+ if (context == NULL) return;\n+\n+  const CONTEXT* uc = (const CONTEXT*)context;\n+\n+  st->print_cr(\"Register to memory mapping:\");\n+  st->cr();\n+  \/\/ this is only for the \"general purpose\" registers\n+  st->print(\" X0=\"); print_location(st, uc->X0);\n+  st->print(\" X1=\"); print_location(st, uc->X1);\n+  st->print(\" X2=\"); print_location(st, uc->X2);\n+  st->print(\" X3=\"); print_location(st, uc->X3);\n+  st->cr();\n+  st->print(\" X4=\"); print_location(st, uc->X4);\n+  st->print(\" X5=\"); print_location(st, uc->X5);\n+  st->print(\" X6=\"); print_location(st, uc->X6);\n+  st->print(\" X7=\"); print_location(st, uc->X7);\n+  st->cr();\n+  st->print(\" X8=\"); print_location(st, uc->X8);\n+  st->print(\" X9=\"); print_location(st, uc->X9);\n+  st->print(\"X10=\"); print_location(st, uc->X10);\n+  st->print(\"X11=\"); print_location(st, uc->X11);\n+  st->cr();\n+  st->print(\"X12=\"); print_location(st, uc->X12);\n+  st->print(\"X13=\"); print_location(st, uc->X13);\n+  st->print(\"X14=\"); print_location(st, uc->X14);\n+  st->print(\"X15=\"); print_location(st, uc->X15);\n+  st->cr();\n+  st->print(\"X16=\"); print_location(st, uc->X16);\n+  st->print(\"X17=\"); print_location(st, uc->X17);\n+  st->print(\"X18=\"); print_location(st, uc->X18);\n+  st->print(\"X19=\"); print_location(st, uc->X19);\n+  st->cr();\n+  st->print(\"X20=\"); print_location(st, uc->X20);\n+  st->print(\"X21=\"); print_location(st, uc->X21);\n+  st->print(\"X22=\"); print_location(st, uc->X22);\n+  st->print(\"X23=\"); print_location(st, uc->X23);\n+  st->cr();\n+  st->print(\"X24=\"); print_location(st, uc->X24);\n+  st->print(\"X25=\"); print_location(st, uc->X25);\n+  st->print(\"X26=\"); print_location(st, uc->X26);\n+  st->print(\"X27=\"); print_location(st, uc->X27);\n+  st->print(\"X28=\"); print_location(st, uc->X28);\n+\n+  st->cr();\n+}\n+\n+void os::setup_fpu() {\n+}\n+\n+bool os::supports_sse() {\n+  return true;\n+}\n+\n+#ifndef PRODUCT\n+void os::verify_stack_alignment() {\n+  assert(((intptr_t)os::current_stack_pointer() & (StackAlignmentInBytes-1)) == 0, \"incorrect stack alignment\");\n+}\n+#endif\n+\n+int os::extra_bang_size_in_bytes() {\n+  \/\/ AArch64 does not require the additional stack bang.\n+  return 0;\n+}\n+\n+extern \"C\" {\n+  int SpinPause() {\n+    return 0;\n+  }\n+};\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":311,"deletions":0,"binary":false,"changes":311,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n+\n+  static void setup_fpu();\n+  static bool supports_sse();\n+\n+  static bool      register_code_area(char *low, char *high) {\n+    \/\/ Using Vectored Exception Handling\n+    return true;\n+  }\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_INLINE_HPP\n+#define OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_INLINE_HPP\n+\n+#include \"runtime\/os.hpp\"\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_OS_WINDOWS_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.inline.hpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_PREFETCH_WINDOWS_AARCH64_INLINE_HPP\n+#define OS_CPU_WINDOWS_AARCH64_PREFETCH_WINDOWS_AARCH64_INLINE_HPP\n+\n+#include \"runtime\/prefetch.hpp\"\n+\n+\n+inline void Prefetch::read (void *loc, intx interval) {\n+}\n+\n+inline void Prefetch::write(void *loc, intx interval) {\n+}\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_PREFETCH_WINDOWS_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/prefetch_windows_aarch64.inline.hpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"memory\/metaspaceShared.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/thread.inline.hpp\"\n+\n+frame JavaThread::pd_last_frame() {\n+  assert(has_last_Java_frame(), \"must have last_Java_sp() when suspended\");\n+  vmassert(_anchor.last_Java_pc() != NULL, \"not walkable\");\n+  return frame(_anchor.last_Java_sp(), _anchor.last_Java_fp(), _anchor.last_Java_pc());\n+}\n+\n+\/\/ For Forte Analyzer AsyncGetCallTrace profiling support - thread is\n+\/\/ currently interrupted by SIGPROF\n+bool JavaThread::pd_get_top_frame_for_signal_handler(frame* fr_addr,\n+  void* ucontext, bool isInJava) {\n+\n+  assert(Thread::current() == this, \"caller must be current thread\");\n+  return pd_get_top_frame(fr_addr, ucontext, isInJava);\n+}\n+\n+bool JavaThread::pd_get_top_frame_for_profiling(frame* fr_addr, void* ucontext, bool isInJava) {\n+  return pd_get_top_frame(fr_addr, ucontext, isInJava);\n+}\n+\n+bool JavaThread::pd_get_top_frame(frame* fr_addr, void* ucontext, bool isInJava) {\n+\n+  assert(this->is_Java_thread(), \"must be JavaThread\");\n+\n+  JavaThread* jt = (JavaThread *)this;\n+\n+  \/\/ If we have a last_Java_frame, then we should use it even if\n+  \/\/ isInJava == true.  It should be more reliable than CONTEXT info.\n+  if (jt->has_last_Java_frame() && jt->frame_anchor()->walkable()) {\n+    *fr_addr = jt->pd_last_frame();\n+    return true;\n+  }\n+\n+  \/\/ At this point, we don't have a last_Java_frame, so\n+  \/\/ we try to glean some information out of the CONTEXT\n+  \/\/ if we were running Java code when SIGPROF came in.\n+  if (isInJava) {\n+    frame ret_frame = os::fetch_frame_from_context(ucontext);\n+    if (ret_frame.pc() == NULL || ret_frame.sp() == NULL ) {\n+      \/\/ CONTEXT wasn't useful\n+      return false;\n+    }\n+\n+    if (MetaspaceShared::is_in_trampoline_frame(ret_frame.pc())) {\n+      \/\/ In the middle of a trampoline call. Bail out for safety.\n+      \/\/ This happens rarely so shouldn't affect profiling.\n+      return false;\n+    }\n+\n+    if (!ret_frame.safe_for_sender(jt)) {\n+#if COMPILER2_OR_JVMCI\n+      \/\/ C2 and JVMCI use ebp as a general register see if NULL fp helps\n+      frame ret_frame2(ret_frame.sp(), NULL, ret_frame.pc());\n+      if (!ret_frame2.safe_for_sender(jt)) {\n+        \/\/ nothing else to try if the frame isn't good\n+        return false;\n+      }\n+      ret_frame = ret_frame2;\n+#else\n+      \/\/ nothing else to try if the frame isn't good\n+      return false;\n+#endif \/\/ COMPILER2_OR_JVMCI\n+    }\n+    *fr_addr = ret_frame;\n+    return true;\n+  }\n+\n+  \/\/ nothing else to try\n+  return false;\n+}\n+\n+void JavaThread::cache_global_variables() { }\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/thread_windows_aarch64.cpp","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_THREAD_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_THREAD_WINDOWS_AARCH64_HPP\n+\n+ private:\n+\n+#ifdef ASSERT\n+  \/\/ spill stack holds N callee-save registers at each Java call and\n+  \/\/ grows downwards towards limit\n+  \/\/ we need limit to check we have space for a spill and base so we\n+  \/\/ can identify all live spill frames at GC (eventually)\n+  address          _spill_stack;\n+  address          _spill_stack_base;\n+  address          _spill_stack_limit;\n+#endif \/\/ ASSERT\n+\n+  void pd_initialize() {\n+    _anchor.clear();\n+  }\n+\n+  frame pd_last_frame();\n+\n+ public:\n+  \/\/ Mutators are highly dangerous....\n+  intptr_t* last_Java_fp()                       { return _anchor.last_Java_fp(); }\n+  void  set_last_Java_fp(intptr_t* fp)           { _anchor.set_last_Java_fp(fp);   }\n+\n+  void set_base_of_stack_pointer(intptr_t* base_sp) {\n+  }\n+\n+  static ByteSize last_Java_fp_offset()          {\n+    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::last_Java_fp_offset();\n+  }\n+\n+  intptr_t* base_of_stack_pointer() {\n+    return NULL;\n+  }\n+  void record_base_of_stack_pointer() {\n+  }\n+\n+  bool pd_get_top_frame_for_signal_handler(frame* fr_addr, void* ucontext,\n+    bool isInJava);\n+\n+  bool pd_get_top_frame_for_profiling(frame* fr_addr, void* ucontext, bool isInJava);\n+private:\n+  bool pd_get_top_frame(frame* fr_addr, void* ucontext, bool isInJava);\n+public:\n+\n+  static Thread *aarch64_get_thread_helper() {\n+     return Thread::current();\n+  }\n+\n+  \/\/ These routines are only used on cpu architectures that\n+  \/\/ have separate register stacks (Itanium).\n+  static bool register_stack_overflow() { return false; }\n+  static void enable_register_stack_guard() {}\n+  static void disable_register_stack_guard() {}\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_THREAD_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/thread_windows_aarch64.hpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_UNWIND_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_UNWIND_WINDOWS_AARCH64_HPP\n+\n+\n+typedef unsigned char UBYTE;\n+\n+#if _MSC_VER < 1700\n+\n+\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n+#define UNW_FLAG_EHANDLER  0x01\n+#define UNW_FLAG_UHANDLER  0x02\n+#define UNW_FLAG_CHAININFO 0x04\n+\n+#endif\n+\n+\/\/ See https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/arm64-exception-handling#xdata-records\n+typedef struct _UNWIND_INFO_EH_ONLY {\n+    DWORD FunctionLength : 18;\n+    DWORD Version        : 2;\n+    DWORD X              : 1; \/\/ = 1\n+    DWORD E              : 1; \/\/ = 1\n+    DWORD EpilogCount    : 5; \/\/ = 0\n+    DWORD CodeWords      : 5; \/\/ = 1\n+    DWORD UnwindCode0    : 8;\n+    DWORD UnwindCode1    : 8;\n+    DWORD UnwindCode2    : 8;\n+    DWORD UnwindCode3    : 8;\n+    DWORD ExceptionHandler;\n+} UNWIND_INFO_EH_ONLY, *PUNWIND_INFO_EH_ONLY;\n+\n+\/*\n+typedef struct _RUNTIME_FUNCTION {\n+    DWORD BeginAddress;\n+    union {\n+        DWORD UnwindData;\n+        struct {\n+            DWORD Flag : 2;\n+            DWORD FunctionLength : 11;\n+            DWORD RegF : 3;\n+            DWORD RegI : 4;\n+            DWORD H : 1;\n+            DWORD CR : 2;\n+            DWORD FrameSize : 9;\n+        } DUMMYSTRUCTNAME;\n+    } DUMMYUNIONNAME;\n+} RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;\n+*\/\n+\n+#if _MSC_VER < 1700\n+\n+\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n+typedef struct _DISPATCHER_CONTEXT {\n+    ULONG64 ControlPc;\n+    ULONG64 ImageBase;\n+    PRUNTIME_FUNCTION FunctionEntry;\n+    ULONG64 EstablisherFrame;\n+    ULONG64 TargetIp;\n+    PCONTEXT ContextRecord;\n+\/\/    PEXCEPTION_ROUTINE LanguageHandler;\n+    char * LanguageHandler; \/\/ double dependency problem\n+    PVOID HandlerData;\n+} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;\n+\n+#endif\n+\n+#if _MSC_VER < 1500\n+\n+\/* Not needed for VS2008 compiler, comes from winnt.h. *\/\n+typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (\n+    IN PEXCEPTION_RECORD ExceptionRecord,\n+    IN ULONG64 EstablisherFrame,\n+    IN OUT PCONTEXT ContextRecord,\n+    IN OUT PDISPATCHER_CONTEXT DispatcherContext\n+);\n+\n+#endif\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_UNWIND_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/unwind_windows_aarch64.hpp","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_WINDOWS_AARCH64_VMSTRUCTS_WINDOWS_AARCH64_HPP\n+#define OS_CPU_WINDOWS_AARCH64_VMSTRUCTS_WINDOWS_AARCH64_HPP\n+\n+\/\/ These are the OS and CPU-specific fields, types and integer\n+\/\/ constants required by the Serviceability Agent. This file is\n+\/\/ referenced by vmStructs.cpp.\n+\n+#define VM_STRUCTS_OS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field, c2_nonstatic_field, unchecked_c1_static_field, unchecked_c2_static_field) \\\n+                                                                                                                                     \\\n+  \/******************************\/                                                                                                   \\\n+  \/* Threads (NOTE: incomplete) *\/                                                                                                   \\\n+  \/******************************\/                                                                                                   \\\n+                                                                                                                                     \\\n+  nonstatic_field(OSThread,                    _thread_id,                                    OSThread::thread_id_t)                 \\\n+  unchecked_nonstatic_field(OSThread,          _thread_handle,                                sizeof(HANDLE)) \/* NOTE: no type *\/\n+\n+#define VM_TYPES_OS_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type, declare_c1_toplevel_type, declare_c2_type, declare_c2_toplevel_type) \\\n+                                                                          \\\n+  declare_unsigned_integer_type(OSThread::thread_id_t)\n+\n+#define VM_INT_CONSTANTS_OS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant)\n+\n+#define VM_LONG_CONSTANTS_OS_CPU(declare_constant, declare_preprocessor_constant, declare_c1_constant, declare_c2_constant, declare_c2_preprocessor_constant)\n+\n+#endif \/\/ OS_CPU_WINDOWS_AARCH64_VMSTRUCTS_WINDOWS_AARCH64_HPP\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/vmStructs_windows_aarch64.hpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+\n+int VM_Version::get_current_sve_vector_length() {\n+  assert(_features & CPU_SVE, \"should not call this\");\n+  ShouldNotReachHere();\n+  return 0;\n+}\n+\n+int VM_Version::set_and_get_current_sve_vector_lenght(int length) {\n+  assert(_features & CPU_SVE, \"should not call this\");\n+  ShouldNotReachHere();\n+  return 0;\n+}\n+\n+void VM_Version::get_os_cpu_info() {\n+\n+  if (IsProcessorFeaturePresent(PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE))   _features |= CPU_CRC32;\n+  if (IsProcessorFeaturePresent(PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE))  _features |= CPU_AES | CPU_SHA1 | CPU_SHA2;\n+  if (IsProcessorFeaturePresent(PF_ARM_VFP_32_REGISTERS_AVAILABLE))        _features |= CPU_ASIMD;\n+  \/\/ No check for CPU_PMULL, CPU_SVE, CPU_SVE2\n+\n+  __int64 dczid_el0 = _ReadStatusReg(0x5807 \/* ARM64_DCZID_EL0 *\/);\n+\n+  if (!(dczid_el0 & 0x10)) {\n+    _zva_length = 4 << (dczid_el0 & 0xf);\n+  }\n+\n+  {\n+    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION buffer = NULL;\n+    DWORD returnLength = 0;\n+\n+    \/\/ See https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/api\/sysinfoapi\/nf-sysinfoapi-getlogicalprocessorinformation\n+    GetLogicalProcessorInformation(NULL, &returnLength);\n+    assert(GetLastError() == ERROR_INSUFFICIENT_BUFFER, \"Unexpected return from GetLogicalProcessorInformation\");\n+\n+    buffer = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION)os::malloc(returnLength, mtInternal);\n+    BOOL rc = GetLogicalProcessorInformation(buffer, &returnLength);\n+    assert(rc, \"Unexpected return from GetLogicalProcessorInformation\");\n+\n+    _icache_line_size = _dcache_line_size = -1;\n+    for (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION ptr = buffer; ptr < buffer + returnLength \/ sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION); ptr++) {\n+      switch (ptr->Relationship) {\n+      case RelationCache:\n+        \/\/ Cache data is in ptr->Cache, one CACHE_DESCRIPTOR structure for each cache.\n+        PCACHE_DESCRIPTOR Cache = &ptr->Cache;\n+        if (Cache->Level == 1) {\n+            _icache_line_size = _dcache_line_size = Cache->LineSize;\n+        }\n+        break;\n+      }\n+    }\n+    os::free(buffer);\n+  }\n+\n+  {\n+    char* buf = ::getenv(\"PROCESSOR_IDENTIFIER\");\n+    if (buf && strstr(buf, \"Ampere(TM)\") != NULL) {\n+      _cpu = CPU_AMCC;\n+    } else if (buf && strstr(buf, \"Cavium Inc.\") != NULL) {\n+      _cpu = CPU_CAVIUM;\n+    } else {\n+      log_info(os)(\"VM_Version: unknown CPU model\");\n+    }\n+\n+    if (_cpu) {\n+      SYSTEM_INFO si;\n+      GetSystemInfo(&si);\n+      _model = si.wProcessorLevel;\n+      _variant = si.wProcessorRevision \/ 0xFF;\n+      _revision = si.wProcessorRevision & 0xFF;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/vm_version_windows_aarch64.cpp","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -357,0 +357,35 @@\n+bool os::win32::get_frame_at_stack_banging_point(JavaThread* thread,\n+        struct _EXCEPTION_POINTERS* exceptionInfo, address pc, frame* fr) {\n+  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;\n+  address addr = (address) exceptionRecord->ExceptionInformation[1];\n+  if (Interpreter::contains(pc)) {\n+    *fr = os::fetch_frame_from_context((void*)exceptionInfo->ContextRecord);\n+    if (!fr->is_first_java_frame()) {\n+      \/\/ get_frame_at_stack_banging_point() is only called when we\n+      \/\/ have well defined stacks so java_sender() calls do not need\n+      \/\/ to assert safe_for_sender() first.\n+      *fr = fr->java_sender();\n+    }\n+  } else {\n+    \/\/ more complex code with compiled code\n+    assert(!Interpreter::contains(pc), \"Interpreted methods should have been handled above\");\n+    CodeBlob* cb = CodeCache::find_blob(pc);\n+    if (cb == NULL || !cb->is_nmethod() || cb->is_frame_complete_at(pc)) {\n+      \/\/ Not sure where the pc points to, fallback to default\n+      \/\/ stack overflow handling\n+      return false;\n+    } else {\n+      \/\/ in compiled code, the stack banging is performed just after the return pc\n+      \/\/ has been pushed on the stack\n+      intptr_t* fp = (intptr_t*)exceptionInfo->ContextRecord->REG_FP;\n+      intptr_t* sp = (intptr_t*)exceptionInfo->ContextRecord->REG_SP;\n+      *fr = frame(sp + 1, fp, (address)*sp);\n+      if (!fr->is_java_frame()) {\n+        \/\/ See java_sender() comment above.\n+        *fr = fr->java_sender();\n+      }\n+    }\n+  }\n+  assert(fr->is_java_frame(), \"Safety check\");\n+  return true;\n+}\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -35,0 +35,5 @@\n+#if defined(_M_ARM64)&& defined(_MSC_VER) && _MSC_VER <= 1927\n+  \/\/ workaround for MSCV ARM64 bug\n+  \/\/ https:\/\/developercommunity.visualstudio.com\/content\/problem\/1079221\/arm64-bad-code-generation-around-signed-char-arith.html\n+  typedef int32_t region_type_t;\n+#else\n@@ -36,0 +41,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-  static_field(VM_Version, _psr_info.dczid_el0, uint32_t)               \\\n+  static_field(VM_Version, _zva_length, int)                            \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -3844,1 +3844,1 @@\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -3848,1 +3848,1 @@\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -3916,1 +3916,1 @@\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(USE_VECTORED_EXCEPTION_HANDLING)\n@@ -3920,1 +3920,1 @@\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(USE_VECTORED_EXCEPTION_HANDLING)\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-#if ! (defined(_WIN32) && defined(_M_IX86))\n+#if ! (defined(_WIN32) && defined(_M_IX86)) && !defined(_M_ARM64)\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,0 +139,4 @@\n+#ifdef _M_ARM64\n+#define USE_VECTORED_EXCEPTION_HANDLING\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -572,0 +572,2 @@\n+#elif defined(_M_ARM64)\n+        sprops.os_arch = \"aarch64\";\n","filename":"src\/java.base\/windows\/native\/libjava\/java_props_md.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        if (!arch.equals(\"x86\") && !arch.equals(\"amd64\")) {\n+        if (!arch.equals(\"x86\") && !arch.equals(\"amd64\") && !arch.equals(\"aarch64\")) {\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/AttachProviderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -533,0 +533,2 @@\n+        } else if (cpu.equals(\"aarch64\")) {\n+            machDesc = new MachineDescriptionAArch64();\n@@ -534,1 +536,1 @@\n-            throw new DebuggerException(\"Win32 supported under x86 and amd64 only\");\n+            throw new DebuggerException(\"Win32 supported under x86, amd64 and aarch64 only\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotAgent.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import sun.jvm.hotspot.debugger.aarch64.*;\n@@ -33,0 +34,1 @@\n+import sun.jvm.hotspot.debugger.windbg.aarch64.*;\n@@ -116,0 +118,2 @@\n+    } else if (cpu.equals(\"aarch64\")) {\n+      threadFactory = new WindbgAARCH64ThreadFactory(this);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/WindbgDebuggerLocal.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.debugger.windbg.aarch64;\n+\n+import sun.jvm.hotspot.debugger.*;\n+import sun.jvm.hotspot.debugger.aarch64.*;\n+import sun.jvm.hotspot.debugger.windbg.*;\n+\n+class WindbgAARCH64Thread implements ThreadProxy {\n+  private WindbgDebugger debugger;\n+  private long           sysId;\n+  private boolean        gotID;\n+  private long           id;\n+\n+  \/\/ The address argument must be the address of the OSThread::_thread_id\n+  WindbgAARCH64Thread(WindbgDebugger debugger, Address addr) {\n+    this.debugger = debugger;\n+    this.sysId    = (long)addr.getCIntegerAt(0, 4, true);\n+    gotID         = false;\n+  }\n+\n+  WindbgAARCH64Thread(WindbgDebugger debugger, long sysId) {\n+    this.debugger = debugger;\n+    this.sysId    = sysId;\n+    gotID         = false;\n+  }\n+\n+  public ThreadContext getContext() throws IllegalThreadStateException {\n+    long[] data = debugger.getThreadIntegerRegisterSet(getThreadID());\n+    WindbgAARCH64ThreadContext context = new WindbgAARCH64ThreadContext(debugger);\n+    for (int i = 0; i < data.length; i++) {\n+      context.setRegister(i, data[i]);\n+    }\n+    return context;\n+  }\n+\n+  public boolean canSetContext() throws DebuggerException {\n+    return false;\n+  }\n+\n+  public void setContext(ThreadContext thrCtx)\n+    throws IllegalThreadStateException, DebuggerException {\n+    throw new DebuggerException(\"Unimplemented\");\n+  }\n+\n+  public boolean equals(Object obj) {\n+    if ((obj == null) || !(obj instanceof WindbgAARCH64Thread)) {\n+      return false;\n+    }\n+\n+    return (((WindbgAARCH64Thread) obj).getThreadID() == getThreadID());\n+  }\n+\n+  public int hashCode() {\n+    return (int) getThreadID();\n+  }\n+\n+  public String toString() {\n+    return Long.toString(getThreadID());\n+  }\n+\n+  \/** Retrieves the thread ID of this thread by examining the Thread\n+      Information Block. *\/\n+  private long getThreadID() {\n+    if (!gotID) {\n+       id = debugger.getThreadIdFromSysId(sysId);\n+    }\n+\n+    return id;\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/aarch64\/WindbgAARCH64Thread.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.debugger.windbg.aarch64;\n+\n+import sun.jvm.hotspot.debugger.*;\n+import sun.jvm.hotspot.debugger.aarch64.*;\n+import sun.jvm.hotspot.debugger.windbg.*;\n+\n+class WindbgAARCH64ThreadContext extends AARCH64ThreadContext {\n+  private WindbgDebugger debugger;\n+\n+  public WindbgAARCH64ThreadContext(WindbgDebugger debugger) {\n+    super();\n+    this.debugger = debugger;\n+  }\n+\n+  public void setRegisterAsAddress(int index, Address value) {\n+    setRegister(index, debugger.getAddressValue(value));\n+  }\n+\n+  public Address getRegisterAsAddress(int index) {\n+    return debugger.newAddress(getRegister(index));\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/aarch64\/WindbgAARCH64ThreadContext.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.debugger.windbg.aarch64;\n+\n+import sun.jvm.hotspot.debugger.*;\n+import sun.jvm.hotspot.debugger.windbg.*;\n+\n+public class WindbgAARCH64ThreadFactory implements WindbgThreadFactory {\n+  private WindbgDebugger debugger;\n+\n+  public WindbgAARCH64ThreadFactory(WindbgDebugger debugger) {\n+    this.debugger = debugger;\n+  }\n+\n+  public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n+    return new WindbgAARCH64Thread(debugger, threadIdentifierAddr);\n+  }\n+\n+  public ThreadProxy createThreadWrapper(long id) {\n+    return new WindbgAARCH64Thread(debugger, id);\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/aarch64\/WindbgAARCH64ThreadFactory.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.jvm.hotspot.runtime.win32_amd64.Win32AMD64JavaThreadPDAccess;\n@@ -33,0 +32,2 @@\n+import sun.jvm.hotspot.runtime.win32_amd64.Win32AMD64JavaThreadPDAccess;\n+import sun.jvm.hotspot.runtime.win32_aarch64.Win32AARCH64JavaThreadPDAccess;\n@@ -102,0 +103,2 @@\n+            } else if (cpu.equals(\"aarch64\")) {\n+                access =  new Win32AARCH64JavaThreadPDAccess();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Threads.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.runtime.win32_aarch64;\n+\n+import java.io.*;\n+import java.util.*;\n+import sun.jvm.hotspot.debugger.*;\n+import sun.jvm.hotspot.debugger.aarch64.*;\n+import sun.jvm.hotspot.runtime.*;\n+import sun.jvm.hotspot.runtime.aarch64.*;\n+import sun.jvm.hotspot.types.*;\n+import sun.jvm.hotspot.utilities.*;\n+import sun.jvm.hotspot.utilities.Observable;\n+import sun.jvm.hotspot.utilities.Observer;\n+\n+\/** This class is only public to allow using the VMObjectFactory to\n+    instantiate these.\n+*\/\n+\n+public class Win32AARCH64JavaThreadPDAccess implements JavaThreadPDAccess {\n+  private static AddressField  lastJavaFPField;\n+  private static AddressField  osThreadField;\n+\n+  \/\/ Field from OSThread\n+  private static Field         osThreadThreadIDField;\n+\n+  \/\/ This is currently unneeded but is being kept in case we change\n+  \/\/ the currentFrameGuess algorithm\n+  private static final long GUESS_SCAN_RANGE = 128 * 1024;\n+\n+  static {\n+    VM.registerVMInitializedObserver(new Observer() {\n+        public void update(Observable o, Object data) {\n+          initialize(VM.getVM().getTypeDataBase());\n+        }\n+      });\n+  }\n+\n+  private static synchronized void initialize(TypeDataBase db) {\n+    Type type = db.lookupType(\"JavaThread\");\n+    osThreadField           = type.getAddressField(\"_osthread\");\n+\n+    Type anchorType = db.lookupType(\"JavaFrameAnchor\");\n+    lastJavaFPField         = anchorType.getAddressField(\"_last_Java_fp\");\n+\n+    Type osThreadType = db.lookupType(\"OSThread\");\n+    osThreadThreadIDField = osThreadType.getField(\"_thread_id\");\n+  }\n+\n+  public Address getLastJavaFP(Address addr) {\n+    return lastJavaFPField.getValue(addr.addOffsetTo(sun.jvm.hotspot.runtime.JavaThread.getAnchorField().getOffset()));\n+  }\n+\n+  public Address getLastJavaPC(Address addr) {\n+    return null;\n+  }\n+\n+  public Address getBaseOfStackPointer(Address addr) {\n+    return null;\n+  }\n+\n+  public Frame getLastFramePD(JavaThread thread, Address addr) {\n+    Address fp = thread.getLastJavaFP();\n+    if (fp == null) {\n+      return null; \/\/ no information\n+    }\n+    Address pc =  thread.getLastJavaPC();\n+    if ( pc != null ) {\n+      return new AARCH64Frame(thread.getLastJavaSP(), fp, pc);\n+    } else {\n+      return new AARCH64Frame(thread.getLastJavaSP(), fp);\n+    }\n+  }\n+\n+  public RegisterMap newRegisterMap(JavaThread thread, boolean updateMap) {\n+    return new AARCH64RegisterMap(thread, updateMap);\n+  }\n+\n+  public Frame getCurrentFrameGuess(JavaThread thread, Address addr) {\n+    ThreadProxy t = getThreadProxy(addr);\n+    AARCH64ThreadContext context = (AARCH64ThreadContext) t.getContext();\n+    AARCH64CurrentFrameGuess guesser = new AARCH64CurrentFrameGuess(context, thread);\n+    if (!guesser.run(GUESS_SCAN_RANGE)) {\n+      return null;\n+    }\n+    if (guesser.getPC() == null) {\n+      return new AARCH64Frame(guesser.getSP(), guesser.getFP());\n+    } else {\n+      return new AARCH64Frame(guesser.getSP(), guesser.getFP(), guesser.getPC());\n+    }\n+  }\n+\n+  public void printThreadIDOn(Address addr, PrintStream tty) {\n+    tty.print(getThreadProxy(addr));\n+  }\n+\n+  public void printInfoOn(Address threadAddr, PrintStream tty) {\n+  }\n+\n+  public Address getLastSP(Address addr) {\n+    ThreadProxy t = getThreadProxy(addr);\n+    AARCH64ThreadContext context = (AARCH64ThreadContext) t.getContext();\n+    return context.getRegisterAsAddress(AARCH64ThreadContext.SP);\n+  }\n+\n+  public ThreadProxy getThreadProxy(Address addr) {\n+    \/\/ Addr is the address of the JavaThread.\n+    \/\/ Fetch the OSThread (for now and for simplicity, not making a\n+    \/\/ separate \"OSThread\" class in this package)\n+    Address osThreadAddr = osThreadField.getValue(addr);\n+    \/\/ Get the address of the thread_id within the OSThread\n+    Address threadIdAddr = osThreadAddr.addOffsetTo(osThreadThreadIDField.getOffset());\n+\n+    JVMDebugger debugger = VM.getVM().getDebugger();\n+    return debugger.getThreadForIdentifierAddress(threadIdAddr);\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/win32_aarch64\/Win32AARCH64JavaThreadPDAccess.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -39,0 +39,3 @@\n+#elif _M_ARM64\n+  #include \"sun_jvm_hotspot_debugger_aarch64_AARCH64ThreadContext.h\"\n+  #define NPRGREG sun_jvm_hotspot_debugger_aarch64_AARCH64ThreadContext_NPRGREG\n","filename":"src\/jdk.hotspot.agent\/windows\/native\/libsaproc\/sawindbg.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -554,8 +554,16 @@\n-        int dczidValue = config.psrInfoDczidValue;\n-        EnumSet<AArch64.Flag> flags = ((AArch64) target().arch).getFlags();\n-\n-        \/\/ ARMv8-A architecture reference manual D12.2.35 Data Cache Zero ID register says:\n-        \/\/ * BS, bits [3:0] indicate log2 of the DC ZVA block size in (4-byte) words.\n-        \/\/ * DZP, bit [4] of indicates whether use of DC ZVA instruction is prohibited.\n-        int zvaLength = 4 << (dczidValue & 0xF);\n-        boolean isDcZvaProhibited = ((dczidValue & 0x10) != 0);\n+        final EnumSet<AArch64.Flag> flags = ((AArch64) target().arch).getFlags();\n+\n+        boolean isDcZvaProhibited = true;\n+        int zvaLength = 0;\n+        if (GraalHotSpotVMConfig.JDK >= 16) {\n+            zvaLength = config.zvaLength;\n+            isDcZvaProhibited = 0 == config.zvaLength;\n+        } else {\n+            int dczidValue = config.psrInfoDczidValue;\n+\n+            \/\/ ARMv8-A architecture reference manual D12.2.35 Data Cache Zero ID register says:\n+            \/\/ * BS, bits [3:0] indicate log2 of the DC ZVA block size in (4-byte) words.\n+            \/\/ * DZP, bit [4] of indicates whether use of DC ZVA instruction is prohibited.\n+            zvaLength = 4 << (dczidValue & 0xF);\n+            isDcZvaProhibited = ((dczidValue & 0x10) != 0);\n+        }\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.aarch64\/src\/org\/graalvm\/compiler\/hotspot\/aarch64\/AArch64HotSpotLIRGenerator.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -722,1 +722,3 @@\n-    public final int psrInfoDczidValue = getFieldValue(\"VM_Version::_psr_info.dczid_el0\", Integer.class, \"uint32_t\", 0x10, (JVMCI ? jvmciGE(JVMCI_19_3_b04) : JDK >= 14) && osArch.equals(\"aarch64\"));\n+    public final int psrInfoDczidValue = getFieldValue(\"VM_Version::_psr_info.dczid_el0\", Integer.class, \"uint32_t\", 0x10, (JVMCI ? jvmciGE(JVMCI_19_3_b04) : (JDK == 14 || JDK == 15)) && osArch.equals(\"aarch64\"));\n+\n+    public final int zvaLength = getFieldValue(\"VM_Version::_zva_length\", Integer.class, \"int\", 0, JDK >= 16 && osArch.equals(\"aarch64\"));\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/GraalHotSpotVMConfig.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}