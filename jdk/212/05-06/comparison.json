{"files":[{"patch":"@@ -2545,21 +2545,0 @@\n-#ifdef _M_ARM64\n-      \/\/ Unsafe memory access\n-      CompiledMethod* nm = NULL;\n-      JavaThread* thread = (JavaThread*)t;\n-      if (in_java) {\n-        CodeBlob* cb = CodeCache::find_blob_unsafe(pc);\n-        nm = (cb != NULL) ? cb->as_compiled_method_or_null() : NULL;\n-      }\n-\n-      bool is_unsafe_arraycopy = (in_native || in_java) && UnsafeCopyMemory::contains_pc(pc);\n-      if (is_unsafe_arraycopy ||\n-          ((in_vm || in_native) && thread->doing_unsafe_access()) ||\n-          (nm != NULL && nm->has_unsafe_access())) {\n-        address next_pc =  Assembler::locate_next_instruction(pc);\n-        if (is_unsafe_arraycopy) {\n-          next_pc = UnsafeCopyMemory::page_error_continue_pc(pc);\n-        }\n-        return Handle_Exception(exceptionInfo, SharedRuntime::handle_unsafe_access(thread, next_pc));\n-      }\n-#endif\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-#if ! (defined(_WIN32) && defined(_M_IX86)) && !defined(_M_ARM64)\n+#if ! (defined(_WIN32) && defined(_M_IX86))\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}