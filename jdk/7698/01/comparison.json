{"files":[{"patch":"@@ -54,0 +54,1 @@\n+<li><a href=\"#inheriting-constructors\">Inheriting constructors<\/a><\/li>\n@@ -408,0 +409,4 @@\n+<h3 id=\"inheriting-constructors\">Inheriting constructors<\/h3>\n+<p>Do not use <em>inheriting constructors<\/em> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2540.htm\">n2540<\/a>).<\/p>\n+<p>C++11 provides simple syntax allowing a class to inherit the constructors of a base class. Unfortunately there are a number of problems with the original specification, and C++17 contains significant revisions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\" title=\"p0136r1\">p0136r1<\/a> opens with a list of 8 Core Issues). Since HotSpot doesn't support use of C++17, use of inherited constructors could run into those problems. Such uses might also change behavior in a future HotSpot update to use C++17 or later, potentially in subtle ways that could lead to hard to diagnose problems. Because of this, HotSpot code must not use inherited constructors.<\/p>\n+<p>Note that gcc7 provides the <code>-fnew-inheriting-ctors<\/code> option to use the <a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\" title=\"p0136r1\">p0136r1<\/a> semantics. This is enabled by default when using C++17 or later. It is also enabled by default for <code>fabi-version=11<\/code> (introduced by gcc7) or higher when using C++11\/14, as the change is considered a Defect Report that applies to those versions. Earlier versions of gcc don't have that option, and other supported compilers may not have anything similar.<\/p>\n","filename":"doc\/hotspot-style.html","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -988,0 +988,24 @@\n+### Inheriting constructors\n+\n+Do not use _inheriting constructors_\n+([n2540](http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2540.htm)).\n+\n+C++11 provides simple syntax allowing a class to inherit the constructors of a\n+base class.  Unfortunately there are a number of problems with the original\n+specification, and C++17 contains significant revisions ([p0136r1] opens with\n+a list of 8 Core Issues).  Since HotSpot doesn't support use of C++17, use of\n+inherited constructors could run into those problems. Such uses might also\n+change behavior in a future HotSpot update to use C++17 or later, potentially\n+in subtle ways that could lead to hard to diagnose problems.  Because of this,\n+HotSpot code must not use inherited constructors.\n+\n+Note that gcc7 provides the `-fnew-inheriting-ctors` option to use the\n+[p0136r1] semantics.  This is enabled by default when using C++17 or later.\n+It is also enabled by default for `fabi-version=11` (introduced by gcc7) or\n+higher when using C++11\/14, as the change is considered a Defect Report that\n+applies to those versions.  Earlier versions of gcc don't have that option,\n+and other supported compilers may not have anything similar.\n+\n+[p0136r1]: http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\n+  \"p0136r1\"\n+\n","filename":"doc\/hotspot-style.md","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}