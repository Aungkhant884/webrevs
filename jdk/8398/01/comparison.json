{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -625,1 +625,1 @@\n-        return MethodType.makeImpl(returnType().btClass, ptypes, true);\n+        return MethodType.methodType(returnType().btClass, ptypes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-                MethodType res = MethodType.makeImpl(rtype, ptypes, true);\n+                MethodType res = MethodType.methodType(rtype, ptypes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-                midType = MethodType.makeImpl(midType.rtype(), ptypes, true);\n+                midType = MethodType.methodType(midType.rtype(), ptypes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-        return MethodType.makeImpl(rtype, ptypes, true);\n+        return MethodType.methodType(rtype, ptypes, true);\n@@ -564,1 +564,1 @@\n-            MethodType guardType = MethodType.makeImpl(guardReturnType, guardParams, true);\n+            MethodType guardType = MethodType.methodType(guardReturnType, guardParams, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5604,1 +5604,1 @@\n-        MethodType newType = MethodType.makeImpl(targetType.rtype(), ptypes, true);\n+        MethodType newType = MethodType.methodType(targetType.rtype(), ptypes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,1 +243,1 @@\n-        return makeImpl(rtype, ptypes, false);\n+        return methodType(rtype, ptypes, false);\n@@ -257,1 +257,1 @@\n-        return makeImpl(rtype, listToArray(ptypes), notrust);\n+        return methodType(rtype, listToArray(ptypes), notrust);\n@@ -278,1 +278,15 @@\n-        Class<?>[] ptypes1 = new Class<?>[1+ptypes.length];\n+        int len = ptypes.length;\n+        if (rtype == Object.class && ptype0 == Object.class) {\n+            if (len == 0) {\n+                return genericMethodType(1, false);\n+            }\n+            if (isAllObject(ptypes, len - 1)) {\n+                Class<?> lastParam = ptypes[len - 1];\n+                if (lastParam == Object.class) {\n+                    return genericMethodType(len + 1, false);\n+                } else if (lastParam == Object[].class) {\n+                    return genericMethodType(len, true);\n+                }\n+            }\n+        }\n+        Class<?>[] ptypes1 = new Class<?>[1 + len];\n@@ -280,1 +294,1 @@\n-        System.arraycopy(ptypes, 0, ptypes1, 1, ptypes.length);\n+        System.arraycopy(ptypes, 0, ptypes1, 1, len);\n@@ -293,0 +307,3 @@\n+        if (rtype == Object.class) {\n+            return genericMethodType(0, false);\n+        }\n@@ -307,0 +324,7 @@\n+        if (rtype == Object.class) {\n+            if (ptype0 == Object.class) {\n+                return genericMethodType(1, false);\n+            } else if (ptype0 == Object[].class) {\n+                return genericMethodType(0, true);\n+            }\n+        }\n@@ -321,1 +345,29 @@\n-        return makeImpl(rtype, ptypes.ptypes, true);\n+        return methodType(rtype, ptypes.ptypes, true);\n+    }\n+\n+    private static boolean isAllObject(Class<?>[] ptypes, int to) {\n+        for (int i = 0; i < to; i++) {\n+            if (ptypes[i] != Object.class) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    \/*trusted*\/\n+    static MethodType methodType(Class<?> rtype, Class<?>[] ptypes, boolean trusted) {\n+        if (rtype == Object.class) {\n+            int last = ptypes.length - 1;\n+            if (last < 0) {\n+                return genericMethodType(0, false);\n+            }\n+            if (isAllObject(ptypes, last)) {\n+                Class<?> lastParam = ptypes[last];\n+                if (lastParam == Object.class) {\n+                    return genericMethodType(last + 1, false);\n+                } else if (lastParam == Object[].class) {\n+                    return genericMethodType(last, true);\n+                }\n+            }\n+        }\n+        return makeImpl(rtype, ptypes, trusted);\n@@ -335,2 +387,1 @@\n-    \/*trusted*\/\n-    static MethodType makeImpl(Class<?> rtype, Class<?>[] ptypes, boolean trusted) {\n+    private static MethodType makeImpl(Class<?> rtype, Class<?>[] ptypes, boolean trusted) {\n@@ -632,1 +683,1 @@\n-        return makeImpl(rtype, nptypes, true);\n+        return methodType(rtype, nptypes, true);\n@@ -644,1 +695,1 @@\n-        return makeImpl(nrtype, ptypes, true);\n+        return methodType(nrtype, ptypes, true);\n@@ -1167,1 +1218,1 @@\n-        return makeImpl(rtype, ptypes, true);\n+        return methodType(rtype, ptypes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":62,"deletions":11,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-            this.basicType = MethodType.makeImpl(basicReturnType, basicPtypes, true);\n+            this.basicType = MethodType.methodType(basicReturnType, basicPtypes, true);\n@@ -253,1 +253,1 @@\n-        return MethodType.makeImpl(rtypeCanonical, ptypesCanonical, true);\n+        return MethodType.methodType(rtypeCanonical, ptypesCanonical, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodTypeForm.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.jmh.annotations.Fork;\n@@ -28,0 +29,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -46,0 +52,3 @@\n+    private Class<?> objectType = Object.class;\n+\n+    private Class<?> otherType = A.class;\n@@ -71,0 +80,15 @@\n+    @Benchmark\n+    public MethodType testGenericObject() {\n+        return MethodType.genericMethodType(1);\n+    }\n+\n+    @Benchmark\n+    public MethodType testObjectObject() {\n+        return MethodType.methodType(Object.class, Object.class);\n+    }\n+\n+    @Benchmark\n+    public MethodType testObjectObject_NonConst() {\n+        return MethodType.methodType(objectType, objectType);\n+    }\n+\n@@ -81,0 +105,20 @@\n+    @Benchmark\n+    public MethodType testMultiPType_ObjectAndA() {\n+        return MethodType.methodType(Object.class, Object.class, Object.class, Object.class, Object.class, A.class, B.class);\n+    }\n+\n+    @Benchmark\n+    public MethodType testMultiPType_ObjectAndA_NonConst() {\n+        return MethodType.methodType(objectType, objectType, objectType, objectType, objectType, otherType, otherType);\n+    }\n+\n+    @Benchmark\n+    public MethodType testMultiPType_ObjectOnly() {\n+        return MethodType.methodType(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class);\n+    }\n+\n+    @Benchmark\n+    public MethodType testMultiPType_ObjectOnly_NonConst() {\n+        return MethodType.methodType(objectType, objectType, objectType, objectType, objectType, objectType, objectType);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeAcquire.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"}]}