{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,1 +202,0 @@\n-        synchronized (this) {stopping = true;}\n@@ -206,0 +205,1 @@\n+        synchronized (this) {stopping = true;}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2ClientImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n@@ -279,1 +281,4 @@\n-    volatile boolean closed;\n+    private static final int HALF_CLOSED_LOCAL  = 1;\n+    private static final int HALF_CLOSED_REMOTE = 2;\n+    private static final int SHUTDOWN_REQUESTED = 4;\n+    volatile int closedState;\n@@ -661,7 +666,9 @@\n-        Log.logTrace(\"Closing HTTP\/2 connection: to {0}\", connection.address());\n-        if (connection.channel().isOpen()) {\n-            GoAwayFrame f = new GoAwayFrame(0,\n-                    ErrorFrame.NO_ERROR,\n-                    \"Requested by user\".getBytes(UTF_8));\n-            \/\/ TODO: set last stream. For now zero ok.\n-            sendFrame(f);\n+        if (markHalfClosedLocal()) {\n+            if (connection.channel().isOpen()) {\n+                Log.logTrace(\"Closing HTTP\/2 connection: to {0}\", connection.address());\n+                GoAwayFrame f = new GoAwayFrame(0,\n+                        ErrorFrame.NO_ERROR,\n+                        \"Requested by user\".getBytes(UTF_8));\n+                \/\/ TODO: set last stream. For now zero ok.\n+                sendFrame(f);\n+            }\n@@ -729,6 +736,3 @@\n-        if (debug.on()) debug.log(() -> \"Shutting down h2c (closed=\"+closed+\"): \" + t);\n-        if (closed == true) return;\n-        synchronized (this) {\n-            if (closed == true) return;\n-            closed = true;\n-        }\n+        int state = closedState;\n+        if (debug.on()) debug.log(() -> \"Shutting down h2c (state=\"+describeClosedState(state)+\"): \" + t);\n+        if (!markShutdownRequested()) return;\n@@ -736,1 +740,1 @@\n-            if (!(t instanceof EOFException) || isActive()) {\n+            if (t!= null && (!(t instanceof EOFException) || isActive())) {\n@@ -740,0 +744,2 @@\n+            } else {\n+                Log.logError(\"Shutting down connection\");\n@@ -743,1 +749,1 @@\n-        if (initialCause == null) this.cause = t;\n+        if (initialCause == null && t != null) this.cause = t;\n@@ -880,1 +886,1 @@\n-        if (closed) return;\n+        if (isMarked(closedState, SHUTDOWN_REQUESTED)) return;\n@@ -890,1 +896,1 @@\n-            if (closed) return;\n+            if (isMarked(closedState, SHUTDOWN_REQUESTED)) return;\n@@ -963,1 +969,2 @@\n-        return !closed && connection.channel().isOpen();\n+        return !isMarked(closedState, SHUTDOWN_REQUESTED)\n+                && connection.channel().isOpen();\n@@ -1087,2 +1094,4 @@\n-        GoAwayFrame frame = new GoAwayFrame(0, errorCode);\n-        sendFrame(frame);\n+        if (markHalfClosedLocal()) {\n+            GoAwayFrame frame = new GoAwayFrame(0, errorCode);\n+            sendFrame(frame);\n+        }\n@@ -1121,3 +1130,5 @@\n-        shutdown(new IOException(\n-                        connection.channel().getLocalAddress()\n-                        +\": GOAWAY received\"));\n+        if (markHalfClosedLRemote()) {\n+            shutdown(new IOException(\n+                    connection.channel().getLocalAddress()\n+                            + \": GOAWAY received\"));\n+        }\n@@ -1222,1 +1233,1 @@\n-            if (!closed) {\n+            if (!isMarked(closedState, SHUTDOWN_REQUESTED)) {\n@@ -1238,1 +1249,0 @@\n-\n@@ -1372,1 +1382,1 @@\n-            if (!closed) {\n+            if (!isMarked(closedState, SHUTDOWN_REQUESTED)) {\n@@ -1390,1 +1400,1 @@\n-            if (!closed) {\n+            if (!isMarked(closedState, SHUTDOWN_REQUESTED)) {\n@@ -1408,1 +1418,1 @@\n-            if (!closed) {\n+            if (!isMarked(closedState, SHUTDOWN_REQUESTED)) {\n@@ -1630,0 +1640,56 @@\n+\n+    private boolean isMarked(int state, int mask) {\n+        return (state & mask) == mask;\n+    }\n+\n+    private boolean markShutdownRequested() {\n+        return markClosedState(SHUTDOWN_REQUESTED);\n+    }\n+\n+    private boolean markHalfClosedLocal() {\n+        return markClosedState(HALF_CLOSED_LOCAL);\n+    }\n+\n+    private boolean markHalfClosedLRemote() {\n+        return markClosedState(HALF_CLOSED_REMOTE);\n+    }\n+\n+    private boolean markClosedState(int flag) {\n+        int state, desired;\n+        do {\n+            state = desired = closedState;\n+            if ((state & flag) == flag) return false;\n+            desired = state | flag;\n+        } while (!CLOSED_STATE.compareAndSet(this, state, desired));\n+        return true;\n+    }\n+\n+    String describeClosedState(int state) {\n+        if (state == 0) return \"active\";\n+        String desc = null;\n+        if (isMarked(state, SHUTDOWN_REQUESTED)) {\n+            desc = \"shutdown\";\n+        }\n+        if (isMarked(state, HALF_CLOSED_LOCAL | HALF_CLOSED_REMOTE)) {\n+            if (desc == null) return \"closed\";\n+            else return desc + \"+closed\";\n+        }\n+        if (isMarked(state, HALF_CLOSED_LOCAL)) {\n+            if (desc == null) return \"half-closed-local\";\n+            else return desc + \"+half-closed-local\";\n+        }\n+        if (isMarked(state, HALF_CLOSED_REMOTE)) {\n+            if (desc == null) return \"half-closed-remote\";\n+            else return desc + \"+half-closed-remote\";\n+        }\n+        return \"0x\" + Integer.toString(state, 16);\n+    }\n+\n+    private static final VarHandle CLOSED_STATE;\n+    static {\n+        try {\n+            CLOSED_STATE = MethodHandles.lookup().findVarHandle(Http2Connection.class, \"closedState\", int.class);\n+        } catch (Exception x) {\n+            throw new ExceptionInInitializerError(x);\n+        }\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":96,"deletions":30,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -29,1 +29,3 @@\n- * @run testng\/othervm -Djdk.httpclient.HttpClient.log=ssl,requests,responses,errors NoBodyTest\n+ * @run testng\/othervm -Djdk.httpclient.HttpClient.log=ssl,requests,responses,errors\n+ *                     -Djdk.internal.httpclient.debug=true\n+ *                     NoBodyTest\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/NoBodyTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}