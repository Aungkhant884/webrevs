{"files":[{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8262271\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/timeout=240 JStackStressTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.SA.SATestUtils;\n+import jdk.test.lib.Utils;\n+\n+public class JStackStressTest {\n+\n+    static Process jShellProcess;\n+\n+    public static void testjstack() throws IOException {\n+        launchJshell();\n+        long jShellPID = jShellProcess.pid();\n+        OutputAnalyzer jshellOutput = new OutputAnalyzer(jShellProcess);\n+\n+        try {\n+            \/\/ Do 4 jstacks on the jshell process as it starts up\n+            for (int i = 1; i <= 4; i++) {\n+                JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+                launcher.addVMArgs(Utils.getTestJavaOpts());\n+                launcher.addToolArg(\"jstack\");\n+                launcher.addToolArg(\"--pid=\" + Long.toString(jShellPID));\n+\n+                System.out.println(\"###### Starting jstack iteration \" + i + \" against \" + jShellPID);\n+                long startTime = System.currentTimeMillis();\n+                ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n+                OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);\n+                System.out.println(\"jhsdb jstack stdout:\");\n+                System.out.println(output.getStdout());\n+                System.out.println(\"jhsdb jstack stderr:\");\n+                System.out.println(output.getStderr());\n+                long elapsedTime = System.currentTimeMillis() - startTime;\n+                System.out.println(\"###### End of all output for iteration \" + i +\n+                                   \" which took \" + elapsedTime + \"ms\");\n+                output.shouldHaveExitValue(0);\n+                \/\/ This will detect most SA failures, including during the attach.\n+                output.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+                \/\/ This will detect unexpected exceptions, like NPEs and asserts, that are caught\n+                \/\/ by sun.jvm.hotspot.tools.Tool.execute().\n+                output.shouldNotMatch(\"^Error: .*$\");\n+            }\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            try (OutputStream out = jShellProcess.getOutputStream()) {\n+                out.write(\"\/exit\\n\".getBytes());\n+                out.flush();\n+            }\n+            System.out.println(\"jshell Output: \" + jshellOutput.getOutput());\n+            if (jShellProcess.isAlive()) {\n+                System.out.println(\"Destroying jshell\");\n+                jShellProcess.destroy();\n+                System.out.println(\"Jshell destroyed\");\n+            } else {\n+                System.out.println(\"Jshell not alive\");\n+            }\n+        }\n+    }\n+\n+    public static void launchJshell() throws IOException {\n+        System.out.println(\"Starting Jshell\");\n+        long startTime = System.currentTimeMillis();\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(JDKToolFinder.getTestJDKTool(\"jshell\"));\n+            jShellProcess = ProcessTools.startProcess(\"JShell\", pb);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        testjstack();\n+\n+        \/\/ The test throws RuntimeException on error.\n+        \/\/ IOException is thrown if Jshell can't start because of some bad\n+        \/\/ environment condition\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/JStackStressTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}