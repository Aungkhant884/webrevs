{"files":[{"patch":"@@ -1676,2 +1676,2 @@\n-        return (cl1.getClassLoader() == cl2.getClassLoader() &&\n-                cl1.getPackageName().equals(cl2.getPackageName()));\n+        return cl1.getClassLoader() == cl2.getClassLoader() &&\n+                cl1.getPackageName() == cl2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-            if (pkg != null && !pkg.isEmpty()) {\n+            if (!pkg.isEmpty()) {\n@@ -3080,1 +3080,1 @@\n-                if (pkg != null && !pkg.isEmpty()) {\n+                if (!pkg.isEmpty()) {\n@@ -3097,1 +3097,1 @@\n-            if (baseName != null && !baseName.isEmpty()) {\n+            if (!baseName.isEmpty()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -459,1 +458,1 @@\n-                   && Objects.equals(class1.getPackageName(), class2.getPackageName());\n+                   && class1.getPackageName() == class2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicIntegerFieldUpdater.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -659,1 +658,1 @@\n-               && Objects.equals(class1.getPackageName(), class2.getPackageName());\n+               && class1.getPackageName() == class2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicLongFieldUpdater.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -400,1 +399,1 @@\n-                   && Objects.equals(class1.getPackageName(), class2.getPackageName());\n+                   && class1.getPackageName() == class2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.Field;\n+import java.lang.reflect.Constructor;\n@@ -38,0 +38,1 @@\n+import java.lang.reflect.Field;\n@@ -40,1 +41,0 @@\n-import java.lang.reflect.Constructor;\n@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -45,1 +44,0 @@\n-\n@@ -687,1 +685,1 @@\n-                Objects.equals(cl1.getPackageName(), cl2.getPackageName());\n+                cl1.getPackageName() == cl2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Objects;\n@@ -378,1 +377,1 @@\n-        return Objects.equals(class1.getPackageName(), class2.getPackageName());\n+        return class1.getPackageName() == class2.getPackageName();\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        if (pkg != null && !pkg.isEmpty()) {\n+        if (!pkg.isEmpty()) {\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/ReflectUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}