{"files":[{"patch":"@@ -284,1 +284,10 @@\n-\n+    \/\/ Convert \"(a-b)+(c-d)\" into \"(a+c)-(b+d)\"\n+    if( op2 == Op_SubI ) {\n+      \/\/ Check for dead cycle: d = (a-b)+(c-d)\n+      assert( in1->in(2) != this && in2->in(2) != this,\n+              \"dead loop in AddINode::Ideal\" );\n+      Node *sub  = new SubINode(NULL, NULL);\n+      sub->init_req(1, phase->transform(new AddINode(in1->in(1), in2->in(1) ) ));\n+      sub->init_req(2, phase->transform(new AddINode(in1->in(2), in2->in(2) ) ));\n+      return sub;\n+    }\n@@ -305,10 +314,0 @@\n-    \/\/ Convert \"(a-b)+(c-d)\" into \"(a+c)-(b+d)\"\n-    if( op2 == Op_SubI ) {\n-      \/\/ Check for dead cycle: d = (a-b)+(c-d)\n-      assert( in1->in(2) != this && in2->in(2) != this,\n-              \"dead loop in AddINode::Ideal\" );\n-      Node *sub  = new SubINode(NULL, NULL);\n-      sub->init_req(1, phase->transform(new AddINode(in1->in(1), in2->in(1) ) ));\n-      sub->init_req(2, phase->transform(new AddINode(in1->in(2), in2->in(2) ) ));\n-      return sub;\n-    }\n@@ -465,1 +464,0 @@\n-\n@@ -468,1 +466,10 @@\n-\n+    \/\/ Convert \"(a-b)+(c-d)\" into \"(a+c)-(b+d)\"\n+    if( op2 == Op_SubL ) {\n+      \/\/ Check for dead cycle: d = (a-b)+(c-d)\n+      assert( in1->in(2) != this && in2->in(2) != this,\n+              \"dead loop in AddLNode::Ideal\" );\n+      Node *sub  = new SubLNode(NULL, NULL);\n+      sub->init_req(1, phase->transform(new AddLNode(in1->in(1), in2->in(1) ) ));\n+      sub->init_req(2, phase->transform(new AddLNode(in1->in(2), in2->in(2) ) ));\n+      return sub;\n+    }\n@@ -489,11 +496,0 @@\n-\n-    \/\/ Convert \"(a-b)+(c-d)\" into \"(a+c)-(b+d)\"\n-    if( op2 == Op_SubL ) {\n-      \/\/ Check for dead cycle: d = (a-b)+(c-d)\n-      assert( in1->in(2) != this && in2->in(2) != this,\n-              \"dead loop in AddLNode::Ideal\" );\n-      Node *sub  = new SubLNode(NULL, NULL);\n-      sub->init_req(1, phase->transform(new AddLNode(in1->in(1), in2->in(1) ) ));\n-      sub->init_req(2, phase->transform(new AddLNode(in1->in(2), in2->in(2) ) ));\n-      return sub;\n-    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -469,14 +469,0 @@\n-  Node *in1 = in(1);\n-  Node *in2 = in(2);\n-  uint op1 = in1->Opcode();\n-\n-  \/\/ Converts (x * y) \/ y => x\n-  if (op1 == Op_MulI && in1->in(2) == in2) {\n-    return new AddINode(in1->in(1), phase->intcon(0));\n-  }\n-\n-  \/\/ Converts (x * y) \/ x => y\n-  if (op1 == Op_MulI && in1->in(1) == in2) {\n-    return new AddINode(in1->in(2), phase->intcon(0));\n-  }\n-\n@@ -589,14 +575,0 @@\n-  Node *in1 = in(1);\n-  Node *in2 = in(2);\n-  uint op1 = in1->Opcode();\n-\n-  \/\/ Converts (x * y) \/ y => x\n-  if (op1 == Op_MulL && in1->in(2) == in2) {\n-    return new AddLNode(in1->in(1), phase->longcon(0));\n-  }\n-\n-  \/\/ Converts (x * y) \/ x => y\n-  if (op1 == Op_MulL && in1->in(1) == in2) {\n-    return new AddLNode(in1->in(2), phase->longcon(0));\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  if (in(1)->Opcode() == Op_AddI || in(1)->Opcode() == Op_AddL) {\n+  if (in(1)->Opcode() == Op_AddI) {\n@@ -406,4 +406,0 @@\n-  \/\/ Convert \"(x-y) - x\" into \"-y\"\n-  if (op1 == Op_SubL && in1->in(1) == in2) {\n-    return new SubLNode(phase->longcon(0), in1->in(2));\n-  }\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-    private static final String COMPOSITE_PREFIX = \"#PRE#\"; \/\/ Prefix for regexes that require an additional user-defined string.\n+    private static final String START = \"(\\\\d+(\\\\s){2}(\";\n+    private static final String MID = \".*)+(\\\\s){2}===.*\";\n@@ -50,0 +51,1 @@\n+    private static final String COMPOSITE_PREFIX = \"#PRE#\"; \/\/ Prefix for regexes that require an additional user-defined string.\n@@ -51,3 +53,0 @@\n-    private static final String LOAD_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n-    private static final String MID = \".*)+(\\\\s){2}===.*\";\n-    private static final String START = \"(\\\\d+(\\\\s){2}(\";\n@@ -55,0 +54,1 @@\n+    private static final String LOAD_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n@@ -66,0 +66,18 @@\n+    public static final String DIV = START + \"Div(I|L|F|D)\" + MID + END;\n+    public static final String DIV_I = START + \"DivI\" + MID + END;\n+    public static final String DIV_L = START + \"DivL\" + MID + END;\n+    public static final String DIV_F = START + \"DivF\" + MID + END;\n+    public static final String DIV_D = START + \"DivD\" + MID + END;\n+\n+    public static final String MUL = START + \"Mul(I|L|F|D)\" + MID + END;\n+    public static final String MUL_I = START + \"MulI\" + MID + END;\n+    public static final String MUL_L = START + \"MulL\" + MID + END;\n+    public static final String MUL_F = START + \"MulF\" + MID + END;\n+    public static final String MUL_D = START + \"MulD\" + MID + END;\n+\n+    public static final String SUB = START + \"Sub(I|L|F|D)\" + MID + END;\n+    public static final String SUB_I = START + \"SubI\" + MID + END;\n+    public static final String SUB_L = START + \"SubL\" + MID + END;\n+    public static final String SUB_F = START + \"SubF\" + MID + END;\n+    public static final String SUB_D = START + \"SubD\" + MID + END;\n+\n@@ -71,1 +89,3 @@\n-    public static final String CALL = START + \"CallStaticJava\" + MID + END;\n+    public static final String CONVI2L = START + \"ConvI2L\" + MID + END;\n+    public static final String CONVL2I = START + \"ConvL2I\" + MID + END;\n+\n@@ -76,11 +96,0 @@\n-    public static final String CLASS_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*class_check\" + END;\n-    public static final String CONVI2L = START + \"ConvI2L\" + MID + END;\n-    public static final String CONVL2I = START + \"ConvL2I\" + MID + END;\n-    public static final String COUNTEDLOOP = START + \"CountedLoop\\\\b\" + MID + END;\n-    public static final String COUNTEDLOOP_MAIN = START + \"CountedLoop\\\\b\" + MID + \"main\" + END;\n-\n-    public static final String DIV = START + \"Div(I|L|F|D)\" + MID + END;\n-    public static final String DIV_I = START + \"DivI\" + MID + END;\n-    public static final String DIV_L = START + \"DivL\" + MID + END;\n-    public static final String DIV_F = START + \"DivF\" + MID + END;\n-    public static final String DIV_D = START + \"DivD\" + MID + END;\n@@ -90,2 +99,19 @@\n-    \/\/ Does not work for VM builds without JVMCI like x86_32 (a rule containing this regex will be skipped without having JVMCI built).\n-    public static final String INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*intrinsic_or_type_checked_inlining\" + END;\n+    public static final String STORE = START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + END;\n+    public static final String STORE_B = START + \"StoreB\" + MID + END; \/\/ Store to boolean is also mapped to byte\n+    public static final String STORE_C = START + \"StoreC\" + MID + END;\n+    public static final String STORE_I = START + \"StoreI\" + MID + END; \/\/ Store to short is also mapped to int\n+    public static final String STORE_L = START + \"StoreL\" + MID + END;\n+    public static final String STORE_F = START + \"StoreF\" + MID + END;\n+    public static final String STORE_D = START + \"StoreD\" + MID + END;\n+    public static final String STORE_P = START + \"StoreP\" + MID + END;\n+    public static final String STORE_N = START + \"StoreN\" + MID + END;\n+    public static final String STORE_OF_CLASS = COMPOSITE_PREFIX + START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_B_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreB\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_C_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreC\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_I_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreI\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_L_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreL\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_F_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreF\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_D_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreD\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_P_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreP\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_N_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreN\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+    public static final String STORE_OF_FIELD = COMPOSITE_PREFIX + START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@.*name=\" + IS_REPLACED + \",.*\" + END;\n@@ -117,4 +143,0 @@\n-    public static final String LOOP   = START + \"Loop\" + MID + END;\n-    public static final String LSHIFT = START + \"LShift(I|L)\" + MID + END;\n-    public static final String LSHIFT_I = START + \"LShiftI\" + MID + END;\n-    public static final String LSHIFT_L = START + \"LShiftL\" + MID + END;\n@@ -122,6 +144,3 @@\n-    public static final String MUL = START + \"Mul(I|L|F|D)\" + MID + END;\n-    public static final String MUL_I = START + \"MulI\" + MID + END;\n-    public static final String MUL_L = START + \"MulL\" + MID + END;\n-    public static final String MUL_F = START + \"MulF\" + MID + END;\n-    public static final String MUL_D = START + \"MulD\" + MID + END;\n-    public static final String MEMBAR = START + \"MemBar\" + MID + END;\n+    public static final String LOOP   = START + \"Loop\" + MID + END;\n+    public static final String COUNTEDLOOP = START + \"CountedLoop\\\\b\" + MID + END;\n+    public static final String COUNTEDLOOP_MAIN = START + \"CountedLoop\\\\b\" + MID + \"main\" + END;\n@@ -129,0 +148,5 @@\n+    public static final String CALL = START + \"CallStaticJava\" + MID + END;\n+    public static final String TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*reason\" + END;\n+    public static final String PREDICATE_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*predicate\" + END;\n+    public static final String UNSTABLE_IF_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unstable_if\" + END;\n+    public static final String CLASS_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*class_check\" + END;\n@@ -131,0 +155,4 @@\n+    public static final String RANGE_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*range_check\" + END;\n+    public static final String UNHANDLED_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unhandled\" + END;\n+    \/\/ Does not work for VM builds without JVMCI like x86_32 (a rule containing this regex will be skipped without having JVMCI built).\n+    public static final String INTRINSIC_OR_TYPE_CHECKED_INLINING_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*intrinsic_or_type_checked_inlining\" + END;\n@@ -132,1 +160,2 @@\n-    public static final String PREDICATE_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*predicate\" + END;\n+    public static final String SCOPE_OBJECT = \"(.*# ScObj.*\" + END;\n+    public static final String MEMBAR = START + \"MemBar\" + MID + END;\n@@ -134,1 +163,3 @@\n-    public static final String RANGE_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*range_check\" + END;\n+    public static final String LSHIFT = START + \"LShift(I|L)\" + MID + END;\n+    public static final String LSHIFT_I = START + \"LShiftI\" + MID + END;\n+    public static final String LSHIFT_L = START + \"LShiftL\" + MID + END;\n@@ -138,29 +169,0 @@\n-\n-    public static final String SCOPE_OBJECT = \"(.*# ScObj.*\" + END;\n-    public static final String STORE = START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + END;\n-    public static final String STORE_B = START + \"StoreB\" + MID + END; \/\/ Store to boolean is also mapped to byte\n-    public static final String STORE_C = START + \"StoreC\" + MID + END;\n-    public static final String STORE_I = START + \"StoreI\" + MID + END; \/\/ Store to short is also mapped to int\n-    public static final String STORE_L = START + \"StoreL\" + MID + END;\n-    public static final String STORE_F = START + \"StoreF\" + MID + END;\n-    public static final String STORE_D = START + \"StoreD\" + MID + END;\n-    public static final String STORE_P = START + \"StoreP\" + MID + END;\n-    public static final String STORE_N = START + \"StoreN\" + MID + END;\n-    public static final String STORE_OF_CLASS = COMPOSITE_PREFIX + START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_B_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreB\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_C_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreC\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_I_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreI\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_L_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreL\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_F_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreF\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_D_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreD\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_P_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreP\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_N_OF_CLASS = COMPOSITE_PREFIX + START + \"StoreN\" + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n-    public static final String STORE_OF_FIELD = COMPOSITE_PREFIX + START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@.*name=\" + IS_REPLACED + \",.*\" + END;\n-    public static final String SUB = START + \"Sub(I|L|F|D)\" + MID + END;\n-    public static final String SUB_I = START + \"SubI\" + MID + END;\n-    public static final String SUB_L = START + \"SubL\" + MID + END;\n-    public static final String SUB_F = START + \"SubF\" + MID + END;\n-    public static final String SUB_D = START + \"SubD\" + MID + END;\n-\n-    public static final String TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*reason\" + END;\n-\n@@ -177,2 +179,0 @@\n-    public static final String UNSTABLE_IF_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unstable_if\" + END;\n-    public static final String UNHANDLED_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unhandled\" + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -120,9 +120,0 @@\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (a - b) + (b - c) => (a - c)\n-    public long simpleEight(long a, long b, long c) {\n-        return (a - b) + (b - c);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/ir_transformations\/AddLNodeIdealizationTests.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -70,22 +70,0 @@\n-    @Test\n-    @Arguments(Argument.RANDOM_EACH)\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD, IRNode.SUB})\n-    \/\/ Checks (x * c) \/ c => x\n-    public int cancelOutDenominatorConstant(int x) {\n-        return (x * 13) \/ 13;\n-    }\n-\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD, IRNode.SUB})\n-    \/\/ Checks (x * y) \/ y => x\n-    \/\/ The denominator can only be cancelled out if it's different of zero.\n-    public int cancelOutDenominatorVariable(int x, int y) {\n-        if (y != 0) {\n-            return (x * y) \/ y;\n-        }\n-        else {\n-            return x;\n-        }\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/ir_transformations\/DivINodeIdealizationTests.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -70,22 +70,0 @@\n-    @Test\n-    @Arguments(Argument.RANDOM_EACH)\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD, IRNode.SUB})\n-    \/\/ Checks (x * c) \/ c => x\n-    public long cancelOutDenominatorConstant(long x) {\n-        return (x * 13L) \/ 13L;\n-    }\n-\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD, IRNode.SUB})\n-    \/\/ Checks (x * y) \/ y => x\n-    \/\/ The denominator can only be cancelled out if it's different of zero.\n-    public long cancelOutDenominatorVariable(long x, long y) {\n-        if (y != 0) {\n-            return (x * y) \/ y;\n-        }\n-        else {\n-            return x;\n-        }\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/ir_transformations\/DivLNodeIdealizationTests.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -78,9 +78,0 @@\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.ADD})\n-    @IR(counts = {IRNode.SUB, \"1\"})\n-    \/\/ Checks (x - y) - x => 0 - y\n-    public long simpleFive(long x, long y) {\n-        return (x - y) - x;\n-    }\n-\n@@ -176,16 +167,0 @@\n-\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.SUB, IRNode.ADD})\n-    \/\/ Checks (x + y) - y => x\n-    public long simpleSixteen(long x, long y) {\n-        return (x + y) - y;\n-    }\n-\n-    @Test\n-    @Arguments({Argument.RANDOM_EACH, Argument.RANDOM_EACH})\n-    @IR(failOn = {IRNode.LOAD, IRNode.STORE, IRNode.MUL, IRNode.DIV, IRNode.SUB, IRNode.ADD})\n-    \/\/ Checks (x + y) - x => y\n-    public long simpleSeventeen(long x, long y) {\n-        return (x + y) - x;\n-    }\n","filename":"test\/hotspot\/jtreg\/ir_transformations\/SubLNodeIdealizationTests.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"}]}