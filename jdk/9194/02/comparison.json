{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -530,2 +530,0 @@\n-                    transforms[0] = mdl.createTransform(xyz.getProfile(),\n-                                    ColorTransform.Any, ColorTransform.In);\n@@ -533,1 +531,1 @@\n-                        transforms[1] = mdl.createTransform(thisProfile,\n+                        transforms[0] = mdl.createTransform(xyz.getProfile(),\n@@ -535,1 +533,1 @@\n-                                        ColorTransform.Out);\n+                                        ColorTransform.In);\n@@ -537,2 +535,2 @@\n-                        transforms[1] = mdl.createTransform(thisProfile,\n-                                        ColorTransform.Any, ColorTransform.Out);\n+                        transforms[0] = mdl.createTransform(xyz.getProfile(),\n+                                        ColorTransform.Any, ColorTransform.In);\n@@ -540,0 +538,2 @@\n+                    transforms[1] = mdl.createTransform(thisProfile,\n+                                    ColorTransform.Any, ColorTransform.Out);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ColorSpace.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8288633\n+ * @summary Verifies precision of ICC_ColorSpace.toCIEXYZ\/fromCIEXYZ\n+ *\/\n+public final class ToFromCIEXYZRoundTrip {\n+\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        int[] css = {\n+            ColorSpace.CS_CIEXYZ, ColorSpace.CS_GRAY, ColorSpace.CS_LINEAR_RGB,\n+            ColorSpace.CS_PYCC, ColorSpace.CS_sRGB\n+        };\n+        Thread[] threads = new Thread[css.length];\n+        for (int i = 0; i < threads.length; i++) {\n+            int finalI = i;\n+            threads[i] = new Thread(() -> {\n+                test(ColorSpace.getInstance(css[finalI]));\n+            });\n+            threads[i].start();\n+        }\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException(\"Too many errors\");\n+        }\n+    }\n+\n+    private static void test(ColorSpace cs) {\n+        ColorSpace rgb = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+        float[] color = new float[3];\n+        int equal = 0;\n+        int all = 0;\n+        for (int r = 0; r < 256; ++r) {\n+            for (int g = 0; g < 256; ++g) {\n+                for (int b = 0; b < 256; ++b) {\n+                    all++;\n+                    color[0] = r \/ 255.0f;\n+                    color[1] = g \/ 255.0f;\n+                    color[2] = b \/ 255.0f;\n+                    \/\/ Convert some values from srgb to ciexyz. We assume the\n+                    \/\/ result will be a \"good\" point in the ciexyz color space.\n+                    float[] good = rgb.toCIEXYZ(color);\n+                    \/\/ Round trip the \"good\" point, assuming that some results\n+                    \/\/ will be equal to the \"good\" point.\n+                    \/\/ If toCIEXYZ and fromCIEXYZ use different rendering\n+                    \/\/ intents then equal results are unlikely.\n+                    float[] rel = cs.toCIEXYZ(cs.fromCIEXYZ(good));\n+                    if (Arrays.equals(good, rel)) {\n+                        equal++;\n+                    }\n+                }\n+            }\n+        }\n+        int percent = (int) (equal \/ (all \/ 100.0f));\n+        System.err.println(\"All = \" + all);\n+        System.err.println(\"Equal = \" + equal);\n+        System.err.println(\"Percent = \" + percent);\n+        if (equal < 100) {\n+            \/\/ the number 100 is based on the experiments, it was 0 before fix\n+            failed = true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ColorSpace\/ToFromCIEXYZRoundTrip.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}