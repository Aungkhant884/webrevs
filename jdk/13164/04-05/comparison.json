{"files":[{"patch":"@@ -200,3 +200,2 @@\n- * Due to limited ABI specification coverage, all the native linker implementations limit the function\n- * descriptors that they support to those that contain only so-called <em>canonical<\/em> layouts. These layouts\n- * have the following restrictions:\n+ * All the native linker implementations limit the function descriptors that they support to those that contain\n+ * only so-called <em>canonical<\/em> layouts. A canonical layout has the following characteristics:\n@@ -204,6 +203,6 @@\n- * <li>The layout must have its alignment constraint set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a><\/li>\n- * <li>If the layout is a {@link ValueLayout}, it must have a {@linkplain ValueLayout#order() byte order} that matches\n- * the {@linkplain ByteOrder#nativeOrder() native byte order}<\/li>\n- * <li>If the layout is a {@link GroupLayout}, its size must be a multiple of its alignment constraint<\/li>\n- * <li>If the layout is a {@link GroupLayout}, it must not contain excess padding. Padding is considered excess if it is\n- * not strictly required to align a non-padding layout, or to satisfy constraint 3<\/li>\n+ * <li>Its alignment constraint is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a><\/li>\n+ * <li>If it is a {@linkplain ValueLayout value layout}, its {@linkplain ValueLayout#order() byte order} is\n+ * the {@linkplain ByteOrder#nativeOrder() native byte order}.\n+ * <li>If it is a {@linkplain GroupLayout group layout}, its size is a multiple of its alignment constraint, and<\/li>\n+ * <li>It does not contain padding other than what is strictly required to align its non-padding layout elements,\n+ * or to satisfy constraint 3<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -120,2 +120,3 @@\n-        checkByteOrder(layout);\n-        if (layout instanceof StructLayout sl) {\n+        if (layout instanceof ValueLayout vl) {\n+            checkByteOrder(vl);\n+        } else if (layout instanceof StructLayout sl) {\n@@ -176,4 +177,3 @@\n-    private void checkByteOrder(MemoryLayout layout) {\n-        if (layout instanceof ValueLayout vl\n-                && vl.order() != linkerByteOrder()) {\n-            throw new IllegalArgumentException(\"Layout does not have the right byte order: \" + layout);\n+    private void checkByteOrder(ValueLayout vl) {\n+        if (vl.order() != linkerByteOrder()) {\n+            throw new IllegalArgumentException(\"Layout does not have the right byte order: \" + vl);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}