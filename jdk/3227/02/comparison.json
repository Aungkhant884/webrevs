{"files":[{"patch":"@@ -114,0 +114,4 @@\n+bool OopStorage::AllocationList::contains(const Block& block) const {\n+  return (next(block) != NULL) || (ctail() == &block);\n+}\n+\n@@ -248,2 +252,2 @@\n-inline bool is_full_bitmask(uintx bitmask) { return ~bitmask == 0; }\n-inline bool is_empty_bitmask(uintx bitmask) { return bitmask == 0; }\n+static inline bool is_full_bitmask(uintx bitmask) { return ~bitmask == 0; }\n+static inline bool is_empty_bitmask(uintx bitmask) { return bitmask == 0; }\n@@ -670,1 +674,1 @@\n-  \/\/ Process popped block.\n+  \/\/ Make list state consistent with bitmask state.\n@@ -672,15 +676,11 @@\n-\n-  \/\/ Make membership in list consistent with bitmask state.\n-  if ((_allocation_list.ctail() != NULL) &&\n-      ((_allocation_list.ctail() == block) ||\n-       (_allocation_list.next(*block) != NULL))) {\n-    \/\/ Block is in the _allocation_list.\n-    assert(!is_full_bitmask(allocated), \"invariant\");\n-  } else if (!is_full_bitmask(allocated)) {\n-    \/\/ Block is not in the _allocation_list, but now should be.\n-    _allocation_list.push_front(*block);\n-  } \/\/ Else block is full and not in list, which is correct.\n-\n-  \/\/ Move empty block to end of list, for possible deletion.\n-  if (is_empty_bitmask(allocated)) {\n-    _allocation_list.unlink(*block);\n+  if (is_full_bitmask(allocated)) {\n+    \/\/ If full then it shouldn't be in the list, and should stay that way.\n+    assert(!_allocation_list.contains(*block), \"invariant\");\n+  } else if (_allocation_list.contains(*block)) {\n+    \/\/ Block is in list.  If empty, move to the end for possible deletion.\n+    if (is_empty_bitmask(allocated)) {\n+      _allocation_list.unlink(*block);\n+      _allocation_list.push_back(*block);\n+    }\n+  } else if (is_empty_bitmask(allocated)) {\n+    \/\/ Block is empty and not in list. Add to back for possible deletion.\n@@ -688,0 +688,3 @@\n+  } else {\n+    \/\/ Block is neither full nor empty, and not in list.  Add to front.\n+    _allocation_list.push_front(*block);\n@@ -695,1 +698,1 @@\n-inline void check_release_entry(const oop* entry) {\n+static inline void check_release_entry(const oop* entry) {\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":22,"deletions":19,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -215,1 +215,2 @@\n-  \/\/ Doubly-linked list of Blocks.\n+  \/\/ Doubly-linked list of Blocks.  For all operations with a block\n+  \/\/ argument, the block must be from the list's OopStorage.\n@@ -240,0 +241,2 @@\n+\n+    bool contains(const Block& block) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}