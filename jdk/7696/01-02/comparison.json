{"files":[{"patch":"@@ -268,0 +268,2 @@\n+    private record PushContinuationState(HeaderDecoder pushContDecoder, PushPromiseFrame pushContFrame) {}\n+    private volatile PushContinuationState pushContinuationState;\n@@ -780,2 +782,2 @@\n-                    if (frame instanceof DataFrame) {\n-                        dropDataFrame((DataFrame) frame);\n+                    if (frame instanceof DataFrame df) {\n+                        dropDataFrame(df);\n@@ -799,1 +801,1 @@\n-            \/\/ While pus frame is not null, the only acceptable frame on this\n+            \/\/ While push frame is not null, the only acceptable frame on this\n@@ -801,1 +803,1 @@\n-            if (pcs != null) {\n+            if (pushContinuationState != null) {\n@@ -803,1 +805,6 @@\n-                    handlePushContinuation(stream, cf);\n+                    try {\n+                        handlePushContinuation(stream, cf);\n+                    } catch (UncheckedIOException e) {\n+                        debug.log(\"Error handling Push Promise with Continuation: \" + e.getMessage(), e);\n+                        protocolError(ResetFrame.PROTOCOL_ERROR, e.getMessage());\n+                    }\n@@ -806,1 +813,2 @@\n-                    protocolError(ErrorFrame.PROTOCOL_ERROR, \"Expected Continuation frame but received another type\");\n+                    pushContinuationState = null;\n+                    protocolError(ErrorFrame.PROTOCOL_ERROR, \"Expected a Continuation frame but received \" + frame);\n@@ -816,1 +824,1 @@\n-                } else if (frame instanceof HeaderFrame) {\n+                } else if (frame instanceof HeaderFrame hf) {\n@@ -819,1 +827,1 @@\n-                        decodeHeaders((HeaderFrame) frame, stream.rspHeadersConsumer());\n+                        decodeHeaders(hf, stream.rspHeadersConsumer());\n@@ -854,3 +862,0 @@\n-    private record PushContinuationState(HeaderDecoder pushContDecoder, PushPromiseFrame pushContFrame) {}\n-    private volatile PushContinuationState pcs;\n-\n@@ -862,1 +867,1 @@\n-        assert pcs == null;\n+        assert pushContinuationState == null;\n@@ -869,1 +874,1 @@\n-            pcs = new PushContinuationState(decoder, pp);\n+            pushContinuationState = new PushContinuationState(decoder, pp);\n@@ -875,1 +880,1 @@\n-        decodeHeaders(cf, pcs.pushContDecoder);\n+        decodeHeaders(cf, pushContinuationState.pushContDecoder);\n@@ -878,2 +883,3 @@\n-            completePushPromise(pcs.pushContFrame.getPromisedStream(), parent, pcs.pushContDecoder.headers());\n-            pcs = null;\n+            completePushPromise(pushContinuationState.pushContFrame.getPromisedStream(), parent,\n+                    pushContinuationState.pushContDecoder.headers());\n+            pushContinuationState = null;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,0 +26,4 @@\n+ * @bug 8263031\n+ * @summary Tests that the HttpClient can correctly receive a Push Promise\n+ *          Frame with the END_HEADERS flag unset followed by one or more\n+ *          Continuation Frames.\n@@ -40,0 +44,1 @@\n+import org.testng.annotations.AfterTest;\n@@ -53,1 +58,1 @@\n-import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n@@ -64,1 +69,1 @@\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.assertEquals;\n@@ -70,0 +75,1 @@\n+    static int continuationCount;\n@@ -73,0 +79,8 @@\n+    \/\/ Set up simple client-side push promise handler\n+    ConcurrentMap<HttpRequest, HttpRequest> resultMap = new ConcurrentHashMap<>();\n+    HttpResponse.PushPromiseHandler<String> pph = (initial, pushRequest, acceptor) -> {\n+        HttpResponse.BodyHandler<String> s = HttpResponse.BodyHandlers.ofString(UTF_8);\n+        acceptor.apply(s);\n+        resultMap.put(initial, pushRequest);\n+    };\n+\n@@ -75,0 +89,2 @@\n+        resultMap = new ConcurrentHashMap<>();\n+\n@@ -88,0 +104,5 @@\n+    @AfterTest\n+    public void teardown() {\n+        resultMap = null;\n+    }\n+\n@@ -95,2 +116,2 @@\n-    public void test() throws IOException, InterruptedException {\n-        ConcurrentMap<HttpRequest, HttpRequest> resultMap = new ConcurrentHashMap<>();\n+    public void testOneContinuation() {\n+        continuationCount = 1;\n@@ -98,0 +119,2 @@\n+\n+        \/\/ Carry out request\n@@ -99,0 +122,7 @@\n+        CompletableFuture<HttpResponse<String>> cf =\n+                client.sendAsync(hreq, HttpResponse.BodyHandlers.ofString(UTF_8), pph);\n+        cf.join();\n+\n+        \/\/ Verify results\n+        verify();\n+    }\n@@ -100,6 +130,8 @@\n-        \/\/ Set up simple client-side push promise handler\n-        HttpResponse.PushPromiseHandler<String> pph = (initial, pushRequest, acceptor) -> {\n-            HttpResponse.BodyHandler<String> s = HttpResponse.BodyHandlers.ofString(UTF_8);\n-            acceptor.apply(s);\n-            resultMap.put(initial, pushRequest);\n-        };\n+    \/**\n+     * Same as above, but tests for the case where two Continuation Frames are sent\n+     * with the END_HEADERS flag set only on the last frame.\n+     *\/\n+    @Test\n+    public void testTwoContinuations() {\n+        continuationCount = 2;\n+        HttpClient client = HttpClient.newHttpClient();\n@@ -107,0 +139,2 @@\n+        \/\/ Carry out request\n+        HttpRequest hreq = HttpRequest.newBuilder(uri).version(HttpClient.Version.HTTP_2).GET().build();\n@@ -111,0 +145,5 @@\n+        \/\/ Verify results\n+        verify();\n+    }\n+\n+    private void verify() {\n@@ -119,1 +158,1 @@\n-                assertTrue(serverPushReq.headers().equals(testHeaders));\n+                assertEquals(testHeaders, serverPushReq.headers());\n@@ -127,1 +166,1 @@\n-        HttpHeadersBuilder continuationHeadersBuilder;\n+        List<ContinuationFrame> cfs;\n@@ -129,1 +168,4 @@\n-        Http2LPPTestExchangeImpl(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os, Http2TestServerConnection conn, boolean pushAllowed) {\n+        Http2LPPTestExchangeImpl(int streamid, String method, HttpHeaders reqheaders,\n+                                 HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is,\n+                                 SSLSession sslSession, BodyOutputStream os,\n+                                 Http2TestServerConnection conn, boolean pushAllowed) {\n@@ -138,3 +180,16 @@\n-        private  void  setContHeaders(String name, String value) {\n-            continuationHeadersBuilder.setHeader(name, value);\n-            testHeadersBuilder.setHeader(name, value);\n+        private void assembleContinuations() {\n+            for (int i = 0; i < continuationCount; i++) {\n+                HttpHeadersBuilder builder = new HttpHeadersBuilder();\n+                for (int j = 0; j < 10; j++) {\n+                    String name = \"x-cont-\" + i + \"-\" + j;\n+                    builder.setHeader(name, \"data_\" + j);\n+                    testHeadersBuilder.setHeader(name, \"data_\" + j);\n+                }\n+\n+                ContinuationFrame cf = new ContinuationFrame(streamid, 0x0, conn.encodeHeaders(builder.build()));\n+                \/\/ If this is the last Continuation Frame, set the END_HEADERS flag.\n+                if (i >= continuationCount - 1) {\n+                    cf.setFlag(HeaderFrame.END_HEADERS);\n+                }\n+                cfs.add(cf);\n+            }\n@@ -146,1 +201,0 @@\n-            continuationHeadersBuilder = new HttpHeadersBuilder();\n@@ -148,0 +202,1 @@\n+            cfs = new ArrayList<>();\n@@ -161,1 +216,0 @@\n-                setContHeaders(\"x-cont-header-\" + i, \"data_\" + i);\n@@ -163,0 +217,5 @@\n+\n+            \/\/ Create the Continuation Frame\/s, done before Push Promise Frame for test purposes\n+            \/\/ as testHeaders contains all headers used in all frames\n+            assembleContinuations();\n+\n@@ -164,1 +223,0 @@\n-            HttpHeaders continuationHeaders = continuationHeadersBuilder.build();\n@@ -166,1 +224,0 @@\n-\n@@ -172,4 +229,0 @@\n-            \/\/ Create the continuation frame\n-            List<ByteBuffer> encodedHeaders = conn.encodeHeaders(continuationHeaders);\n-            ContinuationFrame cf = new ContinuationFrame(streamid, HeaderFrame.END_HEADERS, encodedHeaders);\n-\n@@ -179,1 +232,5 @@\n-                conn.outputQ.put(cf);\n+                System.err.println(\"Server: Scheduled a Continuation to Send\");\n+                for (ContinuationFrame cf : cfs) {\n+                    conn.outputQ.put(cf);\n+                    System.err.println(\"Server: Scheduled a Continuation to Send\");\n+                }\n@@ -181,1 +238,1 @@\n-                System.err.println(\"TestServer: pushPromise exception: \" + ex);\n+                System.err.println(\"Server: pushPromise exception: \" + ex);\n@@ -231,1 +288,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PushPromiseContinuation.java","additions":84,"deletions":27,"binary":false,"changes":111,"status":"modified"}]}