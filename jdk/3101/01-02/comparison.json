{"files":[{"patch":"@@ -425,4 +425,1 @@\n-      \/\/ make sure 'this' is still set as pending monitor so that exit()\n-      \/\/ doesn't set _previous_owner_tid for this special case.\n-      assert(current->current_pending_monitor() == this, \"invariant\");\n-      exit(current);\n+      exit(current, false \/* not_suspended *\/);\n@@ -1146,1 +1143,1 @@\n-void ObjectMonitor::exit(JavaThread* current) {\n+void ObjectMonitor::exit(JavaThread* current, bool not_suspended) {\n@@ -1185,5 +1182,3 @@\n-  \/\/ Set _previous_owner_tid for the MonitorEnter event if it is enabled and\n-  \/\/ we legitimately owned this monitor. We can also get here if we need to self-suspend\n-  \/\/ in enter(), in which case we never really owned this monitor and so should not record\n-  \/\/ our thread id. In that case current_pending_monitor() is non-NULL.\n-  if (current->current_pending_monitor() == NULL && EventJavaMonitorEnter::is_enabled()) {\n+  \/\/ get the owner's thread id for the MonitorEnter event\n+  \/\/ if it is enabled and the thread isn't suspended\n+  if (not_suspended && EventJavaMonitorEnter::is_enabled()) {\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-  void      exit(JavaThread* current);\n+  void      exit(JavaThread* current, bool not_suspended = true);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}