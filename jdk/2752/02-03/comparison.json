{"files":[{"patch":"@@ -1418,1 +1418,1 @@\n-        \/\/ The spec requres all slashes MUST be forward '\/', it is possible\n+        \/\/ The spec requires all slashes MUST be forward '\/', it is possible\n@@ -1421,1 +1421,1 @@\n-        \/\/ our \"safe\" check for leading slahs and dot-dot. So replace them\n+        \/\/ our \"safe\" check for leading slash and dot-dot. So replace them\n@@ -1427,0 +1427,8 @@\n+        \/\/ the xdestDir points to the user specified location where the jar needs to\n+        \/\/ be extracted. By default xdestDir is null and represents current working\n+        \/\/ directory.\n+        \/\/ jar extraction using -P option is only allowed when the destination\n+        \/\/ directory isn't specified (and hence defaults to current working directory).\n+        \/\/ In such cases using this java.io.File constructor which accepts a null parent path\n+        \/\/ allows us to extract entries that may have leading slashes and hence may need\n+        \/\/ to be extracted outside of the current directory.\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        You may not specify more than one directory for extracting the jar\n+        You may not specify the '-C' or '--dir' option more than once with the '-x' option\n@@ -64,1 +64,1 @@\n-        -P option cannot be used when extracting a jar to a specific location\n+        You may not specify '-Px' with the '-C' or '--dir' options\n@@ -167,1 +167,1 @@\n-        extracting to {0}\n+        extracting to directory: {0}\n@@ -189,0 +189,1 @@\n+When used in extract mode, extracts the jar to the specified directory\\n\\\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n@@ -64,1 +64,1 @@\n-    @BeforeClass\n+    @BeforeTest\n@@ -69,1 +69,1 @@\n-        testJarPath = Paths.get(tmpDir,\"8173970-test.jar\");\n+        testJarPath = Paths.get(tmpDir, \"8173970-test.jar\");\n@@ -89,1 +89,1 @@\n-    @AfterClass\n+    @AfterTest\n@@ -101,0 +101,3 @@\n+    \/**\n+     * Creates and returns various relative paths, to which the jar will be extracted in the tests\n+     *\/\n@@ -131,0 +134,3 @@\n+    \/**\n+     * Creates and returns various absolute paths, to which the jar will be extracted in the tests\n+     *\/\n@@ -142,0 +148,3 @@\n+    \/**\n+     * Creates and returns various normalized paths, to which the jar will be extracted in the tests\n+     *\/\n@@ -153,0 +162,5 @@\n+    \/**\n+     * Extracts a jar to various relative paths, using the -C\/--dir option and then\n+     * verifies that the extracted content is at the expected locations with the correct\n+     * content\n+     *\/\n@@ -155,0 +169,1 @@\n+        testLongFormExtract(dest);\n@@ -158,0 +173,5 @@\n+    \/**\n+     * Extracts a jar to various absolute paths, using the -C\/--dir option and then\n+     * verifies that the extracted content is at the expected locations with the correct\n+     * content\n+     *\/\n@@ -161,0 +181,1 @@\n+        testLongFormExtract(dest);\n@@ -163,0 +184,5 @@\n+    \/**\n+     * Extracts a jar to various normalized paths (i.e. no {@code .} or @{code ..} in the path components),\n+     * using the -C\/--dir option and then verifies that the extracted content is at the expected locations\n+     * with the correct content\n+     *\/\n@@ -166,0 +192,1 @@\n+        testLongFormExtract(dest);\n@@ -169,1 +196,1 @@\n-     * Test that {@code jar -x -f --dir} works as expected\n+     * Test that extracting a jar with {@code jar -x -f --dir} works as expected\n@@ -172,1 +199,1 @@\n-    public void testExtractLongForm() throws Exception {\n+    public void testExtractLongFormDir() throws Exception {\n@@ -190,0 +217,2 @@\n+        \/\/ this message is expected to be the one from the jar --help output which is sourced from\n+        \/\/ jar.properties\n@@ -206,0 +235,12 @@\n+    \/**\n+     * Tests that {@code jar --extract -f} command works fine even when the -C or --dir option\n+     * isn't specified\n+     *\/\n+    @Test\n+    public void testLongFormExtractWithoutOutputDir() throws Exception {\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, \"--extract\", \"-f\", testJarPath.toString());\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + testJarPath);\n+        \/\/ the content would have been extracted to current dir\n+        verifyExtractedContent(\".\");\n+    }\n+\n@@ -215,17 +256,20 @@\n-        \/\/ extract with -P flag without any explicit destination directory (expect the extraction to work fine)\n-        final String[] args = new String[]{\"-xvfP\", jarPath.toString()};\n-        printJarCommand(args);\n-        final int exitCode = JAR_TOOL.run(System.out, System.err, args);\n-        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + jarPath);\n-        final String dest = \".\";\n-        Assert.assertTrue(Files.isDirectory(Paths.get(dest)), dest + \" is not a directory\");\n-        final Path d1 = Paths.get(dest, \"d1\");\n-        Assert.assertTrue(Files.isDirectory(d1), d1 + \" directory is missing or not a directory\");\n-        final Path d2 = Paths.get(dest, \"d1\", \"d2\");\n-        Assert.assertTrue(Files.isDirectory(d2), d2 + \" directory is missing or not a directory\");\n-        final Path f1 = Paths.get(LEADING_SLASH_PRESERVED_ENTRY);\n-        Assert.assertTrue(Files.isRegularFile(f1), f1 + \" is missing or not a file\");\n-        Assert.assertEquals(Files.readAllBytes(f1), FILE_CONTENT, \"Unexpected content in file \" + f1);\n-        final Path f2 = Paths.get(\"d1\/d2\/..\/f2.txt\");\n-        Assert.assertTrue(Files.isRegularFile(f2), f2 + \" is missing or not a file\");\n-        Assert.assertEquals(Files.readAllBytes(f2), FILE_CONTENT, \"Unexpected content in file \" + f2);\n+        final List<String[]> cmdArgs = new ArrayList<>();\n+        cmdArgs.add(new String[]{\"-xvfP\", jarPath.toString()});\n+        cmdArgs.add(new String[]{\"--extract\", \"-v\", \"-P\", \"-f\", jarPath.toString()});\n+        for (final String[] args : cmdArgs) {\n+            printJarCommand(args);\n+            final int exitCode = JAR_TOOL.run(System.out, System.err, args);\n+            Assert.assertEquals(exitCode, 0, \"Failed to extract \" + jarPath);\n+            final String dest = \".\";\n+            Assert.assertTrue(Files.isDirectory(Paths.get(dest)), dest + \" is not a directory\");\n+            final Path d1 = Paths.get(dest, \"d1\");\n+            Assert.assertTrue(Files.isDirectory(d1), d1 + \" directory is missing or not a directory\");\n+            final Path d2 = Paths.get(dest, \"d1\", \"d2\");\n+            Assert.assertTrue(Files.isDirectory(d2), d2 + \" directory is missing or not a directory\");\n+            final Path f1 = Paths.get(LEADING_SLASH_PRESERVED_ENTRY);\n+            Assert.assertTrue(Files.isRegularFile(f1), f1 + \" is missing or not a file\");\n+            Assert.assertEquals(Files.readAllBytes(f1), FILE_CONTENT, \"Unexpected content in file \" + f1);\n+            final Path f2 = Paths.get(\"d1\/d2\/..\/f2.txt\");\n+            Assert.assertTrue(Files.isRegularFile(f2), f2 + \" is missing or not a file\");\n+            Assert.assertEquals(Files.readAllBytes(f2), FILE_CONTENT, \"Unexpected content in file \" + f2);\n+        }\n@@ -240,1 +284,3 @@\n-        final String expectedErrMsg = \"-P option cannot be used when extracting a jar to a specific location\";\n+        \/\/ this error message is expected to be the one from the jar --help output which is sourced from\n+        \/\/ jar.properties\n+        final String expectedErrMsg = \"You may not specify '-Px' with the '-C' or '--dir' options\";\n@@ -248,0 +294,4 @@\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-P\", \"-C\", tmpDir});\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-P\", \"--dir\", tmpDir});\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-P\", \"-C\", \".\"});\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-P\", \"--dir\", \".\"});\n@@ -277,1 +327,3 @@\n-        final String expectedErrMsg = \"You may not specify more than one directory for extracting the jar\";\n+        \/\/ this error message is expected to be the one from the jar --help output which is sourced from\n+        \/\/ jar.properties\n+        final String expectedErrMsg = \"You may not specify the '-C' or '--dir' option more than once with the '-x' option\";\n@@ -283,0 +335,3 @@\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-C\", tmpDir, \"-C\", tmpDir});\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"--dir\", tmpDir, \"--dir\", tmpDir});\n+        cmdArgs.add(new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"--dir\", tmpDir, \"-C\", tmpDir});\n@@ -299,2 +354,2 @@\n-        final String tmpDir = Files.createTempDirectory(Path.of(\".\"), \"8173970-\").toString();\n-        final String[] cmdArgs = new String[]{\"-x\", \"-f\", testJarPath.toString(), \"--dir\", tmpDir,\n+        String tmpDir = Files.createTempDirectory(Path.of(\".\"), \"8173970-\").toString();\n+        String[] cmdArgs = new String[]{\"-x\", \"-f\", testJarPath.toString(), \"--dir\", tmpDir,\n@@ -302,2 +357,15 @@\n-        printJarCommand(cmdArgs);\n-        final int exitCode = JAR_TOOL.run(System.out, System.err, cmdArgs);\n+        testExtractPartialContent(tmpDir, cmdArgs);\n+\n+        tmpDir = Files.createTempDirectory(Path.of(\".\"), \"8173970-\").toString();\n+        cmdArgs = new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"--dir\", tmpDir,\n+                \"f1.txt\", \"d1\/d2\/d3\/f2.txt\"};\n+        testExtractPartialContent(tmpDir, cmdArgs);\n+\n+    }\n+\n+    \/**\n+     * Extract to destDir using the passed command arguments and verify the extracted content\n+     *\/\n+    private void testExtractPartialContent(final String destDir, final String[] extractArgs) throws Exception {\n+        printJarCommand(extractArgs);\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, extractArgs);\n@@ -306,3 +374,8 @@\n-        final Stream<Path> paths = Files.walk(Path.of(tmpDir));\n-        Assert.assertEquals(paths.count(), 6, \"Unexpected number of files\/dirs in \" + tmpDir);\n-        final Path f1 = Paths.get(tmpDir, \"f1.txt\");\n+        final Stream<Path> paths = Files.walk(Path.of(destDir));\n+        \/\/ files\/dirs count expected to be found when the location to which the jar was extracted\n+        \/\/ is walked.\n+        \/\/ 1) The top level dir being walked 2) f1.txt file 3) d1 dir 4) d1\/d2 dir\n+        \/\/ 5) d1\/d2\/d3 dir 6) d1\/d2\/d3\/f2.txt file\n+        final int numExpectedFiles = 6;\n+        Assert.assertEquals(paths.count(), numExpectedFiles, \"Unexpected number of files\/dirs in \" + destDir);\n+        final Path f1 = Paths.get(destDir, \"f1.txt\");\n@@ -311,1 +384,1 @@\n-        final Path d1 = Paths.get(tmpDir, \"d1\");\n+        final Path d1 = Paths.get(destDir, \"d1\");\n@@ -329,1 +402,1 @@\n-     * Extracts the jar file using {@code jar -x -f <jarfile> -C <dest>}\n+     * Extracts the jar file using {@code jar -x -f <jarfile> -C <dest>} and verifies the extracted content\n@@ -339,0 +412,12 @@\n+    \/**\n+     * Extracts the jar file using {@code jar --extract -f <jarfile> -C <dest>} and verifies the\n+     * extracted content\n+     *\/\n+    private void testLongFormExtract(final String dest) throws Exception {\n+        final String[] args = new String[]{\"--extract\", \"-f\", testJarPath.toString(), \"-C\", dest};\n+        printJarCommand(args);\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, args);\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + testJarPath + \" to \" + dest);\n+        verifyExtractedContent(dest);\n+    }\n+\n@@ -367,0 +452,4 @@\n+    \/**\n+     * Creates a jar whose entries have a leading slash and the dot-dot character preserved.\n+     * This is the same as creating a jar using {@code jar -cfP somejar.jar <file1> <file2> ...}\n+     *\/\n@@ -369,1 +458,1 @@\n-        final Path jarPath = Paths.get(tmpDir,\"8173970-test-withpflag.jar\");\n+        final Path jarPath = Paths.get(tmpDir, \"8173970-test-withpflag.jar\");\n","filename":"test\/jdk\/tools\/jar\/JarExtractTest.java","additions":125,"deletions":36,"binary":false,"changes":161,"status":"modified"}]}