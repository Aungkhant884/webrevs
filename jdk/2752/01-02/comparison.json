{"files":[{"patch":"@@ -365,4 +365,1 @@\n-                if (xdestDir == null) {\n-                    \/\/ default to current working directory\n-                    xdestDir = \".\";\n-                } else if (!xdestDir.equals(\".\")) {\n+                if (xdestDir != null) {\n@@ -697,0 +694,4 @@\n+        if (xflag && pflag && xdestDir != null) {\n+            usageError(getMsg(\"error.extract.pflag.not.allowed\"));\n+            return false;\n+        }\n@@ -1348,1 +1349,2 @@\n-            output(formatMsg(\"out.extract.dir\", Path.of(xdestDir).normalize().toAbsolutePath().toString()));\n+            output(formatMsg(\"out.extract.dir\", Path.of(xdestDir == null ? \".\" : xdestDir).normalize()\n+                    .toAbsolutePath().toString()));\n@@ -1385,1 +1387,2 @@\n-            output(formatMsg(\"out.extract.dir\", Path.of(xdestDir).normalize().toAbsolutePath().toString()));\n+            output(formatMsg(\"out.extract.dir\", Path.of(xdestDir == null ? \".\" : xdestDir).normalize()\n+                    .toAbsolutePath().toString()));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+error.extract.pflag.not.allowed=\\\n+        -P option cannot be used when extracting a jar to a specific location\n@@ -245,3 +247,3 @@\n-\\  -C DIR                     When used in extract mode, extracts the jar into the\\n\\\n-\\                             specified directory. In any other mode, change to the\\n\\\n-\\                             specified directory and include the following file\n+\\  -C DIR                     Change to the specified directory and include the\\n\\\n+\\                             following file. When used in extract mode, extracts\\n\\\n+\\                             the jar to the specified directory\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+    private static final String LEADING_SLASH_PRESERVED_ENTRY = \"\/tmp\/8173970\/f1.txt\";\n@@ -65,1 +66,4 @@\n-        testJarPath = Paths.get(\"8173970-test.jar\");\n+        Files.deleteIfExists(Path.of(LEADING_SLASH_PRESERVED_ENTRY));\n+\n+        final String tmpDir = Files.createTempDirectory(\"8173970-\").toString();\n+        testJarPath = Paths.get(tmpDir,\"8173970-test.jar\");\n@@ -81,0 +85,2 @@\n+\n+        filesToDelete.add(Path.of(LEADING_SLASH_PRESERVED_ENTRY));\n@@ -200,0 +206,52 @@\n+    \/**\n+     * Tests that extracting a jar using {@code -P} flag and without any explicit destination\n+     * directory works correctly if the jar contains entries with leading slashes and\/or {@code ..}\n+     * parts preserved.\n+     *\/\n+    @Test\n+    public void testExtractNoDestDirWithPFlag() throws Exception {\n+        \/\/ create a jar which has leading slash (\/) and dot-dot (..) preserved in entry names\n+        final Path jarPath = createJarWithPFlagSemantics();\n+        \/\/ extract with -P flag without any explicit destination directory (expect the extraction to work fine)\n+        final String[] args = new String[]{\"-xvfP\", jarPath.toString()};\n+        printJarCommand(args);\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, args);\n+        Assert.assertEquals(exitCode, 0, \"Failed to extract \" + jarPath);\n+        final String dest = \".\";\n+        Assert.assertTrue(Files.isDirectory(Paths.get(dest)), dest + \" is not a directory\");\n+        final Path d1 = Paths.get(dest, \"d1\");\n+        Assert.assertTrue(Files.isDirectory(d1), d1 + \" directory is missing or not a directory\");\n+        final Path d2 = Paths.get(dest, \"d1\", \"d2\");\n+        Assert.assertTrue(Files.isDirectory(d2), d2 + \" directory is missing or not a directory\");\n+        final Path f1 = Paths.get(LEADING_SLASH_PRESERVED_ENTRY);\n+        Assert.assertTrue(Files.isRegularFile(f1), f1 + \" is missing or not a file\");\n+        Assert.assertEquals(Files.readAllBytes(f1), FILE_CONTENT, \"Unexpected content in file \" + f1);\n+        final Path f2 = Paths.get(\"d1\/d2\/..\/f2.txt\");\n+        Assert.assertTrue(Files.isRegularFile(f2), f2 + \" is missing or not a file\");\n+        Assert.assertEquals(Files.readAllBytes(f2), FILE_CONTENT, \"Unexpected content in file \" + f2);\n+    }\n+\n+    \/**\n+     * Tests that the {@code -P} option cannot be used during jar extraction when the {@code -C} and\/or\n+     * {@code --dir} option is used\n+     *\/\n+    @Test\n+    public void testExtractWithDirPFlagNotAllowed() throws Exception {\n+        final String expectedErrMsg = \"-P option cannot be used when extracting a jar to a specific location\";\n+        final String tmpDir = Files.createTempDirectory(Path.of(\".\"), \"8173970-\").toString();\n+        final List<String[]> cmdArgs = new ArrayList<>();\n+        cmdArgs.add(new String[]{\"-x\", \"-f\", testJarPath.toString(), \"-P\", \"-C\", tmpDir});\n+        cmdArgs.add(new String[]{\"-x\", \"-f\", testJarPath.toString(), \"-P\", \"--dir\", tmpDir});\n+        cmdArgs.add(new String[]{\"-x\", \"-f\", testJarPath.toString(), \"-P\", \"-C\", \".\"});\n+        cmdArgs.add(new String[]{\"-x\", \"-f\", testJarPath.toString(), \"-P\", \"--dir\", \".\"});\n+        cmdArgs.add(new String[]{\"-xvfP\", testJarPath.toString(), \"-C\", tmpDir});\n+        for (final String[] args : cmdArgs) {\n+            final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+            printJarCommand(args);\n+            int exitCode = JAR_TOOL.run(System.out, new PrintStream(err), args);\n+            Assert.assertNotEquals(exitCode, 0, \"jar extraction was expected to fail but didn't\");\n+            \/\/ verify it did indeed fail due to the right reason\n+            Assert.assertTrue(err.toString(StandardCharsets.UTF_8).contains(expectedErrMsg));\n+        }\n+    }\n+\n@@ -309,0 +367,12 @@\n+    private static Path createJarWithPFlagSemantics() throws IOException {\n+        final String tmpDir = Files.createTempDirectory(Path.of(\".\"), \"8173970-\").toString();\n+        final Path jarPath = Paths.get(tmpDir,\"8173970-test-withpflag.jar\");\n+        final JarBuilder builder = new JarBuilder(jarPath.toString());\n+        builder.addEntry(\"d1\/\", new byte[0]);\n+        builder.addEntry(\"d1\/d2\/\", new byte[0]);\n+        builder.addEntry(LEADING_SLASH_PRESERVED_ENTRY, FILE_CONTENT);\n+        builder.addEntry(\"d1\/d2\/..\/f2.txt\", FILE_CONTENT);\n+        builder.build();\n+        return jarPath;\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/JarExtractTest.java","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"}]}