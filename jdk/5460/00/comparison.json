{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,5 @@\n+#ifdef WIN32\n+static int RETRY_MAX = 5;\n+static DWORD RETRY_INTERVAL = 250;\n+#endif\n+\n@@ -105,1 +110,0 @@\n-    jlong fhandle;\n@@ -128,21 +132,36 @@\n-    if (fname_length < MAX_PATH) {\n-        return (jlong)CreateFile(\n-            fname,              \/* path name in multibyte char *\/\n-            access,             \/* Read and\/or write permission *\/\n-            sharing,            \/* File sharing flags *\/\n-            NULL,               \/* Security attributes *\/\n-            disposition,        \/* creation disposition *\/\n-            flagsAndAttributes, \/* flags and attributes *\/\n-            NULL);\n-    } else {\n-        \/* Get required buffer size to convert to Unicode *\/\n-        int wfname_len = MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,\n-                                             fname, -1, NULL, 0);\n-        if (wfname_len == 0) {\n-            return (jlong)INVALID_HANDLE_VALUE;\n-        }\n-        if ((wfname = (WCHAR*)malloc(wfname_len * sizeof(WCHAR))) == NULL) {\n-            return (jlong)INVALID_HANDLE_VALUE;\n-        }\n-        if (MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,\n-                                fname, -1, wfname, wfname_len) == 0) {\n+    HANDLE hFile = INVALID_HANDLE_VALUE;\n+    int retry = 0;\n+    while (retry < RETRY_MAX) {\n+        if (fname_length < MAX_PATH) {\n+            hFile = CreateFile(\n+                fname,              \/* path name in multibyte char *\/\n+                access,             \/* Read and\/or write permission *\/\n+                sharing,            \/* File sharing flags *\/\n+                NULL,               \/* Security attributes *\/\n+                disposition,        \/* creation disposition *\/\n+                flagsAndAttributes, \/* flags and attributes *\/\n+                NULL);\n+        } else {\n+            \/* Get required buffer size to convert to Unicode *\/\n+            int wfname_len = MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,\n+                                                 fname, -1, NULL, 0);\n+            if (wfname_len == 0) {\n+                return (jlong)INVALID_HANDLE_VALUE;\n+            }\n+            if ((wfname = (WCHAR*)malloc(wfname_len * sizeof(WCHAR))) == NULL) {\n+                return (jlong)INVALID_HANDLE_VALUE;\n+            }\n+            if (MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,\n+                                    fname, -1, wfname, wfname_len) == 0) {\n+                free(wfname);\n+                return (jlong)INVALID_HANDLE_VALUE;\n+            }\n+            wprefixed_fname = getPrefixed(wfname, (int)fname_length);\n+            hFile = CreateFileW(\n+                wprefixed_fname,    \/* Wide char path name *\/\n+                access,             \/* Read and\/or write permission *\/\n+                sharing,            \/* File sharing flags *\/\n+                NULL,               \/* Security attributes *\/\n+                disposition,        \/* creation disposition *\/\n+                flagsAndAttributes, \/* flags and attributes *\/\n+                NULL);\n@@ -150,1 +169,16 @@\n-            return (jlong)INVALID_HANDLE_VALUE;\n+            free(wprefixed_fname);\n+        }\n+        if (hFile == INVALID_HANDLE_VALUE) {\n+            DWORD dwErr = GetLastError();\n+            if (dwErr == ERROR_SHARING_VIOLATION) {\n+                \/\/ sharing error occurd.\n+                if (++retry < RETRY_MAX) {\n+                    \/\/ retry CreateFile again.\n+                    Sleep(RETRY_INTERVAL);\n+                    continue;\n+                }\n+            } else {\n+                \/\/ nomal error occured.\n+                \/\/ dispose of this error in caller function(winFileHandleOpen).\n+                break;\n+            }\n@@ -152,12 +186,1 @@\n-        wprefixed_fname = getPrefixed(wfname, (int)fname_length);\n-        fhandle = (jlong)CreateFileW(\n-            wprefixed_fname,    \/* Wide char path name *\/\n-            access,             \/* Read and\/or write permission *\/\n-            sharing,            \/* File sharing flags *\/\n-            NULL,               \/* Security attributes *\/\n-            disposition,        \/* creation disposition *\/\n-            flagsAndAttributes, \/* flags and attributes *\/\n-            NULL);\n-        free(wfname);\n-        free(wprefixed_fname);\n-        return fhandle;\n+        break;\n@@ -165,0 +188,1 @@\n+    return (ZFILE)hFile;\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":60,"deletions":36,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,3 @@\n+static int RETRY_MAX = 5;\n+static DWORD RETRY_INTERVAL = 250;\n+\n@@ -216,0 +219,27 @@\n+static HANDLE\n+invoke_CreateFileW(LPWSTR fname, DWORD access, DWORD share, LPSECURITY_ATTRIBUTES security, DWORD creation, DWORD flags, HANDLE template)\n+{\n+    HANDLE h = INVALID_HANDLE_VALUE;\n+    int retry = 0;\n+    while (retry < RETRY_MAX) {\n+        h = CreateFileW((LPCWSTR)fname, access, share, security, creation, flags, template);\n+        if (h == INVALID_HANDLE_VALUE) {\n+            DWORD error = GetLastError();\n+            if (error == ERROR_SHARING_VIOLATION) {\n+                \/\/ sharing error occurd.\n+                if (++retry < RETRY_MAX) {\n+                    \/\/ retry CreateFile again.\n+                    Sleep(RETRY_INTERVAL);\n+                    continue;\n+                }\n+            } else {\n+                \/\/ nomal error occured.\n+                \/\/ dispose of this error in caller function(winFileHandleOpen).\n+                break;\n+            }\n+        }\n+        break;\n+    }\n+    return h;\n+}\n+\n@@ -245,1 +275,1 @@\n-    h = CreateFileW(\n+    h = invoke_CreateFileW(\n","filename":"src\/java.base\/windows\/native\/libjava\/io_util_md.c","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8233674\n+ * @summary test FileNotFoundException doesn't occur in open non-shared file\n+ * @library \/test\/lib\n+ * @requires os.family == \"windows\"\n+ *\/\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.JarURLConnection;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import com.sun.nio.file.ExtendedOpenOption;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n+\n+public class RetryCreateFile {\n+    private static final String DONE_MSG = \"done\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            if (args[0].endsWith(\".jar\")) {\n+                URL url = new URL(\"jar:file:\" + args[0].replace('\\\\', '\/') + \"!\/\");\n+                JarURLConnection juc = (JarURLConnection) url.openConnection();\n+                juc.getJarFile();\n+            }\n+            System.out.println(DONE_MSG);\n+            return;\n+        }\n+        \/\/ else this is the main test\n+        runtests();\n+    }\n+\n+    public static void runtests() throws Exception {\n+        \/\/ prepare\n+        String fs = System.getProperty(\"file.separator\");\n+        String currentDir = System.getProperty(\"user.dir\");\n+\n+        Path clsFile = Paths.get(RetryCreateFile.class.getResource(\"RetryCreateFile.class\").toURI());\n+        Path tmpClsFile = Paths.get(\"RetryCreateFile.class\");\n+        Files.copy(clsFile, tmpClsFile); \/\/ copy class to current dir\n+        String tmpJar = currentDir + fs + \"tmp.jar\";\n+        JarUtils.createJar(tmpJar, tmpClsFile.toString());\n+\n+        String subPath = null;\n+        final int MAX_PATH = 260;\n+        int subDirLen = MAX_PATH - currentDir.length() - 2;\n+        if (subDirLen > 0) {\n+            char[] subchars = new char[subDirLen];\n+            Arrays.fill(subchars, 'x');\n+            subPath = new String(subchars);\n+            Path destDir = Paths.get(currentDir, subPath);\n+            Files.createDirectories(destDir);\n+        }\n+        String tmpJar2 = currentDir + fs + (subPath != null ? (subPath + fs) : \"\") + \"tmp.jar\";\n+        JarUtils.createJar(tmpJar2, tmpClsFile.toString());\n+\n+        \/\/ 1st case: zip file\n+        RetryCreateFile test1 = new RetryCreateFile(tmpJar, \"java.io.FileNotFoundException\");\n+        test1.testWithOpenedFile();\n+        test1.testWithReleaseFile();\n+        System.out.println(\"1st case OK\\n\");\n+\n+        RetryCreateFile test1_2 = new RetryCreateFile(tmpJar2, \"java.io.FileNotFoundException\");\n+        test1_2.testWithOpenedFile();\n+        test1_2.testWithReleaseFile();\n+        System.out.println(\"1st case (long path) OK\\n\");\n+\n+        \/\/ 2nd case: load class from jar file\n+        RetryCreateFile test2 = new RetryCreateFile(tmpJar, tmpJar, \"java.lang.ClassNotFoundException\");\n+        test2.testWithOpenedFile();\n+        test2.testWithReleaseFile();\n+        System.out.println(\"2nd case OK\\n\");\n+\n+        RetryCreateFile test2_2 = new RetryCreateFile(tmpJar2, tmpJar2, \"java.lang.ClassNotFoundException\");\n+        test2_2.testWithOpenedFile();\n+        test2_2.testWithReleaseFile();\n+        System.out.println(\"2nd case (long path) OK\\n\");\n+\n+        System.out.println(\"\\nALL TESTS PASSED\");\n+    }\n+\n+    private String clsPath;\n+    private String targetFile;\n+    private String errorMessage;\n+\n+    public RetryCreateFile(String targetFile, String errorMessage) {\n+        this(null, targetFile, errorMessage);\n+    }\n+\n+    public RetryCreateFile(String clsPath, String targetFile, String errorMessage) {\n+        this.clsPath = clsPath;\n+        this.targetFile = targetFile;\n+        this.errorMessage = errorMessage;\n+    }\n+\n+    private Process startJavaProcess() throws Exception {\n+        \/\/ see ProcessTools#createJavaProcessBuilder\n+        ArrayList<String> args = new ArrayList<>();\n+        args.add(JDKToolFinder.getJDKTool(\"java\"));\n+        args.add(\"-cp\");\n+        if (clsPath == null) {\n+            args.add(System.getProperty(\"java.class.path\"));\n+        } else {\n+            args.add(clsPath);\n+        }\n+        args.add(RetryCreateFile.class.getName());\n+        args.add(targetFile);\n+\n+        \/\/ Reporting\n+        StringBuilder cmdLine = new StringBuilder();\n+        for (String cmd : args)\n+            cmdLine.append(cmd).append(' ');\n+        System.out.println(\"Command line: [\" + cmdLine.toString() + \"]\");\n+\n+        ProcessBuilder pb = new ProcessBuilder(args);\n+        Process javaProcess = pb.start();\n+        return javaProcess;\n+    }\n+\n+    public void testWithOpenedFile() throws Exception {\n+        FileChannel channel = null;\n+        try {\n+            System.out.println(\"opened: \" + targetFile);\n+            channel = FileChannel.open(new File(targetFile).toPath(), ExtendedOpenOption.NOSHARE_READ,\n+                    ExtendedOpenOption.NOSHARE_WRITE, ExtendedOpenOption.NOSHARE_DELETE);\n+            Process javaProcess = startJavaProcess();\n+            OutputAnalyzer javaOutput = new OutputAnalyzer(javaProcess);\n+            javaOutput.shouldNotContain(DONE_MSG);\n+            javaOutput.shouldContain(errorMessage);\n+            javaOutput.reportDiagnosticSummary();\n+        } finally {\n+            System.out.println(\"closed: \" + targetFile);\n+            if (channel != null) {\n+                channel.close();\n+            }\n+        }\n+        System.out.println(\"testWithOpenedFile: OK\\n\");\n+    }\n+\n+    public void testWithReleaseFile() throws Exception {\n+        FileChannel channel = null;\n+        int sleepTime = 1000;\n+        try {\n+            System.out.println(\"opened: \" + targetFile);\n+            channel = FileChannel.open(new File(targetFile).toPath(), ExtendedOpenOption.NOSHARE_READ,\n+                    ExtendedOpenOption.NOSHARE_WRITE, ExtendedOpenOption.NOSHARE_DELETE);\n+            Process javaProcess = startJavaProcess();\n+            System.out.println(\"sleep: \" + sleepTime + \" msec\");\n+            Thread.sleep(sleepTime);\n+            System.out.println(\"closed: \" + targetFile);\n+            channel.close();\n+            OutputAnalyzer javaOutput = new OutputAnalyzer(javaProcess);\n+            javaOutput.shouldContain(DONE_MSG);\n+            javaOutput.shouldNotContain(errorMessage);\n+            javaOutput.reportDiagnosticSummary();\n+        } finally {\n+            if (channel != null) {\n+                channel.close();\n+            }\n+        }\n+        System.out.println(\"testWithReleaseFile: OK\\n\");\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/JarURLConnection\/RetryCreateFile.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"}]}