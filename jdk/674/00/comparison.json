{"files":[{"patch":"@@ -92,0 +92,1 @@\n+        configuration.conditionalPages.add(HtmlConfiguration.PageKind.CONSTANT_VALUES);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -266,4 +266,6 @@\n-        DocPath filename = DocPaths.DEPRECATED_LIST;\n-        DeprecatedListWriter depr = new DeprecatedListWriter(configuration, filename);\n-        depr.generateDeprecatedListFile(\n-               new DeprecatedAPIListBuilder(configuration));\n+        DeprecatedAPIListBuilder deprAPI = configuration.deprecatedAPIListBuilder;\n+        if (deprAPI != null && !deprAPI.isEmpty()) {\n+            DocPath filename = DocPaths.DEPRECATED_LIST;\n+            DeprecatedListWriter depr = new DeprecatedListWriter(configuration, filename);\n+            depr.generateDeprecatedListFile(deprAPI);\n+        }\n@@ -275,1 +277,1 @@\n-     * @param deprapi list of deprecated API built already.\n+     * @param deprAPI list of deprecated API built already.\n@@ -278,1 +280,1 @@\n-    protected void generateDeprecatedListFile(DeprecatedAPIListBuilder deprapi)\n+    protected void generateDeprecatedListFile(DeprecatedAPIListBuilder deprAPI)\n@@ -281,1 +283,1 @@\n-        bodyContents.addMainContent(getContentsList(deprapi));\n+        bodyContents.addMainContent(getContentsList(deprAPI));\n@@ -285,1 +287,1 @@\n-            if (deprapi.hasDocumentation(kind)) {\n+            if (deprAPI.hasDocumentation(kind)) {\n@@ -291,1 +293,1 @@\n-                addDeprecatedAPI(deprapi.getSet(kind), getAnchorName(kind),\n+                addDeprecatedAPI(deprAPI.getSet(kind), getAnchorName(kind),\n@@ -305,1 +307,1 @@\n-        if (!deprapi.isEmpty() && configuration.mainIndex != null) {\n+        if (!deprAPI.isEmpty() && configuration.mainIndex != null) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DeprecatedListWriter.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-        if (!(options.noDeprecatedList() || options.noDeprecated())) {\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.PageKind.DEPRECATED)) {\n@@ -258,3 +258,5 @@\n-        section = newHelpSection(contents.serializedForm)\n-                .add(HtmlTree.P(getContent(\"doclet.help.serial_form.body\")));\n-        contentTree.add(section);\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.PageKind.SERIALIZED_FORM)) {\n+            section = newHelpSection(contents.serializedForm)\n+                    .add(HtmlTree.P(getContent(\"doclet.help.serial_form.body\")));\n+            contentTree.add(section);\n+        }\n@@ -263,5 +265,16 @@\n-        section = newHelpSection(contents.constantsSummaryTitle);\n-        Content constantsBody = getContent(\"doclet.help.constants.body\",\n-                links.createLink(DocPaths.CONSTANT_VALUES, resources.getText(\"doclet.Constants_Summary\")));\n-        section.add(HtmlTree.P(constantsBody));\n-        contentTree.add(section);\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.PageKind.CONSTANT_VALUES)) {\n+            section = newHelpSection(contents.constantsSummaryTitle);\n+            Content constantsBody = getContent(\"doclet.help.constants.body\",\n+                    links.createLink(DocPaths.CONSTANT_VALUES, resources.getText(\"doclet.Constants_Summary\")));\n+            section.add(HtmlTree.P(constantsBody));\n+            contentTree.add(section);\n+        }\n+\n+        \/\/ System Properties\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.PageKind.SYSTEM_PROPERTIES)) {\n+            section = newHelpSection(contents.systemPropertiesLabel);\n+            Content constantsBody = getContent(\"doclet.help.systemProperties.body\",\n+                    links.createLink(DocPaths.SYSTEM_PROPERTIES, resources.getText(\"doclet.systemProperties\")));\n+            section.add(HtmlTree.P(constantsBody));\n+            contentTree.add(section);\n+        }\n@@ -270,7 +283,17 @@\n-        section = newHelpSection(getContent(\"doclet.help.search.head\"));\n-        Content searchIntro = HtmlTree.P(getContent(\"doclet.help.search.intro\"));\n-        Content searchExamples = new HtmlTree(TagName.UL).setStyle(HtmlStyle.helpSectionList);\n-        for (String[] example : SEARCH_EXAMPLES) {\n-            searchExamples.add(HtmlTree.LI(\n-                    getContent(\"doclet.help.search.example\",\n-                            HtmlTree.CODE(new StringContent(example[0])), example[1])));\n+        if (options.createIndex()) {\n+            section = newHelpSection(getContent(\"doclet.help.search.head\"));\n+            Content searchIntro = HtmlTree.P(getContent(\"doclet.help.search.intro\"));\n+            Content searchExamples = new HtmlTree(TagName.UL).setStyle(HtmlStyle.helpSectionList);\n+            for (String[] example : SEARCH_EXAMPLES) {\n+                searchExamples.add(HtmlTree.LI(\n+                        getContent(\"doclet.help.search.example\",\n+                                HtmlTree.CODE(new StringContent(example[0])), example[1])));\n+            }\n+            Content searchSpecLink = HtmlTree.A(\n+                    resources.getText(\"doclet.help.search.spec.url\", configuration.getDocletVersion().feature()),\n+                    getContent(\"doclet.help.search.spec.title\"));\n+            Content searchRefer = HtmlTree.P(getContent(\"doclet.help.search.refer\", searchSpecLink));\n+            section.add(searchIntro)\n+                    .add(searchExamples)\n+                    .add(searchRefer);\n+            contentTree.add(section);\n@@ -278,8 +301,0 @@\n-        Content searchSpecLink = HtmlTree.A(\n-                resources.getText(\"doclet.help.search.spec.url\", configuration.getDocletVersion().feature()),\n-                getContent(\"doclet.help.search.spec.title\"));\n-        Content searchRefer = HtmlTree.P(getContent(\"doclet.help.search.refer\", searchSpecLink));\n-        section.add(searchIntro)\n-            .add(searchExamples)\n-            .add(searchRefer);\n-        contentTree.add(section);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":39,"deletions":24,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.EnumSet;\n@@ -34,0 +35,1 @@\n+import java.util.Set;\n@@ -50,0 +52,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.BaseOptions;\n@@ -54,0 +57,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.DeprecatedAPIListBuilder;\n@@ -57,1 +61,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexBuilder;\n@@ -108,0 +111,10 @@\n+    \/**\n+     * The collection of deprecated items, if any, to be displayed on the deprecated-list page,\n+     * or null if the page should not be generated.\n+     * The page will not be generated if {@link BaseOptions#noDeprecated() no deprecated items}\n+     * are to be included in the documentation,\n+     * or if the page is {@link HtmlOptions#noDeprecatedList() not wanted},\n+     * or if there are no deprecated elements being documented.\n+     *\/\n+    protected DeprecatedAPIListBuilder deprecatedAPIListBuilder;\n+\n@@ -118,0 +131,17 @@\n+    \/**\n+     * Kinds of pages.\n+     *\/\n+    \/\/ Note: this should (eventually) be merged with Navigation.PageMode,\n+    \/\/ which performs a somewhat similar role\n+    public enum PageKind {\n+        CONSTANT_VALUES, DEPRECATED, SERIALIZED_FORM, SYSTEM_PROPERTIES\n+    }\n+\n+    \/**\n+     * A set of values indicating which conditional pages should be generated.\n+     * The set is computed lazily, although values must (obviously) be set before\n+     * they are required, such as when deciding whether or not to generate links\n+     * to these files in the navigation par, on each page, the help file, and so on.\n+     *\/\n+    public final Set<PageKind> conditionalPages;\n+\n@@ -165,0 +195,2 @@\n+\n+        conditionalPages = EnumSet.noneOf(PageKind.class);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.DeprecatedAPIListBuilder;\n@@ -118,0 +119,15 @@\n+    @Override \/\/ defined by AbstractDoclet\n+    public void generateClassFiles(DocletEnvironment docEnv, ClassTree classTree) throws DocletException {\n+\n+        if (!(configuration.getOptions().noDeprecated()\n+                || configuration.getOptions().noDeprecatedList())) {\n+            DeprecatedAPIListBuilder builder = new DeprecatedAPIListBuilder(configuration);\n+            if (!builder.isEmpty()) {\n+                configuration.deprecatedAPIListBuilder = builder;\n+                configuration.conditionalPages.add(HtmlConfiguration.PageKind.DEPRECATED);\n+            }\n+        }\n+\n+        super.generateClassFiles(docEnv, classTree);\n+    }\n+\n@@ -159,1 +175,1 @@\n-        if (!(options.noDeprecatedList() || nodeprecated)) {\n+        if (configuration.conditionalPages.contains((HtmlConfiguration.PageKind.DEPRECATED))) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -131,2 +131,2 @@\n-     * Argument for command-line option {@code -nodeprecated}.\n-     * True if command-line option \"-nodeprecated\" is used. Default value is\n+     * Argument for command-line option {@code -nodeprecatedlist}.\n+     * True if command-line option \"-nodeprecatedlist\" is used. Default value is\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -311,2 +311,2 @@\n-                    addActivePageLink(tree, contents.deprecatedLabel, !(options.noDeprecated()\n-                            || options.noDeprecatedList()));\n+                    addActivePageLink(tree, contents.deprecatedLabel,\n+                            configuration.conditionalPages.contains(HtmlConfiguration.PageKind.DEPRECATED));\n@@ -866,1 +866,1 @@\n-        if (!(options.noDeprecated() || options.noDeprecatedList())) {\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.PageKind.DEPRECATED)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+        configuration.conditionalPages.add(HtmlConfiguration.PageKind.SERIALIZED_FORM);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriterImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexItem.Category;\n@@ -103,0 +102,1 @@\n+        configuration.conditionalPages.add(HtmlConfiguration.PageKind.SYSTEM_PROPERTIES);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SystemPropertiesWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,0 +208,2 @@\n+doclet.help.systemProperties.body=\\\n+    The {0) page lists references to system properties.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,2 +79,1 @@\n-        return ConstantsSummaryBuilder.getInstance(context,\n-            writerFactory.getConstantsSummaryWriter());\n+        return ConstantsSummaryBuilder.getInstance(context);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/BuilderFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    protected final ConstantsSummaryWriter writer;\n+    protected ConstantsSummaryWriter writer;\n@@ -92,1 +92,0 @@\n-     * @param writer        the writer for the summary.\n@@ -94,2 +93,1 @@\n-    private ConstantsSummaryBuilder(Context context,\n-            ConstantsSummaryWriter writer) {\n+    private ConstantsSummaryBuilder(Context context) {\n@@ -97,1 +95,0 @@\n-        this.writer = writer;\n@@ -106,1 +103,0 @@\n-     * @param writer        the writer for the summary.\n@@ -109,3 +105,2 @@\n-    public static ConstantsSummaryBuilder getInstance(Context context,\n-            ConstantsSummaryWriter writer) {\n-        return new ConstantsSummaryBuilder(context, writer);\n+    public static ConstantsSummaryBuilder getInstance(Context context) {\n+        return new ConstantsSummaryBuilder(context);\n@@ -116,0 +111,6 @@\n+        boolean anyConstants = configuration.packages.stream().anyMatch(this::hasConstantField);\n+        if (!anyConstants) {\n+            return;\n+        }\n+\n+        writer = configuration.getWriterFactory().getConstantsSummaryWriter();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ConstantsSummaryBuilder.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        return deprecatedMap.values().stream().allMatch(Collection::isEmpty);\n+        return deprecatedMap.values().stream().allMatch(Set::isEmpty);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DeprecatedAPIListBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+    @Deprecated\n+    public static final int ZERO = 0;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/WindowTitles\/p1\/C1.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8254721\n+ * @summary  Improve support for conditionally generated files\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.* TestConditionalPages\n+ * @run main TestConditionalPages\n+ *\/\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class TestConditionalPages extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestConditionalPages tester = new TestConditionalPages();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testConstantValues(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                public class C {\n+                    public static final int ZERO = 0;\n+                }\n+                \"\"\",\n+                \"constant-values.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"Constant&nbsp;Field&nbsp;Values\"));\n+    }\n+\n+    @Test\n+    public void testDeprecated(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                @Deprecated\n+                public class C {  }\n+                \"\"\",\n+                \"deprecated-list.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"Deprecated\"));\n+    }\n+\n+    @Test\n+    public void testSerializedForm(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                import java.io.Serializable;\n+                public class C implements Serializable {  }\n+                \"\"\",\n+                \"serialized-form.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"Serialized&nbsp;Form\"));\n+    }\n+\n+    @Test\n+    public void testSystemProperties(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                \/** This class uses {@systemProperty line.separator}. *\/\n+                public class C {  }\n+                \"\"\",\n+                \"system-properties.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"System&nbsp;Properties\"));\n+    }\n+\n+    void test(Path base, String code, String file, Consumer<Boolean> extraChecks) throws IOException {\n+        test(base.resolve(\"a\"), code, file, extraChecks, true);\n+        test(base.resolve(\"b\"), \"package p; public class C { }\", file, extraChecks, false);\n+    }\n+\n+    void test(Path base, String code, String file, Consumer<Boolean> extraChecks, boolean expect) throws IOException {\n+        Path src = Files.createDirectories(base.resolve(\"src\"));\n+        tb.writeJavaFiles(src, code);\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkFiles(expect, file);\n+        checkOutput(Output.OUT, expect, \"Generating \" + base.resolve(\"out\").resolve(file));\n+        extraChecks.accept(expect);\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testConditionalPages\/TestConditionalPages.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+@Deprecated\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testCopyFiles\/modules\/acme.mdle\/p\/Foo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+    @Deprecated\n+    public static final int ZERO = 0;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGeneratedBy\/pkg\/MyClass.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    \/** A constant value to be documented. *\/\n+    public static final int ZERO = 0;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHelpFile\/TestHelpFile.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-                    \"\/** Class pA.CA. *\/ package pA; public class CA { }\",\n+                    \"\/** Class pA.CA. *\/ package pA; public class CA { @Deprecated public static final int ZERO = 0; }\",\n@@ -410,1 +410,1 @@\n-                        .classes(\"\/** Class mA\/pA.CA. *\/ package pA; public class CA { }\")\n+                        .classes(\"\/** Class mA\/pA.CA. *\/ package pA; public class CA { @Deprecated public static int ZERO = 0; }\")\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMetadata\/TestMetadata.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                .classes(\"package pa; public class A {}\")\n+                .classes(\"package pa; @Deprecated public class A {}\")\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModuleDirs\/TestModuleDirs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                .classes(\"package p1; public class A {}\")\n+                .classes(\"package p1; @Deprecated public class A {}\")\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNavigation\/TestModuleNavigation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+@Deprecated\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackagePage\/com\/pkg\/C.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+    public static final int ZERO = 0;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTopOption\/pkg\/Cl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -113,1 +113,2 @@\n-        return createSimpleJavaFileObject(\"pkg\/C\", \"package pkg; public class C { }\");\n+        return createSimpleJavaFileObject(\"pkg\/C\",\n+                \"package pkg; public class C { @Deprecated public static final int ZERO = 0; }\");\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/APITest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n-public class C { }\n+public class C {\n+    @Deprecated\n+    public static final int ZERO = 0;\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/pkg\/C.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}