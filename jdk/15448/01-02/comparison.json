{"files":[{"patch":"@@ -76,1 +76,1 @@\n-    @Setup\n+    @Setup()\n@@ -93,1 +93,1 @@\n-        tokens[n++] = '*';\n+        tokens[n] = '*';\n@@ -103,0 +103,1 @@\n+            boolean hasEncoded = false;\n@@ -105,2 +106,2 @@\n-                    int c = r.nextInt(encodeTokens.length);\n-                    sb.append(encodeTokens[c]);\n+                    addToken(encodeTokens, r, sb);\n+                    hasEncoded = true;\n@@ -108,2 +109,1 @@\n-                    int c = r.nextInt(tokens.length);\n-                    sb.append(tokens[c]);\n+                    addToken(tokens, r, sb);\n@@ -112,0 +112,3 @@\n+            if (needEncoding && !hasEncoded) {\n+                addToken(encodeTokens, r, sb);\n+            }\n@@ -114,0 +117,14 @@\n+        int countUnchanged = 0;\n+        for (String s : testStringsEncode) {\n+            if (s.equals(java.net.URLEncoder.encode(s, StandardCharsets.UTF_8))) {\n+                countUnchanged++;\n+            } else {\n+                if (unchanged == 100) {\n+                    System.out.println(\"Unexpectedly needs encoding action: \");\n+                    System.out.println(\"\\t\" + s);\n+                    System.out.println(\"\\t\" + java.net.URLEncoder.encode(s, StandardCharsets.UTF_8));\n+                }\n+            }\n+        }\n+        System.out.println();\n+        System.out.println(\"Generated \" + testStringsEncode.length + \" encodable strings, \" + countUnchanged + \" of which does not need encoding action\");\n@@ -117,0 +134,1 @@\n+            boolean needDecoding = r.nextInt(100) >= unchanged;\n@@ -118,0 +136,1 @@\n+            boolean hasDecoded = false;\n@@ -119,8 +138,3 @@\n-                boolean needEncoding = r.nextInt(100) >= unchanged;\n-                int c = r.nextInt(tokens.length);\n-                if (needEncoding && r.nextInt(100) < encodeChars) {\n-                    if (r.nextInt(100) < 15) {\n-                        sb.append('+'); \/\/ exercise '+' -> ' ' decoding paths.\n-                    } else {\n-                        sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n-                    }\n+                if (needDecoding && r.nextInt(100) < encodeChars) {\n+                    addDecodableChar(tokens, r, sb);\n+                    hasDecoded = true;\n@@ -128,1 +142,1 @@\n-                    sb.append(tokens[c]);\n+                    addToken(tokens, r, sb);\n@@ -131,0 +145,3 @@\n+            if (needDecoding && !hasDecoded) {\n+                addDecodableChar(tokens, r, sb);\n+            }\n@@ -133,0 +150,26 @@\n+        countUnchanged = 0;\n+        for (String s : testStringsDecode) {\n+            if (s.equals(java.net.URLDecoder.decode(s, StandardCharsets.UTF_8))) {\n+                countUnchanged++;\n+            } else {\n+                if (unchanged == 100) {\n+                    System.out.println(\"Unexpectedly needs encoding action: \");\n+                    System.out.println(\"\\t\" + s);\n+                    System.out.println(\"\\t\" + java.net.URLDecoder.decode(s, StandardCharsets.UTF_8));\n+                }\n+            }\n+        }\n+        System.out.println(\"Generated \" + testStringsDecode.length + \" decodable strings, \" + countUnchanged + \" of which does not need decoding action\");\n+    }\n+\n+    private static void addToken(char[] tokens, Random r, StringBuilder sb) {\n+        int c = r.nextInt(tokens.length);\n+        sb.append(tokens[c]);\n+    }\n+\n+    private static void addDecodableChar(char[] tokens, Random r, StringBuilder sb) {\n+        if (r.nextInt(100) < 15) {\n+            sb.append('+'); \/\/ exercise '+' -> ' ' decoding paths.\n+        } else {\n+            sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n+        }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URLEncodeDecode.java","additions":58,"deletions":15,"binary":false,"changes":73,"status":"modified"}]}