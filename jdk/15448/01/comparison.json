{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -54,2 +55,1 @@\n-    @Param(\"1024\")\n-    public int count;\n+    private static final int COUNT = 1024;\n@@ -60,2 +60,11 @@\n-    @Param(\"3\")\n-    public long mySeed;\n+    \/**\n+     * Percentage of strings that will remain unchanged by an encoding\/decoding (0-100)\n+     *\/\n+    @Param({\"0\", \"75\", \"100\"})\n+    public int unchanged;\n+\n+    \/**\n+     * Percentage of chars in changed strings that cause encoding\/decoding to happen (0-100)\n+     *\/\n+    @Param({\"6\"})\n+    public int encodeChars;\n@@ -69,1 +78,2 @@\n-        char[] tokens = new char[((int) 'Z' - (int) 'A' + 1) + ((int) 'z' - (int) 'a' + 1) + ((int) '9' - (int) '1' + 1) + 5];\n+        char[] encodeTokens = new char[] { '[', '(', ' ', '\\u00E4', '\\u00E5', '\\u00F6', ')', '='};\n+        char[] tokens = new char[('Z' - 'A' + 1) + ('z' - 'a' + 1) + ('9' - '0' + 1) + 4];\n@@ -71,3 +81,2 @@\n-        tokens[n++] = '0';\n-        for (int i = (int) '1'; i <= (int) '9'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = '0'; c <= '9'; c++) {\n+            tokens[n++] = c;\n@@ -75,2 +84,2 @@\n-        for (int i = (int) 'A'; i <= (int) 'Z'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = 'A'; c <= 'Z'; c++) {\n+            tokens[n++] = c;\n@@ -78,2 +87,2 @@\n-        for (int i = (int) 'a'; i <= (int) '<'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = 'a'; c <= 'z'; c++) {\n+            tokens[n++] = c;\n@@ -86,5 +95,5 @@\n-        Random r = new Random(mySeed);\n-        testStringsEncode = new String[count];\n-        testStringsDecode = new String[count];\n-        toStrings = new String[count];\n-        for (int i = 0; i < count; i++) {\n+        Random r = new Random(3);\n+        testStringsEncode = new String[COUNT];\n+        testStringsDecode = new String[COUNT];\n+        toStrings = new String[COUNT];\n+        for (int i = 0; i < COUNT; i++) {\n@@ -92,0 +101,1 @@\n+            boolean needEncoding = r.nextInt(100) >= unchanged;\n@@ -94,2 +104,7 @@\n-                int c = r.nextInt(tokens.length);\n-                sb.append(tokens[c]);\n+                if (needEncoding && r.nextInt(100) < encodeChars) {\n+                    int c = r.nextInt(encodeTokens.length);\n+                    sb.append(encodeTokens[c]);\n+                } else {\n+                    int c = r.nextInt(tokens.length);\n+                    sb.append(tokens[c]);\n+                }\n@@ -100,1 +115,1 @@\n-        for (int i = 0; i < count; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -104,3 +119,8 @@\n-                int c = r.nextInt(tokens.length + 5);\n-                if (c >= tokens.length) {\n-                    sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n+                boolean needEncoding = r.nextInt(100) >= unchanged;\n+                int c = r.nextInt(tokens.length);\n+                if (needEncoding && r.nextInt(100) < encodeChars) {\n+                    if (r.nextInt(100) < 15) {\n+                        sb.append('+'); \/\/ exercise '+' -> ' ' decoding paths.\n+                    } else {\n+                        sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n+                    }\n@@ -118,1 +138,1 @@\n-            bh.consume(java.net.URLEncoder.encode(s, \"UTF-8\"));\n+            bh.consume(java.net.URLEncoder.encode(s, StandardCharsets.UTF_8));\n@@ -125,1 +145,1 @@\n-            bh.consume(URLDecoder.decode(s, \"UTF-8\"));\n+            bh.consume(URLDecoder.decode(s, StandardCharsets.UTF_8));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URLEncodeDecode.java","additions":45,"deletions":25,"binary":false,"changes":70,"status":"modified"}]}