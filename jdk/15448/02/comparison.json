{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -54,2 +55,1 @@\n-    @Param(\"1024\")\n-    public int count;\n+    private static final int COUNT = 1024;\n@@ -60,2 +60,11 @@\n-    @Param(\"3\")\n-    public long mySeed;\n+    \/**\n+     * Percentage of strings that will remain unchanged by an encoding\/decoding (0-100)\n+     *\/\n+    @Param({\"0\", \"75\", \"100\"})\n+    public int unchanged;\n+\n+    \/**\n+     * Percentage of chars in changed strings that cause encoding\/decoding to happen (0-100)\n+     *\/\n+    @Param({\"6\"})\n+    public int encodeChars;\n@@ -67,1 +76,1 @@\n-    @Setup\n+    @Setup()\n@@ -69,1 +78,2 @@\n-        char[] tokens = new char[((int) 'Z' - (int) 'A' + 1) + ((int) 'z' - (int) 'a' + 1) + ((int) '9' - (int) '1' + 1) + 5];\n+        char[] encodeTokens = new char[] { '[', '(', ' ', '\\u00E4', '\\u00E5', '\\u00F6', ')', '='};\n+        char[] tokens = new char[('Z' - 'A' + 1) + ('z' - 'a' + 1) + ('9' - '0' + 1) + 4];\n@@ -71,3 +81,2 @@\n-        tokens[n++] = '0';\n-        for (int i = (int) '1'; i <= (int) '9'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = '0'; c <= '9'; c++) {\n+            tokens[n++] = c;\n@@ -75,2 +84,2 @@\n-        for (int i = (int) 'A'; i <= (int) 'Z'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = 'A'; c <= 'Z'; c++) {\n+            tokens[n++] = c;\n@@ -78,2 +87,2 @@\n-        for (int i = (int) 'a'; i <= (int) '<'; i++) {\n-            tokens[n++] = (char) i;\n+        for (char c = 'a'; c <= 'z'; c++) {\n+            tokens[n++] = c;\n@@ -84,1 +93,1 @@\n-        tokens[n++] = '*';\n+        tokens[n] = '*';\n@@ -86,5 +95,5 @@\n-        Random r = new Random(mySeed);\n-        testStringsEncode = new String[count];\n-        testStringsDecode = new String[count];\n-        toStrings = new String[count];\n-        for (int i = 0; i < count; i++) {\n+        Random r = new Random(3);\n+        testStringsEncode = new String[COUNT];\n+        testStringsDecode = new String[COUNT];\n+        toStrings = new String[COUNT];\n+        for (int i = 0; i < COUNT; i++) {\n@@ -92,0 +101,1 @@\n+            boolean needEncoding = r.nextInt(100) >= unchanged;\n@@ -93,0 +103,1 @@\n+            boolean hasEncoded = false;\n@@ -94,2 +105,9 @@\n-                int c = r.nextInt(tokens.length);\n-                sb.append(tokens[c]);\n+                if (needEncoding && r.nextInt(100) < encodeChars) {\n+                    addToken(encodeTokens, r, sb);\n+                    hasEncoded = true;\n+                } else {\n+                    addToken(tokens, r, sb);\n+                }\n+            }\n+            if (needEncoding && !hasEncoded) {\n+                addToken(encodeTokens, r, sb);\n@@ -99,0 +117,14 @@\n+        int countUnchanged = 0;\n+        for (String s : testStringsEncode) {\n+            if (s.equals(java.net.URLEncoder.encode(s, StandardCharsets.UTF_8))) {\n+                countUnchanged++;\n+            } else {\n+                if (unchanged == 100) {\n+                    System.out.println(\"Unexpectedly needs encoding action: \");\n+                    System.out.println(\"\\t\" + s);\n+                    System.out.println(\"\\t\" + java.net.URLEncoder.encode(s, StandardCharsets.UTF_8));\n+                }\n+            }\n+        }\n+        System.out.println();\n+        System.out.println(\"Generated \" + testStringsEncode.length + \" encodable strings, \" + countUnchanged + \" of which does not need encoding action\");\n@@ -100,1 +132,1 @@\n-        for (int i = 0; i < count; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -102,0 +134,1 @@\n+            boolean needDecoding = r.nextInt(100) >= unchanged;\n@@ -103,0 +136,1 @@\n+            boolean hasDecoded = false;\n@@ -104,3 +138,3 @@\n-                int c = r.nextInt(tokens.length + 5);\n-                if (c >= tokens.length) {\n-                    sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n+                if (needDecoding && r.nextInt(100) < encodeChars) {\n+                    addDecodableChar(tokens, r, sb);\n+                    hasDecoded = true;\n@@ -108,1 +142,1 @@\n-                    sb.append(tokens[c]);\n+                    addToken(tokens, r, sb);\n@@ -111,0 +145,3 @@\n+            if (needDecoding && !hasDecoded) {\n+                addDecodableChar(tokens, r, sb);\n+            }\n@@ -113,0 +150,26 @@\n+        countUnchanged = 0;\n+        for (String s : testStringsDecode) {\n+            if (s.equals(java.net.URLDecoder.decode(s, StandardCharsets.UTF_8))) {\n+                countUnchanged++;\n+            } else {\n+                if (unchanged == 100) {\n+                    System.out.println(\"Unexpectedly needs encoding action: \");\n+                    System.out.println(\"\\t\" + s);\n+                    System.out.println(\"\\t\" + java.net.URLDecoder.decode(s, StandardCharsets.UTF_8));\n+                }\n+            }\n+        }\n+        System.out.println(\"Generated \" + testStringsDecode.length + \" decodable strings, \" + countUnchanged + \" of which does not need decoding action\");\n+    }\n+\n+    private static void addToken(char[] tokens, Random r, StringBuilder sb) {\n+        int c = r.nextInt(tokens.length);\n+        sb.append(tokens[c]);\n+    }\n+\n+    private static void addDecodableChar(char[] tokens, Random r, StringBuilder sb) {\n+        if (r.nextInt(100) < 15) {\n+            sb.append('+'); \/\/ exercise '+' -> ' ' decoding paths.\n+        } else {\n+            sb.append(\"%\").append(tokens[r.nextInt(16)]).append(tokens[r.nextInt(16)]);\n+        }\n@@ -118,1 +181,1 @@\n-            bh.consume(java.net.URLEncoder.encode(s, \"UTF-8\"));\n+            bh.consume(java.net.URLEncoder.encode(s, StandardCharsets.UTF_8));\n@@ -125,1 +188,1 @@\n-            bh.consume(URLDecoder.decode(s, \"UTF-8\"));\n+            bh.consume(URLDecoder.decode(s, StandardCharsets.UTF_8));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URLEncodeDecode.java","additions":91,"deletions":28,"binary":false,"changes":119,"status":"modified"}]}