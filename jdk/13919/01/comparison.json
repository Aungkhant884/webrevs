{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,13 +86,0 @@\n-class StackOverflowIndirectTarg {\n-    public static void main(String[] args) {\n-        try {\n-            thrower();\n-        } catch (Throwable exc) {\n-            System.out.println(\"Got exception: \" + exc);\n-        }\n-    }\n-    static void thrower()  {\n-        throw new StackOverflowError();\n-    }\n-}\n-\n@@ -398,0 +385,11 @@\n+    @Override\n+    protected boolean allowedExitValue(int exitValue) {\n+        \/\/ If the exception is caught, we expect exitValue == 0. For uncaught we\n+        \/\/ we expect exitValue == 1.\n+        if (target.equals(\"StackOverflowCaughtTarg\")) {\n+            return exitValue == 0;\n+        } else {\n+            return exitValue == 1;\n+        }\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/jdi\/ExceptionEvents.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,4 +48,0 @@\n-        \/\/ Force these threads to be non-daemon threads, even when the debuggee\n-        \/\/ is being run as a vthread. See JDK-8283796.\n-        t1.setDaemon(false);\n-        t2.setDaemon(false);\n@@ -54,0 +50,9 @@\n+        \/\/ We must block until these threads exit. Otherwise for virtual threads\n+        \/\/ there will be nothing keeping these threads alive because all the threads\n+        \/\/ involved are daemon threads. See JDK-8283796.\n+        try {\n+            t1.join();\n+            t2.join();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n","filename":"test\/jdk\/com\/sun\/jdi\/ResumeOneThreadTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -729,1 +729,1 @@\n-        return exitValue == 0 || exitValue == 1;\n+        return exitValue == 0;\n@@ -1036,0 +1036,9 @@\n+            if (tg.uncaughtThrowable != null) {\n+                \/\/ Note we cant just rethrow tg.uncaughtThrowable because there are tests\n+                \/\/ that track ExceptionEvents, and they will complain about the extra\n+                \/\/ exception. So instead mimic what happens when the main thread exits\n+                \/\/ with an exception.\n+                System.out.println(\"Uncaught Exception: \" + tg.uncaughtThrowable);\n+                tg.uncaughtThrowable.printStackTrace(System.out);\n+                System.exit(1);\n+            }\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}