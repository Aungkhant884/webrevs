{"files":[{"patch":"@@ -31,3 +31,0 @@\n-import java.security.interfaces.EdECPrivateKey;\n-import java.security.spec.InvalidParameterSpecException;\n-import java.security.spec.PSSParameterSpec;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import sun.security.tools.jarsigner.TimestampedSigner;\n@@ -125,1 +124,0 @@\n-        boolean directsign = false;\n@@ -361,4 +359,0 @@\n-         * <li>\"directsign\": \"true\" if the signature is calculated on the\n-         * content directly, \"false\" if it's calculated on signed attributes\n-         * which itself is calculated from the content and stored in the\n-         * signer's SignerInfo. Default \"false\".\n@@ -398,3 +392,0 @@\n-                case \"directsign\":\n-                    this.directsign = parseBoolean(\"directsign\", value);\n-                    break;\n@@ -513,1 +504,0 @@\n-    private final boolean directsign;\n@@ -564,3 +554,6 @@\n-        this.directsign = this.altSigner != null\n-                ? true\n-                : builder.directsign;\n+        \/\/ altSigner cannot support modern algorithms like RSASSA-PSS and EdDSA\n+        if (altSigner != null\n+                && !sigalg.toUpperCase(Locale.ENGLISH).contains(\"WITH\")) {\n+            throw new IllegalArgumentException(\n+                    \"Customized ContentSigner is not supported for \" + sigalg);\n+        }\n@@ -669,2 +662,0 @@\n-            case \"directsign\":\n-                return Boolean.toString(directsign);\n@@ -858,14 +849,1 @@\n-        \/\/ Use new method if directSign is false or it's a modern\n-        \/\/ algorithm not supported by existing ContentSigner.\n-        \/\/ Make this always true after we remove ContentSigner.\n-        boolean useNewMethod = !directsign\n-                || !sigalg.toUpperCase(Locale.ENGLISH).contains(\"WITH\");\n-\n-        \/\/ For newer sigalg without \"with\", always use the new PKCS7\n-        \/\/ generateToken method. Otherwise, use deprecated ContentSigner.\n-        if (useNewMethod) {\n-            if (altSigner != null) {\n-                throw new IllegalArgumentException(directsign\n-                        ? (\"Customized ContentSigner is not supported for \" + sigalg)\n-                        : \"Customized ContentSigner does not support authenticated attributes\");\n-            }\n+        if (altSigner == null) {\n@@ -892,1 +870,1 @@\n-                    content, internalsf, directsign, timestamper);\n+                    content, internalsf, false, timestamper);\n@@ -904,3 +882,1 @@\n-            ContentSigner signingMechanism = (altSigner != null)\n-                    ? loadSigningMechanism(altSigner, altSignerPath)\n-                    : new TimestampedSigner();\n+            ContentSigner signingMechanism = loadSigningMechanism(altSigner, altSignerPath);\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":9,"deletions":33,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-    boolean directSign = false; \/\/ sign SF directly or thru signedAttrs\n@@ -476,2 +475,0 @@\n-            } else if (collator.compare(flags, \"-directsign\") ==0) {\n-                directSign = true;\n@@ -666,3 +663,0 @@\n-        System.out.println(rb.getString\n-                (\".directsign.sign.the.SF.file.directly.no.signerinfo.signedattributes\"));\n-        System.out.println();\n@@ -1776,1 +1770,0 @@\n-        builder.setProperty(\"directsign\", Boolean.toString(directSign));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -104,2 +104,0 @@\n-        {\".directsign.sign.the.SF.file.directly.no.signerinfo.signedattributes\",\n-                \"[-directsign]               sign the .SF file directly (no SignerInfo signedAttributes)\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.tools.jarsigner;\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n-\n-import com.sun.jarsigner.*;\n-import sun.security.pkcs.PKCS7;\n-\n-\/**\n- * This class implements a content signing service.\n- * It generates a timestamped signature for a given content according to\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc3161.txt\">RFC 3161<\/a>.\n- * The signature along with a trusted timestamp and the signer's certificate\n- * are all packaged into a standard PKCS #7 Signed Data message.\n- *\n- * @author Vincent Ryan\n- *\/\n-@Deprecated(since=\"16\", forRemoval=true)\n-@SuppressWarnings(\"removal\")\n-public final class TimestampedSigner extends ContentSigner {\n-\n-    \/**\n-     * Instantiates a content signer that supports timestamped signatures.\n-     *\/\n-    public TimestampedSigner() {\n-    }\n-\n-    \/**\n-     * Generates a PKCS #7 signed data message that includes a signature\n-     * timestamp.\n-     * This method is used when a signature has already been generated.\n-     * The signature, a signature timestamp, the signer's certificate chain,\n-     * and optionally the content that was signed, are packaged into a PKCS #7\n-     * signed data message.\n-     *\n-     * @param params The non-null input parameters.\n-     * @param omitContent true if the content should be omitted from the\n-     *        signed data message. Otherwise the content is included.\n-     * @param applyTimestamp true if the signature should be timestamped.\n-     *        Otherwise timestamping is not performed.\n-     * @return A PKCS #7 signed data message including a signature timestamp.\n-     * @throws NoSuchAlgorithmException The exception is thrown if the signature\n-     *         algorithm is unrecognised.\n-     * @throws CertificateException The exception is thrown if an error occurs\n-     *         while processing the signer's certificate or the TSA's\n-     *         certificate.\n-     * @throws IOException The exception is thrown if an error occurs while\n-     *         generating the signature timestamp or while generating the signed\n-     *         data message.\n-     * @throws NullPointerException The exception is thrown if parameters is\n-     *         null.\n-     *\/\n-    public byte[] generateSignedData(ContentSignerParameters params,\n-        boolean omitContent, boolean applyTimestamp)\n-            throws NoSuchAlgorithmException, CertificateException, IOException {\n-\n-        if (params == null) {\n-            throw new NullPointerException();\n-        }\n-\n-        X509Certificate[] signerChain = params.getSignerCertificateChain();\n-        byte[] signature = params.getSignature();\n-\n-        \/\/ Include or exclude content\n-        byte[] content = (omitContent == true) ? null : params.getContent();\n-\n-        URI tsaURI = null;\n-        if (applyTimestamp) {\n-            tsaURI = params.getTimestampingAuthority();\n-            if (tsaURI == null) {\n-                \/\/ Examine TSA cert\n-                tsaURI = PKCS7.getTimestampingURI(\n-                    params.getTimestampingAuthorityCertificate());\n-                if (tsaURI == null) {\n-                    throw new CertificateException(\n-                        \"Subject Information Access extension not found\");\n-                }\n-            }\n-        }\n-        return PKCS7.generateSignedData(signature, signerChain, content,\n-                                        params.getSignatureAlgorithm(), tsaURI,\n-                                        params.getTSAPolicyID(),\n-                                        params.getTSADigestAlg());\n-    }\n-}\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/TimestampedSigner.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -78,1 +78,1 @@\n-        byte[] d0 = sign(jsb.setProperty(\"directsign\", \"false\"));\n+        byte[] d0 = sign(jsb);\n@@ -82,5 +82,0 @@\n-        \/\/ There is no SignedAttributes\n-        byte[] d1 = sign(jsb.setProperty(\"directsign\", \"true\"));\n-        Asserts.assertFalse(DerUtils.innerDerValue(d1, \"10403\")\n-                .isContextSpecific((byte)0));\n-\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Properties.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8056174 8242068\n+ * @bug 8056174 8242068 8255536\n@@ -73,0 +73,3 @@\n+        sun.security.tools.keytool.Main.main(\n+                (\"-keystore ks -storepass changeit -keypass changeit -dname\" +\n+                        \" CN=Ed25519 -alias e -genkeypair -keyalg Ed25519\").split(\" \"));\n@@ -130,2 +133,0 @@\n-        iae(()->b1.setProperty(\"directsign\", \"OK\"));\n-        npe(()->b1.setProperty(\"directsign\", null));\n@@ -149,1 +150,0 @@\n-        assertTrue(js2.getProperty(\"directsign\").equals(\"false\"));\n@@ -166,1 +166,0 @@\n-                .setProperty(\"directsign\", \"true\")\n@@ -179,1 +178,0 @@\n-        assertTrue(js3.getProperty(\"directsign\").equals(\"true\"));\n@@ -211,0 +209,8 @@\n+\n+        \/\/ altsigner does not support modern algorithms\n+        JarSigner.Builder b4 = new JarSigner.Builder(\n+                (PrivateKey)ks.getKey(\"e\", pass),\n+                CertificateFactory.getInstance(\"X.509\")\n+                        .generateCertPath(Arrays.asList(ks.getCertificateChain(\"e\"))));\n+        b4.setProperty(\"altsigner\", \"MyContentSigner\");\n+        iae(() -> b4.build());\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}