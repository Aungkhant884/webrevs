{"files":[{"patch":"@@ -92,7 +92,5 @@\n-        long c = input.readRawLong(); \/\/ chunk size\n-        Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, \"Chunk: chunkSize=\" + c);\n-        long cp = input.readRawLong(); \/\/ constant pool position\n-        Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, \"Chunk: constantPoolPosition=\" + cp);\n-        long mp = input.readRawLong(); \/\/ metadata position\n-        Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, \"Chunk: metadataPosition=\" + mp);\n-        chunkStartNanos = input.readRawLong(); \/\/ nanos since epoch\n+        \/\/ Chunk size, constant pool position and metadata position are\n+        \/\/ updated by JVM and not reliable to read\n+        input.skipBytes(3 * Long.BYTES);\n+\n+        chunkStartNanos = input.readRawLong();\n@@ -100,2 +98,4 @@\n-        durationNanos = input.readRawLong(); \/\/ duration nanos, not used\n-        Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, \"Chunk: durationNanos=\" + durationNanos);\n+\n+        \/\/ Duration nanos, updated by JVM and not reliable to read\n+        input.skipBytes(Long.BYTES);\n+\n@@ -104,0 +104,1 @@\n+\n@@ -106,1 +107,4 @@\n-        input.readRawInt(); \/\/ ignore file state and flag bits\n+\n+        \/\/ File state and flag bit, updated by JVM and not reliable to read\n+        input.skipBytes(Integer.BYTES);\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkHeader.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}