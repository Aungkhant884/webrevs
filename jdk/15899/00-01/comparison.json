{"files":[{"patch":"@@ -146,4 +146,0 @@\n-constexpr Register t3 = x28;\n-constexpr Register t4 = x29;\n-constexpr Register t5 = x30;\n-constexpr Register t6 = x31;\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4323,1 +4323,1 @@\n-    const Register loop = t0;\n+    const Register length = t0;\n@@ -4325,3 +4325,0 @@\n-    const Register length = t2;\n-    const Register avl = t3;\n-    const Register stride = t4;\n@@ -4336,4 +4333,7 @@\n-    \/\/ Put 16 here, as com.sun.crypto.providerChaCha20Cipher.KS_MAX_LEN is 1024\n-    \/\/ in java level.\n-    __ mv(avl, 16);\n-    __ vsetvli(length, avl, Assembler::e32, Assembler::m1);\n+    {\n+      const Register avl = t2; \/\/ share t2 with other non-overlapping usages.\n+      \/\/ Put 16 here, as com.sun.crypto.providerChaCha20Cipher.KS_MAX_LEN is 1024\n+      \/\/ in java level.\n+      __ mv(avl, 16);\n+      __ vsetvli(length, avl, Assembler::e32, Assembler::m1);\n+    }\n@@ -4351,15 +4351,18 @@\n-    __ mv(loop, 10);\n-    __ BIND(L_Rounds);\n-\n-    chacha20_quarter_round(work_vrs[0], work_vrs[4], work_vrs[8], work_vrs[12], tmp_vr);\n-    chacha20_quarter_round(work_vrs[1], work_vrs[5], work_vrs[9], work_vrs[13], tmp_vr);\n-    chacha20_quarter_round(work_vrs[2], work_vrs[6], work_vrs[10], work_vrs[14], tmp_vr);\n-    chacha20_quarter_round(work_vrs[3], work_vrs[7], work_vrs[11], work_vrs[15], tmp_vr);\n-\n-    chacha20_quarter_round(work_vrs[0], work_vrs[5], work_vrs[10], work_vrs[15], tmp_vr);\n-    chacha20_quarter_round(work_vrs[1], work_vrs[6], work_vrs[11], work_vrs[12], tmp_vr);\n-    chacha20_quarter_round(work_vrs[2], work_vrs[7], work_vrs[8], work_vrs[13], tmp_vr);\n-    chacha20_quarter_round(work_vrs[3], work_vrs[4], work_vrs[9], work_vrs[14], tmp_vr);\n-\n-    __ sub(loop, loop, 1);\n-    __ bnez(loop, L_Rounds);\n+    {\n+      const Register loop = t2; \/\/ share t2 with other non-overlapping usages.\n+      __ mv(loop, 10);\n+      __ BIND(L_Rounds);\n+\n+      chacha20_quarter_round(work_vrs[0], work_vrs[4], work_vrs[8], work_vrs[12], tmp_vr);\n+      chacha20_quarter_round(work_vrs[1], work_vrs[5], work_vrs[9], work_vrs[13], tmp_vr);\n+      chacha20_quarter_round(work_vrs[2], work_vrs[6], work_vrs[10], work_vrs[14], tmp_vr);\n+      chacha20_quarter_round(work_vrs[3], work_vrs[7], work_vrs[11], work_vrs[15], tmp_vr);\n+\n+      chacha20_quarter_round(work_vrs[0], work_vrs[5], work_vrs[10], work_vrs[15], tmp_vr);\n+      chacha20_quarter_round(work_vrs[1], work_vrs[6], work_vrs[11], work_vrs[12], tmp_vr);\n+      chacha20_quarter_round(work_vrs[2], work_vrs[7], work_vrs[8], work_vrs[13], tmp_vr);\n+      chacha20_quarter_round(work_vrs[3], work_vrs[4], work_vrs[9], work_vrs[14], tmp_vr);\n+\n+      __ sub(loop, loop, 1);\n+      __ bnez(loop, L_Rounds);\n+    }\n@@ -4377,4 +4380,7 @@\n-    __ mv(stride, 64);\n-    for (int i = 0; i < states_len; i += 1) {\n-      __ vsse32_v(work_vrs[i], key_stream, stride);\n-      __ addi(key_stream, key_stream, step);\n+    {\n+      const Register stride = t2; \/\/ share t2 with other non-overlapping usages.\n+      __ mv(stride, 64);\n+      for (int i = 0; i < states_len; i += 1) {\n+        __ vsse32_v(work_vrs[i], key_stream, stride);\n+        __ addi(key_stream, key_stream, step);\n+      }\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"}]}