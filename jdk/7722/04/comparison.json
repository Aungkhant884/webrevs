{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,1 @@\n-public\n-class SSLException extends IOException\n-{\n+public class SSLException extends IOException {\n@@ -51,2 +49,1 @@\n-    public SSLException(String reason)\n-    {\n+    public SSLException(String reason) {\n@@ -69,2 +66,1 @@\n-        super(message);\n-        initCause(cause);\n+        super(message, cause);\n@@ -86,2 +82,1 @@\n-        super(cause == null ? null : cause.toString());\n-        initCause(cause);\n+        super(cause);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLException.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\n@@ -29,1 +28,0 @@\n-\n@@ -37,3 +35,1 @@\n-public\n-class SSLHandshakeException extends SSLException\n-{\n+public class SSLHandshakeException extends SSLException {\n@@ -49,2 +45,1 @@\n-    public SSLHandshakeException(String reason)\n-    {\n+    public SSLHandshakeException(String reason) {\n@@ -53,0 +48,16 @@\n+\n+    \/**\n+     * Creates a {@code SSLHandshakeException} with the specified detail\n+     * message and cause.\n+     *\n+     * @param message the detail message (which is saved for later retrieval\n+     *        by the {@link #getMessage()} method).\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link #getCause()} method).  (A {@code null} value is\n+     *        permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     * @since 19\n+     *\/\n+    public SSLHandshakeException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLHandshakeException.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,1 @@\n-public\n-class SSLKeyException extends SSLException\n-{\n+public class SSLKeyException extends SSLException {\n@@ -48,2 +46,1 @@\n-    public SSLKeyException(String reason)\n-    {\n+    public SSLKeyException(String reason) {\n@@ -52,0 +49,16 @@\n+\n+    \/**\n+     * Creates a {@code SSLKeyException} with the specified detail\n+     * message and cause.\n+     *\n+     * @param message the detail message (which is saved for later retrieval\n+     *        by the {@link #getMessage()} method).\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link #getCause()} method).  (A {@code null} value is\n+     *        permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     * @since 19\n+     *\/\n+    public SSLKeyException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLKeyException.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,1 @@\n-public\n-class SSLPeerUnverifiedException extends SSLException\n-{\n+public class SSLPeerUnverifiedException extends SSLException {\n@@ -54,2 +52,1 @@\n-    public SSLPeerUnverifiedException(String reason)\n-    {\n+    public SSLPeerUnverifiedException(String reason) {\n@@ -58,0 +55,16 @@\n+\n+    \/**\n+     * Creates a {@code SSLPeerUnverifiedException} with the specified detail\n+     * message and cause.\n+     *\n+     * @param message the detail message (which is saved for later retrieval\n+     *        by the {@link #getMessage()} method).\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link #getCause()} method).  (A {@code null} value is\n+     *        permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     * @since 19\n+     *\/\n+    public SSLPeerUnverifiedException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLPeerUnverifiedException.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,1 @@\n-public\n-class SSLProtocolException extends SSLException\n-{\n+public class SSLProtocolException extends SSLException {\n@@ -48,2 +46,1 @@\n-    public SSLProtocolException(String reason)\n-    {\n+    public SSLProtocolException(String reason) {\n@@ -52,0 +49,16 @@\n+\n+    \/**\n+     * Creates a {@code SSLProtocolException} with the specified detail\n+     * message and cause.\n+     *\n+     * @param message the detail message (which is saved for later retrieval\n+     *        by the {@link #getMessage()} method).\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link #getCause()} method).  (A {@code null} value is\n+     *        permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     * @since 19\n+     *\/\n+    public SSLProtocolException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLProtocolException.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,0 @@\n-        SSLException ssle;\n@@ -127,1 +126,1 @@\n-            ssle = new SSLException(reason);\n+            return new SSLException(reason, cause);\n@@ -129,1 +128,1 @@\n-            ssle = new SSLProtocolException(reason);\n+            return new SSLProtocolException(reason, cause);\n@@ -131,1 +130,1 @@\n-            ssle = new SSLHandshakeException(reason);\n+            return new SSLHandshakeException(reason, cause);\n@@ -133,1 +132,1 @@\n-            ssle = new SSLException(reason);\n+            return new SSLException(reason, cause);\n@@ -135,6 +134,0 @@\n-\n-        if (cause != null) {\n-            ssle.initCause(cause);\n-        }\n-\n-        return ssle;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Alert.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,2 +298,2 @@\n-                throw (SSLHandshakeException)(new SSLHandshakeException(\n-                        \"Could not generate DHPublicKey\").initCause(e));\n+                throw new SSLHandshakeException(\n+                        \"Could not generate DHPublicKey\", e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHClientKeyExchange.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,2 +163,1 @@\n-                throw (SSLHandshakeException) new SSLHandshakeException(\n-                    \"Could not generate secret\").initCause(e);\n+                throw new SSLHandshakeException(\"Could not generate secret\", e);\n@@ -180,2 +179,1 @@\n-                throw (SSLHandshakeException) new SSLHandshakeException(\n-                    \"Could not generate secret\").initCause(e);\n+                throw new SSLHandshakeException(\"Could not generate secret\", e);\n@@ -205,2 +203,2 @@\n-                throw (SSLHandshakeException) new SSLHandshakeException(\n-                        \"Could not generate ECPublicKey\").initCause(e);\n+                throw new SSLHandshakeException(\n+                        \"Could not generate ECPublicKey\", e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHKeyExchange.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,2 +91,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                    \"Could not generate secret\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not generate secret\", gse);\n@@ -128,2 +127,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                    \"Could not generate secret\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not generate secret\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KAKeyDerivation.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,2 +305,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                    \"Could not derive PSK\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not derive PSK\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NewSessionTicket.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                \"Could not generate secret\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not generate secret\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLBasicKeyDerivation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1170,2 +1170,1 @@\n-            return (SSLHandshakeException)\n-                new SSLHandshakeException(msg).initCause(taskThrown);\n+            return new SSLHandshakeException(msg, taskThrown);\n@@ -1173,2 +1172,1 @@\n-            return (SSLKeyException)\n-                new SSLKeyException(msg).initCause(taskThrown);\n+            return new SSLKeyException(msg, taskThrown);\n@@ -1176,2 +1174,1 @@\n-            return (SSLPeerUnverifiedException)\n-                new SSLPeerUnverifiedException(msg).initCause(taskThrown);\n+            return new SSLPeerUnverifiedException(msg, taskThrown);\n@@ -1179,2 +1176,1 @@\n-            return (SSLProtocolException)\n-                new SSLProtocolException(msg).initCause(taskThrown);\n+            return new SSLProtocolException(msg, taskThrown);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineImpl.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,2 +245,1 @@\n-            throw (SSLProtocolException)(new SSLProtocolException(\n-                    \"Unexpected exception\")).initCause(gse);\n+            throw new SSLProtocolException(\"Unexpected exception\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineInputRecord.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,2 +116,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                \"Could not generate secret\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not generate secret\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSecretDerivation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1712,1 +1712,0 @@\n-            SSLException ssle;\n@@ -1714,2 +1713,2 @@\n-                ssle = new SSLHandshakeException(\n-                        \"Remote host terminated the handshake\");\n+                throw new SSLHandshakeException(\n+                        \"Remote host terminated the handshake\",  eofe);\n@@ -1717,6 +1716,2 @@\n-                ssle = new SSLProtocolException(\n-                        \"Remote host terminated the connection\");\n-            }\n-\n-            if (eofe != null) {\n-                ssle.initCause(eofe);\n+                throw new SSLProtocolException(\n+                        \"Remote host terminated the connection\", eofe);\n@@ -1724,1 +1719,0 @@\n-            throw ssle;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,2 +266,1 @@\n-            throw (SSLProtocolException)(new SSLProtocolException(\n-                    \"Unexpected exception\")).initCause(gse);\n+            throw new SSLProtocolException(\"Unexpected exception\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketInputRecord.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,2 +157,2 @@\n-                throw (SSLHandshakeException)(new SSLHandshakeException(\n-                    \"Could not generate secret\").initCause(gse));\n+                throw new SSLHandshakeException(\n+                        \"Could not generate secret\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTrafficKeyDerivation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1208,2 +1208,1 @@\n-            throw (SSLHandshakeException) new SSLHandshakeException(\n-                \"Could not generate secret\").initCause(gse);\n+            throw new SSLHandshakeException(\"Could not generate secret\", gse);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,3 +138,2 @@\n-                            Utilities.toHexString(encoded) + \"}\");\n-                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                                (SSLProtocolException)spe.initCause(iae));\n+                            Utilities.toHexString(encoded) + \"}\", iae);\n+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER, spe);\n@@ -149,3 +148,2 @@\n-                            Utilities.toHexString(encoded) + \"}\");\n-                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                                (SSLProtocolException)spe.initCause(iae));\n+                            Utilities.toHexString(encoded) + \"}\", iae);\n+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER, spe);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerNameExtension.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -438,2 +438,1 @@\n-            throw(SSLPeerUnverifiedException)\n-                new SSLPeerUnverifiedException(\"hostname of the server '\" +\n+            throw new SSLPeerUnverifiedException(\"hostname of the server '\" +\n@@ -442,1 +441,1 @@\n-                                \"server's certificate.\").initCause(e);\n+                                \"server's certificate.\", e);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/ext\/StartTlsResponseImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -576,3 +576,1 @@\n-                SSLHandshakeException he = new SSLHandshakeException(msg);\n-                he.initCause(throwable);\n-                throw he;\n+                throw new SSLHandshakeException(msg, throwable);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -595,3 +595,1 @@\n-        SSLHandshakeException e = new SSLHandshakeException(handshakeFailed);\n-        if (t != null) e.initCause(t);\n-        return e;\n+        return new SSLHandshakeException(handshakeFailed, t);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SSLTube.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-            local.initCause(remote);\n+            local.addSuppressed(remote);\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLServerSocketAlpnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-            local.initCause(remote);\n+            local.addSuppressed(remote);\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLSocketAlpnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282723\n+ * @summary Add constructors taking a cause to JSSE exceptions\n+ *\/\n+import javax.net.ssl.SSLHandshakeException;\n+import java.util.Objects;\n+\n+public class CheckSSLHandshakeException {\n+    private static String exceptionMessage = \"message\";\n+    private static Throwable exceptionCause = new RuntimeException();\n+\n+    public static void main(String[] args) throws Exception {\n+        testException(\n+                new SSLHandshakeException(exceptionMessage, exceptionCause));\n+    }\n+\n+    private static void testException(Exception ex) {\n+        if (!Objects.equals(ex.getMessage(), exceptionMessage)) {\n+            throw new RuntimeException(\"Unexpected exception message\");\n+        }\n+\n+        if (ex.getCause() != exceptionCause) {\n+            throw new RuntimeException(\"Unexpected exception cause\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLException\/CheckSSLHandshakeException.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282723\n+ * @summary Add constructors taking a cause to JSSE exceptions\n+ *\/\n+import javax.net.ssl.SSLKeyException;\n+import java.util.Objects;\n+\n+public class CheckSSLKeyException {\n+    private static String exceptionMessage = \"message\";\n+    private static Throwable exceptionCause = new RuntimeException();\n+\n+    public static void main(String[] args) throws Exception {\n+        testException(\n+                new SSLKeyException(exceptionMessage, exceptionCause));\n+    }\n+\n+    private static void testException(Exception ex) {\n+        if (!Objects.equals(ex.getMessage(), exceptionMessage)) {\n+            throw new RuntimeException(\"Unexpected exception message\");\n+        }\n+\n+        if (ex.getCause() != exceptionCause) {\n+            throw new RuntimeException(\"Unexpected exception cause\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLException\/CheckSSLKeyException.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282723\n+ * @summary Add constructors taking a cause to JSSE exceptions\n+ *\/\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import java.util.Objects;\n+\n+public class CheckSSLPeerUnverifiedException {\n+    private static String exceptionMessage = \"message\";\n+    private static Throwable exceptionCause = new RuntimeException();\n+\n+    public static void main(String[] args) throws Exception {\n+        testException(\n+            new SSLPeerUnverifiedException(exceptionMessage, exceptionCause));\n+    }\n+\n+    private static void testException(Exception ex) {\n+        if (!Objects.equals(ex.getMessage(), exceptionMessage)) {\n+            throw new RuntimeException(\"Unexpected exception message\");\n+        }\n+\n+        if (ex.getCause() != exceptionCause) {\n+            throw new RuntimeException(\"Unexpected exception cause\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLException\/CheckSSLPeerUnverifiedException.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282723\n+ * @summary Add constructors taking a cause to JSSE exceptions\n+ *\/\n+import javax.net.ssl.SSLProtocolException;\n+import java.util.Objects;\n+\n+public class CheckSSLProtocolException {\n+    private static String exceptionMessage = \"message\";\n+    private static Throwable exceptionCause = new RuntimeException();\n+\n+    public static void main(String[] args) throws Exception {\n+        testException(\n+                new SSLProtocolException(exceptionMessage, exceptionCause));\n+    }\n+\n+    private static void testException(Exception ex) {\n+        if (!Objects.equals(ex.getMessage(), exceptionMessage)) {\n+            throw new RuntimeException(\"Unexpected exception message\");\n+        }\n+\n+        if (ex.getCause() != exceptionCause) {\n+            throw new RuntimeException(\"Unexpected exception cause\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLException\/CheckSSLProtocolException.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -352,1 +352,1 @@\n-                    serverException.initCause(clientException);\n+                    serverException.addSuppressed(clientException);\n@@ -358,1 +358,1 @@\n-                    clientException.initCause(serverException);\n+                    clientException.addSuppressed(serverException);\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketSSLEngineTemplate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -547,1 +547,1 @@\n-            local.initCause(remote);\n+            local.addSuppressed(remote);\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketTemplate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}