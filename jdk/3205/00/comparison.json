{"files":[{"patch":"@@ -880,1 +880,1 @@\n-    public boolean isHexDigit(int ch) {\n+    public static boolean isHexDigit(int ch) {\n@@ -892,1 +892,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -898,1 +897,1 @@\n-    public int fromHexDigit(int ch) {\n+    public static int fromHexDigit(int ch) {\n@@ -910,1 +909,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -920,1 +918,1 @@\n-    private int fromHexDigits(CharSequence string, int index) {\n+    private static int fromHexDigits(CharSequence string, int index) {\n@@ -932,1 +930,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -947,1 +944,1 @@\n-    public int fromHexDigits(CharSequence string) {\n+    public static int fromHexDigits(CharSequence string) {\n@@ -964,1 +961,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -983,1 +979,1 @@\n-    public int fromHexDigits(CharSequence string, int fromIndex, int toIndex) {\n+    public static int fromHexDigits(CharSequence string, int fromIndex, int toIndex) {\n@@ -999,1 +995,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -1014,1 +1009,1 @@\n-    public long fromHexDigitsToLong(CharSequence string) {\n+    public static long fromHexDigitsToLong(CharSequence string) {\n@@ -1031,1 +1026,0 @@\n-     * The delimiter, prefix, suffix, and uppercase parameters are not used.\n@@ -1050,1 +1044,1 @@\n-    public long fromHexDigitsToLong(CharSequence string, int fromIndex, int toIndex) {\n+    public static long fromHexDigitsToLong(CharSequence string, int fromIndex, int toIndex) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -822,1 +822,1 @@\n-            if (hex.isHexDigit(chars[i])) {\n+            if (HexFormat.isHexDigit(chars[i])) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.security.spec.AlgorithmParameterSpec;\n@@ -4583,1 +4582,1 @@\n-                                if (!hexFmt.isHexDigit(c)) {\n+                                if (!HexFormat.isHexDigit(c)) {\n@@ -4586,1 +4585,1 @@\n-                                int hex = hexFmt.fromHexDigit(c);\n+                                int hex = HexFormat.fromHexDigit(c);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.AccessController;\n@@ -266,1 +265,1 @@\n-                int cVal = hex.fromHexDigit(c);     \/\/ throws on invalid character\n+                int cVal = HexFormat.fromHexDigit(c);     \/\/ throws on invalid character\n@@ -506,1 +505,1 @@\n-        if (hex.isHexDigit(c1)) {\n+        if (HexFormat.isHexDigit(c1)) {\n@@ -510,3 +509,3 @@\n-            if (hex.isHexDigit(c2)) {\n-                int hi = hex.fromHexDigit(c1);\n-                int lo = hex.fromHexDigit(c2);\n+            if (HexFormat.isHexDigit(c2)) {\n+                int hi = HexFormat.fromHexDigit(c1);\n+                int lo = HexFormat.fromHexDigit(c2);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AVA.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-            int expected = hex.fromHexDigits(actual);\n+            int expected = HexFormat.fromHexDigits(actual);\n@@ -169,1 +169,1 @@\n-            boolean actual = hex.isHexDigit(i);\n+            boolean actual = HexFormat.isHexDigit(i);\n@@ -180,1 +180,1 @@\n-            int v = hex.fromHexDigit(chars.charAt(i));\n+            int v = HexFormat.fromHexDigit(chars.charAt(i));\n@@ -191,1 +191,1 @@\n-                assertFalse(hex.isHexDigit(ch), \"isHexDigit incorrect for '\" + ch + \"'  = \" + i);\n+                assertFalse(HexFormat.isHexDigit(ch), \"isHexDigit incorrect for '\" + ch + \"'  = \" + i);\n@@ -193,1 +193,1 @@\n-                        () -> hex.fromHexDigit(ch));\n+                        () -> HexFormat.fromHexDigit(ch));\n@@ -211,1 +211,1 @@\n-            assertEquals(hex.fromHexDigits(sb), i, \"hex.format(sb, byte) wrong\");\n+            assertEquals(HexFormat.fromHexDigits(sb), i, \"hex.format(sb, byte) wrong\");\n@@ -247,1 +247,1 @@\n-                    () -> hex.fromHexDigits(chars.subSequence(ndx, ndx+2)));\n+                    () -> HexFormat.fromHexDigits(chars.subSequence(ndx, ndx+2)));\n@@ -292,4 +292,4 @@\n-        assertThrows(NPE, () -> HexFormat.of().fromHexDigits(null));\n-        assertThrows(NPE, () -> HexFormat.of().fromHexDigits(null, 0, 0));\n-        assertThrows(NPE, () -> HexFormat.of().fromHexDigitsToLong(null));\n-        assertThrows(NPE, () -> HexFormat.of().fromHexDigitsToLong(null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.fromHexDigits(null));\n+        assertThrows(NPE, () -> HexFormat.fromHexDigits(null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.fromHexDigitsToLong(null));\n+        assertThrows(NPE, () -> HexFormat.fromHexDigitsToLong(null, 0, 0));\n@@ -317,1 +317,1 @@\n-                () -> HexFormat.of().fromHexDigits(string, fromIndex, toIndex));\n+                () -> HexFormat.fromHexDigits(string, fromIndex, toIndex));\n@@ -319,1 +319,1 @@\n-                () -> HexFormat.of().fromHexDigitsToLong(string, fromIndex, toIndex));\n+                () -> HexFormat.fromHexDigitsToLong(string, fromIndex, toIndex));\n@@ -327,1 +327,1 @@\n-                () -> HexFormat.of().fromHexDigits(\"9876543210\"));\n+                () -> HexFormat.fromHexDigits(\"9876543210\"));\n@@ -329,1 +329,1 @@\n-                () -> HexFormat.of().fromHexDigits(\"9876543210\", 0, 9));\n+                () -> HexFormat.fromHexDigits(\"9876543210\", 0, 9));\n@@ -331,1 +331,1 @@\n-                () -> HexFormat.of().fromHexDigitsToLong(\"98765432109876543210\"));\n+                () -> HexFormat.fromHexDigitsToLong(\"98765432109876543210\"));\n@@ -333,1 +333,1 @@\n-                () -> HexFormat.of().fromHexDigitsToLong(\"98765432109876543210\", 0, 17));\n+                () -> HexFormat.fromHexDigitsToLong(\"98765432109876543210\", 0, 17));\n@@ -575,1 +575,1 @@\n-            long actual = hex.fromHexDigits(s, 0, digits);\n+            long actual = HexFormat.fromHexDigits(s, 0, digits);\n@@ -592,1 +592,1 @@\n-            long actual = hex.fromHexDigitsToLong(s, 0, digits);\n+            long actual = HexFormat.fromHexDigitsToLong(s, 0, digits);\n@@ -608,1 +608,1 @@\n-        long actual = hex.fromHexDigitsToLong(s);\n+        long actual = HexFormat.fromHexDigitsToLong(s);\n@@ -670,1 +670,1 @@\n-            byte byteVal = (byte)hex.fromHexDigits(byteStr);\n+            byte byteVal = (byte) HexFormat.fromHexDigits(byteStr);\n@@ -680,1 +680,1 @@\n-            int charVal = hex.fromHexDigits(charStr);\n+            int charVal = HexFormat.fromHexDigits(charStr);\n@@ -687,1 +687,1 @@\n-            int intVal = hex.fromHexDigits(intStr);\n+            int intVal = HexFormat.fromHexDigits(intStr);\n@@ -693,1 +693,1 @@\n-            long longVal = hex.fromHexDigitsToLong(longStr, 0, 16);\n+            long longVal = HexFormat.fromHexDigitsToLong(longStr, 0, 16);\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}