{"files":[{"patch":"@@ -87,1 +87,1 @@\n-    empty-body ignored-qualifiers implicit-fallthrough int-in-bool-context \\\n+    empty-body implicit-fallthrough int-in-bool-context \\\n@@ -91,1 +91,1 @@\n-DISABLED_WARNINGS_clang := ignored-qualifiers sometimes-uninitialized \\\n+DISABLED_WARNINGS_clang := sometimes-uninitialized \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2288,1 +2288,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -2323,1 +2323,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n@@ -2343,1 +2343,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -2354,1 +2354,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -2358,1 +2358,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -2373,1 +2373,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n@@ -2378,1 +2378,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n@@ -2383,1 +2383,1 @@\n-const uint Matcher::vector_ideal_reg(int len) {\n+uint Matcher::vector_ideal_reg(int len) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -151,1 +151,1 @@\n-  const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -235,1 +235,1 @@\n-  const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -274,1 +274,1 @@\n-  const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+  bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -141,1 +141,1 @@\n-  const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -225,1 +225,1 @@\n-  const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -264,1 +264,1 @@\n-  const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+  bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4214,1 +4214,1 @@\n-inline const Assembler::Condition operator~(const Assembler::Condition cond) {\n+inline Assembler::Condition operator~(const Assembler::Condition cond) {\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  static const bool supports_scalable_vector() {\n+  static bool supports_scalable_vector() {\n@@ -147,1 +147,1 @@\n-  static const bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n+  static constexpr bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n@@ -152,1 +152,1 @@\n-  static const bool has_predicated_vectors(void) {\n+  static bool has_predicated_vectors(void) {\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -950,1 +950,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -1005,1 +1005,1 @@\n-const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -1009,1 +1009,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1020,1 +1020,1 @@\n-const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -1024,1 +1024,1 @@\n-const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n@@ -1037,1 +1037,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n@@ -1047,1 +1047,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -1051,1 +1051,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n@@ -1056,1 +1056,1 @@\n-const uint Matcher::vector_ideal_reg(int size) {\n+uint Matcher::vector_ideal_reg(int size) {\n@@ -1067,1 +1067,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -1072,1 +1072,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -1077,1 +1077,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-  const relocInfo::relocType rtype() { return _rspec.type(); }\n+  relocInfo::relocType rtype()       { return _rspec.type(); }\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  static const bool misaligned_vectors_ok() {\n+  static constexpr bool misaligned_vectors_ok() {\n@@ -158,1 +158,1 @@\n-  static const bool convL2FSupported(void) {\n+  static bool convL2FSupported(void) {\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2103,1 +2103,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -2173,1 +2173,1 @@\n-const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -2177,1 +2177,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -2184,1 +2184,1 @@\n-const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -2188,1 +2188,1 @@\n-const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n@@ -2201,1 +2201,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n@@ -2211,1 +2211,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -2222,1 +2222,1 @@\n-const uint Matcher::vector_ideal_reg(int size) {\n+uint Matcher::vector_ideal_reg(int size) {\n@@ -2233,1 +2233,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -2238,1 +2238,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -2242,1 +2242,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n@@ -2246,1 +2246,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-  const address target() const {\n+  address target() const {\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  const address last_Java_pc(void)               { return _last_Java_pc; }\n+  address last_Java_pc(void)                     { return _last_Java_pc; }\n","filename":"src\/hotspot\/cpu\/riscv\/javaFrameAnchor_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  static const bool supports_scalable_vector() {\n+  static bool supports_scalable_vector() {\n@@ -146,1 +146,1 @@\n-  static const bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n+  static constexpr bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n@@ -151,1 +151,1 @@\n-  static const bool has_predicated_vectors(void) {\n+  static bool has_predicated_vectors(void) {\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1875,1 +1875,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -1924,1 +1924,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n@@ -1957,1 +1957,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -1972,1 +1972,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -1976,1 +1976,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -1991,1 +1991,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n@@ -1996,1 +1996,1 @@\n-const uint Matcher::vector_ideal_reg(int len) {\n+uint Matcher::vector_ideal_reg(int len) {\n@@ -2006,1 +2006,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -55,1 +55,1 @@\n-  const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -82,1 +82,1 @@\n-  const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+  bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -89,1 +89,1 @@\n-  const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+  bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,3 +58,3 @@\n-    const char* const pretty()   { return _pretty; }\n-    const uint64_t feature_bit() { return _feature_bit; }\n-    const bool feature_string()  { return _feature_string; }\n+    const char* pretty()         { return _pretty; }\n+    uint64_t feature_bit()       { return _feature_bit; }\n+    bool feature_string()        { return _feature_string; }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-  const relocInfo::relocType rtype() const { return _rspec.type(); }\n+  relocInfo::relocType rtype()       const { return _rspec.type(); }\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  static constexpr const bool supports_scalable_vector() {\n+  static constexpr bool supports_scalable_vector() {\n@@ -67,1 +67,1 @@\n-  static const int long_cmove_cost() { return ConditionalMoveLimit; }\n+  static int long_cmove_cost() { return ConditionalMoveLimit; }\n@@ -70,1 +70,1 @@\n-  static const int float_cmove_cost() { return ConditionalMoveLimit; }\n+  static int float_cmove_cost() { return ConditionalMoveLimit; }\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1495,1 +1495,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -1513,1 +1513,1 @@\n-const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -1517,1 +1517,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1524,1 +1524,1 @@\n-const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -1528,1 +1528,1 @@\n-const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n@@ -1541,1 +1541,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n@@ -1553,1 +1553,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -1559,1 +1559,1 @@\n-const uint Matcher::vector_ideal_reg(int size) {\n+uint Matcher::vector_ideal_reg(int size) {\n@@ -1565,1 +1565,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -1570,1 +1570,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -1574,1 +1574,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n@@ -1578,1 +1578,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-static const int entry_barrier_offset(nmethod* nm) {\n+static int entry_barrier_offset(nmethod* nm) {\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  static const bool const_oop_prefer_decode() {\n+  static bool const_oop_prefer_decode() {\n@@ -107,1 +107,1 @@\n-  static const bool const_klass_prefer_decode() {\n+  static bool const_klass_prefer_decode() {\n@@ -168,1 +168,1 @@\n-  static const bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n+  static constexpr bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n@@ -173,1 +173,1 @@\n-  static const bool has_predicated_vectors(void) {\n+  static bool has_predicated_vectors(void) {\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1395,1 +1395,1 @@\n-const bool Matcher::match_rule_supported(int opcode) {\n+bool Matcher::match_rule_supported(int opcode) {\n@@ -1697,1 +1697,1 @@\n-const bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_superword(int opcode, int vlen, BasicType bt) {\n@@ -1703,1 +1703,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1991,1 +1991,1 @@\n-const bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n+bool Matcher::match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt) {\n@@ -2150,1 +2150,1 @@\n-const bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n+bool Matcher::vector_needs_partial_operations(Node* node, const TypeVect* vt) {\n@@ -2222,1 +2222,1 @@\n-const int Matcher::vector_width_in_bytes(BasicType bt) {\n+int Matcher::vector_width_in_bytes(BasicType bt) {\n@@ -2265,1 +2265,1 @@\n-const int Matcher::max_vector_size(const BasicType bt) {\n+int Matcher::max_vector_size(const BasicType bt) {\n@@ -2268,1 +2268,1 @@\n-const int Matcher::min_vector_size(const BasicType bt) {\n+int Matcher::min_vector_size(const BasicType bt) {\n@@ -2279,1 +2279,1 @@\n-const int Matcher::superword_max_vector_size(const BasicType bt) {\n+int Matcher::superword_max_vector_size(const BasicType bt) {\n@@ -2288,1 +2288,1 @@\n-const int Matcher::scalable_vector_reg_size(const BasicType bt) {\n+int Matcher::scalable_vector_reg_size(const BasicType bt) {\n@@ -2293,1 +2293,1 @@\n-const uint Matcher::vector_ideal_reg(int size) {\n+uint Matcher::vector_ideal_reg(int size) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1410,1 +1410,1 @@\n-const bool Matcher::supports_vector_calling_convention() {\n+bool Matcher::supports_vector_calling_convention() {\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1721,1 +1721,1 @@\n-const bool Matcher::supports_vector_calling_convention(void) {\n+bool Matcher::supports_vector_calling_convention(void) {\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -909,1 +909,1 @@\n-      fprintf(fp_cpp, \"\\n  (enum machPipelineStages * const) pipeline_reads_%03d,\\n \",\n+      fprintf(fp_cpp, \"\\n  (enum machPipelineStages *) pipeline_reads_%03d,\\n \",\n@@ -914,1 +914,1 @@\n-    fprintf(fp_cpp, \"  (enum machPipelineStages * const) pipeline_res_stages_%03d,\\n\",\n+    fprintf(fp_cpp, \"  (enum machPipelineStages *) pipeline_res_stages_%03d,\\n\",\n@@ -916,1 +916,1 @@\n-    fprintf(fp_cpp, \"  (uint * const) pipeline_res_cycles_%03d,\\n\",\n+    fprintf(fp_cpp, \"  (uint *) pipeline_res_cycles_%03d,\\n\",\n@@ -4212,1 +4212,1 @@\n-  fprintf(fp_cpp, \"const bool Matcher::has_match_rule(int opcode) {\\n\");\n+  fprintf(fp_cpp, \"bool Matcher::has_match_rule(int opcode) {\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  virtual const char tchar() const               = 0; \/\/ the type 'character' for printing\n+  virtual char tchar() const                     = 0; \/\/ the type 'character' for printing\n@@ -180,1 +180,1 @@\n-  virtual const char tchar() const               { return 'v'; }\n+  virtual char tchar() const                     { return 'v'; }\n@@ -190,1 +190,1 @@\n-  virtual const char tchar() const               { return 'i'; }\n+  virtual char tchar() const                     { return 'i'; }\n@@ -214,1 +214,1 @@\n-  virtual const char tchar() const               { return 'l'; }\n+  virtual char tchar() const                     { return 'l'; }\n@@ -238,1 +238,1 @@\n-  virtual const char tchar() const               { return 'f'; }\n+  virtual char tchar() const                     { return 'f'; }\n@@ -262,1 +262,1 @@\n-  virtual const char tchar() const               { return 'd'; }\n+  virtual char tchar() const                     { return 'd'; }\n@@ -286,1 +286,1 @@\n-  virtual const char tchar() const               { return 'a'; }\n+  virtual char tchar() const                     { return 'a'; }\n@@ -374,1 +374,1 @@\n-  virtual const char tchar() const                      { return 'a'; }\n+  virtual char tchar() const                            { return 'a'; }\n@@ -431,1 +431,1 @@\n-  virtual const char tchar() const               { return 'r'; }\n+  virtual char tchar() const                     { return 'r'; }\n@@ -456,1 +456,1 @@\n-  virtual const char tchar() const               { return ' '; }\n+  virtual char tchar() const                     { return ' '; }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -4964,1 +4964,1 @@\n-  const char* const bytes = (const char* const)signature->bytes();\n+  const char* const bytes = (const char*)signature->bytes();\n@@ -5675,1 +5675,1 @@\n-  assert(cp_size == (const u2)cp->length(), \"invariant\");\n+  assert(cp_size == (u2)cp->length(), \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-const char* const ClassFileStream::clone_source() const {\n+const char* ClassFileStream::clone_source() const {\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  const char* const clone_source() const;\n+  const char* clone_source() const;\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  _u.ccstr_value = (const ccstr)os::strdup_check_oom(value);\n+  _u.ccstr_value = (ccstr)os::strdup_check_oom(value);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1360,2 +1360,2 @@\n-    const uint old_regions_removed() { return _old_regions_removed; }\n-    const uint humongous_regions_removed() { return _humongous_regions_removed; }\n+    uint old_regions_removed() { return _old_regions_removed; }\n+    uint humongous_regions_removed() { return _humongous_regions_removed; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  const bool is_active() { return log_is_enabled(Trace, gc, region); }\n+  bool is_active() { return log_is_enabled(Trace, gc, region); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HRPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1249,1 +1249,1 @@\n-  static ReferenceProcessor* const ref_processor() { return _ref_processor; }\n+  static ReferenceProcessor* ref_processor() { return _ref_processor; }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  static PSCardTable* const card_table()           { assert(_card_table != nullptr, \"Sanity\"); return _card_table; }\n+  static PSCardTable* card_table()                 { assert(_card_table != nullptr, \"Sanity\"); return _card_table; }\n@@ -95,1 +95,1 @@\n-  static ReferenceProcessor* const reference_processor() {\n+  static ReferenceProcessor* reference_processor() {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  ReferenceProcessor* const ref_processor() { return _ref_processor; }\n+  ReferenceProcessor* ref_processor() { return _ref_processor; }\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  static ReferenceProcessor* const ref_processor() { return _ref_processor; }\n+  static ReferenceProcessor* ref_processor() { return _ref_processor; }\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,5 +125,5 @@\n-   const size_t edenUsed() const { return _edenUsed; }\n-   const size_t edenCapacity() const { return _edenCapacity; }\n-   const size_t survivorUsed() const { return _survivorUsed; }\n-   const size_t oldGenUsed() const { return _oldGenUsed; }\n-   const uint   numberOfRegions() const { return _numberOfRegions; }\n+   size_t edenUsed() const { return _edenUsed; }\n+   size_t edenCapacity() const { return _edenCapacity; }\n+   size_t survivorUsed() const { return _survivorUsed; }\n+   size_t oldGenUsed() const { return _oldGenUsed; }\n+   uint   numberOfRegions() const { return _numberOfRegions; }\n","filename":"src\/hotspot\/share\/gc\/shared\/gcHeapSummary.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-  static const size_t min_size() {\n+  static size_t min_size() {\n@@ -185,1 +185,1 @@\n-  static const size_t max_size() {\n+  static size_t max_size() {\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  const uint gc_id() const { return _gc_id; }\n+  uint gc_id() const { return _gc_id; }\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  inline ShenandoahHeapRegion* const heap_region_containing(const void* addr) const;\n+  inline ShenandoahHeapRegion* heap_region_containing(const void* addr) const;\n@@ -242,1 +242,1 @@\n-  inline ShenandoahHeapRegion* const get_region(size_t region_idx) const;\n+  inline ShenandoahHeapRegion* get_region(size_t region_idx) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-inline ShenandoahHeapRegion* const ShenandoahHeap::heap_region_containing(const void* addr) const {\n+inline ShenandoahHeapRegion* ShenandoahHeap::heap_region_containing(const void* addr) const {\n@@ -551,1 +551,1 @@\n-inline ShenandoahHeapRegion* const ShenandoahHeap::get_region(size_t region_idx) const {\n+inline ShenandoahHeapRegion* ShenandoahHeap::get_region(size_t region_idx) const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  static const int region_states_num() {\n+  static int region_states_num() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-  const size_t in_place_count() const {\n+  size_t in_place_count() const {\n@@ -269,1 +269,1 @@\n-  const size_t in_place_count() const {\n+  size_t in_place_count() const {\n","filename":"src\/hotspot\/share\/gc\/x\/xRelocate.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -476,1 +476,1 @@\n-  const size_t in_place_count() const {\n+  size_t in_place_count() const {\n@@ -570,1 +570,1 @@\n-  const size_t in_place_count() const {\n+  size_t in_place_count() const {\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,10 +68,10 @@\n-static const typeArrayOop invoke(jlong trace_id,\n-                                 jboolean force_instrumentation,\n-                                 jboolean boot_class_loader,\n-                                 jclass class_being_redefined,\n-                                 jint class_data_len,\n-                                 const unsigned char* class_data,\n-                                 Symbol* method_sym,\n-                                 Symbol* signature_sym,\n-                                 jint& new_bytes_length,\n-                                 TRAPS) {\n+static typeArrayOop invoke(jlong trace_id,\n+                           jboolean force_instrumentation,\n+                           jboolean boot_class_loader,\n+                           jclass class_being_redefined,\n+                           jint class_data_len,\n+                           const unsigned char* class_data,\n+                           Symbol* method_sym,\n+                           Symbol* signature_sym,\n+                           jint& new_bytes_length,\n+                           TRAPS) {\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-const oop Edge::pointee() const {\n+oop Edge::pointee() const {\n@@ -36,1 +36,1 @@\n-const oop Edge::reference_owner() const {\n+oop Edge::reference_owner() const {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  const oop pointee() const;\n-  const oop reference_owner() const;\n+  oop pointee() const;\n+  oop reference_owner() const;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edge.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  const objArrayOop ref_owner_array = static_cast<const objArrayOop>(ref_owner);\n+  const objArrayOop ref_owner_array = static_cast<objArrayOop>(ref_owner);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-  const uintptr_t high() const {\n+  uintptr_t high() const {\n@@ -415,1 +415,1 @@\n-  const uintptr_t low() const {\n+  uintptr_t low() const {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-const oop ObjectSample::object() const {\n+oop ObjectSample::object() const {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSample.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  const oop object() const;\n+  oop object() const;\n@@ -144,1 +144,1 @@\n-  const void set_allocation_time(const JfrTicks& time) {\n+  void set_allocation_time(const JfrTicks& time) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSample.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  event.set_source((const ModuleEntry* const)from_module);\n+  event.set_source((const ModuleEntry*)from_module);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrModuleEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  oopDesc* const thread_group_oop() const;\n+  oopDesc* thread_group_oop() const;\n@@ -73,1 +73,1 @@\n-oopDesc* const JfrThreadGroupPointers::thread_group_oop() const {\n+oopDesc* JfrThreadGroupPointers::thread_group_oop() const {\n@@ -212,1 +212,1 @@\n-  const char* const thread_group_name() const { return _thread_group_name; }\n+  const char* thread_group_name() const { return _thread_group_name; }\n@@ -220,1 +220,1 @@\n-  const oop thread_group() const;\n+  oop thread_group() const;\n@@ -251,1 +251,1 @@\n-const oop JfrThreadGroup::JfrThreadGroupEntry::thread_group() const {\n+oop JfrThreadGroup::JfrThreadGroupEntry::thread_group() const {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    const jclass clazz = (const jclass)event_subklasses.at(i);\n+    const jclass clazz = (jclass)event_subklasses.at(i);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  traceid* const trace_id_addr() const { return &_trace_id; } \\\n+  traceid* trace_id_addr() const { return &_trace_id; } \\\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrTraceIdExtension.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  static const int size_in_words() {\n+  static int size_in_words() {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -413,1 +413,1 @@\n-  CompiledMethod* volatile code() const;\n+  CompiledMethod* code() const;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-inline CompiledMethod* volatile Method::code() const {\n+inline CompiledMethod* Method::code() const {\n","filename":"src\/hotspot\/share\/oops\/method.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,2 +605,2 @@\n-  const address  entry_point() const { return _entry_point; }\n-  const float    cnt()         const { return _cnt; }\n+  address  entry_point()       const { return _entry_point; }\n+  float    cnt()               const { return _cnt; }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  const bool has_range_check() {\n+  bool has_range_check() {\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,4 +242,4 @@\n-  const int inst_mem_id() const { return _inst_mem_id; }\n-  const int inst_id()     const { return _inst_id; }\n-  const int inst_index()  const { return _inst_index; }\n-  const int inst_offset() const { return _inst_offset; }\n+  int inst_mem_id() const { return _inst_mem_id; }\n+  int inst_id()     const { return _inst_id; }\n+  int inst_index()  const { return _inst_index; }\n+  int inst_offset() const { return _inst_offset; }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -901,3 +901,3 @@\n-  const TypeFunc* tf()        const { return _tf; }\n-  const address entry_point() const { return _entry_point; }\n-  const float   cnt()         const { return _cnt; }\n+  const TypeFunc* tf()  const { return _tf; }\n+  address entry_point() const { return _entry_point; }\n+  float   cnt()         const { return _cnt; }\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -450,1 +450,1 @@\n-const int Matcher::scalable_predicate_reg_slots() {\n+int Matcher::scalable_predicate_reg_slots() {\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-  static const bool has_match_rule(int opcode);\n+  static bool has_match_rule(int opcode);\n@@ -329,1 +329,1 @@\n-  static const bool match_rule_supported(int opcode);\n+  static bool match_rule_supported(int opcode);\n@@ -333,1 +333,1 @@\n-  static const bool match_rule_supported_superword(int opcode, int vlen, BasicType bt);\n+  static bool match_rule_supported_superword(int opcode, int vlen, BasicType bt);\n@@ -337,1 +337,1 @@\n-  static const bool match_rule_supported_vector(int opcode, int vlen, BasicType bt);\n+  static bool match_rule_supported_vector(int opcode, int vlen, BasicType bt);\n@@ -339,1 +339,1 @@\n-  static const bool match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt);\n+  static bool match_rule_supported_vector_masked(int opcode, int vlen, BasicType bt);\n@@ -341,1 +341,1 @@\n-  static const bool vector_needs_partial_operations(Node* node, const TypeVect* vt);\n+  static bool vector_needs_partial_operations(Node* node, const TypeVect* vt);\n@@ -347,1 +347,1 @@\n-  static const int vector_width_in_bytes(BasicType bt);\n+  static int vector_width_in_bytes(BasicType bt);\n@@ -350,3 +350,3 @@\n-  static const int max_vector_size(const BasicType bt);\n-  static const int min_vector_size(const BasicType bt);\n-  static const bool vector_size_supported(const BasicType bt, int size) {\n+  static int max_vector_size(const BasicType bt);\n+  static int min_vector_size(const BasicType bt);\n+  static bool vector_size_supported(const BasicType bt, int size) {\n@@ -357,1 +357,1 @@\n-  static const int superword_max_vector_size(const BasicType bt);\n+  static int superword_max_vector_size(const BasicType bt);\n@@ -360,1 +360,1 @@\n-  static const int scalable_vector_reg_size(const BasicType bt);\n+  static int scalable_vector_reg_size(const BasicType bt);\n@@ -362,1 +362,1 @@\n-  static const int scalable_predicate_reg_slots();\n+  static int scalable_predicate_reg_slots();\n@@ -365,1 +365,1 @@\n-  static const uint vector_ideal_reg(int len);\n+  static uint vector_ideal_reg(int len);\n@@ -452,1 +452,1 @@\n-  static const bool supports_vector_calling_convention();\n+  static bool supports_vector_calling_convention();\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -832,1 +832,1 @@\n-  const juint class_id() const { return _class_id; }\n+  juint class_id() const { return _class_id; }\n@@ -834,1 +834,1 @@\n-  const juint flags() const { return _flags; }\n+  juint flags() const { return _flags; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,2 +1002,2 @@\n-  const int offset() const { return _offset; }\n-  const PTR ptr()    const { return _ptr; }\n+  int offset() const { return _offset; }\n+  PTR ptr()    const { return _ptr; }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-const bool JvmtiUtil::has_event_capability(jvmtiEvent event_type, const jvmtiCapabilities* capabilities_ptr) {\n+bool JvmtiUtil::has_event_capability(jvmtiEvent event_type, const jvmtiCapabilities* capabilities_ptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1408,1 +1408,1 @@\n-  const jvmtiHeapReferenceCallback heap_reference_callback() const {\n+  jvmtiHeapReferenceCallback heap_reference_callback() const {\n@@ -1411,1 +1411,1 @@\n-  const jvmtiPrimitiveFieldCallback primitive_field_callback() const {\n+  jvmtiPrimitiveFieldCallback primitive_field_callback() const {\n@@ -1414,1 +1414,1 @@\n-  const jvmtiArrayPrimitiveValueCallback array_primitive_value_callback() const {\n+  jvmtiArrayPrimitiveValueCallback array_primitive_value_callback() const {\n@@ -1417,1 +1417,1 @@\n-  const jvmtiStringPrimitiveValueCallback string_primitive_value_callback() const {\n+  jvmtiStringPrimitiveValueCallback string_primitive_value_callback() const {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  static const bool has_event_capability(jvmtiEvent event_type, const jvmtiCapabilities* capabilities_ptr);\n+  static bool has_event_capability(jvmtiEvent event_type, const jvmtiCapabilities* capabilities_ptr);\n@@ -55,1 +55,1 @@\n-  static const bool  event_threaded(int num) {\n+  static bool  event_threaded(int num) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiUtil.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-  uint length() const                       { return _length; }\n+  uint length() const                 { return _length; }\n@@ -202,1 +202,1 @@\n-  JavaThread *const thread_at(uint i) const { return _threads[i]; }\n+  JavaThread *thread_at(uint i) const { return _threads[i]; }\n@@ -204,1 +204,1 @@\n-  JavaThread *const *threads() const        { return _threads; }\n+  JavaThread *const *threads() const  { return _threads; }\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  static const int num_memory_pools() {\n+  static int num_memory_pools() {\n@@ -73,1 +73,1 @@\n-  static const int num_memory_managers() {\n+  static int num_memory_managers() {\n","filename":"src\/hotspot\/share\/services\/memoryService.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-  static inline const bm_word_t load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order);\n+  static inline bm_word_t load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-inline const BitMap::bm_word_t BitMap::load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order) {\n+inline BitMap::bm_word_t BitMap::load_word_ordered(const volatile bm_word_t* const addr, atomic_memory_order memory_order) {\n","filename":"src\/hotspot\/share\/utilities\/bitMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-  FILE* const fd() const { return _file; }\n+  FILE* fd() const { return _file; }\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}