{"files":[{"patch":"@@ -519,1 +519,0 @@\n-java\/awt\/dnd\/BadSerializationTest\/BadSerializationTest.java 8277817 linux-x64,windows-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @run testng\/othervm --add-opens java.desktop\/java.awt=ALL-UNNAMED BadSerializationTest\n@@ -44,0 +45,1 @@\n+import java.lang.reflect.Field;\n@@ -64,8 +66,6 @@\n-        if (args.length > 0 && args[0].equals(\"-write\")) {\n-            writeObjects(); \/\/Creates the binary files for the test.\n-        } else {\n-            String testSrc = System.getProperty(\"test.src\") + File.separator;\n-            testReadObject(testSrc + goodSerialized, false);\n-            Stream.of(badSerialized).forEach(\n-                    file -> testReadObject(testSrc + file, true));\n-        }\n+        writeObjects(); \/\/Creates the binary files for the test.\n+\n+        String testSrc = System.getProperty(\"test.src\") + File.separator;\n+        testReadObject(testSrc + goodSerialized, false);\n+        Stream.of(badSerialized).forEach(\n+                file -> testReadObject(testSrc + file, true));\n@@ -95,2 +95,1 @@\n-     * Creates the stubs for the test. It is necessary to disable all checks in\n-     * the constructors of DragGestureEvent\/DragGestureRecognizer before run.\n+     * Creates the stubs for the test.\n@@ -100,0 +99,1 @@\n+        evs.add(null);\n@@ -107,2 +107,1 @@\n-        write(new DragGestureEvent(new NullComponent(), ACTION_COPY, ori, evs),\n-              \"nullComponent\");\n+        write(createNullComponent(ori, evs), \"nullComponent\");\n@@ -113,2 +112,1 @@\n-        write(new DragGestureEvent(new NullDragSource(), ACTION_COPY, ori, evs),\n-              \"nullDragSource\");\n+        write(createNullDragSource(ori, evs), \"nullDragSource\");\n@@ -116,2 +114,1 @@\n-        write(new DragGestureEvent(new NothingNull(), ACTION_COPY, null, evs),\n-              \"nullOrigin\");\n+        write(createNullOrigin(ori, evs), \"nullOrigin\");\n@@ -130,11 +127,6 @@\n-    public static final class NullDragSource extends DragGestureRecognizer {\n-\n-        public NullDragSource() {\n-            super(null, new JPanel());\n-        }\n-\n-        protected void registerListeners() {\n-        }\n-\n-        protected void unregisterListeners() {\n-        }\n+    public static DragGestureEvent createNullComponent(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureRecognizer dgr = new NothingNull();\n+        DragGestureEvent nullComponent = new DragGestureEvent(dgr, ACTION_COPY, ori, evs);\n+        setFieldToNull(DragGestureRecognizer.class, dgr, \"component\");\n+        setFieldToNull(DragGestureEvent.class, nullComponent, \"component\");\n+        return nullComponent;\n@@ -143,5 +135,7 @@\n-    public static final class NullComponent extends DragGestureRecognizer {\n-\n-        public NullComponent() {\n-            super(new DragSource(), null);\n-        }\n+    public static DragGestureEvent createNullDragSource(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureRecognizer dgr = new NothingNull();\n+        DragGestureEvent nullDragSource = new DragGestureEvent(dgr, ACTION_COPY, ori, evs);\n+        setFieldToNull(DragGestureRecognizer.class, dgr, \"dragSource\");\n+        setFieldToNull(DragGestureEvent.class, nullDragSource, \"dragSource\");\n+        return nullDragSource;\n+    }\n@@ -149,2 +143,5 @@\n-        protected void registerListeners() {\n-        }\n+    public static DragGestureEvent createNullOrigin(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureEvent nullOrigin = new DragGestureEvent(new NothingNull(), ACTION_COPY, ori, evs);\n+        setFieldToNull(DragGestureEvent.class, nullOrigin, \"origin\");\n+        return nullOrigin;\n+    }\n@@ -152,1 +149,7 @@\n-        protected void unregisterListeners() {\n+    public static void setFieldToNull(Class<?> clazz, Object instance, String fieldName) {\n+        try {\n+            Field field = clazz.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            field.set(instance, null);\n+        } catch (ReflectiveOperationException e) {\n+            throw new LinkageError(e.getMessage(), e);\n","filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/BadSerializationTest.java","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/badAction","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/good","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/noEvents","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/nullComponent","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/nullDragSource","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/nullOrigin","binary":true,"status":"deleted"}]}