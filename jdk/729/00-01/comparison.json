{"files":[{"patch":"@@ -535,70 +535,1 @@\n-\/\/\n-\/\/ The bits parameter returns information about the code path through\n-\/\/ the routine. Useful for debugging:\n-\/\/\n-\/\/ set in is_ext_suspend_completed():\n-\/\/ 0x00000001 - routine was entered\n-\/\/ 0x00000010 - routine return false at end\n-\/\/ 0x00000100 - thread exited (return false)\n-\/\/ 0x00000200 - suspend request cancelled (return false)\n-\/\/ 0x00000400 - thread suspended (return true)\n-\/\/ 0x00001000 - thread is in a suspend equivalent state (return true)\n-\/\/ 0x00002000 - thread is native and walkable (return true)\n-\/\/ 0x00004000 - thread is native_trans and walkable (needed retry)\n-\/\/\n-\/\/ set in wait_for_ext_suspend_completion():\n-\/\/ 0x00010000 - routine was entered\n-\/\/ 0x00020000 - suspend request cancelled before loop (return false)\n-\/\/ 0x00040000 - thread suspended before loop (return true)\n-\/\/ 0x00080000 - suspend request cancelled in loop (return false)\n-\/\/ 0x00100000 - thread suspended in loop (return true)\n-\/\/ 0x00200000 - suspend not completed during retry loop (return false)\n-\n-\/\/ Helper class for tracing suspend wait debug bits.\n-\/\/\n-\/\/ 0x00000100 indicates that the target thread exited before it could\n-\/\/ self-suspend which is not a wait failure. 0x00000200, 0x00020000 and\n-\/\/ 0x00080000 each indicate a cancelled suspend request so they don't\n-\/\/ count as wait failures either.\n-#define DEBUG_FALSE_BITS (0x00000010 | 0x00200000)\n-\n-class TraceSuspendDebugBits : public StackObj {\n- private:\n-  JavaThread* _jt;\n-  uint32_t*   _bits;\n-\n- public:\n-  TraceSuspendDebugBits(JavaThread *jt, uint32_t *bits) : _jt(jt), _bits(bits) {\n-  }\n-\n-  ~TraceSuspendDebugBits() {\n-#if 1\n-    \/\/ By default, don't trace bits for is_ext_suspend_completed() calls.\n-    \/\/ That trace is very chatty.\n-    return;\n-#else\n-    \/\/ If tracing for is_ext_suspend_completed() is enabled, then only\n-    \/\/ trace calls to it from wait_for_ext_suspend_completion()\n-    return;\n-#endif\n-\n-    if (AssertOnSuspendWaitFailure || TraceSuspendWaitFailures) {\n-      if (_bits != NULL && (*_bits & DEBUG_FALSE_BITS) != 0) {\n-        MutexLocker ml(Threads_lock);  \/\/ needed for get_thread_name()\n-        ResourceMark rm;\n-\n-        tty->print_cr(\n-                      \"Failed wait_for_ext_suspend_completion(thread=%s, debug_bits=%x)\",\n-                      _jt->get_thread_name(), *_bits);\n-\n-        guarantee(!AssertOnSuspendWaitFailure, \"external suspend wait failed\");\n-      }\n-    }\n-  }\n-};\n-#undef DEBUG_FALSE_BITS\n-\n-\n-bool JavaThread::is_ext_suspend_completed(int delay, uint32_t *bits) {\n-  TraceSuspendDebugBits tsdb(this, bits);\n-\n+bool JavaThread::is_ext_suspend_completed() {\n@@ -608,2 +539,0 @@\n-  *bits |= 0x00000001;\n-\n@@ -616,1 +545,0 @@\n-      *bits |= 0x00000100;\n@@ -624,1 +552,0 @@\n-      *bits |= 0x00000200;\n@@ -630,1 +557,0 @@\n-      *bits |= 0x00000400;\n@@ -658,1 +584,0 @@\n-      *bits |= 0x00001000;\n@@ -665,1 +590,0 @@\n-      *bits |= 0x00002000;\n@@ -684,2 +608,0 @@\n-      *bits |= 0x00004000;\n-\n@@ -705,1 +627,1 @@\n-          SR_lock()->wait(i * delay);\n+          SR_lock()->wait(i * SuspendRetryDelay);\n@@ -707,1 +629,1 @@\n-          SR_lock()->wait_without_safepoint_check(i * delay);\n+          SR_lock()->wait_without_safepoint_check(i * SuspendRetryDelay);\n@@ -718,2 +640,0 @@\n-\n-\n@@ -723,1 +643,0 @@\n-  *bits |= 0x00000010;\n@@ -2358,1 +2277,1 @@\n-    uint32_t debug_bits = 0;\n+\n@@ -2362,1 +2281,1 @@\n-    if (is_ext_suspend_completed(SuspendRetryDelay, &debug_bits)) {\n+    if (is_ext_suspend_completed()) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":86,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -1387,8 +1387,1 @@\n-  bool is_ext_suspend_completed(int delay, uint32_t *bits);\n-  bool is_ext_suspend_completed_with_lock(uint32_t *bits) {\n-    MutexLocker ml(SR_lock(), Mutex::_no_safepoint_check_flag);\n-    \/\/ Warning: is_ext_suspend_completed() may temporarily drop the\n-    \/\/ SR_lock to allow the thread to reach a stable thread state if\n-    \/\/ it is currently in a transient thread state.\n-    return is_ext_suspend_completed(SuspendRetryDelay, bits);\n-  }\n+  bool is_ext_suspend_completed();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}