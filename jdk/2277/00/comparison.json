{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -518,30 +518,0 @@\n-\/\/ This is a container class for either an oop* or a narrowOop*.\n-\/\/ Both are pushed onto a task queue and the consumer will test is_narrow()\n-\/\/ to determine which should be processed.\n-class StarTask {\n-  void*  _holder;        \/\/ either union oop* or narrowOop*\n-\n-  enum { COMPRESSED_OOP_MASK = 1 };\n-\n- public:\n-  StarTask(narrowOop* p) {\n-    assert(((uintptr_t)p & COMPRESSED_OOP_MASK) == 0, \"Information loss!\");\n-    _holder = (void *)((uintptr_t)p | COMPRESSED_OOP_MASK);\n-  }\n-  StarTask(oop* p)       {\n-    assert(((uintptr_t)p & COMPRESSED_OOP_MASK) == 0, \"Information loss!\");\n-    _holder = (void*)p;\n-  }\n-  StarTask()             { _holder = NULL; }\n-  \/\/ Trivially copyable, for use in GenericTaskQueue.\n-\n-  operator oop*()        { return (oop*)_holder; }\n-  operator narrowOop*()  {\n-    return (narrowOop*)((uintptr_t)_holder & ~COMPRESSED_OOP_MASK);\n-  }\n-\n-  bool is_narrow() const {\n-    return (((uintptr_t)_holder & COMPRESSED_OOP_MASK) != 0);\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":1,"deletions":31,"binary":false,"changes":32,"status":"modified"}]}