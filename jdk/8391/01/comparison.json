{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,26 @@\n-\/**\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Pageable;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Objects;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+\n+import static java.awt.EventQueue.invokeAndWait;\n+\n+\/*\n@@ -27,0 +52,2 @@\n+ * @library ..\/..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -28,1 +55,1 @@\n- * @run main\/manual=yesno\/timeout=900 ClippedImages\n+ * @run main\/manual ClippedImages\n@@ -31,9 +58,1 @@\n-import java.io.*;\n-import java.util.Objects;\n-import java.awt.*;\n-import java.awt.geom.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.awt.image.BufferedImage;\n-import javax.print.*;\n-import javax.print.attribute.*;\n+public class ClippedImages {\n@@ -41,1 +60,1 @@\n-public class ClippedImages extends Frame implements ActionListener {\n+    private static ClippedImageCanvas c;\n@@ -43,1 +62,2 @@\n-    private ClippedImageCanvas c;\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n@@ -45,1 +65,1 @@\n-    public static void main(String args[]) {\n+        if (PrinterJob.lookupPrintServices().length > 0) {\n@@ -47,2 +67,32 @@\n-        ClippedImages f = new ClippedImages();\n-        f.setVisible(true);\n+            String instruction = \"\"\"\n+                This is a manual test as it requires that you compare the\n+                on-screen rendering with the printed output.\n+\n+                Select the 'Print All' button to print out the test. It will\n+                generate 4 sides of content: as it will print each of 2 sets\n+                of transformed images in portrait, and landscape orientations.\n+\n+                The sets of images are in turn made up of two similar sets of\n+                pages: one is 'random' images, the other is 16 squares. Use the\n+                'Toggle Contents' button to view the screen rendering. For each\n+                page compare the printed content to the same on-screen one\n+                taking careful note of\n+                a) the positions of the red\/blue circles on the corners\n+                b) that numerical text on the image is displayed similarly\n+                e) that the green quadrilaterals match on-screen\n+                f) that the rendering is clipped at the default (typically 1 inch)\n+                margins of the page.\n+\n+                The test PASSES if the onscreen and printed rendering match\n+                \"\"\";\n+\n+            PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test \" +\n+                    \"Instruction\", instruction, 15);\n+            invokeAndWait(ClippedImages::createTestUI);\n+            passFailJFrame.awaitAndCheck();\n+\n+        } else {\n+            System.out.println(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+            PassFailJFrame.forcePass();\n+        }\n@@ -51,2 +101,2 @@\n-    public ClippedImages() {\n-        super(\"Clipped Src Area Image Printing Test\");\n+    public static void createTestUI() {\n+        Frame frame = new Frame(\"Clipped Src Area Image Printing Test\");\n@@ -54,1 +104,1 @@\n-        add(\"Center\", c);\n+        frame.add(c, BorderLayout.CENTER);\n@@ -57,1 +107,4 @@\n-        paintButton.addActionListener(this);\n+        paintButton.addActionListener((ae) -> {\n+            c.toggleContents();\n+            c.repaint();\n+        });\n@@ -60,1 +113,1 @@\n-        printThisButton.addActionListener(this);\n+        printThisButton.addActionListener((ae) -> printOne());\n@@ -63,1 +116,1 @@\n-        printAllButton.addActionListener(this);\n+        printAllButton.addActionListener((ae) -> printAll());\n@@ -69,10 +122,4 @@\n-        add(\"South\", p);\n-        add(\"North\", getInstructions());\n-        addWindowListener(new WindowAdapter() {\n-                public void windowClosing(WindowEvent e) {\n-                    System.exit(0);\n-                }\n-            });\n-\n-        pack();\n-    }\n+        frame.add(p, BorderLayout.SOUTH);\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n@@ -80,23 +127,2 @@\n-    private TextArea getInstructions() {\n-        TextArea ta = new TextArea(18, 60);\n-        ta.setFont(new Font(\"Dialog\", Font.PLAIN, 11));\n-        ta.setText\n-            (\"This is a manual test as it requires that you compare \"+\n-             \"the on-screen rendering with the printed output.\\n\"+\n-             \"Select the 'Print All' button to print out the test\\n\"+\n-             \"It will generate 4 sides of content: as it will print \"+\n-             \"each of 2 sets of transformed images in portrait, \\n\"+\n-             \"and landscape orientations. \\n\"+\n-             \"The sets of images are in turn made up\\n\"+\n-             \"of two similar sets of pages: one is 'random' images,\\n \"+\n-             \" the other is 16 squares.\\n\"+\n-             \"Use the 'Toggle Contents' button to view the screen rendering\\n\"+\n-             \"For each page compare the printed content to the same\\n\"+\n-             \"on-screen one taking careful note of\\n\"+\n-             \"a) the positions of the red\/blue circles on the corners\\n\"+\n-             \"b) that numerical text on the image is displayed similarly\\n\"+\n-             \"e) that the green quadrilaterals match on-screen\\n\"+\n-             \"f) that the rendering is clipped at the default (typically 1 inch) \"+\n-             \"margins of the page.\\n\"+\n-             \"The test PASSES if the onscreen and printed rendering match\");\n-        return ta;\n+        PassFailJFrame.addTestFrame(frame);\n+        PassFailJFrame.positionTestFrame(frame, PassFailJFrame.Position.HORIZONTAL);\n@@ -105,13 +131,1 @@\n-    public void actionPerformed(ActionEvent e) {\n-\n-        if (e.getActionCommand().equals(\"Print This\")) {\n-            printOne();\n-        } else if (e.getActionCommand().equals(\"Print All\")) {\n-            printAll();\n-        } else if (e.getActionCommand().equals(\"Toggle Contents\")) {\n-            c.toggleContents();\n-            c.repaint();\n-        }\n-    }\n-\n-    private void printOne() {\n+    private static void printOne() {\n@@ -119,1 +133,0 @@\n-\n@@ -121,3 +134,3 @@\n-        if (pj != null && (false||pj.printDialog(attrs))) {\n-            c.setPrinterJob(pj, false);\n-            pj.setPrintable(c);\n+        c.setPrinterJob(pj, false);\n+        pj.setPrintable(c);\n+        if (pj.printDialog(attrs)) {\n@@ -132,0 +145,3 @@\n+        } else {\n+            throw new RuntimeException(\"Test failed : \"\n+                    + \"User selected 'Cancel' button on the print dialog\");\n@@ -135,1 +151,1 @@\n-    private void printAll() {\n+    private static void printAll() {\n@@ -138,3 +154,3 @@\n-        if (pj != null && (false||pj.printDialog(attrs))) {\n-            c.setPrinterJob(pj, true);\n-            pj.setPageable(c);\n+        c.setPrinterJob(pj, true);\n+        pj.setPageable(c);\n+        if (pj.printDialog(attrs)) {\n@@ -149,0 +165,3 @@\n+        } else {\n+            throw new RuntimeException(\"Test failed : \"\n+                    + \"User selected 'Cancel' button on the print dialog\");\n@@ -171,1 +190,1 @@\n-                String s = (new Integer(++cnt)).toString();\n+                String s = String.valueOf(++cnt);\n@@ -199,1 +218,1 @@\n-        throws IndexOutOfBoundsException {\n+            throws IndexOutOfBoundsException {\n@@ -204,0 +223,3 @@\n+            case 0 :\n+                pf.setOrientation(PageFormat.PORTRAIT);\n+                break;\n@@ -205,7 +227,3 @@\n-        case 0 :\n-            pf.setOrientation(PageFormat.PORTRAIT);\n-            break;\n-\n-        case 1:\n-            pf.setOrientation(PageFormat.LANDSCAPE);\n-             break;\n+            case 1:\n+                pf.setOrientation(PageFormat.LANDSCAPE);\n+                break;\n@@ -225,1 +243,1 @@\n-        throws IndexOutOfBoundsException {\n+            throws IndexOutOfBoundsException {\n@@ -285,1 +303,1 @@\n-       for (int p=0;p<size.height;p+=20) {\n+        for (int p=0;p<size.height;p+=20) {\n@@ -371,1 +389,1 @@\n-         \/* sA + sD -> dA + dD - the normal untransformed case *\/\n+        \/* sA + sD -> dA + dD - the normal untransformed case *\/\n@@ -387,1 +405,0 @@\n-        \/******\/\n@@ -405,1 +422,0 @@\n-        \/******\/\n@@ -423,1 +439,0 @@\n-        \/******\/\n@@ -444,5 +459,5 @@\n-     \/* Size is chosen to match default imageable width of a NA letter\n-      * page. This means there will be clipping, what is clipped will\n-      * depend on PageFormat orientation.\n-      *\/\n-     public Dimension getPreferredSize() {\n+    \/* Size is chosen to match default imageable width of a NA letter\n+     * page. This means there will be clipping, what is clipped will\n+     * depend on PageFormat orientation.\n+     *\/\n+    public Dimension getPreferredSize() {\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ClippedImages.java","additions":112,"deletions":97,"binary":false,"changes":209,"status":"modified"}]}