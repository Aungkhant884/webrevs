{"files":[{"patch":"@@ -941,2 +941,0 @@\n-  \/\/ Note: Any modifications to following suppressed feature list for KNL target\n-  \/\/ should also be applied to test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+                    \"UseAVX\",\n+                    \"UseKNLSetting\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -283,24 +283,1 @@\n-        \/\/ Following feature list is in sync with suppressed feature list for KNL target.\n-        \/\/ Please refer vm_version_x86.cpp for details.\n-        HashSet<String> knlFeatureSet = new HashSet<>();\n-        knlFeatureSet.add(\"AVX512BW\");\n-        knlFeatureSet.add(\"AVX512VL\");\n-        knlFeatureSet.add(\"AVX512DQ\");\n-        knlFeatureSet.add(\"AVX512_VNNI\");\n-        knlFeatureSet.add(\"AVX512_VAES\");\n-        knlFeatureSet.add(\"AVX512_VPOPCNTDQ\");\n-        knlFeatureSet.add(\"AVX512_VPCLMULQDQ\");\n-        knlFeatureSet.add(\"AVX512_VBMI\");\n-        knlFeatureSet.add(\"AVX512_VBMI2\");\n-        knlFeatureSet.add(\"CLWB\");\n-        knlFeatureSet.add(\"FLUSHOPT\");\n-        knlFeatureSet.add(\"GFNI\");\n-        knlFeatureSet.add(\"AVX512_BITALG\");\n-        Boolean isKNLFlagEnabled = WHITE_BOX.getBooleanVMFlag(\"UseKNLSetting\");\n-        \/\/ Perform the feature check if UseKNLSetting flag is set to off or if\n-        \/\/ feature is supported by KNL target.\n-        if (isKNLFlagEnabled == null ||\n-             (isKNLFlagEnabled && (!knlFeatureSet.contains(feature.toUpperCase()) || falseValue))) {\n-            return (trueValue && cpuFeatures.contains(feature)) || (falseValue && !cpuFeatures.contains(feature));\n-        }\n-        return false;\n+        return (trueValue && cpuFeatures.contains(feature)) || (falseValue && !cpuFeatures.contains(feature));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.vectorapi;\n-\n-import compiler.lib.ir_framework.*;\n-import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n-\n-\/*\n- * @test 8287525\n- * @summary Extend IR annotation with new options to test specific target feature.\n- * @requires vm.cpu.features ~= \".*avx512f.*\"\n- * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n- * @library \/test\/lib \/\n- * @run driver compiler.vectorapi.TestCPUFeatureCheck\n- *\/\n-\n-public class TestCPUFeatureCheck {\n-    private static int a[] = new int[1000];\n-    private static int b[] = new int[1000];\n-    private static int res[] = new int[1000];\n-\n-    public static void setup() {\n-        for (int i = 0; i < 1000; i++) {\n-            a[i] = i;\n-            b[i] = i;\n-        }\n-    }\n-\n-    public static void main(String args[]) {\n-        setup();\n-        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                   \"-XX:UseAVX=3\",\n-                                   \"-XX:+UseKNLSetting\",\n-                                   \"-XX:CompileThresholdScaling=0.3\");\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeature = {\"avx512bw\", \"false\"})\n-    public static void test1() {\n-        for (int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if all the feature conditions holds good\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeatureAnd = {\"avx512bw\", \"false\", \"avx512f\", \"true\"})\n-    public static void test2() {\n-        for (int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-\n-    \/\/ IR rule is enforced if any of the feature condition holds good\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI,  \"> 0\"}, applyIfCPUFeatureOr = {\"avx512bw\", \"true\", \"avx512f\", \"true\"})\n-    public static void test3() {\n-        for (int i = 0; i < 1000; i++) {\n-            res[i] = a[i] + b[i];\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestCPUFeatureCheck.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n+\n+\/*\n+ * @test 8287525\n+ * @summary Extend IR annotation with new options to test specific target feature.\n+ * @requires vm.cpu.features ~= \".*avx512f.*\"\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.tests.TestCPUFeatureCheck\n+ *\/\n+\n+public class TestCPUFeatureCheck {\n+    private static final int SIZE = 1000;\n+    private static int a[] = new int[SIZE];\n+    private static int b[] = new int[SIZE];\n+    private static int res[] = new int[SIZE];\n+\n+    public static void setup() {\n+        for (int i = 0; i < SIZE; i++) {\n+            a[i] = i;\n+            b[i] = i;\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        setup();\n+        TestFramework.runWithFlags(\"-XX:+UseKNLSetting\");\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeature = {\"avx512bw\", \"false\"})\n+    public static void test1() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if all the feature conditions holds good\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\"}, applyIfCPUFeatureAnd = {\"avx512bw\", \"false\", \"avx512f\", \"true\"})\n+    public static void test2() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+\n+    \/\/ IR rule is enforced if any of the feature condition holds good\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI,  \"> 0\"}, applyIfCPUFeatureOr = {\"avx512bw\", \"true\", \"avx512f\", \"true\"})\n+    public static void test3() {\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = a[i] + b[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCPUFeatureCheck.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}