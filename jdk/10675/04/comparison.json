{"files":[{"patch":"@@ -728,2 +728,0 @@\n-  \/\/ Concurrent start needs claim bits to keep track of the marked-through CLDs.\n-  class CLDClearClaimedMarksTask;\n@@ -739,8 +737,0 @@\n-class G1PreConcurrentStartTask::CLDClearClaimedMarksTask : public G1AbstractSubTask {\n-public:\n-  CLDClearClaimedMarksTask() : G1AbstractSubTask(G1GCPhaseTimes::CLDClearClaimedMarks) { }\n-\n-  double worker_cost() const override { return 1.0; }\n-  void do_work(uint worker_id) override;\n-};\n-\n@@ -772,4 +762,0 @@\n-void G1PreConcurrentStartTask::CLDClearClaimedMarksTask::do_work(uint worker_id) {\n-  ClassLoaderDataGraph::clear_claimed_marks();\n-}\n-\n@@ -800,1 +786,0 @@\n-  add_serial_task(new CLDClearClaimedMarksTask());\n@@ -810,0 +795,2 @@\n+  ClassLoaderDataGraph::verify_claimed_marks_cleared(ClassLoaderData::_claim_strong);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-void G1ConcurrentMarkThread::phase_clear_cld_claimed_marks() {\n+bool G1ConcurrentMarkThread::phase_clear_cld_claimed_marks() {\n@@ -167,0 +167,1 @@\n+  return _cm->has_aborted();\n@@ -270,3 +271,0 @@\n-  \/\/ Phase 1: Clear CLD claimed marks.\n-  phase_clear_cld_claimed_marks();\n-\n@@ -290,1 +288,1 @@\n-  \/\/ Phase 2: Scan root regions.\n+  \/\/ Phase 1: Scan root regions.\n@@ -293,1 +291,1 @@\n-  \/\/ Phase 3: Actual mark loop.\n+  \/\/ Phase 2: Actual mark loop.\n@@ -296,1 +294,1 @@\n-  \/\/ Phase 4: Rebuild remembered sets and scrub dead objects.\n+  \/\/ Phase 3: Rebuild remembered sets and scrub dead objects.\n@@ -299,1 +297,1 @@\n-  \/\/ Phase 5: Wait for Cleanup.\n+  \/\/ Phase 4: Wait for Cleanup.\n@@ -302,1 +300,1 @@\n-  \/\/ Phase 6: Cleanup pause\n+  \/\/ Phase 5: Cleanup pause\n@@ -305,0 +303,3 @@\n+  \/\/ Phase 6: Clear CLD claimed marks.\n+  if (phase_clear_cld_claimed_marks()) return;\n+\n@@ -319,1 +320,4 @@\n-  \/\/ Phase 1: Clear bitmap for next mark.\n+  \/\/ Phase 1: Clear CLD claimed marks.\n+  if (phase_clear_cld_claimed_marks()) return;\n+\n+  \/\/ Phase 2: Clear bitmap for next mark.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -58,4 +58,2 @@\n-  \/\/ All these methods return true if the marking should be aborted. Except\n-  \/\/ phase_clear_cld_claimed_marks() because we must not abort before\n-  \/\/ scanning the root regions because of a potential deadlock otherwise.\n-  void phase_clear_cld_claimed_marks();\n+  \/\/ All these methods return true if the marking should be aborted.\n+  bool phase_clear_cld_claimed_marks();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -183,0 +184,4 @@\n+    \/\/ Need cleared claim bits for the mark phase.\n+    ClassLoaderDataGraph::clear_claimed_marks();\n+  } else {\n+    ClassLoaderDataGraph::verify_claimed_marks_cleared(ClassLoaderData::_claim_strong);\n@@ -225,0 +230,3 @@\n+  \/\/ Need cleared claim bits for the next concurrent marking.\n+  ClassLoaderDataGraph::clear_claimed_marks();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -40,2 +39,0 @@\n-  \/\/ Need cleared claim bits for the roots processing\n-  ClassLoaderDataGraph::clear_claimed_marks();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -162,1 +162,0 @@\n-  _gc_par_phases[CLDClearClaimedMarks] = new WorkerDataArray<double>(\"CLDClearClaimedMarks\", \"Clear Claimed Marks (ms):\", max_gc_threads);\n@@ -387,2 +386,1 @@\n-  const double pre_concurrent_start_ms = average_time_ms(CLDClearClaimedMarks) +\n-                                         average_time_ms(ResetMarkingState) +\n+  const double pre_concurrent_start_ms = average_time_ms(ResetMarkingState) +\n@@ -413,1 +411,0 @@\n-    debug_phase(_gc_par_phases[CLDClearClaimedMarks]);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-    CLDClearClaimedMarks,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -303,1 +303,0 @@\n-        new LogMessageWithLevel(\"Clear Claimed Marks\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-            \"CLDClearClaimedMarks\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}