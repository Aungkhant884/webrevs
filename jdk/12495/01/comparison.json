{"files":[{"patch":"@@ -194,1 +194,5 @@\n-\/\/ Placeholder methods\n+void PlaceholderEntry::set_supername(Symbol* supername) {\n+  assert_locked_or_safepoint(SystemDictionary_lock);\n+  assert(_supername == nullptr || _supername->refcount() > 1, \"must be referenced also by the loader\");\n+  _supername = supername;\n+}\n@@ -275,1 +279,0 @@\n-\/\/ placeholder existence now for loading superclass\/superinterface\n@@ -286,1 +289,0 @@\n-\/\/ Ignores the case where entry is not found\n@@ -292,9 +294,10 @@\n-  if (probe != nullptr) {\n-    log(name, probe, \"find_and_remove\", action);\n-    probe->remove_seen_thread(thread, action);\n-    \/\/ If no other threads using this entry, and this thread is not using this entry for other states\n-    if ((probe->superThreadQ() == nullptr) && (probe->loadInstanceThreadQ() == nullptr)\n-        && (probe->defineThreadQ() == nullptr) && (probe->definer() == nullptr)) {\n-      probe->clear_supername();\n-      remove_entry(name, loader_data);\n-    }\n+  assert(probe != nullptr, \"must find an entry\");\n+  log(name, probe, \"find_and_remove\", action);\n+  probe->remove_seen_thread(thread, action);\n+  if (probe->superThreadQ() == nullptr) {\n+    probe->set_supername(nullptr);\n+  }\n+  \/\/ If no other threads using this entry, and this thread is not using this entry for other states\n+  if ((probe->superThreadQ() == nullptr) && (probe->loadInstanceThreadQ() == nullptr)\n+      && (probe->defineThreadQ() == nullptr) && (probe->definer() == nullptr)) {\n+    remove_entry(name, loader_data);\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"oops\/symbol.hpp\"\n+#include \"oops\/symbolHandle.hpp\"\n@@ -84,1 +84,1 @@\n-  Symbol*           _supername;\n+  SymbolHandle      _supername;\n@@ -102,0 +102,8 @@\n+  SeenThread*        superThreadQ()        const { return _superThreadQ; }\n+  void               set_superThreadQ(SeenThread* SeenThread) { _superThreadQ = SeenThread; }\n+\n+  SeenThread*        loadInstanceThreadQ() const { return _loadInstanceThreadQ; }\n+  void               set_loadInstanceThreadQ(SeenThread* SeenThread) { _loadInstanceThreadQ = SeenThread; }\n+\n+  SeenThread*        defineThreadQ()       const { return _defineThreadQ; }\n+  void               set_defineThreadQ(SeenThread* SeenThread) { _defineThreadQ = SeenThread; }\n@@ -104,1 +112,1 @@\n-     _supername(nullptr), _definer(nullptr), _instanceKlass(nullptr),\n+     _definer(nullptr), _instanceKlass(nullptr),\n@@ -108,11 +116,1 @@\n-  void               set_supername(Symbol* supername) {\n-    if (supername != _supername) {\n-      Symbol::maybe_decrement_refcount(_supername);\n-      _supername = supername;\n-      Symbol::maybe_increment_refcount(_supername);\n-    }\n-  }\n-  void               clear_supername() {\n-    Symbol::maybe_decrement_refcount(_supername);\n-    _supername = nullptr;\n-  }\n+  void               set_supername(Symbol* supername);\n@@ -126,9 +124,0 @@\n-  SeenThread*        superThreadQ()        const { return _superThreadQ; }\n-  void               set_superThreadQ(SeenThread* SeenThread) { _superThreadQ = SeenThread; }\n-\n-  SeenThread*        loadInstanceThreadQ() const { return _loadInstanceThreadQ; }\n-  void               set_loadInstanceThreadQ(SeenThread* SeenThread) { _loadInstanceThreadQ = SeenThread; }\n-\n-  SeenThread*        defineThreadQ()       const { return _defineThreadQ; }\n-  void               set_defineThreadQ(SeenThread* SeenThread) { _defineThreadQ = SeenThread; }\n-\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-      assert(s != nullptr, \"must not be null\");\n-      s->increment_refcount();\n+      Symbol::maybe_increment_refcount(_temp);\n","filename":"src\/hotspot\/share\/oops\/symbolHandle.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    ASSERT_EQ(interf->refcount(), 3) << \"supername isn't replaced until super set\";\n+    ASSERT_EQ(interf->refcount(), 1) << \"supername is replaced with null\";\n@@ -72,2 +72,0 @@\n-    ASSERT_EQ(interf->refcount(), 1) << \"now should be one\";\n-\n","filename":"test\/hotspot\/gtest\/classfile\/test_placeholders.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}