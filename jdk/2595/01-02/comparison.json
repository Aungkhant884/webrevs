{"files":[{"patch":"@@ -3606,1 +3606,1 @@\n-  bool     need_zero_extend = false;\n+  bool     need_zero_extend = base != 0;\n@@ -3629,1 +3629,0 @@\n-    need_zero_extend = true;\n@@ -3660,5 +3659,9 @@\n-      \/\/ To begin with, we may need to copy and\/or zero-extend the register operand.\n-      \/\/ We have to calculate (current_l - base_l). Because there is no unsigend\n-      \/\/ subtract instruction with immediate operand, we add the 2's complement of base_l.\n-      if (need_zero_extend) {\n-        z_llgfr(dst, current);\n+      if ((base_h == 0) && is_uimm(base_l, 31)) {\n+        \/\/ If we happen to find that (base_h == 0), and that base_l is within the range\n+        \/\/ which can be represented by a signed int, then we can use 64bit signed add with\n+        \/\/ (-base_l) as 32bit signed immediate operand. The add will take care of the\n+        \/\/ upper 32 bits of the result, saving us the need of an extra zero extension.\n+        \/\/ For base_l to be in the required range, it must not have the most significant\n+        \/\/ bit (aka sign bit) set.\n+        lgr_if_needed(dst, current); \/\/ no zero\/sign extension in this case!\n+        z_agfi(dst, -(int)base_l);   \/\/ base_l must be passed as signed.\n@@ -3666,0 +3669,1 @@\n+        current = dst;\n@@ -3667,1 +3671,11 @@\n-        llgfr_if_needed(dst, current); \/\/ zero-extension while copying comes at no extra cost.\n+        \/\/ To begin with, we may need to copy and\/or zero-extend the register operand.\n+        \/\/ We have to calculate (current_l - base_l). Because there is no unsigend\n+        \/\/ subtract instruction with immediate operand, we add the 2's complement of base_l.\n+        if (need_zero_extend) {\n+          z_llgfr(dst, current);\n+          need_zero_extend = false;\n+        } else {\n+          llgfr_if_needed(dst, current);\n+        }\n+        current = dst;\n+        z_alfi(dst, -base_l);\n@@ -3669,2 +3683,0 @@\n-      current = dst;\n-      z_alfi(dst, -(int)base_l);\n@@ -3672,1 +3684,1 @@\n-  } \/\/ base nonzero\n+  }\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"}]}