{"files":[{"patch":"@@ -1340,0 +1340,2 @@\n+            \/\/ we should do this only once\n+            boolean copyConstAnnos = constructorSymbol == null;\n@@ -1343,0 +1345,6 @@\n+\n+            ListBuffer<Attribute.Compound> paramAttrs;\n+            if (copyConstAnnos) {\n+                csym.appendAttributes(constr.getRawAttributes());\n+            }\n+\n@@ -1351,1 +1359,3 @@\n-                    params.add(new VarSymbol(PARAMETER | p.flags(), p.name, argtypes.head, csym));\n+                    VarSymbol param = new VarSymbol(PARAMETER | p.flags(), p.name, argtypes.head, csym);\n+                    param.appendAttributes(p.getRawAttributes());\n+                    params.add(param);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274617\n+ * @summary constructor and parameter annotations are not copied to the anonymous class constructor\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @run main AnnosNotCopiedToAnonymousCtrTest\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+import java.io.BufferedInputStream;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.javac.util.Assert;\n+\n+public class AnnosNotCopiedToAnonymousCtrTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+        new AnnosNotCopiedToAnonymousCtrTest().run();\n+    }\n+\n+    void run() throws Throwable {\n+        checkClassFile(Paths.get(System.getProperty(\"test.classes\"),\n+                this.getClass().getSimpleName() + \"$Test$1.class\"));\n+    }\n+\n+    record AnnoData(String attributeName, String annoName, int positionOfAnnotatedParam) {}\n+\n+    void checkClassFile(final Path cfilePath) throws Throwable {\n+        ClassFile classFile = ClassFile.read(\n+                new BufferedInputStream(Files.newInputStream(cfilePath)));\n+        for (Method method : classFile.methods) {\n+            if (method.getName(classFile.constant_pool).equals(\"<init>\")) {\n+                checkForAttr(classFile,\n+                        method.attributes,\n+                        \"Annotations hasn't been propagated\",\n+                        new AnnoData(Attribute.RuntimeVisibleAnnotations, \"LAnnosNotCopiedToAnonymousCtrTest$VisibleCtrAnnotation;\", -1),\n+                        new AnnoData(Attribute.RuntimeInvisibleAnnotations, \"LAnnosNotCopiedToAnonymousCtrTest$InvisibleCtrAnnotation;\", -1),\n+                        new AnnoData(Attribute.RuntimeVisibleParameterAnnotations, \"LAnnosNotCopiedToAnonymousCtrTest$VisibleParamAnnotation;\", 1),\n+                        new AnnoData(Attribute.RuntimeInvisibleParameterAnnotations, \"LAnnosNotCopiedToAnonymousCtrTest$InvisibleParamAnnotation;\", 2) );\n+            }\n+        }\n+    }\n+\n+    void checkForAttr(ClassFile classFile, Attributes attrs, String errorMsg, AnnoData... attrAndParamPos)\n+            throws Throwable {\n+        for (AnnoData attrAndPos : attrAndParamPos) {\n+            Assert.checkNonNull(attrs.get(attrAndPos.attributeName()), errorMsg);\n+            boolean isParamAnno = attrs.get(attrAndPos.attributeName()) instanceof RuntimeParameterAnnotations_attribute;\n+            if (isParamAnno) {\n+                RuntimeParameterAnnotations_attribute paramAnnotation =\n+                        (RuntimeParameterAnnotations_attribute)attrs.get(attrAndPos.attributeName());\n+                for (int i = 0; i < paramAnnotation.parameter_annotations.length; i++) {\n+                    Annotation[] annos = paramAnnotation.parameter_annotations[i];\n+                    if (i != attrAndPos.positionOfAnnotatedParam()) {\n+                        Assert.check(annos.length == 0);\n+                    } else {\n+                        Assert.check(annos.length == 1);\n+                        Assert.check(classFile.constant_pool.getUTF8Value(annos[0].type_index).equals(attrAndPos.annoName()));\n+                    }\n+                }\n+            } else {\n+                RuntimeAnnotations_attribute ctrAnnotation = (RuntimeAnnotations_attribute)attrs.get(attrAndPos.attributeName());\n+                Assert.check(ctrAnnotation.annotations.length == 1);\n+                Assert.check(classFile.constant_pool.getUTF8Value(ctrAnnotation.annotations[0].type_index).equals(attrAndPos.annoName()));\n+            }\n+        }\n+    }\n+\n+    @Target(value = {ElementType.PARAMETER})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface VisibleParamAnnotation {}\n+\n+    @Target(value = {ElementType.PARAMETER})\n+    @interface InvisibleParamAnnotation {}\n+\n+    @Target(value = {ElementType.CONSTRUCTOR})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface VisibleCtrAnnotation {}\n+\n+    @Target(value = {ElementType.CONSTRUCTOR})\n+    @interface InvisibleCtrAnnotation {}\n+\n+    public class Test {\n+        @VisibleCtrAnnotation\n+        @InvisibleCtrAnnotation\n+        public Test(String firstParam, @VisibleParamAnnotation String secondParam, @InvisibleParamAnnotation String thirdParam) {}\n+\n+        public void m() {\n+            \/\/ let's create an anonymous inner class\n+            new Test(\"\", \"\", \"\") {};\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annos_not_copied_anonymous_ctr\/AnnosNotCopiedToAnonymousCtrTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -98,0 +98,1 @@\n+                                \"java.base\/jdk.internal.vm.annotation\",\n","filename":"test\/langtools\/tools\/jdeps\/listdeps\/ListModuleDeps.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}