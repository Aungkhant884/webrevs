{"files":[{"patch":"@@ -1314,3 +1314,0 @@\n-  notproduct(ccstrlist, SuppressErrorAt, \"\",                                \\\n-          \"List of assertions (file:line) to muzzle\")                       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -485,2 +485,1 @@\n-  \/\/ Disable this assert when testing the analyzer with fastdebug.\n-  \/\/ -XX:SuppressErrorAt=vframe.cpp:XXX (XXX=following line number)\n+  \/\/ Disable this when testing the analyzer with fastdebug.\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,105 +134,0 @@\n-#ifndef PRODUCT\n-\n-#define is_token_break(ch) (isspace(ch) || (ch) == ',')\n-\n-static const char* last_file_name = nullptr;\n-static int         last_line_no   = -1;\n-\n-\/\/ assert\/guarantee\/... may happen very early during VM initialization.\n-\/\/ Don't rely on anything that is initialized by Threads::create_vm(). For\n-\/\/ example, don't use tty.\n-bool error_is_suppressed(const char* file_name, int line_no) {\n-  \/\/ The following 1-element cache requires that passed-in\n-  \/\/ file names are always only constant literals.\n-  if (file_name == last_file_name && line_no == last_line_no)  return true;\n-\n-  int file_name_len = (int)strlen(file_name);\n-  char separator = os::file_separator()[0];\n-  const char* base_name = strrchr(file_name, separator);\n-  if (base_name == nullptr)\n-    base_name = file_name;\n-\n-  \/\/ scan the SuppressErrorAt option\n-  const char* cp = SuppressErrorAt;\n-  for (;;) {\n-    const char* sfile;\n-    int sfile_len;\n-    int sline;\n-    bool noisy;\n-    while ((*cp) != '\\0' && is_token_break(*cp))  cp++;\n-    if ((*cp) == '\\0')  break;\n-    sfile = cp;\n-    while ((*cp) != '\\0' && !is_token_break(*cp) && (*cp) != ':')  cp++;\n-    sfile_len = cp - sfile;\n-    if ((*cp) == ':')  cp++;\n-    sline = 0;\n-    while ((*cp) != '\\0' && isdigit(*cp)) {\n-      sline *= 10;\n-      sline += (*cp) - '0';\n-      cp++;\n-    }\n-    \/\/ \"file:line!\" means the assert suppression is not silent\n-    noisy = ((*cp) == '!');\n-    while ((*cp) != '\\0' && !is_token_break(*cp))  cp++;\n-    \/\/ match the line\n-    if (sline != 0) {\n-      if (sline != line_no)  continue;\n-    }\n-    \/\/ match the file\n-    if (sfile_len > 0) {\n-      const char* look = file_name;\n-      const char* look_max = file_name + file_name_len - sfile_len;\n-      const char* foundp;\n-      bool match = false;\n-      while (!match\n-             && (foundp = strchr(look, sfile[0])) != nullptr\n-             && foundp <= look_max) {\n-        match = true;\n-        for (int i = 1; i < sfile_len; i++) {\n-          if (sfile[i] != foundp[i]) {\n-            match = false;\n-            break;\n-          }\n-        }\n-        look = foundp + 1;\n-      }\n-      if (!match)  continue;\n-    }\n-    \/\/ got a match!\n-    if (noisy) {\n-      fdStream out(defaultStream::output_fd());\n-      out.print_raw(\"[error suppressed at \");\n-      out.print_raw(base_name);\n-      char buf[16];\n-      jio_snprintf(buf, sizeof(buf), \":%d]\", line_no);\n-      out.print_raw_cr(buf);\n-    } else {\n-      \/\/ update 1-element cache for fast silent matches\n-      last_file_name = file_name;\n-      last_line_no   = line_no;\n-    }\n-    return true;\n-  }\n-\n-  if (!VMError::is_error_reported() && !SuppressFatalErrorMessage) {\n-    \/\/ print a friendly hint:\n-    fdStream out(defaultStream::output_fd());\n-    out.print_raw_cr(\"# To suppress the following error report, specify this argument\");\n-    out.print_raw   (\"# after -XX: or in .hotspotrc:  SuppressErrorAt=\");\n-    out.print_raw   (base_name);\n-    char buf[16];\n-    jio_snprintf(buf, sizeof(buf), \":%d\", line_no);\n-    out.print_raw_cr(buf);\n-  }\n-  return false;\n-}\n-\n-#undef is_token_break\n-\n-#else\n-\n-\/\/ Place-holder for non-existent suppression check:\n-#define error_is_suppressed(file_name, line_no) (false)\n-\n-#endif \/\/ !PRODUCT\n-\n@@ -274,1 +169,1 @@\n-  if (Debugging || error_is_suppressed(file, line)) return;\n+  if (Debugging) return;\n@@ -296,1 +191,1 @@\n-  if (Debugging || error_is_suppressed(file, line)) return;\n+  if (Debugging) return;\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":107,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-        boolean suppress_assert,\n@@ -56,1 +55,1 @@\n-        System.out.println(\"Testing \" + (suppress_assert ? \"suppressed\" : \"normal\") + \" \" + (do_assert ? \"assert\" : \"guarantee\") +\n+        System.out.println(\"Testing \" + (do_assert ? \"assert\" : \"guarantee\") +\n@@ -61,1 +60,0 @@\n-            (suppress_assert ? \"-XX:SuppressErrorAt=\/vmError.cpp\" : \"\"),\n@@ -67,9 +65,4 @@\n-        if (suppress_assert) {\n-            \/\/ we should have not have crashed. See VMError::controlled_crash().\n-            output_detail.shouldMatch(\".*survived intentional crash.*\");\n-        } else {\n-            \/\/ we should have crashed with an internal error. We should definitly NOT have crashed with a segfault\n-            \/\/ (which would be a sign that the assert poison page mechanism does not work).\n-            output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n-            output_detail.shouldMatch(\"# +Internal Error.*\");\n-        }\n+        \/\/ we should have crashed with an internal error. We should definitly NOT have crashed with a segfault\n+        \/\/ (which would be a sign that the assert poison page mechanism does not work).\n+        output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+        output_detail.shouldMatch(\"# +Internal Error.*\");\n@@ -82,8 +75,4 @@\n-        do_test(false, false, false);\n-        do_test(false, false, true);\n-        do_test(false, true, false);\n-        do_test(false, true, true);\n-        do_test(true, false, false);\n-        do_test(true, false, true);\n-        do_test(true, true, false);\n-        do_test(true, true, true);\n+        do_test(false, false);\n+        do_test(false, true);\n+        do_test(true, false);\n+        do_test(true, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ShowRegistersOnAssertTest.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,3 +67,0 @@\n-           # To suppress the following error report, specify this argument\n-           # after -XX: or in .hotspotrc:  SuppressErrorAt=\/debug.cpp:303\n-           #\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestCrashOnOutOfMemoryError.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,45 +43,0 @@\n- * COMMENTS\n- * Below assertion is revealed on engineer's build. It is needed to check\n- * on a promoted build.\n- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- * Started at: Fri Apr 25 15:47:13 NSK 2003\n- * waiting for all threads started ...\n- * >>> snapshot 1\n- *         checking strace003Thread0(trace elements: 2)\n- *         checking strace003Thread1(trace elements: 2)\n- *         checking strace003Thread2(trace elements: 3)\n- *         checking strace003Thread3(trace elements: 2)\n- *         checking strace003Thread4(trace elements: 2)\n- *         checking strace003Thread5(trace elements: 2)\n- *         checking strace003Thread6(trace elements: 3)\n- *         checking strace003Thread7(trace elements: 2)\n- * # To suppress the following error report, specify this argument\n- * # after -XX: or in .hotspotrc:  SuppressErrorAt=\/jniHandles.hpp:157\n- * #\n- * # HotSpot Virtual Machine Error, assertion failure\n- * # Please report this error at\n- * # http:\/\/java.sun.com\/cgi-bin\/bugreport.cgi\n- * #\n- * # Java VM: Java HotSpot(TM) Client VM (1.4.1-internal-debug mixed mode)\n- * #\n- * # assert(result != ((oop)::badJNIHandleVal), \"Pointing to zapped jni handle area\")\n- * #\n- * # Error ID: src\/share\/vm\/runtime\/jniHandles.hpp, 157 [ Patched ]\n- * #\n- * # Problematic Thread: prio=5 tid=0x001b99e8 nid=0xbf runnable\n- * #\n- * Heap at VM Abort:\n- * Heap\n- *  def new generation   total 2112K, used 300K [0xf1800000, 0xf1a20000, 0xf1f10000)\n- *   eden space 2048K,  14% used [0xf1800000, 0xf184b358, 0xf1a00000)\n- *   from space 64K,   0% used [0xf1a00000, 0xf1a00000, 0xf1a10000)\n- *   to   space 64K,   0% used [0xf1a10000, 0xf1a10000, 0xf1a20000)\n- *  tenured generation   total 1408K, used 0K [0xf1f10000, 0xf2070000, 0xf5800000)\n- *    the space 1408K,   0% used [0xf1f10000, 0xf1f10000, 0xf1f10200, 0xf2070000)\n- *  compacting perm gen  total 4096K, used 1024K [0xf5800000, 0xf5c00000, 0xf9800000)\n- *    the space 4096K,  25% used [0xf5800000, 0xf5900240, 0xf5900400, 0xf5c00000)\n- * Dumping core....\n- * Abort\n- * Finished at: Fri Apr 25 15:48:10 NSK 2003\n- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- *\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace003.java","additions":1,"deletions":46,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,37 +43,0 @@\n- * COMMENTS\n- * java.lang.Thread.getAllStackTraces() is too slow method. So it is not successed\n- * to catch an alive thread during execution of this method for the first snapshot\n- * and it is needed to check on a promoted build due to the below assertion.\n- * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- * waiting for all threads started ...\n- * >>> snapshot 1\n- * waiting for threads finished\n- * # To suppress the following error report, specify this argument\n- * # after -XX: or in .hotspotrc:  SuppressErrorAt=\/jniHandles.hpp:157\n- * #\n- * # HotSpot Virtual Machine Error, assertion failure\n- * # Please report this error at\n- * # http:\/\/java.sun.com\/cgi-bin\/bugreport.cgi\n- * #\n- * # Java VM: Java HotSpot(TM) Client VM (1.4.1-internal-debug mixed mode)\n- * #\n- * # assert(result != ((oop)::badJNIHandleVal), \"Pointing to zapped jni handle area\")\n- * #\n- * # Error ID: src\/share\/vm\/runtime\/jniHandles.hpp, 157 [ Patched ]\n- * #\n- * # Problematic Thread: prio=5 tid=0x001976e0 nid=0x96 runnable\n- * #\n- * Heap at VM Abort:\n- * Heap\n- *  def new generation   total 2112K, used 455K [0xf1800000, 0xf1a20000, 0xf1f10000)\n- *   eden space 2048K,  22% used [0xf1800000, 0xf1871f60, 0xf1a00000)\n- *   from space 64K,   0% used [0xf1a00000, 0xf1a00000, 0xf1a10000)\n- *   to   space 64K,   0% used [0xf1a10000, 0xf1a10000, 0xf1a20000)\n- *  tenured generation   total 1408K, used 0K [0xf1f10000, 0xf2070000, 0xf5800000)\n- *    the space 1408K,   0% used [0xf1f10000, 0xf1f10000, 0xf1f10200, 0xf2070000)\n- *  compacting perm gen  total 4096K, used 1025K [0xf5800000, 0xf5c00000, 0xf9800000)\n- *    the space 4096K,  25% used [0xf5800000, 0xf5900660, 0xf5900800, 0xf5c00000)\n- * Dumping core....\n- * Abort\n- * Finished at: Fri Apr 25 18:01:37 NSK 2003\n- *\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace004.java","additions":1,"deletions":38,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    private static final String FLAG_DEBUG_NAME = \"SuppressErrorAt\";\n+    private static final String FLAG_DEBUG_NAME = \"ExitOnFullCodeCache\";\n@@ -46,1 +46,1 @@\n-        VmFlagTest.runTest(FLAG_DEBUG_NAME, VmFlagTest.WHITE_BOX::getStringVMFlag);\n+        VmFlagTest.runTest(FLAG_DEBUG_NAME, VmFlagTest.WHITE_BOX::getBooleanVMFlag);\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/StringTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}