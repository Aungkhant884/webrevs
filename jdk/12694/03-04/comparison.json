{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    URI uri;\n+    URI warmupURI, testHandlerBasicURI, testHandlerCloseBosURI, testHandleNegativeContentLengthURI;\n@@ -68,1 +68,4 @@\n-        http2TestServer.addHandler(new TestHandler(), \"\/\");\n+        http2TestServer.addHandler(new WarmupHandler(), \"\/Warmup\");\n+        http2TestServer.addHandler(new TestHandlerBasic(), \"\/TestHandlerBasic\");\n+        http2TestServer.addHandler(new TestHandlerCloseBos(), \"\/TestHandlerCloseBos\");\n+        http2TestServer.addHandler(new TestHandleNegativeContentLength(), \"\/TestHandleNegativeContentLength\");\n@@ -70,2 +73,9 @@\n-        uri = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/\");\n-        testLog.println(\"PostPutTest.setup(): Test Server URI: \" + uri);\n+        testLog.println(\"PostPutTest.setup(): Starting server\");\n+        warmupURI = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/Warmup\");\n+        testHandlerBasicURI = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/TestHandlerBasic\");\n+        testHandlerCloseBosURI = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/TestHandlerCloseBos\");\n+        testHandleNegativeContentLengthURI = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/TestHandleNegativeContentLength\");\n+        testLog.println(\"PostPutTest.setup(): warmupURI: \" + warmupURI);\n+        testLog.println(\"PostPutTest.setup(): testHandlerBasicURI: \" + testHandlerBasicURI);\n+        testLog.println(\"PostPutTest.setup(): testHandlerCloseBosURI: \" + testHandlerCloseBosURI);\n+        testLog.println(\"PostPutTest.setup(): testHandleNegativeContentLengthURI: \" + testHandleNegativeContentLengthURI);\n@@ -83,2 +93,9 @@\n-        HttpRequest over64kPost = HttpRequest.newBuilder().version(HTTP_2).POST(ofByteArray(data)).uri(uri).build();\n-        HttpRequest over64kPut = HttpRequest.newBuilder().version(HTTP_2).PUT(ofByteArray(data)).uri(uri).build();\n+        HttpRequest over64kPost, over64kPut, over64kPostCloseBos, over64kPutCloseBos, over64kPostNegativeContentLength, over64kPutNegativeContentLength;\n+        over64kPost = HttpRequest.newBuilder().version(HTTP_2).POST(ofByteArray(data)).uri(testHandlerBasicURI).build();\n+        over64kPut = HttpRequest.newBuilder().version(HTTP_2).PUT(ofByteArray(data)).uri(testHandlerBasicURI).build();\n+\n+        over64kPostCloseBos = HttpRequest.newBuilder().version(HTTP_2).POST(ofByteArray(data)).uri(testHandlerCloseBosURI).build();\n+        over64kPutCloseBos = HttpRequest.newBuilder().version(HTTP_2).PUT(ofByteArray(data)).uri(testHandlerCloseBosURI).build();\n+\n+        over64kPostNegativeContentLength = HttpRequest.newBuilder().version(HTTP_2).POST(ofByteArray(data)).uri(testHandleNegativeContentLengthURI).build();\n+        over64kPutNegativeContentLength = HttpRequest.newBuilder().version(HTTP_2).PUT(ofByteArray(data)).uri(testHandleNegativeContentLengthURI).build();\n@@ -88,1 +105,5 @@\n-                { over64kPut, \"PUT data over 64k bytes\" }\n+                { over64kPut, \"PUT data over 64k bytes\" },\n+                { over64kPostCloseBos, \"POST data over 64k bytes with close bos\" },\n+                { over64kPutCloseBos, \"PUT data over 64k bytes with close bos\" },\n+                { over64kPostNegativeContentLength, \"POST data over 64k bytes with negative content length\" },\n+                { over64kPutNegativeContentLength, \"PUT data over 64k bytes with negative content length\" }\n@@ -95,1 +116,1 @@\n-                .uri(uri)\n+                .uri(warmupURI)\n@@ -114,1 +135,1 @@\n-    private static class TestHandler implements Http2Handler {\n+    private static class TestHandlerBasic implements Http2Handler {\n@@ -123,0 +144,27 @@\n+\n+    private static class TestHandlerCloseBos implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            \/\/ This case does actually cause the test to hang due to the body input stream being closed before it can send\n+            \/\/ the RST_STREAM frame.\n+            exchange.sendResponseHeaders(200, 0);\n+            exchange.getResponseBody().close();\n+        }\n+    }\n+\n+    private static class TestHandleNegativeContentLength implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(200, -1);\n+        }\n+    }\n+\n+    private static class WarmupHandler implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(200, 0);\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/PostPutTest.java","additions":57,"deletions":9,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    volatile boolean sendResetNoError;\n+    volatile BodyInputStream bis;\n@@ -137,2 +137,2 @@\n-            if (sendResetNoError) {\n-                sendReset(EMPTY_BARRAY, 0, 0, resetErrorCode);\n+            if (resetNeeded()) {\n+                sendReset(EMPTY_BARRAY, 0, 0, ResetFrame.NO_ERROR);\n@@ -141,1 +141,0 @@\n-            System.err.println(\"TestServer: OutputStream.close exception: \" + ex);\n@@ -159,4 +158,2 @@\n-    \/\/ Called before close() when used\n-    public void sendResetOnClose(int error) {\n-        this.sendResetNoError = true;\n-        this.resetErrorCode = error;\n+    private boolean resetNeeded() throws IOException {\n+        return (bis != null && (!bis.isEof() || bis.q.size() > 0));\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/BodyOutputStream.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.net.http.frame.ResetFrame;\n@@ -152,0 +153,2 @@\n+            conn.outputQ.put(response);\n+            conn.outputQ.put(new ResetFrame(streamid, ResetFrame.NO_ERROR));\n@@ -153,0 +156,2 @@\n+        } else {\n+            conn.outputQ.put(response);\n@@ -154,1 +159,0 @@\n-        conn.outputQ.put(response);\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestExchangeImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -721,0 +721,5 @@\n+\n+            \/\/ Need to pass the BodyInputStream reference to the BodyOutputStream, so it can determine if the stream\n+            \/\/ must be reset due to the BodyInputStream not being consumed by the handler when invoked.\n+            if (bis instanceof BodyInputStream bodyInputStream) bos.bis = bodyInputStream;\n+\n@@ -732,7 +737,0 @@\n-            } finally {\n-                \/\/ If the handler reads the exchange's InputStream, this code will have no effect. If the handler does not\n-                \/\/ read the exchange's InputStream and the send window has been exceeded, then a RST_STREAM frame with\n-                \/\/ the error code NO_ERROR will be sent to the client before closing.\n-                if (bis instanceof BodyInputStream inputStream && (!inputStream.isEof() || inputStream.q.size() > 0)) {\n-                    bos.sendResetOnClose(ResetFrame.NO_ERROR);\n-                }\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestServerConnection.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}