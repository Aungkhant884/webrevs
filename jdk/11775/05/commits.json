[{"commit":{"message":"Fixes for Christian's review suggestions"},"files":[{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"},{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestVerifyIterativeGVN.java"}],"sha":"d60a72b454e240176013bb459384223a66af0ca5"},{"commit":{"message":"two small fixes and copyright 2023"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/castnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/cfgnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/connode.hpp"},{"filename":"src\/hotspot\/share\/opto\/doCall.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/parse1.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.hpp"},{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyNoInitDeopt.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestVerifyIterativeGVN.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDeepGraphVerifyIterativeGVN.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMoveStoreAfterLoopVerifyIterativeGVN.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestTypeProfiling.java"}],"sha":"a2c2c1e14d98a3e331c7be39d21689c3ff4efab3"},{"commit":{"message":"Review suggestions by Tobias Hartmann v1\n\nCo-authored-by: Tobias Hartmann <tobias.hartmann@oracle.com>"},"files":[{"filename":"src\/hotspot\/share\/opto\/connode.hpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"}],"sha":"9601143e82365e7a8330bbd47addf703d33f9566"},{"commit":{"message":"Fix tests that directly query TypeProfileLevel, we had issues because I changed the type"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyNoInitDeopt.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestTypeProfiling.java"}],"sha":"79dc2a33d962d153ee374721e0bb28f27015adef"},{"commit":{"message":"Merge branch 'master' into JDK-8298952"},"files":[{"filename":"src\/hotspot\/share\/opto\/compile.cpp"}],"sha":"41af5e82c5c055af33df9f326d2a9a4c0e3b8bd9"},{"commit":{"message":"Update after review from Vladimir K"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/castnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"36219d9b5a8f23276ae6e6ff9d9688ee8e8348df"},{"commit":{"message":"Merge branch 'master' into JDK-8298952"},"files":[{"filename":"src\/hotspot\/share\/opto\/cfgnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"}],"sha":"6ce2768c37713bb342608f7017292bec74a060a6"},{"commit":{"message":"fix guard issue"},"files":[{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"}],"sha":"fbbc8afb2f8313c3b75236c7314f7dcd4b20e216"},{"commit":{"message":"Merge branch 'master' into JDK-8298952"},"files":[],"sha":"f36a744ca18aa5f413d037d6afdf6346395eedde"},{"commit":{"message":"make VerifyIterativeGVN fine grained: can enable Def-Use and Value verification separately"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.hpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestVerifyIterativeGVN.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDeepGraphVerifyIterativeGVN.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMoveStoreAfterLoopVerifyIterativeGVN.java"}],"sha":"1f15933b65103e4d8d612bafe04cfc11bb2fd490"},{"commit":{"message":"replace set_req with set_req_X after: fatal error: no reachable node should have no use"},"files":[{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"}],"sha":"fe5552be65e9dd9c044d41e8295bb176d9754e28"},{"commit":{"message":"implement Cast-chain traversal for Sub"},"files":[{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"}],"sha":"193e697d10e96d80231554a41c78ef79fa52f4e7"},{"commit":{"message":"sanity assert from last commit was wrong - turned it into actual logic"},"files":[{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"}],"sha":"e6ddee560ba780bf9223f5476aa0488eea1b7930"},{"commit":{"message":"add verification to VerifyIterativeGVN, and implement CmpI \/ If \/ CastII pattern notification"},"files":[{"filename":"src\/hotspot\/share\/opto\/castnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"}],"sha":"d378cb8899a08eeeb165127690a0ece142153b28"},{"commit":{"message":"Merge branch 'master' into JDK-8298952"},"files":[{"filename":"src\/hotspot\/share\/opto\/castnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/cfgnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/doCall.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"src\/hotspot\/share\/opto\/parse1.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"}],"sha":"1a673dc784efb7175cd816ba4e82310533a6b01b"},{"commit":{"message":"add notification in PhaseIdealLoop::clone_loop_handle_data_uses"},"files":[{"filename":"src\/hotspot\/share\/opto\/loopopts.cpp"}],"sha":"943972de67fff3601c6bef9b2a4299ec8900705a"},{"commit":{"message":"8298952: All nodes should have type(n) == Value(n) after IGVN"},"files":[{"filename":"src\/hotspot\/share\/opto\/castnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/cfgnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/compile.cpp"},{"filename":"src\/hotspot\/share\/opto\/connode.hpp"},{"filename":"src\/hotspot\/share\/opto\/doCall.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.cpp"},{"filename":"src\/hotspot\/share\/opto\/node.hpp"},{"filename":"src\/hotspot\/share\/opto\/parse1.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.cpp"},{"filename":"src\/hotspot\/share\/opto\/phaseX.hpp"},{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"bdcbfcfdbc811610866ef725dee917369a6b9b0f"}]