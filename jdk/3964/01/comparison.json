{"files":[{"patch":"@@ -42,1 +42,0 @@\n-volatile jint LowMemoryDetector::_disabled_count = 0;\n","filename":"src\/hotspot\/share\/services\/lowMemoryDetector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,1 +214,0 @@\n-  friend class LowMemoryDetectorDisabler;\n@@ -220,2 +219,0 @@\n-  \/\/ > 0 if temporary disabed\n-  static volatile jint _disabled_count;\n@@ -224,3 +221,0 @@\n-  static bool temporary_disabled() { return _disabled_count > 0; }\n-  static void disable() { Atomic::inc(&_disabled_count); }\n-  static void enable() { Atomic::dec(&_disabled_count); }\n@@ -247,6 +241,0 @@\n-  \/\/ indicates if low memory detection is enabled for any collected\n-  \/\/ memory pools\n-  static inline bool is_enabled_for_collected_pools() {\n-    return !temporary_disabled() && _enabled_for_collected_pools;\n-  }\n-\n@@ -259,1 +247,1 @@\n-    if (!is_enabled_for_collected_pools()) {\n+    if (!_enabled_for_collected_pools) {\n@@ -279,13 +267,0 @@\n-class LowMemoryDetectorDisabler: public StackObj {\n-public:\n-  LowMemoryDetectorDisabler()\n-  {\n-    LowMemoryDetector::disable();\n-  }\n-  ~LowMemoryDetectorDisabler()\n-  {\n-    assert(LowMemoryDetector::temporary_disabled(), \"should be disabled!\");\n-    LowMemoryDetector::enable();\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/services\/lowMemoryDetector.hpp","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"}]}