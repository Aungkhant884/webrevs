[{"commit":{"message":"Restore Red Hat copyright line"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"012565fee867180689c33d1593fec5eeb6a68bd0"},{"commit":{"message":"8264006: Fix AOT library loading on CPUs with 256-byte dcache line\n\nRecently we tested OpenJDK on some CPUs with 256-byte dcache line size.\nHotSpot AOT tests failed because the shared library compiled with the\nsame VM options on the same machine are skipped when loaded back.\n\nBelow command sequence shows a simple way to reproduce this issue.\n\n$ getconf -a | grep LEVEL1_DCACHE_LINESIZE\nLEVEL1_DCACHE_LINESIZE 256\n\n$ jaotc --output a.so Hello.class\n\n$ java -XX:+UnlockExperimentalVMOptions -XX:+UseAOT -XX:AOTLibrary=.\/a.so -XX:+PrintAOT Hello\nShared file .\/a.so error: ContendedPaddingWidth has different value '256' from current '128'\n      4 1 skipped .\/a.so aot library\n\nThe default value of VM option ContendedPaddingWidth is 128. But on CPUs\nwith L1 dcache line size larger than 128 bytes, the value is adjusted to\nthe cache line size in VM_Version_init(). This adjustment is done after\nAOT library loading in codeCache_init(). So the AOT lib verifier still\nassumes the ContendedPaddingWidth in the compiled library should be 128\nand thus causes the loaded library skipped.\n\nIn my proposed fix, AOTLoader::initialize() is moved out of the general\ncodecache initialization and placed after VM_Version_init(). The order\nof codeCache_init() and VM_Version_init() is not changed since there may\nbe code emitted during VM_Version_init(), which depends on the general\ncodecache init.\n\nTested hotspot::hotspot_all_no_apps, jdk::jdk_core and langtools::tier1."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/share\/code\/codeCache.cpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/aot\/cli\/jaotc\/AtFileTest.java"}],"sha":"17b36ef696d93f6435a31cd8407c4af852b52693"}]