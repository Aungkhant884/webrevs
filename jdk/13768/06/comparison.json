{"files":[{"patch":"@@ -460,1 +460,1 @@\n-ifneq ($(filter static-libs-bundles, $(MAKECMDGOALS)), )\n+ifneq ($(filter static-libs-bundles java-static-libs-bundles, $(MAKECMDGOALS)), )\n@@ -493,0 +493,1 @@\n+java-static-libs-bundles: $(HOTSPOT_VARIANT_MAIN_STATIC_LIBS_TARGETS) $(STATIC_LIBS_TARGETS)\n@@ -497,1 +498,1 @@\n-    static-libs-bundles jcov-bundles\n+    static-libs-bundles java-static-libs-bundles jcov-bundles\n","filename":"make\/Bundles.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,0 +236,1 @@\n+HOTSPOT_VARIANT_MAIN_STATIC_LIBS_TARGETS := hotspot-$(JVM_VARIANT_MAIN)-static-libs\n@@ -254,0 +255,8 @@\n+define DeclareHotspotStaticLibsRecipe\n+  hotspot-$(JVM_VARIANT_MAIN)-static-libs:\n+\t+($(CD) $(TOPDIR)\/make\/hotspot && $(MAKE) $(MAKE_ARGS) -f lib\/CompileLibraries.gmk \\\n+\t    JVM_VARIANT=$(JVM_VARIANT_MAIN) STATIC_LIBS=true)\n+endef\n+\n+$(eval $(call DeclareHotspotStaticLibsRecipe))\n+\n@@ -301,1 +310,1 @@\n-    $(HOTSPOT_VARIANT_LIBS_TARGETS)\n+    $(HOTSPOT_VARIANT_LIBS_TARGETS) $(HOTSPOT_VARIANT_MAIN_STATIC_LIBS_TARGETS)\n@@ -467,0 +476,4 @@\n+$(eval $(call SetupTarget, java-static-libs-image, \\\n+    MAKEFILE := StaticJvmLibsImage, \\\n+))\n+\n@@ -839,0 +852,6 @@\n+$(eval $(call SetupTarget, java-static-libs-bundles, \\\n+    MAKEFILE := Bundles, \\\n+    TARGET := java-static-libs-bundles, \\\n+    DEPS := java-static-libs-image, \\\n+))\n+\n@@ -894,0 +913,2 @@\n+  hotspot-$(JVM_VARIANT_MAIN)-static-libs: hotspot-$(JVM_VARIANT_MAIN)-gensrc java.base-copy\n+\n@@ -1052,0 +1073,2 @@\n+  java-static-libs-image: hotspot-static-libs static-libs-image\n+\n@@ -1102,0 +1125,2 @@\n+$(eval hotspot-static-libs: hotspot-$(JVM_VARIANT_MAIN)-static-libs)\n+\n@@ -1260,1 +1285,1 @@\n-all-bundles: product-bundles test-bundles docs-bundles static-libs-bundles\n+all-bundles: product-bundles test-bundles docs-bundles static-libs-bundles java-static-libs-bundles\n@@ -1262,1 +1287,1 @@\n-ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-gensrc gensrc gendata \\\n+ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-static-libs hotspot-gensrc gensrc gendata \\\n","filename":"make\/Main.gmk","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+#\n+# Copyright (c) 2023 Google Inc. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# This makefile creates an image of the optional static version of Hotspot\n+# JVM library.\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+\n+################################################################################\n+\n+TARGETS :=\n+\n+$(eval $(call SetupCopyFiles, COPY_STATIC_LIBS_libjvm, \\\n+    SRC := $(HOTSPOT_OUTPUTDIR)\/variant-$(JVM_VARIANT_MAIN)\/libjvm\/objs\/static, \\\n+    DEST := $(STATIC_LIBS_IMAGE_DIR)\/lib, \\\n+    FILES := $(wildcard $(HOTSPOT_OUTPUTDIR)\/variant-$(JVM_VARIANT_MAIN)\/libjvm\/objs\/static\/*$(STATIC_LIBRARY_SUFFIX)), \\\n+))\n+TARGETS += $(COPY_STATIC_LIBS_libjvm)\n+\n+################################################################################\n+\n+all: $(TARGETS)\n+\n+.PHONY: all\n","filename":"make\/StaticJvmLibsImage.gmk","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,0 +551,1 @@\n+#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n@@ -729,0 +730,6 @@\n+  ifeq ($(STATIC_LIBS), true)\n+    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n+    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n+      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n+    endif\n+  endif\n@@ -1133,0 +1140,34 @@\n+  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n+\n+  # If there are many object files, use an @-file...\n+  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n+    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n+    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n+      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n+    else\n+      # ...except for toolchains which don't support them.\n+      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+    endif\n+  endif\n+\n+  # Unfortunately the @-file trick does not work reliably when using clang.\n+  # Clang does not propagate the @-file parameter to the ld sub process, but\n+  # instead puts the full content on the command line. At least the llvm ld\n+  # does not even support an @-file.\n+  #\n+  # When linking a large amount of object files, we risk hitting the limit\n+  # of the command line length even on posix systems if the path length of\n+  # the output dir is very long due to our use of absolute paths. To\n+  # mitigate this, use paths relative to the output dir when linking over\n+  # 500 files with clang and the output dir path is deep.\n+  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n+    ifeq ($$(TOOLCHAIN_TYPE), clang)\n+      # There is no strlen function in make, but checking path depth is a\n+      # reasonable approximation.\n+      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n+        $1_LINK_OBJS_RELATIVE := true\n+        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+      endif\n+    endif\n+  endif\n+\n@@ -1149,0 +1190,7 @@\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n@@ -1152,1 +1200,1 @@\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_ALL_OBJS) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_LD_OBJ_ARG) \\\n@@ -1204,34 +1252,0 @@\n-    $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n-\n-    # If there are many object files, use an @-file...\n-    ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n-      $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n-      ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-        $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-      else\n-        # ...except for toolchains which don't support them.\n-        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-      endif\n-    endif\n-\n-    # Unfortunately the @-file trick does not work reliably when using clang.\n-    # Clang does not propagate the @-file parameter to the ld sub process, but\n-    # instead puts the full content on the command line. At least the llvm ld\n-    # does not even support an @-file.\n-    #\n-    # When linking a large amount of object files, we risk hitting the limit\n-    # of the command line length even on posix systems if the path length of\n-    # the output dir is very long due to our use of absolute paths. To\n-    # mitigate this, use paths relative to the output dir when linking over\n-    # 500 files with clang and the output dir path is deep.\n-    ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n-      ifeq ($$(TOOLCHAIN_TYPE), clang)\n-        # There is no strlen function in make, but checking path depth is a\n-        # reasonable approximation.\n-        ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n-          $1_LINK_OBJS_RELATIVE := true\n-          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n-        endif\n-      endif\n-    endif\n-\n","filename":"make\/common\/NativeCompilation.gmk","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -142,0 +142,7 @@\n+# The global operator new functions defined in operator_new.cpp are intended\n+# to detect and prevent the VM code from calling them. See more details in\n+# operator_new.cpp. Exclude operator_new.o when statically linking the VM\n+# code with JDK natives, as the JDK natives might need to call the global\n+# operator new.\n+LIBJVM_STATIC_EXCLUDE_OBJS := operator_new.o\n+\n@@ -189,0 +196,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJVM_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -156,0 +156,3 @@\n+  # Extra files from the zlib.\n+  LIBJLI_EXTRA_FILE_LIST := inflate.c inftrees.c inffast.c zadler32.c zcrc32.c zutil.c\n+\n@@ -158,7 +161,8 @@\n-          inflate.c \\\n-          inftrees.c \\\n-          inffast.c \\\n-          zadler32.c \\\n-          zcrc32.c \\\n-          zutil.c \\\n-      )\n+          $(LIBJLI_EXTRA_FILE_LIST))\n+\n+  # Do not include these libz objects in the static libjli library.\n+  # When statically linking the java launcher with all JDK and VM\n+  # static libraries, we use the --whole-archive linker option.\n+  # The duplicate objects in different static libraries cause linking\n+  # errors due to duplicate symbols.\n+  LIBJLI_STATIC_EXCLUDE_OBJS := $(subst .c,$(OBJ_SUFFIX),$(LIBJLI_EXTRA_FILE_LIST))\n@@ -183,0 +187,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJLI_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -221,0 +221,8 @@\n+    # These are the object files provided by the awt native\n+    # library. Do not include these external (non-awt_xawt library)\n+    # objects in the static library. When statically linking the java\n+    # launcher with all JDK and VM static libraries, we use the\n+    # --whole-archive linker option. The duplicate objects in different\n+    # static libraries cause linking errors due to duplicate symbols.\n+    LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -247,0 +255,1 @@\n+        STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n@@ -370,0 +379,8 @@\n+  # These are the object files provided by the awt native\n+  # library. Do not include these external (non-awt_headless library)\n+  # objects in the static library. When statically linking the java\n+  # launcher with all JDK and VM static libraries, we use the\n+  # --whole-archive linker option. The duplicate objects in different\n+  # static libraries cause linking errors due to duplicate symbols.\n+  LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -385,0 +402,1 @@\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}