{"files":[{"patch":"@@ -409,0 +409,12 @@\n+\/\/---------------------print_method_with_lineno--------------------------------\n+void JVMState::print_method_with_lineno(outputStream* st, bool show_name) const {\n+  if (show_name) _method->print_short_name(st);\n+\n+  int lineno = _method->line_number_from_bci(_bci);\n+  if (lineno != -1) {\n+    st->print(\" @ bci:%d (line %d)\", _bci, lineno);\n+  } else {\n+    st->print(\" @ bci:%d\", _bci);\n+  }\n+}\n+\n@@ -413,2 +425,1 @@\n-    _method->print_short_name(st);\n-    st->print(\" @ bci:%d \",_bci);\n+    print_method_with_lineno(st, true);\n@@ -540,3 +551,1 @@\n-    if (!printed)\n-      _method->print_short_name(st);\n-    st->print(\" @ bci:%d\",_bci);\n+    print_method_with_lineno(st, !printed);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -309,0 +309,1 @@\n+  void      print_method_with_lineno(outputStream* st, bool show_name) const;\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8033441\n+ * @summary Test to ensure that line numbers are now present with the -XX:+PrintOptoAssembly command line option\n+ *\n+ * @requires vm.compiler2.enabled & vm.debug == true\n+ *\n+ * @library \/compiler\/patches \/test\/lib\n+ * @run main\/othervm compiler.arguments.TestPrintOptoAssemblyLineNumbers\n+*\/\n+\n+package compiler.arguments;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestPrintOptoAssemblyLineNumbers {\n+    public static void main(String[] args) throws Throwable {\n+        \/\/ create subprocess to run some code with -XX:+PrintOptoAssembly enabled\n+        String[] procArgs = new String[]{\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:-TieredCompilation\",\n+            \"-XX:+PrintOptoAssembly\",\n+            \"compiler.arguments.TestPrintOptoAssemblyLineNumbers$CheckC2OptoAssembly\"\n+            };\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        \/\/ ensure output includes line numbers:\n+       output.shouldMatch(\".*TestPrintOptoAssemblyLineNumbers\\\\$CheckC2OptoAssembly::main @ bci:11 \\\\(line 64\\\\).*\");\n+    }\n+\n+    public static class CheckC2OptoAssembly{ \/\/ contents of this class serves to just invoke C2\n+        public static boolean foo(String arg){\n+            return arg.contains(\"45\");\n+        }\n+\n+        public static void main(String[] args){\n+            int count = 0;\n+            for(int x = 0; x < 200_000; x++){\n+                if(foo(\"something\" + x)){ \/\/ <- test expects this line of code to be on line 64\n+                    count += 1;\n+                }\n+            }\n+            System.out.println(\"count: \" + count);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestPrintOptoAssemblyLineNumbers.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}