{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -58,0 +59,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -153,1 +155,11 @@\n-                .setMemberSummaryBuilder(configuration.getBuilderFactory().getMemberSummaryBuilder(this));\n+                .setSubNavLinks(() -> {\n+                    List<Content> list = new ArrayList<>();\n+                    VisibleMemberTable vmt = configuration.getVisibleMemberTable(typeElement);\n+                    Set<VisibleMemberTable.Kind> summarySet =\n+                            VisibleMemberTable.Kind.forSummariesOf(element.getKind());\n+                    for (VisibleMemberTable.Kind kind : summarySet) {\n+                        list.add(HtmlTree.LI(links.createLink(HtmlIds.forMemberSummary(kind),\n+                                contents.getNavLinkLabelContent(kind), vmt.hasVisibleMembers(kind))));\n+                    }\n+                    return list;\n+                });\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -128,0 +127,1 @@\n+    public final Content navAnnotations;\n@@ -132,0 +132,1 @@\n+    public final Content navDescription;\n@@ -133,0 +134,1 @@\n+    public final Content navEnums;\n@@ -137,1 +139,0 @@\n-    public final Content navModuleDescription;\n@@ -142,0 +143,2 @@\n+    public final Content navRecords;\n+    public final Content navRelated;\n@@ -153,0 +156,1 @@\n+    public final Content packageSubNavLabel;\n@@ -278,0 +282,1 @@\n+        navAnnotations = getContent(\"doclet.navAnnotations\");\n@@ -283,0 +288,1 @@\n+        navEnums = getContent(\"doclet.navEnums\");\n@@ -287,1 +293,1 @@\n-        navModuleDescription = getContent(\"doclet.navModuleDescription\");\n+        navDescription = getContent(\"doclet.navDescription\");\n@@ -292,0 +298,2 @@\n+        navRecords = getContent(\"doclet.navRecords\");\n+        navRelated = getContent(\"doclet.navRelated\");\n@@ -303,0 +311,1 @@\n+        packageSubNavLabel = getContent(\"doclet.Package_Sub_Nav\");\n@@ -339,0 +348,4 @@\n+        navLinkLabels.put(VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_OPTIONAL,\n+                getContent(\"doclet.navAnnotationTypeOptionalMember\"));\n+        navLinkLabels.put(VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_REQUIRED,\n+                getContent(\"doclet.navAnnotationTypeRequiredMember\"));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javax.lang.model.element.Element;\n@@ -146,0 +147,9 @@\n+    @Override\n+    protected Navigation getNavBar(PageMode pageMode, Element element) {\n+        return super.getNavBar(pageMode, element)\n+                .setSubNavLinks(() -> List.of(\n+                        HtmlTree.LI(links.createLink(HtmlIds.HELP_NAVIGATION, contents.navHelpNavigation)),\n+                        HtmlTree.LI(links.createLink(HtmlIds.HELP_PAGES, contents.navHelpPages)))\n+                );\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -74,0 +75,1 @@\n+    static final HtmlId ANNOTATION_TYPE_SUMMARY = HtmlId.of(\"annotation-interface-summary\");\n@@ -75,0 +77,1 @@\n+    static final HtmlId CLASS_SUMMARY = HtmlId.of(\"class-summary\");\n@@ -79,0 +82,3 @@\n+    static final HtmlId ENUM_SUMMARY = HtmlId.of(\"enum-summary\");\n+    static final HtmlId ERROR_SUMMARY = HtmlId.of(\"error-summary\");\n+    static final HtmlId EXCEPTION_SUMMARY = HtmlId.of(\"exception-summary\");\n@@ -85,0 +91,1 @@\n+    static final HtmlId INTERFACE_SUMMARY = HtmlId.of(\"interface-summary\");\n@@ -98,0 +105,2 @@\n+    static final HtmlId RECORD_SUMMARY = HtmlId.of(\"record-summary\");\n+    static final HtmlId RELATED_PACKAGE_SUMMARY = HtmlId.of(\"related-package-summary\");\n@@ -427,0 +436,20 @@\n+    \/**\n+     * Returns an id for the member summary table of the given {@code kind} in a class page.\n+     *\n+     * @param kind the kind of member\n+     *\n+     * @return the id\n+     *\/\n+    static HtmlId forMemberSummary(VisibleMemberTable.Kind kind) {\n+        return switch (kind) {\n+            case INNER_CLASSES -> NESTED_CLASS_SUMMARY;\n+            case ENUM_CONSTANTS -> ENUM_CONSTANT_SUMMARY;\n+            case FIELDS -> FIELD_SUMMARY;\n+            case CONSTRUCTORS -> CONSTRUCTOR_SUMMARY;\n+            case METHODS -> METHOD_SUMMARY;\n+            case ANNOTATION_TYPE_MEMBER_OPTIONAL -> ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY;\n+            case ANNOTATION_TYPE_MEMBER_REQUIRED -> ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY;\n+            case PROPERTIES -> PROPERTY_SUMMARY;\n+        };\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -200,5 +200,10 @@\n-                .setDisplaySummaryModuleDescLink(!utils.getFullBody(mdle).isEmpty() && !options.noComment())\n-                .setDisplaySummaryModulesLink(display(requires) || display(indirectModules))\n-                .setDisplaySummaryPackagesLink(display(packages) || display(indirectPackages)\n-                        || display(indirectOpenPackages))\n-                .setDisplaySummaryServicesLink(displayServices(uses, usesTrees) || displayServices(provides.keySet(), providesTrees));\n+                .setSubNavLinks(() -> List.of(\n+                        HtmlTree.LI(links.createLink(HtmlIds.MODULE_DESCRIPTION, contents.navDescription,\n+                            !utils.getFullBody(mdle).isEmpty() && !options.noComment())),\n+                        HtmlTree.LI(links.createLink(HtmlIds.MODULES, contents.navModules,\n+                            display(requires) || display(indirectModules))),\n+                        HtmlTree.LI(links.createLink(HtmlIds.PACKAGES, contents.navPackages,\n+                            display(packages) || display(indirectPackages) || display(indirectOpenPackages))),\n+                        HtmlTree.LI(links.createLink(HtmlIds.SERVICES, contents.navServices,\n+                            displayServices(uses, usesTrees) || displayServices(provides.keySet(), providesTrees)))\n+                ));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriterImpl.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.SortedSet;\n@@ -38,1 +37,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Comment;\n@@ -46,0 +44,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -47,1 +46,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder;\n@@ -78,5 +76,0 @@\n-    private MemberSummaryBuilder memberSummaryBuilder;\n-    private boolean displaySummaryModuleDescLink;\n-    private boolean displaySummaryModulesLink;\n-    private boolean displaySummaryPackagesLink;\n-    private boolean displaySummaryServicesLink;\n@@ -86,0 +79,1 @@\n+    private SubNavLinks subNavLinks;\n@@ -106,0 +100,12 @@\n+    \/**\n+     * An interface to provide links for the sub-navigation area.\n+     *\/\n+    public interface SubNavLinks {\n+        \/**\n+         * {@return a list of links to display in the sub-navigation area}\n+         * Links should be wrapped in {@code HtmlTree.LI} elements as they are\n+         * displayed within an unordered list.\n+         *\/\n+        List<Content> getSubNavLinks();\n+    }\n+\n@@ -144,22 +150,2 @@\n-    public Navigation setMemberSummaryBuilder(MemberSummaryBuilder memberSummaryBuilder) {\n-        this.memberSummaryBuilder = memberSummaryBuilder;\n-        return this;\n-    }\n-\n-    public Navigation setDisplaySummaryModuleDescLink(boolean displaySummaryModuleDescLink) {\n-        this.displaySummaryModuleDescLink = displaySummaryModuleDescLink;\n-        return this;\n-    }\n-\n-    public Navigation setDisplaySummaryModulesLink(boolean displaySummaryModulesLink) {\n-        this.displaySummaryModulesLink = displaySummaryModulesLink;\n-        return this;\n-    }\n-\n-    public Navigation setDisplaySummaryPackagesLink(boolean displaySummaryPackagesLink) {\n-        this.displaySummaryPackagesLink = displaySummaryPackagesLink;\n-        return this;\n-    }\n-\n-    public Navigation setDisplaySummaryServicesLink(boolean displaySummaryServicesLink) {\n-        this.displaySummaryServicesLink = displaySummaryServicesLink;\n+    public Navigation setUserHeader(Content userHeader) {\n+        this.userHeader = userHeader;\n@@ -169,2 +155,2 @@\n-    public Navigation setUserHeader(Content userHeader) {\n-        this.userHeader = userHeader;\n+    public Navigation setSubNavLinks(SubNavLinks subNavLinks) {\n+        this.subNavLinks = subNavLinks;\n@@ -353,1 +339,0 @@\n-        List<Content> listContents = new ArrayList<>();\n@@ -355,36 +340,0 @@\n-            case CLASS:\n-                if (element.getKind() == ElementKind.ANNOTATION_TYPE) {\n-                    addAnnotationTypeSummaryLink(\"doclet.navField\",\n-                            FIELDS, listContents);\n-                    addAnnotationTypeSummaryLink(\"doclet.navAnnotationTypeRequiredMember\",\n-                            ANNOTATION_TYPE_MEMBER_REQUIRED, listContents);\n-                    addAnnotationTypeSummaryLink(\"doclet.navAnnotationTypeOptionalMember\",\n-                            ANNOTATION_TYPE_MEMBER_OPTIONAL, listContents);\n-                } else {\n-                    TypeElement typeElement = (TypeElement) element;\n-                    for (VisibleMemberTable.Kind kind : summarySet) {\n-                        if (kind == ENUM_CONSTANTS && !configuration.utils.isEnum(typeElement)) {\n-                            continue;\n-                        }\n-                        if (kind == CONSTRUCTORS && configuration.utils.isEnum(typeElement)) {\n-                            continue;\n-                        }\n-                        AbstractMemberWriter writer\n-                                = ((AbstractMemberWriter) memberSummaryBuilder.getMemberSummaryWriter(kind));\n-                        if (writer == null) {\n-                            addContentToList(listContents, contents.getNavLinkLabelContent(kind));\n-                        } else {\n-                            addTypeSummaryLink(memberSummaryBuilder.members(kind),\n-                                    memberSummaryBuilder.getVisibleMemberTable(),\n-                                    kind, listContents);\n-                        }\n-                    }\n-                }\n-                if (!listContents.isEmpty()) {\n-                    Content li = HtmlTree.LI(contents.summaryLabel);\n-                    li.add(Entity.NO_BREAK_SPACE);\n-                    tree.add(li);\n-                    addListToNav(listContents, tree);\n-                }\n-                break;\n-\n@@ -392,24 +341,4 @@\n-                if (displaySummaryModuleDescLink) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.MODULE_DESCRIPTION, contents.navModuleDescription));\n-                } else {\n-                    addContentToList(listContents, contents.navModuleDescription);\n-                }\n-                if (displaySummaryModulesLink) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.MODULES, contents.navModules));\n-                } else {\n-                    addContentToList(listContents, contents.navModules);\n-                }\n-                if (displaySummaryPackagesLink) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.PACKAGES, contents.navPackages));\n-                } else {\n-                    addContentToList(listContents, contents.navPackages);\n-                }\n-                if (displaySummaryServicesLink) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.SERVICES, contents.navServices));\n-                } else {\n-                    addContentToList(listContents, contents.navServices);\n-                }\n+            case PACKAGE:\n+            case CLASS:\n+            case HELP:\n+                List<Content> listContents = subNavLinks.getSubNavLinks();\n@@ -417,3 +346,7 @@\n-                    Content li = HtmlTree.LI(contents.moduleSubNavLabel);\n-                    li.add(Entity.NO_BREAK_SPACE);\n-                    tree.add(li);\n+                    tree.add(HtmlTree.LI(switch (documentedPage) {\n+                        case MODULE -> contents.moduleSubNavLabel;\n+                        case PACKAGE -> contents.packageSubNavLabel;\n+                        case CLASS -> contents.summaryLabel;\n+                        case HELP -> contents.helpSubNavLabel;\n+                        default -> Text.EMPTY;\n+                    }).add(Entity.NO_BREAK_SPACE));\n@@ -424,125 +357,0 @@\n-            case HELP:\n-                addContentToList(listContents,\n-                        links.createLink(HtmlIds.HELP_NAVIGATION, contents.navHelpNavigation));\n-                addContentToList(listContents,\n-                        links.createLink(HtmlIds.HELP_PAGES, contents.navHelpPages));\n-                Content li = HtmlTree.LI(contents.helpSubNavLabel);\n-                li.add(Entity.NO_BREAK_SPACE);\n-                tree.add(li);\n-                addListToNav(listContents, tree);\n-                break;\n-\n-            default:\n-                break;\n-        }\n-    }\n-\n-    \/**\n-     * Adds the navigation summary link.\n-     *\n-     * @param members members to be linked\n-     * @param vmt the visible member table\n-     * @param kind the visible member kind\n-     * @param listContents the list of contents\n-     *\/\n-    private void addTypeSummaryLink(SortedSet<? extends Element> members,\n-            VisibleMemberTable vmt,\n-            VisibleMemberTable.Kind kind, List<Content> listContents) {\n-        if (!members.isEmpty()) {\n-            addTypeSummaryLink(null, kind, true, listContents);\n-            return;\n-        }\n-        Set<TypeElement> visibleClasses = vmt.getVisibleTypeElements();\n-        for (TypeElement t : visibleClasses) {\n-            if (configuration.getVisibleMemberTable(t).hasVisibleMembers(kind)) {\n-                addTypeSummaryLink(null, kind, true, listContents);\n-                return;\n-            }\n-        }\n-        addTypeSummaryLink(null, kind, false, listContents);\n-    }\n-\n-    \/**\n-     * Adds the navigation Type summary link.\n-     *\n-     * @param typeElement the Type being documented\n-     * @param kind the kind of member being documented\n-     * @param link true if the members are listed and need to be linked\n-     * @param listContents the list of contents to which the summary will be added\n-     *\/\n-    private void addTypeSummaryLink(TypeElement typeElement, VisibleMemberTable.Kind kind, boolean link,\n-            List<Content> listContents) {\n-        switch (kind) {\n-            case CONSTRUCTORS:\n-                if (link) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.CONSTRUCTOR_SUMMARY, contents.navConstructor));\n-                } else {\n-                    addContentToList(listContents, contents.navConstructor);\n-                }\n-                break;\n-            case ENUM_CONSTANTS:\n-                if (link) {\n-                    if (typeElement == null) {\n-                        addContentToList(listContents,\n-                                links.createLink(HtmlIds.ENUM_CONSTANT_SUMMARY, contents.navEnum));\n-                    } else {\n-                        addContentToList(listContents,\n-                                links.createLink( htmlIds.forInheritedEnumConstants(typeElement), contents.navEnum));\n-                    }\n-                } else {\n-                    addContentToList(listContents, contents.navEnum);\n-                }\n-                break;\n-            case FIELDS:\n-                if (link) {\n-                    if (typeElement == null) {\n-                        addContentToList(listContents,\n-                                links.createLink(HtmlIds.FIELD_SUMMARY, contents.navField));\n-                    } else {\n-                        addContentToList(listContents,\n-                                links.createLink(htmlIds.forInheritedFields(typeElement), contents.navField));\n-                    }\n-                } else {\n-                    addContentToList(listContents, contents.navField);\n-                }\n-                break;\n-            case METHODS:\n-                if (link) {\n-                    if (typeElement == null) {\n-                        addContentToList(listContents,\n-                                links.createLink(HtmlIds.METHOD_SUMMARY, contents.navMethod));\n-                    } else {\n-                        addContentToList(listContents,\n-                                links.createLink(htmlIds.forInheritedMethods(typeElement), contents.navMethod));\n-                    }\n-                } else {\n-                    addContentToList(listContents, contents.navMethod);\n-                }\n-                break;\n-            case INNER_CLASSES:\n-                if (link) {\n-                    if (typeElement == null) {\n-                        addContentToList(listContents,\n-                                links.createLink(HtmlIds.NESTED_CLASS_SUMMARY, contents.navNested));\n-                    } else {\n-                        addContentToList(listContents,\n-                                links.createLink(htmlIds.forInheritedClasses(typeElement), contents.navNested));\n-                    }\n-                } else {\n-                    addContentToList(listContents, contents.navNested);\n-                }\n-                break;\n-            case PROPERTIES:\n-                if (link) {\n-                    if (typeElement == null) {\n-                        addContentToList(listContents,\n-                                links.createLink(HtmlIds.PROPERTY_SUMMARY, contents.navProperty));\n-                    } else {\n-                        addContentToList(listContents,\n-                                links.createLink(htmlIds.forInheritedProperties(typeElement), contents.navProperty));\n-                    }\n-                } else {\n-                    addContentToList(listContents, contents.navProperty);\n-                }\n-                break;\n@@ -554,47 +362,0 @@\n-    \/**\n-     * Adds the navigation Type summary link.\n-     *\n-     * @param label the label to be added\n-     * @param kind the kind of member being documented\n-     * @param listContents the list of contents to which the summary will be added\n-     *\/\n-    private void addAnnotationTypeSummaryLink(String label, VisibleMemberTable.Kind kind, List<Content> listContents) {\n-        AbstractMemberWriter writer = ((AbstractMemberWriter) memberSummaryBuilder.\n-                getMemberSummaryWriter(kind));\n-        if (writer == null) {\n-            addContentToList(listContents, contents.getContent(label));\n-        } else {\n-            boolean link = memberSummaryBuilder.getVisibleMemberTable().hasVisibleMembers(kind);\n-            switch (kind) {\n-                case FIELDS:\n-                    if (link) {\n-                        addContentToList(listContents, links.createLink(HtmlIds.FIELD_SUMMARY,\n-                                contents.navField));\n-                    } else {\n-                        addContentToList(listContents, contents.navField);\n-                    }\n-                    break;\n-                case ANNOTATION_TYPE_MEMBER_REQUIRED:\n-                    if (link) {\n-                        addContentToList(listContents, links.createLink(\n-                                HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY,\n-                                contents.navAnnotationTypeRequiredMember));\n-                    } else {\n-                        addContentToList(listContents, contents.navAnnotationTypeRequiredMember);\n-                    }\n-                    break;\n-                case ANNOTATION_TYPE_MEMBER_OPTIONAL:\n-                    if (link) {\n-                        addContentToList(listContents, links.createLink(\n-                                HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY,\n-                                contents.navAnnotationTypeOptionalMember));\n-                    } else {\n-                        addContentToList(listContents, contents.navAnnotationTypeOptionalMember);\n-                    }\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n-    }\n-\n@@ -607,23 +368,15 @@\n-        switch (documentedPage) {\n-            case CLASS:\n-                List<Content> listContents = new ArrayList<>();\n-                if (element.getKind() == ElementKind.ANNOTATION_TYPE) {\n-                    addAnnotationTypeDetailLink(listContents);\n-                } else {\n-                    TypeElement typeElement = (TypeElement) element;\n-                    for (VisibleMemberTable.Kind kind : detailSet) {\n-                        AbstractMemberWriter writer\n-                                = ((AbstractMemberWriter) memberSummaryBuilder.\n-                                getMemberSummaryWriter(kind));\n-                        if (kind == ENUM_CONSTANTS && !configuration.utils.isEnum(typeElement)) {\n-                            continue;\n-                        }\n-                        if (kind == CONSTRUCTORS && configuration.utils.isEnum(typeElement)) {\n-                            continue;\n-                        }\n-                        if (writer == null) {\n-                            addContentToList(listContents, contents.getNavLinkLabelContent(kind));\n-                        } else {\n-                            addTypeDetailLink(kind, memberSummaryBuilder.hasMembers(kind), listContents);\n-                        }\n-                    }\n+        if (documentedPage == PageMode.CLASS) {\n+            List<Content> listContents = new ArrayList<>();\n+            VisibleMemberTable vmt = configuration.getVisibleMemberTable((TypeElement) element);\n+            if (element.getKind() == ElementKind.ANNOTATION_TYPE) {\n+                \/\/ Handle annotation interfaces separately as required and optional elements\n+                \/\/ share a combined details section.\n+                addTypeDetailLink(FIELDS, !vmt.getVisibleMembers(FIELDS).isEmpty(), listContents);\n+                boolean hasAnnotationElements =\n+                        !vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_OPTIONAL).isEmpty()\n+                                || !vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_REQUIRED).isEmpty();\n+                addTypeDetailLink(ANNOTATION_TYPE_MEMBER_REQUIRED, hasAnnotationElements, listContents);\n+            } else {\n+                Set<VisibleMemberTable.Kind> detailSet = VisibleMemberTable.Kind.forDetailsOf(element.getKind());\n+                for (VisibleMemberTable.Kind kind : detailSet) {\n+                    addTypeDetailLink(kind, !vmt.getVisibleMembers(kind).isEmpty(), listContents);\n@@ -631,9 +384,7 @@\n-                if (!listContents.isEmpty()) {\n-                    Content li = HtmlTree.LI(contents.detailLabel);\n-                    li.add(Entity.NO_BREAK_SPACE);\n-                    tree.add(li);\n-                    addListToNav(listContents, tree);\n-                }\n-                break;\n-            default:\n-                break;\n+            }\n+            if (!listContents.isEmpty()) {\n+                Content li = HtmlTree.LI(contents.detailLabel);\n+                li.add(Entity.NO_BREAK_SPACE);\n+                tree.add(li);\n+                addListToNav(listContents, tree);\n+            }\n@@ -651,104 +402,12 @@\n-        switch (kind) {\n-            case CONSTRUCTORS:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.CONSTRUCTOR_DETAIL, contents.navConstructor));\n-                } else {\n-                    addContentToList(listContents, contents.navConstructor);\n-                }\n-                break;\n-            case ENUM_CONSTANTS:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.ENUM_CONSTANT_DETAIL, contents.navEnum));\n-                } else {\n-                    addContentToList(listContents, contents.navEnum);\n-                }\n-                break;\n-            case FIELDS:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.FIELD_DETAIL, contents.navField));\n-                } else {\n-                    addContentToList(listContents, contents.navField);\n-                }\n-                break;\n-            case METHODS:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.METHOD_DETAIL, contents.navMethod));\n-                } else {\n-                    addContentToList(listContents, contents.navMethod);\n-                }\n-                break;\n-            case PROPERTIES:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.PROPERTY_DETAIL, contents.navProperty));\n-                } else {\n-                    addContentToList(listContents, contents.navProperty);\n-                }\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-\n-    \/**\n-     * Adds the navigation Annotation Type detail link.\n-     *\n-     * @param listContents the list of contents to which the annotation detail will be added.\n-     *\/\n-    protected void addAnnotationTypeDetailLink(List<Content> listContents) {\n-        TypeElement annotationType = (TypeElement) element;\n-        AbstractMemberWriter writerField\n-                = ((AbstractMemberWriter) memberSummaryBuilder.\n-                        getMemberSummaryWriter(FIELDS));\n-        AbstractMemberWriter writerOptional\n-                = ((AbstractMemberWriter) memberSummaryBuilder.\n-                        getMemberSummaryWriter(ANNOTATION_TYPE_MEMBER_OPTIONAL));\n-        AbstractMemberWriter writerRequired\n-                = ((AbstractMemberWriter) memberSummaryBuilder.\n-                        getMemberSummaryWriter(ANNOTATION_TYPE_MEMBER_REQUIRED));\n-        if (writerField != null) {\n-            addAnnotationTypeDetailLink(FIELDS,\n-                    !configuration.utils.getFields(annotationType).isEmpty(),\n-                    listContents);\n-        } else {\n-            addContentToList(listContents, contents.navField);\n-        }\n-        if (writerOptional != null) {\n-            addAnnotationTypeDetailLink(ANNOTATION_TYPE_MEMBER_OPTIONAL,\n-                    !annotationType.getAnnotationMirrors().isEmpty(), listContents);\n-        } else if (writerRequired != null) {\n-            addAnnotationTypeDetailLink(ANNOTATION_TYPE_MEMBER_REQUIRED,\n-                    !annotationType.getAnnotationMirrors().isEmpty(), listContents);\n-        } else {\n-            addContentToList(listContents, contents.navAnnotationTypeMember);\n-        }\n-    }\n-\n-    \/**\n-     * Adds the navigation Annotation Type detail link.\n-     *\n-     * @param type the kind of member being documented\n-     * @param link true if the member details need to be linked\n-     * @param listContents the list of contents to which the annotation detail will be added.\n-     *\/\n-    protected void addAnnotationTypeDetailLink(VisibleMemberTable.Kind type, boolean link, List<Content> listContents) {\n-        switch (type) {\n-            case FIELDS:\n-                if (link) {\n-                    addContentToList(listContents,\n-                            links.createLink(HtmlIds.FIELD_DETAIL, contents.navField));\n-                } else {\n-                    addContentToList(listContents, contents.navField);\n-                }\n-                break;\n-            case ANNOTATION_TYPE_MEMBER_REQUIRED:\n-            case ANNOTATION_TYPE_MEMBER_OPTIONAL:\n-                if (link) {\n-                    addContentToList(listContents, links.createLink(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL,\n-                            contents.navAnnotationTypeMember));\n-                } else {\n-                    addContentToList(listContents, contents.navAnnotationTypeMember);\n-                }\n-                break;\n-            default:\n-                break;\n-        }\n+        addContentToList(listContents, switch (kind) {\n+            case CONSTRUCTORS -> links.createLink(HtmlIds.CONSTRUCTOR_DETAIL, contents.navConstructor, link);\n+            case ENUM_CONSTANTS -> links.createLink(HtmlIds.ENUM_CONSTANT_DETAIL, contents.navEnum, link);\n+            case FIELDS -> links.createLink(HtmlIds.FIELD_DETAIL, contents.navField, link);\n+            case METHODS -> links.createLink(HtmlIds.METHOD_DETAIL, contents.navMethod, link);\n+            case PROPERTIES -> links.createLink(HtmlIds.PROPERTY_DETAIL, contents.navProperty, link);\n+            case ANNOTATION_TYPE_MEMBER_REQUIRED,\n+                 ANNOTATION_TYPE_MEMBER_OPTIONAL ->\n+                    links.createLink(HtmlIds.ANNOTATION_TYPE_ELEMENT_DETAIL,\n+                            contents.navAnnotationTypeMember, link);\n+            default -> Text.EMPTY;\n+        });\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":63,"deletions":404,"binary":false,"changes":467,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.Collection;\n@@ -30,0 +32,3 @@\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n@@ -41,0 +46,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -71,0 +77,9 @@\n+    private List<PackageElement> relatedPackages;\n+    private SortedSet<TypeElement> interfaces;\n+    private SortedSet<TypeElement> classes;\n+    private SortedSet<TypeElement> enums;\n+    private SortedSet<TypeElement> exceptions;\n+    private SortedSet<TypeElement> errors;\n+    private SortedSet<TypeElement> records;\n+    private SortedSet<TypeElement> annotationTypes;\n+\n@@ -78,0 +93,5 @@\n+    \/\/ Maximum number of subpackages and sibling packages to list in related packages table\n+    private final static int MAX_SUBPACKAGES = 20;\n+    private final static int MAX_SIBLING_PACKAGES = 5;\n+\n+\n@@ -94,0 +114,1 @@\n+        computePackageData();\n@@ -129,0 +150,63 @@\n+    private void computePackageData() {\n+        relatedPackages = findRelatedPackages();\n+        boolean isSpecified = utils.isSpecified(packageElement);\n+        interfaces = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getInterfaces(packageElement))\n+                : configuration.typeElementCatalog.interfaces(packageElement));\n+        classes = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getOrdinaryClasses(packageElement))\n+                : configuration.typeElementCatalog.ordinaryClasses(packageElement));\n+        enums = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getEnums(packageElement))\n+                : configuration.typeElementCatalog.enums(packageElement));\n+        records = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getRecords(packageElement))\n+                : configuration.typeElementCatalog.records(packageElement));\n+        exceptions = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getExceptions(packageElement))\n+                : configuration.typeElementCatalog.exceptions(packageElement));\n+        errors = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getErrors(packageElement))\n+                : configuration.typeElementCatalog.errors(packageElement));\n+        annotationTypes = filterClasses(isSpecified\n+                ? utils.getTypeElementsAsSortedSet(utils.getAnnotationTypes(packageElement))\n+                : configuration.typeElementCatalog.annotationTypes(packageElement));\n+    }\n+\n+    private SortedSet<TypeElement> filterClasses(SortedSet<TypeElement> types) {\n+        List<TypeElement> typeList = types\n+                .stream()\n+                .filter(te -> utils.isCoreClass(te) && configuration.isGeneratedDoc(te))\n+                .collect(Collectors.toList());\n+        return utils.filterOutPrivateClasses(typeList, options.javafx());\n+    }\n+\n+    private List<PackageElement> findRelatedPackages() {\n+        String pkgName = packageElement.getQualifiedName().toString();\n+\n+        \/\/ always add super package\n+        int lastdot = pkgName.lastIndexOf('.');\n+        String pkgPrefix = lastdot > 0 ? pkgName.substring(0, lastdot) : null;\n+        List<PackageElement> packages = new ArrayList<>(\n+                filterPackages(p -> p.getQualifiedName().toString().equals(pkgPrefix)));\n+\n+        \/\/ add subpackages unless there are very many of them\n+        Pattern subPattern = Pattern.compile(pkgName.replace(\".\", \"\\\\.\") + \"\\\\.\\\\w+\");\n+        List<PackageElement> subpackages = filterPackages(\n+                p -> subPattern.matcher(p.getQualifiedName().toString()).matches());\n+        if (subpackages.size() <= MAX_SUBPACKAGES) {\n+            packages.addAll(subpackages);\n+        }\n+\n+        \/\/ only add sibling packages if we are beneath threshold, and number of siblings is beneath threshold as well\n+        if (pkgPrefix != null && packages.size() <= MAX_SIBLING_PACKAGES) {\n+            Pattern siblingPattern = Pattern.compile(pkgPrefix.replace(\".\", \"\\\\.\") + \"\\\\.\\\\w+\");\n+\n+            List<PackageElement> siblings = filterPackages(\n+                    p -> siblingPattern.matcher(p.getQualifiedName().toString()).matches());\n+            if (siblings.size() <= MAX_SIBLING_PACKAGES) {\n+                packages.addAll(siblings);\n+            }\n+        }\n+        return packages;\n+    }\n@@ -134,1 +218,22 @@\n-                .setNavLinkModule(linkContent);\n+                .setNavLinkModule(linkContent)\n+                .setSubNavLinks(() -> {\n+                    List<Content> list = new ArrayList<>();\n+                    if (!utils.getFullBody(packageElement).isEmpty() && !options.noComment()) {\n+                        list.add(HtmlTree.LI(links.createLink(HtmlIds.PACKAGE_DESCRIPTION, contents.navDescription)));\n+                    }\n+                    subNavLink(list, relatedPackages, HtmlIds.RELATED_PACKAGE_SUMMARY, contents.navRelated);\n+                    subNavLink(list, interfaces, HtmlIds.INTERFACE_SUMMARY, contents.interfaces);\n+                    subNavLink(list, classes, HtmlIds.CLASS_SUMMARY, contents.classes);\n+                    subNavLink(list, enums, HtmlIds.ENUM_SUMMARY, contents.navEnums);\n+                    subNavLink(list, records, HtmlIds.RECORD_SUMMARY, contents.navRecords);\n+                    subNavLink(list, exceptions, HtmlIds.EXCEPTION_SUMMARY, contents.exceptions);\n+                    subNavLink(list, errors, HtmlIds.ERROR_SUMMARY, contents.errors);\n+                    subNavLink(list, annotationTypes, HtmlIds.ANNOTATION_TYPE_SUMMARY, contents.navAnnotations);\n+                    return list;\n+                });\n+    }\n+\n+    private void subNavLink(List<Content> list, Collection<? extends Element> elements, HtmlId id, Content label) {\n+        if (elements != null && !elements.isEmpty()) {\n+            list.add(HtmlTree.LI(links.createLink(id, label)));\n+        }\n@@ -166,1 +271,1 @@\n-    public void addRelatedPackagesSummary(List<PackageElement> relatedPackages, Content summaryContentTree) {\n+    public void addRelatedPackagesSummary(Content summaryContentTree) {\n@@ -176,1 +281,1 @@\n-    public void addInterfaceSummary(SortedSet<TypeElement> interfaces, Content summaryContentTree) {\n+    public void addInterfaceSummary(Content summaryContentTree) {\n@@ -178,1 +283,2 @@\n-        addClassesSummary(interfaces, contents.interfaceSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(interfaces, contents.interfaceSummary, tableHeader, summaryContentTree,\n+                HtmlIds.INTERFACE_SUMMARY);\n@@ -182,1 +288,1 @@\n-    public void addClassSummary(SortedSet<TypeElement> classes, Content summaryContentTree) {\n+    public void addClassSummary(Content summaryContentTree) {\n@@ -184,1 +290,2 @@\n-        addClassesSummary(classes, contents.classSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(classes, contents.classSummary, tableHeader, summaryContentTree,\n+                HtmlIds.CLASS_SUMMARY);\n@@ -188,1 +295,1 @@\n-    public void addEnumSummary(SortedSet<TypeElement> enums, Content summaryContentTree) {\n+    public void addEnumSummary(Content summaryContentTree) {\n@@ -190,1 +297,2 @@\n-        addClassesSummary(enums, contents.enumSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(enums, contents.enumSummary, tableHeader, summaryContentTree,\n+                HtmlIds.ENUM_SUMMARY);\n@@ -194,1 +302,1 @@\n-    public void addRecordSummary(SortedSet<TypeElement> records, Content summaryContentTree) {\n+    public void addRecordSummary(Content summaryContentTree) {\n@@ -196,1 +304,2 @@\n-        addClassesSummary(records, contents.recordSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(records, contents.recordSummary, tableHeader, summaryContentTree,\n+                HtmlIds.RECORD_SUMMARY);\n@@ -200,1 +309,1 @@\n-    public void addExceptionSummary(SortedSet<TypeElement> exceptions, Content summaryContentTree) {\n+    public void addExceptionSummary(Content summaryContentTree) {\n@@ -202,1 +311,2 @@\n-        addClassesSummary(exceptions, contents.exceptionSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(exceptions, contents.exceptionSummary, tableHeader, summaryContentTree,\n+                HtmlIds.EXCEPTION_SUMMARY);\n@@ -206,1 +316,1 @@\n-    public void addErrorSummary(SortedSet<TypeElement> errors, Content summaryContentTree) {\n+    public void addErrorSummary(Content summaryContentTree) {\n@@ -208,1 +318,2 @@\n-        addClassesSummary(errors, contents.errorSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(errors, contents.errorSummary, tableHeader, summaryContentTree,\n+                HtmlIds.ERROR_SUMMARY);\n@@ -212,1 +323,1 @@\n-    public void addAnnotationTypeSummary(SortedSet<TypeElement> annoTypes, Content summaryContentTree) {\n+    public void addAnnotationTypeSummary(Content summaryContentTree) {\n@@ -214,1 +325,2 @@\n-        addClassesSummary(annoTypes, contents.annotationTypeSummary, tableHeader, summaryContentTree);\n+        addClassesSummary(annotationTypes, contents.annotationTypeSummary, tableHeader, summaryContentTree,\n+                 HtmlIds.ANNOTATION_TYPE_SUMMARY);\n@@ -218,1 +330,1 @@\n-            TableHeader tableHeader, Content summaryContentTree) {\n+            TableHeader tableHeader, Content summaryContentTree, HtmlId id) {\n@@ -226,3 +338,0 @@\n-                if (!utils.isCoreClass(klass) || !configuration.isGeneratedDoc(klass)) {\n-                    continue;\n-                }\n@@ -244,1 +353,1 @@\n-            summaryContentTree.add(HtmlTree.LI(table));\n+            summaryContentTree.add(HtmlTree.LI(table).setId(id));\n@@ -287,1 +396,2 @@\n-            summaryContentTree.add(HtmlTree.LI(table));\n+            summaryContentTree.add(HtmlTree.LI(table)\n+                    .setId(HtmlIds.RELATED_PACKAGE_SUMMARY));\n@@ -343,0 +453,6 @@\n+\n+    private List<PackageElement> filterPackages(Predicate<? super PackageElement> filter) {\n+        return configuration.packages.stream()\n+                .filter(p -> p != packageElement && filter.test(p))\n+                .collect(Collectors.toList());\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":138,"deletions":22,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-     * @param id      the position of the link in the file\n-     * @param label      the content for the link\n+     * @param id    the position of the link in the file\n+     * @param label the content for the link\n@@ -66,0 +66,13 @@\n+    \/**\n+     * Creates a link of the form {@code <a href=\"#id\">label<\/a>} if {@code link}\n+     * is {@code true}, or else just returns {@code label}.\n+     *\n+     * @param id    the position of the link in the file\n+     * @param label the content for the link\n+     * @param link  whether to create a link or just return the label\n+     * @return a content tree for the link or just the label\n+     *\/\n+    public Content createLink(HtmlId id, Content label, boolean link) {\n+        return link ? createLink(id, label) : label;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Links.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-doclet.navModuleDescription=Description\n+doclet.Package_Sub_Nav=Package:\n+doclet.navDescription=Description\n@@ -63,0 +64,1 @@\n+doclet.navAnnotations=Annotations\n@@ -66,0 +68,1 @@\n+doclet.navEnums=Enums\n@@ -73,0 +76,2 @@\n+doclet.navRecords=Records\n+doclet.navRelated=Related\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-     * @param relatedPackages the interfaces to document.\n@@ -74,1 +73,1 @@\n-    void addRelatedPackagesSummary(List<PackageElement> relatedPackages, Content summaryContentTree);\n+    void addRelatedPackagesSummary(Content summaryContentTree);\n@@ -79,1 +78,0 @@\n-     * @param interfaces the interfaces to document.\n@@ -82,1 +80,1 @@\n-    void addInterfaceSummary(SortedSet<TypeElement> interfaces, Content summaryContentTree);\n+    void addInterfaceSummary(Content summaryContentTree);\n@@ -87,1 +85,0 @@\n-     * @param classes the classes to document.\n@@ -90,1 +87,1 @@\n-    void addClassSummary(SortedSet<TypeElement> classes, Content summaryContentTree);\n+    void addClassSummary(Content summaryContentTree);\n@@ -95,1 +92,0 @@\n-     * @param enums the enums to document.\n@@ -98,1 +94,1 @@\n-    void addEnumSummary(SortedSet<TypeElement> enums, Content summaryContentTree);\n+    void addEnumSummary(Content summaryContentTree);\n@@ -103,1 +99,0 @@\n-     * @param records the records to document.\n@@ -106,1 +101,1 @@\n-    void addRecordSummary(SortedSet<TypeElement> records, Content summaryContentTree);\n+    void addRecordSummary(Content summaryContentTree);\n@@ -111,1 +106,0 @@\n-     * @param exceptions the exceptions to document.\n@@ -114,1 +108,1 @@\n-    void addExceptionSummary(SortedSet<TypeElement> exceptions, Content summaryContentTree);\n+    void addExceptionSummary(Content summaryContentTree);\n@@ -119,1 +113,0 @@\n-     * @param errors the errors to document.\n@@ -122,1 +115,1 @@\n-    void addErrorSummary(SortedSet<TypeElement> errors, Content summaryContentTree);\n+    void addErrorSummary(Content summaryContentTree);\n@@ -127,1 +120,0 @@\n-     * @param annoTypes the annotation types to document.\n@@ -130,1 +122,1 @@\n-    void addAnnotationTypeSummary(SortedSet<TypeElement> annoTypes, Content summaryContentTree);\n+    void addAnnotationTypeSummary(Content summaryContentTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/PackageSummaryWriter.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -169,9 +169,0 @@\n-    \/**\n-     * Returns true if there are members of the given kind, false otherwise.\n-     * @param kind\n-     * @return true if there are members of the given kind, false otherwise\n-     *\/\n-    public boolean hasMembers(VisibleMemberTable.Kind kind) {\n-        return !getVisibleMembers(kind).isEmpty();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MemberSummaryBuilder.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,8 +28,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.SortedSet;\n-import java.util.function.Predicate;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n@@ -37,1 +29,0 @@\n-import javax.lang.model.element.TypeElement;\n@@ -65,4 +56,0 @@\n-    \/\/ Maximum number of subpackages and sibling packages to list in related packages table\n-    private final static int MAX_SUBPACKAGES = 20;\n-    private final static int MAX_SIBLING_PACKAGES = 5;\n-\n@@ -176,4 +163,1 @@\n-        List<PackageElement> packages = findRelatedPackages();\n-        if (!packages.isEmpty()) {\n-            packageWriter.addRelatedPackagesSummary(packages, summariesList);\n-        }\n+        packageWriter.addRelatedPackagesSummary(summariesList);\n@@ -188,7 +172,1 @@\n-        SortedSet<TypeElement> ilist = utils.isSpecified(packageElement)\n-                        ? utils.getTypeElementsAsSortedSet(utils.getInterfaces(packageElement))\n-                        : configuration.typeElementCatalog.interfaces(packageElement);\n-        SortedSet<TypeElement> interfaces = utils.filterOutPrivateClasses(ilist, options.javafx());\n-        if (!interfaces.isEmpty()) {\n-            packageWriter.addInterfaceSummary(interfaces, summariesList);\n-        }\n+        packageWriter.addInterfaceSummary(summariesList);\n@@ -203,7 +181,1 @@\n-        SortedSet<TypeElement> clist = utils.isSpecified(packageElement)\n-            ? utils.getTypeElementsAsSortedSet(utils.getOrdinaryClasses(packageElement))\n-            : configuration.typeElementCatalog.ordinaryClasses(packageElement);\n-        SortedSet<TypeElement> classes = utils.filterOutPrivateClasses(clist, options.javafx());\n-        if (!classes.isEmpty()) {\n-            packageWriter.addClassSummary(classes, summariesList);\n-        }\n+        packageWriter.addClassSummary(summariesList);\n@@ -218,7 +190,1 @@\n-        SortedSet<TypeElement> elist = utils.isSpecified(packageElement)\n-            ? utils.getTypeElementsAsSortedSet(utils.getEnums(packageElement))\n-            : configuration.typeElementCatalog.enums(packageElement);\n-        SortedSet<TypeElement> enums = utils.filterOutPrivateClasses(elist, options.javafx());\n-        if (!enums.isEmpty()) {\n-            packageWriter.addEnumSummary(enums, summariesList);\n-        }\n+        packageWriter.addEnumSummary(summariesList);\n@@ -233,7 +199,1 @@\n-        SortedSet<TypeElement> rlist = utils.isSpecified(packageElement)\n-                ? utils.getTypeElementsAsSortedSet(utils.getRecords(packageElement))\n-                : configuration.typeElementCatalog.records(packageElement);\n-        SortedSet<TypeElement> records = utils.filterOutPrivateClasses(rlist, options.javafx());\n-        if (!records.isEmpty()) {\n-            packageWriter.addRecordSummary(records, summariesList);\n-        }\n+        packageWriter.addRecordSummary(summariesList);\n@@ -248,9 +208,1 @@\n-        Set<TypeElement> iexceptions =\n-            utils.isSpecified(packageElement)\n-                ? utils.getTypeElementsAsSortedSet(utils.getExceptions(packageElement))\n-                : configuration.typeElementCatalog.exceptions(packageElement);\n-        SortedSet<TypeElement> exceptions = utils.filterOutPrivateClasses(iexceptions,\n-                options.javafx());\n-        if (!exceptions.isEmpty()) {\n-            packageWriter.addExceptionSummary(exceptions, summariesList);\n-        }\n+        packageWriter.addExceptionSummary(summariesList);\n@@ -265,8 +217,1 @@\n-        Set<TypeElement> ierrors =\n-            utils.isSpecified(packageElement)\n-                ? utils.getTypeElementsAsSortedSet(utils.getErrors(packageElement))\n-                : configuration.typeElementCatalog.errors(packageElement);\n-        SortedSet<TypeElement> errors = utils.filterOutPrivateClasses(ierrors, options.javafx());\n-        if (!errors.isEmpty()) {\n-            packageWriter.addErrorSummary(errors, summariesList);\n-        }\n+        packageWriter.addErrorSummary(summariesList);\n@@ -281,9 +226,1 @@\n-        SortedSet<TypeElement> iannotationTypes =\n-            utils.isSpecified(packageElement)\n-                ? utils.getTypeElementsAsSortedSet(utils.getAnnotationTypes(packageElement))\n-                : configuration.typeElementCatalog.annotationTypes(packageElement);\n-        SortedSet<TypeElement> annotationTypes = utils.filterOutPrivateClasses(iannotationTypes,\n-                options.javafx());\n-        if (!annotationTypes.isEmpty()) {\n-            packageWriter.addAnnotationTypeSummary(annotationTypes, summariesList);\n-        }\n+        packageWriter.addAnnotationTypeSummary(summariesList);\n@@ -316,36 +253,0 @@\n-\n-    private List<PackageElement> findRelatedPackages() {\n-        String pkgName = packageElement.getQualifiedName().toString();\n-\n-        \/\/ always add super package\n-        int lastdot = pkgName.lastIndexOf('.');\n-        String pkgPrefix = lastdot > 0 ? pkgName.substring(0, lastdot) : null;\n-        List<PackageElement> packages = new ArrayList<>(\n-                filterPackages(p -> p.getQualifiedName().toString().equals(pkgPrefix)));\n-\n-        \/\/ add subpackages unless there are very many of them\n-        Pattern subPattern = Pattern.compile(pkgName.replace(\".\", \"\\\\.\") + \"\\\\.\\\\w+\");\n-        List<PackageElement> subpackages = filterPackages(\n-                p -> subPattern.matcher(p.getQualifiedName().toString()).matches());\n-        if (subpackages.size() <= MAX_SUBPACKAGES) {\n-            packages.addAll(subpackages);\n-        }\n-\n-        \/\/ only add sibling packages if we are beneath threshold, and number of siblings is beneath threshold as well\n-        if (pkgPrefix != null && packages.size() <= MAX_SIBLING_PACKAGES) {\n-            Pattern siblingPattern = Pattern.compile(pkgPrefix.replace(\".\", \"\\\\.\") + \"\\\\.\\\\w+\");\n-\n-            List<PackageElement> siblings = filterPackages(\n-                    p -> siblingPattern.matcher(p.getQualifiedName().toString()).matches());\n-            if (siblings.size() <= MAX_SIBLING_PACKAGES) {\n-                packages.addAll(siblings);\n-            }\n-        }\n-        return packages;\n-    }\n-\n-    private List<PackageElement> filterPackages(Predicate<? super PackageElement> filter) {\n-        return configuration.packages.stream()\n-                .filter(p -> p != packageElement && filter.test(p))\n-                .collect(Collectors.toList());\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/PackageSummaryBuilder.java","additions":8,"deletions":107,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -109,2 +110,32 @@\n-        public static final EnumSet<Kind> summarySet = EnumSet.range(INNER_CLASSES, METHODS);\n-        public static final EnumSet<Kind> detailSet = EnumSet.range(ENUM_CONSTANTS, METHODS);\n+        private static final EnumSet<Kind> defaultSummarySet = EnumSet.of(\n+                INNER_CLASSES, FIELDS, CONSTRUCTORS, METHODS);\n+        private static final EnumSet<Kind> enumSummarySet = EnumSet.of(\n+                INNER_CLASSES, ENUM_CONSTANTS, FIELDS, METHODS);\n+        private static final EnumSet<Kind> annotationSummarySet = EnumSet.of(\n+                FIELDS, ANNOTATION_TYPE_MEMBER_OPTIONAL, ANNOTATION_TYPE_MEMBER_REQUIRED);\n+        private static final EnumSet<Kind> defaultDetailSet = EnumSet.of(\n+                FIELDS, CONSTRUCTORS, METHODS);\n+        private static final EnumSet<Kind> enumDetailSet = EnumSet.of(\n+                ENUM_CONSTANTS, FIELDS, METHODS);\n+\n+        \/**\n+         * {@return the set of possible member kinds for the summaries section of a type element}\n+         * @param kind the kind of type element being documented\n+         *\/\n+        public static Set<Kind> forSummariesOf(ElementKind kind) {\n+            return switch (kind) {\n+                case ANNOTATION_TYPE -> annotationSummarySet;\n+                case ENUM -> enumSummarySet;\n+                default -> defaultSummarySet;\n+            };\n+        }\n+\n+        \/**\n+         * {@return the set of possible member kinds for the details section of a type element}\n+         * @param kind the kind of type element being documented\n+         *\/\n+        public static Set<Kind> forDetailsOf(ElementKind kind) {\n+            return kind == ElementKind.ENUM\n+                    ? enumDetailSet\n+                    : defaultDetailSet;\n+        }\n@@ -121,3 +152,3 @@\n-    private List<VisibleMemberTable> allSuperclasses;\n-    private List<VisibleMemberTable> allSuperinterfaces;\n-    private List<VisibleMemberTable> parents;\n+    private final List<VisibleMemberTable> allSuperclasses;\n+    private final List<VisibleMemberTable> allSuperinterfaces;\n+    private final List<VisibleMemberTable> parents;\n@@ -126,1 +157,1 @@\n-    private Map<ExecutableElement, PropertyMembers> propertyMap = new HashMap<>();\n+    private final Map<ExecutableElement, PropertyMembers> propertyMap = new HashMap<>();\n@@ -297,1 +328,2 @@\n-     * Returns true if this table contains visible members.\n+     * Returns true if this table contains visible members of\n+     * any kind, including inherited members.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                        <li>\n+                        <li id=\"class-summary\">\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlVersion\/TestHtmlVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8189841 8253117\n+ * @bug 8189841 8253117 8263507\n@@ -29,0 +29,1 @@\n+ * @summary Add links to page sections in sub-navigation of package summaries\n@@ -44,0 +45,45 @@\n+    @Test\n+    public void testSummaryLinks() {\n+        javadoc(\"-d\", \"out-links\",\n+                \"-sourcepath\", testSrc,\n+                \"-subpackages\", \"pkg:pkg1\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"pkg\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"sub-nav\">\n+                    <div>\n+                    <ul class=\"sub-nav-list\">\n+                    <li>Package:&nbsp;<\/li>\n+                    <li><a href=\"#class-summary\">Classes<\/a><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+        checkOutput(\"pkg1\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"sub-nav\">\n+                    <div>\n+                    <ul class=\"sub-nav-list\">\n+                    <li>Package:&nbsp;<\/li>\n+                    <li><a href=\"#package-description\">Description<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#related-package-summary\">Related<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#interface-summary\">Interfaces<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#class-summary\">Classes<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#enum-summary\">Enums<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#record-summary\">Records<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#exception-summary\">Exceptions<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#error-summary\">Errors<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#annotation-interface-summary\">Annotations<\/a><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+        checkOutput(\"pkg1\/sub\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"sub-nav\">\n+                    <div>\n+                    <ul class=\"sub-nav-list\">\n+                    <li>Package:&nbsp;<\/li>\n+                    <li><a href=\"#related-package-summary\">Related<\/a>&nbsp;|&nbsp;<\/li>\n+                    <li><a href=\"#class-summary\">Classes<\/a><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+    }\n+\n@@ -46,1 +92,1 @@\n-        javadoc(\"-d\", \"out\",\n+        javadoc(\"-d\", \"out-stripes\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/TestPackageSummary.java","additions":49,"deletions":3,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public @interface Annotation0 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Annotation0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public class Class0 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Class0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public enum Enum0 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Enum0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public class Error0 extends Error {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Error0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public class Exception0 extends Exception {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Exception0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public interface Interface0 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Interface0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+public record Record0() {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/Record0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+<html>\n+<body>\n+Test package\n+<\/body>\n+<\/html>\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/package.html","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1.sub;\n+\n+public class Sub0 {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPackageSummary\/pkg1\/sub\/Sub0.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"}]}