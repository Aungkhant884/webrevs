{"files":[{"patch":"@@ -75,0 +75,2 @@\n+                                \/\/ only add trust anchor if fingerprint can\n+                                \/\/ be calculated\n@@ -77,0 +79,1 @@\n+                                    certIssuers.add(cert.getSubjectX500Principal());\n@@ -78,1 +81,0 @@\n-                                certIssuers.add(cert.getSubjectX500Principal());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AnchorCertificates.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+        \/\/ if fingerprint cannot be calculated, also treat it as untrusted\n@@ -83,1 +84,1 @@\n-        return (key == null ? false : props.containsKey(key));\n+        return (key == null || props.containsKey(key));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/UntrustedCertificates.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -161,1 +161,5 @@\n-        if (fp != null && FINGERPRINTS.contains(fp)) {\n+        if (fp == null) {\n+            throw new ValidatorException(\"Cannot generate fingerprint for \"\n+                + \"trust anchor of TLS server certificate\");\n+        }\n+        if (FINGERPRINTS.contains(fp)) {\n@@ -169,7 +173,9 @@\n-                if (fp != null) {\n-                    LocalDate distrustDate = EXEMPT_SUBCAS.get(fp);\n-                    if (distrustDate != null) {\n-                        \/\/ reject if certificate is issued after specified date\n-                        checkNotBefore(ldNotBefore, distrustDate, anchor);\n-                        return; \/\/ success\n-                    }\n+                if (fp == null) {\n+                    throw new ValidatorException(\"Cannot generate fingerprint \"\n+                        + \"for intermediate CA of TLS server certificate\");\n+                }\n+                LocalDate distrustDate = EXEMPT_SUBCAS.get(fp);\n+                if (distrustDate != null) {\n+                    \/\/ reject if certificate is issued after specified date\n+                    checkNotBefore(ldNotBefore, distrustDate, anchor);\n+                    return; \/\/ success\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/SymantecTLSPolicy.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1922,12 +1922,10 @@\n-            x -> getFingerprintInternal(x, debug));\n-    }\n-\n-    private String getFingerprintInternal(String algorithm, Debug debug) {\n-        try {\n-            return getFingerprint(algorithm, getEncodedInternal(), debug);\n-        } catch (CertificateEncodingException e) {\n-            if (debug != null) {\n-                debug.println(\"Cannot encode certificate: \" + e);\n-            }\n-            return null;\n-        }\n+            x -> {\n+                try {\n+                    return getFingerprintInternal(x, getEncodedInternal(), debug);\n+                } catch (CertificateEncodingException e) {\n+                    if (debug != null) {\n+                        debug.println(\"Cannot encode certificate: \" + e);\n+                    }\n+                    return null;\n+                }\n+            });\n@@ -1936,2 +1934,2 @@\n-    private static String getFingerprint(String algorithm, byte[] encodedCert,\n-            Debug debug) {\n+    private static String getFingerprintInternal(String algorithm,\n+            byte[] encodedCert, Debug debug) {\n@@ -1966,1 +1964,1 @@\n-                return getFingerprint(algorithm, cert.getEncoded(), debug);\n+                return getFingerprintInternal(algorithm, cert.getEncoded(), debug);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"}]}