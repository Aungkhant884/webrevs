{"files":[{"patch":"@@ -714,8 +714,1 @@\n-                try {\n-                    \/\/ close underlying socket if created\n-                    if (created) {\n-                        impl.close();\n-                    }\n-                } finally {\n-                    closed = true;\n-                }\n+                closed = true;\n@@ -723,0 +716,4 @@\n+                \/\/ close underlying socket if created\n+                if (created) {\n+                    impl.close();\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8278339\n+ * @summary Test that ServerSocket::isClosed returns true after async close\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+public class IsClosedAfterAsyncClose {\n+\n+    private static final int ITERATIONS = 100;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            System.out.printf(\"Test %d...%n\", i);\n+\n+            \/\/ create listener bound to the loopback address\n+            ServerSocket listener = new ServerSocket();\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            listener.bind(new InetSocketAddress(loopback, 0));\n+\n+            \/\/ task to close listener after a delay\n+            Runnable closeListener = () -> {\n+                try {\n+                    Thread.sleep(100);\n+                    listener.close();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            };\n+\n+            \/\/ main thread blocks in accept. When listener is closed then accept\n+            \/\/ should wakeup with an IOException and isClosed should be true.\n+            try (listener) {\n+                Thread closer = new Thread(closeListener);\n+                closer.start();\n+                try {\n+                    while (true) {\n+                        Socket s = listener.accept();\n+                        \/\/ close spurious connection\n+                        s.close();\n+                    }\n+                } catch (IOException ioe) {\n+                    if (!listener.isClosed()) {\n+                        throw new RuntimeException(\"isClosed returned false!!\");\n+                    }\n+                } finally {\n+                    closer.join();\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/net\/ServerSocket\/IsClosedAfterAsyncClose.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}