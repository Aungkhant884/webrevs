{"files":[{"patch":"@@ -28,0 +28,11 @@\n+import java.awt.event.KeyEvent;\n+import java.awt.FontMetrics;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JComponent;\n+import javax.swing.JToolTip;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+import sun.swing.SwingUtilities2;\n+\n@@ -34,0 +45,11 @@\n+\n+    \/**\n+     * Delimiter for Accelerator String.\n+     *\/\n+    private String acceleratorDelimiter;\n+\n+    \/**\n+     * The space between strings.\n+     *\/\n+    public static final int padSpaceBetweenStrings = 12;\n+\n@@ -38,0 +60,63 @@\n+\n+    \/**\n+     * If the accelerator is hidden, the method returns {@code true},\n+     * otherwise, returns {@code false}.\n+     *\n+     * @return {@code true} if the accelerator is hidden.\n+     *\/\n+    protected boolean isAcceleratorHidden() {\n+        Boolean b = (Boolean)UIManager.get(\"ToolTip.hideAccelerator\");\n+        return b != null && b.booleanValue();\n+    }\n+\n+    \/**\n+     * Returns the accelerator string.\n+     *\n+     * @param tip ToolTip.\n+     * @return the accelerator string.\n+     *\/\n+\n+    public String getAcceleratorString(JToolTip tip) {\n+\n+        if (tip == null || isAcceleratorHidden()) {\n+            return \"\";\n+        }\n+        JComponent comp = tip.getComponent();\n+        if (!(comp instanceof AbstractButton)) {\n+            return \"\";\n+        }\n+\n+        KeyStroke[] keys = comp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).keys();\n+        if (keys == null) {\n+            return \"\";\n+        }\n+\n+        String controlKeyStr = \"\";\n+\n+        acceleratorDelimiter = UIManager.getString( \"MenuItem.acceleratorDelimiter\" );\n+        if ( acceleratorDelimiter == null ) { acceleratorDelimiter = \"-\"; }\n+\n+        for (int i = 0; i < keys.length; i++) {\n+            int mod = keys[i].getModifiers();\n+            controlKeyStr = KeyEvent.getModifiersExText(mod) +\n+                    acceleratorDelimiter +\n+                    KeyEvent.getKeyText(keys[i].getKeyCode());\n+            break;\n+        }\n+\n+        return controlKeyStr;\n+    }\n+\n+    \/**\n+     * Calculates the Accelerator Spacing Value.\n+     * @param c JComponent\n+     * @param fm FontMetrics\n+     * @param accel String\n+     * @return Accelerator Spacing.\n+     *\/\n+    protected int calcAcceleratorSpacing(JComponent c, FontMetrics fm, String accel) {\n+        return accel.isEmpty()\n+                ? 0\n+                : padSpaceBetweenStrings +\n+                SwingUtilities2.stringWidth(c, fm, accel);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/ToolTipUI.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.awt.event.KeyEvent;\n@@ -50,0 +51,7 @@\n+    private JToolTip tip;\n+\n+    \/**\n+     * The space between strings.\n+     *\/\n+    public static final int padSpaceBetweenStrings = 12;\n+\n@@ -79,0 +87,3 @@\n+\n+        tip = (JToolTip)c;\n+\n@@ -86,0 +97,1 @@\n+        tip = null;\n@@ -155,0 +167,1 @@\n+        JToolTip tip = (JToolTip)c;\n@@ -157,0 +170,1 @@\n+        int accelBL;\n@@ -165,1 +179,5 @@\n-        Insets insets = c.getInsets();\n+        String accelString = getAcceleratorString(tip);\n+        FontMetrics accelMetrics = SwingUtilities2.getFontMetrics(c, g, font);\n+        int accelSpacing = calcAcceleratorSpacing(c, accelMetrics, accelString);\n+\n+        Insets insets = ((JToolTip)c).getInsets();\n@@ -167,4 +185,9 @@\n-            insets.left + 3,\n-            insets.top,\n-            size.width - (insets.left + insets.right) - 6,\n-            size.height - (insets.top + insets.bottom));\n+                insets.left + 3,\n+                insets.top,\n+                size.width - (insets.left + insets.right) - 6 - accelSpacing,\n+                size.height - (insets.top + insets.bottom));\n+\n+        if (paintTextR.width <= 0 || paintTextR.height <= 0) {\n+            return;\n+        }\n+\n@@ -174,0 +197,2 @@\n+            accelBL = BasicHTML.getHTMLBaseline(v, paintTextR.width,\n+                    paintTextR.height);\n@@ -177,1 +202,12 @@\n-                                  paintTextR.y + metrics.getAscent());\n+                    paintTextR.y + metrics.getAscent());\n+            accelBL = metrics.getAscent();\n+        }\n+\n+        if (!accelString.isEmpty()) {\n+            g.setFont(font);\n+            SwingUtilities2.drawString(tip, g, accelString,\n+                    tip.getWidth() - 1 - insets.right\n+                            - accelSpacing\n+                            + padSpaceBetweenStrings\n+                            - 3,\n+                    paintTextR.y + accelBL);\n@@ -187,1 +223,1 @@\n-                                           insets.top+insets.bottom);\n+                insets.top+insets.bottom);\n@@ -203,0 +239,6 @@\n+\n+        String key = getAcceleratorString((JToolTip)c);\n+        if (!key.isEmpty()) {\n+            prefSize.width += calcAcceleratorSpacing(c, c.getFontMetrics(font), key);\n+        }\n+\n@@ -206,0 +248,25 @@\n+    \/**\n+     * get Accelerator String\n+     * @param tip JToolTip Object\n+     * @return Accelerator String\n+     *\/\n+    public String getAcceleratorString(JToolTip tip) {\n+        this.tip = tip;\n+\n+        String retValue = super.getAcceleratorString(tip);\n+\n+        this.tip = null;\n+        return retValue;\n+    }\n+\n+    \/**\n+     * get Accelerator String\n+     * @return Accelerator String\n+     *\/\n+    public String getAcceleratorString() {\n+\n+        String retValue = super.getAcceleratorString(this.tip);\n+\n+        return retValue;\n+    }\n+\n@@ -245,1 +312,1 @@\n-                                          \"ToolTip.foregroundInactive\");\n+                        \"ToolTip.foregroundInactive\");\n@@ -249,1 +316,1 @@\n-                                          \"ToolTip.foreground\");\n+                        \"ToolTip.foreground\");\n@@ -254,1 +321,1 @@\n-                                      \"ToolTip.foreground\");\n+                    \"ToolTip.foreground\");\n@@ -260,1 +327,1 @@\n-                                 PropertyChangeListener {\n+            PropertyChangeListener {\n@@ -264,1 +331,1 @@\n-                || \"font\".equals(name) || SwingUtilities2.isScaleChanged(e)) {\n+                    || \"font\".equals(name) || SwingUtilities2.isScaleChanged(e)) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicToolTipUI.java","additions":79,"deletions":12,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-    private String acceleratorDelimiter;\n@@ -88,2 +87,0 @@\n-        acceleratorDelimiter = UIManager.getString( \"MenuItem.acceleratorDelimiter\" );\n-        if ( acceleratorDelimiter == null ) { acceleratorDelimiter = \"-\"; }\n@@ -113,1 +110,1 @@\n-        int accelSpacing = calcAccelSpacing(c, accelMetrics, accelString);\n+        int accelSpacing = calcAcceleratorSpacing(c, accelMetrics, accelString);\n@@ -150,7 +147,0 @@\n-    private int calcAccelSpacing(JComponent c, FontMetrics fm, String accel) {\n-        return accel.isEmpty()\n-               ? 0\n-               : padSpaceBetweenStrings +\n-                 SwingUtilities2.stringWidth(c, fm, accel);\n-    }\n-\n@@ -159,5 +149,0 @@\n-\n-        String key = getAcceleratorString((JToolTip)c);\n-        if (!key.isEmpty()) {\n-            d.width += calcAccelSpacing(c, c.getFontMetrics(smallFont), key);\n-        }\n@@ -166,60 +151,0 @@\n-\n-    \/**\n-     * If the accelerator is hidden, the method returns {@code true},\n-     * otherwise, returns {@code false}.\n-     *\n-     * @return {@code true} if the accelerator is hidden.\n-     *\/\n-    protected boolean isAcceleratorHidden() {\n-        Boolean b = (Boolean)UIManager.get(\"ToolTip.hideAccelerator\");\n-        return b != null && b.booleanValue();\n-    }\n-\n-    private String getAcceleratorString(JToolTip tip) {\n-        this.tip = tip;\n-\n-        String retValue = getAcceleratorString();\n-\n-        this.tip = null;\n-        return retValue;\n-    }\n-\n-    \/**\n-     * Returns the accelerator string.\n-     *\n-     * @return the accelerator string.\n-     *\/\n-    \/\/ NOTE: This requires the tip field to be set before this is invoked.\n-    \/\/ As MetalToolTipUI is shared between all JToolTips the tip field is\n-    \/\/ set appropriately before this is invoked. Unfortunately this means\n-    \/\/ that subclasses that randomly invoke this method will see varying\n-    \/\/ results. If this becomes an issue, MetalToolTipUI should no longer be\n-    \/\/ shared.\n-    @SuppressWarnings(\"deprecation\")\n-    public String getAcceleratorString() {\n-        if (tip == null || isAcceleratorHidden()) {\n-            return \"\";\n-        }\n-        JComponent comp = tip.getComponent();\n-        if (!(comp instanceof AbstractButton)) {\n-            return \"\";\n-        }\n-\n-        KeyStroke[] keys = comp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).keys();\n-        if (keys == null) {\n-            return \"\";\n-        }\n-\n-        String controlKeyStr = \"\";\n-\n-        for (int i = 0; i < keys.length; i++) {\n-            int mod = keys[i].getModifiers();\n-            controlKeyStr = KeyEvent.getKeyModifiersText(mod) +\n-                            acceleratorDelimiter +\n-                            KeyEvent.getKeyText(keys[i].getKeyCode());\n-            break;\n-        }\n-\n-        return controlKeyStr;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalToolTipUI.java","additions":1,"deletions":76,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,215 @@\n+\/* @test\n+   @bug 4380543\n+   @requires (os.family == \"windows\")\n+   @summary setMargin() does not work for AbstractButton\n+   @modules java.desktop\/com.sun.java.swing.plaf.motif\n+            java.desktop\/com.sun.java.swing.plaf.windows\n+   @author Andrey Pikalev\n+   @key headful\n+   @run main\/manual bug4380543\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.FlowLayout;\n+import java.awt.Insets;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class bug4380543 {\n+    static testFrame testObj;\n+    static JFrame frame;\n+    static final CountDownLatch latch = new CountDownLatch(1);\n+    private static AtomicReference<Boolean> testResult = new AtomicReference<>(false);\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                try {\n+                    testObj = new testFrame();\n+                    createUI();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        boolean status = latch.await(5, TimeUnit.MINUTES);\n+\n+        if (!status) {\n+            System.out.println(\"Test timed out.\");\n+        }\n+\n+        onCompletion(testResult);\n+\n+    }\n+\n+    public static void createUI() throws Exception {\n+        frame = new JFrame();\n+        JPanel mainControlPanel = new JPanel(new BorderLayout());\n+        JPanel resultButtonPanel = new JPanel(new FlowLayout());\n+\n+        JTextArea instructionTextArea = new JTextArea();\n+\n+        String instructions\n+                = \"INSTRUCTIONS:\" +\n+                \"\\n 1. This is a Windows specific test. If you are not on \" +\n+                \"Windows, press Pass.\" +\n+                \"\\n 2. Check if the Left insets(margins) is set visually \" +\n+                \"similar to other three sides around Radio Button and CheckBox\" +\n+                \"(insets set to 20 on all 4 sides).\" +\n+                \"\\n 3. If Left insets(margins) appear Empty, press Fail, \" +\n+                \"else press Pass.\";\n+\n+        instructionTextArea.setText(instructions);\n+        instructionTextArea.setEnabled(false);\n+        instructionTextArea.setDisabledTextColor(Color.black);\n+        instructionTextArea.setBackground(Color.white);\n+\n+        mainControlPanel.add(instructionTextArea,BorderLayout.NORTH);\n+        JButton passButton = new JButton(\"Pass\");\n+        passButton.setActionCommand(\"Pass\");\n+\n+        passButton.addActionListener((ActionEvent e) -> {\n+            testResult.set(true);\n+            latch.countDown();\n+        });\n+\n+        JButton failButton = new JButton(\"Fail\");\n+        failButton.setActionCommand(\"Fail\");\n+        failButton.addActionListener((ActionEvent e) -> {\n+            testResult.set(false);\n+            latch.countDown();\n+        });\n+\n+        resultButtonPanel.add(passButton);\n+        resultButtonPanel.add(failButton);\n+        mainControlPanel.add(resultButtonPanel);\n+        frame.getContentPane().add(mainControlPanel,BorderLayout.SOUTH);\n+\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocation(500,50);\n+        frame.setSize(400, 150);\n+        frame.pack();\n+        frame.setVisible(true);\n+\n+        Thread.sleep(1000);\n+    }\n+\n+    private static void disposeUI()\n+    {\n+        testObj.dispose();\n+        frame.dispose();\n+    }\n+    private static void onCompletion(AtomicReference<Boolean> res)\n+    {\n+        disposeUI();\n+        if (res.toString() == \"false\")\n+        {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+}\n+\n+class testFrame extends JFrame implements ActionListener {\n+    JPanel buttonsPanel;\n+\n+    Map<String, String> lookAndFeelMaps = new HashMap<String, String>();\n+    public testFrame() throws InterruptedException {\n+        initMap();\n+        initComponents();\n+\n+    }\n+\n+\n+    public void initMap()\n+    {\n+        String sLnF;\n+        String sMapKey;\n+        UIManager.LookAndFeelInfo[] lookAndFeel = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo look : lookAndFeel) {\n+\n+            sLnF = look.getClassName();\n+            sMapKey = sLnF.substring(sLnF.lastIndexOf(\".\")+1);\n+            sMapKey = sMapKey.replaceAll(\"LookAndFeel\",\"\");\n+            sMapKey = sMapKey.trim();\n+\n+            lookAndFeelMaps.put(sMapKey, sLnF);\n+\n+        }\n+    }\n+\n+\n+    public void initComponents() throws InterruptedException {\n+        JPanel p = new JPanel();\n+        buttonsPanel = new JPanel();\n+        buttonsPanel.setLayout(new BoxLayout(buttonsPanel, BoxLayout.Y_AXIS));\n+\n+        JRadioButton rb  = new JRadioButton(\"JRadioButton\");\n+        rb.setMargin(new Insets(20, 20, 20, 20));\n+        rb.setBackground(Color.green);\n+        rb.setAlignmentX(0.5f);\n+        buttonsPanel.add(rb);\n+\n+        JCheckBox cb  = new JCheckBox(\"JCheckBox\");\n+        cb.setMargin(new Insets(20, 20, 20, 20));\n+        cb.setBackground(Color.yellow);\n+        cb.setAlignmentX(0.5f);\n+        buttonsPanel.add(cb);\n+\n+        getContentPane().add(buttonsPanel);\n+\n+        for (Map.Entry mapElement : lookAndFeelMaps.entrySet()) {\n+            String btnName = mapElement.getKey().toString();\n+            JButton btn = new JButton(btnName);\n+            btn.setActionCommand(btnName);\n+            btn.addActionListener(this);\n+            p.add(btn);\n+        }\n+\n+        getContentPane().add(p,BorderLayout.SOUTH);\n+\n+        setDefaultCloseOperation(EXIT_ON_CLOSE);\n+        setSize(500, 300);\n+        setVisible(true);\n+        Thread.sleep(1000);\n+    }\n+\n+    private static void setLookAndFeel(String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf);\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String key = e.getActionCommand();\n+        String val = lookAndFeelMaps.get(key);\n+\n+        setLookAndFeel(val);\n+        SwingUtilities.updateComponentTreeUI(this);\n+\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/4380543\/bug4380543.java","additions":215,"deletions":0,"binary":false,"changes":215,"status":"added"}]}