{"files":[{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,5 @@\n+        <dependency>\n+            <groupId>com.ibm.wala<\/groupId>\n+            <artifactId>com.ibm.wala.util<\/artifactId>\n+            <version>${wala.version}<\/version>\n+        <\/dependency>\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/pom.xml","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,3 @@\n+import com.ibm.wala.util.graph.Graph;\n+import com.ibm.wala.util.graph.impl.SlowSparseNumberedGraph;\n+import com.ibm.wala.util.graph.dominators.Dominators;\n@@ -365,13 +368,0 @@\n-    private class BlockIntermediate {\n-\n-        InputBlock block;\n-        int index;\n-        int dominator;\n-        int semi;\n-        int parent;\n-        int label;\n-        int ancestor;\n-        List<Integer> pred;\n-        List<Integer> bucket;\n-    }\n-\n@@ -415,23 +405,0 @@\n-        Vector<BlockIntermediate> intermediate = new Vector<>(graph.getBlocks().size());\n-        Map<InputBlock, BlockIntermediate> map = new HashMap<>(graph.getBlocks().size());\n-        int z = 0;\n-        for (InputBlock b : blocks) {\n-            BlockIntermediate bi = new BlockIntermediate();\n-            bi.block = b;\n-            bi.index = z;\n-            bi.dominator = -1;\n-            bi.semi = -1;\n-            bi.parent = -1;\n-            bi.label = z;\n-            bi.ancestor = -1;\n-            bi.pred = new ArrayList<>();\n-            bi.bucket = new ArrayList<>();\n-            intermediate.add(bi);\n-            map.put(b, bi);\n-            z++;\n-        }\n-        Stack<Integer> stack = new Stack<>();\n-        stack.add(0);\n-\n-        Vector<BlockIntermediate> array = new Vector<>();\n-        intermediate.get(0).dominator = 0;\n@@ -439,72 +406,3 @@\n-        int n = 0;\n-        while (!stack.isEmpty()) {\n-            int index = stack.pop();\n-            BlockIntermediate ib = intermediate.get(index);\n-            ib.semi = n;\n-            array.add(ib);\n-            n = n + 1;\n-            for (InputBlock b : ib.block.getSuccessors()) {\n-                BlockIntermediate succ = map.get(b);\n-                if (succ.semi == -1) {\n-                    succ.parent = index;\n-                    stack.push(succ.index); \/\/ TODO: check if same node could be pushed twice\n-                }\n-                succ.pred.add(index);\n-            }\n-        }\n-\n-        for (int i = n - 1; i > 0; i--) {\n-            BlockIntermediate block = array.get(i);\n-            int block_index = block.index;\n-            for (int predIndex : block.pred) {\n-                int curIndex = eval(predIndex, intermediate);\n-                BlockIntermediate curBlock = intermediate.get(curIndex);\n-                if (curBlock.semi < block.semi) {\n-                    block.semi = curBlock.semi;\n-                }\n-            }\n-\n-\n-            int semiIndex = block.semi;\n-            BlockIntermediate semiBlock = array.get(semiIndex);\n-            semiBlock.bucket.add(block_index);\n-\n-            link(block.parent, block_index, intermediate);\n-            BlockIntermediate parentBlock = intermediate.get(block.parent);\n-\n-            for (int j = 0; j < parentBlock.bucket.size(); j++) {\n-                for (int curIndex : parentBlock.bucket) {\n-                    int newIndex = eval(curIndex, intermediate);\n-                    BlockIntermediate curBlock = intermediate.get(curIndex);\n-                    BlockIntermediate newBlock = intermediate.get(newIndex);\n-                    int dom = block.parent;\n-                    if (newBlock.semi < curBlock.semi) {\n-                        dom = newIndex;\n-                    }\n-\n-                    curBlock.dominator = dom;\n-                }\n-            }\n-\n-\n-            parentBlock.bucket.clear();\n-        }\n-\n-        for (int i = 1; i < n; i++) {\n-\n-            BlockIntermediate block = array.get(i);\n-            int block_index = block.index;\n-\n-            int semi_index = block.semi;\n-            BlockIntermediate semi_block = array.get(semi_index);\n-\n-            if (block.dominator != semi_block.index) {\n-                int new_dom = intermediate.get(block.dominator).dominator;\n-                block.dominator = new_dom;\n-            }\n-        }\n-\n-        for (BlockIntermediate ib : intermediate) {\n-            if (ib.dominator == -1) {\n-                ib.dominator = 0;\n-            }\n+        Graph<InputBlock> CFG = SlowSparseNumberedGraph.make();\n+        for (InputBlock b : blocks) {\n+            CFG.addNode(b);\n@@ -512,11 +410,3 @@\n-\n-        for (BlockIntermediate bi : intermediate) {\n-            InputBlock b = bi.block;\n-            int dominator = bi.dominator;\n-            InputBlock dominatorBlock = null;\n-            if (dominator != -1) {\n-                dominatorBlock = intermediate.get(dominator).block;\n-            }\n-\n-            if (dominatorBlock == b) {\n-                dominatorBlock = null;\n+        for (InputBlock p : blocks) {\n+            for (InputBlock s : p.getSuccessors()) {\n+                CFG.addEdge(p, s);\n@@ -524,1 +414,0 @@\n-            this.dominatorMap.put(b, dominatorBlock);\n@@ -526,7 +415,0 @@\n-    }\n-\n-    private void compress(int index, Vector<BlockIntermediate> blocks) {\n-        BlockIntermediate block = blocks.get(index);\n-\n-        int ancestor = block.ancestor;\n-        assert ancestor != -1;\n@@ -534,3 +416,2 @@\n-        BlockIntermediate ancestor_block = blocks.get(ancestor);\n-        if (ancestor_block.ancestor != -1) {\n-            compress(ancestor, blocks);\n+        InputBlock root = findRoot().block;\n+        Dominators<InputBlock> D = Dominators.make(CFG, root);\n@@ -538,7 +419,5 @@\n-            int label = block.label;\n-            BlockIntermediate label_block = blocks.get(label);\n-\n-            int ancestor_label = ancestor_block.label;\n-            BlockIntermediate ancestor_label_block = blocks.get(label);\n-            if (ancestor_label_block.semi < label_block.semi) {\n-                block.label = ancestor_label;\n+        for (InputBlock b : blocks) {\n+            InputBlock idom = D.getIdom(b);\n+            if (idom == null && b != root) {\n+                \/\/ getCommonDominator expects a single root node.\n+                idom = root;\n@@ -546,2 +425,1 @@\n-\n-            block.ancestor = ancestor_block.ancestor;\n+            dominatorMap.put(b, idom);\n@@ -551,15 +429,0 @@\n-    private int eval(int index, Vector<BlockIntermediate> blocks) {\n-        BlockIntermediate block = blocks.get(index);\n-        if (block.ancestor == -1) {\n-            return index;\n-        } else {\n-            compress(index, blocks);\n-            return block.label;\n-        }\n-    }\n-\n-    private void link(int index1, int index2, Vector<BlockIntermediate> blocks) {\n-        BlockIntermediate block2 = blocks.get(index2);\n-        block2.ancestor = index1;\n-    }\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":18,"deletions":155,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,1 @@\n+        <wala.version>1.5.7<\/wala.version>\n","filename":"src\/utils\/IdealGraphVisualizer\/pom.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}