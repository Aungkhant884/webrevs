{"files":[{"patch":"@@ -1007,5 +1007,8 @@\n-     * result overflows an {@code int}.  Such overflow can occur if and only\n-     * if either {@code y} is zero, or both {@code x} is\n-     * {@link Integer#MIN_VALUE} and {@code y} is {@code -1}.  In contrast,\n-     * if {@code Integer.MIN_VALUE \/ -1} were evaluated directly, the result\n-     * would be {@code Integer.MIN_VALUE} and no exception would be thrown.\n+     * result overflows an {@code int}.  Such overflow occurs in this method if\n+     * {@code x} is {@link Integer#MIN_VALUE} and {@code y} is {@code -1}.\n+     * In contrast, if {@code Integer.MIN_VALUE \/ -1} were evaluated directly,\n+     * the result would be {@code Integer.MIN_VALUE} and no exception would be\n+     * thrown.\n+     * <p>\n+     * If {@code y} is zero, overflow also occurs as in direct evaluation and\n+     * an exception is thrown as usual.\n@@ -1021,8 +1024,5 @@\n-        \/\/ * This conditional is slower than the straightfoward one below.\n-        \/\/ HD 2nd. Ed. p. 44 section 2-13 Overflow Detection: Division\n-        \/\/ int z = (x ^ Integer.MIN_VALUE) | (y + 1);\n-        \/\/ if (((y | -y) & (z | -z)) >= 0)\n-\n-        if (x == Integer.MIN_VALUE && y == -1)\n-            throw new ArithmeticException(\"integer overflow\");\n-        return x \/ y; \/\/ if y == 0, ArithmeticException is thrown here\n+        int q = x \/ y;\n+        if ((x & y & q) >= 0) {\n+            return q;\n+        }\n+        throw new ArithmeticException(\"integer overflow\");\n@@ -1033,5 +1033,8 @@\n-     * result overflows a {@code long}.  Such overflow can occur if and only\n-     * if either {@code y} is zero, or both {@code x} is\n-     * {@link Long#MIN_VALUE} and {@code y} is {@code -1}.  In contrast,\n-     * if {@code Long.MIN_VALUE \/ -1} were evaluated directly, the result\n-     * would be {@code Long.MIN_VALUE} and no exception would be thrown.\n+     * result overflows a {@code long}.  Such overflow occurs in this method if\n+     * {@code x} is {@link Long#MIN_VALUE} and {@code y} is {@code -1}.\n+     * In contrast, if {@code Long.MIN_VALUE \/ -1} were evaluated directly,\n+     * the result would be {@code Long.MIN_VALUE} and no exception would be\n+     * thrown.\n+     * <p>\n+     * If {@code y} is zero, overflow also occurs as in direct evaluation and\n+     * an exception is thrown as usual.\n@@ -1047,3 +1050,5 @@\n-        if (x == Long.MIN_VALUE && y == -1L)\n-            throw new ArithmeticException(\"long overflow\");\n-        return x \/ y; \/\/ if y == 0, ArithmeticException is thrown here\n+        long q = x \/ y;\n+        if ((x & y & q) >= 0) {\n+            return q;\n+        }\n+        throw new ArithmeticException(\"long overflow\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"}]}