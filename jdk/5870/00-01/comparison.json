{"files":[{"patch":"@@ -287,18 +287,27 @@\n-        \/\/ check the local @SuppressWarnings annotation, caching the results;\n-        \/\/ the supported strings are: \"doclint\" and \"doclint:GROUP,...\" for each GROUP\n-        Set<Messages.Group> set = suppressWarnings.get(e);\n-        if (set == null) {\n-            var gMap = Arrays.stream(Messages.Group.values())\n-                    .collect(Collectors.toMap(Messages.Group::optName, Function.identity()));\n-            set = EnumSet.noneOf(Messages.Group.class);\n-            for (String arg : getSuppressWarningsValue(e)) {\n-                if (arg.equals(\"doclint\")) {\n-                    set = EnumSet.allOf(Messages.Group.class);\n-                    break;\n-                } else if (arg.startsWith(\"doclint:\")){\n-                    final int len = \"doclint:\".length();\n-                    for (String a: arg.substring(len).split(\",\")) {\n-                        Messages.Group argGroup = gMap.get(a);\n-                        if (argGroup != null) {\n-                            set.add(argGroup);\n-                        }\n+        \/\/ check the local @SuppressWarnings annotation, caching the results\n+        return suppressWarnings.computeIfAbsent(e, this::getSuppressedGroups).contains(g);\n+    }\n+\n+    \/**\n+     * Returns the set of groups for an element for which messages should be suppressed.\n+     * The set is determined by examining the arguments for any {@code @SuppressWarnings}\n+     * annotation that may be present on the element.\n+     * The supported strings are: \"doclint\" and \"doclint:GROUP,...\" for each GROUP\n+     *\n+     * @param e the element\n+     * @return  the set\n+     *\/\n+    private Set<Messages.Group> getSuppressedGroups(Element e) {\n+        var gMap = Arrays.stream(Messages.Group.values())\n+                .collect(Collectors.toMap(Messages.Group::optName, Function.identity()));\n+        var set = EnumSet.noneOf(Messages.Group.class);\n+        for (String arg : getSuppressWarningsValue(e)) {\n+            if (arg.equals(\"doclint\")) {\n+                set = EnumSet.allOf(Messages.Group.class);\n+                break;\n+            } else if (arg.startsWith(\"doclint:\")) {\n+                final int len = \"doclint:\".length();\n+                for (String a : arg.substring(len).split(\",\")) {\n+                    Messages.Group argGroup = gMap.get(a);\n+                    if (argGroup != null) {\n+                        set.add(argGroup);\n@@ -308,1 +317,0 @@\n-            suppressWarnings.put(e, set);\n@@ -310,1 +318,1 @@\n-        return set.contains(g);\n+        return set;\n@@ -331,4 +339,3 @@\n-                                if (item instanceof AnnotationValue avItem) {\n-                                    if (avItem.getValue() instanceof String s) {\n-                                        result.add(s);\n-                                    }\n+                                if (item instanceof AnnotationValue avItem\n+                                        && avItem.getValue() instanceof String s) {\n+                                    result.add(s);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Env.java","additions":31,"deletions":24,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -140,2 +140,1 @@\n-\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/doclint\/SuppressWarningsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}