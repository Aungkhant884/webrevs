{"files":[{"patch":"@@ -138,18 +138,0 @@\n-void ArrayKlass::array_klasses_do(void f(Klass* k, TRAPS), TRAPS) {\n-  Klass* k = this;\n-  \/\/ Iterate over this array klass and all higher dimensions\n-  while (k != NULL) {\n-    f(k, CHECK);\n-    k = ArrayKlass::cast(k)->higher_dimension();\n-  }\n-}\n-\n-void ArrayKlass::array_klasses_do(void f(Klass* k)) {\n-  Klass* k = this;\n-  \/\/ Iterate over this array klass and all higher dimensions\n-  while (k != NULL) {\n-    f(k);\n-    k = ArrayKlass::cast(k)->higher_dimension();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -107,4 +107,0 @@\n-  \/\/ Iterators\n-  void array_klasses_do(void f(Klass* k));\n-  void array_klasses_do(void f(Klass* k, TRAPS), TRAPS);\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1723,10 +1723,0 @@\n-void InstanceKlass::array_klasses_do(void f(Klass* k, TRAPS), TRAPS) {\n-  if (array_klasses() != NULL)\n-    array_klasses()->array_klasses_do(f, THREAD);\n-}\n-\n-void InstanceKlass::array_klasses_do(void f(Klass* k)) {\n-  if (array_klasses() != NULL)\n-    array_klasses()->array_klasses_do(f);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1009,2 +1009,0 @@\n-  void array_klasses_do(void f(Klass* k));\n-  void array_klasses_do(void f(Klass* k, TRAPS), TRAPS);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -656,2 +656,0 @@\n-  virtual void array_klasses_do(void f(Klass* k)) {}\n-\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1514,3 +1514,0 @@\n-  \/\/ Statistics\n-  update_stats(itable_size * wordSize);\n-\n@@ -1631,71 +1628,0 @@\n-\n-class VtableStats : AllStatic {\n- public:\n-  static int no_klasses;                \/\/ # classes with vtables\n-  static int no_array_klasses;          \/\/ # array classes\n-  static int no_instance_klasses;       \/\/ # instanceKlasses\n-  static int sum_of_vtable_len;         \/\/ total # of vtable entries\n-  static int sum_of_array_vtable_len;   \/\/ total # of vtable entries in array klasses only\n-  static int fixed;                     \/\/ total fixed overhead in bytes\n-  static int filler;                    \/\/ overhead caused by filler bytes\n-  static int entries;                   \/\/ total bytes consumed by vtable entries\n-  static int array_entries;             \/\/ total bytes consumed by array vtable entries\n-\n-  static void do_class(Klass* k) {\n-    Klass* kl = k;\n-    klassVtable vt = kl->vtable();\n-    no_klasses++;\n-    if (kl->is_instance_klass()) {\n-      no_instance_klasses++;\n-      kl->array_klasses_do(do_class);\n-    }\n-    if (kl->is_array_klass()) {\n-      no_array_klasses++;\n-      sum_of_array_vtable_len += vt.length();\n-    }\n-    sum_of_vtable_len += vt.length();\n-  }\n-\n-  static void compute() {\n-    LockedClassesDo locked_do_class(&do_class);\n-    ClassLoaderDataGraph::classes_do(&locked_do_class);\n-    fixed  = no_klasses * oopSize;      \/\/ vtable length\n-    \/\/ filler size is a conservative approximation\n-    filler = oopSize * (no_klasses - no_instance_klasses) * (sizeof(InstanceKlass) - sizeof(ArrayKlass) - 1);\n-    entries = sizeof(vtableEntry) * sum_of_vtable_len;\n-    array_entries = sizeof(vtableEntry) * sum_of_array_vtable_len;\n-  }\n-};\n-\n-int VtableStats::no_klasses = 0;\n-int VtableStats::no_array_klasses = 0;\n-int VtableStats::no_instance_klasses = 0;\n-int VtableStats::sum_of_vtable_len = 0;\n-int VtableStats::sum_of_array_vtable_len = 0;\n-int VtableStats::fixed = 0;\n-int VtableStats::filler = 0;\n-int VtableStats::entries = 0;\n-int VtableStats::array_entries = 0;\n-\n-void klassVtable::print_statistics() {\n-  ResourceMark rm;\n-  VtableStats::compute();\n-  tty->print_cr(\"vtable statistics:\");\n-  tty->print_cr(\"%6d classes (%d instance, %d array)\", VtableStats::no_klasses, VtableStats::no_instance_klasses, VtableStats::no_array_klasses);\n-  int total = VtableStats::fixed + VtableStats::filler + VtableStats::entries;\n-  tty->print_cr(\"%6d bytes fixed overhead (refs + vtable object header)\", VtableStats::fixed);\n-  tty->print_cr(\"%6d bytes filler overhead\", VtableStats::filler);\n-  tty->print_cr(\"%6d bytes for vtable entries (%d for arrays)\", VtableStats::entries, VtableStats::array_entries);\n-  tty->print_cr(\"%6d bytes total\", total);\n-}\n-\n-int    klassItable::_total_classes;   \/\/ Total no. of classes with itables\n-size_t klassItable::_total_size;      \/\/ Total no. of bytes used for itables\n-\n-void klassItable::print_statistics() {\n- tty->print_cr(\"itable statistics:\");\n- tty->print_cr(\"%6d classes with itables\", _total_classes);\n- tty->print_cr(SIZE_FORMAT_W(6) \" K uses for itables (average by class: \" SIZE_FORMAT \" bytes)\",\n-               _total_size \/ K, _total_size \/ _total_classes);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":0,"deletions":74,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-  static void print_statistics()                            PRODUCT_RETURN;\n@@ -322,2 +321,0 @@\n-  \/\/ Debugging\/Statistics\n-  static void print_statistics() PRODUCT_RETURN;\n@@ -331,5 +328,0 @@\n-  \/\/ Statistics\n-  NOT_PRODUCT(static int  _total_classes;)   \/\/ Total no. of classes with itables\n-  NOT_PRODUCT(static size_t _total_size;)    \/\/ Total no. of bytes used for itables\n-\n-  static void update_stats(int size) PRODUCT_RETURN NOT_PRODUCT({ _total_classes++; _total_size += size; })\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1094,3 +1094,0 @@\n-  notproduct(bool, PrintVtableStats, false,                                 \\\n-          \"print vtables stats at end of run\")                              \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -309,4 +309,0 @@\n-  if (PrintVtableStats) {\n-    klassVtable::print_statistics();\n-    klassItable::print_statistics();\n-  }\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}