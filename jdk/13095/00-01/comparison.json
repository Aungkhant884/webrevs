{"files":[{"patch":"@@ -229,1 +229,1 @@\n-                    int firstBand = image.getSampleModel().getNumBands() - 1;\n+                    int firstBand = byteRaster.getSampleModel().getNumBands() - 1;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+import java.awt.image.SampleModel;\n+\n+\/**\n+ * @test\n+ * @bug 8279216\n+ * @summary behavior checked by this test is not specified, this test just\n+ *          defends against accidental changes\n+ *\/\n+public final class SkipSampleModel {\n+\n+    private static int[] TYPES = {\n+            BufferedImage.TYPE_INT_RGB,\n+            BufferedImage.TYPE_INT_ARGB,\n+            BufferedImage.TYPE_INT_ARGB_PRE,\n+            BufferedImage.TYPE_INT_BGR,\n+            BufferedImage.TYPE_3BYTE_BGR,\n+            BufferedImage.TYPE_4BYTE_ABGR,\n+            BufferedImage.TYPE_4BYTE_ABGR_PRE,\n+            BufferedImage.TYPE_USHORT_565_RGB,\n+            BufferedImage.TYPE_USHORT_555_RGB,\n+            BufferedImage.TYPE_BYTE_GRAY,\n+            BufferedImage.TYPE_USHORT_GRAY,\n+            BufferedImage.TYPE_BYTE_BINARY,\n+            BufferedImage.TYPE_BYTE_INDEXED\n+    };\n+\n+    private static final ColorSpace[] CSs = {\n+            ColorSpace.getInstance(ColorSpace.CS_CIEXYZ),\n+            ColorSpace.getInstance(ColorSpace.CS_GRAY),\n+            ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB),\n+            ColorSpace.getInstance(ColorSpace.CS_PYCC),\n+            ColorSpace.getInstance(ColorSpace.CS_sRGB)\n+    };\n+\n+    public static void main(String[] args) {\n+        for (ColorSpace cs : CSs) {\n+            ColorConvertOp op = new ColorConvertOp(cs, null);\n+            for (int srcType : TYPES) {\n+                for (int dstType : TYPES) {\n+                    BufferedImage src = new BufferedImage(1, 1, srcType) {\n+                        @Override\n+                        public SampleModel getSampleModel() {\n+                            throw new AssertionError();\n+                        }\n+                    };\n+                    BufferedImage dst = new BufferedImage(1, 1, dstType) {\n+                        @Override\n+                        public SampleModel getSampleModel() {\n+                            throw new AssertionError();\n+                        }\n+                    };\n+                    op.filter(src, dst);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/SkipSampleModel.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}