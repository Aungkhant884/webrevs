{"files":[{"patch":"@@ -2981,3 +2981,1 @@\n-  if (m->is_static()) {\n-    flags |= java_lang_invoke_MemberName::MN_IS_METHOD;\n-  } else if (m->is_initializer()) {\n+  if (m->is_initializer()) {\n@@ -2986,3 +2984,0 @@\n-    \/\/ \"special\" reflects that this is a direct call, not that it\n-    \/\/ necessarily originates from an invokespecial. We can also do\n-    \/\/ direct calls for private and\/or final non-static methods.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.access.JavaLangInvokeAccess;\n@@ -31,0 +32,2 @@\n+    static final JavaLangInvokeAccess JLIA = SharedSecrets.getJavaLangInvokeAccess();\n+\n@@ -45,1 +48,1 @@\n-        return SharedSecrets.getJavaLangInvokeAccess().isCallerSensitive(flags & MEMBER_INFO_FLAGS);\n+        return JLIA.isCallerSensitive(flags & MEMBER_INFO_FLAGS);\n@@ -48,1 +51,1 @@\n-        return SharedSecrets.getJavaLangInvokeAccess().isHiddenMember(flags & MEMBER_INFO_FLAGS);\n+        return JLIA.isHiddenMember(flags & MEMBER_INFO_FLAGS);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassFrameInfo.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import jdk.internal.access.JavaLangInvokeAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -35,3 +33,0 @@\n-    private static final JavaLangInvokeAccess JLIA =\n-        SharedSecrets.getJavaLangInvokeAccess();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackFrameInfo.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * The {@code Class} reference can be accessed if {@link Option#RETAIN_CLASS_REFERENCE}\n+ * The {@code Class} reference can be accessed if {@link Option#RETAIN_CLASS_REFERENCE\n@@ -248,2 +248,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}