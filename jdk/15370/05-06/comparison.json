{"files":[{"patch":"@@ -34,2 +34,2 @@\n-    protected Object classOrMemberName;    \/\/ Class or ResolvedMemberName initialized by VM\n-    protected int flags;                   \/\/ updated by VM to set hidden and caller-sensitive bits\n+    Object classOrMemberName;    \/\/ Class or ResolvedMemberName initialized by VM\n+    int flags;                   \/\/ updated by VM to set hidden and caller-sensitive bits\n@@ -50,0 +50,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassFrameInfo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.StackWalker.Kind;\n@@ -210,1 +209,1 @@\n-        return StackWalker.newInstance(Kind.METHOD_INFO, options, LOCALS_AND_OPERANDS, contScope);\n+        return StackWalker.newInstance(options, LOCALS_AND_OPERANDS, contScope);\n@@ -251,1 +250,1 @@\n-        return StackWalker.newInstance(Kind.METHOD_INFO, options, LOCALS_AND_OPERANDS, contScope, continuation);\n+        return StackWalker.newInstance(options, LOCALS_AND_OPERANDS, contScope, continuation);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/LiveStackFrame.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -81,6 +81,2 @@\n-        {\n-            \/\/ Get a snapshot of type which doesn't get changed by racing threads.\n-            final Object type = this.type;\n-            if (type instanceof MethodType mt) {\n-                return mt;\n-            }\n+        if (type instanceof MethodType mt) {\n+            return mt;\n@@ -94,1 +90,0 @@\n-            assert type instanceof MethodType : \"bad method type \" + type;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackFrameInfo.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import static java.lang.StackWalker.Kind.*;\n@@ -116,1 +115,1 @@\n-        if (walker.kind() == CLASS_INFO)\n+        if (walker.hasOption(Option.DROP_METHOD_INFO))\n@@ -532,1 +531,1 @@\n-            this.frameBuffer = walker.kind() == CLASS_INFO\n+            this.frameBuffer = walker.hasOption(Option.DROP_METHOD_INFO)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,15 +42,0 @@\n- * <p> The {@link Kind} specifies the information of the stack frames to be collected.\n- * The {@link #getInstance() getInstance} factory methods return a {@code StackWalker}\n- * that collects the {@linkplain Kind#METHOD_INFO method information}\n- * from the stack frames by default.  If the method information is not needed,\n- * a {@code StackWalker} collecting {@linkplain Kind#CLASS_INFO class only information}\n- * can be used instead via the {@link #getInstance(Kind, Option...)} method.\n- *\n- * <p> The {@linkplain Option <em>stack walking option<\/em>} specifies the stack\n- * frames to be returned. By default, stack frames of the reflection API\n- * and implementation classes are {@linkplain Option#SHOW_HIDDEN_FRAMES hidden}.\n- * In addition, {@code StackFrame}s have the class name and method name\n- * available but not the {@link StackFrame#getDeclaringClass() Class reference}.\n- * The {@code Class} reference can be accessed if {@link Option#RETAIN_CLASS_REFERENCE\n- * RETAIN_CLASS_REFERENCE} option is set.\n- *\n@@ -67,0 +52,10 @@\n+ * <p> The {@linkplain Option <em>stack walking option<\/em>} specifies\n+ * what the information a stack walker collects from the stack frames.\n+ * By default, the class name and method information are available but\n+ * not the {@link StackFrame#getDeclaringClass() Class reference}.\n+ * The method information can be dropped via {@link Option#DROP_METHOD_INFO\n+ * DROP_METHOD_INFO} option. The {@code Class} object can be retained for\n+ * access via {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option.\n+ * Stack frames of the reflection API and implementation classes are\n+ * {@linkplain Option#SHOW_HIDDEN_FRAMES hidden} by default.\n+ *\n@@ -78,1 +73,1 @@\n- *     StackWalker walker = StackWalker.getInstance(Kind.CLASS_INFO, Option.RETAIN_CLASS_REFERENCE);\n+ *     StackWalker walker = StackWalker.getInstance(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE);\n@@ -81,1 +76,1 @@\n- *              .filter(interestingClasses::contains)\n+ *              .filter(Predicate.not(implClasses::contains))\n@@ -87,2 +82,1 @@\n- *     List<StackFrame> stack = StackWalker.getInstance().walk(s ->\n- *             s.limit(10).collect(Collectors.toList()));\n+ *     List<StackFrame> stack = StackWalker.getInstance().walk(s -> s.limit(10).toList());\n@@ -104,1 +98,3 @@\n-     * {@linkplain Kind kind} of the stack walker.  Method information such as\n+     * {@linkplain Option stack walking options} of a stack walker.\n+     * If the stack walker is configured with {@link Option#DROP_METHOD_INFO\n+     * DROP_METHOD_INFO} option, method information such as\n@@ -107,9 +103,5 @@\n-     * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n-     * etc is not available on {@code StackFrame}s produced by {@code StackWalker}\n-     * that collects only {@linkplain Kind#CLASS_INFO class information}.\n-     * {@code UnsupportedOperationException} will be thrown if unavailable\n-     * information is being accessed.\n-     *\n-     * <p> To access the {@link #getDeclaringClass() Class} object and\n-     * {@link #getMethodType() MethodType}, the {@code StackWalker} needs to be\n-     * configured with {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}.\n+     * the {@linkplain StackFrame#getByteCodeIndex() bytecode index}, etc\n+     * will be dropped.\n+     * If the stack walker is configured with {@link Option#RETAIN_CLASS_REFERENCE\n+     * RETAIN_CLASS_REFERENCE} option, the {@link #getDeclaringClass() Class} object\n+     * will be retained for access.\n@@ -132,2 +124,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -142,1 +134,1 @@\n-         *         without {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n+         *         without {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option\n@@ -153,1 +145,1 @@\n-         * @return the {@code MethodType} for this stack frame\n+         * @return the {@code MethodType} of the method represented by this stack frame\n@@ -155,3 +147,3 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information} or configured without\n-         *         {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option or\n+         *         without {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option\n@@ -176,2 +168,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -200,2 +192,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -219,2 +211,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -237,2 +229,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -248,2 +240,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -256,2 +248,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n-         *         {@linkplain Kind#CLASS_INFO class only information}\n+         * @throws UnsupportedOperationException if the {@code StackWalker} is configured\n+         *         with {@link Option#DROP_METHOD_INFO DROP_METHOD_INFO} option\n@@ -278,0 +270,15 @@\n+        \/**\n+         * Drops the method information from {@code StackFrame}s\n+         * walked by this {@code StackWalker}.\n+         *\n+         * <p> A {@code StackWalker} configured with this option will drop\n+         * the {@linkplain StackFrame#getMethodName() method name},\n+         * the {@linkplain StackFrame#getMethodType() method type},\n+         * the {@linkplain StackFrame#getLineNumber() line number},\n+         * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n+         * the {@linkplain StackFrame#getFileName() source file name} and\n+         * {@linkplain StackFrame#isNativeMethod() native method or not}.\n+         *\n+         * @since 22\n+         *\/\n+        DROP_METHOD_INFO,\n@@ -311,31 +318,0 @@\n-    \/**\n-     * The kind of information that a {@code StackWalker} collects.\n-     *\n-     * @since 22\n-     *\/\n-    public enum Kind {\n-        \/**\n-         * Class only information.\n-         *\n-         * <p> A {@code StackWalker} of this kind will collect only the class information\n-         * from the stack frames.  Only {@link StackFrame#getClassName() StackFrame::getClassName}\n-         * and {@link StackFrame#getDeclaringClass() StackFrame::getDeclaringClass}\n-         * can be called.\n-         *\/\n-        CLASS_INFO,\n-        \/**\n-         * Method information.\n-         *\n-         * <p> A {@code StackWalker} of this kind will collect the method information\n-         * from the stack frames which includes\n-         * the {@linkplain StackFrame#getClassName() class name},\n-         * the {@linkplain StackFrame#getMethodName() method name},\n-         * the {@linkplain StackFrame#getMethodType() method type},\n-         * the {@linkplain StackFrame#getLineNumber() line number},\n-         * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n-         * the {@linkplain StackFrame#getFileName() source file name} and\n-         * {@linkplain StackFrame#isNativeMethod() native method or not},\n-         *\/\n-        METHOD_INFO\n-    }\n-\n@@ -352,1 +328,1 @@\n-        new StackWalker(Kind.METHOD_INFO, DEFAULT_EMPTY_OPTION);\n+        new StackWalker(DEFAULT_EMPTY_OPTION);\n@@ -356,1 +332,0 @@\n-    private final Kind kind;\n@@ -363,5 +338,1 @@\n-     * Returns a {@code StackWalker} instance. This method is equivalent to\n-     * calling:\n-     * {@snippet lang=\"java\" :\n-     * getInstance(Kind.METHOD_INFO);\n-     * }\n+     * Returns a {@code StackWalker} instance.\n@@ -373,2 +344,1 @@\n-     * @return a {@code StackWalker} of {@link Kind#METHOD_INFO METHOD_INFO}\n-     * kind and configured to skip all\n+     * @return a {@code StackWalker} configured to skip all\n@@ -386,5 +356,1 @@\n-     * the stack frame information it can access.  This method is equivalent to\n-     * calling:\n-     * {@snippet lang=\"java\" :\n-     * getInstance(Kind.METHOD_INFO, option);\n-     * }\n+     * the stack frame information it can access.\n@@ -399,2 +365,1 @@\n-     * @return a {@code StackWalker} of {@link Kind#METHOD_INFO METHOD_INFO} kind\n-     *         configured with the given option\n+     * @return a {@code StackWalker} configured with the given option\n@@ -410,71 +375,2 @@\n-     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n-     * the stack frame information it can access.  This method is equivalent to\n-     * calling:\n-     * {@snippet lang=\"java\" :\n-     * getInstance(Kind.METHOD_INFO, options);\n-     * }\n-     *\n-     * <p>\n-     * If the given {@code options} is empty, this {@code StackWalker} is\n-     * configured to skip all {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames}\n-     * and no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n-     *\n-     * <p>\n-     * If a security manager is present and the given {@code options} contains\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n-     * @param options {@link Option stack walking options}\n-     *\n-     * @return a {@code StackWalker} of {@link Kind#METHOD_INFO METHOD_INFO} kind\n-     *         configured with the given options\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n-     *\/\n-    public static StackWalker getInstance(Set<Option> options) {\n-        return getInstance(Kind.METHOD_INFO, options);\n-    }\n-\n-    \/**\n-     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n-     * the stack frame information it can access.  This method is equivalent to\n-     * calling:\n-     * {@snippet lang = \"java\":\n-     * getInstance(Kind.METHOD_INFO, options, estimateDepth);\n-     * }\n-     *\n-     * <p>\n-     * If the given {@code options} is empty, this {@code StackWalker} is\n-     * configured to skip all {@linkplain Option#SHOW_HIDDEN_FRAMES hidden frames}\n-     * and no {@linkplain Option#RETAIN_CLASS_REFERENCE class reference} is retained.\n-     *\n-     * <p>\n-     * If a security manager is present and the given {@code options} contains\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n-     * <p>\n-     * The {@code estimateDepth} specifies the estimate number of stack frames\n-     * this {@code StackWalker} will traverse that the {@code StackWalker} could\n-     * use as a hint for the buffer size.\n-     *\n-     * @param options {@link Option stack walking options}\n-     * @param estimateDepth Estimate number of stack frames to be traversed.\n-     *\n-     * @return a {@code StackWalker} of {@link Kind#METHOD_INFO METHOD_INFO} kind\n-     *         configured with the given options\n-     *\n-     * @throws IllegalArgumentException if {@code estimateDepth <= 0}\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n-     *\/\n-    public static StackWalker getInstance(Set<Option> options, int estimateDepth) {\n-        return getInstance(Kind.METHOD_INFO, options, estimateDepth);\n-    }\n-\n-    \/**\n-     * Returns a {@code StackWalker} instance of the given kind and configured\n-     * with the given options specifying the stack frame information it can access.\n+     * Returns a {@code StackWalker} instance configured with the given options\n+     * specifying the stack frame information it can access.\n@@ -493,1 +389,0 @@\n-     * @param kind {@linkplain Kind stack walker kind}\n@@ -496,2 +391,1 @@\n-     * @return a {@code StackWalker} of the given kind configured with\n-     *         the given options\n+     * @return a {@code StackWalker} configured with the given options\n@@ -504,2 +398,2 @@\n-    public static StackWalker getInstance(Kind kind, Option... options) {\n-        return getInstance(Objects.requireNonNull(kind), Set.of(Objects.requireNonNull(options)));\n+    public static StackWalker getInstance(Option... options) {\n+        return getInstance(Set.of(options));\n@@ -509,3 +403,2 @@\n-     * Returns a {@code StackWalker} instance of the given kind and configured\n-     * with the given {@code options} specifying the stack frame information\n-     * it can access.\n+     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n+     * the stack frame information it can access.\n@@ -524,2 +417,1 @@\n-     * @param kind {@linkplain Kind stack walker kind}\n-     * @param options {@linkplain Option stack walking options}\n+     * @param options {@link Option stack walking options}\n@@ -527,2 +419,1 @@\n-     * @return a {@code StackWalker} of the given kind configured with\n-     *         the given options\n+     * @return a {@code StackWalker} configured with the given options\n@@ -532,2 +423,0 @@\n-     *\n-     * @since 22\n@@ -535,2 +424,2 @@\n-    public static StackWalker getInstance(Kind kind, Set<Option> options) {\n-        if (kind == Kind.METHOD_INFO && options.isEmpty()) {\n+    public static StackWalker getInstance(Set<Option> options) {\n+        if (options.isEmpty()) {\n@@ -542,1 +431,1 @@\n-        return new StackWalker(kind, optionSet);\n+        return new StackWalker(optionSet);\n@@ -546,2 +435,1 @@\n-     * Returns a {@code StackWalker} instance of the given kind and\n-     * configured with the given {@code options} specifying\n+     * Returns a {@code StackWalker} instance with the given {@code options} specifying\n@@ -566,3 +454,2 @@\n-     * @param kind {@linkplain Kind stack walker kind}\n-     * @param options {@linkplain Option stack walking options}\n-     * @param estimateDepth Estimate number of stack frames to be traversed\n+     * @param options {@link Option stack walking options}\n+     * @param estimateDepth Estimate number of stack frames to be traversed.\n@@ -570,2 +457,1 @@\n-     * @return a {@code StackWalker} of the given kind configured with\n-     *         the given options\n+     * @return a {@code StackWalker} configured with the given options\n@@ -576,2 +462,0 @@\n-     *\n-     * @since 22\n@@ -579,1 +463,1 @@\n-    public static StackWalker getInstance(Kind kind, Set<Option> options, int estimateDepth) {\n+    public static StackWalker getInstance(Set<Option> options, int estimateDepth) {\n@@ -585,1 +469,1 @@\n-        return new StackWalker(kind, optionSet, estimateDepth);\n+        return new StackWalker(optionSet, estimateDepth);\n@@ -589,2 +473,2 @@\n-    private StackWalker(Kind kind, EnumSet<Option> options) {\n-        this(kind, options, 0, null, null, null);\n+    private StackWalker(EnumSet<Option> options) {\n+        this(options, 0, null, null, null);\n@@ -592,2 +476,2 @@\n-    private StackWalker(Kind kind, EnumSet<Option> options, int estimateDepth) {\n-        this(kind, options, estimateDepth, null, null, null);\n+    private StackWalker(EnumSet<Option> options, int estimateDepth) {\n+        this(options, estimateDepth, null, null, null);\n@@ -595,2 +479,1 @@\n-    private StackWalker(Kind kind,\n-                        EnumSet<Option> options,\n+    private StackWalker(EnumSet<Option> options,\n@@ -601,1 +484,0 @@\n-        this.kind = kind;\n@@ -649,1 +531,1 @@\n-     *          .collect(Collectors.toList()));\n+     *          .toList());\n@@ -743,1 +625,1 @@\n-     *     private final StackWalker walker = StackWalker.getInstance(Kind.CLASS_INFO, Option.RETAIN_CLASS_REFERENCE);\n+     *     private final StackWalker walker = StackWalker.getInstance(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE);\n@@ -797,9 +679,0 @@\n-    \/**\n-     * {@return the kind of information this {@code StackWalker} collects}\n-     *\n-     * @since 22\n-     *\/\n-    public Kind kind() {\n-        return kind;\n-    }\n-\n@@ -809,1 +682,1 @@\n-        return newInstance(Kind.METHOD_INFO, options, extendedOption, null);\n+        return newInstance(options, extendedOption, null);\n@@ -813,1 +686,1 @@\n-        return newInstance(Kind.METHOD_INFO, options, null, contScope);\n+        return newInstance(options, null, contScope);\n@@ -816,2 +689,2 @@\n-    static StackWalker newInstance(Kind kind, Set<Option> options, ExtendedOption extendedOption, ContinuationScope contScope) {\n-        return newInstance(kind, options, extendedOption, contScope, null);\n+    static StackWalker newInstance(Set<Option> options, ExtendedOption extendedOption, ContinuationScope contScope) {\n+        return newInstance(options, extendedOption, contScope, null);\n@@ -820,1 +693,1 @@\n-    static StackWalker newInstance(Kind kind, Set<Option> options, ExtendedOption extendedOption, ContinuationScope contScope, Continuation continuation) {\n+    static StackWalker newInstance(Set<Option> options, ExtendedOption extendedOption, ContinuationScope contScope, Continuation continuation) {\n@@ -823,1 +696,1 @@\n-        return new StackWalker(kind, optionSet, 0, extendedOption, contScope, continuation);\n+        return new StackWalker(optionSet, 0, extendedOption, contScope, continuation);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":91,"deletions":218,"binary":false,"changes":309,"status":"modified"},{"patch":"@@ -2662,1 +2662,1 @@\n-                return StackWalker.newInstance(StackWalker.Kind.METHOD_INFO, options, null, contScope, continuation);\n+                return StackWalker.newInstance(options, null, contScope, continuation);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                () -> StackWalker.getInstance(StackWalker.Kind.CLASS_INFO, Option.RETAIN_CLASS_REFERENCE);\n+                () -> StackWalker.getInstance(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurityManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import static java.lang.StackWalker.Kind.*;\n@@ -50,5 +49,1 @@\n-                StackWalker.getInstance(null, (StackWalker.Option[])null));\n-        assertThrows(NullPointerException.class, () ->\n-                StackWalker.getInstance(METHOD_INFO, (StackWalker.Option[])null));\n-        assertThrows(NullPointerException.class, () ->\n-                StackWalker.getInstance(METHOD_INFO, new StackWalker.Option[] { null }));\n+                StackWalker.getInstance((StackWalker.Option[])null));\n@@ -58,1 +53,1 @@\n-        return Stream.of(StackWalker.getInstance(), StackWalker.getInstance(CLASS_INFO));\n+        return Stream.of(StackWalker.getInstance(), StackWalker.getInstance(DROP_METHOD_INFO));\n@@ -100,2 +95,2 @@\n-        return Stream.of(StackWalker.getInstance(CLASS_INFO),\n-                         StackWalker.getInstance(CLASS_INFO, RETAIN_CLASS_REFERENCE));\n+        return Stream.of(StackWalker.getInstance(DROP_METHOD_INFO),\n+                         StackWalker.getInstance(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE));\n","filename":"test\/jdk\/java\/lang\/StackWalker\/SanityTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import static java.lang.StackWalker.Kind.*;\n@@ -164,1 +163,1 @@\n-            List<Class<?>> classes = StackWalker.getInstance(CLASS_INFO, RETAIN_CLASS_REFERENCE)\n+            List<Class<?>> classes = StackWalker.getInstance(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE)\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackStreamTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-import static java.lang.StackWalker.Kind.CLASS_INFO;\n-import static java.lang.StackWalker.Option.RETAIN_CLASS_REFERENCE;\n+import static java.lang.StackWalker.Option.*;\n@@ -56,1 +55,1 @@\n-            StackWalker.getInstance(CLASS_INFO, RETAIN_CLASS_REFERENCE);\n+            StackWalker.getInstance(DROP_METHOD_INFO, RETAIN_CLASS_REFERENCE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StackWalkBench.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}