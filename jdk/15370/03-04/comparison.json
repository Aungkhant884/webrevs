{"files":[{"patch":"@@ -32,1 +32,1 @@\n-    protected int flags;\n+    protected int flags;                   \/\/ updated by VM to set hidden and caller-sensitive bits\n@@ -58,5 +58,0 @@\n-    @Override\n-    public String getMethodName() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n@@ -69,0 +64,5 @@\n+    @Override\n+    public String getMethodName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassFrameInfo.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,8 +42,6 @@\n- * <p> The {@link Kind} specifies the information\n- * of the stack frames to be collected.  A {@code StackWalker} of\n- * {@link Kind#METHOD_INFO METHOD_INFO} kind collects the method information\n- * of stack frames.  If the method information is not needed, a {@code StackWalker}\n- * of {@link Kind#CLASS_INFO CLASS_INFO} kind can be used instead and that\n- * only collects the class information.  The {@link #getInstance() getInstance}\n- * factory methods produce a {@code StackWalker} that collects the method information\n- * of stack frames by default.\n+ * <p> The {@link Kind} specifies the information of the stack frames to be collected.\n+ * The {@link #getInstance() getInstance} factory methods return a {@code StackWalker}\n+ * that collects the {@linkplain Kind#METHOD_INFO method information}\n+ * from the stack frames by default.  If the method information is not needed,\n+ * a {@code StackWalker} collecting {@linkplain Kind#CLASS_INFO class only information}\n+ * can be used instead via the {@link #getInstance(Kind, Option...)} method.\n@@ -106,5 +104,8 @@\n-     * {@linkplain Kind kind} of the stack walker.  A {@code StackWalker} of\n-     * {@link Kind#METHOD_INFO METHOD_INFO} kind collects the method information\n-     * including the method name and descriptor, bytecode index, line number, etc.\n-     * A {@code StackWalker} of {@link Kind#CLASS_INFO CLASS_INFO} kind collects\n-     * only class information.\n+     * {@linkplain Kind kind} of the stack walker.  Method information such as\n+     * the {@linkplain StackFrame#getMethodName() method name},\n+     * the {@linkplain StackFrame#getLineNumber() line number},\n+     * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n+     * etc is not available on {@code StackFrame}s produced by {@code StackWalker}\n+     * that collects only {@linkplain Kind#CLASS_INFO class information}.\n+     * {@code UnsupportedOperationException} will be thrown if unavailable\n+     * information is being accessed.\n@@ -131,2 +132,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -154,2 +155,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind or configured without\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information} or configured without\n@@ -175,2 +176,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -199,2 +200,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -218,2 +219,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -236,2 +237,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -255,2 +256,2 @@\n-         * @throws UnsupportedOperationException if the {@code StackWalker} is of\n-         *         {@link Kind#CLASS_INFO CLASS_INFO} kind\n+         * @throws UnsupportedOperationException if the {@code StackWalker} collects\n+         *         {@linkplain Kind#CLASS_INFO class only information}\n@@ -317,1 +318,1 @@\n-         * Class information.\n+         * Class only information.\n@@ -320,2 +321,2 @@\n-         * of the stack frames.  Only {@link StackFrame#getClassName() StackFrame::getClassName}\n-         * and the {@link StackFrame#getDeclaringClass() StackFrame::getDeclaringClass}\n+         * from the stack frames.  Only {@link StackFrame#getClassName() StackFrame::getClassName}\n+         * and {@link StackFrame#getDeclaringClass() StackFrame::getDeclaringClass}\n@@ -329,5 +330,8 @@\n-         * of the stack frames which includes\n-         * {@linkplain StackFrame#getMethodName() method name},\n-         * {@linkplain StackFrame#getMethodType() method type},\n-         * {@linkplain StackFrame#getLineNumber() line number} and\n-         * {@linkplain StackFrame#getByteCodeIndex() bytecode index}.\n+         * from the stack frames which includes\n+         * the {@linkplain StackFrame#getClassName() class name},\n+         * the {@linkplain StackFrame#getMethodName() method name},\n+         * the {@linkplain StackFrame#getMethodType() method type},\n+         * the {@linkplain StackFrame#getLineNumber() line number},\n+         * the {@linkplain StackFrame#getByteCodeIndex() bytecode index},\n+         * the {@linkplain StackFrame#getFileName() source file name} and\n+         * {@linkplain StackFrame#isNativeMethod() native method or not},\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":39,"deletions":35,"binary":false,"changes":74,"status":"modified"}]}