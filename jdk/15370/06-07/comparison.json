{"files":[{"patch":"@@ -256,1 +256,1 @@\n-JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jlong mode,\n+JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jint mode,\n@@ -261,1 +261,1 @@\n-JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jlong mode, jlong anchor,\n+JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jint mode, jlong anchor,\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -565,1 +565,1 @@\n-JVM_ENTRY(jobject, JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jlong mode,\n+JVM_ENTRY(jobject, JVM_CallStackWalk(JNIEnv *env, jobject stackStream, jint mode,\n@@ -592,1 +592,1 @@\n-JVM_ENTRY(jint, JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jlong mode, jlong anchor,\n+JVM_ENTRY(jint, JVM_MoreStackWalk(JNIEnv *env, jobject stackStream, jint mode, jlong anchor,\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-JavaFrameStream::JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont)\n+JavaFrameStream::JavaFrameStream(JavaThread* thread, jint mode, Handle cont_scope, Handle cont)\n@@ -165,1 +165,1 @@\n-int StackWalk::fill_in_frames(jlong mode, BaseFrameStream& stream,\n+int StackWalk::fill_in_frames(jint mode, BaseFrameStream& stream,\n@@ -410,1 +410,1 @@\n-oop StackWalk::walk(Handle stackStream, jlong mode, int skip_frames, Handle cont_scope, Handle cont,\n+oop StackWalk::walk(Handle stackStream, jint mode, int skip_frames, Handle cont_scope, Handle cont,\n@@ -417,1 +417,1 @@\n-  log_debug(stackwalk)(\"Start walking: mode \" JLONG_FORMAT \" skip %d frames batch size %d\", mode, skip_frames, frame_count);\n+  log_debug(stackwalk)(\"Start walking: mode \" INT32_FORMAT_X \" skip %d frames batch size %d\", mode, skip_frames, frame_count);\n@@ -451,1 +451,1 @@\n-                               jlong mode, int skip_frames, int frame_count,\n+                               jint mode, int skip_frames, int frame_count,\n@@ -544,1 +544,1 @@\n-jint StackWalk::fetchNextBatch(Handle stackStream, jlong mode, jlong magic,\n+jint StackWalk::fetchNextBatch(Handle stackStream, jint mode, jlong magic,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont);\n+  JavaFrameStream(JavaThread* thread, jint mode, Handle cont_scope, Handle cont);\n@@ -145,1 +145,1 @@\n-  static int fill_in_frames(jlong mode, BaseFrameStream& stream,\n+  static int fill_in_frames(jint mode, BaseFrameStream& stream,\n@@ -150,1 +150,1 @@\n-  static inline bool skip_hidden_frames(jlong mode) {\n+  static inline bool skip_hidden_frames(jint mode) {\n@@ -153,1 +153,1 @@\n-  static inline bool live_frame_info(jlong mode) {\n+  static inline bool live_frame_info(jint mode) {\n@@ -158,1 +158,1 @@\n-  static inline bool need_method_info(jlong mode) {\n+  static inline bool need_method_info(jint mode) {\n@@ -162,1 +162,1 @@\n-  static oop walk(Handle stackStream, jlong mode, int skip_frames, Handle cont_scope, Handle cont,\n+  static oop walk(Handle stackStream, jint mode, int skip_frames, Handle cont_scope, Handle cont,\n@@ -167,1 +167,1 @@\n-                             jlong mode, int skip_frames, int frame_count,\n+                             jint mode, int skip_frames, int frame_count,\n@@ -170,1 +170,1 @@\n-  static jint fetchNextBatch(Handle stackStream, jlong mode, jlong magic,\n+  static jint fetchNextBatch(Handle stackStream, jint mode, jlong magic,\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-        private native R callStackWalk(long mode, int skipframes,\n+        private native R callStackWalk(int mode, int skipframes,\n@@ -477,1 +477,1 @@\n-        private native int fetchStackFrames(long mode, long anchor,\n+        private native int fetchStackFrames(int mode, long anchor,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n- * <p> The {@linkplain Option <em>stack walking option<\/em>} specifies\n- * what the information a stack walker collects from the stack frames.\n- * By default, the class name and method information are available but\n+ * <p> {@linkplain Option <em>Stack walker options<\/em>} configure the stack frame\n+ * information obtained by a {@code StackWalker}.\n+ * By default, the class name and method information are collected but\n@@ -56,1 +56,1 @@\n- * The method information can be dropped via {@link Option#DROP_METHOD_INFO\n+ * The method information can be dropped via the {@link Option#DROP_METHOD_INFO\n@@ -58,1 +58,1 @@\n- * access via {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option.\n+ * access via the {@link Option#RETAIN_CLASS_REFERENCE RETAIN_CLASS_REFERENCE} option.\n@@ -71,1 +71,1 @@\n- * <p>1. To find the first caller filtering a known list of implementation class:\n+ * <p>1. To find the first caller filtering out a known list of implementation class:\n@@ -97,2 +97,2 @@\n-     * <p> The information of a {@code StackFrame} available is determined by the\n-     * {@linkplain Option stack walking options} of a stack walker.\n+     * <p> {@linkplain Option <em>Stack walker options<\/em>} configure the stack\n+     * frame information obtained by a {@code StackWalker}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n- * Signature: (JILjdk\/internal\/vm\/ContinuationScope;Ljdk\/internal\/vm\/Continuation;II[Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+ * Signature: (IILjdk\/internal\/vm\/ContinuationScope;Ljdk\/internal\/vm\/Continuation;II[Ljava\/lang\/Object;)Ljava\/lang\/Object;\n@@ -58,1 +58,1 @@\n-  (JNIEnv *env, jobject stackstream, jlong mode, jint skipFrames, jobject contScope, jobject cont,\n+  (JNIEnv *env, jobject stackstream, jint mode, jint skipFrames, jobject contScope, jobject cont,\n@@ -68,1 +68,1 @@\n- * Signature: (JJII[Ljava\/lang\/Object;)I\n+ * Signature: (IJII[Ljava\/lang\/Object;)I\n@@ -71,1 +71,1 @@\n-  (JNIEnv *env, jobject stackstream, jlong mode, jlong anchor,\n+  (JNIEnv *env, jobject stackstream, jint mode, jlong anchor,\n","filename":"src\/java.base\/share\/native\/libjava\/StackStreamFactory.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8157464\n+ * @bug 8157464 8210375\n@@ -32,0 +32,1 @@\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames csm\/jdk.test.CallerSensitiveTest\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/Main.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private static final String REFLECTIVE_GET_CALLER_METHOD = \"getCallerClassReflectively\";\n@@ -71,0 +72,2 @@\n+        \/\/ test reflective call to StackWalker::getCallerClass\n+        cstest.invokeMethod();\n@@ -98,1 +101,10 @@\n-        Result result = (Result) method2.invoke(null);\n+        Result result2 = (Result) method2.invoke(null);\n+        checkNonCSMCaller(CallerSensitiveTest.class, result2);\n+\n+        Method method3 = java.util.CSM.class.getMethod(REFLECTIVE_GET_CALLER_METHOD);\n+        Result result3 = (Result) method3.invoke(null);\n+        checkNonCSMCaller(CallerSensitiveTest.class, result3);\n+    }\n+\n+    void invokeMethod() throws Throwable {\n+        Result result = java.util.CSM.getCallerClassReflectively();\n@@ -104,1 +116,1 @@\n-            MethodType.methodType(Class.class));\n+                                             MethodType.methodType(Class.class));\n@@ -108,3 +120,8 @@\n-            MethodType.methodType(Result.class));\n-        Result result = (Result)mh2.invokeExact();\n-        checkNonCSMCaller(CallerSensitiveTest.class, result);\n+                                             MethodType.methodType(Result.class));\n+        Result result2 = (Result)mh2.invokeExact();\n+        checkNonCSMCaller(CallerSensitiveTest.class, result2);\n+\n+        MethodHandle mh3 = lookup.findStatic(java.util.CSM.class, REFLECTIVE_GET_CALLER_METHOD,\n+                                             MethodType.methodType(Result.class));\n+        Result result3 = (Result)mh3.invokeExact();\n+        checkNonCSMCaller(CallerSensitiveTest.class, result3);\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/csm\/jdk\/test\/CallerSensitiveTest.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.Method;\n@@ -36,0 +37,1 @@\n+                                           DROP_METHOD_INFO,\n@@ -67,1 +69,2 @@\n-     * Returns the caller of this non-caller-sensitive method.\n+     * Returns the caller of this non-caller-sensitive method returned\n+     * by StackWalker::getCallerClass\n@@ -74,0 +77,20 @@\n+    private static final Method GET_CALLER_CLASS;\n+    static {\n+        Method m = null;\n+        try {\n+            m = StackWalker.class.getMethod(\"getCallerClass\");\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+        GET_CALLER_CLASS = m;\n+    }\n+\n+    \/**\n+     * Returns the caller of this non-caller-sensitive method returned\n+     * by StackWalker::getCallerClass invoked via core reflection\n+     *\/\n+    public static Result getCallerClassReflectively() throws ReflectiveOperationException {\n+        Class<?> caller = (Class<?>)GET_CALLER_CLASS.invoke(walker);\n+        return new Result(List.of(caller), dump());\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/src\/java.base\/java\/util\/CSM.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8140450 8152893 8189291\n+ * @bug 8140450 8152893 8189291 8210375\n@@ -122,0 +122,1 @@\n+            \/\/ Use reflection to call Method::invoke that invokes StackWalker::getCallerClass\n@@ -123,1 +124,2 @@\n-            Class<?> c = (Class<?>) m.invoke(stackWalker);\n+            Method invoke = Method.class.getMethod(\"invoke\", Object.class, Object[].class);\n+            Class<?> c = (Class<?>) invoke.invoke(m, new Object[] { stackWalker, null });\n","filename":"test\/jdk\/java\/lang\/StackWalker\/GetCallerClassTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8140450\n+ * @bug 8140450 8268829\n","filename":"test\/jdk\/java\/lang\/StackWalker\/SanityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @bug 8140450\n+ * @bug 8140450 8210375\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackStreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,0 +322,38 @@\n+    \/**\n+     * StackWalker.getCallerClass() with generated call stack of\n+     * the given depth.\n+     *\/\n+    @Benchmark\n+    public void getCallerClass_withTestStack(Blackhole bh) {\n+        final Blackhole localBH = bh;\n+        final boolean[] done = {false};\n+        final StackWalker sw = walker(walker);\n+        new TestStack(depth, new Runnable() {\n+            public void run() {\n+                localBH.consume(sw.getCallerClass());\n+                done[0] = true;\n+            }\n+        }).start();\n+        if (!done[0]) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    \/**\n+     * Baseline for generating a call stack of the given depth.\n+     * (No StackWalk operations are executed)\n+     *\/\n+     @Benchmark\n+     public void makeCallStack(Blackhole bh) {\n+         final Blackhole localBH = bh;\n+         final boolean[] done = {false};\n+         new TestStack(depth, new Runnable() {\n+             public void run() {\n+                 done[0] = true;\n+             }\n+         }).start();\n+         if (!done[0]) {\n+             throw new RuntimeException();\n+         }\n+     }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StackWalkBench.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}