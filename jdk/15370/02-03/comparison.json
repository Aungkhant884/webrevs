{"files":[{"patch":"@@ -2997,0 +2997,1 @@\n+  assert((flags & 0xFF000000) == 0, \"unexpected flags\");\n@@ -3004,0 +3005,4 @@\n+int java_lang_ClassFrameInfo::flags(oop obj) {\n+  return obj->int_field(_flags_offset);\n+}\n+\n@@ -3006,1 +3011,3 @@\n-  stackFrame->int_field_put(_flags_offset, get_flags(m));\n+  \/\/ flags is initialized when ClassFrameInfo object is constructed and retain the value\n+  int flags = java_lang_ClassFrameInfo::flags(stackFrame()) | get_flags(m);\n+  stackFrame->int_field_put(_flags_offset, flags);\n@@ -3012,1 +3019,3 @@\n-  stackFrame->int_field_put(_flags_offset, get_flags(m));\n+  \/\/ flags is initialized when ClassFrameInfo object is constructed and retain the value\n+  int flags = java_lang_ClassFrameInfo::flags(stackFrame()) | get_flags(m);\n+  stackFrame->int_field_put(_flags_offset, flags);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1601,0 +1601,1 @@\n+  static int  flags(oop info);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -35,0 +34,4 @@\n+    ClassFrameInfo(StackWalker walker) {\n+        this.flags = walker.retainClassRef ? RETAIN_CLASS_REF_BIT : 0;\n+    }\n+\n@@ -42,1 +45,1 @@\n-        return SharedSecrets.getJavaLangInvokeAccess().isCallerSensitive(flags);\n+        return SharedSecrets.getJavaLangInvokeAccess().isCallerSensitive(flags & MEMBER_INFO_FLAGS);\n@@ -45,1 +48,1 @@\n-        return SharedSecrets.getJavaLangInvokeAccess().isHiddenMember(flags);\n+        return SharedSecrets.getJavaLangInvokeAccess().isHiddenMember(flags & MEMBER_INFO_FLAGS);\n@@ -62,0 +65,1 @@\n+        ensureRetainClassRefEnabled();\n@@ -96,1 +100,14 @@\n-        return declaringClass().getName() + tags;\n+        return declaringClass().getName() + \" \" + tags;\n+    }\n+\n+    private static final int MEMBER_INFO_FLAGS = 0x00FFFFFF;\n+    private static final int RETAIN_CLASS_REF_BIT = 0x08000000; \/\/ retainClassRef\n+\n+    boolean retainClassRef() {\n+        return (flags & RETAIN_CLASS_REF_BIT) == RETAIN_CLASS_REF_BIT;\n+    }\n+\n+    void ensureRetainClassRefEnabled() {\n+        if (!retainClassRef()) {\n+            throw new UnsupportedOperationException(\"No access to RETAIN_CLASS_REFERENCE\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassFrameInfo.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-    private final boolean retainClassRef;\n@@ -53,1 +52,1 @@\n-        this.retainClassRef = walker.retainClassRef;\n+        super(walker);\n@@ -69,6 +68,0 @@\n-    @Override\n-    public Class<?> getDeclaringClass() {\n-        ensureRetainClassRefEnabled();\n-        return declaringClass();\n-    }\n-\n@@ -170,6 +163,0 @@\n-\n-    private void ensureRetainClassRefEnabled() {\n-        if (!retainClassRef) {\n-            throw new UnsupportedOperationException(\"No access to RETAIN_CLASS_REFERENCE\");\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackFrameInfo.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+\n@@ -456,1 +457,1 @@\n-         * @param frames      Either a Class<?> array, if mode is {@link #CLASS_INFO_ONLY}\n+         * @param frames      Either a {@link ClassFrameInfo} array, if mode is {@link #CLASS_INFO_ONLY}\n@@ -472,1 +473,1 @@\n-         * @param frames      Either a Class<?> array, if mode is {@link #CLASS_INFO_ONLY}\n+         * @param frames      Either a {@link ClassFrameInfo} array, if mode is {@link #CLASS_INFO_ONLY}\n@@ -532,1 +533,1 @@\n-                                    ? new ClassBuffer(getNextBatchSize())\n+                                    ? new ClassFrameBuffer(walker, getNextBatchSize())\n@@ -661,1 +662,2 @@\n-    static final class ClassBuffer extends FrameBuffer<ClassFrameInfo> {\n+    static final class ClassFrameBuffer extends FrameBuffer<ClassFrameInfo> {\n+        final StackWalker walker;\n@@ -663,1 +665,1 @@\n-        ClassBuffer(int batchSize) {\n+        ClassFrameBuffer(StackWalker walker, int batchSize) {\n@@ -665,1 +667,2 @@\n-            classFrames = new ClassFrameInfo[batchSize];\n+            this.walker = walker;\n+            this.classFrames = new ClassFrameInfo[batchSize];\n@@ -667,1 +670,1 @@\n-                classFrames[i] = new ClassFrameInfo();\n+                classFrames[i] = new ClassFrameInfo(walker);\n@@ -720,3 +723,0 @@\n-                for (int i = startIndex; i < size; i++) {\n-                    newFrames[i] = new ClassFrameInfo();\n-                }\n@@ -725,0 +725,3 @@\n+            for (int i = startIndex; i < size; i++) {\n+                classFrames[i] = new ClassFrameInfo(walker);\n+            }\n@@ -762,1 +765,1 @@\n-                        System.err.println(\"  skip: frame \" + frameBuffer.getIndex() + \" \" + caller.getName());\n+                        System.err.println(\"  skip: frame \" + frameBuffer.getIndex() + \" \" + curFrame);\n@@ -772,1 +775,1 @@\n-                throw new IllegalCallerException(\"no caller frame\");\n+                throw new IllegalCallerException(\"no caller frame: \" + Arrays.toString(frames));\n@@ -783,1 +786,1 @@\n-            this.frameBuffer = new ClassBuffer(getNextBatchSize());\n+            this.frameBuffer = new ClassFrameBuffer(walker, getNextBatchSize());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -808,0 +808,4 @@\n+    static StackWalker newInstance(Set<Option> options, ContinuationScope contScope) {\n+        return newInstance(Kind.METHOD_INFO, options, null, contScope);\n+    }\n+\n@@ -809,3 +813,1 @@\n-        EnumSet<Option> optionSet = toEnumSet(options);\n-        checkPermission(optionSet);\n-        return new StackWalker(kind, optionSet, 0, extendedOption, contScope, null);\n+        return newInstance(kind, options, extendedOption, contScope, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        Method ewsNI = StackWalker.class.getDeclaredMethod(\"newInstance\", Set.class, extendedOptionClass, jdk.internal.vm.ContinuationScope.class);\n+        Method ewsNI = StackWalker.class.getDeclaredMethod(\"newInstance\", Set.class, extendedOptionClass);\n@@ -88,1 +88,1 @@\n-        sw = (StackWalker) ewsNI.invoke(null, java.util.Collections.emptySet(), localsAndOperandsOption, null);\n+        sw = (StackWalker) ewsNI.invoke(null, java.util.Collections.emptySet(), localsAndOperandsOption);\n","filename":"test\/hotspot\/jtreg\/runtime\/LocalLong\/LocalLongHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,4 +57,8 @@\n-    @Test\n-    public void testUOE() {\n-        assertThrows(UnsupportedOperationException.class, () ->\n-                StackWalker.getInstance().getCallerClass());\n+    private static Stream<StackWalker> noRetainClassRef() {\n+        return Stream.of(StackWalker.getInstance(), StackWalker.getInstance(CLASS_INFO));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOE(StackWalker sw) {\n+        assertThrows(UnsupportedOperationException.class, () -> sw.getCallerClass());\n@@ -70,1 +74,1 @@\n-    public void testNullFuncation() {\n+    public void testNullFunction() {\n@@ -81,3 +85,3 @@\n-\n-    @Test\n-    public void testUOEFromGetDeclaringClass() {\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOEFromGetDeclaringClass(StackWalker sw) {\n@@ -85,1 +89,1 @@\n-                StackWalker.getInstance().forEach(StackWalker.StackFrame::getDeclaringClass));\n+                sw.forEach(StackWalker.StackFrame::getDeclaringClass));\n@@ -88,2 +92,3 @@\n-    @Test\n-    public void testUOEFromGetMethodType() {\n+    @ParameterizedTest\n+    @MethodSource(\"noRetainClassRef\")\n+    public void testUOEFromGetMethodType(StackWalker sw) {\n@@ -91,1 +96,1 @@\n-                StackWalker.getInstance().forEach(StackWalker.StackFrame::getMethodType));\n+                sw.forEach(StackWalker.StackFrame::getMethodType));\n@@ -95,1 +100,2 @@\n-        return Stream.of(StackWalker.getInstance(CLASS_INFO), StackWalker.getInstance(CLASS_INFO, RETAIN_CLASS_REFERENCE));\n+        return Stream.of(StackWalker.getInstance(CLASS_INFO),\n+                         StackWalker.getInstance(CLASS_INFO, RETAIN_CLASS_REFERENCE));\n","filename":"test\/jdk\/java\/lang\/StackWalker\/SanityTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        return StackWalker.getInstance(scope);\n+        return StackWalker.newInstance(Set.of(), scope);\n@@ -47,1 +47,1 @@\n-    public static StackFrame[] getStackFrames(ContinuationScope scope)     { return getStackFrames(StackWalker.getInstance(OPTS, scope)); }\n+    public static StackFrame[] getStackFrames(ContinuationScope scope)     { return getStackFrames(StackWalker.newInstance(OPTS, scope)); }\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/java.base\/java\/lang\/StackWalkerHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    @Param({\"default\", \"class_info\"})\n+    @Param({\"default\", \"class_only\"})\n@@ -318,2 +318,0 @@\n-        final Blackhole localBH = bh;\n-        final boolean[] done = {false};\n@@ -321,9 +319,2 @@\n-        new TestStack(depth, new Runnable() {\n-            public void run() {\n-                localBH.consume(sw.getCallerClass());\n-                done[0] = true;\n-            }\n-        }).start();\n-        if (!done[0]) {\n-            throw new RuntimeException();\n-        }\n+        Class<?> c = sw.getCallerClass();\n+        bh.consume(c);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StackWalkBench.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"}]}