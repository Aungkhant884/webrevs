{"files":[{"patch":"@@ -1372,2 +1372,2 @@\n-    \/\/ r29 is not allocatable when PreserveFramePointer or ROP protection is on\n-    if (PreserveFramePointer || VM_Version::use_rop_protection()) {\n+    \/\/ r29 is not allocatable when PreserveFramePointer is on\n+    if (PreserveFramePointer) {\n@@ -1859,0 +1859,4 @@\n+  if (VM_Version::use_rop_protection()) {\n+    st->print(\"ldr zr, [lr]\\n\\t\");\n+    st->print(\"pacia  lr, rfp\\n\\t\");\n+  }\n@@ -1967,0 +1971,4 @@\n+  if (VM_Version::use_rop_protection()) {\n+    st->print(\"autia lr, rfp\\n\\t\");\n+    st->print(\"ldr zr, [lr]\\n\\t\");\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    __ enter(true); \/\/ barrier may call runtime\n+    __ enter(\/*strip_ret_addr*\/true); \/\/ barrier may call runtime\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-  __ enter(true);\n+  __ enter(\/*strip_ret_addr*\/true);\n@@ -362,1 +362,1 @@\n-    __ enter(true);\n+    __ enter(\/*strip_ret_addr*\/true);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  __ enter(true);\n+  __ enter(\/*strip_ret_addr*\/true);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5328,0 +5328,1 @@\n+    assert(PreserveFramePointer, \"PreserveFramePointer must be set for ROP protection\");\n@@ -5336,1 +5337,1 @@\n-void MacroAssembler::authenticate_return_address() {\n+void MacroAssembler::authenticate_return_address(Register return_reg) {\n@@ -5338,2 +5339,2 @@\n-    autia(lr, rfp);\n-    check_return_address();\n+    autia(return_reg, rfp);\n+    check_return_address(return_reg);\n@@ -5350,0 +5351,1 @@\n+    assert(PreserveFramePointer, \"PreserveFramePointer must be set for ROP protection\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -697,1 +697,1 @@\n-  void authenticate_return_address();\n+  void authenticate_return_address(Register return_reg = lr);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2926,0 +2926,1 @@\n+  __ authenticate_return_address(r3);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -436,0 +436,5 @@\n+  \/\/ The frame pointer must be preserved for ROP protection.\n+  if (_rop_protection == true) {\n+    PreserveFramePointer = true;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}