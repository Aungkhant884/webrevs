{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-#include \"services\/dtraceAttacher.hpp\"\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"services\/dtraceAttacher.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"services\/dtraceAttacher.hpp\"\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"services\/dtraceAttacher.hpp\"\n","filename":"src\/hotspot\/os\/windows\/attachListener_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_SERVICES_DTRACEATTACHER_HPP\n-#define SHARE_SERVICES_DTRACEATTACHER_HPP\n-\n-#define DTRACE_ALLOC_PROBES    0x1\n-#define DTRACE_METHOD_PROBES   0x2\n-#define DTRACE_MONITOR_PROBES  0x4\n-#define DTRACE_ALL_PROBES      (DTRACE_ALLOC_PROBES  | \\\n-                                DTRACE_METHOD_PROBES | \\\n-                                DTRACE_MONITOR_PROBES)\n-\n-class DTrace : public AllStatic {\n- private:\n-  \/\/ disable one or more probes - OR above constants\n-  static void disable_dprobes(int probe_types);\n-\n- public:\n-  \/\/ enable one or more probes - OR above constants\n-  static void enable_dprobes(int probe_types);\n-  \/\/ all clients detached, do any clean-up\n-  static void detach_all_clients();\n-  \/\/ set ExtendedDTraceProbes flag\n-  static void set_extended_dprobes(bool value);\n-  \/\/ set DTraceMonitorProbes flag\n-  static void set_monitor_dprobes(bool value);\n-};\n-\n-#endif \/\/ SHARE_SERVICES_DTRACEATTACHER_HPP\n","filename":"src\/hotspot\/share\/services\/dtraceAttacher.hpp","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1576,1 +1576,1 @@\n-     * @return the locale of this formatter, not null\n+     * @return the DecimalStyle of this formatter, not null\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,0 @@\n-    private ObjectIdentifier contentType;\n-\n@@ -170,1 +168,1 @@\n-        contentType = block.contentType;\n+        ObjectIdentifier contentType = block.contentType;\n@@ -243,1 +241,1 @@\n-            } catch (CertificateException ce) {\n+            } catch (CertificateException | IOException ce) {\n@@ -247,4 +245,0 @@\n-            } catch (IOException ioe) {\n-                ParsingException pe = new ParsingException(ioe.getMessage());\n-                pe.initCause(ioe);\n-                throw pe;\n@@ -333,1 +327,1 @@\n-                } catch (CertificateException ce) {\n+                } catch (CertificateException | IOException ce) {\n@@ -337,4 +331,0 @@\n-                } catch (IOException ioe) {\n-                    ParsingException pe = new ParsingException(ioe.getMessage());\n-                    pe.initCause(ioe);\n-                    throw pe;\n@@ -447,1 +437,1 @@\n-            } catch (CertificateException ce) {\n+            } catch (CertificateException | IOException ce) {\n@@ -451,4 +441,0 @@\n-            } catch (IOException ioe) {\n-                ParsingException pe = new ParsingException(ioe.getMessage());\n-                pe.initCause(ioe);\n-                throw pe;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-void initializeFileLogger(char * fileName) {\n+void initializeFileLogger(const char * fileName) {\n@@ -86,1 +86,1 @@\n-char *printError(char *msg) {\n+char *printError(const char *msg) {\n@@ -122,1 +122,1 @@\n-    void PrintDebugString(char *msg, ...) {\n+    void PrintDebugString(const char *msg, ...) {\n@@ -150,1 +150,1 @@\n-    void PrintJavaDebugString2(char *msg, ...) {\n+    void PrintJavaDebugString2(const char *msg, ...) {\n@@ -177,1 +177,1 @@\n-    void wPrintDebugString(wchar_t *msg, ...) {\n+    void wPrintDebugString(const wchar_t *msg, ...) {\n@@ -207,1 +207,1 @@\n-    void wPrintJavaDebugString(wchar_t *msg, ...) {\n+    void wPrintJavaDebugString(const wchar_t *msg, ...) {\n","filename":"src\/jdk.accessibility\/windows\/native\/common\/AccessBridgeDebug.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,6 +52,6 @@\n-    char *printError(char *msg);\n-    void PrintDebugString(char *msg, ...);\n-    void PrintJavaDebugString(char *msg, ...);\n-    void wPrintJavaDebugString(wchar_t *msg, ...);\n-    void wPrintDebugString(wchar_t *msg, ...);\n-    void initializeFileLogger(char * fileName);\n+    char *printError(const char *msg);\n+    void PrintDebugString(const char *msg, ...);\n+    void PrintJavaDebugString(const char *msg, ...);\n+    void wPrintJavaDebugString(const wchar_t *msg, ...);\n+    void wPrintDebugString(const wchar_t *msg, ...);\n+    void initializeFileLogger(const char * fileName);\n","filename":"src\/jdk.accessibility\/windows\/native\/common\/AccessBridgeDebug.h","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-                                     char *announcement) {\n+                                     const char *announcement) {\n","filename":"src\/jdk.accessibility\/windows\/native\/jaccessinspector\/jaccessinspector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-DEBUG_CODE(void AppendToCallInfo(char *s));\n+DEBUG_CODE(void AppendToCallInfo(const char *s));\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/AccessBridgeEventHandler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    DEBUG_CODE(void AppendToCallInfo(char *s));\n+    DEBUG_CODE(void AppendToCallInfo(const char *s));\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/AccessBridgeJavaVMInstance.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    DEBUG_CODE(void AppendToCallInfo(char *s));\n+    DEBUG_CODE(void AppendToCallInfo(const char *s));\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/AccessBridgeMessageQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    void AppendToCallInfo(char *s) {\n+    void AppendToCallInfo(const char *s) {\n","filename":"src\/jdk.accessibility\/windows\/native\/libwindowsaccessbridge\/WinAccessBridge.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-void logString(FILE *logfile, char *msg, ...) {\n+void logString(FILE *logfile, const char *msg, ...) {\n@@ -108,1 +108,1 @@\n-BOOL appendToBuffer(char *buf, size_t buflen, char *msg, ...) {\n+BOOL appendToBuffer(char *buf, size_t buflen, const char *msg, ...) {\n","filename":"src\/jdk.accessibility\/windows\/native\/toolscommon\/AccessInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-void logString(FILE *logfile, char *msg, ...);\n+void logString(FILE *logfile, const char *msg, ...);\n","filename":"src\/jdk.accessibility\/windows\/native\/toolscommon\/AccessInfo.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4514331\n+ * @summary Check whether pressing <Tab> key always shift focus to next component,\n+ *          even though the current focus is in JTextArea and some text is already selected.\n+ * @run main TabShiftsFocusToNextComponent\n+ *\/\n+public class TabShiftsFocusToNextComponent {\n+\n+    private static JFrame frame;\n+    private static JTextArea textArea;\n+    private static Robot robot;\n+    private static CountDownLatch textAreaGainedFocusLatch;\n+    private static CountDownLatch buttonGainedFocusLatch;\n+\n+    public static void main(String[] s) throws Exception {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(UIManager.LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            textAreaGainedFocusLatch = new CountDownLatch(1);\n+            buttonGainedFocusLatch = new CountDownLatch(1);\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                SwingUtilities.invokeAndWait(() -> textArea.requestFocusInWindow());\n+\n+                \/\/ Waits until the textArea gains focus.\n+                if (!textAreaGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Test Failed, waited for long, \" +\n+                            \"but the JTextArea can't gain focus for L&F: \" + laf);\n+                }\n+\n+                AtomicReference<Point> textAreaLoc = new AtomicReference<Point>();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    textAreaLoc.set(textArea.getLocationOnScreen());\n+                });\n+\n+                final int x = textAreaLoc.get().x;\n+                final int y = textAreaLoc.get().y;\n+                robot.mouseMove(x + 5, y + 5);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseMove(x + 20, y + 5);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.keyPress(KeyEvent.VK_TAB);\n+                robot.keyRelease(KeyEvent.VK_TAB);\n+\n+                \/\/ Waits until the button gains focus.\n+                if (!buttonGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Test Failed, waited for long, \" +\n+                            \"but the Button can't gain focus when 'Tab' key pressed for L&F: \" + laf);\n+                } else {\n+                    System.out.println(\" Test passed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(TabShiftsFocusToNextComponent::disposeFrame);\n+            }\n+        }\n+    }\n+\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+        textArea = new JTextArea(\"I am a JTextArea\");\n+        textArea.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                textAreaGainedFocusLatch.countDown();\n+            }\n+        });\n+        textArea.setEditable(false);\n+        panel.add(textArea);\n+        JButton button = new JButton(\"Button\");\n+        panel.add(button);\n+        button.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                buttonGainedFocusLatch.countDown();\n+            }\n+        });\n+\n+        frame.add(panel);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/4514331\/TabShiftsFocusToNextComponent.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}