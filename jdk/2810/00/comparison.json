{"files":[{"patch":"@@ -3153,58 +3153,0 @@\n-extern char** environ;\n-\n-\/\/ Run the specified command in a separate process. Return its exit value,\n-\/\/ or -1 on failure (e.g. can't fork a new process).\n-\/\/ Unlike system(), this function can be called from signal handler. It\n-\/\/ doesn't block SIGINT et al.\n-int os::fork_and_exec(char* cmd, bool use_vfork_if_available) {\n-  char* argv[4] = { (char*)\"sh\", (char*)\"-c\", cmd, NULL};\n-\n-  pid_t pid = fork();\n-\n-  if (pid < 0) {\n-    \/\/ fork failed\n-    return -1;\n-\n-  } else if (pid == 0) {\n-    \/\/ child process\n-\n-    \/\/ Try to be consistent with system(), which uses \"\/usr\/bin\/sh\" on AIX.\n-    execve(\"\/usr\/bin\/sh\", argv, environ);\n-\n-    \/\/ execve failed\n-    _exit(-1);\n-\n-  } else {\n-    \/\/ copied from J2SE ..._waitForProcessExit() in UNIXProcess_md.c; we don't\n-    \/\/ care about the actual exit code, for now.\n-\n-    int status;\n-\n-    \/\/ Wait for the child process to exit. This returns immediately if\n-    \/\/ the child has already exited. *\/\n-    while (waitpid(pid, &status, 0) < 0) {\n-      switch (errno) {\n-        case ECHILD: return 0;\n-        case EINTR: break;\n-        default: return -1;\n-      }\n-    }\n-\n-    if (WIFEXITED(status)) {\n-      \/\/ The child exited normally; get its exit code.\n-      return WEXITSTATUS(status);\n-    } else if (WIFSIGNALED(status)) {\n-      \/\/ The child exited because of a signal.\n-      \/\/ The best value to return is 0x80 + signal number,\n-      \/\/ because that is what all Unix shells do, and because\n-      \/\/ it allows callers to distinguish between process exit and\n-      \/\/ process death by signal.\n-      return 0x80 + WTERMSIG(status);\n-    } else {\n-      \/\/ Unknown exit code; pass it through.\n-      return status;\n-    }\n-  }\n-  return -1;\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2613,74 +2613,0 @@\n-\/\/ Darwin has no \"environ\" in a dynamic library.\n-#ifdef __APPLE__\n-  #include <crt_externs.h>\n-  #define environ (*_NSGetEnviron())\n-#else\n-extern char** environ;\n-#endif\n-\n-\/\/ Run the specified command in a separate process. Return its exit value,\n-\/\/ or -1 on failure (e.g. can't fork a new process).\n-\/\/ Unlike system(), this function can be called from signal handler. It\n-\/\/ doesn't block SIGINT et al.\n-int os::fork_and_exec(char* cmd, bool use_vfork_if_available) {\n-  const char * argv[4] = {\"sh\", \"-c\", cmd, NULL};\n-\n-  \/\/ fork() in BsdThreads\/NPTL is not async-safe. It needs to run\n-  \/\/ pthread_atfork handlers and reset pthread library. All we need is a\n-  \/\/ separate process to execve. Make a direct syscall to fork process.\n-  \/\/ On IA64 there's no fork syscall, we have to use fork() and hope for\n-  \/\/ the best...\n-  pid_t pid = fork();\n-\n-  if (pid < 0) {\n-    \/\/ fork failed\n-    return -1;\n-\n-  } else if (pid == 0) {\n-    \/\/ child process\n-\n-    \/\/ execve() in BsdThreads will call pthread_kill_other_threads_np()\n-    \/\/ first to kill every thread on the thread list. Because this list is\n-    \/\/ not reset by fork() (see notes above), execve() will instead kill\n-    \/\/ every thread in the parent process. We know this is the only thread\n-    \/\/ in the new process, so make a system call directly.\n-    \/\/ IA64 should use normal execve() from glibc to match the glibc fork()\n-    \/\/ above.\n-    execve(\"\/bin\/sh\", (char* const*)argv, environ);\n-\n-    \/\/ execve failed\n-    _exit(-1);\n-\n-  } else  {\n-    \/\/ copied from J2SE ..._waitForProcessExit() in UNIXProcess_md.c; we don't\n-    \/\/ care about the actual exit code, for now.\n-\n-    int status;\n-\n-    \/\/ Wait for the child process to exit.  This returns immediately if\n-    \/\/ the child has already exited. *\/\n-    while (waitpid(pid, &status, 0) < 0) {\n-      switch (errno) {\n-      case ECHILD: return 0;\n-      case EINTR: break;\n-      default: return -1;\n-      }\n-    }\n-\n-    if (WIFEXITED(status)) {\n-      \/\/ The child exited normally; get its exit code.\n-      return WEXITSTATUS(status);\n-    } else if (WIFSIGNALED(status)) {\n-      \/\/ The child exited because of a signal\n-      \/\/ The best value to return is 0x80 + signal number,\n-      \/\/ because that is what all Unix shells do, and because\n-      \/\/ it allows callers to distinguish between process exit and\n-      \/\/ process death by signal.\n-      return 0x80 + WTERMSIG(status);\n-    } else {\n-      \/\/ Unknown exit code; pass it through\n-      return status;\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":74,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -5222,62 +5222,0 @@\n-extern char** environ;\n-\n-\/\/ Run the specified command in a separate process. Return its exit value,\n-\/\/ or -1 on failure (e.g. can't fork a new process).\n-\/\/ Unlike system(), this function can be called from signal handler. It\n-\/\/ doesn't block SIGINT et al.\n-int os::fork_and_exec(char* cmd, bool use_vfork_if_available) {\n-  const char * argv[4] = {\"sh\", \"-c\", cmd, NULL};\n-\n-  pid_t pid ;\n-\n-  if (use_vfork_if_available) {\n-    pid = vfork();\n-  } else {\n-    pid = fork();\n-  }\n-\n-  if (pid < 0) {\n-    \/\/ fork failed\n-    return -1;\n-\n-  } else if (pid == 0) {\n-    \/\/ child process\n-\n-    execve(\"\/bin\/sh\", (char* const*)argv, environ);\n-\n-    \/\/ execve failed\n-    _exit(-1);\n-\n-  } else  {\n-    \/\/ copied from J2SE ..._waitForProcessExit() in UNIXProcess_md.c; we don't\n-    \/\/ care about the actual exit code, for now.\n-\n-    int status;\n-\n-    \/\/ Wait for the child process to exit.  This returns immediately if\n-    \/\/ the child has already exited. *\/\n-    while (waitpid(pid, &status, 0) < 0) {\n-      switch (errno) {\n-      case ECHILD: return 0;\n-      case EINTR: break;\n-      default: return -1;\n-      }\n-    }\n-\n-    if (WIFEXITED(status)) {\n-      \/\/ The child exited normally; get its exit code.\n-      return WEXITSTATUS(status);\n-    } else if (WIFSIGNALED(status)) {\n-      \/\/ The child exited because of a signal\n-      \/\/ The best value to return is 0x80 + signal number,\n-      \/\/ because that is what all Unix shells do, and because\n-      \/\/ it allows callers to distinguish between process exit and\n-      \/\/ process death by signal.\n-      return 0x80 + WTERMSIG(status);\n-    } else {\n-      \/\/ Unknown exit code; pass it through\n-      return status;\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":62,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include <sys\/types.h>\n@@ -55,0 +56,1 @@\n+#include <sys\/wait.h>\n@@ -59,0 +61,4 @@\n+#ifdef __APPLE__\n+  #include <crt_externs.h>\n+#endif\n+\n@@ -1768,0 +1774,74 @@\n+\n+\/\/ Darwin has no \"environ\" in a dynamic library.\n+#ifdef __APPLE__\n+  #define environ (*_NSGetEnviron())\n+#else\n+  extern char** environ;\n+#endif\n+\n+char** os::get_environ() { return environ; }\n+\n+\/\/ Run the specified command in a separate process. Return its exit value,\n+\/\/ or -1 on failure (e.g. can't fork a new process).\n+\/\/ Notes: -Unlike system(), this function can be called from signal handler. It\n+\/\/         doesn't block SIGINT et al.\n+\/\/        -this function is unsafe to use in non-error situations, mainly\n+\/\/         because the child process will inherit all parent descriptors.\n+int os::fork_and_exec(const char* cmd) {\n+  const char * argv[4] = {\"sh\", \"-c\", cmd, NULL};\n+\n+  pid_t pid ;\n+\n+  char** env = os::get_environ();\n+\n+  \/\/ We use vfork() here since this is called, among other things, on OOMs to\n+  \/\/ trigger analysis scripts. So it benefits from vfork(). Even though vfork()\n+  \/\/ is not safe if used incorrectly, here it is, since we proceed straight\n+  \/\/ through vfork->exec->_exit with no intermediate steps. Also note that the\n+  \/\/ parent process is in the process of getting shutdown anyway.\n+  pid = ::vfork();\n+\n+  if (pid < 0) {\n+    \/\/ fork failed\n+    return -1;\n+\n+  } else if (pid == 0) {\n+    \/\/ child process\n+\n+    ::execve(\"\/bin\/sh\", (char* const*)argv, env);\n+\n+    \/\/ execve failed\n+    ::_exit(-1);\n+\n+  } else  {\n+    \/\/ copied from J2SE ..._waitForProcessExit() in UNIXProcess_md.c; we don't\n+    \/\/ care about the actual exit code, for now.\n+\n+    int status;\n+\n+    \/\/ Wait for the child process to exit.  This returns immediately if\n+    \/\/ the child has already exited. *\/\n+    while (::waitpid(pid, &status, 0) < 0) {\n+      switch (errno) {\n+      case ECHILD: return 0;\n+      case EINTR: break;\n+      default: return -1;\n+      }\n+    }\n+\n+    if (WIFEXITED(status)) {\n+      \/\/ The child exited normally; get its exit code.\n+      return WEXITSTATUS(status);\n+    } else if (WIFSIGNALED(status)) {\n+      \/\/ The child exited because of a signal\n+      \/\/ The best value to return is 0x80 + signal number,\n+      \/\/ because that is what all Unix shells do, and because\n+      \/\/ it allows callers to distinguish between process exit and\n+      \/\/ process death by signal.\n+      return 0x80 + WTERMSIG(status);\n+    } else {\n+      \/\/ Unknown exit code; pass it through\n+      return status;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -269,0 +269,2 @@\n+char** os::get_environ() { return _environ; }\n+\n@@ -5515,1 +5517,1 @@\n-int os::fork_and_exec(char* cmd, bool use_vfork_if_available) {\n+int os::fork_and_exec(const char* cmd) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,8 +37,0 @@\n-#ifdef __APPLE__\n-#include <crt_externs.h>\n-#define environ (*_NSGetEnviron())\n-#endif\n-\n-#ifndef environ\n-extern char** environ;\n-#endif\n@@ -284,1 +276,1 @@\n-  if (environ == NULL) {\n+  if (os::get_environ() == NULL) {\n@@ -291,1 +283,1 @@\n-    for (char** p = environ; *p != NULL; p++) {\n+    for (char** p = os::get_environ(); *p != NULL; p++) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrOSInterface.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -185,0 +185,2 @@\n+  \/\/ Get environ pointer, platform independently\n+  static char** get_environ();\n@@ -504,2 +506,3 @@\n-  \/\/ run cmd in a separate process and return its exit code; or -1 on failures\n-  static int fork_and_exec(char *cmd, bool use_vfork_if_available = false);\n+  \/\/ run cmd in a separate process and return its exit code; or -1 on failures.\n+  \/\/ Note: only safe to use in fatal error situations.\n+  static int fork_and_exec(const char *cmd);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1663,1 +1663,1 @@\n-    if (os::fork_and_exec(cmd, true) < 0) {\n+    if (os::fork_and_exec(cmd) < 0) {\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}