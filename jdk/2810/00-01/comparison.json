{"files":[{"patch":"@@ -111,1 +111,0 @@\n-#include <sys\/wait.h>\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -96,1 +96,0 @@\n-# include <sys\/wait.h>\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-# include <sys\/wait.h>\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1797,6 +1797,7 @@\n-  \/\/ We use vfork() here since this is called, among other things, on OOMs to\n-  \/\/ trigger analysis scripts. So it benefits from vfork(). Even though vfork()\n-  \/\/ is not safe if used incorrectly, here it is, since we proceed straight\n-  \/\/ through vfork->exec->_exit with no intermediate steps. Also note that the\n-  \/\/ parent process is in the process of getting shutdown anyway.\n-  pid = ::vfork();\n+  \/\/ We use vfork() if possible since we it helps with spawning child processes from\n+  \/\/ parents with high footprints. Since vfork is not async safe, we avoid calling\n+  \/\/ it if this function is called from within signal handling.\n+  const Thread* const t = Thread::current_or_null_safe();\n+  const bool use_vfork = t != NULL && t->is_in_signal_handler() == false;\n+ printf(\">>%d\\n\", use_vfork);\n+  pid = use_vfork ? ::vfork() : ::fork();\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -568,0 +568,16 @@\n+class InSignalHandlerMark: public StackObj {\n+  Thread* const _thread;\n+public:\n+  InSignalHandlerMark() :\n+    _thread(Thread::current_or_null_safe()) {\n+    if (_thread) {\n+      _thread->set_in_signal_handler(true);\n+    }\n+  }\n+  ~InSignalHandlerMark() {\n+    if (_thread) {\n+      _thread->set_in_signal_handler(false);\n+    }\n+  }\n+};\n+\n@@ -584,0 +600,2 @@\n+  InSignalHandlerMark ishm;\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -298,0 +298,2 @@\n+  _in_signal_handler = false;\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -825,0 +825,9 @@\n+\n+#ifdef POSIX\n+ private:\n+  bool _in_signal_handler;\n+ public:\n+  bool is_in_signal_handler() const   { return _in_signal_handler; }\n+  void set_in_signal_handler(bool b)  { _in_signal_handler = b; }\n+#endif \/\/ POSIX\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -434,0 +434,11 @@\n+#if !defined(_WINDOWS)\n+#ifndef POSIX\n+#define POSIX\n+#endif\n+#define POSIX_ONLY(code) code\n+#define NOT_POSIX(code)\n+#else\n+#define POSIX_ONLY(code)\n+#define NOT_POSIX(code) code\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}