{"files":[{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293177\n+ * @summary Verify version numbers in legal files\n+ * @run main CheckLibraryVersions\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Checks the names and version strings of 3rd party libraries in legal files\n+ * against the actual names and versions in library files.\n+ *\/\n+public class CheckLibraryVersions {\n+    static class SourceDirNotFound extends Error {}\n+    \/\/ Regex pattern for library name and version in legal Markdown file\n+    static final Pattern versionPattern = Pattern.compile(\"## ([\\\\w\\\\s]+) v(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\");\n+\n+    \/\/ Map of 3rd party libraries. The keys are the names of files in the legal directory,\n+    \/\/ the values are lists of templates for library files with the following placeholders:\n+    \/\/  %V is replaced with the version string\n+    \/\/  %M is replaced twice, once with an empty string and once with \".min\"\n+    static final Map<String, List<String>> libraries = Map.of(\n+            \"jquery.md\", List.of(\"jquery-%V%M.js\"),\n+            \"jqueryUI.md\", List.of(\"jquery-ui%M.js\", \"jquery-ui%M.css\")\n+    );\n+\n+    public static void main(String... args) throws Exception {\n+        try {\n+            new CheckLibraryVersions().run(args);\n+        } catch (SourceDirNotFound e) {\n+            System.err.println(\"NOTE: Cannot find src directory; test skipped\");\n+        }\n+    }\n+\n+    static final PrintStream out = System.err;\n+\n+    void run(String... args) throws Exception {\n+        var rootDir = args.length == 0 ? findRootDir() : Path.of(args[0]);\n+        var legalDir = rootDir.resolve(\"src\/jdk.javadoc\/share\/legal\");\n+        var scriptDir = rootDir.resolve(\"src\/jdk.javadoc\/share\/classes\")\n+                                     .resolve(\"jdk\/javadoc\/internal\/doclets\/formats\/html\")\n+                                     .resolve(\"resources\/script-dir\");\n+\n+        for (var legalFileName : libraries.keySet()) {\n+            var legalFile = legalDir.resolve(legalFileName);\n+            out.println();\n+            if (!Files.exists(legalFile)) {\n+                error(\"Legal file not found: \" + legalFile);\n+                continue;\n+            }\n+            out.println(\"Checking legal file: \" + legalFile);\n+            var contents = Files.readString(legalFile);\n+            var matcher = versionPattern.matcher(contents);\n+            if (!matcher.find()) {\n+                error(\"Library name and version not found in \" + legalFile);\n+                continue;\n+            }\n+            var libraryName = matcher.group(1);\n+            var versionString = matcher.group(2);\n+            out.println(\"Found name and version: \" + matcher.group(1) + \" \" + matcher.group(2));\n+            var templates = libraries.get(legalFileName);\n+            for (var template : templates) {\n+                checkLibraryFile(scriptDir, template, libraryName, versionString, \"\");\n+                if (template.contains(\"%M\")) {\n+                    checkLibraryFile(scriptDir, template, libraryName, versionString, \".min\");\n+                }\n+            }\n+        }\n+\n+        if (errors > 0) {\n+            out.println(errors + \" errors found\");\n+            throw new Exception(errors + \" errors found\");\n+        }\n+    }\n+\n+    void checkLibraryFile(Path scriptDir, String template, String libraryName,\n+                          String versionString, String minified) throws IOException {\n+        out.println();\n+        var libraryFileName = template\n+                .replaceAll(\"%V\", versionString)\n+                .replaceAll(\"%M\", minified);\n+        var libraryFile = scriptDir.resolve(libraryFileName);\n+        if (!Files.exists(libraryFile)) {\n+            error(\"Library file not found: \" + libraryFile);\n+            return;\n+        }\n+        out.println(\"Checking library file: \" + libraryFile);\n+        var libraryContents = Files.readString(libraryFile);\n+        var pattern = Pattern.compile(\"\\\\b\" + libraryName + \"[^\\\\n]* v\" + versionString + \"\\\\b\");\n+        var matcher = pattern.matcher(libraryContents);\n+        if (!matcher.find()) {\n+            error(\"Matching library name and version not found in \" + libraryFileName);\n+            return;\n+        }\n+        out.println(\"Found matching name and version: \" + matcher.group());\n+    }\n+\n+    int errors = 0;\n+    void error(String message) {\n+        (\"Error: \" + message).lines().forEach(out::println);\n+        errors++;\n+    }\n+\n+    Path findRootDir() {\n+        Path dir = Path.of(System.getProperty(\"test.src\", \".\")).toAbsolutePath();\n+        while (dir != null) {\n+            if (Files.exists(dir.resolve(\"src\").resolve(\"jdk.javadoc\"))) {\n+                return dir;\n+            } else {\n+                Path openDir = dir.resolve(\"open\");\n+                if (Files.exists(openDir.resolve(\"src\").resolve(\"jdk.javadoc\"))) {\n+                    return openDir;\n+                }\n+            }\n+            dir = dir.getParent();\n+        }\n+        throw new SourceDirNotFound();\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/checkLibraryVersions\/CheckLibraryVersions.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}