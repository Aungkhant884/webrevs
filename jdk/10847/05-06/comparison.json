{"files":[{"patch":"@@ -3327,1 +3327,1 @@\n-                                        Register index, Register coef, Register tmp, XMMRegister vnext,\n+                                        Register index, Register tmp1, Register tmp2, XMMRegister vnext,\n@@ -3334,1 +3334,1 @@\n-  assert_different_registers(ary1, cnt1, result, index, coef, tmp);\n+  assert_different_registers(ary1, cnt1, result, index, tmp1, tmp2);\n@@ -3337,5 +3337,11 @@\n-  Label SHORT_UNROLLED_BEGIN, SHORT_UNROLLED_LOOP_BEGIN, SHORT_UNROLLED_LOOP_EXIT,\n-        SHORT_SCALAR_BEGIN, SHORT_SCALAR_LOOP_BEGIN,\n-        LONG, LONG_INIT, LONG_SCALAR_LOOP_BEGIN, LONG_SCALAR_LOOP_END,\n-        LONG_VECTOR_LOOP_BEGIN, LONG_VECTOR_LOOP_END,\n-        END;\n+  Label SHORT_SCALAR_BEGIN, LONG_VECTOR_LOOP_BEGIN, END;\n+\n+  switch (mode) {\n+  case VectorizedHashCodeNode::LATIN1: BLOCK_COMMENT(\"arrays_hashcode(LATIN1) {\"); break;\n+  case VectorizedHashCodeNode::UTF16:  BLOCK_COMMENT(\"arrays_hashcode(UTF16) {\");  break;\n+  case VectorizedHashCodeNode::BYTE:   BLOCK_COMMENT(\"arrays_hashcode(BYTE) {\");   break;\n+  case VectorizedHashCodeNode::CHAR:   BLOCK_COMMENT(\"arrays_hashcode(CHAR) {\");   break;\n+  case VectorizedHashCodeNode::SHORT:  BLOCK_COMMENT(\"arrays_hashcode(SHORT) {\");  break;\n+  case VectorizedHashCodeNode::INT:    BLOCK_COMMENT(\"arrays_hashcode(INT) {\");    break;\n+  default:                             BLOCK_COMMENT(\"arrays_hashcode {\");    break;\n+  }\n@@ -3344,1 +3350,1 @@\n-  Register bound;\n+  Register bound, next;\n@@ -3359,0 +3365,2 @@\n+  \/\/ int i = 0;\n+  xorq(index, index);\n@@ -3361,9 +3369,5 @@\n-     if (cnt1 >= 4) {\n-       if (cnt1 >= 16) {\n-           UNROLLED VECTOR LOOP\n-           SINGLE VECTOR LOOP\n-       }\n-       UNROLLED SCALAR LOOP\n-   }\n-   SINGLE SCALAR LOOP\n-   *\/\n+    if (cnt1 >= 32) {\n+      UNROLLED VECTOR LOOP\n+    }\n+    SINGLE SCALAR LOOP\n+  *\/\n@@ -3374,2 +3378,0 @@\n-  cmpl(cnt1, 2);\n-  jcc(Assembler::less, SHORT_SCALAR_BEGIN);\n@@ -3378,39 +3380,0 @@\n-    cmpl(cnt1, 32);\n-    jcc(Assembler::greaterEqual, LONG);\n-  }\n-  jmp(SHORT_UNROLLED_BEGIN);\n-\n-  address power_of_31_backwards = pc();\n-  emit_int32( 2111290369);\n-  emit_int32(-2010103841);\n-  emit_int32(  350799937);\n-  emit_int32(   11316127);\n-  emit_int32(  693101697);\n-  emit_int32( -254736545);\n-  emit_int32(  961614017);\n-  emit_int32(   31019807);\n-  emit_int32(-2077209343);\n-  emit_int32(  -67006753);\n-  emit_int32( 1244764481);\n-  emit_int32(-2038056289);\n-  emit_int32(  211350913);\n-  emit_int32( -408824225);\n-  emit_int32( -844471871);\n-  emit_int32( -997072353);\n-  emit_int32( 1353309697);\n-  emit_int32( -510534177);\n-  emit_int32( 1507551809);\n-  emit_int32( -505558625);\n-  emit_int32( -293403007);\n-  emit_int32(  129082719);\n-  emit_int32(-1796951359);\n-  emit_int32( -196513505);\n-  emit_int32(-1807454463);\n-  emit_int32( 1742810335);\n-  emit_int32(  887503681);\n-  emit_int32(   28629151);\n-  emit_int32(     923521);\n-  emit_int32(      29791);\n-  emit_int32(        961);\n-  emit_int32(         31);\n-  emit_int32(          1);\n@@ -3418,36 +3381,2 @@\n-  if (generate_vectorized_loop) {\n-  \/\/ if (cnt1 >= 32) {\n-  bind(LONG);\n-\n-  \/\/ int coef = 1;\n-  movl(coef, 1);\n-  \/\/ int i = cnt1 - 1;\n-  movl(index, cnt1);\n-  decrementl(index);\n-  \/\/ bound = cnt1 & ~(32-1);\n-  bound = cnt1;\n-  movl(bound, cnt1);\n-  andl(bound, ~(32-1));\n-\n-  \/\/ result = 0;\n-  if (!is_string_hashcode) {\n-    movl(result, 0);\n-  }\n-\n-  \/\/ for (; i >= bound; i -= 1) {\n-  bind(LONG_SCALAR_LOOP_BEGIN);\n-  \/\/ i >= bound;\n-  cmpl(index, bound);\n-  jccb(Assembler::less, LONG_SCALAR_LOOP_END);\n-  \/\/ result += coef * ary1[i];\n-  arrays_hashcode_elload(tmp, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n-  imull(tmp, coef);\n-  addl(result, tmp);\n-  \/\/ coef *= 31;\n-  movl(tmp, 31);\n-  imull(coef, tmp);\n-  \/\/ i -= 1;\n-  decrementl(index);\n-  jmpb(LONG_SCALAR_LOOP_BEGIN);\n-  bind(LONG_SCALAR_LOOP_END);\n-  \/\/ }\n+  cmpl(cnt1, 32);\n+  jcc(Assembler::less, SHORT_SCALAR_BEGIN);\n@@ -3455,0 +3384,1 @@\n+  \/\/ vresult = IntVector.zero(I256);\n@@ -3456,1 +3386,0 @@\n-    \/\/ vresult = IntVector.zero(I256);\n@@ -3460,1 +3389,3 @@\n-  movdl(vnext, InternalAddress(power_of_31_backwards + (0 * sizeof(jint))));\n+  next = tmp1;\n+  movl(next, as_Address(ExternalAddress(StubRoutines::x86::arrays_hashcode_powers_of_31() + (0 * sizeof(jint)))));\n+  movdl(vnext, next);\n@@ -3462,10 +3393,0 @@\n-  \/\/ vcoef = IntVector.fromArray(I256, power_of_31_backwards, 1);\n-  for (int idx = 0; idx < 4; idx++) {\n-    arrays_hashcode_elvload(vcoef[idx], InternalAddress(power_of_31_backwards + ((8 * idx + 1) * sizeof(jint))), T_INT);\n-  }\n-  \/\/ vcoef *= coef\n-  movdl(vtmp0, coef);\n-  vpbroadcastd(vtmp0, vtmp0, Assembler::AVX_256bit);\n-  for (int idx = 0; idx < 4; idx++) {\n-    vpmulld(vcoef[idx], vcoef[idx], vtmp0, Assembler::AVX_256bit);\n-  }\n@@ -3473,3 +3394,6 @@\n-  \/\/ for (i &= ~(31); i >= 0; i -= 8*4) {\n-  \/\/ i &= ~(31);\n-  andl(index, ~(31));\n+  \/\/ i = 0;\n+  \/\/ bound = cnt1 & ~(32 - 1);\n+  bound = tmp2;\n+  movl(bound, cnt1);\n+  andl(bound, ~(32 - 1));\n+  \/\/ for (; i < bound; i += 32) {\n@@ -3477,0 +3401,4 @@\n+  \/\/ result *= next;\n+  if (!is_string_hashcode) {\n+    imull(result, next);\n+  }\n@@ -3482,1 +3410,1 @@\n-  \/\/ vresult += vcoef * ary1[i+8*idx:i+8*idx+7]; vcoef *= vnext;\n+  \/\/ vresult = vresult * vnext + ary1[i+8*idx:i+8*idx+7];\n@@ -3484,0 +3412,1 @@\n+    vpmulld(vresult[idx], vresult[idx], vnext, Assembler::AVX_256bit);\n@@ -3485,1 +3414,0 @@\n-    vpmulld(vtmp[idx], vtmp[idx], vcoef[idx], Assembler::AVX_256bit);\n@@ -3488,11 +3416,5 @@\n-  \/\/ i -= 32;\n-  subl(index, 32);\n-  \/\/ i >= 0;\n-  jccb(Assembler::less, LONG_VECTOR_LOOP_END);\n-  for (int idx = 0; idx < 4; idx++) {\n-    vpmulld(vcoef[idx], vcoef[idx], vnext, Assembler::AVX_256bit);\n-  }\n-  jmp(LONG_VECTOR_LOOP_BEGIN);\n-  \/\/ }\n-\n-  bind(LONG_VECTOR_LOOP_END);\n+  \/\/ i += 32;\n+  addl(index, 32);\n+  \/\/ i < bound;\n+  cmpl(index, bound);\n+  jcc(Assembler::less, LONG_VECTOR_LOOP_BEGIN);\n@@ -3501,6 +3423,4 @@\n-  \/\/ result += vcoef0[0]; -- for the non-String cases that have a starting point of constant 1\n-  if (!is_string_hashcode) {\n-    movdl(coef, vcoef0);\n-    movl(tmp, 31);\n-    imull(coef, tmp);\n-    addl(result, coef);\n+  \/\/ vresult *= IntVector.fromArray(I256, power_of_31_backwards, 1);\n+  for (int idx = 0; idx < 4; idx++) {\n+    arrays_hashcode_elvload(vcoef[idx], as_Address(ExternalAddress(StubRoutines::x86::arrays_hashcode_powers_of_31() + ((8 * idx + 1) * sizeof(jint)))), T_INT);\n+    vpmulld(vresult[idx], vresult[idx], vcoef[idx], Assembler::AVX_256bit);\n@@ -3508,1 +3428,0 @@\n-\n@@ -3513,2 +3432,0 @@\n-  jmp(END);\n-  }\n@@ -3516,1 +3433,1 @@\n-  \/\/ } else if (cnt1 < 32) {\n+  } \/\/ generate_vectorized_loop\n@@ -3518,35 +3435,1 @@\n-  bind(SHORT_UNROLLED_BEGIN);\n-  \/\/ int i = 1;\n-  movl(index, 1);\n-  if (!is_string_hashcode) {\n-    movl(coef, 961);\n-    imull(result, coef);\n-  }\n-  \/\/ for (; i < cnt1 ; i += 2) {\n-  bind(SHORT_UNROLLED_LOOP_BEGIN);\n-  arrays_hashcode_elload(tmp, Address(ary1, index, Address::times(elsize), -elsize), eltype, is_string_hashcode);\n-  movl(coef, 31);\n-  imull(tmp, coef);\n-  addl(result, tmp);\n-  arrays_hashcode_elload(tmp, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n-  addl(result, tmp);\n-  addl(index, 2);\n-  cmpl(index, cnt1);\n-  jccb(Assembler::greaterEqual, SHORT_UNROLLED_LOOP_EXIT);\n-  movl(coef, 961);\n-  imull(result, coef);\n-  jmpb(SHORT_UNROLLED_LOOP_BEGIN);\n-\n-  \/\/ }\n-  \/\/ if (i == cnt1) {\n-  bind(SHORT_UNROLLED_LOOP_EXIT);\n-  cmpl(index, cnt1);\n-  jccb(Assembler::greater, END);\n-  movl(coef, result);\n-  shll(result, 5);\n-  subl(result, coef);\n-  arrays_hashcode_elload(tmp, Address(ary1, index, Address::times(elsize), -elsize), eltype, is_string_hashcode);\n-  addl(result, tmp);\n-  jmpb(END);\n-\n-  \/\/ }\n+  \/\/ cnt1 < 32\n@@ -3555,2 +3438,3 @@\n-  cmpl(cnt1, 0);\n-  jccb(Assembler::equal, END);\n+  \/\/ for (; i < cnt1; i += 1) {\n+  cmpl(index, cnt1);\n+  jccb(Assembler::greaterEqual, END);\n@@ -3558,5 +3442,3 @@\n-  if (!is_string_hashcode) {\n-    movl(tmp, result);\n-    shll(result, 5);\n-    subl(result, tmp);\n-  }\n+  movl(tmp1, result);\n+  shll(result, 5);\n+  subl(result, tmp1);\n@@ -3564,2 +3446,2 @@\n-  arrays_hashcode_elload(tmp, Address(ary1, 0, Address::times(elsize)), eltype, is_string_hashcode);\n-  addl(result, tmp);\n+  arrays_hashcode_elload(tmp2, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n+  addl(result, tmp2);\n@@ -3567,0 +3449,2 @@\n+  addl(index, 1);\n+  jmpb(SHORT_SCALAR_BEGIN);\n@@ -3572,0 +3456,2 @@\n+  BLOCK_COMMENT(\"} \/\/ arrays_hashcode\");\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":62,"deletions":176,"binary":false,"changes":238,"status":"modified"},{"patch":"@@ -230,0 +230,37 @@\n+jint StubRoutines::x86::_arrays_hashcode_powers_of_31[] =\n+{\n+     2111290369,\n+    -2010103841,\n+      350799937,\n+       11316127,\n+      693101697,\n+     -254736545,\n+      961614017,\n+       31019807,\n+    -2077209343,\n+      -67006753,\n+     1244764481,\n+    -2038056289,\n+      211350913,\n+     -408824225,\n+     -844471871,\n+     -997072353,\n+     1353309697,\n+     -510534177,\n+     1507551809,\n+     -505558625,\n+     -293403007,\n+      129082719,\n+    -1796951359,\n+     -196513505,\n+    -1807454463,\n+     1742810335,\n+      887503681,\n+       28629151,\n+         923521,\n+          29791,\n+            961,\n+             31,\n+              1,\n+};\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -140,0 +140,2 @@\n+  \/\/ table for arrays_hashcode\n+  static jint _arrays_hashcode_powers_of_31[];\n@@ -328,0 +330,1 @@\n+  static address arrays_hashcode_powers_of_31() { return (address)_arrays_hashcode_powers_of_31; }\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run main\/othervm HashCode\n+ * @run main\/othervm -Xcomp -Xbatch HashCode\n","filename":"test\/jdk\/java\/util\/Arrays\/HashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}