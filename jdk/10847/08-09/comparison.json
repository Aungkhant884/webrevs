{"files":[{"patch":"@@ -3327,1 +3327,1 @@\n-                                        Register index, Register bound, Register tmp3, Register tmp4, XMMRegister vnext,\n+                                        Register index, Register tmp2, Register tmp3, XMMRegister vnext,\n@@ -3334,1 +3334,1 @@\n-  assert_different_registers(ary1, cnt1, result, index, bound, tmp3, tmp4);\n+  assert_different_registers(ary1, cnt1, result, index, tmp2, tmp3);\n@@ -3337,1 +3337,2 @@\n-  Label SINGLE_SCALAR_LOOP_BEGIN, SINGLE_SCALAR_SKIP,\n+  Label SHORT_UNROLLED_BEGIN, SHORT_UNROLLED_LOOP_BEGIN,\n+        SHORT_UNROLLED_LOOP_EXIT,\n@@ -3365,2 +3366,0 @@\n-  const int scalar_unrolling = 8; \/\/ must be power of 2\n-\n@@ -3368,4 +3367,5 @@\n-  movl(result, is_string_hashcode ? 0 : 1);\n-  \/\/ int i = 0;\n-  xorq(index, index);\n-\n+  if (is_string_hashcode) {\n+    xorl(result, result);\n+  } else {\n+    movl(result, 1);\n+  }\n@@ -3373,9 +3373,5 @@\n-    if (cnt1 < $(scalar_unrolling)) {\n-     scalar_loop:\n-      SINGLE SCALAR LOOP\n-      goto end;\n-    }\n-    if (cnt1 < 32) {\n-     unrolled_scalar_loop:\n-      UNROLLED SCALAR LOOP;\n-      goto scalar_loop;\n+    if (cnt1 >= 2) {\n+      if (cnt1 >= 32) {\n+        UNROLLED VECTOR LOOP\n+      }\n+      UNROLLED SCALAR LOOP\n@@ -3383,6 +3379,2 @@\n-\n-     unrolled_vector_loop:\n-      UNROLLED VECTOR LOOP\n-\n-     end:\n-  *\/\n+    SINGLE SCALAR \n+   *\/\n@@ -3394,28 +3386,0 @@\n-  cmpl(cnt1, scalar_unrolling);\n-  jccb(Assembler::greaterEqual, SINGLE_SCALAR_SKIP);\n-\n-  \/\/ cnt1 < $(scalar_unrolling)\n-\n-  \/\/ for (; index < cnt1; index += 1) {\n-  bind(SINGLE_SCALAR_LOOP_BEGIN);\n-  cmpl(index, cnt1);\n-  jcc(Assembler::greaterEqual, END);\n-  \/\/ h = (31 * h) or (h << 5 - h);\n-  movl(tmp3, result);\n-  shll(result, 5);\n-  subl(result, tmp3);\n-  \/\/ h += ary1[index];\n-  arrays_hashcode_elload(tmp4, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n-  addl(result, tmp4);\n-  \/\/ index += 1;\n-  addl(index, 1);\n-  jmpb(SINGLE_SCALAR_LOOP_BEGIN);\n-  \/\/ }\n-\n-  bind(SINGLE_SCALAR_SKIP);\n-\n-  \/\/ int result = 0|1;\n-  movl(result, is_string_hashcode ? 0 : 1);\n-  \/\/ int index = 0;\n-  xorq(index, index);\n-\n@@ -3424,29 +3388,1 @@\n-  jcc(Assembler::greaterEqual, UNROLLED_SCALAR_SKIP);\n-  bind(UNROLLED_SCALAR_RESUME);\n-  }\n-\n-  \/\/ cnt1 >= $(scalar_unrolling)\n-\n-  movl(bound, cnt1);\n-  andl(bound, ~(scalar_unrolling - 1));\n-  \/\/ for (; index < bound; index += scalar_unrolling) {\n-  bind(UNROLLED_SCALAR_LOOP_BEGIN);\n-  cmpl(index, bound);\n-  jcc(Assembler::greaterEqual, SINGLE_SCALAR_LOOP_BEGIN);\n-  for (int idx = 0; idx < scalar_unrolling; idx++) {\n-    \/\/ h = (31 * h) or (h << 5 - h);\n-    movl(tmp3, result);\n-    shll(result, 5);\n-    subl(result, tmp3);\n-    \/\/ h += ary1[index+idx];\n-    arrays_hashcode_elload(tmp4, Address(ary1, index, Address::times(elsize), idx * elsize), eltype, is_string_hashcode);\n-    addl(result, tmp4);\n-  }\n-  \/\/ index += scalar_unrolling\n-  addl(index, scalar_unrolling);\n-  jmp(UNROLLED_SCALAR_LOOP_BEGIN);\n-  \/\/ }\n-\n-  if (generate_vectorized_loop) {\n-\n-  bind(UNROLLED_SCALAR_SKIP);\n+  jcc(Assembler::less, SHORT_UNROLLED_BEGIN);\n@@ -3455,0 +3391,1 @@\n+  xorl(index, index);\n@@ -3461,0 +3398,1 @@\n+  Register bound = tmp2;\n@@ -3504,1 +3442,2 @@\n-  jmp(UNROLLED_SCALAR_RESUME);\n+  lea(ary1, Address(ary1, bound, Address::times(elsize)));\n+  subl(cnt1, bound);\n@@ -3508,0 +3447,34 @@\n+  \/\/ } else if (cnt1 < 32) {\n+\n+  bind(SHORT_UNROLLED_BEGIN);\n+  \/\/ int i = 1;\n+  movl(index, 1);\n+  cmpl(index, cnt1);\n+  jcc(Assembler::greaterEqual, SHORT_UNROLLED_LOOP_EXIT);\n+\n+  \/\/ for (; i < cnt1 ; i += 2) {\n+  bind(SHORT_UNROLLED_LOOP_BEGIN);\n+  movl(tmp3, 961);\n+  imull(result, tmp3);\n+  arrays_hashcode_elload(tmp2, Address(ary1, index, Address::times(elsize), -elsize), eltype, is_string_hashcode);\n+  movl(tmp3, tmp2);\n+  shll(tmp3, 5);\n+  subl(tmp3, tmp2);\n+  addl(result, tmp3);\n+  arrays_hashcode_elload(tmp3, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n+  addl(result, tmp3);\n+  addl(index, 2);\n+  cmpl(index, cnt1);\n+  jccb(Assembler::less, SHORT_UNROLLED_LOOP_BEGIN);\n+\n+  \/\/ }\n+  \/\/ if (i >= cnt1) {\n+  bind(SHORT_UNROLLED_LOOP_EXIT);\n+  jccb(Assembler::greater, END);\n+  movl(tmp2, result);\n+  shll(result, 5);\n+  subl(result, tmp2);\n+  arrays_hashcode_elload(tmp3, Address(ary1, index, Address::times(elsize), -elsize), eltype, is_string_hashcode);\n+  addl(result, tmp3);\n+  jmp(END);\n+  \/\/ }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":55,"deletions":82,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-                       Register tmp1, Register tmp2, Register tmp3, Register tmp4, XMMRegister vnext,\n+                       Register tmp1, Register tmp2, Register tmp3, XMMRegister vnext,\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12071,2 +12071,1 @@\n-                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n-                         rFlagsReg cr)\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12078,1 +12077,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n@@ -12083,1 +12082,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n@@ -12097,1 +12096,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12103,1 +12102,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12109,1 +12108,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n@@ -12123,1 +12122,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12129,1 +12128,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12135,1 +12134,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n@@ -12149,1 +12148,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12155,1 +12154,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12161,1 +12160,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n@@ -12175,1 +12174,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12181,1 +12180,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12187,1 +12186,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n@@ -12201,1 +12200,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n@@ -12207,1 +12206,2 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         KILL cr);\n@@ -12212,1 +12212,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1706,2 +1706,0 @@\n-    fprintf(stderr, \"x = %d, _LAST_MACH_OPER = %d\\n\", x, _LAST_MACH_OPER);\n-    fprintf(stderr, \"dump n\\n\");\n@@ -1709,1 +1707,0 @@\n-    fprintf(stderr, \"dump svec\\n\");\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-\n-import jdk.internal.misc.Unsafe;\n@@ -194,5 +192,5 @@\n-        switch (value.length) {\n-        case 0: return 0;\n-        case 1: return (int)value[0];\n-        default: return ArraysSupport.vectorizedHashCode(value, ArraysSupport.LATIN1);\n-        }\n+        return switch (value.length) {\n+            case 0 -> 0;\n+            case 1 -> value[0];\n+            default -> ArraysSupport.vectorizedHashCode(value, ArraysSupport.LATIN1);\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-\n-import jdk.internal.misc.Unsafe;\n@@ -417,4 +415,4 @@\n-        switch (value.length) {\n-        case 0: return 0;\n-        case 1: return (int)value[0];\n-        default: return ArraysSupport.vectorizedHashCode(value, ArraysSupport.UTF16);\n+        if (value.length == 0) {\n+            return 0;\n+        } else {\n+            return ArraysSupport.vectorizedHashCode(value, ArraysSupport.UTF16);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4301,5 +4301,5 @@\n-        switch (a.length) {\n-        case 0: return 1;\n-        case 1: return 31 + a[0];\n-        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.INT);\n-        }\n+        return switch (a.length) {\n+            case 0 -> 1;\n+            case 1 -> 31 + a[0];\n+            default -> ArraysSupport.vectorizedHashCode(a, ArraysSupport.INT);\n+        };\n@@ -4328,5 +4328,5 @@\n-        switch (a.length) {\n-        case 0: return 1;\n-        case 1: return 31 + (int)a[0];\n-        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.SHORT);\n-        }\n+        return switch (a.length) {\n+            case 0 -> 1;\n+            case 1 -> 31 + (int)a[0];\n+            default -> ArraysSupport.vectorizedHashCode(a, ArraysSupport.SHORT);\n+        };\n@@ -4355,5 +4355,5 @@\n-        switch (a.length) {\n-        case 0: return 1;\n-        case 1: return 31 + (int)a[0];\n-        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.CHAR);\n-        }\n+        return switch (a.length) {\n+            case 0 -> 1;\n+            case 1 -> 31 + (int)a[0];\n+            default -> ArraysSupport.vectorizedHashCode(a, ArraysSupport.CHAR);\n+        };\n@@ -4382,5 +4382,5 @@\n-        switch (a.length) {\n-        case 0: return 1;\n-        case 1: return 31 + (int)a[0];\n-        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.BYTE);\n-        }\n+        return switch (a.length) {\n+            case 0 -> 1;\n+            case 1 -> 31 + (int)a[0];\n+            default -> ArraysSupport.vectorizedHashCode(a, ArraysSupport.BYTE);\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.Arrays;\n@@ -140,0 +141,2 @@\n+            \/\/ strip out byte order byte(s)\n+            utf16 = Arrays.copyOfRange(utf16, utf16.length - str.length * 2, utf16.length);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}