{"files":[{"patch":"@@ -3327,1 +3327,1 @@\n-                                        Register index, Register tmp1, Register tmp2, XMMRegister vnext,\n+                                        Register index, Register bound, Register tmp3, Register tmp4, XMMRegister vnext,\n@@ -3334,1 +3334,1 @@\n-  assert_different_registers(ary1, cnt1, result, index, tmp1, tmp2);\n+  assert_different_registers(ary1, cnt1, result, index, bound, tmp3, tmp4);\n@@ -3337,1 +3337,4 @@\n-  Label SHORT_SCALAR_BEGIN, LONG_VECTOR_LOOP_BEGIN, END;\n+  Label SINGLE_SCALAR_LOOP_BEGIN, SINGLE_SCALAR_SKIP,\n+        UNROLLED_SCALAR_LOOP_BEGIN, UNROLLED_SCALAR_SKIP, UNROLLED_SCALAR_RESUME,\n+        UNROLLED_VECTOR_LOOP_BEGIN,\n+        END;\n@@ -3350,1 +3353,0 @@\n-  Register bound, next;\n@@ -3363,0 +3365,2 @@\n+  const int scalar_unrolling = 8; \/\/ must be power of 2\n+\n@@ -3369,2 +3373,9 @@\n-    if (cnt1 >= 32) {\n-      UNROLLED VECTOR LOOP\n+    if (cnt1 < $(scalar_unrolling)) {\n+     scalar_loop:\n+      SINGLE SCALAR LOOP\n+      goto end;\n+    }\n+    if (cnt1 < 32) {\n+     unrolled_scalar_loop:\n+      UNROLLED SCALAR LOOP;\n+      goto scalar_loop;\n@@ -3372,1 +3383,5 @@\n-    SINGLE SCALAR LOOP\n+\n+     unrolled_vector_loop:\n+      UNROLLED VECTOR LOOP\n+\n+     end:\n@@ -3379,1 +3394,22 @@\n-  if (generate_vectorized_loop) {\n+  cmpl(cnt1, scalar_unrolling);\n+  jccb(Assembler::greaterEqual, SINGLE_SCALAR_SKIP);\n+\n+  \/\/ cnt1 < $(scalar_unrolling)\n+\n+  \/\/ for (; index < cnt1; index += 1) {\n+  bind(SINGLE_SCALAR_LOOP_BEGIN);\n+  cmpl(index, cnt1);\n+  jcc(Assembler::greaterEqual, END);\n+  \/\/ h = (31 * h) or (h << 5 - h);\n+  movl(tmp3, result);\n+  shll(result, 5);\n+  subl(result, tmp3);\n+  \/\/ h += ary1[index];\n+  arrays_hashcode_elload(tmp4, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n+  addl(result, tmp4);\n+  \/\/ index += 1;\n+  addl(index, 1);\n+  jmpb(SINGLE_SCALAR_LOOP_BEGIN);\n+  \/\/ }\n+\n+  bind(SINGLE_SCALAR_SKIP);\n@@ -3381,0 +3417,6 @@\n+  \/\/ int result = 0|1;\n+  movl(result, is_string_hashcode ? 0 : 1);\n+  \/\/ int index = 0;\n+  xorq(index, index);\n+\n+  if (generate_vectorized_loop) {\n@@ -3382,1 +3424,31 @@\n-  jcc(Assembler::less, SHORT_SCALAR_BEGIN);\n+  jcc(Assembler::greaterEqual, UNROLLED_SCALAR_SKIP);\n+  bind(UNROLLED_SCALAR_RESUME);\n+  }\n+\n+  \/\/ cnt1 >= $(scalar_unrolling)\n+\n+  movl(bound, cnt1);\n+  andl(bound, ~(scalar_unrolling - 1));\n+  \/\/ for (; index < bound; index += scalar_unrolling) {\n+  bind(UNROLLED_SCALAR_LOOP_BEGIN);\n+  cmpl(index, bound);\n+  jcc(Assembler::greaterEqual, SINGLE_SCALAR_LOOP_BEGIN);\n+  for (int idx = 0; idx < scalar_unrolling; idx++) {\n+    \/\/ h = (31 * h) or (h << 5 - h);\n+    movl(tmp3, result);\n+    shll(result, 5);\n+    subl(result, tmp3);\n+    \/\/ h += ary1[index+idx];\n+    arrays_hashcode_elload(tmp4, Address(ary1, index, Address::times(elsize), idx * elsize), eltype, is_string_hashcode);\n+    addl(result, tmp4);\n+  }\n+  \/\/ index += scalar_unrolling\n+  addl(index, scalar_unrolling);\n+  jmp(UNROLLED_SCALAR_LOOP_BEGIN);\n+  \/\/ }\n+\n+  if (generate_vectorized_loop) {\n+\n+  bind(UNROLLED_SCALAR_SKIP);\n+\n+  \/\/ cnt1 >= 32 && generate_vectorized_loop\n@@ -3389,1 +3461,1 @@\n-  next = tmp1;\n+  Register next = tmp3;\n@@ -3394,1 +3466,1 @@\n-  \/\/ i = 0;\n+  \/\/ index = 0;\n@@ -3396,1 +3468,0 @@\n-  bound = tmp2;\n@@ -3399,2 +3470,2 @@\n-  \/\/ for (; i < bound; i += 32) {\n-  bind(LONG_VECTOR_LOOP_BEGIN);\n+  \/\/ for (; index < bound; index += 32) {\n+  bind(UNROLLED_VECTOR_LOOP_BEGIN);\n@@ -3410,1 +3481,1 @@\n-  \/\/ vresult = vresult * vnext + ary1[i+8*idx:i+8*idx+7];\n+  \/\/ vresult = vresult * vnext + ary1[index+8*idx:index+8*idx+7];\n@@ -3416,1 +3487,1 @@\n-  \/\/ i += 32;\n+  \/\/ index += 32;\n@@ -3418,1 +3489,1 @@\n-  \/\/ i < bound;\n+  \/\/ index < bound;\n@@ -3420,1 +3491,1 @@\n-  jcc(Assembler::less, LONG_VECTOR_LOOP_BEGIN);\n+  jcc(Assembler::less, UNROLLED_VECTOR_LOOP_BEGIN);\n@@ -3433,3 +3504,1 @@\n-  } \/\/ generate_vectorized_loop\n-\n-  \/\/ cnt1 < 32\n+  jmp(UNROLLED_SCALAR_RESUME);\n@@ -3437,15 +3506,1 @@\n-  bind(SHORT_SCALAR_BEGIN);\n-  \/\/ for (; i < cnt1; i += 1) {\n-  cmpl(index, cnt1);\n-  jccb(Assembler::greaterEqual, END);\n-  \/\/ h = (31 * h) or (h << 5 - h);\n-  movl(tmp1, result);\n-  shll(result, 5);\n-  subl(result, tmp1);\n-  \/\/ h += ary1[i];\n-  arrays_hashcode_elload(tmp2, Address(ary1, index, Address::times(elsize)), eltype, is_string_hashcode);\n-  addl(result, tmp2);\n-  \/\/ i += 1;\n-  addl(index, 1);\n-  jmpb(SHORT_SCALAR_BEGIN);\n-  \/\/ }\n+  } \/\/ generate_vectorized_loop\n@@ -3453,1 +3508,0 @@\n-  \/\/ }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":91,"deletions":37,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-                       Register i, Register coef, Register tmp, XMMRegister vnext,\n+                       Register tmp1, Register tmp2, Register tmp3, Register tmp4, XMMRegister vnext,\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12071,1 +12071,1 @@\n-                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n@@ -12078,1 +12078,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n@@ -12083,1 +12083,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n@@ -12097,1 +12097,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n@@ -12103,1 +12103,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12109,1 +12109,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n@@ -12123,1 +12123,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n@@ -12129,1 +12129,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12135,1 +12135,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n@@ -12149,1 +12149,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n@@ -12155,1 +12155,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12161,1 +12161,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n@@ -12175,1 +12175,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n@@ -12181,1 +12181,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1,\n@@ -12187,1 +12187,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n@@ -12201,1 +12201,1 @@\n-                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rFlagsReg cr)\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4, rFlagsReg cr)\n@@ -12207,1 +12207,1 @@\n-         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP result, USE_KILL ary1, USE_KILL cnt1, KILL cr);\n@@ -12212,1 +12212,1 @@\n-                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -194,1 +194,5 @@\n-        return ArraysSupport.vectorizedHashCode(value, ArraysSupport.LATIN1);\n+        switch (value.length) {\n+        case 0: return 0;\n+        case 1: return (int)value[0];\n+        default: return ArraysSupport.vectorizedHashCode(value, ArraysSupport.LATIN1);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -417,1 +417,5 @@\n-        return ArraysSupport.vectorizedHashCode(value, ArraysSupport.UTF16);\n+        switch (value.length) {\n+        case 0: return 0;\n+        case 1: return (int)value[0];\n+        default: return ArraysSupport.vectorizedHashCode(value, ArraysSupport.UTF16);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4301,1 +4301,5 @@\n-        return ArraysSupport.vectorizedHashCode(a, ArraysSupport.INT);\n+        switch (a.length) {\n+        case 0: return 1;\n+        case 1: return 31 + a[0];\n+        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.INT);\n+        }\n@@ -4324,1 +4328,5 @@\n-        return ArraysSupport.vectorizedHashCode(a, ArraysSupport.SHORT);\n+        switch (a.length) {\n+        case 0: return 1;\n+        case 1: return 31 + (int)a[0];\n+        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.SHORT);\n+        }\n@@ -4347,1 +4355,5 @@\n-        return ArraysSupport.vectorizedHashCode(a, ArraysSupport.CHAR);\n+        switch (a.length) {\n+        case 0: return 1;\n+        case 1: return 31 + (int)a[0];\n+        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.CHAR);\n+        }\n@@ -4370,1 +4382,5 @@\n-        return ArraysSupport.vectorizedHashCode(a, ArraysSupport.BYTE);\n+        switch (a.length) {\n+        case 0: return 1;\n+        case 1: return 31 + (int)a[0];\n+        default: return ArraysSupport.vectorizedHashCode(a, ArraysSupport.BYTE);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n@@ -36,0 +37,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -63,0 +65,4 @@\n+    private byte[][] multibytes;\n+    private char[][] multichars;\n+    private short[][] multishorts;\n+    private int[][] multiints;\n@@ -79,0 +85,19 @@\n+\n+        multibytes = new byte[100][];\n+        multichars = new char[100][];\n+        multishorts = new short[100][];\n+        multiints = new int[100][];\n+        for (int i = 0; i < 100; i++) {\n+            int next = rnd.nextInt(size + 1);\n+            multibytes[i] = new byte[next];\n+            multichars[i] = new char[next];\n+            multishorts[i] = new short[next];\n+            multiints[i] = new int[next];\n+            for (int j = 0; j < next; j++) {\n+                int nextj = rnd.nextInt();\n+                multibytes[i][j] = (byte)nextj;\n+                multichars[i][j] = (char)nextj;\n+                multishorts[i][j] = (short)nextj;\n+                multiints[i][j] = nextj;\n+            }\n+        }\n@@ -100,0 +125,32 @@\n+\n+    @Benchmark\n+    @OperationsPerInvocation(100)\n+    public void multibytes(Blackhole bh) throws Throwable {\n+        for (int i = 0; i < multibytes.length; i++) {\n+            bh.consume(Arrays.hashCode(multibytes[i]));\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(100)\n+    public void multichars(Blackhole bh) throws Throwable {\n+        for (int i = 0; i < multichars.length; i++) {\n+            bh.consume(Arrays.hashCode(multichars[i]));\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(100)\n+    public void multishorts(Blackhole bh) throws Throwable {\n+        for (int i = 0; i < multishorts.length; i++) {\n+            bh.consume(Arrays.hashCode(multishorts[i]));\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(100)\n+    public void multiints(Blackhole bh) throws Throwable {\n+        for (int i = 0; i < multibytes.length; i++) {\n+            bh.consume(Arrays.hashCode(multiints[i]));\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysHashCode.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}