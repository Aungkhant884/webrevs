{"files":[{"patch":"@@ -497,1 +497,1 @@\n-    TOOLCHAIN_CFLAGS_JVM=\"$TOOLCHAIN_CFLAGS_JVM -fcheck-new -fstack-protector\"\n+    TOOLCHAIN_CFLAGS_JVM=\"$TOOLCHAIN_CFLAGS_JVM -fstack-protector\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  NOINLINE void* operator new(size_t size) throw();\n+  NOINLINE void* operator new(size_t size);\n@@ -58,1 +58,1 @@\n-  NOINLINE void* operator new [](size_t size) throw();\n+  NOINLINE void* operator new [](size_t size);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,5 +74,0 @@\n-void* StackObj::operator new(size_t size)     throw() { ShouldNotCallThis(); return 0; }\n-void  StackObj::operator delete(void* p)              { ShouldNotCallThis(); }\n-void* StackObj::operator new [](size_t size)  throw() { ShouldNotCallThis(); return 0; }\n-void  StackObj::operator delete [](void* p)           { ShouldNotCallThis(); }\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) {\n@@ -188,1 +188,1 @@\n-                                  const NativeCallStack& stack) throw() {\n+                                  const NativeCallStack& stack) {\n@@ -205,1 +205,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) {\n@@ -211,1 +211,1 @@\n-                                    const NativeCallStack& stack) throw() {\n+                                    const NativeCallStack& stack) {\n@@ -236,1 +236,1 @@\n-  ALWAYSINLINE void* operator new(size_t size) throw() {\n+  ALWAYSINLINE void* operator new(size_t size) {\n@@ -241,1 +241,1 @@\n-                                  const NativeCallStack& stack) throw() {\n+                                  const NativeCallStack& stack) {\n@@ -254,1 +254,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size) {\n@@ -259,1 +259,1 @@\n-                                    const NativeCallStack& stack) throw() {\n+                                    const NativeCallStack& stack) {\n@@ -286,4 +286,4 @@\n-  void* operator new(size_t size) throw();\n-  void* operator new [](size_t size) throw();\n-  void  operator delete(void* p);\n-  void  operator delete [](void* p);\n+  void* operator new(size_t size) throw() = delete;\n+  void* operator new [](size_t size) throw() = delete;\n+  void  operator delete(void* p) = delete;\n+  void  operator delete [](void* p) = delete;\n@@ -435,1 +435,1 @@\n-  void* operator new(size_t size) throw() {\n+  void* operator new(size_t size) {\n@@ -503,2 +503,2 @@\n-  void* operator new(size_t size, Arena *arena) throw();\n-  void* operator new [](size_t size, Arena *arena) throw() = delete;\n+  void* operator new(size_t size, Arena *arena);\n+  void* operator new [](size_t size, Arena *arena) = delete;\n@@ -507,1 +507,1 @@\n-  void* operator new(size_t size) throw() {\n+  void* operator new(size_t size) {\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-  void* operator new(size_t size) throw() {\n+  void* operator new(size_t size) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -203,3 +203,0 @@\n-  void* operator new(size_t size) throw() { return allocate(size, true); }\n-  void* operator new(size_t size, const std::nothrow_t& nothrow_constant) throw() {\n-    return allocate(size, false); }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -812,1 +812,1 @@\n-  void* operator new(size_t size) throw() {\n+  void* operator new(size_t size) {\n@@ -819,0 +819,3 @@\n+  void operator delete(void *p) {\n+    AnyObj::operator delete(p);\n+  }\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}