{"files":[{"patch":"@@ -1009,2 +1009,2 @@\n-                    toScroll = scrollpane.getHorizontalScrollBar();\n-                    if (toScroll == null || !toScroll.isVisible()) {\n+                    JScrollBar hScroll = scrollpane.getHorizontalScrollBar();\n+                    if (hScroll == null) {\n@@ -1012,0 +1012,8 @@\n+                    } else if (hScroll.isVisible()) {\n+                        toScroll = hScroll;\n+                        orientation = SwingConstants.HORIZONTAL;\n+                    } else if (!hScroll.isVisible()) {\n+                        if (e.isShiftDown()) {\n+                            return;\n+                        }\n+                        orientation = SwingConstants.VERTICAL;\n@@ -1013,1 +1021,0 @@\n-                    orientation = SwingConstants.HORIZONTAL;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicScrollPaneUI.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import javax.swing.DefaultListModel;\n+import javax.swing.ListModel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @requires (os.family != \"mac\")\n+ * @bug  6911375\n+ * @summary Verifies mouseWheel effect on JList without scrollBar\n+ *\/\n+public class TestMouseWheelScroll {\n+\n+    static JFrame frame;\n+    static JScrollPane scrollPane;\n+    static volatile Point p;\n+    static volatile int width;\n+    static volatile int height;\n+    static volatile Point viewPosition;\n+    static volatile Point newPosition;\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    frame = new JFrame();\n+                    JList list = new JList(createListModel());\n+                    \/\/ disable list bindings\n+                    list.getInputMap().getParent().clear();\n+                    scrollPane = new JScrollPane(list);\n+\n+                    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\n+                    frame.add(scrollPane);\n+                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+                    frame.setSize(200,200);\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                });\n+                robot.waitForIdle();\n+                robot.delay(1000);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    p = frame.getLocationOnScreen();\n+                    width = frame.getWidth();\n+                    height = frame.getHeight();\n+                });\n+                robot.mouseMove(p.x + width \/ 2, p.y + height \/ 2);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.waitForIdle();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    viewPosition = scrollPane.getViewport().getViewPosition();\n+                });\n+                robot.delay(1000);\n+                robot.mouseWheel(1);\n+                robot.delay(500);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    newPosition = scrollPane.getViewport().getViewPosition();\n+                });\n+                robot.delay(1000);\n+                if (newPosition.equals(viewPosition)) {\n+                    throw new RuntimeException(\"Mouse wheel not handled\");\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    private static ListModel createListModel() {\n+        DefaultListModel model = new DefaultListModel();\n+        for (int i = 0; i < 100; i++) {\n+            model.addElement(\"element \" + i);\n+        }\n+        return model;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/TestMouseWheelScroll.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}