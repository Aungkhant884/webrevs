{"files":[{"patch":"@@ -1530,1 +1530,2 @@\n-        return (a <= 0.0F) ? 0.0F - a : a;\n+        \/\/ Convert to bit field form, zero the sign bit, and convert back\n+        return Float.intBitsToFloat(Float.floatToRawIntBits(a) & FloatConsts.MAG_BIT_MASK);\n@@ -1555,1 +1556,3 @@\n-        return (a <= 0.0D) ? 0.0D - a : a;\n+        \/\/ Convert to bit field form, zero the sign bit, and convert back\n+        return Double.longBitsToDouble(Double.doubleToRawLongBits(a) & DoubleConsts.MAG_BIT_MASK);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -76,0 +76,6 @@\n+    \/**\n+     * Bit mask to isolate the magnitude bits (combined exponent and\n+     * significand fields) of a {@code double}.\n+     *\/\n+    public static final int     MAG_BIT_MASK = 0x7FFFFFFF;\n+\n@@ -82,1 +88,3 @@\n-                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0L)));\n+                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0L)) &&\n+                ((SIGN_BIT_MASK | MAG_BIT_MASK) == ~0));\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/DoubleConsts.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,6 @@\n+    \/**\n+     * Bit mask to isolate the magnitude bits (combined exponent and\n+     * significand fields) of a {@code float}.\n+     *\/\n+    public static final int     MAG_BIT_MASK = 0x7FFFFFFF;\n+\n@@ -82,1 +88,2 @@\n-                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0)));\n+                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0)) &&\n+                ((SIGN_BIT_MASK | MAG_BIT_MASK) == ~0));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FloatConsts.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}