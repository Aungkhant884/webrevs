{"files":[{"patch":"@@ -38,8 +38,9 @@\n- * Immutable, arbitrary-precision signed decimal numbers.  A\n- * {@code BigDecimal} consists of an arbitrary precision integer\n- * <i>unscaled value<\/i> and a 32-bit integer <i>scale<\/i>.  If zero\n- * or positive, the scale is the number of digits to the right of the\n- * decimal point.  If negative, the unscaled value of the number is\n- * multiplied by ten to the power of the negation of the scale.  The\n- * value of the number represented by the {@code BigDecimal} is\n- * therefore <code>(unscaledValue &times; 10<sup>-scale<\/sup>)<\/code>.\n+ * Immutable, arbitrary-precision signed decimal numbers.  A {@code\n+ * BigDecimal} consists of an arbitrary precision integer\n+ * <i>{@linkplain unscaledValue() unscaled value}<\/i> and a 32-bit\n+ * integer <i>{@linkplain scale() scale}<\/i>.  If zero or positive,\n+ * the scale is the number of digits to the right of the decimal\n+ * point.  If negative, the unscaled value of the number is multiplied\n+ * by ten to the power of the negation of the scale.  The value of the\n+ * number represented by the {@code BigDecimal} is therefore\n+ * <code>(unscaledValue &times; 10<sup>-scale<\/sup>)<\/code>.\n@@ -223,0 +224,58 @@\n+ * <h2>Relation to IEEE 754 Decimal Arithmetic<\/h2>\n+ *\n+ * Starting with its 2008 revision, the <cite>IEEE 754 Standard for\n+ * Floating-point Arithmetic<\/cite> has covered decimal formats and\n+ * operations. While there are broad similarities in the decimal\n+ * arithmetic defined by IEEE 754 and by this class, there are notable\n+ * differences as well. The fundamental similarity shared by {@code\n+ * BigDecimal} and IEEE 754 decimal arithmetic is the conceptual\n+ * operation of computing the mathematical infinitely precise real\n+ * number value of an operation and then mapping that real number to a\n+ * representable decimal floating-point value under a <em>rounding\n+ * policy<\/em>. The rounding policy is called a {@linkplain\n+ * RoundingMode rounding mode} for {@code BigDecimal} and called a\n+ * rounding-direction attribute in IEEE 754-2019. When the exact value\n+ * is not representable, the rounding policy determines which of the\n+ * two representable decimal values bracketing the exact value is\n+ * selected as the computed result. The notion of a <em>preferred\n+ * scale\/preferred exponent<\/em> is also shared by both systems.\n+ *\n+ * <p>For differences, IEEE 754 includes several kinds of values not\n+ * modeled by {@code BigDecimal} including negative zero, signed\n+ * infinities, and NaN (not-a-number). IEEE 754 defines formats, which\n+ * are parameterized by base (binary or decimal), number of digits of\n+ * precision, and exponent range. A format determines the set of\n+ * representable values. Most operations accept as input one or more\n+ * values of a given format and produce a result in the same format.\n+ * A {@code BigDecimal}'s {@linkplain scale() scale} is equivalent to\n+ * negating an IEEE 754 value's exponent. {@code BigDecimal} values do\n+ * not have a format in the same sense; all values have the same\n+ * possible range of scale\/exponent and the {@linkplain\n+ * unscaledValue() unscaled value} has arbitrary precision. Instead,\n+ * for the {@code BigDecimal} operations taking a {@code MathContext}\n+ * parameter, if the {@code MathContext} has a nonzero precision, the\n+ * set of possible representable values for the result is determined\n+ * by the precision of the {@code MathContext} argument. For example\n+ * in {@code BigDecimal}, if a nonzero three-digit number and a\n+ * nonzero four-digit number are multiplied together in the context of\n+ * a {@code MathContext} object having a precision of three, the\n+ * result will have three digits (assuming no overflow or underflow,\n+ * etc.).\n+ *\n+ * <p>The rounding policies implemented by {@code BigDecimal}\n+ * operations indicated by {@linkplain RoundingMode rounding modes}\n+ * are a proper superset of the IEEE 754 rounding-direction\n+ * attributes.\n+\n+ * <p>{@code BigDecimal} arithmetic will most resemble IEEE 754\n+ * decimal arithmetic if a {@code MathContext} corresponding to an\n+ * IEEE 754 decimal format, such as {@linkplain MathContext#DECIMAL64\n+ * decimal64} or {@linkplain MathContext#DECIMAL128 decimal128} is\n+ * used to round all starting values and intermediate operations. The\n+ * numerical values computed can differ if the exponent range of the\n+ * IEEE 754 format being approximated is exceeded since a {@code\n+ * MathContext} does not constrain the scale of {@code BigDecimal}\n+ * results. Operations that would generate a NaN or exact infinity,\n+ * such as dividing by zero, throw an {@code ArithmeticException} in\n+ * {@code BigDecimal} arithmetic.\n+ *\n@@ -1684,1 +1743,1 @@\n-     *         terminating decimal expansion\n+     *         terminating decimal expansion, including dividing by zero\n@@ -1748,1 +1807,1 @@\n-     *         non-terminating decimal expansion.\n+     *         non-terminating decimal expansion,including dividing by zero\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":69,"deletions":10,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,6 +72,3 @@\n-     *  A {@code MathContext} object whose settings have the values\n-     *  required for unlimited precision arithmetic.\n-     *  The values of the settings are:\n-     *  <code>\n-     *  precision=0 roundingMode=HALF_UP\n-     *  <\/code>\n+     * A {@code MathContext} object whose settings have the values\n+     * required for unlimited precision arithmetic.\n+     * The values of the settings are: {@code precision=0 roundingMode=HALF_UP}\n@@ -83,4 +80,5 @@\n-     *  A {@code MathContext} object with a precision setting\n-     *  matching the IEEE 754R Decimal32 format, 7 digits, and a\n-     *  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the\n-     *  IEEE 754R default.\n+     * A {@code MathContext} object with a precision setting\n+     * matching the precision of the IEEE 754-2019 decimal32 format, 7 digits, and a\n+     * rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}.\n+     * Note the exponent range of decimal32 is <em>not<\/em> used for\n+     * rounding.\n@@ -92,4 +90,5 @@\n-     *  A {@code MathContext} object with a precision setting\n-     *  matching the IEEE 754R Decimal64 format, 16 digits, and a\n-     *  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the\n-     *  IEEE 754R default.\n+     * A {@code MathContext} object with a precision setting\n+     * matching the precision of the IEEE 754-2019 decimal64 format, 16 digits, and a\n+     * rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}.\n+     * Note the exponent range of decimal64 is <em>not<\/em> used for\n+     * rounding.\n@@ -101,4 +100,5 @@\n-     *  A {@code MathContext} object with a precision setting\n-     *  matching the IEEE 754R Decimal128 format, 34 digits, and a\n-     *  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the\n-     *  IEEE 754R default.\n+     * A {@code MathContext} object with a precision setting\n+     * matching the precision of the IEEE 754-2019 decimal128 format, 34 digits, and a\n+     * rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}.\n+     * Note the exponent range of decimal64 is <em>not<\/em> used for\n+     * rounding.\n","filename":"src\/java.base\/share\/classes\/java\/math\/MathContext.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,6 +32,6 @@\n- * Specifies a <i>rounding behavior<\/i> for numerical operations\n- * capable of discarding precision. Each rounding mode indicates how\n- * the least significant returned digit of a rounded result is to be\n- * calculated.  If fewer digits are returned than the digits needed to\n- * represent the exact numerical result, the discarded digits will be\n- * referred to as the <i>discarded fraction<\/i> regardless the digits'\n+ * Specifies a <i>rounding policy<\/i> for numerical operations capable\n+ * of discarding precision. Each rounding mode indicates how the least\n+ * significant returned digit of a rounded result is to be calculated.\n+ * If fewer digits are returned than the digits needed to represent\n+ * the exact numerical result, the discarded digits will be referred\n+ * to as the <i>discarded fraction<\/i> regardless the digits'\n@@ -92,1 +92,1 @@\n- * rounding direction attributes defined in the <cite>IEEE Standard\n+ * rounding-direction attributes defined in the <cite>IEEE Standard\n@@ -140,1 +140,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding\n+         * This mode corresponds to the IEEE 754-2019 rounding-direction\n@@ -171,1 +171,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding\n+         * This mode corresponds to the IEEE 754-2019 rounding-direction\n@@ -202,1 +202,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding\n+         * This mode corresponds to the IEEE 754-2019 rounding-direction\n@@ -235,1 +235,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding\n+         * This mode corresponds to the IEEE 754-2019 rounding-direction\n@@ -304,1 +304,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding\n+         * This mode corresponds to the IEEE 754-2019 rounding-direction\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}