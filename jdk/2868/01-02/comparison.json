{"files":[{"patch":"@@ -38,8 +38,9 @@\n- * Immutable, arbitrary-precision signed decimal numbers.  A\n- * {@code BigDecimal} consists of an arbitrary precision integer\n- * <i>{@linkplain unscaledValue() unscaled value}<\/i> and a 32-bit integer <i>{@linkplain scale() scale}<\/i>.  If zero\n- * or positive, the scale is the number of digits to the right of the\n- * decimal point.  If negative, the unscaled value of the number is\n- * multiplied by ten to the power of the negation of the scale.  The\n- * value of the number represented by the {@code BigDecimal} is\n- * therefore <code>(unscaledValue &times; 10<sup>-scale<\/sup>)<\/code>.\n+ * Immutable, arbitrary-precision signed decimal numbers.  A {@code\n+ * BigDecimal} consists of an arbitrary precision integer\n+ * <i>{@linkplain unscaledValue() unscaled value}<\/i> and a 32-bit\n+ * integer <i>{@linkplain scale() scale}<\/i>.  If zero or positive,\n+ * the scale is the number of digits to the right of the decimal\n+ * point.  If negative, the unscaled value of the number is multiplied\n+ * by ten to the power of the negation of the scale.  The value of the\n+ * number represented by the {@code BigDecimal} is therefore\n+ * <code>(unscaledValue &times; 10<sup>-scale<\/sup>)<\/code>.\n@@ -260,2 +261,3 @@\n- * a {@code MathContext} object having a precision of three, the result\n- * will have three digits (assuming no overflow or underflow, etc.).\n+ * a {@code MathContext} object having a precision of three, the\n+ * result will have three digits (assuming no overflow or underflow,\n+ * etc.).\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/math\/MathContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,6 +32,6 @@\n- * Specifies a <i>rounding policy<\/i> for numerical operations\n- * capable of discarding precision. Each rounding mode indicates how\n- * the least significant returned digit of a rounded result is to be\n- * calculated.  If fewer digits are returned than the digits needed to\n- * represent the exact numerical result, the discarded digits will be\n- * referred to as the <i>discarded fraction<\/i> regardless the digits'\n+ * Specifies a <i>rounding policy<\/i> for numerical operations capable\n+ * of discarding precision. Each rounding mode indicates how the least\n+ * significant returned digit of a rounded result is to be calculated.\n+ * If fewer digits are returned than the digits needed to represent\n+ * the exact numerical result, the discarded digits will be referred\n+ * to as the <i>discarded fraction<\/i> regardless the digits'\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}