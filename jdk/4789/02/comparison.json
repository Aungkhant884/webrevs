{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -99,6 +100,11 @@\n-            @SuppressWarnings(\"deprecation\")\n-            Object o = Class.forName(cn, true,\n-                                     ClassLoader.getSystemClassLoader()).newInstance();\n-            provider = (HttpServerProvider)o;\n-            return true;\n-        } catch (ClassNotFoundException |\n+            var cls = Class.forName(cn, false, ClassLoader.getSystemClassLoader());\n+            if (HttpServerProvider.class.isAssignableFrom(cls)) {\n+                provider = (HttpServerProvider) cls.getDeclaredConstructor().newInstance();\n+                return true;\n+            } else {\n+                throw new ServiceConfigurationError(\"not assignable to HttpServerProvider: \"\n+                        + cls.getName());\n+            }\n+        } catch (InvocationTargetException |\n+                 NoSuchMethodException |\n+                 ClassNotFoundException |\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/spi\/HttpServerProvider.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270286\n+ * @summary Test for HttpServerProvider::loadProviderFromProperty\n+ * @run testng\/othervm\n+ *      -Dcom.sun.net.httpserver.HttpServerProvider=HttpServerProviderTest$ProviderP\n+ *      HttpServerProviderTest\n+ * @run testng\/othervm\n+ *      -Dcom.sun.net.httpserver.HttpServerProvider=HttpServerProviderTest$ProviderPNPC\n+ *      HttpServerProviderTest\n+ * @run testng\/othervm\n+ *      -Dcom.sun.net.httpserver.HttpServerProvider=HttpServerProviderTest$ProviderNP\n+ *      HttpServerProviderTest\n+ * @run testng\/othervm\n+ *      -Dcom.sun.net.httpserver.HttpServerProvider=HttpServerProviderTest$ProviderT\n+ *      HttpServerProviderTest\n+ * @run testng\/othervm\n+ *      -Dcom.sun.net.httpserver.HttpServerProvider=DoesNotExist\n+ *      HttpServerProviderTest\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.InetSocketAddress;\n+import java.util.ServiceConfigurationError;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.HttpsServer;\n+import com.sun.net.httpserver.spi.HttpServerProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.expectThrows;\n+\n+public class HttpServerProviderTest {\n+    public final static String PROPERTY_KEY = \"com.sun.net.httpserver.HttpServerProvider\";\n+\n+    @Test\n+    public void test() throws Exception {\n+        var provider = System.getProperty(PROPERTY_KEY);\n+        switch (provider) {\n+            case \"HttpServerProviderTest$ProviderP\" -> testPublic();\n+            case \"HttpServerProviderTest$ProviderPNPC\" -> testPublicNonPublicConstructor();\n+            case \"HttpServerProviderTest$ProviderNP\" -> testNonPublic();\n+            case \"HttpServerProviderTest$ProviderT\" -> testThrowingConstructor();\n+            default -> testBadData();\n+        }\n+    }\n+\n+    private void testPublic() throws Exception {\n+        var n = ProviderP.class.getName();\n+        assertEquals(System.getProperty(PROPERTY_KEY), n);\n+\n+        var p = HttpServerProvider.provider();\n+        assertNull(p.createHttpServer(null, 0));\n+        assertNull(p.createHttpsServer(null, 0));\n+    }\n+\n+    private void testPublicNonPublicConstructor() {\n+        var n = ProviderPNPC.class.getName();\n+        assertEquals(System.getProperty(PROPERTY_KEY), n);\n+\n+        var e = expectThrows(ServiceConfigurationError.class, HttpServerProvider::provider);\n+        assertEquals(e.getClass(), ServiceConfigurationError.class);\n+        assertEquals(e.getCause().getClass(), IllegalAccessException.class);\n+    }\n+\n+    private void testNonPublic() {\n+        var n = ProviderNP.class.getName();\n+        assertEquals(System.getProperty(PROPERTY_KEY), n);\n+\n+        var e = expectThrows(ServiceConfigurationError.class, HttpServerProvider::provider);\n+        assertEquals(e.getClass(), ServiceConfigurationError.class);\n+        assertEquals(e.getCause().getClass(), IllegalAccessException.class);\n+    }\n+\n+    private void testThrowingConstructor() {\n+        var cn = ProviderT.class.getName();\n+        assertEquals(System.getProperty(PROPERTY_KEY), cn);\n+\n+        var e = expectThrows(ServiceConfigurationError.class, HttpServerProvider::provider);\n+        assertEquals(e.getClass(), ServiceConfigurationError.class);\n+        assertEquals(e.getCause().getClass(), InvocationTargetException.class);\n+        assertEquals(e.getCause().getCause().getMessage(), \"throwing constructor\");\n+    }\n+\n+    private void testBadData() {\n+        var cn = \"DoesNotExist\";\n+        assertEquals(System.getProperty(PROPERTY_KEY), cn);\n+\n+        var e = expectThrows(ServiceConfigurationError.class, HttpServerProvider::provider);\n+        assertEquals(e.getClass(), ServiceConfigurationError.class);\n+        assertEquals(e.getCause().getClass(), ClassNotFoundException.class);\n+    }\n+\n+    \/**\n+     * Test provider that is public (P)\n+     *\/\n+    public static class ProviderP extends HttpServerProvider {\n+        public ProviderP() { super(); }\n+        @Override\n+        public HttpServer createHttpServer(InetSocketAddress addr, int backlog) { return null; }\n+        @Override\n+        public HttpsServer createHttpsServer(InetSocketAddress addr, int backlog) { return null; }\n+    }\n+\n+    \/**\n+     * Test provider that is public with a non-public constructor (PNPC)\n+     *\/\n+    public static class ProviderPNPC extends HttpServerProvider {\n+        \/*package-private*\/ ProviderPNPC() { super(); }\n+        @Override\n+        public HttpServer createHttpServer(InetSocketAddress addr, int backlog) { return null; }\n+        @Override\n+        public HttpsServer createHttpsServer(InetSocketAddress addr, int backlog) { return null; }\n+    }\n+\n+    \/**\n+     * Test provider that is not public (NP)\n+     *\/\n+    \/*package-private*\/ static class ProviderNP extends HttpServerProvider {\n+        \/*package-private*\/ ProviderNP() { super(); }\n+        @Override\n+        public HttpServer createHttpServer(InetSocketAddress addr, int backlog) { return null; }\n+        @Override\n+        public HttpsServer createHttpsServer(InetSocketAddress addr, int backlog) { return null; }\n+    }\n+\n+    \/**\n+     * Test provider with a constructor that throws\n+     *\/\n+    public static class ProviderT extends HttpServerProvider {\n+        public ProviderT() { throw new AssertionError(\"throwing constructor\"); }\n+        @Override\n+        public HttpServer createHttpServer(InetSocketAddress addr, int backlog) { return null; }\n+        @Override\n+        public HttpsServer createHttpsServer(InetSocketAddress addr, int backlog) { return null; }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HttpServerProviderTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}