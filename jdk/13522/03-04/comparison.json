{"files":[{"patch":"@@ -452,2 +452,0 @@\n-        checkSession();\n-\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,3 @@\n+#if[char]\n+import java.util.function.IntFunction;\n+#end[char]\n@@ -649,4 +652,4 @@\n-        for (CharSequence csq : csqs) {\n-            \/\/ append() should throw BufferOverflowException\n-            tryCatch(b, BufferOverflowException.class, () ->\n-                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+        IntFunction<CharBuffer>[] producers = new IntFunction[] {\n+            (i) -> CharBuffer.allocate(i),\n+            (i) -> ByteBuffer.allocateDirect(2*i).asCharBuffer()\n+        };\n@@ -654,4 +657,13 @@\n-            \/\/ append() should throw IndexOutOfBoundsException\n-            for (int[] bds : bounds)\n-                tryCatch(b, IndexOutOfBoundsException.class, () ->\n-                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        for (IntFunction<CharBuffer> f : producers) {\n+            for (CharSequence csq : csqs) {\n+                \/\/ append() should throw BufferOverflowException\n+                final CharBuffer cbBOE = f.apply(cslen\/8);\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cbBOE.append(csq, cslen\/4, cslen\/2));\n+\n+                \/\/ append() should throw IndexOutOfBoundsException\n+                final CharBuffer cbIOOBE = f.apply(cslen + 1);\n+                for (int[] bds : bounds)\n+                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                        cbIOOBE.append(csq, bds[0], bds[1]));\n+            }\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *      7199551 8065556 8149469 8230665 8237514 8306623\n+ *      7199551 8065556 8149469 8230665 8237514 8306374 8306623\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+import java.util.function.IntFunction;\n+\n+\n@@ -649,4 +652,4 @@\n-        for (CharSequence csq : csqs) {\n-            \/\/ append() should throw BufferOverflowException\n-            tryCatch(b, BufferOverflowException.class, () ->\n-                CharBuffer.allocate(cslen\/8).append(csq, cslen\/4, cslen\/2));\n+        IntFunction<CharBuffer>[] producers = new IntFunction[] {\n+            (i) -> CharBuffer.allocate(i),\n+            (i) -> ByteBuffer.allocateDirect(2*i).asCharBuffer()\n+        };\n@@ -654,4 +657,13 @@\n-            \/\/ append() should throw IndexOutOfBoundsException\n-            for (int[] bds : bounds)\n-                tryCatch(b, IndexOutOfBoundsException.class, () ->\n-                    CharBuffer.allocate(cslen + 1).append(csq, bds[0], bds[1]));\n+        for (IntFunction<CharBuffer> f : producers) {\n+            for (CharSequence csq : csqs) {\n+                \/\/ append() should throw BufferOverflowException\n+                final CharBuffer cbBOE = f.apply(cslen\/8);\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cbBOE.append(csq, cslen\/4, cslen\/2));\n+\n+                \/\/ append() should throw IndexOutOfBoundsException\n+                final CharBuffer cbIOOBE = f.apply(cslen + 1);\n+                for (int[] bds : bounds)\n+                    tryCatch(cbIOOBE, IndexOutOfBoundsException.class, () ->\n+                        cbIOOBE.append(csq, bds[0], bds[1]));\n+            }\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}