{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-                                                            null,   \/\/ name\n+                                                            \"DataPusher\", \/\/ name\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/DataPusher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,0 @@\n-        String name = (threadName != null) ? threadName : \"JSSM Thread\";\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JSSecurityManager.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n+import static javax.sound.sampled.AudioSystem.NOT_SPECIFIED;\n+\n+import javax.sound.sampled.AudioFileFormat;\n+import javax.sound.sampled.AudioFormat;\n+import javax.sound.sampled.AudioInputStream;\n+import javax.sound.sampled.AudioSystem;\n+import java.applet.AudioClip;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8279673\n+ * @summary Verify no NPE creating threads\n+ * @run main\/othervm DataPusherThreadCheck\n+ *\/\n+public class DataPusherThreadCheck {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Prepare the audio file\n+        File file = new File(\"audio.wav\");\n+        try {\n+            AudioFormat format =\n+                    new AudioFormat(PCM_SIGNED, 44100, 8, 1, 1, 44100, false);\n+            int dataSize = 6000*1000 * format.getFrameSize();\n+            InputStream in = new ByteArrayInputStream(new byte[dataSize]);\n+            AudioInputStream audioStream = new AudioInputStream(in, format, NOT_SPECIFIED);\n+            AudioSystem.write(audioStream, AudioFileFormat.Type.WAVE, file);\n+        } catch (Exception ignored) {\n+            return; \/\/ the test is not applicable\n+        }\n+        try {\n+            checkThread(file);\n+        } finally {\n+            Files.delete(file.toPath());\n+        }\n+    }\n+\n+    private static void checkThread(File file) throws Exception {\n+        AudioClip clip = (AudioClip) file.toURL().getContent();\n+        clip.loop();\n+        try {\n+            Thread.sleep(2000);\n+        } catch (InterruptedException ignored) {\n+        }\n+        boolean found = isDataPushedThreadExist();\n+        clip.stop();\n+        if (!found) {\n+            throw new RuntimeException(\"Thread 'DataPusher' isn't found\");\n+        }\n+    }\n+\n+    private static boolean isDataPushedThreadExist() {\n+        for (Thread t : Thread.getAllStackTraces().keySet()) {\n+            if (t.getName().equals(\"DataPusher\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/DataPusherThreadCheck.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}