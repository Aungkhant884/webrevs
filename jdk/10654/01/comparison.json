{"files":[{"patch":"@@ -81,1 +81,2 @@\n-    _rs_length_diff_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _young_rs_length_diff_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _mixed_rs_length_diff_seq(new TruncatedSeq(TruncatedSeqLength)),\n@@ -94,2 +95,4 @@\n-    _pending_cards_seq(new TruncatedSeq(TruncatedSeqLength)),\n-    _rs_length_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _young_pending_cards_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _mixed_pending_cards_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _young_rs_length_seq(new TruncatedSeq(TruncatedSeqLength)),\n+    _mixed_rs_length_seq(new TruncatedSeq(TruncatedSeqLength)),\n@@ -107,1 +110,1 @@\n-  _rs_length_diff_seq->add(rs_length_diff_defaults[index]);\n+  _young_rs_length_diff_seq->add(rs_length_diff_defaults[index]);\n@@ -172,2 +175,2 @@\n-void G1Analytics::report_cost_per_card_scan_ms(double cost_per_card_ms, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_cost_per_card_scan_ms(double cost_per_card_ms, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -180,2 +183,2 @@\n-void G1Analytics::report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -188,2 +191,2 @@\n-void G1Analytics::report_card_merge_to_scan_ratio(double merge_to_scan_ratio, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_card_merge_to_scan_ratio(double merge_to_scan_ratio, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -196,2 +199,6 @@\n-void G1Analytics::report_rs_length_diff(double rs_length_diff) {\n-  _rs_length_diff_seq->add(rs_length_diff);\n+void G1Analytics::report_rs_length_diff(double rs_length_diff, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n+    _young_rs_length_diff_seq->add(rs_length_diff);\n+  } else {\n+    _mixed_rs_length_diff_seq->add(rs_length_diff);\n+  }\n@@ -220,2 +227,6 @@\n-void G1Analytics::report_pending_cards(double pending_cards) {\n-  _pending_cards_seq->add(pending_cards);\n+void G1Analytics::report_pending_cards(double pending_cards, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n+    _young_pending_cards_seq->add(pending_cards);\n+  } else {\n+    _mixed_pending_cards_seq->add(pending_cards);\n+  }\n@@ -224,2 +235,6 @@\n-void G1Analytics::report_rs_length(double rs_length) {\n-  _rs_length_seq->add(rs_length);\n+void G1Analytics::report_rs_length(double rs_length, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n+    _young_rs_length_seq->add(rs_length);\n+  } else {\n+    _mixed_rs_length_seq->add(rs_length);\n+  }\n@@ -244,7 +259,3 @@\n-double G1Analytics::predict_young_card_merge_to_scan_ratio() const {\n-  return predict_in_unit_interval(_young_card_merge_to_scan_ratio_seq);\n-}\n-\n-size_t G1Analytics::predict_scan_card_num(size_t rs_length, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_card_merge_to_scan_ratio_seq)) {\n-    return (size_t)(rs_length * predict_young_card_merge_to_scan_ratio());\n+size_t G1Analytics::predict_scan_card_num(size_t rs_length, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_card_merge_to_scan_ratio_seq)) {\n+    return (size_t)(rs_length * predict_in_unit_interval(_young_card_merge_to_scan_ratio_seq));\n@@ -256,2 +267,2 @@\n-double G1Analytics::predict_card_merge_time_ms(size_t card_num, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_cost_per_card_merge_ms_seq)) {\n+double G1Analytics::predict_card_merge_time_ms(size_t card_num, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_cost_per_card_merge_ms_seq)) {\n@@ -264,2 +275,2 @@\n-double G1Analytics::predict_card_scan_time_ms(size_t card_num, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_cost_per_card_scan_ms_seq)) {\n+double G1Analytics::predict_card_scan_time_ms(size_t card_num, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_cost_per_card_scan_ms_seq)) {\n@@ -308,2 +319,6 @@\n-size_t G1Analytics::predict_rs_length() const {\n-  return predict_size(_rs_length_seq) + predict_size(_rs_length_diff_seq);\n+size_t G1Analytics::predict_rs_length(bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_rs_length_seq)) {\n+    return predict_size(_young_rs_length_seq) + predict_size(_young_rs_length_diff_seq);\n+  } else {\n+    return predict_size(_mixed_rs_length_seq) + predict_size(_mixed_rs_length_diff_seq);\n+  }\n@@ -312,2 +327,6 @@\n-size_t G1Analytics::predict_pending_cards() const {\n-  return predict_size(_pending_cards_seq);\n+size_t G1Analytics::predict_pending_cards(bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_young_pending_cards_seq)) {\n+    return predict_size(_young_pending_cards_seq);\n+  } else {\n+    return predict_size(_mixed_pending_cards_seq);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":50,"deletions":31,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-  TruncatedSeq* _rs_length_diff_seq;\n+  TruncatedSeq* _young_rs_length_diff_seq;\n+  TruncatedSeq* _mixed_rs_length_diff_seq;\n@@ -70,2 +71,4 @@\n-  TruncatedSeq* _pending_cards_seq;\n-  TruncatedSeq* _rs_length_seq;\n+  TruncatedSeq* _young_pending_cards_seq;\n+  TruncatedSeq* _mixed_pending_cards_seq;\n+  TruncatedSeq* _young_rs_length_seq;\n+  TruncatedSeq* _mixed_rs_length_seq;\n@@ -126,4 +129,4 @@\n-  void report_cost_per_card_scan_ms(double cost_per_remset_card_ms, bool for_young_gc);\n-  void report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_gc);\n-  void report_card_merge_to_scan_ratio(double cards_per_entry_ratio, bool for_young_gc);\n-  void report_rs_length_diff(double rs_length_diff);\n+  void report_cost_per_card_scan_ms(double cost_per_remset_card_ms, bool for_young_only_phase);\n+  void report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_only_phase);\n+  void report_card_merge_to_scan_ratio(double cards_per_entry_ratio, bool for_young_only_phase);\n+  void report_rs_length_diff(double rs_length_diff, bool for_young_only_phase);\n@@ -134,2 +137,2 @@\n-  void report_pending_cards(double pending_cards);\n-  void report_rs_length(double rs_length);\n+  void report_pending_cards(double pending_cards, bool for_young_only_phase);\n+  void report_rs_length(double rs_length, bool for_young_only_phase);\n@@ -142,1 +145,0 @@\n-  double predict_young_card_merge_to_scan_ratio() const;\n@@ -144,1 +146,3 @@\n-  double predict_mixed_card_merge_to_scan_ratio() const;\n+  \/\/ Predict how many of the given remembered set of length rs_length will add to\n+  \/\/ the number of total cards scanned.\n+  size_t predict_scan_card_num(size_t rs_length, bool for_young_only_phase) const;\n@@ -146,4 +150,2 @@\n-  size_t predict_scan_card_num(size_t rs_length, bool for_young_gc) const;\n-\n-  double predict_card_merge_time_ms(size_t card_num, bool for_young_gc) const;\n-  double predict_card_scan_time_ms(size_t card_num, bool for_young_gc) const;\n+  double predict_card_merge_time_ms(size_t card_num, bool for_young_only_phase) const;\n+  double predict_card_scan_time_ms(size_t card_num, bool for_young_only_phase) const;\n@@ -165,2 +167,2 @@\n-  size_t predict_rs_length() const;\n-  size_t predict_pending_cards() const;\n+  size_t predict_rs_length(bool for_young_only_phase) const;\n+  size_t predict_pending_cards(bool for_young_only_phase) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.hpp","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-  double predicted_base_time_ms = _policy->predict_base_elapsed_time_ms(pending_cards);\n+  double predicted_base_time_ms = _policy->predict_base_time_ms(pending_cards);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -393,1 +393,4 @@\n-    return _cur_collection_initial_evac_time_ms + _cur_optional_evac_time_ms;\n+    return _cur_collection_initial_evac_time_ms +\n+           _cur_optional_evac_time_ms +\n+           _cur_merge_heap_roots_time_ms +\n+           _cur_optional_merge_heap_roots_time_ms;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-  _rs_length_prediction(0),\n@@ -197,1 +196,5 @@\n-  update_young_length_bounds(_analytics->predict_rs_length());\n+  \/\/ We have no measure of the number of pending cards in the thread buffers,\n+  \/\/ assume these are very few.\n+  bool for_young_only_phase = collector_state()->in_young_only_phase();\n+  update_young_length_bounds(_analytics->predict_pending_cards(for_young_only_phase),\n+                             _analytics->predict_rs_length(for_young_only_phase));\n@@ -200,2 +203,4 @@\n-void G1Policy::update_young_length_bounds(size_t rs_length) {\n-  _young_list_desired_length = calculate_young_desired_length(rs_length);\n+void G1Policy::update_young_length_bounds(size_t pending_cards, size_t rs_length) {\n+  uint old_young_list_target_length = _young_list_target_length;\n+\n+  _young_list_desired_length = calculate_young_desired_length(pending_cards, rs_length);\n@@ -205,1 +210,4 @@\n-  log_debug(gc, ergo, heap)(\"Young list lengths: desired: %u, target: %u, max: %u\",\n+  log_trace(gc, ergo, heap)(\"Young list length update: pending cards %zu rs_length %zu old target %u desired: %u target: %u max: %u\",\n+                            pending_cards,\n+                            rs_length,\n+                            old_young_list_target_length,\n@@ -224,1 +232,1 @@\n-uint G1Policy::calculate_young_desired_length(size_t rs_length) const {\n+uint G1Policy::calculate_young_desired_length(size_t pending_cards, size_t rs_length) const {\n@@ -259,2 +267,1 @@\n-    const size_t pending_cards = _analytics->predict_pending_cards();\n-    double survivor_base_time_ms = predict_base_elapsed_time_ms(pending_cards, rs_length);\n+    double base_time_ms = predict_base_time_ms(pending_cards, rs_length);\n@@ -263,1 +270,1 @@\n-      calculate_desired_eden_length_by_pause(survivor_base_time_ms,\n+      calculate_desired_eden_length_by_pause(base_time_ms,\n@@ -479,1 +486,1 @@\n-uint G1Policy::calculate_desired_eden_length_before_mixed(double survivor_base_time_ms,\n+uint G1Policy::calculate_desired_eden_length_before_mixed(double base_time_ms,\n@@ -486,1 +493,1 @@\n-  double predicted_region_evac_time_ms = survivor_base_time_ms;\n+  double predicted_region_evac_time_ms = base_time_ms;\n@@ -489,1 +496,1 @@\n-    predicted_region_evac_time_ms += predict_region_total_time_ms(r, false);\n+    predicted_region_evac_time_ms += predict_region_total_time_ms(r, false \/* for_young_only_phase *\/);\n@@ -519,1 +526,1 @@\n-void G1Policy::revise_young_list_target_length_if_necessary(size_t rs_length) {\n+void G1Policy::revise_young_list_target_length(size_t rs_length) {\n@@ -522,16 +529,4 @@\n-  if (rs_length > _rs_length_prediction) {\n-    \/\/ add 10% to avoid having to recalculate often\n-    size_t rs_length_prediction = rs_length * 1100 \/ 1000;\n-    update_rs_length_prediction(rs_length_prediction);\n-    update_young_length_bounds(rs_length_prediction);\n-  }\n-}\n-\n-void G1Policy::update_rs_length_prediction() {\n-  update_rs_length_prediction(_analytics->predict_rs_length());\n-}\n-\n-void G1Policy::update_rs_length_prediction(size_t prediction) {\n-  if (collector_state()->in_young_only_phase() && use_adaptive_young_list_length()) {\n-    _rs_length_prediction = prediction;\n-  }\n+  G1DirtyCardQueueSet& dcqs = G1BarrierSet::dirty_card_queue_set();\n+  \/\/ We have no measure of the number of cards in the thread buffers, assume\n+  \/\/ these are very few compared to the ones in the DCQS.\n+  update_young_length_bounds(dcqs.num_cards(), rs_length);\n@@ -572,1 +567,0 @@\n-  update_rs_length_prediction();\n@@ -696,1 +690,1 @@\n-  return other_time_ms(pause_time_ms) - phase_times()->total_rebuild_freelist_time_ms();\n+  return other_time_ms(pause_time_ms) - (young_other_time_ms() + non_young_other_time_ms());\n@@ -752,0 +746,1 @@\n+  bool is_young_only_pause = G1GCPauseTypeHelper::is_young_only_pause(this_pause);\n@@ -805,1 +800,1 @@\n-    assert(G1GCPauseTypeHelper::is_young_only_pause(this_pause), \"must be\");\n+    assert(is_young_only_pause, \"must be\");\n@@ -829,2 +824,1 @@\n-      _analytics->report_cost_per_card_merge_ms(avg_time_merge_cards \/ total_cards_merged,\n-                                                G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n+      _analytics->report_cost_per_card_merge_ms(avg_time_merge_cards \/ total_cards_merged, is_young_only_pause);\n@@ -841,2 +835,1 @@\n-      _analytics->report_cost_per_card_scan_ms(avg_time_dirty_card_scan \/ total_cards_scanned,\n-                                               G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n+      _analytics->report_cost_per_card_scan_ms(avg_time_dirty_card_scan \/ total_cards_scanned, is_young_only_pause);\n@@ -856,2 +849,1 @@\n-    _analytics->report_card_merge_to_scan_ratio(merge_to_scan_ratio,\n-                                                G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n+    _analytics->report_card_merge_to_scan_ratio(merge_to_scan_ratio, is_young_only_pause);\n@@ -861,1 +853,1 @@\n-    _analytics->report_rs_length_diff(rs_length_diff);\n+    _analytics->report_rs_length_diff(rs_length_diff, is_young_only_pause);\n@@ -886,5 +878,2 @@\n-    \/\/ During mixed gc we do not use them for young gen sizing.\n-    if (G1GCPauseTypeHelper::is_young_only_pause(this_pause)) {\n-      _analytics->report_pending_cards((double) _pending_cards_at_gc_start);\n-      _analytics->report_rs_length((double) _rs_length);\n-    }\n+    _analytics->report_pending_cards((double) _pending_cards_at_gc_start, is_young_only_pause);\n+    _analytics->report_rs_length((double) _rs_length, is_young_only_pause);\n@@ -901,1 +890,0 @@\n-  update_rs_length_prediction();\n@@ -917,1 +905,1 @@\n-    \/\/ the marking threads may have received an uncharacterisic amount of cpu time\n+    \/\/ the marking threads may have received an uncharacteristic amount of cpu time\n@@ -1011,8 +999,16 @@\n-double G1Policy::predict_base_elapsed_time_ms(size_t pending_cards,\n-                                              size_t rs_length) const {\n-  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase());\n-  return\n-    _analytics->predict_card_merge_time_ms(pending_cards + rs_length, collector_state()->in_young_only_phase()) +\n-    _analytics->predict_card_scan_time_ms(effective_scanned_cards, collector_state()->in_young_only_phase()) +\n-    _analytics->predict_constant_other_time_ms() +\n-    predict_survivor_regions_evac_time();\n+double G1Policy::predict_base_time_ms(size_t pending_cards,\n+                                      size_t rs_length) const {\n+  \/\/ Assume that all cards from the log buffers will be scanned, i.e. there are no\n+  \/\/ duplicates in that set.\n+  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase()) + pending_cards;\n+\n+  double card_merge_time = _analytics->predict_card_merge_time_ms(pending_cards + rs_length, collector_state()->in_young_only_phase());\n+  double card_scan_time = _analytics->predict_card_scan_time_ms(effective_scanned_cards, collector_state()->in_young_only_phase());\n+  double constant_other_time = _analytics->predict_constant_other_time_ms();\n+  double survivor_evac_time = predict_survivor_regions_evac_time();\n+\n+  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time;\n+\n+  log_trace(gc, ergo, heap)(\"Predicted base time: total %f lb_cards %zu rs_length %zu effective_scanned_cards %zu card_merge_time %f card_scan_time %f constant_other_time %f survivor_evac_time %f\",\n+                            total_time, pending_cards, rs_length, effective_scanned_cards, card_merge_time, card_scan_time, constant_other_time, survivor_evac_time);\n+  return total_time;\n@@ -1021,3 +1017,4 @@\n-double G1Policy::predict_base_elapsed_time_ms(size_t pending_cards) const {\n-  size_t rs_length = _analytics->predict_rs_length();\n-  return predict_base_elapsed_time_ms(pending_cards, rs_length);\n+double G1Policy::predict_base_time_ms(size_t pending_cards) const {\n+  bool for_young_only_phase = collector_state()->in_young_only_phase();\n+  size_t rs_length = _analytics->predict_rs_length(for_young_only_phase);\n+  return predict_base_time_ms(pending_cards, rs_length);\n@@ -1053,1 +1050,1 @@\n-                                                 bool for_young_gc) const {\n+                                                 bool for_young_only_phase) const {\n@@ -1055,1 +1052,1 @@\n-  size_t scan_card_num = _analytics->predict_scan_card_num(rs_length, for_young_gc);\n+  size_t scan_card_num = _analytics->predict_scan_card_num(rs_length, for_young_only_phase);\n@@ -1071,2 +1068,2 @@\n-double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_gc) const {\n-  return predict_region_non_copy_time_ms(hr, for_young_gc) + predict_region_copy_time_ms(hr);\n+double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const {\n+  return predict_region_non_copy_time_ms(hr, for_young_only_phase) + predict_region_copy_time_ms(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":58,"deletions":61,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -107,2 +107,0 @@\n-  size_t _rs_length_prediction;\n-\n@@ -140,1 +138,1 @@\n-  double predict_base_elapsed_time_ms(size_t num_pending_cards) const;\n+  double predict_base_time_ms(size_t pending_cards) const;\n@@ -143,1 +141,1 @@\n-  double predict_base_elapsed_time_ms(size_t num_pending_cards, size_t rs_length) const;\n+  double predict_base_time_ms(size_t pending_cards, size_t rs_length) const;\n@@ -150,2 +148,2 @@\n-  double predict_region_non_copy_time_ms(HeapRegion* hr, bool for_young_gc) const;\n-  double predict_region_total_time_ms(HeapRegion* hr, bool for_young_gc) const;\n+  double predict_region_non_copy_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n@@ -197,2 +195,2 @@\n-  \/\/ If no rs_length parameter is passed, predict the RS length using the\n-  \/\/ prediction model, otherwise use the given rs_length as the prediction.\n+  \/\/ If no parameters are passed, predict pending cards and the RS length using\n+  \/\/ the prediction model.\n@@ -200,1 +198,1 @@\n-  void update_young_length_bounds(size_t rs_length);\n+  void update_young_length_bounds(size_t pending_cards, size_t rs_length);\n@@ -222,1 +220,1 @@\n-  uint calculate_desired_eden_length_before_mixed(double survivor_base_time_ms,\n+  uint calculate_desired_eden_length_before_mixed(double base_time_ms,\n@@ -228,1 +226,1 @@\n-  uint calculate_young_desired_length(size_t rs_length) const;\n+  uint calculate_young_desired_length(size_t pending_cards, size_t rs_length) const;\n@@ -235,3 +233,0 @@\n-  void update_rs_length_prediction();\n-  void update_rs_length_prediction(size_t prediction);\n-\n@@ -298,1 +293,1 @@\n-  void revise_young_list_target_length_if_necessary(size_t rs_length);\n+  void revise_young_list_target_length(size_t rs_length);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -541,1 +541,1 @@\n-        policy->revise_young_list_target_length_if_necessary(cl.sampled_rs_length());\n+        policy->revise_young_list_target_length(cl.sampled_rs_length());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-bool G1YoungGCEvacFailureInjector::arm_if_needed_for_gc_type(bool for_young_gc,\n+bool G1YoungGCEvacFailureInjector::arm_if_needed_for_gc_type(bool for_young_only_phase,\n@@ -70,1 +70,1 @@\n-  if (for_young_gc) {\n+  if (for_young_only_phase) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  bool arm_if_needed_for_gc_type(bool for_young_gc,\n+  bool arm_if_needed_for_gc_type(bool for_young_only_phase,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_gc *\/);\n+  double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_only_phase *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}