{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import java.util.Collection;\n+import java.util.LinkedList;\n@@ -40,0 +42,2 @@\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n@@ -73,0 +77,2 @@\n+    private static Collection<Path> tempFiles;\n+\n@@ -141,28 +147,14 @@\n-        Path sourceFile = Files.createTempFile(\"test2GBSource\", null);\n-        try {\n-            \/\/ preparing two temporary files which will be compared at the end of the test\n-            Path targetFile = Files.createTempFile(\"test2GBtarget\", null);\n-            try {\n-                \/\/ writing 3 GB of random bytes into source file\n-                for (int i = 0; i < NUM_WRITES; i++)\n-                    Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n-\n-                \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n-                long count;\n-                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n-                     OutputStream outputStream = Channels\n-                             .newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE))) {\n-                    count = inputStream.transferTo(outputStream);\n-                }\n-\n-                \/\/ comparing reported transferred bytes, must be 3 GB\n-                assertEquals(count, BYTES_WRITTEN);\n-\n-                \/\/ comparing content of both files, failing in case of any difference\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n+        \/\/ preparing two temporary files which will be compared at the end of the test\n+        Path sourceFile = newTempFile();\n+        Path targetFile = newTempFile();\n+\n+        \/\/ writing 3 GB of random bytes into source file\n+        for (int i = 0; i < NUM_WRITES; i++)\n+            Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n+\n+        \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n+        long count;\n+        try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n+             OutputStream outputStream = Channels\n+                     .newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE))) {\n+            count = inputStream.transferTo(outputStream);\n@@ -170,0 +162,6 @@\n+\n+        \/\/ comparing reported transferred bytes, must be 3 GB\n+        assertEquals(count, BYTES_WRITTEN);\n+\n+        \/\/ comparing content of both files, failing in case of any difference\n+        assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n@@ -245,1 +243,1 @@\n-                Path path = Files.createTempFile(null, null);\n+                Path path = newTempFile();\n@@ -271,1 +269,1 @@\n-                Path path = Files.createTempFile(null, null);\n+                Path path = newTempFile();\n@@ -285,0 +283,25 @@\n+    @BeforeClass\n+    public static void createTempFileRegistry() {\n+        tempFiles = new LinkedList();\n+    }\n+\n+    @AfterClass\n+    public static void deleteTempFiles() {\n+        tempFiles.forEach(path -> {\n+            try {\n+                Files.delete(path);\n+            } catch (IOException e) {\n+                \/\/ ignored\n+            }\n+        });\n+        tempFiles = null;\n+    }\n+\n+    \/*\n+     * Creates a temporary file and registers it for later cleanup after tests.\n+     *\/\n+    private static Path newTempFile() throws IOException {\n+        Path path = Files.createTempFile(\"transferTo\", null);\n+        tempFiles.add(path);\n+        return path;\n+    }\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":53,"deletions":30,"binary":false,"changes":83,"status":"modified"}]}