{"files":[{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -38,0 +39,4 @@\n+    \/**\n+     * Test that the keys in Charset.availableCharsets()\n+     * are equal to the associated Charset.name() value.\n+     *\/\n@@ -39,1 +44,1 @@\n-    public void testCanonicalNames() {\n+    public void canonicalNamesTest() {\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/AvailableCharsetNames.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,0 +44,6 @@\n+    \/**\n+     * Test that the charsets in 'encodings' contain the charsets\n+     * inside 'contains'. Each value in 'encodings' is mapped to a String\n+     * array in 'contains'. For example, the value, \"TIS-620\" in 'encodings'\n+     * should contain \"US-ASCII\", \"TIS-620\".\n+     *\/\n@@ -45,2 +51,2 @@\n-    @MethodSource(\"utfCharsets\")\n-    public void testInterContainment(String containerName, String containedName) {\n+    @MethodSource(\"charsets\")\n+    public void interContainmentTest(String containerName, String containedName) {\n@@ -53,1 +59,1 @@\n-    private static Stream<Arguments> utfCharsets() {\n+    private static Stream<Arguments> charsets() {\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/CharsetContainmentTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+    \/**\n+     * Tests the containment of standard charsets against itself and the\n+     * other standard charset values. This test takes both true and false for 'cont'.\n+     *\/\n@@ -46,2 +50,2 @@\n-    @MethodSource(\"otherCharsets\")\n-    public void testCharsets(Charset containerCs, Charset cs, boolean cont){\n+    @MethodSource(\"standardCharsets\")\n+    public void standardCharsetsTest(Charset containerCs, Charset cs, boolean cont){\n@@ -51,0 +55,5 @@\n+    \/**\n+     * Tests UTF charsets with other charsets. In this case, each UTF charset\n+     * should contain every single charset they are tested against. 'cont' is\n+     * always true.\n+     *\/\n@@ -53,1 +62,1 @@\n-    public void testUTFCharsets(Charset containerCs, Charset cs, boolean cont){\n+    public void UTFCharsetsTest(Charset containerCs, Charset cs, boolean cont){\n@@ -70,0 +79,3 @@\n+    \/**\n+     * Helper method that checks if a charset should contain another charset.\n+     *\/\n@@ -146,1 +158,1 @@\n-    private static Stream<Arguments> otherCharsets() {\n+    private static Stream<Arguments> standardCharsets() {\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/Contains.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+\n@@ -39,0 +40,4 @@\n+    \/**\n+     * Test that the input String is the same after round tripping\n+     * the Charset.encode() and Charset.decode() methods.\n+     *\/\n@@ -41,1 +46,1 @@\n-    public void testRoundTrip(String pre) {\n+    public void roundTripTest(String pre) {\n@@ -43,1 +48,6 @@\n-        bb.put(Charset.forName(\"ISO-8859-15\").encode(pre)).flip();\n+        Charset preCs = Charset.forName(\"ISO-8859-15\");\n+        if (!preCs.canEncode()) {\n+            throw new RuntimeException(\"Error: Trying to test encode and \" +\n+                    \"decode methods on a charset that does not support encoding\");\n+        }\n+        bb.put(preCs.encode(pre)).flip();\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/EncDec.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.stream.Stream;\n@@ -38,0 +39,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -42,13 +46,0 @@\n-    static String[] illegalNames = {\n-            \".\",\n-            \"_\",\n-            \":\",\n-            \"-\",\n-            \".name\",\n-            \"_name\",\n-            \":name\",\n-            \"-name\",\n-            \"name*name\",\n-            \"name?name\"\n-    };\n-\n@@ -57,1 +48,1 @@\n-    public void defaultCharset() {\n+    public void defaultCharsetTest() {\n@@ -64,1 +55,1 @@\n-    public void nullCharset() {\n+    public void nullCharsetTest() {\n@@ -71,8 +62,7 @@\n-    @Test\n-    public void illegalCharsets() {\n-        for (String illegalName : illegalNames) {\n-            assertThrows(IllegalCharsetNameException.class,\n-                    () -> Charset.forName(illegalName));\n-            assertThrows(IllegalCharsetNameException.class,\n-                    () -> Charset.forName(illegalName));\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"illegalNames\")\n+    public void illegalCharsetsTest(String name) {\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(name));\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(name));\n@@ -84,1 +74,1 @@\n-    public void emptyCharsets() {\n+    public void emptyCharsetsTest() {\n@@ -123,0 +113,15 @@\n+\n+    static Stream<String> illegalNames() {\n+        return Stream.of(\n+                \".\",\n+                \"_\",\n+                \":\",\n+                \"-\",\n+                \".name\",\n+                \"_name\",\n+                \":name\",\n+                \"-name\",\n+                \"name*name\",\n+                \"name?name\"\n+        );\n+    }\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/IllegalCharsetName.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -44,0 +44,5 @@\n+    \/**\n+     * Tests that the aliases of the input String convert\n+     * to the same Charset. This is validated by ensuring the input String\n+     * and Charset.name() values are equal.\n+     *\/\n@@ -45,1 +50,1 @@\n-    @MethodSource(\"charsets\")\n+    @MethodSource(\"aliases\")\n@@ -53,0 +58,4 @@\n+    \/**\n+     * Tests charsets to ensure that they are registered in the\n+     * IANA Charset Registry.\n+     *\/\n@@ -55,1 +64,1 @@\n-    public void testRegistered(String cs) throws Exception {\n+    public void registeredTest(String cs) throws Exception {\n@@ -59,0 +68,4 @@\n+    \/**\n+     * Tests charsets to ensure that they are NOT registered in the\n+     * IANA Charset Registry.\n+     *\/\n@@ -61,1 +74,1 @@\n-    public void testUnregistered(String cs) throws Exception {\n+    public void unregisteredTest(String cs) throws Exception {\n@@ -65,0 +78,4 @@\n+    \/**\n+     * Helper method which checks if a charset is registered and whether\n+     * it should be.\n+     *\/\n@@ -74,0 +91,1 @@\n+    \/\/ See https:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xhtml\n@@ -215,1 +233,1 @@\n-    private static Stream<Arguments> charsets() {\n+    private static Stream<Arguments> aliases() {\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/RegisteredCharsets.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"}]}