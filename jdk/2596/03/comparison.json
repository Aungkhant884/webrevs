{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1016,0 +1016,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1017,0 +1018,3 @@\n+        if (c.getClass() == UnmodifiableCollection.class) {\n+            return (Collection<T>) c;\n+        }\n@@ -1123,0 +1127,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1124,0 +1129,3 @@\n+        if (s.getClass() == UnmodifiableSet.class) {\n+            return (Set<T>) s;\n+        }\n@@ -1157,0 +1165,3 @@\n+        if (s.getClass() == UnmodifiableSortedSet.class) {\n+            return s;\n+        }\n@@ -1207,0 +1218,3 @@\n+        if (s.getClass() == UnmodifiableNavigableSet.class) {\n+            return s;\n+        }\n@@ -1296,0 +1310,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1297,0 +1312,4 @@\n+        if (list.getClass() == UnmodifiableList.class || list.getClass() == UnmodifiableRandomAccessList.class) {\n+           return (List<T>) list;\n+        }\n+\n@@ -1446,0 +1465,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1447,0 +1467,3 @@\n+        if (m.getClass() == UnmodifiableMap.class) {\n+            return (Map<K,V>) m;\n+        }\n@@ -1804,0 +1827,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1805,0 +1829,3 @@\n+        if (m.getClass() == UnmodifiableSortedMap.class) {\n+            return (SortedMap<K,V>) m;\n+        }\n@@ -1850,0 +1877,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1851,0 +1879,3 @@\n+        if (m.getClass() == UnmodifiableNavigableMap.class) {\n+            return (NavigableMap<K,V>) m;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6323374\n+ * @run testng WrappedUnmodifiableCollections\n+ *\/\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.*;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+\n+@Test\n+public class WrappedUnmodifiableCollections {\n+\n+    static final Class<?> UNMODIFIABLESET;\n+    static final Class<?> UNMODIFIABLESORTEDSET;\n+    static final Class<?> UNMODIFIABLENAVIGABLESET;\n+    static final Class<?> UNMODIFIABLELIST;\n+    static final Class<?> UNMODIFIABLERANDOMACCESSLIST;\n+    static final Class<?> UNMODIFIABLEMAP;\n+    static final Class<?> UNMODIFIABLESORTEDMAP;\n+    static final Class<?> UNMODIFIABLENAVIGABLEMAP;\n+    static final Class<?> UNMODIFIABLECOLLECTION;\n+\n+    static {\n+        try {\n+            UNMODIFIABLESET = Class.forName(\"java.util.Collections$UnmodifiableSet\");\n+            UNMODIFIABLESORTEDSET = Class.forName(\"java.util.Collections$UnmodifiableSortedSet\");\n+            UNMODIFIABLENAVIGABLESET = Class.forName(\"java.util.Collections$UnmodifiableNavigableSet\");\n+\n+            UNMODIFIABLELIST = Class.forName(\"java.util.Collections$UnmodifiableList\");\n+            UNMODIFIABLERANDOMACCESSLIST = Class.forName(\"java.util.Collections$UnmodifiableRandomAccessList\");\n+\n+            UNMODIFIABLEMAP = Class.forName(\"java.util.Collections$UnmodifiableMap\");\n+            UNMODIFIABLESORTEDMAP = Class.forName(\"java.util.Collections$UnmodifiableSortedMap\");\n+            UNMODIFIABLENAVIGABLEMAP = Class.forName(\"java.util.Collections$UnmodifiableNavigableMap\");\n+\n+            UNMODIFIABLECOLLECTION= Class.forName(\"java.util.Collections$UnmodifiableCollection\");\n+\n+\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(\"Class Not found: \" + e.getMessage());\n+        }\n+    }\n+\n+\n+    public void testUnmodifiableListsDontWrap() {\n+        List<Integer> list = List.of(1,2,3);\n+        assertNotSame(list.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+        List<Integer> result = Collections.unmodifiableList(list);\n+        assertSame(result.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        \/\/Empty List\n+        List<?> list2 = List.of();\n+        assertNotSame(list2.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+        List<?> result2 = Collections.unmodifiableList(list2);\n+        assertSame(result2.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        \/\/ImmutableCollections.List12\n+        List<?> list12 = List.of(1);\n+        assertNotSame(list12.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+        List<?> result3 = Collections.unmodifiableList(list12);\n+        assertSame(result3.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        \/\/ImmutableCollections.ListN\n+        List<?> listN = List.of(1,2,3,4,5,6);\n+        assertNotSame(listN.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+        List<?> result4 = Collections.unmodifiableList(listN);\n+        assertSame(result4.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        \/\/ImmutableCollections.Sublist\n+        List<?> subList = list.subList(0,1);\n+        assertNotSame(subList.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+        List<?> subListResult = Collections.unmodifiableList(subList);\n+        assertSame(subListResult.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        \/\/Collections.UnmodifiableList\n+        List<Integer> linkedList = new LinkedList<>();\n+        linkedList.add(1);\n+        linkedList.add(2);\n+        linkedList.add(3);\n+        List<?> resultLinkedList = Collections.unmodifiableList(linkedList);\n+        assertNotSame(linkedList, resultLinkedList);\n+        assertSame(resultLinkedList.getClass(), UNMODIFIABLELIST);\n+\n+        List<?> rewrappedLinkedListAttempt = Collections.unmodifiableList(resultLinkedList);\n+        assertSame(resultLinkedList, rewrappedLinkedListAttempt);\n+\n+        \/\/Collections.UnmodifiableRandomAccessList\n+        List<Integer> arrayList = new ArrayList<>();\n+        linkedList.add(1);\n+        linkedList.add(2);\n+        linkedList.add(3);\n+\n+        List<?> resultArrayList = Collections.unmodifiableList(arrayList);\n+        assertNotSame(arrayList, resultArrayList);\n+        assertSame(resultArrayList.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n+\n+        List<?> rewrappedLinkedListAttempt2 = Collections.unmodifiableList(resultLinkedList);\n+        assertSame(resultLinkedList, rewrappedLinkedListAttempt2);\n+\n+    }\n+\n+\n+    public void testUnmodifiableCollectionsDontWrap() {\n+        List<Integer> list = new ArrayList<>();\n+        list.add(1);\n+        list.add(2);\n+        list.add(3);\n+\n+        Collection<Integer> unmodifiableCollection = Collections.unmodifiableCollection(list);\n+\n+        assertSame(unmodifiableCollection.getClass(), UNMODIFIABLECOLLECTION);\n+        Collection<?> unmodifiableCollection2 = Collections.unmodifiableCollection(unmodifiableCollection);\n+\n+        assertSame(UNMODIFIABLECOLLECTION, unmodifiableCollection2.getClass());\n+        assertSame(unmodifiableCollection2, unmodifiableCollection);\n+\n+    }\n+\n+    public void testUnmodifiableSetsDontWrap() {\n+\n+        TreeSet<Integer> treeSet = new TreeSet<>();\n+\n+        \/\/Collections.UnmodifiableSet\n+        Set<Integer> unmodifiableSet = Collections.unmodifiableSet(treeSet);\n+        assertSame(unmodifiableSet.getClass(), UNMODIFIABLESET);\n+\n+        Set<Integer> rewrappedUnmodifiableSet = Collections.unmodifiableSet(unmodifiableSet);\n+        assertSame(rewrappedUnmodifiableSet.getClass(), UNMODIFIABLESET);\n+        assertSame(rewrappedUnmodifiableSet, unmodifiableSet);\n+\n+        \/\/Collections.UnmodifiableSortedSet\n+        SortedSet<Integer> unmodifiableSortedSet = Collections.unmodifiableSortedSet(treeSet);\n+        assertSame(unmodifiableSortedSet.getClass(), UNMODIFIABLESORTEDSET);\n+\n+\n+        SortedSet<Integer> reWrappedUmodifiableSortedSet = Collections.unmodifiableSortedSet(unmodifiableSortedSet);\n+        assertSame(reWrappedUmodifiableSortedSet.getClass(), UNMODIFIABLESORTEDSET);\n+        assertSame(reWrappedUmodifiableSortedSet, unmodifiableSortedSet);\n+\n+        \/\/Collections.UnmodifiableNavigableSet\n+        NavigableSet<Integer> unmodifiableNavigableSet = Collections.unmodifiableNavigableSet(treeSet);\n+        assertSame(unmodifiableNavigableSet.getClass(), UNMODIFIABLENAVIGABLESET);\n+\n+        NavigableSet<Integer> reWrappedUnmodifiableNavigableSet =\n+                Collections.unmodifiableNavigableSet(unmodifiableNavigableSet);\n+        assertSame(reWrappedUnmodifiableNavigableSet.getClass(), UNMODIFIABLENAVIGABLESET);\n+        assertSame(reWrappedUnmodifiableNavigableSet, unmodifiableNavigableSet);\n+\n+        \/\/SET12\n+        Set<Integer> set12 = Set.of(1,2);\n+        assertNotSame(set12.getClass(), UNMODIFIABLESET);\n+        Set<Integer> reWrappedSet12 = Collections.unmodifiableSet(set12);\n+        assertSame(reWrappedSet12.getClass(), UNMODIFIABLESET);\n+\n+        \/\/SETN\n+        Set<Integer> setN = Set.of(1,2,3,4,5,6);\n+        assertNotSame(setN.getClass(), UNMODIFIABLESET);\n+        Set<Integer> reWrappedSetN = Collections.unmodifiableSet(setN);\n+        assertSame(reWrappedSetN.getClass(), UNMODIFIABLESET);\n+\n+\n+    }\n+\n+    public void testUnmodifiableMapsDontWrap() {\n+        TreeMap<Integer,Integer> treeMap = new TreeMap<>();\n+        treeMap.put(1,1);\n+        treeMap.put(2,2);\n+        treeMap.put(3,3);\n+\n+        \/\/Collections.UnModifiableMap\n+        Map<Integer,Integer> unmodifiableMap = Collections.unmodifiableMap(treeMap);\n+        assertSame(unmodifiableMap.getClass(), UNMODIFIABLEMAP);\n+        assertNotSame(unmodifiableMap, treeMap);\n+\n+        Map<Integer,Integer> reWrappedUnmodifiableMap = Collections.unmodifiableMap(unmodifiableMap);\n+        assertSame(reWrappedUnmodifiableMap, unmodifiableMap);\n+\n+        \/\/Collections.UnModifiableSortedMap\n+        SortedMap<Integer,Integer> unmodifiableSortedMap = Collections.unmodifiableSortedMap(treeMap);\n+        assertSame(unmodifiableSortedMap.getClass(), UNMODIFIABLESORTEDMAP);\n+        assertNotSame(unmodifiableSortedMap, treeMap);\n+\n+        Map<Integer,Integer> reWrappedUnmodifiableSortedMap = Collections.unmodifiableSortedMap(unmodifiableSortedMap);\n+        assertSame(reWrappedUnmodifiableSortedMap, unmodifiableSortedMap);\n+\n+        \/\/Collections.UnModifiableNavigableMap\n+        NavigableMap<Integer,Integer> unmodifiableNavigableMap = Collections.unmodifiableNavigableMap(treeMap);\n+        assertSame(unmodifiableNavigableMap.getClass(), UNMODIFIABLENAVIGABLEMAP);\n+\n+        NavigableMap<Integer,Integer> reWrappedUnmodifiableNavigableMap =\n+                Collections.unmodifiableNavigableMap(unmodifiableNavigableMap);\n+        assertSame(unmodifiableNavigableMap, reWrappedUnmodifiableNavigableMap);\n+\n+        \/\/ImmutableCollections.Map1\n+        Map<Integer,Integer> map1 = Map.of(1,1);\n+        assertNotSame(map1.getClass(), UNMODIFIABLEMAP);\n+\n+        Map<Integer,Integer> reWrappedMap1 = Collections.unmodifiableMap(map1);\n+        assertSame(reWrappedMap1.getClass(), UNMODIFIABLEMAP);\n+\n+        \/\/ImmutableCollections.MapN\n+        Map<Integer,Integer> mapN = Map.of(1,1, 2, 2, 3, 3, 4, 4);\n+        assertNotSame(mapN.getClass(), UNMODIFIABLEMAP);\n+\n+        Map<Integer,Integer> reWrappedMapN = Collections.unmodifiableMap(mapN);\n+        assertSame(reWrappedMapN.getClass(), UNMODIFIABLEMAP);\n+\n+\n+\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Collections\/WrappedUnmodifiableCollections.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"}]}