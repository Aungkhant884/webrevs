{"files":[{"patch":"@@ -1011,0 +1011,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1123,0 +1124,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1159,0 +1161,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1211,0 +1214,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1306,0 +1310,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1460,0 +1465,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1821,0 +1827,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1870,0 +1877,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n@@ -33,0 +31,1 @@\n+import java.util.function.Function;\n@@ -40,29 +39,5 @@\n-    static final Class<?> UNMODIFIABLESET;\n-    static final Class<?> UNMODIFIABLESORTEDSET;\n-    static final Class<?> UNMODIFIABLENAVIGABLESET;\n-    static final Class<?> UNMODIFIABLELIST;\n-    static final Class<?> UNMODIFIABLERANDOMACCESSLIST;\n-    static final Class<?> UNMODIFIABLEMAP;\n-    static final Class<?> UNMODIFIABLESORTEDMAP;\n-    static final Class<?> UNMODIFIABLENAVIGABLEMAP;\n-    static final Class<?> UNMODIFIABLECOLLECTION;\n-\n-    static {\n-        try {\n-            UNMODIFIABLESET = Class.forName(\"java.util.Collections$UnmodifiableSet\");\n-            UNMODIFIABLESORTEDSET = Class.forName(\"java.util.Collections$UnmodifiableSortedSet\");\n-            UNMODIFIABLENAVIGABLESET = Class.forName(\"java.util.Collections$UnmodifiableNavigableSet\");\n-\n-            UNMODIFIABLELIST = Class.forName(\"java.util.Collections$UnmodifiableList\");\n-            UNMODIFIABLERANDOMACCESSLIST = Class.forName(\"java.util.Collections$UnmodifiableRandomAccessList\");\n-\n-            UNMODIFIABLEMAP = Class.forName(\"java.util.Collections$UnmodifiableMap\");\n-            UNMODIFIABLESORTEDMAP = Class.forName(\"java.util.Collections$UnmodifiableSortedMap\");\n-            UNMODIFIABLENAVIGABLEMAP = Class.forName(\"java.util.Collections$UnmodifiableNavigableMap\");\n-\n-            UNMODIFIABLECOLLECTION= Class.forName(\"java.util.Collections$UnmodifiableCollection\");\n-\n-\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"Class Not found: \" + e.getMessage());\n-        }\n+    private static <T,E extends T> void testWrapping(T collection, Function<T,E> wrapper) {\n+        var collection1 = wrapper.apply(collection);\n+        var collection2 = wrapper.apply(collection1);\n+        assertNotSame(collection, collection2);\n+        assertSame(collection1, collection2);\n@@ -71,1 +46,0 @@\n-\n@@ -73,54 +47,9 @@\n-        List<Integer> list = List.of(1,2,3);\n-        assertNotSame(list.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-        List<Integer> result = Collections.unmodifiableList(list);\n-        assertSame(result.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        \/\/Empty List\n-        List<?> list2 = List.of();\n-        assertNotSame(list2.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-        List<?> result2 = Collections.unmodifiableList(list2);\n-        assertSame(result2.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        \/\/ImmutableCollections.List12\n-        List<?> list12 = List.of(1);\n-        assertNotSame(list12.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-        List<?> result3 = Collections.unmodifiableList(list12);\n-        assertSame(result3.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        \/\/ImmutableCollections.ListN\n-        List<?> listN = List.of(1,2,3,4,5,6);\n-        assertNotSame(listN.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-        List<?> result4 = Collections.unmodifiableList(listN);\n-        assertSame(result4.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        \/\/ImmutableCollections.Sublist\n-        List<?> subList = list.subList(0,1);\n-        assertNotSame(subList.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-        List<?> subListResult = Collections.unmodifiableList(subList);\n-        assertSame(subListResult.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        \/\/Collections.UnmodifiableList\n-        List<Integer> linkedList = new LinkedList<>();\n-        linkedList.add(1);\n-        linkedList.add(2);\n-        linkedList.add(3);\n-        List<?> resultLinkedList = Collections.unmodifiableList(linkedList);\n-        assertNotSame(linkedList, resultLinkedList);\n-        assertSame(resultLinkedList.getClass(), UNMODIFIABLELIST);\n-\n-        List<?> rewrappedLinkedListAttempt = Collections.unmodifiableList(resultLinkedList);\n-        assertSame(resultLinkedList, rewrappedLinkedListAttempt);\n-\n-        \/\/Collections.UnmodifiableRandomAccessList\n-        List<Integer> arrayList = new ArrayList<>();\n-        linkedList.add(1);\n-        linkedList.add(2);\n-        linkedList.add(3);\n-\n-        List<?> resultArrayList = Collections.unmodifiableList(arrayList);\n-        assertNotSame(arrayList, resultArrayList);\n-        assertSame(resultArrayList.getClass(), UNMODIFIABLERANDOMACCESSLIST);\n-\n-        List<?> rewrappedLinkedListAttempt2 = Collections.unmodifiableList(resultLinkedList);\n-        assertSame(resultLinkedList, rewrappedLinkedListAttempt2);\n-\n+        List<List<?>> lists = List.of(List.of(), List.of(1,2,3), List.of(1),\n+                List.of(1,2,3,4,5,6),\n+                List.of(1,2,3).subList(0,1),\n+                new LinkedList<>(List.of(1,2,3)),\n+                new ArrayList<>(List.of(1,2,3)));\n+\n+        for(List<?> list : lists) {\n+            testWrapping(list, Collections::unmodifiableList);\n+        }\n@@ -129,1 +58,0 @@\n-\n@@ -131,13 +59,2 @@\n-        List<Integer> list = new ArrayList<>();\n-        list.add(1);\n-        list.add(2);\n-        list.add(3);\n-\n-        Collection<Integer> unmodifiableCollection = Collections.unmodifiableCollection(list);\n-\n-        assertSame(unmodifiableCollection.getClass(), UNMODIFIABLECOLLECTION);\n-        Collection<?> unmodifiableCollection2 = Collections.unmodifiableCollection(unmodifiableCollection);\n-\n-        assertSame(UNMODIFIABLECOLLECTION, unmodifiableCollection2.getClass());\n-        assertSame(unmodifiableCollection2, unmodifiableCollection);\n-\n+        Collection<?> list = List.of();\n+        testWrapping(list, Collections::unmodifiableCollection);\n@@ -148,1 +65,3 @@\n-        TreeSet<Integer> treeSet = new TreeSet<>();\n+        List<Set<?>> sets = List.of(new TreeSet<>(),\n+                                    Set.of(1, 2),\n+                                    Set.of(1,2,3,4,5,6));\n@@ -150,3 +69,3 @@\n-        \/\/Collections.UnmodifiableSet\n-        Set<Integer> unmodifiableSet = Collections.unmodifiableSet(treeSet);\n-        assertSame(unmodifiableSet.getClass(), UNMODIFIABLESET);\n+        for (Set<?> set : sets) {\n+            testWrapping(set, Collections::unmodifiableSet);\n+        }\n@@ -154,3 +73,1 @@\n-        Set<Integer> rewrappedUnmodifiableSet = Collections.unmodifiableSet(unmodifiableSet);\n-        assertSame(rewrappedUnmodifiableSet.getClass(), UNMODIFIABLESET);\n-        assertSame(rewrappedUnmodifiableSet, unmodifiableSet);\n+        TreeSet<?> treeSet = new TreeSet<>();\n@@ -159,7 +76,1 @@\n-        SortedSet<Integer> unmodifiableSortedSet = Collections.unmodifiableSortedSet(treeSet);\n-        assertSame(unmodifiableSortedSet.getClass(), UNMODIFIABLESORTEDSET);\n-\n-\n-        SortedSet<Integer> reWrappedUmodifiableSortedSet = Collections.unmodifiableSortedSet(unmodifiableSortedSet);\n-        assertSame(reWrappedUmodifiableSortedSet.getClass(), UNMODIFIABLESORTEDSET);\n-        assertSame(reWrappedUmodifiableSortedSet, unmodifiableSortedSet);\n+        testWrapping((SortedSet<?>) treeSet, Collections::unmodifiableSortedSet);\n@@ -168,20 +79,1 @@\n-        NavigableSet<Integer> unmodifiableNavigableSet = Collections.unmodifiableNavigableSet(treeSet);\n-        assertSame(unmodifiableNavigableSet.getClass(), UNMODIFIABLENAVIGABLESET);\n-\n-        NavigableSet<Integer> reWrappedUnmodifiableNavigableSet =\n-                Collections.unmodifiableNavigableSet(unmodifiableNavigableSet);\n-        assertSame(reWrappedUnmodifiableNavigableSet.getClass(), UNMODIFIABLENAVIGABLESET);\n-        assertSame(reWrappedUnmodifiableNavigableSet, unmodifiableNavigableSet);\n-\n-        \/\/SET12\n-        Set<Integer> set12 = Set.of(1,2);\n-        assertNotSame(set12.getClass(), UNMODIFIABLESET);\n-        Set<Integer> reWrappedSet12 = Collections.unmodifiableSet(set12);\n-        assertSame(reWrappedSet12.getClass(), UNMODIFIABLESET);\n-\n-        \/\/SETN\n-        Set<Integer> setN = Set.of(1,2,3,4,5,6);\n-        assertNotSame(setN.getClass(), UNMODIFIABLESET);\n-        Set<Integer> reWrappedSetN = Collections.unmodifiableSet(setN);\n-        assertSame(reWrappedSetN.getClass(), UNMODIFIABLESET);\n-\n+        testWrapping((NavigableSet<?>) treeSet, Collections::unmodifiableNavigableSet);\n@@ -192,4 +84,1 @@\n-        TreeMap<Integer,Integer> treeMap = new TreeMap<>();\n-        treeMap.put(1,1);\n-        treeMap.put(2,2);\n-        treeMap.put(3,3);\n+        TreeMap<?,?> treeMap = new TreeMap<>();\n@@ -197,4 +86,3 @@\n-        \/\/Collections.UnModifiableMap\n-        Map<Integer,Integer> unmodifiableMap = Collections.unmodifiableMap(treeMap);\n-        assertSame(unmodifiableMap.getClass(), UNMODIFIABLEMAP);\n-        assertNotSame(unmodifiableMap, treeMap);\n+        List<Map<?,?>> maps = List.of(treeMap,\n+                Map.of(1,1),\n+                Map.of(1, 1, 2, 2, 3, 3, 4, 4));\n@@ -202,2 +90,3 @@\n-        Map<Integer,Integer> reWrappedUnmodifiableMap = Collections.unmodifiableMap(unmodifiableMap);\n-        assertSame(reWrappedUnmodifiableMap, unmodifiableMap);\n+        for (Map<?,?> map : maps) {\n+            testWrapping(map, Collections::unmodifiableMap);\n+        }\n@@ -206,6 +95,1 @@\n-        SortedMap<Integer,Integer> unmodifiableSortedMap = Collections.unmodifiableSortedMap(treeMap);\n-        assertSame(unmodifiableSortedMap.getClass(), UNMODIFIABLESORTEDMAP);\n-        assertNotSame(unmodifiableSortedMap, treeMap);\n-\n-        Map<Integer,Integer> reWrappedUnmodifiableSortedMap = Collections.unmodifiableSortedMap(unmodifiableSortedMap);\n-        assertSame(reWrappedUnmodifiableSortedMap, unmodifiableSortedMap);\n+        testWrapping((SortedMap<?,?>) treeMap, Collections::unmodifiableSortedMap);\n@@ -214,23 +98,1 @@\n-        NavigableMap<Integer,Integer> unmodifiableNavigableMap = Collections.unmodifiableNavigableMap(treeMap);\n-        assertSame(unmodifiableNavigableMap.getClass(), UNMODIFIABLENAVIGABLEMAP);\n-\n-        NavigableMap<Integer,Integer> reWrappedUnmodifiableNavigableMap =\n-                Collections.unmodifiableNavigableMap(unmodifiableNavigableMap);\n-        assertSame(unmodifiableNavigableMap, reWrappedUnmodifiableNavigableMap);\n-\n-        \/\/ImmutableCollections.Map1\n-        Map<Integer,Integer> map1 = Map.of(1,1);\n-        assertNotSame(map1.getClass(), UNMODIFIABLEMAP);\n-\n-        Map<Integer,Integer> reWrappedMap1 = Collections.unmodifiableMap(map1);\n-        assertSame(reWrappedMap1.getClass(), UNMODIFIABLEMAP);\n-\n-        \/\/ImmutableCollections.MapN\n-        Map<Integer,Integer> mapN = Map.of(1,1, 2, 2, 3, 3, 4, 4);\n-        assertNotSame(mapN.getClass(), UNMODIFIABLEMAP);\n-\n-        Map<Integer,Integer> reWrappedMapN = Collections.unmodifiableMap(mapN);\n-        assertSame(reWrappedMapN.getClass(), UNMODIFIABLEMAP);\n-\n-\n-\n+        testWrapping((NavigableMap<?,?>) treeMap, Collections::unmodifiableNavigableMap);\n","filename":"test\/jdk\/java\/util\/Collections\/WrappedUnmodifiableCollections.java","additions":35,"deletions":173,"binary":false,"changes":208,"status":"modified"}]}