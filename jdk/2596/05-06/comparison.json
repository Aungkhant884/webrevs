{"files":[{"patch":"@@ -1131,3 +1131,1 @@\n-        if (s.getClass() == UnmodifiableSet.class ||\n-            s.getClass() == UnmodifiableSortedSet.class ||\n-            s.getClass() == UnmodifiableNavigableSet.class) {\n+        if (s.getClass() == UnmodifiableSet.class) {\n@@ -1170,2 +1168,1 @@\n-        if (s.getClass() == UnmodifiableSortedSet.class ||\n-            s.getClass() == UnmodifiableNavigableSet.class) {\n+        if (s.getClass() == UnmodifiableSortedSet.class) {\n@@ -1476,3 +1473,1 @@\n-        if (m.getClass() == UnmodifiableMap.class ||\n-            m.getClass() == UnmodifiableSortedMap.class ||\n-            m.getClass() == UnmodifiableNavigableMap.class) {\n+        if (m.getClass() == UnmodifiableMap.class) {\n@@ -1841,2 +1836,1 @@\n-        if (m.getClass() == UnmodifiableSortedMap.class ||\n-            m.getClass() == UnmodifiableNavigableMap.class) {\n+        if (m.getClass() == UnmodifiableSortedMap.class) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -46,6 +46,0 @@\n-    private static <T, E extends T> void testDoesNotWrap(T collection, Function<T,E> wrapper) {\n-        var collection2 = wrapper.apply(collection);\n-        assertSame(collection, collection2);\n-\n-    }\n-\n@@ -108,30 +102,0 @@\n-    public void testUnmodifiableSetSubclassesDontWrap() {\n-        TreeSet<?> treeSet = new TreeSet<>();\n-\n-        var unmodifiableSortedSet = Collections.unmodifiableSortedSet(treeSet);\n-        var unmodifiableNavigableSet = Collections.unmodifiableNavigableSet(treeSet);\n-\n-        \/\/UnmodifiableSet subclasses\n-        testDoesNotWrap((Set<?>) unmodifiableSortedSet, Collections::unmodifiableSet);\n-        testDoesNotWrap((Set<?>) unmodifiableNavigableSet, Collections::unmodifiableSet);\n-\n-        \/\/UnmodifiableSortedSet subclasses\n-        testDoesNotWrap((SortedSet<?>) unmodifiableNavigableSet, Collections::unmodifiableSortedSet);\n-\n-    }\n-\n-    public void testUnmodifiableMapSublcassesDontWrap() {\n-        TreeMap<?,?> treeMap = new TreeMap<>();\n-\n-        var unmodifiableSortedMap = Collections.unmodifiableSortedMap(treeMap);\n-        var unmodifiableNavigableMap = Collections.unmodifiableNavigableMap(treeMap);\n-\n-        \/\/UnmodifiableMap subclasses\n-        testDoesNotWrap((Map<?,?>) unmodifiableSortedMap, Collections::unmodifiableMap);\n-        testDoesNotWrap((Map<?,?>) unmodifiableNavigableMap, Collections::unmodifiableMap);\n-\n-        \/\/UnmodifiableSortedMap subclasses\n-        testDoesNotWrap((SortedMap<?,?>) unmodifiableNavigableMap, Collections::unmodifiableSortedMap);\n-\n-    }\n-\n","filename":"test\/jdk\/java\/util\/Collections\/WrappedUnmodifiableCollections.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"}]}