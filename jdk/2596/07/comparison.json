{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1011,0 +1011,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1016,0 +1017,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1017,0 +1019,3 @@\n+        if (c.getClass() == UnmodifiableCollection.class) {\n+            return (Collection<T>) c;\n+        }\n@@ -1119,0 +1124,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1123,0 +1129,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1124,0 +1131,4 @@\n+        \/\/ Not checking for subclasses because of heap pollution and information leakage.\n+        if (s.getClass() == UnmodifiableSet.class) {\n+            return (Set<T>) s;\n+        }\n@@ -1151,0 +1162,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1157,0 +1169,4 @@\n+        \/\/ Not checking for subclasses because of heap pollution and information leakage.\n+        if (s.getClass() == UnmodifiableSortedSet.class) {\n+            return s;\n+        }\n@@ -1200,0 +1216,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1207,0 +1224,3 @@\n+        if (s.getClass() == UnmodifiableNavigableSet.class) {\n+            return s;\n+        }\n@@ -1292,0 +1312,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1296,0 +1317,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1297,0 +1319,4 @@\n+        if (list.getClass() == UnmodifiableList.class || list.getClass() == UnmodifiableRandomAccessList.class) {\n+           return (List<T>) list;\n+        }\n+\n@@ -1441,0 +1467,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1446,0 +1473,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1447,0 +1475,4 @@\n+        \/\/ Not checking for subclasses because of heap pollution and information leakage.\n+        if (m.getClass() == UnmodifiableMap.class) {\n+            return (Map<K,V>) m;\n+        }\n@@ -1798,0 +1830,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1804,0 +1837,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1805,0 +1839,4 @@\n+        \/\/ Not checking for subclasses because of heap pollution and information leakage.\n+        if (m.getClass() == UnmodifiableSortedMap.class) {\n+            return (SortedMap<K,V>) m;\n+        }\n@@ -1843,0 +1881,1 @@\n+     * @implNote This method may return its argument if the argument is already unmodifiable.\n@@ -1850,0 +1889,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -1851,0 +1891,3 @@\n+        if (m.getClass() == UnmodifiableNavigableMap.class) {\n+            return (NavigableMap<K,V>) m;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6323374\n+ * @run testng WrappedUnmodifiableCollections\n+ *\/\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+\n+@Test\n+public class WrappedUnmodifiableCollections {\n+\n+    private static <T,E extends T> void testWrapping(T collection, Function<T,E> wrapper) {\n+        var collection1 = wrapper.apply(collection);\n+        var collection2 = wrapper.apply(collection1);\n+        assertNotSame(collection, collection2);\n+        assertSame(collection1, collection2);\n+    }\n+\n+    public void testUnmodifiableListsDontWrap() {\n+        List<List<?>> lists = List.of(List.of(), List.of(1,2,3), List.of(1),\n+                List.of(1,2,3,4,5,6),\n+                List.of(1,2,3).subList(0,1),\n+                new LinkedList<>(List.of(1,2,3)),\n+                new ArrayList<>(List.of(1,2,3)));\n+\n+        for(List<?> list : lists) {\n+            testWrapping(list, Collections::unmodifiableList);\n+        }\n+    }\n+\n+    public void testUnmodifiableCollectionsDontWrap() {\n+        Collection<?> list = List.of();\n+        testWrapping(list, Collections::unmodifiableCollection);\n+    }\n+\n+    public void testUnmodifiableSetsDontWrap() {\n+\n+        List<Set<?>> sets = List.of(new TreeSet<>(),\n+                                    Set.of(1, 2),\n+                                    Set.of(1,2,3,4,5,6));\n+\n+        for (Set<?> set : sets) {\n+            testWrapping(set, Collections::unmodifiableSet);\n+        }\n+\n+        TreeSet<?> treeSet = new TreeSet<>();\n+\n+        \/\/Collections.UnmodifiableSortedSet\n+        testWrapping((SortedSet<?>) treeSet, Collections::unmodifiableSortedSet);\n+\n+        \/\/Collections.UnmodifiableNavigableSet\n+        testWrapping((NavigableSet<?>) treeSet, Collections::unmodifiableNavigableSet);\n+\n+    }\n+\n+    public void testUnmodifiableMapsDontWrap() {\n+        TreeMap<?,?> treeMap = new TreeMap<>();\n+\n+        List<Map<?,?>> maps = List.of(treeMap,\n+                Map.of(1,1),\n+                Map.of(1, 1, 2, 2, 3, 3, 4, 4));\n+\n+        for (Map<?,?> map : maps) {\n+            testWrapping(map, Collections::unmodifiableMap);\n+        }\n+\n+        \/\/Collections.UnModifiableSortedMap\n+        testWrapping((SortedMap<?,?>) treeMap, Collections::unmodifiableSortedMap);\n+\n+        \/\/Collections.UnModifiableNavigableMap\n+        testWrapping((NavigableMap<?,?>) treeMap, Collections::unmodifiableNavigableMap);\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Collections\/WrappedUnmodifiableCollections.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}