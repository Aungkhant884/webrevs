{"files":[{"patch":"@@ -1931,0 +1931,14 @@\n+void Assembler::vcvtps2ph(Address dst, KRegister mask, XMMRegister src, int imm8, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/*uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_HVM, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.reset_is_clear_context();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(dst, 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int8((unsigned char) 0x1D);\n+  emit_operand(src, dst);\n+  emit_int8(imm8);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1163,0 +1163,1 @@\n+  void vcvtps2ph(Address dst, KRegister mask, XMMRegister src, int imm8, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1685,2 +1685,2 @@\n-      if (!VM_Version::supports_f16c() && !VM_Version::supports_evex() &&\n-          !VM_Version::supports_avx512vl()) {\n+      if (!VM_Version::supports_f16c() && !(VM_Version::supports_evex() &&\n+          VM_Version::supports_avx512vl())) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11312,0 +11312,1 @@\n+  ins_cost(125);\n@@ -11321,0 +11322,13 @@\n+instruct convF2HF_mem_reg(memory mem, regF src, kReg ktmp, rRegI rtmp) %{\n+  predicate(UseAVX > 2);\n+  effect(TEMP ktmp, TEMP rtmp);\n+  match(Set mem (StoreC mem (ConvF2HF src)));\n+  format %{ \"vcvtps2ph $mem,$src \\t using $ktmp and $rtmp as TEMP\" %}\n+  ins_encode %{\n+     __ movl($rtmp$$Register, 0x1);\n+     __ kmovdl($ktmp$$KRegister, $rtmp$$Register);\n+     __ vcvtps2ph($mem$$Address, $ktmp$$KRegister, $src$$XMMRegister, 0x04, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+  public static short f16, s;\n+  public static float f;\n@@ -52,0 +54,1 @@\n+      f16    = (short) r.nextInt();\n@@ -59,0 +62,1 @@\n+      f    = r.nextFloat();\n@@ -82,0 +86,12 @@\n+\n+  @Benchmark\n+  public float float16ToFloatMemory() {\n+      f = Float.float16ToFloat(f16);\n+      return f;\n+  }\n+\n+  @Benchmark\n+  public short floatToFloat16Memory() {\n+      s = Float.floatToFloat16(f);\n+      return s;\n+  }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Fp16ConversionBenchmark.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}