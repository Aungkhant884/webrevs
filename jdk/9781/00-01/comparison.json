{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/\/\n+\/\/ Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.java.math;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class Fp16ConversionBenchmark {\n+\n+  @Param({\"2048\"})\n+  public int TESTSIZE;\n+\n+  public short[] HFargV1;\n+  public short[] ResHF;\n+  public float[] FargV1;\n+  public float[] ResF;\n+\n+  public final short[] HFspecialVals = {\n+      0, (short)0xffff, (short)0xfc00, 0x7c00, 0x7bff, 0x400\n+  };\n+\n+  public final float[] FspecialVals = {\n+      0.0f, Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY,\n+      Float.MAX_VALUE, Float.MIN_VALUE\n+  };\n+\n+  @Setup(Level.Trial)\n+  public void BmSetup() {\n+      int i = 0;\n+      Random r = new Random(1024);\n+\n+      HFargV1 = new short[TESTSIZE];\n+      ResHF = new short[TESTSIZE];\n+\n+      for (; i < HFspecialVals.length; i++) {\n+          HFargV1[i] = HFspecialVals[i];\n+      }\n+\n+      for (; i < TESTSIZE; i++) {\n+          HFargV1[i] = Float.floatToFloat16(r.nextFloat());;\n+      }\n+\n+      FargV1 = new float[TESTSIZE];\n+      ResF = new float[TESTSIZE];\n+\n+      i = 0;\n+      for (; i < FspecialVals.length; i++) {\n+          FargV1[i] = FspecialVals[i];\n+      }\n+\n+      for (; i < TESTSIZE; i++) {\n+          FargV1[i] = Float.float16ToFloat((short)r.nextInt());\n+      }\n+  }\n+\n+  @Benchmark\n+  public void floatToFloat16() {\n+      for (int i = 0; i < TESTSIZE; i++) {\n+          ResHF[i] = Float.floatToFloat16(FargV1[i]);\n+      }\n+  }\n+\n+  @Benchmark\n+  public void float16ToFloat() {\n+      for (int i = 0; i < TESTSIZE; i++) {\n+          ResF[i] = Float.float16ToFloat(HFargV1[i]);\n+      }\n+  }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/Fp16ConversionBenchmark.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}