{"files":[{"patch":"@@ -61,4 +61,0 @@\n-  if (Settings::handle_deallocations() == false) {\n-    return;\n-  }\n-\n@@ -108,1 +104,0 @@\n-  assert(Settings::handle_deallocations(), \"Sanity\");\n@@ -235,1 +230,1 @@\n-  if (Settings::handle_deallocations() && _fbl != NULL && !_fbl->is_empty()) {\n+  if (_fbl != NULL && !_fbl->is_empty()) {\n@@ -366,4 +361,0 @@\n-  if (Settings::handle_deallocations() == false) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-DEBUG_ONLY(bool Settings::_handle_deallocations = true;)\n@@ -79,4 +78,2 @@\n-#ifdef ASSERT\n-  \/\/ Off for release builds, and by default for debug builds, but can be switched on manually to aid\n-  \/\/ error analysis.\n-  _use_allocation_guard = MetaspaceGuardAllocations;\n+  \/\/ Off for release builds, off by default - but switchable - for debug builds.\n+  DEBUG_ONLY(_use_allocation_guard = MetaspaceGuardAllocations;)\n@@ -84,4 +81,0 @@\n-  \/\/ Deallocations can be manually switched off to aid error analysis, since this removes one layer of complexity\n-  \/\/  from allocation.\n-  _handle_deallocations = MetaspaceHandleDeallocations;\n-#endif\n@@ -100,1 +93,0 @@\n-  st->print_cr(\" - handle_deallocations: %d.\", (int)handle_deallocations());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -72,8 +72,0 @@\n-  \/\/ This enables or disables premature deallocation of metaspace allocated blocks. Using\n-  \/\/  Metaspace::deallocate(), blocks can be returned prematurely (before the associated\n-  \/\/  Arena dies, e.g. after class unloading) and can be reused by the arena.\n-  \/\/  If disabled, those blocks will not be reused until the Arena dies.\n-  \/\/ Note that premature deallocation is rare under normal circumstances.\n-  \/\/ By default deallocation handling is enabled.\n-  DEBUG_ONLY(static bool _handle_deallocations;)\n-\n@@ -90,1 +82,0 @@\n-  static bool handle_deallocations()                          { return DEBUG_ONLY(_handle_deallocations) NOT_DEBUG(true); }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1442,3 +1442,0 @@\n-  develop(bool, MetaspaceHandleDeallocations, true,                         \\\n-          \"Switch off Metapace deallocation handling.\")                     \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -747,15 +747,4 @@\n-  if (Settings::handle_deallocations()) {\n-    \/\/ Test various sizes, including (important) the max. possible block size = 1 root chunk\n-    for (size_t blocksize = Metaspace::max_allocation_word_size(); blocksize >= 1; blocksize \/= 2) {\n-      size_t used1 = 0, used2 = 0, committed1 = 0, committed2 = 0;\n-      MetaWord* p = NULL, *p2 = NULL;\n-\n-      MetaspaceGtestContext context;\n-      MetaspaceArenaTestHelper helper(context, Metaspace::StandardMetaspaceType, false);\n-\n-      \/\/ First allocation\n-      helper.allocate_from_arena_with_tests_expect_success(&p, blocksize);\n-      if (!is_topmost) {\n-        \/\/ another one on top, size does not matter.\n-        helper.allocate_from_arena_with_tests_expect_success(0x10);\n-      }\n+  \/\/ Test various sizes, including (important) the max. possible block size = 1 root chunk\n+  for (size_t blocksize = Metaspace::max_allocation_word_size(); blocksize >= 1; blocksize \/= 2) {\n+    size_t used1 = 0, used2 = 0, committed1 = 0, committed2 = 0;\n+    MetaWord* p = NULL, *p2 = NULL;\n@@ -763,2 +752,2 @@\n-      \/\/ Measure\n-      helper.usage_numbers_with_test(&used1, &committed1, NULL);\n+    MetaspaceGtestContext context;\n+    MetaspaceArenaTestHelper helper(context, Metaspace::StandardMetaspaceType, false);\n@@ -766,7 +755,9 @@\n-      \/\/ Dealloc, alloc several times with the same size.\n-      for (int i = 0; i < 5; i ++) {\n-        helper.deallocate_with_tests(p, blocksize);\n-        helper.allocate_from_arena_with_tests_expect_success(&p2, blocksize);\n-        \/\/ We should get the same pointer back.\n-        EXPECT_EQ(p2, p);\n-      }\n+    \/\/ First allocation\n+    helper.allocate_from_arena_with_tests_expect_success(&p, blocksize);\n+    if (!is_topmost) {\n+      \/\/ another one on top, size does not matter.\n+      helper.allocate_from_arena_with_tests_expect_success(0x10);\n+    }\n+\n+    \/\/ Measure\n+    helper.usage_numbers_with_test(&used1, &committed1, NULL);\n@@ -774,4 +765,6 @@\n-      \/\/ Measure again\n-      helper.usage_numbers_with_test(&used2, &committed2, NULL);\n-      EXPECT_EQ(used2, used1);\n-      EXPECT_EQ(committed1, committed2);\n+    \/\/ Dealloc, alloc several times with the same size.\n+    for (int i = 0; i < 5; i ++) {\n+      helper.deallocate_with_tests(p, blocksize);\n+      helper.allocate_from_arena_with_tests_expect_success(&p2, blocksize);\n+      \/\/ We should get the same pointer back.\n+      EXPECT_EQ(p2, p);\n@@ -779,0 +772,5 @@\n+\n+    \/\/ Measure again\n+    helper.usage_numbers_with_test(&used2, &committed2, NULL);\n+    EXPECT_EQ(used2, used1);\n+    EXPECT_EQ(committed1, committed2);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":26,"deletions":28,"binary":false,"changes":54,"status":"modified"}]}