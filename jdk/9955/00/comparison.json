{"files":[{"patch":"@@ -566,5 +566,0 @@\n-  if (sig == BREAK_SIGNAL) {\n-    assert(!ReduceSignalUsage, \"Should not happen with -Xrs\/-XX:+ReduceSignalUsage\");\n-    return true; \/\/ ignore it\n-  }\n-\n@@ -691,0 +686,6 @@\n+\/\/ Signal handler for BREAK_SIGNAL during early initialization phase.\n+\/\/ Late initialization will overwrite BREAK_SIGNAL's handler to UserHandler.\n+static void DummySIGBREAKHandler(int sig, void *siginfo, void *context) {\n+  assert(!ReduceSignalUsage, \"Should not happen with -Xrs\/-XX:+ReduceSignalUsage\");\n+}\n+\n@@ -1228,1 +1229,1 @@\n-void set_signal_handler(int sig, bool do_check = true) {\n+void set_signal_handler(int sig) {\n@@ -1271,4 +1272,3 @@\n-  if (do_check) {\n-    vm_handlers.set(sig, &sigAct);\n-  }\n-  do_check_signal_periodically[sig] = do_check;\n+  vm_handlers.set(sig, &sigAct);\n+\n+  do_check_signal_periodically[sig] = true;\n@@ -1312,6 +1312,0 @@\n-  if (!ReduceSignalUsage) {\n-    \/\/ This is just for early initialization phase. Intercepting the signal here reduces the risk\n-    \/\/ that an attach client accidentally forces HotSpot to quit prematurely. We skip the periodic\n-    \/\/ check because late initialization will overwrite it to UserHandler.\n-    set_signal_handler(BREAK_SIGNAL, false);\n-  }\n@@ -1342,0 +1336,15 @@\n+  if (!ReduceSignalUsage) {\n+    \/\/ This is just for early initialization phase. Intercepting the signal here\n+    \/\/ reduces the risk that an attach client accidentally forces HotSpot to quit\n+    \/\/ prematurely. Late initialization will overwrite BREAK_SIGNAL's handler to\n+    \/\/ UserHandler.\n+    \/\/ Note that HotSpot does NOT support signal chaining for BREAK_SIGNAL.\n+    \/\/ We have to set it outside the window bounded by libjsig's\n+    \/\/ JVM_begin_signal_setting and JVM_end_signal_setting above, because the\n+    \/\/ window is intended for signals that support chaining. Otherwise libjsig\n+    \/\/ would prevent us from overwriting BREAK_SIGNAL's handler to UserHandler.\n+    \/\/ We also use os::signal() and a dummy handler to avoid special-casing\n+    \/\/ set_signal_handler() and JVM_HANDLE_XXX_SIGNAL().\n+    os::signal(BREAK_SIGNAL, CAST_FROM_FN_PTR(void*, DummySIGBREAKHandler));\n+  }\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=default\n+ * @bug 8292695\n+ * @summary Check that Ctrl-\\ or Ctrl-Break (on Windows) causes HotSpot VM to print a full thread dump.\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @run driver TestBreakSignalThreadDump\n+ *\/\n+\n+\/*\n+ * @test id=with_jsig\n+ * @bug 8292695\n+ * @summary Check that Ctrl-\\ causes HotSpot VM to print a full thread dump when signal chaining is used.\n+ * @requires os.family == \"linux\" | os.family == \"mac\"\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @run driver TestBreakSignalThreadDump load_libjsig\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import vm.share.ProcessUtils;\n+\n+public class TestBreakSignalThreadDump {\n+\n+    static class TestProcess {\n+        static {\n+            System.loadLibrary(\"ProcessUtils\");\n+        }\n+\n+        public static void main(String[] argv) throws Exception {\n+            ProcessUtils.sendCtrlBreak();\n+            System.out.println(\"Done!\");\n+        }\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        String main = \"TestBreakSignalThreadDump$TestProcess\";\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH, main);\n+\n+        if (argv.length > 0 && argv[0].equals(\"load_libjsig\")) {\n+            prepend_jsig_lib(pb.environment());\n+        }\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"Full thread dump \");\n+        output.shouldContain(\"java.lang.Thread.State: RUNNABLE\");\n+        output.shouldContain(\"Done!\");\n+    }\n+\n+    private static void prepend_jsig_lib(Map<String, String> env) {\n+        Path libjsig = Platform.jvmLibDir().resolve(\"libjsig.\" + Platform.sharedLibraryExt());\n+        if (!Files.exists(libjsig)) {\n+            throw new RuntimeException(\"File libjsig not found, path: \" + libjsig);\n+        }\n+        String env_var = Platform.isOSX() ? \"DYLD_INSERT_LIBRARIES\" : \"LD_PRELOAD\";\n+        env.put(env_var, libjsig.toString());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestBreakSignalThreadDump.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}