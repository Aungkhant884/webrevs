{"files":[{"patch":"@@ -345,1 +345,1 @@\n-\/\/ sun.misc.Signal support\n+\/\/ sun.misc.Signal and BREAK_SIGNAL support\n@@ -353,15 +353,0 @@\n-\n-  \/\/ Install BREAK_SIGNAL's handler in early initialization phase, in\n-  \/\/ order to reduce the risk that an attach client accidentally forces\n-  \/\/ HotSpot to quit prematurely.\n-  \/\/ The actual work for handling BREAK_SIGNAL is performed by the Signal\n-  \/\/ Dispatcher thread, which is created and started at a much later point,\n-  \/\/ see os::initialize_jdk_signal_support(). Any BREAK_SIGNAL received\n-  \/\/ before the Signal Dispatcher thread is started is queued up via the\n-  \/\/ pending_signals[BREAK_SIGNAL] counter, and will be processed by the\n-  \/\/ Signal Dispatcher thread in a delayed fashion.\n-  \/\/\n-  \/\/ Also note that HotSpot does NOT support signal chaining for BREAK_SIGNAL.\n-  \/\/ Applications that require a custom BREAK_SIGNAL handler should run with\n-  \/\/ -XX:+ReduceSignalUsage.\n-  os::signal(BREAK_SIGNAL, os::user_handler());\n@@ -1321,0 +1306,19 @@\n+  if (!ReduceSignalUsage) {\n+    \/\/ Install BREAK_SIGNAL's handler in early initialization phase, in\n+    \/\/ order to reduce the risk that an attach client accidentally forces\n+    \/\/ HotSpot to quit prematurely.\n+    \/\/ The actual work for handling BREAK_SIGNAL is performed by the Signal\n+    \/\/ Dispatcher thread, which is created and started at a much later point,\n+    \/\/ see os::initialize_jdk_signal_support(). Any BREAK_SIGNAL received\n+    \/\/ before the Signal Dispatcher thread is started is queued up via the\n+    \/\/ pending_signals[BREAK_SIGNAL] counter, and will be processed by the\n+    \/\/ Signal Dispatcher thread in a delayed fashion.\n+    \/\/\n+    \/\/ Also note that HotSpot does NOT support signal chaining for BREAK_SIGNAL.\n+    \/\/ Applications that require a custom BREAK_SIGNAL handler should run with\n+    \/\/ -XX:+ReduceSignalUsage. Otherwise if libjsig is used together with\n+    \/\/ -XX:+ReduceSignalUsage, libjsig will prevent changing BREAK_SIGNAL's\n+    \/\/ handler to a custom handler.\n+    os::signal(BREAK_SIGNAL, os::user_handler());\n+  }\n+\n@@ -1825,3 +1829,1 @@\n-  install_signal_handlers();\n-\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n+  \/\/ Initialize data for jdk.internal.misc.Signal and BREAK_SIGNAL's handler.\n@@ -1832,0 +1834,2 @@\n+  install_signal_handlers();\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2246,1 +2246,1 @@\n-  \/\/ Add a CTRL-BREAK handler.\n+  \/\/ Initialize sigbreakHandler.\n@@ -4333,1 +4333,2 @@\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n+  \/\/ Initialize data for jdk.internal.misc.Signal, and install CTRL-C and\n+  \/\/ CTRL-BREAK handlers.\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}