{"files":[{"patch":"@@ -208,23 +208,2 @@\n- * The list of System Properties that have corresponding PerfData\n- * string instrumentation created by retrieving the named property's\n- * value from System.getProperty() and unconditionally creating a\n- * PerfStringConstant object initialized to the retrieved value. This\n- * is not an exhaustive list of Java properties with corresponding string\n- * instrumentation as the create_system_property_instrumentation() method\n- * creates other property based instrumentation conditionally.\n- *\/\n-\n-\/\/ stable interface, supported counters in the JAVA_PROPERTY name space\n-static const char* stable_java_property_counters[] = {\n-  \"java.vm.specification.version\",\n-  \"java.vm.specification.vendor\",\n-  \"java.vm.info\",\n-  \"java.library.path\",\n-  \"java.class.path\",\n-  \"java.home\",\n-  NULL\n-};\n-\n-\/*\n- * Adds a constant counter of the given property. Asserts if the value for the\n- * system property differs from the value retrievable from System.getProperty\n+ * Adds a constant counter of the given property. Asserts the value does not\n+ * differ from the value retrievable from System.getProperty(name)\n@@ -243,2 +222,14 @@\n- * Method to create PerfData string instruments that contain the values\n- * of various system properties.\n+ * Adds a string constant of the given property. Retrieves the value via\n+ * Arguments::get_property() and asserts the value for the does not differ from\n+ * the value retrievable from System.getProperty()\n+ *\/\n+void StatSampler::add_property_constant(CounterNS name_space, const char* name, TRAPS) {\n+  add_property_constant(name_space, name, Arguments::get_property(name), CHECK);\n+}\n+\n+\/*\n+ * Method to create PerfStringConstants containing the values of various\n+ * system properties. Constants are created from information known to HotSpot,\n+ * but are initialized as-if getting the values from System.getProperty()\n+ * during bootstrap.\n+ *\n@@ -262,1 +253,1 @@\n-  add_property_constant(SUN_PROPERTY, \"sun.boot.library.path\", Arguments::get_property(\"sun.boot.library.path\"), CHECK);\n+  add_property_constant(SUN_PROPERTY, \"sun.boot.library.path\", CHECK);\n@@ -265,5 +256,6 @@\n-  for (int i = 0; stable_java_property_counters[i] != NULL; i++) {\n-    const char* property_name = stable_java_property_counters[i];\n-    const char* value = Arguments::get_property(property_name);\n-    add_property_constant(JAVA_PROPERTY, property_name, value, CHECK);\n-  }\n+  add_property_constant(JAVA_PROPERTY, \"java.vm.specification.version\", CHECK);\n+  add_property_constant(JAVA_PROPERTY, \"java.vm.specification.vendor\", CHECK);\n+  add_property_constant(JAVA_PROPERTY, \"java.vm.info\", CHECK);\n+  add_property_constant(JAVA_PROPERTY, \"java.library.path\", CHECK);\n+  add_property_constant(JAVA_PROPERTY, \"java.class.path\", CHECK);\n+  add_property_constant(JAVA_PROPERTY, \"java.home\", CHECK);\n","filename":"src\/hotspot\/share\/runtime\/statSampler.cpp","additions":23,"deletions":31,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    static void add_property_constant(CounterNS name_space, const char* name, TRAPS);\n","filename":"src\/hotspot\/share\/runtime\/statSampler.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}