{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,2 @@\n-    Map<Integer,String[]> filesMap = new HashMap<>();\n+    \/\/ Use a LinkedHashMap to keep original insertion ordering\n+    Map<Integer,String[]> filesMap = new LinkedHashMap<>();\n@@ -816,1 +817,1 @@\n-                    \/\/ dir name confilict\/duplicate could happen with -C option.\n+                    \/\/ dir name conflict\/duplicate could happen with -C option.\n@@ -825,1 +826,5 @@\n-                    expand(f, f.list(), cpaths, version);\n+                    String[] dirFiles = f.list();\n+                    \/\/ Ensure files list is sorted for reproducible jar content\n+                    if (dirFiles != null)\n+                        Arrays.sort(dirFiles);\n+                    expand(f, dirFiles, cpaths, version);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -770,0 +770,4 @@\n+            \/\/ Keep a sorted set of files to be processed, so that the jmod\n+            \/\/ content is reproducible as Files.walkFileTree order is not defined\n+            SortedMap<String, Path> filesToProcess  = new TreeMap<String, Path>();\n+\n@@ -785,3 +789,1 @@\n-                                try (InputStream in = Files.newInputStream(file)) {\n-                                    out.writeEntry(in, section, name);\n-                                }\n+                                filesToProcess.put(name, file);\n@@ -793,0 +795,9 @@\n+\n+            \/\/ Process files in sorted order for deterministic jmod content\n+            for (Map.Entry<String, Path> entry : filesToProcess.entrySet()) {\n+                String name = entry.getKey();\n+                Path   file = entry.getValue();\n+                try (InputStream in = Files.newInputStream(file)) {\n+                    out.writeEntry(in, section, name);\n+                }\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276764\n+ * @summary test that the jar content ordering is sorted\n+ * @library \/test\/lib\n+ * @modules jdk.jartool\n+ * @build jdk.test.lib.Platform\n+ *        jdk.test.lib.util.FileUtils\n+ * @run testng ContentOrder\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipException;\n+\n+import jdk.test.lib.util.FileUtils;\n+\n+public class ContentOrder {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jar tool not found\")\n+        );\n+\n+    private final String nl = System.lineSeparator();\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private final PrintStream out = new PrintStream(baos);\n+    private Runnable onCompletion;\n+\n+    @BeforeMethod\n+    public void reset() {\n+        onCompletion = null;\n+    }\n+\n+    @AfterMethod\n+    public void run() {\n+        if (onCompletion != null) {\n+            onCompletion.run();\n+        }\n+    }\n+\n+    @Test\n+    public void test1() throws IOException {\n+        mkdir(\"testjar\/Ctest1 testjar\/Btest2\/subdir1 testjar\/Atest3\");\n+        touch(\"testjar\/Ctest1\/testfile1 testjar\/Ctest1\/testfile2 testjar\/Ctest1\/testfile3\");\n+        touch(\"testjar\/Btest2\/subdir1\/testfileC testjar\/Btest2\/subdir1\/testfileB testjar\/Btest2\/subdir1\/testfileA\");\n+        touch(\"testjar\/Atest3\/fileZ testjar\/Atest3\/fileY testjar\/Atest3\/fileX\");\n+        jar(\"cf test.jar testjar\");\n+        jar(\"tf test.jar\");\n+        println();\n+        String output = \"META-INF\/\" + nl +\n+                \"META-INF\/MANIFEST.MF\" + nl +\n+                \"testjar\/\" + nl +\n+                \"testjar\/Atest3\/\" + nl +\n+                \"testjar\/Atest3\/fileX\" + nl +\n+                \"testjar\/Atest3\/fileY\" + nl +\n+                \"testjar\/Atest3\/fileZ\" + nl +\n+                \"testjar\/Btest2\/\" + nl +\n+                \"testjar\/Btest2\/subdir1\/\" + nl +\n+                \"testjar\/Btest2\/subdir1\/testfileA\" + nl +\n+                \"testjar\/Btest2\/subdir1\/testfileB\" + nl +\n+                \"testjar\/Btest2\/subdir1\/testfileC\" + nl +\n+                \"testjar\/Ctest1\/\" + nl +\n+                \"testjar\/Ctest1\/testfile1\" + nl +\n+                \"testjar\/Ctest1\/testfile2\" + nl +\n+                \"testjar\/Ctest1\/testfile3\" + nl;\n+        rm(\"test.jar testjar\");\n+        Assert.assertEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n+    private Stream<Path> mkpath(String... args) {\n+        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+    }\n+\n+    private void mkdir(String cmdline) {\n+        System.out.println(\"mkdir -p \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                Files.createDirectories(p);\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void touch(String cmdline) {\n+        System.out.println(\"touch \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                Files.createFile(p);\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void rm(String cmdline) {\n+        System.out.println(\"rm -rf \" + cmdline);\n+        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+            try {\n+                if (Files.isDirectory(p)) {\n+                    FileUtils.deleteFileTreeWithRetry(p);\n+                } else {\n+                    FileUtils.deleteFileIfExistsWithRetry(p);\n+                }\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void jar(String cmdline) throws IOException {\n+        System.out.println(\"jar \" + cmdline);\n+        baos.reset();\n+\n+        \/\/ the run method catches IOExceptions, we need to expose them\n+        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n+        PrintStream err = new PrintStream(baes);\n+        PrintStream saveErr = System.err;\n+        System.setErr(err);\n+        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n+        System.setErr(saveErr);\n+        if (rc != 0) {\n+            String s = baes.toString();\n+            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n+                throw new ZipException(s);\n+            }\n+            throw new IOException(s);\n+        }\n+    }\n+\n+    private void println() throws IOException {\n+        System.out.println(new String(baos.toByteArray()));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/ContentOrder.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8142968 8166568 8166286 8170618 8168149 8240910\n+ * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276764\n@@ -200,0 +200,11 @@\n+\n+                \/\/ JDK-8276764: Ensure the order is sorted for reproducible jmod content\n+                \/\/ module-info, followed by <sorted classes>\n+                int mod_info_i = r.output.indexOf(CLASSES_PREFIX + \"module-info.class\");\n+                int foo_cls_i  = r.output.indexOf(CLASSES_PREFIX + \"jdk\/test\/foo\/Foo.class\");\n+                int msg_i      = r.output.indexOf(CLASSES_PREFIX + \"jdk\/test\/foo\/internal\/Message.class\");\n+                int res_i      = r.output.indexOf(CLASSES_PREFIX + \"jdk\/test\/foo\/resources\/foo.properties\");\n+                System.out.println(\"jmod classes sort order check:\\n\"+r.output);\n+                assertTrue(mod_info_i < foo_cls_i);\n+                assertTrue(foo_cls_i < msg_i);\n+                assertTrue(msg_i < res_i);\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}