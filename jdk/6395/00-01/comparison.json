{"files":[{"patch":"@@ -130,1 +130,3 @@\n-    \/\/ Use a LinkedHashMap to keep original insertion ordering\n+    \/\/ base version is the first entry and then follow with the version given\n+    \/\/ from the --release option in the command-line order.\n+    \/\/ The value of each entry is the files given in the command-line order. \n@@ -776,1 +778,1 @@\n-        if (files == null)\n+        if (files == null) {\n@@ -778,0 +780,1 @@\n+        }\n@@ -781,1 +784,1 @@\n-            if (dir == null)\n+            if (dir == null) {\n@@ -783,1 +786,1 @@\n-            else\n+            } else {\n@@ -785,0 +788,1 @@\n+            }\n@@ -806,1 +810,1 @@\n-                    if (uflag)\n+                    if (uflag) {\n@@ -808,0 +812,1 @@\n+                    }\n@@ -809,1 +814,1 @@\n-                    if (uflag)\n+                    if (uflag) {\n@@ -811,0 +816,1 @@\n+                    }\n@@ -828,1 +834,1 @@\n-                    if (dirFiles != null)\n+                    if (dirFiles != null) {\n@@ -830,0 +836,1 @@\n+                    }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.io.File;\n@@ -79,4 +80,7 @@\n-        mkdir(\"testjar\/Ctest1 testjar\/Btest2\/subdir1 testjar\/Atest3\");\n-        touch(\"testjar\/Ctest1\/testfile1 testjar\/Ctest1\/testfile2 testjar\/Ctest1\/testfile3\");\n-        touch(\"testjar\/Btest2\/subdir1\/testfileC testjar\/Btest2\/subdir1\/testfileB testjar\/Btest2\/subdir1\/testfileA\");\n-        touch(\"testjar\/Atest3\/fileZ testjar\/Atest3\/fileY testjar\/Atest3\/fileX\");\n+        mkdir(\"testjar\/Ctest1\", \"testjar\/Btest2\/subdir1\", \"testjar\/Atest3\");\n+        touch(\"testjar\/Ctest1\/testfile1\", \"testjar\/Ctest1\/testfile2\", \"testjar\/Ctest1\/testfile3\");\n+        touch(\"testjar\/Btest2\/subdir1\/testfileC\", \"testjar\/Btest2\/subdir1\/testfileB\", \"testjar\/Btest2\/subdir1\/testfileA\");\n+        touch(\"testjar\/Atest3\/fileZ\", \"testjar\/Atest3\/fileY\", \"testjar\/Atest3\/fileX\");\n+\n+        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n+\n@@ -102,1 +106,0 @@\n-        rm(\"test.jar testjar\");\n@@ -110,3 +113,3 @@\n-    private void mkdir(String cmdline) {\n-        System.out.println(\"mkdir -p \" + cmdline);\n-        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+    private void mkdir(String... dirs) {\n+        System.out.println(\"mkdir -p \" + Arrays.toString(dirs));\n+        Arrays.stream(dirs).forEach(p -> {\n@@ -114,1 +117,1 @@\n-                Files.createDirectories(p);\n+                Files.createDirectories((new File(p)).toPath());\n@@ -121,3 +124,3 @@\n-    private void touch(String cmdline) {\n-        System.out.println(\"touch \" + cmdline);\n-        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+    private void touch(String... files) {\n+        System.out.println(\"touch \" + Arrays.toString(files));\n+        Arrays.stream(files).forEach(p -> {\n@@ -125,1 +128,1 @@\n-                Files.createFile(p);\n+                Files.createFile((new File(p)).toPath());\n@@ -132,3 +135,3 @@\n-    private void rm(String cmdline) {\n-        System.out.println(\"rm -rf \" + cmdline);\n-        mkpath(cmdline.split(\" +\")).forEach(p -> {\n+    private void rm(String... files) {\n+        System.out.println(\"rm -rf \" + Arrays.toString(files));\n+        Arrays.stream(files).forEach(p -> {\n@@ -136,2 +139,3 @@\n-                if (Files.isDirectory(p)) {\n-                    FileUtils.deleteFileTreeWithRetry(p);\n+                Path path = (new File(p)).toPath();\n+                if (Files.isDirectory(path)) {\n+                    FileUtils.deleteFileTreeWithRetry(path);\n@@ -139,1 +143,1 @@\n-                    FileUtils.deleteFileIfExistsWithRetry(p);\n+                    FileUtils.deleteFileIfExistsWithRetry(path);\n","filename":"test\/jdk\/tools\/jar\/ContentOrder.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276764\n+ * @summary perform a jar creation benchmark\n+ * @library \/test\/lib\n+ * @modules jdk.jartool\n+ * @build jdk.test.lib.Platform\n+ *        jdk.test.lib.util.FileUtils\n+ * @run testng CreateJarBenchmark \n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipException;\n+\n+import jdk.test.lib.util.FileUtils;\n+\n+public class CreateJarBenchmark {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jar tool not found\")\n+        );\n+\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private final PrintStream out = new PrintStream(baos);\n+    private Runnable onCompletion;\n+\n+    @BeforeMethod\n+    public void reset() {\n+        onCompletion = null;\n+    }\n+\n+    @AfterMethod\n+    public void run() {\n+        if (onCompletion != null) {\n+            onCompletion.run();\n+        }\n+    }\n+\n+    @Test\n+    public void testSingleDir() throws IOException {\n+        \/\/ Create a single testjar directory containing 10000 files\n+        mkdir(\"testjar\");\n+        for(int i = 0; i < 10000; i++) {\n+            createFile(\"testjar\/testfile\"+i);\n+        }\n+\n+        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n+\n+        \/\/ Perform 100x jar creations\n+        long start = System.currentTimeMillis(); \n+        for(int i = 0; i < 100; i++) {\n+            jar(\"cf test.jar testjar\");\n+            rm(\"test.jar\");\n+        }\n+        long finish = System.currentTimeMillis();\n+\n+        System.out.println(\"single directory jar creation benchmark = \" + (finish-start) + \"ms\");\n+    }\n+\n+    @Test\n+    public void testMultiDir() throws IOException {\n+        \/\/ Create a nested 10x20 set of sub-dirs each containing 50 files\n+        mkdir(\"testjar\");\n+        for(int i = 0; i < 10; i++) {\n+            mkdir(\"testjar\/testdir\" + i);\n+            for(int j = 0; j < 20; j++) {\n+                mkdir(\"testjar\/testdir\" + i + \"\/subdir\" + j);\n+                for(int k = 0; k < 50; k++) {\n+                    createFile(\"testjar\/testdir\" + i + \"\/subdir\" + j + \"\/testfile\" + k);\n+                }\n+            }\n+        }\n+\n+        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n+\n+        \/\/ Perform 100x jar creations\n+        long start = System.currentTimeMillis();\n+        for(int i = 0; i < 100; i++) {\n+            jar(\"cf test.jar testjar\");\n+            rm(\"test.jar\");\n+        }\n+        long finish = System.currentTimeMillis();\n+\n+        System.out.println(\"multi directory jar creation benchmark = \" + (finish-start) + \"ms\");\n+    }\n+\n+    private Stream<Path> mkpath(String... args) {\n+        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n+    }\n+\n+    private void mkdir(String... dirs) {\n+        Arrays.stream(dirs).forEach(p -> {\n+            try {\n+                Files.createDirectories((new File(p)).toPath());\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void createFile(String... files) {\n+        Arrays.stream(files).forEach(p -> {\n+            try {\n+                try (FileOutputStream fos = new FileOutputStream(p)) {\n+                    \/\/ Create file with fixed content\n+                    byte[] bytes = new byte[10000];\n+                    Arrays.fill(bytes, (byte)0x41);\n+                    fos.write(bytes);\n+                }\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void rm(String... files) {\n+        Arrays.stream(files).forEach(p -> {\n+            try {\n+                Path path = (new File(p)).toPath();\n+                if (Files.isDirectory(path)) {\n+                    FileUtils.deleteFileTreeWithRetry(path);\n+                } else {\n+                    FileUtils.deleteFileIfExistsWithRetry(path);\n+                }\n+            } catch (IOException x) {\n+                throw new UncheckedIOException(x);\n+            }\n+        });\n+    }\n+\n+    private void jar(String cmdline) throws IOException {\n+        System.out.println(\"jar \" + cmdline);\n+        baos.reset();\n+\n+        \/\/ the run method catches IOExceptions, we need to expose them\n+        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n+        PrintStream err = new PrintStream(baes);\n+        PrintStream saveErr = System.err;\n+        System.setErr(err);\n+        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n+        System.setErr(saveErr);\n+        if (rc != 0) {\n+            String s = baes.toString();\n+            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n+                throw new ZipException(s);\n+            }\n+            throw new IOException(s);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/CreateJarBenchmark.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}