{"files":[{"patch":"@@ -79,1 +79,1 @@\n-    public void test1() throws IOException {\n+    public void testSingleDir() throws IOException {\n@@ -89,1 +89,1 @@\n-        println();\n+        System.out.println(new String(baos.toByteArray()));\n@@ -109,0 +109,40 @@\n+    @Test\n+    public void testMultiDirWithReleases() throws IOException {\n+        mkdir(\"testjar\/foo\/classes\",\n+              \"testjar\/foo11\/classes\/Zclasses\",\n+              \"testjar\/foo11\/classes\/Yclasses\",\n+              \"testjar\/foo17\/classes\/Bclasses\",\n+              \"testjar\/foo17\/classes\/Aclasses\");\n+        touch(\"testjar\/foo\/classes\/testfile1\", \"testjar\/foo\/classes\/testfile2\");\n+        touch(\"testjar\/foo11\/classes\/Zclasses\/testfile1\", \"testjar\/foo11\/classes\/Zclasses\/testfile2\");\n+        touch(\"testjar\/foo11\/classes\/Yclasses\/testfileA\", \"testjar\/foo11\/classes\/Yclasses\/testfileB\");\n+        touch(\"testjar\/foo17\/classes\/Bclasses\/testfile1\", \"testjar\/foo17\/classes\/Bclasses\/testfile2\");\n+        touch(\"testjar\/foo17\/classes\/Aclasses\/testfileA\", \"testjar\/foo17\/classes\/Aclasses\/testfileB\");\n+\n+        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n+\n+        jar(\"cf test.jar -C testjar\/foo classes \" +\n+            \"--release 17 -C testjar\/foo17 classes\/Bclasses -C testjar\/foo17 classes\/Aclasses \" +\n+            \"--release 11 -C testjar\/foo11 classes\/Zclasses -C testjar\/foo11 classes\/Yclasses\");\n+        jar(\"tf test.jar\");\n+        System.out.println(new String(baos.toByteArray()));\n+        String output = \"META-INF\/\" + nl +\n+                \"META-INF\/MANIFEST.MF\" + nl +\n+                \"classes\/\" + nl +\n+                \"classes\/testfile1\" + nl +\n+                \"classes\/testfile2\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Bclasses\/\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Bclasses\/testfile1\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Bclasses\/testfile2\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Aclasses\/\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Aclasses\/testfileA\" + nl +\n+                \"META-INF\/versions\/17\/classes\/Aclasses\/testfileB\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Zclasses\/\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Zclasses\/testfile1\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Zclasses\/testfile2\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Yclasses\/\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Yclasses\/testfileA\" + nl +\n+                \"META-INF\/versions\/11\/classes\/Yclasses\/testfileB\" + nl;\n+        Assert.assertEquals(baos.toByteArray(), output.getBytes());\n+    }\n+\n@@ -170,4 +210,0 @@\n-\n-    private void println() throws IOException {\n-        System.out.println(new String(baos.toByteArray()));\n-    }\n","filename":"test\/jdk\/tools\/jar\/ContentOrder.java","additions":42,"deletions":6,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,189 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8276764\n- * @summary perform a jar creation benchmark\n- * @library \/test\/lib\n- * @modules jdk.jartool\n- * @build jdk.test.lib.Platform\n- *        jdk.test.lib.util.FileUtils\n- * @run testng CreateJarBenchmark\n- *\/\n-\n-import org.testng.Assert;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.UncheckedIOException;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.spi.ToolProvider;\n-import java.util.stream.Stream;\n-import java.util.zip.ZipException;\n-\n-import jdk.test.lib.util.FileUtils;\n-\n-public class CreateJarBenchmark {\n-    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n-        .orElseThrow(() ->\n-            new RuntimeException(\"jar tool not found\")\n-        );\n-\n-    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-    private final PrintStream out = new PrintStream(baos);\n-    private Runnable onCompletion;\n-\n-    @BeforeMethod\n-    public void reset() {\n-        onCompletion = null;\n-    }\n-\n-    @AfterMethod\n-    public void run() {\n-        if (onCompletion != null) {\n-            onCompletion.run();\n-        }\n-    }\n-\n-    @Test\n-    public void testSingleDir() throws IOException {\n-        \/\/ Create a single testjar directory containing 10000 files\n-        mkdir(\"testjar\");\n-        for(int i = 0; i < 10000; i++) {\n-            createFile(\"testjar\/testfile\"+i);\n-        }\n-\n-        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n-\n-        \/\/ Perform 100x jar creations\n-        long start = System.currentTimeMillis();\n-        for(int i = 0; i < 100; i++) {\n-            jar(\"cf test.jar testjar\");\n-            rm(\"test.jar\");\n-        }\n-        long finish = System.currentTimeMillis();\n-\n-        System.out.println(\"single directory jar creation benchmark = \" + (finish-start) + \"ms\");\n-    }\n-\n-    @Test\n-    public void testMultiDir() throws IOException {\n-        \/\/ Create a nested 10x20 set of sub-dirs each containing 50 files\n-        mkdir(\"testjar\");\n-        for(int i = 0; i < 10; i++) {\n-            mkdir(\"testjar\/testdir\" + i);\n-            for(int j = 0; j < 20; j++) {\n-                mkdir(\"testjar\/testdir\" + i + \"\/subdir\" + j);\n-                for(int k = 0; k < 50; k++) {\n-                    createFile(\"testjar\/testdir\" + i + \"\/subdir\" + j + \"\/testfile\" + k);\n-                }\n-            }\n-        }\n-\n-        onCompletion = () -> rm(\"test.jar\", \"testjar\");\n-\n-        \/\/ Perform 100x jar creations\n-        long start = System.currentTimeMillis();\n-        for(int i = 0; i < 100; i++) {\n-            jar(\"cf test.jar testjar\");\n-            rm(\"test.jar\");\n-        }\n-        long finish = System.currentTimeMillis();\n-\n-        System.out.println(\"multi directory jar creation benchmark = \" + (finish-start) + \"ms\");\n-    }\n-\n-    private Stream<Path> mkpath(String... args) {\n-        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n-    }\n-\n-    private void mkdir(String... dirs) {\n-        Arrays.stream(dirs).forEach(p -> {\n-            try {\n-                Files.createDirectories((new File(p)).toPath());\n-            } catch (IOException x) {\n-                throw new UncheckedIOException(x);\n-            }\n-        });\n-    }\n-\n-    private void createFile(String... files) {\n-        Arrays.stream(files).forEach(p -> {\n-            try {\n-                try (FileOutputStream fos = new FileOutputStream(p)) {\n-                    \/\/ Create file with fixed content\n-                    byte[] bytes = new byte[10000];\n-                    Arrays.fill(bytes, (byte)0x41);\n-                    fos.write(bytes);\n-                }\n-            } catch (IOException x) {\n-                throw new UncheckedIOException(x);\n-            }\n-        });\n-    }\n-\n-    private void rm(String... files) {\n-        Arrays.stream(files).forEach(p -> {\n-            try {\n-                Path path = (new File(p)).toPath();\n-                if (Files.isDirectory(path)) {\n-                    FileUtils.deleteFileTreeWithRetry(path);\n-                } else {\n-                    FileUtils.deleteFileIfExistsWithRetry(path);\n-                }\n-            } catch (IOException x) {\n-                throw new UncheckedIOException(x);\n-            }\n-        });\n-    }\n-\n-    private void jar(String cmdline) throws IOException {\n-        System.out.println(\"jar \" + cmdline);\n-        baos.reset();\n-\n-        \/\/ the run method catches IOExceptions, we need to expose them\n-        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n-        PrintStream err = new PrintStream(baes);\n-        PrintStream saveErr = System.err;\n-        System.setErr(err);\n-        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n-        System.setErr(saveErr);\n-        if (rc != 0) {\n-            String s = baes.toString();\n-            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n-                throw new ZipException(s);\n-            }\n-            throw new IOException(s);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/tools\/jar\/CreateJarBenchmark.java","additions":0,"deletions":189,"binary":false,"changes":189,"status":"deleted"}]}