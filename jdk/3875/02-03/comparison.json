{"files":[{"patch":"@@ -46,1 +46,0 @@\n-  assert(current_java_thread->thread_state() == _thread_in_vm, \"Must be in vm\");\n@@ -66,1 +65,0 @@\n-                                                     _waiters(0),\n@@ -315,1 +313,1 @@\n-  _rm_exit = true;\n+  _rm_exited = true;\n@@ -384,1 +382,0 @@\n-    _waiters++;\n@@ -386,1 +383,0 @@\n-    _waiters--;\n@@ -395,1 +391,0 @@\n-          _recursions = save;\n@@ -401,0 +396,1 @@\n+      _recursions = save;\n@@ -407,1 +403,0 @@\n-    _waiters++;\n@@ -409,2 +404,0 @@\n-    _waiters--;\n-    _recursions = save;\n@@ -412,0 +405,1 @@\n+    _recursions = save;\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-\/\/ request\/\/ and reading the interrupt flag must be done from VM state\n+\/\/ request and reading the interrupt flag must be done from VM state\n@@ -77,1 +77,0 @@\n-  volatile jint _waiters;       \/\/ number of waiting threads\n@@ -96,1 +95,1 @@\n-    bool _rm_exit;\n+    bool _rm_exited;\n@@ -98,1 +97,1 @@\n-    ExitOnSuspend(JvmtiRawMonitor* rm) : _rm(rm), _rm_exit(false) {}\n+    ExitOnSuspend(JvmtiRawMonitor* rm) : _rm(rm), _rm_exited(false) {}\n@@ -100,1 +99,1 @@\n-    bool monitor_exited() { return _rm_exit; }\n+    bool monitor_exited() { return _rm_exited; }\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -206,1 +206,5 @@\n-    assert(!_thread->has_last_Java_frame() || _thread->frame_anchor()->walkable(), \"Unwalkable stack in vm->native transition\");\n+    \/\/ We cannot assert !_thread->owns_locks() since we have valid cases where\n+    \/\/ we call known native code using this wrapper holding locks.\n+    _thread->check_possible_safepoint();\n+    \/\/ Once we are in native vm expects stack to be walkable\n+    _thread->frame_anchor()->make_walkable(_thread);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-    _om_op_done = true;\n+    _exited = true;\n@@ -326,1 +326,0 @@\n-    _om_op_done = true;\n@@ -435,1 +434,1 @@\n-      if (!eos.om_op_done()) {\n+      if (!eos.exited()) {\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-    bool _om_op_done;\n+    bool _exited;\n@@ -311,1 +311,1 @@\n-    ExitOnSuspend(ObjectMonitor* om) : _om(om), _om_op_done(false) {}\n+    ExitOnSuspend(ObjectMonitor* om) : _om(om), _exited(false) {}\n@@ -313,1 +313,1 @@\n-    bool om_op_done() { return _om_op_done; }\n+    bool exited() { return _exited; }\n@@ -315,1 +315,3 @@\n-  class ClearSuccOnSuspend : public ExitOnSuspend {\n+  class ClearSuccOnSuspend {\n+   protected:\n+    ObjectMonitor* _om;\n@@ -317,1 +319,1 @@\n-    ClearSuccOnSuspend(ObjectMonitor* om) : ExitOnSuspend(om) {}\n+    ClearSuccOnSuspend(ObjectMonitor* om) : _om(om)  {}\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}