{"files":[{"patch":"@@ -31,0 +31,1 @@\n+    private boolean swapenabled;\n@@ -44,1 +45,8 @@\n-}\n\\ No newline at end of file\n+    boolean isSwapEnabled() {\n+        return swapenabled;\n+    }\n+\n+    void setSwapEnabled(boolean swapenabled) {\n+        this.swapenabled = swapenabled;\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1MemorySubSystemController.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -202,0 +202,2 @@\n+                boolean isSwapEnabled = getSwapEnabled(memorySubSystem);\n+                memorySubSystem.setSwapEnabled(isSwapEnabled);\n@@ -211,0 +213,6 @@\n+    private static boolean getSwapEnabled(CgroupV1MemorySubSystemController controller) {\n+         long retval = getLongValue(controller, \"memory.memsw.limit_in_bytes\");\n+         return retval > 0;\n+     }\n+\n+\n@@ -441,0 +449,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryFailCount();\n+        }\n@@ -445,0 +456,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryLimit();\n+        }\n@@ -460,0 +474,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryMaxUsage();\n+        }\n@@ -464,0 +481,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryUsage();\n+        }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-containers\/docker\/TestMemoryAwareness.java 8250984 linux-5.4.0-1019-oracle\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    static final String good_value = \"(\\\\d+|-1|Unlimited)\";\n+    static final String good_value = \"(\\\\d+|-1|-2|Unlimited)\";\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/PlainRead.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,0 @@\n-           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreePhysicalMemorySize: [1-9][0-9]+\")\n@@ -159,3 +158,6 @@\n-           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: [1-9][0-9]+\");\n-        \/\/ in case of warnings like : \"Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\"\n-        \/\/ the getTotalSwapSpaceSize returns the system values as the container setup isn't supported in that case.\n+           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreePhysicalMemorySize: [1-9][0-9]+\");\n+\n+        \/\/ in case of warnings like : \"Your kernel does not support swap limit capabilities\n+        \/\/ or the cgroup is not mounted. Memory limited without swap.\"\n+        \/\/ the getTotalSwapSpaceSize does not return the expected result and\n+        \/\/ getFreeSwapSpaceSize returns 0\n@@ -165,3 +167,7 @@\n-            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: [1-9][0-9]+\");\n-            out.shouldContain(\"Metrics.getMemoryLimit() == \" + expectedMemory);\n-            out.shouldContain(\"Metrics.getMemoryAndSwapLimit() == -1\");\n+            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: -?([0-9]+)\");\n+        }\n+\n+        try {\n+            out.shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: [1-9][0-9]+\");\n+        } catch(RuntimeException ex) {\n+            out.shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: 0\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -910,2 +910,0 @@\n-jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java 8250984 linux-5.4.0-1019-oracle\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,12 +69,22 @@\n-        long count = Metrics.systemMetrics().getMemoryFailCount();\n-\n-        \/\/ Allocate 512M of data\n-        byte[][] bytes = new byte[64][];\n-        boolean atLeastOneAllocationWorked = false;\n-        for (int i = 0; i < 64; i++) {\n-            try {\n-                bytes[i] = new byte[8 * 1024 * 1024];\n-                atLeastOneAllocationWorked = true;\n-                \/\/ Break out as soon as we see an increase in failcount\n-                \/\/ to avoid getting killed by the OOM killer.\n-                if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+        long memAndSwapLimit = Metrics.systemMetrics().getMemoryAndSwapLimit();\n+        long memLimit = Metrics.systemMetrics().getMemoryLimit();\n+\n+        \/\/ We need swap to execute this test or will SEGV\n+        if (memAndSwapLimit <= memLimit) {\n+            System.out.println(\"No swap memory limits, test case skipped\");\n+        } else {\n+            long count = Metrics.systemMetrics().getMemoryFailCount();\n+\n+            \/\/ Allocate 512M of data\n+            byte[][] bytes = new byte[64][];\n+            boolean atLeastOneAllocationWorked = false;\n+            for (int i = 0; i < 64; i++) {\n+                try {\n+                    bytes[i] = new byte[8 * 1024 * 1024];\n+                    atLeastOneAllocationWorked = true;\n+                    \/\/ Break out as soon as we see an increase in failcount\n+                    \/\/ to avoid getting killed by the OOM killer.\n+                    if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+                        break;\n+                    }\n+                } catch (Error e) { \/\/ OOM error\n@@ -83,2 +93,0 @@\n-            } catch (Error e) { \/\/ OOM error\n-                break;\n@@ -86,11 +94,11 @@\n-        }\n-        if (!atLeastOneAllocationWorked) {\n-            System.out.println(\"Allocation failed immediately. Ignoring test!\");\n-            return;\n-        }\n-        \/\/ Be sure bytes allocations don't get optimized out\n-        System.out.println(\"DEBUG: Bytes allocation length 1: \" + bytes[0].length);\n-        if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n-            throw new RuntimeException(\"Memory fail count : new : [\"\n-                    + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n-                    + \", old : [\" + count + \"]\");\n+            if (!atLeastOneAllocationWorked) {\n+                System.out.println(\"Allocation failed immediately. Ignoring test!\");\n+                return;\n+            }\n+            \/\/ Be sure bytes allocations don't get optimized out\n+            System.out.println(\"DEBUG: Bytes allocation length 1: \" + bytes[0].length);\n+            if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n+                throw new RuntimeException(\"Memory fail count : new : [\"\n+                        + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n+                        + \", old : [\" + count + \"]\");\n+            }\n@@ -134,0 +142,1 @@\n+        long actualMemAndSwap = Metrics.systemMetrics().getMemoryAndSwapLimit();\n@@ -136,2 +145,3 @@\n-                || expectedMemAndSwap != Metrics.systemMetrics().getMemoryAndSwapLimit()) {\n-            System.err.println(\"Memory and swap limit not equal, expected : [\"\n+                || (expectedMemAndSwap != actualMemAndSwap\n+                && expectedMem != actualMemAndSwap)) {\n+            throw new RuntimeException(\"Memory and swap limit not equal, expected : [\"\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/MetricsMemoryTester.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -296,5 +296,0 @@\n-        oldVal = metrics.getMemoryAndSwapFailCount();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.failcnt\");\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.memsw.failcnt\", oldVal, newVal);\n-        }\n@@ -302,6 +297,7 @@\n-        oldVal = metrics.getMemoryAndSwapLimit();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.limit_in_bytes\");\n-        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.memsw.limit_in_bytes\", oldVal, newVal);\n-        }\n+        \/\/ Skip swap tests if no swap is configured.\n+        if (metrics.getMemoryAndSwapLimit() > metrics.getMemoryLimit()) {\n+            oldVal = metrics.getMemoryAndSwapFailCount();\n+            newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.failcnt\");\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(Controller.MEMORY, \"memory.memsw.failcnt\", oldVal, newVal);\n+            }\n@@ -309,5 +305,6 @@\n-        oldVal = metrics.getMemoryAndSwapMaxUsage();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.max_usage_in_bytes\");\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.memsw.max_usage_in_bytes\", oldVal, newVal);\n-        }\n+            oldVal = metrics.getMemoryAndSwapLimit();\n+            newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.limit_in_bytes\");\n+            newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(Controller.MEMORY, \"memory.memsw.limit_in_bytes\", oldVal, newVal);\n+            }\n@@ -315,4 +312,11 @@\n-        oldVal = metrics.getMemoryAndSwapUsage();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.usage_in_bytes\");\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.memsw.usage_in_bytes\", oldVal, newVal);\n+            oldVal = metrics.getMemoryAndSwapMaxUsage();\n+            newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.max_usage_in_bytes\");\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(Controller.MEMORY, \"memory.memsw.max_usage_in_bytes\", oldVal, newVal);\n+            }\n+\n+            oldVal = metrics.getMemoryAndSwapUsage();\n+            newVal = getLongValueFromFile(Controller.MEMORY, \"memory.memsw.usage_in_bytes\");\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(Controller.MEMORY, \"memory.memsw.usage_in_bytes\", oldVal, newVal);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV1.java","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"}]}