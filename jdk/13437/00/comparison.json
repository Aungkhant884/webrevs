{"files":[{"patch":"@@ -45,5 +45,1 @@\n- * directly or by try-with-resources. Subclasses are responsible for the cleanup\n- * of resources acquired by the subclass.\n- * Subclasses that override {@link #finalize} in order to perform cleanup\n- * should be modified to use alternative cleanup mechanisms such as\n- * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n+ * directly or by try-with-resources.\n@@ -52,5 +48,3 @@\n- * If this FileInputStream has been subclassed and the {@link #close}\n- * method has been overridden, the {@link #close} method will be\n- * called when the FileInputStream is unreachable.\n- * Otherwise, it is implementation specific how the resource cleanup described in\n- * {@link #close} is performed.\n+ * Subclasses are responsible for the cleanup of resources acquired by the subclass.\n+ * Subclasses requiring that resource cleanup take place after a stream becomes\n+ * unreachable should use the {@link java.lang.ref.Cleaner} mechanism.\n@@ -497,4 +491,4 @@\n-     * Do not depend on finalization to invoke {@code close};\n-     * finalization is not reliable and is deprecated.\n-     * If cleanup of native resources is needed, other mechanisms such as\n-     * {@linkplain java.lang.ref.Cleaner} should be used.\n+     *\n+     * @implSpec\n+     * Subclasses requiring that resource cleanup take place after a stream becomes\n+     * unreachable should use the {@link java.lang.ref.Cleaner} mechanism.\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -50,5 +50,1 @@\n- * directly or by try-with-resources. Subclasses are responsible for the cleanup\n- * of resources acquired by the subclass.\n- * Subclasses that override {@link #finalize} in order to perform cleanup\n- * should be modified to use alternative cleanup mechanisms such as\n- * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n+ * directly or by try-with-resources.\n@@ -57,5 +53,3 @@\n- * If this FileOutputStream has been subclassed and the {@link #close}\n- * method has been overridden, the {@link #close} method will be\n- * called when the FileInputStream is unreachable.\n- * Otherwise, it is implementation specific how the resource cleanup described in\n- * {@link #close} is performed.\n+ * Subclasses are responsible for the cleanup of resources acquired by the subclass.\n+ * Subclasses requiring that resource cleanup take place after a stream becomes\n+ * unreachable should use the {@link java.lang.ref.Cleaner} mechanism.\n@@ -390,4 +384,4 @@\n-     * Do not depend on finalization to invoke {@code close};\n-     * finalization is not reliable and is deprecated.\n-     * If cleanup of native resources is needed, other mechanisms such as\n-     * {@linkplain java.lang.ref.Cleaner} should be used.\n+     *\n+     * @implSpec\n+     * Subclasses requiring that resource cleanup take place after a stream becomes\n+     * unreachable should use the {@link java.lang.ref.Cleaner} mechanism.\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"}]}