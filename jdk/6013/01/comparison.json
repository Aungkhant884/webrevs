{"files":[{"patch":"@@ -2694,1 +2694,1 @@\n-void G1CollectedHeap::verify_region_attr_remset_update() {\n+void G1CollectedHeap::verify_region_attr_remset_is_tracked() {\n@@ -2699,2 +2699,2 @@\n-      bool const needs_remset_update = g1h->region_attr(r->bottom()).needs_remset_update();\n-      assert(r->rem_set()->is_tracked() == needs_remset_update,\n+      bool const remset_is_tracked = g1h->region_attr(r->bottom()).remset_is_tracked();\n+      assert(r->rem_set()->is_tracked() == remset_is_tracked,\n@@ -2702,1 +2702,1 @@\n-             r->hrm_index(), BOOL_TO_STR(r->rem_set()->is_tracked()), BOOL_TO_STR(needs_remset_update));\n+             r->hrm_index(), BOOL_TO_STR(r->rem_set()->is_tracked()), BOOL_TO_STR(remset_is_tracked));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-  void verify_region_attr_remset_update() PRODUCT_RETURN;\n+  void verify_region_attr_remset_is_tracked() PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-  _region_attr.set_has_remset(r->hrm_index(), r->rem_set()->is_tracked());\n+  _region_attr.set_remset_is_tracked(r->hrm_index(), r->rem_set()->is_tracked());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-  _g1h->verify_region_attr_remset_update();\n+  _g1h->verify_region_attr_remset_is_tracked();\n@@ -533,1 +533,1 @@\n-  _g1h->verify_region_attr_remset_update();\n+  _g1h->verify_region_attr_remset_is_tracked();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  \/\/ _needs_remset_update_t is essentially bool, but we need precise control\n+  \/\/ remset_is_tracked_t is essentially bool, but we need precise control\n@@ -44,1 +44,1 @@\n-  typedef uint8_t needs_remset_update_t;\n+  typedef uint8_t remset_is_tracked_t;\n@@ -47,1 +47,1 @@\n-  needs_remset_update_t _needs_remset_update;\n+  remset_is_tracked_t _remset_is_tracked;\n@@ -68,2 +68,2 @@\n-  G1HeapRegionAttr(region_type_t type = NotInCSet, bool needs_remset_update = false) :\n-    _needs_remset_update(needs_remset_update), _type(type) {\n+  G1HeapRegionAttr(region_type_t type = NotInCSet, bool remset_is_tracked = false) :\n+    _remset_is_tracked(remset_is_tracked), _type(type) {\n@@ -88,1 +88,1 @@\n-  bool needs_remset_update() const     { return _needs_remset_update != 0; }\n+  bool remset_is_tracked() const     { return _remset_is_tracked != 0; }\n@@ -96,1 +96,1 @@\n-  void set_has_remset(bool value)      { _needs_remset_update = value ? 1 : 0; }\n+  void set_remset_is_tracked(bool value)      { _remset_is_tracked = value ? 1 : 0; }\n@@ -129,1 +129,1 @@\n-  void set_optional(uintptr_t index, bool needs_remset_update) {\n+  void set_optional(uintptr_t index, bool remset_is_tracked) {\n@@ -132,1 +132,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Optional, needs_remset_update));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Optional, remset_is_tracked));\n@@ -141,1 +141,1 @@\n-  void set_humongous(uintptr_t index, bool needs_remset_update) {\n+  void set_humongous(uintptr_t index, bool remset_is_tracked) {\n@@ -144,1 +144,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Humongous, needs_remset_update));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Humongous, remset_is_tracked));\n@@ -151,2 +151,2 @@\n-  void set_has_remset(uintptr_t index, bool needs_remset_update) {\n-    get_ref_by_index(index)->set_has_remset(needs_remset_update);\n+  void set_remset_is_tracked(uintptr_t index, bool remset_is_tracked) {\n+    get_ref_by_index(index)->set_remset_is_tracked(remset_is_tracked);\n@@ -161,1 +161,1 @@\n-  void set_in_old(uintptr_t index, bool needs_remset_update) {\n+  void set_in_old(uintptr_t index, bool remset_is_tracked) {\n@@ -164,1 +164,1 @@\n-    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, needs_remset_update));\n+    set_by_index(index, G1HeapRegionAttr(G1HeapRegionAttr::Old, remset_is_tracked));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  assert(region_attr.needs_remset_update() == hr_obj->rem_set()->is_tracked(),\n+  assert(region_attr.remset_is_tracked() == hr_obj->rem_set()->is_tracked(),\n@@ -133,1 +133,1 @@\n-         BOOL_TO_STR(region_attr.needs_remset_update()),\n+         BOOL_TO_STR(region_attr.remset_is_tracked()),\n@@ -137,1 +137,1 @@\n-  if (!region_attr.needs_remset_update()) {\n+  if (!region_attr.remset_is_tracked()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1292,1 +1292,1 @@\n-      assert(region_attr.needs_remset_update(), \"must be\");\n+      assert(region_attr.remset_is_tracked(), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}