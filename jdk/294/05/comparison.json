{"files":[{"patch":"@@ -1915,2 +1915,1 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n-                                  const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n@@ -1918,1 +1917,1 @@\n-  if (!pd_commit_memory(addr, size, exec)) {\n+  if (!pd_commit_memory(addr, size)) {\n@@ -1920,1 +1919,1 @@\n-    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, exec, errno);)\n+    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, false, errno);)\n@@ -1925,1 +1924,1 @@\n-bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n+bool os::pd_commit_memory(char* addr, size_t size) {\n@@ -1950,2 +1949,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint, bool exec) {\n-  return pd_commit_memory(addr, size, exec);\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n+  return pd_commit_memory(addr, size);\n@@ -1955,1 +1954,1 @@\n-                                  size_t alignment_hint, bool exec,\n+                                  size_t alignment_hint,\n@@ -1958,1 +1957,1 @@\n-  pd_commit_memory_or_exit(addr, size, exec, mesg);\n+  pd_commit_memory_or_exit(addr, size, mesg);\n@@ -1981,0 +1980,16 @@\n+char* os::pd_reserve_executable_memory(size_t bytes) {\n+  return pd_reserve_memory(bytes);\n+}\n+\n+bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n+  return pd_commit_memory(addr, size, alignment_hint);\n+}\n+\n+bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n+  return pd_uncommit_memory(addr, size);\n+}\n+\n+bool os::pd_release_executable_memory(char* addr, size_t size) {\n+  return pd_release_memory(addr, size);\n+}\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size)) {\n","filename":"src\/hotspot\/os\/aix\/perfMemory_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1679,1 +1679,1 @@\n-bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n+static bool pd_commit_memory_impl(char* addr, size_t size, bool exec) {\n@@ -1702,2 +1702,5 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                          bool exec) {\n+bool os::pd_commit_memory(char* addr, size_t size) {\n+  return pd_commit_memory_impl(addr, size, false);\n+}\n+\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n@@ -1705,1 +1708,1 @@\n-  return pd_commit_memory(addr, size, exec);\n+  return pd_commit_memory(addr, size);\n@@ -1708,2 +1711,1 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n-                                  const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n@@ -1711,1 +1713,1 @@\n-  if (!pd_commit_memory(addr, size, exec)) {\n+  if (!pd_commit_memory(addr, size)) {\n@@ -1713,1 +1715,1 @@\n-    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, exec, errno);)\n+    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, false, errno);)\n@@ -1719,1 +1721,1 @@\n-                                  size_t alignment_hint, bool exec,\n+                                  size_t alignment_hint,\n@@ -1722,1 +1724,1 @@\n-  pd_commit_memory_or_exit(addr, size, exec, mesg);\n+  pd_commit_memory_or_exit(addr, size, mesg);\n@@ -1732,0 +1734,33 @@\n+char* os::pd_reserve_executable_memory(size_t bytes) {\n+#ifdef __APPLE__\n+  const int flags = MAP_JIT | MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  char* addr = (char*)::mmap(NULL, bytes, PROT_NONE, flags, -1, 0);\n+  return addr == MAP_FAILED ? NULL : addr;\n+#else\n+  return pd_reserve_memory(bytes);\n+#endif\n+}\n+\n+bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n+  \/\/ alignment_hint is ignored on this OS\n+#ifdef __APPLE__\n+  return 0 == ::mprotect(addr, size, PROT_READ | PROT_WRITE | PROT_EXEC);\n+#else\n+  return pd_commit_memory_impl(addr, size, true);\n+#endif\n+}\n+\n+bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n+#ifdef __APPLE__\n+  \/\/ advise to free pages, but failure is not fatal\n+  (void)::madvise(addr, size, MADV_FREE);\n+  return 0 == ::mprotect(addr, size, PROT_NONE);\n+#else\n+  return pd_uncommit_memory(addr, size);\n+#endif\n+}\n+\n+bool os::pd_release_executable_memory(char* addr, size_t size) {\n+  return pd_release_memory(addr, size);\n+}\n+\n@@ -1782,1 +1817,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size)) {\n","filename":"src\/hotspot\/os\/bsd\/perfMemory_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2836,2 +2836,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n-  return os::Linux::commit_memory_impl(addr, size, exec) == 0;\n+bool os::pd_commit_memory(char* addr, size_t size) {\n+  return os::Linux::commit_memory_impl(addr, size, false) == 0;\n@@ -2840,2 +2840,1 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n-                                  const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n@@ -2843,1 +2842,1 @@\n-  int err = os::Linux::commit_memory_impl(addr, size, exec);\n+  int err = os::Linux::commit_memory_impl(addr, size, false);\n@@ -2846,1 +2845,1 @@\n-    warn_fail_commit_memory(addr, size, exec, err);\n+    warn_fail_commit_memory(addr, size, false, err);\n@@ -2879,3 +2878,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                          bool exec) {\n-  return os::Linux::commit_memory_impl(addr, size, alignment_hint, exec) == 0;\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n+  return os::Linux::commit_memory_impl(addr, size, alignment_hint, false) == 0;\n@@ -2884,2 +2882,1 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size,\n-                                  size_t alignment_hint, bool exec,\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n@@ -2888,1 +2885,1 @@\n-  int err = os::Linux::commit_memory_impl(addr, size, alignment_hint, exec);\n+  int err = os::Linux::commit_memory_impl(addr, size, alignment_hint, false);\n@@ -2891,1 +2888,1 @@\n-    warn_fail_commit_memory(addr, size, alignment_hint, exec, err);\n+    warn_fail_commit_memory(addr, size, alignment_hint, false, err);\n@@ -2911,1 +2908,1 @@\n-    commit_memory(addr, bytes, alignment_hint, !ExecMem);\n+    commit_memory(addr, bytes, alignment_hint);\n@@ -2915,0 +2912,17 @@\n+char* os::pd_reserve_executable_memory(size_t bytes) {\n+  return pd_reserve_memory(bytes);\n+}\n+\n+bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n+  return os::Linux::commit_memory_impl(addr, size, alignment_hint, true) == 0;\n+}\n+\n+bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n+  return pd_uncommit_memory(addr, size);\n+}\n+\n+bool os::pd_release_executable_memory(char* addr, size_t size) {\n+  return pd_release_memory(addr, size);\n+}\n+\n+\n@@ -3444,1 +3458,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size)) {\n","filename":"src\/hotspot\/os\/linux\/perfMemory_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2618,2 +2618,1 @@\n-          os::commit_memory((char *)addr, thread->stack_base() - addr,\n-                            !ExecMem);\n+          os::commit_memory((char *)addr, thread->stack_base() - addr);\n@@ -3395,1 +3394,1 @@\n-bool os::pd_commit_memory(char* addr, size_t bytes, bool exec) {\n+static bool pd_commit_memory_impl(char* addr, size_t bytes, bool exec) {\n@@ -3457,2 +3456,5 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                          bool exec) {\n+bool os::pd_commit_memory(char* addr, size_t bytes) {\n+  return pd_commit_memory_impl(addr, bytes, false);\n+}\n+\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n@@ -3460,1 +3462,1 @@\n-  return pd_commit_memory(addr, size, exec);\n+  return pd_commit_memory(addr, size);\n@@ -3463,2 +3465,1 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n-                                  const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n@@ -3466,2 +3467,2 @@\n-  if (!pd_commit_memory(addr, size, exec)) {\n-    warn_fail_commit_memory(addr, size, exec);\n+  if (!pd_commit_memory(addr, size)) {\n+    warn_fail_commit_memory(addr, size, false);\n@@ -3473,1 +3474,1 @@\n-                                  size_t alignment_hint, bool exec,\n+                                  size_t alignment_hint,\n@@ -3476,1 +3477,1 @@\n-  pd_commit_memory_or_exit(addr, size, exec, mesg);\n+  pd_commit_memory_or_exit(addr, size, mesg);\n@@ -3543,0 +3544,17 @@\n+char* os::pd_reserve_executable_memory(size_t bytes) {\n+  return pd_reserve_memory(bytes);\n+}\n+\n+bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n+  \/\/ alignment_hint is ignored on this OS\n+  return pd_commit_memory_impl(addr, size, true);\n+}\n+\n+bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n+  return pd_uncommit_memory(addr, size);\n+}\n+\n+bool os::pd_release_executable_memory(char* addr, size_t size) {\n+  return pd_release_memory(addr, size);\n+}\n+\n@@ -3544,1 +3562,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":31,"deletions":13,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size)) {\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -718,1 +718,3 @@\n-  if ((codebuf == NULL) || (!os::commit_memory(codebuf, page_size, true))) {\n+  if ((codebuf == NULL) ||\n+      (!os::commit_memory(codebuf, page_size)) ||\n+      (!os::protect_memory(codebuf, page_size, MEM_PROT_RWX))) {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  _committed(mtGC), _dirty(mtGC), _special(false), _executable(false) {\n+  _committed(mtGC), _dirty(mtGC), _special(false) {\n@@ -62,1 +62,1 @@\n-  _executable = rs.executable();\n+  guarantee(!rs.executable(), \"what for?\");\n@@ -82,1 +82,0 @@\n-  _executable             = false;\n@@ -143,1 +142,1 @@\n-  os::commit_memory_or_exit(start_addr, size, _page_size, _executable, \"G1 virtual space\");\n+  os::commit_memory_or_exit(start_addr, size, _page_size, \"G1 virtual space\");\n@@ -150,1 +149,1 @@\n-  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), _executable, \"G1 virtual space\");\n+  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), \"G1 virtual space\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -74,3 +74,0 @@\n-  \/\/ Indicates whether the committed space should be executable.\n-  bool _executable;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-                                new_committed.byte_size(), !ExecMem,\n+                                new_committed.byte_size(),\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-         os::commit_memory(base_addr, bytes, alignment(), !ExecMem);\n+         os::commit_memory(base_addr, bytes, alignment());\n@@ -152,1 +152,1 @@\n-        os::commit_memory(commit_base, tmp_bytes, alignment(), !ExecMem)) {\n+        os::commit_memory(commit_base, tmp_bytes, alignment())) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-                            !ExecMem, \"card table last card\");\n+                            \"card table last card\");\n@@ -247,1 +247,1 @@\n-                                !ExecMem, \"card table expansion\");\n+                                \"card table expansion\");\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), false,\n+    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1),\n@@ -73,1 +73,1 @@\n-      os::commit_memory_or_exit(_biased_cset_map, page_size, false,\n+      os::commit_memory_or_exit(_biased_cset_map, page_size,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, false,\n+    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment,\n@@ -246,1 +246,1 @@\n-    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, false,\n+    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size,\n@@ -255,1 +255,1 @@\n-      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, false,\n+      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size,\n@@ -281,1 +281,1 @@\n-    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, false,\n+    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size,\n@@ -1329,1 +1329,1 @@\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n@@ -2864,1 +2864,1 @@\n-  if (!os::commit_memory(start, len, false)) {\n+  if (!os::commit_memory(start, len)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false)) {\n+  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, \"Mark stack space\");\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  if (os::commit_memory(addr, size, !ExecMem)) {\n+  if (os::commit_memory(addr, size)) {\n@@ -81,1 +81,1 @@\n-  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\");\n+  os::commit_memory_or_exit(addr, size, \"Allocator (commit)\");\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1590,1 +1590,1 @@\n-  if (!os::commit_memory(base, size, si->allow_exec())) {\n+  if (!os::commit_memory(base, size)) {\n@@ -1595,0 +1595,5 @@\n+  if (si->allow_exec() && !os::protect_memory(base, size, os::MEM_PROT_RWX)) {\n+    log_error(cds)(\"Failed to make executable %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n+                   i, shared_region_name[i]);\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, false) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,4 +83,3 @@\n-\/\/ Helper method\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd) {\n-  if (fd != -1) {\n-    return os::attempt_map_memory_to_file_at(base, size, fd);\n+char* ReservedSpace::attempt_reserve_memory_at(char* base, size_t size) {\n+  if (_fd_for_heap != -1) {\n+    return os::attempt_map_memory_to_file_at(base, size, _fd_for_heap);\n@@ -88,0 +87,2 @@\n+  assert(!_special, \"should not call this\");\n+  assert(!_executable, \"unsupported\");\n@@ -91,4 +92,7 @@\n-\/\/ Helper method\n-static char* map_or_reserve_memory(size_t size, int fd) {\n-  if (fd != -1) {\n-    return os::map_memory_to_file(size, fd);\n+char* ReservedSpace::reserve_memory(size_t size) {\n+  if (_fd_for_heap != -1) {\n+    return os::map_memory_to_file(size, _fd_for_heap);\n+  }\n+  assert(!_special, \"should not call this\");\n+  if (_executable) {\n+    return os::reserve_executable_memory(size);\n@@ -99,4 +103,3 @@\n-\/\/ Helper method\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd) {\n-  if (fd != -1) {\n-    return os::map_memory_to_file_aligned(size, alignment, fd);\n+char* ReservedSpace::reserve_memory_aligned(size_t size, size_t alignment) {\n+  if (_fd_for_heap != -1) {\n+    return os::map_memory_to_file_aligned(size, alignment, _fd_for_heap);\n@@ -104,0 +107,1 @@\n+  assert(!_executable, \"unsupported\");\n@@ -107,3 +111,2 @@\n-\/\/ Helper method\n-static void unmap_or_release_memory(char* base, size_t size, bool is_file_mapped) {\n-  if (is_file_mapped) {\n+void ReservedSpace::release_memory(char* base, size_t size) {\n+  if (_fd_for_heap != -1) {\n@@ -113,2 +116,12 @@\n-  } else if (!os::release_memory(base, size)) {\n-    fatal(\"os::release_memory failed\");\n+  } else if (_special) {\n+    if (!os::release_memory_special(base, size)) {\n+      fatal(\"os::release_memory_special failed\");\n+    }\n+  } else if (_executable) {\n+    if (!os::release_executable_memory(base, size)) {\n+      fatal(\"os::release_executable_memory failed\");\n+    }\n+  } else {\n+    if (!os::release_memory(base, size)) {\n+      fatal(\"os::release_memory failed\");\n+    }\n@@ -118,4 +131,3 @@\n-\/\/ Helper method.\n-static bool failed_to_reserve_as_requested(char* base, char* requested_address,\n-                                           const size_t size, bool special, bool is_file_mapped = false)\n-{\n+bool ReservedSpace::failed_to_reserve_as_requested(char* base,\n+                                                   char* requested_address,\n+                                                   const size_t size) {\n@@ -131,7 +143,1 @@\n-    if (special) {\n-      if (!os::release_memory_special(base, size)) {\n-        fatal(\"os::release_memory_special failed\");\n-      }\n-    } else {\n-      unmap_or_release_memory(base, size, is_file_mapped);\n-    }\n+    release_memory(base, size);\n@@ -170,3 +176,3 @@\n-  bool special = large && !os::can_commit_large_page_memory();\n-  if (special && _fd_for_heap != -1) {\n-    special = false;\n+  _special = large && !os::can_commit_large_page_memory();\n+  if (_special && _fd_for_heap != -1) {\n+    _special = false;\n@@ -181,1 +187,1 @@\n-  if (special) {\n+  if (_special) {\n@@ -186,1 +192,1 @@\n-      if (failed_to_reserve_as_requested(base, requested_address, size, true)) {\n+      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -195,1 +201,0 @@\n-      _special = true;\n@@ -197,0 +202,1 @@\n+      _special = false;\n@@ -215,2 +221,2 @@\n-      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap);\n-      if (failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n+      base = attempt_reserve_memory_at(requested_address, size);\n+      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -221,1 +227,1 @@\n-      base = map_or_reserve_memory(size, _fd_for_heap);\n+      base = reserve_memory(size);\n@@ -229,1 +235,1 @@\n-      unmap_or_release_memory(base, size, _fd_for_heap != -1 \/*is_file_mapped*\/);\n+      release_memory(base, size);\n@@ -233,1 +239,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, _fd_for_heap);\n+      base = reserve_memory_aligned(size, alignment);\n@@ -236,1 +242,1 @@\n-          failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n+          failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -310,11 +316,6 @@\n-    char *real_base = _base - _noaccess_prefix;\n-    const size_t real_size = _size + _noaccess_prefix;\n-    if (special()) {\n-      if (_fd_for_heap != -1) {\n-        os::unmap_memory(real_base, real_size);\n-      } else {\n-        os::release_memory_special(real_base, real_size);\n-      }\n-    } else{\n-      os::release_memory(real_base, real_size);\n-    }\n+    \/\/ revert effect of establish_noaccess_prefix\n+    _base -= _noaccess_prefix;\n+    _size += _noaccess_prefix;\n+\n+    release_memory(_base, _size);\n+\n@@ -381,3 +382,3 @@\n-  bool special = large && !os::can_commit_large_page_memory();\n-  if (special && _fd_for_heap != -1) {\n-    special = false;\n+  _special = large && !os::can_commit_large_page_memory();\n+  if (_special && _fd_for_heap != -1) {\n+    _special = false;\n@@ -396,1 +397,1 @@\n-  if (special) {\n+  if (_special) {\n@@ -405,1 +406,2 @@\n-      _special = true;\n+    } else {\n+      _special = false;\n@@ -417,1 +419,1 @@\n-      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap);\n+      base = attempt_reserve_memory_at(requested_address, size);\n@@ -423,1 +425,1 @@\n-      base = map_or_reserve_memory(size, _fd_for_heap);\n+      base = reserve_memory(size);\n@@ -850,1 +852,4 @@\n-  if (os::commit_memory(start, size, alignment, executable)) {\n+  bool committed = executable ?\n+    os::commit_executable_memory(start, size, alignment) :\n+    os::commit_memory(start, size, alignment);\n+  if (committed) {\n@@ -865,0 +870,10 @@\n+static bool uncommit_shrinked(char* start, size_t size, bool executable) {\n+  bool uncommitted = executable ?\n+    os::uncommit_executable_memory(start, size) :\n+    os::uncommit_memory(start, size);\n+  if (!uncommitted) {\n+    debug_only(warning(\"os::uncommit_memory failed\"));\n+  }\n+  return uncommitted;\n+}\n+\n@@ -1027,2 +1042,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs)) {\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+    if (!uncommit_shrinked(aligned_upper_new_high, upper_needs, _executable)) {\n@@ -1038,2 +1052,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs)) {\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+    if (!uncommit_shrinked(aligned_middle_new_high, middle_needs, _executable)) {\n@@ -1049,2 +1062,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs)) {\n-      debug_only(warning(\"os::uncommit_memory failed\"));\n+    if (!uncommit_shrinked(aligned_lower_new_high, lower_needs, _executable)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":77,"deletions":65,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+  bool failed_to_reserve_as_requested(char* base, char* requested_address, size_t size);\n+\n@@ -55,0 +57,6 @@\n+\n+  char* attempt_reserve_memory_at(char* base, size_t size);\n+  char* reserve_memory(size_t size);\n+  char* reserve_memory_aligned(size_t size, size_t alignment);\n+  void  release_memory(char* base, size_t size);\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n+  os::commit_memory((char *)(uintptr_t)addr, size);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1682,2 +1682,2 @@\n-bool os::commit_memory(char* addr, size_t bytes, bool executable) {\n-  bool res = pd_commit_memory(addr, bytes, executable);\n+bool os::commit_memory(char* addr, size_t bytes) {\n+  bool res = pd_commit_memory(addr, bytes);\n@@ -1690,3 +1690,2 @@\n-bool os::commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                              bool executable) {\n-  bool res = os::pd_commit_memory(addr, size, alignment_hint, executable);\n+bool os::commit_memory(char* addr, size_t size, size_t alignment_hint) {\n+  bool res = os::pd_commit_memory(addr, size, alignment_hint);\n@@ -1699,3 +1698,2 @@\n-void os::commit_memory_or_exit(char* addr, size_t bytes, bool executable,\n-                               const char* mesg) {\n-  pd_commit_memory_or_exit(addr, bytes, executable, mesg);\n+void os::commit_memory_or_exit(char* addr, size_t bytes, const char* mesg) {\n+  pd_commit_memory_or_exit(addr, bytes, mesg);\n@@ -1706,2 +1704,2 @@\n-                               bool executable, const char* mesg) {\n-  os::pd_commit_memory_or_exit(addr, size, alignment_hint, executable, mesg);\n+                               const char* mesg) {\n+  os::pd_commit_memory_or_exit(addr, size, alignment_hint,  mesg);\n@@ -1833,0 +1831,49 @@\n+char* os::reserve_executable_memory(size_t bytes, MEMFLAGS flags) {\n+  char* result = pd_reserve_executable_memory(bytes);\n+  if (result != NULL) {\n+    MemTracker::record_virtual_memory_reserve(result, bytes, CALLER_PC);\n+    if (flags != mtOther) {\n+      MemTracker::record_virtual_memory_type(result, flags);\n+    }\n+  }\n+  return result;\n+}\n+\n+bool os::commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n+  bool res = pd_commit_executable_memory(addr, size, alignment_hint);\n+  if (res) {\n+    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n+  }\n+  return res;\n+}\n+\n+bool os::uncommit_executable_memory(char* addr, size_t bytes) {\n+  bool res;\n+  if (MemTracker::tracking_level() > NMT_minimal) {\n+    Tracker tkr(Tracker::uncommit);\n+    res = pd_uncommit_executable_memory(addr, bytes);\n+    if (res) {\n+      tkr.record((address)addr, bytes);\n+    }\n+  } else {\n+    res = pd_uncommit_executable_memory(addr, bytes);\n+  }\n+  return res;\n+}\n+\n+bool os::release_executable_memory(char* addr, size_t bytes) {\n+  bool res;\n+  if (MemTracker::tracking_level() > NMT_minimal) {\n+    \/\/ Note: Tracker contains a ThreadCritical.\n+    Tracker tkr(Tracker::release);\n+    res = pd_release_executable_memory(addr, bytes);\n+    if (res) {\n+      tkr.record((address)addr, bytes);\n+    }\n+  } else {\n+    res = pd_release_executable_memory(addr, bytes);\n+  }\n+  return res;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":57,"deletions":10,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -80,4 +80,0 @@\n-\/\/ Executable parameter flag for os::commit_memory() and\n-\/\/ os::commit_memory_or_exit().\n-const bool ExecMem = true;\n-\n@@ -121,4 +117,3 @@\n-  static bool   pd_commit_memory(char* addr, size_t bytes, bool executable);\n-  static bool   pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                                 bool executable);\n-  \/\/ Same as pd_commit_memory() that either succeeds or calls\n+  static bool   pd_commit_memory(char* addr, size_t bytes);\n+  static bool   pd_commit_memory(char* addr, size_t size, size_t alignment_hint);\n+  \/\/ same as pd_commit_memory() that either succeeds or calls\n@@ -126,5 +121,3 @@\n-  static void   pd_commit_memory_or_exit(char* addr, size_t bytes,\n-                                         bool executable, const char* mesg);\n-  static void   pd_commit_memory_or_exit(char* addr, size_t size,\n-                                         size_t alignment_hint,\n-                                         bool executable, const char* mesg);\n+  static void   pd_commit_memory_or_exit(char* addr, size_t bytes, const char* mesg);\n+  static void   pd_commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n+                                         const char* mesg);\n@@ -134,0 +127,5 @@\n+  static char*  pd_reserve_executable_memory(size_t bytes);\n+  static bool   pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint);\n+  static bool   pd_uncommit_executable_memory(char* addr, size_t bytes);\n+  static bool   pd_release_executable_memory(char* addr, size_t bytes);\n+\n@@ -337,3 +335,7 @@\n-  static bool   commit_memory(char* addr, size_t bytes, bool executable);\n-  static bool   commit_memory(char* addr, size_t size, size_t alignment_hint,\n-                              bool executable);\n+  static char*  reserve_executable_memory(size_t bytes, MEMFLAGS flags = mtOther);\n+  static bool   commit_executable_memory(char* addr, size_t bytes, size_t alignment_hint);\n+  static bool   uncommit_executable_memory(char* addr, size_t bytes);\n+  static bool   release_executable_memory(char* addr, size_t bytes);\n+\n+  static bool   commit_memory(char* addr, size_t bytes);\n+  static bool   commit_memory(char* addr, size_t size, size_t alignment_hint);\n@@ -342,5 +344,3 @@\n-  static void   commit_memory_or_exit(char* addr, size_t bytes,\n-                                      bool executable, const char* mesg);\n-  static void   commit_memory_or_exit(char* addr, size_t size,\n-                                      size_t alignment_hint,\n-                                      bool executable, const char* mesg);\n+  static void   commit_memory_or_exit(char* addr, size_t bytes, const char* mesg);\n+  static void   commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n+                                      const char* mesg);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\");\n+    os::commit_memory_or_exit(polling_page, allocation_size, \"Unable to commit Safepoint polling page\");\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,1 +730,1 @@\n-    if (os::commit_memory(page, os::vm_page_size(), false) &&\n+    if (os::commit_memory(page, os::vm_page_size()) &&\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}