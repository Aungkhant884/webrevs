{"files":[{"patch":"@@ -2273,1 +2273,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -2351,1 +2351,1 @@\n-char* os::pd_reserve_memory(size_t bytes, char* requested_addr, size_t alignment_hint) {\n+char* os::pd_reserve_memory(size_t bytes, char* requested_addr, size_t alignment_hint, bool executable) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1911,1 +1911,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1917,0 +1917,4 @@\n+#elif defined(__APPLE__)\n+  if (::mprotect(addr, size, prot) == 0) {\n+    return true;\n+  }\n@@ -1999,2 +2003,2 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n-#ifdef __OpenBSD__\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n+#if defined(__OpenBSD__)\n@@ -2004,0 +2008,11 @@\n+#elif defined(__APPLE__)\n+  if (exec) {\n+    if (::madvise(addr, size, MADV_FREE) != 0) {\n+      return false;\n+    }\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n+  } else {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, PROT_NONE,\n+        MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+    return res  != (uintptr_t) MAP_FAILED;\n+  }\n@@ -2018,1 +2033,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -2027,1 +2042,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes, bool fixed) {\n+static char* anon_mmap(char* requested_addr, size_t bytes, bool fixed, bool executable) {\n@@ -2032,0 +2047,6 @@\n+#ifdef __APPLE__\n+  if (executable) {\n+    guarantee(!fixed, \"MAP_JIT (for execute) is incompatible with MAP_FIXED\");\n+    flags |= MAP_JIT;\n+  }\n+#endif\n@@ -2051,2 +2072,3 @@\n-                            size_t alignment_hint) {\n-  return anon_mmap(requested_addr, bytes, (requested_addr != NULL));\n+                            size_t alignment_hint,\n+                            bool executable) {\n+  return anon_mmap(requested_addr, bytes, (requested_addr != NULL), executable);\n@@ -2162,1 +2184,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes, false);\n+  char * addr = anon_mmap(requested_addr, bytes, false\/*fixed*\/, false\/*executable*\/);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -3460,1 +3460,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -3645,1 +3645,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -3720,1 +3720,2 @@\n-                            size_t alignment_hint) {\n+                            size_t alignment_hint,\n+                            bool executable) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3109,1 +3109,1 @@\n-char* os::pd_reserve_memory(size_t bytes, char* addr, size_t alignment_hint) {\n+char* os::pd_reserve_memory(size_t bytes, char* addr, size_t alignment_hint, bool executable) {\n@@ -3312,1 +3312,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t bytes) {\n+bool os::pd_uncommit_memory(char* addr, size_t bytes, bool exec) {\n@@ -3331,1 +3331,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,1 +590,2 @@\n-                               uncommit_region.byte_size())) {\n+                               uncommit_region.byte_size(),\n+                               !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,1 +257,2 @@\n-                                 uncommit_region.byte_size())) {\n+                                 uncommit_region.byte_size(),\n+                                 !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1353,1 +1353,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem)) {\n@@ -2847,1 +2847,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-      base = os::reserve_memory(size, NULL, alignment, _fd_for_heap);\n+      base = os::reserve_memory(size, NULL, alignment, _fd_for_heap, _executable);\n@@ -989,1 +989,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable)) {\n@@ -1000,1 +1000,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable)) {\n@@ -1011,1 +1011,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1655,1 +1655,1 @@\n-char* os::reserve_memory(size_t bytes, char* addr, size_t alignment_hint, int file_desc) {\n+char* os::reserve_memory(size_t bytes, char* addr, size_t alignment_hint, int file_desc, bool executable) {\n@@ -1666,1 +1666,1 @@\n-    result = pd_reserve_memory(bytes, addr, alignment_hint);\n+    result = pd_reserve_memory(bytes, addr, alignment_hint, executable);\n@@ -1731,1 +1731,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes) {\n+bool os::uncommit_memory(char* addr, size_t bytes, bool exec) {\n@@ -1735,1 +1735,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, exec);\n@@ -1740,1 +1740,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, exec);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -117,1 +117,2 @@\n-                                  size_t alignment_hint = 0);\n+                                  size_t alignment_hint = 0,\n+                                  bool executable = false);\n@@ -130,1 +131,1 @@\n-  static bool   pd_uncommit_memory(char* addr, size_t bytes);\n+  static bool   pd_uncommit_memory(char* addr, size_t bytes, bool exec);\n@@ -314,1 +315,2 @@\n-                               size_t alignment_hint = 0, int file_desc = -1);\n+                               size_t alignment_hint = 0, int file_desc = -1,\n+                               bool executable = false);\n@@ -341,1 +343,1 @@\n-  static bool   uncommit_memory(char* addr, size_t bytes);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool exec);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2760,1 +2760,1 @@\n-    if (os::uncommit_memory((char *) low_addr, len)) {\n+    if (os::uncommit_memory((char *) low_addr, len, !ExecMem)) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}