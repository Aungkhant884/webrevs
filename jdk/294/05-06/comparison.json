{"files":[{"patch":"@@ -1915,1 +1915,2 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n+                                  const char* mesg) {\n@@ -1917,1 +1918,1 @@\n-  if (!pd_commit_memory(addr, size)) {\n+  if (!pd_commit_memory(addr, size, exec)) {\n@@ -1919,1 +1920,1 @@\n-    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, false, errno);)\n+    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, exec, errno);)\n@@ -1924,1 +1925,1 @@\n-bool os::pd_commit_memory(char* addr, size_t size) {\n+bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n@@ -1949,2 +1950,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n-  return pd_commit_memory(addr, size);\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint, bool exec) {\n+  return pd_commit_memory(addr, size, exec);\n@@ -1954,1 +1955,1 @@\n-                                  size_t alignment_hint,\n+                                  size_t alignment_hint, bool exec,\n@@ -1957,1 +1958,1 @@\n-  pd_commit_memory_or_exit(addr, size, mesg);\n+  pd_commit_memory_or_exit(addr, size, exec, mesg);\n@@ -1960,1 +1961,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -1980,16 +1981,0 @@\n-char* os::pd_reserve_executable_memory(size_t bytes) {\n-  return pd_reserve_memory(bytes);\n-}\n-\n-bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n-  return pd_commit_memory(addr, size, alignment_hint);\n-}\n-\n-bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n-  return pd_uncommit_memory(addr, size);\n-}\n-\n-bool os::pd_release_executable_memory(char* addr, size_t size) {\n-  return pd_release_memory(addr, size);\n-}\n-\n@@ -2053,1 +2038,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":11,"deletions":26,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  if (!os::commit_memory(mapAddress, size)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n","filename":"src\/hotspot\/os\/aix\/perfMemory_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1679,1 +1679,1 @@\n-static bool pd_commit_memory_impl(char* addr, size_t size, bool exec) {\n+bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n@@ -1681,1 +1681,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1687,0 +1687,4 @@\n+#elif defined(__APPLE__)\n+  if (::mprotect(addr, size, prot) == 0) {\n+    return true;\n+  }\n@@ -1702,5 +1706,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size) {\n-  return pd_commit_memory_impl(addr, size, false);\n-}\n-\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                          bool exec) {\n@@ -1708,1 +1709,1 @@\n-  return pd_commit_memory(addr, size);\n+  return pd_commit_memory(addr, size, exec);\n@@ -1711,1 +1712,2 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n+                                  const char* mesg) {\n@@ -1713,1 +1715,1 @@\n-  if (!pd_commit_memory(addr, size)) {\n+  if (!pd_commit_memory(addr, size, exec)) {\n@@ -1715,1 +1717,1 @@\n-    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, false, errno);)\n+    PRODUCT_ONLY(warn_fail_commit_memory(addr, size, exec, errno);)\n@@ -1721,1 +1723,1 @@\n-                                  size_t alignment_hint,\n+                                  size_t alignment_hint, bool exec,\n@@ -1724,1 +1726,1 @@\n-  pd_commit_memory_or_exit(addr, size, mesg);\n+  pd_commit_memory_or_exit(addr, size, exec, mesg);\n@@ -1734,33 +1736,0 @@\n-char* os::pd_reserve_executable_memory(size_t bytes) {\n-#ifdef __APPLE__\n-  const int flags = MAP_JIT | MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n-  char* addr = (char*)::mmap(NULL, bytes, PROT_NONE, flags, -1, 0);\n-  return addr == MAP_FAILED ? NULL : addr;\n-#else\n-  return pd_reserve_memory(bytes);\n-#endif\n-}\n-\n-bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n-  \/\/ alignment_hint is ignored on this OS\n-#ifdef __APPLE__\n-  return 0 == ::mprotect(addr, size, PROT_READ | PROT_WRITE | PROT_EXEC);\n-#else\n-  return pd_commit_memory_impl(addr, size, true);\n-#endif\n-}\n-\n-bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n-#ifdef __APPLE__\n-  \/\/ advise to free pages, but failure is not fatal\n-  (void)::madvise(addr, size, MADV_FREE);\n-  return 0 == ::mprotect(addr, size, PROT_NONE);\n-#else\n-  return pd_uncommit_memory(addr, size);\n-#endif\n-}\n-\n-bool os::pd_release_executable_memory(char* addr, size_t size) {\n-  return pd_release_memory(addr, size);\n-}\n-\n@@ -1804,2 +1773,2 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n-#ifdef __OpenBSD__\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n+#if defined(__OpenBSD__)\n@@ -1809,0 +1778,11 @@\n+#elif defined(__APPLE__)\n+  if (exec) {\n+    if (::madvise(addr, size, MADV_FREE) != 0) {\n+      return false;\n+    }\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n+  } else {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, PROT_NONE,\n+        MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+    return res  != (uintptr_t) MAP_FAILED;\n+  }\n@@ -1817,1 +1797,1 @@\n-  return os::commit_memory(addr, size);\n+  return os::commit_memory(addr, size, !ExecMem);\n@@ -1823,1 +1803,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -1829,1 +1809,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes) {\n+static char* anon_mmap(char* requested_addr, size_t bytes, bool executable) {\n@@ -1831,1 +1811,2 @@\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS\n+      MACOS_ONLY(| (executable ? MAP_JIT : 0));\n@@ -1845,2 +1826,2 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n-  return anon_mmap(NULL \/* addr *\/, bytes);\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n+  return anon_mmap(NULL \/* addr *\/, bytes, executable);\n@@ -1956,1 +1937,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes);\n+  char * addr = anon_mmap(requested_addr, bytes, false\/*executable*\/);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":36,"deletions":55,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n","filename":"src\/hotspot\/os\/bsd\/perfMemory_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2836,2 +2836,2 @@\n-bool os::pd_commit_memory(char* addr, size_t size) {\n-  return os::Linux::commit_memory_impl(addr, size, false) == 0;\n+bool os::pd_commit_memory(char* addr, size_t size, bool exec) {\n+  return os::Linux::commit_memory_impl(addr, size, exec) == 0;\n@@ -2840,1 +2840,2 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n+                                  const char* mesg) {\n@@ -2842,1 +2843,1 @@\n-  int err = os::Linux::commit_memory_impl(addr, size, false);\n+  int err = os::Linux::commit_memory_impl(addr, size, exec);\n@@ -2845,1 +2846,1 @@\n-    warn_fail_commit_memory(addr, size, false, err);\n+    warn_fail_commit_memory(addr, size, exec, err);\n@@ -2878,2 +2879,3 @@\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n-  return os::Linux::commit_memory_impl(addr, size, alignment_hint, false) == 0;\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                          bool exec) {\n+  return os::Linux::commit_memory_impl(addr, size, alignment_hint, exec) == 0;\n@@ -2882,1 +2884,2 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n+void os::pd_commit_memory_or_exit(char* addr, size_t size,\n+                                  size_t alignment_hint, bool exec,\n@@ -2885,1 +2888,1 @@\n-  int err = os::Linux::commit_memory_impl(addr, size, alignment_hint, false);\n+  int err = os::Linux::commit_memory_impl(addr, size, alignment_hint, exec);\n@@ -2888,1 +2891,1 @@\n-    warn_fail_commit_memory(addr, size, alignment_hint, false, err);\n+    warn_fail_commit_memory(addr, size, alignment_hint, exec, err);\n@@ -2908,1 +2911,1 @@\n-    commit_memory(addr, bytes, alignment_hint);\n+    commit_memory(addr, bytes, alignment_hint, !ExecMem);\n@@ -2912,17 +2915,0 @@\n-char* os::pd_reserve_executable_memory(size_t bytes) {\n-  return pd_reserve_memory(bytes);\n-}\n-\n-bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n-  return os::Linux::commit_memory_impl(addr, size, alignment_hint, true) == 0;\n-}\n-\n-bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n-  return pd_uncommit_memory(addr, size);\n-}\n-\n-bool os::pd_release_executable_memory(char* addr, size_t size) {\n-  return pd_release_memory(addr, size);\n-}\n-\n-\n@@ -3289,1 +3275,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -3458,1 +3444,1 @@\n-  return os::commit_memory(addr, size);\n+  return os::commit_memory(addr, size, !ExecMem);\n@@ -3474,1 +3460,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -3533,1 +3519,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n","filename":"src\/hotspot\/os\/linux\/perfMemory_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool executable) {\n@@ -341,1 +341,1 @@\n-  char* extra_base = os::reserve_memory(extra_size);\n+  char* extra_base = os::reserve_memory(extra_size, executable);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2618,1 +2618,2 @@\n-          os::commit_memory((char *)addr, thread->stack_base() - addr);\n+          os::commit_memory((char *)addr, thread->stack_base() - addr,\n+                            !ExecMem);\n@@ -3269,1 +3270,2 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool executable) {\n+  \/\/ executable can be ignored\n@@ -3277,1 +3279,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n@@ -3394,1 +3396,1 @@\n-static bool pd_commit_memory_impl(char* addr, size_t bytes, bool exec) {\n+bool os::pd_commit_memory(char* addr, size_t bytes, bool exec) {\n@@ -3456,5 +3458,2 @@\n-bool os::pd_commit_memory(char* addr, size_t bytes) {\n-  return pd_commit_memory_impl(addr, bytes, false);\n-}\n-\n-bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint) {\n+bool os::pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                          bool exec) {\n@@ -3462,1 +3461,1 @@\n-  return pd_commit_memory(addr, size);\n+  return pd_commit_memory(addr, size, exec);\n@@ -3465,1 +3464,2 @@\n-void os::pd_commit_memory_or_exit(char* addr, size_t size, const char* mesg) {\n+void os::pd_commit_memory_or_exit(char* addr, size_t size, bool exec,\n+                                  const char* mesg) {\n@@ -3467,2 +3467,2 @@\n-  if (!pd_commit_memory(addr, size)) {\n-    warn_fail_commit_memory(addr, size, false);\n+  if (!pd_commit_memory(addr, size, exec)) {\n+    warn_fail_commit_memory(addr, size, exec);\n@@ -3474,1 +3474,1 @@\n-                                  size_t alignment_hint,\n+                                  size_t alignment_hint, bool exec,\n@@ -3477,1 +3477,1 @@\n-  pd_commit_memory_or_exit(addr, size, mesg);\n+  pd_commit_memory_or_exit(addr, size, exec, mesg);\n@@ -3480,1 +3480,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t bytes) {\n+bool os::pd_uncommit_memory(char* addr, size_t bytes, bool exec) {\n@@ -3544,17 +3544,0 @@\n-char* os::pd_reserve_executable_memory(size_t bytes) {\n-  return pd_reserve_memory(bytes);\n-}\n-\n-bool os::pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n-  \/\/ alignment_hint is ignored on this OS\n-  return pd_commit_memory_impl(addr, size, true);\n-}\n-\n-bool os::pd_uncommit_executable_memory(char* addr, size_t size) {\n-  return pd_uncommit_memory(addr, size);\n-}\n-\n-bool os::pd_release_executable_memory(char* addr, size_t size) {\n-  return pd_release_memory(addr, size);\n-}\n-\n@@ -3562,1 +3545,1 @@\n-  return os::commit_memory(addr, size);\n+  return os::commit_memory(addr, size, !ExecMem);\n@@ -3566,1 +3549,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":18,"deletions":35,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  if (!os::commit_memory(mapAddress, size)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -718,3 +718,1 @@\n-  if ((codebuf == NULL) ||\n-      (!os::commit_memory(codebuf, page_size)) ||\n-      (!os::protect_memory(codebuf, page_size, MEM_PROT_RWX))) {\n+  if ((codebuf == NULL) || (!os::commit_memory(codebuf, page_size, true))) {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  _committed(mtGC), _dirty(mtGC), _special(false) {\n+  _committed(mtGC), _dirty(mtGC), _special(false), _executable(false) {\n@@ -62,1 +62,1 @@\n-  guarantee(!rs.executable(), \"what for?\");\n+  _executable = rs.executable();\n@@ -82,0 +82,1 @@\n+  _executable             = false;\n@@ -142,1 +143,1 @@\n-  os::commit_memory_or_exit(start_addr, size, _page_size, \"G1 virtual space\");\n+  os::commit_memory_or_exit(start_addr, size, _page_size, _executable, \"G1 virtual space\");\n@@ -149,1 +150,1 @@\n-  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), \"G1 virtual space\");\n+  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), _executable, \"G1 virtual space\");\n@@ -215,1 +216,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+  \/\/ Indicates whether the committed space should be executable.\n+  bool _executable;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-                                new_committed.byte_size(),\n+                                new_committed.byte_size(), !ExecMem,\n@@ -590,1 +590,2 @@\n-                               uncommit_region.byte_size())) {\n+                               uncommit_region.byte_size(),\n+                               !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-         os::commit_memory(base_addr, bytes, alignment());\n+         os::commit_memory(base_addr, bytes, alignment(), !ExecMem);\n@@ -116,1 +116,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem);\n@@ -152,1 +152,1 @@\n-        os::commit_memory(commit_base, tmp_bytes, alignment())) {\n+        os::commit_memory(commit_base, tmp_bytes, alignment(), !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-                            \"card table last card\");\n+                            !ExecMem, \"card table last card\");\n@@ -247,1 +247,1 @@\n-                                \"card table expansion\");\n+                                !ExecMem, \"card table expansion\");\n@@ -257,1 +257,2 @@\n-                                 uncommit_region.byte_size())) {\n+                                 uncommit_region.byte_size(),\n+                                 !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1),\n+    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), false,\n@@ -73,1 +73,1 @@\n-      os::commit_memory_or_exit(_biased_cset_map, page_size,\n+      os::commit_memory_or_exit(_biased_cset_map, page_size, false,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment,\n+    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, false,\n@@ -246,1 +246,1 @@\n-    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size,\n+    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, false,\n@@ -255,1 +255,1 @@\n-      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size,\n+      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, false,\n@@ -281,1 +281,1 @@\n-    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size,\n+    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, false,\n@@ -1329,1 +1329,1 @@\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n@@ -1348,1 +1348,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem)) {\n@@ -2864,1 +2864,1 @@\n-  if (!os::commit_memory(start, len)) {\n+  if (!os::commit_memory(start, len, false)) {\n@@ -2893,1 +2893,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false)) {\n@@ -631,1 +631,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, mtGC);\n+  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, !ExecMem, mtGC);\n@@ -109,1 +109,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n@@ -64,1 +64,1 @@\n-  if (os::commit_memory(addr, size)) {\n+  if (os::commit_memory(addr, size, !ExecMem)) {\n@@ -76,1 +76,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n@@ -81,1 +81,1 @@\n-  os::commit_memory_or_exit(addr, size, \"Allocator (commit)\");\n+  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\");\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1590,1 +1590,1 @@\n-  if (!os::commit_memory(base, size)) {\n+  if (!os::commit_memory(base, size, si->allow_exec())) {\n@@ -1595,5 +1595,0 @@\n-  if (si->allow_exec() && !os::protect_memory(base, size, os::MEM_PROT_RWX)) {\n-    log_error(cds)(\"Failed to make executable %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n-                   i, shared_region_name[i]);\n-    return false;\n-  }\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, false) == false) {\n@@ -186,1 +186,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,4 +97,1 @@\n-  if (_executable) {\n-    return os::reserve_executable_memory(size);\n-  }\n-  return os::reserve_memory(size);\n+  return os::reserve_memory(size, _executable);\n@@ -107,2 +104,1 @@\n-  assert(!_executable, \"unsupported\");\n-  return os::reserve_memory_aligned(size, alignment);\n+  return os::reserve_memory_aligned(size, alignment, _executable);\n@@ -120,4 +116,0 @@\n-  } else if (_executable) {\n-    if (!os::release_executable_memory(base, size)) {\n-      fatal(\"os::release_executable_memory failed\");\n-    }\n@@ -852,4 +844,1 @@\n-  bool committed = executable ?\n-    os::commit_executable_memory(start, size, alignment) :\n-    os::commit_memory(start, size, alignment);\n-  if (committed) {\n+  if (os::commit_memory(start, size, alignment, executable)) {\n@@ -870,10 +859,0 @@\n-static bool uncommit_shrinked(char* start, size_t size, bool executable) {\n-  bool uncommitted = executable ?\n-    os::uncommit_executable_memory(start, size) :\n-    os::uncommit_memory(start, size);\n-  if (!uncommitted) {\n-    debug_only(warning(\"os::uncommit_memory failed\"));\n-  }\n-  return uncommitted;\n-}\n-\n@@ -1042,1 +1021,2 @@\n-    if (!uncommit_shrinked(aligned_upper_new_high, upper_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable)) {\n+      debug_only(warning(\"os::uncommit_memory failed\"));\n@@ -1052,1 +1032,2 @@\n-    if (!uncommit_shrinked(aligned_middle_new_high, middle_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable)) {\n+      debug_only(warning(\"os::uncommit_memory failed\"));\n@@ -1062,1 +1043,2 @@\n-    if (!uncommit_shrinked(aligned_lower_new_high, lower_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable)) {\n+      debug_only(warning(\"os::uncommit_memory failed\"));\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":9,"deletions":27,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-  os::commit_memory((char *)(uintptr_t)addr, size);\n+  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n@@ -682,1 +682,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1659,2 +1659,2 @@\n-char* os::reserve_memory(size_t bytes, MEMFLAGS flags) {\n-  char* result = pd_reserve_memory(bytes);\n+char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+  char* result = pd_reserve_memory(bytes, executable);\n@@ -1682,2 +1682,2 @@\n-bool os::commit_memory(char* addr, size_t bytes) {\n-  bool res = pd_commit_memory(addr, bytes);\n+bool os::commit_memory(char* addr, size_t bytes, bool executable) {\n+  bool res = pd_commit_memory(addr, bytes, executable);\n@@ -1690,2 +1690,3 @@\n-bool os::commit_memory(char* addr, size_t size, size_t alignment_hint) {\n-  bool res = os::pd_commit_memory(addr, size, alignment_hint);\n+bool os::commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                              bool executable) {\n+  bool res = os::pd_commit_memory(addr, size, alignment_hint, executable);\n@@ -1698,2 +1699,3 @@\n-void os::commit_memory_or_exit(char* addr, size_t bytes, const char* mesg) {\n-  pd_commit_memory_or_exit(addr, bytes, mesg);\n+void os::commit_memory_or_exit(char* addr, size_t bytes, bool executable,\n+                               const char* mesg) {\n+  pd_commit_memory_or_exit(addr, bytes, executable, mesg);\n@@ -1704,2 +1706,2 @@\n-                               const char* mesg) {\n-  os::pd_commit_memory_or_exit(addr, size, alignment_hint,  mesg);\n+                               bool executable, const char* mesg) {\n+  os::pd_commit_memory_or_exit(addr, size, alignment_hint, executable, mesg);\n@@ -1709,1 +1711,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes) {\n+bool os::uncommit_memory(char* addr, size_t bytes, bool exec) {\n@@ -1713,1 +1715,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, exec);\n@@ -1718,1 +1720,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, exec);\n@@ -1831,49 +1833,0 @@\n-char* os::reserve_executable_memory(size_t bytes, MEMFLAGS flags) {\n-  char* result = pd_reserve_executable_memory(bytes);\n-  if (result != NULL) {\n-    MemTracker::record_virtual_memory_reserve(result, bytes, CALLER_PC);\n-    if (flags != mtOther) {\n-      MemTracker::record_virtual_memory_type(result, flags);\n-    }\n-  }\n-  return result;\n-}\n-\n-bool os::commit_executable_memory(char* addr, size_t size, size_t alignment_hint) {\n-  bool res = pd_commit_executable_memory(addr, size, alignment_hint);\n-  if (res) {\n-    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n-  }\n-  return res;\n-}\n-\n-bool os::uncommit_executable_memory(char* addr, size_t bytes) {\n-  bool res;\n-  if (MemTracker::tracking_level() > NMT_minimal) {\n-    Tracker tkr(Tracker::uncommit);\n-    res = pd_uncommit_executable_memory(addr, bytes);\n-    if (res) {\n-      tkr.record((address)addr, bytes);\n-    }\n-  } else {\n-    res = pd_uncommit_executable_memory(addr, bytes);\n-  }\n-  return res;\n-}\n-\n-bool os::release_executable_memory(char* addr, size_t bytes) {\n-  bool res;\n-  if (MemTracker::tracking_level() > NMT_minimal) {\n-    \/\/ Note: Tracker contains a ThreadCritical.\n-    Tracker tkr(Tracker::release);\n-    res = pd_release_executable_memory(addr, bytes);\n-    if (res) {\n-      tkr.record((address)addr, bytes);\n-    }\n-  } else {\n-    res = pd_release_executable_memory(addr, bytes);\n-  }\n-  return res;\n-}\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":15,"deletions":62,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -80,0 +80,4 @@\n+\/\/ Executable parameter flag for os::commit_memory() and\n+\/\/ os::commit_memory_or_exit().\n+const bool ExecMem = true;\n+\n@@ -113,1 +117,1 @@\n-  static char*  pd_reserve_memory(size_t bytes);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable);\n@@ -117,3 +121,4 @@\n-  static bool   pd_commit_memory(char* addr, size_t bytes);\n-  static bool   pd_commit_memory(char* addr, size_t size, size_t alignment_hint);\n-  \/\/ same as pd_commit_memory() that either succeeds or calls\n+  static bool   pd_commit_memory(char* addr, size_t bytes, bool executable);\n+  static bool   pd_commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                                 bool executable);\n+  \/\/ Same as pd_commit_memory() that either succeeds or calls\n@@ -121,4 +126,6 @@\n-  static void   pd_commit_memory_or_exit(char* addr, size_t bytes, const char* mesg);\n-  static void   pd_commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n-                                         const char* mesg);\n-  static bool   pd_uncommit_memory(char* addr, size_t bytes);\n+  static void   pd_commit_memory_or_exit(char* addr, size_t bytes,\n+                                         bool executable, const char* mesg);\n+  static void   pd_commit_memory_or_exit(char* addr, size_t size,\n+                                         size_t alignment_hint,\n+                                         bool executable, const char* mesg);\n+  static bool   pd_uncommit_memory(char* addr, size_t bytes, bool exec);\n@@ -127,5 +134,0 @@\n-  static char*  pd_reserve_executable_memory(size_t bytes);\n-  static bool   pd_commit_executable_memory(char* addr, size_t size, size_t alignment_hint);\n-  static bool   pd_uncommit_executable_memory(char* addr, size_t bytes);\n-  static bool   pd_release_executable_memory(char* addr, size_t bytes);\n-\n@@ -316,1 +318,1 @@\n-  static char*  reserve_memory(size_t bytes, MEMFLAGS flags = mtOther);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtOther);\n@@ -319,1 +321,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n@@ -323,0 +325,2 @@\n+  \/\/ It's intentionally cannot reserve executable mapping, as some platforms does not allow that\n+  \/\/ (e.g. macOS with proper MAP_JIT use).\n@@ -335,7 +339,3 @@\n-  static char*  reserve_executable_memory(size_t bytes, MEMFLAGS flags = mtOther);\n-  static bool   commit_executable_memory(char* addr, size_t bytes, size_t alignment_hint);\n-  static bool   uncommit_executable_memory(char* addr, size_t bytes);\n-  static bool   release_executable_memory(char* addr, size_t bytes);\n-\n-  static bool   commit_memory(char* addr, size_t bytes);\n-  static bool   commit_memory(char* addr, size_t size, size_t alignment_hint);\n+  static bool   commit_memory(char* addr, size_t bytes, bool executable);\n+  static bool   commit_memory(char* addr, size_t size, size_t alignment_hint,\n+                              bool executable);\n@@ -344,4 +344,6 @@\n-  static void   commit_memory_or_exit(char* addr, size_t bytes, const char* mesg);\n-  static void   commit_memory_or_exit(char* addr, size_t size, size_t alignment_hint,\n-                                      const char* mesg);\n-  static bool   uncommit_memory(char* addr, size_t bytes);\n+  static void   commit_memory_or_exit(char* addr, size_t bytes,\n+                                      bool executable, const char* mesg);\n+  static void   commit_memory_or_exit(char* addr, size_t size,\n+                                      size_t alignment_hint,\n+                                      bool executable, const char* mesg);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool exec);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":28,"deletions":26,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    os::commit_memory_or_exit(polling_page, allocation_size, \"Unable to commit Safepoint polling page\");\n+    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\");\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,1 +730,1 @@\n-    if (os::commit_memory(page, os::vm_page_size()) &&\n+    if (os::commit_memory(page, os::vm_page_size(), false) &&\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    char* base = os::reserve_memory(size, mtThreadStack);\n+    char* base = os::reserve_memory(size, !ExecMem, mtThreadStack);\n@@ -172,1 +172,1 @@\n-    char* base = os::reserve_memory(size, mtTest);\n+    char* base = os::reserve_memory(size, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}