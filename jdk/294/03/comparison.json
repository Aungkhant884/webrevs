{"files":[{"patch":"@@ -150,0 +150,7 @@\n+\n+struct vmmap {\n+  char* addr;\n+  size_t size;\n+};\n+\n+static GrowableArray<vmmap>* execmaps = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<vmmap>(8, mtInternal);\n@@ -534,0 +541,44 @@\n+#ifdef __APPLE__\n+\n+static int execmap_find(char* addr, size_t size) {\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    vmmap* m = execmaps->adr_at(i);\n+    if (m->addr <= addr && addr < m->addr + m->size) {\n+      assert(addr + size <= m->addr + m->size, \"goes beyond\");\n+      return i;\n+    } else {\n+      assert(addr + size <= m->addr || m->addr + m->size <= addr,\n+          \"should not intersect\");\n+    }\n+  }\n+  return -1;\n+}\n+\n+static void execmap_add(char* addr, size_t size) {\n+  assert(-1 == execmap_find(addr, size), \"should not intersect\");\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    if (addr < execmaps->at(i).addr) {\n+      execmaps->insert_before(i, { addr, size });\n+      return;\n+    }\n+  }\n+  execmaps->append({ addr, size });\n+}\n+\n+static void execmap_remove(int emap) {\n+  if (0 <= emap) {\n+    execmaps->remove_at(emap);\n+  }\n+}\n+\n+static void execmap_remove(char* addr, size_t size) {\n+  int to_remove = execmap_find(addr, size);\n+  if (0 <= to_remove) {\n+    assert(execmaps->at(to_remove).addr == addr && execmaps->at(to_remove).size == size,\n+        \"should remove whole mapping\");\n+    execmaps->remove_at(to_remove);\n+  }\n+}\n+\n+#endif \/\/ __APPLE__\n+\n@@ -1904,1 +1955,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1910,0 +1961,14 @@\n+#elif defined(__APPLE__)\n+  if (!exec) {\n+    assert(-1 == execmap_find(addr, size), \"should NOT have execmap\");\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, prot,\n+                                       MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0);\n+    if (res != (uintptr_t) MAP_FAILED) {\n+      return true;\n+    }\n+  } else {\n+    assert(-1 != execmap_find(addr, size), \"should have execmap\");\n+    if (::mprotect(addr, size, prot) == 0) {\n+      return true;\n+    }\n+  }\n@@ -1993,1 +2058,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1997,0 +2062,10 @@\n+#elif defined(__APPLE__)\n+  bool exec = 0 <= execmap_find(addr, size);\n+  if (!exec) {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, PROT_NONE,\n+                                       MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+    return res  != (uintptr_t) MAP_FAILED;\n+  } else {\n+    ::madvise(addr, size, MADV_FREE);\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n+  }\n@@ -2017,1 +2092,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes) {\n+static char* anon_mmap(char* requested_addr, size_t bytes, bool executable) {\n@@ -2019,1 +2094,1 @@\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| (executable ? MAP_JIT : 0));\n@@ -2026,0 +2101,6 @@\n+#ifdef __APPLE__\n+  if (executable && MAP_FAILED != addr) {\n+    execmap_add(addr, bytes);\n+  }\n+#endif\n+\n@@ -2030,0 +2111,3 @@\n+#ifdef __APPLE__\n+  execmap_remove(addr, size);\n+#endif\n@@ -2033,2 +2117,2 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n-  return anon_mmap(NULL \/* addr *\/, bytes);\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n+  return anon_mmap(NULL \/* addr *\/, bytes, executable);\n@@ -2144,1 +2228,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes);\n+  char * addr = anon_mmap(requested_addr, bytes, false\/*executable*\/);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":91,"deletions":7,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, mtGC);\n+  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n@@ -76,1 +76,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,1 +197,5 @@\n-      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      if (!_executable) {\n+        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      } else {\n+        base = os::reserve_memory(size, ExecMem);\n+      }\n@@ -381,1 +385,5 @@\n-      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      if (!executable()) {\n+        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      } else {\n+        base = os::reserve_memory(size, ExecMem);\n+      }\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1655,2 +1655,2 @@\n-char* os::reserve_memory(size_t bytes, MEMFLAGS flags) {\n-  char* result = pd_reserve_memory(bytes);\n+char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+  char* result = pd_reserve_memory(bytes, executable);\n@@ -1678,1 +1678,1 @@\n-    result = pd_reserve_memory(bytes);\n+    result = pd_reserve_memory(bytes, !ExecMem);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  static char*  pd_reserve_memory(size_t bytes);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable);\n@@ -317,1 +317,1 @@\n-  static char*  reserve_memory(size_t bytes, MEMFLAGS flags = mtOther);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtOther);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}