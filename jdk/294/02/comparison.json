{"files":[{"patch":"@@ -150,0 +150,7 @@\n+\n+struct vmmap {\n+  char* addr;\n+  size_t size;\n+};\n+\n+static GrowableArray<vmmap>* execmaps = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<vmmap>(8, mtInternal);\n@@ -534,0 +541,54 @@\n+#ifdef __APPLE__\n+static void execmap_add(char* addr, size_t size) {\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    vmmap* m = execmaps->adr_at(i);\n+    if (m->addr < addr) {\n+      guarantee(m->addr + m->size <= addr, \"unexpected intersection\");\n+      continue;\n+    }\n+    guarantee(addr + size <= m->addr, \"unexpected intersection\");\n+    execmaps->insert_before(i, { addr, size });\n+    return;\n+  }\n+  execmaps->append({ addr, size });\n+}\n+\n+static void execmap_remove(char* addr, size_t size) {\n+  char* e = addr + size;\n+  for (int i = 0; i < execmaps->length();) {\n+    vmmap* m = execmaps->adr_at(i);\n+    char* me = m->addr + m->size;\n+    if (me < addr || e <= m->addr) {\n+      ++i;\n+      continue;\n+    }\n+    if (addr <= m->addr && me <= e) {\n+      execmaps->remove_at(i);\n+    } else if (addr <= m->addr && e < me) {\n+      m->addr = e;\n+      m->size = me - m->addr;\n+      ++i;\n+    } else if (m->addr < addr && me <= e) {\n+      m->size = m->addr - addr;\n+      ++i;\n+    } else {\n+      assert(m->addr < addr && e < me, \"last option\");\n+      m->size = m->addr - addr;\n+      execmaps->insert_before(i + 1, { e, size_t(me - e) });\n+      i += 2;\n+    }\n+  }\n+}\n+\n+static bool execmap_intersect(char* addr, size_t size) {\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    vmmap* m = execmaps->adr_at(i);\n+    if (m->addr + m->size < addr || addr + size <= m->addr) {\n+      continue;\n+    }\n+    return true;\n+  }\n+  return false;\n+}\n+#endif \/\/ __APPLE__\n+\n@@ -1904,1 +1965,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1910,0 +1971,13 @@\n+#elif defined(__APPLE__)\n+  if (!exec) {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, prot,\n+                                       MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0);\n+    if (res != (uintptr_t) MAP_FAILED) {\n+      execmap_remove(addr, size);\n+      return true;\n+    }\n+  } else {\n+    if (::mprotect(addr, size, prot) == 0) {\n+      return true;\n+    }\n+  }\n@@ -1993,1 +2067,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1997,0 +2071,10 @@\n+#elif defined(__APPLE__)\n+  bool exec = execmap_intersect(addr, size);\n+  if (!exec) {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, PROT_NONE,\n+                                       MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+    return res  != (uintptr_t) MAP_FAILED;\n+  } else {\n+    ::madvise(addr, size, MADV_FREE);\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n+  }\n@@ -2019,1 +2103,2 @@\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  \/\/ On MacOS, always use MAP_JIT and drop that on a first exec\/non-exec pd_commit_memory\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| MAP_JIT);\n@@ -2026,0 +2111,6 @@\n+#ifdef __APPLE__\n+  if (MAP_FAILED != addr) {\n+    execmap_add(addr, bytes);\n+  }\n+#endif\n+\n@@ -2030,0 +2121,3 @@\n+#ifdef __APPLE__\n+  execmap_remove(addr, size);\n+#endif\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":97,"deletions":3,"binary":false,"changes":100,"status":"modified"}]}