{"files":[{"patch":"@@ -150,0 +150,7 @@\n+\n+struct vmmap {\n+  char* addr;\n+  size_t size;\n+};\n+\n+static GrowableArray<vmmap>* execmaps = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<vmmap>(8, mtInternal);\n@@ -534,0 +541,54 @@\n+#ifdef __APPLE__\n+static void execmap_add(char* addr, size_t size) {\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    vmmap* m = execmaps->adr_at(i);\n+    if (m->addr < addr) {\n+      guarantee(m->addr + m->size <= addr, \"unexpected intersection\");\n+      continue;\n+    }\n+    guarantee(addr + size <= m->addr, \"unexpected intersection\");\n+    execmaps->insert_before(i, { addr, size });\n+    return;\n+  }\n+  execmaps->append({ addr, size });\n+}\n+\n+static void execmap_remove(char* addr, size_t size) {\n+  char* e = addr + size;\n+  for (int i = 0; i < execmaps->length();) {\n+    vmmap* m = execmaps->adr_at(i);\n+    char* me = m->addr + m->size;\n+    if (me < addr || e <= m->addr) {\n+      ++i;\n+      continue;\n+    }\n+    if (addr <= m->addr && me <= e) {\n+      execmaps->remove_at(i);\n+    } else if (addr <= m->addr && e < me) {\n+      m->addr = e;\n+      m->size = me - m->addr;\n+      ++i;\n+    } else if (m->addr < addr && me <= e) {\n+      m->size = m->addr - addr;\n+      ++i;\n+    } else {\n+      assert(m->addr < addr && e < me, \"last option\");\n+      m->size = m->addr - addr;\n+      execmaps->insert_before(i + 1, { e, size_t(me - e) });\n+      i += 2;\n+    }\n+  }\n+}\n+\n+static bool execmap_intersect(char* addr, size_t size) {\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    vmmap* m = execmaps->adr_at(i);\n+    if (m->addr + m->size < addr || addr + size <= m->addr) {\n+      continue;\n+    }\n+    return true;\n+  }\n+  return false;\n+}\n+#endif \/\/ __APPLE__\n+\n@@ -1915,0 +1976,1 @@\n+      execmap_remove(addr, size);\n@@ -2010,6 +2072,2 @@\n-  if (false) {\n-    if (::madvise(addr, size, MADV_FREE) != 0) {\n-      return false;\n-    }\n-    return ::mprotect(addr, size, PROT_NONE) == 0;\n-  } else {\n+  bool exec = execmap_intersect(addr, size);\n+  if (!exec) {\n@@ -2017,1 +2075,1 @@\n-        MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+                                       MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n@@ -2019,0 +2077,3 @@\n+  } else {\n+    ::madvise(addr, size, MADV_FREE);\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n@@ -2040,1 +2101,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes, bool executable) {\n+static char* anon_mmap(char* requested_addr, size_t bytes) {\n@@ -2042,1 +2103,2 @@\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| (executable ? MAP_JIT : 0));\n+  \/\/ On MacOS, always use MAP_JIT and drop that on a first exec\/non-exec pd_commit_memory\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| MAP_JIT);\n@@ -2049,0 +2111,6 @@\n+#ifdef __APPLE__\n+  if (MAP_FAILED != addr) {\n+    execmap_add(addr, bytes);\n+  }\n+#endif\n+\n@@ -2053,0 +2121,3 @@\n+#ifdef __APPLE__\n+  execmap_remove(addr, size);\n+#endif\n@@ -2056,2 +2127,2 @@\n-char* os::pd_reserve_memory(size_t bytes, bool executable) {\n-  return anon_mmap(NULL \/* addr *\/, bytes, executable);\n+char* os::pd_reserve_memory(size_t bytes) {\n+  return anon_mmap(NULL \/* addr *\/, bytes);\n@@ -2167,1 +2238,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes, false\/*executable*\/);\n+  char * addr = anon_mmap(requested_addr, bytes);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":83,"deletions":12,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, !ExecMem, mtGC);\n+  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  char* addr = os::reserve_memory(size, !ExecMem, flags);\n+  char* addr = os::reserve_memory(size, flags);\n@@ -76,1 +76,1 @@\n-  char* addr = os::reserve_memory(size, !ExecMem, flags);\n+  char* addr = os::reserve_memory(size, flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,5 +197,1 @@\n-      if (!_executable) {\n-        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n-      } else {\n-        base = os::reserve_memory(size, ExecMem);\n-      }\n+      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n@@ -385,5 +381,1 @@\n-      if (!executable()) {\n-        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n-      } else {\n-        base = os::reserve_memory(size, ExecMem);\n-      }\n+      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1655,2 +1655,2 @@\n-char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n-  char* result = pd_reserve_memory(bytes, executable);\n+char* os::reserve_memory(size_t bytes, MEMFLAGS flags) {\n+  char* result = pd_reserve_memory(bytes);\n@@ -1678,1 +1678,1 @@\n-    result = pd_reserve_memory(bytes, !ExecMem);\n+    result = pd_reserve_memory(bytes);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  static char*  pd_reserve_memory(size_t bytes, bool executable);\n+  static char*  pd_reserve_memory(size_t bytes);\n@@ -317,1 +317,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtOther);\n+  static char*  reserve_memory(size_t bytes, MEMFLAGS flags = mtOther);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}