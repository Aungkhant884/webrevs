{"files":[{"patch":"@@ -1961,1 +1961,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -2038,1 +2038,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1681,1 +1681,1 @@\n-#ifdef __OpenBSD__\n+#if defined(__OpenBSD__)\n@@ -1687,0 +1687,4 @@\n+#elif defined(__APPLE__)\n+  if (::mprotect(addr, size, prot) == 0) {\n+    return true;\n+  }\n@@ -1769,2 +1773,2 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n-#ifdef __OpenBSD__\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n+#if defined(__OpenBSD__)\n@@ -1774,0 +1778,11 @@\n+#elif defined(__APPLE__)\n+  if (exec) {\n+    if (::madvise(addr, size, MADV_FREE) != 0) {\n+      return false;\n+    }\n+    return ::mprotect(addr, size, PROT_NONE) == 0;\n+  } else {\n+    uintptr_t res = (uintptr_t) ::mmap(addr, size, PROT_NONE,\n+        MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE|MAP_ANONYMOUS, -1, 0);\n+    return res  != (uintptr_t) MAP_FAILED;\n+  }\n@@ -1788,1 +1803,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -1794,1 +1809,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes) {\n+static char* anon_mmap(char* requested_addr, size_t bytes, bool exec) {\n@@ -1796,1 +1811,2 @@\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS\n+      MACOS_ONLY(| (exec ? MAP_JIT : 0));\n@@ -1810,2 +1826,2 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n-  return anon_mmap(NULL \/* addr *\/, bytes);\n+char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+  return anon_mmap(NULL \/* addr *\/, bytes, exec);\n@@ -1921,1 +1937,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes);\n+  char * addr = anon_mmap(requested_addr, bytes, !ExecMem);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3275,1 +3275,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t size) {\n+bool os::pd_uncommit_memory(char* addr, size_t size, bool exec) {\n@@ -3460,1 +3460,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n@@ -3519,1 +3519,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n@@ -341,1 +341,1 @@\n-  char* extra_base = os::reserve_memory(extra_size);\n+  char* extra_base = os::reserve_memory(extra_size, exec);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3270,1 +3270,2 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+  \/\/ exec can be ignored\n@@ -3278,1 +3279,1 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec) {\n@@ -3479,1 +3480,1 @@\n-bool os::pd_uncommit_memory(char* addr, size_t bytes) {\n+bool os::pd_uncommit_memory(char* addr, size_t bytes, bool exec) {\n@@ -3548,1 +3549,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,1 +590,2 @@\n-                               uncommit_region.byte_size())) {\n+                               uncommit_region.byte_size(),\n+                               !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,1 +257,2 @@\n-                                 uncommit_region.byte_size())) {\n+                                 uncommit_region.byte_size(),\n+                                 !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1348,1 +1348,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem)) {\n@@ -2893,1 +2893,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, mtGC);\n+  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n@@ -76,1 +76,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,4 +83,3 @@\n-\/\/ Helper method\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd) {\n-  if (fd != -1) {\n-    return os::attempt_map_memory_to_file_at(base, size, fd);\n+char* ReservedSpace::attempt_reserve_memory_at(char* base, size_t size) {\n+  if (_fd_for_heap != -1) {\n+    return os::attempt_map_memory_to_file_at(base, size, _fd_for_heap);\n@@ -88,0 +87,2 @@\n+  assert(!_special, \"should not call this\");\n+  assert(!_executable, \"unsupported\");\n@@ -91,4 +92,3 @@\n-\/\/ Helper method\n-static char* map_or_reserve_memory(size_t size, int fd) {\n-  if (fd != -1) {\n-    return os::map_memory_to_file(size, fd);\n+char* ReservedSpace::reserve_memory(size_t size) {\n+  if (_fd_for_heap != -1) {\n+    return os::map_memory_to_file(size, _fd_for_heap);\n@@ -96,1 +96,2 @@\n-  return os::reserve_memory(size);\n+  assert(!_special, \"should not call this\");\n+  return os::reserve_memory(size, _executable);\n@@ -99,4 +100,3 @@\n-\/\/ Helper method\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd) {\n-  if (fd != -1) {\n-    return os::map_memory_to_file_aligned(size, alignment, fd);\n+char* ReservedSpace::reserve_memory_aligned(size_t size, size_t alignment) {\n+  if (_fd_for_heap != -1) {\n+    return os::map_memory_to_file_aligned(size, alignment, _fd_for_heap);\n@@ -104,1 +104,1 @@\n-  return os::reserve_memory_aligned(size, alignment);\n+  return os::reserve_memory_aligned(size, alignment, _executable);\n@@ -107,3 +107,2 @@\n-\/\/ Helper method\n-static void unmap_or_release_memory(char* base, size_t size, bool is_file_mapped) {\n-  if (is_file_mapped) {\n+void ReservedSpace::release_memory(char* base, size_t size) {\n+  if (_fd_for_heap != -1) {\n@@ -113,2 +112,8 @@\n-  } else if (!os::release_memory(base, size)) {\n-    fatal(\"os::release_memory failed\");\n+  } else if (_special) {\n+    if (!os::release_memory_special(base, size)) {\n+      fatal(\"os::release_memory_special failed\");\n+    }\n+  } else {\n+    if (!os::release_memory(base, size)) {\n+      fatal(\"os::release_memory failed\");\n+    }\n@@ -118,4 +123,3 @@\n-\/\/ Helper method.\n-static bool failed_to_reserve_as_requested(char* base, char* requested_address,\n-                                           const size_t size, bool special, bool is_file_mapped = false)\n-{\n+bool ReservedSpace::failed_to_reserve_as_requested(char* base,\n+                                                   char* requested_address,\n+                                                   const size_t size) {\n@@ -131,7 +135,1 @@\n-    if (special) {\n-      if (!os::release_memory_special(base, size)) {\n-        fatal(\"os::release_memory_special failed\");\n-      }\n-    } else {\n-      unmap_or_release_memory(base, size, is_file_mapped);\n-    }\n+    release_memory(base, size);\n@@ -170,3 +168,3 @@\n-  bool special = large && !os::can_commit_large_page_memory();\n-  if (special && _fd_for_heap != -1) {\n-    special = false;\n+  _special = large && !os::can_commit_large_page_memory();\n+  if (_special && _fd_for_heap != -1) {\n+    _special = false;\n@@ -181,1 +179,1 @@\n-  if (special) {\n+  if (_special) {\n@@ -186,1 +184,1 @@\n-      if (failed_to_reserve_as_requested(base, requested_address, size, true)) {\n+      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -195,1 +193,0 @@\n-      _special = true;\n@@ -197,0 +194,1 @@\n+      _special = false;\n@@ -215,2 +213,2 @@\n-      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap);\n-      if (failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n+      base = attempt_reserve_memory_at(requested_address, size);\n+      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -221,1 +219,1 @@\n-      base = map_or_reserve_memory(size, _fd_for_heap);\n+      base = reserve_memory(size);\n@@ -229,1 +227,1 @@\n-      unmap_or_release_memory(base, size, _fd_for_heap != -1 \/*is_file_mapped*\/);\n+      release_memory(base, size);\n@@ -233,1 +231,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, _fd_for_heap);\n+      base = reserve_memory_aligned(size, alignment);\n@@ -236,1 +234,1 @@\n-          failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n+          failed_to_reserve_as_requested(base, requested_address, size)) {\n@@ -310,11 +308,6 @@\n-    char *real_base = _base - _noaccess_prefix;\n-    const size_t real_size = _size + _noaccess_prefix;\n-    if (special()) {\n-      if (_fd_for_heap != -1) {\n-        os::unmap_memory(real_base, real_size);\n-      } else {\n-        os::release_memory_special(real_base, real_size);\n-      }\n-    } else{\n-      os::release_memory(real_base, real_size);\n-    }\n+    \/\/ revert effect of establish_noaccess_prefix\n+    _base -= _noaccess_prefix;\n+    _size += _noaccess_prefix;\n+\n+    release_memory(_base, _size);\n+\n@@ -381,3 +374,3 @@\n-  bool special = large && !os::can_commit_large_page_memory();\n-  if (special && _fd_for_heap != -1) {\n-    special = false;\n+  _special = large && !os::can_commit_large_page_memory();\n+  if (_special && _fd_for_heap != -1) {\n+    _special = false;\n@@ -396,1 +389,1 @@\n-  if (special) {\n+  if (_special) {\n@@ -405,1 +398,2 @@\n-      _special = true;\n+    } else {\n+      _special = false;\n@@ -417,1 +411,1 @@\n-      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap);\n+      base = attempt_reserve_memory_at(requested_address, size);\n@@ -423,1 +417,1 @@\n-      base = map_or_reserve_memory(size, _fd_for_heap);\n+      base = reserve_memory(size);\n@@ -1027,1 +1021,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable)) {\n@@ -1038,1 +1032,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable)) {\n@@ -1049,1 +1043,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":57,"deletions":63,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+  bool failed_to_reserve_as_requested(char* base, char* requested_address, size_t size);\n+\n@@ -55,0 +57,6 @@\n+\n+  char* attempt_reserve_memory_at(char* base, size_t size);\n+  char* reserve_memory(size_t size);\n+  char* reserve_memory_aligned(size_t size, size_t alignment);\n+  void  release_memory(char* base, size_t size);\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -682,1 +682,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1659,2 +1659,2 @@\n-char* os::reserve_memory(size_t bytes, MEMFLAGS flags) {\n-  char* result = pd_reserve_memory(bytes);\n+char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+  char* result = pd_reserve_memory(bytes, executable);\n@@ -1711,1 +1711,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes) {\n+bool os::uncommit_memory(char* addr, size_t bytes, bool executable) {\n@@ -1715,1 +1715,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, executable);\n@@ -1720,1 +1720,1 @@\n-    res = pd_uncommit_memory(addr, bytes);\n+    res = pd_uncommit_memory(addr, bytes, executable);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  static char*  pd_reserve_memory(size_t bytes);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable);\n@@ -131,1 +131,1 @@\n-  static bool   pd_uncommit_memory(char* addr, size_t bytes);\n+  static bool   pd_uncommit_memory(char* addr, size_t bytes, bool executable);\n@@ -318,1 +318,1 @@\n-  static char*  reserve_memory(size_t bytes, MEMFLAGS flags = mtOther);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtOther);\n@@ -321,1 +321,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n@@ -325,0 +325,2 @@\n+  \/\/ It's intentionally cannot reserve executable mapping, as some platforms does not allow that\n+  \/\/ (e.g. macOS with proper MAP_JIT use).\n@@ -347,1 +349,1 @@\n-  static bool   uncommit_memory(char* addr, size_t bytes);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool executable);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-    char* base = os::reserve_memory(size, mtThreadStack);\n-    bool result = os::commit_memory(base, size, false);\n+    char* base = os::reserve_memory(size, !ExecMem, mtThreadStack);\n+    bool result = os::commit_memory(base, size, !ExecMem);\n@@ -172,1 +172,1 @@\n-    char* base = os::reserve_memory(size, mtTest);\n+    char* base = os::reserve_memory(size, !ExecMem, mtTest);\n@@ -174,1 +174,1 @@\n-    result = os::commit_memory(base, size, false);\n+    result = os::commit_memory(base, size, !ExecMem);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}