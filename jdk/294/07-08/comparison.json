{"files":[{"patch":"@@ -2239,1 +2239,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1803,1 +1803,1 @@\n-  return os::uncommit_memory(addr, size, !ExecMem);\n+  return os::uncommit_memory(addr, size);\n@@ -1912,1 +1912,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n@@ -1924,1 +1924,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n@@ -1937,1 +1937,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes, !ExecMem);\n+  char * addr = anon_mmap(requested_addr, bytes, exec);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3460,1 +3460,1 @@\n-  return os::uncommit_memory(addr, size, !ExecMem);\n+  return os::uncommit_memory(addr, size);\n@@ -4202,1 +4202,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n@@ -4214,1 +4214,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3280,1 +3280,1 @@\n-  return pd_attempt_reserve_memory_at(NULL \/* addr *\/, bytes);\n+  return pd_attempt_reserve_memory_at(NULL \/* addr *\/, bytes, exec);\n@@ -3285,1 +3285,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes) {\n+char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool exec) {\n@@ -3549,1 +3549,1 @@\n-  return os::uncommit_memory(addr, size, !ExecMem);\n+  return os::uncommit_memory(addr, size);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem);\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,2 +590,1 @@\n-                               uncommit_region.byte_size(),\n-                               !ExecMem)) {\n+                               uncommit_region.byte_size())) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,2 +257,1 @@\n-                                 uncommit_region.byte_size(),\n-                                 !ExecMem)) {\n+                                 uncommit_region.byte_size())) {\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1348,1 +1348,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem)) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n@@ -2893,1 +2893,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,3 +83,4 @@\n-char* ReservedSpace::attempt_reserve_memory_at(char* base, size_t size) {\n-  if (_fd_for_heap != -1) {\n-    return os::attempt_map_memory_to_file_at(base, size, _fd_for_heap);\n+\/\/ Helper method\n+static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable) {\n+  if (fd != -1) {\n+    return os::attempt_map_memory_to_file_at(base, size, fd);\n@@ -87,3 +88,1 @@\n-  assert(!_special, \"should not call this\");\n-  assert(!_executable, \"unsupported\");\n-  return os::attempt_reserve_memory_at(base, size);\n+  return os::attempt_reserve_memory_at(base, size, executable);\n@@ -92,3 +91,4 @@\n-char* ReservedSpace::reserve_memory(size_t size) {\n-  if (_fd_for_heap != -1) {\n-    return os::map_memory_to_file(size, _fd_for_heap);\n+\/\/ Helper method\n+static char* map_or_reserve_memory(size_t size, int fd, bool executable) {\n+  if (fd != -1) {\n+    return os::map_memory_to_file(size, fd);\n@@ -96,2 +96,1 @@\n-  assert(!_special, \"should not call this\");\n-  return os::reserve_memory(size, _executable);\n+  return os::reserve_memory(size, executable);\n@@ -100,3 +99,4 @@\n-char* ReservedSpace::reserve_memory_aligned(size_t size, size_t alignment) {\n-  if (_fd_for_heap != -1) {\n-    return os::map_memory_to_file_aligned(size, alignment, _fd_for_heap);\n+\/\/ Helper method\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable) {\n+  if (fd != -1) {\n+    return os::map_memory_to_file_aligned(size, alignment, fd);\n@@ -104,1 +104,1 @@\n-  return os::reserve_memory_aligned(size, alignment, _executable);\n+  return os::reserve_memory_aligned(size, alignment, executable);\n@@ -107,2 +107,3 @@\n-void ReservedSpace::release_memory(char* base, size_t size) {\n-  if (_fd_for_heap != -1) {\n+\/\/ Helper method\n+static void unmap_or_release_memory(char* base, size_t size, bool is_file_mapped) {\n+  if (is_file_mapped) {\n@@ -112,8 +113,2 @@\n-  } else if (_special) {\n-    if (!os::release_memory_special(base, size)) {\n-      fatal(\"os::release_memory_special failed\");\n-    }\n-  } else {\n-    if (!os::release_memory(base, size)) {\n-      fatal(\"os::release_memory failed\");\n-    }\n+  } else if (!os::release_memory(base, size)) {\n+    fatal(\"os::release_memory failed\");\n@@ -123,3 +118,4 @@\n-bool ReservedSpace::failed_to_reserve_as_requested(char* base,\n-                                                   char* requested_address,\n-                                                   const size_t size) {\n+\/\/ Helper method.\n+static bool failed_to_reserve_as_requested(char* base, char* requested_address,\n+                                           const size_t size, bool special, bool is_file_mapped = false)\n+{\n@@ -135,1 +131,7 @@\n-    release_memory(base, size);\n+    if (special) {\n+      if (!os::release_memory_special(base, size)) {\n+        fatal(\"os::release_memory_special failed\");\n+      }\n+    } else {\n+      unmap_or_release_memory(base, size, is_file_mapped);\n+    }\n@@ -168,3 +170,3 @@\n-  _special = large && !os::can_commit_large_page_memory();\n-  if (_special && _fd_for_heap != -1) {\n-    _special = false;\n+  bool special = large && !os::can_commit_large_page_memory();\n+  if (special && _fd_for_heap != -1) {\n+    special = false;\n@@ -179,1 +181,1 @@\n-  if (_special) {\n+  if (special) {\n@@ -184,1 +186,1 @@\n-      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n+      if (failed_to_reserve_as_requested(base, requested_address, size, true)) {\n@@ -193,0 +195,1 @@\n+      _special = true;\n@@ -194,1 +197,0 @@\n-      _special = false;\n@@ -213,2 +215,2 @@\n-      base = attempt_reserve_memory_at(requested_address, size);\n-      if (failed_to_reserve_as_requested(base, requested_address, size)) {\n+      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap, _executable);\n+      if (failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n@@ -219,1 +221,1 @@\n-      base = reserve_memory(size);\n+      base = map_or_reserve_memory(size, _fd_for_heap, _executable);\n@@ -227,1 +229,1 @@\n-      release_memory(base, size);\n+      unmap_or_release_memory(base, size, _fd_for_heap != -1 \/*is_file_mapped*\/);\n@@ -231,1 +233,1 @@\n-      base = reserve_memory_aligned(size, alignment);\n+      base = map_or_reserve_memory_aligned(size, alignment, _fd_for_heap, _executable);\n@@ -234,1 +236,1 @@\n-          failed_to_reserve_as_requested(base, requested_address, size)) {\n+          failed_to_reserve_as_requested(base, requested_address, size, false, _fd_for_heap != -1)) {\n@@ -308,6 +310,11 @@\n-    \/\/ revert effect of establish_noaccess_prefix\n-    _base -= _noaccess_prefix;\n-    _size += _noaccess_prefix;\n-\n-    release_memory(_base, _size);\n-\n+    char *real_base = _base - _noaccess_prefix;\n+    const size_t real_size = _size + _noaccess_prefix;\n+    if (special()) {\n+      if (_fd_for_heap != -1) {\n+        os::unmap_memory(real_base, real_size);\n+      } else {\n+        os::release_memory_special(real_base, real_size);\n+      }\n+    } else{\n+      os::release_memory(real_base, real_size);\n+    }\n@@ -374,3 +381,3 @@\n-  _special = large && !os::can_commit_large_page_memory();\n-  if (_special && _fd_for_heap != -1) {\n-    _special = false;\n+  bool special = large && !os::can_commit_large_page_memory();\n+  if (special && _fd_for_heap != -1) {\n+    special = false;\n@@ -389,1 +396,1 @@\n-  if (_special) {\n+  if (special) {\n@@ -398,2 +405,1 @@\n-    } else {\n-      _special = false;\n+      _special = true;\n@@ -411,1 +417,1 @@\n-      base = attempt_reserve_memory_at(requested_address, size);\n+      base = attempt_map_or_reserve_memory_at(requested_address, size, _fd_for_heap, executable());\n@@ -417,1 +423,1 @@\n-      base = reserve_memory(size);\n+      base = map_or_reserve_memory(size, _fd_for_heap, executable());\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":61,"deletions":55,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-  bool failed_to_reserve_as_requested(char* base, char* requested_address, size_t size);\n-\n@@ -57,6 +55,0 @@\n-\n-  char* attempt_reserve_memory_at(char* base, size_t size);\n-  char* reserve_memory(size_t size);\n-  char* reserve_memory_aligned(size_t size, size_t alignment);\n-  void  release_memory(char* base, size_t size);\n-\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -682,1 +682,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1671,2 +1671,2 @@\n-char* os::attempt_reserve_memory_at(char* addr, size_t bytes) {\n-  char* result = pd_attempt_reserve_memory_at(addr, bytes);\n+char* os::attempt_reserve_memory_at(char* addr, size_t bytes, bool executable) {\n+  char* result = pd_attempt_reserve_memory_at(addr, bytes, executable);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes);\n+  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool executable);\n@@ -325,3 +325,1 @@\n-  \/\/ It's intentionally cannot reserve executable mapping, as some platforms does not allow that\n-  \/\/ (e.g. macOS with proper MAP_JIT use).\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false);\n@@ -349,1 +347,1 @@\n-  static bool   uncommit_memory(char* addr, size_t bytes, bool executable);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool executable = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}