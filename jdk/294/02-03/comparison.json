{"files":[{"patch":"@@ -542,1 +542,2 @@\n-static void execmap_add(char* addr, size_t size) {\n+\n+static int execmap_find(char* addr, size_t size) {\n@@ -545,3 +546,6 @@\n-    if (m->addr < addr) {\n-      guarantee(m->addr + m->size <= addr, \"unexpected intersection\");\n-      continue;\n+    if (m->addr <= addr && addr < m->addr + m->size) {\n+      assert(addr + size <= m->addr + m->size, \"goes beyond\");\n+      return i;\n+    } else {\n+      assert(addr + size <= m->addr || m->addr + m->size <= addr,\n+          \"should not intersect\");\n@@ -549,3 +553,0 @@\n-    guarantee(addr + size <= m->addr, \"unexpected intersection\");\n-    execmaps->insert_before(i, { addr, size });\n-    return;\n@@ -553,1 +554,1 @@\n-  execmaps->append({ addr, size });\n+  return -1;\n@@ -556,23 +557,6 @@\n-static void execmap_remove(char* addr, size_t size) {\n-  char* e = addr + size;\n-  for (int i = 0; i < execmaps->length();) {\n-    vmmap* m = execmaps->adr_at(i);\n-    char* me = m->addr + m->size;\n-    if (me < addr || e <= m->addr) {\n-      ++i;\n-      continue;\n-    }\n-    if (addr <= m->addr && me <= e) {\n-      execmaps->remove_at(i);\n-    } else if (addr <= m->addr && e < me) {\n-      m->addr = e;\n-      m->size = me - m->addr;\n-      ++i;\n-    } else if (m->addr < addr && me <= e) {\n-      m->size = m->addr - addr;\n-      ++i;\n-    } else {\n-      assert(m->addr < addr && e < me, \"last option\");\n-      m->size = m->addr - addr;\n-      execmaps->insert_before(i + 1, { e, size_t(me - e) });\n-      i += 2;\n+static void execmap_add(char* addr, size_t size) {\n+  assert(-1 == execmap_find(addr, size), \"should not intersect\");\n+  for (int i = 0; i < execmaps->length(); ++i) {\n+    if (addr < execmaps->at(i).addr) {\n+      execmaps->insert_before(i, { addr, size });\n+      return;\n@@ -581,0 +565,1 @@\n+  execmaps->append({ addr, size });\n@@ -583,7 +568,3 @@\n-static bool execmap_intersect(char* addr, size_t size) {\n-  for (int i = 0; i < execmaps->length(); ++i) {\n-    vmmap* m = execmaps->adr_at(i);\n-    if (m->addr + m->size < addr || addr + size <= m->addr) {\n-      continue;\n-    }\n-    return true;\n+static void execmap_remove(int emap) {\n+  if (0 <= emap) {\n+    execmaps->remove_at(emap);\n@@ -591,1 +572,0 @@\n-  return false;\n@@ -593,0 +573,10 @@\n+\n+static void execmap_remove(char* addr, size_t size) {\n+  int to_remove = execmap_find(addr, size);\n+  if (0 <= to_remove) {\n+    assert(execmaps->at(to_remove).addr == addr && execmaps->at(to_remove).size == size,\n+        \"should remove whole mapping\");\n+    execmaps->remove_at(to_remove);\n+  }\n+}\n+\n@@ -1973,0 +1963,1 @@\n+    assert(-1 == execmap_find(addr, size), \"should NOT have execmap\");\n@@ -1976,1 +1967,0 @@\n-      execmap_remove(addr, size);\n@@ -1980,0 +1970,1 @@\n+    assert(-1 != execmap_find(addr, size), \"should have execmap\");\n@@ -2072,1 +2063,1 @@\n-  bool exec = execmap_intersect(addr, size);\n+  bool exec = 0 <= execmap_find(addr, size);\n@@ -2101,1 +2092,1 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes) {\n+static char* anon_mmap(char* requested_addr, size_t bytes, bool executable) {\n@@ -2103,2 +2094,1 @@\n-  \/\/ On MacOS, always use MAP_JIT and drop that on a first exec\/non-exec pd_commit_memory\n-  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| MAP_JIT);\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS MACOS_ONLY(| (executable ? MAP_JIT : 0));\n@@ -2112,1 +2102,1 @@\n-  if (MAP_FAILED != addr) {\n+  if (executable && MAP_FAILED != addr) {\n@@ -2127,2 +2117,2 @@\n-char* os::pd_reserve_memory(size_t bytes) {\n-  return anon_mmap(NULL \/* addr *\/, bytes);\n+char* os::pd_reserve_memory(size_t bytes, bool executable) {\n+  return anon_mmap(NULL \/* addr *\/, bytes, executable);\n@@ -2238,1 +2228,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes);\n+  char * addr = anon_mmap(requested_addr, bytes, false\/*executable*\/);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":38,"deletions":48,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, mtGC);\n+  const uintptr_t addr = (uintptr_t)os::reserve_memory(size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n@@ -76,1 +76,1 @@\n-  char* addr = os::reserve_memory(size, flags);\n+  char* addr = os::reserve_memory(size, !ExecMem, flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,1 +197,5 @@\n-      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      if (!_executable) {\n+        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      } else {\n+        base = os::reserve_memory(size, ExecMem);\n+      }\n@@ -381,1 +385,5 @@\n-      base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      if (!executable()) {\n+        base = os::reserve_memory_with_fd(size, _fd_for_heap);\n+      } else {\n+        base = os::reserve_memory(size, ExecMem);\n+      }\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1655,2 +1655,2 @@\n-char* os::reserve_memory(size_t bytes, MEMFLAGS flags) {\n-  char* result = pd_reserve_memory(bytes);\n+char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+  char* result = pd_reserve_memory(bytes, executable);\n@@ -1678,1 +1678,1 @@\n-    result = pd_reserve_memory(bytes);\n+    result = pd_reserve_memory(bytes, !ExecMem);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  static char*  pd_reserve_memory(size_t bytes);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable);\n@@ -317,1 +317,1 @@\n-  static char*  reserve_memory(size_t bytes, MEMFLAGS flags = mtOther);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtOther);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}