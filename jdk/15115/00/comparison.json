{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,1 +192,1 @@\n-  log_info_p(gc, init)(\"Probing address space for the highest valid bit: \" SIZE_FORMAT, max_address_bit);\n+  log_info_p(gc, init)(\"Probing address space for the highest valid bit: %zu\", max_address_bit);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/xGlobals_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  log_info_p(gc, init)(\"Probing address space for the highest valid bit: \" SIZE_FORMAT, max_address_bit);\n+  log_info_p(gc, init)(\"Probing address space for the highest valid bit: %zu\", max_address_bit);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-    st->print   (\"SUB    R_SP, R_SP, \" SIZE_FORMAT,framesize);\n+    st->print   (\"SUB    R_SP, R_SP, %zu\",framesize);\n@@ -370,1 +370,1 @@\n-    st->print(\"ADD    R_SP, R_SP, \" SIZE_FORMAT \"\\n\\t\",framesize);\n+    st->print(\"ADD    R_SP, R_SP, %zu\\n\\t\",framesize);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  log_info_p(gc, init)(\"Probing address space for the highest valid bit: \" SIZE_FORMAT, max_address_bit);\n+  log_info_p(gc, init)(\"Probing address space for the highest valid bit: %zu\", max_address_bit);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,1 +194,1 @@\n-  log_info_p(gc, init)(\"Probing address space for the highest valid bit: \" SIZE_FORMAT, max_address_bit);\n+  log_info_p(gc, init)(\"Probing address space for the highest valid bit: %zu\", max_address_bit);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/xGlobals_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  log_info_p(gc, init)(\"Probing address space for the highest valid bit: \" SIZE_FORMAT, max_address_bit);\n+  log_info_p(gc, init)(\"Probing address space for the highest valid bit: %zu\", max_address_bit);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    guarantee(false, \"displacement = \" SIZE_FORMAT_X \", out of range for LA\/LAY\", a.disp());\n+    guarantee(false, \"displacement = 0x%zx, out of range for LA\/LAY\", a.disp());\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  assert(index == 0 || is_power_of_2(index), \"Incorrect load shift: \" SIZE_FORMAT, index);\n+  assert(index == 0 || is_power_of_2(index), \"Incorrect load shift: %zu\", index);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zAddress_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-  trcVerbose(\"loadquery buffer size is \" SIZE_FORMAT \".\", buflen);\n+  trcVerbose(\"loadquery buffer size is %zu.\", buflen);\n@@ -262,1 +262,1 @@\n-    trcVerbose(\"entry: %p \" SIZE_FORMAT \", %p \" SIZE_FORMAT \", %s %s %s, %d\",\n+    trcVerbose(\"entry: %p %zu, %p %zu, %s %s %s, %d\",\n","filename":"src\/hotspot\/os\/aix\/loadlib_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-          trcVerbose(\"real page size (\" SIZE_FORMAT_X \") differs.\", real_pagesize);\n+          trcVerbose(\"real page size (0x%zx) differs.\", real_pagesize);\n@@ -692,1 +692,1 @@\n-             \", stack [\" PTR_FORMAT \" - \" PTR_FORMAT \" (\" SIZE_FORMAT \"k using %uk pages)).\",\n+             \", stack [\" PTR_FORMAT \" - \" PTR_FORMAT \" (%zuk using %uk pages)).\",\n@@ -797,1 +797,1 @@\n-    log_warning(os, thread)(\"The %sthread stack size specified is invalid: \" SIZE_FORMAT \"k\",\n+    log_warning(os, thread)(\"The %sthread stack size specified is invalid: %zuk\",\n@@ -832,1 +832,1 @@\n-    log_warning(os, thread)(\"Checking JVM parameter MaxExpectedDataSegmentSize (currently \" SIZE_FORMAT \"k)  might be helpful\", MaxExpectedDataSegmentSize\/K);\n+    log_warning(os, thread)(\"Checking JVM parameter MaxExpectedDataSegmentSize (currently %zuk)  might be helpful\", MaxExpectedDataSegmentSize\/K);\n@@ -903,1 +903,1 @@\n-                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (\" SIZE_FORMAT \"K) ).\",\n+                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (%zuK) ).\",\n@@ -1246,4 +1246,4 @@\n-      st->print_cr(\"physical total : \" SIZE_FORMAT, mi.real_total);\n-      st->print_cr(\"physical free  : \" SIZE_FORMAT, mi.real_free);\n-      st->print_cr(\"swap total     : \" SIZE_FORMAT, mi.pgsp_total);\n-      st->print_cr(\"swap free      : \" SIZE_FORMAT, mi.pgsp_free);\n+      st->print_cr(\"physical total : %zu\", mi.real_total);\n+      st->print_cr(\"physical free  : %zu\", mi.real_free);\n+      st->print_cr(\"swap total     : %zu\", mi.pgsp_total);\n+      st->print_cr(\"swap free      : %zu\", mi.pgsp_free);\n@@ -1256,2 +1256,2 @@\n-      st->print_cr(\"physical total     : \" SIZE_FORMAT, mi.real_total);\n-      st->print_cr(\"system asp total   : \" SIZE_FORMAT, mi.pgsp_total);\n+      st->print_cr(\"physical total     : %zu\", mi.real_total);\n+      st->print_cr(\"system asp total   : %zu\", mi.pgsp_total);\n@@ -1268,1 +1268,1 @@\n-    st->print_cr(\"Program break now          : \" PTR_FORMAT \" (distance: \" SIZE_FORMAT \"k).\",\n+    st->print_cr(\"Program break now          : \" PTR_FORMAT \" (distance: %zuk).\",\n@@ -1271,1 +1271,1 @@\n-  st->print_cr(\"MaxExpectedDataSegmentSize    : \" SIZE_FORMAT \"k.\", MaxExpectedDataSegmentSize \/ K);\n+  st->print_cr(\"MaxExpectedDataSegmentSize    : %zuk.\", MaxExpectedDataSegmentSize \/ K);\n@@ -1586,1 +1586,1 @@\n-    trcVerbose(\"pagesize is, surprisingly, \" SIZE_FORMAT, real_pagesize);\n+    trcVerbose(\"pagesize is, surprisingly, %zu\", real_pagesize);\n@@ -1774,1 +1774,1 @@\n-  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", \" SIZE_FORMAT\n+  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", %zu\"\n@@ -1793,1 +1793,1 @@\n-    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n+    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (%zu)\",\n@@ -1796,1 +1796,1 @@\n-    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n+    \"size \" PTR_FORMAT \" not aligned to vm_page_size (%zu)\",\n@@ -1828,1 +1828,1 @@\n-    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n+    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (%zu)\",\n@@ -1831,1 +1831,1 @@\n-    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n+    \"size \" PTR_FORMAT \" not aligned to vm_page_size (%zu)\",\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -151,1 +151,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/bsd\/gc\/x\/xPhysicalMemoryBacking_bsd.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -152,1 +152,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -719,1 +719,1 @@\n-                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (\" SIZE_FORMAT \"K) ).\",\n+                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (%zuK) ).\",\n@@ -1382,1 +1382,1 @@\n-  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n+  st->print(\" %zuk page\", os::vm_page_size()>>10);\n@@ -1509,1 +1509,1 @@\n-  warning(\"INFO: os::commit_memory(\" INTPTR_FORMAT \", \" SIZE_FORMAT\n+  warning(\"INFO: os::commit_memory(\" INTPTR_FORMAT \", %zu\"\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    log_error_p(gc)(\"Filesystem backing the heap has incompatible block size (\" SIZE_FORMAT \")\",\n+    log_error_p(gc)(\"Filesystem backing the heap has incompatible block size (%zu)\",\n@@ -190,1 +190,1 @@\n-    log_error_p(gc)(\"%s filesystem has unexpected block size \" SIZE_FORMAT \" (expected \" SIZE_FORMAT \")\",\n+    log_error_p(gc)(\"%s filesystem has unexpected block size %zu (expected %zu)\",\n@@ -315,1 +315,1 @@\n-  log_info_p(gc, init)(\"Available space on backing filesystem: \" SIZE_FORMAT \"M\", _available \/ M);\n+  log_info_p(gc, init)(\"Available space on backing filesystem: %zuM\", _available \/ M);\n@@ -323,1 +323,1 @@\n-    log_warning_p(gc)(\"size (\" SIZE_FORMAT \"M). Please adjust the size of the backing filesystem accordingly \"\n+    log_warning_p(gc)(\"size (%zuM). Please adjust the size of the backing filesystem accordingly \"\n@@ -325,1 +325,1 @@\n-    log_warning_p(gc)(\"space is currently \" SIZE_FORMAT \"M). Continuing execution with the current filesystem \"\n+    log_warning_p(gc)(\"space is currently %zuM). Continuing execution with the current filesystem \"\n@@ -341,1 +341,1 @@\n-  const int result = fscanf(file, SIZE_FORMAT, &actual_max_map_count);\n+  const int result = fscanf(file, \"%zu\", &actual_max_map_count);\n@@ -358,1 +358,1 @@\n-    log_warning_p(gc)(\"max Java heap size (\" SIZE_FORMAT \"M). Please adjust %s to allow for at\",\n+    log_warning_p(gc)(\"max Java heap size (%zuM). Please adjust %s to allow for at\",\n@@ -360,1 +360,1 @@\n-    log_warning_p(gc)(\"least \" SIZE_FORMAT \" mappings (current limit is \" SIZE_FORMAT \"). Continuing execution \"\n+    log_warning_p(gc)(\"least %zu mappings (current limit is %zu). Continuing execution \"\n@@ -595,1 +595,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -695,1 +695,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/linux\/gc\/x\/xPhysicalMemoryBacking_linux.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-    log_error_p(gc)(\"Filesystem backing the heap has incompatible block size (\" SIZE_FORMAT \")\",\n+    log_error_p(gc)(\"Filesystem backing the heap has incompatible block size (%zu)\",\n@@ -191,1 +191,1 @@\n-    log_error_p(gc)(\"%s filesystem has unexpected block size \" SIZE_FORMAT \" (expected \" SIZE_FORMAT \")\",\n+    log_error_p(gc)(\"%s filesystem has unexpected block size %zu (expected %zu)\",\n@@ -316,1 +316,1 @@\n-  log_info_p(gc, init)(\"Available space on backing filesystem: \" SIZE_FORMAT \"M\", _available \/ M);\n+  log_info_p(gc, init)(\"Available space on backing filesystem: %zuM\", _available \/ M);\n@@ -324,1 +324,1 @@\n-    log_warning_p(gc)(\"size (\" SIZE_FORMAT \"M). Please adjust the size of the backing filesystem accordingly \"\n+    log_warning_p(gc)(\"size (%zuM). Please adjust the size of the backing filesystem accordingly \"\n@@ -326,1 +326,1 @@\n-    log_warning_p(gc)(\"space is currently \" SIZE_FORMAT \"M). Continuing execution with the current filesystem \"\n+    log_warning_p(gc)(\"space is currently %zuM). Continuing execution with the current filesystem \"\n@@ -342,1 +342,1 @@\n-  const int result = fscanf(file, SIZE_FORMAT, &actual_max_map_count);\n+  const int result = fscanf(file, \"%zu\", &actual_max_map_count);\n@@ -359,1 +359,1 @@\n-    log_warning_p(gc)(\"max Java heap size (\" SIZE_FORMAT \"M). Please adjust %s to allow for at\",\n+    log_warning_p(gc)(\"max Java heap size (%zuM). Please adjust %s to allow for at\",\n@@ -361,1 +361,1 @@\n-    log_warning_p(gc)(\"least \" SIZE_FORMAT \" mappings (current limit is \" SIZE_FORMAT \"). Continuing execution \"\n+    log_warning_p(gc)(\"least %zu mappings (current limit is %zu). Continuing execution \"\n@@ -596,1 +596,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -696,1 +696,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-    if (::fscanf(f, SIZE_FORMAT, out) == 1) {\n+    if (::fscanf(f, \"%zu\", out) == 1) {\n@@ -158,1 +158,1 @@\n-      log_info(pagesize)(\"Unexpected configuration: default pagesize (\" SIZE_FORMAT \") \"\n+      log_info(pagesize)(\"Unexpected configuration: default pagesize (%zu) \"\n","filename":"src\/hotspot\/os\/linux\/hugepages.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -851,1 +851,1 @@\n-  log_info(os, thread)(\"Stack size adjustment for TLS is \" SIZE_FORMAT,\n+  log_info(os, thread)(\"Stack size adjustment for TLS is %zu\",\n@@ -956,1 +956,1 @@\n-    log_warning(os, thread)(\"The %sthread stack size specified is invalid: \" SIZE_FORMAT \"k\",\n+    log_warning(os, thread)(\"The %sthread stack size specified is invalid: %zuk\",\n@@ -1094,1 +1094,1 @@\n-                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (\" SIZE_FORMAT \"K) ).\",\n+                       \", stack: \" PTR_FORMAT \" - \" PTR_FORMAT \" (%zuK) ).\",\n@@ -1386,2 +1386,2 @@\n-    log_info(os, thread)(\"Capturing initial stack in %s thread: req. size: \" SIZE_FORMAT \"K, actual size: \"\n-                         SIZE_FORMAT \"K, top=\" INTPTR_FORMAT \", bottom=\" INTPTR_FORMAT,\n+    log_info(os, thread)(\"Capturing initial stack in %s thread: req. size: %zuK, actual size: \"\n+                         \"%zuK, top=\" INTPTR_FORMAT \", bottom=\" INTPTR_FORMAT,\n@@ -2170,8 +2170,8 @@\n-      if ( (info->vmsize == -1    && sscanf(buf, \"VmSize: \" SSIZE_FORMAT \" kB\", &info->vmsize) == 1) ||\n-           (info->vmpeak == -1    && sscanf(buf, \"VmPeak: \" SSIZE_FORMAT \" kB\", &info->vmpeak) == 1) ||\n-           (info->vmswap == -1    && sscanf(buf, \"VmSwap: \" SSIZE_FORMAT \" kB\", &info->vmswap) == 1) ||\n-           (info->vmhwm == -1     && sscanf(buf, \"VmHWM: \" SSIZE_FORMAT \" kB\", &info->vmhwm) == 1) ||\n-           (info->vmrss == -1     && sscanf(buf, \"VmRSS: \" SSIZE_FORMAT \" kB\", &info->vmrss) == 1) ||\n-           (info->rssanon == -1   && sscanf(buf, \"RssAnon: \" SSIZE_FORMAT \" kB\", &info->rssanon) == 1) || \/\/ Needs Linux 4.5\n-           (info->rssfile == -1   && sscanf(buf, \"RssFile: \" SSIZE_FORMAT \" kB\", &info->rssfile) == 1) || \/\/ Needs Linux 4.5\n-           (info->rssshmem == -1  && sscanf(buf, \"RssShmem: \" SSIZE_FORMAT \" kB\", &info->rssshmem) == 1)  \/\/ Needs Linux 4.5\n+      if ( (info->vmsize == -1    && sscanf(buf, \"VmSize: %zd kB\", &info->vmsize) == 1) ||\n+           (info->vmpeak == -1    && sscanf(buf, \"VmPeak: %zd kB\", &info->vmpeak) == 1) ||\n+           (info->vmswap == -1    && sscanf(buf, \"VmSwap: %zd kB\", &info->vmswap) == 1) ||\n+           (info->vmhwm == -1     && sscanf(buf, \"VmHWM: %zd kB\", &info->vmhwm) == 1) ||\n+           (info->vmrss == -1     && sscanf(buf, \"VmRSS: %zd kB\", &info->vmrss) == 1) ||\n+           (info->rssanon == -1   && sscanf(buf, \"RssAnon: %zd kB\", &info->rssanon) == 1) || \/\/ Needs Linux 4.5\n+           (info->rssfile == -1   && sscanf(buf, \"RssFile: %zd kB\", &info->rssfile) == 1) || \/\/ Needs Linux 4.5\n+           (info->rssshmem == -1  && sscanf(buf, \"RssShmem: %zd kB\", &info->rssshmem) == 1)  \/\/ Needs Linux 4.5\n@@ -2225,2 +2225,2 @@\n-    st->print_cr(\"Virtual Size: \" SSIZE_FORMAT \"K (peak: \" SSIZE_FORMAT \"K)\", info.vmsize, info.vmpeak);\n-    st->print(\"Resident Set Size: \" SSIZE_FORMAT \"K (peak: \" SSIZE_FORMAT \"K)\", info.vmrss, info.vmhwm);\n+    st->print_cr(\"Virtual Size: %zdK (peak: %zdK)\", info.vmsize, info.vmpeak);\n+    st->print(\"Resident Set Size: %zdK (peak: %zdK)\", info.vmrss, info.vmhwm);\n@@ -2228,1 +2228,1 @@\n-      st->print(\" (anon: \" SSIZE_FORMAT \"K, file: \" SSIZE_FORMAT \"K, shmem: \" SSIZE_FORMAT \"K)\",\n+      st->print(\" (anon: %zdK, file: %zdK, shmem: %zdK)\",\n@@ -2233,1 +2233,1 @@\n-      st->print_cr(\"Swapped out: \" SSIZE_FORMAT \"K\", info.vmswap);\n+      st->print_cr(\"Swapped out: %zdK\", info.vmswap);\n@@ -2254,1 +2254,1 @@\n-  st->print_cr(\"C-Heap outstanding allocations: \" SIZE_FORMAT \"K, retained: \" SIZE_FORMAT \"K%s\",\n+  st->print_cr(\"C-Heap outstanding allocations: %zuK, retained: %zuK%s\",\n@@ -2380,1 +2380,1 @@\n-  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n+  st->print(\" %zuk page\", os::vm_page_size()>>10);\n@@ -2745,1 +2745,1 @@\n-  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", \" SIZE_FORMAT\n+  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", %zu\"\n@@ -2753,2 +2753,2 @@\n-  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", \" SIZE_FORMAT\n-          \", \" SIZE_FORMAT \", %d) failed; error='%s' (errno=%d)\", p2i(addr), size,\n+  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", %zu\"\n+          \", %zu, %d) failed; error='%s' (errno=%d)\", p2i(addr), size,\n@@ -3583,1 +3583,1 @@\n-      log_info(pagesize)(\"Large page size (\" SIZE_FORMAT \"%s) failed sanity check, \"\n+      log_info(pagesize)(\"Large page size (%zu%s) failed sanity check, \"\n@@ -3595,1 +3595,1 @@\n-          log_info(pagesize)(\"Large page size (\" SIZE_FORMAT \"%s) passed sanity check\",\n+          log_info(pagesize)(\"Large page size (%zu%s) passed sanity check\",\n@@ -3820,1 +3820,1 @@\n-      log_info(pagesize)(\"Using the default large page size: \" SIZE_FORMAT \"%s\",\n+      log_info(pagesize)(\"Using the default large page size: %zu%s\",\n@@ -3826,2 +3826,2 @@\n-        log_info(pagesize)(\"Overriding default large page size (\" SIZE_FORMAT \"%s) \"\n-                           \"using LargePageSizeInBytes: \" SIZE_FORMAT \"%s\",\n+        log_info(pagesize)(\"Overriding default large page size (%zu%s) \"\n+                           \"using LargePageSizeInBytes: %zu%s\",\n@@ -3834,2 +3834,2 @@\n-        log_info(pagesize)(\"LargePageSizeInBytes is not a valid large page size (\" SIZE_FORMAT \"%s) \"\n-                           \"using the default large page size: \" SIZE_FORMAT \"%s\",\n+        log_info(pagesize)(\"LargePageSizeInBytes is not a valid large page size (%zu%s) \"\n+                           \"using the default large page size: %zu%s\",\n@@ -4006,1 +4006,1 @@\n-                     \" size: \" SIZE_FORMAT \"%s, page size: \" SIZE_FORMAT \"%s, (errno = %d)\",\n+                     \" size: %zu%s, page size: %zu%s, (errno = %d)\",\n@@ -4034,2 +4034,2 @@\n-  log_debug(pagesize)(\"Commit special mapping: \" PTR_FORMAT \", size=\" SIZE_FORMAT \"%s, page size=\"\n-                      SIZE_FORMAT \"%s\",\n+  log_debug(pagesize)(\"Commit special mapping: \" PTR_FORMAT \", size=%zu%s, page size=\"\n+                      \"%zu%s\",\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -902,1 +902,1 @@\n-  jio_snprintf(buf, buflen, \"stacksize: \" SIZE_FORMAT \"k, guardsize: \" SIZE_FORMAT \"k, %s\",\n+  jio_snprintf(buf, buflen, \"stacksize: %zuk, guardsize: %zuk, %s\",\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1099,1 +1099,1 @@\n-    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", \" SIZE_FORMAT \")\", p2i(addr), bytes);\n+    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", %zu)\", p2i(addr), bytes);\n@@ -1231,1 +1231,1 @@\n-  log_debug(perf, memops)(\"mapped \" SIZE_FORMAT \" bytes for vmid %d at \"\n+  log_debug(perf, memops)(\"mapped %zu bytes for vmid %d at \"\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  fatal(msg \": \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\", \\\n+  fatal(msg \": \" PTR_FORMAT \" %zuM (%d)\", \\\n@@ -253,1 +253,1 @@\n-    fatal(\"Failed to unreserve memory: \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\",\n+    fatal(\"Failed to unreserve memory: \" PTR_FORMAT \" %zuM (%d)\",\n","filename":"src\/hotspot\/os\/windows\/gc\/x\/xMapper_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-      fatal(\"Failed to allocate physical memory \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to allocate physical memory %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -162,1 +162,1 @@\n-      log_debug(gc)(\"Allocated physical memory: \" SIZE_FORMAT \"M @ \" PTR_FORMAT, size \/ M, offset);\n+      log_debug(gc)(\"Allocated physical memory: %zuM @ \" PTR_FORMAT, size \/ M, offset);\n@@ -177,1 +177,1 @@\n-      fatal(\"Failed to uncommit physical memory \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to uncommit physical memory %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -190,1 +190,1 @@\n-      fatal(\"Failed to map view \" PTR_FORMAT \" \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to map view \" PTR_FORMAT \" %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -200,1 +200,1 @@\n-      fatal(\"Failed to unmap view \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\",\n+      fatal(\"Failed to unmap view \" PTR_FORMAT \" %zuM (%d)\",\n@@ -226,1 +226,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -233,1 +233,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/windows\/gc\/x\/xPhysicalMemoryBacking_windows.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  fatal(msg \": \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\", \\\n+  fatal(msg \": \" PTR_FORMAT \" %zuM (%d)\", \\\n@@ -254,1 +254,1 @@\n-    fatal(\"Failed to unreserve memory: \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\",\n+    fatal(\"Failed to unreserve memory: \" PTR_FORMAT \" %zuM (%d)\",\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zMapper_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-      fatal(\"Failed to allocate physical memory \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to allocate physical memory %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -163,1 +163,1 @@\n-      log_debug(gc)(\"Allocated physical memory: \" SIZE_FORMAT \"M @ \" PTR_FORMAT, size \/ M, untype(offset));\n+      log_debug(gc)(\"Allocated physical memory: %zuM @ \" PTR_FORMAT, size \/ M, untype(offset));\n@@ -178,1 +178,1 @@\n-      fatal(\"Failed to uncommit physical memory \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to uncommit physical memory %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -191,1 +191,1 @@\n-      fatal(\"Failed to map view \" PTR_FORMAT \" \" SIZE_FORMAT \"M @ \" PTR_FORMAT \" (%d)\",\n+      fatal(\"Failed to map view \" PTR_FORMAT \" %zuM @ \" PTR_FORMAT \" (%d)\",\n@@ -201,1 +201,1 @@\n-      fatal(\"Failed to unmap view \" PTR_FORMAT \" \" SIZE_FORMAT \"M (%d)\",\n+      fatal(\"Failed to unmap view \" PTR_FORMAT \" %zuM (%d)\",\n@@ -227,1 +227,1 @@\n-  log_trace(gc, heap)(\"Committing memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Committing memory: %zuM-%zuM (%zuM)\",\n@@ -234,1 +234,1 @@\n-  log_trace(gc, heap)(\"Uncommitting memory: \" SIZE_FORMAT \"M-\" SIZE_FORMAT \"M (\" SIZE_FORMAT \"M)\",\n+  log_trace(gc, heap)(\"Uncommitting memory: %zuM-%zuM (%zuM)\",\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zPhysicalMemoryBacking_windows.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-    log_trace(os)(\"VirtualAlloc(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x) returned \" PTR_FORMAT \"%s.\",\n+    log_trace(os)(\"VirtualAlloc(\" PTR_FORMAT \", %zu, %x, %x) returned \" PTR_FORMAT \"%s.\",\n@@ -203,1 +203,1 @@\n-    log_info(os)(\"VirtualAlloc(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x) failed (%u).\",\n+    log_info(os)(\"VirtualAlloc(\" PTR_FORMAT \", %zu, %x, %x) failed (%u).\",\n@@ -213,1 +213,1 @@\n-    log_trace(os)(\"VirtualFree(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x) succeeded\",\n+    log_trace(os)(\"VirtualFree(\" PTR_FORMAT \", %zu, %x) succeeded\",\n@@ -217,1 +217,1 @@\n-    log_info(os)(\"VirtualFree(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x) failed (%u).\",\n+    log_info(os)(\"VirtualFree(\" PTR_FORMAT \", %zu, %x) failed (%u).\",\n@@ -228,1 +228,1 @@\n-    log_trace(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x, %x) returned \" PTR_FORMAT \"%s.\",\n+    log_trace(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", %zu, %x, %x, %x) returned \" PTR_FORMAT \"%s.\",\n@@ -233,1 +233,1 @@\n-    log_info(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x, %x) failed (%u).\",\n+    log_info(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", %zu, %x, %x, %x) failed (%u).\",\n@@ -245,1 +245,1 @@\n-    log_trace(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", \" SIZE_FORMAT \") returned \" PTR_FORMAT \"%s.\",\n+    log_trace(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", %zu) returned \" PTR_FORMAT \"%s.\",\n@@ -250,1 +250,1 @@\n-    log_info(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", \" SIZE_FORMAT \") failed (%u).\",\n+    log_info(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", %zu) failed (%u).\",\n@@ -542,1 +542,1 @@\n-  log_info(os, thread)(\"Thread is alive (tid: \" UINTX_FORMAT \", stacksize: \" SIZE_FORMAT \"k).\", os::current_thread_id(), thread->stack_size() \/ K);\n+  log_info(os, thread)(\"Thread is alive (tid: \" UINTX_FORMAT \", stacksize: %zuk).\", os::current_thread_id(), thread->stack_size() \/ K);\n@@ -627,1 +627,1 @@\n-                       PTR_FORMAT \" - \" PTR_FORMAT \" (\" SIZE_FORMAT \"K) ).\",\n+                       PTR_FORMAT \" - \" PTR_FORMAT \" (%zuK) ).\",\n@@ -660,1 +660,1 @@\n-    ss.print(\"stacksize: \" SIZE_FORMAT \"k, \", stacksize \/ K);\n+    ss.print(\"stacksize: %zuk, \", stacksize \/ K);\n@@ -1971,1 +1971,1 @@\n-  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n+  st->print(\" %zuk page\", os::vm_page_size()>>10);\n@@ -3465,1 +3465,1 @@\n-  log_debug(pagesize)(\"Reserving large pages at an aligned address, alignment=\" SIZE_FORMAT \"%s\",\n+  log_debug(pagesize)(\"Reserving large pages at an aligned address, alignment=%zu%s\",\n@@ -3522,1 +3522,1 @@\n-  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", \" SIZE_FORMAT\n+  warning(\"INFO: os::commit_memory(\" PTR_FORMAT \", %zu\"\n@@ -3752,1 +3752,1 @@\n-    warning(\"INFO: os::protect_memory(\" PTR_FORMAT \", \" SIZE_FORMAT\n+    warning(\"INFO: os::protect_memory(\" PTR_FORMAT \", %zu\"\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1564,1 +1564,1 @@\n-      warning(\"unexpected file size: size = \" SIZE_FORMAT \"\\n\",\n+      warning(\"unexpected file size: size = %zu\\n\",\n@@ -1663,1 +1663,1 @@\n-  log_debug(perf, memops)(\"mapped \" SIZE_FORMAT \" bytes for vmid %d at \"\n+  log_debug(perf, memops)(\"mapped %zu bytes for vmid %d at \"\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-  log_info(cds)(\"_estimated_hashtable_bytes = \" SIZE_FORMAT \" + \" SIZE_FORMAT \" = \" SIZE_FORMAT,\n+  log_info(cds)(\"_estimated_hashtable_bytes = %zu + %zu = %zu\",\n@@ -318,2 +318,2 @@\n-  log_info(cds)(\"_estimated_metaspaceobj_bytes = \" SIZE_FORMAT, _estimated_metaspaceobj_bytes);\n-  log_info(cds)(\"total estimate bytes = \" SIZE_FORMAT, total);\n+  log_info(cds)(\"_estimated_metaspaceobj_bytes = %zu\", _estimated_metaspaceobj_bytes);\n+  log_info(cds)(\"total estimate bytes = %zu\", total);\n@@ -328,1 +328,1 @@\n-    log_error(cds)(\"Failed to reserve \" SIZE_FORMAT \" bytes of output buffer.\", buffer_size);\n+    log_error(cds)(\"Failed to reserve %zu bytes of output buffer.\", buffer_size);\n@@ -335,1 +335,1 @@\n-  log_info(cds)(\"Reserved output buffer space at \" PTR_FORMAT \" [\" SIZE_FORMAT \" bytes]\",\n+  log_info(cds)(\"Reserved output buffer space at \" PTR_FORMAT \" [%zu bytes]\",\n@@ -578,1 +578,1 @@\n-  log_info(cds)(\"%s estimate = \" SIZE_FORMAT \" used = \" SIZE_FORMAT \"; diff = %d bytes\", which, estimate, used, diff);\n+  log_info(cds)(\"%s estimate = %zu used = %zu; diff = %d bytes\", which, estimate, used, diff);\n@@ -1023,1 +1023,1 @@\n-      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data \" SIZE_FORMAT \" bytes\",\n+      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data %zu bytes\",\n@@ -1074,1 +1074,1 @@\n-        st.print_cr(\"filler \" SIZE_FORMAT \" bytes\", byte_size);\n+        st.print_cr(\"filler %zu bytes\", byte_size);\n@@ -1167,1 +1167,1 @@\n-        st.print_cr(\" - fields (\" SIZE_FORMAT \" words):\", source_oop->size());\n+        st.print_cr(\" - fields (%zu words):\", source_oop->size());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  log_info(cds, heap)(\"archived obj roots[%d] = \" SIZE_FORMAT \" bytes, klass = %p, obj = %p\", length, byte_size, k, mem);\n+  log_info(cds, heap)(\"archived obj roots[%d] = %zu bytes, klass = %p, obj = %p\", length, byte_size, k, mem);\n@@ -240,1 +240,1 @@\n-  log_info(cds)(\"Size of heap region = \" SIZE_FORMAT \" bytes, %d objects, %d roots\",\n+  log_info(cds)(\"Size of heap region = %zu bytes, %d objects, %d roots\",\n@@ -302,1 +302,1 @@\n-    log_info(cds, heap)(\"Inserting filler obj array of %d elements (\" SIZE_FORMAT \" bytes total) @ buffer offset \" SIZE_FORMAT,\n+    log_info(cds, heap)(\"Inserting filler obj array of %d elements (%zu bytes total) @ buffer offset %zu\",\n@@ -585,1 +585,1 @@\n-  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (\" SIZE_FORMAT \" bits)\",\n+  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (%zu bits)\",\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    log_error(cds)(\"Failed to expand shared space to \" SIZE_FORMAT \" bytes\",\n+    log_error(cds)(\"Failed to expand shared space to %zu bytes\",\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-                         \" [\" UINT32_FORMAT \" bytes header, \" SIZE_FORMAT \" bytes total]\",\n+                         \" [\" UINT32_FORMAT \" bytes header, %zu bytes total]\",\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-  st->print_cr(\"- core_region_alignment:          \" SIZE_FORMAT, _core_region_alignment);\n+  st->print_cr(\"- core_region_alignment:          %zu\", _core_region_alignment);\n@@ -276,2 +276,2 @@\n-  st->print_cr(\"- cloned_vtables_offset:          \" SIZE_FORMAT_X, _cloned_vtables_offset);\n-  st->print_cr(\"- serialized_data_offset:         \" SIZE_FORMAT_X, _serialized_data_offset);\n+  st->print_cr(\"- cloned_vtables_offset:          0x%zx\", _cloned_vtables_offset);\n+  st->print_cr(\"- serialized_data_offset:         0x%zx\", _serialized_data_offset);\n@@ -279,1 +279,1 @@\n-  st->print_cr(\"- shared_path_table_offset:       \" SIZE_FORMAT_X, _shared_path_table_offset);\n+  st->print_cr(\"- shared_path_table_offset:       0x%zx\", _shared_path_table_offset);\n@@ -290,1 +290,1 @@\n-  st->print_cr(\"- heap_roots_offset:              \" SIZE_FORMAT, _heap_roots_offset);\n+  st->print_cr(\"- heap_roots_offset:              %zu\", _heap_roots_offset);\n@@ -294,1 +294,1 @@\n-  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+  st->print_cr(\"- ptrmap_size_in_bits:            %zu\", _ptrmap_size_in_bits);\n@@ -1377,1 +1377,1 @@\n-    log_error(cds)(\"Unable to seek to position \" SIZE_FORMAT, pos);\n+    log_error(cds)(\"Unable to seek to position %zu\", pos);\n@@ -1528,5 +1528,5 @@\n-  st->print_cr(\"- file_offset:                    \" SIZE_FORMAT_X, _file_offset);\n-  st->print_cr(\"- mapping_offset:                 \" SIZE_FORMAT_X, _mapping_offset);\n-  st->print_cr(\"- used:                           \" SIZE_FORMAT, _used);\n-  st->print_cr(\"- oopmap_offset:                  \" SIZE_FORMAT_X, _oopmap_offset);\n-  st->print_cr(\"- oopmap_size_in_bits:            \" SIZE_FORMAT, _oopmap_size_in_bits);\n+  st->print_cr(\"- file_offset:                    0x%zx\", _file_offset);\n+  st->print_cr(\"- mapping_offset:                 0x%zx\", _mapping_offset);\n+  st->print_cr(\"- used:                           %zu\", _used);\n+  st->print_cr(\"- oopmap_offset:                  0x%zx\", _oopmap_offset);\n+  st->print_cr(\"- oopmap_size_in_bits:            %zu\", _oopmap_size_in_bits);\n@@ -1883,1 +1883,1 @@\n-    log_debug(cds, reloc)(\"mapped relocation bitmap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n+    log_debug(cds, reloc)(\"mapped relocation bitmap @ \" INTPTR_FORMAT \" (%zu bits)\",\n@@ -2011,1 +2011,1 @@\n-  log_info(cds)(\"CDS archive was created with max heap size = \" SIZE_FORMAT \"M, and the following configuration:\",\n+  log_info(cds)(\"CDS archive was created with max heap size = %zuM, and the following configuration:\",\n@@ -2017,1 +2017,1 @@\n-  log_info(cds)(\"The current max heap size = \" SIZE_FORMAT \"M, HeapRegion::GrainBytes = \" SIZE_FORMAT,\n+  log_info(cds)(\"The current max heap size = %zuM, HeapRegion::GrainBytes = %zu\",\n@@ -2136,1 +2136,1 @@\n-                  INTPTR_FORMAT \", size = \" SIZE_FORMAT \" bytes\",\n+                  INTPTR_FORMAT \", size = %zu bytes\",\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: \" SIZE_FORMAT,\n+    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: %zu\",\n@@ -1105,1 +1105,1 @@\n-        log_debug(cds, heap)(\"(%d) %s[\" SIZE_FORMAT \"] ==> \" PTR_FORMAT \" size \" SIZE_FORMAT \" %s\", _level,\n+        log_debug(cds, heap)(\"(%d) %s[%zu] ==> \" PTR_FORMAT \" size %zu %s\", _level,\n@@ -1179,1 +1179,1 @@\n-        PTR_FORMAT \") size \" SIZE_FORMAT \", skipped.\",\n+        PTR_FORMAT \") size %zu, skipped.\",\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, core_region_alignment());\n+  log_info(cds)(\"Core region alignment: %zu\", core_region_alignment());\n@@ -267,1 +267,1 @@\n-    log_error(cds)(\"Unable to reserve memory for symbols: \" SIZE_FORMAT \" bytes.\", symbol_rs_size);\n+    log_error(cds)(\"Unable to reserve memory for symbols: %zu bytes.\", symbol_rs_size);\n@@ -657,1 +657,1 @@\n-                     SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+                     \"%zuM\", MaxHeapSize\/M);\n@@ -681,1 +681,1 @@\n-    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MinHeapSize\/M);\n+    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = %zuM\", MinHeapSize\/M);\n@@ -685,1 +685,1 @@\n-    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", InitialHeapSize\/M);\n+    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = %zuM\", InitialHeapSize\/M);\n@@ -689,1 +689,1 @@\n-    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = %zuM\", MaxHeapSize\/M);\n@@ -921,1 +921,1 @@\n-    log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, static_mapinfo->core_region_alignment());\n+    log_info(cds)(\"Core region alignment: %zu\", static_mapinfo->core_region_alignment());\n@@ -1075,1 +1075,1 @@\n-    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1077,1 +1077,1 @@\n-    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1302,2 +1302,1 @@\n-         \"CompressedClassSpaceSize malformed: \"\n-         SIZE_FORMAT, CompressedClassSpaceSize);\n+         \"CompressedClassSpaceSize malformed: %zu\", CompressedClassSpaceSize);\n@@ -1405,2 +1404,2 @@\n-    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: \" SIZE_FORMAT\n-                  \" actual: \" SIZE_FORMAT, mapinfo->core_region_alignment(), core_region_alignment());\n+    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: %zu\"\n+                  \" actual: %zu\", mapinfo->core_region_alignment(), core_region_alignment());\n@@ -1574,1 +1573,1 @@\n-    st->print(\"size \" SIZE_FORMAT \", \", top - base);\n+    st->print(\"size %zu, \", top - base);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  log_info(class, loader, data)(\"Dictionary start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_info(class, loader, data)(\"Dictionary start size: %zu (%zu)\",\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1166,2 +1166,2 @@\n-  assert(size > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, size);\n-  assert(size <= INT_MAX, \"Lossy conversion: \" SIZE_FORMAT, size);\n+  assert(size > 0, \"Oop size must be greater than zero, not %zu\", size);\n+  assert(size <= INT_MAX, \"Lossy conversion: %zu\", size);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-  log_trace(stringtable)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(stringtable)(\"Start size: %zu (%zu)\",\n@@ -427,1 +427,1 @@\n-  log_debug(stringtable)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_debug(stringtable)(\"Grown to size:%zu\", _current_size);\n@@ -476,1 +476,1 @@\n-  log_trace(stringtable)(\"Uncleaned items:\" SIZE_FORMAT, num_dead);\n+  log_trace(stringtable)(\"Uncleaned items:%zu\", num_dead);\n@@ -805,1 +805,1 @@\n-    fatal(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+    fatal(\"Too many strings to be archived: %zu\", _items_count);\n@@ -828,1 +828,1 @@\n-      log_error(cds)(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+      log_error(cds)(\"Too many strings to be archived: %zu\", _items_count);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-  log_trace(symboltable)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(symboltable)(\"Start size: %zu (%zu)\",\n@@ -710,1 +710,1 @@\n-  log_debug(symboltable)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_debug(symboltable)(\"Grown to size:%zu\", _current_size);\n@@ -759,1 +759,1 @@\n-  log_debug(symboltable)(\"Cleaned \" SIZE_FORMAT \" of \" SIZE_FORMAT,\n+  log_debug(symboltable)(\"Cleaned %zu of %zu\",\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,2 +184,2 @@\n-  err_msg message(\"NonNMethodCodeHeapSize (\" SIZE_FORMAT \"K) + ProfiledCodeHeapSize (\" SIZE_FORMAT \"K)\"\n-                  \" + NonProfiledCodeHeapSize (\" SIZE_FORMAT \"K) = \" SIZE_FORMAT \"K\",\n+  err_msg message(\"NonNMethodCodeHeapSize (%zuK) + ProfiledCodeHeapSize (%zuK)\"\n+                  \" + NonProfiledCodeHeapSize (%zuK) = %zuK\",\n@@ -190,1 +190,1 @@\n-    message.append(\" is greater than ReservedCodeCacheSize (\" SIZE_FORMAT \"K).\", cache_size\/K);\n+    message.append(\" is greater than ReservedCodeCacheSize (%zuK).\", cache_size\/K);\n@@ -194,1 +194,1 @@\n-    message.append(\" is not equal to ReservedCodeCacheSize (\" SIZE_FORMAT \"K).\", cache_size\/K);\n+    message.append(\" is not equal to ReservedCodeCacheSize (%zuK).\", cache_size\/K);\n@@ -303,1 +303,1 @@\n-        \"Not enough space in non-nmethod code heap to run VM: \" SIZE_FORMAT \"K < \" SIZE_FORMAT \"K\",\n+        \"Not enough space in non-nmethod code heap to run VM: %zuK < %zuK\",\n@@ -374,1 +374,1 @@\n-    vm_exit_during_initialization(err_msg(\"Could not reserve enough space for code cache (\" SIZE_FORMAT \"K)\",\n+    vm_exit_during_initialization(err_msg(\"Could not reserve enough space for code cache (%zuK)\",\n@@ -458,1 +458,1 @@\n-    vm_exit_during_initialization(err_msg(\"Could not reserve enough space in %s (\" SIZE_FORMAT \"K)\",\n+    vm_exit_during_initialization(err_msg(\"Could not reserve enough space in %s (%zuK)\",\n@@ -584,1 +584,1 @@\n-      tty->print_cr(\" extended to [\" INTPTR_FORMAT \", \" INTPTR_FORMAT \"] (\" SSIZE_FORMAT \" bytes)\",\n+      tty->print_cr(\" extended to [\" INTPTR_FORMAT \", \" INTPTR_FORMAT \"] (%zd bytes)\",\n@@ -1524,4 +1524,4 @@\n-  tty->print_cr(\"Number of elements in freelist: \" SSIZE_FORMAT,       freelists_length());\n-  tty->print_cr(\"Allocated in freelist:          \" SSIZE_FORMAT \"kB\",  bytes_allocated_in_freelists()\/K);\n-  tty->print_cr(\"Unused bytes in CodeBlobs:      \" SSIZE_FORMAT \"kB\",  (wasted_bytes\/K));\n-  tty->print_cr(\"Segment map size:               \" SSIZE_FORMAT \"kB\",  allocated_segments()\/K); \/\/ 1 byte per segment\n+  tty->print_cr(\"Number of elements in freelist: %zd\",       freelists_length());\n+  tty->print_cr(\"Allocated in freelist:          %zdkB\",  bytes_allocated_in_freelists()\/K);\n+  tty->print_cr(\"Unused bytes in CodeBlobs:      %zdkB\",  (wasted_bytes\/K));\n+  tty->print_cr(\"Segment map size:               %zdkB\",  allocated_segments()\/K); \/\/ 1 byte per segment\n@@ -1744,2 +1744,2 @@\n-    st->print_cr(\" size=\" SIZE_FORMAT \"Kb used=\" SIZE_FORMAT\n-                 \"Kb max_used=\" SIZE_FORMAT \"Kb free=\" SIZE_FORMAT \"Kb\",\n+    st->print_cr(\" size=%zuKb used=%zu\"\n+                 \"Kb max_used=%zuKb free=%zuKb\",\n@@ -1797,1 +1797,1 @@\n-            \" adapters='\" UINT32_FORMAT \"' free_code_cache='\" SIZE_FORMAT \"'\",\n+            \" adapters='\" UINT32_FORMAT \"' free_code_cache='%zu'\",\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-    out->print_cr(\"Current granularity is \" SIZE_FORMAT \" bytes. Try a coarser granularity.\", granularity);\n+    out->print_cr(\"Current granularity is %zu bytes. Try a coarser granularity.\", granularity);\n@@ -624,1 +624,1 @@\n-  ast->print_cr(\"   CodeHeap committed size \" SIZE_FORMAT \"K (\" SIZE_FORMAT \"M), reserved size \" SIZE_FORMAT \"K (\" SIZE_FORMAT \"M), %d%% occupied.\",\n+  ast->print_cr(\"   CodeHeap committed size %zuK (%zuM), reserved size %zuK (%zuM), %d%% occupied.\",\n@@ -626,3 +626,3 @@\n-  ast->print_cr(\"   CodeHeap allocation segment size is \" SIZE_FORMAT \" bytes. This is the smallest possible granularity.\", seg_size);\n-  ast->print_cr(\"   CodeHeap (committed part) is mapped to \" SIZE_FORMAT \" granules of size \" SIZE_FORMAT \" bytes.\", granules, granularity);\n-  ast->print_cr(\"   Each granule takes \" SIZE_FORMAT \" bytes of C heap, that is \" SIZE_FORMAT \"K in total for statistics data.\", sizeof(StatElement), (sizeof(StatElement)*granules)\/(size_t)K);\n+  ast->print_cr(\"   CodeHeap allocation segment size is %zu bytes. This is the smallest possible granularity.\", seg_size);\n+  ast->print_cr(\"   CodeHeap (committed part) is mapped to %zu granules of size %zu bytes.\", granules, granularity);\n+  ast->print_cr(\"   Each granule takes %zu bytes of C heap, that is %zuK in total for statistics data.\", sizeof(StatElement), (sizeof(StatElement)*granules)\/(size_t)K);\n@@ -700,1 +700,1 @@\n-        insane = true; ast->print_cr(\"Sanity check: end index (%d) out of bounds (\" SIZE_FORMAT \")\", ix_end, granules);\n+        insane = true; ast->print_cr(\"Sanity check: end index (%d) out of bounds (%zu)\", ix_end, granules);\n@@ -703,1 +703,1 @@\n-        insane = true; ast->print_cr(\"Sanity check: code heap capacity has changed (\" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K)\", size\/(size_t)K, heap->capacity()\/(size_t)K);\n+        insane = true; ast->print_cr(\"Sanity check: code heap capacity has changed (%zuK to %zuK)\", size\/(size_t)K, heap->capacity()\/(size_t)K);\n@@ -1128,1 +1128,1 @@\n-    ast->print_cr(\"   Each free block takes \" SIZE_FORMAT \" bytes of C heap for statistics data, that is \" SIZE_FORMAT \"K in total.\", sizeof(FreeBlk), (sizeof(FreeBlk)*nBlocks_free)\/K);\n+    ast->print_cr(\"   Each free block takes %zu bytes of C heap for statistics data, that is %zuK in total.\", sizeof(FreeBlk), (sizeof(FreeBlk)*nBlocks_free)\/K);\n@@ -2083,1 +2083,1 @@\n-      ast->print_cr(\"Address range [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"), \" SIZE_FORMAT \"k\", p2i(low_bound+ix*granule_size), p2i(low_bound + end_ix*granule_size), (end_ix - ix)*granule_size\/(size_t)K);\n+      ast->print_cr(\"Address range [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"), %zuk\", p2i(low_bound+ix*granule_size), p2i(low_bound + end_ix*granule_size), (end_ix - ix)*granule_size\/(size_t)K);\n","filename":"src\/hotspot\/share\/code\/codeHeapState.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-    if (nmethod_count != 0)       tty->print_cr(\" header         = \" SIZE_FORMAT, nmethod_count * sizeof(nmethod));\n+    if (nmethod_count != 0)       tty->print_cr(\" header         = %zu\", nmethod_count * sizeof(nmethod));\n@@ -1451,1 +1451,1 @@\n-                       \"\/Free CodeCache:\" SIZE_FORMAT \"Kb\",\n+                       \"\/Free CodeCache:%zuKb\",\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    log_warning(gc)(\"EpsilonMaxTLABSize < MinTLABSize, adjusting it to \" SIZE_FORMAT, MinTLABSize);\n+    log_warning(gc)(\"EpsilonMaxTLABSize < MinTLABSize, adjusting it to %zu\", MinTLABSize);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  assert(is_object_aligned(size), \"Allocation size should be aligned: \" SIZE_FORMAT, size);\n+  assert(is_object_aligned(size), \"Allocation size should be aligned: %zu\", size);\n@@ -216,1 +216,1 @@\n-         \"Size honors object alignment: \" SIZE_FORMAT, size);\n+         \"Size honors object alignment: %zu\", size);\n@@ -218,1 +218,1 @@\n-         \"Size honors min size: \"  SIZE_FORMAT \" <= \" SIZE_FORMAT, min_size, size);\n+         \"Size honors min size: \"  \"%zu <= %zu\", min_size, size);\n@@ -220,1 +220,1 @@\n-         \"Size honors max size: \"  SIZE_FORMAT \" <= \" SIZE_FORMAT, size, _max_tlab_size);\n+         \"Size honors max size: \"  \"%zu <= %zu\", size, _max_tlab_size);\n@@ -222,1 +222,1 @@\n-         \"Size honors global max size: \"  SIZE_FORMAT \" <= \" SIZE_FORMAT, size, CollectedHeap::max_tlab_size());\n+         \"Size honors global max size: \"  \"%zu <= %zu\", size, CollectedHeap::max_tlab_size());\n@@ -226,2 +226,2 @@\n-    log_trace(gc)(\"TLAB size for \\\"%s\\\" (Requested: \" SIZE_FORMAT \"K, Min: \" SIZE_FORMAT\n-                          \"K, Max: \" SIZE_FORMAT \"K, Ergo: \" SIZE_FORMAT \"K) -> \" SIZE_FORMAT \"K\",\n+    log_trace(gc)(\"TLAB size for \\\"%s\\\" (Requested: %zuK, Min: %zu\"\n+                          \"K, Max: %zuK, Ergo: %zuK) -> %zuK\",\n@@ -323,2 +323,2 @@\n-    log_info(gc)(\"Heap: \" SIZE_FORMAT \"%s reserved, \" SIZE_FORMAT \"%s (%.2f%%) committed, \"\n-                 SIZE_FORMAT \"%s (%.2f%%) used\",\n+    log_info(gc)(\"Heap: %zu%s reserved, %zu%s (%.2f%%) committed, \"\n+                 \"%zu%s (%.2f%%) used\",\n@@ -342,2 +342,2 @@\n-    log_info(gc, metaspace)(\"Metaspace: \" SIZE_FORMAT \"%s reserved, \" SIZE_FORMAT \"%s (%.2f%%) committed, \"\n-                            SIZE_FORMAT \"%s (%.2f%%) used\",\n+    log_info(gc, metaspace)(\"Metaspace: %zu%s reserved, %zu%s (%.2f%%) committed, \"\n+                            \"%zu%s (%.2f%%) used\",\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    log_info(gc, init)(\"TLAB Size Max: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, init)(\"TLAB Size Max: %zu%s\",\n@@ -55,1 +55,1 @@\n-      log_info(gc, init)(\"TLAB Size Decay Time: \" SIZE_FORMAT \"ms\", EpsilonTLABDecayTime);\n+      log_info(gc, init)(\"TLAB Size Decay Time: %zums\", EpsilonTLABDecayTime);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonInitLogger.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-        out->print(\" min \" SIZE_FORMAT \" desired \" SIZE_FORMAT \" actual \" SIZE_FORMAT \" \" PTR_FORMAT,\n+        out->print(\" min %zu desired %zu actual %zu \" PTR_FORMAT,\n@@ -243,1 +243,1 @@\n-        out->print(\" min \" SIZE_FORMAT \" desired \" SIZE_FORMAT, min_word_size, desired_word_size);\n+        out->print(\" min %zu desired %zu\", min_word_size, desired_word_size);\n@@ -339,1 +339,1 @@\n-  log_debug(gc, alloc, region)(\"Mutator Allocation stats, regions: %u, wasted size: \" SIZE_FORMAT \"%s (%4.1f%%)\",\n+  log_debug(gc, alloc, region)(\"Mutator Allocation stats, regions: %u, wasted size: %zu%s (%4.1f%%)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    assert((p), \"[%s] %s c: %u r: \" PTR_FORMAT \" u: \" SIZE_FORMAT,       \\\n+    assert((p), \"[%s] %s c: %u r: \" PTR_FORMAT \" u: %zu\",       \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-         \"Requested \" SIZE_FORMAT \" words, but got \" SIZE_FORMAT \" at \" PTR_FORMAT,\n+         \"Requested %zu words, but got %zu at \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  guarantee(index < length(), \"Index out of bounds index: \" SIZE_FORMAT \" length: \" SIZE_FORMAT, index, length());\n+  guarantee(index < length(), \"Index out of bounds index: %zu length: %zu\", index, length());\n@@ -57,1 +57,1 @@\n-            \"Biased index out of bounds, index: \" SIZE_FORMAT \" bias: \" SIZE_FORMAT \" length: \" SIZE_FORMAT,\n+            \"Biased index out of bounds, index: %zu bias: %zu length: %zu\",\n@@ -64,1 +64,1 @@\n-            \"Biased index out of inclusive bounds, index: \" SIZE_FORMAT \" bias: \" SIZE_FORMAT \" length: \" SIZE_FORMAT,\n+            \"Biased index out of inclusive bounds, index: %zu bias: %zu length: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-           \"mapping granularity must be power of 2, is \" SIZE_FORMAT, mapping_granularity_in_bytes);\n+           \"mapping granularity must be power of 2, is %zu\", mapping_granularity_in_bytes);\n@@ -77,1 +77,1 @@\n-           \"bottom mapping area address must be a multiple of mapping granularity \" SIZE_FORMAT \", is  \" PTR_FORMAT,\n+           \"bottom mapping area address must be a multiple of mapping granularity %zu, is  \" PTR_FORMAT,\n@@ -80,1 +80,1 @@\n-           \"end mapping area address must be a multiple of mapping granularity \" SIZE_FORMAT \", is \" PTR_FORMAT,\n+           \"end mapping area address must be a multiple of mapping granularity %zu, is \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n+  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): %zu  rs end(): \" PTR_FORMAT,\n@@ -55,1 +55,1 @@\n-         \"%s - index: \" SIZE_FORMAT \", _vs.committed_size: \" SIZE_FORMAT,\n+         \"%s - index: %zu, _vs.committed_size: %zu\",\n@@ -58,1 +58,1 @@\n-         \"Index \" SIZE_FORMAT \" corresponding to \" PTR_FORMAT\n+         \"Index %zu corresponding to \" PTR_FORMAT\n@@ -264,1 +264,1 @@\n-                  \"Invalid object end. obj: \" PTR_FORMAT \" obj_size: \" SIZE_FORMAT \" obj_end: \" PTR_FORMAT \" top: \" PTR_FORMAT,\n+                  \"Invalid object end. obj: \" PTR_FORMAT \" obj_size: %zu obj_end: \" PTR_FORMAT \" top: \" PTR_FORMAT,\n@@ -276,1 +276,1 @@\n-                \"Going backwards beyond the start_card. start_card: \" SIZE_FORMAT \" current_card: \" SIZE_FORMAT \" backskip: \" SIZE_FORMAT,\n+                \"Going backwards beyond the start_card. start_card: %zu current_card: %zu backskip: %zu\",\n@@ -292,1 +292,1 @@\n-                \"cards [\" SIZE_FORMAT \",\" SIZE_FORMAT \")\",\n+                \"cards [%zu,%zu)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-           \"%s - offset: \" SIZE_FORMAT \", N_words: %u\",\n+           \"%s - offset: %zu, N_words: %u\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap expansion (region allocation request failed). Allocation request: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap expansion (region allocation request failed). Allocation request: %zuB\",\n@@ -183,1 +183,1 @@\n-           \"This kind of expansion should never be more than one region. Size: \" SIZE_FORMAT,\n+           \"This kind of expansion should never be more than one region. Size: %zu\",\n@@ -335,1 +335,1 @@\n-  assert(is_humongous(word_size), \"Object of size \" SIZE_FORMAT \" must be humongous here\", word_size);\n+  assert(is_humongous(word_size), \"Object of size %zu must be humongous here\", word_size);\n@@ -358,1 +358,1 @@\n-      log_debug(gc, ergo, heap)(\"Heap expansion (humongous allocation request). Allocation request: \" SIZE_FORMAT \"B\",\n+      log_debug(gc, ergo, heap)(\"Heap expansion (humongous allocation request). Allocation request: %zuB\",\n@@ -468,1 +468,1 @@\n-                             SIZE_FORMAT \" words\", Thread::current()->name(), word_size);\n+                             \"%zu words\", Thread::current()->name(), word_size);\n@@ -471,1 +471,1 @@\n-      log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating \" SIZE_FORMAT \" words\",\n+      log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating %zu words\",\n@@ -477,1 +477,1 @@\n-                               SIZE_FORMAT \" words\", Thread::current()->name(), word_size);\n+                               \"%zu words\", Thread::current()->name(), word_size);\n@@ -505,1 +505,1 @@\n-      log_warning(gc, alloc)(\"%s:  Retried allocation %u times for \" SIZE_FORMAT \" words\",\n+      log_warning(gc, alloc)(\"%s:  Retried allocation %u times for %zu words\",\n@@ -538,2 +538,2 @@\n-    log_info(gc, heap)(\"Unable to allocate regions as archive heap is too large; size requested = \" SIZE_FORMAT\n-                       \" bytes, heap = \" SIZE_FORMAT \" bytes\", word_size, reserved.word_size());\n+    log_info(gc, heap)(\"Unable to allocate regions as archive heap is too large; size requested = %zu\"\n+                       \" bytes, heap = %zu bytes\", word_size, reserved.word_size());\n@@ -557,1 +557,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocate archive regions). Total size: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocate archive regions). Total size: %zuB\",\n@@ -616,1 +616,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap shrinking (CDS archive regions). Total size: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap shrinking (CDS archive regions). Total size: %zuB\",\n@@ -726,1 +726,1 @@\n-                             SIZE_FORMAT \" words\", Thread::current()->name(), word_size);\n+                             \"%zu words\", Thread::current()->name(), word_size);\n@@ -729,1 +729,1 @@\n-      log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating \" SIZE_FORMAT \"\",\n+      log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating %zu\",\n@@ -735,1 +735,1 @@\n-                               SIZE_FORMAT \" words\", Thread::current()->name(), word_size);\n+                               \"%zu words\", Thread::current()->name(), word_size);\n@@ -758,1 +758,1 @@\n-      log_warning(gc, alloc)(\"%s: Retried allocation %u times for \" SIZE_FORMAT \" words\",\n+      log_warning(gc, alloc)(\"%s: Retried allocation %u times for %zu words\",\n@@ -1066,1 +1066,1 @@\n-  log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocation request failed). Allocation request: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocation request failed). Allocation request: %zuB\",\n@@ -1084,1 +1084,1 @@\n-  log_debug(gc, ergo, heap)(\"Expand the heap. requested expansion amount: \" SIZE_FORMAT \"B expansion amount: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Expand the heap. requested expansion amount: %zuB expansion amount: %zuB\",\n@@ -1133,1 +1133,1 @@\n-  log_debug(gc, ergo, heap)(\"Shrink the heap. requested shrinking amount: \" SIZE_FORMAT \"B aligned shrinking amount: \" SIZE_FORMAT \"B actual amount shrunk: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Shrink the heap. requested shrinking amount: %zuB aligned shrinking amount: %zuB actual amount shrunk: %zuB\",\n@@ -2202,1 +2202,1 @@\n-  st->print(\" total \" SIZE_FORMAT \"K, used \" SIZE_FORMAT \"K\",\n+  st->print(\" total %zuK, used %zuK\",\n@@ -2208,1 +2208,1 @@\n-  st->print(\"  region size \" SIZE_FORMAT \"K, \", HeapRegion::GrainBytes \/ K);\n+  st->print(\"  region size %zuK, \", HeapRegion::GrainBytes \/ K);\n@@ -2210,1 +2210,1 @@\n-  st->print(\"%u young (\" SIZE_FORMAT \"K), \", young_regions,\n+  st->print(\"%u young (%zuK), \", young_regions,\n@@ -2213,1 +2213,1 @@\n-  st->print(\"%u survivors (\" SIZE_FORMAT \"K)\", survivor_regions,\n+  st->print(\"%u survivors (%zuK)\", survivor_regions,\n@@ -2779,1 +2779,1 @@\n-         \"invariant: _summary_bytes_used: \" SIZE_FORMAT \" should be >= bytes: \" SIZE_FORMAT,\n+         \"invariant: _summary_bytes_used: %zu should be >= bytes: %zu\",\n@@ -2968,1 +2968,1 @@\n-      log_debug(gc, ergo, heap)(\"Attempt heap expansion (requested address range outside heap bounds). region size: \" SIZE_FORMAT \"B\",\n+      log_debug(gc, ergo, heap)(\"Attempt heap expansion (requested address range outside heap bounds). region size: %zuB\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -367,2 +367,2 @@\n-    assert(cur_used_bytes == recal_used_bytes, \"Used(\" SIZE_FORMAT \") is not\" \\\n-           \" same as recalculated used(\" SIZE_FORMAT \").\",                    \\\n+    assert(cur_used_bytes == recal_used_bytes, \"Used(%zu) is not\" \\\n+           \" same as recalculated used(%zu).\",                    \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-  log_trace(gc, ergo, cset)(\"Start choosing CSet. Pending cards: \" SIZE_FORMAT \" target pause time: %1.2fms\",\n+  log_trace(gc, ergo, cset)(\"Start choosing CSet. Pending cards: %zu target pause time: %1.2fms\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    log_debug(gc, ergo, cset)(\"Pruned %u regions out of %u, leaving \" SIZE_FORMAT \" bytes waste (allowed \" SIZE_FORMAT \")\",\n+    log_debug(gc, ergo, cset)(\"Pruned %u regions out of %u, leaving %zu bytes waste (allowed %zu)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  assert(first_inactive == _inactive.size(), \"Should be no inactive regions, but was at index: \" SIZE_FORMAT, first_inactive);\n+  assert(first_inactive == _inactive.size(), \"Should be no inactive regions, but was at index: %zu\", first_inactive);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-         \"Trying to resize stack to \" SIZE_FORMAT \" chunks when the maximum is \" SIZE_FORMAT, new_capacity, _max_chunk_capacity);\n+         \"Trying to resize stack to %zu chunks when the maximum is %zu\", new_capacity, _max_chunk_capacity);\n@@ -113,1 +113,1 @@\n-    log_warning(gc)(\"Failed to reserve memory for new overflow mark stack with \" SIZE_FORMAT \" chunks and size \" SIZE_FORMAT \"B.\", new_capacity, new_capacity * sizeof(TaskQueueEntryChunk));\n+    log_warning(gc)(\"Failed to reserve memory for new overflow mark stack with %zu chunks and size %zuB.\", new_capacity, new_capacity * sizeof(TaskQueueEntryChunk));\n@@ -141,1 +141,1 @@\n-            \"Maximum chunk capacity \" SIZE_FORMAT \" smaller than initial capacity \" SIZE_FORMAT,\n+            \"Maximum chunk capacity %zu smaller than initial capacity %zu\",\n@@ -145,1 +145,1 @@\n-  log_debug(gc)(\"Initialize mark stack with \" SIZE_FORMAT \" chunks, maximum \" SIZE_FORMAT,\n+  log_debug(gc)(\"Initialize mark stack with %zu chunks, maximum %zu\",\n@@ -153,1 +153,1 @@\n-    log_debug(gc)(\"Can not expand overflow mark stack further, already at maximum capacity of \" SIZE_FORMAT \" chunks.\", _chunk_capacity);\n+    log_debug(gc)(\"Can not expand overflow mark stack further, already at maximum capacity of %zu chunks.\", _chunk_capacity);\n@@ -161,1 +161,1 @@\n-    log_debug(gc)(\"Expanded mark stack capacity from \" SIZE_FORMAT \" to \" SIZE_FORMAT \" chunks\",\n+    log_debug(gc)(\"Expanded mark stack capacity from %zu to %zu chunks\",\n@@ -164,1 +164,1 @@\n-    log_warning(gc)(\"Failed to expand mark stack capacity from \" SIZE_FORMAT \" to \" SIZE_FORMAT \" chunks\",\n+    log_warning(gc)(\"Failed to expand mark stack capacity from %zu to %zu chunks\",\n@@ -290,1 +290,1 @@\n-  assert(idx < _max_regions, \"Trying to add more root MemRegions than there is space \" SIZE_FORMAT, _max_regions);\n+  assert(idx < _max_regions, \"Trying to add more root MemRegions than there is space %zu\", _max_regions);\n@@ -343,1 +343,1 @@\n-           \"we should have claimed all root regions, claimed \" SIZE_FORMAT \", length = %u\",\n+           \"we should have claimed all root regions, claimed %zu, length = %u\",\n@@ -687,1 +687,1 @@\n-  log_debug(gc, ergo)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units.\", cl.name(), num_workers, num_chunks);\n+  log_debug(gc, ergo)(\"Running %s with %u workers for %zu work units.\", cl.name(), num_workers, num_chunks);\n@@ -1672,1 +1672,1 @@\n-          SIZE_FORMAT \", MarkStackSize: \" SIZE_FORMAT \", MarkStackSizeMax: \" SIZE_FORMAT \". \"\n+          \"%zu, MarkStackSize: %zu, MarkStackSizeMax: %zu. \"\n@@ -1824,1 +1824,1 @@\n-            \"Invariant: has_overflown = %s, num buffers = \" SIZE_FORMAT,\n+            \"Invariant: has_overflown = %s, num buffers = %zu\",\n@@ -1840,1 +1840,1 @@\n-  log_debug(gc, stats)(\"Mark stats cache hits \" SIZE_FORMAT \" misses \" SIZE_FORMAT \" ratio %1.3lf\",\n+  log_debug(gc, stats)(\"Mark stats cache hits %zu misses %zu ratio %1.3lf\",\n@@ -2418,1 +2418,1 @@\n-  log_debug(gc, stats)(\"  Mark Stats Cache: hits \" SIZE_FORMAT \" misses \" SIZE_FORMAT \" ratio %.3f\",\n+  log_debug(gc, stats)(\"  Mark Stats Cache: hits %zu misses %zu ratio %.3f\",\n@@ -2917,1 +2917,1 @@\n-#define G1PPRL_SUM_BYTE_FORMAT(tag)    \"  \" tag \": \" SIZE_FORMAT\n+#define G1PPRL_SUM_BYTE_FORMAT(tag)    \"  \" tag \": %zu\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    guarantee(num_chunks <= _chunks_in_chunk_list, \"Found \" SIZE_FORMAT \" oop chunks which is more than there should be\", num_chunks);\n+    guarantee(num_chunks <= _chunks_in_chunk_list, \"Found %zu oop chunks which is more than there should be\", num_chunks);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  assert(should_be_sliced(obj), \"Must be an array object %d and large \" SIZE_FORMAT, obj->is_objArray(), obj->size());\n+  assert(should_be_sliced(obj), \"Must be an array object %d and large %zu\", obj->is_objArray(), obj->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-         \"Num entries in completed buffers should be \" SIZE_FORMAT \" but are \" SIZE_FORMAT,\n+         \"Num entries in completed buffers should be %zu but are %zu\",\n@@ -472,1 +472,1 @@\n-           \"Buffer not fully consumed: index: \" SIZE_FORMAT \", size: \" SIZE_FORMAT,\n+           \"Buffer not fully consumed: index: %zu, size: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            \"Trying to invalidate beyond maximum region, from %u size \" SIZE_FORMAT,\n+            \"Trying to invalidate beyond maximum region, from %u size %zu\",\n@@ -76,1 +76,1 @@\n-      out->print_cr(\"_from_card_cache[%u][%u] = \" SIZE_FORMAT \".\",\n+      out->print_cr(\"_from_card_cache[%u][%u] = %zu.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FromCardCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-      log_trace(gc, phases)(\"Phase 2: skip compaction region index: %u, live words: \" SIZE_FORMAT,\n+      log_trace(gc, phases)(\"Phase 2: skip compaction region index: %u, live words: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-  log_trace(gc, phases)(\"      %s: \" SIZE_FORMAT, name, value);\n+  log_trace(gc, phases)(\"      %s: %zu\", name, value);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-                            \"resize by \" SIZE_FORMAT \"B\",\n+                            \"resize by %zuB\",\n@@ -228,2 +228,2 @@\n-         \"minimum_desired_capacity = \" SIZE_FORMAT \", \"\n-         \"maximum_desired_capacity = \" SIZE_FORMAT,\n+         \"minimum_desired_capacity = %zu, \"\n+         \"maximum_desired_capacity = %zu\",\n@@ -246,2 +246,2 @@\n-                              \"Capacity: \" SIZE_FORMAT \"B occupancy: \" SIZE_FORMAT \"B live: \" SIZE_FORMAT \"B \"\n-                              \"min_desired_capacity: \" SIZE_FORMAT \"B (\" UINTX_FORMAT \" %%)\",\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"min_desired_capacity: %zuB (\" UINTX_FORMAT \" %%)\",\n@@ -258,2 +258,2 @@\n-                              \"Capacity: \" SIZE_FORMAT \"B occupancy: \" SIZE_FORMAT \"B live: \" SIZE_FORMAT \"B \"\n-                              \"maximum_desired_capacity: \" SIZE_FORMAT \"B (\" UINTX_FORMAT \" %%)\",\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"maximum_desired_capacity: %zuB (\" UINTX_FORMAT \" %%)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-      assert(r->used() == 0, \"Expected used to be 0 but it was \" SIZE_FORMAT, r->used());\n+      assert(r->used() == 0, \"Expected used to be 0 but it was %zu\", r->used());\n@@ -112,1 +112,1 @@\n-    ls.print(\"%s regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT \"(\"  SIZE_FORMAT \")\",\n+    ls.print(\"%s regions: %zu->%zu(\"  \"%zu)\",\n@@ -144,2 +144,2 @@\n-    assert(usage._eden_region_count == 0, \"Expected no eden regions, but got \" SIZE_FORMAT, usage._eden_region_count);\n-    assert(usage._survivor_region_count == after._survivor_length, \"Expected survivors to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._eden_region_count == 0, \"Expected no eden regions, but got %zu\", usage._eden_region_count);\n+    assert(usage._survivor_region_count == after._survivor_length, \"Expected survivors to be %zu but was %zu\",\n@@ -147,1 +147,1 @@\n-    assert(usage._old_region_count == after._old_length, \"Expected old to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._old_region_count == after._old_length, \"Expected old to be %zu but was %zu\",\n@@ -149,1 +149,1 @@\n-    assert(usage._humongous_region_count == after._humongous_length, \"Expected humongous to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._humongous_region_count == after._humongous_length, \"Expected humongous to be %zu but was %zu\",\n@@ -159,1 +159,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n@@ -162,1 +162,1 @@\n-  log_info(gc, heap)(\"Old regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT,\n+  log_info(gc, heap)(\"Old regions: %zu->%zu\",\n@@ -164,1 +164,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n@@ -167,1 +167,1 @@\n-  log_info(gc, heap)(\"Humongous regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT,\n+  log_info(gc, heap)(\"Humongous regions: %zu->%zu\",\n@@ -169,1 +169,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  log_debug(gc, ihop)(\"Target occupancy update: old: \" SIZE_FORMAT \"B, new: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ihop)(\"Target occupancy update: old: %zuB, new: %zuB\",\n@@ -57,2 +57,2 @@\n-  log_debug(gc, ihop)(\"Basic information (value update), threshold: \" SIZE_FORMAT \"B (%1.2f), target occupancy: \" SIZE_FORMAT \"B, current occupancy: \" SIZE_FORMAT \"B, \"\n-                      \"recent allocation size: \" SIZE_FORMAT \"B, recent allocation duration: %1.2fms, recent old gen allocation rate: %1.2fB\/s, recent marking phase length: %1.2fms\",\n+  log_debug(gc, ihop)(\"Basic information (value update), threshold: %zuB (%1.2f), target occupancy: %zuB, current occupancy: %zuB, \"\n+                      \"recent allocation size: %zuB, recent allocation duration: %1.2fms, recent old gen allocation rate: %1.2fB\/s, recent marking phase length: %1.2fms\",\n@@ -172,2 +172,2 @@\n-  log_debug(gc, ihop)(\"Adaptive IHOP information (value update), threshold: \" SIZE_FORMAT \"B (%1.2f), internal target occupancy: \" SIZE_FORMAT \"B, \"\n-                      \"occupancy: \" SIZE_FORMAT \"B, additional buffer size: \" SIZE_FORMAT \"B, predicted old gen allocation rate: %1.2fB\/s, \"\n+  log_debug(gc, ihop)(\"Adaptive IHOP information (value update), threshold: %zuB (%1.2f), internal target occupancy: %zuB, \"\n+                      \"occupancy: %zuB, additional buffer size: %zuB, predicted old gen allocation rate: %1.2fB\/s, \"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  log_info_p(gc, init)(\"Heap Region Size: \" SIZE_FORMAT \"M\", G1HeapRegionSize \/ M);\n+  log_info_p(gc, init)(\"Heap Region Size: %zuM\", G1HeapRegionSize \/ M);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1InitLogger.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -289,2 +289,2 @@\n-  assert(_survivor_space_used <= _survivor_space_committed, \"Survivor used bytes(\" SIZE_FORMAT\n-         \") should be less than or equal to survivor committed(\" SIZE_FORMAT \")\",\n+  assert(_survivor_space_used <= _survivor_space_committed, \"Survivor used bytes(%zu\"\n+         \") should be less than or equal to survivor committed(%zu)\",\n@@ -293,2 +293,2 @@\n-  assert(_old_gen_used <= _old_gen_committed, \"Old gen used bytes(\" SIZE_FORMAT\n-         \") should be less than or equal to old gen committed(\" SIZE_FORMAT \")\",\n+  assert(_old_gen_used <= _old_gen_committed, \"Old gen used bytes(%zu\"\n+         \") should be less than or equal to old gen committed(%zu)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  assert(is_aligned(size_in_bytes, page_size()), \"Given size (\" SIZE_FORMAT \") should be aligned.\", size_in_bytes);\n+  assert(is_aligned(size_in_bytes, page_size()), \"Given size (%zu) should be aligned.\", size_in_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-#define RATE_TOTAL_FORMAT \"%0.0f%% \" SIZE_FORMAT \"\/\" SIZE_FORMAT\n+#define RATE_TOTAL_FORMAT \"%0.0f%% %zu\/%zu\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            \"Reserved space base \" PTR_FORMAT \" is not aligned to requested page size \" SIZE_FORMAT, p2i(rs.base()), page_size);\n+            \"Reserved space base \" PTR_FORMAT \" is not aligned to requested page size %zu\", p2i(rs.base()), page_size);\n@@ -53,1 +53,1 @@\n-            \"Given used reserved space size needs to be OS page size aligned (\" SIZE_FORMAT \" bytes) but is \" SIZE_FORMAT, os::vm_page_size(), used_size);\n+            \"Given used reserved space size needs to be OS page size aligned (%zu bytes) but is %zu\", os::vm_page_size(), used_size);\n@@ -55,1 +55,1 @@\n-            \"Used size of reserved space \" SIZE_FORMAT \" bytes is smaller than reservation at \" SIZE_FORMAT \" bytes\", used_size, rs.size());\n+            \"Used size of reserved space %zu bytes is smaller than reservation at %zu bytes\", used_size, rs.size());\n@@ -57,1 +57,1 @@\n-            \"Expected that the virtual space is size aligned, but \" SIZE_FORMAT \" is not aligned to page size \" SIZE_FORMAT, rs.size(), page_size);\n+            \"Expected that the virtual space is size aligned, but %zu is not aligned to page size %zu\", rs.size(), page_size);\n@@ -128,1 +128,1 @@\n-            \"Given boundary page \" SIZE_FORMAT \" is beyond managed page count \" SIZE_FORMAT, index, _committed.size());\n+            \"Given boundary page %zu is beyond managed page count %zu\", index, _committed.size());\n@@ -135,2 +135,2 @@\n-           \"Tried to commit area from page \" SIZE_FORMAT \" to page \" SIZE_FORMAT \" \"\n-           \"that is outside of managed space of \" SIZE_FORMAT \" pages\",\n+           \"Tried to commit area from page %zu to page %zu \"\n+           \"that is outside of managed space of %zu pages\",\n@@ -154,1 +154,1 @@\n-            \"Given start page \" SIZE_FORMAT \" is larger or equal to end page \" SIZE_FORMAT, start_page, end_page);\n+            \"Given start page %zu is larger or equal to end page %zu\", start_page, end_page);\n@@ -156,1 +156,1 @@\n-            \"Given end page \" SIZE_FORMAT \" is beyond end of managed page amount of \" SIZE_FORMAT, end_page, _committed.size());\n+            \"Given end page %zu is beyond end of managed page amount of %zu\", end_page, _committed.size());\n@@ -183,1 +183,1 @@\n-            \"Specified area is not uncommitted, start page: \" SIZE_FORMAT \", page count: \" SIZE_FORMAT,\n+            \"Specified area is not uncommitted, start page: %zu, page count: %zu\",\n@@ -205,1 +205,1 @@\n-            \"Given start page \" SIZE_FORMAT \" is larger or equal to end page \" SIZE_FORMAT, start_page, end_page);\n+            \"Given start page %zu is larger or equal to end page %zu\", start_page, end_page);\n@@ -213,1 +213,1 @@\n-            \"Specified area is not committed, start page: \" SIZE_FORMAT \", page count: \" SIZE_FORMAT,\n+            \"Specified area is not committed, start page: %zu, page count: %zu\",\n@@ -243,3 +243,3 @@\n-  out->print_cr(\" - committed: \" SIZE_FORMAT, committed_size());\n-  out->print_cr(\" - reserved:  \" SIZE_FORMAT, reserved_size());\n-  out->print_cr(\" - preferred page size: \" SIZE_FORMAT, _page_size);\n+  out->print_cr(\" - committed: %zu\", committed_size());\n+  out->print_cr(\" - reserved:  %zu\", reserved_size());\n+  out->print_cr(\" - preferred page size: %zu\", _page_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT, index, _max_num_optional_regions);\n+         \"Trying to access optional region idx %u beyond %zu\", index, _max_num_optional_regions);\n@@ -87,1 +87,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT, index, _max_num_optional_regions);\n+         \"Trying to access optional region idx %u beyond %zu\", index, _max_num_optional_regions);\n@@ -94,1 +94,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT \" \" HR_FORMAT,\n+         \"Trying to access optional region idx %u beyond %zu \" HR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -573,2 +573,2 @@\n-           (\"%s refinement: %.2fms, refined: \" SIZE_FORMAT\n-            \", precleaned: \" SIZE_FORMAT \", dirtied: \" SIZE_FORMAT,\n+           (\"%s refinement: %.2fms, refined: %zu\"\n+            \", precleaned: %zu, dirtied: %zu\",\n@@ -711,1 +711,1 @@\n-    log_debug(gc, ergo, ihop)(\"%s occupancy: \" SIZE_FORMAT \"B allocation request: \" SIZE_FORMAT \"B threshold: \" SIZE_FORMAT \"B (%1.2f) source: %s\",\n+    log_debug(gc, ergo, ihop)(\"%s occupancy: %zuB allocation request: %zuB threshold: %zuB (%1.2f) source: %s\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-              \"Range not uncommitted, start: %u, num_regions: \" SIZE_FORMAT,\n+              \"Range not uncommitted, start: %u, num_regions: %zu\",\n@@ -116,1 +116,1 @@\n-             \"Range not committed, start: %u, num_regions: \" SIZE_FORMAT,\n+             \"Range not committed, start: %u, num_regions: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    assert(idx < _num_total_scan_chunks, \"Index \" SIZE_FORMAT \" out of bounds \" SIZE_FORMAT,\n+    assert(idx < _num_total_scan_chunks, \"Index %zu out of bounds %zu\",\n@@ -359,1 +359,1 @@\n-           \"Trying to access index \" SIZE_FORMAT \" out of bounds \" SIZE_FORMAT,\n+           \"Trying to access index %zu out of bounds %zu\",\n@@ -1363,1 +1363,1 @@\n-    ls.print_cr(\"Visited cards \" SIZE_FORMAT \" Total dirty \" SIZE_FORMAT \" (%.2lf%%) Total old \" SIZE_FORMAT \" (%.2lf%%)\",\n+    ls.print_cr(\"Visited cards %zu Total dirty %zu (%.2lf%%) Total old %zu (%.2lf%%)\",\n@@ -1396,1 +1396,1 @@\n-    log_debug(gc, ergo)(\"Running %s using %u workers for \" SIZE_FORMAT \" regions\",\n+    log_debug(gc, ergo)(\"Running %s using %u workers for %zu regions\",\n@@ -1429,1 +1429,1 @@\n-         \"Card at \" PTR_FORMAT \" index \" SIZE_FORMAT \" representing heap at \" PTR_FORMAT \" (%u) must be in committed heap\",\n+         \"Card at \" PTR_FORMAT \" index %zu representing heap at \" PTR_FORMAT \" (%u) must be in committed heap\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -156,2 +156,2 @@\n-    out->print_cr(\"    \" SIZE_FORMAT_W(8) \" (%5.1f%%) by \" SIZE_FORMAT \" \"\n-                  \"(\" SIZE_FORMAT \") %s regions unused \" SIZE_FORMAT,\n+    out->print_cr(\"    \" SIZE_FORMAT_W(8) \" (%5.1f%%) by %zu \"\n+                  \"(%zu) %s regions unused %zu\",\n@@ -164,2 +164,2 @@\n-    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) entries by \" SIZE_FORMAT \" \"\n-                  \"(\" SIZE_FORMAT \") %s regions\",\n+    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) entries by %zu \"\n+                  \"(%zu) %s regions\",\n@@ -171,1 +171,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT_W(8) \"%s (%5.1f%%) by \" SIZE_FORMAT \" %s regions\",\n+    out->print_cr(\"    \" SIZE_FORMAT_W(8) \"%s (%5.1f%%) by %zu %s regions\",\n@@ -178,1 +178,1 @@\n-    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) elements by \" SIZE_FORMAT \" %s regions\",\n+    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) elements by %zu %s regions\",\n@@ -261,2 +261,2 @@\n-    out->print_cr(\"  Total per region rem sets sizes = \" SIZE_FORMAT\n-                  \" Max = \" SIZE_FORMAT \" unused = \" SIZE_FORMAT,\n+    out->print_cr(\"  Total per region rem sets sizes = %zu\"\n+                  \" Max = %zu unused = %zu\",\n@@ -270,1 +270,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT \" occupied cards represented.\",\n+    out->print_cr(\"    %zu occupied cards represented.\",\n@@ -279,1 +279,1 @@\n-                  \"size = \" SIZE_FORMAT \" occupied = \" SIZE_FORMAT,\n+                  \"size = %zu occupied = %zu\",\n@@ -290,2 +290,2 @@\n-    out->print_cr(\"  Total heap region code root sets sizes = \" SIZE_FORMAT \"%s.\"\n-                  \"  Max = \" SIZE_FORMAT \"%s.\",\n+    out->print_cr(\"  Total heap region code root sets sizes = %zu%s.\"\n+                  \"  Max = %zu%s.\",\n@@ -300,1 +300,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT \" code roots represented.\",\n+    out->print_cr(\"    %zu code roots represented.\",\n@@ -307,1 +307,1 @@\n-                  \"size = \" SIZE_FORMAT \"%s, num_slots = \" SIZE_FORMAT \".\",\n+                  \"size = %zu%s, num_slots = %zu.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            \"age_in_group is %d not between 0 and \" SIZE_FORMAT, age_in_group, _num_added_regions);\n+            \"age_in_group is %d not between 0 and %zu\", age_in_group, _num_added_regions);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvRateGroup.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  log_trace(gc, heap)(\"Concurrent Uncommit: \" SIZE_FORMAT \"%s, %u regions, %1.3fms\",\n+  log_trace(gc, heap)(\"Concurrent Uncommit: %zu%s, %u regions, %1.3fms\",\n@@ -93,1 +93,1 @@\n-  log_debug(gc, heap)(\"Concurrent Uncommit Summary: \" SIZE_FORMAT \"%s, %u regions, %1.3fms\",\n+  log_debug(gc, heap)(\"Concurrent Uncommit Summary: %zu%s, %u regions, %1.3fms\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-    log_debug(gc, humongous)(\"Reclaimed humongous region %u (object size \" SIZE_FORMAT \" @ \" PTR_FORMAT \")\",\n+    log_debug(gc, humongous)(\"Reclaimed humongous region %u (object size %zu @ \" PTR_FORMAT \")\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n-      log_warning(gc, ergo)(\"NewSize (\" SIZE_FORMAT \"k) is greater than the MaxNewSize (\" SIZE_FORMAT \"k). \"\n-                            \"A new max generation size of \" SIZE_FORMAT \"k will be used.\",\n+      log_warning(gc, ergo)(\"NewSize (%zuk) is greater than the MaxNewSize (%zuk). \"\n+                            \"A new max generation size of %zuk will be used.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGenSizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -401,1 +401,1 @@\n-      log_error(gc, verify)(\"region \" HR_FORMAT \" is empty but has \" SIZE_FORMAT \" code root entries\",\n+      log_error(gc, verify)(\"region \" HR_FORMAT \" is empty but has %zu code root entries\",\n@@ -410,1 +410,1 @@\n-      log_error(gc, verify)(\"region \" HR_FORMAT \" is a continuation of a humongous region but has \" SIZE_FORMAT \" code root entries\",\n+      log_error(gc, verify)(\"region \" HR_FORMAT \" is a continuation of a humongous region but has %zu code root entries\",\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  out->print_cr(\"  Static structures = \" SIZE_FORMAT, HeapRegionRemSet::static_mem_size());\n+  out->print_cr(\"  Static structures = %zu\", HeapRegionRemSet::static_mem_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-                        \"G1HeapRegionSize (\" SIZE_FORMAT \") must be \"\n+                        \"G1HeapRegionSize (%zu) must be \"\n@@ -172,1 +172,1 @@\n-                        \"NewSize (\" SIZE_FORMAT \") must be less than ergonomic maximum value\\n\",\n+                        \"NewSize (%zu) must be less than ergonomic maximum value\\n\",\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                 \"Remaining size (\" SIZE_FORMAT \") is too small to fill (based on \" SIZE_FORMAT \" and \" SIZE_FORMAT \")\",\n+                 \"Remaining size (%zu) is too small to fill (based on %zu and %zu)\",\n@@ -645,2 +645,2 @@\n-      st->print(\"    local\/remote\/unbiased\/uncommitted: \" SIZE_FORMAT \"K\/\"\n-                SIZE_FORMAT \"K\/\" SIZE_FORMAT \"K\/\" SIZE_FORMAT \"K\\n\",\n+      st->print(\"    local\/remote\/unbiased\/uncommitted: %zuK\/\"\n+                \"%zuK\/%zuK\/%zuK\\n\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-  st->print(\" space \" SIZE_FORMAT \"K, %d%% used\", capacity_in_bytes() \/ K,\n+  st->print(\" space %zuK, %d%% used\", capacity_in_bytes() \/ K,\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-                       \" Space \" SIZE_FORMAT \"%s,\"\n-                       \" Generation \" SIZE_FORMAT \"%s,\"\n-                       \" Heap \" SIZE_FORMAT \"%s\",\n+                       \" Space %zu%s,\"\n+                       \" Generation %zu%s,\"\n+                       \" Heap %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-      log_warning(gc)(\"\\tsize=\" SIZE_FORMAT, size);\n+      log_warning(gc)(\"\\tsize=%zu\", size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-  log_trace(gc, ergo)(\"%s after scavenge average_promoted \" SIZE_FORMAT \" padded_average_promoted \" SIZE_FORMAT \" free in old gen \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"%s after scavenge average_promoted %zu padded_average_promoted %zu free in old gen %zu\",\n@@ -339,6 +339,6 @@\n-          \" desired_eden_size: \" SIZE_FORMAT\n-          \" old_eden_size: \" SIZE_FORMAT\n-          \" eden_limit: \" SIZE_FORMAT\n-          \" cur_eden: \" SIZE_FORMAT\n-          \" max_eden_size: \" SIZE_FORMAT\n-          \" avg_young_live: \" SIZE_FORMAT,\n+          \" desired_eden_size: %zu\"\n+          \" old_eden_size: %zu\"\n+          \" eden_limit: %zu\"\n+          \" cur_eden: %zu\"\n+          \" max_eden_size: %zu\"\n+          \" avg_young_live: %zu\",\n@@ -382,1 +382,1 @@\n-  log_debug(gc, ergo)(\"Live_space: \" SIZE_FORMAT \" free_space: \" SIZE_FORMAT,\n+  log_debug(gc, ergo)(\"Live_space: %zu free_space: %zu\",\n@@ -385,1 +385,1 @@\n-  log_trace(gc, ergo)(\"Base_footprint: \" SIZE_FORMAT \" avg_young_live: \" SIZE_FORMAT \" avg_old_live: \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"Base_footprint: %zu avg_young_live: %zu avg_old_live: %zu\",\n@@ -390,1 +390,1 @@\n-  log_debug(gc, ergo)(\"Old eden_size: \" SIZE_FORMAT \" desired_eden_size: \" SIZE_FORMAT,\n+  log_debug(gc, ergo)(\"Old eden_size: %zu desired_eden_size: %zu\",\n@@ -517,5 +517,5 @@\n-          \" desired_promo_size: \" SIZE_FORMAT\n-          \" promo_limit: \" SIZE_FORMAT\n-          \" free_in_old_gen: \" SIZE_FORMAT\n-          \" max_old_gen_size: \" SIZE_FORMAT\n-          \" avg_old_live: \" SIZE_FORMAT,\n+          \" desired_promo_size: %zu\"\n+          \" promo_limit: %zu\"\n+          \" free_in_old_gen: %zu\"\n+          \" max_old_gen_size: %zu\"\n+          \" avg_old_live: %zu\",\n@@ -554,1 +554,1 @@\n-  log_debug(gc, ergo)(\"Live_space: \" SIZE_FORMAT \" free_space: \" SIZE_FORMAT,\n+  log_debug(gc, ergo)(\"Live_space: %zu free_space: %zu\",\n@@ -557,1 +557,1 @@\n-  log_trace(gc, ergo)(\"Base_footprint: \" SIZE_FORMAT \" avg_young_live: \" SIZE_FORMAT \" avg_old_live: \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"Base_footprint: %zu avg_young_live: %zu avg_old_live: %zu\",\n@@ -562,1 +562,1 @@\n-  log_debug(gc, ergo)(\"Old promo_size: \" SIZE_FORMAT \" desired_promo_size: \" SIZE_FORMAT,\n+  log_debug(gc, ergo)(\"Old promo_size: %zu desired_promo_size: %zu\",\n@@ -645,1 +645,1 @@\n-    \"desired_promo_size \" SIZE_FORMAT \" promo delta \" SIZE_FORMAT,\n+    \"desired_promo_size %zu promo delta %zu\",\n@@ -664,1 +664,1 @@\n-    \"desired_eden_size \" SIZE_FORMAT \" eden delta \" SIZE_FORMAT,\n+    \"desired_eden_size %zu eden delta %zu\",\n@@ -680,1 +680,1 @@\n-  log_trace(gc, ergo)(\"PSAdaptiveSizePolicy::adjust_promo_for_throughput(is_full: %d, promo: \" SIZE_FORMAT \"): mutator_cost %f  major_gc_cost %f minor_gc_cost %f\",\n+  log_trace(gc, ergo)(\"PSAdaptiveSizePolicy::adjust_promo_for_throughput(is_full: %d, promo: %zu): mutator_cost %f  major_gc_cost %f minor_gc_cost %f\",\n@@ -694,1 +694,1 @@\n-      log_trace(gc, ergo)(\"Scaled tenured increment: \" SIZE_FORMAT \" by %f down to \" SIZE_FORMAT,\n+      log_trace(gc, ergo)(\"Scaled tenured increment: %zu by %f down to %zu\",\n@@ -749,1 +749,1 @@\n-    log_trace(gc, ergo)(\"Adjusting tenured gen for throughput (avg %f goal %f). desired_promo_size \" SIZE_FORMAT \" promo_delta \" SIZE_FORMAT ,\n+    log_trace(gc, ergo)(\"Adjusting tenured gen for throughput (avg %f goal %f). desired_promo_size %zu promo_delta %zu\",\n@@ -767,1 +767,1 @@\n-  log_trace(gc, ergo)(\"PSAdaptiveSizePolicy::adjust_eden_for_throughput(is_full: %d, cur_eden: \" SIZE_FORMAT \"): mutator_cost %f  major_gc_cost %f minor_gc_cost %f\",\n+  log_trace(gc, ergo)(\"PSAdaptiveSizePolicy::adjust_eden_for_throughput(is_full: %d, cur_eden: %zu): mutator_cost %f  major_gc_cost %f minor_gc_cost %f\",\n@@ -780,1 +780,1 @@\n-    log_trace(gc, ergo)(\"Scaled eden increment: \" SIZE_FORMAT \" by %f down to \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"Scaled eden increment: %zu by %f down to %zu\",\n@@ -834,1 +834,1 @@\n-    log_trace(gc, ergo)(\"Adjusting eden for throughput (avg %f goal %f). desired_eden_size \" SIZE_FORMAT \" eden delta \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"Adjusting eden for throughput (avg %f goal %f). desired_eden_size %zu eden delta %zu\",\n@@ -851,3 +851,3 @@\n-    \"starting promo size \" SIZE_FORMAT\n-    \" reduced promo size \" SIZE_FORMAT\n-    \" promo delta \" SIZE_FORMAT,\n+    \"starting promo size %zu\"\n+    \" reduced promo size %zu\"\n+    \" promo delta %zu\",\n@@ -873,3 +873,3 @@\n-    \" starting eden size \" SIZE_FORMAT\n-    \" reduced eden size \" SIZE_FORMAT\n-    \" eden delta \" SIZE_FORMAT,\n+    \" starting eden size %zu\"\n+    \" reduced eden size %zu\"\n+    \" eden delta %zu\",\n@@ -1060,1 +1060,1 @@\n-  log_debug(gc, ergo)(\"avg_promoted_padded_avg: %f  avg_pretenured_padded_avg: %f  tenuring_thresh: %d  target_size: \" SIZE_FORMAT,\n+  log_debug(gc, ergo)(\"avg_promoted_padded_avg: %f  avg_pretenured_padded_avg: %f  tenuring_thresh: %d  target_size: %zu\",\n@@ -1083,1 +1083,1 @@\n-  log_trace(gc, ergo)(\"AdaptiveSizePolicy::update_averages:  survived: \"  SIZE_FORMAT \"  promoted: \"  SIZE_FORMAT \"  overflow: %s\",\n+  log_trace(gc, ergo)(\"AdaptiveSizePolicy::update_averages:  survived: %zu  promoted: %zu  overflow: %s\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        log_develop_trace(gc, scavenge)(\"{%s %s \" PTR_FORMAT \" -> \" PTR_FORMAT \" (\" SIZE_FORMAT \")}\",\n+        log_develop_trace(gc, scavenge)(\"{%s %s \" PTR_FORMAT \" -> \" PTR_FORMAT \" (%zu)}\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-    log_debug(gc)(\"Expanding %s from \" SIZE_FORMAT \"K by \" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K\",\n+    log_debug(gc)(\"Expanding %s from %zuK by %zuK to %zuK\",\n@@ -281,1 +281,1 @@\n-    log_debug(gc)(\"Shrinking %s from \" SIZE_FORMAT \"K by \" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K\",\n+    log_debug(gc)(\"Shrinking %s from %zuK by %zuK to %zuK\",\n@@ -311,3 +311,3 @@\n-    \"desired free: \" SIZE_FORMAT \" used: \" SIZE_FORMAT\n-    \" new size: \" SIZE_FORMAT \" current size \" SIZE_FORMAT\n-    \" gen limits: \" SIZE_FORMAT \" \/ \" SIZE_FORMAT,\n+    \"desired free: %zu used: %zu\"\n+    \" new size: %zu current size %zu\"\n+    \" gen limits: %zu \/ %zu\",\n@@ -331,1 +331,1 @@\n-  log_trace(gc, ergo)(\"AdaptiveSizePolicy::old generation size: collection: %d (\" SIZE_FORMAT \") -> (\" SIZE_FORMAT \") \",\n+  log_trace(gc, ergo)(\"AdaptiveSizePolicy::old generation size: collection: %d (%zu) -> (%zu) \",\n@@ -369,1 +369,1 @@\n-  st->print(\" total \" SIZE_FORMAT \"K, used \" SIZE_FORMAT \"K\",\n+  st->print(\" total %zuK, used %zuK\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-  log_develop_trace(gc, compaction)(\"summary_data_bytes=\" SIZE_FORMAT, total_words * HeapWordSize);\n+  log_develop_trace(gc, compaction)(\"summary_data_bytes=%zu\", total_words * HeapWordSize);\n@@ -647,1 +647,1 @@\n-    log_develop_trace(gc, compaction)(\"split:  clearing source_region field in [\" SIZE_FORMAT \", \" SIZE_FORMAT \")\", beg_idx, end_idx);\n+    log_develop_trace(gc, compaction)(\"split:  clearing source_region field in [%zu, %zu)\", beg_idx, end_idx);\n@@ -669,1 +669,1 @@\n-    log_develop_trace(gc, compaction)(\"%s split:  src=\" PTR_FORMAT \" src_c=\" SIZE_FORMAT \" pos=\" SIZE_FORMAT,\n+    log_develop_trace(gc, compaction)(\"%s split:  src=\" PTR_FORMAT \" src_c=%zu pos=%zu\",\n@@ -671,1 +671,1 @@\n-    log_develop_trace(gc, compaction)(\"%s split:  dst=\" PTR_FORMAT \" dst_c=\" SIZE_FORMAT \" tn=\" PTR_FORMAT,\n+    log_develop_trace(gc, compaction)(\"%s split:  dst=\" PTR_FORMAT \" dst_c=%zu tn=\" PTR_FORMAT,\n@@ -679,1 +679,1 @@\n-      log_develop_trace(gc, compaction)(\"%s split:  po_beg=\" PTR_FORMAT \" \" SIZE_FORMAT \" po_end=\" PTR_FORMAT \" \" SIZE_FORMAT,\n+      log_develop_trace(gc, compaction)(\"%s split:  po_beg=\" PTR_FORMAT \" %zu po_end=\" PTR_FORMAT \" %zu\",\n@@ -879,2 +879,2 @@\n-      err_msg(\"Unable to allocate \" SIZE_FORMAT \"KB bitmaps for parallel \"\n-      \"garbage collection for the requested \" SIZE_FORMAT \"KB heap.\",\n+      err_msg(\"Unable to allocate %zuKB bitmaps for parallel \"\n+      \"garbage collection for the requested %zuKB heap.\",\n@@ -887,2 +887,2 @@\n-      err_msg(\"Unable to allocate \" SIZE_FORMAT \"KB card tables for parallel \"\n-      \"garbage collection for the requested \" SIZE_FORMAT \"KB heap.\",\n+      err_msg(\"Unable to allocate %zuKB card tables for parallel \"\n+      \"garbage collection for the requested %zuKB heap.\",\n@@ -1088,1 +1088,1 @@\n-      \"cur_dens=%5.3f dw_dens=%5.3f dw_goal=\" SIZE_FORMAT,\n+      \"cur_dens=%5.3f dw_dens=%5.3f dw_goal=%zu\",\n@@ -1091,2 +1091,2 @@\n-      \"space_live=\" SIZE_FORMAT \" space_used=\" SIZE_FORMAT \" \"\n-      \"space_cap=\" SIZE_FORMAT,\n+      \"space_live=%zu space_used=%zu \"\n+      \"space_cap=%zu\",\n@@ -1172,3 +1172,3 @@\n-      \"spl=\" SIZE_FORMAT \" \"\n-      \"d2l=\" SIZE_FORMAT \" d2l%%=%6.4f \"\n-      \"d2r=\" SIZE_FORMAT \" l2r=\" SIZE_FORMAT \" \"\n+      \"spl=%zu \"\n+      \"d2l=%zu d2l%%=%6.4f \"\n+      \"d2r=%zu l2r=%zu \"\n@@ -1390,2 +1390,2 @@\n-      \"space_live=\" SIZE_FORMAT \" space_used=\" SIZE_FORMAT \" \"\n-      \"space_cap=\" SIZE_FORMAT,\n+      \"space_live=%zu space_used=%zu \"\n+      \"space_cap=%zu\",\n@@ -1395,2 +1395,2 @@\n-      \"dead_wood_limiter(%6.4f, \" SIZE_FORMAT \")=%6.4f \"\n-      \"dead_wood_max=\" SIZE_FORMAT \" dead_wood_limit=\" SIZE_FORMAT,\n+      \"dead_wood_limiter(%6.4f, %zu)=%6.4f \"\n+      \"dead_wood_max=%zu dead_wood_limit=%zu\",\n@@ -1549,3 +1549,3 @@\n-        \"id=%d cap=\" SIZE_FORMAT \" dp=\" PTR_FORMAT \" \"\n-        \"dp_region=\" SIZE_FORMAT \" \" \"dp_count=\" SIZE_FORMAT \" \"\n-        \"cr_count=\" SIZE_FORMAT \" \" \"nt=\" PTR_FORMAT,\n+        \"id=%d cap=%zu dp=\" PTR_FORMAT \" \"\n+        \"dp_region=%zu \" \"dp_count=%zu \"\n+        \"cr_count=%zu \" \"nt=\" PTR_FORMAT,\n@@ -1567,1 +1567,1 @@\n-      SIZE_FORMAT \"-\" SIZE_FORMAT \" \"\n+      \"%zu-%zu \"\n@@ -1569,1 +1569,1 @@\n-      SIZE_FORMAT \"-\" SIZE_FORMAT,\n+      \"%zu-%zu\",\n@@ -1795,1 +1795,1 @@\n-      log_trace(gc, ergo)(\"old_gen_capacity: \" SIZE_FORMAT \" young_gen_capacity: \" SIZE_FORMAT,\n+      log_trace(gc, ergo)(\"old_gen_capacity: %zu young_gen_capacity: %zu\",\n@@ -2153,1 +2153,1 @@\n-    log.trace(SIZE_FORMAT \" initially fillable regions\", _total_regions);\n+    log.trace(\"%zu initially fillable regions\", _total_regions);\n@@ -2492,1 +2492,1 @@\n-      log_warning(gc)(\"region \" SIZE_FORMAT \" not filled: destination_count=%u\",\n+      log_warning(gc)(\"region %zu not filled: destination_count=%u\",\n@@ -2501,1 +2501,1 @@\n-      log_warning(gc)(\"region \" SIZE_FORMAT \" not empty: destination_count=%u\",\n+      log_warning(gc)(\"region %zu not empty: destination_count=%u\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-        log_trace(gc, ergo)(\"old_gen_capacity: \" SIZE_FORMAT \" young_gen_capacity: \" SIZE_FORMAT,\n+        log_trace(gc, ergo)(\"old_gen_capacity: %zu young_gen_capacity: %zu\",\n@@ -711,1 +711,1 @@\n-  log_trace(ergo)(\"%s scavenge: average_promoted \" SIZE_FORMAT \" padded_average_promoted \" SIZE_FORMAT \" free in old gen \" SIZE_FORMAT,\n+  log_trace(ergo)(\"%s scavenge: average_promoted %zu padded_average_promoted %zu free in old gen %zu\",\n@@ -716,1 +716,1 @@\n-    log_trace(ergo)(\" padded_promoted_average is greater than maximum promotion = \" SIZE_FORMAT, young_gen->used_in_bytes());\n+    log_trace(ergo)(\" padded_promoted_average is greater than maximum promotion = %zu\", young_gen->used_in_bytes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -259,3 +259,3 @@\n-                        \"desired eden: \" SIZE_FORMAT \" survivor: \" SIZE_FORMAT\n-                        \" used: \" SIZE_FORMAT \" capacity: \" SIZE_FORMAT\n-                        \" gen limits: \" SIZE_FORMAT \" \/ \" SIZE_FORMAT,\n+                        \"desired eden: %zu survivor: %zu\"\n+                        \" used: %zu capacity: %zu\"\n+                        \" gen limits: %zu \/ %zu\",\n@@ -318,1 +318,1 @@\n-      log_trace(gc)(\"PSYoung generation size at maximum: \" SIZE_FORMAT \"K\", orig_size\/K);\n+      log_trace(gc)(\"PSYoung generation size at maximum: %zuK\", orig_size\/K);\n@@ -320,1 +320,1 @@\n-      log_trace(gc)(\"PSYoung generation size at minimum: \" SIZE_FORMAT \"K\", orig_size\/K);\n+      log_trace(gc)(\"PSYoung generation size at minimum: %zuK\", orig_size\/K);\n@@ -326,1 +326,1 @@\n-    log_trace(gc)(\"PSYoung generation size changed: \" SIZE_FORMAT \"K->\" SIZE_FORMAT \"K\",\n+    log_trace(gc)(\"PSYoung generation size changed: %zuK->%zuK\",\n@@ -423,1 +423,1 @@\n-  log_trace(gc, ergo)(\"PSYoungGen::resize_spaces(requested_eden_size: \" SIZE_FORMAT \", requested_survivor_size: \" SIZE_FORMAT \")\",\n+  log_trace(gc, ergo)(\"PSYoungGen::resize_spaces(requested_eden_size: %zu, requested_survivor_size: %zu)\",\n@@ -425,1 +425,1 @@\n-  log_trace(gc, ergo)(\"    eden: [\" PTR_FORMAT \"..\" PTR_FORMAT \") \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"    eden: [\" PTR_FORMAT \"..\" PTR_FORMAT \") %zu\",\n@@ -431,1 +431,1 @@\n-  log_trace(gc, ergo)(\"    from: [\" PTR_FORMAT \"..\" PTR_FORMAT \") \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"    from: [\" PTR_FORMAT \"..\" PTR_FORMAT \") %zu\",\n@@ -437,1 +437,1 @@\n-  log_trace(gc, ergo)(\"      to: [\" PTR_FORMAT \"..\" PTR_FORMAT \") \" SIZE_FORMAT,\n+  log_trace(gc, ergo)(\"      to: [\" PTR_FORMAT \"..\" PTR_FORMAT \") %zu\",\n@@ -528,1 +528,1 @@\n-    log_trace(gc, ergo)(\"    [eden_start .. eden_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [eden_start .. eden_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -532,1 +532,1 @@\n-    log_trace(gc, ergo)(\"    [from_start .. from_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [from_start .. from_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -536,1 +536,1 @@\n-    log_trace(gc, ergo)(\"    [  to_start ..   to_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [  to_start ..   to_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -578,1 +578,1 @@\n-    log_trace(gc, ergo)(\"    [eden_start .. eden_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [eden_start .. eden_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -582,1 +582,1 @@\n-    log_trace(gc, ergo)(\"    [  to_start ..   to_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [  to_start ..   to_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -586,1 +586,1 @@\n-    log_trace(gc, ergo)(\"    [from_start .. from_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") \" SIZE_FORMAT,\n+    log_trace(gc, ergo)(\"    [from_start .. from_end): [\" PTR_FORMAT \" .. \" PTR_FORMAT \") %zu\",\n@@ -663,1 +663,1 @@\n-  log_trace(gc, ergo)(\"AdaptiveSizePolicy::survivor space sizes: collection: %d (\" SIZE_FORMAT \", \" SIZE_FORMAT \") -> (\" SIZE_FORMAT \", \" SIZE_FORMAT \") \",\n+  log_trace(gc, ergo)(\"AdaptiveSizePolicy::survivor space sizes: collection: %d (%zu, %zu) -> (%zu, %zu) \",\n@@ -719,1 +719,1 @@\n-  st->print(\" total \" SIZE_FORMAT \"K, used \" SIZE_FORMAT \"K\",\n+  st->print(\" total %zuK, used %zuK\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -615,1 +615,1 @@\n-        \"New generation size \" SIZE_FORMAT \"K->\" SIZE_FORMAT \"K [eden=\" SIZE_FORMAT \"K,survivor=\" SIZE_FORMAT \"K]\",\n+        \"New generation size %zuK->%zuK [eden=%zuK,survivor=%zuK]\",\n@@ -619,1 +619,1 @@\n-        \"  [allowed \" SIZE_FORMAT \"K extra for %d threads]\",\n+        \"  [allowed %zuK extra for %d threads]\",\n@@ -693,1 +693,1 @@\n-  log_trace(gc, alloc)(\"DefNewGeneration::allocate_from_space(\" SIZE_FORMAT \"):  will_fail: %s  heap_lock: %s  free: \" SIZE_FORMAT \"%s%s returns %s\",\n+  log_trace(gc, alloc)(\"DefNewGeneration::allocate_from_space(%zu):  will_fail: %s  heap_lock: %s  free: %zu%s%s returns %s\",\n@@ -896,1 +896,1 @@\n-  log_debug(gc, promotion)(\"Promotion failure size = \" SIZE_FORMAT \") \", old->size());\n+  log_debug(gc, promotion)(\"Promotion failure size = %zu) \", old->size());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-  log_trace(gc)(\"Restoring \" SIZE_FORMAT \" marks\", _preserved_count + _preserved_overflow_stack_set.get()->size());\n+  log_trace(gc)(\"Restoring %zu marks\", _preserved_count + _preserved_overflow_stack_set.get()->size());\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    log_trace(gc, heap)(\"Expanding %s from \" SIZE_FORMAT \"K by \" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K\",\n+    log_trace(gc, heap)(\"Expanding %s from %zuK by %zuK to %zuK\",\n@@ -142,1 +142,1 @@\n-  log_trace(gc, heap)(\"Shrinking %s from \" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\"Shrinking %s from %zuK to %zuK\",\n@@ -244,1 +244,1 @@\n-      log_trace(gc, heap)(\"    shrink_bytes: %.1fK  current_shrink_factor: \" SIZE_FORMAT \"  new shrink factor: \" SIZE_FORMAT \"  _min_heap_delta_bytes: %.1fK\",\n+      log_trace(gc, heap)(\"    shrink_bytes: %.1fK  current_shrink_factor: %zu  new shrink factor: %zu  _min_heap_delta_bytes: %.1fK\",\n@@ -362,1 +362,1 @@\n-    log_trace(gc)(\"TenuredGeneration::should_collect: because should_allocate(\" SIZE_FORMAT \")\", size);\n+    log_trace(gc)(\"TenuredGeneration::should_collect: because should_allocate(%zu)\", size);\n@@ -368,1 +368,1 @@\n-    log_trace(gc)(\"TenuredGeneration::should_collect: because free(): \" SIZE_FORMAT, free());\n+    log_trace(gc)(\"TenuredGeneration::should_collect: because free(): %zu\", free());\n@@ -373,1 +373,1 @@\n-    log_trace(gc)(\"TenuredGeneration::should_collect: because_capacity_at_prologue: \" SIZE_FORMAT \" < capacity(): \" SIZE_FORMAT,\n+    log_trace(gc)(\"TenuredGeneration::should_collect: because_capacity_at_prologue: %zu < capacity(): %zu\",\n@@ -391,2 +391,2 @@\n-         \"used: \" SIZE_FORMAT \" used_after_gc: \" SIZE_FORMAT\n-         \" capacity: \" SIZE_FORMAT, used(), used_after_gc, capacity());\n+         \"used: %zu used_after_gc: %zu\"\n+         \" capacity: %zu\", used(), used_after_gc, capacity());\n@@ -428,1 +428,1 @@\n-  log_trace(gc)(\"Tenured: promo attempt is%s safe: available(\" SIZE_FORMAT \") %s av_promo(\" SIZE_FORMAT \"), max_promo(\" SIZE_FORMAT \")\",\n+  log_trace(gc)(\"Tenured: promo attempt is%s safe: available(%zu) %s av_promo(%zu), max_promo(%zu)\",\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -340,6 +340,6 @@\n-          \" promo_limit: \" SIZE_FORMAT\n-          \" max_eden_size: \" SIZE_FORMAT\n-          \" total_free_limit: \" SIZE_FORMAT\n-          \" max_old_gen_size: \" SIZE_FORMAT\n-          \" max_eden_size: \" SIZE_FORMAT\n-          \" mem_free_limit: \" SIZE_FORMAT,\n+          \" promo_limit: %zu\"\n+          \" max_eden_size: %zu\"\n+          \" total_free_limit: %zu\"\n+          \" max_old_gen_size: %zu\"\n+          \" max_eden_size: %zu\"\n+          \" mem_free_limit: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/adaptiveSizePolicy.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -385,1 +385,1 @@\n-                            \" size=\" SIZE_FORMAT, loop_count, word_size);\n+                            \" size=%zu\", loop_count, word_size);\n@@ -454,1 +454,1 @@\n-  assert((int)len >= 0, \"size too large \" SIZE_FORMAT \" becomes %d\", words, (int)len);\n+  assert((int)len >= 0, \"size too large %zu becomes %d\", words, (int)len);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-  log_debug(gc, heap)(\"Minimum heap \" SIZE_FORMAT \"  Initial heap \" SIZE_FORMAT \"  Maximum heap \" SIZE_FORMAT,\n+  log_debug(gc, heap)(\"Minimum heap %zu  Initial heap %zu  Maximum heap %zu\",\n@@ -115,1 +115,1 @@\n-         \"HeapAlignment: \" SIZE_FORMAT \" less than SpaceAlignment: \" SIZE_FORMAT,\n+         \"HeapAlignment: %zu less than SpaceAlignment: %zu\",\n@@ -118,1 +118,1 @@\n-         \"HeapAlignment: \" SIZE_FORMAT \" not aligned by SpaceAlignment: \" SIZE_FORMAT,\n+         \"HeapAlignment: %zu not aligned by SpaceAlignment: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-    log_info_p(gc, init)(\"NUMA Nodes: \" SIZE_FORMAT, os::numa_get_groups_num());\n+    log_info_p(gc, init)(\"NUMA Nodes: %zu\", os::numa_get_groups_num());\n@@ -94,1 +94,1 @@\n-  log_info_p(gc, init)(\"Heap Min Capacity: \" SIZE_FORMAT \"%s\",\n+  log_info_p(gc, init)(\"Heap Min Capacity: %zu%s\",\n@@ -96,1 +96,1 @@\n-  log_info_p(gc, init)(\"Heap Initial Capacity: \" SIZE_FORMAT \"%s\",\n+  log_info_p(gc, init)(\"Heap Initial Capacity: %zu%s\",\n@@ -98,1 +98,1 @@\n-  log_info_p(gc, init)(\"Heap Max Capacity: \" SIZE_FORMAT \"%s\",\n+  log_info_p(gc, init)(\"Heap Max Capacity: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shared\/gcInitLogger.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-    out.print(\" \" SIZE_FORMAT \"M->\" SIZE_FORMAT \"M(\"  SIZE_FORMAT \"M)\", used_before_m, used_m, capacity_m);\n+    out.print(\" %zuM->%zuM(\"  \"%zuM)\", used_before_m, used_m, capacity_m);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-              \"NewSize, current value \" SIZE_FORMAT \"%s.\",\n+              \"NewSize, current value %zu%s.\",\n@@ -286,1 +286,1 @@\n-  log_debug(gc)(\"After Metaspace GC failed to allocate size \" SIZE_FORMAT, _size);\n+  log_debug(gc)(\"After Metaspace GC failed to allocate size %zu\", _size);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-         \"HeapAlignment: \" SIZE_FORMAT \" less than GenAlignment: \" SIZE_FORMAT,\n+         \"HeapAlignment: %zu less than GenAlignment: %zu\",\n@@ -79,1 +79,1 @@\n-         \"GenAlignment: \" SIZE_FORMAT \" not aligned by SpaceAlignment: \" SIZE_FORMAT,\n+         \"GenAlignment: %zu not aligned by SpaceAlignment: %zu\",\n@@ -82,1 +82,1 @@\n-         \"HeapAlignment: \" SIZE_FORMAT \" not aligned by GenAlignment: \" SIZE_FORMAT,\n+         \"HeapAlignment: %zu not aligned by GenAlignment: %zu\",\n@@ -122,2 +122,2 @@\n-        log_warning(gc, ergo)(\"MaxNewSize (\" SIZE_FORMAT \"k) is equal to or greater than the entire \"\n-                              \"heap (\" SIZE_FORMAT \"k).  A new max generation size of \" SIZE_FORMAT \"k will be used.\",\n+        log_warning(gc, ergo)(\"MaxNewSize (%zuk) is equal to or greater than the entire \"\n+                              \"heap (%zuk).  A new max generation size of %zuk will be used.\",\n@@ -141,2 +141,2 @@\n-      log_warning(gc, ergo)(\"NewSize (\" SIZE_FORMAT \"k) is greater than the MaxNewSize (\" SIZE_FORMAT \"k). \"\n-                            \"A new max generation size of \" SIZE_FORMAT \"k will be used.\",\n+      log_warning(gc, ergo)(\"NewSize (%zuk) is greater than the MaxNewSize (%zuk). \"\n+                            \"A new max generation size of %zuk will be used.\",\n@@ -270,1 +270,1 @@\n-  log_trace(gc, heap)(\"1: Minimum young \" SIZE_FORMAT \"  Initial young \" SIZE_FORMAT \"  Maximum young \" SIZE_FORMAT,\n+  log_trace(gc, heap)(\"1: Minimum young %zu  Initial young %zu  Maximum young %zu\",\n@@ -303,1 +303,1 @@\n-                            \"generation sizes: using maximum heap = \" SIZE_FORMAT\n+                            \"generation sizes: using maximum heap = %zu\"\n@@ -339,1 +339,1 @@\n-    log_trace(gc, heap)(\"2: Minimum young \" SIZE_FORMAT \"  Initial young \" SIZE_FORMAT \"  Maximum young \" SIZE_FORMAT,\n+    log_trace(gc, heap)(\"2: Minimum young %zu  Initial young %zu  Maximum young %zu\",\n@@ -356,1 +356,1 @@\n-  log_trace(gc, heap)(\"Minimum old \" SIZE_FORMAT \"  Initial old \" SIZE_FORMAT \"  Maximum old \" SIZE_FORMAT,\n+  log_trace(gc, heap)(\"Minimum old %zu  Initial old %zu  Maximum old %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -153,2 +153,2 @@\n-         \"Gen size; total_reserved=\" SIZE_FORMAT \", alignment=\"\n-         SIZE_FORMAT, total_reserved, alignment);\n+         \"Gen size; total_reserved=%zu, alignment=%zu\",\n+          total_reserved, alignment);\n@@ -356,1 +356,1 @@\n-                                \" size=\" SIZE_FORMAT \" %s\", try_count, size, is_tlab ? \"(TLAB)\" : \"\");\n+                                \" size=%zu %s\", try_count, size, is_tlab ? \"(TLAB)\" : \"\");\n@@ -406,1 +406,1 @@\n-  log_trace(gc)(\"%s invoke=%d size=\" SIZE_FORMAT, heap()->is_young_gen(gen) ? \"Young\" : \"Old\", gen->stat_record()->invocations, size * HeapWordSize);\n+  log_trace(gc)(\"%s invoke=%d size=%zu\", heap()->is_young_gen(gen) ? \"Young\" : \"Old\", gen->stat_record()->invocations, size * HeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  st->print(\" total \" SIZE_FORMAT \"K, used \" SIZE_FORMAT \"K\",\n+  st->print(\" total %zuK, used %zuK\",\n@@ -140,1 +140,1 @@\n-  log_trace(gc)(\"Generation: promo attempt is%s safe: available(\" SIZE_FORMAT \") %s max_promo(\" SIZE_FORMAT \")\",\n+  log_trace(gc)(\"Generation: promo attempt is%s safe: available(%zu) %s max_promo(%zu)\",\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,2 +74,2 @@\n-                        \"%s (\" SIZE_FORMAT \") must be \"\n-                        \"greater than or equal to ergonomic PLAB minimum size (\" SIZE_FORMAT \")\\n\",\n+                        \"%s (%zu) must be \"\n+                        \"greater than or equal to ergonomic PLAB minimum size (%zu)\\n\",\n@@ -87,2 +87,2 @@\n-                        \"%s (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to ergonomic PLAB maximum size (\" SIZE_FORMAT \")\\n\",\n+                        \"%s (%zu) must be \"\n+                        \"less than or equal to ergonomic PLAB maximum size (%zu)\\n\",\n@@ -147,1 +147,1 @@\n-                        \"MaxHeapSize (\" SIZE_FORMAT \") or SoftRefLRUPolicyMSPerMB \"\n+                        \"MaxHeapSize (%zu) or SoftRefLRUPolicyMSPerMB \"\n@@ -164,2 +164,2 @@\n-                        \"MarkStackSize (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to MarkStackSizeMax (\" SIZE_FORMAT \")\\n\",\n+                        \"MarkStackSize (%zu) must be \"\n+                        \"less than or equal to MarkStackSizeMax (%zu)\\n\",\n@@ -256,2 +256,2 @@\n-                        \"%s (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to aligned maximum value (\" SIZE_FORMAT \")\\n\",\n+                        \"%s (%zu) must be \"\n+                        \"less than or equal to aligned maximum value (%zu)\\n\",\n@@ -311,2 +311,2 @@\n-                        \"HeapBaseMinAddress (\" SIZE_FORMAT \") or MaxHeapSize (\" SIZE_FORMAT \") is too large. \"\n-                        \"Sum of them must be less than or equal to maximum of size_t (\" SIZE_FORMAT \")\\n\",\n+                        \"HeapBaseMinAddress (%zu) or MaxHeapSize (%zu) is too large. \"\n+                        \"Sum of them must be less than or equal to maximum of size_t (%zu)\\n\",\n@@ -335,2 +335,2 @@\n-                        \"MinTLABSize (\" SIZE_FORMAT \") must be \"\n-                        \"greater than or equal to reserved area in TLAB (\" SIZE_FORMAT \")\\n\",\n+                        \"MinTLABSize (%zu) must be \"\n+                        \"greater than or equal to reserved area in TLAB (%zu)\\n\",\n@@ -342,2 +342,2 @@\n-                        \"MinTLABSize (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to ergonomic TLAB maximum (\" SIZE_FORMAT \")\\n\",\n+                        \"MinTLABSize (%zu) must be \"\n+                        \"less than or equal to ergonomic TLAB maximum (%zu)\\n\",\n@@ -355,2 +355,2 @@\n-                          \"TLABSize (\" SIZE_FORMAT \") must be \"\n-                          \"greater than or equal to MinTLABSize (\" SIZE_FORMAT \")\\n\",\n+                          \"TLABSize (%zu) must be \"\n+                          \"greater than or equal to MinTLABSize (%zu)\\n\",\n@@ -362,2 +362,2 @@\n-                          \"TLABSize (\" SIZE_FORMAT \") must be \"\n-                          \"less than or equal to ergonomic TLAB maximum size (\" SIZE_FORMAT \")\\n\",\n+                          \"TLABSize (%zu) must be \"\n+                          \"less than or equal to ergonomic TLAB maximum size (%zu)\\n\",\n@@ -381,1 +381,1 @@\n-                          \"less than or equal to ergonomic TLAB waste increment maximum size(\" SIZE_FORMAT \")\\n\",\n+                          \"less than or equal to ergonomic TLAB waste increment maximum size(%zu)\\n\",\n@@ -394,1 +394,1 @@\n-                        \"less than or equal to ergonomic SurvivorRatio maximum (\" SIZE_FORMAT \")\\n\",\n+                        \"less than or equal to ergonomic SurvivorRatio maximum (%zu)\\n\",\n@@ -406,2 +406,2 @@\n-                        \"MetaspaceSize (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to MaxMetaspaceSize (\" SIZE_FORMAT \")\\n\",\n+                        \"MetaspaceSize (%zu) must be \"\n+                        \"less than or equal to MaxMetaspaceSize (%zu)\\n\",\n@@ -418,2 +418,2 @@\n-                        \"MaxMetaspaceSize (\" SIZE_FORMAT \") must be \"\n-                        \"greater than or equal to MetaspaceSize (\" SIZE_FORMAT \")\\n\",\n+                        \"MaxMetaspaceSize (%zu) must be \"\n+                        \"greater than or equal to MetaspaceSize (%zu)\\n\",\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -308,2 +308,2 @@\n-           \"Allocation failed, but actual size was updated. min: \" SIZE_FORMAT\n-           \", desired: \" SIZE_FORMAT \", actual: \" SIZE_FORMAT,\n+           \"Allocation failed, but actual size was updated. min: %zu\"\n+           \", desired: %zu, actual: %zu\",\n@@ -314,1 +314,1 @@\n-         PTR_FORMAT \" min: \" SIZE_FORMAT \", desired: \" SIZE_FORMAT,\n+         PTR_FORMAT \" min: %zu, desired: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-  log_debug(oopstorage, blocks)(\"%s: expand active array \" SIZE_FORMAT,\n+  log_debug(oopstorage, blocks)(\"%s: expand active array %zu\",\n@@ -1135,2 +1135,2 @@\n-          (\"Parallel iteration on %s: blocks = \" SIZE_FORMAT\n-           \", processed = \" SIZE_FORMAT \" (%2.f%%)\",\n+          (\"Parallel iteration on %s: blocks = %zu\"\n+           \", processed = %zu (%2.f%%)\",\n@@ -1165,1 +1165,1 @@\n-  st->print(\"%s: \" SIZE_FORMAT \" entries in \" SIZE_FORMAT \" blocks (%.F%%), \" SIZE_FORMAT \" bytes\",\n+  st->print(\"%s: %zu entries in %zu blocks (%.F%%), %zu bytes\",\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-         \"Minimum PLAB size \" SIZE_FORMAT \" must be larger than alignment reserve \" SIZE_FORMAT \" \"\n+         \"Minimum PLAB size %zu must be larger than alignment reserve %zu \"\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-  assert(_stack.is_empty(), \"stack expected to be empty, size = \" SIZE_FORMAT,\n+  assert(_stack.is_empty(), \"stack expected to be empty, size = %zu\",\n@@ -72,1 +72,1 @@\n-         \"stack expected to have no cached segments, cache size = \" SIZE_FORMAT,\n+         \"stack expected to have no cached segments, cache size = %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-         \"Chunk size \" SIZE_FORMAT \" is smaller than page size \" SIZE_FORMAT,\n+         \"Chunk size %zu is smaller than page size %zu\",\n@@ -88,1 +88,1 @@\n-    log_debug(gc, heap)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units pre-touching \" SIZE_FORMAT \"B.\",\n+    log_debug(gc, heap)(\"Running %s with %u workers for %zu work units pre-touching %zuB.\",\n@@ -93,1 +93,1 @@\n-    log_debug(gc, heap)(\"Running %s pre-touching \" SIZE_FORMAT \"B.\",\n+    log_debug(gc, heap)(\"Running %s pre-touching %zuB.\",\n","filename":"src\/hotspot\/share\/gc\/shared\/pretouchTask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  assert(count == 0, \"%ss must be empty but has \" SIZE_FORMAT \" elements\", type, count);\n+  assert(count == 0, \"%ss must be empty but has %zu elements\", type, count);\n@@ -368,1 +368,1 @@\n-  log_develop_trace(gc, ref)(\" Dropped \" SIZE_FORMAT \" active Refs out of \" SIZE_FORMAT\n+  log_develop_trace(gc, ref)(\" Dropped %zu active Refs out of %zu\"\n@@ -562,1 +562,1 @@\n-    ls.print(SIZE_FORMAT \" \", list[i].length());\n+    ls.print(\"%zu \", list[i].length());\n@@ -565,1 +565,1 @@\n-  ls.print_cr(\"(\" SIZE_FORMAT \")\", total);\n+  ls.print_cr(\"(%zu)\", total);\n@@ -577,1 +577,1 @@\n-    assert(ref_lists[i].length() == 0, SIZE_FORMAT \" unexpected References in %u\",\n+    assert(ref_lists[i].length() == 0, \"%zu unexpected References in %u\",\n@@ -1096,1 +1096,1 @@\n-    log_develop_trace(gc, ref)(\" Dropped \" SIZE_FORMAT \" Refs out of \" SIZE_FORMAT \" Refs in discovered list \" PTR_FORMAT,\n+    log_develop_trace(gc, ref)(\" Dropped %zu Refs out of %zu Refs in discovered list \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  tty->print_cr(\"  SATB BUFFER [%s] buf: \" PTR_FORMAT \" index: \" SIZE_FORMAT\n-                \" capacity: \" SIZE_FORMAT,\n+  tty->print_cr(\"  SATB BUFFER [%s] buf: \" PTR_FORMAT \" index: %zu\"\n+                \" capacity: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -477,1 +477,1 @@\n-  st->print(\" space \" SIZE_FORMAT \"K, %3d%% used\", capacity() \/ K,\n+  st->print(\" space %zuK, %3d%% used\", capacity() \/ K,\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-      log_develop_trace(gc, compaction)(\"Inserting object to dead space: \" PTR_FORMAT \", \" PTR_FORMAT \", \" SIZE_FORMAT \"b\",\n+      log_develop_trace(gc, compaction)(\"Inserting object to dead space: \" PTR_FORMAT \", \" PTR_FORMAT \", %zub\",\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-                      \" refills %d  alloc: %8.6f desired_size: \" SIZE_FORMAT \" -> \" SIZE_FORMAT,\n+                      \" refills %d  alloc: %8.6f desired_size: %zu -> %zu\",\n@@ -266,1 +266,1 @@\n-  log_develop_trace(gc, tlab)(\"TLAB min: \" SIZE_FORMAT \" initial: \" SIZE_FORMAT \" max: \" SIZE_FORMAT,\n+  log_develop_trace(gc, tlab)(\"TLAB min: %zu initial: %zu max: %zu\",\n@@ -302,2 +302,2 @@\n-            \" desired_size: \" SIZE_FORMAT \"KB\"\n-            \" slow allocs: %d  refill waste: \" SIZE_FORMAT \"B\"\n+            \" desired_size: %zuKB\"\n+            \" slow allocs: %d  refill waste: %zuB\"\n@@ -454,2 +454,2 @@\n-                      \" gc: \" SIZE_FORMAT \"B max: \" SIZE_FORMAT \"B\"\n-                      \" slow: \" SIZE_FORMAT \"B max: \" SIZE_FORMAT \"B\",\n+                      \" gc: %zuB max: %zuB\"\n+                      \" slow: %zuB max: %zuB\",\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    log_trace(gc, tlab)(\"ThreadLocalAllocBuffer::compute_size(\" SIZE_FORMAT \") returns failure\",\n+    log_trace(gc, tlab)(\"ThreadLocalAllocBuffer::compute_size(%zu) returns failure\",\n@@ -74,1 +74,1 @@\n-  log_trace(gc, tlab)(\"ThreadLocalAllocBuffer::compute_size(\" SIZE_FORMAT \") returns \" SIZE_FORMAT,\n+  log_trace(gc, tlab)(\"ThreadLocalAllocBuffer::compute_size(%zu) returns %zu\",\n@@ -95,3 +95,3 @@\n-                              \" obj: \" SIZE_FORMAT\n-                              \" free: \" SIZE_FORMAT\n-                              \" waste: \" SIZE_FORMAT,\n+                              \" obj: %zu\"\n+                              \" free: %zu\"\n+                              \" waste: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  out->print(\" Min: \" SIZE_FORMAT \", Avg: %4.1lf, Max: \" SIZE_FORMAT \", Diff: \" SIZE_FORMAT, min, avg, max, diff);\n+  out->print(\" Min: %zu, Avg: %4.1lf, Max: %zu, Diff: %zu\", min, avg, max, diff);\n@@ -54,1 +54,1 @@\n-    out->print(\", Sum: \" SIZE_FORMAT, sum);\n+    out->print(\", Sum: %zu\", sum);\n@@ -78,1 +78,1 @@\n-      out->print(\"  \" SIZE_FORMAT, phase->get(i));\n+      out->print(\"  %zu\", phase->get(i));\n","filename":"src\/hotspot\/share\/gc\/shared\/workerDataArray.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-  log_info(gc, ergo)(\"Adaptive CSet Selection. Target Free: \" SIZE_FORMAT \"%s, Actual Free: \"\n-                     SIZE_FORMAT \"%s, Max CSet: \" SIZE_FORMAT \"%s, Min Garbage: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"Adaptive CSet Selection. Target Free: %zu%s, Actual Free: \"\n+                     \"%zu%s, Max CSet: %zu%s, Min Garbage: %zu%s\",\n@@ -139,1 +139,1 @@\n-  log_debug(gc, ergo)(\"Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n+  log_debug(gc, ergo)(\"Available: %zu %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n@@ -214,1 +214,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_info(gc)(\"Trigger: Free (%zu%s) is below minimum threshold (%zu%s)\",\n@@ -224,1 +224,1 @@\n-      log_info(gc)(\"Trigger: Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n+      log_info(gc)(\"Trigger: Learning %zu of %zu. Free (%zu%s) is below initial threshold (%zu%s)\",\n@@ -246,1 +246,1 @@\n-    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (margin of error = %.2f)\",\n+    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for average allocation rate (%.0f %sB\/s) to deplete free headroom (%zu%s) (margin of error = %.2f)\",\n@@ -252,1 +252,1 @@\n-    log_info(gc, ergo)(\"Free headroom: \" SIZE_FORMAT \"%s (free) - \" SIZE_FORMAT \"%s (spike) - \" SIZE_FORMAT \"%s (penalties) = \" SIZE_FORMAT \"%s\",\n+    log_info(gc, ergo)(\"Free headroom: %zu%s (free) - %zu%s (spike) - %zu%s (penalties) = %zu%s\",\n@@ -264,1 +264,1 @@\n-    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+    log_info(gc)(\"Trigger: Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (%zu%s) (spike threshold = %.2f)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_info(gc)(\"Trigger: Free (%zu%s) is below minimum threshold (%zu%s)\",\n@@ -69,1 +69,1 @@\n-    log_info(gc)(\"Trigger: Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n+    log_info(gc)(\"Trigger: Allocated since last cycle (%zu%s) is larger than allocation threshold (%zu%s)\",\n@@ -84,1 +84,1 @@\n-  log_info(gc, ergo)(\"CSet Selection. Actual Free: \" SIZE_FORMAT \"%s, Max CSet: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"CSet Selection. Actual Free: %zu%s, Max CSet: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: \" SIZE_FORMAT,\n+             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: %zu\",\n@@ -146,1 +146,1 @@\n-          \"Cannot have more immediate garbage than total garbage: \" SIZE_FORMAT \"%s vs \" SIZE_FORMAT \"%s\",\n+          \"Cannot have more immediate garbage than total garbage: %zu%s vs %zu%s\",\n@@ -161,3 +161,3 @@\n-  log_info(gc, ergo)(\"Collectable Garbage: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \"\n-                     \"Immediate: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \"\n-                     \"CSet: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%)\",\n+  log_info(gc, ergo)(\"Collectable Garbage: %zu%s (%zu%%), \"\n+                     \"Immediate: %zu%s (%zu%%), \"\n+                     \"CSet: %zu%s (%zu%%)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  log_info(gc, ergo)(\"CSet Selection. Actual Free: \" SIZE_FORMAT \"%s, Max CSet: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"CSet Selection. Actual Free: %zu%s, Max CSet: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    log_info(gc)(\"Trigger: Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_info(gc)(\"Trigger: Free (%zu%s) is below minimum threshold (%zu%s)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-      warning(\"Large pages size (\" SIZE_FORMAT \"K) is too large to afford page-sized regions, disabling uncommit\",\n+      warning(\"Large pages size (%zuK) is too large to afford page-sized regions, disabling uncommit\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  out->print_cr(\"Collection Set : \" SIZE_FORMAT \"\", count());\n+  out->print_cr(\"Collection Set : %zu\", count());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n@@ -503,1 +503,1 @@\n-             \"Region \" SIZE_FORMAT \" should already have correct TAMS\", r->index());\n+             \"Region %zu should already have correct TAMS\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-      log_info(gc)(\"Soft Max Heap Size: \" SIZE_FORMAT \"%s -> \" SIZE_FORMAT \"%s\",\n+      log_info(gc)(\"Soft Max Heap Size: %zu%s -> %zu%s\",\n@@ -534,1 +534,1 @@\n-    log_info(gc)(\"Failed to allocate %s, \" SIZE_FORMAT \"%s\",\n+    log_info(gc)(\"Failed to allocate %s, %zu%s\",\n@@ -553,1 +553,1 @@\n-    log_info(gc)(\"Failed to allocate \" SIZE_FORMAT \"%s for evacuation\",\n+    log_info(gc)(\"Failed to allocate %zu%s for evacuation\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  assert(_used <= _capacity, \"must not use more than we have: used: \" SIZE_FORMAT\n-         \", capacity: \" SIZE_FORMAT \", num_bytes: \" SIZE_FORMAT, _used, _capacity, num_bytes);\n+  assert(_used <= _capacity, \"must not use more than we have: used: %zu\"\n+         \", capacity: %zu, num_bytes: %zu\", _used, _capacity, num_bytes);\n@@ -53,1 +53,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT \" (left: \" SIZE_FORMAT \", right: \" SIZE_FORMAT \")\",\n+  assert (idx < _max, \"index is sane: %zu < %zu (left: %zu, right: %zu)\",\n@@ -59,1 +59,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT \" (left: \" SIZE_FORMAT \", right: \" SIZE_FORMAT \")\",\n+  assert (idx < _max, \"index is sane: %zu < %zu (left: %zu, right: %zu)\",\n@@ -143,1 +143,1 @@\n-  assert (!has_no_alloc_capacity(r), \"Performance: should avoid full regions on this path: \" SIZE_FORMAT, r->index());\n+  assert (!has_no_alloc_capacity(r), \"Performance: should avoid full regions on this path: %zu\", r->index());\n@@ -164,1 +164,1 @@\n-      assert (result != nullptr, \"Allocation must succeed: free \" SIZE_FORMAT \", actual \" SIZE_FORMAT, free, size);\n+      assert (result != nullptr, \"Allocation must succeed: free %zu, actual %zu\", free, size);\n@@ -493,1 +493,1 @@\n-      ls.print(\"Free: \" SIZE_FORMAT \"%s, Max: \" SIZE_FORMAT \"%s regular, \" SIZE_FORMAT \"%s humongous, \",\n+      ls.print(\"Free: %zu%s, Max: %zu%s regular, %zu%s humongous, \",\n@@ -506,1 +506,1 @@\n-      ls.print(SIZE_FORMAT \"%% external, \", frag_ext);\n+      ls.print(\"%zu%% external, \", frag_ext);\n@@ -514,1 +514,1 @@\n-      ls.print(SIZE_FORMAT \"%% internal; \", frag_int);\n+      ls.print(\"%zu%% internal; \", frag_int);\n@@ -530,1 +530,1 @@\n-      ls.print_cr(\"Reserve: \" SIZE_FORMAT \"%s, Max: \" SIZE_FORMAT \"%s\",\n+      ls.print_cr(\"Reserve: %zu%s, Max: %zu%s\",\n@@ -550,1 +550,1 @@\n-        assert(false, \"Trying to allocate TLAB larger than the humongous threshold: \" SIZE_FORMAT \" > \" SIZE_FORMAT,\n+        assert(false, \"Trying to allocate TLAB larger than the humongous threshold: %zu > %zu\",\n@@ -579,1 +579,1 @@\n-  out->print_cr(\"Mutator Free Set: \" SIZE_FORMAT \"\", mutator_count());\n+  out->print_cr(\"Mutator Free Set: %zu\", mutator_count());\n@@ -585,1 +585,1 @@\n-  out->print_cr(\"Collector Free Set: \" SIZE_FORMAT \"\", collector_count());\n+  out->print_cr(\"Collector Free Set: %zu\", collector_count());\n@@ -687,2 +687,2 @@\n-  assert (_mutator_leftmost <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, _mutator_leftmost,  _max);\n-  assert (_mutator_rightmost < _max, \"rightmost in bounds: \" SIZE_FORMAT \" < \" SIZE_FORMAT, _mutator_rightmost, _max);\n+  assert (_mutator_leftmost <= _max, \"leftmost in bounds: \"  \"%zu < %zu\", _mutator_leftmost,  _max);\n+  assert (_mutator_rightmost < _max, \"rightmost in bounds: %zu < %zu\", _mutator_rightmost, _max);\n@@ -690,2 +690,2 @@\n-  assert (_mutator_leftmost == _max || is_mutator_free(_mutator_leftmost),  \"leftmost region should be free: \" SIZE_FORMAT,  _mutator_leftmost);\n-  assert (_mutator_rightmost == 0   || is_mutator_free(_mutator_rightmost), \"rightmost region should be free: \" SIZE_FORMAT, _mutator_rightmost);\n+  assert (_mutator_leftmost == _max || is_mutator_free(_mutator_leftmost),  \"leftmost region should be free: %zu\",  _mutator_leftmost);\n+  assert (_mutator_rightmost == 0   || is_mutator_free(_mutator_rightmost), \"rightmost region should be free: %zu\", _mutator_rightmost);\n@@ -695,2 +695,2 @@\n-  assert (beg_off >= _mutator_leftmost, \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, _mutator_leftmost);\n-  assert (end_off == _max,      \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, _mutator_rightmost);\n+  assert (beg_off >= _mutator_leftmost, \"free regions before the leftmost: %zu, bound %zu\", beg_off, _mutator_leftmost);\n+  assert (end_off == _max,      \"free regions past the rightmost: %zu, bound %zu\",  end_off, _mutator_rightmost);\n@@ -698,2 +698,2 @@\n-  assert (_collector_leftmost <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, _collector_leftmost,  _max);\n-  assert (_collector_rightmost < _max, \"rightmost in bounds: \" SIZE_FORMAT \" < \" SIZE_FORMAT, _collector_rightmost, _max);\n+  assert (_collector_leftmost <= _max, \"leftmost in bounds: \"  \"%zu < %zu\", _collector_leftmost,  _max);\n+  assert (_collector_rightmost < _max, \"rightmost in bounds: %zu < %zu\", _collector_rightmost, _max);\n@@ -701,2 +701,2 @@\n-  assert (_collector_leftmost == _max || is_collector_free(_collector_leftmost),  \"leftmost region should be free: \" SIZE_FORMAT,  _collector_leftmost);\n-  assert (_collector_rightmost == 0   || is_collector_free(_collector_rightmost), \"rightmost region should be free: \" SIZE_FORMAT, _collector_rightmost);\n+  assert (_collector_leftmost == _max || is_collector_free(_collector_leftmost),  \"leftmost region should be free: %zu\",  _collector_leftmost);\n+  assert (_collector_rightmost == 0   || is_collector_free(_collector_rightmost), \"rightmost region should be free: %zu\", _collector_rightmost);\n@@ -706,2 +706,2 @@\n-  assert (beg_off >= _collector_leftmost, \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, _collector_leftmost);\n-  assert (end_off == _max,      \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, _collector_rightmost);\n+  assert (beg_off >= _collector_leftmost, \"free regions before the leftmost: %zu, bound %zu\", beg_off, _collector_leftmost);\n+  assert (end_off == _max,      \"free regions past the rightmost: %zu, bound %zu\",  end_off, _collector_rightmost);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-    assert (r->is_committed(), \"only committed regions in heap now, see region \" SIZE_FORMAT, r->index());\n+    assert (r->is_committed(), \"only committed regions in heap now, see region %zu\", r->index());\n@@ -525,1 +525,1 @@\n-               \"Region \" SIZE_FORMAT \" is not marked, should not have live\", r->index());\n+               \"Region %zu is not marked, should not have live\", r->index());\n@@ -529,1 +529,1 @@\n-               \"Region \" SIZE_FORMAT \" should have live\", r->index());\n+               \"Region %zu should have live\", r->index());\n@@ -534,1 +534,1 @@\n-             \"Region \" SIZE_FORMAT \" should have live\", r->index());\n+             \"Region %zu should have live\", r->index());\n@@ -670,2 +670,2 @@\n-      assert(ShenandoahPrepareForCompactionTask::is_candidate_region(r), \"Sanity: \" SIZE_FORMAT, idx);\n-      assert(!map.at(idx), \"No region distributed twice: \" SIZE_FORMAT, idx);\n+      assert(ShenandoahPrepareForCompactionTask::is_candidate_region(r), \"Sanity: %zu\", idx);\n+      assert(!map.at(idx), \"No region distributed twice: %zu\", idx);\n@@ -680,1 +680,1 @@\n-    assert(is_distributed || !is_candidate, \"All candidates are distributed: \" SIZE_FORMAT, rid);\n+    assert(is_distributed || !is_candidate, \"All candidates are distributed: %zu\", rid);\n@@ -961,1 +961,1 @@\n-      assert(r->is_stw_move_allowed(), \"Region \" SIZE_FORMAT \" should be movable\", r->index());\n+      assert(r->is_stw_move_allowed(), \"Region %zu should be movable\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-      assert (end <= _bitmap_size, \"end is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, end, _bitmap_size);\n+      assert (end <= _bitmap_size, \"end is sane: %zu < %zu\", end, _bitmap_size);\n@@ -159,1 +159,1 @@\n-         \"Regions should cover entire heap exactly: \" SIZE_FORMAT \" != \" SIZE_FORMAT \"\/\" SIZE_FORMAT,\n+         \"Regions should cover entire heap exactly: %zu != %zu\/%zu\",\n@@ -230,1 +230,1 @@\n-            \"Bitmap bytes per region should be power of two: \" SIZE_FORMAT, bitmap_bytes_per_region);\n+            \"Bitmap bytes per region should be power of two: %zu\", bitmap_bytes_per_region);\n@@ -241,1 +241,1 @@\n-            \"Should have at least one region per slice: \" SIZE_FORMAT,\n+            \"Should have at least one region per slice: %zu\",\n@@ -245,1 +245,1 @@\n-            \"Bitmap slices should be page-granular: bps = \" SIZE_FORMAT \", page size = \" SIZE_FORMAT,\n+            \"Bitmap slices should be page-granular: bps = %zu, page size = %zu\",\n@@ -576,1 +576,1 @@\n-  st->print_cr(\" \" SIZE_FORMAT \"%s max, \" SIZE_FORMAT \"%s soft max, \" SIZE_FORMAT \"%s committed, \" SIZE_FORMAT \"%s used\",\n+  st->print_cr(\" %zu%s max, %zu%s soft max, %zu%s committed, %zu%s used\",\n@@ -581,1 +581,1 @@\n-  st->print_cr(\" \" SIZE_FORMAT \" x \" SIZE_FORMAT\"%s regions\",\n+  st->print_cr(\" %zu x %zu%s regions\",\n@@ -721,1 +721,1 @@\n-         \"Should be in bounds: \" SIZE_FORMAT \" <= \" SIZE_FORMAT \" <= \" SIZE_FORMAT,\n+         \"Should be in bounds: %zu <= %zu <= %zu\",\n@@ -728,1 +728,1 @@\n-         \"Should be in bounds: \" SIZE_FORMAT \" <= \" SIZE_FORMAT \" <= \" SIZE_FORMAT,\n+         \"Should be in bounds: %zu <= %zu <= %zu\",\n@@ -907,1 +907,1 @@\n-            \"Only LAB allocations are elastic: %s, requested = \" SIZE_FORMAT \", actual = \" SIZE_FORMAT,\n+            \"Only LAB allocations are elastic: %s, requested = %zu, actual = %zu\",\n@@ -1023,1 +1023,1 @@\n-      assert(r->has_live(), \"Region \" SIZE_FORMAT \" should have been reclaimed early\", r->index());\n+      assert(r->has_live(), \"Region %zu should have been reclaimed early\", r->index());\n@@ -1571,1 +1571,1 @@\n-    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n@@ -1580,1 +1580,1 @@\n-             \"Region \" SIZE_FORMAT \" should already have correct TAMS\", r->index());\n+             \"Region %zu should already have correct TAMS\", r->index());\n@@ -1665,1 +1665,1 @@\n-      assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+      assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n@@ -1667,1 +1667,1 @@\n-             \"Region \" SIZE_FORMAT \" should have correct TAMS\", r->index());\n+             \"Region %zu should have correct TAMS\", r->index());\n@@ -1946,1 +1946,1 @@\n-  assert(r->pin_count() > 0, \"Region \" SIZE_FORMAT \" should have non-zero pins\", r->index());\n+  assert(r->pin_count() > 0, \"Region %zu should have non-zero pins\", r->index());\n@@ -1976,1 +1976,1 @@\n-           \"Region \" SIZE_FORMAT \" pinning status is inconsistent\", i);\n+           \"Region %zu pinning status is inconsistent\", i);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  assert(pin_count() > 0, \"Should have pins: \" SIZE_FORMAT, pin_count());\n+  assert(pin_count() > 0, \"Should have pins: %zu\", pin_count());\n@@ -210,1 +210,1 @@\n-  assert(pin_count() == 0, \"Should not have pins: \" SIZE_FORMAT, pin_count());\n+  assert(pin_count() == 0, \"Should not have pins: %zu\", pin_count());\n@@ -486,2 +486,2 @@\n-      err_msg message(\"Max heap size (\" SIZE_FORMAT \"%s) is too low to afford the minimum number \"\n-                      \"of regions (\" SIZE_FORMAT \") of minimum region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Max heap size (%zu%s) is too low to afford the minimum number \"\n+                      \"of regions (%zu) of minimum region size (%zu%s).\",\n@@ -494,1 +494,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than minimum region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than minimum region size (%zu%s).\",\n@@ -500,1 +500,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than TLAB size size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than TLAB size size (%zu%s).\",\n@@ -506,1 +506,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than min region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than min region size (%zu%s).\",\n@@ -512,1 +512,1 @@\n-      err_msg message(\"Minimum (\" SIZE_FORMAT \"%s) should be larger than maximum (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Minimum (%zu%s) should be larger than maximum (%zu%s).\",\n@@ -528,2 +528,2 @@\n-      err_msg message(\"Max heap size (\" SIZE_FORMAT \"%s) is too low to afford the minimum number \"\n-                              \"of regions (\" SIZE_FORMAT \") of requested size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Max heap size (%zu%s) is too low to afford the minimum number \"\n+                              \"of regions (%zu) of requested size (%zu%s).\",\n@@ -536,1 +536,1 @@\n-      err_msg message(\"Heap region size (\" SIZE_FORMAT \"%s) should be larger than min region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Heap region size (%zu%s) should be larger than min region size (%zu%s).\",\n@@ -542,1 +542,1 @@\n-      err_msg message(\"Heap region size (\" SIZE_FORMAT \"%s) should be lower than max region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Heap region size (%zu%s) should be lower than max region size (%zu%s).\",\n@@ -682,1 +682,1 @@\n-  assert(pin_count() > 0, \"Region \" SIZE_FORMAT \" should have non-zero pins\", index());\n+  assert(pin_count() > 0, \"Region %zu should have non-zero pins\", index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  assert(is_object_aligned(size), \"alloc size breaks alignment: \" SIZE_FORMAT, size);\n+  assert(is_object_aligned(size), \"alloc size breaks alignment: %zu\", size);\n@@ -89,1 +89,1 @@\n-         \"can't have more live data than used: \" SIZE_FORMAT \", \" SIZE_FORMAT, live_bytes, used_bytes);\n+         \"can't have more live data than used: %zu, %zu\", live_bytes, used_bytes);\n@@ -111,1 +111,1 @@\n-         \"Live Data must be a subset of used() live: \" SIZE_FORMAT \" used: \" SIZE_FORMAT,\n+         \"Live Data must be a subset of used() live: %zu used: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  out->print_cr(\"Region Set : \" SIZE_FORMAT \"\", count());\n+  out->print_cr(\"Region Set : %zu\", count());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT,\n+  log_info(gc, init)(\"Heap Region Count: %zu\",\n@@ -49,1 +49,1 @@\n-  log_info(gc, init)(\"Heap Region Size: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, init)(\"Heap Region Size: %zu%s\",\n@@ -53,1 +53,1 @@\n-  log_info(gc, init)(\"TLAB Size Max: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, init)(\"TLAB Size Max: %zu%s\",\n@@ -57,1 +57,1 @@\n-  log_info(gc, init)(\"Humongous Object Threshold: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, init)(\"Humongous Object Threshold: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-         \"BitMap index out of bounds: \" SIZE_FORMAT \" >= \" SIZE_FORMAT,\n+         \"BitMap index out of bounds: %zu >= %zu\",\n@@ -138,1 +138,1 @@\n-         \"BitMap limit out of bounds: \" SIZE_FORMAT \" > \" SIZE_FORMAT,\n+         \"BitMap limit out of bounds: %zu > %zu\",\n@@ -144,1 +144,1 @@\n-         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, beg, end);\n+         \"BitMap range error: %zu > %zu\", beg, end);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-         \"Region \" SIZE_FORMAT \" should have no marks in bitmap\", r->index());\n+         \"Region %zu should have no marks in bitmap\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-         \"Region \" SIZE_FORMAT\", TAMS updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+         \"Region %zu, TAMS updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n@@ -77,1 +77,1 @@\n-         \"Region \" SIZE_FORMAT \", bitmap should be clear while adjusting TAMS: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+         \"Region %zu, bitmap should be clear while adjusting TAMS: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n@@ -94,1 +94,1 @@\n-         \"Region \" SIZE_FORMAT \" should have no marks in bitmap\", r->index());\n+         \"Region %zu should have no marks in bitmap\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-  assert(initial <= max,    \"initial: \"   SIZE_FORMAT \", max: \"       SIZE_FORMAT, initial,   max);\n-  assert(used <= max,       \"used: \"      SIZE_FORMAT \", max: \"       SIZE_FORMAT, used,      max);\n-  assert(committed <= max,  \"committed: \" SIZE_FORMAT \", max: \"       SIZE_FORMAT, committed, max);\n+  assert(initial <= max,    \"initial: %zu, max: %zu\",   initial,   max);\n+  assert(used <= max,       \"used: %zu, max: %zu\",      used,      max);\n+  assert(committed <= max,  \"committed: %zu, max: %zu\", committed, max);\n@@ -50,1 +50,1 @@\n-  assert(used <= committed, \"used: \"      SIZE_FORMAT \", committed: \" SIZE_FORMAT, used,      committed);\n+  assert(used <= committed, \"used: %zu, committed: %zu\", used,      committed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMemoryPool.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  log_info(gc, ergo)(\"%s progress for free space: \" SIZE_FORMAT \"%s, need \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"%s progress for free space: %zu%s, need %zu%s\",\n@@ -63,1 +63,1 @@\n-  log_info(gc, ergo)(\"%s progress for used space: \" SIZE_FORMAT \"%s, need \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"%s progress for used space: %zu%s, need %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-    assert (false, \"bucket index (%d) underflow for value (\" SIZE_FORMAT \")\", mag, val);\n+    assert (false, \"bucket index (%d) underflow for value (%zu)\", mag, val);\n@@ -151,1 +151,1 @@\n-    assert (false, \"bucket index (%d) overflow for value (\" SIZE_FORMAT \")\", mag, val);\n+    assert (false, \"bucket index (%d) overflow for value (%zu)\", mag, val);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-  log_info(gc, ergo)(\"Pacer for Mark. Expected Live: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Mark. Expected Live: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -99,2 +99,2 @@\n-  log_info(gc, ergo)(\"Pacer for Evacuation. Used CSet: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Evacuation. Used CSet: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -123,2 +123,2 @@\n-  log_info(gc, ergo)(\"Pacer for Update Refs. Used: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Update Refs. Used: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -148,1 +148,1 @@\n-  log_info(gc, ergo)(\"Pacer for Idle. Initial: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Idle. Initial: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -164,1 +164,1 @@\n-  log_info(gc, ergo)(\"Pacer for Reset. Non-Taxable: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"Pacer for Reset. Non-Taxable: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -597,1 +597,1 @@\n-  log_info(gc,ref)(\"Encountered references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Encountered references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n@@ -599,1 +599,1 @@\n-  log_info(gc,ref)(\"Discovered  references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Discovered  references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n@@ -601,1 +601,1 @@\n-  log_info(gc,ref)(\"Enqueued    references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Enqueued    references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -687,1 +687,1 @@\n-              \"%s: heap used size must be consistent: heap-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n+              \"%s: heap used size must be consistent: heap-used = %zu%s, regions-used = %zu%s\",\n@@ -694,1 +694,1 @@\n-              \"%s: heap committed size must be consistent: heap-committed = \" SIZE_FORMAT \"%s, regions-committed = \" SIZE_FORMAT \"%s\",\n+              \"%s: heap committed size must be consistent: heap-committed = %zu%s, regions-committed = %zu%s\",\n@@ -770,1 +770,1 @@\n-        fatal(\"%s: Live data should match: region-live = \" SIZE_FORMAT \", verifier-live = \" UINT32_FORMAT \"\\n%s\",\n+        fatal(\"%s: Live data should match: region-live = %zu, verifier-live = \" UINT32_FORMAT \"\\n%s\",\n@@ -776,1 +776,1 @@\n-  log_info(gc)(\"Verify %s, Level \" INTX_FORMAT \" (\" SIZE_FORMAT \" reachable, \" SIZE_FORMAT \" marked)\",\n+  log_info(gc)(\"Verify %s, Level \" INTX_FORMAT \" (%zu reachable, %zu marked)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-                                          SIZE_FORMAT \"M large pages are supported by ZGC\",\n+                                          \"%zuM large pages are supported by ZGC\",\n","filename":"src\/hotspot\/share\/gc\/x\/xArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-  st->print_cr(\" Offset Max:        \" SIZE_FORMAT \"%s (\" PTR_FORMAT \")\",\n+  st->print_cr(\" Offset Max:        %zu%s (\" PTR_FORMAT \")\",\n@@ -316,2 +316,2 @@\n-  st->print_cr(\" Page Size Small:   \" SIZE_FORMAT \"M\", XPageSizeSmall \/ M);\n-  st->print_cr(\" Page Size Medium:  \" SIZE_FORMAT \"M\", XPageSizeMedium \/ M);\n+  st->print_cr(\" Page Size Small:   %zuM\", XPageSizeSmall \/ M);\n+  st->print_cr(\" Page Size Medium:  %zuM\", XPageSizeMedium \/ M);\n","filename":"src\/hotspot\/share\/gc\/x\/xCollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-  log_debug(gc, director)(\"Rule: Warmup %.0f%%, Used: \" SIZE_FORMAT \"MB, UsedThreshold: \" SIZE_FORMAT \"MB\",\n+  log_debug(gc, director)(\"Rule: Warmup %.0f%%, Used: %zuMB, UsedThreshold: %zuMB\",\n@@ -218,1 +218,1 @@\n-                          \"MaxAllocRate: %.1fMB\/s (+\/-%.1f%%), Free: \" SIZE_FORMAT \"MB, GCCPUTime: %.3f, \"\n+                          \"MaxAllocRate: %.1fMB\/s (+\/-%.1f%%), Free: %zuMB, GCCPUTime: %.3f, \"\n@@ -278,1 +278,1 @@\n-  log_debug(gc, director)(\"Rule: Allocation Rate (Static GC Workers), MaxAllocRate: %.1fMB\/s, Free: \" SIZE_FORMAT \"MB, GCDuration: %.3fs, TimeUntilGC: %.3fs\",\n+  log_debug(gc, director)(\"Rule: Allocation Rate (Static GC Workers), MaxAllocRate: %.1fMB\/s, Free: %zuMB, GCDuration: %.3fs, TimeUntilGC: %.3fs\",\n@@ -311,1 +311,1 @@\n-  log_debug(gc, director)(\"Rule: High Usage, Free: \" SIZE_FORMAT \"MB(%.1f%%)\",\n+  log_debug(gc, director)(\"Rule: High Usage, Free: %zuMB(%.1f%%)\",\n@@ -344,1 +344,1 @@\n-    log_debug(gc, director)(\"Rule: Proactive, UsedUntilEnabled: \" SIZE_FORMAT \"MB, TimeUntilEnabled: %.3fs\",\n+    log_debug(gc, director)(\"Rule: Proactive, UsedUntilEnabled: %zuMB, TimeUntilEnabled: %.3fs\",\n","filename":"src\/hotspot\/share\/gc\/x\/xDirector.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,1 +187,1 @@\n-  log_trace(gc)(\"Undo page allocation, thread: \" PTR_FORMAT \" (%s), page: \" PTR_FORMAT \", size: \" SIZE_FORMAT,\n+  log_trace(gc)(\"Undo page allocation, thread: \" PTR_FORMAT \" (%s), page: \" PTR_FORMAT \", size: %zu\",\n@@ -494,1 +494,1 @@\n-  st->print_cr(\" ZHeap           used \" SIZE_FORMAT \"M, capacity \" SIZE_FORMAT \"M, max capacity \" SIZE_FORMAT \"M\",\n+  st->print_cr(\" ZHeap           used %zuM, capacity %zuM, max capacity %zuM\",\n","filename":"src\/hotspot\/share\/gc\/x\/xHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-      log_trace(gc)(\"Mark seqnum reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", bit: \" SIZE_FORMAT,\n+      log_trace(gc)(\"Mark seqnum reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", bit: %zu\",\n@@ -104,1 +104,1 @@\n-        log_trace(gc)(\"Mark segment reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", segment: \" SIZE_FORMAT,\n+        log_trace(gc)(\"Mark segment reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", segment: %zu\",\n","filename":"src\/hotspot\/share\/gc\/x\/xLiveMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-      log.print(\"  Worker %u(%u) -> Stripe \" SIZE_FORMAT \"(\" SIZE_FORMAT \")\",\n+      log.print(\"  Worker %u(%u) -> Stripe %zu(%zu)\",\n@@ -179,1 +179,1 @@\n-  log_develop_trace(gc, marking)(\"Array push partial: \" PTR_FORMAT \" (\" SIZE_FORMAT \"), stripe: \" SIZE_FORMAT,\n+  log_develop_trace(gc, marking)(\"Array push partial: \" PTR_FORMAT \" (%zu), stripe: %zu\",\n@@ -189,1 +189,1 @@\n-  log_develop_trace(gc, marking)(\"Array follow small: \" PTR_FORMAT \" (\" SIZE_FORMAT \")\", addr, size);\n+  log_develop_trace(gc, marking)(\"Array follow small: \" PTR_FORMAT \" (%zu)\", addr, size);\n@@ -207,2 +207,2 @@\n-  log_develop_trace(gc, marking)(\"Array follow large: \" PTR_FORMAT \"-\" PTR_FORMAT\" (\" SIZE_FORMAT \"), \"\n-                                 \"middle: \" PTR_FORMAT \"-\" PTR_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_develop_trace(gc, marking)(\"Array follow large: \" PTR_FORMAT \"-\" PTR_FORMAT\" (%zu), \"\n+                                 \"middle: \" PTR_FORMAT \"-\" PTR_FORMAT \" (%zu)\",\n","filename":"src\/hotspot\/share\/gc\/x\/xMark.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  log_debug(gc, marking)(\"Using \" SIZE_FORMAT \" mark stripes\", _nstripes);\n+  log_debug(gc, marking)(\"Using %zu mark stripes\", _nstripes);\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStack.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-          \"maximum number of bytes allocated for mark stacks. Current limit is \" SIZE_FORMAT \"M.\",\n+          \"maximum number of bytes allocated for mark stacks. Current limit is %zuM.\",\n@@ -87,1 +87,1 @@\n-  log_debug(gc, marking)(\"Expanding mark stack space: \" SIZE_FORMAT \"M->\" SIZE_FORMAT \"M\",\n+  log_debug(gc, marking)(\"Expanding mark stack space: %zuM->%zuM\",\n@@ -104,1 +104,1 @@\n-    log_debug(gc, marking)(\"Shrinking mark stack space: \" SIZE_FORMAT \"M->\" SIZE_FORMAT \"M\",\n+    log_debug(gc, marking)(\"Shrinking mark stack space: %zuM->%zuM\",\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-            \"Compiler: %s, Oops: %d, ImmediateOops: \" SIZE_FORMAT \", NonImmediateOops: %s\",\n+            \"Compiler: %s, Oops: %d, ImmediateOops: %zu, NonImmediateOops: %s\",\n@@ -132,1 +132,1 @@\n-      log_oops.print(\"           Oop[\" SIZE_FORMAT \"] \" PTR_FORMAT \" (%s)\",\n+      log_oops.print(\"           Oop[%zu] \" PTR_FORMAT \" (%s)\",\n@@ -142,1 +142,1 @@\n-      log_oops.print(\"  ImmediateOop[\" SIZE_FORMAT \"] \" PTR_FORMAT \" @ \" PTR_FORMAT \" (%s)\",\n+      log_oops.print(\"  ImmediateOop[%zu] \" PTR_FORMAT \" @ \" PTR_FORMAT \" (%s)\",\n","filename":"src\/hotspot\/share\/gc\/x\/xNMethod.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,3 +114,3 @@\n-                         SIZE_FORMAT \"->\" SIZE_FORMAT \" entries, \"\n-                         SIZE_FORMAT \"(%.0f%%->%.0f%%) registered, \"\n-                         SIZE_FORMAT \"(%.0f%%->%.0f%%) unregistered\",\n+                         \"%zu->%zu entries, \"\n+                         \"%zu(%.0f%%->%.0f%%) registered, \"\n+                         \"%zu(%.0f%%->%.0f%%) unregistered\",\n","filename":"src\/hotspot\/share\/gc\/x\/xNMethodTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -160,3 +160,3 @@\n-  log_info_p(gc, init)(\"Min Capacity: \" SIZE_FORMAT \"M\", min_capacity \/ M);\n-  log_info_p(gc, init)(\"Initial Capacity: \" SIZE_FORMAT \"M\", initial_capacity \/ M);\n-  log_info_p(gc, init)(\"Max Capacity: \" SIZE_FORMAT \"M\", max_capacity \/ M);\n+  log_info_p(gc, init)(\"Min Capacity: %zuM\", min_capacity \/ M);\n+  log_info_p(gc, init)(\"Initial Capacity: %zuM\", initial_capacity \/ M);\n+  log_info_p(gc, init)(\"Max Capacity: %zuM\", max_capacity \/ M);\n@@ -164,1 +164,1 @@\n-    log_info_p(gc, init)(\"Medium Page Size: \" SIZE_FORMAT \"M\", XPageSizeMedium \/ M);\n+    log_info_p(gc, init)(\"Medium Page Size: %zuM\", XPageSizeMedium \/ M);\n@@ -178,1 +178,1 @@\n-    log_error_p(gc)(\"Failed to allocate initial Java heap (\" SIZE_FORMAT \"M)\", initial_capacity \/ M);\n+    log_error_p(gc)(\"Failed to allocate initial Java heap (%zuM)\", initial_capacity \/ M);\n@@ -316,1 +316,1 @@\n-                    SIZE_FORMAT \"M(%.0f%%) to \" SIZE_FORMAT \"M(%.0f%%)\",\n+                    \"%zuM(%.0f%%) to %zuM(%.0f%%)\",\n@@ -547,1 +547,1 @@\n-    log_debug(gc, heap)(\"Page Cache Flushed: \" SIZE_FORMAT \"M\", flushed \/ M);\n+    log_debug(gc, heap)(\"Page Cache Flushed: %zuM\", flushed \/ M);\n","filename":"src\/hotspot\/share\/gc\/x\/xPageAllocator.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-                         \"%.1f%% relative defragmentation, \" SIZE_FORMAT \" forwarding entries, %s\",\n+                         \"%.1f%% relative defragmentation, %zu forwarding entries, %s\",\n@@ -164,1 +164,1 @@\n-  log_trace(gc, reloc)(\"Relocation Set (%s Pages): %d->%d, %d skipped, \" SIZE_FORMAT \" forwarding entries\",\n+  log_trace(gc, reloc)(\"Relocation Set (%s Pages): %d->%d, %d skipped, %zu forwarding entries\",\n","filename":"src\/hotspot\/share\/gc\/x\/xRelocationSetSelector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-#define XSIZE_FMT                       SIZE_FORMAT \"M(%.0f%%)\"\n+#define XSIZE_FMT                       \"%zuM(%.0f%%)\"\n@@ -1201,5 +1201,5 @@\n-                        SIZE_FORMAT \" stripe(s), \"\n-                        SIZE_FORMAT \" proactive flush(es), \"\n-                        SIZE_FORMAT \" terminate flush(es), \"\n-                        SIZE_FORMAT \" completion(s), \"\n-                        SIZE_FORMAT \" continuation(s) \",\n+                        \"%zu stripe(s), \"\n+                        \"%zu proactive flush(es), \"\n+                        \"%zu terminate flush(es), \"\n+                        \"%zu completion(s), \"\n+                        \"%zu continuation(s) \",\n@@ -1212,1 +1212,1 @@\n-  log_info(gc, marking)(\"Mark Stack Usage: \" SIZE_FORMAT \"M\", _mark_stack_usage \/ M);\n+  log_info(gc, marking)(\"Mark Stack Usage: %zuM\", _mark_stack_usage \/ M);\n@@ -1239,2 +1239,2 @@\n-  log_info(gc, reloc)(\"%s Pages: \" SIZE_FORMAT \" \/ \" SIZE_FORMAT \"M, Empty: \" SIZE_FORMAT \"M, \"\n-                      \"Relocated: \" SIZE_FORMAT \"M, In-Place: \" SIZE_FORMAT,\n+  log_info(gc, reloc)(\"%s Pages: %zu \/ %zuM, Empty: %zuM, \"\n+                      \"Relocated: %zuM, In-Place: %zu\",\n@@ -1256,1 +1256,1 @@\n-  log_info(gc, reloc)(\"Forwarding Usage: \" SIZE_FORMAT \"M\", _forwarding_usage \/ M);\n+  log_info(gc, reloc)(\"Forwarding Usage: %zuM\", _forwarding_usage \/ M);\n@@ -1263,1 +1263,1 @@\n-  log_info(gc, nmethod)(\"NMethods: \" SIZE_FORMAT \" registered, \" SIZE_FORMAT \" unregistered\",\n+  log_info(gc, nmethod)(\"NMethods: %zu registered, %zu unregistered\",\n@@ -1274,2 +1274,2 @@\n-                          SIZE_FORMAT \"M used, \"\n-                          SIZE_FORMAT \"M committed, \" SIZE_FORMAT \"M reserved\",\n+                          \"%zuM used, \"\n+                          \"%zuM committed, %zuM reserved\",\n@@ -1313,3 +1313,3 @@\n-                    SIZE_FORMAT \" encountered, \"\n-                    SIZE_FORMAT \" discovered, \"\n-                    SIZE_FORMAT \" enqueued\",\n+                    \"%zu encountered, \"\n+                    \"%zu discovered, \"\n+                    \"%zu enqueued\",\n","filename":"src\/hotspot\/share\/gc\/x\/xStat.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-      log_info(gc, heap)(\"Uncommitted: \" SIZE_FORMAT \"M(%.0f%%)\",\n+      log_info(gc, heap)(\"Uncommitted: %zuM(%.0f%%)\",\n","filename":"src\/hotspot\/share\/gc\/x\/xUncommitter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-    log_debug(gc, unmap)(\"Synchronous unmapping \" SIZE_FORMAT \"M page\", page->size() \/ M);\n+    log_debug(gc, unmap)(\"Synchronous unmapping %zuM page\", page->size() \/ M);\n@@ -82,1 +82,1 @@\n-  log_trace(gc, unmap)(\"Asynchronous unmapping \" SIZE_FORMAT \"M page (\" SIZE_FORMAT \"M \/ \" SIZE_FORMAT \"M enqueued)\",\n+  log_trace(gc, unmap)(\"Asynchronous unmapping %zuM page (%zuM \/ %zuM enqueued)\",\n","filename":"src\/hotspot\/share\/gc\/x\/xUnmapper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    log_error_p(gc)(\"Java heap too large (max supported heap size is \" SIZE_FORMAT \"G)\",\n+    log_error_p(gc)(\"Java heap too large (max supported heap size is %zuG)\",\n@@ -174,1 +174,1 @@\n-  log_info_p(gc, init)(\"Address Space Size: \" SIZE_FORMAT \"M x \" SIZE_FORMAT \" = \" SIZE_FORMAT \"M\",\n+  log_info_p(gc, init)(\"Address Space Size: %zuM x %zu = %zuM\",\n","filename":"src\/hotspot\/share\/gc\/x\/xVirtualMemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        err_msg(\"Java heap too large (max supported heap size is \" SIZE_FORMAT \"G)\",\n+        err_msg(\"Java heap too large (max supported heap size is %zuG)\",\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-                                          SIZE_FORMAT \"M large pages are supported by ZGC\",\n+                                          \"%zuM large pages are supported by ZGC\",\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-  st->print_cr(\" Offset Max:         \" SIZE_FORMAT \"%s (\" PTR_FORMAT \")\",\n+  st->print_cr(\" Offset Max:         %zu%s (\" PTR_FORMAT \")\",\n@@ -374,2 +374,2 @@\n-  st->print_cr(\" Page Size Small:    \" SIZE_FORMAT \"M\", ZPageSizeSmall \/ M);\n-  st->print_cr(\" Page Size Medium:   \" SIZE_FORMAT \"M\", ZPageSizeMedium \/ M);\n+  st->print_cr(\" Page Size Small:    %zuM\", ZPageSizeSmall \/ M);\n+  st->print_cr(\" Page Size Medium:   %zuM\", ZPageSizeMedium \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                          \"MaxAllocRate: %.1fMB\/s (+\/-%.1f%%), Free: \" SIZE_FORMAT \"MB, GCCPUTime: %.3f, \"\n+                          \"MaxAllocRate: %.1fMB\/s (+\/-%.1f%%), Free: %zuMB, GCCPUTime: %.3f, \"\n@@ -289,1 +289,1 @@\n-  log_debug(gc, director)(\"Rule Minor: Allocation Rate (Static GC Workers), MaxAllocRate: %.1fMB\/s, Free: \" SIZE_FORMAT \"MB, GCDuration: %.3fs, TimeUntilGC: %.3fs\",\n+  log_debug(gc, director)(\"Rule Minor: Allocation Rate (Static GC Workers), MaxAllocRate: %.1fMB\/s, Free: %zuMB, GCDuration: %.3fs, TimeUntilGC: %.3fs\",\n@@ -387,1 +387,1 @@\n-    log_debug(gc, director)(\"Rule Minor: High Usage, Free: \" SIZE_FORMAT \"MB(%.1f%%)\",\n+    log_debug(gc, director)(\"Rule Minor: High Usage, Free: %zuMB(%.1f%%)\",\n@@ -431,1 +431,1 @@\n-  log_debug(gc, director)(\"Rule Major: Warmup %.0f%%, Used: \" SIZE_FORMAT \"MB, UsedThreshold: \" SIZE_FORMAT \"MB\",\n+  log_debug(gc, director)(\"Rule Major: Warmup %.0f%%, Used: %zuMB, UsedThreshold: %zuMB\",\n@@ -571,1 +571,1 @@\n-    log_debug(gc, director)(\"Rule Major: Proactive, UsedUntilEnabled: \" SIZE_FORMAT \"MB, TimeUntilEnabled: %.3fs\",\n+    log_debug(gc, director)(\"Rule Major: Proactive, UsedUntilEnabled: %zuMB, TimeUntilEnabled: %.3fs\",\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-  assert(index < ARRAY_SIZE(str), \"OOB: \" SIZE_FORMAT \" < \" SIZE_FORMAT, index, ARRAY_SIZE(str));\n+  assert(index < ARRAY_SIZE(str), \"OOB: %zu < %zu\", index, ARRAY_SIZE(str));\n@@ -789,2 +789,2 @@\n-  log_trace(gc, reloc)(\"Young Allocated: \" SIZE_FORMAT \"M\", young_allocated \/ M);\n-  log_trace(gc, reloc)(\"Young Garbage: \" SIZE_FORMAT \"M\", young_garbage \/ M);\n+  log_trace(gc, reloc)(\"Young Allocated: %zuM\", young_allocated \/ M);\n+  log_trace(gc, reloc)(\"Young Garbage: %zuM\", young_garbage \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    log_error_p(gc)(\"Failed to allocate initial Java heap (\" SIZE_FORMAT \"M)\", InitialHeapSize \/ M);\n+    log_error_p(gc)(\"Failed to allocate initial Java heap (%zuM)\", InitialHeapSize \/ M);\n@@ -240,1 +240,1 @@\n-  log_trace(gc)(\"Undo page allocation, thread: \" PTR_FORMAT \" (%s), page: \" PTR_FORMAT \", size: \" SIZE_FORMAT,\n+  log_trace(gc)(\"Undo page allocation, thread: \" PTR_FORMAT \" (%s), page: \" PTR_FORMAT \", size: %zu\",\n@@ -332,1 +332,1 @@\n-  st->print_cr(\" ZHeap           used \" SIZE_FORMAT \"M, capacity \" SIZE_FORMAT \"M, max capacity \" SIZE_FORMAT \"M\",\n+  st->print_cr(\" ZHeap           used %zuM, capacity %zuM, max capacity %zuM\",\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-    tty->print_cr(\"ZIndexDistributorClaimTree count: %d byte size: \" SIZE_FORMAT, count, claim_variables_size() + os::vm_page_size());\n+    tty->print_cr(\"ZIndexDistributorClaimTree count: %d byte size: %zu\", count, claim_variables_size() + os::vm_page_size());\n","filename":"src\/hotspot\/share\/gc\/z\/zIndexDistributor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        log_trace(gc)(\"Mark segment reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", segment: \" SIZE_FORMAT,\n+        log_trace(gc)(\"Mark segment reset contention, thread: \" PTR_FORMAT \" (%s), map: \" PTR_FORMAT \", segment: %zu\",\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-      log.print(\"  Worker %u(%u) -> Stripe \" SIZE_FORMAT \"(\" SIZE_FORMAT \")\",\n+      log.print(\"  Worker %u(%u) -> Stripe %zu(%zu)\",\n@@ -197,1 +197,1 @@\n-  log_develop_trace(gc, marking)(\"Array push partial: \" PTR_FORMAT \" (\" SIZE_FORMAT \"), stripe: \" SIZE_FORMAT,\n+  log_develop_trace(gc, marking)(\"Array push partial: \" PTR_FORMAT \" (%zu), stripe: %zu\",\n@@ -216,1 +216,1 @@\n-  log_develop_trace(gc, marking)(\"Array follow small: \" PTR_FORMAT \" (\" SIZE_FORMAT \")\", p2i(addr), length);\n+  log_develop_trace(gc, marking)(\"Array follow small: \" PTR_FORMAT \" (%zu)\", p2i(addr), length);\n@@ -235,2 +235,2 @@\n-  log_develop_trace(gc, marking)(\"Array follow large: \" PTR_FORMAT \"-\" PTR_FORMAT\" (\" SIZE_FORMAT \"), \"\n-                                 \"middle: \" PTR_FORMAT \"-\" PTR_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_develop_trace(gc, marking)(\"Array follow large: \" PTR_FORMAT \"-\" PTR_FORMAT\" (%zu), \"\n+                                 \"middle: \" PTR_FORMAT \"-\" PTR_FORMAT \" (%zu)\",\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  log_debug(gc, marking)(\"Using \" SIZE_FORMAT \" mark stripes\", nstripes);\n+  log_debug(gc, marking)(\"Using %zu mark stripes\", nstripes);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-          \"maximum number of bytes allocated for mark stacks. Current limit is \" SIZE_FORMAT \"M.\",\n+          \"maximum number of bytes allocated for mark stacks. Current limit is %zuM.\",\n@@ -86,1 +86,1 @@\n-  log_debug(gc, marking)(\"Expanding mark stack space: \" SIZE_FORMAT \"M->\" SIZE_FORMAT \"M\",\n+  log_debug(gc, marking)(\"Expanding mark stack space: %zuM->%zuM\",\n@@ -103,1 +103,1 @@\n-    log_debug(gc, marking)(\"Shrinking mark stack space: \" SIZE_FORMAT \"M->\" SIZE_FORMAT \"M\",\n+    log_debug(gc, marking)(\"Shrinking mark stack space: %zuM->%zuM\",\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,3 +114,3 @@\n-                         SIZE_FORMAT \"->\" SIZE_FORMAT \" entries, \"\n-                         SIZE_FORMAT \"(%.0f%%->%.0f%%) registered, \"\n-                         SIZE_FORMAT \"(%.0f%%->%.0f%%) unregistered\",\n+                         \"%zu->%zu entries, \"\n+                         \"%zu(%.0f%%->%.0f%%) registered, \"\n+                         \"%zu(%.0f%%->%.0f%%) unregistered\",\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -208,4 +208,4 @@\n-  log_info_p(gc, init)(\"Min Capacity: \" SIZE_FORMAT \"M\", min_capacity \/ M);\n-  log_info_p(gc, init)(\"Initial Capacity: \" SIZE_FORMAT \"M\", initial_capacity \/ M);\n-  log_info_p(gc, init)(\"Max Capacity: \" SIZE_FORMAT \"M\", max_capacity \/ M);\n-  log_info_p(gc, init)(\"Soft Max Capacity: \" SIZE_FORMAT \"M\", soft_max_capacity \/ M);\n+  log_info_p(gc, init)(\"Min Capacity: %zuM\", min_capacity \/ M);\n+  log_info_p(gc, init)(\"Initial Capacity: %zuM\", initial_capacity \/ M);\n+  log_info_p(gc, init)(\"Max Capacity: %zuM\", max_capacity \/ M);\n+  log_info_p(gc, init)(\"Soft Max Capacity: %zuM\", soft_max_capacity \/ M);\n@@ -213,1 +213,1 @@\n-    log_info_p(gc, init)(\"Medium Page Size: \" SIZE_FORMAT \"M\", ZPageSizeMedium \/ M);\n+    log_info_p(gc, init)(\"Medium Page Size: %zuM\", ZPageSizeMedium \/ M);\n@@ -369,1 +369,1 @@\n-                    SIZE_FORMAT \"M(%.0f%%) to \" SIZE_FORMAT \"M(%.0f%%)\",\n+                    \"%zuM(%.0f%%) to %zuM(%.0f%%)\",\n@@ -610,1 +610,1 @@\n-    log_debug(gc, heap)(\"Page Cache Flushed: \" SIZE_FORMAT \"M\", flushed \/ M);\n+    log_debug(gc, heap)(\"Page Cache Flushed: %zuM\", flushed \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-                         \"%.1f%% relative defragmentation, \" SIZE_FORMAT \" forwarding entries, %s, live %d\",\n+                         \"%.1f%% relative defragmentation, %zu forwarding entries, %s, live %d\",\n@@ -178,1 +178,1 @@\n-  log_debug(gc, reloc)(\"Relocation Set (%s Pages): %d->%d, %d skipped, \" SIZE_FORMAT \" forwarding entries\",\n+  log_debug(gc, reloc)(\"Relocation Set (%s Pages): %d->%d, %d skipped, %zu forwarding entries\",\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-  _page->log_msg(\" (remembered iter count: \" SIZE_FORMAT \" skipped: \" SIZE_FORMAT \")\", _count, _count_skipped);\n+  _page->log_msg(\" (remembered iter count: %zu skipped: %zu)\", _count, _count_skipped);\n","filename":"src\/hotspot\/share\/gc\/z\/zRememberedSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-#define ZSIZE_FMT                       SIZE_FORMAT \"M(%.0f%%)\"\n+#define ZSIZE_FMT                       \"%zuM(%.0f%%)\"\n@@ -1445,5 +1445,5 @@\n-                        SIZE_FORMAT \" stripe(s), \"\n-                        SIZE_FORMAT \" proactive flush(es), \"\n-                        SIZE_FORMAT \" terminate flush(es), \"\n-                        SIZE_FORMAT \" completion(s), \"\n-                        SIZE_FORMAT \" continuation(s) \",\n+                        \"%zu stripe(s), \"\n+                        \"%zu proactive flush(es), \"\n+                        \"%zu terminate flush(es), \"\n+                        \"%zu completion(s), \"\n+                        \"%zu continuation(s) \",\n@@ -1456,1 +1456,1 @@\n-  log_info(gc, marking)(\"Mark Stack Usage: \" SIZE_FORMAT \"M\", _mark_stack_usage \/ M);\n+  log_info(gc, marking)(\"Mark Stack Usage: %zuM\", _mark_stack_usage \/ M);\n@@ -1541,1 +1541,1 @@\n-  lt.print(\"Forwarding Usage: \" SIZE_FORMAT \"M\", _forwarding_usage \/ M);\n+  lt.print(\"Forwarding Usage: %zuM\", _forwarding_usage \/ M);\n@@ -1607,1 +1607,1 @@\n-              .left(SIZE_FORMAT_W(7) \" \/ \" SIZE_FORMAT,\n+              .left(SIZE_FORMAT_W(7) \" \/ %zu\",\n@@ -1610,1 +1610,1 @@\n-              .left(SIZE_FORMAT_W(7) \" \/ \" SIZE_FORMAT,\n+              .left(SIZE_FORMAT_W(7) \" \/ %zu\",\n@@ -1613,1 +1613,1 @@\n-              .left(SIZE_FORMAT_W(7) \" \/ \" SIZE_FORMAT,\n+              .left(SIZE_FORMAT_W(7) \" \/ %zu\",\n@@ -1624,1 +1624,1 @@\n-  log_info(gc, nmethod)(\"NMethods: \" SIZE_FORMAT \" registered, \" SIZE_FORMAT \" unregistered\",\n+  log_info(gc, nmethod)(\"NMethods: %zu registered, %zu unregistered\",\n@@ -1635,2 +1635,2 @@\n-                          SIZE_FORMAT \"M used, \"\n-                          SIZE_FORMAT \"M committed, \" SIZE_FORMAT \"M reserved\",\n+                          \"%zuM used, \"\n+                          \"%zuM committed, %zuM reserved\",\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-      log_info(gc, heap)(\"Uncommitted: \" SIZE_FORMAT \"M(%.0f%%)\",\n+      log_info(gc, heap)(\"Uncommitted: %zuM(%.0f%%)\",\n","filename":"src\/hotspot\/share\/gc\/z\/zUncommitter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    log_debug(gc, unmap)(\"Synchronous unmapping \" SIZE_FORMAT \"M page\", page->size() \/ M);\n+    log_debug(gc, unmap)(\"Synchronous unmapping %zuM page\", page->size() \/ M);\n@@ -77,1 +77,1 @@\n-  log_trace(gc, unmap)(\"Asynchronous unmapping \" SIZE_FORMAT \"M page (\" SIZE_FORMAT \"M \/ \" SIZE_FORMAT \"M enqueued)\",\n+  log_trace(gc, unmap)(\"Asynchronous unmapping %zuM page (%zuM \/ %zuM enqueued)\",\n","filename":"src\/hotspot\/share\/gc\/z\/zUnmapper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  assert(is_aligned(size, ZGranuleSize), \"Must be granule aligned \" SIZE_FORMAT_X, size);\n+  assert(is_aligned(size, ZGranuleSize), \"Must be granule aligned 0x%zx\", size);\n@@ -203,1 +203,1 @@\n-  log_info_p(gc, init)(\"Address Space Size: \" SIZE_FORMAT \"M\", reserved \/ M);\n+  log_info_p(gc, init)(\"Address Space Size: %zuM\", reserved \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1321,1 +1321,1 @@\n-    log_error(jfr, system) (\"Thread local allocation (native) for \" SIZE_FORMAT\n+    log_error(jfr, system) (\"Thread local allocation (native) for %zu\"\n@@ -1560,1 +1560,1 @@\n-    log_error(jfr, system)(\"Allocation using C_HEAP_ARRAY for \" SIZE_FORMAT \" bytes failed in JfrEventClassTransformer::cache_class_file_data\",\n+    log_error(jfr, system)(\"Allocation using C_HEAP_ARRAY for %zu bytes failed in JfrEventClassTransformer::cache_class_file_data\",\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-      \"Thread local allocation (native) of \" SIZE_FORMAT \" bytes failed \"\n+      \"Thread local allocation (native) of %zu bytes failed \"\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    \"Thread local allocation (native) for \" SIZE_FORMAT \" bytes failed in JfrUpcalls\", (size_t)new_bytes_length);\n+    \"Thread local allocation (native) for %zu bytes failed in JfrUpcalls\", (size_t)new_bytes_length);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-      \"BFS front: \" SIZE_FORMAT \" edges: \" SIZE_FORMAT \" size: \" SIZE_FORMAT \" [KB]\",\n+      \"BFS front: %zu edges: %zu size: %zu [KB]\",\n@@ -88,1 +88,1 @@\n-      \"BFS front: \" SIZE_FORMAT \" filled edge queue at edge: \" SIZE_FORMAT,\n+      \"BFS front: %zu filled edge queue at edge: %zu\",\n@@ -95,1 +95,1 @@\n-      \"DFS to complete \" SIZE_FORMAT \" edges size: \" SIZE_FORMAT \" [KB]\",\n+      \"DFS to complete %zu edges size: %zu [KB]\",\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,3 +73,3 @@\n-  log_trace(jfr, system)(\"EdgeQueue reserved size total: \" SIZE_FORMAT \" [KB]\", edge_queue.reserved_size() \/ K);\n-  log_trace(jfr, system)(\"EdgeQueue edges total: \" SIZE_FORMAT, edge_queue.top());\n-  log_trace(jfr, system)(\"EdgeQueue liveset total: \" SIZE_FORMAT \" [KB]\", edge_queue.live_set() \/ K);\n+  log_trace(jfr, system)(\"EdgeQueue reserved size total: %zu [KB]\", edge_queue.reserved_size() \/ K);\n+  log_trace(jfr, system)(\"EdgeQueue edges total: %zu\", edge_queue.top());\n+  log_trace(jfr, system)(\"EdgeQueue liveset total: %zu [KB]\", edge_queue.live_set() \/ K);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    log_warning(jfr)(\"Unable to allocate \" SIZE_FORMAT \" bytes of %s.\", _mspace->min_element_size(), \"epoch storage\");\n+    log_warning(jfr)(\"Unable to allocate %zu bytes of %s.\", _mspace->min_element_size(), \"epoch storage\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrEpochStorage.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-    assert(false, \"requested size: \" SIZE_FORMAT \" is too large\", requested_size);\n+    assert(false, \"requested size: %zu is too large\", requested_size);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrMemorySpace.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  log_warning(jfr)(\"Unable to allocate \" SIZE_FORMAT \" bytes of %s.\", size, msg);\n+  log_warning(jfr)(\"Unable to allocate %zu bytes of %s.\", size, msg);\n@@ -329,2 +329,2 @@\n-      log_debug(jfr, system)(\"Cleared \" SIZE_FORMAT \" full buffer(s) of \" SIZE_FORMAT\" bytes.\", number_of_discards, amount);\n-      log_debug(jfr, system)(\"Current number of full buffers \" SIZE_FORMAT \"\", number_of_discards);\n+      log_debug(jfr, system)(\"Cleared %zu full buffer(s) of %zu bytes.\", number_of_discards, amount);\n+      log_debug(jfr, system)(\"Current number of full buffers %zu\", number_of_discards);\n@@ -568,1 +568,1 @@\n-      log_debug(jfr, system)(\"%s \" SIZE_FORMAT \" full buffer(s) of \" SIZE_FORMAT\" B of data%s\",\n+      log_debug(jfr, system)(\"%s %zu full buffer(s) of %zuB of data%s\",\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    log_trace(jfr, system)(\"Allocation: [\" SIZE_FORMAT \"] bytes\", alloc_size);\n+    log_trace(jfr, system)(\"Allocation: [%zu] bytes\", alloc_size);\n@@ -68,1 +68,1 @@\n-    log_trace(jfr, system)(\"Deallocation: [\" SIZE_FORMAT \"] bytes\", dealloc_size);\n+    log_trace(jfr, system)(\"Deallocation: [%zu] bytes\", dealloc_size);\n@@ -82,1 +82,1 @@\n-      log_warning(jfr, system)(\"Memory allocation failed for size [\" SIZE_FORMAT \"] bytes\", alloc_size);\n+      log_warning(jfr, system)(\"Memory allocation failed for size [%zu] bytes\", alloc_size);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  log_info(logging)(\"AsyncLogBuffer estimates memory use: \" SIZE_FORMAT \" bytes\", size * 2);\n+  log_info(logging)(\"AsyncLogBuffer estimates memory use: %zu bytes\", size * 2);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,2 +217,2 @@\n-         \"idx must be in range 1 < idx < _n_outputs, but idx = \" SIZE_FORMAT\n-         \" and _n_outputs = \" SIZE_FORMAT, idx, _n_outputs);\n+         \"idx must be in range 1 < idx < _n_outputs, but idx = %zu\"\n+         \" and _n_outputs = %zu\", idx, _n_outputs);\n@@ -243,1 +243,1 @@\n-  assert(idx < _n_outputs, \"Invalid index, idx = \" SIZE_FORMAT \" and _n_outputs = \" SIZE_FORMAT, idx, _n_outputs);\n+  assert(idx < _n_outputs, \"Invalid index, idx = %zu and _n_outputs = %zu\", idx, _n_outputs);\n@@ -354,1 +354,1 @@\n-         \"Too many tags specified! Can only have up to \" SIZE_FORMAT \" tags in a tag set.\", LogTag::MaxTags);\n+         \"Too many tags specified! Can only have up to %zu tags in a tag set.\", LogTag::MaxTags);\n@@ -503,1 +503,1 @@\n-    int ret = sscanf(outputstr + 1, SIZE_FORMAT, &idx);\n+    int ret = sscanf(outputstr + 1, \"%zu\", &idx);\n@@ -563,1 +563,1 @@\n-    out->print(\" #\" SIZE_FORMAT \": \", i);\n+    out->print(\" #%zu: \", i);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-        errstream->print_cr(\"Invalid option: %s must be in range [0, \"\n-                            SIZE_FORMAT \"]\", FileSizeOptionKey, (size_t)SIZE_MAX);\n+        errstream->print_cr(\"Invalid option: %s must be in range [0, %zu]\",\n+                            FileSizeOptionKey, (size_t)SIZE_MAX);\n@@ -217,1 +217,1 @@\n-                     \", filesize: \" SIZE_FORMAT \" KiB).\",\n+                     \", filesize: %zu KiB).\",\n@@ -463,1 +463,1 @@\n-  out->print(\",filecount=%u,filesize=\" SIZE_FORMAT \"%s,async=%s\", _file_count,\n+  out->print(\",filecount=%u,filesize=%zu%s,async=%s\", _file_count,\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        errstream->print_cr(\"Too many tags in log selection '%s' (can only have up to \" SIZE_FORMAT \" tags).\",\n+        errstream->print_cr(\"Too many tags in log selection '%s' (can only have up to %zu tags).\",\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        errstream->print_cr(\"Can not have more than \" SIZE_FORMAT \" log selections in a single configuration.\",\n+        errstream->print_cr(\"Can not have more than %zu log selections in a single configuration.\",\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,2 +153,1 @@\n-  assert(is_aligned(length, ARENA_AMALLOC_ALIGNMENT), \"chunk payload length misaligned: \"\n-         SIZE_FORMAT \".\", length);\n+  assert(is_aligned(length, ARENA_AMALLOC_ALIGNMENT), \"chunk payload length misaligned: %zu.\", length);\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-    log_trace(gc, metaspace)(\"Increase capacity to GC from \" SIZE_FORMAT \" to \" SIZE_FORMAT, before, after);\n-    UL2(info, \"GC threshold increased: \" SIZE_FORMAT \"->\" SIZE_FORMAT \".\", before, after);\n+    log_trace(gc, metaspace)(\"Increase capacity to GC from %zu to %zu\", before, after);\n+    UL2(info, \"GC threshold increased: %zu->%zu.\", before, after);\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-      \" tag=\" PTR_FORMAT \" user_size=\" SIZE_FORMAT \" user_data=\" PTR_FORMAT,\n+      \" tag=\" PTR_FORMAT \" user_size=%zu user_data=\" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,3 +216,3 @@\n-                \"used \"      SIZE_FORMAT \"K, \"\n-                \"committed \" SIZE_FORMAT \"K, \"\n-                \"reserved \"  SIZE_FORMAT \"K\",\n+                \"used %zuK, \"\n+                \"committed %zuK, \"\n+                \"reserved %zuK\",\n@@ -225,3 +225,3 @@\n-                  \"used \"      SIZE_FORMAT \"K, \"\n-                  \"committed \" SIZE_FORMAT \"K, \"\n-                  \"reserved \"  SIZE_FORMAT \"K\",\n+                  \"used %zuK, \"\n+                  \"committed %zuK, \"\n+                  \"reserved %zuK\",\n@@ -385,1 +385,1 @@\n-      log_trace(gc, metaspace, freelist)(\"Cannot expand %s metaspace by \" SIZE_FORMAT \" words (CompressedClassSpaceSize = \" SIZE_FORMAT \" words)\",\n+      log_trace(gc, metaspace, freelist)(\"Cannot expand %s metaspace by %zu words (CompressedClassSpaceSize = %zu words)\",\n@@ -394,1 +394,1 @@\n-    log_trace(gc, metaspace, freelist)(\"Cannot expand %s metaspace by \" SIZE_FORMAT \" words (MaxMetaspaceSize = \" SIZE_FORMAT \" words)\",\n+    log_trace(gc, metaspace, freelist)(\"Cannot expand %s metaspace by %zu words (MaxMetaspaceSize = %zu words)\",\n@@ -407,1 +407,1 @@\n-         \"capacity_until_gc: \" SIZE_FORMAT \" < committed_bytes: \" SIZE_FORMAT,\n+         \"capacity_until_gc: %zu < committed_bytes: %zu\",\n@@ -413,2 +413,2 @@\n-  log_trace(gc, metaspace, freelist)(\"allowed expansion words: \" SIZE_FORMAT\n-            \" (left_until_max: \" SIZE_FORMAT \", left_until_GC: \" SIZE_FORMAT \".\",\n+  log_trace(gc, metaspace, freelist)(\"allowed expansion words: %zu\"\n+            \" (left_until_max: %zu, left_until_GC: %zu.\",\n@@ -478,1 +478,1 @@\n-         SIZE_FORMAT \" >= \" SIZE_FORMAT,\n+         \"%zu >= %zu\",\n@@ -512,1 +512,1 @@\n-             \"invalid shrink size \" SIZE_FORMAT \" not <= \" SIZE_FORMAT,\n+             \"invalid shrink size %zu not <= %zu\",\n@@ -552,1 +552,1 @@\n-    st->print(\"Compressed class space mapped at: \" PTR_FORMAT \"-\" PTR_FORMAT \", reserved size: \" SIZE_FORMAT,\n+    st->print(\"Compressed class space mapped at: \" PTR_FORMAT \"-\" PTR_FORMAT \", reserved size: %zu\",\n@@ -561,1 +561,1 @@\n-         SIZE_FORMAT \" != \" SIZE_FORMAT, rs.size(), CompressedClassSpaceSize);\n+         \"%zu != %zu\", rs.size(), CompressedClassSpaceSize);\n@@ -564,1 +564,1 @@\n-  assert(rs.size() == CompressedClassSpaceSize, SIZE_FORMAT \" != \" SIZE_FORMAT,\n+  assert(rs.size() == CompressedClassSpaceSize, \"%zu != %zu\",\n@@ -725,1 +725,1 @@\n-      log_info(metaspace)(\"Setting CompressedClassSpaceSize to \" SIZE_FORMAT \".\",\n+      log_info(metaspace)(\"Setting CompressedClassSpaceSize to %zu.\",\n@@ -795,1 +795,1 @@\n-                    \"(must be aligned to \" SIZE_FORMAT_X \").\",\n+                    \"(must be aligned to 0x%zx).\",\n@@ -835,1 +835,1 @@\n-          err_msg(\"Could not allocate compressed class space: \" SIZE_FORMAT \" bytes\",\n+          err_msg(\"Could not allocate compressed class space: %zu bytes\",\n@@ -897,1 +897,1 @@\n-         \"allocation size too large (\" SIZE_FORMAT \")\", word_size);\n+         \"allocation size too large (%zu)\", word_size);\n@@ -963,1 +963,1 @@\n-    log.info(\"Metaspace (%s) allocation failed for size \" SIZE_FORMAT,\n+    log.info(\"Metaspace (%s) allocation failed for size %zu\",\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-#define BLOCK_FORMAT          \"Block @\" PTR_FORMAT \": size: \" SIZE_FORMAT \", next: \" PTR_FORMAT\n+#define BLOCK_FORMAT          \"Block @\" PTR_FORMAT \": size: %zu, next: \" PTR_FORMAT\n@@ -152,1 +152,1 @@\n-           word_size <= MaxWordSize, \"bad block size \" SIZE_FORMAT \".\", word_size);\n+           word_size <= MaxWordSize, \"bad block size %zu.\", word_size);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  \", size \" SIZE_FORMAT\n+  \", size %zu\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-    assert(word_size >= MinWordSize, \"invalid block size \" SIZE_FORMAT, word_size);\n+    assert(word_size >= MinWordSize, \"invalid block size %zu\", word_size);\n@@ -365,1 +365,1 @@\n-    assert(word_size >= MinWordSize, \"invalid block size \" SIZE_FORMAT, word_size);\n+    assert(word_size >= MinWordSize, \"invalid block size %zu\", word_size);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-     \", max_level: \" CHKLVL_FORMAT \", min committed size: \" SIZE_FORMAT \".\",\n+     \", max_level: \" CHKLVL_FORMAT \", min committed size: %zu.\",\n@@ -215,1 +215,1 @@\n-        UL2(info, \"failed to commit \" SIZE_FORMAT \" words on chunk \" METACHUNK_FORMAT \".\",\n+        UL2(info, \"failed to commit %zu words on chunk \" METACHUNK_FORMAT \".\",\n@@ -437,1 +437,1 @@\n-  st->print_cr(\"cm %s: %d chunks, total word size: \" SIZE_FORMAT \".\", _name,\n+  st->print_cr(\"cm %s: %d chunks, total word size: %zu.\", _name,\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-         SIZE_FORMAT \" - too large allocation size.\", word_size * BytesPerWord);\n+         \"%zu - too large allocation size.\", word_size * BytesPerWord);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunklevel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-         \"Pointer \" PTR_FORMAT \" should be aligned to commit granule size \" SIZE_FORMAT \".\",\n+         \"Pointer \" PTR_FORMAT \" should be aligned to commit granule size %zu.\",\n@@ -72,1 +72,1 @@\n-         \"Range \" SIZE_FORMAT \" should be aligned to commit granule size \" SIZE_FORMAT \".\",\n+         \"Range %zu should be aligned to commit granule size %zu.\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/commitMask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  assert(word_size >= MinWordSize, \"sanity (\" SIZE_FORMAT \")\", word_size);\n+  assert(word_size >= MinWordSize, \"sanity (%zu)\", word_size);\n@@ -44,1 +44,1 @@\n-      \"requested_word_size too small (\" SIZE_FORMAT \")\", requested_word_size);\n+      \"requested_word_size too small (%zu)\", requested_word_size);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeBlocks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  st->print_cr(\"total chunks: %d, total word size: \" SIZE_FORMAT \".\",\n+  st->print_cr(\"total chunks: %d, total word size: %zu.\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeChunkList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                         SIZE_FORMAT \" words.\", METACHUNK_FORMAT_ARGS(this), commit_to);\n+                         \"%zu words.\", METACHUNK_FORMAT_ARGS(this), commit_to);\n@@ -273,1 +273,1 @@\n-         \"mismatch: committed: \" SIZE_FORMAT \", used: \" SIZE_FORMAT \".\",\n+         \"mismatch: committed: %zu, used: %zu.\",\n@@ -276,1 +276,1 @@\n-         \"mismatch: word_size: \" SIZE_FORMAT \", committed: \" SIZE_FORMAT \".\",\n+         \"mismatch: word_size: %zu, committed: %zu.\",\n@@ -303,2 +303,2 @@\n-            \"level \" CHKLVL_FORMAT \" (\" SIZE_FORMAT \" words), \"\n-            \"used \" SIZE_FORMAT \" words, committed \" SIZE_FORMAT \" words.\",\n+            \"level \" CHKLVL_FORMAT \" (%zu words), \"\n+            \"used %zu words, committed %zu words.\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-#define METACHUNK_FULL_FORMAT                \"@\" PTR_FORMAT \", %c, base \" PTR_FORMAT \", level \" CHKLVL_FORMAT \" (\" SIZE_FORMAT \"), used: \" SIZE_FORMAT \", committed: \" SIZE_FORMAT \", committed-free: \" SIZE_FORMAT\n+#define METACHUNK_FULL_FORMAT                \"@\" PTR_FORMAT \", %c, base \" PTR_FORMAT \", level \" CHKLVL_FORMAT \" (%zu), used: %zu, committed: %zu, committed-free: %zu\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            \"Requested size too large (\" SIZE_FORMAT \") - max allowed size per allocation is \" SIZE_FORMAT \".\",\n+            \"Requested size too large (%zu) - max allowed size per allocation is %zu.\",\n@@ -155,1 +155,1 @@\n-  UL2(info, \"returned %d chunks, total capacity \" SIZE_FORMAT \" words.\",\n+  UL2(info, \"returned %d chunks, total capacity %zu words.\",\n@@ -224,1 +224,1 @@\n-  UL2(trace, \"requested \" SIZE_FORMAT \" words.\", requested_word_size);\n+  UL2(trace, \"requested %zu words.\", requested_word_size);\n@@ -234,1 +234,1 @@\n-      UL2(trace, \"taken from fbl (now: %d, \" SIZE_FORMAT \").\",\n+      UL2(trace, \"taken from fbl (now: %d, %zu).\",\n@@ -296,1 +296,1 @@\n-        UL2(info, \"commit failure (requested size: \" SIZE_FORMAT \")\", raw_word_size);\n+        UL2(info, \"commit failure (requested size: %zu)\", raw_word_size);\n@@ -315,1 +315,1 @@\n-      UL2(debug, \"allocated new chunk \" METACHUNK_FORMAT \" for requested word size \" SIZE_FORMAT \".\",\n+      UL2(debug, \"allocated new chunk \" METACHUNK_FORMAT \" for requested word size %zu.\",\n@@ -332,1 +332,1 @@\n-      UL2(info, \"failed to allocate new chunk for requested word size \" SIZE_FORMAT \".\", requested_word_size);\n+      UL2(info, \"failed to allocate new chunk for requested word size %zu.\", requested_word_size);\n@@ -365,1 +365,1 @@\n-  UL2(trace, \"deallocating \" PTR_FORMAT \", word size: \" SIZE_FORMAT \".\",\n+  UL2(trace, \"deallocating \" PTR_FORMAT \", word size: %zu.\",\n@@ -478,1 +478,1 @@\n-  st->print_cr(\"sm %s: %d chunks, total word size: \" SIZE_FORMAT \", committed word size: \" SIZE_FORMAT, _name,\n+  st->print_cr(\"sm %s: %d chunks, total word size: %zu, committed word size: %zu\", _name,\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-      st->print(SIZE_FORMAT \" bytes\", byte_size);\n+      st->print(\"%zu bytes\", byte_size);\n@@ -103,1 +103,1 @@\n-      st->print(SIZE_FORMAT \" words\", byte_size \/ BytesPerWord);\n+      st->print(\"%zu words\", byte_size \/ BytesPerWord);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,3 +57,3 @@\n-  st->print_cr(\" - commit_granule_bytes: \" SIZE_FORMAT \".\", commit_granule_bytes());\n-  st->print_cr(\" - commit_granule_words: \" SIZE_FORMAT \".\", commit_granule_words());\n-  st->print_cr(\" - virtual_space_node_default_size: \" SIZE_FORMAT \".\", virtual_space_node_default_word_size());\n+  st->print_cr(\" - commit_granule_bytes: %zu.\", commit_granule_bytes());\n+  st->print_cr(\" - commit_granule_words: %zu.\", commit_granule_words());\n+  st->print_cr(\" - virtual_space_node_default_size: %zu.\", virtual_space_node_default_word_size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-         \"Sanity: cap \" SIZE_FORMAT \", committed \" SIZE_FORMAT \", used \" SIZE_FORMAT \", free \" SIZE_FORMAT \", waste \" SIZE_FORMAT \".\",\n+         \"Sanity: cap %zu, committed %zu, used %zu, free %zu, waste %zu.\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceStatistics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-  assert(is_aligned(reserve_limit, Metaspace::reserve_alignment_words()), \"reserve_limit (\" SIZE_FORMAT \") \"\n-                    \"not aligned to metaspace reserve alignment (\" SIZE_FORMAT \")\",\n+  assert(is_aligned(reserve_limit, Metaspace::reserve_alignment_words()), \"reserve_limit (%zu) \"\n+                    \"not aligned to metaspace reserve alignment (%zu)\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  st->print_cr(\"- total %d nodes, \" SIZE_FORMAT \" reserved words, \" SIZE_FORMAT \" committed words.\",\n+  st->print_cr(\"- total %d nodes, %zu reserved words, %zu committed words.\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-         \"Not aligned to commit granule size: \" SIZE_FORMAT \".\", word_size);\n+         \"Not aligned to commit granule size: %zu.\", word_size);\n@@ -96,1 +96,1 @@\n-  UL2(debug, \"committing range \" PTR_FORMAT \"..\" PTR_FORMAT \"(\" SIZE_FORMAT \" words)\",\n+  UL2(debug, \"committing range \" PTR_FORMAT \"..\" PTR_FORMAT \"(%zu words)\",\n@@ -119,1 +119,1 @@\n-  UL2(debug, \"... committed \" SIZE_FORMAT \" additional words.\", commit_increase_words);\n+  UL2(debug, \"... committed %zu additional words.\", commit_increase_words);\n@@ -181,1 +181,1 @@\n-  UL2(debug, \"uncommitting range \" PTR_FORMAT \"..\" PTR_FORMAT \"(\" SIZE_FORMAT \" words)\",\n+  UL2(debug, \"uncommitting range \" PTR_FORMAT \"..\" PTR_FORMAT \"(%zu words)\",\n@@ -195,1 +195,1 @@\n-  UL2(debug, \"... uncommitted \" SIZE_FORMAT \" words.\", committed_words_in_range);\n+  UL2(debug, \"... uncommitted %zu words.\", committed_words_in_range);\n@@ -232,1 +232,1 @@\n-  UL2(debug, \"born (word_size \" SIZE_FORMAT \").\", _word_size);\n+  UL2(debug, \"born (word_size %zu).\", _word_size);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-             \"size: \" SIZE_FORMAT \", saved size: \" SIZE_FORMAT,\n+             \"size: %zu, saved size: %zu\",\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -861,1 +861,1 @@\n-         \"actual alignment \" SIZE_FORMAT \" must be within maximum heap alignment \" SIZE_FORMAT,\n+         \"actual alignment %zu must be within maximum heap alignment %zu\",\n@@ -899,1 +899,1 @@\n-    err_msg(\"Could not reserve enough space for \" SIZE_FORMAT \"KB object heap\",\n+    err_msg(\"Could not reserve enough space for %zuKB object heap\",\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                                   \"req_addr: \" PTR_FORMAT \" bytes: \" SIZE_FORMAT,\n+                                   \"req_addr: \" PTR_FORMAT \" bytes: %zu\",\n@@ -164,1 +164,1 @@\n-           \"Requested address \" PTR_FORMAT \" must be aligned to \" SIZE_FORMAT,\n+           \"Requested address \" PTR_FORMAT \" must be aligned to %zu\",\n@@ -188,2 +188,2 @@\n-  log_trace(pagesize)(\"Attempt special mapping: size: \" SIZE_FORMAT \"%s, \"\n-                      \"alignment: \" SIZE_FORMAT \"%s\",\n+  log_trace(pagesize)(\"Attempt special mapping: size: %zu%s, \"\n+                      \"alignment: %zu%s\",\n@@ -198,1 +198,1 @@\n-           \" alignment: \" SIZE_FORMAT_X,\n+           \" alignment: 0x%zx\",\n@@ -406,1 +406,1 @@\n-                             \" heap of size \" SIZE_FORMAT_X,\n+                             \" heap of size 0x%zx\",\n@@ -599,1 +599,1 @@\n-      log_trace(gc, heap, coops)(\"Trying to allocate at address null heap of size \" SIZE_FORMAT_X, size + noaccess_prefix);\n+      log_trace(gc, heap, coops)(\"Trying to allocate at address null heap of size 0x%zx\", size + noaccess_prefix);\n@@ -839,1 +839,1 @@\n-      \" size=\" SIZE_FORMAT \", executable=%d) failed\",\n+      \" size=%zu, executable=%d) failed\",\n@@ -1062,2 +1062,2 @@\n-  out->print_cr(\" - committed: \" SIZE_FORMAT, committed_size());\n-  out->print_cr(\" - reserved:  \" SIZE_FORMAT, reserved_size());\n+  out->print_cr(\" - committed: %zu\", committed_size());\n+  out->print_cr(\" - reserved:  %zu\", reserved_size());\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    assert(elements <= (size_t)INT_MAX, \"number of elements \" SIZE_FORMAT \"doesn't fit into an int.\", elements);\n+    assert(elements <= (size_t)INT_MAX, \"number of elements %zudoesn't fit into an int.\", elements);\n@@ -82,1 +82,1 @@\n-           \"Expected: \" SIZE_FORMAT \" got: \" SIZE_FORMAT,\n+           \"Expected: %zu got: %zu\",\n@@ -138,1 +138,1 @@\n-    assert(words <= INT_MAX, \"Overflow: \" SIZE_FORMAT, words);\n+    assert(words <= INT_MAX, \"Overflow: %zu\", words);\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-               \"Narrow klass range: \" SIZE_FORMAT_X, p2i(base()), shift(),\n+               \"Narrow klass range: 0x%zx\", p2i(base()), shift(),\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-  st->print(\"Heap address: \" PTR_FORMAT \", size: \" SIZE_FORMAT \" MB\",\n+  st->print(\"Heap address: \" PTR_FORMAT \", size: %zu MB\",\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3696,1 +3696,1 @@\n-  st->print_cr(BULLET\"---- fields (total size \" SIZE_FORMAT \" words):\", oop_size(obj));\n+  st->print_cr(BULLET\"---- fields (total size %zu words):\", oop_size(obj));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  assert(size > 0, \"total object size must be non-zero: \" SIZE_FORMAT, size);\n+  assert(size > 0, \"total object size must be non-zero: %zu\", size);\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,2 +200,2 @@\n-  assert(s > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, s);\n-  assert(is_object_aligned(s), \"Oop size is not properly aligned: \" SIZE_FORMAT, s);\n+  assert(s > 0, \"Oop size must be greater than zero, not %zu\", s);\n+  assert(is_object_aligned(s), \"Oop size is not properly aligned: %zu\", s);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -440,1 +440,1 @@\n-      assert(_chunk->bitmap().at(index), \"Bit not set at index \" SIZE_FORMAT \" corresponding to \" PTR_FORMAT, index, p2i(p));\n+      assert(_chunk->bitmap().at(index), \"Bit not set at index %zu corresponding to \" PTR_FORMAT, index, p2i(p));\n@@ -525,1 +525,1 @@\n-           \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT \" index: \" SIZE_FORMAT,\n+           \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT \" index: %zu\",\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -633,1 +633,1 @@\n-  if (log)  log->done(\"parse nodes='%d' live='%d' memory='\" SIZE_FORMAT \"'\",\n+  if (log)  log->done(\"parse nodes='%d' live='%d' memory='%zu'\",\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1238,1 +1238,1 @@\n-  <xsl:text>=\" SIZE_FORMAT_X \"<\/xsl:text>\n+  <xsl:text>=0x%zx<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  log_trace(membername, table)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(membername, table)(\"Start size: %zu (%zu)\",\n@@ -232,1 +232,1 @@\n-  log_trace(membername, table)(\"Uncleaned items:\" SIZE_FORMAT, num_dead);\n+  log_trace(membername, table)(\"Uncleaned items:%zu\", num_dead);\n@@ -292,1 +292,1 @@\n-  log_info(membername, table)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_info(membername, table)(\"Grown to size:%zu\", _current_size);\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -267,2 +267,2 @@\n-  tty->print_cr(\"Minimum heap \" SIZE_FORMAT \" Initial heap \" SIZE_FORMAT \" \"\n-                \"Maximum heap \" SIZE_FORMAT \" Space alignment \" SIZE_FORMAT \" Heap alignment \" SIZE_FORMAT,\n+  tty->print_cr(\"Minimum heap %zu Initial heap %zu \"\n+                \"Maximum heap %zu Space alignment %zu Heap alignment %zu\",\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1616,2 +1616,2 @@\n-          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least \" SIZE_FORMAT\n-                                     \" (\" SIZE_FORMAT \"G) which is greater than value given \" SIZE_FORMAT,\n+          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least %zu\"\n+                                     \" (%zuG) which is greater than value given %zu\",\n@@ -1642,1 +1642,1 @@\n-            \" max heap \" SIZE_FORMAT \" > compressed oop heap \" SIZE_FORMAT \". \"\n+            \" max heap %zu > compressed oop heap %zu. \"\n@@ -1653,1 +1653,1 @@\n-    log_trace(gc, heap)(\"  Maximum heap size \" SIZE_FORMAT, (size_t) reasonable_max);\n+    log_trace(gc, heap)(\"  Maximum heap size %zu\", (size_t) reasonable_max);\n@@ -1674,1 +1674,1 @@\n-      log_trace(gc, heap)(\"  Initial heap size \" SIZE_FORMAT, InitialHeapSize);\n+      log_trace(gc, heap)(\"  Initial heap size %zu\", InitialHeapSize);\n@@ -1680,1 +1680,1 @@\n-      log_trace(gc, heap)(\"  Minimum heap size \" SIZE_FORMAT, MinHeapSize);\n+      log_trace(gc, heap)(\"  Minimum heap size %zu\", MinHeapSize);\n@@ -1872,1 +1872,1 @@\n-                \"not \" SIZE_FORMAT \"\\n\",\n+                \"not %zu\\n\",\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-      st.print(\" allocated (\" SIZE_FORMAT \" bytes)\", obj->size() * HeapWordSize);\n+      st.print(\" allocated (%zu bytes)\", obj->size() * HeapWordSize);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-      st->print(SIZE_FORMAT, get_size_t());\n+      st->print(\"%zu\", get_size_t());\n@@ -426,1 +426,1 @@\n-    st->print(\"-XX:%s=\" SIZE_FORMAT, _name, get_size_t());\n+    st->print(\"-XX:%s=%zu\", _name, get_size_t());\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -247,2 +247,2 @@\n-                        \"size_t %s=\" SIZE_FORMAT \" is outside the allowed range \"\n-                        \"[ \" SIZE_FORMAT \" ... \" SIZE_FORMAT \" ]\\n\",\n+                        \"size_t %s=%zu is outside the allowed range \"\n+                        \"[ %zu ... %zu ]\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                        \"at least \" SIZE_FORMAT \" to align constants\\n\",\n+                        \"at least %zu to align constants\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                        \"less than page size (\" SIZE_FORMAT \")\\n\",\n+                        \"less than page size (%zu)\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-      tty->print_cr(\"ERROR: fail_cnt=\" SIZE_FORMAT, fail_cnt);\n+      tty->print_cr(\"ERROR: fail_cnt=%zu\", fail_cnt);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-  st->print_cr(\"JNI global refs: \" SIZE_FORMAT \", weak refs: \" SIZE_FORMAT,\n+  st->print_cr(\"JNI global refs: %zu, weak refs: %zu\",\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1050,1 +1050,1 @@\n-    st->print(\"%d cores, \" SIZE_FORMAT \"M, \", processor_count(), mem);\n+    st->print(\"%d cores, %zuM, \", processor_count(), mem);\n@@ -1052,1 +1052,1 @@\n-    st->print(\"%d cores, \" SIZE_FORMAT \"G, \", processor_count(), mem);\n+    st->print(\"%d cores, %zuG, \", processor_count(), mem);\n@@ -1663,2 +1663,2 @@\n-                     \" min=\" SIZE_FORMAT \"%s\"\n-                     \" max=\" SIZE_FORMAT \"%s\"\n+                     \" min=%zu%s\"\n+                     \" max=%zu%s\"\n@@ -1666,2 +1666,2 @@\n-                     \" size=\" SIZE_FORMAT \"%s\"\n-                     \" page_size=\" SIZE_FORMAT \"%s\",\n+                     \" size=%zu%s\"\n+                     \" page_size=%zu%s\",\n@@ -1684,2 +1684,2 @@\n-                     \" req_size=\" SIZE_FORMAT \"%s\"\n-                     \" req_page_size=\" SIZE_FORMAT \"%s\"\n+                     \" req_size=%zu%s\"\n+                     \" req_page_size=%zu%s\"\n@@ -1687,2 +1687,2 @@\n-                     \" size=\" SIZE_FORMAT \"%s\"\n-                     \" page_size=\" SIZE_FORMAT \"%s\",\n+                     \" size=%zu%s\"\n+                     \" page_size=%zu%s\",\n@@ -1769,1 +1769,1 @@\n-                 SIZE_FORMAT \" bytes failed, errno %d\", p2i(addr), bytes, get_last_error());\n+                 \"%zu bytes failed, errno %d\", p2i(addr), bytes, get_last_error());\n@@ -1841,1 +1841,1 @@\n-    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", \" SIZE_FORMAT \")\", p2i(addr), bytes);\n+    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", %zu)\", p2i(addr), bytes);\n@@ -1982,1 +1982,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -1987,1 +1987,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -1992,1 +1992,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2001,1 +2001,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2036,1 +2036,1 @@\n-      st->print(SIZE_FORMAT \"k\", sz \/ K);\n+      st->print(\"%zuk\", sz \/ K);\n@@ -2038,1 +2038,1 @@\n-      st->print(SIZE_FORMAT \"M\", sz \/ M);\n+      st->print(\"%zuM\", sz \/ M);\n@@ -2040,1 +2040,1 @@\n-      st->print(SIZE_FORMAT \"G\", sz \/ G);\n+      st->print(\"%zuG\", sz \/ G);\n@@ -2074,1 +2074,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n@@ -2095,1 +2095,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n@@ -2107,1 +2107,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -171,2 +171,2 @@\n-                                \" units = %d, dsize = \" SIZE_FORMAT \", vlen = \" SIZE_FORMAT \",\"\n-                                \" pad_length = \" SIZE_FORMAT \", size = \" SIZE_FORMAT \", on_c_heap = %s,\"\n+                                \" units = %d, dsize = %zu, vlen = %zu,\"\n+                                \" pad_length = %zu, size = %zu, on_c_heap = %s,\"\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-                          \" os::vm_allocation_granularity = \" SIZE_FORMAT\n-                          \", adjusted size = \" SIZE_FORMAT,\n+                          \" os::vm_allocation_granularity = %zu\"\n+                          \", adjusted size = %zu\",\n@@ -130,1 +130,1 @@\n-                            \" size = \" SIZE_FORMAT,\n+                            \" size = %zu\",\n@@ -181,2 +181,2 @@\n-              \"\\tCapacity = \" SIZE_FORMAT \" bytes\"\n-              \"  Used = \" SIZE_FORMAT \" bytes\"\n+              \"\\tCapacity = %zu bytes\"\n+              \"  Used = %zu bytes\"\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-          \"class %s (in module %s) cannot access class %s (in unnamed module @\" SIZE_FORMAT_X \") because module %s does not read unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in module %s) cannot access class %s (in unnamed module @0x%zx) because module %s does not read unnamed module @0x%zx\",\n@@ -591,1 +591,1 @@\n-          \"class %s (in unnamed module @\" SIZE_FORMAT_X \") cannot access class %s (in module %s) because module %s does not export %s to unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in unnamed module @0x%zx) cannot access class %s (in module %s) because module %s does not export %s to unnamed module @0x%zx\",\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  \/\/ warning(\"Guarding at \" PTR_FORMAT \" for len \" SIZE_FORMAT \"\\n\", low_addr, len);\n+  \/\/ warning(\"Guarding at \" PTR_FORMAT \" for len %zu\\n\", low_addr, len);\n","filename":"src\/hotspot\/share\/runtime\/stackOverflow.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1176,2 +1176,2 @@\n-                               \"bumping in_use_list_ceiling from \" SIZE_FORMAT\n-                               \" to \" SIZE_FORMAT, old_ceiling, new_ceiling);\n+                               \"bumping in_use_list_ceiling from %zu\"\n+                               \" to %zu\", old_ceiling, new_ceiling);\n@@ -1185,2 +1185,2 @@\n-    log_info(monitorinflation)(\"monitors_used=\" SIZE_FORMAT \", ceiling=\" SIZE_FORMAT\n-                               \", monitor_usage=\" SIZE_FORMAT \", threshold=\" INTX_FORMAT,\n+    log_info(monitorinflation)(\"monitors_used=%zu, ceiling=%zu\"\n+                               \", monitor_usage=%zu, threshold=\" INTX_FORMAT,\n@@ -1563,2 +1563,2 @@\n-    ls->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n-                 SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+    ls->print_cr(\"pausing %s: %s=%zu, in_use_list stats: ceiling=\"\n+                 \"%zu, count=%zu, max=%zu\",\n@@ -1575,2 +1575,2 @@\n-    ls->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n-                 \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n+    ls->print_cr(\"resuming %s: in_use_list stats: ceiling=%zu\"\n+                 \", count=%zu, max=%zu\", op_name,\n@@ -1681,1 +1681,1 @@\n-    ls->print_cr(\"begin deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+    ls->print_cr(\"begin deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1703,3 +1703,3 @@\n-        ls->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n-                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+        ls->print_cr(\"before handshaking: unlinked_count=%zu\"\n+                     \", in_use_list stats: ceiling=%zu, count=\"\n+                     \"%zu, max=%zu\",\n@@ -1722,1 +1722,1 @@\n-                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                     \"%zu, count=%zu, max=%zu\",\n@@ -1737,3 +1737,3 @@\n-        ls->print_cr(\"before setting blocked: unlinked_count=\" SIZE_FORMAT\n-                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+        ls->print_cr(\"before setting blocked: unlinked_count=%zu\"\n+                     \", in_use_list stats: ceiling=%zu, count=\"\n+                     \"%zu, max=%zu\",\n@@ -1748,1 +1748,1 @@\n-                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                     \"%zu, count=%zu, max=%zu\",\n@@ -1764,1 +1764,1 @@\n-      ls->print_cr(\"deflated_count=\" SIZE_FORMAT \", {unlinked,deleted}_count=\" SIZE_FORMAT \" monitors in %3.7f secs\",\n+      ls->print_cr(\"deflated_count=%zu, {unlinked,deleted}_count=%zu monitors in %3.7f secs\",\n@@ -1767,1 +1767,1 @@\n-    ls->print_cr(\"end deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+    ls->print_cr(\"end deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1770,1 +1770,1 @@\n-      ls->print_cr(\"ObjectMonitorsHashtable: key_count=\" SIZE_FORMAT \", om_count=\" SIZE_FORMAT,\n+      ls->print_cr(\"ObjectMonitorsHashtable: key_count=%zu, om_count=%zu\",\n@@ -1945,1 +1945,1 @@\n-  out->print_cr(\"count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, l_in_use_count,\n+  out->print_cr(\"count=%zu, max=%zu\", l_in_use_count,\n@@ -1957,2 +1957,2 @@\n-    out->print_cr(\"in_use_count=\" SIZE_FORMAT \" equals ck_in_use_count=\"\n-                  SIZE_FORMAT, l_in_use_count, ck_in_use_count);\n+    out->print_cr(\"in_use_count=%zu equals ck_in_use_count=%zu\",\n+                  l_in_use_count, ck_in_use_count);\n@@ -1960,2 +1960,2 @@\n-    out->print_cr(\"WARNING: in_use_count=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_count=\" SIZE_FORMAT, l_in_use_count,\n+    out->print_cr(\"WARNING: in_use_count=%zu is not equal to \"\n+                  \"ck_in_use_count=%zu\", l_in_use_count,\n@@ -1967,2 +1967,2 @@\n-    out->print_cr(\"in_use_max=\" SIZE_FORMAT \" equals ck_in_use_max=\"\n-                  SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"in_use_max=%zu equals ck_in_use_max=%zu\",\n+                  l_in_use_max, ck_in_use_max);\n@@ -1970,2 +1970,2 @@\n-    out->print_cr(\"WARNING: in_use_max=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_max=\" SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"WARNING: in_use_max=%zu is not equal to \"\n+                  \"ck_in_use_max=%zu\", l_in_use_max, ck_in_use_max);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-    PTR_FORMAT \"-\" PTR_FORMAT \" (\" SIZE_FORMAT \"k).\",\n+    PTR_FORMAT \"-\" PTR_FORMAT \" (%zuk).\",\n@@ -460,1 +460,1 @@\n-      st->print(\"allocated=\" SIZE_FORMAT \"%s \",\n+      st->print(\"allocated=%zu%s \",\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-                           \"Could not allocate \" SIZE_FORMAT \" bytes for argument.\",\n+                           \"Could not allocate %zu bytes for argument.\",\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    jio_snprintf(buf, sizeof(buf), \"HPROF BLOCKSIZE=\" SIZE_FORMAT, _block_size);\n+    jio_snprintf(buf, sizeof(buf), \"HPROF BLOCKSIZE=%zu\", _block_size);\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  tty->print_cr(\"%s count = \" SIZE_FORMAT \" pending_triggers = %d pending_clears = %d\",\n+  tty->print_cr(\"%s count = %zu pending_triggers = %d pending_clears = %d\",\n","filename":"src\/hotspot\/share\/services\/lowMemoryDetector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-    st->print_cr(PTR_FORMAT \" %s %s malloced block starting at \" PTR_FORMAT \", size \" SIZE_FORMAT \", tag %s\",\n+    st->print_cr(PTR_FORMAT \" %s %s malloced block starting at \" PTR_FORMAT \", size %zu, tag %s\",\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-  assert(c1 <= SSIZE_MAX, \"counter out of range: \" SIZE_FORMAT \".\", c1);\n-  assert(c2 <= SSIZE_MAX, \"counter out of range: \" SIZE_FORMAT \".\", c2);\n+  assert(c1 <= SSIZE_MAX, \"counter out of range: %zu.\", c1);\n+  assert(c2 <= SSIZE_MAX, \"counter out of range: %zu.\", c2);\n@@ -55,1 +55,1 @@\n-  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s\",\n+  output()->print(\"reserved=%zu%s, committed=%zu%s\",\n@@ -68,1 +68,1 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s type=%s\", alloc_type,\n+    out->print(\"(%s%zu%s type=%s\", alloc_type,\n@@ -71,1 +71,1 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s\", alloc_type,\n+    out->print(\"(%s%zu%s\", alloc_type,\n@@ -77,1 +77,1 @@\n-    out->print(\" #\" SIZE_FORMAT \"\", count);\n+    out->print(\" #%zu\", count);\n@@ -87,1 +87,1 @@\n-    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+    out->print(\" (peak=%zu%s #%zu)\",\n@@ -94,1 +94,1 @@\n-  output()->print(\"(mmap: reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s)\",\n+  output()->print(\"(mmap: reserved=%zu%s, committed=%zu%s)\",\n@@ -117,1 +117,1 @@\n-  out->print(\"%27s (arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\", \"\",\n+  out->print(\"%27s (arena=%zu%s #%zu)\", \"\",\n@@ -125,1 +125,1 @@\n-    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+    out->print(\" (peak=%zu%s #%zu)\",\n@@ -134,1 +134,1 @@\n-  output()->print(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] %s \" SIZE_FORMAT \"%s\",\n+  output()->print(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] %s %zu%s\",\n@@ -159,1 +159,1 @@\n-  out->print_cr(\"       malloc: \" SIZE_FORMAT \"%s #\" SIZE_FORMAT,\n+  out->print_cr(\"       malloc: %zu%s #%zu\",\n@@ -212,1 +212,1 @@\n-      output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+      output()->print(\", readonly=%zu%s\",\n@@ -220,1 +220,1 @@\n-      out->print_cr(\"%27s (classes #\" SIZE_FORMAT \")\",\n+      out->print_cr(\"%27s (classes #%zu)\",\n@@ -222,1 +222,1 @@\n-      out->print_cr(\"%27s (  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n+      out->print_cr(\"%27s (  instance classes #%zu, array classes #%zu)\",\n@@ -229,1 +229,1 @@\n-        out->print_cr(\"%27s (thread #\" SIZE_FORMAT \")\", \" \", ThreadStackTracker::thread_count());\n+        out->print_cr(\"%27s (thread #%zu)\", \" \", ThreadStackTracker::thread_count());\n@@ -237,2 +237,2 @@\n-        out->print_cr(\"%27s (thread #\" SIZE_FORMAT \")\", \" \", thread_stack_memory->malloc_count());\n-        out->print(\"%27s (Stack: \" SIZE_FORMAT \"%s\", \" \",\n+        out->print_cr(\"%27s (thread #%zu)\", \" \", thread_stack_memory->malloc_count());\n+        out->print(\"%27s (Stack: %zu%s\", \" \",\n@@ -261,1 +261,1 @@\n-      out->print_cr(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s)\", \" \",\n+      out->print_cr(\"%27s (tracking overhead=%zu%s)\", \" \",\n@@ -291,2 +291,2 @@\n-  out->print_cr(\"%27s (    used=\" SIZE_FORMAT \"%s)\", \" \", amount_in_current_scale(stats.used()), scale);\n-  out->print_cr(\"%27s (    waste=\" SIZE_FORMAT \"%s =%2.2f%%)\", \" \", amount_in_current_scale(waste),\n+  out->print_cr(\"%27s (    used=%zu%s)\", \" \", amount_in_current_scale(stats.used()), scale);\n+  out->print_cr(\"%27s (    waste=%zu%s =%2.2f%%)\", \" \", amount_in_current_scale(waste),\n@@ -471,1 +471,1 @@\n-  out->print(\"%s\" SIZE_FORMAT \"%s\", alloc_type, amount_in_current_scale(current_amount), scale);\n+  out->print(\"%s%zu%s\", alloc_type, amount_in_current_scale(current_amount), scale);\n@@ -482,1 +482,1 @@\n-    out->print(\" #\" SIZE_FORMAT \"\", current_count);\n+    out->print(\" #%zu\", current_count);\n@@ -494,1 +494,1 @@\n-  out->print(\"arena=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_amount), scale);\n+  out->print(\"arena=%zu%s\", amount_in_current_scale(current_amount), scale);\n@@ -500,1 +500,1 @@\n-  out->print(\" #\" SIZE_FORMAT \"\", current_count);\n+  out->print(\" #%zu\", current_count);\n@@ -511,1 +511,1 @@\n-  out->print(\"reserved=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_reserved), scale);\n+  out->print(\"reserved=%zu%s\", amount_in_current_scale(current_reserved), scale);\n@@ -517,1 +517,1 @@\n-  out->print(\", committed=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_committed), scale);\n+  out->print(\", committed=%zu%s\", amount_in_current_scale(current_committed), scale);\n@@ -574,1 +574,1 @@\n-      out->print(\"%27s (classes #\" SIZE_FORMAT \"\", \" \", _current_baseline.class_count());\n+      out->print(\"%27s (classes #%zu\", \" \", _current_baseline.class_count());\n@@ -582,1 +582,1 @@\n-      out->print(\"%27s (  instance classes #\" SIZE_FORMAT, \" \", _current_baseline.instance_class_count());\n+      out->print(\"%27s (  instance classes #%zu\", \" \", _current_baseline.instance_class_count());\n@@ -588,1 +588,1 @@\n-      out->print(\", array classes #\" SIZE_FORMAT, _current_baseline.array_class_count());\n+      out->print(\", array classes #%zu\", _current_baseline.array_class_count());\n@@ -598,1 +598,1 @@\n-      out->print(\"%27s (thread #\" SIZE_FORMAT \"\", \" \", _current_baseline.thread_count());\n+      out->print(\"%27s (thread #%zu\", \" \", _current_baseline.thread_count());\n@@ -661,1 +661,1 @@\n-      out->print(\"%27s (tracking overhead=\" SIZE_FORMAT \"%s\", \" \",\n+      out->print(\"%27s (tracking overhead=%zu%s\", \" \",\n@@ -707,1 +707,1 @@\n-  out->print(\"%27s (    used=\" SIZE_FORMAT \"%s\", \" \",\n+  out->print(\"%27s (    used=%zu%s\", \" \",\n@@ -717,1 +717,1 @@\n-  out->print(\"%27s (    waste=\" SIZE_FORMAT \"%s =%2.2f%%\", \" \",\n+  out->print(\"%27s (    waste=%zu%s =%2.2f%%\", \" \",\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  st->print(\"entries: %d (primary: %d, empties: %d), sum bytes: \" SIZE_FORMAT\n+  st->print(\"entries: %d (primary: %d, empties: %d), sum bytes: %zu\"\n@@ -146,1 +146,1 @@\n-      st->print( PTR_FORMAT \"(\" SIZE_FORMAT \") \", p2i(a->payload), a->size);\n+      st->print( PTR_FORMAT \"(%zu) \", p2i(a->payload), a->size);\n","filename":"src\/hotspot\/share\/services\/nmtPreInit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,1 +177,1 @@\n-  log_info(thread, table)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_info(thread, table)(\"Grown to size:%zu\", _current_size);\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-  log_debug(nmt)(\"Add reserved region \\'%s\\' (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n+  log_debug(nmt)(\"Add reserved region \\'%s\\' (\" INTPTR_FORMAT \", %zu)\",\n@@ -381,1 +381,1 @@\n-        log_debug(nmt)(\"CDS reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n+        log_debug(nmt)(\"CDS reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", %zu)\",\n@@ -390,1 +390,1 @@\n-        log_debug(nmt)(\"CDS reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n+        log_debug(nmt)(\"CDS reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", %zu)\",\n@@ -435,1 +435,1 @@\n-    log_debug(nmt)(\"Add committed region \\'%s\\', No reserved region found for  (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n+    log_debug(nmt)(\"Add committed region \\'%s\\', No reserved region found for  (\" INTPTR_FORMAT \", %zu)\",\n@@ -441,1 +441,1 @@\n-  log_debug(nmt)(\"Add committed region \\'%s\\'(\" INTPTR_FORMAT \", \" SIZE_FORMAT \") %s\",\n+  log_debug(nmt)(\"Add committed region \\'%s\\'(\" INTPTR_FORMAT \", %zu) %s\",\n@@ -453,1 +453,1 @@\n-  assert(reserved_rgn != nullptr, \"No reserved region (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\", p2i(addr), size);\n+  assert(reserved_rgn != nullptr, \"No reserved region (\" INTPTR_FORMAT \", %zu)\", p2i(addr), size);\n@@ -457,1 +457,1 @@\n-  log_debug(nmt)(\"Removed uncommitted region \\'%s\\' (\" INTPTR_FORMAT \", \" SIZE_FORMAT \") %s\",\n+  log_debug(nmt)(\"Removed uncommitted region \\'%s\\' (\" INTPTR_FORMAT \", %zu) %s\",\n@@ -469,1 +469,1 @@\n-  log_debug(nmt)(\"Remove uncommitted region \\'%s\\' (\" INTPTR_FORMAT \", \" SIZE_FORMAT \") %s\",\n+  log_debug(nmt)(\"Remove uncommitted region \\'%s\\' (\" INTPTR_FORMAT \", %zu) %s\",\n@@ -477,1 +477,1 @@\n-  log_debug(nmt)(\"Removed region \\'%s\\' (\" INTPTR_FORMAT \", \" SIZE_FORMAT \") from _resvered_regions %s\" ,\n+  log_debug(nmt)(\"Removed region \\'%s\\' (\" INTPTR_FORMAT \", %zu) from _resvered_regions %s\" ,\n@@ -491,1 +491,1 @@\n-    log_debug(nmt)(\"No reserved region found for (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")!\",\n+    log_debug(nmt)(\"No reserved region found for (\" INTPTR_FORMAT \", %zu)!\",\n@@ -567,1 +567,1 @@\n-  log_debug(nmt)(\"Split region \\'%s\\' (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")  with size \" SIZE_FORMAT,\n+  log_debug(nmt)(\"Split region \\'%s\\' (\" INTPTR_FORMAT \", %zu)  with size %zu\",\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  if (sscanf(arg, SIZE_FORMAT, &value) == 1) {\n+  if (sscanf(arg, \"%zu\", &value) == 1) {\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-         \"out of bounds: \" SIZE_FORMAT, size_in_bits);\n+         \"out of bounds: %zu\", size_in_bits);\n@@ -157,1 +157,1 @@\n-         \"BitMap index out of bounds: \" SIZE_FORMAT \" >= \" SIZE_FORMAT,\n+         \"BitMap index out of bounds: %zu >= %zu\",\n@@ -163,1 +163,1 @@\n-         \"BitMap limit out of bounds: \" SIZE_FORMAT \" > \" SIZE_FORMAT,\n+         \"BitMap limit out of bounds: %zu > %zu\",\n@@ -169,1 +169,1 @@\n-         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, beg, end);\n+         \"BitMap range error: %zu > %zu\", beg, end);\n@@ -666,1 +666,1 @@\n-  st->print(\"Bitmap (\" SIZE_FORMAT \" bits):\", size());\n+  st->print(\"Bitmap (%zu bits):\", size());\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    assert(i < size(), \"IOOBE i: \" SIZE_FORMAT \" size(): \" SIZE_FORMAT, i, size());\n+    assert(i < size(), \"IOOBE i: %zu size(): %zu\", i, size());\n","filename":"src\/hotspot\/share\/utilities\/chunkedList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-           \"incorrect element size: \" SIZE_FORMAT, elem_size);\n+           \"incorrect element size: %zu\", elem_size);\n@@ -76,1 +76,1 @@\n-           \"byte_count \" SIZE_FORMAT \" must be multiple of element size \" SIZE_FORMAT, byte_count, elem_size);\n+           \"byte_count %zu must be multiple of element size %zu\", byte_count, elem_size);\n@@ -199,1 +199,1 @@\n-    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size \" SIZE_FORMAT \"\\n\", elem_size);\n+    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size %zu\\n\", elem_size);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1863,1 +1863,1 @@\n-        DWARF_LOG_ERROR(\"Tried to read \" SIZE_FORMAT \" bytes but exceeded buffer size of \" SIZE_FORMAT \". Truncating string.\",\n+        DWARF_LOG_ERROR(\"Tried to read %zu bytes but exceeded buffer size of %zu. Truncating string.\",\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-    assert(false, \"bad length? (\" SIZE_FORMAT \")\", len);\n+    assert(false, \"bad length? (%zu)\", len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-               \" bytes, each \" SIZE_FORMAT,\n+               \" bytes, each %zu\",\n@@ -140,1 +140,1 @@\n-               \" bytes, each \" SIZE_FORMAT,\n+               \" bytes, each %zu\",\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -212,2 +212,2 @@\n-    st->print_cr(\"Current Stack Pointer: \" PTR_FORMAT \" alloca \" SIZE_FORMAT\n-                 \" of \" SIZE_FORMAT \" bytes available unguarded stack space\",\n+    st->print_cr(\"Current Stack Pointer: \" PTR_FORMAT \" alloca %zu\"\n+                 \" of %zu bytes available unguarded stack space\",\n@@ -824,1 +824,1 @@\n-          jio_snprintf(buf, sizeof(buf), SIZE_FORMAT, _size);\n+          jio_snprintf(buf, sizeof(buf), \"%zu\", _size);\n@@ -991,1 +991,1 @@\n-      st->print(\",  free space=\" SIZE_FORMAT \"k\", free_stack_size);\n+      st->print(\",  free space=%zuk\", free_stack_size);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -267,0 +267,1 @@\n+  check_format(\"%zd\",                  (ssize_t)123,      \"123\");\n@@ -268,0 +269,1 @@\n+  check_format(\"%zd\",                  (ssize_t)-123,     \"-123\");\n@@ -277,0 +279,1 @@\n+  check_format(\"%zu\",                  (size_t)123u,      \"123\");\n@@ -283,0 +286,1 @@\n+  check_format(\"%zd\",                  (intx)123,         \"123\");\n@@ -288,0 +292,1 @@\n+  check_format(\"%zu\",                  (uintx)123,        \"123\");\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}