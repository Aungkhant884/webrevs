{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+.base {\n+  font: 14px sans-serif;\n+  font-size: 14;\n+}\n+\n+.bigger {\n+  font-weight: bold;\n+  font-size: 150%;\n+}\n+\n+.smaller {\n+  font-style: italic;\n+  font-size: 85%;\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/TestExternalCSSFontSize.css","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+  <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\n+  <title>JDK-8292948: JEditorPane ignores font-size styles in external linked css-file<\/title>\n+  <link rel=\"stylesheet\" href=\"TestExternalCSSFontSize.css\" type=\"text\/css\">\n+<\/head>\n+<body>\n+\n+<div class=\"base\">\n+\n+  <p class=\"bigger\">Bigger text (21)<\/p>\n+\n+  <p>Normal size text (14)<\/p>\n+\n+  <p class=\"smaller\">Smaller text (12)<\/p>\n+\n+<\/div>\n+\n+<\/body>\n+<\/html>\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/TestExternalCSSFontSize.html","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.GlyphView;\n+import javax.swing.text.View;\n+\n+\/*\n+ * @test\n+ * @bug 8292948\n+ * @summary  Tests font-size declarations from external style sheet.\n+ * @run main TestExternalCSSFontSize\n+ *\/\n+public class TestExternalCSSFontSize {\n+\n+    private static final int[] expectedFontSizes = { 21, 14, 12 };\n+\n+    private JEditorPane editor;\n+\n+    private volatile Throwable failure;\n+\n+    TestExternalCSSFontSize() {}\n+\n+    CountDownLatch setUp() throws Exception {\n+        File htmlFile = new File(\"TestExternalCSSFontSize.html\");\n+        if (!htmlFile.exists()) {\n+            throw new FileNotFoundException(htmlFile.getAbsolutePath());\n+        }\n+\n+        CountDownLatch finishLatch = new CountDownLatch(1);\n+        editor = new JEditorPane();\n+        editor.setContentType(\"text\/html\");\n+        editor.addPropertyChangeListener(\"page\", evt -> {\n+            System.out.append(\"loaded: \").println(evt.getNewValue());\n+            try {\n+                run();\n+            } catch (Throwable e) {\n+                failure = e;\n+            } finally {\n+                finishLatch.countDown();\n+            }\n+        });\n+        editor.setPage(htmlFile.toURI().toURL());\n+        return finishLatch;\n+    }\n+\n+    void run() {\n+        editor.setSize(editor.getPreferredSize()); \/\/ Do lay out text\n+\n+        scanFontSizes(editor.getUI().getRootView(editor), 0);\n+    }\n+\n+    private int scanFontSizes(View view, int branchIndex) {\n+        int currentIndex = branchIndex;\n+        for (int i = 0; i < view.getViewCount(); i++) {\n+            View child = view.getView(i);\n+            if (child instanceof GlyphView) {\n+                if (child.getElement()\n+                        .getAttributes().getAttribute(\"CR\") == Boolean.TRUE) {\n+                    continue;\n+                }\n+                assertFontSize((GlyphView) child, currentIndex++);\n+            } else {\n+                currentIndex = scanFontSizes(child, currentIndex);\n+            }\n+        }\n+        return currentIndex;\n+    }\n+\n+    private void assertFontSize(GlyphView child, int index) {\n+        printSource(child);\n+        if (index >= expectedFontSizes.length) {\n+            throw new AssertionError(\"unexpected text run #\"\n+                    + index + \" (>= \" + expectedFontSizes.length + \")\");\n+        }\n+\n+        int actualFontSize = child.getFont().getSize();\n+        if (actualFontSize != expectedFontSizes[index]) {\n+            throw new AssertionError(\"font size expected [\"\n+                    + expectedFontSizes[index] + \"] but found [\" + actualFontSize +\"]\");\n+        }\n+    }\n+\n+    private void printSource(View textRun) {\n+        try {\n+            editor.getEditorKit().write(System.out,\n+                    editor.getDocument(), textRun.getStartOffset(),\n+                    textRun.getEndOffset() - textRun.getStartOffset());\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    void start() throws Throwable {\n+        AtomicReference<CountDownLatch> finishLatch = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                finishLatch.set(setUp());\n+            } catch (Throwable e) {\n+                failure = e;\n+            }\n+        });\n+\n+        if (finishLatch.get() != null\n+                && !finishLatch.get().await(5, TimeUnit.SECONDS)\n+                && failure == null) {\n+            throw new IllegalStateException(\"page loading timed out\");\n+        }\n+\n+        if (failure != null) {\n+            throw failure;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        TestExternalCSSFontSize test = new TestExternalCSSFontSize();\n+        boolean success = false;\n+        try {\n+            test.start();\n+            success = true;\n+        } finally {\n+            if (!success && test.editor != null) {\n+                SwingUtilities.invokeAndWait(() -> captureImage(test.editor, \"-failure\"));\n+            } else if (hasOpt(args, \"-capture\")) {\n+                SwingUtilities.invokeAndWait(() -> captureImage(test.editor, \"-success\"));\n+            }\n+        }\n+    }\n+\n+    private static boolean hasOpt(String[] args, String opt) {\n+        return Arrays.asList(args).contains(opt);\n+    }\n+\n+    static void captureImage(Component comp, String suffix) {\n+        try {\n+            BufferedImage capture = new BufferedImage(comp.getWidth(),\n+                                comp.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+            Graphics g = capture.getGraphics();\n+            comp.paint(g);\n+            g.dispose();\n+\n+            ImageIO.write(capture, \"png\",\n+                    new File(TestExternalCSSFontSize.class\n+                                .getSimpleName() + suffix + \".png\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/TestExternalCSSFontSize.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}