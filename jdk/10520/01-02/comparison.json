{"files":[{"patch":"@@ -437,8 +437,1 @@\n-     * randomness.  All permutations occur with equal likelihood\n-     * assuming that the source of randomness is fair.<p>\n-     *\n-     * This implementation traverses the list backwards, from the last element\n-     * up to the second, repeatedly swapping a randomly selected element into\n-     * the \"current position\".  Elements are randomly selected from the\n-     * portion of the list that runs from the first element to the current\n-     * position, inclusive.<p>\n+     * randomness.<p>\n@@ -446,6 +439,4 @@\n-     * This method runs in linear time.  If the specified list does not\n-     * implement the {@link RandomAccess} interface and is large, this\n-     * implementation dumps the specified list into an array before shuffling\n-     * it, and dumps the shuffled array back into the list.  This avoids the\n-     * quadratic behavior that would result from shuffling a \"sequential\n-     * access\" list in place.\n+     * This method is equivalent to {@link #shuffle(List, RandomGenerator)}\n+     * and exists for backward compatibility. The {@link #shuffle(List, RandomGenerator)}\n+     * method is preferred, as it is not limited to random generators\n+     * that extend the {@link Random} class.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.Consumer;\n@@ -36,1 +37,0 @@\n-import java.util.random.RandomGeneratorFactory;\n@@ -59,2 +59,3 @@\n-        checkRandom(list);\n-        checkRandomGenerator(list);\n+        checkRandom(list, l -> Collections.shuffle(l, new Random(1)));\n+        RandomGenerator.JumpableGenerator generator = RandomGenerator.JumpableGenerator.of(\"Xoshiro256PlusPlus\");\n+        checkRandom(list, l -> Collections.shuffle(l, generator.copy()));\n@@ -63,2 +64,1 @@\n-    private static void checkRandomGenerator(List<Integer> list) {\n-        RandomGeneratorFactory<RandomGenerator> factory = RandomGeneratorFactory.getDefault();\n+    private static void checkRandom(List<Integer> list, Consumer<List<?>> randomizer) {\n@@ -66,1 +66,1 @@\n-        Collections.shuffle(list, factory.create(1));\n+        randomizer.accept(list);\n@@ -73,16 +73,1 @@\n-        Collections.shuffle(list, factory.create(1));\n-        if (!list.equals(copy)) {\n-            throw new RuntimeException(list.getClass() + \": \" + list + \" != \" + copy);\n-        }\n-    }\n-\n-    private static void checkRandom(List<Integer> list) {\n-        list.sort(null);\n-        Collections.shuffle(list, new Random(1));\n-        ArrayList<Integer> copy = new ArrayList<>(list);\n-        list.sort(null);\n-        if (list.equals(copy)) {\n-            \/\/ Assume that at least one pair of elements must be reordered during shuffle\n-            throw new RuntimeException(list.getClass() + \": list is not shuffled\");\n-        }\n-        Collections.shuffle(list, new Random(1));\n+        randomizer.accept(list);\n","filename":"test\/jdk\/java\/util\/Collections\/Shuffle.java","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"}]}