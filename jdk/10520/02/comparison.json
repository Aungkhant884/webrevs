{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.random.RandomGenerator;\n@@ -434,0 +435,18 @@\n+    \/**\n+     * Randomly permute the specified list using the specified source of\n+     * randomness.<p>\n+     *\n+     * This method is equivalent to {@link #shuffle(List, RandomGenerator)}\n+     * and exists for backward compatibility. The {@link #shuffle(List, RandomGenerator)}\n+     * method is preferred, as it is not limited to random generators\n+     * that extend the {@link Random} class.\n+     *\n+     * @param  list the list to be shuffled.\n+     * @param  rnd the source of randomness to use to shuffle the list.\n+     * @throws UnsupportedOperationException if the specified list or its\n+     *         list-iterator does not support the {@code set} operation.\n+     *\/\n+    public static void shuffle(List<?> list, Random rnd) {\n+        shuffle(list, (RandomGenerator) rnd);\n+    }\n+\n@@ -456,0 +475,1 @@\n+     * @since 20\n@@ -458,1 +478,1 @@\n-    public static void shuffle(List<?> list, Random rnd) {\n+    public static void shuffle(List<?> list, RandomGenerator rnd) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8294693\n+ * @summary Basic test for Collections.shuffle\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.random.RandomGenerator;\n+\n+public class Shuffle {\n+    static final int N = 100;\n+\n+    public static void main(String[] args) {\n+        test(new ArrayList<>());\n+        test(new LinkedList<>());\n+    }\n+\n+    static void test(List<Integer> list) {\n+        for (int i = 0; i < N; i++) {\n+            list.add(i);\n+        }\n+        Collections.shuffle(list);\n+        if (list.size() != N) {\n+            throw new RuntimeException(list.getClass() + \": size \" + list.size() + \" != \" + N);\n+        }\n+        for (int i = 0; i < N; i++) {\n+            if (!list.contains(i)) {\n+                throw new RuntimeException(list.getClass() + \": does not contain \" + i);\n+            }\n+        }\n+        checkRandom(list, l -> Collections.shuffle(l, new Random(1)));\n+        RandomGenerator.JumpableGenerator generator = RandomGenerator.JumpableGenerator.of(\"Xoshiro256PlusPlus\");\n+        checkRandom(list, l -> Collections.shuffle(l, generator.copy()));\n+    }\n+\n+    private static void checkRandom(List<Integer> list, Consumer<List<?>> randomizer) {\n+        list.sort(null);\n+        randomizer.accept(list);\n+        ArrayList<Integer> copy = new ArrayList<>(list);\n+        list.sort(null);\n+        if (list.equals(copy)) {\n+            \/\/ Assume that at least one pair of elements must be reordered during shuffle\n+            throw new RuntimeException(list.getClass() + \": list is not shuffled\");\n+        }\n+        randomizer.accept(list);\n+        if (!list.equals(copy)) {\n+            throw new RuntimeException(list.getClass() + \": \" + list + \" != \" + copy);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Collections\/Shuffle.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}