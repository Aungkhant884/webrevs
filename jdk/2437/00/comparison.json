{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import javax.lang.model.type.ArrayType;\n@@ -39,1 +38,0 @@\n-import javax.lang.model.type.TypeVariable;\n@@ -100,1 +98,2 @@\n-        return writer.getDocLink(MEMBER_DEPRECATED_PREVIEW, utils.getEnclosingTypeElement(member), member, content);\n+        return writer.getDocLink(MEMBER_DEPRECATED_PREVIEW, utils.getEnclosingTypeElement(member),\n+                member, content, false);\n@@ -116,1 +115,1 @@\n-                writer.getDocLink(context, te, ee, name(ee), false));\n+                writer.getDocLink(context, te, ee, name(ee)));\n@@ -131,1 +130,1 @@\n-        linksTree.add(writer.getDocLink(MEMBER, te, member, name(member), false));\n+        linksTree.add(writer.getDocLink(MEMBER, te, member, name(member)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-                writer.getDocLink(context, member, name(member), false));\n+                writer.getDocLink(context, member, name(member)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,1 +240,1 @@\n-                member, member.getSimpleName(), false);\n+                member, member.getSimpleName());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-                writer.getDocLink(context, member, name(member), false));\n+                writer.getDocLink(context, member, name(member)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-                LinkInfoImpl.Kind.MEMBER, typeElement, false);\n+                LinkInfoImpl.Kind.MEMBER, typeElement);\n@@ -187,1 +187,1 @@\n-                writer.getDocLink(context, typeElement , member, name(member), false));\n+                writer.getDocLink(context, typeElement , member, name(member)));\n@@ -195,2 +195,1 @@\n-                writer.getDocLink(LinkInfoImpl.Kind.MEMBER, typeElement, member,\n-                name(member), false));\n+                writer.getDocLink(LinkInfoImpl.Kind.MEMBER, typeElement, member, name(member)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -766,1 +766,1 @@\n-        return factory.getTypeParameterLinks(linkInfo, false);\n+        return factory.getTypeParameterLinks(linkInfo);\n@@ -856,1 +856,0 @@\n-     * @param isStrong true if the link should be strong.\n@@ -859,2 +858,1 @@\n-    public Content getPreQualifiedClassLink(LinkInfoImpl.Kind context,\n-            TypeElement typeElement, boolean isStrong) {\n+    public Content getPreQualifiedClassLink(LinkInfoImpl.Kind context, TypeElement typeElement) {\n@@ -867,1 +865,1 @@\n-                context, typeElement).label(utils.getSimpleName(typeElement)).strong(isStrong)));\n+                context, typeElement).label(utils.getSimpleName(typeElement))));\n@@ -937,1 +935,1 @@\n-                new StringContent(label));\n+                new StringContent(label), false);\n@@ -944,0 +942,3 @@\n+     * @param typeElement the typeElement that we should link to. This is not\n+     *            not necessarily the type containing element since we may be\n+     *            inheriting comments.\n@@ -946,1 +947,0 @@\n-     * @param strong true if the link should be strong.\n@@ -949,3 +949,3 @@\n-    public Content getDocLink(LinkInfoImpl.Kind context, Element element, CharSequence label,\n-            boolean strong) {\n-        return getDocLink(context, utils.getEnclosingTypeElement(element), element, label, strong);\n+    public Content getDocLink(LinkInfoImpl.Kind context, TypeElement typeElement, Element element,\n+                              CharSequence label) {\n+        return getDocLink(context, typeElement, element, label, false);\n@@ -958,3 +958,3 @@\n-     * @param typeElement the typeElement that we should link to.  This is not\n-                 necessarily equal to element.containingClass().  We may be\n-                 inheriting comments.\n+     * @param typeElement the typeElement that we should link to. This is not\n+     *            not necessarily the type containing element since we may be\n+     *            inheriting comments.\n@@ -963,1 +963,0 @@\n-     * @param strong true if the link should be strong.\n@@ -967,7 +966,2 @@\n-            CharSequence label, boolean strong) {\n-        return getDocLink(context, typeElement, element, label, strong, false);\n-    }\n-\n-    public Content getDocLink(LinkInfoImpl.Kind context, TypeElement typeElement, Element element,\n-            Content label, boolean strong) {\n-        return getDocLink(context, typeElement, element, label, strong, false);\n+                              CharSequence label, boolean isProperty) {\n+        return getDocLink(context, typeElement, element, new StringContent(label), isProperty);\n@@ -980,3 +974,3 @@\n-     * @param typeElement the typeElement that we should link to.  This is not\n-                 necessarily equal to element.containingClass().  We may be\n-                 inheriting comments.\n+     * @param typeElement the typeElement that we should link to. This is not\n+     *            not necessarily the type containing element since we may be\n+     *            inheriting comments.\n@@ -985,1 +979,0 @@\n-     * @param strong true if the link should be strong.\n@@ -990,6 +983,1 @@\n-            CharSequence label, boolean strong, boolean isProperty) {\n-        return getDocLink(context, typeElement, element, new StringContent(label), strong, isProperty);\n-    }\n-\n-    public Content getDocLink(LinkInfoImpl.Kind context, TypeElement typeElement, Element element,\n-            Content label, boolean strong, boolean isProperty) {\n+            Content label, boolean isProperty) {\n@@ -1006,2 +994,1 @@\n-                .targetMember(element)\n-                .strong(strong));\n+                .targetMember(element));\n@@ -1014,2 +1001,1 @@\n-                .targetMember(element)\n-                .strong(strong));\n+                .targetMember(element));\n@@ -1021,31 +1007,0 @@\n-    \/**\n-     * Return the link for the given member.\n-     *\n-     * @param context the id of the context where the link will be added\n-     * @param typeElement the typeElement that we should link to.  This is not\n-                 necessarily equal to element.containingClass().  We may be\n-                 inheriting comments\n-     * @param element the member being linked to\n-     * @param label the label for the link\n-     * @return the link for the given member\n-     *\/\n-    public Content getDocLink(LinkInfoImpl.Kind context, TypeElement typeElement, Element element,\n-            Content label) {\n-        if (!(utils.isIncluded(element) || utils.isLinkable(typeElement))) {\n-            return label;\n-        } else if (utils.isExecutableElement(element)) {\n-            ExecutableElement emd = (ExecutableElement) element;\n-            return getLink(new LinkInfoImpl(configuration, context, typeElement)\n-                    .label(label)\n-                    .where(htmlIds.forMember(emd).name())\n-                    .targetMember(element));\n-        } else if (utils.isVariableElement(element) || utils.isTypeElement(element)) {\n-            return getLink(new LinkInfoImpl(configuration, context, typeElement)\n-                    .label(label)\n-                    .where(element.getSimpleName().toString())\n-                    .targetMember(element));\n-        } else {\n-            return label;\n-        }\n-    }\n-\n@@ -1903,2 +1858,1 @@\n-                    annotation.add(getDocLink(LinkInfoImpl.Kind.ANNOTATION,\n-                                                     element, simpleName, false));\n+                    annotation.add(getDocLink(LinkInfoImpl.Kind.ANNOTATION, element, simpleName));\n@@ -2018,2 +1972,1 @@\n-                return getDocLink(LinkInfoImpl.Kind.ANNOTATION,\n-                        c, c.getSimpleName(), false);\n+                return getDocLink(LinkInfoImpl.Kind.ANNOTATION, c, c.getSimpleName());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":23,"deletions":70,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,2 @@\n-                        getDocLink(LinkInfoImpl.Kind.INDEX, containingType, element, new StringContent(label))));\n+                        getDocLink(LinkInfoImpl.Kind.INDEX, containingType, element,\n+                                new StringContent(label), false)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -81,1 +80,0 @@\n-        boolean noLabel = linkInfo.label == null || linkInfo.label.isEmpty();\n@@ -124,3 +122,0 @@\n-                        if (noLabel && !classLinkInfo.excludeTypeParameterLinks) {\n-                            link.add(getTypeParameterLinks(linkInfo));\n-                        }\n@@ -143,3 +138,0 @@\n-                if (noLabel && !classLinkInfo.excludeTypeParameterLinks) {\n-                    link.add(getTypeParameterLinks(linkInfo));\n-                }\n@@ -154,3 +146,0 @@\n-        if (noLabel && !classLinkInfo.excludeTypeParameterLinks) {\n-            link.add(getTypeParameterLinks(linkInfo));\n-        }\n@@ -161,1 +150,1 @@\n-    protected Content getTypeParameterLinks(LinkInfo linkInfo, boolean isClassLabel) {\n+    protected Content getTypeParameterLinks(LinkInfo linkInfo) {\n@@ -179,2 +168,1 @@\n-        if (((linkInfo.includeTypeInClassLinkLabel && isClassLabel)\n-                || (linkInfo.includeTypeAsSepLink && !isClassLabel)) && !vars.isEmpty()) {\n+        if (!vars.isEmpty()) {\n@@ -287,5 +275,0 @@\n-        if (linkInfo.context == LinkInfoImpl.Kind.PACKAGE_FRAME) {\n-            \/\/Not really necessary to do this but we want to be consistent\n-            \/\/with 1.4.2 output.\n-            return docPaths.forName(linkInfo.typeElement);\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkFactoryImpl.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -111,5 +111,0 @@\n-        \/**\n-         * Indicate that the link appears in a class list.\n-         *\/\n-        PACKAGE_FRAME,\n-\n@@ -249,1 +244,2 @@\n-    public  final Utils utils;\n+    public final Utils utils;\n+\n@@ -365,1 +361,0 @@\n-        \/\/NOTE:  Put context specific link code here.\n@@ -367,9 +362,0 @@\n-            case PACKAGE_FRAME:\n-            case IMPLEMENTED_CLASSES:\n-            case SUBCLASSES:\n-            case EXECUTABLE_ELEMENT_COPY:\n-            case PROPERTY_COPY:\n-            case CLASS_USE_HEADER:\n-                includeTypeInClassLinkLabel = false;\n-                break;\n-\n@@ -377,4 +363,0 @@\n-                excludeTypeParameterLinks = true;\n-                excludeTypeBounds = true;\n-                break;\n-\n@@ -390,2 +372,0 @@\n-                includeTypeInClassLinkLabel = false;\n-                includeTypeAsSepLink = true;\n@@ -400,7 +380,0 @@\n-                includeTypeAsSepLink = true;\n-                includeTypeInClassLinkLabel = false;\n-                break;\n-\n-            case MEMBER_TYPE_PARAMS:\n-                includeTypeAsSepLink = true;\n-                includeTypeInClassLinkLabel = false;\n@@ -417,5 +390,0 @@\n-        if (type != null &&\n-            utils.isTypeVariable(type) &&\n-            utils.isExecutableElement(utils.asTypeElement(type).getEnclosingElement())) {\n-                excludeTypeParameterLinks = true;\n-        }\n@@ -436,0 +404,27 @@\n+    @Override\n+    public boolean includeTypeParameterLinks() {\n+        return switch (context) {\n+            case IMPLEMENTED_INTERFACES,\n+                 SUPER_INTERFACES,\n+                 SUBINTERFACES,\n+                 CLASS_TREE_PARENT,\n+                 TREE,\n+                 CLASS_SIGNATURE_PARENT_NAME,\n+                 PERMITTED_SUBCLASSES,\n+                 PACKAGE,\n+                 CLASS_USE,\n+                 CLASS_HEADER,\n+                 CLASS_SIGNATURE,\n+                 RECEIVER_TYPE,\n+                 MEMBER_TYPE_PARAMS -> true;\n+\n+            case IMPLEMENTED_CLASSES,\n+                 SUBCLASSES,\n+                 EXECUTABLE_ELEMENT_COPY,\n+                 PROPERTY_COPY,\n+                 CLASS_USE_HEADER -> false;\n+\n+            default -> label == null || label.isEmpty();\n+        };\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkInfoImpl.java","additions":29,"deletions":34,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -157,2 +157,1 @@\n-                                : utils.getFullyQualifiedName(holder),\n-                            false);\n+                                : utils.getFullyQualifiedName(holder));\n@@ -217,1 +216,1 @@\n-                LinkInfoImpl.Kind.MEMBER, typeElement, false);\n+                LinkInfoImpl.Kind.MEMBER, typeElement);\n@@ -331,1 +330,1 @@\n-                    implementedMeth.getSimpleName(), false);\n+                    implementedMeth.getSimpleName());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -104,2 +104,1 @@\n-        Content classLink = writer.getPreQualifiedClassLink(\n-                LinkInfoImpl.Kind.MEMBER, typeElement, false);\n+        Content classLink = writer.getPreQualifiedClassLink(LinkInfoImpl.Kind.MEMBER, typeElement);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,2 +118,1 @@\n-                                ? holder.getSimpleName() : holder.getQualifiedName(),\n-                            false);\n+                                ? holder.getSimpleName() : holder.getQualifiedName());\n@@ -171,1 +170,1 @@\n-                LinkInfoImpl.Kind.MEMBER, typeElement, false);\n+                LinkInfoImpl.Kind.MEMBER, typeElement);\n@@ -197,1 +196,0 @@\n-                false,\n@@ -208,2 +206,1 @@\n-                utils.isProperty(mname) ? utils.getPropertyName(mname) : mname,\n-                false, true);\n+                utils.isProperty(mname) ? utils.getPropertyName(mname) : mname, true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-                ? htmlWriter.getDocLink(LinkInfoImpl.Kind.VALUE_TAG, field, constantVal, false)\n+                ? htmlWriter.getDocLink(LinkInfoImpl.Kind.VALUE_TAG, field, constantVal)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-import javax.lang.model.util.SimpleTypeVisitor9;\n-import jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl;\n+import javax.lang.model.util.SimpleTypeVisitor14;\n@@ -60,1 +59,1 @@\n-     * Return an empty instance of a content object.\n+     * Returns an empty instance of a content object.\n@@ -74,2 +73,1 @@\n-            SimpleTypeVisitor9<Content, LinkInfo> linkVisitor =\n-                    new SimpleTypeVisitor9<Content, LinkInfo>() {\n+            SimpleTypeVisitor14<Content, LinkInfo> linkVisitor = new SimpleTypeVisitor14<>() {\n@@ -77,2 +75,1 @@\n-                TypeMirror componentType = utils.getComponentType(linkInfo.type);\n-                Content link = newContent();\n+                final Content link = newContent();\n@@ -112,1 +109,0 @@\n-                    linkInfo.isTypeBound = true;\n@@ -133,1 +129,0 @@\n-                    linkInfo.isTypeBound = true;\n@@ -135,1 +130,1 @@\n-                            ? (TypeVariable) componentType\n+                            ? (TypeVariable) utils.getComponentType(type)\n@@ -138,1 +133,1 @@\n-                    if ((!linkInfo.excludeTypeParameterLinks) && utils.isTypeElement(owner)) {\n+                    if (!linkInfo.excludeTypeParameterLinks && utils.isTypeElement(owner)) {\n@@ -174,4 +169,4 @@\n-                    if (linkInfo.isTypeBound && linkInfo.excludeTypeBoundsLinks) {\n-                        \/\/ Since we are excluding type parameter links, we should not\n-                        \/\/ be linking to the type bound.\n-                        link.add(utils.getTypeName(type, false));\n+                    link.add(getTypeAnnotationLinks(linkInfo));\n+                    linkInfo.typeElement = utils.asTypeElement(type);\n+                    link.add(getClassLink(linkInfo));\n+                    if (linkInfo.includeTypeParameterLinks()) {\n@@ -179,9 +174,0 @@\n-                        return link;\n-                    } else {\n-                        link = newContent();\n-                        link.add(getTypeAnnotationLinks(linkInfo));\n-                        linkInfo.typeElement = utils.asTypeElement(type);\n-                        link.add(getClassLink(linkInfo));\n-                        if (linkInfo.includeTypeAsSepLink) {\n-                            link.add(getTypeParameterLinks(linkInfo, false));\n-                        }\n@@ -196,2 +182,2 @@\n-            if (linkInfo.includeTypeAsSepLink) {\n-                link.add(getTypeParameterLinks(linkInfo, false));\n+            if (linkInfo.includeTypeParameterLinks()) {\n+                link.add(getTypeParameterLinks(linkInfo));\n@@ -216,1 +202,0 @@\n-     *\n@@ -224,3 +209,1 @@\n-     * @param linkInfo     the information about the link to construct\n-     * @param isClassLabel true if this is a class label, or false if it is\n-     *                     the type parameters portion of the link\n+     * @param linkInfo the information about the link to construct\n@@ -229,1 +212,1 @@\n-    protected abstract Content getTypeParameterLinks(LinkInfo linkInfo, boolean isClassLabel);\n+    protected abstract Content getTypeParameterLinks(LinkInfo linkInfo);\n@@ -232,1 +215,1 @@\n-     * Returns links to the type parameters.\n+     * Returns links to the type annotations.\n@@ -234,2 +217,2 @@\n-     * @param linkInfo     the information about the link to construct\n-     * @return the links to the type parameters.\n+     * @param linkInfo the information about the link to construct\n+     * @return the links to the type annotations\n@@ -237,4 +220,0 @@\n-    public Content getTypeParameterLinks(LinkInfo linkInfo) {\n-        return getTypeParameterLinks(linkInfo, true);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkFactory.java","additions":17,"deletions":38,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,5 +67,0 @@\n-    \/**\n-     * Set this to true to indicate that you are linking to a type parameter.\n-     *\/\n-    public boolean isTypeBound = false;\n-\n@@ -82,10 +77,0 @@\n-    \/**\n-     * True if we should include the type in the link label.  False otherwise.\n-     *\/\n-    public boolean includeTypeInClassLinkLabel = true;\n-\n-    \/**\n-     * True if we should include the type as separate link.  False otherwise.\n-     *\/\n-    public boolean includeTypeAsSepLink = false;\n-\n@@ -102,5 +87,0 @@\n-    \/**\n-     * True if we should print the type bounds, but not link them.\n-     *\/\n-    public boolean excludeTypeBoundsLinks = false;\n-\n@@ -119,1 +99,1 @@\n-     * Return an empty instance of a content object.\n+     * Returns an empty instance of a content object.\n@@ -126,1 +106,1 @@\n-     * Return true if this link is linkable and false if we can't link to the\n+     * Returns true if this link is linkable and false if we can't link to the\n@@ -134,0 +114,8 @@\n+    \/**\n+     * Returns true if links to declared types should include links to the\n+     * type parameters.\n+     *\n+     * @return true if type parameter links should be included\n+     *\/\n+    public abstract boolean includeTypeParameterLinks();\n+\n@@ -160,1 +148,0 @@\n-                \", isTypeBound=\" + isTypeBound +\n@@ -163,2 +150,0 @@\n-                \", includeTypeInClassLinkLabel=\" + includeTypeInClassLinkLabel +\n-                \", includeTypeAsSepLink=\" + includeTypeAsSepLink +\n@@ -167,1 +152,0 @@\n-                \", excludeTypeBoundsLinks=\" + excludeTypeBoundsLinks +\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkInfo.java","additions":11,"deletions":27,"binary":false,"changes":38,"status":"modified"}]}