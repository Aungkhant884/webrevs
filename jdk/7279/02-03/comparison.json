{"files":[{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.stream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.math.BigInteger;\n+import java.util.SplittableRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * Benchmark for checking Pattern::splitAsStream performance\n+ * with CPU-bound downstream operation in sequential and parallel streams\n+ *\n+ * See JDK-8280915\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+@State(Scope.Thread)\n+public class PatternSplit {\n+    @Param({\"10\", \"100\", \"1000\", \"10000\"})\n+    private int size;\n+\n+    private String input;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\",\");\n+\n+    @Setup\n+    public void setup() {\n+        input = new SplittableRandom(1).ints(size, 1000, 2000)\n+                .mapToObj(String::valueOf).collect(Collectors.joining(\",\"));\n+    }\n+\n+    @Benchmark\n+    public BigInteger sumOf1000thPowers() {\n+        return PATTERN.splitAsStream(input).map(BigInteger::new).map(v -> v.pow(1000))\n+                .reduce(BigInteger.ZERO, BigInteger::add);\n+    }\n+\n+    @Benchmark\n+    public BigInteger sumOf1000thPowersParallel() {\n+        return PATTERN.splitAsStream(input).parallel().map(BigInteger::new).map(v -> v.pow(1000))\n+                .reduce(BigInteger.ZERO, BigInteger::add);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/PatternSplit.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}