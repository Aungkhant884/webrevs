{"files":[{"patch":"@@ -33,3 +33,1 @@\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collector;\n@@ -106,4 +104,4 @@\n-        checkUsesAtLeastTwoThreads(Stream.iterate(0, x -> x < 10, x -> x + 1));\n-        checkUsesAtLeastTwoThreads(IntStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n-        checkUsesAtLeastTwoThreads(LongStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n-        checkUsesAtLeastTwoThreads(DoubleStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+        checkHasSplit(Stream.iterate(0, x -> x < 10, x -> x + 1));\n+        checkHasSplit(IntStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+        checkHasSplit(LongStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+        checkHasSplit(DoubleStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n@@ -112,6 +110,7 @@\n-    private void checkUsesAtLeastTwoThreads(Stream<?> stream) {\n-        ForkJoinPool pool = new ForkJoinPool(4);\n-        Set<Thread> threads = ConcurrentHashMap.newKeySet();\n-        pool.submit(() -> stream.parallel().forEach(s -> threads.add(Thread.currentThread()))).join();\n-        pool.shutdown();\n-        assertTrue(threads.size() >= 2);\n+    private void checkHasSplit(Stream<?> stream) {\n+        int[] numberOfNonEmptyParts = stream.parallel().collect(\n+                Collector.of(() -> new int[1], (acc, e) -> acc[0] = 1, (acc1, acc2) -> {\n+                  acc1[0] += acc2[0];\n+                  return acc1;\n+                }));\n+        assertTrue(numberOfNonEmptyParts[0] >= 2);\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/IterateTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"}]}