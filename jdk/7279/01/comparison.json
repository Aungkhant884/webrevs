{"files":[{"patch":"@@ -948,0 +948,1 @@\n+        private long estimatedSize; \/\/ estimated size, to help to split evenly\n@@ -974,0 +975,9 @@\n+            this.estimatedSize = -1;\n+        }\n+\n+        private ArraySpliterator(Object[] array, int origin, int fence, int characteristics, long estimatedSize) {\n+            this.array = array;\n+            this.index = origin;\n+            this.fence = fence;\n+            this.characteristics = characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);\n+            this.estimatedSize = estimatedSize;\n@@ -979,3 +989,7 @@\n-            return (lo >= mid)\n-                   ? null\n-                   : new ArraySpliterator<>(array, lo, index = mid, characteristics);\n+            if (lo >= mid) return null;\n+            if (estimatedSize == -1) {\n+                return new ArraySpliterator<>(array, lo, index = mid, characteristics);\n+            }\n+            long prefixEstimatedSize = estimatedSize >>> 1;\n+            estimatedSize -= prefixEstimatedSize;\n+            return new ArraySpliterator<>(array, lo, index = mid, characteristics, prefixEstimatedSize);\n@@ -1009,1 +1023,3 @@\n-        public long estimateSize() { return (long)(fence - index); }\n+        public long estimateSize() {\n+            return estimatedSize >= 0 ? estimatedSize : (long)(fence - index);\n+        }\n@@ -1033,0 +1049,1 @@\n+        private long estimatedSize; \/\/ estimated size, to help to split evenly\n@@ -1059,0 +1076,9 @@\n+            this.estimatedSize = -1;\n+        }\n+\n+        private IntArraySpliterator(int[] array, int origin, int fence, int characteristics, long estimatedSize) {\n+            this.array = array;\n+            this.index = origin;\n+            this.fence = fence;\n+            this.characteristics = characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);\n+            this.estimatedSize = estimatedSize;\n@@ -1064,3 +1090,7 @@\n-            return (lo >= mid)\n-                   ? null\n-                   : new IntArraySpliterator(array, lo, index = mid, characteristics);\n+            if (lo >= mid) return null;\n+            if (estimatedSize == -1) {\n+                return new IntArraySpliterator(array, lo, index = mid, characteristics);\n+            }\n+            long prefixEstimatedSize = estimatedSize >>> 1;\n+            estimatedSize -= prefixEstimatedSize;\n+            return new IntArraySpliterator(array, lo, index = mid, characteristics, prefixEstimatedSize);\n@@ -1092,1 +1122,3 @@\n-        public long estimateSize() { return (long)(fence - index); }\n+        public long estimateSize() {\n+            return estimatedSize >= 0 ? estimatedSize : (long)(fence - index);\n+        }\n@@ -1116,0 +1148,1 @@\n+        private long estimatedSize; \/\/ estimated size, to help to split evenly\n@@ -1142,0 +1175,9 @@\n+            this.estimatedSize = -1;\n+        }\n+\n+        private LongArraySpliterator(long[] array, int origin, int fence, int characteristics, long estimatedSize) {\n+            this.array = array;\n+            this.index = origin;\n+            this.fence = fence;\n+            this.characteristics = characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);\n+            this.estimatedSize = estimatedSize;\n@@ -1147,3 +1189,7 @@\n-            return (lo >= mid)\n-                   ? null\n-                   : new LongArraySpliterator(array, lo, index = mid, characteristics);\n+            if (lo >= mid) return null;\n+            if (estimatedSize == -1) {\n+                return new LongArraySpliterator(array, lo, index = mid, characteristics);\n+            }\n+            long prefixEstimatedSize = estimatedSize >>> 1;\n+            estimatedSize -= prefixEstimatedSize;\n+            return new LongArraySpliterator(array, lo, index = mid, characteristics, prefixEstimatedSize);\n@@ -1175,1 +1221,3 @@\n-        public long estimateSize() { return (long)(fence - index); }\n+        public long estimateSize() {\n+            return estimatedSize >= 0 ? estimatedSize : (long)(fence - index);\n+        }\n@@ -1199,0 +1247,1 @@\n+        private long estimatedSize; \/\/ estimated size, to help to split evenly\n@@ -1225,0 +1274,9 @@\n+            this.estimatedSize = -1;\n+        }\n+\n+        private DoubleArraySpliterator(double[] array, int origin, int fence, int characteristics, long estimatedSize) {\n+            this.array = array;\n+            this.index = origin;\n+            this.fence = fence;\n+            this.characteristics = characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);\n+            this.estimatedSize = estimatedSize;\n@@ -1230,3 +1288,7 @@\n-            return (lo >= mid)\n-                   ? null\n-                   : new DoubleArraySpliterator(array, lo, index = mid, characteristics);\n+            if (lo >= mid) return null;\n+            if (estimatedSize == -1) {\n+                return new DoubleArraySpliterator(array, lo, index = mid, characteristics);\n+            }\n+            long prefixEstimatedSize = estimatedSize >>> 1;\n+            estimatedSize -= prefixEstimatedSize;\n+            return new DoubleArraySpliterator(array, lo, index = mid, characteristics, prefixEstimatedSize);\n@@ -1258,1 +1320,3 @@\n-        public long estimateSize() { return (long)(fence - index); }\n+        public long estimateSize() {\n+            return estimatedSize >= 0 ? estimatedSize : (long)(fence - index);\n+        }\n@@ -1365,1 +1429,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1367,1 +1431,3 @@\n-                return new ArraySpliterator<>(a, 0, j, characteristics());\n+                    return new ArraySpliterator<>(a, 0, j, characteristics);\n+                }\n+                return new ArraySpliterator<>(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -1475,1 +1541,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1477,1 +1543,3 @@\n-                return new IntArraySpliterator(a, 0, j, characteristics());\n+                    return new IntArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new IntArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -1585,1 +1653,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1587,1 +1655,3 @@\n-                return new LongArraySpliterator(a, 0, j, characteristics());\n+                    return new LongArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new LongArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -1695,1 +1765,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1697,1 +1767,3 @@\n-                return new DoubleArraySpliterator(a, 0, j, characteristics());\n+                    return new DoubleArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new DoubleArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -1830,1 +1902,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1832,1 +1904,3 @@\n-                return new ArraySpliterator<>(a, 0, j, characteristics);\n+                    return new ArraySpliterator<>(a, 0, j, characteristics);\n+                }\n+                return new ArraySpliterator<>(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -1942,1 +2016,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -1944,1 +2018,3 @@\n-                return new IntArraySpliterator(a, 0, j, characteristics);\n+                    return new IntArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new IntArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -2036,1 +2112,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -2038,1 +2114,3 @@\n-                return new LongArraySpliterator(a, 0, j, characteristics);\n+                    return new LongArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new LongArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n@@ -2130,1 +2208,1 @@\n-                if (est != Long.MAX_VALUE)\n+                if (est != Long.MAX_VALUE) {\n@@ -2132,1 +2210,3 @@\n-                return new DoubleArraySpliterator(a, 0, j, characteristics);\n+                    return new DoubleArraySpliterator(a, 0, j, characteristics);\n+                }\n+                return new DoubleArraySpliterator(a, 0, j, characteristics, Long.MAX_VALUE \/ 2);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Spliterators.java","additions":112,"deletions":32,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ForkJoinPool;\n@@ -100,0 +103,16 @@\n+\n+    @Test\n+    public void testParallelize() {\n+        checkUsesAtLeastTwoThreads(Stream.iterate(0, x -> x < 10, x -> x + 1));\n+        checkUsesAtLeastTwoThreads(IntStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+        checkUsesAtLeastTwoThreads(LongStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+        checkUsesAtLeastTwoThreads(DoubleStream.iterate(0, x -> x < 10, x -> x + 1).boxed());\n+    }\n+\n+    private void checkUsesAtLeastTwoThreads(Stream<?> stream) {\n+        ForkJoinPool pool = new ForkJoinPool(4);\n+        Set<Thread> threads = ConcurrentHashMap.newKeySet();\n+        pool.submit(() -> stream.parallel().forEach(s -> threads.add(Thread.currentThread()))).join();\n+        pool.shutdown();\n+        assertTrue(threads.size() >= 2);\n+    }\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/IterateTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}