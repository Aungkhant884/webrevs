{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"include\/jvm_io.h\"\n+#include \"jvmci\/jvmci_globals.hpp\"\n@@ -35,2 +39,0 @@\n-#include \"compiler\/compilerDefinitions.hpp\"\n-#include \"gc\/shared\/gcConfig.hpp\"\n@@ -116,0 +118,99 @@\n+\n+bool CompilerConfig::is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n+bool CompilerConfig::is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI) NOT_JVMCI(false);      }\n+\n+\/\/ is_*_only() functions describe situations in which the JVM is in one way or another\n+\/\/ forced to use a particular compiler or their combination. The constraint functions\n+\/\/ deliberately ignore the fact that there may also be methods installed\n+\/\/ through JVMCI (where the JVMCI compiler was invoked not through the broker). Be sure\n+\/\/ to check for those (using is_jvmci()) in situations where it matters.\n+\/\/\n+\n+\/\/ Is the JVM in a configuration that permits only c1-compiled methods (level 1,2,3)?\n+bool CompilerConfig::is_c1_only() {\n+  if (!is_interpreter_only() && has_c1()) {\n+    const bool c1_only = !has_c2() && !is_jvmci_compiler();\n+    const bool tiered_degraded_to_c1_only = TieredCompilation && TieredStopAtLevel >= CompLevel_simple && TieredStopAtLevel < CompLevel_full_optimization;\n+    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n+    return c1_only || tiered_degraded_to_c1_only || c1_only_compilation_mode;\n+  }\n+  return false;\n+}\n+\n+bool CompilerConfig::is_c1_or_interpreter_only_no_jvmci() {\n+  assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n+  return !is_jvmci() && (is_interpreter_only() || is_c1_only());\n+}\n+\n+bool CompilerConfig::is_c1_only_no_jvmci() {\n+  return is_c1_only() && !is_jvmci();\n+}\n+\n+\/\/ Is the JVM in a configuration that permits only c1-compiled methods at level 1?\n+bool CompilerConfig::is_c1_simple_only() {\n+  if (is_c1_only()) {\n+    const bool tiered_degraded_to_level_1 = TieredCompilation && TieredStopAtLevel == CompLevel_simple;\n+    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return tiered_degraded_to_level_1 || c1_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+bool CompilerConfig::is_c2_enabled() {\n+  return has_c2() && !is_interpreter_only() && !is_c1_only() && !is_jvmci_compiler();\n+}\n+\n+bool CompilerConfig::is_jvmci_compiler_enabled() {\n+  return is_jvmci_compiler() && !is_interpreter_only() && !is_c1_only();\n+}\n+\/\/ Is the JVM in a configuration that permits only c2-compiled methods?\n+bool CompilerConfig::is_c2_only() {\n+  if (is_c2_enabled()) {\n+    const bool c2_only = !has_c1();\n+    \/\/ There is no JVMCI compiler to replace C2 in the broker, and the user (or ergonomics)\n+    \/\/ is forcing C1 off.\n+    const bool c2_only_compilation_mode = CompilationModeFlag::high_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return c2_only || c2_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+\/\/ Is the JVM in a configuration that permits only jvmci-compiled methods?\n+bool CompilerConfig::is_jvmci_compiler_only() {\n+  if (is_jvmci_compiler_enabled()) {\n+    const bool jvmci_compiler_only = !has_c1();\n+    \/\/ JVMCI compiler replaced C2 and the user (or ergonomics) is forcing C1 off.\n+    const bool jvmci_only_compilation_mode = CompilationModeFlag::high_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return jvmci_compiler_only || jvmci_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+bool CompilerConfig::is_c2_or_jvmci_compiler_only() {\n+  return is_c2_only() || is_jvmci_compiler_only();\n+}\n+\n+\/\/ Tiered is basically C1 & (C2 | JVMCI) minus all the odd cases with restrictions.\n+bool CompilerConfig::is_tiered() {\n+  assert(is_c1_simple_only() && is_c1_only() || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n+  return has_tiered() && !is_interpreter_only() && !is_c1_only() && !is_c2_or_jvmci_compiler_only();\n+}\n+\n+bool CompilerConfig::is_c1_enabled() {\n+  return has_c1() && !is_interpreter_only() && !is_c2_or_jvmci_compiler_only();\n+}\n+\n+bool CompilerConfig::is_c1_profiling() {\n+  const bool c1_only_profiling = is_c1_only() && !is_c1_simple_only();\n+  const bool tiered = is_tiered();\n+  return c1_only_profiling || tiered;\n+}\n+\n+\n+bool CompilerConfig::is_c2_or_jvmci_compiler_enabled() {\n+  return is_c2_enabled() || is_jvmci_compiler_enabled();\n+}\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":103,"deletions":2,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"jvmci\/jvmci_globals.hpp\"\n@@ -31,1 +29,1 @@\n-#include \"runtime\/globals.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -141,2 +139,2 @@\n-  static bool is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n-  static bool is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI) NOT_JVMCI(false);      }\n+  static bool is_jvmci_compiler();\n+  static bool is_jvmci();\n@@ -150,89 +148,0 @@\n-  \/\/\n-\n-  \/\/ Is the JVM in a configuration that permits only c1-compiled methods (level 1,2,3)?\n-  static bool is_c1_only() {\n-    if (!is_interpreter_only() && has_c1()) {\n-      const bool c1_only = !has_c2() && !is_jvmci_compiler();\n-      const bool tiered_degraded_to_c1_only = TieredCompilation && TieredStopAtLevel >= CompLevel_simple && TieredStopAtLevel < CompLevel_full_optimization;\n-      const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n-      return c1_only || tiered_degraded_to_c1_only || c1_only_compilation_mode;\n-    }\n-    return false;\n-  }\n-\n-  static bool is_c1_or_interpreter_only_no_jvmci() {\n-    assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n-    return !is_jvmci() && (is_interpreter_only() || is_c1_only());\n-  }\n-\n-  static bool is_c1_only_no_jvmci() {\n-    return is_c1_only() && !is_jvmci();\n-  }\n-\n-  \/\/ Is the JVM in a configuration that permits only c1-compiled methods at level 1?\n-  static bool is_c1_simple_only() {\n-    if (is_c1_only()) {\n-      const bool tiered_degraded_to_level_1 = TieredCompilation && TieredStopAtLevel == CompLevel_simple;\n-      const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n-      const bool tiered_off = !TieredCompilation;\n-      return tiered_degraded_to_level_1 || c1_only_compilation_mode || tiered_off;\n-    }\n-    return false;\n-  }\n-\n-  static bool is_c2_enabled() {\n-    return has_c2() && !is_interpreter_only() && !is_c1_only() && !is_jvmci_compiler();\n-  }\n-\n-  static bool is_jvmci_compiler_enabled() {\n-    return is_jvmci_compiler() && !is_interpreter_only() && !is_c1_only();\n-  }\n-  \/\/ Is the JVM in a configuration that permits only c2-compiled methods?\n-  static bool is_c2_only() {\n-    if (is_c2_enabled()) {\n-      const bool c2_only = !has_c1();\n-      \/\/ There is no JVMCI compiler to replace C2 in the broker, and the user (or ergonomics)\n-      \/\/ is forcing C1 off.\n-      const bool c2_only_compilation_mode = CompilationModeFlag::high_only();\n-      const bool tiered_off = !TieredCompilation;\n-      return c2_only || c2_only_compilation_mode || tiered_off;\n-    }\n-    return false;\n-  }\n-\n-  \/\/ Is the JVM in a configuration that permits only jvmci-compiled methods?\n-  static bool is_jvmci_compiler_only() {\n-    if (is_jvmci_compiler_enabled()) {\n-      const bool jvmci_compiler_only = !has_c1();\n-      \/\/ JVMCI compiler replaced C2 and the user (or ergonomics) is forcing C1 off.\n-      const bool jvmci_only_compilation_mode = CompilationModeFlag::high_only();\n-      const bool tiered_off = !TieredCompilation;\n-      return jvmci_compiler_only || jvmci_only_compilation_mode || tiered_off;\n-    }\n-    return false;\n-  }\n-\n-  static bool is_c2_or_jvmci_compiler_only() {\n-    return is_c2_only() || is_jvmci_compiler_only();\n-  }\n-\n-  \/\/ Tiered is basically C1 & (C2 | JVMCI) minus all the odd cases with restrictions.\n-  static bool is_tiered() {\n-    assert(is_c1_simple_only() && is_c1_only() || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n-    return has_tiered() && !is_interpreter_only() && !is_c1_only() && !is_c2_or_jvmci_compiler_only();\n-  }\n-\n-  static bool is_c1_enabled() {\n-    return has_c1() && !is_interpreter_only() && !is_c2_or_jvmci_compiler_only();\n-  }\n-\n-  static bool is_c1_profiling() {\n-    const bool c1_only_profiling = is_c1_only() && !is_c1_simple_only();\n-    const bool tiered = is_tiered();\n-    return c1_only_profiling || tiered;\n-  }\n-\n-\n-  static bool is_c2_or_jvmci_compiler_enabled() {\n-    return is_c2_enabled() || is_jvmci_compiler_enabled();\n-  }\n@@ -240,0 +149,16 @@\n+  static bool is_tiered();\n+\n+  static bool is_c1_enabled();\n+  static bool is_c1_only();\n+  static bool is_c1_simple_only();\n+  static bool is_c1_or_interpreter_only_no_jvmci();\n+  static bool is_c1_only_no_jvmci();\n+  static bool is_c1_profiling();\n+\n+  static bool is_jvmci_compiler_enabled();\n+  static bool is_jvmci_compiler_only();\n+\n+  static bool is_c2_only();\n+  static bool is_c2_enabled();\n+  static bool is_c2_or_jvmci_compiler_only();\n+  static bool is_c2_or_jvmci_compiler_enabled();\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":19,"deletions":94,"binary":false,"changes":113,"status":"modified"}]}