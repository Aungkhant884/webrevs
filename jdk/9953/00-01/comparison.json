{"files":[{"patch":"@@ -38,0 +38,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n@@ -30,1 +29,0 @@\n-#include \"jvmci\/jvmci_globals.hpp\"\n@@ -118,99 +116,0 @@\n-\n-bool CompilerConfig::is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n-bool CompilerConfig::is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI) NOT_JVMCI(false);      }\n-\n-\/\/ is_*_only() functions describe situations in which the JVM is in one way or another\n-\/\/ forced to use a particular compiler or their combination. The constraint functions\n-\/\/ deliberately ignore the fact that there may also be methods installed\n-\/\/ through JVMCI (where the JVMCI compiler was invoked not through the broker). Be sure\n-\/\/ to check for those (using is_jvmci()) in situations where it matters.\n-\/\/\n-\n-\/\/ Is the JVM in a configuration that permits only c1-compiled methods (level 1,2,3)?\n-bool CompilerConfig::is_c1_only() {\n-  if (!is_interpreter_only() && has_c1()) {\n-    const bool c1_only = !has_c2() && !is_jvmci_compiler();\n-    const bool tiered_degraded_to_c1_only = TieredCompilation && TieredStopAtLevel >= CompLevel_simple && TieredStopAtLevel < CompLevel_full_optimization;\n-    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n-    return c1_only || tiered_degraded_to_c1_only || c1_only_compilation_mode;\n-  }\n-  return false;\n-}\n-\n-bool CompilerConfig::is_c1_or_interpreter_only_no_jvmci() {\n-  assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n-  return !is_jvmci() && (is_interpreter_only() || is_c1_only());\n-}\n-\n-bool CompilerConfig::is_c1_only_no_jvmci() {\n-  return is_c1_only() && !is_jvmci();\n-}\n-\n-\/\/ Is the JVM in a configuration that permits only c1-compiled methods at level 1?\n-bool CompilerConfig::is_c1_simple_only() {\n-  if (is_c1_only()) {\n-    const bool tiered_degraded_to_level_1 = TieredCompilation && TieredStopAtLevel == CompLevel_simple;\n-    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n-    const bool tiered_off = !TieredCompilation;\n-    return tiered_degraded_to_level_1 || c1_only_compilation_mode || tiered_off;\n-  }\n-  return false;\n-}\n-\n-bool CompilerConfig::is_c2_enabled() {\n-  return has_c2() && !is_interpreter_only() && !is_c1_only() && !is_jvmci_compiler();\n-}\n-\n-bool CompilerConfig::is_jvmci_compiler_enabled() {\n-  return is_jvmci_compiler() && !is_interpreter_only() && !is_c1_only();\n-}\n-\/\/ Is the JVM in a configuration that permits only c2-compiled methods?\n-bool CompilerConfig::is_c2_only() {\n-  if (is_c2_enabled()) {\n-    const bool c2_only = !has_c1();\n-    \/\/ There is no JVMCI compiler to replace C2 in the broker, and the user (or ergonomics)\n-    \/\/ is forcing C1 off.\n-    const bool c2_only_compilation_mode = CompilationModeFlag::high_only();\n-    const bool tiered_off = !TieredCompilation;\n-    return c2_only || c2_only_compilation_mode || tiered_off;\n-  }\n-  return false;\n-}\n-\n-\/\/ Is the JVM in a configuration that permits only jvmci-compiled methods?\n-bool CompilerConfig::is_jvmci_compiler_only() {\n-  if (is_jvmci_compiler_enabled()) {\n-    const bool jvmci_compiler_only = !has_c1();\n-    \/\/ JVMCI compiler replaced C2 and the user (or ergonomics) is forcing C1 off.\n-    const bool jvmci_only_compilation_mode = CompilationModeFlag::high_only();\n-    const bool tiered_off = !TieredCompilation;\n-    return jvmci_compiler_only || jvmci_only_compilation_mode || tiered_off;\n-  }\n-  return false;\n-}\n-\n-bool CompilerConfig::is_c2_or_jvmci_compiler_only() {\n-  return is_c2_only() || is_jvmci_compiler_only();\n-}\n-\n-\/\/ Tiered is basically C1 & (C2 | JVMCI) minus all the odd cases with restrictions.\n-bool CompilerConfig::is_tiered() {\n-  assert(is_c1_simple_only() && is_c1_only() || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n-  return has_tiered() && !is_interpreter_only() && !is_c1_only() && !is_c2_or_jvmci_compiler_only();\n-}\n-\n-bool CompilerConfig::is_c1_enabled() {\n-  return has_c1() && !is_interpreter_only() && !is_c2_or_jvmci_compiler_only();\n-}\n-\n-bool CompilerConfig::is_c1_profiling() {\n-  const bool c1_only_profiling = is_c1_only() && !is_c1_simple_only();\n-  const bool tiered = is_tiered();\n-  return c1_only_profiling || tiered;\n-}\n-\n-\n-bool CompilerConfig::is_c2_or_jvmci_compiler_enabled() {\n-  return is_c2_enabled() || is_jvmci_compiler_enabled();\n-}\n-\n@@ -327,4 +226,0 @@\n-bool CompilerConfig::is_interpreter_only() {\n-  return Arguments::is_interpreter_only() || TieredStopAtLevel == CompLevel_none;\n-}\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":106,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -139,3 +139,3 @@\n-  static bool is_jvmci_compiler();\n-  static bool is_jvmci();\n-  static bool is_interpreter_only();\n+  inline static bool is_jvmci_compiler();\n+  inline static bool is_jvmci();\n+  inline static bool is_interpreter_only();\n@@ -149,1 +149,1 @@\n-  static bool is_tiered();\n+  inline static bool is_tiered();\n@@ -151,6 +151,6 @@\n-  static bool is_c1_enabled();\n-  static bool is_c1_only();\n-  static bool is_c1_simple_only();\n-  static bool is_c1_or_interpreter_only_no_jvmci();\n-  static bool is_c1_only_no_jvmci();\n-  static bool is_c1_profiling();\n+  inline static bool is_c1_enabled();\n+  inline static bool is_c1_only();\n+  inline static bool is_c1_simple_only();\n+  inline static bool is_c1_or_interpreter_only_no_jvmci();\n+  inline static bool is_c1_only_no_jvmci();\n+  inline static bool is_c1_profiling();\n@@ -158,2 +158,2 @@\n-  static bool is_jvmci_compiler_enabled();\n-  static bool is_jvmci_compiler_only();\n+  inline static bool is_jvmci_compiler_enabled();\n+  inline static bool is_jvmci_compiler_only();\n@@ -161,4 +161,4 @@\n-  static bool is_c2_only();\n-  static bool is_c2_enabled();\n-  static bool is_c2_or_jvmci_compiler_only();\n-  static bool is_c2_or_jvmci_compiler_enabled();\n+  inline static bool is_c2_only();\n+  inline static bool is_c2_enabled();\n+  inline static bool is_c2_or_jvmci_compiler_only();\n+  inline static bool is_c2_or_jvmci_compiler_enabled();\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILERDEFINITIONS_INLINE_HPP\n+#define SHARE_COMPILER_COMPILERDEFINITIONS_INLINE_HPP\n+\n+#include \"compiler\/compilerDefinitions.hpp\"\n+\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"runtime\/arguments.hpp\"\n+\n+inline bool CompilerConfig::is_interpreter_only() {\n+  return Arguments::is_interpreter_only() || TieredStopAtLevel == CompLevel_none;\n+}\n+\n+inline bool CompilerConfig::is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n+inline bool CompilerConfig::is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI     ) NOT_JVMCI(false); }\n+\n+\/\/ is_*_only() functions describe situations in which the JVM is in one way or another\n+\/\/ forced to use a particular compiler or their combination. The constraint functions\n+\/\/ deliberately ignore the fact that there may also be methods installed\n+\/\/ through JVMCI (where the JVMCI compiler was invoked not through the broker). Be sure\n+\/\/ to check for those (using is_jvmci()) in situations where it matters.\n+\/\/\n+\n+\/\/ Is the JVM in a configuration that permits only c1-compiled methods (level 1,2,3)?\n+inline bool CompilerConfig::is_c1_only() {\n+  if (!is_interpreter_only() && has_c1()) {\n+    const bool c1_only = !has_c2() && !is_jvmci_compiler();\n+    const bool tiered_degraded_to_c1_only = TieredCompilation && TieredStopAtLevel >= CompLevel_simple && TieredStopAtLevel < CompLevel_full_optimization;\n+    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n+    return c1_only || tiered_degraded_to_c1_only || c1_only_compilation_mode;\n+  }\n+  return false;\n+}\n+\n+inline bool CompilerConfig::is_c1_or_interpreter_only_no_jvmci() {\n+  assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n+  return !is_jvmci() && (is_interpreter_only() || is_c1_only());\n+}\n+\n+inline bool CompilerConfig::is_c1_only_no_jvmci() {\n+  return is_c1_only() && !is_jvmci();\n+}\n+\n+\/\/ Is the JVM in a configuration that permits only c1-compiled methods at level 1?\n+inline bool CompilerConfig::is_c1_simple_only() {\n+  if (is_c1_only()) {\n+    const bool tiered_degraded_to_level_1 = TieredCompilation && TieredStopAtLevel == CompLevel_simple;\n+    const bool c1_only_compilation_mode = CompilationModeFlag::quick_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return tiered_degraded_to_level_1 || c1_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+inline bool CompilerConfig::is_c2_enabled() {\n+  return has_c2() && !is_interpreter_only() && !is_c1_only() && !is_jvmci_compiler();\n+}\n+\n+inline bool CompilerConfig::is_jvmci_compiler_enabled() {\n+  return is_jvmci_compiler() && !is_interpreter_only() && !is_c1_only();\n+}\n+\/\/ Is the JVM in a configuration that permits only c2-compiled methods?\n+inline bool CompilerConfig::is_c2_only() {\n+  if (is_c2_enabled()) {\n+    const bool c2_only = !has_c1();\n+    \/\/ There is no JVMCI compiler to replace C2 in the broker, and the user (or ergonomics)\n+    \/\/ is forcing C1 off.\n+    const bool c2_only_compilation_mode = CompilationModeFlag::high_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return c2_only || c2_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+\/\/ Is the JVM in a configuration that permits only jvmci-compiled methods?\n+inline bool CompilerConfig::is_jvmci_compiler_only() {\n+  if (is_jvmci_compiler_enabled()) {\n+    const bool jvmci_compiler_only = !has_c1();\n+    \/\/ JVMCI compiler replaced C2 and the user (or ergonomics) is forcing C1 off.\n+    const bool jvmci_only_compilation_mode = CompilationModeFlag::high_only();\n+    const bool tiered_off = !TieredCompilation;\n+    return jvmci_compiler_only || jvmci_only_compilation_mode || tiered_off;\n+  }\n+  return false;\n+}\n+\n+inline bool CompilerConfig::is_c2_or_jvmci_compiler_only() {\n+  return is_c2_only() || is_jvmci_compiler_only();\n+}\n+\n+\/\/ Tiered is basically C1 & (C2 | JVMCI) minus all the odd cases with restrictions.\n+inline bool CompilerConfig::is_tiered() {\n+  assert(is_c1_simple_only() && is_c1_only() || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n+  return has_tiered() && !is_interpreter_only() && !is_c1_only() && !is_c2_or_jvmci_compiler_only();\n+}\n+\n+inline bool CompilerConfig::is_c1_enabled() {\n+  return has_c1() && !is_interpreter_only() && !is_c2_or_jvmci_compiler_only();\n+}\n+\n+inline bool CompilerConfig::is_c1_profiling() {\n+  const bool c1_only_profiling = is_c1_only() && !is_c1_simple_only();\n+  const bool tiered = is_tiered();\n+  return c1_only_profiling || tiered;\n+}\n+\n+inline bool CompilerConfig::is_c2_or_jvmci_compiler_enabled() {\n+  return is_c2_enabled() || is_jvmci_compiler_enabled();\n+}\n+\n+#endif \/\/ SHARE_COMPILER_COMPILERDEFINITIONS_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.inline.hpp","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"compiler\/compilerDefinitions.hpp\"\n+#include \"compiler\/compilerDefinitions.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}