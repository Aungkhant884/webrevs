{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.nio.file.Files;\n@@ -185,1 +186,1 @@\n-        if (withFindNeededPackages) {\n+        if (withFindNeededPackages && Files.exists(thePackage.sourceRoot())) {\n@@ -192,0 +193,4 @@\n+            if (!Files.exists(thePackage.sourceRoot())) {\n+                Log.info(I18N.getString(\"warning.foerign-app-image\"));\n+\n+            }\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/LinuxPackageBundler.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+warning.foerign-app-image=Warning: app-image dir not generated by jpackage.\n+\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/LinuxResources.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+warning.foerign-app-image=Warning: app-image dir not generated by jpackage.\n+\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/LinuxResources_ja.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+warning.foerign-app-image=Warning: app-image dir not generated by jpackage.\n+\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/LinuxResources_zh_CN.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.nio.file.NoSuchFileException;\n+import java.text.MessageFormat;\n@@ -217,0 +219,4 @@\n+        } catch (NoSuchFileException nsfe) {\n+            \/\/ non jpackage generated app-image (no app\/.jpackage.xml)\n+            Log.info(MessageFormat.format(I18N.getString(\n+                    \"warning.foreign-app-image\"), appImageDir));\n@@ -219,0 +225,3 @@\n+            Log.info(MessageFormat.format(I18N.getString(\n+                    \"warning.invalid-app-image\"), appImageDir));\n+\n","filename":"src\/jdk.incubator.jpackage\/share\/classes\/jdk\/incubator\/jpackage\/internal\/AppImageFile.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+warning.foreign-app-image=Warning: app-image dir ({0}) not generated by jpackage.\n+warning.invalid-app-image=Warning: cannot parse .jpackage.xml in app-image dir ({0})\n","filename":"src\/jdk.incubator.jpackage\/share\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/MainResources.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+warning.foreign-app-image=Warning: app-image dir ({0}) not generated by jpackage.\n+warning.invalid-app-image=Warning: cannot parse .jpackage.xml in app-image dir ({0})\n","filename":"src\/jdk.incubator.jpackage\/share\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+warning.foreign-app-image=Warning: app-image dir ({0}) not generated by jpackage.\n+warning.invalid-app-image=Warning: cannot parse .jpackage.xml in app-image dir ({0})\n","filename":"src\/jdk.incubator.jpackage\/share\/classes\/jdk\/incubator\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -409,1 +409,3 @@\n-        data.put(\"JpIcon\", installerIcon.toString());\n+        if (Files.exists(installerIcon)) {\n+            data.put(\"JpIcon\", installerIcon.toString());\n+        }\n","filename":"src\/jdk.incubator.jpackage\/windows\/classes\/jdk\/incubator\/jpackage\/internal\/WinMsiBundler.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -236,1 +236,3 @@\n-                return Long.parseLong(getRpmBundleProperty(packageFile, \"Size\")) >> 10;\n+                String size = getRpmBundleProperty(packageFile, \"Size\");\n+                return (Long.parseLong(size) + 1023L) >> 10; \/\/ in KB rounded up\n+\n@@ -257,4 +259,4 @@\n-        TKit.assertNotEquals(0L, LinuxHelper.getInstalledPackageSizeKB(\n-                cmd), String.format(\n-                        \"Check installed size of [%s] package in KB is not zero\",\n-                        packageName));\n+        Long packageSize = LinuxHelper.getInstalledPackageSizeKB(cmd);\n+        TKit.trace(\"InstalledPackageSize: \" + packageSize);\n+        TKit.assertNotEquals(0L, packageSize, String.format(\n+                \"Check installed size of [%s] package in not zero\", packageName));\n@@ -273,1 +275,3 @@\n-            checkPrerequisites = true;\n+            \/\/ AppImagePackageTest.testEmpty() will have no dependencies,\n+            \/\/ but will have more then 0 and less than 1K content size.\n+            checkPrerequisites = packageSize > 1;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.nio.file.Files;\n+import java.io.IOException;\n+import java.util.List;\n@@ -28,0 +31,2 @@\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n@@ -64,0 +69,25 @@\n+\n+    @Test\n+    public static void testEmpty() throws IOException {\n+        final String name = \"EmptyAppImagePackageTest\";\n+        final String imageName = name + (TKit.isOSX() ? \".app\" : \"\");\n+        Path appImageDir = TKit.createTempDirectory(null).resolve(imageName);\n+\n+        Files.createDirectories(appImageDir.resolve(\"bin\"));\n+        Path libDir = Files.createDirectories(appImageDir.resolve(\"lib\"));\n+        TKit.createTextFile(libDir.resolve(\"README\"),\n+                List.of(\"This is some arbitrary text for the README file\\n\"));\n+\n+        new PackageTest()\n+        .addInitializer(cmd -> {\n+            cmd.addArguments(\"--app-image\", appImageDir);\n+            cmd.removeArgumentWithValue(\"--input\");\n+\n+            \/\/ on mac, with --app-image and without --mac-package-identifier,\n+            \/\/ we will try to infer it from the image, so forign image needs it.\n+            if (TKit.isOSX()) {\n+                cmd.addArguments(\"--mac-package-identifier\", name);\n+            }\n+        }).run(new Action[] { Action.CREATE, Action.UNPACK });\n+        \/\/ default: {CREATE, UNPACK, VERIFY}, but we can't verify forign payload\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}