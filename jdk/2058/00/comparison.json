{"files":[{"patch":"@@ -578,1 +578,4 @@\n-                else\n+                else {\n+                    if (t.value == null) {\n+                        t.value = callMappingFunctionWithCheck(key, mappingFunction);\n+                    }\n@@ -580,0 +583,1 @@\n+                }\n@@ -592,1 +596,4 @@\n-                else\n+                else {\n+                    if (t.value == null) {\n+                        t.value = callMappingFunctionWithCheck(key, mappingFunction);\n+                    }\n@@ -594,0 +601,1 @@\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeMap.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -260,0 +260,14 @@\n+    @Test(dataProvider = \"nullValueFriendlyMaps\")\n+    void testComputeIfAbsentOverwriteNull(String desc, Supplier<Map<Object, Object>> ms) {\n+        Map<Object, Object> map = ms.get();\n+        map.put(\"key\", null);\n+        assertEquals(map.size(), 1, desc + \": size != 1\");\n+        assertTrue(map.containsKey(\"key\"), desc + \": does not have key\");\n+        assertNull(map.get(\"key\"), desc + \": value is not null\");\n+        Object result = map.computeIfAbsent(\"key\", k -> \"value\"); \/\/ must rewrite\n+        assertEquals(result, \"value\", desc + \": computeIfAbsent result is not 'value'\");\n+        assertEquals(map.size(), 1, desc + \": size != 1\");\n+        assertTrue(map.containsKey(\"key\"), desc + \": does not have key\");\n+        assertEquals(map.get(\"key\"), \"value\", desc + \": value is not 'value'\");\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Map\/InPlaceOpsCollisions.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}