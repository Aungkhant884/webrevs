{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  return str == nullptr ? \"NULL\" : str;\n+  return str == nullptr ? \"null\" : str;\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,1 +161,1 @@\n-    if (pc_desc != NULL &&\n+    if (pc_desc != nullptr &&\n@@ -175,1 +175,1 @@\n-  if (pc_desc == NULL ||\n+  if (pc_desc == nullptr ||\n@@ -210,1 +210,1 @@\n-\/\/ returned. *method_p is non-NULL if frame was executing a Java\n+\/\/ returned. *method_p is non-null if frame was executing a Java\n@@ -276,1 +276,1 @@\n-\/\/ If 'method_p' is not NULL, an initial Java frame has been found and\n+\/\/ If 'method_p' is not null, an initial Java frame has been found and\n@@ -282,1 +282,1 @@\n-\/\/ 'method_p' is not NULL) and the initial frame that belongs to that Method\n+\/\/ 'method_p' is not null) and the initial frame that belongs to that Method\n@@ -295,1 +295,1 @@\n-\/\/ If 'method_p' is NULL, it was not possible to find a Java frame when\n+\/\/ If 'method_p' is null, it was not possible to find a Java frame when\n@@ -308,1 +308,1 @@\n-  \/\/ Therefore we init the returned Method* to NULL so the\n+  \/\/ Therefore we init the returned Method* to null so the\n@@ -311,1 +311,1 @@\n-  *method_p = NULL;\n+  *method_p = nullptr;\n@@ -336,1 +336,1 @@\n-        \/\/ jcw is NULL if the java call wrapper could not be found\n+        \/\/ jcw is null if the java call wrapper could not be found\n@@ -340,1 +340,1 @@\n-        if (jcw == NULL || jcw->is_first_frame()) {\n+        if (jcw == nullptr || jcw->is_first_frame()) {\n@@ -366,1 +366,1 @@\n-  if (fr->cb() == NULL) {\n+  if (fr->cb() == nullptr) {\n@@ -379,1 +379,1 @@\n-      if (candidate.cb() != NULL) break;\n+      if (candidate.cb() != nullptr) break;\n@@ -381,1 +381,1 @@\n-    if (candidate.cb() == NULL) return false;\n+    if (candidate.cb() == nullptr) return false;\n@@ -396,1 +396,1 @@\n-      \/\/ jcw is NULL if the java call wrapper couldn't be found\n+      \/\/ jcw is null if the java call wrapper couldn't be found\n@@ -400,1 +400,1 @@\n-      if (jcw == NULL || jcw->is_first_frame()) {\n+      if (jcw == nullptr || jcw->is_first_frame()) {\n@@ -446,1 +446,1 @@\n-      assert(nm->pc_desc_at(candidate.pc()) != NULL, \"debug information must be available if the frame is decipherable\");\n+      assert(nm->pc_desc_at(candidate.pc()) != nullptr, \"debug information must be available if the frame is decipherable\");\n@@ -460,1 +460,1 @@\n-    if (candidate.cb() == NULL) return false;\n+    if (candidate.cb() == nullptr) return false;\n@@ -481,1 +481,1 @@\n-  assert(trace->frames != NULL, \"trace->frames must be non-NULL\");\n+  assert(trace->frames != nullptr, \"trace->frames must be non-null\");\n@@ -487,1 +487,1 @@\n-  if (method == NULL) return;\n+  if (method == nullptr) return;\n@@ -582,1 +582,1 @@\n-  if (trace->env_id == NULL || raw_thread == NULL || !raw_thread->is_Java_thread() ||\n+  if (trace->env_id == nullptr || raw_thread == nullptr || !raw_thread->is_Java_thread() ||\n@@ -713,2 +713,2 @@\n-  collector_func_load((char*)name, NULL, NULL, start,\n-    pointer_delta(end, start, sizeof(jbyte)), 0, NULL);\n+  collector_func_load((char*)name, nullptr, nullptr, start,\n+    pointer_delta(end, start, sizeof(jbyte)), 0, nullptr);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-    return result != NULL && result->is_static_field_id();\n+    return result != nullptr && result->is_static_field_id();\n@@ -202,1 +202,1 @@\n-    return result != NULL;\n+    return result != nullptr;\n@@ -244,1 +244,1 @@\n-  } while (k != NULL);\n+  } while (k != nullptr);\n@@ -281,1 +281,1 @@\n-  jclass cls = NULL;\n+  jclass cls = nullptr;\n@@ -285,1 +285,1 @@\n-  TempNewSymbol class_name = name == NULL ? NULL :\n+  TempNewSymbol class_name = name == nullptr ? nullptr :\n@@ -290,1 +290,1 @@\n-  ClassFileStream st((u1*)buf, bufLen, NULL, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, bufLen, nullptr, ClassFileStream::verify);\n@@ -315,1 +315,1 @@\n-  jclass result = NULL;\n+  jclass result = nullptr;\n@@ -329,1 +329,1 @@\n-  if (k != NULL) {\n+  if (k != nullptr) {\n@@ -332,1 +332,1 @@\n-    if (k->class_loader() == NULL &&\n+    if (k->class_loader() == nullptr &&\n@@ -340,2 +340,2 @@\n-      \/\/ a non-NULL Class object.  When invoked from JNI_OnUnload,\n-      \/\/ it will return NULL to indicate no context.\n+      \/\/ a non-null Class object.  When invoked from JNI_OnUnload,\n+      \/\/ it will return null to indicate no context.\n@@ -343,1 +343,1 @@\n-      if (mirror != NULL) {\n+      if (mirror != nullptr) {\n@@ -356,1 +356,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && result != NULL) {\n+  if (log_is_enabled(Debug, class, resolve) && result != nullptr) {\n@@ -369,1 +369,1 @@\n-  jmethodID ret = NULL;\n+  jmethodID ret = nullptr;\n@@ -374,1 +374,1 @@\n-  oop mirror     = NULL;\n+  oop mirror     = nullptr;\n@@ -390,1 +390,1 @@\n-  ret = m==NULL? NULL : m->jmethod_id();  \/\/ return NULL if reflected method deleted\n+  ret = m==nullptr? nullptr : m->jmethod_id();  \/\/ return null if reflected method deleted\n@@ -400,1 +400,1 @@\n-  jfieldID ret = NULL;\n+  jfieldID ret = nullptr;\n@@ -417,1 +417,1 @@\n-    assert(id != NULL, \"corrupt Field object\");\n+    assert(id != nullptr, \"corrupt Field object\");\n@@ -440,1 +440,1 @@\n-  jobject ret = NULL;\n+  jobject ret = nullptr;\n@@ -461,1 +461,1 @@\n-  jclass obj = NULL;\n+  jclass obj = nullptr;\n@@ -465,2 +465,2 @@\n-  \/\/ primitive classes return NULL\n-  if (java_lang_Class::is_primitive(mirror)) return NULL;\n+  \/\/ primitive classes return null\n+  if (java_lang_Class::is_primitive(mirror)) return nullptr;\n@@ -470,1 +470,1 @@\n-  \/\/ interfaces return NULL\n+  \/\/ interfaces return null\n@@ -473,1 +473,1 @@\n-  if (k->is_interface()) return NULL;\n+  if (k->is_interface()) return nullptr;\n@@ -483,1 +483,1 @@\n-  obj = (super == NULL) ? NULL : (jclass) JNIHandles::make_local(THREAD, super->java_mirror());\n+  obj = (super == nullptr) ? nullptr : (jclass) JNIHandles::make_local(THREAD, super->java_mirror());\n@@ -501,1 +501,1 @@\n-  assert(sub_klass != NULL && super_klass != NULL, \"invalid arguments to jni_IsAssignableFrom\");\n+  assert(sub_klass != nullptr && super_klass != nullptr, \"invalid arguments to jni_IsAssignableFrom\");\n@@ -579,1 +579,1 @@\n-    if (thread != NULL && thread->threadObj() != NULL) {\n+    if (thread != nullptr && thread->threadObj() != nullptr) {\n@@ -616,1 +616,1 @@\n-  if (state != NULL && state->is_exception_detected()) {\n+  if (state != nullptr && state->is_exception_detected()) {\n@@ -658,2 +658,2 @@\n-  if (new_handles != NULL) {\n-    \/\/ As a sanity check we only release the handle blocks if the pop_frame_link is not NULL.\n+  if (new_handles != nullptr) {\n+    \/\/ As a sanity check we only release the handle blocks if the pop_frame_link is not null.\n@@ -661,1 +661,1 @@\n-    \/\/ PushLocalFrame call. Note that we set the pop_frame_link to NULL explicitly, otherwise\n+    \/\/ PushLocalFrame call. Note that we set the pop_frame_link to null explicitly, otherwise\n@@ -664,1 +664,1 @@\n-    old_handles->set_pop_frame_link(NULL);              \/\/ clear link we won't release new_handles below\n+    old_handles->set_pop_frame_link(nullptr);              \/\/ clear link we won't release new_handles below\n@@ -740,1 +740,1 @@\n-  if (obj != NULL) {\n+  if (obj != nullptr) {\n@@ -771,1 +771,1 @@\n-    _arguments = NULL;\n+    _arguments = nullptr;\n@@ -898,1 +898,1 @@\n-  if (recv == NULL) {\n+  if (recv == nullptr) {\n@@ -963,1 +963,1 @@\n-  jobject ret = NULL;\n+  jobject ret = nullptr;\n@@ -977,1 +977,1 @@\n-  jobject obj = NULL;\n+  jobject obj = nullptr;\n@@ -995,1 +995,1 @@\n-  jobject obj = NULL;\n+  jobject obj = nullptr;\n@@ -1013,1 +1013,1 @@\n-  jobject obj = NULL;\n+  jobject obj = nullptr;\n@@ -1043,1 +1043,1 @@\n-  if (obj != NULL) {\n+  if (obj != nullptr) {\n@@ -1047,1 +1047,1 @@\n-    if (k != NULL) {\n+    if (k != nullptr) {\n@@ -1064,1 +1064,1 @@\n-  const char *name_to_probe = (name_str == NULL)\n+  const char *name_to_probe = (name_str == nullptr)\n@@ -1070,1 +1070,1 @@\n-  if (name == NULL || signature == NULL) {\n+  if (name == nullptr || signature == nullptr) {\n@@ -1095,1 +1095,1 @@\n-      m = NULL;\n+      m = nullptr;\n@@ -1099,1 +1099,1 @@\n-    if (m == NULL &&  klass->is_instance_klass()) {\n+    if (m == nullptr &&  klass->is_instance_klass()) {\n@@ -1103,1 +1103,1 @@\n-  if (m == NULL || (m->is_static() != is_static)) {\n+  if (m == nullptr || (m->is_static() != is_static)) {\n@@ -1551,1 +1551,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK_0); \\\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK_0); \\\n@@ -1607,1 +1607,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK_0); \\\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK_0); \\\n@@ -1660,1 +1660,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK_0); \\\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK_0); \\\n@@ -1711,1 +1711,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK);\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK);\n@@ -1722,1 +1722,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK);\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK);\n@@ -1732,1 +1732,1 @@\n-  jni_invoke_static(env, &jvalue, NULL, JNI_STATIC, methodID, &ap, CHECK);\n+  jni_invoke_static(env, &jvalue, nullptr, JNI_STATIC, methodID, &ap, CHECK);\n@@ -1757,1 +1757,1 @@\n-  if (fieldname == NULL || signame == NULL) {\n+  if (fieldname == nullptr || signame == nullptr) {\n@@ -1939,1 +1939,1 @@\n-  jobject ret = NULL;\n+  jobject ret = nullptr;\n@@ -1974,1 +1974,1 @@\n-  jfieldID ret = NULL;\n+  jfieldID ret = nullptr;\n@@ -1982,1 +1982,1 @@\n-  if (fieldname == NULL || signame == NULL) {\n+  if (fieldname == nullptr || signame == nullptr) {\n@@ -2016,1 +2016,1 @@\n-    JvmtiExport::jni_GetField_probe(thread, NULL, NULL, id->holder(), fieldID, true);\n+    JvmtiExport::jni_GetField_probe(thread, nullptr, nullptr, id->holder(), fieldID, true);\n@@ -2040,1 +2040,1 @@\n-    JvmtiExport::jni_GetField_probe(thread, NULL, NULL, id->holder(), fieldID, true); \\\n+    JvmtiExport::jni_GetField_probe(thread, nullptr, nullptr, id->holder(), fieldID, true); \\\n@@ -2073,1 +2073,1 @@\n-    JvmtiExport::jni_SetField_probe(thread, NULL, NULL, id->holder(), fieldID, true, JVM_SIGNATURE_CLASS, (jvalue *)&field_value);\n+    JvmtiExport::jni_SetField_probe(thread, nullptr, nullptr, id->holder(), fieldID, true, JVM_SIGNATURE_CLASS, (jvalue *)&field_value);\n@@ -2094,1 +2094,1 @@\n-    JvmtiExport::jni_SetField_probe(thread, NULL, NULL, id->holder(), fieldID, true, SigType, (jvalue *)&field_value); \\\n+    JvmtiExport::jni_SetField_probe(thread, nullptr, nullptr, id->holder(), fieldID, true, SigType, (jvalue *)&field_value); \\\n@@ -2138,1 +2138,1 @@\n-  jstring ret = NULL;\n+  jstring ret = nullptr;\n@@ -2159,1 +2159,1 @@\n-  jchar* buf = NULL;\n+  jchar* buf = nullptr;\n@@ -2162,1 +2162,1 @@\n-  if (s_value != NULL) {\n+  if (s_value != nullptr) {\n@@ -2166,2 +2166,2 @@\n-    \/* JNI Specification states return NULL on OOM *\/\n-    if (buf != NULL) {\n+    \/* JNI Specification states return nullptr on OOM *\/\n+    if (buf != nullptr) {\n@@ -2180,1 +2180,1 @@\n-      if (isCopy != NULL) {\n+      if (isCopy != nullptr) {\n@@ -2193,1 +2193,1 @@\n-  if (chars != NULL) {\n+  if (chars != nullptr) {\n@@ -2229,1 +2229,1 @@\n-  char* result = NULL;\n+  char* result = nullptr;\n@@ -2232,1 +2232,1 @@\n-  if (s_value != NULL) {\n+  if (s_value != nullptr) {\n@@ -2234,1 +2234,1 @@\n-    \/* JNI Specification states return NULL on OOM *\/\n+    \/* JNI Specification states return null on OOM *\/\n@@ -2236,1 +2236,1 @@\n-    if (result != NULL) {\n+    if (result != nullptr) {\n@@ -2238,1 +2238,1 @@\n-      if (isCopy != NULL) {\n+      if (isCopy != nullptr) {\n@@ -2250,1 +2250,1 @@\n-  if (chars != NULL) {\n+  if (chars != nullptr) {\n@@ -2276,1 +2276,1 @@\n-  jobjectArray ret = NULL;\n+  jobjectArray ret = nullptr;\n@@ -2283,1 +2283,1 @@\n-  if (initial_value != NULL) {  \/\/ array already initialized with NULL\n+  if (initial_value != nullptr) {  \/\/ array already initialized with null\n@@ -2297,1 +2297,1 @@\n-  jobject ret = NULL;\n+  jobject ret = nullptr;\n@@ -2321,1 +2321,1 @@\n-    if (v == NULL || v->is_a(ObjArrayKlass::cast(a->klass())->element_klass())) {\n+    if (v == nullptr || v->is_a(ObjArrayKlass::cast(a->klass())->element_klass())) {\n@@ -2355,1 +2355,1 @@\n-  Return ret = NULL;\\\n+  Return ret = nullptr;\\\n@@ -2391,2 +2391,2 @@\n-  static char* bad_address = NULL;\n-  if (bad_address == NULL) {\n+  static char* bad_address = nullptr;\n+  if (bad_address == nullptr) {\n@@ -2395,1 +2395,1 @@\n-    if (bad_address != NULL) {\n+    if (bad_address != nullptr) {\n@@ -2417,1 +2417,1 @@\n-    if (isCopy != NULL) { \\\n+    if (isCopy != nullptr) { \\\n@@ -2420,1 +2420,1 @@\n-    \/* Empty array: legal but useless, can't return NULL. \\\n+    \/* Empty array: legal but useless, can't return null. \\\n@@ -2425,1 +2425,1 @@\n-    \/* JNI Specification states return NULL on OOM *\/                    \\\n+    \/* JNI Specification states return null on OOM *\/                    \\\n@@ -2427,1 +2427,1 @@\n-    if (result != NULL) {                                                \\\n+    if (result != nullptr) {                                             \\\n@@ -2637,1 +2637,1 @@\n-    if ((cl ==  NULL || SystemDictionary::is_platform_class_loader(cl)) &&\n+    if ((cl ==  nullptr || SystemDictionary::is_platform_class_loader(cl)) &&\n@@ -2642,1 +2642,1 @@\n-      do_warning = (caller == NULL) || caller->class_loader() != cl;\n+      do_warning = (caller == nullptr) || caller->class_loader() != cl;\n@@ -2658,1 +2658,1 @@\n-    if (name == NULL || signature == NULL) {\n+    if (name == nullptr || signature == nullptr) {\n@@ -2692,1 +2692,1 @@\n-        m->set_signature_handler(NULL);\n+        m->set_signature_handler(nullptr);\n@@ -2713,1 +2713,1 @@\n-  if (jobj == NULL) {\n+  if (jobj == nullptr) {\n@@ -2731,1 +2731,1 @@\n-  if (jobj == NULL) {\n+  if (jobj == nullptr) {\n@@ -2789,1 +2789,1 @@\n-      if (buf != NULL) {\n+      if (buf != nullptr) {\n@@ -2806,1 +2806,1 @@\n-  if (isCopy != NULL) {\n+  if (isCopy != nullptr) {\n@@ -2833,1 +2833,1 @@\n-    if (isCopy != NULL) *isCopy = JNI_FALSE;\n+    if (isCopy != nullptr) *isCopy = JNI_FALSE;\n@@ -2839,2 +2839,2 @@\n-    \/* JNI Specification states return NULL on OOM *\/\n-    if (ret != NULL) {\n+    \/* JNI Specification states return null on OOM *\/\n+    if (ret != nullptr) {\n@@ -2846,1 +2846,1 @@\n-    if (isCopy != NULL) *isCopy = JNI_TRUE;\n+    if (isCopy != nullptr) *isCopy = JNI_TRUE;\n@@ -2878,2 +2878,2 @@\n-  if (ret == NULL) {\n-    THROW_OOP_(Universe::out_of_memory_error_c_heap(), NULL);\n+  if (ret == nullptr) {\n+    THROW_OOP_(Universe::out_of_memory_error_c_heap(), nullptr);\n@@ -2907,6 +2907,6 @@\n-static jclass    bufferClass                 = NULL;\n-static jclass    directBufferClass           = NULL;\n-static jclass    directByteBufferClass       = NULL;\n-static jmethodID directByteBufferConstructor = NULL;\n-static jfieldID  directBufferAddressField    = NULL;\n-static jfieldID  bufferCapacityField         = NULL;\n+static jclass    bufferClass                 = nullptr;\n+static jclass    directBufferClass           = nullptr;\n+static jclass    directByteBufferClass       = nullptr;\n+static jmethodID directByteBufferConstructor = nullptr;\n+static jfieldID  directBufferAddressField    = nullptr;\n+static jfieldID  bufferCapacityField         = nullptr;\n@@ -2921,1 +2921,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && result != NULL) {\n+  if (log_is_enabled(Debug, class, resolve) && result != nullptr) {\n@@ -2927,1 +2927,1 @@\n-\/\/ These lookups are done with the NULL (bootstrap) ClassLoader to\n+\/\/ These lookups are done with the null (bootstrap) ClassLoader to\n@@ -2931,3 +2931,3 @@\n-  if ((bufferClass           = lookupOne(env, \"java\/nio\/Buffer\", thread))           == NULL) { return false; }\n-  if ((directBufferClass     = lookupOne(env, \"sun\/nio\/ch\/DirectBuffer\", thread))   == NULL) { return false; }\n-  if ((directByteBufferClass = lookupOne(env, \"java\/nio\/DirectByteBuffer\", thread)) == NULL) { return false; }\n+  if ((bufferClass           = lookupOne(env, \"java\/nio\/Buffer\", thread))           == nullptr) { return false; }\n+  if ((directBufferClass     = lookupOne(env, \"sun\/nio\/ch\/DirectBuffer\", thread))   == nullptr) { return false; }\n+  if ((directByteBufferClass = lookupOne(env, \"java\/nio\/DirectByteBuffer\", thread)) == nullptr) { return false; }\n@@ -2955,2 +2955,2 @@\n-    \/\/ Global refs will be NULL if out-of-memory (no exception is pending)\n-    if (bufferClass == NULL || directBufferClass == NULL || directByteBufferClass == NULL) {\n+    \/\/ Global refs will be null if out-of-memory (no exception is pending)\n+    if (bufferClass == nullptr || directBufferClass == nullptr || directByteBufferClass == nullptr) {\n@@ -2981,3 +2981,3 @@\n-    if ((directByteBufferConstructor == NULL) ||\n-        (directBufferAddressField    == NULL) ||\n-        (bufferCapacityField         == NULL)) {\n+    if ((directByteBufferConstructor == nullptr) ||\n+        (directBufferAddressField    == nullptr) ||\n+        (bufferCapacityField         == nullptr)) {\n@@ -3007,2 +3007,2 @@\n-      HOTSPOT_JNI_NEWDIRECTBYTEBUFFER_RETURN(NULL);\n-      return NULL;\n+      HOTSPOT_JNI_NEWDIRECTBYTEBUFFER_RETURN(nullptr);\n+      return nullptr;\n@@ -3028,1 +3028,1 @@\n-  void* ret = NULL;\n+  void* ret = nullptr;\n@@ -3037,1 +3037,1 @@\n-  if ((buf != NULL) && (!env->IsInstanceOf(buf, directBufferClass))) {\n+  if ((buf != nullptr) && (!env->IsInstanceOf(buf, directBufferClass))) {\n@@ -3064,1 +3064,1 @@\n-  if (buf == NULL) {\n+  if (buf == nullptr) {\n@@ -3100,1 +3100,1 @@\n-  if (thread_obj != NULL && thread_obj->is_a(vmClasses::BasicVirtualThread_klass())) {\n+  if (thread_obj != nullptr && thread_obj->is_a(vmClasses::BasicVirtualThread_klass())) {\n@@ -3110,3 +3110,3 @@\n-    NULL,\n-    NULL,\n-    NULL,\n+    nullptr,\n+    nullptr,\n+    nullptr,\n@@ -3114,1 +3114,1 @@\n-    NULL,\n+    nullptr,\n@@ -3467,1 +3467,1 @@\n-  assert(jt != NULL, \"invariant\");\n+  assert(jt != nullptr, \"invariant\");\n@@ -3687,1 +3687,1 @@\n-    if (numVMs != NULL) *numVMs = 1;\n+    if (numVMs != nullptr) *numVMs = 1;\n@@ -3690,1 +3690,1 @@\n-    if (numVMs != NULL) *numVMs = 0;\n+    if (numVMs != nullptr) *numVMs = 0;\n@@ -3715,1 +3715,1 @@\n-  destroyargs.group = NULL;\n+  destroyargs.group = nullptr;\n@@ -3767,1 +3767,1 @@\n-  if (t != NULL) {\n+  if (t != nullptr) {\n@@ -3811,3 +3811,3 @@\n-  oop group = NULL;\n-  char* thread_name = NULL;\n-  if (args != NULL && Threads::is_supported_jni_version(args->version)) {\n+  oop group = nullptr;\n+  char* thread_name = nullptr;\n+  if (args != nullptr && Threads::is_supported_jni_version(args->version)) {\n@@ -3815,1 +3815,1 @@\n-    thread_name = args->name; \/\/ may be NULL\n+    thread_name = args->name; \/\/ may be null\n@@ -3817,1 +3817,1 @@\n-  if (group == NULL) group = Universe::main_thread_group();\n+  if (group == nullptr) group = Universe::main_thread_group();\n@@ -3892,1 +3892,1 @@\n-  if (current == NULL) {\n+  if (current == nullptr) {\n@@ -3948,1 +3948,1 @@\n-    *penv = NULL;\n+    *penv = nullptr;\n@@ -3955,1 +3955,1 @@\n-    *penv = NULL;\n+    *penv = nullptr;\n@@ -3972,1 +3972,1 @@\n-  if (thread != NULL && thread->is_Java_thread()) {\n+  if (thread != nullptr && thread->is_Java_thread()) {\n@@ -3991,1 +3991,1 @@\n-      *penv = NULL;\n+      *penv = nullptr;\n@@ -3996,1 +3996,1 @@\n-    *penv = NULL;\n+    *penv = nullptr;\n@@ -4019,3 +4019,3 @@\n-    NULL,\n-    NULL,\n-    NULL,\n+    nullptr,\n+    nullptr,\n+    nullptr,\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-    if (cur == NULL || !cur->is_Java_thread()) {                         \\\n+    if (cur == nullptr || !cur->is_Java_thread()) {                      \\\n@@ -104,1 +104,1 @@\n-    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thr));         \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thr));               \\\n@@ -276,1 +276,1 @@\n-  if (oopObj == NULL) {\n+  if (oopObj == nullptr) {\n@@ -306,1 +306,1 @@\n-  if ((s == NULL) || !java_lang_String::is_instance(s))\n+  if ((s == nullptr) || !java_lang_String::is_instance(s))\n@@ -317,1 +317,1 @@\n-  if (aOop == NULL || !aOop->is_array()) {\n+  if (aOop == nullptr || !aOop->is_array()) {\n@@ -372,3 +372,3 @@\n-  if (carray == NULL) {\n-    tty->print_cr(\"%s: elements vector NULL\" PTR_FORMAT, fn_name, p2i(obj));\n-    NativeReportJNIFatalError(thr, \"Elements vector NULL\");\n+  if (carray == nullptr) {\n+    tty->print_cr(\"%s: elements vector null\" PTR_FORMAT, fn_name, p2i(obj));\n+    NativeReportJNIFatalError(thr, \"Elements vector null\");\n@@ -384,1 +384,1 @@\n-  if (orig_result == NULL) {\n+  if (orig_result == nullptr) {\n@@ -390,1 +390,1 @@\n-  if (rsz != NULL) {\n+  if (rsz != nullptr) {\n@@ -425,1 +425,1 @@\n-  if ((obj != NULL) && (JNIHandles::handle_type(thr, obj) != JNIInvalidRefType)) {\n+  if ((obj != nullptr) && (JNIHandles::handle_type(thr, obj) != JNIInvalidRefType)) {\n@@ -430,1 +430,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -438,1 +438,1 @@\n-  if (m == NULL) {\n+  if (m == nullptr) {\n@@ -451,1 +451,1 @@\n-  if (obj == NULL) return NULL;\n+  if (obj == nullptr) return nullptr;\n@@ -454,1 +454,1 @@\n-  if (oopObj == NULL) {\n+  if (oopObj == nullptr) {\n@@ -464,1 +464,1 @@\n-  if (name == NULL) return;  \/\/ implementation accepts NULL so just return\n+  if (name == nullptr) return;  \/\/ implementation accepts null so just return\n@@ -488,1 +488,1 @@\n-  if (mirror == NULL) {\n+  if (mirror == nullptr) {\n@@ -498,1 +498,1 @@\n-  if (!(k != NULL || (allow_primitive && java_lang_Class::is_primitive(mirror)))) {\n+  if (!(k != nullptr || (allow_primitive && java_lang_Class::is_primitive(mirror)))) {\n@@ -506,1 +506,1 @@\n-  assert(klass != NULL, \"klass argument must have a value\");\n+  assert(klass != nullptr, \"klass argument must have a value\");\n@@ -519,1 +519,1 @@\n-  if (clazz != NULL) {\n+  if (clazz != nullptr) {\n@@ -527,1 +527,1 @@\n-  if (obj != NULL) {\n+  if (obj != nullptr) {\n@@ -529,1 +529,1 @@\n-    assert(recv != NULL, \"validate_object checks that\");\n+    assert(recv != nullptr, \"validate_object checks that\");\n@@ -657,3 +657,3 @@\n-      if (oopObj == NULL) {\n-        \/\/ Unchecked Throw tolerates a NULL obj, so just warn\n-        ReportJNIWarning(thr, \"JNI Throw called with NULL throwable\");\n+      if (oopObj == nullptr) {\n+        \/\/ Unchecked Throw tolerates a null obj, so just warn\n+        ReportJNIWarning(thr, \"JNI Throw called with null throwable\");\n@@ -676,1 +676,1 @@\n-      assert(k != NULL, \"validate_class shouldn't return NULL Klass*\");\n+      assert(k != nullptr, \"validate_class shouldn't return null Klass*\");\n@@ -742,1 +742,1 @@\n-      if (lobj != NULL) {\n+      if (lobj != nullptr) {\n@@ -788,1 +788,1 @@\n-       * to NULL objects. If the handles are valid, but contain NULL,\n+       * to nullptr objects. If the handles are valid, but contain nullptr,\n@@ -791,1 +791,1 @@\n-      if (obj1 != NULL && jniCheck::validate_handle(thr, obj1) != NULL) {\n+      if (obj1 != nullptr && jniCheck::validate_handle(thr, obj1) != nullptr) {\n@@ -794,1 +794,1 @@\n-      if (obj2 != NULL && jniCheck::validate_handle(thr, obj2) != NULL) {\n+      if (obj2 != nullptr && jniCheck::validate_handle(thr, obj2) != nullptr) {\n@@ -808,1 +808,1 @@\n-      if (ref != NULL) {\n+      if (ref != nullptr) {\n@@ -935,1 +935,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj); \\\n+      jniCheck::validate_call(thr, nullptr, methodID, obj); \\\n@@ -953,1 +953,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj); \\\n+      jniCheck::validate_call(thr, nullptr, methodID, obj); \\\n@@ -969,1 +969,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj); \\\n+      jniCheck::validate_call(thr, nullptr, methodID, obj); \\\n@@ -996,1 +996,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj);\n+      jniCheck::validate_call(thr, nullptr, methodID, obj);\n@@ -1012,1 +1012,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj);\n+      jniCheck::validate_call(thr, nullptr, methodID, obj);\n@@ -1026,1 +1026,1 @@\n-      jniCheck::validate_call(thr, NULL, methodID, obj);\n+      jniCheck::validate_call(thr, nullptr, methodID, obj);\n@@ -1445,1 +1445,1 @@\n-    jchar* new_result = NULL;\n+    jchar* new_result = nullptr;\n@@ -1447,3 +1447,3 @@\n-    assert (isCopy == NULL || *isCopy == JNI_TRUE, \"GetStringChars didn't return a copy as expected\");\n-    if (result != NULL) {\n-      size_t len = UNCHECKED()->GetStringLength(env,str) + 1; \/\/ + 1 for NULL termination\n+    assert (isCopy == nullptr || *isCopy == JNI_TRUE, \"GetStringChars didn't return a copy as expected\");\n+    if (result != nullptr) {\n+      size_t len = UNCHECKED()->GetStringLength(env,str) + 1; \/\/ + 1 for null termination\n@@ -1452,1 +1452,1 @@\n-      if (new_result == NULL) {\n+      if (new_result == nullptr) {\n@@ -1471,1 +1471,1 @@\n-    if (chars == NULL) {\n+    if (chars == nullptr) {\n@@ -1529,1 +1529,1 @@\n-    char* new_result = NULL;\n+    char* new_result = nullptr;\n@@ -1531,3 +1531,3 @@\n-    assert (isCopy == NULL || *isCopy == JNI_TRUE, \"GetStringUTFChars didn't return a copy as expected\");\n-    if (result != NULL) {\n-      size_t len = strlen(result) + 1; \/\/ + 1 for NULL termination\n+    assert (isCopy == nullptr || *isCopy == JNI_TRUE, \"GetStringUTFChars didn't return a copy as expected\");\n+    if (result != nullptr) {\n+      size_t len = strlen(result) + 1; \/\/ + 1 for null termination\n@@ -1535,1 +1535,1 @@\n-      if (new_result == NULL) {\n+      if (new_result == nullptr) {\n@@ -1554,1 +1554,1 @@\n-    if (chars == NULL) {\n+    if (chars == nullptr) {\n@@ -1660,1 +1660,1 @@\n-    if (result != NULL) { \\\n+    if (result != nullptr) { \\\n@@ -1841,1 +1841,1 @@\n-    if (result != NULL) {\n+    if (result != nullptr) {\n@@ -1897,1 +1897,1 @@\n-      if (obj != NULL) {\n+      if (obj != nullptr) {\n@@ -2001,3 +2001,3 @@\n-    NULL,\n-    NULL,\n-    NULL,\n+    nullptr,\n+    nullptr,\n+    nullptr,\n@@ -2005,1 +2005,1 @@\n-    NULL,\n+    nullptr,\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-  static void validate_call(JavaThread* thr, jclass clazz, jmethodID method_id, jobject obj = NULL);\n+  static void validate_call(JavaThread* thr, jclass clazz, jmethodID method_id, jobject obj = nullptr);\n","filename":"src\/hotspot\/share\/prims\/jniCheck.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,1 @@\n-  const char * source_file = NULL;\n+  const char * source_file = nullptr;\n@@ -152,1 +152,1 @@\n-  InstanceKlass* caller = NULL;\n+  InstanceKlass* caller = nullptr;\n@@ -163,1 +163,1 @@\n-    Method* last_caller = NULL;\n+    Method* last_caller = nullptr;\n@@ -189,1 +189,1 @@\n-    } else if (last_caller != NULL &&\n+    } else if (last_caller != nullptr &&\n@@ -209,1 +209,1 @@\n-      if (s != NULL) {\n+      if (s != nullptr) {\n@@ -214,1 +214,1 @@\n-  if (caller != NULL) {\n+  if (caller != nullptr) {\n@@ -219,1 +219,1 @@\n-      if (source_file != NULL) {\n+      if (source_file != nullptr) {\n@@ -292,1 +292,1 @@\n-  if (src == NULL || dst == NULL) {\n+  if (src == nullptr || dst == nullptr) {\n@@ -309,1 +309,1 @@\n-  Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK);\n+  Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != nullptr ? value : \"\"), CHECK);\n@@ -342,1 +342,1 @@\n-  while (p != NULL) {\n+  while (p != nullptr) {\n@@ -347,1 +347,1 @@\n-        Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK_NULL);\n+        Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != nullptr ? value : \"\"), CHECK_NULL);\n@@ -511,1 +511,1 @@\n-  if (!ShowCodeDetailsInExceptionMessages) return NULL;\n+  if (!ShowCodeDetailsInExceptionMessages) return nullptr;\n@@ -518,1 +518,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -521,1 +521,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -530,1 +530,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -560,1 +560,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"doStackWalk: no stack trace\", NULL);\n+    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"doStackWalk: no stack trace\", nullptr);\n@@ -574,1 +574,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(), \"not enough space in buffers\", NULL);\n+    THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(), \"not enough space in buffers\", nullptr);\n@@ -615,2 +615,2 @@\n-  \/\/ as implemented in the classic virtual machine; return 0 if object is NULL\n-  return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\n+  \/\/ as implemented in the classic virtual machine; return 0 if object is null\n+  return handle == nullptr ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\n@@ -676,1 +676,1 @@\n-  oop new_obj_oop = NULL;\n+  oop new_obj_oop = nullptr;\n@@ -738,1 +738,1 @@\n-    assert(m != NULL, \"sanity\");\n+    assert(m != nullptr, \"sanity\");\n@@ -760,1 +760,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -765,1 +765,1 @@\n-  oop mirror = NULL;\n+  oop mirror = nullptr;\n@@ -770,1 +770,1 @@\n-  if (mirror == NULL) {\n+  if (mirror == nullptr) {\n@@ -784,1 +784,1 @@\n-  if (name == NULL || (int)strlen(name) > Symbol::max_length()) {\n+  if (name == nullptr || (int)strlen(name) > Symbol::max_length()) {\n@@ -787,1 +787,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -793,2 +793,2 @@\n-  if (k == NULL) {\n-    return NULL;\n+  if (k == nullptr) {\n+    return nullptr;\n@@ -813,1 +813,1 @@\n-  oop protection_domain = NULL;\n+  oop protection_domain = nullptr;\n@@ -817,1 +817,1 @@\n-  \/\/ The caller is also passed as NULL by the java code if there is no security\n+  \/\/ The caller is also passed as null by the java code if there is no security\n@@ -819,1 +819,1 @@\n-  if (from_class != NULL && loader_oop != NULL) {\n+  if (from_class != nullptr && loader_oop != nullptr) {\n@@ -828,1 +828,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && result != NULL) {\n+  if (log_is_enabled(Debug, class, resolve) && result != nullptr) {\n@@ -841,2 +841,2 @@\n-  Klass* from_class = (from_class_oop == NULL)\n-                           ? (Klass*)NULL\n+  Klass* from_class = (from_class_oop == nullptr)\n+                           ? (Klass*)nullptr\n@@ -844,3 +844,3 @@\n-  oop class_loader = NULL;\n-  oop protection_domain = NULL;\n-  if (from_class != NULL) {\n+  oop class_loader = nullptr;\n+  oop protection_domain = nullptr;\n+  if (from_class != nullptr) {\n@@ -855,1 +855,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && result != NULL) {\n+  if (log_is_enabled(Debug, class, resolve) && result != nullptr) {\n@@ -876,1 +876,1 @@\n-  if (source == NULL)  source = \"__JVM_DefineClass__\";\n+  if (source == nullptr)  source = \"__JVM_DefineClass__\";\n@@ -892,1 +892,1 @@\n-  TempNewSymbol class_name = name == NULL ? NULL :\n+  TempNewSymbol class_name = name == nullptr ? nullptr :\n@@ -931,1 +931,1 @@\n-  if (lookup_k == NULL) {\n+  if (lookup_k == nullptr) {\n@@ -943,1 +943,1 @@\n-  InstanceKlass* host_class = NULL;\n+  InstanceKlass* host_class = nullptr;\n@@ -958,1 +958,1 @@\n-    if (classData != NULL) {\n+    if (classData != nullptr) {\n@@ -977,1 +977,1 @@\n-  TempNewSymbol class_name = name == NULL ? NULL :\n+  TempNewSymbol class_name = name == nullptr ? nullptr :\n@@ -985,1 +985,1 @@\n-  InstanceKlass* ik = NULL;\n+  InstanceKlass* ik = nullptr;\n@@ -1037,1 +1037,1 @@\n-  return jvm_define_class_common(name, loader, buf, len, pd, NULL, THREAD);\n+  return jvm_define_class_common(name, loader, buf, len, pd, nullptr, THREAD);\n@@ -1054,1 +1054,1 @@\n-  if (lookup == NULL) {\n+  if (lookup == nullptr) {\n@@ -1058,1 +1058,1 @@\n-  assert(buf != NULL, \"buf must not be NULL\");\n+  assert(buf != nullptr, \"buf must not be null\");\n@@ -1075,1 +1075,1 @@\n-  if (str == NULL) return NULL;\n+  if (str == nullptr) return nullptr;\n@@ -1090,1 +1090,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1096,1 +1096,1 @@\n-  \/\/   us to pass the NULL as the initiating class loader.\n+  \/\/   us to pass the null as the initiating class loader.\n@@ -1102,1 +1102,1 @@\n-  if (k == NULL) {\n+  if (k == nullptr) {\n@@ -1108,1 +1108,1 @@\n-  return (k == NULL) ? NULL :\n+  return (k == nullptr) ? nullptr :\n@@ -1156,1 +1156,1 @@\n-  assert (cls != NULL, \"illegal class\");\n+  assert (cls != nullptr, \"illegal class\");\n@@ -1234,1 +1234,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1240,2 +1240,2 @@\n-  \/\/ is an array, return NULL.\n-  if (signers == NULL) return NULL;\n+  \/\/ is an array, return null.\n+  if (signers == nullptr) return nullptr;\n@@ -1271,2 +1271,2 @@\n-  if (mirror == NULL) {\n-    THROW_(vmSymbols::java_lang_NullPointerException(), NULL);\n+  if (mirror == nullptr) {\n+    THROW_(vmSymbols::java_lang_NullPointerException(), nullptr);\n@@ -1277,1 +1277,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1292,1 +1292,1 @@\n-  if (!UsePrivilegedStack) return NULL;\n+  if (!UsePrivilegedStack) return nullptr;\n@@ -1302,2 +1302,2 @@\n-  oop previous_protection_domain = NULL;\n-  Handle privileged_context(thread, NULL);\n+  oop previous_protection_domain = nullptr;\n+  Handle privileged_context(thread, nullptr);\n@@ -1305,1 +1305,1 @@\n-  oop protection_domain = NULL;\n+  oop protection_domain = nullptr;\n@@ -1336,1 +1336,1 @@\n-    if ((previous_protection_domain != protection_domain) && (protection_domain != NULL)) {\n+    if ((previous_protection_domain != protection_domain) && (protection_domain != nullptr)) {\n@@ -1348,1 +1348,1 @@\n-    if (is_privileged && privileged_context.is_null()) return NULL;\n+    if (is_privileged && privileged_context.is_null()) return nullptr;\n@@ -1406,1 +1406,1 @@\n-      if (result() != NULL) {\n+      if (result() != nullptr) {\n@@ -1412,1 +1412,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1417,1 +1417,1 @@\n-  return (k != NULL) && k->is_array_klass() ? true : false;\n+  return (k != nullptr) && k->is_array_klass() ? true : false;\n@@ -1514,1 +1514,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1518,1 +1518,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1524,2 +1524,2 @@\n-  if (outer_klass == NULL)  return NULL;  \/\/ already a top-level class\n-  if (!inner_is_member)  return NULL;     \/\/ a hidden class (inside a method)\n+  if (outer_klass == nullptr)  return nullptr;  \/\/ already a top-level class\n+  if (!inner_is_member)  return nullptr;     \/\/ a hidden class (inside a method)\n@@ -1534,1 +1534,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1538,1 +1538,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1550,1 +1550,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1555,1 +1555,1 @@\n-  assert (cls != NULL, \"illegal class\");\n+  assert (cls != nullptr, \"illegal class\");\n@@ -1564,1 +1564,1 @@\n-      if (sym == NULL) return NULL;\n+      if (sym == nullptr) return nullptr;\n@@ -1569,1 +1569,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1574,1 +1574,1 @@\n-  assert (cls != NULL, \"illegal class\");\n+  assert (cls != nullptr, \"illegal class\");\n@@ -1584,1 +1584,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1621,1 +1621,1 @@\n-  oop mirror    = NULL;\n+  oop mirror    = nullptr;\n@@ -1636,2 +1636,2 @@\n-  assert(m != NULL, \"cannot find method\");\n-  return m;  \/\/ caller has to deal with NULL in product mode\n+  assert(m != nullptr, \"cannot find method\");\n+  return m;  \/\/ caller has to deal with null in product mode\n@@ -1643,1 +1643,1 @@\n-  assert (cls != NULL, \"illegal class\");\n+  assert (cls != nullptr, \"illegal class\");\n@@ -1650,1 +1650,1 @@\n-      if (type_annotations != NULL) {\n+      if (type_annotations != nullptr) {\n@@ -1656,1 +1656,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1660,1 +1660,1 @@\n-  assert (method != NULL, \"illegal method\");\n+  assert (method != nullptr, \"illegal method\");\n@@ -1663,2 +1663,2 @@\n-  if (m == NULL) {\n-    return NULL;\n+  if (m == nullptr) {\n+    return nullptr;\n@@ -1668,1 +1668,1 @@\n-  if (type_annotations != NULL) {\n+  if (type_annotations != nullptr) {\n@@ -1673,1 +1673,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1677,1 +1677,1 @@\n-  assert (field != NULL, \"illegal field\");\n+  assert (field != nullptr, \"illegal field\");\n@@ -1681,1 +1681,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1706,1 +1706,1 @@\n-    return (jobjectArray)NULL;\n+    return (jobjectArray)nullptr;\n@@ -1731,1 +1731,1 @@\n-      \/\/ For a 0 index, give a NULL symbol\n+      \/\/ For a 0 index, give a null symbol\n@@ -1733,1 +1733,1 @@\n-        mh->constants()->symbol_at(params[i].name_cp_index) : NULL;\n+        mh->constants()->symbol_at(params[i].name_cp_index) : nullptr;\n@@ -1800,1 +1800,1 @@\n-  if (k != NULL && k->is_instance_klass()) {\n+  if (k != nullptr && k->is_instance_klass()) {\n@@ -1810,1 +1810,1 @@\n-\/\/ or NULL if the attribute is not present.\n+\/\/ or null if the attribute is not present.\n@@ -1821,1 +1821,1 @@\n-  if (components != NULL) {\n+  if (components != nullptr) {\n@@ -1832,1 +1832,1 @@\n-      assert(component != NULL, \"unexpected NULL record component\");\n+      assert(component != nullptr, \"unexpected null record component\");\n@@ -1839,1 +1839,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1906,1 +1906,1 @@\n-      result->obj_at_put(i, NULL);\n+      result->obj_at_put(i, nullptr);\n@@ -1969,1 +1969,1 @@\n-  return (jclass) (host == NULL ? NULL :\n+  return (jclass) (host == nullptr ? nullptr :\n@@ -1988,1 +1988,1 @@\n-    int length = members == NULL ? 0 : members->length();\n+    int length = members == nullptr ? 0 : members->length();\n@@ -2004,1 +2004,1 @@\n-            return NULL; \/\/ propagate VMEs\n+            return nullptr; \/\/ propagate VMEs\n@@ -2080,1 +2080,1 @@\n-          return NULL; \/\/ propagate VMEs\n+          return nullptr; \/\/ propagate VMEs\n@@ -2110,1 +2110,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2131,1 +2131,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2166,1 +2166,1 @@\n-  if (k == NULL) return NULL;\n+  if (k == nullptr) return nullptr;\n@@ -2182,1 +2182,1 @@\n-    if (k_o == NULL) return NULL;\n+    if (k_o == nullptr) return nullptr;\n@@ -2231,1 +2231,1 @@\n-    if (k_o == NULL) return NULL;\n+    if (k_o == nullptr) return nullptr;\n@@ -2238,1 +2238,1 @@\n-  if (target_klass == NULL) {\n+  if (target_klass == nullptr) {\n@@ -2440,1 +2440,1 @@\n-  assert(cls != NULL, \"bad class\");\n+  assert(cls != nullptr, \"bad class\");\n@@ -2452,1 +2452,1 @@\n-  bool system_class = k->class_loader() == NULL;\n+  bool system_class = k->class_loader() == nullptr;\n@@ -2674,1 +2674,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2690,1 +2690,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2706,1 +2706,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2721,1 +2721,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2748,1 +2748,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2767,1 +2767,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2881,1 +2881,1 @@\n-  if (Arguments::vfprintf_hook() != NULL) {\n+  if (Arguments::vfprintf_hook() != nullptr) {\n@@ -2901,1 +2901,1 @@\n-  if (Arguments::vfprintf_hook() != NULL) {\n+  if (Arguments::vfprintf_hook() != nullptr) {\n@@ -2954,1 +2954,1 @@\n-  JavaThread *native_thread = NULL;\n+  JavaThread *native_thread = nullptr;\n@@ -2974,1 +2974,1 @@\n-    if (java_lang_Thread::thread(JNIHandles::resolve_non_null(jthread)) != NULL) {\n+    if (java_lang_Thread::thread(JNIHandles::resolve_non_null(jthread)) != nullptr) {\n@@ -2994,1 +2994,1 @@\n-      if (native_thread->osthread() != NULL) {\n+      if (native_thread->osthread() != nullptr) {\n@@ -3005,1 +3005,1 @@\n-  assert(native_thread != NULL, \"Starting null thread?\");\n+  assert(native_thread != nullptr, \"Starting null thread?\");\n@@ -3007,1 +3007,1 @@\n-  if (native_thread->osthread() == NULL) {\n+  if (native_thread->osthread() == nullptr) {\n@@ -3037,2 +3037,2 @@\n-  oop java_thread = NULL;\n-  JavaThread* receiver = NULL;\n+  oop java_thread = nullptr;\n+  JavaThread* receiver = nullptr;\n@@ -3096,1 +3096,1 @@\n-  assert(jthread != NULL, \"no current carrier thread!\");\n+  assert(jthread != nullptr, \"no current carrier thread!\");\n@@ -3102,1 +3102,1 @@\n-  assert(theThread != (oop)NULL, \"no current thread!\");\n+  assert(theThread != (oop)nullptr, \"no current thread!\");\n@@ -3119,2 +3119,2 @@\n-  JavaThread* receiver = NULL;\n-  bool is_alive = tlh.cv_internal_thread_to_JavaThread(jthread, &receiver, NULL);\n+  JavaThread* receiver = nullptr;\n+  bool is_alive = tlh.cv_internal_thread_to_JavaThread(jthread, &receiver, nullptr);\n@@ -3130,1 +3130,1 @@\n-  if (obj == NULL) {\n+  if (obj == nullptr) {\n@@ -3183,1 +3183,1 @@\n-  if (vmClasses::reflect_CallerSensitive_klass() != NULL) {\n+  if (vmClasses::reflect_CallerSensitive_klass() != nullptr) {\n@@ -3241,1 +3241,1 @@\n-  if (ref != NULL) {\n+  if (ref != nullptr) {\n@@ -3272,1 +3272,1 @@\n-  if (java_lang_ref_Reference::unknown_referent_no_keepalive(ref_oop) == NULL) {\n+  if (java_lang_ref_Reference::unknown_referent_no_keepalive(ref_oop) == nullptr) {\n@@ -3306,1 +3306,1 @@\n-    if (loader != NULL && !SystemDictionary::is_platform_class_loader(loader)) {\n+    if (loader != nullptr && !SystemDictionary::is_platform_class_loader(loader)) {\n@@ -3314,1 +3314,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -3323,1 +3323,1 @@\n-  if (arr == NULL) {\n+  if (arr == nullptr) {\n@@ -3423,1 +3423,1 @@\n-  if (load_result == NULL) {\n+  if (load_result == nullptr) {\n@@ -3456,1 +3456,1 @@\n-                    find_result != NULL ? \"Found\" : \"Failed to find\",\n+                    find_result != nullptr ? \"Found\" : \"Failed to find\",\n@@ -3481,1 +3481,1 @@\n-  if (str == NULL) return NULL;\n+  if (str == nullptr) return nullptr;\n@@ -3529,1 +3529,1 @@\n-  \/\/   us to pass the NULL as the initiating class loader.  The VM is responsible for\n+  \/\/   us to pass the null as the initiating class loader.  The VM is responsible for\n@@ -3531,1 +3531,1 @@\n-  \/\/   protection_domain. The protection_domain is passed as NULL by the java code\n+  \/\/   protection_domain. The protection_domain is passed as null by the java code\n@@ -3555,1 +3555,1 @@\n-      assert(ret_type != NULL, \"sanity check: ret_type oop must not be NULL!\");\n+      assert(ret_type != nullptr, \"sanity check: ret_type oop must not be null!\");\n@@ -3618,2 +3618,2 @@\n-  Symbol* interface_method_name = NULL;\n-  if (interfaceMethodName != NULL) {\n+  Symbol* interface_method_name = nullptr;\n+  if (interfaceMethodName != nullptr) {\n@@ -3649,3 +3649,3 @@\n-  if (interfaceMethodName == NULL || factoryType == NULL || interfaceMethodType == NULL ||\n-      implementationMember == NULL || dynamicMethodType == NULL) {\n-    THROW_(vmSymbols::java_lang_NullPointerException(), NULL);\n+  if (interfaceMethodName == nullptr || factoryType == nullptr || interfaceMethodType == nullptr ||\n+      implementationMember == nullptr || dynamicMethodType == nullptr) {\n+    THROW_(vmSymbols::java_lang_NullPointerException(), nullptr);\n@@ -3658,1 +3658,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3677,2 +3677,2 @@\n-  jclass jcls = NULL;\n-  if (lambda_ik != NULL) {\n+  jclass jcls = nullptr;\n+  if (lambda_ik != nullptr) {\n@@ -3680,1 +3680,1 @@\n-    jcls = loaded_lambda == NULL ? NULL : (jclass) JNIHandles::make_local(THREAD, loaded_lambda->java_mirror());\n+    jcls = loaded_lambda == nullptr ? nullptr : (jclass) JNIHandles::make_local(THREAD, loaded_lambda->java_mirror());\n@@ -3684,1 +3684,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -3729,1 +3729,1 @@\n-  if (line != NULL) {\n+  if (line != nullptr) {\n@@ -3792,1 +3792,1 @@\n-  if (threads == NULL) {\n+  if (threads == nullptr) {\n@@ -3849,2 +3849,2 @@\n-  if (ofClass == NULL) {\n-    return NULL;\n+  if (ofClass == nullptr) {\n+    return nullptr;\n@@ -3855,1 +3855,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3859,1 +3859,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3864,1 +3864,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3892,1 +3892,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3947,1 +3947,1 @@\n-    if (state != NULL && state->is_pending_interp_only_mode()) {\n+    if (state != nullptr && state->is_pending_interp_only_mode()) {\n@@ -4005,1 +4005,1 @@\n-  if (last_unmount && thread->jvmti_thread_state() != NULL) {\n+  if (last_unmount && thread->jvmti_thread_state() != nullptr) {\n@@ -4007,1 +4007,1 @@\n-    thread->set_jvmti_thread_state(NULL);\n+    thread->set_jvmti_thread_state(nullptr);\n@@ -4009,1 +4009,1 @@\n-    java_lang_Thread::set_jvmti_thread_state(vt, NULL);\n+    java_lang_Thread::set_jvmti_thread_state(vt, nullptr);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":170,"deletions":170,"binary":false,"changes":340,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,2 +74,2 @@\n-    AnnotationArray* anno = fields_anno == NULL ? NULL : fields_anno->at(fs.index());\n-    AnnotationArray* type_anno = fields_type_anno == NULL ? NULL : fields_type_anno->at(fs.index());\n+    AnnotationArray* anno = fields_anno == nullptr ? nullptr : fields_anno->at(fs.index());\n+    AnnotationArray* type_anno = fields_type_anno == nullptr ? nullptr : fields_type_anno->at(fs.index());\n@@ -98,1 +98,1 @@\n-    if (anno != NULL) {\n+    if (anno != nullptr) {\n@@ -101,1 +101,1 @@\n-    if (type_anno != NULL) {\n+    if (type_anno != nullptr) {\n@@ -118,1 +118,1 @@\n-    if (anno != NULL) {\n+    if (anno != nullptr) {\n@@ -121,1 +121,1 @@\n-    if (type_anno != NULL) {\n+    if (type_anno != nullptr) {\n@@ -322,1 +322,1 @@\n-  assert(ik()->source_file_name() != NULL, \"caller must check\");\n+  assert(ik()->source_file_name() != nullptr, \"caller must check\");\n@@ -336,1 +336,1 @@\n-  assert(ik()->source_debug_extension() != NULL, \"caller must check\");\n+  assert(ik()->source_debug_extension() != nullptr, \"caller must check\");\n@@ -496,1 +496,1 @@\n-    if (component->annotations() != NULL) {\n+    if (component->annotations() != nullptr) {\n@@ -499,1 +499,1 @@\n-    if (component->type_annotations() != NULL) {\n+    if (component->type_annotations() != nullptr) {\n@@ -515,1 +515,1 @@\n-    if (component->annotations() != NULL) {\n+    if (component->annotations() != nullptr) {\n@@ -518,1 +518,1 @@\n-    if (component->type_annotations() != NULL) {\n+    if (component->type_annotations() != nullptr) {\n@@ -714,1 +714,1 @@\n-  if (default_anno != NULL) {\n+  if (default_anno != nullptr) {\n@@ -727,1 +727,1 @@\n-  if (anno != NULL) {\n+  if (anno != nullptr) {\n@@ -730,1 +730,1 @@\n-  if (param_anno != NULL) {\n+  if (param_anno != nullptr) {\n@@ -733,1 +733,1 @@\n-  if (type_anno != NULL) {\n+  if (type_anno != nullptr) {\n@@ -744,1 +744,1 @@\n-  if (default_anno != NULL) {\n+  if (default_anno != nullptr) {\n@@ -757,1 +757,1 @@\n-  if (anno != NULL) {\n+  if (anno != nullptr) {\n@@ -760,1 +760,1 @@\n-  if (param_anno != NULL) {\n+  if (param_anno != nullptr) {\n@@ -763,1 +763,1 @@\n-  if (type_anno != NULL) {\n+  if (type_anno != nullptr) {\n@@ -778,1 +778,1 @@\n-  if (generic_signature != NULL) {\n+  if (generic_signature != nullptr) {\n@@ -781,1 +781,1 @@\n-  if (ik()->source_file_name() != NULL) {\n+  if (ik()->source_file_name() != nullptr) {\n@@ -784,1 +784,1 @@\n-  if (ik()->source_debug_extension() != NULL) {\n+  if (ik()->source_debug_extension() != nullptr) {\n@@ -790,1 +790,1 @@\n-  if (anno != NULL) {\n+  if (anno != nullptr) {\n@@ -793,1 +793,1 @@\n-  if (type_anno != NULL) {\n+  if (type_anno != nullptr) {\n@@ -796,1 +796,1 @@\n-  if (cpool()->operands() != NULL) {\n+  if (cpool()->operands() != nullptr) {\n@@ -808,1 +808,1 @@\n-  if (ik()->record_components() != NULL) {\n+  if (ik()->record_components() != nullptr) {\n@@ -814,1 +814,1 @@\n-  if (generic_signature != NULL) {\n+  if (generic_signature != nullptr) {\n@@ -817,1 +817,1 @@\n-  if (ik()->source_file_name() != NULL) {\n+  if (ik()->source_file_name() != nullptr) {\n@@ -820,1 +820,1 @@\n-  if (ik()->source_debug_extension() != NULL) {\n+  if (ik()->source_debug_extension() != nullptr) {\n@@ -823,1 +823,1 @@\n-  if (anno != NULL) {\n+  if (anno != nullptr) {\n@@ -826,1 +826,1 @@\n-  if (type_anno != NULL) {\n+  if (type_anno != nullptr) {\n@@ -838,1 +838,1 @@\n-  if (ik()->record_components() != NULL) {\n+  if (ik()->record_components() != nullptr) {\n@@ -841,1 +841,1 @@\n-  if (cpool()->operands() != NULL) {\n+  if (cpool()->operands() != nullptr) {\n@@ -922,1 +922,1 @@\n-  write_u2(super_class == NULL? 0 :  \/\/ zero for java.lang.Object\n+  write_u2(super_class == nullptr? 0 :  \/\/ zero for java.lang.Object\n@@ -970,1 +970,1 @@\n-  assert(sym != NULL, \"attribute name symbol not found\");\n+  assert(sym != nullptr, \"attribute name symbol not found\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-    if (_symmap != NULL) {\n+    if (_symmap != nullptr) {\n@@ -61,1 +61,1 @@\n-      _symmap = NULL;\n+      _symmap = nullptr;\n@@ -63,1 +63,1 @@\n-    if (_classmap != NULL) {\n+    if (_classmap != nullptr) {\n@@ -65,1 +65,1 @@\n-      _classmap = NULL;\n+      _classmap = nullptr;\n@@ -76,2 +76,2 @@\n-    if (cpool_bytes == NULL) {\n-      assert(cpool_bytes != NULL, \"cpool_bytes pointer must not be NULL\");\n+    if (cpool_bytes == nullptr) {\n+      assert(cpool_bytes != nullptr, \"cpool_bytes pointer must not be null\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-\/\/ while (blob != NULL) {\n+\/\/ while (blob != null) {\n@@ -73,1 +73,1 @@\n-    _code_blobs = NULL;\n+    _code_blobs = nullptr;\n@@ -77,1 +77,1 @@\n-    if (_code_blobs != NULL) {\n+    if (_code_blobs != nullptr) {\n@@ -90,1 +90,1 @@\n-    assert(_code_blobs != NULL, \"not collected\");\n+    assert(_code_blobs != nullptr, \"not collected\");\n@@ -92,1 +92,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -102,1 +102,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -173,1 +173,1 @@\n-  assert(_global_code_blobs == NULL, \"checking\");\n+  assert(_global_code_blobs == nullptr, \"checking\");\n@@ -179,1 +179,1 @@\n-  for (StubCodeDesc* desc = StubCodeDesc::first(); desc != NULL; desc = StubCodeDesc::next(desc)) {\n+  for (StubCodeDesc* desc = StubCodeDesc::first(); desc != nullptr; desc = StubCodeDesc::next(desc)) {\n@@ -195,1 +195,1 @@\n-  _global_code_blobs = NULL;\n+  _global_code_blobs = nullptr;\n@@ -215,1 +215,1 @@\n-  while (blob != NULL) {\n+  while (blob != nullptr) {\n@@ -265,1 +265,1 @@\n-  jvmtiAddrLocationMap* map = NULL;\n+  jvmtiAddrLocationMap* map = nullptr;\n","filename":"src\/hotspot\/share\/prims\/jvmtiCodeBlobEvents.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  assert(thread->deferred_updates() == NULL, \"already allocated\");\n+  assert(thread->deferred_updates() == nullptr, \"already allocated\");\n@@ -43,1 +43,1 @@\n-  if (thread->deferred_updates() == NULL) {\n+  if (thread->deferred_updates() == nullptr) {\n@@ -52,1 +52,1 @@\n-  if (updates != NULL) {\n+  if (updates != nullptr) {\n@@ -56,1 +56,1 @@\n-      jt->set_deferred_updates(NULL);\n+      jt->set_deferred_updates(nullptr);\n@@ -64,1 +64,1 @@\n-  if (updates != NULL) {\n+  if (updates != nullptr) {\n@@ -81,1 +81,1 @@\n-      jt->set_deferred_updates(NULL);\n+      jt->set_deferred_updates(nullptr);\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-    return jt->deferred_updates() == NULL ? NULL : jt->deferred_updates()->deferred_locals();\n+    return jt->deferred_updates() == nullptr ? nullptr : jt->deferred_updates()->deferred_locals();\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-\/\/ mem_ptr - pre-checked for NULL\n+\/\/ mem_ptr - pre-checked for null\n@@ -140,1 +140,1 @@\n-\/\/ mem - NULL is a valid value, must be checked\n+\/\/ mem - null is a valid value, must be checked\n@@ -147,1 +147,1 @@\n-\/\/ data - NULL is a valid value, must be checked\n+\/\/ data - null is a valid value, must be checked\n@@ -151,1 +151,1 @@\n-  JvmtiThreadState* state = NULL;\n+  JvmtiThreadState* state = nullptr;\n@@ -155,3 +155,3 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n-  if (thread == NULL) {\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n+  if (thread == nullptr) {\n@@ -167,3 +167,3 @@\n-  if (state == NULL) {\n-    if (data == NULL) {\n-      \/\/ leaving state unset same as data set to NULL\n+  if (state == nullptr) {\n+    if (data == nullptr) {\n+      \/\/ leaving state unset same as data set to null\n@@ -176,1 +176,1 @@\n-    if (state == NULL) {\n+    if (state == nullptr) {\n@@ -186,1 +186,1 @@\n-\/\/ data_ptr - pre-checked for NULL\n+\/\/ data_ptr - pre-checked for null\n@@ -190,1 +190,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -192,1 +192,1 @@\n-    *data_ptr = (state == NULL) ? NULL :\n+    *data_ptr = (state == nullptr) ? nullptr :\n@@ -208,2 +208,2 @@\n-    JavaThread* java_thread = NULL;\n-    oop thread_obj = NULL;\n+    JavaThread* java_thread = nullptr;\n+    oop thread_obj = nullptr;\n@@ -218,1 +218,1 @@\n-    *data_ptr = (state == NULL) ? NULL :\n+    *data_ptr = (state == nullptr) ? nullptr :\n@@ -228,2 +228,2 @@\n-\/\/ module_count_ptr - pre-checked for NULL\n-\/\/ modules_ptr - pre-checked for NULL\n+\/\/ module_count_ptr - pre-checked for null\n+\/\/ modules_ptr - pre-checked for null\n@@ -238,3 +238,3 @@\n-\/\/ class_loader - NULL is a valid value, must be pre-checked\n-\/\/ package_name - pre-checked for NULL\n-\/\/ module_ptr - pre-checked for NULL\n+\/\/ class_loader - null is a valid value, must be pre-checked\n+\/\/ package_name - pre-checked for null\n+\/\/ module_ptr - pre-checked for null\n@@ -252,1 +252,1 @@\n-  *module_ptr = module != NULL ? JNIHandles::make_local(THREAD, module) : NULL;\n+  *module_ptr = module != nullptr ? JNIHandles::make_local(THREAD, module) : nullptr;\n@@ -257,2 +257,2 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ to_module - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ to_module - pre-checked for null\n@@ -277,3 +277,3 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ pkg_name - pre-checked for NULL\n-\/\/ to_module - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ pkg_name - pre-checked for null\n+\/\/ to_module - pre-checked for null\n@@ -299,3 +299,3 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ pkg_name - pre-checked for NULL\n-\/\/ to_module - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ pkg_name - pre-checked for null\n+\/\/ to_module - pre-checked for null\n@@ -321,2 +321,2 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ service - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ service - pre-checked for null\n@@ -342,3 +342,3 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ service - pre-checked for NULL\n-\/\/ impl_class - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ service - pre-checked for null\n+\/\/ impl_class - pre-checked for null\n@@ -369,2 +369,2 @@\n-\/\/ module - pre-checked for NULL\n-\/\/ is_modifiable_class_ptr - pre-checked for NULL\n+\/\/ module - pre-checked for null\n+\/\/ is_modifiable_class_ptr - pre-checked for null\n@@ -390,2 +390,2 @@\n-\/\/ class_count_ptr - pre-checked for NULL\n-\/\/ classes_ptr - pre-checked for NULL\n+\/\/ class_count_ptr - pre-checked for null\n+\/\/ classes_ptr - pre-checked for null\n@@ -398,3 +398,3 @@\n-\/\/ initiating_loader - NULL is a valid value, must be checked\n-\/\/ class_count_ptr - pre-checked for NULL\n-\/\/ classes_ptr - pre-checked for NULL\n+\/\/ initiating_loader - null is a valid value, must be checked\n+\/\/ class_count_ptr - pre-checked for null\n+\/\/ classes_ptr - pre-checked for null\n@@ -408,1 +408,1 @@\n-\/\/ is_modifiable_class_ptr - pre-checked for NULL\n+\/\/ is_modifiable_class_ptr - pre-checked for null\n@@ -417,1 +417,1 @@\n-\/\/ classes - pre-checked for NULL\n+\/\/ classes - pre-checked for null\n@@ -435,1 +435,1 @@\n-    if (k_mirror == NULL) {\n+    if (k_mirror == nullptr) {\n@@ -454,1 +454,1 @@\n-    if (ik->get_cached_class_file_bytes() == NULL) {\n+    if (ik->get_cached_class_file_bytes() == nullptr) {\n@@ -488,1 +488,1 @@\n-\/\/ class_definitions - pre-checked for NULL\n+\/\/ class_definitions - pre-checked for null\n@@ -509,1 +509,1 @@\n-\/\/ size_ptr - pre-checked for NULL\n+\/\/ size_ptr - pre-checked for null\n@@ -522,1 +522,1 @@\n-\/\/ prefix - NULL is a valid value, must be checked\n+\/\/ prefix - null is a valid value, must be checked\n@@ -525,2 +525,2 @@\n-  return prefix == NULL?\n-              SetNativeMethodPrefixes(0, NULL) :\n+  return prefix == nullptr?\n+              SetNativeMethodPrefixes(0, nullptr) :\n@@ -532,1 +532,1 @@\n-\/\/ prefixes - pre-checked for NULL\n+\/\/ prefixes - pre-checked for null\n@@ -550,1 +550,1 @@\n-\/\/ callbacks - NULL is a valid value, must be checked\n+\/\/ callbacks - null is a valid value, must be checked\n@@ -560,1 +560,1 @@\n-\/\/ event_thread - NULL is a valid value, must be checked\n+\/\/ event_thread - null is a valid value, must be checked\n@@ -580,2 +580,2 @@\n-  if (event_thread == NULL) {\n-    \/\/ Can be called at Agent_OnLoad() time with event_thread == NULL\n+  if (event_thread == nullptr) {\n+    \/\/ Can be called at Agent_OnLoad() time with event_thread == null\n@@ -586,1 +586,1 @@\n-    JvmtiEventController::set_user_enabled(this, NULL, (oop) NULL, event_type, enabled);\n+    JvmtiEventController::set_user_enabled(this, nullptr, (oop) nullptr, event_type, enabled);\n@@ -591,2 +591,2 @@\n-    JavaThread* java_thread = NULL;\n-    oop thread_obj = NULL;\n+    JavaThread* java_thread = nullptr;\n+    oop thread_obj = nullptr;\n@@ -613,1 +613,1 @@\n-\/\/ capabilities_ptr - pre-checked for NULL\n+\/\/ capabilities_ptr - pre-checked for null\n@@ -623,1 +623,1 @@\n-\/\/ capabilities_ptr - pre-checked for NULL\n+\/\/ capabilities_ptr - pre-checked for null\n@@ -633,1 +633,1 @@\n-\/\/ capabilities_ptr - pre-checked for NULL\n+\/\/ capabilities_ptr - pre-checked for null\n@@ -641,1 +641,1 @@\n-\/\/ capabilities_ptr - pre-checked for NULL\n+\/\/ capabilities_ptr - pre-checked for null\n@@ -652,1 +652,1 @@\n-\/\/ segment - pre-checked for NULL\n+\/\/ segment - pre-checked for null\n@@ -671,1 +671,1 @@\n-    if (zip_entry == NULL) {\n+    if (zip_entry == nullptr) {\n@@ -690,1 +690,1 @@\n-\/\/ segment - pre-checked for NULL\n+\/\/ segment - pre-checked for null\n@@ -696,1 +696,1 @@\n-    for (SystemProperty* p = Arguments::system_properties(); p != NULL; p = p->next()) {\n+    for (SystemProperty* p = Arguments::system_properties(); p != nullptr; p = p->next()) {\n@@ -713,1 +713,1 @@\n-    if (zip_entry == NULL) {\n+    if (zip_entry == nullptr) {\n@@ -761,1 +761,1 @@\n-\/\/ phase_ptr - pre-checked for NULL\n+\/\/ phase_ptr - pre-checked for null\n@@ -776,1 +776,1 @@\n-\/\/ data - NULL is a valid value, must be checked\n+\/\/ data - null is a valid value, must be checked\n@@ -784,1 +784,1 @@\n-\/\/ data_ptr - pre-checked for NULL\n+\/\/ data_ptr - pre-checked for null\n@@ -791,1 +791,1 @@\n-\/\/ version_ptr - pre-checked for NULL\n+\/\/ version_ptr - pre-checked for null\n@@ -799,1 +799,1 @@\n-\/\/ name_ptr - pre-checked for NULL\n+\/\/ name_ptr - pre-checked for null\n@@ -806,1 +806,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -843,1 +843,1 @@\n-\/\/ format_ptr - pre-checked for NULL\n+\/\/ format_ptr - pre-checked for null\n@@ -855,1 +855,1 @@\n-\/\/ thread_state_ptr - pre-checked for NULL\n+\/\/ thread_state_ptr - pre-checked for null\n@@ -862,2 +862,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -881,1 +881,1 @@\n-\/\/ thread_ptr - pre-checked for NULL\n+\/\/ thread_ptr - pre-checked for null\n@@ -892,2 +892,2 @@\n-\/\/ threads_count_ptr - pre-checked for NULL\n-\/\/ threads_ptr - pre-checked for NULL\n+\/\/ threads_count_ptr - pre-checked for null\n+\/\/ threads_ptr - pre-checked for null\n@@ -897,1 +897,1 @@\n-  Handle *thread_objs = NULL;\n+  Handle *thread_objs = nullptr;\n@@ -908,1 +908,1 @@\n-    *threads_ptr = NULL;\n+    *threads_ptr = nullptr;\n@@ -933,2 +933,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -946,1 +946,1 @@\n-      err = suspend_thread(thread_oop, java_thread, \/* single_suspend *\/ true, NULL);\n+      err = suspend_thread(thread_oop, java_thread, \/* single_suspend *\/ true, nullptr);\n@@ -951,1 +951,1 @@\n-  err = suspend_thread(thread_oop, current, \/* single_suspend *\/ true, NULL);\n+  err = suspend_thread(thread_oop, current, \/* single_suspend *\/ true, nullptr);\n@@ -957,2 +957,2 @@\n-\/\/ request_list - pre-checked for NULL\n-\/\/ results - pre-checked for NULL\n+\/\/ request_list - pre-checked for null\n+\/\/ results - pre-checked for null\n@@ -963,1 +963,1 @@\n-  Handle self_tobj = Handle(current, NULL);\n+  Handle self_tobj = Handle(current, nullptr);\n@@ -971,2 +971,2 @@\n-      JavaThread *java_thread = NULL;\n-      oop thread_oop = NULL;\n+      JavaThread *java_thread = nullptr;\n+      oop thread_oop = nullptr;\n@@ -976,1 +976,1 @@\n-      if (thread_oop != NULL &&\n+      if (thread_oop != nullptr &&\n@@ -982,1 +982,1 @@\n-        if (thread_oop == NULL || err != JVMTI_ERROR_INVALID_THREAD) {\n+        if (thread_oop == nullptr || err != JVMTI_ERROR_INVALID_THREAD) {\n@@ -992,1 +992,1 @@\n-      results[i] = suspend_thread(thread_oop, java_thread, \/* single_suspend *\/ true, NULL);\n+      results[i] = suspend_thread(thread_oop, java_thread, \/* single_suspend *\/ true, nullptr);\n@@ -997,1 +997,1 @@\n-  if (self_tobj() != NULL) {\n+  if (self_tobj() != nullptr) {\n@@ -999,1 +999,1 @@\n-    results[self_idx] = suspend_thread(self_tobj(), current, \/* single_suspend *\/ true, NULL);\n+    results[self_idx] = suspend_thread(self_tobj(), current, \/* single_suspend *\/ true, nullptr);\n@@ -1016,1 +1016,1 @@\n-  Handle self_tobj = Handle(current, NULL);\n+  Handle self_tobj = Handle(current, nullptr);\n@@ -1044,1 +1044,1 @@\n-          vt_oop != NULL &&\n+          vt_oop != nullptr &&\n@@ -1054,1 +1054,1 @@\n-        suspend_thread(vt_oop, java_thread, \/* single_suspend *\/ false, NULL);\n+        suspend_thread(vt_oop, java_thread, \/* single_suspend *\/ false, nullptr);\n@@ -1070,2 +1070,2 @@\n-  if (self_tobj() != NULL) {\n-    suspend_thread(self_tobj(), current, \/* single_suspend *\/ false, NULL);\n+  if (self_tobj() != nullptr) {\n+    suspend_thread(self_tobj(), current, \/* single_suspend *\/ false, nullptr);\n@@ -1083,2 +1083,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1095,2 +1095,2 @@\n-\/\/ request_list - pre-checked for NULL\n-\/\/ results - pre-checked for NULL\n+\/\/ request_list - pre-checked for null\n+\/\/ results - pre-checked for null\n@@ -1099,2 +1099,2 @@\n-  oop thread_oop = NULL;\n-  JavaThread* java_thread = NULL;\n+  oop thread_oop = nullptr;\n+  JavaThread* java_thread = nullptr;\n@@ -1108,1 +1108,1 @@\n-    if (thread_oop != NULL &&\n+    if (thread_oop != nullptr &&\n@@ -1114,1 +1114,1 @@\n-      if (thread_oop == NULL || err != JVMTI_ERROR_INVALID_THREAD) {\n+      if (thread_oop == nullptr || err != JVMTI_ERROR_INVALID_THREAD) {\n@@ -1157,1 +1157,1 @@\n-        vt_oop != NULL &&\n+        vt_oop != nullptr &&\n@@ -1186,2 +1186,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1193,1 +1193,1 @@\n-  if (thread_oop != NULL && java_lang_VirtualThread::is_instance(thread_oop)) {\n+  if (thread_oop != nullptr && java_lang_VirtualThread::is_instance(thread_oop)) {\n@@ -1219,2 +1219,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1252,1 +1252,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -1258,2 +1258,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1264,2 +1264,2 @@\n-  \/\/ if thread is NULL the current thread is used\n-  if (thread == NULL) {\n+  \/\/ if thread is null the current thread is used\n+  if (thread == nullptr) {\n@@ -1268,1 +1268,1 @@\n-    if (thread_oop == NULL || !thread_oop->is_a(vmClasses::Thread_klass())) {\n+    if (thread_oop == nullptr || !thread_oop->is_a(vmClasses::Thread_klass())) {\n@@ -1279,1 +1279,1 @@\n-      if (thread_oop == NULL) {\n+      if (thread_oop == nullptr) {\n@@ -1299,1 +1299,1 @@\n-      thread_group = Handle(current_thread, NULL);\n+      thread_group = Handle(current_thread, nullptr);\n@@ -1307,1 +1307,1 @@\n-      thread_group = Handle(current_thread, NULL);\n+      thread_group = Handle(current_thread, nullptr);\n@@ -1314,1 +1314,1 @@\n-  if (loader != NULL) {\n+  if (loader != nullptr) {\n@@ -1325,1 +1325,1 @@\n-    if (name() != NULL) {\n+    if (name() != nullptr) {\n@@ -1329,1 +1329,1 @@\n-      n = UNICODE::as_utf8((jchar*) NULL, utf8_length);\n+      n = UNICODE::as_utf8((jchar*) nullptr, utf8_length);\n@@ -1333,1 +1333,1 @@\n-    if (info_ptr->name == NULL)\n+    if (info_ptr->name == nullptr)\n@@ -1341,1 +1341,1 @@\n-  info_ptr->context_class_loader = (context_class_loader.is_null()) ? NULL :\n+  info_ptr->context_class_loader = (context_class_loader.is_null()) ? nullptr :\n@@ -1350,2 +1350,2 @@\n-\/\/ owned_monitor_count_ptr - pre-checked for NULL\n-\/\/ owned_monitors_ptr - pre-checked for NULL\n+\/\/ owned_monitor_count_ptr - pre-checked for null\n+\/\/ owned_monitors_ptr - pre-checked for null\n@@ -1364,2 +1364,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1374,1 +1374,1 @@\n-    if (java_thread != NULL) {\n+    if (java_thread != nullptr) {\n@@ -1423,2 +1423,2 @@\n-\/\/ monitor_info_count_ptr - pre-checked for NULL\n-\/\/ monitor_info_ptr - pre-checked for NULL\n+\/\/ monitor_info_count_ptr - pre-checked for null\n+\/\/ monitor_info_ptr - pre-checked for null\n@@ -1437,2 +1437,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1447,1 +1447,1 @@\n-    if (java_thread != NULL) {\n+    if (java_thread != nullptr) {\n@@ -1498,1 +1498,1 @@\n-\/\/ monitor_ptr - pre-checked for NULL\n+\/\/ monitor_ptr - pre-checked for null\n@@ -1507,2 +1507,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1516,1 +1516,1 @@\n-    if (java_thread != NULL) {\n+    if (java_thread != nullptr) {\n@@ -1521,1 +1521,1 @@\n-      *monitor_ptr = NULL;\n+      *monitor_ptr = nullptr;\n@@ -1543,2 +1543,2 @@\n-\/\/ proc - pre-checked for NULL\n-\/\/ arg - NULL is a valid value, must be checked\n+\/\/ proc - pre-checked for null\n+\/\/ arg - null is a valid value, must be checked\n@@ -1549,2 +1549,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1557,1 +1557,1 @@\n-    if (thread_oop == NULL) {\n+    if (thread_oop == nullptr) {\n@@ -1563,1 +1563,1 @@\n-  if (java_thread != NULL) {\n+  if (java_thread != nullptr) {\n@@ -1582,1 +1582,1 @@\n-  if (new_thread->osthread() == NULL) {\n+  if (new_thread->osthread() == nullptr) {\n@@ -1598,2 +1598,2 @@\n-\/\/ group_count_ptr - pre-checked for NULL\n-\/\/ groups_ptr - pre-checked for NULL\n+\/\/ group_count_ptr - pre-checked for null\n+\/\/ groups_ptr - pre-checked for null\n@@ -1624,1 +1624,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -1648,1 +1648,1 @@\n-  if (name != NULL) {\n+  if (name != nullptr) {\n@@ -1653,1 +1653,1 @@\n-    info_ptr->name = NULL;\n+    info_ptr->name = nullptr;\n@@ -1659,4 +1659,4 @@\n-\/\/ thread_count_ptr - pre-checked for NULL\n-\/\/ threads_ptr - pre-checked for NULL\n-\/\/ group_count_ptr - pre-checked for NULL\n-\/\/ groups_ptr - pre-checked for NULL\n+\/\/ thread_count_ptr - pre-checked for null\n+\/\/ threads_ptr - pre-checked for null\n+\/\/ group_count_ptr - pre-checked for null\n+\/\/ groups_ptr - pre-checked for null\n@@ -1670,1 +1670,1 @@\n-  Handle *thread_objs = NULL;\n+  Handle *thread_objs = nullptr;\n@@ -1694,1 +1694,1 @@\n-  if (nthreads > 0 && *threads_ptr == NULL) {\n+  if (nthreads > 0 && *threads_ptr == nullptr) {\n@@ -1697,1 +1697,1 @@\n-  if (ngroups > 0 && *groups_ptr == NULL) {\n+  if (ngroups > 0 && *groups_ptr == nullptr) {\n@@ -1711,2 +1711,2 @@\n-\/\/ frame_buffer - pre-checked for NULL\n-\/\/ count_ptr - pre-checked for NULL\n+\/\/ frame_buffer - pre-checked for null\n+\/\/ count_ptr - pre-checked for null\n@@ -1721,2 +1721,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1729,1 +1729,1 @@\n-    if (java_thread == NULL) {  \/\/ Target virtual thread is unmounted.\n+    if (java_thread == nullptr) {  \/\/ Target virtual thread is unmounted.\n@@ -1760,2 +1760,2 @@\n-\/\/ stack_info_ptr - pre-checked for NULL\n-\/\/ thread_count_ptr - pre-checked for NULL\n+\/\/ stack_info_ptr - pre-checked for null\n+\/\/ thread_count_ptr - pre-checked for null\n@@ -1778,1 +1778,1 @@\n-\/\/ thread_list - pre-checked for NULL\n+\/\/ thread_list - pre-checked for null\n@@ -1780,1 +1780,1 @@\n-\/\/ stack_info_ptr - pre-checked for NULL\n+\/\/ stack_info_ptr - pre-checked for null\n@@ -1794,1 +1794,1 @@\n-    oop thread_obj = NULL;\n+    oop thread_obj = nullptr;\n@@ -1800,1 +1800,1 @@\n-    if (java_lang_VirtualThread::is_instance(thread_obj) && java_thread == NULL) {\n+    if (java_lang_VirtualThread::is_instance(thread_obj) && java_thread == nullptr) {\n@@ -1830,1 +1830,1 @@\n-\/\/ count_ptr - pre-checked for NULL\n+\/\/ count_ptr - pre-checked for null\n@@ -1839,2 +1839,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1847,1 +1847,1 @@\n-    if (java_thread == NULL) {  \/\/ Target virtual thread is unmounted.\n+    if (java_thread == nullptr) {  \/\/ Target virtual thread is unmounted.\n@@ -1877,1 +1877,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -1883,2 +1883,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1887,1 +1887,1 @@\n-  if (thread_obj != NULL && java_lang_VirtualThread::is_instance(thread_obj)) {\n+  if (thread_obj != nullptr && java_lang_VirtualThread::is_instance(thread_obj)) {\n@@ -1897,1 +1897,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1921,2 +1921,2 @@\n-\/\/ method_ptr - pre-checked for NULL\n-\/\/ location_ptr - pre-checked for NULL\n+\/\/ method_ptr - pre-checked for null\n+\/\/ location_ptr - pre-checked for null\n@@ -1931,2 +1931,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1939,1 +1939,1 @@\n-    if (java_thread == NULL) {  \/\/ Target virtual thread is unmounted.\n+    if (java_thread == nullptr) {  \/\/ Target virtual thread is unmounted.\n@@ -1971,2 +1971,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1982,1 +1982,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1989,1 +1989,1 @@\n-    if (java_thread == NULL || java_thread == current) {\n+    if (java_thread == nullptr || java_thread == current) {\n@@ -2071,4 +2071,4 @@\n-\/\/ klass - NULL is a valid value, must be checked\n-\/\/ initial_object - NULL is a valid value, must be checked\n-\/\/ callbacks - pre-checked for NULL\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ klass - null is a valid value, must be checked\n+\/\/ initial_object - null is a valid value, must be checked\n+\/\/ callbacks - pre-checked for null\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2078,2 +2078,2 @@\n-  Klass* k = NULL;\n-  if (klass != NULL) {\n+  Klass* k = nullptr;\n+  if (klass != nullptr) {\n@@ -2081,1 +2081,1 @@\n-    if (k_mirror == NULL) {\n+    if (k_mirror == nullptr) {\n@@ -2088,1 +2088,1 @@\n-    if (klass == NULL) {\n+    if (klass == nullptr) {\n@@ -2093,1 +2093,1 @@\n-  if (initial_object != NULL) {\n+  if (initial_object != nullptr) {\n@@ -2095,1 +2095,1 @@\n-    if (init_obj == NULL) {\n+    if (init_obj == nullptr) {\n@@ -2109,3 +2109,3 @@\n-\/\/ klass - NULL is a valid value, must be checked\n-\/\/ callbacks - pre-checked for NULL\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ klass - null is a valid value, must be checked\n+\/\/ callbacks - pre-checked for null\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2115,2 +2115,2 @@\n-  Klass* k = NULL;\n-  if (klass != NULL) {\n+  Klass* k = nullptr;\n+  if (klass != nullptr) {\n@@ -2118,1 +2118,1 @@\n-    if (k_mirror == NULL) {\n+    if (k_mirror == nullptr) {\n@@ -2125,1 +2125,1 @@\n-    if (k == NULL) {\n+    if (k == nullptr) {\n@@ -2136,1 +2136,1 @@\n-\/\/ tag_ptr - pre-checked for NULL\n+\/\/ tag_ptr - pre-checked for null\n@@ -2156,4 +2156,4 @@\n-\/\/ tags - pre-checked for NULL\n-\/\/ count_ptr - pre-checked for NULL\n-\/\/ object_result_ptr - NULL is a valid value, must be checked\n-\/\/ tag_result_ptr - NULL is a valid value, must be checked\n+\/\/ tags - pre-checked for null\n+\/\/ count_ptr - pre-checked for null\n+\/\/ object_result_ptr - null is a valid value, must be checked\n+\/\/ tag_result_ptr - null is a valid value, must be checked\n@@ -2178,2 +2178,2 @@\n-\/\/ object_reference_callback - pre-checked for NULL\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ object_reference_callback - pre-checked for null\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2189,4 +2189,4 @@\n-\/\/ heap_root_callback - NULL is a valid value, must be checked\n-\/\/ stack_ref_callback - NULL is a valid value, must be checked\n-\/\/ object_ref_callback - NULL is a valid value, must be checked\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ heap_root_callback - null is a valid value, must be checked\n+\/\/ stack_ref_callback - null is a valid value, must be checked\n+\/\/ object_ref_callback - null is a valid value, must be checked\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2201,2 +2201,2 @@\n-\/\/ heap_object_callback - pre-checked for NULL\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ heap_object_callback - pre-checked for null\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2208,1 +2208,1 @@\n-  JvmtiTagMap::tag_map_for(this)->iterate_over_heap(object_filter, NULL, heap_object_callback, user_data);\n+  JvmtiTagMap::tag_map_for(this)->iterate_over_heap(object_filter, nullptr, heap_object_callback, user_data);\n@@ -2214,2 +2214,2 @@\n-\/\/ heap_object_callback - pre-checked for NULL\n-\/\/ user_data - NULL is a valid value, must be checked\n+\/\/ heap_object_callback - pre-checked for null\n+\/\/ user_data - null is a valid value, must be checked\n@@ -2223,1 +2223,1 @@\n-  if (klass == NULL) {\n+  if (klass == nullptr) {\n@@ -2238,1 +2238,1 @@\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ value_ptr - pre-checked for null\n@@ -2249,2 +2249,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2279,1 +2279,1 @@\n-\/\/ value - pre-checked for NULL\n+\/\/ value - pre-checked for null\n@@ -2290,2 +2290,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2321,1 +2321,1 @@\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ value_ptr - pre-checked for null\n@@ -2332,2 +2332,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2363,1 +2363,1 @@\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ value_ptr - pre-checked for null\n@@ -2374,2 +2374,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2405,1 +2405,1 @@\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ value_ptr - pre-checked for null\n@@ -2416,2 +2416,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2447,1 +2447,1 @@\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ value_ptr - pre-checked for null\n@@ -2458,2 +2458,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2499,2 +2499,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2536,2 +2536,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2573,2 +2573,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2610,2 +2610,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2647,2 +2647,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -2676,1 +2676,1 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n@@ -2702,1 +2702,1 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n@@ -2787,2 +2787,2 @@\n-\/\/ signature_ptr - NULL is a valid value, must be checked\n-\/\/ generic_ptr - NULL is a valid value, must be checked\n+\/\/ signature_ptr - null is a valid value, must be checked\n+\/\/ generic_ptr - null is a valid value, must be checked\n@@ -2793,1 +2793,1 @@\n-  Klass* k = NULL;\n+  Klass* k = nullptr;\n@@ -2798,2 +2798,2 @@\n-  if (signature_ptr != NULL) {\n-    char* result = NULL;\n+  if (signature_ptr != nullptr) {\n+    char* result = nullptr;\n@@ -2812,2 +2812,2 @@\n-  if (generic_ptr != NULL) {\n-    *generic_ptr = NULL;\n+  if (generic_ptr != nullptr) {\n+    *generic_ptr = nullptr;\n@@ -2816,1 +2816,1 @@\n-      if (soo != NULL) {\n+      if (soo != nullptr) {\n@@ -2818,1 +2818,1 @@\n-        if (gen_sig != NULL) {\n+        if (gen_sig != nullptr) {\n@@ -2836,1 +2836,1 @@\n-\/\/ status_ptr - pre-checked for NULL\n+\/\/ status_ptr - pre-checked for null\n@@ -2854,1 +2854,1 @@\n-\/\/ source_name_ptr - pre-checked for NULL\n+\/\/ source_name_ptr - pre-checked for null\n@@ -2882,1 +2882,1 @@\n-\/\/ modifiers_ptr - pre-checked for NULL\n+\/\/ modifiers_ptr - pre-checked for null\n@@ -2906,2 +2906,2 @@\n-\/\/ method_count_ptr - pre-checked for NULL\n-\/\/ methods_ptr - pre-checked for NULL\n+\/\/ method_count_ptr - pre-checked for null\n+\/\/ methods_ptr - pre-checked for null\n@@ -2947,1 +2947,1 @@\n-      result_list[result_index] = NULL;\n+      result_list[result_index] = nullptr;\n@@ -2954,1 +2954,1 @@\n-      if (id == NULL) {\n+      if (id == nullptr) {\n@@ -2970,1 +2970,1 @@\n-    \/\/ copy results skipping NULL methodIDs\n+    \/\/ copy results skipping null methodIDs\n@@ -2974,1 +2974,1 @@\n-      if (result_list[index] == NULL) {\n+      if (result_list[index] == nullptr) {\n@@ -2991,2 +2991,2 @@\n-\/\/ field_count_ptr - pre-checked for NULL\n-\/\/ fields_ptr - pre-checked for NULL\n+\/\/ field_count_ptr - pre-checked for null\n+\/\/ fields_ptr - pre-checked for null\n@@ -3045,2 +3045,2 @@\n-\/\/ interface_count_ptr - pre-checked for NULL\n-\/\/ interfaces_ptr - pre-checked for NULL\n+\/\/ interface_count_ptr - pre-checked for null\n+\/\/ interfaces_ptr - pre-checked for null\n@@ -3071,1 +3071,1 @@\n-    const int result_length = (interface_list == NULL ? 0 : interface_list->length());\n+    const int result_length = (interface_list == nullptr ? 0 : interface_list->length());\n@@ -3090,2 +3090,2 @@\n-\/\/ minor_version_ptr - pre-checked for NULL\n-\/\/ major_version_ptr - pre-checked for NULL\n+\/\/ minor_version_ptr - pre-checked for null\n+\/\/ major_version_ptr - pre-checked for null\n@@ -3116,3 +3116,3 @@\n-\/\/ constant_pool_count_ptr - pre-checked for NULL\n-\/\/ constant_pool_byte_count_ptr - pre-checked for NULL\n-\/\/ constant_pool_bytes_ptr - pre-checked for NULL\n+\/\/ constant_pool_count_ptr - pre-checked for null\n+\/\/ constant_pool_byte_count_ptr - pre-checked for null\n+\/\/ constant_pool_bytes_ptr - pre-checked for null\n@@ -3167,1 +3167,1 @@\n-\/\/ is_interface_ptr - pre-checked for NULL\n+\/\/ is_interface_ptr - pre-checked for null\n@@ -3174,1 +3174,1 @@\n-      if (k != NULL && k->is_interface()) {\n+      if (k != nullptr && k->is_interface()) {\n@@ -3186,1 +3186,1 @@\n-\/\/ is_array_class_ptr - pre-checked for NULL\n+\/\/ is_array_class_ptr - pre-checked for null\n@@ -3193,1 +3193,1 @@\n-      if (k != NULL && k->is_array_klass()) {\n+      if (k != nullptr && k->is_array_klass()) {\n@@ -3205,1 +3205,1 @@\n-\/\/ classloader_ptr - pre-checked for NULL\n+\/\/ classloader_ptr - pre-checked for null\n@@ -3219,1 +3219,1 @@\n-    if (result_oop == NULL) {\n+    if (result_oop == nullptr) {\n@@ -3232,1 +3232,1 @@\n-\/\/ source_debug_extension_ptr - pre-checked for NULL\n+\/\/ source_debug_extension_ptr - pre-checked for null\n@@ -3260,1 +3260,1 @@\n-\/\/ hash_code_ptr - pre-checked for NULL\n+\/\/ hash_code_ptr - pre-checked for null\n@@ -3275,1 +3275,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -3290,3 +3290,3 @@\n-\/\/ name_ptr - NULL is a valid value, must be checked\n-\/\/ signature_ptr - NULL is a valid value, must be checked\n-\/\/ generic_ptr - NULL is a valid value, must be checked\n+\/\/ name_ptr - null is a valid value, must be checked\n+\/\/ signature_ptr - null is a valid value, must be checked\n+\/\/ generic_ptr - null is a valid value, must be checked\n@@ -3297,1 +3297,1 @@\n-  if (name_ptr == NULL) {\n+  if (name_ptr == nullptr) {\n@@ -3302,1 +3302,1 @@\n-    if (*name_ptr == NULL)\n+    if (*name_ptr == nullptr)\n@@ -3306,1 +3306,1 @@\n-  if (signature_ptr== NULL) {\n+  if (signature_ptr== nullptr) {\n@@ -3311,1 +3311,1 @@\n-    if (*signature_ptr == NULL)\n+    if (*signature_ptr == nullptr)\n@@ -3315,2 +3315,2 @@\n-  if (generic_ptr != NULL) {\n-    *generic_ptr = NULL;\n+  if (generic_ptr != nullptr) {\n+    *generic_ptr = nullptr;\n@@ -3318,1 +3318,1 @@\n-    if (soop != NULL) {\n+    if (soop != nullptr) {\n@@ -3320,1 +3320,1 @@\n-      if (gen_sig != NULL) {\n+      if (gen_sig != nullptr) {\n@@ -3333,1 +3333,1 @@\n-\/\/ declaring_class_ptr - pre-checked for NULL\n+\/\/ declaring_class_ptr - pre-checked for null\n@@ -3342,1 +3342,1 @@\n-\/\/ modifiers_ptr - pre-checked for NULL\n+\/\/ modifiers_ptr - pre-checked for null\n@@ -3354,1 +3354,1 @@\n-\/\/ is_synthetic_ptr - pre-checked for NULL\n+\/\/ is_synthetic_ptr - pre-checked for null\n@@ -3366,4 +3366,4 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ name_ptr - NULL is a valid value, must be checked\n-\/\/ signature_ptr - NULL is a valid value, must be checked\n-\/\/ generic_ptr - NULL is a valid value, must be checked\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ name_ptr - null is a valid value, must be checked\n+\/\/ signature_ptr - null is a valid value, must be checked\n+\/\/ generic_ptr - null is a valid value, must be checked\n@@ -3376,1 +3376,1 @@\n-  if (name_ptr == NULL) {\n+  if (name_ptr == nullptr) {\n@@ -3383,1 +3383,1 @@\n-  if (signature_ptr == NULL) {\n+  if (signature_ptr == nullptr) {\n@@ -3391,2 +3391,2 @@\n-  if (generic_ptr != NULL) {\n-    *generic_ptr = NULL;\n+  if (generic_ptr != nullptr) {\n+    *generic_ptr = nullptr;\n@@ -3394,1 +3394,1 @@\n-    if (soop != NULL) {\n+    if (soop != nullptr) {\n@@ -3396,1 +3396,1 @@\n-      if (gen_sig != NULL) {\n+      if (gen_sig != nullptr) {\n@@ -3409,2 +3409,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ declaring_class_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ declaring_class_ptr - pre-checked for null\n@@ -3419,2 +3419,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ modifiers_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ modifiers_ptr - pre-checked for null\n@@ -3429,2 +3429,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ max_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ max_ptr - pre-checked for null\n@@ -3440,2 +3440,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ size_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ size_ptr - pre-checked for null\n@@ -3452,3 +3452,3 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ entry_count_ptr - pre-checked for NULL\n-\/\/ table_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ entry_count_ptr - pre-checked for null\n+\/\/ table_ptr - pre-checked for null\n@@ -3494,3 +3494,3 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ start_location_ptr - pre-checked for NULL\n-\/\/ end_location_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ start_location_ptr - pre-checked for null\n+\/\/ end_location_ptr - pre-checked for null\n@@ -3514,3 +3514,3 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ entry_count_ptr - pre-checked for NULL\n-\/\/ table_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ entry_count_ptr - pre-checked for null\n+\/\/ table_ptr - pre-checked for null\n@@ -3551,3 +3551,3 @@\n-      char *name_buf = NULL;\n-      char *sig_buf = NULL;\n-      char *gen_sig_buf = NULL;\n+      char *name_buf = nullptr;\n+      char *sig_buf = nullptr;\n+      char *gen_sig_buf = nullptr;\n@@ -3591,3 +3591,3 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ bytecode_count_ptr - pre-checked for NULL\n-\/\/ bytecodes_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ bytecode_count_ptr - pre-checked for null\n+\/\/ bytecodes_ptr - pre-checked for null\n@@ -3613,2 +3613,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ is_native_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ is_native_ptr - pre-checked for null\n@@ -3623,2 +3623,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ is_synthetic_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ is_synthetic_ptr - pre-checked for null\n@@ -3633,2 +3633,2 @@\n-\/\/ method - pre-checked for validity, but may be NULL meaning obsolete method\n-\/\/ is_obsolete_ptr - pre-checked for NULL\n+\/\/ method - pre-checked for validity, but may be null meaning obsolete method\n+\/\/ is_obsolete_ptr - pre-checked for null\n@@ -3645,1 +3645,1 @@\n-  if (method == NULL || method->is_obsolete()) {\n+  if (method == nullptr || method->is_obsolete()) {\n@@ -3657,2 +3657,2 @@\n-\/\/ name - pre-checked for NULL\n-\/\/ monitor_ptr - pre-checked for NULL\n+\/\/ name - pre-checked for null\n+\/\/ monitor_ptr - pre-checked for null\n@@ -3695,1 +3695,1 @@\n-    if (rmonitor->owner() != NULL) {\n+    if (rmonitor->owner() != nullptr) {\n@@ -3805,1 +3805,1 @@\n-\/\/ function_table - pre-checked for NULL\n+\/\/ function_table - pre-checked for null\n@@ -3816,1 +3816,1 @@\n-\/\/ function_table - pre-checked for NULL\n+\/\/ function_table - pre-checked for null\n@@ -3820,1 +3820,1 @@\n-  if (*function_table == NULL)\n+  if (*function_table == nullptr)\n@@ -3857,2 +3857,2 @@\n-\/\/ extension_count_ptr - pre-checked for NULL\n-\/\/ extensions - pre-checked for NULL\n+\/\/ extension_count_ptr - pre-checked for null\n+\/\/ extensions - pre-checked for null\n@@ -3865,2 +3865,2 @@\n-\/\/ extension_count_ptr - pre-checked for NULL\n-\/\/ extensions - pre-checked for NULL\n+\/\/ extension_count_ptr - pre-checked for null\n+\/\/ extensions - pre-checked for null\n@@ -3873,1 +3873,1 @@\n-\/\/ callback - NULL is a valid value, must be checked\n+\/\/ callback - null is a valid value, must be checked\n@@ -3883,1 +3883,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -3891,1 +3891,1 @@\n-\/\/ nanos_ptr - pre-checked for NULL\n+\/\/ nanos_ptr - pre-checked for null\n@@ -3908,1 +3908,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -3916,1 +3916,1 @@\n-\/\/ nanos_ptr - pre-checked for NULL\n+\/\/ nanos_ptr - pre-checked for null\n@@ -3921,2 +3921,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -3926,1 +3926,1 @@\n-  if (thread_oop != NULL && java_lang_VirtualThread::is_instance(thread_oop)) {\n+  if (thread_oop != nullptr && java_lang_VirtualThread::is_instance(thread_oop)) {\n@@ -3940,1 +3940,1 @@\n-\/\/ info_ptr - pre-checked for NULL\n+\/\/ info_ptr - pre-checked for null\n@@ -3948,1 +3948,1 @@\n-\/\/ nanos_ptr - pre-checked for NULL\n+\/\/ nanos_ptr - pre-checked for null\n@@ -3956,1 +3956,1 @@\n-\/\/ processor_count_ptr - pre-checked for NULL\n+\/\/ processor_count_ptr - pre-checked for null\n@@ -3976,2 +3976,2 @@\n-\/\/ count_ptr - pre-checked for NULL\n-\/\/ property_ptr - pre-checked for NULL\n+\/\/ count_ptr - pre-checked for null\n+\/\/ property_ptr - pre-checked for null\n@@ -3992,1 +3992,1 @@\n-  for (SystemProperty* p = Arguments::system_properties(); p != NULL && readable_count < *count_ptr; p = p->next()) {\n+  for (SystemProperty* p = Arguments::system_properties(); p != nullptr && readable_count < *count_ptr; p = p->next()) {\n@@ -4015,2 +4015,2 @@\n-\/\/ property - pre-checked for NULL\n-\/\/ value_ptr - pre-checked for NULL\n+\/\/ property - pre-checked for null\n+\/\/ value_ptr - pre-checked for null\n@@ -4024,1 +4024,1 @@\n-  if (value == NULL) {\n+  if (value == nullptr) {\n@@ -4036,2 +4036,2 @@\n-\/\/ property - pre-checked for NULL\n-\/\/ value - NULL is a valid value, must be checked\n+\/\/ property - pre-checked for null\n+\/\/ value - null is a valid value, must be checked\n@@ -4040,1 +4040,1 @@\n-  for (SystemProperty* p = Arguments::system_properties(); p != NULL; p = p->next()) {\n+  for (SystemProperty* p = Arguments::system_properties(); p != nullptr; p = p->next()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":380,"deletions":380,"binary":false,"changes":760,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-JvmtiEnvBase* JvmtiEnvBase::_head_environment = NULL;\n+JvmtiEnvBase* JvmtiEnvBase::_head_environment = nullptr;\n@@ -117,2 +117,2 @@\n-    JvmtiEnvBase *previous_env = NULL;\n-    for (JvmtiEnvBase* env = it.first(); env != NULL; env = it.next(env)) {\n+    JvmtiEnvBase *previous_env = nullptr;\n+    for (JvmtiEnvBase* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -121,1 +121,1 @@\n-    if (previous_env == NULL) {\n+    if (previous_env == nullptr) {\n@@ -202,2 +202,2 @@\n-  _env_local_storage = NULL;\n-  _tag_map = NULL;\n+  _env_local_storage = nullptr;\n+  _tag_map = nullptr;\n@@ -205,2 +205,2 @@\n-  _native_method_prefixes = NULL;\n-  _next = NULL;\n+  _native_method_prefixes = nullptr;\n+  _next = nullptr;\n@@ -214,1 +214,1 @@\n-  \/\/ all callbacks initially NULL\n+  \/\/ all callbacks initially null\n@@ -228,1 +228,1 @@\n-  _jvmti_external.functions = TraceJVMTI != NULL ? &jvmtiTrace_Interface : &jvmti_Interface;\n+  _jvmti_external.functions = TraceJVMTI != nullptr ? &jvmtiTrace_Interface : &jvmti_Interface;\n@@ -264,1 +264,1 @@\n-  set_native_method_prefixes(0, NULL);\n+  set_native_method_prefixes(0, nullptr);\n@@ -269,1 +269,1 @@\n-  if (tag_map_to_clear != NULL) {\n+  if (tag_map_to_clear != nullptr) {\n@@ -284,1 +284,1 @@\n-  set_tag_map(NULL);\n+  set_tag_map(nullptr);\n@@ -286,1 +286,1 @@\n-  if (tag_map_to_deallocate != NULL) {\n+  if (tag_map_to_deallocate != nullptr) {\n@@ -305,1 +305,1 @@\n-  JvmtiEnvBase* previous_env = NULL;\n+  JvmtiEnvBase* previous_env = nullptr;\n@@ -307,1 +307,1 @@\n-  while (env != NULL) {\n+  while (env != nullptr) {\n@@ -315,1 +315,1 @@\n-      if (previous_env == NULL) {\n+      if (previous_env == nullptr) {\n@@ -404,1 +404,1 @@\n-    _native_method_prefixes = NULL;\n+    _native_method_prefixes = nullptr;\n@@ -408,1 +408,1 @@\n-    if (new_prefixes == NULL) {\n+    if (new_prefixes == nullptr) {\n@@ -413,1 +413,1 @@\n-      if (prefix == NULL) {\n+      if (prefix == nullptr) {\n@@ -421,1 +421,1 @@\n-      if (prefix == NULL) {\n+      if (prefix == nullptr) {\n@@ -462,1 +462,1 @@\n-  for (JvmtiEnvBase* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnvBase* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -497,1 +497,1 @@\n-  if (callbacks != NULL && is_valid()) {\n+  if (callbacks != nullptr && is_valid()) {\n@@ -511,1 +511,1 @@\n-  unsigned char* mem = NULL;\n+  unsigned char* mem = nullptr;\n@@ -543,1 +543,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -547,1 +547,1 @@\n-  NULL_CHECK(objArray, NULL);\n+  NULL_CHECK(objArray, nullptr);\n@@ -558,1 +558,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -562,1 +562,1 @@\n-  NULL_CHECK(objArray, NULL);\n+  NULL_CHECK(objArray, nullptr);\n@@ -570,1 +570,1 @@\n-\/\/ Return the vframe on the specified thread and depth, NULL if no such frame.\n+\/\/ Return the vframe on the specified thread and depth, null if no such frame.\n@@ -575,1 +575,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -585,1 +585,1 @@\n-  for (int d = 0; jvf != NULL && d < depth; d++) {\n+  for (int d = 0; jvf != nullptr && d < depth; d++) {\n@@ -598,1 +598,1 @@\n-  assert(k != NULL, \"k != NULL\");\n+  assert(k != nullptr, \"k != null\");\n@@ -630,1 +630,1 @@\n-\/\/ Return JavaThread if virtual thread is mounted, NULL otherwise.\n+\/\/ Return JavaThread if virtual thread is mounted, null otherwise.\n@@ -633,2 +633,2 @@\n-  if (carrier_thread == NULL) {\n-    return NULL;\n+  if (carrier_thread == nullptr) {\n+    return nullptr;\n@@ -645,1 +645,1 @@\n-  assert(cont != NULL, \"must be\");\n+  assert(cont != nullptr, \"must be\");\n@@ -647,1 +647,1 @@\n-  return Continuation::is_continuation_mounted(java_thread, cont) ? java_thread : NULL;\n+  return Continuation::is_continuation_mounted(java_thread, cont) ? java_thread : nullptr;\n@@ -653,1 +653,1 @@\n-  if (!is_in_VTMS_transition && (jvf == NULL || !jvf->method()->jvmti_mount_transition())) {\n+  if (!is_in_VTMS_transition && (jvf == nullptr || !jvf->method()->jvmti_mount_transition())) {\n@@ -657,1 +657,1 @@\n-  for ( ; jvf != NULL; jvf = jvf->java_sender()) {\n+  for ( ; jvf != nullptr; jvf = jvf->java_sender()) {\n@@ -679,1 +679,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -694,1 +694,1 @@\n-  javaVFrame* jvf = NULL;\n+  javaVFrame* jvf = nullptr;\n@@ -697,1 +697,1 @@\n-  if (java_thread != NULL) {\n+  if (java_thread != nullptr) {\n@@ -702,1 +702,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -705,1 +705,1 @@\n-    jvf = vfs.at_end() ? NULL : vfs.asJavaVFrame();\n+    jvf = vfs.at_end() ? nullptr : vfs.asJavaVFrame();\n@@ -709,1 +709,1 @@\n-    jvf = vfs.at_end() ? NULL : vfs.asJavaVFrame();\n+    jvf = vfs.at_end() ? nullptr : vfs.asJavaVFrame();\n@@ -735,1 +735,1 @@\n-  if (thread_oop != NULL) {\n+  if (thread_oop != nullptr) {\n@@ -739,1 +739,1 @@\n-  if (jt != NULL) {\n+  if (jt != nullptr) {\n@@ -744,1 +744,1 @@\n-        ((jt->jvmti_vthread() == NULL || jt->jvmti_vthread() == thread_oop) && jt->is_suspended())) {\n+        ((jt->jvmti_vthread() == nullptr || jt->jvmti_vthread() == thread_oop) && jt->is_suspended())) {\n@@ -764,1 +764,1 @@\n-  if (java_thread != NULL) {\n+  if (java_thread != nullptr) {\n@@ -790,1 +790,1 @@\n-  Handle *thread_objs = NULL;\n+  Handle *thread_objs = nullptr;\n@@ -864,1 +864,1 @@\n-  for (javaVFrame *jvf = java_thread->last_java_vframe(&reg_map); jvf != NULL;\n+  for (javaVFrame *jvf = java_thread->last_java_vframe(&reg_map); jvf != nullptr;\n@@ -873,1 +873,1 @@\n-        if (mi->owner() != NULL && mi->owner() == hobj()) {\n+        if (mi->owner() != nullptr && mi->owner() == hobj()) {\n@@ -894,1 +894,1 @@\n-  oop obj = NULL;\n+  oop obj = nullptr;\n@@ -899,1 +899,1 @@\n-  if (mon == NULL) {\n+  if (mon == nullptr) {\n@@ -902,1 +902,1 @@\n-    if (mon != NULL) {\n+    if (mon != nullptr) {\n@@ -905,1 +905,1 @@\n-      assert(obj != NULL, \"ObjectMonitor should have a valid object!\");\n+      assert(obj != nullptr, \"ObjectMonitor should have a valid object!\");\n@@ -911,1 +911,1 @@\n-    assert(obj != NULL, \"Object.wait() should have an object\");\n+    assert(obj != nullptr, \"Object.wait() should have an object\");\n@@ -914,2 +914,2 @@\n-  if (obj == NULL) {\n-    *monitor_ptr = NULL;\n+  if (obj == nullptr) {\n+    *monitor_ptr = nullptr;\n@@ -952,1 +952,1 @@\n-         jvf != NULL; jvf = jvf->java_sender()) {\n+         jvf != nullptr; jvf = jvf->java_sender()) {\n@@ -980,1 +980,1 @@\n-  for ( ; jvf != NULL; jvf = jvf->java_sender()) {\n+  for ( ; jvf != nullptr; jvf = jvf->java_sender()) {\n@@ -1012,1 +1012,1 @@\n-  oop wait_obj = NULL;\n+  oop wait_obj = nullptr;\n@@ -1019,1 +1019,1 @@\n-    if (mon != NULL) {\n+    if (mon != nullptr) {\n@@ -1023,1 +1023,1 @@\n-  oop pending_obj = NULL;\n+  oop pending_obj = nullptr;\n@@ -1030,1 +1030,1 @@\n-    if (mon != NULL) {\n+    if (mon != nullptr) {\n@@ -1041,1 +1041,1 @@\n-    if (obj == NULL) {\n+    if (obj == nullptr) {\n@@ -1101,1 +1101,1 @@\n-      for (int j = 0; j < start_depth && jvf != NULL; j++) {\n+      for (int j = 0; j < start_depth && jvf != nullptr; j++) {\n@@ -1104,1 +1104,1 @@\n-      if (jvf == NULL) {\n+      if (jvf == nullptr) {\n@@ -1113,2 +1113,2 @@\n-      javaVFrame *jvf_prev = NULL;\n-      javaVFrame *jvf_prev_prev = NULL;\n+      javaVFrame *jvf_prev = nullptr;\n+      javaVFrame *jvf_prev_prev = nullptr;\n@@ -1116,1 +1116,1 @@\n-      while (jvf_cursor != NULL) {\n+      while (jvf_cursor != nullptr) {\n@@ -1119,1 +1119,1 @@\n-        for (j = 0; j > start_depth && jvf_cursor != NULL; j--) {\n+        for (j = 0; j > start_depth && jvf_cursor != nullptr; j--) {\n@@ -1128,1 +1128,1 @@\n-        if (jvf_prev_prev == NULL) {\n+        if (jvf_prev_prev == nullptr) {\n@@ -1143,1 +1143,1 @@\n-  for (; count < max_count && jvf != NULL; count++) {\n+  for (; count < max_count && jvf != nullptr; count++) {\n@@ -1186,1 +1186,1 @@\n-  while (jvf != NULL) {\n+  while (jvf != nullptr) {\n@@ -1234,1 +1234,1 @@\n-  while (jvf != NULL && cur_depth < depth) {\n+  while (jvf != nullptr && cur_depth < depth) {\n@@ -1239,1 +1239,1 @@\n-  if (jvf == NULL) {\n+  if (jvf == nullptr) {\n@@ -1288,1 +1288,1 @@\n-  for (int d = 0; jvf != NULL && d < depth; d++) {\n+  for (int d = 0; jvf != nullptr && d < depth; d++) {\n@@ -1291,1 +1291,1 @@\n-  if (jvf == NULL) {\n+  if (jvf == nullptr) {\n@@ -1297,1 +1297,1 @@\n-  assert(jvf->frame_pointer() != NULL, \"frame pointer mustn't be NULL\");\n+  assert(jvf->frame_pointer() != nullptr, \"frame pointer mustn't be null\");\n@@ -1306,1 +1306,1 @@\n-  assert(thread_oop != NULL, \"sanity check\");\n+  assert(thread_oop != nullptr, \"sanity check\");\n@@ -1309,1 +1309,1 @@\n-  return mounted_vt != NULL && mounted_vt != thread_oop;\n+  return mounted_vt != nullptr && mounted_vt != thread_oop;\n@@ -1314,1 +1314,1 @@\n-  const ContinuationEntry* cont_entry = NULL;\n+  const ContinuationEntry* cont_entry = nullptr;\n@@ -1318,1 +1318,1 @@\n-  return cont_entry != NULL && is_cthread_with_mounted_vthread(jt);\n+  return cont_entry != nullptr && is_cthread_with_mounted_vthread(jt);\n@@ -1321,1 +1321,1 @@\n-\/\/ If (thread == NULL) then return current thread object.\n+\/\/ If (thread == null) then return current thread object.\n@@ -1326,1 +1326,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -1336,2 +1336,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_oop = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_oop = nullptr;\n@@ -1339,1 +1339,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -1342,1 +1342,1 @@\n-    if (thread_oop == NULL || !thread_oop->is_a(vmClasses::Thread_klass())) {\n+    if (thread_oop == nullptr || !thread_oop->is_a(vmClasses::Thread_klass())) {\n@@ -1352,1 +1352,1 @@\n-      if (thread_oop == NULL || err != JVMTI_ERROR_INVALID_THREAD) {\n+      if (thread_oop == nullptr || err != JVMTI_ERROR_INVALID_THREAD) {\n@@ -1357,1 +1357,1 @@\n-    if (java_thread == NULL && java_lang_VirtualThread::is_instance(thread_oop)) {\n+    if (java_thread == nullptr && java_lang_VirtualThread::is_instance(thread_oop)) {\n@@ -1389,2 +1389,2 @@\n-  JavaThread *owning_thread = NULL;\n-  ObjectMonitor *mon = NULL;\n+  JavaThread *owning_thread = nullptr;\n+  ObjectMonitor *mon = nullptr;\n@@ -1392,1 +1392,1 @@\n-      NULL, 0, 0, NULL, 0, NULL\n+      nullptr, 0, 0, nullptr, 0, nullptr\n@@ -1398,1 +1398,1 @@\n-  if (owning_thread != NULL) {\n+  if (owning_thread != nullptr) {\n@@ -1414,1 +1414,1 @@\n-    assert(mon != NULL, \"must have monitor\");\n+    assert(mon != nullptr, \"must have monitor\");\n@@ -1440,1 +1440,1 @@\n-  if (mon != NULL) {\n+  if (mon != nullptr) {\n@@ -1444,1 +1444,1 @@\n-    \/\/ So NULL out memory so that unused memory will be NULL.\n+    \/\/ So null out memory so that unused memory will be null.\n@@ -1471,1 +1471,1 @@\n-          if (waiter == NULL) {\n+          if (waiter == nullptr) {\n@@ -1477,1 +1477,1 @@\n-          if (w != NULL) {\n+          if (w != nullptr) {\n@@ -1506,1 +1506,1 @@\n-  if (list == NULL && count != 0) {\n+  if (list == nullptr && count != 0) {\n@@ -1512,1 +1512,1 @@\n-    if (thread_oop == NULL || !thread_oop->is_a(vmClasses::VirtualThread_klass())) {\n+    if (thread_oop == nullptr || !thread_oop->is_a(vmClasses::VirtualThread_klass())) {\n@@ -1547,1 +1547,1 @@\n-      \/\/ A non-NULL java_thread is always passed in the !single_suspend case.\n+      \/\/ A non-null java_thread is always passed in the !single_suspend case.\n@@ -1549,1 +1549,1 @@\n-      java_thread = carrier_thread == NULL ? NULL : java_lang_Thread::thread(carrier_thread);\n+      java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n@@ -1554,1 +1554,1 @@\n-    if (java_thread == NULL || java_thread->is_suspended()) {\n+    if (java_thread == nullptr || java_thread->is_suspended()) {\n@@ -1615,1 +1615,1 @@\n-      \/\/ A non-NULL java_thread is always passed in the !single_resume case.\n+      \/\/ A non-null java_thread is always passed in the !single_resume case.\n@@ -1617,1 +1617,1 @@\n-      java_thread = carrier_thread == NULL ? NULL : java_lang_Thread::thread(carrier_thread);\n+      java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n@@ -1622,1 +1622,1 @@\n-    if (java_thread == NULL || !java_thread->is_suspended()) {\n+    if (java_thread == nullptr || !java_thread->is_suspended()) {\n@@ -1677,1 +1677,1 @@\n-    *mem_ptr = NULL;\n+    *mem_ptr = nullptr;\n@@ -1691,1 +1691,1 @@\n-  if (dup_str != NULL) {\n+  if (dup_str != nullptr) {\n@@ -1712,1 +1712,1 @@\n-         thr == NULL ||\n+         thr == nullptr ||\n@@ -1724,1 +1724,1 @@\n-  infop->frame_buffer = NULL;\n+  infop->frame_buffer = nullptr;\n@@ -1738,1 +1738,1 @@\n-    if (thr != NULL && (state & JVMTI_THREAD_STATE_ALIVE) != 0) {\n+    if (thr != nullptr && (state & JVMTI_THREAD_STATE_ALIVE) != 0) {\n@@ -1765,1 +1765,1 @@\n-  for (struct StackInfoNode *sin = head(); sin != NULL; sin = sin->next) {\n+  for (struct StackInfoNode *sin = head(); sin != nullptr; sin = sin->next) {\n@@ -1771,1 +1771,1 @@\n-      si->frame_buffer = NULL;\n+      si->frame_buffer = nullptr;\n@@ -1792,2 +1792,2 @@\n-    JavaThread* java_thread = NULL;\n-    oop thread_oop = NULL;\n+    JavaThread* java_thread = nullptr;\n+    oop thread_oop = nullptr;\n@@ -1801,1 +1801,1 @@\n-      if (thread_oop == NULL) {\n+      if (thread_oop == nullptr) {\n@@ -1817,1 +1817,1 @@\n-  if (!jt->is_exiting() && thread_oop != NULL) {\n+  if (!jt->is_exiting() && thread_oop != nullptr) {\n@@ -1832,1 +1832,1 @@\n-    if (thread_oop != NULL &&\n+    if (thread_oop != nullptr &&\n@@ -1883,1 +1883,1 @@\n-  if (tos == atos && jobj != NULL) { \/\/ NULL reference is allowed\n+  if (tos == atos && jobj != nullptr) { \/\/ null reference is allowed\n@@ -1918,2 +1918,2 @@\n-  JavaThread* java_thread = NULL;\n-  oop thread_obj = NULL;\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n@@ -1922,1 +1922,1 @@\n-  if (thread_obj != NULL && java_lang_VirtualThread::is_instance(thread_obj)) {\n+  if (thread_obj != nullptr && java_lang_VirtualThread::is_instance(thread_obj)) {\n@@ -1932,1 +1932,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1993,2 +1993,2 @@\n-  assert(_tos != atos || _value.l == NULL || ret_ob_h() != NULL,\n-         \"return object oop must not be NULL if jobject is not NULL\");\n+  assert(_tos != atos || _value.l == nullptr || ret_ob_h() != nullptr,\n+         \"return object oop must not be null if jobject is not null\");\n@@ -2047,1 +2047,1 @@\n-GrowableArray<OopHandle>* JvmtiModuleClosure::_tbl = NULL;\n+GrowableArray<OopHandle>* JvmtiModuleClosure::_tbl = nullptr;\n@@ -2052,1 +2052,1 @@\n-  guarantee(module.resolve() != NULL, \"module object is NULL\");\n+  guarantee(module.resolve() != nullptr, \"module object is null\");\n@@ -2063,1 +2063,1 @@\n-  if (_tbl == NULL) {\n+  if (_tbl == nullptr) {\n@@ -2074,1 +2074,1 @@\n-  if (array == NULL) {\n+  if (array == nullptr) {\n@@ -2080,1 +2080,1 @@\n-  _tbl = NULL;\n+  _tbl = nullptr;\n@@ -2142,1 +2142,1 @@\n-    if (JvmtiEnvBase::jvf_for_thread_and_depth(java_thread, 1) == NULL) {\n+    if (JvmtiEnvBase::jvf_for_thread_and_depth(java_thread, 1) == nullptr) {\n@@ -2208,1 +2208,1 @@\n-  if (!jt->is_exiting() && (jt->threadObj() != NULL)) {\n+  if (!jt->is_exiting() && (jt->threadObj() != nullptr)) {\n@@ -2218,1 +2218,1 @@\n-  if (!jt->is_exiting() && (jt->threadObj() != NULL)) {\n+  if (!jt->is_exiting() && (jt->threadObj() != nullptr)) {\n@@ -2243,1 +2243,1 @@\n-  if (!jt->is_exiting() && jt->threadObj() != NULL) {\n+  if (!jt->is_exiting() && jt->threadObj() != nullptr) {\n@@ -2259,1 +2259,1 @@\n-  t_oop = t_oop == NULL ? java_thread->threadObj() : t_oop;\n+  t_oop = t_oop == nullptr ? java_thread->threadObj() : t_oop;\n@@ -2276,1 +2276,1 @@\n-    while (jvf != NULL) {\n+    while (jvf != nullptr) {\n@@ -2308,1 +2308,1 @@\n-  if (!jt->is_exiting() && jt->threadObj() != NULL) {\n+  if (!jt->is_exiting() && jt->threadObj() != nullptr) {\n@@ -2316,1 +2316,1 @@\n-  if (!jt->is_exiting() && jt->threadObj() != NULL) {\n+  if (!jt->is_exiting() && jt->threadObj() != nullptr) {\n@@ -2335,1 +2335,1 @@\n-  if (!java_thread->is_exiting() && java_thread->threadObj() != NULL) {\n+  if (!java_thread->is_exiting() && java_thread->threadObj() != nullptr) {\n@@ -2388,1 +2388,1 @@\n-  if (vthread_state == java_lang_VirtualThread::RUNNING && carrier_thread_oop != NULL) {\n+  if (vthread_state == java_lang_VirtualThread::RUNNING && carrier_thread_oop != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-    return java_thread != NULL && java_thread->jvmti_vthread() != NULL\n+    return java_thread != nullptr && java_thread->jvmti_vthread() != nullptr\n@@ -152,1 +152,1 @@\n-    NOT_JVMTI(return NULL);\n+    NOT_JVMTI(return nullptr);\n@@ -170,1 +170,1 @@\n-  \/\/ If (thread == NULL) then return current thread object.\n+  \/\/ If (thread == null) then return current thread object.\n@@ -178,2 +178,2 @@\n-    \/\/ jt can be NULL in case of a virtual thread\n-    if (jt == NULL || jt != current) {\n+    \/\/ jt can be null in case of a virtual thread\n+    if (jt == nullptr || jt != current) {\n@@ -184,1 +184,1 @@\n-    \/\/ cur_obj == NULL is true for normal platform threads only\n+    \/\/ cur_obj == null is true for normal platform threads only\n@@ -186,1 +186,1 @@\n-    return cur_obj == NULL || cur_obj == thr_obj;\n+    return cur_obj == nullptr || cur_obj == thr_obj;\n@@ -191,1 +191,1 @@\n-    if (thread == NULL) {\n+    if (thread == nullptr) {\n@@ -194,1 +194,1 @@\n-      err = JvmtiExport::cv_external_thread_to_JavaThread(tlist, thread, jt_pp, NULL);\n+      err = JvmtiExport::cv_external_thread_to_JavaThread(tlist, thread, jt_pp, nullptr);\n@@ -203,1 +203,1 @@\n-    if (jt->jvmti_vthread() != NULL) {\n+    if (jt->jvmti_vthread() != nullptr) {\n@@ -239,1 +239,1 @@\n-    return head_environment() != NULL;\n+    return head_environment() != nullptr;\n@@ -253,1 +253,1 @@\n-      *mem_ptr = NULL;\n+      *mem_ptr = nullptr;\n@@ -256,1 +256,1 @@\n-      if (*mem_ptr == NULL) {\n+      if (*mem_ptr == nullptr) {\n@@ -264,1 +264,1 @@\n-    if (mem != NULL) {\n+    if (mem != nullptr) {\n@@ -297,1 +297,1 @@\n-    return ((void**)&_event_callbacks)[event_type-JVMTI_MIN_EVENT_TYPE_VAL] != NULL;\n+    return ((void**)&_event_callbacks)[event_type-JVMTI_MIN_EVENT_TYPE_VAL] != nullptr;\n@@ -361,1 +361,1 @@\n-  \/\/ return JavaThread if virtual thread is mounted, NULL otherwise\n+  \/\/ return JavaThread if virtual thread is mounted, null otherwise\n@@ -614,1 +614,1 @@\n-      _stack_info(NULL),\n+      _stack_info(nullptr),\n@@ -617,1 +617,1 @@\n-      _head(NULL) {\n+      _head(nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,2 +133,2 @@\n-  _next                   = NULL;\n-  _frame_pops             = NULL;\n+  _next                   = nullptr;\n+  _frame_pops             = nullptr;\n@@ -136,1 +136,1 @@\n-  _current_method_id      = NULL;\n+  _current_method_id      = nullptr;\n@@ -139,1 +139,1 @@\n-  _agent_thread_local_storage_data = NULL;\n+  _agent_thread_local_storage_data = nullptr;\n@@ -144,1 +144,1 @@\n-  _frame_pops = NULL;\n+  _frame_pops = nullptr;\n@@ -151,1 +151,1 @@\n-\/\/ Use _thread_saved if cthread is detached from JavaThread (_thread == NULL).\n+\/\/ Use _thread_saved if cthread is detached from JavaThread (_thread == null).\n@@ -218,1 +218,1 @@\n-  assert(get_thread() == NULL || get_thread()->is_handshake_safe_for(current),\n+  assert(get_thread() == nullptr || get_thread()->is_handshake_safe_for(current),\n@@ -220,1 +220,1 @@\n-  if (_frame_pops == NULL) {\n+  if (_frame_pops == nullptr) {\n@@ -222,1 +222,1 @@\n-    assert(_frame_pops != NULL, \"_frame_pops != NULL\");\n+    assert(_frame_pops != nullptr, \"_frame_pops != null\");\n@@ -229,1 +229,1 @@\n-  return _frame_pops == NULL? false : (_frame_pops->length() > 0);\n+  return _frame_pops == nullptr? false : (_frame_pops->length() > 0);\n@@ -236,1 +236,1 @@\n-  assert(get_thread() == NULL || get_thread()->is_handshake_safe_for(current),\n+  assert(get_thread() == nullptr || get_thread()->is_handshake_safe_for(current),\n@@ -247,1 +247,1 @@\n-  assert(get_thread() == NULL || get_thread()->is_handshake_safe_for(current),\n+  assert(get_thread() == nullptr || get_thread()->is_handshake_safe_for(current),\n@@ -258,1 +258,1 @@\n-  assert(get_thread() == NULL || get_thread()->is_handshake_safe_for(current),\n+  assert(get_thread() == nullptr || get_thread()->is_handshake_safe_for(current),\n@@ -260,1 +260,1 @@\n-  if (!jvmti_thread_state()->is_interp_only_mode() || _frame_pops == NULL) {\n+  if (!jvmti_thread_state()->is_interp_only_mode() || _frame_pops == nullptr) {\n@@ -277,1 +277,1 @@\n-      _method_id(NULL),\n+      _method_id(nullptr),\n@@ -290,2 +290,2 @@\n-    if (jvf != NULL) {\n-      \/\/ jvf can be NULL, when the native enterSpecial frame is on the top.\n+    if (jvf != nullptr) {\n+      \/\/ jvf can be null, when the native enterSpecial frame is on the top.\n@@ -315,1 +315,1 @@\n-      _method_id(NULL),\n+      _method_id(nullptr),\n@@ -330,1 +330,1 @@\n-      if (vf != NULL) {\n+      if (vf != nullptr) {\n@@ -381,1 +381,1 @@\n-    if (thread == NULL && event_type == JVMTI_EVENT_SINGLE_STEP && is_virtual()) {\n+    if (thread == nullptr && event_type == JVMTI_EVENT_SINGLE_STEP && is_virtual()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-  void clear_current_location() { set_current_location((jmethodID)NULL, 0); }\n+  void clear_current_location() { set_current_location((jmethodID)nullptr, 0); }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,1 +214,1 @@\n-    assert(state != NULL, \"sanity check\");\n+    assert(state != nullptr, \"sanity check\");\n@@ -361,1 +361,1 @@\n-  assert(state != NULL, \"sanity check\");\n+  assert(state != nullptr, \"sanity check\");\n@@ -367,1 +367,1 @@\n-  if (target == NULL) { \/\/ an unmounted virtual thread\n+  if (target == nullptr) { \/\/ an unmounted virtual thread\n@@ -374,1 +374,1 @@\n-    assert(state->get_thread() != NULL, \"sanity check\");\n+    assert(state->get_thread() != nullptr, \"sanity check\");\n@@ -440,1 +440,1 @@\n-  if (tag_map != NULL) {\n+  if (tag_map != nullptr) {\n@@ -450,1 +450,1 @@\n-  if (tag_map != NULL) {\n+  if (tag_map != nullptr) {\n@@ -558,1 +558,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -574,1 +574,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -584,1 +584,1 @@\n-    if (state->get_thread() != NULL) {\n+    if (state->get_thread() != nullptr) {\n@@ -635,1 +635,1 @@\n-  for (JvmtiEnvBase* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnvBase* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -651,1 +651,1 @@\n-      if (vt_oop != NULL && java_lang_VirtualThread::is_instance(vt_oop)) {\n+      if (vt_oop != nullptr && java_lang_VirtualThread::is_instance(vt_oop)) {\n@@ -745,1 +745,1 @@\n-    if (state != NULL) {    \/\/ skip threads with no JVMTI thread state\n+    if (state != nullptr) {    \/\/ skip threads with no JVMTI thread state\n@@ -761,1 +761,1 @@\n-  assert(state != NULL, \"else why are we here?\");\n+  assert(state != nullptr, \"else why are we here?\");\n@@ -812,1 +812,1 @@\n-  bool enabling = (callback != NULL) && (env->is_valid());\n+  bool enabling = (callback != nullptr) && (env->is_valid());\n@@ -858,1 +858,1 @@\n-  for (JvmtiThreadState *state = JvmtiThreadState::first(); state != NULL; state = state->next()) {\n+  for (JvmtiThreadState *state = JvmtiThreadState::first(); state != nullptr; state = state->next()) {\n@@ -874,1 +874,1 @@\n-  set_event_callbacks(env, NULL, 0);\n+  set_event_callbacks(env, nullptr, 0);\n@@ -878,1 +878,1 @@\n-    set_extension_event_callback(env, extension_event_index, NULL);\n+    set_extension_event_callback(env, extension_event_index, nullptr);\n@@ -892,1 +892,1 @@\n-            thread==NULL? \"ALL\": JvmtiTrace::safe_get_thread_name(thread),\n+            thread==nullptr? \"ALL\": JvmtiTrace::safe_get_thread_name(thread),\n@@ -895,3 +895,3 @@\n-  if (thread == NULL && thread_oop_h() == NULL) {\n-    \/\/ NULL thread and NULL thread_oop now indicate setting globally instead\n-    \/\/ of setting thread specific since NULL thread by itself means an\n+  if (thread == nullptr && thread_oop_h() == nullptr) {\n+    \/\/ null thread and null thread_oop now indicate setting globally instead\n+    \/\/ of setting thread specific since null thread by itself means an\n@@ -903,1 +903,1 @@\n-    if (state != NULL) {\n+    if (state != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,2 +213,2 @@\n-  \/\/ Use (thread == NULL) to enable\/disable an event globally.\n-  \/\/ Use (thread != NULL) to enable\/disable an event for a particular thread.\n+  \/\/ Use (thread == null) to enable\/disable an event globally.\n+  \/\/ Use (thread != null) to enable\/disable an event for a particular thread.\n@@ -220,1 +220,1 @@\n-  \/\/ at a safepoint otherwise a NULL callback could be attempted\n+  \/\/ at a safepoint otherwise a null callback could be attempted\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-      _jthread = NULL;\n+      _jthread = nullptr;\n@@ -130,1 +130,1 @@\n-    if (_jthread != NULL)\n+    if (_jthread != nullptr)\n@@ -154,1 +154,1 @@\n-    if (state != NULL) {\n+    if (state != nullptr) {\n@@ -168,1 +168,1 @@\n-    if (state != NULL) {\n+    if (state != nullptr) {\n@@ -176,1 +176,1 @@\n-  jclass to_jclass(Klass* klass) { return (klass == NULL ? NULL : (jclass)to_jobject(klass->java_mirror())); }\n+  jclass to_jclass(Klass* klass) { return (klass == nullptr ? nullptr : (jclass)to_jobject(klass->java_mirror())); }\n@@ -202,1 +202,1 @@\n-    assert(thread->vthread() != NULL || thread->threadObj() == NULL, \"sanity check\");\n+    assert(thread->vthread() != nullptr || thread->threadObj() == nullptr, \"sanity check\");\n@@ -263,1 +263,1 @@\n-      _class_name = name != NULL? name->as_utf8() : NULL;\n+      _class_name = name != nullptr? name->as_utf8() : nullptr;\n@@ -266,2 +266,2 @@\n-      if (class_being_redefined == NULL) {\n-        _class_being_redefined = NULL;\n+      if (class_being_redefined == nullptr) {\n+        _class_being_redefined = nullptr;\n@@ -408,1 +408,1 @@\n-    *penv = NULL;\n+    *penv = nullptr;\n@@ -638,1 +638,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -646,1 +646,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -660,1 +660,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -669,1 +669,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -676,2 +676,2 @@\n-static OopStorage* _jvmti_oop_storage = NULL;\n-static OopStorage* _weak_tag_storage = NULL;\n+static OopStorage* _jvmti_oop_storage = nullptr;\n+static OopStorage* _weak_tag_storage = nullptr;\n@@ -680,1 +680,1 @@\n-  assert(_jvmti_oop_storage != NULL, \"not yet initialized\");\n+  assert(_jvmti_oop_storage != nullptr, \"not yet initialized\");\n@@ -685,1 +685,1 @@\n-  assert(_weak_tag_storage != NULL, \"not yet initialized\");\n+  assert(_weak_tag_storage != nullptr, \"not yet initialized\");\n@@ -704,1 +704,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -712,1 +712,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -726,1 +726,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -734,1 +734,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -760,1 +760,1 @@\n-\/\/ If thread_oop_p is not NULL, then the caller wants to use the oop\n+\/\/ If thread_oop_p is not null, then the caller wants to use the oop\n@@ -770,2 +770,2 @@\n-  assert(t_list != NULL, \"must have a ThreadsList\");\n-  assert(jt_pp != NULL, \"must have a return JavaThread pointer\");\n+  assert(t_list != nullptr, \"must have a ThreadsList\");\n+  assert(jt_pp != nullptr, \"must have a return JavaThread pointer\");\n@@ -774,2 +774,2 @@\n-  if (thread_oop_p != NULL) {\n-    *thread_oop_p = NULL;\n+  if (thread_oop_p != nullptr) {\n+    *thread_oop_p = nullptr;\n@@ -779,2 +779,2 @@\n-  if (thread_oop == NULL) {\n-    \/\/ NULL jthread, GC'ed jthread or a bad JNI handle.\n+  if (thread_oop == nullptr) {\n+    \/\/ null jthread, GC'ed jthread or a bad JNI handle.\n@@ -791,1 +791,1 @@\n-  if (thread_oop_p != NULL) {\n+  if (thread_oop_p != nullptr) {\n@@ -798,1 +798,1 @@\n-  if (java_thread == NULL) {\n+  if (java_thread == nullptr) {\n@@ -833,3 +833,3 @@\n-  assert(t_list != NULL, \"must have a ThreadsList\");\n-  assert(thread_oop != NULL, \"must have an oop\");\n-  assert(jt_pp != NULL, \"must have a return JavaThread pointer\");\n+  assert(t_list != nullptr, \"must have a ThreadsList\");\n+  assert(thread_oop != nullptr, \"must have an oop\");\n+  assert(jt_pp != nullptr, \"must have a return JavaThread pointer\");\n@@ -844,1 +844,1 @@\n-  if (java_thread == NULL) {\n+  if (java_thread == nullptr) {\n@@ -895,1 +895,1 @@\n-    _curr_env = NULL;\n+    _curr_env = nullptr;\n@@ -901,1 +901,1 @@\n-    if (_state != NULL) {\n+    if (_state != nullptr) {\n@@ -904,2 +904,2 @@\n-      Klass* klass = (_class_being_redefined == NULL) ? NULL : _class_being_redefined;\n-      if (_load_kind != jvmti_class_load_kind_load && klass != NULL) {\n+      Klass* klass = (_class_being_redefined == nullptr) ? nullptr : _class_being_redefined;\n+      if (_load_kind != jvmti_class_load_kind_load && klass != nullptr) {\n@@ -907,1 +907,1 @@\n-        assert(module_entry != NULL, \"module_entry should always be set\");\n+        assert(module_entry != nullptr, \"module_entry should always be set\");\n@@ -909,1 +909,1 @@\n-            module_entry->module() != NULL &&\n+            module_entry->module() != nullptr &&\n@@ -927,1 +927,1 @@\n-      _class_being_redefined = NULL;\n+      _class_being_redefined = nullptr;\n@@ -945,1 +945,1 @@\n-      for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+      for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -954,1 +954,1 @@\n-    for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -968,1 +968,1 @@\n-    unsigned char *new_data = NULL;\n+    unsigned char *new_data = nullptr;\n@@ -975,1 +975,1 @@\n-    if (callback != NULL) {\n+    if (callback != nullptr) {\n@@ -983,1 +983,1 @@\n-    if (new_data != NULL) {\n+    if (new_data != nullptr) {\n@@ -986,1 +986,1 @@\n-      if (caching_needed && *_cached_class_file_ptr == NULL) {\n+      if (caching_needed && *_cached_class_file_ptr == nullptr) {\n@@ -992,1 +992,1 @@\n-        if (p == NULL) {\n+        if (p == nullptr) {\n@@ -1036,1 +1036,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -1084,1 +1084,1 @@\n-      assert(k != NULL, \"class for non-primitive mirror must exist\");\n+      assert(k != nullptr, \"class for non-primitive mirror must exist\");\n@@ -1111,1 +1111,1 @@\n-  JvmtiCompiledMethodLoadEventMark(JavaThread *thread, nmethod *nm, void* compile_info_ptr = NULL)\n+  JvmtiCompiledMethodLoadEventMark(JavaThread *thread, nmethod *nm, void* compile_info_ptr = nullptr)\n@@ -1115,1 +1115,1 @@\n-    _compile_info = compile_info_ptr; \/\/ Set void pointer of compiledMethodLoad Event. Default value is NULL.\n+    _compile_info = compile_info_ptr; \/\/ Set void pointer of compiledMethodLoad Event. Default value is null.\n@@ -1159,1 +1159,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -1173,1 +1173,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1190,1 +1190,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1200,1 +1200,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1207,2 +1207,2 @@\n-                     (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                     (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -1215,1 +1215,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1280,1 +1280,1 @@\n-  if (vt != NULL && java_lang_VirtualThread::is_instance(vt)) {\n+  if (vt != nullptr && java_lang_VirtualThread::is_instance(vt)) {\n@@ -1304,1 +1304,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1323,1 +1323,1 @@\n-  if (state != NULL) {\n+  if (state != nullptr) {\n@@ -1331,1 +1331,1 @@\n-  if (state != NULL && state->is_enabled(JVMTI_EVENT_SINGLE_STEP)) {\n+  if (state != nullptr && state->is_enabled(JVMTI_EVENT_SINGLE_STEP)) {\n@@ -1346,1 +1346,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1357,1 +1357,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1365,1 +1365,1 @@\n-                                         klass==NULL? \"NULL\" : klass->external_name() ));\n+                                         klass==nullptr? \"null\" : klass->external_name() ));\n@@ -1369,1 +1369,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1384,1 +1384,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1395,1 +1395,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1403,1 +1403,1 @@\n-                                            klass==NULL? \"NULL\" : klass->external_name() ));\n+                                            klass==nullptr? \"null\" : klass->external_name() ));\n@@ -1407,1 +1407,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1440,1 +1440,1 @@\n-    for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -1450,1 +1450,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1475,1 +1475,1 @@\n-    for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -1486,1 +1486,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1503,1 +1503,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1512,1 +1512,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1524,1 +1524,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1541,1 +1541,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1548,1 +1548,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1559,1 +1559,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1575,1 +1575,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1582,1 +1582,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1593,1 +1593,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1610,1 +1610,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1617,1 +1617,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1628,1 +1628,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1645,1 +1645,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1652,1 +1652,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1663,1 +1663,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1678,1 +1678,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1688,1 +1688,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1706,1 +1706,1 @@\n-  assert(objects != NULL, \"Nothing to post\");\n+  assert(objects != nullptr, \"Nothing to post\");\n@@ -1722,1 +1722,1 @@\n-  if (callback != NULL) {\n+  if (callback != nullptr) {\n@@ -1752,1 +1752,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -1759,1 +1759,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1761,1 +1761,1 @@\n-                    resource_exhausted_flags, NULL, description);\n+                    resource_exhausted_flags, nullptr, description);\n@@ -1772,1 +1772,1 @@\n-  if (state == NULL || !state->is_interp_only_mode()) {\n+  if (state == nullptr || !state->is_interp_only_mode()) {\n@@ -1781,2 +1781,2 @@\n-                     (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                     (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string() ));\n+                     (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string() ));\n@@ -1788,1 +1788,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1792,2 +1792,2 @@\n-                                             (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                                             (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string() ));\n+                                             (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                                             (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string() ));\n@@ -1799,1 +1799,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1813,1 +1813,1 @@\n-  if (state == NULL || !state->is_interp_only_mode()) {\n+  if (state == nullptr || !state->is_interp_only_mode()) {\n@@ -1866,2 +1866,2 @@\n-                                           (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                                           (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string() ));\n+                                           (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                                           (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string() ));\n@@ -1871,1 +1871,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1875,2 +1875,2 @@\n-                                            (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                                            (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string() ));\n+                                            (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                                            (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string() ));\n@@ -1882,1 +1882,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -1891,1 +1891,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1901,2 +1901,2 @@\n-                                            (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                                            (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string() ));\n+                                            (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                                            (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string() ));\n@@ -1909,1 +1909,1 @@\n-          if (callback != NULL) {\n+          if (callback != nullptr) {\n@@ -1933,1 +1933,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1941,1 +1941,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -1946,2 +1946,2 @@\n-                    (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                    (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                    (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                    (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -1954,1 +1954,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -1975,1 +1975,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -1987,2 +1987,2 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n-      if (ets->is_enabled(JVMTI_EVENT_EXCEPTION) && (exception != NULL)) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n+      if (ets->is_enabled(JVMTI_EVENT_EXCEPTION) && (exception != nullptr)) {\n@@ -1993,2 +1993,2 @@\n-                      (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                      (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                      (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                      (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -2007,1 +2007,1 @@\n-        Method* current_method = NULL;\n+        Method* current_method = nullptr;\n@@ -2042,1 +2042,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -2063,1 +2063,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2069,2 +2069,2 @@\n-                     (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                     (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -2094,1 +2094,1 @@\n-      assert(location != NULL, \"must be a known location\");\n+      assert(location != nullptr, \"must be a known location\");\n@@ -2104,2 +2104,2 @@\n-      for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n-        if (ets->is_enabled(JVMTI_EVENT_EXCEPTION_CATCH) && (exception_handle() != NULL)) {\n+      for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n+        if (ets->is_enabled(JVMTI_EVENT_EXCEPTION_CATCH) && (exception_handle() != nullptr)) {\n@@ -2109,2 +2109,2 @@\n-                      (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                      (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                      (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                      (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -2117,1 +2117,1 @@\n-          if (callback != NULL) {\n+          if (callback != nullptr) {\n@@ -2134,1 +2134,1 @@\n-    if (jobj != NULL) return JNIHandles::resolve_non_null(jobj);\n+    if (jobj != nullptr) return JNIHandles::resolve_non_null(jobj);\n@@ -2163,1 +2163,1 @@\n-    assert(obj != NULL, \"non-static needs an object\");\n+    assert(obj != nullptr, \"non-static needs an object\");\n@@ -2179,1 +2179,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2189,1 +2189,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2193,2 +2193,2 @@\n-                     (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                     (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                     (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -2203,1 +2203,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2219,1 +2219,1 @@\n-    if (jobj != NULL) return JNIHandles::resolve_non_null(jobj);\n+    if (jobj != nullptr) return JNIHandles::resolve_non_null(jobj);\n@@ -2250,1 +2250,1 @@\n-    assert(obj != NULL, \"non-static needs an object\");\n+    assert(obj != nullptr, \"non-static needs an object\");\n@@ -2335,1 +2335,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2346,1 +2346,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2351,2 +2351,2 @@\n-                    (mh() == NULL) ? \"NULL\" : mh()->klass_name()->as_C_string(),\n-                    (mh() == NULL) ? \"NULL\" : mh()->name()->as_C_string(),\n+                    (mh() == nullptr) ? \"null\" : mh()->klass_name()->as_C_string(),\n+                    (mh() == nullptr) ? \"null\" : mh()->name()->as_C_string(),\n@@ -2361,1 +2361,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2385,1 +2385,1 @@\n-    for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2392,1 +2392,1 @@\n-        JNIEnv* jni_env = (env->phase() == JVMTI_PHASE_PRIMORDIAL) ? NULL : jem.jni_env();\n+        JNIEnv* jni_env = (env->phase() == JVMTI_PHASE_PRIMORDIAL) ? nullptr : jem.jni_env();\n@@ -2394,1 +2394,1 @@\n-        if (callback != NULL) {\n+        if (callback != nullptr) {\n@@ -2408,1 +2408,1 @@\n-  record->header.next = NULL;\n+  record->header.next = nullptr;\n@@ -2421,1 +2421,1 @@\n-    assert(pc_address != NULL, \"pc_address must be non-null\");\n+    assert(pc_address != nullptr, \"pc_address must be non-null\");\n@@ -2424,1 +2424,1 @@\n-    for(ScopeDesc* sd = nm->scope_desc_at(p->real_pc(nm));sd != NULL;sd = sd->sender()) {\n+    for(ScopeDesc* sd = nm->scope_desc_at(p->real_pc(nm));sd != nullptr;sd = sd->sender()) {\n@@ -2432,3 +2432,3 @@\n-    for(ScopeDesc* sd = nm->scope_desc_at(p->real_pc(nm));sd != NULL;sd = sd->sender()) {\n-      \/\/ sd->method() can be NULL for stubs but not for nmethods. To be completely robust, include an assert that we should never see a null sd->method()\n-      guarantee(sd->method() != NULL, \"sd->method() cannot be null.\");\n+    for(ScopeDesc* sd = nm->scope_desc_at(p->real_pc(nm));sd != nullptr;sd = sd->sender()) {\n+      \/\/ sd->method() can be null for stubs but not for nmethods. To be completely robust, include an assert that we should never see a null sd->method()\n+      guarantee(sd->method() != nullptr, \"sd->method() cannot be null.\");\n@@ -2458,1 +2458,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2469,1 +2469,1 @@\n-  if (callback == NULL) {\n+  if (callback == nullptr) {\n@@ -2479,2 +2479,2 @@\n-            (nm->method() == NULL) ? \"NULL\" : nm->method()->klass_name()->as_C_string(),\n-            (nm->method() == NULL) ? \"NULL\" : nm->method()->name()->as_C_string()));\n+            (nm->method() == nullptr) ? \"null\" : nm->method()->klass_name()->as_C_string(),\n+            (nm->method() == nullptr) ? \"null\" : nm->method()->name()->as_C_string()));\n@@ -2495,1 +2495,1 @@\n-  assert(name != NULL && name[0] != '\\0', \"sanity check\");\n+  assert(name != nullptr && name[0] != '\\0', \"sanity check\");\n@@ -2509,1 +2509,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2518,1 +2518,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2560,1 +2560,1 @@\n-    if (callback != NULL) {\n+    if (callback != nullptr) {\n@@ -2576,1 +2576,1 @@\n-  \/\/ The collector and\/or state might be NULL if JvmtiDynamicCodeEventCollector\n+  \/\/ The collector and\/or state might be null if JvmtiDynamicCodeEventCollector\n@@ -2579,1 +2579,1 @@\n-  if (state != NULL) {\n+  if (state != nullptr) {\n@@ -2581,1 +2581,1 @@\n-    if (collector != NULL) {\n+    if (collector != nullptr) {\n@@ -2590,1 +2590,1 @@\n-  if (thread != NULL && thread->is_Java_thread())  {\n+  if (thread != nullptr && thread->is_Java_thread())  {\n@@ -2596,2 +2596,2 @@\n-    if (state != NULL) {\n-      \/\/ state is non NULL when VMObjectAllocEventCollector is enabled.\n+    if (state != nullptr) {\n+      \/\/ state is non null when VMObjectAllocEventCollector is enabled.\n@@ -2600,1 +2600,1 @@\n-      if (collector != NULL && collector->is_enabled()) {\n+      if (collector != nullptr && collector->is_enabled()) {\n@@ -2614,1 +2614,1 @@\n-  if (thread != NULL && thread->is_Java_thread())  {\n+  if (thread != nullptr && thread->is_Java_thread())  {\n@@ -2620,2 +2620,2 @@\n-    if (state != NULL) {\n-      \/\/ state is non NULL when SampledObjectAllocEventCollector is enabled.\n+    if (state != nullptr) {\n+      \/\/ state is non null when SampledObjectAllocEventCollector is enabled.\n@@ -2625,1 +2625,1 @@\n-      if (collector != NULL && collector->is_enabled()) {\n+      if (collector != nullptr && collector->is_enabled()) {\n@@ -2638,1 +2638,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2644,1 +2644,1 @@\n-      \/\/ JNIEnv is NULL here because this event is posted from VM Thread\n+      \/\/ JNIEnv is null here because this event is posted from VM Thread\n@@ -2646,1 +2646,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2659,1 +2659,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2665,1 +2665,1 @@\n-      \/\/ JNIEnv is NULL here because this event is posted from VM Thread\n+      \/\/ JNIEnv is null here because this event is posted from VM Thread\n@@ -2667,1 +2667,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2680,1 +2680,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2686,1 +2686,1 @@\n-     \/\/ JNIEnv is NULL here because this event is posted from VM Thread\n+     \/\/ JNIEnv is null here because this event is posted from VM Thread\n@@ -2688,1 +2688,1 @@\n-     if (callback != NULL) {\n+     if (callback != nullptr) {\n@@ -2698,1 +2698,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2712,1 +2712,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2721,1 +2721,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2731,1 +2731,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2746,1 +2746,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2755,1 +2755,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2765,1 +2765,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2779,1 +2779,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2788,1 +2788,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2799,1 +2799,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2813,1 +2813,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2822,1 +2822,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2831,1 +2831,1 @@\n-  if (object == NULL) {\n+  if (object == nullptr) {\n@@ -2843,1 +2843,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2847,1 +2847,1 @@\n-                                         object==NULL? \"NULL\" : object->klass()->external_name()));\n+                                         object==nullptr? \"null\" : object->klass()->external_name()));\n@@ -2852,1 +2852,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2862,1 +2862,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -2865,1 +2865,1 @@\n-  if (object == NULL) {\n+  if (object == nullptr) {\n@@ -2878,1 +2878,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -2883,1 +2883,1 @@\n-                 object == NULL ? \"NULL\" : object->klass()->external_name()));\n+                 object == nullptr ? \"null\" : object->klass()->external_name()));\n@@ -2889,1 +2889,1 @@\n-      if (callback != NULL) {\n+      if (callback != nullptr) {\n@@ -2903,1 +2903,1 @@\n-  if (thread->jvmti_thread_state() != NULL) {\n+  if (thread->jvmti_thread_state() != nullptr) {\n@@ -2915,1 +2915,1 @@\n-  if (state != NULL) {\n+  if (state != nullptr) {\n@@ -2938,1 +2938,1 @@\n-  void* library = NULL;\n+  void* library = nullptr;\n@@ -2944,1 +2944,1 @@\n-  bool is_absolute_path = (absParam != NULL) && (strcmp(absParam,\"true\")==0);\n+  bool is_absolute_path = (absParam != nullptr) && (strcmp(absParam,\"true\")==0);\n@@ -2947,1 +2947,1 @@\n-  AgentLibrary *agent_lib = new AgentLibrary(agent, options, is_absolute_path, NULL);\n+  AgentLibrary *agent_lib = new AgentLibrary(agent, options, is_absolute_path, nullptr);\n@@ -2962,1 +2962,1 @@\n-      if (library == NULL) {\n+      if (library == nullptr) {\n@@ -2969,1 +2969,1 @@\n-    if (library != NULL) {\n+    if (library != nullptr) {\n@@ -2978,1 +2978,1 @@\n-    OnAttachEntry_t on_attach_entry = NULL;\n+    OnAttachEntry_t on_attach_entry = nullptr;\n@@ -2981,1 +2981,1 @@\n-    if (on_attach_entry == NULL) {\n+    if (on_attach_entry == nullptr) {\n@@ -2997,1 +2997,1 @@\n-        result = (*on_attach_entry)(&main_vm, (char*)options, NULL);\n+        result = (*on_attach_entry)(&main_vm, (char*)options, nullptr);\n@@ -3041,1 +3041,1 @@\n-  \/\/ state can only be NULL if the current thread is exiting which\n+  \/\/ state can only be null if the current thread is exiting which\n@@ -3043,1 +3043,1 @@\n-  guarantee(state != NULL, \"exiting thread called setup_jvmti_thread_state\");\n+  guarantee(state != nullptr, \"exiting thread called setup_jvmti_thread_state\");\n@@ -3080,1 +3080,1 @@\n-  if (state != NULL) {\n+  if (state != nullptr) {\n@@ -3108,1 +3108,1 @@\n-JvmtiDynamicCodeEventCollector::JvmtiDynamicCodeEventCollector() : _code_blobs(NULL) {\n+JvmtiDynamicCodeEventCollector::JvmtiDynamicCodeEventCollector() : _code_blobs(nullptr) {\n@@ -3119,1 +3119,1 @@\n- if (_code_blobs != NULL) {\n+ if (_code_blobs != nullptr) {\n@@ -3132,1 +3132,1 @@\n- if (_code_blobs == NULL) {\n+ if (_code_blobs == nullptr) {\n@@ -3140,1 +3140,1 @@\n-    _allocated(NULL), _enable(false), _post_callback(NULL) {\n+    _allocated(nullptr), _enable(false), _post_callback(nullptr) {\n@@ -3155,1 +3155,1 @@\n-    delete _allocated, _allocated = NULL;\n+    delete _allocated, _allocated = nullptr;\n@@ -3161,1 +3161,1 @@\n-  if (_allocated == NULL) {\n+  if (_allocated == nullptr) {\n@@ -3168,1 +3168,1 @@\n-NoJvmtiVMObjectAllocMark::NoJvmtiVMObjectAllocMark() : _collector(NULL) {\n+NoJvmtiVMObjectAllocMark::NoJvmtiVMObjectAllocMark() : _collector(nullptr) {\n@@ -3174,1 +3174,1 @@\n-  if (thread != NULL && thread->is_Java_thread())  {\n+  if (thread != nullptr && thread->is_Java_thread())  {\n@@ -3177,1 +3177,1 @@\n-    if (state != NULL) {\n+    if (state != nullptr) {\n@@ -3180,1 +3180,1 @@\n-      if (collector != NULL && collector->is_enabled()) {\n+      if (collector != nullptr && collector->is_enabled()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":233,"deletions":233,"binary":false,"changes":466,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -322,1 +322,1 @@\n-    NOT_JVMTI_RETURN_(NULL);\n+    NOT_JVMTI_RETURN_(nullptr);\n@@ -329,1 +329,1 @@\n-    jvalue *value) NOT_JVMTI_RETURN_(NULL);\n+    jvalue *value) NOT_JVMTI_RETURN_(nullptr);\n@@ -430,1 +430,1 @@\n-  static char** get_all_native_method_prefixes(int* count_ptr) NOT_JVMTI_RETURN_(NULL);\n+  static char** get_all_native_method_prefixes(int* count_ptr) NOT_JVMTI_RETURN_(nullptr);\n@@ -451,1 +451,1 @@\n-    assert(name != NULL, \"all code blobs must be named\");\n+    assert(name != nullptr, \"all code blobs must be named\");\n@@ -470,1 +470,1 @@\n-  JvmtiEventCollector() : _prev(NULL), _unset_jvmti_thread_state(false) {}\n+  JvmtiEventCollector() : _prev(nullptr), _unset_jvmti_thread_state(false) {}\n@@ -585,1 +585,1 @@\n-  \/\/ enclosing collector if enabled, NULL otherwise\n+  \/\/ enclosing collector if enabled, null otherwise\n@@ -588,1 +588,1 @@\n-  bool was_enabled()    { return _collector != NULL; }\n+  bool was_enabled()    { return _collector != nullptr; }\n@@ -612,1 +612,1 @@\n-    assert(thread != NULL, \"sanity check\");\n+    assert(thread != nullptr, \"sanity check\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-  jboolean* enabled = NULL;\n+  jboolean* enabled = nullptr;\n@@ -52,1 +52,1 @@\n-  if (enabled == NULL) {\n+  if (enabled == nullptr) {\n@@ -68,5 +68,5 @@\n-  jthread thread = NULL;\n-  jthread* vthread_ptr = NULL;\n-  JavaThread* java_thread = NULL;\n-  oop cthread_oop = NULL;\n-  oop thread_oop = NULL;\n+  jthread thread = nullptr;\n+  jthread* vthread_ptr = nullptr;\n+  JavaThread* java_thread = nullptr;\n+  oop cthread_oop = nullptr;\n+  oop thread_oop = nullptr;\n@@ -86,1 +86,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -95,1 +95,1 @@\n-  if (vthread_ptr == NULL) {\n+  if (vthread_ptr == nullptr) {\n@@ -98,1 +98,1 @@\n-  if (cthread_oop == NULL || java_lang_VirtualThread::is_instance(cthread_oop)) {\n+  if (cthread_oop == nullptr || java_lang_VirtualThread::is_instance(cthread_oop)) {\n@@ -101,1 +101,1 @@\n-  *vthread_ptr = NULL;\n+  *vthread_ptr = nullptr;\n@@ -104,1 +104,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -109,1 +109,1 @@\n-    vthread_oop = NULL;\n+    vthread_oop = nullptr;\n@@ -124,2 +124,2 @@\n-  jthread vthread = NULL;\n-  jthread* thread_ptr = NULL;\n+  jthread vthread = nullptr;\n+  jthread* thread_ptr = nullptr;\n@@ -138,1 +138,1 @@\n-  oop vthread_oop = NULL;\n+  oop vthread_oop = nullptr;\n@@ -140,1 +140,1 @@\n-  if (vthread == NULL) {\n+  if (vthread == nullptr) {\n@@ -150,1 +150,1 @@\n-    if (vthread_oop == NULL) {\n+    if (vthread_oop == nullptr) {\n@@ -158,1 +158,1 @@\n-  if (thread_ptr == NULL) {\n+  if (thread_ptr == nullptr) {\n@@ -201,1 +201,1 @@\n-    NULL\n+    nullptr\n@@ -273,1 +273,1 @@\n-  guarantee(_ext_functions != NULL, \"registration not done\");\n+  guarantee(_ext_functions != nullptr, \"registration not done\");\n@@ -309,1 +309,1 @@\n-      ext_funcs[i].params = NULL;\n+      ext_funcs[i].params = nullptr;\n@@ -338,1 +338,1 @@\n-      ext_funcs[i].errors = NULL;\n+      ext_funcs[i].errors = nullptr;\n@@ -362,1 +362,1 @@\n-  guarantee(_ext_events != NULL, \"registration not done\");\n+  guarantee(_ext_events != nullptr, \"registration not done\");\n@@ -397,1 +397,1 @@\n-      ext_events[i].params = NULL;\n+      ext_events[i].params = nullptr;\n@@ -433,1 +433,1 @@\n-  guarantee(_ext_events != NULL, \"registration not done\");\n+  guarantee(_ext_events != nullptr, \"registration not done\");\n@@ -435,1 +435,1 @@\n-  jvmtiExtensionEventInfo* event = NULL;\n+  jvmtiExtensionEventInfo* event = nullptr;\n@@ -439,1 +439,1 @@\n-  if (_ext_events != NULL) {\n+  if (_ext_events != nullptr) {\n@@ -449,1 +449,1 @@\n-  if (event == NULL) {\n+  if (event == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExtensions.cpp","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-      for (Klass* l = k->array_klass_or_null(); l != NULL; l = l->array_klass_or_null()) {\n+      for (Klass* l = k->array_klass_or_null(); l != nullptr; l = l->array_klass_or_null()) {\n@@ -131,2 +131,2 @@\n-    \/\/ dictionary, or the NULL ClassLoaderData dictionary for bootstrap loader.\n-    if (loader != NULL) {\n+    \/\/ dictionary, or the null ClassLoaderData dictionary for bootstrap loader.\n+    if (loader != nullptr) {\n@@ -135,1 +135,1 @@\n-      if (data != NULL && data->dictionary() != NULL) {\n+      if (data != nullptr && data->dictionary() != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiGetLoadedClasses.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,2 +111,2 @@\n-    if (_cache[i] == NULL) {\n-      assert(false, \"cannot recache NULL elements\");\n+    if (_cache[i] == nullptr) {\n+      assert(false, \"cannot recache null elements\");\n@@ -117,1 +117,1 @@\n-  _cache[len] = NULL;\n+  _cache[len] = nullptr;\n@@ -124,2 +124,2 @@\n-  assert(e1 != NULL, \"e1 != NULL\");\n-  assert(e2 != NULL, \"e2 != NULL\");\n+  assert(e1 != nullptr, \"e1 != null\");\n+  assert(e2 != nullptr, \"e2 != null\");\n@@ -135,4 +135,4 @@\n-  _this_obj       = NULL;\n-  _listener_fun   = NULL;\n-  _elements       = NULL;\n-  _cache          = NULL;\n+  _this_obj       = nullptr;\n+  _listener_fun   = nullptr;\n+  _elements       = nullptr;\n+  _cache          = nullptr;\n@@ -162,1 +162,1 @@\n-  assert(e != NULL, \"e != NULL\");\n+  assert(e != nullptr, \"e != null\");\n@@ -180,1 +180,1 @@\n-  assert(e != NULL, \"e != NULL\");\n+  assert(e != nullptr, \"e != null\");\n@@ -203,1 +203,1 @@\n-  assert(_method != NULL, \"No method for breakpoint.\");\n+  assert(_method != nullptr, \"No method for breakpoint.\");\n@@ -239,1 +239,1 @@\n-       pv_node != NULL;\n+       pv_node != nullptr;\n@@ -280,2 +280,2 @@\n-  const char *class_name  = (_method == NULL) ? \"NULL\" : _method->klass_name()->as_C_string();\n-  const char *method_name = (_method == NULL) ? \"NULL\" : _method->name()->as_C_string();\n+  const char *class_name  = (_method == nullptr) ? \"null\" : _method->klass_name()->as_C_string();\n+  const char *method_name = (_method == nullptr) ? \"null\" : _method->name()->as_C_string();\n@@ -405,2 +405,2 @@\n-JvmtiBreakpoints *JvmtiCurrentBreakpoints::_jvmti_breakpoints  = NULL;\n-address *         JvmtiCurrentBreakpoints::_breakpoint_list    = NULL;\n+JvmtiBreakpoints *JvmtiCurrentBreakpoints::_jvmti_breakpoints  = nullptr;\n+address *         JvmtiCurrentBreakpoints::_breakpoint_list    = nullptr;\n@@ -410,1 +410,1 @@\n-  if (_jvmti_breakpoints != NULL) return (*_jvmti_breakpoints);\n+  if (_jvmti_breakpoints != nullptr) return (*_jvmti_breakpoints);\n@@ -412,1 +412,1 @@\n-  assert(_jvmti_breakpoints != NULL, \"_jvmti_breakpoints != NULL\");\n+  assert(_jvmti_breakpoints != nullptr, \"_jvmti_breakpoints != null\");\n@@ -418,1 +418,1 @@\n-  assert(this_jvmti != NULL, \"this_jvmti != NULL\");\n+  assert(this_jvmti != nullptr, \"this_jvmti != null\");\n@@ -421,1 +421,1 @@\n-  assert(cache[n] == NULL, \"cache must be NULL terminated\");\n+  assert(cache[n] == nullptr, \"cache must be null terminated\");\n@@ -441,1 +441,1 @@\n-  , _jvf(NULL)\n+  , _jvf(nullptr)\n@@ -454,3 +454,3 @@\n-  assert(ty_sign != NULL, \"type signature must not be NULL\");\n-  assert(thread != NULL, \"thread must not be NULL\");\n-  assert(klass != NULL, \"klass must not be NULL\");\n+  assert(ty_sign != nullptr, \"type signature must not be null\");\n+  assert(thread != nullptr, \"thread must not be null\");\n+  assert(klass != nullptr, \"klass must not be null\");\n@@ -548,1 +548,1 @@\n-  if (_set && slot_type == T_OBJECT && jobj != NULL) { \/\/ NULL reference is allowed\n+  if (_set && slot_type == T_OBJECT && jobj != nullptr) { \/\/ null reference is allowed\n@@ -609,1 +609,1 @@\n-  if (_jvf == NULL) {\n+  if (_jvf == nullptr) {\n@@ -748,1 +748,1 @@\n-  : VM_BaseGetOrSetLocal(NULL, depth, index, type, _DEFAULT_VALUE, false, self),\n+  : VM_BaseGetOrSetLocal(nullptr, depth, index, type, _DEFAULT_VALUE, false, self),\n@@ -750,1 +750,1 @@\n-    _eb(false, NULL, NULL)\n+    _eb(false, nullptr, nullptr)\n@@ -756,1 +756,1 @@\n-  : VM_BaseGetOrSetLocal(NULL, depth, index, type, value, true, self),\n+  : VM_BaseGetOrSetLocal(nullptr, depth, index, type, value, true, self),\n@@ -772,1 +772,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -780,1 +780,1 @@\n-  while ((vf != NULL) && (d < _depth)) {\n+  while ((vf != nullptr) && (d < _depth)) {\n@@ -791,1 +791,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -793,1 +793,1 @@\n-  if (vf == NULL) {\n+  if (vf == nullptr) {\n@@ -795,1 +795,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -801,1 +801,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -819,1 +819,1 @@\n-  : VM_BaseGetOrSetLocal(NULL, depth, index, type, _DEFAULT_VALUE, false, self)\n+  : VM_BaseGetOrSetLocal(nullptr, depth, index, type, _DEFAULT_VALUE, false, self)\n@@ -828,1 +828,1 @@\n-  : VM_BaseGetOrSetLocal(NULL, depth, index, type, value, true, self)\n+  : VM_BaseGetOrSetLocal(nullptr, depth, index, type, value, true, self)\n@@ -846,1 +846,1 @@\n-  assert(cont != NULL, \"vthread contintuation must not be NULL\");\n+  assert(cont != nullptr, \"vthread contintuation must not be null\");\n@@ -848,1 +848,1 @@\n-  javaVFrame* jvf = NULL;\n+  javaVFrame* jvf = nullptr;\n@@ -850,1 +850,1 @@\n-  bool is_cont_mounted = (java_thread != NULL);\n+  bool is_cont_mounted = (java_thread != nullptr);\n@@ -854,1 +854,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -873,1 +873,1 @@\n-  while ((jvf != NULL) && (d < _depth)) {\n+  while ((jvf != nullptr) && (d < _depth)) {\n@@ -878,1 +878,1 @@\n-  if (d < _depth || jvf == NULL) {\n+  if (d < _depth || jvf == nullptr) {\n@@ -880,1 +880,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -885,1 +885,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -985,1 +985,1 @@\n-        (_event_data.dynamic_code_generated.name == NULL)\n+        (_event_data.dynamic_code_generated.name == nullptr)\n@@ -989,1 +989,1 @@\n-      if (_event_data.dynamic_code_generated.name != NULL) {\n+      if (_event_data.dynamic_code_generated.name != nullptr) {\n@@ -998,1 +998,1 @@\n-        (_event_data.class_unload.name == NULL)\n+        (_event_data.class_unload.name == nullptr)\n@@ -1000,1 +1000,1 @@\n-      if (_event_data.class_unload.name != NULL) {\n+      if (_event_data.class_unload.name != nullptr) {\n@@ -1026,1 +1026,1 @@\n-  if (cf != NULL && _type == TYPE_COMPILED_METHOD_LOAD) {\n+  if (cf != nullptr && _type == TYPE_COMPILED_METHOD_LOAD) {\n@@ -1034,1 +1034,1 @@\n-  if (cf != NULL && _type == TYPE_COMPILED_METHOD_LOAD) {\n+  if (cf != nullptr && _type == TYPE_COMPILED_METHOD_LOAD) {\n@@ -1048,1 +1048,1 @@\n-  return JvmtiEnvBase::get_phase() == JVMTI_PHASE_LIVE  && _queue_head != NULL;\n+  return JvmtiEnvBase::get_phase() == JVMTI_PHASE_LIVE  && _queue_head != nullptr;\n@@ -1054,1 +1054,1 @@\n-  if (_queue_tail == NULL) {\n+  if (_queue_tail == nullptr) {\n@@ -1057,1 +1057,1 @@\n-    assert(_queue_tail->next() == NULL, \"Must be the last element in the list\");\n+    assert(_queue_tail->next() == nullptr, \"Must be the last element in the list\");\n@@ -1062,1 +1062,1 @@\n-  assert((_queue_head == NULL) == (_queue_tail == NULL),\n+  assert((_queue_head == nullptr) == (_queue_tail == nullptr),\n@@ -1067,1 +1067,1 @@\n-  assert(_queue_head != NULL, \"Nothing to dequeue\");\n+  assert(_queue_head != nullptr, \"Nothing to dequeue\");\n@@ -1069,1 +1069,1 @@\n-  if (_queue_head == NULL) {\n+  if (_queue_head == nullptr) {\n@@ -1076,2 +1076,2 @@\n-  if (_queue_head == NULL) {\n-    _queue_tail = NULL;\n+  if (_queue_head == nullptr) {\n+    _queue_tail = nullptr;\n@@ -1080,1 +1080,1 @@\n-  assert((_queue_head == NULL) == (_queue_tail == NULL),\n+  assert((_queue_head == nullptr) == (_queue_tail == nullptr),\n@@ -1090,1 +1090,1 @@\n-  while (_queue_head != NULL) {\n+  while (_queue_head != nullptr) {\n@@ -1097,1 +1097,1 @@\n-  for(QueueNode* node = _queue_head; node != NULL; node = node->next()) {\n+  for(QueueNode* node = _queue_head; node != nullptr; node = node->next()) {\n@@ -1104,1 +1104,1 @@\n-  for(QueueNode* node = _queue_head; node != NULL; node = node->next()) {\n+  for(QueueNode* node = _queue_head; node != nullptr; node = node->next()) {\n@@ -1110,1 +1110,1 @@\n-  for(QueueNode* node = _queue_head; node != NULL; node = node->next()) {\n+  for(QueueNode* node = _queue_head; node != nullptr; node = node->next()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-\/\/ In addition, the GrowableCache maintains a NULL terminated cache array of type address\n+\/\/ In addition, the GrowableCache maintains a null terminated cache array of type address\n@@ -165,1 +165,1 @@\n-  JvmtiBreakpoint() : _method(NULL), _bci(0) {}\n+  JvmtiBreakpoint() : _method(nullptr), _bci(0) {}\n@@ -251,1 +251,1 @@\n-  \/\/ NULL terminated cache of byte-code pointers corresponding to current breakpoints.\n+  \/\/ null terminated cache of byte-code pointers corresponding to current breakpoints.\n@@ -292,1 +292,1 @@\n-    assert(bp != NULL, \"bp != NULL\");\n+    assert(bp != nullptr, \"bp != null\");\n@@ -524,1 +524,1 @@\n-      : _event(event), _next(NULL) {}\n+      : _event(event), _next(nullptr) {}\n@@ -536,1 +536,1 @@\n-  JvmtiDeferredEventQueue() : _queue_head(NULL), _queue_tail(NULL) {}\n+  JvmtiDeferredEventQueue() : _queue_head(nullptr), _queue_tail(nullptr) {}\n@@ -552,2 +552,2 @@\n-\/\/ Utility macro that checks for NULL pointers:\n-#define NULL_CHECK(X, Y) if ((X) == NULL) { return (Y); }\n+\/\/ Utility macro that checks for null pointers:\n+#NULL nullptr_CHECK(X, Y) if ((X) == nullptr) { return (Y); }\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-JvmtiRawMonitor::QNode::QNode(Thread* thread) : _next(NULL), _prev(NULL),\n+JvmtiRawMonitor::QNode::QNode(Thread* thread) : _next(nullptr), _prev(nullptr),\n@@ -62,1 +62,1 @@\n-JvmtiRawMonitor::JvmtiRawMonitor(const char* name) : _owner(NULL),\n+JvmtiRawMonitor::JvmtiRawMonitor(const char* name) : _owner(nullptr),\n@@ -64,2 +64,2 @@\n-                                                     _entry_list(NULL),\n-                                                     _wait_set(NULL),\n+                                                     _entry_list(nullptr),\n+                                                     _wait_set(nullptr),\n@@ -67,1 +67,1 @@\n-                                                     _name(NULL) {\n+                                                     _name(nullptr) {\n@@ -141,1 +141,1 @@\n-    if (_owner == NULL && Atomic::replace_if_null(&_owner, self)) {\n+    if (_owner == nullptr && Atomic::replace_if_null(&_owner, self)) {\n@@ -158,1 +158,1 @@\n-  Atomic::release_store(&_owner, (Thread*)NULL);\n+  Atomic::release_store(&_owner, (Thread*)nullptr);\n@@ -163,1 +163,1 @@\n-  if (_entry_list == NULL) {\n+  if (_entry_list == nullptr) {\n@@ -169,1 +169,1 @@\n-  if (w != NULL) {\n+  if (w != nullptr) {\n@@ -173,1 +173,1 @@\n-  if (w != NULL) {\n+  if (w != nullptr) {\n@@ -208,1 +208,1 @@\n-      QNode* q = NULL;\n+      QNode* q = nullptr;\n@@ -213,1 +213,1 @@\n-      if (q == NULL) {\n+      if (q == nullptr) {\n@@ -284,1 +284,1 @@\n-  if (_wait_set == NULL) {\n+  if (_wait_set == nullptr) {\n@@ -295,1 +295,1 @@\n-  ParkEvent* ev = NULL;       \/\/ consider using a small auto array ...\n+  ParkEvent* ev = nullptr;       \/\/ consider using a small auto array ...\n@@ -299,1 +299,1 @@\n-    if (w == NULL) break;\n+    if (w == nullptr) break;\n@@ -301,1 +301,1 @@\n-    if (ev != NULL) {\n+    if (ev != nullptr) {\n@@ -303,1 +303,1 @@\n-      ev = NULL;\n+      ev = nullptr;\n@@ -314,1 +314,1 @@\n-  if (ev != NULL) {\n+  if (ev != nullptr) {\n@@ -354,1 +354,1 @@\n-  self->set_current_pending_raw_monitor(NULL);\n+  self->set_current_pending_raw_monitor(nullptr);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,6 +67,6 @@\n-Array<Method*>* VM_RedefineClasses::_old_methods = NULL;\n-Array<Method*>* VM_RedefineClasses::_new_methods = NULL;\n-Method**  VM_RedefineClasses::_matching_old_methods = NULL;\n-Method**  VM_RedefineClasses::_matching_new_methods = NULL;\n-Method**  VM_RedefineClasses::_deleted_methods      = NULL;\n-Method**  VM_RedefineClasses::_added_methods        = NULL;\n+Array<Method*>* VM_RedefineClasses::_old_methods = nullptr;\n+Array<Method*>* VM_RedefineClasses::_new_methods = nullptr;\n+Method**  VM_RedefineClasses::_matching_old_methods = nullptr;\n+Method**  VM_RedefineClasses::_matching_new_methods = nullptr;\n+Method**  VM_RedefineClasses::_deleted_methods      = nullptr;\n+Method**  VM_RedefineClasses::_added_methods        = nullptr;\n@@ -89,1 +89,1 @@\n-  _the_class = NULL;\n+  _the_class = nullptr;\n@@ -106,1 +106,1 @@\n-  if (redef_classes == NULL) {\n+  if (redef_classes == nullptr) {\n@@ -144,1 +144,1 @@\n-  assert(redef_classes != NULL, \"_classes_being_redefined is not allocated\");\n+  assert(redef_classes != nullptr, \"_classes_being_redefined is not allocated\");\n@@ -173,1 +173,1 @@\n-  if (_class_defs == NULL) {\n+  if (_class_defs == nullptr) {\n@@ -179,1 +179,1 @@\n-    if (_class_defs[i].klass == NULL) {\n+    if (_class_defs[i].klass == nullptr) {\n@@ -187,1 +187,1 @@\n-    if (_class_defs[i].class_bytes == NULL) {\n+    if (_class_defs[i].class_bytes == nullptr) {\n@@ -214,1 +214,1 @@\n-      if (_scratch_classes[i] != NULL) {\n+      if (_scratch_classes[i] != nullptr) {\n@@ -221,1 +221,1 @@\n-          _scratch_classes[i]->set_cached_class_file(NULL);\n+          _scratch_classes[i]->set_cached_class_file(nullptr);\n@@ -314,1 +314,1 @@\n-  _the_class = NULL;\n+  _the_class = nullptr;\n@@ -338,1 +338,1 @@\n-  if (k == NULL || !k->is_instance_klass()) {\n+  if (k == nullptr || !k->is_instance_klass()) {\n@@ -482,1 +482,1 @@\n-      const char *entry_name = NULL;\n+      const char *entry_name = nullptr;\n@@ -723,1 +723,1 @@\n-  if (merge_cp->operands() == NULL) {\n+  if (merge_cp->operands() == nullptr) {\n@@ -741,1 +741,1 @@\n-  _operands_index_map_p = NULL;\n+  _operands_index_map_p = nullptr;\n@@ -778,1 +778,1 @@\n-    if (the_syms == NULL || scr_syms == NULL) {\n+    if (the_syms == nullptr || scr_syms == nullptr) {\n@@ -848,2 +848,2 @@\n-  bool the_record_exists = the_record != NULL;\n-  bool scr_record_exists = scr_record != NULL;\n+  bool the_record_exists = the_record != nullptr;\n+  bool scr_record_exists = scr_record != nullptr;\n@@ -880,1 +880,1 @@\n-      const Symbol* const the_gen_sig_sym = (the_gen_sig == 0 ? NULL :\n+      const Symbol* const the_gen_sig_sym = (the_gen_sig == 0 ? nullptr :\n@@ -882,1 +882,1 @@\n-      const Symbol* const scr_gen_sig_sym = (scr_gen_sig == 0 ? NULL :\n+      const Symbol* const scr_gen_sig_sym = (scr_gen_sig == 0 ? nullptr :\n@@ -931,1 +931,1 @@\n-  \/\/ Check for NULL superclass first since this might be java.lang.Object\n+  \/\/ Check for null superclass first since this might be java.lang.Object\n@@ -933,1 +933,1 @@\n-      (the_class->super() == NULL || scratch_class->super() == NULL ||\n+      (the_class->super() == nullptr || scratch_class->super() == nullptr ||\n@@ -939,2 +939,2 @@\n-       the_class->super() == NULL ? \"NULL\" : the_class->super()->external_name(),\n-       scratch_class->super() == NULL ? \"NULL\" : scratch_class->super()->external_name());\n+       the_class->super() == nullptr ? \"null\" : the_class->super()->external_name(),\n+       scratch_class->super() == nullptr ? \"null\" : scratch_class->super()->external_name());\n@@ -1153,1 +1153,1 @@\n-          if (idnum_owner != NULL) {\n+          if (idnum_owner != nullptr) {\n@@ -1193,1 +1193,1 @@\n-        if (idnum_owner != NULL) {\n+        if (idnum_owner != nullptr) {\n@@ -1353,1 +1353,1 @@\n-  if (_scratch_classes == NULL) {\n+  if (_scratch_classes == nullptr) {\n@@ -1358,1 +1358,1 @@\n-    _scratch_classes[i] = NULL;\n+    _scratch_classes[i] = nullptr;\n@@ -1365,1 +1365,1 @@\n-  \/\/ state can only be NULL if the current thread is exiting which\n+  \/\/ state can only be null if the current thread is exiting which\n@@ -1367,1 +1367,1 @@\n-  guarantee(state != NULL, \"exiting thread calling load_new_class_versions\");\n+  guarantee(state != nullptr, \"exiting thread calling load_new_class_versions\");\n@@ -1438,1 +1438,1 @@\n-        if (message != NULL) {\n+        if (message != nullptr) {\n@@ -1603,1 +1603,1 @@\n-  if (merge_cp_p == NULL) {\n+  if (merge_cp_p == nullptr) {\n@@ -1607,1 +1607,1 @@\n-  if (merge_cp_length_p == NULL) {\n+  if (merge_cp_length_p == nullptr) {\n@@ -1787,1 +1787,1 @@\n-                 _loader_data(loader_data), _cp(merge_cp), _scratch_cp(NULL) {}\n+                 _loader_data(loader_data), _cp(merge_cp), _scratch_cp(nullptr) {}\n@@ -1790,1 +1790,1 @@\n-    if (_scratch_cp != NULL) {\n+    if (_scratch_cp != nullptr) {\n@@ -1853,1 +1853,1 @@\n-  merge_cp->set_pool_holder(NULL);\n+  merge_cp->set_pool_holder(nullptr);\n@@ -2065,1 +2065,1 @@\n-  if (components != NULL) {\n+  if (components != nullptr) {\n@@ -2078,1 +2078,1 @@\n-      if (annotations != NULL && annotations->length() != 0) {\n+      if (annotations != nullptr && annotations->length() != 0) {\n@@ -2088,1 +2088,1 @@\n-      if (type_annotations != NULL && type_annotations->length() != 0) {\n+      if (type_annotations != nullptr && type_annotations->length() != 0) {\n@@ -2106,1 +2106,1 @@\n-  assert(permitted_subclasses != NULL, \"unexpected null permitted_subclasses\");\n+  assert(permitted_subclasses != nullptr, \"unexpected null permitted_subclasses\");\n@@ -2119,1 +2119,1 @@\n-  if (methods == NULL || methods->length() == 0) {\n+  if (methods == nullptr || methods->length() == 0) {\n@@ -2217,1 +2217,1 @@\n-            Relocator rc(method, NULL \/* no RelocatorListener needed *\/);\n+            Relocator rc(method, nullptr \/* no RelocatorListener needed *\/);\n@@ -2286,1 +2286,1 @@\n-  if (class_annotations == NULL || class_annotations->length() == 0) {\n+  if (class_annotations == nullptr || class_annotations->length() == 0) {\n@@ -2572,1 +2572,1 @@\n-  if (fields_annotations == NULL || fields_annotations->length() == 0) {\n+  if (fields_annotations == nullptr || fields_annotations->length() == 0) {\n@@ -2581,1 +2581,1 @@\n-    if (field_annotations == NULL || field_annotations->length() == 0) {\n+    if (field_annotations == nullptr || field_annotations->length() == 0) {\n@@ -2606,1 +2606,1 @@\n-    if (method_annotations == NULL || method_annotations->length() == 0) {\n+    if (method_annotations == nullptr || method_annotations->length() == 0) {\n@@ -2642,1 +2642,1 @@\n-    if (method_parameter_annotations == NULL\n+    if (method_parameter_annotations == nullptr\n@@ -2690,1 +2690,1 @@\n-    if (method_default_annotations == NULL\n+    if (method_default_annotations == nullptr\n@@ -2715,1 +2715,1 @@\n-  if (class_type_annotations == NULL || class_type_annotations->length() == 0) {\n+  if (class_type_annotations == nullptr || class_type_annotations->length() == 0) {\n@@ -2732,1 +2732,1 @@\n-  if (fields_type_annotations == NULL || fields_type_annotations->length() == 0) {\n+  if (fields_type_annotations == nullptr || fields_type_annotations->length() == 0) {\n@@ -2741,1 +2741,1 @@\n-    if (field_type_annotations == NULL || field_type_annotations->length() == 0) {\n+    if (field_type_annotations == nullptr || field_type_annotations->length() == 0) {\n@@ -2767,1 +2767,1 @@\n-    if (method_type_annotations == NULL || method_type_annotations->length() == 0) {\n+    if (method_type_annotations == nullptr || method_type_annotations->length() == 0) {\n@@ -3739,1 +3739,1 @@\n-      if (methods->at(index)->method_data() != NULL) {\n+      if (methods->at(index)->method_data() != nullptr) {\n@@ -3778,1 +3778,1 @@\n-    if (cp_cache != NULL) {\n+    if (cp_cache != nullptr) {\n@@ -3784,1 +3784,1 @@\n-         pv_node != NULL;\n+         pv_node != nullptr;\n@@ -3787,1 +3787,1 @@\n-      if (cp_cache != NULL) {\n+      if (cp_cache != nullptr) {\n@@ -3798,1 +3798,1 @@\n-    if (jmid != NULL) {\n+    if (jmid != nullptr) {\n@@ -3981,1 +3981,1 @@\n-    if (name_symbol != NULL) {\n+    if (name_symbol != nullptr) {\n@@ -3983,1 +3983,1 @@\n-      if (method != NULL) {\n+      if (method != nullptr) {\n@@ -3992,1 +3992,1 @@\n-          if (method != NULL) {\n+          if (method != nullptr) {\n@@ -4006,1 +4006,1 @@\n-          if (method != NULL) {\n+          if (method != nullptr) {\n@@ -4014,1 +4014,1 @@\n-    return NULL;  \/\/ This whole branch bore nothing\n+    return nullptr;  \/\/ This whole branch bore nothing\n@@ -4059,1 +4059,1 @@\n-        if (new_method != NULL) {\n+        if (new_method != nullptr) {\n@@ -4263,1 +4263,1 @@\n-      if (ik != NULL) {\n+      if (ik != nullptr) {\n@@ -4276,1 +4276,1 @@\n-    } while (ik != NULL);\n+    } while (ik != nullptr);\n@@ -4346,1 +4346,1 @@\n-  \/\/ NULL out in scratch class to not delete twice.  The class to be redefined\n+  \/\/ null out in scratch class to not delete twice.  The class to be redefined\n@@ -4348,1 +4348,1 @@\n-  scratch_class->set_cached_class_file(NULL);\n+  scratch_class->set_cached_class_file(nullptr);\n@@ -4370,1 +4370,1 @@\n-    scratch_class->source_debug_extension() == NULL ? 0 :\n+    scratch_class->source_debug_extension() == nullptr ? 0 :\n@@ -4414,1 +4414,1 @@\n-  if (the_class->oop_map_cache() != NULL) {\n+  if (the_class->oop_map_cache() != nullptr) {\n@@ -4501,2 +4501,2 @@\n-    if (ik->constants() != NULL &&\n-        ik->constants()->cache() != NULL &&\n+    if (ik->constants() != nullptr &&\n+        ik->constants()->cache() != nullptr &&\n@@ -4598,1 +4598,1 @@\n-  if (_the_class != NULL) {\n+  if (_the_class != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":77,"deletions":77,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,1 +543,1 @@\n-    return cache == NULL ? 0 : cache->length;\n+    return cache == nullptr ? 0 : cache->length;\n@@ -546,1 +546,1 @@\n-    return cache == NULL ? NULL : cache->data;\n+    return cache == nullptr ? nullptr : cache->data;\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  assert(((JvmtiEnvBase *)env)->tag_map() == NULL, \"tag map already exists for environment\");\n+  assert(((JvmtiEnvBase *)env)->tag_map() == nullptr, \"tag map already exists for environment\");\n@@ -96,1 +96,1 @@\n-  ((JvmtiEnvBase *)_env)->set_tag_map(NULL);\n+  ((JvmtiEnvBase *)_env)->set_tag_map(nullptr);\n@@ -100,1 +100,1 @@\n-  _hashmap = NULL;\n+  _hashmap = nullptr;\n@@ -115,1 +115,1 @@\n-  if (tag_map == NULL) {\n+  if (tag_map == nullptr) {\n@@ -118,1 +118,1 @@\n-    if (tag_map == NULL) {\n+    if (tag_map == nullptr) {\n@@ -146,1 +146,1 @@\n-      objects != NULL &&\n+      objects != nullptr &&\n@@ -159,1 +159,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -161,1 +161,1 @@\n-    if (tag_map != NULL) {\n+    if (tag_map != nullptr) {\n@@ -343,1 +343,1 @@\n-  check_hashmap(NULL);  \/* don't collect dead objects *\/\n+  check_hashmap(nullptr);  \/* don't collect dead objects *\/\n@@ -378,1 +378,1 @@\n-  check_hashmap(NULL); \/* don't collect dead objects *\/\n+  check_hashmap(nullptr); \/* don't collect dead objects *\/\n@@ -538,1 +538,1 @@\n-  if (_field_map != NULL) {\n+  if (_field_map != nullptr) {\n@@ -566,1 +566,1 @@\n-  if (_class_list == NULL) {\n+  if (_class_list == nullptr) {\n@@ -584,2 +584,2 @@\n-  if (cached_map != NULL) {\n-    assert(cached_map->field_map() != NULL, \"missing field list\");\n+  if (cached_map != nullptr) {\n+    assert(cached_map->field_map() != nullptr, \"missing field list\");\n@@ -599,1 +599,1 @@\n-  if (_class_list != NULL) {\n+  if (_class_list != nullptr) {\n@@ -603,2 +603,2 @@\n-      assert(cached_map != NULL, \"should not be NULL\");\n-      ik->set_jvmti_cached_class_field_map(NULL);\n+      assert(cached_map != nullptr, \"should not be null\");\n+      ik->set_jvmti_cached_class_field_map(nullptr);\n@@ -608,1 +608,1 @@\n-    _class_list = NULL;\n+    _class_list = nullptr;\n@@ -614,1 +614,1 @@\n-  return (_class_list == NULL) ? 0 : _class_list->length();\n+  return (_class_list == nullptr) ? 0 : _class_list->length();\n@@ -641,1 +641,1 @@\n-  if (klass_filter != NULL) {\n+  if (klass_filter != nullptr) {\n@@ -682,1 +682,1 @@\n-  if (s_value == NULL) {\n+  if (s_value == nullptr) {\n@@ -945,1 +945,1 @@\n-  if (klass() != NULL && !o->is_a(klass())) {\n+  if (klass() != nullptr && !o->is_a(klass())) {\n@@ -950,1 +950,1 @@\n-  if (o != NULL && o->klass()->java_mirror() == NULL) {\n+  if (o != nullptr && o->klass()->java_mirror() == nullptr) {\n@@ -1036,1 +1036,1 @@\n-  if (obj != NULL &&   obj->klass()->java_mirror() == NULL) {\n+  if (obj != nullptr &&   obj->klass()->java_mirror() == nullptr) {\n@@ -1055,1 +1055,1 @@\n-  if (callbacks()->heap_iteration_callback != NULL) {\n+  if (callbacks()->heap_iteration_callback != nullptr) {\n@@ -1066,1 +1066,1 @@\n-  if (callbacks()->primitive_field_callback != NULL && obj->is_instance()) {\n+  if (callbacks()->primitive_field_callback != nullptr && obj->is_instance()) {\n@@ -1085,1 +1085,1 @@\n-      callbacks()->string_primitive_value_callback != NULL &&\n+      callbacks()->string_primitive_value_callback != nullptr &&\n@@ -1097,1 +1097,1 @@\n-      callbacks()->array_primitive_value_callback != NULL &&\n+      callbacks()->array_primitive_value_callback != nullptr &&\n@@ -1169,1 +1169,1 @@\n-      objects = NULL;\n+      objects = nullptr;\n@@ -1172,1 +1172,1 @@\n-                           ((objects != NULL) ? \" and posting\" : \"\"));\n+                           ((objects != nullptr) ? \" and posting\" : \"\"));\n@@ -1185,1 +1185,1 @@\n-  if (objects != NULL && objects->length() > 0) {\n+  if (objects != nullptr && objects->length() > 0) {\n@@ -1223,1 +1223,1 @@\n-    remove_dead_entries(NULL);\n+    remove_dead_entries(nullptr);\n@@ -1269,1 +1269,1 @@\n-        if (o == NULL) {\n+        if (o == nullptr) {\n@@ -1274,1 +1274,1 @@\n-        assert(o != NULL && Universe::heap()->is_in(o), \"sanity check\");\n+        assert(o != nullptr && Universe::heap()->is_in(o), \"sanity check\");\n@@ -1290,1 +1290,1 @@\n-    \/\/ if object_result_ptr is not NULL then allocate the result and copy\n+    \/\/ if object_result_ptr is not null then allocate the result and copy\n@@ -1292,1 +1292,1 @@\n-    if (object_result_ptr != NULL) {\n+    if (object_result_ptr != nullptr) {\n@@ -1302,1 +1302,1 @@\n-    \/\/ if tag_result_ptr is not NULL then allocate the result and copy\n+    \/\/ if tag_result_ptr is not null then allocate the result and copy\n@@ -1304,1 +1304,1 @@\n-    if (tag_result_ptr != NULL) {\n+    if (tag_result_ptr != nullptr) {\n@@ -1307,1 +1307,1 @@\n-        if (object_result_ptr != NULL) {\n+        if (object_result_ptr != nullptr) {\n@@ -1387,1 +1387,1 @@\n-    _last_referrer(NULL),\n+    _last_referrer(nullptr),\n@@ -1590,1 +1590,1 @@\n-  if (cb == NULL) {\n+  if (cb == nullptr) {\n@@ -1602,1 +1602,1 @@\n-      basic_context()->object_ref_callback() != NULL) {\n+      basic_context()->object_ref_callback() != nullptr) {\n@@ -1617,1 +1617,1 @@\n-  if (cb == NULL) {\n+  if (cb == nullptr) {\n@@ -1633,1 +1633,1 @@\n-      basic_context()->object_ref_callback() != NULL) {\n+      basic_context()->object_ref_callback() != nullptr) {\n@@ -1690,1 +1690,1 @@\n-  if (cb == NULL) {\n+  if (cb == nullptr) {\n@@ -1714,1 +1714,1 @@\n-                    NULL, \/\/ referrer info\n+                    nullptr, \/\/ referrer info\n@@ -1719,1 +1719,1 @@\n-                    NULL, \/\/ referrer_tag_p\n+                    nullptr, \/\/ referrer_tag_p\n@@ -1744,1 +1744,1 @@\n-  if (cb == NULL) {\n+  if (cb == nullptr) {\n@@ -1782,1 +1782,1 @@\n-                  NULL, \/\/ referrer_tag is 0 for root\n+                  nullptr, \/\/ referrer_tag is 0 for root\n@@ -1796,1 +1796,1 @@\n-\/\/ only for ref_kinds defined by the JVM TI spec. Otherwise, NULL is passed.\n+\/\/ only for ref_kinds defined by the JVM TI spec. Otherwise, null is passed.\n@@ -1817,1 +1817,1 @@\n-  if (cb == NULL) {\n+  if (cb == nullptr) {\n@@ -1844,1 +1844,1 @@\n-                  (REF_INFO_MASK & (1 << ref_kind)) ? &reference_info : NULL,\n+                  (REF_INFO_MASK & (1 << ref_kind)) ? &reference_info : nullptr,\n@@ -1883,1 +1883,1 @@\n-  assert(context->array_primitive_value_callback() != NULL, \"no callback\");\n+  assert(context->array_primitive_value_callback() != nullptr, \"no callback\");\n@@ -1912,1 +1912,1 @@\n-  assert(context->string_primitive_value_callback() != NULL, \"no callback\");\n+  assert(context->string_primitive_value_callback() != nullptr, \"no callback\");\n@@ -1947,1 +1947,1 @@\n-  assert(context->primitive_field_callback() != NULL, \"no callback\");\n+  assert(context->primitive_field_callback() != nullptr, \"no callback\");\n@@ -2174,1 +2174,1 @@\n-    if (o == NULL) {\n+    if (o == nullptr) {\n@@ -2218,1 +2218,1 @@\n-    if (o == NULL) {\n+    if (o == nullptr) {\n@@ -2324,1 +2324,1 @@\n-  _following_object_refs = (callbacks.object_ref_callback() != NULL);\n+  _following_object_refs = (callbacks.object_ref_callback() != nullptr);\n@@ -2343,3 +2343,3 @@\n-  _reporting_primitive_fields = (callbacks.primitive_field_callback() != NULL);;\n-  _reporting_primitive_array_values = (callbacks.array_primitive_value_callback() != NULL);;\n-  _reporting_string_values = (callbacks.string_primitive_value_callback() != NULL);;\n+  _reporting_primitive_fields = (callbacks.primitive_field_callback() != nullptr);;\n+  _reporting_primitive_array_values = (callbacks.array_primitive_value_callback() != nullptr);;\n+  _reporting_string_values = (callbacks.string_primitive_value_callback() != nullptr);;\n@@ -2353,1 +2353,1 @@\n-    assert(_visit_stack != NULL, \"checking\");\n+    assert(_visit_stack != nullptr, \"checking\");\n@@ -2355,1 +2355,1 @@\n-    _visit_stack = NULL;\n+    _visit_stack = nullptr;\n@@ -2374,1 +2374,1 @@\n-    if (elem == NULL) {\n+    if (elem == nullptr) {\n@@ -2439,1 +2439,1 @@\n-    if (java_super != NULL && java_super != vmClasses::Object_klass()) {\n+    if (java_super != nullptr && java_super != vmClasses::Object_klass()) {\n@@ -2448,1 +2448,1 @@\n-    if (cl != NULL) {\n+    if (cl != nullptr) {\n@@ -2456,1 +2456,1 @@\n-    if (pd != NULL) {\n+    if (pd != nullptr) {\n@@ -2464,1 +2464,1 @@\n-    if (signers != NULL) {\n+    if (signers != nullptr) {\n@@ -2480,1 +2480,1 @@\n-            if (entry == NULL) {\n+            if (entry == nullptr) {\n@@ -2491,1 +2491,1 @@\n-            if (klass == NULL) {\n+            if (klass == nullptr) {\n@@ -2509,1 +2509,1 @@\n-      if (interf == NULL) {\n+      if (interf == nullptr) {\n@@ -2526,1 +2526,1 @@\n-        if (fld_o != NULL) {\n+        if (fld_o != nullptr) {\n@@ -2569,1 +2569,1 @@\n-      if (fld_o != NULL) {\n+      if (fld_o != nullptr) {\n@@ -2646,1 +2646,1 @@\n-  assert(threadObj != NULL, \"sanity check\");\n+  assert(threadObj != nullptr, \"sanity check\");\n@@ -2671,1 +2671,1 @@\n-    frame* last_entry_frame = NULL;\n+    frame* last_entry_frame = nullptr;\n@@ -2673,1 +2673,1 @@\n-    while (vf != NULL) {\n+    while (vf != nullptr) {\n@@ -2688,1 +2688,1 @@\n-              if (o == NULL) {\n+              if (o == nullptr) {\n@@ -2704,1 +2704,1 @@\n-              if (o == NULL) {\n+              if (o == nullptr) {\n@@ -2717,1 +2717,1 @@\n-          if (jvf->cb() != NULL && jvf->cb()->is_nmethod()) {\n+          if (jvf->cb() != nullptr && jvf->cb()->is_nmethod()) {\n@@ -2727,1 +2727,1 @@\n-            if (last_entry_frame != NULL) {\n+            if (last_entry_frame != nullptr) {\n@@ -2734,1 +2734,1 @@\n-        last_entry_frame = NULL;\n+        last_entry_frame = nullptr;\n@@ -2740,1 +2740,1 @@\n-        assert(fr != NULL, \"sanity check\");\n+        assert(fr != nullptr, \"sanity check\");\n@@ -2751,1 +2751,1 @@\n-    blk->set_context(thread_tag, tid, 0, (jmethodID)NULL);\n+    blk->set_context(thread_tag, tid, 0, (jmethodID)nullptr);\n@@ -2765,1 +2765,1 @@\n-    if (threadObj != NULL && !thread->is_exiting() && !thread->is_hidden_from_external_view()) {\n+    if (threadObj != nullptr && !thread->is_exiting() && !thread->is_hidden_from_external_view()) {\n@@ -2881,1 +2881,1 @@\n-    BasicHeapWalkContext context(NULL, NULL, object_ref_callback);\n+    BasicHeapWalkContext context(nullptr, nullptr, object_ref_callback);\n@@ -2928,1 +2928,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2930,1 +2930,1 @@\n-    if (tag_map != NULL) {\n+    if (tag_map != nullptr) {\n@@ -2950,1 +2950,1 @@\n-    for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2952,1 +2952,1 @@\n-      if (tag_map != NULL) {\n+      if (tag_map != nullptr) {\n@@ -2972,1 +2972,1 @@\n-  for (JvmtiEnv* env = it.first(); env != NULL; env = it.next(env)) {\n+  for (JvmtiEnv* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -2974,1 +2974,1 @@\n-    if (tag_map != NULL) {\n+    if (tag_map != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":91,"deletions":91,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -140,2 +140,2 @@\n-      if (entry.object_no_keepalive() == NULL) {\n-        if (_objects != NULL) {\n+      if (entry.object_no_keepalive() == nullptr) {\n+        if (_objects != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    assert(entry._obj != NULL, \"must lookup obj to hash\");\n+    assert(entry._obj != nullptr, \"must lookup obj to hash\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-JvmtiThreadState *JvmtiThreadState::_head = NULL;\n+JvmtiThreadState *JvmtiThreadState::_head = nullptr;\n@@ -60,1 +60,1 @@\n-  _thread_saved         = NULL;\n+  _thread_saved         = nullptr;\n@@ -67,1 +67,1 @@\n-  _class_being_redefined = NULL;\n+  _class_being_redefined = nullptr;\n@@ -69,7 +69,7 @@\n-  _classes_being_redefined = NULL;\n-  _head_env_thread_state = NULL;\n-  _dynamic_code_event_collector = NULL;\n-  _vm_object_alloc_event_collector = NULL;\n-  _sampled_object_alloc_event_collector = NULL;\n-  _the_class_for_redefinition_verification = NULL;\n-  _scratch_class_for_redefinition_verification = NULL;\n+  _classes_being_redefined = nullptr;\n+  _head_env_thread_state = nullptr;\n+  _dynamic_code_event_collector = nullptr;\n+  _vm_object_alloc_event_collector = nullptr;\n+  _sampled_object_alloc_event_collector = nullptr;\n+  _the_class_for_redefinition_verification = nullptr;\n+  _scratch_class_for_redefinition_verification = nullptr;\n@@ -84,1 +84,1 @@\n-  _earlyret_oop = NULL;\n+  _earlyret_oop = nullptr;\n@@ -86,1 +86,1 @@\n-  _jvmti_event_queue = NULL;\n+  _jvmti_event_queue = nullptr;\n@@ -95,1 +95,1 @@\n-    for (JvmtiEnvBase* env = it.first(); env != NULL; env = it.next(env)) {\n+    for (JvmtiEnvBase* env = it.first(); env != nullptr; env = it.next(env)) {\n@@ -108,1 +108,1 @@\n-    _prev = NULL;\n+    _prev = nullptr;\n@@ -110,1 +110,1 @@\n-    if (_head != NULL) {\n+    if (_head != nullptr) {\n@@ -116,1 +116,1 @@\n-  if (thread_oop != NULL) {\n+  if (thread_oop != nullptr) {\n@@ -121,2 +121,2 @@\n-  if (thread != NULL) {\n-    if (thread_oop == NULL || thread->jvmti_vthread() == NULL || thread->jvmti_vthread() == thread_oop) {\n+  if (thread != nullptr) {\n+    if (thread_oop == nullptr || thread->jvmti_vthread() == nullptr || thread->jvmti_vthread() == thread_oop) {\n@@ -135,1 +135,1 @@\n-  if (_classes_being_redefined != NULL) {\n+  if (_classes_being_redefined != nullptr) {\n@@ -140,1 +140,1 @@\n-  get_thread()->set_jvmti_thread_state(NULL);\n+  get_thread()->set_jvmti_thread_state(nullptr);\n@@ -146,1 +146,1 @@\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ) {\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ) {\n@@ -160,1 +160,1 @@\n-    if (_prev == NULL) {\n+    if (_prev == nullptr) {\n@@ -167,1 +167,1 @@\n-    if (_next != NULL) {\n+    if (_next != nullptr) {\n@@ -170,2 +170,2 @@\n-    _next = NULL;\n-    _prev = NULL;\n+    _next = nullptr;\n+    _prev = nullptr;\n@@ -173,2 +173,2 @@\n-  if (get_thread_oop() != NULL) {\n-    java_lang_Thread::set_jvmti_thread_state(get_thread_oop(), NULL);\n+  if (get_thread_oop() != nullptr) {\n+    java_lang_Thread::set_jvmti_thread_state(get_thread_oop(), nullptr);\n@@ -188,1 +188,1 @@\n-  for (JvmtiThreadState *state = _head; state != NULL; state = state->next()) {\n+  for (JvmtiThreadState *state = _head; state != nullptr; state = state->next()) {\n@@ -192,1 +192,1 @@\n-    JvmtiEnvThreadState* previous_ets = NULL;\n+    JvmtiEnvThreadState* previous_ets = nullptr;\n@@ -194,1 +194,1 @@\n-    while (ets != NULL) {\n+    while (ets != nullptr) {\n@@ -202,1 +202,1 @@\n-        if (previous_ets == NULL) {\n+        if (previous_ets == nullptr) {\n@@ -247,1 +247,1 @@\n-  if (Thread::current_or_null() == NULL) {\n+  if (Thread::current_or_null() == nullptr) {\n@@ -258,1 +258,1 @@\n-  if (Thread::current_or_null() == NULL) {\n+  if (Thread::current_or_null() == nullptr) {\n@@ -383,1 +383,1 @@\n-  if (vstate != NULL) {\n+  if (vstate != nullptr) {\n@@ -397,1 +397,1 @@\n-  if (vstate != NULL) {\n+  if (vstate != nullptr) {\n@@ -533,2 +533,2 @@\n-    JvmtiEnvThreadState* previous_ets = NULL;\n-    for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+    JvmtiEnvThreadState* previous_ets = nullptr;\n+    for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -537,1 +537,1 @@\n-    if (previous_ets == NULL) {\n+    if (previous_ets == nullptr) {\n@@ -546,1 +546,1 @@\n-  assert(_thread != NULL, \"sanity check\");\n+  assert(_thread != nullptr, \"sanity check\");\n@@ -553,1 +553,1 @@\n-  if (_thread == NULL) {\n+  if (_thread == nullptr) {\n@@ -567,1 +567,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -673,1 +673,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -695,1 +695,1 @@\n-      for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+      for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -726,1 +726,1 @@\n-    set_earlyret_oop(NULL);\n+    set_earlyret_oop(nullptr);\n@@ -748,1 +748,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -757,1 +757,1 @@\n-  if (_jvmti_event_queue != NULL) {\n+  if (_jvmti_event_queue != nullptr) {\n@@ -764,1 +764,1 @@\n-  if (_jvmti_event_queue != NULL) {\n+  if (_jvmti_event_queue != nullptr) {\n@@ -771,1 +771,1 @@\n-  if (_jvmti_event_queue == NULL) {\n+  if (_jvmti_event_queue == nullptr) {\n@@ -779,1 +779,1 @@\n-  if (_jvmti_event_queue != NULL) {\n+  if (_jvmti_event_queue != nullptr) {\n@@ -782,1 +782,1 @@\n-    _jvmti_event_queue = NULL;\n+    _jvmti_event_queue = nullptr;\n@@ -787,1 +787,1 @@\n-  if (_jvmti_event_queue != NULL) {\n+  if (_jvmti_event_queue != nullptr) {\n@@ -797,2 +797,2 @@\n-  _thread_saved = NULL;  \/\/ Common case.\n-  if (!_is_virtual && thread == NULL) {\n+  _thread_saved = nullptr;  \/\/ Common case.\n+  if (!_is_virtual && thread == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":54,"deletions":54,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-  \/\/ holds the current dynamic code event collector, NULL if no event collector in use\n+  \/\/ holds the current dynamic code event collector, null if no event collector in use\n@@ -197,1 +197,1 @@\n-  \/\/ holds the current vm object alloc event collector, NULL if no event collector in use\n+  \/\/ holds the current vm object alloc event collector, null if no event collector in use\n@@ -199,1 +199,1 @@\n-  \/\/ holds the current sampled object alloc event collector, NULL if no event collector in use\n+  \/\/ holds the current sampled object alloc event collector, null if no event collector in use\n@@ -237,1 +237,1 @@\n-    return _thread == NULL ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();\n+    return _thread == nullptr ?  _saved_interp_only_mode != 0 : _thread->is_interp_only_mode();\n@@ -266,1 +266,1 @@\n-  inline JavaThread *get_thread_or_saved(); \/\/ return _thread_saved if _thread is NULL\n+  inline JavaThread *get_thread_or_saved(); \/\/ return _thread_saved if _thread is null\n@@ -334,1 +334,1 @@\n-    _class_being_redefined = NULL;\n+    _class_being_redefined = nullptr;\n@@ -387,1 +387,1 @@\n-  inline void clear_class_versions_map() { set_class_versions_map(NULL, NULL); }\n+  inline void clear_class_versions_map() { set_class_versions_map(nullptr, nullptr); }\n@@ -393,1 +393,1 @@\n-    if (state != NULL && state->_the_class_for_redefinition_verification != NULL) {\n+    if (state != nullptr && state->_the_class_for_redefinition_verification != nullptr) {\n@@ -445,2 +445,2 @@\n-  \/\/ Can return NULL if JavaThread is exiting.\n-  static JvmtiThreadState *state_for_while_locked(JavaThread *thread, oop thread_oop = NULL);\n+  \/\/ Can return null if JavaThread is exiting.\n+  static JvmtiThreadState *state_for_while_locked(JavaThread *thread, oop thread_oop = nullptr);\n@@ -448,1 +448,1 @@\n-  \/\/ Can return NULL if JavaThread is exiting.\n+  \/\/ Can return null if JavaThread is exiting.\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-  for (JvmtiEnvThreadState* ets = it.first(); ets != NULL; ets = it.next(ets)) {\n+  for (JvmtiEnvThreadState* ets = it.first(); ets != nullptr; ets = it.next(ets)) {\n@@ -64,1 +64,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -77,1 +77,1 @@\n-  assert(thread != NULL || thread_oop != NULL, \"sanity check\");\n+  assert(thread != nullptr || thread_oop != nullptr, \"sanity check\");\n@@ -81,2 +81,2 @@\n-  if (thread_oop == NULL) {  \/\/ Then thread should not be NULL (see assert above).\n-    thread_oop = thread->jvmti_vthread() != NULL ? thread->jvmti_vthread() : thread->threadObj();\n+  if (thread_oop == nullptr) {  \/\/ Then thread should not be null (see assert above).\n+    thread_oop = thread->jvmti_vthread() != nullptr ? thread->jvmti_vthread() : thread->threadObj();\n@@ -85,2 +85,2 @@\n-  \/\/ In a case of unmounted virtual thread the thread can be NULL.\n-  JvmtiThreadState *state = thread == NULL ? NULL : thread->jvmti_thread_state();\n+  \/\/ In a case of unmounted virtual thread the thread can be null.\n+  JvmtiThreadState *state = thread == nullptr ? nullptr : thread->jvmti_thread_state();\n@@ -88,1 +88,1 @@\n-  if (state == NULL && thread != NULL && thread->is_exiting()) {\n+  if (state == nullptr && thread != nullptr && thread->is_exiting()) {\n@@ -90,1 +90,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -92,1 +92,1 @@\n-  if (state == NULL || state->get_thread_oop() != thread_oop) {\n+  if (state == nullptr || state->get_thread_oop() != thread_oop) {\n@@ -94,1 +94,1 @@\n-    if (thread_oop != NULL) {  \/\/ thread_oop can be NULL during early VMStart.\n+    if (thread_oop != nullptr) {  \/\/ thread_oop can be null during early VMStart.\n@@ -97,1 +97,1 @@\n-    if (state == NULL) {  \/\/ Need to create state.\n+    if (state == nullptr) {  \/\/ Need to create state.\n@@ -105,2 +105,2 @@\n-  \/\/ In a case of unmounted virtual thread the thread can be NULL.\n-  JvmtiThreadState* state = thread_handle == NULL ? thread->jvmti_thread_state() :\n+  \/\/ In a case of unmounted virtual thread the thread can be null.\n+  JvmtiThreadState* state = thread_handle == nullptr ? thread->jvmti_thread_state() :\n@@ -108,1 +108,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -121,2 +121,2 @@\n-  \/\/ Use _thread_saved if cthread is detached from JavaThread (_thread == NULL).\n-  return (_thread == NULL && !is_virtual()) ? _thread_saved : _thread;\n+  \/\/ Use _thread_saved if cthread is detached from JavaThread (_thread == null).\n+  return (_thread == nullptr && !is_virtual()) ? _thread_saved : _thread;\n@@ -130,1 +130,1 @@\n-  if (state == NULL) {\n+  if (state == nullptr) {\n@@ -135,1 +135,1 @@\n-  state->set_thread(NULL);  \/\/ Make sure stale _thread value is never used.\n+  state->set_thread(nullptr);  \/\/ Make sure stale _thread value is never used.\n@@ -140,1 +140,1 @@\n-  thread->set_interp_only_mode(state == NULL ? 0 : state->_saved_interp_only_mode);\n+  thread->set_interp_only_mode(state == nullptr ? 0 : state->_saved_interp_only_mode);\n@@ -148,1 +148,1 @@\n-  if (state != NULL) {\n+  if (state != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.inline.hpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  if (TraceJVMTI != NULL) {\n+  if (TraceJVMTI != nullptr) {\n@@ -101,1 +101,1 @@\n-    if (curr_end == NULL) {\n+    if (curr_end == nullptr) {\n@@ -106,1 +106,1 @@\n-    if (minus_pos != NULL && (minus_pos < op_pos || op_pos == NULL)) {\n+    if (minus_pos != nullptr && (minus_pos < op_pos || op_pos == nullptr)) {\n@@ -112,1 +112,1 @@\n-    if (op_pos == NULL || op_pos > curr_end) {\n+    if (op_pos == nullptr || op_pos > curr_end) {\n@@ -193,1 +193,1 @@\n-            if (fname != NULL) {\n+            if (fname != nullptr) {\n@@ -222,1 +222,1 @@\n-          if (ename != NULL) {\n+          if (ename != nullptr) {\n@@ -274,2 +274,2 @@\n-  if (thread == NULL) {\n-    return \"NULL\";\n+  if (thread == nullptr) {\n+    return \"null\";\n@@ -282,1 +282,1 @@\n-  if (threadObj == NULL) {\n+  if (threadObj == nullptr) {\n@@ -285,2 +285,2 @@\n-  if (threadObj == NULL) {\n-    return \"NULL\";\n+  if (threadObj == nullptr) {\n+    return \"null\";\n@@ -289,1 +289,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -311,1 +311,1 @@\n-  if (k_oop == NULL) {\n+  if (k_oop == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-ResourceArea* JvmtiUtil::_single_threaded_resource_area = NULL;\n+ResourceArea* JvmtiUtil::_single_threaded_resource_area = nullptr;\n@@ -40,1 +40,1 @@\n-  if (_single_threaded_resource_area == NULL) {\n+  if (_single_threaded_resource_area == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiUtil.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-    if (thread == NULL) {\n+    if (thread == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiUtil.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-MethodHandlesAdapterBlob* MethodHandles::_adapter_code = NULL;\n+MethodHandlesAdapterBlob* MethodHandles::_adapter_code = nullptr;\n@@ -87,2 +87,2 @@\n-  assert(vmClasses::MethodHandle_klass() != NULL, \"should be present\");\n-  assert(_adapter_code == NULL, \"generate only once\");\n+  assert(vmClasses::MethodHandle_klass() != nullptr, \"should be present\");\n+  assert(_adapter_code == nullptr, \"generate only once\");\n@@ -115,1 +115,1 @@\n-    if (entry != NULL) {\n+    if (entry != nullptr) {\n@@ -167,1 +167,1 @@\n-  if (signature == NULL) {\n+  if (signature == nullptr) {\n@@ -198,1 +198,1 @@\n-    if (k != NULL && k->is_instance_klass()) {\n+    if (k != nullptr && k->is_instance_klass()) {\n@@ -201,1 +201,1 @@\n-      if (mname2 != NULL) {\n+      if (mname2 != nullptr) {\n@@ -203,1 +203,1 @@\n-        if (java_lang_invoke_MemberName::name(mname2) == NULL)\n+        if (java_lang_invoke_MemberName::name(mname2) == nullptr)\n@@ -205,1 +205,1 @@\n-        if (java_lang_invoke_MemberName::type(mname2) == NULL)\n+        if (java_lang_invoke_MemberName::type(mname2) == nullptr)\n@@ -214,1 +214,1 @@\n-    if (k != NULL && k->is_instance_klass()) {\n+    if (k != nullptr && k->is_instance_klass()) {\n@@ -216,2 +216,2 @@\n-      if (m == NULL || is_signature_polymorphic(m->intrinsic_id()))\n-        return NULL;            \/\/ do not resolve unless there is a concrete signature\n+      if (m == nullptr || is_signature_polymorphic(m->intrinsic_id()))\n+        return nullptr;            \/\/ do not resolve unless there is a concrete signature\n@@ -225,1 +225,1 @@\n-    if (k != NULL && k->is_instance_klass()) {\n+    if (k != nullptr && k->is_instance_klass()) {\n@@ -227,1 +227,1 @@\n-      if (m == NULL)  return NULL;\n+      if (m == nullptr)  return nullptr;\n@@ -232,1 +232,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -240,1 +240,1 @@\n-  assert(m_klass != NULL, \"null holder for method handle\");\n+  assert(m_klass != nullptr, \"null holder for method handle\");\n@@ -293,1 +293,1 @@\n-        return NULL;  \/\/ elicit an error later in product build\n+        return nullptr;  \/\/ elicit an error later in product build\n@@ -326,1 +326,1 @@\n-  default:  assert(false, \"bad CallInfo\");  return NULL;\n+  default:  assert(false, \"bad CallInfo\");  return nullptr;\n@@ -361,1 +361,1 @@\n-  java_lang_invoke_MemberName::set_method (mname_oop, NULL);\n+  java_lang_invoke_MemberName::set_method (mname_oop, nullptr);\n@@ -367,1 +367,1 @@\n-  if (name != NULL)\n+  if (name != nullptr)\n@@ -369,1 +369,1 @@\n-  if (type != NULL)\n+  if (type != nullptr)\n@@ -389,1 +389,1 @@\n-  if (klass == NULL)\n+  if (klass == nullptr)\n@@ -403,1 +403,1 @@\n-  if (m != NULL) {\n+  if (m != nullptr) {\n@@ -488,1 +488,1 @@\n-  if (mh_klass != NULL && is_method_handle_invoke_name(mh_klass, name)) {\n+  if (mh_klass != nullptr && is_method_handle_invoke_name(mh_klass, name)) {\n@@ -494,1 +494,1 @@\n-  if (vh_klass != NULL && is_method_handle_invoke_name(vh_klass, name)) {\n+  if (vh_klass != nullptr && is_method_handle_invoke_name(vh_klass, name)) {\n@@ -504,1 +504,1 @@\n-  if (klass != NULL &&\n+  if (klass != nullptr &&\n@@ -548,1 +548,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"unrecognized type\", NULL);\n+    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"unrecognized type\", nullptr);\n@@ -580,2 +580,2 @@\n-  Symbol* bsig = NULL;\n-  if (sig == NULL) {\n+  Symbol* bsig = nullptr;\n+  if (sig == nullptr) {\n@@ -660,1 +660,1 @@\n-  if (s == NULL)  return NULL;\n+  if (s == nullptr)  return nullptr;\n@@ -665,1 +665,1 @@\n-  if (s == NULL)  return NULL;\n+  if (s == nullptr)  return nullptr;\n@@ -682,1 +682,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -693,1 +693,1 @@\n-  if (java_lang_invoke_MemberName::vmtarget(mname()) != NULL) {\n+  if (java_lang_invoke_MemberName::vmtarget(mname()) != nullptr) {\n@@ -716,1 +716,1 @@\n-  InstanceKlass* defc = NULL;\n+  InstanceKlass* defc = nullptr;\n@@ -719,1 +719,1 @@\n-    if (defc_klass == NULL)  return empty;  \/\/ a primitive; no resolution possible\n+    if (defc_klass == nullptr)  return empty;  \/\/ a primitive; no resolution possible\n@@ -726,1 +726,1 @@\n-  if (defc == NULL) {\n+  if (defc == nullptr) {\n@@ -733,1 +733,1 @@\n-  if (name == NULL)  return empty;  \/\/ no such name\n+  if (name == nullptr)  return empty;  \/\/ no such name\n@@ -755,1 +755,1 @@\n-  if (type == NULL)  return empty;  \/\/ no such signature exists in the VM\n+  if (type == nullptr)  return empty;  \/\/ no such signature exists in the VM\n@@ -758,1 +758,1 @@\n-  LinkInfo::AccessCheck access_check = caller != NULL ?\n+  LinkInfo::AccessCheck access_check = caller != nullptr ?\n@@ -762,1 +762,1 @@\n-  LinkInfo::LoaderConstraintCheck loader_constraint_check = (caller != NULL && (lookup_mode & LM_UNCONDITIONAL) == 0) ?\n+  LinkInfo::LoaderConstraintCheck loader_constraint_check = (caller != nullptr && (lookup_mode & LM_UNCONDITIONAL) == 0) ?\n@@ -863,3 +863,3 @@\n-  bool have_defc = (java_lang_invoke_MemberName::clazz(mname()) != NULL);\n-  bool have_name = (java_lang_invoke_MemberName::name(mname()) != NULL);\n-  bool have_type = (java_lang_invoke_MemberName::type(mname()) != NULL);\n+  bool have_defc = (java_lang_invoke_MemberName::clazz(mname()) != nullptr);\n+  bool have_name = (java_lang_invoke_MemberName::name(mname()) != nullptr);\n+  bool have_type = (java_lang_invoke_MemberName::type(mname()) != nullptr);\n@@ -881,1 +881,1 @@\n-      if (vmtarget == NULL) {\n+      if (vmtarget == nullptr) {\n@@ -885,1 +885,1 @@\n-      DEBUG_ONLY(vmtarget = NULL);  \/\/ safety\n+      DEBUG_ONLY(vmtarget = nullptr);  \/\/ safety\n@@ -904,1 +904,1 @@\n-      if (clazz == NULL) {\n+      if (clazz == nullptr) {\n@@ -908,1 +908,1 @@\n-      DEBUG_ONLY(clazz = NULL);  \/\/ safety\n+      DEBUG_ONLY(clazz = nullptr);  \/\/ safety\n@@ -1024,2 +1024,2 @@\n-#define STRING_NULL(scope,value) #value \"\\0\"\n-static const char con_names[] = { EACH_NAMED_CON(STRING_NULL, IGNORE_REQ) };\n+#define STRING_nullptr(scope,value) #value \"\\0\"\n+static const char con_names[] = { EACH_NAMED_CON(STRING_nullptr, IGNORE_REQ) };\n@@ -1046,1 +1046,1 @@\n-#undef STRING_NULL\n+#undef STRING_nullptr\n@@ -1072,2 +1072,2 @@\n-  if (mname_jh == NULL) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n-  if (target_jh == NULL) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"target is null\"); }\n+  if (mname_jh == nullptr) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n+  if (target_jh == nullptr) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"target is null\"); }\n@@ -1082,1 +1082,1 @@\n-  if (mname_jh == NULL) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n+  if (mname_jh == nullptr) { THROW_MSG(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n@@ -1091,1 +1091,1 @@\n-  if (mname_jh == NULL) { THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n+  if (mname_jh == nullptr) { THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"mname is null\"); }\n@@ -1100,2 +1100,2 @@\n-  if (VerifyMethodHandles && (lookup_mode & LM_TRUSTED) == LM_TRUSTED && caller_jh != NULL &&\n-      java_lang_invoke_MemberName::clazz(mname()) != NULL) {\n+  if (VerifyMethodHandles && (lookup_mode & LM_TRUSTED) == LM_TRUSTED && caller_jh != nullptr &&\n+      java_lang_invoke_MemberName::clazz(mname()) != nullptr) {\n@@ -1103,1 +1103,1 @@\n-    if (reference_klass != NULL && reference_klass->is_objArray_klass()) {\n+    if (reference_klass != nullptr && reference_klass->is_objArray_klass()) {\n@@ -1108,1 +1108,1 @@\n-    if (reference_klass != NULL && reference_klass->is_instance_klass()) {\n+    if (reference_klass != nullptr && reference_klass->is_instance_klass()) {\n@@ -1126,1 +1126,1 @@\n-  Klass* caller = caller_jh == NULL ? NULL :\n+  Klass* caller = caller_jh == nullptr ? nullptr :\n@@ -1140,1 +1140,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1157,2 +1157,2 @@\n-  if (mname == NULL ||\n-      java_lang_invoke_MemberName::clazz(mname) == NULL) {\n+  if (mname == nullptr ||\n+      java_lang_invoke_MemberName::clazz(mname) == nullptr) {\n@@ -1194,1 +1194,1 @@\n-  if (mname_jh == NULL)  return NULL;\n+  if (mname_jh == nullptr)  return nullptr;\n@@ -1207,1 +1207,1 @@\n-    assert(vmtarget != NULL && vmtarget->is_method(), \"vmtarget is only method\");\n+    assert(vmtarget != nullptr && vmtarget->is_method(), \"vmtarget is only method\");\n@@ -1245,1 +1245,1 @@\n-  if (caller_k == NULL || !caller_k->is_instance_klass()) {\n+  if (caller_k == nullptr || !caller_k->is_instance_klass()) {\n@@ -1250,1 +1250,1 @@\n-  if (index_info_oop == NULL ||\n+  if (index_info_oop == nullptr ||\n@@ -1269,1 +1269,1 @@\n-        oop pseudo_arg = NULL;\n+        oop pseudo_arg = nullptr;\n@@ -1350,1 +1350,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1361,1 +1361,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1410,1 +1410,1 @@\n-  assert(vmClasses::MethodHandle_klass() != NULL, \"should be present\");\n+  assert(vmClasses::MethodHandle_klass() != nullptr, \"should be present\");\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":71,"deletions":71,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -180,1 +180,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -195,1 +195,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -220,9 +220,9 @@\n-  { CC\"Java_jdk_internal_misc_Unsafe_registerNatives\",             NULL, FN_PTR(JVM_RegisterJDKInternalMiscUnsafeMethods) },\n-  { CC\"Java_java_lang_invoke_MethodHandleNatives_registerNatives\", NULL, FN_PTR(JVM_RegisterMethodHandleMethods) },\n-  { CC\"Java_jdk_internal_foreign_abi_UpcallStubs_registerNatives\",      NULL, FN_PTR(JVM_RegisterUpcallHandlerMethods) },\n-  { CC\"Java_jdk_internal_foreign_abi_UpcallLinker_registerNatives\",      NULL, FN_PTR(JVM_RegisterUpcallLinkerMethods) },\n-  { CC\"Java_jdk_internal_foreign_abi_NativeEntryPoint_registerNatives\",      NULL, FN_PTR(JVM_RegisterNativeEntryPointMethods) },\n-  { CC\"Java_jdk_internal_perf_Perf_registerNatives\",               NULL, FN_PTR(JVM_RegisterPerfMethods)         },\n-  { CC\"Java_sun_hotspot_WhiteBox_registerNatives\",                 NULL, FN_PTR(JVM_RegisterWhiteBoxMethods)     },\n-  { CC\"Java_jdk_test_whitebox_WhiteBox_registerNatives\",           NULL, FN_PTR(JVM_RegisterWhiteBoxMethods)     },\n-  { CC\"Java_jdk_internal_vm_vector_VectorSupport_registerNatives\", NULL, FN_PTR(JVM_RegisterVectorSupportMethods)},\n+  { CC\"Java_jdk_internal_misc_Unsafe_registerNatives\",             nullptr, FN_PTR(JVM_RegisterJDKInternalMiscUnsafeMethods) },\n+  { CC\"Java_java_lang_invoke_MethodHandleNatives_registerNatives\", nullptr, FN_PTR(JVM_RegisterMethodHandleMethods) },\n+  { CC\"Java_jdk_internal_foreign_abi_UpcallStubs_registerNatives\",      nullptr, FN_PTR(JVM_RegisterUpcallHandlerMethods) },\n+  { CC\"Java_jdk_internal_foreign_abi_UpcallLinker_registerNatives\",      nullptr, FN_PTR(JVM_RegisterUpcallLinkerMethods) },\n+  { CC\"Java_jdk_internal_foreign_abi_NativeEntryPoint_registerNatives\",      nullptr, FN_PTR(JVM_RegisterNativeEntryPointMethods) },\n+  { CC\"Java_jdk_internal_perf_Perf_registerNatives\",               nullptr, FN_PTR(JVM_RegisterPerfMethods)         },\n+  { CC\"Java_sun_hotspot_WhiteBox_registerNatives\",                 nullptr, FN_PTR(JVM_RegisterWhiteBoxMethods)     },\n+  { CC\"Java_jdk_test_whitebox_WhiteBox_registerNatives\",           nullptr, FN_PTR(JVM_RegisterWhiteBoxMethods)     },\n+  { CC\"Java_jdk_internal_vm_vector_VectorSupport_registerNatives\", nullptr, FN_PTR(JVM_RegisterVectorSupportMethods)},\n@@ -230,2 +230,2 @@\n-  { CC\"Java_jdk_vm_ci_runtime_JVMCI_initializeRuntime\",            NULL, FN_PTR(JVM_GetJVMCIRuntime)             },\n-  { CC\"Java_jdk_vm_ci_hotspot_CompilerToVM_registerNatives\",       NULL, FN_PTR(JVM_RegisterJVMCINatives)        },\n+  { CC\"Java_jdk_vm_ci_runtime_JVMCI_initializeRuntime\",            nullptr, FN_PTR(JVM_GetJVMCIRuntime)             },\n+  { CC\"Java_jdk_vm_ci_hotspot_CompilerToVM_registerNatives\",       nullptr, FN_PTR(JVM_RegisterJVMCINatives)        },\n@@ -234,1 +234,1 @@\n-  { CC\"Java_jdk_jfr_internal_JVM_registerNatives\",                 NULL, FN_PTR(jfr_register_natives)            },\n+  { CC\"Java_jdk_jfr_internal_JVM_registerNatives\",                 nullptr, FN_PTR(jfr_register_natives)            },\n@@ -236,1 +236,1 @@\n-  { CC\"Java_jdk_internal_misc_ScopedMemoryAccess_registerNatives\", NULL, FN_PTR(JVM_RegisterJDKInternalMiscScopedMemoryAccessMethods) },\n+  { CC\"Java_jdk_internal_misc_ScopedMemoryAccess_registerNatives\", nullptr, FN_PTR(JVM_RegisterJDKInternalMiscScopedMemoryAccessMethods) },\n@@ -243,1 +243,1 @@\n-    if (strstr(jni_name, lookup_special_native_methods[i].name) != NULL) {\n+    if (strstr(jni_name, lookup_special_native_methods[i].name) != nullptr) {\n@@ -247,1 +247,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -263,1 +263,1 @@\n-    if (entry == NULL) {\n+    if (entry == nullptr) {\n@@ -266,1 +266,1 @@\n-    if (entry != NULL) {\n+    if (entry != nullptr) {\n@@ -286,1 +286,1 @@\n-  if (entry == NULL) {\n+  if (entry == nullptr) {\n@@ -289,1 +289,1 @@\n-    for (agent = Arguments::agents(); agent != NULL; agent = agent->next()) {\n+    for (agent = Arguments::agents(); agent != nullptr; agent = agent->next()) {\n@@ -291,1 +291,1 @@\n-      if (entry != NULL) {\n+      if (entry != nullptr) {\n@@ -318,1 +318,1 @@\n-  address entry = NULL;\n+  address entry = nullptr;\n@@ -321,1 +321,1 @@\n-  if (pure_name == NULL) {\n+  if (pure_name == nullptr) {\n@@ -323,2 +323,2 @@\n-    \/\/ NULL to indicate UnsatisfiedLinkError should be thrown.\n-    return NULL;\n+    \/\/ null to indicate UnsatisfiedLinkError should be thrown.\n+    return nullptr;\n@@ -334,1 +334,1 @@\n-  if (entry != NULL) return entry;\n+  if (entry != nullptr) return entry;\n@@ -338,1 +338,1 @@\n-  if (long_name == NULL) {\n+  if (long_name == nullptr) {\n@@ -340,2 +340,2 @@\n-    \/\/ NULL to indicate UnsatisfiedLinkError should be thrown.\n-    return NULL;\n+    \/\/ null to indicate UnsatisfiedLinkError should be thrown.\n+    return nullptr;\n@@ -346,1 +346,1 @@\n-  if (entry != NULL) return entry;\n+  if (entry != nullptr) return entry;\n@@ -350,1 +350,1 @@\n-  if (entry != NULL) return entry;\n+  if (entry != nullptr) return entry;\n@@ -355,1 +355,1 @@\n-  return entry; \/\/ NULL indicates not found\n+  return entry; \/\/ null indicates not found\n@@ -383,1 +383,1 @@\n-    if (wrapper_symbol != NULL) {\n+    if (wrapper_symbol != nullptr) {\n@@ -386,1 +386,1 @@\n-      if (wrapper_method != NULL && !wrapper_method->is_native()) {\n+      if (wrapper_method != nullptr && !wrapper_method->is_native()) {\n@@ -394,1 +394,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -398,1 +398,1 @@\n-  address entry = NULL;\n+  address entry = nullptr;\n@@ -402,1 +402,1 @@\n-  if (entry != NULL) return entry;\n+  if (entry != nullptr) return entry;\n@@ -407,1 +407,1 @@\n-  if (entry != NULL) return entry;\n+  if (entry != nullptr) return entry;\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  char* utfstr = NULL;\n+  char* utfstr = nullptr;\n@@ -52,1 +52,1 @@\n-  if (str == NULL) {\n+  if (str == nullptr) {\n@@ -112,1 +112,1 @@\n-  char* name_utf = NULL;\n+  char* name_utf = nullptr;\n@@ -127,1 +127,1 @@\n-  PerfLong* pl = NULL;\n+  PerfLong* pl = nullptr;\n@@ -176,1 +176,1 @@\n-  if (name == NULL || value == NULL) {\n+  if (name == nullptr || value == nullptr) {\n@@ -195,2 +195,2 @@\n-  char* name_utf = NULL;\n-  jbyte* value_local = NULL;\n+  char* name_utf = nullptr;\n+  jbyte* value_local = nullptr;\n@@ -217,1 +217,1 @@\n-  PerfByteArray* pbv = NULL;\n+  PerfByteArray* pbv = nullptr;\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-    if (val_oop == NULL) {\n+    if (val_oop == nullptr) {\n@@ -95,1 +95,1 @@\n-static ResolvedMethodTableHash* _local_table           = NULL;\n+static ResolvedMethodTableHash* _local_table           = nullptr;\n@@ -131,1 +131,1 @@\n-    if (val_oop == NULL) {\n+    if (val_oop == nullptr) {\n@@ -155,1 +155,1 @@\n-    assert(result != NULL, \"Result should be reachable\");\n+    assert(result != nullptr, \"Result should be reachable\");\n@@ -308,1 +308,1 @@\n-    if (tmp == NULL) {\n+    if (tmp == nullptr) {\n@@ -345,1 +345,1 @@\n-    if (mem_name == NULL) {\n+    if (mem_name == nullptr) {\n@@ -387,1 +387,1 @@\n-    if (obj != NULL) {\n+    if (obj != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,1 @@\n-    if (_deopt != NULL && last_frame.is_compiled_frame() && last_frame.can_be_deoptimized()) {\n+    if (_deopt != nullptr && last_frame.is_compiled_frame() && last_frame.can_be_deoptimized()) {\n@@ -105,1 +105,1 @@\n-      last_frame.oops_do(&cl, NULL, &register_map);\n+      last_frame.oops_do(&cl, nullptr, &register_map);\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    assert(thread != NULL, \"\");\n+    assert(thread != nullptr, \"\");\n@@ -70,1 +70,1 @@\n-  frames_array->obj_at_put(magic_pos, NULL);\n+  frames_array->obj_at_put(magic_pos, nullptr);\n@@ -100,1 +100,1 @@\n-      _cont_entry = NULL;\n+      _cont_entry = nullptr;\n@@ -111,1 +111,1 @@\n-  assert(_cont_scope.is_null() || cont() != (oop)NULL, \"must be\");\n+  assert(_cont_scope.is_null() || cont() != (oop)nullptr, \"must be\");\n@@ -114,1 +114,1 @@\n-  if (cont != (oop)NULL && Continuation::is_continuation_entry_frame(_jvf->fr(), _jvf->register_map())) {\n+  if (cont != (oop)nullptr && Continuation::is_continuation_entry_frame(_jvf->fr(), _jvf->register_map())) {\n@@ -117,1 +117,1 @@\n-      _jvf = NULL;\n+      _jvf = nullptr;\n@@ -139,2 +139,2 @@\n-  if (m1 != thread->threadObj()) return NULL;\n-  if (magic == 0L)                    return NULL;\n+  if (m1 != thread->threadObj()) return nullptr;\n+  if (magic == 0L)                    return nullptr;\n@@ -142,1 +142,1 @@\n-  if (!stream->is_valid_in(thread, frames_array))   return NULL;\n+  if (!stream->is_valid_in(thread, frames_array))   return nullptr;\n@@ -176,1 +176,1 @@\n-    assert(stream.continuation() == NULL || stream.continuation() == stream.reg_map()->cont(), \"\");\n+    assert(stream.continuation() == nullptr || stream.continuation() == stream.reg_map()->cont(), \"\");\n@@ -179,1 +179,1 @@\n-    if (method == NULL) continue;\n+    if (method == nullptr) continue;\n@@ -226,1 +226,1 @@\n-    if (stream.continuation() != NULL && method->intrinsic_id() == vmIntrinsics::_Continuation_enter) break;\n+    if (stream.continuation() != nullptr && method->intrinsic_id() == vmIntrinsics::_Continuation_enter) break;\n@@ -265,1 +265,1 @@\n-  Symbol* signature = NULL;\n+  Symbol* signature = nullptr;\n@@ -286,1 +286,1 @@\n-      THROW_MSG_(vmSymbols::java_lang_InternalError(), \"Unexpected StackValue type\", NULL);\n+      THROW_MSG_(vmSymbols::java_lang_InternalError(), \"Unexpected StackValue type\", nullptr);\n@@ -332,1 +332,1 @@\n-    if (obj != NULL) {\n+    if (obj != nullptr) {\n@@ -360,1 +360,1 @@\n-  if (_jvf != NULL) {\n+  if (_jvf != nullptr) {\n@@ -427,1 +427,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_NullPointerException(), \"frames_array is NULL\", NULL);\n+    THROW_MSG_(vmSymbols::java_lang_NullPointerException(), \"frames_array is null\", nullptr);\n@@ -495,1 +495,1 @@\n-      THROW_MSG_(vmSymbols::java_lang_InternalError(), \"stack walk: decode failed\", NULL);\n+      THROW_MSG_(vmSymbols::java_lang_InternalError(), \"stack walk: decode failed\", nullptr);\n@@ -523,1 +523,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"doStackWalk: corrupted buffers on exit\", NULL);\n+    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"doStackWalk: corrupted buffers on exit\", nullptr);\n@@ -549,1 +549,1 @@\n-  if (existing_stream == NULL) {\n+  if (existing_stream == nullptr) {\n@@ -554,1 +554,1 @@\n-    THROW_MSG_(vmSymbols::java_lang_NullPointerException(), \"frames_array is NULL\", 0L);\n+    THROW_MSG_(vmSymbols::java_lang_NullPointerException(), \"frames_array is null\", 0L);\n@@ -592,1 +592,1 @@\n-    THROW_MSG(vmSymbols::java_lang_NullPointerException(), \"frames_array is NULL\");\n+    THROW_MSG(vmSymbols::java_lang_NullPointerException(), \"frames_array is null\");\n@@ -596,1 +596,1 @@\n-  if (existing_stream == NULL) {\n+  if (existing_stream == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-  bool at_end() override { return _jvf == NULL; }\n+  bool at_end() override { return _jvf == nullptr; }\n@@ -137,1 +137,1 @@\n-  oop cont()       override { return continuation() != NULL ? continuation(): ContinuationEntry::cont_oop_or_null(_cont_entry, _map->thread()); }\n+  oop cont()       override { return continuation() != nullptr ? continuation(): ContinuationEntry::cont_oop_or_null(_cont_entry, _map->thread()); }\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-  if (p != NULL) {\n+  if (p != nullptr) {\n@@ -384,1 +384,1 @@\n-    if (StubRoutines::unsafe_arraycopy() != NULL) {\n+    if (StubRoutines::unsafe_arraycopy() != nullptr) {\n@@ -401,1 +401,1 @@\n-  if (srcObj == NULL && dstObj == NULL) {\n+  if (srcObj == nullptr && dstObj == nullptr) {\n@@ -438,1 +438,1 @@\n-  assert(StubRoutines::data_cache_writeback() != NULL, \"sanity\");\n+  assert(StubRoutines::data_cache_writeback() != nullptr, \"sanity\");\n@@ -445,1 +445,1 @@\n-  assert(StubRoutines::data_cache_writeback_sync() != NULL, \"sanity\");\n+  assert(StubRoutines::data_cache_writeback_sync() != nullptr, \"sanity\");\n@@ -474,2 +474,2 @@\n-  assert(clazz != NULL, \"clazz must not be NULL\");\n-  assert(name != NULL, \"name must not be NULL\");\n+  assert(clazz != nullptr, \"clazz must not be null\");\n+  assert(name != nullptr, \"name must not be null\");\n@@ -497,1 +497,1 @@\n-  assert(field != NULL, \"field must not be NULL\");\n+  assert(field != nullptr, \"field must not be null\");\n@@ -529,1 +529,1 @@\n-  assert(field != NULL, \"field must not be NULL\");\n+  assert(field != nullptr, \"field must not be null\");\n@@ -536,1 +536,1 @@\n-  \/\/ large.  In that last case, this function would return NULL, since\n+  \/\/ large.  In that last case, this function would return null, since\n@@ -551,1 +551,1 @@\n-  assert(clazz != NULL, \"clazz must not be NULL\");\n+  assert(clazz != nullptr, \"clazz must not be null\");\n@@ -556,1 +556,1 @@\n-  if (klass != NULL && klass->should_be_initialized()) {\n+  if (klass != nullptr && klass->should_be_initialized()) {\n@@ -564,1 +564,1 @@\n-  assert(clazz != NULL, \"clazz must not be NULL\");\n+  assert(clazz != nullptr, \"clazz must not be null\");\n@@ -569,1 +569,1 @@\n-  if (klass != NULL && klass->should_be_initialized()) {\n+  if (klass != nullptr && klass->should_be_initialized()) {\n@@ -578,1 +578,1 @@\n-  assert(clazz != NULL, \"clazz must not be NULL\");\n+  assert(clazz != nullptr, \"clazz must not be null\");\n@@ -583,1 +583,1 @@\n-  if (k == NULL || !k->is_array_klass()) {\n+  if (k == nullptr || !k->is_array_klass()) {\n@@ -636,1 +636,1 @@\n-  env->ThrowNew(cls, NULL);\n+  env->ThrowNew(cls, nullptr);\n@@ -643,1 +643,1 @@\n-  char *utfName = NULL;\n+  char *utfName = nullptr;\n@@ -647,1 +647,1 @@\n-  assert(data != NULL, \"Class bytes must not be NULL\");\n+  assert(data != nullptr, \"Class bytes must not be null\");\n@@ -655,1 +655,1 @@\n-  if (body == NULL) {\n+  if (body == nullptr) {\n@@ -665,1 +665,1 @@\n-  if (name != NULL) {\n+  if (name != nullptr) {\n@@ -671,1 +671,1 @@\n-      if (utfName == NULL) {\n+      if (utfName == nullptr) {\n@@ -755,2 +755,2 @@\n-  assert(event != NULL, \"invariant\");\n-  event->set_parkedClass((obj != NULL) ? obj->klass() : NULL);\n+  assert(event != nullptr, \"invariant\");\n+  event->set_parkedClass((obj != nullptr) ? obj->klass() : nullptr);\n@@ -759,1 +759,1 @@\n-  event->set_address((obj != NULL) ? (u8)cast_from_oop<uintptr_t>(obj) : 0);\n+  event->set_address((obj != nullptr) ? (u8)cast_from_oop<uintptr_t>(obj) : 0);\n@@ -785,1 +785,1 @@\n-  if (jthread != NULL) {\n+  if (jthread != nullptr) {\n@@ -787,2 +787,2 @@\n-    JavaThread* thr = NULL;\n-    oop java_thread = NULL;\n+    JavaThread* thr = nullptr;\n+    oop java_thread = nullptr;\n@@ -790,1 +790,1 @@\n-    if (java_thread != NULL) {\n+    if (java_thread != nullptr) {\n@@ -792,1 +792,1 @@\n-      if (thr != NULL) {\n+      if (thr != nullptr) {\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    if (attachedThread != NULL) {\n+    if (attachedThread != nullptr) {\n@@ -100,1 +100,1 @@\n-  \/\/ legal state. We have no last Java frame if last_Java_sp == NULL so\n+  \/\/ legal state. We have no last Java frame if last_Java_sp == null so\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-  assert(holder != NULL, \"sanity\");\n+  assert(holder != nullptr, \"sanity\");\n@@ -106,1 +106,1 @@\n-  assert(holder != NULL, \"sanity\");\n+  assert(holder != nullptr, \"sanity\");\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-          if (plus_char != NULL) {\n+          if (plus_char != nullptr) {\n@@ -211,1 +211,1 @@\n-  if (h_name == NULL) {\n+  if (h_name == nullptr) {\n@@ -226,1 +226,1 @@\n-  if (h_name == NULL) {\n+  if (h_name == nullptr) {\n@@ -281,2 +281,2 @@\n-  if (!( UseCompressedOops && rhs.base() != NULL &&\n-         CompressedOops::base() != NULL &&\n+  if (!( UseCompressedOops && rhs.base() != nullptr &&\n+         CompressedOops::base() != nullptr &&\n@@ -723,1 +723,1 @@\n-  assert(method != NULL, \"method should not be null\");\n+  assert(method != nullptr, \"method should not be null\");\n@@ -747,1 +747,1 @@\n-                assert(cm != NULL, \"sanity check\");\n+                assert(cm != nullptr, \"sanity check\");\n@@ -772,1 +772,1 @@\n-    for (jint d = 0; d < depth && jvf != NULL; d++) {\n+    for (jint d = 0; d < depth && jvf != nullptr; d++) {\n@@ -775,1 +775,1 @@\n-    result = jvf != NULL && jvf->fr().is_deoptimized_frame();\n+    result = jvf != nullptr && jvf->fr().is_deoptimized_frame();\n@@ -793,1 +793,1 @@\n-  } else if (mh->code() != NULL) {\n+  } else if (mh->code() != nullptr) {\n@@ -810,1 +810,1 @@\n-  if (code == NULL) {\n+  if (code == nullptr) {\n@@ -817,1 +817,1 @@\n-  if (comp == NULL) {\n+  if (comp == nullptr) {\n@@ -836,1 +836,1 @@\n-  if (method == NULL || comp_level > CompilationPolicy::highest_compile_level()) {\n+  if (method == nullptr || comp_level > CompilationPolicy::highest_compile_level()) {\n@@ -890,2 +890,2 @@\n-  assert(comp != NULL, \"compiler not available\");\n-  if (compilation_context != NULL) {\n+  assert(comp != nullptr, \"compiler not available\");\n+  if (compilation_context != nullptr) {\n@@ -897,1 +897,1 @@\n-    \/\/ Calling with NULL matches default directive\n+    \/\/ Calling with null matches default directive\n@@ -910,1 +910,1 @@\n-  return (code != NULL ? code->comp_level() : CompLevel_none);\n+  return (code != nullptr ? code->comp_level() : CompLevel_none);\n@@ -930,1 +930,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -938,1 +938,1 @@\n-\/\/ If 'reason' is NULL, the sum of the traps for all reasons will be returned.\n+\/\/ If 'reason' is null, the sum of the traps for all reasons will be returned.\n@@ -947,1 +947,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -949,2 +949,2 @@\n-    char* reason_str = (reason_obj == NULL) ?\n-      NULL : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(reason_obj));\n+    char* reason_str = (reason_obj == nullptr) ?\n+      nullptr : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(reason_obj));\n@@ -953,1 +953,1 @@\n-      if (reason_str != NULL && !strcmp(reason_str, Deoptimization::trap_reason_name(reason))) {\n+      if (reason_str != nullptr && !strcmp(reason_str, Deoptimization::trap_reason_name(reason))) {\n@@ -960,1 +960,1 @@\n-      } else if (reason_str == NULL) {\n+      } else if (reason_str == nullptr) {\n@@ -978,1 +978,1 @@\n-  if (reason_obj == NULL && action_obj == NULL) {\n+  if (reason_obj == nullptr && action_obj == nullptr) {\n@@ -982,4 +982,4 @@\n-  const char *reason_str = (reason_obj == NULL) ?\n-    NULL : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(reason_obj));\n-  const char *action_str = (action_obj == NULL) ?\n-    NULL : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(action_obj));\n+  const char *reason_str = (reason_obj == nullptr) ?\n+    nullptr : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(reason_obj));\n+  const char *action_str = (action_obj == nullptr) ?\n+    nullptr : java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(action_obj));\n@@ -995,1 +995,1 @@\n-  return (code != NULL && code->is_osr_method() ? code->osr_entry_bci() : InvocationEntryBci);\n+  return (code != nullptr && code->is_osr_method() ? code->osr_entry_bci() : InvocationEntryBci);\n@@ -1040,2 +1040,2 @@\n-  if (method == NULL) {\n-    tty->print_cr(\"WB error: request to compile NULL method\");\n+  if (method == nullptr) {\n+    tty->print_cr(\"WB error: request to compile null method\");\n@@ -1048,1 +1048,1 @@\n-  if (comp == NULL) {\n+  if (comp == nullptr) {\n@@ -1063,1 +1063,1 @@\n-  if ((!is_blocking && is_queued) || nm != NULL) {\n+  if ((!is_blocking && is_queued) || nm != nullptr) {\n@@ -1069,1 +1069,1 @@\n-    if (code != NULL && code->as_nmethod_or_null() != NULL) {\n+    if (code != nullptr && code->as_nmethod_or_null() != nullptr) {\n@@ -1072,1 +1072,1 @@\n-  } else if (mh->lookup_osr_nmethod_for(bci, comp_level, false) != NULL) {\n+  } else if (mh->lookup_osr_nmethod_for(bci, comp_level, false) != nullptr) {\n@@ -1093,1 +1093,1 @@\n-  if (clinit == NULL || clinit->method_holder()->is_not_initialized()) {\n+  if (clinit == nullptr || clinit->method_holder()->is_not_initialized()) {\n@@ -1118,1 +1118,1 @@\n-  const char* error_msg = NULL;\n+  const char* error_msg = nullptr;\n@@ -1122,2 +1122,2 @@\n-  if (m == NULL) {\n-    assert(error_msg != NULL, \"Always have an error message\");\n+  if (m == nullptr) {\n+    assert(error_msg != nullptr, \"Always have an error message\");\n@@ -1150,1 +1150,1 @@\n-  const char* error_msg = NULL;\n+  const char* error_msg = nullptr;\n@@ -1153,2 +1153,2 @@\n-  if (m == NULL) {\n-    assert(error_msg != NULL, \"Must have error_msg\");\n+  if (m == nullptr) {\n+    assert(error_msg != nullptr, \"Must have error_msg\");\n@@ -1172,1 +1172,1 @@\n-  if (mdo == NULL) {\n+  if (mdo == nullptr) {\n@@ -1192,1 +1192,1 @@\n-  if (mdo != NULL) {\n+  if (mdo != nullptr) {\n@@ -1207,1 +1207,1 @@\n-  if (mcs != NULL) {\n+  if (mcs != nullptr) {\n@@ -1214,1 +1214,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -1218,1 +1218,1 @@\n-  const char* flag_name = env->GetStringUTFChars(name, NULL);\n+  const char* flag_name = env->GetStringUTFChars(name, nullptr);\n@@ -1228,1 +1228,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -1232,1 +1232,1 @@\n-  const char* flag_name = env->GetStringUTFChars(name, NULL);\n+  const char* flag_name = env->GetStringUTFChars(name, nullptr);\n@@ -1244,1 +1244,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1248,1 +1248,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1250,1 +1250,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1272,2 +1272,2 @@\n-  const char* flag_name = env->GetStringUTFChars(name, NULL);\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  const char* flag_name = env->GetStringUTFChars(name, nullptr);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1281,1 +1281,1 @@\n-  return (flag != NULL) && flag->is_constant_in_binary();\n+  return (flag != nullptr) && flag->is_constant_in_binary();\n@@ -1286,1 +1286,1 @@\n-  return (flag != NULL) && !(flag->is_unlocked() || flag->is_unlocker());\n+  return (flag != nullptr) && !(flag->is_unlocked() || flag->is_unlocker());\n@@ -1295,1 +1295,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1305,1 +1305,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1338,1 +1338,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1346,1 +1346,1 @@\n-    CHECK_JNI_EXCEPTION_(env, NULL);\n+    CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1349,1 +1349,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1395,2 +1395,2 @@\n-  if (value == NULL) {\n-    ccstrValue = NULL;\n+  if (value == nullptr) {\n+    ccstrValue = nullptr;\n@@ -1399,1 +1399,1 @@\n-    ccstrValue = env->GetStringUTFChars(value, NULL);\n+    ccstrValue = env->GetStringUTFChars(value, nullptr);\n@@ -1406,1 +1406,1 @@\n-      assert(param == NULL, \"old value is freed automatically and not returned\");\n+      assert(param == nullptr, \"old value is freed automatically and not returned\");\n@@ -1409,1 +1409,1 @@\n-  if (value != NULL) {\n+  if (value != nullptr) {\n@@ -1428,1 +1428,1 @@\n-  return (StringTable::lookup(name, len) != NULL);\n+  return (StringTable::lookup(name, len) != nullptr);\n@@ -1453,1 +1453,1 @@\n-  if (p == NULL) {\n+  if (p == nullptr) {\n@@ -1465,1 +1465,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1496,2 +1496,2 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n-  jobjectArray result = env->NewObjectArray(4, clazz, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  jobjectArray result = env->NewObjectArray(4, clazz, nullptr);\n@@ -1500,1 +1500,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1504,1 +1504,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1508,1 +1508,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1512,1 +1512,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1521,1 +1521,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1524,2 +1524,2 @@\n-  jobjectArray result = NULL;\n-  if (code == NULL) {\n+  jobjectArray result = nullptr;\n+  if (code == nullptr) {\n@@ -1533,3 +1533,3 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n-  result = env->NewObjectArray(5, clazz, NULL);\n-  if (result == NULL) {\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  result = env->NewObjectArray(5, clazz, nullptr);\n+  if (result == nullptr) {\n@@ -1541,1 +1541,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1545,1 +1545,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1549,1 +1549,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1554,1 +1554,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1558,1 +1558,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1574,1 +1574,1 @@\n-    if (blob != NULL) {\n+    if (blob != nullptr) {\n@@ -1604,2 +1604,2 @@\n-    if (heap == NULL) {\n-      return NULL;\n+    if (heap == nullptr) {\n+      return nullptr;\n@@ -1608,1 +1608,1 @@\n-         cb != NULL; cb = (CodeBlob*) heap->next(cb)) {\n+         cb != nullptr; cb = (CodeBlob*) heap->next(cb)) {\n@@ -1615,1 +1615,1 @@\n-  jobjectArray result = NULL;\n+  jobjectArray result = nullptr;\n@@ -1617,4 +1617,4 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n-  result = env->NewObjectArray(blobs.length(), clazz, NULL);\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n-  if (result == NULL) {\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  result = env->NewObjectArray(blobs.length(), clazz, nullptr);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  if (result == nullptr) {\n@@ -1627,1 +1627,1 @@\n-    CHECK_JNI_EXCEPTION_(env, NULL);\n+    CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1629,1 +1629,1 @@\n-    CHECK_JNI_EXCEPTION_(env, NULL);\n+    CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1736,1 +1736,1 @@\n-  ClassLoaderData* cld = class_loader_oop != NULL\n+  ClassLoaderData* cld = class_loader_oop != nullptr\n@@ -1843,1 +1843,1 @@\n-  if (cp->cache() == NULL) {\n+  if (cp->cache() == nullptr) {\n@@ -1852,1 +1852,1 @@\n-  if (cp->cache() == NULL) {\n+  if (cp->cache() == nullptr) {\n@@ -1875,2 +1875,2 @@\n-  assert(value != NULL, \"sanity\");\n-  if (method == NULL || name == NULL) {\n+  assert(value != nullptr, \"sanity\");\n+  if (method == nullptr || name == nullptr) {\n@@ -1884,1 +1884,1 @@\n-  const char* flag_name = env->GetStringUTFChars(name, NULL);\n+  const char* flag_name = env->GetStringUTFChars(name, nullptr);\n@@ -1904,1 +1904,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1914,1 +1914,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1924,1 +1924,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1934,1 +1934,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1943,1 +1943,1 @@\n-    CHECK_JNI_EXCEPTION_(env, NULL);\n+    CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -1946,1 +1946,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1954,1 +1954,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n@@ -2014,1 +2014,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2111,1 +2111,1 @@\n-      for (javaVFrame* vf = jt->last_java_vframe(&rmap); vf != NULL; vf = vf->java_sender()) {\n+      for (javaVFrame* vf = jt->last_java_vframe(&rmap); vf != nullptr; vf = vf->java_sender()) {\n@@ -2113,1 +2113,1 @@\n-        if (monitors != NULL) {\n+        if (monitors != nullptr) {\n@@ -2120,1 +2120,1 @@\n-            if (owner != NULL) {\n+            if (owner != nullptr) {\n@@ -2135,1 +2135,1 @@\n-  if (thread_handle != NULL) {\n+  if (thread_handle != nullptr) {\n@@ -2138,1 +2138,1 @@\n-    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, NULL);\n+    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, nullptr);\n@@ -2169,1 +2169,1 @@\n-  } else if (thread_handle != NULL) {\n+  } else if (thread_handle != nullptr) {\n@@ -2172,1 +2172,1 @@\n-    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, NULL);\n+    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, nullptr);\n@@ -2198,1 +2198,1 @@\n-  if (thread_handle != NULL) {\n+  if (thread_handle != nullptr) {\n@@ -2201,1 +2201,1 @@\n-    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, NULL);\n+    bool is_alive = tlh.cv_internal_thread_to_JavaThread(thread_handle, &target, nullptr);\n@@ -2237,1 +2237,1 @@\n-  assert(field_name != NULL && strlen(field_name) > 0, \"Field name not valid\");\n+  assert(field_name != nullptr && strlen(field_name) > 0, \"Field name not valid\");\n@@ -2251,1 +2251,1 @@\n-  if (res == NULL) {\n+  if (res == nullptr) {\n@@ -2268,2 +2268,2 @@\n-  if (string == NULL) {\n-    return NULL;\n+  if (string == nullptr) {\n+    return nullptr;\n@@ -2294,1 +2294,1 @@\n-    if (method_array[i].fnPtr == NULL) continue;\n+    if (method_array[i].fnPtr == nullptr) continue;\n@@ -2297,1 +2297,1 @@\n-      if (throwable_obj != NULL) {\n+      if (throwable_obj != nullptr) {\n@@ -2319,1 +2319,1 @@\n-  const char* dir = env->GetStringUTFChars(compDirect, NULL);\n+  const char* dir = env->GetStringUTFChars(compDirect, nullptr);\n@@ -2344,1 +2344,1 @@\n-  const char* lf = env->GetStringUTFChars(libfile, NULL);\n+  const char* lf = env->GetStringUTFChars(libfile, nullptr);\n@@ -2377,1 +2377,1 @@\n-  const char* p_cgroups = env->GetStringUTFChars(proc_cgroups, NULL);\n+  const char* p_cgroups = env->GetStringUTFChars(proc_cgroups, nullptr);\n@@ -2379,1 +2379,1 @@\n-  const char* p_s_cgroup = env->GetStringUTFChars(proc_self_cgroup, NULL);\n+  const char* p_s_cgroup = env->GetStringUTFChars(proc_self_cgroup, nullptr);\n@@ -2381,1 +2381,1 @@\n-  const char* p_s_mountinfo = env->GetStringUTFChars(proc_self_mountinfo, NULL);\n+  const char* p_s_mountinfo = env->GetStringUTFChars(proc_self_mountinfo, nullptr);\n@@ -2432,1 +2432,1 @@\n-  if (t == NULL) {\n+  if (t == nullptr) {\n@@ -2479,1 +2479,1 @@\n-      current_frame->print_value_on(&st, NULL);\n+      current_frame->print_value_on(&st, nullptr);\n@@ -2505,1 +2505,1 @@\n-  CHECK_JNI_EXCEPTION_(env, NULL);\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":135,"deletions":135,"binary":false,"changes":270,"status":"modified"}]}