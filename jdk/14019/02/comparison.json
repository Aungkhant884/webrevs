{"files":[{"patch":"@@ -57,3 +57,2 @@\n-  void verify_before();\n-  void verify_after();\n-  void notify_allocation(JavaThread* thread);\n+  void verify_before() NOT_DEBUG_RETURN;\n+  void verify_after() NOT_DEBUG_RETURN;\n@@ -87,1 +86,23 @@\n-      notify_allocation(_thread);\n+\n+      \/\/ Real allocation allocates actual memory: either allocates\n+      \/\/ outside the TLAB, or allocates a new TLAB.\n+      const bool is_real_allocation = _allocated_outside_tlab ||\n+                                      (_allocated_tlab_size != 0);\n+\n+      if (is_real_allocation) {\n+        notify_allocation_low_memory_detector();\n+        notify_allocation_jfr_sampler();\n+      }\n+\n+      if ((is_real_allocation || _tlab_end_reset_for_sample) &&\n+          JvmtiExport::should_post_sampled_object_alloc()) {\n+        notify_allocation_jvmti_sampler();\n+      }\n+\n+      if (JvmtiExport::should_post_vm_object_alloc()) {\n+        JvmtiExport::record_vm_internal_object_allocation(obj());\n+      }\n+\n+      if (DTraceAllocProbes) {\n+        notify_allocation_dtrace_sampler(_thread);\n+      }\n@@ -144,0 +165,1 @@\n+#ifdef ASSERT\n@@ -149,1 +171,1 @@\n-  debug_only(check_for_valid_allocation_state());\n+  check_for_valid_allocation_state();\n@@ -154,1 +176,1 @@\n-  NOT_PRODUCT(check_for_bad_heap_word_value();)\n+  check_for_bad_heap_word_value();\n@@ -169,1 +191,0 @@\n-#ifdef ASSERT\n@@ -182,3 +203,0 @@\n-  \/\/ support for JVMTI VMObjectAlloc event (no-op if not enabled)\n-  JvmtiExport::vm_object_alloc_event_collector(obj());\n-\n@@ -190,6 +208,0 @@\n-  if (!_allocated_outside_tlab && _allocated_tlab_size == 0 && !_tlab_end_reset_for_sample) {\n-    \/\/ Sample if it's a non-TLAB allocation, or a TLAB allocation that either refills the TLAB\n-    \/\/ or expands it due to taking a sampler induced slow path.\n-    return;\n-  }\n-\n@@ -239,7 +251,6 @@\n-  if (DTraceAllocProbes) {\n-    \/\/ support for Dtrace object alloc event (no-op most of the time)\n-    Klass* klass = obj()->klass();\n-    size_t word_size = _allocator._word_size;\n-    if (klass != nullptr && klass->name() != nullptr) {\n-      SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n-    }\n+  assert(DTraceAllocProbes, \"Should have been checked before\");\n+  \/\/ support for Dtrace object alloc event (no-op most of the time)\n+  Klass* klass = obj()->klass();\n+  size_t word_size = _allocator._word_size;\n+  if (klass != nullptr && klass->name() != nullptr) {\n+    SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n@@ -249,7 +260,0 @@\n-void MemAllocator::Allocation::notify_allocation(JavaThread* thread) {\n-  notify_allocation_low_memory_detector();\n-  notify_allocation_jfr_sampler();\n-  notify_allocation_dtrace_sampler(thread);\n-  notify_allocation_jvmti_sampler();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -392,6 +392,0 @@\n-  \/\/ Collects vm internal objects for later event posting.\n-  inline static void vm_object_alloc_event_collector(oop object) {\n-    if (should_post_vm_object_alloc()) {\n-      record_vm_internal_object_allocation(object);\n-    }\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}