{"files":[{"patch":"@@ -59,1 +59,0 @@\n-  void notify_allocation(JavaThread* thread);\n@@ -69,17 +68,0 @@\n-  \/\/ Should notify allocation when either of these happen:\n-  \/\/   - a non-TLAB allocation;\n-  \/\/   - a TLAB allocation that refills the TLAB;\n-  \/\/   - a TLAB allocation that expands due to taking a sampler induced slow path;\n-  \/\/   - (optionally) the enabled JVMTI event that wants to capture all allocations;\n-\n-  bool should_notify_allocation_no_jvmti_vmobjalloc() {\n-    return _allocated_outside_tlab ||\n-           _allocated_tlab_size != 0 ||\n-           _tlab_end_reset_for_sample;\n-  }\n-\n-  bool should_notify_allocation() {\n-    return should_notify_allocation_no_jvmti_vmobjalloc() ||\n-           JvmtiExport::should_post_vm_object_alloc();\n-  }\n-\n@@ -104,2 +86,22 @@\n-      if (should_notify_allocation()) {\n-        notify_allocation(_thread);\n+\n+      \/\/ Real allocation allocates actual memory: either allocates\n+      \/\/ outside the TLAB, or allocates a new TLAB.\n+      const bool is_real_allocation = _allocated_outside_tlab ||\n+                                      (_allocated_tlab_size != 0);\n+\n+      if (is_real_allocation) {\n+        notify_allocation_low_memory_detector();\n+        notify_allocation_jfr_sampler();\n+      }\n+\n+      if ((is_real_allocation || _tlab_end_reset_for_sample) &&\n+          JvmtiExport::should_post_sampled_object_alloc()) {\n+        notify_allocation_jvmti_sampler();\n+      }\n+\n+      if (JvmtiExport::should_post_vm_object_alloc()) {\n+        JvmtiExport::record_vm_internal_object_allocation(obj());\n+      }\n+\n+      if (DTraceAllocProbes) {\n+        notify_allocation_dtrace_sampler(_thread);\n@@ -201,3 +203,0 @@\n-  \/\/ support for JVMTI VMObjectAlloc event (no-op if not enabled)\n-  JvmtiExport::vm_object_alloc_event_collector(obj());\n-\n@@ -209,5 +208,0 @@\n-  if (!should_notify_allocation_no_jvmti_vmobjalloc()) {\n-    \/\/ Called here only for JVMTI VMObjectAlloc event\n-    return;\n-  }\n-\n@@ -257,7 +251,6 @@\n-  if (DTraceAllocProbes) {\n-    \/\/ support for Dtrace object alloc event (no-op most of the time)\n-    Klass* klass = obj()->klass();\n-    size_t word_size = _allocator._word_size;\n-    if (klass != nullptr && klass->name() != nullptr) {\n-      SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n-    }\n+  assert(DTraceAllocProbes, \"Should have been checked before\");\n+  \/\/ support for Dtrace object alloc event (no-op most of the time)\n+  Klass* klass = obj()->klass();\n+  size_t word_size = _allocator._word_size;\n+  if (klass != nullptr && klass->name() != nullptr) {\n+    SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n@@ -267,7 +260,0 @@\n-void MemAllocator::Allocation::notify_allocation(JavaThread* thread) {\n-  notify_allocation_low_memory_detector();\n-  notify_allocation_jfr_sampler();\n-  notify_allocation_dtrace_sampler(thread);\n-  notify_allocation_jvmti_sampler();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":28,"deletions":42,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -392,6 +392,0 @@\n-  \/\/ Collects vm internal objects for later event posting.\n-  inline static void vm_object_alloc_event_collector(oop object) {\n-    if (should_post_vm_object_alloc()) {\n-      record_vm_internal_object_allocation(object);\n-    }\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}