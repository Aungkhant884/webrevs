{"files":[{"patch":"@@ -70,1 +70,0 @@\n-#include \"services\/management.hpp\"\n@@ -788,1 +787,1 @@\n-  if (AbortVMOnSafepointTimeout && Management::ticks_to_ms(os::elapsed_counter()) > (jlong)AbortVMOnSafepointTimeoutDelay) {\n+  if (AbortVMOnSafepointTimeout && (os::elapsedTime() * MILLIUNITS > AbortVMOnSafepointTimeoutDelay)) {\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @summary Check if VM can kill thread which doesn't reach safepoint.\n+ * @summary Check if VM can kill thread which doesn't reach safepoint,\n+ *          test grace period before AbortVMOnSafepointTimeout kicks in\n@@ -42,1 +43,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void testThreadKilledOnSafepointTimeout() throws Exception {\n@@ -59,0 +60,25 @@\n+        verifyAbortVmApplied(output);\n+    }\n+\n+    public static void testGracePeriodAppliedBeforeVmAbort() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Xbootclasspath\/a:.\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+WhiteBoxAPI\",\n+                \"-XX:+SafepointTimeout\",\n+                \"-XX:+SafepointALot\",\n+                \"-XX:+AbortVMOnSafepointTimeout\",\n+                \"-XX:AbortVMOnSafepointTimeoutDelay=1500\",\n+                \"-XX:SafepointTimeoutDelay=50\",\n+                \"-XX:GuaranteedSafepointInterval=1\",\n+                \"-XX:-CreateCoredumpOnCrash\",\n+                \"-Xms64m\",\n+                \"TestAbortVMOnSafepointTimeout$TestWithDelay\"\n+        );\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(TestWithDelay.PRE_STALL_TEXT);\n+        verifyAbortVmApplied(output);\n+    }\n+\n+    private static void verifyAbortVmApplied(OutputAnalyzer output) {\n@@ -71,0 +97,8 @@\n+    public static void main(String[] args) throws Exception {\n+        \/\/ test basic AbortVMOnSafepointTimeout functionality\n+        testThreadKilledOnSafepointTimeout();\n+\n+        \/\/ verify -XX:AbortVMOnSafepointTimeoutDelay functionality\n+        testGracePeriodAppliedBeforeVmAbort();\n+    }\n+\n@@ -81,0 +115,17 @@\n+\n+    public static class TestWithDelay {\n+\n+        public static final String PRE_STALL_TEXT = \"THE FOLLOWING STALL SHOULD BE CAPTURED\";\n+\n+        public static void main(String[] args) throws Exception {\n+            WhiteBox wb = WhiteBox.getWhiteBox();\n+            \/\/ induce a stall that should not be picked up before grace period\n+            wb.waitUnsafe(999);\n+            System.out.println(PRE_STALL_TEXT);\n+\n+            \/\/ trigger safepoint timeout\n+            while (true) {\n+                wb.waitUnsafe(999);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/Safepoint\/TestAbortVMOnSafepointTimeout.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"}]}