{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"utilities\/align.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logStream.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logStream.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/spaceManager.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -171,9 +171,0 @@\n-    if (log_is_enabled(Info, monitorinflation)) {\n-      \/\/ The ObjectMonitor subsystem uses perf counters so\n-      \/\/ do this before perfMemory_exit().\n-      \/\/ This other audit_and_print_stats() call is done at the\n-      \/\/ Debug level at a safepoint:\n-      \/\/ - for async deflation auditing:\n-      \/\/   ObjectSynchronizer::do_safepoint_work()\n-      ObjectSynchronizer::audit_and_print_stats(true \/* on_exit *\/);\n-    }\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-                                    \/\/ ObjectSynchronizer::deflate_monitor_using_JT().\n+                                    \/\/ ObjectSynchronizer::deflate_monitor().\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-      ObjectSynchronizer::deflate_idle_monitors_using_JT();\n+      ObjectSynchronizer::deflate_idle_monitors();\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+bool volatile ObjectSynchronizer::_is_final_audit = false;\n@@ -917,2 +918,2 @@\n-  \/\/ These are highly shared mostly-read variables.\n-  \/\/ To avoid false-sharing they need to be the sole occupants of a cache line.\n+  \/\/ This is a highly shared mostly-read variable.\n+  \/\/ To avoid false-sharing it needs to be the sole occupant of a cache line.\n@@ -920,2 +921,1 @@\n-  volatile int stw_cycle;\n-  DEFINE_PAD_MINUS_SIZE(1, OM_CACHE_LINE_SIZE, sizeof(volatile int) * 2);\n+  DEFINE_PAD_MINUS_SIZE(1, OM_CACHE_LINE_SIZE, sizeof(volatile int));\n@@ -1366,1 +1366,1 @@\n-  bool is_JavaThread = Thread::current()->is_Java_thread();\n+  Thread* self = Thread::current();\n@@ -1382,1 +1382,1 @@\n-    if (is_JavaThread) {\n+    if (self->is_Java_thread()) {\n@@ -1384,1 +1384,1 @@\n-      ThreadBlockInVM tbivm(JavaThread::current());\n+      ThreadBlockInVM tbivm(self->as_Java_thread());\n@@ -1540,1 +1540,1 @@\n-\/\/ scavenger -- deflate_monitor_list_using_JT() -- from reclaiming them\n+\/\/ scavenger -- deflate_monitor_list() -- from reclaiming them\n@@ -1659,4 +1659,3 @@\n-\/\/ deflate_global_idle_monitors_using_JT() and\n-\/\/ deflate_per_thread_idle_monitors_using_JT() (in another thread) can\n-\/\/ run at the same time as om_flush() so we have to follow a careful\n-\/\/ protocol to prevent list corruption.\n+\/\/ deflate_global_idle_monitors() and deflate_per_thread_idle_monitors()\n+\/\/ (in another thread) can run at the same time as om_flush() so we have\n+\/\/ to follow a careful protocol to prevent list corruption.\n@@ -2047,2 +2046,2 @@\n-    \/\/ exit_globals()'s call to audit_and_print_stats() is done\n-    \/\/ at the Info level and not at a safepoint.\n+    \/\/ The VMThread calls do_final_audit_and_print_stats() which calls\n+    \/\/ audit_and_print_stats() at the Info level at VM exit time.\n@@ -2053,2 +2052,2 @@\n-\/\/ Deflate the specified ObjectMonitor if not in-use using a JavaThread.\n-\/\/ Returns true if it was deflated and false otherwise.\n+\/\/ Deflate the specified ObjectMonitor if not in-use. Returns true if it\n+\/\/ was deflated and false otherwise.\n@@ -2066,4 +2065,3 @@\n-bool ObjectSynchronizer::deflate_monitor_using_JT(ObjectMonitor* mid,\n-                                                  ObjectMonitor** free_head_p,\n-                                                  ObjectMonitor** free_tail_p) {\n-  assert(Thread::current()->is_Java_thread(), \"precondition\");\n+bool ObjectSynchronizer::deflate_monitor(ObjectMonitor* mid,\n+                                         ObjectMonitor** free_head_p,\n+                                         ObjectMonitor** free_tail_p) {\n@@ -2137,3 +2135,2 @@\n-      log_trace(monitorinflation)(\"deflate_monitor_using_JT: \"\n-                                  \"object=\" INTPTR_FORMAT \", mark=\"\n-                                  INTPTR_FORMAT \", type='%s'\",\n+      log_trace(monitorinflation)(\"deflate_monitor: object=\" INTPTR_FORMAT\n+                                  \", mark=\" INTPTR_FORMAT \", type='%s'\",\n@@ -2184,2 +2181,2 @@\n-\/\/ Walk a given ObjectMonitor list and deflate idle ObjectMonitors using\n-\/\/ a JavaThread. Returns the number of deflated ObjectMonitors. The given\n+\/\/ Walk a given ObjectMonitor list and deflate idle ObjectMonitors.\n+\/\/ Returns the number of deflated ObjectMonitors. The given\n@@ -2187,2 +2184,2 @@\n-\/\/ If a safepoint has started, then we save state via saved_mid_in_use_p\n-\/\/ and return to the caller to honor the safepoint.\n+\/\/ If self is a JavaThread and a safepoint has started, then we save state\n+\/\/ via saved_mid_in_use_p and return to the caller to honor the safepoint.\n@@ -2190,7 +2187,6 @@\n-int ObjectSynchronizer::deflate_monitor_list_using_JT(ObjectMonitor** list_p,\n-                                                      int* count_p,\n-                                                      ObjectMonitor** free_head_p,\n-                                                      ObjectMonitor** free_tail_p,\n-                                                      ObjectMonitor** saved_mid_in_use_p) {\n-  JavaThread* self = JavaThread::current();\n-\n+int ObjectSynchronizer::deflate_monitor_list(Thread* self,\n+                                             ObjectMonitor** list_p,\n+                                             int* count_p,\n+                                             ObjectMonitor** free_head_p,\n+                                             ObjectMonitor** free_tail_p,\n+                                             ObjectMonitor** saved_mid_in_use_p) {\n@@ -2247,1 +2243,1 @@\n-    if (mid->is_old() && deflate_monitor_using_JT(mid, free_head_p, free_tail_p)) {\n+    if (mid->is_old() && deflate_monitor(mid, free_head_p, free_tail_p)) {\n@@ -2255,1 +2251,1 @@\n-        \/\/ in deflate_monitor_using_JT() ensure memory consistency.\n+        \/\/ in deflate_monitor() ensure memory consistency.\n@@ -2262,1 +2258,1 @@\n-        \/\/ deflate_monitor_using_JT() ensure memory consistency.\n+        \/\/ deflate_monitor() ensure memory consistency.\n@@ -2297,1 +2293,2 @@\n-      if (SafepointMechanism::should_process(self) &&\n+      if (self->is_Java_thread() &&\n+          SafepointMechanism::should_process(self->as_Java_thread()) &&\n@@ -2339,1 +2336,4 @@\n-void ObjectSynchronizer::deflate_idle_monitors_using_JT() {\n+\/\/ This function is called by the ServiceThread to deflate monitors.\n+\/\/ It is also called by do_final_audit_and_print_stats() by the VMThread.\n+void ObjectSynchronizer::deflate_idle_monitors() {\n+  Thread* self = Thread::current();\n@@ -2341,1 +2341,1 @@\n-  deflate_global_idle_monitors_using_JT();\n+  deflate_global_idle_monitors(self);\n@@ -2349,1 +2349,1 @@\n-      deflate_per_thread_idle_monitors_using_JT(jt);\n+      deflate_per_thread_idle_monitors(self, jt);\n@@ -2366,3 +2366,5 @@\n-  \/\/ The ServiceThread's async deflation request has been processed.\n-  _last_async_deflation_time_ns = os::javaTimeNanos();\n-  set_is_async_deflation_requested(false);\n+  if (self->is_Java_thread()) {\n+    \/\/ The async deflation request has been processed.\n+    _last_async_deflation_time_ns = os::javaTimeNanos();\n+    set_is_async_deflation_requested(false);\n+  }\n@@ -2396,3 +2398,6 @@\n-    \/\/ Will execute a safepoint if !ThreadLocalHandshakes:\n-    HandshakeForDeflation hfd_hc;\n-    Handshake::execute(&hfd_hc);\n+    if (self->is_Java_thread()) {\n+      \/\/ A JavaThread needs to handshake in order to safely free the\n+      \/\/ monitors that were deflated in this cycle.\n+      HandshakeForDeflation hfd_hc;\n+      Handshake::execute(&hfd_hc);\n+   }\n@@ -2407,1 +2412,1 @@\n-\/\/ Deflate global idle ObjectMonitors using a JavaThread.\n+\/\/ Deflate global idle ObjectMonitors.\n@@ -2409,4 +2414,2 @@\n-void ObjectSynchronizer::deflate_global_idle_monitors_using_JT() {\n-  JavaThread* self = JavaThread::current();\n-\n-  deflate_common_idle_monitors_using_JT(true \/* is_global *\/, self);\n+void ObjectSynchronizer::deflate_global_idle_monitors(Thread* self) {\n+  deflate_common_idle_monitors(self, true \/* is_global *\/, NULL \/* target *\/);\n@@ -2415,1 +2418,1 @@\n-\/\/ Deflate the specified JavaThread's idle ObjectMonitors using a JavaThread.\n+\/\/ Deflate the specified JavaThread's idle ObjectMonitors.\n@@ -2417,4 +2420,3 @@\n-void ObjectSynchronizer::deflate_per_thread_idle_monitors_using_JT(JavaThread* target) {\n-  assert(Thread::current()->is_Java_thread(), \"precondition\");\n-\n-  deflate_common_idle_monitors_using_JT(false \/* !is_global *\/, target);\n+void ObjectSynchronizer::deflate_per_thread_idle_monitors(Thread* self,\n+                                                          JavaThread* target) {\n+  deflate_common_idle_monitors(self, false \/* !is_global *\/, target);\n@@ -2423,1 +2425,1 @@\n-\/\/ Deflate global or per-thread idle ObjectMonitors using a JavaThread.\n+\/\/ Deflate global or per-thread idle ObjectMonitors.\n@@ -2425,3 +2427,3 @@\n-void ObjectSynchronizer::deflate_common_idle_monitors_using_JT(bool is_global, JavaThread* target) {\n-  JavaThread* self = JavaThread::current();\n-\n+void ObjectSynchronizer::deflate_common_idle_monitors(Thread* self,\n+                                                      bool is_global,\n+                                                      JavaThread* target) {\n@@ -2448,4 +2450,4 @@\n-          deflate_monitor_list_using_JT(&om_list_globals._in_use_list,\n-                                        &om_list_globals._in_use_count,\n-                                        &free_head_p, &free_tail_p,\n-                                        &saved_mid_in_use_p);\n+          deflate_monitor_list(self, &om_list_globals._in_use_list,\n+                               &om_list_globals._in_use_count,\n+                               &free_head_p, &free_tail_p,\n+                               &saved_mid_in_use_p);\n@@ -2454,3 +2456,3 @@\n-          deflate_monitor_list_using_JT(&target->om_in_use_list,\n-                                        &target->om_in_use_count, &free_head_p,\n-                                        &free_tail_p, &saved_mid_in_use_p);\n+          deflate_monitor_list(self, &target->om_in_use_list,\n+                               &target->om_in_use_count, &free_head_p,\n+                               &free_tail_p, &saved_mid_in_use_p);\n@@ -2482,1 +2484,1 @@\n-      \/\/ deflate_monitor_list_using_JT() detected a safepoint starting.\n+      \/\/ deflate_monitor_list() detected a safepoint starting.\n@@ -2490,2 +2492,4 @@\n-        assert(SafepointMechanism::should_process(self), \"sanity check\");\n-        ThreadBlockInVM blocker(self);\n+        assert(self->is_Java_thread() &&\n+               SafepointMechanism::should_process(self->as_Java_thread()),\n+               \"sanity check\");\n+        ThreadBlockInVM blocker(self->as_Java_thread());\n@@ -2940,0 +2944,21 @@\n+\/\/ Do the final audit and print of ObjectMonitor stats; must be done\n+\/\/ by the VMThread (at VM exit time).\n+void ObjectSynchronizer::do_final_audit_and_print_stats() {\n+  assert(Thread::current()->is_VM_thread(), \"sanity check\");\n+\n+  if (is_final_audit()) {  \/\/ Only do the audit once.\n+    return;\n+  }\n+  set_is_final_audit();\n+\n+  if (log_is_enabled(Info, monitorinflation)) {\n+    \/\/ Do a deflation in order to reduce the in-use monitor population\n+    \/\/ that is reported by ObjectSynchronizer::log_in_use_monitor_details()\n+    \/\/ which is called by ObjectSynchronizer::audit_and_print_stats().\n+    ObjectSynchronizer::deflate_idle_monitors();\n+    \/\/ The other audit_and_print_stats() call is done at the Debug\n+    \/\/ level at a safepoint in ObjectSynchronizer::do_safepoint_work().\n+    ObjectSynchronizer::audit_and_print_stats(true \/* on_exit *\/);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":96,"deletions":71,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -132,4 +132,6 @@\n-  static void deflate_idle_monitors_using_JT();\n-  static void deflate_global_idle_monitors_using_JT();\n-  static void deflate_per_thread_idle_monitors_using_JT(JavaThread* target);\n-  static void deflate_common_idle_monitors_using_JT(bool is_global, JavaThread* target);\n+  static void deflate_idle_monitors();\n+  static void deflate_global_idle_monitors(Thread* self);\n+  static void deflate_per_thread_idle_monitors(Thread* self,\n+                                               JavaThread* target);\n+  static void deflate_common_idle_monitors(Thread* self, bool is_global,\n+                                           JavaThread* target);\n@@ -138,9 +140,7 @@\n-  \/\/ monitors using a JavaThread.\n-  static int deflate_monitor_list_using_JT(ObjectMonitor** list_p,\n-                                           int* count_p,\n-                                           ObjectMonitor** free_head_p,\n-                                           ObjectMonitor** free_tail_p,\n-                                           ObjectMonitor** saved_mid_in_use_p);\n-  static bool deflate_monitor_using_JT(ObjectMonitor* mid,\n-                                       ObjectMonitor** free_head_p,\n-                                       ObjectMonitor** free_tail_p);\n+  \/\/ monitors.\n+  static int deflate_monitor_list(Thread* self, ObjectMonitor** list_p,\n+                                  int* count_p, ObjectMonitor** free_head_p,\n+                                  ObjectMonitor** free_tail_p,\n+                                  ObjectMonitor** saved_mid_in_use_p);\n+  static bool deflate_monitor(ObjectMonitor* mid, ObjectMonitor** free_head_p,\n+                              ObjectMonitor** free_tail_p);\n@@ -149,0 +149,2 @@\n+  static bool is_final_audit() { return _is_final_audit; }\n+  static void set_is_final_audit() { _is_final_audit = true; }\n@@ -150,1 +152,1 @@\n-  static bool request_deflate_idle_monitors();  \/\/ for whitebox test support and VM exit logging\n+  static bool request_deflate_idle_monitors();  \/\/ for whitebox test support\n@@ -172,0 +174,1 @@\n+  static void do_final_audit_and_print_stats();\n@@ -185,0 +188,1 @@\n+  static volatile bool _is_final_audit;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -434,10 +434,0 @@\n-bool VM_Exit::doit_prologue() {\n-  if (log_is_enabled(Info, monitorinflation)) {\n-    \/\/ Do a deflation in order to reduce the in-use monitor population\n-    \/\/ that is reported by ObjectSynchronizer::log_in_use_monitor_details()\n-    \/\/ at VM exit.\n-    ObjectSynchronizer::request_deflate_idle_monitors();\n-  }\n-  return true;\n-}\n-\n@@ -466,0 +456,4 @@\n+  \/\/ The ObjectMonitor subsystem uses perf counters so do this before\n+  \/\/ we call exit_globals() so we don't run afoul of perfMemory_exit().\n+  ObjectSynchronizer::do_final_audit_and_print_stats();\n+\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -400,1 +400,0 @@\n-  bool doit_prologue();\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -172,7 +172,0 @@\n-  if (log_is_enabled(Info, monitorinflation)) {\n-    \/\/ Do a deflation in order to reduce the in-use monitor population\n-    \/\/ that is reported by ObjectSynchronizer::log_in_use_monitor_details()\n-    \/\/ at VM exit.\n-    ObjectSynchronizer::request_deflate_idle_monitors();\n-  }\n-\n@@ -198,0 +191,5 @@\n+  \/\/ The ObjectMonitor subsystem uses perf counters so do this before\n+  \/\/ we signal that the VM thread is gone. We don't want to run afoul\n+  \/\/ of perfMemory_exit() in exit_globals().\n+  ObjectSynchronizer::do_final_audit_and_print_stats();\n+\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"memory\/resourceArea.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vm_version.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}