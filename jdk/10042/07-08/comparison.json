{"files":[{"patch":"@@ -1556,1 +1556,1 @@\n-                   \" bytes, addr \" INTPTR_FORMAT \" file offset \" SIZE_FORMAT_X_W(08)\n+                   \" bytes, addr \" INTPTR_FORMAT \" file offset 0x%08\" PRIxPTR\n@@ -1560,0 +1560,1 @@\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-#define UINT64_FORMAT_X_W(width) \"0x%\" #width PRIx64\n@@ -136,1 +135,0 @@\n-#define SIZE_FORMAT_X_W(width)   \"0x%\" #width PRIxPTR\n@@ -139,1 +137,1 @@\n-#define INTX_FORMAT_X            \"0x%\"        PRIdPTR\n+#define INTX_FORMAT_X            \"0x%\"        PRIxPTR\n@@ -142,1 +140,1 @@\n-#define UINTX_FORMAT_X           \"0x%\"        PRIuPTR\n+#define UINTX_FORMAT_X           \"0x%\"        PRIxPTR\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -219,0 +221,63 @@\n+\n+#define check_format(format, value, expected)                  \\\n+  do {                                                         \\\n+    ResourceMark rm;                                           \\\n+    stringStream out;                                          \\\n+    out.print((format), (value));                              \\\n+    const char* result = out.as_string();                      \\\n+    EXPECT_EQ(strcmp(result, (expected)), 0) << \"Failed with\"  \\\n+        << \" format '\"   << (format)   << \"'\"                  \\\n+        << \" value '\"    << (value)    << \"'\"                  \\\n+        << \" result '\"   << result     << \"'\"                  \\\n+        << \" expected '\" << (expected) << \"'\";                 \\\n+  } while (false)\n+\n+TEST(globalDefinitions, format_specifiers) {\n+  check_format(INT8_FORMAT_X_0,        0x01,             \"0x01\");\n+  check_format(UINT8_FORMAT_X_0,       0x01u,            \"0x01\");\n+\n+  check_format(INT16_FORMAT_X_0,       0x0123,           \"0x0123\");\n+  check_format(UINT16_FORMAT_X_0,      0x0123u,          \"0x0123\");\n+\n+  check_format(INT32_FORMAT,           123,              \"123\");\n+  check_format(INT32_FORMAT_X_0,       0x123,            \"0x00000123\");\n+  check_format(INT32_FORMAT_W(5),      123,              \"  123\");\n+  check_format(INT32_FORMAT_W(-5),     123,              \"123  \");\n+  check_format(UINT32_FORMAT,          123u,             \"123\");\n+  check_format(UINT32_FORMAT_X_0,      0x123u,           \"0x00000123\");\n+  check_format(UINT32_FORMAT_W(5),     123u,             \"  123\");\n+  check_format(UINT32_FORMAT_W(-5),    123u,             \"123  \");\n+\n+  check_format(INT64_FORMAT,           (int64_t)123,     \"123\");\n+  check_format(INT64_FORMAT_X,         (int64_t)0x123,   \"0x123\");\n+  check_format(INT64_FORMAT_X_0,       (int64_t)0x123,   \"0x0000000000000123\");\n+  check_format(INT64_FORMAT_W(5),      (int64_t)123,     \"  123\");\n+  check_format(INT64_FORMAT_W(-5),     (int64_t)123,     \"123  \");\n+\n+  check_format(UINT64_FORMAT,          (uint64_t)123,    \"123\");\n+  check_format(UINT64_FORMAT_X,        (uint64_t)0x123,  \"0x123\");\n+  check_format(UINT64_FORMAT_X_0,      (uint64_t)0x123,  \"0x0000000000000123\");\n+  check_format(UINT64_FORMAT_W(5),     (uint64_t)123,    \"  123\");\n+  check_format(UINT64_FORMAT_W(-5),    (uint64_t)123,    \"123  \");\n+\n+  check_format(SSIZE_FORMAT,           (ssize_t)123,     \"123\");\n+  check_format(SSIZE_FORMAT_W(5),      (ssize_t)123,     \"  123\");\n+  check_format(SSIZE_FORMAT_W(-5),     (ssize_t)123,     \"123  \");\n+  check_format(SIZE_FORMAT,            (size_t)123u,     \"123\");\n+  check_format(SIZE_FORMAT_X,          (size_t)0x123u,   \"0x123\");\n+  check_format(SIZE_FORMAT_W(5),       (size_t)123u,     \"  123\");\n+  check_format(SIZE_FORMAT_W(-5),      (size_t)123u,     \"123  \");\n+\n+  check_format(INTX_FORMAT,            (intx)123,        \"123\");\n+  check_format(INTX_FORMAT_X,          (intx)0x123,      \"0x123\");\n+  check_format(INTX_FORMAT_W(5),       (intx)123,        \"  123\");\n+  check_format(INTX_FORMAT_W(-5),      (intx)123,        \"123  \");\n+\n+  check_format(UINTX_FORMAT,           (uintx)123u,      \"123\");\n+  check_format(UINTX_FORMAT_X,         (uintx)0x123u,    \"0x123\");\n+  check_format(UINTX_FORMAT_W(5),      (uintx)123u,      \"  123\");\n+  check_format(UINTX_FORMAT_W(-5),     (uintx)123u,      \"123  \");\n+\n+  check_format(INTPTR_FORMAT,          (intptr_t)0x123,  \"0x\" LP64_ONLY(\"00000000\") \"00000123\");\n+  check_format(PTR_FORMAT,             (uintptr_t)0x123, \"0x\" LP64_ONLY(\"00000000\") \"00000123\");\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"}]}