{"files":[{"patch":"@@ -34,0 +34,1 @@\n+  \/\/ the max size this stub can emit\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-  return 20;\n+  \/\/ the max size this stub can emit\n+  return 13 * 4;\n@@ -54,1 +55,2 @@\n-  return 8 * 4 + 4;  \/\/ 4 bytes for alignment margin\n+  \/\/ the max size this stub can emit; 4 bytes for alignment\n+  return 8 * 4 + 4;\n@@ -58,5 +60,0 @@\n-  Assembler::IncompressibleRegion ir(&masm); \/\/ Fixed length\n-\n-  \/\/ make guard value 4-byte aligned so that it can be accessed by atomic instructions on riscv\n-  int alignment_bytes = __ align(4);\n-\n@@ -70,0 +67,2 @@\n+  \/\/ make guard value 4-byte aligned so that it can be accessed by atomic instructions on RISC-V\n+  __ align(4);\n@@ -72,1 +71,0 @@\n-  __ assert_alignment(__ pc());\n@@ -74,8 +72,0 @@\n-  \/\/ make sure the stub with a fixed code size\n-  if (alignment_bytes == 2) {\n-    assert(UseRVC, \"bad alignment\");\n-    __ c_nop();\n-  } else {\n-    assert(alignment_bytes == 0, \"bad alignment\");\n-    __ nop();\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    assert(size == actual_size, \"Expected stub size (%d) must match actual stub size (%d)\", size, actual_size);\n+    assert(size >= actual_size, \"Expected stub size (%d) must be larger than or equal to actual stub size (%d)\", size, actual_size);\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}