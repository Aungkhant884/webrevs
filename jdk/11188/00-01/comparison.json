{"files":[{"patch":"@@ -33,0 +33,4 @@\n+int C2SafepointPollStub::size() const {\n+  return 22;\n+}\n+\n@@ -61,0 +65,4 @@\n+int C2EntryBarrierStub::size() const {\n+  return 10;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,25 +33,0 @@\n-volatile int C2SafepointPollStub::_stub_size = 0;\n-volatile int C2EntryBarrierStub::_stub_size = 0;\n-\n-int C2CodeStub::measure_stub_size(C2CodeStub& stub) {\n-  Compile* const C = Compile::current();\n-  BufferBlob* const blob = C->output()->scratch_buffer_blob();\n-  CodeBuffer cb(blob->content_begin(), C->output()->scratch_buffer_code_size());\n-  C2_MacroAssembler masm(&cb);\n-  stub.emit(masm);\n-  stub.reinit_labels();\n-  return cb.insts_size();\n-}\n-\n-int C2CodeStub::stub_size(volatile int* stub_size) {\n-  int size = Atomic::load(stub_size);\n-\n-  if (size != 0) {\n-    return size;\n-  }\n-\n-  size = measure_stub_size(*this);\n-  Atomic::store(stub_size, size);\n-  return size;\n-}\n-\n@@ -61,9 +36,0 @@\n-int C2CodeStubList::measure_code_size() const {\n-  int size = 0;\n-  for (int i = _stubs.length() - 1; i >= 0; i--) {\n-    C2CodeStub* stub = _stubs.at(i);\n-    size += stub->size();\n-  }\n-  return size;\n-}\n-\n@@ -73,0 +39,2 @@\n+    C2CodeStub* stub = _stubs.at(i);\n+    int size = stub->size();\n@@ -74,1 +42,1 @@\n-    if (cb.insts()->maybe_expand_to_ensure_remaining(PhaseOutput::MAX_inst_size) && cb.blob() == NULL) {\n+    if (cb.insts()->maybe_expand_to_ensure_remaining(size) && cb.blob() == NULL) {\n@@ -79,1 +47,2 @@\n-    C2CodeStub* stub = _stubs.at(i);\n+    DEBUG_ONLY(int size_before = cb.insts_size();)\n+\n@@ -81,0 +50,3 @@\n+\n+    DEBUG_ONLY(int actual_size = cb.insts_size() - size_before;)\n+    assert(size == actual_size, \"Expected stub size (%d) must match actual stub size (%d)\", size, actual_size);\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":8,"deletions":36,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -44,6 +44,0 @@\n-  \/\/ A helper to determine the size of a stub implementation.\n-  \/\/ It is recommended to call this only once and cache the\n-  \/\/ result in a static field.\n-  static int measure_stub_size(C2CodeStub& stub);\n-\n-  int stub_size(volatile int* stub_size);\n@@ -53,0 +47,1 @@\n+\n@@ -54,5 +49,1 @@\n-  virtual int size() = 0;\n-  virtual void reinit_labels() {\n-    _entry.init();\n-    _continuation.init();\n-  }\n+  virtual int size() const = 0;\n@@ -64,0 +55,1 @@\n+\n@@ -68,1 +60,0 @@\n-  int  measure_code_size() const;\n@@ -74,1 +65,0 @@\n-  static volatile int _stub_size;\n@@ -76,0 +66,1 @@\n+\n@@ -79,1 +70,1 @@\n-  int size() { return stub_size(&_stub_size); }\n+  int size() const;\n@@ -85,1 +76,1 @@\n-  static volatile int _stub_size;\n+private:\n@@ -94,1 +85,1 @@\n-  int size() { return stub_size(&_stub_size); }\n+  int size() const;\n@@ -96,5 +87,0 @@\n-\n-  virtual void reinit_labels() {\n-    C2CodeStub::reinit_labels();\n-    _guard.init();\n-  }\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1247,1 +1247,0 @@\n-  stub_req += _stub_list.measure_code_size();\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}