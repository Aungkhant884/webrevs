{"files":[{"patch":"@@ -245,0 +245,4 @@\n+    \/**\n+     * Micros per second\n+     *\/\n+    private static final long MICROS_PER_SECOND =  1_000_000L;\n@@ -1148,1 +1152,1 @@\n-                case MICROS    -> nanosUntil(end) \/ 1000;\n+                case MICROS    -> microsUntil(end);\n@@ -1167,0 +1171,6 @@\n+    private long microsUntil(Instant end) {\n+        long secsDiff = Math.subtractExact(end.seconds, seconds);\n+        long totalMicros = Math.multiplyExact(secsDiff, MICROS_PER_SECOND);\n+        return Math.addExact(totalMicros, (end.nanos - nanos) \/ 1000);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+import java.time.temporal.ChronoUnit;\n@@ -70,0 +71,1 @@\n+ * @bug 8273369\n@@ -99,0 +101,7 @@\n+    @Test\n+    public void test_microsUntil() {\n+        var nanoMax = Instant.EPOCH.plusNanos(Long.MAX_VALUE);\n+        var totalMicros = Instant.EPOCH.until(nanoMax, ChronoUnit.MICROS);\n+        var plusOneMicro = Instant.EPOCH.until(nanoMax.plusNanos(1000), ChronoUnit.MICROS);\n+        assertEquals(plusOneMicro - totalMicros, 1L);\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/TestInstant.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}