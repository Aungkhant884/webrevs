{"files":[{"patch":"@@ -0,0 +1,587 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.nio.charset.Charset;\n+import java.util.Locale;\n+\n+\/**\n+ * This interface provides for printing formatted representations of objects.\n+ * <p>\n+ * It is unspecified whether flushing is enabled during invoking any of the methods.\n+ * Methods in this class never throw I\/O exceptions.\n+ * <p>\n+ * It is required that subclasses always replace malformed and unmappable character sequences with\n+ * the charset's default replacement string.\n+ * The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more\n+ * control over the encoding process is required.\n+ *\n+ * @implSpec\n+ * All implementations of the default {@code print} methods relies on the only abstract\n+ * method {@link #print(String)}.\n+ * All implementations of the default {@code println} methods relies on the corresponding\n+ * {@code print} method and the no-arg {@link #println()} method.\n+ *\n+ * @see PrintStream\n+ * @see PrintWriter\n+ * @since TBA\n+ *\/\n+public interface PrintOutput extends Appendable {\n+    \/**\n+     * Appends the specified character.\n+     *\n+     * @implSpec This implementation behaves as if:\n+     * {@snippet :\n+     *     print(String.valueOf(c));\n+     *     return this;\n+     * }\n+     *\n+     * @param  c The 16-bit character to append\n+     *\n+     * @return {@code this}\n+     *\/\n+    @Override\n+    default PrintOutput append(char c) {\n+        print(String.valueOf(c));\n+        return this;\n+    }\n+\n+    \/**\n+     * Appends the specified character sequence.\n+     *\n+     * <p> Depending on the specification of {@code toString} for the\n+     * character sequence {@code csq}, the entire sequence may not be\n+     * appended.  For instance, invoking then {@code toString} method of a\n+     * character buffer will return a subsequence whose content depends upon\n+     * the buffer's position and limit.\n+     *\n+     * @implSpec This implementation behaves as if:\n+     * {@snippet :\n+     *     print(String.valueOf(csq));\n+     *     return this;\n+     * }\n+     *\n+     * @param  csq\n+     *         The character sequence to append.  If {@code csq} is\n+     *         {@code null}, then the four characters {@code \"null\"} are\n+     *         appended to this output stream.\n+     *\n+     * @return {@code this}\n+     *\/\n+    @Override\n+    default PrintOutput append(CharSequence csq) {\n+        print(String.valueOf(csq));\n+        return this;\n+    }\n+\n+    \/**\n+     * Appends a subsequence of the specified character sequence.\n+     *\n+     * @implSpec This implementation behaves as if:\n+     * {@snippet :\n+     *     if (csq == null) csq = \"null\";\n+     *     return append(csq.subSequence(start, end));\n+     * }\n+     * @param  csq\n+     *         The character sequence from which a subsequence will be\n+     *         appended.  If {@code csq} is {@code null}, then characters\n+     *         will be appended as if {@code csq} contained the four\n+     *         characters {@code \"null\"}.\n+     *\n+     * @param  start\n+     *         The index of the first character in the subsequence\n+     *\n+     * @param  end\n+     *         The index of the character following the last character in the\n+     *         subsequence\n+     *\n+     * @return {@code this}\n+     *\n+     * @throws  IndexOutOfBoundsException\n+     *          If {@code start} or {@code end} are negative, {@code start}\n+     *          is greater than {@code end}, or {@code end} is greater than\n+     *          {@code csq.length()}\n+     *\/\n+    @Override\n+    default PrintOutput append(CharSequence csq, int start, int end) {\n+        if (csq == null) csq = \"null\";\n+        return append(csq.subSequence(start, end));\n+    }\n+\n+    \/**\n+     * Checks its error state.  The stream may be flushed if it is not closed.\n+     *\n+     * @implSpec This implementation simply returns {@code false}.  It is recommended\n+     * to override it.\n+     *\n+     * @return {@code true} if an I\/O exception has occurred.\n+     *\/\n+    default boolean checkError() {\n+        return false;\n+    }\n+\n+    \/**\n+     * Prints a boolean value.  The string produced by {@link\n+     * java.lang.String#valueOf(boolean)} is translated into bytes\n+     * according to the default charset, and these bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(b))}.\n+     *\n+     * @param      b   The {@code boolean} to be printed\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(boolean b) {\n+        print(String.valueOf(b));\n+    }\n+\n+    \/**\n+     * Prints a character.  The character is translated into one or more bytes\n+     * according to the character encoding given to the constructor, or the\n+     * default charset if none specified. These bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(c))}.\n+     *\n+     * @param      c   The {@code char} to be printed\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(char c) {\n+        print(String.valueOf(c));\n+    }\n+\n+    \/**\n+     * Prints an integer.  The string produced by {@link\n+     * java.lang.String#valueOf(int)} is translated into bytes\n+     * according to the default charset, and these bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(i))}.\n+     *\n+     * @param      i   The {@code int} to be printed\n+     * @see        java.lang.Integer#toString(int)\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(int i) {\n+        print(String.valueOf(i));\n+    }\n+\n+    \/**\n+     * Prints a long integer.  The string produced by {@link\n+     * java.lang.String#valueOf(long)} is translated into bytes\n+     * according to the default charset, and these bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(l))}.\n+     *\n+     * @param      l   The {@code long} to be printed\n+     * @see        java.lang.Long#toString(long)\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(long l) {\n+        print(String.valueOf(l));\n+    }\n+\n+    \/**\n+     * Prints a floating-point number.  The string produced by {@link\n+     * java.lang.String#valueOf(float)} is translated into bytes\n+     * according to the default charset, and these bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(f))}.\n+     *\n+     * @param      f   The {@code float} to be printed\n+     * @see        java.lang.Float#toString(float)\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(float f) {\n+        print(String.valueOf(f));\n+    }\n+\n+    \/**\n+     * Prints a double-precision floating-point number.  The string produced by\n+     * {@link java.lang.String#valueOf(double)} is translated into\n+     * bytes according to the default charset, and these\n+     * bytes are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(d))}.\n+     *\n+     * @param      d   The {@code double} to be printed\n+     * @see        java.lang.Double#toString(double)\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(double d) {\n+        print(String.valueOf(d));\n+    }\n+\n+    \/**\n+     * Prints an array of characters.  The characters are converted into bytes\n+     * according to the character encoding given to the constructor, or the\n+     * default charset if none specified. These bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(s))}.\n+     *\n+     * @param      s   The array of chars to be printed\n+     * @see Charset#defaultCharset()\n+     *\n+     * @throws  NullPointerException  If {@code s} is {@code null}\n+     *\/\n+    default void print(char[] s) {\n+        print(String.valueOf(s));\n+    }\n+\n+    \/**\n+     * Prints a string.  If the argument is {@code null} then the string\n+     * {@code \"null\"} is printed.  Otherwise, the string's characters are\n+     * converted into bytes according to the character encoding given to the\n+     * constructor, or the default charset if none\n+     * specified. These bytes are written to this stream.\n+     *\n+     * @param      s   The {@code String} to be printed\n+     * @see Charset#defaultCharset()\n+     *\/\n+    void print(String s);\n+\n+    \/**\n+     * Prints an object.  The string produced by the {@link\n+     * java.lang.String#valueOf(Object)} method is translated into bytes\n+     * according to the default charset, and these bytes\n+     * are written to this stream.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.valueOf(obj))}.\n+     *\n+     * @param      obj   The {@code Object} to be printed\n+     * @see        java.lang.Object#toString()\n+     * @see Charset#defaultCharset()\n+     *\/\n+    default void print(Object obj) {\n+        print(String.valueOf(obj));\n+    }\n+\n+    \/**\n+     * Terminates the current line by writing the line separator string.  The\n+     * line separator string is defined by the system property\n+     * {@code line.separator}, and is not necessarily a single newline\n+     * character ({@code '\\n'}).\n+     *\n+     * @implSpec This implementation invokes {@code print(System.lineSeparator())}.\n+     *\/\n+    default void println() {\n+        print(System.lineSeparator());\n+    }\n+\n+    \/**\n+     * Prints a boolean and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(boolean)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code boolean} to be printed\n+     *\/\n+    default void println(boolean x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints a character and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(char)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code char} to be printed.\n+     *\/\n+    default void println(char x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints an integer and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(int)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code int} to be printed.\n+     *\/\n+    default void println(int x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints a long and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(long)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  a The {@code long} to be printed.\n+     *\/\n+    default void println(long x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints a float and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(float)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code float} to be printed.\n+     *\/\n+    default void println(float x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints a double and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(double)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code double} to be printed.\n+     *\/\n+    default void println(double x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints an array of characters and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(char[])} and\n+     * then {@link #println()}.\n+     *\n+     * @param x  an array of chars to print.\n+     *\/\n+    default void println(char[] x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints a String and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(String)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code String} to be printed.\n+     *\/\n+    default void println(String x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * Prints an Object and then terminates the line.\n+     *\n+     * @implSpec This implementation invokes {@link #print(Object)} and then\n+     * {@link #println()}.\n+     *\n+     * @param x  The {@code Object} to be printed.\n+     *\/\n+    default void println(Object x) {\n+        print(x);\n+        println();\n+    }\n+\n+    \/**\n+     * A convenience method to write a formatted string to this output stream\n+     * using the specified format string and arguments.\n+     *\n+     * @implSpec This implementation invokes {@code format(format, args)}\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  java.util.IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @throws  NullPointerException\n+     *          If the {@code format} is {@code null}\n+     *\n+     * @return  {@code this}\n+     *\/\n+    default PrintOutput printf(String format, Object... args) {\n+        return format(format, args);\n+    }\n+\n+    \/**\n+     * A convenience method to write a formatted string to this output stream\n+     * using the specified format string and arguments.\n+     *\n+     * @implSpec This implementation invokes {@code format(l, format, args)}\n+     *\n+     * @param  l\n+     *         The {@linkplain java.util.Locale locale} to apply during\n+     *         formatting.  If {@code l} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  java.util.IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @throws  NullPointerException\n+     *          If the {@code format} is {@code null}\n+     *\n+     * @return  {@code this}\n+     *\/\n+    default PrintOutput printf(Locale l, String format, Object... args) {\n+        return format(l, format, args);\n+    }\n+\n+    \/**\n+     * Writes a formatted string to this output stream using the specified\n+     * format string and arguments.\n+     *\n+     * @implSpec This implementation invokes {@code print(String.format(l, format, args))}\n+     *\n+     * @param  l\n+     *         The {@linkplain java.util.Locale locale} to apply during\n+     *         formatting.  If {@code l} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  java.util.IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @throws  NullPointerException\n+     *          If the {@code format} is {@code null}\n+     *\n+     * @return  {@code this}\n+     *\/\n+    default PrintOutput format(Locale l, String format, Object... args) {\n+        print(String.format(l, format, args));\n+        return this;\n+    }\n+\n+    \/**\n+     * Writes a formatted string to this output stream using the specified\n+     * format string and arguments.\n+     *\n+     * <p> The locale always used is the one returned by {@link\n+     * java.util.Locale#getDefault(Locale.Category)} with\n+     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified,\n+     * regardless of any previous invocations of other formatting methods on\n+     * this object.\n+     *\n+     * @implSpec This implementation invokes {@code print(format.formatted(args))}\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  java.util.IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @throws  NullPointerException\n+     *          If the {@code format} is {@code null}\n+     *\n+     * @return  {@code this}\n+     *\/\n+    default PrintOutput format(String format, Object... args) {\n+        print(format.formatted(args));\n+        return this;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintOutput.java","additions":587,"deletions":0,"binary":false,"changes":587,"status":"added"},{"patch":"@@ -68,1 +68,1 @@\n-    implements Appendable, Closeable\n+    implements PrintOutput, Appendable, Closeable\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-public class PrintWriter extends Writer {\n+public class PrintWriter extends Writer implements PrintOutput {\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}