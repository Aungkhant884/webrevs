{"files":[{"patch":"@@ -201,1 +201,0 @@\n-        configuration.messages.notice(\"doclet.Generating_0\", docletWriter.filename.getPath());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandlerImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -270,0 +270,3 @@\n+\n+        SortedSet<TypeElement> classes = new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n+\n@@ -272,1 +275,1 @@\n-            generateClassFiles(configuration.typeElementCatalog.allClasses(pkg), classtree);\n+            classes.addAll(configuration.typeElementCatalog.allClasses(pkg));\n@@ -275,1 +278,1 @@\n-        \/\/ handle classes specified in m odules and packages on the command line\n+        \/\/ handle classes specified in modules and packages on the command line\n@@ -280,1 +283,1 @@\n-            generateClassFiles(utils.getAllClasses(pkg), classtree);\n+            classes.addAll(utils.getAllClasses(pkg));\n@@ -282,0 +285,2 @@\n+\n+        generateClassFiles(classes, classtree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AbstractDoclet.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8223355\n+ * @summary Redundant output by javadoc\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestGeneratedClasses\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestGeneratedClasses extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestGeneratedClasses tester = new TestGeneratedClasses();\n+        tester.runTests(m -> new Object[]{Path.of(m.getName())});\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testClasses(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path src_m = src.resolve(\"m\");\n+        tb.writeJavaFiles(src_m,\n+                \"module m { exports p; }\",\n+                \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src_m.toString(),\n+                \"-Xdoclint:none\",\n+                \"--module\", \"m\");\n+\n+        \/\/ verify that C.html is only generated once\n+        checkOutput(Output.OUT, true,\n+                \"\"\"\n+                    Building tree for all the packages and classes...\n+                    Generating testClasses\/out\/m\/p\/C.html...\n+                    Generating testClasses\/out\/m\/p\/package-summary.html...\"\"\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGeneratedClasses\/TestGeneratedClasses.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -57,0 +57,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -236,0 +238,1 @@\n+    private boolean automaticCheckUniqueOUT = true;\n@@ -321,12 +324,4 @@\n-                case \"-d\":\n-                    outputDir = new File(args[++i]);\n-                    break;\n-                case \"-charset\":\n-                    charsetArg = args[++i];\n-                    break;\n-                case \"-docencoding\":\n-                    docencodingArg = args[++i];\n-                    break;\n-                case \"-encoding\":\n-                    encodingArg = args[++i];\n-                    break;\n+                case \"-d\" -> outputDir = new File(args[++i]);\n+                case \"-charset\" -> charsetArg = args[++i];\n+                case \"-docencoding\" -> docencodingArg = args[++i];\n+                case \"-encoding\" -> encodingArg = args[++i];\n@@ -389,0 +384,3 @@\n+            if (automaticCheckUniqueOUT) {\n+                checkUnique(Output.OUT, \"^[A-Z][a-z]+ing \", true);\n+            }\n@@ -416,0 +414,7 @@\n+    \/**\n+     * Sets whether or not to perform an automatic call of checkUnique(OUT).\n+     *\/\n+    public void setAutomaticCheckUniqueOUT(boolean b) {\n+        automaticCheckUniqueOUT = b;\n+    }\n+\n@@ -526,0 +531,42 @@\n+    }\n+\n+    \/**\n+     * Checks that there are no duplicate lines in one of the streams written by javadoc.\n+     * @param output the output stream to check\n+     *\/\n+    public void checkUnique(Output output) {\n+        checkUnique(output, \".*\", true);\n+    }\n+\n+    \/**\n+     * Checks that there are no duplicate lines that either match or don't match a given patter,\n+     * in one of the streams written by javadoc.\n+     * @param output the output stream to check\n+     * @param pattern a pattern to filter the lines to be checked\n+     * @param select if {@code true}, lines that match the pattern will be checked for uniqueness;\n+     *               if {@code false}, lines that do not match the pattern will be checked\n+     *\/\n+    public void checkUnique(Output output, String pattern, boolean select) {\n+        checking(\"checkUnique\");\n+        Pattern filter = Pattern.compile(pattern);\n+        Matcher m = filter.matcher(\"\");\n+        Map<String, Integer> linesSofar = new HashMap<>();\n+        int lineNumber = 0;\n+        int duplicates = 0;\n+        for (String line : getOutputLines(output)) {\n+            m.reset(line);\n+            if (m.find() == select) {\n+                Integer prev = linesSofar.putIfAbsent(line, ++lineNumber);\n+                if (prev != null) {\n+                    out.println(\"duplicate line detected on line \" + lineNumber\n+                            + \"; first occurrence on line \" + prev);\n+                    out.println(\"line: \" + line);\n+                    duplicates++;\n+                }\n+            }\n+        }\n+        if (duplicates == 0) {\n+            passed(\"All lines are unique\");\n+        } else {\n+            failed(duplicates + \" duplicate lines found\");\n+        }\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":59,"deletions":12,"binary":false,"changes":71,"status":"modified"}]}