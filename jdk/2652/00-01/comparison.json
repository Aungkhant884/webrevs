{"files":[{"patch":"@@ -201,1 +201,0 @@\n-        configuration.messages.notice(\"doclet.Generating_0\", docletWriter.filename.getPath());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandlerImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -236,0 +238,1 @@\n+    private boolean automaticCheckUniqueOUT = true;\n@@ -321,12 +324,4 @@\n-                case \"-d\":\n-                    outputDir = new File(args[++i]);\n-                    break;\n-                case \"-charset\":\n-                    charsetArg = args[++i];\n-                    break;\n-                case \"-docencoding\":\n-                    docencodingArg = args[++i];\n-                    break;\n-                case \"-encoding\":\n-                    encodingArg = args[++i];\n-                    break;\n+                case \"-d\" -> outputDir = new File(args[++i]);\n+                case \"-charset\" -> charsetArg = args[++i];\n+                case \"-docencoding\" -> docencodingArg = args[++i];\n+                case \"-encoding\" -> encodingArg = args[++i];\n@@ -389,0 +384,3 @@\n+            if (automaticCheckUniqueOUT) {\n+                checkUnique(Output.OUT, \"^[A-Z][a-z]+ing \", true);\n+            }\n@@ -416,0 +414,7 @@\n+    \/**\n+     * Sets whether or not to perform an automatic call of checkUnique(OUT).\n+     *\/\n+    public void setAutomaticCheckUniqueOUT(boolean b) {\n+        automaticCheckUniqueOUT = b;\n+    }\n+\n@@ -526,0 +531,42 @@\n+    }\n+\n+    \/**\n+     * Checks that there are no duplicate lines in one of the streams written by javadoc.\n+     * @param output the output stream to check\n+     *\/\n+    public void checkUnique(Output output) {\n+        checkUnique(output, \".*\", true);\n+    }\n+\n+    \/**\n+     * Checks that there are no duplicate lines that either match or don't match a given patter,\n+     * in one of the streams written by javadoc.\n+     * @param output the output stream to check\n+     * @param pattern a pattern to filter the lines to be checked\n+     * @param select if {@code true}, lines that match the pattern will be checked for uniqueness;\n+     *               if {@code false}, lines that do not match the pattern will be checked\n+     *\/\n+    public void checkUnique(Output output, String pattern, boolean select) {\n+        checking(\"checkUnique\");\n+        Pattern filter = Pattern.compile(pattern);\n+        Matcher m = filter.matcher(\"\");\n+        Map<String, Integer> linesSofar = new HashMap<>();\n+        int lineNumber = 0;\n+        int duplicates = 0;\n+        for (String line : getOutputLines(output)) {\n+            m.reset(line);\n+            if (m.find() == select) {\n+                Integer prev = linesSofar.putIfAbsent(line, ++lineNumber);\n+                if (prev != null) {\n+                    out.println(\"duplicate line detected on line \" + lineNumber\n+                            + \"; first occurrence on line \" + prev);\n+                    out.println(\"line: \" + line);\n+                    duplicates++;\n+                }\n+            }\n+        }\n+        if (duplicates == 0) {\n+            passed(\"All lines are unique\");\n+        } else {\n+            failed(duplicates + \" duplicate lines found\");\n+        }\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":59,"deletions":12,"binary":false,"changes":71,"status":"modified"}]}