{"files":[{"patch":"@@ -2845,1 +2845,1 @@\n-  _mark_stats_cache(mark_stats, RegionMarkStatsCacheSize),\n+  _mark_stats_cache(mark_stats, G1RegionMarkStatsCache::RegionMarkStatsCacheSize),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -620,4 +620,0 @@\n-  \/\/ Number of entries in the per-task stats entry. This seems enough to have a very\n-  \/\/ low cache miss rate.\n-  static const uint RegionMarkStatsCacheSize = 1024;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"gc\/g1\/g1RegionMarkStatsCache.inline.hpp\"\n@@ -124,0 +125,6 @@\n+\n+  _live_stats = NEW_C_HEAP_ARRAY(G1RegionMarkStats, _heap->max_regions(), mtGC);\n+  for (uint j = 0; j < heap->max_regions(); j++) {\n+    _live_stats[j].clear();\n+  }\n+\n@@ -125,1 +132,1 @@\n-    _markers[i] = new G1FullGCMarker(this, i, _preserved_marks_set.get(i));\n+    _markers[i] = new G1FullGCMarker(this, i, _preserved_marks_set.get(i), _live_stats);\n@@ -140,0 +147,1 @@\n+  FREE_C_HEAP_ARRAY(G1RegionMarkStats, _live_stats);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/g1\/g1RegionMarkStatsCache.hpp\"\n@@ -70,0 +71,1 @@\n+  G1RegionMarkStats*        _live_stats;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+  \/\/ flush live bytes to regions\n+  marker->flush_mark_region_cache();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-                               PreservedMarks* preserved_stack) :\n+                               PreservedMarks* preserved_stack,\n+                               G1RegionMarkStats* mark_stats) :\n@@ -45,1 +46,3 @@\n-    _cld_closure(mark_closure(), ClassLoaderData::_claim_strong) {\n+    _cld_closure(mark_closure(), ClassLoaderData::_claim_strong),\n+    _mark_region_cache(mark_stats, G1RegionMarkStatsCache::RegionMarkStatsCacheSize) {\n+  _mark_region_cache.reset();\n@@ -70,0 +73,4 @@\n+\n+void G1FullGCMarker::flush_mark_region_cache() {\n+  _mark_region_cache.evict_all();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/g1\/g1RegionMarkStatsCache.hpp\"\n@@ -66,0 +67,3 @@\n+\n+  G1RegionMarkStatsCache _mark_region_cache;\n+\n@@ -77,1 +81,4 @@\n-  G1FullGCMarker(G1FullCollector* collector, uint worker_id, PreservedMarks* preserved_stack);\n+  G1FullGCMarker(G1FullCollector* collector,\n+                 uint worker_id,\n+                 PreservedMarks* preserved_stack,\n+                 G1RegionMarkStats* mark_stats);\n@@ -99,0 +106,2 @@\n+\n+  void flush_mark_region_cache();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/g1\/g1RegionMarkStatsCache.inline.hpp\"\n@@ -67,0 +68,5 @@\n+\n+  \/\/ Collect live words.\n+  uint hr_index = G1CollectedHeap::heap()->addr_to_region(cast_from_oop<HeapWord*>(obj));\n+  _mark_region_cache.add_live_words(hr_index, (size_t)obj->size());\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-\/\/ Reset all cache entries to their default values.\n+\/\/ Reset liveness of all cache entries to their default values,\n+\/\/ initialize _region_idx to avoid initial cache miss.\n@@ -61,1 +62,3 @@\n-    _cache[i].clear();\n+    \/\/ Avoid the initial cache miss and eviction by setting the i'th's cache\n+    \/\/ region_idx to the region_idx due to how the hash is calculated.\n+    _cache[i].clear(i);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-    void clear() {\n-      _region_idx = 0;\n+    void clear(uint idx = 0) {\n+      _region_idx = idx;\n@@ -101,0 +101,4 @@\n+  \/\/ Number of entries in the per-task stats entry. This seems enough to have a very\n+  \/\/ low cache miss rate.\n+  static const uint RegionMarkStatsCacheSize = 1024;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}