{"files":[{"patch":"@@ -2845,1 +2845,1 @@\n-  _mark_stats_cache(mark_stats, RegionMarkStatsCacheSize),\n+  _mark_stats_cache(mark_stats, G1RegionMarkStatsCache::RegionMarkStatsCacheSize),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -620,4 +620,0 @@\n-  \/\/ Number of entries in the per-task stats entry. This seems enough to have a very\n-  \/\/ low cache miss rate.\n-  static const uint RegionMarkStatsCacheSize = 1024;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,7 +248,0 @@\n-\n-    \/\/ collect live bytes.\n-    size_t sum = 0;\n-    for (uint j = 0; j < _heap->max_regions(); j++) {\n-      sum += _live_stats[j]._live_words;\n-    }\n-    _heap->set_used(sum * HeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-    _mark_region_cache(mark_stats, RegionMarkStatsCacheSize) {\n-  _mark_region_cache.initialize();\n+    _mark_region_cache(mark_stats, G1RegionMarkStatsCache::RegionMarkStatsCacheSize) {\n+  _mark_region_cache.reset();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,3 +68,0 @@\n-  \/\/ Number of entries in the per-task stats entry. This seems enough to have a very\n-  \/\/ low cache miss rate.\n-  static const uint RegionMarkStatsCacheSize = 1024;\n@@ -83,2 +80,4 @@\n-  G1FullGCMarker(G1FullCollector* collector, uint worker_id,\n-                 PreservedMarks* preserved_stack, G1RegionMarkStats* mark_stats);\n+  G1FullGCMarker(G1FullCollector* collector,\n+                 uint worker_id,\n+                 PreservedMarks* preserved_stack,\n+                 G1RegionMarkStats* mark_stats);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,11 +48,0 @@\n-\/\/ cache size is equal to or bigger than region size to intialize region_index\n-void G1RegionMarkStatsCache::initialize() {\n-  _cache_hits = 0;\n-  _cache_misses = 0;\n-\n-  for (uint i = 0; i < _num_cache_entries; i++) {\n-   _cache[i].clear();\n-   _cache[i]._region_idx = i;\n-  }\n-}\n-\n@@ -67,1 +56,2 @@\n-\/\/ Reset all cache entries to their default values.\n+\/\/ Reset liveness of all cache entries to their default values,\n+\/\/ initialize _region_idx to avoid initial cache miss.\n@@ -73,1 +63,3 @@\n-    _cache[i].clear();\n+    \/\/ Avoid the initial cache miss and eviction by setting the i'th's cache\n+    \/\/ region_idx to the region_idx due to how the hash is calculated.\n+    _cache[i].clear(i);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-    void clear() {\n-      _region_idx = 0;\n+    void clear(uint idx = 0) {\n+      _region_idx = idx;\n@@ -101,0 +101,4 @@\n+  \/\/ Number of entries in the per-task stats entry. This seems enough to have a very\n+  \/\/ low cache miss rate.\n+  static const uint RegionMarkStatsCacheSize = 1024;\n+\n@@ -105,2 +109,0 @@\n-  void initialize();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/g1\/g1RegionMarkStatsCache.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}