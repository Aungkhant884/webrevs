{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.io.IOException;\n@@ -749,3 +750,3 @@\n-    public static void stdoutMustMatch(OutputAnalyzer a, OutputAnalyzer b) {\n-        linesMustMatch(a.getStdout().split(\"\\n\"),\n-                             b.getStdout().split(\"\\n\"));\n+    public static void filesMustMatch(Path a, Path b) throws IOException {\n+        linesMustMatch(Files.readString(a).split(\"\\n\"),\n+                       Files.readString(b).split(\"\\n\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestCommon.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.io.BufferedWriter;\n@@ -38,0 +39,1 @@\n+import java.io.FileWriter;\n@@ -39,0 +41,1 @@\n+import java.nio.file.Path;\n@@ -45,1 +48,0 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -60,21 +62,2 @@\n-\n-        OutputAnalyzer dump =\n-            CDSTestUtils.createArchive(\"-XX:SharedClassListFile=\" + classListFile.getPath(),\n-                                       \"-cp\", appJar);\n-        CDSTestUtils.checkDump(dump);\n-\n-        CDSOptions opts = (new CDSOptions())\n-            .addSuffix(\"-showversion\", \"-Xlog:cds:stderr\", \"-cp\", appJar, appClass)\n-            .setUseVersion(false);\n-\n-        opts.setXShareMode(\"auto\");\n-        opts.setUseSystemArchive(false);\n-        OutputAnalyzer withcds = CDSTestUtils.run(opts).getOutput();\n-        withcds.shouldContain(DefaultClassListLFInvokersApp.FLAG);\n-        withcds.shouldHaveExitValue(0);\n-\n-        opts.setXShareMode(\"off\");\n-        opts.setUseSystemArchive(true);\n-        OutputAnalyzer nocds = CDSTestUtils.run(opts).getOutput();\n-        nocds.shouldContain(DefaultClassListLFInvokersApp.FLAG);\n-        withcds.shouldHaveExitValue(0);\n+        CDSTestUtils.createArchiveAndCheck(\"-XX:SharedClassListFile=\" + classListFile.getPath(),\n+                                           \"-cp\", appJar);\n@@ -84,9 +67,4 @@\n-\n-        System.out.println(\"\\n\\n============================== Checking output: withcds vs nocds\");\n-        TestCommon.stdoutMustMatch(withcds, nocds);\n-\n-        opts.setXShareMode(\"auto\");\n-        opts.setUseSystemArchive(true);\n-        OutputAnalyzer defcds = CDSTestUtils.run(opts).getOutput();\n-        defcds.shouldContain(DefaultClassListLFInvokersApp.FLAG);\n-        withcds.shouldHaveExitValue(0);\n+        Path no_cds_logfile = run(Mode.no_cds);\n+        Path custom_cds_logfile = run(Mode.custom_cds);\n+        System.out.println(\"\\n\\n============================== Checking output: custom_cds vs no_cds\");\n+        TestCommon.filesMustMatch(custom_cds_logfile, no_cds_logfile);\n@@ -97,0 +75,4 @@\n+        Path default_cds_logfile = run(Mode.default_cds);\n+        System.out.println(\"\\n\\n============================== Checking output: custom_cds vs default_cds\");\n+        TestCommon.filesMustMatch(custom_cds_logfile, default_cds_logfile);\n+    }\n@@ -98,2 +80,30 @@\n-        System.out.println(\"\\n\\n============================== Checking output: withcds vs defcds\");\n-        TestCommon.stdoutMustMatch(withcds, defcds);\n+    enum Mode {\n+        no_cds,\n+        default_cds,\n+        custom_cds\n+    };\n+\n+    static Path run(Mode mode) throws Exception {\n+        File f = new File(\"log_\" + mode.name() + \".txt\");\n+        CDSOptions opts = (new CDSOptions())\n+            .addSuffix(\"-showversion\", \"-cp\", appJar, appClass, f.toString())\n+            .setUseVersion(false);\n+\n+        switch (mode) {\n+        case no_cds:\n+            opts.setXShareMode(\"off\");\n+            break;\n+        case custom_cds:\n+            \/\/ We will use the archive created by the last CDSTestUtils.createArchiveAndCheck() call\n+            opts.setUseSystemArchive(false);\n+            opts.setXShareMode(\"auto\");\n+            break;\n+        case default_cds:\n+        default:\n+            \/\/ We will use the default archive.\n+            opts.setUseSystemArchive(true);\n+            opts.setXShareMode(\"auto\");\n+            break;\n+        }\n+        CDSTestUtils.run(opts).assertNormalExit(DefaultClassListLFInvokersApp.FLAG);\n+        return f.toPath();\n@@ -105,1 +115,0 @@\n-\n@@ -114,5 +123,7 @@\n-        test(\"java.lang.invoke.Invokers$Holder\");\n-        test(\"java.lang.invoke.DirectMethodHandle$Holder\");\n-        test(\"java.lang.invoke.DelegatingMethodHandle$Holder\");\n-        test(\"java.lang.invoke.LambdaForm$Holder\");\n-        System.out.println(FLAG);\n+        try (BufferedWriter w = new BufferedWriter(new FileWriter(args[0]))) {\n+            test(w, \"java.lang.invoke.Invokers$Holder\");\n+            test(w, \"java.lang.invoke.DirectMethodHandle$Holder\");\n+            test(w, \"java.lang.invoke.DelegatingMethodHandle$Holder\");\n+            test(w, \"java.lang.invoke.LambdaForm$Holder\");\n+            System.out.println(FLAG);\n+        }\n@@ -121,1 +132,1 @@\n-    static void test(String className) throws Exception {\n+    static void test(BufferedWriter w, String className) throws Exception {\n@@ -124,1 +135,1 @@\n-        System.out.println(\"Dumping all methods in \" + c);\n+        w.write(\"Dumping all methods in \" + c + \"\\n\");\n@@ -127,1 +138,1 @@\n-            System.out.println(m);\n+            w.write(m + \"\\n\");\n@@ -129,1 +140,1 @@\n-        System.out.println(\"Found \" + methods.length + \" methods\\n\\n\");\n+        w.write(\"Found \" + methods.length + \" methods\\n\\n\\n\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/lambdaForm\/DefaultClassListLFInvokers.java","additions":54,"deletions":43,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -207,4 +207,0 @@\n-\n-        public OutputAnalyzer getOutput() {\n-            return output;\n-        }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}