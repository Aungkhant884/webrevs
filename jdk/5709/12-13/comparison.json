{"files":[{"patch":"@@ -5563,41 +5563,41 @@\n-        \/** Check that an appropriate serialVersionUID member is defined. *\/\n-        private void checkSerialVersionUID(JCClassDecl tree, ClassSymbol c, Env<AttrContext> env) {\n-\n-            \/\/ check for presence of serialVersionUID\n-            VarSymbol svuid = null;\n-            for (Symbol sym : c.members().getSymbolsByName(names.serialVersionUID)) {\n-                if (sym.kind == VAR) {\n-                    svuid = (VarSymbol)sym;\n-                    break;\n-                }\n-            }\n-\n-            if (svuid == null) {\n-                if (!c.isRecord())\n-                    log.warning(LintCategory.SERIAL, tree.pos(), Warnings.MissingSVUID(c));\n-                return;\n-            }\n-\n-            \/\/ Check if @SuppressWarnings(\"serial\") is an annotation of serialVersionUID.\n-            \/\/ See JDK-8231622 for more information.\n-            Lint lint = env.info.lint.augment(svuid);\n-            if (lint.isSuppressed(LintCategory.SERIAL)) {\n-                return;\n-            }\n-\n-            \/\/ check that it is static final\n-            if ((svuid.flags() & (STATIC | FINAL)) !=\n-                (STATIC | FINAL))\n-                log.warning(LintCategory.SERIAL,\n-                        TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.ImproperSVUID(c));\n-\n-            \/\/ check that it is long\n-            else if (!svuid.type.hasTag(LONG))\n-                log.warning(LintCategory.SERIAL,\n-                        TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.LongSVUID(c));\n-\n-            \/\/ check constant\n-            else if (svuid.getConstValue() == null)\n-                log.warning(LintCategory.SERIAL,\n-                        TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.ConstantSVUID(c));\n-        }\n+\/\/         \/** Check that an appropriate serialVersionUID member is defined. *\/\n+\/\/         private void checkSerialVersionUID(JCClassDecl tree, ClassSymbol c, Env<AttrContext> env) {\n+\n+\/\/             \/\/ check for presence of serialVersionUID\n+\/\/             VarSymbol svuid = null;\n+\/\/             for (Symbol sym : c.members().getSymbolsByName(names.serialVersionUID)) {\n+\/\/                 if (sym.kind == VAR) {\n+\/\/                     svuid = (VarSymbol)sym;\n+\/\/                     break;\n+\/\/                 }\n+\/\/             }\n+\n+\/\/             if (svuid == null) {\n+\/\/                 if (!c.isRecord())\n+\/\/                     log.warning(LintCategory.SERIAL, tree.pos(), Warnings.MissingSVUID(c));\n+\/\/                 return;\n+\/\/             }\n+\n+\/\/             \/\/ Check if @SuppressWarnings(\"serial\") is an annotation of serialVersionUID.\n+\/\/             \/\/ See JDK-8231622 for more information.\n+\/\/             Lint lint = env.info.lint.augment(svuid);\n+\/\/             if (lint.isSuppressed(LintCategory.SERIAL)) {\n+\/\/                 return;\n+\/\/             }\n+\n+\/\/             \/\/ check that it is static final\n+\/\/             if ((svuid.flags() & (STATIC | FINAL)) !=\n+\/\/                 (STATIC | FINAL))\n+\/\/                 log.warning(LintCategory.SERIAL,\n+\/\/                         TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.ImproperSVUID(c));\n+\n+\/\/             \/\/ check that it is long\n+\/\/             else if (!svuid.type.hasTag(LONG))\n+\/\/                 log.warning(LintCategory.SERIAL,\n+\/\/                         TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.LongSVUID(c));\n+\n+\/\/             \/\/ check constant\n+\/\/             else if (svuid.getConstValue() == null)\n+\/\/                 log.warning(LintCategory.SERIAL,\n+\/\/                         TreeInfo.diagnosticPositionFor(svuid, tree), Warnings.ConstantSVUID(c));\n+\/\/         }\n@@ -5650,6 +5650,1 @@\n-        \/\/ TODO these checks should likely be expressed in terms of javac flags\n-        private static final Set<Modifier> PRIVATE_STATIC_FINAL_MODS =\n-            Set.of(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL);\n-\n-        private static final Set<Modifier> STATIC_FINAL_MODS = Set.of(Modifier.STATIC, Modifier.FINAL);\n-\n+        \/\/ todo: convert to flags\n@@ -5658,6 +5653,0 @@\n-        private static final Set<Modifier> PRIVATE_MODS = Set.of(Modifier.PRIVATE);\n-        private static final Set<Modifier> STATIC_MODS =  Set.of(Modifier.STATIC);\n-\n-        \/\/ Type of serialVersionUID\n-        private final Type LONG_TYPE = syms.longType;\n-\n@@ -5667,5 +5656,0 @@\n-        private final Type OIS_TYPE = syms.objectInputStreamType;\n-        private final Type OOS_TYPE = syms.objectOutputStreamType;\n-        private final Type VOID_TYPE = syms.voidType;\n-        private final Type OBJECT_TYPE = syms.objectType;\n-\n@@ -5925,2 +5909,2 @@\n-            checkReturnType(tree, e, method, VOID_TYPE);\n-            checkOneArg(tree, e, method, OOS_TYPE);\n+            checkReturnType(tree, e, method, syms.voidType);\n+            checkOneArg(tree, e, method, syms.objectOutputStreamType);\n@@ -5938,2 +5922,2 @@\n-            checkExcludedModifiers(tree, e, method, ABSTRACT_STATIC_MODS);\n-            checkReturnType(tree, e, method, OBJECT_TYPE);\n+            checkConcreteInstanceMethod(tree, e, method);\n+            checkReturnType(tree, e, method, syms.objectType);\n@@ -5954,2 +5938,2 @@\n-            checkReturnType(tree, e, method, VOID_TYPE);\n-            checkOneArg(tree, e, method, OIS_TYPE);\n+            checkReturnType(tree, e, method, syms.voidType);\n+            checkOneArg(tree, e, method, syms.objectInputStreamType);\n@@ -5964,1 +5948,1 @@\n-            checkReturnType(tree, e, method, VOID_TYPE);\n+            checkReturnType(tree, e, method, syms.voidType);\n@@ -5977,2 +5961,2 @@\n-            checkExcludedModifiers(tree, e, method, ABSTRACT_STATIC_MODS);\n-            checkReturnType(tree,e, method, OBJECT_TYPE);\n+            checkConcreteInstanceMethod(tree, e, method);\n+            checkReturnType(tree,e, method, syms.objectType);\n@@ -6091,1 +6075,1 @@\n-            if (!method.getModifiers().contains(Modifier.PRIVATE)) {\n+            if (!method.getModifiers().contains(Modifier.PRIVATE)) { \/\/ TODO: changes to flags\n@@ -6227,27 +6211,7 @@\n-        void checkExcludedModifiers(JCClassDecl tree,\n-                                    Element enclosing,\n-                                    Element element,\n-                                    Set<Modifier> excludedMods) {\n-            checkExcludedModifiers(tree, enclosing, element, excludedMods, null);\n-        }\n-\n-\n-        void checkExcludedModifiers(JCClassDecl tree,\n-                                    Element enclosing,\n-                                    Element element,\n-                                    Set<Modifier> excludedMods,\n-                                    Warning warningKey) {\n-            String name = element.getSimpleName().toString();\n-            Set<Modifier> mods = element.getModifiers();\n-            for (Modifier excludedMod : excludedMods) {\n-                if (mods.contains(excludedMod) ) {\n-                    if (warningKey == null) {\n-                        System.out.println(\"Serialization-related declaration \" + name +\n-                                           \" in \" + enclosing.getKind() + \" \" + enclosing.toString() +\n-                                           \" has unexpected modifier \" + excludedMod);\n-                    } else {\n-                        log.warning(LintCategory.SERIAL,\n-                                    TreeInfo.diagnosticPositionFor((Symbol)element, tree),\n-                                    warningKey);\n-                    }\n-                }\n+        void checkConcreteInstanceMethod(JCClassDecl tree,\n+                                         Element enclosing,\n+                                         MethodSymbol method) {\n+            if ((method.flags() & (STATIC | ABSTRACT)) != 0) {\n+                    log.warning(LintCategory.SERIAL,\n+                                TreeInfo.diagnosticPositionFor(method, tree),\n+                                Warnings.SerialConcreteInstanceMethod(method));\n@@ -6277,2 +6241,2 @@\n-                                 ExecutableElement method,\n-                                 TypeMirror expected) {\n+                                 MethodSymbol method,\n+                                 Type expectedType) {\n@@ -6284,2 +6248,3 @@\n-                System.out.println(\"Unexpected parameters \" + parameters + \" on \" + name +\n-                                   \" in \" + enclosing.getKind() + \" \" + enclosing.toString());\n+                log.warning(LintCategory.SERIAL,\n+                            TreeInfo.diagnosticPositionFor(method, tree),\n+                            Warnings.SerialMethodOneArg(method.getSimpleName(), parameters.size()));\n@@ -6289,4 +6254,7 @@\n-            TypeMirror parameterType = parameters.get(0).asType();\n-            if (!types.isSameType(\/* fixme*\/ (Type)parameterType, (Type)expected)) {\n-                System.out.println(\"Unexpected parameter type \" + parameterType + \" on \" + name +\n-                                   \" in \" + enclosing.getKind() + \" \" + enclosing.toString());\n+            Type parameterType = parameters.get(0).asType();\n+            if (!types.isSameType(parameterType, expectedType)) {\n+                log.warning(LintCategory.SERIAL,\n+                            TreeInfo.diagnosticPositionFor(method, tree),\n+                            Warnings.SerialMethodParameterType(method.getSimpleName(),\n+                                                               expectedType,\n+                                                               parameterType));\n@@ -6294,1 +6262,0 @@\n-            return;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":71,"deletions":104,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -1881,1 +1881,1 @@\n-    cannot access a no-arg constructor in non-serializable superclass {0}\n+    cannot access a no-arg constructor in first non-serializable superclass {0}\n@@ -1887,0 +1887,4 @@\n+# 0: symbol\n+compiler.warn.serial.concrete.instance.method=\\\n+    serialization-related method {0} must be a concrete instance method to be effective, neither abstract nor static\n+\n@@ -1889,1 +1893,9 @@\n-    serialization-related method {0} declared static; must be an instance method to be effective\n+    serialization-related method {0} declared static; must instead be an instance method to be effective\n+\n+# 0: name, 1: number\n+compiler.warn.serial.method.one.arg=\\\n+    serialization-related method {0} must have exactly one parameter to be effective rather than {1} parameters\n+\n+# 0: name, 1: type, 2: type\n+compiler.warn.serial.method.parameter.type=\\\n+    sole parameter of serialization-related method {0} must have type {1} to be effective rather than type {2}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+\/\/ key: compiler.warn.serial.concrete.instance.method\n+\/\/ key: compiler.warn.serial.method.one.arg\n+\/\/ key: compiler.warn.serial.method.parameter.type\n@@ -33,1 +36,1 @@\n-class SerialNonPrivateMethod implements Serializable {\n+abstract class SerialNonPrivateMethod implements Serializable {\n@@ -36,2 +39,8 @@\n-    \/\/ Should be private\n-    void writeObject(ObjectOutputStream stream) throws IOException {\n+    private static class CustomObjectOutputStream extends ObjectOutputStream {\n+        public CustomObjectOutputStream() throws IOException,\n+                                                 SecurityException {}\n+    }\n+\n+    \/\/ Should be private and have a single argument of type\n+    \/\/ ObjectOutputStream\n+    void writeObject(CustomObjectOutputStream stream) throws IOException {\n@@ -41,2 +50,2 @@\n-    \/\/ Should be private non-static\n-   private static void readObject(ObjectInputStream stream)\n+    \/\/ Should be private non-static and have one argument\n+    private static void readObject(ObjectInputStream stream, int retries)\n@@ -52,0 +61,3 @@\n+    \/\/ Should be concrete instance method\n+    public abstract Object writeReplace() throws ObjectStreamException;\n+\n@@ -53,2 +65,0 @@\n-     * ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException\n-     *\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SerialNonPrivateMethod.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    \/\/ Verify a warning is generated in an enum for each of the\n+    \/\/ Verify a warning is generated in an enum class for each of the\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/EnumSerial.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    \/\/ Verify a warning is generated in an enum for each of the\n+    \/\/ Verify a warning is generated in a record class for each of the\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/RecordSerial.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8202056\n+ * @compile\/ref=SerialMethodArity.out -XDrawDiagnostics -Xlint:serial SerialMethodArity.java\n+ *\/\n+\n+import java.io.*;\n+\n+class SerialMethodMods implements Serializable {\n+    private static final long serialVersionUID = 42;\n+\n+    private static class CustomObjectOutputStream extends ObjectOutputStream {\n+        public CustomObjectOutputStream() throws IOException,\n+                                                 SecurityException {}\n+    }\n+\n+    \/\/ Should have a single parameter of exact type ObjectOutputStream\n+    private void writeObject(CustomObjectOutputStream stream) throws IOException {\n+        stream.defaultWriteObject();\n+    }\n+\n+    \/\/ Should have a single parameter of exact type ObjectInputStream\n+    private void readObject(ObjectInputStream stream, int retries)\n+        throws IOException, ClassNotFoundException {\n+        stream.defaultReadObject();\n+    }\n+\n+    private void readObjectNoData() throws ObjectStreamException {}\n+\n+    public Object writeReplace() throws ObjectStreamException {\n+        return null;\n+    }\n+\n+    public Object readResolve() throws ObjectStreamException {\n+        return null;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/SerialMethodArity.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+SerialMethodArity.java:18:18: compiler.warn.serial.method.parameter.type: writeObject, java.io.ObjectOutputStream, SerialMethodMods.CustomObjectOutputStream\n+SerialMethodArity.java:23:18: compiler.warn.serial.method.one.arg: readObject, 2\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/SerialMethodArity.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -10,1 +10,1 @@\n-class SerialMethodMods implements Serializable {\n+abstract class SerialMethodMods implements Serializable {\n@@ -25,8 +25,10 @@\n-    \/\/ private void readObjectNoData() throws ObjectStreamException\n-\n-    \/*\n-     * ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException\n-     *\n-     * ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException\n-     *\n-     *\/\n+    private static void readObjectNoData() throws ObjectStreamException {}\n+\n+\n+    \/\/ Should be concrete instance method\n+    public abstract Object writeReplace() throws ObjectStreamException;\n+\n+    \/\/ Should be concrete instance method\n+    public static Object readResolve() throws ObjectStreamException {\n+        return null;\n+    }\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/SerialMethodMods.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3,1 +3,4 @@\n-2 warnings\n+SerialMethodMods.java:25:25: compiler.warn.serial.method.static: readObjectNoData()\n+SerialMethodMods.java:29:28: compiler.warn.serial.concrete.instance.method: writeReplace()\n+SerialMethodMods.java:32:26: compiler.warn.serial.concrete.instance.method: readResolve()\n+5 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/SerialMethodMods.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}