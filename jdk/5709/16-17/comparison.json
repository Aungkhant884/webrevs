{"files":[{"patch":"@@ -5829,4 +5829,11 @@\n-            \/\/ TOOD: If additional compile-time information is\n-            \/\/ available, should check for a \"constant null\"\n-            \/\/ assignment to this field. A null value makes having the\n-            \/\/ field a no-op.\n+            \/\/ Warn if serialPersistentFields is initialized to a\n+            \/\/ literal null.\n+            JCTree spfDecl = TreeInfo.declarationFor(spf, tree);\n+            if (spfDecl != null && spfDecl.getTag() == VARDEF) {\n+                JCVariableDecl variableDef = (JCVariableDecl) spfDecl;\n+                JCExpression initExpr = variableDef.init;\n+                 if (initExpr != null && TreeInfo.isNull(initExpr)) {\n+                     log.warning(LintCategory.SERIAL, initExpr.pos(),\n+                                 Warnings.SPFNullInit);\n+                 }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1852,0 +1852,5 @@\n+compiler.warn.SPF.null.init=\\\n+    serialPersistentFields ineffective if initialized to null.\\n\\\n+    Initialize to an empty array to indicate no fields\n+\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\/\/ key: compiler.warn.SPF.null.init\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImproperSPF.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    public \/*instance*\/ Object serialPersistentFields = null;\n+    public \/*instance*\/ Object serialPersistentFields = Boolean.TRUE;\n@@ -15,0 +15,22 @@\n+\n+    static class LiteralNullSPF implements Serializable {\n+        private static final ObjectStreamField[] serialPersistentFields = null;\n+\n+        private static final long serialVersionUID = 42;\n+    }\n+\n+    \/\/ Casting obscures the simple syntactic null-check\n+    static class CastedNullSPF implements Serializable {\n+        private static final ObjectStreamField[] serialPersistentFields =\n+            (ObjectStreamField[])null;\n+\n+        private static final long serialVersionUID = 42;\n+    }\n+\n+    \/\/ Conditional obscures the simple syntactic null-check too\n+    static class ConditionalNullSPF implements Serializable {\n+        private static final ObjectStreamField[] serialPersistentFields =\n+            (true ? null : null);\n+\n+        private static final long serialVersionUID = 42;\n+    }\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/ImproperSerialPF.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+ImproperSerialPF.java:17:75: compiler.warn.SPF.null.init\n@@ -3,1 +4,1 @@\n-2 warnings\n+3 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/Serial\/ImproperSerialPF.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}