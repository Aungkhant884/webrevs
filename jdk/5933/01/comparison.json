{"files":[{"patch":"@@ -8530,0 +8530,13 @@\n+instruct umulHiL_rReg(rdx_RegL dst, no_rax_RegL src, rax_RegL rax, rFlagsReg cr)\n+%{\n+  match(Set dst (UMulHiL src rax));\n+  effect(USE_KILL rax, KILL cr);\n+\n+  ins_cost(300);\n+  format %{ \"mulq   RDX:RAX, RAX, $src\\t# umulhi\" %}\n+  ins_encode %{\n+    __ mulq($src$$Register);\n+  %}\n+  ins_pipe(ialu_reg_reg_alu0);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+  do_name(unsignedMultiplyHigh_name,\"unsignedMultiplyHigh\")                                                             \\\n@@ -176,0 +177,1 @@\n+  do_intrinsic(_unsignedMultiplyHigh,     java_lang_Math,         unsignedMultiplyHigh_name, long2_long_signature, F_S) \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -429,0 +429,3 @@\n+  case vmIntrinsics::_unsignedMultiplyHigh:\n+    if (!Matcher::match_rule_supported(Op_UMulHiL)) return false;\n+    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -241,0 +241,1 @@\n+macro(UMulHiL)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -289,0 +289,1 @@\n+  case vmIntrinsics::_unsignedMultiplyHigh:     return inline_math_unsignedMultiplyHigh();\n@@ -1870,0 +1871,5 @@\n+bool LibraryCallKit::inline_math_unsignedMultiplyHigh() {\n+  set_result(_gvn.transform(new UMulHiLNode(argument(0), argument(2))));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+  bool inline_math_unsignedMultiplyHigh();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -435,1 +435,0 @@\n-  \/\/ Either input is TOP ==> the result is TOP\n@@ -438,0 +437,14 @@\n+  const Type *bot = bottom_type();\n+  return MulHiValue(t1, t2, bot);\n+}\n+\n+const Type* UMulHiLNode::Value(PhaseGVN* phase) const {\n+  const Type *t1 = phase->type( in(1) );\n+  const Type *t2 = phase->type( in(2) );\n+  const Type *bot = bottom_type();\n+  return MulHiValue(t1, t2, bot);\n+}\n+\n+\/\/ A common routine used by UMulHiLNode and MulHiLNode\n+const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot) {\n+  \/\/ Either input is TOP ==> the result is TOP\n@@ -442,1 +455,0 @@\n-  const Type *bot = bottom_type();\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n+\n@@ -165,0 +167,12 @@\n+  friend const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n+};\n+\n+\/\/ Upper 64 bits of a 64 bit by 64 bit unsigned multiply\n+class UMulHiLNode : public Node {\n+public:\n+  UMulHiLNode( Node *in1, Node *in2 ) : Node(0,in1,in2) {}\n+  virtual int Opcode() const;\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+  const Type *bottom_type() const { return TypeLong::LONG; }\n+  virtual uint ideal_reg() const { return Op_RegL; }\n+  friend const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1673,0 +1673,1 @@\n+  declare_c2_type(UMulHiLNode, Node)                                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1393,0 +1393,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -543,0 +543,5 @@\n+    @Benchmark\n+    public long  unsignedMultiplyHighLongLong() {\n+        return  Math.unsignedMultiplyHigh(long747, long13);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}