{"files":[{"patch":"@@ -435,1 +435,0 @@\n-  \/\/ Either input is TOP ==> the result is TOP\n@@ -438,4 +437,0 @@\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n-\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n@@ -443,6 +438,1 @@\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n-\n-  \/\/ It is not worth trying to constant fold this stuff!\n-  return TypeLong::LONG;\n+  return MulHiValue(t1, t2, bot);\n@@ -452,1 +442,0 @@\n-  \/\/ Either input is TOP ==> the result is TOP\n@@ -455,0 +444,7 @@\n+  const Type *bot = bottom_type();\n+  return MulHiValue(t1, t2, bot);\n+}\n+\n+\/\/ A common routine used by UMulHiLNode and MulHiLNode\n+const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot) {\n+  \/\/ Either input is TOP ==> the result is TOP\n@@ -459,1 +455,0 @@\n-  const Type *bot = bottom_type();\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n+\n@@ -165,0 +167,1 @@\n+  friend const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n@@ -167,0 +170,1 @@\n+\/\/ Upper 64 bits of a 64 bit by 64 bit unsigned multiply\n@@ -174,0 +178,1 @@\n+  friend const Type* MulHiValue(const Type *t1, const Type *t2, const Type *bot);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}