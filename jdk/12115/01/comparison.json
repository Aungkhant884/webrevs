{"files":[{"patch":"@@ -49,13 +49,7 @@\n-\/\/ 4MB     0\n-\/\/ 2MB     1\n-\/\/ 1MB     2\n-\/\/ 512K    3\n-\/\/ 256K    4\n-\/\/ 128K    5\n-\/\/ 64K     6\n-\/\/ 32K     7\n-\/\/ 16K     8\n-\/\/ 8K      9\n-\/\/ 4K      10\n-\/\/ 2K      11\n-\/\/ 1K      12\n+\/\/ 16MB    0\n+\/\/ 8MB     1\n+\/\/ 4MB     2\n+\/\/ ...\n+\/\/ 4K      12\n+\/\/ 2K      13\n+\/\/ 1K      14\n@@ -70,2 +64,2 @@\n-static const size_t   MAX_CHUNK_BYTE_SIZE    = 4 * M;\n-static const int      NUM_CHUNK_LEVELS       = 13;\n+static const size_t   MAX_CHUNK_BYTE_SIZE    = 16 * M;\n+static const int      NUM_CHUNK_LEVELS       = 15;\n@@ -104,13 +98,15 @@\n-static const chunklevel_t CHUNK_LEVEL_4M =     ROOT_CHUNK_LEVEL;\n-static const chunklevel_t CHUNK_LEVEL_2M =    (ROOT_CHUNK_LEVEL + 1);\n-static const chunklevel_t CHUNK_LEVEL_1M =    (ROOT_CHUNK_LEVEL + 2);\n-static const chunklevel_t CHUNK_LEVEL_512K =  (ROOT_CHUNK_LEVEL + 3);\n-static const chunklevel_t CHUNK_LEVEL_256K =  (ROOT_CHUNK_LEVEL + 4);\n-static const chunklevel_t CHUNK_LEVEL_128K =  (ROOT_CHUNK_LEVEL + 5);\n-static const chunklevel_t CHUNK_LEVEL_64K =   (ROOT_CHUNK_LEVEL + 6);\n-static const chunklevel_t CHUNK_LEVEL_32K =   (ROOT_CHUNK_LEVEL + 7);\n-static const chunklevel_t CHUNK_LEVEL_16K =   (ROOT_CHUNK_LEVEL + 8);\n-static const chunklevel_t CHUNK_LEVEL_8K =    (ROOT_CHUNK_LEVEL + 9);\n-static const chunklevel_t CHUNK_LEVEL_4K =    (ROOT_CHUNK_LEVEL + 10);\n-static const chunklevel_t CHUNK_LEVEL_2K =    (ROOT_CHUNK_LEVEL + 11);\n-static const chunklevel_t CHUNK_LEVEL_1K =    (ROOT_CHUNK_LEVEL + 12);\n+static const chunklevel_t CHUNK_LEVEL_16M =    ROOT_CHUNK_LEVEL;\n+static const chunklevel_t CHUNK_LEVEL_8M =    (ROOT_CHUNK_LEVEL + 1);\n+static const chunklevel_t CHUNK_LEVEL_4M =    (ROOT_CHUNK_LEVEL + 2);\n+static const chunklevel_t CHUNK_LEVEL_2M =    (ROOT_CHUNK_LEVEL + 3);\n+static const chunklevel_t CHUNK_LEVEL_1M =    (ROOT_CHUNK_LEVEL + 4);\n+static const chunklevel_t CHUNK_LEVEL_512K =  (ROOT_CHUNK_LEVEL + 5);\n+static const chunklevel_t CHUNK_LEVEL_256K =  (ROOT_CHUNK_LEVEL + 6);\n+static const chunklevel_t CHUNK_LEVEL_128K =  (ROOT_CHUNK_LEVEL + 7);\n+static const chunklevel_t CHUNK_LEVEL_64K =   (ROOT_CHUNK_LEVEL + 8);\n+static const chunklevel_t CHUNK_LEVEL_32K =   (ROOT_CHUNK_LEVEL + 9);\n+static const chunklevel_t CHUNK_LEVEL_16K =   (ROOT_CHUNK_LEVEL + 10);\n+static const chunklevel_t CHUNK_LEVEL_8K =    (ROOT_CHUNK_LEVEL + 11);\n+static const chunklevel_t CHUNK_LEVEL_4K =    (ROOT_CHUNK_LEVEL + 12);\n+static const chunklevel_t CHUNK_LEVEL_2K =    (ROOT_CHUNK_LEVEL + 13);\n+static const chunklevel_t CHUNK_LEVEL_1K =    (ROOT_CHUNK_LEVEL + 14);\n@@ -119,1 +115,1 @@\n-STATIC_ASSERT(CHUNK_LEVEL_4M == LOWEST_CHUNK_LEVEL);\n+STATIC_ASSERT(CHUNK_LEVEL_16M == LOWEST_CHUNK_LEVEL);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunklevel.hpp","additions":25,"deletions":29,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-      chunklevel::MAX_CHUNK_WORD_SIZE * NOT_LP64(2) LP64_ONLY(16); \/\/ 8MB (32-bit) \/ 64MB (64-bit)\n+      chunklevel::MAX_CHUNK_WORD_SIZE * NOT_LP64(1) LP64_ONLY(4); \/\/ 16MB (32-bit) \/ 64MB (64-bit)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  STATIC_ASSERT(LOWEST_CHUNK_LEVEL == CHUNK_LEVEL_4M);\n+  STATIC_ASSERT(LOWEST_CHUNK_LEVEL == CHUNK_LEVEL_16M);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkManager_stress.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,16 +65,44 @@\n-  const size_t commit_limit_words = 1 * M;\n-  ChunkGtestContext context(commit_limit_words);\n-  Metachunk* c = NULL;\n-\n-  for (chunklevel_t pref_lvl = LOWEST_CHUNK_LEVEL; pref_lvl <= HIGHEST_CHUNK_LEVEL; pref_lvl++) {\n-\n-    for (chunklevel_t max_lvl = pref_lvl; max_lvl <= HIGHEST_CHUNK_LEVEL; max_lvl++) {\n-\n-      for (size_t min_committed_words = Settings::commit_granule_words();\n-           min_committed_words <= word_size_for_level(max_lvl); min_committed_words *= 2) {\n-\n-        if (min_committed_words <= commit_limit_words) {\n-          context.alloc_chunk_expect_success(&c, pref_lvl, max_lvl, min_committed_words);\n-          context.return_chunk(c);\n-        } else {\n-          context.alloc_chunk_expect_failure(pref_lvl, max_lvl, min_committed_words);\n+  \/\/ A commit limit that is smaller than the largest possible chunk size.\n+\n+  \/\/ Here we test different combinations of commit limit, preferred and highest chunk level, and min_committed_size.\n+\n+  for (size_t commit_limit_words = Settings::commit_granule_words();\n+       commit_limit_words < MAX_CHUNK_WORD_SIZE * 2; commit_limit_words *= 2) {\n+\n+    ChunkGtestContext context(commit_limit_words);\n+    Metachunk* c = NULL;\n+\n+    for (chunklevel_t pref_lvl = LOWEST_CHUNK_LEVEL; pref_lvl <= HIGHEST_CHUNK_LEVEL; pref_lvl++) {\n+\n+      for (chunklevel_t max_lvl = pref_lvl; max_lvl <= HIGHEST_CHUNK_LEVEL; max_lvl++) {\n+\n+        for (size_t min_committed_words = Settings::commit_granule_words();\n+             min_committed_words <= word_size_for_level(max_lvl); min_committed_words *= 2) {\n+\n+          \/\/ When should commit work? As long as min_committed_words is smaller than commit_limit_words.\n+          bool commit_should_work = min_committed_words <= commit_limit_words;\n+\n+          \/\/ Exception: MetaspaceReclaimPolicy=none. Here, chunks are fully committed from the get go and\n+          \/\/ min_committed_words is effectively ignored. So commit would fail if the chunk is larger than\n+          \/\/ the commit limit. Unfortunately, the chunk size is difficult to predict (it will be between\n+          \/\/ [pref_lvl, max_lvl]. To make matters simple, we skip the test if we don't know the level for\n+          \/\/ sure.\n+          if (Settings::new_chunks_are_fully_committed()) {\n+            if (pref_lvl == max_lvl) {\n+              commit_should_work = word_size_for_level(max_lvl) <= commit_limit_words;\n+            } else {\n+              continue;\n+            }\n+          }\n+\n+          \/\/ printf(\"commit_limit: \" SIZE_FORMAT \", min_committed_words: \" SIZE_FORMAT\n+          \/\/       \", max chunk level: \" CHKLVL_FORMAT \", preferred chunk level: \" CHKLVL_FORMAT \", should work: %d\\n\",\n+          \/\/       commit_limit_words, min_committed_words, max_lvl, pref_lvl, commit_should_work);\n+          \/\/ fflush(stdout);\n+\n+          if (commit_should_work) {\n+            context.alloc_chunk_expect_success(&c, pref_lvl, max_lvl, min_committed_words);\n+            context.return_chunk(c);\n+          } else {\n+            context.alloc_chunk_expect_failure(pref_lvl, max_lvl, min_committed_words);\n+          }\n@@ -82,1 +110,0 @@\n-\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metachunk.cpp","additions":44,"deletions":17,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-  ASSERT_EQ(Settings::virtual_space_node_default_word_size(),\n-            metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * NOT_LP64(2) LP64_ONLY(16));\n+  ASSERT_EQ(Settings::virtual_space_node_default_word_size() * BytesPerWord, NOT_LP64(16) LP64_ONLY(64) * M);\n@@ -59,7 +58,14 @@\n-  const size_t sz = Metaspace::max_allocation_word_size();\n-  ClassLoaderData* cld = ClassLoaderData::the_null_class_loader_data();\n-  MetaWord* p = cld->metaspace_non_null()->allocate(sz, Metaspace::NonClassType);\n-  ASSERT_NOT_NULL(p);\n-  \/\/ And also, successfully deallocate it.\n-  cld->metaspace_non_null()->deallocate(p, sz, false);\n-\n+  for (int i = 0; i < 2; i ++) {\n+    const bool in_class_space = (i == 0);\n+    const Metaspace::MetadataType mdType = in_class_space ? Metaspace::ClassType : Metaspace::NonClassType;\n+    const size_t sz = Metaspace::max_allocation_word_size();\n+    ClassLoaderData* cld = ClassLoaderData::the_null_class_loader_data();\n+    MetaWord* p = cld->metaspace_non_null()->allocate(sz, mdType);\n+    if (p == nullptr) {\n+      \/\/ Have we run into the GC threshold?\n+      p = cld->metaspace_non_null()->expand_and_allocate(sz, mdType);\n+      ASSERT_NOT_NULL(p);\n+    }\n+    \/\/ And also, successfully deallocate it.\n+    cld->metaspace_non_null()->deallocate(p, sz, in_class_space);\n+  }\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspace_misc.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  const size_t word_size = metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 10;\n+  const size_t word_size = metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 3;\n@@ -583,2 +583,2 @@\n-    VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 100,\n-        metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 100);\n+    VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 25,\n+        metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 25);\n@@ -588,2 +588,2 @@\n-    VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 100,\n-        metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 100);\n+    VirtualSpaceNodeTest test(metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 25,\n+        metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 25);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_virtualspacenode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-        \/\/ (Note: ccs size shall be rounded up to the minimum size of 4m since metaspace reservations\n-        \/\/  are done in a 4m granularity. Note that this is **reserved** size and does not affect rss.\n+        \/\/ (Note: ccs size are rounded up to the next larger root chunk boundary (16m).\n+        \/\/ Note that this is **reserved** size and does not affect rss.\n@@ -75,1 +75,1 @@\n-        output.shouldMatch(\"Compressed class space.*4194304\")\n+        output.shouldMatch(\"Compressed class space.*16777216\")\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    final static long rootChunkWordSize = 512 * 1024;\n+    final static long rootChunkWordSize = 2048 * 1024;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/Settings.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-            long reserveLimit = (i == 2) ? 1024 * 1024 : 0;\n+            long reserveLimit = (i == 2) ? Settings.rootChunkWordSize * 2 : 0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,2 +177,1 @@\n-            \/\/  (512K on 64bit, 1M on 32bit)\n-            long reserveLimit = (i == 2) ? 1024 * 1024 : 0;\n+            long reserveLimit = (i == 2) ? Settings.rootChunkWordSize * 2 : 0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}