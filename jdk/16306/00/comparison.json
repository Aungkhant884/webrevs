{"files":[{"patch":"@@ -3130,0 +3130,3 @@\n+    fprintf(fp_cpp, \"  \/\/ Do not increment node index counter, since node reuses my index\\n\");\n+    fprintf(fp_cpp, \"  Compile* C = Compile::current();\\n\");\n+    fprintf(fp_cpp, \"  C->set_unique(C->unique() - 1);\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.regalloc;\n+\n+\/**\n+ * @test\n+ * @bug 8317507\n+ * @summary Test that C2's PhaseRegAlloc::_node_regs (a post-register-allocation\n+ *          mapping from machine nodes to assigned registers) does not overflow\n+ *          in the face of a program with a high-density of CISC spilling\n+ *          candidate nodes.\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.regalloc.TestNodeRegArrayOverflow::test\n+                     -XX:CompileCommand=dontinline,compiler.regalloc.TestNodeRegArrayOverflow::dontInline\n+                     compiler.regalloc.TestNodeRegArrayOverflow\n+ *\/\n+\n+public class TestNodeRegArrayOverflow {\n+\n+    static int dontInline() {\n+        return 0;\n+    }\n+\n+    static float test(float inc) {\n+        int i = 0, j = 0;\n+        \/\/ This non-inlined method call causes 'inc' to be spilled.\n+        float f = dontInline();\n+        \/\/ This two-level reduction loop is unrolled 512 times, which is\n+        \/\/ requested by the SLP-specific unrolling analysis, but not vectorized.\n+        \/\/ Because 'inc' is spilled, each of the unrolled AddF nodes is\n+        \/\/ CISC-spill converted (PhaseChaitin::fixup_spills()). Before the fix,\n+        \/\/ this causes the unique node index counter (Compile::_unique) to grow\n+        \/\/ beyond the size of the node register array\n+        \/\/ (PhaseRegAlloc::_node_regs), and leads to overflow when accessed for\n+        \/\/ nodes that are created later (e.g. during the peephole phase).\n+        while (i++ < 128) {\n+            for (j = 0; j < 16; j++) {\n+                f += inc;\n+            }\n+        }\n+        return f;\n+    }\n+\n+    public static void main(String[] args) {\n+        test(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/regalloc\/TestNodeRegArrayOverflow.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}