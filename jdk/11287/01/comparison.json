{"files":[{"patch":"@@ -160,1 +160,1 @@\n-function analyzeMatch(matcher, input, startOfName, category) {\n+function findMatch(matcher, input, startOfName, endOfName) {\n@@ -164,1 +164,5 @@\n-    while (!match && from > 1) {\n+    \/\/ Expand search area until we get a valid result or reach the beginning of the string\n+    while (!match || match.index + match[0].length < startOfName || endOfName < match.index) {\n+        if (from === 0) {\n+            return NO_MATCH;\n+        }\n@@ -169,3 +173,0 @@\n-    if (!match) {\n-        return NO_MATCH;\n-    }\n@@ -174,10 +175,0 @@\n-    var leftParen = input.indexOf(\"(\");\n-    \/\/ exclude peripheral matches\n-    if (category !== \"modules\" && category !== \"searchTags\") {\n-        if (leftParen > -1 && leftParen < match.index) {\n-            return NO_MATCH;\n-        } else if (startOfName - 1 >= matchEnd) {\n-            return NO_MATCH;\n-        }\n-    }\n-    var endOfName = leftParen > -1 ? leftParen : input.length;\n@@ -223,1 +214,0 @@\n-        category: category,\n@@ -288,1 +278,3 @@\n-            var m = analyzeMatch(matcher.plainMatcher, input, startOfName, category);\n+            var endOfName = category === \"members\" && input.indexOf(\"(\", startOfName) > -1\n+                ? input.indexOf(\"(\", startOfName) : input.length;\n+            var m = findMatch(matcher.plainMatcher, input, startOfName, endOfName);\n@@ -290,1 +282,1 @@\n-                m = analyzeMatch(matcher.camelCaseMatcher, input, startOfName, category);\n+                m = findMatch(matcher.camelCaseMatcher, input, startOfName, endOfName);\n@@ -295,0 +287,1 @@\n+                m.category = category;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/search.js.template","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8178982 8220497 8210683 8241982\n+ * @bug 8178982 8220497 8210683 8241982 8297216\n@@ -63,0 +63,3 @@\n+        \/\/ For installing and using GraalVM JS on stock JDK see\n+        \/\/ https:\/\/github.com\/oracle\/graaljs\/blob\/master\/docs\/user\/RunOnJDK.md\n+        \/\/ and https:\/\/github.com\/graalvm\/graal-js-jdk11-maven-demo\n@@ -69,1 +72,1 @@\n-        \/\/ For GraalJS set Nashorn compatibility mode via Bindings,\n+        \/\/ Set Nashorn compatibility mode via Bindings for use with GraalVM JS,\n@@ -337,0 +340,22 @@\n+    @Test\n+    public void testChannelSearch() throws ScriptException, IOException, NoSuchMethodException {\n+        javadoc(\"-d\", \"out-channel\",\n+                \"-Xdoclint:none\",\n+                \"-use\",\n+                \"-sourcepath\", testSrc,\n+                \"channels\");\n+        checkExit(Exit.OK);\n+\n+        Invocable inv = getEngine();\n+\n+        checkSearch(inv, \"FileChannel\", List.of(\"channels.FileChannel\", \"channels.FileChannel.Map\",\n+                \"channels.FileChannel.FileChannel()\"));\n+        checkSearch(inv, \"FileChannel.\", List.of(\"channels.FileChannel.Map\",\n+                \"channels.FileChannel.FileChannel()\", \"channels.FileChannel.map(FileChannel.Map, int)\"));\n+        checkSearch(inv, \"filechannel.M\", List.of(\"channels.FileChannel.Map\",\n+                \"channels.FileChannel.map(FileChannel.Map, int)\"));\n+        checkSearch(inv, \"FileChannel.map\", List.of(\"channels.FileChannel.Map\",\n+                \"channels.FileChannel.map(FileChannel.Map, int)\"));\n+        checkSearch(inv, \"FileChannel.map(\", List.of(\"channels.FileChannel.map(FileChannel.Map, int)\"));\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearchScript\/TestSearchScript.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}