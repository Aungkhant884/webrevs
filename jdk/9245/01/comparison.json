{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,5 @@\n+  MTL_OP_FILL_PARALLELOGRAM,\n+  MTL_OP_FILL_RECT,\n+  MTL_OP_DRAW_LINE,\n+  MTL_OP_DRAW_RECT,\n+  MTL_OP_DRAW_PARALLELOGRAM,\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderQueue.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,12 @@\n+bool isDrawOp (jint op) {\n+     switch(op) {\n+        case MTL_OP_DRAW_LINE:\n+        case MTL_OP_DRAW_RECT:\n+        case MTL_OP_DRAW_PARALLELOGRAM:\n+        case MTL_OP_FILL_RECT:\n+        case MTL_OP_FILL_PARALLELOGRAM:\n+             return true;\n+        default: return false;\n+     }\n+}\n+\n@@ -58,0 +70,6 @@\n+    if (isDrawOp(mtlPreviousOp) && !isDrawOp(op)) {\n+        \/\/ submit the vertex batch\n+        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+        mtlPreviousOp = op;\n+    }\n+\n@@ -131,1 +149,1 @@\n-                    CHECK_PREVIOUS_OP(MTL_OP_OTHER);\n+                    CHECK_PREVIOUS_OP(MTL_OP_DRAW_LINE);\n@@ -147,1 +165,1 @@\n-                    CHECK_PREVIOUS_OP(MTL_OP_OTHER);\n+                    CHECK_PREVIOUS_OP(MTL_OP_DRAW_RECT);\n@@ -150,0 +168,1 @@\n+\n@@ -231,1 +250,1 @@\n-                    CHECK_PREVIOUS_OP(MTL_OP_OTHER);\n+                    CHECK_PREVIOUS_OP(MTL_OP_DRAW_PARALLELOGRAM);\n@@ -279,1 +298,1 @@\n-                    CHECK_PREVIOUS_OP(MTL_OP_OTHER);\n+                    CHECK_PREVIOUS_OP(MTL_OP_FILL_RECT);\n@@ -311,1 +330,1 @@\n-                    CHECK_PREVIOUS_OP(MTL_OP_OTHER);\n+                    CHECK_PREVIOUS_OP(MTL_OP_FILL_PARALLELOGRAM);\n@@ -585,0 +604,1 @@\n+                        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n@@ -612,0 +632,1 @@\n+                                MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n@@ -881,0 +902,2 @@\n+            MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+\n@@ -926,0 +949,3 @@\n+\n+    MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderQueue.m","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,4 @@\n+void MTLRenderer_AddVertexToBatch(float x, float y);\n+void MTLRenderer_SubmitVertexBatch(MTLContext* mtlc, BMTLSDOps* dstOps);\n+void MTLRenderer_SetPrimitiveType(MTLPrimitiveType type);\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,89 @@\n+\/**\n+ * The max size of the vertex batch.\n+ *\n+ * Note:\n+ * This is the max number of vertices (of struct Vertex - 8 bytes)\n+ * that can be accommodated in 4KB.\n+ *\n+ * [MTLRenderCommandEncoder setVertexBytes] expects the data size\n+ * to be less than or equal to 4KB.\n+ *\/\n+static const int VERTEX_BATCH_SIZE = 510;\n+\n+static const int MAX_NO_OF_BATCHES = 20;\n+\n+struct primDetail {\n+    MTLPrimitiveType type;\n+    int vertexStart;\n+    int vertexEnd;\n+};\n+\n+static struct Vertex vertexBatch[VERTEX_BATCH_SIZE];\n+static struct primDetail PrimitivesBatch[MAX_NO_OF_BATCHES];\n+static int currentIndexInBatch = 0;\n+static MTLPrimitiveType currentMTLPrimitiveType = MTLPrimitiveTypeTriangleStrip; \/\/ invalid type that we do not use in this renderer\n+static int currentBatchNo = -1;\n+\n+\n+void MTLRenderer_SetPrimitiveType(MTLPrimitiveType type) {\n+    if (type != currentMTLPrimitiveType) {\n+\n+        if (currentBatchNo != -1) {\n+            \/\/ close the current batch\n+            PrimitivesBatch[currentBatchNo].vertexEnd = currentIndexInBatch - 1;\n+        }\n+\n+        \/\/ Start a new batch\n+        currentBatchNo++;\n+        PrimitivesBatch[currentBatchNo].type = type;\n+        PrimitivesBatch[currentBatchNo].vertexStart = currentIndexInBatch;\n+        PrimitivesBatch[currentBatchNo].vertexEnd = currentIndexInBatch;\n+        J2dRlsTraceLn1(J2D_TRACE_ERROR, \"MTLRenderer_SetPrimitiveType: starting a new batch : batch %d\", currentBatchNo);\n+\n+        currentMTLPrimitiveType = type;\n+    }\n+}\n+\n+inline void MTLRenderer_AddVertexToBatch(float x, float y)\n+{\n+   vertexBatch[currentIndexInBatch].position[0] = x;\n+   vertexBatch[currentIndexInBatch].position[1] = y;\n+\n+   currentIndexInBatch++;\n+}\n+\n+void MTLRenderer_SubmitVertexBatch(MTLContext *mtlc, BMTLSDOps * dstOps)\n+{\n+    if (currentIndexInBatch == 0) return;\n+    if (currentBatchNo == -1) return;\n+\n+    \/\/ close the current batch\n+    PrimitivesBatch[currentBatchNo].vertexEnd = currentIndexInBatch - 1;\n+\n+    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n+\n+    if (mtlEncoder == nil) {\n+        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_SubmitVertexBatch: error creating MTLRenderCommandEncoder.\");\n+        return;\n+    }\n+\n+    [mtlEncoder setVertexBytes:vertexBatch length:currentIndexInBatch * sizeof(struct Vertex) atIndex:MeshVertexBuffer];\n+\n+    \/\/ Iterate through PrimitivesBatch array\n+    for (int i = 0; i <= currentBatchNo; i++) {\n+        int numVertices = PrimitivesBatch[i].vertexEnd - PrimitivesBatch[i].vertexStart + 1;\n+        J2dRlsTraceLn2(J2D_TRACE_ERROR, \"MTLRenderer_SubmitVertexBatch: total vertices in batch %d = %d\", i, numVertices);\n+        [mtlEncoder drawPrimitives: PrimitivesBatch[i].type\n+                       vertexStart: PrimitivesBatch[i].vertexStart\n+                       vertexCount: numVertices];\n+    }\n+\n+    \/\/ Reset the index\n+    currentIndexInBatch = 0;\n+\n+    \/\/ Reset the batches\n+    currentBatchNo = -1;\n+\n+     \/\/ Reset to type that we do not use in this renderer\n+    currentMTLPrimitiveType = MTLPrimitiveTypeTriangleStrip;\n+}\n@@ -68,3 +157,8 @@\n-    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n-    if (mtlEncoder == nil)\n-        return;\n+    \/\/ Make sure we have space for 2 more vertices in the batch\n+    if (((currentIndexInBatch + 2) > VERTEX_BATCH_SIZE) ||\n+         (currentBatchNo == (MAX_NO_OF_BATCHES - 1))) {\n+        \/\/ encode the vertex batch\n+        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+    }\n+\n+    MTLRenderer_SetPrimitiveType(MTLPrimitiveTypeLine);\n@@ -73,1 +167,0 @@\n-    struct Vertex verts[2];\n@@ -83,5 +176,2 @@\n-\n-        verts[0].position[0] = fx1 + 0.2f;\n-        verts[0].position[1] = fy;\n-        verts[1].position[0] = fx2 + 1.2f;\n-        verts[1].position[1] = fy;\n+        MTLRenderer_AddVertexToBatch(fx1 + 0.2f, fy);\n+        MTLRenderer_AddVertexToBatch(fx2 + 1.2f, fy);\n@@ -97,5 +187,2 @@\n-\n-        verts[0].position[0] = fx;\n-        verts[0].position[1] = fy1 + 0.2f;\n-        verts[1].position[0] = fx;\n-        verts[1].position[1] = fy2 + 1.2f;\n+        MTLRenderer_AddVertexToBatch(fx, fy1 + 0.2f);\n+        MTLRenderer_AddVertexToBatch(fx, fy2 + 1.2f);\n@@ -124,5 +211,0 @@\n-        verts[0].position[0] = fx1;\n-        verts[0].position[1] = fy1;\n-        verts[1].position[0] = fx2;\n-        verts[1].position[1] = fy2;\n-    }\n@@ -130,2 +212,3 @@\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0 vertexCount:2];\n+        MTLRenderer_AddVertexToBatch(fx1, fy1);\n+        MTLRenderer_AddVertexToBatch(fx2, fy2);\n+    }\n@@ -165,4 +248,10 @@\n-    \/\/ TODO: use DrawParallelogram(x, y, w, h, lw=1, lh=1)\n-    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n-    if (mtlEncoder == nil)\n-        return;\n+    \/\/ Make sure we have space for 8 more vertices in the batch\n+    if ( ((currentIndexInBatch + 8) > VERTEX_BATCH_SIZE) ||\n+         (currentBatchNo == (MAX_NO_OF_BATCHES - 1))) {\n+\n+        \/\/ encode the vertex batch\n+        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+    }\n+\n+    MTLRenderer_SetPrimitiveType(MTLPrimitiveTypeLine);\n+\n@@ -172,1 +261,0 @@\n-    const int verticesCount = 5;\n@@ -177,9 +265,12 @@\n-    struct Vertex vertices[5] = {\n-            {{fx, fy}},\n-            {{fx + fw, fy}},\n-            {{fx + fw, fy + fh}},\n-            {{fx, fy + fh}},\n-            {{fx, fy}},\n-    };\n-    [mtlEncoder setVertexBytes:vertices length:sizeof(vertices) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeLineStrip vertexStart:0 vertexCount:verticesCount];\n+\n+    MTLRenderer_AddVertexToBatch(fx, fy);\n+    MTLRenderer_AddVertexToBatch(fx+fw, fy);\n+\n+    MTLRenderer_AddVertexToBatch(fx+fw, fy);\n+    MTLRenderer_AddVertexToBatch(fx+fw, fy+fh);\n+\n+    MTLRenderer_AddVertexToBatch(fx+fw, fy+fh);\n+    MTLRenderer_AddVertexToBatch(fx, fy+fh);\n+\n+    MTLRenderer_AddVertexToBatch(fx, fy+fh);\n+    MTLRenderer_AddVertexToBatch(fx, fy);\n@@ -418,6 +509,6 @@\n-    struct Vertex verts[QUAD_VERTEX_COUNT] = {\n-        { {x, y}},\n-        { {x, y+h}},\n-        { {x+w, y}},\n-        { {x+w, y+h}\n-    }};\n+    \/\/ Make sure we have space for 6 more vertices in the batch\n+    if ( ((currentIndexInBatch + 6) > VERTEX_BATCH_SIZE) ||\n+         (currentBatchNo == (MAX_NO_OF_BATCHES - 1))) {\n+        \/\/ encode the vertex batch\n+        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+    }\n@@ -425,0 +516,1 @@\n+    MTLRenderer_SetPrimitiveType(MTLPrimitiveTypeTriangle);\n@@ -426,2 +518,0 @@\n-    id<MTLTexture> dest = dstOps->pTexture;\n-    J2dTraceLn5(J2D_TRACE_INFO, \"MTLRenderer_FillRect (x=%d y=%d w=%d h=%d), dst tex=%p\", x, y, w, h, dest);\n@@ -429,4 +519,3 @@\n-    \/\/ Encode render command.\n-    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n-    if (mtlEncoder == nil)\n-        return;\n+    MTLRenderer_AddVertexToBatch(x, y);\n+    MTLRenderer_AddVertexToBatch(x, y+h);\n+    MTLRenderer_AddVertexToBatch(x+w, y);\n@@ -434,2 +523,3 @@\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeTriangleStrip vertexStart:0 vertexCount: QUAD_VERTEX_COUNT];\n+    MTLRenderer_AddVertexToBatch(x, y+h);\n+    MTLRenderer_AddVertexToBatch(x+w, y);\n+    MTLRenderer_AddVertexToBatch(x+w, y+h);\n@@ -556,6 +646,6 @@\n-    struct Vertex verts[QUAD_VERTEX_COUNT] = {\n-            { {fx11, fy11}},\n-            { {fx11+dx21, fy11+dy21}},\n-            { {fx11+dx12, fy11+dy12}},\n-            { {fx11 + dx21 + dx12, fy11+ dy21 + dy12}\n-        }};\n+    \/\/ Make sure we have space for 6 more vertices in the batch\n+    if ( ((currentIndexInBatch + 6) > VERTEX_BATCH_SIZE) ||\n+         (currentBatchNo == (MAX_NO_OF_BATCHES - 1))) {\n+        \/\/ encode the vertex batch\n+        MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+    }\n@@ -563,2 +653,1 @@\n-    \/\/ Encode render command.\n-    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];;\n+    MTLRenderer_SetPrimitiveType(MTLPrimitiveTypeTriangle);\n@@ -566,4 +655,3 @@\n-    if (mtlEncoder == nil) {\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_FillParallelogram: error creating MTLRenderCommandEncoder.\");\n-        return;\n-    }\n+    MTLRenderer_AddVertexToBatch(fx11, fy11);\n+    MTLRenderer_AddVertexToBatch(fx11+dx21, fy11+dy21);\n+    MTLRenderer_AddVertexToBatch(fx11 + dx21 + dx12, fy11+ dy21 + dy12);\n@@ -571,2 +659,3 @@\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeTriangleStrip vertexStart:0 vertexCount: QUAD_VERTEX_COUNT];\n+    MTLRenderer_AddVertexToBatch(fx11 + dx21 + dx12, fy11+ dy21 + dy12);\n+    MTLRenderer_AddVertexToBatch(fx11 + dx12, fy11+dy12);\n+    MTLRenderer_AddVertexToBatch(fx11, fy11);\n@@ -634,0 +723,1 @@\n+\n@@ -635,2 +725,8 @@\n-        struct Vertex vertexList[TOTAL_VERTICES];\n-        int i = 0;\n+        \/\/ Make sure we have space for 24 more vertices in the batch\n+        if ( ((currentIndexInBatch + TOTAL_VERTICES) > VERTEX_BATCH_SIZE) ||\n+             (currentBatchNo == (MAX_NO_OF_BATCHES - 1))) {\n+            \/\/ encode the vertex batch\n+            MTLRenderer_SubmitVertexBatch(mtlc, dstOps);\n+        }\n+        MTLRenderer_SetPrimitiveType(MTLPrimitiveTypeTriangle);\n+\n@@ -643,3 +739,3 @@\n-        fillVertex(vertexList + (i++), fx11, fy11);\n-        fillVertex(vertexList + (i++), fx11 + dx21, fy11 + dy21);\n-        fillVertex(vertexList + (i++), fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21, fy11 + dy21);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n@@ -647,3 +743,3 @@\n-        fillVertex(vertexList + (i++), fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n-        fillVertex(vertexList + (i++), fx11 + ldx12, fy11 + ldy12);\n-        fillVertex(vertexList + (i++), fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx12, fy11 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n@@ -655,3 +751,3 @@\n-        fillVertex(vertexList + (i++), fx11, fy11);\n-        fillVertex(vertexList + (i++), fx11 + ldx21, fy11 + ldy21);\n-        fillVertex(vertexList + (i++), fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21, fy11 + ldy21);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n@@ -659,3 +755,3 @@\n-        fillVertex(vertexList + (i++), fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n-        fillVertex(vertexList + (i++), fx11 + dx12, fy11 + dy12);\n-        fillVertex(vertexList + (i++), fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx12, fy11 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n@@ -667,3 +763,3 @@\n-        fillVertex(vertexList + (i++), fx11, fy11);\n-        fillVertex(vertexList + (i++), fx11 + dx21, fy11 + dy21);\n-        fillVertex(vertexList + (i++), fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21, fy11 + dy21);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n@@ -671,3 +767,3 @@\n-        fillVertex(vertexList + (i++), fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n-        fillVertex(vertexList + (i++), fx11 + ldx12, fy11 + ldy12);\n-        fillVertex(vertexList + (i++), fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx21 + ldx12, fy11 + dy21 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx12, fy11 + ldy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n@@ -679,3 +775,3 @@\n-        fillVertex(vertexList + (i++), fx11, fy11);\n-        fillVertex(vertexList + (i++), fx11 + ldx21, fy11 + ldy21);\n-        fillVertex(vertexList + (i++), fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21, fy11 + ldy21);\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n@@ -683,6 +779,3 @@\n-        fillVertex(vertexList + (i++), fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n-        fillVertex(vertexList + (i++), fx11 + dx12, fy11 + dy12);\n-        fillVertex(vertexList + (i++), fx11, fy11);\n-\n-        \/\/ Encode render command.\n-        id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n+        MTLRenderer_AddVertexToBatch(fx11 + ldx21 + dx12, fy11 + ldy21 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11 + dx12, fy11 + dy12);\n+        MTLRenderer_AddVertexToBatch(fx11, fy11);\n@@ -690,7 +783,0 @@\n-        if (mtlEncoder == nil) {\n-            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_DrawParallelogram: error creating MTLRenderCommandEncoder.\");\n-            return;\n-        }\n-\n-        [mtlEncoder setVertexBytes:vertexList length:sizeof(vertexList) atIndex:MeshVertexBuffer];\n-        [mtlEncoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:TOTAL_VERTICES];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.m","additions":186,"deletions":100,"binary":false,"changes":286,"status":"modified"}]}