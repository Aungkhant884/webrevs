{"files":[{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.cpu.features ~= \".*avx.*\" | vm.cpu.features ~= \".*sve.*\"\n@@ -47,0 +46,30 @@\n+    long[] gold10 = new long[RANGE];\n+    long[] gold11 = new long[RANGE];\n+    long[] gold12 = new long[RANGE];\n+    long[] gold13 = new long[RANGE];\n+\n+    short[] gold20 = new short[RANGE];\n+    short[] gold21 = new short[RANGE];\n+    short[] gold22 = new short[RANGE];\n+    short[] gold23 = new short[RANGE];\n+\n+    byte[] gold30 = new byte[RANGE];\n+    byte[] gold31 = new byte[RANGE];\n+    byte[] gold32 = new byte[RANGE];\n+    byte[] gold33 = new byte[RANGE];\n+\n+    char[] gold40 = new char[RANGE];\n+    char[] gold41 = new char[RANGE];\n+    char[] gold42 = new char[RANGE];\n+    char[] gold43 = new char[RANGE];\n+\n+    float[] gold50 = new float[RANGE];\n+    float[] gold51 = new float[RANGE];\n+    float[] gold52 = new float[RANGE];\n+    float[] gold53 = new float[RANGE];\n+\n+    double[] gold60 = new double[RANGE];\n+    double[] gold61 = new double[RANGE];\n+    double[] gold62 = new double[RANGE];\n+    double[] gold63 = new double[RANGE];\n+\n@@ -70,0 +99,60 @@\n+\n+        \/\/ long\n+        init(gold10);\n+        test10(gold10);\n+        init(gold11);\n+        test11(gold11);\n+        init(gold12);\n+        test12(gold12);\n+        init(gold13);\n+        test13(gold13);\n+\n+        \/\/ short\n+        init(gold20);\n+        test20(gold20);\n+        init(gold21);\n+        test21(gold21);\n+        init(gold22);\n+        test22(gold22);\n+        init(gold23);\n+        test23(gold23);\n+\n+        \/\/ byte\n+        init(gold30);\n+        test30(gold30);\n+        init(gold31);\n+        test31(gold31);\n+        init(gold32);\n+        test32(gold32);\n+        init(gold33);\n+        test33(gold33);\n+\n+        \/\/ char\n+        init(gold40);\n+        test40(gold40);\n+        init(gold41);\n+        test41(gold41);\n+        init(gold42);\n+        test42(gold42);\n+        init(gold43);\n+        test43(gold43);\n+\n+        \/\/ float\n+        init(gold50);\n+        test50(gold50);\n+        init(gold51);\n+        test51(gold51);\n+        init(gold52);\n+        test52(gold52);\n+        init(gold53);\n+        test53(gold53);\n+\n+        \/\/ double\n+        init(gold60);\n+        test60(gold60);\n+        init(gold61);\n+        test61(gold61);\n+        init(gold62);\n+        test62(gold62);\n+        init(gold63);\n+        test63(gold63);\n@@ -126,2 +215,2 @@\n-    @IR(applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"}, counts = {IRNode.POPULATE_INDEX, \"> 0\"})\n-    @IR(applyIfCPUFeatureOr = {\"avx2\", \"true\", \"sve\", \"true\"}, counts = {IRNode.STORE_VECTOR, \"> 0\"})\n+    @IR(counts = {IRNode.POPULATE_INDEX, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n@@ -136,3 +225,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\"})\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"})\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -147,5 +235,2 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\"})\n-    @IR(counts = {IRNode.REPLICATE_I, \"> 0\"})\n-    @IR(counts = {IRNode.ADD_VI, \"> 0\"})\n-    @IR(counts = {IRNode.MUL_VI, \"> 0\"})\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"})\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.REPLICATE_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -160,2 +245,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"= 0\"})\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"})\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n@@ -171,2 +255,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"= 0\"})\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"})\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n@@ -183,2 +266,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"= 0\"})\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"})\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n@@ -194,0 +276,477 @@\n+    \/\/ ------------------------- Long -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test10(long[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test11(long[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test12(long[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"false\", \"avx2\", \"true\", \"asimd\", \"true\"})\n+    static void test13(long[] data) {\n+       \/\/ 128-bit vectors -> can vectorize because only 2 elements\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test10\")\n+    @Warmup(100)\n+    public void runTest10() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        test10(data);\n+        verify(\"test10\", data, gold10);\n+    }\n+\n+    @Run(test = \"test11\")\n+    @Warmup(100)\n+    public void runTest11() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        test11(data);\n+        verify(\"test11\", data, gold11);\n+    }\n+\n+    @Run(test = \"test12\")\n+    @Warmup(100)\n+    public void runTest12() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        test12(data);\n+        verify(\"test12\", data, gold12);\n+    }\n+\n+    @Run(test = \"test13\")\n+    @Warmup(100)\n+    public void runTest13() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        test13(data);\n+        verify(\"test13\", data, gold13);\n+    }\n+\n+\n+    \/\/ ------------------------- Short -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test20(short[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test21(short[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test22(short[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test23(short[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test20\")\n+    @Warmup(100)\n+    public void runTest20() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        test20(data);\n+        verify(\"test20\", data, gold20);\n+    }\n+\n+    @Run(test = \"test21\")\n+    @Warmup(100)\n+    public void runTest21() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        test21(data);\n+        verify(\"test21\", data, gold21);\n+    }\n+\n+    @Run(test = \"test22\")\n+    @Warmup(100)\n+    public void runTest22() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        test22(data);\n+        verify(\"test22\", data, gold22);\n+    }\n+\n+    @Run(test = \"test23\")\n+    @Warmup(100)\n+    public void runTest23() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        test23(data);\n+        verify(\"test23\", data, gold23);\n+    }\n+\n+\n+    \/\/ ------------------------- Byte -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test30(byte[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test31(byte[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test32(byte[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test33(byte[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test30\")\n+    @Warmup(100)\n+    public void runTest30() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        test30(data);\n+        verify(\"test30\", data, gold30);\n+    }\n+\n+    @Run(test = \"test31\")\n+    @Warmup(100)\n+    public void runTest31() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        test31(data);\n+        verify(\"test31\", data, gold31);\n+    }\n+\n+    @Run(test = \"test32\")\n+    @Warmup(100)\n+    public void runTest32() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        test32(data);\n+        verify(\"test32\", data, gold32);\n+    }\n+\n+    @Run(test = \"test33\")\n+    @Warmup(100)\n+    public void runTest33() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        test33(data);\n+        verify(\"test33\", data, gold33);\n+    }\n+\n+\n+    \/\/ ------------------------- Char -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test40(char[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test41(char[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test42(char[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test43(char[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test40\")\n+    @Warmup(100)\n+    public void runTest40() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        test40(data);\n+        verify(\"test40\", data, gold40);\n+    }\n+\n+    @Run(test = \"test41\")\n+    @Warmup(100)\n+    public void runTest41() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        test41(data);\n+        verify(\"test41\", data, gold41);\n+    }\n+\n+    @Run(test = \"test42\")\n+    @Warmup(100)\n+    public void runTest42() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        test42(data);\n+        verify(\"test42\", data, gold42);\n+    }\n+\n+    @Run(test = \"test43\")\n+    @Warmup(100)\n+    public void runTest43() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        test43(data);\n+        verify(\"test43\", data, gold43);\n+    }\n+\n+    \/\/ ------------------------- Float -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test50(float[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test51(float[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test52(float[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test53(float[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test50\")\n+    @Warmup(100)\n+    public void runTest50() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        test50(data);\n+        verify(\"test50\", data, gold50);\n+    }\n+\n+    @Run(test = \"test51\")\n+    @Warmup(100)\n+    public void runTest51() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        test51(data);\n+        verify(\"test51\", data, gold51);\n+    }\n+\n+    @Run(test = \"test52\")\n+    @Warmup(100)\n+    public void runTest52() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        test52(data);\n+        verify(\"test52\", data, gold52);\n+    }\n+\n+    @Run(test = \"test53\")\n+    @Warmup(100)\n+    public void runTest53() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        test53(data);\n+        verify(\"test53\", data, gold53);\n+    }\n+\n+    \/\/ ------------------------- Double -----------------------------\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test60(double[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 2];\n+       }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static void test61(double[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j + 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR})\n+    static void test62(double[] data) {\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 1];\n+       }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.STORE_VECTOR},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"false\", \"avx2\", \"true\", \"asimd\", \"true\"})\n+    static void test63(double[] data) {\n+       \/\/ 128-bit vectors -> can vectorize because only 2 elements\n+       for (int j = 2; j < RANGE - 2; j++) {\n+           data[j] += data[j - 2];\n+       }\n+    }\n+\n+    @Run(test = \"test60\")\n+    @Warmup(100)\n+    public void runTest60() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        test60(data);\n+        verify(\"test60\", data, gold60);\n+    }\n+\n+    @Run(test = \"test61\")\n+    @Warmup(100)\n+    public void runTest61() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        test61(data);\n+        verify(\"test61\", data, gold61);\n+    }\n+\n+    @Run(test = \"test62\")\n+    @Warmup(100)\n+    public void runTest62() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        test62(data);\n+        verify(\"test62\", data, gold62);\n+    }\n+\n+    @Run(test = \"test63\")\n+    @Warmup(100)\n+    public void runTest63() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        test63(data);\n+        verify(\"test63\", data, gold63);\n+    }\n+\n+    static void init(long[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = j;\n+       }\n+    }\n+\n+    static void init(short[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = (short)j;\n+       }\n+    }\n+\n+    static void init(byte[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = (byte)j;\n+       }\n+    }\n+\n+    static void init(char[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = (char)j;\n+       }\n+    }\n+\n+\n+    static void init(float[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = j;\n+       }\n+    }\n+\n+\n+    static void init(double[] data) {\n+       for (int j = 0; j < RANGE; j++) {\n+           data[j] = j;\n+       }\n+    }\n+\n@@ -201,0 +760,48 @@\n+\n+    static void verify(String name, long[] data, long[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(String name, short[] data, short[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(String name, byte[] data, byte[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(String name, char[] data, char[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(String name, float[] data, float[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(String name, double[] data, double[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestOptionVectorizeIR.java","additions":624,"deletions":17,"binary":false,"changes":641,"status":"modified"}]}