{"files":[{"patch":"@@ -1361,29 +1361,0 @@\n-        \/**\n-         * Validate the size and contents of a Zip64 extended information field\n-         * The order of the Zip64 fields is fixed, but the fields MUST\n-         * only appear if the corresponding LOC or CEN field is set to 0xFFFF:\n-         * or 0xFFFFFFFF:\n-         * Uncompressed Size - 8 bytes\n-         * Compressed Size   - 8 bytes\n-         * LOC Header offset - 8 bytes\n-         * Disk Start Number - 4 bytes\n-         * See PKWare APP.Note Section 4.5.3 for more details\n-         *\n-         * @param blockSize the Zip64 Extended Information Extra Field size\n-         * @return true if the extra block size is valid; false otherwise\n-         *\/\n-        private static boolean isZip64ExtBlockSizeValid(int blockSize) {\n-            \/*\n-             * As the fields must appear in order, the block size indicates which\n-             * fields to expect:\n-             *  8 - uncompressed size\n-             * 16 - uncompressed size, compressed size\n-             * 24 - uncompressed size, compressed sise, LOC Header offset\n-             * 28 - uncompressed size, compressed sise, LOC Header offset,\n-             * and Disk start number\n-             *\/\n-            return switch(blockSize) {\n-                case 8, 16, 24, 28 -> true;\n-                default -> false;\n-            };\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import static java.util.zip.ZipUtils.isZip64ExtBlockSizeValid;\n@@ -581,3 +582,3 @@\n-            if (hasZip64Extra(e) \/\/ LOC indicates Zip64 format, expect 8-byte sizes\n-                    || inf.getBytesWritten() > ZIP64_MAGICVAL\n-                    || inf.getBytesRead() > ZIP64_MAGICVAL) {\n+            if (hasZip64Extra(e) ||\n+                inf.getBytesWritten() > ZIP64_MAGICVAL ||\n+                inf.getBytesRead() > ZIP64_MAGICVAL) {\n@@ -665,5 +666,1 @@\n-                    \/\/ Zip64 extra field of a LOC header has 1-3 longs\n-                    if (!(size == 8 || size == 16 || size == 24)) {\n-                        return false; \/\/ Invalid size\n-                    }\n-                    return true;\n+                    return isZip64ExtBlockSizeValid(size);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -308,0 +308,31 @@\n+\n+    \/**\n+     * Validate the size and contents of a Zip64 extended information field\n+     * The order of the Zip64 fields is fixed, but the fields MUST\n+     * only appear if the corresponding LOC or CEN field is set to 0xFFFF:\n+     * or 0xFFFFFFFF:\n+     * Uncompressed Size - 8 bytes\n+     * Compressed Size   - 8 bytes\n+     * LOC Header offset - 8 bytes\n+     * Disk Start Number - 4 bytes\n+     * See PKWare APP.Note Section 4.5.3 for more details\n+     *\n+     * @param blockSize the Zip64 Extended Information Extra Field size\n+     * @return true if the extra block size is valid; false otherwise\n+     *\/\n+    static boolean isZip64ExtBlockSizeValid(int blockSize) {\n+        \/*\n+         * As the fields must appear in order, the block size indicates which\n+         * fields to expect:\n+         *  8 - uncompressed size\n+         * 16 - uncompressed size, compressed size\n+         * 24 - uncompressed size, compressed sise, LOC Header offset\n+         * 28 - uncompressed size, compressed sise, LOC Header offset,\n+         * and Disk start number\n+         *\/\n+        return switch(blockSize) {\n+            case 8, 16, 24, 28 -> true;\n+            default -> false;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}