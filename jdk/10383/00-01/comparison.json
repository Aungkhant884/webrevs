{"files":[{"patch":"@@ -24,0 +24,2 @@\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n@@ -27,1 +29,2 @@\n-import org.testng.Assert;\n+import static org.testng.Assert.*;\n+import org.testng.SkipException;\n@@ -32,1 +35,1 @@\n- * @bug 8293792\n+ * @bug 8032220 8293792\n@@ -34,0 +37,1 @@\n+ * @library ..\n@@ -46,0 +50,5 @@\n+        if (!TestUtil.supportsLinks(startingDir)) {\n+            System.out.println(\"Skipping tests since symbolic links isn't \" +\n+                    \"supported under directory \"+ startingDir);\n+            throw new SkipException(\"Symbolic links not supported\");\n+        }\n@@ -48,1 +57,1 @@\n-        Assert.assertTrue(Files.isDirectory(fooDir),\n+        assertTrue(Files.isDirectory(fooDir),\n@@ -54,1 +63,1 @@\n-        Assert.assertTrue(Files.isSymbolicLink(symlink),\n+        assertTrue(Files.isSymbolicLink(symlink),\n@@ -56,1 +65,1 @@\n-        Assert.assertTrue(Files.isDirectory(symlink),\n+        assertTrue(Files.isDirectory(symlink),\n@@ -62,1 +71,1 @@\n-        Assert.assertTrue(Files.isDirectory(barDir),\n+        assertTrue(Files.isDirectory(barDir),\n@@ -78,0 +87,36 @@\n+\n+    \/**\n+     * Tests Files.createDirectories\n+     *\/\n+    @Test\n+    public void testCreateDirectories() throws IOException {\n+        final Path tmpdir = TestUtil.createTemporaryDirectory();\n+        \/\/ a no-op\n+        Files.createDirectories(tmpdir);\n+\n+        \/\/ create one directory\n+        Path subdir = tmpdir.resolve(\"a\");\n+        Files.createDirectories(subdir);\n+        assertTrue(Files.exists(subdir), subdir + \" was expected to exist, but didn't\");\n+\n+        \/\/ create parents\n+        subdir = subdir.resolve(\"b\/c\/d\");\n+        Files.createDirectories(subdir);\n+        assertTrue(Files.exists(subdir), subdir + \" was expected to exist, but didn't\");\n+\n+        \/\/ existing file is not a directory\n+        Path file = Files.createFile(tmpdir.resolve(\"x\"));\n+        try {\n+            Files.createDirectories(file);\n+            throw new RuntimeException(\"failure expected\");\n+        } catch (FileAlreadyExistsException x) { }\n+        try {\n+            Files.createDirectories(file.resolve(\"y\"));\n+            throw new RuntimeException(\"failure expected\");\n+        } catch (IOException x) { }\n+\n+        \/\/ the root directory always exists\n+        Path root = Path.of(\"\/\");\n+        Files.createDirectories(root);\n+        Files.createDirectories(root.toAbsolutePath());\n+    }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CreateDirectories.java","additions":51,"deletions":6,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n- * @bug 4313887 6838333 8005566 8032220 8215467 8255576 8286160\n- * @summary Unit test for miscellenous methods in java.nio.file.Files\n+ * @bug 4313887 6838333 8005566 8215467 8255576 8286160\n+ * @summary Unit test for miscellaneous methods in java.nio.file.Files\n@@ -54,1 +54,0 @@\n-            testCreateDirectories(dir);\n@@ -64,33 +63,0 @@\n-    \/**\n-     * Tests createDirectories\n-     *\/\n-    static void testCreateDirectories(Path tmpdir) throws IOException {\n-        \/\/ a no-op\n-        createDirectories(tmpdir);\n-\n-        \/\/ create one directory\n-        Path subdir = tmpdir.resolve(\"a\");\n-        createDirectories(subdir);\n-        assertTrue(exists(subdir));\n-\n-        \/\/ create parents\n-        subdir = subdir.resolve(\"b\/c\/d\");\n-        createDirectories(subdir);\n-        assertTrue(exists(subdir));\n-\n-        \/\/ existing file is not a directory\n-        Path file = createFile(tmpdir.resolve(\"x\"));\n-        try {\n-            createDirectories(file);\n-            throw new RuntimeException(\"failure expected\");\n-        } catch (FileAlreadyExistsException x) { }\n-        try {\n-            createDirectories(file.resolve(\"y\"));\n-            throw new RuntimeException(\"failure expected\");\n-        } catch (IOException x) { }\n-\n-        \/\/ the root directory always exists\n-        Path root = Path.of(\"\/\");\n-        Files.createDirectories(root);\n-        Files.createDirectories(root.toAbsolutePath());\n-    }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Misc.java","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"}]}