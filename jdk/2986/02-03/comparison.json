{"files":[{"patch":"@@ -155,9 +155,4 @@\n-        \/\/ This could happen when a concurrent operation interferes with\n-        \/\/ this try_pop() taking the only element in the queue, in two cases:\n-        \/\/ (1) A concurrent try_pop() may have won the race to take the\n-        \/\/ element, but has not finished updating the queue. It is fine to\n-        \/\/ return NULL in this case.\n-        \/\/ (2) A concurrent push\/append is ongoing. We cannot take result,\n-        \/\/ and we don't just try again, because we could spin for a long time\n-        \/\/ waiting for the push\/append to finish. We just return NULL, which\n-        \/\/ is OK for a thread getting a buffer to refine.\n+        \/\/ Returning NULL instead retrying, in order to mitigate the\n+        \/\/ chance of spinning for a long time. In the case of getting a\n+        \/\/ buffer to refine, it is also OK to return NULL when there is\n+        \/\/ an interfering concurrent push\/append operation.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-  \/\/ LockFreeQueue has inner padding, including trailer.\n+  \/\/ LockFreeQueue has inner padding of one cache line.\n@@ -169,0 +169,2 @@\n+  \/\/ Add a trailer padding after LockFreeQueue.\n+  DEFINE_PAD_MINUS_SIZE(3, DEFAULT_CACHE_LINE_SIZE, sizeof(BufferNode*));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n-\/\/ and usage is similar to LockFreeStack. It has inner paddings, and\n-\/\/ provides a try_pop() function for the client to implement pop()\n-\/\/ according to its need (e.g., whether or not to retry or prevent\n-\/\/ ABA problem).\n+\/\/ and usage is similar to LockFreeStack. It provides a try_pop() function\n+\/\/ for the client to implement pop() according to its need (e.g., whether\n+\/\/ or not to retry or prevent ABA problem). It has inner padding of one\n+\/\/ cache line between its two internal pointer fields.\n@@ -54,0 +54,1 @@\n+  \/\/ Padding of one cache line to avoid false sharing.\n@@ -56,1 +57,0 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, sizeof(T*));\n@@ -98,1 +98,1 @@\n-  \/\/   pair.second. Note that this case still subjects to ABA behavior;\n+  \/\/   pair.second. Note that this case is still subject to ABA behavior;\n@@ -104,4 +104,7 @@\n-  \/\/   An in-progress concurrent operation interfered with taking the element\n-  \/\/   when it was the only element in the queue. pair.second is NULL.\n-  \/\/   Retrying in this case has a higher chance of waiting for a long time\n-  \/\/   before succeeding, compared to the \"lost_race\" case.\n+  \/\/   An in-progress concurrent operation interfered with taking what had been\n+  \/\/   the only remaining element in the queue. pair.second is NULL.\n+  \/\/   A concurrent try_pop may have already claimed it, but not completely\n+  \/\/   updated the queue. Alternatively, a concurrent push\/append may have not\n+  \/\/   yet linked the new entry(s) to the former sole entry. Retrying the try_pop\n+  \/\/   will continue to fail in this way until that other thread has updated the\n+  \/\/   queue's internal structure.\n","filename":"src\/hotspot\/share\/utilities\/lockFreeQueue.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"}]}