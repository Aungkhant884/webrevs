{"files":[{"patch":"@@ -110,0 +110,2 @@\n+\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -204,0 +204,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -570,0 +570,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -437,1 +437,2 @@\n-\/\/ It will turn negative values into max_jint,\n+\/\/ For invoke* it will turn negative values into max_jint,\n+\/\/ and for checkcast\/aastore\/instanceof turn positive values into min_jint.\n@@ -439,3 +440,14 @@\n-  assert(Bytecodes::is_invoke(code) || code == Bytecodes::_aastore || code == Bytecodes::_checkcast ||\n-         code == Bytecodes::_instanceof, \"%s\", Bytecodes::name(code));\n-  return (c < 0 ? max_jint : c); \/\/ always non-negative\n+  switch (code) {\n+    case Bytecodes::_aastore:    \/\/ fall-through\n+    case Bytecodes::_checkcast:  \/\/ fall-through\n+    case Bytecodes::_instanceof: {\n+      if (VM_Version::profile_all_receivers_at_type_check()) {\n+        return (c < 0 ? max_jint : c); \/\/ always non-negative\n+      }\n+      return (c > 0 ? min_jint : c); \/\/ always non-positive\n+    }\n+    default: {\n+      assert(Bytecodes::is_invoke(code), \"%s\", Bytecodes::name(code));\n+      return (c < 0 ? max_jint : c); \/\/ always non-negative\n+    }\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2780,1 +2780,1 @@\n-  if (might_be_cache && method != nullptr) {\n+  if (might_be_cache && method != nullptr && VM_Version::profile_all_receivers_at_type_check()) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,1 +412,2 @@\n-    if (profile.has_receiver(0) &&\n+    if (profile.count() >= 0 &&         \/\/ no cast failures here\n+        profile.has_receiver(0) &&\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -235,4 +235,1 @@\n-  if (_method != nullptr) {\n-    return NO_HASH;\n-  }\n-  return Node::hash();\n+  return NO_HASH;\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -189,0 +189,2 @@\n+  static bool profile_all_receivers_at_type_check() { return true; }\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}