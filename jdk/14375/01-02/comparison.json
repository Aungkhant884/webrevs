{"files":[{"patch":"@@ -1083,3 +1083,6 @@\n-\/\/ dynamic type check.  It consists of a counter which counts the total times\n-\/\/ that the check is reached, and a series of (Klass*, count) pairs\n-\/\/ which are used to store a type profile for the receiver of the check.\n+\/\/ dynamic type check.  It consists of a series of (Klass*, count)\n+\/\/ pairs which are used to store a type profile for the receiver of\n+\/\/ the check, the associated count is incremented every time the type\n+\/\/ is seen. A per ReceiverTypeData counter is incremented on type\n+\/\/ overflow (when there's no more room for a not yet profiled Klass*).\n+\/\/ \n@@ -1091,1 +1094,0 @@\n-    \/\/   count is incremented on type overflow\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-            totalCount += getTypesNotRecordedExecutionCount(data, position);\n+            totalCount += getCounterValue(data, position);\n@@ -508,2 +508,0 @@\n-        protected abstract long getTypesNotRecordedExecutionCount(HotSpotMethodData data, int position);\n-\n@@ -568,4 +566,0 @@\n-\n-        protected long getTypesNotRecordedExecutionCount(HotSpotMethodData data, int position) {\n-            return getCounterValue(data, position);\n-        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotMethodData.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}