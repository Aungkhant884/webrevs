{"files":[{"patch":"@@ -1136,1 +1136,3 @@\n-                                   Register klass_RInfo, Label* obj_is_null) {\n+                                   Register k_RInfo, Register klass_RInfo, Label* obj_is_null) {\n+  Register mdo = klass_RInfo;\n+  __ mov_metadata(mdo, md->constant_encoding());\n@@ -1140,2 +1142,0 @@\n-  Register mdo = klass_RInfo;\n-  __ mov_metadata(mdo, md->constant_encoding());\n@@ -1148,0 +1148,9 @@\n+\n+  Label update_done;\n+  Register recv = k_RInfo;\n+  __ load_klass(recv, obj);\n+  type_profile_helper(mdo, md, data, recv, &update_done);\n+  Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n+  __ increment(counter_addr, DataLayout::counter_increment);\n+\n+  __ bind(update_done);\n@@ -1174,3 +1183,2 @@\n-  Label profile_cast_success, profile_cast_failure;\n-  Label *success_target = should_profile ? &profile_cast_success : success;\n-  Label *failure_target = should_profile ? &profile_cast_failure : failure;\n+  Label *success_target = success;\n+  Label *failure_target = failure;\n@@ -1193,1 +1201,1 @@\n-    profile_object(md, data, obj, klass_RInfo, obj_is_null);\n+    profile_object(md, data, obj, k_RInfo, klass_RInfo, obj_is_null);\n@@ -1210,3 +1218,1 @@\n-  if (should_profile) {\n-    type_profile(obj, md, klass_RInfo, k_RInfo, data, success, failure, profile_cast_success, profile_cast_failure);\n-  }\n+\n@@ -2125,3 +2131,3 @@\n-  Label profile_cast_success, profile_cast_failure, done;\n-  Label *success_target = should_profile ? &profile_cast_success : &done;\n-  Label *failure_target = should_profile ? &profile_cast_failure : stub->entry();\n+  Label  done;\n+  Label *success_target = &done;\n+  Label *failure_target = stub->entry();\n@@ -2130,1 +2136,1 @@\n-    profile_object(md, data, value, klass_RInfo, &done);\n+    profile_object(md, data, value, k_RInfo, klass_RInfo, &done);\n@@ -2141,19 +2147,0 @@\n-  \/\/ fall through to the success case\n-  if (should_profile) {\n-    Register mdo = klass_RInfo;\n-    Register recv = k_RInfo;\n-    __ bind(profile_cast_success);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    __ load_klass(recv, value);\n-    type_profile_helper(mdo, md, data, recv, &done);\n-    __ j(done);\n-\n-    __ bind(profile_cast_failure);\n-    __ mov_metadata(mdo, md->constant_encoding());\n-    Address counter_addr(mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-    __ ld(t1, counter_addr);\n-    __ addi(t1, t1, -DataLayout::counter_increment);\n-    __ sd(t1, counter_addr);\n-    __ j(*stub->entry());\n-  }\n-\n@@ -2163,21 +2150,0 @@\n-void LIR_Assembler::type_profile(Register obj, ciMethodData* md, Register klass_RInfo, Register k_RInfo,\n-                                 ciProfileData* data, Label* success, Label* failure,\n-                                 Label& profile_cast_success, Label& profile_cast_failure) {\n-  Register mdo = klass_RInfo;\n-  Register recv = k_RInfo;\n-  __ bind(profile_cast_success);\n-  __ mov_metadata(mdo, md->constant_encoding());\n-  __ load_klass(recv, obj);\n-  Label update_done;\n-  type_profile_helper(mdo, md, data, recv, success);\n-  __ j(*success);\n-\n-  __ bind(profile_cast_failure);\n-  __ mov_metadata(mdo, md->constant_encoding());\n-  Address counter_addr = __ form_address(t1, mdo, md->byte_offset_of_slot(data, CounterData::count_offset()));\n-  __ ld(t0, counter_addr);\n-  __ addi(t0, t0, -DataLayout::counter_increment);\n-  __ sd(t0, counter_addr);\n-  __ j(*failure);\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":20,"deletions":54,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-                      Register klass_RInfo, Label* obj_is_null);\n+                      Register k_RInfo, Register klass_RInfo, Label* obj_is_null);\n@@ -108,4 +108,0 @@\n-  void type_profile(Register obj, ciMethodData* md, Register klass_RInfo, Register k_RInfo,\n-                    ciProfileData* data, Label* success, Label* failure,\n-                    Label& profile_cast_success, Label& profile_cast_failure);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -353,3 +353,0 @@\n-\n-  \/\/ Profile the failure of the check.\n-  profile_typecheck_failed(x12); \/\/ blows x12\n@@ -1266,1 +1263,1 @@\n-    record_klass_in_profile(receiver, mdp, reg2, true);\n+    record_klass_in_profile(receiver, mdp, reg2);\n@@ -1291,2 +1288,1 @@\n-                                Register reg2,\n-                                Label& done, bool is_virtual_call) {\n+                                Register reg2, Label& done) {\n@@ -1294,4 +1290,1 @@\n-    if (is_virtual_call) {\n-      increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n-    }\n-\n+    increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n@@ -1299,5 +1292,0 @@\n-    int non_profiled_offset = -1;\n-    if (is_virtual_call) {\n-      non_profiled_offset = in_bytes(CounterData::count_offset());\n-    }\n-\n@@ -1305,1 +1293,1 @@\n-      &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset, non_profiled_offset);\n+        &VirtualCallData::receiver_offset, &VirtualCallData::receiver_count_offset);\n@@ -1309,3 +1297,3 @@\n-void InterpreterMacroAssembler::record_item_in_profile_helper(\n-  Register item, Register mdp, Register reg2, int start_row, Label& done, int total_rows,\n-  OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn, int non_profiled_offset) {\n+void InterpreterMacroAssembler::record_item_in_profile_helper(Register item, Register mdp,\n+                                        Register reg2, int start_row, Label& done, int total_rows,\n+                                        OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn) {\n@@ -1342,10 +1330,6 @@\n-        if (non_profiled_offset >= 0) {\n-          beqz(reg2, found_null);\n-          \/\/ Item did not match any saved item and there is no empty row for it.\n-          \/\/ Increment total counter to indicate polymorphic case.\n-          increment_mdp_data_at(mdp, non_profiled_offset);\n-          j(done);\n-          bind(found_null);\n-        } else {\n-          bnez(reg2, done);\n-        }\n+        beqz(reg2, found_null);\n+        \/\/ Item did not match any saved item and there is no empty row for it.\n+        \/\/ Increment total counter to indicate polymorphic case.\n+        increment_mdp_data_at(mdp, in_bytes(CounterData::count_offset()));\n+        j(done);\n+        bind(found_null);\n@@ -1359,1 +1343,1 @@\n-        item_offset_fn, item_count_offset_fn, non_profiled_offset);\n+          item_offset_fn, item_count_offset_fn);\n@@ -1429,2 +1413,1 @@\n-                                                        Register mdp, Register reg2,\n-                                                        bool is_virtual_call) {\n+                                                        Register mdp, Register reg2) {\n@@ -1434,1 +1417,1 @@\n-  record_klass_in_profile_helper(receiver, mdp, reg2, done, is_virtual_call);\n+  record_klass_in_profile_helper(receiver, mdp, reg2, done);\n@@ -1494,18 +1477,0 @@\n-void InterpreterMacroAssembler::profile_typecheck_failed(Register mdp) {\n-    if (ProfileInterpreter && TypeProfileCasts) {\n-    Label profile_continue;\n-\n-    \/\/ If no method data exists, go to profile_continue.\n-    test_method_data_pointer(mdp, profile_continue);\n-\n-    int count_offset = in_bytes(CounterData::count_offset());\n-    \/\/ Back up the address, since we have already bumped the mdp.\n-    count_offset -= in_bytes(VirtualCallData::virtual_call_data_size());\n-\n-    \/\/ *Decrement* the counter.  We expect to see zero or small negatives.\n-    increment_mdp_data_at(mdp, count_offset, true);\n-\n-    bind (profile_continue);\n-  }\n-}\n-\n@@ -1525,1 +1490,1 @@\n-      record_klass_in_profile(klass, mdp, reg2, false);\n+      record_klass_in_profile(klass, mdp, reg2);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":17,"deletions":52,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-                               Register reg2, bool is_virtual_call);\n+                               Register reg2);\n@@ -251,2 +251,1 @@\n-                                      Register reg2,\n-                                      Label& done, bool is_virtual_call);\n+                                      Register reg2, Label& done);\n@@ -255,2 +254,1 @@\n-                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn,\n-                                     int non_profiled_offset);\n+                                     OffsetFunction item_offset_fn, OffsetFunction item_count_offset_fn);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -204,1 +204,0 @@\n-  static bool profile_all_receivers_at_type_check() { return false; }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.whitebox.gc.GC;\n@@ -35,0 +36,1 @@\n+ * @build jdk.test.whitebox.WhiteBox\n@@ -36,1 +38,2 @@\n- * @run driver compiler.c2.irTests.ProfileAtTypeCheck\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.c2.irTests.ProfileAtTypeCheck\n@@ -41,4 +44,5 @@\n-        ArrayList<String> flags = new ArrayList<>();\n-        flags.add(\"-XX:TypeProfileSubTypeCheckCommonThreshold=90\");\n-        if (!Platform.is32bit()) {\n-            flags.add(\"-XX:-UseCompressedClassPointers\");\n+        ArrayList<String> flags1 = new ArrayList<>();\n+        ArrayList<String> flags2 = new ArrayList<>();\n+        flags1.add(\"-XX:TypeProfileSubTypeCheckCommonThreshold=90\");\n+        if (GC.isSelectedErgonomically() && GC.Parallel.isSupported()) {\n+            flags1.add(\"-XX:+UseParallelGC\");\n@@ -46,3 +50,8 @@\n-        flags.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n-        flags.add(\"-XX:+UseParallelGC\");\n-        TestFramework.runWithFlags(flags.toArray(new String[0]));\n+        flags2.addAll(flags1);\n+        flags1.add(\"-XX:-TieredCompilation\");\n+        flags2.add(\"-XX:-ProfileInterpreter\");\n+\n+        \/\/ Only interpreter collects profile\n+        TestFramework.runWithFlags(flags1.toArray(new String[0]));\n+        \/\/ Only c1 collects profile\n+        TestFramework.runWithFlags(flags2.toArray(new String[0]));\n@@ -67,1 +76,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"2\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"2\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\" })\n@@ -85,1 +97,4 @@\n-    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.AFTER_PARSING },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.AFTER_PARSING },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_NKLASS, \"1\" })\n@@ -100,1 +115,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_NKLASS, \"1\" })\n@@ -118,1 +136,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -135,1 +156,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -150,1 +174,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"2\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"2\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n@@ -166,1 +193,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -181,1 +211,4 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"false\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIf = { \"UseCompressedClassPointers\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -388,0 +421,18 @@\n+    \/\/ full subtype check + profile use for success path\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIfAnd = { \"UseCompressedClassPointers\", \"false\", \"UseParallelGC\", \"true\" }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(applyIfAnd = { \"UseCompressedClassPointers\", \"true\", \"UseParallelGC\", \"true\"  }, phase = { CompilePhase.MACRO_EXPANSION },\n+        counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS, \"1\", IRNode.LOAD_NKLASS, \"1\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    public static void test15(Object o) {\n+        array[0] = o;\n+    }\n+\n+    @Run(test = \"test15\")\n+    @Warmup(10000)\n+    private void test15Runner() {\n+        test15(a);\n+        test15(b);\n+    }\n+\n@@ -397,0 +448,1 @@\n+    static final Object[] array = new I[1];\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ProfileAtTypeCheck.java","additions":68,"deletions":16,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -524,0 +524,5 @@\n+    public static final String LOAD_NKLASS = PREFIX + \"LOAD_NKLASS\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(LOAD_NKLASS, \"LoadNKlass\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}