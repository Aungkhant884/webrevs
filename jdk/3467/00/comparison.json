{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,2 +239,2 @@\n-                checkAlg(data, \"110c1101110130\", args[i++]);\n-                checkAlg(data, \"110c11011110\", args[i++]);\n+                checkAlg(data, \"110c1101110130\", (KnownOIDs)args[i++]);\n+                checkAlg(data, \"110c11011110\", (KnownOIDs)args[i++]);\n@@ -252,2 +252,2 @@\n-            checkAlg(data, \"110c010c010010130\", args[i++]);\n-            checkAlg(data, \"110c010c0100110\", args[i++]);\n+            checkAlg(data, \"110c010c010010130\", (KnownOIDs)args[i++]);\n+            checkAlg(data, \"110c010c0100110\", (KnownOIDs)args[i++]);\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsPreferences.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,3 +77,3 @@\n-                {\"eddsa\", null, \"ed25519\"},\n-                {\"eddsa\", \"eddsa\", \"ed25519\"},\n-                {\"eddsa\", \"ed25519\", \"ed25519\"},\n+                {\"eddsa\", null, Ed25519},\n+                {\"eddsa\", \"eddsa\", Ed25519},\n+                {\"eddsa\", \"ed25519\", Ed25519},\n@@ -81,3 +81,3 @@\n-                {\"ed25519\", null, \"ed25519\"},\n-                {\"ed25519\", \"eddsa\", \"ed25519\"},\n-                {\"ed25519\", \"ed25519\", \"ed25519\"},\n+                {\"ed25519\", null, Ed25519},\n+                {\"ed25519\", \"eddsa\", Ed25519},\n+                {\"ed25519\", \"ed25519\", Ed25519},\n@@ -85,2 +85,2 @@\n-                {\"ed448\", null, \"ed448\"},\n-                {\"ed448\", \"eddsa\", \"ed448\"},\n+                {\"ed448\", null, Ed448},\n+                {\"ed448\", \"eddsa\", Ed448},\n@@ -88,1 +88,1 @@\n-                {\"ed448\", \"ed448\", \"ed448\"},\n+                {\"ed448\", \"ed448\", Ed448},\n@@ -99,1 +99,1 @@\n-    public void eddsaTest(String keyAlg, String sigAlg, String expected)\n+    public void eddsaTest(String keyAlg, String sigAlg, KnownOIDs expected)\n@@ -180,0 +180,3 @@\n+        KnownOIDs sigOID = KnownOIDs.findMatch(sigAlg);\n+        KnownOIDs keyOID = KnownOIDs.findMatch(keyAlg);\n+\n@@ -181,2 +184,2 @@\n-        DerUtils.checkAlg(crt, \"020\", sigAlg);  \/\/ tbsCertificate.signature\n-        DerUtils.checkAlg(crt, \"0600\", keyAlg); \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n+        DerUtils.checkAlg(crt, \"020\", sigOID);  \/\/ tbsCertificate.signature\n+        DerUtils.checkAlg(crt, \"0600\", keyOID); \/\/ tbsCertificate.subjectPublicKeyInfo.algorithm\n@@ -188,2 +191,2 @@\n-        DerUtils.checkAlg(req, \"10\", sigAlg);   \/\/ signatureAlgorithm\n-        DerUtils.checkAlg(req, \"0200\", keyAlg); \/\/ certificationRequestInfo.subjectPKInfo.algorithm\n+        DerUtils.checkAlg(req, \"10\", sigOID);   \/\/ signatureAlgorithm\n+        DerUtils.checkAlg(req, \"0200\", keyOID); \/\/ certificationRequestInfo.subjectPKInfo.algorithm\n@@ -192,1 +195,1 @@\n-        DerUtils.checkAlg(crl, \"000\", sigAlg);  \/\/ tbsCertList.signature\n+        DerUtils.checkAlg(crl, \"000\", sigOID);  \/\/ tbsCertList.signature\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenerateAll.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,12 +99,11 @@\n-            Object expected) throws Exception {\n-        ObjectIdentifier oid;\n-        if (expected instanceof ObjectIdentifier) {\n-            oid = (ObjectIdentifier)expected;\n-        } else if (expected instanceof KnownOIDs) {\n-            oid = ObjectIdentifier.of((KnownOIDs) expected);\n-        } else if (expected instanceof String) {\n-            oid = ObjectIdentifier.of(KnownOIDs.findMatch((String)expected));\n-        } else {\n-            throw new IllegalArgumentException(expected.toString());\n-        }\n-        Asserts.assertEQ(innerDerValue(der, location).getOID(), oid);\n+            ObjectIdentifier expected) throws Exception {\n+        Asserts.assertEQ(innerDerValue(der, location).getOID(), expected);\n+    }\n+\n+    \/**\n+     * Ensures that the inner DerValue is the expected ObjectIdentifier.\n+     *\/\n+    public static void checkAlg(byte[] der, String location,\n+            KnownOIDs expected) throws Exception {\n+        Asserts.assertEQ(innerDerValue(der, location).getOID(),\n+                ObjectIdentifier.of(expected));\n","filename":"test\/lib\/jdk\/test\/lib\/security\/DerUtils.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"}]}