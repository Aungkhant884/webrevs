{"files":[{"patch":"@@ -1477,3 +1477,2 @@\n-    String lookupStringForUri(byte[] path) {\n-        byte[] entry = entryLookup.apply(path);\n-        return getString(entry != null ? entry : path);\n+    byte[] lookupPath(byte[] resolvedPath) {\n+        return entryLookup.apply(resolvedPath);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-                           zfs.lookupStringForUri(getResolvedPath()),\n+                           getRealPath(getResolvedPath()),\n@@ -210,0 +210,5 @@\n+    private String getRealPath(byte[] resolvedPath) {\n+        byte[] path = zfs.lookupPath(resolvedPath);\n+        return zfs.getString(path != null ? path : resolvedPath);\n+    }\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipPath.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,6 +43,2 @@\n-  public static void main(String[] args) throws Exception {\n-    Path mr = generateMultiReleaseJar();\n-    try {\n-      testT8271079(mr);\n-    } finally {\n-      Files.deleteIfExists(mr);\n+    public static void main(String[] args) throws Exception {\n+        new T8271079().run();\n@@ -50,1 +46,0 @@\n-  }\n@@ -52,14 +47,1 @@\n-  \/\/ $ echo 'module hello {}' > module-info.java\n-  \/\/ $ javac -d classes --release 9 module-info.java\n-  \/\/ $ jar --create --file mr.jar --release 9 -C classes .\n-  private static Path generateMultiReleaseJar() throws Exception {\n-    Files.writeString(Path.of(\"module-info.java\"), \"module hello {}\");\n-    java.util.spi.ToolProvider.findFirst(\"javac\").orElseThrow()\n-        .run(System.out, System.err, \"-d\", \"classes\", \"--release\", \"9\", \"module-info.java\");\n-    Path mr = Path.of(\"mr.jar\");\n-    java.util.spi.ToolProvider.findFirst(\"jar\").orElseThrow()\n-        .run(System.out, System.err, \"--create\", \"--file\", mr.toString(), \"--release\", \"9\", \"-C\", \"classes\", \".\");\n-    System.out.println(\"Created: \" + mr.toUri());\n-    System.out.println(\" Exists: \" + Files.exists(mr));\n-    return mr;\n-  }\n+    final PrintStream out;\n@@ -67,7 +49,35 @@\n-  private static void testT8271079(Path path) throws Exception {\n-    StandardJavaFileManager fileManager =\n-        ToolProvider.getSystemJavaCompiler()\n-            .getStandardFileManager(null, Locale.ENGLISH, StandardCharsets.UTF_8);\n-    fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, List.of(path));\n-    Iterator<String> options = Arrays.asList(\"--multi-release\", \"9\").iterator();\n-    fileManager.handleOption(options.next(), options);\n+    T8271079() {\n+        this.out = System.out;\n+    }\n+\n+    void run() throws Exception {\n+        Path mr = generateMultiReleaseJar();\n+        try {\n+            testT8271079(mr);\n+        } finally {\n+            Files.deleteIfExists(mr);\n+        }\n+    }\n+\n+    \/\/ $ echo 'module hello {}' > module-info.java\n+    \/\/ $ javac -d classes --release 9 module-info.java\n+    \/\/ $ jar --create --file mr.jar --release 9 -C classes .\n+    Path generateMultiReleaseJar() throws Exception {\n+        Files.writeString(Path.of(\"module-info.java\"), \"module hello {}\");\n+        java.util.spi.ToolProvider.findFirst(\"javac\").orElseThrow()\n+            .run(out, System.err, \"-d\", \"classes\", \"--release\", \"9\", \"module-info.java\");\n+        Path mr = Path.of(\"mr.jar\");\n+        java.util.spi.ToolProvider.findFirst(\"jar\").orElseThrow()\n+            .run(out, System.err, \"--create\", \"--file\", mr.toString(), \"--release\", \"9\", \"-C\", \"classes\", \".\");\n+        out.println(\"Created: \" + mr.toUri());\n+        out.println(\" Exists: \" + Files.exists(mr));\n+        return mr;\n+    }\n+\n+    void testT8271079(Path path) throws Exception {\n+        StandardJavaFileManager fileManager =\n+            ToolProvider.getSystemJavaCompiler()\n+                .getStandardFileManager(null, Locale.ENGLISH, StandardCharsets.UTF_8);\n+        fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, List.of(path));\n+        Iterator<String> options = Arrays.asList(\"--multi-release\", \"9\").iterator();\n+        fileManager.handleOption(options.next(), options);\n@@ -75,3 +85,3 @@\n-    Iterable<JavaFileObject> list =\n-        fileManager.list(\n-            StandardLocation.CLASS_PATH, \"\", EnumSet.allOf(JavaFileObject.Kind.class), false);\n+        Iterable<JavaFileObject> list =\n+            fileManager.list(\n+                StandardLocation.CLASS_PATH, \"\", EnumSet.allOf(JavaFileObject.Kind.class), false);\n@@ -79,4 +89,6 @@\n-    for (JavaFileObject f : list) {\n-      System.out.println(\"JavaFileObject: \" + f.getName());\n-      System.out.println(\"JavaFileObject#toUri: \" + f.toUri());\n-      openUsingUri(f.toUri());\n+        for (JavaFileObject f : list) {\n+            out.println(\"JavaFileObject#getName: \" + f.getName());\n+            out.println(\"JavaFileObject#toUri: \" + f.toUri());\n+            openUsingUri(f.toUri());\n+        }\n+        System.gc(); \/\/ JDK-8224794\n@@ -84,2 +96,0 @@\n-    System.gc(); \/\/ JDK-8224794\n-  }\n@@ -87,12 +97,12 @@\n-  private static void openUsingUri(URI uri) throws IOException {\n-    URLConnection connection = uri.toURL().openConnection();\n-    if (connection instanceof JarURLConnection) {\n-      connection.setUseCaches(false); \/\/ JDK-8224794\n-      try {\n-        JarEntry entry = ((JarURLConnection) connection).getJarEntry();\n-        System.out.println(\"JarEntry: \" + entry.getName());\n-        connection.getInputStream().close(); \/\/ JDK-8224794\n-      } catch (FileNotFoundException e) {\n-        e.printStackTrace();\n-        throw e;\n-      }\n+    void openUsingUri(URI uri) throws IOException {\n+        URLConnection connection = uri.toURL().openConnection();\n+        connection.setUseCaches(false); \/\/ JDK-8224794\n+        if (connection instanceof JarURLConnection jar) {\n+            try {\n+                JarEntry entry = jar.getJarEntry();\n+                out.println(\"JarEntry#getName: \" + entry.getName());\n+                connection.getInputStream().close(); \/\/ JDK-8224794\n+            } catch (FileNotFoundException e) {\n+                throw e;\n+            }\n+        }\n@@ -100,1 +110,0 @@\n-  }\n","filename":"test\/langtools\/tools\/javac\/T8271079.java","additions":59,"deletions":50,"binary":false,"changes":109,"status":"modified"}]}