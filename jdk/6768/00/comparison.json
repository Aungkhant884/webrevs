{"files":[{"patch":"@@ -181,7 +181,0 @@\n-        @Override @DefinedBy(Api.COMPILER)\n-        public URI toUri() {\n-            \/\/ Work around bug JDK-8134451:\n-            \/\/ path.toUri() returns double-encoded URIs, that cannot be opened by URLConnection\n-            return createJarUri(userJarPath, path.toString());\n-        }\n-\n@@ -200,11 +193,0 @@\n-\n-        private static URI createJarUri(Path jarFile, String entryName) {\n-            URI jarURI = jarFile.toUri().normalize();\n-            String separator = entryName.startsWith(\"\/\") ? \"!\" : \"!\/\";\n-            try {\n-                \/\/ The jar URI convention appears to be not to re-encode the jarURI\n-                return new URI(\"jar:\" + jarURI + separator + entryName);\n-            } catch (URISyntaxException e) {\n-                throw new CannotCreateUriError(jarURI + separator + entryName, e);\n-            }\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/PathFileObject.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1474,0 +1474,8 @@\n+    \/**\n+     * Package-private accessor to entry alias map used by ZipPath.\n+     *\/\n+    String lookupStringForUri(byte[] path) {\n+        byte[] entry = entryLookup.apply(path);\n+        return getString(entry != null ? entry : path);\n+    }\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-                           zfs.getString(toAbsolutePath().path),\n+                           zfs.lookupStringForUri(getResolvedPath()),\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8164389 8222440\n+ * @bug 8164389 8222440 8271079\n@@ -149,0 +149,54 @@\n+\n+    @Test\n+    public void testToUri() throws IOException {\n+        \/\/ treat multi-release jar as unversioned\n+        Map<String, String> env = new HashMap<>();\n+        Set<String> contents = doTestUri(env);\n+        Set<String> expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/root\/dir2\/leaf3.txt\",\n+            \"!\/root\/dir2\/leaf4.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+\n+        \/\/ open file as multi-release for version 9\n+        env.put(\"multi-release\", \"9\");\n+        contents = doTestUri(env);\n+        expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf3.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf4.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir3\/leaf5.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir3\/leaf6.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+\n+        \/\/ open file as multi-release for version 10\n+        env.put(\"multi-release\", \"10\");\n+        contents = doTestUri(env);\n+        expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf3.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf4.txt\",\n+            \"!\/META-INF\/versions\/10\/root\/dir3\/leaf5.txt\",\n+            \"!\/META-INF\/versions\/10\/root\/dir3\/leaf6.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+    }\n+\n+    private Set<String> doTestUri(Map<String,String> env) throws IOException {\n+        Set<String> contents;\n+        try (FileSystem fs = FileSystems.newFileSystem(jarURI, env)) {\n+            Path root = fs.getPath(\"root\");\n+            int prefix = root.toUri().toString().indexOf('!');\n+            contents = Files.walk(root)\n+                .filter(p -> !Files.isDirectory(p))\n+                .map(p ->  p.toUri().toString().substring(prefix))\n+                .sorted()\n+                .collect(Collectors.toSet());\n+        }\n+        return contents;\n+    }\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/jarfs\/JFSTester.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271079\n+ * @summary JavaFileObject#toUri in MR-JAR returns real path\n+ * @modules java.compiler\n+ *          jdk.compiler\n+ * @run main T8271079\n+ *\/\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.jar.JarEntry;\n+import javax.tools.*;\n+\n+public class T8271079 {\n+\n+  public static void main(String[] args) throws Exception {\n+    Path mr = generateMultiReleaseJar();\n+    try {\n+      testT8271079(mr);\n+    } finally {\n+      Files.deleteIfExists(mr);\n+    }\n+  }\n+\n+  \/\/ $ echo 'module hello {}' > module-info.java\n+  \/\/ $ javac -d classes --release 9 module-info.java\n+  \/\/ $ jar --create --file mr.jar --release 9 -C classes .\n+  private static Path generateMultiReleaseJar() throws Exception {\n+    Files.writeString(Path.of(\"module-info.java\"), \"module hello {}\");\n+    java.util.spi.ToolProvider.findFirst(\"javac\").orElseThrow()\n+        .run(System.out, System.err, \"-d\", \"classes\", \"--release\", \"9\", \"module-info.java\");\n+    Path mr = Path.of(\"mr.jar\");\n+    java.util.spi.ToolProvider.findFirst(\"jar\").orElseThrow()\n+        .run(System.out, System.err, \"--create\", \"--file\", mr.toString(), \"--release\", \"9\", \"-C\", \"classes\", \".\");\n+    System.out.println(\"Created: \" + mr.toUri());\n+    System.out.println(\" Exists: \" + Files.exists(mr));\n+    return mr;\n+  }\n+\n+  private static void testT8271079(Path path) throws Exception {\n+    StandardJavaFileManager fileManager =\n+        ToolProvider.getSystemJavaCompiler()\n+            .getStandardFileManager(null, Locale.ENGLISH, StandardCharsets.UTF_8);\n+    fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, List.of(path));\n+    Iterator<String> options = Arrays.asList(\"--multi-release\", \"9\").iterator();\n+    fileManager.handleOption(options.next(), options);\n+\n+    Iterable<JavaFileObject> list =\n+        fileManager.list(\n+            StandardLocation.CLASS_PATH, \"\", EnumSet.allOf(JavaFileObject.Kind.class), false);\n+\n+    for (JavaFileObject f : list) {\n+      System.out.println(\"JavaFileObject: \" + f.getName());\n+      System.out.println(\"JavaFileObject#toUri: \" + f.toUri());\n+      openUsingUri(f.toUri());\n+    }\n+    System.gc(); \/\/ JDK-8224794\n+  }\n+\n+  private static void openUsingUri(URI uri) throws IOException {\n+    URLConnection connection = uri.toURL().openConnection();\n+    if (connection instanceof JarURLConnection) {\n+      connection.setUseCaches(false); \/\/ JDK-8224794\n+      try {\n+        JarEntry entry = ((JarURLConnection) connection).getJarEntry();\n+        System.out.println(\"JarEntry: \" + entry.getName());\n+        connection.getInputStream().close(); \/\/ JDK-8224794\n+      } catch (FileNotFoundException e) {\n+        e.printStackTrace();\n+        throw e;\n+      }\n+    }\n+  }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8271079.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}