{"files":[{"patch":"@@ -147,2 +147,2 @@\n-     * also prohibit null elements, and attempts to add or query a null\n-     * element will result in a {@code NullPointerException}.\n+     * also prohibit null elements, and attempts to add, query, or remove\n+     * a null element will result in a {@code NullPointerException}.\n@@ -177,2 +177,2 @@\n-     * also prohibit null elements, and attempts to add or query a null\n-     * element will result in a {@code NullPointerException}.\n+     * also prohibit null elements, and attempts to add, query, or remove\n+     * a null element will result in a {@code NullPointerException}.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -694,0 +694,1 @@\n+            String name = moduleStack[i].entry.getLoginModuleName();\n@@ -700,1 +701,0 @@\n-                    String name = moduleStack[i].entry.getLoginModuleName();\n@@ -783,1 +783,1 @@\n-                            debug.println(methodName + \" SUFFICIENT success\");\n+                            debug.println(name + \" \" + methodName + \" SUFFICIENT success\");\n@@ -788,1 +788,1 @@\n-                        debug.println(methodName + \" success\");\n+                        debug.println(name + \" \" + methodName + \" success\");\n@@ -792,1 +792,1 @@\n-                        debug.println(methodName + \" ignored\");\n+                        debug.println(name + \" \" + methodName + \" ignored\");\n@@ -857,1 +857,1 @@\n-                        debug.println(methodName + \" REQUISITE failure\");\n+                        debug.println(name + \" \" + methodName + \" REQUISITE failure\");\n@@ -872,1 +872,1 @@\n-                        debug.println(methodName + \" REQUIRED failure\");\n+                        debug.println(name + \" \" + methodName + \" REQUIRED failure\");\n@@ -881,1 +881,1 @@\n-                        debug.println(methodName + \" OPTIONAL failure\");\n+                        debug.println(name + \" \" + methodName + \" OPTIONAL failure\");\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/LoginContext.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import javax.security.auth.AuthPermission;\n@@ -53,1 +52,1 @@\n- * The {@code Subject} represents the\n+ * <p> The {@code Subject} represents the\n@@ -59,1 +58,1 @@\n- * Note that the {@code CallbackHandler} may be null.  LoginModules\n+ * Note that the {@code CallbackHandler} may be {@code null}.  LoginModules\n@@ -132,1 +131,1 @@\n-     * Initialize this LoginModule.\n+     * Initialize this {@code LoginModule}.\n@@ -166,1 +165,1 @@\n-     * as private state within the LoginModule.\n+     * as private state within the {@code LoginModule}.\n@@ -170,2 +169,2 @@\n-     * @return true if the authentication succeeded, or false if this\n-     *                  {@code LoginModule} should be ignored.\n+     * @return {@code true} if the authentication succeeded, or {@code false}\n+     *                  if this {@code LoginModule} should be ignored.\n@@ -193,2 +192,2 @@\n-     * @return true if this method succeeded, or false if this\n-     *                  {@code LoginModule} should be ignored.\n+     * @return {@code true} if this method succeeded, or {@code false}\n+     *                  if this {@code LoginModule} should be ignored.\n@@ -213,2 +212,2 @@\n-     * @return true if this method succeeded, or false if this\n-     *                  {@code LoginModule} should be ignored.\n+     * @return {@code true} if this method succeeded, or {@code false}\n+     *                  if this {@code LoginModule} should be ignored.\n@@ -226,2 +225,9 @@\n-     * @return true if this method succeeded, or false if this\n-     *                  {@code LoginModule} should be ignored.\n+     * @return {@code true} if this method succeeded, or {@code false}\n+     *                  if this {@code LoginModule} should be ignored.\n+     *\n+     * @implSpec Implementations should check if a variable is {@code null}\n+     *      before removing it from the Principals or Credentials set\n+     *      of a {@code Subject}, otherwise a {@code NullPointerException}\n+     *      will be thrown as these sets {@linkplain Subject#Subject()\n+     *      prohibit null elements}. This is especially important if\n+     *      this method is called after a login failure.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/spi\/LoginModule.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -425,1 +425,3 @@\n-        subject.getPrincipals().remove(user);\n+        if (user != null) {\n+            subject.getPrincipals().remove(user);\n+        }\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/FileLoginModule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -474,5 +474,12 @@\n-        subject.getPrincipals().remove(userPrincipal);\n-        subject.getPrincipals().remove(UIDPrincipal);\n-        subject.getPrincipals().remove(GIDPrincipal);\n-        for (int i = 0; i < supplementaryGroups.size(); i++) {\n-            subject.getPrincipals().remove(supplementaryGroups.get(i));\n+        if (userPrincipal != null) {\n+            subject.getPrincipals().remove(userPrincipal);\n+        }\n+        if (UIDPrincipal != null) {\n+            subject.getPrincipals().remove(UIDPrincipal);\n+        }\n+        if (GIDPrincipal != null) {\n+            subject.getPrincipals().remove(GIDPrincipal);\n+        }\n+        for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n+            \/\/ gp is never null\n+            subject.getPrincipals().remove(gp);\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/JndiLoginModule.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -856,17 +856,19 @@\n-            Iterator<Object> it = subject.getPrivateCredentials().iterator();\n-            while (it.hasNext()) {\n-                Object obj = it.next();\n-                if (privateCredential.equals(obj)) {\n-                    privateCredential = null;\n-                    try {\n-                        ((Destroyable)obj).destroy();\n-                        if (debug)\n-                            debugPrint(\"Destroyed private credential, \" +\n-                                       obj.getClass().getName());\n-                        break;\n-                    } catch (DestroyFailedException dfe) {\n-                        LoginException le = new LoginException\n-                            (\"Unable to destroy private credential, \"\n-                             + obj.getClass().getName());\n-                        le.initCause(dfe);\n-                        throw le;\n+            if (privateCredential != null) {\n+                Iterator<Object> it = subject.getPrivateCredentials().iterator();\n+                while (it.hasNext()) {\n+                    Object obj = it.next();\n+                    if (privateCredential.equals(obj)) {\n+                        privateCredential = null;\n+                        try {\n+                            ((Destroyable) obj).destroy();\n+                            if (debug)\n+                                debugPrint(\"Destroyed private credential, \" +\n+                                        obj.getClass().getName());\n+                            break;\n+                        } catch (DestroyFailedException dfe) {\n+                            LoginException le = new LoginException\n+                                    (\"Unable to destroy private credential, \"\n+                                            + obj.getClass().getName());\n+                            le.initCause(dfe);\n+                            throw le;\n+                        }\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/KeyStoreLoginModule.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1205,2 +1205,4 @@\n-        subject.getPrincipals().remove(kerbClientPrinc);\n-           \/\/ Let us remove all Kerberos credentials stored in the Subject\n+        if (kerbClientPrinc != null) {\n+            subject.getPrincipals().remove(kerbClientPrinc);\n+        }\n+        \/\/ Let us remove all Kerberos credentials stored in the Subject\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/Krb5LoginModule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -699,2 +699,6 @@\n-        principals.remove(ldapPrincipal);\n-        principals.remove(userPrincipal);\n+        if (ldapPrincipal != null) {\n+            principals.remove(ldapPrincipal);\n+        }\n+        if (userPrincipal != null) {\n+            principals.remove(userPrincipal);\n+        }\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/LdapLoginModule.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -352,1 +352,1 @@\n-        if (principals.contains(userPrincipal)) {\n+        if (userPrincipal != null && principals.contains(userPrincipal)) {\n@@ -355,1 +355,1 @@\n-        if (principals.contains(userSID)) {\n+        if (userSID != null && principals.contains(userSID)) {\n@@ -358,1 +358,1 @@\n-        if (principals.contains(userDomain)) {\n+        if (userDomain != null && principals.contains(userDomain)) {\n@@ -361,1 +361,1 @@\n-        if (principals.contains(domainSID)) {\n+        if (domainSID != null && principals.contains(domainSID)) {\n@@ -364,1 +364,1 @@\n-        if (principals.contains(primaryGroup)) {\n+        if (primaryGroup != null && principals.contains(primaryGroup)) {\n@@ -367,3 +367,4 @@\n-        for (int i = 0; groups != null && i < groups.length; i++) {\n-            if (principals.contains(groups[i])) {\n-                principals.remove(groups[i]);\n+        if (groups != null) {\n+            for (NTSidGroupPrincipal gp : groups) {\n+                \/\/ gp is never null\n+                principals.remove(gp);\n@@ -374,1 +375,1 @@\n-        if (pubCreds.contains(iToken)) {\n+        if (iToken != null && pubCreds.contains(iToken)) {\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/NTLoginModule.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,5 +280,12 @@\n-        subject.getPrincipals().remove(userPrincipal);\n-        subject.getPrincipals().remove(UIDPrincipal);\n-        subject.getPrincipals().remove(GIDPrincipal);\n-        for (int i = 0; i < supplementaryGroups.size(); i++) {\n-            subject.getPrincipals().remove(supplementaryGroups.get(i));\n+        if (userPrincipal != null) {\n+            subject.getPrincipals().remove(userPrincipal);\n+        }\n+        if (UIDPrincipal != null) {\n+            subject.getPrincipals().remove(UIDPrincipal);\n+        }\n+        if (GIDPrincipal != null) {\n+            subject.getPrincipals().remove(GIDPrincipal);\n+        }\n+        for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n+            \/\/ gp is never null\n+            subject.getPrincipals().remove(gp);\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/UnixLoginModule.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import java.util.*;\n+\n+import static javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag.*;\n+\n+\/*\n+ * @test\n+ * @bug 8282730\n+ * @key randomness\n+ * @summary Check that all LoginModule implementations don't throw NPE\n+ *          from logout method after login failure\n+ * @modules jdk.security.auth\n+ *          java.management\n+ *\/\n+public class SafeLogout {\n+\n+    static Random r = new Random();\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < 100; i++) {\n+            test(i);\n+        }\n+    }\n+\n+    static void test(int pos) throws Exception {\n+        \/\/ Since there is an infinite number of LoginModule configurations,\n+        \/\/ we use a random number to choose login module names, flag for each,\n+        \/\/ and whether to perform a login. The config is printed out so any\n+        \/\/ failure can be reproduced.\n+        boolean login = r.nextBoolean();\n+        Map<String, ?> empty = Collections.emptyMap();\n+        AppConfigurationEntry[] result = new AppConfigurationEntry[r.nextInt(4) + 1];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = new AppConfigurationEntry(randomModule(), randomControl(), empty);\n+        }\n+\n+        System.out.println(pos + \" \" + login);\n+        Arrays.stream(result)\n+                .forEach(a -> System.out.println(a.getLoginModuleName() + \":\" + a.getControlFlag()));\n+\n+        LoginContext lc = new LoginContext(\"a\", new Subject(), null, new Configuration() {\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(String name) {\n+                return result;\n+            }\n+        });\n+\n+        try {\n+            if (login) {\n+                lc.login();\n+            }\n+        } catch (LoginException e) {\n+            \/\/ Don't care\n+        } finally {\n+            try {\n+                lc.logout();\n+            } catch (LoginException le) {\n+                if (!le.getMessage().contains(\"all modules ignored\")) {\n+                    throw le;\n+                }\n+            }\n+        }\n+    }\n+\n+    static AppConfigurationEntry.LoginModuleControlFlag[] allControls = {\n+            REQUIRED,\n+            REQUISITE,\n+            SUFFICIENT,\n+            OPTIONAL\n+    };\n+\n+    static AppConfigurationEntry.LoginModuleControlFlag randomControl() {\n+        return allControls[r.nextInt(allControls.length)];\n+    }\n+\n+    static String[] allModules = {\n+            \"com.sun.security.auth.module.Krb5LoginModule\",\n+            \"com.sun.security.auth.module.UnixLoginModule\",\n+            \"com.sun.security.auth.module.JndiLoginModule\",\n+            \"com.sun.security.auth.module.KeyStoreLoginModule\",\n+            \"com.sun.security.auth.module.NTLoginModule\",\n+            \"com.sun.security.auth.module.LdapLoginModule\",\n+            \"com.sun.jmx.remote.security.FileLoginModule\"\n+    };\n+\n+    static String randomModule() {\n+        return allModules[r.nextInt(allModules.length)];\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/SafeLogout.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}