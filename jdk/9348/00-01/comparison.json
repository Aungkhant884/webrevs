{"files":[{"patch":"@@ -147,2 +147,2 @@\n-     * also prohibit null elements, and attempts to add or query a null\n-     * element will result in a {@code NullPointerException}.\n+     * also prohibit null elements, and attempts to add, query, or remove\n+     * a null element will result in a {@code NullPointerException}.\n@@ -177,2 +177,2 @@\n-     * also prohibit null elements, and attempts to add or query a null\n-     * element will result in a {@code NullPointerException}.\n+     * also prohibit null elements, and attempts to add, query, or remove\n+     * a null element will result in a {@code NullPointerException}.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -230,3 +230,4 @@\n-     *      of a {@code Subject}, otherwise a {@code NullPointerException} will\n-     *      be thrown. This is especially important when this method is called\n-     *      after a login failure.\n+     *      of a {@code Subject}, otherwise a {@code NullPointerException}\n+     *      will be thrown as these sets {@linkplain Subject#Subject()\n+     *      prohibit null elements}. This is especially important if\n+     *      this method is called after a login failure.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/spi\/LoginModule.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -483,6 +483,3 @@\n-        if (supplementaryGroups != null) {\n-            for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n-                if (gp != null) {\n-                    subject.getPrincipals().remove(gp);\n-                }\n-            }\n+        for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n+            \/\/ gp is never null\n+            subject.getPrincipals().remove(gp);\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/JndiLoginModule.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -856,17 +856,19 @@\n-            Iterator<Object> it = subject.getPrivateCredentials().iterator();\n-            while (it.hasNext()) {\n-                Object obj = it.next();\n-                if (privateCredential.equals(obj)) {\n-                    privateCredential = null;\n-                    try {\n-                        ((Destroyable)obj).destroy();\n-                        if (debug)\n-                            debugPrint(\"Destroyed private credential, \" +\n-                                       obj.getClass().getName());\n-                        break;\n-                    } catch (DestroyFailedException dfe) {\n-                        LoginException le = new LoginException\n-                            (\"Unable to destroy private credential, \"\n-                             + obj.getClass().getName());\n-                        le.initCause(dfe);\n-                        throw le;\n+            if (privateCredential != null) {\n+                Iterator<Object> it = subject.getPrivateCredentials().iterator();\n+                while (it.hasNext()) {\n+                    Object obj = it.next();\n+                    if (privateCredential.equals(obj)) {\n+                        privateCredential = null;\n+                        try {\n+                            ((Destroyable) obj).destroy();\n+                            if (debug)\n+                                debugPrint(\"Destroyed private credential, \" +\n+                                        obj.getClass().getName());\n+                            break;\n+                        } catch (DestroyFailedException dfe) {\n+                            LoginException le = new LoginException\n+                                    (\"Unable to destroy private credential, \"\n+                                            + obj.getClass().getName());\n+                            le.initCause(dfe);\n+                            throw le;\n+                        }\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/KeyStoreLoginModule.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -369,3 +369,2 @@\n-                if (gp != null) {\n-                    principals.remove(gp);\n-                }\n+                \/\/ gp is never null\n+                principals.remove(gp);\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/NTLoginModule.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -289,6 +289,3 @@\n-        if (supplementaryGroups != null) {\n-            for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n-                if (gp != null) {\n-                    subject.getPrincipals().remove(gp);\n-                }\n-            }\n+        for (UnixNumericGroupPrincipal gp : supplementaryGroups) {\n+            \/\/ gp is never null\n+            subject.getPrincipals().remove(gp);\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/UnixLoginModule.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n- * @summary LdapLoginModule throw NPE from logout method after login failure\n+ * @summary Check that all LoginModule implementations don't throw NPE\n+ *          from logout method after login failure\n@@ -39,0 +40,1 @@\n+ *          java.management\n@@ -51,1 +53,4 @@\n-        \/\/ Create random JAAS login config.\n+        \/\/ Since there is an infinite number of LoginModule configurations,\n+        \/\/ we use a random number to choose login module names, flag for each,\n+        \/\/ and whether to perform a login. The config is printed out so any\n+        \/\/ failure can be reproduced.\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/SafeLogout.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}