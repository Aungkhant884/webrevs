{"files":[{"patch":"@@ -111,1 +111,1 @@\n-  ands(hdr, hdr, aligned_mask - os::vm_page_size());\n+  ands(hdr, hdr, aligned_mask - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-    ands(swap_reg, swap_reg, (uint64_t)(7 - os::vm_page_size()));\n+    ands(swap_reg, swap_reg, (uint64_t)(7 - (int)os::vm_page_size()));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4536,1 +4536,1 @@\n-  mov(rscratch1, os::vm_page_size());\n+  mov(rscratch1, (int)os::vm_page_size());\n@@ -4538,1 +4538,1 @@\n-  lea(tmp, Address(tmp, -os::vm_page_size()));\n+  lea(tmp, Address(tmp, -(int)os::vm_page_size()));\n@@ -4549,1 +4549,1 @@\n-  for (int i = 0; i < (int)(StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size()) - 1; i++) {\n+  for (int i = 0; i < (int)(StackOverflow::stack_shadow_zone_size() \/ (int)os::vm_page_size()) - 1; i++) {\n@@ -4552,1 +4552,1 @@\n-    lea(tmp, Address(tmp, -os::vm_page_size()));\n+    lea(tmp, Address(tmp, -(int)os::vm_page_size()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1792,1 +1792,1 @@\n-      __ ands(swap_reg, swap_reg, 3 - os::vm_page_size());\n+      __ ands(swap_reg, swap_reg, 3 - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -658,1 +658,1 @@\n-  const int page_size = os::vm_page_size();\n+  const size_t page_size = os::vm_page_size();\n@@ -1063,1 +1063,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -973,1 +973,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  const unsigned int page_size = os::vm_page_size();\n+  const size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zGlobals_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1162,2 +1162,2 @@\n-  const int page_size = os::vm_page_size();\n-  const int n_shadow_pages = ((int)StackOverflow::stack_shadow_zone_size()) \/ page_size;\n+  const size_t page_size = os::vm_page_size();\n+  const int n_shadow_pages = StackOverflow::stack_shadow_zone_size() \/ page_size;\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-  mv(t0, aligned_mask - os::vm_page_size());\n+  mv(t0, aligned_mask - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -834,1 +834,1 @@\n-    mv(t0, (int64_t)(7 - os::vm_page_size()));\n+    mv(t0, (int64_t)(7 - (int)os::vm_page_size()));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1925,1 +1925,1 @@\n-  mv(t0, os::vm_page_size());\n+  mv(t0, (int)os::vm_page_size());\n@@ -1939,1 +1939,1 @@\n-  for (int i = 0; i < (int)(StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size()) - 1; i++) {\n+  for (int i = 0; i < (int)(StackOverflow::stack_shadow_zone_size() \/ (int)os::vm_page_size()) - 1; i++) {\n@@ -1942,1 +1942,1 @@\n-    sub(tmp, tmp, os::vm_page_size());\n+    sub(tmp, tmp, (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1686,1 +1686,1 @@\n-      __ andi(swap_reg, swap_reg, 3 - os::vm_page_size());\n+      __ andi(swap_reg, swap_reg, 3 - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n@@ -889,1 +889,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -790,1 +790,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n@@ -2023,1 +2023,1 @@\n-  const int page_size      = os::vm_page_size();\n+  const size_t page_size      = os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  andptr(hdr, aligned_mask - os::vm_page_size());\n+  andptr(hdr, aligned_mask - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-    andptr(tmpReg, (int32_t) (NOT_LP64(0xFFFFF003) LP64_ONLY(7 - os::vm_page_size())) );\n+    andptr(tmpReg, (int32_t) (NOT_LP64(0xFFFFF003) LP64_ONLY(7 - (int)os::vm_page_size())) );\n@@ -2787,2 +2787,2 @@\n-      andl(result, (os::vm_page_size()-1));\n-      cmpl(result, (os::vm_page_size()-16));\n+      andl(result, ((int)os::vm_page_size()-1));\n+      cmpl(result, ((int)os::vm_page_size()-16));\n@@ -2817,2 +2817,2 @@\n-    andl(result, (os::vm_page_size()-1));\n-    cmpl(result, (os::vm_page_size()-16));\n+    andl(result, ((int)os::vm_page_size()-1));\n+    cmpl(result, ((int)os::vm_page_size()-16));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1272,1 +1272,1 @@\n-    andptr(swap_reg, zero_bits - os::vm_page_size());\n+    andptr(swap_reg, zero_bits - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1276,3 +1276,3 @@\n-  movl(Address(tmp, (-os::vm_page_size())), size );\n-  subptr(tmp, os::vm_page_size());\n-  subl(size, os::vm_page_size());\n+  movl(Address(tmp, (-(int)os::vm_page_size())), size );\n+  subptr(tmp, (int)os::vm_page_size());\n+  subl(size, (int)os::vm_page_size());\n@@ -1287,1 +1287,1 @@\n-  for (int i = 1; i < ((int)StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size()); i++) {\n+  for (int i = 1; i < ((int)StackOverflow::stack_shadow_zone_size() \/ (int)os::vm_page_size()); i++) {\n@@ -1290,1 +1290,1 @@\n-    movptr(Address(tmp, (-i*os::vm_page_size())), size );\n+    movptr(Address(tmp, (-i*(int)os::vm_page_size())), size );\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1705,1 +1705,1 @@\n-      __ andptr(swap_reg, 3 - os::vm_page_size());\n+      __ andptr(swap_reg, 3 - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2166,1 +2166,1 @@\n-      __ andptr(swap_reg, 3 - os::vm_page_size());\n+      __ andptr(swap_reg, 3 - (int)os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n@@ -730,1 +730,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1774,1 +1774,1 @@\n-    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" PTR_FORMAT \")\",\n+    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n@@ -1777,1 +1777,1 @@\n-    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" PTR_FORMAT \")\",\n+    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n@@ -1809,1 +1809,1 @@\n-    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" PTR_FORMAT \")\",\n+    \"addr \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n@@ -1812,1 +1812,1 @@\n-    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" PTR_FORMAT \")\",\n+    \"size \" PTR_FORMAT \" not aligned to vm_page_size (\" SIZE_FORMAT \")\",\n@@ -2217,1 +2217,1 @@\n-static void set_page_size(int page_size) {\n+static void set_page_size(size_t page_size) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1348,1 +1348,1 @@\n-  st->print(\" %dk page\", os::vm_page_size()>>10);\n+  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n@@ -1913,1 +1913,1 @@\n-  int page_size = getpagesize();\n+  size_t page_size = (size_t)getpagesize();\n@@ -1916,1 +1916,1 @@\n-  if (os::vm_page_size() <= 0) {\n+  if (os::vm_page_size() == 0) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -808,1 +808,1 @@\n-    if (minstack_size > (size_t)os::vm_page_size() + PTHREAD_STACK_MIN) {\n+    if (minstack_size > os::vm_page_size() + PTHREAD_STACK_MIN) {\n@@ -1113,1 +1113,1 @@\n-  if (stack_size >= (size_t)(3 * os::vm_page_size())) {\n+  if (stack_size >= 3 * os::vm_page_size()) {\n@@ -2268,1 +2268,1 @@\n-  st->print(\" %dk page\", os::vm_page_size()>>10);\n+  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n@@ -2710,1 +2710,1 @@\n-  if (UseTransparentHugePages && alignment_hint > (size_t)vm_page_size()) {\n+  if (UseTransparentHugePages && alignment_hint > vm_page_size()) {\n@@ -2723,1 +2723,1 @@\n-  if (alignment_hint <= (size_t)os::vm_page_size() || can_commit_large_page_memory()) {\n+  if (alignment_hint <= os::vm_page_size() || can_commit_large_page_memory()) {\n@@ -3454,1 +3454,1 @@\n-          page_size_ != (size_t)os::vm_page_size();\n+          page_size_ != os::vm_page_size();\n@@ -3924,1 +3924,1 @@\n-  if (page_size > (size_t) os::vm_page_size()) {\n+  if (page_size > os::vm_page_size()) {\n@@ -3954,1 +3954,1 @@\n-  assert(page_size > (size_t)os::vm_page_size(), \"Must be a large page size\");\n+  assert(page_size > os::vm_page_size(), \"Must be a large page size\");\n@@ -4284,5 +4284,2 @@\n-\n-  int page_size = sysconf(_SC_PAGESIZE);\n-  OSInfo::set_vm_page_size(page_size);\n-  OSInfo::set_vm_allocation_granularity(page_size);\n-  if (os::vm_page_size() <= 0) {\n+  int sys_pg_size = sysconf(_SC_PAGESIZE);\n+  if (sys_pg_size < 0) {\n@@ -4292,0 +4289,6 @@\n+  size_t page_size = (size_t) sys_pg_size;\n+  OSInfo::set_vm_page_size(page_size);\n+  OSInfo::set_vm_allocation_granularity(page_size);\n+  if (os::vm_page_size() == 0) {\n+    fatal(\"os_linux.cpp: os::init: OSInfo::set_vm_page_size failed\");\n+  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1905,1 +1905,1 @@\n-  st->print(\" %dk page\", os::vm_page_size()>>10);\n+  st->print(\" \" SIZE_FORMAT \"k page\", os::vm_page_size()>>10);\n@@ -2504,1 +2504,1 @@\n-      int page_size = os::vm_page_size();\n+      size_t page_size = os::vm_page_size();\n@@ -3161,1 +3161,1 @@\n-  const size_t default_page_size = (size_t) os::vm_page_size();\n+  const size_t default_page_size = os::vm_page_size();\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  const int page_size = os::vm_page_size();\n+  const size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/os\/windows\/os_windows.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -558,1 +558,1 @@\n-    int page_size = os::vm_page_size();\n+    size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-    int page_size = os::vm_page_size();\n+    size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  const int page_size = os::vm_page_size();\n+  const int page_size = (int)os::vm_page_size();\n@@ -249,1 +249,1 @@\n-  return offset < 0 || offset >= os::vm_page_size();\n+  return offset < 0 || offset >= static_cast<intptr_t>(os::vm_page_size());\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4834,1 +4834,1 @@\n-    _page_size = os::vm_page_size();\n+    _page_size = (int)os::vm_page_size();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-  const size_t alignment = MAX2(page_size(false, 8), (size_t) os::vm_allocation_granularity());\n+  const size_t alignment = MAX2(page_size(false, 8), os::vm_allocation_granularity());\n@@ -356,1 +356,1 @@\n-  const size_t rs_align = MAX2(rs_ps, (size_t) os::vm_allocation_granularity());\n+  const size_t rs_align = MAX2(rs_ps, os::vm_allocation_granularity());\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  size_t align = MAX2((size_t)os::vm_allocation_granularity(), page_size);\n+  size_t align = MAX2(os::vm_allocation_granularity(), page_size);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonArguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            \"Given used reserved space size needs to be OS page size aligned (%d bytes) but is \" SIZE_FORMAT, os::vm_page_size(), used_size);\n+            \"Given used reserved space size needs to be OS page size aligned (\" SIZE_FORMAT \" bytes) but is \" SIZE_FORMAT, os::vm_page_size(), used_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,1 +590,1 @@\n-      && page_size() > (size_t)os::vm_page_size()) {\n+      && page_size() > os::vm_page_size()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  const size_t rs_align = page_sz == (size_t) os::vm_page_size() ? 0 :\n+  const size_t rs_align = page_sz == os::vm_page_size() ? 0 :\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-  const size_t rs_align = page_sz == (size_t) os::vm_page_size() ? 0 :\n+  const size_t rs_align = page_sz == os::vm_page_size() ? 0 :\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,2 +102,2 @@\n-  const size_t rs_align = _page_size == (size_t) os::vm_page_size() ? 0 :\n-    MAX2(_page_size, (size_t) os::vm_allocation_granularity());\n+  const size_t rs_align = _page_size == os::vm_page_size() ? 0 :\n+    MAX2(_page_size, os::vm_allocation_granularity());\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  size_t page_size = (size_t)os::vm_page_size();\n+  size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,3 +180,3 @@\n-  size_t heap_page_size   = UseLargePages ? (size_t)os::large_page_size() : (size_t)os::vm_page_size();\n-  size_t bitmap_page_size = UseLargePages ? (size_t)os::large_page_size() : (size_t)os::vm_page_size();\n-  size_t region_page_size = UseLargePages ? (size_t)os::large_page_size() : (size_t)os::vm_page_size();\n+  size_t heap_page_size   = UseLargePages ? os::large_page_size() : os::vm_page_size();\n+  size_t bitmap_page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n+  size_t region_page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -555,1 +555,1 @@\n-  int page_size = os::vm_page_size();\n+  size_t page_size = os::vm_page_size();\n@@ -560,1 +560,1 @@\n-      page_size = (int)large_page_size;\n+      page_size = large_page_size;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    static int vm_page_size;\n+    static size_t vm_page_size;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-int CompilerToVM::Data::vm_page_size;\n+size_t CompilerToVM::Data::vm_page_size;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static_field(CompilerToVM::Data,             vm_page_size,                           int)                                          \\\n+  static_field(CompilerToVM::Data,             vm_page_size,                           size_t)                                       \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  int alignment = os::vm_allocation_granularity();\n+  size_t alignment = os::vm_allocation_granularity();\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-  const size_t alignment = (size_t)os::vm_page_size();\n+  const size_t alignment = os::vm_page_size();\n@@ -225,1 +225,1 @@\n-  const size_t reserved_segments_alignment = MAX2((size_t)os::vm_page_size(), granularity);\n+  const size_t reserved_segments_alignment = MAX2(os::vm_page_size(), granularity);\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    _commit_granule_bytes = MAX2((size_t)os::vm_page_size(), 64 * K);\n+    _commit_granule_bytes = MAX2(os::vm_page_size(), 64 * K);\n@@ -60,1 +60,1 @@\n-    _commit_granule_bytes = MAX2((size_t)os::vm_page_size(), 16 * K);\n+    _commit_granule_bytes = MAX2(os::vm_page_size(), 16 * K);\n@@ -66,1 +66,1 @@\n-    _commit_granule_bytes = MAX2((size_t)os::vm_page_size(), 64 * K);\n+    _commit_granule_bytes = MAX2(os::vm_page_size(), 64 * K);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  if (preferred_page_size != (size_t)os::vm_page_size()) {\n+  if (preferred_page_size != os::vm_page_size()) {\n@@ -134,1 +134,1 @@\n-         page_size != (size_t) os::vm_page_size();\n+         page_size != os::vm_page_size();\n@@ -259,1 +259,1 @@\n-    } while (page_size > (size_t) os::vm_page_size());\n+    } while (page_size > os::vm_page_size());\n@@ -264,1 +264,1 @@\n-    assert(page_size == (size_t) os::vm_page_size(), \"inv\");\n+    assert(page_size == os::vm_page_size(), \"inv\");\n@@ -287,1 +287,1 @@\n-  assert(page_size >= (size_t) os::vm_page_size(), \"Invalid page size\");\n+  assert(page_size >= os::vm_page_size(), \"Invalid page size\");\n@@ -297,1 +297,1 @@\n-  alignment = MAX2(alignment, (size_t)os::vm_page_size());\n+  alignment = MAX2(alignment, os::vm_page_size());\n@@ -362,1 +362,1 @@\n-  assert(_alignment >= (size_t)os::vm_page_size(), \"must be at least page size big\");\n+  assert(_alignment >= os::vm_page_size(), \"must be at least page size big\");\n@@ -495,1 +495,1 @@\n-  guarantee(alignment == MAX2(alignment, (size_t)os::vm_page_size()), \"alignment too small\");\n+  guarantee(alignment == MAX2(alignment, os::vm_page_size()), \"alignment too small\");\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  assert((intptr_t)base() <= ((intptr_t)_heap_address_range.start() - os::vm_page_size()) ||\n+  assert((intptr_t)base() <= ((intptr_t)_heap_address_range.start() - (intptr_t)os::vm_page_size()) ||\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-          (C->has_java_calls() || frame_size_in_bytes > os::vm_page_size()>>3\n+          (C->has_java_calls() || frame_size_in_bytes > (int)(os::vm_page_size())>>3\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-  return os::vm_page_size();\n+  return (int)os::vm_page_size();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1482,1 +1482,1 @@\n-  size_t displacement_due_to_null_page = align_up((size_t)os::vm_page_size(),\n+  size_t displacement_due_to_null_page = align_up(os::vm_page_size(),\n@@ -1551,1 +1551,1 @@\n-                                          (size_t)os::vm_allocation_granularity(),\n+                                          os::vm_allocation_granularity(),\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -274,2 +274,2 @@\n-static bool stack_overflow_check(JavaThread* thread, int size, address sp) {\n-  const int page_size = os::vm_page_size();\n+static bool stack_overflow_check(JavaThread* thread, size_t size, address sp) {\n+  const size_t page_size = os::vm_page_size();\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                        \"less than page size (%d)\\n\",\n+                        \"less than page size (\" SIZE_FORMAT \")\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -554,1 +554,1 @@\n-      guarantee((size_t)v >= (size_t)os::vm_page_size(),\n+      guarantee((size_t)v >= os::vm_page_size(),\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-  static int vm_page_size() { return OSInfo::vm_page_size(); }\n+  static size_t vm_page_size() { return OSInfo::vm_page_size(); }\n@@ -416,1 +416,1 @@\n-  static int vm_allocation_granularity() { return OSInfo::vm_allocation_granularity(); }\n+  static size_t vm_allocation_granularity() { return OSInfo::vm_allocation_granularity(); }\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-int OSInfo::_vm_page_size = -1;\n-int OSInfo::_vm_allocation_granularity = -1;\n+size_t OSInfo::_vm_page_size = 0;\n+size_t OSInfo::_vm_allocation_granularity = 0;\n","filename":"src\/hotspot\/share\/runtime\/osInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-  static int    _vm_page_size;\n-  static int    _vm_allocation_granularity;\n+  static size_t    _vm_page_size;\n+  static size_t    _vm_allocation_granularity;\n@@ -39,1 +39,1 @@\n-  static int vm_page_size() { return _vm_page_size; }\n+  static size_t vm_page_size() { return _vm_page_size; }\n@@ -42,1 +42,1 @@\n-  static int vm_allocation_granularity() { return _vm_allocation_granularity; }\n+  static size_t vm_allocation_granularity() { return _vm_allocation_granularity; }\n@@ -44,3 +44,2 @@\n-  static void set_vm_page_size(int n) {\n-    assert(_vm_page_size < 0, \"init only once\");\n-    assert(n > 0, \"sanity\");\n+  static void set_vm_page_size(size_t n) {\n+    assert(_vm_page_size == 0, \"init only once\");\n@@ -50,3 +49,2 @@\n-  static void set_vm_allocation_granularity(int n) {\n-    assert(_vm_allocation_granularity < 0, \"init only once\");\n-    assert(n > 0, \"sanity\");\n+  static void set_vm_allocation_granularity(size_t n) {\n+    assert(_vm_allocation_granularity == 0, \"init only once\");\n","filename":"src\/hotspot\/share\/runtime\/osInfo.hpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  size_t capacity = align_up(PerfDataMemorySize,\n+  size_t capacity = align_up((size_t)PerfDataMemorySize,\n@@ -100,2 +100,2 @@\n-                          \" os::vm_allocation_granularity = %d,\"\n-                          \" adjusted size = \" SIZE_FORMAT,\n+                          \" os::vm_allocation_granularity = \" SIZE_FORMAT\n+                          \", adjusted size = \" SIZE_FORMAT,\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-      ASSERT_EQ((size_t) os::vm_page_size(), os::large_page_size()) << \"Test needs further refinement\";\n+      ASSERT_EQ(os::vm_page_size(), os::large_page_size()) << \"Test needs further refinement\";\n@@ -405,1 +405,1 @@\n-      ASSERT_EQ((size_t)os::vm_page_size(), os::large_page_size()) << \"Test needs further refinement\";\n+      ASSERT_EQ(os::vm_page_size(), os::large_page_size()) << \"Test needs further refinement\";\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    EXPECT_TRUE(is_aligned(32 * M, (size_t)os::vm_page_size()));\n+    EXPECT_TRUE(is_aligned(32 * M, os::vm_page_size()));\n","filename":"test\/hotspot\/gtest\/runtime\/test_arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -701,1 +701,1 @@\n-  ASSERT_LE(os::min_page_size(), (size_t)os::vm_page_size());\n+  ASSERT_LE(os::min_page_size(), os::vm_page_size());\n@@ -707,1 +707,1 @@\n-  ASSERT_EQ(os::page_sizes().smallest(), (size_t)os::vm_page_size());\n+  ASSERT_EQ(os::page_sizes().smallest(), os::vm_page_size());\n@@ -710,1 +710,1 @@\n-    ASSERT_GT(os::large_page_size(), (size_t)os::vm_page_size());\n+    ASSERT_GT(os::large_page_size(), os::vm_page_size());\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  const intptr_t page_sizes[] = {os::vm_page_size(), 4096, 8192, 65536, 2 * 1024 * 1024};\n+  const intptr_t page_sizes[] = {static_cast<intptr_t>(os::vm_page_size()), 4096, 8192, 65536, 2 * 1024 * 1024};\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}