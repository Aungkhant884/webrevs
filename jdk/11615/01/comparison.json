{"files":[{"patch":"@@ -36,2 +36,0 @@\n-import sun.nio.cs.StreamDecoder;\n-import sun.nio.cs.StreamEncoder;\n@@ -85,1 +83,1 @@\n- * <blockquote><pre>{@code\n+ * {@snippet lang=java :\n@@ -93,1 +91,1 @@\n- * }<\/pre><\/blockquote>\n+ * }\n@@ -97,0 +95,1 @@\n+ * @sealedGraph\n@@ -98,2 +97,1 @@\n-\n-public class Console implements Flushable\n+public sealed class Console implements Flushable permits ConsoleImpl, ProxyingConsole\n@@ -108,1 +106,2 @@\n-        return pw;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -143,1 +142,2 @@\n-        return reader;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -177,2 +177,2 @@\n-        formatter.format(fmt, args).flush();\n-        return this;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -217,1 +217,2 @@\n-        return format(format, args);\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -252,15 +253,2 @@\n-        String line = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                if (!fmt.isEmpty())\n-                    pw.format(fmt, args);\n-                try {\n-                    char[] ca = readline(false);\n-                    if (ca != null)\n-                        line = new String(ca);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-            }\n-        }\n-        return line;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -280,1 +268,2 @@\n-        return readLine(\"\");\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -316,58 +305,2 @@\n-        char[] passwd = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                installShutdownHook();\n-                try {\n-                    restoreEcho = echo(false);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-                IOError ioe = null;\n-                try {\n-                    if (!fmt.isEmpty())\n-                        pw.format(fmt, args);\n-                    passwd = readline(true);\n-                } catch (IOException x) {\n-                    ioe = new IOError(x);\n-                } finally {\n-                    try {\n-                        if (restoreEcho)\n-                            restoreEcho = echo(true);\n-                    } catch (IOException x) {\n-                        if (ioe == null)\n-                            ioe = new IOError(x);\n-                        else\n-                            ioe.addSuppressed(x);\n-                    }\n-                    if (ioe != null)\n-                        throw ioe;\n-                }\n-                pw.println();\n-            }\n-        }\n-        return passwd;\n-    }\n-\n-    private void installShutdownHook() {\n-        if (shutdownHookInstalled)\n-            return;\n-        try {\n-            \/\/ Add a shutdown hook to restore console's echo state should\n-            \/\/ it be necessary.\n-            SharedSecrets.getJavaLangAccess()\n-                .registerShutdownHook(0 \/* shutdown hook invocation order *\/,\n-                    false \/* only register if shutdown is not in progress *\/,\n-                    new Runnable() {\n-                        public void run() {\n-                            try {\n-                                if (restoreEcho) {\n-                                    echo(true);\n-                                }\n-                            } catch (IOException x) { }\n-                        }\n-                    });\n-        } catch (IllegalStateException e) {\n-            \/\/ shutdown is already in progress and readPassword is first used\n-            \/\/ by a shutdown hook\n-        }\n-        shutdownHookInstalled = true;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -387,1 +320,2 @@\n-        return readPassword(\"\");\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -395,1 +329,2 @@\n-        pw.flush();\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -398,1 +333,0 @@\n-\n@@ -413,2 +347,2 @@\n-        assert CHARSET != null : \"charset() should not return null\";\n-        return CHARSET;\n+        throw new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -417,9 +351,0 @@\n-    private Object readLock;\n-    private Object writeLock;\n-    private Reader reader;\n-    private Writer out;\n-    private PrintWriter pw;\n-    private Formatter formatter;\n-    private char[] rcb;\n-    private boolean restoreEcho;\n-    private boolean shutdownHookInstalled;\n@@ -434,144 +359,2 @@\n-    private static native boolean echo(boolean on) throws IOException;\n-\n-    private char[] readline(boolean zeroOut) throws IOException {\n-        int len = reader.read(rcb, 0, rcb.length);\n-        if (len < 0)\n-            return null;  \/\/EOL\n-        if (rcb[len-1] == '\\r')\n-            len--;        \/\/remove CR at end;\n-        else if (rcb[len-1] == '\\n') {\n-            len--;        \/\/remove LF at end;\n-            if (len > 0 && rcb[len-1] == '\\r')\n-                len--;    \/\/remove the CR, if there is one\n-        }\n-        char[] b = new char[len];\n-        if (len > 0) {\n-            System.arraycopy(rcb, 0, b, 0, len);\n-            if (zeroOut) {\n-                Arrays.fill(rcb, 0, len, ' ');\n-            }\n-        }\n-        return b;\n-    }\n-\n-    private char[] grow() {\n-        assert Thread.holdsLock(readLock);\n-        char[] t = new char[rcb.length * 2];\n-        System.arraycopy(rcb, 0, t, 0, rcb.length);\n-        rcb = t;\n-        return rcb;\n-    }\n-\n-    class LineReader extends Reader {\n-        private Reader in;\n-        private char[] cb;\n-        private int nChars, nextChar;\n-        boolean leftoverLF;\n-        LineReader(Reader in) {\n-            this.in = in;\n-            cb = new char[1024];\n-            nextChar = nChars = 0;\n-            leftoverLF = false;\n-        }\n-        public void close () {}\n-        public boolean ready() throws IOException {\n-            \/\/in.ready synchronizes on readLock already\n-            return in.ready();\n-        }\n-\n-        public int read(char[] cbuf, int offset, int length)\n-            throws IOException\n-        {\n-            int off = offset;\n-            int end = offset + length;\n-            if (offset < 0 || offset > cbuf.length || length < 0 ||\n-                end < 0 || end > cbuf.length) {\n-                throw new IndexOutOfBoundsException();\n-            }\n-            synchronized(readLock) {\n-                boolean eof = false;\n-                char c = 0;\n-                for (;;) {\n-                    if (nextChar >= nChars) {   \/\/fill\n-                        int n = 0;\n-                        do {\n-                            n = in.read(cb, 0, cb.length);\n-                        } while (n == 0);\n-                        if (n > 0) {\n-                            nChars = n;\n-                            nextChar = 0;\n-                            if (n < cb.length &&\n-                                cb[n-1] != '\\n' && cb[n-1] != '\\r') {\n-                                \/*\n-                                 * we're in canonical mode so each \"fill\" should\n-                                 * come back with an eol. if there no lf or nl at\n-                                 * the end of returned bytes we reached an eof.\n-                                 *\/\n-                                eof = true;\n-                            }\n-                        } else { \/*EOF*\/\n-                            if (off - offset == 0)\n-                                return -1;\n-                            return off - offset;\n-                        }\n-                    }\n-                    if (leftoverLF && cbuf == rcb && cb[nextChar] == '\\n') {\n-                        \/*\n-                         * if invoked by our readline, skip the leftover, otherwise\n-                         * return the LF.\n-                         *\/\n-                        nextChar++;\n-                    }\n-                    leftoverLF = false;\n-                    while (nextChar < nChars) {\n-                        c = cbuf[off++] = cb[nextChar];\n-                        cb[nextChar++] = 0;\n-                        if (c == '\\n') {\n-                            return off - offset;\n-                        } else if (c == '\\r') {\n-                            if (off == end) {\n-                                \/* no space left even the next is LF, so return\n-                                 * whatever we have if the invoker is not our\n-                                 * readLine()\n-                                 *\/\n-                                if (cbuf == rcb) {\n-                                    cbuf = grow();\n-                                    end = cbuf.length;\n-                                } else {\n-                                    leftoverLF = true;\n-                                    return off - offset;\n-                                }\n-                            }\n-                            if (nextChar == nChars && in.ready()) {\n-                                \/*\n-                                 * we have a CR and we reached the end of\n-                                 * the read in buffer, fill to make sure we\n-                                 * don't miss a LF, if there is one, it's possible\n-                                 * that it got cut off during last round reading\n-                                 * simply because the read in buffer was full.\n-                                 *\/\n-                                nChars = in.read(cb, 0, cb.length);\n-                                nextChar = 0;\n-                            }\n-                            if (nextChar < nChars && cb[nextChar] == '\\n') {\n-                                cbuf[off++] = '\\n';\n-                                nextChar++;\n-                            }\n-                            return off - offset;\n-                        } else if (off == end) {\n-                           if (cbuf == rcb) {\n-                                cbuf = grow();\n-                                end = cbuf.length;\n-                           } else {\n-                               return off - offset;\n-                           }\n-                        }\n-                    }\n-                    if (eof)\n-                        return off - offset;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static final Charset CHARSET;\n+    static native boolean echo(boolean on) throws IOException;\n+    static final Charset CHARSET;\n@@ -622,1 +405,1 @@\n-                        .orElse(istty ? new Console() : null);\n+                        .orElse(istty ? new ConsoleImpl() : null);\n@@ -627,1 +410,1 @@\n-            return istty ? new Console() : null;\n+            return istty ? new ConsoleImpl() : null;\n@@ -634,15 +417,1 @@\n-    Console() {\n-        readLock = new Object();\n-        writeLock = new Object();\n-        out = StreamEncoder.forOutputStreamWriter(\n-                  new FileOutputStream(FileDescriptor.out),\n-                  writeLock,\n-                  CHARSET);\n-        pw = new PrintWriter(out, true) { public void close() {} };\n-        formatter = new Formatter(out);\n-        reader = new LineReader(StreamDecoder.forInputStreamReader(\n-                     new FileInputStream(FileDescriptor.in),\n-                     readLock,\n-                     CHARSET));\n-        rcb = new char[1024];\n-    }\n+    Console() {}\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":29,"deletions":260,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -0,0 +1,358 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.util.*;\n+import java.nio.charset.Charset;\n+import jdk.internal.access.SharedSecrets;\n+import sun.nio.cs.StreamDecoder;\n+import sun.nio.cs.StreamEncoder;\n+\n+\/**\n+ * Console implementation based on the platform's TTY.\n+ *\/\n+\n+final class ConsoleImpl extends Console\n+{\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public PrintWriter writer() {\n+        return pw;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Reader reader() {\n+        return reader;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console format(String fmt, Object ...args) {\n+        formatter.format(fmt, args).flush();\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console printf(String format, Object ... args) {\n+        return format(format, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine(String fmt, Object ... args) {\n+        String line = null;\n+        synchronized (writeLock) {\n+            synchronized(readLock) {\n+                if (!fmt.isEmpty())\n+                    pw.format(fmt, args);\n+                try {\n+                    char[] ca = readline(false);\n+                    if (ca != null)\n+                        line = new String(ca);\n+                } catch (IOException x) {\n+                    throw new IOError(x);\n+                }\n+            }\n+        }\n+        return line;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine() {\n+        return readLine(\"\");\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword(String fmt, Object ... args) {\n+        char[] passwd = null;\n+        synchronized (writeLock) {\n+            synchronized(readLock) {\n+                installShutdownHook();\n+                try {\n+                    restoreEcho = Console.echo(false);\n+                } catch (IOException x) {\n+                    throw new IOError(x);\n+                }\n+                IOError ioe = null;\n+                try {\n+                    if (!fmt.isEmpty())\n+                        pw.format(fmt, args);\n+                    passwd = readline(true);\n+                } catch (IOException x) {\n+                    ioe = new IOError(x);\n+                } finally {\n+                    try {\n+                        if (restoreEcho)\n+                            restoreEcho = Console.echo(true);\n+                    } catch (IOException x) {\n+                        if (ioe == null)\n+                            ioe = new IOError(x);\n+                        else\n+                            ioe.addSuppressed(x);\n+                    }\n+                    if (ioe != null)\n+                        throw ioe;\n+                }\n+                pw.println();\n+            }\n+        }\n+        return passwd;\n+    }\n+\n+    private void installShutdownHook() {\n+        if (shutdownHookInstalled)\n+            return;\n+        try {\n+            \/\/ Add a shutdown hook to restore console's echo state should\n+            \/\/ it be necessary.\n+            SharedSecrets.getJavaLangAccess()\n+                    .registerShutdownHook(0 \/* shutdown hook invocation order *\/,\n+                            false \/* only register if shutdown is not in progress *\/,\n+                            new Runnable() {\n+                                public void run() {\n+                                    try {\n+                                        if (restoreEcho) {\n+                                            Console.echo(true);\n+                                        }\n+                                    } catch (IOException x) { }\n+                                }\n+                            });\n+        } catch (IllegalStateException e) {\n+            \/\/ shutdown is already in progress and readPassword is first used\n+            \/\/ by a shutdown hook\n+        }\n+        shutdownHookInstalled = true;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword() {\n+        return readPassword(\"\");\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public void flush() {\n+        pw.flush();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Charset charset() {\n+        assert CHARSET != null : \"charset() should not return null\";\n+        return CHARSET;\n+    }\n+\n+    private final Object readLock;\n+    private final Object writeLock;\n+    private final Reader reader;\n+    private final Writer out;\n+    private final PrintWriter pw;\n+    private final Formatter formatter;\n+    private char[] rcb;\n+    private boolean restoreEcho;\n+    private boolean shutdownHookInstalled;\n+\n+    private char[] readline(boolean zeroOut) throws IOException {\n+        int len = reader.read(rcb, 0, rcb.length);\n+        if (len < 0)\n+            return null;  \/\/EOL\n+        if (rcb[len-1] == '\\r')\n+            len--;        \/\/remove CR at end;\n+        else if (rcb[len-1] == '\\n') {\n+            len--;        \/\/remove LF at end;\n+            if (len > 0 && rcb[len-1] == '\\r')\n+                len--;    \/\/remove the CR, if there is one\n+        }\n+        char[] b = new char[len];\n+        if (len > 0) {\n+            System.arraycopy(rcb, 0, b, 0, len);\n+            if (zeroOut) {\n+                Arrays.fill(rcb, 0, len, ' ');\n+            }\n+        }\n+        return b;\n+    }\n+\n+    private char[] grow() {\n+        assert Thread.holdsLock(readLock);\n+        char[] t = new char[rcb.length * 2];\n+        System.arraycopy(rcb, 0, t, 0, rcb.length);\n+        rcb = t;\n+        return rcb;\n+    }\n+\n+    class LineReader extends Reader {\n+        private final Reader in;\n+        private final char[] cb;\n+        private int nChars, nextChar;\n+        boolean leftoverLF;\n+        LineReader(Reader in) {\n+            this.in = in;\n+            cb = new char[1024];\n+            nextChar = nChars = 0;\n+            leftoverLF = false;\n+        }\n+        public void close () {}\n+        public boolean ready() throws IOException {\n+            \/\/in.ready synchronizes on readLock already\n+            return in.ready();\n+        }\n+\n+        public int read(char[] cbuf, int offset, int length)\n+                throws IOException\n+        {\n+            int off = offset;\n+            int end = offset + length;\n+            if (offset < 0 || offset > cbuf.length || length < 0 ||\n+                    end < 0 || end > cbuf.length) {\n+                throw new IndexOutOfBoundsException();\n+            }\n+            synchronized(readLock) {\n+                boolean eof = false;\n+                char c;\n+                for (;;) {\n+                    if (nextChar >= nChars) {   \/\/fill\n+                        int n;\n+                        do {\n+                            n = in.read(cb, 0, cb.length);\n+                        } while (n == 0);\n+                        if (n > 0) {\n+                            nChars = n;\n+                            nextChar = 0;\n+                            if (n < cb.length &&\n+                                    cb[n-1] != '\\n' && cb[n-1] != '\\r') {\n+                                \/*\n+                                 * we're in canonical mode so each \"fill\" should\n+                                 * come back with an eol. if there is no lf or nl at\n+                                 * the end of returned bytes we reached an eof.\n+                                 *\/\n+                                eof = true;\n+                            }\n+                        } else { \/*EOF*\/\n+                            if (off - offset == 0)\n+                                return -1;\n+                            return off - offset;\n+                        }\n+                    }\n+                    if (leftoverLF && cbuf == rcb && cb[nextChar] == '\\n') {\n+                        \/*\n+                         * if invoked by our readline, skip the leftover, otherwise\n+                         * return the LF.\n+                         *\/\n+                        nextChar++;\n+                    }\n+                    leftoverLF = false;\n+                    while (nextChar < nChars) {\n+                        c = cbuf[off++] = cb[nextChar];\n+                        cb[nextChar++] = 0;\n+                        if (c == '\\n') {\n+                            return off - offset;\n+                        } else if (c == '\\r') {\n+                            if (off == end) {\n+                                \/* no space left even the next is LF, so return\n+                                 * whatever we have if the invoker is not our\n+                                 * readLine()\n+                                 *\/\n+                                if (cbuf == rcb) {\n+                                    cbuf = grow();\n+                                } else {\n+                                    leftoverLF = true;\n+                                    return off - offset;\n+                                }\n+                            }\n+                            if (nextChar == nChars && in.ready()) {\n+                                \/*\n+                                 * we have a CR and we reached the end of\n+                                 * the read in buffer, fill to make sure we\n+                                 * don't miss a LF, if there is one, it's possible\n+                                 * that it got cut off during last round reading\n+                                 * simply because the read in buffer was full.\n+                                 *\/\n+                                nChars = in.read(cb, 0, cb.length);\n+                                nextChar = 0;\n+                            }\n+                            if (nextChar < nChars && cb[nextChar] == '\\n') {\n+                                cbuf[off++] = '\\n';\n+                                nextChar++;\n+                            }\n+                            return off - offset;\n+                        } else if (off == end) {\n+                            if (cbuf == rcb) {\n+                                cbuf = grow();\n+                                end = cbuf.length;\n+                            } else {\n+                                return off - offset;\n+                            }\n+                        }\n+                    }\n+                    if (eof)\n+                        return off - offset;\n+                }\n+            }\n+        }\n+    }\n+\n+    ConsoleImpl() {\n+        readLock = new Object();\n+        writeLock = new Object();\n+        out = StreamEncoder.forOutputStreamWriter(\n+                new FileOutputStream(FileDescriptor.out),\n+                writeLock,\n+                CHARSET);\n+        pw = new PrintWriter(out, true) { public void close() {} };\n+        formatter = new Formatter(out);\n+        reader = new LineReader(StreamDecoder.forInputStreamReader(\n+                new FileInputStream(FileDescriptor.in),\n+                readLock,\n+                CHARSET));\n+        rcb = new char[1024];\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/ConsoleImpl.java","additions":358,"deletions":0,"binary":false,"changes":358,"status":"added"}]}