{"files":[{"patch":"@@ -103,6 +103,6 @@\n-   \/**\n-    * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n-    * associated with this console.\n-    *\n-    * @return  The printwriter associated with this console\n-    *\/\n+    \/**\n+     * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n+     * associated with this console.\n+     *\n+     * @return  The printwriter associated with this console\n+     *\/\n@@ -110,2 +110,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -114,31 +113,31 @@\n-   \/**\n-    * Retrieves the unique {@link java.io.Reader Reader} object associated\n-    * with this console.\n-    * <p>\n-    * This method is intended to be used by sophisticated applications, for\n-    * example, a {@link java.util.Scanner} object which utilizes the rich\n-    * parsing\/scanning functionality provided by the {@code Scanner}:\n-    * <blockquote><pre>\n-    * Console con = System.console();\n-    * if (con != null) {\n-    *     Scanner sc = new Scanner(con.reader());\n-    *     ...\n-    * }\n-    * <\/pre><\/blockquote>\n-    * <p>\n-    * For simple applications requiring only line-oriented reading, use\n-    * {@link #readLine}.\n-    * <p>\n-    * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n-    * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n-    * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n-    * on the returned object will not read in characters beyond the line\n-    * bound for each invocation, even if the destination buffer has space for\n-    * more characters. The {@code Reader}'s {@code read} methods may block if a\n-    * line bound has not been entered or reached on the console's input device.\n-    * A line bound is considered to be any one of a line feed ({@code '\\n'}),\n-    * a carriage return ({@code '\\r'}), a carriage return followed immediately\n-    * by a linefeed, or an end of stream.\n-    *\n-    * @return  The reader associated with this console\n-    *\/\n+    \/**\n+     * Retrieves the unique {@link java.io.Reader Reader} object associated\n+     * with this console.\n+     * <p>\n+     * This method is intended to be used by sophisticated applications, for\n+     * example, a {@link java.util.Scanner} object which utilizes the rich\n+     * parsing\/scanning functionality provided by the {@code Scanner}:\n+     * <blockquote><pre>\n+     * Console con = System.console();\n+     * if (con != null) {\n+     *     Scanner sc = new Scanner(con.reader());\n+     *     ...\n+     * }\n+     * <\/pre><\/blockquote>\n+     * <p>\n+     * For simple applications requiring only line-oriented reading, use\n+     * {@link #readLine}.\n+     * <p>\n+     * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n+     * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n+     * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n+     * on the returned object will not read in characters beyond the line\n+     * bound for each invocation, even if the destination buffer has space for\n+     * more characters. The {@code Reader}'s {@code read} methods may block if a\n+     * line bound has not been entered or reached on the console's input device.\n+     * A line bound is considered to be any one of a line feed ({@code '\\n'}),\n+     * a carriage return ({@code '\\r'}), a carriage return followed immediately\n+     * by a linefeed, or an end of stream.\n+     *\n+     * @return  The reader associated with this console\n+     *\/\n@@ -146,2 +145,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -150,30 +148,30 @@\n-   \/**\n-    * Writes a formatted string to this console's output stream using\n-    * the specified format string and arguments.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The number of arguments is\n-    *         variable and may be zero.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *         The behaviour on a\n-    *         {@code null} argument depends on the <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n-    *          of the formatter class specification.\n-    *\n-    * @return  This console\n-    *\/\n+    \/**\n+     * Writes a formatted string to this console's output stream using\n+     * the specified format string and arguments.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n+     *          of the formatter class specification.\n+     *\n+     * @return  This console\n+     *\/\n@@ -181,2 +179,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -185,35 +182,35 @@\n-   \/**\n-    * A convenience method to write a formatted string to this console's\n-    * output stream using the specified format string and arguments.\n-    *\n-    * <p> An invocation of this method of the form\n-    * {@code con.printf(format, args)} behaves in exactly the same way\n-    * as the invocation of\n-    * <pre>con.format(format, args)<\/pre>.\n-    *\n-    * @param  format\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The number of arguments is\n-    *         variable and may be zero.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *         The behaviour on a\n-    *         {@code null} argument depends on the <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n-    *          formatter class specification.\n-    *\n-    * @return  This console\n-    *\/\n+    \/**\n+     * A convenience method to write a formatted string to this console's\n+     * output stream using the specified format string and arguments.\n+     *\n+     * <p> An invocation of this method of the form\n+     * {@code con.printf(format, args)} behaves in exactly the same way\n+     * as the invocation of\n+     * <pre>con.format(format, args)<\/pre>.\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @return  This console\n+     *\/\n@@ -221,2 +218,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -225,31 +221,31 @@\n-   \/**\n-    * Provides a formatted prompt, then reads a single line of text from the\n-    * console.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n-    *          of the formatter class specification.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A string containing the line read from the console, not\n-    *          including any line-termination characters, or {@code null}\n-    *          if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Provides a formatted prompt, then reads a single line of text from the\n+     * console.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n+     *          of the formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     *\/\n@@ -257,2 +253,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -261,10 +256,10 @@\n-   \/**\n-    * Reads a single line of text from the console.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A string containing the line read from the console, not\n-    *          including any line-termination characters, or {@code null}\n-    *          if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Reads a single line of text from the console.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     *\/\n@@ -272,2 +267,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -276,32 +270,32 @@\n-   \/**\n-    * Provides a formatted prompt, then reads a password or passphrase from\n-    * the console with echoing disabled.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n-    *         for the prompt text.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a>\n-    *          section of the formatter class specification.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A character array containing the password or passphrase read\n-    *          from the console, not including any line-termination characters,\n-    *          or {@code null} if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Provides a formatted prompt, then reads a password or passphrase from\n+     * the console with echoing disabled.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *         for the prompt text.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a>\n+     *          section of the formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A character array containing the password or passphrase read\n+     *          from the console, not including any line-termination characters,\n+     *          or {@code null} if an end of stream has been reached.\n+     *\/\n@@ -309,2 +303,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -313,10 +306,10 @@\n-   \/**\n-    * Reads a password or passphrase from the console with echoing disabled\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A character array containing the password or passphrase read\n-    *          from the console, not including any line-termination characters,\n-    *          or {@code null} if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Reads a password or passphrase from the console with echoing disabled\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A character array containing the password or passphrase read\n+     *          from the console, not including any line-termination characters,\n+     *          or {@code null} if an end of stream has been reached.\n+     *\/\n@@ -324,2 +317,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -333,2 +325,1 @@\n-        throw new UnsupportedOperationException(\n-                \"Console class itself does not provide implementation\");\n+        throw newUnsupportedOperationException();\n@@ -351,1 +342,5 @@\n-        throw new UnsupportedOperationException(\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    private static UnsupportedOperationException newUnsupportedOperationException() {\n+        return new UnsupportedOperationException(\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":199,"deletions":204,"binary":false,"changes":403,"status":"modified"}]}