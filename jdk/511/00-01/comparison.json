{"files":[{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class BitfieldInsert {\n+\n+    public int intValue;\n+\n+    @Benchmark \n+    public int bench1() {\n+        int b1, b2, b3, b4;\n+\tint base = intValue;\n+        int a1 = base + 1;\n+        int a2 = a1 + 1;\n+        int a3 = a1 + 2;\n+        int a4 = a1 + 3;\n+\n+        b1 = (base & 0x1) | ((a1 & 0x1) << 1) | ((a2 & 0x1) << 2) | ((a3 & 0x1) << 3) | ((a4 & 0x1) << 4);\n+        b2 = (base & 0x1) | ((a1 & 0x3) << 1) | ((a2 & 0x3) << 3) | ((a3 & 0x3) << 5) | ((a4 & 0x3) << 7);\n+        b3 = (base & 0x1) | ((a1 & 0x7) << 1) | ((a2 & 0x7) << 4) | ((a3 & 0x7) << 7) | ((a4 & 0x7) << 10);\n+        b4 = (base & 0x1) | ((a1 & 0xf) << 1) | ((a2 & 0xf) << 5) | ((a3 & 0xf) << 9) | ((a4 & 0xf) << 13);\n+\n+        a1 = (base & 0x1) | ((b1 & 0x1) << 1) | ((b2 & 0x1) << 2) | ((b3 & 0x1) << 3) | ((b4 & 0x1) << 4);\n+        a2 = (base & 0x1) | ((b1 & 0x3) << 1) | ((b2 & 0x3) << 3) | ((b3 & 0x3) << 5) | ((b4 & 0x3) << 7);\n+        a3 = (base & 0x1) | ((b1 & 0x7) << 1) | ((b2 & 0x7) << 4) | ((b3 & 0x7) << 7) | ((b4 & 0x7) << 10);\n+        a4 = (base & 0x1) | ((b1 & 0xf) << 1) | ((b2 & 0xf) << 5) | ((b3 & 0xf) << 9) | ((b4 & 0xf) << 13);\n+\n+        return a1 + a2 + a3 + a4;\n+    }\n+\n+    @Benchmark\n+    public int bench2() {\n+        int a = intValue;\n+        int b = intValue + 1;\n+        int c = intValue + 2;\n+        int d = intValue + 3;\n+        int e = intValue + 4;\n+        int f = intValue + 5;\n+        int g = intValue + 6;\n+        int h = intValue + 7;\n+        int i = intValue + 8;\n+        int j = intValue + 9;\n+        int k = intValue + 10;\n+        int l = intValue + 11;\n+        int m = intValue + 12;\n+        int n = intValue + 13;\n+        int o = intValue + 14;\n+        int p = intValue + 15;\n+        int a1 = ((a & 0x1) << 0) | ((a & 0x3) << 1) | ((a & 0x7) << 3) | ((a & 0xf) << 6) | ((a & 0x1f) << 10) | ((a & 0x3f) << 15) | ((a & 0x7f) << 21);\n+        int b1 = ((b & 0x1) << 0) | ((b & 0x3) << 1) | ((b & 0x7) << 3) | ((b & 0xf) << 6) | ((b & 0x1f) << 10) | ((b & 0x3f) << 15) | ((b & 0x7f) << 21);\n+        int c1 = ((c & 0x1) << 0) | ((c & 0x3) << 1) | ((c & 0x7) << 3) | ((c & 0xf) << 6) | ((c & 0x1f) << 10) | ((c & 0x3f) << 15) | ((c & 0x7f) << 21);\n+        int d1 = ((d & 0x1) << 0) | ((d & 0x3) << 1) | ((d & 0x7) << 3) | ((d & 0xf) << 6) | ((d & 0x1f) << 10) | ((d & 0x3f) << 15) | ((d & 0x7f) << 21);\n+        int e1 = ((e & 0x1) << 0) | ((e & 0x3) << 1) | ((e & 0x7) << 3) | ((e & 0xf) << 6) | ((e & 0x1f) << 10) | ((e & 0x3f) << 15) | ((e & 0x7f) << 21);\n+        int f1 = ((f & 0x1) << 0) | ((f & 0x3) << 1) | ((b & 0x7) << 3) | ((f & 0xf) << 6) | ((f & 0x1f) << 10) | ((f & 0x3f) << 15) | ((f & 0x7f) << 21);\n+        int g1 = ((g & 0x1) << 0) | ((g & 0x3) << 1) | ((a & 0x7) << 3) | ((g & 0xf) << 6) | ((g & 0x1f) << 10) | ((g & 0x3f) << 15) | ((g & 0x7f) << 21);\n+        int h1 = ((h & 0x1) << 0) | ((h & 0x3) << 1) | ((h & 0x7) << 3) | ((h & 0xf) << 6) | ((h & 0x1f) << 10) | ((h & 0x3f) << 15) | ((h & 0x7f) << 21);\n+        int i1 = ((i & 0x1) << 0) | ((i & 0x3) << 1) | ((i & 0x7) << 3) | ((i & 0xf) << 6) | ((i & 0x1f) << 10) | ((i & 0x3f) << 15) | ((i & 0x7f) << 21);\n+        int j1 = ((j & 0x1) << 0) | ((j & 0x3) << 1) | ((j & 0x7) << 3) | ((j & 0xf) << 6) | ((j & 0x1f) << 10) | ((j & 0x3f) << 15) | ((j & 0x7f) << 21);\n+        int k1 = ((k & 0x1) << 0) | ((k & 0x3) << 1) | ((k & 0x7) << 3) | ((k & 0xf) << 6) | ((k & 0x1f) << 10) | ((k & 0x3f) << 15) | ((k & 0x7f) << 21);\n+        int l1 = ((l & 0x1) << 0) | ((l & 0x3) << 1) | ((l & 0x7) << 3) | ((l & 0xf) << 6) | ((l & 0x1f) << 10) | ((l & 0x3f) << 15) | ((l & 0x7f) << 21);\n+        int m1 = ((m & 0x1) << 0) | ((m & 0x3) << 1) | ((m & 0x7) << 3) | ((m & 0xf) << 6) | ((m & 0x1f) << 10) | ((m & 0x3f) << 15) | ((m & 0x7f) << 21);\n+        int n1 = ((n & 0x1) << 0) | ((n & 0x3) << 1) | ((n & 0x7) << 3) | ((n & 0xf) << 6) | ((n & 0x1f) << 10) | ((n & 0x3f) << 15) | ((n & 0x7f) << 21);\n+        int o1 = ((o & 0x1) << 0) | ((o & 0x3) << 1) | ((o & 0x7) << 3) | ((o & 0xf) << 6) | ((o & 0x1f) << 10) | ((o & 0x3f) << 15) | ((o & 0x7f) << 21);\n+        int p1 = ((p & 0x1) << 0) | ((p & 0x3) << 1) | ((p & 0x7) << 3) | ((p & 0xf) << 6) | ((p & 0x1f) << 10) | ((p & 0x3f) << 15) | ((p & 0x7f) << 21);\n+        return a1 + b1 + c1 + d1 + e1 + f1 + g1 + h1 + i1 + j1 + k1 + l1 + m1 + n1 + o1 + p1;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/BitfieldInsert.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}