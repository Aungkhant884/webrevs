{"files":[{"patch":"@@ -45,0 +45,2 @@\n+\n+bool    ArchiveHeapLoader::_narrow_oop_base_initialized = false;\n@@ -62,2 +64,16 @@\n-\/\/ Support for mapped heap (!UseCompressedOops only)\n-ptrdiff_t ArchiveHeapLoader::_runtime_delta = 0;\n+\/\/ Support for mapped heap.\n+bool      ArchiveHeapLoader::_mapped_heap_relocation_initialized = false;\n+ptrdiff_t ArchiveHeapLoader::_mapped_heap_delta = 0;\n+\n+\/\/ Every mapped region is offset by _mapped_heap_delta from its requested address.\n+\/\/ See FileMapInfo::heap_region_requested_address().\n+void ArchiveHeapLoader::init_mapped_heap_relocation(ptrdiff_t delta, int dumptime_oop_shift) {\n+  assert(!_mapped_heap_relocation_initialized, \"only once\");\n+  if (!UseCompressedOops) {\n+    assert(dumptime_oop_shift == 0, \"sanity\");\n+  }\n+  assert(can_map(), \"sanity\");\n+  init_narrow_oop_decoding(CompressedOops::base() + delta, dumptime_oop_shift);\n+  _mapped_heap_delta = delta;\n+  _mapped_heap_relocation_initialized = true;\n+}\n@@ -66,0 +82,2 @@\n+  assert(!_narrow_oop_base_initialized, \"only once\");\n+  _narrow_oop_base_initialized = true;\n@@ -115,1 +133,1 @@\n-    intptr_t runtime_oop = dumptime_oop + ArchiveHeapLoader::runtime_delta();\n+    intptr_t runtime_oop = dumptime_oop + ArchiveHeapLoader::mapped_heap_delta();\n@@ -195,0 +213,4 @@\n+  if (!UseCompressedOops) {\n+    \/\/ Pointer relocation for uncompressed oops is unimplemented.\n+    return false;\n+  }\n@@ -230,0 +252,1 @@\n+    assert(UseCompressedOops, \"PatchLoadedRegionPointers for uncompressed oops is unimplemented\");\n@@ -236,1 +259,0 @@\n-\n@@ -267,1 +289,1 @@\n-      ri->_dumptime_base = (uintptr_t)mapinfo->start_address_as_decoded_from_archive(r);\n+      ri->_dumptime_base = (uintptr_t)mapinfo->heap_region_dumptime_address(r);\n@@ -349,0 +371,1 @@\n+  assert(UseCompressedOops, \"loaded heap for !UseCompressedOops is unimplemented\");\n@@ -389,1 +412,2 @@\n-    ShouldNotReachHere();\n+    \/\/ Uncompressed oops are not supported by loaded heaps.\n+    Unimplemented();\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -76,3 +76,4 @@\n-  static ptrdiff_t runtime_delta() {\n-    assert(!UseCompressedOops, \"must be\");\n-    CDS_JAVA_HEAP_ONLY(return _runtime_delta;)\n+  static ptrdiff_t mapped_heap_delta() {\n+    CDS_JAVA_HEAP_ONLY(assert(!is_loaded(), \"must be\"));\n+    CDS_JAVA_HEAP_ONLY(assert(_mapped_heap_relocation_initialized, \"must be\"));\n+    CDS_JAVA_HEAP_ONLY(return _mapped_heap_delta;)\n@@ -105,2 +106,0 @@\n-  static void init_narrow_oop_decoding(address base, int shift) NOT_CDS_JAVA_HEAP_RETURN;\n-\n@@ -113,0 +112,1 @@\n+  static void init_mapped_heap_relocation(ptrdiff_t delta, int dumptime_oop_shift);\n@@ -135,0 +135,1 @@\n+  static bool    _narrow_oop_base_initialized;\n@@ -138,2 +139,4 @@\n-  \/\/ !UseCompressedOops only: used to relocate pointers to the archived objects\n-  static ptrdiff_t _runtime_delta;\n+  \/\/ is_mapped() only: the mapped address of each region is offset by this amount from\n+  \/\/ their requested address.\n+  static ptrdiff_t _mapped_heap_delta;\n+  static bool      _mapped_heap_relocation_initialized;\n@@ -141,0 +144,1 @@\n+  static void init_narrow_oop_decoding(address base, int shift);\n@@ -164,5 +168,0 @@\n-\n-  static void set_runtime_delta(ptrdiff_t delta) {\n-    assert(!UseCompressedOops, \"must be\");\n-    _runtime_delta = delta;\n-  }\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+  assert(_narrow_oop_base_initialized, \"relocation information must have been initialized\");\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -331,1 +331,2 @@\n-      intptr_t runtime_oop = dumptime_oop + ArchiveHeapLoader::runtime_delta();\n+      assert(!ArchiveHeapLoader::is_loaded(), \"ArchiveHeapLoader::can_load() is not supported for uncompessed oops\");\n+      intptr_t runtime_oop = dumptime_oop + ArchiveHeapLoader::mapped_heap_delta();\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1632,1 +1632,2 @@\n-      mapping_offset = (size_t)CompressedOops::encode_not_null(cast_to_oop(base));\n+      mapping_offset = (size_t)((address)base - CompressedOops::base());\n+      assert((mapping_offset >> CompressedOops::shift()) << CompressedOops::shift() == mapping_offset, \"must be\");\n@@ -1638,1 +1639,0 @@\n-    assert(mapping_offset == (size_t)(uint32_t)mapping_offset, \"must be 32-bit only\");\n@@ -2063,10 +2063,0 @@\n-address FileMapInfo::decode_start_address(FileMapRegion* spc, bool with_current_oop_encoding_mode) {\n-  size_t offset = spc->mapping_offset();\n-  narrowOop n = CompressedOops::narrow_oop_cast(offset);\n-  if (with_current_oop_encoding_mode) {\n-    return cast_from_oop<address>(CompressedOops::decode_raw_not_null(n));\n-  } else {\n-    return cast_from_oop<address>(ArchiveHeapLoader::decode_from_archive(n));\n-  }\n-}\n-\n@@ -2087,1 +2077,1 @@\n-MemRegion FileMapInfo::get_heap_regions_range_with_current_oop_encoding_mode() {\n+MemRegion FileMapInfo::get_heap_regions_requested_range() {\n@@ -2097,1 +2087,1 @@\n-      address s = start_address_as_decoded_with_current_oop_encoding_mode(r);\n+      address s = heap_region_requested_address(r);\n@@ -2099,0 +2089,2 @@\n+      log_info(cds)(\"Heap region %s = \" INTPTR_FORMAT \" - \" INTPTR_FORMAT \" = \"  SIZE_FORMAT_W(8) \" bytes\",\n+                    region_name(i), p2i(s), p2i(e), size);\n@@ -2108,0 +2100,4 @@\n+\n+  start = align_down(start, HeapRegion::GrainBytes);\n+  end = align_up(end, HeapRegion::GrainBytes);\n+\n@@ -2120,1 +2116,6 @@\n-      log_info(cds)(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC, UseSerialGC or UseParallelGC are required.\");\n+      if (!UseCompressedOops && !ArchiveHeapLoader::can_map()) {\n+        \/\/ TODO - remove implicit knowledge of G1\n+        log_info(cds)(\"Cannot use CDS heap data. UseG1GC is required for -XX:-UseCompressedOops\");\n+      } else {\n+        log_info(cds)(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC, UseSerialGC or UseParallelGC are required.\");\n+      }\n@@ -2175,3 +2176,2 @@\n-\/\/ The address where the bottom of this shared heap region should be mapped\n-\/\/ at runtime\n-address FileMapInfo::heap_region_runtime_start_address(FileMapRegion* spc) {\n+\/\/ The actual address of this region during dump time.\n+address FileMapInfo::heap_region_dumptime_address(FileMapRegion* r) {\n@@ -2179,1 +2179,2 @@\n-  spc->assert_is_heap_region();\n+  r->assert_is_heap_region();\n+  assert(is_aligned(r->mapping_offset(), sizeof(HeapWord)), \"must be\");\n@@ -2181,1 +2182,1 @@\n-    return start_address_as_decoded_from_archive(spc);\n+    return \/*dumptime*\/ narrow_oop_base() + r->mapping_offset();\n@@ -2183,2 +2184,1 @@\n-    assert(is_aligned(spc->mapping_offset(), sizeof(HeapWord)), \"must be\");\n-    return header()->heap_begin() + spc->mapping_offset() + ArchiveHeapLoader::runtime_delta();\n+    return heap_region_requested_address(r);\n@@ -2188,1 +2188,7 @@\n-void FileMapInfo::set_shared_heap_runtime_delta(ptrdiff_t delta) {\n+\/\/ The address where this region can be mapped into the runtime heap without\n+\/\/ patching any of the pointers that are embedded in this region.\n+address FileMapInfo::heap_region_requested_address(FileMapRegion* r) {\n+  assert(UseSharedSpaces, \"runtime only\");\n+  r->assert_is_heap_region();\n+  assert(is_aligned(r->mapping_offset(), sizeof(HeapWord)), \"must be\");\n+  assert(ArchiveHeapLoader::can_map(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n@@ -2190,1 +2196,13 @@\n-    ArchiveHeapLoader::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+    \/\/ We can avoid relocation if each region's offset from the runtime CompressedOops::base()\n+    \/\/ is the same as its offset from the CompressedOops::base() during dumptime.\n+    \/\/ Note that CompressedOops::base() may be different between dumptime and runtime.\n+    \/\/\n+    \/\/ Example:\n+    \/\/ Dumptime base = 0x1000 and shift is 0. We have a region at address 0x2000. There's a\n+    \/\/ narrowOop P stored in this region that points to an object at address 0x2200.\n+    \/\/ P's encoded value is 0x1200.\n+    \/\/\n+    \/\/ Runtime base = 0x4000 and shift is also 0. If we map this region at 0x5000, then\n+    \/\/ the value P can remain 0x1200. The decoded address = (0x4000 + (0x1200 << 0)) = 0x5200,\n+    \/\/ which is the runtime location of the referenced object.\n+    return \/*runtime*\/ CompressedOops::base() + r->mapping_offset();\n@@ -2192,1 +2210,3 @@\n-    ArchiveHeapLoader::set_runtime_delta(delta);\n+    \/\/ We can avoid relocation if each region is mapped into the exact same address\n+    \/\/ where it was at dump time.\n+    return \/*dumptime*\/header()->heap_begin() + r->mapping_offset();\n@@ -2196,0 +2216,9 @@\n+\/\/ The address where this shared heap region is actually mapped at runtime. This function\n+\/\/ can be called only after we have determined the value for ArchiveHeapLoader::mapped_heap_delta().\n+address FileMapInfo::heap_region_mapped_address(FileMapRegion* r) {\n+  assert(UseSharedSpaces, \"runtime only\");\n+  r->assert_is_heap_region();\n+  assert(ArchiveHeapLoader::can_map(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n+  return heap_region_requested_address(r) + ArchiveHeapLoader::mapped_heap_delta();\n+}\n+\n@@ -2211,3 +2240,16 @@\n-  if (narrow_oop_mode() != CompressedOops::mode() ||\n-      narrow_oop_base() != CompressedOops::base() ||\n-      narrow_oop_shift() != CompressedOops::shift()) {\n+  \/\/ G1 -- always map at the very top of the heap to avoid fragmentation.\n+  assert(UseG1GC, \"the following code assumes G1\");\n+  _heap_pointers_need_patching = false;\n+\n+  MemRegion heap_range = G1CollectedHeap::heap()->reserved();\n+  MemRegion archive_range = get_heap_regions_requested_range();\n+\n+  address heap_end = (address)heap_range.end();\n+  address archive_end = (address)archive_range.end();\n+\n+  assert(is_aligned(heap_end, HeapRegion::GrainBytes), \"must be\");\n+  assert(is_aligned(archive_end, HeapRegion::GrainBytes), \"must be\");\n+\n+  if (UseCompressedOops &&\n+      (narrow_oop_mode() != CompressedOops::mode() ||\n+       narrow_oop_shift() != CompressedOops::shift())) {\n@@ -2216,0 +2258,5 @@\n+  } else if (!heap_range.contains(archive_range)) {\n+    log_info(cds)(\"CDS heap data needs to be relocated because\");\n+    log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(archive_range.start()), p2i(archive_range.end()));\n+    log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(heap_range.start()), p2i(heap_range.end()));\n+    _heap_pointers_need_patching = true;\n@@ -2217,23 +2264,4 @@\n-    if (UseCompressedOops) {\n-      MemRegion range = get_heap_regions_range_with_current_oop_encoding_mode();\n-      if (!CompressedOops::is_in(range)) {\n-        log_info(cds)(\"CDS heap data needs to be relocated because\");\n-        log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(range.start()), p2i(range.end()));\n-        log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(CompressedOops::begin()), p2i(CompressedOops::end()));\n-        _heap_pointers_need_patching = true;\n-      } else if (header()->heap_end() != CompressedOops::end()) {\n-        log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n-        _heap_pointers_need_patching = true;\n-      }\n-    } else {\n-      MemRegion range((HeapWord*)header()->heap_begin(), (HeapWord*)header()->heap_end());\n-      if (!G1CollectedHeap::heap()->reserved().contains(range)) {\n-        log_info(cds)(\"CDS heap data needs to be relocated because\");\n-        log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(range.start()), p2i(range.end()));\n-        log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT,\n-            p2i((address)G1CollectedHeap::heap()->reserved().start()), p2i((address)G1CollectedHeap::heap()->reserved().end()));\n-        _heap_pointers_need_patching = true;\n-      } else if (header()->heap_end() != (address)G1CollectedHeap::heap()->reserved().end()) {\n-        log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n-        _heap_pointers_need_patching = true;\n-      }\n+    assert(heap_end >= archive_end, \"must be\");\n+    if (heap_end != archive_end) {\n+      log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n+      _heap_pointers_need_patching = true;\n@@ -2245,23 +2273,1 @@\n-    \/\/   dumptime heap end  ------------v\n-    \/\/   [      |archived heap regions| ]         run time heap end -----v\n-    \/\/                                       [   |archived heap regions| ]\n-    \/\/          ^\n-    \/\/          D                                ^\n-    \/\/                                           R\n-    \/\/                                  |<-----delta-------------------->|\n-    \/\/\n-    \/\/ At dump time, the archived heap regions were near the top of the heap.\n-    \/\/ At run time, if the heap ends at a different address, we need to\n-    \/\/ move them near to top of the run time heap. This can be done by\n-    \/\/ the simple math of adding the delta as shown above.\n-    \/\/\n-    \/\/ Also: D = bottom of a heap region at dump time\n-    \/\/       R = bottom of a heap region at run time\n-    \/\/\n-    \/\/ FileMapRegion* spc = ...;\n-    \/\/   address D = header()->heap_begin() + spc->mapping_offset();\n-    \/\/   address R = D + delta;\n-    address dumptime_heap_end = header()->heap_end();\n-    address runtime_heap_end = UseCompressedOops ? CompressedOops::end() :\n-                                                   (address)G1CollectedHeap::heap()->reserved().end();\n-    delta = runtime_heap_end - dumptime_heap_end;\n+    delta = heap_end - archive_end;\n@@ -2272,2 +2278,0 @@\n-  set_shared_heap_runtime_delta(delta);\n-\n@@ -2275,1 +2279,1 @@\n-  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(r);\n+  address relocated_closed_heap_region_bottom = heap_region_requested_address(r) + delta;\n@@ -2287,2 +2291,0 @@\n-    set_shared_heap_runtime_delta(delta);\n-    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(r);\n@@ -2291,0 +2293,4 @@\n+\n+  ArchiveHeapLoader::init_mapped_heap_relocation(delta, narrow_oop_shift());\n+  relocated_closed_heap_region_bottom = heap_region_mapped_address(r);\n+\n@@ -2356,1 +2362,1 @@\n-      HeapWord* start = (HeapWord*)heap_region_runtime_start_address(r);\n+      HeapWord* start = (HeapWord*)heap_region_mapped_address(r);\n@@ -2421,1 +2427,0 @@\n-  log_info(cds)(\"patching heap embedded pointers\");\n@@ -2436,1 +2441,18 @@\n-    FileMapRegion* r = region_at(i + first_region_idx);\n+    int region_idx = i + first_region_idx;\n+    FileMapRegion* r = region_at(region_idx);\n+    if (UseCompressedOops) {\n+      \/\/ These are the encoded values for the bottom of this region at dump-time vs run-time:\n+      narrowOop dt_encoded_bottom = CompressedOops::narrow_oop_cast(r->mapping_offset() >> narrow_oop_shift());\n+      narrowOop rt_encoded_bottom = CompressedOops::encode_not_null(cast_to_oop(regions[i].start()));\n+      log_info(cds)(\"patching heap embedded pointers for %s: 0x%8x -> 0x%8x\",\n+                    region_name(region_idx), (uint)dt_encoded_bottom, (uint)rt_encoded_bottom);\n+      \/\/ TODO JDK-8269736: if we have the same narrow_oop_shift between dumptime and runtime,\n+      \/\/ Each embedded pointer P can be updated by:\n+      \/\/     P += (rt_encoded_bottom - dt_encoded_bottom)\n+      \/\/\n+      \/\/ TODO:\n+      \/\/ if (dt_encoded_bottom == rt_encoded_bottom && narrow_oop_shift() == CompressedOops::shift()) {\n+      \/\/   \/\/nothing to do\n+      \/\/   return;\n+      \/\/ }\n+    }\n@@ -2602,0 +2624,1 @@\n+  assert(UseSharedSpaces, \"must be\");\n@@ -2603,7 +2626,1 @@\n-  if (HeapShared::is_heap_region(idx)) {\n-    assert(DumpSharedSpaces, \"The following doesn't work at runtime\");\n-    return r->used() > 0 ?\n-          (char*)start_address_as_decoded_with_current_oop_encoding_mode(r) : NULL;\n-  } else {\n-    return r->mapped_base();\n-  }\n+  return r->mapped_base();\n@@ -2729,11 +2746,0 @@\n-\/\/ Check if a given address is within one of the shared regions\n-bool FileMapInfo::is_in_shared_region(const void* p, int idx) {\n-  assert(idx == MetaspaceShared::ro ||\n-         idx == MetaspaceShared::rw, \"invalid region index\");\n-  char* base = region_addr(idx);\n-  if (p >= base && p < base + region_at(idx)->used()) {\n-    return true;\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":106,"deletions":100,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-  MemRegion get_heap_regions_range_with_current_oop_encoding_mode() NOT_CDS_JAVA_HEAP_RETURN_(MemRegion());\n+  MemRegion get_heap_regions_requested_range() NOT_CDS_JAVA_HEAP_RETURN_(MemRegion());\n@@ -493,1 +493,0 @@\n-  bool is_in_shared_region(const void* p, int idx) NOT_CDS_RETURN_(false);\n@@ -586,2 +585,0 @@\n-  address heap_region_runtime_start_address(FileMapRegion* spc) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n-  void set_shared_heap_runtime_delta(ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -594,6 +591,0 @@\n-  address decode_start_address(FileMapRegion* spc, bool with_current_oop_encoding_mode);\n-\n-  \/\/ The starting address of spc, as calculated with CompressedOop::decode_non_null()\n-  address start_address_as_decoded_with_current_oop_encoding_mode(FileMapRegion* spc) {\n-    return decode_start_address(spc, true);\n-  }\n@@ -601,4 +592,3 @@\n-  \/\/ The starting address of spc, as calculated with HeapShared::decode_from_archive()\n-  address start_address_as_decoded_from_archive(FileMapRegion* spc) {\n-    return decode_start_address(spc, false);\n-  }\n+  address heap_region_dumptime_address(FileMapRegion* r) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  address heap_region_requested_address(FileMapRegion* r) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  address heap_region_mapped_address(FileMapRegion* r) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -959,5 +959,0 @@\n-\/\/ Return true if given address is in the misc data region\n-bool MetaspaceShared::is_in_shared_region(const void* p, int idx) {\n-  return UseSharedSpaces && FileMapInfo::current_info()->is_in_shared_region(p, idx);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -117,3 +117,0 @@\n-  \/\/ Return true if given address is in the shared region corresponding to the idx\n-  static bool is_in_shared_region(const void* p, int idx) NOT_CDS_RETURN_(false);\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+  assert(ArchiveHeapLoader::are_archived_strings_available(), \"sanity\");\n@@ -80,0 +81,1 @@\n+    assert(!ArchiveHeapLoader::is_loaded(), \"Pointer relocation for uncompressed oops is unimplemented\");\n@@ -84,1 +86,1 @@\n-                           (intptr_t)ArchiveHeapLoader::runtime_delta();\n+                           (intptr_t)ArchiveHeapLoader::mapped_heap_delta();\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,3 +53,11 @@\n-  size_t  _mapping_offset;    \/\/ This region should be mapped at this offset from the base address\n-                              \/\/ - for non-heap regions, the base address is SharedBaseAddress\n-                              \/\/ - for heap regions, the base address is the compressed oop encoding base\n+  size_t  _mapping_offset;    \/\/ This encodes the requested address for this region to be mapped at runtime.\n+                              \/\/ However, the JVM may choose to map at an alternative location (e.g., for ASLR,\n+                              \/\/ or to adapt to the available ranges in the Java heap range).\n+                              \/\/ - For an RO\/RW region, the requested address is:\n+                              \/\/     FileMapHeader::requested_base_address() + _mapping_offset\n+                              \/\/ - For a heap region, the requested address is:\n+                              \/\/     +UseCompressedOops: \/*runtime*\/ CompressedOops::base() + _mapping_offset\n+                              \/\/     -UseCompressedOops: FileMapHeader::heap_begin() + _mapping_offset\n+                              \/\/     See FileMapInfo::heap_region_requested_address().\n+                              \/\/ - For bitmap regions, the _mapping_offset is always zero. The runtime address\n+                              \/\/   is picked by the OS.\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,0 +40,21 @@\n+\/\/ Below is exactly the same as above, except:\n+\/\/ - requires vm.bits == \"64\"\n+\/\/ - extra argument \"false\"\n+\n+\/*\n+ * @test Loading CDS archived heap objects into SerialGC\n+ * @bug 8234679\n+ * @requires vm.cds\n+ * @requires vm.gc.Serial\n+ * @requires vm.gc.G1\n+ * @requires vm.bits == \"64\"\n+ *\n+ * @comment don't run this test if any -XX::+Use???GC options are specified, since they will\n+ *          interfere with the test.\n+ * @requires vm.gc == null\n+ *\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestSerialGCWithCDS false\n+ *\/\n+\n@@ -46,0 +67,1 @@\n+    static boolean useCompressedOops = true;\n@@ -50,0 +72,4 @@\n+        if (args.length > 0 && args[0].equals(\"false\")) {\n+            useCompressedOops = false;\n+        }\n+\n@@ -57,1 +83,3 @@\n-        if (Platform.is64bit()) test(false, true, true);\n+        if (Platform.is64bit()) {\n+            test(false, true, \/*useSmallRegions=*\/true);\n+        }\n@@ -68,0 +96,1 @@\n+        String DUMMY = \"-showversion\"; \/\/ A harmless option that doesn't doesn't do anything except for printing out the version\n@@ -70,2 +99,8 @@\n-        String small1 = useSmallRegions ? \"-Xmx256m\" : \"-showversion\";\n-        String small2 = useSmallRegions ? \"-XX:ObjectAlignmentInBytes=64\" : \"-showversion\";\n+        String small1 = useSmallRegions ? \"-Xmx256m\" : DUMMY;\n+        String small2 = useSmallRegions ? \"-XX:ObjectAlignmentInBytes=64\" : DUMMY;\n+        String coops;\n+        if (Platform.is64bit()) {\n+            coops = useCompressedOops ? \"-XX:+UseCompressedOops\" : \"-XX:-UseCompressedOops\";\n+        } else {\n+            coops = DUMMY;\n+        }\n@@ -80,0 +115,1 @@\n+                              coops,\n@@ -89,0 +125,1 @@\n+                              coops,\n@@ -91,2 +128,1 @@\n-        out.shouldContain(HELLO);\n-        out.shouldHaveExitValue(0);\n+        checkExecOutput(dumpWithSerial, execWithSerial, out);\n@@ -99,0 +135,1 @@\n+                              coops,\n@@ -102,1 +139,0 @@\n-        out.shouldContain(HELLO);\n@@ -109,1 +145,1 @@\n-        out.shouldHaveExitValue(0);\n+        checkExecOutput(dumpWithSerial, execWithSerial, out);\n@@ -129,0 +165,1 @@\n+                                      coops,\n@@ -132,1 +169,1 @@\n-                    out.shouldContain(HELLO);\n+                    checkExecOutput(dumpWithSerial, execWithSerial, out);\n@@ -145,0 +182,14 @@\n+\n+    static void checkExecOutput(boolean dumpWithSerial, boolean execWithSerial, OutputAnalyzer out) {\n+        String errMsg = \"Cannot use CDS heap data. UseG1GC is required for -XX:-UseCompressedOops\";\n+        if (Platform.is64bit() &&\n+            !dumpWithSerial && \/\/ Dumped with G1, so we have an archived heap\n+            execWithSerial && \/\/ Running with serial\n+            !useCompressedOops) { \/\/ ArchiveHeapLoader::can_load() always returns false when COOP is disabled\n+            out.shouldContain(errMsg);\n+        }\n+        if (!execWithSerial) {\n+            \/\/ We should never see this message in GC\n+            out.shouldNotContain(errMsg);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestSerialGCWithCDS.java","additions":59,"deletions":8,"binary":false,"changes":67,"status":"modified"}]}