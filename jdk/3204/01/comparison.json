{"files":[{"patch":"@@ -55,9 +55,9 @@\n- * exact result cannot be represented, an exception is thrown;\n- * otherwise, calculations can be carried out to a chosen precision\n- * and rounding mode by supplying an appropriate {@link MathContext}\n- * object to the operation.  In either case, eight <em>rounding\n- * modes<\/em> are provided for the control of rounding.  Using the\n- * integer fields in this class (such as {@link #ROUND_HALF_UP}) to\n- * represent rounding mode is deprecated; the enumeration values\n- * of the {@code RoundingMode} {@code enum}, (such as {@link\n- * RoundingMode#HALF_UP}) should be used instead.\n+ * exact result cannot be represented, an {@code ArithmeticException}\n+ * is thrown; otherwise, calculations can be carried out to a chosen\n+ * precision and rounding mode by supplying an appropriate {@link\n+ * MathContext} object to the operation.  In either case, eight\n+ * <em>rounding modes<\/em> are provided for the control of rounding.\n+ * Using the integer fields in this class (such as {@link\n+ * #ROUND_HALF_UP}) to represent rounding mode is deprecated; the\n+ * enumeration values of the {@code RoundingMode} {@code enum}, (such\n+ * as {@link RoundingMode#HALF_UP}) should be used instead.\n@@ -106,2 +106,1 @@\n- * First, the\n- * total number of digits to return is specified by the\n+ * First, the total number of digits to return is specified by the\n@@ -197,0 +196,5 @@\n+ * <p>As a 32-bit integer, the set of values for the scale is large,\n+ * but bounded. If the scale of a result would exceed the range of a\n+ * 32-bit integer, either by overflow or underflow, the operation may\n+ * throw an {@code ArithmeticException}.\n+ *\n@@ -211,1 +215,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"}]}